I asked this question, though worded slightly differently a few weeks back. On my servers I like python as a scripting language, as a bash replacement, so I wanted to use it for web development. I wanted to know where that middle ground, between stand alone CGI calls that don't benefit from caching and optimization and framework based application running as independent instances, was for small single task script based pages. I wanted to be able to tweak a script in real time, like I would with PHP, and just reload in the browser to see the results. The answer is that it isn't easily possible. I believe this is because of two issues. * One, web development has left us, as sysadmins, behind. No one wants to build quick, easy to deploy, tools; they want applications, or suites of interconnected tools. So fuck us we don't matter anymore. * Secondly, PHP still fulfills our needs. And while it isn't as clean, pretty, or powerful as python people are still willing to use it because it works. I am sure that when the PHP developers and community inevitably start falling apart that we will see some effort to recreate this level of utility in Python. Or more than likely there will be some new wizbang interpreted language that we will move to. Now to really answer your question. Technically you don't need a framework. But you either have to use straight CGI calls from a webserver to stand alone script, like you would with bash scripts, or you have to write the web server yourself, leave it running all the time, and parse the requests then decide how you want to respond, etc., etc. Don't do this. Look at Flask, as a micro framework that will do all the HTTP work for you, and go from there.
What value a PHP Framework adds: http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html How are you testing the framework and the application now? https://github.com/westurner/wiki/wiki/awesome-python-testing#web-frameworks https://github.com/TechEmpower/FrameworkBenchmarks https://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks
Well there's always this...I didn't think about this when I commented before. Per the fabled Guido and Python 2.4 (shudder). &gt; In languages that do not support multiple dispatch at the language definition or syntactic level, it is often possible to add multiple dispatch using a library extension. For example, the module multimethods.py[7] provides CLOS-style multimethods for Python without changing the underlying syntax or keywords of the language. from multimethods import Dispatch from game_objects import Asteroid, Spaceship from game_behaviors import ASFunc, SSFunc, SAFunc collide = Dispatch() collide.add_rule((Asteroid, Spaceship), ASFunc) collide.add_rule((Spaceship, Spaceship), SSFunc) collide.add_rule((Spaceship, Asteroid), SAFunc) def AAFunc(a, b): """Behavior when asteroid hits asteroid""" # ...define new behavior... collide.add_rule((Asteroid, Asteroid), AAFunc) # ...later... collide(thing1, thing2) http://en.wikipedia.org/wiki/Multiple_dispatch &gt; If it doesn't fundamentally prevent you from doing anything why not just use assembly? That's a reduction to the absurd fallacy. Why not just design your own OS? Also, coding in assembly won't give you the capability you want :)
But yes; PHP is a mini framework. PHP is built around handling web requests for an application. There's a lot of code to get raw bytes streaming in from the socket into your PHP template. You can rewrite all these with plain python using sockets and a ton of knowledge (how do you parse HTTP headers? How do you set/retrieve/store cookies? How do you handle string replacements and HTML rendering?), but that's just reinventing the wheel. Frameworks do a lot or a little. You can get heavy frameworks (Django) or light ones (flask, etc). The light ones are closer to what PHP gives you by default. Pick one that sounds good and try it. For anything non-trivial, plain PHP is awful. After using django (and even JSP, ASP.NET, etc) I'd never want to go back to plain PHP. In fact, even with a PHP framework I'd much rather be on the others. They're just so nice.
You absolutely can create a large website without a known framework. The question is - why would you? When a web project hits a certain level of complexity, similar patterns emerge, virtually every time. Mainly because you need your code to remain maintainable and flexible as it grows. So you start going for the separation of the data model, view code and some glue manipulating the former, which usually means a mixture of routers, controllers and services working with some type of an event system. This is where an MVW (Model-View-Whatever) framework comes in. You get data persistence layers that separate underlying data storage from model definitions and operations on models. You get a set of view classes that are able to render your model as HTML, XML, JSON or whatever other format, and then serve them in an HTTP (or other kind of) response of your choice. Most importantly, a whole architecture for defining and manipulating application logic will also be there. Perhaps even more importantly, you also gain access to a whole ecosystem of helper classes, interfaces and modules for solving common issues: * session management * user authorization and authentication * permission management * RESTful endpoint creation * basic encryption (for passwords, API tokens and other data) * user input sanitization * configuration management * event logging * ... You will need most of the above at some point. So, can you start without a framework? Absolutely. Can you work without one above a certain level of complexity? No. The only choice you have is between using a wheel that already exists or inventing your own.
Seems right to me. /r/learnpython is more suitable for this kind of question.
As others have stated, the answer here is the same as comes with basically any external library. You never need it, but the time savings are very hard to write off. I can do a project in days with Django that would take me months without.
Ideally people are using php fpm and nginx nowadays. Just a minor thing I wanted to mention. 
You can simulate Python objects in assembly, but that's not the same as using Python. You can simulate multiple dispatch in Python, but that's not the same as using Julia. It's not a reduction at all, it's the exact same logic. Yes, I can import multimethods.py, but that doesn't let me override any of the methods in any Python library without reimplementing the whole thing *using* multimethods.py. So it doesn't have any practical use. Whereas in Julia multimethods are present throughout the language and libraries, which has a real impact on what you can do. To clarify, I'm not arguing about better or worse here, I'm just saying that "turing equivalent" != "the same".
&gt; `foo.bar(quux)` to resolve to a different function from `foo.bar(yabba)` That's single dispatch. Multiple dispatch is having a generic function `bar(a, b)` and resolving `bar(quux, quux)` vs `bar(quux, yabba)` vs `bar(yabba, quux)` vs `bar(yabba, yabba)` to up to 4 different methods. Generic functions in multiple dispatch are not owned by classes.
My favorite pandas tutorials or quick how-tos: [link1](http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/) - you probably want to check out part 3 [link2](http://manishamde.github.io/blog/2013/03/07/pandas-and-python-top-10/) - maybe a little bit outdated [link3](http://www.analyticsvidhya.com/blog/2014/08/baby-steps-python-performing-exploratory-analysis-python/) - maybe a bit too basic ggplot tutorials: [link4](https://github.com/glamp/ggplot-tutorial/tree/master/notebooks) - ggplot tutorials based on this presentation on [youtube](https://www.youtube.com/watch?v=pHrwqLhAaMw) [link5](http://blog.yhathq.com/posts/ggplot-for-python.html) - official yhat ggplot intro EDIT: have you also tried the official pandas [documentation](http://pandas.pydata.org/pandas-docs/stable/) and/or cookbook? The [gallery](https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks) of interesting ipython notebooks may be of interest to you too.
why
Large PHP projects use frameworks - have a look at Symfony, Zend, Cake. You can reinvent the wheel everytime, but that's a bad idea. You can make your own framework - but a thousand people contributing to a project for years **might** do a better job at making framework that you will alone in a month. Google and Facebook have made their own framework - look at AngularJS and React.
What do you want to do with it? If what you're primarily after is a framework for asynchronous programming to handle socket connections nicely, [asyncio](https://docs.python.org/3/library/asyncio.html) is the thing to look at. If it's something web based, [Tornado](http://www.tornadoweb.org/en/stable/) does a good job, including with things like websockets. If there's a particular protocol you need to talk to, you might want to look for a specific module targeting that. I don't think there's a big all-in-one thing like Twisted yet.
Fair enough. It's been a long time since I toiled in the PHP mines!
So you could run GIMP Script-Fu functions from within Excel? Or interact with OpenCV? Watch out, Photoshop and Matlab! Exporting the spreadsheet to an image could also be good: then after all of the Excel Photo Processing Logic runs, you could save to a format optimized for the web (e.g. web-safe colors, compression, etc.). Next step: 3D/4D/5D &amp; Beyond. Get some Blender integration in there, Stereo-Video editing, etc.
Somebody set up apache for you so that you can run php, maybe if you ask nicely they'll setup python so that it can handle requests too.
Ok I think that make sense. So uwsgi is the magic of python web coding that provides the simplicity that mod_php allows you to code behind in PHP. Further if you want to take advantage of uwsgi you'd need a framework to put yourself on the same level as PHP or write your own light weight complex but custom layer
You don't _need_ a framework. Go write a simple web app from scratch in Python, then you'll understand why you may _want_ a framework.
Ok, I looked at it. Other than the logger not having a NullHandler and the pokemon exception catching, looks pretty good. With regards to the exception handling, you're not making use of log.exception. It also is a bit weird that you don't specify which exceptions, which can both enhance debugging and user experience (i.e. An auth failure is easy for a user to correct, etc). Use your logger!
PHP is easy to get started with because you can write a file, deploy it on some random server and it will work. For this to work, there is a lot of magic behind the scene. The base PHP language is already a minimal web framework in a sense. It parses headers, cookies, query parameters, etc. The base python language is not a minimal web framework. It is mainly just a general purpose language. You can use it without any framework but you will have to parse the headers, cookies, query parameters, etc yourself. It is mostly redundant because a minimal framework will all do this for you.
Sometimes you just want to make your own damn wheel.
Great find. Just an FYI this book covers Python 3.
You can also go lighter with werkzeug. I've made my own that way. I've also done it the straight socket way. It's not too difficult to work directly with wsgi. The documentation is good. 
Break cpython: from ctypes import c_int8 from struct import calcsize from __future__ import print_function c_int8.from_address(id(4) + calcsize('PP')).value = 5 print(4) and in cpython3: from ctypes import c_int8 from struct import calcsize c_int8.from_address(id(4) + calcsize('PPP')).value = 5 print(4) It makes the number 4 have the value 5. I'm not sure if it can be undone, but I'm sure if you run it long enough stuff will crash. It works because CPython implementation makes everything a C "pyobject" including integers. To speed up math operations, the first 256 integers are preloaded into memory. Because these objects behind the scene are reference based, when you write 2+2 you're actually invoking add on a reference to the 2 object and passing it the value of another reference of the 2 object. For whatever reason this trick doesn't work with 0 or 1 because they're so widely used in the interpreter, but it does happen to work with 4. What you do is call ctypes to manipulate a byte (c_int8) of memory on the python heap. Where exactly? At the starting address of 4 with some offset. To get the starting address of 4 we ask for its ID, which in Cpython is the address (it only promises to be unique in python spec, since you can't have 2 distinct objects in the same part of memory, this works for unique). The actual value that 4 holds is slightly offset from the start of the object, as the beginning is overhead. We determine that value in a platform (32b/64b) agnostic manner. The string 'PP' corresponds to two pointers length offset. Since the PyObject in python2 has 2 pointers before the address storing the value, we use PP, in Python3 there are 3 pointers so we use PPP. For 32bit the P offset will be 4 words (4 x 8bits = 32bits); PP = 8, PPP=12; For 64 bit, the P offset will be 8 words, (8 x 8 = 64bits); PP = 16, PPP= 24. We then tell ctypes that we want to work with the value at that address, not the address itself. The value is set to 4... we change that value to a 5. Voila now 4 = 5. 
Asyncio is the answer you're looking for. It's built into python 3.4.
Only for Kindle users :(
For fun or education - yes. In a production environment - no. Unless you are Google, Amazon or Facebook and you face a problem nobody earlier solved for your combination of requirements and constraints. Which is very unlikely.
Unavailable outside the US. :-(
PyCharm 
You do not get it. I am going to coffeescript, html is dead to me. If I were not working so much on math, I would already be there.
Community edition is free!
Named tuples are actually really nice, but you can't use them for multiple dispatch as easily, and they do hacky things.
IDLE
 print('Content-Type: text/html\n') # oh shit, did I forget to set that essential cookie? ...yeah...
Asyncio is very low level though. It may not be what OP looks for. We need more informations.
Have you ever written or read any python? In the expression `foo.bar(quux)`, `foo` is just the first argument to the function `bar`. That's actually (but implicitly) the case in all other object oriented languages too, of course.
&gt; I wanted to be able to tweak a script in real time, like I would with PHP, and just reload in the browser to see the results. Django allows this. Gunicorn allows this. I'd be shocked if uwsgi doesn't allow this. Off the top of my head, I can think of the following python frameworks intended to support small web scripts: * flask * bottle.py * cherrypy * web2py 
I use it to connect PyCharm to the Python interpreter on my development Vagrant box. Very handy, especially for navigating through the code, including installed third-party packages. I believe you can also use it for debugging, although I primarily use ipdb for that.
You can have static types without having everything be a static type. Guido has approved a type annotation system for objects. It's certainly going to help JITs. It's kind of like saying operating on a list of floats will be slow. That's why people use numpy arrays. That doesn't mean you have to use numpy arrays all the time. Profile first, then optimize. However, if we're ever going to get back the 100-1000x performance loss Python took, we're going to have to do something. Some optional types? No biggie.
this answer has no sense :) , please figure that out.
$8.74 for me here in Australia.
Jeez-louise; $10.50 for me. (Belgium)
Good question. I love pycharm and I tested remote interpreter a few times but I find it slow, and this is on 16gb i7 with ssd and hyperv machines on loopback interface. I rather open vnc session and use pycharm on X Windows if I need something Linux specific. Maybe I should try pycharm remote over something else than ssh if possible... remember telnet? For remote deployment on Linux don't waste your time and use salt. Don't use fabric for anything else than setting up salt . You will thank me later. 
Pycharm runs on my laptop, so it's nice and responsive. Code runs on my server which is much more powerful. Its a very good mix.
Yeah, really should have made that more clear, sorry. I was interested in Twisted and diesel because it had everything and was relatively high-level (as far as i could see as newbie) so I guess I'll have to try and learn some asyncio til either is ported or something similar pops up.
thx
thx
link??
It comes with python.
hi pls try #!/usr/bin/python from os import listdir from os.path import isfile files = [i for i in listdir('.') if isfile(f)] for i in files: print(f)
Thanks! :) Can you give me an example?
lol
I can't get this to run? :(
 sry reddit is wierd #!/usr/bin/env python3 from os import listdir from os.path import isfile files = [f for f in listdir('.') if isfile(f)] for f in files: print(f)
There's an example in the link that I gave you, and I believe there's a few in the official documentation. Give it a look over and come up with something that works for you. :)
Pycharm doesn't offer live editing of pages like Coda. Code is more for static creation. You can hook it up to live databases and cms systems, but generally you are working with static data while you design the webpage. Pycharm is more than Coda, it's a full IDE for python. I presume you are using something like Django as a framework for a python website, so in that case, as you make changes to content to data on the pages, you need to reload the django environment, which isn't really practical in realtime. If you want live editing like Coda, then use Coda to do that with static data while you modify your CSS for instance, then save that back to the project. You don't have to exclusively stick on one tool. For instance you don't ask PyCharm or Coda why I can't create graphics when thats what you would use Photoshop for right.
Thanks! This doesn't list directories though, can you make it do that?
but it has live template no??
i use django and want live templates ......
Not sure why it's being downvoted. This is a fair point. Have you actually tried anything, or are you just wanting somebody else to tell you. I think thats a fair link.
Not what you are thinking of. Live templates in PyCharm are just code snippets, allowing you to insert common code fast. https://www.jetbrains.com/pycharm/webhelp/live-templates.html
You also forgot that the HTTP spec requires you to use CRLF as line delimiters in headers, so it would be print('Content-Type: text/html\r\n') Most browsers will work fine with LF only, but someone will find a combination of browser, firewall and proxy that doesn't and you get hard to analyse bug reports about "things not working". Subtle traps like these are another reason to use frameworks. Even if the framework itself did it wrong, someone else probably already fell into it and after the bug is fixed, you'd get the fix for free.
clearly a troll who has read the very article i posted. So, yes. Reddit is veeeery weird (and sometimes lazy and stupid ^^)
£6.17 for me here in the UK.
wierd thks
not free in uk!!
$9.99 in 'Merica.
I'm not being rude. A simple google search would have pointed to stackoverflow with a lot of other people asking the same question. With answers there too. The point about that post is really getting people to think about how to solve a problem rather than just being provided an answer. Its helping breakdown a issue into manageable chunks and then process each possible option until none of them solve the issue, then ask a question about why not. Often you will find that breaking down the issue, or even trying various things, you will come across the right answer to your question, it's also a good way to learn more about what you are looking at, or even come across other things that in the future you might be able to reference. Often, if you can't solve the question you are asking, but have tried things, then people can answer why the things you tried didn't work. It's possible you could be close, but mistaken a returned object as one type, when it was another, etc.
I think you really need to ask a more complete question though. What are you actually trying to accomplish? Django is just a framework, python is just a language. Are you looking at creating a blog, a complex cms, trying to use a CMS built on django, etc. Maybe there is more to what you are looking for.
I'd say most code does. I was writing c# last night and I was able to use functional techniques to greatly improve the quality of the code. Functional programing is definitely useful in OOP languages. 
Interesting. It seems that complaints about it not being free have only arisen in the past hour. I wonder if the limited time is up.
I just found [Cyrille Rossant's](http://cyrille.rossant.net/) data science [cookbook on github](https://github.com/ipython-books/cookbook-code). It's amazing. All in well documented ipython. Lots of pandas examples. I find it much easier to follow than Wes's book. Edit: accuracy
'splain?
 #!/usr/bin/env python3 from os import listdir from os.path import isfile files = [f for f in listdir('.')] for f in files: print(f)
i want preview of html css in ide to make django website django template is html css an python how to preview template in ide like in http://www.macrabbit.com/espresso/ but pycharm or other python ide
http://www.macrabbit.com/espresso/ has python ruby php apache javascript markdon html 5
django flask web2py pyramide pylons for web sites pyqt pyside pywx pytkinter for gui pygame for games twisted asyncoro gevent celery for network
Yup. Because this was a databases class, the framework handled routing, some dependency injection, and templating utilities. Databases where straight DBAPI. Templating was a wrapper around kid (now genshi). Routing was regexes on a decorator, etc. Writing on the WSGI layer is extremely tedious. If I needed to do this again, I would just use flask.
Stop learning from books and go write some useful code.
I really have a hard time understanding most of these words..Sorry
One of the best skills to develop as a programmer: knowing how to search for things. Don't know what that word means? Google. Haven't seen that error before and don't know what could cause it? Google. You probably aren't the first person to wonder and likely someone else has already been given an answer.
Yeah that makes sense. For a while my thoughts were strictly against all frameworks of any kind just because I always wanted to tackle the hardest stuff myself and make a large scalable project that is entirely custom however thanks to the comments on my post and further research obviously some external support is necessary. I'll be checking out some frameworks soon. I made a PHP MVC framework for a larger site I worked on and I would like to recreate this in Python with perhaps Django underneath obviously, or some framework I will choose. This all makes more sense now though it has been explained in detail!
Working directly with WSGI gives you the opportunity to build, in a custom way, the lowest level of code that interacts with the Apache server? This is the stuff a regular nicely packaged and promoted framework would do to an extent? Working directly with WSGI sounds interesting though I don't know if it is necessary for me to deal with. However it sounds very interesting to learn about. It seems you could make the low level optimizations that would be perfectly tailored to your specific project...
Whoah, okey, judging by the downvotes and messages I got I've been an ass here. In response to you and HairyScotsman - sorry. My initial thought about your reply, the implied message being that I am supposed to try and fail first (or whatever, sorry, only skimmed it through), was that you were an elitist prick who'd rather nitpick about details than actually answer my question. So I figured laughing dismissively would be a somewhat more polite response to you than telling you to piss off. Clearly I was in the wrong about asking for this sample code without having tried anything on my own first (I mean as in literally not done squat). I was simply curious about how such a program would look. As HairyScotsman put it I simply wanted someone else to tell me how to. I understand that no matter how polite the question you need to try it on your own first when it comes to programming. So, I apologize.
That makes sense and see my response above. Sorry about this and thank you for explaining what I did wrong. Obviously there is more to programming than just programming! :)
Very cool, thank you for your time!
The documentation is really difficult for me to understand so I'll look into getting one or two books. Python was waaay more difficult than I imagined it would be. I guess I got into the deep end of the pool, I'll try something simpler to start with. Thank you for your time!
No problem, I hope you manage it eventually. :)
why downvotes ??
Ok thanks, this clears up the basics of what a framework does for Python web development.
[I apologize!](http://www.reddit.com/r/Python/comments/2ka1wy/help_need_to_create_a_script_that_lists/cljgfdm) Even me saying sorry gets downvoted but I'm sorry! Okey?
thankyou... i am preferring web dev
Yes you can and that's the draw to it. You only run the code that you specifically need. And if it's all pure python then you can run it in Iron Python or pypy or any other python.
django is nice and "batteries are included" flask is small DIYstyle web2py pyramide pylons i dont use but pyramide pylons is very popular
thks
Take a look at zeromq. http://zeromq.org
Looks like SQL Alchemy and Mongo DB (through Ming) are the ones you get out of the box. The rest I assume you have to code yourself at the moment.
So you're serving large, binary objects though the WSGI process? How well does this work in production under a non-trivial request load? 
This isn't quite what you're asking for, but it seems you could achieve it just using git workflow. To exclude your directory of scripts from a repository, you can add it to your .gitignore file (bit of an issue in that the directory won't be version controlled at all; I'm not sure how to fix that). To hack on something, you would checkout a new branch, hack on it, then either delete the branch to scrap it entirely or merge changes from it back into your master/development branch. Then you only push the master/development branch to github.
enctype='multipart/form-data' ... I can get the file and make the thumbnail no problem and I can save jpegs, so I know the file is getting submitted. The only thing that isn't working is saving the gif properly. It seems like I should be able to just save the uploaded file, but it's getting manipulated somewhere. 
As some of the commenters can attest it used to be free. Only for a limited time that is. I always check this link: http://www.amazon.com/Best-Sellers-Kindle-Store-Computers-Technology/zgbs/digital-text/156116011/ref=zg_bs_fvp_p_f_156116011?_encoding=UTF8&amp;tf=1) from time to time when I stumbled upon that free ebook. If you want to read the ebook online Gexos posted a link on this post.
In addition to all those, you can also look into bottle for a web framework. Flask/web2py/bottle are simpler frameworks while django and pylons are "battery's included" frameworks (django especially).
So.... Django, essentially? It even has a 'manage.py runserver'.
You can find it here: http://www.breakingstuffbooks.com/
ipython + vim + eclipse + pydev
/u/tidywang your welcome, it's a pretty nice book.
But probably less monolithic, and with swappable/removable components.
I find the use of plaintext password storage disturbing. I think [cookiecutter-flask](https://github.com/sloria/cookiecutter-flask) is a better template since it includes everything flask-foundation has plus: * proper password handling with Bcrypt * flask-migrate included and preconfigured * You don't have to find/replace "appname" with the actual name of your app. Cookiecutter will take care of all that renaming automatically. * It uses py.test fixtures instead of setup/teardown methods **edit:** Password security is [now implemented](https://github.com/JackStouffer/Flask-Foundation/pull/6).
Flask is a great micro framework. And my micro frameworks are nice and cute until you have to build sustainable complex systems and then realize that you don't have all the expertise and/or time needed to build efficient, secured, effective apps. So, people start bundling things together and in the end they will have a full-stack framework with lots of "magics", which are something they hate in the first place.
I didn't include Bcrypt, even though I use it when ever I use my own framework, because I want it to be about structure and not about anything else. I even poke fun at the point that password storage is unsafe in the test file for the models. I have considered ripping out Bootstrap from it for this very purpose, but its so ubiquitous that I am hesitant to do so. EDIT: someone proposed a pull request with basic password hashing that I accepted.
There's a (non-free) book by the pandas author which is excellent: http://shop.oreilly.com/product/0636920023784.do
While DEPOT wsgi middleware is fairly optimized (as it relies on wsgi.file_wrapper when available and supports caching), if you have performance concerns you can use a storage backend that is able to directly serve files (like S3) in that case DEPOT will just serve a permanent redirect to the user and let S3 directly serve the files itself. You can even provide a custom public_url property and serve files the way you prefer by redirecting user to a server dedicated to files.
DEPOT core idea is to keep the storage interface as simple as possible as it might support as many storage types as possible. For example when using GridFS you do not have concept of directories or paths. You can off course easily implement a DEPOT Storage that saves files using PyFilesystem, and it might make senso to do so, but while PyFilesystem aims at providing a common interface to some kind of file systems, DEPOT only cares about saving files without any concept of hierarchy, path or file system. 
You should probably use nginx to handle the file upload and put the filename in an x-file header
It's probably best to use shutil.copyfileobj
Thanks a lot.
LOL. Seems almost like what you're looking for is a fully featured framework. Why use this poorly written crap?
I think security should be part of any app structure with a login system. It wont be immediately obvious to the beginner python user looking at the code that there is no password security. "supersafepassword" is definitely a bad password but doesn't really indicate that the database is storing it insecurely.
Is flask a framework? I'd call it a module or library. I'm thinking sqlalchemy, jinja and flask are roughly the M, V and C of an MVC framework. One could replace jinja with their own response templating solution relatively easily. One could use sockets and regular expressions to replace flask, and write their own own DB ORM to replace sqlalchemy, but I sure as hell would not. Django is a full blown MVC framework plus authentication, administrative backend web interface, and stuff like that.
You can do anything with python. What do you want to do? Figuring this out will help you realize what programming is really about. What do you do for work? Any repetative tasks you could make tools to help with? Bonus points if you're a scientist or want to work in a technical field.
 for item in what_they_said.split(' '): Google.search("python %s" % item)
Disappointing. I was looking forward to recommending this until I found this out. Going to have to keep recommending Django it seems :-|
That's really interesting. Most people don't frameworks because they have some limitation/preference (speed, space, etc). You want bare metal? You can use sockets to bypass apache, wsgi, httplib, etc. But I would *not* want to do that for any project, it'd be a bear to make. If you're doing this to learn things, it's a great exercise. You'll spend tons of time reading RFCs, figuring out compatibility, etc. But you probably want middle ground. You want to leverage Wsgi and other built-in stuff, but recreate the more advanced things; basically, the parts that PHP doesn't give you by default. As long as you know that you'll most likely be recreating the wheel at every step, and spending time to recreate already-existing libraries that do things better than you will, then that's a neat project. Especially since you can make things how you feel is best, and it'll fit very well to your style. If you want any more help than that, I'd recommend looking at one of the lighter frameworks. I forget which one, but some frameworks are pick &amp; choose. Use whatever piece you want, use whatever you like, ignore the rest. Then you can use the bits that help you get going on the boring stuff (encoding html chars, handling session cookies, etc) and getting into the neat stuff (routing requests via regex, template rendering, etc). Maybe flask? I don't know. I like the all-in-one, quickest start stuff, so it's django for me. I have so little time to do things, so I focus only on what'll get me furthest fastest. If I could find something even more bundled than django I might even use it, I'd love to see some more of my ideas/projects realized. Good luck!
Yes. My two cents: Let them work in excel, or CSV's if they don't need excel. When done, they save the file on dropbox or something. Python monitors the directory and converts all new files to client_report_whatever.xls or csv. Don't change their UI or workflow. Or maybe they need a UI for setting parameters in the report generation. Easy enough.
For UI, try stealing what the NodeBB guys are doing!
Why do you see it as poorly written?
Good point. Before profiling, write good code in the first place. If you're familiar with the sort of thing you're doing, Cython might be an obvious first choice for parts.
I'm not sure about you, but the reason I use a DAL is because I have made a web app using database's libraries, and it was so ugly and un-pythonic to have SQL statements in my code. Switching to SQLAlchemy cut my code size down by about 30% and made it much more readable.
That's some good feedback. You'll also want to learn about profiling and make your code run faster. This is a great project for learning, however, pymunk and others will kick the crap out of your post optimization performance. See the recent post in this sub on C code in Numpy.
Isn't there another user who posted in depth with regards to the fact this uses plain text passwords? That should be a huge red flag ... if they made that mistake the odds of them following any "best practices" are slim to none. Ignoring that, Flask and the rest of the micro frameworks are a joke. If you are writing a serious-ish web application, use a proper framework. If you want something minimal then don't use a framework. It's just as easy to just write a gevent/eventlet app, or raw wsgi app as it is to use Flask ... and you end up with something several orders of magnitude faster ... cleaner ... maintainable ... all measures of quality are improved. Last ... wasn't flask created as a spoof? Like to mock the absurdity of the concept? Then the guy realized he could make money off of it, and changed his mind ... I'm pretty sure that's how the story goes. Also.. what prompted my comment is the absurdity of the fact that you guys are slowly adding on all of the features of a regular framework ... to your "micro"-framework. Which is absurd.
.... if I subscribe....
I originally pointed out the issue of not hashing passwords, which has since been fixed by a pull request which I also submitted. Everything else does seem to follow what is generally considered "best practice" in the Flask world. Flask was actually started as [an april fools joke](http://mitsuhiko.pocoo.org/flask-pycon-2011.pdf), but money was never involved. Regardless, it's still a fantastic framework. a gevent/eventlet based system sounds interesting, but will be less accessible to a beginner python user.
Did a bit of this recently. If I recall correctly, you could import struct and replace 'str(i).encode ()' with 'struct.pack('B',i)'. Sorry about the lack of an example, typing on a phone. 
The only benefit would be additional freedom to do something different from other frameworks. But considering how little some frameworks do (eg flask), you're going to be really reaching.
Python 2 or 3? Unicode? Perhaps you need to convert the value sent from Python to byte like ser.write(b'1').
I like [IEP](http://www.iep-project.org/) the most.
A similar project is [Flask-MarcoPolo](https://github.com/mardix/flask-marcopolo). [Flask-MarcoPolo](https://github.com/mardix/flask-marcopolo) is a Flask extension that adds structure to both your views and templates, by mapping them to each other to provide a rapid application development framework. The extension also comes with Flask-Classy, Flask-Assets, Flask-Mail, JQuery 2.x, Bootstrap 3.x, Font-Awesome, Bootswatch templates. The extension also provides pre-made templates for error pages and macros. 
Xsendfile/xaccelredir to the rescue! 
Thanks for the pointer. I think I'll do this before I deploy. My nginx knowledge is still pretty sparse.
If you've got the time, could you explain why you think shutil is the best way to do this?
Have you ever seen Django? Django has swappable and removable components. From apps to middleware to templating. Try looking at a full config file to see all the elements you can swap or remove. Phillip.
Yep, that is one of the improvement scheduled for the LocalFileStorage but as we currently don't use LocalFileStorage on production has been delayed a few times :)
Why recommend one or the other? I use both in my latest project. Django for user and data management. Flask for only the fly image resizing and caching. App framework for app development. Micro framework for micro tasks. Phillip.
This looks like it would be really useful for form and data validations. Has anyone used it, or indeed know of something even better?
shutil.copyfileobj(input_file, output_file) is basically the equivalent of: while True: data = input_file.read(2&lt;&lt;16) if not data: break output_file.write(data) But it's from the standard library and the function name is self commenting.
Bootstrap. That's the first NO here.
Take one of the statistics classes.
You may also want to look into blaze as well.
My main point was the fact you are building features on to a minimal framework ... that are better implemented in existing full-featured frameworks. Doesn't adding all this functionality onto flask sort of defeat the purpose of using flask in the first place? &gt;Everything else does seem to follow what is generally considered "best practice" in the Flask world. I have a really hard time believing *everything* follows best practice. That's a bold statement. I mean Flask itself doesn't really follow best practices ... &gt;a gevent/eventlet based system sounds interesting, but will be less accessible to a beginner python user. If you want accessibility you are better off with Django or to a lesser degree Pylons/Pyramid. I don't really see anything Flask offers in terms of accessibility over any of the existing solutions.
Love the project name :D
Markov and monte carlo are widely used so I would recommend 2. If your current/future research is highly dependable of parallel computation, then yes, it would be a great investment taking a related course witch show you the basics so you can easily learn further by yourself. 
Can I swap out the ORM and still use forms and the admin interface?
Without you explaining what you mean by "swap out" then it's difficult to answer your question. The forms and admin are simple wrappers around the models.py. The models are simple descriptions of a table. You have plenty of different database backends. However you can make straight SQL queries bypassing the ORM for rendering templates. So I guess the answer is yes you can use forms and admin without being forced to go through the ORM for other parts of the site. Phillip.
I don't recommend Flask to new web developers because it's easy to get security/auth/password stuff wrong; there are no good defaults provided. This is something Django (for its numerous flaws) gets right. Flask is (and the things you have bundled here are) perfectly fine for people who already know what they're doing, of course.
Thanks for the fast response
&gt; mod_php there is Mod_python is an Apache module that embeds the Python interpreter within the server. http://modpython.org/
take whatever you're least good at
Thanks I often use copy and deepcopy but I didn't know you could change the behaviour. That simlifies even more the decorator.
Yes, Numpy has record arrays which are essentially arrays of C structs sweetened with some syntactic sugar.
This was removed as it is unrelated to Python.
It is possible. You could use Flask to put a simple webpage with your form. Check this out, in ten minutes you have your webapp working: http://flask.pocoo.org/docs/0.10/tutorial/ **EDIT:** I choosed Flask for simplicity. You can use pretty much anything. Django, Bottle, webapp2 (maybe with appengine). I was just trying to provide a simple example that it can be done easy.
That was intense.
Judging by your question, this may be a bit more than you intend to chew off. I don't really know what exactly you're trying to accomplish, or how python you are. But: Yes, It is possible using python. Your problem isn't having python handle the web request - there are plenty of frameworks available for that- my go-to is Tornado. Your problem will be with the latency/timeout issues with the task being RUN. If you have a long running script - such as anything to do with telnet - then your website will feel slow and poor, while a request waits for completion. If you run it in the "background" ignoring the results/output, you'll have no way to relay a failure or issue back to the user. You need something that will handle the job itself. I'd do it like this: [Tornado] [tornado-celery] [Celery] [celery-tasks] [RabbitMQ] Tornado is the REST api interface. It launches Celery tasks via tornado-celery. Celery is the distributed asynchronous task runner. The Celery tasks handle the &lt;whatever your task&gt; and stores the result in the backend, which can then be returned with another call through tornado-&gt;celery to get the results. So, to launch a job, you would "Post" to Tornado, and if you wanted an update on the task you've requested, you could GET status passing the id. 
Old but very simple method would be CGI. Check it out... it's two or three more lines in your python script, if you're down to the if __name__ == '__main__' part. And don't forget to sanitize user input or you will get into trouble really fast.
Off the top of my head, you could add the text manually with matplotlib (http://matplotlib.org/users/text_intro.html). Otherwise there might be a way to use shape files with Basemap, but I haven't done it myself.
Would it be feasible to map my own class instances to numpy arrays?
Have you looked at pythonanywhere.com?
Use [bottle.py a simple one-file micro web framework](http://bottlepy.org/docs/dev/index.html). from bottle import route, run import subprocess @route('/run/&lt;cmdline&gt;') def index(cmdline): p = subprocess.Popen(cmdline,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) stdout, stderr = p.communicate() return '&lt;h1&gt;stdout:&lt;/h1&gt;&lt;pre&gt;%s&lt;/pre&gt;&lt;h1&gt;stderr:&lt;/h1&gt;&lt;pre&gt;%s&lt;/pre&gt;'%(stdout, stderr) run(host='localhost', port=8080) Make a file called script.bat that does what ever you want in the same location of your directory and it will run your python file. Then go http://localhost:8080/run/script.bat Btw, for safety, dont expose this on the public internet as it is a backdoor to execute arbitrary code on your PC. 
thank you, this seems to be working for sending the number from Python to Arduino. For recieving the data from arduino, using the struct.unpack is giving me slightly strange results though. For recieing data in Python I now have: g=struct.unpack('B',ser.read(ser.inWaiting())) print(g) And I am getting the the right numbers for everything but 0 and 1 but they are in the format of: (3,) For 0 and 1 I am getting: (240,) and (48,) respectively. Any clue what the issue with 0 and 1 are? and what about the format of the numbers, how do I get them to be simple numbers?
(disclaimer: owner/maintainer here) I use it pretty frequently for both testing and validation uses. It's explicitly designed with relatively little in the way of testing glue; it's really aimed at being a pure matcher library with only a bit of help for testing. I suggest giving it a try. But, then, I would, wouldn't I? (pull requests and issues welcome) 
Knowing andorid: not to do it ;)
Requests for help are better suited for /r/learnpython. Since you're clearly new to things, it is quite a broad question. I suggest putting together the components you have some idea about first, to give some code to discuss. If you have no idea at all, start by looking up how the `input` function works (or `raw_input` in python2), and play with this in the python interpreter.
One of my first Python program was a SSE emulator. To have easy aliasing between data types (float, signed, unsigned, ...), i rely on the standard module [struct](https://docs.python.org/3.4/library/struct.html). The main idea is to view the register as an array of type X, not efficient at all but it's convenient. the register and memory classes: import struct class Register: class Wrapper: def __init__ (self, buffer, format_str): self.buffer = buffer self.st = struct.Struct(format_str) def __setitem__ (self, slot, value): f = list(self.st.unpack(self.buffer)) f[slot] = value self.st.pack_into(self.buffer, 0, *f) def __getitem__ (self, slot): return self.st.unpack(self.buffer)[slot] def __string__ (self): return str(self.st.unpack(self.buffer)) def __repr__ (self): return repr(self.st.unpack(self.buffer)) def __init__ (self): self.byte = bytearray(16) self.float32 = Register.Wrapper(self.byte, "&lt;ffff") self.float64 = Register.Wrapper(self.byte, "&lt;dd") self.signed8 = Register.Wrapper(self.byte, "&lt;bbbbbbbbbbbbbbbb") self.signed16 = Register.Wrapper(self.byte, "&lt;hhhhhhhh") self.signed32 = Register.Wrapper(self.byte, "&lt;iiii") self.signed64 = Register.Wrapper(self.byte, "&lt;qq") self.unsigned8 = Register.Wrapper(self.byte, "&lt;BBBBBBBBBBBBBBBB") self.unsigned16 = Register.Wrapper(self.byte, "&lt;HHHHHHHH") self.unsigned32 = Register.Wrapper(self.byte, "&lt;IIII") self.unsigned64 = Register.Wrapper(self.byte, "&lt;QQ") class Memory: class Wrapper: def __init__ (self, buffer, format_str): self.buffer = buffer self.st = struct.Struct(format_str) def __setitem__ (self, address, value): self.st.pack_into(self.buffer, address, value) def __getitem__ (self, address): return self.st.unpack_from(self.buffer, address)[0] def __init__ (self, size): self.size = size self.byte = bytearray(size) self.float32 = Memory.Wrapper(self.byte, "&lt;f") self.float64 = Memory.Wrapper(self.byte, "&lt;d") self.signed8 = Memory.Wrapper(self.byte, "&lt;b") self.signed16 = Memory.Wrapper(self.byte, "&lt;h") self.signed32 = Memory.Wrapper(self.byte, "&lt;i") self.signed64 = Memory.Wrapper(self.byte, "&lt;q") self.unsigned8 = Memory.Wrapper(self.byte, "&lt;B") self.unsigned16 = Memory.Wrapper(self.byte, "&lt;H") self.unsigned32 = Memory.Wrapper(self.byte, "&lt;I") self.unsigned64 = Memory.Wrapper(self.byte, "&lt;Q") def __len__ (self): return len(self.byte) if __name__ == "__main__": # 1000 bytes memory memory = Memory(1000) # 16x 128 bits SSE registers xmm = [] for i in range(16): xmm.append(Register()) #test register aliasing xmm[0].unsigned32[:] = (4, 5, 6, 7) # fill the whole register (4 x 32 bits) temp = xmm[0].float64[:] # copy as float64 (2 x 64 bits) xmm[0].float64[:] = temp # write back print("xmm[0]:", xmm[0].unsigned32) # (4, 5, 6, 7) # memory aliasing memory.unsigned32[100] = 0x882233FF for i in range(103, 99, -1): #Little endian ! print(hex(memory.byte[i]), end=" ") else: print() # register to register xmm[1].unsigned32[:] = xmm[0].unsigned32[:] xmm[1].float64[0] = xmm[0].float32[3] # mem to register xmm[0].unsigned32[0] = memory.unsigned32[100] print(hex(xmm[0].unsigned32[0])) # 0x882233FF edit: http://ideone.com/199TvK
Neat! I should write up my x86 emulator in python, once I get it running properly. And thanks for reminding me to get off reddit and back to work on that... 
Meh. I can barely understand any of this (I'm working on it!). Just thought it'd be nice to share this post...
 # Python 3 hourly_temperature = [90, 92, 94, 95] for item in hourly_temperature: if item != hourly_temperature[len(hourly_temperature)-1]: print(item, end=" -&gt; ") else: print(item) Easiest. Thing. Ever. the "end" you see after the print efines what's in the endline. Usually it's a new line, but you can define it. The rest is just saying that if it's not the last item, then add the arrows, else don't. Do I get a cookie? 
There is /r/learnpython and [Google](http://stackoverflow.com/questions/493386/how-to-print-in-python-without-newline-or-space).
Please check out /r/learnpython! It's a good resource for this type of question, particularly for the inevitable follow-up and clarification questions :)
By default, print adds a newline to whatever you provide. See /u/MysteriousMagenta's answer. If you are using python 2 there is another way of making it not print the newline. A shorter and more advanced version of your code would involve the "join" method for string objects and list comprehensions to convert the integers to strings. temp_strs = [... list comprehension ...] print(" -&gt; ".join(temp_strs)) 
miniconda/Anaconda doesnt appear to support pythran as of now. It gives failed to fetch pythran on my system.
In your Arduino code you use 'print', which actually sends the data to serial as ASCII text. to unpack it, instead of argument 'B' use 's' for string. You'll get an answer that looks like (b'1',). The b before the '1' means it's stored as a byte (signed char), and the parenthesis are because it's stored in a tuple. You can access it and print it as an integer with: int(struct.unpack('s',g)[0]) int() obviously changes it to an integer, [0] accesses b'1'
Boy, you're pleasant, aren't ya?
As of 21:34 Eastern on Sunday, this thread has 5 comments - all answers are valid. 4 of them have been down voted though, with no explanation of why they were down voted. Who ever down voted them- Can you EXPLAIN why you're down voting them? My post describes infrastructure I'm presently deploying. It works- amazingly. I even said at the top that it was probably too complex for what the user was asking, but since there was no requirements listed by the op I posted it anyway, in case he/she needed something that needed significant throughput. /u/feuermelder suggested doing it in CGI- a valid alternative, depending on the code that's being executed. /u/ggtsu_00 even posted CODE. So, insightful downvoter- care to identify where the problem is here?
You don't need python for that. You can just insert this code in your static web page and you'll see live stream, assuming you are using FOSCAM camera. &lt;img src="http://IPADDRESS/videostream.cgi?user=[USERNAME]&amp;pwd=[PASSWORD]"&gt; If not, check how to get live stream from other cameras here: http://www.ispyconnect.com/sources.aspx
You should look at apps with similar functionality and learn how they achieve it. Why do you want to use Python instead of Java? Your question is pretty vague and /r/python is probably not the place to ask a question about Android/Java.
[Jython](http://www.jython.org/) is probably what you're looking for
 # Connect to the host client.connect(hostname=hostname, username=username, password=password) # Create a client interaction class which will interact with the host interact = SSHClientInteraction(client, timeout=10, display=True) interact.expect(prompt) # Run the first command and capture the cleaned output, if you want the output # without cleaning, simply grab current_output instead. interact.send('uname -a') interact.expect(prompt) cmd_output_uname = interact.current_output_clean
I really want my own CARDIAC now. seems like a fantastic device for students. 
My guess is someone(s) who see this as an /r/learnpython question.
Pyjnius (https://github.com/kivy/pyjnius) is probably what you are looking for.Its used by kivy to use &amp; extend java classes.
Shameless Plug and Recruiting Effort for an Open Source Project [Coinolith](https://github.com/BitTrade/Coinolith) + [Intution.io](https://github.com/intuition-io) 
No just standard usb camera
I havent used open street maps. I'd get the GIS data of your target city's streets from the city and work with that.
1. This script sucks 2. The variables names are misspelled (i.e. "similair") 3. A glob.glob() call to the regex module is failing because it's not sanitizing the filenames. Wrap it in a try/catch and print a warning and then continue on if that's what you want.
oh my. clean up the formatting. please. You have a problem in the regular expression you are passing to glob. The reason is the file name, which you printed in "Looking for ...", contains characters which are non-literal in regular expressions, i.e. they are special characters in regular expressions. You need to escape these characters so the re compiler does not tread them as special. 
That looks really clever!
Aren't you ignoring overflow here? Won't registers just automatically get incremented into Big Integers once they go past the limit? Not sure if that's what you want, but still IMO a bit unrealistic if you're trying to emulate a real CPU. I tried to do something similar but then I got stuck on the overflow arithmetic. Couldn't think of a simple way to do it, so the project stagnated. Did I miss that functionality in your code?
I think that's possible with git. https://seanmckaybeck.com/2014/08/20/pep8-git-hooks/
so in your title you mention pandas and you mention IPython (which itself doesn't even have the ability to graph stuff) but you don't mention matplotlib (which is what you actually use)?
Subject of much contention but I dig PyCharm which has a free community edition. 
PyCharm is the only one I know, but I like it. If you're coming from VS, it will take some getting used to though. Do not expect "Visual Studio for Python", because it's not nearly as good. But I think it's good enough :)
Download python tools for VS?
~~That has the unfortunate prerequisite that you have to have Visual Studio Professional edition.~~ But it's a good choice :)
Pycharm is the best IDE for Python IMHO
Holy cow: https://pytools.codeplex.com/releases/view/109707 &gt; PTVS is now installable in Visual Studio Express 2013 for Web and Desktop editions! Apparently since PTVS 2.1. Awesome :)
Indeed, Visual Studio has excellent Python support. And in my experience, much faster debugging than PyCharm.
Take a look at http://www.pyzo.org Comes with scientific packages. Available for Unix, Mac, windows Very fast
http://stackoverflow.com/questions/15071924/authenticate-with-private-key-using-paramiko-transport-channel
I use Eclipse with PyDev. Works pretty great IMO
I hope someone in the forum will correct me if i am wrong, but I beleive Pandas has a matplotlib wrapper. 
First you need to find out what type of connection it's actually looking for. If it wants an SFTP (SSH) connection, paramiko (see melt_Doc's link) is really nice to use. Though you may need to convert that ppk file in puttygen. And SFTP is an entirely separate protocol from FTPS, so you'll need to use the paramiko functionality for all of it, rather than just the connection. Disclaimer: I barely get by with what I know about this, so this may not be what you need.
Of course you could use modern Visual Studio with python support, or even better - PyCharm. But I think you could try to dig into Vim, if you haven't before. You'll get headache first, but later you'll not find something better than Vim. One's more good editor is Sublime Text, but I prefer Vim instead because of habit.
You are correct. I guess I should have clarified that because the heavy lifting of the plotting is mostly matplotlib. I was thinking more about the IPython notebook environment and using pandas and just kind of glossed over matplot's role. There is a thin wrapper in pandas around matplotlib but to do most anything, you'll need to know more details about the matplotlib api. 
Hmm Why Uppercasing Every Word?
i ask same question !! i help here http://www.reddit.com/r/Python/comments/2ka1wy/help_need_to_create_a_script_that_lists/ an onlyu get DOWN VOTES !! why ????? this reddit is HOSTILE i report to admin but no answer
I use IDLE and I like it. It comes with python AFAIK. It's not the most advanced IDE but it does what I need. 
Trying to count how much 1s and 0s are adjacent to each other. 
My favourite: http://www.ideacolorthemes.org/themes/1/
thks !!
I'd definitely do one of the stats ones, and then pick up OpenMP/MPI on the side. If you use C++11, learn it's threading module as well, it is far nicer than pthreads.
Thanks will try.
Thanks.
It's SFTP. I've been having trouble installing paramiko, are there any alternatives?
I wouldn't know if there are alternatives, as paramiko has always worked for me. Last time I helped someone get set up with it, they were on windows and didn't have the right c compiler. We ended up doing a binary install of pycrypto (which is a prereq) and then paramiko installed fine.
Is there an opensource heroku-like software where all you have to do to deploy is: git push &lt;your-server&gt;
OpenShift is an option. 
any1 ??
PYCHARM
I know you didn't create this comic, because I've seen it before. But I'd like to point out again that the text bubbles are arranged very poorly.
There's dokku (https://github.com/progrium/dokku), but it's not complete magic - you can't just will good infrastructure automation into existence.
[Dokku](http://progrium.viewdocs.io/dokku/index) is an open-source project that supports a similar deployment workflow to Heroku. DigitalOcean also has a pre-built Dokku image that might be useful if you have an account. Dokku only works with one host however, you can't deploy an appliation that runs on several machines.
Does that work with pyramids.
If you're familiar with docker, a distributed-able solution is Deis on CoreOS, which also has a DigitalOcean image (for CoreOS, you'd have to install Deis on top). It looks like there are [three deploy options](http://docs.deis.io/en/latest/using_deis/deploy-application/): Heroku-style buildpacks, a Dockerfile in the git repo, or a Docker image.
[http://www.reddit.com](https://github.com/reddit/reddit)
Thanks for the reply. I have been experimenting with Flask a bit, have it set up so I can dev locally and what not and so far so good (not that I've done that much or anything). I have a question though. I always see the words "template rendering" and the phrase "handling cookies and sessions" involved when people talk about frameworks for Python such as Flask, Django, etc. In PHP I have always just written my own authentication class handling this stuff for me, can I still do this stuff as well as dev my own View class in an MVC that renders out a view for the user? Or is this stuff handled for me with a framework like Flask. For example, if I tried to set a session variable or a cookie in a plain old Python interpreter it would have no clue what I am talking about as there is no connection to a web server. I can only use the language as an all purpose language however if I wanted to introduce things that are specific to HTTP, into this language, I would need a layer of glue in between the general language (Python) and the apache server. This layer, as I understand it, is the framework of my choice. Then inside Python, I can access the things that are specific to HTTP and websites, to make a functional site. Such as write a session class that handles sessions that are now available to the language because of a framework. I can set and destroy cookies because I have a framework connected to the language that allows me to manipulate session/cookie data that affects the website. I can also create a custom class that spits out certain HTML if a condition is met, or other HTML if the condition is not met. All of this I have control of managing how I want, but I am dependent on the framework if I want the language to communicate to the webserver. Is this correct? So I can make my own framework to manage my code and project files on my own, or does Flask also have some say in that as well. I guess the entire role of a framework is a bit confusing to me. I just want to be able to recreate some of the custom things I made in PHP, but in Python, while using a framework like Flask so I don't have to touch any WSGI.
It's very easy to make it work with any framework that speaks WSGI. I've used both web.py and flask without any difficulty. Check out the documentation for the OpenShift Python Cartridge for how to set it all up.
Am I betting deploying a small blog using a VPS on EC2 (using the tutorial linked), or on Heroku? Its hard to decide without any real experience of deploying python web apps and the pricing of the services.
To your question: `antigravity`. It's even in the stdlib! I'm not sure you're going to get many answers if libraries and frameworks are out. There's probably a pythonic Jenkins, maybe some small data scraping utilities. Python's ecosystem, at least as represented by pypi, is very much "here are components, build cool things". I don't think I've seen any questions that include both "favorite" and "python" that didn't include in their answers some subset of: requests, boto, sqlalchemy, numpy/scipy, flask/bottle/django, BeautifulSoup, six. Maybe that's an artifact of self-selection, since I'm rarely looking at pypi for packaged solutions; when I want to install a "works out of the box" language becomes less of a concern and I start at google, not pypi. Aside from WordPress, do you have any other examples from php that I could try to map to python? --- **Edit**: I'm cool with downvotes - these points don't pay bills; however, given that OP has been on the "python doesn't have a CMS product" for most of their replies, can someone give me feedback on why this isn't a constructive comment? I answered the question, talked about the ecosystem, mentioned that this seems like an odd question, and asked for more information, as though OP might want to discuss things. What was missing?
Cool ive been lookign for options to simplify my infrastructure. Right now i got a mix of capistrano and bash to do it but its kind of crazy.
as a person who is the last thing on everyone's mind, that is absolutely correct. I asked about more resources to help us meet some goals a little bit quicker and was told that my work is basically at the bottom of the list of importance. slightly frustrating, and very discouraging. 
IPython. Though I would say that, since I work on it. Also, Dropbox (Edit: not open source, my bad).
Most of those are easy. The GTK related stuff will be tricky, because the pygtk bindings that you're using only support Python 2. To make it work on Python 3, you'll need to port to the new GObject Introspection bindings. Here's some info about that: https://wiki.gnome.org/action/show/Projects/PyGObject/IntrospectionPorting?action=show&amp;redirect=PyGObject%2FIntrospectionPorting http://dumbmatter.com/2012/02/some-notes-on-porting-from-pygtk-to-pygobject/
especially since Fabric does not seem to support Python3
&gt; I always see the words "template rendering" and the phrase "handling cookies and sessions" involved when people talk about frameworks for Python such as Flask, Django, etc. In PHP I have always just written my own authentication class handling this stuff for me, can I still do this stuff as well as dev my own View class in an MVC that renders out a view for the user? Or is this stuff handled for me with a framework like Flask. This is hard to explain simply. Basically, your auth class is using the built-in PHP framework to set cookies. You call something like "setcookie()", which is a PHP call. But if you were actually setting cookies yourself, you'd need to do this: http://en.wikipedia.org/wiki/HTTP_cookie#Setting_a_cookie You need to send HTTP headers, content types, then the "set-cookie" commands along with any necessary expiration settings, then the content of your page (formatted correctly), along with any/all other http headers. You'd have to do all this from scratch if it weren't for 1) php's built in framework, or 2) your python framework of choice. That's a ton of work, and there are way more details involved than what I just listed. What about gzip compression? JSON encoding? Multipart responses? etc, etc, etc. PHP's framework does this all for you. You can write this all from scratch w/ python's sockets and a ton of work. But if all you want to do is use something like "setcookie(name, value)", then you'll use a python framework (like flask), just as you did PHP's built-in framework. Think of PHP as: 1) PHP language &amp; built-in libraries 2) PHP built-in web framework 3) your own PHP application code And python is: 1) Python language &amp; built-in libraries 2) Your choice of python web framework 3) your own python application code So "can I avoid using a python web framework" is more like "can I avoid using any of PHP's built in web stuff, and instead rewrite it using php's sockets library and a bunch of string manipulation". Hopefully the makes sense. Another example is template rendering. In php, you have built-in template rendering where you can make a .php file that contains HTML with little bits of &lt;?= 1+1 ?&gt; php code throughout. But how does that code get interpreted? With PHP's template renderer. So you use flask's template rendering to achieve the same effect. If you want to write from scratch in php, you'd do something like: 1) figure out which template/file you want, 2) open the file, 3) parse the entire file for replacements, 4) evaluate all replacements using available variables 5) take the results and put into an HTTP response, 6) send response to browser. No one does that in PHP, since it's all handled for you. The rest of what you've written is true. Flask is the glue that adds web-stuff to the python language. It may go even further, offering things that help support different program structures (like how django clearly separates controllers, views, templates, etc). But it's up to you to use as much as you want. Say you want to have the worst possible spaghetti code. Just use flask to route all your request to a single function, have a ton of if/then statements in that function, and return one massive template. It can be done. You can structure your program how you like. So yes; use the framework as much as you want, and where you've written you own things (session handlers) use your own instead. Use flask to read/write cookies, and your own session class to set the right cookies, read them, associate those with DB-backed session variables, etc. You can still write at that layer.
Which ones did you try? I like Qt Designer myself since Qt is my favourite framework for GUI applications. I'd guess there are solutions for GTK, wxWidgets and TkInter as well. What are you looking for, specifically? If you're a beginner you'll find /r/learnpython useful to get help and recommendations.
Is it made with python and open source?
Spyder is good as a general-purpose Python IDE too.
Eclipse has an python extension, check it out! :
Well... S/he does have a point. The community edition *is* released under the Apache 2 license and [the source repository contains about two thirds of Java and one third of Python](https://github.com/JetBrains/intellij-community/search?utf8=%E2%9C%93&amp;q=py+language%3Apython).
Excellent! That's what I was trying to get at thank you. So the only reason "setcookie(x, x, x, x)" is available in PHP is because it has a built in frameowork that allows "setcookie()" to actually do something of important to the webserver. Obviously if I tried to set a cookie in plain old python it wouldn't understand what the hell I am talking about about, but to add HTTP functionality into Python code that you can use 'natively' you need to use a frameowork that brings together web server functionality and allows you to mess with that stuff (sessions, cookies, files, etc) in the language you are using. This to a degree confirms what I was thinking thank you very much!
Two python projects that's gaining fame for slackers that download movies and tv series are [Sick-Beard](https://github.com/midgetspy/Sick-Beard) and [CouchPotato](https://github.com/RuudBurger/CouchPotatoServer)
Supervisor is awesome! It is a Process control system. You can monitor and control a number of processes on UNIX-like operating systems. http://supervisord.org/
I tried pythoncard in the past. But i read that its a dead project.
Well i am looking something similar to visual studio. Make the gui with the mouse and then write the code. With Tkinter you have to write code to make the gui. I tried qt but i find it a little bit difficult for a beginner. I mean even livecode has an excellent easy gui designer. Why not python?
SickBeard is an awesome project.
Well i am looking for a good/easy gui designer. I know that there are great editors to program in python. 
Dropbox is open source?
Flask routes urls to python functions using regular expressions, passing variables from the url to the function, and sends the result of the function back to the user. It handles response codes and things like that. It's very basic. You can write the part you want and not redo anything flask does.
Projects like [PuPHPet](http://puphpet.com) are really awesome, they're making it easy for non-sysadmins to develop with the Nginx-FPM stack. The configs can get pretty beastly though, if you're looking at anything more than a trivial application. Especially projects that require some .htaccess love - all of that has to get moved into the Nginx server config. [Magento's config is a rather gnarly one that comes to mind](http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/configuring_nginx_for_magento). But yeah - FPM is pretty spiffy.
They do lots of open source work, don't they? Even if the whole project isn't!
It's not - sorry, I answered without reading properly.
Thank you very much!
You could go for the open-source standpoint (as in Python is free, but the school has to pay for MATLAB)
Oh, I fully intend to use it shortly. I just wanted to check if someone were going to suggest competitors to evaluate it against.
Advantages of python over matlab: it's free, it's a real programming language which will be useful for more than just the scope of the course, it has great libraries (like the matlab toolboxes, but in free), and it's growing very fast (while matlab will certainly decline in the future). Where they are at equality: now with the IPython notebook, and pylab, and IDEs like Spyder, Python almost looks like matlab. Where Matlab wins: it may be easier to install on all the machines, and it's ready-made for technical computing (you don't need to write numpy.array([]) to get an array). If it's the cost that bugs you in matlab, maybe you can go with matlab-like software (Scilab or Octave) instead of Python ?
If you find any, please let me know about them; I'm very interested in other usage modes and would be happy to absorb them :)
Check out the python docs: https://docs.python.org/2/faq/gui.html It is hard defining 'easy' in your headline. Depends on how lazy or disciplined you are basically. Just read about those that are present, then put yourself into the GUI you can identify your needs to. That was my proceeding for choice of language back in the days. Remember, Rome wasn't build in a day.
I am a mech-E student that works in web development using Python (et al). From my classes I was taught Matlab which was my first language. If it wouldn't have been for Matlab I would have never learned python, so I like them both. I have to disagree with you though - I feel like Matlab is clearly what should be used as an introductory language for students that will be working almost exclusively with data sets mathematics. (I'm not even considering C as a viable option; that sounds horrible). Matlab is built for what we need to do right out of the box, and I don't have to pick a good IDE or even really understand much about programming in general, like one would need to with python, to accomplish powerful things with Matlab. As mentioned below, the open source nature of the other two is a big plus, but it's also the only upside I can think of. The time investment is more efficiently spent on engineering tasks in Matlab to those unfamiliar with programming, there is a solid company that releases tons of proven mathematics etc. packages built for engineers, and even with licensing it's not hard at all to have to go to your campus' computer lab once a week for your project (if you can't afford a $100 (( ~ a textbook)) license) 
This is my favorite post on reddit.
Watch this video, it explains some things about using java from within python and viceversa, including android: https://www.youtube.com/watch?v=RfGldwLoiUk
Lots of reasons, but the most important one is probably that in the industry, Python's place is in three areas: server-side web programming, number crunching, and systems programming (i.e., scripting stuff, mostly for server automation and such). I don't know of any commercial Python desktop applications; most stuff is, by virtue of being old and established, C and C++, .NET for newer stuff (and probably some Objective C on OS X). And then there's the resource economics thing: implementing a GUI library that can read GUI definitions from some sort of structured textual file format (say, XML or YAML or some such) is hard enough, but writing a GUI builder to produce such files is a massive task. Meanwhile, the gains are fairly small, at least for a professional development team, and the colossal effort for writing and maintaining the builder happens on top of stuff you have to do anyway. So for most project teams, open-source and proprietary alike, it's just not worth the man-hours, and they opt to make the actual library code better instead. Those who *do* produce GUI builders have strong commercial interests in drawing more developers in, or being more comfortable for beginning programmers as well as mediocre professional developers - for example, Microsoft has pretty strong reasons to push for .NET adoption, and so Visual Studio *does* come with GUI builders, simply because this provides Microsoft with lots of valuable leverage in the developer population.
sum(i for i in [101,107,83,90] if i&gt;100)
Ok, off the top of my head... test_scores = [101,107,83,90] extra = [] for i in test_scores: extra.append(i - 100 if i &gt; 100 else 0) print (sum(extra)) 
Python is not a good substitute for Matlab in an engineering context. If the goal of the course is simply to teach programming and basic algorithms/data-structures, Python is a wonderful choice. If the students are going to be using simulink and the control systems toolboxes down the road Matlab is essential.
sum(i-100 for i in [101,107,83,90] if i&gt;100)
GUI-Builders encourage properly poor GUI design. Try this instead: http://nucleic.github.io/enaml/docs/ If you must use a GUI-Builder, try Qt Designer. It's still a rubbish GUI builder, but at least Qt is a good platform. Note, QtCreator is not the same thing. With QtCreator, the Qt developers made it better by making it worse. amazing. 
&gt; P.S: I'm not interested in web,or in frameworks like Django,etc... That's where mos of the jobs are. That being said: maybe some entry-level position. Your scripts might be working but how do you ensure code quality? Do you understand testing? Do you understand version control? Being a deveoper means more than just being able to write some script that "just works"
wxFormBuilder is actually amazing.
Well, generally the third-party stuff I like the most is libraries. Python is so simple, and the library ecosystem so great, that for endpoint solutions I almost always just roll my own. That being said, my favorite usage stuff tends to be all the `__main__` stuff in the python standard library. `python -m http.server` and `python -m json.tool` stand out as favorites.
&gt; Use relative imports in your package, everything is using absolute imports as it stands. I personally prefer absolute imports. I've had relative imports break, especially between python 2 and 3, and when I go from a local source tree to `setup.py` installation. Plus, [pep8](http://legacy.python.org/dev/peps/pep-0008/#imports) recommends absolute imports.
IdeaVIM is my favorite, emulates VIM 
thks !!
Try /r/learnpython.
edit - deleted dupe post
Sorry, my response wasn't very clear. I'm aware of what you're looking for, as you specified that "libs and modules are out" right in the post. I wasn't trying to answer your question with flask etc, but point out that this seems like an uncommon question, if those familiar answers are excluded to begin with. My question was trying to drive at why the language matters when talking about a finished product that's easy to go out of the box. Once you're at "use apt-get and off you go!" what's the relevance of the implementing language?
Ensure your code is formatted correctly in your question. What error are you getting? A description of the error always helps. 
Yeah, definitely could be a strong argument. The only issue is that MATLAB/Mathematica/etc all know this and make their products cheap/free to academics to draw people into their ecosystem, so the "free" argument isn't as strong as it'd be in a corporate/personal setting.
 list1 = [ ['user1', '18/02/1996', '999999999'], ['user2', '19/02/1997', '888888888']] for name, date, num in list1: print(name, date, num) Here what you are doing is looping through each element of the initial list but unpacking the lists with the details into the specified variables. 
An IT helpdesk or sysadmin type of a position may be useful. These sound like general data processing scripts, although bash or PowerShell would be more of a sysadmin scripting toolset.
Check out Kivy it's a great next step 
I'll give you a hint: You have one extra `for` statement.
Actually the Apache 2 license is approved of by both FSF and OSI as well as being GPLv3 compatible. Just saying.
&gt; Python is not a good substitute for Matlab in an engineering context. What makes you say that?
Digsby, the chat client, is written in Python. ....is that what you mean?
Well, since you seem to be looking for a blogging platform in particular, I'd start here. https://wiki.python.org/moin/PythonBlogSoftware Keep in mind though that, within the python community, the big focus is on development, and therefore the big project focus is on libraries, which is why that's most of what you see here on the sub and on blogs everywhere.
Why does that make this not count?
Seems strange to use `make` to perform all these tasks rather than `flask-foundation ...` or similar?
Yikes, what's with all the negativity here? Let me try... * [FlaskBB](http://flaskbb.org/), BSD license, web forum * [DjangoBB](http://djangobb.org/), BSD license, web forum * [Misago](http://misago-project.org/), one of the GPL licenses, web forum * [Mezzanine](http://mezzanine.jupo.org/), BSD license, web CMS * [Anki](http://ankisrs.net/), AGPL license, spaced repetition flashcard program * [Eric](http://eric-ide.python-projects.org/), GPLv3 license, IDE (not a huge fan of the UI but it's neat in other ways) * [Calibre](http://calibre-ebook.com/), GPLv3 license (I don't like reading books on a screen but it's popular) *Edit 1: I also have a PyQt SQL browser, a CSV browser, an image viewer and some other obscure applications from somewhere (got no links for them right now, will see if I can find them again...), GPL and BSD licenses.* *Edit 2: [Plover](http://plover.stenoknight.com/), GPLv2 license, stenography software that I found interesting at some point but never investigated further.* *Edit 3: Added descriptions of each application.*
I think teaching basic computer science stuff should be done with a general purpose language (python) if it's a basic computer science course *for non-engineering majors*. Are they future software developers or future engineers? Edit: ah I see, mechanical engineers. Yeah, that's probably going to be a tough fight.
&gt; Python has arrays without numpy. Yeah but teaching people to use anything but numpy for real work is not helping them :)
As he said: simulink. It's a good point.
&gt; Besides, do you think that Python has, from a purely **pedagogical** point of view, an edge with respect to C and Matlab? Yes, for three reasons: 1. Python is enormously popular. Python has an enormous community of tutorials, examples, and help forums and this is, in my opinion, the single most important criterion for choosing a platform for pedagogical use. The students will be able to get help online easily, and because python is so popular in other fields they'll have common ground for discussion/learning with their friends. Students learn a *lot* from one another so you really want this. 2. Python is a self-respecting programming language. Matlab is extremely weird in how it handles classes and data structures. By learning with python the students will be learning how real programming languages work. 3. Python and associated libraries are free. This means that the students can go home and put it on their personal machines to play around. This is important for pedagogical situations; you want to take away all possible barriers in front of the students tinkering on their own time. The one place where Matlab beats python is that it might be more relevant to what the students will do in their professional lives after university. This is important and must be considered. However, you asked about pedagogical aspects, so in that sense I really think python wins by a lot. 
It is [BSD](https://github.com/getsentry/sentry/blob/master/setup.py#L151) licensed.
Ok, PHP has a lot of flavors of CMS - that seems fine. Are you suggesting someone make YACMS in python? Or multiple competing YACMS?
If it helps, Purdue's introductory programming course for engineers is based on python. https://www.cs.purdue.edu/homes/skeel/cs501.html
Do you have a firewall running (other than the Windows Firewall)? These applications use sockets to communicate between processes. If your firewall blocks ports used by them then they can't communicate which is essential for them to work.
EE here with several years in industry. I've actually been thinking of writing the program chair at my university about this very subject. While at university I learned many specialized languages like vhdl, assembly, and matlab. Although they are fine tools, I never really learned supplied programming skills. It really hurt several groups during our senior design projects. Several students couldn't program a for-loop. I myself was frequently stuck in the I have no clue what to do phase. Then I read Michael Dawson's python book and suddenly I could code. Python may be relatively slow, but it lets you cut through the crap and learn the important concepts first such as branching, looping, variable assignment...etc. Then after you master simple imperative programming, you learn about the powerful built in object system you've been using all along. Java and C# require you to use a class and using statements for "hello world". Python is print ("hello world"). Matlab is only used in SOME industry. I've never met a classmate who's needed it, and like a commenter pointed out, GNU Octave and Scilab work for 99% of what you need. Keep away from the expensive proprietary bloat-ware. You don't want your students not getting hired because they couldn't debug a simple 20 line "C" program (easy enough to do with minimal C exposure if you already know python). No interviewer in any non technical computing field gives a care if you can take the inverse of a matrix or graph the famous Mexican hat. They will care if you can understand basic algorithms and maybe write some simple scripts. Python is frequently used in software such as Siemen's PSSE.
I don't think it's a matter of Fabric vs. Ansible, they have different goals. You can kinda do things with one that you could kinda do with the other, but I don't think that's what they were really intended for.
Better continuous-integration and deployment. Many companies use Jenkins which I think is terrible.
I will say that is true and almost included it in my comment. Simulink is often used with a control systems class, and I'm not sure how well Scilab and Octave duplicate this at all. In this case I'd guess you could just do your transfer functions in python and skip the blocks.
From the perspective that a University is not just job training, but trying to provide a well rounded education, Python is much more generally useful. Matlab may well be important for Mech-E, but outside a few very narrow fields it is considered a wildly obscure tool. If one of those Mech-E students ever wants to branch out even slightly into physics sim for VFX or gamedev, nobody will be particularly familiar with Matlab. (And I say that as a guy who used to quite happily admin a bunch of heavily used Matlab for a dept. of Applied Math.)
I didn't do the down voting... not my thing really except in extreme cases, which this certainly is not. I don't think that students should *not* be taught numpy, especially if they are programming solely for mechanical engineering purposes. However, this *is* an introductory computer science class, and I would think therefore that other data types would be taught before a library such as numpy. My objection was based on the fact that every data type has it's place. There is no magical data type with which one has the only hope of performing "real work." Bringing up the fact that python comes with a built in array type was purely because I've seen many seasoned python programmers who seriously had no idea that it existed.
That is the repository for the server... I'm pretty sure you are just trolling at this point.
Even if python modules duplicate, when you work in a team it's important to use the same tools as others so that your work can be understood, used, and modified by the rest of the team. A lot of commercial groups use simulink, and so this is an argument to learn it in school. I still think python is better for pedagogical uses.
i don't think you know what you want
Basically only when you're taking a basic computer science class or you're in some other pedagogical setting. Edit: well, the other situation I can think of would be you need a more efficient mutable type than a list, but you can't install numpy for some reason.
I was required to take MATLAB during my B.S. in mechanical engineering. I hated it and never used it once I graduated. I picked up python at my second job and use it every day. I'm kind of bitter that it wasn't an option. Python would've been more than capable for everything I used matlab for and would've carried over to a professional setting better.
&gt; but you can't install numpy for some reason. Surely you've heard of [virtualenv](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)?
This. I would only add that the concepts learned in Python can easily be applied toward learning another language quickly (MatLab included).
Yeah I use it daily. I was thinking more along the lines of lacking the permission to install things.
I find it weird to be running both gunicorn and supervisor - why not just put your flask app directly in supervisor instead? Will eliminate one step and do pretty much the same thing.
This has been bugging me since I read it 6 hours ago... why is it your favorite post on all of reddit? 
Not all engineering development needs simulink. 
I started a project called hitman. I'd love to turn it into a full git management tool, but I just don't have time.
I abhore git. But maybe that's because I'm still very new to version control.
One of the main uses of virtualenv is precisely to allow users to install whatever they want by putting libs in the user's home directory instead of site-packages which is often permissions restricted!
You're wrong, https://github.com/tagged/digsby ...and you're a dick. Fuck off, thanks!
&gt; I don't have to pick a good IDE Wat? I do my python editing in Notepad++ on Windows and Geany on Ubuntu. These aren't even IDE's, just text editors. &gt; or even really understand much about programming in general, like one would need to with python, to accomplish powerful things with Matlab. This doesn't make sense to me. If you want to "accomplish something powerful" in python you type from numpy.fft import fft fourier_transformed_data = fft(time_domain_data) How is this simpler in Matlab? If you, for some reason, don't like having to import modules you can put from pylab import * at the top of your code and then pretend you're using Matlab. **Disclaimer:** Don't ever type from &lt;module&gt; import * in a python script. I just wrote that to show that you *can* make it look like matlab. 
I have been looking for something like this for a while, was about to start writing one. Any screenshots? (for the webui)
https://imgur.com/gOsSeEb These are the 2 default modules included in the git repo of the web interface. You right click the script to get to that menu. The red dot means that it is currently running The gray dot means that it has not been enabled yet The green dot means that it is enabled but not currently running
This is standard with almost any language that supports arrays, dictionaries, lists, etc and is easy to do in any language that doesn't require you to declare the type of all the elements. Mixing sub-element types at the same level is still less than ideal as it makes traversal and usage harder but not difficult. PS: In Python they're called lists.
It's because you are new. There is a reason why every single company I have ever consulted for uses git. Yes it can get tangled but it is the best tool when used properly to collaborate with multiple people.
&gt; Pycharm is owned by netbrains Most code, be it open source or proprietary, is owned by *someone* - I don't see why it matters *who* that someone is. &gt; and its written in Java, not Python. Yeah well, like I already said, it's one third Python. What you asked for in your post was, and I quote: &gt; ... non framework project is that uses python. [It *does* use Python](https://github.com/JetBrains/intellij-community/search?utf8=%E2%9C%93&amp;q=py+language%3Apython). Technically (and given the obvious language barrier), s/he's right.
...maybe it would be wise to put this in the opening statement, seeing as hardly anyone here understands what you are looking for and this would clarify that part?
Hey, great work! Yeah I had relegated Tkinter to "don't use" category for whatever reason. It used to be you couldn't skin the interface and it looked clunky and old fashioned. No ttk lets you reskin buttons and other elements. Also Canvas element was rather nice I remember. But there is still no other
Digital Ocean has a pre-configured Ubuntu instance with Dokku. It was really easy to get my Flask app up and running. Digital Ocean is pretty awesome too. I can get you a ten dollar credit if you wanted to try them out. 
I've had pretty good experiences with Salt so far. Agreed that Fabric is meh though.
Why not just use [rsnapshot](http://www.rsnapshot.org/) for incremental backups? Is there something about your setup that requires a custom solution?
I 've never heard of it. Also I don't know what should be "something" about my setup to wonder about. It's about 160 users with custom permissions in folders and A.D. groups which give access to them and a script that maps them in boot. Also keep in mind that it's a windows network. 
For the moment. The growth in libraries has been such that I don't think even the existence of commercial products like simulink will save it. That is, people will want to use simulink with the large ecosystem of python libraries. So there are already projects to link /call simulink from Python. Over time simulink will become a specialised python tool and library set. 
This is not a recommended use: attribute name mangling (using __) is to prevent name collisions. It's not a good system to hide attributes.
Well that's an interesting perspective...
Is rsnapshot pretty standard?
Would you find scicos/xcos helpful to fill the role of Simulink?
Scroll down the front page. The most comments on an article is 4. Place is a ghost town.
&gt;**Disclaimer:** Don't ever type &gt; from &lt;module&gt; import * &gt;in a python script. How come? I realise this is a bit of a beginner question but I don't fully understand why this is a bad idea. Quite often I'll write something like - from numpy import * and then type the rest of my code. My understanding of why you shouldn't do this is that if you're importing multiple modules they may have the same function names which would screw you up - but I was never actually taught why.
Seriously a shame if that's the case. The SubReddit has a lot of subscribers, the most of any programming language on Reddit.
WTF are you talking about? I scrolled down just 5 links and already I found 100+ comments in a single one. Are you looking in New or something?
There are two reasons that many people don't like to import *: 1. You can get name collisions, as you already noted. 2. One of the great insights of the python developers is that source code is read more often than it is written. It is very important that code be readable. I you import * then there is no way for someone *reading* your code to know where the various names came from. That "someone" can be you reading your own code later ;) At the very least you should explicitly import the names you use: from numpy import sin, cos, pi etc. I actually prefer to do this: import numpy as np and then type np.cos whenever I need a name from numpy. 
 I'm an engineer in electronics but Matlab was never the awesome tool and it's for most purposes too expensive. The main reason why companies buying Matlab is, it's a known tool. Ok Simulink is nice, but tbh. if someone has knowledge in control engineering he has to describe the system anyway theoretically, which is the base of every simulation. What Matlab in some cases makes superior is the link to LabView or other engineering tools. Otherwise scipy,pandas and numpy are better for students. Programming means also to design a program for maintenance and correctness, which is easier to learn with Python. I learned programming with C and Pascal. Not much has changed since then. The old errors by writing programs which aren't maintainable are made daily by students. The language for programming courses has to support the criteria for good programming and the student has to learn a programing language is just one of many. It shouldn't be a problem for an engineer to learn a new language at home. Matlab isn't a good environment to learn good programming and everyone knows it. Matlab is just a engineering tool while languages like C#, Java and Python are covering a more broad spectrum of applications. I made with Python a small SCADA system incl. webpages with realtime data. It's easy to do with python as well as computer vision with OpenCV. It's easy with some lines of readable code to store this data into a database like PostgreSQL. Doing FFT or a filter with Scipy is trivial. Using later webpages or tkinter for a graphical output doesn't cost that much time. Python is batteri included. Python has already a great place in science because of it's libraries, it's readable code and because of the license. Python 2.7 is easy to setup on Windows with the Python(xy) package which is including all the important scientific libraries incl. iPython the interactive shell (Awesome). 
I must break the cycle! 5 comments, here I come!
&gt; Just lots and lots of standalone functions, with no organization by class or package. There is a growing issue with duplication and namespaces as the project grows. Indeed, although one notes that this type of problem isn't limited to matlab. Even in C++ where namespaces are available, lots of people just don't use them. It is a major benefit of python that name spaces are actually used by almost everyone; e.g. import * is strongly discouraged. &gt; actually do not use classes at all. I think this is common with scientific uses. Yeah well nobody said scientists are all good programmers ;)
Cheers mate!
Looks like we found ourselves moderator number 10.
Actually cannot agree with you. I am just learning python. But response is hard to get by in the /r/learnpython subreddit. Again please don't gloat over the fact that you know better than someone else. Everyone has to start somewhere and if its a problem for you that newbies are actively coming to this sub, then its a good thing for the language. some subs are ghosttowns and people wanting to program will find as much as resources as possible .. I am taking a guess that when you came out of the womb you did not know how to program in python .You asked someone who knows and got the resources to learn a beautiful language. Thats exactly how people here are responding. Stackoverflow does a good job, but the emotional support (go get 'em ) attitude that reddit provides is absent there. So please dont moronically go how this subreddit is being a place where newbies can share python love, just shut up and contribute else dont contribute. 
Half of all the articles on the front page have 4 or more comments. Are you sure you don't have "new" selected instead or something? This is a very active subreddit compared to other programming languages. I mean, I guess it's not Ask Reddit or /r/gifs. 
Everyone has started somewhere, yes. This may not be the right place to start, just as a guitar repair shop may not be the right place to learn drawing.
you got a valid point 
&gt;No ttk lets you reskin buttons and other elements. Can you make them look native? And do you have to do it for every platform you want to deploy on manually?
I think you also missed the point. I never said to ONLY use Matlab I'm simply talking about using it as an introductory language. In my experience it was a wonderful tool for getting me started programming in other languages.
Looks good. But, from the GitHub page: &gt; To use: Either download the zip folder, which contains everything you need There is no zip folder?
I don't understand the sudden drive for complete and total purity going on here lately. I checked the top 10 and none of them had more than 0 vote total, so none of them are going to stay on the front page for long. So what exactly is the problem? Do you want people to moderate for the sake of moderation? That would be the only reason to delete the above posts, because it seems to me that they're causing no real issues.
It isn't a wonderful tool to introduce anyone into programming. It made you motivated to move on, nothing else. I would even prefer C before Matlab, because it's a universal programming language. 
He probably means the **Download ZIP** button on the right side of the page that github makes available to you :)
It is polite to explain a down vote, so let me explain why I downvoted your post. I do not feel that the issue you raised is one which is important to this subreddit. The posts you pointed out do not seem to be causing harm I feel that moderation which uses a very light touch is often the wisest practice.
I am giving it a try: &gt;news and announcements? Check! &gt;blog posts about tools and Python usage.. Check! &gt;questions about [frameworks, idioms, availability].. Err! Please discuss this. So that this place does not become a ghost/noob town.
#
Perhaps, but I doubt it, since **Download ZIP** gives just the source code, which definitely does not include everything needed. I'd rather assume they also created a stand-alone distribution, but forgot to include the link.
https://github.com/astronouth7303/gitman with issues and wishful thinking.
Moderators seem to be here to apply broken custom CSS to this subreddit. Otherwise I hadn't noticed them one way or another. So yeah, "just for show" in a way. :-\ 
Have you looked at Julia? It has benefits common to Python (free, open source), MATLAB (meant mainly for numerical work, similar syntax), and C (faster than both MATLAB and Python). It also has a growing library of useful modules, and has been used in other university courses. 
There are many factors which lead this laissez-faire approach to fail for certain topics or subreddits beyond a certain size. Just look at the success of /r/science, /r/AskScience, or /r/AskHistorians for examples of successful subs which rely on strict moderation. I'm not arguing this particular sub needs stricter moderation, but in some cases it is necessary.
If this impresses you, then this will melt your brain: a = [] a.append(a) 
People always respond in learnoython. Are you kidding?
People wanting more moderation need to be careful. Who wants posts like "here's the weekly question thread, guys", that being the only thread where you are allowed to ask question? (r/photography has this, and it's idiotic) Or having your submission rejected because you didn't add a comment summarizing the contents. (r/history has this, and it drives me nuts) I think the sub works fine the way it is.
Really just anything that gets rejected from stackoverflow imo. So that means that specific implementation questions shouldn't be here, since SO does a better job and it's not interesting as a topic to discuss anyway. I think this applies to nearly any programming language sub.
That's why I did it too. (Thanks for being polite for me : ) )
Responses are really, really, easy to get in /r/learnpython, assuming you ask your question clearly. (And aren't asking a stupid question to begin with) People *race* to provide answers on that subreddit. If you're not getting responses, you're doing something wrong. (If you post a post in /r/learnpython and it's ignored, feel free to pm me specifically)
it's not necessary here. There is nothing unique about /r/python that would justify a more heavy-handed approach.
i don't like many of those web technologies either (javascript is a pita to me, and html is still half way between semantic and presentaional), but i'm under the impression that you want people to read your content (both from the presence of the web site and this post), and we're making compromises on the purity of technology we're using to allow that, given people are using http
Thank you for letting me know about theses, I will give them a try.
-1 for throw away accounts with links to imgur
why reinvent the wheel? I'm sure there's a free and open source solution for this.
THIS IS PYTHON SON IT IS A LANGUAGE FOR MEN ANYTHING GOES IN THIS HELL-TORN BATTLEFIELD
Really I have to wonder what in the hell is your problem. I suspect you get banned because you are a flaming idiot that is obsessed with the idea that you can make the world better by controlling everyone. Sort of like a democrat. Really your post is pathetic, I see nothing bothersome about the Python Reddit at all. If things where going down hill then of course moderation would be in order. However I've been watching this forum for months, if not years, and frankly yours is the first post that is worthless. Here is another concept for you, Reddit self monitors through the use of the voting mechanism. The really off topic or badly placed posts quickly get down voted and eventually are no longer seen. On top of all of that this isn't a heavily used Reddit. I can come here every day and only see a couple of new root posts. It isn't like there is a flood of totally off topic garbage coming in. In fact almost everything is directly Python related. The fact that this thread is about Python is why I keep coming here. Besides some of the more obscure posts have resulted in my actually becoming aware of things happening in the Python community I wouldn't have seen otherwise. I can't think of a better place to debut new Open Python code, libraries and the like. 
Still nothing. The mods are asleep, post PHP
I've ordered /r/learnpython by "new" several times and found it hard to see a new post that has not already got a couple of good comments on it - often within minutes. Maybe it's a time-zone thing, but my experience is the opposite of /u/warlock1992 's. There's some minor issues with the sub, though: people showing off by answering what is clearly a newbie question with an answer that is (imo) too advanced; people getting a bit passive aggressive at times. But these are minor gripes with what is a very effective sub doing a useful job, I think.
I use Crashplan for my files but in a corporate environment I must obtain several signs and approvals in order to achieve this. Also the final reply will be "Why don't you use what we provide (the crappy backup software) ?". I want to be full aware of the backups - their statuses, If they were successful or not, keep several versions and be able to make some tests too - pretty much what a modern backup system does. I want to use python for that as I will learn in the process and I will be full responsible of every bit of code that will run. 
&gt; I don't see the point of moderation. Reddit is self-moderated: something you don't like, downvote it. You're ignoring the fact that bots exist. 
Controls, aerospace, simulation, autocoding, many industries do. Python, step up your game and make an open Simulink competitor already. You can do better than Scilab.
For the invoice template you might want to check out the [spreadtab](http://www.ctan.org/tex-archive/macros/latex/contrib/spreadtab) package. I use it for my own invoices.
Why not? If you are using python for anything other than hardcore mathematics/science they are easy to use and offer everything you would need. 
As someone who's been using Simulink professionally and academically for 8 years, I've looked at the alternatives and they're not good enough for most serious industry (or even a mechanical engineering department in academia, honestly) to want to use. The closest in functionality and usability is probably OpenModelica, but even there industry tends to buy the professional Dymola product instead. It doesn't match what Matlab gives you outside of Simulink either - realtime workshop, controls toolbox, etc. See http://www.reddit.com/r/math/comments/2g2el8/learning_to_code_as_a_mathematician/ckhyx2m for a more detailed description of what's missing.
I'm going to guess that you haven't used the parts of Matlab that those engineering managers find most important. http://www.reddit.com/r/math/comments/2g2el8/learning_to_code_as_a_mathematician/ckhyx2m Python on Windows is also still an installation / package management mess (at least Conda's not bad), and many engineering companies are heavily using very specialized CAD, FEM, CFD software that often only runs on Windows.
Check out [this post](https://realpython.com/blog/python/web-development-with-flask-fetching-data-with-requests/) which shows how to deploy via Dokku.
it's pretty ironic that this has zero votes right now considering the subject, and author. #fuckinkidz
&gt; and it only has a few hundred employees developing and maintaining it this is false.
But this subreddit has not devolved to that at this point, so the problem is still imaginary. Unless you have a crystal ball, you shouldn't try to "solve" problems before they actually exist. (Especially when they're trade-offs, which this solution would entail) In my opinion, /r/python is intended for discussion of the design of the language itself (infamously enough, "why do we need a GIL?"), the creation of new libraries, news related to the language (PEPs, conferences, etc), and tutorials/blog_posts/etc about third-party libraries. There are other things that are appropriate as well, I'm sure, but those seem like the most obvious avenues for discussion.
You shouldn't have to be bothered with callbacks, look at [defer.inlineCallbacks](https://twistedmatrix.com/documents/14.0.0/api/twisted.internet.defer.inlineCallbacks.html).
Does it really hurt that much to just ignore a link and move on? It's not like /r/python is exploding with content to the point of being noise.
Haha, thanks. I just slapped everything up there and that was that. Currently, the app is listed here: http://seaofbtc.com/bitcoin-trading-client There's an image there, but you're right, there should be one on the github. I'll work on the github page more soon. Thanks for the recommendations!
On Windows, Ubuntu, and Mac OS, it is native by default. Those are the only places I've tried.
Our approach is to have a wheelbuilder container with all the building dependencies etc in that image, once all wheels are built into a shared volume can be "consumed" by other containers just pointing pip to that folder. It works pretty well for us.
Oh, right. You're right, I forgot all about that. I found out that github has a limit on file size. If you want what was meant to be in the zip: http://seaofbtc.com/bitcoin-trading-client head there and choose 32 or 64 bit. I will edit in the links to github asap. I'll also try to get a dist built on mac os soon. I made the app a month ago (edit, actually 2 months ago almost now, looking at this readme. Man time flies!)over the course of a few days, then forgot all about it for a while while other things came up. Getting back to it, trying to make this series on it. Forgot a lot of stuff I wanted to remember to do :) 
My professional opinion is that you must report why the Software doesn't work, spell it out to your boss and offer a solution. Email it to your boss and his boss. If they don't approve then you can offer to use free options but you have to stress that there is no proper support for those. If it does fail then that's not on your shoulders. You've explained the risks. A decent 7tb storage can be had for 1.5k usd. 
&gt; The sub needs to be more specific regarding its content. Content which doesn't fit here will find its home somewhere else Because this subreddit is flooded with content? Or why does it need to be more specific, because it doesn't seem to be flooded with content to me.
Couple things: you've probably heard this but it bears repeating. There is no value in a backup plan, what you need is a recovery plan. The recovery plan is useless if it's not frequently tested. These are the rules of DR. Second: I am almost always in favor of FOSS answers but corp environs can make it a pain. I would suggest rsync for the bulk of the file transfer work, which you can script with python. Then a bunch of spot tests and automated recovery tests with python, virtual machines. Things like tracking the hash of files and timestamps over time. If timestamps are the same but binary signatures are different you've got data loss
&gt; I think is better for /r/Python to drop the Submit a new text post, then everyone will just post only interesting links to news and articles about Python. I found some great links/articles in this sub so /r/Python is of great help to me. That's a really good idea, actually.
So much of it is just useless. Honestly this may be true for a lot of programming subs, but python has so many specialized libraries built on top of it. A lot of them I'll simply never use in my entire life. At least in subs like /r/golang most everything is done with the standard library, but in python almost every project requires you to have some knowledge on some random library.
#
I think it's rather discouraging to call it *black magic*. In the sense that if something should be avoided then it's not worth learning. Which seems to contradict the goal of teaching it.
https://docs.python.org/3/whatsnew/3.0.html
Python 3 is the most recent. If you're just getting started, use that. The only reason to still use 2 is if you have to support a legacy product or rely on a library that hasn't been ported yet.
I could be way off, but I read black magic like "an art which many people don't really understand but is extremely powerful". Disclaimer: I have not watched the presentation yet, so I could be all wrong
Looks useful, thanks! Have filed an issue to look into later: https://github.com/bamos/latex-templates/issues/2
*"So much of it is just useless."* Obviously not, if someone thought it was useful enough to post about. Again, does it really hurt that much to just ignore it and move on? *"At least in subs like /r/golang[1] most everything is done with the standard library, but in python almost every project requires you to have some knowledge on some random library."* I suspect that's what happens when you have a thriving community with a fairly easy code sharing system. Code reuse is great, not something to complain about. (And besides, I strongly contest your claim that " almost every project requires you to have some knowledge on some random library.". Python isn't javascript and comes with a huge set of batteries for you to work with.)
That's how I read it too 
Or just disable text posts here and take all of them at /r/learnpython which is a great subreddit - no need for another one.
Binary and strings are the same thing in Python 2. The string encoding is default ASCII. In Python 3 strings are uni-code. Binary is its own object. There are a few other changes but the above it by far the most significant. 
Nope, my point is that while this sub is not flooded with content, regulars are perfectly able to decide what they want to see here by themselves. The purpose (one of, relevant here) of having mods is to resolve the paradox where deciding which stuff you want and don't want to spend your time on reading begins to take too much time itself: you have to waste time to downvote waste-of-time submissions. While there's less than 20 submissions a day (and half of them gets downvoted below zero by other people and drops off anyway) that's just not a problem. The proposed solution to this kind of non-problem on the other hand is already obvious to be going to become a problem. A lot of time will be wasted creating the rules, discussing the rules, people dramatically quitting the subreddit because the rules ended up not what they desired, discussing the applicability of the rules to particular cases, witchhunting the mods who apply the rules too strictly, witchhunting the mods for not applying the rules strictly enough, etc, etc, ad nauseam. This post already has more comments than half of the all-time-top posts in this subreddit.
Well, my comment was about the title, not the content. It's like renaming the "Mathematics class" to "Horribly obscure jokes class". Maths may eventually lead to that but it's not what Maths are really about ;-) Or, to put it more bluntly, what I'm trying to say is that *black magic* has a negative connotation. 
Is the directory added to your path?
I assuming there should be a pip.exe in that folder, so what you will need to do is add c:\python27\scripts to the windows environment path. But you can also run powershell from the mentioned folder, by typing 'cd c:\python27\scripts', and then run pip.
Keep in mind that rsnapshot relies on hard links for deduplication. An implication of this requirement is that it's not possible to use something like Amazon S3 to archive old backups if the need ever arises in the future. I plan on evaluating this software at some point soon: http://obnam.org/
I'm quite obviously complaining about the libraries that don't come with python. And useless to a huge subset of people, you could post almost anything and one of 80k subscribers would find it useful.
I was replying to that particular complaint. *" And useless to a huge subset of people, you could post almost anything and one of 80k subscribers would find it useful."* I assume you've taken some kind of informal poll? Or are you just assuming your opinion is that of the majority?
I think he meant something like using SQLAlchemy instead of the DjangoORM
Using virtual machines seems a nice idea... I haven't thought about that even though I have been using VMs a lot... I suppose you're talking about Disaster Recovery. Yes there is a process about that but not for the file servers but the mainframes which keep financial data. Seems like file servers isn't at anyone's real interest because they don't have deep I.T. knowledge so they assume that I've really got it covered. A bit complicated, but this is how it works and I am not an I.T. Manager to decide otherwise. The purpose is to cover my ass in case something happens :) 
Why am I arguing this again? Are you under some misguided assumption that every programmer has a use for every library? For example, does everyone in your world need to know how to work pil? Really thought you'd be able to figure that out on your own, but oh well.
Sure. They're all related ideas, and no matter who calls it what, having a plan for whatever disasters you're in charge of handling is important. It sound's like your A isn's C'd unless you can recover the lost files, so practice :)
You don't want to teach a pre-release language.
Sounds reasonable. 
I don't want to make it seem like the Python community is full of dicks, but in general, asking a programming question will get a *very* poor response if zero effort is shown. You could have typed your exact question into Google and gotten the answer in a fraction of the time -- and straight from the source! [This is a good rule of thumb from Stack Overflow for asking technical questions](http://stackoverflow.com/help/how-to-ask)
what is this good for ? *scratches head* and it'd be nice to have some sort of narration, perhaps textual. going through the slides was weird. weird as in i was expecting something but it never came. i guess you spoke about it, but the slides do the topic little to no justice on their own, due to their nature.
Are you under the misguided assumption that every post in a subreddit is intended specifically for you? (Or for every single person subscribed to the subreddit) Of course not everyone cares about every third-party module. People post what they thing is interesting and other people read what they care about. That's how reddit works. I still don't see what your issue is. By the way, just because you disagree with someone doesn't give you free reign to be dismissive and rude.
Neither of these is written in python, but they are my two primarily-for-amusement repos: * https://github.com/xiongchiamiov/terminal-screensaver * https://github.com/xiongchiamiov/git-pray And some people might include https://github.com/xiongchiamiov/git-swear-stats in that category as well, although I think it's a useful culture-analysis tool.
I haven't done it myself. See here at the bottom about styles. https://docs.python.org/3.1/library/tkinter.ttk.html I think you can define styles to match native. Also by default Tk will try to display native-looking widgets on Windows and Mac. Since Linux doesn't have a 'native' default GUI not sure what you get? GNOME, Qt, other (Motif &lt;-- I think this is the "ugly" we are talking about on Linux). 
Correct Answer has now been posted by myself. Thanks Crickets.
Eh, rsync is.
[I'll help!](http://lmgtfy.com/?q=difference+between+python+2+and+3)
that could work. Other option is use a very subtle animated icon, for the running, so a mild pulsating blue?
I think it's because it was just posted to /r/coding too.
I hadn't heard about SQLCipher before. I don't have a need for it right now but it might be useful in the future. I wonder, though, if it'll work linking it against libreSSL instead of OpenSSL.
22 year old?
The error message is: can't multiply sequence by non-int of type 'str'
Try /r/learnpython, check your formatting, paste the error and I'd *personally* recommend using `x = int(input("What did you pay for it? "))` or something similar although with a `try` and `except`, have a look at basic exception handling.
Let me know if you end up getting that to work and I'll be happy to update the post. Glad you found the info useful!
Fixed: Needed to use the input instead of raw_input since it automatically makes it an interger. 
One.
Sorry, I didn't record the talk. If I do, I'll resubmit. I thought that just the slides and demos would be of some use.
Tell that to Stanford, MIT, and [several others](http://julialang.org/teaching/).
your formatting is a bit wonky. you can either use a [pastebin](http://paste.pound-python.org/) or prefix every line with 4 spaces like so: print "VAT Calculator" input = raw_input("What did you pay for it? ") if input &gt; 0 and input.isdigit(): print input() * 0.8 else: print "Try again!" then you have a typo in your code on line 4, I suspect you want to leave out the () after input. then, you want to paste the entire traceback, not just the last line, like so: Traceback (most recent call last): File "Desktop/derp.py", line 4, in &lt;module&gt; print input * 0.8 TypeError: can't multiply sequence by non-int of type 'float' you read a traceback from the bottom to the top. first thing we encounter is this message: can't multiply sequence by non-int of type 'float' so what does that tell us? it's trying to multiply a sequence by something that's not an int. apparently it doesn't know how to do that. next thing we encounter is a snippet of code with a line number: File "Desktop/derp.py", line 4, in &lt;module&gt; print input * 0.8 so there's something wrong on that line, lets see what the type of input is by adding a line right above line 4 like this: print type(input) this will output which type input is. try and answer these questions: - what type do you expect it to have? - what type does it have? - does it make sense to multiply that by 0.8? 
you have too much magic going on in there dude, for the untrained mind, it's very difficult to grasp what's happening. and to reutter my previous question, what is this usually used for ? 
Have a look at this small project I was working on. Would be open to any productive pull request. 
and i'll upvote the thread, but do throw us a bone :&gt;
If you are looking for something more powerful (and complex), [Rundeck](http://rundeck.org/) might also be an option.
The multiplication is because the VAT in Denmark is 20%, so i need to take off 20% to get the right result. I don't know what to expect, i got so confused since it kept telling me that i was wrong even though i changed it. :) Thanks for breaking it down, btw. 
you haven't answered a single question from the list. you really need to try answering them. - what *type* do you expect it to have? - what *type* does it have? - does it make sense to multiply that *type* by 0.8?
I too wish to explain my downvote. To me, this is a subreddit for all things Python. I understand the complaint to a degree given the other subreddits for various things (like /r/learnpython) but I do not see why such questions could not be answered here and the side menu links seem to imply the openness of this subreddit for such things. I think we as a community (both in terms of the subreddit as well as Python) should be considerate of those who are new as well as those who have been around for a while. I do not see any harm in a person asking a question no matter how long they have been using Python in this subreddit. I too believe moderation should be just enough to keep threads on the topic of Python which could benefit the larger community. I also believe that if a topic is above or below my particular skill level and I do not wish to see the information/question therein then I am not required to read that topic just because it is in a subreddit I frequent. I understand I wield a lot of power through the click of a mouse in what I read.
That is pretty amazing actually, and may workout better. Will havet o try it out as well.
There are. People have already named a few. I'll add Boa Constructor, which I love but which is stuck in time at Python 2.6, sadly, and so few will use it at this point. It allows you to design your GUI by dragging widgets as you are hoping. I wish Boa had the same kind of support team that Matplotlib had--it would be astounding (and it is already given that everything was done by one guy so far).
I love your blog posts. I either read them in their entirety as soon as I see them, or bookmark them to read later because they're interesting even if I don't have an immediate use for the topics you cover. I don't know if it's intentional, I think your approach is great for getting people interested in peewee.
Hello charles, is this possible with python 3?
Thank you so much, that's really kind of you to go out of your way to say that. Haha and yes, I hope to get more folks interested in peewee!
OK. For the record: I am disappointed, r/python. I thought this was an awesome trick.
We package our wheels in a different build process and upload them to a private repository. I created https://github.com/sherzberg/docker-curdserver just for this use case. Curdling isn't perfect, but it is a really nice wheel repository (as well as non-wheel packages). We still need pip in the docker container, but the wheels really speeds up the docker build and we also don't need build-essentials.
IIRC their pricing doesn't scale well though.
Obviously you two are in Slytherin. 
&gt;If you are about to ask a question, please consider r/learnpython
Does this create issues with [indexing encrypted data](http://postgresql.1045698.n5.nabble.com/Fast-Search-on-Encrypted-Feild-td1863960.html)?
I guess one is an integer, and one is a string. I don't know what i expect them both to be. Well, it turned out to work in the end. So yeah, i'd say that. 
They might be confused by the IPython notebook, which runs in a web browser, but does not require internet access (it uses the loopback interface to have network connections within a single computer). It seems incredibly bizarre to provide something like this and prevent people taking data out to actually do anything with, but that's another battle. As for the command line, you can point them to the docs on [Anaconda launcher](http://docs.continuum.io/anaconda-launcher/index.html), which can start things without needing a command line interface. Though that's another restriction that seems pointless. If you get in touch with Continuum, the company that makes Anaconda, I imagine they would be happy to reassure Statistics Finland about these things. [Aaron Meurer](https://github.com/asmeurer) may be a good person to contact. 
or maybe someone needs to add "Aaron Swartz" to the corpus for their cluster of downvote robots. :)
this is one of the very very few self.python posts I will +1 Also: this describes the problem pretty well. http://www.skidmore.edu/~pdwyer/e/eoc/help_vampire.htm 
Thanks for your reply takluyver! The point about not needing the command line if using the launcher is great. When I open IPython Notebook a tab opens up in my browser, but also there is a separate window, which looks a bit like the command line. Is that window "separate" to the command line in a sense that even if I didn't have access to the command line it would function normally? I've received an email from Continuum on this, where Matt Thornell wrote that Anaconda is reaching out to their repositories (e.g. conda update XXX). Unfortunately I think this will be unacceptable to Statistics Finland. I understand that they have an enterprise solution where the repository is local, but it costs 9500 $ a year. I understand how ridiculously small that sum is in the context of a statistical agency, but fear some irrational aversion to paying anything. I was wondering if there was a way to use Python in a way where all access to outside networks would be disabled and the updates of the packages etc. could be done by the system administrators.
It *is* bizarre. In this case, a possible disadvantage. I do like IPython notebook (haven't gotten very far, mind you) but why did you(?) choose a web-based GUI rather than something like PyQt, PySide, wxWidgets, TkInter or GTK? The part where anyone can view the document/file/whatever later on simply by using their web browser is really neat though. The loopback interface thing and mere mention of "network connection" or "server" is likely to cause government IT departments to freak out a bit. In my experience IT departments aren' (I'd like to once more point out that I am very fond of IPython notebook despite merely using it as a glorified sandbox environment to run database queries and plot graphs.)
Very true. Once anything goes beyond their free tier (1 dyno), I typically move it.
What is the error message? Did you try running `import math` first? Check out /r/learnpython for questions.
Yeah but I don't know why it doesn't recognize it.
if you're using the interpreter, you must first enter 'import math' if you're writing a .py script, you must have 'import math' at the top of your file. If you have already done this, something is wrong and you'll probably need to reinstall python.
I don't know what it was but i restarted everything and now it works. Basically the error message was that it didn't recognize math from "math.atan(...)".
Non of those look like intro to programming though
you would use regular python, I would assume :)
I need to remember that decorator next time I do a JSON API in django. I like it much better than the REST frameworks.
Agreed. This could have been cool, but there's no content there. On a more general level, I think it's awesome that you can do stuff like this in Python, but most of the time it should be avoided precisely because of the 'magic'. I've used metaclasses for things like debug logging (log every method call with parameters and return values) but that's about as far as I would go with "production" code. 
OK so I just communicate with the service directly, I wouldn't have to use any third party prebuilt libraries like with other APIs?
unless you changed something it **will not** work. ever. it's not possibly to multiply a string (text) by a fractional number. you might've solved your problem by a fluke this time, but you still wont know how to solve it next time.
Is there a reason or use case for using this server side? Sounds mostly like something done on a client device in case the device is lost. Just curious. 
Import.io appears to be its spiritual successor.
Apologies, I downvoted this, and I'll explain why. 1. Every open source project needs help. 2. People are usually pretty busy, and they're browsing reddit between builds or while their tests run, or whatever. You've given no information about your project in the description.
See also: https://github.com/GoogleCloudPlatform
More "cool python tricks" than actually funny, but it amuses me. I always get a kick out of something I figured out for [aioevents](https://github.com/astronouth7303/aioevents/blob/master/aioevents/__init__.py#L81-92). See, the purpose of the function is to call each event handler in turn and return its result. BUT, short circuiting behavior also works. If you wrap it in `all()`, it stops on the first falsey value, and if you wrap it in `any()`, it stops on the first truthy value. These kinds of behaviors are incredibly useful for plugin events (cancel an action, get a value from various plugins, etc). And I get them for free just by using a generator.
oh nice thank you! now i'm starting to understand the uses! i thought something similar when i saw the .meth example, but wasn't sure! 
what do you mean by when I change it? you mean change the variables around, 'l' and 'r'
thank you, I've posted in there :) 
Those do give you more than just JSON serialisation though. They have auth, throttling, schema data, all that stuff you'd have to re-implmement when just using a JSON decorator. That being said, I can see myself using it for small, unimportant or quick stuff.
Better than recording the talk next time, simply add a sentence for everything you do in the notebook. Would be great to know what you are trying to show with CCPrintMeta and GoodSingleton / BadSingleton.
&gt; however if I change it to around - the output is wrong. Yup.
Just yesterday I was thinking about this kind of *encrypted* diary-like app for taking notes and saving media on a private fashion. I think I would probably need some kind of database for storing and indexing some metadata. This would probably be useful for that.
Oh crap, I should be calling actual recursively not the longestSharedSubSequence method. Oversight when I split the two O.o
Deepcopy is for objects
Can anyone give a simple, stripped down example of how django achieves magic like this class MyModel(models.Model): field1 = models.CharFied(max_length=50) which generates `CREATE TABLE MyModel ( field1 char(50) ...)`I tried going through the source but it wasn't immediately obvious to me.
You should check out pymongo
http://pandas-docs.github.io/pandas-docs-travis/
When I interview data science candidates I'm looking as much for the statistical analysis skill set as I am for data engineering capabilities like MapReduce, Linux shell, API calls. The best ones are as skilled at building the data pipelines as they are at analyzing the data going through the pipe. And the icing on top is the ability to display and share the results via front-end development with Javascript and related technologies. So I'd recommend any classes exposing you to those areas if you haven't been already.
Article Summary: django-jsonview package lets you make json views in django. Seems like something like django-json-rpc would be better though...
It seems like that's crying out for a sleek UI with time saving features. It's quite a niche task but if you can make generating the YAML easy and quick you've changed some people's lives. Edit: One that occurs to me is teachers emailing back a class' work with feedback etc. Let them loop through a list of people and set the specific attachments, message and so on that each person is supposed to get and that's a game changer.
Good idea, I've filed an issue and might implement something later. https://github.com/bamos/yaml-mailer/issues/5
Pandas is awesome! I've found it a bit clunky though for dealing with non tabular data, are there pandas methods you could recommend for doing this type of thing?
I used this for filtering lists of tweets from the twitter api. I was thinking of using mongodb, but decided like that seemed like a lot of overhead for some simple queries / transforms. This also has no dependencies.
Thanks for the suggestion! I've edited the OP for that purpose.
You could try using a hierarchical index, but pandas is really for tabular data
Unfortunately, very little in Django is simple. But I'll try `Model` (from `django.db.models.base`) uses the `ModelBase` metaclass. This performs a bunch of manipulation of the namespace, registration, and other internal mechanisms that I don't fully understand. The result is a descriptor that describes the model and its fields. Through the various layers, this descriptor ends up at the database driver (`django.db.backends`). Because of the vagaries of SQL syntaxes, each driver has the option to do their own query generation. (In practice, 95% of the work is done in a base class.) This is then passed through the layers and handed off to the database connection (probably DBAPI) and sent off to the server.
I often find the same thing when asking something that seems to be an inexplicably rare thing to want.
It does seem like subprocess misses the (obvious to me) API that gives you output from stdout AND stderr as it happens, without messing around with queues, threads and that sort of thing. 
Black/deep magic has a semi defined meaning in programming lore.
I can't edit on mobile: when I say "fork off an IOLoop" I mean make a thread, not literally forking, as that is obviously not correct :)
To be fair, this is the sort of thing I'd agree is more suited for /r/Python. It's not about *learning* Python.
I read your comment you linked, and while I definitely understand a lot of the issues, saying this: &gt; It's telling that you don't see too many large engineering companies investing in the development of these capabilities within the Python ecosystem Isn't exactly a good argument. You would see tons of companies using FORTRAN or COBOL for ages, would you use that as an argument for learning it over Java, C#, or Python? There's a huge amount of sunk costs in businesses that lead them to stick with what they know, rather than trying to stay atop the wave. It's a tradeoff to be sure, but I don't know how well skills between Matlab and Python transfer. Especially for an intro course, I'd want to pick then one that has skills transfer the best (and not just transfer to Matlab, but also other languages). 
What about hiding the async behind a generator or coroutine? Have the synchronous code pass an iteratable to the generator function. The generator spawns the threads and executes the asynchronous bits and then yields values back to the synchronous code. The generator could yield the values either in whatever order they complete or in the same order as the iterable that was passed, depending on the needs of the synchronous code. I've used this method of isolating the asynchronous parts with a good deal of success.
errors is not a python standard library module. It is probably a module defined by your application or library.
You probably need to write `from .errors import`
Are you learning to program? Use Python. Are you learning to use the tools that are heavily relied upon in industry, as a mechanical engineer? (How to tune a PID loop, how to simulate a nonlinear differential equation with continuous-time dynamics and a discrete-time feedback controller, etc.) Matlab/Simulink experience is still more relevant on the resume, if Matlab/Simulink is what's going to be used on the job. This should of course be re-evaluated periodically over time, as more agile, newer companies (Tesla, SpaceX, etc) that are willing to use new and different sets of tools like Python grow and gain more influence on the rest of their industries. I think it would be an even more interesting question if it were more visible, how much functionality those companies are able to replace in-house that's not widely available in the open Python ecosystem but you can get from Matlab. My suspicion is the companies using Python for engineering tools also have substantial teams of professional software developers doing engineering tool development, likely with a lot of C++ for the heavy lifting and hardware interaction. Older companies don't invest in doing that kind of work in-house as much, they buy Matlab licenses instead.
I haven't used tornado much, but I effectively accomplish this with celery. The async version of the task will be called with .apply_async, and the sync would be the same function called with .apply. This reduces programmer overhead, there's no difference between the async and synchronous version of the functions. There is other overhead in the cost of an additional program that needs to run, either redis or rabbitmq, whichever suits your fancy. If you're doing a lot of very small tasks (sub 50ms) then this probably isn't for you. If you want to scale out to multiple machines, this would probably be easier to maintain than tornado, since celery manages a broker for you. 
Thanks guys! Both responses were helpful in finding the answer. It was an application specific library and was fixed by .errors. 
I guess the question I would ask is, whats wrong with empty cells? Pandas does a great job with missing data/empty cells. 
Your code is ugly, follow [PEP 8](http://legacy.python.org/dev/peps/pep-0008/) style guide.
&gt;I find it ironic in the case of Python especially. “Explicit is better than implicit,” say the Pythonistas—except when it comes to types?
I'm surprised to get a rude comment on my coding style from a profile that links to your name, GitHub, and website. Edit: The original post I responded to as being 'rude' had profanity.
wasted space
If you only want to permit synchronous code to be able to execute a single 'get_message' at a time, then I would lean towards a context manager: with IOLooper() as l: l.get_message() ... IOLooper would spawn the thread and handle cleanup afterwards. If you want the synchronous code to be able to execute several get_messages concurrently, then combine the context manager with a 'map' function. with IOLooper() as l: for rcvd in l.map(dest for dest in dests): #do something with received message... The context manager enables the synchronous code to control the lifetime of the thread without needing to manually handle startup and cleanup. In other words, 'l' can be created early in the program's lifecycle, get passed around the program throughout the program's lifetime and then automatically cleaned up when no longer needed. I assume that your library is async for a reason. I.E., it's faster to perform several slow network tasks concurrently than in sequence. 'l.map' enables the synchronous code to take advantage of the concurrency/parrallelism that your async library offers, without being polluted by futures. I know they're in JS, but bluebird offers some examples for taking something like this: https://github.com/petkaantonov/bluebird/blob/master/API.md#mapfunction-mapper--object-options---promise and turning it into something like this: https://github.com/petkaantonov/bluebird/blob/master/API.md#generators I think Python supports this transformation even more completely.
&gt; To be fair, this is the sort of thing I'd agree is more suited for /r/Python. It's not about learning Python. I agree, but [recent](http://www.reddit.com/r/Python/comments/2kgzyv/its_my_cake_day_so_i_want_to_ask_you_what_your/) [threads](http://www.reddit.com/r/Python/comments/2ka1wy/help_need_to_create_a_script_that_lists/) [like](http://www.reddit.com/r/Python/comments/2k9qb1/best_ide_for_python/) [these](http://www.reddit.com/r/Python/comments/2kg5db/which_ide_should_i_use_beginner/) [make](http://www.reddit.com/r/Python/comments/2khvir/sum_of_a_list_greater_than_100/) [me](http://www.reddit.com/r/Python/comments/2khyww/could_i_get_a_job/) [wonder](http://www.reddit.com/r/Python/comments/2k3oy6/complete_this_for_fun/) if this isn't just a troll. I could be wrong but there have been several new accounts asking dubious questions only to disappear afterwards. 
Why we built it on HTML instead of a conventional GUI toolkit: - Users already have web browsers. Getting something like PyQt installed on different systems can be tricky, especially where people are used to tools like pip that only deal with pure Python packages. - Though we're not big fans of Javascript, it is much easier to build complex UIs than our experience with frameworks like Qt. If you just want to put something together out of text boxes, buttons and menus, it's easy with Qt. But for more complex UIs, the high level interface is too limiting, and the lower level interfaces are inconvenient. - It's relatively straightforward to provide remote access to the notebook running on another computer. So, for instance, a lecturer will be able to provide the notebook application on a server for their students. We're working on tools to make this sort of thing simpler. We're in the fortunate position of not having to deal with too much IT bureaucracy, but I can well imagine that they would not look kindly on what we're doing.
Three very good arguments, I can't argue with that, thanks for taking your time to reply!
Try on the r/learnpython subreddit (read the sidebar).
It's because I work every day with people that do the same thing when coding. So, when I need to debug, read the code or do other stuff I need to re-indent everything because is unreadable. I'm not saying that your idea is wrong or useless, it's just the coding style. You don't need to put the entire code in a single line. :) I also removed a word, to be more polite ;)
I am glad python is dynamically typed; you can do some really cool stuff with that. But I would also love to have a statically typed option that could improve readability and performance when used correctly. I wonder if this has been considered and decided against because of complications I am unaware of.
I prefer statically typed. Ive had and seen many silly errors in production which could have been prevented with static typing. With dynamically typing its hard to tell what youre dealing with when writing or reading code. Like you mentioned, its more explicit, so its more clear in my opinion.
I removed the most rude word I think. :)
Is it REALLY wasted? Lack of an attribute is valuable information. Youre not bitpacking on a 32 microprocessor. Is it "wasted" ? Maybe if you were working on something super memory intensive. Pandas is a C extension (everything based on numpy arrays) so wasted space in pandas still probably outperforms consolidated space in pure python. Personally Id never consider empty cells or "missing" data a problem. Edit:some spelling. Still probably more spelling errors though. 
Yes but in Julia there are no classes I think, they are entirely replaced by types. I don't think it's better.
/r/learnpython is cursed with its name. It's a place for Python questions, which, more often than not, _are_ about learning it, but that's not exclusively what it's for.
Yeah, that one resonated with me too. It's a good point. However, with Python, we also have the following. &gt; Simple is better than complex. Ok, so +1 for dynamic typing. &gt; Readability counts. -1 for dynamic typing. If you have to look somewhere else to figure out the type, then it's not really "readable" by definition. &gt; In the face of ambiguity, refuse the temptation to guess. Hmmm... -1 for dynamic typing. &gt; There should be one-- and preferably only one --obvious way to do it. -1 for dynamic typing again. Python features strong type enforcement, but it can be a pain to figure out to which type a value will be coerced. &gt; Now is better than never. -1 for dynamic typing again. You can't tell what type a variable will have until later with dynamic typing. &gt; If the implementation is hard to explain, it's a bad idea. Trying to explain how Python uses strong type enforcement despite dynamic typing is never straight-forward, so -1 for dynamic typing. So, dynamic typing scores -4 by my count. In short, this sums up pretty well why I shy away from using Python at work. When the chips are down, I don't want to have to work on and support large code bases that use dynamic typing. It's just that simple. 
tl;dr: KV lookups local disk databases are fast. C backing is fastest, pure python is slower. redis is much slower for single threads because of protocol and (unmentioned) context switch overhead. 
Why not asyncio? Or use gevent
Was the word "Perl" or "PHP"?
there is current work in this direction with [traits](https://github.com/mauro3/Traits.jl), which is similar to how Go does it. No subclassing of non-abstract classes, but you can say this has these attributes and hence this method can be applied to it... IMO this is more intuitive/makes more sense than multiple inheritance.
Have submitted a pull request that should prevent memory blow outs for large trees.
&gt; I prefer statically typed. Ive had and seen many silly errors in production which could have been prevented with static typing. I've seen many silly and escalating designs, design patterns, and technological solutions (e.g. templating) that exist only due to the need to have static typing monkey what comes natural and immediate in a dynamically typed environment. All these solutions are completely useless in a dynamically typed environment. I also saw refactorings made close to impossible due to the impossibility to step-stone through the refactoring while keeping the static typing happy. &gt; With dynamically typing its hard to tell what youre dealing with when writing or reading code. Same when you template a function in a statically typed language. &gt; Like you mentioned, its more explicit, so its more clear in my opinion. But it increases the complexity and coupling of your code, making it more messy. You can't win.
The problem with static typing in the context of python is that it would quickly get out of hand as soon as you move beyond the basics. How are you going to statically type variables when *everything* is first class. Just imagine trying to statically type a variable holding a function with default/keyword arguments. My head is hurting just trying to imagine the awful syntax that would require. Then start rolling that into data structures... Python has made many fundamental decisions that are incompatible with static typing, in particular the prevalence of duck-typing over inheritance/polymorphism. It is easy to argue for static typing when only considering trivial examples, but frankly optional static typing on basic types is fairly pointless since those applications are generally obvious to begin with. As soon as you try to apply static typing where it really matters (OOP in particular) you are basically forced to remove most of what makes python useful and turn it into a Java clone.
No one here has heard Guido's recent [revelation](https://mail.python.org/pipermail/python-ideas/2014-August/028618.html)? tl;dr: He intends to add optional static typing.
I don't think anyone is advocating statically typing everything, but statically typing key parts. python 3 syntax already allows this but it's not enforced. http://legacy.python.org/dev/peps/pep-3107/ Edit: and a Guido [email/announcement](https://mail.python.org/pipermail/python-ideas/2014-August/028618.html) mentioned elsewhere these comments (to enforce it).
Mostly because I don't have any experience using anything besides tornado. I'm not saying it's right, just what I'm thinking about right now.
Good point. I will need to reconsider my stand on Python for large code bases.
As cymrow has reminded us elsewhere in this thread, this is already being added to Python 3.5. It will be based on [mypy](http://mypy-lang.org/tutorial.html).
a bunch of people are going to suggest some pdfs and online courses, try those. Also, see if a video helps. Try [this guy at One Stop Programming](http://youtu.be/cpPG0bKHYKc) . Notice you can check the informaton below the video window or at his channel or on his website. Some times he talks too fast, notice that you can adjust the speed with the little 'settings' gear in youtube. Plus he has links to source code and notes from the lessons. Also note, other people have done similar video courses. Google &lt; youtube python&gt;. The docs are hard or impossible to read even for native speakers who do not yet know programming. Imho people who tell beginners to go read the docs are just being dicks on purpose.
Can I also play the interpretation game? &gt; Simple is better than complex. +1 dynamic &gt; Readability counts Types clutter the code, and they don't add functionality. +1 dynamic &gt; In the face of ambiguity, refuse the temptation to guess. Ok, -1 dynamic &gt; There should be one-- and preferably only one --obvious way to do it. If you make typing optional, there's more than one way to write the code. And if you make typing mandatory, you break all backwards compatibility. +1 dynamic &gt; Now is better than never Let's use the dynamic typing system we have now, instead of some imaginary static system that we may never have. +1 dynamic &gt; If the implementation is hard to explain, it's a bad idea. How would you introduce static typing into python? Can you explain [mypy](http://www.mypy-lang.org/)'s implementation easily? No? +1 dynamic Hmm, looks like +4 for dynamic typing!
&gt; The project is a maze/room with objects and it requires the use of a GUI (Tkinter) I recommend against Tkinter. There are better options out there. As you said, look into what's out there. You can save yourself a lot of work. &gt; The concepts in my mind are using 2d arrays to store the coordinates of the objects that should be avoided and on each movement of the robot, the coordinates of the robot should be compared to the coordinates in the array and a decision should be made where the robot should make a rotation (i.e. bounce off) or not. So it's like cheating object detection but I'm not sure if it'll be easy or hard to implement this. That sounds very easy and a logical way to go if you're OK with being limited to a grid. I'd also use numpy to make it fast. If you want to get fancy, you can use sparse matricies, but if your grid is small, it shouldn't matter.
&gt; Python features strong type enforcement, but it can be a pain to figure out to which type a value will be coerced. Eh? The only hierarchy in common use with type coercion is the numeric ladder and that's about as simple as it gets. &gt;&gt; Now is better than never. &gt; -1 for dynamic typing again. You can't tell what type a variable will have until later with dynamic typing. You've completely butchered the meaning of that quote. It's not saying that lazy evaluation is bad (consider the push towards iterators that came with Python 3) but that you shouldn't let bikeshedding prevent you from making decisions. &gt;&gt; If the implementation is hard to explain, it's a bad idea. &gt; Trying to explain how Python uses strong type enforcement despite dynamic typing is never straight-forward, so -1 for dynamic typing. Really? Python's scopes map names to objects, which is implemented with a dictionary (normally a hash table). `x = y` sets a value in that dictionary. Method lookup on objects fails if the method doesn't exist. Operators are syntax sugar for methods. Code is able to check the type of an object with the `type` function. Done. Now explain how type checking is implemented. 
I'm avoiding matrices due to the complexity and as you said they'd be useless. But I'm just puzzled about how I can implement object detection for bouncing, could you give me any hints on how to go about it other than the obvious way of comparison each time?
&gt; How are you going to statically type variables when everything is first class. Static typing doesn't require this: Foo baz = Foo() There are plenty of languages with static, strong type systems that rely on type inference to provide compile-time safety without verbosity, Haskell is a great example. In fact, type annotations in Python 3 get us most of the way there, if there was a way to enforce them as pre/postconditions.
Haskell seems to be doing a great job typing all the things. The type of the variable in your example would be the type of the function. The default arguments would need to have the same type as the ones you expect to be passed in. And None does not really fit that picture, that's true, but there are more elegant ways to deal with null/none/... values anyway.
&gt; I'm avoiding matrices due to the complexity I think they'd solve a lot of your problems. For example: # the detection grid enemy_grid = zeros((10,20), dtype='int32') # create a random matrix from 0 to 1 rand_matrix = numpy.random.random((10, 20), dtype='float32') i = where(rand_matrix &lt; 0.1)[0] # populate enemies randomly enempy_grid[i] = 1 del rand_matrix player_location = array([5,3]) # the player wants to move left player_input = array([-1,0]) new_location = player_location + player_input # check if there is an enemy # TODO: check out of bounds first if enemy_grid[new_location] == 0: # player has been moved pass else: # can't move new_location = player_location You can do the same thing for walls. You could create stages simply by putting a 0 (no object), 1 (wall), 2 (blue door), 3 (blue key) etc. into a matrix.
&gt; In a language like Ruby or Python, it literally takes longer to figure out what a variable on the screen represents, and it sometimes requires searching through many files and holding many abstractions in your head to understand any non-trivial piece of source code. LOL. Just fucking inspect the thing — you're in a REPL after all! Of course, if you apply, say, Java thinking to coding in, say, Ruby you'll run into problems…
I prefer dynamic typing. The silly errors in production are just that: silly errors that are easy to diagnose and fix. Static typing is a monstrous solution for a problem which is not a big issue at all. The only bugs I care of are not typos, but performance regressions, concurrency issues and tricky business logic misunderstandings. These are the kind of errors that can take days to fix and don't let you sleep at night. A compiler won't save you from them.
Static typing is all the rage at the moment, so making some compromises for it is hard to avoid. And optional static typing isn't the same as mandatory complete static typing. Optional static typing sounds like the best of both worlds.
&gt; Code is able to check the type of an object with the type **function**. Nitpicking but it's a class actually. With python, Every [type/class](https://www.python.org/download/releases/2.2/descrintro) is constructed trough the class 'type', that's why when you do type(some_class), the result is simply 'type'. If you want, you can build your class trough type() instead of the "Class ...: ..." statement. eg: def Foo_init(self): super(type(self), self).__init__() self.n = 0 def Foo_add(self, n): self.n += n def Foo_sub(self, n): self.n -= n Foo_parents = () Foo_attributes = {"__init__": Foo_init, "add": Foo_add, "sub": Foo_sub} Foo = type("Foo", Foo_parents, Foo_attributes) foo = Foo() foo.add(45) foo.sub(30) print(foo.n) 
Have you tried running it using pypy? It should be quicker if the application is compatible. 
Thanks for the thoughtful reply. I'll go back and check on those comments on Haskell. That's a language I enjoyed very much! But the thought of *ever* having to say something like `String myString = new String()` just makes me want to pull my hair out…
The python docs are really good though.
&gt; tl;dr: He intends to add optional static typing. He intends to add an indicator of type, not that CPython would use it. He said that if PyPy, some IDE or whomever wants to parse that and use it, then that's fine.
It quacks like a function. ^(*Srsly though, I didn't expect anyone to pick me up on this point. The bigger flaw in what I wrote is that variable scopes are decided at compile-time.*)
&gt; In the face of ambiguity, refuse the temptation to guess. &gt; Ok, -1 dynamic At least it's better than Perl. 1/0 equals 0 in Perl (without use strict) and a blank string if a variable is printed that is undefined. It could be a lot worse.
I'm running it on a 100million length genome and this function maps 100 reads/3seconds. I haven't tried pypy. I'd much rather try to modify those for loops. Not sure how to tho. 
This isn't an either/or situation. We need better facilities for type inference and function constraints. All the benefits, none of the drawbacks. Done.
... why not both?
Even numpy still has sparse matrix datatypes. Pandas doesn't. Consider an adjacency matrix for a large scale free graph. Storing such an object as a table with explicit "zeroes" at every nonexistent edge would be insanity. And edgelist (or better yet an adjacency list) is a much denser representation and is much more efficient than a dense matrix. 
In building &amp; supporting a large python code base with monthly releases, I saw about one error a year that static typing would have avoided. In most cases it was handling a catastrophic error condition (out of disk?) that our unit &amp; functional testing didn't cover. So, the crash was already going to happen, we just lost some logging &amp; notification due to the type error. Also, in my opinion the clarity benefits are diminished by the potentially more verbose code. The types help eliminate some assertions &amp; validations, but they make the arg list wordy.
try the tutorials from sentdex. imho he makes good tutorials and they are good to understand. https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ
I've noticed that many of the same folks that demand explicit types want schemaless databases. Which makes me wonder if positions on type are really more justifications than reasons.
 perl -e 'print 1/0' Illegal division by zero at -e line 1. I guess your perl is borked.
Call it Typhon (Python -&gt; tyPhon -&gt; Typhon), but pronounce it Type-On &gt;Typhon was the largest and most grotesque of all creatures that have ever lived. He was so tall that he towered over the highest mountains, and his head often brushed the stars. He was of human form down to his thighs, but he had huge snake coils instead of legs. When the coils were drawn out, they reached all the way to his head and let out a loud hissing. &gt;A hundred dragons’ heads sprung from his shoulders and his body was covered with feathers. His body was winged: scruffy hair streamed on the wind from his head and cheeks; and fire flashed from his eyes. &gt;He made sounds of a bull, lion, and dog, and has even been said to have made hissing sounds like a snake.
&gt; the thought of ever having to say something like `String myString = new String()` just makes me want to pull my hair out… We're all with you there. It's more like [saying](http://www.mypy-lang.org/): def fib(n: int) -&gt; Iterator[int]: a, b = 0, 1 while a &lt; n: yield a a, b = b, a+b
Is there a way to filter out the packages to most popular?
There are download stats for each package on it's pypi page.
We do have explicit types. However, Python does not use variables, it uses references. References do not have types; objects have types. 
Awesome! Sounds like the interpreter won't optimize for static types though. I wonder if the pypy devs are thinking about moving to python 3 with this?
&gt;If you have to look somewhere else to figure out the type, then it's not really &gt;"readable" by definition. You still have to look somewhere else to figure out the type in statically typed languages - the place where the variable is first defined. In older languages such as Pascal/Delphi that's going to be at the beginning of a function or program in its own "Var" section, which could be far away from where the variable is first used: -1. If it's a newer language the variable can be defined where it's first used, but of course that could be anywhere in scope unlike Pascal. That's still going to send you looking for that spot and thus a -1. Unless you name all your variables something like nameStr, countInt, costFlt, etc. there's always the potential need to look somewhere else for the type regardless of the type system being used. As for the rest of your scores, the lines you cite have nothing to do with typing. There is no "guessing" in Python's type system. One obvious way in which to do it refers to overlapping features and hair-splitting exceptions (e.g. Delphi again with four string types); I have no idea how you can relate this to dynamic typing. Now is better than never refers to the development model of Python. Any other interpretation is absurd - you'd have to declare the existence of futures and generators unPythonic. :-) &gt;Trying to explain how Python uses strong type enforcement despite dynamic &gt; typing is never straight-forward Really? This stands at odds with the recent study that showed Python as the most-used language for CS101, being the first and so far only official language of RaspberryPi, etc. Python references are like sticky notes/labels attached to objects. Objects have types. There; you're done explaining it. They're similar to, but safer than, pointers. If you can understand pointers or passing variables by reference you can understand Python's type system just fine. &gt; When the chips are down, I don't want to have to work on and support large code &gt;bases that use dynamic typing. And yet you've cited no peer-reviewed literature from refereed journals to back up this urban legend that dynamic typing fails in large code bases. Meanwhile, the little literature we do have on the subject has shown dynamic typing to not only be faster development-wise but also have a statistically insignificant difference in bugs *while users spent less time debugging*. References available upon request.
this
if it makes pypy faster then i have to think yes
And let's be honest; that was the whole point of adding notations to Python 3 in the first place; sort of a "back door" approach.
Those stats are pretty useless due to mirror sites.
Would static typing in python increase the performance of the JIT in pypy?
&gt; Ive had and seen many silly errors in production which could have been prevented &gt;with static typing. But couldn't they also have been prevented with proper tests or documentation? &gt; About two years ago I noticed something. I was depending less and less on the &gt;type system for safety. My unit tests were preventing me from making type errors. &gt;The more I depended upon the unit tests, the less I depended upon the type &gt;safety of Java or C++ (my languages of choice). &gt;I thought an experiment was in order. So I tried writing some applications in &gt;Python, and then Ruby (well known dynamically typed languages). I was not &gt;entirely surprised when I found that type issues simply never arose. My unit tests &gt;kept my code on the straight and narrow. I simply didn't need the static type &gt;checking that I had depended upon for so many years. Robert C. Martin, http://www.artima.com/weblogs/viewpost.jsp?thread=4639 I haven't seen any silly errors that could have been prevented with (and only with) static typing. I have seen lots and lots of additional code needed in static implementations of algorithms as compared to dynamic - and any line of code that doesn't need to be written is a line of code guaranteed to be bug-free. I've personally rewritten some of my old code from a classic statically typed language in Python and seen reductions up to 1/6 the code (so far!). Interestingly I've observed the larger/more complex the original code, the greater the savings in Python.
I've seen errors that can be pointed on the weakness of a poorly thought out static typing system like Java... null, null everywhere
PyContracts? http://andreacensi.github.io/contracts/
&gt; this urban legend that dynamic typing fails in large code bases. It's logic similar to "I don't ride a bicycle because I might fall off". Well, depends how good you are at riding a bike, but it probably will happen at some point. In reality you might save so much time that you can afford to implement a whole load of regression testing. That's better than what you get from a compilation step alone, so you *should* end up getting up on the deal.
There won't be any static performance improvements in Python 3.5.
[TKGame: All-in-one Game library for Tkinter](https://github.com/tarball69/tkGAME) Also have a look at the other repositories. https://github.com/tarball69?tab=repositories
&gt; How are you going to statically type variables when everything is first class. Just imagine trying to statically type a variable holding a function with default/keyword arguments. My head is hurting just trying to imagine the awful syntax that would require. Then start rolling that into data structures... ...And you'd have Scala. :) I actually love Scala. Its type signatures can be terse as hell though.. Scared me away from the language a good couple of times. 
That's debatable. The mirror sites should be mirroring the popular packages. It's not real time, but so what?
&gt; Just imagine trying to statically type a variable holding a function with &gt;default/keyword arguments. Borrowing from Delphi, probably something like Func_type = def(x:int, y:str, z:int=7) and then somevar: Func_type
I imagine it would be like cython but much simpler syntax. If I had to think about what datatype a variable would be, I would leave it dynamic and maybe think about it later if I need to optimize. Not having the option to blend the two yet, I see many times when statically typed is the clear preference and it wouldn't slow me down programming to just be explicit.
What's revolutionary about it? I haven't used Julia, but from the documentation: &gt;To define a function with multiple methods, one simply defines the function &gt;multiple times, with different numbers and types of arguments. I could do that in Turbo Pascal. I also loathed it. Although the concept of "Don't Repeat Yourself" might not have been a mantra back then, it still seemed insane to have to write multiple versions of the same code. Coming to Python recently, it's been fantastic: between dynamic types and argument packing/unpacking there just isn't any need to write the same code over and over. For instance, lots of Python library functions/methods will have an option to pass in a file name or an open file(like) object, which is fantastic and there's no need on the developer end to write the function twice. 
&gt; guess the point is being that you can't see what it is from within the code You see it from within the docstring at the top of the function, just like you'd check the top of the function for the "Var" section in Pascal or Delphi or track down the first use of the variable in other languages.
&gt; Well, depends how good you are at riding a bike I'm always wary of arguments that say "well if you're good enough it doesn't matter". I can just hear [Mel](http://www.catb.org/jargon/html/story-of-mel.html) explaining how his method is perfect, you just have to be good enough. Most developers aren't nearly as good as they think they are, myself included. I want a language that will help us non-rockstars write quality code. I do think that with proper discipline, writing large, quality systems in Python is entirely possible, but I consider it a problem that Python requires overhead to do so. (On the other hand, I think it's fair to argue that Python makes easy things easy, and hard things are just... hard)
As I say, everyone falls off sometimes. I might have extended the analogy to let regression testing represent safety gear like a helmet and gloves, but after a point it gets rather bulky and unwieldy. At work we have a fairly large set of products all written in Python and we do get occasional typos/undeclared self.duh AttributeErrors, but overall we can turn things around very quickly and we're working on becoming more robust. Uh... agility I guess.
I think this is a tooling problem, not a language problem. Example: I'm in PyCharm, I want to know what something is and where it comes from, Cmd+B hovering over it, I'm there. Editor setup can help you out a lot.
&gt; You still have to look somewhere else to figure out the type in statically typed languages - the place where the variable is first defined. No. Static typing enables the IDE to pop-up the type when I hover over a name. It also enables a whole host of refactorings that are difficult to impossible to effect in Python without significant run-time breakages. And that's the deal-breaker. If I can't catch those errors at compile time after making sweeping big changes, then it's not suitable for larger systems. &gt; This stands at odds with the recent study that showed Python as the most-used language for CS101, That just means that Python is, on the whole, easier to teach in CS101 courses than Java; the other educational choice du jour. That's not saying much really; Java isn't designed for beginners and Python is. &gt; And yet you've cited no peer-reviewed literature from refereed journals to back up this urban legend that dynamic typing fails in large code bases. And neither have you provided citations to the contrary despite your offer. But, those would have to be REALLY compelling, because the antithesis runs directly counter to everyday experience. &gt; Meanwhile, the little literature we do have on the subject That's pretty much tantamount to admitting there isn't enough research on the matter to be definitive either way. So why bring up the citations at all? &gt; Meanwhile, the little literature we do have on the subject has shown dynamic typing to not only be faster development-wise And this is an interesting point. I will concede that developing something in Python is normally going to take less time; at least initially. Heck, it's just less typing so how could it not be? That said, so what? There are a bunch of reasons related to the lack of static typing that make using Python impractical in large systems over time. Difficulty in refactoring, testing, and performance all lie at the heart of that. Don't get me wrong. I love a little Python here and there too, but it has its place where it's at now in its state of the art; and it's not usually in the enterprise. But hey... we're all entitled to an opinion. I might even change my own if you want to be persuasive enough.
&gt; Python's scopes map names to objects, which is implemented with a dictionary (normally a hash table). x = y sets a value in that dictionary. Method lookup on objects fails if the method doesn't exist. Operators are syntax sugar for methods. Code is able to check the type of an object with the type function. All true I'm sure. Now tell me how I can make Python catch problems up front if I change the stored value in a dictionary from a string to a complex type, and by the way; this particular type gets used publicly across several modules. ? You could start by talking about the unit tests, but really, I'll get the same side-effects in Java for free without those unit tests. I can save my unit tests for truly functional testing of expected outputs given certain inputs, etc. That kind of thing happens all the time in real life. Systems tend to get more complex over time. I want the toolchain to catch the issues with changes and force me to deal with them. That's not what Python is good at and it's why I generally wouldn't inflict it on a client for a large system.
The video has some pretty terrible music and you don't link to any code. What's the point of this?
You're weighting all 5 uniformly. Also, Readability can be argued either way. Having something like std::map&lt;std::string, std::pair&lt;double, double&gt;&gt; named_point_map; is a lot less readable than named_point_map = {} yes, yes, yes, you can argue that you know exactly what the first is and you need context for the second, but you can also argue with equal weight in the opposite direction for other situations.
pypy historically doesn't change python syntax. Its precompiler detects types that stay static throughout execution. I doubt they would change that for python3, as its key appeal is the ability to drop it in and use it, when all the libraries you need are supported.
I would prefer it if the type annotations went elsewhere rather than in line like f : int -&gt; int def f(x): return x or something. I really don't like them squished in there :/
&gt; You still have to look somewhere else to figure out the type in statically typed languages - the place where the variable is first defined. Well, it also depends on tooling. With OCaml and for example Emacs, I can just go over any expression, press C-c C-t and get back its type. Its value depends on dynamic behavior. But I can easily see, for example, what methods an object value might have. It doesn't depend on how or where from the function has been called or with which arguments. It doesn't require even writing down the actual types involved, thanks to type inference, though it is customary to document the types involved in interfaces. Because, you know, explicit is better than implicit ;-).
How about this for static typing: let named_point_map = Hashtbl.create 1 Later on, if you use strings as the key and integers as the value, the type is fixed. Or, if you choose to, you can annotate the type of the value right there.
The full mirrors (ala bandersnatch) are essentially noise since each one will end up mirroring all projects (although there is a multiplier effect for how many files a project has). The partial mirrors (ala devpi) will generally only mirror projects that their users are using, so it'll "shield" some number of requests and coalescence multiple downloads into one. I don't think I'd say they are useless though. You can't compare them as absolute numbers certainly and looking at exact numbers is likely to be wrong, but you can get some idea of the relative popularity.
neat strategy, thanks for the reply
didn't know you could "curdle", thanks!
Important to note, the reason it's not "guaranteed" to be safe when you run ``pip install &lt;foo&gt;`` has nothing to do with package signing. It's becasue there are no gatekeepers on PyPI while there are gatekeepers on the various Linux repositories. The threat model that PyPI/pip/easy_install operate under right now is basically "Assume that the repository and the author of every project you are installing are good faith actors and anyone else should not be able to influence things". Eventually we can/will get to the point where we don't need to trust the repository completely, but you will need to trust the operators of the repository (the difference being what happens if the servers running the repository get compromised). The author will generally always be assumed trusted.
&gt; I don't want to have to work on and support large code bases that use dynamic typing I think this worry is over-blown. By the time you've written that much code, all the type failures have long been shaken out. I maintain 32 KLOC and seldom have problems. (I know that's not a *large* code base -- I've worked inside an OS -- but it's the equivalent of 200 KLOC of C++.) I did have a type failure the other week. My record IDs are numbers held in unicode, and I have a list control that associates a record with each line by using its ID as the client data. The implementation only allows integer client data (wxListCtrl::SetItemData), so I coerce to/from integers. In upgrading to allow multiple selection, I missed one place to do this, and BANG. The point of this story is that *the very same mistake would have been made in C++*. Lastly, if you don't know what the type is, you don't need a full static analysis -- it's way quicker to just set a breakpoint, run in a debugger, and inspect the variable. 
Thanks for the clarification! 
The syntax I'd undebatable, it's been in Python for a long time already, all that is being added is the semantics
Does it actually increase performance or is it just for type checking?
:( I think my favourite would be a separate file that listed static checks
&gt;&gt;Types clutter the code, and they don't add functionality. +1 dynamic &gt; &gt;This isn't true. They add type enforcement. That saves a whole bunch of unit test cases you'd need to write up front. They also act as documentation. I frequently see Python functions that document the types of parameters in comments. So larger tests and more comments all in the name of "removing clutter".
Just thought I'd reply with another solution we worked out which you can put into your dockerfile with get-pip.py: relevant section of dockerfile looks like: ADD ./get-pip.py /wherever/get-pip.py RUN python /wherever/get-pip.py ADD ./requirements.txt /wherever/requirements.txt ADD wheelhouse/ /wherever/wheelhouse RUN pip install --no-index --find-links=/wherever/wheelhouse -r /wherever/requirements.txt Basically: 1) build your wheels from requirements.txt to local directory first 2) copy get-pip.py and wheelhouse to container, then install pip and your wheels with: pip install --no-index --find-links=/path/to/wheelhouse -r /path/to/requirements.txt no more build tools in the container, and it still lets each container specify its own set of dependencies if needed :) EDIT: formatting
Actually it's the opposite, julia keeps you DRY whilst it dynamically dispatches (is fast) on types. Compare this to writing cython where you need to repeat your code for each type (this is from a scientific computing background / pandas), I agree dynamic is best most of the time. It's also a win as you can dispatch on different options, e.g. a complicated class sometimes have several paths in the `__init__`, it leads to **much** cleaner code if you can dispatch on that (and keep them as separate functions). You can keep the option clean by recursing once (this also means no isinstance checking). I'm rambling so this is probably making little sense, maybe I'll write a blog post.
&gt; see it from within the docstring at the top of the function seeing isn't believing however! It's often clear what it *ought*/is intended to be, less clear what it actually is every time it's called in all different situations.
That is definitely part of it! But I don't think you can know what it is every time (i.e. sometimes it can come from different paths, right) ?
This is not a black and white argument (it's not just dynamic vs Java's idea of static typing), as commented there are many different ideas e.g. Haskell, Julia, Go.... (and indeed python 3.5). There's a logic error above, Java cannot prove that DT leads to abstraction hell, though it may be an example of ST leading there... Perhaps we *could* agree that all roads lead to hell? As an avid duck typer, I still think there is a place for "type safety"... recently I'm erring towards "traits" over multiple inheritance (or isinstance checking).
Interesting! Though I think that does something fundamentally different. - pycontracts: enforces what types are passes and returned - multipledispatch: you write several versions (for different argument types) of a function and when you call that function it calls the relevant function for the given types.
btw, how do you resolve different dependency sets if you have one shared container? or do all your python programs conform to the same set of dependencies?
Meh, this is an argument for documentation, not *for* static typing or *against* dynamic typing. I'm aware of two studies that have shown that statically typed languages provide benefits when it comes to using undocumented APIs. Okay. That's nice. You know what is nicer? Actual documentation. If you think it's okay to just put some annotations in there and call it a day, please say so in a highly visible place so I can avod using your project. As for the great ~~debate~~ religious war, this [talk](http://www.infoq.com/presentations/dynamic-static-typing/) is fun - but if you don't have the time, it boils down to: amount of TypeErrors for Python projects on Github is 2%. 
Exactly. 
&gt; Optional static typing sounds like the best of both worlds. Amen. Like I've said previously, I will have to re-think my position on using Python in large systems development if optional static typing becomes part of the language. OTOH that's basically equivalent to opting to use mypy directly, though it would be nice to have one way to do it. This isn't Perl after all. ;)
Ah.. the "splitting hairs defense". Nice try, but no cigar!
At this point, I believe it's just for type checking. But it's not hard to imagine that it will lead to a whole host of performance improvements in CPython itself over time.
&gt; By the time you've written that much code, all the type failures have long been shaken out. That's the point: you don't need to shake them out with static typing. &gt; Lastly, if you don't know what the type is, you don't need a full static analysis -- it's way quicker to just set a breakpoint, run in a debugger, and inspect the variable. That's ALSO the point - with static typing, you CAN know the type without trying to create debug situation. That is much much faster in my experience. Pointing to a variable and having my IDE tell me it's a Map that uses integers for the key with MyComplexType as the value is invaluable compared to staring at 'x={}' and wondering what the heck will get stuffed in that down the road. Or, worse yet, use 'X' down the road instead and get a 'X is not defined' error at run-time instead of compile time. Ugh. Yes, you can "shake" all that out. But if doesn't even compile in the first place, then there's no need.
Kivy has a GUI Designer that is WIP: https://github.com/kivy/kivy-designer
&gt; If your tests only include the happy path functional tests, then you will by definition be vulnerable to all the other situations that static typing would automatically exclude. Of course you can't verify all of the functional behaviour, but type errors are rarely more than surface deep. Unless you're *purposefully* changing types at runtime, doing so by accident is going to raise an error next time you use the object. Thus 100% coverage by lines tends to be sufficient. &gt;&gt; if things don't type check you can't get the right results anyway. &gt; So, we should just use static typing right? That would be an argument for static typing; not against. Static typing does guarantee valid types, yes, but people who prefer using dynamic languages have chosen to lose those guarantees and the idea that most of the time the errors will be raised regardless makes losing static checks more acceptable. 
Not bad, but I prefer signing and posting the upload form directly to S3. You can post the form with any relevant data and then handle the callback to track the file in your local store. This passes the io &amp; memory handing of large uploads on to S3 and off of your front-end instances.
Using the S3 REST API is what hakced is talking about: http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html Info about signing your headers to allow anyonymous requests (Anonymous because your user is anonymous to AWS): http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html
Ya I have seen that before but not sure what it is, just examples in different languages?
+1 - this is a fantastic trick which completely offloads the I/Or overhead to S3 directly - which means you don't have to worry that multiple large concurrent uploads could tie up all of your Python web processes. I like to set the ACL on the uploaded files to "private" (you do this by including ACL rules in a signed JSON blob in a hidden form field in the browser POST to S3). Then I have a celery task that checks the format of the uploaded file and copies it to a production S3 bucket, maybe also resizing and cropping it if it's an image. Just allowing file uploads to a readable S3 location is risky as someone might start using your S3 account to start distributing illegal files.
I am curious to see how they gonna handle self-reference cases like class Bar: def __init__(self, value): self.value = value def clone(self, source:Bar): #NameError: name 'Bar' is not defined self.value = source.value
It's all the clinet libraries and associated tooling for all languages produced by the Google Cloud Platform team.
Oooh OK! I'll check it out when I do my big research binge this weekend Edit: for python just in the form of a soccer prediction package? So I can see how they do it in that implementation and change it for what I need?
For what it's worth, my go-to installation is to grab [Anaconda](http://continuum.io/downloads). It includes all of the most popular and most used packages for scientific/data programming and is provided by a company who has a vested interest in *not* giving out malware/compromised software and therefore hurting their commercial enterprise. That's not a guarantee, but it's one more layer of accountability that might help ease your mind. It's also a great distribution of packages and tools.
I take your point that a good IDE will analyse your code so it can instantly tell you variable types. For me, I find the brevity and clarity of Python outweighs the typing issues. Obviously you don't. That's cool.
The amount of work you did to warn someone about not having the right libraries is ridiculous. Forcing people to use your library with virtualenv and setuptools is the only way we will rid ourselves of manual dependency resolution.
Awesome! I'm definitely going to learn something form this. I've been wanting to learn programming for years but never had a project to motivate me. I got the idea to build a physical chess computer that will run a chess engine on a raspberry pi. My plan is to use python to interact with the engine so this python project should help me immensely. Thanks!
Consider saving your information as a JSON or XML instead of your current custom format. Then you can use various JSON or XML libraries to load data from your file.
I'm not sure what that means, could you either explain or give me a link to some info?
No problem. I found it through the author's blogpost explaining the AI. Very informative. EDIT: [Here it is.](http://mbuffett.com/?p=66)
For years I looked up isp blocks for about 400 million ips every day, with pretty low latency in python. Caching, and keeping all data in a dictionary with an index based on the first 3 octets of the ip address made it pretty fast for python. 
Thanks again!
Thanks for the reply! I assumed ALSA was installed by default, but did searching and found a guide to install ALSA which included a bunch of packages I didn't have before. I think the ALSA core drivers were installed, but this gave me a bunch more tools to use. I ended up discovering via aplay -l There were no sound cards loaded. However sudo aplay -l Listed several. This eventually led me to find out a mistake I made a while back. In the sake of security, I deleted user 'pi' and added my own user. This effectively means I lost all privileges from pi which I didn't add back in - specifically I wasn't a part of the 'audio' group, so ALSA was unable to detect any sound cards. I think I can figure this out from here because I'm able to get the command 'play' to play audio files now and pyglet.media.init() isn't complaining about no open audio drivers anymore :D
Have you considered using a dictionary for each ttype? [http://stackoverflow.com/questions/1373164/how-do-i-do-variable-variables-in-python](http://stackoverflow.com/questions/1373164/how-do-i-do-variable-variables-in-python) The way you currently have it, it looks like the program would have to sort through that text file at every call. It will take more time initially to load, but will save time every time you call it so it should balance out fairly quickly. Essentially you could set up a function that creates a dictionary for each ttype by reading the text file: heart_dict={1:"task_A", 2: "task_B", 3:"task_C"} mind_dict={1:"task_D", 2: "task_E", 3:"task_F"} body_dict={1:"task_G", 2: "task_H", 3:"task_I"} Then put those dictionaries in another dictionary. taskchooser ={"heart" :heart_dict , "mind" : mind_dict , "body" : body_dict} Then you can call your task directly without a search with: taskchooser[ttype][level] 
The reason I have it in a text file is twofold: One, that there will eventually be hundreds of tasks and it seemed bulky to put it in a dictionary, and two, that I'm not sure I want to have to call it by type every time. But I will probably end up changing it somewhat, just not sure if a dictionary is the way to go. Thanks for the input, though, nesting dictionaries will definitely come in handy.
Nevermind, I googled it myself. Thanks for the recommendation, looks like xml will be really helpful
Here's a good start for you: http://www.tkdocs.com/
&gt; I think this worry is over-blown Not really, especially when you are operating in an "enterprise" space where discipline is hard to maintain. A lot of people just shrug this off and say it's a "developer problem" but I believe thinking from a practical point of view helps. I have worked on a 250K LOC Python "enterprise" code-base and it's a fucking nightmare.
This is, in my opinion, something a lot of programmers don't do: separate concerns or just clean code in general. One very good rule of thumb is that clean code equals small chunks of code (functions, methods, objects, ...) that do one thing. Clean code enables you to test your code (more effectively) without worrying about side effects. In the example above it would be *harder* to test this function when you have to test your *thank you* view at the same time. A trivial example but the same effect also applies to very large and complex code bases. 
How "large" is your large code-base? Also how old is it?
Recently, a thought occurred to me. If a package isn't very popular, I'll always browse the source from github to quickly check that there isn't obvious malware. But what if the malware was inserted just before doing `python setup.py sdist upload`? All this verification I've made is for nothing. I want to eventually develop a "PyPI auditor" script that clones the repo, perform a "python setup sdist" and then diff the contents of that sdist with the one from PyPI to make sure they're the same. Should be good enough for this attack vector.
Tkinter is a GUI *framework*. That means it provides abstractions for working with standard user interface elements (like buttons, text, checkboxes, etc.). You use Tkinter when you're looking to make a window that behaves like a standard OS window, dialog or what-have-you. PyGame is a wrapper around the Simple DirectMedia Library (SDL) which gives you a powerful set of 2D primitives as well as functions for timing, joystick input and audio. One way to think of it is that TkInter gives a blank piece of paper with a set of stamps while Pygame gives you a blank piece of paper and a paintbrush. Technically Pygame could create interfaces that look and work identical to TkInter, but you would have to paint by hand what is on each those stamps. Pygame is good for games (because there is no Tkinter "stamp" for "alien spaceship") and Tkinter is acceptable for user interfaces.
You could use the existing utilities to round those up to a /20. A /24 is the smallest public bgp announcement you're going to see in the wild, so no need to look up so many addresses.
Oh, I LIKE how "light" Python code can feel. It's delightful compared to trying to visually parse out generics and types on EVERY damn method in Java. That said, I'm always falling back in love with static typing every time I have to make changes of any import. It's just so much easier and every time I wind up thinking to myself "that would have REALLY sucked in Python or Javascript". In the end, optional static typing may just be what the doctor ordered. Now, if we could just deal with that stupid GIL, optional public/private indicators, etc. ;)
You can say the latter is more readable because you can read it faster, or you can say it's more readable if you can see more precisely how it will be used after you read it once. The latter is, to me, a LOT less readable because now I would need to go hunt down where it's being used to see what it really contains. And then I would add a comment along those lines to that line of code. And at that point, I have already expended more effort understanding that innocent looking line of code than I would have with static typing, I've added more information to the file to preserve that understanding, and I'm still left with a system that won't help me enforce that understanding going forward. Which is fine for small to medium systems....
Tk is a very old GUI library from the 90's that pre-dates the modern GUI libraries(GTK and Qt) that are found on Linux. In fact Tk even predates Windows 95. The late 90's saw GTK and Qt hit the scene and those libraries quickly became the standard for Linux desktops. Python has bindings for both. Game programming tends to bypass the above GUI libraries. GUI libraries focus on things like drop down text boxes, input fields(like the text box I'm writing this in) and showing images/videos, while game development needs complex video card level lighting and shading effects. Pygame is a python library for accessing these features in a platform neutral way. Modern desktop GUI libraries like Qt may still use advanced video card features on the back end, but Qt is still designed with producing a desktop application rather than a video game. Qt will have APIs that make it really easy to create a pretty GUI desktop app, while Pygame will give you features that make it easy to create a camera view onto a polygon that has 4 light sources shining on it. I don't at all recommend TkInter. It's old and outdated. I've worked with it and quickly found a lot of limitations with it. I'd really recommend Qt. I moved to that from Tk and found Qt to be very enjoyable to work with. There's 2 Python implementations of it: PyQt and PySide. 
Very cool. Thanks for the heads up. 
I largely agree that Tkinter is old and clunky, but I recently had to re-write the GUI for an application I wrote in Tkinter (from PySide) because the computer that it was going to end up running on did not, and would not, work with PySide. (I had no control of libraries. It had Python 2.7, but no Qt libraries.) So Tkinter has one really nice advantage over the alternatives. You can pretty much rely on it being there.
That's a great idea! I'll probably do that. For now I've decided to use an XML file instead of txt. This is actually a very small piece of a much larger project I'm hoping to create. I appreciate your input! In the end it will be an RPG style text based game, maybe even with graphics eventually, designed to aide in self help. But for now I'm just taking it bit by bit
It was first written in 2002 then refactored and added to continuously since then. Originally, it was written against python 2.1 on AIX. It's now on python 2.6 &amp; python 2.7. This provided the ETL solution for a very large data warehouse. Probably a total of 50,000 - 75,000 lines of code between the code and the tests. And this covers a number of tools as well as code that's specific to certain feeds, apis, etc. EDIT: refined loc estimate
I'd recommend using PyInstaller in those situations. I've bundled PyQt apps up in PyInstaller and they've worked fine in non-python environments. A reason why I recommend this is that once you get into a PyInstaller pattern it opens up the libs you can work with. For one of my clients I write Python Nagios apps for an older CentOS python 2.6 environment and I can dev in python 2.7, use any lib, and I just compile on a Virtualbox environment that has the same C libs as his production, but with Python 2.7 and my 3rd party libs. Then I just hand off that binary to the client. PyInstaller has been a real game changer for me with Python. 
Did PySide get picked up again? That's really cool. PyQt is done by a commercial company so I doubt they'll be dropped anytime soon. I think they're on Qt5 while it looks like PySide is still on Qt4. The downside is they're GPL vs LGPL, because they license for commercial apps. Either is fine to work with though IMO. I learned on PyQt while following a PySide tutorial. There's only a few differences between the two.
I use it for smallish one off utilities that I want UI for. 
Thanks! Mind if I hit you up on reddit if I have a related question, since you're working on something similar?
1. Divide requirements into: requirements.txt and dev-requirements.txt. 2. Try to use relative imports (`ckapi/__init__.py`) 3. Create modular tests! You've got just 1 file in `ckapi/` and it's a mix of functional/integration and unit. Try mocking requests or using something like vcrpy or Betamax. 4. I'll send you my Bitcoin wallet and you can pay for the rest... (jk, I don't have that much time today, sorry).
Great example!
This is brilliant. Well done JetBrains :-) 
AH. So I actually have been reading about recursion because the person you might call my mentor suggested it might be useful in this application. I've been looking [this](http://interactivepython.org/courselib/static/pythonds/Recursion/recursionsimple.html) over, and I understand the concept I think, but how it would apply in this situation I'm not exactly sure (or why it's the best way) 
Haha, yeah, well. C++ is the main static-typed language. It would look even worse in Java (the other main static-typed language). In reality at work, I choose the language that has the best libraries available for what I need do, and I'm glad I have the freedom to choose any language I want. I would easily give up readability for the right libraries.
Thank you, that makes a *lot* more sense to me with regards to using a recursive function to iterate through the lines, but I'm still not sure how to check for the indentation. I've tried using regex to match the exact number of spaces, but because of the nature of the document I'm working with it's been difficult. Is there a way to check if the whitespace in one line is greater than the whitespace in the next line? Again, I really appreciate it.
That makes sense. I just was afraid I missed the obvious solution, given my relative inexperience. I'm going to give that a shot!
 from Board import Board from Pawn import Pawn from Rook import Rook from King import King from Queen import Queen from Bishop import Bishop from Knight import Knight from Coordinate import Coordinate as C from Move import Move from Piece import Piece from AI import AI from InputParser import InputParser Is it me or is this just incredibly silly? Like, I get the point of not making an abomination of a mess but this just seems like arbitrary separation for no reason. Once I write a class or method that is complete I just fold it in my IDE and it's not a distraction.
Yep. The more I pick through the code, the more I realize it's definitely not the best. I'll probably use this as a base and start by cleaning up the code a bit. There are plenty of things that are simply unnecessary (e.g. those imports).
Try it out. It's very good about finding references in your dependencies, and pops out a dropdown list when it's unsure.
I love PyCharm. I love it even more now with this version.
Thank you for your explanation! I will not post threads like this in the future.
Eh, I appreciate it -from skimming it you can see that there is only one hard dependency and everything else is optional. Maybe I'm unusual, but I like to see others make a note of installation instead of just a requirements.txt file which may/not list everything. 
Awesome idea, having a go now!
Consider the following CSV input file:: type, lvl, task test",0,"test" mind,1,"Create a to do list for the week" mind,2,"Catch up on emails" You could store and work with this type of data with tablib, dataset, Blaze, pandas, pyld: ## tablib CSV, JSON, YAML, XLS Python https://tablib.readthedocs.org/en/latest/ https://tablib.readthedocs.org/en/latest/tutorial/ ## dataset CSV, JSON, SQLAlchemy Python http://dataset.readthedocs.org/en/latest/ http://dataset.readthedocs.org/en/latest/quickstart.html#running-custom-sql-queries ## blaze CSV, JSON, HDF, PyTables, Pandas, SQLAlchemy, MongoDB, Spark Python + NumPy (C, FORTRAN, ATLAS) http://blaze.pydata.org/docs/latest/overview.html http://blaze.pydata.org/docs/latest/quickstart.html ## pandas CSV, Excel, HDF, PyTables, SQL, SQLAlchemy, JSON, msgpack, HTML, BigQuery, stata, clipboard Python + Cython + NumPy (C, FORTRAN, ATLAS) http://pandas.pydata.org/pandas-docs/stable/ http://pandas.pydata.org/pandas-docs/stable/io.html http://pandas.pydata.org/pandas-docs/dev/ecosystem.html ## pyld JSON-LD Python http://json-ld.org/#developers https://github.com/digitalbazaar/pyld 
You could also subclass ``collections.namedtuple`` and add a ``._repr_json_`` method: import collections, json _Item = collections.namedtuple('Item', 'type lvl task') class Item(_Item): def _repr_json_(self): return json.dumps(self._asdict()) item = Item('mind',1,'Create a todo list for the week') assert item.lvl == 1 print(item) print(item.__str__()) print(item._repr_json_()) _ = {'type': 'mind', 'lvl': 2, 'task': 'Catch up on emails'} item2 = Item(**_) assert item2.lvl == '2 
Thanks. Been looking for an alternative to codecademy (or possibly even in tandem) for myself and son. 
This is great thank you so much!
I'm impressed, but what does this mean for the people who have already purchased a student license? Does the paid student license offer more features over the paid version?
&gt; On Windows, Python is installed together with PyCharm, with no additional installation required. Linux and Mac OS installers automatically detect a system interpreter. All you need to start learning is just to install PyCharm. I think that's the biggest deal here. The jump to *nix for people who've used Windows all of their life isn't a small one, so being able to have a one-button install before you're able to start coding is really meaningful.
Real programmers program in Machine code, but in the real world using tools like Django will free up your time to concentrate on real problems.
Haha i agree. I just want to find the right layer of programing for myself. I just don't want the game maker feeling where to much of the fun stuff is done for you.
The mindset of "real" vs. "not real" developers is immature and unproductive altogether. It comes from a place of insecurity regardless of which side you believe you fall on. 
Well i can definitely agree that i am an immature programer, hence my question 
Real programmers program with butterflies. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Taskwarrior**](https://en.wikipedia.org/wiki/Taskwarrior): [](#sfw) --- &gt; &gt;__Taskwarrior__ is an open-source, cross platform [time](https://en.wikipedia.org/wiki/Time_management) and [task management](https://en.wikipedia.org/wiki/Task_management) tool. It has a [command-line interface](https://en.wikipedia.org/wiki/Command-line_interface) rather than a [graphical user interface](https://en.wikipedia.org/wiki/Graphical_user_interface). &gt;Taskwarrior uses concepts and techniques described in *[Getting Things Done](https://en.wikipedia.org/wiki/Getting_Things_Done)* by [David Allen](https://en.wikipedia.org/wiki/David_Allen_(author\)), but is paradigm-agnostic in that it does not require users to adhere to any given life-management philosophy. [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*] &gt;According to its author, Taskwarrior was created "to address layout and feature issues" in the Todo.txt applications popularized by [Gina Trapani](https://en.wikipedia.org/wiki/Gina_Trapani). &gt;==== &gt;[**Image**](https://i.imgur.com/Iqg6mps.png) [^(i)](https://commons.wikimedia.org/wiki/File:Taskwarrior_screenshot.png) --- ^Interesting: [^Things ^\(application)](https://en.wikipedia.org/wiki/Things_\(application\)) ^| [^Getting ^Things ^Done](https://en.wikipedia.org/wiki/Getting_Things_Done) ^| [^OmniFocus](https://en.wikipedia.org/wiki/OmniFocus) ^| [^Organize:Pro](https://en.wikipedia.org/wiki/Organize:Pro) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+clowy0j) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+clowy0j)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Are you serious? Is this a serious question? Let's rephrase it: "will my project turn out better if I write everything from scratch even though I'm not yet an expert in the domain?" I think you already know the answer to that.
PyCharm has always been a pleasure to use. Should be another great edition.
I don't think I've ever done "hardcore mathematics/science" in python but I find the broadcasting rules and built-in methods in ndarray extremely useful.
Take a look at pygame, once installed it has a few examples you can run and read locally.
I am no security expert, but first off, when storing passwords in a database, you don't actually store the password. You store a [salted hash](https://en.wikipedia.org/wiki/Salt_%28cryptography%29) of the password. This means you take the user's entered password, add some random info to it, then do a 1 way hash on it. This prevents any unauthorized user from retrieving plain text passwords, and also prevents the attacker from using precomputed password hash tables. As far as a user's personal information, something like SSN or bank account numbers or credit card numbers need to be handled specially. I believe the norm is to split the number into two parts and store each in separate databases. For example, your credit card number shows as xxxx-xxxx-xxxx-1234 on your account. The first 12 numbers are stored in a separate database, and only the last 4 are stored in the same database as your user account information. You should use GUIDs in your card database as a record ID, you just reference that in your account database and pull the information together before sending it to your card processing system. I don't do secure stuff for a living. I've worked with guys that do secure carts and merchant stuff and I've picked up information along the way from them. If I'm wrong, then I either misunderstood or am not recalling correctly.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Salt (cryptography)**](https://en.wikipedia.org/wiki/Salt%20%28cryptography%29): [](#sfw) --- &gt; &gt;In [cryptography](https://en.wikipedia.org/wiki/Cryptography), a __salt__ is [random](https://en.wikipedia.org/wiki/Random_Number_Generator) data that is used as an additional input to a [one-way function](https://en.wikipedia.org/wiki/One-way_function) that [hashes](https://en.wikipedia.org/wiki/Hash_function) a [password](https://en.wikipedia.org/wiki/Password) or [passphrase](https://en.wikipedia.org/wiki/Passphrase). The primary function of salts is to defend against [dictionary attacks](https://en.wikipedia.org/wiki/Dictionary_attacks) versus a list of password hashes and against pre-computed [rainbow table](https://en.wikipedia.org/wiki/Rainbow_table) attacks. &gt;A new salt is randomly generated for each password. In a typical setting, the salt and the password are [concatenated](https://en.wikipedia.org/wiki/Concatenation) and processed with a [cryptographic hash function](https://en.wikipedia.org/wiki/Cryptographic_hash_function), and the resulting output (but not the original password) is stored with the salt in a database. Hashing allows for later authentication while defending against compromise of the [plaintext](https://en.wikipedia.org/wiki/Plaintext) password in the event that the database is somehow compromised. &gt;Cryptographic salts are broadly used in many modern computer systems, from [Unix](https://en.wikipedia.org/wiki/Unix) system credentials to [Internet security](https://en.wikipedia.org/wiki/Internet_security). &gt; --- ^Interesting: [^Salted ^Challenge ^Response ^Authentication ^Mechanism](https://en.wikipedia.org/wiki/Salted_Challenge_Response_Authentication_Mechanism) ^| [^Cryptographic ^nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) ^| [^Initialization ^vector](https://en.wikipedia.org/wiki/Initialization_vector) ^| [^Padding ^\(cryptography)](https://en.wikipedia.org/wiki/Padding_\(cryptography\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cloyjao) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cloyjao)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
my opinion: Don't reinvent the wheel. Learn django to create web programs. You always have the option of figuring out how the internals of django work and even improving it. My only other advice is if your goal is to learn don't ever think of yourself as a "django" programmer (even if it becomes your full time job). There are a lot of languages, frameworks and technologies that are out there that are worth knowing! Being able to combine these and creating new functionality can be very valuable.
Hello Reddit Pythonistas! This is a demo instance of Centrifuge on Heroku without any restrictions - I hope for your discretion. Sometimes I will reset it. Once again - the password is `demo`. Hope you like it! Short Centrifuge description and links here - http://centrifugal.github.io/
well you can find out at google. or if you want just remote jobs this website can be helpful [jobsRemotely!](https://www.jobsremotely.com) 
This appears to be more geared towards REST APIs.
You could cut down the import spam without much effort by simply placing all the piece classes into a single file. You could then have a single import line similar to this: from Pieces import Piece, King, Queen, Bishop, Knight, Rook, Pawn
Only by really bad metrics.
You're right, and If I was immortal, I wouldn't wear one!
i hope that the advantages of having a true free/libre/open-source license and the ability to work offline with a real python IDE instead of a html5 form will attract enough course creators. 
Re hashing: Due to the speed of computers today you should look into using a a key derivation function (KDF), they are similar to a hash functions except they take longer to compute. This helps protect against brute force attacks on the hash result. This is important due to the computing power available for hashing (in particular bitcoin), bitcoin miners could easily be repurposed to test hashes of passwords. I'm on my phone so cant post source atm. But basically the three main KDFs are PBKDF2 bcrypt and scrypt. Where scyrpt &gt; bcrypt &gt; PBLDF2
Great. Not only PyCharm is one of the better IDE for Python, but now it can be used as an educational tool. What's not to love ? Also, you should cross-post it to : /r/learnpython and /r/learnprogramming
&gt; I usually like to do things completely on my own, it feels cheating to use library's. Domain-driven design enthusiasts often tend to repeat two words: Core domain. The point is that programming is not about coding for code's sake, rather programming is a means to an end. If a customer asks you to build a web shop (in a limited amount of time with a limited budget), he is paying you to create a web site for selling his products. By building all of this from scratch, you aren't really doing what he's paying you for (putting his goods on the web for sale) but rather something tangentially related that *might* result in a web shop.
because that is not true at all. and I see from the downvotes that people really has no experience in what there is around. that answer from /u/Breaking-Away assumes nginx+fpm is somewhat a replacement because "of modernity", and even if that works better sometimes, it's an answer that has no sense, it assumes a blind choice on what platform to choose, "nowdays" really has no sense, please never assume blindly anything about your stack. I give you 2 examples, 1) I could use happily mod_php, with apache process management that understand well the number of requests and timeouts, without passing trough another hop of fcgi or similar, maybe because that server only gives out php requests and not static files and php + webserver are better coupled, less processes around, minor footprint 2) Maybe nowdays people can use hhvm, you are so old still using fpm...(please consider the sarcasm) 3) bonus point, maybe I'm using some apache feature that nginx doesn't have
Yes! I work for a major international investment bank. Many of the people we hire are people who started doing python hobby projects. 
Just to clarify - the fact that you diy'd an autonomous lunar rover from balsa wood and a raspberry pi has little relevance to the work we actually do - on the other hand the fact that you did it and solved all those problems means that you have the potential to solve the kinds of problems we need to solve - and that you also have the passion that it requires to keep learning about technology and ultimately become somebody who can be a leader
From an application perspective, as other people said, don't try to reinvent the wheel; use libraries and proven tech like bcrypt/scrypt, don't store credit card numbers or medical/HIPAA stuff, make sure you comply with local legislation (if you are in Europe, chances are that your country will have at least one law that deals with storing personal data, in compliance with the [European Data Protection Directive](https://en.wikipedia.org/wiki/Data_Protection_Directive)). Keep your crypto keys safe, i.e. not in Dropbox and not in files that can be read by other people/accounts. If you are building a webapp, use HTTPS everywhere, not just for authentication, and proactively check in code that the connection is encrypted (i.e. that protocol == 'https'). From a system perspective, one thing people tend to forget is to encrypt your whole database. With modern hardware, it's not much of a performance hit and can be handled transparently by most rdbms (if your db or library doesn't support it, it's a good hint that it's just not good enough for usage in security-sensitive applications).
Best advice: Don't. If this is going to involve any amount of money, personal information, secure data, or anything else that people don't want known, don't do it, at least not while you're still "new to security". This is one area where I'd *really* recommend seeking some sort of proper expert advice, because this stuff is *hard*. Take passwords. Technically, you should salt them, hash them (slowly), and store the result so that no-one can ever see the password. But what if there's some sort of insecurity before the password gets to you? You can use SSL to prevent tampering "on the wire", which helps somewhat. What about keyloggers? Is protecting against those your responsibility or someone else's? After all, banks have protections against those by only asking you to type in certain letters of your password - but that means that they're now storing your password without hashing it, so if someone managed to get access to their databases...? Data security is *hard*. That said, if your system doesn't need to be quite as secure as a bank, there are definitely certain general rules you can follow: Hash everything with a slow hash function (such as BCrypt), making sure you've got a salt there as well. (Slow is important - there's actually not all that many different combinations of password that can exist, so the longer you can make each attempt take, the better.) You can add further methods of preventing brute-force attacks by instituting time-outs if someone attempts to log into the same account too many times with the wrong password. You should never know your user's passwords, so the best way to allow them to reset passwords if they forget it is to provide a random code - although make sure those codes timeout securely if they're too old, and also as soon as they're used. There's a lot of advice out there, and a fair amount of it is quite good. The main thing I'd recommend doing is reading a lot about the topic before you begin to mess around with it. And always assume that at any moment any of your systems could be down.
In addition to the comments made by other people, I'd add: * you do need to understand HTTP at some level if you are serious about web development, and probably things like SQL. Django will insulate you from a lot of the details, which is nice, but can get you into trouble and make life harder for you if you have no idea what is actually going on. * for your own understanding, feel free to write something lower level than Django. However, for serious work, if you are not using a framework you will be stumbling blind into dozens of security issues. That is really pointless. (Although, for lower level understanding, it happens that Python and various similar systems don't really help you, because "something lower level" usually starts with CGI or WSGI, and both of those really mangle HTTP requests, adding this whole unnecessary layer of transformation - HTTP requests are pretty simple really).
&gt; store the absolute minimum personal info that you can, and certainly nothing sensitive. This can't be stressed enough. While most small developers tend to think that securing the system and financial data is the top priority, personal data is actually the one that can get you in hot water the fastest (including criminal liability).
Just like any other language, Python made it big because it was relatively easy to use for CRUD web applications, which is a major use of it to this day. My company uses flask to maintain a simple web page with some user facing functionality. Python has become a challenger/successor (depending on who you ask) to Matlab for scientific computing projects. My company's main aim is scientific modeling and simulation and Python is generally the standard language we utilize in meeting our clients needs. I have heard it's gaining popularity in the sysadmin crowd. My company's sysadmins use fabric and cuisine to automate tasks and processes across our various servers.
First, as others have said, try to avoid this at all. These days you can implement login systems that just use 3rd parties (e.g. Google/Facebook login, although sometimes people might not like them and you need to provide an alternative). Second, do not roll your own solution. Don't even do "import bcrpyt" etc. - there are still too many ways to go wrong. Find a solution that does that for you. For web dev, frameworks like Django and others will provide a full solution.
Yeah you wall-of-texted that pretty hard.
So if you were making an app which used an atypical interface, like say a mind map making software, which is it better to use? 
We make electronic voting solutions, everything in Python :D
You can pip install gunicorn. The apt package will always be outdated due to their release cycle. I pip install uwsgi for the same reason
Use your personal projects to gain knowledge about new languages and frameworks, and to demonstrate your ability to efficiently solve complex problems. This is what I look for when hiring new engineers. Most of my work deals with web development and Django. Automation and robotics don't apply, but the skills you learned do.
Potentially dumb question- how do you store the salt?
Just put it next to thje hash in the database. The salt doesn't have to be secret, it just exists to make the hashed data longer (to make precomputed hashtables unviable) EDIT: because it might not be 100% clear: you want a different salt for each password, not a global one for all.
Absolutely! I run an app development company based in Toronto and we use Python for the vast majority of the work we professionally develop for clients. If some extra runtime speed is needed, we use C or Boost::Python which is amazing. Python is the most versatile, productive, and clean language that I've ever used - and I've investigated, tested, and used every major language and platform. Every one. I've settled on Python, Go, and C/C++. The kind of work we do includes Web apps using flask, backend systems involving postgresql, etc.
Start with https://cryptography.io/en/latest/ ...and don't touch the hazmat module unless you know what you are doing. 
I haven't done much with security, but the guys at work that do use PyCrypto.
This is awesome. Since the U2F documentation seems to be somewhat opaque, I will use this as a template to see how these keys work. U2F should be an accessible security standard if they can get keys out that work easily with mobile. I hope it catches on since Gmail is adopting it.
Depends on how you understand programming. Controlling the machine or solving a problem. You may see the programming as controlling the machine but it requires you to learn and focus lots of details. Also this **might** make the person end up loosing focus on the purpose. I see the programming as solving a problem, which is the purpose of I'm using it. Thus it's better for me to use high level tools, which would help me focus on the problem. So the answer is: No, it does not.
I'm a web developer / server admin, I use Python for writing web apps and to integrate 3rd party systems with automated data imports/exports.
I see it as more like using the speech to text function on my phone before understanding the symbols it spits out and call s words
This looks pretty cool. As a teacher, is there a way for me to translate the lessons to my native language? I teach programming to very bright 9 year old. She progresses with English as well, but it's still a hindrance.
I use it almost daily in my job as a structural engineer. Not for any number crunching but it's very useful for automating tedious things like extracting a handful of numbers from a 4gb result file or linking together analysis programs so a series of 6 hour analyses can run unattended over the weekend.
Am I the only one that is disturbed by the editor he's using?
Why are you disturbed?
don't be intimidated. hash and salt passwords as others have said, protect against SQL injection and use HTTPS. if you're thing becomes relevant enough that someone would want to try to hack it, then you should have the capital to hire somebody who knows how to lock it down
The best recommendation I can give is to not roll your own stuff, and make use of high quality open source stuff where the code has been reviewed by experts. 
Just to add on the excellent answers on this thread : you DON'T WANT a fast hash function.that might be counter intuitive, but right. Don't make it easier for attackers...
I work for a company that provides outsourced video streaming infrastructure. All our server backend code is Python.
&gt; there's actually not all that many different combinations of password that can exist This all depends on what restrictions you want to place on passwords. Counterintuitively, requiring a minimum length, or certain types of characters actually *reduces* the effectiveness of the password, and the time to bruteforce a hash check. You've basically defined some rules to go by. If your passwords can be up to (with no minimum) 999 characters long, and can contain (but are not required to contain) letters, capital letters, numbers and symbols, that is a lot of potential combinations. They would need a pretty large botnet/cluster and a **lot** of time. This all, of course, relies on the user making a long, secure passphrase, but that is a user problem, not a system problem.
Here is a good article on salted password hashing: https://crackstation.net/hashing-security.htm Unfortunately the sample code is in everything but Python. However, the article takes you from beginner steps to proper encryption.
It isn't clear if you mean on the server side to authenticate/authorize requests, or on the client side in order to create requests. If it is the client side then use the [keyring module](https://pypi.python.org/pypi/keyring) which accesses the native platform's keyring and hence does the right thing. If it is the server side, then it is far more complicated with the general gist being as others said: rely on someone else (eg google) to manage the users. It is extremely unlikely you will get all the technical, legal and user issues correct.
as a learning exercise, its sometimes worth doing your own attempt at solving an already solved problem, so you can gain a deeper understanding of the real challenges involved. I don't think its worth doing that the first time though. The first time you do something you won't be in a position to be able to benefit from an exercise like that because you won't know where to even begin. your first time through use existing tools. probably also your second, third, fourth, fifth,..., etc. time through. Once you're sufficiently experienced and ready to move to a deeper level than you can try implementing your own framework to see what its like. It won't be worth it, even just as a learning exercise, before then. 
I work for a cloud hosting provider. EVERYTHING we do is in Python. Check out Openstack.
Openstack
I'd argue it's also partially a system problem, or at least a problem the system should check again. Sure, if the user can't be bothered to put in a difficult-to-guess password, that's probably their fault, but most people are going to do that anyway, and then they'll blame me, so I've lost either way. Again, it all comes back to the principle of assuming that everything that possibly can go wrong will go wrong, be it your fault or someone else's.
I don't know, I just wouldn't work in it. And it disturbs me when people don't use the 'perfect' software for the job. Meh.
It is mentioned that, on Mac OS and Linux, PyCharm uses the existing Python version. If Python 2.x is installed as the default (provided by the OS) version and a user installs Python 3.x from python.org, is it easy to have PyCharm use the 3.x version? Somewhat related: does it come with Python 3.x on Windows? (I haven't had the time to try it out on a Windows computer yet.)
&gt; I wouldn't be surprised if someone does provide a data dump of all WHOIS records for the IPv4 space somewhere online. For 2014, this seems like a lot of effort just to see the state of IPv4 assignments. You can from all RIRs except RIPE. But are your results posted anywhere...?
Well don't know what exactly what artplusplus does, but I carry the same role as him as a tech artist in a small studio. The job is mostly about building tools for the artists and finding slowdowns in the art workflow and creating solutions to fix those slow downs. Python is the language of choice for tech art since most applications in the artists workflow use python I personally spend a lot of time using the perforce api and Mayas pymel. A interesting project I recently worked on was a logging system for all our in-house tools, that would save in a SQL database and also carry information about who had the error or warning. We used this information to create a better seating arrangement by placing artists having the most problems with the tools around more technical artists or senior artists.
Tkinter has fairly poor support for bitmap manipulations so if you're going to doing a lot of 2D drawing/rendering, Pygame is going to work much better for you. That said, it is supposedly possible to mix the two though I have never tried it myself. See this Stack Overflow answer for more info: http://stackoverflow.com/questions/8584272/using-pygame-features-in-tkinter
Which is why systems that warn the user that their password is not very secure are better than systems that require the password have x, y and z.
If you decide to store user credentials yourself rather than using something like login with Google/Twitter/Facebook, then the best thing you can do is **stay current**. Best practices in security change quickly, even relative to the pace of Web technologies. Using last year's advice could leave you wide open. Also make sure you know about all the latest security issues in the news. Imagine if you were running a site that used OpenSSL and you missed the memo on Heartbleed for even a couple days. Bad times. In other words, if you decide to do your own security-related tasks, understand that it is a big time commitment.
You need an event loop, always. But what you can do is wrap your async method in a asyncio.Task(), which puts it on the event loop to be completed at some point, but will continue on with your blocking code.
At one job I worked, for the main developer of the control systems for touch screens in mobile devices, the entire test system was written in python with some c++ for overhead. All the scripts and processing, the core of the system, was python. We were actively encouraged to learn it and write stuff in it during downtime. Its how I learned about motor control and drivers at a code level.
Reading on the website, on Windows, it gives the choice between 2.7 and 3.4 I have 3.4 installed; it gave me the option to install 2.7 (but the option for 3.4 was greyed out and unavailable). I started the introduction to Python demo and it refused my name (which has non-ascii characters in it), which is a bit disappointing.
Asyncio supports *co-operative* multitasking, so one part of the program has to explicitly give up control (e.g. using `yield from`) to allow another component a chance to run. Threads use *preemptive* multitasking, which means the system can stop a thread without its agreement, and continue working on a different thread. It's possible to implement a thread like API at a higher level - see [Green Threads](http://en.wikipedia.org/wiki/Green_threads). Asyncio didn't go down that route, because threading APIs get tricky for complex systems: things can be changed unexpectedly by another thread at any point in your code, so it's easy to end up with subtle bugs that only occur occasionally, or that pop up when run on faster/slower machines. With asyncio's model, you can see the places where other code could get control, and trust that other code is run in one go. If there is some blocking call that doesn't know about asyncio, you can run it in a separate thread using [executors](https://docs.python.org/3/library/asyncio-eventloop.html#executor).
"Perfect" tends to be an ambiguous word.
Mark I'm really liking the current posts you're putting out. It's all right up my alley as we're using django/angular. I've already bookmarked 2 of your blog posts. Thanks and keep it up, this is good stuff!
Whois record dumps from RIRs still miss a lot. You need to follow RWhois down to the providers to see how the RIR allocations are subdivided.
For big projects written in python - Openstack, the opensource cloud software, is almost entirely in Python. This means that a lot of cloud companies that build on or around Openstack hire a lot of python devs. 
I work for a pretty big ecommerce site. All I do is write Python. It's not just a toy.
This is fantastic. Don't apologize for your hard work. How long do you think it would take to actually scrape the whole thing?
Thank you very much. 65K of requests / 8 threads = 8,125 requests per thread. Average 2.5s wait between requests and ~2s for each request inself = 10.15 hours. I hit my time box on the article but I had ambitions to proxy the requests and run 16 threads with 0.8 - 1.4s pauses in between requests. But beyond that there are probably other speeds up that could be done, like skipping known non-allocated spaces, etc...
What do you mean perfect? What do you consider to be the "perfect" software to develop in? No matter what you say, you will have a lot of people who disagree with you. That's the problem with dogmatism. I prefer IDLE because, for me, I tend to get lazy if I have an editor that does things for me. I have found a simple editor to be the best one to fit my style. IDLE is not best for everyone, and I always encourage people to try many editors to find the one that suits them best. 
Thanks all! This helped a lot! I'm certainly wanting to transition out of web development and you guys have pointed me in the right direction. Especially with the developing tools for Maya; I thought a lot of that stuff was done by hobbyists and there wasn't a professional market in it. I was wrong. Many thanks!
 KEYWORDS = "--" or "-" KEYWORDS will always be the string "--" Did you mean KEYWORDS = ["--", "-"]?
Not to mention that the Holy Trinity of Scipy + Numpy + Matplotlib can be used to basically replace Matlab for most use cases. We've had success with using Spyder for people who are uncomfortable with bare text editors/commandline and are transitioning to Python from Matlab's GUI. Source: I work in a computational neuroscience lab that is also migrating to Python.
Now I'm running into another issue saying "TypeError: coercing to Unicode: need string or buffer, list found" that's happening from this line before_keyword, keyword, after_keyword = submission.title.partition(KEYWORDS) 
Yes! and for plots that require high-speed updates (like oscilloscope-type applications), we use http://www.pyqtgraph.org/ If you haven't checked it out you should.
I'm an aerospace engineer and I've been coding in Python for work for ~8 years. I even run an open source project to interface with an FEA code (Nastran) that uses python. It's got 100k lines of code with 30k comment lines. That's ~1/3 of what it used to be with way more functionality.
Has anyone ever actually been caught out by Python's dynamic typing, then? I mean, yeah, you can do `x = 3` then `x = HomosexualObject()`, but why would you? In pretty much every case, I do something like count_testicles = 3 person_father_figure = HomosexualObject() Which even helps for code completion/intellisense; I type `button_` and hit Ctrl+Space, and I'm shown that I called it `button_login`, not `button_log_in`.
I've tried to look into it, and found recommendations to use pbldf2-sha256. Somewhere I read that you should use 64000 iterations, doubling yearly since 2012. And if I was doing anything other than fiddling around, I would check with someone who can give actual real world advice rather than internet advice.
Easiest way is to download a windows installer for one of the many scientific Python distributions. My personal choice is [Continuum's Anaconda](https://store.continuum.io/cshop/anaconda/), but there a few more outlined in this [SciPy wiki page](http://www.scipy.org/install.html#scientific-python-distributions).
Here is a function that you can drop into your code, assuming you have changed line 8 to KEYWORDS = [" -- ", " - "] This will return the artist name if it finds one according to your spec. Otherwise, it returns None. def get_artist(title): for key in KEYWORDS: if key in title: before, after = title.split(key, maxsplit=1) return before Using this function, get_artist('Artist Name -- Song Name [genre] other info') returns 'Artist Name'
&gt; When you see that 24.0.0.0 - 24.15.255.255 it the net range then you can make your next query for 24.16.0.0 instead of 24.0.0.1 This will get you whois for all Direct Allocations but you'll be missing out on any sub-allocations.
IMO, Flask is the easiest and the most flexible. Novice and pros can comfortably develop easily with Flask. I like the simplicity of Flask, and wanted to add a little bit extra on it. So I created [Flask-MarcoPolo](https://github.com/mardix/flask-marcopolo), a Flask extension that adds structure to both your views and templates, by mapping them to each other to provide a rapid application development framework. The extension also comes with Flask-Classy, Flask-Assets, Flask-Mail, JQuery 2.x, Bootstrap 3.x, Font-Awesome, Bootswatch templates. The extension also provides pre-made templates for error pages and macros.
Oops
Excellent! You may also want to see what you can do about getting the RIRs' databases. IANA has links to each regional registry, each of which has their own rules. But many of them are research project friendly.
I learned python in a windows environment. Setup was easy. Install python, install text editor of choice. Done.
I would suggest installing pip somehow on Windows. Eventually you'll want to install other packages as well. Then you should be able to just type pip install matplotlib *DISCLAIMER* I haven't done any Python on development on Windows, so ideally so take my advice with a grain of salt.
virtual env++ virtualenvwrapper is also a swell addition (http://virtualenvwrapper.readthedocs.org/en/latest/) It will keep track of your virtual envs and makes it easy to jump into one: cshoop@debian:~$ mkvirtualenv yay_python (yay_python)cshoop@debian:~$ cdvirtualenv (yay_python)cshoop@debian:~/.virtualenvs/yay_python$ deactivate cshoop@debian:~/.virtualenvs/yay_python$ workon yay_python cshoop@debian:~/.virtualenvs/yay_python$ workon yay_python (yay_python)cshoop@debian:~/.virtualenvs/yay_python$ 
I work for a pharmaceutical research company and we use Python for most things that require code. WAMPython seems like a pretty common alternative for companies just jumping into the game now who have no experience/bias towards LAMP stacks or whose Existing IT infrastructure is windows based.
If you have a properly configured compiler then fine, otherwise, it won't work.
[Stack Overflow: Is Python interpreted or compiled or both?](http://stackoverflow.com/questions/6889747/is-python-interpreted-or-compiled-or-both)
thanks! ran into this error: TypeError: split() takes no keyword arguments but i resolved it by taking out maxsplit=1
Buy parallels desktop and a windows 7 license. You should be able to get both free or cheap through your school store or CS program. See if your school has Microsoft dreamspark access to get Microsoft stuff for free. This will let you run windows, but also other OSs such as linux from the mac laptop. In development it can be very handy to test easily in different OSs, and to not have to worry about screwing up the computer since you can just start up a new VM to start from scratch. You can also use bootcamp, but virtual machines are easier. All of that said, there shouldn't be too many differences between python on a mac or windows, especially in a first CS class. What kind of problems are you experiencing?
Just some loose points: Whereever possible, don't roll your own security solution or algorhythms. Have security audits at least with coworkers, because even experienced developers can overlook something. You should never have something like a database with an open port to the public internet or even LAN. If you think you aren't vulnerable to injection attacks because you use NoSQL, [you're a moron.](https://www.youtube.com/watch?v=lcO1BTNh8r8)
Yea, I'm still pretty new to python so there could be differences doing more advanced stuff, but all the first year CS stuff should be pretty much identical. I'm thinking OP must be having trouble with the command line differences or if they are using a different IDE from the class..
Hmmm... take that as your first concrete step in cross-platform development :-) More seriously, if you use the same version of Python on Windows and OS X, you shouldn't have differences in syntax. You may encounter differences in handling filesystem paths, newlines in files, etc. But some libraries, like pathlib or pyfilesystem, may help you mitigate platform differences. If you use Python 2.x and Python 3.x then, yes, you will have differences in syntax and the standard libraries. In that case, some libraries, like six, may help you write portable code between Python 2.7 and 3.x. Or I encourage you to install MacPorts on your Mac, as it allows you to easily install, use and maintain multiple Python versions concurrently.
Oops, that's a change in Python 3 apparently.
The idea is this. Precomputed data, called a rainbow table, exists. The salt is there with the password, but that means the potential password combinations have to all be tried with the salt, rendering the rainbow tables useless. My personal tactic is to salt the password and double-hash the result.
ObsPy is great for earthquake data.
If you can make *your* game with Game Maker, why would you code your own framework? Answer: To learn. If your goal is to make a game, you should use the most convenient route. Same thing applies to any tool or framework.
From what I understand, Python is translated into bytecode, and then interpreted. It calls it compiling, but eh.
Yeah, lots of python work. We used python as part of a distributed processing system for malware detection heuristics. It crunched millions of android app samples looking for indicators. The entire thing was written in python. It was easier to tie all the analysis tools together and maintaining it was easier.
One of the most confusing differences was in the use of the eval function. When I first began, we were taught that if we wanted to prompt the user to enter and integer for some reason, we would use the command, "variable = eval(input("Enter a value: "))" in order to ensure the string was converted to a numeric value. I'd try and use the eval function, and when I would it would return a syntax error. If I just used "variable = input("Enter a value: ")" however, it wouldn't return an error. I've also had a few issues with invoking certain methods in my code. 
&gt; we would use the command, "variable = eval(input("Enter a value: "))" in order to ensure the string was converted to a numeric value. That must be the most fucked up way of converting something to an integer that I have ever seen. What's wrong with [int()](https://docs.python.org/2/library/functions.html#int)?
yeah i figured. thanks for your help! :)
As others have pointed out make sure you are using the same version of Python on your mac, that is a likely cause of your problems. Mac's ship with an older version that doesn't get upgraded automatically. If you need to download python 3 you might as well download all of the common math and science components that will be useful later in your CS major. Numpy and matplotlib are for working with matrices and graphing results. There are a few python bundles out there that include all of that, I use anaconda. You can download python 3.4 with all the extras here: http://continuum.io/downloads#py34 **EDIT:** You will need to make sure you are using the right version after installing what I linked because then you will have them both installed. How to do that will vary based on what you use to code though, so you'll need to ask for specific help if you need it.
Dude, I don't know. I have a shitty teacher, so I'm going by the book for the most part. I kind of have to make it up as I go during some assignments because very little is explicitly explained. Do you have any recommendation of supplementary material that may be more helpful? Books or whatever. Edit: and in the instance we were using this, we were prompting the user to input an integer. Maybe thats why. 
not to mention Matlab feels like some shitty fortran remake. And matlab is horrible at making exportable graphics. Want to create a plot that could be included in a journal ? Fuck you here's a low quality jpg.
I work for a travel company and we use Python for web crawlers, API clients, and various web applications (both internal and external).
...and I was previously a PHP web developer for a long time before this job. I'm very happy with the switch to Python.
im currently in a python programming class that runs on a linux based system. i can do all of my assignments on my mac no problem. /u/volent was probably right in that the versions you are running are different. as long as the versions are the same, the syntax should be identical.
I think eval(input(x)) is what 2to3.py changes input(x) to. It sounds like maybe the teacher was using old python 2.x course material but just passed all the past course work through 2to3.py to convert them and just taught based on that.
Howdy partners, This is an early draft of a Django and AngularJS tutorial I am working on. In the document I've linked to, we cover getting your environment set up for the project and writing some models/serializers with Django and Django REST Framework. My goal is to make some you all want to learn from. If you want to help me accomplish that goal by telling me what you think about the tutorial so far, please fill out this Wufoo survey: http://bit.ly/109tIXu Edit: Please excuse the formatting. PDFs doesn't obey the linter. No 79 character lines here! Happy hacking!
Nice, even handed comparison
Pyramid gets my vote.
A point: If you download a 3.x version on OS X you have to call it using python3, the default call is to the version that comes with OS X. If you find this annoying set up a virtenv for the class, one of the options for virtenv is to set the default version of Python to call, so you can make this different than the version that comes with OS X. 
I code on Windows AND MacOS, and my production servers are all Linux. I've *never* had an issue with 'portability'. I'd like additional details on what 'small syntax differences' you're referring to- I've never encountered any. Please note, I'm a professional pythonist. 
Pyramid! Incredible composability.
&gt; Dude, I don't know. I have a shitty teacher No kidding. Eval can execute any python code and make shell calls. All user input should be assumed to be wrong. If it's an int, force them to give you an int, and not 1.1 unless you want to explicitly handle that.
Thanks! good to know. this is her first year teaching so i guess thats an excuse.... but man it fucking blows to have to teach everything to yourself. 
You should bring this up to her, she probably doesn't even know that she is teaching you how to do an instruction injection by doing that eval shit. 
Haha, that's actually super inspiring and gives me a reason to dedicate more time to my own projects, Thank you!
Excellent article. I personally use flask for microprojects and Django because of its integration with django-rest-framework which makes it easy to whip up RESTful apis for mobile apps, Haven't explored Pyramid as much but after reading this I think I will.
Mac and Linux are identical with python windows however does some have some quirks. 
+1 for pyenv! FYI sublime has a tabs/spaces conversion option built in, no regex required! It lives in the bottom right of the window by syntax settings. 
This site is gloriously awesome. Install scipystack and you get bumpy+matplotlib both: http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack
Good article, though I'm a bit disappointed that testing wasn't mentioned. I've been working with flask for a while now and have found thing to be difficult to unit test. Integration tests are easy using `app.test_client`, but there's no way to unit test view functions and classes since request context is stored in threadsafe globals instead of being passed into methods like Django or pyramid. If you want to test view functions without the full WSGI environment, you have to monkeypatch the flask globals, which is tedious and very inelegant.
Sounds like something that could be potentially useful for https://scans.io/
I went with cherrypy and decided it was nice. It's funny because it seems everybody just uses it as a server for flask.
If you chose any competent framework (e.g. Django, Flask, pyramid etc.) and use their built-in authentication systems secure password storage will have already been taken care of for you. If you're absolutely hell bent on doing it yourself there are some good pointers in the other replies (e.g. PBKDF2, bcrypt, scrypt)
That's still a pretty shitty thing to do. 2to3 is a great tool, but its documentation explicitly states that it is far from perfect, and you should always check its output, audit and test your code, after running it.
I sort-of agree about testing and the global variables. I've ended up using decorators that gather up the request and session objects (and a few application specific things) and pass them to the view function as a single object Then it's quite easy to test at the view function level. Though, my preference would still be for the framework to do it this way in the first place.
Based on what you've given here, you're using Python 2 while the class is using Python 3. Originally, `input` would take input and evaluate it. This is a bad idea, generally speaking, so it led to `raw_input`, which would just take the input without evaluating. In Python 3, `raw_input` became `input`. To get the effect of the old `input`, you use `eval` and `input` together. In short, install Python 3, and you'll be fine.
I've programmed with python since the start of the year 2000 and have yet to need or want to use `eval`.
&gt; backend auth, admin, sessions etc. that you'll inevitably need to build anyway. How much time would it take?
I think the main point of contention with this overall good article is the common misconception about Flask. Django is a batteries-included web framework: it attempts to provide most of the component of a common web application in one package. Flask doesn't come with any batteries with the exception of a templating engine -- which can be replaced. The main issue that would come up regularly with a Django application is the question of whether or not it was possible -- or easy -- to replace those core components with something else. How easy is it to replace the default Django ORM with something else like SQLAlchemy? How about Flask? Pyramid? These are the sort of comparisons I would love to see come up in an article precisely because of how these issues will surface later in a web apps development-cycle and makes it extremely difficult to switch after the realization. I think the correct distinction between Flask and Django is not "small and large projects" because both can be accomplished using either framework, the distinction is what components of a web application are packaged with the framework?
I second this. 
I've been looking for a video like this, heck yeah! 
or, use github pages for free? I don't see the point of this post.
exactly, Github pages are best for static blogs (and for pelican)
Could you post a link to your calculation please?
Do github pages distribute the content to 50 servers around the world like Amazon do? I can't find any mention of what CDN services they offer.
After reading through this thread I have a few concerns. First, is this a university/college course or a high school course. I ask because there are at least two issues mentioned that tend to have me question the competence of the teacher here. First; the version of the language should be of no mystery to you at all. The fact that there is speculation here tells me the teacher failed to detail the version of the programming language to be used. These days it makes a difference for just about all popular languages. Second; the eval function should not be used as described. Second; considering the above, if this is a university program you need to bring up the issue in the program's evaluation. Frankly I don't think you know enough about programming to speak to the professor about the issues. If this is a high school program your options are far more limited in my mind. Many schools simply enlist unqualified teachers, generally teachers overly sensitive to student input. In any event correcting a class is far harder in a high school environment. Third; your posts leave much to be desired. One should provide adequate detail, for example I read your post and a couple of responses and still don't know which version of Python you are using!!! That after several people have mention that versions can be a problem. This won't be the last time you will need to post a question to a forum, eventually you will be able to zero in on the detail required, but until then details matter. It is best to focus on one specific problem too Fourth; I'm not sure what version of Python you guys are using but in my mind it is asinine to use the old versions to teach new students. In that regard you really should be using a 3.3 or 3.4 version of Python. If you aren't I really question the value of the entire program. It would be as stupid as teach new C++ students with an old compiler when C++11/14 is now the way forward. Fifth: to address comment four above, computer science is not about learning a programming language, programming languages are tools to help understand the concepts to be learned. As such I sometimes have extremely negative opinions about using high level languages to teach computer science as opposed to programming. If the goal here is to learn to program as a supplement to other educational goals Python is a good choice. If the goal is a well rounded CS degree then I see the use of Python as an introductory language as ill advised. Sixth; people in this forum are willing to help but there are other Reddits that might be more helpful. One is learnpython I believe. Seventh; don't waste your money on building a PC. First off; as a college student you have far more important uses for that money. If you really have to run Windows you can do that via a VM and any version of Windows your college can supply cheap. HOWEVER you should not need to do that at all. Given the right versions of Python your code should run the same as everybody else's especially for a course for new students. 
This is the exact reason we initially learnt gui using tkinter during my introduction to software engineering course. 
As an educator, I would love some kind of repository for lessons/exercises so that teachers could pick and choose and tailor to their students. That would be neat.
I still haven't bothered doing Python in Windows because I can't be arsed to set up everything manually. Every Linux distribution just takes care of it for me automatically. 
Do you need to distribute content to 50 server around the world for a _blog_ ? 
seriously though, this seems like a bit over kill for hosting a few static pages
https://github.com/blog/1715-faster-more-awesome-github-pages
Need, probably not but for a few dollars I love the idea of most of the world's population being able to load pages quickly. It pushes the bar higher.
That would be great. I teach statistics in college part-time and I'm looking to develop a course that use Python instead of Excel. I think using Pycharm would work well for my class.
Idk if I really want to take advice from a guy whose website is primarily accessed from the US, but picked an Amsterdam host.
&gt;&gt; After all, banks have protections against those by only asking you to type in certain letters of your password - but that means that they're now storing your password without hashing it, so if someone managed to get access to their databases...? Data security is hard. No, it doesn't mean they're storing your password without hashing it. It only means they're hashing various subsets/substrings of it they expect to ask you about and storing those. But it's obviously true that security is easy to get wrong and people should not try doing it themselves without really knowing what they're doing.
Can someone give some context to this dispute? 
[Github](http://www.fastly.com/customers/github/) is backed up by [Fastly](http://www.fastly.com/network/) which [compares well](http://www.cdnplanet.com/compare/cloudfront/fastly/) with CloundFront.
You are probably a pretty clever guy, but I doubt anyone would consider it a source of drama if he can't access your blog for a few hours a year. And honestly, if github goes down, I think there will be bigger cannons complaining. It's absolutely ok if you did it as training for these techs (hell, we all play with something to learn about it), and it's definitely great, but if it has a purpose for the scale you are working on, it's YAGNI at its best. 
I literally just finished reading... perhaps minutes before you posted. This is my understanding: * tip4commit allows people to add any github project to their service * people who maintain such projects do not with 100% confidence receive the tips, only if they're claimed. This is controversial part #1 * there are tax implications to something like this, and some project owners do not wish to deal with it * there seem to be a large amount of emails generated, causing spam * small donations are insulting (couple of cents) for hours of work * the tip4commit owner refuses to create a blacklist to stop this * the tip4commit owner refuses to remove mitsuhiko's projects from tip4commit
HN Discussion - https://news.ycombinator.com/item?id=8542969
If I understood it correctly (from the commits there) the committer is only notified of his tips at all, when they are (accumulated) whorth more than 2$. So, If there are a few dozen of tips under 2$ they all are basically in the hands of tip4commit - which can be pretty much, considering that there are often one-time committers for just a few errors that bugged them.
and that too for a *static* blog
if someone was soliciting donations on behalf of me and my projects without my permission (and potentially without even my knowledge), I'd be mad too. this is probably trademark infringement in the US for any commercial packages, and blatantly illegal in multiple countries in europe (in addition to trademark law, most countries in europe have REALLY strong moral rights protections). just start sending their host trademark infringement takedowns. trademark infringement notices do NOT follow DMCA takedown procedures. most hosts would rather take it down and tell the customer to go somewhere else.
this guy's just being difficult, they don't have any reason to comply with what he's asking for edit: downvote me but still noone has given a real reason why anyone should bend over backwards to this or anyone elses sense of entitlement if they aren't breaking any laws. a tort isnt a criminal offense, they could litigate but they would never be able to prove willful or even collateral damages. it was decent enough to try and compromise considering they didn't even have to reply. second edit: on second thought, go ahead and continue to live in your idealist fantasy universe where everything is the way it should be, fuck everyone who isn't unrealistic and populist
Yeah if their idea was to help the development community, you'd think they'd be somewhat responsive to said community. Still not sure if they're morons or scumbags but probably both.
hi elizabwth Finally got to play around with pyglet. After a fresh install of wheezy my LED-table finally behaves like i want it to and i can display my stuff again without problems. I started to look into pyglet, but am having trouble getting it to do anything. It seems to look for a window. since i'm running my python app from the terminal over ssh this is kind of weird. import pyglet if __name__ == '__main__': print "Tetris started" song = pyglet.media.load('tetris.ogg') song.play() pyglet.app.run() mainLoop() Unfortunately this raises the following error: &gt; Tetris started &gt; xcb_connection_has_error() returned true &gt; Traceback (most recent call last): &gt; File "Tetris.py", line 71, in &lt;module&gt; &gt; song = pyglet.media.load('tetris.ogg') &gt; File "/usr/lib/pymodules/python2.7/pyglet/__init__.py", line 306, in __getattr__ &gt; __import__(import_name) &gt; File "/usr/lib/pymodules/python2.7/pyglet/media/__init__.py", line 1354, in &lt;module&gt; &gt; from pyglet.media import avbin &gt; File "/usr/lib/pymodules/python2.7/pyglet/media/avbin.py", line 46, in &lt;module&gt; &gt; from pyglet.gl import gl_info &gt; File "/usr/lib/pymodules/python2.7/pyglet/gl/__init__.py", line 510, in &lt;module&gt; &gt; import pyglet.window &gt; File "/usr/lib/pymodules/python2.7/pyglet/window/__init__.py", line 1684, in &lt;module&gt; &gt; gl._create_shadow_window() &gt; File "/usr/lib/pymodules/python2.7/pyglet/gl/__init__.py", line 494, in create_shadow_window &gt; _shadow_window = Window(width=1, height=1, visible=False) &gt; File "/usr/lib/pymodules/python2.7/pyglet/window/xlib/__init__.py", line 474, in __init__ &gt; super(XlibWindow, self).__init__(*args, **kwargs) &gt; File "/usr/lib/pymodules/python2.7/pyglet/window/__init__.py", line 626, in __init__ &gt; display = get_platform().get_default_display() &gt; File "/usr/lib/pymodules/python2.7/pyglet/window/xlib/__init__.py", line 152, in get_default_display &gt; return self.get_display('') &gt; File "/usr/lib/pymodules/python2.7/pyglet/window/xlib/__init__.py", line 148, in get_display &gt; self._displays[name] = XlibDisplayDevice(name) &gt; File "/usr/lib/pymodules/python2.7/pyglet/window/xlib/__init__.py", line 166, in __init__ &gt; raise NoSuchDisplayException('Cannot connect to "%s"' % name) &gt; pyglet.window.NoSuchDisplayException: Cannot connect to "" &gt; AL lib: ReleaseALC: 1 device not closed I also tried loading the file as a ressource and using the code your link provided. I keep getting the same error. Any ideas?
Learn Python the Hard Way Edit: That's the name of a book, not a piece of advice :)
Ok thanks.
I will try it.
Read the sidebar. Check out Dive into Python 3. Ask questions in /r/learnpython.
Thank I will check it out.
Does tip4commit charge any processing fee?
Download PyCharm IDE educational edition and get to it: [PyCharm EE](https://www.jetbrains.com/pycharm-educational/)
Thanks 
I used to get emails telling me, every time I made a commit to Django, that I had an unclaimed tip balance of 0.00000171 BTC. The emails only finally stopped when the Django project literally made threats of contacting their ISPs about the spam and patiently pointing out that tip4commit was violating enforceable anti-spamming laws of several jurisdictions where committers live.
Based on their distribution scheme, they will have a positive balance at all times. This means even if they don't pocket the money outright, as many seem to suspect they will, they can still profit from it. The obvious thing for them to do would be to take a short position against bitcoin by exchanging all donations and holding them in a real currency. As tips are claimed and distributed, they can buy bitcoins as necessary at a lower price than the original donors did. Of course, you can imagine other ways to profit on the balance that would not be in keeping with the claimed spirit of their service or, perhaps more seriously, its fiduciary obligations as an organization collecting donations on behalf of another.
I think that the small amounts was something pounced upon by other people in the thread, but not really the motivation for mitsuhiko asking to be removed. He uses gratipay which is all about (weekly) micropayments, so it seems like he appreciates people kicking in a little support, just not people doing it in his name without his permission.
Yuck, the github page is utterly spammed with people from there. I hate how people will just brigade a github issue page and suffocate the original discussion. At least it's not completely full of memes yet...
Hello RedExplosives, I too am learning Python. So far I have been using Buckysroom.org to gain a visual understanding from installation to beginner syntax. From there I plan on reading some of the recommended books that others have mentioned. https://buckysroom.org/videos.php?cat=98 Good luck, -bluesheep1
Because the aim of the project is, in order of priorities: 1. Make money on unclaimed donations. 2. Promote the use of Bitcoin. 3. ??? 4. Help out open source projects.
They seem to have already complied, if you look at the site. https://tip4commit.com/github/mitsuhiko/flask
He asked to be removed, not to still be listed with additional comments saying he doesn't want contributors to be notified of tips. They still have not complied, and now are arguably publicly putting words in his mouth. By their admission they lack any form of opt-out mechanism.
Well, they put a notice on the page, but they did not remove the project entirely from their site which is what people are asking for. It's a half-hearted and disingenuous response. 
Hi, While I think it's very nice of you to provide OP with an answer, I'd like to ask you to please not do that again. I think it's better for everybody on /r/python if we simply refer them to /r/learnpython, rather than provide the answers here. I think, unfortunately, that giving answers here encourages off-topic posts that belong in /r/learnpython. Kind Regards.
Please ask at /r/learnpython instead of at /r/python.
Wow, okay that is scumbag
You could read the sidebar, which contains many books on the topic. However, if you'd read the sidebar, you'd also know to ask in /r/learnpython and not here. Please do that next time.
My apologies, I wasn't aware of /r/learnpython
If you do: share it here! I would love a python approach to things excel can do.
Hi, While this seems to be gaining some traction, I believe it fits better in /r/learnpython. How to securely store passwords isn't, as such, a python-specific issue, it's a matter of webapp security. I'd ask you to please post similar questions in /r/learnpython another time.
Hi, While I think it's very nice of you to provide OP with an answer, I'd like to ask you to please not do that again. I think it's better for everybody on /r/python if we simply refer them to /r/learnpython, rather than provide the answers here. I think, unfortunately, that giving answers here encourages off-topic posts that belong in /r/learnpython. I also think that this question isn't specific enough to python as a language to belong here, rather than on /r/learnpython. I could even argue that it belongs on /r/asknetsec, but either way, I think /r/python is an inappropriate place to post it. That said, thank you for giving people good security advice. I think doing so helps improve all of the internet for everybody. Kind Regards.
Hi, While I think it's very nice of you to provide OP with an answer, I'd like to ask you to please not do that again. I think it's better for everybody on /r/python if we simply refer them to /r/learnpython, rather than provide the answers here. I think, unfortunately, that giving answers here encourages off-topic posts that belong in /r/learnpython. Further, I might suggest that unless you specialize in security, it's best not to give people too much advice. This isn't to suggest that you don't know how to store passwords securely, but there can be a number of caveats one might not consider if one doesn't work with this daily. I think it would be best to refer this poster and similar to /r/asknetsec. Kind Regards.
With bcrypt it's part of the hash, so you don't need to.
Hi, While I think it's very nice of you to provide OP with an answer, I'd like to ask you to please not do that again. I think it's better for everybody on /r/python if we simply refer them to /r/learnpython, rather than provide the answers here. I think, unfortunately, that giving answers here encourages off-topic posts that belong in /r/learnpython. Further, I might suggest that unless you specialize in security, it's best not to give people too much advice. This isn't to suggest that you don't know how to store passwords securely, but there can be a number of caveats one might not consider if one doesn't work with this daily. I think it would be best to refer this poster and similar to /r/asknetsec. Kind Regards, /u/Pink_on_Inside
From @ubernostrum on HN: &gt; tip4commit is one of a number of services which, without asking for permission or notifying you, opt your projects into a BitCoin-based crowdfunding system. Even if your project doesn't want it, even if your project has its own donation/support system you'd like to send people to. &gt; Historically they spammed committers of force-opted-in repositories with an email on every commit to tell them what their new BTC donation balance was after the commit. And they insist that once a repository has been added to their system, they do not have the ability to remove it. &gt; This has legal and tax consequences they seem to be blissfully unaware of, and the best they'll offer is to stop sending you an email every time you make a commit. &gt; We (meaning the Django project) went a few rounds with them a while back and ultimately had to resort to threatening spam complaints against their ISP just to get the damn emails turned off. We still have been unable to get removed from the list of projects they "helpfully" collect donations for: &gt; https://github.com/tip4commit/tip4commit/issues/111 &gt; The link in this thread is another major developer also attempting to get his repositories removed from their "service", and being stonewalled just as we were.
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. Kind Regars, /u/Pink_On_Inside
Hi, Questions like this belong in /r/learnpython, an entire subreddit aimed just at helping people get Python development environments set up, and answering questions on how to use the language. /r/python itself, as per the sidebar, is for articles, news and similar about the language itself, and more of an asset for people who already know the language. This isn't to rebuke you. I just want both /r/python and /r/learnpython to thrive. However, I would encourage you to read sidebars and pick appropriate places to post. Kind Regards, /u/Pink_On_inside
I love everything that mitsuhiko is doing. I would offer 500 USD worth of Bitcoin and he's most likely going to refuse it so it's unsurprising that such a service is not highly regarded by him. There is also the unethical perception of the service to begin with.
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. On a more personal note, I would also discourage you from posting code samples like that, as it tends to encourage new or newish developers not to learn the standard library, or to really understand the code. I would recommend that you simply refer them to a library or give them an example of a control structure. Kind Regards, /u/Pink_On_Inside
Hi, Questions like this belong in /r/learnpython, an entire subreddit aimed just at helping people get Python development environments set up, and answering questions on how to use the language. /r/python itself, as per the sidebar, is for articles, news and similar about the language itself, and more of an asset for people who already know the language. This isn't to rebuke you. I just want both /r/python and /r/learnpython to thrive. However, I would encourage you to read sidebars and pick appropriate places to post. Kind Regards, /u/Pink_On_inside 
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. Kind Regards, /u/Pink_On_Inside
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. Kind Regards, /u/Pink_On_Inside
Hi, Questions like this belong in /r/learnpython, an entire subreddit aimed just at helping people get Python development environments set up, and answering questions on how to use the language. /r/python itself, as per the sidebar, is for articles, news and similar about the language itself, and more of an asset for people who already know the language. This isn't to rebuke you. I just want both /r/python and /r/learnpython to thrive. However, I would encourage you to read sidebars and pick appropriate places to post. Kind Regards, /u/Pink_On_inside
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. Kind Regards, /u/Pink_On_Inside 
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. Kind Regards, /u/Pink_On_Inside
Hey, While I do think it's very nice of you to answer people's questions, and I think it reflects well on you, I'm going to ask you to please not respond to people who post off-topic questions. Not only are they posting in a place where they are not as likely to get the best answers, they are also dilluding the quality of the main /r/python subreddit. /r/learnpython exists for questions just like these, and I think both /r/python and /r/learnpython would be better off if we directed people there rather than reply to their questions here, giving them incentive to ignore the sidebar and disregard /r/learnpython. Kind Regards, /u/Pink_On_Inside 
Hi, Questions like this belong in /r/learnpython, an entire subreddit aimed just at helping people get Python development environments set up, and answering questions on how to use the language. /r/python itself, as per the sidebar, is for articles, news and similar about the language itself, and more of an asset for people who already know the language. This isn't to rebuke you. I just want both /r/python and /r/learnpython to thrive. However, I would encourage you to read sidebars and pick appropriate places to post. Kind Regards, /u/Pink_On_inside 
Thank you, I wasn't aware! If you could remove it that would be well, I don't want to break any rules! :D
Hey! I'm not a moderator. I have no authority to speak on behalf of this subreddit. However, I would still encourage to you delete your post. I think it sends a bad signal to the subreddit to have threads that aren't in line with the intent of a subreddit with answers. It encourages people to come _here_ to ask basic questions, and to look for answers. Thank you.
Hey, I'm not a moderator! I have no authority to speak on behalf of this subreddit. However, as a fellow user of /r/python, I would ask you, kindly, to remove the post. I don't think it encourages quality posts to dillude the purpose of a subreddit, and either way, /r/cscareerquestions will be a great place for you to post.
This seems questionably illegal, and should be reported to both github and linode, their webhost.
Okay, I think I'll message the mods and ask what they think. Thanks for your heads up. I just don't want to lose track of the answers I got here otherwise I would!
&gt; "each new commit receives 1% of available balance" So if you put a dollar in the account, even after 100 commits there's still 36 cents leftover in tip4commit's coffers (and that assumes every commit is "claimed"). Which is to say, by construction most of the donations are going to remained unclaimed and with tip4commit.
I'm irrationally annoyed that someone's saying "Please stop thanking me for my work and sending me money!" Don't we have enough open source coders living in cardboard boxes as it is?
Give me a heads up when you get their answer?
Got it, agreed.
Absolutely nothing, but the project should opt-in, not be forced to opt-out (and have a hard time doing that, even)
Why should anyone ever have to opt-in to receiving free money?
It's more than he deserved for being so rude and ungrateful.
How is giving someone money illegal?
I just looked up who they're talking about, and this guy is apparently really Armin Ronacher, who tends to be difficult about everything. ;-) But apparently if you think being grumpy rather than saying "thank you" when someone hands you money is poor form you're going to get downvoted to oblivion here. What next? "Ohloh - I want to be blacklisted from your service. I want you to stop counting my commitments and lines of code immediately. This should be opt-in and is illegal and a violation of trademarks and it's spamming. Google - stop indexing my projects without permission...."
https://gratipay.com/mitsuhiko/ Here ya go
You might be missing the point. This is not about ungrateful developers refusing donations, it's about third parties offering to (a) collect money from people and (b) donate it to developers, where the (b) part may not work as one might expect, leaving some or all of the donated money with the third parties and not the developers.
They should remove people who've requested it, and switch to explicit opt-in.
I can understand the rude. And he has nothing to be grateful for. What else ya got?
They're not necessarily giving anyone money. They're just claiming to collect money for someone else, without their knowledge or consent. Even worse, they're not even being upfront about this, leading the donator to possibly think they're affiliated or endorsed by the projects they list.
&gt;They're not necessarily giving anyone money. No one's presented any evidence that they don't give people money. In fact, they're complaining about "spam" from them *telling* them that they've received donations. &gt; They're just claiming to collect money for someone else, without their knowledge &gt;or consent. What knowledge or legal consent do you imagine is needed to collect money for someone? If I see a news story about someone in town whose home burnt down and I start a collection at my place of employment for that person, I'm not breaking the law. Only if I never give the person the money I collected would I be guilty of anything (fraud). &gt; Even worse, they're not even being upfront about this, leading the donator to &gt;possibly think they're affiliated or endorsed by the projects they list. What does that mean and what does it matter? Does it make any difference to the donator whether the coder asked for the donation or not? It's a way for someone to say thank you, period. It's irrelevant whether or not they signed up for it. I just don't follow this moral outrage.