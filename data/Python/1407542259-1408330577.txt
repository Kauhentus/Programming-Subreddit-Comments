Other variations along this line are: Python guru, python whiz, python expert, python hotshot, python evangelist...there are others I can't recall right now
No oop things ?
Ha, OSX is a different can of worms... in that case, Python is probably the only valid choice of the two (VBA in Excel for Mac is just painful and much more limited than the Windows counterpart, as you probably know already).
Another vote for Qt here... I think my first exposure to it was the spyder IDE, then realizing that enthought's pyface, enaml, traitsui, chaco, and mayavi can use either pyqt or wxpython. Now that I use pyside/pyqt a lot I really enjoy pyqtgraph. This set of comments is also incomplete without kivy. Kivy is one of the more recent options with some at cross platform including mobile support. There are a lot of fans of it and it's growing in maturity. If you search for the last 5 questions like this a lot of them had a bunch of kivy answers. My big GUI project at work started a couple years ago, so I got on the pyqt/pyside bandwagon for its professional appearance, pythonic api, and the Qt community seems pretty big. I've gotten decent at reading Qt c++ docs and blogs despite not really knowing c++, which while not necessary opens up a huge wealth of additional shared knowledge. Also I like the signals and slots logic so much I use it in non-GUI code for event based programming. I should learn twisted or something, but Qt does so much and integrates well when there is a GUI. Oh also, Qt is way more than just a GUI toolkit, it's an application platform with threading, multiprocessing, networking, database, imaging, and all sorts of stuff. For most problems you can freely choose whether to use a python solution or a Qt solution.
his name has pony in it, not clicking, not today. not ever.
 r = requests.get(.... print r.content
You are trying to load a URL that is processed client-side with JavaScript. The query being in the hash means it's not part of the request, and that it's handled client side. You need to use an actual real search URL, like `http://www.google.com/search?q=what+time+is+it+in+china`. But beware, it's against the Google terms of service to screen-scape search results, and most likely you will get a 40x error unless you change your User-Agent, and even then, if you perform more than a few searches for the same query in a minute, you'll get sent to a captcha page because Google will suspect that you're a bot. Pick some other site to practice screen scraping. 
Matplotlib is indeed bad for plotting. Sorry, its developers.... I just use pandas for playing with data. Numpy and scipy is enough for me to do some basic statistics.
Why are you going to all the trouble of screen-scraping this? Here is how you get the current time in China, or any other time zone: import datetime import pytz now_in_china = datetime.datetime.now(tz=pytz.utc).astimezone(pytz.timezone('Asia/Shanghai')) print('{:%Y-%m-%d %H:%M:%S}'.format(now_in_china)) You are still going to be sent to a captcha page if you try to scrape too many URLs in too short a time, regardless of whether you use Selenium or requests.
I've honestly never used unpacking in functions, and rarely use it in general. I can't imagine it being easy to understand if you ever have to use that code again. In fact, unless I was trying to squeeze performance, I'll always use dictionaries. Or just have regular parameters in functions.
I've been using Python/NumPy/matplotlib for simple data analysis for about 2 years now, but I mean really simple - plotting time series, spectrograms, and the odd statistic. However, it's weird you posted this today, I literally decided TODAY to try out switching my analysis toolkit to R. If you're poking around in Python for data analysis, I highly, highly recommend pandas, as if you're doing anything with data (that isn't already perfectly formatted in their files) besides simply loading it, plotting it, and calling a single NumPy function on it, look into pandas. It has significantly better and simpler data export than NumPy and is seriously capable when it comes to "cleaning" ugly data. However, as far as I've been able to tell, all the reasons I like/proselytize on behalf of pandas, is *because of the things it has that R has*, which is especially the two aforementioned things. AFAIK this is the main thing pandas is made for - data munging and relatively simple statistical analysis. Speaking of pandas, be a little wary of [Python for Data Analysis](http://shop.oreilly.com/product/0636920023784.do) if you're looking for something about the whole toolkit; it's written by the creator of pandas, and according to negative reviews I've seen either on reddit or Hacker News, 90% of the book is really just going over his library. So...it could be literally the best book on pandas! Just not...overall data analysis in Python. This is also hearsay, so grab some salt; I haven't read it myself. For more complicated statistics/machine learning libraries, you want [statsmodels](http://statsmodels.sourceforge.net/) or [scikit-learn](http://scikit-learn.org/stable/). Speaking very generally, the former is more stats / modeling focused and the latter is machine learning - however, these two things can of course be identical sometimes depending on what you're doing. I was trying to port some MATLAB code using statsmodels for the past week only to find out it's not as mature as I'd hoped (for a log-link Gamma GLM fitting, the numbers I was getting were 1. wildly different than MATLAB's [there is only one algorithm for calculation coded in at the moment] and 2. it took 15x as long as MATLAB to run on the same data set, reaching near-unfeasibility on the scale I need). Scikit-learn may be more mature, so check that out first (especially if you can speak machine learning). The issues I had with statsmodels really aren't damning; however, those + matplotlib combined is what has driven me to R... Matplotlib's documentation is an abomination for someone who really "wants to do it right"; IMHO it's mainly geared at people (like scientists) who just want the minimum working code to get something to display right and then forgetaboutit. The [site/"gallery"](http://matplotlib.org/gallery.html) for it is actually incredibly good if you have a specific plot type in mind, but you don't know what it's called and just want it to work! However, if you want to do things "the right way" / be pythonic, (as of 1.3.1) they make it EXTEMELY difficult IMO. The manual is an amalgamation between different people who cover different, sometimes overlapping, parts of the library, and I could never find a part of it that delved into the nuts and bolts enough to really grasp the overall structure. When I say the right way, I mean follow the class hierarchy (or hell just try to grasp it in an actionable way), call the right methods from the different subclasses (I can still never remember, "do I need to call plt/pyplot for the title or xlabels? or ax? or the actual figure object?"), etc. The closest I've ever come to finding good sources for following the THINKING of the library (which, rumor has it, is somewhat based on the construction of MATLAB's plotting library) is [Matplotlib for Python Developers](http://www.amazon.com/Matplotlib-Python-Developers-Sandro-Tosi/dp/1847197906/ref=sr_1_1?ie=UTF8&amp;qid=1407544453&amp;sr=8-1&amp;keywords=matplotlib+for+python+developers), which I haven't read, and [the matplotlib tutorials here](http://datacommunitydc.org/blog/2013/07/python-for-data-analysis-the-landscape-of-tutorials/), some of which are by actual matplotlib devs. There's Python people I know and trust who really love matplotlib and who get the overall structure - but I've got so much fatigue from trying to understand the library on an intermediate level that I'm probably about to give in to the comforting embrace of R's ggplot2. Note that there is an [attempt to port ggplot to Python](http://blog.yhathq.com/posts/ggplot-for-python.html), actually. I can't honestly tell what the speed of the community/development has been for the Python tools these past few years has been, but apparently both R's and MATLAB's community have been gaining speed greatly, coupled with nice improvements to their actual engines. E.g. supposedly R doesn't have the same memory problems it used to have. Also, if you're into that, R right now is supposed to be the state of the art when it comes to statistics, in that statiscians doing math research are actually very likely to publicly code up their brand-new statistical thingies [scientifically speaking] and make them available in R themselves. Python is a general purpose programming language, while R is decidedly NOT trying to do that, but supposedly the level of sophistication of both 1. the availability of statistical libraries/functions and 2. the efficiency of implementation are far superior in R, and given how tied the statistical community is to it, Python simply will not be able to catch up in the near future. In a decade everything may begin to reverse, and I for one would welcome our Python-lang and Python-world-class-analysis overlords, but I don't think it's going to happen very soon. That said, the Python community has been strangely open to working WITH R...through Python, through [rpy2](http://rpy.sourceforge.net/) or, interactively, through [rmagic in ipython](http://ipython.org/ipython-doc/dev/config/extensions/rmagic.html) (actually rmagic may be deprecated in favor of rpy2?). Pandas' data structures are very similar to R's, and I haven't used rpy2 but a few times and it didn't seem immature. Both langs also supposedly have decent d3.js web-style visualization deployment, though I'm not sure what the specific libraries' names are.
Thank you...it appears google doesn't let me but bing does! I just wanted to practice because I am creating a twitter bot that tells people the time when they ask for it. Thanks for all the help I appreciate it so much! And yeah it does seem a bit silly but I wanted for people to enter anything like "San francisco, California" and let google or bing do the work to get the time. 
Agree with comments above: move away from statically generating charts, and give users an olap/cube solution, such as Pentaho. Don't use excel,it's a legacy approach.I doubt Microsoft will support VBA much longer. There is no development of it, it's a security nightmare and will never be supported on the cloud or mobile versions of Office. It's even more useless on Mac because essential things like odbc access are not provided by Microsoft. 
Why not?
Head over to the r/dailyprogrammer [challenges archive](http://www.reddit.com/r/dailyprogrammer/wiki/challenges). Go down the list of Easy challenges and do them in sequence, and search each challenge's comments for "Python" so you can compare your result against other people's code. Once you're confident move up to the Intermediate challenges, and so on.
Exercises in programming are good, but yeah what you're doing seems really silly. Te most useful question I've ever come across that works in nearly all situations is "what are you trying to accomplish?" That was rhetorical, you don't necessarily need to answer that.
I did not know about Julia! Thanks for the info.
The best way to make a nasty complicated (and often beautiful) spreadsheet out of code is to create it by hand first and then use Python to reach in and modify something. Where I have done data driven Excel spreadsheets before I often put the data as the most boring worksheet ever as a back page, then I put the beautiful and well formatted worksheets up front. Then Python only has to go to some back page and cram the data in using rows and columns which is not hard to think through. The CVS idea can also work well. As for PDFs there are tons of libraries to export to PDF and generally they are fast enough that you can do it on the fly. Interestingly enough they also tend to make really lean PDFs. 
It is pretty cool but sparsely documented and some of the demos don't work for me. The objective-c bridge code is amazing and I'm stoked to be able to use it.
This is FANTASTIC. It's something that should be in Python already. It saves us from the humiliation of showing our friends how awesome Python is and then being embarrassed by all the self.a = a self.b = b self.c = c in our classes.
Correct you are! Pick a category.
I don't actually. I am just getting exposed to it myself. I go to a monthly Python group and they all recommend using Flask to create web content with Python. I will ask around and see if I can get any good learning resources. 
Thanks! :)
Arguably Django. There are lots of full stack MVC frameworks for both PHP and Python though, so there's no real analog.
Flask only has an HTTP server built in for development purposes; I hear PHP is getting the same feature soon. It seems light-weight and simple enough to me, and jinja2 seems to work well with it for templating. If it's not for you, there's always django, pylons, web2py, webpy, or a few dozen more. What specific features of CodeIgniter do you want in a python framework?
The dev server included with every framework I've used is specifically NOT for production deployments.
Some other error here. Looks like it is not Python 3 compatible.
I'm just started with Python but can anyone explain what this tool really is? If its just another IDE, there is Enthought Canopy software recommended by edx course and not this.
Does Misago provide an API? 
 Traceback (most recent call last): File "/usr/local/lib/python2.7/dist-packages/toga/platform/gtk/app.py", line 27, in _startup self.main_window.app = self File "/usr/local/lib/python2.7/dist-packages/toga/platform/gtk/window.py", line 61, in app self._startup() File "/usr/local/lib/python2.7/dist-packages/toga/platform/gtk/window.py", line 24, in _startup if self.toolbar: AttributeError: 'MainWindow' object has no attribute 'toolbar'
Python3 removed the ability to write things like `262144L` (`long`). Edit: [More info](http://legacy.python.org/dev/peps/pep-0237/)
Out of curiosity, what don't you like about Qt?
I don't think you're getting the message (and I'm sorry if you do, I'm really just trying to help). The deployment "model", lets say, of Python is intrinsically different from PHP. With PHP you essentially just drop stuff on a folder and configure Apache. With python frameworks, there're several options, like using uwsgi and nginx, for instance (read [this](http://flask.pocoo.org/docs/deploying/#deployment) for more information on methods for deploying flask in production) The key word here is **production**. PHP's model for both development AND production is quite similar: drop stuff in a folder, point apache (or other server) with the appropriate configurations to it, and you're good to go. Python is different. You CAN use a setup more similar to the production environment if you want, but most (if not all) frameworks ship a very simple development server so you don't HAVE to. The development server is just a nicety, so you don't have to bother with production configuration until you really have to: when deploying your project in production. You are not supposed to use the development server to actually host anything. Use it to test and debug while developing on your machine (where doesn't really matter what port you're using, right?) and when the code is ready to be deployed, go read that link I mentioned above, and find out the best option for you to deploy your app. I hope I helped to clarify things =)
Flask is much simpler than CI. You are thinking that an HTTP server is complex because you are not used to having a Dev server, but it is actually simple, convenient, and a superior Dev flow.
[Try pyramid](http://trypyramid.com/)
Well for starters, QT is written in C++. I'm not sure how easy it is to use it with C, but I know where there's C++, there's unneeded complexity. I've also heard about its sluggishness.
You're welcome =)
Awesome. =D Just for you I have added two new interfaces for querying the PyPI RSS feeds for newest and updated packages.
argumentum ad populum
I think the current version on PyPi is missing a fix for OSX. Try installing from master on the github.
The built-in HTTP server is only for dev
Here's the lightning talk from PyCon AU 2014, where/when this library was announced/released: https://www.youtube.com/watch?v=W0W0s0-Ryc0&amp;list=PLs4CJRBY5F1Jm7H1dlesRvEgr-28QGXpR#t=788
i can not figure out how to install toga for python3 (using ubuntu14.04) :-(
So php frameworks does not come with a dev server?
Why not use AstroPy constants, units and quantities? That code base is pretty mature now.
Since PHP 5.4, PHP has a built in server. http://php.net/manual/en/features.commandline.webserver.php
That's the recent version, so all these years how those guys used to testrun their code? Apache? 
It's a new GUI toolkit, which means it will only be used by new projects, but it doesn't support Python 3? :/ Also, using the same library for Linux/Windows/OS X I can see, but it mentions mobile and iOS as well. This would have radically different UI designs. The site doesn't give any details on how Toga would also serve mobile platforms. Can they also run on desktop? If not, shouldn't it be a separate GUI toolkit? All in all, especially with the documentation in such poor shape, this doesn't look very promising compared to what's out there already.
Please correct me if I'm wrong, but astropy isn't system-independent like natu. In natu, units are derived from physical constants without bias towards any system. Like most other unit/quantity packages, astropy treats the unit as an attribute of the quantity. natu incorporates the value of the unit into the value of the quantity, which avoids the need to do conversion during operations among quantities specified via mixed units. It's even possible to turn off the tracking of dimensions and display units. Then, the quantities are simply floats and the only overhead (beyond the floating point operations) is at input/initialization and output/termination of the program. During the main computation, there is zero overhead. Yet it's still possible to use mixed units to initialize variables and we can still display the output in any compatible unit. Also, in astropy, units with offsets (Celsius, Fahrenheit, etc.) and nonlinear functions (neper, bel, etc.) aren't handled in a straightforward way. In natu, you can use degC, degF, Np, B, dB, etc. pretty much like any other unit.
pandas+matplot is a winning team, if you want more graphs like R's ggplot I'd recommend Seaborn (which does some nice styling and adds some more plot types). I've not done much R but it's main disadvantage compared to Python is that it's very domain specific. It's good for stats and that's about it. With Python, once you learn it for data processing you can apply it for all sorts of other things. Another massive advantage for data analysis is the IPython Notebook which is a great way to interactively explore data and keep notes on the process. The disadvantages relative to R are that some of Python's statistical tools are less complete and mature by comparison - although the RPy library which allows you to call R from Python is a good insurance that you'll never be stuck needing something from R and not being able to use it. R is also a bit more simple a concise since it's so domain specific, Python for instance gives you flexibility in importing the numeric libraries which means a little bit more typing and having to understand imports and namespaces
I tried this on ubuntu and it looked absolutely terrible.
There is no native toolkit on Linux. Raw X programs look horribly out of place. Also Wayland won't change that.
&gt; I don't want something that has a HTTP server built in Sooo, uhhh... do you custom compile your PHP without `-S`?
If you linuxed you knew how to install LAMP, or [WAMP](http://www.wampserver.com/en/) / [MAMP](http://www.mamp.info/en/) / [XAMPP](https://www.apachefriends.org/index.html).
&gt; I hear PHP is getting the same feature soon. It did ages ago, for 5.4 release.
Here's what you do for django (on Windows): `$ pip install django` `$ python Scripts\django-admin.py startproject mysite` `$ cd mysite` `$ python manage.py runserver` Django does more for you than CI does though. Pyramid is slightly more flexible than Django (less heritage design) so even though its got a lot of functionality it can 'make more sense' to forgo using some of it. Things like web.py and aspen are designed to be even more cushy to get-started-quickly-write-things-quickly depending if you like that. Things like Flask and bottle.py are lighter-weight although Flask is very extensible. PHP development can often be done without ever needing to touch the command line (just drag and drop files) but less and less so these days, with things like composer, laravel and symphony all making the same use of it that setting up the typical python webapp does.
It was kind of late to the party with package managers, but it got quite a good one called [composer](https://getcomposer.org/). PHP doesn't need a virtualenv typically, since "installing" php libraries for the most part is just putting them in a folder local to your project and having autoload code in your `index.php` setup to be able to load those files. PHP doesn't make nearly as much use of compiled extensions, but you generally just have a whole heap enabled in your server.
Nice work!
 Running "your first toga app" (Python 2.7.5, OS X 10.9.4). This library is promising, though many bugs shine through. 1. Can't install on Python 3.4 (same problem as: http://www.reddit.com/r/Python/comments/2cz6f5/toga_a_python_native_os_native_gui_toolkit/cjkwazl). 2. Can't launch first app and trying to fix source code made it worse Traceback (most recent call last): File "hello_world.py", line 26, in &lt;module&gt; app.main_loop() File "/Users/justas/Documents/programming/Python/Toga/env/lib/python2.7/site-packages/toga/platform/cocoa/app.py", line 87, in main_loop self.main_window.app = self File "/Users/justas/Documents/programming/Python/Toga/env/lib/python2.7/site-packages/toga/platform/cocoa/window.py", line 129, in app self._startup() File "/Users/justas/Documents/programming/Python/Toga/env/lib/python2.7/site-packages/toga/platform/cocoa/window.py", line 116, in _startup if self.content: File "/Users/justas/Documents/programming/Python/Toga/env/lib/python2.7/site-packages/toga/platform/cocoa/window.py", line 133, in content return self._content AttributeError: 'MainWindow' object has no attribute '_content' 
You can get iPython Notebook on iOS which is still under development. Unfortunately they went with version 2.7 instead of 3.x which takes it out of the running for me. 
That it's useful, is debateable.
Units and Quantities are decoupled. Everything you have mentioned is also in astropy. "straightforward way" is subjective and biased by those familiar or (in this case) unfamiliar with the documentation.
PySide is a little behind with Qt version, but its license is a lot more permissive (you'll have to pay for PyQt license if you want to commercialize anything). PyQt is more up-to-date, but costs money when you want to commercialize your program.
Actually the Python bindings (both PySide and PyQt) very closely follow the C++ API with only a few changes. It's a (in my opinion) very clean and easy to use API in C++ and that's why you get a very nice API even when you map everything 1:1 into Python.
Thanks for the reply, didn't know about it.
When this package was announced (in the Saturday lightning talks at PyCon AU), he mentioned that he already had some sort of iOS support built, including an app template you could drop your Python code into.
What you would usually do, then, is running Nginx as a reverse proxy for your separate apps. I usually run them in production bound to `localhost:3000`, `localhost:3001`, and then use Nginx to route each request to the appropriate application server. EDIT: or, well, uWSGI on Nginx, which is probably a better idea these days.
He's right. The HTTP server you boot by doing `app.run()` on your Flask application is not intended to be used in production. Back on the days you used Gunicorn, but it seems that since Nginx got uWSGI support people use that instead.
I hear all the cool kids use PyCharm. 
It's planned to have API that will let other apps pull out forum profiles or tell Misago to start threads for articles/blogs as well as to use Misago for comments, but there are more important things to get done atm.
You need to create a `.desktop` file. See [How can I edit/create new launcher items in Unity by hand?](https://askubuntu.com/questions/13758/how-can-i-edit-create-new-launcher-items-in-unity-by-hand) for how to do that.
Maybe like this? links = list(filter(lambda x: x.startswith("/wiki"), links)) It first makes a generator that only contains links that start with "/wiki" and then turns that generator into list. I don't like the idea of changing a list while you go through its values. And maybe first check that links does not contain None? The problem is caused either by None contained in links or that you change the list that you go through.
I tried it and had same issues on OSX. I logged an issue with them .. https://github.com/pybee/toga/issues/23
I just used that and I got the same error, so it probably has None somewhere in it. I'll see if I can identify where and remove it.
try something like: print("None is in links:", None in links) to be sure. Sorry if this advice sounds trivially stupid...
The logic error is in the following bit of code: for i in res.find_all('a'): links[c] = i.get("href") c = c + 1 You look for all a tags, and for each a tag extract either: * The value of the href attribute, if present * None, if there is no href attribute. You'll need to either deal with None in the loop you extracted, or not put them into the list at this point in the loop. Note that in HTML, a tags do not have to have the href attribute - &lt;a name="buggy"&gt; is a valid HTML snippet, and has no href.
i just launched spyder from the terminal, then locked it to the launcher to open it from there after that.
This is exactly why list comprehensions were invented -- map, filter, and lambda in one handy and Pythonic syntax: wiki_links = [link for link in links if link.startswith('/wiki')] Edit: fixed logic.
Tnx man :)
Yeah, that's even nicer way to do this. My thinking is too stuck on composing the right function to do the job. I think there shouldn't be 'not' in the statement. 
If you want to get the results from an actual browser, you might want to use Selenium Webdriver. the code below will open an actual instance of Firefox. You can then read element properties and contents, and even send click events. Check out http://www.seleniumhq.org. from selenium import webdriver ff = webdriver.Firefox() ff.open("https://www.google.com") 
Awesome, will have to check out this series. Any major differences between this and the "mega flask" tutorial series? I get a lot of questions about various web frameworks and usually only have one flask tutorial to point people towards. If you're familiar with the mega flask one, might you state some differences so I can better point people in the right direction?
&gt; PyCharm I don't but thanks for mentioning it. Just went breifly through the website but dayum, the software look slick! Must nicer lookign then Enthought's
This is why I *never* do `python setup.py install`, and instead do `pip install .`, uninstalling is so much easier.
The bindings, yes. And I'm glad or I wouldn't be able to use the C++ help docs out there. I more meant that I don't have to pass `QList`s or `QString`s, I can just pass native Python objects. It certainly isn't PEP8 compliant, but I'll survive.
Woo PyOhio! 
You have the opposite. He wants the wiki not anything else.
That doesn't mean it's a good idea to get into bad habits.
Sounds more like Django then. I don't personally like "kitchen sink" frameworks, so I'm not much of an expert on which one's best, but Django is pretty much the defacto standard in Python if you want all the features out-of-the-box.
Shows ya how long it's been since I did much PHP.
You can get by with either. Keep in mind you're asking this question in/python/ though. You can really use either of these, and you should choose what you want. I think Python is more useful to know for other aspects than R, so I would personally recommend Python over R. Pandas + Matplotlib = &lt;3. ... also use matplotlib styles and avoid having ugly graphs: http://pythonprogramming.net/matplotlib-styles-tutorial/
Change your user-agent, done. Tutorial on this specific part, skip to about half way through: https://www.youtube.com/watch?v=5GzVNi0oTxQ
Well, I do appreciate you reminding me that I'm coming up on 30 years since I wrote my first program, so thanks for that, "champ". For what it's worth, if you think your "16 years experience" exempts you from being criticized or given advice... well, heck, keep on truckin'. It's your life. The rest of us will just keep evolving without you.
I use a micro web framework like Bottle or Flask and map functionality to URL endpoints...then I write the UI in HTML/JS/CSS
They built their own async web framework: [tornado](http://www.tornadoweb.org/en/stable/) &gt; Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.
FriendFeed was built using python. They created Tornado (http://www.tornadoweb.org/en/stable/)
If you don't understand why unit tests are a good idea, then yeah, I'm not surprised you view all the correct answers here as "bullshit".
Thanks for that, big help, and a much better way of doing things.
FYI: /r/RTLSDR
Not that your post isn't welcome here, but /r/redditdev is *usually* more responsive to PRAW questions. :)
That really does depend, which is why I asked if OP had a particular reason for installing Anaconda. Virtualenvs are absolutely delicious, but for many (if not most) researchers, they're an unnecessary complexity. The fact that OP is ostensibly new to Ubuntu suggests that apt-get might be both simpler and better for him.
Lol. PHP 5.5 is the current version, and 5.6 is right around the corner. &gt; so all these years how those guys used to testrun their code? Apache? Well, the thing with PHP, it always come in a full stack package for developers. The package usually has PHP + Apache + MySQL. So once the package is installed, you actually had a full running server on your environment. That's how most people developing in PHP used to do it. Examples of package: EasyPHP, MAMP, WAMP, LAMP. And with PHP, you just drop your code in the directory and voila. 
I suppose, but I feel if you're going to learn something, learn it the right way first to save future headaches.
I uninstall python packages by destroying the whole virtual environment and recreating it from scratch without the package I wanted gone. Works just fine.
I don't use virtual environments, but yeah, just delete the package from Python/lib/site-packages. It's not like anything is setting environment variables.
+1, I do it like this also.
Can't believe you neglected to mention using the new built-in xkcd style :P http://matplotlib.org/users/whats_new.html#xkcd-style-sketch-plotting &gt; To use it, simply call matplotlib.pyplot.xkcd() before creating your plot. [stove ownership](http://matplotlib.org/mpl_examples/showcase/xkcd_00.png) 
You've proven yourself quite the dumbass in your replies to this group of posts. PHP may be the proper place for you. 
&gt; Any particular reason you're installing the anaconda stack? Anaconda is the best stack for Python, especially if you are doing scientific computing. It comes with many packages like numpy, scipy, matplotlib installed. These are hard to install, even on Linux (and very painful on Windows). The problem with apt-get is that you may get a version that is a year or more old. I always use Anaconda, on both Linux and Windows, and adding packages is a breeze. And you don't even need sudo access.
&gt;These are hard to install, even on Linux (and very painful on Windows). No they are absolutely not. Come on... If the apt-get versions are too old, it's just a matter of doing `pip install &lt;packagename&gt; --user`. No sudo access needed here, either. Anaconda is a veritable godsend under windows, but it's hardly necessary under Ubuntu. It's not bad under Ubuntu either, but if OP is having trouble with it, apt-get/pip might just be a whole hell of a lot easier.
I think he's having problems with the Ubuntu launcher, not Anaconda. These problems would remain even if he used pip.
That's brilliant. Thanks!
Thanks for your response. You're right that I made a subjective statement about the nonscalar units, but I have read the astropy documentation. I'll show an example and let the reader decide which is more straightforward. In astropy: &gt;&gt;&gt; from astropy.units import deg_C, K &gt;&gt;&gt; from astropy.units.equivalencies import temperature &gt;&gt;&gt; print(((0*deg_C).to(K, temperature()) + 100*K).to(deg_C, temperature())) 100.0 deg_C In natu: &gt;&gt;&gt; from natu.units import degC, K &gt;&gt;&gt; print(0*degC + 100*K) 100.0 degC In astropy, this approach raises an error: &gt;&gt;&gt; print(0*deg_C + 100*K) ... UnitsError: Can only apply 'add' function to quantities with compatible dimensions and the error here is confusing (yes, that is subjective): &gt;&gt;&gt; (0*deg_C).to(K) ... UnitsError: 'deg_C' (temperature) and 'K' (temperature) are not convertible The astropy developers discussed Celsius (https://groups.google.com/forum/#!msg/astropy-dev/864SyzENqAY/7NLXOg33TFoJ), but it seems they decided it was low priority. That decision is in the context of astrophysics though. Yes, in astropy units and quantities are decoupled, i.e., a unit isn't factored into a quantity. That's my point. &gt;&gt;&gt; from astropy.units import km, m &gt;&gt;&gt; (1*km).value/(1*m).value 1.0 I'm not suggesting that users should use the value attribute this way, but I'm pointing out the internal structure. Since the value of a quantity doesn't include the unit, it's necessary to do conversions whenever addition or subtraction uses mixed units. From quantity.py in astropy.units: &gt; If the ufunc [(universal function that performs the core operation)] is supported, then we call a helper function (defined in quantity_helper.py) which returns the scale by which the inputs should be multiplied before being passed to the ufunc, as well as the unit the output from the ufunc will have. natu literally follows the statement by BIPM (*The International System of Units (SI)*, 2006): "The value of a quantity is expressed as the product of a number and a unit...". Since the value of a quantity includes the unit, intermediate conversion isn't necessary. &gt;&gt;&gt; from natu.units import km, m &gt;&gt;&gt; (1*km)._value/(1*m)._value 1000.0 No, everything I mentioned is not in astropy. Yes, astropy can convert between unit systems, but it isn't system-independent for the reasons above. I don't see in the astropy documentation that it's possible to "turn off" quantities and still get the core functionality with floats instead. I haven't meant to bash astropy.units. It is a well-designed, very well-coded, and mature package. I've just meant to point out that natu takes a different approach, which has its merits.
In the end, I will be covering everything that's in the mega tutorial plus Blueprints, test driven development, angular, postgres, integration testing, automated deployments, travis ci
If you are into math you could try [Project Euler](https://projecteuler.net/)
Hmm, I'll check out apt-get and virtualenv. Thanks guys.
Haha, nice. Thanks for sharing, did not know about this one!
converting to python 3, redis
FYI this functionality will be included in the next version of matplotlib (1.4).
Hehehe I've used that at work to great effect
You try installing numpy with MKL on linux (or other platform of your choice) and then come back and talk about how easy it is. This happens in one command with conda. If you're doing numeric work this alone is enough reason to use anaconda because seriously the MKL is just that good.
phpunit
A nice feature in bs4, is that the find_all method will also let you a use attribute=True argument. So a slightly modified version of your example: links = [] for i in res.find_all('a', href=True): href = i.get("href") if href.startswith('/wiki'): links.append(href) print links List comprehension: links = [a['href'] for a in res.find_all('a', href=True) if a.get('href').startswith('/wiki')] EDIT: This was supposed to be a reply to http://www.reddit.com/r/Python/comments/2d2ida/how_do_i_remove_links_from_the_list_that_dont/cjlf4zw - but I managed to mess that up :\
why? do you run your production code as root?
Are you sure that your program is crashing? Those look like warnings not errors to me which usually don't crash your program. I currently am trying to fix these two warnings (I'll let you know if I figure it out), but my program is still working, it's just annoying seeing those two warnings pop up each time around.
Pretty sure. http://i.imgur.com/OUdjYb0.png
well, I'm just asking because at the very end of my program is when those two lines come up and although it seems like a crash, it did everything it was supposed to. And from what I've read, it seems like most people were able to successfully ignore it. Strange if it's actually crashing your program halfway through though
 links = [link in links if isinstance(link, str) and link.startswith("/wiki")] This removes all non-strings and all strings starting with "/wiki".
Yes, this is possible.
My bot was supposed to comment, it didn't, so it crashed. Strange.
What thing do you want to activate when a button is pressed? 
The program seems to be running fine. Your expectations about what it would do might be off.
Where is the movie now? Is it on Youtube? Vimeo? Your apple TV? A theater in Hoboken? 
If it's local, you'll probably want to follow the steps in this article, and use the HTML5 video player features to show the video, and Javascript to control the starting / stopping, etc. http://msdn.microsoft.com/en-us/library/ie/hh924823(v=vs.85).aspx You might need to move the video to the folder where the Django app is located on your computer. If the Django app is on a server somewhere, and the video is on your computer, then no, you can't play it with a button on your site, at least, not unless you upload the video to the server. 
It was supposed to comment and it didn't. Although it had worked once before crashing before.
Suggestions 1 and 2 can be replaced with "Don't try to teach python 2 and 3 at the same time." Suggestions 2 and 3 are both eliminating confusion about a simple concept by replacing it with a much more complicated concept. This seems like a very poor choice.
Use the library BeautifulSoup
I really need to ask, how is rsync not a backup solution? I swear it's an honest question, I use it and it's ridiculously fast and works exactly the way I would envision a backup solution. So how is it not? 
Have a look at the link.
This is not a crash. In general, if there is no [stack traceback](http://en.wikipedia.org/wiki/Stack_trace) printed, the script hasn't crashed. Given your comments on how the bot is failing to comment, I suggest stepping through the program line by line using [pdb](https://docs.python.org/2/library/pdb.html) to see if your control flow is having a different effect than you thought it should.
Uhm, the Python IDLE is a perfectly valid way to write and run small pieces of Python code. The IDLE does in fact highlight which line the error is on, notice the red highlight on that `print` function? 
Wow, thanks so much. My code is well over 50 lines (pythoneers going "huh, he haven't seen anything yet") so I am really happy that has been noticed. I feel really silly now
I tried it out for a problem I had when using requests and bs4 manually was too much trouble. Got it worked out far less code than expected! I would use it sparingly.
Take a look at this: [Python web scraping resource](http://jakeaustwick.me/python-web-scraping-resource/) I'm pretty sure it will be helpful.
Yay, I don't have that bookmarked (which means it's new!). :P This one's complete, but I'm sure I'll be doing more scraping in the future. Thanks, I'll take a look!
&gt; When terms such as "dependency injection" and "singletons" start popping up A singleton is not a java thing. It's a standard and well known [object-oriented design pattern](http://en.wikipedia.org/wiki/Singleton_pattern). If Python supports object-oriented programming, there is absolutely no reason to shy away from the programming paradigim's best practices, particularly for such irrational and incomprehensible reasons. 
1. Find a network library of your choice: Twisted/Requests/Urllib2 or something. 2. Investigate how the Moses POST-forms (in the GUI) are handled and their response sites, including what fields the forms require. 3. Make said POST requests in your app using your network lib from 1. Example using http://demo.statmt.org, this form relies on the following fields: *input*, *sysid*, *debug*, and *help*. import requests post_params = {'input': 'my text to translate', 'sysid': 'en-de', # translation option 'debug': False, # unchecked 'help': False} # unchecked resp = requests.post('http://demo.statmt.org/', post_params) # handle the response from resp.content here You can wrap the Moses POST-endpoints inside python functions that takes arguments related to the POST-fields, to give you a clean API/Library you can use in your own APP. I hope this is clear enough to give you a starting point.
GUIs are fairly non-trivial. You'll need to understand concepts like inheritance, callback functions, event loops, etc. in order to begin. Qt is pretty popular now since Redhat/GNOME destroyed GTK. You will be hard-pressed to find anything better. It has tools like Qt Designer for creating all your windows &amp; elements and saving into a cross-language compatible format (so you could, later on, re-implement slow core components in C++ and still use exactly the same UI files you've been using in Python). It is a very mature toolkit, and is very cross-platform. That being said, very few are creating thick clients anymore. You may find it suitable to write your backend stuff in Python and leave the frontend to HTML5/CSS/JS. A prime example of this is [Splunk](http://www.splunk.com/) which operates perfectly fine on the "desktop" in this way. Note that you can also have the best of both worlds by using Qt's embedded HTML widget as your "browser" to render the otherwise web-based interface. 
I have started to learn PySide from your tutorial on Youtube. Now I have nice Job as python PySide programmer. I'm writing frontend for ERP. So, thank you Bo :) 
You can probably easily adapt this to only get images: https://code.google.com/p/tulip/source/browse/examples/crawl.py 
That seems like overkill for what I'm doing. I wrapped up what I needed in about 100 lines of code. If you click the post link, the complete code is posted in my original post on /r/learnpython.
 $ wget --recursive --domains="*.megatokyo.com" --wait=5 \ --limit-rate=20K -A jpg,jpeg,png,gif -nd -P . --no-clobber megatokyo.com Done.
That's great, but I don't see how it relates to Python.
I understand your thrill from reinventing the wheel, but maybe you should have confined it to /r/learnpython. 
C. Learning c will give you a better understanding of what happens under the hood, It is also a small language so you'll be able to pick it up fast. If you know python and c you will have a strong foundation and will be able to solve most problems. From there you can choose whatever you'r interested in, be it functional programming, web or whatever floats your boat. 
You know, while multithreading is the weak point of python, it's still totally doable in python. You just have to pay more attention, you don't get 'free' multithreading like you do in a functional programming language. Python can also be fairly performant. You have to make decisions about *how* performant you need your application to be. Hardware is cheap, engineers are expensive-- If you write a multi-threading load balanced application that will run on 4 servers in python but 2 servers in Java, will the offset in engineering cost make up for the difference in engineering time between java and python? The other question is, are you as good as python as you can be? Do you know all the little nuances of python and its interactions with the rest of the programming stack? If you work on the web with python, are you familiar with the various templating languages? Are you familiar with the Django and SQL Alchemy orms? How about direct SQL using something like psycopg2? If you're a sysadmin, are you familiar with how to integrate scripting with nagios and munin? Do you know how to deploy and integrate with a LEK stack? How about Sentry? Are you familiar with the AWS/Google apis? If you're an application python developer, can you correctly put together an installer? How about a python installer that uses a .pyd file? Python for windows, do you know how to use registry settings? How about COM/DCOM? Scientific python? Numpy/scipy/matplotlib? Data analysis using pandas? I guess my point is, even vertically within the language, there's a lot to learn. While learning a new programming language is nice, you still have to learn everything noted above for whatever language you'll choose to learn. If you're missing some stuff in your main rubric though, you should probably take the time to learn it in python before learning it in another language.
Haskell: Similar syntax, meaningful whitespace indentation, and list comprehensions galore. Come for the syntax and stay for the semantics. Haskell is a completely different way to program (pure functional, static, compiled, all recursion without iteration). It is the opposite of python while looking as clean as python.
I've been using Go as my secondary language for about 18 months now.
If you're looking for experience just to cover the areas where python isn't the best choice, I'd recommend Java. It's sufficiently different from python that use cases for the two don't overlap much, and while it's not the greatest programming language available, it has a fantastic ecosystem of available libraries, tools, documentation and communities, much of it open source or otherwise free to use. If you're looking for experience to improve your resume, I'd go for something new and growing. With java (meaning Java EE web applications), you're competing with (probably) hundreds of thousands of developers with 10+ years of experience. It's pretty hard to stand out. There's no one with more than 5 years of experience with google go. There are very few with that much experience with Android, for which demand is growing rapidly. Purely functional languages like Haskell and Erlang, and especially the Lisp family (Clojure) have been around for ages. If they were ever going to break through, they would have done so by now. 
Not actually answering the question, but have you considered PyPy if your aim is performance and multithreading? 
You can have a look at the [source to pywavelets](https://github.com/nigma/pywt), assuming you just want to see some code implementing wavelets.
I was looking for something a little simpler than hunting through an entire package, but at least I can use this as a backup plan. 
If you do web stuff, it doesn't hurt to learn Javascript. If you do backend stuff, you might want to learn some C/C++.
I like Rust, so far. It's compiled and nearly as fast as C, while being.memory-safe, informative errors and has a lot of the good bits of functional languages like Haskell without the awful bits. However, it's early days so still a bit unstable API wise. Haxe is also worth a look for flexibility: it looks a bit like Java (vomit) but it compiles to any or all of C++, Java, C#, JS, PHP, or Python (2, I think, so legacy only?), as well as a mini language called Neko that's handy for testing and actually fairly impressive in its own right. So extremely flexible but comes with two caveats: Java style and poor documentation. Lua plus C are a solid, pragmatic combo though. C is torturous to write but as fast as it gets, and Lua is easy to write and interfaces trivially to C. I'd written my first C extension to Lua in the same day I started trying out Lua! So, write the performance critical bits in C, interface to Lua, and use Lua (and the lua OOP library "30log") to do the main application. Lua isn't as good as python design wise but it's fsster, easier to extend, and minimal-meaning-simple-to-learn.
I'm having a slow Sunday, taking a look now. Is anyone on the IRC?
I watched a few of these, I actually quite like these. I think, especially when many files are involved, it's really helpful to have a video reference. Thanks for sharing these. I'll point people your way! Keep up this great series!
My pleasure!
Not to mention that C and Python already complement each other nicely -- it's a tried and tested combination. Just look at Cython.
IMO Dont stop at C. C++ is definitely worth learning. With C++11, 14 and 17 standards C++ falls much more into line with Python as a modern language with higher levels of abstraction. Most notably in my opinion function objects and lambdas in C++11 and futures/monads in 17 will bring C++ functional programming into the light which compliments functional concepts in Python nicely. 
Honestly, the same thought comes across pretty often for me too. But the quote from Donald Knuth always comes to mind. &gt; We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. Python is in a lot of ways the 97% (maybe 70-80% realistically), where it's more important to get things done and shipped and worry about optimizations when they really matter. But yes, if I didn't really answer the question. If I had to choose, I'd go with Go. It's definitely is C "inspired", has a small stdlib and very easy to pick up.The model for concurrency through `goroutines` is also similar to python `coroutines` and `generators`.
Nokogiri is the go to baby!
Golang. Its much more low level than Python and will let you do things Python won't, but it also doesnt have that feeling of having to do everything yourself that you get with C, as Go's stdlib includes so much of what you need for building apps these days. You left out your intended use case but you mentioned back-end/server-side dev in your comparison to JS, and that really is where Go thrives. Doing things like making a multi-threaded HTTP backend that spits out json is so quick and easy, and you don't have to leave the stdlib to do it. 
I'd double down on Java. It's an industry standard, faster and better multi threaded than Java, with good library support, and the Jython compiler will let you combine with existing Python code if you need to. The two compliment each other all well.
&gt; You know, while multithreading is the weak point of python, it's still totally doable in python. You just have to pay more attention, you don't get 'free' multithreading like you do in a functional programming language. That applies for I/O-bound concurrency. If your problem is CPU-bound, the GIL means that it doesn't matter how many threads you throw at it.
Lambdas and Monads in C++? Interesting to know...
Personally I'm going for Javascript first, then C, then probably C++. Javascript is the frontend language of the web, it can work in concert with Python in any web application. Also, knowing Python, picking up Javascript was incredibly easy. Objects? You mean Dictionaries?? No? Objects, ok ok. And then C because I want to learn how to make C extensions for Python.
POST is a [HTTP](http://www.w3.org/Protocols/rfc2616/rfc2616.html) verb. When they say you need to "find a network library" they mean "choose a network library" and install it. In their example they are using the [requests](http://docs.python-requests.org/en/latest/) library, which is one of the nicer ones. To install it you simply need to type `pip install requests`. Once it's installed you can use it to do what was outlined above. `requests.post` makes a POST request to the specified url with the parameters you pass being `application/x-www-form-urlencoded` automatically. Finally, you need to parse that response and use it in your own GUI application.
Dashboards are simple... or should I say, start out as a simple display of charts and summary tables describing information as coherently as possible. So it means you just place your chart images and other info in a neat webpage (see this link for inspiration https://wrapbootstrap.com/tag/dashboard). Once you get this up and running, user requests would guide you to move towards complexity. As far as a suggestion of creating a website is concerned, I believe you should give it a serious thought. It would be much more maintainable and extendable for your complex tasks. But thats exactly what you should take into account: not every user request can easily be modeled in your application. This could be more daunting when you are inexperienced and/or non-knowledgeable in that area. I believe you must have a certain amount of experience or get someone who can help you out once things go out of hand. User interest/confidence in you app quickly dissipates if you can't give them what they want. All the best. 
Umm, I don't quite see the problem. What issues arise due to STM? 
I had an RSS feedparser that I had previously written in Python, which I ended up re-writing in Go. It took about 1/3 the total lines, and once it was built, it was crazy fast. I have also been working on some other projects, mostly replacements of my own internal Python projects. A small game engine, a home budget tool, a homebrewer's recipe tool, things of that nature. I have also been writing (when I have free time) my own implementation (in Go) of a BDD testing framework a la one of my own favorite daily-use (I am a tester by trade) tools: [Behave](https://github.com/behave/behave). Basically, Python has been my de facto language for a decade. And I still use it professionally every day. I love Python. It's a great language. But, it's always good to be learning; so I learned Go.
http://bartoszmilewski.com/2014/02/26/c17-i-see-a-monad-in-your-future/ Blog by one of the big players on the C++17 ISO standards. Lambdas were added in C++11 and rounded out in 14. Those standards are already published 
...yet you don't actually mention it in the article.
Generally execution is even slower, JIT is slower, memory usage much higher, poor handling off OOM situations, rewritten GC, destructors are broken, and processes will die after a set amount of time.
c++. why? - 1) extensions can be easy written in c++ for python 2) it allow you to do the same lowlevel stuff as c 3) you can always switch back to C 4) major amount of serious software are written in C and C++ 5) you will be able to read code of cpython and standard library parts implemented in C. 6) there are plenty of positions with requirements of c++ and python This all I write from practical side of view. If you want some theoretical knowledge then you can try some lisp or haskell.
Actually PyPy STM has been making some great progress on this. Currently it's limited to 4 cores, but has done a lot to increase efficiency with minimal effort by the program developer. 
Sorry, but please don't look at Java. I know when the Python code I'm reading has been written by a Java developer because it is awful. It seems that the coding patterns that prevail in Java development are not compatible with Python. /u/razzmataz has given the best advice here: http://www.reddit.com/r/Python/comments/2d4yp4/suggestion_for_a_language_to_complement_python/cjm6itg EDIT: Added some advice to my criticism.
Wow, talk about taking a bad idea to the extreme.
Yup, thanks for the help. New OSX instructions are up at http://syncplay.pl/guide/install/#OSX for people to test.
Maybe because rdiff-backup is neglected and buggy?
It's making progress, but it's definitely not there yet.
I'm currently trying to understand the implementation. I kind-of get the math, but I learn best from examples. 
This looks like a pretty good starting library, which seems to be exceedingly well documented. I don't have any first-hand experience in writing a bot though otherwise. http://praw.readthedocs.org/en/latest/pages/writing_a_bot.html
I wouldn't worry too much about the C/C++ crowd. If you don't have a use case and just want to widen your horizons, I'd go for something that's as different from Python as possible. Haskell is fun, Scala, Clojure and OCaml are some other "in" functional or semi-functional languages.
Well, I'm gonna start by providing some information resources you can start reading, as these will likely do a better job explaining than me. First a bit on POST and GET methods: http://www.w3schools.com/tags/ref_httpmethods.asp and on HTTP: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol As for network library: you need a library in python designed for using the internet, like fetching web-content, that's what a network library will help you with. You can read about the python *requests* library, I used in my example, here: http://docs.python-requests.org/en/latest/ 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Hypertext Transfer Protocol**](https://en.wikipedia.org/wiki/Hypertext%20Transfer%20Protocol): [](#sfw) --- &gt; &gt;The __Hypertext Transfer Protocol__ (__HTTP__) is an [application protocol](https://en.wikipedia.org/wiki/Application_protocol) for distributed, collaborative, [hypermedia](https://en.wikipedia.org/wiki/Hypermedia) information systems. HTTP is the foundation of data communication for the [World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web). &gt;[Hypertext](https://en.wikipedia.org/wiki/Hypertext) is structured text that uses logical links ([hyperlinks](https://en.wikipedia.org/wiki/Hyperlinks)) between [nodes](https://en.wikipedia.org/wiki/Node_(computer_science\)) containing text. HTTP is the protocol to exchange or transfer hypertext. &gt;The standards development of HTTP was coordinated by the [Internet Engineering Task Force](https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force) (IETF) and the [World Wide Web Consortium](https://en.wikipedia.org/wiki/World_Wide_Web_Consortium) (W3C), culminating in the publication of a series of [Requests for Comments](https://en.wikipedia.org/wiki/Requests_for_Comments) (RFCs), most notably RFC 2616 (June 1999), which defines HTTP/1.1, the version of HTTP in common use. &gt;==== &gt;[**Image**](https://i.imgur.com/sCnAkC1.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Internet1.jpg) --- ^Interesting: [^Secure ^Hypertext ^Transfer ^Protocol](https://en.wikipedia.org/wiki/Secure_Hypertext_Transfer_Protocol) ^| [^HTTP ^Secure](https://en.wikipedia.org/wiki/HTTP_Secure) ^| [^List ^of ^HTTP ^status ^codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) ^| [^WebDAV](https://en.wikipedia.org/wiki/WebDAV) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjmdj44) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjmdj44)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
hmmm no mention of Ruby ?
Multithreading has always been sort of a weak point of python... you can do it but it's not super elegant. Elixir has been a fun language to learn that does that sort of thing really well. 
Do you have a link for that?
Version control systems are better at handling a lot of files than they are at handling files containing a lot of independent data. This also allows you to gitignore sensitive settings, while storing dev defaults for other settings in your version control system. Finally, this is useful as a dev tool if you store your settings in, say, your uWSGI settings in prod.
&gt; I have no problem writing decorator itself, but I struggle to write it in most elegant way possible and I would appreciate suggestion to do the thing right. What have you got so far?
if you are doing web dev, you probably are not going to be able to avoid javascript for too much longer. clojure would be good for you perhaps, since you have java experience. elixir looks promising. a higher level language that runs on the erlang vm, good interop with erlang libs including OTP, so making distributed fault tolerant scalable systems is even more possible now. it's still fairly new though. 
Would be interested to get some feedback on that. I finally sat down and implemented it after I have been using the same pattern for a really long time already but manually. After installing pipsi you can do things like that: pipsi install httpie And it puts the `http` binary as symlink into `~/.local/bin` and all of the other things that httpie installs (like internal dependencies) are well isolated in a virtualenv.
I think it can be useful, but only contextually. I mean, say you have a company intranet site with data that updates regularly and needs to be exported to Excel? Do you want to do that manually all year? Or do you want to spend an hour or two working up a script that will do it automagically for you in a few seconds? I'm no hacker (hell, I'm barely a programmer yet), but I imagine that scraping site data can be important and useful for information gathering. There's a reason "big data" is a term being thrown around. Data collection is the new big thing, so it's getting a lot of attention. Plus, scraping seems to be a good tool for cross-learning between languages.
cheers!
I'm skeptical of the entire line of thinking that because we need to keep passwords out of version control we should keep it in environmental variables - populated by text files. Because I normally keep passwords encrypted in a password vault, not in a text file anyhow. Once you take out the sensitive data, the rest of the argument against config files seems pretty unconvincing.
But scraping is collecting data from sources that aren't intended for what you are doing. This sounds like a very gray area. I can access the database of the intranet site myself. I can configure it to get me the data in a clean way (CSV, XML, …).
It's not just sensitive data, there's also the stuff that is just system-dependent. But besides that, having it in a password vault is fairly useless since now you've just changed the problem to giving the application the vault password, instead of the DB password.
clojure (or any sort of lisps). it'll help you write functional code in python better.
Fair enough. 
A major problem I have had with virtualenv is using matplotlib because getting a visualization backend such as PySide or pycairo inside a virtualenv can be a real pain. As a result matplotlib is installed system-wide. How well does pipsi work for matplotlib?
I wanted to learn how to make Android apps so I started learning Java. I absolutely love it so far.
If you didn't start with C then don't go there. Stick with Python. There are so many libraries that you don't have to touch any other language in your lifetime. And even in your children's. If you really insist on picking up another lang, choose Javascript.
Seems similar to [autoenv](https://github.com/kennethreitz/autoenv).
PyPy is a good reason to go pure Python. Not saying the OP isn't gonna have a hard time, but it's still worthwhile (at least for the learning experience).
I guess by raw X programs you are referring to [Motif](http://en.wikipedia.org/wiki/Motif_(software\)), which I had in my mind when in my original comment. My point is that the window system (whether X or Wayland) should provide enough functionality that there isn't a need for a widget toolkit layer on top of it. (rant) Actually, TBH, my point is about the level of proliferation of the categories of graphical stuff which IMO shouldn't be so. I mean look at this: - window system - widget toolkit - window manager - display manager - desktop shell, or launcher, or panel, whatever (I'm not even sure if it's the same thing or different) I mean for heaven's sakes, what is that? 
That is not a problem with virtualenv, pipsi or pip but a problem with PyCairo and libraries like this. Someone should spend some time making them installable without going through crazy dances.
Is there are reason to use a decorator here instead of just calling a backup method on the db object? Also, don't worry about being elegant. Get it working, then make it look good.
I didn't see you mention this, but Jython. It'll allow you to write Python that compiles to Java. Figured I'd add that since I agreed with your response in regards to the OP.
Something like `pip list --outdated` which shows me all the `pipsi` things that can be upgraded would be great.
I'm not sure exactly what you're getting at, but if you read the source of OP's program, you'll see that its obviously targeting win32. rdiff-backup is buggy on win32. And the latest commit to the sources if something like 4 years ago.
If you already know some Java and are curious about the functional paradigm then Scala is a good fit.
May want to add that the ``source activate syncplay`` is **required** before running syncplay because the Python dependancies are installed inside a conda environment (which keeps them isolated). So you must run that command before running the client command.
I am quite happy with PySide. I am involved in the Syncplay project, and last year I moved us over from GTK to PySide (which we're running with Python 2.7 and Twisted). I decided on a QT-based solution as it seemed simple, powerful and cross-platform, and went for PySide over PyQT for licensing reasons. For something simple it is pretty easy, and it was not too hard to pick up the basics. It does have a bit of a jump from the features that are easy and built-in to those that require a more complex processes of taking over from the default behaviour, and you can have inconsistencies between platforms if you are not careful, but it has served Syncplay pretty well.
Cool, but just further highlights how silly it is that Python is still doing global installs as the default.
I really like the concept. I use lots of python tools such as `csvkit`, `pawk` and `ranger` which are perfect to install with this tool. My feedback: 1) I would use -f or --fail for the curl download of get-pipsi so that python won't try to interpret error responses. 2) When I try to install pipsi using `get-pipsi`, I get: Installing pipsi You already have pipsi installed sh: 1: pipsi: not found This is because &amp;&gt; suppresses the error code. The fix on my end seems to be replacing `pipsi &amp;&gt;/dev/null` with `pipsi &gt;/dev/null 2&gt;/dev/null`. Anyway, that's small stuff. Nice tool, thank you!
There's [already](http://pypy.org/download.html) a version of PyPy targeting Python 3 (still a WIP though). &gt; quite slow compared to native code Well a goal of PyPy is to approach native speed and the gap is narrowing. &gt; consider is wrapping C libraries using ctypes instead of writing everything from scratch The OP did say he doesn't want to use pre-written libraries that do everything for you. 
This is exactly it, it may sound trite but the various languages are just simple tools.
Maybe if your method is potentially that dangerous that you need a whold db backup everytime it is called rethink what the method does. Backing up a whole db at the time of the call does not scale at all. Can you use a transaction which can be easily rolled back on error? Or dont do anything destructive in the method, design the db in a way that just adds data, sets state to "deleted" or make copies of the manipulated datasets... something like that. If you insist on the decorator you need to think about locks and multiple access to the db. One does not simply backup a live database ;)
Why would I choose C++ over C#, or vice versa?
I think I get what you are trying to do here. Forgive me if I am way off but it seems that conceptually the solution is not too bad. So the decorator function might look something like this: def backup_decorator(back_up_comment): def wrapper(function_to_be_wrapped): def wrapped_function(*args): # some code to back up the database ... # do what ever want with the back_up_comment and # the info gotten from the back-up return_val = function_to_be_wrapped(*args) # I'm assuming a lot here about your return values # but you can do whatever you like with that return return_val return wrapped_function return wrapper @backup_decorator("Backup comment with info {info1}, {info2}") def decorated_method(self, ...): I think that is a relatively python way of doing what I think you want. Check out these great articles on decorators for the real dope: http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/ http://www.artima.com/weblogs/viewpost.jsp?thread=240845 
Cheers. Is the current re-wording acceptable?
C# is largely windows/microsoft, Objective C is largely apple/iOS. Keep in mind neither of these are similar to C++. C++ is the evolution of C making it possible to get C performance with higher levels of productivity and abstraction. Why choose C++ above all else? Mostly because almost everything is written in C++ (or C, of which C++ is a superset) or was at one point written in C++. Everything from chunks of the linux kernel, to the windows kernel, to compilers for other languages. For example, the Python interpreter, Go compiler, D compiler etc are all written in C/C++. The reasoning for this is two-fold. First, C++ is very perfomant and gives alot of control over low-level operations which makes it ideal for building things that need to scale well (i.e. compilers etc). Second, most languages cannot compile themselves. Because of C++'s age and maturity it's one of the few languages who's compilers can compile itself making it a totally self sufficient language. http://en.wikipedia.org/wiki/Bootstrapping_(compilers) Other languages can compile themselves today but C++ was there first so many languages were originally written in C++. TL;DR : C++ is important because of the massively widespread use of it. It's everywhere and that's really what makes it important to understand. 
For completeness, a rather late reply: sorry, I missed that you were asking about IPython. If you're on a recent Debian-based Linux, there are separate packages for `ipython3` and `ipython3-notebook`. I believe Fedora has similar packages. Otherwise, you can use Anaconda, or `pip install ipython` using the pip on the relevant Python.
Very cool! Seems like you could probably accomplish the same thing with [tox](https://testrun.org/tox/latest/) but this is more geared for deployments rather than dev/test.
Perhaps a compromise would be to find a tool that reads/writes just one lossless format to raw binary and do the circle, line, text ... functions on top of that. You could even use (gasp! I hate saying this) MS paint to convert an image to a specific format, say 16-bit color (no palette) BMP manually. This is a relatively simple format which you would have some chance of converting yourself to raw data. I am tempted to spend a few hours on this myself. If I do I will post some code.
why .local instead of .pipsi?
Did you try googling "Python Bluetooth?" It leads you to two libraries, one unmaintained, and a stackoverflow link that talks about how python 3.3 supports Bluetooth natively through sockets. Googling is a major step to learning to program, and its much faster than waiting hours for some guy on reddit to tell you to do it.
I found a bug, this might help: http://en.wikipedia.org/wiki/Image_file_formats 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Image file formats**](https://en.wikipedia.org/wiki/Image%20file%20formats): [](#sfw) --- &gt; &gt;__Image file formats__ are standardized means of organizing and storing [digital images](https://en.wikipedia.org/wiki/Digital_image). Image [files](https://en.wikipedia.org/wiki/Computer_file) are composed of digital data in one of these formats that can be [rasterized](https://en.wikipedia.org/wiki/Raster_graphics) for use on a computer display or printer. An image file format may store data in uncompressed, compressed, or [vector](https://en.wikipedia.org/wiki/Vector_graphics) formats. Once rasterized, an image becomes a grid of pixels, each of which has a number of bits to designate its color equal to the color depth of the device displaying it. &gt; --- ^Interesting: [^Comparison ^of ^graphics ^file ^formats](https://en.wikipedia.org/wiki/Comparison_of_graphics_file_formats) ^| [^Exchangeable ^image ^file ^format](https://en.wikipedia.org/wiki/Exchangeable_image_file_format) ^| [^Tagged ^Image ^File ^Format](https://en.wikipedia.org/wiki/Tagged_Image_File_Format) ^| [^BMP ^file ^format](https://en.wikipedia.org/wiki/BMP_file_format) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjmm4cm) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjmm4cm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; But scraping is collecting data from sources that aren't intended for what you are doing. Who are you to judge intent? Scraping is just collecting the data; how that is done to whom and for what purpose can have a myriad of answers, most of which are white. &gt; I can access the database of the intranet site myself "the" database of "the" intranet site exposes your lack of familiarity with any sized deployment worth scraping.
Oh, sorry, thought you wanted to learn. My bad. 
...Not if you ever want to deploy your scripts/notebooks or share them with people who are not using Ubuntu. Vendor systems like apt and yum tend to only track a single version upstream, and then only support installing a single version. Anaconda provides much more robust virtual environments for packages with native code (C/C++/Fortran) than virtualenv, because all of the binary packages are built to be relocatable. 
&gt; If the apt-get versions are too old, it's just a matter of doing pip install &lt;packagename&gt; --user. Which version of gfortran, clang, libalsa, openGL, and openCV do you need to properly build scipy, VTK, pyaudio, etc.? What interaction and incantations of apt-get and pip and setting paths and environment variables and editing CMake files do you need to build *one specific* version on your local machine? This is the problem that has plagued the scipy community (including, yes, the linux pros) for a decade. Anaconda solves this. 
A lot of the design patterns in Java are invented as workarounds for things that Java doesn't directly support, such as the lack of first-class functions. Python's abstractions are much more flexible so many things can be done in a much more succinct way. The dynamism provided by Python also helps since your "meta"-level code is just ordinary code.
&gt; It's not just sensitive data, there's also the stuff that is just system-dependent. Sure, but now we're talking about config files that can live in a version control environment. And though there may be ten or even fifty different independent attributes, I seldom see a need for more than just a handful of configs (for dev, stage, prod, standby, etc). &gt; But besides that, having it in a password vault is fairly useless since now you've just changed the problem to giving the application the vault password, instead of the DB password. Well, not really: now the password is stored within an encrypted file. Access to this file is through a service that can lock it down to ip ranges, a set of credentials, etc and only allow it to get what it has access to. Now you don't have 2500 config files floating around with passwords stored in plain text that you have to hope nobody checks into version control. I normally see the ssh keys get used for credentials since those are already locked down pretty well. While this theoretically isn't as safe as having someone type it in by hand and keep it in the applications memory, it eliminates: * having a human keep it in a plain-text file so that they can reenter it when needed * having your application down while waiting for a human to enter it * keeping it in a plain-text file so that when your application restarts it can automatically read the password into memory 
Rsync can definitely be used as part of a recovery solution, but it's not considered a backup solution by itself because it lacks important features: * Restore os, applications &amp; their configs to bare metal, or an extremely vanilla os * Store multiple versions of a file in case of media failure. * Store a copy of a file off-line, and ideally off-site: This protects against theft, electrical damage, flood, etc. * Keep a copy of your files for months after you've deleted them. * Provide a method for systematically restoring individual files, directories of files, or entire file systems. * Provide authentication &amp; authorization protection for your data. * Encrypt your data. Now a lot of the above is most important in protecting data more valuable than an individual's local media collection. If we're just talking about backing up your media - then Rsync could provide a reasonable solution.
Further to /u/dbakker's [comment](http://www.reddit.com/r/Python/comments/2d61f7/pipsi_a_wrapper_around_virtualenv_and_pip_to/cjmjofh), determining whether a command exists by trying to execute it and looking for failures is fragile and can mask other problems. I sent you a [pull request](https://github.com/mitsuhiko/pipsi/pull/2) that accomplishes that by walking the PATH variable instead. I also rewrote part of Repo.find_scripts to work without needing to subprocess another Python interpreter, and also the whole thing work with Windows. :)
Have you looked into mechanize?
I found pdf for bmp header format. Put it into a script but got tired after awhile; even a simple uncompressed format is not easy. Enjoy. """ https://criptoyseg2010.googlecode.com/files/bmp_format.pdf """ import binascii # =========================================================================== paletteSize = 0 positionTable = [ # Desc, location ['Identifier', 0], # "BM", "BA", "CI", "CP", "IC", "PT" ['FileSize', 2], # DW (double word) ['Reserved', 6], ['BitmapOffset', 10], ['BitmapHdsize', 14], # 40 (win), 12 (OS/2 1.x), 240 (OS/2 2.x) ['Width', 18], # pixels ['Height', 22], # pixels (see notes) ['Planes', 26], ['BitsInPixel', 28], ['Compression', 30], ['BitmapSize', 34], # bytes, 4 times number of DWs ['HorizRes', 38], # pixel/meter ['VertRes', 42], # pixel/meter ['Colors', 46], # number of colors/size of color table ['NeededColors', 50], # number of "important" colors ['Palette', 54], # sets of 4 bytes: BGR0 ] """ The location of the Bitmap is given by 'Bitmap offset' and is should be equal to 54+4*paletteSize Height: Scan lines Indicates top-down DIB *when* negative, valid only for NO Compression BI_RBG OR BI_BITFIELDS Bits in Pixel: 1 1 color palette has 2 values 4 16 colors palette has &lt; 17 8 256 colors palette has &lt; 257 Formats with color table in palette (size is in Colors setting): 16 16-bit high color BI_RGB, BI_BITFIELDS (see notes) 24 24-bit true color 32 32-bit true color BI_RGB, BI_BITFIELDS (see notes) Compression: 0 BI_RGB No compression 1 BI-RLE 8-bit 2 BI-RLE 4-bit 3 BI-BITFIELDS No compression 3 DW masks for R, G, B components Note: RLE entries in the bitmap are in encoded or absolute mode and not indexed. See reference pdf. Number of colors: Corresponds to bits in pixel, above. For 8-bit per pixel, 256. """ # =========================================================================== def getDec(inpBytes, inpStart, inpStop): x = inpBytes[inpStart: inpStop] sz = inpStop - inpStart r = [] pow = 1 dec = 0 for c in x: cv = ord(c) r.append(cv) dec += pow * cv #print ' cv {}, dec {}'.format(cv, dec) pow *= 256 return r, dec # =========================================================================== class BmpFormat(): # ------------------------------------------------------------------------- def __init__(self, inpFileName): self.filename = inpFileName self.imgDict = {} with open(self.filename, 'rb') as inpFile: self.header = inpFile.read(54) sHex = binascii.b2a_hex(self.header) for rx,row in enumerate(positionTable[:-1]): desc, pos = row xx,nextPos = positionTable[rx+1] if rx == 0: self.imgDict[desc] = self.header[pos: nextPos] continue dataHex = sHex[pos+pos: nextPos+nextPos] dataDecList, dataDec = getDec(self.header, pos, nextPos) self.imgDict[desc] = dataDec #print '{:14} at {:2}: {:20} {:8} {}'.format( # desc, pos, dataDec, dataHex, dataDecList) # ------------------------------------------------------------------------- def __repr__(self): r = 'BmpFormat {}\n'.format(self.filename) for k in self.imgDict.keys(): r += ' {:16} {}\n'.format(k, self.imgDict[k]) return r # =========================================================================== def exploreBmp(filename): bf = BmpFormat(filename) print bf # =========================================================================== if __name__ == '__main__': exploreBmp('bmpformat-256.bmp') exploreBmp('bmpformat-24bit.bmp')
For starters the original python had been written two years prior and was using external libraries, where the new work was pure STL Go. I found that once I managed to "wrap my head around" exactly how to do what I wanted in Go, it was remarkably succinct. The manner in which Go parsed the xml of the the rss feed was confusingly (read: nearly non-existent) documented, but very streamlined in implementation. Trust me, if I had just wanted to re-write the thing in Python I could have re-written it in STL Python in about three days (Go took me over two weeks due to lack of familiarity). I re-wrote the feed parser in Go as an exercise - I was pleasantly surprised with the result. I am surprised that Go has not had a bigger ground-swell as of yet. As far as speed of execution, once I had the compiled binary from Go, Python never stood a chance. Execution times were reduced by two orders of magnitude, if not more. 
You're looking for /r/learnpython.
You should check out selenium
.local is a standard install location
i did something similar so i could run python arithmetic and math functions from the command line. but this is much more complete and thought out. thanks!
Hi there. Thank you for your help. It really got the ball rolling for me today. I've managed to look at what it was outputting and figured out from the url it only gives me the following translation choices (I can do translations in these choices): English-&gt;German Czech-&gt;English German-&gt;English French-&gt;English Spanish-&gt;English I'm not exactly sure where these particular translation models came from. But anyway, I know Moses is meant to take in a parallel text pair and create a model grammar from source to target using it. Through the GUI on my home machine I can do that. But how will I upload the translation models I want to the site? For example there are a lot of people who teleconference from India with the startup I'm doing this for. An English-&gt;Hindi model would be extremely important. I might be able to create a parallel text corpus for the two languages, but how would I then be able to use it by calling to the url? I'm new to web app development so it's a little confusing right now.
As somebody who never can remember how to use awk, sed, grep, etc., I think this is awesome!
It installs with angry messages in virtualenv. Seems to work anyway, sans tab completion.
I use both. All deps are declared in requirements.txt. In setup.py you read that file and pass it to the setuptools configuration. Most libs I see do this. 
What's the advantage of this over environment variables? 
Yeah. I use Python every day. Despite working in a POSIX compliant environment (BSD), I never ever ever have to use awk, sed, etc. Grep, yes. Not the others. I'm always quickly writing Python scripts to batch rename files rather than have to remember which shit I need to quote because of filenames with spaces, whether to use ` or ' or " for stuff, etc. from glob import glob from shutil import move filenameList = glob('*.zip') for filename in filenameList: move(filename, newPath+'/' + filename) Rather than some kind of do for * in ls; put semicolon weirdness on some lines; not; others while; what the fuck mv some quotation mark " to ' and then ` awk sed your face meltdown 
and that is completely the reaction I would expect in /r/python. It is totally alright. Many tools exist for the same job. I think on the surface it is a great idea. I just already have my tools for those jobs. I would have to suggest that you take the time and look at them in the future. 
%r calls the repr method. %s calls the str method. a = 'cat\n' print '%r' % a &gt;&gt;&gt; 'cat\n' print '%s' % a &gt;&gt;&gt; cat 
I think ls | awk '{print "mv " $1 " /newDir/"$1}' | sh is much much simpler and quicker. Hell I don't even have to open vi &amp;&amp; chmod +x this way. I mean if you can't sed your face every now and again you better keep that beard trimmed and burning. For anyone with a halfway respectable linux beard knows the easy answer here. 
So it's pretty much an easy way to reuse code if you don't want to type the same string 1000 times or something like that?
If your files have spaces in them, doesn't it fail on that first $1 instance because you only quoted the second appearance? That's what I'm talking about. So many chances for this command line stuff that was written before spaces in files was a thing to break. The Python way is foolproof.
&gt; who uses spaces in file names People who have some sense of aesthetics. There's a reason people argue over camel case vs underscored variables: they're both super ugly and unsatisfactory.
This is great! I am not awk and sed user so every time I need to do complex operations in shell I need searching for syntax etc.. Now I think I'll be able to solve most non trivial shell operations with Pythonpy.
Everybody knows spaces in identifiers are where it's at. /s
I still don't 'get' neural networks enough to begin tackling my own problems. For example, I'm trying to predict in a given random xml data set, find some data from it based on labelled instances. There's this mind gap of how NN works and how I can go about solving this problem.
and "mv * /newDir" is not enough?
hah, suppose you got me there. I felt the challenge to do it in awk considering the example. 
That's unfortunate but is because devpi is a metapackage that does not have any scripts itself. Try devpi-server and devpi-client. I don't have a solution for that yet.
This is awesome, but I already have an alias `py` on all my machines to python, but it's cool enough to switch that up :) I'd honestly have preferred a longer name, and then been able to alias something two letters myself, but that's alright. I think nix best practices prefer naming your programs something longer for these reasons. You don't want to clash with users' aliases. Is this a bug? $ py 'range(100)' | py -l '[l]' --jo ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"] # but I want the ints :/ $ py 'range(100)' | py -l '[int(n) for n in l]' --jo 0 1 2 3 4 ... I'd expect the output to be [0, 1, 2, ..., 99] To get that, I needed to do: $ py 'range(100)' | py -l '[[int(n) for n in l]]' --jo [0, 1, 2, ..., 99] Is this intentional? It seems a little funky, but I could see how iterating on the outer list then spitting all that to stdout line by line is what you want, but with --jo it seems a bit counter-intuitive, especially since all of the output could not be parsed as a single json file. I'd expect that `py "..." --jo &gt; file.json` should always be a valid json file, but it isn't in any case of a sequence since you would need to wrap it in a list. Also, IMO --i, --ignore_exceptions would be better as `-i` even if it's close to "interactive", and -fx should really be -f or --fx / --filterx or something. I much prefer single letter flags or double-dashed for the explicit name. With that train of thought, --si --so --ji --jo are completely fine. But I don't like the middle underscore in your `--split_input` flags either. It should probably be a dash as well. Argparse will convert it to underscore when you check `args` so there's no problem there, and the dash is much more standard in CLI flags IMO. Just my two cents. It's certainly very usable AND useful but these things seem off. One other thing... I'd *love* to see a feature that makes this: $ ls | py -fx 're.match(r".*\.json", x)' file.json test.json as easy as this: $ ls | py --re '.*\.json' file.json test.json (ignoring that `ls *.json` would've been the right thing)
&gt;And the latest commit to the sources if something like 4 years ago. It could also indicate that it's rock stable.
It depends on *how* your problem is CPU-bound. If it's pure python, you'll want to benchmark and see what can be rewritten in a 'lower' language (C for instance). At that point you can consider when the GIL can safely be released, allowing multithreading. If you rewrite using Cython, the initial conversion is dead simple, and it's easy to mark up when the GIL should be released. Numpy and Scipy, for instance, already do this for array calculations. 
 &gt;&gt;&gt; "%c %d %.2f 0x%x" % (42, 42, 42, 42) '* 42 42.00 0x2a'
see also http://mkaz.com/2012/10/10/python-string-format/
If you're on Windows, you can easily install Pyside and similar prebuilt libraries into a virtualenv by downloading an installer from [somewhere like this](http://www.lfd.uci.edu/~gohlke/pythonlibs/) and then running `easy_install C:/path/to/installer.exe` from inside the venv.
I guess Ruby is not sufficiently different from Python to warrant a mention (at least I think so).
[mechanicalsoup](https://pypi.python.org/pypi/MechanicalSoup/0.2.0) has python 3 support.
That's why I really dislike people recommending and using that. It's just outdated and unpythonic in many places. Things like with statements, new string format, etc.
Well, that looks awesome. How save is it to 'join' a running process in production and to check some variables? I understand you it's not save to modify variables.
Is this what you wanted? py '[range(100)]'
If I'm understanding what you're asking correctly, you're wanting some examples of how this could be used. In the example you posted, it's just printing the numbers themselves. But imagine you had a sentence you were printing that contained pieces of information that changed. [Mad Libs](http://en.wikipedia.org/wiki/Mad_Libs), for example: &gt;The &lt;noun&gt; was driving a &lt;adjective&gt; car. This can be done in Python fairly easily: print "The %s was driving a %s car." % (noun, adjective) Other examples might be for printing someone's bank account balance, returning a sentence that contains health or stat values in a video game, or greeting a user by name. As for what others are saying on whether you should even be using this or not, I can't really say. If you're still fairly new to Python like I am, you might want to consider checking out /r/learnpython as well!
&gt; That said, this is the deprecated format. You should use string.format instead. No, it is [not deprecated](https://docs.python.org/3.2/library/stdtypes.html#old-string-formatting). There were plans to deprecate it in 3.1, but fortunately, the core devs came to their senses. I can't even fathom what they were thinking. This effortless string formatting is one of the most awesome things about Python.
That's what I did initially but that does not work because of unwanted scripts. For instance `flake8` also installs a script for `pep8` and `pyflakes`. Likewise `httpie` installs a script for `pygmentize`.
Do python 3 sockets actually support bluetooth? I've had rather spotty realization of this.
pyrasite could in theory hose up your process (because it fiddles with the GIL). That's why I wrote [manhole](https://pypi.python.org/pypi/manhole).
Well the reason was that I always needed two function calls - one to do the database backup and second to collect additional details to make some comment about the backup. It was always two function calls, one made before running database method and one after its done, so I wanted to make sure those two calls never go "unpaired" and decorator is the most elegant solution I can think of.
I have a customer that wants to be able to undo some operations on database and have every change somehow saved on the disk. Easiest dirty way to do this was to copy entire database... Database it small, it is done pretty quickly and is "solid" in the sense of easy debugging
Does it work for all types of projects?? I mean something that needs to use system resources?
Yes, that is the general niceness to which I am referring. And yes, I am FULLY aware that Python has such things. I wrote this in Go primarily as an exercise. 
I have watched the other talk on the SQLA website. About 2:30h long and it was - nice. A bit much for the first time, but nice.
Yup, looks good!
Check out this article it helped me a lot to understand the basics : http://www.heatonresearch.com/content/non-mathematical-introduction-using-neural-networks The book I'm currently reading on the subject (very accessible): http://neuralnetworksanddeeplearning.com/ Also, I tried to write a little introduction about it : http://www.digitaljunky.io/?p=63 Hope this can help help you understand what's going on inside a network !
good
&gt; This effortless string formatting is one of the most awesome things about Python. It sucks because `'%r' % x` will fail if x happens to be a tuple with more than 1 element. The mental effort I used to expend to worry about this stuff (especially in error handling!) was significant. On the other hand, as an experienced Python dev, I don't spend any noticeable effort on some extra typing nor on syntax parsing some extra code (actually that's easier with the more regular syntax).
Ask the maker - he specified that he wrote it for the Raspberry Pi. That's not to say that it wouldn't work on any other operating system! 
Fortunately both approaches still exist. It really depends on the use case/application which to prefer. The format method offers some nice features but % has the better performance. 
Thanks! This is exactly what I was looking for.
What gives you the impression that SQLAlchemy does not get much exposure? I have seen it recommended a lot and I definitely recommend it to anyone looking for a Python ORM.
It's just a convenience operator, but it's very convenient! For example, the same code as you posted without %: print str(1) + ", " + str(2) + ", " str(3) + ", " + str(4) Other uses are the easy formatting of numbers, such as %.2f to truncate to two decimal places, or %x to produce hex (the *hex* function sucks). Also, it supports dictionary operations. For example: &gt;&gt;&gt; d = dict(lang="Python", adj="Old-School") &gt;&gt;&gt; print "%(lang)s is %(adj)s" % d Python is Old-School 
rename 's/ /-/g' *
As others have mentioned, the syntax is to allow you to embed variables in strings - it's modelled after C's printf() style formatters. Usually, you'd be doing this with variables, rather than hardcoded numbers (since for those you could just write the string directly) Without this, you'd have to do something like: repr(a) + ", " + repr(b) + ", " + repr(c) + ", " + repr(d) rather than: "%r, %r, %r, %r" % (a,b,c,d) There's a lot of extra quoting and general messiness in the first form once you've more than a few items, and it's much harder to modify. The different codes are to control exactly **how** it gets represented. Eg. "%s" uses the "string representation" - the same as calling `str`, as "%r" does for `repr()`. There are also formatters like "%d" for integers or "%f" for floats, as well as ways to control other things like amount of space to take up, or number of decimal places. Eg "%4.2f" formats a float, taking up at least 4 spaces, showing 2 decimal places. The difference between repr and str is that repr is intended to be more of a programmer-friendly representation, usually equivalent to what you'll actually type in python to enter the value. It'll generally be used more for debug / log statements rather than anything you show a user. str is a more user-readable string representation, but you may lose some information. Eg compare repr(42) and repr('42') versus the equivalent for strings, or repr("'\"") versus str("'\""). As others have mentioned, the more recommended way to do this now is the .format() specifier, which resolves a couple of warts with the old syntax. This drops the needed format code, instead using parentheses enclosing an integer position that default to the equivalent of %s. The format specifiers can be specified after a : character, and are mostly the same. Eg. `"%4.2f" % (12.5)` is equivalent to `"{0:4.2f}".format(12.5)` 
Yeah. Also, the precedence of % can sometimes be a trap. Eg "The area is %d" % width*height and it's also not suited for localisable strings, since it relies on the order of occurance, whereas in some languages, you may want to reverse the order of appearance.
&gt; and "mv * /newDir" is not enough? I thought I was slowly going mad and maybe needed a drink, because this is so clearly the answer to the problem as I read it to be stated, that I was sure I was mis-reading the problem statement somehow. And I thus re-read it several times, scratching my head and calling myself names. Thank you. 
Funny that my first reaction was to try to install devpi this way too. 
 with open(file name) as some file: contents = Awesome Class(some file.read()) Actually, I think it would be possible, since I can't think of any place in Python's grammar that allows for two identifiers side by side, so you could probably change the parser to allow for that.
Hm, I think `py --re` would be exactly the same as `grep` in that case.
Depends on what you're trying to achieve. C is the natural companion to Python for increasing performance and interacting with other libraries. However, I've been finding that Java is actually a useful companion since it has libraries that don't exist or aren't very good in python - especially for boring enterprise-y things like PDF handling (PDFBox is a beast!) - while being much easier to use that C (you get garbage collection and dynamic language features). To use cliche car analogies, Python is like a Rolls, not very fast but otherwise awesome. Java is like a utility van - I don't really enjoy using it but sometimes it just much more practical. Also, if you do anything even vaguely web related you need to know Javascript. No getting around that one.
Nobody who cares about readability uses lisp, unless they have been fooling themselves into thinking their own lisp code is readable. 
Is it possible to inject a 'import pdb; pdb.set_trace()'? I could see this being very useful for debugging running processes.
Eh, Wayland ships a "toy toolkit" that's used as much for educational purposes as it is for unit testing. But it's not necessarily something for general purpose and production use, and it's really doubtful that the Wayland team would be interested in trying to make such a general-purpose toolkit. The advantages of GTK, Qt, and so on, is that they will run on multiple platforms, including OS X and Windows. Qt is on a huge mobile kick right now. But that also means supporting X11, and a large part of the motivation of Wayland developers is that they won't have to support X anymore.
For localization you wouldn't be using ordered arguments but instead use a dict, with key/values. This will help the translator understand the context of your string and help to provide plurals at the same time. (although i would suggest you use something like [babel](https://pypi.python.org/pypi/Babel) to help) 
I did not know this. I'm glad, i was trying to teach myself to get into the practise of .format(). I'm glad that string interpolation will be around for longer that I don't need to worry.
/u/KyleG wasn't talking about files.
Line breaks wouldn't be allowed in the identifier. Personally, I think if it were to be done, it should be limited to one space character per whitespace part. If one were to adopt this convention, it'd further limit valid variable names due to more potential conflicts with keywords.
I wasn't replying to KyleG
Take a look at this post: [http://stefaanlippens.net/python-asynchronous-subprocess-pipe-reading]( http://stefaanlippens.net/python-asynchronous-subprocess-pipe-reading) It helped me a lot in understanding thread-safe communication between threads
I really like this post: http://piotr.banaszkiewicz.org/blog/2013/08/24/sublime-text-3-for-python-development/ His config file is great.
the '\' at the end breaks the link
for file in ./* ; do mv "$file" "newDir/$file" ; done Also works, and you can replace any command you want instead of move
this sort of unabstracted threading is usually a bad way to write software in Python, since threads can't be killed, there's no sensible way for them to return anything and they can't execute Python code concurrently. if it's something like wrapping a blocking API, you might want to use a queue, but that won't let you kill things. if it's farming out CPU-bound work, have a look at the multiprocessing module (and remember your args and return values have to be picklable). if it's networking, check out twisted or asyncio or gevent.
Fixed.
That's an interesting take on Rsync. I agree with some of your points but on others Rsync is more than capable of doing. I get the gist and I agree, Rsync can probably do better but damn I really love it and I probably only know about 1% of it off the top of my head :)
You can either use [Pipes](https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Pipe) or [Queues](https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Queue)
It's all in the scoping rules. Python will look first at the inner function for a definition for x. If there is not a definition for x there, as in this case, in will check one level up and then again and so forth until it finds x or errors out. if you had placed a statement such as x = 2 inside the inner function, you would have gotten {'x': 2}. hope that helped.
https://docs.python.org/2/library/functions.html#locals &gt; Free variables are returned by locals() when it is called in function blocks https://docs.python.org/2/reference/executionmodel.html &gt; If a name is bound in a block, it is a local variable of that block. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a free variable. https://en.wikipedia.org/wiki/Free_variables_and_bound_variables &gt; In computer programming, the term free variable refers to variables used in a function that are not local variables nor parameters of that function.[1] The term non-local variable is often a synonym in this context.
`x` is called a free variable, because it's not bound to `inner`. `locals()` returns both local variables and free variables, [as per the documentation](https://docs.python.org/3/library/functions.html#locals). I guess someone figured that it would be more useful to have free variables lumped in with local variables, because they work similarly -- they are both names that you might encounter somewhere in the function. But internally, `x` is not considered a local variable: def outer(): x = 1 def inner(): print(x) print(inner.__code__.co_nlocals, inner.__code__.co_freevars) outer() If you run that you get: 0 ('x',) This says that the code object for `inner` has zero local variables and one free variable, named `x`. These are tracked and handled differently. You can read about code objects [here](https://docs.python.org/3/reference/datamodel.html#index-52). 
Well, that explains it. Thanks so much for the explanation.
That's not what they were asking. They wanted to know why it was returned in `locals()`, despite `x` not being a local variable. 
Yes. I've tried googling before making this post. I got PyBluez and BluCat and have since stuck with PyBluez while waiting for answers. I was just wondering if that was it for Python Bluetooth? 
**[pyenv](https://github.com/yyuu/pyenv)**
Finally a post that actually is totally tailored towards Python, most 'Python' Sublime set ups are no different to all the other Sublime set ups for any code. This definitely goes into a bit more detail, thanks for posting!
Thanks a lot for the detailed explanation. This is the kind of advanced info am looking for as I try to bring my Python knowledge to beyond intermediate.
One thing I do not know... what is the difference between using ST3 or pycharm?
There are programs that use raw X and not Motif or any other toolkit. Xfig for example, which I still use unfortunately. The task of putting pixels on the screen efficiently and across all hardware is sufficiently difficult that I think keeping a widget toolkit separate is a good idea. They aren't really related tasks enough to be under one project. It would be kind of nice if there was an "official" toolkit on Linux, but it doesn't cause that much problem in practice. Nowadays GTK+ and Qt programs both look good (or can be easily made to look good) no matter what desktop you use. I disagree that all those things should be integrated. One nice thing about Linux is that you can pick and choose the best software for each task rather than use one monolithic solution. I would really hate to be forced to a different window manager in order to use a different window system. Or be stuck with a different panel because I want to use a particular display manager. Having them separate is good for people who want to dig around, and in practice does it really hurt beginners? A good distro hides those details from you.
I used Sublime, then and now PyCharm but after reading this i'm gonna try and give Sublime another go tomorrow. It depends how much of PyCharm you actually use or are planning on using as to whether it would be worth getting.
&gt;but instead use a dict, with key/values A lot of the reason for that is *because* the positional syntax doesn't support it though, and since everyone tends to use positional when coding , it's more work to convert every format string to use dict args, unless you've planned for localisation from the outset. The newer way. most of the time you don't have to do anything except gettext wrap the string unchanged, even if it used "{}" positional syntax, since the localised ones can always just be changed to the {0} format. The old dict syntax is also a bit clunkier (I always forget the trailing s). The .format syntax is cleaner and fits neatly with the positional syntax, even allowing the two to be mixed.
ST3 is awesome, it just has to have a little customization done, just like any other regular editor, really. So seeing how others use it helps a lot. I've found Alignment to be really helpful in quickly lining up my code. Makes it easier to look at with a quick keystroke.
I switched to pycharm after using sublime for a long time. Nothing wrong with sublime as an editor, but I love the pycharm debugger. Saved my live several times :)
That's something i've never personally used. I basically only use it as a glorified sublime, but after looking at Anaconda it seems to have everything in that, that i use PyCharm for. I'm sure if i utilised PyCharm fully i could never go back!
I never said all languages are readable. I said that Lisp won't be readable if you don't know Lisp, and that I find Lisp to be readable.
I like Alignment too. It's easier on my eyes. It just annoys me that style-checkers and linters typically complain about the results.
https://github.com/kuujo/yuppy
see the nonlocal keyword for python 3.X: https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement the PEP is good reading as well: http://legacy.python.org/dev/peps/pep-3104/
Sublime is editor that works nicely with python. Pycharm is full feature IDE that's quite clever, has ton of options, is based on IntelliJ IDEA. I'm actually trying Scala (with IntelliJ as IDE) and ability to use all shortcuts and tricks with basically 0 investment (because of my PyCharm knowledge) is awesome. Code completion is one of very basic things that (I believe) no one does as good as PyCharm (everywhere else - vim, sublime, PyDev) it's just plugin, but in PyCharm it's part of application and is very solid.
awesome thank you
I found another! [Atom](https://github.com/nucleic/atom)
I found it impossible to get the tmx.py to work on Python 3 back when I watched this.
I'm currently looking at wavelets as well and I found https://www.youtube.com/watch?v=DGUuJweHamQ to be very helpful in even knowing where to start. Have you found any specific sources that have helped you understand wavelets better?
Yeah, but that's specific to the "mv" command. With what I posted, you could just as easily use it with any other command, like: for file in ./*.mp3 ; do locate "$file" &gt;&gt; locations.txt ; done Or what I use it for a lot, to fix id3 tags on my music files: for file in ./*.mp3 ; do id3v2 -A "$artistName" -a "$albumName" "$file" ; done Or, the find utility is terrific for a lot of things, like finding every mp3 file in this directory and every directory below it, and moving it to the Music folder: find ./ -type f -iname "*.mp3" -exec cp '{}' ~/Music \;
I cannot disagree. My initial comment is I am already happy with awk,sed,grep, etc why would I want pythonpy. Loops,find,cut,wc, and others were what I had in mind when I said etc.
Oh yeah definitely, sorry I was getting ahead of myself. I totally agree that if you can get over the learning curve of finding out about all the different commands, then the shell is amazingly simple and powerful, and you get tools written in C (with a few exceptions) and that have been optimized for what they do.
I have been using SublimeJedi but I will have to give Anaconda a try, just need to make sure it works with virtualenv so I can use it with Anaconda. (yes, those are two different Anacondas)
manhole has saved my ass on numerous occasions. I just wanted to say thank you!
Sublime has a free unlimited license. I've been using it for free for a few years now, and in a few months I'll be buying the full license because I like the software. It's a pay-if-you-want-to license.
Your text editor won't write your code at the end of the day. I increasingly much use vim, but as I have yet to get comfortable with vim in multiple file projects, I use Sublime Text when writing Java or another language where I find vim to be too different from what I'm used to. Try Atom, Gedit, Sublime Text, Vim, IntelliJ, emacs, Kate or Eclipse - whatever ultimately feels like the best editor for you probably is.
And yet another cute little text editor... Coding to me is 10% writing code and 90% fixing the mess we made. Why do these wanna-be "IDEs" never even consider refactoring code?
It takes a lot of talent to condense that much stupidity into two sentences.
I tried pycharm kept with it for few weeks, didnt really learn, just scratched the surface of it, assumed I will learn as I will use it, read about it more.. Eventually I started to **really** hate the long start up time, and shift+F10 not taking focus of the running window, eventually sublime pulled me back to it...
I can’t speak for anyone else, but for me the answer is simple: most of the time when I’m working on Python code for the back-end of a Web-based project, I’m also working with other languages. For current projects, those might include HTML, CSS, JavaScript, SQL, C and C++. Then there all the related or derived formats like Jinja2 templates, JSON files, and SCSS. And then we have a few custom formats used in-house that we wrote ourselves. A good programmer’s text editor like Sublime presents all of these to a useful standard, and either directly or via plug-ins it still supports some of the most useful IDE features like jumping to definitions and linting. Is Sublime as good, for any given language, as a good specialist IDE? No. Even with good plug-ins, it typically lacks the breadth of navigation and refactoring tools a more specialised IDE would have, as well as more powerful integrated features like debuggers and build systems. But is any good specialist IDE as flexible across multiple languages at once as Sublime? Not that I’ve found so far. So I think it depends on what balance you need, and assuming there are lots of us out there who work with Python but also with related languages on the same project, using an IDE like PyCharm instead of a decent general editor like Sublime isn’t obviously a win.
(((((((((((((((())))))))))))))))
ST3 is a text editor. PyCharm is a full-featured Integrated Development Environment (IDE), with all the components and support one needs for development. One doesn't need to go through the effort of configuring an IDE the way one adds lots of plugins to attempt to weld some IDE functionality into ST3 as in this article.
Seconding most of what you said there with my own uses: Eclipse is perhaps the only IDE that comes close to offering all the languages and tools in one package that I need from an IDE for "most" of my larger projects but is still lacking enough that I can't really use it and find myself falling back to sublime text and a small handful of custom wrapping scripts (to mux together all the debuggers and such properly for example). An example from my last "big" project of the languages used: * C/C++ to hook into very low level APIs that have no other bindings but ABI or such only. (Thus ruling out something easy like CFFI, easier to use C) * Java because a few libraries are already written in java and its faster to use mmap() with JNI to hook into the other programs than re-write it. * python plugins because certain things need to be scriptable without re-compiling, also acts along side CFFI (using pypy) as the major "glue" that holds everything together. * Lua because thats what the Java code uses for its own scripting, although not much going on there. * JavaScript/HTML (via flask and such) for nice clean JSON outputs and UI for watching things tick along. * C#+python for the Windows client code, doesn't do much thankfully. Using Sublime Text was very nice here, very easy to write a few custom ST plugins to automate launching the very weird setup required to compile and launch the different bits of code. Now at times I wish I did have some of the fancy refactoring but the ease of two buttons to re-launch everything? worth the loss from Eclipse. Also the fact that Eclipse for its life cannot handle that many different languages at once without becoming a slide show at times... TL;DR: A large number of people have to use more than just one or two languages when programming and sadly there is yet to be an IDE with enough flexibility that can handle that.
You are awesome!
This. Another case: my Django project with `.py`, `.js`, `.html` (and django templates), `.sass`, `.css`, and even some `.sh` in there. All have syntax highlighting, the important ones have linters and autocomplete. I love Sublime Text. If I want to mess around with Haskell or Go, it has those too. (although the Haskell plugin is pretty slow on my machine)
If you want to develop your Python or any language, just pick a project that interests you, preferrably one that you currently have no idea how to do. Then just get started, learning as you go. The actual project is not important, the INTEREST is.
I don't often program, but when I do its with x86 asm; the only language a 'real' man will use.
Have you posted to /r/learnpython? that would be a good place too. But for a project like that you'll need to to use different libraries. Like one to connect to the bank and whatnot. At this point google will be your best friend. You need to google around to look for useful modules then google tutorials for that module. Also google API for your bank. It would probably be easier to find something else for practice working with APis. For example http://www.random.org/clients/http/ is easy to get started with.
I sure haven't posted there yet, thanks!
I would try doing the time in binary first.
What Yellow said, but I'll add more explanation of the process: GOAL: print '20' when run by putting the right thing in the drop-down box. BEGIN: variable puzzle is set to the value 7. inside the mystery function, which takes the variable riddle as a parameter, we find: 1) variable enigma is set to the value 5 2) variable conundrum is set to the value of variable puzzle (7) plus riddle (?) 3) function mystery returns the addition of conundrum and enigma. So, the question is, what do we pass in the print statment with the drop-down list to get the mystery function to "spit out" the value "20"? presently, not knowing what riddle is, we can see that in the mystery function: 1) conundrum + enigma _must_ equal 20 at the end (from the requirement) 2) engima presently equals 5, thus conundrum _must_ somehow be set to the value 15. 3) conundrum currently equals 7 (puzzle) plus an unknown value, riddle 4) Thus, if conundrum needs to equal 15 to output the proper "total value", riddle needs to equal 8. The question then becomes, what item in the dropdown list equals 8? The answer, is "print mystery(6+2)" It's terribly convoluted, but there it is :). EDITS: formatting.
Good lord that's painful to look at. Anyways, I'm going to say yes, but you're going to have to be creative and fake it. Probably by drawing the bar, then the open and close lines separately. 
PyCharm (alone; other JetBrain IDEs might have more) comes with nearly [300 plugins] (http://plugins.jetbrains.com/category/?pycharm&amp;category_id=all). You get support for C++, Emmet, Zen Code, even more linters, Apache Web Server, asf., down to stuff like Haskell, Erlang or Pig. Adding your own or existing plugins to JetBrain's IDEs to interact with your project, files, or code selection is a breeze and can be done in a real GUI (heh). Not to mention that TDD and refactoring work out of the box and you get to visually embed your CI and bug tracker into your workflow. You get an excellent GUI for code diffs and working with databases. All the stuff you and others have mention here at least is immediately supported, without having to waste days to get it to work. Edit: Forgot to mention IDE-based debugging with a comfortable introspection GUI while setting visual breakpoints in code editor windows by following hyperlinks in stacktraces (for those hardcore gdb/pdb fans...) &gt;But is any good specialist IDE as flexible across multiple languages at once as Sublime? Vim, Emacs are. No, just kidding (really!). I've got work to do, I am not paid for hacking config files to make my editor work again after a major version change or because I need new functionality. In the end, everybody should be entitled to whatever they like. But to me, you guys are a bit like masochists, to be frank... Disclaimer: I don't work for JB or am affiliated, but after more than a quarter century of coding (most of it with Emacs and Vim, the latter of which I still frequently use, particularly on network conns) I just learnt my lesson.
Thank you for all the responses this helped a lot!
Seriously, negative points? Are you all masochists who love configuration over convention in your "IDE", while preaching against it in your own code, or what? Oh well, so be it! :)
Am I the only one that uses aptana studio for python and is satisfied with it? I haven't tried another IDE but will give pycharm a go now
what standard?
See my reply to Chris directly - IDEs like Eclipse and PyCharm support Lua, Java, or C++/# out of the box or with the according one-click-installable plugins. No need to hack config files and write 100s of blog posts about it so others can use it, too...
Failed to install t, a todo manager, which has entry_points in setup.py: pipsi install hg+https://bitbucket.org/sjl/t/src Traceback: New python executable in /Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/bin/python Installing setuptools, pip...done. Downloading/unpacking hg+https://bitbucket.org/sjl/t/src Cloning hg https://bitbucket.org/sjl/t/src to /var/folders/w0/fmchq50j1xs174fnx783f6gh0000gn/T/pip-XdTWb8-build Running setup.py (path:/var/folders/w0/fmchq50j1xs174fnx783f6gh0000gn/T/pip-XdTWb8-build/setup.py) egg_info for package from hg+https://bitbucket.org/sjl/t/src Installing collected packages: t Running setup.py install for t Installing t script to /Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/bin Successfully installed t Cleaning up... Traceback (most recent call last): File "&lt;string&gt;", line 5, in &lt;module&gt; File "/Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/lib/python2.7/site-packages/pkg_resources.py", line 348, in get_distribution if isinstance(dist, basestring): dist = Requirement.parse(dist) File "/Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/lib/python2.7/site-packages/pkg_resources.py", line 2745, in parse reqs = list(parse_requirements(s)) File "/Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/lib/python2.7/site-packages/pkg_resources.py", line 2678, in parse_requirements "version spec") File "/Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/lib/python2.7/site-packages/pkg_resources.py", line 2645, in scan_list raise ValueError(msg, line, "at", line[p:]) ValueError: ('Expected version spec in', u'hg+https://bitbucket.org/sjl/t/src', 'at', u'+https://bitbucket.org/sjl/t/src') Did not find any scripts. Uninstalling. 
I installed PyCharm a long time ago. It's very pretty, and not bad at all. It's just slightly too heavy for my taste. It takes around twelve seconds to load on my little laptop (after the first load of the day). It does a lot of loading. Sublime Text takes two seconds (if that, after the first load of the day). Twelve seconds at the start of a long session is not that big of a deal, but to quickly edit one of my projects it is (to me at least). My 'goto' editor is Sublime Text, but if I was forced to exclusively use PyCharm for work I wouldn't complain too much.
Change the variables to there objects. May be easier to wrap your head around. def mystery(8): enigma = 5 conundrum = 7 + 8 return 15 + 5 
&gt; PyCharm (alone; other JetBrain IDEs might have more) comes with nearly 300 plugins. That is roughly an order of magnitude smaller than the number available via Package Control in Sublime, but more significantly, much of the support for multi-language development and common web frameworks and tools in PyCharm is only included in the Pro edition, not the Free Community one. While JetBrains generally seem to make good tools and I don’t think their prices are unreasonable, a commercial licence for PyCharm does cost twice as much as a licence for Sublime, which is relevant in the context of /u/Prinkster’s original question about why anyone would use Sublime when there is a free alternative available in PyCharm.
I love PyCharm, but I feel like I am missing some of its features. Is there a tutorial like this one that goes over how to setup pycharm and use all its features? (Like setting up VCS (although I figured that one out mostly), setting up deployment, inspections, advanced debugging, and I just found out it does javascript debugging - I am sure there are tons of other things I am missing also.)
I don't like IDE's. Tried a billion, including PyCharm, they get in my way. I don't need help coding, because my bottleneck isn't coding. I spend most of my time designing; I just happen to be using code to design. Sublime is minimalist, that's the point.
If you install from hg/git you need to define egg specifications. Like adding #egg=todo to the end of the URL.
Do you mean like this? pipsi install hg+https://bitbucket.org/sjl/t/src#egg=t It doesn't work too. I noticed installing form local path has the same problem. Pipsi seems decides use the argument as project name instead of using the one defined in setup.py: /Users/foobar/.local/venvs/hg-https-bitbucket.org-sjl-t-src/bin 
when it comes to more customization it is always better go with bare metal code. try d3.js 
&gt; Pipsi seems decides use the argument as project name instead of using the one defined in setup.py: Yeah, but that's not actually the problem. The problem is that it does not use the egg URI for the package metadata discovery. Will fix that.
Neat, i've been wanting to improve my Sublime, but never really had a reason to. These should help. 
good point... Maybe no reason for it. Still, --jo IMO should output one single valid json document.
I wasn't aware ST3 isn't free, like Vim or Emacs. You would really invest money into an editor rather than an IDE for your work? Interesting, above all because PyCharm Pro is actually quite cheap.
That is the main downside, those few extra seconds starting up, yes. On a modern machine with a SSD drive its actually only a second or two. But I rather suffer a half a minute than for hours afterwards, trying to get that broken plugin XYZ back to work again, checking blog posts like these linked here, etc.. But then, I understand the "purists": I was one myself for quite some time...
Check out PyCharm's own video tutorials, even the beginner ones. They explain stuff like how to do super-rapid TDD, debugging, git/mercurial/svn/... integration, database work, to stuff like using Vagrant to bootstrap your team's common development setup.
ST3 has a free unlimited trial (for non-enterprise use), although it technically costs $70 for a licence.
Because ST is a text editor and not an IDE, its your job to refactor, not your editors.
Well then, for individual, professional developers PC and ST3 are even roughly equally priced, too. But PyCharm Pro has way more features than I would predict ST3 to ever have... And those 300 plugins I mentioned: you get those on the free PC version already.
Ok, but I don't care about feature richness, I want something quick and light. I've used pycharm and its too bulky and slow for what I want. I understand that other people like it, I personally don't. I like being able to edit TeX and python and java and html and C and haskell and whatever else I've used today all in one place.
I get it, so you prefer to manually and painstakingly manage extractions, componentizations and abstractions. I prefer to tell my computer to do that for me - but I hope you are having fun at that, because I for sure do not envy you!
I've had editors break them more often then get it right, so I prefer doing them myself. *shrugs*
Are you trying to learn python or do you have a specific task where you need to do data visualization? Because I'm seeing concrete boots, not life jackets. No reason you should have to install mingw or virtualenvwrapper (just use virtualenv.) I suggest using the numpy superpack for windows, you shouldn't have to compile anything that way.
I'm trying to learn about python data visualization from this site: http://newcoder.io/ . What's the difference between a concrete boot and a life jacket? Sorry if that's a dumb question.
Sorry, what I meant by that is I found it incredibly surprising that someone would recommend installing a c++ compiler in windows to a new python programmer. I suggest just trying to install the numpy superpack instead of using pip if you are on windows.
Unfortunately I can't test it right now, but at the very bottom of http://newcoder.io/dataviz/part-0/ it suggests to download numpy manually so I would say the chances are pretty high that this will work.
In many ways Python, and other scripting languages, are the next generation past C/C++/C#/Java. yes you can write simplistic programs in Python, you can in most languages, and it's easy for beginner programmers to get started in Python because it abstracts away all the stuff that the so called "real" programmers have to do in C/C++ et al, but that doesn't make it a toy language, it simply makes it powerful. The less you need to type/write in a language to achieve the same thing the better, as long as it understandable syntax, which Python is.
Okay, I'll look into doing that. Thank you. 
Have you even really tried PyCharm? I assume I was thinking exactly like you some years ago: I hate(d...) Eclipse and the only working IDE was Vim (or Emacs, depends on the decade...) for me. PyCharm is the first IDE that truly understands Python code. It warns me about bugs in my code I would never have spotted; debugging has finally become a enjoyable (well, lets say bearable) part of my development process; refactoring is about an entire factor easier (than with rope.py, which still does not work properly with Python 3). Not that I feel like I have to convince anybody, but I really wonder if you guys are even aware of all the niceties you are missing out on. Vim vs. ST3 vs. Emacs vs. ...? Who cares. A text editor vs. a well-done IDE? I'll switch any time.
I would take a look at the [Matplotlib Gallery](http://matplotlib.org/gallery.html) and see what you can combine from there to generate that plot. From what I know about Matplotlib, I would say its possible.
Yeah, I agree.
At the command line when creating one-liners, weak typing is a *bonus*. I noted that in one of their examples they had to call int() on strings. Regular expression syntax as part of the language also makes sense at the command line. I wouldn't advocate Python change; I find it better to accept that awk and 'perl -p -i -e' have there uses for one-liners and leave Python for other things it is better suited to.
2k requests per second? Did you try out with how many requests your MySQL setup tops out? 
ok, you describe it as "easy dirty" too, so we agree ;) what kind of db is it? if its sqlite (what i'd recommend if it's really small, and it sounds to me like it would fir your requirements) maybe that helps: https://pypi.python.org/pypi/sqlitebck/
Better question: who actually **uses** these systems, and **what for** ?
2k Requests in 10 Minutes. I fired in my previous test approx 1800 at the MySQL just to see if there are any problems happening with multiple cursors.
Here, let me google that for you: http://legacy.python.org/dev/peps/pep-0370/
Coding in windows out side the .net stack is not nearly as smooth. If you have already spent all the time trying to make windows more Unixy, you are better off downloading virtual box and installing xubuntu in a VM and do your python Dev in your VM where the environment is mostly preconfigured and prebuilt packages/binaries exist for the software and libraries you are trying to use. 
3 is still in beta, though it's stable enough for day to day use. If you buy 2 right now, your license is portable to 3.
Not to 4, though, right? Not that that's not a long way off, but. Will licenses purchased for 3 carry over to 4?
Because that'd be the only reason I'd have to wait for 3 proper. Maybe it's worth just buying it now anyway - I've heard so many good things about Sublime Text. 
Trying to use eclipse after spending time with IntelliJ IDEA is one of the most painful things I have ever done 
You're right. I will add one, thanks for the feedback!
I dumped Sublime for a while, so maybe I'm not really up to date. But anaconda is Jedi just like SublimeJedi. It's a better bundle with good default addon like Linter. Back in the day I tried both and ended up with Anaconda
http://coffee-bouncynudibranch.rhcloud.com/brew/add returned: &gt; Internal Server Error &gt; &gt; The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.
flask, then brubeck.io for async
"Sublime Text may be downloaded and evaluated for free, however a license must be purchased for continued use." From the [Buy](https://www.sublimetext.com/buy) page. You have been effectively STEALING "for a few years now".
why not a dictionary out of curiosity?
As you don't need the data to be persistent (survive reboots) and only need it to store ~100k tags and memory isn't an issue, I would just use a python dict. At the very least, my first iteration would do this and then I'd go the fancier route if necessary. Premature optimization is the root of all evil. Redis is a legitimate option, but seems overkill. Granted, I'm not a 100% sure I understand your setup and needs. If you need to make updates asynchronously (e.g., have multiple processes/threads updating your dict/database as data comes in at a fast rate or data comes into multiple computers over a network), then a simple python dict won't cut it. In that case, redis is the solution as you can have many threads all connect to the same db and redis does the work to handle the standard concurrency issues in a sane manner.
The reason the trial period is unlimited is for: a) evaluation b) use until buying I cannot cite it, but there was a forum post around the time that I downloaded Sublime originally where the author stated he was okay with situations like mine (college, no money for such things) as long as they paid somewhere down the line. Now that I actually have money for a license, a license I shall buy. I agree with you, that is what the site says. I don't believe that I've been "STEALING". $70 is a hefty sum for a student, and the license helps out people like me by allowing use of quality software until we can pay for it.
pygame. :( I really wish that library would stop being a thing.
Found a relevant comment from hackernews and a reply from the writer of this post. The idea that Python is so slow that it's confusing TCP sounds wrong to me. I think it's more likely that your packet capture scheme is slow. It looks like you're using scapy, which I assume is in turn using libpcap... which may be buffering (in high-performance network monitoring, the packet capture interface goes out of its way to buffer). Which is something you can turn off. About 13 years ago, I wrote my own programming language expressly for the purpose of implementing network stacks, and had a complete TCP in it; I didn't have this problem. But I do have this problem all the time when I write direct network code and forget about buffering. Similarly: "Python is so slow that Google reset the network connection" seems a bit unlikely too. Google, and TCP in general, deals with slower, less reliable senders than you. :) What's the time between your SYN and their SYN+ACK? Reply: my favorite thing about writing blog posts is comments like this. Thank you! I didn't consider that the packet capture interface might do buffering. That might explain a lot of the problems I was having :)
This would have saved me a lot of time in my graduate CS work.
So, you presently are using a simple in-memory dictionary, and its working, correct? Is your worry then it won't scale well? I'd say try testing with test data at that scale (btw, do you expect that scale in production?) and see if it breaks down. It's hard to tell from the specification you gave what other factors are involved. The main cost IMO of running redis won't be changing your code (this is trivial, `import redis; rc = redis.Redis("localhost", 6379); rc.set(key, value)` IIRC) but just ops/risk of getting it set up to run reliably. Are you deploying the system or is it software you are handing off?
Thanks! I'm glad you would find the library useful!
[seaborn](http://web.stanford.edu/~mwaskom/software/seaborn/) is a wrapper of matplotlib, and has some very similar functionality. The [grouped boxplot example](http://web.stanford.edu/~mwaskom/software/seaborn/examples/grouped_boxplot.html) looks very similar to what you want to create.
Perfect, not sure how I missed that. Thanks! A small follow-up, is there a standard convention where to save ones databases on a user's machine?
If it's a user app and you're targetting Linux / Mac OS X, it can just go in ~/.your_app/db.sqlite. For windows, you might want to special case it. If it's a service, you may consider /var/db/.
reminds me of [PCS](http://pcs.sourceforge.net/) a network protocol debugging utility written in Python by George Neville-Neil
I've seen an awful lot of these "I don't understand what's going on here, but I'm going to write a blog post anyways" sorts of blog posts lately. Does writing nifty-sounding but wrong blog posts help you get jobs?
Was looking for something like this for engineering school BS graduate level sound processing in Python. Don't know why this thread is so empty! Thanks for the post!
&gt; false Were you trying to reply to a comment on here?
the whole article. but specifically "Step 4: realize Python is slow" "If you’re actually writing a production TCP stack, don’t use Python. (surprise!)" 
python3 has the [dbm](https://docs.python.org/3/library/dbm.html) module ([anydbm](https://docs.python.org/2/library/anydbm.html#module-anydbm) in python2). dbm is a key/value store rather than a full-blown relational database, so in some applications it may make sense to prefer it over sqlite.
&gt; Does writing nifty-sounding but wrong blog posts help you get jobs? Probably. 1. Depending on how esoteric the subject matter is, people could easily believe what OP wrote to be true. 2. Even if OP is wrong, they've still demonstrated that they can think of possible causes for unusual behavior. Given a little more time OP would probably have figured out the real reason.
Why the fuck didn't they just drop outgoing rst with the firewall? Edit: my bad on gender assumptions
I'm not answering your question at all but I work in the same field as you (apparently) and I would definitely recommend you check this product out. [Igntion](https://inductiveautomation.com/homeb?utm_expid=1326130-13.feXwWg06QzaVIq-NzvBbHA.1). Best money my work ever spent. Built in Java but all the scripting (events or otherwise) is done in jython (python 2.5), has unlimited connections, built-in historian, drag and drop IDE, runs on the web or on desktop, connects to any PLC (OPC UA), DB, Kepware, etc. Ignition is legit, and oh yeah you can install the full version for free (you have to click refresh every two hours). Edit: I swear I don't work for them.
I am really hating Twisted right now. That overbearing event loop is consuming my efforts. Right now, I'm writing unit tests for the thing, and having to dance around the issue of not restarting the reactor. I'm now considering just throwing the whole spider (working with scrapy) in a process and see if that'll allow my to flush the thing as necessary. Plus some [logging fun](http://www.reddit.com/r/learnpython/comments/1qzade/scrapy_quitting_script_after_reactorclose/) that I suffered through a bit ago. That said, I'd agree that where a TCP stack is desired, Twisted would do a fine job. So long as you don't mind it consuming the rest of your project.
It's just a person documenting their experience with something they thought was fun. Nothing wrong with that, and easy enough to ignore if it really bothers you.
If it's a user app, use: os.path.join(os.path.expanduser('~'), '.your_app', 'db.sqlite') No special cases necessary.
So long as the blog doesn't tout an answer (this one seems to), I don't see the harm. Sometimes talking through a problem is an excellent way to solve it, even if you're just writing down some thoughts.
What's false? "Bad time" with what? The point of this obviously wasn't to make production code, it was to toy around with a TCP implementation to understand how it works. Replicating something lets you learn why it's designed the way it is.
An important part of this example is that commands are used to start/stop workers. This is a common pattern, so here's another example. 
Nice ad, but this is my hobby by designing software ;-) and it doesn't solve the problem for most small installations, when an OPC is too expensive and the SCADA system has to access direct the PLC by a proprietary protocol. I did this already for Beckhoff and Omron. The product ignition is interesting though.
I left out hashes because I assumed that was obvious based on the question. :)
I recommended Redis because OP mentioned a setup with multiple agents, a data broker, and a ZMQ queue. I kind of inferred that odds are more than one host, or at least more than one thread or process, will probably end up needing to read or write to the data store once the system evolves, and that is what Redis is perfectly suited for. Plus Redis supports automatic key expiration, which can be very useful for caching and queueing. Not to mention all sorts of other features. You can disable all hard disk persistence in Redis pretty easily as well, since it was designed from the ground up as a memory-only solution. Disk persistence was primarily added to deal with sudden shutdowns and the like.
http://www.reddit.com/r/Python/comments/2dby3y/a_question_whether_i_should_use_a_dictionary/cjo9hh3 If this was contained to a single host and for a simpler use case I'd just use a dictionary.
Goddammit OP, where were you when I was in university? This is too fucking useful. Thanks for using Python 3 btw. 
&gt; import Queue as queue This is my favorite part.
twisted event loop is fine, if you come from other frameworks that use something similar. As far as unit tests go, the autobahn folks have/had a pretty good set that can be used as examples.
Haha, thanks!
That looks nice if I were trying to implement a protocol, but I'm simply trying to ensure that my spider (scrapy) is returning the values that it's supposed to. This involves scraping a number of servers that I've mocked. I could include each address in the test and go through all of them with the same spider instance (not stopping the reactor), but that doesn't feel right. This is what I mean by an event loop being overbearing (not just Twisted). This is just one of several spiders, and only a fraction of my total project, why should the rest of my code become Twisted just because a single module uses the library? Edit: Throwing the whole thing in a process works. It's just for testing, so it's not the end of the world, but it's still really annoying.
This is because Queue is renamed to queue in more modern versions of Python.
You've got a few comments. I'll address the json one because I can give a concrete answer. When you pipe things between files, you get either strings or bytes. Not ints, unfortunately. So it makes sense that when you use -x or -l, ever row comes in as a sting, even if that string happens to be "42" or "13", and its clear you want to think of that string as a number. Fortunately, the json protocol specifies json.loads("42") will return the integer 42, so if you have input rows that are just numbers, you can use --ji, and pythonpy will bring in the objects as integers for you to operate on. So your first intuition was very close: $ py 'range(10)' | py --ji -l '[l]' --jo [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
Yeah, my bad.
Yeah, I'm not worried about the string/byte piping, that makes sense, but I don't feel that it's correct to output a document that could not be parsed as json if you have --jo. I feel like `'[l]'` should be fine as `l`. I don't think it makes sense to output lines of each element of the list if it's passed --jo.
Yup. Pythonpy thing is total pwnage and I'm going to be using it forever.
This is great work but it would be really nice to see an example of a business app with Kivy. Pretty much every tutorial on Kivy is geared to games and the lack of resources / interest concerns me. I'd love to use Python for mobile apps but I am now looking at alternatives such as Rubymotion and Xamarin.
I guess the main example of an app like that is [processcraft](https://play.google.com/store/apps/details?id=com.showgen.processcraft), which is the only 'big' app created by a company that I know of, though there are other people/companies creating kivy apps commercially. The problem is, it's expensive (a full business product) and I'm not actually sure what its status is - it's actually one of the older kivy applications, and at the very least it doesn't really showcase a lot of the improvements since then. I think kivy is stuck a bit in the catch-22 between nobody making certain kinds of apps because there are no examples, and there being no examples because nobody is making those kinds of apps. That's not to say there aren't barriers to overcome of varying heights, but I think more is possible (and even easy) than is, as you say, showcased by these kinds of tutorials. Still, broad material development like this is slow, and I hope we'll see more examples soon enough!
It doesn't make sense locally, but the overal design is cleaner when you give the user orthogonal components to build expressions with. Py -l '[l]' has fixed semantics, and --jo needs loosely coupled integration with that. There's another use-case where you process a bunch of rows that are each json-strings with --ji or you create such a document with --jo. Ultimately, I agree that your use-case will be more common than that, and were it the primary purpose of pythonpy, it would absolutely be the way to go. But given the constraints introduced by other aspects of the tool, it would be weird for py --ji -l 'l' to print out a list of rows and py --ji -l 'l' --jo to print out a single row of json. People would be spooked.
She already works for Stripe, so I'm guessing it isn't a job-seeking post. 
Yep, I purchased 3 and have been using it since November.
That seems completely fair -- the features of an ide didn't really appeal to you. But this article is basically a lengthy tutorial on how to turn sublime text INTO an ide, except with more of a headache to setup and without as many features. It feels like the worst of all worlds. 
Thanks for the response. I had a feeling someone would mention Process Craft as it is the one app that gets cited although even the links for that on the Kivy site are broken! I'm not so sure we'll see other examples appearing - Kivy has been around a while now and it doesn't seem to be getting the sort of momentum I hoped it would - at least for Line of Business apps. I think Kivy as it is currently is capable of more than gaming - perhaps the lack of a native look and feel puts people off.
heh, I swear it wasn't me. People get emotionally attached to their editors sometimes, you know that. I try to keep an open mind about editors, programming languages, and other things like that. 
Here's one way without importing anything: checked = {} for result in results: # Check to see if the result is already in the dict. if result in checked: # Already in the dict, increment the counter for this result. checked[result['query']] += 1 else: #Not added yet, add it and initialize the counter to 1. checked[result['query']] = 1 # Sort results by their value and print them.. for query in sorted(checked, key=lambda k: checked[k]): print('{}: {}'.format(query, checked[query])) **** A '`defaultdict`' can do this very easily. from collections import defaultdict # Create a dict that automatically sets the value to 0 for missing keys. # defaultdict takes a function or constructor as its first argument. # When a key is missing, int() is called to set the value for that key. checked = defaultdict(int) for result in results: checked[result['query']] += 1 # Print them the same way as the method above... **** Maybe a `Counter` could help.. from collections import Counter results = [ {'query': 'foo'}, {'query': 'bar'}, {'query': 'baz'}, {'query': 'bar'}, {'query': 'foo'}] # This will create a dict of {query: count}... counts = Counter((d['query'] for d in results)) # Print the sorted results (by count). for query in sorted(counts, key=lambda k: counts[k]): print('{}: {}'.format(query, counts[query])) **** Anyway, this is the basic idea that I came up with. You said it was a list of dicts, so there is going to have to be some massaging of the data to work with these. You can see where I am actually using the 'query' key from the dicts to count with. Edit: Found out it was a list of dicts, tried to modify the examples to work with a list of dicts.
awesome, thanks for the input I'll play around with these. the 'results' are each (if any) a dict of either user, group, or computer properties for the most part, so username, email, title or pcname, serial, model.
I'm not too sure what you're looking for, but you might want to check out [Awesome Python](https://github.com/vinta/awesome-python), "a curated list of awesome Python frameworks, libraries and software", under "Command-line Tools", and some of the other categories. Some of those frameworks have a lot of debugging code baked into them, and you might be able to find visual enhancements as well.
Hi matthewblott, Thanks for your insightful comment. I have not considered the opportunity of making business apps with Kivy. What type of app would you be interested in? A chat client? A word document viewer?
Yeah, I wasn't trying to contradict your answer -- I just got a different idea of the task at hand. My thought process is, if you think you may be able to get away with a `dict` sitting at the end of his data broker, then that seems simplest. But if something heavier is needed go with redis. Without knowing more about the system/requirements, its hard to tell from my end.
Why that?
Thanks, that would be awesome. The video was very informative and helpful and then I hit that part and got kind of sad.
"jython (python 2.5)" *Shudder*. I can't imagine using anything less than Python 2.6 on a regular basis.
I have been thinking of making an app that allows you to add folks to a list and assign attributes to them. Eg: * Tony - bacon, eggs * Estelle - eggs poached * Simon - toast bacon eggs 
Yea it looks like you'll just have to remove newline characters in json files before piping them into pythonpy: cat test.json | tr -d '\n' | py --ji -x x
I suspect you're coming from Perl, JavaScript, or Common Lisp. Python has a built-in object system, so you don't need any extra libraries. If you need abstract base classes, those are provided by the `abc` standard library module.
You must use Python3 primarily. I don't know many python shops that use Python3, since Python2.x comes on RHEL 6.2. I guess when that changes to Python3 I'll start using it more. 1. `concurrent.futures` is [_new in version 3.2_](https://docs.python.org/dev/library/concurrent.futures.html) and `asyncio` is [_new in version 3.4_](https://docs.python.org/3/library/asyncio.html) so I wouldn't be able to use either with Python 2.x. 2. `multiprocessing.pool.ThreadPool` [is undocumented](https://docs.python.org/2/search.html?q=threadpool&amp;check_keywords=yes&amp;area=default), though I have used it before. Do you know if one could use it with a shared `Queue.queue`? 3. Stdlib trumps third-party stuff, most of the time (at least for me) due to the amount of test coverage. Though, I have used [gevent](http://www.gevent.org) or something like asyncio such as [tornado.web](http://www.tornadoweb.org); both with varied success in the past.
Honestly, there's so much that it does from an application stand point, that you're not missing much. Anything that I don't have has either been abstracted by the vendor or I can build by invoking java. As far as manufacturing software goes, it's amazing. 
It's the cause of more mysterious errors and crashes than literally any other python library I've ever used. If it stopped existing, people might write something newer and better... instead of sticking with it, despite it's (very) rough edges. Particularly irritating is that kivy uses pygame as a backend, which is a continually source of bugs and crashes. :/
No query builder? What's the point, then?
Whilst this is somewhat interesting as a look at what is doing internally, I use Python because I don't have to worry about execution speed. After all, if I specifically wanted fast code, I would probably start by using a different language.
argv is the list of string arguments provided to the script when it was run. So if I ran a script like this: python script.py a b c 1 2 argv would be: ['a', 'b', 'c', '1', '2'] On the other hand, raw_input() will block the script reading from stdin until it reads a newline/ctrl-D, at which point it will return all input as a string. Open up an interpreter and run raw_input() to get a feel for how it works. The appropriate situation to use argv is to pass configuration or control options to a script at invocation time; the appropriate situation to use raw_input() is to get user input partway through the runtime of a script. Does that make sense?
colorama will let you use colors. click is an interesting cli wrapper written by the pocoo folks to make building clis easier
well explained. 
I've really enjoyed using the curses library. It has a ton of functionality and control, however it can get a bit tedious. I did find there to be a moderate learning curve that I pushed through with YouTube tutorials. All in all its a good library, but there may be better Perhaps someone more experienced could offer another alternative. 
I bet you have learnd Java before! Your code has lots of ugly getter and setter methods. In Python you do not need those; if you want to check values before accepting them you should use properties. You should write your code with PEP8 in mind! Why did you invent a custom text format? Just use JSON (or XAML, or XML, or ...) and things will be a lot easier :-) You should dive for unit tests - really, that makes you much more think of how your write code! I would suggest [urwid](http://urwid.org/) for a textual interface.
&gt; Thanks for the response. I had a feeling someone would mention Process Craft as it is the one app that gets cited although even the links for that on the Kivy site are broken! Well, as above it's the one big app of that type I'm aware of with Kivy. Thanks for pointing out the broken links, I guess nobody had noticed - I found one, to Showgen Ltd on the [gallery page](http://kivy.org/#gallery), were you thinking of any more? I've made an issue for them, so it should get fixed soon. &gt; I'm not so sure we'll see other examples appearing I don't know, I'm still an optimist about it. I guess time will tell.
In your example, `argv` would be: ['script.py', 'a', 'b', 'c', '1', '2'] The name of the script is the first element of `argv`, see https://docs.python.org/3/library/sys.html#sys.argv.
Thanks for doing this tutorial (or posting it here, either one)! I will definitely spend some time in the next week following this. There are so many interesting libraries to learn with python, sometimes it feels overwhelming-- there's never a lack of fun though! Thanks for spreading the knowledge.
Q: Does writing nifty-sounding but wrong blog posts help you write nifty-sounding and right blog posts? A: Yes. People are not perfect and need practice. Nuff said.
This post doesn't relate to any IDE. It relates to developers and people which want to add support for both Python 2/3 for self projects. Finally, I hate IDE/Tools which convert my code to "something that works ANYWHERE" without my consent. 
Thanks!!! I'm glad the library seems useful to people!
If you are serious about this then you could try: - Talking about the business. - Talking about the technical environment. - Talking about the company location. - Talking about the benefit package. And finally, it would help your cause if you could actually spell 'opportunity'.
You could try Zeal: http://zealdocs.org/ Some readthedocs builds include compatible filesets, or the offline HTML bundles work to a lesser extent (no searching etc).
Let me guess: the 'job' is your college assignments?
PM me.
&gt; Particularly irritating is that kivy uses pygame as a backend, which is a continually source of bugs and crashes. :/ If it helps, we're moving towards using our own sdl2 wrapper as a default backend on all platforms that currently default to pygame. In the meantime, you can switch out some of pygame on other platforms, though I haven't looked at it much...I've just used the X11 window provider sometimes.
This cheat sheet is by the primary author of the python future package which is a really nice way of handling cross-version compatibility in one codebase: https://pypi.python.org/pypi/future
If you set your interpreter to Python 3 and open Python 2 code in PyCharm, it will inspect the code and highlight pieces that will not work. It doesn't automatically convert anything.
It's short and messy, but it's meant more as an introduction into just getting something done. I'm thinking of expanding it out to a series that gradually adds things like player interaction and multiplayer (though admittedly, I have no experience with the latter).
I think there is a typo on this line under [Metaclasses](http://python-future.org/compatible_idioms.html#metaclasses): class Form(metaclass=BaseForm): Shouldn't it be: class Form(BaseForm, metaclass=FormType): Since we have a parent class as well as a meta class?
Thanks for a valuable, topically related bit of information. And yet another sad example why you need to browse Reddit comments in "controversial" first mode, because you get "emotional down-votes" here buy by the hive mind.
Yes, you are right. From [PEP 3115](http://legacy.python.org/dev/peps/pep-3115/) specification: class Foo(base1, base2, metaclass=mymeta): ... Can you create a pull request for [this file](https://github.com/PythonCharmers/python-future/blob/master/docs/compatible_idioms.rst)?
Not quite sure how to respond to your question. Assuming you're not trolling, I'm not sure why one would want a query builder unless they don't care about performance or know SQL. In either case there are ORM tools like SQLAlchemy to fill that role. My goal for the project was to take the clumsy and verbose DBAPI 2.0 interface of psycopg2 and make something that took far less effort to use.
Done!
http://docopt.org/ Maybe this is not direct answer, but always useful.
Scriptability (batch files) come to mind. Also, learning curve and perceived user friendliness. With raw_input you can prompt the user as appropriate. With argv the user need to use something like --help to learn the program. Though to be honest, to some users as long as the black scary box comes up it's not user-friendly. Personally, argv is almost always better, if inputs to the program can be known before running the program
She *is* using scapy
He would understand whats happening in the background. It's still a dumb machine though. Also, he didn't write this one, and probably didn't write one at all.
"'%s'"%myInput -- this will enclose it in single quotes. This is probably not your problem though. You may actually have a newline in your user input string. You can tell by printing the repr(myinput). strip() it out before sending it along, see if that helps.
Can verify. I learned all those same lessons building machine learning tools in graduate school. ESPECIALLY about the time spent on data munging vs. coding. Data is universally awful and it's often impossible/useless to integrate between different sources. 
Here's a similar write-up that addresses the RST and a workaround using a python socket and then Scapy's StreamSocket. That way, you get all the plumbing handled for you: https://isc.sans.edu/forums/diary/TCP+Fuzzing+with+Scapy/14080
It would be helpful if they fixed the sidebar scrolling issues so I could use it as intended :)
/r/learnpython
/r/learnpython
Came across [pythonpy](https://github.com/Russell91/pythonpy) recently, which seems very cool. Easier way to write Python one-liners at the CLI, e.g. embedding Python one-liners in bash scripts.
That was indeed a great talk, thank you for sharing.
Not saying they aren't useful, but a lot of Python code is gonna be ugly for the foreseeable future if people keep depending on libraries like six, future and past.
Oops, good catch.
And Daira Hopwood and I have just got [development](https://github.com/python-modernize/python-modernize) of python-modernize moving again, and made a [new release](https://pypi.python.org/pypi/modernize). :-)
The underlying psycopg2 library handles this for you: values = {'foo': 'bar\'; DROP TABLE qux;', 'baz': 1} result = session.query('UPDATE qux SET foo=%(foo)s WHERE baz=%(baz)s', values) 
That works for values, but not field names or table names.
Thanks- I'll give this a stab and see what comes of it
You can install copies of many docs from your Linux distro - some of them are probably already there. E.g. On Debian based distros, the docs for Python 3 are at file:///usr/share/doc/python3/html/index.html . Docs are often in a `foo-doc` package, e.g. `python-bs4-doc`, although some smaller packages may just include them in the main package.
One of my favorite talks from PyOhio this year.
/r/learnpython
[Google App Engine](https://appengine.google.com/) should do the trick! I haven't used it myself, but I've heard so much good about it. 
lol
MIT's OCW version of their Introduction to Computer Science and Programming uses Python. It doesn't actually assume familiarity with Python but it's extremely fast paced, so they cover language basics in &lt; 1 lecture. There are a couple of different versions online. Here's their [EE/CS OCW page](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/).
Ah, sorry mate.
No worries. You will likely get more helpful answers there. Regardless, try pythonanywhere.com. Very easy for beginners to get up and running. 
The problem with Google App Engine is that it's only python 2.7 and it uses a lot of weirdness for its webstack (webapp2 with Jinja).
It's only free for a year thought right? 
&gt; depending on libraries like six, future and past. Those libraries are really just to assist you, I write all my (personal) python code to work in 2.7, and 3+ without touching six/etc.
Looks great. Thanks! 
Yeah, but unless you're doing really intensive applications, I've heard that it's really cheap (like cents per month). And considering OP only has a bot, it shouldn't be too bad.
Sorry about whoever is downvoting you. Technically you're not wrong. Upvoted to try and balance it out
Thanks!
One thing great about this speaker is that he covered an interesting topic using Python as a means of communication, rather than a talk about Python itself or some Python toolset. It seems that most talks are about the language or its numerous tools, like a how-to lecture, with the occasional big picture philosophy or industry talk, often by a keynote speaker. This talk was a bit of a paradigm shift: incorporate Python seemlessly and yet unintrusively into some problem domain. Don't make it about Python. This speaker used Python as he used English - a language tool for discussion. It's the same way physics lectures use mathematics to speak about science, and the way mathematicians don't dwell on low level arithmetic and algebra to lecture about high level abstract mathematics. It was refreshing, and I hope to see more lectures like this one, where we can move beyond English grammar and start discussing English literature without even thinking about English.
Speed isn't the issue here. 
David Beazley's talk on "public data hacking" used a similar style for problem solving while de-emphasizing Python syntax and semantics themselves. We need more talks like this!
I'd really like to do something with Report Lab for web to print but that would be a fairly big project. However I have some more rudimentary apps I'd like to build such as a simple warehouse stock updating app. A company I work with currently has users writing down stock as it comes in and it's a pretty painful process - it would be a lot easier to update the database via a phone or tablet as they're adding and removing stock from the shelves. I'm sure these things are possible but I was making the wider point that we don't see any examples for that sort of thing. I'm keen to see Kivy gain traction but I don't see it happening while it's just used for gaming as people are likely to see it as a bit of a toy platform. Perhaps Kivy shouldn't be free, or perhaps off a pro version. Rubymotion seems a lot more mature by comparison and Xamarin which ports .NET to mobile also looks very impressive. Python seems like it's lagging somewhat on devices which are only going to become more relevant to developers.
The preferred method is stored procedures or prepared queries. This way you never have to worry about injection attacks because the vector doesn't exist. Also, if your wanting a query builder, you're still looking at the wrong layer. What you want is one out the various data mapping and/or ORM layers which generally take care of your complaint. These sit on top of the base drivers. This is fairly universally true. 
You can set PyCharm to "inspect" python code for compatibility accross a range of versions. This does not change your code but shows hints... And it is actually insanely usefull if you aim for py26-py34 compat with one codebase. http://blog.jetbrains.com/pycharm/files/2011/02/pythonCompatibility.png
Thank you for your productive comment.
Yeah I used it in the past and when my year was up it really added up on me. It wasn't crazy monies, but I had like no traffic and they were nickle and diming me to death. I was hoping that there was a new free tier I could use (sad face).
Yeah, IMO in cases like that, it's best to use Heroku or Openshift and then when traffic starts to build enough that you need to scale up, move to Amazon 
I don't get it. Can someone please ELI5? 
sorry, couldn't help it, I just found it funny, still smirking. It's just way way too far away in the future
Follow up- this did the trick....had to enclose it. Thanks!
I just discovered this, and it seems like exactly what I've been looking for. Definitely going to try it out. Now that the competition is over, did you get much feedback? 
Do you want an actual class, or just a book that will take you through what a class would? The online book "How to think like a computer scientist" is an excellent example of what I think you're looking for. 
That's a big theme at PyOhio -- look at this awesome / disastrous project and what I learned along the way. We aim to pick talks that go beyond introducing a library and instead focus on how we can learn from "classic" disciplines.
Isn't meth big there ?
Dear Sweet Jebus, no no no no no no, ahhhhhhhhhhhhhhhh.
Who knew Python didn't support SNI.. that sucks.
I like to have my cake and eat it
(one of the authors here) The worst part is the way you debug this is that your friend PMs you on Skype and asks why his script for checking if concert tickets are available is failing with some error about certificate validation in requests and then you start manually inspecting certificates with OpenSSL and comparing with Chrome before you remember about SNI. That's the actual story of what motivated me to strongly agitate for this backport and getting PEP466 off the ground.
Yep :) I would have thought that an IDE that does this for us would be well received in this subreddit... You know, making a program do the work; isn't that what we are here to do?
AWS isn't charged by cpu usage, it's charged by instance usage. Keeping a micro instance on for a month (regardless of if its actually doing anything) costs around $10.
I don't know very much about python, or all the ins and outs about what you're trying to do. I do however have a little bit of experience with quick books integration. I support software that has an option that talks to quick books. I do pos work so sometimes stores need to drop sales data from the pos into quick books. What I know is this, sending data to quick books is easy. It's a simple text file that defines general ledger numbers and values to place into the gl numbers. The file has a header that you can probably copy and paste from somewhere online. If you can find an example you can probably just change gl numbers. Getting data out of quick books however I have no idea. In my world I don't need anything FROM quick books. It's probably a similar process though. I might not have much specific information for you but that's not my point . My point is to tell you that it's not that complicated. Figure out gl numbers, figure out how to write import document, then you'll probably stumble onto the rest. Start googling import and export from quick books. Good luck 
&gt;This situation is unacceptable, given that Python 2 is going to continue to see &gt;production usage for many years to come. As a result, we advocated strongly for &gt;PEP 466, which provides permission to backport many of these improvements to &gt;Python 2. And then Python 2 will continue to see production usage for many more years to come. Then it will be missing more features, which people will want to backport, and the cycle will continue unbroken. At some point Python 2 will *be* Python 3 with broken Unicode and stupid print statements. The time spent backporting Python 3 improvements to Python 2 could be spent porting Python 2 code to Python 3 - then you get the SSL improvements for free and you're future-proofed. 
Now I don't feel so bad about missing DjangoCon this year.
The behavior causing the output (['hi'], ['hi'], ['hi']) is actually a common 'surprise' people have when they first start working with python. This is just one of several different instances where you will see this behavior. It all comes down to the fact that B = ([], ) * 3 creates the tuple with three empty lists. The catch is, each of these the empty lists are in reality the same empty list. Under the hood, it creates a single instance of a list and then the *reference* to that first list is duplicated for each subsequent list that is made. Later when you update one of those instances, all of them will get changed. Again, this is because they are all just references to the same memory location.
I would think it would be prudent to put it back in the MidWest again. It was out west just a few years ago.
Note: prefix lines with 4 spaces or a tab to prevent code from being mangled by Reddit. `([], [], [])` creates *three new, empty lists* and puts a reference to each of them in a tuple. `([],) * 3` creates *a single empty list* and puts three references to it in a tuple. If you want to repeat something but you don't want references to the same object, use a comprehension: B = tuple([] for _ in range(3)) Or better: B = [[] for _ in range(3)] ...as it's really questionable to put mutable objects in a tuple and then mutate them. 
Look at what is actually happening in case B. If the expression was something like "B = (foo(),) * 3" would you expect it to call foo() three separate times? No, you'd expect it to call foo() once to evaluate that tuple, then the *3 makes three copies of whatever object references it contains. Well, [] is actually a function -- it's equivalent to "list()", the constructor for the list type, and returns an empty list when it is evaluated. Like everything else in Python, that list is passed around by reference, which means that when you put it in a tuple and make three copies of the tuple, you have three references to the same list. This is basically the same type of problem as what happens when you use a mutable object as a default argument value, i.e. "def foo(a = [])". In Python that doesn't mean "default value of a is an empty list", it means "create an empty list at function definition time and make it the default value of a for all calls". Python reference behavior, it's confusing sometimes but quite consistent once you get used to it...
Python 2 is deprecated and should no longer be used, especially for a one-off script.
Modern Python supports SNI just fine actually.
There are a lot of new features in the works, plus more performance enhancements and better organization. The coolest result so far I think has been user chozabu's work on a simple editor that makes use of the engine: https://github.com/chozabu/KivEntEd 
Thanks! I feel like I'm almost there. I've been researching/reading about QBXML it's easy enough to structure. The thing that no one covers (maybe because it's obvious?) is; *where* do I send this file once it's constructed such that it can be pulled by Quickbooks? http://www.consolibyte.com/docs/index.php/Point_of_Sale_qbXML_for_creating_a_Sale_Order
Link?
https://www.youtube.com/watch?v=RrPZza_vZ3w
If you think exposing your users to security risks because you don't want to maintain software responsibly is ok, that's fine, but I don't ever want to use your software. We shipped this software, and we said we were maintaing it, and failure to update it in the face of known security concerns is a gross violation of our obligations to our users.
How long does it need to be maintained? Python3 has been out for like 6 years.
To call Python 2 "deprecated" is stretching it. Its supported, although its not the most recent version. There is institutional investment in Python 2 as a foundation for things that touch the internet, and that can't just readily migrate to Python 3 easily. Does that mean it gets no new features? Yes, but what's the definition of 'feature'? PEP 466 relaxes that definition slightly to allow security improvements which impact more then just mere applications, but entire systems and networks that use Python, to be included despite it being considered 'features' in the normal course of events. This is a responsible, mature approach to dealing with real life problems, and its being done by those interests which have the institutional investment that can't easily upgrade soon. Win/win. 
A bit off topic, but I didn't realise that you could use `_` in that context (in the middle of a comprehension). Thanks for that!
&gt;Okay, first off I'm not new to reddit, I just had to make a new account because I forgot my password to my old one -_-. So don't heckle me about being 2 hours old or something. Then you should know to read sidebars. &gt;news about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python &gt;If you are about to ask a question, please consider r/learnpython This subreddit is primarily for things like news about the development of the language and major third-party libraries; blog articles giving success stories or sharing techniques; etc. Questions about the basics of language use go over there.
&gt;Furthermore, Python does the same thing to lists. If a literal list object is put in a membership test, Python will replace it with an actual tuple constant in the code Given that the optimizer knows the value will only be used for an `in` test, why isn't it also replaced with a `frozenset`?
I think this is a great idea. It will make working with Python in IDEs and doing static checking much easier.
I thought it's been out since mid-June? I signed up to buy a board but I haven't heard anything back yet. 
They are sending out invites to buy them in waves. I received the invite this morning, immediately ordered one. Probably gonna use it to create some very elaborate way of tracking when I open my front door. 
I've got one of the first non-Kickstarter boards. It's awesome!
What are you doing with it?
At the moment playing with LED lights :) In the future I'd like to control my LED-light strip to create a kind of DIY-Ambilight. 
I am looking for a utility which would help me browse / search / read the docs easily.
Doing handling of data with a queue and ZMQ is easy. So even when I have a dict and concurrent access I just have to serialize the accesses with a queue. My concern was the cost for accessing a tag. Redis has the capability to organize data hierarchically and this is handy. 
People don't stay with Python2 out of spite, people stay with Python2 because some of their libraries or some of their users stay with Python2 because writing code that is compatible with both Python2 and Python3 is a pain in the ass. &gt; At some point Python 2 will be Python 3 with broken Unicode and stupid print statements. Yeah, and that's precisely the point where all those libraries are finally rewritten to be Python3 but also can be used in Python2, and then everyone moves over.
Could you give an explanation please?
Python 3 has been out for 6 years and lots - most - people are staying with Python 2. This really should tell you something: like it or not, for good or bad, the Python 2 to Python 3 is too much of a problem for too may people. Maybe Python 2 has a broken string/unicode issue (and I'd tend to agree) but once code is made to work, it works. If Python 2 is left too long with too little maintenance, then it will simply get a bad reputation (deserved or not, it doesn't matter). Either people will move to other languages, in which case the Python community diminishes and maybe withers away completely, or maybe a group forks python 2.7 and runs with it.
Am NOT affiliated btw! Just a curious passerby.
Yes, and VB6 is still being used, today; some of that community never moved over to .Net. Does it mean Microsoft provides patches for it, or releases SNI-aware libraries for people still running Windows 95? Of course not. They provide compatibility layers *to run your old apps on new platforms*, but they're quite clear that new code should use new tools. This from a company that values backward compatibility like no one else. This work does the opposite, it's like Microsoft trying to make the .NET CLR run on Windows 95... "because hey, I know a lot of people who are not going to buy XP". To me, it looks seriously misguided. Who cares if Python 2.x gets "a bad reputation", it's 10-year-old code! Do you worry about the security of COBOL code?
Now THAT sounds like a project! May I suggest having it not only track when you open the door but also dump a bucket of ice water on the head of anyone that hasn't answered the ALS challenge yet? "Haha! You have to donate $50 now!"
&gt; because writing code that is compatible with both Python2 and Python3 is a pain in the ass If you find that to be the case, you might be doing it wrong. 
&gt; The time spent backporting Python 3 improvements to Python 2 could be spent porting Python 2 code to Python 3 No. This is a stupid argument. If you want to spend your time porting Python 2 code to 3, to help ease the transition, go ahead. There's plenty of projects waiting to be ported that will gladly accept your help. Don't tell other people what to do with *their* time.
&gt; Change happens, people; deal with it. Change doesn't happen on its own. It requires *other* people to change, who might have different goals/incentives than you. "Benefit to the python world" might be important for you, it might not be for them. Change does not happen because of wishful thinking.
&gt; I care if Python 2.x gets "a bad reputation" because that will translate to the larger community as Python getting a bad reputation. That's not the case: people who already know Python, already know its strengths and limitations, and the likelihood that they'll change their opinion of the language because of this or that security feature is nil. New users, if directed to Python 3, will never even know that old versions were "bad" here or there, in the same way nobody who started programming on Java 1.4+ ever cared how bad 1.0 was at managing collections. &gt; we're talking about keeping Python 2.7 running securely The operational word being "keeping". Code written with Python 2.7 and using ssl was deemed secure enough to go into production a year ago? Good. Were those implementations of SSL standards *broken* in the meantime? No ^^(except ^for ^the ^CRIME ^stuff, ^which ^is ^the ^last ^item ^in ^a ^list ^of ^7 ^and ^basically ^the ^only ^issue ^that ^justified ^a ^fix). That code is exactly as secure now as it was a year ago, so what is this patch for? You are not *keeping* anything as secure as it was, you want to *upgrade it*, to make it *more secure*. You want to write *new code* using *new features* on the *old platform*. You want to use ASP.NET on Windows 95. &gt; then Python will end up in a backwater. I don't know why people keep hammering away at this bogeyman of "language obscurity". Maybe it's because I'm an old fart, but in my world Python *has always been a backwater*. The Real World runs on Java and .NET and PHP and C and C++. Python and Ruby are "vanity languages" who just do their own thing and navigate the ebbs and flows of popularity waves as best as they can, maintaining a level of integrity that mainstream platforms cannot deliver. If we were so worried about popularity, why didn't we abandon significant whitespace, which is the n.1 complaint of any mainstream developer approaching Python? Because *we don't care*, the value we get from significant whitespace is higher than the value we would get by droves of "enterprise" developers making Python uber-popular. In the same way, I argue that the value we get from moving as much as we can of the ecosystem to Python 3 is higher than the value we get by continuing to appease people who will forever refuse to upgrade. Python didn't become popular because Dropbox or Rackspace used it; Dropbox and Rackspace used it because it was the best and most productive language available at the time. What the community should care about is to provide the best tools *to the next Dropbox*, and that's what Python 3 is for. By continuing to drag it down and insisting on backward compatibility, we are keeping current players happy, but we are confusing the next generation of developers who are *the ones we should really care about*. There is a reason Microsoft will piss people off: *because it's the only way to force them to improve the status quo*, a status quo that is *expensive to maintain* if you also want to move things forward. Even a giant like Microsoft struggles to find resources to support old platforms! IMHO we should let Python 2.x rot, providing the minimum amount of fixes. If a company wants to fork it, by all means they should go ahead, more power to them -- it would leave the community at large free to concentrate on a better future, while corporate entities would be free to keep their "py-cobol" running for as long as they want. I think it would be the best of both worlds, if anything because it will end this constant rehashing of the same arguments for or against upgrading to Python 3.
See also: http://www.reddit.com/r/programming/comments/2disob/proposal_for_python_type_annotations_from_guido/
(Waiting for an email from python-ideas to come through, so I can respond to the mailman archive, because mailman 3 is still in beta [*](https://mail.python.org/pipermail/mailman-announce/2014-April/000191.html)) +1 for static typing for certain problems. **MyPy** http://www.mypy-lang.org/ Static type checking at compile time (linting) looks really neat. *Do we need a separate approach for actual type assertions at runtime? Will that ever be in scope for mypy?* **Existing Uses for Annotations** *PyContracts* https://andreacensi.github.io/contracts/#introduction-to-pycontracts : &gt; Contracts can be specified in three ways: &gt; &gt; .1. Using the ``@contract`` decorator: &gt; @contract(a='int,&gt;0', b='list[N],N&gt;0', returns='list[N]') def my_function(a, b): ... &gt; &gt; .2. *Using annotations (for Python 3):* @contract def my_function(a : 'int,&gt;0', b : 'list[N],N&gt;0') -&gt; 'list[N]': # Requires b to be a nonempty list, and the return # value to have the same length. ... &gt; .3. Using docstrings, with the `:type:` and `:rtype:` tags: @contract def my_function(a, b): """ Function description. :type a: int,&gt;0 :type b: list[N],N&gt;0 :rtype: list[N] """ ... [EDIT] Markdown, http://www.mypy-lang.org/examples.html 
Seems like good fun. It's got me active, anyway!
This is a better statement of the point I was trying to make. I don't see how this can be argued with.
&gt; Change does not happen because of wishful thinking. Oh, totally. I personally accept it more than most, I think, by recognising that some people will simply *never* have any incentive to change.
Well... it isn't Flask or Django, for one (although I'm told that GAE can work with Django). I guess webapp2 isn't very weird, at least not as the rest of the stack - although I found the routing a bit overly complicated... I guess the Python 2.7 thingie is the major stopper for me. Also the fact that you can't uproot (easily) it from GAE and put it on your own site. I'm also not sure how you can use some stuff we are taking for granted now, such as SQLAlchemy.
http://legacy.python.org/dev/peps/pep-0285/ If that isn't sufficient for you then perhaps you should read the rest of the PEP that outlines the original change. Just because _some_ compatibility was broken doesn't mean everything else should be. You don't throw out the baby with the bath water.
I would love to have one but nothing ships to my country Sri Lanka, So sad for hardware Hobbyist. 
If you have multiple bool values you can very easily check how many are true by adding them together. assert sum([True, True, False]) == 2 On the other hand, these don't look that bad either ... assert len(filter([True, True, False])) == 2 assert [True, True, False].count(True) == 2 
This would apply if Rackspace had simply published this patch and told people they can use it at will. What they have done instead is formally submitting it to maintainers for inclusion in CPython; so they are *drawing from the limited pool of community resources*, committing the community to support the patch forevermore, not just "spending their own time". Hence, criticizing them is entirely fair game.
You don't want to *burden* the python maintainers with a patch that prevents man-in-the-middle attacks against the version of your software that is used by 95% of your users? I guess I'm glad that you're not in charge of accepting patches, then.
Anyone know the status of Teensy 3.1 support?
ITT: random stats. if you put 2.x code in production a year ago that was susceptible to MITM attacks, when you had the alternative of using a newer and safer version of Python, why exactly should maintainers bail you out now?
From all the proposals the one that I like the most is just to adopt mypy type annotations. I hope it's the one to prevail.
In the day I spent a lot of time writing Pascal. It was academic and it was unusable. This is Pascal made inscrutable; the only reason I use Python is because it is readable, crisp and clear. Guido is the God of python, granted, but some things Gods create are abominations.
It is all optional. Don't freak out. 
This was already posted at http://www.reddit.com/r/Python/comments/2dh036/pythonideas_proposal_use_mypy_syntax_for_function/
How do you avoid it when reading someone else's code? I support the proposal but I understand it's going to flip some people out.
Always keep an Oxford dictionary around, if you don't have proper Internet connectivity, and you don't have to personally carry it around everywhere. Ask them to say out loud what MTBF means, and then tell them to look up the definition of between. Unless they're ranked higher than you, then you're fucked, yet another reason why I hate every military I know of.
Fro the hamming one, the other languages have test cases shown, you have to toggle to a different language to get them.
I hadn't seen this here yet, it was linked on this weeks [Python Weekly](http://www.pythonweekly.com/) email and I found it pretty helpful.
silly, I bet the brogrammers love it. "dude I crushed that little bitch on that last round... no homo brah /hi5s"
It's in Montreal, close enough; and it's only 1 timezone away
Being able to use True/False as indexes is very useful. Same goes for addition but admittedly it's not as frequent as using True as 1 and False as 0
I'm not at home next 2 weeks, but you can find a lot of stuff at http://forum.micropython.org/ (for example this http://www.youtube.com/watch?v=2QUH5G3t8Qs&amp;feature=youtu.be :D )
All the docs are there, and the forums are active. I found the official tutorial to be very helpful too. https://micropython.org/doc/tut-contents Yes, there isn't a whole lot of specific tutorials yet, but it's still a new project. In fact it just officially went public (the point of this post)
Can you point me to anything that would give me more info on creating applications for the beagleboard with python? Like what's the best OS for it, other python stuff people have done on it, etc. A friend of mine wants to do some stuff with cameras and I told him I'd take a look. Thanks 
I just use command line in the default installed angstrom Linux. I don't even bother with the GUI for now. 
I'm building a 2 stage thermostat with mine. 2 k type thermocouples and two solid state relays. The logic is sooo easy to write in python. I love it!
what's cool about it?
Is this not better suited for /r/learnpython?
Good question! Probably the best answer is that it is nearly a full Python 3 implementation with missing library support. Some of the missing libraries will never come to the port due to size issues. 
Interesting question. I picked up a couple of Teensy 3.1's at the Detroit Makers Faire not even having a project planned for them. Im not sure if there is enough capacity in Teensy to support large Python programs but it sure would be interesting to see it available. 
This has to be one of the most interesting Python on micro controller implementations out there. Lots of potential especially as micro controller capacity improves. We could be running very impressive Python machines for a few dollars in the near future. The BASIC Stamp gets replaced with a Python Snake!😜😜😜😜 
Seems pretty nifty to me! The site design is cool, and seems to be structured well enough. The challenges and tests for each seem to be put together well also. I enjoy it so far!
Probably. Plus there are a number of good resources already in the sidebar of this sub.
In case anyone finds this in the future at some point in regards to my specific problem: I used the pypi akismet package in the end and wrote a quick spam = True if check_comment(foo, bar) wrapper around it in my app.
It doesn't seem like it would be too difficult to write a tool that strips all of optional annotations out. But I think people will see that like most things in python, judicious use can be a huge benefit and perfectionist overuse is only mildly annoying.
Emacs or vim
whats complicated about order of operations and a single expression?
Some suggested plugins for vim: * jedi-vim * python-mode * syntastic
Agree with /r/zahlman this belongs in learn python, but it wasn't reposted there, so I'll chime in with my two cents. First, I've always heard order of operations as PEDMAS (P for paranthesis) must be a regional thing. I'm not fully sure what your parse brackets output is supposed to do. Anyhow, in my eyes a better approach is a naturally recursive one. Take an expression string like: exp_str = "45*-5+((6-3)*(7-2))*(30/5)" and first tokenize it. That is group together numbers (consecutive digits) and convert them from string to a numeric type, operators, parenthesis, as well as differentiate subtraction operators from negative sign which should be tied to a number (roughly if a '-' is at the start of an expression or follows an operator it is a tied to a number; if its between two numbers it is subtraction). token_list = tokenize(exp_str) # [45, '*', -5, '+', '(', '(', 6, '-', 3, ')', '*', '(', 7, '-', 2, ')', ')', '*', '(', 30, '/', 5, ')'] Then write a function, `eval_tokens(token_list)` that: 1. Scans the token list for matching open-close parentheses (paying attention to depth -- don't just look for the first close-paren after an open-paren). Then run `eval_tokens( )` on each of these captured tokens inside the parentheses and replace the original tokens in your token list with the output of `eval_tokens()`. So in my above token_list, in your first pass through, you'd find the nested parenthesis containing the tokens to the expressions `"(6-3)*(7-2)"` and `"30/5"`, would run eval_tokens on these tokens, and replace the result in the token_list in place of the old tokens. E.g., at the end of doing these recursive calls your token list would be `[45, '*', -5, '+', 15, '*', 6]`. 2. Scans left to right for exponentiation and evaluates these. (My example didn't have any exponents, but its basically the same step as multiplication and division, shown below). 3. Scans left to right for multiplication and divisions and evaluate these. So with `[45, '*', -5, '+', 15, '*', 6]`, you find `'*'` in the 1st position (zero-indexed), and then take the token before and after it and calculate the multiplication to get -225 and then replace the first three tokens with -225 in the token_list. Then find the next `'*'` and do the binary operation on the adjacent tokens (to get 90) and replace these last three tokens. Hence at the end of this step you have [-225, '+', 90] as your token list. 4. Scans left to right for addition and subtraction. So [-225, '+', 90] becomes [-135]. 5. Your token list should have just one item now, and that's your result. 
I am [writing my own](https://github.com/stefanoborini/vai).
Please do not write such a tool. It would be like writing a tool to strip out comments. Such things exist but are part of compression or obfuscation tools and their use to 'aid readability' would be at best questionable.
Sucks because if it were in the US my company would send me there, but Montreal is a no go for some reason (probably insurance).
It's not complicated it's just way more complicated than it needs to me, without any obvious advantage
Does "writing any code that deals with bytes" count as "doing it wrong"?
Good luck!
Would I be able to use this to make a motion sensor? New to boards (arduino etc)
The goal is to have the entire project pass all the Python 3 automated tests that the official Py3 project passes.
vim
you speak in riddles.
Please, stop it. 
I just finished LPTHW.
So I got ubuntu on virtualbox, and installed virtualenv and virtualenvwrapper. They worked after I installed them, but after I shut down the VM and rebooted it, the terminal said 'mkvirtualenv: command not found,' when I try to make DataVizProj, and it says the same for workon when I tried to use a virtualenv I already made. I had to reset the PATH and run virtualenvwrapper.sh again to get it to work again. How would I avoid having to do this over and over again?
Ok so from what your saying I am going to take a few guesses. It seems like you installed virtualenv through a script rather than through the package manager. This was your first mistake, always go to the package manager first. Second, now that it is installed, the location it was installed to is not in your /etc/profile file. Rather than continue using that version, I would just install the packages from the package manager. This will cause them to be added to your path automatically. 
The aim of my comment was not to consider your knowledge of Python (and was a reply to drive0's comment, not directed at you, basedguy), but to point out that newcoder.io is aimed at those familiar with Python and so recommending to install a c++ compiler is reasonable. p.s. I don't use Windows, so forgive me if this is a moot point, but the direction of your slashes (\ or /) change part way through your script. Does it require that they are all one way to follow the path properly? edit: I see that your script is a CP from newcoder.io, so I don't know if the mistake is there. I've used newcoder.io, and found a few other mistakes. edit2: have you tried the PDF version they provide? It is different to the HTML version http://newcoder.io/assets/pdfs/setup/windows-setup.pdf
Yes, it's vim keybindings within IPython Notebook. It's called vimception because IPython itself has vim-like 'command mode' and 'edit mode'. So with this extension, you have three layers: IPython command mode, vim command mode, vim insert mode.
Sorry for downvoting you then. And I'm not using windows anymore. I'm using ubuntu on virtualbox, but as far as I know, all of the slashes have to be in one direction. I don't think backward or foward matters. I'm going to look into the pdf version now. 
I used pip to install virtualenv, and as far as I know, pip is a package manager, right? Here's the command I used to install virtualenv: $ sudo pip install virtualenv And here are the commands I used to install virtualenvwrapper: $ sudo pip install virtualenvwrapper $ export WORKON_HOME=~/Envs $ mkdir -p $WORKON_HOME $ source /usr/local/bin/virtualenvwrapper.sh How would I install it otherwise? 
SNI was introduced in 2003. It is absolute fiction that Python3 predates SNI.
That's okay; I'm sorry I wasn't clear. At the end of the day, I'd recommend developing on Linux/Unix anyway (newcoder.io works on Mac OS X in my experience), so I hope you stick with it. Good luck.
http://www.jeffknupp.com/blog/2013/02/06/write-cleaner-python-use-exceptions/ &gt; We've now seen two distinct approaches to error handling (lots of if statements vs. catching exceptions). These approaches are respectively known as Look Before You Leap (LBYL) and Easier to Ask for Forgiveness than Permission. In the LBYL camp, you always check to see if something can be done before doing it. In EAFP, you just do the thing. If it turns out that wasn't possible, shrug "my bad", and deal with it. &gt; Idiomatic Python is written in the EAFP style (where reasonable). We can do so because exceptions are cheap in Python. Seems to me that the cleanest way would be to make some simple check that only works on the new way (or the old way). Based on whether it works, create the server instance as the appropriate class and go from there. But the way you have it seems fine to me as well.
Python doesn't support type-casting, I think the correct solution is to change the children classes initialization to use a Stub object as a parameter so you can then initialize a new object with the correct type. So it'd be something like: class FooStub(Stub): def __init__(self, stub): self.__dict__.update(stub.__dict__) ... class BarStub(Stub): def __init__(self, stub): self.__dict__.update(stub.__dict__) ... def main(): server = Stub('https://someserver/api') if server.info() == 'fooserver': server = FooStub(server) else: # barsever server = BarStub(server) server.add_stuff('Some Stuff')
&gt; IPython itself has vim-like 'command mode' and 'edit mode' Do people usually refer to IPython Notebook with capitals? (I've only used the ipython shell in a terminal and I've invoked vim from it with %edit, but those modes don't sound like they apply otherwise.) I don't have any experience with IPython notebook. It [looks like](https://www.youtube.com/watch?v=H6dLGQw9yFQ#t=98) a web frontend for ipython the shell?
unicode is too big for this, so no unicode for you.
[He says it can be pretty close](https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers): "For tight loops that perform arithmetic and bit manipulation (common on a microcontroller), it can perform close to the speed of the equivalent C program." 
SNI was first supported by "gold standard" OpenSSL in [2007](http://en.wikipedia.org/wiki/Server_Name_Indication#Support), when the roadmap was already set. Python 2.6 and 3.0 were released the following year. So, nobody cared for 7 years and now it's an "emergency fix" that threatens the reputation of the whole project...?
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 3. [**Support**](https://en.wikipedia.org/wiki/Server_Name_Indication#Support) of article [**Server Name Indication**](https://en.wikipedia.org/wiki/Server%20Name%20Indication): [](#sfw) --- &gt; &gt; &gt; &gt; &gt; &gt;In 2004, a patch for adding TLS/SNI into [OpenSSL](https://en.wikipedia.org/wiki/OpenSSL) was created by the EdelKey project. In 2006, this patch was then ported to the development branch of OpenSSL, and in 2007 it was back-ported to OpenSSL 0.9.8. &gt;To support SNI the TLS library used by an application must support it and the application must pass the hostname to the TLS library. Further complicating matters the TLS library may be either shipped as part of the application or may be a component of the operating system. As a result of this some browsers support SNI on all operating systems while others only support it on a subset of operating systems. &gt; &gt;* [Internet Explorer 7](https://en.wikipedia.org/wiki/Internet_Explorer_7) or later, on [Windows Vista](https://en.wikipedia.org/wiki/Windows_Vista) or higher. No support for any Internet Explorer version on [Windows XP](https://en.wikipedia.org/wiki/Windows_XP) because SNI depends on the [SChannel](https://en.wikipedia.org/wiki/SChannel) system component shipped with Windows Vista. &gt;* [Mozilla Firefox](https://en.wikipedia.org/wiki/Mozilla_Firefox) 2.0 or later &gt;* [Opera](https://en.wikipedia.org/wiki/Opera_(web_browser\)) 8.0 (2005) or later (the TLS 1.1 protocol must be enabled) &gt;* [Opera Mobile](https://en.wikipedia.org/wiki/Opera_Mobile) at least version 10.1 beta on [Android](https://en.wikipedia.org/wiki/Android_(operating_system\)) [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*] &gt;* [Google Chrome](https://en.wikipedia.org/wiki/Google_Chrome) (Vista or higher. XP on Chrome 6 or newer. OS X 10.5.7 or higher on Chrome 5.0.342.1 or newer) &gt;* [Safari](https://en.wikipedia.org/wiki/Safari_(web_browser\)) 3.0 or later (Mac OS X 10.5.6 or higher and Windows Vista or higher) &gt;* [Konqueror](https://en.wikipedia.org/wiki/Konqueror)/[KDE](https://en.wikipedia.org/wiki/KDE) 4.7 or later &gt;* [MobileSafari](https://en.wikipedia.org/wiki/MobileSafari) in Apple [iOS](https://en.wikipedia.org/wiki/IOS_(Apple\)) 4.0 or later &gt;* [Android](https://en.wikipedia.org/wiki/Android_(operating_system\)) default browser on Honeycomb (v3.x) or newer &gt;* [BlackBerry 10](https://en.wikipedia.org/wiki/BlackBerry_10) and [BlackBerry Tablet OS](https://en.wikipedia.org/wiki/BlackBerry_Tablet_OS) default browser &gt;* [Windows Phone 7](https://en.wikipedia.org/wiki/Windows_Phone_7) or later [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*] &gt;* [MicroB](https://en.wikipedia.org/wiki/MicroB) on [Maemo](https://en.wikipedia.org/wiki/Maemo) &gt;* [Odyssey](https://en.wikipedia.org/wiki/Origyn_Web_Browser#Odyssey_Web_Browser) on [MorphOS](https://en.wikipedia.org/wiki/MorphOS) &gt; &gt;* [Apache](https://en.wikipedia.org/wiki/Apache_HTTP_Server) 2.2.12 or later using mod_ssl or alternatively with mod_gnutls &gt;* [Microsoft Internet Information Server](https://en.wikipedia.org/wiki/Microsoft_Internet_Information_Server) IIS 8 or later. &gt;* [Nginx](https://en.wikipedia.org/wiki/Nginx) with an accompanying [OpenSSL](https://en.wikipedia.org/wiki/OpenSSL) built with SNI support &gt;* [Apache Traffic Server](https://en.wikipedia.org/wiki/Traffic_Server) 3.2.0 or later. &gt;* [Radware](https://en.wikipedia.org/wiki/Radware) Alteon ADC &gt;* [A10 Networks](https://en.wikipedia.org/wiki/A10_Networks) Thunder ADC 2.7.2 or later &gt;* [Cherokee](https://en.wikipedia.org/wiki/Cherokee_(Webserver\)) if compiled with TLS support &gt;* Versions of [lighttpd](https://en.wikipedia.org/wiki/Lighttpd) 1.4.x and 1.5.x with patch, or 1.4.24+ without patch &gt;* [F5 Networks](https://en.wikipedia.org/wiki/F5_Networks) Local Traffic Manager running version 11.1 or later &gt;* [Hiawatha (web server)](https://en.wikipedia.org/wiki/Hiawatha_(web_server\)) 8.6 or later &gt;* [LiteSpeed](https://en.wikipedia.org/wiki/LiteSpeed_Technologies_Inc.) 4.1 or later &gt;* [Pound](https://en.wikipedia.org/wiki/Pound_(networking\)) 2.6 or later &gt;* [Apache Tomcat](https://en.wikipedia.org/wiki/Apache_Tomcat) on [Java 7](https://en.wikipedia.org/wiki/Java_7) or later &gt;* PageKite tunneling reverse proxy &gt;* Saetta Web Server via OpenSSL &gt;* LBL®LoadBalancer 9.1 or later &gt;* Citrix NetScaler 9.2 or later (9.3 Enhanced) &gt;* [Radware](https://en.wikipedia.org/wiki/Radware) Alteon ADC running AlteonOS 28.1 or later &gt;* [HAProxy](https://en.wikipedia.org/wiki/HAProxy) 1.5 or later &gt;* EVO Mail Server &gt;* [Lighttpd](https://en.wikipedia.org/wiki/Lighttpd) since version 1.4.24 &gt; &gt;* Mozilla [NSS](https://en.wikipedia.org/wiki/Network_Security_Services) 3.11.1 client-side only &gt;* OpenSSL &gt; &gt;* 0.9.8f (released 11 Oct 2007) - not compiled in by default, can be compiled in with config option '--enable-tlsext'. &gt;* 0.9.8j (released 07 Jan 2009) through 1.0.0 (released 29 March 2010) - compiled in by default &gt;* [GnuTLS](https://en.wikipedia.org/wiki/GnuTLS) &gt;* [CyaSSL](https://en.wikipedia.org/wiki/CyaSSL) - not compiled in by default, can be compiled in with config option '--enable-sni' or '--enable-tlsx'. &gt;* [PolarSSL](https://en.wikipedia.org/wiki/PolarSSL) since 1.2.0 - compiled in by default &gt;* [libcurl / cURL](https://en.wikipedia.org/wiki/CURL) since 7.18.1 (released 30 Mar 2008) when compiled against an SSL/TLS toolkit with SNI support &gt;* Python 3.2 (ssl, urlliband httplib modules) &gt;* [Qt](https://en.wikipedia.org/wiki/Qt_(framework\)) 4.8 &gt;* Oracle [Java 7](https://en.wikipedia.org/wiki/Java_7) [JSSE](https://en.wikipedia.org/wiki/Java_Secure_Socket_Extension) &gt;* Apache HttpComponents 4.3.2 &gt;* [wget](https://en.wikipedia.org/wiki/Wget) 1.14 &gt;* Android 2.3 (Gingerbread) has partial support if application uses HttpsURLConnection class. &gt;* Android 3.0 (Honeycomb) has full support &gt;* IO::Socket::SSL (Perl/CPAN module, since version 1.83 ) &gt;* Pike 7.9.5 (SSL module) &gt; &gt;* [stunnel](https://en.wikipedia.org/wiki/Stunnel) (client and server) &gt; &gt; --- ^Interesting: [^Virtual ^hosting](https://en.wikipedia.org/wiki/Virtual_hosting) ^| [^HTTP ^Secure](https://en.wikipedia.org/wiki/HTTP_Secure) ^| [^Domain ^name](https://en.wikipedia.org/wiki/Domain_name) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjqhwzg) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjqhwzg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
We are story-telling animals. We want to be told a good story. This lecture, that some might consider slow, captures the reality of approaching a problem in a way browsing slides doesn't compare. You might grasp the content, but miss the message in this particular case. It might be painful to sit through a talk you don't find interesting, but then imagine how frustrating the real project must have been. Personally I found the talk enjoyable and funny.
Are you trying to write a whole series of instructions, such as: a = 10 b = 20 c = a*a + b*b ? If so, you have two options: 1) just keep typing! Your current session remembers any variables you set or functions you define. If the function needs multiple lines, such as an if statement, python will let you specify additional code after you hit enter on the first line. In your screenshot, x is still around and it still equals asdsd. Try typing x see what happens. 2) Write out all the commands separately in a text file, and then have python run them all at once. Python will check your code for errors before executing, but will otherwise do everything you specify in the text file. To do this, create a text file and change the extension to .py. Write whatever code you want in the file. Then just run it from the terminal (not from within Python itself) by entering "python *myfilename*.py" (assuming Python is on your PATH). Lastly, /r/learnpython is where you want to be. EDIT: also, if you're copying from the code on the right, there are some syntax errors in it. Just FYI.
&gt; If you find that to be the case, you might be doing it wrong. I use all those future imports and bugs I have in my Python 2+3 code go away when I run my little converter script to go to Python 2 or Python 3. If all you're doing is working with ASCII/unicode text you'll have no problems, but the second you work with binary strings (that are ASCII), things fall apart randomly. Also, was it really necessary to not support dictionary sorting on mixed types (strings/ints) in Python 3? I've still not seen the place where they mentioned they felt like changing that.
thank you got it! i was trying python to run all at once so i will go with the .py text. thanks again [ i fixed the syntax errors (:]
Thank you very much. I really appreciate your help, friend. So every time that I want to use a virtualenv, I have to do: source /usr/local/bin/virtualenvwrapper.sh beforehand?
https://mail.python.org/pipermail/python-ideas/2014-August/028742.html
Just wish it had more.. I like the difficulty ranking system
No I didn't, I have plenty of **real shit** to work on, I dont need to do an obstacle course. it wont make me more employable, and I don't give a shit about internet points. Tools are used to build something. Let's celebrate that, not how well we use our tools on stupid contrived challenges like this. 
Boy you sure are bitter. I bet you became the expert programmer you are straight by reading source code, huh? Its called gamification and it's been proven to be a helpful tool for some people in education. But I wouldnt expect you to have the time to have read about it, you have *real shit* to do. I wish reddit would disable being able to downvote direct replies. It really sucks having your post lose visibility because somebody is butthurt.
I'll let someone else determine whether I am an expert programmer, but I solve problems with code, which is more valuable to society and the economy than wasting your time solving contrived problems for internet points. So I honestly don't get the interest in a site like this. I like http://exercism.io/ approach which encourages peer review and an iterative workflow which really does help improve your craft as if you actually had a mentor to guide you. Though the exercises are still contrived and do little to help you solve real problems. The only way you get good at that is by solving problems. 
Glad to help. When you run source /path/to/venv/bin/activate It will only activate that venv for that specific terminal instance. This way you can still use the system python and pip as normal but have venvs for projects or software installs. If you don't want that venv activated then don't run activate :-)
I will be there!
Is it supposed to do something? I tried it in both Chrome and Firefox and after I click "Submit" on the first puzzle it just says "Sending..." and that's that.
Because it allows things like this: data = [26, 81, 77, 60, 83, 46, 76, 17, 52, 21] num_even = sum(n % 2 == 0 for n in data)
I have this feeling that Portland is the hipster capital of the world. Is that correct?
Sounds like a cool spot. I'll be plugging away at my python skills so I have a reason to head over there!
Pfft, only till it got too popular PS. If you wanna see a nice theater, go here http://www.mcmenamins.com/219-bagdad-theater-pub-home 
Go there and see for yourself.
I'll try!
how about `len([x for x in data if x % 2==0 ])` ? 
Depends on what you think a hipster is. 
Let me put it this way: all of my moustache wax comes from Portland.
You can't roll vinyl down the road without hitting a fixie.
The dream of the 90s is alive in Portland.
ITT: people who have never been to Portland.
I second this! 
Portland is the land of pie, cider, microbrews, and coffee for the morning after.
[Clint](https://github.com/kennethreitz/clint/) does the right thing here, properly placing user data where it should be across all OSes (Well, the most common ones, anyway.).
Enough to use it at work. It's not bugfree though. Don't expect miracles. I heard of neovim and I think it's a bad idea. Unfortunately, some people have access to kickstarter, and some don't. 
That's a type of hipster I can identify with! https://www.youtube.com/watch?v=fiRPBCiJg2c
Your gut is right. C. Embed C into python at bottlenecks to speed things up. 
I'm kinda looking forward to it, it sounds like it could be great. Can you please elaborate why you think it's a bad idea? I'm honestly interested.
I've never used arguing, but with pyboard you can basically type you commands in REPL and they are interpreted just like in the normal interpreter. Alternatively you can save your scripts on the internal storage and they are executed as the device boots. Not tried interfacing with C and writing assembler yet, but from what I saw its pretty easy to do, too. 
I only remember the strippers. Edit: [context](http://www.wweek.com/portland/article-20636-dr_know_the_truth_laid_bare.html)
&gt; I'm kinda looking forward to it, it sounds like it could be great. It is. Unfortunately I am the only developer, but I am working on it in my spare time (meaning in the evening and weekends) almost full time. Being single helps ;) &gt; Can you please elaborate why you think it's a bad idea? I'm honestly interested. Here you go: http://www.reddit.com/r/programming/comments/2960hn/evil_mode_how_i_switched_from_vim_to_emacs/ciik3jd
Hi there! I have detected a mobile link in your comment. Got a question or see an error? PM us. http://en.wikipedia.org/wiki/Python_(programming_language)
&gt; Funq currently only works with python2.7, Q***T***4, and on GNU/Linux. Shouln't one know, how to abbreviate the name of a framework, that is the pillar of interest for his project? ;-) Except for that, it looks very promising!
My approach would be to avoid type casting move the decision out of the classes... maybe like this_ def get_stub(url): # Do you magic to find what class can handle this server return ChoosenStub(url) def main(): server = get_stub('https://someserver/api') 
Also not Python, but would be helpful for anyone writing a book: * https://en.wikipedia.org/wiki/AP_Calculus * http://apcentral.collegeboard.com/apc/public/courses/teachers_corner/2178.html
Thank you very much :) I'll pull request the changes.
Perhaps you could give some links to related tools, such as Ranorex, Selenium and so on?
&gt; Here you go: This seems to mostly outline why _you_ don't want to work on neovim (which I can _completely_ understand), but is there a reason beyond your dislike for "plowing a field by hand"? I ask because the list of reasons you gave looks roughly like the roadmap for neovim. Is there anything I missed?
no the most advance thing , but i like your thinking 
scipy - for statistical is a good choice and this: for player in players: **cur.execute("select * from players")** rows = cur.fetchall() playerID = len(rows) g = str(playerID)+","+str(teamID)+",'"+str(player.playerName)+"','"+str(player.playerposition)+"',"+str(player.playerheight)+","+str(player.playerweight)+",'"+str(player.playerclass_year)+"'" print g cur.execute("INSERT INTO players VALUES("+g+")") Why you get all records from database? It is not efficient. What if database will grow up? and you used it just to define last id of record again and again into loop, i can't understand this way
Regardless of the point you're trying to make, I think it would help if you communicated more professionally in public. People aren't going to give you the respect you believe you deserve when you behave so outrageously. 
neovim should have just ditched the whole thing and start from scratch. It makes no sense to write something that complex and without a real need for system programming in C in 2014. You may as well do it in Fortran. I really want to see neovim downloading and including plugins from the net, like sublime does. &gt; Is there anything I missed? That I deliver something that works, already now, and I didn't get 30k dollars, and I am alone. 
I appreciate your advice but, i don't lose sleep over losing internet points. And getting downvoted does nothing to keep me out of the conversation. 
Forget the internet points. There are real people on the other end. What are you actually gaining from talking to people like that?
Easily.
brooklyn &amp; portland usually fight for that crown. But what does one judge on? Skinniness of jeans (BK)? Coffee snobbery (PDX)? Artisanal food (all)? Craft beer (PDX)? Drinking shitty beer (BK + PBR)? Complaining that 'the old _____ was better? Note: both are amazing cities*! *even if BK is a borough
What does it do?
This method of building a SQL query is also prone to SQL injections; possibly even by accident. It's better to do something like `cur.execute('INSERT INTO players (playerId,teamId) VALUES (?,?)', (playerId, teamId,))`
&gt; WAbot is a Whats aoo bot written using yowsup this bot can be used to answer questions.
Did you even *bother* reading the README.md? &gt;WAbot is a Whats aoo bot written using yowsup this bot can be used to answer questions.
Awesome! (I live in Portland) 
Well, it has friendly people, and great food, beer, coffee, bicycling, walking. And too much rain. And is a great example of new urban planning - that works. Definitely one of the best US cities. Are there people who are following non-mainstream fashions? Yes. Do not fear them; they are not violent. If you approach them slowly and don't put them down as just being hipsters they can direct you to the best food, beer, and coffee in town.
yeap) but for "insert" queries this way is not a point) because you have new record anyway. And don't forget about blinds sqli...
It is not a good solution too, because you do one operation of select to the database for each step of your loop. How do u think how many iterations of script will execute same code again and again? Create id field with auto-increment and let database does unique id for you or before of your loop get a last record and its id and incrementing it into loop 
Is that your password in there? Could be wise to change it and add login.json to the .gitignore.
That's cool! Do you have a live bot running? You also may want to gitignore .DS_Store and .pyc files as they're not needed on the repo.
flask-migrate is just using alembic, so if you use sqlalchemy, you can just use alembic and can have migrations too whether you are in flask or not. http://alembic.readthedocs.org/en/latest/tutorial.html
Red hot. If you put your resume on Dice and get a couple of decent agents (i.e. ones who didn't find you through Dice), you'll get a job in a minute (actual time: two weeks or less).
yes (Sri Lanka) +94773238893 
Thanks :)
sweet - I've been using the notebook for some initial coding but always REALLY hated not having vim keybindings. This is awesome!
Thanks. Came here to say that.
/r/london_forhire - I've both got a job and helped recruit people from there
You still can see the password in previous commits. I recommend you to go thru this docs from github: [https://help.github.com/articles/remove-sensitive-data](https://help.github.com/articles/remove-sensitive-data)
is that the international number?
yes just add as an contact and refresh whatsapp
thanks 
So - pardon my bluntness.... who on earth would you be running something important on a 32 bit machine today? If it's not important who cares? If it is be vaguely competent and run it on something sensible, This comment is worth exactly what you paid for it.... obm x
&gt; So - pardon my bluntness.... who on earth would you be running something important on a 32 bit machine today? Plenty of people in many different businesses. Also, I posted this despite being scheduled as a blog post for December, because a LinkedIn user had exactly this problem and could not use 64 bit libraries. So I released it earlier to provide him a possible explanation. You have to understand that there are plenty of businesses where upgrading is not done on a whim, and yet you still have to target their platforms. Things like hospitals, for example, are extremely reluctant to upgrade their hardware. &gt; If it's not important who cares? If it is be vaguely competent and run it on something sensible If it pays your salary, it's important. 
Why didn't he call the book Raspberry Pi-thon...
Thanks so much for putting this patch together. The lack of SNI has been a major thorn for my company and a handful of our customers. We resolved those after we moved a core technology component to Go (for a variety of reasons) but we still have lots of components in Python. I'd love to see this included in 2.7.9.
A very interesting and useful article. I ran into this problem recently with a scientific data display app which created large lists of modest sized numpy arrays (eack array was ~50KB). However, as part of the data processing to create these lists-of-arrays, a larger array of ~ 50MB was allocated. Although the overall memory usage was more or less static with at least 500MB 'free' memory, the allocation of the 50MB array was failing after a few alocate/free cycles. Our solution was brute force: use 64-bit. If I'd had more time, I would have tackled this as an architectural design flaw. The moral is: you need a memory allocation strategy. 
Hey, did a similar thing a few months back! [https://github.com/akshaydixi/pasta](https://github.com/akshaydixi/pasta) Ping me if we could collaborate!
Try https://www.thread.com/jobs/software-engineer :)
What's a brogrammer?
I don't know why people get anal-retentive over this nonsense. Regardless, you're wrong on both counts: 1. Although I don't know why he directly included the Yowsup code, as opposed to simply requiring it as a dependency, the code includes the license. 2. The Yowsup license, which is essentially the MIT licenses, explicitly allows anyone to redistribute the code in any way shape or form, as long as copyright is mentioned, which it is.
i suspect that article is BS, unless they are referring to Cincinnati MO, b/c Cincinnati OH has ZERO strip clubs. thought it does have one hustler store, but vibrator shop != strip club. 
Reminds me of QFD http://www.public.iastate.edu/~vardeman/IE361/f01mini/johnson.pdf
&gt; Luckily, these rankings are for all adult businesses—and while Cincinnati may have us beat on jack shacks, according to the Ultimate Strip Club List (TUSCL), their strip-club total is risible. Oxford definition of [risible](http://www.oxforddictionaries.com/us/definition/american_english/risible): &gt; Such as to provoke laughter
Could *really* use some documentation. Just calling it a "Whats aoo bot can answer questions" is really not terribly helpful. No real readme, no docstrings, no comments. Also, as someone mentioned, get all those .pyc files out of there. What's that jar file? Your requirements don't list java. Your countries.csv seems incomplete. "Hey, did you know this file could be beautiful and searchable if this error is corrected? It looks like row 51 should actually have 3 columns, instead of 2." Yowsup is its own library. Why should it be included here? Did you make changes? If so, then you should fork it with a different name so you don't cause conflicts on people's systems.
Interesting...good to know. I remember having a tough time finding Python jobs when I first started learning the language. It has caught on amazingly.
Python is getting used at a lot of the big financial institutions such as BoA. You might try looking at their careers pages.
I'm not sure what this adds over a good old link. (Which would have "latest" or "1.5" in it, too.)
pretty pictures are not python related. 
" As many people have said, Git is the price one pays in order to use GitHub. " Indeed * 1 billion
Take a look at nfldb/nflgame on github for an approach to the scraping, archiving &amp; querying aspect of this type of project.
Looks good! You should take a look at [Bottle-SQLAlchemy](https://github.com/iurisilvio/bottle-sqlalchemy). It will let you define Python classes that map to tables in your database. That way, you won't have to construct and execute raw SQL statements "by hand". This will: * make the code a lot cleaner and easier to read * help keep your models separated from the view * make database schema changes easier (possibly through use of a tool such as [Alembic](http://alembic.readthedocs.org/en/latest/)). * make it easy to switch to a different database backend such as MySQL or Postgresql Regarding that last point, I don't know how your rails app was set up in terms of the database, but if it used SQLite like this one does, that may have been the bottleneck. I believe that writes to an SQLite database require the whole database to be locked during write, so lots of write transactions (people clocking in/out) would slow the system down. Using MySQL or Postgres allows table level or even row level locking on writes which should speed the system up.
Nice! I'm going for sure.
Cool thanks for the look and feedback! I has heard of sqlalchemy but not doing web programming professionally or even regularly I had just gone at it "the hard way" that I knew. I'll definitely take a look at that as it made me feel a bit dirty hand-writing all the queries, but I knew they'd be as quick as possible since they wouldn't be going through more layers that I didn't need. As for sqlite's slowness due to locking this runs on a single computer in the spca's lobby so concurrent users weren't the issue. The check-in/out was actually just fine, it was that I did stupid things on the reporting side like sub-queries to show a total number of hours just when clicking on the volunteers list. Much of this was due to the fact that I tested with tens of records while these days there are thousands.
Well, docs is something I do a `Ctrl+F` to find and this badge... well, can't be found. I hope people will still add a text link to documentation.
You're harping on a beginner for not dotting their i's, and it's not helpful. No, a NOTICE file is not required by any sensible license. I manage dozens of packages and use hundreds more, and I don't remember seeing anyone do that, so you're the only one spreading misinformation here. He's not forking Apache, he's writing a simple little proof-of-concept bot. If you don't have any useful suggestions, please keep your nitpicking to yourself.
Do your own homework
&gt; https://github.com/akshaydixi/pasta Nice I will check it out 
This function is only called to determine if the player has already been stored into the database, so as to not spam update the db with multiple queries. Is there a better way to do this than the code shown above? I removed the first select from within the loop, but I cannot see how I can remove this one, as it is specific to each player. cur.execute("select COUNT(*) from players where name = '" + str(player.playerName) + "'") already_in_DB = cur.fetchone()
Changing it up now. Thanks for the advice!
I read a little bit about blinds sql injection, but don't think it will be an issue for this application, this script will not be exposed to anything even remotely public.
Thanks! This gave me a few ideas for what I could do with the data 
Why isn't it called the Raspberry Pi-dcast? ^Nevermind, ^yours ^was ^better.
https://people.djangoproject.com I get London based offers from this site all the time. Stick a profile on linkedin listing your django creds and you'll have recruiters swarm you.
Seriously, I just use Perl 5.x. More robust and (as a UNIX/Linux person), more in-line with what I'm already used to using in shell scripts and everywhere else on the command-line. (Yes, I know about the insanity revolving around Perl 6.) Python 3.x ain't bad, but seriously, if you're having issues, just write everything yourself or (if the library's FOSS), propose a changeset to the SCM repository for the library to make it better and more cross-compatible across versions.
Many of these issues seems be with the deep internals of the CPython interpreter, and don't really have much impact on actual userspace code. What kind of sane person would want to override methods of builtin types anyways?
You've never used Ruby before, have you. ;) That said, I think Armin lost track of his real argument here (which seems to happen a lot with his posts on the topic of Python 3) which was: The GIL is evil and makes having multiple subinterpreters kind of awful. Part of the reasoning (according to Armin) for needing the GIL is to guarantee the immutability of the global structs that provide built-in types. He's not arguing against the built-in types being immutable, he's arguing against the method with which their immutability is guaranteed. Granted that is wholly non-obvious and for people who aren't familiar enough with Python and C, this is just a scary and confusing section.
&gt; That said, I think Armin lost track of his real argument here (which seems to happen a lot with his posts on the topic of Python 3) which was: The GIL is evil and makes having multiple subinterpreters kind of awful. There was no argument to be made. It's an exploration about a tiny design decision that was taken a long time ago and what implications it has.
I have worked with the internals of the cpython interpreter and bedding it in applications, enough to know and agree most with what he is talking about. But none of this really has anything to do with the language itself, just details of the cpython specific implementation that are for the most part abstracted from the language itself. Everyone already unanimously agrees that the GIL is the root of all evil, so no point bringing that up again when discussing the faults of cpython. Same thing with global state. If any brave soul is willing enough, they could go through the entire code base and remove every static and global variable and replace them with a context pointer and change the first parameter of every function to take that context pointer, then go ahead. But the benefit added of being able to run multiple sub-interpreters within the same program memory space isn't worth the cost of such a huge overhaul of the code-base. It is easier just to spawn multiple subprocesses to handle multiple interpreters if that is needed.
Well it seems vastly out of place in the larger context unless you're saying all old design decision should be thrown out the window eventually. It's likely going to confuse far more people as well which lends only further credence to the argument that this post is more FUD than constructive criticism.
&gt; Well it seems vastly out of place in the larger context unless you're saying all old design decision should be thrown out the window eventually. It's likely going to confuse far more people as well which lends only further credence to the argument that this post is more FUD than constructive criticism. So I am in all honesty surprised by the feedback. Why is describing a design decision of the interpreter and the results of it "FUD"? The point of this post was to explore the wide ranging consequence of a design decision on the language. As said in the beginning of the post this is aimed towards people with an interest in language design. This is for the hypothetical case someone makes a new language inspired by Python.
There is no change between Python 2 and 3 there? This article has nothing to do with python 3 changes.
Isn't the whole point of the slots system to help make your *C code* interact nicely with Python? I was quite impressed with it (in my very limited experience) when I could convert an existing C++ object (image with metadata) into something that Python transparently treated as a buffer (eg trivial to wrap in a Numpy array and have all functions work on it), and as a dictionary for getting and setting metadata. All it took was adding some functions to the slot entries. I'm not sure why he's worried so much about slots if he's not using them for custom C objects. They're completely unnecessary once you get into Python (eg if you want to subclass a dict, do so in Python, don't try to change the slots in C). Also, I still don't understand the GIL hate. There's a choice you have to make when designing thread safety in a language: 1. (The C/C++ and probably most other languages choice) No global lock, let everything run as is and assume all functions are threadsafe. 2. Assume nothing is threadsafe and put a global lock around every call. *Let functions that have been designed to be threadsafe unlock the global lock* (you do know you can unlock the GIL, right?). Python has gone for option 2 here, and after spending some time on the subtleties of writing threadsafe code, it seems like a very reasonable decision. It does assume that people write their fast, threadsafe code in C though... 
I'd like to highlight a related thing that Armin didn't mention: Python has about 400 callable types, and they're basically all "because CPython". Can *anyone* explain to me some of the differences seen here, without appealing to implementation reasons: &gt;&gt;&gt; class X(object): ... def __getitem__(self): ... pass ... def f(self): ... pass ... &gt;&gt;&gt; int.__add__ &lt;slot wrapper '__add__' of 'int' objects&gt; &gt;&gt;&gt; int.bit_length &lt;method 'bit_length' of 'int' objects&gt; &gt;&gt;&gt; (3).__add__ &lt;method-wrapper '__add__' of int object at 0x7fa948d091a8&gt; &gt;&gt;&gt; (3).bit_length &lt;built-in method bit_length of int object at 0x7fa948d091a8&gt; &gt;&gt;&gt; X.__getitem__ &lt;unbound method X.__getitem__&gt; &gt;&gt;&gt; X.f &lt;unbound method X.f&gt; &gt;&gt;&gt; X().__getitem__ &lt;bound method X.__getitem__ of &lt;__main__.X object at 0x109b40890&gt;&gt; &gt;&gt;&gt; X().f &lt;bound method X.f of &lt;__main__.X object at 0x109b408d0&gt;&gt; &gt;&gt;&gt; def f(): pass ... &gt;&gt;&gt; min &lt;built-in function min&gt; &gt;&gt;&gt; f &lt;function f at 0x109b2ea28&gt; Lest you think all this complexity is necessary, try this code on PyPy, see what happens :-) And lest you think this is all cosmetic, each of these different types varies from the others (how could it not!) in interesting and bizzare ways.
Teaching someone aspects of how to function as a member of the larger community in a professional manner seems useful to me.
https://mail.python.org/mailman/listinfo/python-uk has semi regular job postings
Mmm, just a quick test of what he did on my 3-year old laptop running Trusty (Ubuntu Studio 14.04): $ python3 --version Python 3.4.0 $ python3 -mtimeit -s 'from x import A; a = A(); b = A()' 'a + b' 1000000 loops, best of 3: 0.353 usec per loop $ python3 -mtimeit -s 'from x import A; a = A(); b = A()' 'a.__add__(b)' 1000000 loops, best of 3: 0.201 usec per loop $ pypy3 --version Python 3.2.5 (986752d005bb, Jun 19 2014, 16:18:53) [PyPy 2.3.1 with GCC 4.6.3] $ pypy3 -mtimeit -s 'from x import A; a = A(); b = A()' 'a + b' 100000000 loops, best of 3: 0.00398 usec per loop $ pypy3 -mtimeit -s 'from x import A; a = A(); b = A()' 'a.__add__(b)' 100000000 loops, best of 3: 0.00206 usec per loop Approx. 88 times as fast, and if you keep running the tests it gets a bit faster. Granted, it doesn't take care of the language-versus-implementation issue, or the GIL, and not everything runs Pypy3 yet, but just couldn't we just Pypy3 all the things?
ConceptNet developer here. There were a few attempts to make a 20q game on top of ConceptNet, though none recently. I think you're asking the right questions about how to make the game, and ConceptNet could help as at least one source of data, so here are a couple of pointers that might help: * You do need a list of "words people will probably understand" from somewhere. One reasonable cutoff I use when filtering data is how often the word appears in a corpus -- and I maintain a package called [wordfreq](https://github.com/LuminosoInsight/wordfreq) that has a couple of pre-built word-frequency databases. * Measuring the understandability of multi-word phrases might be harder. Google N-grams will have the frequency information, but they're a lot of data to download. Hacky approach: take the minimum frequency word in the phrase. * Yeah, the text representation in ConceptNet's URIs is not going to be good for displaying to users, but it wasn't meant to be. It's meant to be a normalized form where you can tell if two phrases are the same internal "concept". * So, you can run a human-readable phrase through `conceptnet5.language.english.normalize` in ConceptNet 5's Python code to see if it matches something in ConceptNet, but how do you get the list of human-readable phrases in the first place? Well, this information is preserved in ConceptNet, though possibly not in the most accessible form: look at things that appear in [[double brackets]] in the "surfaceText" field. If you've downloaded the data, you could look at that entire column of the CSV, for example. * Like any semantic network, the data in ConceptNet is sparse. In many cases, it won't always give you direct information on whether a concept has a particular attribute, when nobody in any data source thought to add it. You'll need to be able to generalize by looking at similar concepts. There are graph-searching and machine-learning approaches to this; feel free to ask for more details.
 samo@Bruinen:~$ cat x.py class A(object): def __add__(self, other): return 42 The results vary each run as much as: samo@Bruinen:~$ pypy3 -mtimeit -s 'from x import A; a = A(); b = A()' 'a + b' 100000000 loops, best of 3: 0.00203 usec per loop samo@Bruinen:~$ pypy3 -mtimeit -s 'from x import A; a = A(); b = A()' 'a + b' 100000000 loops, best of 3: 0.00404 usec per loop but I'm running Spotify and 4 Chrome windows at the same time so this isn't a very scientific test. samo@Bruinen:~$ lscpu Arquitectura: x86_64 CPU op-mode(s): 32-bit, 64-bit Orden de bytes: Little Endian CPU(s): 2 On-line CPU(s) list: 0,1 Hilo(s) por núcleo: 1 Núcleo(s) por zócalo:2 Socket(s): 1 Nodo(s) NUMA: 1 ID del vendedor: GenuineIntel Familia de CPU: 6 Modelo: 37 Stepping: 5 CPU MHz: 933.000 BogoMIPS: 3989.67 caché L1d: 32K caché L1i: 32K caché L2: 256K caché L3: 3072K NUMA node0 CPU(s): 0,1
I looked into the code emitted by the JIT, and it looks to be the same (and basically optimal) in both cases. Sorry for the noise!
I don't have pypy installed. What does it do in pypy? And why does it matter what the callable things type is as long as the language does what it should?
&gt;Everyone already unanimously agrees that the GIL is the root of all evil Not me. It's a strength of the language. As I've argued before, Python's multiprocessing support is fantastic and better than many other languages' support, including expensive commercial tools. I've seen third parties create libraries with thousands of lines of code to try to get what we have built-in in Python in terms of multiprocessing. 
They are not all the same. Only some are descriptors.
&gt;I don't have pypy installed. What does it do in pypy? &gt;&gt;&gt;&gt; class X(object): .... def __getitem__(self): .... pass .... def f(self): .... pass .... &gt;&gt;&gt;&gt; int.__add__ &lt;unbound method int.__add__&gt; &gt;&gt;&gt;&gt; int.bit_length &lt;unbound method int.bit_length&gt; &gt;&gt;&gt;&gt; (3).__add__ &lt;bound method int.__add__ of 3&gt; &gt;&gt;&gt;&gt; (3).bit_length &lt;bound method int.bit_length of 3&gt; &gt;&gt;&gt;&gt; X.__getitem__ &lt;unbound method X.__getitem__&gt; &gt;&gt;&gt;&gt; X.f &lt;unbound method X.f&gt; &gt;&gt;&gt;&gt; X().__getitem__ &lt;bound method X.__getitem__ of &lt;__main__.X object at 0x02702950&gt;&gt; &gt;&gt;&gt;&gt; X().f &lt;bound method X.f of &lt;__main__.X object at 0x027029d0&gt;&gt; &gt;&gt;&gt;&gt; def f(): pass &gt;&gt;&gt;&gt; min &lt;built-in function min&gt; &gt;&gt;&gt;&gt; f &lt;function f at 0x02711010&gt; 
You can't unlock the GIL from Python, and I have no interest in writing C code.
1) open this: f = open('Error Log','a') : before of your loop. Because it is constant file handle for log file 2) i understood your point, but what i have looked : it is not specific, i think. What will if lastname and firstname between two players is equal? If you add a new player that has stored already into db with unique key you will have exception look: import hashlib .......................... .......................... cur.execute("SELECT COUNT(*) FROM players") rows = cur.fetchone() count = rows[0] #take a file handler f = open('Error Log','a') while not thePlayers.empty(): player_and_teamid = thePlayers.get() teamID = player_and_teamid.TeamID player = player_and_teamid.Player #what if i have two players : example : daniel wiggins from cleveland and daniel wiggins from boston celtics? #this code has 1 record if one of them at database #and you lose one wiggins because code will think that database already has wiggins record, you understand? And may be you should store #a hash code of the record like md5 - it will your primary id key. If you add two records with one md5 hash code you will catch #exception about double id g = str(count)+","+str(teamID)+",'"+str(player.playerName)+"','"+str(player.playerposition)+"',"+str(player.playerheight)+","+str(player.playerweight)+",'"+str(player.playerclass_year)+ "," g = g + hashlib.md5(g.encode('utf-8')).hexdigist() + "'" #cur.execute("select COUNT(*) from players where name = '" + str(player.playerName) + "'") #if cur.fetchone()[0] == 0: try: cur.execute("INSERT INTO players VALUES("+g+")") count = count + 1 except: # ? why cannot write info, because double id? you should write a reason f.write("Could not write player information into players." + str(g)) #close it after loop f.close 
The GIL is related to threading. [Multiprocessing side-steps the GIL](https://docs.python.org/2/library/multiprocessing.html#introduction).
FWIW I liked the post and found it interesting. I have used Python since forever, but never dug down into the code of CPython. It answered some of the questions I've been having on the warts in the Python primitives.
&gt;couldn't we just Pypy3 all the things I want this but for pypy3: https://python3wos.appspot.com/
ftfy is a Python package that fixes various kinds of broken Unicode, including mojibake. [Here's the latest changelog.](https://github.com/LuminosoInsight/python-ftfy/blob/master/CHANGELOG.md)
For doing data analysis in Python, you probably want to be using pandas, not raw numpy: http://pandas.pydata.org/ Your example in pandas would look something like: import pandas as pd spec = pd.read_csv(fname) spec will be a pandas.DataFrame object. In this case, somebody already wrote the complex object that you want! OOP is the only way to do some things, but usually pure functions are easier to understand.
&gt; You can't unlock the GIL from Python This is because the builtin types are not thread safe. At all. Since literally everything is an object (including the local and global scope), you would not be able to do anything practically useful within Python. &gt;and I have no interest in writing C code. Try writing Cython instead. It's almost as easy as Python and quite capable of releasing the GIL.
But I want to write Python code. Check out the subreddit name for a hint at what I like ;-) PS: http://researcher.watson.ibm.com/researcher/files/jp-ODAIRA/PPoPP2014_RubyGILHTM.pdf
I was trying to provide an immediate solution, but if you'd rather wait for/work on PyPy's STM, feel free.
Interesting article. Even though I treat Python as a 'specialised' tool. It shows how the low-level has indirect and not-so-obvious, but great impact on the high-level. I've ditched Python years ago, and quickly, for Ruby, just when I realized there is this dichotomy between, what I would call back then, 'normal methods' like get(), and the (back then) magic-why-is-it-even-there __getitem__(). My impression back then was that Python is only superficially consistent and 'nice' - you know, people say 'easy to read, easy to write'... but then you realise there is a big gap between how it actually works and how it looks to work. Having said that, I'm still interested - the Python's approach is different, which is a good thing on its own. And library bundles like SciPy make it awesome (that's the 'specialised' tool part).
Ask yourself what is the high level concept that you are manipulating, then create classes according to those high level concepts. Add state (data) and behavior (methods) to those objects, and modify the data through these methods. At your level of complexity, OOP is not a design tool. It's a clarification of intent tool. Use it as such by putting things that go together in boxes (objects) with proper names (classes). It may of course evolve towards a design tool, but if your scripts are small and stay small, it's generally not the point. When they grow, and you would end up repeating the same things again and again, then it becomes a valuable tool for reducing complexity and increasing flexibility.
Is it safe to pass all your strings through it and just fire and forget, or is there a risk it'll cause damage in some way?
Your function expresses an intent clearly to be sure, but it has the wrong name because it evaluates zero to be positive, which is just wrong.
I feel this way after every one of Armin's articles. Seems like he is in an ivory tower and knows all these zillions of things to be unhappy about with Python, but none of them affect me much in day to day coding. I guess ignorance is bliss. Lalala
At Luminoso, we pass all user input through it. It's supposed to be as fire-and-forget as possible. That's why it goes so far as to work around obscure Python bugs. Be sure to check the options. The default NFKC normalization is great for things like replacing ｆｕｌｌｗｉｄｔｈ ｌｅｔｔｅｒｓ with normal ASCII letters. But it also turns "Product Name™" into "Product NameTM" -- that's not ftfy's decision, it's in the Unicode standard -- and if that's not what you want, you should use *normalization='NFC'* instead. The risk in doing anything like this is false positives -- what if it takes correct text and "fixes" it to something different? This is why I test it on real world data from Twitter. The current version gets about 1 false positive per 6 million tweets. I think that's sufficiently low. It's three times fewer false positives than the last version. And it's impossible to get to zero false positives, because people will keep coming up with crazy text. Here's an example that really appeared: &gt;&gt;&gt; fix_text_encoding('├┤a┼┐a┼┐a┼┐a┼┐a') 'ôaſaſaſaſa' Yes, someone laughing maniacally in Unicode-art letters happens to look *exactly* like some other text, with accented letters and long esses, accidentally decoded in codepage 437. It looks like an obvious fix because five letters all decode successfully. What can you even do about that?
So you don't have to follow the link to find the price. US$20(was US$25) - Just the eBook: https://gum.co/bSzL/prelaunch US$35(was US$40) - eBook + a few sample solutions: https://gum.co/cSIzC/prelaunch 
OOP has its use if you want to organize your programs in a way that make it easy to adapt to change. For the kind of work you're doing, it seems that your current approach works fine. Generally, for small programs or throw away code, you can do fine without OOP.
Is that a joke? From your article &gt; Yes. We have less features today than we had in Python 2 for a more complex type system. Maybe the post as whole isn't meant to be a discussion of Python 2 and 3, but you do address changes in Python 3. (Granted they're present in 2.7 as well, but you present this mostly in the context of the language division.)
Heh, yeah, I'm a shitty dev because I don't follow you're arbitrary method for documenting licenses. Grow up kid.
I agree. I don't think that's classicrockielzpfvh is doing though.
OOP doesn't sound too relevant in scientific computing. You're mostly going to be performing calculations, making graphs, etc, right? Well a calculation is probably just a function, your data in lists or arrays, your graph perhaps a function call. So you don't really have much need to define classes. But since functions, lists, and arrays are objects in Python, you could consider yourself benefiting from OOP already.
sorry . my intension is to offer something to Open Source world, thats all but anyway i did acknowledge. PLEASE DON'T NAGG ME ABOUT MARKDOWN ERRORS, add a push request if you want to document or fix markdown errors. https://github.com/KaveenR/WAbot/blob/master/README.md
I bet python has missed more than a few good chances to run embedded as a scripting language because of the global interpreter design. It's a shame it's so embedded in the implementation now.
sorry . my intension is to offer something to Open Source world, thats all but anyway i did acknowledge. PLEASE DON'T NAGG ME ABOUT MARKDOWN ERRORS, add a push request if you want to document or fix markdown errors. https://github.com/KaveenR/WAbot/blob/master/README.md
Thanks for the advice. I hadn't thought about using word frequency to weight the selection process, but that's a great idea. I'll checkout your package. &gt;look at things that appear in [[double brackets]] in the "surfaceText" field. Yeah, I stumbled across this myself. I extract those values from surface-text in my `asklet_load_conceptnet` management command. When it's there, it's pretty useful, but I've found I can't always rely on it being there. &gt;Like any semantic network, the data in ConceptNet is sparse. This is probably the biggest issue I'm working on. To your point, there seems to be a loose taxonomy structure, so just looking at edges for a specific start or end point won't directly tell me everything I need to know about it. There are a few ways I've thought of approaching this: 1. Write a search algorithm to recursively calculate parent/child counts at each edge, and use this as a guide when constructing a traditional decision tree. e.g. If I know how many leaf nodes are covered by the pattern "* IsA animal", then I can calculate the information gain by asking that question. However, this approach is very different from the algorithm outlined in the patent, and it's not clear to me how to handle "I don't know" responses. 2. Use inference rules to generate edges for implied facts. e.g. If cat IsA mammal and mammal IsA animal then cat IsA animal. This is the current approach I'm testing, since the patent's algorithm should immediately work with it. However, I'm worried it will exponentially increase the size of my already large database to a point where it won't be usable. To limit this, and keep the relations sparse, I'm keeping the inferences to affirmative edges, and relying on a closed-world assumption to represent all the "A is not B" type of edges. 3. Use a Monte-Carlo method to randomly search the network starting from edges that match user questions, and weight guesses based on how frequently they're encountered and how far away they are from the starting edges. However, I've never tried anything like this before, so I have no idea how well it will work. And again, this is pretty different from the patent's algorithm. Which approach do you think has the most merit? Is there a better way? 
Well, approach 1 will run smack into the sparsity problem, and approach 2 is probably too unreliable on data that is not thoroughly logically defined. In my first year as an undergrad working on ConceptNet, I tried to do transitive inference over IsA statements in ConceptNet 2. Maybe it would have gone better if I put some sort of limit on it. I came back from lunch to find the computer spitting out an exponentially increasing number of assertions that every object in the world "IsA bathtub". 3 is a kind of randomized spreading activation approach, and there might be something to that. Basically, the idea would be, if you don't know whether a fact is true about a given node, try to find out whether it's true about a nearby node. As another way to find out what "nearby nodes" are for spreading activation, you can do spectral analysis to the graph, which is kind of like applying PageRank to it. That, combined with approach 3, is what I'd do. I have code for it but I wouldn't really recommend using it, because I'm deep in the middle of refactoring it to run reasonably on most computers. There are also word-closeness measures in WordNet, and some of them are provided by the "nltk.wordnet" module. These can be pretty useful, although they completely fall apart if you're trying to compare different parts of speech.
Yeah, you can even remove unused imports with "CTRL + SHIFT + O"
As for your example, a shorter way would be: wave, flux, error = np.loadtxt(fname, usecols=(0,1,2)) As for learning about OOP, it is IMO indeed good to familiarize yourself with the major paradigms (OOP and functional). *The* idea behind OOP is to combine data and the functions that use that data in one entity, the object. One major advantage of this approach is data hiding: you only use the methods (i.e. functions within an object) of an object and you do not access the data itself. This way, you can change the data format without changing all the code accessing it (as long as the methods themselves don't change). Also, GUI programming in general is very OOP-centered: it seems the paradigms fits very well with GUIs.
It would be nice if the whole interpreter was redesigned, and with it, the entire import system changed so that making standalone apps was easy.
Motif was just another Qt before there was Qt. It was part of CDE, which was after X, but before KDE (KDE was originally a bit of a CDE ripoff). The *original* x toolkit was just called, X toolkit, or libXt. If you want to see it in action, apt-get the original xterm.
No sarcasm. Can someone explain what you would use this for?
I have a feeling that armin spends his entire waking life looking for things in python to complain about.
It looks like you're looking for a [factory](http://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29). You already defined the factory (Stub) and concrete factory (FooStub and BarStub) objects, so you only need to define a factory function to return the proper object.
Python is ill-suited for most embedding needs because it lacks proper means of sandboxing and limiting what can and cannot be done from within Python.
This guy seems to be a bit off his rocker. If you don't like how a language is implemented don't use it. When using Python I can't imagine that many programmers even care about these internal issues. I don't. If you want perfection learn C++ and take the time to use it correctly. 
&gt; If the reception is good there will be more posts like this. Please keep writing no matter what the reception is. Your articles are great and Python community would have missed much if you stopped writing.
&gt; none of this really has anything to do with the language itself, just details of the cpython specific implementation that are for the most part abstracted from the language itself The language itself is defined by this specific implementation.
When you work in team, sometimes you'll need the mobile developer to be able to make requests while the API is still in development
Expert level is a term which is used. I actually think that's fair enough - IT has a lot of people who are simply dabblers or trained monkeys.
Cool. Will you implement something like sublime text, where you can quit it at any time and it will retain everything, including buffers that weren't saved yet?
Yeah semi interesting and all (not really new or anything) but it would be a lot more interesting to see some actual uses for this in pentesting. 
I'm not sure I see why the author thinks we'll get Python 4.0 after 3.9 instead of 3.10.
http://learnpythonthehardway.org/book/ex41.html
Well, Guido has explicitly stated that there will not be another backwards incompatible release: https://mail.python.org/pipermail/python-ideas/2014-August/028827.html
Same here. Personally, I'd prefer if changing the very first digit always means an architectural/backwards-incompatible change. Everything else is just confusing. And going with rolling releases won't help there ;) For me this point just kind of indicates that there are no real backwards incompatible changes on the horizon that might not also be addressable through a better deprecation cycle and/or community packages.
This looks like something that could make my life a whole lot easier esp. when dealing with some win1252-unicodecode-transition issue. Thanks for the link :-D
Isn't 3.10 lower than 3.9
They can do really interesting things with a major release that dont break backwards compatibility in Python. Like move the interpreter to C++ and require GCC 4.9 or later and stuff to take advantage of the new language features there. 
Interesting, I did not know that. Thank you! 
Neat, but code organization and readability could use some work imo. Following through that source was a bit less than enjoyable. 
Just for clarification: Who do you mean with "they"? :)
Nick Coghlan is a CPython core developer; I doubt he's unaware of Python's versioning scheme.
It's a huge "namespace" between expert and trained monkeys
It's also like that in math books and got confusing as hell a few times when I forgot
Honestly I find that hard to believe, considering how fast the world around Python is always changing. I think that at some point, probably within the next 10 years, Python will either introduce backwards incompatible changes or die. This is what happens to every language that wants to be general-purpose *and* very high-level. And that's OK, in the same way that it's OK that we're not scripting with GOTO commands anymore. We're supposed to expect something better coming every now and then, and this is often backwards incompatible. EDIT: Just to be clear, I'm not talking about changes that people are proposing on python-ideas now. I'm thinking about things that will change drastically in the future world that we don't know yet and that will *require* changes in Python.
This may not be true for anyone else, but I've found that my own thinking about bytes versus strings has clarified a great deal since switching to Python3. Further, I have found dealing with text quite a lot easier in Python3. Thus, I find a lot to agree with in the following point: &gt; Unfortunately, Python 2 doesn't encourage developers to write programs that way - it blurs the boundaries between binary data and text extensively, and makes it difficult for developers to keep the two separate in their heads, let alone in their code. So web and GUI framework authors have to tell their Python 2 users "always use Unicode text. If you don't, you may suffer from obscure and hard to track down bugs when dealing with Unicode input". I know as well that people often make the argument that there aren't enough sexy new features in Python3 to convince them to switch, but now that I've been using it, I tend to think the Unicode handling, aside from other features I enjoy using, would be enough on its own to compel me. I would never try to argue someone into sharing this opinion, however. For my own part, I appreciate any time a programming language can help me to see things in new and more comprehensive ways.
I somewhat disagree. Let's say I want to write a kalman filter, and then test it. That is rife with opportunities for OO. If you don't know, a Kalman filter needs several matrices and vectors. Typical libraries that you find have the programmer maintain all of those, passing them into functions. It's a mess, and unnecessary, and past a certain code size, confusing. Does this 'P' belong to this filter, or that filter? Wait, what is 'Q' again. And so on. For simple things, like 'give me the average of this list', OO doesn't make much sense. But as soon as you have state, or several pieces of data to maintain, wrapping it in a class makes a lot of sense to me. A typical scientific computing text will write a program (in Fortran or Matlab) by setting up some data, looping through it, and graphing the results. Usually there is a simulation component as well - to compare against ideal output, or whatever. Sure, the code is all eventually understandable, but it is not very clear what variables are for the actual computation, which are for for graphing, which are simulation, and so on. The code is a mess of concerns, and what is worse, completely unreusable. Two pages later, the author basically rewrites 70% of the previous listsing. I'm sorry, this probably doesn't make a lot of sense to the OP, as he doesn't yet work in this style. My suggestion, for scientific programming, is if several pieces of data can be thought of as one thing, consider putting it in a class. In the example you gave, I'm assuing that wave, flux, and error all correspond to some real world 'thing'. That probably makes sense as an object. For example, it probably doesn't makes sense to plot the wave of one thing against the error of another. Slapping those three things in a class is a handy way to refer to all three in a container. If all you are writing is 20 lines of throwaway code, not of this applies, but as things get larger it starts to make sense. Instead of writing: wave = np.loadtxt(fname,usecols = [0]) ... you write: pipe = WaterColumn(fname) I made up context that you are computing behavior of a water column. See how readable that is compared to yours? Fewer lines, and now we know what the context is. Again, that doesn't matter if you are writing 20 lines of code, but we are talking about expanding your skill sets, and moving beyond in house throwaway code is part of that. Now I have an intellectual platform upon which to build on the concept of a 'water column'. This can either be helpful or a hinderance. I've seen plenty of code where there are all kinds of specialized functions that really shouldn't be specialized because people are trying to be 'OO'. I know nothing about water simulation, but I would imagine, for example, that you would want to compute the power of a wave. You could write: power = pipe.wave_power() but wave_power is probably a pretty generic function. What happens when you want to compute the wave power in the open sea? If the computation is the same, then making wave_power() a method of WaterColumn is the wrong way to go. It is inevitable you will make mistakes, but in scientific computing think of OO as a way to collect together concepts - behavior and data. Think forward in time - "what are the implications if I added functionality X to my program" - and you will start to see when this style of programming is useful, and when it inhibits things. A lot of times it will inhibit things; I am not an OO crusader. Look at packages like astropy. If you want a coordinate, for example, you write: c = SkyCoord(ra=10.5*u.degree, dec=41.2*u.degree, frame='icrs') print(c.ra) # get in decimal degrees print(c.ra.hms) # or, get in hour, minute, second format Instead of sticking all of this stuff in several variables you now have a nicely behaving object that stores all of this information for you and provides behaviors. No bugs caused by you having assigned degrees in your 'x' variable, and then passing it to some function expecting radians. or using the wrong frame, or what have you. Everything is contained nicely for you. tl;dr - we use objects all the time in scientific computing to package concepts together. You have to balance that against generality - we don't want to write the same function many times for each of the objects in your system. Edit: also, speed. You can't really hide data away in Python anyway, but but scientific programming boils down to iterating over arrays and matrices. If you hide those behind foo.get_x(at_time=6), you will never be able to iterate efficiently using numpy, numba, or what have you. I strongly recommend using OO to collect related data, not to hide the fact that we are basically dealing with multidimensional arrays. 
Calling C code in Python is very straight forward. Depending on how much functionality from ODE you need, you might be able to write your own wrapper pretty quickly. Nowadays the easiest way to interface with C APIs is [cffi](http://cffi.readthedocs.org/). There's also the [ctypes](https://docs.python.org/3.4/library/ctypes.html) library, but cffi is the nicer and easier way to go about this.
For the longest time I wondered this too. Once someone explained it all of a sudden everything made sense. 
No, it puts as much of Python as possible into a micro controller. It is no different than the days of BASIC where BASIC in a microcontroller was limit compared to something running on bigger iron. Frankly it is no different in the C++ world where you might only use a subset of C++ when targeting a micro controller. 
Not really. As soon an interpreter can change the memory then there's no "safe" sandboxing.
He's talking about how unlikely it is that they will do Python 4.0 in this decade...
I'm relatively new to Reddit, however I think this question is better suited for /r/learnpython. *** But, while I'm here, I'll do my best to help. I'm going to assume Python3, and share this [link](https://docs.python.org/3.4/library/sqlite3.html#sqlite3.Cursor.execute) for using the `execute` function of sqlite cursors. You could use the named style, and just pass `cur.execute` a dictionary, however you could also, _probably_, pass in the `totals` parameter with the unpacking operator, like so cur.execute("Update blah=?, blah=?, blah=?...", *totals) *** Unfortunately, I don't anything immediately available to test with, but you could give those suggestions a shot! =) EDITED: To fix a typo `totals*` -&gt; `*totals`
I remember at one of his PyCon keynotes (2012?) Guido talking about certain proposed changes and Guido saying that a change like that would break compatibility and if they ever did it it would have to be held out until "a Python 4.0". From what I understand, the numbering system is supposed to guarantee compatibility within the same major number series; for instance, something compatible with 3.x will be compatible with 3.x+y. Major numbers don't guarantee compatibility, however. As you said, that would suggest that without breaking changes 3.10 would indeed follow 3.9.
He can't be aware of it based on what he wrote though.
I disagree, Python is quite the contrary of a 'specialised' tool: proof is it's a widely used language across any field and for reasons. About switching to Ruby I think depends on the team background. But having used python in engineering, research, digital processing and finance I never been in a place where ruby is even mentioned.
This contradicts... well, Guido himself at PyCon two years ago when he talked about proposed changes and if he would change syntax for PyPy or something and he replied that it would have to be in something like a 4.0 version. 
The fun part is, once you get it, trying to go back and explain the idea to people who aren't doing it that way, including those who use other languages. They will - sometimes violently - disagree with you and insist that they need their bytes and their strings need to carry around Unicode encoding information. It's not a pleasant experience. :-( But yes, once you get how Python3 does it it's hard to understand why Python 2 or any other language does it differently.
Because Guido thinks two-digit minor versions are confusing -- which is true, as you can see in this thread. Python also wouldn't exactly be the first to break with the semver ideal; the linux kernel did this (although after 2.6.39, but still with the argument '.40 is getting absurdly large'), and there are many projects that use time-based versioning instead (Ubuntu, Firefox).
If you don't support all of the semantics that's in the language reference (Excluding those explicitly marked as an implementation details of CPython), it's not a compliant implementation of the language and it is a subset of the language. (Thus "python-like language") It might be (very) slightly different if it was an obscure feature of the language that is rarely used, but proper unicode support is part of what makes python python. 
I always add "at this point in time and to the best of my knowledge and planning" at the end of such statements :)
There are technical reasons a 3.10 won't be a thing. (I forget what they are and I don't feel like digging through python-dev to remember what they are)
In a later post in that thread he explicitly rejected creating a PEP (The one that likely triggered this post from nick) that says there will never be a release like 3.0. There *probably* won't be, but we don't want to guarantee that either.
People have hard time grasping the concept of version numbers being unlike decimal numbers, apparently.
Not 100% true, Python 3.4 broke some a classmates code that he originally tested on 3.2. It involved os.pipe() and file descriptors, but I'm fairly sure he was a bit of an idiot. 
Python definitely introduces changes that break backwards compatibility. Python 2.6-2.7 broke support for float('1.23D4'), which is a hangover from Fortran. It's a major change that forces a major version bump. Minor changes that generally don't affect you force minor version bumps. It's the difference between an 0 to 1 hour upgrade time and 3 days. 
Unless there's an explanation, source, or repeatable example, I don't think that's going to fly, especially with your last comment. That sounds like a very OS environment related issue rather than Python. If you start working with raw FDs and pipes, you're stepping much deeper into the OS realm where behavior is going to change environment to environment.
And yet the evidence suggests otherwise. It's rather odd.
See [PEP-446](http://legacy.python.org/dev/peps/pep-0446/) I encountered the same problem with os.pipe when developing with 3.3 and testing on 3.4.
It was a class assignment where we had to implement a shell. Part of the requirements was using os.pipe(), os.fork() and os.execvp() to spawn new processes. You're right that it is os level and subject to change, but the change was in the Python 3.4 implementation that caused issues. 
Nice spotting. I didn't realise that Unix and windows handled file descriptors so differently, make sense to change the python implementation though. 
&gt; For simple things, like 'give me the average of this list', OO doesn't make much sense. But as soon as you have state, or several pieces of data to maintain, wrapping it in a class makes a lot of sense to me. Exactly.
Its needed for a reason, stuff like cmd.exe doesn't use utf8, it uses some wacky code page so if you tried printing something that wasn't in the right codepage that it expects it might break cmd.exe or have garbled text 
I would have to suggest a regular expression solution, and treat each line the same. Whichever it matches the most, it will be treated as. 
I think it's more likely the author has something similar to the Linux kernel's 3.0 bump in mind (emphasis mine): &gt; On 29 May 2011, Linus Torvalds announced[194] that the kernel version would be bumped to 3.0 for the release following 2.6.39, **due to the minor version number getting too large** and to commemorate the 20th anniversary of Linux.
More significantly, some Python 2 version also broke raising strings as exceptions. There was a time when you could do `raise "error message"`, but that doesn't work in Python 2.7. And any new keywords, like `with`, break some compatibility with programs that used that as a variable name. Ancient versions of IPython had a `with` function, for instance.
I read that essay first and then came back to it later and only understood it then after previous struggles.
Good ol' Emacs for everything :)
An array with shape (22, 1) has two dimensions. It has 22 rows and 1 column. An array with shape (22,) just has one dimension with 22 entries. &gt;&gt;&gt; a = np.array([1, 2, 3]) &gt;&gt;&gt; b = np.array([[1], [2], [3]]) &gt;&gt;&gt; a.shape (3,) &gt;&gt;&gt; a.ndim 1 &gt;&gt;&gt; b.shape (3, 1) &gt;&gt;&gt; b.ndim 2 A 2D array is different to a 1D array, and some functions will expect only 1D arrays for example.
I suspect he means "breaking release" in the sense python3 was. Ie. a sharp break. There'll likely still be backward incompatible breakages in the same way there were in the python 2 point releases (ie. 2-3 version deprecations with warnings with `__future__` style activations for major ones, and minor breakages being allowed in corner cases etc (ie. not requiring bug-for-bug compatibility)).
Being the RaspberryPI a piece of hardware and not an operating system, I'm pretty sure the software is going to work on "other" operating system. Frankly, to me this seems like a dude trying to raise some extra money out of a project he did for his PhD and he thought that adding the cool piece of hardware of the moment in the mix would have raises his chances...
I just moved from Sublime Text (not really an IDE) to trying out PyCharm. So far I like it: * Pros for me: tons of features, code completion is great, zipping to wherever a class or function is defined by clicking on it is handy. Refactoring is super nice. * Cons for me: the UI lag and non-standard UI look (which I assume is an artifact of its Javaness or cross-platform support). I miss the ease of the Sublime text based configuration and Package Control. Overall though probably going to buy it when the eval period ends.
I myself use Eclipse with PyDev. If you already know your way around Eclipse, I do recommend it, but for an beginner in both python and eclipse it will get in your way. In that case I recommend something smaller, like any editor (vim, emacs, nano, etc.) 
Oh cool. Thank you!
I use vim for everything.
I brought up the question of the default encoding for files with Nick Coghlan recently, because I agree with you that having a single default would be much easier to understand than the current situation. Apparently it is possible that they'll revisit that for something like the 3.6 release, as more and more of the world is UTF-8.
I use Emacs(jedi+rope-mode+company-mode) because it's easy to customize, also if you want to make it more usable try ergoemacs-mode.
Pycharm for big projects, sublime text or notepad++ for small scripts
WingIDE. It's got an amazing debugger. I've tried PyCharm and Eclipse. They have nothing on WingIDE (other than the cost), but if you're new you can probably get the student version.
idle
I can definitely understand disliking double digit versioning--it can be very confusing to people who aren't familiar with the idea. But why don't developers ever just use *letters* instead? There are way more than 10 characters you can use. What's wrong with 3.6, 3.7, 3.8, 3.9, 3.A, 3.B, 3.C, etc?
I like your thinking... Do you know if anyone is working on that?
I'm currently using Pycharm's free version. Is it worth forking over money for a subscription?
PyCharm
Python Tools for Visual Studio. Really excellent http://pytools.codeplex.com/ 
Vim
I kept the seat warm for you. I just had my last 2.7 dependency removed and I'm up in 3.4
Oh, so close, but not quite. Each one of those slices makes a new copy of your list. If you're working with a long list, it would be nice not to have to make 5 copies of the list if you want to find 5-grams. And you don't have to: from itertools import islice def find_ngrams(seq, n): return zip(*[islice(seq, i, None) for i in range(n)]) This works given the constraints of the article, namely that the input is a list, or more properly, that the input is a sequence: it supports indexing and has a length. But what about generalized iterators? A sequence is just a particular kind of iterable, which is a far more powerful concept -- a series of items that can be iterated over, and which might be lazily generated. For example, suppose you have some text and you want to split it into words and then normalize the words by removing punctuation and converting to lower case. You could do all that and create a list which is fed to the above function, but why? You don't actually need that list -- it's not necessary to the task of generating n-grams. You could create the words on the fly using a generator expression for instance. But the above function does not work in that case, because each iterator shares the same underlying sequence. text = ('It was the best of times, it was the worst of times, ' 'it was the age of wisdom, it was the age of foolishness, ' 'it was the epoch of belief, it was the epoch of incredulity, ' 'it was the season of Light, it was the season of Darkness, ' 'it was the spring of hope, it was the winter of despair.') result = find_ngrams((word.rstrip('.,').lower() for word in text.split()), 5) Result: [('it', 'the', 'times', 'worst', 'the'), ('age', 'of', 'wisdom', 'it', 'was'), ('the', 'age', 'of', 'foolishness', 'it'), ('was', 'the', 'epoch', 'of', 'belief'), ('it', 'was', 'the', 'epoch', 'of'), ('incredulity', 'it', 'was', 'the', 'season'), ('of', 'light', 'it', 'was', 'the'), ('season', 'of', 'darkness', 'it', 'was'), ('the', 'spring', 'of', 'hope', 'it'), ('was', 'the', 'winter', 'of', 'despair')] (I'm only creating a list of the results for display purposes, but in general you would want to work with the return value as an iterable, without forcing it to be collapsed to a list.) That's no good. Why can't we work with generalized iterables? We could make a bunch of copies of the iterators with `tee()`, but there's a better way: from collections import deque def find_ngrams(iterable, n): d = deque(islice(iterable, 0, n), maxlen=n) yield tuple(d) for item in iterable: d.append(item) yield tuple(d) This does what we want, resuling in: [('it', 'was', 'the', 'best', 'of'), ('was', 'the', 'best', 'of', 'times'), ('the', 'best', 'of', 'times', 'it'), ('best', 'of', 'times', 'it', 'was'), ('of', 'times', 'it', 'was', 'the'), ('times', 'it', 'was', 'the', 'worst'), ('it', 'was', 'the', 'worst', 'of'), ('was', 'the', 'worst', 'of', 'times'), ('the', 'worst', 'of', 'times', 'it'), ('worst', 'of', 'times', 'it', 'was'), ('of', 'times', 'it', 'was', 'the'), ('times', 'it', 'was', 'the', 'age'), ('it', 'was', 'the', 'age', 'of'), ('was', 'the', 'age', 'of', 'wisdom'), ...]
And of course the unbound methods become regular functions in pypy3 https://docs.python.org/3.0/whatsnew/3.0.html#operators-and-special-methods
I use Spyder - I like the compromise between a heavyweight IDE like Eclipse and a plain editor.
It "doesn't work" in that it throws an error, but since that's what you were trying to do anyway, it can be easy to overlook that it's not the error you meant to raise.
If you give the code to the client in any form to be executed at the client side then a sufficiently motivated person can read it. It doesn't matter how many layers of compilation or encryption you add, at some point it has to be decrypted for execution at which point an attacker can reverse engineer the code. The only way to solve it is to never give the code to the client in the first place which necessarily implies that the code has to run somewhere else under your control. Which would be a server somewhere. Of course that also implies that the server is secure, your code doesn't leak information and the calculation itself is non-trivial enough that it can't be modeled by sending sufficient requests and looking at the results. Or that it's simply not interesting enough to attack. 
Doesn't it just raise a generic Exception?
Also vim
I write Python for work (research) and Spyder is really good for ground up coding. Though vim still rocks for edits.
Last time I used it, PyDev for Eclipse was really good. The real-time compile error checking and autocompletion worked well.
Well, Emacs is just Vile.
vim when doing work on a remote server, Sublime Text when coding on my personal computer(s).
Komodo Edit
If you want to know that, add logging. The latter two could be implemented by lists, but there is no way to know that the list you're indexing is bound to '`a`'.
If you want a full fledged IDE that's free, I'd try out PyCharm Community. Seems like the primary difference between that and the paid version are syntax stuff for django, web2py, etc.
&gt; but there is no way to know that the list you're indexing is bound to 'a'. why not? It's got an var.__class__.__name__ that you can access using the inspect module. You can use the inspect module to do all sorts of cool things, like printing what line on what file was the call that called your function in a separate file. It's very useful.
that runs on windos right? 
Same, but with jedi-vim plugin.
vim with enough plugins definitely constitutes an IDE. It's extremely versatile.
Typically when people ask about IDEs and are new to programming at all, I think any text editor people use to edit code is a valid answer. 
The exception is being thrown from within the list class. class MyList(object): def index(self, i): raise Exception("IndexError") - a = MyList() b = a b.index() // throws How do you modify the `index` function so that when the exception is thrown it knows the list is bound to `b`?
This a rare post where an Emacs user defends a Vi user. You can certainly setup Vi to be very much like an IDE, just as you can with Emacs.
This looks great, and like a really fun thing to have written. That said, I'm having a hard time figuring out when I would ever need this. So long as `pip freeze` spits out version numbers, I can't think of anything in the examples that wouldn't be accomplished by simply running `pip install -r requirements.txt`. 
That is a gross oversimplification. There is data and there is code. Data segments are memory pages marked as non-executable so even if you can modify the data however you see fit, you still cannot execute any arbitrary operations or force the machine into an unexpected state without the ability of modifying the executable memory. And that possibility is limited by sandboxing and taking away the tools that could let you exit the sandbox (which in Python's case is currently impossible and which you get free with languages like JavaScript or LUA).
Guido tweeted this article, so he can't disagree too much: https://twitter.com/gvanrossum/status/501172370690699265
Same, except I use vim in lieu of Sublime for smaller projects/scripts. On a side note, I am also pretty excited for the upcoming JetBrains C++ IDE. I will still stick with vim and GNU toolchain for pure C, but I really like PyCharm's general layout a lot for OOP, so it may be interesting to integrate it Cython working into the same IDE family.
Netbeans. Surprised no one mentioned yet. 
The unix shell is an IDE. Additionally, it is largely language and OS agnostic. (Window's doesn't count as an operating system.) Investing in learning how to use the shell and command line utilities will pay dividends far greater than learning how to use any IDE.
(I think you missed a word, he said *no* backwards incompatible changes.)
Python tools for Visual Studio, Pycharm for non-Windows projects, Coderunner on Mac for small stuff.
It seems odd to see someone down voted for answering the question. I suspect it's because you admitted to working directly on your servers.
IntelliJ. It really is awesome.
&gt; Sometimes it seems like we should've gone with 2.A.1 or something to force people to not treat them mentally as decimals. Or dates, like 2.2014-8-1.minor. Or used a different separator. This is something that all software versions were doing since the beginning, it's not just python, it's not something "we" chose to do, it's the industry standard. The most recent version of Mac OS is 10.10, the Windows before 95 was Windows 3.11, which was preceded by 3.10 and 3.9. Since you mentioned dates, it's also common to write dates this way, especially in Europe. Today's date is 17.8.2014
iPython on one screen, notepad++ on the other
IMO the better line of thought is: "What's the right tool for this job?" instead of "I'm a Emacs user, how can I use Emacs to do this?". EDIT: http://en.wikipedia.org/wiki/Law_of_the_instrument 
what's the benefit of a proxy object?
Yup. Is gnome-terminal and gvim acceptable?
yea but why not just use an IDE that does everything??
Wow, I guess I'm the odd person out. I use Geany. It's a GTK based IDE that's very very light. It does everything I need it to do, and it's FOSS. It's more or less a better version of notepad++ (IMO), but isn't Windows only.
For one thing, they make writing a decorator far more robust.
I keep wanting to try PyCharm for Django, but sadly its Django features are apparently limited to the paid edition :(
Vim is better at emulating an IDE than IDEs are at emulating vim.