If you are on a single node, you are not working in a big app.
Let's call the indices i and j. If i or j is scalar, then the slice includes just that row or column. If i or j is a stride like 1:5, then just those rows/columns are returned. If i and j are arrays, then they should form pairs. So y[(0, 1), (2, 3)] returns y[0, 2], y[1, 3]. If the shapes aren't the same, it can't form pairs. Check the first example here https://docs.scipy.org/doc/numpy/user/basics.indexing.html#indexing-multi-dimensional-arrays
So like what's available in Python 3.6
I didn't mean to exclude the self sorry, was in a hurry! I don't think it will require methods and functions to be different with an explicit self, would it?
Python checks the syntax by executing it. When a function is defined, and the script is processed the function statement is executed, and the function object lives in memory, and attributes of the function object are available even if the function is never called.
&gt; To activate a virtualenv simply type `source path/to/venv/lib/activate` (or `path/to/venv/Scripts/activate` if you are working on Windows) Just a note, I think that first code snippet is a typo and should read `path/to/venv/bin/activate`. 
typecasting
Thanks for your comment. The reason I decided to write my own JSON Schema validation module is that I plan to add support for parsing and validating instance data via Swagger (Open API) specifications. The current implementation uses a few design patterns that allow me to decouple the algorithms for resolving, validating, and converting JSON Schema documents, into separate classes. I do very much like the `jsonschema` module, and I have used it myself. However, I think that given the considerations of adding support for Swagger specifications and other data-interchange formats, I decided to write a module from scratch that allows me to focus on reusing a lot of the existing components.
Unittest is in the standard library, easy to use, and very familiar if you've done anything in the style of xunit Pytest, which I came to after ~5 years of unittest, is much better imo. Fixtures are amazing in pytest, though the semi-magical DI behaviour may not suit you. Personally I had to learn the use of pytest.mark.parametrize before I was happy For mocking you want unittezt.mock (python 3) or mock (python 2). Afaik they are kept in parity excepting the namespace. Pytest also has a mocklike piece (mokeypatch) but id suggest using mock instead For before /after each test you can use setUp/tearDown (unittest) or fixtures (pytest). In pytest you most likely just want to use another fixture. I Prefer the pattern class TestFoo: @pytest.fixture(autouse=True) def setup_teardown(self): # name can be anything # setup code hete yield # test will run # teardown code here def test_one(self) : # actual test here
I used to worry about that until I learned you can def a function nested within another function. That solved it for me beautifully!
Without a doubt, relative imports.
You just hit on my biggest issue by accident... a very common one actually. You named your *self* variable ‘a’. *self* should be a keyword like *this*, and should not be a required first param to instance methods.
https://www.edx.org/course?search_query=Python
Hi OP, If it hasn't been mentioned already, if you're using a windows installation, it's a permissions issue in the c:\program files\pythonwhatever path. Simply adding your user with full access to the C:\Program Files (x86)\Python36-32 folder (and propagating down) will fix the issue both in VSCode and using pip in a terminal. 
That is awesome. Thanks!
Oh nice, that's pretty cool, thanks. I use Jupyter notebooks quite a bit, so that's helpful.
I like the dollar signs. It reminds me not to slack off. One day at a time. :)
This is a terrific question, and something I'm questioning myself. For example, I have a safari books login. In order for me to have the document I have to download it using tokens. However, I also can't read page after page of these books online in the browser. If I choose the print option I can print each page as a PDF, and in the past I've merged them using python. I can't read"books" in the browser very well, but in PDF they're fine. Now, I'm trying to use python to download them all automatically and merge them. I feel that I'm simply automating a process I would be doing manually, and am not accepting any data I don't already have access to; therefore I'm not stealing. Am I looking at it from a skewed perspective? 
Ahh, I was gonna say....aren't we on 3.6?
and yet, I was dowvoted for saying this. Garbage!
not sure what you mean val on the function definitions. however they do have it in the class initialization class Person(val name:String, val age: Int) that is basically the equivalent in python like: class Person(name, age): self.name = name self.age = age prefixing the val on the constructor automatically creates a property for that argument. I do agree with the `map` in kotlin its pretty weird. I wish they did it like `dicts` in python like I said. kotlin is the closest language to python that you can do android development with. I even hate how functions are defined as `fun` instead of `func` but i'll take it over java anyday. 
&gt; Virtually zero web development is done at scale. Everyone thinks they need to plan for super huge scale, but that's a pipe dream 95% of the time. this * 10^8 
&gt; When sealing, the most-recent message hash is pulled and combined with the block's prev_hash and the current timestamp. Only the most-recent message hash is required, since it transitively includes all prior messages in the block due to the message chaining described above. Without anything to make a block "worthy" e.g. proof-of-work (which is beyond the scope of the implementation, as the readme says), I don't see why blocks are even necessary since messages have a timestamp which establishes the order they're in.
If you have a better idea, I'm all ears! I'm butting my head against te idea that what I do feels wrong, without having a b etter way of doing it :(
I've been mostly happy with pip-tools as a solution to the first problem.
Sidebar...
ethics of webscraping? *ahem out the window
The only concurrency issues I've had is with event driven programs. Even then multiprocessing works just great. Get an event, stuff it into a queue. It just works.
[Transcrypt](http://transcrypt.org/) orf any of the other transpilers can help you there. With a bit of effort you might even be able to target electron, so you're able to run native Python on every platform :/
Thats pretty much the same thing I'm doing and what triggered this question. Someone mentioned looking at robot.txt of websites which i think is a good point. I found that the site I was scraping had all bots blocked out so I'm still unsure of how I feel about it.
You can create shared memory fairly easy in Python. Just use mmap
What have the poor iterables done to become the focal point of your wrath? They might be slightly vexing while messing around in the REPL, but otherwise? Btw, I think you missed a final above.
There's a couple gui automation libraries for python. You'll need to Google as I can't remember off the top of my head. You may also get more help over at /r/learnpython
Setting up some CI (tested both giltab and circleci). The documentation is always super slim, if there is one, about python!!! I still don't know how to do parallel tests with pytest. Do I need to use xdist with pytest-circleci, do I need to set the parallel thing etc. Nothing is clear.
&gt; By the way, good luck if you are in an environment where you don't have root. You'll have permission to pip install into your venv, but not to apt install the library! So these packages are off-limits to you unless you get the administrator to install the libraries for you i've gotten around this by using buildout. like this [recipe](https://pypi.python.org/pypi/zest.recipe.mysql/1.0.4) for example 
Why would I ever need an immutable list? And that trailing comma is inconsistent syntax, since tuples of all other lengths don't have a trailing comma.
asyncio won't help you anyway if you need parallelism for CPU-bound work.
 from __future__ del Tkinter 
That's what the error message seems to indicate. But why not just start with the first item, and have an if statement or try/except to check if the iterable is empty?
They've taken over all lists everywhere. Annoying.
You can already have a list/array of multiple types. Why does tuples help for that case?
Usually, yes.
Phone slipped and I hit enter. Fixed question now
is there any guides on mocking libs?
Literally every day I hear people talk about their Excel and VBA empires. People whose entire professional existence is based off of running reports through Excel. Best case scenario they're making JDBC connections, worst case they're copying and pasting from SharePoint. I have legitimately seen this as a workflow for putting together *the* monthly report to a Senior VP at a large bank. I wrote the whole thing in Python and made two works of work ten seconds of work. This is reality at basically any large company.
Could you post the code somewhere? Did you start your mainloop? Keyboard and mouse bindings don't work if you don't start it. If you don't know what it is, I highly advise you to read on it: https://stackoverflow.com/questions/8683217/when-do-i-need-to-call-mainloop-in-a-tkinter-application
Just curious: how is this any different from any other language with a standard package manager?
I'm starting to get second thought on my initial open and trusting stance towards you... What illicit dealings do you actually have with those lists? * Mutating them while walking? * Walking them twice? * Filling them with eels? Jokes aside, how do you deal with lists, if "for item in foo" isn't cutting it for you? 
I would say that the robots file only tells bots which directories to stay out of. Not only that, it's optional. There really isn't anything that says you have to follow it. I would say that as long as your program is accessing data you already have legal access to your not violating any rules. As I think I saw it mentioned, you may want to throttle the speed at which the data is accessed as a courtesy to the site.
`from pprint import pprint` I wish pprint was the default and that I would have to import a "compact print" for normal printing.
Sure, but the fact that copy is a standalone library means I can't be as certain that it works seamlessly with everything. It probably works with popular libraries like pandas, but can I be certain that it works with every obscure library out there? If copy was a native function, I could be certain.
Http://repl.it/KC0L/0
Are you talking about unicode -&gt; str -&gt; unicode in python 2?
It's the other parts: slicing, searching, examining data at a certain index...
I believe that mainloop() is a method of Tk(). Try replacing last line with: &gt; root.mainloop()
I've had that too, missed it in the code I posted It still doesn't move the object.
Concurrency and package management/distribution/management. Virtualenvs are crucial but seem more of a hack way to manage it because no one wants to fix(bad word) Python.
True. Although I could use a thread or process [pool executor](https://docs.python.org/3/library/asyncio-dev.html#handle-blocking-functions-correctly). The worker would get a copy of the state it needs when it runs, and the asyncio loop would update the state when the executor returns an update in a future. That gives a single source of truth and since asyncio loops cannot be preempted it only needs a lock if updating the state needs to yield (probably not). Nice and clean. So I think I could get a better solution with `asyncio` than `multiprocessing.manager` (which needs multiprocessing-aware subclasses of its own structures to work properly rather than the defaults, a surprising-for-Python design decision that makes it very intrusive). However, I'm not sure it's worth the effort. 
That part of the documentation is incorrect as you can try out (`y[np.array([0,2,4]), np.array([[1],[2]])]` works but `y[np.array([[0,2,4]]), np.array([[1, 2]])]` does not. What does work is `y[np.array([[0,2,4]]).T, np.array([[1, 2]])]` because now you have a shape (3, 1) broadcast with a (1, 2) to create the expected (3, 2) shape.
&gt; Why would I ever need an immutable list? For one, it helps to reduce bugs that arise from unintentional modification. &gt;since tuples of all other lengths don't have a trailing comma. They can if you want them to :-) If i write literals, I put a comma on the end so that I can come back later, add to the end, and not have missing comma bug. Iv'e lost count of the number of times I've added to a json and broken it from not adding a comma, because Json doesn't allow a trailing comma.
I don't understand how you used two mainloops (you can use only one), but if root.mainloop() doesn't work, then I'm useless. Not a tkinter professional, sorry :)
Relative imports are absurdly annoying
Yeah, one of my colleagues recently said something along the lines of "if you can't beat the IT folks, you have no business being an engineer." I can always beat them, but their obstruction is a waste of everyone's time.
I meant I had root in there too. Forgot to add it in the online post. Yea, Idk why this doesn't work, gonna link a button, not a key to it to see if it moves. Do you know how to import photos ? Any suggestions on what module I should use for GUI games ? 
I didn't say you _can't_, I said you should feel icky doing so. A simple reason is that typically, one iterates over a list, performing some operation on each value. If the values have different types, it is difficult to perform a useful, uniform operation on each of them. A more complicated theoretical reason is that [lists can be used to model nondeterministic values](https://karczmarczuk.users.greyc.fr/Essays/nondet.html), which doesn't mesh well with varying types in a list. A third reason is that the tuple is the canonical [product type](https://en.wikipedia.org/wiki/Product_type), meant to group values of varying types.
I use threading when I have IO bound tasks that I want to occur simultaneously, and also to separate the main loop of my UI from any backend/business code. I use multiprocessing whenever I have CPU bound tasks like heavy number crunching. I rarely use the multiprocessing module though, I opt for something like dask to manage that for me. Threads are generally lighter weight (less overhead) and more useful than processes. I frequently have many threads running simultaneously in my business logic code, but I also do a lot of peripheral hardware interaction (I work with a lot of electrical lab equipment like oscilloscopes and whatnot). These types of operations are frequently slow but the CPU isn't really being utilized while those operations are occurring. I can use those cycles for something more productive, like writing to the disk or crunching numbers. I also find having thread boundaries in my code can really help to compartmentalize code. Each thread is essentially a small program receiving inputs and producing outputs at any time. Having to write my code to handle this style allows me to separate different tasks more cleanly, even if I rarely introduce more threads than are necessary. 
Do you have a link to the relevant section of the documentation? I am unsure what to search for.
This is why I switched to go, single binaries are wonderful. 
Say you have a list with 5 things in it. You need to perform computationally expensive operations on all five of them. Now, instead of sequentially iterating through and performing said operations on each of those items, do you think it would be a good idea to use threading? Because, if I'm understanding correctly, that would mean all 5 of the objects in the list would be subject to the same processes at the *same time*. That should make the program quicker. Right?
Slow IPC mechanisms, relative difficulty of sharing information. Multiprocessing is great for long tasks that don't need to talk to each other often, but for short, chatty tasks, it is massively unperformant.
Keep going!
You can make the problem less obnoxious if you set up an internal PyPI. It doesn't go away, because new packages have to be mirrored onto the internal PyPI, but it means when everything gets blocked, critical tasks can still install off of the internal server.
Hey Jack! Can you open terminal and run the following commands and post back with their output? &gt;which python &gt;which python2 &gt;which python3 &gt;which pip &gt;which pip2 &gt;which pip3 You should get results similar to (if not comment what you do get, you might have a PATH issue): test$which python /usr/bin/python test$which python2 /usr/local/bin/python2 test$which python3 /usr/local/bin/python3 test$which pip test$which pip2 /usr/local/bin/pip2 test$which pip3 /usr/local/bin/pip3 One thing that has been catching people up lately is that the brew formula for python/pip was updated to use the aliases of python2/pip2 and python3/pip3 to not conflict with system python as per [https://github.com/Homebrew/homebrew-core/issues/15746](https://github.com/Homebrew/homebrew-core/issues/15746) (homebrew by default installs /usr/local/bin/, system python is in /usr/bin/). Another check to do is `pip3 --version` and ensure it outputs something like this: `pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)` in /usr/**local**/lib/ If all of that looks correct, assuming you are using the Python plugin from donjayamanne [here](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python), open the command palette (F1, or ⌘+P then &gt;) and type 'Select Workspace Interpreter' and press enter, then select the correct interpreter you wish to use (/usr/local/bin/python3 should be the one installed with Homebrew). After that when it attempts to install pylint it should install to the correct 'instance' of python. One thing I would suggest is looking into using virtualenvs, and particularly virtualenvwrapper. The python plugin in vscode is virtualenv aware, so if you open a terminal, activate your virtual env, then open vscode from that terminal in your project directory `code . ` it will automatically use the virtualenv version of python and all pip commands will be local to that. See [http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/](http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/) for more info. 
Oh thank you! Didn't know that sub exists! I will definitely ask over there. 
I think importing pictures you can easily google. Pygame is a very good one for games. You must understand that tkinter is a module for interfaces, not games. https://en.wikibooks.org/wiki/Python_Programming/Game_Programming_in_Python
The GIL
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Serious question: Can you debug with breakpoints in the browser? I highly doubt it because it's already annoying enough to do in coffeescript 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I am a huge fan of `concurrent.futures`, but the shared-memory types in `multiprocessing` can also be useful. Which of the various approaches is the best really depends on the use case.
threading? almost never. it's mostly useless for cpu bound ops in C python because of the global interpreter lock; only one thread can run python code at a time. You can use it for IO multiplexing but that sucks too IMO. Use twisted or gevent or asyncio for that, they're all faster and easier. Occasionally I'll use threading WITH gevent or asyncio but only because I absolutely have to make a blocking IO call; twisted's defer to thread feature is nice if you have to make blocking IO calls in a twisted app. Did I mention that threaded code is easy to fuck up? Multiprocessing is a lot more useful because it can multiplex both IO and CPU bound tasks. Unfortunately because those tasks run in separate processes it's a little trickier to share data but thems the breaks. I really like the multiprocessing pool imap function. It makes it pretty damn easy to distribute a workload across a pool of automatically managed workers. If you need to distribute load to multiple nodes then use celery.
not in python b/c only one thread can execute python code at a time; the other 4 threads will block and wait to acquire the GIL. multiprocessing.Pool.imap is what you want
Doing some astronomical data analysis on ~50000 quasar spectra, trying to separate out different spectral features. It's really a job for machine learning though. 
Thanks! So you're saying multiprocessing.Pool.imap should allow me to those perform operations in parallel AND get around GIL?
The `Pool` object will (by default) create a separate python process for each of your cores, then `.imap` will distribute the values of whatever sequence it is given to each of those processes. There are caveats, such as the function you want to map has to be importable (i.e. it can't be an instance method of a class) and the values you want to map over and return have to be pickleable. This does perform the operations truly in parallel, and it "gets around" the GIL by having 1 GIL per expensive operation.
The official Slack client python module doesn’t yet support Python 3. I mention it only because I use Python 3 for all new projects and ran into this. It’s the only one so far though.
exactly the costs are different from threads. processes are heavier weight, although it's fine to run up to one proc per cpu core. usually no point running more than that because they would just contend for the CPU cores and use a lot of ram. in fact in a ram starved system running memory inefficient python code you could run out of ram with only a few procs. if you run out of ram your system will start to swap memory to disk and that is suuper slow. the main cost is the fact that the data is in a different process; this complicates getting data back and forth. imap ultimately pickles the data and sends it over a socket or a pipe or something so your data has to be pickle-able. the data transfer has both cpu and IO costs. if you don't want to use imap you can use queues but that still requires pickling. multiprocessing can work with ctypes to create shared memory but only for primitive types. 
Nah, I think the pep made a mistake in suggesting that, as it contradicts normal style rules. Either the lack of spaces around regular defaults is wrong, or this special case is imo.
My favorite thing about python is how everyone agreed on canonical standards for how to do things. This part of the zen of python accurately sums it up: &gt; There should be one -- and preferably only one -- obvious way to do it. However, there are still a lot of things for which the canonical "solution" feels fractured * packaging and distribution * standalone distributables * unit testing * datetimes * command-line processing * threading/multiprocessing/async * type hints * path manipulation Some of these have improved, but most have not. In fact, it almost seems worse because as the amount of legacy codebase grows, the chance for changing anything becomes even harder. 
Until you get into the realm of drag and drop in a model-view architecture, when PyQt starts crashing the interpreter, leaving you wondering what went wrong and what you can do about it.
It's hashable, so it can be a dictionary key or a set item, unlike a list
True indeed but there's also [What’s New In Python 3.7](https://docs.python.org/3.7/whatsnew/3.7.html) - "Note: Prerelease users should be aware that this document is currently in draft form. It will be updated substantially as Python 3.7 moves towards release, so it’s worth checking back even after reading earlier versions".
Even without interface builder, creating interfaces with Objective-C and UIKit programmatically isn't bad. It's actually enjoyable to me, whereas I loathe having to build things with java.swing. I don't have much experience building GUI's with Python, but the last time I tried, it was more of a pain in the ass than using swing, so I'll just stick to command line tools. This could just be ignorance of new improvements and libraries though.
Tell that to Autodesk. Tech artists worldwide are shackled to 2.7 until Autodesk deigns to upgrade their interpreter.
Jython 2.7.1 was released on 1 July 2017. What about pypy, nuitka etc.?
One of the nuances here is the terms of the licence you are using. It may be that the vendor has a whole version of the item for sale under a different licence. The licence you've bought/agreed to with the ebook may just be for browser based consumption etc. 
[gilectomy](https://github.com/larryhastings/gilectomy).
That's horrible :(
I still don't see how there is anything you can do with tuples that you can't do with lists. If you want an ordered collection of items of the same type, use a list. If you want an ordered collection of items of a different type, use a list. If you want an ordered collection which won't be changed, use a list, and just don't change the items. Tuples are nominally immutable, but if the elements of a tuple are a list of dict, then you can change the contents of that, therefore tuples are not perfectly immutable, therefore you may as well use a list.
I would go further. I think bots is a poor excuse for proper drm. If you don't people to have your stuff, lock it up properly. Asking users to "be nice" is always going to end up with folks not being nice and grey areas. 
Oh!! Sorry then. Yes, an explicit self wouldn't force them to behave differently :)
What's non copyrightable? 
I prefer to use and support open source software whenever I can and I didn't like the idea of used a "restricted" free version of paid software, but I find that Pycharm Community Edition has every advantage of VS Code and then some (edit: except being open source).
Using a list or tuple as a dictionary key seems like bad style. But while we're on the topic of bad things about python, why aren't lists hashable?
Use Python 3. While you might find some sources on the internet that say PyQt5 and Python 2.7 are compatible I've had nothing problems with the two. Once I switched to Python 3 those problems went away. 
Mutable objects can't be hashable, because their hash would change, which defeats the purpose of a hash tuples make sense as keys for sparse multidimensional data structures
I wanted to see how much imap could speed up a program so I wrote this and timed it: %%time import multiprocessing import time def func(n): if n % 2 == 0: return False sqrt_n = int(math.floor(math.sqrt(n))) for i in range(3, sqrt_n + 1, 2): if n % i == 0: return False return True if __name__ == "__main__": p = multiprocessing.Pool() PRIMES = [ 112272535095293, 112582705942171, 112272535095293, 115280095190773, 115797848077099, 1099726899285419] for x in PRIMES: print(func(x)) Output: True True True True True False CPU times: user 2.72 s, sys: 40 ms, total: 2.76 s Wall time: 2.73 s Next I tried this: %%time import multiprocessing import time def func(n): if n % 2 == 0: return False sqrt_n = int(math.floor(math.sqrt(n))) for i in range(3, sqrt_n + 1, 2): if n % i == 0: return False return True if __name__ == "__main__": p = multiprocessing.Pool() PRIMES = [ 112272535095293, 112582705942171, 112272535095293, 115280095190773, 115797848077099, 1099726899285419] for x in p.imap(func, PRIMES): print(x) I got the same output but my CPU time was: CPU times: user 4 ms, sys: 28 ms, total: 32 ms Wall time: 1.68 s If I'm reading into the CPU times correctly, it seems like the code with imap took *more* time than the code without it. Is this expected? 
I made a real-time python IDE: https://github.com/Almenon/AREPL Demo: https://puu.sh/x1a1U/1fdfd3899c.gif
I'd check out [https://mail.python.org/pipermail/python-ideas/2017-April/045460.html](https://mail.python.org/pipermail/python-ideas/2017-April/045460.html) but please ensure that you have plenty of food and drink prepared, it's a long thread :-).
Fancy algorithms are show when n is small, said Rob Pike once. Your runtime is dominated by the overhead it starting the processes. You would see the same effect with threads. Give it a much longer list. Get it to run for 30 seconds.
It's been stuck waiting for wxPython for Python 3 which is close to full release at long last!!!
using PyQt4, PyCrypto, and Sympy to create a file encryption application using a certain polynomial cryptosystem (MPKC). Thank God Sympy is updated to version 1.1.1.
Hmm? https://github.com/slackapi/python-slackclient
distutils is a massive zit upon the face of the standard library, it was clearly written by a sadist yet nobody has taken the time to replace it for _years_. (at least in the standard library)
Factual information. The name of a place, its location, hours, etc.
You're half way there as it is compiled, but how do you suggest a dynamically typed language such as Python is converted to be statically typed?
"But why?! What's wrong? There's no exceptions popping up, what do you want​ from me??" *Sobs uncontrollably*
Thanks for the feedback. Agreed, in a real system that lack PoW requirements there would be no need for the blocks. However the point of the project wasn't to develop a viable usable product, but to work through how an actual blockchain is structured. I'll add something about that to the readme just to clarify.
The official Python way of doing this by importing ``join`` from ``string`` was removed in Python 3, so you can no longer do ``join(['my', 'string'], sep=' ')`` ``str.join(' ', ['hello', 'world'])`` is identical to ``' '.join(['hello', 'world'])`` but is more abusive, calling an unbound class method directly is considered non-kosher.
&gt; The two essentially wrote a program to send Get requests to the web site. Crazy haxor skills
And it was handy sometimes being able to put a comma at the end so the next print would continue without a newline. end="" doesn't work the same way. 
I use VSCode on Windows for tinkering and it mostly just works. I've never heard of PyCharm before but looking it up it is made by JetBrains which also makes IntelliJ, the best Java IDE out there. VSCode is ultimately just a text editor that flirts with being an IDE. Trust me, issues like this will drive you absolutely crazy. If you want to just get up and running fast and enjoy learning the coding process itself you will probably be better off getting an IDE that just works out of the box. If you want to learn all the gory details up front you can do it all manually by writing plain text files in a plain editor and running them from the command line, and you will learn a lot more about how the pieces are wired together but your learning curve will be a lot steeper, you will be blocked out of using most tutorials that assume you are using the latest tools, and you can get demoralized very very quickly. There is nothing like having a tutorial show you how something works in five easy steps, and you can never get past step two because of stupid bugs nobody has ever heard of before. You read the tutorial and get ready [to experience this](https://media.giphy.com/media/3oriNYQX2lC6dfW2Ji/giphy.gif) but the reality is you [experience this](https://www.dailymotion.com/video/x2gp98t).
OP mentioned using homebrew, which is a Mac package manager.
Probably not the answer you wanted, but you can do this with the app automator that ships with Mac OS. You need create a service with it, then add the appropriate keybinding to launch apps. No code required. edit: Just booted the mac. New Service, no input, function launch app. Save it. Then assign a keybinding to the service from system preferences, keyboard, shortcuts.
I couldn't agree with this statement more, I do a lot of machine learning work where I need parallelism and using multiprocessing or disco is a real chore.
Dependency Management sucks hard. Sure, conda is a lot better, but it's no Maven. 
Programmers are always adapting to new APIs. This is not a uniquely colossal injustice by the Python overlords. This is part of software development. In 2017, the only solution left for "addressing the pain points" is "please fix my code for me please i've been sitting here for 9 years refusing to do anything, just do it for me".
That's really interesting, thanks for the link! I had a feeling I've seen trailers for this kind of game before.
https://docs.python.org/3.6/library/typing.html#typing.NamedTuple
It took me a while but I got the hang of it really well now, my only wish is a better platform for animation and also the ability for better visuals, cause the current has the tendency to look very basic, though my design skills are awful, even in web development.
Why do people keep thinking tuples can't change? x = ( [ ] , ) x[0].append(1) print(x) Gives ([1]) They can change. So why can they be used for dict keys but lists can't?
I am in the same boat. I have gotten pretty good with PowerShell and I am now starting to focus on Python 3. I am hoping to use them together for some projects.
Same! Best of luck to you! 
A few things. I WANT SWITCH STATEMENTS. Also the hoops you have to jump through just to compile code, some of the popular tools like cxFreeze and py2exe are good for small applications, but once you start getting into the bigger stuff, it gets closer and closer to impossible. Python was made to run through the python interpreter and that's a huge flaw imo. Also, who on earth thought it would be a good idea to differentiate between a group of spaces and a tab, it winds me up when switching between a text editor (such as sublime text 3) and IDLE (which I often have to do to test inputs, because st3 didn't think that would be required). Edit: added my indentation sentence. It's currently 4:30 and I shouldn't be this frustrated about python, why am I like this?
Whenever I have a lot of tasks taking too much time - I'll reach for one or the other: * threading if it's io-bound. Like moving hundreds of files between a local host and amazon S3, or ftping them. With threading it's very simple, and you can get 20-40 threads running simultaneously on a larger server before hitting diminishing returns due to the GIL. * multiprocessing if it's cpu-bound. Like with transforming hundreds of files before sending them up to s3. With multiprocessing I was able to completely max out 32 cores while working through thousands of large files to be rewritten. And the easiest way to do either is with the concurrent.futures module: with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_one_file, itertools.repeat(self.dir_name), requested_files): The above code runs the process_one_file function once for each file in the requested_files list, and also provides the directory name as an argument. It's using threading so it'll default to 5 threads per core. If you replace ThreadPoolExecutor with ProcessPoolExecutor then you're using multiprocessing, and it'll default to 1 process per core. 
A tuple that contains mutable objects is not hashable; you can't use it as a dict key. The hash of the key tells the dictionary where the value is located. If the hash changed, then it would look in the wrong place and wouldn't be able to find it. You can experiment with breaking dicts by making your own mutable class that defines \_\_eq\_\_ and \_\_hash\_\_, and using it as a key.
I'm working on a few projects right now. Got some work to develop an application that will combine multiple databases into a single unified location for reporting. It's going to be a large development between two teams. Should be fun. At home I'm messing around with building something to automate my house. 
Readme has been updated.
I really hope it is continued. Making GUIs in it is easy and intuitive.
are you saying you're creating named functions within anonymous functions?
the love-hate relationship between python2 and python3
Yep, missed that. Weird. 
Ah. Got it. Thanks. 
Threading is a good way to not get involved with state machine quagmires. Multi-processing is a perfectly valid way of getting additional process power, but it also works well to run a message loop and pass computationally slow operations (crypto, say) up to and back from a subprocess so the loop never blocks.
You just mention pwntools without people having to click on it.
I agree with this. I have a handful of mini pieces of software that I just run in the browser. Using Flask/GAE I can get pretty much anything I need set up online for free.
A lack of core modules that all work together. There are your standard set of plugins that come with every version of Python, but all of them have these small quirks that need to be accounted for even with the most basic functions or variables. I get that the whole point of open source is to have a bunch of people contributing, but we could do with *some* coordination between projects, right?
Recommend checking out [deco](https://github.com/alex-sherman/deco). More info [here](http://fewstreet.com/downloads/Decorated_Concurrency.pdf)
Depends on what kind of GUI you want. The biggest issue with GUIs in Python is that...there is no quick and easy GUI you can make for simple projects; you have to do the entire thing line by line, and it gets pretty tedious. 
The majority of them are unofficial ports though; there's still so many critical plugins you can't do without that still are only available for 3 if you find one of the few random sites that uploaded them. I remember most of my 3 plugins came from a random university site I found by pure chance where they had converted and/or uploaded a bunch of super useful libraries. 
Only accepts them: a real selfish fuck.
Basically this, but with more obscenities. That was a week I'm never getting back...
How is this different or better than something built-in like `python -m compileall .` ? https://stackoverflow.com/a/22779209/398514
... if you say so.
&gt;Print as a function? Fine. Print automatically adding newlines and requiring me to use the "end" argument to suppress obnoxious-by-default behavior? Bleh! Why? As other say you must be doing something wrong, most likely you wanted to use .write() method. Print is nearly always expected to print new line, and in a larger program you probably never want to use it except for debugging. &gt;Sorting things. It's not really an edge case to have to sort something slightly more complicated than a list of primitive data types, so why did they make it *annoying*? In python2, you'd pass a function name as a second argument to .sort() and everything would be fine! Now here's an 18 line abomination to fix something that wasn't fucking broken. [example](http://code.activestate.com/recipes/576653-convert-a-cmp-function-to-a-key-function/) This issue only happens when you have legacy code and converting it to Python 3. The key attribute is far more useful. If you still somehow want cmp you should import functools.cmp\_to\_key() &gt;Package distribution. Maybe it'll be easy_install. Maybe it'll be pip. Maybe I'll just download, untar it, and do the ol' "python3 setup.py build &amp;&amp; python3 setup.py install" ritual and pray for the best. Oh, hell, what's a .whl file? Which versions of python does this package support? Wait, I can just get in APT? What's it doing there? This is just results of Python going through several ways of packaging things and also poor documenting what you should use. Currently, the way to go is to use setuptools (so your ol' setup.py is actually the right way). From that you can just create desired package, for binary distribution you should use wheel (install wheel package and use setup.py bdist\_wheel Then install it under venv. As for system packages (deb, rpm etc) you should use the mechanism as you typically do when creating system packages (setup.py can create rpm though by bdist\_rpm). Having said that you should normally never use system packages unless you are developing a tool for the given system. Use venv + wheel. If you use a system package you are starting to: 1. Be at the mercy of the package versions that come with the system, you can upgrade then, but you are risking breaking something else 2. Be tied to the OS. You will have to build new rpms/debs for every major version. My current company has problem migrating away from CentOS 5 because so many rpms are still tired to it 3. System packages typically always are designed to be installed in the same place, which can create issues later on, you can't also use them with venv 4. You are as mercy of using the Python version that comes with the OS, you can install non standard package, but that comes with its own can of worms (e.g previous point) &gt;Then of course, if I want something to run on Windows, that's another fun matter. Sane operating systems? No problem, they'll probably have python installed. Windows? Good luck! You'll either have to tell them to install it themselves or draw an Elder Sign on your floor and begin chanting to the Old Ones, begging them to turn your code into an executable. I don't work on Windows, so don't know much about the pains you experience, but I know it is not easy. Well, Windows is very different though, many things taken for granted in other systems are not there. Have your tried to use Python under CygWin? I'm surprised no one yet created some Python packaging management for Windows.
I pasted your title into Google and the first result included: &gt;quokka is a flexible content management system powered by Python, Flask and MongoDB. You can use Quokka CMS to publish a blog, a web portal, intranet, document management system and you can install existing quokka-modules such as quokka-cart to create an e-commerce app or you can easily create a new quokka-module to fit your needs. 
and respecting robots.txt
Inspired by a conference talk about iterators and iterables, I made a broken iterator that I've called an irritator, and released it as the [irritable](https://github.com/timb07/irritable) package. Further improvements including working out if it's useful for anything at all. :p
From [PyConAU](https://2017.pycon-au.org/schedule/presentation/18/) &gt; We're no strangers to VoIP &gt; You know XML, and so do I &gt; A full implementation's what I'm thinking of &gt; You wouldn't get this from any other talk &gt; I just gotta tell you how to code this &gt; Gotta make you understand &gt; Learn how to set VoIP up &gt; Learn how to tear calls down &gt; Learn how to run high availability, and stateless &gt; Learn how tech makes you cry &gt; Learn how to make upgrades on the fly &gt; Learn how your call will be monitored for quality assurance and training purposes &gt; We've known VoIP exists for so long &gt; You've got an idea but &gt; You're too shy to code it &gt; Inside we know it's just a SMOC &gt; We know the rules and we're gonna code it &gt; And if you ask me how I'm feeling &gt; I'll cover status APIs &gt; Learn how to set VoIP up &gt; Learn how to tear calls down &gt; Learn how to run high availability, and stateless &gt; Learn how tech makes you cry &gt; Learn how to make upgrades on the fly &gt; Learn how your call is important to us and will be answered shortly
Write programs that would automate some system administration tasks. This way you will be doing sys admin and Python for sys admin.
_Tuples_ are immutable -- they don't make any assertion about the mutability of their elements. For an example of something that lists cannot do, tuples can be inserted into sets and used as dictionary keys because of their immutability. However, even if this weren't true, this seems like a situation where you would be ignoring a useful tool for no reason. If tuples are designed to be used in situations where immutability helps to model the problem, then they should be used.
I'm not an authority on that. But as Transcrypt generates sourcemaps, it should be possible to debug at the Python level. 
So not going to bother reading something they requires a login to even get a preview of the content.
You most certainly wanted to use .write() method in those places, not print()
- Python 2 breaking if you even write a comment with a non-ASCII char and forget to declare encoding... - No easy, sane way to run python on iOs and Android. - No proper GUI to write Desktop applications. (Qt5 is not free, otherwise that may be sufficient) 
It's great, but if I use it, I lose autocompletion in Pycharm, so not worth it...
This killed me for about a year. Then I learned that **pip** has a **download** mode and can install from a download directory. This loads all dependencies. So I now download from the unfiltered guest internet and then move the files... Since then this problem has disappeared, i just carry a USB stick with a download folder of all modules I might need... Example to install "requests": pip3 download requests move folder.... pip3 install requests --no-index --find-links &lt;download folder&gt; 
Thanks a bunch James! Glad you liked the episode and are learning a bunch from the podcast. ;)
The lambda syntax is simply cumbersome... the keyword ``lambda`` itself is very long. A lambda should have a very terse syntax. I didn't know about the facility to derive from ``namedtuple``. I must think about it further - but at a minimum that is far from obvious. So a clear distinction of mutable and immutable objects at a language level would be better.
They should have done that with 3.0, now it's too late. 
Good luck bro
As TheBB has pointed out there is nothing like an UTF-8 string in python! The ``String`` type uses internally a highly complex encoding in order to represent unicode (and to provide O(1) code point access - for whatever that is usefull). For an UTF-8 representation you need to ``encode`` a string and convert it therefor into ``Bytes``. I mean that's the clue of the renewed string-unicode-encoding topic within python 3. It just read strange that someone claims how much he likes the new approach but mixes up concepts so badly at the same time 😉
There's Nim and Crystal.
i was dealing with that exact issue the other day. Went looking for a way to specify non-pip dependencies and ... tumbleweeds. Ended up putting a line in a README. Not exactly ideal.
 f = ( func1( func2( func3(*args, **kwargs) ) ) ) Is way better than: f = func1(func2(func3(*args, **kwargs)))
I think with ES6 JS learned a lot from Python (the for .. in syntax, object destructuring, etc. Now I really feel like it's time for Python to learn from JS. I hate typing `['foo']` instead of `.foo`. But yeah, I understand that the Python object is not a dict. Still, I think it works quite nicely in js, so there must be a way.. Also, I don't like that the usage of map and reduce is discouraged. Okay, we got list comprehension instead, but you cannot nicely chain it, and still creating an empty list and filling it up in a for loop is considered the most Pythonic approach. What I also don't really like is the inconsistent naming in the std, with loads of abbrvtns. Like https://stackoverflow.com/q/3278077/2419215 WTF? Another niceity what Python could learn from js is the awesome list / object deconstructing. (Python had it first, but the JS one is better IMO)
I was gonna try to make a joke about using mistletoe to parse Markdown is like flying a rocket (fast) *and* driving a manual car (you're in control) but that's hardly christmas-y..? Anyways--mistletoe has been my side project during the summer: a Markdown parser in pure Python that is 4 times faster than [Python-Markdown](https://github.com/waylan/Python-Markdown) and 5 times faster than [Python-Markdown2](https://github.com/trentm/python-markdown2). Its speed is on par with [mistune](https://github.com/lepture/mistune), but mistletoe is also designed to be easily customizable so that you can make it fully your own. Because it is not another md-to-html transpiler, LaTeX output is supported out-of-the-box, and you can write your own renderers easily. Check out the readme, or the painstakingly written docstrings. Drop me some suggestions here, or over on the issues page. Hugs all around.
`compileall` compiles to Python byte code whereas Cython compiles to machine code.
Add a couple more arguments to each call and a couple comprehensions. Have that in a callback factory and 79 char row length limit. 
I just used a multi-processing the other day. At my company, I've created a script that pulls through ssh info about the target computer(s). And we have like 30 of them. Without multi-processing, it took a half minute. When using MP, it takes about 1.5 seconds. Here's the code: hosts = ['goku', 'vegeta', 'piccolo', 'gohan', ...] class Host(): """Class description.""" def __init__(self, hostname, timeout=timeout): self.hostname = hostname self.received_list = [] self.results = {} try: self.out = subprocess.check_output( ['ncat', '--recv-only', self.hostname, '6556'], timeout=timeout, stderr=subprocess.STDOUT) self.received_list = self.out.decode('UTF-8') self.received = True self.received_msg = '{hostname} .. OK'.format(hostname=hostname) self.results = self.__get_ncat_results() except subprocess.TimeoutExpired as e: self.received = False self.received_msg = 'TIMEOUT EXPIRED: {e}'.format(e=e) except subprocess.CalledProcessError as e: self.received = False self.received_msg = 'CALLED PROCESS ERROR: {e}'.format(e=e) except Exception as e: self.received = False self.received_msg = 'UNKNOWN EXCEPTION: {e}'.format(e=e) def __get_ncat_results(self): if not self.received: return None results = collections.defaultdict(dict) result_list = [item for item in re.split(r'(&lt;&lt;&lt;.*?&gt;&gt;&gt;)', self.received_list) if item] for idx in range(0, len(result_list), 2): new_key = result_list[idx].replace('&lt;&lt;&lt;', '').replace('&gt;&gt;&gt;', '') if new_key in results.keys(): results.update({re.sub(new_key, '{}_2'.format(new_key), new_key): result_list[idx + 1].strip()}) else: results.update({new_key: result_list[idx + 1].strip()}) return results ... OTHER CLASS PROPERTIES / METHODS def main(): pool = Pool(cpu_count()) results = pool.map(Host, hosts) pool.close() pool.join() print("Done!") print('{: &lt;10}{: &lt;10}{: &lt;10}{: &lt;15}{: &lt;8}{: &lt;12}{: &lt;9}{: &lt;5}'.format( 'Host', 'Received', 'Location', 'CPU details', 'Memory', 'Built Date', 'Warranty', 'Age')) for item in results: if not item.received: print('{host: &lt;10}{received: &lt;10}'.format( host=item.hostname, received=str(item.received))) continue print(item.hostname, item.cpu_name, item.gpu_name, item.gpu_driver) if __name__ == '__main__': main()
I guess we have different programming styles, or different kinds of jobs. While I do slice a list from time to time, it's so rare, that I simply didn't think of that, or your other points against iterators. 
This is better suited to /r/learnpython from tkinter import * root = Tk() root.title("My App") canvas = Canvas(root, width=400, height=400) canvas.pack() poly = canvas.create_polygon(10, 10, 10, 60, 50, 35) # define animation function def moveTriangle(event): if event.keysym == 'Up': canvas.move(poly, 0, -3) elif event.keysym =='Down': canvas.move(poly, 0, 3) elif event.keysym == 'Left': canvas.move(poly, -3, 0) elif event.keysym == 'Right': canvas.move(poly, 3, 0) root.update() # bind the respective keys canvas.bind_all('&lt;KeyPress-Up&gt;', moveTriangle) canvas.bind_all('&lt;KeyPress-Down&gt;', moveTriangle) canvas.bind_all('&lt;KeyPress-Left&gt;', moveTriangle) canvas.bind_all('&lt;KeyPress-Right&gt;', moveTriangle) root.mainloop() mainloop belongs to the Tk instance, so you need to call it on root. You also need to use bind_all when binding to the Canvas, and identify your polygon by storing its reference in a variable. 
i'd use `[['name', 'age'] for x in range(1000)]` if i had to use a for loop, i'd write array = [] for x in range(1000): array.append(['name', 'age'])
you could make a list of lists: myVar = [[None, i] for i in range(10)] gives you a n array like this: [[None, 0], [None, 1], [None, 2], [None, 3], [None, 4], [None, 5], [None, 6], [None, 7], [None, 8], [None, 9]] you can use it like this: myVar[5][1] = 5 But if you want to get serious with your arrays, use the [numpy n-dimensional array](https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html)
i just thought about java and C and i think i know why you're confused. in C you'd do something like `int array[1000][2]` first then do a double for loop to fill the array, but it isn't like that in python. i had never thought about that before... it's really different
 myVar = [[None] * 2 for i in range(1000)] which is equivalent to myVar = [[None, None] for i in range(1000)] which results in a list of 1000 lists of 2 None's. Don't use this: myVar = [[None] * 2] * 1000 = [[None, None]] * 1000 because this way inner lists will be not recreated, but copied. You'd have 1000 of same lists. Also how about using dictionaries: myVar = [{"name": None, "age": None} for i in range(1000)]
Keywords led me here, with my project [GINO - an ORM for asyncpg](https://github.com/fantix/gino) powered by SQLAlchemy core. My answer to the original question is also "yes", we once completely removed ORM and optimized all SQLs for performance for the HighNoon Server. Now that there are quite some comments on why using ORM or raw SQL, I'd state a bit on engineering teams. When it comes to engineering, delivery is the top priority. It is important to minimize the risk of potential delivery failures. One of them is poor software execution performance, a piece of terribly-written ORM code for example. However there are so many other reasons that could lead to delivery failures - change of requirement, time underestimate, loss of manpower, etc. With that in mind, human performance becomes a very much weighted factor in engineering, even more important than software performance in many cases. And it is about a team, not a man unless it is a one-man project. People differ, simpler solutions usually supplies a relatively higher human performance in team average. A wild guess here, 80% of normal project tasks are simpler with ORM for team-wide average, 20% is more efficient with raw SQL - only if the ORM implementation doesn't mislead the team to the dark side of ORM, which I believe is over-designing, over-abstraction, preparing for non-requirement, premature optimization, etc. These were the thoughts before I wrote GINO. Based on SQLAlchemy core and asyncpg (no it is not a general purpose library), GINO is designed to be simple. It oughts to make the 80% tasks done easier, in an explicit and objective way. It's more likely to be a two-way SQL translator bound to normal data objects in memory. GINO gave up on traditional ORM concepts like sessions or stateful objects for simplicity (actually it was too much effort for me to do it). That's why GINO is for "GINO Is Not ORM". The asyncpg API for raw SQL is always available, ready for the 20% tasks. In general, GINO only wanted to solve the 80% of the job, in order to make it easier for daily work, but not getting in the way. It is still a month-young project, maintained by our team, an outsourcing company. Any help are greatly welcome!
Thanks!
``cythonize -b module.py``
Do you have a link to the script?
 import numpy as np myVar = np.empty(1000) myVar2D = np.empty((1000,2)) print myVar * 2 print myVar2D * 2 or, let's say you have an array already defined myVar = np.array([[1,2,3,4,5,6,7,8,9,10,11], [2,3,4,5,6,7,8,9,10,11,12]] ) print myVar * 2 Also, check out pandas.
Is this scientific computing or VFX? General development does not have this problem.
Out of curiosity: Is the GIL released during a subprocess call? If yes, then wouldn't a threaded approach make more sense in this use case?
There really is no need to declare the size of the array. You can start by initializing `myVar` to an empty array and keep `append`ing to it. I am not a C# programmer. I learnt C/C++ in college and I see why you would think to do that. And you can append a list in to a list. Almost any data type can be contained in a list. 
Basically, you don't. In most use cases in Python, it is not usual to predefine the size of an array like is is in other languages. If you have data (e.g. in a file), just read the data in a loop, appending to the array as you go (or use a list comprehension)
Not sure if you've seen this yet but I'm in the same position and came across this. I'll let you know if it helps me https://bespohk.com/blog/configuring-python-visual-studio-code
Hello, author of `logzero` here. I'm happy you guys find the library useful! `logzero` is really just a helper for configuring a standard [Python logger object](https://docs.python.org/2/library/logging.html#module-level-functions), which is quite tedious to do manually. It's just too many steps, and `logzero` provides some sane and pretty defaults such as color output, robust encoding compatibility and rotating logfiles. I'm happy to hear about feedback and ideas!
[PyPy has a GIL](http://doc.pypy.org/en/latest/faq.html#does-pypy-have-a-gil-why). I'm fairly sure Nuitka does too, because it's built on top of CPython.
&gt; Slack Developer Kit for Python currently works with Python 2.7 (watch for Python 3 support in the future), and requires PyPI to install dependencies. Is the README outdated? Same statement here: http://slackapi.github.io/python-slackclient/
damn, that is cool!
Lol. Thank you! This makes my module completely useless :D
I think not. Gil is not released. Don't know how to do it :-) I tried threaded approach but don't know why. But this was faster. Threaded didn't work for me. But I'm new to this so... 
Counter point, I used to visit a website where articles were enumerated in such a way. Guessing the IDs let me access some older versions of files that weren't exposed as links. And I did it all with no scraper, just some smarts and math.
Thanks mate.
&gt; This is built into the stdlib as of 3.2: functools.cmp_to_key. That said it's probably just easier to use a key function instead. I love how that page has never come up in searches. Thanks. &gt; Just run it in Docker ;) I still don't quite "get" Docker, tbh.
&gt; Python 3.4 has now entered "security fixes only" mode, and as such the only improvements between Python 3.4.6 and Python 3.4.7 are security fixes. Also, Python 3.4.7 has only been released in source code form; no more official binary installers will be produced for Python 3.4. Not sure that warrants the exclamation point in the title. ;-)
Every day there's an older version of Python coming out, I feel like I'm traveling back in time :)
I'd use: array = [[None]*2 for i in range(1000)] or, if you can afford of not being warned when you access coordinates outside your 1000x2 limit, just use a dictionary: array = {} array[x, y] = value Also, if you want to be able to read a default value from uninitialized cells instead of getting a KeyError: import collections array = collections.defaultdict(lambda : None) value = array[1, 2] # -&gt; None There are a lot of other solution. Depends on pro &amp; cons. 
Hi all, dev of *logzero* here. Since the initial release I've received quite a bit of feedback, improvement ideas and pull-requests. Thanks, and please keep it coming. *logzero* has seen many improvements in recent weeks, such as easy configuration of rotating logfiles, support for color output on Windows and improved documentation. Any kind of feedback, ideas and feature requests are much appreciated!
That cleared up my mind a little, thanks. I guess calling them "utf-8 strings" was naive. What I meant is that you can *use* Python3 strings as a sequence of utf-8 characters, i.e. characters that are typically represented in utf-8. I think my confusion stems from a phrase I've read that Python3 is "utf-8 by default". I understand that the string to bytes conversion is "encoding" a string using a particular standard. As far as I know Python2's strings are basically just Python3's bytes, which means if you want to access a multi-byte character via index or use the string as an iterable everything gets jumbled up. For example `"€"[0] != "€"` and `len("€") != 1`. I've only used Python2 a couple of times but I remember that particular case tripped my up pretty badly. Hence I called Python3's strings "utf-8 strings" since they just do what you'd expect. I realize people may have different interpretations of "what to expect" but I assume that "treating visible characters as one unit" is a very natural default. I'm not too sure about the details why people were worried about this change but I believe some were afraid that the low-level capabilities of Python2's string type would simply disappear rather than essentially being renamed.
[removed]
It's less about security blocking and more about setting an http_proxy with DOMAIN\username:password for your local machine.
Yes, acrobatics.
It's been a while, but if I recall correctly, Ruby gems for instance, respects an http_proxy variable with DOMAIN\username:password in the string.
Yes, you can do it with Python. Python is a very powerful language and with the right tools and mindset, you can come a very long way. For writing an AI (which I've never done personally, but it goes for any project IMO), research this topic. Know what an AI does and why it does what it does. But before you start any Python project, **make sure you've got the basics of Python down**. If you don't, you'll have a very hard time struggling through projects you're attempting to do.
`import multiprocessing`
Try PyQt
JavaFx isn't bad
Do you have a elevator pitch? I don't see anything really compelling neither in your description here, nor on github. ^Coloured ^logs ^~~is~~^are ^an ^abonimation, ^so ^that ^is ^not ^a ^selling ^point ^for ^me. EDIT: Grammer
Explicit 'self' botters me. Why do I have to explicit say 'self._my_method()' instead of '_my_method()' ? it's justo too verbose.
Are you running Python 2.7 or 3.4? In 3.4, using 'input()' is fine, but in 2.7, 'input()' treats the input as code, use 'raw_input()' instead. Additionally, in Python 2.7, I think you would want to use: print "Hello", person Why exactly it gives THIS error I don't know (I get a NameError).
Everything. It provides a unified API in front of either processes or threads. You can't imagine doing something more misguided.
Have you tried curio or trio ? The final anwser may lie herein. Asyncio was a misguided attempt to reconcile twisted callbacks with coroutines.
First, myArray = x * [y * [None]] Second, &gt;&gt;&gt; arr = 3 * [4 * [None]] &gt;&gt;&gt; arr [[None, None, None, None], [None, None, None, None], [None, None, None, None]] &gt;&gt;&gt; arr[1][2] = 1 &gt;&gt;&gt; arr [[None, None, 1, None], [None, None, 1, None], [None, None, 1, None]] Which clearly shows why this is a bad idea.
You should read those articles: * https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/ * http://utf8everywhere.org/ (Section 5 offers an excellent naming definition of the containing concepts!) You mix up clearly defined terms in different contexts. That makes it hard to discuss something 😉 But first of all it will help you in further understanding of the topic - and makes you a much better programmer overall. I know much more devs that do **not** know the profound basics of text encodings than those, that do 😒 &gt; What I meant is that you can use Python3 strings as a sequence of utf-8 characters, i.e. characters that are typically represented in utf-8. That does not make sense! There is nothing like a *utf-8 character*. UTF-8 is just an encoding for *unicode* *coded characters*! As a short term you might call it *unicode character*. As opposed to other encodings (like *Latin1* or the "iso-8859-\*" family), UTF-8 can encode **all** existing unicode code points! &gt; but I assume that "treating visible characters as one unit" is a very natural default. And that is exactly what Python does **not**! (And no language I know btw!) The index over a String is based upon **code points** - which is not the same as *visible character*, better known as *grapheme cluster*. Python2 had a *hybrid* String type. That is it could take an *encoded text* (like ``Bytes`` in Python3) and also *unicode* as content. The latter was more or less that, what in Python 3 a ``String`` is. You could switch between the both via ``decode`` and ``encode`` like in Python 3, but the data type was the same. That was considered to be a bad practise, as it needs disciplne to **decode** the input (from the outside world) as soon as possible into *unicode* and to **encode** as late as possible the output (to the world) into an encoding. If a programmer had no idea of the fundamental differences, it could end up in mixing both representations together, which always ends in a nightmare of maintenance and bug fixing! In Python 3 this was one pitfal that should be repaired at the language level. If you wanna know more about why Python 3 failed to achieve this goal at the beginning, read these [excellent articles](http://lucumr.pocoo.org/tags/unicode/) from Armin. (But beware that those are a bit historical nowadays and some points aren't valid anymore - as [Armin also emphasizes](http://lucumr.pocoo.org/2016/11/5/be-careful-about-what-you-dislike/)!)
I ran into a similar case where NetworkX wouldn't due to size of data. I'd recommend looking into Neo4j + Python module. Neo4j is a graph DB geared toward network analysis and graph visualization. Im not sure how other graph DBs compare (namely Mongo), but I found the no-sql syntax of this one very intuitive and conducive to network queries. Good luck. 
Good question. Ever tried quickly setting up a logger which outputs to console and a rotating logfile manually? A lot of people find it tedious with too many steps involved and without a clear and concise documentation. With *logzero* you can just use `from logzero import logger` and use this as fully configured logger instance. Adding a rotating logfile is just another line of code away: import logzero from logzero import logger # Setup rotating logfile with 3 rotations, each with a maximum filesize of 1MB: logzero.logfile("/tmp/rotating-logfile.log", maxBytes=1e6, backupCount=3) # Log messages logger.info("This log message goes to the console and the logfile") It also has a nice default formatter which shows you date and time, the filename and line number: [D 170705 14:59:47 demo:3] hello --- You mentioned you don't like colored output in the console. I personally like it because it makes it easier to distinguish different loglevels. Perhaps we could add a switch to disable colored log output to the console though.
Even if you don't need multi node now, you might later. +1 for celery and queue based architecture in general, though of course it adds some complexity and requires a queue/message broker.
If you're not violating their terms of use, then you could probably assume that, yep! 
It's like having to suddenly sneeze in the middle of reciting Shakespeare.
This is absolutely expected behavior. Nowhere is the docs it says that when concatenating lists, it will do anything to values in them. The list li is [o], therefore li * 3 is [o, o, o], regardless of what object o is, even if o is [1, 2, 3] and you're expecting o to be copied.
I love Python. Lately, I've began to love Coconut even more. Coconut is a superset of Python that compiles down to Python. Check out coconut-lang.org.
So is this logging + colors?
Been using this in my latest project, fantastic work without overhead. Especially the log rotation. Integrates well with docker and ELK monitoring. Thanks for sharing.
yes
Not yet, thanks for the suggestions.
That's not a counter point, you're just demonstrating exactly what he described. 
&gt; Ever tried quickly setting up a logger which outputs to console and a rotating logfile manually? A lot of people find it tedious with too many steps involved and without a clear and concise documentation. I must be the 1% then. Or - more likely - I haven't read the piece of documentation, where you magic away the confusion over both loggers and handlers having a log level. The actual boilerplate for configuring a few loggers with different handlers is rather simple, doubly so with logging.dictConfig(). &gt; You mentioned you don't like colored output in the console. I personally like it because it makes it easier to distinguish different loglevels. Perhaps we could add a switch to disable colored log output to the console though. I have nothing against coloured output, as it makes things a lot simpler to see. I just don't want it hard-coded in the log. It makes for a much more fragile process, when extracting parts of the log. Also, the chance that I find your choice of colour a perfect match for my need, is likely less than 100%. I much prefer to do the colouring at the time where I actually read the log. So, I guess I'm not your typical customer, but it looks like a solid product nevertheless.
I will look into this. If I could avoid writing even one line of js then it's worth my time 
&gt; I just don't want it hard-coded in the log. It makes for a much more fragile process, when extracting parts of the log. I think we had a misunderstanding -- colored output is only for the console output! The logfiles just get the plain messages.
OK, that makes more sense. 
Be sure to review the site’s terms of use/service and respect the robots.txt file before starting any scraping job. Make sure to adhere to ethical scraping practices by not flooding the site with numerous requests over a short span of time. Treat any site you scrape as if it were your own.
"premature optimization is the root of all evil" --Donald Knuth Celery is great, rabbitmq is great, but they add a whole lost of cost to your project. IO becomes an even bigger bottleneck because now your data has to go over a network to reach the other processes, not just a local socket.
No, this is just plain wrong. You're reusing the same list and will get duplicate references, which will be a source of subtle bugs, as /u/uniqueusername6030 has already pointed out. Please edit or remove your post.
Looks good. Just to make sure you're aware, the license you've chosen makes it unlikely anyone would use it in a commercial project. While many applications use GPL, you'll find that most libraries use something more liberal, like MIT, for this reason. I would not be able to use this library at work.
If you want to build an AI you eventually will need to master machine learning. [This article](http://www.kdnuggets.com/2015/11/seven-steps-machine-learning-python.html) has a decent step-by-step guide to your education for the next several months. Alternatively you can just get [this book](http://shop.oreilly.com/product/0636920030515.do) and plug away a bit, but you likely won't gain the deeper understanding of what is going on "under the hood". 
MongoDB is almost the opposite of a graph DB. No relationships. ArangoDB is one I've been looking into, and it looks good so far.
Can't see which way around you did it in your code, but usually it's because you need to decode whatever you scraped into unicode. https://nedbatchelder.com/text/unipain.html /r/learnpython would be more appropriate subreddit for this.
For the size of your data, I expect you'll have much better luck with a graph DB.
Well, there is this [cautionary tale](http://www.nytimes.com/2013/01/13/technology/aaron-swartz-internet-activist-dies-at-26.html) that is very relevant to the reddit community.
&gt; When I am in the powershell I can see the characters but when I try to run the script in powershell it gives me UnicodeEncodeError? What do you mean? What are you trying to do? Also take a look at [this answer on StackOverflow](https://stackoverflow.com/a/32176732).
Trying to get working CircleCI with python -_-' such a mess!
See this presentation "Thinking about Concurrency, Raymond Hettinger, Python core developer" https://www.youtube.com/watch?v=Bv25Dwe84g0
The University of Michigan data science for python courses on coursera would probably be a good start for you.
Whats going on? Arent we at 3.6 ?
Security/bug patch. 
Yes, and older versions still receive security fixes. Not sure this warrants so many upvotes though. :)
In the first one, you're implicitly calling a method defined by the string (`str.__add__`); in the second one, it's an int method (`int.__add__`). They both receive `(self, other)`. I understand what you mean, but it would only complicate the source code without really making a huge improvement.
I am trying to make an "assistant" like BOB from dimension 404 series. Currently working with tkinter ( very poorly i must add ) to establish GUI, and later will implement comunciations system ( via socket, config file, or perhaps even XML ) and later i will build on its functionality. 
DB is cleaned "On demand" it is a Jenkin job that i can run with a single click, could be fully automated later. not fiscally-bound but time is worth money in the long run, i am willing to spend longer hours on implementing a system that will finally pay off. thanks alot for recommending Pact and browser stack i'll check em out
That makes perfect sense. Still gives it a -1 for readability :/ I guess if we ever all get a language we're all perfectly happy with, we'll be screwed *chuckles*
Thank you for the suggestion. And yes, I am aware of this, and was just reconsidering my license choice this morning as I planned to announce it to a wider audience. My hunch is that I will most possibly release mistletoe under MIT in the next version. Cheers!
&gt; I'll check out PyCharm and probably use that from now on (as long as it's free or the free version isn't missing 90% of the features) While you are a student you can get all JetBrains products for free: https://www.jetbrains.com/student/
You would... be right. The fun part is it's a multi-threaded multi-process scraper on AWS with a MySQL backend.
I've begun working on recreating one of my favourite games in Python, just to see if I can. So far, after most of 2 days (I started 3 days ago but didn't do much yesterday) I have completed the terrain making to a reasonable standard (the edges of the ocean still need some work, and I've thinned the biome indicator line since). [Pic](http://i.imgur.com/3GdMQuI.png). But that's all the 'easy' bits over, so now I have to do the complicated bits.
how does one begin this task?
Does it support things like Table of Contents and tables? (preferably pipe-tables). I have my own notebook system (soon to be released, though it is really not going to be that interesting to most people) and I struggled with this when I tried to use mistune. Some things I can do on my own since I do some preprocessing of the markdown to support the delete syntax and my own additional syntax for certain things. But more complicated parsing like TOC and tables are hard to say the least
`a + b` translates to `a.__add__(b)`. If `a.__add__` doesn't exist or returns NotImplemented, instead `b.__radd__(a)` will be called. See https://docs.python.org/3/reference/datamodel.html#object.__add__. When you create a new object by calling `Class_Name(...)`, first `__new__` is called with the Class as its first argument, and returns a new instance of that class. The `__init__` method of that instance is then called, which means the first argument (by convention, called self) is that instance itself. https://docs.python.org/3/reference/datamodel.html#object.__new__ Repr and Str: https://docs.python.org/3/reference/datamodel.html#object.__repr__ 
I often work on an air-gapped network. I usually (though painfully) create a bare virtual environment and then use pip to get what I need. But, if anything ins't pure python, all bets are off.
`self` is the _instance_ of that class [`__add__`](https://docs.python.org/3/reference/datamodel.html#object.__add__)`(self, other)` works by passing in a value, `other`, performing necessary logic, and returning the result. [`__repr__`](https://docs.python.org/3/reference/datamodel.html#object.__repr__) representation of the object, preferably able to be interpreted by Python as an expression. [`__str__`](https://docs.python.org/3/reference/datamodel.html#object.__str__) Human-readable representation of the object. Edit: also, /r/learnpython 
With a string as the left hand operand, the only(\*) permissible type for the right hand operand is another string. But with an int as the left hand operand, there's multiple acceptable types for the right hand operand. Addition is defined for `int + int`, `int + float`, `int + complex`, `int + fractions.Fraction`, `int + decimal.Decimal`, and so on. I get what you're saying about the inconsistency, but the text is trying to be as specific as possible. In the first case it's telling you that a string is required; if it just said "unsupported operand type", that wouldn't be as specific. And it can't say what is required for the second case because that one is much more broad. (\*) A user-defined type could define an `__radd__()` method that takes a string, so this is not an absolute statement.
While it isn't intended for a wide audience, I wrote my own encoder to annotates the original data type to handle datetime, sets, tuples and (most of) NumPy. It also restores integer and float (though you *really* shouldn't use floats) for the keys. It also automatically will pickle and base64 encode things it can't handle otherwise. I think the key is though, I really can't (or at least shouldn't) call my results JSON. They are a modified JSON at best!
The best I can suggest is the python 3 docs The spy-style testing pattern is supported well, but they don't call it .spy patch, patch.object, patch.multiple, MagicMock, DEFAULT, and Sentinel covers &gt;90% of my usage
If by "pipe-tables" you mean the table syntax github uses, then yes mistletoe supports it, with header rows and alignment options. Bonus: delete syntax is supported natively. TOC is WIP--I'm a couple of commits in on a local dev branch, and it will be shipped in the next version. Thanks for the feedback, and would love to see your notebook system!
I'm gonna get hate, but no curly braces. I like them :(
is it possible some devs will only use a python version that has entered 'security fixes only' mode? I'm not a professional dev, so just curious. Maybe that's what OP has in mind.
For what it's worth, python-markdown comes with TOC and table plugins and is very easy to extend. When I was writing my personal wiki software I initially tried to use mistune because it was the latest and greatest, but found that extending it was a brittle process. python-markdown appears to be very well-built and maintained and is very extendable.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Sure, but Python 3.4 entered "security fixes only" mode over a year ago: https://www.python.org/downloads/release/python-345/
&gt; and would love to see your notebook system! Ok. I will release it soon enough (though probably won’t deal with pip or anything). Honestly, it is one of those things that *could* be easy, but instead has ballooned into 4000 lines or so of code. The idea is that the main notebooks should always be the truth. Everything else is built around them. So there is a DB but you can rebuild it quickly based on the files. The main advantage it has over everything else I have seen is that it always displays cross links so you can jump around. Other than that, most features are things I wanted for my specific use case. It is also pretty ugly since I know next to no web technologies outside of python. But I will share it eventually
Still waiting for Python 2.8 though. I'd like to see some of the stuff of Python 3 being backported. Edit: I was trolling. You guys are sensitive to this ;P
I try to stay as functional as possible, with some small amounts of OOP.
I like to thread my database backend as I've found a large speed boost in operations such as inserts. The use case would be instances where you have a process that involves a fair amount of waiting, such as for database queries or disk read/write operations.
It's not just the colors, it is the simplicity of setting up and configuring the logger as compared to the standard logging library.
 class Foo: def __init__(self, **kwargs): for k, v in kwargs.items(): setattr(self, k, v) print(self.bar) Foo(bar='bamboozle') edited because don't know how to reddit
This is correct for CPU bound tasks, thread pools will not help much whereas process pools will, but as /u/bheklilr pointed out, IO bound tasks can benefit from a thread pool as well. The reason is that the GIL gets released during certain IO bound activities (like waiting for an HTTP response). I saw a great talk at pycon that explains this aspect of the GIL and how it relates to concurrency and multiprocessing: https://www.youtube.com/watch?v=7SSYhuk5hmc
pep 404
for everyone's sake, it is time to move on.
Even if `join` were a standalone, we would still need `str.join`. Suppose `join` were standalone. What would you expect `join(0, [1, 2, 3])` to return? I would say it should be `[1, 0, 2, 0, 3]`. Then, for consistency, `join('x', ['a', 'b', 'c'])` would return `['a', 'x', 'b', 'x', 'c']`, not `axbxc`. We would still have to go from this list of strings to a string. `join` is rightfully placed on the string type because it doesn't do generic joining behavior: it joins an iterable into a string, specifically. It just seems to be a strange place to put the functionality at first.
Now i don't have some examples and proofes but here is how i understand it, plainly. *self* - it is binding method of sorts, it binds the every function or variable you make to some specific object. Like identifier, if you make function and use instead of **self** some other class it will bind that function to that other class. *repr / str * - there is not specific difference within them, both of them are returning strings ( or unicode for 2.7 python ). But **repr** function is like reserving some string for evaluation. When building custom class, you can use repr to print out some inner path or object inheritance for better evaluation. Ofcourse if you are not working with some type of object where evaluation of string representation of object is needed, you don't need them. I often use it to have empty initialization of object, where string representation of pseudo_int would be '1' the repr would be 'pseudo_int()' so when i need comparison or conversion to that object i could use eval(repr(self)) and then populate it with data i need. *__add__* : Here you are getting into dark side of python my friend, and i am saying this only because &gt;when I have more than one argument in the Def() *__radd__,__iadd__,__add__* are methods that are made for user comfort, since when you add two numbers together you dont care which number is added to other one, you care only for them to be added. self add ( *__add__* ) and reverse add (* __radd__* ) are used to determine which number will be added to which, where increment add (a+=1, *__iadd__*) is used to define object increment, but since you are still adding two numbers you need this function allways falls back to *__add__* or *__radd__* depending which number is the same type. You can see this in action when you add float and integer as float and integer are different types ( float,int ) and float has higher hierarchy than int. But if you want to add multiple numbers to some other object you can do it like this: &gt; a = 1 &gt; a+= 2 + 3+ 4+ 5 # here everything after '+=' sign is added independently before actually doing function with '+' sign. This is often the case when doing so, since type of a can be different than anything you are adding to it, so first python completes all necessary functions before converting it to desired type, it is easier than converting all numbers to same type and then adding them individually. Here comes the dark part, and breaking the rules of python and dealing with consequences. When defining the *__add__* method you are defining it as such *def __add__(self,other):* where self is binding it to default class , and other can be whatever, that needs to be converted, and here is a dark part, python don't care what you put in **other** , so you could theoretically write def __add__(self,*other): where now python expects that other are argument types, so you can add any number of additional variables and the function ( if you are prepared for argument type input ) will do its thing. But here is a catch, how will you write it when calling on that function ? Ordinarily you will use *__add__* method like this: &gt; something = self + other Where other would be evaluated via repr before you get that value and type of other. So in practical example it would be like this: &gt; c = a + b + d # which translates to c == a.__add__(a, 'b+d') &gt; c = a.__add__( a, eval('b+d') ) # where lets call addition of b+d , bd &gt; c = a.__add__(a,bd) &gt; c = abd # where type(c) == type(a) But with arguments passed as other you could do : &gt; a += 1,2,3,4,5,6 ## how many numbers you need. &gt; a = a.__iadd__(a, 1 , 2, 3, 4, 5, 6 ) # self.__iadd__(self, *other) &gt;a = a.__iadd__(a, (1,2,3,4,5,6) ) # and here you must think a way you will deal with tuple. If you sum it up, your add with arguments is similar to normal add but it takes more time since eval portion does not work, since eval of type is still a type, not its solution. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You're not wrong. In fact you can even use threading for SOME CPU bound stuff IF it's e.g. a C lib that releases the GIL e.g. numpy. There's still some GIL contention inbetween C calls and you'll see diminishing returns as you add more threads and GIL contention becomes the bottleneck. HOWEVER a simplistic application using blocking IO in a pool of threads offers greatly inferior IO performance to a pool of asynchronous multiplexed workers a la twisted, gevent, or asyncio, and uses a lot more RAM. This [article](http://www.kegel.com/c10k.html) gets really deep into why threads suck for IO. Hints: memory usage and context switching overhead. If you are only running a few threads maybe that's not a huge issue. If you're trying to handle 10,000 connections it's a major issue. Besides, threads are hard to get right and easy to fuck up. Forgot to bake in some logic for a thread to exit? Program never exits and even ignores signals so control c doesn't work. A thread threw an exception and died? hahahahah FML. You can avoid most synchronization issues if you use queues but in complex programs they can still crop up. Multiprocessing.Pool takes care of all that for you. Python didn't even grow a thread pool until concurrent.futures in 3.2. TL;DR don't use threads in python if you can possibly help it.
It should be noted that running any sort of network anylasis algorithm is insanely slow on any disk based graph db.
Awesome! Why? And by function you mean functional oriented programming or just for app to be functional ? When do you use OOP ?
By 'functional' I mean I take influence from functional programming paradigms. And I use OOP typically when doing deep learning stuff, as I have an object representing my model, and I follow the object model used by the deep learning library I use for defining layers and whatnot. In the past year I've done very little outside of CV/ML, so I can't give general rules on where I would draw the line. What I do think though, is that too many people follow OOP as the one true way, when really it's up to the individual where they drawn the line between having/not having objects.
Seriously, go take a look at the error messages in Haskell. Then come back and bask, bask I say in the warmth of clarity.
what you are waiting has already been released but with a different version number: python 3
/r/learnpython
Heres mine; Not a full POS but a complementary part of the stack: https://github.com/angryrancor/ezdmb - Digital menu board software.
What have you had success (or just faster speeds) running with?
that does make sense that trying to clarify that edge case would obfuscate the actuality of what's going on. Thanks for explaining that to me! 
&gt; functools.cmp_to_key There's also [functools.total_ordering](https://docs.python.org/3/library/functools.html#functools.total_ordering), which can help make writing new orderable classes slightly less painful.
The no-binary policy is a bit crap. It means a lot of people who should get those fixes won't actually bother, and at that point you might just publish a bunch of diffs like OpenBSD does (bleh).
&gt; CV/ML I don't know what you mean by CV/ML ... i tried googling and all sorts of programming unrelated things came out. Could you explain it better ? About where should anyone draw the line , well it is to programmer , some people just don't know about other paradigms or know only about OOP since it is widely popularized by c++ ( as far as i know ). I personally did not know about the plethora of other programming types before i researched the OOP on wikipedia. To be honest, i kinda get that when people learn to read OOP , the functional paradigms are unreadable, and ask for more concentration and exploration, but still to me (at least) they have their own deserved space when programing, it just keeps life simple, and my own personal preference is to keep paradigms separated in different files , it is easier that way for me to switch, and it looks kinda messy when it is all in one file. 
Heh. No thanks. I'm a farmer, not a programmer. I've looked at haskell one time in my life, that was enough and I understand just how spoiled we are *laughs*
Since this may help with the `self` part of the question, `a + b` actually translates to `type(a).__add__(a, b)`.
Sorry, Computer Vision and Machine Learning.
I pull data, around 100 largeish spreadsheets for work. the server takes time to give me each spreadsheet after it's asked for, slowing the whole process down. pulling them sequentially took a long time as the server takes ages to serve each sheet after I asked for it, so I converted it to a threaded affair, asked for all 100 sheets similtaneously, and the program went from taking hours to taking minutes.
Tell that to Debian :-)
Not *because* it has entered security fixes only. The newer pythons already have all the bugs fixed that this release does, or those bugs have been made irrelevant because of code change. So the newer pythons are just as secure, to the public's knowledge. They'd most likely use it because they're on a linux distro which keeps the same major python patch version as a policy.
I'm going out of town in a couple of months and I don't want my cannabis plants to die while I'm gone. I'm using python to automate the irrigation of my plants, and to send me daily reports that include the highs and lows for temperature and relative humidity, along with a picture of the plants. I eventually want to develop the system to the point that I can leave it alone for weeks at a time.
You computer is probably using your old python installation even though anaconda is installed. Did you get [these two checkboxes](https://docs.continuum.io/_images/install-win-path.png) during installation? And did you make sure both were enabled? Adding anaconda to your system path will allow you to use the Anaconda's Python whenever you type "python" in the command prompt. If you failed to do this during installation, you could manually add the location of your anaconda installation to the system path. I think Anaconda ships with the Spyder IDE, see if you can find a link to that in the start menu or something. It's kinda like IDLE, but you get a ton of other features.
It's worth noting that the first popular property-based testing library was Quickcheck for Haskell, which is a static language. Everybody can benefit from PBT!
I suggest 'Think Python'. It's free, just Google it. It's written for people with no programming experience. What I did is read a chapter with an IDE open and trying out everything the author does or says. Then I did the exercises I was interested or comfortable with. After a few chapters I went back and re-read and worked on more exercises. 
I have the smallest of issues with the choice of dromedaryCase instead of snake_case, other than that it looks awesome. 
It's probably full of Nargles.
don't new versions also introduce new features that could have security flaws that have not been discovered yet? In that case you **might** want to write code that only works with 3.4 because your users/customers are unwilling to put new (more dangerous) versions on their system. I personally always use the latest stable version but I see why someone would prefer to stay on an old one.
I started coding a month ago. I used codeacademy to get started. I found clever programmer's tutorials helpful for codeacademy. He had a project that uses Twilio's API and python to send sms. After a couple days of trial and error (lots of errors), I finally got it! Very satisfying but I have no one to tell that cares : ) !!! Hahahaha. Happy Coding! 
Awesome.
What's to say there isn't an equal, or bigger, chance that the old code in 3.4 also, or additionally, has its own flaw that has not been discovered yet?
I've used it in my last project and it does indeed make setting up loggers a lot simpler. Keep up the good work.
&gt; you can't offload simple tasks to other cores isn't this more a problem with CPython in general rather than PyQt? I've found the QThreads system good enough to let me ensure the UI is not blocked when an I/O process or long running computation is invoked. It does not, as you mention, allow you to offload tasks to run on separate cores. 
Yes OP this looks like a good library but what's up with the argument names? logzero.logfile("/tmp/logfile.log", loglevel=logging.ERROR) logzero.logfile( "/tmp/rotating-logfile.log", maxBytes=1000000, backupCount=3 ) Why not `log_level`, `max_bytes` etc.? Personally I would name the functions `log_file()`, `log_level()` as well but that's probably more nitpicking. 
What about those of us that have nothing to do with the Web side of python but are stuck with the GIL for CPU bound computations. I'm open to hearing alternatives but in general I've found that the option here is write the computation in C/C++/Fortran or Cython to take advantage of multiple core. While I understand that this generally solves the problem ... well then it requires writing in C/C++/Fortran. In my usecase multprocessing complicates things with the GUI that manages the computations. 
Yeah, it's a GIL related problem in CPython. Using PyQt is fine for basic threading. But if you're using QThreads in C++, you can do multicore processing. It has all the locking structures and such in place already. I just wish I could exploit that in python. I do a lot of scientific processing. I'd like to have my tables and graphs update in real time as the processing is occurring. I'd like to have one core dedicated to UI, and the others all churning at 100% doing data processing. 
I hear ya. I'm in the same boat, I use PyQt + PyQtgraph for scientific computing and data visualization - but bog down when I need to execute a long running CPU bound computation.
So `__repr__` and `__str__` both return string versions of your object. The idea of `__repr__` is that it _should_ show you how to remake that object, while `__str__` provides a "readable" string version of the object. `__str__` gets called when you try to print or format the object, and if `__str__` doesn't exist, `__repr__` gets called as a backup. In other words, a general best practice is that `eval(thing.__repr__())` should make a new object with the same attribute values as `__thing__`. In other words, if you're writing a class that defines `__repr__` `thing == eval(thing.__repr__())` I like this SO answer too: https://stackoverflow.com/a/28132458
Hey thanks for the response. I did it exactly as your pic shows it, leaving the first box unchecked and checking the second box. So I didn't add Anaconda's python to my system path, because it didn't recommend it... but how can I use the packages I installed with Anaconda in just a regular script? Or do I have to use them in an environment I create with Anaconda now?
Fedora: wine1.7 Ubuntu: wine 1.6 Debian: wine 1.4
quoting both David.B and Raymond.H in the readme, I'm impressed :)
I know youre trolling, but there are still people that havent ported their libs to 3.x. The current one I'm dealing with is a large org with an SDK. The first iteration of our script was 2.6 😎
Sorry if this is a stupid question, but are these security patches only relevant to 3.4? It just seems relatively rare that you see security fixes deployed in this way - i'd expect to see "Python 3.4.7, 3.5.? and 3.6.3 have been released" all with the same security fixes.
You don't need to create an environment with Anaconda. So, when you type in "python" at the command prompt your computer looks through a list of folders to find the program you are looking for. This list of folders is stored in a special variable called the "PATH" On your system. If you just add the location where anaconda is installed, you should be able to use anaconda's python to run your scripts. Where is Anaconda installed on your system? You can manually add that location your system path. It shouldn't be hard. Just search for the specific instructions for your Windows version: "add location to system path in windows `[your windows version here]`"
Try a `where python` in cmd.exe. If it's not pointing to your anaconda installation folder then your path isn't set up right. You can also run `activate` (if it's on your path, otherwise the path to it in your anaconda installation folder) and it will modify your path during that session of cmd.exe or until you run `deactivate`.
That's great! It's a nice example of learning by doing and getting the motivation needed by establishing goals :) 
I'm not expert on this, far from it. Possibly some security fixes would only be relevant to this version, and others only relevant to more recent versions. I believe the fixes have first been made in the more current versions, then backported as needed in this old one. Not all security fixes are urgent, and even when they are, old versions may have less priority for release as more recent versions.
Nope, current Debian stable has [wine 1.8.7](https://packages.debian.org/stretch/otherosfs/wine).
Dude I love this story and your initiative, it's baller too that your boss is letting you run with it. Go forth and continue to be awesome, I hope we hear an update soon.
Honestly, Codecadamy is a great way to learn Python and many other programming languages. You learn interactively and can take tests, it's free but you can also pay for many extra features. A great option, especially if you need to learn another language in future.
B-b-but the log of zero is undefined 
To be fair this was awhile back. I refuse to touch Deb derivatives.
yeah, my boss is pretty great in a lot of ways
I mean, it *is* part of the standard library and should be included with every implementation of Python. [copy is even implemented in pure python](https://github.com/python/cpython/blob/master/Lib/copy.py) so it should be very portable. [Here it is in PyPy](https://github.com/mozillazg/pypy/blob/master/lib-python/2.7/copy.py). It's not really right to call `copy` a standalone library. It's tightly integrated with Python. It's just not included by default in the global namespace. The main reason that copy isn't in the global namespace is that Python tries to minimize the amount of functions in the global namespace. PHP is what happens when you don't do that. You end up with a disorganized mess. EDIT: Libraries may not work with copying, but that has nothing to do with copy not being in the global namespace, and everything to do with library authors not considering core language features.
I know what you guys mean, but: I just used the same arguments as the native [RotatingFileHandler](https://docs.python.org/2/library/logging.handlers.html#rotatingfilehandler) which, for some reason, uses camelCase instead of the typical snake_case. I thought it would be best to stay as close to the native logger as possible.
Way to go, Bro!
of course there is that chance too. arguments why there are less likely include: 1. has been out longer, so more higher chance someone stumbled onto such a bug 2. has experienced numerous security patches already, so some of them have been removed 3. less features generally mean less things can go wrong 4. when you rewrite a part for the next version and find a security flaw with the current one, you can develop a security fix The "problem" with new features is always there could be a bug that makes the new version worse for some user than the older one. It depends on the user if you want to risk changing a (production) environment for new features when the old version does fine. Again, I use the newest one and have no problems with it. But I don't depend on it running flawlessly.
I do not do anything to the scale or degree as some here, but in my own projects, I use multiprocessing to distribute intensive tasks. I use threading to either do background tasks (usually with some `sleep` to limit it) or to call other processes with subprocess. I've also used it because I wanted action A to happen after action B but action B blocks. So I create a thread to sleep some set amount of time then perform action B.
Does `concurrent.futures` have some of the pickling issues of `multiprocessing`? Multiprocessing map pickles both the function and the argument. I use my own (well, based on a StackOverflow answer) map method that uses queues and doesn't need to pickle the function.
I really wish I was in a job that had stuff I could automate like that. That's great! 
I am pretty sure you're incorrect about GIL and multiprocessing. `os.system` does not release it though. Consider the following: from threading import Thread import time import subprocess import os def use_sub(): subprocess.call(['sleep','1']) def use_os(): os.system('sleep 1') T0 = time.time() threads = [Thread(target=use_sub) for _ in range(5)] for thread in threads: thread.start() for thread in threads: thread.join() print('Subprocess:',time.time()-T0) ########################################## T0 = time.time() threads = [Thread(target=use_os) for _ in range(5)] for thread in threads: thread.start() for thread in threads: thread.join() print('OS:',time.time()-T0) returns: Subprocess: 1.0185279846191406 OS: 5.043546199798584
Check the sidebar on /r/learnpython 
Id love to see the source for this, github?
Thanks! This works perfectly now!
i'd love to but it's not on git (policy) and a lot of it is really specific to my company, what i can say is that i used the following libraries: subprocess (ping and wmic) datetime (timestamps) ipaddress (it's got handy data structures for dealing with subnets) tkinter (front end interface) pillow (showing photos of users you search for) 
awesome thanks!
What a great story, good for you dude! 
You could support both styles at once, I know some other libs that do it. Might be a bit cumbersome but I think the overall result will be worth it. Log zero is truly one of those "more pythonic than python" libs as I see it, might ad well go all the way. Thanks for this dude! 
&gt; but it's not on git (policy) Git and GitHub are two very different things. I understand if you don't want to push it to GitHub and open source it, but if you are in fact not using git for version control (or any other vc tooling) then I'd *highly* recommend you start doing that. A git repo is local, and only pushed remotely if you explicitly do that (which is a good idea, even if your remote git server is a local server and not publicly available via a git hosting service like GitHub).
Welcome to the wonderful world of software development!! It has its ups and its downs, and you're experiencing one of the better feelings in this career!
Windows people you mean.
Thanks for the reply. I don't think Neo4j has such richness in algorithms as networkx. Also, really don't want to learn a new thing from scratch right now (time constraints).
Thanks for your reply. I hoped this could be achieved in python. This is a one time project for me, and considering this and time constraints it's sub-optimal for me to learn a new technology right now.
How is this different from 3.6?
 %matplotlib notebook It does wonders!
you can also (for a fee) make your github repos private and only accessible to team members etc. 
I like colored input in the console, but if colorized output is redirected to a file, then the file will be full of terminal control codes (which is obnoxious if you need to edit said file). Do you disable colorization if output is being redirected?
The entry widget is assigned to search as the parent. Change that to self. Also the Laval above it. Look into stringvar for storing your values. 
No problem 
Couldn't you just use *args or **kwargs to simplify that?
Oh, is that what that pr on the marshmallow repo was? I've been following that on and off. How does this interact with third party fields? Or is it just a straight dropin replacement? 
i should know these things, i am aware of them, but being self taught i've never *had* to deal with them because no one gives me code reviews or any kind of programming related feedback, they're just happy when it works and can't ask me to do more because it's not in my job description... which i guess is good and bad at the same time. i kind of manage my scripts on the fly constantly with several copies trying to keep them organised... it's a real hassle sometimes and i know there's a far better way... i promiss i'll try and do it the right way
Anyone using tests for ETL or data processing (pandas)? I haven't used it before, but I'm interested. I use engarde to check data and then constraints in the database. 
Amazing! That worked. Now I'll take some time figuring out how to make it return a result from a dictionary and display it. Here's how I did it when I was just running the program from command prompt: land_rover_drivers = {"Smith": "2018-12-23", "Larson": "2011-5-4", "Jones": "2016-11-1", "Williams": "2011-11-11", "James": "2009-11-11"} wmik_drivers = {"Larson": "2018-1-5", "Johnson": "2020-3-9", "Riley": "2013-7-3", "James": "2018-1-1"} sick = {"Carson": {"Reason": "Broken leg on P coy", "Expiry": "2017-1-4"}, "Jackson": {"Reason": "Fell over tree root on exercise", "Expiry": "2017-2-3"}, "Ben": {"Reason": "Tripped", "Expiry": "2018-7-6"}, "Testcase": {"Reason": "Nutted", "Expiry": "2014-9-9"}}#, "Evans": {"Fucked in face", "2017-5-4"}} expired_land_rover = {} expired_wmik = {} def namelookup(): name = input("\nEnter name to look up: ") print("\n"+"=" * 12) if name in sick: print("CURRENTLY ON SICK") print("\n", name, ": ", sick[name]['Reason']) print("Sick chit expires: ", sick[name]['Expiry'], "\n") print("=" * 10) if name in land_rover_drivers and name in wmik_drivers: if todaysdate &gt; land_rover_drivers[name]: print("%s:\n***************\nLAND ROVER LICENCE EXPIRED: " % name + land_rover_drivers[name] + "\n***************") else: print("%s:\nLAND ROVER LICENCE\nEXPIRES:" % name) print(land_rover_drivers[name]) if todaysdate &gt; wmik_drivers[name]: print("\n%s:\n***************\nWMIK LICENCE EXPIRED: " % name + wmik_drivers[name] + "\n***************") print("=" * 12) drivers_main() else: print("\n%s:\nWMIK LICENCE\nEXPIRES:" % name) print(wmik_drivers[name]) print("=" * 12) drivers_main() elif name in land_rover_drivers: if todaysdate &gt; land_rover_drivers[name]: print("***************\nLAND ROVER LICENCE EXPIRED: " + land_rover_drivers[name] + "\n***************") print("=" * 12) drivers_main() else: print("%s:\nLAND ROVER LICENCE\nEXPIRES:" % name) print(land_rover_drivers[name]) print("=" * 12) drivers_main() elif name in wmik_drivers: if todaysdate &gt; wmik_drivers[name]: print("\n***************\nWMIK LICENCE EXPIRED: " + wmik_drivers[name] + "\n***************") print("=" * 12) drivers_main() else: print("\n%s:\nWMIK LICENCE\nEXPIRES:" % name) print(wmik_drivers[name]) print("=" * 12) drivers_main() elif "return" in name: drivers_main() else: print("Error: Name not found\nType return to go back, or search again\nNote: names are sensitive to upper case (capital first letter)\n============") namelookup() #finally: print("=" * 12) drivers_main() And this would nicely display the result from the dictionaries usually. I'm not looking for help on this one just yet, I'll spend a while trying to make it print to a tkinter window myself first and come back here if I need any help.
on the other hand, this allows you to quickly check if a key is in a dict: if key in dict: do_something(dict[key]) I agree that it's not the most intuitive thing for iteration though. 
Yep, totally. Although even with private repos, I've seen paranoid management still not want to host it there because of the fact that your code lives on somebody else's server. In which case... setup a raspberry pi in your local network with some extra storage and make a git server out of it. Definitely want to have *some* form of redundancy and ease to collaborate with other developers.
&gt; i kind of manage my scripts on the fly constantly with several copies trying to keep them organised You will absolutely love git. Start using it, and then come back in 2 months and let us know how the quality of your life has become a lot better :-)
GitLab.com is an alternative to GitHub that also uses `git` repositories. It has free private repos too and some great issue and project management tools
Thanks! :) If you have any feature ideas or feedback, just le me know.
Having gevent's green threads integrated into core Python and the standard library would be great. Gevent is by far the nicest library I've used for concurrency in Python. No callbacks, no special libraries, just plain old sequencial code, at least from user perspective.
I've been playing with a webapp that handles redirection for Amazon affiliate links, but which can also keep track of whether or not those links continue to resolve over time to something that makes sense. It works in its current state, so I'm dogfooding it and trying to figure out if anyone else might want to spend money on it before I spend the energy to write a passable front-end for it.
Yes, colors are only for console output. Logfiles get the plain messages.
What's wrong with [`datetime.isoformat()`](https://docs.python.org/2/library/datetime.html#datetime.datetime.isoformat)? EDIT: Ah, nevermind. You specified parsing. My guess is because ISO8601 is a standard that's either logically ambiguous or subtly difficult to implement.
would love to see this if you've got a repo!
Congratulations. Very inspiring.
CodeCademy has a free course on Git now, you should take it. It's only a couple of hours long and it's a great starting point for learning version control
I'm making a tamagotchi/simlife game with pygame and my new found appreciation for classes.
Yup! This should be a straight drop in replacement for Marshmallow. One of the reasons we modified Marshmallow itself was to allow for third party fields/extensions to work, for example this just works with flask_marshmallow.
I absolutely hate not being able to have nested parallel loops and the fact that local functions can't be serialized. In other words, I have a class with nested functions to keep shit organized. In one of the functions, I'm calling another function in parallel. It won't let me do this b/c the local function can't be serialized. Now I have to put this single use function outside of the class. 
Very encouraging story for everyone. You could have used one of sort of working solution, but instead you learned something new. Kudos to your boss for letting you work on it and practically let you learn Python this way. 
that's a very good tip, thanks
Wow, that's awesome man! Congratulations!
Good read! I use Marshmallow extensively as well, much like in your use cases. It's not a bottleneck for me right now, but I'll give this a try at some point.
instead of tkinter use flask and an html/css/js interface to host in a browser
Me too ^^ ... Wait this is my post. O.o Ammm, yeah I can send you the eye ... But it is shit, I am having problems with coding emotional cues. Started with tk, thinking that I should move to ttk. 
Well if you're keen to open source it, I'm interested to see if I can contribute. 
I know I'm late to your post, but I pretty much automated my first real job via Python. I was originally hired by an Internet of Things startup as a "Systems Analyst", which turned out to be a major lie. Through some number of issues, clients were getting error messages every 15 minutes. My job (literally the thing I was hired to do) was to log into the system every 15 minutes and clear out the errors. This meant clicking several links to "close" the error as being fixed. The errors weren't destructive, our product's code simply was reading temperature sensors as being "too cold" or "too hot" when they were fine. To help the lead developer not have to worry about this while he fixed the actual code, I was brought in. Just getting my Masters, I immediately was pissed and decided to learn BeautifulSoup, a Python framework for scraping web sites, so that I could automate this job. I did that in about a day or so. Since I was going behind the contracting web developer's back, if he changed the layout I had to tweak my work - luckily, the layout was OK'd so it wasn't changing unless a new contract got written up. I automated the error clear outs, then I automated scraping data from the website (the web dev also refused to give me an account to access it - again contractors gonna contract). Then I started to learn about the hardware we were using and that it had a RESTful API to interact with the devices (we were having to manually log into devices). So I built a Python file, every morning loaded it up, and just used IDLE as my command line to access any location via calls like site = load_site(2000000001) # fake ID site.get_temperatures() site.diagnostics() And I'd get whatever information I needed. Luckily, instead of firing me cause I kept automating my work, they "promoted" me to "Head of R&amp;D" since I had tons of time to build other things (checkout software for our devices, algorithms to predict temperature changes, web design if we chose to drop the web dev contractor). But then I quit because it was a sinking ship and I needed to pay bills. Fun time though, learned a lot.
yeah i plan on making a dashboard of macro network stats with flask and pandas based on the data my backend is mining so we can put it up on a wallboard
awesome :)
So I did it and it's not pointing to my anaconda install folder, it's at: \AppData\Local\Programs\Python\Python36\python.exe But when I was installing anaconda, it suggested for me *not* to add Anaconda to the path... so which should I do? I don't want to mess anything up...
You don't have to be paranoid to avoid the risks of uploading any sensitive data to third-party servers. However unlikely it may be that a private github repo leaks, it's just too easy to host your own project management service to even consider such a thing.
I think it is better to just use the chrome browser and configure it to use tor as a proxy.
First: Hell yasss! I always wanted to work with someone! :d Second: I was building it for my own amusement, and maybe looking cool talking to HAL type of creature :D Pranks would be awesome! Third: How to open source it ? I don't have github and i use free software to work with ( npp for editor for example ). Since github is luxury for someone who is not in this professionally from where i come from. Third: open to suggestions 
Really nice work !
it suggested that because it detected an existing python installation and the installer tries to not mess up anything you already have. You can uninstall the python you already have, then add anaconda to your path (or just reinstall it and check the boxes if you want to be sure). Alternatively, you can just run C:\path\to\your\anaconda\install\Scripts\activate Then when you run `python` it will be the one from anaconda. You'll have to run this command every time you open cmd.exe, though.
I agree with you, and you got me curious.
Well, github is the standard method, as far as I have seen. It is free, so I would recommend signing up, it really is indispensable. 
I'm looking for side projects, and I have a decent background is statistics/ML, if you'd like to add an extra set of eyes/hands I'd love to take a look. 
Trying to do some rudimentary panel analysis on sports markets, with the hope of creating some measure of fan loyalty based on team performance, attendance and ticket sales while controlling for population and income level. I always start my data oriented projects from scratch, pulling down web data with requests and caching it, parsing with Beautiful soup and then ingesting it to a sqlite for analysis. So it's slow to start, but I just know this drudging will pay off one day... 
Thanks! Still a lot to do, I'm pleased with whats there right now, though, and how fast it's been progressing.
This is the start of an awesome career. Seriously, good job. I wish you all the best!! Never ever stop learning and trying new things!
git is actually awesome for version control, as it saves both space on your hard drive and time. git only stores changes made to files, and a simple git commit tells git to save your changes.
* If you're out to improve the interface of stdlib logging, a layer of snake case on top of the pass-through arguments would be nice. I saw in another comment you wanted to keep the names the same, presumably so users refer to stdlib documentation. IMO that's a crutch! If docs were needed because there wasn't one obvious way to do it, make it more obvious. * Resist the temptation to add new features to logzero! Your advantage over stdlib is simplicity and outoftheboxery. * I like it
That's the million dollar question when somebody is deciding.... *Is the overhead of managing a git server worth the comfort that a private git hosting service won't be compromised or have a leak?* Most would say no, although some would say yes.
Congrats! Seeing someone else use and rely on my code to get their work done is such a satisfying feeling.
Nice! Thanks for making it and posting. I'll try to keep it in mind.
thanks, that is really encouraging
bug.python.org seems to be down at the moment... https://web.archive.org/web/20161104084819/http://bugs.python.org/issue15873
Ok, signed up for github, now trying to figure out how the hell i should do that. I will try and leave a link when i am finished with uploading/updating.... or repositing... 
Congrats on your deploy to prod! In all seriousness though, you are reinventing the wheel. Look into Nagios or any other battle-tested monitoring solution. if it doesn't do what you want, you can extend it. 
i knew i might be from the get go, it was really just needed for that one task, and then features kind of tacked on to it... the front end ties into ad and an hr db via a custom spread sheet someone in devops made for me so it's very specific to my environment, so i feel a third party solution wouldn't have the same versatility as something purpose built... though yeah... to a certain extent i could've done that
Scripting some server backups to S3. I'm not hugely familiar with Python, but had a big smile on my face yesterday when I discovered the tarfile and tempfile modules!
I have a general version question. I've been advocating Python in our enterprise and myself and some engineers have come across situations where Pypi doesn't have the binaries for the modules we want to use (this was 2.6.2 at the time). Pip tried to compile them which didn't happen as noone has Visual Studio. We had to drop back to 3.5 as the binaries were available in Pip. Is this common or expected?
I totally get that! But in the future, the feature creep might reach a tipping point whereby you might want to look into taking what you have already and plugging it into something else. Or it might not! You're probably the best judge of that. 
name checks out
\*cough\*pyramid\*cough\*
Admittedly, Nagios is the first thing I thought of reading through the post, but decided it wasn't going to help anyone to take a dump in OP's Cheerios ;)
No, I just like using exclamation points!
Yeah, I totally did befoul OP's breakfast cereal, however well it was meant! Just recanting from my own personal experience is all, something to consider and take with a liberal sprinkling of salt.
Youtube :P
I've started working on a project to delete social media posts after they've been up for a set number of days. This can help reduce information available for social engineering or just help delete old cringy posts. So far I've got it working for Twitter but I'm planning to add a few other sites to it.
A couple things you said made me think otherwise...having to sneak around because you weren't "given permission." Him asking people to use it before he TELLS them to use it. Just sounds all around authoritarian and not a pleasure to work for.
Excellent, thank you!
eh, 'you had to be there' - it was all in good spirit
Why aren't the comprehensions in their own function? The 79 char row length is a recommendation, not a limit. PEP8 is an archaism in that regard. Readability is what counts, and why forced indentation is a good thing. Is your objection against readable code?
Do u have any BAT, SIT, PAT environments at the bank u work at?
I see the not being given permission side of things as more about OP not asking for that permission (which is hard and can be disappointing, so it makes sense) than a reflection that the boss wasn't interested in being supportive of the product. Asking before telling is basically just how new software adoption works a lot of the time. People often don't want to learn how to use new tools that might break their existing workflow. The boss was basically giving the staff a soft warning that this was not going to be optional software, so they should start working with it and coming to terms with building it into their work lives.
Working on moving my Flow Analyzer project that puts [Netflow / IPFIX / sFlow into Elasticsearch and visualizes with Kibana](https://gitlab.com/thart/flowanalyzer) to a more multi-threaded model. Splitting field parsing across threads really helps process more flows for high-bandwidth networks.
https://github.com/coderByNeed/BOB404 BOB404
tl;dr for everyone else: Consensus in that thread seems to be that it's a good idea but final details on the implementation and testing appear to be bogging down. When the bug was captured by the wayback machine, the change was tagged for the 3.7 release.
Of course, the ones who actually *need* binaries from python.org. Everyone else can just `apt` or `homebrew` their way out.
That would be sick. You can make a front end look pretty really easily with bootstrap and add some nice charts in there with plotly.js 
I made [my own version](https://github.com/zyocum/reader) of [`newspaper`](https://github.com/desmondhume/newspaper) using the [Mercury Web Parser API](https://mercury.postlight.com/web-parser/).
THIS IS WHY WE PROGRAM
It's generally a bad idea to upgrade (or modify) the system Python on a Linux system. If you need a different version of Python, install another instance instead.
By finding a way of rethinking the problem. If you can break the graph into logical subgraphs of around ~1m edges, run the analysis and store it. Or get more ram.
Rebuild 3.6.0 from source after apt-get install libssl-dev on your Raspberry Pi.
In before OP becomes "The Carver"
Style readability should be a function of experience only, not also of syntax. 79 is a very good limit. I like to side-by-side diff3 without scrolling horisontally.
&gt;Style readability should be a function of experience only... Wrong. Universal readability is a universal benefit. It doesn't mean the code is always good, it just means you can more easily tell if it is good or bad. &gt;79 is a very good limit. 79 is an absurd limit in the world of ubiquitous wide screens. 100 &amp; 100 is doable on pretty much every modern monitor, even with a project tree and mini-map included. In any case, PEP8 isn't python.
Or compile from source. 
\^- **This**. We eventually started outgrowing the local apps. IT wanted it in a safe IT server. Everyone is familiar with HTML5 and web browsers.
 Opening a text file and running into some bullshit unicode or something error. 
Wait, what? Can you explain what you mean?
Your app might be a good fit for a pattern called Model View Controller and it will help you decide how to hook all the parts up. https://sukhbinder.wordpress.com/2014/12/25/an-example-of-model-view-controller-design-pattern-with-tkinter-python/
One good side effect of using virtualenvs is that you can easily blow them away and start again if they get borked. 
You will save so much time using git vs manually copying old backups. It allows you to take snapshots of a project and even add a comment of previous versions. It's pretty much like checkpoints in a video game. It will tell you every little change you have made between commits(saves/checkpoints). I mostly code alone too and I can't live without. I do not miss the days I was without it. Also if you ever decide to move on, the next guy to maintain the project will thank you.
You can pretty easily compile from source on Windows too. Its pretty decently documented as well.
Nice article. I was unclear on the difference between the two methods, and this was a clear explanation. 
X-Post referenced from [/r/zsh](http://np.reddit.com/r/zsh) by /u/xuhdev [Enable Auto Completion for pip in Zsh - Top Bug Net](http://np.reddit.com/r/zsh/comments/6siqf8/enable_auto_completion_for_pip_in_zsh_top_bug_net/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Nice. I'll add that the inbuilt unittest module also has similar functionality with the [subTest context manager](https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests). It's available from Python 3.4 onwards and a backport for Python 2.7 is available in the unittest2 module.
100 on diff3 will not work with a readable font. If universal readability would be universally better, we would not have math symbolism and instead use pages of prose every time we want to convey one expression. 
&gt; If universal readability would be universally better, we would not have math symbolism and instead use pages of prose every time we want to convey one expression. Uh, no. That is the opposite.
I just started learning myself and have found the Learning Python courses on Codecademy to be a good introduction. I have also found some good videos on YouTube. I am almost done with Codecademy and have been searching for something else to help teach me. I have heard a lot of good things about the Udemy course Automate the Boring Stuff with Python Programming and plan to go through that course next. Good Luck!
For Windows this is usually the case. Depending on the package you may not even have Windows binaries at all. I hope that you meant 3.6.2? Anyway, it does take some time to get binaries out when there are releases (sadly people don't test against RCs).
Then look at alternatives? My point was not that Python is great for everything, my point was it's popular and one reason is that it's great for web apps, generally.
/r/learnpython would be a good place to get lots of beginner info. 
"Online Books and Resources" on the right -----&gt; or /r/learnpython/wiki/index
I think I just realized software development is not what I want to do with my life.
Clean Code was a great read for me and really helped me take things to the next level. 
Well, a few months ago there was a JS developer who removed his package `left-pad` from NPM. It was a widely used package, and as a result, many people were unable to deploy their own code to their production environments, because they depended directly or indirectly on this package, and were directly using NPM in their deploy process. These people would be unable to to deploy if NPM were to go down and would have to wait until NPM was back up so that they could resume their own jobs. Also, I read that the `left-pad` package was being downloaded multiple times per second, which is crazy if you think about it. All these problems can be fixed if you set up a private repository for the packages you depend on. Developer removes package from PyPI? No problem, you still have it. PyPI goes down? No problem, you only can't update to newer versions right now, but you can still deploy using versions you already have. This is important for any package repository you use, be it NPM, PyPI, NuGet, RubyForge -- you name it. (Incidentally, it sucks that each language solved this problem their own way.) If you do a web search for "pip private repository" you'll find some guides and how-to's. Also there is devpi which is very full-featured. 
Well done! Automating work to improve efficiency is a great initiative. On thing though: &gt; running this script is now one of my daily tasks Are you familiar with cron or crontab? This is an operating system utility build into Linux and MacOS to schedule the running of programs. You could use it to automate the daily running of the script.
without discussing the specifics of my env, i could just put it on a timer but then i"d forget to check that everything is actually fine
Start to learn code with one project is the best way to learn any language. Nice work
I'm curious, did the bug only apply to 3.5? If not, how do you decide how many versions to fix. Would you fix 3.4 and 3.3 and so on?
I'm doing Python Crash Course at the moment and it is more than you could ask for learning Python. Recommend!
You can use Bokeh or DASH or bqplot for the dashboard!
you know, I think you might be onto something :)
I feel that GUI (tkinter, remi, OpenGL, html/css/js etc) is more of a hassle than command line. I can't get anything to look nice, and trying to use, say, Bootstrap makes things prettier but they still look amateurish to me. (Things people have done on other sites with Bootstrap are amazing, so it's more a shortcoming of mine than a criticism of Bootstrap.) I managed to get flask to make a "functioning" website (not in production), and can layout basic HTML (headers, tables, bullets etc). Ugly, but works. Haven't really used CSS or JS for anything, though, and can't figure out where/when to use them. I've not been able to grok web frontend (or GUIs/UX in general). Do you have any suggestions on how to learn it well?
The books from the gang of four are brilliant for this. Clean Code, Refactoring, Design Patterns. Also read PEP8 if you haven't yet.
Glad we agree. Unfortunately not everybody understands Tensor notation. That doesn't make it usless. 
ssl missing is more fundamental than virtualenv tho
Username checks out.
Haha, I just might!
I never get tired of that feeling. Well done, enjoy :) But keep evolving, keep learning, never settle ;)
You need a specific version of Visual Studio, and if you want a complete dist, you also need to find, place or build external libraries including openssl... it's a pain in the ass on Linux, let alone on Windows.
Yeah... Let's choose to not believe OP, the person who actually works under him. Great idea. 
Nice. Next step: NO ONE needs to run this manually. Use cron or something like it to run automatically. Log and report (via email probably) any exceptions or errors. 
Hmm, you may be right. As I said I don't see into it so much. But interesting discovery. Thank you :-)
- Do version it, and have a backup of the code - that's great grounds for a promotion
Why does `list` call the other one out of `str` and `repr` to the one I would expect on its elements?
Heroku is a really good option for deploying. You can put your code in a GitHub and Heroku will continuously deploy as you make updates to your GitHub master. Since using it, I have never seen the site go down once, and I am still on the free tier with them. The site I built is a business name generator: http://www.nameamigo.com/
Does this do html output logfiles? I always wanted that so that I could have pretty formatted columns in the browser.
Not sure on JS, but CSS just straps onto HTML (in the most basic sense of CSS) so just learn how to make a static site with CSS. It will translate 1:1 with your work with flask. Then work out how you want your JS to work when you want to make that website dynamic, e.g moving website elements, refresh if content without loading another page, mouse hover etc
It ws ported/inspired from java, I think from log4j. They kind of "need to" make a new one with a more idiomatic api. Maybe in Python 4? 😀
Great work - now you can start to think about what features will add value. You can get it to email you the report, or push the data into a database and create a dashboard on the front of that. But, well done! (Also, if you have a seasoned Python hacker on the team, get them to take you through a code review - probably will be humbling, but it's one of the best ways to become a better programmer.)
i'm all on my lonesome... i wish i had someone to do that, bejng self taught i'm sure i'm doing *something* wrong
Definitely Gunicorn, and using Gevent workers. Definitely not CherryPy. But this will be simple - - you literally just install those two packages, run "gunicorn yourpackage:flaskapp -k gevent -w 4", and you'll find yourself serving your Flask app properly with 4 workers which are each asynchronous. Ready for production, mostly. Technically you should run this behind nginx in production, but Caddy is another great option and will require less than five Iines of configuration to proxy it Gunicorn. Also, if you this thing isn't anticipated to be extremely high traffic and/or a target for hackers, you could possibly not bother with this part yet. If you're using Docker, the official Python images are what you want, and it should only require a few lines in your Dockerfile to get it working with your project.
Hi everybody, I'm struggling with this question since a bit. After reading some documentation and this sweet topic : https://hackernoon.com/threaded-asynchronous-magic-and-how-to-wield-it-bba9ed602c32 we can understand that : - Async != Multiprocess - Threads are affected by GIL and are not that sweet The solution seem to lurk with multiprocess but i'm struggling to use them inside an Async Web Server. Basically, i've a big calculation that needs to be boxed-out of my main loop so it doesn't hang my webserver. Anyone would have a suggestion ?
I've also written one: https://github.com/boxed/iso8601 The name iso8601 is taken on pypi unfortunately, by a module with much smaller coverage of the standard than I think is ok. 
Developing a tool for import specific sensors data into Neo4J and Oracle DB. Neo4j official python module is very easy to learn, fantastic. Installing cx_Oracle module (for Oracle DB) was a nightmare on Windows and Ubuntu; only CentOS saved me. 
Git is the solution
It’s foolish to assume your ops staff will be better at keeping a server private and unhacked than a multimillion dollar business that focuses on it as their core competency. 
You should look into task queues like celery, rq, huey and others.
Erm, no? Yes you have to download Visual Studio 2015 but building it is literally calling `build.bat -e` and it will download and build all dependencies for you.
I know Celery but I wanted to avoid the additional infra ; Someone nice gave me an additional hint about the Async Executor https://docs.python.org/3/library/asyncio-eventloop.html#executor And this question seems to be better formulated https://stackoverflow.com/questions/27290656/should-i-use-two-asyncio-event-loops-in-one-program/27298880#27298880 
Where is the best intro to this? I have no idea where to start with all these technologies.
uWSGI + Nginx works pretty well for me
you can use async with multiprocess with process executors. Check the code below: import asyncio from concurrent.futures import ProcessPoolExecutor def cpu_heavy(num): print('entering cpu_heavy', num) import time time.sleep(10) print('leaving cpu_heavy', num) return num async def main(loop): print('entering main') executor = ProcessPoolExecutor(max_workers=3) data = await asyncio.gather(*(loop.run_in_executor(executor, cpu_heavy, num) for num in range(3))) print('got result', data) print('leaving main') loop = asyncio.get_event_loop() loop.run_until_complete(main(loop)) 
https://bootswatch.com/
Great work. Have you started looking at how to secure what you're doing, though? Remote access to internal information can always open up some holes. Best to control access and lock everything down now, while it's still small.
Ehhhm... Wordpress is PHP
I had not looked into this for a few years, so I just checked now and that seems to be the case for 3.4+ versions. It certainly wasn't like that in the past.
Oh shit yeah, OP do you use git or something for version control? 
If you want a `cargo` like tool (Rust), try [`poet`](https://github.com/sdispater/poet).
 How do you send ping? Launching ping command via subprocess or os.exec and then parsing the output? 
I deploy an lxc container running Alpine with nginx, uWSGI and the flask app using Ansible. It's pretty easy to do, and having an idempotent configuration orchestration to deploy it makes it super easy.
Maybe making like a group where more people can edit the code at the same time and see the changes. Like a chat but with programming:D
Playbook: https://gist.github.com/bitwisecook/18aa188f8c48f845e97756c228fde2f3 nginx conf template: https://gist.github.com/bitwisecook/747e6e7f6381546c9f86908d0b398da7 uwsgi.ini template: https://gist.github.com/bitwisecook/f34bc76a69be03cfd89cdc6f646f8dff 
I didn't see it in the blog post, but one general approach is to have `obj = eval(repr(obj))` This is what really helps with debugging (though there are cases where you might choose not to make it so strict). But yeah the `str(obj)` is meant more for plain readability. This is true for many python types: &gt;&gt;&gt; s = 'hello' &gt;&gt;&gt; repr(s) "'hello'" &gt;&gt;&gt; eval(repr(s)) 'hello' &gt;&gt;&gt; s == eval(repr(s)) True &gt;&gt;&gt; s == eval(str(s)) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;string&gt;", line 1, in &lt;module&gt; NameError: name 'hello' is not defined Note how it's true for the `repr()` but not the `str()`.
Ooh, shiny. Doesn't really help the whole fragmentation deal, though. It looks like poet tries to do many of the same things as [pipenv][], which has the benefit of automatically managing virtualenvs too. OTOH poet seems to go further and try to replace the whole `setup.{py,cfg}`/`MANIFEST.in` mess with a single `poetry.toml`, which I could definitely get behind. [pipenv]: https://github.com/kennethreitz/pipenv
Watch some David Beazley talks: https://www.youtube.com/channel/UCbNpPBMvCHr-TeJkkezog7Q I also found this to be very clarifying: https://www.youtube.com/watch?v=7cC3_jGwl_U Read the code reviews of old game engines by Fabien Sanglard: http://fabiensanglard.net/ The tough part in the next step of learning to code is learning how to keep it very simple and cleanly separate things. There's an awful lot to learn and you will go through a hump of making things overly complex before you learn to simplify. "It took me four years to paint like Raphael, but a lifetime to paint like a child." - Picasso
Skunkwork projects are sometimes the only way to get stuff done... Better to ask for forgiveness than permission. One thing I love about my job and my boss... He's like go ahead and do whatever I want to make things easier for me/him and our users. The IT guy here needed away to monitor shared drive that people LOVE and think it's their own private DROPBOX uploading mp4/mp3's. I wrote a script in Python to monitor a Windows API when files are added to the drive. It emails a report who copied the files and deletes the files shortly after. No risk that I'm deleted worked related files since there is at no point mp4/mp3s ever created or needed for our plant. I also had a script monitoring the network drives for ransomware file that was the ransomware note . It was something like ~!$#*RanSoMware*#$!~.html whenever it was found we got a email and which network user it came from and we went flying across the plant to turn off their system. Because F* lame ass Symantec is freaking useless to detect anything. Not our choice of antivirus someone in Corp decided it was the right tool.... ya right.. 
I do this, and it still doesn't work 100% of the time. It's been a recurring issue. 
Not really done an awful lot of python but I'm trying to learn data science (if that's even the right term.) Been working on a small microservice at work that proxies an API and at home I've been playing around with /r/hiphopheads posts for the last 2 years. Cleaning up some data and seeing what artists get the most karma etc.
yes
yeah, as of writing this today (d+1) i'm working on this... the front end is pretty powerful so i want to make sure no one whose not supposed to be using it can use it
I have a project which uses a library which already logs something. How to configure logzero so it captures the library logging too? E.g. requests or cherrypy.
with a front end like the one i made you could've identified the user's machine and remote desktop shut it down... we already used it in a similar emergency
Guess we could do the same. But sometimes the IT guys are roaming around on the plant floor and not at a PC. Then again come to think of it, they could find the nearest PC and visit a intranet page and do that as well.. Thanks for the hint. 
So no promotion or pay increase?
Thanks! Will have to check them out
In python 3 you can do `super().__init__()`
Or tanium, or osquery. 
A few tasks to begin with learning Python on Linux: * Change the hostname of a system. * Monitor the disk space. * Script for memory status of a system. * Create dummy files and copy them to a different share/systetem. The idea is to write small programs that are part of day to day tasks of sys admins.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
well here's the thing... i feel some things you can't buy with money... one thing is experience... the opportunity to mess around with a large network and the leeway i get for experimenting mean i can learn things that would likely be out of reach otherwise... so while more money is always nice... i am just as satisfied enjoying the freedom i have... i'm sure it will help me earn more in the future... this has never been a consideration for me as far as my coding is concerned
In General that's quite true, *but* beware of the fact, that lots of those stuff is written with *statically* typed languages in mind. So not everything applies to python as much as to Java, C#, C++ and so on. Python also offers quite strong functional approaches to things; something that even more differs much from most proposed technics, patterns and idioms from the books. So you have to read carefully and separate, which item works for python and which does not. DRY, good Naming and so on is of course universal. But something like Singleton-Pattern simply appears totally different in Python! But those books will make you a better developer in general of course! You just have to check the validity of an item within the context you are working. I would like to add some books: * Domain Driven Design (quite hard to read - because of the content and - especially for a none native speaker - because of the kind of prose English he writes) Very enlightening! * Head first Design patterns from O'Reilly's Head first series. I would choose that one over the original book, as it is really a studying book with didactics in mind I would also recommend to learn a language with strongly different paradigms than Python. Especially something really *functional* like Clojure, Haskell or Scala. There are good books for those too, which I don't wanna explicitly name here. Just have a look into the corresponding subreddits. The key is to open your mind for different approaches. Even if you don't work professionally with those languages, it will enhance your abilities to think about problems and probably to express them in a better way than before. For example it helps a lot to prefer immutable objects in many situations - before I learnd about functional programming, I never thought that this kind of *limitation* in the first site will allow you to write better code around thos objects in the long term.
You can buy experience with money. It is called schooling.
*hands on*
&gt; i am just as satisfied enjoying the freedom i have... This is rare. It's worth a lot of money in my opinion. Congrats, OP.
really the way forward is just experience and reading good code. you'll get it in time, but if you want to accelerate that process then start actively refactoring your code before opening the pull request. this means you'll need really good tests so you don't accidentally break functionality when refactoring, but really good tests are a great idea anyway. 
Thanks for sharing this. I just dug into Ansible recently and I'm enjoying the flexibility and easy of use. My VPS server can now be torn down and setup in a fraction of the time I have had to do it before.
Look into Dash, from Plotly! It'll save you having to write the flask views and everything yourself. 
Potential stupid question - would this be suitable for connecting to a server running Socket.IO? 
Personally, if I was in your position I'd make sure it's logging, wait 6 months to a year and then work out how much time you've saved with it. Then you can present it to your boss or shareholders and point out how much money you've saved the business. By this point hopefully you've started something else and they say yes
that sounds balanced... i might do that
One. 👏🏻 Of. 👏🏻 Us! 👏🏻 One. 👏🏻 Of. 👏🏻 Us! 👏🏻 Seriously, great job. You had an itch and you scratched it, which is how 99% of all the "big, professional" stuff you use daily got started. It's how careers (and companies) are made. Keep up the good work!
the lack of this is one of the best things about python
Or [Gogs](https://gogs.io) is a great alternative written in Go that's super easy to deploy locally. That's an easy sell to nervous bosses: "look, out stuff never leaves our secure network."
It would be advisable to monitor that cough.
Not sure actually. But if socket.io serves websockets, then it should work. Let me know if you give it a try...
Oh, so much this. Even if you don't use 99% of its features, Git gives you access to this workflow: * Whew, it all works. Let me take a picture of the current state of things. (`git add; git commit`) * Ok, time to add a new feature. *work work work* * Oh no! Something stopped working! What changed? (`git diff`) * Ah, right. Let me fix that. * Repeat. Or if the experiment failed and you want to throw it away: * Seems I was smoking crack this morning. Let's just go back to the last known working state. (`git reset`) It's so powerful and liberating for even tiny single-person projects that I always work that way.
Good question and thanks for the idea. I'll think about it and try a few things, and document how to go about it and report back here.
take the sensitive info out of the script, post it to github and solicit for pull requests. I'd be happy to take a look at it. /u/ChazR is absolutely correct wrt learning from others. 
Pure Python in the browser loads very slow but it exists: http://pypyjs.org/ Transcrypt (www.transcrypt.org, disclaimer: my baby) supports quite a lot of Python (e.g. operator overloading, metaclasses, multiple inheritance, async/await, and loads as fast as JavaScript. It uses mainly JS libs without conversion, since these make most sense in the browser. 
You can, on Python source level, without restriction. Indeed using sourcemaps as awegge stated. It also works flawlessly for minified code. I often use this from Chrome to debug my Python code. It all boils down to using the -m compiler switch. No further complexities. See http://www.transcrypt.org/docs/html/installation_use.html#using-sourcemaps-and-annotated-target-code 
i have a busy week coming but i'll do a rewrite at home that maybe others can use it in some way and provide feedback, maybe start another thread
"automate the boring stuff with python" author had vids on youtube and full course on udemy.
Feel the same. That's why I wrote Transcrypt...
Yeah you should! I've always found that companies are usually apprehensive if you do something good and then immediately ask for a pay rise. If you can afford to be patient and show them the amount of money saved then you become invaluable. It's a lot harder to say no to a payrise if you've just demonstrated $100k in time savings over the year :) Good work by the way! Hopefully this kickstarts your career in programming.
automate the boring stuff with python
Cool, thanks
the one i made looks horrible, gray windows buttons on a gray background.... being on the team myself and as such aware of what's needed helped me figure out a layout that i'm happy with and is functional... i wouldn't call it pretty by any stretch of the imagination
thank you! today I go to work!
Just out of curiosity, do you know how Rust's runtime compares to C's crt0 in size? I like Haskell, but the runtime size is a drawback: ~1.5mb per executable.
I'm sure Python has a module for that.
Flask has some great tutorials, check out /r/flask. My personal preference is [Pyramid](https://trypyramid.com/) which also has great documentation and tutorials.
**Here's a sneak peek of /r/flask using the [top posts](https://np.reddit.com/r/flask/top/?sort=top&amp;t=year) of the year!** \#1: [The New and Improved Flask Mega-Tutorial](https://www.kickstarter.com/projects/1124925856/the-new-and-improved-flask-mega-tutorial) | [27 comments](https://np.reddit.com/r/flask/comments/6kcd2t/the_new_and_improved_flask_megatutorial/) \#2: [Running your Flask Application Over HTTPS](https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https) | [1 comment](https://np.reddit.com/r/flask/comments/6f743p/running_your_flask_application_over_https/) \#3: [Microservices with Docker, Flask, and React](http://testdriven.io/) | [8 comments](https://np.reddit.com/r/flask/comments/6ef0qj/microservices_with_docker_flask_and_react/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
How about not making a comment until you know what you're talking about? Building Python on Windows has been a piece of cake for years.
If you can handle everything with requests, then you can just use urllib and emulate the correct POST / GET process. Otherwise you can use selenium Try taking a look at this: https://automatetheboringstuff.com/chapter11/
Thanks! I'll look into it (and check back when I get lost, haha).
Playing with a theory on the number nine 
in my first job, the finance team received a pdf with all the invoices of our clients (ISP) they spent like days spliting by hand and renaming the splitted pdfs. i did a python script that splits the pdf, it checks if a client has more than one page, and rename the resulting file as they want scraping the info from the pdf. they thanked a lot and it saved a lot of time, was becoming a problem because the company was growing very fast
I went ahead and wrote a little about recursion on my blog. I may add it to my book at some point, but I haven't decided yet. You can check it out here though: https://www.blog.pythonlibrary.org/2017/08/10/python-101-recursion/
Thanks for that, and congrats/good luck with your program.
Will do.
There are many way to this. (request, urllib2 (maybe urllib), selenium etc.) I can recommend to just login into the forum. Then you have to take a look at the POST or GET request and edit it with the correct data. It's not that hard, but I think a pretty decent challenge for a beginner :) Some example Code for a login: https://pastebin.com/Ybd2CHk8 
That's so awesome that I had to try it out finally, and I did, and I was pleasantly surprised by how easy it was to get up and running. However, when I run it with `-m` it blows up. I can't get source maps to work at all. mac:transcrypt_demo corm$ transcrypt -m jquery_demo.py Transcrypt (TM) Python to JavaScript Small Sane Subset Transpiler Version 3.6.45 Copyright (C) Geatec Engineering. License: Apache 2.0 [Errno 2] No such file or directory: '/usr/local/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/__javascript__/extra/sourcemap/org.transcrypt.__base__.mod.js.map'Traceback (most recent call last): File "/usr/local/lib/python3.6/site-packages/transcrypt/__main__.py", line 147, in main compiler.Program (transpilationDirs, __symbols__) File "/usr/local/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/compiler.py", line 129, in __init__ Module (self, ModuleMetadata (self, self.baseModuleName)) File "/usr/local/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/compiler.py", line 301, in __init__ self.modMap.loadOrFake (self.metadata.sourcePath, self.nrOfTargetLines) File "/usr/local/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/sourcemaps.py", line 135, in loadOrFake self.load () File "/usr/local/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/sourcemaps.py", line 205, in load with open (self.mapPath) as mapFile: FileNotFoundError: [Errno 2] No such file or directory: '/usr/local/lib/python3.6/site-packages/transcrypt/modules/org/transcrypt/__javascript__/extra/sourcemap/org.transcrypt.__base__.mod.js.map' This is really cool though, source-maps or no ------ # HEY IT WORKS! https://github.com/QQuick/Transcrypt/issues/104 ^ That thread helped a ton. Now I have python in my browser!!! :D Thanks for building this
Python's datetime module is a motley collection of miscellaneous stuff - this is just one example. It needs an overhaul learning lessons from arrow, maya, pendulum etc. The timezone handling particularly annoys me.
I've just started on making a script that will 'solve' the game Bagels as efficiently as possible. I think it's gonna be quite the task for a somewhat beginner like me.
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/itamarst [Python decorators, the right way: the 4 audiences of programming languages](http://np.reddit.com/r/programming/comments/6sv0vp/python_decorators_the_right_way_the_4_audiences/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Just do whatever you would do. They're testing your ability to write code that works and is good. The way you think about writing code too. You're in a better position than people who took college for their knowhow as you've learned to program where they've learned the theory of programming. You'll be fine, just do whatever you think is the best thing for the problem. They're asking you to fix that, so fix it (and make it easily expandable as that's also what they're looking for). https://youtu.be/QPZ0pIK_wsc
Thanks
Great write-up! (Minor thing: The colors in the graphs are not consistent which is a tad confusing)
This was a helpful video!
10 network requests and 5 API calls seems like a lot of responsibility for a single function. Wouldn't it be more appropriate to break that down into smaller functions with more limited scope? I would think that would also lend itself to making them more testable as well.
I guess it means it's call hierarchy contains 10 network requests and 5 API calls. Like, it does 1 API itself and the other calls are done by the API call or something like that. Bigger programs often do not have shallow call trees, unfortunately. 
Having `print` and `println` seems to be the preferable way of doing these things.
I'm an electrical engineer at a hard drive/flash memory company you probably own at least one product from. I do testing on very specialized machines that basically emulate all of a hard drive except the head (part that reads/writes to the disk) and the disk. So we can put on different heads and disks and run tests on this machine. This is the machine we use, but with a bunch of addons to add more features: http://www.guzik.com/product/v2002-spinstand-automation-for-media-testing/ We can do just about everything the hard drive does on this machine. We write servo so the head can know where it is within a very very small tolerance. Write real data with the same channel chip that's on the drive and change all the registers/settings of this chip, etc. Right now I'm writing a test in Python to look at SMR ATI. SMR - Shingled Magnetic Recording. Basically the data is written in 'tracks' on the media. Tracks are concentric circles of data that go across the radius. Like this: http://www.datarecoverylink.com/hs-fs/hub/120842/file-16620285-gif/images/tracks_and_sectors-resized-600.gif?t=1418687961000 We used to write a track then find out how wide that track was and then write another track far enough away that they wouldn't interfere with it. With shingled writing we actually overlap the tracks. That way we can shrink the tracks without having to put a ton of effort into making the heads write narrower tracks. ATI - Adjacent track Interference. If you write one track many times how does it effect neighboring tracks? With shingling the effect is magnified since the tracks are way closer together. So basically my test is to write 5x shingled tracks in a row. Then I'll look at how good those tracks are. Then I'll rewrite the last track 10x, 20x, 40x and each time look at the effect on the other tracks. This is really important because in a drive you are going to be erasing and rewriting data and you need to check if your ATI is within a certain tolerance, otherwise you'll be erasing data. SMR writing is a little more complicated because since the tracks are overlapping you can't just rewrite a track in the middle of a block of tracks. You'll end up erasing the track that overlapped the track you're rewriting. But each block of tracks is next to another block of tracks with a small buffer in between. So each time you rewrite you might be having an effect on that other block of tracks. I also write a lot of little scripts that aren't tests just to speed up testing. I honestly think I've saved my company a LOT of money with these. I save our technicians many many work hours over a year. I basically use python to increase efficiency and now I'm starting to write HDD tests like the one above. I've written about 5x tests so far.
u/waterguy12
I'm still just learning, so totally not an expert, but there's a *lot* of compile flags for Rust, and getting an apples to apples comparison isn't easy. Rust compiles in dev-mode (no optimization, faster compile) and static by default, so it tends to be significantly larger than C -- but smaller than both Go and Haskell -- by default. Start statically compiling C and it jumps up to not much smaller than Rust. It seems you can trim the fat down to slightly larger than C + slightly slower than C but **oodles** safer than C.
Are you using IntelliJ or are you using PyCharm?
NinjaIDE :) 
+1 for gunicorn
Vim
Yeah, that's the best way to advance your career. Always raise your hand.
Here it comes! EMACS !! There, the thread is now complete and ready to be closed.
Eclipse + PyDev
Try prefixing the call to `create_channel()` with `await`. I discovered the hard way that sending a message only works if you prefix it with `await`.
The decorator is actually called when the function is defined. So something like: @dec def fun(): ... Actually means something more like `fun = dec(x)` where x is the newly defined function. So what the decorator actually does depending on the code inside it. For example, you can have a decorator that simply does something extra, like this: def dec1(fun): fun.something = 1 return fun which just does something and returns the original function and gets out of the way. But more likely, you will often want a wrapper, more like this: def dec2(fun): @functools.wraps(fun) # Good practice to always do this def wrapper(*a, **kw): ... do some stuff before the call ret = fun(*a, **kw) ... do some stuff afterward return ret return wrapper Notice how this defines a new inner wrapper function, and returns that. So when you decorate a function with it, you think you're calling the original function but you're actually calling a one-off anonymous wrapper function instead. Decorators that take arguments add an extra level of indirection to this, but the principle is the same, so they have a structure like this: def dec3(arg): def decorator(fun): def wrapper(*a, **kw): ... do something involving fun and arg return wrapper return decorator so it basically creates a one-off anonymous decorator which creates a one-off anonymous wrapper for the function. A bit confusing I know, but once you get it it's pretty useful. And that's how you make complex decorators. :)
That's exactly right! But often before you can refactor you want a few tests in place. That's exactly why I made this post. * Add janky tests that mock everything * Refactor your code with added confidence thanks to the janky tests * Update the tests and probably remove the mocks * Woo
Hmm, I'm using PyCharm, but I've had it open with 3, 4 projects, each with thousands of files, and the only time it has gotten slow is when I have a console open to follow the output of a running application. My laptop is about the same as yours, but a year older.
He asked for something more like a text editor not an OS ;) /s
What do you mean by 'x'being the newly defined function, shdnt it be fun =Dec(fun)
ok i added the await now it looks like that S_ID = server.id await bot.create_channel(S_ID, name='kappa', type=discord.ChannelType.voice) im getting the following error msg now: AttributeError: 'member_descriptor' object has no attribute 'id' 
As a longtime user of discord.py I've got a couple suggestions: * Your references to discord.Message/Server/Member/Channel will do nothing at all. You're creating references to the class objects, not to any instances of those classes. I can't find any documentation on pass_context=True but you aren't passing the correct arguments to your command function, it needs a [Context](http://discordpy.readthedocs.io/en/rewrite/ext/commands/api.html#discord.ext.commands.Context) argument at least. ~~I can't tell what version you're using but I'm assuming since you're getting started in discord.py that you're probably using the rewrite, I've got no experience in that particular fork but a tutorial is here~~ Given that you're calling `discord.Server`, a class that was renamed in rewrite, you're using the old version. That's fine, it's the version I'm using, and it means you don't have to remember to call them Guilds. * To clarify, things such as `server` are provided for each command by the context variable passed, which gives you access to the `message` attribute. You can get the server with `ctx.message.server`, the author with `ctx.message.author` [and so on](http://discordpy.readthedocs.io/en/latest/api.html#discord.Message). * You don't have to use server.id, or .id for anything much at all. Any function that wants a server instance can just take the server object, or channel object or whatever. * As the docs for [`create_channel`](http://discordpy.readthedocs.io/en/latest/api.html#discord.Client.create_channel) say, `This function is a coroutine.` Coroutine functions in Python have to be awaited. Working syntax would be `await client.create_channel(ctx.message.server, "test", type=discord.ChannelType.voice)` edit: After looking at the docs for [Bot](http://discordpy.readthedocs.io/en/rewrite/ext/commands/api.html#bot) it turns out it's a subclass of Client so you're right to use `bot.create_channel`, either will work and the latter is more readable.
And could you tell the syntax if the decorator has arguments let's say @decarg('/') def ghj(): pass over here is the syntax ghj = decarg(/)(ghj) or ghj = decarg(ghj,/)??
[Jupyter Lab](https://github.com/jupyterlab/jupyterlab) might be exactly what you're looking for. Also, I haven't tried it, but PyCharm has jupyter integration.
Yeah, [Spyder IDE](https://github.com/spyder-ide/spyder) uses Ipython as it's default interpreter.
I've never had problems with PyCharm and am a huge fan of it. 
nice thx you for your fast and good reply i tried it with the context augument it worked. As for the pass_context=True you have too add it else you will get something like this: discord.ext.commands.errors.MissingRequiredArgument: ctx is a required argument that is missing. at least i get it like that :)
I'm using IntelliJ with the python plugin 
PyCharm has never given me problems when I've had 16G of RAM, even when I've had multiple projects open, chrome with tons of tabs, and an instance of IntelliJ for a golang IDE. You aren't editing files on a network drive or a USB drive or something like that, right?
Ah I see, I'm unfamiliar with discord.ext.commands, I just check every message for matching text.
Download PyCharm, it's made by JetBrains as well
I use sublime text with the anaconda plugin. Super fast and looks great.
Came here to ask this. I'm really confused. I use PyCharm on a 2009 Macbook upgraded with 8 gigs ram and an SSD, never had any issues. I agree IntelliJ and other JetBrains IDE's eat more RAM than any other environments I've seen, but you shouldn't have to worry how much it eats with 16GB. 
Lucky for me, the guy12 war happened after I started. And that other guy is making a PowerPoint for it.
Well, I wanted to be clear that the function is now anonymous, I thought that would be less confusing instead of more. Sorry.
The thing that actually decorates the function only takes the function as argument, which is why if you want to pass arguments to a decorator, you actually have an outer function that takes the argument and returns a decorator closure which uses the argument, as in my third example. 
Thanks, I'll give it a try
I'm guessing I might have some plugins installed that have corrupted my IntelliJ. I'm gonna give PyCharm a try
I use PyCharm/WebStorm at work when coding for long-sessions; VS Code for quick-editing.
Wingware's Wing IDE (!)
So if you are willing to lock yourself into paying money you might be interested in enthought: https://www.enthought.com/ . My understanding is they are company that in some sense backs numpy/scipy while developing tooling which is similar to matlab but for python. So kind of like a less evil matlab. You might also be interested in [shiny](http://shiny.rstudio.com/) for R. I think this is more of a "rapid web app development tool for statistics" than jupyter. Jupyter feels like it exists in the reproducible research space rather than the rapid application development tool space. http://shiny.rstudio.com/ &gt; I just want to imagine a future where creating super data rich web apps in python doesn't require a whole bunch of setup. It's worth mentioning Zope here. I've never used it, and I know people who seem to hate it with a passion. I would also mention cookiecutter as a tool to make setup simpler. There whole: framework vs library vs language vs tool question is thorny. There seem to be a disturbing number of companies who buy into comercial frameworks, hit the limit of the framework, pour effort into somehow adding features to the horrible framework and then burn through junior developers because they have difficulty hiring people to work on their crazy old language.
one more question: How is it possible to check if a channel is empty ? because i want to delete it if the channel is empty for more then 1 minute. Do i have to use those events and set up a counter that counts up/down everytime sb. joins/leaves the channel or is there a other function i can call that just gives me the amout of ppl in the channel ? discord.on_group_join(channel, user) discord.on_group_remove(channel, user)
Well, emacs is also a text editor: since you can run any shell command in it, you can edit text using `sed` or `awk`, I'm sure.
Input and output are unclear in the requirements, which means the correct thing to do is ask them to clarify. If I ever do these kinda things from the employer side, I will deliberately underspecify something to see who asks clarifying questions. Those are the people you want. 
PyCharm. Although I've used the one included with Anaconda as well (Spyder?). 
I can highly recommend pytest.mock which is a pytest fixture wrapper around the seminal mock package. https://pypi.python.org/pypi/pytest-mock http://www.voidspace.org.uk/python/mock/index.html so then you monkey patch out all of our library functions with Mock objects which have can make a bunch of assertions about how they were called. Oh BTW mock is in the std lib now, unlike monkeypatch. It also does a lot more incredibly useful things. https://docs.python.org/3/library/unittest.mock.html Example from the pytest.mock webpage *whoops I was showing the wrong example; here's the right one def test_foo(mocker): # all valid calls mocker.patch('os.remove') mocker.patch.object(os, 'listdir', autospec=True) mocked_isfile = mocker.patch('os.path.isfile') 
Sweet mother mary that looks awesome!
Why not Python 1.7?
hm, say I had this function: def scrape_google(): return requests.get('http://google.com') And I just wanted to call it and make sure it didn't explode (the simplest test). In my example I'd do def test_scrape_google(): monkeypatch.setattr(requests, 'get', lambda x: "this is html") scrape_google() How would that look with `mock`? 
*That was a bad example; here's a good one def test_scrape_google(mocker): get = mocker.patch('requests.get', return_value="this is html") scrape_google() get.assert_called_with('http://google.com') # this is where a Mock object is great
Don't have time to look at your code right now but what environment are you in? I ask because I got some really strange behavior with variables in Jupiter Notebook that was apparently the result of a bug. Outside of Jupiter Notebook most of my imagined variable issues have been my fault. Hopefully somebody has time to dive into your issue.
For those interested, here's a blog post of the main author of the assert rewriting mechanism which explains very simply how it works: http://pybites.blogspot.com.br/2011/07/behind-scenes-of-pytests-new-assertion.html
Anaconda Spyder (Python 2.7.13 |Anaconda 4.4.0 (64-bit)|)
+1 on all the feedback about breaking things up. But for easily mocking extensive amounts of API access: https://github.com/kevin1024/vcrpy One of my favourite discoveries last year. 
Checkout the [pytest-mock](https://github.com/pytest-dev/pytest-mock) plugin. ;)
If you have a .edu email you can get the professional version for free.
Worth mentioning that pytest can also run doctests from python modules and from text files automatically.
 @client.event def on_voice_state_update(before, after): # Checks if channel is empty # If the user was in a channel before, and the channel had one user, and now the user is not in the same channel, logically the channel is now empty if before.voice.voice_channel is not None and \ len(before.voice.voice_channel.voice_members) == 1 and \ before.voice.voice_channel is not after.voice.voice_channel: channel_is_empty() # ... unless someone else joins an empty channel, then you're going to need to cancel the above logic if after.voice.voice_channel is not None and \ len(after.voice.voice_channel.voice_members) == 1 and \ after.voice.voice_channel is not before.voice.voice_channel: cancel_channel_is_empty() This is untested but that's the kind of logic you probably want.
FYI you can usually gain access to the original function by accessing the __wrapped__ attribute (e.g. add.__wrapped__)
Is there any specific reason you need this feature? Just right click and open them with IDLE then run them.
Only in 3.3+, if you're stuck on 2, no `__wrapped__` for you. And even then, in 3.3 there is a bug that might shadow the `__wrapped__` attribute that was corrected in 3.4
Whole point of the scripts is to eliminate some clicks. Adding clicks isn't ideal. 
Do you think you could reduce this down to a minimal reproduction of the problem, with no dependencies? Preferably with longer variable names? The example code you provided doesn't try to print Terrain. The problem description boils down to "going back outside of it" without any evidence of that happening. https://gist.github.com/alanjcastonguay/af4fa90486f8e5ddb7bff8d444407283 Ocean ATTRIBUTE __main__ ATTRIBUTE Second ATTRIBUTE
Create a batch file that runs them then.
Yeah seems to me you (OP) might like anaconda, Spyder comes standard 
You might need to shebang them now that they are associated with anaconda/Spyder. Just point them to your python interpreter of choice 
Wow! Nice find!
This OP! Spyder is great and sounds like exactly what you want.
What you are missing is the "python launcher for windows" feature, that comes with the standard python installation. Did you uninstall your previous python installation before installing anaconda? Or maybe anaconda just removes this, I don't really know. Anyway, to solve your problem, install this: [pylauncher](https://bitbucket.org/vinay.sajip/pylauncher) If you got any questions on how to install or how to configure this, hit me up.
I develop all of my most complex stuff in Jupyter.
You are providing band-aids, I am looking for a root cause and solution to return to original functionality. 
Thank you! It's my work laptop so I'll try this tomorrow. Super appreciated
But too buggy right now, maybe you can start contributing to it ;)
&gt;So if you are willing to lock yourself into paying money you might be interested in enthought: [https://www.enthought.com/](https://www.enthought.com/) . Or... Get anaconda distribution, it comes with Spyder IDE (which is way better than Enthought's solutions)
Why don't you put all of the possible coordinates in a list, shuffle it, and pop it 4 times whenever you need some coordinates?
fuck that's so obvious can't believe i didn't think of that thanks man.
There are people still on 2?
You seem a little sour. Try reinstalling python? There are other responses to your question if I'm not helping.
Sure thing. This only really works well because your grid is so small. It would be more interesting to think about for a grid too large to fit in memory.
Hi, sadly. At least for existing projects at work. And one is version like by a package. Mostly due to the fact that setting up SAML handling was a big enough pain in the ass once I'd rather see it rewritten than try to upgrade it, even if that means Node or Go. 
vim +NERDTree
I use/love pycharm. I do mostly backend engineering work and some full stack with Flask. If more lightweight is a must, I have used and liked Atom (opensourced buy github)
&gt;Names listed in a global statement must not be defined as formal parameters or in a for loop control target, class definition, function definition, import statement, or variable annotation. [link](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-global_stmt)
There's also Atom editor with hydrogen package which allows you to run specific lines of codes and also supports inline charts or outputs like jupyter. Downside is it is more resource intensive and slow at times compared to sublime text.
Cool! Hope you are having fun. You could try making a prototype with HTTP, frames being POSTed from one client to another and if that works maybe optimize with Websockets, TCP or UDP. If you don't feel the need to roll it yourself I'm sure there are telephony libraries that you could use for this. Are you set on p2p or can you have a server in the middle? Opening ports will be tricky in the best case (UPnP may traversal), and might be impossible in school or other large networks.
You might be interested in [Rodeo](https://www.yhat.com/products/rodeo) as well. It's an attempt to build an r-studio type of thing for Python. I've only experimented with it, so can't endorse it.
Default IDE and IDLEx.................. Jesus I'm SO bad...
could you point in the direction of the guides/docs you used to get started? I've used ansible before, but for network conf, not deployment, so I'm eager to try it out for orchestration.
One more thing in a lot of examplesi have seen the decorator using the decorated function as in this case fun by doing ret = fun(*a,**w) I don't understand what this does or what's point of doing it.
I'd download all of the python documentation [here](https://docs.python.org/3.6/download.html). It should have everything you need.
Would appreciate if you could explain a decorator clousure.
You should use video streams instead of thrashing the file system and constantly re-drawing a jpg. It will be more performant and avoid contributing to hard drive / ssd failure.
Thank you for your response, that is really quite helpful. As a follow up question; in your experience, are these tests timed (they said it'll take about an hour and a half), or will time impact my score? How are these usually scored (is my output marked as right/wrong, or how is my code evaluated - they said "once they receive my score, they will decide whether or not to invite me to an interview")? This is an online test that I will be taking from home, through a third party portal, so I am just trying to make sure I understand the process before I start.
Anaconda and use the Spyder IDE
Also y-hat rodeo IDE
Is it actually any different?
https://github.com/yhat/rodeo/blob/master/README.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [yhat/rodeo/.../**README.md** (master → aa1929b)](https://github.com/yhat/rodeo/blob/aa1929b1596d1161cd81c930603636a929462ea3/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dlgi16g.)^.
Thx
All of JetBrains IDEs are essentially a modified IntelliJ but designed around the language they are targeting. For example, PyCharm's debugger doesn't used pdb but instead a custom one. 
Rodeo is basically an Rstudio-like clone for python. https://www.yhat.com/products/rodeo
Thanks for the reply... Honestly, I tried this (doing the activate, and then python), and it didn't work. Anaconda seems like too much of a hassle to be worth it at this point, considering their pretty bad documentation for beginners. Thank you for the help though.
I used the enumeration function and comprehensions for the diagonals https://nbviewer.jupyter.org/gist/knowsuchagency/562d001ef65625247fc12cd6a2a6d7e4 ... rows = self.data columns = tuple(zip(*self.data)) diagonals = ( tuple(l[i] for i, l in enumerate(self.data)), tuple(l[2 - i] for i, l in enumerate(self.data)), ) # tie game if all(s != ' ' for row in rows for s in row): return Winner.FALSE for matrix in (rows, columns, diagonals): for vector in matrix: for symbol in ('X', 'O'): if all(element == symbol for element in vector): # we have a winner return Winner[symbol] # no one has won yet return Winner.NONE
How did you set that up to n the beginning? I thought you needed a batch file to run them or call it from a terminal. Also check the Path/Eng variables, Anaconda most likely changed them. I've ran into a similar issue on Linux
Do Terrain and PaintTerrain have to be global? It would be easier to test if these were passed around as function/method arguments.
okay, I actually take back what I just said. I thought "well screw anaconda!" and then went back to trying it with pip. Even with a package as simple as scipy, it was messing up. A bit of googling led me to realize how painful it would be to deal with its dependencies through pip/etc. I uninstalled both python and anaconda, then reinstalled anaconda only, and now I'm zoomin. Thanks again.
Hrm. Was that a sample question in your original post? If it's a third party online test, all bets are off, it's just however they put the test together. Asking for clarification may not be to your advantage in that case. It will probably be super obvious once you get in there, and they should have a way for you to run the code on samples inputs as you work. A very common way of evaluating program correctness for these sorts of things is to run it on a series of progressively more complicated and evil inputs. The more inputs your program handles correctly, the better. It might be timed, but they probably care more about correctness as long as you don't run out of time. 
And buggy as hell.
Thanks again for your response. The sample question I posted was found on the third party's website. I figured that was how they would score my solutions. I had friends in university who participated in a coding competition (sadly I wasn't eligible to participate), and their codes were scored in the manner you stated, but also factored in time spent (or maybe it was attempted solutions). I figure this would be similar.
Yeah pretty much the entire VFX, feature animation and games industries. Pro-tip: can probably make good money transitioning studios to PY3 before 2019/2020. 
That was literally the OP's question.
Good story bro, not what the OP asked though.
Well a lot of us write programs for other people. So it's always important to find solutions to these problems. One small inconvenience for you could be a deal breaker for computer illiterate people that may be using the program.
Yeah Enthought barely has py3k support. It's essentially abandonware at this point. Anaconda is the way to go. 
Be careful if you're using Pythons string formatting (whatever flavour) to create SQL queries from custom data. If the data you're using comes from an external source (like a user) then this can create an SQL Injection vulnerability. The better option is to use parameterized statements as then the library will handle this safely for you. The [pyodbc docs](https://code.google.com/archive/p/pyodbc/wikis/GettingStarted.wiki#Parameters) cover the usage of these.
It seems to me that a lot of the tests that you'd write with monkeypatching aren't worth very much. Here, you've just tested that `scrape_google` calls `requests.get`. Is the fact that `scrape_google`uses the *requests* package an implementation detail or a core part of what it does? It seems like an implementation detail to me. So the test is brittle; if we switched out *requests* for something later on down the line we would need to rewrite our tests, despite the fact that the user of `scrape_google` should see absolutely no difference. Moreover, the test only serves to make sure that you've called `requests.get` -- but it doesn't make sure that you've called it correctly! I think that `scrape_google` should be functionally tested. Actually let it go to the network and scrape google and test the results.
Magic wormhole is built in Python, that might be a good place to start (or it might be over engineered for your use case)
I'm not entirely sure. I just followed the Automate the boring stuff instructions to get started. I then saw a post saying Anaconda has everything pre built into it, so I downloaded it because I was having problems with numpy, so I figured I'd give it a shot To run the I typically just double click a .py file and the Python console opens up and it runs. What happens currently is a CMD/or Python console pops up for a split second and then nothing. I'm not sure which window it is because it's incredibly quick
Whats the difference between PyCharm and Anaconda/Spyder? Spyder doesnt seem to have Jupyter integrated at all. How is PyCharm?
Luckily no other users will interact with the script. So using f strings is unsafe? Even if the only data being fed through the { } syntax are strings I loaded into simple arrays?
Thx you i will try it out
trying to come up with better access control for my first production app. i'm going to take advantage of AD groups to avoid having users remember yet another password
you'll need clients to exchange addresses first, you already have this info as they're passing messages... if you're on a LAN you can use shutil to copy files around... if you're over the internet some kind of socket magic might need to be employed
you'll need clients to exchange addresses first, you already have this info as they're passing messages... if you're on a LAN you can use shutil to copy files around... if you're over the internet some kind of socket magic might need to be employed
you'll need clients to exchange addresses first, you already have this info as they're passing messages... if you're on a LAN you can use shutil to copy files around... if you're over the internet some kind of socket magic might need to be employed
Spyder is the closest thing to Rstudio that I've found.
Actually hard drive usage is not well correlated with failure. It's mostly power cycles that are correlated with failure.
Hmmm. That's tough since obviously speed matters a lot to you. I'm not sure that writing the stream to a file and then reading it is ideal. Maybe just using socket and putting the data into an array and using some image/video module to make that into a video. Might be more efficient. If the method you're using is working well or shutil works you should update this subreddit on that.
I like Spyder quite a bit. The variable explorer in it is the best. 
I wonder if one could come up with some sort of quadtree that was able to balance node size vs node depth by merging child nodes when they get filled. What merge strategy would one use to minimize worst-case memory complexity and have reasonable average time complexity? Edit: I suspect a truly uniform random sampling of points would have some very nasty memory peak as the grid gets dense but still sparse enough that the chance of a pop triggering a merge is still low.
Usually, these tests are timed. They also have test cases on which your program gets tested on. Regarding reading input. You can use something like below: n = input().strip() For arrays arr = input().strip().split() This is what I usually tend to use . Hope that helps. 
Right click a python script, click 'open with...' in the context menu, in the window that appears python probably won't be in the default list so click 'locate a program' (I think that's what it's called) and navigate to your anaconda directory. Then select either python.exe if you want to see the python console window, or pythonw.exe if you want the script to run in the background as a process. You can select a checkbook in the program selection window that sets this as the default behaviour for all .py files.
Java is NOT an open-source language. Oracle holds complete control over the language and it's direction. That they "treat" it as community driven does not change the simple fact that they are in control. Their suits against Google as well as their treatment of the OpenJDK community are all you need to know regarding the tenuous relationship the "community" has with the "owners" (Oracle) of the language.
The article exaggerates a simple issue. Agree it is a minor inconvenience having to use `functools.wraps` but not a big deal. IDEs were mostly useless for python until type annotations were introduced.
Also grab docs to numpy and scipy, and a PDF of the mit algorithms book
Watching the vidcon vid for it. Might be what I need.
Whew
Whew
Whew
Right now I'm looking at magic wormhole (suggested by /u/infinull) but I might use a server if I have a lot of problems with p2p. 
yeah I saw that, pretty cheap for the udemy course Thanks!
No, it wasn't. His question was, since he's constantly overwriting a file named "frame.jpg" to make a video, how can he send this file to someone else? Honestly, I feel silly just typing this out, he already said it in the OP.
Open a CMD window and run the file from there. That should immediately tell you what the problem is.
You need to install the executables from [here](http://www.graphviz.org/Download_windows.php).
Fuck Oracle and better stay away from everything they're involved with.
Thanks! You were right with the colors :) I updated the and it shoud be less confusing now!
A new plugin is under developpement in order to integrate the notebooks inside Spyder. https://github.com/spyder-ide/spyder-notebook
It's right there on the tin: &gt;By installing Java™ you will be able to experience the power of Java™, brought to you by Oracle. 
Hm, I feel lonely with my sublime-text here... But I love being able to write my code and my latex code at the same time.. I guess I will give PyCharm a try too.
...and Larry Ellison and the horse that brought him!
or a student id 
Can u edit text using vim from inside emacs?
Just a tad over the top
&gt; I think that scrape_google should be functionally tested. Actually let it go to the network and scrape google and test the results. Or split it out into two things. One thing that gets the HTML, one that turns HTML into interesting things. Then you only need to test that the bit hitting the network does the right kind of things (backing off, retrying, not returning garbage on a 404, etc) and the parsing becomes much easier to test.
If you print the variable it will show the newline
Thanks, but I want it to be input by the user and a response with the new line, I don't want it to be automatically printed if that makes sense, just wanting to type 'display' and it returns it with the new line 
don't do it that way, then. it may be possible to rework how the variable is dredged-up from the surrounding scope depending on how you've got things structured, but really, the answer is just to not do it this way. "quit()" is how you get out of the idle, not "quit" - it makes plenty of sense to have display as a function, which would let you format it however it needs to be formatted. additionally, i have to imagine - for a game - that at least part of the code is a while loop/input capture combination. if that's the case then 'display' can be handled like any other set of input.
So I can't use globals in a function definition? Then what is the point of them?
PyCharm is amazing, i swear by it.
heres an example of a one-way video transfer over tcp server: import socket import sys import cv2 import pickle import numpy as np import struct HOST = '' PORT = 8083 s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1) print 'Socket created' s.bind((HOST, PORT)) print 'Socket bind complete' s.listen(10) print 'Socket now listening' conn, addr = s.accept() data = "" payload_size = struct.calcsize("L") while True: while len(data) &lt; payload_size: data += conn.recv(4096) packed_msg_size = data[:payload_size] data = data[payload_size:] msg_size = struct.unpack("L", packed_msg_size)[0] while len(data) &lt; msg_size: data += conn.recv(4096) frame_data = data[:msg_size] data = data[msg_size:] frame=pickle.loads(frame_data) print frame.size cv2.imshow('frame', frame) cv2.waitKey(1) client: import cv2 import numpy as np import socket import sys import pickle import struct cap = cv2.VideoCapture(0) clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) clientsocket.connect(('127.0.0.1', 8083)) while True: ret,frame = cap.read() data = pickle.dumps(frame) clientsocket.sendall(struct.pack("L", len(data)) + data) 
As /u/dylanvillanelle says, don't do that. Make it a function, that makes the most sense. Or, write a custom REPL-like interface for this. That way you're not giving a user the ability to rm -rf out of the box. For fun, you can make a class with a custom repr that invokes str. Don't do this, though class Var: def __init__(self, var): self.var = var def __repr__(self): return str(self.var) display = Var("some\ntext") 
It's easier if they are, since I have a basic GUI that can select from various functions, each of which take different arrays but all of which require Loc, so I've written them all as f(Loc) and rewriting each one (14 including this one) would be a pain.
You should be using something like this, https://docs.python.org/3.6/library/cmd.html
Always thought @d func is equivalent to func = d(func) and never thought of the complication of docscrings.
Here's an example of how you can use globals correctly: counter = 0 def increment(): global counter counter += 1 print(counter) You just need to define the global variables outside the function first.
They're being defined outside of the function first (but in a different file).
&gt; Scrapy Scraping is rarely something you need as a web developer; in fact, if you decide that you want to scrape data off some website, then this is usually a red flag, indicating that you are doing something wrong - code against an API, ask for the data directly, or if you control the source, get it from there. Most web developers can definitely live without. &gt; Zappa Python Library Most web applications these days are still built to run on a regular server, with long-running processes and all. And even if you're going serverless, this is only one of many options. Most web developers can live without. &gt; Boto 3 Python Library I'm sorry, the description provided here doesn't even make sense. "Trigger classes at runtime"? How does one "trigger a class"? No idea whether this is supposed to be essential, but since I have built numerous Python web applications without ever hearing about this one, I'm pretty sure life is possible without it. EDIT: thanks to /u/BU14 for clearing up what Boto 3 is. Apparently it's for programming against AWS from python. Which is useful if you need to do that, but not at all essential for Python web dev. Absolutely something web developers can live without. &gt; Requests Python Library Finally, something useful! Then again, Requests is very well known, and anyone who's been doing python web dev for more than a few weeks is probably going to be familiar with it already. Not literally a life-and-death necessity, this one is essential, but it's not worth a blog post. &gt; TensorFlow Python Library TensorFlow is cool and all, no doubts there, but it has absolutely nothing to do with web dev; it's a library for numerical computation, particularly the kind you need for machine learning projects, where most of its real-world usage happens. Web developers can definitely live without, unless machine learning is involved, and even then, you won't be using it for the web part. So a more accurate title would be "4 really cool Python libraries that are mostly irrelevant to web dev, and 1 really cool Python library that is relevant but you know about that one already anyway".
Just finished the new version of a little script for me and my friends that helps us pick what greater rift level to do in Diablo 3.
You should get Pycharm my guy
The release notes are here: http://www.isotopesoftware.ca/wiki/DjangoHotSauce/Releases/Release-0.7.8 Enjoy!!
OP made a good story on why they can't use Jupyter for more complex stuff. I have yet to run into that problem.
Boto3 is the python SDK for AWS. Most web developers never need it cause they don't intersect with the underlying infrastructure 
Thanks! I briefly looked that up (purple link :P) but wasn't sure if I should get it; why aren't they included with the graphviz package?
I've been working the past days on this. Improved the design of exported slides from Jupyter notebooks through nbconvert. Here's a demo link: http://myslides-on-cf.cfapps.io/. And also make it possible to generate pdf slides through decktape. Any feedback is appreciated and hopefully some people will use it for any presentation:)
In that case, you don't even need to declare them as global here, just access them via the import. For example: # In numbers.py ham = 0 # In main.py import numbers def increment(): numbers.ham += 1 print(numbers.ham)
You could try making a program that scrapes data from your favourite webpages to get game scores or social media posts. The libraries "Requests" and "BeautifulSoup" are widely used and it would help you get into the ecosystem of available modules at your disposal!
We should honestly have a different subreddit for Python 2 users. I get that some users are stuck using Python 2 due to existing projects. But, this subreddit is for discussing Python and to me that means the latest version. It always annoys me when people say "you could just do this..." and someone else interjects "but not in Python 2!". Go start your own subreddit. We are here to discuss the Python programming language, not some antiquated version which was replaced 9 years ago. /r Edit: changed 8 years to 9 years.
You can do A LOT of things. Just find out what ypu want to do and research how you can do it with Python. Chances that it is possible are high. You can look at "sentdex" at YouTube. He does some interesting things. 
Is it free tho? I'm coding for fun, so as long as I can write my code down somewhere it should be fine lol...
Thanks. I used pip install in the anaconcda prompt and the module I needed installed. I've been able to successfully use it, so I'm thinking there must be a 64 bit version of the module somewhere. Appreciate the offer for assistance. 
Aye - I like Atom as an editor, but it's oddly resource intensive. (It's built using Electron which uses Chromium so you're basically running a web-browser which is inherently hungry for CPU &amp; memory.)
It all started with a Humble Book Bundle that included a book on Ansible. The book is Ansible: From Beginner to Pro. It has a lot of great examples and builds upon itself. From there I supplemented it some youtube videos and modules in ansible-galaxy and specifically focused on items I needed to complete the setup of my vps.
Because the schism in versions went so well, we should divide the community too. Why not a sub for each version? 3.4, 3.5, 3.6, 3.7?
It works! To update my last response, I installed it but it didn't work, it still wasn't finding the executables. Adding it to my path [like in this answer](https://stackoverflow.com/questions/18438997/why-is-pydot-unable-to-find-graphvizs-executables-in-windows-8) worked. whoo! ...why doesn't it automatically do that when I install though?
Automate the Boring Stuff is good, and gets into real life uses - web scraping, email, file system management etc. First half of the book would overlap with what you already know though. Pandas is amazing but can be quite hard, I found. I'd recommend it if you need it (for data science basically) but probably start elsewhere if not.
How exactly do I point them to an interpreter of choice? 
For starters, you should process this DataFrame a bit more. In particular, you don't want your left-hand column to be the index because it has duplicate values in it. Instead, treat this as two associated Series - one with timestamps and one with corresponding data. So it might instead look like this in a DataFrame: time data 0 01:00 2.582918 1 01:00 2.538946 2 01:00 2.494973 3 01:00 2.469846 4 01:01 2.494973 Next, note that your **time** values are something like timestamps. Life will be easier if we convert them to that sort of datatype. The really naive way to do this would be something like df['time'] = pd.to_datetime(df['time']) That'll use the current date and convert the values into a hour-minute timestamps. Since we're just going to use the encoded minutes to group our data, that's fine. Any column of a DataFrame that has datetime objects in it can be manipulated using the special ".dt" accessor, which lets you efficiently grab the components of the datetimes. So for instance, let's add a "minutes" column to the DataFrame: df['minute'] = df['time'].dt.minute At this point, you can do a sensible groupby on the **minute** column. In terms of your slope, though, you have a problem; "slope" doesn't mean anything in this sense because all of your data in each group have the same ordinate - they were all taken at the same minute. But we can just do what you do in your function - take them in the order they come, with a unit interval between each data point. Your function doesn't work because it's not accepting any arguments. It's hard-coded to act on the entire original DataFrame. It needs to accept a Series to work on: def get_slope(series): coeffs, resids, _, _, _ = np.polyfit(range(len(series)), series, 1, full=True) coeff = np.asscalar(coeffs[0]) return coeff Then we can easily apply the function to our groupby operation: slopes = df['data'].groupby(df['minute']).apply(get_slope) We wind up with something like minute 0 -0.038319 1 NaN 2 NaN 3 -0.026384 4 NaN 5 NaN 6 0.012564 7 -0.050254 8 -0.038319 9 -0.037690 10 -0.028896 Name: data, dtype: float64 
Thank you for the idea, I've used dependencywalker to see the dependencies already. I was able to "sort of" solve the problem, by preloading my dependee dll. An analog is described here https://stackoverflow.com/questions/39734176/load-a-dll-with-dependencies-in-python The current problem I'm facing is My C dll depends on a C++ CLR dll. That works fine until the C++ CLR dll tries to use another C# dll. Then i get a crash. Also, the C# dll does not appear in the dependency walker for some odd reason - might be related.
Yep, if I were writing `scrape_google` from scratch, I'd probably have it accept a string of HTML and leave the source of the page up to the user. Though I think the discussion the OP is having is about testing tightly-coupled inherited code whose interface would be hard to change.
Love how the first bullet point for Zappa is: "No Vendor Lock-In" while it clearly works only for AWS.
Well, If you want to know what you are going into ISTQB foundation has a sylabus not big, i think 60 80 pages which has like 90% of info you need to know. Rest is as usual be confident, act mature, try to seem serius about the change and so on. And what do you mean "just QA" proper QA are highly regarded and for good reasons. 
I would second Automate the boring stuff, and then effective python after that. Someone mentioned Sentdex and i really like that youtube channel also.
For those doing work in different programming languages as well, this concept comes from Ruby (I think https://github.com/vcr/vcr) , and also exists for php : https://github.com/php-vcr/php-vcr haskell: https://github.com/cordawyn/havcr and probably others as well.
Yeh. Looks like someone made their first serverless python app on AWS and just listed the 5 libraries they used.
Those versions all maintained backward compatibility though and they aren't nearly as out of date as Python 2.x. The point is that, at some point, the interjection "but in Python 2 yada yada yada!" just isn't interesting or productive anymore. Python 3 has been around for nearly 9 years. If people want to go around using obsolete technology that's their problem. The big issue is that when people in this sub mention a feature in Python 3 someone almost always interjects "not in Python 2!" almost as if to suggest that the person is wrong. It's unbelievable!
What a mess. This is a very basic tutorial displayed on a very ugly website. How did this get to top of this sub? 
So, if I understand correctly, the sourcemaps are also working now? Let me know there are still problems with them. By the way you can also create issues on: https://github.com/qquick/Transcrypt or ask general questions about Transcrypt on: https://stackoverflow.com/questions/tagged/transcrypt 
Thanks for the input :) I'll have a play and see what I can do. I've only been learning for around a week so am still very much learning what's what 
&gt; on a very ugly website. that's just like, your opinion, man.
To add to what /u/Baxterthehusky wrote, Pycharm and the other language specific Jetbrains ides tend to have a lot of unnecessary cruft removed making them significantly lighter on memory usage.
That's beautiful mate.
hey this is a sick idea. I wanted to actually do something similar but instead of just baseball game outcomes...I wanted to make predictions. Essentially collect data from a baseball API or baseball-reference, and collect a whole bunch of stats on the players and teams, and give odds on outcomes. 
Spyder comes for free with Anaconda, give that a try.
The link that I gave you states "Note: As of version 2.31, the Visual Studio package no longer alters the PATH variable or accesses the registry at all. If you wish to use the command-line interface to Graphviz or are using some other program that calls a Graphviz program, you will need to set the PATH variable yourself."
So I ended up uninstalling Anaconda and it fixed it. I couldn't figure out how to install pylaucher (mainly because I'm not afforded the luxury of enough time to learn something new...) Thank you for your help though! I'll return to this one day to try again.
Didn't work. So I ended up uninstalling Anaconda and it fixed it. Thank you for your help though! 
Didn't say or do anything actually... In any case, I ended up uninstalling Anaconda and it fixed it. Thank you for your help though! 
Numpy is a very popular module, I've seen it used for GPU accelerated programs.
You can always take a part in project development and improve the quality of this script. Join!
I've been looking for something like this for a while too. Every time I search I am overwhelmed with options. You have the most votes here so far. Any reason why people seem to like it? How does it compare to some other options?
Nice!
Yep, sourcemaps are working but I had to run with -b to get them working. It's probably just that the version on pip isn't the version after that patch was made
I've written Python for like 15-20 years and "Automated" had some cool stuff that I had never known about. Solid recommendation.
So the title is software engineer in test. The owner said that's QA I'm not sure how to answer your question. 
Wow, link seems broken for me
Top of sub? It has 10 upvotes.
Found a bug in his friend's code: have player 1 enter x's in 1, 2, 3 have player 2 enter o's in 4, 5, 6 do this in turn (e.g. P1:1, P2:4, P1:2, etc) Player 1 fills his three x's first, but player 2 wins. I think this is because he doesn't evaluate 1,2,3 as a win.
It's at the top of the sub nonetheless.
It's really best if you can avoid globals altogether. 
Trying to expand my skillset into more practical areas. Lately it's been web scraping, and I've built a few random ones to get a feel for how it works. I grabbed the transcript data from a wiki of a TV show for my first real scraping project and that was tons of fun. And now I have a fun database to play with. But now I'm not sure what else to do. I've been mindlessly browsing upwork for gigs to do, but mostly just for ideas for web scrapers. I need another cool web scraper idea to make. 
I'm working on a project to pull item stats/monster drops from the Oldschool RubeScape wiki. On a related note, parsing HTML sucks.
Object oriented programming is deliciously addictive. Lately I've realized I make classes when I don't need them though. I've started using dicts for when that is the case. 
A shebang. #! /PathTo/python You can also set your pynopath so windows will recognize .py as a python script. When installing anaconda it asked you if you'd like to buy recommended you don't, I wish it wouldn't do that but it does.
It's sad that this kind of data has to be scraped, and there is no legally available free RESTful API for it.
Google any of that info and you'll get all the details
That looks neat. I want to make a terrain generation thing now. 
I've been working on an airflow project at work for the past few months, and while I wouldn't not recommend using it, I'm not totally sure I would either. Airflow's made for purely static workflows, where all inputs are defined at definition time, not runtime, which in my mind makes it a glorified cron. I ended up writing a few of my own generic operators to support more dynamic workflows, mostly through abuse of the XCOM system, and it's been working well so far. I'm waiting to hear back from legal about open-sourcing. Cross your fingers! In the meantime, AMA about working with airflow.
Very basic tutorial? Yes. Very ugly website? hmm... looks honestly a lot like many of the python notebooks people post on github. Not sure why it matters all that much anyway. Should this post be in /r/python or /r/learnpython though... no question it should be in /r/learnpython 
hmmmm. I'm not sure what the use-case is for that. The IDE is more a scratchpad for small code snippets - if it ran a large section of code it couldn't produce the output in a reasonable time. Multiple people working together would quickly lead to a lot of code that would slow down the execution. Not that it isn't a cool idea. I'd like to see pycharm have that feature.
I use a similar setup in PyCharm. Just move the python console and documentation windows to the right, with the python console window in split mode. 
So what exactly is Anaconda? I already downloaded python 3.6, so is anaconda another IDE?
yea, guess you are right. 
Interesting that is an obvious data source I had not thought of! I'll have a look at that, the database seems like it would a great source for some sabermetric analyses.
Thanks a lot for the suggestions, I actually have the Automate the Boring stuff book, but I didn't find it very suitable at the beginning ( Python crash course was more beginner friendly so I stuck with it ) , so I'll just skip the basics and see what else it has, I haven't skimmed through it. I've already subscribed to sentdex and thenewboston's channel and watched their videos on the python basics, they do a great job on it, no doubt, sentdex explains a little bit better, because he is primarily python focused, while Bucky makes all sorts of tutorials. Your opinions on ATBS are pretty decent so far, so I'll definitely check it out, thanks a lot for your opinions. Ill still keep an eye on this thread, if anybody else decides to share something on the topic, I'll be glad to read it. I did a few google searches on this same topic and didn't find nearly as good info, people are too general, sort of like @HaroldAdmin's response - Yeah, dude, I know I can do a lot with it and I've already researched, but didn't find what I was looking for, thats why I asked here, you don't have to redirect me back where I came from. Thanks again for the responses, to each and everyone of you, I'm sure a lot more people will find this helpful! :) 
Okay. Let's plan on how often and when can we talk. I am on skype - rootscan3. Raj
If the strings you're loading are hard coded in the program and cannot be changed by outside means then it's likely you are safe yes. But, and this is a big but, it's *much better* to get into the habit of doing this safely with parametrized queries every single time. This will guard you in two ways: a) it will protect against someone else or future you who forgot coming along and changing the variables used in the query to user input, and b) it will help you get in the habit of always doing it safely so that the one time it does matter, you're not looking at a severe vulnerability. SQL vulnerabilities frequently take down Fortune 500 companies and the whole netsec industry exists just to find them. Do not make it easy for them.
Agreed. For an absolute beginner like myself its very challenging to maintain perspective and use restraint or else suddenly I realize I've made everything a class or method and its not necessary. Still, coming from BASIC spaghetti code and then very rudimentary functional Arduino programming OOP feels very slick. Here's my project if anyone is interested. https://github.com/directive0/Petri
The point is, some people are still stuck on Python 2 and not for lack of trying to move off (at least in my case, I won't claim to speak for anyone else). I'm a big advocate for not doing anything with 2 if it can be helped, see my flair. But it's not like people just stopped using 2 overnight because it's old. Hell, there are huge projects that are just making the move (Open Stack, for example). Yes, I understand saying "But not in 2" is tiresome. Yes, I wished we could all use 3 and bury 2 in the ground, but that's still a work in progress. Also, there are backwards incompatible changes between 3.7 and 3.5. Though, they are largely confined to the async stuff (which is still a bit of a moving target). However, raising StopIteration in a generator is a syntax error in 3.7 but allowed in 3.5 and warns in 3.6 Finally, I wasn't saying the person was wrong. I was clarifying what they had said because it's not universally true. 
Take a look at retrosheet.
So, I just looked at this because of this comment. My traditional workflow is to use iPython for a lot of figuring code out - writing mock code there then working it into my project. I've used both vim+screen and PyCharm to do this. If you haven't used iPython, certainly start there, it's an absolutely amazing tool that's very helpful to improve productivity. Spyder ties those environments together in a nicely seamless way. You can write code in a normal editor and then send it to ipython. If you're doing data visualization you can then see the results there or in another screen if you set the GUI to do it. Spyder does a nice job of saving your ipython history so it's easy to go back and get what you've entered to review for the future. Really, there is a lot going on. Most of it you can ignore to begin with, just go through the basic spyder tutorial.
Does anyone here like using Atom or VI with any Python centric plugins?
I understand that, but, the fact of the matter is that it just clutters discussion about new features in the programming language. Maybe by Python 5 we can be done with this...
Maybe, I hope by 3.8 we'll be done with it
Yeah sorry, I wasn't trying to make an example of a good test, I just didn't understand how to use `mock` at all from that poster's example and wanted a clear example of how to use it
Hey, just finished PCC myself. Right now I've started [Web Scraping with Python](http://shop.oreilly.com/product/0636920034391.do) by Ryan Mitchell 
I like Spyder, and used it for a couple of years (have since switched to Atom), but I'd say it's clunkier and less developed than PyCharm. PyCharm has a crazy number of builtin features. You can find youtube video tours of both if you want to learn more.
There are very good reasons that every open source project they take over gets forked almost immediately.
try python's wormhole, it is amazing :)
Look for an O'Reily book, Baseball Hacks, includes a nice scrapper for MLB data ( a bit data, but you can found other updated sources also ). I have a TCL based scrapper and data loader, have about 7,000,000 data points for pitches. 
Look for an O'Reily book, Baseball Hacks, includes a nice scrapper for MLB data ( a bit data, but you can found other updated sources also ). I have a TCL based scrapper and data loader, have about 7,000,000 data points for pitches. 
Ah that makes sense, I was thinking about a newly written piece, and one of the answers to "how do I test my tightly coupled code" is "don't, fix the code".
Thanks for the input, can you or somebody else explain on a deeper level what you can do with Web Scraping? In a real scenario, what would you do with it?
&gt; While functols.wraps and wrapt do the trick, they still require you to remember to use them every time you define a new decorator. I'll play Devil's Advocate here. A major strength of the decorator syntactic sugar is that it is equivalent to function application. If we gave `@` additional implicit behavior, like copying docstrings and duplicating the signature, this would add mysterious complexity to a concept which is already unfamiliar to many people.
You're welcome to join [##learnpython on freenode](http://webchat.freenode.net/?channels=%23%23learnpython). Friendly python support community.
LuX bot says: Hello there, have a great day :)
See this answer https://stackoverflow.com/a/42096429 and this thread about its advantages: https://www.reddit.com/r/Python/comments/3t23vv/what_advantages_are_there_of_using_anaconda/. I regularly use Anaconda on Linux for work, it's great!
It is literally one msi installer file. Let me give you the direct link. 32 or 64 bit? Admin or not?
Collecting and hosting data isn't free. 
&gt; inputs after running a script After? What are you putting inputs to if the script has completed?
the sky is the limit. depends on what you want to use your hobby for. eg. it annoys the crap out of me that every X days my wifes asks me to give her a rundown of what we purchased or how much money i got paid... so i ended up creating a quick flask app that parses thru the bank statements, separates whats income/expenses and presents it on a table. then i have that running on my raspberry so she can just lookup the site and bam, expenses. then i get yelled at for buying a lot of things at steam....
Can you describe what you were using it for? Whenever I see a pipeline kit I've had a hard time wondering what the benefits are beyond a 'regular' script. Does it work better with lots of requests for doing the pipelined behavior on servers?
MagicWormhole isn't peer-to-peer; it uses a defined server sitting in the middle to pass the data through. You should be careful as a result, unless you create your own service to handle that pass-through, your data is capable of being captured.
Great work! I've been a dev for years, and I'd say it's pretty important to always be open for constructive criticism, read a lot of books, and try to write functions that are simple (and therefore reusable). Oh, and don't be afraid to ask for help. Developers are usually happy to share what they know, as long as you can show that you've made an effort. Good luck, and happy hacking :D
Been WIP for a while, but replicating the Devil Analyzer from the original Shin Megami Tensei. It's slow work, but hopefully it'll be functional soon.
I'm making a LINQ inspired tool called [Slinkie](https://github.com/segfaultsourcery/slinkie). Here's how you'd use it to generate a natural Canadian conversation between three people. from time import sleep from itertools import cycle from slinkie import Slinkie canadian = cycle(('buddy', 'friend', 'pal')) who = cycle(("I'm", "He's")) conversation = ( Slinkie(canadian) .sweep(2) .map(lambda it: f"{next(who)} not your {it[0]}, {it[1]}!")) while True: print(next(conversation)) sleep(1) The output is and endless stream of: I'm not your buddy, friend! He's not your friend, pal! I'm not your pal, buddy! He's not your buddy, friend! I'm not your friend, pal! He's not your pal, buddy! I'm not your buddy, friend! He's not your friend, pal!
Great, thanks for the help.
Thanks for your response. This was indeed the way to handle it, but it seems I was worried about nothing; the test was clearly explained, and gave me some sample code to start with, which included input.
3 has only been out 9 years, thats notva lot of time to switch /s
Run -&gt; Edit Configurations -&gt; Show command line afterwards
No one is disputing that some people are stuck on 2 for reasons not their own. But the key word is "stuck". They cant access new features. They might do things differently. Ergo, a py2 subreddit makes sense. 
Thanks for the reply! I do a lot of data visualization so I'll give Spyder a shot. 
Use the bit torrent lib 
Actually, it has become my new favorite lately because it is part of the CygWin distribution. That gets around all the BS surrounding installing on a system where you don't have Admin rights. I usually prefer to use Atom (in Emacs mode, of course) but this is because I tend to have multiple types of code as part of my projects. 
Scrap the web
A script to perform some actions in Pardot based on Salesforce data that isn't available in the existing features
I'm concerned about messing with the python system path for users of this module. I'm hoping to put it on pip.
I see no need to be a jerk.
64bit, admin
Exactly, this subreddit is for discussing the Python programming language as it is today, not as it was a decade ago.
Of course you can. There are multiple option here: either you just start a terminal inside emacs (using `M-x term`) and then just start `vi` or `vim`, or you can use one of the numerous vim modes for emacs, just like `evil`. Have fun :-D
K
Very nice little script, big thumbs up for choosing sqlite and no orm!
Hello friend! If you're moving on to more intermediate stuff, I highly recommend going on down to www.pythonprogramming.net The guy has a lot of really good tutorial series, and every lesson has both a video and a text version. He does a really good job at explaining things and it's a great place to start. 
Not the person you were asking, but I'll say why I use a tool like this (I'm a Luigi fan). The nice thing for me was how it was easy to make things idempotent and feel good about rerunning the script if you needed to change a small part of it. For example, imagine you have a table that you want to pull out of your production database and put into a warehouse. First you extract it, then you run some script over the rows to clean certain columns, then you save it to S3 and COPY it into Redshift. Now imagine you have 100 of those tables, and they can fail in funky ways. Plus, you have other jobs which want to run after all the data for a particular table is stored in S3. With Luigi, it's really easily to build up the dependencies and have it handle all that for you. Plus, if you make an error or need to make a change for a single table, you can run the script again without executing every single job. It will see which ones are already finished and skip over them. You could write a script that handles all this, but it's more trouble than it's worth in my experience. Way easier to reason about with Luigi. The best comparison is probably that it's Make, for data.
Ye it's free
Python has native arbitrary sized integers via the `long` type (Python 2) or the normal `int` type (Python 3).
Can you send code to the console by using a shortcut? For example can you press ctrl-Enter and have a line of code run in the console?
sorry, my question was how python handles, say 2^256?
The "Python Playground" book had a lot of interesting projects in it. I reviewed the book here: https://www.blog.pythonlibrary.org/2015/12/11/book-review-python-playground-geeky-projects-for-the-curious-programmer/ Some of the more popular libraries and frameworks are Django and Flask for web programming, SQLAlchemy is still quite popular for databases and if you're into desktop user interfaces than you might want to check out wxPython or PyQt/PySide. Data science is pretty big in Python. You can check out the SciPy stack or take a look at Anaconda to get a feel for some of the libraries that are available.
It works just fine out of the box. Or are you trying to ask how it's implemented? Python 3.6.2 (default, Jul 20 2017, 03:52:27) [GCC 7.1.1 20170630] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; 2 ** 256 115792089237316195423570985008687907853269984665640564039457584007913129639936 &gt;&gt;&gt; type(2 ** 256) &lt;class 'int'&gt;
Don't know if you're the creator but just wanted to say that I found this article easily digestible and a good example of a simple web scraper.
Perfect, thanks. The comparison to make is really helpful. 
Oh yeah it definitely exists already. 
Tried this once. Was getting into the tkinter stage when I suddenly needed to be transferred to a different team that was swamped with work. I pleaded to stay in the old role so I could finish it but boss didn't care - regardless of the countless troubleshooting/development hours it would save. Glad this one worked out for you!
Python will switch to an [arbitrary-precision](https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic) type behind the scenes when it needs to.
**Arbitrary-precision arithmetic** In computer science, arbitrary-precision arithmetic, also called bignum arithmetic, multiple precision arithmetic, or sometimes infinite-precision arithmetic, indicates that calculations are performed on numbers whose digits of precision are limited only by the available memory of the host system. This contrasts with the faster fixed-precision arithmetic found in most arithmetic logic unit (ALU) hardware, which typically offers between 8 and 64 bits of precision. Several modern programming languages have built-in support for bignums, and others have libraries available for arbitrary-precision integer and floating-point math. Rather than store values as a fixed number of binary bits related to the size of the processor register, these implementations typically use variable-length arrays of digits. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Speaking of make for data, I've got my eyes on [Drake](https://github.com/Factual/drake) which bills itself as exactly that. They've got their full design doc uploaded, and while it isn't fully implemented it looks lovely. I looked at it while prototyping with different frameworks, but it's still got a ways to go before it's production-ready, at least for my use case.
PMed
Need additional info
https://bitbucket.org/vinay.sajip/pylauncher/downloads/launchwin-1.0.1.6.amd64.msi Download and run this, if you want to be save from anaconda removing it, install anaconda first. This should automatically make scripts run with your default python (i.e. the first one on your PATH variable). If you want customization via shebang (for example for easy running in a specific conda env) you just have to add a line to your py.ini in your Windows directory. If you need that I can walk you through.
I'm migrating some ETL tasks from [Pentaho Kettle](http://community.pentaho.com/projects/data-integration/) to be more maintainable, extensible, and scalable. The basic process is to grab files off an FTP server at a certain interval, transform them to fit a specific schema and drop invalid items, then ingest them into persistent storage. The current setup with Kettle does this all in a single process, so a failure anywhere is a failure everywhere. Kettle config is also done in XML through a UI and it all just kind of sucks to work on. Airflow, on the other hand, uses Python to define workflows (DAGs) in a very declarative fashion, which it wraps in a lovely web UI to show off dependency graphs and other useful features, especially for handing over to business to monitor. Airflow can also make use of Celery as a task queue, allowing for horizontal scalability by adding in additional workers. You _could_ write a regular script to do this, just like you could use `urllib` for HTTP requests instead of `requests`, but Airflow offers a lot of good built-in features over a simple cron script. For instance, Airflow uses a metadata database to store workflow and task states, as well as XCOM data. Out of the box it uses a basic sqlite backend, however it's trivial to migrate to a more production-sized database, and [Airflow supports anything that sqlalchemy does](https://airflow.incubator.apache.org/configuration.html#setting-up-a-backend). Airflow then exposes this database for ad-hoc querying in its UI, to allow your BI guys to do whatever it is they do. Airflow seems to scale really well, from a small development setup with sqlite and a single node, to a large multi-tenet Postgres-backed, Celery-distributed, Redis-brokered, many worker cluster. I'm currently running the latter setup in a Kubernetes cluster, and while it did require a bit of config tweaking it was a lot simpler than I expected.
watch some videos on http://pyvideo.org/ and see what interests you Tip:usually the talks on PyCon US are the best
yes, I want to know how it's implemented. I know it works fine.
https://pypi.python.org/pypi/pyrcrack Although I haven't used it, also you can use subprocess of course but might be more challenging. I'm on mobile but maybe these might help: https://www.packetgeek.net/2014/07/working-with-cisco-routers-and-switches-with-python/ https://github.com/DanMcInerney/best-channel
Mix of VS Code https://code.visualstudio.com/ and https://github.com/DonJayamanne/pythonVSCode/wiki/Jupyter-(IPython) extension (as well as DonJayamanne Python extension) 
Not sure if it's what python uses under the hood, but the GMP library is a good example of how arbitrary sized numbers are implemented https://gmplib.org
Macs have been PCs since 2005 so there's literally no difference. Install MacOS or Linux and you won't notice any change at all.
It's stored as an array of register sized integers, with custom implementations of all the mathematical operations. 
Is there a Python question itching to get out that didn't quite make it into the post?
I'd suggest to also include a benchmark with a r-tree, and specifically the implementation of the Rtree package, as that is actually a R\*-tree implementation. R\*-trees take slightly longer to be build, but yield better performance due to smarter partitioning of the search space. I expect it to significantly outperform the geohash method. 
Awesome, thanks! My work never gets to that scale, so this is really helpful to appreciate the value.
Do you really need to post every minor change? 
You should at least: - close the Thread once the app is closing - change the name of the function *update_sites_status*, it's a bit weird since you're not updating anything On the other hand, having a sleep inside the sites loop looks weird, I guess it would be better to have a global sleep of 60sec and then check all the site statuses at once.
Yeah, coding on windows is terrible because there's no package manager. Just install ubuntu on it. It's just as good as osx imo. Better package manager than osx but less ui polish. The terminal in windows is also garbage 
You can't install OSX on a PC
Yes, of course. If you use a Raspberry Pi computer as your "remotely controlled" device, and you can send and receive almost any kind of data over Wi-Fi using a standard Python networking library, such as "socket". The computer you use as your "controller" computer can be any computer that can run Python, including a standard laptop, desktop, or even another Raspberry Pi.
oh bless I always felt a bit spooked by the use of context managers to enable/disable/etc things for a section of code, since I knew this was always an issue Thanks for putting in the time and effort to solve such a pain-point!
Yeah, you're right for closing the thread of course, and for the name of the function (I have splitted this one, so the name is not accurate anymore..) For the thread, I guess that is okay to do a global check if there is a reasonable number of websites. Thanks for the feedback :) 
I've got OSX running on my personal computer. It's a MacBook. I suspect OP is asking about converting to Ubuntu or Mint. 
This unnatural line of 'Mac is not a PC' has to go.. 
The header is [here](https://github.com/python/cpython/blob/master/Include/longintrepr.h), and the implementation is [here](https://github.com/python/cpython/blob/918403cfc3304d27e80fb792357f40bb3ba69c4e/Objects/longobject.c). For an example of how to create one, check [this](https://github.com/python/cpython/blob/918403cfc3304d27e80fb792357f40bb3ba69c4e/Objects/longobject.c#L340-L378) segment.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [python/cpython/.../**longintrepr.h** (master → dadca48)](https://github.com/python/cpython/blob/dadca480c5b7c5cf425d423316cd695bc5db3023/Include/longintrepr.h) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dli19le.)^.
How about the pure Python version through PyPy?
I think it is important that you should find a favor, then div it. Action-driven is important for programming.
I would develop Python on a Mac long before i would ever attempt to do so on Windows but I'd take Linux over both them by a long shot. Why? Package management (yum or apt) and pip. Writing basic Python code on a Mac is ok but once you have to stop compiling package you start to think "why does it have to be this way?" At home I have a Raspberry Pi that I connect to via SSH that I use to tunnel my X Windows back to my Mac. It works great. If I need to work with large datasets or need a lot more processing power I fire up the virtual machine army at work and connect via a VPN. Hope that helps somehow.
I'm new at this coding thing and decided to take a computer science class! The course teaches python but I decided to get an early jump and programmed a very simple program that asks you your name and age then relays to you your name and age 
especially nowadays. More and more applications are being pushed to the cloud and web, so the OS you are on matters less than ever before.
No prob! To give you an idea of the scale of the project, the Kettle implementation ingests a couple hundred million rows per run, split up between a good handful of jobs. So far I've only migrated over one job (the largest), but it's gone from taking upwards of 48 hours to run in Kettle to about two with Airflow. My hope is that the numbers I'm dealing with are really at the bottom of Airflow's scalability so I can expand without getting limited by the framework, but only time will tell!
How will your project be run? If it's run as a module, either by getting imported in some other code or by running `python -m module_name` from the parent directory of `module_name`, you can just `import module_name.class_that_all_submodules_need_access_to`. However, when you are running `module_name/__init__.py` directly and in that file importing all the submodules, you can actually just `import class_that_all_submodules_need_access_to` in `sub_module_a/useful_for_sub_module_a/useful_class_a.py` and all the other submodules.
No that's because there's no such thing as OSX. Are you thinking of macOS? All Macs are PCs and all PCs can run macOS. It just needs some wedging to get macOS onto a PC not made by Apple
It sounds like you want something like this: text = input("Enter a command: ") if (text == "display"): print(display) That could also go inside a loop. So that it keeps asking the user to enter in a command, until some condition is met (like them entering quit for example). It sounds like you're very new to the language, so some of the other advice here might go over your head. 
PC is nothing to do with the OS. It just means it's an IBM PC compatible.
Maybe include a requirements.txt so people can install and test this easier. Will give it a shot, saw some interesting things i didnt know how they worked. Thanks!
I learned the basics of Python 2 years ago and then promptly did nothing with it. This week I wrote a little program that will compare user contact information from two CSVs and then spit out a 'results' file with a flag for each entry to show whether it exists in the master CSV, needs updating in the master CSV or is a totally new entry. The CSV is pulled from a mySQL database, so there's probably a more efficient way to just query the database instead of a CSV, but it's beyond my knowledge at this time. I'll see if I want to revisit it in 6 months :) 
Thanks Raj, I think I'm also going to do this course https://www.coursera.org/learn/learn-to-program/home/welcome
Why is this guy not ever banned for spamming?
You could always look around for a dirt cheap no OS laptop and throw a Linux distro on it. It doesn't even need to be a GOOD laptop either, since distro environments like LXDE exist. Look into Lubuntu or Fedora LXDE. But really, programming on Windows is going to largely be the same. Download the executable from the Python site, run it, "Yes add it to PATH", etc., then open up a text editor of your choice and the God-awful cmd.exe (or PowerShell) and program. I'd use PowerShell, since some of the Mac/*nix commands are recognized by PowerShell and not cmd. Of course I also wouldn't bother with Windows programming. You can also use Visual Studio if you want an IDE, and I'd recommend it on Windows. Has a C/C++/C# compiler and can even support Python.
wait... you're not OP
Windows has the windows Linux subsystem which is essentially Linux under windows. The command prompt sucks but powershel is pretty good and wsl is essentially bash, and you can run that in a terminal like conemu. Package managers, there's vcpkg and chocolatey. And if youre just doing Python it's the same on every platform.
I develop on windows at home all the time. There are no issues with it. I use both native windows , as well as via the windows Linux subsystem and it's totally fine. A lot of people saying " just use Linux" hasn't used windows 10 which is a great dev environment. I say this as someone who's day job is developing on Linux machines but at home I'm all windows with the windows Linux subsystem
What are using to build this, I've been interested in hydroponics to grow fruit for awhile (never done anything with it though) and wouldn't mind eventually building a system like this. 
It's doable, but compared to just running ubuntu or osx it's a lot more painful. I worked in a windows dev shop for a while and made do with conemu (through cmder) and I had quite a few problems with it, especially with vim windows and refreshing. Chocolately is awesome and I fully commend the devs for building it, but it's no apt or brew, and it's caused me some weird problems. Using the bash subsystem actually works great, but if you want to do graphical things it gets really painful and you have to install an x server. Pip on windows is pretty janky too, try installing numpy. You have to have VS2010 installed lol. Developing python on windows is for sure doable, it's just harder. There's also just something really nice about a good, os supported, polished terminal 
ELI5?
Not sure about that, but I frequently use the debugger, where I have a breakpoint, I can have a console with all the objects at the breakpoint accessible. Great for debugging and testing.
Let's consider a web framework such as Flask. Each request is handled by a single thread but there may be multiple requests being processed at once. If you need to store some data for a request, such as the request headers and message body, you have a few different options: you can pass this information down into the code handling the request or you can make the request available on a global-ish object that other code can reference when needed. Both methods have costs and benefits but the second method has a particular difficulty: the object can't actually be global because that global would be overwritten by other concurrent requests. As a result, the goobal-ish object typically stores the data in thread local storage. So now you have your framework with data stored in thread local storage. This is great since each request is processed by its own thread. But what if you were actually building on asyncio and so each request was timesharing on the same thread? You can no longer store your data in thread local storage since all requests will access the same thread local storage! This PEP solved that by offering a storage mechanism tied to the logical code flow. Everyone who is timesharing on this thread gets their own execution context which includes a place to store their contextual data.
Never noticed that option. That could be helpful at times.
Anniversary edition with the Ubuntu bash shell.
So this is how you made the meme...
I'd be interested to learn how this proposal differs from the implementation of the [greenlet-local objects](http://www.gevent.org/gevent.local.html) in gevent. I've used greenlet locals to solve exactly this problem. Another thing that's being reinvented thanks to asyncio?
If you get latest windows 10 with linux subsystem you can just use the linux subsystem. Creator of python requests library did this: https://www.kennethreitz.org/essays/so-i-bought-a-surface-book https://www.kennethreitz.org/essays/unix-style-windows-development-environment-adventures https://www.kennethreitz.org/essays/fish-as-default-shell-on-windows-10 
Exactly. It is for static workflows only. I am the author of this [stack overflow](https://stackoverflow.com/questions/41517798/proper-way-to-create-dynamic-workflows-in-airflow) question and still haven't gotten a satifactory answer.
It's improved quite a bit over the years. Were you using conemu with WSL or cygwin? cygwin always sucked but vi under WSL is pretty good. Chocolatey is IMHO better than brew for release software, but for devel style packages, microsoft have vcpkg which works really well. It's not as nice as one system to do both, but it isn't too bad. For graphical stuff, WSL can now call out to windows apps as if they were native, so you can do graphics stuff in windows, but still use WSL shells as the shell, though personally I quite like powershell. It's a big change to get used to from *nix style shells, but it's really powerful. Pip on windows can install numpy directly if there is a wheel available. The VS2010 requirement is based on your python version. But if we're talking numpy, I'd recommend, on any OS, to use Anaconda instead of the regular python dist because they precompile it with mkl and generally conda beats out pip+virtualenv. I agree developing on windows pre w10 was a pain, but w10 onwards, I actually prefer it to my old mac and I definitely prefer it to Linux since I can just drop down into WSL when I like. it's not perfect, but it means I have an OS that I can actually do modern GL/Vulkan dev on (compared to OSX) without needing my sysadmin hat on like with Linux. 
I had to switch from Mac OS with homebrew, Python 3.6, virtualenvwrapper etc to the PC with Windows 10. It's been a rocky ride. As far as I can see, there are few options to set up a reasonably productive Python ecosystem on Windows 10. a) install the latest Python from the python.org and virtualenvwrapper_win. This mostly works, although some packages do not install easily with pip (e.g. I had problems with the scipy) b) Anaconda from continuum.io. Most packages I need are included, many installable through "conda install pip"+"pip install foo". a little bit pain to maintain a cross-platform requirements.txt (I still use Mac OS on occasion) c) Ubuntu on top of Windows Services for Linux. This mostly works, requirements.txt is portable between Ubuntu and Mac OS X. Few caveats, Ubuntu still has Python 3.5 by default, some of my projects already are on 3.6 (I love f-string formatting). jupyter does not pop up the browser automatically (still can access by copy/pasting the URL to the browser. Big pain to integrate PyCharm into the mix. So far, no perfect solution for me, using mostly the WLS route, as it gives a normal (read - bash) command line interface. YMMV
I think this PEP is more about providing TLS-like facilities to concurrent contexts other than threads, such as generators, coroutines, async, etc.
You should not mess with the path like that. That will cause untold difficult to debug problems. Unless you have the module installed, python will look for a module relative to the current directory. You should never run your code with the current directory set to anything other than your project's root. In other words; don't use the `cd` command. This is incorrect: cd module_name/sub_module_a/useful_for_sub_module_a python __init__.py This is correct(-ish): python module_name/sub_module_a/useful_for_sub_module_a/__init__.py In the real world, you shouldn't have every module as its own entry point. If you have multiple entry points in your project then make specific scripts at the root of your project that can act as those entry points. If you are just reaching into your module hierarchy for testing or something then you can use something like this instead: python -m module_name.sub_module_a.useful_for_sub_module_a Also, for the future, you should post questions in /r/learnpython.
The PEP talks at length about both generators and coroutines in its Abstract and Rationale sections. Generators had the issue of inconsistent context handling years before asyncio even existed. The problem of greenlet local objects is that libraries like numpy and decimal know nothing about it, and will never properly support it. It's one of those ad-hoc solutions that PEP describes that are invented in a framework and are being used only by that framework.
that depends entirely upon how you define 'pc'. I've seen at least 3 definitions. I guess we were just talking about different kinds of things. 
Great, thank you. It's a long document, so sorry if I missed some points while skimming it. Maybe you answered this question as well, but will the developers of numpy, etc... have to modify their code to take advantage of this? Just curious, I can see that it would be good to have this in the standard library as an official implementation, regardless.
I'm missing how you're finding the team the Blue Jays played if you don't know what it is. Like, you can search for Blue Jays every time, but what about the other team? There are more teams with 'winner' and 'loser' tags. 
Did you try using anaconda?
what the hell are you talking about?
Yes, they will need to start using the new APIs, this is unavoidable. Currently they use `PyThreadState_GetDict()` and then call a bunch of low-level functions. All that code will be replaced with 2 simple calls `PyThreadState_SetExecContextItem` and `PyThreadState_GetExecContextItem`. All in all, I don't think it will be a big deal.
Yep, it's been a while so I forgot, but anaconda is solid
Check out http://scoop.sh/ It's a developer oriented command line installer system for PC
A bit of a relevant discussion point: Say, for example, we have a series of methods: A (let's say it's a `requests.request`), B which does a different thing but calls A internally, C which calls B, D which calls C, etc. And let's say we call D and want to pass a parameter to B which alters its behavior non-significantly (for example, turns on extensive logging). One way to do that is to add `**kwargs` to each of those functions and pass the parameter to D. Which is kludgy. Another way to do that is a context-manager around the call to D which adds another element to some thread-local stack which B knows about and knows how to read it. Are there better solutions? Are there such context-managers already implemented in a performance-appropriate way?
fixing tls is great and all but I'd miss not being able to propagate a cancellation mechanism down the code path like go's context can. I don't really see an easy way to create a supervision tree with this.
I love the idea! I have some gentle critiques. I'm not a core dev so I have no idea what I'm *actually* doing: 1: `set_execution_context_item` clobbers old values. So if I call a function that sets and does something with the execution context, that's different from setting and doing something with execution context. Which is weird, because generally, you *can* replace a function call with its body and get the same semantics. It would make more sense to me to have each item in the execution context be a stack, where you could push or pop on the execution context but never explicitly set a value. So push_execution_context(‘foo’,’bar’); try: # ... do something that depends on foo finally: pop_execution_context(‘foo’) or `with_execution_context(‘foo’,’bar’): use_foo`, both of which would make explicit when execution context gets saved and restored, and work in a nested manner. 2: The execution context is immutable but it can contain mutable objects, so that can lead to very surprising semantics, especially if you want something like ec=get_execution_context(__name__,{}) ec[‘spam’]=‘ham’ try: # ... do something with ec finally: set_execution_context(ec) # uh oh! When I restore the old execution context, # I *might* still have ec[__name__]['spam']='ham' # depending on whether ec[__name__] was populated or not. It's even worse if the execution context is a mutable object that gets shared between multiple threads. It probably bears a mention how to avoid the pitfalls of mutability here. 3: Name collisions are inevitable and the name plays two roles: disambiguate contexts from different authors, and distinguish multiple settings in the same code. One option is to insist it’s the user’s problem to deal with `get_execution_context(__name__+’spam’); get_execution_context(__name__+’ham’)`. Another option is to do something like `logging.getLogger(__name__)`, e.g. `ec=get_execution_context(__name__); ec.get_value(‘spam’)` 
Thanks that was a great explanation. How does Tornado handle these things? Does it not use TLS?
Yeah it's possible. Select the lines of code and press ALT+SHIFT+E on Windows.
It always makes me happy to see people get into the language. You can do anything you want with Python, but it's super strong at three major categories of things: * Web development! I use Flask, but Django is great. * Scientific computing! Data analysis, whatever. Python is great at this kind of work * Scripts! Automate the Boring Stuff! Bots! It can make games, too, but it's less good at that. Still, if that's what you wanna do, go for it!
Hi! I dunno if you've programmed before now in a different language or whatever, but that's some pretty good Python code! A couple of suggestions, though: It may be a tad overcommented. A line like rand_id = str(rand_int) doesn't need a comment. You can read what it does right there; it converts rand_int to a string and assigns the name rand_int to it. Secondly, I'd recommend indenting with 4 spaces instead of tabs. If you don't have an editor that can do that yet (notepad++, sublime, atom, PyCharm, or vim/emacs/spacemacs if you feel advanced) you should. You're doing great! Keep up the good work :)
I have a programming background, and although I'm new to Python I don't want to take too much credit for it ;) Thank you for taking the time to read it over and provide feedback, I really appreciate that. I over commented on purpose. As I worked through this project I came across a ton of woefully basic questions being asked, and I wanted to provide something that was easy to understand for beginners (without having to write a blog). You are right about the spaces. Some of my other projects require tabs, it's a quick setting and I was being lazy.
I looked at ops post history... "How to generate 4 random 2d coordinates..." this madman