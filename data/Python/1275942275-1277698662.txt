I have used Boa Constructor some years ago but that project is dead for all practical purposes. The latest version (which you will have to get from CVS) is too buggy for my tastes. I then used wxGlade for a while but I got annoyed with the hassle I had to go through whenever I wanted to tweak a little thing, such as a margin or a sizer. Refactoring a notebook or sizer layout is also a bit of a pain. Custom controls are also not supported that well. It is possible but not great. So these days I design by hand. I have created a set of base classes that makes designing dialogs and panels a bit more Pythonic and once you get the hang of it the process is easy and flexible.
If only this was still updated.
True fax. But it's free and extensive and sure as hell beats brute forcing. Sizers and I have never gotten along for some reason. *sigh*
I use and love it, but it hasn't been updated with some of the newer widgets (or has it and I've missed them some how?). What I end up doing is setting up sizers and text fields or something to lay things out, then using the wxpython examples application (which gives you widgets and code to create them) to substitute later in the code, for, for example, a Search widget, which I would've ended up re implementing myself had I not seen it in the examples.
I'm waiting for pySide to mature, personally, but am quite eager to try out Qt in python. How much binary data do you end up shipping with it when you distribute your app? IIRC with wxpython (using py2exe) I end up with 6 - 10 additional MB.
Cool. I've tried it, but can I just add this to my thread? - When I was very young, I used to love creating pointless, useless dialogs in VB and VC++. It was easy. Create a frame, then click the button tool, click inside the frame and drag to resize your button and place it in an exact place. Unless I'm mistaken, this doesn't seem possible with wxwidgets. Everything seems to be placed with very unintuitive _splitters_, in order for the window to scale well, or something. Am I wrong? Is there still a way to do this all in my old, baby-method of designing a gui? :)
My reasoning is simple: If you like the direct / uncluttered / well-designed feel of python or ruby, I don't see why you would use such a cluttered, over-designed, and slow editor as Eclipse.
I guess it's just personal preference. I'd rather edit the SQL.
ouch, looks pretty bad in terms of code what directly jumps the eye is doc-strings are NOT in the right place (ugh, before the function, wtf?!), the rest is a bit less obvious
I used wxFormBuilder for a Ruby app a while back and really liked it. It's an effective, well put together app and I'd happily recommend it to others.
emacs. 
I've practically no experience with Python, but if you can give me other suggestions / patches I'd happily incorporate them.
I'm a broke college student. :(
If you must have a full-featured and open-source GUI builder, Qt is simply the only way to go. It's the easiest and most full-featured solution that exists IMO.
Couldn't tell ya, I don't do that sort of thing. I imagine it's somewhere in the same ballpark, but these days where people regularly download hundreds of meg without even batting an eyelash the difference just wouldn't be a deal breaker to me.
I agree with you here. I used to do all my development in gvim but a new colleague recently urged me to try out eclipse. I've been loving it for larger projects.
I think you mean sizers rather than splitters. You don't have to use them, but you should. Wx will then know how to positions your controls correctly even if the text size or widget size is different from what you planned on. This achieves much better looking apps on other platforms. I think the best way to use wxpython is to create GUIs in wxGlade and tweak them by hand if necessary. I'm still learning and I'd like to be able to work without wxGlade eventually.
Just do it by hand.
I like doing it programmatically with [wx.lib.sized_controls](http://www.wxpython.org/docs/api/wx.lib.sized_controls-module.html). It's really easy: You just tell it the kind of dialog/panel you want, add the controls, and they show up in the right places automagically.
While I agree with you mostly. (Mako is great too for sure) I hesitate recommending an ORM unless I'm sure that the listener has what I consider a project big enough to need it. Understand though, I think everyone should have a basic understanding of SQL because it helps to understand methods of storing large amounts of data. Personally I would go to Turbogears if the person was at a level that they needed an ORM. For rapid development, you are likely designing your database system too, and if you need database optimization ever (which I also do alot), then an ORM can really screw you over. And yes, it makes me insanely happy that other people see the templating language as the full "View" of MVC.
As I see it SQL is more flexible. The main reason I would not use SQL is that it makes the applications not portable because every dialect is different. The web2py philosophy is that of proving an abstraction layer and therefore it only supports those expressions that can be translated in the SQL dialect of each of the supported relational databases.
Looks very interesting. Care to put it on gitorious / github / bitbucket / whatevervcsyouuse? I'd love to see some more in-the-wild werkzeug projects :)
gedit is great, but even better with a few plugins. Auto-indentation, auto-completion, class+function browsing, and a built in terminal are easy to install: http://trialsolution.wordpress.com/2009/02/13/gedit-as-a-python-ide/
* you don't need a get_foo method if all you really do is use a single attribute * if you have 6 methods that all differ only by a singe word in the method name/body you might want to figure a more nice way to make those * get params can be encoded with urllib.urlencode
using vi in a terminal
Thanks for your interest! It's on my private svn at the moment but I would love to use git. I'll look into git, remove stuff that's not supposed to be public (like passwords), and then post the link in this reddit. Give me a week or so.
over an ssh connection to a headless box.
Sizers are easy to get the hang of, if you've ever designed a web page in the 90's, you know, using the tables method. Basically, you can get a use a horizontal or vertical box sizer with just 2 rows or cols, make splits and add more sizers until you get everything right. One of my forms could end up having up to 10 sizers, FYI. There's another tricky thing with wx, the "proportional" parameter, that you set to 0 or 1 and it drastically changes the way a control or sizer behaves. Still, having all this experience with wxWidgets and none with PyQt, I'd rather use Qt.
I prefer to just do it in vim.
ssh? wtf. telnet over 800 baud.
Fine. I'm off to hire a pygmy to squeak morse code over the cup-string-cup system.
I really couldn't understand the benefit of using this library
Make sure you encrypt with pgp first...remember, trust no one.
This library fills a gap when you run into the limitations of itertools, list-comprehensions and gen-exprs: for example, when you want to collect data into multiple destinations. itertools.tee doesn't help because it duplicates data in memory so cannot be used for big data streams. For grouping, I find itertools.group_by rather hard to use correctly (although maybe this is just me). sendtools.Group* objects make this much easier. It's true that the sendtools.send function is just a shortcut for writing a for-loop. Where previously you'd write: a=[] b=[] for x in source: a.append(x) b.append(x) you can now do: a,b = send(source, ([], [])) More concise I think. Also, the send function is a bit faster than writing a for-loop yourself (although speed wasn't the motivation for this library). Sendtools.Map handles exceptions (I you want it to). I've often run into problems with occasional bad data in a stream causing a list-comprehension or gen-expression to fail, aborting an otherwise good-but-slow pass over a large dataset. There no single killer justification for using sendtools but it provides lots of small benefits when working with large iterators that make it compelling.
This sort of works. The top left of the image is distorted in a similar way to your command line. I have no idea what it should look like so who knows. from PythonMagickWand import * from ctypes import * arrayType = c_double * 8 pointsNew = arrayType() pointsNew[0] = c_double(121.523809524) pointsNew[1] = c_double(317.79638009) pointsNew[2] = c_double(141) pointsNew[3] = c_double(275) pointsNew[4] = c_double(346.158730159) pointsNew[5] = c_double(312.628959276) pointsNew[6] = c_double(319) pointsNew[7] = c_double(275) ShepardsDistortion = DistortImageMethod(14) MagickWandGenesis() wand = NewMagickWand() MagickReadImage(wand,'/home/user/image.png') MagickDistortImage(wand,ShepardsDistortion, 8, pointsNew, False) MagickWriteImage(wand,'/home/user/image_mod22.jpg') 
I'd prefer ... a = source[:] b = source[:] 
Please expand on your alternative to tee. Would it allow me to split an iterator into two iterators, and iterate them individually, without taking up more memory? I don't like group_by either. :) &gt; you can now do a,b = send(source, ([], [])) How is it different from: a, b = copy(source), copy(source) ? Is the result an iterator, or something of that sort?
nice beginning. upvoted. i can't wait for recipes.
Let's say you want to calculate the mean of a collection: def naiveMean(numbers): return sum(numbers)/len(numbers) Now assume that iterating numbers iterates a very slow database or something. Then it would be faster if you do this: def imperativeMean(numbers): total = 0 count = 0 for num in numbers: total += num count += 1 return total / count But some folks really like to avoid "imperative style" and would prefer: def functionalMean(numbers): (total, count) = send(numbers, (Sum(), Count())) return total / count 
You are assuming that source is a list.
No, you can't split an iterator without either storing its data in memory for reuse later (what tee does) or without making a second pass over the iterator (may be undesirable if the iteration is slow, IO-bound maybe). What sendtools provides is a clean declarative approach to doing all your work with an iterator in a single pass. You can prepare a chain or "fan out" of Consumers in advance to define everything you want to do with the data, then you consume the iterator in one go, using the send function to pass the data into your Consumer network. w.r.t copying, the point is that copying the source assumes that you can fit the copy in memory. This may not be possible. Even if your source can fit in memory, the memory allocation overhead may be a speed bottleneck.
Right. If you've already got all your data in memory, then you have no need for sendtools.
Exactly. Of course, in this case, you can use the Ave consumer: mean = send(numbers, Ave()) There is also the Stats object which computes three quantities: count, mean, stddev = send(numbers, Stats()) If think the incremental standard-deviation algorithm is quite cool (taken from the wikipedia page).
Thanks for the explanation. I didn't get it, now I do.
So the sendtools lets you construct a calculation from a chain of basic functional operators, and runs it on a sequence of data? If I got it right, it's a functionally parallel to itertools, but instead of running the functions one after the other on the data, you curry all of them into one "function"?
Thanks a lot! This solved it. Specifically, I think it is the: ShepardsDistortion = DistortImageMethod(14) line that did it. Is it OK if I add this as the answer on StackOverflow just for anyone else that may come across the problem.. Or if you'd like, you can add it as the answer if you have an account?
itertools objects (and iterators in general) are "pull" based data sources. I.e. you pull data through a chain of iterators by calling .next() on the bottom of the chain. Sendtools is the conjugate of this; it is "push" based. You push data into the top of the chain. The most general form of iteration chain would be: itr -&gt; itr -&gt; itr -&gt; for-loop -&gt; consumer -&gt; consumer -&gt; consumer where the 'itr's are a chain of iterators. Data is pulled through the chain of iterators and then pushed down the chain of consumers. The *important* point about consumers is they can fan out to multiple destinations. The itertools objects can only pull data from multiple sources (using izip, for example), but they always result in a single output (it's .next() method). (itertools.tee doesn't count as multiple destination due to the limitations I already mentioned). Initially, sendtools was implemented using python's generator / co-routines (which have both .next() and .send() methods). However, the moving to Cython gave much better performance.
Thanks, now I understand it even better.
this looks really cool. I love the itertools module (even though I try not to use for it *everything*). It could really use an insightful blog post by someone (the author?) showcasing some of its uses, though.
Glad you like the look of this. Sadly, I don't have a blog. I'm gradually expanding the README like (as displayed on PyPI and bitbucket) to get in usage examples. It's true these don't really convey how useful the library is for "real world" use cases. In my case, I'm processing HDF5 files of a few million rows to produce plots of the data. Plotting millions of points in a single chart is pointless (too many points), so I need to aggregate the data into groups (maybe a few thousand groups of 1000 rows each), take averages and std-deviations etc. The data is also structured (a bit like a column-major ordered 2D array); I need to select specific columns from each group to get a meaningful chart. I'll try to write up a meatier example for the sendtools docs.
Definitely. One of the reasons I decided to start with SA was because of the database agnosticity (chrome thinks I invented a word, I call dibs), but as it turns out, five years later we're still on mysql, and in 20 years I've never actually had to port my *own* code from one database back end to another. Someone's example of starting with sqlite then allowing the end user to migrate to a different backend was a valid one, however. I could see that.
This is beautiful, thanks very much!
I know pretty much nothing about JIT, can someone explain what makes this particular example so much faster than the C/C++ versions (is it the algorithm or some JIT magic)?
It seems like most of his concerns would be solved with adequate documentation. Basically he's complaining about dynamic typing, not Python. Even with static typing, the programmer can make things equally opaque.
Besides documentation (btw, the online Python documentation is much richer than what you get from the command line help() function), Python calls for you to use tests where you would have relied on the compiler in Java. People who use languages where the compiler does some tests for you don't always realize they still need tests. So the main thing is: if you have don't have extensive tests, you are doing it wrong. So what kind of exceptions can a Python function/method raise? Basically anything. You build tests for the kinds of things you expect to pass to it, and catch and deal with exceptions that those raise. If anything else gets raised, you need to decide: should you just blindly deal with them and hope for the best, let them percolate up to some other handler who may be able to deal with it, or die. There is no simple answer to this question, and it depends on your app.
I'd much rather Python clean up their documentation than go to Java. I've coded Java, and it's just not something I'd consider a trusty 'go-to' language. Python's documentation is... not great, but it's not a total travesty. You pick up on these things he's griping about with some experience. Every language has things like that, too. It's not like you can't come up with some tribal knowledge in the java world that isn't really documented well. 
"Pydev for Eclipse Sucks Too" +&amp;#8734;
I do not think, that these concerns can be solved with better documentation. It is not a documentation error, that exceptions - like IOError in open function - are not documented in standard library. Some rules of production development in python: * You do not write a function, if you do not have a failing test. * You use source code checking tools, that enforce naming, documentation and other conventions. If you do not have a test for not finding a file, than you did not think about not finding it. It is in your domain to decide. Collaborative python development is hard. It is hard, because you have to set up rules of development on your own. The language itself does not enforce it. It is hard because writing tests can be harder, than writing code. 
go on
It is hard, because I cannot go on :)
If there was a percentile consumer, i'd be sold.
Perhaps, forcing someone to read the source of the libraries they use isn't such a bad thing.
Would this be an aggregate consumer which calculates the given percentile value incrementally (e.g. Percentile(50.0) would be functionally equivalent to Ave() )? I'll look into this. Cheers. 
wow, "dynamically typed languages are dangerous". novel ! has this guy heard of docstrings ?
My God, learn how to use commas correctly. Your text, is impossible, to read, without great effort.
Actually, from the [official docs online](http://docs.python.org/library/functions.html): &gt; Open a file, returning an object of the file type described in section &gt; File Objects. If the file cannot be opened, IOError is raised. Don't use the inline help, use the _online_ help. Regarding the rest of the points raised in the blog: * Not being able to overload methods is not a big deal when you get arguments with default values. And seriously, few libraries in Python use `*args` as a signature of a method/function. * Errors should be listed in docstrings, it's not that hard. There are challenges when switching from a compiled language to a dynamic language like Python, but the points he is raising don't really stand up to scrutiny.
I'm all over this. I love writing BDD stories and scenarios when building up a Ruby/Rails project. Makes it a lot easier to say "I want this application to do this thing" and then write that exact same code than try to get a test case when I dont exactly know _how_ I want that application to do that thing.
`L = list(source)` (posted after yairchu)
This is the same violin-in-background story told by every new Java-&gt;Python skeptic.
person gets tripped up in new language, writes on their blog... news at 11
He's trying to imitate, Christopher Walken.
Why?
I haven't made a non-HTML based GUI app in a while. Does it have my TextCtrlAutoComplete widget in there yet? (I say mine, but everyone extended my original widget into something far more versatile) http://wiki.wxpython.org/index.cgi/TextCtrlAutoComplete
Your question is too vague.
So ,,Python sucks because it's not Java''? We already knew that, right? I mean `*args` in the initializer is a bad thing? And what, no docstrings? help(`StupidFuckingClass.__init__`) not working? It's a shame that language is to blame for letting you do more with less syntax. Documentation (inline!) is king. Runtime and checked exceptions... so Java still has those pesky unchecked exceptions but their *structure* is good? And you only get those on Big Fuckups? Seriously Ted? That's your argument? To get that information in Java you need to either look at the source, or docs, or let intellisense help you or wait for the compiler to spit on you, so where is the difference? And btw. yeah, having double standards (runtime vs checked) is of course better than uniform way, because fuck you. I love this concise argument. Because it may be hard for you to understand that I don't want to write a try block around EVERY goddamn `open()`, because sometimes it's enough if I just get a trace (since it's non-recoverable). Ultimately it comes down to the documentation, common sense and good test suite. If you're an idiot working with idiots, then Python is obviously not for you. Neither is Java, but fortunately you will not be able to grasp that. Godspeed.
My only problem is that with Qt, with my understanding at least, if I create something that uses Qt and distribute it on the web (for free), I'm obliged to share the source code of my creation. This app is something which, for the first few releases at least, I'd rather have closed source. What can I do?
Sorry. Why do you want to work without wxGlade?
It compiles the re matcher to assembly at runtime.
Two-year-old article by professional troll generates online discussion. Film at 11.
You can purchase a commercial license if you don't want to have to adhere to the GPL: http://www.riverbankcomputing.co.uk/software/pyqt/license &gt; This app is something which, for the first few releases at least, I'd rather have closed source. Why? Embrace open-source man!
&gt; Perhaps I'm just doing it wrong? I think you are. 
&gt; He's, trying to, imitate, Christopher,,, Walken. FTFY. 
Eclipse sucks. Java programmers should stick with vi and leave the hard stuff to the Emacs users. 
&gt; I do not think, that these concerns can be solved with better documentation. You don't think not knowing what parameters a function takes can be solved by better documentation?
I just don't think the code from wxGlade is very organized. I'd like to group things into functions that have logical names. There are some other little things that wxGlade doesn't seem to support (at least I haven't figure out how), for example wx.Dialog has a method called CreateButtonSizer that can be used to create typical dialog buttons like Okay and Cancel so they are arranged in the proper order on all platforms. I don't know how to use that with wxGlade other than to design the window with the intention of adding some stuff to it later by hand.
Yea, you should update StackOverflow. I don't know much about these libraries, but I figured it being the 14th item due to the assigned enum in there.
If only Emacs had a good text editor.
More precisely: compiles the *matcher they implemented* to *machine code* at runtime.
Well, it might be closer in function to a median. Basically, you identify the value of the discrete variable, represented as a an iterable, where the portion of the given population is less than the given p value (0.0-1.0). Here is a possible use case: &gt;&gt;&gt; values = [1,1,1,1,2,2,2,2,3,4,5,6,7,20,100] &gt;&gt;&gt; send(values, (Percentile(0.25), Percentile(0.50), Percentile(0.75))) (1, 2, 6) The answers can be obtained with the following: &gt;&gt;&gt; values[int(len(values) * 0.25)] 1 &gt;&gt;&gt; values[int(len(values) * 0.5)] 2 &gt;&gt;&gt; values[int(len(values) * 0.75)] 6 The effective statements you can get are: * 25% of all values are 1 or less * 50% of all values are 2 or less * 75% of all values are 6 or less However, the "challenge" is getting this result with out sucking the entire dataset up into memory. Edit: Take a peak at the [Selection Algorithm](http://en.wikipedia.org/wiki/Selection_algorithm). Also it might be a good idea to allow the caller provide a `key` function, much like the `sort` function in python, that would extract a value used in the calculation, but return the actual object in the result. 
Not in wxGlade directly as far as I can see. I also don't see it in the wx examples program. Hm.
for example right now im trying to use django's orm startswith function. It's performing a BINARY LIKE and it's not working. doing a google search for django startswith or django orm startswith is useless
A few doc strings can solve Python's problems, what is going to solve Java's problem of 25% of the code being devoted to making Factories and AbstractFactories everywhere?
Yes. Yes, it is. I don't want to have to root around in someone else's source to figure out what all could possibly go wrong. That defeats the purpose of having a library. I just want to know how to use it.
I might be wrong, but something like [diesel](http://dieselweb.org/lib/) might work for you. It is a general network async framework, but it comes with an HTTP implementation. It looks pretty slick (I haven't used it). 
Reading other people's source is invaluable. You'll be surprised by what you'll learn.
I have no idea. Depends on what excites you I suppose. ;-) It was designed with the University of Toronto to teach entry level programming courses and is used in a number of places for that purpose. Edit: I should add that it's also used by people as a simple IDE, although personally I couldn't get along w/o auto-completion and that was intentionally left out at the request of the people we designed it for.
Wing is about 10 years older. I suspect spyder is missing a fair amount if put side by side, but I don't have a feature by feature comparison. That's something I would like to work on creating soon...
Any chance you're going to respond to the criticisms he raises? Or is this, Script Kiddie On Reddit Makes Snarky Comment Since Doesn't Understand Article, film at 11?
The problem of functions not explicitly saying how many parameters they take may be *alleviated* by better documentation, but that's not a solution to the actual problem: a function is a contract and the function writer never laid out the terms in any enforceable way.
Not to mention having to say everything twice: List&lt;String&gt; list = new List&lt;String&gt;();
And you'll be surprised how fast you'll be fired when you explain to your manager that no, your task isn't done, you spent the month recursively reading through all the libraries your project transitively depends on.
I don't do much coding in Python, and I'm beginning to be thankful for that, if I'm expected to run to the web browser to examine every function declaration. Is that accurate from what your saying?
guys do I need an import license to import packages in python and what if i don't have an original COO guys halp :s:s
Interesting idea. If you know the final size of your population, you can do this with heapq.nsmallest (which can take a key-func like you suggest). It would be easy to wrap nsmallest (or nlargest) into a consumer. Without upfront knowledge of the population size, I don't think this is possible without keeping everything in memory. If you don't know the final size of the population, you don't know how many items to keep, so you can't know which items are safe to discard.
For an unlimited license, simply send $100.00 to: Friends of Uncle Timmy PO Box 37 Wolfeboro Falls, NH 03896-0037 USA 
sry but it is door 2 door so no clearance required rite????
What is a binary like? According to [the docs](http://docs.djangoproject.com/en/dev/ref/models/querysets/#startswith), it simply does SELECT ... WHERE headline LIKE 'Will%'; You should be more concrete.
&gt; Python calls for you to use tests where you would have relied on the compiler in Java You're the only person in this thread that has got the point. Well done. In statically-checked languages, I can have the confidence that a well-written library will make it difficult for me to write seemingly-correct code that misuses it. In Python this is rarely the case.
Besides, if all you look at when you try to work with an unknown interface is the method signature, you're doing it _horribly_ wrong. This should only work reliable if the method is sufficiently trivial.
Nah, you _know_ that `List` is an abstract type. List&lt;String&gt; list = new LinkedList&lt;String&gt;(); There you go.
I think that things like "raises an IOError on failure" should be in the inline docs, so I partially agree. The inline documentation is generally good, though, and the online documentation hasn't ever let me down. Regardless, this isn't so much about the language as the documentation of the standard modules.
&gt; Any chance you're going to respond to the criticisms he raises? OK, the author is whining that it's not like java. To which I say "no fucking shit", I can sympathize with the concern that python may be more difficult to use on larger projects with more people due to having to depend on your colleagues for some sense of quality/standardization rather than having a compiler enforce it. And as we all know, your colleagues probably suck. I've suspected for a while that this may be an issue but I have never had the opportunity to work in such an environment. And I agree that pydev sucks. Eclipse is for java, and is absolutely essential for getting around a java code base which compared o python is very verbose. But because one tool works well for one language and not for another is not the fault of the language, use a better tool. As far as exceptions go, again this is the whole "it doesn't work like java", the author may believe there's value in checked exceptions forcing you to address all that shit before your shit compiles. The fact is, those who do python do not share that concern. And neither do those who do C# for that matter. So it boils down to a persons expectations not being met, and blaming the language which makes for excellent blog fodder. does this satisfy the "user agreement" or are you going to ban me from the internet? edit: written snarkily while trying to figure out how in the hell a j2ee app managed to spend 10 minutes compiling/deploying only to find out that the presentation layer is referencing a fucking function that doesn't exist. I will blame the language and write a blog post about it.
I do spend a fair amount of time reading other people's source so I can see how other people have approached tasks similar to whatever I'm doing. However, I shouldn't need to do that to use a library. 
This is really out of date. The [canonical version](http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy) is also out of date, but not as badly.
Touche. I stand corrected.
Agreed, I posted something similar, but you are more angry and need more up votes.
Actually I downplayed this as much as I could without removing the message carrying bits. Sorry if it sounded angry. I was angry (at myself) when I saw the timestamp on TFA. After I posted this.
then the docs are wrong. i showed the sql statements it was running and it was running a binary like
As [Russ Cox points out](http://swtch.com/~rsc/regexp/regexp1.html), Ken Thompson had this in his 1968 implementation. The pypy article doesn't break new ground, but it serves to remind us that although it has been done before, it still isn't present in any tools. There may be a couple of reasons for it. One is that all tools that provide regexes (egrep, perl, python, java.util) actually provide a language that is far more powerful than the simple regular grammars presented here. Still, it is perhaps worth it to provide such a facility if the pattern doesn't need backtracking or capture. Second is unicode. It is far simpler and efficient to implement choice sets for ascii, than for unicode. These two reasons are also the reason for perl compatible RE engines to be comparitively slower. Building a PCRE is a non-trivial endeavor. Third has been the lack of dynamic and portable code generation from C; LLVM should fix that. Better still, functional languages with a LLVM backend would be the best of all worlds. 
Fantastic link to the [original post](http://mail.python.org/pipermail/python-list/1999-June/616160.html) by Tim Peters.
&gt; I'm expected to run to the web browser to examine every function declaration. Nah, only if you have no idea what arguments the function takes.
no need to apologize. programmers in my experience are pretty passive by nature which is why it's so easy to herd us into participating in ridiculous death marches. IMO, we programmers need to be more at one with our anger. Hopefully this philosophy leads to employee of the month for me. :)
Awesome. You can never have too many tutorials like these floating on the web. **edit**: and no, I'm not being sarcastic.
One of the things I love about Geany is the super-fast search/replace. I work with a lot of text data which needs this kind of thing. I do use sed often but sometimes for one off things it's easier to fire up a GUI text editor and do that work. I have tried Editra, Komodo, SciTE, Cream, jEdit, and others, but in my non-scientific but real-world tests, something that Geany can handle is less than 10 seconds hangs all other editors indefinitely. On Windows side I get the same performance from TextPad. Because of the customizability of Geany, and the fact that I do most work with Python and SQL in it, it is my go to text editor.
&gt; You should be more concrete. By that, I mean examples.
I was just about to post this question :) So far my favorite is Geany http://www.geany.org/ Mostly because I can use the same editor on windows and ubuntu
in a way, yes - you can set the processor affinity to tie all your threads to a single processor, and avoid some of the more awful effects of the current GIL implementation
[FOR SPARTAAAAAA!!!](http://knuth.luther.edu/%7Ebmiller/JavaForPython.html)
haha, lol, teehee
you are a plum fellow
You can use any widget in wxglade. I even went as far as defining my own widgets, based on panels and other controls. The trick is to use the generic widget control and assign your own class there.
Mike Driscoll (this article is from his blog) puts out a lot of really nice tutorials on there and is one of the active guys on the wxPython mailing list. Has been very helpful for me (even if he doesn't know it).
Okay, I checked with the Django source and it seems to do a binary like with a mysql backend. Now my question again: what is a binary like and what does it do wrong in your case? I have used startswith (and contains, ... who all use binary like) and it always worked as expected.
I've been using Vim almost exclusively for a few years now: I do all my text-editing and programming in Vim (except for Java source code, which is so verbose it requires Eclipse as far as I'm concerned). When I find something is missing I look for an existing Vim plug-in or write my own. Most recently I wanted to be able to jump to Python documentation with a single key-press so I wrote the [pyref.vim](http://peterodding.com/code/vim/pyref/) plug-in. I get why a lot of people don't think it's worth their time to learn Vim or Emacs but the extensibility of these editors more than pays back for your time investment (at least to me, but then I don't mind writing my own file type plug-ins `;-)`).
Nope.
My preferred form designer is [wxFormBuilder](http://wxformbuilder.org/). I use a custom-built script to translate FBP to Python code. Previously I used the XRC loader but that is a bit of a pain. They are working on a Python code generator but it's not in the release build yet.
nice idea. congrats for the final product :)
binary like is case sensitive. i fixed it by using Company.objects.filter( name__startswith=data['index'].upper() ) # data['index'] is a single char buttt, now i have to make sure that all my company names are uppercased, or it breaks. i guess i could add an or somehow and do something like Company.objects.filter( name__startswith=data['index'].upper() or name__startswith=data['index'] ) but the idea of searching for how to do that right now isnt a priority heres a link to what im doing http://django.skatevideosonline.net/videos 
You want case insensitivity? Use name__**i**startswith. One line below startswith in the [docs](http://docs.djangoproject.com/en/dev/ref/models/querysets/#startswith) I already referenced. Does this solve things for you?
it does help thanks. 
Just write one. You already spelled out the requirements, and you'll probably be happier if you write one to match them rather than trying to shoehorn your requirements into something that exists.
Django does this when you run "./manage.py runserver". You could look into how they do it. The function at the heart of it is probably just "reload(module)". It doesn't find new modules/files and a full restart is needed.
What does [Go](http://code.google.com/p/go/) has to do with python IDEs?
see http://pyunit.sourceforge.net/notes/reloading.html Mind you, there are lots of caveats to this.
There i no reliable way to reload in Python unfortunately. There are some very ugly hacks to accomplish that. Check how zine does it: http://dev.pocoo.org/projects/zine/browser/zine/_core.py
I solved that issue by running the "plugins" as standalone python script and communicating with then through a client/server interface via socket using serialized python objects. (I couldn't be bother to figure out how to do decent asynchronous IO over stdin/out). It does not answer your question though. I'm sorry for that.
This is misleading because not all frameworks are meant for the web.
Ok, that's great and all but there's not a word about *how* to actually use this in Python. And it won't fix all the horribly ugly Tkinter GUIs that already exist. Does this also address the issue that Tkinter GUIs usually don't work with the conventions of the platform (e.g., in IDLE on OS X command+left and command+right don't work as beginning-of-line and end-of-line commands)? And then there's the issue that the Tkinter API is nearly as ugly as the GUIs it produces...
The way Trac (and werkzeug and all other live-reload systems I've seen) does it is that the dev server spawns another process that does the actual serving and then sits and watches for file modification FS events. When any file changes, the sub-server is killed and new one is spawned. Its rather heavy-weight, but it works.
&gt; And then there's the issue that the Tkinter API is nearly as ugly as the GUIs it produces... Yes, right. Since we are in 2010 some people have already seen modern declarative approaches to UI toolkit design as in Flex, Silverlight or JavaFx. Ugly widget sets of the past are not Tk's ( and Python's) only concern anymore.
I thought they're restarting the whole process, not just reloading a module
This is really interesting. One of the difficulties I have with making effective use of multiprocessing for multicore computing is that the cost of the data IPC often outweighs the benefits of performing the calculations on another CPU core. The IPC-cost is usually due to the overhead of pickling objects. Thus the ``marsh`` module in this package looks very interesting. I wonder if this approach can be utilised in other RPC-like libraries (multiprocessing, for example). What are the limitations of it, compared to pickle?
Thanks for finding it interesting but I am not the developer. You can ask them by emailing them [here](http://code.google.com/u/@UBRURVdUBxdDVwZ%2F/#)
You can check out the source on the [GitHub page](http://code.google.com/p/rfoo/source/browse/rfoo/marsh.pyx) but there isn't much to it. It uses the Python marshal library for the serialization/deserialization with just an extra call to verify the data (probably just to make sure it won't behave unexpectedly on version changes.) [The Python documentation for marshal](http://docs.python.org/library/marshal.html) explains the difference: &gt; If you’re serializing and de-serializing Python objects, use the pickle module instead – the performance is comparable, version independence is guaranteed, and pickle supports a substantially wider range of objects than marshal. I'd be a little surprised if the cPickle serialization/de-serialization is slower than the network call, but not all that surprised. I've timed cPickle.dumps of a 1000-element array of tuples at something like 1ms, so it is entirely possible that a network round-trip to localhost would be faster.
Its doable but you have to make sure when you reload that there are no more references to the old file.
:(
To use that you need pyttk. Get it from [here](http://pypi.python.org/pypi/pyttk), or wait for 2.7 or 3.1 releases, as pyttk will be in the [standard library](http://docs.python.org/dev/library/ttk.html).
what was not modern, declarative in tcl/tk ? What about pyglade ? I'm sure 90% of the declarative approach can be recreated by a thin layer in python for tk. 
The web site associated with the blog has a [tutorial](http://www.tkdocs.com/tutorial/) describing how to use all this newer stuff in Python.
well, the reason I'm asking is because I _have_ written one, years ago. It wasn't very good, and I'd love to avoid rewriting it from scratch if I can just use someone else's. 
Yeah, this was my backup plan, since it'd nicely avoid all these problems. I was kinda hoping to avoid it, though, since my design involves multiple servers and it's not easy to tell a specific one to exit. So when you get into the state that servers 1-3 are up to date and servers 4-9 are out of date, you can't tell servers 4-9 to reload, as 1-3 might grab the reload event before 4-9. All that code will have to be rewritten if I'm design it this way, plus watching for file modification events isn't that easy to do cross-platform (since I have to care about windows, apparently)
Narrated by Stephen Hawking :(
Tried `os.getenv('PROG_DIR')`? 
 import os progdir = os.getenv("%PROG_DIR%") f = open("%s/subdir/file.ext" % progdir, "w") Not tested on Windows, you might have to remove the %s.
Yea, no % characters in os.getenv. Even though OP states Windows only, I'd use os.path.join rather than string formatting.
You can just use os.environ['PROG_DIR'] That's a module-level variable which behaves like a dictionary, for example os.environ.keys() would get you all the environment variable names, and for name in os.environ: print '%s -&gt; %s' % (name, os.environ[name]) would print out the names and corresponding values.
I think it's by Nir Aides, developer of the excellent [winpdb](http://winpdb.org/). Nir has recently proposed "fixing the GIL" using Con Kolivas' BFS (BrainF**k Scheduler).
Thanks os.getenv('PROG_DIR') worked.
Thanks os.getenv('PROG_DIR') worked.
Thanks os.getenv('PROG_DIR') worked.
why is os.path.join safer/better?
If you only ever plan to use this on Windows, string formatting would be fine. I like os.path.join because it's harder to screw up, and cross platform.
It always uses the correct path separation character, and it fixes extra path separation characters, such as when you join "/tmp/" and "tmp.txt".
Unfortunately it doesn't seem to build on OS X
I'm working on a game myself, and I'm going about it the way you explained. Though, I am having difficulty passing the signals / controls to the objects from the keyboard input. Did you have any difficulty with that?
I wrote a game framework for myself that handles it in a particular way. The code for all my input is here: http://github.com/Fiona/Myrmidon/blob/master/backend_input_pygame.py Basically I use pygame.key.get\_pressed to get the state of all the keys and then query them individually. I have a function where I can do keyboard\_key\_pressed(K_SPACE) for instance to query if the space key is down. By checking the sates between frames I can determine when keys have been lifted. I use these methods in my objects every frame to determine what keys are down. It's probably not the best way to do it in the long run, and it means that I've had to do a silly hack to make the normal event queue work (for text input for instance) but it works for me.
For me, SA (and other ORM's that can do query building) real wins come not from writing a particular query, but being able to *programatically* build queries. def make_sorted(query,**kwargs): for (field,direction) in kwargs.iteritems(): query = query.order_by(field,asc=direction) # don't quite recall the syntax here :) return make_sorted Building this kind of stuff with string interpolation can be maddening. 
I'm with zzzeek here. But what about if you want to change the sort order on it? With SA, you can make the big horrible snarly part into raw sql, then add the order_by as clauses. The niceness of things like SA is that mix. Weird parts -&gt; go to sql; easy parts -&gt; build in SA.
You can use the following too: os.path.expandvars('%PROG_DIR%') But, if 'PROG_DIR' does not exist, then the result would be '%PROG_DIR%', so make sure the variable exists in os.environ.
For the compile-on-change part: http://www.kernel.org/pub/software/scm/git/docs/githooks.html
&gt;Fortunately ftfy
Care to elaborate? I get this: &gt;i686-apple-darwin10-gcc-4.2.1: rfoo/marsh.c: No such file or directory &gt; &gt;i686-apple-darwin10-gcc-4.2.1: no input files &gt; &gt;powerpc-apple-darwin10-gcc-4.2.1: rfoo/marsh.c: No such file or directory &gt; &gt;powerpc-apple-darwin10-gcc-4.2.1: no input files &gt; &gt;i686-apple-darwin10-gcc-4.2.1: rfoo/marsh.c: No such file or directory &gt; &gt;i686-apple-darwin10-gcc-4.2.1: no input files &gt; &gt;lipo: can't figure out the architecture type of: /var/tmp//ccVWaq8y.out &gt; &gt;error: command 'gcc-4.2' failed with exit status 1 
Well, it would, if it wasn't full of PYTHONTODO.
Maybe, I haven't looked under that hood.
That's what i use.
actually pickle/cPickle takes roughly 10 times longer than marshal to serialize a 1000 element array i tested it using `[0]*1000` and `[(0,)]*1000` for both cases it takes roughly an order of magnitude longer for pickle btw, simplejson is on par with cPickle, json from python2.6 is another 2 orders of magnitude slower than simplejson 
http://github.com/dbr/IMDb-Python-API Some quick refactoring, to hopefully make things a bit more Pythonic. It still needs a lot of work, I've only touched the basic search parts (not `movie.py` etc) Currently this is what works: import imdb sr = imdb.search("Example") # sr is the decoded JSON data There's plenty of room for improvement, and there's better ways to structure such API wrappers, but hopefully the change log will be of some use I've written a couple of similar wrappers before (for www.themoviedb.org and www.thetvdb.com) - [tmdb](http://github.com/dbr/themoviedb) and [tvdb_api](http://github.com/dbr/tvdb_api) - tvdb_api is horribly messy, but tmdb is a bit better - might give you some ideas? Basically both of those projects just take user input (search term, an ID), and wrap the data into Python data structures (either lists/dictionaries, or Python classes)
Bottle + Jinja2 + Storm = 2000 requests/second on my old amd64 2.7ghz box
Pastebinit's code is quite horrible (the entire program is wrapped in a try: except: block to start with)... I sent a mail to the author with my rewritten version attached, but there has been no reply.
Any possible reason I'd use this over lodgeit.py?
And the way to create new pastebins is almost as bad.
pastebin your new version?
But some pygmies are PGP talkers... 
For one, there is no package for lodgeit.py in Ubuntu/Debian.
`cd /usr/local/bin &amp;&amp; wget http://dev.pocoo.org/hg/lodgeit-main/raw-file/tip/scripts/lodgeit.py &amp;&amp; cd -`
You do know that you can touch the .wsgi file which gracefully reloads the application, right?
You might want to check this out : http://bitbucket.org/masklinn/pastelib
Alternatively, for my currently project I'm using Cyclone (http://github.com/fiorix/cyclone) and txamqp (https://launchpad.net/txamqp). Porting from Tornado to Cyclone was really easy.
I'm trying to decide whether I should go for PyCharm when it comes out or Wing. I've been using PyCharm but haven't been playing with Wing because I'm a little afraid of the pricing. Anybody have experience with Wing and the PyCharm preview? 
There's a python module called livecoding at http://code.google.com/p/livecoding/ which could be what you are looking for. To quote from the page: &gt; Code reloading allows a running application to change its behaviour in response to changes in the Python scripts it uses. When the library detects a Python script has been modified, it reloads that script and replaces the objects it had previously made available for use with newly reloaded versions. 
&gt;Beautiful is better than ugly. &gt;Simple is better than complex. &gt;Readability counts. And yet, the module uses all single-letter variable names that don't obviously stand for anything, and the text is obfuscated.
If you're bound to Apache, I'd personally choose mod\_wsgi over mod\_fcgid. Otherwise, my personal preference is a Python framework which supports running its own server (Tornado, for instance) configured to run behind a proxy of some kind (like nginx). edit - escape \_s -_-
why mod_wsgi over mod_fcgid? I really don't know which is better. I've come from a Java and PHP background, so all the Python options are completely new to me.
mod\_wsgi is definitely the way to go. mod\_fcgi can be used with any language, but mod_wsgi is Python specific, meaning that you don't need an intermediate step (ie. flup) to use it (most frameworks come with WSGI support out of the box). It's also a lot clearer to use with Apache. For example, with Django: http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/
It is restarting the process, reload isn't used at all.
mod\_wsgi is the preferred Python interface for Apache - the same way Ruby has mod\_passenger (I think? It's been a while!). It's the Python "Web Server Gateway Interface", and it's tailored for use with Python. Like cd34 said, if you run mod\_wsgi in Daemon mode (which is default), it'll also restart your Python WSGI processes when it detects a change in your code, which neatly solves your problem :). When it comes to the most popular way of going about Python web development, your best bet is to pick one of the big frameworks. Django is extremely popular, and is what we use where I'm employed. I also use it on several pet projects. Pylons is what Reddit is built on, but it's reasonably agnostic about implementation decisions (ie. you're left to pick an ORM and templating engine yourself), so it might be a bit daunting for a newbie. Other biggies include web.py (which is quite minimal), web2py (actually unrelated to web.py ;)), Turbogears and werkzeug. There's minimal single-file style frameworks too (like Ruby's sinatra), in the forms of Bottle and Flask. Finally, there's Tornado and Cyclone, which are HTTP servers built on epoll/select (so they're very fast) which are designed with minimalist frameworks attached. Personally, I'd recommend Django; it's definitely winning the framework war, and the documentation is second to none.
Since nobody's spoken up in support.. another possibility is TurboGears. I haven't done much with it beyond install it and then poke at it a few times with a sharp stick, but all in all it seemed pretty good for getting up and running in a hurry.
Yeah, there's a few people I know who really like TG, but I've never tried it myself so can't comment :). It'd no doubt be worth giving a hoon though.
Thanks for the link! Reading the docs...
For what it's worth, at $EMPLOYER we've used both mod\_fcgid and mod\_fastcgi (and I'm now looking at mod\_wsgi) and in every instance, I wind up having to reload Apache to see changes to scripts.
I did follow suggestions of the other posters here and ran mod_wsgi in daemon mode and I didn't have to reload apache to see the changes to any scripts. Seems that mod_wsgi was configured to run in daemon mode by default in my installation. Maybe changing mod_wsgi to run in daemon mode in an option with your employer?
If 'daemon mode' means 'mod\_wsgi runs scripts in processes, not threads', then that didn't really work for me. For example, I'll start Apache and check my script, and see the current version. I'll make a change, hit reload in my browser and see the new version. I'll make another change, hit reload in my browser and see the new version. But if, say, mod\_wsgi is configured to have 10 back-end processes for my script, then after 10 reloads if I make a change and hit reload, I'll see the *first* version, not the *latest* version. Hit reload again, and I'm back to the *second* version, etc. So I wind up reloading Apache after every change, just to be safe. (note that 'reload' is faster than 'restart).
Just use http reverse proxy and [CherryPy](http://www.cherrypy.org/) with a templating system like [Jinja2](http://jinja.pocoo.org/2/) and you will save yourself all this agony. I recommend Cherokee web server because of the easy to configure virtual servers(for reverse proxy) and nice admin interface(no more text files yay). It specifically solves your auto-reloading issue as well as simplifies your whole problem.
Here is an improved version that uses imp instead of an import, the benefit is that this works when the the import fails (common with django modules) cdp () { cd "$(python -c "import sys, imp, os path = sys.path for i in '${1}'.split('.'): path = [imp.find_module(i,path)[1],] path = path[0] if os.path.isdir(path[0]) else os.path.dirname(path[0]) print path")" }
Use Python Paster (comes with PYlons framework) paster has a --reload option for this reason Also, use Paster + NGINX 
Flask is definitely awesome. The documentation is above and beyond what most other frameworks have.
Note this from the docs: &gt; Do note though that this script reloading mechanism is not intended as a general purpose code reloading mechanism. Only the script file itself is reloaded, no other Python modules are reloaded. IOW, the script (.wsgi) file is monitored and reloaded, but changes to arbitrary .py files in your app *won't* be noticed.
That only applies for embedded mode. Running in daemon mode (which is preferable), it *will* reload the entire interpreter (as the daemons are killed and restarted).
That's using embedded, rather than daemon mode. Whenever your .wsgi file is updated (you can use fabric or whatever deployment system you use to ``touch`` the file on deployment), the daemons are killed and restarted.
_Gee_, I've seen that one coming _miles_ away.
haha, nice one
 while foo in some_list: some_list.remove(foo) However, it's somewhat inefficient for large datasets. Another option to do is: some_list = [item for item in some_list if not item == foo] The problem with your method is that the indexes are changing as you remove items, resulting in you skipping items. Thus, if you have the list `[1,1,2,3,5]` and want to remove all the 1s, here's what will happen: a[0] == 1, so 1 is removed. Now the list is [1,2,3,5] a[1] == 2, so nothing is removed a[2] == 3, nothing removed, etc.
thanks.
Have a look at the [documentation for filter()](http://docs.python.org/tutorial/datastructures.html#functional-programming-tools) Where L is the list you're filtering, L=filter(lambda x:x!=[1,2], L)
Lets say list *foo* is: foo = [3,5,7,3,9] And you wanted to remove all the 3s, you could do any of the following: while 3 in foo: foo.remove(3)#as already stated by mikm Or you could do: foo = [item for item in foo if item != 3] Also remember that google is you friend! [6th result is almost identical to your question](http://stackoverflow.com/questions/2186656/how-to-remove-all-instances-of-an-element-from-a-list-in-python)
all these examples work because lists are iterable objects, read up on that and you'll see why you don't need numeric looping.
PSPad through Samba onto Linux; PuTTY for running the code, I'm dying for a real debugger with actual, working breakpoints, watches, inspectors and all that fluff.
This is really a more appropriate question for StackOverflow. All the answers so far are not what you specified (they don't modify the list in place) or are inefficient (they loop through the list multiple times). If you want to remove an item from the list that may or may not be in the list, but will not be duplicated in the list, do this: def removeIfPresentOnce(someList, someItem): try: someList.remove(someItem) except ValueError: pass If your item might be duplicated multiple times, the most efficient way to remove all instances is to iterate over the list *backward*, so you can delete elements as you go: def removeAll(someList, someItem): for i in xrange(len(someList)-1, -1, -1): if someList[i] == someItem: del someList[i] Note that this may actually be slower than e.g. mikm's code on account of the fact that his code never iterates over the list in Python, and iterating over a list in Python is slower than in C.
Your username is really more appropriate for Slashdot. And I'd just use filter: some_list = filter(lambda x: x != item_to_delete, some_list) 
&gt; And I'd just use filter: But, as was said, that is just another solution which does not do what was specified: modify the list in place. It creates a new list.
http://en.wikipedia.org/wiki/Propagation_of_uncertainty#Partial_derivatives
But.. isn't the new list just the old list? ie x+=1
I would write it like this: def singleton(cls) instance = None def getinstance(): if not instance: instance = cls() return instance return getinstance And decorators on classes work only in Python 3, in 2.x you will need to do `MyClass = singleton(MyClass)` after class definition.
The new list is a second list object that has the same contents of the first, less the filtered entries. some_list = [1,2,3,4,5,4,3,2,1] stored_list = some_list some_list = filter(lambda x: x != 3, some_list) print stored_list print some_list As you see there are now two lists in memory. Compare this to: some_list = [1,2,3,4,5,4,3,2,1] stored_list = some_list del some_list[4] print stored_list print some_list Now you see that an entry has been removed from both, hence only one list is in memory. filter does not do an in-place modification to the list.
Same here. Works great for larger projects.
I ran a test with some simple code: @singleton class A: def __init__(self): self.num = random.randint(0,100) def __str__(self): return "A%d" % self.num @singleton class B: def __init__(self): self.num = random.randint(0,100) def __str__(self): return "B%d" % self.num foo = A() print foo bar = B() print bar baz = A() print baz I tested with the original `singleton` method and it executed as one would expect. (I got A47 B63 A47). I'm not sure what you intended with your code, but it doesn't even work; I get runtime errors.
To make it modify the list in place (say, some other variable is also a reference to it and needs to change too), you _could_ assign to list[:]. E.g.., l[:] = [x for x in l if x != [1,2]] (Used 'l' as a variable name because 'list' is the name of a builtin function) But I wouldn't do it that way, see AnonymousCowered's first suggestion.
The simplest answer is the list.remove method: &gt;&gt;&gt; l = [[1,2],[2,7]] &gt;&gt;&gt; l.remove([1,2]) &gt;&gt;&gt; l [[2, 7]] Note - this removes only one such item (the first), if you have duplicates, the later ones will be left. To remove all such, use one of the other methods. It also removes in-place (ie. modifies the list, rather than creating a copy of the list without the item)
Never use `if not instance:` when you mean `if instance is None:`. It's just a good style that makes you proof against stupid mistakes when you have a default parameter = None, then someone (you as well, later, I mean) passes an empty list which is a valid input entirely different from None. Also, your code doesn't work either.
SMS and mobile libraries, which talk to mobile devices.
Have you tried to run your "fix"? What's wrong with you people, programming is an applied discipline, it's not some fucking philosophy, you can't just sit and talk about it theoretically! The problem is with Python scoping rules. In your example both `is_constructed` and `instance` are considered to be local variables of the `getinstance` function (shadowing the outer variable). So you get the "use of unassigned variable" error. In his case he doesn't assign to the `instances` variable itself, so it remains in the outer scope and everything works well. However it surely does seem misleading to say the least, I'm going to try and fix it in Wikipedia: the variable should be called 'instance' instead of 'instances' and be a list, not a hash.
Actually I think you do not get how closures work. In the original `instances` is a dictionary held by a closure accessible by defined `getinstance`. This `dict` simply maps class to its instance, creating instance just once -- when mapping does not exist.
check out http://www.findbestopensource.com/tagged/text-editor and http://www.findbestopensource.com/tagged/ide
I think a dictionary is perfect. You have classes and class instances; if the class wasn't seen yet, you need to create and store an instance, if it was seen then you need to return the stored instance. A dictionary with classes as keys and instances as values is perfect.
This doesn't work for two reasons: firstly, since you assign to instance within getinstance(), that's a local variable that masks the one in singleton(), and you'll get a syntax error at the "if not instance:" line. Secondly, you try to store one single instance for all the classes that this may be used on, instead of one instance per class. Edit: and class decorators are in 2.6, aren't they? Function decorators were already in by then.
Do you realize that you have many instances of a dictionary (one for each @singleton invocation) and each holds (or not holds, yet) exactly one class instance? It's a very important thing to understand, using the dictionary called "`instances`", the "`cls not in instances`" check etc does everything that is possible to mislead and deceive the reader, by creating an impression that there's this single dictionary holding a lot of different instances. Which then leads to the subliminal confusion, discord and uncertainty regarding Python semantics in general, given that we receive "`cls`" as an outermost parameter _before_ we create a dictionary.
That slide with the horses looks more like it comes from Rails than Python. 
He didn't really specify that he wanted to do it in place, in all fairness he most likely didn't know what he wanted. Building a new list using filter may cost just slightly more than deleting in place, but none of the objects in the orginal are actually copied, and it will be garbage collected soon enough, so given the increased readability of filter I think it would be the best option.
how many servers does your overall setup require ?
This would work if you went in reverse order of the indexes though - remove a[1] THEN a[0].
Zope 2 supports automatically reloading "Products" (plugins) when changes are detected. You have to explicitly enable this on a per-product basis. I have no idea how they do it. It doesn't work 100%, but it works in most cases, and has been improved over the years. Perhaps something to look at.
"My daemon takes the desired response time in milliseconds as input" Does anyone enter a value other than zero?
it starts out with one server and adds more as necessary
but the original code doesn't 'store' the list. If you remove stored_list = some_list and print stored_list Are there still two lists in memory after the print some_list
Using the original: class A(object): def __init__(self): self.List = [] a = A() b = A() a.List is b.List Try it.
 False Your point is? EDIT: The original what? @singleton? Then `True`. Your point is?
Never mind. I was confused and now see your point about there being one "instances" dictionary per @singleton call.
This would probably be most useful on the back-end--something like a cloud architecture where there's a marginal cost per activated node.
I was just annoyed that it's not "instances" it should be named "instance" because only one instance will ever enter that dict. Now when we take that in to account - why use a dict at all?
I apologize.
Never remove or add to a sequence you're iterating over. You can change the values *but* adding and removing to it is a bad idea. When you need to add or remove from a sequence you're iterating over, iterate over a copy instead. You can create a copy of a list e.g., mylist[:]. You might also be interested in set. Using set is pretty straightforward especially for removing duplicates. Be aware set does not retain the sequence order. 
There are two lists in memory while the filtered list is being constructed and there continue to be two lists until the garbage collector runs and sees the orphaned first list.
I've looked over his description and although a new list which is identical to the old without the filtered items may have been acceptable, he definitely specified an in-place modification; he even uses the del operator in his description.
no the programmer was not confused. why did you think so?
I guess the dict would make it still work if you extend the class and want have instances of more than one subclass kicking around.
I know. I guess my post can be seen as a bad joke.
I'm not from any other web projects, and I feel plenty of animosity towards web2py. You can decide if the animosity is strange or not. A bit of explicit importing isn't a bad thing, even at the level of "from web2py import *". Non PEP-8 compliance needs to be justified. Requiring auto-incrementing ids on mapped tables has a bit of smell to it. Mdpierro is excited about the project, but his online presence... has some problematic aspects. There are also plenty of things to like about it as well. 
thanks for all the answers. I am all set.
FWIW, I got the joke, and thought it was funny :)
oh shit, I just got the "Gee" part. If I could upvote you twice, I would!
About time they did something useful.
This article is great for beginners to python!
Yeah, I should be thinking more about code before writing it. ;-)
It could be called `instances` if it was used outside the outer-function, so it may be a case of refactoring debris. And I'm sorry to say this, but you don't seem to grasp how closures work in Python. Where do you store `instance` in the code you presented? Nowhere, it goes away as soon as inner-function execution ends. Moreover it's only defined in a single conditional branch, if that branch does not execute -- it's undefined. More -- in Python 2.6 you can only change state of the closure contained objects (like container values or object members) but you can not reassign them (which changes variable scope to local), which means that you can not legally change `is_constructed` to `True` and indeed in 2.6 this is an exception worthy error. You need to wrap it in a `list` or other mutable object and then you can change the state of that field, but then when you try to call it more than once (when `is_constructed` got flipped) -- boom, `instance` referenced before assignment (as mentioned above) -- condition not met, branch not executed, `instance` not created and you don't store it anywhere. To be able to changed assignment of closure-contained variable in Python 3.x you need to declare it as `nonlocal` IIRC, can not check it now. And this is why there is a `dict` there. Savvy?
This. And I would rather use a `list(genexp)` like: some_list = list(item for item in some_list if not item == foo) As `item` will not be leaked out from this. Also using just a bare genexp may be a good (memory wise) choice if outbound set is big and needed in item-by-item fashion.
I have found nothing so far that can compete with vim + python.vim + pythoncomplete + vim-fugitive for git. rocks. 'nuff said.
What is slide?
Did you try [http://python.org/community/jobs/](http://python.org/community/jobs/)? We've had plenty of replies after posting there.
Can't you train one of those Java, C++, php, Ruby programmers on python? I'm a java programmer, but I was glad to learn python for one project. Doesn't reddit also hire non-python programmers and train them? I read that somewhere.
Rather than posting about it on LinkedIn and hoping for good people to seek you out, have you tried to turn the tables and go right at those people and seeking them out? Not being an employer or person who searches through people's job experience, it seems like LinkedIn does have the tools to do such a thing. Plenty of recruiters and companies are constantly searching the skills of people in my area and reaching out.
No. Wow; I didn't know this existed. Thanks a lot! I just submitted it.
What about python newsgroups?
You need to find people who see themselves as programmers, not just as Language X programmers. I've had four programming jobs so far, and started each of them learning a new language.
I'm not necessarily looking for Python experts, but if someone hasn't at least played with Python (or similar dynamic language like Ruby, Scala,...) on a weekend, I'm suspicious that they'll actually want to learn it and be good at it. 
I agree. How do I find you ? I get lots of resumes from people who have done Java or C++ for years. Almost none from people who use a lot of different languages and would be interested in picking up a new one.
Does anyone actually read newsgroups anymore ? I haven't opened slrn in 5? years. 
Well, I am in the Netherlands; so I'm probably not searching in quite the same way as people in Boston. My career so far is that way because of a number of coincedences; I'd actually love to program in Python but can't find companies using it in my region. I think that people with a more normal career would have fewer languages on their resumes, and when you have a lot of experience with one, you can probably make more money staying with that one (because most employers are looking for x years of experience with y for a "senior y programmer"). So it's natural that people end up with resumes that look that way. Do they actually tell you that they aren't interested in learning new languages?
I hadn't *read* the word slrn in 5 years
I've been finding and applying for Python jobs in SF this week on both of those sites, as well as the stackoverflow job board and similar. We're out there. Just make sure you say it's a big python gig. The way I filter the good jobs from the bad is by searching for 'python'. Almost always gets rid of the ASP, Java, etc. gigs.
Also, I sometimes look for programming jobs based on keywords that might indicate a nice environment to program in; like pair programming, or code reviews (the standard here seems to be that nobody ever actually looks at the code you wrote, nobody learns much from each other or is able to take something somebody else makes and immediately work with it). If you think your environment promotes good programming practice, that might be something that good programmers are looking for, and you should say something about it so that their search might find it. But I've never felt very typical, so I don't know how many other people do this, I'm Dutch, etc... Edit: also a line like "We're looking for people who are interested in using several languages, experience in languages like Ruby, Perl, Haskell et cetera are a plus." since people who are searching for those keywords may also be interested in your company. Edit 2: your craigslist ad doesn't even mention "programmer" or "developer"; it does have "software engineer", and otherwise will probably mostly be found by people looking for Java or Python, I suspect. 
You fly me from France, that's how !
A lot of people I've talked to aren't interested in learning Python. A lot of them have done a lot of Java or C++ and aren't interested in moving into Python. And I get a lot of people who have done Ruby/Rails or php, but don't really understand programming well. I've always believed it's better to learn a few different languages. At least in the states, it's true that you can make a little more and it's a little easier to get a job if you have many years of experience with a language, but I think you get stuck on a local maxima. The people who get really great jobs are great programmers, rather than "Java developers" or "C++ developers".
you can also try python web framework message boards etc.
If you can learn Java, C++, and Ruby, than you can learn python.
Sorry for offtopic. What do you consider as decent knowledge of Python? I'm not an IT guy, therefore I don't know great sorting algorithms, divide and conquer and such. Not totally tech ignorant - I have some automation and robotics background. I like the language and wrote some pet programs with it, but what would it take to consider me a Python programmer? Just curious.
Not the OP, but I've been a programmer professionally for 20 years, a python programmer for 10 and manage a group of developers at a satellite communications company. There's far less to be said for proficiency in any given language vs. a maturity that comes with having worked on many projects, small and large. Having seen, explored, used and implemented the basic programming patterns then integrated them into larger systems is something that you don't learn by reading a book or taking a class. I can pick up a new language in a couple of days and be fairly proficient in a few weeks. I'd be less interested in how many hours someone has in a particular language and more in their overall experience, design philosophy and methodology. 
&gt; If you can learn Java, C++, AND Ruby, than you can learn python. If you've learned Java, C++, OR Ruby you *could* be a one trick pony. Of course this also varies by your definition of *learned*. 
I don't *think* it would be appropriate to post a job to comp.lang.python (which is also a mailing list, and quite active). You could scan the archives to see though.
I'm curious as to where you're located. I'm in Silicon Valley, and Python is a lingua franca out here. It shocks me, when I hear that companies can't find Python programmers. :) I'd suggest looking at Google groups. The Python google group is really active as well as the Django group. I don't know what their policy is on job posting, but it might not hurt to try. I'd also suggest looking at bitbucket for Open Source developers that have released Python projects that you like. It might be worth while cold emailing those devs, and trying to hire them that way. You never know when someone is looking for a new gig. And, there's always buying self serve advertising on PyReddit. One of the advantages of going with a language like Python is that when people pick python to program in, they probably do it for love of the game, because there aren't tons of jobs nation wide that use Python. So, when you do find someone fluent in Python, you're probably selecting for a better programmer. But, the problem is also, that people proficient in Python are probably a bit harder to find.
^^ This. Highly recommended. 
I don't know about that. I have known a lot of developers. A fair number of them would love to work in something other than Java or C++. But, they spend so much of their life working, and all of that time working in only those languages. As a result, they don't have time to learn Python or Ruby or what have you unless the job calls for it. If you're putting in 60+ hours a week on code pushes, you may not want to touch a new language in your spare time -- especially if you actually have a life outside of work. Many many people stuck in statically typed language land long to try out other things.
&gt; It shocks me, when I hear that companies can't find Python programmers. :) You ended up addressing this later on in your post, but finding Python programmers and finding good Python programmers are two different stories (same with any language, really).
Unless they are specifically for jobs, this is probably not a great idea.
Link to the submission?
Apparently they make SuperPoke! and SuperPoke! Pets for Facebook. And some other stuff, but that's what jumped out at me while looking at their website. Their page title also suggests they produce "MySpace codes". 
Alright done. Sorry it took a while!
It has to be approved by their mods. I'll post it when it comes out. 
Yeah, you def don't want people who don't want to learn a language. If they didn't learn the language at home, because they wanted to, then you don't want them. Next best: learned on a job. Worst: learned as prereq at school.
Any chance you would be interested in someone who could work remotely?
I say go to completely offtopic, obscure-language IRC channels and ask there. The people in those places love programming for its own sake. Freenode, #erlang #scheme #lisp 
This is very encouraging to me as a senior student at my University. I was forced to learn/do everything in Java, but luckily a professor introduced me to Python during Office Hours. I fell in love with the language, but I was sad that there were not many companies in my area (San Diego) that used Python for something other than Web. Please keep hiring 6 months from now! :)
I wish there were more employers like you.
As a Python programmer, that's the first place I've looked for Python jobs. In fact, right now I work as a Django developer, and I found the job on the Python jobs board. Definitely a good resource that should get the attention of Python hackers.
I'm picking nits here, but Scala isn't a dynamic language; it actually features a pretty cool static typing system. ;)
Twitter worth a shot? http://twitter.com/asplake/statuses/16326172900
&gt;I was forced to learn/do everything in Java Seriously? My school let us use whatever pretty much after the two intro classes. In fact, I'd regularly switch up languages depending on what the assignment was. 
The craigslist posts that catch my eye put a stronger emphasis on quick-learners, intelligence, self-starters, and taking initiative. That's a situation in which I know I'm not going to be bound by project-specific dogma and it implies that I have room to grow in that position. For me at least, that's what I look for when job hunting.
My school does that too, but they point it out. For example, in my Data Structures class I used Python, but the teacher kept insisting that it was a scripting language and that I had an advantage. In a Neural Networks class, the teacher said something like "I would highly prefer if you use Java", which I interpreted as "I won't look at your code when I grade because I don't use Python." Perhaps I am assuming things, but it seemed to me that my teachers really wanted me to use Java, so I just used Java. The only class where I was forbidden to use Python or any other "scripting language" was Operating Systems.
At my school, it's usually up to the professor. After the first couple of courses, professors assume you know Java and gear their projects towards Java programming. Sometimes you'll be given a project that requires you to use some framework that the professor provides, then you're pretty much stuck using Java.
I am a remote programmer/consultant, I dedicate 20 hours a day working with Python at my Home@Office, web dev based on Django, Pylons or Web2py, also working with tk, wx and gtk desktop apps and shell scripts. this work can be done remotely?
When I started reading the headline I thought this was going to be something about New Jersey (Yes, I do know who Guido van Rossum is)
Google doesn't exactly require verification as long as you don't care about the money.
I'm in Boston, MA. Some of it may that I just don't know the right people and lists (I didn't know about http://python.org/community/jobs/ until this thread). And I agree that Python self-selects good programmers. It's not easy to find great Java programmers either...
It's a startup and we need everyone in the same room. But I'm intrigued by someone who spends 20 hours a day coding.
Hackers or programmers?
Both. The MIT sense of hackers: http://hacks.mit.edu/
When someone works 20 hours a day at your office it's time to start charging them rent.
In the last years I've been directly responsible for four people [my company](http://www.local.ch) hired and closely involved in hiring other developers. While we weren't looking for pure-python it was on a "nice to have" list. In fact we usually look for a type of profile similar to Scarblac's - it's not about specific language skills, it's about ability and desire to program. Some things that may help; - asking for a UNIX "power user" helps; typically this type of profile will strongly prefer some flavor of UNIX and see it as an essential tool in being productive. Doesn't need to be a sysadmin but if they can get into a discussion of how "grep | sort | uniq " compares to mapreduce, you're on to a winner. Also it helps send a message to potential candidates of where your interests lie and the type of tools you use. - explain why your startup rocks - how is it going to change the world? how will people working for it grow and develop? We have worked with one headhunter who succeeded in places our own job descriptions failed by doing far better at explaining why it was a great job. Personally I tend to avoid hyperbole but it's easy to take that too far and end up with a description that's simply boring. - see what others are doing - Google for example has some [great job profiles](http://www.google.ch/intl/en/jobs/zurich/swe/software-engineer-google-com-zurich/index.html) - anything from the text you can borrow? Some of the job descriptions [here](http://jobs.37signals.com/jobs/search?term=python) and [here](http://jobs.jsninja.com/) aren't bad, even if not python. - go to usergroups - not just python but the more general ones e.g. web mondays or [mobile mondays](http://www.momoboston.com/), where you may find programmers willing to learn python, given an interesting startup. Two of those I'm directly responsible for came via this path and it's also how I got my job. - try approaching people who aren't necessarily looking, but you found out about such as people blogging about python and happens to be in your area e.g. [these guys](http://liip.to/python_nr_boston) - especially [this one](http://twitter.com/bojanrajkovic/status/16341184736) who looks ready to jump right now. One of those I hired came via this path ( in fact their blog ended up on reddit ). Take the time to read their blog of course and any code they've put online. Even if they're not interested, they may know people who are Hope that helps. Good luck.
Great ideas. Thanks!
It's not always about money. Some people do not like to go back to using inferior languages even if they once used them in the past. Also, if you're trying to make C programmers into pythoneers they'll have to unlearn and relearn a lot of stuff. I know that from firsthand experience and from trying to explain Python to my old C programming buddies. Sometimes a programmer from a different language turns up on the usenet or mailing list and they almost never understand certain things at first. tl,dr programmers move from one language to the next for a reason and it is a really bad idea to try and make them go back. The only way is up.
As a recently graduated SE major who was looking for jobs at startups in SF, here were the places I was looking at: http://jobs.arstechnica.com/ http://jobs.joelonsoftware.com/ http://jobs.37signals.com/jobs http://ventureloop.com/ventureloop/home.php http://www.indeed.com http://www.dice.com http://www.startuply.com http://sfbay.craigslist.org/sfc/sof/ http://sfbay.craigslist.org/search/jjj/sfc?query=software%20engineer http://sfbay.craigslist.org/search/jjj/sfc?query=software%20developer http://sfbay.craigslist.org/search/jjj/sfc?query=programmer Joel/37Signals/Ars were probably my highest priority with CL coming right after that.
The slrn website's screenshots all have a photo of Neo as the background. Hah.
^ Python hacker willing to be your enslaved code monkey so long as I'll finally have money on which to live.
I do... and slrn is the bee's knees.
Might it be more accurate to say: "it supports a common subset of what SA does, that is useful for many projects. The reason for this subset (and restrictions) are to make it easier to do admin, form generation, and other 'magic', for the common cases people run into."
We pay and look forward to enslaving you! [http://www.startuply.com/Jobs/_Lead_Software_Engineer_Java_Python_2468_1.aspx](http://www.startuply.com/Jobs/_Lead_Software_Engineer_Java_Python_2468_1.aspx) 
Its easy to find shit Java programmers though. They seem to be pretty good at camouflaging themselves as great, too.
the irony is that when I wanted to learn Python I did a bit of research on job prospect...and it was quite dismal. I have come to the conclusion that companies above middle-size just don't use it. neverless I still forged ahead and learned on my own.
could WingIDE's code Auto-completion handle "from __future__ import division" now? the auto completion stops work after "from __future__ imp". no clue here.
Yeah, I don't know about that. Learning a new language takes a **long** time, and don't trust anyone who says otherwise. Transitioning from Python to Ruby, for example, means that you need to learn new ways of applying old patterns, what coding practices are encouraged, etc. People who say they can learn the language in a few days aren't people who want to hire. On a personal sidenote, I wouldn't want to spend too much time learning Ruby if I already knew Python (and vice versa), as I consider the two similar enough that my time would be better spent learning something different (e.g. Lisp, Erlang, Haskell, etc).
I've been getting into them as it seems like all the old and wise people haven't seemed to move onto anything new. IRC occasionally as well.
I tend to agree with most of this list below, in terms "knowledge of the language". I think after you've written enough code and become passionate about some PEP, do you really begin to understand the language and think in a "Python" kind of way. Warning, copy and paste list incoming, not my creation: Basic Python: ============= - do they know a tuple/list/dict when they see it? - when to use list vs. tuple vs. dict. vs. set - can they use list comprehensions (and know when not to abuse them? :) - can they use tuple unpacking for assignment? - string building...do they use "+=" or do they build a list and use .join() to recombine them efficiently - truth-value testing questions and observations (do they write "if x == True" or do they just write "if x") - basic file-processing (iterating over a file's lines) - basic understanding of exception handling Broader Basic Python: ===================== - questions about the standard library ("do you know if there's a standard library for doing X?", or "in which library would you find [common functionality Y]?") Most of these are related to the more common libraries such as os/os.path/sys/re/itertools - questions about iterators/generators - questions about map/reduce/sum/etc family of functions - questions about "special" methods (__&lt;foo&gt;__) More Advanced Python: ===================== - can they manipulate functions as first-class objects (Python makes it easy, but do they know how) - more detailed questions about the std. libraries (such as datetime/email/csv/zipfile/networking/optparse/unittest) - questions about testing (unittests/doctests) - questions about docstrings vs. comments, and the "Why" of them - more detailed questions about regular expressions - questions about mutability - keyword/list parameters and unpacked kwd args - questions about popular 3rd-party toolkits (BeautifulSoup, pyparsing...mostly if they know about them and when to use them, not so much about implementation details) - questions about monkey-patching - questions about PDB - questions about properties vs. getters/setters - questions about classmethods - questions about scope/name-resolution - use of lambda Python History: =============== - decorators added in which version? - "batteries included" SQL-capible DB in which version? - the difference between "class Foo" and "class Foo(object)" - questions from "import this" about pythonic code Python Resources: ================= - what do they know about various Python web frameworks (knowing a few names is usually good enough, though knowledge about the frameworks is a nice plus) such as Django, TurboGears, Zope, etc. - what do they know about various Python GUI frameworks and the pros/cons of them (tkinter, wx, pykde, etc) - where do they go with Python related questions (c.l.p, google, google-groups, etc) Other Process-releated things: ============================== - do they use revision control (RCS/CVS/Subversion/Mercurial/Git...anything but VSS) and know how to use it well - do they write automated tests for their code Touchy-feely things: ==================== - tabs vs. spaces, and their reasoning - reason for choosing Python - choice of editor/IDE
Those guys over at the python-dev mailing list really go into details. They'll have 100+ messages in a thread discussing minute details of a proposal. Stuff that most programmers wouldn't even think about.
I found a python job by posting my resume to craigslist. Sadly my professional experience didn't really have any Python; but I did all my side projects in it and it's my favorite language. This turned out to be good enough to get a Django job. I know this doesn't really answer your question but it seemed relevant as being from the opposite perspective.
Wisdom for the ages
I see you're (probably) using OpenStreetMap on your site which I think is great! Would you mind adding [attribution](http://wiki.openstreetmap.org/wiki/Legal_FAQ#I_would_like_to_use_OpenStreetMap_maps._How_should_I_credit_you.3F) to it?
Just hire a good programmer, he'll learn python in the blink of an eye.
Pay more?
Your final conclusion is correct. Coding it from scratch would be easier than making any non-trivial changes to OpenERP. The problem is that most Open Source ERPs suffer from the same problem: 1. Compiere and both of its main forks (Adempiere and OpenBravo) are a pain in the ass to configure as well (although Adempiere has a very helpful community). 2. ERP5 is quite weak by default and very eurocentric. 3. OpenTaps is allegedly decent but not well enough documented. 4. xTuple is a cruel, cruel joke. Multiply your OpenERP headaches by a thousand and still end up with a watered down system. My personal preference is Compiere but you can't really realize most of its benefits in the community edition (and setting it up takes weeks of clicking through a GUI, you can't really touch the code). Having said that if I had the time to learn a new ERP system I'd probably try out OpenTaps; the professional opinion of people I've worked with is that Compiere/OpenBravo and OpenTaps are the only open source contenders for mainstream ERP success.
&gt; Your final conclusion is correct. Coding it from scratch would be easier than making any non-trivial changes to OpenERP. Thank you. And many thanks for your recommendations for alternatives. I'll definitely check them out.
Looks like this still does not work. I've increased the priority on this item. We do hope to make a pass through missing completion cases soon.
Post here: http://news.ycombinator.com/item?id=1438505
We're not. What makes you think so ? 
Thanks! 
Hopefully you don't actually judge people based on knowing which version decorators were added in...
Well the map on your homepage intro image thingy looks suspiciously like OpenStreetMap.
Have you looked here: http://www.meetup.com/python-181/calendar/past_list/ or maybe here: http://www.meetup.com/find/?keywords=python&amp;submitButton=Search&amp;country=us&amp;zip=02138&amp;op=search&amp;jsCountry=us
It does; I never noticed that. We paid a designer to do the site and it looks like he ripped it off. Thanks for pointing it out. I'll add an attribution. UPDATE: I added an attribution and link. Thanks again. 
I submit the link and reddit tells me there is another post to the same link. I fucking searched and didn't find it. GODAMNIT REDDIT! You can find the other post *AFTER* I submit, but you can't say "Hey, there is another post to this URL, you sure you want to do this?" Oh no, just duplicate the thing. Other post: http://www.reddit.com/r/programming/comments/cg1ig/the_mod_python_project_is_now_officially_dead/ Edit: I see that the other post is in /r/programming where as I searched /r/python. Silly me. *sigh*
[In case you're wondering what ERP is](http://en.wikipedia.org/wiki/Enterprise_resource_planning "It has nothing to do with WoW")
Thanks. I went to the meetup last night and have [posted to the list](http://www.meetup.com/python-181/messages/10450426/).
Thanks for your post, confirming me I am not alone in this. I absolutely agree. When I faced similar case, I finished writing a solution covering only the most basic needs with Django.
Trying to find a job as a recent grad is a nightmare. Everyone wants minimum 3 years experience even for entry level jobs. Does anyone have any tips for finding a job even if you have no experience?
Has anyone used Apache OFBiz ( Open For Business ) ? It is java based and some real people seem to be using it for real.
The "right" way to submit to reddit is to paste the URL into the search box, and if not found you can post it directly from there. This works quite nicely, but is thoroughly unobvious :| Anyway, no harm done because now it's on the Python subreddit ;)
Happy to help. Mind you the alternatives aren't written in Python (which is the main thing OpenERP has going for it).
Build your own experience! Throughout the time while I was interviewing, I was working on a few random projects and posting all of my code on github. Whenever I would send out my cover letter, I would mention what I was currently working on and link them to the source code, along with my main github account. This worked well with startups, most would ask for code samples anyways if I didn't link them to something.
I'm currently also looking into the OpenERP fork Tryton. It seems to be much better documented and addresses many of the problems I've had with OpenERP. Still, I'm not gonna celebrate before I try it.
This is obviously more specific to /r/python than /r/programming. So I second the "no harm done" statement.
There should be a rule about posting something from your own blog.
I second this question. I'm also curious about this.
What would be the use cases for a _ _metaclass__ or decorator-based singleton in Python? Why not just use a module-level variable?
Why? I post on my blog so that people who need help can see it. Submitting to reddit is the best way to do that for the Python community.
Indeed, people will vote it up or down on it's own merits. There is no reason not to submit your own content.
I thought of that afterwards.
Isn't a list comprehension more pythonic than using filter? some_list = [i for i in some_list if i != item_to_delete]
ok I dont need talkback from master p's little brother.
Wait, can you explain how some_list = list(item for item in some_list if not item == foo) and some_list = [item for item in some_list if not item == foo] are different with regards to memory use? I would have assumed they would be exactly the same.
I said &gt;There should be a rule about posting something from your own blog. not &gt;There should be a rule against posting something from your own blog. take a chill pill bro
There is. From the [reddiquette](http://www.reddit.com/help/reddiquette): &gt;Feel free to post links to your own content (within reason). If that's all you ever post, and it always seems to get voted down instantly, take a good hard look in the mirror -- you just might be a spammer. [Google cache of reddiquette as it's not loading for me](http://webcache.googleusercontent.com/search?q=cache:egeePnUb1VYJ:www.reddit.com/help/reddiquette+reddiquette&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us)
Classic case of "If it seems to good to be true....."
ok so you make a valid point
I you have some remarks, you can discuss with the OpenERP Team and propose your ideas. Currently, we try to improve the next release 6.0 and this version will be released in Augustus. stephane@openerp.com
Sorry for calling you master p's little brother
I actually thought that was pretty funny. Thanks for the apology though :)
What is the right way to run django through apache, now?
http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/ &gt;Deploying Django with Apache and mod_wsgi is the recommended way to get Django into production.
The 'item' variable is still defined after the list comprehension, but not after the generator expression, which could be rewritten as (and is indistinguishable from) a generator function, i.e. a function that uses 'yield'.
Fun story. This comment just showed up in my inbox. 5 months later.
 &gt;&gt;&gt; a = [i for i in xrange(10)] &gt;&gt;&gt; i 9 &gt;&gt;&gt; b = list(j for j in xrange(10)) &gt;&gt;&gt; j Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; NameError: name 'j' is not defined Cool, thanks :)
Woohoo! Kylev, has any of the "competition" in the MySQL driver space for Python helped motivate you at all? I've been following [oursql](https://launchpad.net/oursql) and the [MySQL Connector/Python](https://launchpad.net/myconnpy) (myconnpy) loosely as alternatives to MySQLdb (largely due to being burned by leaks in 1.2.2). I'm curious if/how competition in the Python library space has helped progress (python-memcached and cmemcache come to mind)
gunicorn is also gaining popularity quickly.
take a look ERP5 also
MySQL? People still use that after Oracle bought Sun? Meh, I should switch to a novelty account, parade-rainer-onner. Congrats though.
Is there a schedule for the WingIDE 4.0 final release?
Is it thread safe yet?
The right way is, and has been for years, mod_wsgi.
congrats! You, sir, are a gentleman and a scholar.
Yay! More confusion in the landscape of MySQL adapters for Python! Why so many competing alternatives? I just got used to the idea that MySQLdb was deprecated for oursql and now there's a maintenance release? WTF?
This is the reason why I switched all my hobby scripts to ruby. Sequel gem rocks.
Thank spotter who made me realise why that is! Never had really consciously thought about it. Thing is, I always thought `[1,2] != [1,2]`, they must have changed that in 2.5 or 2.6 or so.
mod_python hasn't been the right way for quite some time. But they didn't put mod_wsgi as the right way in the docs until they got sick of people asking about mod_python related issues on the mailing list. They still have How to deploy django on mod_python in the docs without any warnings on the page. And some of the links on the django installation page lead to that page. The confusion that people get about this out of the docs is understandable. 
WHERE IS YOUR GOD NOW, SHARED HOSTING COMPANIES!?
I think you need a help of experts becoz we are using and implementing OpenERP for more than 5 clients till date with the customisation which is very exclusive to that particular industry they havent faced any kind of problems till date. Would be happy to help you mail me the problems on kadriazhar@gmail.com Thanks and regards Mohammed Azharuddin, http://blogs.bistasolutions.com
Thanks! I have been wondering about this kind of stuff, except using Hg instead of Git. 
mod_wsgi obviously. that was already the case for at least a year.
Those shared hosting companies who use a single Apache instance for all users should never have been using mod\_python in the first place. If they did, they are companies you don't want to deal with as it is an insecure platform for shared hosting where using single Apache instance for all users.
and, apparently, comes with one-horned ponies of its own
Why? Are you running threads in Python?
use the \\, luke
Helps to do development in Python, builds GUI and supports debuggers. 
We use it with SVN, works well.
It's now up; look for 'Cadio': [http://python.org/community/jobs/](http://python.org/community/jobs/)
The most widely used CPython runtime uses reference counting - the old list will be deleted as soon as its variable is set to something else, is deleted, or falls out of scope. The garbage collector is only used for reference cycles, so there is no delay if you don't put a reference to the list into itself. A list uses approximately 8 bytes per element, so unless your list has hundreds of millions of items in it, there is no need to delete items in place.
Do they have production ready Django backends? I bought a new Macbook and the pain involved in getting MySQLdb and PIL to work was unbelievable. I don't expect to be debugging gcc compile errors just to get Django set up for dev work. 
Well I use 2.4 at work, and [1,2] == [1,2] definitely evaluates as true.
And what pray tell do you use?
*Everything* development related that's not bundled as Apple sanctioned packages is a huge pain in the butt. I'm this close to installing Ubuntu.
Because DB-API is synchronous, IO bound applications typically spawn multiple threads to run database things pseudo-asynchronously. Just blocking for DB access gives enough room for many threads per core.
Postgres?
&gt; quick-learners, intelligence, self-starters, and taking initiative You do realize of course that these ''requirements" are simply bullshit. They carry zero information and don't imply anything at all about the job.. 
Fabric looks pretty sweet for general administration tasks. Does anyone know if it supports fanout (multiple simultaneous connections)? I've been using pdsh for mass system maintenance, but being able to write Python scripts would be nice.
Upvoted for codename "Rakia", and suggest 0.5 be codenamed "[Brennivín](http://en.wikipedia.org/wiki/Brenniv%C3%ADn)"
I wasn't really pushed by the "competition", though I think it is great. I was only added as a developer semi-recently and just lately given file-release rights. I mostly did the release because it was "time" and the forum posts were all the same problems that had been fixed in the 1.2 branch for a while. I think it is awesome that there are several choices for connecting to MySQL. I'm going to have another look around and see who I have to "beat" feature-wise to keep people using the stuff I work on.
It's not really competition, it's choice. Eventually some projects may get abandoned if they don't keep up with demands. With different projects run by different people, there really isn't any deprecation that happens; the least popular ones just go into disuse.
You'll basically need a connection per thread IIRC. The underlying libs and protocols aren't too thread-friendly in design. That leaves us pretty much at "threadsafety = 1". I'll be looking into improved thread safety via the "\_r" libs.
These aren't generally listed as requirements, just information on what type of person they are looking for. And obviously there's only so much you can tell from those few words, but it gives me something to help start narrowing down all the posts.
You should try 1.2.3. I fixed a couple setup.py and compile problems on OS X.
You should keep an eye on psycopg2, as an [Eventlet](http://eventlet.net) user I'm particularly fond of the [psycopg2 async support](http://initd.org/psycopg/docs/advanced.html#asynchronous-support) Given MySQLdb's basis in libmysqlclient this may be difficult though :-/
I was playing with bottle.py and was getting a little frustrated. I discovered Flask, got it hooked up with SqlAlchemy and am pretty happy.
Java ಠ_ಠ Unfortunately I know zero Java. :(
I switched from bottle to flask as well in a small project I am working on. I like flask :)
Actually by ,,bare genexp'' I meant the some_list = list(item for item in some_list if not item==foo) becoming: some_generator = (item for item in some_list if not item==foo) I thought that's obvious. Along with the memory advantage.
That's fine. As long as you don't have an aversion to learning some of it. As the description says, what I really care about is finding good programmers who can pick up new things we need them. 
No, of course not. Actually, I've been looking for a good excuse because I want to get into building Android apps. EDIT: Mind if I ask a few specific questions via PM?
damn no love for trolls
Who come up with the name Rakia and how?
Actualy, [I suggested](http://twitter.com/dekomote/status/16476366846) that name to Armin. He asked for proposals on twitter. Since his theme of exotic(strong) alcoholic beverages, I thought I suggest our own national drink. My father/grandfather makes rakia at home.
As always, great job. Flask is an awesome framework.
Sure. PM me or email me (my address is in the [job posting](http://www.startuply.com/Jobs/_Lead_Software_Engineer_Java_Python_2468_1.aspx) ).
Even though Cassandra can handle failed or disappearing nodes gracefully, I would think bringing nodes up and down like that would drastically degrade its performance since it would then be busy replicating data all the time. Or am I confused about how that works?
I was really hoping for a step by step tutorial that goes like this (along with a how-to video): 1. Find a pair of rabbits. 2. Give them immortality genes (this is important as rabbit life spans are otherwise finite and can mess with later results). 3. Put them in a cage -- play barry manilow. 4. Wait a month, count pairs of rabbits. 5. Record the number of pairs on a fresh line of paper. 6. Repeat 3 - 5.
I use TextMate -&gt; http://macromates.com/
cool tweet, bro
That would be OT for the python subreddit.
Mercurial?
Up the remuneration ;-)
I'm not so sure how the video is on topic for the python subreddit.
I thought that this was going to be on memoization, a very cool concept, and it turned out to be even cooler.
It's implemented in python.
Serious question: Would you consider it on-topic to submit screenshots of the latest Half-life to the C++ forum? I ask because I think python has reached a pretty high usage level, high enough that maybe "it's implemented in python" is no longer a good enough reason to consider something "about python". Edit: some other game may be more appropriate, I don't know what is "hot" in gaming these days, nor what languages any specific game uses. Feel free to substitute as necessary. 
You know, meta-arguments are booooring. You don't think it's on topic, vote it down. You don't like it, vote it down. You think it is on topic and you like it? vote it up. That's what the frigging arrows are there for. 
what is going on in that video?
And discussion is what comments are for
Sure. I just think meta-argument about something other that the link is boring, and downvote accordingly :-)
The latest Half-Life screenshots should be posted absolutely everywhere.
Easy dude, you're the one who started talking about stuff being on-topic for this subreddit. Don't get mad when I continue that discussion.
It seems to be implemented in ra-flip, "a programming language with balls", as they pun on their Google code site.
It was a joke reply to the bunny joke.
cool fibonacci, bro
Please read the thread. The answer to the joke was about something else again, the on-topicness of the original post. In short: someone made a joke, I replied with a joke, someone else replied with meta, I said meta is boring. It's quite simple, really.
Why is this guy being downvoted?
Curious. I wonder - was I downvoted: a) because people think I should be debugging gcc compile errors b) because MySQLdb and/or PIL's install process under OSX is actually dreamlike in it's simplicity and I'm a moron I'd still like to know if oursql and myconnpy are production-ready for use with Django but I don't think I'm going to get an answer in this thread ;-)
I think its a mistake to rule out a simple "git pull" -- it's pretty easy to set up read-only access to a git repository with gitosis's pretty fine-grained access control or just with git-daemon. Every repository on github relies on read-only git access.
this is awesome! cgi.FieldStorage does indeed suck. email.feedparser.FeedParser is actually a decent alternative in the standard library that can handle multi-part parsing. Nice to see something geared a little more specifically towards this problem though.
Excellent. Now how can I make a multipart/form-data HTTP POST request from Python? Side note: why are there three modules in the standard library for making HTTP requests, and why are they *all* opaque, poorly documented and incomplete?
Final releases of a new major release are more quality-driven than time driven. We do use the bleeding edge code daily ourselves so it tends to work fairly well even if still in beta. However since we've made some significant changes in some of the basic internals, we want to make sure we settle out any bugs in that before calling it final, and we have a few more features we might try to add in the meantime.
sudo env ARCHFLAGS='-arch i386' CC=gcc-4.0 (pip, easy_install) rfoo You need to have 10.3 support selected with the XCode install. 
Very nice package! I liked the video. Just this weekend, I've been spending some time to learn more about filesystems, so a created a small ext2 filesystem (mapping a file to a loop device), wrote some files, directories, symlinks, hard links into it and started writing a Python program which reads data from the exts filesystem. I can now list directories and read files. Looking at the source of PyFilesystem, there is no mentioning of ext2, ext3, reiser. Is this something you're planning to add, such that one can interact with "real" filesystems, introspect their metadata, etc. ?
Well, couldn't you just rewrite the checker to check plugins-common.py and if it has changed, then reload all plugins? Or, for that matter, check the mod time of everything in the plugins directory. If anything has changed, reload every plugin.
I would like to point out his user name as possible inspiration for how to express your gratitude ;)
I was looking for JUST this thing. Great work! Specially like how you're written a fuse layer so we're able to use it as a normal filesystem. It's so easy to see how it works, that after watching the little introduction video I already know that we're going to do this: Create an osfs and s3fs. And use mountfs to mount the osfs to /local/ and the s3fs to /s3/. Then use fuse to mount the whole thing on a local directory.
You'll get more interesting mazes by starting with a square and doing a random walk to adjacent squares not yet visited, breaking walls as you go until you can't go anywhere else. You then choose a square you have visited that has neighbours that have not been visited and repeat. You do this until all squares have been visited. The mazes it makes tend to have longer corridors, and are more difficult to solve
Its on pypi now, too: http://pypi.python.org/pypi/multipart
I did something like this for [omnisync](http://github.com/skorokithakis/omnisync), which is an rsync-like tool with pluggable filesystems. My original goal was to make a file synchroniser that would work across any filesystem, local or remote, like these guys did. Omnisync does support FTP, SSH and write to S3, but these guys' library is more polished, I think. I might refactor omnisync to use this and contribute a few modules in the process, great work!
There's no plugins-common.py I can assume exists, in theory any plugin could depend on any other plugin. And reloading everything turns out to be surprisingly tricky, because you get into the cases of plugin A depending on plugin B which depends on plugin C. If C changes, you have to reload A, B, and C, but not in that order. You have to reload them C, B, A or you'll get inconsistent results. And how do you know A depends on B or B depends on C? (answer: [modulefinder](http://docs.python.org/library/modulefinder.html)) Anyway, the solution I implemented is: 1. at startup, the program runs a hash of all the filenames and modtimes of every file in the scripts directory 2. every time it is called (though an external mechanism that isn't important), it recomputes the hash. 3. if the new hash doesn't match, the script exits with a statuscode that tells the wrapper script to restart it. It's heavy and slow, but my use case is such that this'll work just fine. 
However, email.feedparser.FeedParser is [broken on Py3k](http://www.wobsta.de/blog/py3k-cgi-issue8846), see [Issue 8846](http://bugs.python.org/issue8846) on the python issue tracker. But even with the suggested fixes cgi.FieldStorage still does everything in memory, which renders it impossible to do something serious. So thanks to defnull to initiate this project. Let's get it into [bottle](http://bottle.paws.de/) and start web development on Py3k.
&gt; Let's get it into [bottle](http://bottle.paws.de/) and start web development on Py3k. That exactly is the plan :)
I've seen some solutions use a simple manifest file for each plugin which lists its dependencies. Even something like this at the beginning of the plugin-example.py file could work: __plugin_dependencies__ = ["common.py", "plugin-B.py", "plugin-C.py"] It would be fairly easy to compute a full dependency tree based on such notation, and check what has been changed and what needs to be reloaded, no?
That'd be a good solution if my plugins were more complex (most are just 1 file with 5-6 lines!) and I wasn't worried about the metadata failing out of sync, but in my application they're fairly small and frequently updated. It'd lead to annoying-to-debug errors if the dependency list was out of sync with the code. I'm going with my reloading solution because it's the least likely to result in hard-to-debug behavior later on. 
That is...dumb? What was the reason behind this design choice? To emphasize the fact that bytes are not ASCII strings?
I've been developing with OpenERP for a couple of months now and I've had the dependency list fall out of sync only once, so I dunno. It doesn't happen as often as you might think. Still, good luck with your solution! :)
 cmiller@zippy:~$ python2.6 Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) [GCC 4.4.3] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; b" " ' ' &gt;&gt;&gt; type(b" ") &lt;type 'str'&gt; &gt;&gt;&gt; cmiller@zippy:~$ python3.0 Python 3.0.1+ (r301:69556, Apr 15 2009, 15:59:22) [GCC 4.3.3] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; b" " b' ' &gt;&gt;&gt; type(b" ") &lt;class 'bytes'&gt; &gt;&gt;&gt; b" "[0] 32 &gt;&gt;&gt; 
That still doesn't explain why \_\_cmp__ couldn't be implemented in a way that actually compares the contents, does it?
I don't think either Will or I have reading raw low-level filesystems on our agenda. It's more about higher-level access to things that are structured like filesystems. That said, I wouldn't oppose having it in the library...
Should `[1][0] == [1]`? 
Where did you see/come up with this idea? Do you know if there is any information on floating around on the internet? Thanks
What does a 'b' in front of a string mean?
It's showing that it's not a string but instead the Python 3k data type "bytes."
In this case they're being conceptualized as a string, so [1][0] is not some arbitrary value but actually a substring of length 1 taken from the 0 index. Since [1] is length 1, this is a substring of the entire length of the string; therefore, you'd expect them to be equal. While they're called byte strings, they're being treated like arrays.
bytes are a effectively a list of arbitrary numbers (0-255). This especially makes sense when trying to differentiate between binary data and unicode text. &gt;&gt;&gt; 'asdfasdfasdf'.decode('utf-16') u'\u7361\u6664\u7361\u6664\u7361\u6664' Lets say I just got the above buffer from a socket, the fact that it appears to my eyes as "asdfasdfasdf" is superficial and irrelevant if in fact it's a utf-16 encoded string. The arbitrariness of characters is represented in the byte array by the fact that each "character" is just a number... I hope that wasn't too confusing... probably a simpler and better explanation can be drawn up.
Python2 got us thinking that pulling 1 character out of a string returns a string. This is still true concerning unicode strings. Bytes otoh are just a list of ints... :\
Sorry, what I was getting at was the incongruity between specifying a bytes object as an ASCII string but then needing to use 8-bit numbers to inspect individual elements.
Objects of type 'bytes' are lists of bytes, and a single byte is not equal to a list of bytes, so this makes perfect sense. Strings are different things. When you take a substring of a string, you get another string, even if it is a one character substring, because the distinction of introducing a character type is just not worth the complication. The only confusing thing is that you can use string notation to create bytes. In the following sequence, the last item is only confusing if you compare to the first instead of to the second: &gt;&gt;&gt; " "[0] == " " True &gt;&gt;&gt; [32][0] == [32] False &gt;&gt;&gt; b" "[0] == b" " False 
Just because Python2 used to mixed bytes and string concept together. Doesn't mean it's the right way to do things. 
I'm just kinda annoyed I have to add this 'ord': some_bytes[0] == ord(b" ") 
This design decision makes sense, still, it's a gotcha to keep in mind. Now I wonder if 2to3 correctly handle this...
Hum, no! hsoft-pc:foo hsoft$ cat test.py s = b' ' print s[0] == s hsoft-pc:foo hsoft$ python2.6 test.py True hsoft-pc:foo hsoft$ 2to3 -w . RefactoringTool: Skipping implicit fixer: buffer RefactoringTool: Skipping implicit fixer: idioms RefactoringTool: Skipping implicit fixer: set_literal RefactoringTool: Skipping implicit fixer: ws_comma RefactoringTool: Refactored ./test.py --- ./test.py (original) +++ ./test.py (refactored) @@ -1,2 +1,2 @@ s = b' ' -print s[0] == s +print(s[0] == s) RefactoringTool: Files that were modified: RefactoringTool: ./test.py hsoft-pc:foo hsoft$ python3.1 test.py False hsoft-pc:foo hsoft$ Time to report a bug I guess!
Surely the whole singleton nightmare has taught us that special casing single instances is conceptually wrong? 
Any contributions to the project would be very welcome!
I concur. It's more the common denominator functionality we want to make available, rather than the low-level details.
Or do this (2x slower than your version): some_bytes[0:1] = b" " or (2x faster than your version): some_bytes[0] = 32 or (slighter faster again): some_bytes[0] = b' '[0] 
It's impossible to handle this robustly - x[i] needs to be adjusted depending on the type of x, which you can't know reliably in Python. 
BTW, not in 2.6: Python 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; b' '[0] == b' ' True &gt;&gt;&gt; 
No, because in 2.6 `type(b' ')` is `str`, it's not a list of bytes. Python 3's `bytes` is a completely different bucket o' filth, it's a list of integers in the range [0..255], the string-like syntax is convenience.
&gt; Sorry, what I was getting at was the incongruity between specifying a bytes object as an ASCII string but then needing to use 8-bit numbers to inspect individual elements. it's actually pretty nice, erlang has that and more (full pattern matching on binary data) and creating binary blobs using a string-like syntax makes it far less verbose. The issue here is the dichotomy between 2.x and 3.x, and getting users to understand that 3.x's bytes are not strings, as opposed to 2.x's
The difference of this with omnisync, as far as I saw, is that omnisync exposes a set of functionality available for each module (eg supports writes, chmods, etc). That way, I can support the minimal set of overlapping functionality when syncing. Does this do something similar? You might want to take a look at the omnisync modules, they're about 20 lines each because I wanted to implement the bare minimum in the FS modules so the actual program could do the rest. I even do tree traversal in the main program to spare the module from implementing it, I think. Regardless, I think there's a fair bit of overlap in the two projects, so they would probably be very useful to each other. 
I made my own maze stuff in python a while ago, and tried various generation methods. Generally found them from other peoples maze code and looking at AI stuff. You can use a similar method to solve the generated mazes.
I agree. This should be equivalent so choosing a different order in the loop for key in keys.
stupid question: what the hell is this for?
Test doubles. Say you are running tests against a system "S" that depends on a component "C". Also assume you have one of the following needs: * You want to isolate failures of system C from affecting your tests * C is very slow * Calling C has unwanted side effects What you might use to solve the problem is a system like the OP's link, which allows you to construct a "test double" which will pretend to be C, to a close enough degree that S can run on top of it during tests.
 &gt;&gt;&gt; type(b' ') &lt;class 'bytes'&gt; &gt;&gt;&gt; type(b' '[0]) &lt;class 'int'&gt; 
This is why you also need good test coverage before attempting to blindly use a helper tool like 2to3 to port your code.
As someone who has written and maintained mockers within big test suites, I must say that this is an easy to use/understand implementation. However, I will not use it. For primarily cultural reasons, my Python tests are completely different from all others and I've never mocked up an object.
Thank you. Unnecessarily complexifying things through higher orders of arbitrary abstraction leads to reduced usability, increased development time, more bugs, and less functionality. I'm glad someone here gets this. It's not that the actual data on the hardware is different, it's that the higher orders of mathematical conception are. That's great and all, unless you do this crap for a living and want to get things out the door.
I live in the Boston area and know a potential candidate. I'll pass this on.
Treating unicode "characters" as small strings is probably the easier than a datatype for code points. There are many control characters that modify the following ones, so a single code point may not make sense as text. Bytes however are just that: a list of *numbers*. The fact that some of these numbers have a shorthand in the form of an ASCII character is just an oddity. Everyone who thinks that there exist ASCII text strings should burn in internationalization-hell.
@defnull: if you would write some documentation for this, it might be a reasonable replacement for the existing cgi.FieldStorage. See http://bugs.python.org/issue4953
what exactly is a reddit virtual machine ?
what have you coded ?
Tonight + Me = some good flaskin'
There is a major difference: cgi.FieldStorage works on strings, multipart works with bytes. Still, [others did complain before](http://lucumr.pocoo.org/2010/5/25/wsgi-on-python-3) (probably after trying some absurd decode-encode dance like bottle was [suggesting](http://github.com/defnull/bottle/commit/5bbccc12b975b8e25f34719575f4c0bca2c82a3d) as well), that the cgi module uses the wrong data type.
AttributeError: 'module' object has no attribute 'read'
Thanks. Appreciate it.
We build a virtual machine that runs in both VMWare and VirtualBox with a pre-installed image running ubuntu with the [reddit codebase](http://code.reddit.com/) pre-installed and configured. 
get a room 
I have the whole basement 0_o
I was perfectly happy with a one-byte encoding and one-byte characters. It was only these UTF-8 bastards who threw me into to the internationalization hell that before then had just the Chinese and Japanese folks slowly simmering, and then ran back snickering into their dark corner, happy that they could still use their 7bit ASCII encoding without having to do anything. To be blatantly clear about it: the difficult part is about i18n hell is not to have a unicode string type, it's the fact that every single time you read or write a file, you have to know what encoding to write it with. (And the answer is not "always UTF-8", because people do care about the files and tools that predate UTF-8). This is, of course, a very foreign concept to most people in the US who think that it's cool to display Arabic or Chinese text in an editor but never actually need to operate on files that come from regions with non-ASCII encodings.
map(ord, s) Edit: but no, there are no methods AFAIK that work on this kind of list directly.
or maybe we need a way to specify a single character, like `'_'` in C, maybe we should have `c'_'` meaning `b'_'[0]`?
well played :)
so it's like an "empty reddit" , with code and no data ?
There's some pre-populated stub data (10 fake reddits and 10-20 fake submissions per, with a bunch of fake accounts). Basically everything needed to play with the code without having to worry about the setup or sysadmining. 
They're actually immutable byte arrays and *not* byte strings.
Not sure what you mean by "methods" (string methods?) but you can iterate over strings. Not particularly useful mind.
Ha, most programmers I know does a lot with bytes and just *thinks* they're working with characters. :-) Mind you, most of them *are* characters.
What's the singleton nightmare?
I would never expect [3] ==3 so why would I expect [" "]==b" " ???
Interesting: &gt;&gt;&gt; import antigravity &gt;&gt;&gt; antigravity.fly() Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'module' object has no attribute 'fly' &gt;&gt;&gt; dir(antigravity) ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'geohash', 'hashlib', 'webbrowser'] 
He specifically says the ``fly()`` function is on appengine, not in the CPython module.
Yes, but it also in python3(.1.2)
&gt;"The App Engine version is a little more elaborate than the Python 3 version: it defines a fly() function while can randomly do one of two things:" AppEngine's antigravity is not the same as CPython3.x's
Lolz, it's true that [3] != 3, but you would expect [3][0] == 3 right? Of course it is True. (In case you wondered about the downvotes.)
Yeah, well that's all fine and dandy until we get real antigravity devices and a module is implemented to control them. The naming conflicts alone are worth taking this out, but think about all of the servers in the App Engine farm flying away! It'll be chaos! Where will the web apps land? 
differences in json implementation?
People abusing Singletons as hiding place for global variables.
Where's the rest of the article?
And the downvotes are here, because: b" "[0] == b" " Is equiv to: [3][0] == [3] So OP is asking about special casing some bits to serve his particular taste of not liking the details.
Not a replacement (different API), but an alternative :) Documentation will be added as soon as I find the time. I'll first try to add some examples to the readme.
If they go too high, they might end up in the cloud!
Any one notice the background of the first panel of the XKCD? 
You should be using a list to store your values, like the following. values = [] for i in range(1,6): values.append(i + 5) # your something But we end up doing this so much in python there is a shorthand we use called [list comprehensions](http://docs.python.org/tutorial/datastructures.html#list-comprehensions): values = [i+5 for i in range(1, 6)]
why would you not use a list? x = [] for i in range(1,6+1): x.append(i) when done running x would contain 6 values 1,2,3,4,5,6 that could be accessed as x[0], x[1], x[2], x[3], x[4], x[5] I once saw some really weird code for inside of a class where you used self['name'] and that would right to the self.name and you could use self[stringVariable]=value EDIT: I covered my mistake up.
You could do it with a dictionary... x = {} for i in range(1,6): x[i] = 'something' print x[2] To actually create a new variable via declaration will require some trickery. `eval()` won't let you do assignments., so the following will *not* work: for i in range(1,6): eval('x%s = "something" ' % i) Edit: This *will* work. for i in range(1,6): co = compile("x%s = 'something'"%i, '&lt;string&gt;', 'exec') exec co print x5 - But, I cannot think of any situation where you would want to do something like this that wouldn't be better served with a list or dictionary. 
Reddit ate your code formatting. x = [] for i in range(1,6+1) x.append(i) 
This should get you started: for i in range(10): print i temp = "x%s = %i" % (i, i*10) exec temp print "x1: ", x1 print "x9: ", x9 Depending on what you want, exec() or eval() are the function you should look at. Be careful using them as it's easy to cause security issues. 
you can set object-variables with variable naming using setattr(object, name, value). e.g. class foo(object): def bar(self): for i in xrange(5): setattr(self, 'x%d' % i, 'meow') but i cannot think of any use-case where a simple list or dict wouldn't be the better way to go. 
`eval` is for returning a value only. `exec` (note that it's a keyword, like print, *not* a function) will execute pretty much any arbitrary python code you give it, including assignments. exec 'x%s = "something"' % (i,) With that said, this is absolutely the wrong way to do it, everyone else suggesting lists is correct. Use lists.
*eyeroll*
 for i in range(1, 6): locals()['x%d' % i] = i p.s. Whatever you do, please don't use this code.
Thank you. I figured if i said something about a subject i know little about someone would correct me and i would learn something.
It is not. Sorry. :)
 for x in range(1,6): locals()["x%d" % x] = x print x2 But...do you really want to do this? As other comments say, you might be better off using a list or dictionary.
Lists make way way way more sense. I am new to this. Thanks for the help everyone. hah I feel silly.
You're welcome!
omg what the hell is this ... worst kind of abuse of locals() ever
You'll love my alternative implementation then: for i in range(1, 6): setattr(__builtins__, 'x%d' % i, i) 
And won't even work in a local scope: &gt;&gt;&gt; def foo(): ... locals()['x'] = 42 ... return x ... &gt;&gt;&gt; foo() Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 3, in foo NameError: global name 'x' is not defined 
I should add that, like every one else is saying, there are generally better ways of doing this kind of stuff, like dictionaries or lists. However, sometimes exec/eval is a good solution. For example, you might have a web page with many optional fields that get generated dynamically, and you don't really know what you'll get when you process them. Exec can save you a lot of work, but at the cost of a potential security issue. I find I use exec/eval when I'm doing something in Python with data that comes from *outside* the system. If I don't know in advance what that will be, but I know what pattern the variable names will follow then I can usually make it work. Exec'ing the variables into existence makes the code a lot simpler, more compact, and easier to read so I think it's a worthwhile trade-off. So, with that said, it's very rare that you should use eval/exec. Generally it's a sign that you made a mistake somewhere and haven't thought the problem through.
Here's an example of doing parallel requests in [gevent](http://www.gevent.org) to get you started: [concurrent_download.py](http://bitbucket.org/denis/gevent/src/tip/examples/concurrent_download.py) And another AskReddit with similar question: [AskPython: What's your favorite event handling library?](http://www.reddit.com/r/Python/comments/bpup3/askpython_whats_your_favorite_event_handling/)
Good catch. If you change it to use globals() it works though &gt;&gt;&gt; def foo(): ... globals()['x'] = 42 ... return x &gt;&gt;&gt; foo() 42 
Was your previous language of choice VB, perchance?
or the way more disgusting version &gt;&gt;&gt; exec('x%d = 5' % 3) &gt;&gt;&gt; print x3 5 
You are a *terrible* person.
We have some similar but more thorough code [on reddit](http://code.reddit.com/browser/r2/r2/lib/utils/utils.py?rev=1d9b9fe72cfa0468d6ed4f6d4eee3955a53a9dba#L1260) that we use for estimating the progress of long tasks. It also tries to guess when the job will complete and is a mite more tuneable than this one
I've seen that particular XKCD comic many times and have yet to notice anything unusual about that background. Am I missing something?
And both of you forgot the colon! x = [] for i in range(1,6+1): x.append(i) There.
Thanks! I'm surprised people still find this post after 2 weeks, and since it was voted to 0 for some reason. 
Honest beginner’s mistake. Indeed, as far as I know, you never *have* to do something like that. There’s always a better alternative that you just haven’t thought of yet.
You could also just add an ``exec "None"`` into the frame. Then it at least would not create global variables. But why the hell are we even discussing that? :)
&gt;I find I use exec/eval when I'm doing something in Python with data that comes from outside the system. ... No amount of sanitisation should lead you to believe that you covered every possible edge case and security risk. &gt;If I don't know in advance what that will be, but I know what pattern the variable names will follow then I can usually make it work. Exec'ing the variables into existence makes the code a lot simpler, more compact, and easier to read so I think it's a worthwhile trade-off. Code cleanliness &lt; code security. Out of curiosity, do you have a code snippet that you claim to be a good use of exec?
Nice. I was trying to avoid using exec/eval, but that's a neat trick with exec. Hopefully I never have to actually use code like this :)
I have a feeling this guy knows about lists and stuff, but is just posing the question for general knowledge purposes. To answer your question I would use exec. for i in range(1, 7): exec('x%s = 0' % i) In action &gt;&gt;&gt; for i in range(1, 7): ... exec('x%s = 0' % i) ... &gt;&gt;&gt; x1 0 &gt;&gt;&gt; x2 0 EDIT: Seems he didn't know about lists. Oh well. I remember thinking this exact same thing when I first started 
No... that's not what he is asking. b' ' == [' '] and b' '[0] == ' ' in this system. I'm actually surprised that it looks different to other people. Strings are arrays of chars normally, and bytestrings here are arrays of bytes.
 #Setting multiple Variables for MrDrumdepum # Solution by Kingvash # Debugging by RockinRoel # Beautification by Gleapsite x = [] for i in range(1,6+1): x.append(i) 
These *can* be good, depending on the area: http://www.meetup.com/python-181/ 
Looks good, tag it for release.
&gt; No amount of sanitisation should lead you to believe that you covered every possible edge case and security risk. I didn't say it did. I said that sometimes it's a reasonable trade-off. &gt; Code cleanliness &lt; code security. It depends on the situation and what you are developing for... If it's for personal use then security isn't a big issue... If the code is going to be used by a small team or not open to the public then it might be a reasonable trade-off. &gt; Out of curiosity, do you have a code snippet that you claim to be a good use of exec? Nothing handy -- it's very rare that I use it. 
I approve of your attempts to learn. Now, when you say "declare a variable" what you're basically doing is allocating some memory and giving its address a name. You can then write data into that memory space, and read it out. The data has to fit inside that space. But, what if we have some input of an arbitrary length? Examples: the arguments passed in from the command line, a file on the HDD, a stream of data from the network etc. So we need to somehow dynamically scale the amount of memory our program is taking up. Enter Arrays (in python, lists and dictionaries). An array is a sequential grouping of variables, so you have the initial address, and then an offset. so basically array[3] will go to the initial address and then move over by three times the offset. This gives us the structure to group things together. Also, you can see why the first value in an array is at array[0]. But how does that help us with arbitrary length data? Well, through some backend memory allocation magic in python you can arbitrarily extend an array via array.append(somedata). So for some pseudo code of "declaring variables" within a loop: lines = [] #initialize "lines" as an array for line in file: #loop through the input file line by line lines.append(line) #Append each line to the array 
I guess it's a matter of use, as you noted. But in general, I've found any code developed for yourself/a small team/a closed environment **always** is modified and adapted for use by the public. Thus, I always try to write everything as if it was for public consumption from the very beginning.
 #Setting multiple Variables for MrDrumdepum v.0.3 # Solution by Kingvash # Debugging by RockinRoel # Beautification by Gleapsite # Validated by Klaruz # Released 1503EST June 22, 2010 x = [] for i in range(1,6+1): x.append(i) 
Is this the only way to create an address in memory that can take a file of any size?
Haha, the code right below that is awesome. class Hell(object): def __str__(self): return "boom!" class Bomb(object): @classmethod def __getattr__(cls, key): raise Hell() @classmethod def __setattr__(cls, key, val): raise Hell() @classmethod def __repr__(cls): raise Hell()
What license is this released under?
It's handy to see who is reading out a particular attribute, like which template expects that a wrapped Link has an "is_friends" property
If there's no dissent from the other contributors, public domain.
Honestly, this is the first submission I've seen in /r/python featuring "ReportLab".
No, you don't.
If a toddler walked up to you with a firecracker and asked for a match, I'll bet you'd light it for him. The OP may be dumb, but you're recklessly stupid.
It has a nice post Apocalypse feel, which is most likely when python will really shine.
nice.
can't you just do: NOVALUE = object() d = dict(a=1, b=2) if d.get('x', NOVALUE) is NOVALUE: print "BLARG!!!" I mean, he says that the Maybe class forces you to do value checking because you have a Maybe instance instead of what you want - but you still have to do that anyway. Also nothing about the pattern forces you to do the value checking. You can still omit it and start passing around Maybe instances instead of what you want. I don't see how this improves on passing around None, they both break. 
The reason this pattern exists is that programmers tend to forget that a variable may be set to None. This way you cannot forget it: you cannot treat maybe as your value or it will raise an error in the normal case, instead of raising an error in the special case when the value is None as before. That being said I find it too verbose to use in real life.
How to do this in AppEngine? I have a script: ----------------- import antigravity def main(): antigravity.fly() if __name__ == '__main__': main() ----------------- and an entry in app.yaml: - url: /antigravity script: antigravity.py but I got "Error: Server Error" trying to access /antigravity
You need to use [virtualenv](http://pypi.python.org/pypi/virtualenv) for that — it can create isolated python environment there you can install different versions of packages.
That's a quick and useful response! I'll look at it, thanks !
 &gt;&gt;&gt; x = {} &gt;&gt;&gt; for i in range(1, 7): ... x['x%d' % i] = "something" ... &gt;&gt;&gt; x {'x1': 'something', 'x2': 'something', 'x3': 'something', 'x4': 'something', 'x5': 'something', 'x6': 'something'}
How does this keep the output on the same line?
Yes. If you're using python and not using virtualenv, (I think) you're doing it wrong.
Maybe only makes sense with strict, static typing. 
First page and no comments! Edit: there is one now. 
Also note that it comes with pip built in, so you don't need easy_install anymore. pip install Pylons==1.0
 $ easy_install virtualenv $ easy_install pip $ virtualenv redditapp $ virtualenv otherapp $ cd redditapp $ pip install -E . pylons==0.9.6 #grab the version of pylons needed for reddit $ cd .. $ cd otherapp $ pip install -E . pylons #grab the latest version of pylons When you run `bin/python` (or `source bin/activate`) from the `redditapp` directory it will pick up the 0.9.6 version of pylons. Likewise the `otherapp`'s python interpreter will pick up the latest version of pylons. They are two separate environments so packages, dependencies, etc. won't interfere with each other.
got it, The script file name should not be the same as module antigravity
Strict, static typing is not even enough. It mostly makes sense in a language like Haskell where you can get a warning when you are not exhaustive in your pattern matching.
I didn't intend for it to be a high traffic subreddit, only another place for content aggregation
spam! why won't link to Google's announcement?
where do they get the codes ?
blogspam
Another plug for pip/virtualenv. Use easy_install to install virtualenv. Use easy_install to install pip. Never touch easy_install again. Install virtualenv wrapper: http://www.doughellmann.com/projects/virtualenvwrapper/ I find the following settings (in bash_profile) helpful: # python development export WORKON_HOME=$HOME/.virtualenvs # tab completion for virtualenvwrapper source /usr/local/bin/virtualenvwrapper_bashrc # PIP and virtualenv # make PIP not run unless there is an active virtualenv export PIP_REQUIRE_VIRTUALENV=true # PIP will use the current virtualenv and ignore any -E flags export PIP_RESPECT_VIRTUALENV=true # if PIP creates a virtualenv, make it in WORKON_HOME export PIP_VIRTUALENV_BASE=$WORKON_HOME With all that, say I want to work on a new project "foobaz" and I want it to be as blank a slate as I can get (not copy in the computer's site-packages) $ mkvirtualenv --clear --no-site-packages foobaz Now, to activate that environment. $ workon foobaz My python environment for the current shell session is now entirely wrapped in the new virtual environment. If I want a library, app, or whatever I just run: $ pip install "package" And pip will detect the current virtual environment and install the package into it, completely contained and isolated from the rest of the system. If I want a specific version, pip does that too. On our servers at work we have Django 1.1.1, so I can make my project match that: $ pip install django==1.1.1 At the end of my project I can then get a list of any packages that I've added just by running (in the project's virtualenv) $ pip freeze Awesome. Awesome awesome. Awesome.
Does this question come up with other programming languages? I see this asked for Python all the time. I can think of at least 4 stackoverflow questions that asked this exact question.
Like someone said above, virtualenv comes with pip, no need to install pip seperately. Also, once you get the hang of virtualenv, check out virtualenvwrapper.
i know the feeling
Please don't take that too serious. Just wanted to play around with the idea of doing something similar to the PyPI propaganda :)
Not when I installed it, but awesome. Also, uh, third line in my post and pretty much everything after involves virtualenvwrapper. I even included a big ol' full path link. Thanks for playing. Et cetera.
I always do.
F.A.P.P 
... might I recommend a different font for the URL to the site? ... looks like flask.poooo.org until you zoom in enough :/
Let us unite!
To be fair I really dig your submissions anyways. gst used to be a submitting machine, has he slacked recently?
Hahaha, best promotional picture since paniq's ubuntu wallpaper.
gst is a submitting machine. It's a bot.
The reddit devs said in some talk that it actually was a user.
That was their keynote at PyCon 2009 FTR ;)
He looks like a bot though. Check his comment history.
I'd pop the entire line into Google and take the first Wikipedia or Amazon link. I'd grep the source for "science fiction", "scfi", and "sci-fi". If a hit was returned, I'd toss it into the list of probable scifi books. If no Amazon or Wikipedia link appeared in the first several results, I'd put the book/author line into a file to be manually checked.
... yeah, but you're talking 200k searches. .... I *really* wouldn't be able to survive Google banhammering me. :) Does their search API allow for that kind of volume in a short term without paying $$ for it?
lol, I tried submitting something just now, but it's getting downvotes... http://www.reddit.com/r/Python/comments/cibuw/sjbrowns_guide_to_writing_games_with_python/
This is going outside the bounds of your question, so feel free to ignore the following. With 200K book entries and 4000 authors, it seems that comprehensiveness is what you are aiming at, not quality. Given yourgoal, why not scrap the hand-written list and find someone who has already made a list of science fiction books?
200k is a pretty decently sized data set. Python's built in types are great, but you might be hitting a limit. Moving the data into a database or index might be a good next step for you. [Whoosh](http://bitbucket.org/mchaput/whoosh/wiki/Home) is a nice pure-python search indexer. Try indexing your 200k entries, then repeat the process you were doing before, but instead of searching the dictionary, use a query on author names like "chunk1 AND chunk2". You should be able to parallelize the searches against the index as well. You could also try loading the data into a [MySQL](http://dev.mysql.com/doc/refman/5.0/en/fulltext-search.html) or [Postgres](http://www.postgresql.org/docs/8.3/static/textsearch.html) database and using their full text search capabilities. Again, you will be able to parallelize the searches. If you want to try a totally different approach, how about grabbing a [database dump](http://en.wikipedia.org/wiki/Wikipedia_database#English-language_Wikipedia) of Wikipedia and grab all entries in the [Science fiction novels](http://en.wikipedia.org/wiki/Category:Science_fiction_novels) and related categories?
In the world of scifi, there are definite "everybody recommends" authors (Asimov, Bova, Gibson, Clarke, etc.). Unfortunately the bulk of compiled lists are "These are the authors you should read" and tend to be rehashing of the same authors over and over. I have read / own a good portion of that set already. If anything, the list that would help me the most would be "Number of novels written by individual scifi authors", regardless of "best" / "best selling". I attempted to collect this list, actually, but gave up when the data I got from online book sellers was over-populated with "Audio CD" + "Paperback" + "Hardback" + "Reprint" variants of the same books over and over again (there is only one novel titled "Dune" but over 2 dozen forms of it) which lead to completely disproportionate counts. Then I tried the same with the Wikipedia entries for the novelists, only to find no standards for bibliography listing formats (ie. needed hand editing), incomplete lists, or sometimes lists altogether missing. I'd like to stick to this route and honestly, by the time I get home, the job will probably be done running - but I was more interested to see what people's approaches were to increasing speed more than anything.
I don't feel worthy
Who cares if it runs slow? You only have to do it one time a few minutes is not a problem. One thing you could do to speed up, if you really want to, is to make a C version of "edits1" which I presume is where you're spending most of the CPU time.
Hmm. That's not a bad suggestion for certain aspects of the search. There are definitely some good interfaces to SQL like SQLAlchemy. How, though, would this do some of the "error correction" (spell checking) that I've got above? .. Because I'm pretty sure that's where the bulk of my time is wasted. Straight dict lookups are pretty fast, even with 200k items.
No no, you don't understand - it's several minutes for a 1k item chunk ... but there are 200k total. I started the process before I left for work, so it should be done when I get home, but I estimated it was going to take several hours to run. This question isn't really about making the code work as much as it is about improving my process.
A good search index package (Solr, Lucene, Xapian, Sphinx, etc.) will provide those error correction features like spell checking, inexact matching, stemming, etc. Since you're using names, one error correction you might be able to use is the [soundex](http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_soundex) or [metaphone](http://en.wikipedia.org/wiki/Metaphone) algorithms to turn variations and slight misspellings of a name into a single result. edit: you mentioned SQLAlchemy, but in this case it won't help too much. The full-text search capabilities of each database are non-standard. You'll still have to write the queries by hand.
fuck it. programmers are so full of themselves: "this does not belong to programming, post it in technology" or "this does not belong to python, post it in programming..." and down votes for no fucking reason because we all know programmers are faithful to their tools. this has to stop!
I've been working on this application on and off for the past couple weeks. Built on PyQt, the app will pop-up system tray alerts when someone posts an answer or comment to a question you are tracking on StackOverflow (or the other StackExchange sites). I made this because when I would ask a question on SO, I found myself constantly refreshing and checking back to see if there had been anything posted. As you can guess, this is not very productive, especially at the office, so now I can just track the question and work on other things until someone responds. Please let me know if you have any question/problems/bugs or any other feedback -- and if you find the app useful, feel free to upvote it on the stackapps site (you can link your StackOverflow account to vote). Thanks!
Alright, I made my first submission -- long time reader :P http://www.reddit.com/r/Python/comments/cid6d/showpyddit_stacktracker_a_stackoverflow_api_tray/
Which step in your list is slow? Thrashing caused by huge memory usage?
You can write a generator function you call from the list comprehension. Something like: def mygen(g): for x in g: if h(x): break yield x [f(x) for x in mygen(g)] 
Thanks, that's true, and I should have mentioned it. But that is less concise (and less performant?) than what I'm proposing.
Or maybe more generally: def while_(gen, cond): for item in gen: if not cond(item): return yield item [x * 2 for x in gen(range(5), lambda x: x&lt;=2)] I personally like to avoid "until" or other conditional-inverting expressions; it's more intuitive to me if true always means keep going, false means stop. In terms of performance it would be slightly slower, as generally list comprehensions are faster than their function-using equivalents (map, filter). But not terribly slower.
itertools.takewhile may be what you are looking for.
[Itertools](http://docs.python.org/library/itertools.html) [x*2 for x in takewhile(lambda x:x&lt;=2, range(5)] Not as concise or pretty, but using a few helper functions instead of one-lining would fix that. edit: Except for the order of the args, this built-in matches ianb's `while_()` function.
I think the reason is that there are already so many ways to make lists that there is no need to add a new keyword for this. You could * roll the until condition into the for loop * use an if statement in the for loop, for example [x*2 for x in range(5) if x &lt; 3] * use map/filter with lambda * use a generator function (as liw suggests) or more generally whatever custom iterator you want * don't use list comprehensions, just build the list using append Python does not like to have multiple ways of doing the same thing.
Thanks, that's close enough to what I want...though I still think that `until` would be a nice addition to Python.
Thanks! :)
&gt;roll the until condition into the for loop How? &gt;use an if statement in the for loop, for example [x*2 for x in range(5) if x &lt; 3] This doesn't have the same functionality! &gt;use map/filter with lambda This does the same thing as your previous suggestion... &gt;use a generator function (as liw suggests) or more generally whatever custom iterator you want Big, slow, ugly. &gt;don't use list comprehensions, just build the list using append Big, slow, ugly.
So you are saying it takes several seconds to do the following core loop over 1000 lines: for line in input_list: chunk1, chunk2 = mysplit(mycleanup(line)) if "," in line: chunk2, chunk1 = chunk1, chunk2 if chunk1 in spelling_dict: print chunk1; continue elif chunk1 + "-" + chunk2 in spelling_dict: print chunk1 + "-" + chunk2; continue I guess we need to see your code in order to comment on it. What are you doing to check the spelling dict? Are you printing out the results? (Or doing something noobish like appending the string to a multi-line string accumulating the result? :) etc.
I noticed that calling sleep (-1) tends to either crash or freeze python. I first did this accidentally in a program when I was trying to manage how much time python spent on each iteration of a loop for a pygame application. It wasn't -1, it was some negative fraction, but it caused python to crash, complete with the windows error reporting message. Outside of that case, you can make python freeze just by calling: from time import sleep sleep(-1) No exception will be raised. What should I do?
I'm pretty sure the chunk of code that's the issue is this ( from the python spellchecker code at: http://norvig.com/spell-correct.html ) def edits1(word): splits = [(word[:i], word[i:]) for i in range(len(word) + 1)] deletes = [a + b[1:] for a, b in splits if b] transposes = [a + b[1] + b[0] + b[2:] for a, b in splits if len(b)&gt;1] replaces = [a + c + b[1:] for a, b in splits for c in alphabet if b] inserts = [a + c + b for a, b in splits for c in alphabet] return set(deletes + transposes + replaces + inserts) It tries to come up with every possible variant of the word I pass it, it looks like. This might be overkill. Passing "isaacasimov" to it results in 596 variants. An increase in length of 1 letter to the input string results in 646 variants. I think I see where the problem may lie, now. Thanks very much! I'll probably replace the edits1() function with something more sane, like: deletions, duplications, and transposes. Testing that with "isaacasimov" and I get 31 possibilities. Much better - a whole order of magnitude less, plus adding an additional character is much less of an increase. I'll try it out and report my findings :D **Edit:** Additional optimization - I'm just going to pre-compute the variants of the author names I want/have (the 4k name list) rather than do it on the 200k book list and figure if the author extracted from the book list entry doesn't match "as is" with my author name variants, then I don't care about it. **Double Edit:** *EUREKA!* By going this route, I processed all 200k books **in 3 seconds**. Plus, I think the results are considerably more accurate. It gave me 36k books out of the 200k that I can be pretty sure the authors are scifi authors :) Thank you again!
I'd really love to see more AskPython/Pyddit type posts. I feel like this would be a good place to generate python-related discussion because the programming-related subreddits tend to be less narcissistic than other programming-related forums. 
That much is obvious. But I think the crashing and freezing instead of throwing an exception is not very friendly.
&gt; How? For example, you could use "range(3)" instead of "range(5) until x &gt; 2", assuming I understand your until suggestion. This won't always work, but you can fall back to "big, slow, ugly" if you need to.
What version? Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) [GCC 4.0.1 (Apple Inc. build 5493)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; from time import sleep &gt;&gt;&gt; sleep(-1) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; IOError: [Errno 22] Invalid argument &gt;&gt;&gt; 
ok i was going to say "again?!" then i saw "RFC 3696 - Email and URL Validation". worth taking a look at.
FWIW, I'd use sqlite over MySQL etc here. Much easier to start using and should certainly perform well enough for your list.
PySqueezeCenter. Its on Google code. Typing on my android on the train, so you'll have to Google it. I recently got another developer making 2 development now including me. Does this qualify as a proper open source project?
There's a possibility it's platform-specific.
Same on 2.5.4 on Linux, no crash.
So much for my Python time machine.
Windows 7-64 here, and it hangs. I'm guessing that -1 is actually some huge float... Python 2.6.5 (r265:79096, Mar 19 2010, 18:02:59) [MSC v.1500 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import time &gt;&gt;&gt; time.sleep(-1) _
I'm guessing that's Python x64. Anyone running the 32-bit build on Windows?
Don't take this too serious? PHP MUST DIE a horrible and painful death. "-&gt;" has to stop. Can i print leaflets and distribute them on the streets?
This is beautiful...
it's just you
http://downforeveryoneorjustme.com/http://twistedmatrix.com/trac
I'm using Python 2.6 r:26, on Win 32, with a 32-bit Intel CPU.
Just tried it. Sleeps indefinitely. I think ubsershmekel is right and it's just treating it as an unsigned value (ie. treating it as sleep(0xffffffff)), or possibly just a difference in API (eg. on windows [Sleep](http://msdn.microsoft.com/en-us/library/ms686298%28VS.85%29.aspx) treats -1 as "Infinite", though I note that -2 has the same behaviour.). Can't reproduce a crash though.
import timetravel
You're probably not dominant enough.
Looks ad-parked to me. Nothing indicating any problems on the mailing list though.
This works ... why not just do this: [ x * 2 for x in range(5) if x &lt; 2] 
I believe this is Python 2.5+ (or maybe 2.6+... we only use 2.6).
I started [Moe](http://www.tipfy.org/wiki/moe/), a wiki system for App Engine. The page has a "contribute" section and we are filled with feature requests. :)
Font should be a blocky one to follow [Russian Constructivism](http://www.google.com/images?q=russian+constructivism) instead of [Wild West](http://www.google.com/images?q=wild+west+font). There, I said it.
I worked on adding asynchronous I/O to Python in a Google Summer of Code project, fully documented it, generated patches and tests but I couldn't get it pushed into core and I ran into some other things I had to take care. They didn't like my wording in some of the documentation and I couldn't get anyone to at least try the code. It was supposed to be pushed into 2.7 but I think it's too late at this point and I don't really have the motivation to try if it's not.
stackoverflow.com like Open Source Question and Answer system in Python 
There is a PEP explaining the idea of a "while" clause in a generator expression. http://www.python.org/dev/peps/pep-3142/
Works with Python 2.5.5 (r255:77872, Apr 21 2010, 08:40:04)
Huh? Does it really freeze? I'm on Python 25, and it works. In the repl: import time; time.sleep(1) [ctrl+c] Works. EDIT: ...downvotes? Wow, wtf.
get a google alert for "python", you're bound to find something interesting a couple times a day...
I've occasionally wanted such a thing too, though `while` may be better than `until` since you don't need a new keyword. ie your example would be `[x*2 for x in range(5) while x&lt;=2]` You can get close by a rather hacky method with generator comprehensions by abusing the fact that you can raise StopIteration to prevent further evaluation. Eg: &gt;&gt;&gt; def stop(): raise StopIteration() &gt;&gt;&gt; list( x*2 if x&lt;=2 else stop() for x in range(5)) [0, 2, 4] Though this is probably something better avoided.
This will still go through all elements in range(5), OP want to stop the loop after 3.
It won't do what he wants for all cases - the iteration should *terminate* after the first failing condition, but this will continue. There's no difference (bar performance) in that example because the condition never becomes true again, but if it were something like reading from a file until a record marker, or `[ x * 2 for x in itertools.cycle(range(5)) if x &lt;2 ]` you'd get different behaviour.
speed is the issue...
I'll test that too, thanks !
Umm too, thanks pypi for have the install...
I'm on exactly the same version. It's doesn't freeze or crash though; you can break out of it with ctrl-c. Same deal with negative float arguments.
I only had one suggestion: stop forcing to use colons unless they are really necessary. if something: # colon not really needed here. do_stuff() if something: do_stuff() # here ":" is really necessary. Sadly GvR doesn't seems to see this as a problem, so...
&gt;You wanted to know where ""I was just mugged while waiting in line for the iPhone 4."" (twitter.com) belongs. &gt;The predictorator declares that it belongs in: atheism :o EDIT: Man this is fun! &gt;You wanted to know where "it's because of my penis." (smbc-comics.com) belongs. &gt;The predictorator declares that it belongs in: circlejerk 
Half of "import this" tells you why this won't happen.
&gt;&gt;use an if statement in the for loop, for example [x*2 for x in range(5) if x &lt; 3] &gt;This doesn't have the same functionality! Could you show me that with an example? For some reason I am having problems getting where until and a an if condition there are any different. They are both pretty straight truth tests.
[According to GvR](http://markmail.org/message/ve7mwqxhci4pm6lw), the only line in "import this" that relates to this issue is "Readability counts". Quoting GvR: ---- if a==b print a versus if a==b: print a Notice how the second one is slightly easier to read. Notice further how a colon sets off the example in the second line of this FAQ answer; it's a standard usage in English. Finally, the colon makes it easier for editors with syntax highlighting. ---- "slightly easier to read"... I beg to differ, that's all. The argument about syntax highlighting is simply lame.
thanks for this, I'll defiantly be working thru this tutorial
The [moratorium](http://www.python.org/dev/peps/pep-3003/) will prevent any changes like this.
That's the only one he answered with. I'd say "explicit is better than implicit", "one and only one way to to do it", "bad idea if the implementation is hard to explain" are three off the top of my head that also apply, although the last one applies less about implementation and more about explaining to users that the colon wouldn't be necessary in all cases...which brings in the special case line of "import this".
How will this make the language better?
I'm glad you'll be doing it so defiantly, although I must ask against whom you will be defiant :)
Can you post your data files?
What I narrowed it down to was the spellchecker method - I really should have checked, in detail, what it was doing before just adopting it because it "magically" worked. In short - the edits1() function from http://norvig.com/spell-correct.html created 500+ variants of a potentially misspelled name in order to try and match all of those variants to a dict of properly spelled names. ... and then to make things worse, the edits1() function is run **twice**, once on the original word/name (resulting in 500+ variants) ... and then a second time ... on each of the variants! This results in over a quarter of a million possible variants of a potentially misspelled name in order to attempt to match it to a database of about 4k names - for a single entry in my book list. Now multiply that by 200k entries and you've got (literally) 50 billion name checks. This was total overkill. My inputs were nowhere near that bad, so I simplified the spellcheck process immensely - which resulted in the entire 200k book dataset being processed in like 3 seconds :p **Edit:** In defense of the edits1() / python spellchecker code, my adoption of it was likely a poor choice. Since edits1() is applied twice, the total variants of an initial word to check grow O(n^2) with an increase in string length. I was using this to check for misspelled names as a whole - which on average is 15+ characters and is *much* longer than your average English word which this product was geared towards.
I think you are looking for [PEP 3146](http://www.python.org/dev/peps/pep-3146/) (1/1/2010). &gt; We propose focusing our efforts on eventual merger with CPython's 3.x line of development. The BDFL has indicated that 2.7 is to be the final release of CPython's 2.x line of development [28], and since 2.7 alpha 1 has already been released [29], we have missed the window. Python 3 is the future, and that is where we will target our performance efforts. &gt; Because Google uses CPython 2.x internally, Unladen Swallow is based on CPython 2.6. We would need to port our compiler to Python 3; this would be done as patches are applied to the py3k-jit branch, so that the branch remains a consistent implementation of Python 3 at all times. &gt; We believe this approach will be minimally disruptive to the 3.2 or 3.3 release process while we iron out any remaining issues blocking final merger into py3k. Unladen Swallow maintains a punchlist of known issues needed before final merger ...
Ah, so your first suggestion is incorrect in the same way as your second and third.
Cool, that's basically equivalent to what I was suggesting (though I actually think `while` is superior to `until` for reasons of semantic consistency).
 &gt;&gt;&gt; [x for x in range(5) if x is not 3] [0, 1, 2, 4] &gt;&gt;&gt; [x for x in range(5) until x is 3] [0, 1, 2]
Submit a bug.
Did you pay attention to the topic here? The link leads to the list of "easy" Python bugs. This is not about improving the language grammar or anything intensive like that. The point was: Here are a bunch of easy bugs to fix, but there's a shortage of people to fix them. Help out and fix some easy bugs.
Thanks, I read that a while ago but hadn't realized it had been accepted. Either way its been six months, surely a lot has happened since then?
damn you spell check!
It would be really awesome if they set up a site like, http://speed.pypy.org/overview/. It is interesting to see the progress the project is making.
I wrote [preshrunk-cotton](http://code.google.com/p/preshrunk-cotton/), a tool to convert a directory structure containing text files written in Textile markup into a valid Windows Compressed Help (CHM) file. I needed to generate CHM files in a reliable manner without having to author HTML files for a project I have been pursuing. The result is a simplistic Python package that does exactly what I need, and I thought maybe one or two people might find it useful. The neatest part is that it doesn't use any Microsoft tooling. My build system for a Windows app is on a headless Debian box, and I didn't want to rig up any Wine nonsense just to execute Microsoft's help compiler. Instead, the package uses Free Pascal's *chmcmd*, and my code takes care of generating the messy inputs required by the Free Pascal tool. EDIT: I stink at putting links in reddit comments...
&gt; Last-Modified: 2010-03-17 00:36:46 +0100 (Wed, 17 Mar 2010) Yes. They are making some additions as time goes on, but not very many. I think there is still the desire, but a lot of milestones still need to be hit to make it feasible. If you track the progress of this PEP, however, you will see what agreements are made and a final timeline, if produced. 
 &gt;&gt;&gt; [x * 2 for x in range(5) until x &gt; 2] [0, 2, 4] &gt;&gt;&gt; [x * 2 for x in range(3)] [0, 2, 4] &gt;&gt;&gt; [x * 2 for x in range(5) if x &lt; 3] [0, 2, 4] &gt;&gt;&gt; map(lambda x: x*2, filter(lambda x: x &lt; 3, range(5))) [0, 2, 4] I hope this clarifies my earlier comments. I think takewhile is the closest you will get to your "until" idea, but note that takewhile is [equivalent to writing your own generator function](http://docs.python.org/dev/library/itertools.html?highlight=takewhile#itertools.takewhile).
Have you tried?
This great, now I can keep working games AND still be retarded!
Unladen Swallow is progressing somewhat on 2 fronts. First, there is still some ongoing development in the Unladen Swallow repository (on Google code), however there is also work merging that stuff into the py3k repository, in the py3k-jit branch at svn.python.org. It should be noted that there are no longer any Google employees working on Unladen Swallow full time.
The StackExchange API was just updated today, so you will need to get the newest builds (v0.4.1 or greater) if you want to test out the app!
How do you know so much about this? let me guess you are giving a presentation on it
&gt; It should be noted that there are no longer any Google employees working on Unladen Swallow full time That's a biggie :-( and may spell doom for the whole project. But how do you know it?
The SEC **requiring** Python for anything is one of the stupidest things I have ever heard of.
a) I'm a committer on Unladen Swallow. b) I generally try to stay abreast of everything going on in the Python world, I go through every commit to CPython, PyPy, and Unladen Swallow, and read more python-dev than I probably should. c) I'm in the Unladen Swallow IRC channel at almost all times. d) I'm giving a presentation at PyOhio on Unladen Swallow and PyPy.
http://www.reddit.com/r/Python/comments/ciec3/is_there_anything_like_a_list_comprehension/c0stib3 I think you're still mixing up the idea of filtering and termination. Filtering skips some items and keeps going; termination stops as soon as it sees the first invalid item.
I watched unladen-swallow/python-dev mailing lists pretty closely and didn't see any news about Unladen's funding or any other long term plans/changes/expectations (and project page is not updated that frequently) Could you point me to more information? Thanks! 
Could we get a copy of your presentation sometime?
I'll post 'em after I've written 'em!
Uhh, that bit might have been from IRC, sorry I don't do a particularly good job of remembering where the things I hear come from.
Thanks, and get off Reddit and do some writing!
Thanks, and sorry about yet another question ;-) What's your general feeling about the general health of Unladen project? It missed the initial 5X target big time and it has obviously slowed down lately (judging by traffic on the list). Any information/guesses/rumours? ;-)
* [Restler](http://code.google.com/p/restler/) - RESTful base controller for Pylons. * Dijkstar - Simple Dijkstra/A* (I wouldn't use this in a new project, but it was fun to write way back when). * [byCycle](http://project.bycycle.org/) - Bike trip planner. I really wish someone wanted to modernize this, but it's kind of a niche thing.
I understand the difference. My original answer was just to show that there are many ways to make lists without requiring an "until" keyword. Obviously the approach you take will depend on the needs of the problem (large data? expensive conditionals? side-effects? etc).
Nope, no real guesses. Except I think [PyPy is the Future](http://alexgaynor.net/2010/may/15/pypy-future-python/)
[gevent](http://www.gevent.org/) - concurrency library based on libevent/greenlet. To get involved, join the [mailing list](http://groups.google.com/group/gevent), clone the [repo](http://bitbucket.org/denis/gevent/src) and help solving some of the [issues](http://code.google.com/p/gevent/issues/list).
Why? The idea is not because Python is the best language in the world for finance but the SEC has to choose something that is reasonably machine independent/non-proprietary that allows a prototype implementation. If someone later wants to recode it in their favourite language, no problems. The Python implementation remains for checking. Choosing a single implementation language makes it easier to compare and contrast products. The "indentation is part of the language" thing at least forces some readability.
maybe pypy will be the answer? (i'm the author).
I understand the need for mock objects in a language like Java, but I'll need more convincing that such a facility is useful in Python. In Java, the mocking is done essentially to circumvent the type system, but there's no need with Python's duck typing. The first example is poor because it doesn't illustrate the advantage of Python Mocker above simply creating a class with the required 'hello()' method.
Yes, but what's wrong with writing your ''test double'' as a normal class rather than constructing it using this Mocker, and simply passing it in as appropriate?
im working on pida and anyvc as well as mercurial and pylib/py.test
Why was he using a weakrefdictionary for holding the listener references and not just a simple list?
They should not require any specific language, and I'm actually unsure why they require a programming language for what they are asking for (although I admit to not having read much of the surrounding sections where Python comes up). Every ABS firm would have to hire Python experts (not just 1-2 years experience) just for their SEC filings, even if they don't want to use Python anywhere else. The SEC would also have to hire Python experts in order to understand all of this code they'd be receiving. Sure, that's great in that it will provide jobs for Python experts...but I can't get behind this idea of mandating a programming language. Wait until the SEC reviews the code, doesn't understand it, then fines the firm due to a misunderstanding. Wait until there's a bug in the submitted code. It goes on and on and on and on... There has to be a better way to show what needs to be shown instead of using Python...and believe me, I really like Python a lot.
I kind of wonder about the number of down-votes without a single negative comment. Did I miss something? Is "not interesting for me" worth a down-vote in /r/Python?
You may find Learn Python The Hard Way useful. It's for non-programmers, so you might already know too much about programming to learn from it - see how you go. http://learnpythonthehardway.org Seeing as you're writing python, maaaaaybe you could host it on the Google App Engine? Take a look at it.
That's the most condescending programming tutorial I've ever seen.
Perhaps your point is in the wrong place because your point is a good one but we can probably all work with Python to a greater or lesser extent in the Python subreddit. The problem with many of these products is that the descriptions are not parseable and in some cases can be downright misleading. Here we are looking at some kind of standard XML description together with something to demonstrate where the money goes. The thing is that to write a basic Python program does not require 1-2 years experience. We are not talking a predictive model here, just the the actual cash flow model (the "waterfall") showing which tranches get how much money and when. If you are a half-competent programmer in another modern language, it is less than a month to learn to write that kind of reasonable Python. From the SEC viewpoint, one language makes it a lot easier to compare. Python may not be the best, but it has many advantages over other methods and the SEC only need to have experts in one language, not the hundreds. Perhaps we should have a standard financial product modelling language, that we all should learn before they let us loose on products, but there is none. I'm pretty sure that some product vendors would love to obfuscate if they could, well this stops them doing anything in Lisp, APL or Intel 4004 Assembler. Ultimately if you read the SEC PDF, it is really just about removing ambiguity from product descriptions and also making it a lot easier for the buyers of the products to evaluate them without relying solely on ratings agencies.
Also, why not register a instance's method in the event manager (like eventmanager.register(self.handleinput, KeyboardEvent)) rather than the instance itself like he does. That way you can get rid of the isinstance() garbage in the class itself and have an eventmanager that only sends events to objects that are requesting them.
[Dive Into Python](http://diveintopython.org/toc/index.html) is a pretty good tutorial. If you want a bit more practice, go to [Project Euler](http://projecteuler.net) and have a go at some of the challenges. They really make you think about how you write your code, whether your solution is optimal, whether it will end before the universe dies, things like that. :) Have fun!
The official [Python tutorial](http://docs.python.org/tutorial/) is quite good.
http://inventwithpython.com "Invent Your Own Computer Games with Python" is a free book that teaches complete beginners Python programming. It's different from other books in that it presents the complete source code to small games (Tic Tac Toe, Hangman, Othello, etc.) and then explains them line by line. I don't really find Learn Python the Hard Way too useful, and Dive Into Python is great (but only if you already know programming.) The official Python Tutorial is good too.
Yeah have some programming experience with c++,php,perl but that might help me with the syntax. Wow i knew about google app engine but for some reason i had the idea that it wasn't free and i have to say that looks like it would be a lot better option then using my shared hosting account so thanks :)
I contribute to: * Django: Currently mostly my GSOC project, but other stuff as well. * PyPy: Right now my pet project is to getting PyPy compiling under clang. And there's tons of other stuff, in varying degrees of completeness here: http://github.com/alex
That's Zed Shaw for you.
It's very informative and shorter than most introductory books; just enough exposure to see if you really want to do this Python thing, but the main reason I often recommend the official tutorial is because, well, it's authoritative. You get a taste of how the Python docs are written and are engaged in the Python programming culture right from the get-go.
I have a hard time judging its quality because I'm not learning to code for the first time from it, but I think its general asshattery makes it quite a terse, to-the-point guide to coding. It's certainly worth a look.
I wish submissions could be made "sticky". This questions hits the /r/python front-page a few times a month.
[you can start here](http://www.reddit.com/help/faqs/programming)
&gt;added three open source mathematics libraries (Numpy, Scipy, and Matplotlib) to its ActivePython Python distribution: ActivePython Business Edition, as well as its Enterprise Edition and OEM Edition, all available for Linux, Mac OSX and Windows operating systems. What about the **Community Edition**? 
Well I can scratch that one off my "todo someday" list. Now to replace it with "add networking support to gorilla.py".
How so? I didn't write the Python remake due to a lack of ideas on games, but more to compare how much easier and straightforward programming is these days with Python compared to decades ago.
If I knew C and had some free time, I'd probably give some bugs a try. At this point I'd probably cause more harm than anything.
I think its awesome. The great thing about gorillas.bas was that it inspired so many of us to get into programming. Would be more awesome if like gorillas this shipped with every pc to get people back into computing, instead of being iConsumers. Great job.
True, that.
Not sure. I suppose there are features of Mocker that will make this easier to do than it would be by hand.
yea you are probably right. go get your MBA
[Panda3D](http://www.panda3d.org/) is a free 3D game engine originally built by Disney and maintained by Carnegie Mellon's Entertainment Technology Center. It's been used for for years in their [Building Virtual Worlds](http://bvw.etc.cmu.edu/) class, and has been interfaced with all kinds of hardware, including magnetic trackers, joysticks, motion capture systems, Wii remotes, and many other devices that are useful for virtual reality. The engine is built in C++, but all game coding can be (and usually is) done in Python.
They have to provide some value in the Expensive Editions to keep people buying them. Community users can work out how to install the libraries themselves, or, better yet, just run apt-get install python python-numpy python-scipy python-matplotlib
The source code is made to be easily editable. For instance, you can change BAN\_COLOR (banana color) and EXPLOSION\_COLOR to brown so that it looks like the gorillas are throwing poo at each other. Or change BUILD_EXPLOSION\_SIZE to 100 to make atomic exploding bananas. Edit: Added the escape slash to the \_, thanks Ran4
That is pretty impressive. I can't wait to try this out on some programs I've written!
\\
I really enjoyed Mark Lutz' Learning Python: http://www.amazon.com/Learning-Python-Powerful-Object-Oriented-Programming/dp/0596158068/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1277492154&amp;sr=8-1
I currently code for: * [bottle](http://www.reddit.com/r/Python/comments/ba3rk): Single-file WSGI web framework (2.5+ and 3.x) * [multipart](http://www.reddit.com/r/Python/comments/ch4vb): Parser for multipart/form-data (2.5+ and 3.x) * [choice](http://github.com/defnull/choice): A multiple-choice game similar to "Choice of the Dragon" (started yesterday) 
one more try reddit, did Bill Gates write this game or is it a myth?
My friends and I grew up on this game. Great work!
Most people claim it's too slowly paced, though.
I'm busy programming Python, Javascript and PHP all day. I don't know C, I don't have any free time, and I'd probably waste the time of the people who are running the project by doing things that are stupid. I hope to help some day, though, since I do admire and am grateful to those who contribute to valuable open projects such as Python. I suppose from your comment that you are a hard working contributor to Python who just happens to have a rather lousy attitude, right?
I always forget the colons, too. But I like them, and understand why they are there. The language needs to have SOME grammar.
right
No, but he did write donkey.bas
&gt; Dive Into Python is a pretty good tutorial. There are, of course, [differences of opinion](http://oppugn.us/posts/1272050135.html) on this point.
Use the '-m' option to easy_install to install your applications, and have your applications declare their requirements, using either pkg\_resources.require(), or via install\_requires in their setup(). 
love this game
The [python-ogre](http://python-ogre.org/) bindings are pretty slick, imho. And like Panda3d (as FishSpeaker [mentioned](http://www.reddit.com/r/Python/comments/cj0iz/python_virtual_reality_what_are_the_best_free/c0swgbp)), the engine is in C++, so as far as speed goes, it's viable.
Seems pretty cool, I could have used something like this a few weeks ago. Is there any chance of incorporating this into CPython? Otherwise I can imagine this project stagnating pretty soon.
I would like to see its usefulness demonstrated by something other than trivial examples.
Seems to work well-- I tested it with a fairly intensive script I use from time to time with mostly static data. I already had some caching implemented, but I disabled it and have found that it works quite well with no fuss. Worth trying out.
Nothing. I don't keep a printer up there?
According to http://speed.pypy.org/comparison/, they are hardly slower on any benchmarks (ai, slowspitfire, and spambayes). Even on those they are barely slower. They must of merged a whole lot of code since that is a lot better than the results I saw last week.
The speed site was recently upgraded and apparently has some problems with the baseline.
 Kinda what I expected. touch: cannot touch `{a,a/b,a/b/c}/__init__.py': No such file or directory Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; ImportError: No module named a.b.c.d Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; ImportError: No module named a.b.c.d Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; ImportError: No module named a.b.c.d Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; ImportError: No module named a.b.c.d Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; ImportError: No module named a.b.c.d 
from http://thread.gmane.org/gmane.comp.python.announce/9564 . 
How could they miss the Python bindings for Quantlib?
http://www.reddit.com/r/Python/comments/cj17k/incpy_automatic_memoization_for_python/c0sxepb
thanks, fixed it. I could have sworn my sh symlink was to dash. Oh well.
Python has a jit'er? I thought it was strictly interpreted, maybe this is just in PyPy?
What.
Yup, it's just PyPy. That's part of what makes it cool. 
try unladen swallow
Well, Unladen Swallow (a branch of CPython) has a JIT compiler, but I don't know what it's release status is, the project page says there's a "Release2009Q3" but I don't know if that's more of a preview release or what. Ultimately it will be merged back into Python 3.x but I have no idea how far off that is. Anyways, if we assume "Release2009Q3" isn't a stable release, PyPy would be the only Python interpreter with a JIT in a stable release... As far as I know, that is. Jython, IronPython, and Pynie don't have JITs to my knowledge, and those are the most important *other* Python implementations in my opinion.
You are my hero, Al. That's really faithful! Is there sound that I can't hear, or is that missing? Now I just need to find the sun face logic. I couldn't understand the code as a 5 year old, but I did change a boolean so that the sun started surprised and became content once hammered with a banana. :D edit: &gt; Unfortunately there is no sound with this game. Oh. Damn! Maybe I'll have to add it. &gt;:3 edit 2: Is this game also CC licensed? I'd love to put it on github and start messin' with it, but after the Marak fiasco I think I learned to be half-careful. :)
Very cool, though I'm not sure I would consider a function which calls time.sleep() to be side-effect free.
Anyone know if PyPy will ever support Python 2.6 or 2.7 instead of 2.5.2?
I definitely want it to, so assuming I have time after the summer those sorts of features will gradually make it in, and I'm sure I'm not the only one who feels that way, although I don't know about anyone else... there *is* https://codespeak.net/viewvc/pypy/branch/2.6ish I don't think there's anything there but if you're interested you're welcome to work on it :-). After all, if you're a Python developer you can hack on PyPy, that's part of the beauty of being self hosted. I'd be happy to (try to) orient you, or any other interested party to the code base (I'm definitely not the *best* person to do so, but I know a fair amount).
I definitely want to work on it when I have time, is there any way to talk about this (and some clue to getting started)? As in, mailing list discussion? Any kind of tracker?
finally an end to racism.
Anyone know if this is [the same John Nagle](http://tools.ietf.org/html/rfc896)?
I'm glad :-). The first thing you should know is that the monstrosity at http://codespeak.net/pypy/trunk/pypy/doc/index.html has alot of information on it, though it's poorly organized imho. http://codespeak.net/mailman/listinfo/pypy-dev is the mailing list https://codespeak.net/issue/pypy-dev/ is the bug tracker and `svn co http://codespeak.net/svn/pypy/trunk pypy-trunk` will get you a clean checkout of trunk. (Note codespeak.net/viewvc is the web interface and codespeak.net/svn is for the actual repositories, so the 2.6 branch is at http://codespeak.net/svn/pypy/branch/2.6ish ) If you're lucky enough to be in the same timezone as one of the PyPy devs you can also talk to most of us on `irc.freenode.net #pypy` that's actually where I do most of my communication, though the channel is generally pretty slow.
here is a thread on the general python list: http://thread.gmane.org/gmane.comp.python.general/666351
Good you put explanation into link description, project page says nothing about what is it.
Psyco is a stable JIT for CPython and has been around for years.
Benjamin is working on Python 2.7 this summer. Relevant branch is http://codespeak.net/svn/pypy/branch/fast-forward/
Do they still sport PythonWin as the default Editor/REPL? Because it ranks up in the major suckage league.
What about Python 3? Or am I asking for too much?
DORK :) 
is there a reason that this is downmodded? is it spam?
the first two and the last one. I did not know, but imagined that messing with the filesystem confuses python, and I did not know the existence of imp. Nice.
maybe some people are allergic to the word "financial"? I for one find it quite instructive, both as an example for a simple use of matplotlib (where I'd usually pull out gnuplot and learn nothing new) and as an application example.
Could someone here explain the difference between memoization and a specializing JIT based on partial evaluation (i.e., what PyPy does)? Is it just that a PyPy-like jit compiler would try to avoid specializing to not just the type but also the complete function argument?
Of course, dunno how it slipped my mind, I guess I was just thinking built into the interpreter...
There is something strange in the latest speed.pypy.org benchmarks. About three days ago spambayes with pypy-jit was about 3x times slower than with python 2.6. Now it's only about 10-20% slower, yet I don't see any matching drops in the spambayes timeline. So which of the benchmarks is/was correct? (THe current one or the one of 3-days ago).. 
[The Python Tutorial](http://docs.python.org/tutorial/) is really very good. Been a pythonista for 12 years now, and I'm continually impressed with how well it covers the essential topics.
http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/index.htm This Intro to Programming from MIT is done in Python. 
Get a proper tool! I use WingIDE Pro and have found it to be the best of the ones I have tried. They also have a free version for education and hobbyists. My only gripe is that they don't support 64bit versions of Python on Windows. http://www.wingware.com/
**1.)** Come up with something you want to do with it. Need an idea? http://projecteuler.net/ **2.)** Then start here: http://www.sthurlow.com/python/lesson02/ **3.)** And always reference http://docs.python.org/ Oh. And when working with python, much of what you want to know can be instantly looked up if you're using the interactive interpreter just by typing "help" or "help(whatever)". 
I recommend both `rick_muller` and `pudquick`'s suggestions. In addition to projecteuler and the python tutorial, check out [/r/SomebodyMakeThis](http://www.reddit.com/r/somebodymakethis), there are tonnes of *practical* project ideas. As for learning python - depending on your learning style and thinking pattern, you might want to solidify your C/C++/low-level knowledge before moving onto the higher-level languages. Some people find it easier to program if they understand the fundamentals. Other people find it easier to learn if they're introduced gradually and allowed to learn "organically"/by discovery (I do/did). You just have to figure out which camp you're in (higher-&gt;lower or lower-&gt;higher) and do that!
Read this. It's a free book for people new to programming and explains Python by making games: "Invent Your Own Computer Games with Python" http://inventwithpython.com
[Try Mit](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/index.htm)
Thanks!
The Google Python Class is nice: http://code.google.com/edu/languages/google-python-class/ It won't teach you anything about OO but you get to know python and the assignments are nice.
This looks fantastic, thank you! 
Blog posts like this make me realize that some people completely misunderstand python.
Try interfacing to a USB device with [libhid](http://libhid.alioth.debian.org)/SWIG (python-hid package for ubuntu) (If you get strange assert errors try building libhid-svn) I got myself a spacepoint the other day. Working on making a python app for it. I've got a pyGTK framework and some sample PyOpenGL code. Just need to tie everything together. Or writing something that processes webcam video with [OpenCV](http://www.beechtreetech.com/dev/opencv-exercises-in-python.aspx)/PIL/numpy. You can use pygame for the ouput. Or even something simpler like a html parser (Beautiful Soup) For me Python is all about diving in. Think of it as a prototyping language. Just go for it. Dont be afraid to use the contributed modules.
Make something relatively complex in it, you'll be a pro in no time.
Maybe python completely misunderstands java
Something happened to the baseline. It's being investigated
Bonus: A study group started by a redditor at curiousreef. [Link](http://curiousreef.com/class/mit-opencourseware-600-introduction/)
http://diveintopython.org/
He had me with &gt; However, don't tell me you've never written a function that looks like: def my_magic_function(o): if isinstance(o, basestring): return my_magic_function(int(o)) elif isinstance(o, (int, long)): return cache[o] else: return o No. No I haven't. I also haven't killed any kittens recently. I am sad now though :(.
I know very little about Python, could you explain a little or point me in the right direction to help me understand what you mean?
Excellent free book [here](http://homepage.mac.com/s_lott/books/python.html)
PyPy is a monstrosity. 
I actually kinda liked it, what's the problem?
With duck typing you don't need to overload a function. Overloading makes sense in Java when you want one function to do the same-ish thing to different types. But overloading in Python can only be about doing different things to different types. At that point though, you should have different functions if you're using good design. 
Nice find 
This pattern comes up often enough in projects with a large-enough object model. As a naive, made-up example (man, I hope this doesn't blow up in my face), consider an ORM: you want a single function for adding filters. That filter method has to build (potentially) different SQL depending on the type of the parameters. Without multimethods, you need to write some ugly dispatching code like `my_magic_function`.
That has nothing to do with misunderstanding Python. There are valid use cases for this kind of thing. * http://dev.pocoo.org/projects/werkzeug/browser/werkzeug/datastructures.py#L25 - iterating over different kinds of collections * http://dev.pocoo.org/projects/werkzeug/browser/werkzeug/datastructures.py#L844 - overriding `__getitem__` And there are many more. Though I still write them by hand instead of using multimethod hacks :)
a friend of mine took GIS in school and he learned VB. poor guy. 
Program.
Some great resources about Test Driven Development: http://www.c2.com/cgi/wiki?TestDrivenDevelopment
I don't know of any references per se. But what I have done is to look at an application that you like/respect and study how they did it and emulate that. A good example IMO is http://meld.sourceforge.net.
In Russia good Pythonista can feed a family of four, if he/she IS really good. Avg. salary is 30-50 k/year after taxes.
HTTP? I find Django is great for making tool frontends.
56K USD a year in Israel.
Why do you say that?
In London probably around £40k. Perhaps £20k for an entry level web developer, with £60k+ for working in the finance industry. (Actually I know several Python programmers in the London financial industry on £100k+.)
Is it normal to quote salary rates after taxes in Russia? In the UK it is normal to quote gross (before taxes) rates. Is the 30-50k a dollar equivalent or in rubles?
Meld is fantastic. Really well architectured for extending the VCSs it supports, and uses Glade XML files to define the GUI. On top of that it's a really useful application. I haven't looked at the source (except for quickly just now) but Quod Libet music player is another GUI Python app that might be worth checking out.
I haven't had much luck in finding jobs looking specifically for python developers in Minneapolis, but then the place I used to work didn't have a focus on it and rather preferred that you knew a lot of a few languages: PHP, Perl, Java. I attempted to pythonize things a little but I'm not sure how successful it was. If anyone knows anything about that city, I'd be interested to know.
Interesting, but don't we have SHPAML for a while alr?
When going for a Python job, what sort of things about Python do most employers want to see? Currently there are no Python jobs in my area but making sure I can show evidence of such skills when they do arrive (or if I move) would be really handy.
Oh, sweet! Are you using it for web development or for something else?
I used to have a very similar feeling of uncertainty when trying to put together larger programs using “scripting” languages. I spent years mostly using languages like like C and C++ for bigger projects. These languages have very well established ideas for organising large code bases, such as: - starting execution at the `main` function; - writing code in modules that compile to object or library files that you link to make your complete program; - using header files to describe the interfaces to those modules; and - using `typedef` and `enum` and `class` and `struct` to define the types of data used by your program, etc. In a typical “scripting” language like Python, you don’t have most of those things by default. You don’t need any functions at all. You have no separate compilation step. You have no header files. Everything is dynamically typed. I think the mental shift that helped me was realising that you *can* still apply the same large-scale design ideas to a Python program, even if you don’t *have* to. For one thing, Python does have a useful module/import system, and it’s not just for hooking up other people’s libraries. For a larger project, you can still start by planning the basic architecture, and identifying your top-level modules accordingly: maybe MVC for a UI-driven tool, a pipeline of transforms for a data processing tool, whatever makes sense for your program. If the data and processing your program uses is non-trivial, then ideas like those in the book *Domain Driven Design* might be useful if you haven’t come across them before. Python also supports interfaces to some extent, via idioms like prefixing private names with an underscore, and defining `__all__` in `__init__.py` for each module to control what you are exporting *en masse* if someone imports your entire module. Combined with good documentation comments, this can serve a similar role to explicit interface descriptions or separate compilation with header files in other languages. Similarly, you don’t have to rely on tuples, dictionaries and the occasional named constant as your only data types. Python’s classes can be used on a small scale to define record types with invariants and clean interfaces just like any statically typed OO language. Although it’s not as explicit as those statically typed languages and you have no compile-time to check for correctness, you can still define sets of enum-style constants by assigning a `range(n)` call to a tuple of names. For testing, if you have a modular design, then you can use the if __name__ == '__main__': idiom to provide a starting point to run whatever automated tests apply in each module. Hook a module from your domain model into a unit testing framework, run a series of input files with known outputs through a step in your pipeline, whatever helps. I suppose this all comes down to the same basic idea: although things aren’t always as explicit in a dynamically typed language like Python, you can still employ systematic architecture, modular design, interfaces and abstractions, structured data, and all the other techniques you would use in a large-scale design in other languages. Just make consistent use of the idioms and documentation tools that Python supports.
I've also wondered about large application programming in python, what sort of resources are there out there?
By the hammer of Thor! £100k? Are they on some sort of "architect" positions? And what are they doing there? I thought that organizations that are paying this level of salaries must use some "enterprise" (read "humongous frameworks") software with Oracle, Java/.Net and armies of coders in cubicles. It would be interesting to learn about Python-based software in big finance.
No, offline I'm afraid. Still in the dark ages of PHP for the web aha.
Thank you! That was really helpful.
It depends on the area you're going to be working in. In web development Django is the thing to know - it's the most popular framework. In networking you should probably get to know Twisted. But it's all matter of experience, so I think you should firstly get to know Python itself, i.e. not write programs that look like they're copied from Java code (it's surprisingly frequent).
Just do it. Python lets you take a horrible idea, be incompetent in its implementation, and be well out the door before anyone is wise to who it is who is responsible for it all. It's absolutely brilliant.
Former asset manager here. Those I know who actually get north of 80kEUR in the finance industry (in London or Paris) tend to be more than just python developpers. Most have a track record and functional experience of some sort (quant/stat/pricing knowledge, financial modelling knowledge, financial systems/brokerage/orders expertise, etc.) It can pay very well but requires more than "just python". Haven't met a lot of them (C++ is king for most business critical systems) but there are some working on non-real-time apps or uing python to glue other apps together. If I were to work in finance as a developper, python wouldn't be my choice though. I'd pick C++ and get access to 30x more offers.
Consider the toolkit and your target audience. The built-in Tkinter, while not very sexy, is easy to program, needs no additional libraries and is supported wherever Python is. wxPython is a bit sexier and cross platform but requires additional packages. PyGTK is great and you can exploit GLADE to ease the GUI building but it requires yet more additional packages and I'm not sure how easy it is to get running on non-Unix platforms. As for techniques for GUI programming, learn about Model View Controller (MVC) pattern. There are mini-toolkits to help implement the pattern. For example http://sourceforge.net/apps/trac/pygtkmvc/wiki
Using it as enterprise glue, mostly.
wxPython for GUI programming. It's so easy, free, and cross-platform. http://www.wxpython.org/
I &lt;3 [PyGTK](http://www.pygtk.org/) and [Glade](http://glade.gnome.org/). Glade was the tool that enabled me to do my first serious GUI application, and then several trivial ones. I like GTK because it has great accessibility support, for equalizing the playing field for those with disabilities.
Guido has [a great post](http://www.artima.com/weblogs/viewpost.jsp?thread=4829) with recommendations on how to write "main" functions in Python. He starts with a common idiom and then moves on to suggest ways of cleanly handling command-line arguments and returning error levels to the shell. I think for a GUI-driven "full-blown application", you'll only need the first idiom minus arg-porocessing: import sys def main(): # Treat this as your entry point do_stuff() return 0 if __name__ == "__main__": sys.exit(main()) You'll note that tests are not kicked off in main(). I have observed several Python libraries that conduct tests if called directly, just to show you've installed them correctly. However, in an application you will want to find another way of testing. I strongly recommend [nose](http://somethingaboutorange.com/mrl/projects/nose/0.11.3/) for the application the poster has described. To seek out and run a test suite, you just run `nosetests` from the command line. Nose will look for anything with base class `unittest.TestCase` or methods with specific names (ie: begin with "test"). This lets you write tests, even including fixtures, within the modules you are testing but separates their execution from the normal code flow.
For testing, you may find [unittest](http://docs.python.org/library/unittest.html) and [nose](http://pypi.python.org/pypi/nose/0.11.3) useful. Since unittest is in the stdlib, you can just `import unittest`; as nose is hosted on PyPI, you can get away with `# easy_install nose` (official nose installation docs [here](http://somethingaboutorange.com/mrl/projects/nose/0.11.3/)). In my application, I have a tests/ subdirectory in each directory where there's enough code to test, containing files `test_foo.py`, `test_bar.py`, etc., to test the code in `foo.py`, `bar.py`, etc., in the above directory. From the top-level directory, I can simply run `$ nosetests` and it will automatically sniff out (ha!) all of my test scripts and run them automatically. It's basically the best thing I can do until Python 2.7 arrives with unittest2 and all its automated test-discovery glory. Nose also lets you do many, many useful things, including a wide variety of builtin plugins like [code coverage with coverage.py](http://somethingaboutorange.com/mrl/projects/nose/0.11.3/plugins/cover.html), [capturing of stdout during testing](http://somethingaboutorange.com/mrl/projects/nose/0.11.3/plugins/capture.html), or [integrated debugging using pdb](http://somethingaboutorange.com/mrl/projects/nose/0.11.3/plugins/debug.html), among others. (If you're unfamiliar with pdb, do yourself a favour and [check it out](http://docs.python.org/library/pdb.html) - it's in the stdlib, too. I love Python's stdlib.) Oh, and by the way - if you use pdb in conjuction with your unit tests, which you are running with nose, you may be confused until you realize that the stdout pdb uses is being captured by nose. The link about capturing stdout, above, will tell you how to turn that off so that you can still see the pdb output. I'm using PyQt on my current application, and I even have a commercial license for it. Fortunately, I don't need to modify core Qt code, so I can get away with the LGPL license on the Qt side. If you have any specific questions about PyQt, I'm certainly no expert, but I can endeavour to answer them.
Interpreter envy
I'm not sure why Python developers would be paid differently than, e.g., C++ developers. Where I'm working at, we hire software engineers. Some write C++, some C#, some Python -- we're all software engineers and aren't paid according to what language(s) they use.
Slightly less than a Java, C/C++, or .Net programmer in Austin, TX USA. There are a good number of Python positions but they are all test engineering, web development, or some kind of glue -- so you'll also need to know Java or some other language at least as well. On the other hand, the Java, C/C++, and .Net positions are for "serious business" applications like manufacturing, B2B apps, and heavy financial processing. IBM, Dell, and AMD have a big presence here and skew the salary figures by paying higher than average rates for the handful of skills they require, which is rarely Python. [Indeed.com salary comparison link](http://www.indeed.com/salary?q1=python&amp;l1=austin,+tx&amp;q2=java&amp;l2=austin,+tx&amp;q3=software+engineer&amp;l3=austin,+tx&amp;tm=1). That being said, the mainly-Python developers I know here are making $70 to 80k a year, which goes pretty far in Austin. Salary.com has an interesting cost-of-living tool that claims: &gt; The cost of living in New York, NY is 80.2% higher than in Austin, TX. Therefore, you would have to earn a salary of $135,150 to maintain your current standard of living [in Austin at $75,000]. &gt; Employers in New York, NY typically pay 23.7% more than employers in Austin, TX. Therefore, if you take the same type of job in the same type of company in New York, NY you are likely to earn $92,790.
Thanks I've found PyQt very beginner unfriendly... Particularly when it comes to the more complex aspects like TreeView/TreeModel. I had a go with it and it was so frustrating. I have even looked at Mark Summerfield's book, but that just confused the situation even more. I think it would be easy if you had experience with C++ Qt, but I don't. I feel similarly about PyGTK, it's probably great if you have used C GTK. None of these GUI toolkits are at all Pythonic. Tkinter is just awful looking (and I don't think Tile has fixed this) but at least its more Pythonic. I'm sure wxPython has problems as well, although I have had relatively good experiences with it in the past (although, it's not Pythonic either). In summary, Python is generally fun. GUI programming in Python seems to be borderline hell. Can you recommend any resources for PyQt?
This implementation is not what you want. The one you want is actually written by GvR. Link: http://svn.python.org/view/sandbox/trunk/overload/overloading.py?revision=43727&amp;view=markup 
A while ago I wrote an article on QTreeView/QAbstractItemModel that might help you: http://www.hardcoded.net/articles/using_qtreeview_with_qabstractitemmodel.htm I'd recommend PyQt over wx, the resulting code is *much* nicer looking. I don't know about GTK.
In silicon valley I've seen offers from 50k - 130k, the lower end of the spectrum being offset by a larger equity stake.
I use pyqt client side, pylons on server, mako templates, extjs.com for widgets... its neat, same calls for browser/js and pyqt. Application is for geotechincal testing, has mapping lots and lots and lots of files/reports/large pdf's Office staff use pyqt for server shares /background uploading etc, client use the http+extjs client. 
You sir are a legend in your own lunch box! This looks like the kind of thing that I have been looking for. I'll read it properly later. Thank you! P.S. You confirmed what I have been long suspecting, the model is ridiculously over-engineered.
Hm, developer is supposed to convert files manually. I don't find this idea too convenient. There's a couple of similar solutions (SHPAML, Pamela, Genshi), which can be used in Django in a more automatic way - basically you just have to use your own slightly modified render_to_response.
Oh Guido, u so crazy
What do you use for PDF generation? I've been wondering. There's ReportLab obviously and I think I saw that PyQt could basically do it (can handle HTML docs, can print to PDF etc.).
Good Python developers are far more common than good C++ developers. Greater supply means lower prices.
that's a smart company
I've been using Python in the last 2 companies I worked for, large scale projects. Python is lovely, but it can get ugly if you misuse it. The only way I can see of making a large scale project, is testing. Test everything. Better to do it test driven. If your python is not tested, it will break at run time at unexpected times, and it will be nasty. Other than that, small classes, small modules &amp; refactor often (shouldn't be a problem when everything is tested).
I have written a few fully installable self contained apps with pyqt the apps are quick and feel native. I use the Qt main loop and Qt threads. pyqt feels very natural to me. What feels so wrong? The code with some platform checks can be run on windows, os X, and Linux. here is a small list below of tools I use, I run windows in vmware on a macbook 17 The tools involved: pyqt 3 or pyqt 4 have a couple of vm's for each I wrote a few before pyqt 4 came out eric 4, gvim and I use git for my version control ZODB, for storage on a few projects. mysqldb, for database access I have used "pyro" for remote objects on a couple of apps pyserial, all my apps use barcode scanners and or Mag stripe readers py2exe on windows and py2app for os X inno to package for windows, a dmg for os X 
Here is a command line pdf generator based on qt4 webkit. http://code.google.com/p/wkhtmltopdf/
I've been doing Python full time in Vancouver, BC for two years and I'm making $60k/yr right now. I do mostly web app backed work using Django, twisted, google app engine, etc targeting clients in facebook, flash, or iPhone. I don't work in any other primary languages even though I was hired for both Python and PHP (thank god i dodged that bullet). We had a team of four originally, and the rest of them did java when I got there, and shortly after my boss announced we were switching entirely to Python, which made me the resident expert. I saw a lot of 'Python written like Java', which was extremely annoying. Eventually they were all let go and now I'm the sole developer. Feel free to ask questions. 
A bit of both.
begs the question - why?
Oh, I didn't notice the _convert files manually_ part. If that is the case, then it's a lot less useful than I thought... :(
Thanks, SHPAML looks interesting. However, I am not completely bought by the syntax. I mean, HAML seems to be really clean and nice to use...
I'm actually working on an application myself. I've used Tkinter in the past but I felt that its look was getting a bit dated. I'm now working with [wxPython](http://wiki.wxpython.org/How%20to%20Learn%20wxPython). There's a little bit of a learning curve but once you get past that hurdle you can go from design to realization in no time. If you download their whole package it includes a wealth of demos you can run with pretty much everything you'll probably want to use in your program. For reference material, I'd suggest going to a wxwidgets site (since wxPython is based off it) like [this one](http://docs.wxwidgets.org/stable/wx_contents.html). It's written as a C++ reference but all the functions and parameters should be the same as in wxPython.
i heard pythonistas make more than pythoneers.
useless, doesn't run lots of existing stuff (missing parts of std lib).
I have written functions like that. I don't like the way they look either. But sometimes it's nice when you want to make a `class` that you can initialize with either a `str` (regular initialization) or a `file` (read the string from the file) or even an instance of the class itself (and return a new copy). I don't like the look of the whole `if isinstance(...` chain either, so what would you suggest?
Just write it. Make mistakes. As I once read somewhere: "Programming is fun. It's like a ball game. If you're not having fun, you're probably spending too much time reading the rules and not enough time throwing the ball." The awesome thing about getting dirty and making mistakes is, you will have first hand experience in understanding *why* best practices are considered best practices.
[citation needed]?
You make it sound as if productivity is a bad quality for a programming language.
The idea is you can embed it in a bigger app to safely run "Python-ish" code. Think the same use cases as tcl and Lua, but a nicer language.
http://www.reddit.com/r/Python/comments/cjia6/pythoneers_of_reddit_what_is_the_average_yearly/c0t11q5
I got a few for you - assuming you were to apply for your job today, what type of python experience do you think your employer would be looking for? I only ask because, looking around at CS programs in Vancouver, python doesn't seem to be very popular option (UBC was all Java/C/C++ for me) - I now use Scipy/Numpy in developing for bioinformatics application, but, for the most part, I'm learning as I go and heavily influenced by sometimes already existing R code that offers similar functionality. I guess what I'm getting at is that it really doesn't seem like something I could claim as python experience down the road, should I ever want a more programming centric gig... 
What's in a name? A good developer by any other name would code as sweet.
[This is a popular one.](http://www.paulgraham.com/pypar.html)
It uses about 1MB of memory on my system to do a trivial program. The elf file is about 166kb, and the text section is 83kb. Not really the 64kb they promised, but not far off. I was hoping it would be small enough to run on an microcontroller, but with 1MB of memory allocated at the start of the program it is going to require some external DRAM which is not really desirable. So yes I can't fine a place where I would want to use it. 
That citation supports the opposite of the claim - that good Python developers get paid *more* than good C++ developers, by virtue of being more rare. Paul Graham is applying Bayesian reasoning to the problem: he's saying that the pool of *good* Java programmers is small and the pool of Java developers is large, therefore the chance that a given Java programmer is good is small. However, the overall pool of Python programmers is *smaller*, so even if the absolute number of *good* Python developers is the same, your chance that a given Python programmer is good is significantly higher.
In 90% of the cases you are better off building a web application instead of a regular one. That does mean you need to expose the app to everybody. It means you can expose to more than one user at the time. It also mean you use the browser to execute your client and you can design the interface using html+css. I use web2py for developing all kind of applications. The license allows you to zip your app with the web2py executable and distribute it as a single file that does not require installation. web2py runs practically everywhere. web2py includes a web based IDE, a http/https web server, a transaction safe relational database, a database abstraction layer, a web based database interface, a role based access control mechanism, a system to automatically build forms from database info. All packages in a single executable. Instructions for windows: 1) [download](http://web2py.com/examples/static/web2py_win.zip); 2) unzip; 3) click on web2py.exe to run. Instructions for Mac: 1) [download](http://web2py.com/examples/static/web2py_osc.zip); 2) unzip; 3) click on web2py.app to run. Instructions for Linux: 1) [download](http://web2py.com/examples/static/web2py_src.zip); 2) unzip; 3) type "python web2py.py" to run. [Here is what other users have to say about web2py](http://twitter.com/web2py) In those rare cases when the speed of the browser is not enough, for example for 3d games, than I would use pyQy or move to a different language completely.
what's GIS ?
True, the citation supports only the first part of the claim, not the part about lower prices. But I can't agree that the salary can be deducted from the proportion of good programmers in the pool. It's the same easier-to-find basis as with girls - it's easier to find a beautiful girl among the smart ones than a smart one among the beautiful. It's easier to find a good developer among Pythonistas, but it doesn't tell anything about salary. Once the number of Python job openings is exceeded by the number of developers, the salaries might start to fall.
Seriously; take a college course in computer science. Don't worry about the language they use because at the starting level you aerent learning languages but rather the science. Learn the concepts and the info you gain from Python DIY books and web sites will go a lot farther. Admittedly many can learn fine on their own but even more pick up bad habits or skew their understanding of concepts. By taking a well run course of education your fellow students an the professor ought to keep you on track. I personally don't have anything against self education but do have practcle experience. Basicly I majored in a technology course when attending college. I managed however to get in several quaters of computer science. That is far from a whole degree but that little bit of insight has gone a long way. It means that when I became exposed to Python and other languages nothing really threw me. Once you have the basics under your belt it is just a simple effort to learn the few new twist your next choosen language has. Dave 
Awesome. If for no other reason then [Phil Hassey](http://www.philhassey.com/blog/) is behind it, and he's awesome.
Multiple constructors using @classmethods if necessary. Look at the standard library (dict has the standard constructor and then an iterable constructor) or any of a number of other places (itertools.chain is another one that takes multiple arguments of different data types in different constructors). Instance / type checking just seems never to be the right way to go in python. edit: I'm using "constructor" in the liberal sense that we tend to use it in python in case it wasn't clear.
Anyone know of a list of exactly what tinypy doesn't support? I didn't see one in the docs (which are all C-oriented).
30k rubles is only ~1k USD, sweetie. They are not a third world country :-).
False dichotomy :)
Hey, Lua is nice! Take that back! Take that back now!
&gt; It's absolutely brilliant I don't think he was being sarcastic.
The meaning of begs the question is assuming the consequent. You used it as a would-be fancy way of saying raises the question.
For python on a microcontroller, have a look at [python-on-a-chip](http://code.google.com/p/python-on-a-chip/)
oh my, thanks for pointing that out. Coderanger answered pretty succinctly also (I think that's a fancy way of saying he answered with concise and precise brevity; to the point. if you will).
great another fucking template language?
I dislik wxwidgets. The UI always looks ugly.
&gt; Multiple constructors using `@classmethods` if necessary. how would you write that in actual Python code then? you can't declare `__init__` twice? &gt; Look at the standard library (`dict` has the standard constructor and &gt; then an iterable constructor) or any of a number of other places &gt; (`itertools.chain` is another one that takes multiple arguments of &gt; different data types in different constructors). Yes, so you can initialize a `dict` with a mapping, sequence or `**kwargs`, how would you write such a thing without having a whole bunch of `if` statements at the start of the constructor? (btw I couldn't find the source of `itertools.chain` if that's what you were implying, it's built-in or precompiled in some way I suppose) &gt; edit: I'm using "constructor" in the liberal sense that we tend to use &gt; it in python in case it wasn't clear. Sorry it's still not entirely clear. And I'm not exactly a Python n00b, but I have no idea what you mean by liberal sense of constructor as "we" tend to use it in Python. But I'm up for learning a new Python idiom any day, so please do tell! 
yes, overriding `__getitem__` is another place I have used this sort of thing. good catch on checking for both `int` and `long`, btw.
It's a very common "mistake" -- there was a huge argument on reddit the other day about whether it is in fact a mistake or just a change in meaning. In the end the best advice was to avoid the phrase because of the confusion, but I think awareness is best.
&gt; how would you write that in actual Python code then? you can't declare `__init__` twice? Yeah, you can only have one actual `__init__` method per class. Multiple constructors would be achieved with something like this (pardon the contrived case, I'm just copying and pasting from a module I have here already written and removing the irrelevant stuff): class date_range_query(object): def __init__(self, start_date=datetime.now()): &lt;initialize&gt; @classmethod def from_string(cls, start_date_string, **kwargs): start_date = datetime(start_date_string) return cls(start_date=start_date) That will take a `datetime` object in the default constructor and then an alternate constructor that takes a string just processes it into a `datetime` object and calls the main constructor (as a simple example). &gt; (btw I couldn't find the source of `itertools.chain` if that's what you were implying, it's built-in or precompiled in some way I suppose) Yeah, sorry. I just meant that they had separate constructors. One the default `itertools.chain()` and another `itertools.chain.from_iter()`. I'm sure pypy is getting around to implementing these or has done so already though, so they'd have code to look at. &gt; Sorry it's still not entirely clear. And I'm not exactly a Python n00b, but I have no idea what you mean by liberal sense of constructor as "we" tend to use it in Python. Sorry again :(. All I meant was that we call these constructors but they're not really constructors at all. Python has constructors *sort of* with `__new__` but even that isn't a real constructor if I remember correctly. `__init__` though is really an initializer. (So it's a stretch to call the above "multiple constructors" because it's just a method that's getting called on the class level but nevertheless it's just easier to call it that since essentially that's the role it plays.) Was a bit hasty writing my initial comment. Hope that's clearer (I'm really not far off being a n00b myself, only been hacking away for a year or two, so I'm sure I make loads of mistakes, but just from what I've picked up around here and there...)
I've compiled/used tinypy, and I think it's awesome and/or relatively useless. But, personally, I respect Phil Hassey for being a fellow pythonista and for creating a successful iOS app (Galcon). Now that Apple is temporarily suspending the interpreted code restrictions, I've been looking into using tinypy as an embedded scripting language. Right now, I'm thinking lua would be easier (more complete integration with C).
Geographic information systems/science. It's 3D modelling, spatial analysis and map making. 
I have a VB book at work, in my cubicle... It's propping up my monitor. 
Excellent, thanks!
:O You rock man!
I read it as an inclusive-or :)
Cool, thanks. It's certainly my mistake - I did mean it as in 'raises the question'. 
It's _alive_.
That's one meaning--the meaning that you and other pedants deem to be correct. Don't confuse that with being the only meaning. (I don't mean pedant as an insult.)
Making upwards of 70k/yr in the Washington DC area. I got hired as a Python developer with just shy of two years experience using Django. My job has nothing to do with Django, but it taught me enough about Python to feel confident applying to this position. Since others have talked about this stuff, I figure I might as well add my 0.02. I think the biggest thing you can really do to prepare for any programming job is learn how to solve problems. Don't just stop working and immediately ask someone more experienced than yourself. Do some digging of your own, take a stab or 10 at solving the problem on your own, and THEN consider talking to someone who is more experienced than you. If your first instinct is to just ask someone else, then interview questions that are not familiar to you will not be pretty. I mean, flipping a question back around on your interviewers will probably not land you the job. Don't be afraid to say "I don't know" when they ask a question you don't know the answer to. It shows that you're not just BS'ing your way through the interview (it's easy to smell). Just don't use that answer too much!
Might have been, but I wasn't reading it like a novel--only read every few days and read for main ideas...
wtf is this crap ?
A quick bit of advice with regards to python and GIS... (or well, ESRI's products, not GIS in general) Learn python the way that you're learning it now. (i.e. On your own, with general-purpose tutorials.) There's a good chance that your profs will teach you to treat python like it was visual basic. (VB used to be the de-facto scripting language for ArcGIS &amp; kin... A lot of people in the GIS world think in VB. The rest think in Java.) Learn enough to know what the "right" (i.e. pythonic) way of doing things is. If you're going into an ESRI-centric world you will be taught some very bad habits with regards to python programming. ESRI's example scripts are usually pretty horribly un-pythonic, and many folks in the ArcGIS world act like nothing in python other than ESRI's arcgisscripting module exists... (This is rapidly changing, though! There are plenty of good exceptions to this rule!) Try to resist getting bad habits beaten into your head. Use python as a general purpose language, not just a way of calling C functions without using C. /rant Edit: Oh, and learn numpy/scipy/matplotlib while you're at it... GIS is still half scientific computing. You'll likely find them rather useful! Also, GDAL's python wrappers are horribly annoying (far less pythonic than ESRI's stuff, actually), but they're necessary to read/write most common data formats. Later on, grit your teeth and learn GDAL. For the next few months, though, the tutorials everyone's suggested are a great start. Personally, I would start with the [official python tutorial](http://docs.python.org/tutorial/). Seeing as how no one's mentioned it, I thought I would. 
seems too small for some things not small enough for others. perhaps big micros like an avr32?
Think embedding Python AI scripts in an iPhone game (which I think is what this was originally written for, safe sandboxing for AIs in Galcon).