Along with the site /u/ListenSisster linked, you can use http://regex101.com to test your expressions against various inputs.
What do you mean by "connect"? Also, /r/learnpython is a better place for questions like this. 
Yes, I've been trying to find a compiler that does everything I want and since I can't find one, I thought it would be good to write one myself (I considered LLVM as well, but I want to be able to produce a small standalone code. My Java to Brew converter had to generate code that ran on devices with 100K including the graphics, so had to be compact. I'm not sure if it is worth making core library optional, so that a print("Hello world") could be just a few k in size, since I don't think that actually has a lot of benefit.
Life is hard
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
what do you mean by connect? if you mean you trying to compile/run python script from sublime text you can use, CTRL+B
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
The article said they used TripAdvisor, so you wouldn't even need flight data since the origin of most reviewers is mentioned in the review. ([example](https://www.tripadvisor.com/Hotel_Review-g186338-d188961-Reviews-Hotel_41-London_England.html#REVIEWS))
Can we please get a list of all of the related blog posts?
I believe the issue is not violating the terms of service. Not, how to violate it without getting caught.
I don't think I'd have much interest in having a new compiler, vs improving on the pre-existing tools It'd be another to-C compiler, piled on top of a long line of python-to-C compilers, of which there has been very few successes (like, 2, only one of which is production ready) Both nuitka and cython can work on unchanged code, with 100% compatibility with python. "but I want to make it so that you don't need to rewrite the program" but "the goal is not 100% compatibility" ("although it will be the same for the vast majority of cases" except ints? what.) so you are going to require rewrites regardless for any complex case - - - an AST transform to a python-like framework in C seems like it'd be somewhat better, if compatibility isn't an aim (like, you arn't even keeping int semantics, one of the main data types in python. You might as well break the rest of the eggs, no?)
From a look at their respective docs, [Airflow](https://github.com/apache/incubator-airflow) and [Luigi](https://github.com/spotify/luigi) are workflow schedulers/monitors. Specifically, the Airflow readme states: &gt; Airflow is not a data streaming solution. Tasks do not move data from one to the other (though tasks can exchange metadata!). Airflow is not in the Spark Streaming or Storm space, it is more comparable to Oozie or Azkaban. They are more like workflow frontends with support for various processing backends. `riko` is one such backend. However, I do plan to integrate with Airflow/Oozie/Luigi in the future to make it easier to design workflows. BTW, the comparison table is more towards the *beginning* of the readme :)... just in case you didn't notice.
Machine learning click bait, was disappointed. This is more just simply descriptive analysis.
Quite literally all of them support Python, including Notepad++. If you want something that does a bit more you'll want an IDE and there are a couple of good free ones - PyCharm if you want cross platform and Visual Studio Python Tools if you're on Windows. Both are excellent.
Hello from Hong Kong, I just started this group today so there aren't that many people in it just yet. Please feel free to join us, thanks!
Check out plotly. The plots are interactive, and their docs and examples cover pretty much everything you could hope for. 
I'm not sure if you meant that as a joke, but Pycharm is an IDE itself, no?
Contact the api authors?
I agree, remi is easy to use and just does the job most of the times :)
I don't think you're going to convince many people here that it's a great idea just by taking about it. If you think it's a great idea, *just make it* and it will be judged on its own merits. Realistically, even if it isn't the next PyPy, you could have some ideas that other teams are interested in.
Then yea the only recourse is to try to get in touch with a human on their end and convince them your cause is worthwhile :-/ maybe with some investigation/social engineering you could find out an industry convention they go to or something similar.
Correct. 
&gt; = assigns a value to a variable, the right side is assigned to the left side Correct. &gt; "open" opens up the file you tell it to to see it's contents Almost. `open` opens a file for reading, and returns a *file object*. File objects have methods that allow you to perform operations on them. &gt; the . gives a file a command No. `.` gets a member from an object; if that member is a function (i.e., a method), it also does some magic to bind the object itself to the first function argument (by convention named `self`). This means that `file.read` gets the `read` property from the object `file`, and binds `file` to the first argument. Here's another hint: since `.` gets the property on its immediate right from the object on its left, you can write things more complex than just a variable name there.
Excellent article. Summarizes something i.had noticed butnot thought about. 
You can write anything you want in a ToS, but that doesn't make it legally enforceable. The concept of "fair use" is expressively for situations where the original author does not want to give you permission to use something.
They also recently open sourced their js so you can host plotly graphs without having to send it to their servers first. I also think plotly looks the best aesthetically but lacks the versatility of matplot.
In my view, each library has its own distinct purpose: * matplotlib is for basic plotting -- bars, pies, lines, scatter plots, etc. * Seaborn is for statistical visualization -- use it if you're creating heatmaps or somehow summarizing your data and still want to show the distribution of your data * Bokeh is for interactive visualization -- if your data is so complex (or you haven't yet found the "message" in your data), then use Bokeh to create interactive visualizations that will allow your viewers to explore the data themselves
Figured it out. Shoot bullet at ground, then shoot more bullets at the ground until it matches the first bullet: from random import SystemRandom as SR # # MAXBITS = 16 MAXVALUE = 65536 # # Calculate the Hamming weight of integer x def calchw ( x ) : if type(x) != int : return -1 ret = 0 for i in bin(x) : if i == '1' : ret += 1 return ret # # Calculate the sum of a list x of integers def calclsum ( x ) : if type(x) != list or type(x[0]) != int : return -1 ret = 0 for i in x : ret = ret + i return ret # # Return a random x bit integer def randint ( x ) : if type(x) != int : return -1 return int(SR().getrandbits(x)) # # Return a 'fair choice' from x possible choices def fairch ( x ) : if type(x) != int : return -1 if x &lt;= 1 : return 0 y = [1&lt;&lt;i for i in range(1,MAXBITS+1)] # hardcoded to 16 bit max for i in range(len(y)) : if x &lt; y[i] : bits = i break else : bits = 0 if bits == 0 : return -2, 'Possible choices too large.' while 1 : z = randint(bits) if z &lt; (x - 1) : return z # # Returns a list of all hamming weights of the field limited by integer x def makehwls ( x ) : if type(x) != int or x &gt; MAXVALUE : return -1 return [ calchw(i) for i in range(x)] # # Returns a dict of all values up to integer x, by hamming weight def makehwdc ( x ) : if type(x) != int or x &gt; MAXVALUE : return -1 ret = {} for i in range(0,MAXBITS+1) : ret[i] = [] for i in range(x) : ret[calchw(i)].append(i) return ret # # Return an x bit list of integers of blocksz length from source list srcls def makepiece ( x, blocksz, srcls ) : if type(x) != int or type(blocksz) != int or type(srcls) != list : return -1 ret = [] for i in range(blocksz) : y = srcls[fairch(len(srcls))] ret.append(y) srcls.remove(y) return ret # # Returns a dict of makepiece lists arranged by Hamming weight def makempdc ( x, blocksz, srcls, variance=4 ) : if type(x) != int or type(blocksz) != int or type(srcls) != list : return -1 pieces = len(srcls) / blocksz hwavg = calclsum(srcls) / len(srcls) blahw = hwavg * blocksz hwmax = blahw + variance hwmin = blahw - variance w = 0 ret = {} for i in range(hwmin, hwmax + 1) : ret[ i ] = [] while pieces != 0 : for i in range(pieces) : print i if i &amp; 1 == 0 : # Even: Random within variance while 1 : y = srcls[::] z = makepiece(x, blocksz, y) w = calclsum(z) if w &gt; hwmin and w &lt; hwmax : srcls = y[::] ret[w].append(z) pieces -= 1 break # # if i &amp; 1 == 1 : # Odd: Match prior random piece difference while 1 : y = srcls[::] z = makepiece(x, blocksz, y) v = ( 2 * blahw ) - w if calclsum(z) == v : w = v srcls = y[::] ret[w].append(z) pieces -= 1 break # # # # return ret 
After dabbling in both Matplotlib and Bokeh, I prefer Matplotlib. I find it to be more versatile, plus it's easier to do custom callbacks for interactive plots
Oh. I've tried. I'm not important enough to raise a response... 
Well a few things. You could get your IP by going to a site like whatsmyip.org. then, from another computer, type in your_ip:8080. For example 23.45.230.21:8080 You have to use an IP because you probably don't have a domain name for your computer. However, this probably won't work as the port will be blocked. You may need to go into your router settings and enable port forwarding for port 8080. And lastly, you might need to change a setting in the program so it serves on 0.0.0.0 instead of 127.0.0.1 Kind of a pain, I know, but if you are serving a web-interface of any kind from your own computer, you'll have to do something like this to make it publicly accessible.
I wonder how many of the positive reviews are fake. It seems unlikely that all of those hotels would have such a high majority of positive reviews. 
It was a joke, like the funny kind, only different. In other words, I suggest that a person uses the IDE PyCharm, not sublime text, to write Python.
Thanks. Serving from my own computer might be a good initial step. I was more wondering what the process would be like if I don't want to be serving from my computer? I guess I need to pay for some sort of external server access? And I guess I also need to make sure that server has python and all the necessary modules? 
No you're not right, and I'm not sure if you're purposefully misreading my intention in order to make a point. I'm suggesting that I'd rather learn one more statistical method / algorithm, than a 2nd or 3rd or 4th plotting package. I'm saying that's how I'm prioritizing what I want to learn. I'm not sure how many languages you know, but I bet at some point you made a decisions that learning X vs learning Y was more important to you. That's my point, and I was bemoaning that there was an X, Y and Z thing to learn here instead of (as in the case of ggplot2) a thingX to learn and that's it. 
I have; it's not too bad, although I don't really have much experience with other C/C++ IDEs to compare it against.
Just curious, what do you think is lacking?
But you know that CLion supports Python out of the box? 
Sadly not -- but it certainly doesn't hurt either Thanks!
Have you tried increasing the jvm memory? I upped mine a lot and it flies now. The default was super low for the workstation I have. 
CLion for c++ on Linux, visual Studio on Windows and pycharm for python on both. CLion supports python but it expects a cmake file to describe the project even if it's pure python and doesn't come with all of pycharms extended functionality. I too was hoping to combine the two, especially since there's no c++ plugin for intellij yet, but it's still not a great idea imho and I prefer having the two ides at the moment
The python support still assumes it's a c++ project and it doesn't come with all the extra features that pycharm does. It's roughly the equivalent of a slightly cut down pycharm community edition with some workflow issues
How would you override this? I've tried in the past to subtype bytes, but could never figure it out. 
What does "full stack python" actually mean? I can get "Full Stack Javascript" because you've got MEAN frameworks (or similar) that are fully javascript.
&gt; Custom background image for the editor Okay. The return value feature is pretty cool if you have nested calls and want to see their values when debugging/stepping over. Configurable import sorting is nice, but I'd first need to think of a sensible order for that. It's always the simple things that are difficult to get right…
It's not necessary. [PEP8](https://www.python.org/dev/peps/pep-0008/) gives examples of `if` statements without `else`. Maybe it would be good to include it as a placeholder if there's a possibility of adding code there later.
PyQt5 autocompletion is finally working
&gt; London hotels have the worst reviews Here's a thought... perhaps a larger proportion of London visitors are not native English speakers, and thus basing sentiment by typical english vernacular is skewed.
yea sure, https://www.youtube.com/watch?v=sgz5dutPF8M watch that talk it is very relevant!
That share bar that covers half the page on mobile is maddening.
I use matplotlib for the 'ease' of embedding into a UI (with no web stuff nor faking plotting by loading static images) It likely possible to embed figures from other plot libraries but when I began working on the project there were plenty of guides for MPL and it just worked so I stuck with it. The docs aren't great and sometimes its hard to tell when you should be doing things with plt and when you should be using the OO framework. That said, I've not ever encountered any issues using MPL that were game breaking. Some problems took a bit of google-fu to find the solution but in the end worked out just fine. Also the new styles (fivethirtyeight, ggplot, etc ...) they added are great and very simple to use.
Does indexing take forever?
Pycharm for Python, CLion for C/C++, IntelliJ IDEA for both.
Task scheduler on windows. Im sure cron would work just as well on linux.
I guess it's worth noting that these solutions will generate slightly different outputs: 1) using "end" named param: &gt; "str1 str2 str3 \n" (extra blank space at the end) 2) using string join: &gt; "str1 str2 str3\n" I assume you knew that, but opted not to bother as they are visually identical outputs.
I've seen it used in some Python example code, and the person who used it made the comment that having it indicates to other developers that we don't care about other cases besides what matches the "if" statement. But I suppose you could infer that as well.
Not like Pycharm it doesn't. &amp; I'm running the 2016 version.
could you share the command you used to do that?
I'm on the same path myself. It's just that Javascript seems to be this bizarrely exploding constellation of transpilers and frameworks rather than a language. It feels like a moving target. But that's what I get for trying to ignore Javascript for eight years hoping it would just blow over.
Here's a wrapper I'm working on that cleans up Matplotlib's syntax for plotting functions, and uses sensible defaults (ie tight spacing, draw axes and a grid) f = lambda x: x**2 + 2 fplot.plot(f, -10, 10) Works with 2d graphs, vector plots, surface/contour plots, and 2d/3d parametric equations. https://github.com/David-OConnor/fplot/blob/master/fplot/fplot.py
My point is that it would introduce a problem when **ESL reviewers leave a review in english**... but using faulty ESL vs. normal vernacular. 
The day CLion support GNU Make as a build system (which is a ways off) it will become my go-to for C development (my usecases for C++ remain a bit limited), but until then I'll probably keep using it only fairly seldom. 
Also, Javascript has gotten a *lot* better. There are still massive downsides (no actual standard library being the biggest one, especially when compared to Python), but for a language primarily used for building user interfaces, it's not so bad these days.
Indexing has always been a hog but no it's the code intel that has slowed down. I'm noticing more lag as I switch variables or update parts of my code. The intel and warnings don't seem to update as quickly. 
Yeah I'm not certain why its not more accessible. It seems to be a common occurrence with memory intensive Java software.
I've decided to not use it :) I generate HTML page with jinja2 template and I use amchart, d3js etc. like that, you can easily produce pdf report and mix with geographic map(Folium), html table etc
what do you mean by save a function?
No, Django would be equivalent to Express. Node would be equivalent to PyPy (or whatever you use to run Python).
You do have a point, but without a proper context most people will just assume full stack means browser+server.
I'm all for learning but in this case buy something off the shelf that meets your need or if it is freeware even better. No need to reinvent the wheel.
A sticker they can only send to US addresses... It's one dollar to send it to Europe, and many good engineers like me live in Europe.
thanks a lot!
I agree that there are already applications that do this, but my main reason for doing this is to learn. If it never turns out to be something I share with my company, I could care less. But at least it has potential to solve a real-world problem pertaining to my daily life rather than creating something I have no use for.
I want to support the standard FFI but offer an alternative as well (I don't expect will use it, until the project gains a lot of traction but it will offer a more efficient way of access). I would expect that some Python libraries that use C code would end up slower than a pure Python alternative (since that means they are expecting pyobject for ints for example). Trade-offs: As mentioned before integers would change. Omissions: Python 2, this will be Python 3 only. Additions: Case classes, switch/case, multiple dispatch, overloaded methods. Case classes, from macropy. @case class Point(x, y): pass This generates code as though you wrote class Point(object): def __init__(self, x, y): self.x = x self.y = y def __str__(self): return "Point({x}, {y})".format(x=self.x, y=self.y) def __eq__(self, other): return self.x == other.x and self.y == other.y Switch/case will have extended syntax over C/Java. switch type(a): case int: print("Integer") case str: print("String") case tuple: print("More than 1 value") switch a/100: case &lt;0: print("Negative") case 0: print("Zero") case 1..10: print("Small") case 11..100: print("Large") continue #This would be the go the next as well # break is assumed case 101..1000: print(switch) # This is the expression value default: print("Out of range") Multiple dispatch / Overloaded methods def display(a: Fruit): print(f"Fruit called {a}") def display(a: Any): print(f"Not fruit called {a}") apple = Fruit("apple") display(apple) apple = Computer("Mac") display(apple) This allows you to call a function designed to handle the type, this editor is horrible for typing code so I didn't include a real multiple dispatch where it depends on multiple argument types. 
Of course you CAN but should you? Maybe. If this is your first project with python and javascript, it will likely turn into a rats nest of code as you hack together something that works. If it is something that ends adding value, you can expect for people to request new features and you spending a lot of your time fixing bugs, tweaking css and wishing you designed your app differently from the start (there is no way around this problem if building from scratch your first time). With that said, there is no better learning opportunity out there to learn how to program that I know of. I would go with this approach if your primary goal is to learn to build web apps and a secondary goal is to solve your business's problem. However if your primarily goal is to solve your business problem, look for technology solutions that work out of the box with as little programming required as possible. I would highly recommend using Kibana + Elasticsearch. You can drive very interactive visualizations out of the box where you focus more on configuration than on coding. Knowing how to code is valuable, but knowing how to solve problems is priceless.
I won't be providing a full eval/exec function (partially for performance but it also means it can be used in a sandbox). You will be able to use eval("sin(x) + log(cos(math.pi*r*x^2))"), it will have ability to plug in your own safe functions etc, so def flibble(x): .... eval("flibble(x)",flibble=flibble) 
d={} d[1]=d You should memoize a list of object IDs that you've looked at, return 0 if that object has already been tallied.
I understand the need to learn but from a value standpoint building from scratch adds little value to the business. Use tech that already exists and build on top of it as this would create more value to your organization.
&gt; * Package installation from requirements.txt I thought that it has had this for a while? Is there something different with it now? I would get a message at the top saying that the dependencies aren't installed, asking if I would like to install them.
So you will support a subset of Python. What about code such as: class A(object): pass setattr(A, '__getattr__', lambda a,b: 1) print A().b It is solvable through static analysis, but I imagine it would be quite complicated to do so.
Proper support for arbitrary make files / autoconf is unlikely to ever be really work well. You'll most likely get some sort of bastardized pre-baked template-based system. IMHO, just bite the bullet and learn CMAKE. It really is a superior configuration system. If you know both CMAKE and GNU MAKE, and understand the basics of how to use a compiler, porting a project from one to the other should only take a few minutes. If you don't know CMAKE, it should still take less than a hour and a little bit of research. The cross-platform compatibility is WAY better than make. The ability to use other build systems for compilation is also a huge plus (e.g. ninja is a bit faster than make). Out-of-place builds are amazing, and once you've used them you're unlikely to go back to anything else. etc. etc.
I thought the same thing. Now i hear people saying that JS is the new C. That's where I draw the line.
Yeah, I want my python webserver send requests to my python framework that renders them with my python templating engine after getting data from my database with a python-based query language and then do some python scripting in my python browser to make apax requests to refresh content dinamically without refreshing the whole page.
Someone could make an add-on/extension for it, I guess.
I agree with what you're saying generally, but ES2015 added a *lot* of nice features to the language.
&gt;I realized the power of asynchronous programming import asyncio async def foo(): return await something_else() You mean like that?
Twisted!
Django uses templates, which are HTML with special brackets {{ }} for inserting data 
Yes, I'm halfway into https://www.amazon.com/Learning-Python-5th-Mark-Lutz/dp/1449355730?ie=UTF8&amp;*Version*=1&amp;*entries*=0 I didn't have to upgrade to win10 , win 7 update was enough
Use bokeh
Here are some examples that get close: http://www.brython.info/tests/console.html?lang=en http://www.skulpt.org/ 
The console history is really unusable. Why can't they just replicate what ipython console does. E.g. partial matching when pressing up arrow. Fix plotting support. Honestly why can't they just embed ipython. It just works
Django offers a development server, which you shouldn't use in production.
I totally get that you're doing this to learn, and that's awesome! That's what side projects are great for. Let me maybe give some context as to why it probably makes more sense to build vs buy in this case, speaking only from my own experience and not from any kind of proven comp-sci literature or gurus (basically, take what I'm about to say with a grain of salt, it's only one old guy's perspective). I would opt to buy vs build in this case 10 times out of 10 only because it is for a work project. As exciting as it might be to build, that excitement will wear off eventually and I can effin' promise you it will wear off by the time the business starts finding bugs and asking for enhancements. Basically, building can be fun and intoxicating, but maintaining is an equally potent hangover that comes from it. Let that crap be someone else's problem. What you're talking about is the infant stages of a business intelligence solution, and there are plenty of great ones out there. If you really just want to learn, do a side project of some sort. If you want this to be your side project, that's fine, but I'd recommend doing it on your own time.
Yay. I only knew to check for it because it had caused me some trouble earlier. Glad to help. I'd be curious to see if you can make this work on custom classes. If you do, I have a lot of stuff I'd like to analyze.
It shouldn't be a production server in any capacity.
Actually AJAX is **A**synchronous **JA**vascript and **X**ml. So we could call it APEX for **A**synchronous **P**ython **E**ngine e**X**treme 
Yes for folks who dont know any other language other than Javascript - they consider JS to be their personal messiah. They refuse to acknowledge the problems with the language. Scoping for instance, or the concepts of truthy and falsey. And yes, Python is not perfect - but it is certainly very good!
This is intended to be a side project done on my own time. The idea stemmed from repetitive excel driven dashboards that I thought I could make a fun project/learning experience out of. At this point, I wish I never mentioned "business" or "work" because that's not what it is going to be used for by any means
Thanks for the info buddy!
This is definitely possible with python. The studio I work at does most of their UI's with a UI library called QT. And to be more specific the python bindings for it. I don't see any reason why you could not build these UI's with purely python bindings. Granted it is not a python standard library solution. I know nuke and maya's UI are built on QT as well though I'm not very knowledgeable on PS and Modo. Nuke and Maya actually ship with QT python bindings called **pySide**. There is also a nearly identical set of bindings for QT called **pyqt**. Main difference between the two being licensing. I would recommend checking those out.
It is not. I may add it in the future but a lot of this was done on company time so I'd have to talk to legal about it. Also, one of the tools is to give you the matlab color pallets which may be trademarked. I am weary of keeping many versions. Kind of a bummer too. I have tons of additional programs and scripts that, while not as nice as what a better programmer could do, the full a niche for me. I will eventually look at getting those up
For anyone who wants to find the size of an object, but is not concerned about the length of the code that accomplishes this: Docs: https://pythonhosted.org/Pympler/asizeof.html Source: https://github.com/pympler/pympler/blob/master/pympler/asizeof.py
Sorry that's already the force.com (Salesforce) language.
The term Django typically refers to the web framework, which does ship with a webserver. However, it is discouraged to use this webserver in production, and usually people will use a plugin for Apache or wsgi or something else.
sweet thank you 
thanks guys!
This is a very convoluted way of doing it. Just use [pyinstaller](http://www.pyinstaller.org/).
&gt; OP is /u/Prestonstith &gt; First commenter is /u/HStith &gt; Redditor for 1 hour Reported for spam.
I've been browsing r/programmerhumor for like an hour before I saw this post and it was very hard for me to figure out that I am indeed on a different subreddit now. (In case it's not obvious, [he's trolling](https://www.youtube.com/watch?v=EbXo1bbxk_g))
Or you can learn C. Isn't that scary after you get used to it. C is pretty cool by the way.
Ngrok is a ridiculously simple way to do this. On Linux, ./ngrok http 5000 is all you have to do. :D [Ngrok](https://ngrok.com/) Note, each time you close ngrok, it will generate a different url. Not sure if you can change that behavior.
I agree with you that it would be useful (I'm implementing a language at the moment that has `||=` for something similar), but it wouldn't really be a good fit for Python. If you have `something_true = something_true or burn_down('the house')`, that function is not going to get called, but if you have `something_true ?= burn_down('the house')`, what would happen? Would that function still get called? And what about operator overloading? Would you have a method `__iquestionmark__` or something? How would that even work?
Compile pure python code is futile. Python has too much corner cases. You should take a look at the crystal-lang which is a project to compile ruby like syntax. A similar project for python like syntax compiler will be much more welcomed: inferenced local variable types with function parameter type declared similar to C. 
I still cannot fully comprehend why exactly was the language called after Monty Python. Is there some.. deeper connection?
For my own standalone projects or projects that I can work within that use CMake, I agree there are advantages. I tend to mostly do embedded/driver dev though as part of larger and older (mainly Make-based) systems and don't have much say in the matter. For those projects, I've stuck with text editors, but I'd be intrigued to have them in an IDE.
Anyone else having trouble installing vmprof on windows x64 for Python 3.5?
If you are not into building it on your own, you can find it [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv). Read the instructions at the top of that site, you will need to install wheel if you don't have it and then install the wheel for numpy 1.11.1+mkl (also on that site). Good luck.
People are talking a lot of crap on the use of the phrase "full-stack", but I sure did appreciate the content on this site a few years ago when I didn't know a single thing about servers, sysadmin, etc. I learned a lot from it.
Hi a question about the update. Its the first major PyCharm update for me, so how do I download it? Do I have to reinstall it because it redirectes me on the download page? If yes should I do something special? Thanks for answers :)
No, I mean git. I often use bitbucket for my private git repos and it works fine.
Or, the way I like to put it: AJAX stands for "asynchronous JavaScript and XML", except that it might not be asynchronous, might be coded in a language other than JavaScript, and might retrieve data in formats other than XML. (But the "and" is completely correct.)
You're forgetting ES2015
What do you use pyglet for? I'm looking to draw multiple spheres and move them to independent locations and kivy is giving me a headache. 
This is what web applications do - expose functionality without exposing core logic. If you're really paranoid about keeping your code secret, do this either with a browser and a webapp, or build an API using something like Flask, and poke at the API using requests from a client machine.
I'm most fond of a pen and paper
There's an example blog post on http://astrowizici.st
It has had that for a while. The actual new feature is recognizing the special casing in the file. When you mark a requirement with [feature] for example.
Yes, but is `burn_down('the house')` evaluated before that?
/r/learnpython and formatting please
&gt; I get that this is very close to a homework question, but because I'm not really asking any questions, it seems like this can still belong here. Something about letter and spirit of the law applies here. In its current form, this is hands-down a homework question. If you want to be smart about having this issue resolved, *and learning something in the process*, do this: 1. Try to figure it out yourself. 2. When stuck, report back here, explain what you've tried, where you're stuck, and which part you have trouble with. Ideally, paste some code. 3. People will give you hints, point you in certain directions to investigate. People will not generally write the code for you, simply because that won't help you much beyond this particular question, you won't learn anything, and the next problem will be just as hard, and you'll just come back asking us to solve that one for you too. The purpose of such programming problems is not to have them solved, it's to have you learn something in the process. If you short-cut the process, you won't learn, so why do it in the first place? Anyway. The strategy to use with such problems is "divide and conquer", that is, divide the problem into smaller subproblems, and those again into smaller subproblems, until you have something trivial enough to solve. So the first thing to do is write your requirements down as a flat list. See which bullet points from that list you know how to solve already. For those that seem too complex, split them up into sublists. And so on. Then try to figure out in what order to perform the individual operations, e.g., do you first sort the list, then join, then format into columns? Or first columnize, then sort, then join? Is the "three lists of strings" representation appropriate for these operations, or do you maybe need a different one? If so, which one? Which library functions can you use to solve some of the subproblems?
The name Python doesn't refer to snakes and lizards, its a reference to Monty Python. EDIT: Well thanks for down votes without a reason guys.
Check out SQLAlchemy, you can use postgres or sqlite as the db backend, your code stays the same, you just change the connection string :)
You probably don't have to run exit in last line. Also: main() can return only 0 (or am I wrong?) so you are doing int(0 or 0) = int(false) = 0 - it's the same as a result of main().
OP appears to be a teenager with conservative leanings.
Which client side language other than javascript have you seen used?
people should pull themselves up by their bootstraps... unless its a programming question then they need help 
It's a pretty basic function that you can easily write, pm me and I can work you through the psuedocode.
or=
Actually, main behaves like in most programming languages, it returns an int. Usually, zero (0) means that everything went ok, any other value means that something went wrong, and hopefully, the documentation can point out that error X means Y
There **is** support for git, the support for BitBucket got dropped.
Yeah, that's how I understood it as well. Bottle/Flask/Django are web application frameworks with integrated WSGI web servers, which are interchangeable. I developed my web app with bottle.py and used its web server, but then I deployed it on Apache and used mod_wsgi instead of the built-in WSGI server. Almost 0 effort when switching WSGI implementations.
My day-to-day has been involving a lot of Pandas lately - this update is comically useful for me.
And /u/loneraver is asking *what "support for bitbucket" provides* on top of regular git/mercurial support.
For ease of install/use I'd stick with sqlite, as there's no real install required for either the driver or the database engine itself in 'modern' versions of python. If 'import sqlite3' is not working then you likely have an issue with your python install, or you may be using an older version of python than you think (sqlite3 was added in 2.5 I believe). I'd also seriously suggest using one of the Anaconda python distributions if you're on windows - you're eventually going to run into third party binary dependency issues, and Anaconda/conda solved a good portion of those issues. Lastly - if your main goal is to learn SQL then you can do that direct from PyCharm (Professional) without any python required. It has a plugin called 'database' which you can use as a full featured SQL IDE for multiple database platforms (sqlite included). If you don't have Pro, then there's [other options](https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/) as well. Once you're up and running I'd definitely check out postgres again. Sqlite isn't really meant for concurrent connections, even though it can often work fine for a low traffic website... Postgres is a very full featured database, and it may well be overkill for your current system, but you're going to want to use it at some point in the future!
You can follow pep8 for a more pythonic code. If you don't know what it is, check the documentation. You can install a pep8 checker via pip (pip install pep8), then a simple : $ pep8 sorta.py will output everything you can do to make it _look_ better.
It would be hard to compare like-for-like, but I'd be interested to see one (that tests things like more than one incoming server).
python-autocomplete works just fine if it launch atom from the command line with your virtualenv activated. 
He has a point, I also learn by going through someone else's code. However, most likely someone will not just write code for you, you'll have to just find something open source to study
I'm what way can you control the Javascript eventloop that you cannot in Python? 
Going to have to test this with my own code. Mostly using Python for data analysis and graphing at present. Does it re-write the code, or just reports errors &amp; "un-pythonic" details?
Do _not_ use docopt under any circumstances. The self-documenting nature is appealing at first but you end up doing all the work yourself to actually extract useful meaning from its output. When you have a bunch of subcommands each with their own set of options, it becomes unworkable. If you need a good CLI library, use [click](http://click.pocoo.org/5/). Unless you really feel compelled to do tons of post-processing on a hot mess of dictionaries and lists, avoid docopt.
Tried pylint. It didn't give a shit about most of my errors but was pedantic as hell about any possible "violation" of PEP8. Certainly not helpful, though maybe that was just an anomaly.
This sounds like the ideal use case for asyncio...
I might just be babbling nonsense here, but isn't this a case for them to completely split apart network and CPU intensive stuff? I always heard that CPU bound code is terrible with cooperative multitasking and should be in its own process. Seems like that would fit the microservice architecture they're aiming for. I say this with literally no knowledge of the company or their products.
I glanced over the code, it looks alright, nothing "wrong" that caught my eye. Suggestions: * Unit tests * In the function docstrings, you basically repeat what the function name already tells me. Which means you chose your function name well, but it also means the docstrings are redundant. Tell me what the function does, what arguments it takes and what it returns. * There is no daemonisation code. No idea if this is intentional but if you want to make an actual unix daemon you'd need something like this: http://web.archive.org/web/20131017130434/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/ * The code is procedural. There is nothing wrong with that, but be aware that many larger programs are written object-orientated. Choose whatever paradigm works best for the task, don't get stuck in one. 
There is no good answer to this. It seems to be one of those programming religion type issues such as putting {} on their own lines. When I teach, I do use examples where I name them the same. I do this because it helps my beginner students make the association between the two variables. I do also demo that they don't have to be named the same. For right now I would say do whatever makes you feel comfortable and if this is something at a job, then ask one of the senior devs how the company prefers things named.
The pep8 tool has since been renamed pycodestyle
And you're a dick.
I've done some profiling of my code which helped reduce the amount of time that the calls to peewee were consuming but know that I could do more to identify some sticky wickets. Your suggestions are extremely helpful and should result in some quick wins within my existing code base. Thank you for taking the time to post these. Most helpful indeed.
It usually *is* wrong - something went wrong, you're supposed to tell the computer how to proceed; "except: pass" means [this is fine](https://i.ytimg.com/vi/C-zCzM5qPec/maxresdefault.jpg); sometimes that's what you want, but usually it's not. You either want to resolve the situation right there and then (by writing a meaningful exception handler), or pass it to the caller (by not catching it). On the rare occasions where you do actually want to ignore the error, it's best to keep the except: pass and add a comment that explains why this is fine.
lol i guess i should be surprised you can type at all.
I think your readme is a bit lacking. This is where you should be selling us on your project. What features do you have today? Show them in action. Maybe some simple images of a directory structure before and after you use the tool. Optionally, give us your vision of where you want the project to go. What cool things is it going to do? I'm still unsure as to why I'd want to use this thing, as the concept of adding and removing prefixes and extensions to files seems uninteresting. Maybe give a concrete example. How are you using it? I mean, you must've found a need for it, or you wouldn't have bothered writing it. The only use I can imagine is something like monitoring a dropbox folder, and then copying the files away at some interval, but from the readme and help, I'm not even sure it can do that. 
You are right to be suspicious. Generally, it is a bad idea to use an unqualified (or bare) except statement. For instance, you cannot control-C out of a try/except block with bare except. Use `except KeyError:` or another specific error so you only catch the errors you expect to catch. Passing on specific errors is a common way to handle interacting with objects that may or may not exist. 
Finally hahah! Thanks for this, it's exactly what I needed to hear. If you happen to have any good resources for the above mentioned steps; I could use them!
Agreed. Fuck anything that tells me to use spaces instead of tabs.
Yep, I agree. It's a last minute readme, I'll do a kick ass one tonight. Thanks for the comment!
I found a bug, filters={'max_price': 2000, 'min_price': 1000} You'll never find anything in SF for that. :P
&gt; The name Python doesn't refer to snakes and lizards, its a reference to Monty Python. Yes, I know that. Doesn't mean that in the distorted reality of humor, a "full python stack" can't have machines made of snakes. &gt;EDIT: Well thanks for down votes without a reason guys. You're getting downvoted for being a pedant and/or not having a sense of humor. Your post assuming I didn't know the origin of the name of the language and assuming that I needed to be corrected on something I already knew adds literally nothing to the discussion, so you got downvoted.
Relationship Goals.
Go to Code Review http://codereview.stackexchange.com/
Because it definitely sounds like a homework question, I did a background check for similar posts. Didnt find posts about programming but did find a lot of angry replies.
This is really cool!!! At the same time, I realize that I never want to leave the Bay because I have a very great deal on my place :(
Really impressed with the SymEngine talk. I guess I'll have to find more reasons to use SymPy soon!
`docopt` is fun, but I find that `argparse` is easy enough to use 90% of the time. Plus, being in the standard library, it means one fewer dependency.
http://i.imgur.com/daIN2S4.jpg
Did you put yours on GitHub? Sharing is caring!
I like flake8 myself.
For real though, you can. Anyone looking should check the Sunset and Richmond district for a decent place at a good price. Also some pretty ghetto areas that are cheap if you don't mind worrying about your car or getting to your car at night. But the Sunset and Richmond are safe, just more boring areas. Pretty much anywhere else that's worth hanging out in SF is expensive as all hell, but you can find a place in that range if you don't mind being somewhere more boring out in the avenues. You have to hunt and you have to be okay with some converted area behind a garage with a hot plate though. I just moved out of SF and I can't tell you how happy I am to have a real two bedroom with a living room, separate kitchen, balcony, tons of space, everything new... it's awesome actually having a real apartment. I love SF but I'm at the point where I'd rather have a nice place at an affordable price. SF is a great place to build a software dev career though, primary reason I was there. But it's absolutely ridiculous this is what it takes to find a place.
Maybe the cardboard box a refrigerator came in.
That would still be nearly $2000/mo. And that's if you split it with 3 roommates.
Get out.
Are utilities included in that 2k?
This is a really thorough, well written article that explains every single step of the process and how it was useful to you. Hope the place is awesome and good luck with your future endeavours!
Great job, thanks for sharing!
Glad to hear it. Happy programming.
What did you use for text messaging? I usually use pushbullet but there are times that my phone has no internet access to receive them. I've heard quite a bit of Twilio but last time I've checked the payment model got me confused.
Pretty sure it doesn't work like that. You want your parameters to be temporary variables, it's faster that way and makes it easier to think about and code. You should return the result not modify global state. 
I can't see the relevance of your age. Keep up the good work though, young man.
Might be able to do it with rpython
Thanks! The idea behind including my age was that younger developers who are just starting out might feel more confident learning from someone closer to their age, perhaps someone who better matches their style of learning.
I see, and appreciate your explanation. Good luck.
Sorry, I was a bit unclear. I was referring to the fact you can control the event loop in Python, not in JavaScript 
For tests, why not just use py.test fixtures?
It's implemented in native code (i.e. C++). The relevant source code is [here](https://hg.python.org/cpython/file/tip/Objects/unicodectype.c) - it's basically a bunch of bit level transformations that work because of how the characters are numbered in the Unicode spec. 
It maps 'a' to 'A' and '1' to '1'. It's just an iteration around a lookup table. /r/learnpython
If you mean **desktop** application then you have to choose GUI framework - Tkinter/PyQt/wxPython/PyGTK/other - and learn it. Tkinter has `Canvas` class with methods `create_rectangle`, `create_oval` (http://effbot.org/tkinterbook/canvas.htm). Other GUIs have similar class but may need to use `draw_line` to draw rectangle and `draw_point` to draw circle. EDIT: my PyQt examples drawing on canvas using mouse: https://github.com/furas/my-python-codes/tree/master/pyqt/draw-on-canvas
Nice job! How long it took to build it?
It's specific to the implementation of Python, but CPython binds it to a native function built into the interpreter. The actual code for this seems to be in this file beginning at line 12051: https://github.com/python/cpython/blob/master/Objects/unicodeobject.c I'm not sure how far down this rabbit hole you really want to go.
I'm not sure the quality of my code is good enough for GitHub haha.. I'm just a beginner without any formal training
Did it work for you? Then publish it.
CPython is written in pure C, not C++
I wondered how a slack bot could help to find an apartment. The key is that it is more about scraping craiglist result 
This sounds cool as hell and I can't wait to get home from work to read it.
Thanks for the reply! I did a bit of research and it turns out they charge €0.05 per sms here in Estonia, which is quite a bit. I have few scripts that let me know of stackoverflow questions etc. and I maybe get 5-10 notifications per hour so this would cost way too much even if I use it only on specific cases.
Curiously, why they didn't try threads? If they have just 92 workers, they could run 12 processes 8 thread each. Really, whole this "asynchronous" stuff is necessary when you have at least hundred concurrent flows in one process. With dozen concurrent calculations, threads could be just enough.
Or Pillow? Or you could interface with ImageMagick? Not sure how but I know it's possible.
I know that we can actually use the build project command in Netbeans as well but I preferred to create the setup.py file separately, thanks for the advice 
Pillow is an *image manipulation/processing* library while OpenCV is a *computer vision* library. While there is certainly a lot of overlap (i.e. OpenCV contains a fair bit of image processing functionality) they are vastly different in scope. To make an extreme simplification, you use Pillow if you want to cut and resize images, and maybe do a bit of filtering, and you use OpenCV when you are building a robot that is trying to "see" things. Personally, as someone who use OpenCV more or less daily, but have never touched Pillow, I would probably use OpenCV for things Pillow does, simply because I am familiar with it. However, unless you have *specific reasons* so to use OpenCV, I would stay away since it can be extremely anoying and over complicated at times.
The CPython implementation is pretty much this yes. There's no "low level C" code vs C code though, using pointers doesn't make C lower level C. It's just C. There are other implementations of python that are not implemented like this though for example Jython implements Python as java bytecode and PyPy is a just in time compiller. Here are an explanation of some of them: http://docs.python-guide.org/en/latest/starting/which-python/ It is also possible to compile Python directly to machine code, there are a few projects that do this in various ways: Nuitka does this but uses libpython http://nuitka.net/pages/overview.html. There are a lot of other implementations out there. So in short, yes the CPython implementation does this but this is not the only way Python can be executed. 
Python is a language specification with different versions and CPython is the most commonly used implementation for it. There are other implementations as well. Actual CPython compiles your code into so called Python bytecode with a C implementation, which sometimes calls C functions through the C ABI (application binary interface). C is a commonly used language because it is widespread and has a very simple and stable ABI, but other implementations and ABIs exist :)
https://imgur.com/FMmlQbp These buttons make your site unusable on mobile.
I'm not too familiar with those but I may look into it, thanks.
Yeah I want to create my own desktop applications. I have looked at Tkinter but a lot of the documentation I've found seems to be for Python 3 while I want to use Python 2.7. I did see that it has a canvas class but I don't know how good it is... 
It doesn't matter if you use 2.7 or 3.x - tkinter is the same. Read documentation for 3.x. The only difference is in import - for example 2.7: `import Tkinter`, 3.x: `import tkinter` Canvas keeps shapes as object and you get object ID to access this object and move it or resize it. Other GUI draws on canvas and you get one bitmap. You have to remember all shapes on your own. You clear canvas and draw all shapes again if any shape change size. 
Pillow/ImageMagic are good for image converter. But you still need GUI framework to display image and use mouse to draw shapes.
It is automatic. I'm a user, not a computer scientist. Within PyCharm and Bitbucket, I simply push an arrow up or down. That's it. 
Thanks. I'll try it out.
I'm confused. You push an up or down arrow to do what? As long as you have the bitbucket git url for your project, you have everything you need for version control in PyCharn. As far as I know, github integration only adds the ability to browse your own repos. 
You mean that they put all their members with double underscore?
I have a repo in BitBucket. I am working in PyCharm. I want to commit and push, I push the up arrow in PyCharm right top. I want to pull the changes made by the other developer. I push the down arrow. That's it. In SourceTree, there are a lot of errors and handling conflicts is much more difficult. In other words, without Bitbucket integration, I have either to use git commands (that I don't know) or SourceTree which is more difficult. 
Settled out of court.
Well. Bitbucket uses git. If you are going to use it, you might want to learn how it works and the basic commands. The basic commands are pretty easy. However, you really can do everything you just asked for with Bitbucket integration with the git integration. 
That is super expensive. Your brother lives in a dog house. That money gets you a house in most other states. I don't understand SF pride. It's like Stockholm Syndrome 
So why doesnt eclipse jump into the file you sent me ? It goes to string.py and comes back to my class 
Also would you please be kind enough to explain what a framework is ? So Python has libraries , string is a library you call and you can use the methods in it.... So for webdev why do I need to use django or flask? 
"Doesn't work" is not an error description. Did your house catch on fire?
Email still requires internet connection though; In that case I very much prefer pushbullet :)
First of all, please take any and all simplistic questions to /r/learnpython. Secondly, there were quite a few syntax errors that python3 should have pointed out in your error message. I fixed your code and added comments as to what was incorrect. Everything is still really sloppy because I left it in your format, but it should still work. print("Mage is a magic/mana based class") print("Thief is agile and smart class") print("Incess is a strong &amp; reptilian class") print("Medix is the healer class") #Define player as variable. player = input("pick mage,thief,Incess or Medix") #Indent those blocks, friend. Indent them! if player == "Mage": print("Great. You're now the leader of a group of 1 Medix 2 Incesses &amp; 1 Thief") elif player == "Thief": print("Great. You're now the leader of a group of 1 Medix 2 Incesses &amp; 1 Mage") elif player == "Incess": print("Great. You're now the leader of a group of 1 Medix 1 Incesses &amp; 2 Mage") elif player == "Medix": print ("Great. You're now the leader of a group of 1 Thief 1 Incesses &amp; 2 Mage") #Print more of the story. print("you and a group of your friends were told that there is a treasure in this giant forest") print("you and your group wake up at dawn. Will you go explore away for camp") #You can't leave your ouput text outside of '' or "". answer = input('yes or no') #I moved your logic around. Exceptions SHOULD be used in place of an #incorrect answer. Also, remember to put a colon after your if/else, and #to indent your block. #Also, a supplied string must still be wrapped in '' or "". if answer == 'yes': print("you went into the forest for 5 minutes and found a strange shaped rock") elif answer == 'no': print("Rog Incess: Lets go explore") else: print("please recheck spelling or word")
Text "its not working" is useless. Show full error message. I see two mistakes: 1. you forgot "" and : in few places answer = input("yes or no") # you forgot " if answer == "yes": # you forgot " and : if answer == "no": # you fogot " and : 2. `answer != 'yes' or 'no'` is threaded as `answer != ('yes' or 'no')` and it gives `answer != True`. It has to be `answer != 'yes' or answer != 'no'`. But you also need `and` in place of `or` if answer != 'yes' and answer != 'no' : or you can use `if/elif/else` if answer == "yes": print("you went into the forest for 5 minutes and found a strange shaped rock") elif answer == "no": print("Rog Incess: Lets go explore") else: print("please recheck spelling or word") ps. maybe next time use pastebin.com
haha that's lovely! would be very easy to redo with Norwegian and Danish names. so let me know if you find that list. but make sure it's as long as they get (even small towns).
why not use the xkcd api? https://xkcd.com/json.html
This is probably the best way to handle this. Note that you might need to handle http://xkcd.com/404/info.0.json in a specific way. (If you want, you'll find an implementation for the download of XKCD comics (and many others) at https://github.com/SylvainDe/ComicBookMaker/blob/master/comics.py#L18 )
I'm still learning python and have no experience in json. Honestly, I did see the API but ignored it, since, I didn't know how to use it. Though API use would have been neat but parsing xkcd wasn't really hard. They have a very simple website.
Yup, there are several comics like #404, 1525 etc that aren't images or gifs. But script handles them nicely. I took care of it. 
A framework are usually a collection of libraries that achieve an overall goal. So you can have one library handling database connections, another for HTTP mapping, and a third for XML processing. Bundled together, these can be put together to form a framework like Django for the purpose of building web applications.
Eclipse is probably using the Python debugger, which only works on the interpreted code. If you need to dig any further, you would need to install a version of Python with debugging symbols (in most Linux distros, this will be a -dbg or -dev package) and run it through a C debugger like gdb. I'm not sure if Eclipse is able to run 2 debuggers automatically, so you'll have to figure out how to run the gdb portion on your own.
Technically speaking, you don't "need" django or flask, there are modules in the standard library that can do most of the basic web-related processing (http server, xml/html handling etc); but django/flask make the whole thing easier and pack lots of other helpers and goodies that will dramatically simplify the effort.
I haven't done a writeup on it like this guy did. I've contemplated it, but haven't done it so far. The basic overview is: Form with three elements: location dropdown, section dropdown (cars, electronics, etc), and a search box for your specific search terms. Create a database record from this form to save the search criteria. A task scheduler (I used Celery in this case) iterates through the database records at some interval (I went with every 10 minutes). For each record, I grab the rss feed with BeautifulSoup and scrape the craigslist id number, specific url of each item, photo location, price, title, and description. I then check that tuple against my database and if a match isn't already in there, send a notification to the user with the info and save the new record. If the record is in the database already, I just drop it on the floor and move on. There's also a view to edit and delete records and update contact preferences.
There are two elements to this: the interpreter and the libraries. The standard interpreter is also known as "CPython" precisely because it's written in C; as /u/zeedoodeez said, other implementations do exist on top of other runtimes (Jython on JVM, IronPython on .Net, PyPy, etc etc). Then there are the modules / libraries, i.e. the stuff you `import`. Some of those are pure-python, others are implemented in lower-level languages (typically C) and then wrapped with a shim that allows them to be called from python. One such example in the standard lib is `cpickle` but there are loads of third-party ones; one of the reasons CPython is popular is that it's very easy to build such wrappers for existing C libraries, or drop to C when maximum performance is essential. Similarly, Jython allows you to call Java libs, IronPython to call .Net libs and so on.
Definitely look at getting experience in json! I'd go as far as saying it's the foundation of the modern web. If you've managed to implement all this stuff with BS, etc, json should definitely be on your radar, it's pretty simple :)
I'm not sure what this means, but libraries can be written in any language, and both Python and C have hooks into each other so you can call a C library from Python and vice versa.
Dive into the black hole. Many professional developers choose vim, new and old and for many different languages, and I don't believe you'll find yourself wishing you'd gone with something else. Quite the opposite probably, learning to grok something like vi or emacs is the best way to go for professional "typists" I think. 
Thank you for your answer. It was helpful for me. But I don't agree with "as long as you write good code it doesn't matter what you write it with" and only partly with "as long as you're productive and comfortable with your editor of choice that's all that really matters". For me its important to not only write good code and be comfortable with my editor, but I want to write it fast and be as productive as possible. That's why I'm not happy with writing good code in a fair amount of time with some editor/IDE, while there is another one which would allow me to do it in half of the time and possibly with even more quality. Edit: 27 downvotes. Can you guys that downvoted please leave a short reply explaining why you did it? The only thing I said was that I don't want to use an editor/IDE that is severely inferior to another one. When I for instance found out about vim's modal editing, this heavily increased my productivity and speed and it was a reason enough to change from IDLE to vim. Perhaps there are similar reasons for moving from vim to pycharm or so and if so I would like to know them. That's all. 
That's a good point and you're right in theory. You could write excellent code in windows notepad but it would likely be painfully inefficient. However, I think when you're comparing across multiple excellent editors it starts to matter less. Someone who really knows how to take full advantage of PyCharm will be more efficient than someone who only knows the basic movements of vi - but it becomes more difficult to say if you will be more efficient in one or the other if you devote your time to learning alot about your editor. That's why I've concluded that comfort (along with effort to learning more than just the basics) with using an editor is the most important factor. If you're comfortable in an editor you will likely enjoy using it and be interested in learning more about what it can do, and thus make you more efficient too.
I figure IDEs have teams or people dedicated to writing parsers, or whatever it takes, to get auto complete going. It's even harder with Python since its dynamic.
I used exclusively Vim for a couple years and loved it, especially with plug-ins that added some more robust IDE features. I am now using PyCharm with the Vim plug-in and I couldn't be happier. Easy debugging, code profiling, jumping to function definitions, refactoring, working on remotely deployed code are all things that just didn't work as well in my Vim setup. I still use Vim on remote servers for quick updates to things and it is great being so fluent in it for that, but day to day I prefer the ease of PyCharm. 
Additionally I'd like to add that in my experience OpenCV is a pain to install, whereas Pillow is easily installable via `pip install`. So if your needs are satisfied by Pillow, it's an easier choice.
Personally, I would not use editors that are focused on a single language.. Someday when you start learning other languages, you'll find yourself searching for/learning another editor... If you ever need the features of the language specific editor, you can always juts fire that up for the limited time you need it.
Hey I'm not saying he lives in a mansion, but I've seen plenty of people talk about how you can't pay rent less than $4k/month, etc. I just get a little tired of the BS because honestly, the Bay Area in general is expensive. 1 bedrooms anywhere in the Bay Area start around $1500 I don't really desire to move there but I spend a lot of time in SF and it's really one of the most diverse places. There aren't many cities in the US that are as eventful
What do you "click"? A mouse button?
Use Pycharm
Yeah, I agree. It's just like people want to figure out which programming language is the best, but the truth is that no single one is the best/perfect, you just need the one suits you the best or suits the project you're working on the best. As to IDE/editors, I think it's more about to get used to one, to be more productive with your choice. 
I believe Jedi (which YouCompleteMe uses) had issues with certain data science libraries like Numpy the last time I tried it. Also it looked like development on it had slowed considerably in the last year and the bugs associated with the numpy/scipy stack had not been addressed. I'm guessing language-aware autocomplete is just a lot of work in a dynamic language like Python and companies that have the resources to put someone on it full-time (e.g. as with PyCharm) are just going to do a better job. It's a shame though, because almost every Python editor with autocomplete or an autocomplete plugin uses Jedi under the hood. I believe the only ones that differ are PyCharm and Visual Studio's Python Tools.
Is it possible to use this with your own metaclasses?
I use vim. It works great, and there are plugins for almost every feature you could ask for in a modern IDE. I'd recommend NerdTree (visual file system navigation), Syntastic (syntax checker) and youcompleteme (autocomplete). There are of course many more excellent vim plugins, but I'll leave that up to you.
I loved this Automate the Boring Stuff project, but I learned a lot more by doing one or two other webcomics where the interfaces were not so clean and I had to push through some problems like randomized webpage strings and changing naming conventions. Really caused me to get into the nuts and bolts of how BeautifulSoup works.
Because the hipster and brogramers won't EVER shut up about how it's an inferior choice.
i use pycharm with the ideavim plugin. best of both worlds. i used to code python entirely in vim, but pycharm's features are too good to ignore.
Was just looking for something like this. Looks intriguing. Thnx! 
If your writing speed is your bottleneck then you are a much smarter man than I am. Certainly, there is something to say for a smart IDE/editor above an extremely plain editor like notepad. There's a huge leap in gains there. But between all the various often-used environments the speed difference should not be your bottleneck at all. You're not going to knock off anywhere near 50% development time using a different IDE unless you're doing something horribly, horribly wrong. This, by the way, from an avid vim user for over 20 years, who actually does use it for python development.
Yeah. I could image that. I should work on it and maybe fix it in there. I developed this over a good amount of time and improved (maybe...) as I got more experience. Any tips? I know about the official PEP's but they are too strict to be useful to me 
Because you should use emacs. 
Source Code: https://github.com/OpenChemistry/tomviz Tomography datasets made open and public: "Nanomaterial datasets to advance tomography in scanning transmission electron microscopy" Scientific Data 3 160041 (2016) (http://www.nature.com/articles/sdata201641) =========== What's New (0.8.0 &amp; 0.9.0) =========== .Improved design .Interactive histogram with opacity editor and color bar .Redesigned data viz pipeline .Clear subvolume tool .Added a Linux installer .Move volumes relative to one another .Fast, interactive surface contours .New colormaps from matplotlib (1.5.1) .Orthographic or perspective projection .Improved stability and performance .Pad data, Invert data .Normalize image intensity in tilt series .Generate 3D electron probe shape .Colormaps added to manual image align .Difference mode added to manual image align .Constraint based reconstruction .Qt 5.7 for improved graphical user interface .Improved state file save/load .Improved integration with ITK .Added simple examples of ITK usage .Improved stability 
Not trying to be harsh but these are the things that stick out the most... First, some security related notes: * Do not store plain text passwords * Do not trust user input Now everything else: * Don't put memes in the readme if you wan't people to use it (it comes off as unprofessional). * Don't upload pyc files to source control. (it's in your .gitignore file even) * Don't upload directories like \_\_pycache\_\_ to source control (it's in your .gitignore file even) * Why is there an \_\_init\_\_.py in the root of your repo? * Tests should use self.assert* functions. Assertions can be stripped out with the -O or -OO flags. Also self.assert* functions are the convention for testing and provide much better context than plain asserts. * For the love of all things security, do not use root/postgres/other high privilege DB user in your configs! * You have a lot of ops related files in the root of the repo with no explanation of what they are. They also clutter the root of your repo. * setup.py with minimal requirements &gt; requirements.txt * Doc strings are awesome you should use more of them....a lot more. * Run pep8/pylint on your code. * Put your tests in one place outside of your source code. * Importing a module should not have unintended consequences (like running code). For example, don't setup the api then add to it in the same module. This makes it harder for someone else to reuse parts of your code. 
If you aren't familiar with vim already, I wouldn't suggest picking it as your IDE - there's a ton of learning curve that doesn't in any way help you write code. On the other hand, if you're familiar with vim and comfortable with editing it's confit and finding the right plugins it makes a great choice
I personally find that IDE's get in my way. I understand how useful they can be for people who like and use them but I just can't get into them. Even Visual Studio, which is my favorite IDE on Windows, annoys the hell out of me. So I'm probably a bit biased against IDE's. But, my reasons for using vim are: - It's everywhere - It's uniform on every system - It's easy to customize - It's _very_ lightweight - It's easy to learn - It's got a solid 40 year history through its connection with vi - If you already know it, you don't have to learn something new - You'll encounter it in _many_ professional dev shops That's just off the top of my head. For me, vim is really all I need. But, like others have said, use what you know. There's really no compelling reason to abandon a tool you know well for one you don't unless your employer is forcing you to.
Because I can install PyCharm in 5 minutes and get what would take you a year to customize and tweak. And mine will work better.
I can barely read the text. Why do you hate pixels?
I just love that you're posing the question this way.
I was a long time Emacs users who, like you, didn't see the point in using an IDE for a langauge like Python. I've recently switched and have found the following features super useful. 1) automatic pep8 reformatting: at the click of a button your code is reformatted to fit a uniform style 2) syntax/compatibility/everything checking: IDEs highlight potential mistakes with squiggly spell-check style lines. They're not perfect, but if you have code with no squiggly lines you can be pretty sure that it'll run. 3) Python 2/3 compatibility: if you care about this sort of thing, pycharm will perform compatibility checks between different versions. If you have multiple environments on your system, you can seamlessly switch between them for debugging. 4) Integration with git and jupyter notebooks Could you get all of these with a sick vim environment? Yeah. Go ahead and do it if you're interested, but know that a team of people have designed these IDEs specifically to make your life easy. I suppose that's the bottom line-- your editing environment is supposed to make you more efficient and make programming easier. Do whatever makes you most efficient.
You linked the downloads page, but the main page (http://www.tomviz.org/) is probably better for people to see as it shows a demo of what your software does.
[Apparently, yes.](http://jedi.jedidjah.ch/en/latest/) Never tried it, though, I only use vim for simple things like config editing.
I think it's better to use a single text editor and know it in depth, than to use a whole bunch of them and know them all superficially. A general-purpose text editor can be used for writing *any* text file, be they source code (python or any other language), e-mail (you use plain-text e-mail, right?) or configuration files of any kind. I wouldn't necessarily advise anyone to use vim (although I do myself), but I would advise you to pick one text editor and stick with it. If you do choose vim, it certainly has the depth to be your swiss-army knife of text editing. Oh wait, that's a reason *for* using vim. Never mind then.
I've used vim for 20 years for editing everything from text files to C and Python. It works. And I can configure it however I like. For the past 9 months I've used PyCharm. At first it was great and I was very productive, then the project got very large, very quickly, and PyCharm slowed down. A lot. I've read all the articles and forum threads I can get my hands on about tweaking and removing plugins (never installed any) and nothing works. It's slow, and switching between any other window and back to PyCharm leads to a 2 to 3 second delay before I do anything. PyCharm just hangs at this point. And my laptop is very new, so it's not that either. So I've given up on PyCharm and I'm back to vim. I have co-workers who use PyCharm without any speed issues, so I know it's not PyCharm that's the problem, and I'm not blaming PyCharm, it's a great IDE and in my opinion the best IDE for Python. However, my main reason for using vim, and I do have it configured as a semi-IDE, with all of the PyCharm features I used, is the fact that I can use the same vim setup on every environment I develop on, and more importantly bug fix on. We have a ton of remote servers, and I can bug fix remotely without having to pull down the remote code to my local dev box and fix there and push back up to the remote server. I can fix a config file, with the same setup in seconds, because vim is lightweight and fast, and doesn't load bloody Java to edit a file. For me vim wins because it's easy to use (yeah, yeah, steep learning curve, whatever, it's a few key strokes to learn, that's all, get out of your comfort zone!), it's light-weight, and I can use the same setup wherever I'm coding or fixing or editing config files, etc.
Yes, I understand what you mean. But this is not the case for me. I pretty fast chose vim after trying out a handful of IDEs/editors in my first week of programming and since then stuck to it. What I am asking now is whether vim might not be able to fulfill my requirements once I become a professional programmer. I am asking that because, as you probably now, one has to put much effort into vim in order to get the best out of it. It would be a pitty if it was in vein in the end.
Thank you! That's the kind of answer that is useful to me :)
Looks like sympy's plotting module does most of what I intended to solve, although with sympy expressions instead of python funcs. http://docs.sympy.org/latest/modules/plotting.html
Hey thanks for your answer! Did you have a configuration file when you used vim? And if yes, is it possible to bring it over to pycharm ? Otherwise, aren't you missing your own customized configurations? I mean it's cool to have the modal editing in pycharm through the plugin, but I think I wouldn't want to leave my configurations behind.
But what about a configuration file? Aren't you missing one?
Yes, that's the reason to use vim - to constantly use your mouse button, right?
If you want to use Vim as an IDE, you need to heavily customize it with plugins and supplement it with other tools. I personally use exclusively Vim as a PHP / Python dev at work. Well, my IDE is really Vim(with lots of plugins) + Tmux + unix + a folder full of scripts. My coworkers don't understand it, but i feel like I work most efficiently this way. Lots of poeple like the 'no mouse' idea of vim, but don't care for the rest of it. If that sounds like you, the best idea is to just get vim key bindings for a more standard IDE (i'm sure Pycharm has a vim emulator setting). Vanilla vim is kind of awful to write code with, and I have always felt like it doesn't become efficient as an editor until you have it heavily customized for your specific domain, so unless you wanna spend countless hours working on your .vimrc, just get something that works out of the box. Vanilla vim isn't better or worse than any editor, but a heavily refined, plugin boosted vim can be extremely powerful. It just takes a long time (several years in my case) to get it perfect to where you can use it instead of a traditional IDE. Vim wasn't meant to be an IDE, but you can damn sure make it one.
That's not true and you know it - at least if you have some knowledge about vim. 
Yes, that is one of the main reasons I started using vim. Here I am really asking about its limitations, but of course I am always happy to hear some advantages ;)
Awesome work on both the project and visualization! How many hours would you say the game took to code, total?
Awesome answer, thanks. If you use vim for 20 years now and haven't faced any limitations/problems then that is a big insight for me. May I ask why you started to use PyCharm at all although you were so pleased with vim?
This reminds me of the time someone made a tutorial video on how to install my open source package. I had an Installation page that walks you through it. He advised people to copy the directory into their PythonXX directory. I was horrified. One problem with doing it this way is you're going to have too many files in your application making it larger than it needs to be, making it slower to unpack than it needs to be. Another is the end user can easily unpack the "exe" because it's really just a tar file. Then they can get your source code. They also don't get your shared libraries which are often required. It's much better to use pyInstaller. It exists for a reason.
Something I'm contemplating. Realistically, the UI will be a separate project that integrates with `riko`. This way it can support multiple front ends.
thanks.... where did you see it first? And apparently my reddit-fu is still sub par since the project got much more attention on HN than here :/.
Actually it's less about writing the code and more about editing it. Here, vim's modal editing offers me a hell of speed and precision - which you surely know as you are using vim 20x longer than me. Also I have already read in some answers here that debugging works much smoother in pycharm. If that is the case, this also might lead to a significant speed difference. So to clarify it once again since I maybe didn't specifiy it well enough, I am not only referring to speed differences in actually writing the code but in the whole code production process.
Does it work like the .vimrc?
Why is this overly exagerated comment a "good point"?! I actually spent a year customizing and improving my vim environment. Thinking that one could emulate this with a 5 minute pycharm install is just delusional and can just stem from a person who does not know anything about vim. Sure, it takes a while to get used to vim, but it's 100% worth it. I also don't see a need for a religious discussion since I am not asking "What is better - vim or pycharm?", but whether there are valid reasons to drop vim as an IDE at some point for possible limitations and drawbacks... 
Not really, no. For me, vim just gets out of the way and let's me work. Of course, if you've already gotten used to working in an IDE, it might be an adjustment but, once you get used to it, you'll never look back. 
Use the tool for the job. If I am doing data analysis I use a Jupyter notebook. If I want to build a small application, I will probably jump into Spyder. Tinkering I use Jupyter QtConsole. Jumping around looking through source and doing small edits I will use vim. That being said, I'm working on a Qt project and use the vim plugin in QtDesigner. If Spyder had a Qt plugin I would be a very happy man.
Any idea why they force us to redownload? Doesn't that just increase the bandwidth costs compared to if they'd provide delta updates? Do people who paid for PyCharm also have to redownload the whole application?
Looks like it pretty much does, with access to an ":action" command to bind keys to IDE actions. [Here's a random person's .ideavimrc](https://www.codatlas.com/github.com/beloglazov/vimrc/HEAD/.ideavimrc)
Ok cool, thanks alot. I will try it out :)
Yes! I already started learning some vimscript for customization purposes and am currently using a fair amount of plugins. I won't ever change the language (python) though, but probably learn some new ones though :)
Wow, calm your .vimrc mate. I like that I can just download and install PyCharm and then all features work. I do not need to hassle with YCM (it's a pain to install and compile in Windows where I do most of my daily work) and all debugging and syntax-features just functions. It was merely my 5 cents and seemed like the point of the original comment. I hope you have a lovely summer.
It's common practice to downvote for no reason here, even if you give the correct answer to the OP's question or just express your personal thoughts in polite way. I'm sorry about that but... just bear with it.
Edit: Moved to nested reply
That's what stood out to me. I was thinking "wait, if we're trying to justify using VIM by how quick it is to click stuff, then I've missed some major revelation about VIM."
Thank you. That is good to know. Makes me a little bit less sad ;)
Actually, static checking for static-typed languages is underused as much as static checking for dynamic-typed languages. Things like "this variable is set but unused" (hinting at a mistake in code) apply anywhere.
It's not overly exaggerated. In my experience, the people that enjoy vim are people that like to fuck with things. Tweak this, customIze that. Vim has tooooons of plugins, and they take time to find, install, and personalize. There's nothing really *wrong* with that approach. But, pycharm has a ridiculous amount of features out of the box - all setup, finely tuned, and ready to go. As someone who just wants to install something, have it work perfectly, and never have to mess with it again so I can just do my job efficiently: pycharm is amazing. Your question should be, "do I want a text editor with a whole bunch of crap dumped on top to simulate an IDE, or do I want an actual, properly built IDE?" Sorry to ruffle vimmer feathers, that's just how I see it.
&gt; all these new editors coming out recently feel like toys. I don't necessarily agree with that. Vim is both limited and empowered by its terminal-first nature. Atom, for example, is excellent for web development, and PyCharm (or any other IntelliJ-platform IDE) is great for development with more than one language - its flexibility is really quite remarkable for a truly integrated system.
Thank you for your feedback, I am not storing user password in plain text see https://github.com/Leo-G/Flask-Scaffold/blob/master/app/users/views.py, I also have input validation which I will be working on optimizing. - Its not a meme its a screenshot of the blog front page - Will clean that - Will remove - was there from earlier i guess, will remove - need to work on tests so will work on it - k will change - didnt get you - k - yup will add - will do - its easier to remove if i add it in the module folder - how would you go about setting it? Thanks again
Nobody should switch to Python **3.0**. The current version is 3.5. 3.0 itself was buggy as hell, it was dropped without support and replaced with 3.1 almost immediately. But now, you really shouldn't be using anything older that 3.3.
Yes, it is still overly exaggerated. You said you need a 5 minute pycharm install to emulate a one year long vim configuration. Why are you claiming one would have to install crap? There are plenty of well designed and sophisticated plugins available and it's easy to find them. Again, its totally understandable and cool with me if someone wants an easy install and just work right away. And I believe that pycharm works great. But that is not the topic here. You just critize and exaggerate without providing arguments. 
&gt; thanks.... where did you see it first? And apparently my reddit-fu is still sub par since the project got much more attention on HN than here :/. HN first for sure, I only found that you had posted it to Reddit when I tried to post a link to your repo myself to the /r/datascience subreddit. When I did that I got the message back that it had already been posted, and then I found this thread under the "other postings of this link" tab at the top. So yeah, I think that it's hit or miss with reddit if the search engines will make it a top result. Speaking of, I found your project initially by searching "stream processing python" on google, there were a few projects including yours to sift through, and the riko HN thread was there too. Yours looks like the most serious and well-maintained, though it would inspire more confidence if there were more contributors to the project. I know that's A LOT easier said than done, but that seems to be the pitfall of most of the projects I read about.
Yeah right, if someone wants to learn python (and has no prior programming experience) I would also suggest using e.g. ipython (notebook) and/or a simple to use text editor/IDE in the beginning. But after that novice stage they might want to improve their productivity. Vim is (one of many) solutions for that. And yes that is absolutely not the topic of this post. &gt; If you want to use Vim, then use Vim Thank you! &gt; I don't feel that it's the best choice for max productivity... Please tell me why! Since getting to know those limitations is exactly the reason of my post! &gt; ...but you can use what you like. Thanks again. At least you are generous ;) 
&gt; Please tell me why! Since that is exactly the reason of my post! Because on top of my workload, now I have to worry about my environment more. PyCharm "just works", Vim does not. I have more stuff to mess with in Vim.
Thanks. Definitely going to be keeping an eye on this project.
&gt; I am not storing user password in plain text see...Its not a meme its a screenshot of the blog front page Sorry, I missed these. &gt; how would you go about setting it? You use functions to construct your application, you could do something like this in run.py for example: from flask_resful import Api from app.foo.bar.api import HandleUsers def api_resource(): api = Api(__name__) api.add_resource(HandleUsers, "/api/users") return api api = api_resource() The other advantage with an approach like this it puts a lot of the wiring in one place which makes understanding the structure of the application easier. 
Thank you for your valuable answer. I understand and agree with a lot of your points! One thing that I judge a little bit different is the assessment of: &gt; Plugins that take a while to realize you need, and to set up... For me, that is a fact that makes vim great for me. One usually starts with a small default configuration and then the .vimrc grows with ones own knowledge and needs. When time proceeds one discovers things that would be useful and then installs a plugin/writes its own one, construct mappings and so on. Such that finally one achieves a highly customized and personalized configuration. (again, I understand the choice to start with a ready to go environment) What I want to say is that I don't see it as a weakness but as a strength of vim that one always discovers new useful stuff and modifies the configuration to ones own needs. Btw: thanks for pointing out that plugin, I just thought about something like that a couple of weeks ago :) 
Another user posted about .ideavimrc, but I'm not familiar with how well .vimrc will port over. My main point is that I was staunchly opposed to the need for a full-fledged IDE until I gave PyCharm a go. After about a week PyCharm just started to feel smoother. The two things that really kept me around were the code profiler and debugging tools. I still have the advantages of modal editing, macros, etc but with a lot of extras too. I think it's worth it to grab PyCharm Community Edition and give it a run for a week or two. At first it will seem huge and clunky, but you might find some things you really prefer in it. If not, you have your finely tuned Vim setup waiting with open arms.
Thanks will use this
By 3.0, I pretty much just meant anything beyond 2.7.
I benefited from computer free classrooms. Sometimes the keyboard is only a distraction.
Teaching programming without keyboards is like doing engineering without property lookup tables.
By doing do you mean teaching engineering?
It is cool project. You can even compile python scripts to .net dll. Wish it supported py3 and not die.
26 y/o here. All throughout high school i took all computer stuff and went on through college to get associates in PC support and how have 5 years in the field as sysadmin / network engineer. Back in high school they started with BASIC as a freshmen, moved to javascript by senior year. The BASIC stuff made no sense to me at all, the concept of flowcharts was mind boggling. On the absolute very last project we had with BASIC the concept of programming clicked to me and I learned to read the code. If / Then statements finally made sense and it was a huge epiphany for me. Unfortunately after grasping it my freshman year I got into Javascript and it was horrible. It was all taught from a book and a good major of the assignments were drawing ASCII art to the terminal using statements. I think Python is a fantastic language to start as someones first language and wish I had. To learn Python I used http://learnpythonthehardway.org/ which i think follows a great path to teaching someone brand new to programming how stuff works 
It's a 2 word phrase. I'm not exactly sure what the question is. Teaching. (As in instructing someone how to do something.) Engineering. (Subject) 
Yes, anectodes are apparently the only valid and accepted type of evidence in here (see upvotes). But you came too late. The "Use Pycharm" comment at the bottom had already convinced me with its striking argument structure.
I'm sorry, but ... `x.isdigit()`.
I thought I was missing something, but it was a nice little challenge to try and figure it out :P Thanks for correcting me Edit: Did a little more research and found this try: val = int(userInput) except ValueError: print("That's not an int!")
Are you maybe installing an upgrade? And not the whole thing?
Name the function parameter whatever name best suits its use as a function parameter. Name the argument whatever best suits its use in the caller's code where the argument lives. Giving made-up toy examples like "eggs", "spam" etc will not give any insight. Instead, look at real code. Here's a real example, for the SpamBayes project: there's a text classifier with a method taking two arguments: class Classifier: [...] def classify(self, text, evidence=None): ... The parameter names are called `text` and `evidence` because those are the names which best describe what they are for *inside the classify method*. But when this gets used, you don't have to use those names. You can use whatever names makes sense *to the caller*. In this case, it's hard to think of a better name than `evidence`, but not so for `text`: c = Classifier(known_spam, known_ham) message = get_text() # the unknown text we want to classify evidence = [] # Classifier will stuff the evidence in this list rating = c.classify(message, evidence) The parameter is called `text`, because that's a generic name that best suits the method. The argument is called `message`, because that's the specific name that best suits the caller.
Read your first post carefully, you say "doing engineering"
This is the most Pythonic way of doing it, though there are many options and some would consider this one a tad bit "over-engineered" (EDIT: maybe I've spent too much time around my buddies using C++) I usually go with the `try except` because it follows EAFP principle http://stackoverflow.com/questions/11360858/what-is-the-eafp-principle-in-python
You can now use `%matplotlib notebook` to regain these functionalities while still plotting within a Jupyter notebook.
&gt; It's a 2 word phrase. I'm not exactly sure what the question is. To do something would you have to be taught how to do it? 
Python 3!
1. Give the students code and ask them to tell you what it does. 2. Teach them to use informative variable names. 3. Provide assignments in which the students have to use provided helper functions. 4. Graphics are a great way to learn OOP.
The 'best' one has the features you actually use. If you're going deep into the rabbit-hole of vim and enjoying it then keep going. PyCharm or some other IDE won't gain you anything if you don't learn it and use the features it provides, and if you're not really into learning them it just becomes a glorified text editor with syntax highlighting and some auto-completion. 
That's the pythonic way. 
The most important to me is: there is no right way. There's a sliding scale between useful and practical and hard to use/slow/unmaintainable. Some practices sometimes are at one end and sometimes at the other end. There are rules of thumbs but no hard rules. 
Ok. And given I was willing to put some effort into learning PyCharm or some other IDE? Then you'd say I should prefer it over a "mere" customized text editor or what?
Can't get it run on Linux for me right now to check, but does anyone know if it still has the weird unicode/bytes behavior? Last I played with it, I remember it did something where native strings were unicode (ala python 3!?) but `u'\xe0'.encode('utf-8')` would return a unicode string, not bytes... breaking any functions that tried to encode unicode to bytes before working with it, and opening up a world of double-encoded text. Couldn't quite understand how that didn't cause problems all over the place. 
As others have pointed out, there already exists a function for this purpose, however, this could be rewritten to make it easier to read. def checkInt(x): for digit in x: if digit not in numberTest: return False else: return True Although if you're just starting out, this might be a bit harder to understand. Essentially, doing `for digit in x:` removes the need to assign a variable to `len(x)`. Also, the `else` statement on the `for` loop will only execute if the loop did not terminate prematurely (due to a `break` or, in this case, a `return` statement out of the function altogether), thereby removing the need to keep a counter and comparing it at the end. I recommend watching[ this talk on loops](https://www.youtube.com/watch?v=EnSu9hHGq5o), he covers a lot of concepts relating to looping in Python.
Preference is subjective, you already prefer vim from the sounds of it. Unless an IDE has some killer feature that you can't find a vim plugin equivalent for, and you can't live without that feature stick with vim. 
Remember Python has its own idioms, so called Pythonic coding, that you should teach. * Python has names rather than variables. (Objects are typed rather than the names that "tag" them). * Python most often will use `for item in container` rather than accessing by index. * Python is a multi-paradigm language. You are not forced to *always* declare classes. * Python comes with a useful command-line interface, (REPL), which is embellished in idle, ipython, Jupyter, ... ... 
That was a good read. Makes me wish I had a decent data set of tagged faces of people I know.
`kill -SIGREKT`
Ew. Edit: heh
__IMPORTANT EDIT 2__: [RC2 is out](https://github.com/IronLanguages/main/releases/tag/ipy-2.7.6-rc2) this contains various fixes for the ipyc compiler, it should now appear in both the zip and msi, and the missing dependency was added. ~~__IMPORTANT EDIT__: it appears that the new compiler ipyc is not included in the `.msi` installer. If you want to use it, please use the zip package instead.~~ As promised, the new IP team has released a new Release Candidate. Here is what is new: &gt;* a new C# based IronPython "compiler" named ipyc that adds some additional features over pyc.py * a major memory leak fixup from @jdhardy that should resolved several memory leak issues that have been found over time * the removal of Silverlight from the packages * other bug fixes The stable 2.7.6 release is expected around Aug. 5. Please note the current RC is not on Nuget (yet).
You really can't go wrong with either vim or emacs. But if you think putting effort into anything will never lead to wasted effort, you're in for disappointment :P. Also, I don't know why you're being downvoted so much. It's a bit strange.
With emphasis on PEP 8 standards.
I'm no expert, but I don't understand this. Even with wsgi, your code is still being called by Django. Just because you have code that calls to Django also doesn't alter that basic behavior. Perhaps TheBB's answer was not sufficiently broad as a definition, but I think it's generally correct and a useful correlation. A framework may be a library, but a library is not a framework--even if it is large. Look at examples-- SQL Alchemy - It focuses on database manipulation, which is a large and complicated scope, but a very focused objective. SQL Alchemy is a library. Django - Among its many features, it has an ORM that could be used to interact with the database, and this could be viewed as an alternative to SQL Alchemy (albeit incomplete). You can use SQL Alchemy within Django to replace the ORM if you wish; you can use Django's default ORM; or you can use other methods of interacting with your database. You may even use some kind of javascript frontend interface that winds up interacting with the database directly. And yet, your python code will continue to be executed by Django, passed to the webserver via wsgi, and allow for the integration of all other features and 3rd party applications that are offered in the framework's ecosystem. It is pretty large (though modular), and it is a framework Pyramid - Pyramid lacks a lot of the default features and size of Django, but it is also a python web framework--one which focuses on minimalism and customization. It does not include as many features by default, but allows you comparable choices and functionality--and again, access to its ecosystem. Frameworks tackle more complex, higher level implementation problems that require multiple solutions, and provide a way for those solutions to interact with one another. At the end of the day it is just a term, but we should all strive to use terms clearly and consistently to facilitate clear communication with one another. This is a nuanced term, but it does consistently refer to software which coordinates the functionality of multiple parts (including your own code) in order to help you compose a larger application. 
Was going to say this. 
I think it's important to teach students to think about how to accomplish a problem before they ever touch any code. For example, let's say that for a first assignment you ask your students to write a program that asks for the students name, then says "hello [name]", you could mix it up by requiring that the students capitalize their name or else it asks them to try again. Before your students start to write the code for this program, ask them to give you specific steps that have to happen for this program to work, IE: * print a message asking the user their name * get a line of input from the user * if the first letter of the input string is a capital letter (using isupper() for example) then print "hello [name]" * otherwise ask for input again and repeat Once you have these steps defined it will be fairly easy to fill in each step with code and produce a functioning program. This method will teach your students how to think about a problem, which is the most important skill young programmers can have 
Maybe use something like twilio (there's an unlimited time free trial) to practice installing and importing modules, and it brings your code "closer to reality" if you get what I'm saying, because learning code is boring if you can't apply it to interesting stuff 
Just do variable.json() and you'll be returned with a dict 
[Turtle](https://github.com/3-strand-code/assignments/blob/master/Python/01. Draw something with a turtle.md) is an amazing way to get people started!
Shut up, he was sharing something he made, there's absolutely nothing sad about this. This kind of attitudes makes beginners scared of sharing what they do, stop it. 
In Go a code with an unused variable cannot compile.
A few items of feedback: 1. Consider [pep8](https://www.python.org/dev/peps/pep-0008/) formatting. `check_int` and `check_length`, etc. Of course, you maintaining a consistent style is great. 2. Look into methods on the string object (`.isdigit` as others commented) [getting a general familiarity with the standard library and how to read the docs is a plus] 3. You can directly iterate the letters without doing an unnecessary range (`for char in x: print(char)`). Much cleaner 4. If you are looking for all (or any) things to match a condition, you can look into the [`any`](https://docs.python.org/3/library/functions.html#any) and [`all`](https://docs.python.org/3/library/functions.html#all) operators. 5. An advanced concept would be to use a list comprehension Using all of those above you can simplify your function to: def check_all_chars_int(x): return all(letter.isdigit() for letter in x) [edit] Though really that should just be `x.isdigit()` in this case since you're checking that all are digits. [/edit] Removes all the noise, and fewer lines of code *often* translates to better maintainability over time (this isn't true if the code is overly terse). By the way, keep up the excitement - shipping stuff is much more important than always worrying about making it perfect. Keep it up!
Teach them as much as you can how to use documentation, it is an incredibly useful thing not to be intimidated by it all. As someone else said, try to get them to think the problem through logically and do the maths on paper before writing anything on the computer - some students in my experience try to just write almost whatever they think of to try to make it work, without spending enough time planing or thinking about the problems before they start.
As mentioned above, the pythons way is to wrap it in a try catch block, better to ask for forgiveness than for permission 
I wish I had known about pip when I started. It makes installing packages so much faster and less disruptive. Virtualenvs are also something I wish I'd learned to appreciate sooner, they keep things so much more organised. In particular [virtualenvwrapper-win](https://pypi.python.org/pypi/virtualenvwrapper-win) has been very useful to me, as a Windows user. 
You shouldn't be afraid to share your code because of comments like yours, there's a way to deal with this, it's in all the other comments, people talking about the approach, about the native functions, about the pythonic way, he even did some research because of this and found the most idiomatic way to do this. He even got lectured about loops and a better way to do what he did. He learned something about this, he shared, people shared knowledge back to him, thats the way it should work, he isnt suggesting it's perfect nor everyone should use it in every project. He mentioned that he has a limited knowledge. He came out a better programmer after people feedback, your comment adds absolutely nothing, as it shows no examples, no documentation, no better way to do it, you're just scaring him away from the community with asshole comments. This is exactly why people are afraid to share what they do, because some smartass will tell them "oh thats shit". There are different level of beginners and we should embrace them all.
I think the main problem with most of what kitware does is that their documentation just isn't any good. I myself spent some time trying to use paraview to do some scientific visualization stuff, but in the end decided it wasn't worth it if no one else would be able to figure out how to maintain the tool I built using paraview since the documentation was nonexistent. 
What is that `else` doing?
Can a code where the same check is repeated twice over `and` compile there?
"You know what would make things better? Hidden, shared mutable state" - Satan, and also apparently a couple of Ruby developers
Wow.. I never fully understood 'self' up until now and now i'm just blown away by how cool it actually is! Thank you for posting this. (I know, mutability is bad.. but damn.. dynamically changing functions!)
Py3 support is supposed to hit 1.0 by the end of the year. I too look forward to it!
It's a keyword even though it isn't a keyword. I don't understand how anything works anymore.
This is a pretty awful post, because it lies about how methods actually work. I've copied my response to the article below: You really shouldn’t say things like: “When you define an instance method on a class, it creates a corresponding “bound” method on the object. This aliases to the unbound method on the class.” because that’s not what actually happens. “Methods” are actually instances of something called a descriptor that reside on the class object. They intercept attribute access on the object and return the bound method that you see AT THE TIME OF ACCESS. This is an important distinction because it means the the following is NOT true: “Modifying the unbound method will also change all existing bound methods.” Here is an ipython interactive session demonstrating this In [1]: class Test(object): …: def a(self): …: return 1 …: In [2]: original_a = Test().a In [3]: def a(self): …: return 2 …: In [4]: Test.a = a In [5]: Test().a() Out[5]: 2 In [6]: original_a() Out[6]: 1 
it's not a keyword, it's just automatically passed to methods of a class. Class methods do the same thing except instead of passing an instance of the class, they pass the class itself. "self" can be named anything, which is why you often see it named 'cls' in class methods. 
How does it work on non faces? For example how does it know what a banana is vs an apple?
Thats sad :( UAP or UWP: https://social.msdn.microsoft.com/Forums/windowsapps/en-US/ac968e19-7a6a-472d-890e-a6ce4d8bdc19/uwp-vs-uap?forum=wpdevelop
It is a different strategy. I covered that in Part 3 here: https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721
And that's where I think teaching programming is done wrong. &gt; the teaching will mostly involve trying to string together bits of example code without thinking about what is actually happening in the program. That's how some people learn. I learned every language I know by copy paste modify. If a kid wants to make a 3D game or website, give them a fully finished 3D game or Django website. First homework assignment is tell me as much about the template you were given as you can find. Then teach the basics in from there. - Is the ship in your game green? Make it blue. - Make the ship's color rotate through a loop of colors. - Set the ship's color to depend on the score in the game, etc. Look at it like an Arduino. You *could* teach HS students how to build one from scratch and at the end of the semester they might have a working Arduino. Or you could just give them what's already been done by someone else and let them modify, fix and extend that into something bigger. Edit: Case in point. I don't know the math behind a good portion of [this code](https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721#.rash4zsv1) for machine learning. I don't even know what all the different imports do at the top. Perhaps one day I will, but for now I'm just going to start tweaking that code until I train my own network of images and go from there. 
Thanks for your input! I tried to emphasize that it’s more complicated but also a “useful lie.” While if you assign the bound method to something it will be use the original code, every time you call `object.method` it will count as a new lookup of the descriptor. For example: &gt;&gt;&gt; one = Number(1) &gt;&gt;&gt; p = one.plus # lookup &gt;&gt;&gt; print(one.plus(2)) 3 &gt;&gt;&gt; Number.plus = lambda self, y: self.x - y &gt;&gt;&gt; print(p(2)) # already initialized, so old method 3 &gt;&gt;&gt; print(one.plus(2)) # counts as a new lookup, so uses the new method -1 Another quirk I didn’t really talk about is that “unbound methods” don’t actually exist in Python3! In our case, you can use Number.plus on any object that defines x: &gt;&gt;&gt; class Foo: ... def __init__(self, x): ... self.x = x ... &gt;&gt;&gt; two = Foo(2) &gt;&gt;&gt; print(Number.plus(two, 2)) 4 &gt;&gt;&gt; print(two.plus(2)) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'Foo' object has no attribute 'plus' Crazy, huh? I agree that the post isn’t perfectly capturing what’s going on with methods (as you said, I didn’t at all talk about descriptors), but I think that this clears up more confusion (why we have to write self, what’s going on with methods, why changing the class definition affects existing objects) than it creates (why calling an assigned method will use the ‘original’ behavior).
I really don't believe in "useful lies" in general, and especially in a case where what is actually going on is no more complicated, and offers a better explanation for WHY things are the way they are. You wrote: "While if you assign the bound method to something it will use the original code, every time you call object.method it will count as a new lookup of the descriptor." Right, and so you should say EXACTLY this in your article instead of "When you define an instance method on a class, it creates a corresponding “bound” method on the object. This aliases to the unbound method on the class. Modifying the unbound method will also change all existing bound methods." because this suggests SO MANY wrong things that may lead to confusion for novice developers: - That something actually happens on EACH object in the system when a method is defined. Or that the the bound method is somehow instantiated at the time of definition. - That some object somehow NEEDS to get modified at runtime to correct for the fact that the definition changed. Also, you write: "Aside on the aside: you should probably check out Javascript anyway, because object prototyping is really close to what we’re doing with unbound methods and JS uses prototyping much more openly and explicitly." This whole post reads very much like someone trying to apply javascript programming methods to python which is a silly thing to do. I seriously doubt that any developer experienced with both python and javascript would agree that your claim is true. 
Pycharm reduces cognitive load. VIM seems great, and if I had gone to college for computer science and had the time to chill and swap vim configurations with my Linux homies, I'm sure it would be the leet choice. But I didnt. I am a self taught cowboy coder/dev ops/web developer. Pycharm.
Do you mean like this? (lambda x: x)(1) That's necessary to resolve ambiguity. And why are you running a lambda on the line it was written? Why not just run that line of code? If I'm misunderstanding you, could you show me an example of what you don't like and what you wish would work?
The short answer: You dont need them, but for any significantly large or complex application, you'll probably want one. The long answer: Frameworks help reduce yak shaving, reinventing wheels, analysis paralysis, and/or overtooling hell, by solving common issues with simple solutions in an attempt to have the developer spend as much time focused on domain problems and business logic, instead of solving tangential problems related to the development of the application itself. The short answer redux: Use a framework.
It is, but in about 6 months you will be able to use it! (I hope). I guess I was confused. I thought UWP was for 8.1 and UAP was for 10...
https://docs.python.org/3/howto/descriptor.html#functions-and-methods does a pretty great job of explaining what is going on.
I made something in the bathroom that I'm pretty proud of. Would you like to see it?
I was talking about the second version, whereby I have my own metaclasses that I want to mixin with this packages metaclass. Much like you have done with ABCMeta, but it needs to be in a more flexible way.
Sorry dude-- on mobile.
Looks cool, but could probably have better test coverage.
Oof, I prefer the "assign a lambda to a variable" over "define a one-line method on the same line as the 'def' statement" style. But PEP-8 agrees with you. Thankfully, it's not really a rule, more of a guideline...
&gt;Classic use case for a lambda expression As a side-point, it's an even better usecase for a higher order function. Eg, you could write the same thing as: import operator li = [('A', 10), ('B', 9), ('C', 8)] li.sort(key=operator.itemgetter(1)) which doesn't need the lambda, and will be slightly faster. There's also `operator.attrgetter` to generate a function that accesses a specific attribute, and these are pretty useful for a lot of very common key function cases, though you may still need a lambda for slightly more complex ones (though as you say, as things get more complex, you're probably better off with a named function anyway).
A long time ago IP was usable with Silverlight, and thus the default implementation had it. I think it just never was removed till now.
Well, the comment is sort of a joke, of course. But you can do client-side web stuff in just about any PL you want these days. Look into languages that compile to JavaScript.
Yeah, I'm aware of transpiling, in the end, it still actually runs JavaScript? :)
Great point! I kinda meant using lambda as the `key` in the sort being a classic use case (it's almost the only place I use them) but this specific example is certainly better as you described.
But then the repr on your lambda is lame. &gt;&gt;&gt; first_item = lambda x: x[0] &gt;&gt;&gt; print(first_item) &lt;function &lt;lambda&gt; at 0x10960c048&gt; That's why I wrote this sweet function. &gt;&gt;&gt; def name_lambda(lambda_): ... name, = (key for key, value in list(globals().items()) if value is lambda_) ... lambda_.__name__ = name ... lambda_.__qualname__ = name ... &gt;&gt;&gt; name_lambda(first_item) &gt;&gt;&gt; print(first_item) &lt;function first_item at 0x10960c048&gt; 
Wow. I did not know about item/attrgetter. Thankyou sir.
`this` is useful if for some reason you're returning a class definition out of a method call but need to access the instance that defined the class: class Thing: def make(self): class SubThing: def report(this): print(self) return SubThing Not that I would know anything about this sort of dumb fuckery. 
That's way better! Integrated into a different take, using a new class. import traceback import ast class NamedLambda: def __init__(self, lambda_, name=None): self.func = lambda_ if name is not None: self.name = name else: tb = traceback.extract_stack() nd = ast.parse(tb[-2][-1]) self.name = nd.body[0].value.args[0].id def __call__(self, *args, **kwargs): return self.func(*args, **kwargs) def __repr__(self): return '&lt;function {} at {}&gt;'.format(self.name, hex(id(self.func)))
Hey, I'm a high school teacher that's been teaching Python for a little under two years. The general subjects I try to touch on can be seen [here](https://docs.google.com/document/d/15w-w5KPCJtZ81odomPsa6vWPPNz6O7d6n-NXROg_VbE/edit?usp=sharing). The biggest thing for the students to learn is really just how to think like the interpreter. What the instructions mean, and why Python yells at you. That a nested loop will run completely before the outer loop can increment. That type of stuff. Also, it's super important that they get in the habit of *reading the error messages*. Also, focus on descriptive variable names and using docstrings for functions! The amount of hand-holding needed depends drastically on the specific students in the class. So that's why that outline is tentative. Plus it's fun to adapt to the kids' interests. The ability of the students in your class will most likely fall in a bi-modal curve. The lower kids *can* program, it will just take them twice as long to learn. I make all my students watch [this video](https://youtu.be/Mcc6JEhDSpo) within the first few days of class, which I think really changes how a lot of the students approach learning -- even outside of CS. The first two weeks of teaching it will seem like the kids aren't learning much and you're doing a bad job. But then it will start to click for most of them and they'll start thinking programatically. Students like to compete with one another. I have found that kids like being given a problem where they compete to see who can program the best solution. One example is: I gave them a game where * a random number is generated (ex: 113) * Player 1 chooses a square to subtract from number (ex: 64 (8*8)) * new number = 113 - 64 = 49 * Player 2 chooses a square (ex: 4) * new number = 45 * continue until a player can get the number to zero -- that player wins The number can not go below 0, or the player who made it go below 0 loses. I make them program bots to play the game and then we have a tournament. If anyone can make a bot that consistently beats or is even with mine they get an automatic A in the class. Hasn't happened yet. Students also really like playing with breadboards and making logic gates that light up LEDs. So I spend about 2 class periods playing around with those. [This video](https://youtu.be/lNuPy-r1GuQ) is really useful for teaching that. Some assignments that I give my students that you might like: 1) Try to write a program that takes in text and then prints it in a box. ex: &gt;&gt;&gt; give an input &gt;&gt;&gt; example text *********** * example * * text * *********** 2) The first few problems on Project Euler are good. 3) Write a simple text-based tic-tac-toe game. The board state can be stored as lists. 4) Near the end of second semester, play around with coming up with solutions to the traveling salesman problem. If you download [the files here](https://github.com/Kylekmears/traveling-salesman-for-students) to a single folder, then you only have to modify the travelingSalesman function to return a list of the cities in the order you want. 5) I second the use of the turtle module. It's really fun to accidentally make fractals. This is one of the first things I do with the students. 6) There are 1000 lockers in a high school with 1000 students. The problem begins with the first student opening all 1000 lockers; next the second student closes lockers 2,4,6,8,10 and so on to locker 1000; the third student changes the state (opens lockers closed, closes lockers open) on lockers 3,6,9,12,15 and so on; the fourth student changes the state of lockers 4,8,12,16 and so on. This goes on until every student has had a turn. How many lockers will be open at the end? I hope this helps. Cheers!
I suppose it depends on what your particular needs are. I was a die hard IDE user until I started working at companies where I was working on large code bases in multiple git projects. For instance, someone would call me and ask me to bring up x branch of y project to ask my opinion or test something. I would bring up the IDE and try to get it going to look at the code and it would just take too long. Out of necessity I began to use vim to quickly open or clone a project and be able to work on it, run it, make a change and commit it - never leaving the terminal. What I found was that living in the terminal (vim, tmux) gave me more agility and a quicker tern around time. I also found that vim had all the functionality that I thought I would miss in an IDE. So, if you enjoy VIM, go for it. If an IDE works better for you, go for it. 
It's useful in golfing code as well. Just chain IIFEs until your code isn't readable (though, that's kinda the point of golf). As an aside, check out `toolz.curry` it's not worth installing the entire package alone, but it's a neat tool to handle currying. 
As someone who has written a lot of JavaScript most of this seemed kinda obvious to me. Prototype based inheritance a bit tricky to learn but once you've gotten your head around it it's very powerful. The one thing JavaScript did wrong in this context is exactly what the explicit `self` in Python does right. In Python you can pass `obj.method` as a callback and it will bind the `self` argument of the method to `obj`. In JavaScript if you do the same it will pass an unbound function. If you reference `this` inside that method it will be undefined (or if you're not in strict mode for some reason it'll even default to the global namespace). In order to actually pass a bound function as a callback you have to call the function's `bind` method: `obj.method.bind(obj)`. Things get even more complicated when multiple objects and `call` are involved. Python's way of dealing with method binding is a lot more intuitive, in my opinion. edit: The following makes sense in JavaScript: var map = Function.prototype.call.bind(Array.prototype.map); var doubled = map([1,2,3], x =&gt; 2*x); // result is [2,4,6] The amazing thing is, that this works even if you replace either of `Function.prototype` and `Array.prototype` with any arbitrary function and array respectively. So you can do this and it still works: var map = function(){}.call.bind([].map); var doubled = map([1,2,3], x =&gt; 2*x); // result is [2,4,6] 
I remember the first time I used the try statement. It was a beautiful day. As was the day I realized you could follow except ValueError: with " None". Because you can actually choose to just do nothing in the event of an error.
Return True / else return False is a code smell. def checkInt(x): return not any(digit not in numberTest for digit in x) 
"The code is more what you'd call 'guidelines' than actual rules."
Why such a bloated config? Just drop tmux integration!
Alright it looks like I'll be using Tkinter and either Pillow or ImageMagic. Thanks!
This is a super broad question. If you narrow it down a little you might get more help at /r/learnpython. 
If you're not using the `this` parameter, it might make more sense to use a `@staticmethod` In a more general sense, IMO making the outer self `self` and the inner self `_self` (and I guess any inner-inner self nested inside that `__self`, and so on..) has fairly obvious meaning.
Unless you have a reason to use the built-in Python, use Homebrew distribution of Python instead, `brew install python` http://docs.python-guide.org/en/latest/starting/install/osx/
Starting a project like this on python2 in 2016 (almost eight years after the first release of python3) makes it a total non-starter for me.
Sorry i don't understand your question
Yeah, like... Facebook?
Using the system python 2.7 as a base, and user owned site packages: $ easy_install-2.7 --user pip $ export PATH=$PATH:$HOME/Library/Python/2.7/bin $ pip2 install virtualenv --user The key flag here is '--user'. System binaries, user owned packages. Now make a virtualenv to have a totally separate env from system binaries. $ virtualenv -p $(which python2.7) ~/python2 $ source ~/python2/bin/activate $ which python Tada! No Homebrew, no macports, no compile from source. Add $HOME/python2/bin to your path in your shell profile settings.
yes, thanks.
STOP CODE: STATUS_REKT
I didn't have trouble with any, and still use Emacs all the time... just not for Python development. I was just saying that these are a few of many useful features that come standard with pycharm (which is my current choice). Also my thesis was that OP should use whatever makes him/her most efficient. I currently think that pycharm makes me the most efficient. If you like Emacs/vim/whatever then use that.
Okay, I do agree with that. It's time I make the transition. The next update to Coffer will update the code to Python 3. Shouldn't really be to difficult to convert I don't think. Hopefully I'll be able to get that out within the next day or so...
Yes, yes, I'm an old stubborn dog. Haha. View the comment above. The next release 1.1.0 will update the code base to Python 3.
Another side note: Some modules that do some sort of pickling of objects/function arguments (eg. joblib) will complain if you give them functions that are not reachable, which seconds your point.
Facebook's graph API will even let you extract the x,y. Coordinates of the tags from the photos. https://developers.facebook.com/docs/graph-api/reference/photo https://developers.facebook.com/docs/graph-api/reference/photo/tags/
I'm interested which libraries the OP is talking about with: &gt; I always start my projects on 2, I contribute fixes to libraries that are written in 2 to add 3 functionality and I still hit roadblocks and default back to 2. I always default to 3 and haven't seen any major issues in probably a year or so. There's a library here or there, but they either have a separate option or end up being unnecessary anyway. [edit: Typo fix "There's. Library" -&gt; "There's a library"]
Also part of the problem is starting new projects in py2. I mean like.. Why..? :\
Does resharper do that much that PyCharm doesn't do for Python? Not a huge resharper user, but it seems similar.
Yes. DotNet Core still has breaking changes on a per-release base, and it still only does a fraction of what the "proper" (?) DotNet does... Random note: beginning projects in Python 2? At this point in time? really? That's a shame, man :/
I can't really speak for Vik (who wrote the post), but in my opinion it's one of those things where things can be done multiple ways in Python.
Do you know similar article but for Java?
So, how does the file containing problem data update? Thanks, that's the only thing that tripped me up
I use C#/.Net for my day job, but I supplement with Python and NodeJS. I use Sphinx for all of our documentation. Generally, Python is my go to language when I "need a tool to do a thing". I use NodeJS the same way -- but sometimes I luck out and find a better package or some combination of packages + pretty UI in NodeJS. Microsoft targeted "the enterprise" and did a good job of convincing the people that pay for licenses that their tooling was worth investing in. Unfortunately, they never bothered to support devs that contribute with tools/libraries instead of $$$ and the open source community festered. With Azure being their focus and Mr. Nadella at the helm, we've seen a somewhat different Microsoft emerge. This Microsoft seems to actually want to grow their open source community and sees the value in investment of kind other than $$$. We'll just have to see how that shakes out over the next decade. The point is, when you have a problem to solve - you look for the "best" solution. I think you do yourself a disservice if you don't include all of the tools at your disposal when you're formulating a plan.
Thanks, the terrain feature in deformable turns out indeed really nice. I have checked it out and gave it a try. Just to note, the slide and pinjoint example is also great. I could watch this slide seesawing back and forth for hours.
I do know R but am a bit of a rookie. What r books do you recommend? (can be free or paid). 
Yeesh. Slow night for captain pedantic.
Yes, hmm I develop mostly in Visual C++ (MFC, an old application) and C# as part of my profession and we try to keep new code as much as possible in C#. We're actually not doing that much web oriented stuff for a company of today, and in particular I haven't had to dive that much into it. I've tested the waters the past year though, just because web and web API's are very important skills nowadays. And particularly for web development work, I can see where he's coming from. When I create a new web project in Visual Studio, I get overwhelmed by generated boilerplate and questions like "Do I really need all this?" and "Why do I need all this?" pop up. Being new to this, I'm forced to believe that yes, it's necessary and no, you are not intended to ask why. To learn how to build a simple service, take this boilerplate and then work with this guide aimed specifically at this .NET version and this Visual Studio version. I've compared to Python 3 + Flask and what is going on is much, much easier to understand. Throw in some Peewee and let it build some models for you, and it is just so relieving. .NET is just so enterprise feeling and I'm no longer sure there is even a point to that. The rigid and exhaustive architecture that needs to be built is probably promoting good application design and supporting most things necessary in an enterprise out of the box so that teams get going with good design early, but programmers aren't drones that need all that structure, or are we? As for features, isn't a modularized system based on e.g. plugins better? Sometimes it feels like the structure becomes so unwieldy that you are hindered by that alone, especially when Microsoft introduces a new twist and turn because five years have passed and there is a new API that is "recommended".
Or, you know, I could have been talking about /r/Python users.
I'll have to look into them!
don't have one
edited In [1]: import traceback, ast In [2]: def name_lambda(_lambda): ... In [3]: a = lambda: ... In [4]: b = lambda: None In [5]: name_lambda(a); name_lambda(b) In [6]: (a, b) Out[6]: (&lt;function __main__.a&gt;, &lt;function __main__.a&gt;) # both a! I mean you already knew this (edit:probably!), but aaaa functions should act like functions, not statements!
He did not name any. Pretty sure if they were named we could point out actual solutions that are not py2. Never had a problem with starting new project in py3 myself. I am not hearing of people that cant start new project in py3 because XYZ lib is not yet ported. Unless that lib is some obscure abandonware..
Wonder of he has tried any of the other web libraries on .net? Like Nancy, Rest sharp, openrasta, or service stack?
I really wanted to use django zappa, everything I have is in python....
I use Anaconda on all 3 major platforms (OS X, Linux, Windows). Pip + venv generally works great but some packages aren't pip installable. OpenCV comes to mind here. Anaconda makes it easier to install opencv; that said if you are comfortable building the code from source then in principle there shouldn't be any issues. Obviously this makes is not a big deal for OS X and Linux, whereas building from source on windows could be a bit more complicated. I like being able to easily spin up new environments with a specific python version and have it install all my necessary packages. Anaconda makes this easy, however, again, its not like you can't do this on your own. Anaconda by default is rather bulky. Miniconda fixes this issue, mostly. In the end, since I'm not super worried about space when developing, I like the ease of just being able to take a new machine, install Anaconda, then execute conda create -n "MyProjectEnv" python=3.5 --file requirements.txt and it will spin up a new python environment with all my required libraries and specific python interpreter version. There are many other ways to arrive at the same end point, but for me (data science/analysis dev) Anaconda is easy and simple; I've yet to run into a reason to not use it (in my specific use case) but am open to change in the future if needed.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: https://www.reddit.com/r/Serendipity/comments/4ujbrf/disadvantages_of_continuum_analytics/
Generally, an IDE will be able to do more for a statically typed than for a dynamically typed language.
I guess it is mostly a matter of personal preference. We've tested several distributions and now settled on using Anaconda on both Windows, Linux and OS X (admittedly mostly on Windows) and really like it. It comes with most of the packages we need by default and we only needed to install a handful of extras. In addition, it seems to me that all packages were tested by someone before putting them in the distribution, so they would work consistently. This is especially true for packages with native components (also mostly a Windows issue though). They do provide their own packager (conda), but you don't have to use it - pip works just as well. 
&gt; I'd love an alternative to C# that isn't F# Well there is always VB.Net! :D Your point is well taken. I am really happy that IP exists. Anyway, before now, as jdhardy mentioned, people were too busy to work on it. Now though there are two motivated maintainers who are reviving of the project. I look forward to their work!
I think Python and C# are fine, and use whatever you want. I don't think either one has enough of an advantage over the other that I'd ever want to port an existing codebase, for example. But these complaints are a bit strange to me. &gt; In the .NET ecosystem, Microsoft provide the tools, and you must eat your vegetables. [...big list of Microsoft libraries and the newer Microsoft libraries that replaced them...] You don't have to. I used C#/.NET for web apps for a few years, and I don't think I used *any* of the libraries he mentions. Which is really just a special case of his next problem: &gt; NuGet.org is full of abandonware Essentially, he's complaining that many of Microsoft's own libraries are abandonware (which is true). The easy solution is simply to not use Microsoft's libraries that look like they're going to become abandonware in 6 months. I don't think anyone at my company had any trouble seeing it. Pretty much whatever Microsoft does, there's an open-source alternative, so use that instead. Yes, if you bet your business on ADO.NET, you're going to need to update all that code in a year. So don't do that. It's kind of an open secret that you never build on Microsoft's data access frameworks. Heck, Joel Spolksy mocked them for it [back in early 2002](http://www.joelonsoftware.com/articles/fog0000000339.html): &gt; Think of the history of data access strategies to come out of Microsoft. ODBC, RDO, DAO, ADO, OLEDB, now ADO.NET - All New! This line of complaints, in 2016, is especially strange since he admits at the end that he "always starts" on Python 2, tries to get to Python 3, and always ends up back on Python 2. If you're OK with using an old version, anyway, why do you care if you're using Microsoft's Nth-most-recent data access framework? He could have taken this exact same data, and flipped it around, to write an article about how he's switching from Python to C#, because there's so much Py2 crap still on PyPI (apparently), and Python doesn't even have a built-in DAL, and (his words) "Python on Windows is still kinda-sucky".
&gt;"There are only two kinds of programming languages, those which people complain about, and those which people do not use." -- Creator of C++
TL;DR: A: Object-oriented programming is bullshit. B: No it isn't. Show me your program and I'll improve it for you. A: Here's strawman.py B: OK, I've refactored it into everyprogrammingbookpage2.py A: Um, what about the part you didn't do? B: "I will leave it to you to figure out." A: Excellent, I am sold. Let us go drink more coffee and go to our subsequent businessy meetings. 
You'd be surprised of how much PyCharm can do with old-school Python (that is, no type annotations)
&gt; But I'm not familiar with how to set up PyCharm such that when I start the main entry point, the compilation occurs, and the modules are imported. I actually have no experience with running code via the Pycharm interface. I only read and write it there and only use the command line for actually executing code, so I can't tell you how you can integrate all this into a one-click solution. I can only tell you how you can integrate Cython modules in your setup.py: You can look here for a reference: https://github.com/ELEKTRONN/ELEKTRONN/blob/master/setup.py To summarize the important things: from setuptools import Extension Then define the extension modules that you need in a list: ext_modules = [ Extension('&lt;target (the compiled module will be importable from this location)&gt;', sources=['&lt;path to pyx file&gt;']) ] Then, in the setup() function, pass the kwarg `ext_modules=ext_modules`. If you then run the setup (e.g. via `pip install .`), the cython module(s) will automatically be compiled and placed in the location that you have specified above. You can also run `python2 setup.py build_ext --inplace` and the cython module will be compiled and placed directly in your project directory so you can access it without installing your project via pip.
There are a few that are important to the python world, but if you are using those - you're probably a Python Wizard and know when to default to 2 or 3 (Twisted comes to mind, though a lot of it now works in Python3 - not sure the whole thing yet though).
I have done a mix of C# .NET / GO / Ruby / Python. I like go, i like c#, i put up with ruby, i really like python. Here is how *I* and only *I* see it. Thus its an opinion. 1. Python is for getting stuff done. 2. C# is for billable hours. 3. Go is for when I want to be trendy 4. Ruby is for when I got no choice since last engineer used ruby, and i dont rewrite things. I agree with Anthony. Python is the default language, and C# is for niche cases. 
+1 on a readthedocs.io user style
I know that starting projects in Python 2 is getting a lot of flack. I am sure I will get down voted for saying this. However, until fabric and/or ansible moves to Python 3, it is crap for enterprise deployment and management. Python 2 will be my default until they migrate. 
I had two issues with it. The first was the FOSS thing - I think matplotlib was pulling in non-FOSS (or maybe it was just GPL) dependencies, and I was working on a commercial project. The pip version didn't do that. The other is that I kept getting a mishmash of conda and pip libraries because not everything was in the conda repositories. 
$15 for a short python script that makes a get request to yahoo finance or google finance on a timer? What functionality does this provide to anyone with a beginner/intermediate level of programming experience that they couldn't accomplish in an hour or less on their own? I can't imagine this being of any use for people that have more than a month or so of python experience and have looked over the requests library documentation. Scraping and parsing html from investopedia.com for the same information can be done in 30 lines of code(probably less, but I'm only a beginner/intermediate in python). Scraping from yahoo finance is even easier since it comes back in csv form. import requests def get_historic_data(symbol, year): url = str.format('http://ichart.finance.yahoo.com/table.csv?s={0}&amp;c={1}',symbol,year) data = requests.get(url).text print(data) if __name__ == '__main__': get_historic_data("AAPL", 1962) EDIT: Not intentionally being a dick about things, but this sub is mostly made up of people who are software developers and this post seems like you're trying to sell people some pretty beginner level web scraping scripts rather than discussing the topic of mining and analyzing data from the web 
/r/Python is not your personal JetBrains support channel
I was just trying to say it was super broad. I use a lot of modules in the standard library, which were created by users... Even some users of this sub reddit, but I didn't think that's what you were really looking for. 
Oh. I guess that makes more sense. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
This subreddit is for things related to the programming language Python, not for things related to snakes. Your comment has been removed, but if it's cute enough, you might try posting to /r/aww
Currently, it does not. As of right now, the file only contains the first 330 problems. It is definitely possible to automate to some extent, but the fact that a lot of the later problems use LaTeX for their descriptions makes it hard to get easily readable descriptions in plaintext format. Aside from that, the answers are not made public by Project Euler itself, but by people who have solved them. This means that answers aren't available for a lot of the latest problems.
[Fabric seems to have a Python 3 port](https://github.com/mathiasertl/fabric/) and it looks like [Ansible had supported Python 3 for a while](https://docs.ansible.com/ansible/developing_modules_python3.html). 
I usually don't down vote. Most Reddit users are dv happy.
As I stated in another comment, this was meant more towards /r/Python user created modules. The term user was used incorrectly, and I apologize.
[Ansible is starting to port but it does not work on managed nodes yet](http://docs.ansible.com/ansible/intro_installation.html#managed-node-requirements). The fabric team [specifically rejected that py3](https://github.com/fabric/fabric/issues/1050) port and is [working on their own port](http://www.fabfile.org/roadmap.html). However both are still into the future. 
I was just hoping someone would be able to guide me through this first one then i can pick up some speed from there.
This takes me as a rather biased article, he doesnt seem to have tried that hard with C# at all. There is not one mention of Linq which makes it very hard for me to take him seriously as a .net dev. There is also next to no talk of .net core stack [which released its v1.0 a month ago.](https://github.com/dotnet/core/releases/tag/1.0.0) As a python dev mainly, I have been dabbling with this new .net recently and its been fantastic so far (running on osx) and does exactly what he says in this article... &gt;In 2016, I want to create my applications as small, reusable packages The framework is much much more stripped down now so you only install the packages that you need. 
Ok, say I have a list of dicts, and the dicts contain various settings and configuration trivia describing how to acquire data from a kind of database. One of these configuration trivia is a lambda function (probably different for each dict in the list) which determines how to handle the result of the data acquisition - maybe it's a sum() or an avg() or similar. Is that OK?
you should use updog for this sort of problem.
print 'Welcome to My fruit shopping cart' print 'What is your name, adress, and phone number,' print 'Our inventory is Orange $1.00 each 2. Banana $2.00 each 3. Tomato $3.00 each 4. Grape $2.50 each 5. Pear $10.00 each 6. Lemon $0.50 each' this is what i have so far 
Dictionary elements need to have commas between them, ie. there should be a comma after the closing brace before 'score'. Also, this sort question is a better fit for /r/learnpython in the future.
The title was pretty authoritarian, but just about anything makes sense if you have a good reason. If you have a good reason to use a lamba assigned to a variable over a def, go nuts. I just don't see what it is here. I'd use functions in the case you described. (well, I'd use a custom class instead of dict in the first case most likely.)
If you're heavy into Django I can see why you might focus on both Python 2 and Python 3 support, since a *lot* of people still run Django on Python 2. There are some third party libraries that just haven't been updated, you end up having to either update them yourself or switching over to another library. Frustratingly, often one project will just be abandoned and instead of creating a compatible fork in Python 3, someone will just write a new, nearly identical library from scratch. 
You want `isdecimal`, not `isdigit`. The later includes things like superscripts. [See here.](http://stackoverflow.com/documentation/python/278/string-methods/1279/testing-what-a-string-is-composed-of#t=201607252123103016702)
&gt; The point is, when you have a problem to solve - you look for the "best" solution. I think you do yourself a disservice if you don't include all of the tools at your disposal when you're formulating a plan. Indeed. At this point I feel like for most basic tasks Python does such a good job that I turn to it for nearly everything. I do write a bit of bash here and there when I know I'm going to be messing with files a lot. But other than that Python is such a useful general purpose tool. Also I used to write pseudocode and then translate it to code but now I just go ahead and start out in Python since it is so close to pseudocode anyway.
Web frameworks don't require a lot of investment to be proficient - in most cases. I'm familiar with the w3c specs, most web frameworks try to create a semantically familiar experience. I'll probably never be an expert in anything, but I'm okay with that.
That's 100% what I read too.
&gt; Can you really be good at three very different frameworks though? Oh boy
I was hoping to see an example with this problem then I would work on others using this as an example 
I meant I start with 3, that was a rather dumb typo
So now you need to take in user input, store what they choose, and add up what they decide to buy. Think about how to go about that. It helps identifying what exactly you need to do. Then you can go about finding out how to accomplish each thing. 
If you're starting something new is there any reason it shouldn't work on both though?
rtds is about half-way finished, I'll probably wrap that up tomorrow, in addition, here's a sneak peak at boto3's docs which uses yet another sphinx theme that I've adapted for my palette/style. http://i.imgur.com/R0GNXNP.png edit: boto3 now available in OP
* For HTTP: Requests * For Web Development: Django, sometimes Flask * For Web Scraping: Scrapy **Lesser known ones that I've used and liked.** * Parsel: https://github.com/scrapy/parsel. Library scrapy uses for html parsing. * w3lib: https://github.com/scrapy/w3lib. Has a bunch of useful utility function for dealing with http and html. * dictdiffer: https://github.com/inveniosoftware/dictdiffer. Use it to find diffs in json datasets. * arrow: https://github.com/crsmithdev/arrow. Simpler dates handling * python-rq: http://python-rq.org/. Simple module for async task queues. Useful for simple tasks.
check out /r/algotrading 
Keep in mind that the lead time in a small app doesn't always indicate the lead time or maintenance time in a large app. 
Hm... Okay. I wonder if it will work on mine, since most of its attributes are `properties`, but that's a whole other question.
Tiny, light grey text on a white background. I can't read a damn thing on this blog. Thanks for the summary OP.
new keyword?
&gt;I’m not a “professional developer”, I never have been. I’ve been a tinkerer, hacker, innovator and (at some point) a product manager. I don’t code for money, I code for fun and I innovate for money (which involves a lot of coding). So you're not a 'professional developer', but you 'innovate for money' in a way that involves your development skills? Ok. (stops reading and walks off muttering that this is as bad as those 'I'm not a programmer but I program' types)
Ah, thanks for the info. I think they have an rss feed, if you're interested
Statically typed languages compare more favorably at larger codebase sizes. The larger the problem domain, the more types will be used. The more types, the more benefit you can see with a static type system.
Oh man, as a Python developer who's now working on a Ruby team I can honestly say Ruby is a terrible language. It's not actually a fair statement. Ruby as a language has its quirks the same way that Python has its quirks, and I don't think they're as similar as a lot of people claim. Ruby as a language is something I can appreciate, even though I'm more familiar with Python and I'll use Python if I have the choice. What I hate most about Ruby is the way people use it. The "convention over configuration" philosophy in Ruby seems to be the antithesis of "explicit is better than implicit" philosophy in Python. There's black magic and arcane arts EVERYWHERE. Maybe it's just Rails and Rails users that I hate....
You should look at the [Decimal](https://docs.python.org/3/library/decimal.html) module, which support arbitrary precision floats - but expect to take a performance hit. You might consider moving to C(++) and GMP (https://gmplib.org/)
It wont capture @properties, however, you could call it as follows: import pysize pysize.get_size(dir(obj)) - pysize([]) - 8 * len(dir(obj)) # remove the overhead from using dir This will include sizes of inherited or builtin methods &amp; properties. To skip inherited/builtin methods &amp; properties so you may want to skip those, which might look like (with some cleanup): to_measure = [getattr(obj, prop) for prop in dir(obj) if prop not in dir(object)] empty_list_size = pysize.get_size([]) pysize.get_size(to_measure) - empty_list_size - 8 * len(to_measure) In my tests this still included two unwanted properties (`__module__`, and `__weakref__`) however, nothing else. Keep me posted on how it goes!
Ruby as a language is really fun! It is the first language I used that did stream operations well. So, lots of .lazy.map(...) And so on. It has to this day affected how I program in other languages: do all the transforms of sequences first, lazily and then use for loops with much smaller, simpler loop bodies. But, it lets people do really crazy stuff like open up other classes and change them at runtime. Which is not a bad thing, but the problem is people do that kind of monkey patching as a matter of course.
I think all the magic gets exaggerated in rails, usually it's not quite as bad for other Ruby stuff.
I...don't understand any of it. It seems interesting none the less! 
 pb = {'speedrun' :{ 'TF2 jump' : [{'sitood' : '~ 6:00'}, {'score' :{ 'spelunky' : '~ 223.000'}}]}} Also have to use a list bro 
&gt;I’ve been a tinkerer, hacker, innovator (...) 
Although I'm not sure how this is a response to my post, I nonetheless agree 100%. I believe that history will bear out python's "explicit is better than implicit" mantra. A large number of bugs come from when people unfamiliar (or forgetful) of the implicit behavior try to make changes. Ruby the language is really very similar to Python the language, but the philosophy could not be more different (or wrong!).
Sorry I should be more clear; I was referring to many of the packages that make use of that ecosystem. There are a lot of packages that surround/make use of/ etc. those major libraries (and hence have similar binary compilation issues) but that don't necessarily have the appropriate builds. I have never found much cost to being on Anaconda, and its ease of use for non-pure-python packages has helped me many times.
That's a dangerous slope, and an awful reason. You need to show where you're at and ask specifics (e.g. I'm struggling to read user input, when I do X happens, and I tried Y...)
* I think [conda-forge](https://conda-forge.github.io/) is actually community-driven. It's [Anaconda.org](http://anaconda.org/) that Continuum runs directly. * I'm not sure what you mean by FOSS. conda is an open-source project, everything in Anaconda is free and open-source (except maybe the Intel MKL stuff?), the only thing that isn't free and open-source is tech support a few of Continuum's products. They're giving away a huge amount of code they write, and making it easier to install stuff that's already out there. +1 on the "all advantages, no disadvantages", also.
Will we eventually be able to use xamarin?
So these people exposed the DNC and Hillary Clinton's server was probably just as vulnerable. These people treat security like it's a joke. While the National Security has all kinds of 0-days and tools like Metasploit but tailored to support their agenda. We have what's building up for a terrible thing with computers and info sec. I am very concerned about the future. 
&gt; One caveat: I don't know supervisord in detail but systemd tries a SIGTERM first and after 90s it will kill the process via SIGKILL if it is not terminated until that point. In systemd you can set the 90s to another value. So if supervisord have a similar behaviour keep that in mind. 
Because the vast majority of people I interact with (and consequently are most likely to use my code) use Python 2.7.
Possibly. I think there used to be restrictions on Android which made it nigh impossible, but now, I'm not sure.
Appreciated. I also get the feeling most people downvote when they just disagree with an opinion. 
Pillow is so easy to use that there's no reason not to start there I use it for image/video processing along with MoviePy, which makes working with video in python pretty easy MoviePy to get a video and convert to frames, then operations done on the frames with pillow (and numpy), then stitched back together as a new video with moviepy For LIVE video, and for more complex....vision-related....tasks, OpenCV is the way to go But start with Pillow
Stack overflow is going to be your friend with this along with google. Just keep in mind that with enough persistence you may accomplish what you want to do but it is going to be an unholy abomination by way of the fact that you're still learning the language.
I don't use cheat sheets - I pick one command at a time to learn, and use it frequently until it's part of my memory, then move one to the next one.
Does IronPython support using C Extensions like NumPy?
We do that. It's because our target platform comes with 2.6/2.7 only (RHEL6/7). As soon as RHEL comes with Python 3 we'll switch.
If it's even slightly more annoying to run .NET code on Linux than yum -y install dotnetruntime or something like that then it's not going to happen. That's the first issue. The second issue is that many .NET developers hardcode windows crap into their applications so even when technically it could run on Linux, in practice it really doesn't.
Have not used it myself but I think should give this library a try: * *Python 2*: [pyeq2](https://github.com/zunzun/pyeq2) * *Python 3*: [pyeq3](https://github.com/zunzun/pyeq3) I believe you can just install it with pip.
You know Python, so spin up a Google App Engine Python powered frontend. Low traffic you're looking at pretty much free. Add a credit card for bigger free limits. Scales to Snapchat worldwide scale - which was on that platform before it was purchased.
Try reading instead of watching youtubes, so. Have a look in the sidebar, "Online books and resources". and /r/learnpython is the subreddit you were looking for
I don't have any experience with encryption. Does anyone know how they decoded the command? 
Yeah, not usually needed. I think (after having given cheat sheets a good go) cheat sheets of any real complexity are much more useful to write than to read ; APIs generally tend to be consistent enough that over time it's easier to learn their overall rules than to sort through individual use cases. In-REPL help, Google (plus ctrl+f), man pages, and `--help` options cover almost everything. 
Have you tried going to the installation directory of Python then running the python.exe from there? Something like: C:\Users\YOURUSERNAME\Appdata\Local\Programs\Python\Python35-32
It's just base64.
It would be really interesting if IronPython worked with Xamarin. Python's open source offering for mobile - Kivy - isn't great. It's a project I tried years back and have been following but the development has almost ground to a halt (the website has a post for a competition over two years old in its banner). Anyone looking for a good alternative to Objective C and Java for mobile development now has a lot of very good well supported choices - Xamarin, React Native, NativeScript, Rubymotion - and Kivy looks like its just for hobbyists. IronPython on Xamarin could get all the Python developers to switch over.
print statement is now a function you're welcome
Both are similar to eachother. So no worries. If you have to choose one I will always say Python 3
The command to break a loop is "break"
set "python syntax highlighting" in pastebin to make code more readable
University professors and senior engineers. Great.
You can use a lightweight web framework such as Flask for this. http://flask.pocoo.org/ You can get free hosting at pythonanywhere. https://www.pythonanywhere.com/ There's lots of other options for web frameworks and hosting as well. This one should be fast and well documented. You can also visit the flask subrettit for more guidance if you need it.
Is posible use and compile (with ipyc) a ironpython script with matplotlib ?
Thanks mate! I appreciate the help 
This is crazy awesome! I've been looking for something like this for ages.
your host system should be pretty secure if you communicate with the world via VM. A run of the mill exploit is unable to escape the VM but if the 3-letter agency guys don't like you, all bets are off. For bonus points you could snapshot your virtual system right after installing and roll back every time you want to run it.
I believe generally only very high level sophisticated hackers taking on high profile targets (who thus have high stakes) would even bother with such measures. Unless you're a very important person, I don't think these hackers care about you, and your run of the mill hacker doesn't give a shit if you're in a VM or not.
I can only dream of being important enough for 3-letter agencies to take notice of me. :-/
VM escapes (accessing the host machine from a VM) are possible, but not trivial. So it is decent security if the VM's networking is sufficiently locked down. However, if all your work is in the VM, and you access your work network from within the VM, then you haven't actually protected anything.
Why would you want these particular senpais to notice you? Baka! :P
You bring up a very fair concern. I have said it before, but I will say it again - that is an incredibly difficult decision to make. I would not want to be the one making the call, for sure. While it does seem like a bit of a conflict of interest, I do like that they have this dual mission... my hope is that it keeps them from going too far overboard as a sort of check and balance. The fact is that if you or I were targeted by a nation-state level threat, then we have very little chance of resisting complete compromise. I cannot emphasize that enough - it would truly be terrifying. The good news is that we don't have to worry about Russia/China/N. Korea "wasting" their exploits on regular folks like us. They would surely use it against the US Government, or at least a major US corporation, right? The point is that we are all playing a different game than they are. I don't believe that they would put US citizens at serious risk just to be able to "cheaply" compromise foreign computers, at least not without very good reason. I would expect that there is some major consideration put into whether to get something patched or exploited. Your point, I understand, it's a difficult decision. I don't blame anyone for feeling a bit uneasy about whether the US government should knowingly let critical vulnerabilities exist in American systems. Same thing regarding domestic stuff. But the idea that we should abolish the NSA or prevent them from "spying" altogether seems pretty insane to me, and I feel like it is a common sentiment.
~~I don't think those other editors have the multi-cursor feature that sublime doe~~s...but I could be mistaken of course. edit: vim does have that feature, see child comment
:3
If you do **everything** within the VM, then it isn't really a sandbox, is it? That's just a less efficient way of using your computer. :P People already mentioned malware that can detect/escape from a VM. Regardless, if you don't wipe the VM regularly to return to a "clean" state, then you are missing part of the picture. 
It depends, can you exit it?
Stackoverflow provided simple solution: from datetime import datetime, timedelta, date, time today = date.today() tomorrow = today + timedelta(days=1) interval_start = datetime.combine(today, time(10,30)) interval_end = datetime.combine(tomorrow, time(10,00)) time_to_check = datetime.now() # Or any other datetime if interval_start &lt;= time_to_check &lt;= interval_end: print "Within the interval"
I don't know if matplotlib is supported. It depends on numpy, doesn't it? If so, numpy and some C extensions don't work at the moment.
If you're using a linux desktop which has GVFS support (pretty much all of them besides KDE), and your remote server has ssh -- you can locally mount the remote filesystem over ssh, and then open the directory pycharm, and edit the live production code directly. It's not recommended, and as a professional I would *never* do such a thing... except when I have to :) I *would* strongly recommend having the remote directory you're editing be a VCS clone of your project, so you can easily sync all the remote changes you make. Not doing that only leads to madness.
For a quick site use bootstrap, flask, and pythonanywhere
Remember that thread where everyone was hating on the guy who asked why not use a language made for concurrency rather than working on a python library for the same? Edit: I'm sorry about this comment. I hadn't had dinner... I still think your question is spectacularly beside the point, but I should have been nicer about it. I'm leaving the original text for context to my apology. Sorry. 
This comment has been overwritten by an open source script to protect this user&amp;apos;s privacy. It was created to help protect users from doxing, stalking, harassment, and profiling for the purposes of censorship. If you would also like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and add [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite). Then simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint:use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
I use PyCharm on my Raspberry Pi 2, and I never really have much of an issue, provided that I turn the graphical settings down. Multiple projects open shouldn't be any issue, but having multiple applications open may become heavy on the limited primary memory. That all depends on how much memory the new Macbook has, really. I can't imagine the CPU would cause any issues.
One big advantage of conda is that it will install the linear algebra accelerators along with numpy. I found that on an Ubuntu system, if I did "pip install numpy" or even the "sudo apt-get python-numpy", it would install numpy, but no BLAS/ATLAS/etc. As a result, I found that some test numeric operations were running about 40x slower. You can install these linear algebra packages separately, but it took me a while to find all the right dependencies, and then to figure out how to link it with numpy. However, with anaconda, you just do `conda install numpy` and you get everything you need. If the Intel MKL is too large (a few hundred MB) for your application, you can also do `conda install numpy nomkl` and it'll install the much smaller openblas instead (though you'll get about a 2x slowdown compared to MKL).
I haven't used it in production, but don't see why not. If you are worried, have a good test suite, so you can capture any errors/failures. That'll give you confidence the code is doing what you want it to.
It's a popular open-source project. If the project becomes inactive, there will be a successor project, because Cython is an important tool for many people. Cython itself is a fork of an earlier project named Pyrex.
Note that GAE is Python 2 only.
[Django-livereload](https://github.com/Fantomas42/django-livereload)
Just uploaded 2 new videos (installing MongoDB, MongoDB Operations) this morning. These serve as precursors to the next video, which will be using Flask-Login and PyMongo to implement a user registration system.
It was too complicated and over-engineered. I chose remi instead
So if I understand correctly, you're looking for at most the first 20 instances of the word 'Match' written yellow, from your doc? I'm on mobile so I'm not going to write more code, but I may do tomorrow. Your friends code would likely work for that purpose, but you would need to add the bit to read in the file. Also this would be a much more easy job with a HTML parsing library like Lxml. It's seems quite brittle and an odd problem generally. I'll comment again tomorrow 
This is amazing. Thank you very much.
Would it be possible to spin it off into its own library (installable alone with pip)?
Right now they are in different files (which are all imported in a kinda inefficient way). But we are going to revamp our codebase soon to be more Pythonic. When we started writing, I was basing my work a bit off my prior experience in Java. So we have way more packages and hierarchy than required, with each class in a separate file. Right now we have too many import foo.bar.baz.blah statements. 
I always develop code and try to understand others' code by stepping through it. Source code doesn't explain things nearly as well as code under execution. That's where gdb/pdb come in. pdb is the python debugger and gdb is the c/c++/more debugger (though you probably don't need this unless you're either writing c/c++ extensions or trying to understand the cpython implementation itself). I really only use make files so that I don't have to think about stuff. I.e. `make build`, `make install`, `make test`. Even if these commands are just basic wrappers around other seemingly simple commands (for example sometimes make build just becomes python setup.py build) the consistency keeps things clear and usually you're only really working on one thing at a time (well at least for this specific hour). Grep just lets you find strings. Sometimes I want to see everywhere a function is used and so I'll just do `grep -rn function .` at the root of the source tree for a python repo. Honestly there isn't that much to it...it takes a while to get used to it, but I've become extremely proficient. I do understand that this is pretty barebones and sometimes isn't worth it, but it works pretty well for me anyway.
I use a mac for work now. I will never not wish I was using a different laptop.
Okay, I understand you. I will have a proper look when I get to the office in the morning.
Flask is good for quickly bolting a web interface onto an existing program. If you ever think you'll want a database and/or users, I'd go for Django from the get-go.
&gt; I turn the graphical settings down. What do you mean? 
Saved
The bureau i work for is too busy dealing with office politics and bureucracy. You can relax.
No. I'm not having any problems running Scrapy shell with any other urls, without quotes.
&gt;Instaled, Stared Blinked? 
In the settings, there are graphical settings like AA that can be turned off.
Unless I'm misunderstanding what you want to do, you *could* use watchdog (google "python watchdog watchmedo") to watch for changes, and then on change trigger ansible (or rsync itself) to sync your local files to the server. It's a bit fiddly but it will work. Most people just use tools like ansible on demand (i.e. not on a change trigger) because the bulk of development work happens locally. Few people would want every single code change to be immediately deployed though. If you use uWSGI as your WSGI host (and/or web server for that matter), it has a "touch-reload" option where it will reload the WSGI app if a particular file changes; and the feature works reliably. It's up to you which file that should be.
Nice. Thanks! That's exactly what I was hoping for. 
Haha, yes yes. I know you and Zynix are likely correct. I'm just happy there's reddit, stack overflow, and the internet in general for these moments!
Does it have sane default leading whitespace behavior and sane configuration options for leading whitespace? Because that would put it leagues ahead of emacs and vim in my book.
To simply answer your question; Yes, you can create a UAC Security popup look alike in Python. Go to /r/learnpython to find what modules you would need. However, don't expect for people to code it for you- especially something as potentially malicious as this. 
[Image](http://imgs.xkcd.com/comics/real_programmers.png) [Mobile](https://m.xkcd.com/378/) **Title:** Real Programmers **Title-text:** Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/378#Explanation) **Stats:** This comic has been referenced 821 times, representing 0.6866% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d5sc9zp)
I started python web-dev with django and loved it. Now I prefer flask. It's not too hard to get most of it back (templates, DB connection, etc). It's nice to have a much smaller system to learn. I have an old site on an old django. It's more work to figure out all the changes to django and update it then to do similar stuff w/ flask &amp; whatever various libraries you choose. I'm 50/50 on what's easier to start with.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If it helps, all of reddit's sorting code is written in cython.
Yes. Thanks for reporting this.
Basically, if you didn't have a race condition of some kind (or shared state), it's effectively running as its own program anyways, so you could logically separate the two threaded programs out. 
Yes, Cython is definitely ready for real work, and has been so for a very long time. There is an O'Reilly book on it, if you want offline reference material just in case.
It's both actually. I even tried setting both of them from inside the analysis job using os.setEnviron. The SPARK_PYTHON variable was picked up, but the SPARK_DRIVER_PYTHON was not. This gave me mismatch error between the driver and the workers. I've figured out the solution though. Apparently in the yarn cluster mode, spark submit does not pick up variables from spark-env.sh. Instead, it has to be set explicitly while submitting the job using spark.yarn.appMasterEnv.PYSPARK_PYTHON and spark.yarn.appMasterEnv.PYSPARK_DRIVER_PYTHON. Please let me know if there is a more permanent way of setting these variables.
FWIW The only reason why we haven't released some of the recipes is because they are specific to the Anaconda build system, and would not build on conda-forge anyway. (conda-forge uses a variety of CI systems, which each have their limitations.) We are in the process of converting these recipes, and working with the conda-forge community to figure out how to make some of the more complex recipes build correctly and robustly with "commodity" CI environments. This is the sort of extremely unsexy but extremely important work which we have been doing in a self-funded capacity over the last several years, and we are very excited to have community participation in building reference recipes (i.e. conda-forge). From an openness perspective, in terms of licenses as well as community engagement, we've tried to be very transparent throughout the entire history of the development of Anaconda. In almost all circumstances where community members have expressed grievances with our lack of responsiveness on some issues or lack of progress on certain topics, it was *always* due to resource constraints and not due to a lack of willingness to cooperate with the community. (Disclaimer: co-founder of Continuum, co-creator of Anaconda :-)
You could try emailing or tweeting him, he's pretty responsive. It may help to compliment him on his talk in the request.
I clarified in a different comment, but I wanted to make sure to leave a top-level comment. In what way(s) are Anaconda and conda not "truly FOSS"?
Are you already committed to using D3? If you are not already familiar with both Javascript and graphics concepts of SVG, then D3 is a *second* hill you must climb, and it's a much bigger one than the "Python CSV parsing" hill. I would recommend you look at the [Bokeh](http://bokeh.pydata.org) library for creating interactive web graphics from the comfort of Python. For many chart types, it's all you need. You can even build UIs that let the viewer customize how they want to slice and dice the data, like this little example: https://demo.bokehplots.com/apps/crossfilter The source code for that is entirely in Python, and can be seen here: https://github.com/bokeh/bokeh/blob/master/examples/app/crossfilter/main.py (Disclaimer: I am one of the creators of Bokeh) 
Try to think about things you do on the computer or phone that are repetitive or annoying and automate them. 
Use your knowledge in your life - so [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/) Or maybe create some game with [Program Arcade Games](http://programarcadegames.com/) See more links in right column on this page.
Can you provide us an example of case when your module is more suitable than SQLAlchemy? Otherwise, it looks like reinventing the wheel.
Thanks! yes - i'm aware of that. Still it might me worth considering trouble with patching etc. I do not plan to use it on production - yet because of deployment issues I want to recreate env before I launch. Normally I work with Windows and deploy on linux servers - because of several reasons (Programming/python is only my side job and kind of a hobby and I don't want to switch between Win/Lin every time) yep i need to finally virtualize myself ;)
Uh, well - You're generally right but idealistic :) It all depends what "the production" is. If it's low prio system and it's for internal use... yeah, well if it crashes, it crashes :) &gt;&gt; That said, look into fabric and gulp That's what I have to do for sure - I don't use it because Py/Django is still relatively small part of what I do, but it seems I definitely should set it up. Thanks. small edit: does fabric work with py 3 ? 
I've had some success with Pyinstaller + wine. You're much better off with a virtual machine though.
Was this comment meant to be the thing that did the saving? Here’s a tip, for future reference: there’s a save link now. You’re being downvoted because reddit’s mechanism for expressing appreciation or dislike for a post or comment when you have nothing to add to the conversation is the upvote/down system, so comments like “this”, etc., are unnecessary.
There is also now an extensive O'Reilly video screencast on Cython. The author is possibly annoying but he tries his best.
 When trying to run the compiled app: File "app.py", line 2, in &lt;module&gt; from pgoapi import pgoapi File "&lt;frozen importlib._bootstrap&gt;", line 969, in _find_and_load File "&lt;frozen importlib._bootstrap&gt;", line 958, in _find_and_load_unlocked File "&lt;frozen importlib._bootstrap&gt;", line 664, in _load_unlocked File "&lt;frozen importlib._bootstrap&gt;", line 634, in _load_backward_compatible File "/home/wegi/.virtualenvs/poke-cruncher/lib/python3.5/site-packages/PyInstaller/loader/pyimod03_importers.py", line 389, in load_module exec(bytecode, module.__dict__) File "pgoapi/__init__.py", line 17, in &lt;module&gt; pgoapi.exceptions.PleaseInstallProtobufVersion3 The line in question is: if (not protobuf_exist) or (int(protobuf_version[:1]) &lt; 3): raise PleaseInstallProtobufVersion3() Spent all my evening yesterday debugging, but couldn't find a solution. 
In the long run why don't you switch to using boost python
Looks interesting Will take a look at it 
Mine looks exactly like [this](http://i.imgur.com/QdxnYAA.png), did you make sure to run pyinstaller again after changing it?
Thanks for this! Does this support something like a stacked bar with line. Can you overlay different example options your have on the site on top of one another in the same chart?
Thanks, after running a --clean it worked. Thank you very much.
dev of pgoapi here - do you know why it is necessary to comment out the version check?
The man is made for giving talks
I cannot find what setting you are referring to. Is it in Appearance tab? Can you be more specific? thanks
&gt; Everytime I update my Fedora system to the latest version I start hitting library link problems with several conda packages, because Fedora is shipping newer versions of libraries than what conda was compiled against. Can you open issues around this? That sounds very odd. All of Anaconda is compiled against a very old version of glibc, so it is forward compatible. I wonder if you have LD_PATH set or something that is breaking things? It should be pretty well self-contained. For example when i say old, i mean things are compiled on CentOS 5 and everything runs on Ubuntu which is pretty cutting edge. (i'm not saying you don't have a problem -- just that it's very odd that it would be because of newer libraries)
It's mostly been the `opencv` package that has been a sore point for me. Right now it is complaining about not finding `libavcodec.so.56`, which is because my current version is `.57`. I thought I had another problem that was not related to OpenCV, but I can't remember and reproduce it now. **Edit** Scratch that. This was with my own build of OpenCV, since I needed one for Python 3. The `opencv` package in the official anaconda channel, together with Python 2.7 works as intended. The reason why I build it myself is however because the official version both lack Python 3 support, and is built without ffmpeg. Sorry for the confusion. :/
The GIL only affects pure Python threads. For example if you're IO bound (waiting on the disk) or you called out to some C library, the GIL isn't a factor. There's also the question of whether or not you really want to implement async IO for a task that you can do with a couple of lines of code. If you're writing a socket server, use async IO. If you just want to open a folder of images and build thumbnails (with some C language image processing library that has a Python API), use threads. You may wish to re-watch the early part of the talk.
If you need to support Windows, then you'll need a Windows box to build on whether that means installing Windows in a virtual machine or a physical one. 
Sorry for the late response. I heard a news program the other day that helped solidify my position on this. So here goes: First, you know that nearly all of the first programmers — back when all code was written using punch cards or machine language — were women, right? All of my math teachers but one in middle school and high school were women. He taught geometry. Algebra, trig, and calculus were all taught to me by women, most of them probably got their degrees in the late 70s or early 80s. **I think the decrease of women in computing is a relatively *recent* phenomenon.** And this news story seems to back this up: [When Women Stopped Coding](http://www.npr.org/sections/money/2014/10/21/357629765/when-women-stopped-coding) For more on this, [check out the Planet Money podcast based on this story](http://www.npr.org/sections/money/2016/07/22/487069271/episode-576-when-women-stopped-coding). Do you notice the chart, where women were at ~40% of computer science majors and then it started plummeting? That was the same time that consumer computers were first widely available. When that happened, for one reason or another (I can't help but think sexism played a role) it was decided that these computers would be marketed, almost exclusively, to men and boys. In fact the Planet Money editors watched a series of commercials from that era and couldn't find a single example of girls or women being featured as active users in any of the commercials selling computers. The message: computers are a boys' toy. In my mind, that pretty neatly explains how interest might have fallen in the field. It wasn't enough to have the aptitude. You and I both know to be a good coder it really helps to be exposed to computing at an early age. The people in the podcast describe situations where even though the daughter was the one who was into computers, the parents put the computer in her brother's room. And, I mean, that's on the parents, but I wonder — were a lot of parents like that? Assuming that computers weren't for girls or women? A consistent pattern I see from women is that the coding community is fairly toxic towards women. They aren't made to feel welcome and often encounter more attention for their looks or gender than they do for their actual ability. That's a chilling effect. It makes women not want to participate. &gt; Where are the men in nursing? If I was to take your attitude towards the total lack of men in this field I would say "it's because men are discriminated against in this field". If you were to take my position it would be "men just aren't that interested in nursing". Men are absolutely discriminated against in the field of nursing, in the sense that young boys were generally discouraged or ridiculed if they say they want to be a nurse when they grow up. A lot of colleges set up for nursing were originally women-only, so many of them have had to make adjustments to accommodate male students. [And male involvement in nursing is increasing.](http://academicdepartments.musc.edu/newscenter/2013/anderson.html) "Interest" doesn't just come out of nothing. The reason men aren't "interested" in nursing is because it was historically considered a woman's field. &gt; So when you are treated poorly in a corporate environment don't always assume that somehow it would be better if you were a man and that people treating you like crap has to do with your race and gender. At this point in my mid-life I've just come to accept that there are many assholes out there and that people who make it into positions of power probably (survivorship bias) because they lack a heart. I'm a man, actually. A white man to boot. Which means, every single time someone is an asshole to me, I have the privilege of knowing that they're just being an asshole to me just because, and not wonder if my race or gender has anything to do with it. I think it's safe to assume that if assholery is evenly distributed, and if sexism and racism still exist to some level (spoiler alert: they *do*) then women and people of color have to deal with all of the normal "people being assholes" bullshit that you and I do, and then **on top of that** have to deal with issues like sexism and racism on subtle or not-so-subtle levels.
I'm definitely not an expert in the area so someone can correct me, but my understanding was asyncio is a programming paradigm, which makes use of threading. Making use of threading is by default, but it can ride on multiprocessing as well and you are often relying on other libraries that may/may not be compatible with asyncio (requests for example, iirc). So, threading solves the problem of blocking with io, asyncio provides a programming framework for writing code that doesn't necessarily execute sequentially (either with threads or processes).
Maybe use an S3 storage backend and use CloudFront instead of streaming from your instance.
You probably want the receiving server to get the status periodically (perform a GET request). As a basic example, you can do this using jQuery's `$.ajax()` method wrapped in a function that executes itself recursively with a timeout.
Yes. Check out all the examples in http://bokeh.pydata.org/en/latest/docs/gallery.html and http://bokeh.pydata.org/en/latest/docs/user_guide/charts.html
Anyway we could see the code? I am new to Python, and know nothing about Django, but would love postings of motorcycles forwarded to me continually! 
You need a Windows machine to create an executable for Windows. The reason is that the programs like cx_Freeze, Py2App, Py2exe, etc ... create executable python programs by bundling your source code alongside a dedicated python interpreter as well as all system libraries needed for the interpreter to work correctly. These bundled shared libraries are different for each OS. For example, on windows the python interpreter will need to interact with certain .dll files that are provided by the Windows OS. Obviously your OS X machine does not have these .dll files available as they are specific to the Windows OS. Its not possible for the bundling applications to provide these shared libraries to users (likely due to copyright issues). Thus if you are on OS X you can only bundle python executables for OS X. If you are on Linux you can only bundle executables for Linux, etc... Cx_Freeze, at one point in its history, tried to support cross platform freezing, but no longer supports this feature. I do not know enough about the history of why they had to stop whether it was just unstable or was a problem with copyright sorts of things. Thus, your best bet is running a lightweight virtual machine on OS X to give you a minimal distribution of the Windows OS you are trying to target. I have done this successfully using Virtual Box and a lightweight windows XP VM. I'd imagine you could do the same for newer versions of Windows.
Python uses Mac OS X system tk. Not sure the details here. I started using Python in 2008 and have never seen a version of Tk on Mac OS X that could handle inserting characters with accents. It is a known problem. Python still depends on system Tk and Apple ships buggy version. Just start idle and try to insert a simple tilde '~'. 
I actually got it fixed, check the edit for the person who helped me solve it! Apparently even though I was removing all Python 2 references from my path, I either missed one, or it somehow showed back up. Once I removed it, it worked! Thanks for the suggestion :) 
hi, i just arrived, your message came 50 minutes ago, and i am going to try it, besides, i was reading about python, and it really seems a very friendly language, i like about the idea of limiting the way of doing things, meaning would be more standard way of coding. i will tell you if i have any problems or results with the script. thanks
Yeah, but there are always other alternatives. There's always the question of whether Python is the right language for your project. There are other ways to get performance in Python other than Cython. If the code that needs to be efficient is written in C, then there are a variety of ways to integrate that into Python (or any other language). So while it would be silly to try to write your own Cython, there are still a variety of alternatives.
I'm just getting into tkinter this is great! Also, as previously noted, the sharing nav bar is really annoying on mobile 
Are you executing pip with admin privileges? Use pip all the time but on a Mac.
Is this a joke like leftpad (no offense)? It looks pretty much like `grep` to me.
If you've at all been messing with your python setup you'll want to repoint your /usr/local/bin/python using sym links to the version you want. Then run the python configure script in the same bin directory. Should do most the work for you based on the python installation sym linked to
Yup, so I added it to External tools, and now I can run it. Still requires all the parameters and stuff, but it at least puts me in the right space. Thanks!
It doesn't look like there is a one click solution, but setting it up as an external tool as justphysics recommended, I am able to set up all my parameters and just rerun it. I'll have to give it a shot with pip and setup, since I already have that structure in place. Thanks! 
Me too. It's cool, although it has it's bugs ;p
&gt; wxPython does not support Python 3 They do. It's called Phoenix. What about Kivy and PyQT? Why exclude them when they work with P3K. 
You mean run the command prompt as admin? 
While PyInstaller seems to be able to find and package the protobuf library just fine, pkg_resources.get_distribution() won't find it. 'pkg_resources' is also mentioned in the PyInstaller FAQ as not currently supported.
Good talk but don't understand not even covering concurrent futures or asyncio at all, at least on a high level.
https://dl.dropboxusercontent.com/u/3967849/pyru/_build/html/index.html (via https://twitter.com/raymondh/status/758317573079388160 )
I seem to remember using Kivy on Py3 to answer a question on SO. I might be wrong.
http://www.w3schools.com/html/html5_serversentevents.asp /r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions. You'll need to use a windows VM.
 &gt;Stop supporting 2.7. :shrug: Exactly! There is no rational reason anymore to support 2.7. Those that haven't upgraded by now deserve to suffer. &gt;It's literally invalid syntax. You can't put it in an `if` shield, 'cause the syntactical pass over the whole source will complain in 2.7. As with anything aiming to be backwards compatible, you have to drop the people dragging their feet, or you have to not use cool new features. It is worst than dragging ones feet, sticking with Python 2.7 is being willfully ignorant. It is something that shouldn't be tolerated by the Python community. 
&gt; Exactly! There is no rational reason anymore to support 2.7. Those that haven't upgraded by now deserve to suffer. Never said that. If you're writing something to use the most recent and coolest features, wide adoption obviously isn't your aim. Supporting 2.7 and using new syntax should and do preclude eachother. &gt;It is worst than dragging ones feet, sticking with Python 2.7 is being willfully ignorant. It is something that shouldn't be tolerated by the Python community. Don't be ridiculous. Everyone here understands legacy projects exist, and there is no budget for platform shifts, but no new project should begin in 2.7.
I still use 2.7 even for new projects because I run several django apps on the same apache server with mod wsgi and mod wsgi can be linked to only one python version, I guess I'll have to look into uwsgi/gunicorn in the future
The only one that consumes my time is the stackoverflow tracker. Every other notification is just FYI message. Though I recently really got hooked on setting up notifications for everything, so maybe I should cut it off a bit :D
Oh you can't `from __future__` them?
/r/Python is for news and releases. /r/learnpython is for questions.
Obviously something in your IF logic. Use a debugger.
I don't see it in the docs.
I don't understand how this even works, never mind logging. If ping is successful it returns 0 (assuming *nix) so `response` is 0 and `failstate` is zero as we've just started the program. So now the `if` conditional at line 30 won't trigger, which means the `else` clause at line 35 will, and we're incrementing `failedinarow` after a successful ping. I stopped looking at the code after that. If it does work you need to rename your identifiers as it's too confusing. You should probably be asking on /r/learnpython instead. You'll get more responses there.
Do any ORMs support Postgres JSON document stores?
Check out pythonprogrammig.net there are a ton of videos for games, data science, guis, web apps 
&gt; Thanks for picking up my ambiguity. This is a simple case of me being an oblivious oaf.
/r/Python is for news and releases. /r/learnpython is for questions.
You should be able to write an import hook akin to babel-register that does this
Wow, yep. I put the contents of that else: into its own if: and it works now. Derp. Yeah, /u/Asdayasman mentioned that below. My bad. Thanks for the help though!
Yes, 270 pages
This is very useful. I just started working on an Excel workbook using xlwings. I get the data inside with SQL query, but I would like to format it using Excel style tables. I know how to do it using xlsxwriter, but the problem is I need to do it interactively. Do you know if this is possible using win32com ? 
That is my brother.
I'm pretty sure the problem with your `if` statements is that you're comparing integers with string representations of integers, which in Python 2 will give you arbitrary results (I think all integers are smaller than all strings, but it could be the reverse). You need to convert more of your input values, like `minmissedpings` to integers. I'd suggest `int(raw_input(...))` rather than directly using `input()`, though either can work (the latter accepts arbitrary Python expressions, which could be bad if you don't completely trust the user, while the former will only allow integers).
Yeah, and besides modeling it'd be nice to see if the data correlates nicely with other events (sports, holidays, etc.)
pythonnet is interop bridge between CPython and .NET/Mono in both directions!
Hey /r/python! I'm one of the co-authors of this book- it's awesome to see this posted here! We had a post in /r/machinelearning [last week](https://www.reddit.com/r/MachineLearning/comments/4tul9f/new_tensorflow_book_tensorflow_for_machine/), but let me know if you have any questions about the book.
While I would honestly just love to embrace new features and not give a f**k about anyone else, it's the community thing to do to also care about older versions....
These are IP's of C2's, and hashes of software/scripts that these nation state adversaries used. If you run something like Bro on your own network, you could easily check if your systems have ever seen these indicators, and that you are being targeted by Russian intelligence.
Let me know what bugs so I can try to fix them ;)
I've always wondered why people say `it's in the top #!`, when it's exactly the `#` they said. :v
I imagine you want to get an answer from /u/Robisen, but I figure I may as well give a response to your question (Disclaimer: I am a co-author on the book). Right now, I'd say there really _aren't_ any equivalents available at this time (at least for TensorFlow books). I see [this poorly-reviewed book](https://www.amazon.com/FIRST-CONTACT-TENSORFLOW-learning-programming-ebook/dp/B01DUH73K4#nav-subnav), [this incomplete book](https://www.manning.com/books/machine-learning-with-tensorflow), and several other works in progress. This book is targeted at beginners of both TensorFlow and machine learning, and we've tried our best to make it as approachable as possible. It starts off by teaching core TensorFlow mechanics without any machine learning, and then we slowly introduce machine learning concepts and how to implement them in TensorFlow, including CNNs and RNNs. We also introduce basic TensorBoard and TensorFlow Serving use. It's much more than a reworded API. There was a decent conversation from people trying out the book in [a post last week on /r/machinelearning](https://www.reddit.com/r/MachineLearning/comments/4tul9f/new_tensorflow_book_tensorflow_for_machine/), so hopefully those comments can give you a better idea as to whether the book would be a good fit for you. Let me know if you have any questions for me!
[removed]
I collected a lot more, but tragedy struck and I lost the data. Such is life :(
I really dislike the sentiment behind this - I see it a lot, but I think it's actively harmful to the python community and really wish people would stop. (And I say this as someone using python3 for pretty much everything right now) No-one "deserves to suffer" just because they're maintaining an older python2 codebase, and we should not assume they must be "wilfully ignorant" to do so. And there clearly **are** rational reasons to support 2.7 in a world where people are using it. Those reasons might not outweigh the *costs* of course, but don't pretend they don't exist. If someone can benefit from you doing something, that's **a** reason why you might want to do it. &gt; It is something that shouldn't be tolerated by the Python community Seriously, fuck that. It is not a bad thing to care about backwards compatibility and old versions, regardless of how much you want people to move on. It may not be a major concern, but it's certainly not *bad* to do so. I am certainly tolerating those people - indeed, I will help those people, and while I'd encourage them to upgrade when they can, this is something that *ought* to come from the own merits of python3, not these widespread bullying tactics I keep seeing.
They all have different advantages and disadvantages. TkInter has some good things: (1) it's already installed. TkInter has some bad things: (1) It does not work on mobile. (2) It has no graphical interface toolkit so it's frustrating to use on complex layouts. (3) It is very slow. Try the text widget with a long line, and you will get input lag when typing. Input lag from the keyboard to the screen in 2016 is nuts. Kivy for example has good and bad things. It's fast enough to draw directly on the canvas to implement games, and it works on mobile. But it's hard to make a native-looking desktop UI in it. I personally don't like Qt but it's the most powerful for a complex desktop application. (e.g. It's not just a GUI. It has an online payments library).
That x-axis on the second graph deserves at least one value.
I'm going to assume he knows what it is, just puzzled as to how it made the top 5. As am I
It's also a community thing to help Python 3 inertia and phase out legacy Python before its scheduled death in 3½ years.
Why don't they just say it's number 3?
Lots of new jobs in it with the data science bubble.
I am using Mongo for storing the vcenter log data for the different versions which are unpredictable structured data. That means the schema are not predefined.
Maybe because saying top 3 means it could be first, second, or third which are at least as good as third.
I've another doubt please reply it.. the doubt is Is it possible to use Python Packages in **Django** Exam *(use the Pyvmomi in Django (http://stackoverflow.com/questions/30407230/using-pyvmomi-with-django))* 
A real calamity of a language... very domain-specific and teaching lots of bad practices to lots of novice users. This article sheds some light: http://r.cs.purdue.edu/pub/ecoop12.pdf
Because clickbait.
But some how ANOVA needs a custom implementation and a complementing blog. 
Given that this will be invalid syntax even in the latest Python as of now (3.5), and obviously also in 2.7, I think what will happen is open source library authors won't be using it for many years time (until 3.6+ is ubiquitous enough) because library authors have to care a lot about supporting older versions of Python. But folks who write applications tend to have much more control over which Python version they use, so they'll be able to use this feature in application code. 
The complaints are that it's slow and uses lots of memory. On the programming side it lacks hash maps and pass by reference. But it can create pretty plots in less time than Python. Guess what I'm going to use for my five minute data analysis session?
State is generally a changeable thing. If my state is read only and never changes, it's a constant and no thread is going to be fighting any other thread for access to that data. If I have two threads that need to wait before the OS loads in a file before they have to run, it's the same as having two separate programs wait before the OS loads in a file, unless I'm misunderstanding what you're saying. A small example would probably help illustrate your point. 
That's exactly it. People end up organizing shared scientific projects around "five minute data analysis" sessions... You could use R in a proper way and make something pretty. After all it's turing complete. But it's the culture around that language. Every time some tells you "oh, yeah I have an R script for that", you can be sure there is no revision control, it will come by e-mail, probably no use of functions, and certainly no use of objects to organize their code. When you hear "Let me give you a link to the python project github repo for handling that type of input", your hopes are always much higher.
But obviously it won't be
You should be. It's awful. Very much a scientist's programming language
That's... Not true. Python, Fortran and C are all also very common in those fields. 
&gt; [JavaScript] should be number 1 by a wide margin. Why do you believe this? Personally, I feel JavaScript gets overestimated because the ecosystem is hyper-modular. Many small projects depending on many small projects creates a large number of open-source libraries and frameworks (as opposed to a standard library). On the other hand, Java power millions of closed-source projects and has many fewer small libraries because of its thorough standard library. So JavaScript tends be more visible, but that might not be correlated to actual popularity.
&gt; Every time some tells you "oh, yeah I have an R script for that", you can be sure there is no revision control, it will come by e-mail, probably no use of functions, and certainly no use of objects to organize their code. There are people who care much about the quality of code and data processing in R. Myself, for instance. I'm in constant contact with R package and function developers, asking questions and doubts about the code background. So, if you ask me some R code by e-mail, I would probably provide you one which has been validated by comparing to observations and assured by its developers.
Fortran and C are much more specialised. Most scientists will do data analysis, statistics and plotting, usually in R, matlab or python (small but growing). Only a portion of scientists will do anything which requires or can sensibly be done in Fortran/C. 
I'm not 100% convinced anyone actually likes R, but being free is a pretty solid selling point, and it's what everyone else uses sooo... 
I'm a professional bioinformatician with a 5+ year career and have been able to dissuade or flee from any project using that calamity of language. It's really not mandatory. Especially if you have a programing skill set of your own to show. It's mostly used by newbies from fields like biology where programming is not taught. More serious and high-level endeavors use python most often.
Not a problem! Glad I could help.
That only works for code that is uploaded to CRAN. Not for down-the-corridor Bob's latest log file parsing script. What I was trying to say is that if an internal project for a publication or a specific analysis is not organized with a revision control system, I don't really try to get involved. You started the thread by replying to my comment accusing R users to not use functions or objects. But just said that you cared about your code. Do you use one of the several object-model R proposes when you develop? EDIT: A word order
not that I'm suggesting this be done, but could you do something like: name = "Fred" if py36: eval("print(f\"His name is {name}\"") else: # cmon and update already ... # ok if you insist print("His name is {0}".format(name)) I'm not sure how the syntactical pass over handles eval statements ... 
Maybe post to /r/learnpython instead? 
Because I'm a beginner with Python and I read somewhere that you have to 'pass', and can't have an if: without an else: when using certain version of Python. Is this not true? It seemed rather silly. . .
That survey is horrendously biased toward people employed as developers. Most people who program that aren't developers are never going to use JavaScript or C# or PHP etc. Mind you, being an IEEE survey, this one is biased toward non-developers like engineers (I'm studying electrical engineering and use C, Python and Matlab) and scientists (which explains the R inclusion). So no, you're survey is not more accurate, it's just as biased. Would be interesting to see a more non-biased report if there's one out there!
I actually went back and added load and save, but yeah, it was an educational but silly project.
You should not use Livecoding.tv to learn Python. The site is in no way structured to be beneficial to a person trying to learn Python. I stopped reading when I saw this as number two on the list.
Business analysts are starting to use R extensively, esp. since Microsoft has incorporated it into the new version of SQL Server. 
hi cookie, i really thank you for your time, the color tags are the main point, because when using anki, i want to highlight the word or words i am learning. i know this is confusing and you have done a pretty good job. 1.- i have millions of lines of translations. 2.-with power grep i search for a list of terms , (if i am reading on internet and i don't understand a word or phrase or modism i copy it to my list of new words) 3.-the results of power grep highlights with different colors all of the words i put on the list, and i save the file as an html. 4.-to avoid confusion, i process the html file to transform all color codes to just, white and yellow, so that, anki shows white text and with yellow the words that are new. 5.-the results of powergrep could result in hundreds of thousands of results for every term i put on the list, but sometimes are only a few, and sometimes no even one. 6.-I tried using a regex to pick just 20 lines of results for every term, so for every term i had to make a regex and do steps , and it worked, but failed when there where less than 20 lines, there could be results from a term, but maybe just 10 , and my regex was not picking them up. so i tried permutations with regex, and resulted in very complex regex that powergrep yelled "this regex leads to catastrophic backtracking and will stop" sad for this, i had to ask for help, just to pick 20 or less than 20. the last one, you did, is very close to what i want, and i am thinking that i can start with that all the process, what about if my list of terms i go learning, i go putting them in this script you did, so that way from the very beginning i will have the 20 lines or less. then i paste those lines , and search them as literal text in powergrep, so that way i can add them the color code. but let me give it a try to the script, and let me tell you, yesterday i was watching some tutorials about python, and i want to ask you, how do you solve the problem of learning python, because i am thinking that learning python on the internet must be something very difficult. 
yeah I had to use R and rpy2 in the past and I'd rather use C 
I believe that; those who I know that use or have used R primarily work in Stats, Psychology, and Genetics.
&gt; free 60-page sample that you can ~~download.~~ request by giving them your email address. Personally, [I'm a fan of this guy's (/u/zionsrogue) approach to flogging his book](http://www.pyimagesearch.com/2016/06/20/detecting-cats-in-images-with-opencv/). He provides just enough useful *and no-strings-attached* info for folks who want to jump into the subject... and showcases his books for going in-depth.
I think it's mighty fine tho. C is god's language. Java is platform independent. Python is interpretered. You couldn't wish for better top 3.
What exactly do you mean by leading whitespace behaviour? It has basic auto indentation if that's what you're refering to.
Oh deff not. Or even if they can detect such small amount of scraping to begin with. 
I'm glad people are using slack bots in cool ways now. I made one for my group of friends and no one appreciates it. &gt;_&gt;
Because it's easier to say "top 3" than saying "It's number 3 in a top 10 list."
If Python hits #1, do we get real concurrent threads?
I believe that JS is probably number 1 because 90% of people who develop for the web will use it (to varying degrees), and developing for the web is one of the largest sectors. Other sectors may be bigger, but they don't have any requirement to use any language in the way that web developers have to use JS. 
Yeah, but all my muscle memory is for pylab and not matplotlib or plt. 
I think that all developers, professional and non professional, use stack overflow so it's probably one of the least biased sources of information. In fact, you can even look at the results for non professional developers. I'm aware there are other sectors, I am a mechanical engineer myself, but it seems fairly clear to me that JS should be number 1 overall. I can believe it should be number 8 amongst part time developers, but the original survey doesn't say that is what is aiming for. 
i actually don’t think it’s that bad. it shares one flaw with PHP (importing a shitload of functions into the default namespace), has pretty inconsistent names, and the lazy evaluation and its data structures make it more involved than it seems. but once you understood everything, it’s clear as day. everything’s one of those: 1. NULL 2. a vector (raw, logical, integer, double, character) 3. a list 4. an environment (let’s ignore this for the moment) 5. a S4 class or refclass (let’s ignore those as well) and has optionally `attr`s. a matrix is a vector with `dim` attr, a factor is an integer vector with `levels` attr and `class` attr set to `factor`. a `data.frame` is a named list with equal-length items and the `class` attr set to `data.frame`. that’s it. R’s whole data model. its perhaps biggest flaw is that it doesn’t communicate this well: it has no spec, just docs that are good at examples but don’t explain much. and statisticians aren’t taught it “the hard way” but via “learning by doing” which means they actually don’t understand anything.
the comment by /u/Asdayasman only talked about 2.7 though.
Same here. I had to use it for a few months, and then every now and again and I just hate it. Maybe it's something about how the $ symbol delimits structure (and the dot/period can just be a part of a variable/function name). Also I never really understood the class hierarchy (S3, S4, when do I use $ or @ ? ) so that's probably a part of my problem. 
True, and looking at the survey again properly I can see it has been done much better than I first thought. But you do have to note that the IEEE survey stated that they had tuned the metrics to suit the needs of the average IEEE member. The average IEEE member is an electrical/electronic engineer, so it probably isn't the case that JS is the most common. They actually never claimed anywhere that it was 'top programming languages anywhere'. OP made that insinuation. It realistically doesn't matter in the slightest, there's too many metrics for ranking programming languages and it's useless to argue which metric is best. 
Such a huge distinction between IEEE and [Tiobe](http://www.tiobe.com/tiobe_index) for R. That's weird.
Data science is on the rise, and R is on par with Python for popularity in data science.
"It's third" "It's #3"
&gt;If you want to do anything at all in genetics, economics, physics, logistics, or political science R is going to sneak itself into your soul and never let go. Not really in physics - at least, not anymore. There's really no need for R or Matlab these days. You can use numpy etc in Python to do all that kind of stuff just as easily. And for high-performance parallel stuff, you'll want to use C++ or Fortran.
It's in the top 1,000,000
Why is 2/3rds of that site sidebar?
Hello, I use both Python and R so here's a summary of some strangeness in R: 1) `&lt;-` is *mostly* preferred over `=` for assignment (`=` can be used but has implications in rare circumstances that should be avoided anyway). Many people just use `=` though. This both calculates and returns the sum of 10 and assigns 10 to `x` (nobody does this in practice, but sometimes seen in really old source code): sum(x &lt;- 10) 2) Everything is essentially a vector. Scalars are basically one-length vectors. This is very useful in practice because functions are mostly vectorised, so for loops are rarely needed (not unlike numpy). items &lt;- c(1, 2, 3) sum(items) # 6 mean(items) # 2 items * 10 # 10 20 30 3) Weird scoping. This prints `3` with no complaints: f &lt;- function (x) x + y y &lt;- 2 f(1) 4) No real classes in a traditional OO sense. There are three main types of objects. Probably the most common being S3 methods which dispatches an object to a function based on its "class" ("class" being closer to "type" in Python). x &lt;- 1 class(x) &lt;- 'reddit' y &lt;- 2 class(y) &lt;- 'digg' f &lt;- function (x) UseMethod('f') f.reddit &lt;- function (x) print('I like Reddit') f.digg &lt;- function (x) print ('Digg is OK') f(x) # Prints "I like Reddit" f(y) # Prints "Digg is OK" There are also [S4](http://adv-r.had.co.nz/S4.html) objects and [Reference Classes](http://adv-r.had.co.nz/R5.html). The latter are a bit more comparable to Python classes, with funky syntax. 5) Basically everything is a function. These are equivalent: 1 + 2 `+`(1, 2) You'll never see the above, but because of this it means you can do some cool things like map anything as a function. E.g. to get every element `a` in a list. items &lt;- list( c(a = 1, b = 2), c(a = 3, b = 4) ) sapply(items, '[[', 'a') # Returns 1 and 3. ... that's the same as retrieving: items[[1]][['a']] items[[2]][['a']] 6) Infix operators. [Apparently can be disgustingly hacked into Python](http://stackoverflow.com/questions/932328/python-defining-my-own-operators) but are native to R: `%either%` &lt;- function (a, b) sample(c(a, b), 1) 1 %either% 2 # Returns either 1 or 2 at random 7) Integers not assumed usually unless you're explicit: is.integer(10) # Returns FALSE is.integer(10L) # Returns TRUE 8) Flexible function parameters: f1 &lt;- function (x, y = x * 2) x + y f1(10) # Returns 30 f2 &lt;- function (x, y = x * 2, z = y) x + y + z f2(10) # Returns 50 9) Lazy parameter evaluation: f3 &lt;- function (x, y = x * 2) { x &lt;- x * 10 x + y } f3(10) # Returns 300 Could go on all day but I think I've made my point. Didn't mean for the comment to be so long but I just couldn't stop.
ranking programming languages in this way is almost useless IMO besides somewhat defining the robustness of the languages
In a top 10 list... My point is you have to then explain more context.
I'm seeing some really poor and false statements being made about R and Pyhton in this discussion. This is not apple versus android. Each has its strengths and weaknesses in data science. Below a nice (somewhat outdated) comparison between the two. Pick the one that's more applicable to you. If you want to be a good all round data scientist, learn both! In fact, I have recently started learning Python (to be able to something else then data analysis) and it makes me understand R better! [datacamp](https://www.datacamp.com/community/tutorials/r-or-python-for-data-analysis)
&gt;More serious and high-level endeavors use python most often. Thank you. I get sick of know-it-alls in my field talking up R like it is the only (or best?!?) tool available. Best for a ***** maybe.
I personally can't see JavaScript being anything other than number one. I have utterly no evidence to back that up, but there is really no serious replacement for JavaScript in its domain at the moment. And it is set up to run on basically every consumer device in the world (desktops, laptops, phones, tablets, games consoles, smart watches etc). Whereas languages like Python, C, C++, Java, C# etc. all cross domains.
You can look at how PyDoc generates documentation and then use the same approach (or similar) to generate a graph. 
Ah, so they're going to go ahead &amp; add the fully dark theme to Spyder with the next version?
By default it indents 4 spaces when pressing the tab key. The tab width can be configured, but currently inserting hard tabs isn't supported. I'll add a configuration option for soft/hard tabs ASAP.
Agree 100%. However, I do enjoy watching others code because I like nerdy shit it guess. 
Neat tool, what use cases are you imagining? I combine multiple LaTeX docs for work, but I just use Beamer to make a unified PDF from smaller .tex files, which works fine. 
You've lost formatting, this isn't valid python anyway (see line 1) so you haven't shared your exact programme, you don't describe exactly how you converted it to an executable, and you don't describe the exact observed behaviour in the both the failure and non failure cases. If you want answers, you need to be nice to the people you're asking for help. I was prepared to give you maybe 2 or 3 minutes, longer if it was interesting. I spent that pointing out what you didn't include.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Could someone post an example using a csv file as the source. I could not find an example in the docs or the cookbook. Thanks in advance.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Thanks! That was an entertaining read. Honestly, I can't decide whether it's scary of cool (after all, C is full of gotchas that are as nasty as these, but somehow C's gotchas are undeniably cool).
https://github.com/nerevu/riko/blob/4641d8fd8ceacfcd72dfa45438a52b26a7d4f73c/riko/modules/csv.py#L11-L16
Eval's a function, not a statement. Its first argument is a string, so anything goes. Good sweet lord of all that defecates, though, DON'T do this. Good lord.
Well both of them are tools you'd use to build frameworks. It's not going to be like django where you just put a magic string in a config file and forget anything's different. You're in charge of your objects. If you're writing the interface in some manner of js library like ember, react, etc., there's no huge tie to django. Django's ORM is ok, but its templating and admin is amazing. If you don't have a use for one of those things, twisted will likely serve you better.
Only thing is, I've heard that AWS IPs are automatically banned by CG. 
Everything's basically here: https://github.com/Alexis-benoist/CaTeX/blob/master/catex/core.py#L142 OP simply appends the contents of the `document` block of one file to the other, while taking care of few selected metadata macros, like `author`. No real parsing or semantic analysis made.
If you are asking how to stop concatenating a str and an int, I'd recommend one of the beginner resources you see in the sidebar...
I had posted this article entitled "Evaluating the Design of the R Language", in this thread already before your post, but I'll give the link again: &gt; http://r.cs.purdue.edu/pub/ecoop12.pdf 
It's used mostly for small tasks and by inexperienced users. No one would dare program a genome assembler in R, or an automated DNA sequence processing pipeline either. It's usually coming from your down-the-corridor biologist who wasn't taught programming, in my experience.
SQLAlchemy rocks
Bah, I forgot to publish that. https://github.com/wooey/Wooey/releases/tag/v0.9.3 now has major changes and minor ones. Thanks!
That's a bit of a false comparison. No one would dare doing exploratory statistics in C++ or differential expression calls in Python. Different strokes for different folks.
Sure, I can provide an example. Consider a remote task queue has some kind of best effort at-most-once delivery semantics. These tasks can be cancelled at any point, and you're going to want multiple workers, so when it receives a request, it has to atomically mark one or more jobs as claimed, and then pass job descriptions to the client. The overhead of these transactions dwarfs the cost of actually marking or serializing a particular job, such that loading 1 or 10 (or 50) jobs is roughly the same cost. This is not too contrived; a lot of real systems have these characteristics, which is why batching is such a classic optimisation. In this situation, job definitions at the worker level are read-only, but loading them has non-trivial cost and uses resources that are finite. One worker that can load 10 jobs and do them concurrently puts less strain on the system than 10 workers each loading one job. In your example, you're basically saying "You don't need threads to share state", but implicitly it's because the OS is able to share it for you via things like disk cache. It's fine to say "You can connect to the database/read from the filesystem from multiple processes just as good as multiple threads", but to say threads are therefore unnecessary is shortsighted. All you've done is offload shared mutable state to another system, then say it's unnecessary. What if you need those characteristics in _your_ system?
[Image](http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png) [Mobile](https://m.xkcd.com/979/) **Title:** Wisdom of the Ancients **Title-text:** All long help threads should have a sticky globally\-editable post at the top saying 'DEAR PEOPLE FROM THE FUTURE\: Here's what we've figured out so far \.\.\.' [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/979#Explanation) **Stats:** This comic has been referenced 1415 times, representing 1.1807% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d5v1944)
You should use the flask web framework: https://github.com/pallets/flask
Yeah it can be downloadable and it can have a search bar for model, brand and year so users can have a quick insight from the data ... this is the basic with more data i hope to implement delta on sells and more detailed search .... Thanks
My personal favorite is [Bokeh](http://bokeh.pydata.org/en/latest/docs/gallery.html). [Plotly](https://plot.ly/ipython-notebooks/gallery/) is a close second now, because it went open source a while ago -- if you're interfacing with it from Python. Both create interactive charts (zoom, pan, hover etc out of the box).
But the only gotchas are number 1 and 3. All the others can make your life much easier. That said, there is a whole book on the gotchas in R. It's called R Inferno. It's free. 
I don't avoid R I just use it when it already has the stats package I need. I use Python to set up the data that will go into R
test
Nope... no longer working. Seems they're smarter than your average bear.
Never gave much attention to NLP but this is really interesting.
Heh, I sometimes do the opposite. Python is so much more powerful, but exploratory data analysis can be so much nicer in R thanks to `ggplot`, `dplyr`, `tidyr`, and `magrittr`. Once I built a data scraper in Python, loaded that data into R for cleaning/transforming/normalizing, and then used Python to do the actual analysis/model building.
That's just what IDLE says initially when you run any .py file from it. You need to recheck your syntax and make sure you're not missing anything. Even one out of place or missing character can mess everything up.
Batching would apply for other languages as an optimization but because of the GIL, python suffers with batching (for example, at work we deal with batches of hundreds to thousands of health care claims using python and forking those out to singly-threaded processe in a pool is faster than one massive thread pool, even though there is a lot of overhead with serialization). That being said, your resource isn't particularly read only if some external force can come in and modify the state of the program (i.e. cancel jobs at any time). My point was that you don't need threads to share global constants (such as some sort of configuration that will never change over the lifetime of the program, or a frozenset), not that you don't need threads to share state. Because state is mutable, and the way your program runs depends on the current state, you need to lock it every single time that you access it to make sure that nobody else changes the world without you knowing. If my state never changes, it's constant, which means I can throw away the locking mechanisms and never have contention for reading, which also means I can run the same program from the command line 50 times without threads without seeing vastly different results, which is what I believe the point that the video was trying to make.
I think you're missing my point. The point isn't that you should run the program from the command line 50 times, it's that because there's no race condition *when accessing the read only **constant** resource of your program*, they're logically equivalent. Now, if I had to process a file in chunks but the file is loaded in once? I'd use threads (or actually multiple processes), but even then none of the other threads or processes would necessarily have to have any sort of knowledge about any of the others. It's effectively the same as saying "thread 1, you process 1 out of every 4 lines in the file, thread 2, the second..." and so forth and so on. In no situation did I have a race condition among my threads where they had to be acutely aware of what any of the others were doing. They just loaded in a file, processed the lines they were told to process, and they exited. Most of the time, I load something in and the OS handles the loading from disk. I don't have to care, nor should I, how it went about doing that. It could spawn ten thousand forked processes for all I care, because that's outside of the scope of my program and generally out of my control. Same with a database. If that happened would I be concerned? Of course and I would probably go to a different platform. This talk also applies extensively to python and python only. If something is trivially paralleliseabe (read: deterministic) then you didn't necessarily get a whole ton of advantage from threading the program in python. If I were writing in any other language, such as rust, I would have no qualms about throwing multiple threads to a program to solve a problem because I suffer no performance hits. 
[HN discussion.](https://news.ycombinator.com/item?id=12180301)
This. I have Anaconda installed on my windows box. I mostly work in python 3, so that's my default (I think 3.5 is set as default) but I have a couple of different versions of 3 (for testing purposes) and also 2.7. I recently took a class where all the classwork was in 2.7. I pop into a terminal, type "activate Py2.7" and that's it. Everything I do in that terminal or spawn from that terminal (like jupyter notebook, which was used extensively in the class) runs in 2.7. Without affecting things I have simultaneously running in 3. Also, PyCharm (my IDE of choice) works seamlessly with it; when I open something in it, I can choose my conda environment from a dropdown in the project settings and PyCharm intelligently adjusts syntax highlighting accordingly.
By that logic HTML would be number one, but the IEEE has it way down. 
HTML is definitely a grey area. I personally don't consider it a programming language *per se* because you can't do useful computation with it. There's no doubt that it is critical to know HTML well if you're a web developer - even moreso than JS - I just don't think it should feature on a list of programming languages.
Javascript has its problems, but there are so many reason why JavaScript kicks ass (mostly due to the community). The V8 engine spawned a whole revolution for JS and now it hosts some of the most advanced libraries with very mature APIs. I work in Python and Go most of the time, and usually I really enjoy picking up JS as a nice contrast since it gives you a lot of freedom (to screw yourself over) and can be more fun than other languages.
That's quite the response to what was basically a troll comment. But I can probably respond in kind... When teachers can't teach a language, and students can't learn it correctly, then I default to blaming the language itself, not everyone else. It's just Occam's razor. C++ has a lot of moving parts that interact with each other in strange ways. That's not the students' fault. It was a poor language decision. You wrote a lot about the fact that C++ is one of the most popular languages. I don't dispute that, but it doesn't mean it's any good :) The reason C++ is popular is because it is built on C, and C is actually not a bad language. Yes, it's trivial to shoot yourself in the foot with C, but hey, at least it's your own fault.
I recommend [this blog](http://streamhacker.com/2010/05/10/text-classification-sentiment-analysis-naive-bayes-classifier/) if you are interested in NLTK and Sentiment Analysis.
Couldn't you replace the newline with the string you need, plus a newline? string = 'this is a line\\n' string.replace('\\n', 'with some extra stuff\\n') Not near my computer so I can't test, but I'm sure I've kludged something like this together before. EDIT: as /u/centurion236 points out, str.replace() doesn't have native regex support to my knowledge, so you'd have to import `re` and try to use re.compile() with the regex as the argument, passed to str.replace(). 
The point is if it is used correctly C++ is not an impossible or even hard language to use or learn. But it takes more effort to learn than Java or C# or ruby or php. I firmly believe that being taught with languages like that makes CS majors and subsequently programmers who are not forced to think as hard as they used to or learn as much as they used to. They've become coddled by things like virtual machines and automatic memory management. That said I dare you to name one part of the C++ language that could be designed better and how you'd do it. Like I said I prefer D better myself but the differences between it and C and C++ are largely syntactic and not semantic at all. And even the syntax isn't that different as I never had to study D, I just used my C++ knowledge and whenever something didn't work I just looked up the difference in syntax. In that sense I will even go so far as to say that C++ is a good teaching language and Dr. Bjarne Stroustrup it's creator did use it to teach his introductory programming classes at Texas A&amp;M University which were a great success. Hence my original point that maybe the teachers just suck at their job. My final point on the matter is this. I think that not studying CS formally at the college level actually gives me an advantage in that I'm not coddled into using a managed language that all but spoon feeds me everything and hence I don't complain that the language is too hard to learn and just do it anyways. And C++ is better than C because it's standard library provides useful abstractions that C does not. Modern C++ is a robust and flexible programming language and people hate on it far too much. Also this was typed on mobile so R.I.P. grammar and spelling. 
When you say preserve the newline, do you mean keep the same type of line ending regardless of the os? I think open() by default converts endings to \n for consistency, so maybe you need to add a binary flag. Also, I don't think replace() accepts regex, so you'll have to figure out the correct insert location on your own. If the file has no trailing whitespace, look at the rstrip() function.
Do a search on the swift Reddit for "framework". See how many follow your definition. The latest link posted there sure doesn't. 
Uninstall windows 
I figured, just due to how Windows deals with line breaks. Isn't it a carriage return and a line feed? Still, with OP mentioning sed, I figured this would be done on a sane system.
Nothing beats the [NLTK book](http://www.nltk.org/book/) which is available for free online. 
You should be able to do this by using a carriage return. I.e. instead of outputting a newline character `\n` at the end of the line, you can use a `\r`, which takes you back to the beginning of the line. In Python 3 you can do the following: import time for i in range(10): print('Attempt {} of 10', end='\r') time.sleep(1) # just so we can actually see the change 
Great. Thanks a lot!
Small warning with this method. If your output reduces in size during the loop, the remainder of the previous string is still shown. &gt;&gt;&gt; for i in range(12, 6, -1): ... print("Attempt {} of 10".format(i), end="\r") ... time.sleep(1) Once `i` drops below `10`, the output will look like this: Attempt 9 of 100
Either format your numbers with leading zeroes or just extend your string with an appropriate amount of spaces.
Might be a firewall issue. Windows usually popups up a firewall message the first time you run python.
Was there something new or different here? Any contexts and/or comment to your post? Well, for the sake of others, I will add some! These are a *great* way to get started with Python if you're used to Matlab, etc. I personally am very much not a fan of "How to do everything I do in matlab in Python". Python is a beautiful and powerful language. if you try to just directly port your Matlab programs, you won't be using it to its full advantage. I really hate tutorials that tell people to do something like: from numpy import * This is **BAD**. One of the things that I think make Python so good is the namespace and scoping. You know where certain codes are coming from without (much) ambiguity. These lecture notes do a good job of teaching how to do Matlab-y stuff but natively in Python. Now, if only we can get people to stop using `pyplot` (except as `fig,ax = plt.subplots(...)` 
isn't this what os.linesep is for? edit: I guess the docs say not to use this when writing files in text mode, however
&gt; typewriter emulator Lol, never heard that one before 
No mention of Windows support. Submitted a ticket.
Is there a reason you can't do it with Flask? [http://flask.pocoo.org/snippets/111/](http://flask.pocoo.org/snippets/111/)
/r/learnpython
/r/learnpython
/r/learnpython
Yeah, but the example shows it working on requests.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You can start combining this with something like gensim and postgres with the right indexes and do some really interesting things.
That approach assumes an ANSI-capable terminal though.
Another option with more flexibility but also more headaches: [curses](https://docs.python.org/2/howto/curses.html). It lets you directly address specific regions of the screen, set up sub-windows, erase lines, and overwrite. Just make sure you are 100% completely certain that you reset your console settings when you're done, or you are going to have a bad time.
Works for me. Win 10 64 bit with Python 3.
I'm not lying when I say that Sublime's indentation configuration is easily one of my favorite things about it, especially compared to pretty much any other text editor.
I know Python. What the heck is this supposed to mean?
/r/Python is for news and releases. /r/learnpython is for questions.
[CKAN](https://github.com/ckan/ckan) is the leading open-data platform and it's written in Python, though it sounds like you wanna actually present the data in some form in the browser, which CKAN can't do out of the box.
You might find `tqdm` [0] a better alternative instead. [0] - https://github.com/tqdm/tqdm
Dude, open data means from government etc, something that should be public. Open data does not mean "let's make private data public".
this question would be better answered at /r/learnpython 
Offtopic: Whats the Plugin in this terminal on this page that displays functions data?
&gt; C++ is only a terrible language if you don't understand it. And who understands it?
There's no loop in your code. There's a function call and an if statement.
For more traction this sort of post should be on /r/learnpython Unless you *need* to build this in py2, it'd be wise to use py3.
When posting large amouns of code, please post it in a Gist or pastebin for readability. * Assuming you know OOP, I would make a Player class with all his information (HP, Items, ect.) and call from that class when you need the players stats. * Using letters as your args are incredibly confusing to read. * You may want to take a look at PEP8. * You can do: print "\nWords here" rather than doing: print "\n" print "Words" Other than that, I like the idea, seems pretty creative. 
Just like IanCal said, it seems like confusion between a function and a loop. Looping is a way to repeat some process, and in this case, you're going to want to repeatedly check if an integer is prime. What you're doing, is defining a function that appends the integers 2 and 3 to a list, sets a variable n to be zero, and then checks if n is divisible by 2 or 3. You're trying to increment n like you would in a while loop, but here, I think a for-loop and the range function would be even easier to use. For example, using your methodology of checking if an integer is divisible by 2 or 3, we can apply this to the first hundred integers using the following code: prime = [] for i in range(100): if i % 2 != 0 and i % 3 != 0: prime.append(i) print(prime) Just remember, that making a list of prime numbers is a nontrivial problem, and checking divisibility by 2 or 3 won't actually get you to just prime numbers; you'll just get numbers that aren't divisible by 2 or 3. 
http://pythonprogramminglanguage.com/ I haven't read it, but this one looks good. It's top of the list on the [wiki page about tutorials](https://wiki.python.org/moin/BeginnersGuide/Programmers).
What editor is this? https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm.gif
What's fx?
The userbase here is pretty harsh. Don't listen to anyone that isn't impressed. Stuff like this is what I really like seeing. Other people, like me, that are still trying to figure out what they are doing in this app ecosystem.
&gt;To be more specific the problem I have is when locating the certificates folder. LOL, Literally my exact problem. I couldn't even find the docker image, when I did `docker inspect`. I asked a friend of mine who's a big docker guy and he was completely stumped too.
What's the purpose of passing an empty array to the function ? 
That is bpython. I'd highly recommend it.
You can use [curses](https://docs.python.org/3.4/howto/curses.html) for things like that. Unless there is already a complete solution for your specific use case, like tqdm which others have already suggested.
Never ever run pip with root permissions, especially not `sudo pip install`. It can cause serious damage to your system because it conflicts with your system package manager. Use `pip install --user` instead.
Good luck. I loved the idea of docker and spent a day or two trying to get this setup before I decided it wasn't worth it for my needs. Back to anaconda envs I went. My biggest beef at the end of the day was PyCharm CE and Sublime would just not accept the remote docker interpreter.
Congrats! Now do something on your own, a side project, post it on Github and then you can show the code here (:
I wanted this to be real.
Be the change you want to see in the world
see links in right column on current page.
Even I am interested in similar. [This](https://np.reddit.com/r/Python/comments/4v1f0f/learn_how_to_get_started_with_natural_language/) may help OP, how did you get started? can you share the resources you are using?
haha. I was intentionally being coy without revealing where I work. We have network switches that are pollable using snmp or can send traps. A lot of customers have problems setting up SNMPv3 on their switches. So, I decided to create a script that will simplify the process. The script doesn't come on the switch default, the user must download the file to the switch, run it (using an argument to delete the config) and the switch will give a warning that the script is about to erase the SNMP config. 
That would be very sad. I love SNMP.
/r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions. What's wrong with virtualenv and virtualenvwrapper?
/r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions.
/r/Python is for news and releases. /r/learnpython is for questions.
Hi, It will help people know how to help if you let them know the OS you are using, any error messages you get. S
Hey all, I made this little thing for fun. I was playing around with type hints and thought it would be interesting to attempt something similar to what Elm does (elm-package automatically enforces semver).
Thanks :)
[Obligatory XKCD](https://xkcd.com/927/)
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3277 times, representing 2.7305% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d5x0b56)
Looks neat! What was the motivation to write this?
Stop this xkcd, please. I've seen it so many times, more than all the existent standards
Looks like [bpython](http://www.bpython-interpreter.org/).
Yup, thanks!
What is your python3 version? I can install epc on my ubuntu 16.04 successfully.Can you give some more log detail?
Any questions you have, feel free to come back here or to /r/learnpython. Remember that to get the best response from this community, give the problem your best shot, post your code (properly formatted or pastebin'd) and the error you're receiving. A vague description of the problem or lack of code will get you ignored. Happy coding.
Hear hear. What a frustrating gap. 
Cool. I actually do want some feedback on a portion of it. This is more based on good programming practices vs actual syntax. Right now, the script does a check in the existing switch configuration to see if SSH is enabled in order to use AES or 3DES encryption. If the configuration doesn't include the string used to enable ssh, the script displays a line "SSH must be enabled in order to use AES or 3DES encryption, please enable SSH and re-run the script" and then returns you to the command prompt. This is mainly because in earlier versions of the switch firmware, the SSH enablement process requires the download and installation of a separate module. In the newest version, the SSH module comes pre-installed, and just needs to be enabled. The script can (and does, at the moment) enable ssh, just not sure if I'm going about this the right way. What do you think?
Doing time based queries isn't difficult, and when working with teams of varying competency, I can see it's benefits. It's much easier to explain "the first 4 numbers are year, next two are month, next are day..." than "use these number of second s since....". For example, a lot of our queries are based on a specific day of month or hour of day. It's just a lot simpler to look at two bytes and do the comparison.
I think it might be related to my VPN. When i was running PIA, it worked most of the time and i rarely got this timeout error. If i did get it, then i could disconnect and reconnect to wifi and it would work again. Now that i deleted PIA - What software creates 100gb log files? Stupid, anyways - it stopped working completely. Maybe this is a question for the windows reddit to see what settings I should look into.
I thought this was going to be a tutorial on how to build a simplistic HTTP2 server using asyncio for learning (not production) purposes.
/r/learnpython
Based on the feedback received on my [first update to the list](https://redd.it/4p5657), I have made updates to the list. Thanks [Onionradish](https://www.reddit.com/user/onionradish). Hope it helps!
Cool, it good to see someone creating a new editor. I personally would like something that was terminal based that combined the best aspects of sublime, Vim, and PyCharm that wasn't a configuration nightmare.
What kind of network switch? Extreme Networks?
He said in another comment he can't post it (work internal). 
The shortest, but the best answer I can think of is actually to go import collections, and make your object a subclass of `collections.Iterable`. Check the documentation of all the abstract base classes in the collections module here: https://docs.python.org/3/library/collections.abc.html import collections class MyNewClass(collections.Iterable): pass x = MyNewClass() After you do that, your interpreter will tell you what to do. Good luck! edit: so in short, just __iter__ as a generator, I would go with the abc for Iterable if iterable object is what you want, as opposed to any of the other "collection types" in there.
Congrats!
ARGH! YES! This is so frustrating. 
That's a very good reason - type hinting and mypy usage may take off in the future so it's good to adopt this.
What advantages does a conda module have?
Same here. Going to steal this idea and work on a simple HTTP2 server using asyncio during vacation later this year. I've never learned more about HTTP/1.1 than when I made a simple HTTP/1.1 server.
Doesn't matter. /r/Python is for **news** and **releases**. This is neither. It is a question. Do you know where questions go? Can you read the sidebar? Can you read the sticky?
Got it. Don't pollute /r/python. Pollute /r/learnpython.
Just start using star dates. 
oops apparently, I've broken the module index with the latest update. I'll fix it asap. 
He didn't invent a new format - this uses native python datetimes. I don't see the point of your second critique; it could apply to any new library. Every module starts somewhere.
[Relevant XKCD](https://xkcd.com/1179/)
[Obligatory counter-XKCD](https://xkcd.com/1179/)
[Image](http://imgs.xkcd.com/comics/iso_8601.png) [Mobile](https://m.xkcd.com/1179/) **Title:** ISO 8601 **Title-text:** ISO 8601 was published on 06\/05\/88 and most recently amended on 12\/01\/04\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1179#Explanation) **Stats:** This comic has been referenced 617 times, representing 0.5137% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d5xbryx)
[Counter-XKCD](https://xkcd.com/1179/)
https://github.com/stefanoborini/vai 
Ah my bad, did not think to check there was a git sub. I'll go ask there then. Thanks for the suggestion
Thanks
It installs easier and quicker, it plays very nicely with conda environments (it's very easy to port/clone/modify them, and virtualenvs sometimes have problems with installed libraries), and it's much easier to host your own conda repo than it is a pip server.
The author is an idiot. Python will not work for a majority of products for obvious reasons. 
I've pushed this agenda and even have a little lib to do this: https://github.com/boxed/iso8601 But the glacial flow of everything in standard library mailing lists is just horrible. 
Even more frustrating: the lib called iso8601 on pypi doesn't actually do iso8601. Mine does though: https://github.com/boxed/iso8601 although mine is probably slow and whatever but since no one seems to care I haven't spent time to polish that part. My stuff works and has a nice API though. 
https://github.com/boxed/iso8601
Plus arrow is broken in that invalid inputs gives you valid datetimes, dates and times are just created as datetimes so you have no type safety and everything is chaos. 
RFC3339 is pretty damningly small. No times, no dates. What a mess. 
No offense taken. Thanks a lot. The weirdness you are seeing is because I had no feedback before and somehow I have to keep the level as low as possible if I need any matlab user to be converted to Python and eventually the strange numpy syntax. My biggest problem is that my audience -- control eng students -- are not coders. So some considerable spoonfeeding is necessary ala "Numpy for Matlab users cheat sheet". But nevertheless you have raised many good points. I need to work on this angle more. Once again thanks! 
&gt; No offense taken. Thanks a lot. The weirdness you are seeing is because I had no feedback before and somehow I have to keep the level as low as possible if I need any matlab user to be converted to Python and eventually the strange numpy syntax. I understand that and I've been there too, on both ends. My suggestion is to write a stand-alone guide geared to your specific community that you can link to. "Intro to Python for control systems" or whatever. In there you could use your library as examples, but in the library docs all there should be, in my opinion at least, is a link to the guide.
I've personally never seen an application where constructing datetime objects was the biggest bottleneck keeping its performance below acceptable levels.
I appreciate that, since a significant part of the proposed value is speed, it comes with benchmarks! Having a pure-python implementation (with the same API) to fall back on would help for the platforms the C doesn't build on, and it'd be interesting to see how it does under pypy.
You already have Python installed by default on Ubuntu. However, once you get familiar with Python I can recommend the anaconda distribution by continuum. It makes having multiple versions of Python installed side by side very easy, among other things. 
Ah yes I know what you mean. Fortunately I have tested enough to convince myself that it is useful for real life examples because I too was scared about that possibility so I am constantly checking with well-known ill-conditioned systems library such as Compleib, Niconet Benchmark Examples for Model Reduction and others. So far so good. It is clear that I'm lacking proper documentation in the common sense :) 
Thank you. Do you know where I can find it as I can't find it? :/
It depends. If the publisher uploads working wheel packages, compiled C code is no problem. Until recently, Python packages with C code were an absolute horror for users. E.g. you had to install some specific version of Microsoft Visual Studio just to pip install numpy on Windows. These problems have all been fixed now, though. Conda had a working solution for this long before, but the official Python packaging tools (setuptools + pip) have recently more than caught up.
&gt; http://blog.dscpl.com.au/2012/10/why-are-you-using-embedded-mode-of.html Thanks. I can't seem to get anything done in one sitting. It takes me several "sittings" to get things done, like using Apache to server Flask app.
You can, but it's not just this library. Many Python modules compile from C. In my opinion you should make sure your VMs do have `gcc` if you intend to use them for Python.
Thanks, I'm used to the IDLE layout. What’s Anaconda? Is it worth playing around with?
You can write a simple question answering system that takes in a Wikipedia page as input and responds to factoid and yes/no questions based on information on that page. http://cs.stanford.edu/people/mengqiu/publication/LSII-LitReview.pdf
It basically is just a package manager for Python (and a few other languages) that also lets you have multiple versions of Python installed at the same time. It is really useful if you need to use any scientific package like Numpy, since those usually need to be compiled from C code and can be tricky to install via pip. Its great when you have multiple projects with different requirements. For beginners I would just recommend using what you already have and then transition into it later when you need to. 
Well in an enterprise environment that's fine. The company can choose which parts of the language it wants to use and which it doesn't. That doesn't make it a bad language but rather one that is flexible in enough to be used in all of the various ways that different organizations with different needs want to. The point it you're not going to write graphics intensive software or software that cannot allow for non-deterministic memory management in Java or Python. Where as you can in C++ or D. 
Didn't realize wheels fixed this!
How do you deal with DST and leap seconds?
if it doesn't have to be python look up sed. or see if there's a sed like library for python. otherwise just count newlines in the file
If you put four spaces before each line then reddit will preserve your formatting. You also don't say what error you are getting.
i did. my error is that the file is not being created/saved where i want it to.
Yes, but it would help us diagnose the problem if you said where it was being saved to or if there are any errors.
A pastebin is fine.
windows 10
How is one more logical than the other?
None. Unless you have no clue what you are doing.
I don't know what's going on with QPython. Just want to add that you can also code with Termux. This gives you a terminal on Android. Then you can simply install python with `apt-get install python` and run it like in every other terminal application. Note that you can install a bunch of modules, if you installed pip or easy_install too but you will get problems if you need to compile something with the gcc. I tried to install jupyter, wanted to check if I can run a notebook on my phone. But it stops while trying to compile pyzmq. I installed also gcc and tried easy_install with install options. However, it is a complete terminal. Using CTRL is solved by pressing volumne down + Key. PS. IPython is installable. Now I try to find how to emulate TAB and this is the best CLI intepreter also on android :D
What makes a number prime? It only has two divisors, one and itself. Let's look at 3 for instance. Only 1, 3 divide 3. 2 does not divide 3. Let's look at 8. 1,2,4,8 divide 8. If we made a temporary list for the divisors of 3 it would have [1,3] and we see this list has length 2. If we looked at the list for 8 it would contain [1,2,4,8] which has length 4. So what we can do is add the numbers that only have list length 2 to a new list. This is an alternate suggestion. 
It's really all about the `%&gt;%` paradigm and the idea behind tidy data, which can feel really weird if you're used to Python. Some people think it's inane, and I can see why, but for me, it really makes my data wrangling workflow much more streamlined.
Original series, tng , ds9 or reboot movie?
Yes
@/u/Ph0en1x_ He means use double slashes because \ is special but reddit formatting for code is absolute wank. C:\\Progr.... You can also use a single forward slash even on Windows. e.g. C:/Pro... 
Learn Python the Hard way is good, but it's for Python 2. I wouldn't waste my time with it at this point unless I had a specific reason to want to learn that version. 
Thanks for the heads up, I edited my comment
Fedora24 currently. I work with amazon linux and centos servers mostly at work and it's nice to be on a desktop focused distro that is close to both of them. Also, it's great!
Termux with hackers keyboard is awesome. Plus tmux and you can do anything.
http://i.imgur.com/xB3LC1E.jpg
Look at a library called statsmodels, the documentation is pretty good and I use it for time series work. 
massedit can help though it may be overkill. 
&gt; Python would be an absolute nightmare for most dev teams because the products they create would suffer. Could you please elaborate on this? I don't get it.
Debian, Jessie at work, wheezy (servers, because I am still testing systemd) and jessie at home
Made this today, a one page static site generator. I'm _sure_ there are bugs. https://github.com/travisjungroth/agrmin
Ubuntu. It's the only OS that doesn't make me scream in frustration at the stupid unhelpful shit it does.
Source code [here](https://github.com/aosabook/500lines/tree/master/modeller).
*NIX or whatever you want to call it. OS X, Ubuntu, RedHat, Linux, that kind of stuff.
Cool. Thanks
It does some random subset. 
Not if you know what you're doing, which if you are downloading a security tools distro I hope you do
http://xkcd.com/927/
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3287 times, representing 2.7350% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d5y4njd)
Until 2036!
Ubuntu 16.04
Oh, I never heard about Termux ! This sounds awesome, I'll definitely check that out. Thanks! :D
Just wondering, do you know if it would be able to run and display a GUI type framework like pygame? I am actually trying to turn a tablet into a self-made assistant, with a pygame program I made (I want to hang the tablet on a wall, and my assistant would run on it)
Hi, and thanks for the input! I absolutely agree with you. I've been trying to figure out a short, illustrative and convincing few-liner example that I can put in the readme on github and the front page of the documentation. Haven't figured one out so far, unfortunately :/ since there are quite a few things I'd like to demonstrate with it (given a set of interesting nodes: [creating edges](http://deepgraph.readthedocs.io/en/latest/generated/deepgraph.deepgraph.DeepGraph.create_edges.html#deepgraph.deepgraph.DeepGraph.create_edges), [converting to a networkx](http://deepgraph.readthedocs.io/en/latest/generated/deepgraph.deepgraph.DeepGraph.return_nx_graph.html#deepgraph.deepgraph.DeepGraph.return_nx_graph)/[graph_tool](http://deepgraph.readthedocs.io/en/latest/generated/deepgraph.deepgraph.DeepGraph.return_gt_graph.html#deepgraph.deepgraph.DeepGraph.return_gt_graph) graph, [partition](http://deepgraph.readthedocs.io/en/latest/generated/deepgraph.deepgraph.DeepGraph.partition_graph.html#deepgraph.deepgraph.DeepGraph.partition_graph) and [plot](http://deepgraph.readthedocs.io/en/latest/generated/deepgraph.deepgraph.DeepGraph.plot_2d.html#deepgraph.deepgraph.DeepGraph.plot_2d) the graph). Did you get what the package is about though, in reasonable time? I've been trying to make that clear in the ["what is deepgraph"](http://deepgraph.readthedocs.io/en/latest/what_is_deepgraph.html) section and the ["10min. to deepgraph"](http://deepgraph.readthedocs.io/en/latest/tutorials/10min_to_deepgraph.html) tutorial (which, admittedly, needs an overhaul. It's more like "1min. to some of deepgraph" at the moment).
&gt; In [1]: [*'abc'] &gt; &gt; Out[1]: ['a', 'b', 'c'] What version of python is this? That appears to be a SyntaxError in 3.4 and 2.7.
Hi, I'm a student major in Civil Engineering, and this is my master theis. It's a probability model for describing the joint distribution of wind speed and direction. I use Jupyter Notebook to do the work, including building the model and examination. Not sure if there is anyone work on related topic. I hope this can be helpful. 