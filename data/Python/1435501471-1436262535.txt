I'm 100% sure that netflix uses the right tool for the job, so they utilize a variety of technologies. And I would bet $$ if they were using django specifically it wouldn't be used for anything that has to scale at their levels. maybe some internal stuff but that's about it. Python the language is probably used to process analytics data through scipy or something. 
Completely agree. Though the self-hosted options do offer support for automatic spam filtering using Akismet.. Would be nice to know how it stacks up nowadays compared to the hosted services. Is there anything that makes Disqus preferable to LifeFyre or IntenseDebate?
I *almost* prefer IPython notebook. There is just one thing that keeps me in the console. If I write a loop that prints more things than I expected, the console will generally handle it perfectly fine. In the notebook, it'll probably lock up the page for a long time or even effectively crash the browser tab. If I didn't have to be afraid of calling print, I would use the notebook all the time.
What does your volume look like? I've used `threadedcomments` but the issue wasn't spammers it was scaling. Without heavy modification `threadedcomments` is constantly issuing queries to the database(sorting, pagination, etc.). We ended up tossing it for a homegrown solution.
ipython is for interactive stuff that you never want to run again. It's a direct competitor with the python stock repl and bpython. The ipython notebook is for more durable, more presentable problems. You can share a notebook to show someone what you did or even to let them tinker. They are suitable for saving and coming back to work on again later. They are comparable to writing a script and a small, informal report.
The link, if it helps https://www.jetbrains.com/buy/opensource/?product=pycharm
I used to use IPython notebook a lot. I still do, but I moved much of my workflow back to tmux + vim + ipython console. I feel that the notebook is good for when you have a good idea of what you want to do, or when you are exploring something simple. Also great for presentations. For non-linear exploration, I prefer to use it only for note-to-self type of stuff but not the actual work. I still feel like there's a better process to be built, one that encompasses all of it cleanly.
[source](https://www.youtube.com/watch?v=YBoS-svKdgs) [@3mins](https://youtu.be/YBoS-svKdgs?t=3m1s)
Thank you all for some very educational points. Especially pointing out my rather silly mistake that I'm not really parallelising anything! Makes a lot of sense that as this isn't CPU bound I'm not going to gain anything anyway. Though I may keep tinkering just to see what else I can learn.
Ssh tunnels are cool. I did mine differently. I set up my ipython server on a research machine to serve up web pages on https. The port is only accessible through port knocking. Even if you did get through that, the address is mildly obscure. But even past that, ipython notebook servers are password protected. Edit: grammar
Notebook: When I want to share stuff QT Console: For my own experiments. I must add: I hate the Windows calculator; especially on Windows 7, it has separated programmer and science versions, so that if you do 3/2 on the programmers tab, you get 1. I have a Ipython console open **at all times**, and use it for any calculations. Haven't used calc for years now (and don't miss it either!)
For me, it depends on the function. Quick code prototyping while I'm writing project code? Console via guake. Prototyping plotting functions, or working through a new idea, the notebook. It's nice to actually treat it as a notebook and annotate your progress with markdown.
I thought the same thing. Which may be part of the joke.
/r/shittyprogramming
A free and amazing alternative: https://www.udacity.com/course/web-development--cs253 The course is taught by [Steve Huffman](/u/spez), the very guy who built Reddit.
What I dislike about None, now that I've accepted it as part of my being, is when people use it to represent some thing other than "There's literally no value here. It's nothing. I will throw an error. Guard against me." For example, flask-wtf defines a class whose sole purpose to fill in for None because None is an actual bit of information. I will caveat that I've made pseudo-None replacements because while they also represent "There's literally no value here" they also behave in ways different from None. See: Haskell's Nothing and mempty and Scala's None (which were the models).
Nah, not at all. Facebook is a web platform in the first place, it makes sense as a business to develop things that tie in. Microsoft have a vast range of compilers and languages for desktop programming. Making something web-based is just adding another facet. What I'm talking about are the developers who will ONLY do web dev, even for stuff that is definitely desktop dev work. An example is one from work: We store photographs on a file server in the building. Photographers come back from jobs, and we copy their photos to this server. Another set of computers in the building run the digilabs, (big industrial printers), and pull photos from the photo server to send to the labs. A team we originally got in for web dev, (which didn't go amazingly), were asked if they could rewrite this. They immediately launched into cloud-based solutions, and span it as "YOU COULD DO THIS FROM ANYWHERE" etc., which is absolute fucking bollocks, 'cause that means if the internet goes down, the business stops, which they handwaved. My solution which addresses their selling point of easy expansion, is data replication. You open a new office, and plonk a copy of the fileserver there, too. If the office doesn't have printing facilities, all their fileserver needs to do is hold files. The fileserver in an office that has printing facilities replicates all of the data on all of the fileservers. This way, satellite offices can work at LAN speed on their photos, printing offices can work as normal, AND all printing offices have overflow capability to any other printing office. My solution only falls down when the internet does if it happens when a satellite office wants something printed, which our current solution also falls down on. We get round it thanks to cars. Yet another solution this obviously purely web dev team tried to spin was for a photograph database, such that the photographers could attach data (names, addresses, what have you) to photographs while shooting. All they had was a hammer. I do believe the suggestion was made that every photographer should carry a laptop and run apache on it. Much more sensibly, I suggested tablets. I think phones can do it, too; I've not too much experience with cameras in conjunction with smartphones. Rant rant rant.
Ipython notebook is for creating a *product*. The product is a set of notes with the code and figures (like a lab notebook). When I work on the notebook, I start out in a manner similar to the console. Trying different things till I get close to what I want. Then the magic begins: I *very* quickly delete all the useless code I no longer need till I have it down to the bare code needed to get the task to work. Then I annotate the various cells, put equations, even figures, that explain everything. In the end I have a report. At times I'll need to rerun the analysis with new data. If I set up my notebook well, I'll simply point to the new data and execute all cells, and get all the updated plots, tables, etc. I'm basically coding and creating a report at the same time. 
Not so easy if you want to go back and change it later!
I'm working on a site that requires tons of image resizing, I'll give your library a go and see how I like it =] **edit**: so I was on the shitter and didn't check the source before commenting. Cool cmd tool, but if you're interested in making this an importable library, you might have to change the name (without a hyphen) and clean it up a bit (sys is imported but never used). I was going to merge a function that'd allow you to resize the image from another script, but I'm lazy and don't want to mess around with setup.py or change the name. Here's the code in case you want it though def resize(image, size, append=None): """ resize an image image (string) - path of image to be resized size (set) - resize dimensions append (string) - optional appended string of output """ if not isinstance(image, str) or not os.path.isfile(image): raise IOError('bad image path') if not isinstance(size, tuple): raise IOError('bad size type, should be a tuple') if not append: append = '%d_%d' % size try: path, ext = os.path.splitext(image) outfile = '%s_%s%s' % (path, append, ext) im = Image.open(image) im.thumbnail(size, Image.ANTIALIAS) im.save(outfile) print 'Resized %s to %s.' % (image, outfile) except IOError as e: print 'Could not resize image because: %s' % e.message **edit 2**: I know there are other better, more stable libraries out there guys. I don't think this was an attempt to replace those tools, but rather to learn how to implement similar functionality.
It's not IO bound. The problem is you have to int/float everything. Make it binary and it's lightning fast. You can definitely multiprocess the type conversion.
Agree. For a professional programer, $250 shouldn't even be an issue. I know people who pay more than that *per month* to Heroku / Linode for a webapp that gets like 10 visitors/day. If you are running your shop as a business (which you should be), then it's a tax deductible expense anyway. Yeah, I know hobbyists students etc etc. There are enough options for them. It's this default *commercial = evil* thinking that worries me.
To add to your comment, I use vim with the ipython plug-in from Ivanov (https://github.com/ivanov/vim-ipython) which let's you send lines from vim to an ipython kernel in tmux interactively. I cannot use anything else than vim for code editing and this workflow have done wonders for me. 
I assume you talk specifically about Fibonacci having such algorithms, not in general case, right? For me Fibonacci was just an example to be able to show 4 solutions.
Nice! If you have any feature requests or spot bugs, just raise an issue on github. I'll work on it :-) 
I'm not interested in implementing this function because i consider the harmonic and melodic minor scales contrived. Partch and Helmholtz both show the major scale and natural minor follow from simple 4:5:6 or 6/(4:5:6) harmonic relationships. The harmonic and melodic minor scales do not, and so i consider them artificial. The app is open source, however, so anyone is welcome to fork it to their heart's desire. 
Yup, the Notebook is more for telling stories, than writing large pieces of software. http://nbviewer.ipython.org/url/norvig.com/ipython/TSPv3.ipynb
http://pastebin.com/Nym03cPH Some profile results attached for various chunk sizes if anyone is curious.
http://aws.amazon.com/
IPython Notebook is great but I don't think it is the best place to prototype and try out new things when you are still putting stuff together. An IDE like Spyder that integrates with an IPython Console is far superior for prototyping compared to IPy Notebook. Additionally, Spyder natively supports code cells like IPy notebook/Matlab, so it makes prototyping really easy. I will typically flesh stuff out and do all the trial-error stuff in Spyder till I am at a place where I know my code works. At that point, I pull it into IPython notebook and refactor it if needed in the process. Add in titles, documentation and equations, as well as plots so that it becomes a nice self-documenting notebook that would be great to refer back to at a later point in time. If I don't need equations or embedded plots, I never touch IPython Notebook and just stick to writing code in Spyder.
Notebooks. Why? Reusable code blocks and debugging have never been so easy.
&gt; For example, flask-wtf defines a class whose sole purpose to fill in for None because None is an actual bit of information. Hmm I'm not sure what you mean by "None is an actual bit of information." Which flask-wtf class are you talking about?
&gt; Multiprocessing is not a junk module. It absolutely is. It's a scourge. &gt; Like threading, it is neither a panacea or easy. The threading module is a pretty clear implementation of an API for accessing a well-defined feature. It can be hard to do correctly, but all the difficulty stems from the problem domain. The multiprocessing module is nothing like that. &gt; For posix compliant OSs, it's just fork() wrapped with some OO apis. This is **not remotely true**. - multiprocessing just does a fork (with no exec) on some platforms (as you indicate) depending on whether you are using a manager and whether you pass certain flags in certain versions of Python. This inconsistency is poisonous. - It doesn't just fork when it forks. It goes and tries to clean some various state. This belies the fact that forking with execing can be something you need to think about, and it tries not to encourage you to think about it. - It provides a process pool management thing, with multiple ways of accessing it. - It has network communication, which is implemented in a broken way. - It provides some shared memory stuff. - It provides interprocess locks. - It uses pickle all over, sometimes at times people aren't even expecting. It is much, much, much bigger than you imply, and is broken at most of the levels. Writing programs with it is a bad idea not just because it's unreliable and a little implicit, but because it's so inconsistent and so implicit that knowing what it's really doing when you write a program with it is not feasible. It's a piece of trash and I wish people would stop encouraging it.
https://github.com/lepture/flask-wtf/blob/master/flask_wtf/form.py#L20 That one. It's used further down to determine if it should automatically load submitted form data. However, a toggle option such as `autoload=True` would be better, in my opinion.
Oh man, Peter Norvig's IPython examples are my favorite programming things to read ever. Everything is explained so clearly! I also like the [gesture typing](http://nbviewer.ipython.org/url/norvig.com/ipython/Gesture%20Typing.ipynb) one. 
Fibonacci is most certainly not the only one, but I don't know enough math to give a precise definition for which work. You might want to look into "linear recurrence relations". [example](http://zobayer.blogspot.de/2010/11/matrix-exponentiation.html)
IPython, QT Console and IPython notebooks behind the scenes all run on the same kernel. So you can start an IPython notebook server and then connect to one of the kernels with an IPython console or QT Console. Again right tool for the job, IPython and QT Console can be easily embedded into another python program. This can be used for debugging extending etc. As someone mentioned for controlling a remote session, IPython Notebooks is more robust since it uses http/https. While with IPython and QT Console you have to setup an ssh tunnel. On an unreliable net connection the ssh will often get broken. They are all great products, but right now I am using mainly IPython notebooks.
I started with and I found it really great !
I started with the console and used it for a long time. My original impression was that the notebook was sort of "baby stuff," mainly for scientists and not so much programmers (if you're a programmer, who needs rich content?). But once I started hacking on the notebook and playing around with it, I was totally hooked and it has basically become another full-fledged IDE for me. It's most comparable to Emacs+SLIME for lisp. You'll often find lisp programmers saying the ipython notebook is an inferior SLIME, but of course the point they miss is that it's for *python* and no really good SLIME for python exists. For larger projects I use the notebook as a normal editor with the `%%file` magic. Normally I write a file with it, then `Ctrl+Home` to jump to the top left corner, then `Ctrl+/` to comment out the `%%file` magic and `Ctrl+Enter` to run the file in the current kernel. So basically I've loaded the file, but I can at the same time break it up into sections and work on parts of it with `Ctrl+Shift+-`. Then once everything is in place, `Shift+m` will merge the cells together again. Then uncomment the `%%file` and save it. This sounds maybe a little tedious but keep in mind you can do it with many files. So say one class belongs in a different file. Instead of cutting it and pasting it, I'd split the cells, then rearrange them. Not much difference, perhaps, but if you don't know what to do with that class, you can also just keep it by itself in the notebook. Another example is that I can load and do "live" editing of an entire flask project. I once needed to "touch" the wsgi file in order to signal to the server that things had changed, so I wrote a wrapper for `%%file` that would do this. So just like Emacs+SLIME, once you get to know the shortcuts, and start using few macros and magics you can really do just about anything, and quickly. Something I'm experimenting with more now is macros for code generation and refactoring. This started with a small macro to generate a full SELECT query for a large table (instead of doing `select * ...`, then finding you want `select * ...` *except* for one field). As an example, for `2to3` code refactoring/translation I wrote a small extension called [ipyfuturize](https://github.com/douglas-larocca/ipyfuturize).
`%edit -p` or `%edit somefile.py`
change the third if to elif elif y == "celcius"
That's the expected behavior if you haven't passed the script any args.
TANK ASSESS 
Tmux'd vim python script and ipython shell. Write the code in vim, send selections of code to ipython shell to run, switch from vim to ipython to test stuff and keep the working copy in vim. Finish things up by building an ipython notebook full of pictures, latex for formulas and explanations of what I've done for presentation. My goal is to spend most of my time in vim b/c (personally) am more efficient w/o the mouse.
Is it ironic that you can't pip install PyQt?
How about property-based testing with Hypothesis. It's a really cool library.
+1 for Norvig's work reference
I read that paper about "you can't teach programming" recently. Maybe you're better off just looking for people who can follow meaningless rules instead of searching for meaning that isn't there?
Isn't that doing the opposite of what you're intending? It seems like you're trying to be an evangelist or something. I get trying to turn away these stereotypes but sitting them down at a computer and telling them to type in some stuffy seems really excessive to me.
https://scratch.mit.edu 
Most people have no concept of it. Introducing small concepts and small building blocks is one way to make it less mystical. They can decide if it's for them, of course, but they can't make that decision well until they get a better sense of what it really is. Most people think you need to be awesome at math. For some programming, certainly. For others, you barely do math at all. Women in particular seem to have a fear of math, and think they can't do it for some reason, which in turn leads them to avoid programming. This is a big disservice to them, and I want to change that in my small way one at a time.
I don't completely get the desire to *convince* people that programming is fun. I'm not going to pretend that I'm great at it--it's not even what my formal education is in--but with essentially no cajoling, I fell in love with it during the brief programming unit of my 7th grade computer literacy course. I learned PRINT and GOTO in BASICA on an Apple ][e, and I was off to the races. I remember writing a program that just counted up, printing out the results as it went. I wanted to see how high it would get if left over night, so I covered up the glowing red power switch of the computer with a strip of notebook paper that I had colored in with a pen. If basic exposure isn't enough to get someone's juices flowing, then maybe they aren't cut out to be a programmer.
Fixed. Thank you!
[Show them monitors like this](https://i.imgur.com/25kBZXN.jpg) If that doesn't get the juices flowing, I just don't know what will.
Sometimes people write programs that ask for stuff from the OS and don't tell the OS when they're done with it. If that happens repeatedly, the program will keep accumulating more and more stuff until the OS runs out, and then the program crashes.
I would show them a sleek, modern website, preferably of a luxury item.
First take them to /g/ then take them to hacker news, then show them all the banned beginner questions on stack overflow. 
Try to have a look at how Rust manages garbage collection if you haven't already. Really interesting approach :)
well, I've always thought teaching SQL first would be best. You don't need to be a super genius to be able to make basic database queries. For the first time out, you're showing easy ways to generate results .. which is rewarding. From there, show that the data can be manipulated or worked on in a language like Python. You'll explain about making a connection to the database, how to execute the query, and now to traverse the results. From there, add in how to display the results on a web page or over a network, and basically keep building concepts on top of each other. 
In static type languages, when you need to create variables while the program is running, you need to: 1. tell the OS to give your program memory 2. specify the data type 3. manually track your variables (I hope you didn't forget that you asked the OS for 5 ints) 4. and tell the OS that you are done using that memory so that other programs can use it (If you closed 3 ints, there will be 2 int-sized variables that is unusable by others until your program shuts down). In dynamic-type languages like Python, you just do step 1.
I've heard some people say that teaching should start with Javascript, since it's easier to get started with without setting up an environment and you get faster to a point where you can see visual feedback, such as drawing a circle on the screen. Though the thought of Javascript being anyone's entry point into programming makes my skin crawl.
&gt;&gt;&gt;&gt;&gt; *If you want to build a ship, don't drum up the men to gather wood, divide the work and give orders. Instead, teach them to yearn for the vast and endless sea.* -Antoine de Saint Exupéry Programming isn't fun. The people who think programming is fun are a bit crazy, and seldom good at it. *Making stuff* is fun, *solving problems* is fun, tinkering is fun, and doing something that wasn't feasible before is fun. ***What are they interested in?*** **Interested in politics?** - Download the FEC donor datasets for the people running for president. Open one up (perhaps with pandas) and start asking questions? - What are the most common jobs these people have? - Whoa, some of those top jobs aren't people who work for normal companies. What percentage of the funds come from people who aren't middle class wage slaves? - What about the wage slaves? What are the top employers? - What are some of the unique professions they practice? Scan through a list of them, find some wacky ones? - Whoa, why are some of these amounts negative? Look at *this column*...reassignment? What fraction of donations were illegal and had to be refunded or reassigned? **Interested in gambling?** - Compute the odds for craps bets. Is it really better to bet pass or don't? - Compute the odds for blackjack...all the variants that are common - Compute how much I hurt myself violating basic strategy the ways I enjoy doing it - Make up a new game
Wow, this is excellent! This is the first time I've seen this!
&gt;"you can't teach programming" Do you happen to have a link for this? I'm curious to read it, and googling that phrase didn't turn up an obvious result.
Automatic variables in C aren't so different than regular variables in Python. Sure if you allocate some memory to the heap, you may need to worry about it. But autos are destroyed at the end of their scope just like in python, no need to worry about cleaning those up.
I can't understand why this doesn't have more up-votes. turtle is so easy kids do it. want to draw a square? sure draw a square. how about building a routine for drawing a square? how about a circle? how about rectangles of different sizes / aspect ratios -- suddenly you have procedures, function definitions, argument variation to explain that multiple definitions can exist, etc.
I would ask them what is their favorite website and try to scrap important parts of it, showing how to do it in the way. This could be awesome for Python.
To be fair, I only posted 30 minutes ago. I segue from this exercise to functions and having them write their names via function calls. The only thing that I wish I can do with this is make an exam out of turtle. In all of my class, this is their favorite exercise and they all look forward to the exam. But I can't justify drawing pictures as a programming exam. It severely punishes those without mathematical or artistic backgrounds.
Programming is not fun unless you are into it. Those of us who consider it fun are not like most. 
&gt;garbage collection (which is what causes memory leaks) Garbage collection doesn't cause memory leaks...
uhhh?
&gt; 3\. manually track your variables (I hope you didn't forget that you asked the OS for 5 ints) &gt; 4\. and tell the OS that you are done using that memory so that other programs can use it (If you closed 3 ints, there will be 2 int-sized variables that is unusable by others until your program shuts down). Eh, as long as the variables are on the stack you don't do either of these in any statically typed language I know of. They're taken care of automatically. Furthermore, many (most?) statically typed languages are fully garbage collected so that you don't need to manage the heap or the stack manually, including Java, C#, Go, Haskell, and many more. Also, the second statement is false for some statically typed languages that have type inference, including Haskell, Go, C++ (with the auto keyword) and others &gt;2\. specify the data type Moral of the story, there's no requirement that a dynamic language be garbage collected (although I can't think of any that aren't or a reason you would really want to do that) or for a statically typed language to have manual memory management (the majority don't).
Can you give us some deets? I am totally interested in things depending on the things
.. what? no. The only case where GC might be considered to 'cause' 'memory leaks' is if you create circular references. In this case, you are effectively telling Python those objects must be kept around forever, so it should be pretty obvious that it will.. keep them around forever. (In the case of circular references, if that isn't what you want, you should be using weakrefs.) I suppose you can also view the fact that GC systems do not free memory immediately as a 'memory leak', but that's **really** stretching the definition of memory leak.
DigitalOcean &gt; AWS
Hm. Not sure what happened there.. I think I must have read the quote and ignored your actual post.. Sorry.
I think they meant in the more abstract sense, as in *lack* of "garbage collection" (where garbage collection just means cleaning up unused memory by any means, not with a garbage collector specifically) causes memory leaks. They might have misunderstood the concepts but it seems like just a case of poor wording.
TypeError: expected a list, not a string
The ability to think very abstractly and reason well about complex working models in your head is actually pretty rare. Even most programmers aren't terribly good at it, and it's a source of frustration for a lot of people in the industry, especially those who went into it for the money. Programming is not a mystical or genius-level endeavor for sure, but I'd say that the only people for whom it is worth promoting to are those who didn't have any trouble with math at school (preferably enjoyed it, too).
This has got nothing to do with static types. A static type language can be just as easily GC as a dynamic type language.
&gt; Most people think you need to be awesome at math. For some programming, certainly. For others, you barely do math at all. You don't have to do much actual math when doing most programming, but ability to do math is a proxy for the ability to reason about complex abstract concepts, which you *do* need. &gt;Women in particular seem to have a fear of math, and think they can't do it for some reason Well, that hurdle is probably going to be the same for anything beyond the most basic programming.
I'm skeptical about the presumption that girls think they need extreme math ability and therefore avoid it. I would say that it's better approached from the perspective not of coding as a goal, but coding as a way to handle problems. So like, I've got scripts to do stuff for me that I think make a good example of how it can be useful. I just picked it up so I haven't started going through them yet, but I did also just pick up a book humble bundle that has some intro programming stuff: https://www.humblebundle.com/books (I picked it up when i looked at one page of the linux command line stuff and learned something I wasn't aware of)
I worded it poorly :s
Doesn't python's GC spot circular references some/all the time?
You show them an arduino and make the stupid light blink faster and slower. Mind blown. Worked already on several people. They never thought they could do anything like that.
I like Ned Batchelder's method of introducing programming to his niece. http://nedbatchelder.com/blog/201212/kims_python_lesson.html He starts out with basics like arithmetic in the REPL and then slowly builds up to an interactive simple mad libs game.
&gt; Programming isn't fun. The people who think programming is fun are a bit crazy, and seldom good at it. Making stuff is fun, solving problems is fun, tinkering is fun, and doing something that wasn't feasible before is fun. What the hell is programming if it isn't making stuff, solving problems and tinkering. You basically said it wasn't fun by taking the parts of programming that you find fun out of the definition. I find programming fun because it is all those things and more.
You misspelled "buffer overflow errors and being a 1337 h4x0r" - that's why I learned about memory management when I was a kid.
Next time write the title in uppercase and use twice as many exclamation marks.
I show them my [Python3.Codes](http://python3.codes/) website. It has a lot of small examples of Python 3 code, mostly visual such as fractals, that can be run right there in the browser (courtesy of Trinket &amp; turtle). Most of the math is fairly elementary, up to complex numbers for the Mandelbrot Set. 
I think he's using the word "programming" to mean a specific skill: using a programming language to express algorithmic behavior. There's a whole bunch of other skills that go into program design; programming, in this sense, is just the core. In the sense that creating a painting is more than using a paintbrush, creating a program is more than programming. But this is just a little semantics thing. Like most words, "programming" has a whole bunch of different meanings and implications, and people sometimes don't realize that they mean different things.
Not really, though if you really wanted, you could `rsync` the images over to your local device for viewing. Or look for a curses-based plotting library.
Hehe, your knowledge wasn't particularly accurate for decade-old C, either :) You don't have to malloc/free for primitives like int. Your issue is that you are dealing with an object (linked list), so you do have to malloc/free for that (because it is of dynamic size). Take your example. Note you didn't malloc/free(size). This is because size is allocated memory from the stack, while data is allocated memory from the heap. When executing a C program, if you call a subroutine/function, the stack changes the stack pointer a certain distance, and then it also moves the stack pointer further to allocate memory for all static local variables. When the function exits, the stack pointer moves the opposite direction to free the memory. Any time you see */&amp;, you're dealing with dynamic memory that is accessed in the heap, which is like the Trash Heap from Fraggle Rock :) Just messy and disorganized. Imagine I have a pointer variable called "eac" that is the stack pointer, pointing to the current "it" space in the stack memory. In pseudocode sort of resembling an Assembly language, here's what it looks like: # . . . start of function . . . push eac, 4 # this allocates 4 bytes for your *int size* (eac holds the address of a point in memory, and pushing 4 to it tells it to go four memory addresses over) # . . . other stuff in your function happens pop eac, 4 # this de-allocates the 4 bytes for *size* (same as above, but popping 4 tells it to go four memory addresses back) # . . . function ends I forget what the designation for stack register is, and it depends on the Assembly you're using anyway, but just think of *eac* as just a regular variable. Seriously, learn an Assembly. You'll feel like you've attained Buddhahood and will understand so much.
&gt; Programming isn't fun. The people who think programming is fun are a bit crazy, and seldom good at it. Making stuff is fun, solving problems is fun, tinkering is fun, and doing something that wasn't feasible before is fun. Screw you. Programming is really fun. Imo. You can't just say 'hurr programming isn't fun', 'oh and those who think that are pretty shit'. Read this: "Math isn't fun, and those who think it is are just fucking bad at it lol" It comes off so elitist and condescending. 
Big ups to you; you put it better than I did, so I deleted my comment. The percentage of the population that is capable of programming with any success is really tiny for the reasons you identify. Good programmers are good at college-level math and philosophy (read: set theory, logic, recursion).
If you did well in math in school, you should get a tutor for programming. If you didn't, you probably should give it up because programming is just a branch of mathematics, and being poor in math is strongly, strongly correlated with being poor in programming. 
Don't judge them on the quality of their output - which is tied to their patience/artistic abilities. Judge them on the code they have written. Don't hesitate to introduce basic maths and show folks how they map to code. The exams need not be complex or exhaustive, but can be designed from extremely simple to simple to longer stuff.
What worked for me when I was about 7: 10 print "poo " 20 goto 10 It was simple times
Show them how to use it to solve a problem they, personally, are having. It's not a fun little diversion. Programming is raw power, and people love power.
Professional programmer who has used Python daily for ~5 years. Never knew turtle was in the stdlib. I actually had to go run this in console just to verify, it really does work!
I recall turtle was a pretty common exercise way back in the day before the days of Python even, but I think turtle graphics are often forgotten lately. There are good reasons it's been around for all this time. :)
Honestly, I think that's the wrong approach to take. Rather than trying to teach them that programming is fun, try to show them that programming is *useful*. A lot of people think that it's some kind of airy, dry academic thing that's not relevant to them. So show them how they could make their own lives easier. Many people in office jobs have to do extremely dull, repetitive tasks that are ripe for scripting, so show them how they can do that. Point them at https://automatetheboringstuff.com/ and demonstrate a few example to them. If you can cut down a dull, repetitive task that may take hours to just running a Python script, at a stroke you've made their lives easier. Even if they find programming tedious, almost everyone will prefer it to the sheer drudgery of copying and pasting some values from a spreadsheet. 
What kind of project?
Sorry to say it man, but you really don't understand the concept of types at all - consider reading through some stuff
The web is by far the most attractive thing to come out of computer science. So while the turtle might be fun for a child, an adult I would show bottle and how I can easily make a website by editing a few files. Add content to the website and explain how it is related to the code I write. I think that's a good gateway with an interesting path through development, testing and deployment. Of course I never do this assuming that everyone can or want to program. 
It's one thing to forget math and it's another thing to be bad at math. Most highschool math isn't itself used in programming, but rather the ability to use math-like reasoning and not panic when faced with adding a bunch of numbers together.
Yeah, exactly what I was saying. the size variable is on the stack so it's managed automatically, while the memory pointed to by data is on the heap so it's managed manually. Even C doesn't require manual management for many variables (stack variables tend to be more common than heap variables), as your example demonstrates. And what you said is flat out wrong for most statically typed languages (Java, Haskell, C#, etc). The question has nothing to do with whether a language is statically or dynamically typed.
Es sieht gut aus ! Is it possible to commit the .rst file that was used to produce the demo page. Many thanks.
Indeed. I view the word "coding" in much the same way as /u/eikenberry seems to view "programming". I have to fight my inner definition-demons since, in the UK, there is a big push at the moment to get kids "coding" whereas I think one should get kids a) programming and, more importantly, b) debugging. I say "fight" here because intellectually I know this is me being pedantic and imposing my own narrow definitions of a word onto its use in a broader context. Viscerally, however, it troubles me each time I see "coding" used in this way.
Sure, I just uploaded it to the repository. Glad you like it!
I've been looking for a project-partner for a while now ~ I'd be happy to.
Trolling aside: both the console and the notebook have their use cases. I just like the console more.
`1 / 4` I understand this. It just drops the floating part. And I reached till here easily... `6 - 5 + 0 - 0 + 6` but with `6 - 5` **how did you compute that `-` part to 1 when there's already a `+` operator??** And see even in this line `1 - 0 + 6`, you computed `1 - 0` to 1 when there's already a `+` in that line. 
This wasn't built to be used inside python. It was built as a command line tool. Seeing that there have been multiple suggestions to extend this, I'll probably take stab at it sometime soon. 
Very nice!
That's cute, but my question was serious and sincere.
Sorry. I would personally ask them what category of programming they are interested in and show them the basics.
Point being it is a skill you can develop rather than a talent you have or don't. The rarity is a function of exposure and persistence of study rather than one of random distribution of rare talent.
show them c++ and how you can actually make exe files
 1. I didn't realize that this was already multithreaded. This makes profile results........difficult to interpret at best. Time between the start and end of a call that was spent in another thread counts to the time of that call. 2. You need to see if things that are waiting, such as file read calls. I don't know what `pandas.parser.TextReader` does, if there is both IO and CPU stuff going on or if it's a thin IO wrapper. Looking at waiting on acquiring locks is not the same as other waiting, because presumably you're doing other stuff in the meantime. If most of the time isn't spent in stuff like read calls, you're not IO-bound. 3. In stuff written in C (core Python and C extensions), cProfile can lose access to calls, making it unclear when you're doing what. A C-level profile can be useful in such situations, sometimes.
&gt; Tons of web development doesn't take much math at all I'm not talking the algebra you study in middle school. All functional computer programming languages (which includes Python) are expressions of lambda calculus, which is a field of mathematics. Programming *is* math. I'm not saying you *use* some particular math equation. I'm saying programming *is* math. You can't avoid set theory and program anything meaningful; set theory is a branch of math, too.
Same here!
Is it really that easy? I was just looking at the [IPython Wiki](https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh) and saw no mention of using the notebook via ssh. 
I was very bored with middle school print statements myself. It wasn't until I got into data structures, machine learning, and game dev before I feel in love. For those who may be struggling with the basics, it DOES get more fun.
I started to work with ezodf, if you have question about it PM me ;)
 $ python Python 2.6.6 (r266:84292, Jan 22 2014, 09:42:36) [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import turtle Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ImportError: No module named turtle &gt;&gt;&gt; I'm sad now. :(
Easy. Open a browser and show how you can delete those annoying full-screen popovers easily with the inspector. Next—if they have a Mac—open up Terminal and use the [say](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html) command, possibly with a `&lt; file.txt | say` to show how to read a file. Finally pull up a Twilio account and use `curl` to send SMS messages.
I actually make a living out of teaching programming (games/apps/python) to children in the afternoon. Naturally i see mostly kids that want to program (games) and i only have to show them how to do it. But sometimes i'm stuck in the same situation as you describe (usually little sister/brother of student is pushed by parent to attend a trial lesson). In most cases, showing some tricks with scratch, python turtle or pygame is enough to catch a students interest. But some students exist who, after being able to code a short example, look at me asking: "what do i have to do now?". If i reply: "Whatever you want" i get a blank stare. The truth is that not every child is interested in computer programming. If i work with girls i usually try to interest them in aspects of graphical art or storytelling (processing, renpy). I teached hundreds of kids over the last years, but i failed to impress my own nephews. People have different interests and talents. I think it's the same situation as "proving" that classical music or any other art/sport is "fun". For some people, it simply is not interesting at all. That's no drama. You can live by example and show them that your hobby is fun for you, and they may come back to you later if their interests have changed. 
I'm about halfway through Automate The Boring Stuff With Python and I am really liking it. It starts off teaching you the basics but you're quickly building simple, real world projects on your own computer. I've found it very useful for bridging the gap between, ok I know some syntax and what can I actually make with that knowledge. I got about a quarter of the way through CodeAcademy before I stopped. I feel like CodeAcademy shelters you in a little world where you learn the syntax but never how the program will look and run on your own computer. Or even how to get it to run on your own machine. For me it was much more satisfying to see this thing I created working on my computer. On my computer I can tinker with the program and play with my own ideas. On CodeAcademy I felt like I was just filling in the blanks with what CodeAcademy wanted. On my computer I have a program I made that I can build on or reference later. On CodeAcademy I just have code in a window on a website. To me CodeAcademy just felt restrictive and I felt that was limiting both my fun and my ability to explore concepts and gain a better understanding. I tried learn Python The Hard Way too, but didn't care for the Author's style. I highly recommend automate the boring stuff. https://automatetheboringstuff.com 
I know about `pip`, I just got excited when everyone said it was in the standard library. For reference, it isn't in CentOS 6.6. :(
[https://thedaexperience.files.wordpress.com/2013/09/screen-shot-2013-09-22-at-4-56-16-pm.png](https://thedaexperience.files.wordpress.com/2013/09/screen-shot-2013-09-22-at-4-56-16-pm.png)
&gt;but the fact that you don't need to use it is the point Yes, you do. *That* is the point. I think your understanding of what "math" means is is limited. Every time you write _.union, you are using math. Every time you do _.filter, you are using math. Every time you use a function, *that is math*. Literally everything I've listed above *is* math. If you "don't use math" when programming, then you *cannot use a function because a function is math*. Math is not limited to just arithmetic.
Yeah, I think I learned by reading through Pong Kombat Qbasic code back in my AOL days. That and Gorillas, a projectile game written in Basic that came on my family's old Tandy 1000 IIRC.
Play Cities XL for a good example of memory leak (any of them). 
That was an awesome read. As a beginner, I love seeing the thought process of someone who knows what they're doing. Do you know where I could find more notebooks like this?
Ha, at first I thought you had mistook this for Minecraft sub. 
When I catch a baseball I am using math. When I walk I am using math. You are technically correct but your point is beside the point.
Baseball isn't math. Programming *is* math. You keep missing this distinction despite me pretty clearly saying it over and over again. In any case, it is not beside the point. The point I've been making (and others in this thread have made) is that if you do not have the capacity to do math, then you do not have the capacity to do programming.
it is in the standard library. Linux typically don't install all standard library as a standard package
My usual way is asking them what they like to do either in work or fun and seeing if you can cater your lesson to that. Failing that (or if you are teaching a class) my favorite intro is: Basic computer vision/image processing. With 3 lines you can import pylab as * open an image and save it out. You can flip the colors around, shrink the image along axes, blur it sharpen it, make edges. Have them play with the filters, then once you'd done one image, open a folder with thousands and with a couple lines, for loop through and do the same process. (though to be fair, I'm usually teaching scientists and cell counting/image processing is usually in their interest range.)
And explain to them the importance of putting a cover sheet on the tps reports.
I'd say don't judge them at all. Judgment often turns people away from programming. Offer advice and tips, but don't judge the person based on the code. Let them ask the question: enry_straker, how would you do it?
&gt; And 88% of the time is being spent on read_csv This doesn't tell you anything. The part that establishes how much of the time is spent in IO and what is spent in CPU is based on what's happening *inside* `read_csv`.
You're the real mvp!
Is there a way to view the coding of the module? I'm curious how it works.
Sewerage*
He's saying that not everyone is getting off on trying to make a mess a little bit tidier, which is a pretty legit assumption.
Hi capuas thanks for this opensource package. I have been trying to get it to work but I have failed so far. The package succesfully installed and the included examples are working fine. I run into some errors though, my code is like this: k = kriging(x, y) With x: (7, 3), [[ 9.45 0.85 0.0124156 ] [ 9.45 0.85 0.01406298] [ 9.45 0.85 0.01331782] [ 9.45 0.85 0.01322334] [ 9.45 0.85 0.01326307] [ 9.45 0.85 0.01326867] [ 9.45 0.85 0.01326631]] y: (7,), [ 22.54168968 21.18027801 21.76475024 21.84236505 21.80962619 21.80502211 21.80696612], this results in an exception ("Bad parameters"). Matrix is not positivedefinite. I figured this is because the input variables contain 2 rows of constants, but I do not understand why that is an issue. Could you elaborate on this? When I use different data i.e. x: (7, 3), [[ 1.15970000e+04 1.56430627e-01 2.50000000e+06] [ 1.87970000e+04 1.02084413e-01 2.60000000e+06] [ 1.55970000e+04 1.07780507e-01 2.20000000e+06] [ 1.95970000e+04 1.05251365e-01 2.40000000e+06] [ 1.75970000e+04 1.04925275e-01 2.80000000e+06] [ 2.85970000e+04 1.05063754e-01 2.90000000e+06] [ 1.25970000e+04 1.05082059e-01 2.70000000e+06]] y: (7,), [ 71227.10077037 62883.34655711 63694.55236393 63332.6401766 63286.1785335 63305.90355137 63308.51149871] I get no error. When I try to get an estimated value (using k.predict()) for input = [ 1.15970000e+04 , 1.56430627e-01, 2.50000000e+06] I get the following TypeError: TypeError: unsupported operand type(s) for *: 'float' and 'NoneType' If I use train(), this takes very long (too long in my case). Can you help me out on this?
terrible
hello.vbs s = Inputbox("Enter your name","Input Required") msgbox "hello " &amp; s &amp; " !!! "
You could probably do this easiest using the [Selenium](https://pypi.python.org/pypi/selenium) package - this can be used to automate a browser. Note that you will need to include code to log in - it creates a temporary profile of sorts that is not logged in to any web sites. However, I'd really question if this is wise. If you haven't actually looked at their page on Linkedin, they might figure that out fairly quickly and your plan will backfire. You might also want to consider the terms of service of LinkedIn, who might prohibit this exact kind of automation.
Nice. So one can have also free windows. Didn't know this.
Cool. Didn't consider that. Thanks 
You should do the following things: 1. Replace `return ValueError` with `raise ValueError` 2. Learn about /r/learnpython 
Neat. I Do the same (calculator thing) all the time :-)
there is a philosophy of CS phd program? Where is this program?
Nice to have a Spyder answer. You point to the right feature from Spyder and that is the cell mode. This is what I used always. Also in Matlab. I should have probably mention that. I guess I just got used to edit each individual cell, produce a few independent numbered graphics and then jump back and forth. Most of the times as a scientist one does not work on a software product but on a figure so I think prototyping does not apply in my case (wrong?).
Exceptions are "raised" not "returned". A raised exception is a special case of return that will keep going up your stack until something handles it. In this case the try/except clause will do the handling for you. if you change `return ValueError` to `raise ValueError` your code should work as intended. I think of raising an exception in terms of "activating" it. You're stopping execution and making the code that called the function deal with the error, if it can't it sends it up the stack to be dealt with, hence "raise" About the only time you would want to return an exception would be as a factory function to build exceptions that are going to be raised elsewhere.
PhD is a philosopher of CS it was redundant phrasing
There are some philosophy of science programs out there. So I was wondering if there were philosophy of computer science programs.
I hadn't considered the whole being logged in thing. Selenium is an interesting program, I'll keep it in mind. Thanks. I'm realizing now that I may only need a automation script that auto opens the links/results on a page? For example, if I do a search on google it'll open all the search result pages. I know I can simplify this a bit with autopager.... Would I have problems with it also clicking every ad? 
Any CS PhD degree is probably a Doctor of Philosophy. https://www.google.com/search?q=philosophy+of+computer+science+phd&amp;oq=philosophy+of+computer+science+phd&amp; Mine is from the Stanford Engineering College. 
Well, what is said students interests? I feel like if they gave you some data to work with, you could do all sorts of things with ipython notebook, pandas, matplotlib, etc to *show* them how programming is cool. lets say they like football or something, mess around with some nfl data to show them what you can do.
Don't do this. Please. It will *not* have the effect you think it will.
&gt;Most of the times as a scientist one does not work on a software product but on a figure so I think prototyping does not apply in my case (wrong?). I mainly work with scientific computing as a scientist as well. I still find Spyder better than working in Ipy notebook because you have direct access to the IPython console. It's very easy to play around in the console and try out a bunch of different commands and refine things till they are doing what you want them to do (for example figuring out the right sequence of Pandas transformations to mung your data). You can of course do the same in the Notebook by constantly re-running the cell, but it's a lot faster just working directly in the console while also having instant, HTML formatted access to documentation on functions/methods with a Ctrl+I combo. I definitely do use IPython Notebook a lot and do love it, but I find Spyder with integrated IPython console to be awesome for taking a first pass at any problem. 
Nice! Thanks!
Logo turtles!
Telling people how a computer could do their job could easily have the opposite effect from what you intend. And there are a great many jobs and hobbies that you can't easily write a program to do - like anything that involves interaction with other people or physical objects, or that involves creativity, like journalism. The real power of programming is not to make tasks we already do easier, but to allow us to do things we'd never bother to try without the help of computers.
This was posted the other day: https://en.wikipedia.org/wiki/Guido_van_Robot :-)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Guido van Robot**](https://en.wikipedia.org/wiki/Guido%20van%20Robot): [](#sfw) --- &gt;__Guido van Robot__ (GvR) is an educational tool to help students learn the [Python](https://en.wikipedia.org/wiki/Python_(programming_language\)) programming language, named after the creator of Python, [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum). GvR uses the idea behind [Karel the Robot](https://en.wikipedia.org/wiki/Karel_the_robot), making the learning of Python programming more interesting. Using GvR, a student writes a program that controls a 'robot' that moves through a city consisting of a rectangular grid of streets (left-right) and avenues (up-down). Guido van Robot uses a minimalistic programming language providing just enough syntax to help students learn the concepts of sequencing, conditional branching, looping and procedural abstraction. It permits this learning in an environment that combines opportunities for problem-solving with instant visual feedback. In short, it is an interactive, introductory programming language that focuses on learning the basic concepts of programming, applicable in any high-level language. &gt;==== &gt;[**Image**](https://i.imgur.com/KNGGOdP.png) [^(i)](https://en.wikipedia.org/wiki/File:GvrLogo.png) --- ^Relevant: [^RUR-PLE](https://en.wikipedia.org/wiki/RUR-PLE) ^| [^Karel ^\(programming ^language)](https://en.wikipedia.org/wiki/Karel_\(programming_language\)) ^| [^OpenDisc](https://en.wikipedia.org/wiki/OpenDisc) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+csmmrxm) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+csmmrxm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
Out of curiosity, with your experience, have you seen any clear difference in interest between boys and girls, as far as programming goes? Any patterns that you would say make boys or girls more or less interested?
I know what you mean - when I started programming in QBasic, I was obsessed with the idea of making 'real' programs, by which I meant exes and Windows GUIs. But for people who're not already interested in programming, I don't think 'making an exe' is very exciting. And C++ sounds like a very offputting starting point.
Thanks. I think this is one instance where i prefer C style for loops to Python's loops. For me, this: for (int i = 1; i &lt;= N; i = i*2) is much more elegant than this: [2**n for n in range(math.ceil(math.log(N, 2)))]
Are you going to be the one giving the talk? If there isn't something you're already experienced with and passionate about, maybe you shouldn't be the one to give it. I know how callous that sounds, and I'm always happen for me to grow breadth and depth in our field, but personally, I have no interest in hearing a talk from someone who knows as much about a topic as I would have from 20 minutes googling. I'm not suggesting this would be the case for you, just offering my perspective from having sat through a large number of half-assed talks from people never qualified to give them.
Ah, that's fine though. In my industry if they see you looking and they're interested they may just call you up. It's pretty easy to write a boolean so your search has the relevant people but the issue is that there's thousands on thousands of people to go through. I thought an automated script would be better than wasting hours looking at profiles. 
The first issue is simple: pyKriging normalizes the input vectors to [0,1]. This is to avoid scale issues in the hyper parameter tuning step. When you feed in a constant value, this breaks normalization. Also, by feeding in unnecessary dimensions, you're increasing the complexity of the hyper parameter optimization step. Each dimension adds two extra degrees of freedom. The second issue is strange. It works out-of-the-box on my machine. Try the following code: import numpy as np import pyKriging from pyKriging import kriging X = np.array([[1.15970000e+04,1.56430627e-01,2.50000000e+06],[1.87970000e+04,1.02084413e-01,2.60000000e+06],[1.55970000e+04,1.07780507e-01,2.20000000e+06],[1.95970000e+04,1.05251365e-01,2.40000000e+06],[1.75970000e+04,1.04925275e-01,2.80000000e+06],[2.85970000e+04,1.05063754e-01,2.90000000e+06],[1.25970000e+04,1.05082059e-01,2.70000000e+06]]) y = np.array( [ 71227.10077037, 62883.34655711, 63694.55236393, 63332.6401766, 63286.1785335, 63305.90355137, 63308.51149871 ] ) k = kriging(X,y) k.train() print k.predict(X[0]), y[0] On my Macbook Pro, this script runs in under three seconds. If this doesn't work on your machine, pull down the development version from github and try that.
I agree, the comprehension has too much syntactic overhead in pure python. I don't think the C style loop is great though. Assuming you have the right libraries, Python does a much better job of conveying intent: for i in 2**[1,2,3,4]: Makes it very clear that you are operating on a list of powers of two, whereas for (i = 1; i&lt;=N; i*=2) Is pretty opaque at first glance. It also has different implications depending on whether N is a power of two or not, especially in a nested loop. To make it even more confusing, there is no way to identify whether N is a power of two or not without searching through the rest of the code.
This is the real answer. But you missed the part where you shame them for not using FOSS
you wanna make a cake you learn how to bake, you dont learn how to put on garnish and strawberries. thats just my 2 cents tho
It's sales. I'm interested, I just have 24 hours in the day and about a million prospective clients...
A generator might be more intuitive than limiting iteration using logs: from itertools import count def powers_of_2(limit): for i in count(0): n = 2**i if n &gt;= limit: break yield n sum = 0 for i in powers_of_2(N): for j in powers_of_2(N): for k in range(1, j): sum += 1
I definitely would show them some x86 assembly (AT&amp;T syntax, of course)
I'll just leave this here: http://www.imagemagick.org/Usage/crop/#crop
As someone who used this distribution frequently on machines that I do not have install permissions on, I am going to miss it terriably. 
2.15 Gb is not really an "enormous" file tbh... what is stopping you from reading the whole thing in memory? If your current library fails, have you tried to use [Pillow](http://pillow.readthedocs.org/) instead? Granted, I may miss something here because I'm not familiar with the term "tiff stack". Or maybe try not to use Python for this job but manipulate your image with the tools from the imagemagick/graphicsmagick toolkit or similar...?
just a heads up - this type of question is better suited to /r/learnpython glad you worked out the answer
Definitely automation. And maybe pranks. The easiest way to get someone interested is to show them how they could get the computer to do tedious work for them. Maybe start by writing a `curl` script to spam vote an online poll. Or a Twitterbot that responds to tweets about something they're interested. Or maybe a Redditbot that scans for mentions of something they're interested and then emails them any time it finds one...
[WinPython](https://winpython.github.io/#portable) claims the same ability. I haven't tried it, though.
Has anyone learned through video tutorials? I have learned most of the basics from this guy https://www.thenewboston.com/videos.php?cat=98&amp;video=20113 but I feel like I (obviously) haven't learned enough. His last 7 videos are very specific and I didn't think I need to learn them just yet so I'm just pretty much "stuck" at dictionaries. I wanna learn more but I think I retain more information if I use video tutorials, does anyone know of any good ones? I'll move onto books when I feel like I can master the syntax, if that makes sense :P
Yeah, I was remembering doing this back on an old green-screen AppleII I think it was. Along with Oregon Trail haha.
The most pythonic way to rewrite this code would be to work out what is actually being calculated and why. Without any context I can't tell you why the java code is doing what it's doing, but I can tell you that it has a closed form expression: l = int(math.log2(N) + 1) SUM = l*(2**l - 1) If you'd prefer to maintain the explicit link with the powers of two: from itertools import count, takewhile powers_of_2 = (2**n for n in count()) powers_under_N = list(takewhile(lambda n: n &lt;= N, powers_of_2)) SUM = sum(powers_under_N) * len(powers_under_N) 
I'm still a rank n00b when it comes to Python, and I've just spent like half an hour goofing around with it. Thank you for this waste of productive time (just don't tell my employer) 
I just got Anaconda up and running on a machine that I do not have install permissions on. It also has easy_install available, which is nice for everything that is not included. 
In the case of the interface changing, there's always `mock.create_autospec` which will allow you to only make claims against valid members of the class. from my_lib.interfaces import Writeable MockedWriteable = mock.create_autospec(Writeable) It's not a *perfect* imitation of the class (unbound methods and staticmethods are hard, yo), but it's suitable enough for 99% of testing. But it's the best of both worlds: You get the whole interface mocked, but you didn't have to implement it. You can use this mocked interface for spying, stubbing, whatever. Autospecs are supposed to be lightweight and fast (I've not used them much), so you create one in each test and not worry about having to reset it between them. But yes, a change in the interface should reflect a change in the tests (or a breakage).
I show them selenium I think people like the idea of controlling the browser, since its an immediate reward
Is there any way to restart a function other than calling it again?
Thank you -- I'll check it out.
Who crapped in your cornflakes? It's obviously an amateur coder, so give them a break. The part about PEP 8 was nice, but: "Worst piece of code I've ever seen.", "So amateurish", "written by a five-year old", ""your "friend""" None of these help anyone. 
Something like this (assuming one host per line): with open('blah.txt') as infile: for host in infile: dev = Device(host=host.strip(), ...) # returned lines include the trailing newline - strip() removes that. ... 
If you are the only one that is going to work on ths application and maintain it, you should go with yout best tech. But that is rarely the case. If other developers don't know neither PHP nor Python (or know Python), then Python will probably be a better choice due to lack of the dealbreakers you mentioned. When it comes to MySQL (if you really want to go with it), there are options for that. You can use SQLAlchemy and Flask-SQLAlchemy. But again, if you're starting new project, maybe it's a good moment to start learning another RDBMS tool. It all depends on what is the exact usage pattern of your application - there are cases where PostgreSQL will be better, and cases where MySQL (or rather its replacements) should be used for better results (or maybe whole other technology, not necessarilly SQL).
With the amount of time the servers spend choking it's hard to take the "Scaling up" lesson without a pinch of salt.
Thanks for the input. Not planning on a huge volume, but just in principle I'd prefer the DB to be available for other *more important* stuff. Might need to look into caching solutions if going native. Third-party hosting is easy to plop-in and maintain, but they are somewhat creepy (following the users around and analysing their comments and browsing patterns).
Thank you for the link!
I'm not saying the pre-test doesn't happen, but to suggest it's done at most schools is total rubbish. I just surveyed 25 programmers in my office during lunch, from 19 different mid to top level schools and only 3 reported such a pre screening test. These kind of things are sad because it's tests like this that scare people away prematurely. I strongly recommend checking out the pycon keynote from Jacob Kaplan Moss called the [Talent Myth Keeps People Out of Tech] (http://m.youtube.com/watch?v=hIJdFxYlEKE) Edit: spelling 
AFAIK reddit doesn't really scale up, they scale out. 
😀 cool, looking forward to the next blog post trying to open a 4gb+ data set. This was a great quick refresher to pandas for me, hadn't messed with it since so many projects ago.
That makes me question the meaning of the word "standard", along with programming, life, and reality, in general.
You say you're going to do it before making a phone call. It takes 10 seconds to visit a LinkedIn page. Aren't your phone calls generally a lot more than 10 seconds? You're trying to optimize the part of your workflow that doesn't need optimizing. This is like trying to make a 15-mile commute go faster by moving your coffee machine 10 feet closer to your front door.
Why is it that in the query below: london_data = data[data['Police_Force'] == 1 &amp; (data.Day_of_Week == 1)] The query for Police_Force field looks like: data['Police_Force'] == 1 But the query for Day_of_Week field looks like data.Day_of_Week == 1
Can't you treat the column as a string, do a find and replace to change all o's to 0's and then convert the column to a float?
Just starting to learn Pandas but wouldn't this work? http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.replace.html
Interesting conclusions, thank you for taking the time to share them!
Gensim is very specifically created to be Pythonic, and works on streaming data very well. Can handle large data sets nicely. It's also updated and supported really well.
Memory (RAM) is like table space. It's a place for you to put things you're working on or need access to quickly while working on something - when you're done, you're supposed to shred (delete) it or store it in a filing cabinet or book shelf (hard drive). [1] Processes are like several people all using the table space simultaneously.[2] Somebody (the operating system) governs who can use what space on the tables each person can use in real time. Usually, you as a process ask for table space, and put stuff down on it as you're working. Let's say you put down some research books for a paper you're writing. Now you realise that one of the books is totally irrelevant, so you take it off the table, put it back on the shelf, and take our another book. What you just did is reused space you already had assigned to you, but no longer needed for that first book, to put down another book. You realise you can take on another angle for your paper, so you ask for more space. The governor gives you another table three tables away (because other people were assigned space near you meanwhile). You put down some other books. Suppose you realise that angle gets you nowhere. So you put away all the books, go to the governor and tell him you don't need the table anymore. He marks it as available, and assigns it to someone else who needs space later. You're being a good user of this table space by only using what you need and letting others use space when you're done with it. What if you just left the books there? Even though you will never use those books again and even removed any reference to them in your notes entirely? Nobody else can use that space, and nobody knows whether you might legitimately be using it or need it later (maybe you keep some swap space when you very quickly need to throw things in there once in a while). But you keep doing this - everything you find a big new angle, you get more table space, and then when you realise it's crap, you just leave everything there and forget about it. Now nobody else can use that space, and the governor is running out of space to give people. And that's a memory leak. In programs, the programmer forgetting to release memory that was previously assigned before just forgetting about it (not having any variables or pointers pointing to that memory) causes memory leaks. Various programming methodologies try to reduce the likelihood of this happening by ensuring that the places where memory allocation and freeing are more obvious or more structured (RAII for instance), or by adding extra code to every pointer to check whether the memory is still held by some pointer/variable (many can map to one piece of memory). Of course, the latter can "leak" if memory is pointed to but never used again by the application. [1] With a filing cabinet and table, you move a copy of your document around. With computers, you make a copy - the data on the hard drive is copied to memory but still exists on the drive. Saving from memory to drive implies overwriting (erasing the old copy and storing the new one). [2] This analogy only works with memory. If you introduce the idea of a processor, it breaks down (many people can think different things simultaneously, but a computer only has one or a few processors to do calculations but can have many processes going on at once). 
elaborate?
It would be impossible to reach out to thousands of people a day BUT if they're interested they'll be more prone to speak, if they're not they'll say no quicker, and if they're very interested they may message me first (which, in sales, is the ideal prospect). For example, another use of this could be automating views to okc pages. I personally don't consider it spam because it's not messaging them and it's not that I'm uninterested in them, it's just unrealistic to think you have time to consider every possible option. This would allow others to know that you're interested, plain and simple. 
&gt; Without any context I can't tell you why the java code is doing what it's doing It was a quiz question in an algorithms course I am taking. I was asked to evaluate the running time of the nested loop in terms of N. It is purely for educational purposes. I saw it and realized that I didn't know how to implement it in Python.
I think we need to see the python code that creates the zip file. The zipinfo output lists the size of the archive when uncompressed. Your java zip is ~14k bytes uncompressed, but the python archive is only 183. This seems to indicate that the python version isn't actually zipping what you think it is. Can you unzip the file on your local machine with just the unzip command? If not, is there a meaningful error? 
Sometimes you are writing snippets of code and you want to see if it runs or works or does as you expect. You need to prototype these things. My advisor often says to "fail fast". So, the sooner you can tell if your code is junk, the better. This is the whole idea behind lots of tests, but it's also good to do while writing the code itself. The last thing you want to do, though, is to wait until the whole product is complete to find out that your code is broken. So, prototyping is basically making something that works as fast as possible. "Get it working first, optimize later". 
There are 5 good tutorial projects at newcoder.io that go beyond what code acadamy does. The GUI one is probably the most applicable to your goal.
Oooh, overloading the 'bitwise or' to be a pipe operator. Nice! Hey, people complain about reinventing the wheel, but sometimes its good to do it anyway as a learning exercise. Thinking of joining their project?
http://www.codecademy.com/ has a nice introduction, and it's what I'd really recommend as a quick way to start. The important thing to understand is that at the moment Python comes in two flavours, 2.7 and 3.2. People are slowly moving over to 3.2, but most things are still in 2.7. To run Python on your own computer you will need the interpreter from https://www.python.org/downloads/. Depending on which version you choose to start with (I'd suggest 2.7) you'll need the correct installer. Learn Python the Hard way is a good online introduction to Python 2.7 http://learnpythonthehardway.org/book/ex0.html When you're happy with the basic syntax I'd also recommend having a go at the Python Challenge (http://www.pythonchallenge.com/), which can be quite a fun way to exercise your new Python muscles (although be warned that some of their suggested solutions can use slightly older and outdated modules. **Edit:** This really belongs in /r/learnpython
Thank you for the response.
Thanks :D
The interpreter comes with Python's standard IDE, IDLE, but I'd recommend using a good text editor (try Sublime) and the terminal. You can also try iPython (http://ipython.org/) which comes with a web or terminal based notebook to use, although it's mostly suited to more scientific uses of Python if you were planning to use it to write games.
That is seriously cool. I run a MacPro in my office, and now I don't have to worry about how to sync my notebooks between laptop and desktop. Thanks!
I do this : df.replace(to_replace = 'o', value = 0, inplace = True)
&gt;Or one click BSOD on windows boxes? The hard part isn't discovering those so much as figuring out how to avoid them.
well I thought this is rather important info that OP should have mentioned ...somewhere
They mostly do different tasks. Gensim is more of the latest computational efforts in NLP while NLTK is a suite of standard methods and datasets. What kind of language processing are you going to be doing? Also look into TextBlob. For part of speech tagging and some other things, it's my go to. But you're right. Someone really should do a comparison of all of these. They all have different tasks they do, sometimes they overlap, and it'd be interesting to see who did better where. 
this course is the unique reason now i can build webpages. I recommend it to anyone remotely interested on the internet. It opens your mind to how the internet works.
well I dont think it's important at all. A course called "web development" is clearly for a specific audience that likely doesn't know anything about web development and likely not enough to know what web framework they should use. 
I dunno, man. I don't even know what "IT" is anymore. But it sounds like programming just isn't for you. Which is true for like 90% of the people in CS programs freshman year of college, so at least you didn't blow a bunch of 30K/yr tuition on it. I still stand by my statement that you should find someone to tutor you in person. Figure out what you *are* good at and do that. Usually that's what people are doing in their 20s, but it's never too late to start. I didn't figure out I was good at entrepreneurial stuff until my 30s. Good luck.
Does it use 1 minute long videos like every other udacity course? If so I'd rather pee out fire ants.
Non sense! You can judge a person and do so in a way that can Shepard their abilities or offer alternatives paths. This concept of a judgement free world is counter productive to creating a greater economic good. Ultimately you end up with people in positions they can't handle.
bullshit. If you're going to be a programmer, you're going to come across it. And the concepts are simple enough to teach. Within 15 minutes, you can be doing queries. Then just build upon that concept.
Processing also has a Python mode! And for those of us who don't want Java doing things in the background, there is a module called pyprocessing that provides the basics of Processing for Python, but it's not seemingly actively maintained. 
It's probably that new lossy zip algorithm. It's great for turning Neal Stephenson books into *crazy* page turners.
That's pretty cool. What's the latency like for something like this? Like, how quickly can you flicker the LED on and off off with a loop, and what does the CPU usage go to on the Pi?
&lt;Python directory&gt;\lib\turtle.py
Maybe because building blog include CRUD tutorial and simple join if using orm or raw sql.
If you want to run some command/scripts in several server at once you may try [fabric](https://github.com/fabric/fabric). At this time the official one still isn't support python 3 (it is in the roadmap) [Pashinin's fork](https://github.com/pashinin/fabric) support the python 3 [with some test disabled](https://github.com/fabric/fabric/issues/1050).
Morepath seems to have some interesting ideas in how types fit into all of this, I'd love to hear more about that! Nice article, and I can't wait for the next :)
You'll probably get better answers to your question on [/r/atom](https://www.reddit.com/r/atom).
You have a video which you want to make into a series of frames ? If that is what you want to do, use ffmpeg directly or a python binding. I recommend ffmpeg directly and dump a bunch of frames. http://zulko.github.io/blog/2013/09/27/read-and-write-video-frames-in-python-using-ffmpeg/ Then once you got the frames use Pillows to load it, or if the frames are already decompressed load them directly into python memory with numpy which is almost as fast as a C array. Scipy etc has a whole bunch of things you can use to manipulate images.
Hi! There is python inject: https://github.com/ivankorobkov/python-inject It does DI in Python way.
While you go about trying to get your school into the database, you can always download the community IDE.
It sets the date to 4AM on today or previous day if current time is earlier than 4AM, so basically latest 4AM time that hasn't yet happened.
tkinter is all I have ever used.
Kivy is my favorite. I have heard good things about QT.
If someone would have showed me how he is doing millions of calculations per second instead of writing a html website i think i would have started in programming alot earlier. programming is literally like having super powers. would probably show them like &gt;for x in range(1000000): print x any sort of printed loop still gets my heart racing a little bit faster.
GTK but im about to go to Qt.
Qt all the way. Extremely flexible, good API, looks native on almost any system out there. Qt Quick is insanely good, too, if you learn how to use it the right way. 
This course was a turning point of my career. As a fresher I was confused with where to start learning web development and this course was a absolute gem. Important thing about this course is it teaches the basics of web development not any particular framework.
Yep. Although we can do better by making use of the built-in `sum` (and not hiding it with our own variable :) ) and by observing that the innermost loop is rather silly: s = sum(j for i in powers_of_2(N) for j in powers_of_2(N)) Note that OP's code non-standardly uses `&lt;=` comparisons for the loop bounds, so you actually got the innermost `range` wrong ;) Or we could do more sophisticated mathematical tricks, knowing the formula for the sum of a series - but I don't think they really make the code any simpler in this case.
I tried tkinter, wxPython and PyQt, and in my experience PyQt is the best by far. Complete, well-documented, intuitive API (after you've gained a little experience).
Unless you want to use Python 3.
You can't `pip install` it, though. In fact, if I recall correctly, deployment is a major pain.
Deployment is just pretty easy with something like cx_Freeze.
I'm honestly not sure. I didn't really have to learn PyQt as I had experience with C++/Qt at that point. 
I made that wrapper, like you said it should be good for quick prototyping, and you don't have much to lose since you can always use the raw TkInter methods if need be (the bits and bobs inherent from the tkinter classes). I wouldn't recommend it for anything too complex at the moment though, also I only uploaded it a few days ago so you know, teething problems... 
Don't use tk other than for very small projects. I used tk for a project, but when it was too late I realized the concept of child windows doesn't work like intended. The user is able to close child windows and removing the close-window-widget doesn't work or at least, the widget becomes none functional, but stays. Next time I will go for Qt. Btw I you are using threading you have to push changes into the GUI via closures. 
The maintenance of PySide hasn't the best reputation ... The last update is from april 2014. 
fair enough, but I don't really require any features of Qt5/any new features being released for Qt so it's not an issue for me
I've found that Kivy supports versions &lt;= 3.3 ~ although 3.x is in the works. I wanted to get to use Kivy, but didn't really want to downgrade :P
Kivy looks pretty nice. I have to check Kivy
http://zetcode.com/gui/pyqt4/
Then try [PyOtherSide](https://github.com/thp/pyotherside)
I believe you could use Anaconda for the Python installation to your USB stick, and PyCharm installation to your USB as well. PyCharm portable installation may need you to [tweak a setting](https://www.jetbrains.com/pycharm/quickstart/configuring_interpreter.html) or two, also [here is some information](http://docs.continuum.io/anaconda/install.html) on Anaconda installation
http://xubuntu.org/ ;)
QT or Kivy depending on target platforms (Kivy works on Android).
DOC and IC are common in Python however there are not many specific frameworks for it, as the language can do it naturally (what is a DI system but a custom interpreter?). Where it is used it is not generally advertised as such: Django for example uses IOC in its design. If you do write a framework for it, I would be very interested to see the results.
PyGObject feels most pythonic to me, and looks beautiful on linux. However it is not cross platform.
said people who have never written certain classes of apps
yaay, high five!
i don't understand what you mean exactly but you can override the close event with your own function so the user can't close a tk window unless via the way you want? http://stackoverflow.com/questions/3295270/overriding-tkinter-x-button-control-the-button-that-close-the-window 
Python versions &lt;= 3.3? I thought 3.4 (and probably 3.5) should work fine, what problem do you have?
I used web2py for a maintenance management app. It works. The necessary knowledge is huge: HTML, CSS, wsgi on Apache, configuration of SSL, routing of requests, ..... I have forgotten most of it. While web2py is quite nice for a start, changing some designs of the interface isn't easy and a huge job. 
There's plenty of straight out bugs or half-implemented features that made us redesign our solution :/
I found this [Kivy Crash Course] (http://www.youtube.com/playlist?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq) youtube series to be a great intro to kivy. I started looking into it when I found that the library was available in the qpython app on Android. 
Could you provide some insight as to how you found the closed form? I saw this yesterday and knew there should be a closed form but couldn't put the pieces together...
Honestly, nowadays if I want to do GUI, I just do a web frontend with a Python server in the back. And as a bonus, pop that shit on a publicly-accessible computer and it's accessible to anyone from anywhere you want to have it. Weightlifting tracker? AngularJS + Bootstrap + CherryPy + Peewee RSS reader? AngularJS + Bootstrap + CherryPy + Peewee etc.
I'm working on a project very much in this vein (at least as far as the first part goes, themes is another story), but it isn't nearly ready for primetime yet, I'm sorry to report: https://github.com/syegulalp/MeTal
I highly recommend Mezannine: http://mezzanine.jupo.org/ 
Before purchasing anything, I suggest a number of free resources: 1. [First Steps With Python](https://realpython.com/learn/python-first-steps/) 1. [Python Codeacademy](http://www.codecademy.com/en/tracks/python) 1. [The Python Tutorial](https://docs.python.org/3.5/tutorial/index.html) Then when you are ready to try something more advanced, check out the [Real Python courses](http://www.realpython.com/courses), to learn the syntax and web development through real-world examples. Good luck! 
What *do* you want to learn? Do you have some project you're attempting?
Didn't they get Windows support working recently, or am I mistaken?
Depending on what you want to create would probably justify which gui to use. In most cases Tkinter is more than enough for a really good simple application. If you want to get really fancy look at Qt 
The Phoenix project version works on 3.
Very sad.... I think I will still use it.
It works cleanly and well for quick and dirty dev programs, but there are certain controls which look bad and you can't do a damn thing about it (it the search ctrl when resized small). Listview doesn't allow custom drawn, and even if you use ultimate list ctrl it's still quite limited of you want a professional looking interface.
 **Rapid GUI Programming with Python and Qt (Prentice Hall Open Source So...** |||| --:|:--|:-- Current|$48.89|Amazon (New) High|$53.96|Amazon (New) Low|$42.46|Amazon (New) ||$48.89|(30 Day Average) [Price History Chart and Sales Rank](http://i.imgur.com/HKVC94n.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
Yes. It's a long story, it does work and it is available (I'm running some of my internal tools on Windows now). But the steps to bundle a python application on windows / mac are not yet clear nor easy. Until then I say 'it is not cross platform'. There will be positive and significant news on this front soon-ish.
I really liked Glade, but I had a hard time finding documentation on working with Glade files and using PyGTK. Eventually I found the answers I was looking for and suddenly creating a template file in the toolkit and then working with it in Python became pretty simple for the most part... but I still think PyQt with the QtCreator is more intuitive and easier to find documentation on. Not to mention Glade Toolkit was pretty buggy/glitchy.
This look to be Linux only ?
sure will, thanks!
It's just that you have to look at Quick in a different way. With QtWidgets, your UI is very tightly linked to your code, and your code defines the way your UI behaves. With QtQuick, the UI is declarative (QML), and the way you interact with it is by giving it access to specific objects on your "backend". So you have a very clear separation between presentation (QML), presentation logic (JavaScript inside QML) and backend logic (Python).
The heading says "How to Build a Blog," which sounds like an interesting application for a web dev course. Are there any links to example blogs that have been build during this course? 
Yeah it is a little buggy. But great if youre looking for something to build just a quick gui.
Based on your name - and nothing else CEGui - CrazyEddiesGUI! Probably not your best option, I'd go for Kivy or (py)QT(side) depending on exact needs
I remember the first time I ran a prime checking loop :) 
This would only be unique once per day, as /u/uto said it basically returns the epoch time in seconds for exactly 4am today (or yesterday). It's a good lesson in what not to do in a lot of ways. Most notably, what the hell does "crt" signify? Maybe "CRon Time?" The others aren't any better, "mod", "scm","dty","_usn","ls"... The developer really could have done a better job making his names descriptive.
SDL is used in all Source games (DoTA 2) and all Source 2 games (currently only Reborn)
What did you go with instead?
And there is truth to that because it was intuitive enough initially to make me want to learn how to work with it better. I managed to build a simple Farkle game with it, so I managed to make some use of it. These days, I could probably recycle my old code and put a Qt interface on it that looks better and works cross-platform with about as much effort as using PyGTK+Glade. QtCreator with pyuic to convert the .ui files (to offer a backbone/template interface) to .py with PyQt code generated. It's kind of hard not to be a little smitten over that type of simplicity, especially when Glade has crashed time and time again just working on a relatively basic interface.
/r/punchablefaces
Thanks, this is a pretty helpful distinction. For the purposes of this exercise I'm mainly interested in seeing if I can produce, from the text of some novels, a JSON dataset that can be consumed by a D3 visualization in order to show/examine relationships between the vocabulary used in the different texts. From doing a little more research, it seems like NLTK has more tools (like you said) that would allow me to do standard language processing in a straightforward way, but perhaps Gensim will make it easier to do LDA topic modeling, which would produce the most interesting information for this project. In which case I think I'm going to focus on getting up and running with Gensim for now and then probably double back and work with NLTK when I am ready to take on a broader set of NLP/ML tasks. Does this make sense? It also seems like they could be useful in tandem, i.e. using NLTK to preprocess the corpus before running it through Gensim.
I wrote something like `pyuic` for Glade. It's the same idea. Give it glade file and it will generate the python skeleton code. I used introspection to automatically insert stubs for event handlers (with proper arguments) that are set in glade. It kinda imposes a certain coding style I guess, but anyway it's called [Glader](https://github.com/welbornprod/glader).
That's my long-term goal -- create something as easy to set up as WP. That by itself is a big part of why it's taking so long! Good luck on your project as well, BTW. I considered Flask, but I went with Bottle for the sake of making things even more compact and minimizing dependencies.
This is beautiful. I am going to download it and give it a go in the near future.
Cool, let me know if you run into problems. I've used it for several little projects (including Glader itself, wrap your head around that), but it hasn't been used by very many people.
I started this library as part of the bot (check the bot's code https://github.com/szastupov/whatisbot/blob/master/main.py) @WhatisBot but realised that it might be useful for others. The API isn't stable so it's not on PyPI yet.
I use TkInter. It doesn't look particularly pretty (themed widgets aren't a magic bullet either). But I use Python for teaching, and it's definitely the easiest GUI environment to set up on a new machine, since it's distributed as part of the standard library. It also doesn't force you to write OO code (although a lot of examples go that route), which I like because I don't want students to think GUIs and OO are inseparable.
Had a script that was continually changed everyday and wanted others to be able to use it with no script writing knowledge. Created an app based on the script and used wxPython. Took a little while to understand but once that was accomplished it wasn't too hard to write. If I had to do it again I probably would use/learn QT since it is the popular choice.
Honestly? I looked up the basic sequence in [OEIS](http://oeis.org/search?q=1%2C+6%2C+21%2C+60%2C+155&amp;sort=&amp;language=english&amp;go=Search) and then worked out how to manipulate the input to match.
But you can ```conda install``` it
Qt works on Android too ;)
At this time, I have written four additional extension packages. With the exception of django-ripozo, every package (or at least some prior version of it) is currently in use at Vertical Knowledge. * [django-ripozo](https://github.com/vertical-knowledge/django-ripozo) Integrates ripozo with Django. * [flask-ripozo](https://github.com/vertical-knowledge/flask-ripozo) Integrates ripozo with Flask * [ripozo-sqlalchemy](https://github.com/vertical-knowledge/ripozo-sqlalchemy) Integrates ripozo with sqlalchemy. Also includes a [one line resource creator](https://github.com/vertical-knowledge/ripozo-sqlalchemy/blob/master/README.rst#easy-resources) which I personally love. * [ripozo-cassandra](https://github.com/vertical-knowledge/ripozo-cassandra) Integrates ripozo with the python cassandra-driver (Not 100% tested yet) EDIT: It supports python 2.6, 2.7, 3.3, 3.4 and pypy 
Sentdex or Derek Banas on YouTube. I'd also recommend Udacity's free courses.
Are you aware of any GUI widget libraries that are built on top of SDL?
You should check out the codenewbie.org slack channel for Python Thursday. They are working on a text based adventure game from scratch and have a google hangout on Thursday night to talk about the progress. 
Jake VanderPlas comes to mind. I've seen a few of his talks on youtube, and he seems to have a good presence. http://www.astro.washington.edu/users/vanderplas/ Another dynamic speaker would be Fernando Pèrez, of iPython fame. Maybe a less physics-based talk, but an exciting one nonetheless. http://fperez.org/ EDIT: Also Thomas Kluyver is pretty hardcore.
I never knew about this! I've been using pyqt5 this whole time, and a QML plugin exists to call Python. I mean thats how I want it to work - QML application that just uses Python for logic.
&gt; Any pointers on where to learn that from? All I could find so far were simple introductory tutorials, but nothing practical/in-depth. http://qmlbook.github.io/
and non-pip-able bins like Qt Edit: And management of multiple virtualenvs on one machine. That's super useful if you are working on two projects that have contradictory dependencies. 
I have installed kivy today, got some learning to do. Any links to tutorials (not video) will be appreciated.
Makes sense, hopefully there's an easier way to cross-compile. If not, I can always buy a copy of OSX and put it in VirtualBox or VMWare Player.
As someone who programs in Qt all day long, Qt isn't "insanely good", at best it's just the least bad option. :p
I really like Qt, but I am constantly annoyed/worried by the Python implementation. PySide essentially died (this is a potential licensing problem for some given how PyQt is licensed, though this doesn't affect me for the projects I work on). Qt5 is barely used within the Python community (although my understanding is PyQt5 is comparable in terms of quality and completeness to other language bindings). Lots of third (?) party Python libraries that use Qt rely *specifically* on PyQt4, which is a problem for forwards compatibility. PyQt4/5 is not as straightforward to install since you can't use `pip` (yeah, you can use `conda`, but that's less standard). I really *want* to like Qt under Python. But with all the complications, I find myself lately more often than not writing web-based frontends instead.
From a quick google search - it doesn't appear there is. However, I'd suggest that's actually a good thing. If you don't have access to a Mac and you use a tool to build a mac App on windows, then you have no direct way of testing to see that it worked correctly and you'd be reliant on someone else to test basic functionality and send you any error messages Using virtual machines should work for you, I think, albeit a bit slower than normal - but that shouldn't be an issue
This is the script created/used by PyCharm - http://ideone.com/nbVkBG You can modify the RUN_PATH and CONFIG_PATH variables to suit your setup. I have done this many times (I constant switch between Pro and EAP versions). You can modify the script and use it for all the Jetbrains products AFAIK. But I personally have tried that. 
Contact the owner? http://whois.icann.org/en/lookup?name=pypi-ranking.info
I've been saying this was a problem (and promoting `surrogateescape`) for a *long* time.
Jessica McKellar is pretty rad. https://vimeo.com/71763919 You could try reaching out to folks on Twitter.
Primarily I intended it for quickly building [HATEOAS](https://spring.io/understanding/HATEOAS) web API's. For example, if I had an API that exposed users and posts, it could provided full urls connecting the user to each of their posts. With other REST frameworks, hitting the endpoint will just return a basic JSON object that partially implements REST (i.e. The api is not self-describing). In ripozo, you can easily return protocols like [SIREN](https://github.com/kevinswiber/siren) or [Hal](http://stateless.co/hal_specification.html) where other frameworks would suffer. This means that the client doesn't have to know how to construct urls or, with some protocols such as SIREN, it can discover what actions are available on a resource simply by making a request to the an initial endpoint. Additionally, I wasn't a huge fan of the REST frameworks for flask. I love django-rest-framework, but unfortunately that's Django specific (we use Flask at work). I wanted something that gave me the ease and flexibility of DRF while not being tied to either Django or its ORM (although ripozo does have a Django integration).
While we're at it, does anybody know of a PyBoard-compatible touchscreen? I have a project that I'd like to realise using Python and a touchscreen, but right now the RPi appears to be the board I should be getting - would definitely prefer the PyBoard, though. 
You know I underestimated the task. Apparently the most appealing to an 11 year old is something called wix.com where you have to pay to use your own domain. I couldn't find an open source alternative to match that. Disclaimer: Not a plug for this service! 
I didn't know about peewee. That's fantastic.
Is this yours? What's the word error rate? How does it compare to google's ASR?
are you familiar with [enaml](https://github.com/nucleic/enaml)?
Derek Banas is a shotgun tutorial. Meaning, he gives you a quick "learn Python in 30 minutes" sort of thing. 
I just have a single place that does bytes&lt;-&gt;text encodings, that ensures it always passes `surrogateescape`.
http://pynsist.readthedocs.org/en/latest/examples.html
http://pynsist.readthedocs.org/en/latest/examples.html
That is not what I am talking about. You don't understand the depth of the problem. But thanks anyway I guess. https://github.com/takluyver/pynsist/blob/master/examples/pygi_mpl_numpy/1_download.sh is the problem 
Real time graphs are a cinch on the web these days. Loss of people love d3 but personally I'm used to Flot. I'd post some links but I'm on my phone at the moment...
Oops, looks like you can sign up here https://codenewbie.typeform.com/to/uwsWlZ
I'm trying to get as close as I can to something where you just unpack the files in a folder and run a script to do the install. (It's meant to run on low-resource shared hosting as well.) The less instructions people need to read, the better. Ideally, I would love to have an actual installer app -- you give it your SFTP info, and it uploads, unpacks, and sets up everything for you. That would probably be a post-1.0 thing, though.
I found this repository to be super useful in helping me get started. It's a clone of the examples bundled with the Arduino. Makes for a nice reference. https://github.com/mithru/MicroPython-Examples
Well, sorta: https://micropython.org/store/#/products/LCD32MKv1_0
For shitty web startups maybe
Another option that wasn't mentioned in this article is the `errors='replace'` option. If you know what the likely encoding is, and you don't mind losing some bits of information when things aren't encoded correctly, 'replace' will turn any bytes it doesn't recognise into the Unicode 'replacement character': �. If you're more concerned about not losing data, but willing to give up some control over exactly what is going on, there are packages that will do some guesswork about encodings: * [chardet](https://pypi.python.org/pypi/chardet) looks at binary data and tries to guess what encoding it is in. * [ftfy](https://github.com/LuminosoInsight/python-ftfy) goes one step further - it takes text that may already have been corrupted by using incorrect encodings, and tries to fix it back to what was meant. It also does a bunch of other cleaning, though you can turn off operations you don't want.
if you type `pip install bitcoin` or `pip install mypackage` it should work assuming it can find it. I just tested bitcoin on windows. It should work. It's also generally a good idea to also add a `requirements.txt` file that lists the requirements (one per line) in addition to setting the info in your `setup.py` file.
isn't the whole point of virtualenvs that you can have multiple ones with contradictory dependencies? what does conda add?
Cool. Thanks. 
Well obviously I know how to use `pip install ...` I'm asking how I can make pip automatically install these dependencies during the install process of my package
/r/learnpython is the proper subreddit for Python questions.
Don't use the bin dir, use: ``` setup( # other arguments here... entry_points={ 'console_scripts': [ 'bitcoin3d = my_package.some_module:main_func',], } ) ``` Instead
Well the phone number validator looks nice.
Why can't I return those formats without this framework/lib added to my code? I'm having trouble understanding exactly what function or use case this lib provides. If I want to return more information I can just append it to my dictionary and encode it as a json/xml/protobuf/yaml/ etc right? I'm not saying this is not useful, I'm just trying to better understand it's usefulness. 
Thanks, I will definitely check that out
&gt; popular and powerful data science languages. &gt; &gt; You'll want to use pandas, scikit-learn, numpy, matplotlib, pymc and maybe seaborn. &gt; &gt; They all have pretty good documentation and come in the anaconda python distribution (which i would highly s Yup!
Pdfkit is handy when something absolutely needs to be PDF because your client is slightly nuts
Umm... If you want to be that way, any python library can be one line.
Yeah, it's more "one line of python supported by a few thousand other lines of python."
I most dislike the fact the import is in the same line. It's ugly.
All right I've been meaning to check out ipython for a bit, but you've inspired me. Can't hang with the shell IDLE any more. 
These is something like pyqtdeploy out there, but I didn't try it out yet. Yes, it's probably a little more complicated.
Why would you ever use whitenoise?
admittedly, it has been some time since i've last looked into qt (that would have been early qt3...). has qt lost weight since then?
It can be a bit of a faff, but the following have all worked for me - - On MacOS X the best approach is via [Homebrew](http://brew.sh/) then it's just `brew install pyqt5` (or `brew install pyqt` for PyQt4) - On Windows the Riverbank Computing builds of PyQt install fine [PyQt4](http://www.riverbankcomputing.com/software/pyqt/download) or [PyQt5](http://www.riverbankcomputing.com/software/pyqt/download5). There are only official PyQt5 builds for Python 3. But it's available [here](http://blog.abstractfactory.io/pyqt5-1-1-for-python-2-7/) assuming you're on a 64 bit OS. - Linux it's in probably in your distro respositories as `python-pyqt` `python3-pyqt` `python-pyqt5` or `python3-pyqt5` Or you can install the [Anaconda package manager](http://docs.continuum.io/anaconda/index.html) which should work on every platform and allow you to `conda install pyqt` 
And if you are doing it for development, there are better tools in the standard lib: python -m SimpleHTTPServer 8000 
That depends entirely on what the script does and has nothing to do with Python specifically. By the sounds of it, you probably just filled up a lot of browser cache space. Or, something else happened at the same time you were doing this.
Depends. String processing is horribly slow, so the less you can do of that and the more you can use numpy/scipy/pandas, the better. If you can use a binary format to store your data, I/O is sped up by a factor of 100x (which usually doesn't even matter) and if you use numpy properly, you can get 500x speedups. If you use numpy improperly, you can lose a factor of 2 on your speed, which isn't that bad. If you're doing large database work, you're going to be using a library, in which case, it's going to be fast. The less of the serious number-crunching you can do in Python, the better.
Slightly unrelated but how are you deploying your flask apps? JayMickey I see you're using Heroku. IrishLadd how do you do it? Cheers!
Interesting, how is the performance compared to running native code cloud stack? Reliability of raw reads and writes?
IMO [arrow](http://crsmithdev.com/arrow/) is better than Python-dateutil for date parsing
I'll put it this way, I have said before that ipython is my favorite developer tool, ever, for any language. It's simply too good not to use. 
As someone who's used some python but comes from a mainly SAS background the main problem I've faced has been dealing with larger datasets. The tables I work with are regularly too big to read into memory - this is no problem for SAS in most cases because SAS (the data step at least) only reads a single record into memory at a time. I've found that the memory issue is hardly touched upon in many basic tutorials for using python. So be prepared for having to put a bit of work in if you're similar situation. SQLite seems to be one solution: https://plot.ly/ipython-notebooks/big-data-analytics-with-pandas-and-sqlite/ Does anyone have any other good suggestions for this situation?
I know people do it, but I haven't ever tried myself. I think people use pyinstaller. We had some issues recently with this after the move to sdl2 instead of pygame, but I'm not sure if these only affected windows or OSX too. You could ask on the kivy mailing list or irc if you haven't already. If there were problems, someone may know the fix.
Have you taken a look at Miguel Grinberg's blog posts/ mega tutorial?
I think TypeError is appropriate to throw if it's appropriate to throw an exception at all. I don't think `==` *should* throw exceptions, but other comparison operations could (and do in some cases). 
Another reason for my opinion is that in python `in` operator also uses the `eq` operator so overriding the `eq` operator in this way (with exception being raised) will also make it difficult to use and iterate over containers containing such objects mixed with other object types.
I haven't tried my hands-on with synnefo, would like to hear something from the community who have tried it. Also i was not able to find any whitepapers on security, performance etc on the site.
How do avoid the circular imports in flask? I have only seen it done with blueprints. What do you think needs commenting?
are people really that often confronted with data of unexpected encodings, or just too lazy to figure out how to do it right? granted, there *are* cases where ``errors='replace'`` is the right solution, and (even more rarely) where ``surrogateescape`` is the answer, but with most input i've encountered, picking the right encoding (or staying with bytes when i'm expecing glibberish) has been the way to go for me.
No, throwing an exception in `__eq__` is a terrible idea. The normal `__eq__` contract is to return `True` or `False` if the comparison makes sense otherwise return the `NotImplemented` sentinel value. Returning `NotImplemented` lets Python: 1. try the reverse implementation, if `a.__eq__(b)` is not implemented it can try `b.__eq__(a)` in case `type(b)` implements it but `type(a)` does not (that happens regularly for subclasses for instance, or e.g. mappings) 2. fallback on an identity check and return a value which makes sense As an example, consider from __future__ import print_function class A(object): def __eq__(self, other): if isinstance(other, type(self)): return True return NotImplemented class B(object): pass class C(object): def __eq__(self, other): if isinstance(other, (A, C)): return True return NotImplemented print("A = B?", A() == B()) print("B = C?", B() == C()) print("A = C?", A() == C()) This will print `False`, `False` and `True`.
1. importd.D is an internal detail of library and is not documented. 2. Whole point of importd is convenience.
Wow, what a terrible article. Mixes up text editors with IDEs in their descriptions, and actually provides no useful information besides what you can find if you just type "python editor IDE" in Google. 
As other have mentioned Python does have libraries for data manipulation, often with very good support. If you're already familiar with Python, dive right in. But I would also suggest checking out R as a programming language. I personally, prefer R's handling of data frames and matricies. 
Thanks, that really answers my question :)
You might want to look into using application factories and flask.current_app instead of a global Flask app object http://flask.pocoo.org/docs/0.10/patterns/appfactories/
I would like to hear more on this as well because we have some giant datasets. Granted most of the time I will use it is when I can't easily use our database so it would more be datasets that are around or even under the Access 2gig limit. Also, I would like to use it just to learn Python and nothing helps learning like solving real problems. 
The chapter is also available without email signup: https://www.dropbox.com/s/44i0q05c5s8aqfa/Python4Devs-Ch1.pdf?dl=0 Do send me your feedback on upadhyay@gmail.com :-)
I think it's just a ton easier to keep docs on a website -- for you and your client. Then every time you change your API (ideally just for major releases but hey, do what you want) you don't have to keep resending a PDF. And much easier to edit, you can just point to the website and not have to ask "what version of the pdf are you using?"
pdfs are the devil. its one of the most hideously complex data formats out there and is truly difficult to to work with. simpler file formats (html, xml, json, csv, etc.) can be dynamically generated with ease and there are numerous high quality open source python tools for doing that. not the case with PDF. its truly challenging to do anything with because of the complexity of the format and the very limited set of tools available to work with. most of the actually good tools for doing work with PDF are proprietary and very expensive. 
When you are serving your static content from a cdn and you want to be able to simply switch your hosting whenever you want 
fantastic responses, using the pprint. God that's efficient!
I'm currently using it with python 3, the daily snapshots work well enough.
This is what I wanted to emphasise somewhere, after reading this book you will *know* python. It is detailed, but it only includes details I have found relevant in production code. Despite being detailed you will find many thing missing that I have never used. Thanks for layout comments: This is the default pandoc output. I have not gotten to tweak the .tex files it uses as templates. I agree with your unicode_literals comment. This is one of those cases where "practicality beats correctness". The examples are working in python 2.7.9, I am going to review the book to see if they are valid in older versions of python, but most likely I am going to just add a section in introduction that this book covers 2.7.9+. Covering both python 2 and python 3 is hard enough, worrying about older versions of python 2 could be too much for me :-) Regardin python2/python3. On my mac python3 is the actual command I invoke. Also I was contemplating using py2:unicode/py3:str kind of syntax to refer to things. The 2 vs 3 is such a mess, but 3 is so much better. Please send me your further feedback here or at upadhyay@gmail.com. They are very useful and encouraging when writing. Its my first attempt at a full book, and trust me I really appreciate it.
&gt;I was contemplating using py2:unicode/py3:str kind of syntax to refer to things. This is an interesting idea. As an alternative, maybe make use of subscripts, assuming you have that capability (which you do if you're writing TeX, I think)? So have `str_2` and `str_3` to differentiate.
Looks nice. I really want to know how you got your code blocks to look so nice. I've tried doing so in LaTeX before, but I can never get them to look respectable.
It was quite simple. pandoc gets all the credit. Here is my Makefile and snippet from my .md file: https://gist.github.com/amitu/669cecae1edb5587659a.
HTML is suitable for business reports, but for reasons I'm sure you're aware of, is harder to print on paper than PDF (which was, after all, designed as a printable format to begin with). At my own company we produce business reports for our clients (real estate industry, a lot of financial stuff involved) by using the webkit render engine to port HTML to pdf and then send the pdf as an attached file for download or email. Its not a perfect system, but it gives us much more flexibility in report design and layout, and much easier development of new report designs. The price we pay is that page breaks over tables sometimes comes out a little awkward. I think its a worthwhile trade off though. so the problem is with development and tooling. we do use pdfs and we need to. I'm not sure why you seemed to believe I was suggesting otherwise. but its miserable to work with pdfs because the technology to do so is pretty lacking. 
"gaurantee" sp -5pts Just kidding. Looks good so far.
I've made a build monitoring tool that shows me when a build is running or not. It runs as an Ubuntu/Unity applet, checks if make is running and uses appindicator to change an icon and a text message in the status panel.
 "".join(chr(i) for i in [101, 102, 102, 32, 121, 111, 117, 32, 58, 45, 41])
I am [writing a book](https://www.reddit.com/r/Python/comments/3bqt1h/writing_book_on_python_python_for_developers_1st/) that might be of interest to you. It is a detailed book, focusing on people who already are good with programming, python developers or otherwise. I have only finished one chapter so far, Data Structures, its 100 page long, discussing string, ints, list etc in built data types in python.
Slightly related remark / question: What's nice about standards is that there are so many to choose from :( As HATEOAS entity serialisation protocols go, I'm aware of HAL, SIREN, JSONAPI, ODATA, Collection+JSON, Collection.next+JSON, Collection.doc+JSON, DocJSON, Restful Objects, and there are probably a few others. Any advice on choosing the "right" one ? 
Awesome, thanks.
Since the book isn't for beginners, just choose a version of Python and stick with it. Readers won't struggle with opinionated code. If anything, choosing a version will make things easier to read. Also, there are plenty of books out there with code written in Python 3. Some say Python 3 is better suited for teaching.
&gt; "".join(chr(i) for i in [101, 102, 102, 32, 121, 111, 117, 32, 58, 45, 41]) Haha! BTW, I love that there's very little blah blah blah. It just starts by getting right to the facts. Programming books can be so tedious when they start out "Python was created in blah blah blah by blah blah at the university of blah. At the time there were no languages where ... "
This will simplify my job considerably. But three of three startups I know around me who are using python are using python2.x. And each three of them said they are not yet ready to switch. I personally do not want to take a position on this, and since there is going to be considerable amount of code in python 2 for years, understanding the differences between 2 and 3 is a must know for many. Also I feel I am doing python3 a favour, as nearly everywhere python2 and python3 differ, its because python3 is better, so reading it will convince you, you need python3. As otherwise people tend to think there is not much difference between the two, and tend to dismiss it. What do you think?
I'm no HATEOAS expert, but I honestly think that with a lot of the protocols it's more semantic differences than anything. Personally, I'm a big fan of SIREN due to it's verbosity and high level of discoverability. If you use something like [pypermedia](https://github.com/vertical-knowledge/pypermedia)*, you can create universal clients capable of interacting with the api like another python object. My recommendation would be to play around with them and determine which one you like. As another shameless plug, ripozo allows you to switch between any protocols available simply by changing the Accept header. *I realize the docs are lacking but there's an example in the [flask-ripozo tutorial](http://flask-ripozo.readthedocs.org/en/latest/flask_tutorial.html)
Thanks! I've seen that but wasn't sure what was better. Could you give me an example? What is main_func? Thanks!
&gt; Flask makes it hard to avoid circular imports, I agree, it can be quite confusing and the accepted solutions seem like a bandage. &gt; As for comments, I would normally say you should comment everything. At a basic level I shouldn't have to read a whole function to work out what it does, for instance. isn't a description of a function or class in its docstring? 
I also learned Django and then Flask. Although I now prefer Flask over Django I would personally recommend starting with Django. Django gives you a lot of the basic tools built in which means you don't have to research which user management system to use, ORM, etc. Additionally, the flexibility Flask gives you can make it easier to shoot yourself in the foot (coming from someone whose foot is riddled with bullet holes.).
main_func is the name of your func. Move all the code from under the if __name__ == '__main__': into this function
Just on the first few pages, I see several gramatical and spelling errors. I don't suppose that is your focus right now, as you are structuring the book, but do have it properly proof-read.
Maybe you're right. I've read brief 2/3 disclaimers in the preface to books, but authors usually don't dwell on the differences. I was going to say that there's already a mountain of info on the the subject, but probably not nicely outlined in book form. FWIW, I used Python 2.6 at the startup I worked at, but all the while I was learning new things in a book with Python 3 code in it. It never tripped me up. We all obsess about their differences, but for the purpose of learning data structures, algorithms, or the basics of Python, they are pretty interchangeable.
So cool! I'll give it a look ! Thank you!
&gt; The price we pay is that page breaks over tables sometimes comes out a little awkward. I think its a worthwhile trade off though. If that's the only trade off, I wouldn't call the technology "pretty lacking" or "miserable". The other way around (extracting data from PDF), yes, I agree - thing could have been better. But for HTML -&gt; PDF I find the technology sufficient for my clients' needs. If they want something flawlessly polished (haven't happened yet) then I can get a designer to make the report in InDesign by hand. It would cost more, of course. I played with LaTeX -&gt; PDF conversion and generating InDesign files from XML. But it's easier to hire people familiar with CSS/HTML than the ones who know LaTeX or InDesign scripting. Plus, InDesign templating is not that flexible. By the way, my workaround is to automatically split HTML tables based on the number of rows. 
I'm a big fan of [Effective Python](http://www.amazon.com/Effective-Python-Specific-Software-Development/dp/0134034287). Covers everything you mentioned in depth, and I really like it's style of "here's a bad way to do this, here's a better way, here's the best way" on each topic.
I'm actually really happy you're covering 2v3. At work we're still using 2 for compatibility reasons but I am playing around with 3 a lot at home. This book looks like it is going to be a really interesting read :)
Thanks for the pull request!
This is awesome. Quick question, is this book laid out in a tutorial kind of way, or more like, "here's this topic let's got at it" ? 
&gt; has qt lost weight since then? On most platforms it isn't modular. And you won't get very far without pulling in most of the toolkit. Just some space numbers: qt5-base: 52MB qt5-declarative: 16MB qt5-webengine: 92MB (its basically Chromium though) Heres the trick. Pretty much every computer is already running some Qt software, so I cannot be bothered about how the toolkit is some ~200MB big when its already installed most places, albeit all the Windows Qt programs are bundling the toolkit with their installers individually, but thats Microsofts fault for not having any package management on the piece of junk. My reasoning is everyone should be using Qt for pretty much everything, so the space usage doesn't matter. Its not bloat, its "comprehensive". All the heavy weighted things (multimedia, their JS engine, webengine) are all super important to have. At that, compile times of big C++ codebases are still awful. If you use only QML / JS / Python though you don't have to compile anything, albeit for deployment you almost certainly want a wrapper binary instead of using qmlviewer.
HTML -&gt; PDF is not lacking or miserable. thats why we use it. Dynamically generating a PDF directly is lacking and miserable (and slow as shit even when it does work). The best I've come up with yet in python is the foss library for reportlab, which is a very watered down version of an extremely expensive enterprise oriented product. we would be willing to pay for the product, but, we can't. their license explicitly prohibits embedding their non-foss product in another commercial product. the others options we've explored (not in Python) are all really similar, most of them are basically desktop apps with a GUI PDF editor intended to be installed on a Windows machine at the desk of a business analyst. very little of this is designed as server-side software. and all of it is extremely expensive. extracting data from PDF is another major major use case in our business. we get a huge amount of primary source data (real estate listings for rentals and sales mostly) delivered as PDF attachments to emails. we've experimented with many different ways to try and digest these and get the useful data out, but nothing works well. the best so far has been pdfminer, which mostly works for the specific subset of PDFs that are mostly text and formatted in sane ways. that is a tiny minority of what we get though. we have human data entry specialists do this work for us because the software tools for PDF data extraction are poor. they are poor because the PDF format itself is the devil. it is simply not designed to support this use case at all, and trying to force that square peg into our round hole here is not efficient or effective. 
What do you mean "built in Python?" The first thing that popped into my head was [Salt](https://github.com/saltstack/salt), but I know that's not what you're asking.
I think the strategy there is to set the number of tests lower for development and turn it up in your ci 
Quick question while reading through the code - you are using a length 8 validator for the password in the LoginForm. Why not the same in the RegisterForm?
A couple typos so far: * p4 - sufficient misspelled as "suffecient" * p5 - "arts of a complex number usingc.real andc.imag‘" needs a space between "and" and "c" and another "\`" Thanks for this :-)
It probably depends on what packages you have installed in that Python. If there are packages that try to do things on import, that will slow pydoc down. It's not a general problem - I just started pydoc with Python 3.4 and it came up instantly.
Depending on the project, sure... but for projects that are mostly back-end, Django can be overkill (and overwhelming) especially for a beginner. It doesn't sound like OP needs all those structures built-in to Django and even if s/he abuses the flexibility in Flask, that's better - IMHO - for learning than "I'm not sure what kind of authentication my app has, Django just does it for me." or getting lost "in the weeds" of configuring/customizing Django. Does OP even need a user management system?? It sounds like OP could accomplish his/her entire front-end with a single static page or two with some AJAX on it for reporting back the status of the items being processed by the task queue.
I'm not the most experienced but try this: T[0-9]*
Do missing fields have default values? If so, default arguments make the most sense: def__init__(field1, field2=None, field3=None): self.field1 = field1 self.field2 = field2 # will be set to None if not passed self.field3 = field3 # will be set to None if not passed 
In addition to the other answer, Python also has keyword arguments. def func (opt, **kwargs): print(kwargs) # kwargs is a regular dictionary so # 'if a in kwargs:' # or # a = kwargs.get(a, None) # are both OK func (12, a=1, b=2) 
What kind of cloud or tool?
Why thank you!
Says "Windows, OS X, Linux" on the front page, then offered me an EXE download?
Google App Engine?
You'll probably still find more examples written in Python 2, but most of the changes will become obvious after you've made them a few times. You can also use [2to3](https://docs.python.org/3/library/2to3.html) to make most of the changes a script needs automatically.
I just took a course dealing with material. With background in python and HTML, I can definitely tell you that it is a different mindset. Flask with WTForms and python as the framework for a website is a good foundation. Making sure that your HTML code and Flask interact well -- it takes some time. have you seen some sites that utilize Flask and HTML?
Python can't run in the browser (well, it technically can, but you really don't want that), but JavaScript can. So if you want AJAX type abilities, you need some language that the browser can run, so the page can respond to events.
whats the purpose of "name", shouldn't this be user choice?
So it's good for sites where it's essentially single page throughout? 
I've found this tool incredibly useful for playing around with regular expressions https://regex101.com/#python lobocv's suggestion works for me. 
This should work: t = 'T T55 T92' For one instance: r = re.search(r'([T]\d{1,2})', t) r.groups() For all instances: re.findall(r'([T]\d{1,2})', t)
Thanks :-)
Thanks for the feedback. I will get it fixed in the next draft. 
&gt; T[0-9]* This will work, but it will also capture just a T or a T with more than two digits such as T999.
Thanks you guys.. It really helped!
We're undergoing a transition period at the moment. Python 2 will be EOL in 2020. You will likely change eventually so why not now before you have any legacy code to port?
IMO itertools and logarithms are overkill for this use case. Use a generator to produce the powers of 2 lower than N, then apply `sum()` to a generator expression as suggested by zahlman : def gen(N): i = 1 while i&lt;=N: yield i i *= 2 sum(i for i in gen(N) for j in gen(N)) 
A common implementation (i.e. one used in the standard library) is to use `staticmethods` for multiple constructors (which admittedly isn't quite the same as overloaded constructors): class MyClass(object): # The default constructor def __init__(self, field1, field2, field3): self.field1 = field1 self.field2 = field2 self.field3 = field3 @staticmethod def only_field1(field1): return MyClass(field1, None, None) @staticmethod def missing_field3(field1, field2): return MyClass(field1, field2, None) Then you would just have example1 = MyClass('field1', 'field2', 'field3') example2 = MyClass.missing_field3('field1', 'field2') example3 = MyClass.only_field1('field1') You can see this in particular with the `datetime.datetime` class, since it has a default constructor taking a time representation, but there's also `datetime.now` and `datetime.today` where both have unique behavior. In your case, since you just have 1, 2 or 3 fields you can get away with just using keyword arguments with default values: class MyClass(object): def __init__(self, field1, field2=None, field3=None): self.field1 = field1 self.field2 = field2 self.field3 = field3
Personally, I wouldn't manually compile the UI files, but rather [load them dynamically](http://stackoverflow.com/a/2500905). 
So usually these are coupled? I was getting confused earlier and from an interview yesterday about the role of javascript. It sounded like they even built the backend using Javascript. But it seems like the heirarchy goes like this: Backend - (Python, Ruby, PHP) to generate HTML pages HTML Pages - May or may not contain javascript for interaction. 
Hmm... I never had any problems (using listings with a proper code declaration). What was your problem?
FYI you can run MicroPython on a ~$2 ESP8266 board. Support is preliminary, but they also have WiFi and are perfect for IoT stuff. 
What other chapters have you planned?
Just didn't look to great was all.
As the other two comments say, it is absolutely possible to use any language (even Javascript) to generate and serve HTML. Node.js is the Javascript module equivalent of Rails and Django. I omitted this possibility to make my explanation more clear.
As /user/hekkon said it is possible to build a website with node.js express is like the nodejs equivalent of flask. http://expressjs.com/ and it can use many templating systems also Swig templating is the most similar to Jinja templates. Advantages of python are you have a huge amount of libraries. Python is much more mature etc. For Flask there is the problem of what type of server to deploy it on. Advantage of nodejs is you do not need a "server" nodejs itself is the server. Also nodejs is like twisted python, it is event based since it is single threaded it is extremely fast. For nodejs you need to have an understanding of event based programing with callbacks, if you ever worked with twisted python when it works it works great. But it can be really hard to debug. Personally I like python and I like javascript, but I detest PHP and Java. But this is my personal preferences. Also the line between frontend/backend is getting more and more blurred. It is a good idea to have an understanding of javascript even if you are using a python solution. 
i read only the first pages(not enough time..), and i dont like the == and is comparison. for example if i read the book i'd think that a = [1] b = [1] a is b True
This is a post that's more suitable for /r/learnpython But the answer is: go with Python 3. Pygame supports it, and it sounds like you are only starting new projects rather than working with an existing code base. Also, the pygame.org website is notoriously out of date. If you need Windows installers for Python 3.3 or 3.4, you can find them here: http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame The docs are decent, but I also have a free book on Pygame here: http://inventwithpython.com/pygame
Seconded. I used to love Wx, but there's just no competing with the flexibility that the browser gives you[1]. I was 100% done with Desktop apps when half-way through a project that build config files for my desktop application, I realized that I fudging re-implemented the desktop application in the browser -- it was so damn easy that it happened organically. Doing the same thing in Wx took hours of thought, hundreds of lines of code, and tons of debugging pain. Wiring HTML/css/js components together just beats the hell out of building up abstract class hierarchies and aligning things with `BoxSizers`. ^[1] ^Also ^WxPython ^is ^a ^dead ^project ^T_T
Unix guy here. Maybe look into virtualenv to create self contained python environments? Then you dont need to worry about admin access..
[Automate the Boring Stuff with Python](https://automatetheboringstuff.com/) is a free Python book. It's aimed at beginners, but experienced programmers can skip Part 1 and instead start at chapter 7 to learn various Python modules for doing interesting stuff (web scraping, GUI automation, regexes, manipulating images, etc.)
&gt; Since JS is the only language that can run natively on any modern browser it's the only choice. Dont forget [the languages which compile to JS](https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS) of which [Elm](http://elm-lang.org) is my favorite
Then you have to worry about all that async UI, thread handling, etc., when the browser does that part for you.
Processing runs Python.
But can I include it as a library and install it via pip? I looked at it, but couldn't make heads or tails of it as a separate, package-able thingy.
[Here is how to access your dropbox files offline](http://mobileoffice.about.com/od/softwarewebapps/a/How-To-Enable-Offline-Access-For-Google-Drive-Dropbox-Sugarsync-And-Skydrive.htm) No need for a python script today
Why would you think that? The description doesn't lead me to that conclusion? The sample talks about comparing numbers but you are comparing lists. Since this is for "developers" I would think they would be able to grok that. I am not saying you are wrong I just want to understand why you'd think that and if the author reads it then he has some good feedback.
I think you should go with Python 3. If someone wants they can go through the hoops of converting your examples to Python 2 syntax. It's more "future proof" that way.
Are you under pressure to not put that in your website? or did I miss the link? Pretty shitty of you to ask for our feedback and have us sign up for your mailing list or whatever the shit your doing with our email...
Oh. I just caught a bug? Just by reading the code? Cool!
&gt; but wouldn't this mean I would need internet access to get the files? No. Your Dropbox folder is a regular folder on your hard drive, so you can read-from and save-to your Dropbox folder at any time, regardless of your internet connection. It's just that your files won't be synced to your other devices or backed up to Dropbox's servers until the internet connection is reestablished.
Author here (with review support from my employer, Digi, who allowed me to release this as Open Source). There is obviously strong overlap between this library and construct (http://construct.readthedocs.org/en/latest/). In many ways, construct is technically superior to suitcase. I think the most compelling thing about suitcase over construct is that it provides a more familiar syntax then that provided by construct and with less repitition. Those who have used something like SQLAlchemy or Django's ORM should be able to quickly understand the basic syntax. In addition, I think more has been done (and used in production for real projects) to support using structures that form the basis of streaming protocols (over TCP or serial). Would love feedback. I should also add, this is probably the best place to start if trying to use the library or just get a better feel for how it works: http://digidotcom.github.io/python-suitcase/0.6/getting_started.html
This doesn't particularly sound silke an API. This sounds like navigation. These are distinct and importantly different things. An API is a programming interface- the purpose of an API is to allow a client to interact with your service on their own terms. A successful "login" operation, for example, shouldn't "move" them anywhere- it should return an authentication token they can use for future operations. If it fails, the client should receive an error. Navigation is usually how a user interacts with a web application (which may be backed by an API). Navigation, much like an API, wants to let the client control the experience as much as possible, and to that end, navigation focuses on using client-side redirects to tell the client where it should actually go. In both cases, an important concept is the idea of an "end-point". An end-point is a place where clients send requests to (whether the request is to an API or for a page is irrelevant). From the *client's perspective*, an end-point should represent the terminus of their request. The main reason to *redirect* at that point is to inform the client that they are not in the correct place- that there is a better end-point to complete the servicing of their request. A *server side* redirect is when the end-point is correct, but the server-side code needs to dispatch the request someplace else for handling. Use client-side redirects when you honestly have completed your interaction with the client (for this operation), and want to have the client start a *new* operation from a different entry point. Use server-side redirection when the operation is not yet complete, and needs to be handled by a different sub-process. In your specific example- if a login succeeds, the operation is complete. You want to start a new operation, from the home page, thus you should client-side redirect. On the login failure, however, the operation is NOT complete. Thus, the server side should resend the login page to allow the user to try again. If the user fails too many times, then the server should decide the operation is complete (in a failed way), and redirect the client to a "too many attempts" page (client side redirect).
http://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes-using-python Sorry so terse. On mobile. 
Awesome guys, I got it working. I was actually looking at the stackoverflow thread before but I just didnt think it was as simple as it was :/ Thanks!
If you post your code or provide a link to it I have no problem with looking at it to try and find a problem.
Check your indentations
There's a clone of processing in python (but it does look unmaintained): http://code.google.com/p/pyprocessing/
You're awesome, thanks so much. So x = x-1 would cause it to start with the highest number and decrease. Is there a way to make the program begin with Test 1 and then increase?
I'd say create another variable and set it to one like so: current_test = 1 and then change the while loop accordingly: while current_test &lt;= tests: score = float(input("Enter the score for test " + str(current_test) + ": ") total = total + score tests = tests + 1 This way you count up! Note here that I changed it back to tests += 1 here in order to make sure we are now counting upward. If you have any other questions about why I did what I did, feel free to ask. 
I would use range() for test_num in range(tests): Or something similar Edit: note that it is 0 based, so you will need to account for the 1 someplace; either in the range call or within the loop.
Serious question: Why are you using a while loop for this? A for loop and a range would do it without needing a counter. Like so: tests = int(input("Enter number of tests")) total = 0 for test in range(1, tests + 1): score = float(input("Enter the score for test " + str(tests)) total += score avg = total / tests print("The average is {.f2}".format(avg))
What do you use Gherkin for?
I think that `classmethod` is the preferred way of doing this, if you look up `datetime.today()` and `datetime.now()` they are `classmethods` not `staticmethods`. So your alternate constructors would be: @classmethod def only_field1(cls, field1): return cls(field1, None, None) @classmethod def missing_fiels3(cls, field1, field2): return cls(field1, field2, None) This has the advantage of not locking in the class name so sub-classing is possible. 
And now I'm waiting for someone to tweak it in a way so that it produces an image that induces seizure... You know, brain jamming trying to process all these fractal features. Snow Crash.
You tell me. I'm not a developer, I'm an English teacher.
I really like your recommendations! Thanks!
Yep. Good book. We have a book club at work, and we are currently reading it. Covers advanced topics, and discussions on good/worse ways of doing stuff. Recommended. Also, dammit, I forgot to read chapter 5, and the meeting for that chapter is later today.. Oops.
Currently, if you compare the native code execution of NumPy and the at runtime generated SIMD (sse4) code of PyPy, it would show the following behavior: PyPy (no vector) 1.0x speedup, PyPy (vector) ~1.5x speedup, ~~CPython (NumPy) ~2.0x speedup. So the **auto** vectorizer is able to get approx half the native code execution speed compared to handwritten optimized sse2/3 NumPy routines.~~ ~~Note that sse4 and sse2/3 have the same vector register size, so the maximum speed gain is equivalent in all of them.~~ EDIT: NumPy on top of CPython uses OpenBlas + AVX(2), so that is incomparable. I will do more evaluation on the topic soon. Having that said, this only compares native (a head of time) compiled code with jitted code. Programs do not normally consist only of statements using NumPy. Thus the situation improved. I'm currently looking into these issues and see what can be done.
I've never encountered a mature package for Python along those lines, sadly. The nearest I've seen are game libraries like Pygame, Pyglet, or PySFML.
I would count a docstring as a comment, and I don't think I saw any in the code when I looked.
Thanks. I have to clarify it in the book somehow and other copy, as this is the most important motivation for me.
1. No pressure. I have a work in progress page for the book. I have just not come around to working on it, design is not my key strength, and I am focussing on content for now. 2. Not fair, the very first comment on this thread was to get it via dropbox sharing. 3. The reason I prefer having your email is so a). I can send you next chapters when they get ready, and b). let you know when I have it finished and available for sale.
Hey, I will review the portions. I think I have repeated the difference between `==` and `is` multiple times in the chapter, when covering list and dict etc. I want to error on side of repeating things that to let such practically important distinctions pass by. I have been bitten by this code, and I have maintained code by others who tend to "always use ==" or "always use is" without clearly understanding the difference. 
iOS apps don't need to be written in Swift (or Objective-C); all they need is to be compiled with Apple version of Clang. Kivy (or [Kivy-iOS](https://github.com/kivy/kivy-ios)) translates Python code to Objective-C and then uses the official Clang to compiler it into a native app.
Great, thanks for the clarification!
For regex I'd recommend using VERBOSE mode and heavy use of comments so that everyone understands what each piece does.
I think this is really good. Very easy to read. A minor typo : p17 - "Unicode itself is not an encoding, it does not directly lead to bytes, it is more of a assingment" Also the end seems to finish abruptly - it would be good to say when you would use the Enum class over a named tuple (if at all)
raw_input a.k.a. input in v3
So, to clarify, you want a license that lets someone do anything except sell an identical product under a different name? They could do whatever they want with it non-commercially, they could sell the product under the same name, or they could modify it by some amount and sell it under a different name? I think the sticking point will be making a license that clearly and unambiguously specifies how much has to be changed. How would you even quantify that? How would you prevent someone from just doing a find/replace on certain function, class, or variable names? What prevents one person from making a non-commercial renamed fork, and a second person selling that fork? So I understand the sentiment, and IANAL, but I would suspect making a legally-binding license that is clear, unambiguous, and not full of loopholes would be essentially infeasible.
http://www.thebrainhack.com/
very nice job. I would however stick the examples in one version (my preference would go to python 3) and highlight (for example with and asterisk) when the you want to show a different version
I work at CNRS in Paris, France and I developed this as a teaching tool for graduate students of control. I hope some of you find it educational and fun as well :)
First, this belongs in /r/learnpython. Second, if you want to do this in a terminal then this [thread](https://www.reddit.com/r/learnpython/comments/2phwz2/keyboard_input/) might be helpful. The solution for Windows on Stack Overflow worked for me. Edit: Or better just use `input` (`raw_input` if you're using Python 2) with, for example, the wasd keys and a while loop in which you check which key was pressed and then update your grid. 
You've already posted this a couple of weeks ago https://www.reddit.com/r/Python/comments/3a4zm6/i_developed_an_opensource_flight_simulator_for/
Raw_input() only works if you type something in the console and hit enter. I have a clicking program that I want to exit by pressing a button... So that won't work
I love Kivy, I have played with Kivy extensively but I haven't released an app with it. The reason for this is that it does 99% of what I want. So for something like flappy bird or 2048 Kivy completely rocks. For a huge chunk of the top 100 games it would probably be fine. Thus Kivy is pretty damn good. But where it lets me down is that I can't do certain things. I do procedural generation where I need pretty much every ounce of horsepower the CPU can provide. I access APIs that are a pain to get to at the best of time such as bluetooth. So for my odd requirements it isn't ready. That said, I also have a few quibbles with Kivy. I find that getting the environment set up is just not as clean. I personally use Cocos2d-X and the environment there for iOS is a dream when it comes to going from nothing to testing helloworld on an iPhone. The cocos2d-x environment is a bit fiddly for Android but nearly everything android is fiddly. But seeing that I do much of my back end programming in Python it would be dreamy to be able to do all my front end programming such as apps in in Python as well; not to mention better code reuse. No doubt there are a zillion people with a zillion demands on the Kivy people but here are my two requests. Streamline the installation. My time from download to first helloworld on my iPhone was not a smooth process. My second request it a much much faster release cycle. Even if these are minor bug fixes. Get those releases out every couple of months at least. Not only will it make me happy but people get nervous about slow release cycles. For instance the deadly slow release cycle of openframeworks.cc has probably self immolated that project. 
Thanks that did it. I think previously I must have had a script made from the previous CE version which was uninstalled, which was why I was getting the errors. The tool overwrote this and it works fine now. Is there a way to launch a new python file from the terminal via this? Or is it just for launching existing scripts? Can I do something like "charm newfile.py"?
How do you go about sending data to the backend? A REST API formatted as JSON?
Fair enough - but he has posted this 10 times on reddit already
I think the better approach would be to find the first `=` character in the string, then delete everything before that. Then you can `split` the string, filter the resulting list using a generator expression, then put it back together with `join`. I will assume there will always be a `=` in the string. Let's use your example and call it `mystr` (`STRING` is not pep8 complaint) mystr = "some title - some other title - another title - title_4 ========== ================ ============= ======= required information and data" With that we can do this: &gt;&gt;&gt; mystr2 = mystr[mystr.find('='):] &gt;&gt;&gt; mystr3 = ' '.join(substr for substr in mystr2.split() if '=' not in substr) &gt;&gt;&gt; print(mystr3) 'required information and data' 
Look at the output for STRING.split("=") and slicing of [lists](https://docs.python.org/2/tutorial/introduction.html#lists).
for certain problems pypy can kick numpy's ass.
If your monitoring box is in the same L2 segment, you could listen for gratuitous ARP packets or check the source IP for broadcast frames (making sure the IP is valid and doesn't belong to the monitoring box).
very nice, thanks for sharing. on page 36: &gt; "Hello".upper() in hello world".upper() the syntax error also messes with the syntax highlighting. and the headline "Playing with dicts" made me laugh.
Oh waw, now I have to tie some scripts together to create subs for missing subtitles in my plex environment (6)
It's surprisingly difficult to give away free software -__-
so? I didn't see it last time.
Very nice. It seems like tilting the aircraft doesn't make it go down like I'd expect it to. Shouldn't it move to the side and down if the upwards force isn't increased, when the thing is tilted to the side? Definitely send this to those mailing lists!
I'd be curious as long as it was properly coded numpy. One of numpy's greatest advantages is being able to do a ton of work in 10 lines. Python code (e.g. lots of for loops) written with numpy will be slower.
I'll take it if you pay me to!
Okay, credit, but that's such a terrible way to teach. "Do this thing in a way you will never actually do the thing" instead of "This is how to do the thing in context of how you should do the thing" is not optimal. I also was the type that when I figured out the problem presented was suboptimal would fix it and turn in the fix. Glad my program appreciated going off book.
Interesting problem and analysis! Has anyone else come up with optimal layouts?
If you use some of matplotlib's included stylesheets, say the ggplot ones, you get much nicer plots for no work. 
&gt;Hey, I will review the portions. I think I have repeated the difference between == and is multiple times in the chapter, when covering list and dict etc. sorry i didnt read it all. i just thought, it would be better to say that "is" returns True when they are pointing to the same object
What was the name of the game?
The book is actually quite good I read what you had uploaded last night. Are you considering sticking to one convention python3 vs python2.x? Well done.
It's called baldr, but I should clarify that it is not a video game, it's a simulator for educational purposes. Physics in video games are just realistic enough to be believable. This program allows you to calculate things like exact rotor speeds and gyroscopic effects from the blade rotations, which would be complete overkill for a game. Edit: For potential developers, I would like to note that the Blender Game Engine (BGE) physics are not applied to the aircraft on the scene. The object is set to no-collision mode and all the physics are calculated in the Python scripts in the repository.
Shameless plug: https://flask.zeef.com/stefane.fermigier
I've made a couple of Flask-based projects, ['/r/thebutton stats'](https://github.com/Chr12t0pher/r-slash-thebutton/tree/master/Dynamic%20Site), which focuses on data scraping and number crunching, as well as an arbitary email subscription system. And my [A-Level Computing Project](https://github.com/Chr12t0pher/Parkwood-Vale-Harriers-PUBLIC), which is a much more rounded Flask application with some databases, webforms, authentication and the such. However I'm also still learning Flask/Python so it's probably not perfect code, but hopefully you find it useful to look around, see how it's used.
So? I didn't see it 
That's true. However the problem with hooks is that you have to commit every change to invoke the local or remote CI, so IMO not very desirable for local development when you want to see what you're breaking as you're making changes. I haven't used jenkins before but I'm going to check it out. 
As an aerospace engineering student. I very much approve of this 
Things like https://github.com/brunobord/tdaemon are often more suited than a full-blown CI server for running tests locally.
The engine is called Hypatia.
It's fine. It's something you have to learn, then you've learned it and you're good to go. We'd have never moved beyond C++ if we hamstrung the language to what might confuse programmers from other languages. `yield` tends to throw new people for a loop, too, (no pun intended), but it's easily one of python's best features. I'm resistant to the idea of adding new keywords to the language when old ones suffice. I know that `else` seems weird, as it isn't exactly the same as `if/else`, but in practice they tend to make sense: for element in my_list: if element == my_element: found = element break else: #if nothing was found # Do something here Another example of this principle is Nick Coghlan's lovely `@in` [proposal](https://www.python.org/dev/peps/pep-0403/): @in sorted_list = sorted(my_list, key=key_func) def key_func(val): return val[0] Finally, introducing a new `nobreak` keyword would be an *especially* bad idea if it was only done for `async for`. It would create a *huge* inconsistency in the language, when `async for` is just `for` with some extra async semantics.
&gt;Is there something I am missing or do I really need to write my recursion to determine which data type I am dealing with before taking any action? You could have done it in less time than it took you to make that post(no offense intended btw, it just is very trivial to do). FYI https://www.google.ca/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=find%20key%20in%20nested%20dictionary%20python also please use /r/learnpython for this kind of question
Are you trying to search the json object for a string that could be anywhere in it? Or do you know where it will be in the json object and you just need to know how to retrieve it?
Isn't that true of super computing fluid dynamics simulations too? Short of accounting for quantum effects at the molecular level, aren't you just using approximations that break down as you deviate from ideal conditions? I doubt you model for local porosity variation for example.
I didn't see this on /r/flying today, but if you haven't x-posted it there before, you should. There are quite a few SIM flyers there.
That would indeed be super cool. I did at least write the c/c++ side of this once, but never got around to writing the python side properly (I generated python parsing code rather than going from the IDL directly).
Err, wait, I was talking about the other game posted: &gt; They posted about python-based action-adventure game engine a week or two ago. I think there's some confusion?
Lots of information in the side bar
Using the proxy option that Caddy has, I can simply proxy requests to cherrypy, bottlepy, etc.
I feel like this is more aimed at trying to catch people out rather than a meaningful quiz of Python knowledge. If I saw most of these in a code review I would be forced to slap the author for being a non-obvious show off. Code should be written for the reader and not for the writer.
My bad. I thought rather than searching the net the bot would just use a few subtitle file sites and youtube.
Thanks. It's seems like a small useful package. I'll check it out. On a separate I don't understand the number of down votes my post got. Compared to /r/golang, /r/python is so un-welcoming. 
&gt; Apparently the json behavior is to turn some pieces of the json into list, and others into dict. You act like it's arbitrary. It isn't. The JSON is directly mapped. Yes, you have to write to different searchers. I don't think you've thought out what you are searching. So, suppose you're looking for "apples". What is the output for each of these inputs? [ "apples and apes", [ "oranges" ] ]? { "as are for apples": [ 1, [], { "b": 4 } ] ? { "first": { "second" : { "third" : "apples" }}} ? 
Hmm. First I'd look to see if it's prime. If so, then I'd know the only other factors are 1 and the number itself. As for composite numbers, thinking of how to tell python 3.x to do this is tough. Probably divide by 2, 3, and so on and see where the remainder is 0 for %
Additionally there are many helpful links on the sidebar, including /r/learnpython. I've also found that sites like http://www.codewars.com/ can really help one ramp up on a language's syntax.
Because I didn't think about how list comprehensions can evaluate to list objects! Good tip, thanks!
you can check python django links for jobs http://djangolinks.com/search/?q=job&amp;sort=t
OK. The main thing is to understand WHAT you want to do. Since we're looking for all factors, what we really want to do is look through all the numbers from one to the target, and try to divide target by that number. so if i begins at one, target / i will be evenly divisible, because all numbers are divisible by 1. Next we'll set i to two, and see if target divided by two is evenly divisible. Now that we can describe the problem in English, we need to think a bit about how in Python we can make these things happen. It seems we've got three problems: 1. How to get an integer input from the user 2. How to count from one to that value 3. How to tell if the target is evenly divisible by the counter. That's the algorithm, and Google is almost never helpful in this part. Learn to write the algorithm in English first, clearly and succinctly, and then convert the algorithm to the language in question. In python 2, You get input from the user with the raw_input() command. Look it up if you don't know it. target = raw_input("What number do you want to factor? ") One issue, is the raw_input() always returns a string, and this is a good thing. However, you need an integer. Again, Google will help you find the function for turning a string into an integer. target = int(target) This will work, or you can combine the input and the integer conversion as you'll see later. Getting it to count is pretty simple in python. You have the wonderful range function. However, when you look it up, you'll discover it doesn't work exactly like you need. for i in range(target): print i This will return the values from 0 to target -1. WHat we need is 1 to target. There are a couple of ways, but the easiest is to simply modify the range statement (You know you can do this because you looked at the docs and google, right?) for i in range(1, target + 1): print i Now we're getting somewhere. The next point is to figure out if something is evenly divisible by something else. Turns out the answer to this isn't really a programming thing, but a math thing. There's an operator you should have learned in grammar school but probably didn't called _modulus_ Modulus (or mod) is WONDERFUL. Programmers use it all the time. The mod operator (% in python and many other languages) gives the remainder of an integer division. So 5 % 2 is 1, because the remainder of 5 / 2 is 1. 6 % 2 is 0, because it has no remainder. AHA!! SEE IT??!! (Sorry to yell, I just get so excited by this stuff...) Look through every number and if the mod of target divided by that number is zero, the target is divisible by that number. Your professor shouldn't teach you how to do this problem. He SHOULD teach you how to think about this problem, as I'm trying to do. I've written the code for you, but because I care, I'm not going to give it to you yet. Try to work it out with the hints I've given (which are plentiful.) If you're still stuck, send me you thought processes, and I'll send you more hints, or my code to look at. NOTE: HungoverOrDrunk's code will work great, and it's the 'Pythonic' way to do this. (using a marvelous technique somewhat unique to Python.) But I think at this point the goal should be to learn how to think through an algorithm and turn it into code. Once you can do that fluently, get as fancy as you want. ANOTHER NOTE: If you're in Python 3, the idea is almost exactly the same, but the syntax is slightly different. Don't panic. It's easy to learn the differences. Give it a try, and if you're stuck, we can help.
&gt; all you need is a suitable server and someone skilled enough to install it. Would you mind pointing me to some guides/ youtube videos on this? And/Or the right technical key words to google.
No problems. Thanks a lot for feedback. If you look at the style of the book, its pretty unorthodox. I do not cover X in a chapter named X. In fact I only have 5-6 chapters, data structures, functions, modules and packages, classes, "the language", and "library". I expect people to read it start to end, as I introduce a bit of information at early stage, and then I develop as it comes, it is more like you and me had a conversation. I would not tell you everything about functions the first time I mention it. It will gradually come up, and then I will add more and more details. This is how I teach in person. Not sure if this style will translate well in book form or not. 
As I said on [the other Thread](https://www.reddit.com/r/Python/comments/3a4zm6/i_developed_an_opensource_flight_simulator_for/) you made a while back: post it to /r/Multicopter. I bet there are a lot of people who will love this.
Neat! I took a look at the code and noticed there's a lot of math and basically no comments. More comments would be helpful. For example, https://github.com/motet/baldr/blob/master/scripts/controllers.py
Just check their github repository: https://github.com/reddit/reddit They have an install script for Ubuntu, as well as a detailed installation guide if you aren't on Ubuntu. 
You can select any of the models from a drop down menu; I just happened to use a simpler model in the example video I posted.
Excellent. Do you have any idea when we can expect news of a 64 bit 3.x release? Is it likely to be 2016, 2017, etc.? Thank you.
Isn't this a repost?
And it's down because "it's aesthetically and functionally similar to Reddit" but didn't copy their infrastructure.
Looks very interesting. I very much love the idea of a BNF defined language for querying JSON-like structures. But it's said there are only 1.6k google results for it. Seems like few people use it yet. Are you involved in the development? Do you know about any marketing efforts? PS: how would one do the example from http://objectpath.org/? There is no `$..stuff` right? You can't say "somewhere down the tree is a object with the name `stuff`", right?
Hi. I saw your question and I came here for both answers and to see what was the problem, why did you get downvoted. Your question is very good, the area you want to learn about is pretty new and I'd have to be an idiot to downvote you. So I upvoted. Thanks for an interesting question and let me know what tool suits you best when you find it.
I had no idea what that was until now. 
This sectin still needs a lot of work: https://packaging.python.org/en/latest/deployment.html
Thanks for the link!
I am currently working on a guide about TLS and asycnio/aiomas. You can find the draft here: https://bitbucket.org/ssc/aiomas/src/tip/docs/tls.rst
Don't ever try to listen on SSL socket within your app. You will fail horribly. Use nginx in front of your app and configure TLS (not SSL!) on it with proper redirection from 80 port to 443 port. The starting point can be https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04 Also read about strong TLS configuration here https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
And what does it do? What is good for? I am confused.
Voat doesn't use the reddit source code. 
Great stuff, but does it need some configuration? It's supposed to do [a better job than this](http://imgur.com/DWw2HwS), right?
&gt; if cv2.contourArea(cont) &gt; 9000: my favourite line
if you're running linux, you most probably need the `python-opencv` package. on deban or ubuntu you would install it with `sudo apt-get install python-opencv` for python2.
http://www.quokkaproject.org CMS made with Flask and MongoDB
It would be more correct to say O(log n) *integer operations* and O(log² n) space, since the size of integers is significant for exponential series.
Now we can program computers using ninja hand-spells.
That's not an answer to the question.
Maybe it's just a translation issue, but could you explain what a graduate student of control is? 
Python is what they teach my unis CS1 course in now and 2 weeks in there's kids with zero previous experience doing crazy things that frankly I don't think would be possible without Python. 
Sounds like you're adding them as strings, not numbers. I bet you need to do int() or float() (depending on your expected values) to make them into numbers before you do the arithmetic 
Control theory is a relatively new field of science. It's kinda like making algorithms or circuits to make a machine or system behave the way you want it to. In the case of a quadrotor, this means tracking a trajectory. Not a translation issue, I'm American haha.
where exactly should i place int() ?
As a meteorologist, I have to say they chose an absurdly simple data problem for which ANNs are a ridiculous tool to apply. You shouldn't just choose the popular ML algorithm *du jour* and throw it blindly at your data, expecting decent results. Any first-year meteorology student would tell you that that daily max/min temperatures are highly autocorrelated in time - especially at a site like PDX in the Pacific Northwest. Furthermore, it's very easy to predict when persistence will dominate in timeseries of such data, just by looking at the large-scale flow field over the Pacific ocean (omega block setting up? weather ain't gonna change for a week or two), or to predict when a shock will propagate through and break the autocorrelation/persistence patterns (again, looking at the flow upstream). In ten lines of code applying some basic statistical analysis, anyone could have an algorithm which consistently beats this application of ANNs. There's a good reason why [robots have never won WxChallenge...](http://wxchallenge.com/) (although I hope to change that this year!)
thanks ! it works now. 
That's a great info to reconsider the quality of the video's content. Voted up!
The program is racist and doesn't recognize white people.
No, I'm not involved in development; I've used it only briefly, for simple stuff. Previously it was a boto (https://github.com/boto) sub-project, but not long time ago they moved it to a dedicated organization and created a website.
I would personally recommend Python 3. Just make sure that the libraries you need for your project have been ported to Py3.
Install both. As many good packages and code sets are still only found in 2.7. 3.4 is good to write for the future, but it also depends on what your web development entails. As previous comments have stated it depends on what packages you are using, going to be using. Software design and milestone planning will help to decide.
Really concise!
my running result: [gif!](https://cloud.githubusercontent.com/assets/3953966/8497510/65e1673e-21b0-11e5-9dc5-a86d6cdb649f.gif)
Finding the bottom of the palm must be an interesting problem.
A day or two, but I've worked in a wide variety of languages and probably didn't learn things in the most "Pythonic" way possible.
I have to disagree with you on a few points. &gt; Having optional static typing would likely lead to better performance anyway, so optional static typing is the one thing. Not necessarily. Due to the way types work in Python, all lookups are polymorphic in nature. Knowing whether or not a value has an attribute doesn't change the way the attribute is retrieved. &gt; Functions that use optional static typing could be optimized by the interpreter, and likely release the gil more often. Type constraints have nothing to do with the GIL. The GIL exists because *the Python interpreter is not thread safe*. Attempts have been made to make it thread safe, but this resulted in a significant reduction in performance, so the proposals were rejected. Believe it or not, the GIL is an optimization. &gt; I'm really liking Haskell's type system. Instead of lists, it has something like python arrays but more flexible because they can contain any type, not just one or two byte things. Yeah Haskell's pretty cool. I've never been paid to write Haskell, though. &gt; When does one ever need the flexibility of a real python list? 99% of the time, I either I have a variable length collection of all the same type (ints, strings, functions, dictionaries), or I have a fixed length collection of variable type (Haskell's tuple). In the rare occassion where you need a python list, it should be available, but it doesn't need to be the default. Sequences and the native handling thereof are one of Python's greatest strengths. Lists work the way that they do because that's the only way that makes sense in Python. &gt; Python already has a type heirarchy, which we call duck typing. No. Incorrect. Duck Typing refers to a *lack* of type hierarchy. The idea is that, if an object appears to have all of the important components of the kind of thing you want, then it might as well be that kind of thing, for all intents and purposes. The strength is in a *lack* of hierarchy. You can still create class hierarchies in Python, but you don't *have* to. &gt; Wouldn't it be nice if we could just explicitly state the interface expected in the function definition, and be as broad or narrow as we want? I do believe that's one of the goals of the type checker being implemented for 3.5. Dunno if it's going to actually appear in 3.5, of course, but these things take time. &gt; Still, I'd really like to have a language that is Python, but with optional static typing, where the interpreter can do optimizations and type checking to notice something is off before a function is called during run time. Nobody's preventing you from making another language. The changes you want would require deep changes to the way objects work in Python. When you were done, you'd end up with something that is *not quite python anymore*. When talking about programming languages, it's really easy to get caught in the idea of "just add feature X!". The reality is that these kinds of changes have much deeper consequences than what are readily apparent. Lots of slow-thinking goes into adding features to languages, otherwise you end up with something like PHP. &gt; Should I be downvoted to hell for saying this? Probably not. Will you? I don't know. My crystal ball is in the shop.
Static types are on the road map, last I heard Python 5 should have them.
Its as close to an answer as you'll get, probably. 
This just in, every program ever in a single character 
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
No problemo! :)
&gt;&gt;Having optional static typing would likely lead to better performance anyway, so optional static typing is the one thing. &gt;Not necessarily. Due to the way types work in Python, all lookups are polymorphic in nature. Knowing whether or not a value has an attribute doesn't change the way the attribute is retrieved. Right now, but if there were static typing, the interpreter would know upon byte-code compile the details of what is happening. So in `c=a+b`, python has to loo up the function that adds them from the variables at run time. If the types of a and b were known at (byte code) compile time, the instructions would be "create a new integer from adding these two integers", rather than "access the attributes of a and b, determine if the two can be added together, loo up and use the correct function to add these two". &gt;&gt;Functions that use optional static typing could be optimized by the interpreter, and likely release the gil more often. &gt;Type constraints have nothing to do with the GIL. The GIL exists because the Python interpreter is not thread safe. Attempts have been made to make it thread safe, but this resulted in a significant reduction in performance, so the proposals were rejected. Believe it or not, the GIL is an optimization. Again, I think this probably has to do with the way all types need to be dynamic, but I admit to now knowing squat about this. But numpy, cython, etc can release the GIL because they don't touch dynamic python objects. &gt;No. Incorrect. Duck Typing refers to a lack of type hierarchy. Well, you do have an explicit heirarchy though, since all classes derive from `object` or another class. Really, pretty much everything just derives from `object`, so it's not very heirarchical. But still, python already supports type inheritance in a way and one would benefit if the compiler knew if something walked like a duck and/or quacked like a duck at compile time. &gt; When you were done, you'd end up with something that is not quite python anymore. I agree. Maybe it'd be like c++ython? 
Things are different in France.
Large matrix inversion has always been a really tricky thing for computers to handle. I would do whatever you could not to invert large matrices. For a linear system y = A x, where A is a large square matrix, you could, for a given y, use a least-squares solution to find x. The real solution is x = (A^T A)^-1 A^T y, but with a non-linear least squares solver, it wont actually muck about with the matrix inversion. 
Your first example won't select T0 though. use this: T[0-9]{1,2}
Hey, it's better than XXX in three lines and it is them calling an API.
&gt;One main consequence of this is that PyOpenCL now works on Pypy. Yay!! Another project realizing the potential of PyPy. 
Yeah... I would recommend phrasing it "Hand posture detection in 50 lines with OpenCV and NumPy". Still cool that you only have to write 50 lines, but makes it clear that there is still some magic under the hood.
[%paste](http://stackoverflow.com/a/10886947) will change your life for live development/testing
Okay I'd like to make a conjecture at this. The `upper/lower_skin` numbers are essentially typical pixel range values for human skin. Once the program captures an image, it masks off the non-skin parts, and then kind of detects the movements of the skin parts by (creating and) learning the movement patterns (i.e. the contours). Then it essentially draws an area on the display around those contours. The contours are modified per capture so it makes sense. OP's gif demo showcases this very well: there is an RGB-value difference between his hand and the background, and he moves his hand relatively slowly (slower than the capture rate + contour calculations I assume). It's cool as hell though. All of it is: OP, OpenCV and Python.
RC has context. There is generally no need to copy the task description in examples - it is there at the head of the page. Obfuscating function names doesn't help either.
Shameless plug. I created PythonTurtle: http://pythonturtle.org/ This is *not* the built-in Python module, but a standalone program that's made to be easier to install for newbies. It functions basically the same way as the built-in turtle module, except it has help screens with demonstrations of drawings you can make with it, and the turtle actually looks like a turtle. (Which makes a big difference when your user base is largely children :)
Rather than ask for something, it's usually easier to emphatically state that your task cannot be done easily in python. Then someone will take the bait and post a working program. This follows the same logic that on the internet it's often easier to get the right answer to question by posting an incorrect answer than it would be to outright ask the question. Good luck. Also, /u/dddomodossola method is similar in logic. 
There is to "get" and to GET. In a few days you can be productive in Python. In a few months you can be at ease with Python. Like everything, though, it takes a few years to truly embrace the Python way of thinking. Espacially, there is a big "ah ah" moment when you realize iteration is everything in Python, and you coding style change dramatically. You start using generators more, all, any, iter()/next() with a sentinel value, itertools, Counter and defaultdict comprehension lists, key functions, etc. Then you make peace with OO and functional programming, and you find balance. Phases in Python : - I can code stuff and it works. I'm the best. - I know about the python ecosystem (pip, virtualenv, pdb...). I'm so the best. - I know OOP and use it everywhere. I'm the boss. - Doh, I can replace most classes by ordinary data structures. Ok, I know better now. - Wait, iteration is everywhere ! - I overuse generators untill pdb bleeds. - I learn a bit about functional programming, fluent API and object compositions. - Code is way simpler now. Datastructures are used at their most, classes are used to polish API, function are not considered toys anymore, data is streamlined to be iterated easily. Debuggability matters. Readbility matters. I'm not the best, but my code feels good. 
ok, googling I found this: http://stackoverflow.com/questions/29188833/how-to-add-to-vlc-playlist-queue-using-python-subprocess You have no control on the fade-in fade-out... but works. Ok now, can you show an example of input you expect to type?
One day I will have a system where, instead of typing `sudo`, I bow to the computer to have it execute a command as root.
First you save the word REST for your resume. Basically the easiest way is to just set up a web server running some kind of ability to respond to posts and gets. PHP or Python and Flask would be two great examples. So let's say you have an app that wants to know a given element from a database on the server (in this simple example we are asking for 3rd element). So you send it this JSON: { "index": "3" } Then you would have a PHP script at the other end that would do something like: &lt;?PHP $data=json_decode($some_string_with_your_incoming_json); $some_string=GetSomethingFromDatabase($data-&gt;index); //Now let's build an associative array to hold the outgoing data $out_array['SOMETHING']=$some_string; $out_array['HELLO']='There'; $out_json=json_encode($out_array); echo $out_json; ?&gt; Which should then instantly return to your app something like: { "SOMETHING": "Whatever the database pooped out.", "HELLO":"There" } Which your app should be able to process. Obviously the above code would need a pile of data checking, error, and exception handling. If your data is very simple you can even skip the JSON. Let's say you had an app (pretty stupid) that would give you the population for any given city. You could have a POST with the city code and the server could just spit out the population as a number. But the beauty is that most JSON libraries are getting very fast, plus JSON when pretty printed is usually easy on the eyes for debugging. But a huge benefit of JSON when it comes to an app is that if you release a new version of the app it is possible to add new fields to the JSON which previous versions of an app can ignore. Thus some changes to your data output won't break your app. 
^pssst. ^julia.
What is the problem? Sounds like you just need to split the input on space, lookup each word in a dict and play the sound. Which part of that don't you know how to do?
How about adding some extra lines with comments? Not trying to be a dick (not too much, anyway), but it would make it easier to understand what's going on and learn from your hard work. 
You might find Guido's talk on Type Hints from PyCon 2015 somewhat interesting: https://www.youtube.com/watch?v=2wDvzy6Hgxg 
The chapter is called "Basic Datastructures" (sic) but you talk about things like int. int is not a data structure, it's a type. You say you have a chapter coming on functions, but you present functions here. You describe a definition of list as a list of c like pointers. That's going to be meaningless to a non-C programmer. This first chapter feels very unwieldy to me. There is just so much unrelated stuff. You tell me about int and long. You teach operators. You tell me about regular expressions. You talk about all kinds of built in methods. You talk about the various data structures of Python, and the stuff implemented in collections. There's stuff about file IO. You touch on modules and importing. It's pretty arbitrary, IMO. I think the content itself is good, but the organization really needs a re-think. I think in general you haven't fully identified your audience. That's okay, that's what drafts are for. Some things you spell out in great detail, in other places you blithely assume a lot of prior experience. Part of writing is keeping a mental model in your head of your readers. What do they know when they open the book, what do they know as they progress, and so on. The English grammar needs work. Let's take the first paragraph. "One of the fundamental things in programming we do is modelling of problems to constructs computers can understand and work with. One of the things that makes python so much fun, and productive, is availablity of rich datastructures that makes modelling part really easy. In this chapter we will go through some of them" 'things in programming we do' is awkward. 'things we do in programming' is idiomatic. 'modelling of problems to constructs' is confusing wording. What does 'model to constructs' mean? Oh, I know what you are trying to say. We use data structures as a way to store information about the world. 'Modelling' doesn't feel like the right word here. 'constructs' certainly isn't. What is a 'rich' data structure? Feature rich? Powerful yet succinct? Your audience is experienced programmers, correct? Use precise words. Next, I'm having trouble parsing 'understand and work with'. Are there things a computer can understand but not work with, or not understand but work with? Are you saying the same thing twice, or are you trying to distinguish two different things? Again, I probably know what you mean, but imprecise language opens all kinds of questions in the mind of the reader. You want them thinking about what you are saying, not wondering about your language. "fun, and productive," commas are not needed here. "python" - should be capitalized "is [the] availability" (my edits inside []) "data[ ]structures" "makes [the] modelling " " In this chapter we will go through some of them" That's awkward. What does 'go through' mean? 'some'? ----- I know it's early going, copy editing and such will fix a lot of the stuff I mentioned. But what is the purpose of this exactly? I'm not saying it has no purpose, but the purpose will guide the development and exposition. In contrast, look at the official Python tutorial. https://docs.python.org/2/tutorial/index.html It does a good job of starting with basics, naming things correctly (ints are not data structures), and building on previous knowledge. In contrast, your second paragraph has something about JSON that is probably pretty opaque to somebody that doesn't know JSON and Python or Javascript already. On page 11 to write to a file, on page 21 you kind of explain writing to a file. So, the Python tutorial already exists, no sense in duplicating that. So what are you offering me instead? Who is your audience? What is their skill set? Your text gives me the sense (not surety) that you haven't fully answered that yet. I think most of the paragraphs looked at in isolation, and assuming a good copy editor contains good material, it is just the organization feels very willy-nilly, and skill of the audience required to read that section varies wildly. 
I probably should've mentioned this before but I am trying to create a client-server instant messenger using the python socket module, not a web server.
Guys I wrote an entire language that has only one command: [Zombo.com](http://www.zombo.com/) It runs the world, everything about it. You can do anything at Zombo.com. The only limit is yourself. 
Even though you are completely right, LS is not the only way to find the solution (this is merely an addendum): you can do this kind of "exact" calculation in Python using numpy.linalg.solve. Generally speaking, you can alst always avoid direct inverse calculation. 
take a look at Go, it might be what you want. Yes, except the braces .
If you want static typing, then use a language with static typing. Maybe somebody should write a static type python. I googled optional static typing and the top 3 results are about python. Learn more than one language and use the one that fits your need. 
Your post makes no sense. C++ does not allow you to expose a C API. If the API is written in C++ (which is what OpenCL is moving to being 100%) any C interface is pointless unless you wrap the C++ with C. You are much better off writing a C++ interface, since it can do both. Also, if you are worried about "acceleration" you should be using Cython not PyPy (JIT v highly optimized C/C++ code, never used PyPy though and Cython does require quite a bit of initial effort to get all the pxd/pyx/hpp to play nice together with large C++ libraries). At the end of the day, C is essentially FORTRAN at this point. If you cant interface with C++ you are hosed for the future.
Nit: The extra lines on 9, 34 and 36 would be better served separating the functions for a little readability. 
I just made a two line version where I import this code. 
I still haven't gotten it. :(
When 3.5 comes out in September it'll include mypy as an official type annotation system.
&gt; Believe it or not, the GIL is an optimization. That's a really really *really* charitable way of putting it.
You are amazing. Seriously you are a gift to the world.Thank you. So far my code has gotten me to the point where I am able to print all factors on a separate line with the loop. However, these factors are coming in ascending order (so for input 10 I'll get 1, 2, 5, 10) rather than being printed in pairs. Is there a way to have 2 and 5 printed together, 10 and 1 together, etc? 
50OFF4FB - gives you 50% off on Real Python too, well worth it and has some pretty good web development stuff too.
OK JUST KIDDING BECAUSE I FIGURED IT OUT! Thanks to your advice my lil brain was able to progress up to the point where I figured it out. You're the best!
Actually the book The Object Oriented Thought Process was what helped me. Then I visited the chapters in Learning Python about objects.
Not really. Not if you consider the tradeoffs that were considered at the time the choice was made. The GIL provides an optimization for what, at the time, was considered the most important performance metric: single core performance. Python was, first and foremost, a scripting language. 99% of the software written in it was single-threaded, so python was optimized for that software. This may no longer be the case, but changing python to accommodate a completely new application paradigm is no small feat. The single-threaded nature of Python is in it down to its DNA. Removing the GIL would not only hamper the performance of the interpreter, but it would cause a whole host of problems that are very difficult to predict. I personally think that we should get off the whole "multi-threaded python" bandwagon anyway. Remove the GIL. Remove threading while you're at it. I don't think that this is a problem Python will ever be good at solving. Better to focus on its strengths.
&gt; I just followed a recent post in the sub to an article about the Next Big Language. Er, the link you post is over *eight years old*. How does that make it "recent"? I think a better question is not "Why doesn't Python have static typing?", but "were Steve Yegge's predictions for the Next Big Language correct?" It's 2015, and Steve Yegge's Next Big Language still hasn't appeared. People are still using Java, Javascript, C/C++, C#, Python, PHP, Ruby, and a few others. There is [no consensus on the order of popularity](http://import-that.dreamwidth.org/1388.html), it completely depends on how you measure it. The one thing we can be sure about is that Python is one of the top ten most popular, widely-used, and influential languages in use today. I don't think the premise of the blog post is correct. I don't think there has ever been a time where computing has been dominated by a single Big Language, and I don't think that it ever will be. There's no sign that Yegge's prediction of the "Next Big Language" (which he refused to mention by name) has taken over. I think that the real message of Yegge's post is that technical excellence and aesthetic beauty of a language have *very little* to do with whether it becomes popular or not.
Please explain.
Almost. It will include the `typing` module, but no type checker. If you want to actually do type checking, you will need a third-party checker, like mypy.
There's another version of this, which uses face detection to extract color feature of your face skin, then apply to hand detection :)
After six months I understood quite well the basics of the features python offers. Loops, magic methods, generators versus iterators, some of the stuff that goes on under the hood. But I couldn't read other people's code and hated having to do it (I mean, I'd still rather write code than read it, but I feel confident in my ability to do so). There were also a lot of missing spots in my knowledge. I didn't quite understand algorithms, I didn't understand computer science and math well enough to be able to pick up any book on a subject that interested me and understand it without feeling hopeless, and I had a difficulty understanding when and when not to use classes (and the best way to do so). I began to learn more about functional programming at this point, too. After a year, I felt overwhelmed by projects that were between 200 and 500 lines of code. But it wasn't because of the language, it was because of my mind. It was a second learning experience, but one in which the concepts I had to learn wasn't as clear cut as the concepts of the language (what's a loop, what's recursion, what's a magic method). There was maybe a second wall when it came to 500 - 1000 line programs. I discovered proper debugging tools too late, I think. In many ways I had to force myself to relearn things that I'd taken advantage of. Really read through documentation and such even if I feel like I know 75% of it. But now I can see a lot of the theory and stuff that I learned sink in on a meaningful level. Like, there's a bridge between theory and practice where they've become one. Two years since I started, I'm working on a few projects to showcase on github to help me land a job. But I still feel overwhelmed sometimes. I started a project recently that made me realize I basically had to implement a minicompiler. And I didn't know anything about compilers, so I spent a few months learning about it and there was just so much I didn't know, about nondeterministic finite automata and lexing versus parsing that I still feel like I don't really get programming. But I guess that's a step forward. It's not about Python anymore. I know Python. I'm learning programming.
Good article. Wish you would mention functools.partial though, your post sounds like it's offering a best practice.
You have strings where you want numbers. Try casting age to make it a real number. In this case an integer. Also leave the str() off the 1. ... age = int(input('What is your age?')) ... print(age + 1) You were just "adding" two strings together. "5" + "1" which is "51" vs 5+1 = 6
A few months to get it to where I could make it do what I wanted in a somewhat complex project (import/export script for Blender to handle a binary 3D model file format for an old video game - including reading and building BSP trees for the model geometry). The code wasn't optimal - it was really kludgey and poorly written, but it worked. A few years of on-and-off practice later (my "day job" is as a hotel night auditor, programming is a hobby for me), and I can read and understand code well enough to internalize a medium-size package - to the point of being able to tell whether some extension of the package's functionality is possible or why it's not possible - after really working with it for a few days. (In that case, it was 1. porting [ircutils](https://pypi.python.org/pypi/ircutils) to Python 3, 2. figuring out what objects and methods needed to be extended/overridden to allow connections to multiple IRC servers in one Client instance (decided it would be too much trouble), and 3. determining how to replace `asyncore.loop()` to add stuff for the client to do after every iteration of the loop, regardless of whether there are data for sending or receiving.)
Yesterday night, I was building this (https://github.com/isman7/tgbot) and just after going sleep I realize that you had started something similar! I will check your code, and eventually help. if I'm able to. 
Exactly! If you need static types choose a suitable language. Let's not ruin Python to try to turn it into something it isn't. 
I'd be happy to have some help into making the project better! Thanks!
Python 3.5.0 is scheduled for September 2015. VS 2015 should be sooner. So Q4 2015 or Q1 2016.
This makes the type system inconsistent! :)
 &gt;&gt;&gt; type("that ten times fast! :D", (), {}) &lt;class '__main__.that ten times fast! :D'&gt; &gt;&gt;&gt; type(type("that ten times fast! :D", (), {})) &lt;type 'type'&gt; &gt;&gt;&gt; type(type(type("that ten times fast! :D", (), {}))) &lt;type 'type'&gt; &gt;&gt;&gt; type(type(type(type("that ten times fast! :D", (), {})))) &lt;type 'type'&gt;
 &gt;&gt;&gt; type is type(type) True
Yo dawg...
[o_o](https://www.youtube.com/watch?v=HP8sofAN4xc)
I agree from an intuitive point, but could you elaborate? Is the type system inconsistent because of a recursive definition?
Or you know... you can use a loop. Programming is kind of a dick to typing come to think of it.
this one makes me the most uncomfortable.
wow I can't believe it actually works
Because there is no way to start at the 'base' within Python.
If you want to use metaclasses, you gotta know this stuff.
How does one get started writing programs like this? I should look into pattern matching, image recognition, computer vision etc? And also any beginner* friendly books/tutorials in Python? ^(*beginner to the concepts, not to Python)
If type had a type, and that type were consistent with the rest of python by being an object, what would that object's type be?
It was mostly meant as a joke. It is inconsistent in the sense that every type has a program which satisfies that type. This is normally not a problem in a programming language. In proof assistants such as coq or agda, you formulate propositions as types, and if you can write a program with that type you have a proof of that proposition. These languages are also dependently typed (I guess in order for the type system to correspond to an interesting logic? I don't really know that much about this), so types are also expressions which themselves have types. For example the type of `0` is `nat` and the type of `nat` is `Set` and the type of `Set` is `Type` in coq. In these languages you care about inconsistencies in the type system, because that means inconsistencies in the logic. If every type has a program, then every statement has a proof. That is no good. So you have a hierarchy of `Type` types, so that the type of `Type` is `Type_1` and the type f `Type_n` is `Type_n+1` in general. It is a bit like Russel's paradox in set theory. If you do things the naive way you end up with an inconsistency. (i.e. you can prove *all* statements). Of course this is moot in Python because python doesn't even have types in that sense.
You can just start from [OpenCV](http://opencv.org/), it covers almost all these topics. For python beginner, I recommend [Dive Into Python](http://www.diveintopython3.net/) or my project for python beginner [python3-in-one-pic](https://github.com/coodict/python3-in-one-pic) :) Oops, beginner to concepts of Python+OpenCV, check out this [OpenCV-Python Tutorials](https://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_tutorials.html)
This is part of a online course. You can find it here: https://www.edx.org/course/scalable-machine-learning-uc-berkeleyx-cs190-1x https://www.edx.org/course/introduction-big-data-apache-spark-uc-berkeleyx-cs100-1x
This is less confusing in Python 3: &gt; print(type(type)) &lt;class 'type'&gt;
This one is the only thing about this whole system which is not pretty. The fact that the root type and the function to get the type both are under the same keyword. I believe Guido has complained about that in a keynote once. It's a bit unfortunate because you can use it as a metaclass instantiator or as a function and it can get confusing. 
It is ten times slower without the GIL because they removed the GIL without actually fixing the underlying problem cpython has that made the developers put the GIL there in the first place. They removed the GIL and put an *even less* efficient mechanism in its place. If you actually broke API compatibility and removed the shortcomings of the CPython C API that lead to the GIL in the first place, CPython would become faster. So that's like having a diesel car that is capped to drive no faster than 80km/h, and then saying it's an eco-feature that helps environmental friendliness, when everybody else is producing electric cars.
One I've heard of is tkinter. May or may not be useful to you, at least it's something to search. 
Cool! That's really soon. Thank you, I'm looking forward to it.
Type?
Yo dawg. 
Let me start by saying that this is a post for /r/learnpython, but I'll be happy to help either way. It's probably best to start with some tutorial and work from that. I have to say python syntax is very easy to learn compared to C++ and shouldn't take you very long, but getting used to the spectrum of libraries is the part that takes forever (because new modules are coming out relatively frequently and old modules are being updated) **Resources:** - http://learnpythonthehardway.org/book/
Posts asking for help like this really belong in /r/learnpython. I'd recommend re-posting this there to get better results. Anyway, I'd recommend taking a look at the [official Python tutorial](https://docs.python.org/3/tutorial/index.html) to start with, if you haven't. Once you have the basics down, try taking a look at [Kivy](http://kivy.org/) for building user interfaces and simple 2D games (bonus: they'll work on both Windows/Mac/Linux and Android!).
`object` and `type` *are* the base. They're implemented in C. 
PyQt or PySide, depends if commercial or not. I used pythoninstaller and it runs from exe without problems.
sorry, I totally forgot that /r/python is not /r/learnpython since I really stopped learning programming last april when I got stuck in the problem. sorry! the python documentation is too hard for me to understand, I really can't comprehend it honestly. I already tried a lot of python books including LPTHW and the other books listed in the github, but the more I try to read books, the more I get confused. I already researched Kivy a while a go, and I'll give it a shot after I finish with codeacademy. Thank you!
The more I stare at the word "type", the weirder the spelling looks...
It's called Girard's paradox iirc.
&gt; But PyPy was designed differently It was actually not designed differently, that's why it still needs the GIL. It's C API wants to be compatible with CPythons. So PyPy inherits all the mess of unsafe global variables CPython has in its C API. The same issue applies to e.g. stacklesspython. &gt; PyPy is about ten times faster than CPython I don't see how that's relevant. All it proves is that CPython is slow in more than one way. Complete strawman. &gt; IronPython and Jython were also designed differently, and they don't have a GIL, but neither is significantly faster than CPython. Yes, these actually were designed differently. But again, that they are faster or slower than CPython (I don't know which is the case) is not really relevant. It only really makes sense to compare CPython to CPython, pypy to pypy etc. Also, if your benchmarks do not include threading, it's not particularly surprising that IronPython/Jython would not end up being faster. Add 8-way threading to the benchmark on an 8-core machine, and you will see that IronPython/Jython will be 8x faster than CPython (or even faster than that, because CPython can sometimes experience a slowdown when threads are used.) &gt; maybe it's not as easy and straightforward as you think. I know exactly why it's not easy and straightforward... but do you? Hint: The reason has nothing to do with writing code, threading or maintainability. Also, if you re-read all my posts, you will see that I have nowhere claimed that it's easy or straightforward. You're just making a poor attempt at putting words in my mouth.
Everybody's having fun with this, but honestly, why isn't the type of type a function? It feels like it really ought to. I mean class Foo(type): pass foo = Foo() Raises a TypeError, but anything else of &lt;type "type"&gt; like ints or strings doesn't. 
I think Python is better, your pay is going to be based on what you're using the language for, but either one will get you stable jobs, so pick one and go.
&gt; If type had a type It does have a type. The type of "type" is "type". That type is represented by an object. The type of the object is also "type." "type" is also the constructor for the objects that represent classes, which is the basis for metaclassing in Python.
What is "POO"? It's ungooglable
I Think It's "Python Object Orientation" buuuut, i'm a beginner so what do i know? 
Relevent Haiku: type of type is type but type of type of something is still just a type
=(
Ah that makes sense
This goes for all cool language features.
Until you reach turtles.
Actually this is very Haskell, if you read the Not Available object as `Nothing` then SlopPy is basically the `Maybe` monad.
Wouldn't it be better, in the short as well as in the long run, to catch/pass errors and scripts explicitely (which is already something no one should do if one wants to trust their results)? Having a whole sloppy and out of date interpretor doing that by default does not seem a very good idea. At least with the Maybe monad, one CAN handle errors (in fact has to), here it's not possible.
If you want more money, jump onto Scala. I hate that language but man if it isn't popular and flexible. 
You can do it by solving MX = 1 with M your original matrix, 1 a square unity matrix and X, the inverse. But this is inefficient and dumb to calculate it this way. What I was saying is that USUALLY (i.e. in MOST of the cases), calculating the inverse is just a step in your whole calculation. In other words, USUALLY people want to calculate the inverse to use it in other calculations. If that's the case, I'm saying that you should AVOID explicit inverse calculation because this is not efficient and error-prone. Instead you should reformulate your problem to use other tools as numpy.linalg.solve. In the unlikely case that you need the inverse per se because this is the ultimate result of your calculation, then you should calculate the condition number of your matrix to know whether this inverse would be "exact" or not. If your matrix is ill-conditionned, there is mathematically no way to be sure that the inverse you obtained is sound and "true". But as I said, fortunately, actual matrix inversion is seldom needed: you should find other ways to go through the calculation. Most of the time, solving things directly (instead of inverting) is enough.
Here's what I consider to be the difference: in one case you are modeling the physics and in the other case you are modeling the effects. This is a hairy but important difference. In older baseball video games a simple lookup table might be used to determine where a pop fly would land. On this level the simulation doesn't provide the analyst any new information. A newer game that say incorporates a model of the effects of air resistance (vs say density,humidity etc) and a model of the effect of gravity (vs say elevation) allows an analyst to gain insight to what effect playing in Denver has on hitting home runs. Simulations are all about knowing what level you need to resolve the physics and at what level it is ok to use an unresolved model.
Yep &gt;&gt;&gt; class Turtle(object): ... pass ... &gt;&gt;&gt; type(Turtle) &lt;class 'type'&gt; 
If you want we can skype and I'll try and explain it to you :3 Otherwise... codeacademy is good ~ It doesn't explain the library aspects at all, it only touches on OOP and worst of all it teaches Python 2.7 ~ which means you'll end up with a bunch of Python 2.7 habits. I'd say it's a good resource for first-time programmers.
The word type is just starting to look weird now
Even then: &gt;&gt;&gt; import turtle &gt;&gt;&gt; type(turtle.Turtle) &lt;type 'type'&gt;
Does anyone have a repo that converts all exception messages to *Arrested Development* quotes?
Every one of the missing letters in OP's post is a vowel. All the typos are vowels. How odd.
Pretty sure types are just inherited from a type superclass
One of the early lessons that you learn as a parent is that no matter how unique a name you think up for your child, there's going to be four other kids in daycare with the same name.
It goes much further than that. type is the metaclass of all objects in python. You can use type to figure out the type of an object, but you can also use type to create a new class. :D
[Pynsist](http://pynsist.readthedocs.org/en/latest/) is a tool I made for building Windows installers for Python GUI apps. There are examples in the repo for the major GUI packages. From the requirements you described, I think Qt sounds like the best choice. There are two main sets of bindings: - PyQt is more actively developed, but it's only free for open-source applications (or internal ones you don't distribute). If you want to distribute a proprietary application with PyQt, you need to pay for a commercial license. - PySide is free even to use in proprietary applications, but its development isn't so active.
Start with the tutorial itself: https://docs.python.org/2/tutorial/index.html Then you can look at the Standard library and Python Module of the Week http://pymotw.com/2/ , which describes the STL with simple examples.
Thank you :)
 for i in range(10): print(type("*that*"))
I was asked this in an interview once.
POO is OOP in french. I mix them up all the time :)
Exactly. Dict + List + (named)Tuples cover many, many use case. Espacially for classes that do mostly aggregation of data, with very few processing. You can store functions in data structures, and functions as attribute of function, and return functions from functions you generate on the fly. And you can pass all that around. And you got decorators, and context managers, and iterators, and generators... Plus, Python has crazily powerful datastructures in the stdlib (deque, heapq, sets, OrderedDict...) and even simple ones are incredible. Check the counter : import os import pathlib def get_extensions(path): for dirpath, dirnames, files in os.walk(path): for name in files: ext = pathlib.Path(name).suffix if ext: # yield ext Counter(get_extensions('/etc')).most_common(9) # Out : # ('.conf', 632), # ('.0', 348), # ('.gz', 323), # ('.jhansonxi', 207), # ('.pem', 177), # ('.load', 127), # ('.ttb', 86), # ('.ktb', 80), # ('.kti', 55)] Not to mention libs like SortedContainer or HyperLogLog that gives you even more data strutures in case you were feeling underpowered. Hand made classes are great, but they are often overused. I now only make my own classes when : - I want a very specific API and I know classes will let me pack a beautiful one. - I have many operations related to a common state. - I need a namespace for code organisation. - I want my lib user to have the hability to use custom objects while following a strict API. It seems a lot of use cases, but in reality, it's mostly part of lib code, but it's not often needed for day to day plumbing usage code.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Turtles all the way down**](https://en.wikipedia.org/wiki/Turtles%20all%20the%20way%20down): [](#sfw) --- &gt; &gt;"__Turtles all the way down__" is a jocular expression of the [infinite regress](https://en.wikipedia.org/wiki/Infinite_regress) problem in [cosmology](https://en.wikipedia.org/wiki/Cosmology) posed by the "[unmoved mover](https://en.wikipedia.org/wiki/Unmoved_mover)" paradox. The metaphor in the anecdote represents a popular notion of the myth that Earth is actually [flat](https://en.wikipedia.org/wiki/Flat_earth) and is supported on the back of a [World Turtle](https://en.wikipedia.org/wiki/World_Turtle), which itself is propped up by a chain of larger and larger turtles. Questioning what the final turtle might be standing on, the anecdote humorously concludes that it is "turtles all the way down". &gt;The phrase has been commonly known since at least the early 20th century. A comparable metaphor describing the circular cause and consequence for the same problem is the "[chicken and egg problem](https://en.wikipedia.org/wiki/Chicken_and_egg_problem)". The same problem in [epistemology](https://en.wikipedia.org/wiki/Epistemology) is known as the [Münchhausen trilemma](https://en.wikipedia.org/wiki/M%C3%BCnchhausen_trilemma). &gt;==== &gt;[**Image**](https://i.imgur.com/hVb307X.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:River_terrapin.jpg) - *The humorous anecdote holds that the world is carried by a chain of increasingly large turtles, and beneath each one is yet another: it is "turtles all the way down".* --- ^Relevant: [^Turtles ^All ^the ^Way ^Down](https://en.wikipedia.org/wiki/Turtles_All_the_Way_Down) ^| [^Hannah ^Britten](https://en.wikipedia.org/wiki/Hannah_Britten) ^| [^Rex ^Britten](https://en.wikipedia.org/wiki/Rex_Britten) ^| [^Ad ^infinitum](https://en.wikipedia.org/wiki/Ad_infinitum) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cssc62n) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cssc62n)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
What's wrong with the built-in `turtle.Turtle`?
I don't really have a fast connection but thank you! (&lt;512 kbps). Are there any other good sites like codeacademy that offers 3.x??
Well, what is the site returning?
=(
Try doing it from chrome but before you click submit, right click on the page, inspect element, network. Then go ahead and click the submit button. Then look for the POST request in the network results. Click on that to view the request headers including the submitted form data, which you can use as a template to provide your credentials in a dictionary object. Good luck!
It sounds *way* more complicated than it actually is.
That is referring to the old saying "It's turtles all the way down". Was I suppose to know what your link is?
Thanks. The response I'm getting now says "This system requires the use of HTTP cookies to verify authorization information. Our system has detected that your browser has disabled HTTP cookies, or does not support them. Please refer to the Help page in your browser for more information on how to correctly configure your browser for use with this system." I just tried creating POST request using request.Session() but I'm still getting the same response. Any ideas?
TIL 
You'd be best off starting with the [tutorial](https://docs.python.org/3/tutorial/index.html) The language reference may be worth reading if you want more details about something, or are a bit confused about what something does, but is generally better suited as a reference, rather than a tutorial. Reading it through would do no harm, but it's probably better approached after you're somewhat familiar with the things it's talking about. The same for the library reference, except moreso. Take a look at what modules are there so you know what's available to you, but generally you'll want to look up things as you need them, rather than attempt to read it though. There are maybe a few core modules that you'll probably want to familiarise yourself as you get more experienced, but many of these are for specific purposes that you'll only need to care about if you're doing something in that area. You can pretty much ignore the Extending and Embedding and Python/C API reference entirely unless you're planning on writing C modules, or embedding python in another program, rather than just writing python programs. if you don't already know you'll need these, you almost certainly don't.
Can you point to an article you read?
Whoa. Mind blown. Much more core Python, I have to learn.
1010 bits /u/changetip
1010 bits /u/changetip
/u/IronManMark20, Cynofield wants to send you a Bitcoin tip for 1010 bits ($0.26). Follow me to **[collect it](https://www.changetip.com/collect/867966).** -- [^^what ^^is ^^ChangeTip?](https://www.reddit.com/r/changetip/wiki/tipping-on-reddit)
1010 bits /u/changetip
TIL
[Jamais vu](https://en.wikipedia.org/wiki/Jamais_vu)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Jamais vu**](https://en.wikipedia.org/wiki/Jamais%20vu): [](#sfw) --- &gt; &gt;In [psychology](https://en.wikipedia.org/wiki/Psychology), ___jamais vu___ (/ˈʒɑːmeɪ ˈvuː/; from [French](https://en.wikipedia.org/wiki/French_language), meaning "never seen") is the [phenomenon](https://en.wikipedia.org/wiki/Phenomenon) of experiencing a situation that one recognizes in some fashion, but that nonetheless seems very unfamiliar. &gt;Often described as the opposite of *[déjà vu](https://en.wikipedia.org/wiki/D%C3%A9j%C3%A0_vu)*, *jamais vu* involves a sense of eeriness and the observer's impression of seeing the situation for the first time, despite rationally knowing that he or she has been in the situation before. *Jamais vu* is sometimes associated with certain types of [aphasia](https://en.wikipedia.org/wiki/Aphasia), [amnesia](https://en.wikipedia.org/wiki/Amnesia), and [epilepsy](https://en.wikipedia.org/wiki/Epilepsy). &gt;*Jamais vu* is most commonly experienced when a person momentarily does not recognise a word or, less commonly, a person or place, that she or he knows. This can be achieved by anyone by repeatedly writing [or saying a specific word out loud](https://en.wikipedia.org/wiki/Semantic_satiation). After a few seconds one will often, despite knowing that it is a real word, feel as if "there's no way it is an actual word". &gt; --- ^Relevant: [^Mondo ^and ^Other ^Stories](https://en.wikipedia.org/wiki/Mondo_and_Other_Stories) ^| [^Déjà ^vu](https://en.wikipedia.org/wiki/D%C3%A9j%C3%A0_vu) ^| [^1994 ^Laurence ^Olivier ^Awards](https://en.wikipedia.org/wiki/1994_Laurence_Olivier_Awards) ^| [^Albert ^Lamorisse](https://en.wikipedia.org/wiki/Albert_Lamorisse) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cssk97e) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cssk97e)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
 gentleman you are so grateful am I sir I thank you for this
mod of /r/gatech here: 1. the correct answer for this class of problems is to use [selenium](http://www.seleniumhq.org/projects/webdriver/). 2. gt will revoke your ability to register for classes online if they catch you, and they're pretty good at catching bots. 3. the OSCAR API is one of the worst things in the universe, just do it by hand
What does `type` even mean anymore??? `type` is not a word!
I wasn't disagreeing with you, I was making a comment :-)
Well, I'm pretty sure we could still talk via skype ~ I find verbal explanation easier than typed ones. Anyways, I have to say I haven't found any interactive 3.x Python tutorials lately, but please do tell me if you manage to find one.. I would suggest using codeacademy and just remember that in python 3.x print is a function not a keyword i.e. you can't do this: print "some words" but you now have to do this: print("some words")
It is bad practice to put a private environment variable in `/etc/environment`. Better put it in `~/.profile` or, if using bash, `~/.bash_profile`.
this is actually a bit frightening. thanks for the heads up.
Thanks for the suggestion! I'll check these out.
that's my trigger, asshole
If you want to do only Web, Ruby or Python are both fine : equivalent in features and tools. The benefit of Python will mainly be if you want to do something more than just Web. The Python ecosystem is way more diverse than the ruby one.
So brave
Why the hell would you need this? Between the editors that hold your hand, and the bazillion lints out there, surely you can handle an error in your logic? FFS. here's an idea: python -m pdb YourShityScript.py Is that too much to ask? If so, then maybe you need iPython? God, I miss the days of real programming.
*pylint* is a great tool for lintering but it can easily become a pain in the ass if you try to run it on Travis-CI for your project. A score of 7.9 out of 10 is not bad but pylint fails the build on that. Congratulations that you are maintaining 9.76 IMHO, you should use customized pylint. landscape.io does that for you. You can set up the hook on it. Hope that helps a bit.
Oh! Thanks! Will make that change in the next update! :) 
I was searching all this while for a **modified version of pylint**. Thanks for pointing it out! :)
Your welcome. By the way, great work over GitHub.
Thanks @theorko ! 
Check out Marshmallow. It's a data (de)serialization library. It's ORM and Framework independent. I highly recommend it because it's robust and extensible. 
Deutsch? 
I have to agree with learning Scala, because it's a great introduction to learning functional style programming without all the academic dressing of something like Haskell. I've also heard good things about F# and OCaml, both of which merge oop and fp stylings as well. Not sure about the pay, though. 
One of the things that jumps out at me is assigning the GITHUB_API and API_TOKEN at the top of each file. API_TOKEN doesn't even seem to be used in mains.py. These should be specified in one location. Specifying the API URL in two locations leaves the potability of forgetting to update it in one location if it changes. Your comments are not indented with the code they are commenting. This makes it a bit hard to skim through the code.
Unexpected errors are easily caught with try/except blocks. On the other side, if your calculation/program can go on with such a NA, that means that the particular part which raised the exception is not needed or that the script should be split. If you just don't like your script to fail because one print statement could fail, you can put it in a try/except:pass statement. It's not that long, you can use latest versions of python, its as sloppy as you want it to be but only in parts that needs it. 
These are the two that I used. http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/ https://jakevdp.github.io/blog/2012/12/01/a-primer-on-python-metaclasses/
problem with time.sleep is that it is blocking.
By running SlopPy one is explicitly accepting SlopPy semantics. SlopPy and using try/except blocks are not the same thing. The exact purpose is to enable the programmer to *not* have to code defensively, allowing faster iteration of data exploration scripts while keeping the error handling code to a minimum. I don't think you are arguing to convince, but to prove your own correctness. I am explaining what SlopPy does, you are telling me how to behave.
If you don't want to use set_timer, you can make a stack or queue of recently deceased creatures and on every "tick" of the game, take a peek at the queue and see if the first npc in the stack is ready to be respawned. Asside from that. /r/learnpython maybe a better sub for questions like this.
Hey dude, helped you in getting the pep8 right. Just a small thing, your git commits. You have the same commits twice, you would like to clear that up. Learn about squashing and not repeating your commits. Great work, I will probably contribute more to it :)
If you're using Requests and Session() isn't working, you can log into the page manually from your browser and copy the cookies from the site. Then pass the cookies as a dict of kv pairs with the request. Check out the cookies section toward the bottom of the page [here](http://docs.python-requests.org/en/latest/user/quickstart/).
Did you do a GET request of https://oscar.gatech.edu/pls/bprod/twbkwbis.P_WWWLogin followed by a POST? (With the same session instance.) Fairly confident that will pull over the cookies you need into the session instance.
 def main(): """main function""" That comment is redundant.
matplotlib is not good for dynamic charts. Javascript is the way to go there. my two cents.
dunno if you've used pygame, but if so, have any thoughts of comparison? I've only ever tried pygame, but heard pyglet was more modern feeling but with more stunted development.
Really glad you've been able to put the advice here to good work! The first thing I did was head over to look at your unit tests... but alas, there were none :-( Many would argue that software without tests is broken by definition. Edit: typo
Pynsist only does installers, not relocatable builds. There are other tools - like cx_Freeze and PyInstaller - that can do relocatable builds. But in my experience, it's often fiddly to get those tools to work.
The syntax error in `1 + not 1` is because it is being parsed as ``` (1 + not ) 1 ``` While `1 + not` is not any keyword operator. Hence the error
They're called unexpected errors for a reason. If you don't expect something to get messed up half way through, you're probably not going to remember to write a try/catch block. In the demo video, he expected the log file format to be consistent, but half way through discovers that's not the case. I wouldn't necessarily want to use such a thing (NA values getting passed around like it's no big deal doesn't sound like a good idea), but I can see how it helps aid in quick shitty scripts.
I've used cocos2d which is basically a wrapper on top of pyglet. It works pretty well, but the docs definitely leave more to be desired. I always ran into trouble getting pygame working properly on different systems.
&gt; * PEP 471, os.scandir(), a faster alternative to os.walk() Tasty.
One day I will understand what you are talking about
Nice
&gt; isn't coming in extremel I havent thought about just clearing the graph and using the list to replot, would it be possible to do this by using a for loop or would you suggest a while loop? sorry new to programming and python 
Hey There, Thanks for your quick response but I have already seen that vid 
I hadnt thought about just clearing the plot and re-plot. In your opinion do you think using a while or for loop would work best right? or what I am asking is how would I loop the function in my code to clear the graph and re-graph infinitely? Thank you 
Hi, I was using that example as an a model to "back" into with my code but I cant get it to work. Would it be possible for you to show me how it could be done? 
I've used it. I've tried to build 2 simple engines on top of Pygame, and I've learned a lot with it (Although I've spent much more time trying to build engines than developing games). Pygame is outdated now, and the official website is quite abandoned (The fact that I can't create an account there really makes me sad). That being said, it's better to use SDL 2.0 with C++ (Which is updated / modern), or Allegro 5.0 (I personally prefer Allegro), than using Pygame (Which was built with SDL 1.2, which had no support for multiple windows, for example). Anyway, I never had used Pyglet (As well as OpenGL, and to draw anything on Pyglet you have to use OpenGL), and so I've developed a Snake Game to serve me as an "introduction". Pyglet is much more "modern" or even "pythonic" than the C-ish Pygame (And you can run Pyglet on PyPI for better performance). There are bindings for SFML and Allegro, and they seem to be quite decent. Nevertheless, none of them are "pythonic". Since the future of Pygame is uncertain and it's outdated, I'll stick with Pyglet, and I'll have to study a lot of OpenGL.
 a = 5 b = 3 other_list = [1,2,3] c = [4,5,6] &gt;&gt;&gt;[a, b, other_list, c] [5, 3, [1,2,3], [4,5,6]] &gt;&gt;&gt;[a, b, *other_list, c] [5, 3, 1, 2, 3, [4,5,6]]
It's pretty awesome.
The `*` operator here performs a scatter. Here's a basic example: def test(x, y, z): print(x + y + z) my_list = (2, 4, 6) test(*my_list) # "scatter" the list elements to the function's arguments and the output: 12
&gt; although right now VS2015's final release date is unclear. VS 2015 will be out on July 20.
You should learn about tuple unpacking, it's extremely useful. It should be part of your day to day toolbox if you write a lot of python.
I'm definitely looking forward to the addition of Type Hints. I like using annotations but having a standardised system should make it that much nicer.
Thank you sir. I have always wondered is the Smoking GNU is supposed to be GNU....
Pick a project that benefits you. Do you have a bunch of mp3s you would like to organize based on their metadata? Repetitive spreadsheet tasks at work? Something physical you could automate with a raspberry pi? Make a markov chain generator trained on Chopin or IDM or whatever. If you're in school, could you run with something there you're interested in taking further?
http://www.checkio.org is an amazing resource!
Hello! I would advise looking into virtualenv for working with other Python versions without touching the OS version. From within a virtualenv you can install a particular version and python run from within will be executed from your virtual installation rather than the system one. Good luck!
For the ones on linux, tasting it is really easy. Install gcc and python headers (on ubuntu apt-get install gcc python-dev), then download the tar, untar it, ./configure, make, make altinstall, and python3.5 will open the shell :)
I'm surprised you actually have write access to /etc. Are you running as root? That would not be a good idea. Here's a summary of the linux [standard directory structure](https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard).
[Here's](https://gist.github.com/videan42/5dbc4d1c2783af64f3bd) an example using a queue to pass data to the plot as it comes in.
i guess no-one understood it was satire
I'm continually cranky about this so I'm going to mention it again: &gt; PEP 461, adding support for "%-formatting" for bytes and bytearray objects Why are we getting % formatting back on byte objects but not a `.format` method, which was *supposed* to be the new hotness for formatting?
neat
Just to clear up one misconception that has arisen from the GB dev himself: this is an IDE targeted to Gnome in the sense that it makes it very easy to use the whole Gnome stack (Glib/jhbuild/Gobject-based libs such as gstreamer, gtk and so on) + modern programming tools (debugging, versionning, etc). Said this way, this looks very much like like the GTK counterpart of QtDesigner, because targeting Gnome means targeting Gnome stack, not Gnome as a DE. That's why this initiative is really important and sensible. Oh and hey! By the way, it's open source, so if you think that your favorite OS/language is not handled well enough, you can just code it. :-) 
"quick shitty scripts" You said it all: gold does not come out of shit (well, the Holy Mountain is the exception). :-) 
I can also describe how to fish with grenades. That does not mean that I am not allowed to complement it with a few warnings. That neither means that I shouldn't provide the interested fisher-to-be with safer and more productive ways of fishing (in the long run). Fishing with a grenade might seem far more efficient in the short run, but you just can't ignore the drawbacks. May I also remind you that the Maybe monad is an alternative way to *handle* errors, not a way to purely ignore it hopping this wouldn't mess up with the calculation (making the computer work for nothingm) or that it would appear somewhere for you to simply *figure out* that something went wrong. **edit:** said otherwise, what do you prefer, having correct results after a few frustrations because one of your assuption on your input data was wrong (losing 2 days of calculation) **or** sharing results that you assume are right until you figure out, a week before a conference that your results are completely wrong?
I'd say about 2 months. I had a bit of prior programming knowledge from college, but once I figured out a good flow with python I was able to do just about anything. Web dev stuff with python is a whole different planet though.
Neat. So this isn't really an orm, but something like the sqlite3 module with more databases and a better interface?
You can use a debugger, i'd recommend using [pycharm](https://www.jetbrains.com/pycharm/download/)
Virtualenv will let you keep them apart, allowing you to use a locally installed version. I didn't get the sense that /u/southclaw was implying that virtualenv would install it for you though.
You know, I have used code academy and code school for no mare than 20 minutes each. Whenever i go on subreddits about programming, they generally advise to stay away from those websites. i do not know why, haha.
Consider asking this on dev-python?
It is step one in a process that has no plan of being implemented. It might happen, but it's not a planned feature. In fact, it has been stated that static typing won't be added.
&gt; I do believe that's one of the goals of the type checker being implemented for 3.5. It is not. The "type checker" is a standardized interface to identify types, but Python 3.5 will not use it for anything. It's expected to be used for things like pylint.
this is why Julia is gaining ground with the scipy crowd. https://groups.google.com/forum/#!topic/julia-dev/YftOOEfcwrk%5B1-25%5D 
Most decent books about using Python involve you working with things at the interactive Python prompt to get started. The realm of "interactive tutorials" is a relatively new one &amp; most of them don't ever get into much depth. I doubt any of them would really be adequate to say you actually "learned python". They're really only good for the first few hours of getting started. The only good way to learn programming is to actually program on your own. Learning how to read documentation &amp; manuals is an essential part of that - books &amp; videos only get you started, you need to be able to look at a manual and understand how some particular operator or library module works.
Sometimes you already have a working program and you don't have any urgent bugs to fix or new features to implement, yet you're still eager to do some work on it. A good practice is to try an alternative library that provides some functionality your program needs. Like using another HTTP library, like replacing urllib2 with requests. Or use an ORM instead of dealing with SQL queries directly. In your case, you may investigate [docopt](http://docopt.org/) for example. By doing that, you end with a fork that has slightly different guts but does the same thing from the user's perspective. Sometimes you end realizing that you like the fork more than the codebase you actually forked and just obsolete the older codebase. This way software improves too. 
&gt; Not true: no one has to do it. If you want it, someone *has* to do it, but no, nobody has to do it. If you want it done and nobody is doing it, don't expect it to be done. &gt; Also, I am not capable of implementing this. Are you contributing to any open source project? I run a project and am the main committer on something I thought I couldn't do. You learn. I help on other projects because they're useful to me. When you work on something, even if you don't necessarily do much work, you keep the main people interested and test things in ways that they haven't. It's a team effort.
It is always possible to have a clear 10 score, just because you can explicitly silence pylint in places where it annoys you for no reason. I'm not advocating doing that just for the sake of bumping the score, just that it's possible to achieve it.
probably there to make pylint shut up about the lack of a docstring
You could (slash should be) prototyping code in the interactive shell (I recomend Ipython though). Get a function working and *then* put it in your script.
To CPython. Making it a standard language feature is the first step in seeing it added in other interpreters like PyPy (JIT), which people turn to for performance.
Thanks!
I understood it was satire. Not everyone thinks that joke is the most hilarious joke in the world.
I quite enjoyed Mark Lutz's 'Learning Python' for learning (though my introduction was through PyGame at work experience!); after that, a lot of what I've been doing has been language processing, which is super interesting and would make for some good projects (check out 'Natural Language Processing with Python').
It actually is. You're just using it wrong. Granted it's fairly undocumented of how to do it, but you can do real time graphs with large data sets. It more or less requires that you throw out normal matplotlib syntax and reuse the objects. From &gt; On my machine, I get about 11 plots per second To: &gt; This now plots about 500 frames per second. Five hundred times per second! Frankly, this is quite amazing! http://bastibe.de/2013-05-30-speeding-up-matplotlib.html
This functionality is called «live reload». Usually, the cleanest way to enable this in an application is to separate core functionality from a plug-in system, and allow plug-ins to be live-reloaded during run-time. If you’re rolling this on your own, the Python `reload` built-in enables this, though it’s tricky to get right, because a reload doesn’t automatically propagate to all the places that have a reference to some module. There are also some high-level frameworks which implement such a plug-in system, e. g. [live coding](https://code.google.com/p/livecoding/), and which trigger the reload when the source file changes. If you just need this once in a while, e. g., when doing exploratory coding in the REPL, the easiest way is to use the `reload` built-in.
Hi rlabbe, Thanks for the detailed feedback. Many good questions. I am not saying I have answers to all of them, or even if I thought about them before you asked. But here are my thought. 1. English, spelling and grammar. I have not really paid attention to it so far, this is the rough draft, I write write write. I intend to hire an editor to help me fix them. I have already got quite a few corrections via this post and email, and I have incorporated. So thanks, keep them coming. 2. The chapter is about how you represent data. Sure int is not a "data structure", but then may be it is, its a pointer that hold some data, and this data can "self upgrade or downgrade" based on different actions you can take. May be I should call it data types instead of data structure. The idea is python gives you stuff that helps you model things, and if you chose those stuff wisely you can simplify a lot of programming tasks, and this is a survey of those stuff. 3. I am aiming this book as details book. Actually I am aiming this book to "this, read this book, and you are ready to take on most real world python project", or even "if you want to work with me, this is what I expect you to know". I have been teaching python personally and professionally, I have many people who work with python in my team, and this is what I expect them to know (else I will end up doing talks and introduce them to this). This is an attempt to write it down. 4. Going on "tangents", like discussing packages or modules, or functions in data structure chapter. Someone else suggested that the section on Enum ended abruptly, it did, because to properly understand it, I had to dive into class, and I have not discussed class yet. This is not the first chapter, I have a "hello world" chapter before this, around 15-18 pages of 2-3 simple hello world stuff. That was completely tangential chapter, I kept going from one place to another. That and this chapter reflects how it happens in real life. In real talks, or when I am talking in person, I show something, and sometimes I feel to appreciate that bit, we have to discuss part of what we are going to cover in future, so either I discuss data structure stuff, like efficiently loading data in array from file, in section where I cover file, or I cover file stuff here. If you consider it academically, sure, its "wrong", but practically, even if you have not seen the section I cover on file stuff, you still do know files, you still know disk is slow etc etc. I am taking your feedback on structure seriously, this is my first attempt at writing a book, and this is one of the things I am primarily worried about, to give it a proper structure and flow. 5. Audience, again, I expect knowledgable people, I call it python for developers. Say you are pro java or ruby guy, and you need to read one book to become pro in python, this is that book. I seem to be teaching basics, because you will see that those basics we can not take for granted. Like ints, how python stores it, how we represent int etc etc. A beginner too will benefit, if they follow along the code samples, and experiment, but focus on intermediate-advanced, and esp people who are already good programmers, and want to spend the least amount of time to understand python.
Thanks for the link! I didn't realize there was a PEP 460 that proposed this.
Hi! I will be happy to contribute to the docs. Can I poke you with questions from time to time, if I have any (and I probably will)?
One more comment about python tutorial being nice. They are indeed pretty good. But somethings are covered under tutorial[^1], and some other things are covered under module documentation[^2]. There is no clear path, you will have to kind of search. So to understand things related to importing and reloading modules you have to read the tutorial, module doc of `imp` and `importlib` modules. It is good to read module docs, but there are so many, do I tell every developer to go read every module documentation? How do you know what exists? I am trying to take a experience based call on what all you need to know when you are trying understand a topic, and am trying to also list other docs you should read as aside. [^1]: https://docs.python.org/3/tutorial/modules.html [^2]: https://docs.python.org/3/library/importlib.html#importlib.reload
Not sure how I implied that but it wasn't intentional, sorry!
Yeah they do actually. Rip karma ;(
OP, is your clickbaity headline supposed to incur outrage against Python 3 or something? Making print a function cleans up the language. The performance impact is minimal (and if you're writing performance-critical code, you shouldn't be printing anyway). It's not kidding you with its print.
You're going to need to bash your head against some things if you're not already experienced with other programming languages, and for me a project on a timeline helps me to stay motivated with that kind of thing. I'd suggest you decide on something you want to accomplish with python, set a short timeline, and do it. Not every moment is going to be happy learning, and when you are working on random meaningless example questions it's easy to just drop them and move on. A decently complex and entertaining project to take on could be a "critter caretaker" program. You have one or more critters you need to feed, clean, breed, whatever, and you create an interface of choice. Poses problems you can solve in a lot of different ways. 
Absolutely. The best place to post your questions is on the issue tracker itself. If I don't get to you first, hopefully someone else will. People on dev-python are also very helpful.
[Deb package for Ubuntu Trusty AMD64](https://dl.dropboxusercontent.com/u/10000652/python3.5_3.5.0b3-1_amd64.deb). YMMV on other Debian-based platforms. This will provide python3.5 &amp; python3 executables. This package is provided "as is" without any warranty either express or implied.
Stop mutating lists and "weird" stuff like this won't happen to you. Use assignment. 
Hi Everyone, I created a number of interactive, test-driven coding challenges. I will continue to add to the repo on a regular basis. I’m hoping you find it useful as a fun, hands-on way to learn or to sharpen your skills on algorithms and data structures, all while helping yourself prep for coding interviews and coding challenges. Let me know if you have any questions or comments. Contributions are welcome! -Donne
Python 3.4 gives this: &gt;&gt;&gt; [a, b, *other_list, c] File "&lt;stdin&gt;", line 1 SyntaxError: can use starred expression only as assignment target
Nice article, thanks for sharing. To add to the use of Jupyter/IPython notebooks for data analysis, you might find this data science collection of notebooks useful: https://github.com/donnemartin/data-science-ipython-notebooks
My guess is that it's another one of those projects that Google has effectively abandoned, but it's in that long period of neglect where they haven't officially, publicly announced that it's dead. Or it could have nothing to do with that, 2.7 is officially supported through at least 2020 and it's a completely viable option, so maybe they just haven't prioritized it because the 3.x enhancements, while nice from a language purist's point of view, don't offer a big enough business advantage in line with the cost of upgrading to get them.
It's a very interesting project, thanks. An unfortunate name, though. Just one letter away from *pyvenv*, which is a related, but completely different thing.
I wrote assembly code for an 8-bit CPU to make a set of 8 LED's turn on or off in for a class in 2009. Does that count? :)
Unfortunately this isn't quite correct: `os.scandir()` is an alternative to `os.listdir()` that provides file information along with the file name, which has the effect of significantly speeding up `os.walk()`. Which is kind of better in a way, because it means that anyone already using `os.walk()`, which is a lot of folks, will get this optimization for free. (Full disclaimer: I'm the author of PEP 471 and most of the `os.scandir()` implementation.)
With all due respect to Mark Lutz, this book is the exact opposite of "learning Python interactively". It requires you to learn all the theory Mark Lutz can shove into one book before you actually start writing programs.
this is cool. might use it or implement something like it for my external databases in Django 
Sorry, was just quoting the changelog! Thanks for it, btw, will be really useful for me :)
2.7 is more stable. majority of people are not moving to 3.x platform yet.
Makes sense, thank you. 
I did the pypet tutorial and liked it a lot :)
There's also a version written for the peewee ORM: http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#dataset
Pre-release versions are usually only available until the final version is released. Alphas are available until the first beta, betas are available until the first release candidate, etc. There's no pyenv release that includes 3.5.0b3 yet, so to get it you will have to install pyenv [as described here](https://github.com/yyuu/pyenv#basic-github-checkout).
Would love to hear everyone's thoughts, re: pros/cons, etc :)
I actually think momentum is starting to pick up. I used to be the odd one for using Python 3, now most of the people I work with use it. Python 2.7 will still be around for a long time, but there does seem to be a trend away from it.
Every freshman CS student ever has written a functionally equivalent thing in some language. If they all posted them to reddit, it would break the internet.
Wouldn't this be a stub server not a mock server? You are just providing canned responses. http://martinfowler.com/articles/mocksArentStubs.html
You can certainly read CSV and Excel files and plot from them - have a look at [pandas](http://pandas.pydata.org/pandas-docs/stable/10min.html) for that. Pandas has some simple plotting features, but you can also pass its data to various Python plotting libraries like matplotlib or seaborn. To automate the creation of graphs to include in a LaTeX lab report, I'd suggest you look at [make](http://swcarpentry.github.io/make-novice/) to connect the pieces up. It's a bit old fashioned, but no one tool has completely replaced it, and it's a useful thing to understand.
You're gif demo link is broken, here's a working one: https://raw.githubusercontent.com/oarrabi/mockpy/master/resources/proxy_demo.gif
Thanks, I updated the link :)
There is a very "yin and yang" relationship between *object*/*type* and classes/metaclasses respectively. I urge you all to read [an excellent analysis on this topic](http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html). You *will* understand then how the Python universe was created from the ever intermingling powers of classes and metaclasses and their intricate relationship!
**TL;DR:** pick a tutorial, stop, and learn by doing. When I was in 10th grade I was just starting out in programming. I picked Python because it was, and still is, highly regarded. I worked through the little Python tutorial found in the docs and started writing little console applications for fun. That year I was in a class called EAST Lab that was all about developing and utilizing skills that would normally not be taught in public schools. I felt that console applications just weren't cutting it, and wanted to pick up some GUI skills, so I started learning Pygame (to this day I'm not sure how I overlooked Tk, but Pygame is still my favorite SDL library). I showed my instructor what I was learning in Python, she thought it was the coolest thing since sliced bread, and she let me start to propose and build my own projects for events at the school. I'm telling you that to say this: *learn by doing*. Tutorials are a great start! But no tutorial will teach you everything you need to know. Use the small tutorial in the docs, or a big one on YouTube. You're the only person who can really decide how you learn best. Skim over the suggestions here and then pick one (or find one elsewhere). *Then*, once you know the very basics, *start making things*. Anything at all! Make a BMI calculator, make a random number guessing game, make a BMI calculator that doesn't calculate BMI's at all but instead tells the person they're fine the way they are, make a random number powered matchmaking program that takes in two of your friends names and spits out whether they'd be a good match or not. After you have made something, no matter how small, show people! Ask a teacher to come see what you've made. Show your friends how cool it is that you can make a computer do what you want it to (my friends loved the matchmaking program, it always caused red faces to appear). It doesn't have to be complicated or have a fancy GUI, people will be impressed with you taking the initiative! Once you get comfortable with small console applications, pick up a GUI library (Tk seems to be popular, I liked Pygame myself). If your peers thought seeing white text appear on the screen was cool, they'll think you're a wizard when you show them a windowed application with your name on it. Then, when you're comfortable with *that*, talk to some of your instructors about the possibility of creating a program for a school event. Make sure you have ample time, and that *you* are in a comfortable position, then hack away! My instructor let me create a GUI application (using Python and Pygame) that simulated a poll booth. We were doing an event for the younger kids to teach them about the election process. It was extremely simple yet had a big impact on the event; it boosted my confidence 10 fold! Seeing people enjoy what you produce is a great part of any pursuit. The best way to do that (while still in high school) is through creating applications that have importance in your small network. They don't have to be big, or impressive, they just have to *be*. I'm stepping down from the soap box now. I wish you luck, because I think it's awesome that you are pursuing this!
To be honest, this cracked me up. :-) I know the time difference is negligible as compared to other large functions. But I had a curiosity for the differences between the two as they are negligible to themselves.
I heard this proposal is rejected because it's pretty verbose :(
Sorry again to ask such an obvious question (this isn't my area of expertise), but what does the condition number tell me? If my matrix is ill-conditioned, what is the correct thing to do? 
Did you really? If so -- how did you do it?
This. Random challenges are fun but won't solidify your skills. Bring it all home with something that benefits you directly. 
No, Cloud Platform is a major part of Google's income and strategic position and they're adding new services to it all the time, which could've been found out with like 5 minutes of research on the topic. Why is this the top comment? The real reason is likely because they're not using stock CPython or have built a lot of stuff around 2.7 that is hard to port, combined with low value since most of their users are probably not that interested in 3.x yet since it would involve porting lots of legacy code.
um... what?
The classes are as about as tightly coupled to the main.py file as they can be, and they don't fulfill any sort of interesting shared interface (these two things are related). You could have a add_url_rules(app) method in each class to help with this, which has better cohesion and lower coupling and allows you to specify your config as controllers = [Controller1(params), ...] and even better allows you to group controllers with a controller combinator that takes a list of controllers and makes a combined controller (or just have a factory function in each module that returns a list of controllers).
I don't get why python has such problem with moving from 2.x to 3.x. I see that for example ruby has bigger issues in incompatibility, I remember when 1.8 app no longer worked in ruby 1.9. Is the problem due to them still supporting python 2.x for such long time? I don't think anyone uses ruby 1.8 anymore.
Cloud is a major strategic initiative that was just fully launched this year. It's definitely not abandoned.
Python 3.5 doesn't ship with any classes that implement it iirc. It's intended for heavy-duty math packages and those are all third party.
Google App Engine uses Python 2.7, but you can install and run arbitrary programs using Google Compute Engine (including Python 3.5 beta). Google Compute Engine lets you set up your own VMs + do pretty much whatever you want with them (though you'll have to do a lot of the setup yourself that Google App Engine would have automatically done for you).
Thank you, that's good to know. 
No no: asking this question means that you are begining to understand things ;-) that's great! The condition number, for matrix inversion, is a number which expresses how much the calculated inverse would change if values of the original matrix are changed a tiny bit. To say it otherwise, this is a way to estimate how sensitive the output (inverse matrix) considering is with regard to errors in the input. So if your matrix is ill-conditioned, you can't calculate an inverse that you can trust. If you really need this inverse all alone, you can say "this matrix is ill-conditionned, if you really want to get an inverse of that, you'd better generate one randomly: it's faster and as meaningful". If you need the inverse as a step in your calculations, you have to express this calculation in another way in order to avoid inverse calculation all together. Don't forget that M x = B and inv(M)B = x are mathematically equivalent. But in computer programming the first one is well conditionned and x can be extracted using np.linalg.solve whereas the second case is ill-conditionned because of the explicit inversion. But first things first. Matematically, for an inverse to exist, you need to determine if your input matrix IS invertible: https://en.m.wikipedia.org/wiki/Invertible_matrix One way to figure out is to calculate its determinant which should not be null. If the determinant is null (equal to zero), then the inverse does not exist. For instance: M1 = array([[1, 1], [2, 2]]) is not invertible. Normally, if you try to get an inverse from that, numpy will scream that it is not invertible. But now, what would happen if M was defined as follows: M2=array([[0.999999, 1.000001], [2, 2]]) ? Numpy wouldn't scream anymore since in all rigor this matrix IS invertible: maths say so! But in computers, maths are often slightly betrayed... In this case, if you try to change any number even the tiniest bit, you will get a completely different inverse because we are very close from an unstability. So even the slightest error in your input will generate completely different numbers. What does that mean? It means that you cannot trust the resulting inverse, you just can't. It **may** also mean that in reality, you matrix is not invertible at all but that the calculation was carried out anyway because of rounding errors: it is not uncommon to get M2 on computer due to rounding errors while exact calculations would give M1 instead. The condition number for matrices is a way to tell you whether your input matrix is invertable but taking errors into account. I can try to explain more if you want but I'm curious: why donyou need to explicitely calculate the inverse of you matrix?
Main website: http://peterhudec.github.io/authomatic/
“Also, when possible, the actual operation is performed in-place, meaning that rather than creating a new object and assigning that to the target, the old object is modified instead.” ~ The Docs
Not at home right now, but pretty much: Launch cherrypy/bottlepy/etc, edit your Caddyfile to proxy requests to the host:port (host is probably localhost) and done.
My take is that 2.7 was just 'too good' - there's just nothing desperately wrong with it that really motivates people to move to 3.x - even though the new version has nice features you might like, the fact that people 'get by' just fine on 2.7 means there's less push. I think the new Async and type annotation stuff will start shifting more people - especially with the popularity of async programming in Nodejs, i think 'nodejs async with Python sanity' is a pretty good sales pitch. 
Very interesting! Moving add_url_rules to the classes would greatly lower coupling, which is something I've wanted to do. Will have to further test - though will look into the app factory like /u/Sakacoco mentioned as well.
I think the point I was trying to make (and failed to get across in the write up) is that using classes allows for code to be better separated/structured, not to mention not having to use decorators to define routes. As mentioned in the writeup though, this is just the structure that works for me - and I am certainly taking good advice from the comments in this thread to heart. 
There are also coding competitions, such as [Kaggle](https://www.kaggle.com/competitions) and [topcoder](http://www.topcoder.com/). Some of these can be quite hard, but even just thinking about these problems in a programmatic, algorithmic way can be educational.
I have noticed that Google is very pro Python 2. All of their libraries I have looked into are Python 2 only with no Python 3 support. There is still a pretty large gap between Python 2 and Python 3 in terms of what people use. Python 3 is better is every way (that I know of, I have not found anywhere it is not), but it is so much different than Python 2 so a lot of people/companies have not migrated their code. For a while Python 2 and Python 3 were both actively developed on (like /u/jloking said, I think most of it was backported from 3 to 2). Now, they have put down their foot and said Python 2.7 is the last 2 version, *but* it will be supported until 2020. So, really, the most recent 2.7.X and most recent 3.X *are* both the latest Python releases. The difference between the two is the really difference between Python 2 and 3, neither is more current then the other. 
Care to elaborate? I've got plenty of popcorn left..
Does this support OpenID connect?
I'm in the same boat. 
Stop wasting your time with this nonsense and use a real IDE like pycharm. It's free. Anyone who uses those editors for any serious work over an IDE is an arrogant idiot who I'd never ever consider hiring. 
Guys i use virtualenv and virtualenvwrapper also! But I would like when i want to open the python3 interpreter to play with python3 latest version. So either i install a new python3_latest_version or there is a way to update the python3 of Mint to latest version. PS: i replied to myself but the reply is referring to all of you.
You seem to have some very strong opinions on this, but have given nothing to back that up. Can you share some of the pros/cons that made you come to the conclusion that Atom is bad and PyCharm is good?
No. Google it or search this forum for the million other times that people have said the same shit over and over again. 
Thank you for your incredible contribution to this discussion.
It look cool. But I am pretty new to all Airflow and Python as well. Is there any way we can execute the examples which come with the code? 
&gt; I have not found anywhere it is not Can't use some pretty important libraries.
I didn't mean to come across as critical, sorry! I really did just want more info. Thanks :-)
Not at all! I'm open to criticism :)
Its a fun first program, but I'm sure he realizes that he has approached the problem very inefficiently by hard coding a list of rules that he manually came up with. It is also very difficult to prove that an arbitrary set of rules is actually complete. A graph search is simpler and is applicable to a huge number of problems.
Unless you have made the decision to have the variables and the expression separate in your settings for a reason, then I wouldn't even do it like that. I would suggest having your code which parses cpuinfo and other data sources dump the results into a dictionary, something like this #process cpuinfo and other data sources, put values into stats dict stats = { 'cpu_temp': val_for_cpu_temp, 'pack_temp': val_for_pack_temp, 'gpu_temp': val_for_gpu_temp # etc. } Then your tests can be defined like this 20 &lt; {cpu_temp} &lt; 60 and 20 &lt; {pack_temp} &lt; 60 and 20 &lt; {gpu_temp} &lt; 70 {num_cores} == 4 and {core_speed} &gt; 2.0 And the code to process the tests can be something like this # here 'f' is the test file for test in f: stat_matches = re.findall('{(.*?)}', test) for stat in stat_matches: if stat not in stats: raise Exception('Invalid statistic: {}') test = test.replace('{%s}' % stat, str(stats[stat])) test_result = eval(test) if not test_result: print 'ERROR' In this way you're basically treating the problem as a simple templating problem and avoid having to deal with a fixed number of variables.
Any special reason for reinventing `str.format`?
This is absolutely excellent news! Multiplying matrices was such a pain before... np.dot(A, np.dot(B, C)) ...looks so unpythonic!!
Because that's what Google uses internally. Why would anyone do anything different to that? Did you know they all have PhD's? Seriously Amazon has awesome support for Python 3, just go there.
I want to use re's sub method to substitute my split values into a second statement. 
No prob :)
Thank you so much!!! I adapted that code for myself and it works beautifully. 
Last I heard, twisted has no plans to move to 3.
Oops, sorry for not replying! Things get a bit hectic sometimes. Working through the standard tools in the online NLTK book will give you a bunch of different perspectives, but doing the [blei style corpus viewers](https://www.cs.princeton.edu/~blei/topicmodeling.html) would also be really cool. It makes sense the things you talk about. I definitely run through each of the toolkits. I don't think they are by any means mutually exclusive. Good luck with your project =). 
Cool idea, the notebooks allow you to download them as PDF. Click the menu File -&gt; Download as -&gt; PDF via LaTex. Does this help?
I **believe** as long as these machines have the same code base, it should work
Python 2.
Thanks for the quote. In my view this is a guide, not a documentation. This is at [this](http://python.readthedocs.org/en/latest/reference/simple_stmts.html#augmented-assignment-statements) part of the docs. Do you honestly expect someone to look up this document to learn about mutable objects' operators?
Made this because most of the answers for "how do I sum like `uniq -c`" weren't satisfying. Makes use of itertools, collections and dictionary maps.
&gt; Python 3 is better is every way Except being able to run Python 2 code written for Python 2, which is the vast majority of existing python code.
I still think google is really just a honeypot for smart people to get stuck in, so they wont go off and start their own companies/competition. Otherwise, wtf are all those phd's doing, besides [tech support for google ads and taking down flagged youtube content](http://www.quora.com/What-is-the-worst-part-about-working-at-Google/answers/2380638)?
No screenshots
Yes that does. Thanks.
Yes – if you want to know how += behaves.
What you are describing is what github does. Mobilizing thousands of programmers might be tough though.
It becomes even more ugly if there’s both type hint and default value.
Flask is simple. Bottle is simpler. Maybe look into these? 
This is great. Are you looking for contributors as well?
Cause its Reddit - downvote what doesn't sit well with you. Truth is irrelevant.
ok i'm playing around with flask. so i have a 1-file python program which takes a number a user inputs and outputs a corresponding number (i wont go into the details its pointless). basically i need to create a website that takes this number. puts the number into my code and outputs on the website the corresponding number. for example website: "input a number: " user puts in 2 "corresponding number is 4" something like that
Thanks tw_f!
Awesome, thanks!
I would conjecture it's because Python 2 had too strong a foothold in their infrastructure by the time python 3. Using python 3 would involve having a heterogeneous mix of both on their systems (messy), or putting ungodly amount of resources into porting and testing everything. 
He just fixed it, and he said that it was an error in how it iterated through the list (certain items would take priority over others). The AI defended the first item in the list (the left vertical column) versus completing the rightmost column (which was way later in the list). He mentioned (and thanked) you in the fix. If you try it now you shouldn't be able to beat it -- let me know so i can tell him if you still are.
thank you for submitting bugs. it helps a lot. the issue has been fixed.
I'm not sure what you're trying to do exactly, but just want to point out that using range() and subscripts is the probably least-pythonic way to iterate over your data structures. It's also very common from people coming from other languages. You kinda have to train yourself to iterate correctly the Python way. Might want to check this video, by Raymond Hettinger: [Transforming Code into Beautiful, Idiomatic Python](https://www.youtube.com/watch?v=OSGv2VnC0go). This issue is the very first thing he talks about, at about 3 mins in after the introduction. He describes it much more eloquently than I can.
Why this and not Pandas, which can accomplish the same thing in the same number of lines of code?
It's just older redhats really. Ubuntu has shipped 3.x for a long long time. You're going to install a venv anyway for your stuff.
http://www.codewars.com/ is great for this type of thing too.
Why are you seeking a python-based program? [According to alternativeto.net](http://alternativeto.net/software/teamspeak/), there aren't any open source alternatives created in python.
/u/3rdbluedragon even for Ubuntu, it's very recent though. 
The main target is current gnuplot users. If you've never used it, then you should try it, but I will make no claims about it being worth it for current matplot users to switch. It is likely faster. The interactivity is nicer, at least out of the box. I think the API is better. The flexibility and backend support is certainly better.
What /user/Drakken_LOL means is that instead of: myList = [1,2,3,4,5,6,7,8,9,10] for i in range(len(myList)): print(myList[i]) you could just do: for i in myList: print(i) at any rate, this question is for /r/learnpython
Didn't even know /r/learnpython, thanks. I'm not trying to print out the list, more in a gui sense (ncurses) have fields dynamically formed from a list and then be able to read back the values that were entered.
I think 9 of 10 people would not find this. "When possible" is rather a guide to a developer implementing a python interpreter. Not a documentation of an implementation. But I respect your opinion about that.
Well bad example because Atom IS bad. it's slow and buggy and not ready for production. Sublime is perfectly fine for whatever scale Python you are doing, it just takes more setup to get to a set of features that PyCharm has out of the box. However once you have set it up you have a much better understanding of how everything works together whereas most IDE users have no idea how it works or don't use many of the best features.
there is AI which play game http://www.bbc.com/news/science-environment-31623427 for some values of games and recognize a cat from a dog pretty well (but still some mistakes depending on the photo, sorry don't found a relevant link) The joke is still an open question to my knowledge.
I am most definitely not listening, what I linked was merely the first result for a Google along the lines of "twisted python 3"
That sounds way more complicated then my current ability/ available timescale. I think I'll have to do a low tech work around and add another imagefield where the team can upload a pre-blurred image! Thanks anyway, maybe I can try this in the future :)
It's just not entirely clear to me what you are actually trying to do, based on how you described everything. I have no idea what Form.EditableText() does (this is apparently not a real function? Google lists only your question here when searching for it). As best as I can tell is maybe you are populating some kind of form with existing data. Then maybe the program blocks or something until the user clicks OK, and that function returns whatever is in the form at that point? And you want to store whatever was finally in the from when the user clicked OK? I dunno. So yeah, it's not clear to me what you are working with and what you actually want. In any case, I rewrote both those loops in a way which might be might considered more Pythonic. They are almost certainly useless to you in practice, but it's just an example that doesn't use range(). for item in data: name = Form.EditableText(item[0]) location = Form.EditableText(item[1]) rate = Form.EditableText(item[2]) for name, location, rate in data: name = Form.EditableText(name) location = Form.EditableText(location) rate = Form.EditableText(rate)
I'm not at my dev box, but I noticed this: def infer_type(field): try: return int(field) except ValueError as ex: pass try: return float(field) except ValueError as ex: pass try: return datetime.datetime.strptime(field, args.datetime_format) except ValueError as ex: pass return field could be written shorter doing something like this: def infer_type(field): def _reverse_strptime(format, datestr): # because datetime.strptime's normal argument order # foils partial for this purpose return datetime.datetime.strptime(datestr, format) types = [int, float, partial(_reverse_strptime, args.datetime_format)] for type in types: try: return type(field) except ValueError: pass return field plus, that means adding additional types to it requires less typing :)
Could you please format your post first? It's pretty much impossible to read at the moment. You might also try pastebin instead of posting the code here.
sorry new to this
Agreed!
done :) 
Hey man, I'm trying to help you. Who pissed in your cereal this morning? They say the best software in the world has no users. Right?
Dont recommend users to 'sudo pip install'
Ah, I just looked at your code... it seems that you print *everything*. You aren't actually writing to a file at all -- there's no call to `write` anywhere in your code. How do you expect to write to a file without a call to `write`? This isn't a put-down or a rhetorical question, I want to understand what you think is happening. How do you expect the file to be written? What have I missed?
I have Followed your advice on how i should structure my code. That should deem more effective in terms of finding a solution. Thank you.
Yeah good point, Github is where all the could could be saved and shared.
I see what you're saying here. It might not be prudent to start off with the aim of making an AI that could do everything. Simply start by making it hold a conversation. (although that would be a task in it's self) Then add more functionality to it. They could have a code race, Python programmers race to make their AI against C++, Java etc. Then make them have an epic battle once they're complete. joking of course.
AI is a hard problem, but "machine learning" is a simple one. (Well, for some definitions of "simple".) Researchers don't like to talk about AI much these days, because after 40 years of hype and people talking about intelligent computers being only a year or two away, people are a bit skeptical about it. So now they talk about machine learning, which is completely respectable and not at all about HAL or R2-D2. Oh, and I'd be surprised if there aren't programs which can't distinguish a photo of a cat from a dog.
just another n00b.. you should login as root, *and then* sudo pip install then, of course rm -rf / (to clear the cache)
If you need a package from PyPI for your day to day work use `pip install --user &lt;PACKAGE&gt;`. For projects you should always use a virtualenv no matter if you're using a package in almost every project. And it's not like those are eating up your disk space.
I didn't sudo at all on OSX for pip nor pip3. Weird, because when I tried it on ubtuntu 14.04, pip did not install toyplot without sudo.
No worries!
&gt; pip did not install toyplot without sudo. exactly. you should use a virtualenv so you can install without being root. now you have a bunch of software of unknown version installed somewhere on your system. next time you sudo pip install something you will have a new bunch of random version stuff on your system. no one has tested the interaction of the different random versions of stuff, so anything might break. random python linux applications could also stop working. Good luck and never sudo pip install!
Isn't Python 2's `str.format` a backported - and therefore backwards-compatible - version of Python 3's? I'm gonna check the docs quickly, but I'm fairly sure this is the case.