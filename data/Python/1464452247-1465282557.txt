What is the to-do list and what is its interface?
Can't unsee We Boob. 
 Implementing a simple version of this should take less than a day. At a high level all it is 1) provision a server and give it a nice url (e.g., notes.comp_url.com) and 2) Setup a notebook server. Look [here](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html) for more details. This would work great if the engineers are already using Markdown/Python for their calculations. Otherwise it represents more work for them and so might struggle to gain traction. There'll be a lot of lobbying management involved in getting it used. The simple solution would be a good proof of concept to show people and decide whether to move forward. Other stakeholders will probably insist on other things that will not be so easy (e.g., having users, security, or version control) to implement. 
Long ago (30 years?) I wrote a double entry, command line based accounting system. Initially written with AWK and shell commands I've been porting some commands to Python and new ones I write in Python. Been using it for decades, the Python bits only for the last decade or so.
An easier way to handle this would be to not have your script handle repeating itself. Instead, you can use the Windows task scheduler to launch it at specified times.
Yes but if you have an excel output then the end users of the report have flexibility to transform/filter the output based on ad hoc use cases. When you try and over engineer the output to some web app type thing it turns into trying to recreate excel functionality on a web front end which always results in a disappointment to the end user. I'm sure they will say in their heads "why can't this just be in excel m, I know how to use that already". 
Are they ALL the same table though?
Yeah, I wasn't aware of that project when I named it. Note that the functionality is completely different.
I disagree with that. A huge part of the BI process is how you view the data. In fact what he did was just a transformation on the same data. 
What's up with this in your source code? &lt;!-- Apollo v1.3, Copyright 2014, Cloud Eight, http://www.cloud-eight.com --&gt; That domain looks to host malware.
I'm aware, just thought it was weird that visiting that domain redirected me to some mac virus warning page.
Sheesh, why the downvotes?
Can you figure out why https://www.reddit.com/r/Python/comments/4lfs8g/six_the_python_2_and_3_compatibility_library/d3mx3iw is getting downvoted?
as of a few hours ago, camel casing [is gone for good](https://github.com/tony/libtmux/pull/3/files). it'll be on pypi today
9/11
I divided on my use of future and six. six.PY2 is nicer than sys.version_info.major == 2 but some of the future back-port types are handy 
if you are relying on system python/gcc/etc you are doing yourself a disservice. Those things are there for one purpose and thats to support the OS. Setup your own separate versions that way you can be modern on an OS that is "stable" 
Hey thanks for the response! They use Labview in the laboratory and no one had even heard of Python, I think. That's a real bummer because I had really hoped to apply my newly acquired Python skills and impress everyone! Thanks for the link as well. As an intern I definitely don't have the clout to suggest a change like that. My boss seems open to new ideas and was intrigued by my suggestion of a notebook for his personal calculations, so much so that I showed him the Anaconda Python installer so he could tinker with it, and showed him one of my more impressive notebooks from a Thermal Systems course that was quite long with beautiful Latex equations and such. It would be work for people to switch and that would limit them. Nobody had even heard of Latex before, which surprised me. I am the youngest one there in that department by 10 years so maybe they just don't know what new things have arrived on the scene. Everything is still Microsoft Office, ugh. I had expected a much more computer proficient group of people. I guess at university, for my major at least, I am one of the few that is more interested in software. It makes sense that when I get to a job, that the ratios of computer nerds to regulars will be similar. Well I can at least do my calculations in it and maybe in some presentations I might have to give I can subtly showboat the awesomeness of free software! If only large companies would use more free software, they could grow even more.
Exactly. It's all about the end user. 
good point, want to make a PR for that, or should I add?
&gt;cut and paste Do you mean it *moves* files?
One is dynamic dns updater for a finnish ddns site that I use for my server and another thing is a telegram bot that sends me daily status updates about my server so that I know what might have gone wrong if and when my server becomes unresponsive or reboots suddenly
Not sure why you're asking me, though it seems to be at 3 points ATM anyway.
Assuming it's this: https://github.com/bastibe/org-journal
Correct. It's one org-mode file per day, and you can open todays' file with one key combo. TODO entries are always kept in the most recent file. All files (or subsets) are searchable. It's simple, easy to use, and incredibly powerful (mostly because of org-mode).
I'd try "conda install" first.
Last time I heard, they're several years late on their OpenGL version, too.
0.4.1 is up now, better? i'll be publishing tmuxp with the updated tmuxp today/tomorrow too.
Collecting the data I do manually, just copy paste the list of transactions to a text document and the program parses it. The categorizing is semiautomatic; if it sees a transaction with a description it has seen before it will categorize automatically, otherwise it will ask what it is. After some initial work basically all the transactions are autocategorized :) 
I cant help your stupidity. If you are in IT, fine, it makes your job easier for multi-user setups. However, you are not in IT, and if you have problems with pip for numpy and PIL, well you have serious issues i can not help with.
Okay. Happy for you. Now what does it do? Edit: nvm, readme wasn't showing up on mobile
Very useful program. That got me around the carnival cruise network restrictions so I could go on netflix. I just set up an AWS server ahead of time serving SSH on port 443.
And if you exceed that, couldn't you use an SSD and set a larger swap file?
Great scott!
Sure, but SSDs have much shorter lifespans than DRAM for identical workloads as well as worse performance (magnitude of 10 difference). It's better in the long run to just buy more RAM if its physically possible to keep your data in memory.
The largest tables I work with can easily fit in-memory on a laptop, so I generally don't worry about this kind of stuff. What would you do once you exceed the 32GB of RAM? Increase the Swap File? When would you need to go from a larger swap file to a distributed system?
Are you talking about the one in Spain, this July？
I've never been a fan of `six` and, in particular, the habit of sprinkling `six.text_type` etc. all over a codebase — it's pretty gross. I much prefer to write for Python 3 to the extent possible and then emulate that environment on Python 2 via renames and `__future__`.
Sorry should have been more specific. I am talking about the US one in Portland, Washington this weekend!
Both LATEX and Python are quite old. It is strange that they haven't heard of them. 
I can not believe the level of stupid on this issue. If you dont understand pip, grab the source and compile, or [Christoph Gohlke](http://www.lfd.uci.edu/~gohlke/pythonlibs/). Why are these options so hard for some people? Maybe python is not for you, stick to excel.
It's a question of using the right tool for the job. Excel is a spreadsheet application. Not a business intelligence solution. I have seen someone use Excel as a desktop publishing solution. A 500 MB Excel document to generate several dozen pages with multiple pictures on each of them to generate a company manual. It's technically possible. She achieved her goal. It would also have been a lot easier for her had she used the right tool for the job, and we wouldn't have had to recover her Excel file from backup after it broke down under its own weight. Basically, using Excel for Business Intelligence is on the same technical level as asking a user for screenshots, and getting back an attached Word document, into which s/he pasted the images. Yes, it works. Yes, it does the job. It's still wrong, and using the right tool for the job would be easier for everyone involved. The primary problem is: End users hate change. Once they are used to the wrong way, it is exceptionally difficult to get most of them to do it differently. When we had Office 2003 rolled out, we had installed a PDF printer along with it, so people could save PDF files out of it. We've deployed Office 2010 years ago, which does saving as PDF natively. Do you want to take a guess how many calls I get about the PDF printer? Users do shit the way they learned it, no matter what other options there are, until you make it impossible for them to keep doing it that way. And then they yell at you for making their life difficult. Giving them the wrong tool for the job may not seem like an issue at first, because hey, it works! But it becomes a major issue when things progress and they want to do all the things the proper solutions can do, within that wrong tool they've grown accustomed to. Trust me - we have enough "Excel applications" in operation that I'm very aware that it can be used for a lot of things. Doesn't mean it should be. Excel is for spreadsheets, and once you associate it with any other kind of process, you're setting up false expectations.
If they've heard of or even used Matlab (chances are they have) you can show how the latest version now includes [something very similar so Jupyter](http://mathworks.com/products/matlab/live-editor/). This shows that there's a real benefit for using notebooks, and that big important companies like Mathworks sees value in it. Mathematica has of course been doing it for a long time, but I'm guessing there's a bigger chance your colleagues have used Matlab. Then you can mention that Jupyter is free. As a side note, LaTeX's first release was in 1985, and Python's in 1991, so neither of them are new on the scene.
*than. The word you are looking for is "than." Also, you are being lazy. I would not trust anything you write if you do not know dependencies. "Install Anaconda/Enthought" is an automatic "nope" for me and MANY others. It means you have no clue what you are doing. EDIT: I suspect you are a fan of "from foo install *" 
FWIW Numpy supplies Windows wheels, you don't need a compiler to install Numpy with pip using any modern version of pip.
Coming in tomorrow night and saying for all the sprints. Should be fun!
You're telling me you have *never* had a `pip install` command fail on Windows? You've never had to scour the Internet for pre-compiled binaries, which then have their own dependencies you manually have to track down? If so, congratulations I guess. You must be some kind of wizard. For the rest of us mortals, it's easier to download an all-in-one solution that's already taken care of that for us. 
Sitting right outside the conference centre coffeeshop now.
Directly from CCP. Dust us being replaced with a new game made for PC. Here's one article on it: http://www.polygon.com/2016/2/3/10907492/dust-514-closing-down-in-favor-of-new-shooter-in-the-eve-online-world
if someone knows what they're doing I'll just say "dependencies include numpy and sklearn" or whatever but if it's someone with no programming experience that wants to run my stuff on their windows computer at work I'll probably just say to do the Anaconda route since it's easier. Yes I'm lazy. Obviously the Anaconda route is not mandatory; if you have the dependencies then you have them regardless on how you got them. I don't really see the harm. Anaconda is simple for Windows users with little to no programming experience. 
Cool good to know. Just using as an example of something that requires a compler. 
It is always lovely to open a macro filled excel spreadsheet on the 15 year old computer in the factory to crash the computer/excel. Or when people change the layout of a spreadsheet and doesn't adjust the macro. Lovely.
In the airport now. Excitement!
I don't know what counts as every day life, but here are some I wrote that I use many days if not every day. UpdateSublime will download a Sublime Text release zip file, unzip it to a work folder, and open that and my main Sublime folder in Beyond Compare. Run again with the "copy" parameter and it will update the main folder from the work folder. Sublime isn't updated all that often, but when it is, I can install it quickly, and revert to a previous version easily if need be. PPrint is a source code pretty printer that combines Pygments and ReportLab to create syntax highlighted PDF files of any source code that Pygments can handle. My shortest most useful program (that I don't run that often) is PPath: import os print "\n" + os.environ['path'].replace(";", "\n") 
Sorry, I should have been more specific. I was wondering where he heard we would be using Stackless Python on the server.
&gt; I've been feeling kind of overwhelmed trying to learn this It happens. In fact, it's the default state of someone who knows they're learning stuff. The greatest advice I know to give, is to completely ignore that feeling entirely, and dive as far in as you possibly can. It's not like it's a job that you need to finish or not get paid, you can fail as hard as you like, just make sure you give yourself the opportunity to. &gt;I'm really excited to get into this I'm excited I could help; too. If you ever get stuck in the mud with something, give me a shout, or post on /r/learnpython.
&gt; And you also want to read all the javascript I suddenly feel my motivation waning. No but seriously, that's a nice post, couple things I hadn't thought of before in there. Cheers.
All gone :-(
What's your CCP name?
Yes, the R/RStudio combo is very formidable both in capabilities and in complexity. For those less well grounded in analytics and depending on their needs, I recommend SPSS over R and SAS. It's just easier.
I've found it more reliable to use a virtual environment and manage all packages myself over using anaconda. The reason being that anaconda fucks with default settings too much so getting rid of it becomes a near impossible task
Is there a link for `__future__`, please?
is there a link for future, please?
Well then I totally defer to your expertise. One of my favourite de of all time and I was very sorry to see you go. Hopefully CREST keeps developing. What you were doing was awesome.
clone the repo and then run a shell script? something like (zsh): `for i in **/*.ipynb; do nbconvert --to pdf $i; done`
I'm not one hundred percent sure exactly what they are doing in the laboratory yet. Specimen testing but not specifics. I'll know in a few days. I don't want to jump the gun and come across as a know it all. Nobody wants a new person to come in and say they are doing something wrong. From my little experience in school with Labview I know I didn't like it that much, or at least it didn't jump out at me as something I would want to invest lots of time into to become super proficient. It does seem like they are open to new things at least. Again, I don't know much but they are wanting to implement a closed loop feedback system for some compressive test I think so that the hydraulic will keep compressing until a desired deflection is achieved, rather than manually increasing it when the deflection isn't enough. I went to school for mechanical engineering and didn't know i liked controls until it was too late to declare a mechatronics minor and get that education. I'll have to learn on the job how to do these things. I don't want to just rely on proprietary solutions without really understanding it all myself, though. Can you use python to tell the Arduino to change a voltage output, for example, or is it only good for manipulating data that the Arduino sends over the serial? If you can, I would LOVE to see some scripts you use. I'm not a computer scientist and probably never will be due to time constraints, but I'm capable of finding pieces and bolting them together at least. Thanks for the response by the way! 
* [infinitweet, a tool that allows you to tweet &gt;140 chars.](https://github.com/thekindlyone/infinitweet) * [nwanime-dl, a sequential anime downloader, that downloads anime from nwanime.com](https://github.com/thekindlyone/nwanime-dl)
Scrape it with selenium, but don't tell anyone. :-)
Let me Google that for you: [docs.python.org](https://docs.python.org/2/library/__future__.html)
yes,i always wanna do a benchmark,but these days i have to get ready for my final exam,so if you want ,just do it,the example is in the example folder
Im going! Taking the plane tomorrow :)
&gt; I don't want to jump the gun and come across as a know it all. Nobody wants a new person to come in and say they are doing something wrong. Definitely don't do that, it's not a good way to make friends &gt; Can you use python to tell the Arduino to change a voltage output, for example, or is it only good for manipulating data that the Arduino sends over the serial? Well, serial communication with an arduino is a two way street, you can read and write. We set up ours to have a pseudo-SCPI high level command set for doing I2C and digital IO, you just also have to develop the firmware to run on the arduino. Since it's arduino then you shouldn't have any problems with this, it's one of the simplest systems in the world and anyone with moderate c experience can have it programmed in a day or two. &gt;If you can, I would LOVE to see some scripts you use. I'm not a computer scientist and probably never will be due to time constraints, but I'm capable of finding pieces and bolting them together at least. Unfortunately I don't own the rights to 99% of the code I write, I legally can't show anything here and I'm not sure how much it would help you anyway. I don't think there would be much overlap between high speed interconnect testing and what you're doing, judging by your descriptions. That being said, I'm usually around to answer a quick question or two, although I may be slow to respond if I'm at work. 
gonna be there as well :)
Don't know enough about Rust to really help, but looking at that tutorial it should work if you change all the strings from unadorned strings (unicode in Python3) to b-strings (`bytes`) by adding a `b` to the front of the payload strings: import socket if __name__ == "__main__": sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Connect to CoD4 server at 8.9.17.24:28960 # Will also work for most other games in a similar fasion sock.connect(("8.9.17.24", 28960)) sock.send(b"\xFF\xFF\xFF\xFFrcon xxxxxxxxxx status") print sock.recv(65565) sock.close()
virtual env is not as good at handling binary packages and associated binary libraries such as you tend to see with scipy and friends. If you're heavily in the machine learning and data science camp then anaconda just makes all of that so much easier to deal with.
http://python-future.org/
Good idea. I wanted to maybe write up on the meet up board for Reddit Meetup :) I may do a game of thrones watch party too ha
I like the idea of grabbing one of the open spaces. Looking at the pycon site, it sounds like the signup/ reservation cards are a actual physical thing, crazy right? I didn't see a board or anything today but I'll ask in the morning and if it's up I'll reply here or start a new post with options, sound good?
This is pretty cool! Would you mind if I made a seperate version for Discord?
Yep they are physical cards. You basically grab an index card and stick it on the board. It usually starts on conference days
Haha yes, Oregon :)
There has never been a truer comment. You could make the best ui in the world, but all they want is excel. 
As a mechanical / aerospace engineer working among engineers I completely understand your challenges. Be patient with folks and especially in your first year, let your tool choices speak for themselves. As someone who knows of things like python, markdown, and latex, you are the oddball and you'll have to demonstrate their relevance in an engineering environment. I work for NASA where you have state of the art mixed with the old, so you've got young guns with the latest tech, but a ton of 50+ year old engineers who stand by their Fortran tools for example. And Microsoft Office is the standard for everything, of course. I'd love to hear more about your situation and whether you get any python adoption as the months pass. I've gotten a few co-workers on board, but it's a slow process in the land of Excel, Matlab, Fortran, and LabVIEW. Good luck!
This just made me think of Windows short filenames where names with the same first 5 or 6 letters start getting ~1 to maintain uniqueness. I'm trying to remember what bizarre limitation this causes in even modern windows... I think you get a cryptic error if you exceed a numerical limit of similarly named files, or try to name a file the same as another file's shortname... sorry, off topic...
I'll be there! Can I get my 2 scoops book signed? 
Nice, I will try it. On the github page you could add a link to https://en.wikipedia.org/wiki/Pomodoro_Technique for instance. I had to look it up, I've never heard about this technique before.
&gt; rare-technologies.com I'll stop by.
lol, sounds like your form fields need some Comic Sans! 
Good idea. The readme in general needs a lot of updating - I've been working on features in the dev branch. It's quite a popular technique among hipster productivity bloggers.
i find these kinds of length constraints usually have to do with some kind of relic from an older framework, for instance excel tabs only being able to store 30 characters. i use a GIS software at work called arcGIS and it uses a lot of outdated frameworks that will start throwing on silly length constraints on things when you least suspect it.
Yeah Excel is full of bizarre ones. I love that History is a reserved worksheet name, because they can't come up with a less common name for a hidden sheet used by the Track Changes feature.
What type of mechanical engineering gets done here? The harsh reality is this, if public safety is involved they won't likely be in a rush to change over to something new. Further they will likely want a supported system. As for not knowing Python or LaTex, I'm not surprised! It is shocking they even use LabView. 
is this homework? /r/learnpython
Flask is already perfect though.
I started using slack and so far it's just irc except it's co-workers instead of randoms talking about nothing all day long
I dunno. People learned Excel at some point, and it's not easy either. And Access is even harder. I think once you get used to Jupyter, it's not much harder than mastering existing tech and it's a lot more powerful since you can import new modules. 
Yeah. At the same time though, having seen people fly along with Jupyter, I think in five years it will be a major industry standard, comparable to Matlab but wider spread because it's free. 
Waiting in the Airport now, already lost my Shampoo and Suntan lotion to security. TSA agents seem a touch humourless coming from someone who has never flown to the US before. 
sounds like a PEBKAC error
any tips on porting from flask-script to flask.cli?
Great release. Lots of features I can use.
Any compelling reasons to roll this update to production servers?
I will be a the NumFOCUS booth. NumFOCUS (http://www.numfocus.org/) is the non-profit that runs the PyData (http://pydata.org) conferences &amp; supports the following open source data science, scientific &amp; numeric computing projects: - the PyData stack: `pandas`, `numpy`, `scipy`, `matplotlib`, `jupyter`/`ipython`, `pytables`, `astropy`, `dask`, `cython`, `DyND`, `gensim`, `numba`, `scikit-learn`, `scikit-image`, `statsmodels`, `theano` - Data and Software Carpentry - Stan, yt, the `julia` language, rOpenSci, QuantEcon Come by if you want: - stickers for NumFOCUS projects (the `pandas` stickers are new!) - to learn about PyData meetups &amp; upcoming PyData conferences - to learn about any of the NumFOCUS projects - to get an introduction to any of the contributors for any NumFOCUS project
Awesome! REST services made easy :)
I'm glad to see better json handling! More and more you see flask used as an api endpoint serving json instead of rendering templates.
If it's what the customer wants, it's an entirely different discussion anyway. ;) You do what you get paid to do.
Small problem with the section on .next() In py3 the next() function is *not* all that remains. The .next() function has simply become more private by being renamed to `.__next__()` thus matching the pattern for other infix-like methods.
I switch to aiohttp.
Does Raymond Hettinger not have a talk this year?
Does the video have all three versions? Or just your original that needed improvement 
I'm waiting for a spike in litecoin price so I can bail. I don't want to constantly check the price so I have scripts check for me and alert at varying thresholds.
Thanks for the awesome advice and I will take it. I definitely tend to be over eager to learn and experiment. This has served me well in many ways, but it certainly has its drawbacks, so thanks for the reality check. I feel a lot of pressure to kick ass at this job in order to hopefully get hired out of school so I can support my family. I now see that this could push me to overreach or alienate co-workers which would not help my situation! About the inexperience point, though. You are absolutely correct in saying that I am not experienced enough to implement a solution quickly, easily, or robustly. With no more time or money to take college courses, though, where would you go to learn? I want to take my knowledge past the generally comfortable and able to browse help forums level I'm at now to being someone who can answer questions on help forums. Would you just check out a book? I've read Automate The Boring Stuff and am working through Dive Into Python, but I guess I should find a book on micro-electromechanical systems? Is that what you would characterize these systems as? Having the vocabulary to describe the problem is half the battle. I need to browse MIT's open courses and see what's available. I had thought that I could delve into things at work, but I agree now that it would be much safer and less offputting and arrogant to just go with the flow. I get carried away!
Good points. I'm not certain how much you're allowed to say yet, and I would rather be more vague than necessary.
Not that I see :(
Cool! Looks like a fun project!
SCPI is just an old as dirt text based protocol for commands and responses. It'd take you about 5 minutes to learn all you need to know about it. Because it's so simple it works very well, like HTTP. It's common to see this style for instrument control, something Labview is often used for. For example, a power supply might have a VOLTAGE:OUTPUT command that sets the output voltage, as part of a command set for controlling and querying the power supply's properties. I2C is an old as dirt binary protocol for device control using only data, clock, and ground lines. It's often used for things like programming EEPROMs, controlling circuits that may not even have a microcontroller, etc. If you need to send no more than a kilobyte of data over a short distance with low power consumption, I2C is probably a good choice. It is pretty simple still, but more technical than SCPI since it isn't text based.
Sure!
I'll bet /u/mitsuhiko would be willing to spend more time on Flask if someone would pay him to work on it. Otherwise, it takes away time from his professional work, which damages how well he can take care of his family.
Isn't conda open source, like pip? And Conda-Forge isn't a proprietary thing either.
It's for infrastructure software, not the web applications (I guess).
I've done this too: https://github.com/boxed/mammon/
All three, run 10000 times and benchmarked.
I think the term you're looking for is djangular https://www.youtube.com/watch?v=GVDjoTt3r8A https://github.com/appliedsec/djangular
Anaconda is owned by Continuum Analytics, Enthought is owned by Enthought. By its very nature Anaconda is NOT open source. They steal open source packages and sell them, but it is not open source by an means.
You know, people use flask because, despite being a micro-framework, it's still a framework.
Am I missing something here? https://github.com/conda/conda https://conda-forge.github.io What sucks about conda as a package manager (other than who wrote it, I guess)?
Does anyone know if there'll be live streaming this year?
I'm looking forward to watching Miguel Grinberg's talk on scaling Flask applications: https://youtu.be/tdIIJuPh3SI
source: https://github.com/johannestaas/cursed documentation: http://pythonhosted.org/cursed/ menu example: https://github.com/johannestaas/cursed/blob/master/examples/menu.py I hate working with the `curses` library so I wrote a wrapper around it to quickly make simple user interfaces with multiple windows and a menu implementation. It runs the `update` function in each window class concurrently, so you can have a constantly updating display in each without switching between them or implementing concurrency yourself. I figure it would be useful for something like recreating [top](http://man7.org/linux/man-pages/man1/top.1.html), writing some AWS interface with boto to manage your EC2 instances, or making a simple game like snake, nethack, or dwarf fortress. Tested with Python 2.7 and 3.4.
Such a long release cycle doesn't raise confidence in the framework's developers.
Yes. I'm not thinking that there is somewthing wrong with flask. I'd use it myself, but I already have a project using Pyramid But from the viewpoint of someone new to Python's web frameworks the slow releases may be a red flag. Usually people are cautious of using libraries and software that was last updated years ago.
I have a PhD in mathematics. I have a firm understanding of statistics. If you would read my post closely, I am asking about a feature in Python. 
Lol. All you do is troll Python Reddit. Time to get a life kid. 
I use PythonAnywhere to host and run all my Python scripts. They have a free tier, and I think their cheapest plan is like $5 a month. Also, the kicker for me was their version of cron - you can set up a Python script to run every day/week/month at a certain time. Edit: Link - [PythonAnywhere](http://www.pythonanywhere.com)
HMB2000- beware. These guys are complete reddit Python trolls. They will only criticize you and not answer your question. This is a feature that has been widely discussed but is not available yet in statsmodels. Guess ilikebigsandwiches and nerdponx where such smartasses they didn't even the answer to your question. LOL.... jokes on them.
I found a piece of advice somewhere that said 'Don't have anaconda permanently active, just activate it when you need it -- i.e. when you want to activate a project's conda virtualenv.' It may have been [this Stack Overflow post](http://stackoverflow.com/questions/20364700/using-two-different-python-distributions#20364875). I had been having some trouble with scripts expecting the system python, and this was a big help. I have two aliases in my zshrc (but I think they are bash-compatible): `con` is basically virtualenvwrappers `workon`, because I can run `con some_venv` and it will activate the specified conda virtualenv. `conpy` does less: it only activates anaconda, which is useful when I want to create a new conda virtualenv. conpy () { export PATH=$HOME/lib/miniconda3/bin:$PATH echo "Switched to Anaconda Python Interpreter" } con () { conpy source activate $1 # my own touch. My post-activate scripts mostly say `cd to/project/dir` source $HOME/lib/miniconda3/envs/$1/post-activate }
Checked and it's not up yet you're probably correct that it'll go up in the AM
Find a cheap virtual private server on [lowendbox](https://lowendbox.com/) [Here](https://lowendbox.com/blog/alpharacks-ddos-protected-linux-windows-vps-starting-9-99year-los-angeles-usa/), $10 a year. Hard to beat that. I used to host a website for about $20 a year. Not much traffic, sqlite worked perfectly fine to store the data. Simple ratings site. Most of the shit people make can run perfectly fine on a machine with 512 MB of RAM, 10GB hard disk and a sqlite db. You really shouldn't be starting higher if you're unsure whether you even need more yet. And don't forget about amazon web services free-tier. That might be enough for you.
If you don't need much resources, [here's $10 a year](https://lowendbox.com/blog/alpharacks-ddos-protected-linux-windows-vps-starting-9-99year-los-angeles-usa/) for a lowend VPS. And if you need more and you're willing to pay $7 a month, they have a 4GB RAM quad vCPU server with 60GB disk. Really great deals on that site, definitely beats AWS in price. AWS is great for businesses if you go the whole EC2/S3/ELB/route53/IAM/RDS route and plan to use a few of their services, but for price, I've never seen better deals than what's on lowendbox. AWS is going to scale a ton easier though, especially with elastic load balancers. PythonAnywhere sounds good if you want to abstract all the linux environment maintenance out of the equation and want to scale eventually by clicking a button, but you're paying extra for that. If you know Linux, personally I'd choose a VPS provider over any cloud platform service like pythonanywhere. $5 isn't much of course, but it's still 6 times what you pay for that lowend VPS. And that's if you're using the minimum service. If you want the 50GB disk "Startup" level plan, you're going to pay $1,188 a year, and that's only up to 3 webapps and 50GB disk space. AWS is cheaper if you're using anything but the minimum. With AWS and $1,188 a year, you can do a ton, and use tons of S3 space at 3 cents per GB per month. For $10 a month you could store 333 GB. A t2.medium is $38 a month, almost a third of their startup level. And their startup level advertizes being able to handle 1 mil hits per day per each of 3 websites/webapps, but that's only 12 requests per second if that's what it translates to. You can *easily* beat that with a VPS and flask, 1k requests per second at least and probably closer to 10k. PythonAnywhere has its place, but I don't think it's competitively priced at all if you're willing to launch and maintain a linux server. And AWS has a free tier too, enough to keep a micro instance up forever for free, which is on par with the virtual hardware stats of that $10 a month deal.
True! Best part of the update. Using flask as an API for react templates and its been a blast (especially rendering the react serverside, speeds things up real nice) 
Nope, it's a universal wheel
I strongly suggest developing (programming) in a Unix environment (Linux or Mac OS). The Anaconda distribution makes Python on windows work, but there are still weird little things. For example, the way Windows handles forking processes causes some problems with multiprocessing. Some python packages only run on Unix (e.g. [spacy](https://spacy.io)). Vagrant makes virtual machines pretty easy. I've found that virtual GUIs are sluggish, so I suggest writing your code in your main OS, and executing it in a command-line-only virtual linux machine. The shared directory makes this easy, although I've heard it can be problematic with Windows.
Excellent work!
How are you doing the initial render in Flask? I didn't find an ideal solution for this.
It says "2.7" under the "Py Version" heading. But upon closer inspection, you are right that it is universal. What does this "Py Version" mean, then?
It's up now. There is a card up now for 4:00pm Monday at b112 (i think that's where it is, check the board though)
Grabbed an open space for a meet up. check the board adjacent to the registration desk. created a new post here: https://redd.it/4lmlbb . upvote for visibility !!!
Will try my best to show up :)
Yep, tomviz is built by researchers at kitware and Cornell University. We are looking into using Python 3 in tomviz. It is something we want to do.
Here's a [good start](https://github.com/markfinger/python-react). Basically running a node server along with the python server that watches for changes in webpack bundles and renders them, returning the html. Pretty cool, although I'm currently working with it with Django, not as fun. Django's middleware and token security makes it tricky.
This is more aimed at people going to the conference and not sure which speakers are worth listening to regardless of the topic.
I do manual, but when it comes to Java I generally know the package I want but have to select it from a large list. That's primarily due to the fact that the surface area of the Java stdlib is massive, in python it's much more manageable.
Listened to an interview with the creator of Flask, and I was surprised by how nonchalant its creator was about it. Didn't seem like he uses it much, even. I don't blame him. As he put it, it was an April fool's joke intended to made fun of a "micro-framework" trend, which turned into an insanely successful micro-framework. He had no vision to make it what it is, and the project being in other hands now is probably best for everybody.
Thank u 
Put some CamelCasing in it and it becomes a Jaden Bot 
Harry Percival author of Obey the Testing Goat, who also happens to have given two tutorials, email out his list of recommended talks. https://github.com/hjwp/python-conference-beginners-day/blob/master/recommended-talks.md
Do you have the code on Git or somewhere you can share? I would love to look at it and see what you have done. If not no big deal
https://gist.github.com/david-wm-sanders/501d0fe89705b80da9ac My attempt at something similar... 
Not free, and probably against the TOS but as an example https://mailinator.com/apidocs.jsp
I've recently invested in a Raspberry Pi as a standalone server to host some of my pet projects. The new model is $35 and has on-board WiFi, so you'll just need to keep it plugged into a wall power source.
Sweet - I'll try to stop by and introduce myself as well. I'll also be working the registration desk tomorrow morning from 7-9am, wearing a green polo w/ no logo if anyone has questions about pycon early in the am.
And how do you feel about GitHub?
I'm a big fan of docker. There are official python base images which make it really easy to package apps for deployment. I still use virtualenv for development though (and I usually have the tests setup to run in docker). I do no user PyCharm and cannot imagine myself using it at any point in time, so I have no idea how well the integration works. There's enough of an impedence mismatch between docker and virtualenvs that I can see it working really terribly or just fine.
Some people have better things to do with their time than scouring the internet to collect the right dependencies. 
Docker is nice for validating my changes work in a production-like environment. However, given that we aren't yet deploying containers to production and PyCharm's support is somewhat limited, I continue to use virtualenv, SQLite, and Elasticsearch hosted on my machine for local development.
You shouldn't check in pyc-files too. 
Couldn't you just save the dataframe as a file and then open it on the second notebook? Having two notebooks linked to the same kernel sounds like a bad idea even if it could be done... it would just get confusing.
The reason you won't find comparisons is because you can't really make such benchmarks meaningful - the SDL routines thenselves are the same, with the python version being a binary wrapper, so any performance difference is going to be in the part of the program that isn't SDL. You can of course benchmark that, but you will not be measuring SDL performance at all. That said, if you game logic isn't too heavy, python isn't going to be the bottleneck, and if this is a solo effort with the goal of actually finishing something, python could make the difference in, well, finishingbthe thing at all.
No, but videos of the talks are generally put up hours (or maybe a day or so) after the talk.
What if you were building something with heavy logic? Something like Terraria, a 2D game with a large procedurally generated world.
I've been using both for a while, I have a VM running Ubuntu that then runs docker. I don't currently have any python containers running, but I did a few months back for a project and it was overall a good experience. We ran Django, on top of the python:3.4-onbuild image, with some slight modifications to inject freetds and unixodbc. The project was a seat-of-the-pants type of thing, and docker allowed us to deploy changes both in our development environment (on-prem VM on vSphere) and in production (Azure VM) *very* quickly. All in all it was a huge success. I'm not using any of the PyCharm features as of yet, just run of the mill ssh/cli interaction - I think I'd maybe suggest this route instead of relying on anything PyCharm has off the bat, just to know how things work and what is possible. Being able to script everything from top to bottom has been a big win. Having container images that you can then version and spin up/down at a moments notice makes everything very flexible. That said, I think that maybe a bigger plus for me has been the images that others out there are publishing - I've been able to deploy Youtrack, Gitlab, and Mattermost with very minimal amount of effort. Testing technologies like Spark, Hadoop, or tmpnb, has been relatively simple and painless. If you want a bit more in-depth info on what you can do, I'd check out the free chapters from [Docker In Action](https://www.manning.com/books/docker-in-action), and the rest of book itself is also great - covering all of the major aspects.
Awesome, thanks for sharing! Very Cool
&gt; What I'd love to be able to do is write a script that creates new email addresses (ideally from different domains, but one would be a great start) so that it's much harder for the recipients to block/filter them, and be able to send these cockroaches emails every day That is a textbook example of spamming, it's unethical and even illegal in many jurisdictions. There are throwaway e-mail services, and I believe some of them come with an API, or you can drive them through HTTP, but they tend to be receive-only (for good reasons, too). If you do this from a regular mail server that you control, expect to be blacklisted in no time. And rightfully so. Which leaves us with botnets, where blacklisting doesn't work because you have many sending hosts at your disposal. Botnets, however, are expensive and also outright illegal to the point of buying you jail time if you get caught, plus you'll be dealing with some shady types. So, uhm, just don't, ok? If you want to properly solve this, send them a regular e-mail, polite and from your real address. Or better yet, call them. And if they don't stop, call them again, and again, until they do.
Already started posting the tutorials from saturday - https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw
Roger. I'm probably gonna run out and grab some donuts so if you see a guy carrying two large pink boxes come snag one!
Looks awesome! I've a couple projects on the back burner I've been wanting a nice little curses UI for, but... NOPE. Will give this a try when back from PyCon
That complicates things, but it's still hard to say. With something like procedural generation I suspect the bottleneck will be I/O and possibly memory and not CPU, but it'll depend on how you do procedural generation. If you have a lot of numeric code (like procedural generation is likely to be) `numba` or `cython`will speed it up quite a bit. Big games (notably eve online and vampire the masqerade: bloodlines) have used python for the game logic side of things and been fine. Just make sure your algorithms are solid.
There's some duality between Django and Flask micro-ness, but not too much. Both can be as minimal or as fat as you like. Django has more plugins in the core, while Flask accommodates different plugin choices by not having plugins in the core. Up to you if you use none, some or most of it. It's all about whether you like Django's or Flask's core APIs, plugin options and other ecosystem things more.
So the safest route would just be to use C++ right? 
Not really, if your algorithms suck, your code will run terribly. (how many professionally made games written in C++ have you played that could be generously described as "poorly optimized") C++ is harder to read (personal opinion), so it would be eaiser to make those kinds of mistakes. These things come down to trade offs, if C++ or Python were the best language at everything then there'd only be one of those languages left (barring perhaps legacy considerations). Python will get your features written in it quicker, C++ will have fast numeric operations without trying too hard. C# offers some interesting middle ground, but perhaps that just confuses the situation. It's hard to know what parts are going to be slow before you write them. I find prototyping and getting features shipped to be much easier in Python, so that's what I would prefer, and then you can go back and optimize later.
I transitioned a personal django/less/coffeescript project to full docker cross platform development. I'm using multiple containers and docker-compose. It has been a massive pain, but mostly because I don't know what I'm doing. My main criticism is that the tools seem new, and help is not widely available. I haven't come across any bugs but there isn't significant stack overflow depth to mine for answers. I have it mostly set up, the biggest (yet unsolved) hurdle is getting file watching working in a manner that pleases me. The python side has been fine, it's actually nice to be able to script the uwsgi/postgres/nginx setup. Make it work once and it works repeatedly and consistently.
This is how I found struct. Super useful.
Does it support concurrency using async def / @coroutine ? Or is it mostly callback based?
I am interested in using it! But I have a library which I cannot compile. most probably DLLs only
It's very similar to my https://telegram.me/pockebot. :) Nice to meet you.
Docker support for Windows is really weak and using it is pain in the ass. 
Totally agree with your list. From what I can see on https://us.pycon.org/2016/schedule/talks/list/ , you'll have : - "Machete-mode debugging: Hacking your way out of a tight spot" by Ned Batchelder : https://us.pycon.org/2016/schedule/presentation/1658/ - "Statistics for Hackers" by Jake Vanderplas : https://us.pycon.org/2016/schedule/presentation/1576/ but the other speakers do not seem to be giving talks. 
Django is massive. Just because you can choose to not use most of it doesn't make it a microframework. 
Yeah well I worked with some data for my job but mainly with excel. Eventually some data was just too big to loaf into excel so I Googled around and found python and pandas. Now I automate reports and ETL. Basically all of the things I used to do daily with excel are done before I even arrive at the office. I do my data clean up with pandas and then use tableau as a dashboard for for end users. I also do some analysis and resource planning. I read python for data analysis and Googled a lot. I also watch pydata videos on YouTube. I officially have two team members now and I formed my own department at work which is cool. I love it. 
What's wrong with it?
Yes. I treat my docker containers as static binaries. My tests are run after the container is created (Jenkins trigger based on repository changes to release branch), then Jenkins uploads it to our local registry and emails the sysadmins to deploy.
My guess was that you'd type def f(x): return math.cos(x) And when you hit return, you'd get `import math` automatically inserted at the top of your file. Still sounds dumb.
Nah. My imports generally go: # future from __future__ import unicode_literals # stdlib import os import sys # framework from django.infinitely.nested.packages.seriously.namespaces.arent.that.cool import function # project from website.models import Item # current package from .models import Price There's no particularly easy way to define that rigidly for some auto-importer to get it right, so I'd have to manually sort them myself whenever it does something. Also, if something else is writing all my imports, how am I going to know what libraries to install when I come to sit down and write my own project? Auto-importing is a crutch.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/comcast] [Comcast\/Xfinity usage monitor script (Long) : \[x-post Python\]](https://np.reddit.com/r/Comcast/comments/4lpb8c/comcastxfinity_usage_monitor_script_long_xpost/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
First of all, Docker uses Linux Kernel features... something that is often not available on Windows.
Been using Docker before it was released as `Docker`. We built an entire SaaS product on dotCloud in 2012. The company I work for now is fully adopting CI with Docker. My only criticism now is that I work on a Mac and I don't like the virtual box requirement, but this is temporary. The tools have come a long way!
Oh that is great! I made yesterday a bot that pokes fun of my friend (It tweets everytime he loses a game of dota2). One thing I was wondering is how to get the acess token from my bot account. Right now I can only tweet from my main account. :(
Why care so much about what other people choose to use? They're giving you free access to a resource. Would you turn away and complain about a free, freshly made burger (or whatever your favorite food) only because they delivered it in foil instead of parchment paper?
What do you feel is so horrible about it? 
Git (not github dipshit) has nothing to do with this discussion.
Nice timing, I recently found the curses library but it made little sense to me. This looks great and I will try it soon. :)
Docker is pretty decent its upsides are that its basically a light weight answer to shipping around heavy vms. Instead you can distribute the process configurations. The downsides: - The calls. The typical way you work with docker is to bind a bunch of environment variables to the process you want to run in the container. This can make the calls very verbose. Most of my calls end up looking like this... docker run --name mysql \ -e VARIABLE1 \ -e VARIABLE2 \ -e VARIABLE3 \ -e VARIABLE4 \ thename.of.my.docker.image:tag mysql - It has file layering, basic configuration metaphor(the DOCKERFILE), and a versioning system. Its never been clear to me what the best way to proceed with these features are. Should I build a working docker file and add versions as I need them? Are versions only for data and the image should be a working thing? The feature set seems a little soupy. All in all I am a fan, but its not without its problems.
Why only the tutorials? The keynotes etc have not happened yet?
No. https://us.pycon.org/2016/events/ 
https://github.com/timothycrosley/isort will sort imports in the correct order. It's great; it saves time wasted fiddling with import sort order. 
I don't as long as he keeps it to himself. When somebody tries to share something with me on Dropbox, then I care. I know it sounds irrational, but I had to use Dropbox for a long time (and still has to), and I just don't like it.
Lots of interesting talks by interesting people. However, and I don't mean to go all SJW, but it would be nice if one of PyCon's keynote speakers wasnt of Western European heritage. It's uncomfortabke that it's like this, since everythin else about the talk selection shows diversity. The message given is if your ancestors weren't from Western Europe, you aren't good enough to give a keynote. :(
Docker uses a client/server architecture so you can use a Windows/Mac native docker executable that connects to a 'remote' docker daemon. Docker Machine makes it super simple and configures a VM on the virtualization platform you prefer (eg Virtual Box, VMware, Hyper V etc)
how many get tweeted by GVR though?
Hmm, I guess I just don't care about the web interface. I'm only interested in file synchronization, but on the topic of interface, I find google drive to be extraordinarily odd and unusable. I've looked in to ownCloud, but I just don't see the point when for the same cost as a private server, I can just pay someone else to handle the maintenance and upkeep.
As far as I am concerned google drive is a non-starter since there's no support for Linux.
I don't think there's a clear correct answer here. One idea is to have two exceptions: `StopIteration` to signal the "normal" end of an iterator and `IterError` to signal the unexpected end of an iterator. The first would be used to in for loops and iterator classes. The second would be raised when calling `next` on an empty iterator or attempting to zip different length lists (I don't like the current behavior of silently ignoring elements from the longer sequence).
Some modules have non Python requirements 😉
Me and a friend made this game last year using PySDL2: https://bitbucket.org/treehousegames/pylaxian/wiki/Home It's completely unoptimized, but it might give you an idea of what you can do with PySDL2. Having used PySDL2 a lot in the past, I would say the main bottleneck is sprite rendering. There is no way to batch render sprites, so you basically have to copy each sprite over manually in each frame, which becomes a bottleneck even if you're writing your game in pure C or C++ (even moreso in Python due to overhead of ctypes calls). That said, it's perfectly possible to do a few thousand sprites a frame. Just keep your sprites as big as possible, instead of using many tiny sprites such as in a tile based game. These days I'm using pyglet, mainly due to the awesome Sprite batching. You can make a scene with a few thousand sprites, and just move the camera around with a little OpenGL. If you're not dead set on SDL2, maybe give that a try as well. 
I'll be there.
1) Don't use `eval` unless you're sanitizing the input before using it; I could enter `import shutil; shutil.rmtree('/')` and delete your whole machine; use `int()` and check for `ValueError`; 2) Check your indentation; just by the paste you did here, it seems you're mixing tabs and spaces and that's bad (and really confuses the compiler); 3) /r/learnpython 
Note taken... Ive never had Voodoo donuts.
Have you actually used go? Places I use python I'd never want to use go, and vice versa - they solve very different problems. 
In python though, types are ignored by the interpreter altogether. So there is no gains at run time or while the code is compiled. The purpose of this is to catch bugs before your code is run, it makes refactoring much easier and also if you use IDE that supports it (PyCharm is one) it can provide much more useful autocompletion. This can also be used to help migrating python 2.7 code into python 3, that's why Guido added 2.7 support to mypy, even though 2.7 does not support type annotations (in that situation types are provided in the comments)
&gt; 3) r/learnPython I'll check that out as well. It's mainly the part where you have a For loop and then will have a couple lines of code that are outside of the For Loop and when I try inputting the code that's out of the For loop, it gives me the syntax error 
Holy crap! Works perfectly:) Part of me still wants to use Sublime text just because I prefer it's workflow and visual appeal better for developing Python/html/anything-web-related.
You just got me thinking about my dependencies, is all. GitHub is another for-profit thing I rely on that mostly packages up a free tool I already have. I guess I'd argue that there are a number other such examples out there- things that are not pure, but very useful.
Docstrings worked fine before and also works with Python 2. 
Played with it a bit this morning, seems lightweight and neat. Thanks for the heads up!
The author works at Dropbox. Here's a link to the PDF direct download: https://www.dropbox.com/s/efatwr0pozsargb/PyCon%20mypy%20talk%202016.pdf?dl=1&amp;pv=1
what is this MyPy thing? An alternative Python interpreter?
The result of `input` should be converted from `str` to `int` and `float`. num_of_nums = int(input("How many numbers do you want to average? ")) sumatory = sum(float(input("Enter a value: ")) for count in range(num_of_nums)) average = sumatory/num_of_nums print("The average is:", average) Also, don't use `eval`, never.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt; how would the progress bar know what 10% complete was? Well, it would of course simply show 10% once it has reached 10% of the total way until the last digit of pi. After all, its existence is part of your initial assumption.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Static typing is most useful when it's not an option. Python is trying to have it's cake and eat it too. The fact that we now have a new strange syntax to support a feature which is central to modern languages like C# only solidifies my opinion that Python is a stop-gap language on the path to something better. EDIT: just to clarify, what is the downside of enforcing static typing across the entire language? You lose some dynamic features (which tend to just be hacks) and have to type a bit more. But what you gain is enormous productivity in terms of faster development, much easier tests and automatic refactoring.
Seriously, Google drive's UI is like a file browser from the 80s. Dropbox has revision history and fast syncing without the headache of managing my own server. Color me unimpressed with u/hemenex's critiques.
(new flask maintainer speaking here) I haven't listened to any podcasts with him, but what you see isn't my impression at all. This blogpost is actually by Armin, and he was the driving force behind the new features you see. He does use Flask at work, as far as I understand. The project being in more hands is definetly better for everybody, since we're now able to fix longstanding issues that require time Armin never had. In that sense, we're "completing his vision", but there are also a lot of entries in the changelog that Armin didn't initiate.
&gt;Support letting **quality artisans** add **real value** by quickly but durably making specific experiences Not just artisans; *quality artisans*.
Some Grape Ape never hurt!
Google for beautifulsoup.
I write C# for my day job and it's super useful to be able to put the cursor on a type and hit F12 to see exactly what that thing is and what can be in it. 
Thank you. That was the kind of answer I was looking for, but I didn't know the separate progress bars could be combined using tqdm. Would you happen to know how to merge them together if they are independent loops? 
Writing code is considerably easier than changing entire cultures. In fact I'm not aware of many (if any) ways to change cultures which aren't deeply upsetting.
&gt; Listened to an interview with the creator of Flask, and I was surprised by how nonchalant its creator was about it. Didn't seem like he uses it much, even. I use it on a daily basis. Not sure what you expect from me. I'm not a man of emotions when it comes to technology. My vision for Flask was always the same and I think it's in the docs: build something that's fun to use, simple and does not result in feature creep.
Or just work around the GIL.
Isn't that what dropping into C does?
Also, you're overwriting 'sum' which is a builtin method.
I'll come on by
surprised by the lack of interest for this on r/python …
Take a look at [this pdf book](https://automatetheboringstuff.com/chapter11/) 
Yes, but Pyramid (though not Pylons) predates Flask. 
ok at least, there is an abstract on the pycon web site : https://us.pycon.org/2016/schedule/presentation/2101/ &gt; Removing Python's GIL: The Gilectomy &gt; &gt; Larry Hastings &gt; &gt; CPython's "Global Interpreter Lock", or "GIL", was added in 1992. It was an excellent design decision. But 24 years is a long time--today it prevents Python from capitalizing on multiple CPUs. Many people want us to remove the GIL. &gt; &gt; It turns out, removing the GIL isn't actually that hard. In fact, I already removed it, in my experimental "gilectomy" branch. But the GIL is one reason CPython is so fast! The "gilectomy" makes CPython shockingly slow. &gt; &gt; This talk will discuss the history of the GIL, how the GIL helps make CPython fast, how the "gilectomy" removed the GIL, and some ways we might be able to make the "gilectomy" version fast enough to be useful.
Looks really cool. As always with slides, you are missing most of the stuff in the presentation, so this left me with a lot of questions: * Can I use static typing to say that the input should be a list of integers, as opposed to a list of floats or strings? * Can I just write this syntax, or do I need to import a module (`from __future__ import static_typing` kinda thing?) * Does this work in ipython/jupyter notebooks?
Would you prefer engineers?
in other words: I am running program **read_input()** that 'listens' input state that is either 'A' or 'B' or 'C' in this order A, B, C, A, B, C etc. It listens it every 500ms but it may take random time period between A, B or C. In the meantime I want to run another program that will start and stop timer and append timer value into a list. Timer starts if read_input returns 'A' and timer stops if read_input returns 'C'. is this possible with python 3.5 to run the second program in the meantime that executes timer as described ? 
Which one do you want? There's a reprint of the first one (the blue) available at pycon now.
You are an idiot, seriously dumber than a bag of hammers. How do you power up the computer machine by your self?
I'd prefer *anything* that isn't ridicilous and glorifying. It's like calling yourself a blacksmith when you're doing tax reports. 
I've used it. It makes it a little better, but all it really does is eliminate some redundancy and unify the configs for multiple containers. You still need all the same information.
Have you never encountered one of these modules? Maybe you will when you have more Python experience. Or are you just a troll at this point? I honestly couldn't distinguish your comments on here from someone who is intentionally trolling - a testament to your rhetorical talent.
Certainly any time-series data frame pulled from each could be easily joined together using standard pandas functions, but I'm not sure I understand the use-case quite well enough to say beyond that.
See you guys there!
Last I looked at AWS, their free tier was only for the first year, then you start to pay. It's still a nominal amount, but no longer free.
Big fan of Pyramid. Well thought out, stable, solid, easy SQLAlchemy integration.
I would say "no" because Pyramid is defintily not a micro framework.
that's useless. When you make an assertion, you want to customize the error message, not have an automated one...
What happened to your post?
If you're IO-bound, the GIL doesn't matter, and sockets and files aren't limited by the GIL.
They're both Python frameworks. They can both do the same thing as the other one. It's more a matter of preference. I would be OK using Flask for a small project that's just going to have a few endpoints. Django is better for large projects where you're going to have multiple apps working with each other and more endpoints. Flask can totally do these things, of course, but I like the way Django does everything better. URL management is so much nicer in Django, too. I haven't touched Flask in a few months, but I don't recall it having anything as nice as Django's forms, either. Django also gets updated a lot more frequently than Flask.
https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw :-)
Gorgeous design, looks way more inviting than before, perhaps I'll give it another try :)
Curious why you think these (aside from the request thing) are better than in Flask Edit: Also, how does WebOb compare to werkzeug, if you have experience delving into some of the plumbing. Since Flask is essentially glue between werkzeug and Jinja2 (with some click and itsdangerous), it feels somewhat natural to invoke some werkeug stuff directly (e.g. doing custom content negotiation). 
Sorry I missed it- you guys going anywhere tonight? 
There is talk of meet up at ground control tonight. 
Edit: TL;DR: flask is cool, but read on for some points on why I believe everyone should give a try to pyramid. I believe that blueprints doesn't cut it, makes the architecture really scattered, instead of modularized. if you look at a slightly bigger project with flask, things start to get hairy, repeated. the reason why I say routing is better, and the DI too, is because you can run a predicate (before request/after request) in any arbitrary group of routes. more DRY, if you ask me. while blueprints does support that, you get to the point I made, you will really repeat, scatter and mess stuff up. In summary, I like flask, but I don't like how it "scales" with the size of the codebase. I will edit this on a computer later with more details on plumbing and other things. Edit: elaborating more on other stuff. Rendering: `flask.jsonify` is lame. This is much better and flexible (you can also use the default JSON renderer and just return a dict): on config/app/whatever: from pyramid.config import Configurator config = Configurator() config.add_renderer('myjson', JSON(indent=4)) then called with from pyramid.view import view_config @view_config(renderer='myjson') def myview(request): return {'greeting':'Hello world'} About `webob`: the layer of abstraction between the request/response and raw wsgi isn't much fancier than flask's werkzeug. It's how that request is passed around that I care about, not the `.data` vs `.body` vs `.json_body`. There won' be bugs there, and I shouldn't need to fiddle with it. If I need to do something closer to the lower layers of the network, I'll just use a socket. There is also the fact that the webob supports event subscribers, which is a big step up on the `before_request/after_request` on top of app root simply because you can define your own events. 
When I was in grad school, our shuttles had GPS tracking so we could access a map to see where the bus was, or open a simple webpage that showed the bus's most previous stop in text form. Every morning before I headed out, I would check the location of the bus. If it was far away, I would start browsing the Internet, get distracted, and subsequently miss the bus. I created a Python script that scraped the text-based webpage every 10 seconds. Once the bus passed a certain bus stop (a few stops before mine), the script would play a .wav file to remind me that I'd better get going or else I'd miss the bus. It was a super simple script but immensely useful.
That was fun guys! Anyone post that picture that was taken? Would love to see it.
Super cool to meet and everyone! Thanks for coming out. I'll head to the donut store earlier and wait it out next time!! Will post the meet-up pic ASAP and reply with link here. 
Maybe don't use a notebook for that? You can structure it as a python script with multiple modules and everything. I suppose you could still access it via the Jupyter notebook. Alternatively just deal with having a large notebook. Upstream support could also be added for large notebooks (sections or tabs, or something), but I don't think that's a great idea either.
It's made from 100% organic code.
single origin/master
Should I schedule an open room tomorrow? If anyone is interested I can go over details there.
/r/learnpython 
While I am sorry you feel this way I suspect this may be a case of "message received" vs a "message given". Personally, I love diversity of every kind. I think it makes us better in every way to include people from all walks of life. But we cannot call ourselves diverse because we select people (or ask for them to be selected) for certain positions or roles because of their nationality, race, religion, gender, etc.... This is actually exactly what we say we are fighting against! We will only truly reach diversity when we can select and accept speakers, employees, etc for their merit and value outside everything else. Hope you were able to enjoy the talks!
or, better yet, use Python 3.
I found [this](http://www.amazon.com/Web-Scraping-Python-Collecting-Modern/dp/1491910291?ie=UTF8&amp;keywords=python%20web%20scraping&amp;qid=1464661216&amp;ref_=sr_1_1&amp;sr=8-1) to be a great reference when I was starting.
 **Web Scraping with Python: Collecting Data from the Modern Web** |||| --:|:--|:-- Current|$30.39|Amazon (New) High|$30.39|Amazon (New) Low|$24.31|Amazon (New) |Average|$30.39|30 Day [Price History Chart and Sales Rank](http://i.imgur.com/MHRSDVQ.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
i am a chinese programmer,and i also wanna to go to america to read my cs PHD , 
I'd like to say that I'm new to Django, and I've worked with Flask in the past. I prefer Django over Flask, and have had a much more pythonic experience in Django 1.9 than I did in Flask. Even if Django may be overkill as some people say, it still really only provides the things you're gonna want in a website anyhow should you turn this project into a reality. I just had a harder time in Flask.
The view/model system in django is easier for me to understand, and seemed far simpler in my head over Flask. In flask I had some logical hiccups in trying to understand the order of operation. In Django that is not an issue and I feel free to build up how I wish.
Does it have a racist/bigot mode? /s I'm looking at you, Microsoft.
That's probably our event: http://www.meetup.com/linode/events/231242495/
Can't test right now but how well does it work with two affirms on the same line?
Are there particular parts of Django you need help wrapping your head around?
Start with Django and you end up tearing out the DB abstraction, authentication, caching, admin pages, etc. and rewriting them to suit your needs.
A year or so back there was [this tutorial](https://www.fyears.org/2015/06/electron-as-gui-of-python-apps.html), I think it may do what you want. It uses Electron as a front end to a Flask server.
It's worth your time to invest in Django, though.
Does this do much more than flake8? It mentions being pluggable and the like, are there any examples of useful plugins anyone can point me to?
Ah, my bad!
Eat memory.
That website is so confusing. I generated a public key and don't understand how I can upload files.
That they write code using [butterflies](https://xkcd.com/378/).
All of my new projects at work use type annotations. I find them very useful.
Why can't mypy improve performance? If you can infer the types of variables, can't you do compiler optimizations at the bytecode level that CPython cannot?
Of course it is, they rather be called African American Smiths.
I'm curious how much, if at all, this mucks with the duck typing nature of Python?
Django is quite easy to learn, but there is a lot to learn. However, their tutorial (and documentation) are great. If you're seriously interested in web development, I say you should have a go at it.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [I just released my first public Python module! SPF2IP: Reads the SPF record for a domain, and outputs all of the IP addresses within it (X-Post from \/r\/Python)](https://np.reddit.com/r/programming/comments/4ltip8/i_just_released_my_first_public_python_module/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I worked on a Flask project for a while and the "you will recreate all of the niceties of Django" line is so true. That being said, for a first project there's definitely some benefit of having a better idea of how it all fits together and putting the site together piece by piece in Flask is a great way to learn. I see it kind of like learning how to program in a language like C or C++ and learning how memory works, even if you always use a garbage collected language in the future. It's good to have an idea where it comes from in my opinion. Some people also just enjoy choosing exactly what they need in their project instead of having it all built in and there whether or not you use it. Don't stress too much about framework though. No matter what you choose, at some points you will wish you chose the other one and will think that would have made all your problems go away. It wouldn't have. The most important thing is to just get in there and start working. Then for your next project you'll have way more perspective for making your choice. 
Check out Pyramid. 
Type annotations don't work in python 2.
Tools have been written to work with docstrings for years, so now they have to write new code for the type annotations. It's two standards instead of one like before. The new standard is obviously better, but investing more engineering hours into ONE system is also better...
Pyramid is much more batteries included than Flask, but like Flask has more optional elements.
Can't you timestamp? That is, I don't know what's your required measurement precision level, but in practice anytime I wanted to measure *delta* between events X and Y I had a line of code bundling the read with a timestamp into a tuple. This you can then forward into virtually anything. It's worth pointing out it may be a better solution, since assuming consistent time basis between processes is pretty dependant on OS and you add a problem of synchronisation to your task. A UNIX timestamp is a solid and tested solution and even very advanced systems (e.g. [Operational Transform](https://en.wikipedia.org/wiki/Operational_transformation)) use it as a base.
Wait, I missed this?
I usually know what module/package I want, but I'm also lazy from using IntelliJ and Visual Studio so much over the years. Normally I just type code, and when I try to use something that hasn't been imported PyCharm will underline it red and I just let it add the correct import for me. The only time I manually type import statements is when I am using Jupyter notebooks.
It doesn't, althought it currently doesn't help much with it as there's no way of expressing Traits/Type Classes/Concepts short of horrible hackery with inheriting baseclasses, but that's a missing feature in python rather than the type checker
If you go to dev.twitter.com, click 'manage your apps' and log in with the bot's account, you should be able to create a new app and get access tokens and so forth from there!
Great to see their updates!
i didn't before reading the online doc, so, this answer may not be the best, but here is a quick guess: with tqdm(total=100) as pbar: for i in range(10): # do thing in first loop pbar.update(1) for i in range(80): # do thing in second loop pbar.update(1) for in in range(10): # do thing in second loop pbar.update(1) 
Sorry, tee-shirts are available only at PyCon. We expect a sell out. XXL have sold out already. Ask a friend to buy one for you.
that's quite cool, how do you use it to convert only one HTML string into json though?
If a library does what you need, don't switch. If you want predicates, traversal, no globals, etc., then Pyramid would fit what you want. The Design Defense is an excellent and long analysis of decisions made in Pyramid. http://docs.pylonsproject.org/projects/pyramid/en/latest/designdefense.html
 from Party import sausage
I prefer to manage my TODO lists on a paper but you gave me an idea. I created a simple GUI timer for my pomodoro sessions, see https://github.com/jabbalaci/Pomodoro-Timer . I mention your project under the Links. I hope you don't mind that I borrowed your sound file.
Shouldnt it be `from party import Sausage` ?
this is impossible in every language
all values of n in this loop are integers integer division rounds down in Python try 1 / float(n) float division does not round down
Is there a way to add extra features to the class A ? Here is my problem. I use a Image module very handy to use : im = Image.open("img.png") im.rotation(90).resize((256,256)....show() I want to be able to add my functions so it can work like that : im.rotation(90).user_defined_function(param)....show()
Plus a real live woman, I'm impressed!
Time to donate again. I've been impatient to see how the Pyjion JIT will turn; if PyPy gives Python 3 some love there'll be 2 options. Go PyPy.
It isn't possible without finding some object invariant form (3dim tensor for images, for example), sub classing, and using a class method that instantiates via that invariant form. Also, Inheritance isn't the only way game in town. [try out composition], which basically just means writing a wrapper class around the object.
They line up "well". Not "perfectly": def gcd(a: int, b: int) -&gt; int: def gcd(a, b): # type: (int, int) -&gt; int it's worse in more complex examples: def gcd(aasdasdasdsa: int, basewqewqeqweqw: int) -&gt; int: def gcd(aasdasdasdsa, basewqewqeqweqw): # type: (int, int) -&gt; int where they don't line up at all.
No joke. `Party` is seriously non-compliant!
[The official schedule](https://us.pycon.org/2016/schedule/talks/) doesn't have the video links (yet?), but I find it a nicer view of the available talks, so I'm browsing through that and then finding the talks I want from YouTube (/u/coderanger already posted that link).
There are no details.... How will this be different then the python framework (whisper etc) that powers graphite?
You can't really do this regardless of what language you're using. **Casting** is something in statically typed languages where you have something you know is "really" a B, but your type system only knows as an A at this point. Casting is basically bypassing the type system by telling it "I know that this object is really a B, so treat it as such". However, if the object is **not** really a B, then bad things will happen - either an exception in a managed language like java / C# (these perform a runtime check to make sure it's *actually* a B), or a segfault or even memory corruption in a language like C/C++ (these just trust that you're right about the type - no runtime check). Python isn't statically typed, so there's no need for casting, but it isn't different in this respect - to treat an object as a B, it needs to **really be** a B. There's no real way to magically convert an A into a B, so you'd need to write a converter method specifically for that type and use that. 
Hey there guys, check out my new little library which brings f'style' literal strings to Python 2.x and 3.x. These are going to be supported in Python 3.6 and are really useful. You may [also check this project out on GitHub](https://github.com/fgimian/formatizer) as PyPI is acting up a lot right now :( e.g. from __future__ import print_function from formatizer import f GREETING = 'hi' def main(): name = 'Fotis' print(f('My name is {name}, I say {GREETING} and 1 + 2 is {1 + 2}')) if __name__ == '__main__': main() The output of this would be: My name is Fotis, I say hi and 1 + 2 is 3 Hope you find it useful :) Fotis
It fits nicely into a middle ground if you expect to need to customize a lot about your application while growing it to large size. (It's also the only major framework around with support for traversal). Django is great if you need a cookie cutter website without too much customization. Flask is nice if you don't expect to need to start configuring many tendrils of the application, and the site won't grow too big. Pyramid sits comfortably in between them, allowing customization and organic growth with sane extension points while not having opinions about what goes where. 
Just output HTML?
Thanks Nerdwaller, that is something I'll investigate. Cheers! 
Thanks elbiot, will check it out! 
neither are "micro" in my opionon. They are both fast though.
Beautiful stuff, thanks so much!!! :)
Both webob/werkzeug are very capable.
Just don't expect this to work with 1.7 for now, you need 1.6.1 - 1.7 default scaffold changes a lot (for the better) and I basicly have to redo the tutorial.
you literally are living my dream ...kinda! That is freaking awesome, mega kudos to you good sir or madam. I'm still not positive how I can use python in my company but I know I want to work with python and automation. I'm trying to motivate myself but the best thing thus far has been to find a way to use it. Once I was able to work on that utility I learned a TON. Thanks for sharing that bit of info, its motivating for sure
Seriously. Looks like it was right before the 4:15 talk, so...
There are a lot of companies using pyramid, you are not alone here ;-) Even reddit itself uses pylons which pyramid is successor of.
Second this, but only after you have the basics down. This book is more intermediate level, but is a godsend when and if you need data that is not on a simple, nicely-formatted and hierarchical html page.
Chrome. Firefox. Relay for Reddit's browser. Anything. [Here's a screenshot](http://imgur.com/746tuvC). Maybe you can't tell from a full-size high-resolution screenshot, but that font is *tiny*, especially in code samples and the navigation menu. (I had to try several times, using the sliver of flesh on the side of my fingernail, to activate the menu.) (Also, the Pyramid website is in node.js??) EDIT: Submitted a couple of tickets on github.
But... what about all my pedantic, passive-aggressive git pushes that only have "pep8" as the commit message?
Thank you for responding instead of down voting. &gt; We will only truly reach diversity when we can select and accept speakers, employees, etc for their merit and value outside everything else. You are saying "diversity" means we can't have a non-white keynote at pycon? This doesn't make any sense to me. According to this statement none of us who aren't of western european heritage are good enough. At PyCon India they always manage to get someone not from India to speak, because they believe diversity means we have outsiders speak at that event. Here are your words again: &gt; We will only truly reach diversity when we can select and accept speakers, employees, etc for their merit and value outside everything else. At PyCon I enjoying talks and meeting a diverse cast of people who do Python. Some of them are exception, and have changed lives of thousands of people. Here's a list: * Renee Chu, gave a tutorial on scientific data wrangling and a talk on unit tests * Pramod Gupta, giving a talk on computational physics and python * Ashwini Oruganti, giving a talk on peer review and current PSF board member * Kushal Das, previous PSF board member and instructor to thousands of us on python and linux, very good speaker * Audrey Roy, Creator of Cookiecutter, author of Two scoops of Django, common speaker * Al Sweigart, author of Automate Boring Stuff with Python, highest selling python book on amazon * Wesley Chun, author and instructor for google Any of these people could have given keynote talk at pycon. However, according to you, thanks to "diversity", none of them are eligible to be keynote speakers at PyCon. Again, your words, not mine: &gt; We will only truly reach diversity when we can select and accept speakers, employees, etc for their merit and value outside everything else. Reading this makes me very sad. I have enjoyed pycon, but I will not return. Not if it is clear from the beginning that if you are not white, you cannot give a keynote speech at the event because "truly reaching diversity". Also, I am leaving reddit. This whole experience of this discussion has been demoralizing. I can't continue here and keep my self-respect as an Indian.
I am sorry you took things that way, but that is not what I meant at all. And just to be clear I am not associated with PyCon either. Unfortunately, I was not able to attend this year but I am enjoying the videos as they come out. I was saying we reach true diversity only when none of that matters. I am all for an Indian speaker, but I am against an Indian speaker simply because they are of Indian decent. Just as I am against a European (or white) speaker simply because they are of that heritage or color. What I was saying was not intended to be any sort of attack but rather a pointer to try to see things from a different aspect. I for one do not believe they selected any of the speakers because of their nation of origin. Yes, I could be wrong but that is what I choose to believe. I hope you choose to stick around we need all sorts of people and opinions around. Civil discussions are healthy for us all when we can treat people with respect. I was trying in that I am sorry if you do not feel the same. It was in no way my intent to offend you.
&gt; eard that mainly Python devs were moving towards it. Is this true in your opinion? So far, I've seen the major of the Python influencers and evangelists going to Rust instead of Go. *Edit*: Ok, let me be honest: The only Python big name I've heard talking about Rust was Armin Ronacher, from the Flask+Jinja+Werkzeug fame. I may have heard other talk how to connect Rust with Python but so far it seems Rust got more traction into the Python land than any other language. YMMW.
I've had [no responses in 9 days on r/raspberry_pi](https://www.reddit.com/r/raspberry_pi/comments/4kg774/anybody_have_pypy3_240_running_on_raspbian_jessie/), so I'll give another shot -- I'm completely new to PyPy, and I'm most interested in getting PyPy3 running on my Raspberry Pi 3 (running Raspbian Jessie Lite), since I think this is where I'd enjoy a performance boost most. Unfortunately, I'm not having any luck using the precompiled binaries for Raspbian, since they seem to be looking for libffi.so.5 (maybe the default on Wheezy?) instead of libffi.so.6. I've also tried compiling from source (with `pyenv`) multiple times, but it seems to lock up my poor little Pi. Does anybody have PyPy3 running on a Pi with Raspbian Jessie? If so, how did you install? Should I be using the portable version? If so, are there any disadvantages I should be aware of compared to a normally compiled version? Thanks in advance for any suggestions or tips -- hopefully this isn't too far off topic for r/Python! EDIT: I hope this is appropriate (and not a hijack thread), as I'm excited to see PyPy3 with 3.3 support and tried downloading the compiled Raspbian executable this morning with the same results: $ bin/pypy3 --version bin/pypy3: error while loading shared libraries: libffi.so.5: cannot open shared object file: No such file or directory EDIT2: Not entirely satisfactory, but as a workaround, the following makes the pre-built Raspbian binary work: `sudo ln -s /usr/lib/arm-linux-gnueabihf/libffi.so.6 /usr/lib/arm-linux-gnueabihf/libffi.so.5` EDIT3: Ends up you can actually just `sudo apt-get install libffi5` -- I was concerned this would overwrite my `libffi6` files or symlinks, but they appear to be just fine. The list of dependencies I install below is [the official list from pypy.org](http://doc.pypy.org/en/latest/build.html#install-build-time-dependencies) with the addition of `libffi5`, and I took out `tk-dev` because my Pi is headless and I don't want to install all the X stuff. $ ls -l /usr/lib/arm-linux-gnueabihf/libffi* -rw-r--r-- 1 root root 33016 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.a -rw-r--r-- 1 root root 34796 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi_pic.a lrwxrwxrwx 1 root root 15 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.so -&gt; libffi.so.6.0.2 lrwxrwxrwx 1 root root 15 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6 -&gt; libffi.so.6.0.2 -rw-r--r-- 1 root root 30368 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6.0.2 $ sudo apt-get install gcc make libffi-dev libffi5 pkg-config libz-dev libbz2-dev libsqlite3-dev libncurses-dev libexpat1-dev libssl-dev libgdbm-dev libgc-dev liblzma-dev $ ls -l /usr/lib/arm-linux-gnueabihf/libffi* -rw-r--r-- 1 root root 33016 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.a -rw-r--r-- 1 root root 34796 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi_pic.a lrwxrwxrwx 1 root root 15 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.so -&gt; libffi.so.6.0.2 lrwxrwxrwx 1 root root 16 Jun 13 2013 /usr/lib/arm-linux-gnueabihf/libffi.so.5 -&gt; libffi.so.5.0.10 -rw-r--r-- 1 root root 49712 Jun 13 2013 /usr/lib/arm-linux-gnueabihf/libffi.so.5.0.10 lrwxrwxrwx 1 root root 15 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6 -&gt; libffi.so.6.0.2 -rw-r--r-- 1 root root 30368 Jun 9 2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6.0.2 
Correct. Not a photographer. 
Don't forget to check [youtube](https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw) for the talks
Great seeing y'all! We should all add a Reddit flair to our badges next year so we can identify each other :)
if you are making a function that can only really work well as a statement, it might be more worthwhile still using `assert`, but modifying its output via `sys.excepthook`
I found this year's PyCon scandal! Give me karma!
It's *animated*
Basically every single person who said anything on the topic thought that fragmenting the subreddit into a number of other subreddits was a bad idea. 
Nah no solutions here. 
I'm at the conference. I would be willing to buy you one. Then you just PayPal me 20+shipping. PM me if interested.
The one thing I think this could do very well is for projects like Nuitka, which compiles Python for speed gains. Type hinting will really help with performance optimization.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
http://www.web2py.com/init/default/index
maybe https://github.com/wooey/wooey (seen on https://github.com/vinta/awesome-python#gui)
I use it, not for local dev but for hosting apps in our AWS environment. The AWS CLI + Elastic Beanstalk + docker is a pretty powerful combination. 
On windows :(
&gt; pycharm Haven't looked, would rather a code solution. Thanks
You can start with ImportD (the D is for Django): http://importd.readthedocs.org/en/latest/ minimalistic start-up like with Flask (everything in one file), but it's full Django. from importd import d @d("/") def index(request): return d.HttpResponse("hello world") if __name__ == "__main__": d.main()
[Embrace the power of AWK!](http://gnuwin32.sourceforge.net/packages/gawk.htm) 
What do we have? PROBLEMS! What are we going to do about it? Well... I mean...
Can you do this with an import hook?
Thanks.
I can't say that I'm too familiar with import hooks so I'm not totally sure to be honest. But it is just a basic function in a Python module. How do import hook usually work?
Do you have any recommendations for good pyglet and SDL resources besides what's available at their respective sites?
This is hella cool! Instead of humans classifying roads, train the computer to recognize roads and plot them. Never send a human to do a machine's job. 
Got some good ideas. Thanks to everyone who showed up. 🙂
http://stupidpythonideas.blogspot.co.uk/2015/06/hacking-python-without-hacking-python.html?m=1
They have an excellent [article](https://cloud.google.com/appengine/docs/python/tools/using-libraries-python-27#installing_a_library) for doing that! Based on that, it looks like you make a folder called `lib` in your source directory, then create an `appengine_config.py` (also in your source directory) that contains: from google.appengine.ext import vendor # Add any libraries installed in the "lib" folder. vendor.add('lib') and then install numpy into the `lib` folder with `pip install -t lib numpy`
The fucking OpenSSL thing is godawful. 
Hey, you can take a look at my [twitter bot](https://github.com/joaquinlpereyra/twitterImgBot), specially when it comes to requests handling. It does what you are looking to do too. It's pretty rough and maybe there's a better way, but all it does is it searches twitter every minute for tweets containing a string and responds to them meaningfully. The library to handle the twitter API is Tweepy.
Thanks, I'll have a read of these tonight :)
Great job, sounds like you went ever further than I did there. I attempt to do all of this in Python by essentially re-implementing `string.Formatter`. I still use the C speedups and simply use `eval` and bring in `locals()` and `globals()` from the caller when encountering a format string / expression. Most importantly, I wanted my solution to be easy to integrate without too much hackery where possible. This works similarly to the `u` and `b` functions in the six library for example :)
This page comes back pretty high up when trying to google "python" and "tree". I do see examples from that page coming up on stackoverflow as well. I've tried to contact James over email but get bounceback, and I do see him on linkedin, but I can't contact him there, so I'm trying it here :) The example provided on that page includes this code: class node(object): def __init__(self, value, children = []): self.value = value self.children = children This causes all kind of issues :) It should be changed to class node(object): def __init__(self, value, children = None): self.value = value self.children = children or [] Explanation on why this is bad thing to do is here: https://docs.python.org/3/tutorial/controlflow.html#default-argument-values I do understand that this is an old page, but if we can get it updated - that would be a good thing to do and will eliminate a bunch of new stackoverflow questions like this one: http://stackoverflow.com/questions/25437376/implement-a-tree-where-children-and-parents-can-refer-to-each-other 
I prefer the centralized django, it has most of the tools you'll need for your website and the documentation is really good. Also the code is understandeable and you can easily override behavior using class based views. I tried flask once, it was really nice to start a small project with it but I struggled a little bit with SQL Alchemy and setting up migrations. I probably need more practice with it though.
Install Beautiful Soup and read the docs, it's plain simple to use.
Hey, sorry, but no. I'm quite busy at the moment. Anyway it would be a lot to delete, the bot is not intended to handle only that use case. But you can look for inspiration there and look the Tweepy documentation.
Nice to meet everyone and talk about mostly non-reddit things!
This isn't very useful in real production code, but heck of a presentation to watch. Highly recommend. 
I like the idea of using a modified builder pattern to compose the pipeline, then execute it, like so: c = On(collection)\ .inc(1)\ .mul(2) # Nothing has happened yet. l = list(c) # All of the items have been acted upon now, and the results collected into a list. The way you implement something like this is pretty simple: class On: def __init__(self, collection): self.collection = collection self.pipeline = [] def __iter__(self): for item in self.collection: for stage in self.pipeline: item = stage(item) yield item def inc(self, n): def _inc(i): return i + n self.pipeline.append(_inc) return self def mul(self, n): def _mul(i): return i * n self.pipeline.append(_mul) return self 
I think a more pythonic approach would be chaining generator expressions, as described by [David Beazley](http://www.dabeaz.com/finalgenerator/).
This is definitely useful!! I'm still new to logging but it's already saved my butt a couple of times when trying to diagnose why an input was causing errors. Edit: The Survey Corps would be proud.
Was great. Sorry about the donuts :(
Website background makes you think your screen is dirty.
Sorry, I wasn't very clear. I have it, just a more recent version (I believe came with Jessie), and it doesn't work. $ dpkg --get-selections | grep libffi libffi-dev:armhf install libffi6:armhf install 
We kept our dongles in our pants yes.
They are pretty much the same thing. I don't know of any plugins unfortunately.
I noticed this too. It's very distracting! I think the only thing worse would be those very fine lines that cause moire patterns when you scroll.
Turns out the head of the university department hosting that page is someone I have interacted with many years ago. I sent him an email; hopefully he’ll get someone to update the tutorial page.
site was last updated in 2008 according to the change log. If this wasn't hosted by a school, I think we'd see it down long ago when someone stopped paying to host. it.
How many code bases do you need to do this for?!
Ah, yea that's true.
Python logging is so useful. I use LogFormatter from tornado.log for the pretty console colors fairly often. For development I sometimes use a websocket and TCP server written in Tornado that outputs and filters messages for anything that has logging.handlers.SocketHandler configured. In production the logging integration with Sentry's raven module can be really helpful.
Quite a lot of old code across multiple repositories! A bit of a PITA that they are using the old '%' style. Learning (G)AWK and have just installed Linux (Debian)for the first time in a Virtualbox, may as well go full hog!
P.S.: Your defopt library looks great too, may give that a go on my next CLI tool :)
That would be defeating the point of the fucking captcha and is the entire reason they are designed the way they are. Didn't you every wonder that?
Yeah you have the principle correct. The OCR part is the bit where captchas try and stop you by adding effects etc on top of the text. Some sites still use bad captchas which can be defeated by performing some simple manipulation of the image before you OCR it. http://www.boyter.org/decoding-captchas/ 
rust has better interoperability with C
I've used scipy to try and design a controller for a ship. Does that count?
The builder is not really convenient: * you have to define all acceptable operations on the builder so it's coupled with what you want to *do* * Python doesn't really like linebreaks Instead I tend to use a simple "application driver" similar to Clojure's `-&gt;` (except slightly less convenient as it's not a macro): def pipe(val, *fs): for f in fs: val = f(val) return val with a partial-application alias for convenience: from functools import partial as ap and a useful imports from itertools import imap[, etc…] from operator import add, mul[, etc…] and thus: c = pipe( collection, ap(imap, ap(add, 1)), ap(imap, ap(mul, 1)), ) When that's common enough, re-exporting curried versions of the functions might be even better than partially applying them: from curried import imap, add, mul c = pipe( collection, imap(add(1)), imap(mul(1)), ) The most annoying part is that comprehensions and methods are inconvenient in this pattern (they have to be wrapped in lambdas), on the other hand this is not limited to collections, the pipe can be used on any object. A more complex version of the driver could also take "operation tuples" of e.g. `(fn, args)` and obviate much of the need for explicit partial application, but IME it's not really clearer or more convenient, it just makes the driver more annoying to write.
As a side note, I commented the following on his post ; I need to re-check my sources, but I am nearly sure of what I am saying : In a hyper threaded application, I used to log everything using `logging` module. However, I found that `logging` is a *really* slow package in a threaded context, that does not work very well with an application that require to be fast. Even by putting the log level to a higher value (let's say `warning`), the `debug` logging instruction require a thread lock at runtime which makes all your application slow (as much as I remember, I need to re-check to be sure). Be careful : as always in Python, standard modules have pros and cons :)
It is a good reference on logging in python.
One thing about using `__name__` is that it breaks the hierarchy for loggers. For example: In [1]: from bstats.bridge import Bridge In [2]: Bridge.__name__ Out[2]: 'Bridge' Here, what I *really* wanted was that `__name__` was `bstats.bridge.Bridge`. Why? Because I could set the handler for `bstats.bridge` to `info` and never get the debug messages from everything under it ('cause I figure out that was not where the problem was). Or the other way around: Maybe the bridge is acting weird so I could still log everything info and above and just `bstats.bridge` as debug.
What makes it so much better than the standard logging module? Also, do you have a link to some good docs for it?
&gt;* you have to define all acceptable operations on the builder so it's coupled with what you want to *do* I don't see that as a bad thing. The operations are well-defined, and thus well-understood. There is such a thing as being *too* generic. &gt; * Python doesn't really like linebreaks Seems to like them fine with slashes. It's the only way to make it work under that silly 79 character limit sometimes. &gt;Instead I tend to use a simple "application driver" similar to Clojure's `-&gt;` (except slightly less convenient as it's not a macro): &gt; c = pipe( &gt; collection, &gt; ap(imap, ap(add, 1)), &gt; ap(imap, ap(mul, 1)), &gt; ) The big problem I have with this is that it places the onus of understanding on the *user* of the code, and not the code itself. As part of an internal implementation it's okay I suppose, but that's a lot of complexity to be repeated if you're doing it in more than one place. &gt;When that's common enough, re-exporting curried versions of the functions might be even better than partially applying them: &gt; from curried import imap, add, mul &gt; c = pipe( &gt; collection, &gt; imap(add(1)), &gt; imap(mul(1)), &gt; ) And thus requiring you to provide all of these functions ahead of time, with worse encapsulation and a higher probability of minor namespace issues. &gt;The most annoying part is that comprehensions and methods are inconvenient in this pattern (they have to be wrapped in lambdas), on the other hand this is not limited to collections, the pipe can be used on any object. Because it does so little, yes. It requires that it's consumer do more work. &gt;A more complex version of the driver could also take "operation tuples" of e.g. `(fn, args)` and obviate much of the need for explicit partial application, but IME it's not really clearer or more convenient, it just makes the driver more annoying to write. Yeah. The problem with all of this is that it reeks of a functional programmer stuck in Python land. Python just isn't a very good functional programming language. Don't get me wrong, I have nothing against using functional strategies in implementation when it's clean and easy. I just feel that, on the whole, Python is really bad at it. 
If you are on Linkedin - you can find author's profile very easy https://www.linkedin.com/in/jamesdominy There is a pretty good chance you both have some people as "connections" there and you may be able to send him message over there. I don't have any common connections, so that's not an option for me. Or anyone who has "Premium" Linkedin subscription should be able to send him "InMail" and point to this thread :)
pretty cool man, would love the code
Thank you!
It depends, like all things, on the captcha. You fucking wank face.
If nothing else I'm consistent
Logging doesn't really change that: fairly detailed debugging statements end up cluttering the logs just like prints clutter stdout. 
What we need is something like DocOpt for logging: small, concise, and easy to remember - rather than bloated &amp; able to do everything in the world. Finding the answer to a config problem is delayed when you have to wander through a hundred pages of info about things like how to write directly to logstash, an email server, etc (even though you'd never do that, you'd use a separate utility to tail a log file anyhow). Meanwhile, you've got to go out of your way to format each log record with an iso8601 timestamp (which you shouldn't have to do), or configure log-rotation for your log file (which you shouldn't have to do).
Event-driven means driven by user actions. Maybe async as well as sync
First and foremost check and see if that website has a developer API to access instead.
thanks
I'm not a native English speaker, so I always read at least twice. My grammar is still bad, but at least I can fix formatting errors
Oh, the lightning talks are not going to be uploaded?
&gt; I need to re-check to be sure I think you *do* need to re-check. A lock is only acquired when I/O is done, and so won't be acquired if the logger or handler severity (e.g. `WARNING`) is higher than that of the call (e.g. `debug`). Obviously logging (like anything else) has a cost, but there are [documented ways](https://docs.python.org/3/howto/logging.html#optimization) of minimising this according to needs.
The recommendation refers to using `__name__` at *module* level - not at class level. At module level, `__name__` is the package name in the Python package hierarchy.
I used the Python [Control](https://sourceforge.net/p/python-control/wiki/Home/) library to emulate some matlab functions that we were expected to use. Modelling was using scipy's very powerful [integrate](https://docs.scipy.org/doc/scipy/reference/integrate.html) module, which allows for solving differential equations. If you dynamically reduce the timestep whenever acceleration grows, you'd be able to get a really decent simulation. I've never used PyODE or PyDy (though PyDy looks awesome). Have a look at this tutorial from SciPy 2015: [[Multibody Dynamics and Control with Python | SciPy 2015 Tutorial | Jason Moore &amp; James Crist]](https://www.youtube.com/watch?v=mdo2NYtA-xY) It is very well done, and includes everything from how to use SymPy and PyDy to dynamic simulation and controls, as well as visualization. Clone [this repo](https://github.com/pydy/pydy-tutorial-human-standing) to get started. I think if I had to do it again today, this is what I'd use. SciPy 2016 is next month.
[removed]
They were certainly recorded, not sure if/when they'll be uploaded.
&gt;**Introductory** Programming in Python &gt;**Advanced** Data Structures: Trees ... how?
The code is up on the GitHub here: https://github.com/brahmcapoor/Mercury !
It uses Werkzeug WSGI library on the server side and JQuery and Bootstrap on the client side as well as its own library. As far as event-loop is concerned, details are described here: http://jam-py.com/docs/programming/workflow.html
I did not know this existed. Thanks!
 if __debug__: #do expensive error checking stuff then you can turn off the expensive checks with the `-O` switch just like you can turn off asserts.
Anyone want to make any recommendations for good talks? I'm going to checkout a few when I get home from work. So far I'm just thinking about the webdesign for non-designers since I keep on getting roped into webbased stuff.
The ["Flask at Scale"](https://www.youtube.com/watch?v=tdIIJuPh3SI) talk seems interesting. Here's the description of the video: &gt;Do you think that because Flask is a micro-framework, it must only be good for small, toy-like web applications? Well, not at all! In this tutorial I am going to show you a few patterns and best practices that can take your Flask application to the next level. 
I don't work in IT. You could continue to do Freelancing in Python finding US clients(maybe your previous ones). Regarding consulting in Mumbai, maybe you could try the financial industry. But I have seen most of them interested in C++ people. For Mumbai, as there is very little IT in terms of mainstream IT, you could just look at Finance industry. 
Not according to conditional probability. Unless something supernatural made conditional probability not apply this time, it applies this time.
That link is a 404. You heard that Google Code was shutting down a few years ago, right? Edit: I think [this project](https://github.com/swinman/logview) is the same one just hosted on GitHub.
Anybody talked about [bottlepy]? Under [5000 lines of code] with no dependencies. Makes it a true micro-framework. They have a nice [tutorial]. [bottlepy]:http://bottlepy.org/docs/dev/index.html [tutorial]: http://bottlepy.org/docs/dev/tutorial.html#installation [5000 lines of code]: https://github.com/bottlepy/bottle/blob/master/bottle.py
Yes. I will check that out. I was trying to us Flask with AWS but I felt like I was out of my element and sort of gave up.
I was about to ask why I'd even need something like that. Then I saw your commment.
yea, I was the one that mentioned setting up tagging through flairs, and using automoderator to flair different posts based on keywords, domains, etc. then you can set up buttons in the sidebar to filter out certain posts that you ether want or don't want to see.
Damn, the conference isn't even over.
I agree - no real good reason for it. I wonder if changing it at this point would break much? I wonder if anyone has submitted a PEP proposal to change it?
[Here you go.](http://blog.juliusschulz.de/blog/ultimate-ipython-notebook)
If Python can't find the ubiome module, that likely means that your terminal session is not in the ubiome folder that's on your desktop. On OS X, this command will **c**hange **d**irectory to it: `cd ~/Desktop/ubiome` If your ubiome folder structure is set up the same way as it is in the GitHub repo you linked, then typing `ls` should show something like this: README.md ubiome ubiomeFastqCombine.py ubiome_example.py docs ubiome.py ubiomeMultiSample.py ubiome_people.txt uBiomeCompare.R ubiomeCompare.py ubiomeSample.py ubiome_sweep.py From there the directions should work properly. `python -m ubiome.ubiome -h`
I cannot hear any sound from these two talks - is anyone having the same problem ? - [Jake Vanderplas - Statistics for Hackers - PyCon 2016](https://www.youtube.com/watch?v=-7I7MWTX0gA) - [Elizabeth Ramirez - Kalman Filters for non-rocket science - PyCon 2016](https://www.youtube.com/watch?v=SJvhQroy7hY)
Crawlera maybe good - but $25 for 150K requests is too much and its surprising that there are other proxies like ProxyMesh that are much cheaper and has no limit on your requests..
You'll get better results at /r/learnpython
I know you're looking for help with the tests, but I'd suggest refactoring this a bit. For example, rather than have an 'if' for all the choices, you could have a dictionary mapping choice to what to print: choices = { 1: "Rock", 2: "Paper", 3: "Scissors" } and then your code would be simplified to: if choice in choices: print(choices[choice]) game(choice) else: print("Please enter a valid choice") You could then do a similar thing on printing the computer's selection printing. As for writing tests, I'd suggest iterating over possible choices for both player and computer, and then asserting the winner is decided properly given the choice.
The kalman filter talk worked for me, just now.
Very well done! I like it :)
This one https://www.youtube.com/watch?v=g8kF9tuYZ6s is very interesting and at the same time it introduces about a debugging method I had not heared before around here (recording a program activity for post-morterm debugging and analysis. Has a web UI). https://smiley.readthedocs.io/en/latest/
D'oh! I forgot to include the lightning talks in the spreadsheet which tells the A/V staff what title and description to use for the videos (sorry Lynn!). I've updated it now and lightning talks should be there in the next ~24 hours.
Ah, bummer! 
RemindMe! Two weeks
I will be messaging you on [**2016-06-15 23:04:54 UTC**](http://www.wolframalpha.com/input/?i=2016-06-15 23:04:54 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/4m0ual/pycon_2016_videos_are_out_on_youtube_now/d3sdvsi) [**5 OTHERS CLICKED THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/4m0ual/pycon_2016_videos_are_out_on_youtube_now/d3sdvsi]%0A%0ARemindMe! Two weeks) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d3sdwuf) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Works on wayyyy more than youtube, fyi.
Yea, it's a super strange issue. Despite every room having identical recording hardware, _some_ of the videos don't have sound on _some_ devices. For example, with the iPhone YouTube app, sound doesn't work through the device's speaker, but it does work through headphones. We're working with the A/V crew to figure out what's going on and how we can fix it. I'm going to be honest, though: I'm kinda stumped. So if any of y'all have some idea what could be up, that'd be hugely appreciated!
Always a safe bet with Ned Batchelder talks! Machete-mode debugging is really cool.
Python Sorted Collections discusses performance and how to write fast Python code (as in fast-as-C code). You can also skim the talk online or read the slides: http://www.grantjenks.com/docs/sortedcontainers/pycon-2016-talk.html
My talk is a little Raymond-esque: http://www.grantjenks.com/docs/sortedcontainers/pycon-2016-talk.html He and I talked for about an hour afterwards. I cover the SortedContainers project which is pure-Python but fast-as-C extensions.
Cool! I'l check it out!
Ideally, to make testing as easy as possible, you would want to separate the processing from the "side effects" such as printing and reading the input. Then This would result in functions that take the inputs as arguments and easier to test. You'd have one function for validating the user input, one function for determining the winner, and so on. But your questions is not about code structure, but about testing code whose parameters come through sys.stdin and whose output goes to sys.stdout. To test that, just set sys.stdin and sys.stdout to whatever you want. For example, if you want the input to come from a file: sys.stdin = open("some file", 'r') sys.stdout = open("output_file", 'w') test_for_main() ... then you can read the contents of "output file" to see if they are what you expected. Or you can use StringIO.StringIO instead of the output file... Even though you can do this, this is not good practice. Refactoring the code, passing it the buffers to read and write from might be better choices. 
Yeah hopefully it's better for ep2, realised my mic settings were a bit low :( I'll look into boosting it through YouTube
Is it all up already? That's crazy fast! Kudos to the organizers!
The talk wasn't actually about Python but "The New Mobile Web" discussed technologies I had no idea were a thing.
I was lucky enough to be there for this talk, and was blown away. Even if you don't get all the math, it's such an entertaining talk and the ending was so inspiring.
Let it go. Use the great reference counter of life. 
I had to look up the name, but I kinda knew what you were referring to. To discount an entire organization (PSF) and a tool (python) for what they've done for the world based on one mistake (it was a mistake, no justifications) seems a lil overreacting.
Any mind bending talks? 
aw, makes me wish I got tickets to go
Truly a fantastic talk! Gave me quite a lot to think about... Also, wow, I had never heard of fractal dimension as a general measure of complexity. Good idea!
Pycharm is quite nice and aside from web stuff and teat coverage statistics most of the features are in the free/open source community version. For an alternative see eclipse+pydev.
I especially loved the intro. It sounded so great live. Can anyone name the piece? Vivaldi?
he does say it's Vivaldi later, but I'm not sure the name of the piece. 
Why so toxic?
Atom
More Lars http://pyvideo.org/video/3681/the-well-tempered-api
Yes. 
Atom, Emacs, Vim, PyCharm CE, Eclipse, MS Visual Studio + Python Tools for VS (if you're into Windows), Sublime Text (not exactly free, but you pay once unlike PyCharm).
I had done my Aircraft simulation and control in MatLab but that was some years ago, and I have left Matlab for the Love of Python ;). So thought of doing something in Python. Thanks for the information. Can PyDy be used to simulate Aircrafts, or Ships, for that matter. I thought you can only simulate multiple rigid bodies connected with a joint?!
Eclipse+pydev if you are in a mood for DIY. http://www.pydev.org/
I thought the original ggplot library was being updated again? (recently went to 0.93 actually)
First time I heard about Smiley for Python. But some time ago I learned about other tool for Linux, similar to gdb, but records the program execution and input values, so that you can reproduce and debug it too. In case you found Smiley interesting, you may find rr too - http://rr-project.org/
I think it should be able to do that. edit: Python, not PyDy.
Stunning. Really good.
Great keynote, thanks for sharing! I guess it's about time I get a copy of [GEB](https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach)… He mentions something about the transcription system. What transcription system was used at PyCon?
Initially intended to skim through the whole thing but somehow ended up watching every bit of it.
Emacs
AFAIK - Nope :( Unless things have changed in the last 2-3 years, all the tools are either rubbish, expensive, or rubbish and expensive. The problem I think is that to create a tool that's general enough to address this problem is just very difficult - so anyone with something good wants money for it, otherwise you end up with something that doesn't work or has a terrible UI. That said, if you can refine your requirements you can probably build something yourself using Django or similar. Excel and PDF outputs are going to be a challenge though: - Excel you *can* generate in python but you might be better off building an Excel spreadsheet that can pull data from your backend (i.e. put all the smarts in your backend and write a little VBA to fetch that data and populate the spreadsheet). Especially if you want graphs. This is the approach I ended up taking to make monthly reports - I wrote a simple API using Flask where you constructed a query URL that returned tabular data that got inserted into an Excel spreadsheet template, which updated all the relevant graphs. - PDF in python is frankly a nightmare. You could try paying for ReportLab, but it's a complicated peice of kit to learn. You could try the Java tools, which are better (e.g. PdfBox). Or you could write a script that prints your excel templates as PDF files (my solution - on mac you can easily save print output to PDF).
oh that's very interesting, thanks. It has backward execution in time ! I definitely have to improve my ipdb worflow. That video made me research a lot already. edit: looks like reverse execution isn't specific to rr but appeared in gdb. ps to lector: `rr` is serious, it's used to debug complex software like Firefox and Qemu.
Yep, Vivaldi, RV 522. [Link](https://youtu.be/XmGQ_bvM0lQ?t=3256)
Hi, I made some really basic cairo support for it ipython/jupyter, let me know if there's anything in it that's missing. https://github.com/stuaxo/ipython_cairo S
An algorithm that solves the traveling salesman problem in O(n) time. 
What's the advantage over (for example) Seaborn? What does Leather do really well?
What is the keynote about?
The poster right there in the video says it ends Jun 5th.... still several days away. How was this the closing out of the fleet.
Wow! So many good presentations
Its a biker that plays an obo and teaches you life lessons and computer algorithms.... Just watch it. You won't be disappointed. 
What I gathered from it is that you can find patterns and connections in seemingly random and unconnected things. Admittedly, I did get a "Number 23" vibe from the talk every now and then.
The are currently sprints going on. The main conference is now over. 
If you don't mind using Windows then Python Tools for Visual Studio provide an excellent alternative.
Nassim Taleb has some stuff written about it. I've also seen some stats papers using fractal dimension to try to model chaotic time series data (such as brain waves to predict seizures).
I watched it for 10 minutes. I don't know what it's about still. About Bach and a nerdy novel.
Looks like apple's python is the one first one your path, rather than homebrew's python. Unless the OpenSSL your homebrew python is linked with is 0.9.8. http://rkulla.blogspot.com/2014/03/the-path-to-homebrew.html
Prove: P=NP
http://www.liclipse.com/
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
The 'technical' side of it is about complexity (specifically. fractal dimensions as a measure of complexity). There is also a fairly inspiring human element to the talk as well. Well worth the listen.
Seems awfully judgmental...like another poster said it's about life, complexity, and his world view. It's not your standard PyCon talk about one topic.
Im using atom + vim mode now -- i must say, i liked it a lot 3-6 months ago -- its turned pretty shitty. Tabs override spot of existing opened tabs. Sometimes slow.. it crashes.. im half considering going straight back to macvim -- im not too happy with it (ive been using it for over a year now)
Nice, that looks exactly what I'm looking at. Now to learn cairo ;)
Awfully judgemental to want to have *some kind of real description* to help me decide whether to look at something? Get real, dude. It's your submission. If you don't give it a good description, and nobody else describes it for you, exactly why would you expect people to give a shit?
No, it's judgemental to just assume that means they didn't understand it. I didn't want to give too much away. But I gave you a description now, why are you so upset?
This has indeed saved my life. Excellent advice! Thank you again.
`which python` gives me `/Library/Frameworks/Python.framework/Versions/2.7/bin/python` but `python --version`returns `Python 2.7.11`
I'm confused. It looks like OP is trying to change the class of an object at runtime. Are you claiming that no language has a [CHANGE-CLASS](http://clhs.lisp.se/Body/f_chg_cl.htm) function to do this?
I upgraded python to 2.7.11 by downloading from python.org but am not sure if I installed in through homebrew correctly. $ brew install openssl $ brew link openssl --force $ brew install python --with-brewed-openssl The above were the commands I used but honestly, I was grasping at straws because I couldn't find a clear explanation of how to do this correctly. 
thanks for the link! I'd seen that blog post and was trying to follow along. I thought that I got this set up correctly when I run `$ ls -l /usr/local/bin/python` I get the following `lrwxr-xr-x 1 scunion admin 34 Jun 1 23:22 /usr/local/bin/python -&gt; ../Cellar/python/2.7.11/bin/python` what can I do to make sure that I get this set up correctly? I'm not sure where I've gone wrong in that blog post
Nowhere: "Built on Electron, NodeJS, Angular &amp; AdminLTE"
I was hoping you could take a look at a short python project I worked on a while back. https://github.com/gappleto97/p2p-project/blob/beta/py/net.py
That looks like the version you got from Python.org is taking over. If you'd rather use the one from homebrew, you have to make sure that /usr/local/bin comes before anything else in your PATH. Try this: export PATH=/usr/local/bin:$PATH which python If that's fine, you then have to make sure that `export` is done before you run your apps. This could mean adding it at the bottom of ~/.bash_profile (or somewhere else if it's a GUI application, I'm not 100% sure there).
It's probably because you called him judgmental for having a reasonable expectation of having a description along with your submission. 
It's a fairly classical method in complexity science, going back to Mandelbrot, Mr. Fractal himself. Now, 40 years later, the rabbit hole goes much deeper... e.g. [multifractality](https://en.wikipedia.org/wiki/Multifractal_system).
The thread started with: &gt; Whenever I see people praising something but no explanation of what it actually is.. I tend to suspect that they don't actually understand it. That's absolutely judgmental, and should've been called out as such.
i never said anything about python, only this event. Don't put words in my mouth.
Can't a novel be non-fiction?
No, I know that's a judgment. Its not like judgment isn't a valuable faculty we use to reason or make decisions. OP is using the word judgment in a sense that the poster is being unfairly judgmental. Poster is probably opposed to OP using the word in that sense because one wouldn't consider it an *unreasonable* ideation to have, or just opposed to OP using the word as a slight. I find it somewhat inconsiderate to submit low-effort posts (my own judgment), and so arguably easy to not do so, that I start wondering if it's lack of etiquette or laziness (also my own judgement). Here: meandering ruminations. In any case though, I interpreted &gt;I **tend** to **suspect** that they don't actually understand it. as commenting on his own bias of what it *appears to be* when a submitter doesn't write a description, which is actually self aware and gives a bit of creedence. Also consider that there are heaps of submissions and one has to discriminate between what is relevant and what is junk and I only have so much time to sit on the toilet at work. I know that is what upvotes are for, but I thought this was a great video about python, not subjects tangent to python. 
A lot of the obscure technical words got converted to more common English words. It was kind of fun watching what weird things would come out of the stenographers' pad.
That was my exact feeling. I'm sure time made the concept easier now, but even then, the slides are perfectly balanced. He tweeted that he would be doing a talk at some conf. saying it's "slides 2.0". I hope the video will be freely online.
Edit: [Yes, it can.](https://www.reddit.com/r/Python/comments/4m4ihv/k_lars_john_gives_incredible_closing_keynote_to/d3tjhan?context=3) --- ~~[No, it cannot.](https://en.wiktionary.org/wiki/novel#Noun)~~ &gt; **novel** (noun) &gt; 3. A work of prose fiction, longer than a short story. Think about the adjective "novel", meaning "new, original, especially in an interesting way" (same page). It means something that's been made-up from scratch.
That Jake VdP makes me all tingly in a strange way... Great and super polished talk on statistics https://www.youtube.com/watch?v=-7I7MWTX0gA
+ [Automate the Boring Stuff with Python](http://automatetheboringstuff.com) - free to read online - tailored for absolute beginners (which might be a bit too easy for you) but the examples are great + [Invent Your Own Computer Games with Python](http://inventwithpython.com) - same author, free to read online and downloadable in various formats - has links to other more advanced books as well. There is an accompanying subreddit: /r/inventwithpython which is moderated by the author of all the listed books /u/AlSweigart
&gt; Python cookbook Who is the author? There are several with similar name.
Thanks. Anyone else know of others?
https://en.wikipedia.org/wiki/Non-fiction_novel &gt;The non-fiction novel is a literary genre which, broadly speaking, depicts real historical figures and actual events woven together with fictitious conversations and using the storytelling techniques of fiction. The non-fiction novel is an otherwise loosely defined and flexible genre. The genre is sometimes referred to using the slang term "faction", a portmanteau of the words fact and fiction.
Saw that on this page book referenced on this page https://en.wikipedia.org/wiki/Non-fiction_novel
https://docs.python.org/3.6/howto/index.html may be a bit closer to what you're looking for.
but he did read it
Have you looked at recipe books? * [pay](http://shop.oreilly.com/product/0636920027072.do) * [free but less focused](http://code.activestate.com/recipes/langs/python/) I had to take over some Perl code as a seasoned Python dev and I found equivalent resources to be *extremely* helpful to me.
Also, lots of info here: http://docs.python-guide.org/en/latest/
a multi-threaded web based app with a database connection using Python, which i managed to do in 2 days and didn't get the job.
If I have to use a DB, I use SqlAlchemy
Supposing [that's not possible within reason](http://stackoverflow.com/questions/37475099/is-it-possible-to-use-sqlalchemy-with-class-attributes-and-properties), what's the second best option, preferrably using `sqlite3`?
...huh. Well that certainly seems odd given the definition I found. I'm just gonna chalk another one up to "the English language is unnecessarily complicated" and offer my apologies to you.
Neat! Heads up that you seem to have confused 'a' and 'd' a couple of times while describing the clue about triple letters.
Why: it's part of the standard database api. This is both good and bad, all main relational db libs in python can be used similarly but obviously there are costs. The SQLite connection class is a context manager, so you can get some of what you're looking for immediately there. If I'm doing raw sql I either put it on a model class (kind of emulating how it would be with rails) or just create a "repository" class that contains the various functions. There was a pycon talk on some tips/tricks with SQLite: https://youtu.be/D7wSMnapDp4 it doesn't address everything, but gives some nice tips.
It doesn't use or feel like matplotlib -- for me those are all advantages that are really needed. The default style looks great, the API is very pythonic and simple.
I agree. I started off with "Learn Python the Hard Way." I get his style, but I hate the whole go back and comment what each line means. After a while you just kind of understand how things are supposed to flow. 
Referring to my earlier reply and SO question, [most ORMs (including SQLAlchemy and peewee) don't seem to work that well with what I'm using](https://www.reddit.com/r/Python/comments/4m9js5/how_do_you_use_sqlite3_and_what_do_you_think_is/d3tnowc). I do see your point with context managers though, thanks for enlightening me with that! :)
It is a text editor: http://bluefish.openoffice.nl/index.html
&gt;pip install git+https://github.com/tony/libtmux Holy mother of god!! Niiiiice. i need to hang around here more often. :)
Are you developer or just python coder?? Are you using MySQL as DB, do you have time to build admin for each POC you wrote??? If you ask where is the python, you are not real developer. you need to see the big picture of your development process.
You might find https://github.com/kennethreitz/records interesting. 
Bingo. That's it. We're working with the AV crew now to get the audio corrected and videos re-uploaded, but unfortunately that's probably going to take a couple of days.
He gave it to a student of his after reading a hundred pages.
... and then the book got returned to him by the student's mother, and then he finished it some time after that dude you didn't even watch the keynote
It's not a novel, and the book he references is incredibly famous.
David Beazley
Yes, but you are assuming that the lock acquisition call happens in _every_ call of `logging.debug()`. That is not the case - it is _only_ in the _first_ call of `logging.debug()`, and even then _only if logging hasn't already been configured_. This is not a normal use case for performance measurement. You can't use call graphs in this situation to make a wide-ranging statement about performance; instead, you should run a profiler and count the number of calls to lock acquisition code compared to the number of `logging.debug()` calls.
Why use bluefish instead of a more popular test editor like sublime, atom, emacs, vim, etc.?
nothing, just curious. 
Given this is /r/python, it's expected that submissions are Python related. Sometimes it helps to see the little picture, too. 
Python's bad at recursion and not so great at immutability (there's namedtuple and setter hacks, but that's about it and both have major issues). But to flat out say Python is bad at functional is wrong. It's just that functional Python has different idioms from a Lisp based language. I like doing functional work with objects, and before you balk at that remember functional is more about not changing state willy nilly than functions over objects. Good OOP is same way, it's just that you don't often see good OOP. Edit: Speaking of OOP, encapsulation is about hiding implementation details. It's got nothing to do with interfaces. 
Perhaps use a ORM such as SQLAlchemy? Put all your DB models in a seperate file and just import the model classes where you need them. Also: no more SQL statements. Makes the code more readable in my opinion. If you still want/need raw SQL but a more cleaner API take a look at: https://github.com/kennethreitz/records 
Hi, What memory leak are you talking about? The currently development branch on Bitbucket has lots of fixes that are not yet available on PyPi, so maybe give that a try if you're experiencing issues. And if that still has issues, please open a bug report for them. There was a memory leak related to the image module that has been fixed thanks to the work of a contributor. Is that what you're experiencing? 
There is also a Python IDE, written in Python called "Ninja-IDE". It stagnated for a bit, but seems to be active again on github. In the past I quite enjoyed this one, but it was a little buggy still at the time. I haven't tried it recently, but it's worth a look perhaps. 
Guido van Rossum had a good one in his keynote. "If a programming language was just a way of commanding a computer, why do programmers get so emotional about their choice of language?" When you realise the answer to that, this talk makes sense. If you don't, it probably doesn't.
Hey thanks for answering! I'll check out the current branch. I'm experiencing it with text stimulus creation and updating using psychopy which uses pyglet for textStim🤔 any suggestions?
For PySDL2, I found myself just following along with general SDL2 tutorials that are out there. It took me a little time to figure out some low level stuff, so maybe the "utilities" folder in Pylaxian can give you some hints. In particular, there are some functions in there for creating sprites and stuff. You may also want to look at the rendering system in systems.py. It's not incredibly hard, but it requires a tiny bit of ctypes for a few select SDL functions. With regards to pyglet, you should check out the users group: https://groups.google.com/forum/#!forum/pyglet-users The pyglet documentation is really fantastic, but it can be a bit overwhelming. Feel free to send me a personal message or post somewhere if you need help. 
I watched 40 minutes of it with one eye. I like my information density high, and if it isn't I tune out and sample at random intervals. What I saw in the first 10 minutes was amusing, but nothing worth paying attention to during prime effectiveness hours. It's a feel-good happy video. I already feel good.
Yes. That's exactly what I was trying to point at. If you thought it was amazing, great. If they thought it deserved a standing ovation, awesome, good for them. But until you say what it's about, I still have no real idea whether *I'll* find it amazing or even interesting. Context is a pretty big thing.
I'm not assuming they don't understand it. Do you understand the difference between probability and certainty? Not all people who vaguely praise something don't understand it. But for many people, it seems to be a default response to something that gave them positive feelings but they don't understand : praise it (vaguely). That's what I'm describing and why I don't take those indefinite comments as recommendations. (There's nothing wrong with those comments, or with not understanding, BTW. I'm just saying: There needs to be some **definite** information, somewhere here, for it to be a good submission. By the amount of upvotes my original comment got, I suspect a lot of people agree with that sentiment.)
Not to discredit your effort, but just FYI: there is a pretty popular cross-language library that does the same thing: https://github.com/joke2k/faker
The Python.org Python has preference on your path. Since you want the homebrew one, uninstall the Python.org one
You kinda also miss the point of the road measurement as well if you don't pay attention to the whole thing. You are skimming a book and then complaining that you miss things. You are allowed to not enjoy things, but criticise the things that reduce your enjoyment, instead of guessing the plot to the story
The best intro that I've seen is to read (in order), the python tutorial here: https://docs.python.org/3/tutorial/ Then the numpy guide here: https://docs.scipy.org/doc/numpy-dev/user/quickstart.html And finally the 10 minutes to pandas guide here: http://pandas.pydata.org/pandas-docs/version/0.18.1/10min.html#min In my experience this takes 5-15 hours to do right. You won't know everything when you're done but you'll have a good start. 
I use Django's standard unit testing framework, which is Python's `unittest`. I also use `mock` and `httpretty` (or `responses`) when necessary. Finally, I use `nose` to get better output (e.g. logging, and console).
IMHO you should also consider pytest: http://pytest.org/latest/
I'm currently helping out with Pyglet, and the "memory leak" in question might actually just be Pyglet's normal behavior for caching textures. I found that you need to track and release textures pretty aggressively. See this thread for some more on that score: https://groups.google.com/forum/#!searchin/pyglet-users/memory/pyglet-users/IzTVVsNqkXs/QMImlvEQEAAJ
Thanks for the suggestion, it works pretty well. The code grew a little so I made it into a pip installable package: https://github.com/gooli/affirm https://pypi.python.org/pypi/affirm/0.9
It's easier to come for a nugget of information every day than it is to sift through a wiki. It's just another way to learn things.
Posted a precursor to this a couple of days ago here, got some insightful comments and turned it into a proper library. Hope somebody finds it useful in their projects.
That's the IEEE754 definition of NaN. It's not equal to itself
&gt; I think it's about life generally. But what does that mean? As a technical expert, if I "talked about programming generally" you could subdivide that into technical sections such as nested for loops, or softer issues such as agile vs waterfall. Only a non-expert would just see it as "computer stuff generally". It's certainly possible to do the same for this talk regarding the issues it covers: for example the connection between language and mathematics. However it requires similar expertise in other domains to do this. So yes, I agree. When someone says they can't accurately describe what something is about, it means they don't actually understand it. There's also a section on complexity if you want something that directly translates to code.
'About programming generally' would also be an acceptable description for something that includes a lot of programming-related stuff. It's not a great hint, but it is some context (if you say 'its about life' I expect 'philosophy and relationships', if you say 'it's about programming' I expect 'problem analysis and systems design'). I think most people can achieve that level of description for something they are recommending, if they try. (admittedly I also hedged my bets by saying it's about life because I haven't finished watching the entire thing yet..)
http://stackoverflow.com/questions/19374254/assigning-a-variable-nan-in-python-without-numpy
This is the reason I like jupyter notebooks so much. I'll have a code, visuals and a full documentation in the package. Sure I could add commenting to my code to add context and that is what I used to do but it's just not the same.
Pebkac
To sum up the points: * Things are connected in ways you don't expect * Often times its easier to derive meaning via a completely different and radical perspective (in line with the way the talk was presented) * A connection does not guarantee proper interpretation or meaning * If you limit your thinking, you will ultimately limit your solutions (and by extension yourself). This also fed into the overarching social theme of inclusivity. On a side note, I was there live and it was amazing. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yes. I mean, no. I'm confused.
I like it just for the name and the output :D Great library, and I see how I would use it already. Thanks for sharing!
Should one change code to make it more unit testable? I was just reading a critique of unit testing which mentioned that you could have a readable function, say encapsulating an algorithm. A way to make it easier to unit test would be to break down that function unit into many smaller sub-functions that are separately easier to unit test, but on the whole make you loose readability and through that, maintainability. Do you see this as valid criticism?
I also use faker combined with https://pypi.python.org/pypi/fake-factory to create nice unit tests. Thank you for your hard work but in my opinion you could have benefited to the community more by including some of your code in faker project than creating duplicated code.
Yes that's it, this is a Python2.x issue. Try to run this in a Python2.7 interpreter, you will see that everytime a lock is acquired, even if the debug do not do anything. Well, just another reason to move to Python 3 ! :D
You can also do fun tricks by bit-shifting a float far enough to get into weird behavior. For example, from a collection of Python "wats": &gt;&gt;&gt; x = (1 &lt;&lt; 53) + 1 &gt;&gt;&gt; x + 1.0 &lt; x True 2^53 + 1 is 9007199254740993, which is easily representable by Python's `int` type. But its `float` type uses IEEE double precision, which doesn't have enough precision to represent every integer past 2^53 (it only has 53 bits of precision in the significand) -- and since the spec says to effectively "round down" to the nearest representable number, you get 9007199254740992.0, which is indeed less than 9007199254740993.
There is a lot of discussion going on in the comments about posts and how reliable the tips are. People are being corrected on certain ideas. We'll try to incorporate any corrections into edits of the posts.
I love Raymondh. His talk about creating a Circle class is still one of my favourite Python videos..
I'm still so angry at the question at the end. I want to be able to have my cake and eat it too.
Yep, let's discourage someone from open sourcing something they already wrote
I laughed out loud at the "a_thing" documentation section :D
I also work on a high-volume site where sampling is an issue (GA Premium suffers from worse sampling in the API than in the GUI). A very relevant use of Python is to automate the process of splitting a date range into individual days the making a series of requests and concatenating the data. Doing that with the GA Plugin is a real pain.
formatting. this is a) not readable and b) won't execute. Click 'formatting help' to see how to format your code.
You're missing a closing parenthesis on the line above the error.
thanks 
It sounds like you have a class already and you're trying to turn it into an ORM model. As far as I know, you'd usually define a new model class in the manner prescribed by the ORM and then hook it up to your existing code.
pytest and tox is the best
What a silly thing to do.
Ok, I didn't understand that you had to work with this data generated. Ok, thank you ;) 
In 2 hours of videos (and I just started) I learnt more things than in the last 2 weeks. Great talks!
Can you please provide a link? Couldn't find the talk.
Really enjoyed the talk but the question at the end ruined it. I don't like how it made it the official video. Surprised it wasn't edited out.
The other thing to keep in mind is that each platform has different mechanisms for monitoring a folder passively, so if you want to do this cross-platform you'll have to take each case into consideration.
I recently built a little prototype website using Channels that reimplements a web application that we have running internally using PHP and a bunch of AJAX. Channels was very easy to get working, especially after looking at some of the examples Andrew has written: https://github.com/andrewgodwin/channels-examples It was also my first foray into using Django, after mostly using Flask in the past. Overall I found Django + Channels to be very developer friendly. It will be interesting to see how Channels develops within the Django ecosystem and if it changes the landscape of the Python web framework scene.
What do you need to customize?
What does a bioinformatiocist do?
No, but it's not a valid question in this context. If somebody, working for fraking free, is trying to improve Python so that it can expend it's usefullness at a very small cost, what the heck is somebody raising an eyebrow ? Even if it doesn't work, the simple act or research on the Python code base is a great thing to pursue.
There is also merit in inventing many different types of wheels.
The problem with creating another sub like this is that you need the subscribers to migrate, and that is a difficult thing. It's be much easier to just tag the posts and have them here, where they will get much more exposure.
Those languages may be better at concurrency, but they certainly don't have the depth and breadth of support for machine learning, science, econometrics, etc that Python does. So it's definitely not as simple as "just do concurrency in a different language".
You can skip to 25:15 on http://pyvideo.org/video/1858/sunday-evening-lightning-talks for a demo. It's really cool
The work being proposed does not come without a cost. It means a potentially huge infrastructure project for completely re-plumbing the internals of CPython, and adding an entirely new mode of operation for C extensions. Everyone's life becomes harder because now you have at least twice the work to test your extension under these two different modes, and all the complication that comes from having modes. If you're an extension author you can do nothing and your extension continues to work, but you will have users that expect it to eventually support the gil-less mode so it's not like the problem just vanishes; if everyone did that then gil-less mode would never get off the ground and it would be a complete waste. And the simplicity that CPython's internals used to have is significantly lessened, and everything is destabilized. There has to be a *massive* upside to put up with all of that, and it's valid to ask whether this is really worth it. It's not an insult at all. Someone is proposing a massive undertaking, and it's reasonable to ask whether the downsides are worth it. This is the equivalent of "let's expand the interstate highway that runs through our city, which will take years and cost billions." It's valid to ask whether that money would be better spent on public transport or bike lanes. 
How big are the files you're writing? The raspberry pi's SD cards can be pretty slow for i/o, depending on which one you get. If the files are relatively small (&lt; 100MB total) then you could try running in /dev/shm which is a RAM (temporary) drive.
The memory card allows up to 55MB/s writing. The files are less than 1MB big, so I don't think that this can be the issue... 
Shouldn't this talk be called "CPython's infamous GIL"? They're not talking about any of the other Python implementations, are they?
why don't you ask him this question?
Learning Python – eBook – Tutsplus | Pak17 http://pak17.com/2016/06/03/learning-python-ebook-tutsplus/
That was a great talk, and the speaker did a great job of explaining the difficulty of removing the GIL and how they were approaching it. I was disappointed, though, that the speaker made no mention of [PyParallel](http://pyparallel.org/) ([GitHub](https://github.com/pyparallel/pyparallel)) when talking about [existing efforts in this area](https://youtu.be/P3AyI_u66Bw?t=9m10s). According to PyParallel's tag line, the project "Removes the _limitation_ of the Global Interpreter Lock (GIL) without needing to remove it at all." The [benchmarks](http://pyparallel.org/#performance) look promising, and the [approach](https://github.com/pyparallel/pyparallel#overview) is interesting: &gt; We introduce one new restriction that will affect existing Python code (and C extensions): _don't persist parallel objects_. More explicitly, don't cache objects that were created during parallel callback processing. &gt; &gt; ... &gt; &gt; Thus, PyParallel requires no changes to existing reference counting and garbage collection semantics or APIs. Though PyParallel currently only has a Windows implementation targeting Python 3.3.5, I wonder how it compares to the speaker's proposal on the 3 criteria presented in the talk: 1. single-threaded performance, 2. C extension compatibility, and 3. complexity. Edit: Link to section of talk.
We have that already it's called LLVM IR :P
Also this talk here I found to be incredibly enlightening: Beyond PEP8 https://www.youtube.com/watch?v=wf-BqAjZb8M
Not sure what this idiom means. Is it a good thing or a bad thing, in your opinion? And why?
/u/trentnelson - Is it appropriate to compare PyParallel to the Gilectomy? What are your thoughts on the two approaches?
Ahh yes. I believe 'requests' is exactly what I was looking for! Thank you. I will first use 'requests' then run the 'beautifulsoup' AFTER I run requests!! Thank you all. &lt;Let me know if i misunderstood&gt; 
Learning Python – eBook – Tutsplus | Pak17 http://pak17.com/2016/06/03/learning-python-ebook-tutsplus/
&gt;transcription system Not as much of a system as a good stenographer. There was a person typing everything out in real time.
I modified a script that would block certain websites when you were in 'work' mode. I added a math puzzle as a requirement to switch to play (but not from play to work). It only takes like 20 seconds to solve the puzzle, but that is actually enough to stop me in many cases.
My thoughts exactly.
I was encouraged when I saw the video's reception relative to the rest of the talks, but as I kept watching, i couldn't help but feel the same way as you. I guess that forcing the gil-less code is a way to get everyone to move forward, but it's not as elegant as I hoped, and the performance kinks don't seem to be worked out yet. We do need parallel Python one way or another. Old hats saying 'use another language' are missing the point - we want a future _with_ Python doing the general purpose things other general purpose languages do.
Flask would only remove PHP from the equation. The main benefit would be that you're not using PHP.
Channels actually makes it easier to use asyncio if you want to by providing a standard way you can interface between async and non-async code.
http://www.youtube.com/watch?v=H2yfXnUb1S4 There is some interesting talk about q in this talk
Nice username XD So it seems like it's mainly a workflow benefit. You'd be able to code a lot faster and more efficiently with Flask? 
Oh, I actually thought I had posted this on /r/LearnPython, but I guess not. Thanks for noticing.
pd.read_sql() was a pretty nice discovery.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I tried to let the script run for 30min, nothing happened...
Given the fact that I haven't looked much into this, why is crossbar.io better than django channels? Channels looks pretty awesome and can't say that django isn't making the effort here.
A recursive web-crawler, with threads, tests, generating some kind of json graph database of the referring hyperlinks, https://github.com/jquast/hxyzzy/blob/master/hypermeadow/hyperlinks.py -- Got the job, it was pretty OK. Given a list of daily closing stock prices, suggest which days a purchase and sale of this stock would yield the highest profit, with optional limit of number of purchases, [redacted] -- Passed the round, but I declined further interview. I was contacted by the company of the 2nd link to be asked to take it down, apparently other candidates were lifting that code.
They solve a different problem. If your site doesn't need to be dynamic on the server, a static site generator is better, at least in principle - better security, and better performance.
Oh, thanks for that! I was expecting something on rtfd.org or a README.md on Github or something. Didn't think to use `help()`. So...is there any reason Twitter isn't publishing the internal documentation on it?
I know this is late, but yeah. I see it pretty frequently on job postings in the NYC area.
A transaction commit.
I don't see any difference in behaviour in Python 2.x. If you insert a `print` statement in your linked script such as print('%s %s' % (thread_id, logging.root.handlers)) just before the `logging.debug()` call, you'll see output something like this: 0 [] 1 [] 2 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 3 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 4 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 5 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 6 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 8 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 7 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] 9 [&lt;logging.StreamHandler object at 0x7f9debf21350&gt;] if you look at the `.png` files corresponding to the numbers where the printed array is non-empty, you'll see no calls to lock acquisition. For example, for the above run and the thread with index = 2, the [corresponding image](https://i.imgur.com/NPEnNm8.png) shows no calls to locking code from `logging.debug()`. This run was done with Python 2.7.6. If you put a `logging.basicConfig()` call _just before_ the `with` statement, _none_ of the images should show a lock acquistion from the `logging.debug()` call.
This is my opinion and why I don't like channels
It's just the title for a talk. It's supposed to be simple and attention grabbing.
It has over 80 Pyramid micro-services using sqlalchemy for the ORM layer. The front-end is the only thing that is not currently a Pyramid site, but they are replacing it with Pyramid shortly. They describe their stack here: http://engineeringblog.yelp.com/2015/03/using-services-to-break-down-monoliths.html
We are big believers of only using that of the framework that you require, in this case we need a static site. With static assets; there is no reason for us to build a Pyramid site that returns static assets. Using node.js to build a static site makes a lot of sense, especially for static marketing content.
Thank you! I get a finished rendering, finished converting to html, finished souping, starting file write. I get one perfectly fine .csv file for the first loop - like before. But that's all, even though I should get a few other files after that.
&gt; they didn't allow questions. Well, there [was that one question...](https://youtu.be/P3AyI_u66Bw?t=1889)
If you are considering making a GUI application, you may wanna use a GUI toolkit like Tkinter, PyGTK... I have made a basic calculator using Tkinter and also wrote a blog post explaining it. This might be useful for beginners http://www.techinfected.net/2016/02/make-gui-calculator-in-python-windows-linux.html?m=1
Hi, thanks for the help. The question is broad because I'm not exactly sure what I'm looking for - I'm new to this. After looking up what you wrote, I would say that I'm trying to build a GUI. 
Thank you
Please refer to /r/learnpython
To add to this, consider that Pyramid originally recommend nosetests for unit testing, but recently rewrote many of their guides and samples to use py.test instead. It really looks like the community has rallied around it.
Thank you for the explanation. I currently use Flask for my quick dirty projects, but often times I never have a scope of the product and becomes a Winchester House. I will have to give this a shot sometime. Appreciate the insight. 
&gt;&gt;The question was "... but wouldn't it be easier to use Python for what it's good at and other languages such as Go, Rust, or D for what they are good at?". &gt;I think this is a valid question. No language can be good at everything. I hear this response, but it's a frustratingly dismissive answer. Languages and implementations are different things; related, but different. The GIL is more implementation than language. Sure, it would be easier in the short term, but if you really followed that, you wouldn't use Rust or Go or D either, because those languages were also implemented in protest of the "wouldn't it be easier" argument. 
Something something right tool for the job.
A lot of people nag the core devs to remove the GIL, so half the point of the talk was to show the consequences of removing the GIL, which I believe he showed incontrovertibly. If, after watching the presentation, you think they're barreling through with it, watch it again. They're just re-addressing it for the first time in 15 years, for the sake of addressing it.
[How do you write a book? What kind of pen do you use?](/r/learnpython)
The first paragraph: &gt; **Define Python** &gt; This is very basic question and no wonder every candidate must have prepared well for this question. You need to find who explains the term Python best and once you find, you can hire python developer for your company. Ahahaha! Obviously english is not their first language, but it's also obviously awful blog spam.
I suggest to curate the tips into a repo (with link back to original thread) on github/gitlab/whatever 
No, the design of Djagno itself prevent this. Channels are a hack to allow an async behavior in a sync workflow. It's a nice and usefull hack, but you can't turn a buffalo into a cheetah. It would make no sense. It doesn't mean Django will not keep being relevant for a long time, it just mean that at a certain point, getting on part with new gen framework like meteor JS would require an entire rewrite, and it will probably not happen.
1. /r/learnpython 2. Subclass the class and overwrite the relevant methods. Or, if you think the author would want your changes, pull the project from the repo and offer your changes as a pull request.
The more I look into crossbar the more I like it. There's no robotics ecosystem yet, but the ease of use is tremendous. And the Python 3 support is awesome. I'm still stuck on 2.7 until they decide to update the core packages. Also, TIL that ROS can do web stuff. Whenever I needed that I made a bottle file which subscribes to some ROS topics. Also, crossbar does not seem complicated at all. In terms of using it for IoT, it seems much simpler than Django. But then you wouldn't have the interface. I guess that is where channels could be useful.
Maybe you will like this book: "Modeling Creativity. CASE STUDIES IN PYTHON" http://www.clips.ua.ac.be/sites/default/files/modeling-creativity.pdf
The link is 404ing for me.
Not really. Typically I am using `to_sql` on my own data and not using anything public facing, so I am not so concerned about that.
We should all cut off our penises and concrete fill our vaginas, for equality!
&gt; **4. Can you define Pickling and Unpickling?** &gt; Pickle is a module that converts any Python object into a **string representation** &gt;&gt;&gt; type(pickle.dumps('If this is a string, I will cut off my own dick.')) bytes
It's not `list[int]`, it's `List[int]`. The 'L' must be capitalized, and [this is not a joke](https://docs.python.org/3/library/typing.html#typing.List). And you'll need `from typing import List` before you can say that. [The typing module](https://docs.python.org/3/library/typing.html) (which is only in the standard library as of Python 3.5) contains objects you can use to provide type hints for this sort of case.
Try it trough vlc if it persists. Tried on 3 different devices and all seem to work. It's a talk about Homeassistant.io , have a look and visit the gitter chat or community.
I've had a few with no sound too
That's not a nice way to cheat in your math test.
I wrote a theorem prover specifically to solve this question... and... it's... still running. I guess you could say I'm facing a Halting Problem :8
I think it mostly shows some really piss poor his implementation is. It's not even worth talking about at this point because it is so obviously bad. Is it a competition to see who can come up with the worst implementation of a python interpreter or something? For instance the need to put locks on every single dict or list and to have "atomic" updates to those objects. No you don't need that. Absent a synchronization event between threads (such as taking a lock, or certain syscalls), there is no reason for thread A to even believe that thread B has started executing. All those dict/list updates could be buffered in the thread local storage until the thread actually tries to share with another thread. In many cases that would mean it is lock free for the duration of the threads lifespan, right up until a final join and a big push of results into the main threads state. Yes stuff like this will make the interpreter more complicated, but it's also not optional. To try and remove the gil without doing things like this... is utterly pointless. The performance will be terrible, and everybody knows that apriori.
I also don't have sound, I'm on mobile if that matters.
It's a pretty crazy thing and a bad idea but you can hack it by doing: s = get_random_string(16) Description = etree.Element('Description', type="C") Description.text = "s" txt = render(Description) txt.replace(s, " &lt; ") But plz why are you doing this? There's probably a nicer fix if we know what you're doing this for.
Eclipse is way more bloated than pycharm. 
The output you are trying to generate is not valid XML, period. Because of that, you aren't likely to find any XML library (in any language) that will generate it for you. If you absolutely must generate this, /u/graingert has the right idea: Use normal string manipulation, either to assemble it from scratch or (as he suggests) to replace the entity after the fact.
Yes, there is a library for that. 
It's really as good as it gets in terms of IDEs. If you don't like JetBrains' IDEs (in my opinion they're the most stable, enjoyable to use and feature complete in the market) you're probably looking for a text editor, not an IDE. You CAN do Django in community edition. It just won't do some of the Django specific inspections and tools will be missing, which you can make up for with the built-in terminal. Give it a try and figure out if it's for you or not.
Wow, I coded a lot in Perl and it is a wasteland for anything like an IDE. PyCharm was one of my favorite things when I started with Python. To me 10 minutes of googling saves hours of work and lots of typing.
This is ... BRILLIANT :) is there any way you could send me the code :)
"fast" and "efficient" are extremely subjective, primarily due to levels of experience. You're in a python sub, so you're getting selection bias as most of us prefer python to other stuff. One additional benefit beyond what /u/trout_fucker mentioned is also the HTML templating. Flask bundles Jinja2 with it, which provides some really awesome freedom to build and include intelligent components (macros, filters, etc.). PHP has its own version of this though, so it's really just about preference. Python is "general purpose", whereas PHP is primarily web focused (though technically you can script in it). That means knowing python can benefit in other applications (beyond web apps).
I completely disagree with you, I don't think you spent enough time with JetBrains IDEs. Download the pro edition and try it free for 30 days.
tried it recently, it's speedy, ui is a little clunky, and lacks the features of pycharm.
Except kibana. I'd suggest to use grafana instead, it is much more powerful, faster and reliable. It doesn't store any meta data in Elasticsearch so you won't loose all your searches/visualizations/dashboards if ES fails. Kibana can only be used as a tool to do quick searches, investigate your data, to create complex queries and test them. Grafana is much, much better at visualization.
Hey , thank you very much !
let me check it out. Thanks
Thank you.
&gt; But plz why are you doing this? There's probably a nicer fix if we know what you're doing this for. Alright, here's the line I need present in my XML &lt;Description type="C"&gt; &lt;![CDATA[]]&gt; &lt;/Description&gt; I removed the extras from the question because I thought it was unnecessary, but here you go. I basically need the Description tag to have &lt;![CDATA[]]&gt; as the content. At first my idea was that since the content itself looks like a tag, I could just create one more Element with the relevant name, but the special characters like the excalamtion marks and square breackets threw me off
At BBC we use Fluentd (comes with td-agent, which you configure so it knows where your log files are). I agree with malinoff that Grafana is much better for visualisation. Although at BBC we actually use Sumo Logic for parsing the aggregated logs (its quite slow although, if you can get past that the actual features for sifting through your logs are excellent). Data dog is something we used in the past and was a good all rounder, but we were explicitly using it for visualising AWS cloudwatch metrics and not logging so YMMV. Elasticsearch + &lt;Logstash | Fluentd&gt; + Grafana seems reasonable.
Probably worth mentioning that I am looking for something lightweight and open-source (free). I probably don't need graphs. A basic web-UI with highlighting by logging levels (e.g. Error in red), and the ability to search by keyword might be enough. Something in Python would be a plus. 
I think you use the same config and just run `airflow worker` on the slave node
Can anyone recommend a good website or place in NYC to order the custom mugs?
Thankfully, you don't need to use an IDE
&gt; Probably worth mentioning that I am looking for something lightweight and open-source (free) An ELK stack? What quantity of data are we talking about? 
Papertrail is free and lightweight, but not open source.
But `&lt;![CDATA[]]&gt;` Is the same as the empty string. Why do you specifically need to use it? It's only to make it easier for humans to read and write XML with lots of punctuation in without having to use entities. Just let lxml escape it for you. Why do you specifically need CDATA? If we know why we might be able to find you an even simpler solution 
Splunk can be free (although not open source) depending on your log volume.
[**@PeterSanchez**](https://twitter.com/PeterSanchez): &gt;[2016-06-04 15:25:39 UTC](https://twitter.com/PeterSanchez/status/739115910313578496) &gt;How does the [#Python](https://twitter.com/search?q=%23Python) community deploy private modules in projects \(ie, requirements\)? Private pypi servers? Code repo deployment keys? What? ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/4mj1rv%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
Not in Python like you want but graylog is my go to logging solution if the logs will be in a known format. If you are dealing with logs on the fly ELK is definitely the choice you want but it takes a bit more initial setup. 
I think she is looking for what model to buy.
You should be building a list of dicts. results = [] for data in your_func_to_grab_data: row = {'Value1': data[0], 'Value2': data[1]} #... logic to sanitize data, add missing values etc. results.append(row) df = pd.DataFrame(results) Can also use pandas.concat as mentioned by Detective_Fallacy. df = pd.DataFrame(initial_data) batch = [] for idx, row in enumerate(get_data()): batch.append(row) if idx != 0 and idx % 1000 == 0: df = pd.concat(df, pd.DataFrame(batch)) batch = [] df = pd.concat(df, pd.DataFrame(batch)) 
That's a fantastic amount of Jupyter Notebook stuff all in one place! I really wish making publication PDFs from Jupiter was more straightforward. While this was exhausting even to skim, I'm grateful for those who figure all of this stuff out for the rest of us. Hopefully these sorts of features will become available directly through Jupyter one day, but at least the framework of preprocessors, APIs, plugins and the like make it possible now with some hackery.
http://no.farnell.com/raspberry-pi-essentials-kits raspberry pi 3.
Well, you are correct that doing an explicit transaction worked perfectly and it was just 2 extra lines of code. I guess I'll go for what works, but I'm still curious why the autocommit stuff didn't work. It should.
There's nothing to stop you from making a compiler in python. There are several college courses that teach how to make a compiler.
We must remember that Pandas was designed in a financial background with stock trades and such. That explains most of these features.
Well the auto commit setting assumes that every statement should be wrapped in a transaction. As such, you don't get the control of a transaction. You could look at changing the auto commit setting which should be a connection setting and that would probably start a new transaction at the time of your connection. Really this is expected, there is a bit of a learning curve.
A popular user on codegolf.stackexchange.com, [Dennis](http://codegolf.stackexchange.com/users/12012/dennis) wrote his own language in Python to answer some of the puzzles. You can take a look at it [here](https://github.com/DennisMitchell/jelly)
Yeah, exactly.
Well, there's nothing wrong with making Python a better tool for more jobs, I suppose.
Adafruit makes great kits
Nodebox (Version 1 is a bit outdated, but still cool and python). Have a look at the gallery: https://www.nodebox.net/code/index.php/Gallery
pip can install directly from a git repository for example. Alternatively, wheels, tarballs or run a pypi server.
Those small images are just to give an idea about what it is. I now uploaded the full sized images here if you're interested: http://imgur.com/a/dFLNl I didn't put these in the repo not to increase the repo size for people who want to clone and change things. Note that these images themselves are not that great since I used my smartphone's camera and also I don't know anything about photography. In the end I can say that these cups turned out to be better than I expected. It depends on the shop as well though. Since most of them are used to printing photographies on these cups they may try to convert the pdf to jpg or something similar. But then they should be careful to set a proper quality and resolution not to make the text blurry and noisy. As far as I understand, my shop was directly printing pdf's so there wasn't any such problem. It's best to talk about it beforehand.
[removed]
No, not a satire. Just a demonstration of what's involved. What would you rather, them saying "we can't remove the GIL because of XYZ" or them actually trying to remove the GIL and putting their money where their mouth is and showing the results?
I'm getting some serious rip-off signals here. "Noise filter" for a micro-usb charger? Those things are silent by default, no moving parts. Also, heat sinks? Really? If you're going to buy a kit, at least get one with an SD card. Getting a pre-imaged card is even better, unless you have a computer with an SD-card reader and an OS that can handle it (thanks for nothing, Lenovo...)
Got any examples? I'm thinking of looking into Docker.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Im developing Flask + ReactJS project right now and using pro-version pyCharm (thx for my University for study-licence). Yeah, features are comfortoble and I dont like IDE, but this one really good. Nevertheless. I wont say I gonna give up with vim or something like atom/sublime. Maybe IDE can do most things much better, but not so important things. Still python is not java where you really have to use IDE. 
Thanks for clarifying - I truly didn't know if it was, and I was in on the joke late :-)
Yeah.. Seems like most tools would be overkill for what you are looking for here. Maybe another old school method, use logtail as your consolidator, and then pipe that to something like a python script you write which can pick out the errors you are interested in and highlight them.
Oh there's another process that looks for the CDATA tag? That's not what XML is for. It should parse the XML and put the png in the tag
Using a list of dictionaries doesn't quite make sense to me. Syntactically it looks good, but doing so would mean that you are storing your dict keys (column names) for every row in the dictionary. It seems that in terms of performance and memory usage story a dictionary of list is a better way to go.
Nice. Is there a lot of Python behind the scenes? If you don't mind me asking, are the descriptions above for the public facing website, or more back-office tools?
* [Flask](http://flask.pocoo.org/) * [Bottle](http://bottlepy.org/docs/0.12/) * [Falcon](http://falconframework.org/) Flask and Bottle are super easy to learn and use, though Flask has more extensions. However, if you're going for a plain REST API (and don't need other traditional things that a web framework comes with), then I'd recommend Falcon as it was made specifically for that purpose, and it's faster than the other two.
https://www.nostarch.com/mug.htm
[removed]
If you're parsing it within python, it shouldn't matter, unless you're playing round with the *representation* of the strings. The quoting format is chosen by the interpreter according to the contents, according to a set of rules which try to avoid escaping quotes, though if I remember correctly, you shouldn't expect a particular quoting style to be chosen. For a string containing no apostrophes, repr() would normally be return an apostrophe quoted string; if it *does* contain an apostrophe, repr() will usually return a double-quoted string. I seem to remember older versions at one point returning triple-single-quoted strings if it contains both, but I also remember having seen backslash-escaped single or double quotes within - I suspect it depends on the Python version. **HOWEVER** if you're just dealing with the internal representation of the strings, rather than their syntactical representation, it's irrelevant as the quotes are note *part* of the strings. If you **are** dealing with the repr() of the strings, you can probably use the repr and reprlib modules (in the standard library) which are designed to be subclassed for custom implementations. 
I've used devpi in the past for this. I was more than happy with it at the time. You can have indexes that inherit from another index and can build and push packages to various indexes, the index chain ultimately inherited from pypi. We had a dev -&gt; prod -&gt; pypi indexes. Dev was set as modifiable, prod was read only. We could release packages to dev for non final releases and clean these up as appropriate. Any final releases were pushed to prod and unmodifiable. Our local and dev environments would look at the dev index, staging and production would look at the prod index. Another advantage was that it was configured to lazily cache pypi packages. If pypi went down, it wasn't a catastrophe. Ultimately we preferred this approach to just using git as a package manager, which often gets suggested.
No. The GIL has nothing to do with the language Python. It has to do with the implementation. A JIT like PyPy could theoretically analyze the code and remove all locking.
I recommend this CanaKit. http://www.amazon.com/CanaKit-Raspberry-Complete-Starter-Kit/dp/B01C6Q2GSY/ref=sr_1_1?srs=3020163011&amp;ie=UTF8&amp;qid=1465083298&amp;sr=8-1&amp;keywords=pi3+kit
There's an old saying in software development: "First make it work, then make it fast."
My only thought is that autocommit isn't happening. Clearly you had to do so yourself...wonder if it's not a default here?
I'm one of few that does python at my work, but internally all our repositories are visible so I tag any given library and target that. New Nexus (lots of our systems are Java) is supposedly going to support python packages, so ideally we will be able to move to that.
&gt; Though PyParallel currently only has a Windows implementation targeting Python 3.3.5, I wonder how it compares to the speaker's proposal on the 3 criteria presented in the talk: 1. single-threaded performance, 2. C extension compatibility, and 3. complexity. PyParallel was a huge success for me in that it proved (to me) my hunch that you could do wacky things like completely avoid reference counting in certain situations and things would hum along just fine. I'm working on something now that continues that line of thinking and is even more extreme, but it should solve the parallel compute use case as well, not impact single-threaded performance, require no C extension changes (in fact, they won't even need to be recompiled, nor will the interpreter).
Out of curiosity can this run on OpenWrt - or I guess now [LEDE](https://www.lede-project.org/)?
Did you miss the bit at the end where he suggested "thread-private locking"?
Haven't watched it yet, but this summary makes it sound like it's Deepak Chopra jibberish rather than anything to do with Python. :-( Ok, clicked play, randomly jumped to 7:00, and there's a hippie playing a musical instrument while motorcycle wheel footage and musical notes stream by on screen. It also says PyCon 2016 was in Portland, Oregon. I guess that explains it. :-( This thing goes on for 52 minutes?!? Wait, let me jump again... and again.... and again... eek, more flute... Ok, I don't see how this thing became a closing Keynote. :-( Was Raymond Hettinger sick or something? This is like [Richard Stallman dropped acid](https://youtu.be/9sJUDx7iEJw?t=20s) after reading a geometry textbook. 
How did you make it for 40 minutes?
After jumping around, I don't think it's really *about* anything. It's like a 52-minute Deepak Chopra speech, throwing in a lot of new age stuff and mathematics.
Thank you very much for the follow-up. I thought the capitalisation was some sort of auto-correction.
That's not "judgmental", that's a reasonable conclusion from evidence. 
You can also find apparent patterns and connections in actually random and unconnected things.
Also microservices can quickly become devops-hell for inexperienced developers. Docker is nice, but their can be a lot of wiring to be done especially with "small" frameworks like Flask. You might have to manage a RDBMS connection, a REDIS connection, etc. etc. 
Looks like the PyCon sprint was rather productive!
It would go a lot better if you explained what parts you don't understand; explaining everything about sockets would take a whole book, or at least a few chapters. Perhaps take one of the examples from the documentation and ask specific questions about specific parts. Edit: or, alternatively, describe a problem you're trying to solve. If you want to write a web application, you probably want a framework like Flask. You can certainly use the classes in the standard library, but they're somewhat bare bones and low-level. 
when a connection is open between two computers, they are connecting two sockets. each computer send and receive information through their socket. so, to serve something, you must use a socket server. that socket server will open a socket (connection) so, if someone connects to you, you will be able to talk back using that socket. the client will receive your messages and send messages to you through her socket. but to open a socket you must specify a transport protocol. that protocol defines how messages will be traded, specially what to do with missing messages. TCP is a reliable protocol that will guarantee that all messages are delivered (or an error will pop), so if you want send files you should open a socket using this TCP protocol. in python: httpd = SocketServer.TCPServer(("", 8000), SimpleHTTPServer.SimpleHTTPRequestHandler) 8000 is the port that you will use. ports are used to tell which service you want to access in a host. my machine runs a web server at port 80 and a chat server at port 5556. with the previous line you created a socket on port 8000. but, what to do when you receive a connection? for that you need a handler. a handler is a object that will react when the client send something. in HTTP you can GET things. when you access reddit.com, your browse send a message "GET /" to reddit server to get the first page of reddit. SimpleHTTPServer module does have a handler that will serve files from current directory. that means, when the client do a GET / on your server, that handler will return the list of files in current directory. if the client does GET /file1.txt, this handler will return the content of this file if it exists (404 otherwise). so, you have created a socket with a handler. now you just need to tell your socket to really starting listening to connections: httpd.serve_forever()
In my company, we use localshop, which is basically a pypi server
Just as an aside, does PyGame work with Python 3 yet? I gave up a while ago, never did get it to work.
Haha, I don't make the rules here at work.. Gotta make it exactly like they're used to, because the scripts that parse and read these are pretty rigid. By the way, how do I get this line at the top of the XML? &lt;?xml version="1.0" encoding="UTF-8"?&gt;
Indeed, for example few last-minute critical fixes were contributed for 1.8.1 release. 
If you have a huge site where you are afraid that changes in one area will break changes in another area. So you chose to make your user management as a microservice. Make your own flask site for loggin in, loggin out, updating user profiles, getting back user data etc. Through json. Berhaps you even give it its own user database. Then you make two containers, one for the user database and one for the user flask site. So now user code is completely seperated from the rest of the site, and your user code developers can update their code. Rewrite the python code in c++ for speed, and even migrate the data from postgres to casaandra. Without breaking the main site. The worst thing that can happen is that a change makes users unable to log in, and if that happens you can just restart the previous version of your containers again and the site is back up and running. The problem comes because you will always have some kind of coupling between microservices. In this case you would probably need to use the user data like user id, name, email across the site. And this is where it gets real ugly in a microservice architecture. Like if you make change where you find out that your scheme firstname, lastname does not make sense in an international setting. Then you have to find all instances of code where first name last name appears, and you have to update it in meaningful ways. And the code is spread over 50 github projects with different naming conventions and different programming languages and databases. So fancy to make change to the rust code for updating the users event log, or the node.js code for sending sms password changes etc. Etc. Or you must tell all the owners of other microservices to please change firstname lastname to fullname. Either way it is not pretty. i would use microservices mostly for making sure that i scale different portions of the site out of sync. Perhaps the flask part shoukd be rewritten in something faster to avoid using 10x servers or something like that. Or if you have a part of your site that is almost completely decoupled from the rest of the site. Or if you have many developers working on different parts of a site. Sorry about speling. On tablet.
If you use ElementTree.write() you can check the arguments. It has xml_declaration as an argument. Just set it to true and it should write it. You should check the documentation for lxml. 
I think parse is a pretty loose term
It's completely different than what I was envisioning. I was expecting that they would be useful as services with robots or home automation. You send an http request to an API endpoint, and ask for the the temperature (current or between this time and that time) etc. So thanks a lot for the detailed response.
Ah, it seems I'd gotten my vocab wrong. I thought microservices were webapps. Thanks again.
What do you mean by text version? Latex sources are already in the repo.
&gt; but every website is explaining it in language that doesn't make sense to me. Honestly, here is your problem. You need to re-read these sites (I recommend the python docs) until you get it. If you don't understand a word, put it into google until you understand it. Also, you often dont have to understand *every* word, just the gist of it. A "socket" when it comes to network programming, is basically a virtual handle into which you can send and receive data. You create one by binding it to a local IP address (so your computer knows through which network to go, LAN, the internet, a VPN etc.) and also a port (so you can distinguish different services, 80 is commonly used for HTTP for example). The most common protocols in this case to use when transmitting data through a socket is TCP and UDP. You send data in chunks that must be no larger than the MTU of the system (commonly 1500 bytes). In reality there are other factors in play than the MTU, but it's a good starting point for learning. **With UDP**, these chunks can arrive in any order, some chunks can be lost, some can be sent twice. The benefit here is that UDP has very little overhead compared to TCP, and lets you be in charge of verifying data etc. You don't even need to establish a connection to send data through UDP either, and UDP is very fitting for implementing multicasting. This is what is known as a datagram protocol. **With TCP**, these chunks are guaranteed to arrive in the exact order you sent them. This comes with extra overhead, and you also need to establish a connection to transmit data. This is what is known as a stream protocol. **To sum up:** You need to understand everything I just typed in this post to reliably work with network programming. Network programming is one of the more difficult parts of programming, and it's the reason many people hate it. But like anything else, it can be understood if you give it enough time and effort.
We have a BBC wide team responsible for providing tooling and service abstractions in front of AWS and most of that tooling is Python. Front end for BBC news has traditionally been PHP and we use Java , Go and Ruby for back-end APIs and services too (started moving more towards Go for CLI tools too). BBC Sport has an important service for our teams to consume content which is built on top of Redis and Node. Think some smaller teams have utilised Clojure for some bits and pieces too.
I have mostly solved my problem by, well, just trying it and seeing what happens. The SSH Terminal in a codeanywhere container will display a curses window correctly, as I should have expected had I actually thought about what SSH terminals are for. The only problem I'm having is getting the terminal screen to return to normal afterwards. I've added all the lines that docs say to add in order to return your terminal to normal, but it acts weird. The command prompts do this: Prompt: prompt: Prompt: And the text you type doesn't display, though it still executes correctly. Any guesses what I might be doing wrong?
Hey Thanks a lot !
pyramid and flask have integrations with mongo. These are just a few, also keep in mind you can use directly mongodb via pymongo. For pyramid you can see http://docs.pylonsproject.org/projects/pyramid_cookbook/en/latest/database/mongodb.html Flask has https://flask-pymongo.readthedocs.io/en/latest/
Why not just use language variables?
I'll give it a shot. I'm assuming you're interested in how to use sockets at an application layer, and leaving the OS layer and hardware layer as an abstraction (in large part because I'm not nearly as familiar with them myself). I'm also going to stick to TCP, which is for bi-directional streams with guaranteed delivery. There's also UDP, which is for fire-and-forget pieces of data. In short, a socket is a way of sending data between two processes, often on different hosts. Once you have a socket established (which I'll get to in a minute) you can call "socket.send('data')" on one host, and "socket.recv() == data" on the other host will evaluate to True. Now, the simplest way to establish a pair of sockets on remote hosts is to create two individual sockets, one in client mode, one in server mode. The server mode one is going to listen on a particular port for connections. The client one is going to attempt to establish a connection with the server mode port by specifying the same address and port that the server mode port is listening on. Once you establish the connection, you can socket.send(data) and socket.recv(data) from either end, and the opposite end will get the data. If you're implementing a server naively, you'll end up with a single socket that accepts a connection from a client, sends information back and forth from that client, and then dies. Generally when you're writing a server application, you want something that can establish connections with multiple clients simultaneously, and not die when one transaction is over. You could write your own logic to fork off threads to deal with different clients, but that's a lot of pretty-standard boilerplate. Instead, you can use SocketServer, which will take care of establishing sockets with clients, and invoke a function you write once it has a socket for you to interact with. So far we've been talking about simple TCP sockets, which allow you to do a wide variety of things involving sending and receiving small pieces of data. Many higher level protocols are built on top of this. A very common one is HTTP. With HTTP connections, a client makes a request, the server responds to that request, and the transaction is complete. HTTP isn't like a general TCP session where the client and server can go back and forth as part of a single transaction, it uses a request/response paradigm on top of TCP. The SimpleHTTPServer takes care of the connection establishment, and understanding of the low level details of the HTTP protocol, and allows you to just worry about "What do I do when I get a request?" Generally, if you're working with HTTP there are more comprehensive frameworks that simplify things better. I'm a big fan of Django, but there are a lot of other HTTP frameworks that help you think about things in terms of request object / response object without getting into the details of sockets. If you're working with raw TCP sockets, I think it's assumed that you already know why you need raw TCP sockets, and that the simplified request / response paradigm of HTTP is insufficient for your use case.
I thought it was an appropriately cheeky answer to a somewhat disrespectful question. Larry could've been much harsher (and I probably would've been if in his shoes)
Why was it disrespectful?
Looks really nice! :-)
I came here to say just that. I frequently use underscores when unpacking to discard the irrelevant parts.
Yes I saw that, but he hasn't done it yet, it is also at the bottom of his list. I don't see the point in presenting this when so little has been done. Yes you can throw excessive locks into a single threaded application to make it thread safe and slow. That is not a remotely interesting statement in my mind. 
Seems more like the old saying in academia "present the paper and then do the research." I don't object to his doing this, i object to his presenting the work as if it were something important.
Disappointed there is no walk method. 
Flexx: Python UI tookit based on web technology https://github.com/zoofIO/flexx http://flexx.readthedocs.org 
Connected to by browser? That again complicates things, because HTTP requests are short lived (here's a request, here's a response, goodbye) and can't really be used for real-time back and forth communications like that. There are various ways to fake it, and you can use Websockets which was specifically designed to address this problem. But WebSockets are not plain sockets, they're a whole thing with their own protocol and there's nothing that speaks that in the standard library, so you'd still need to use Twisted or Tornado or some other networking framework. If you want simple, then you need for both ends to be running in the terminal, and then you can pretty much just copy the [examples in the documentation](https://docs.python.org/3/library/socketserver.html#socketserver-tcpserver-example). Edit: I spoke a little too fast, and that example is just an echo server, not a chat system. But I think you can find examples of simple two-way in-terminal chat scripts if you search, because it's a common learning stepping stone.
Read code that somebody embedded in a project. Then read [stuff like this](https://docs.python.org/3/library/http.server.html) read the code again. Repeat for weeks, until it clicks. Sorry, there is no other way. It is just like learning words in a foreign language. The simplest and most easy way is to just learn them from a frequency list, use them while translating, try to speak, learn more words. Repeat for years.
I made your code more awesome and more beautiful def gtin_total(digits: list) -&gt; int: return int(digits[0] * 3 + digits[1] + digits[2] * 3 + digits[3] + digits[4] * 3 + digits[6] + digits[6] * 3) def check(g: int) -&gt; None: if (g / 10.).is_integer(): print('Your code is valid') else: print('Your 8 digit GTIN code is invalid.') def validate(g: str) -&gt; None: choice = input('Would you like to validate your 8-digit GTIN-8 code? ') if choice.lower().startswith('y'): gtin8 = [int(i) for i in g] gtin_total_plus_mod = gtin_total(gtin8) + gtin_total_mod check(gtin_total_plus_mod) exit(0) elif choice.lower().startswith('n'): print('Ok, thank you.') exit(1) else: print("Please respond with 'yes' or 'no'") validate(g) num = '' while len(num) != 7: num = input('Enter 7 different digit: ') else: gtin7 = [int(n) for n in num] gtin_total_amt = gtin_total(gtin7) gtin_total_round = round(gtin_total_amt, - 1) gtin_total_mod = int(gtin_total_round - gtin_total_amt) % 10 gtin_full = str(num) + str(gtin_total_mod) print('The full valid 8-Digit GTIN-8 code is: ' + gtin_full) validate(gtin_full) 
Maybe it is a cultural thing. I thought the question was reasonable.
If you execute random executables, this would be last of your problem.
Then it's up to the project's maintainer to make sure underscores aren't used for anything else than translation strings. The underscore function is also used in many languages for many years.
THank you very much, it's very helpful.
Gettext is language independent.
Off the top of my head, something like parsing netstat output every couple of seconds or so, and then using the SMTP logging in python should probably be a pretty quick and dirty way to do it. =)
I mostly have problems finding the motivation to finish projects. 
To generate exact text (and not valid XML), why are you bothering with lxml at all? Escaping and validation is like 99% of what lxml XML generation provides, and you don't seem to want either. print('&lt;Description type="C"&gt; &lt; &lt;/Description&gt;') Done.
It prints false because it's not opened. 
I think the educational tutorial [Let's Build a Web Server](https://ruslanspivak.com/lsbaws-part1/) is **exactly** what you are looking for. It's written in "legacy" python, if you have trouble converting it to python 3 you can message me. [Here's Part 2](https://ruslanspivak.com/lsbaws-part2/) [Here's Part 3](https://ruslanspivak.com/lsbaws-part3/)
Fluent Python is fantastic if you already know the core Python language. It teaches you how to use language features using examples where it makes sense to use them.
&gt; So if they don't know at least some of that, it's a huge red flag as they've not really taken any time to even research basics of the language in a job they're interviewing for. I don't see why. Maybe I'm in a employees market and you're in a corporations market? To me it should be just getting someone from inside the company that knows a language the applicant knows (it's not really an applicant, but someone we've head hunted and we hope he/she comes to the interview!). The company that is trying to hire most likely has someone who knows some language the applicant knows (assuming the company is bigger than 1-2 developers and the applicant knows 2+ languages). Just grab one of those and do the interview in that comfort zone.
To anyone coming in later: this article is bull. Just hire a good developer and they'll be productive in a week in python. This is my experience from seeing at least 10 people start at my job after me without significant python experience.
Building a browser based chatroom using only the standard library is a tall order. There are a number of third party libraries that would drastically simplify what you're trying to accomplish. If you're adamant about building it yourself, then you need to first focus on making sure you understand the terminology used in the documentation, understand the protocols involved and their limitations. I've built professional real time web applications in Python, but I've never used the sockets library directly except in toy projects and experiments. I have a pretty good idea what's happening under the hood, but I generally use third party framework and libraries where available. 
Awesome. Definitely give these a watch when I have time. Also following the guy doing the n64 emulator. Thanks for doing these.
TinyTag does whatever it can to read mp3s. Its reads both ID3-tag versions and picks the best data from each. It also can deal with some really weird encodings, string terminations and also some misuse of certain data fields. TinyTag is also used in my mildly popular [streaming server CherryMusic](https://github.com/devsnd/cherrymusic) which I use myself on a daily basis. It holds up really well for pretty much all real data you throw at it.
Why? And why does it need to be so generic? What's your exact use case? What's running on port 8080? And if nothing is running why would you leave this port open?
I did also say that the title probably should've been worded differently. It's not as though this is just some random YouTube video, so your first point is kind of silly. Considering that a number of other programmers filtered this submission high up in the subreddit for you indicates that a fair amount of people with somewhat similar experiences found it interesting and worthwhile. I think that sort of indicates "Yeah, this video is something Python programmers may want to watch." I never said that the title was totally fine; I would've preferred more information too. But I don't think the lack of information justified the extraordinary amount of salt OP has been getting for this submission. It was a good video. If you don't wanna watch it because you can't decide from the one-line description *then don't watch it*. Not that big of a deal.
Anthony also addresses this towards the end of the talk, performance in usage is the same as bash, but startup is a bit slower. He also mentions that the demo is not done live, it's pre-recorded playback in a webbrowser, and thats the reason for the waiting times you see. I have it installed on both my macbook (using homebrew) and on my debian server (from this "guide" https://github.com/scopatz/xonsh/issues/730), and I dont see any performance difference compared to bash, except for slower startup time on the debian server since its an atom box (as mentioned in the talk).
[Actually Asyncio does have a proactor event loop.](https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.ProactorEventLoop) However proactor event loops suffer from some limitations on python. First it limits the types of operations you can accomplish to whatever the platform you're on supports. Meaning that most of the time, you can only handle I/O operations. Reactors, on the other hand, can handle any event you can link to a defferred/promise/future. Second, because of the python GIL, the OS can't simply run your python code in a fork and return you the data as it sometimes does with other compiled languages' proactor loops. It would need a complete interpreter in its own sub-process to run asynchronously. Whereas a reactor stays within a single python interpreter and can runs the code natively. \**edit, hit save too soon* Third is buffer space. A buffer has to be allocated for each asyncronous operation for the duration of the IO, and they can run on indefinetly. And finally, simple complexity. Proactors are harder to write (especially in python) and so is the code that uses them.
It looks like that was an issue with the presentation or chrome extension he was using. I'm testing it out right now and it feels just as fast as a normal shell.
It is indeed a shitshow. At least on Linux, there is a tiny glimmer of hope for the future; there's a [proposed kernel module](http://lwn.net/Articles/686789/) that would optionally allow enforcing restrictions on path names. It could be used to enforce UTF-8 encoding, so that it's impossible to create a file whose name is not UTF-8. It also allows closing the long-standing annoyance of Unix that filenames can contain literally anything, including newlines, terminal escape sequences, and Cthulhu. Maybe in another decade we can stop having to write overly defensive shell scripts that bend over backwards to support filenames that contain newlines, just in case someone is evil enough to do that. It's no coincidence that the proponent of that module is David Wheeler who has [long campaigned](http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html) for an end to the Unix pathname insanity. 
How slow? I'm trying it in a EC2 tiny instance with amazon linux and a virtualbox vm with mint and it has around a 0.5 second startup time in both. Granted, that is a lot slower than the bash startup time and could be a problem for some uses.
looks like the default shell that comes with chromeOS
Ok! Cool. I'll have to try it out later, it's just that I've had many an issue with slow shells. (Notably trying to run [Babun](//babun.github.io) from a USB.)
It's a decent 5-6 seconds to start on my laptop.
So angular seems to be one of the most popular choices (from googling), seeing it on the Mean stack and such. Angular would be able to call python scripts that were hosted on my backend server, or maybe the python scripts are called through standard HTML, and Angular just makes it easy to show that returned data in a pretty format? THANKS!
Can you tag various tracker files? (As found on http://keygenmusic.org/). My music player can play them fine, and can read the tags, but for some reason failed on writing new ones. Would be nice if I didn't have to convert them to .ogg, since the originals are about 10kb, the oggs are about 1MB.
Yeah, if your python scripts will listen on HTTP, Angular can talk directly to them. You'd be replacing express/node with those, practically. You'd just need to host the HTML/CSS/JS somehow (with python simpleserver or nginx or apache or something)
Nice,point bro i already have application "empire" listen on port 8080 i need to be notified once client connected
I installed it via homebrew and got an error when trying to run it. Something a file not existing when calling `readline.read_init_file` or whatever it was.
That's [Secure Shell](https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en). It's what google recommends using instead of the built-in shell for SSH client purposes.
Use pathlib with python 3 and deprecate the older python 2 version. Let's move on, this is why python 3 is the better solution and the future.
it seems greet idea can u share the code.
Is this application logging client connections by any chance? Then you could solves this via some log parsing application which doesn't need to be Python by the way. Look for a tool that does the job, not one that is written in a particular language.
I don't like how every special character gets a new meaning in this shell. It also makes this very hard to read if you don't use it regularly.
As the data is small, just [write it into a text file](http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python). For many many entries you can use SQLite.
if you could recommend one would be great and will make my life easier :)
Hm I looked around the Internet and it seems there is not a lot to parse: [xm does not contain meta data](ftp://ftp.modland.com/pub/documents/format_documentation/FastTracker%202%20v2.04%20\(.xm\).html), [mod contains only a song name](http://www.eblong.com/zarf/blorb/mod-spec.txt) and [s3m also only contains a title](http://www.shikadi.net/moddingwiki/S3M_Format) 
Thanks for the heads up! nice to hear that it is being used :)
TinyTag can only read tags and does not write them. I don't have any plans to change that, as I already don't have any spare time left ;)
That article is wrong about "reactor" being synchronous. I didn't read any further. Note that with *any* event loop, you are still *fully* reliant on how well your handlers are written (how quickly they return, how the respond to incomplete or invalid data, etc.)
Savage
Underscore is a bad habit picked up from C, there is no need to repeat it. Also, this article is not very in-depth at all - e.g. it doesn't mention the problem of translating *library* code rather than application code. One thing that is bad about the way `gettext` in C is implemented is that you can only emit messages for one locale at a time, and switching is very expensive. I haven't investigated whether that defect is applicable to Python as well, since I know it has reimplemented a lot rather than using the C library as-is.
*Please* don't use `ctypes` anymore, use `cffi` instead.
Does this support mp4/mov files? I've been looking for a module to edit metadata of some of my shows.
What problems did you have? Why do you need a Linux distribution? You can change the default shell for your user. 
Do you have an example that doesn't work?
zsh &gt; everything else
r/python: Not the right place to ask others to write your cracking tools. You could try r/learnpython though I doubt you'll get any more help there because this sounds shady as fuck.
For inputs around my experience (only one thing agile related from the additional pieces selection) almost all the suggestions were garbage around agile scrum master, agile lead, agile .... none of which I would ever want. Seems weighted a little improperly.
I'm delighted to hear that! Why's it look so slow then? I'll have to explore further. 
Run a simple server for home use. Install an old Ubuntu server version or something similar on it and rock on. I could actually use a mchine like that to do some repetitive geometrical calculations and simulations for a research
Jesus H Christ
Recycle it.
Thanks. This makes sense!
IMO the best way to get a feel for things is to write a single-threaded loop using only `epoll` that does non-blocking `connect`s to multiple DNS results using a one-second delay, and cancels the rest after the first connects, then use it as a simple relay proxy. Since this example doesn't require you to actually deal with any data, you don't have to worry about buffering.
I believe if you just install `prompt_toolkit` it'll use it by default. But if you've saved a configuration that sets it to use `readline` you might have to set the [SHELL_TYPE](http://xon.sh/envvars.html#shell-type) environment variable.
Largest features are automatic detection and reading of compressed files and easy parallelization (under the hood using `multiprocessing`). Below is a simple example of parallelism in action which should take 1 second on 4 cores. import time from functional import pseq pseq.range(4).map(lambda x: time.sleep(1))
Just curious, why do you like vi mode better than the emacs mode? I do use vim but I found that modal editing was overkill at the command line. You just find it easier to have same editing style uniformly?
Eh, maybe the kinks are worked out, maybe not. Shellshock isn't that old yet. There's still a buffer overflow if you have too long of a version string in your ./configure, not practically exploitable but it's still there. Seeing as it took about 30 minutes to find a buffer overflow, it makes me really wonder just how many kinks there might still be. Sometimes it's not that it's bug free, it's that no one who knows how to find and develop an exploit for a vulnerability in C wants to spend days digging through the mountain high haystack of bash source. I still use bash and still will, but not because I love it. It's just practical to use the most common linux shell. I'd love if moving to xonsh was practical, but if I can't really share a xonsh script with my coworkers, I don't think it's a great idea to move to it. It's a lost cause IMO to develop new shells at this point... there's just too much built around bash. You don't build a skyscraper with steel beams and start using a new metal alloy halfway through. Maybe not the best analogy, but you get my point.
Try putting Xubuntu on it http://xubuntu.org/
I think he is inferring that it's not very practical to use a different shell than what all the tools are based on in your distro, which is also going to be what your servers can use. If a distro had all its system tools in python and xonsh, you'd have much more reason to stick to it. If your server could run xonsh out of the box, it'd be convenient to use. Instead of writing xonsh scripts that I can never share with my coworkers, I could just write python scripts like I do now. It's basically python with new shell operators. It's like using some obscure fork of a python interpreter and writing scripts that only work for it, and not your coworkers. Why not just write something in Python with less functionality but can be run on any server, by any coworker, without any dependencies, and allows coworkers to actually be able to edit it and run it on their workstation? It looks very convenient in some respects for personal use, but anything more complex than "run this, pipe to this, redirect output to here" I would write a python script. I don't think xonsh would be any different. I'd rather spend time doing it the long way in python than the quick way in xonsh with special syntax. Otherwise, I might have to rewrite it to run it on a server or to give to my coworker. And it's not impossible to write python scripts that are shell-like with something like the [sh library](https://amoffat.github.io/sh/). And I can package that up and share it with anyone. The capabilities are neat with the xonsh syntax, but it's also starting to look a little perl-ish, and not in a good way. I really don't want to start writing python with stuff like `out = $(echo @(x + ' ' + y))`, pulled straight from the xonsh tutorial. Something like `sh.echo(x + ' ' + y)` looks a lot less intimidating, and is actually easier to write and read. As soon as you start really taking advantage of the xonsh syntax and new features, I'd imagine you're going to end up with something that looks like python with inline bad perl. IMO, extra features and syntax doesn't always improve something. Anything is already capable with python, shell commands are already convenient with sh or fabric or invoke, and I haven't been dying for any syntactical shortcuts with magical @ ! $ () [] operators.
I want zsh vs fish to be the new vim vs emacs.
Also better than anything native for Windows because it has much better font rendering and color support. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
SQLAlchemy has great docs, as does Flask and Django. All three have an API or similar section that documents how to use classes and functions. For an example of documentation styles that need improvement and can be difficult to use look at uWSGI and lxml.
This is an artifact of the presentation software Anthony was using to show those demos (pre-recorded), which doesn't actually reflect the timing of running it live.
Requests is also a good option
except zsh and fish are so different comparing them isn't really worth it
Hmm. It is true that startup time can vary greatly depending on your configuration and on your machine. But 5-6 seconds is way longer than I would expect. A couple of things that may help: * There is a fix on the current master branch that should reduce this time greatly by caching some values related to tab completion (except on the first run, when the cache is being built). * If you are operating inside a Git or Mercurial repository, that can slow things down because the current default prompt tries to figure out some information about the branch you're on, whether it's clean, etc, to display some of this info in the prompt. Removing the branch-related information from the $PROMPT string might help to speed things up.
For what it's worth, I think we've made good progress in the last couple of months! In particular, a couple of OSX-specific things were just fixed very recently. I've been using xonsh as my default shell for a long time now and very rarely do I encounter issues. If you're interested in the idea of xonsh, it might be worth giving it another shot from the current master branch on Github. Any specific issues you can recall? We're always happy to dig in and try to fix things.
...and you don't *just* have to learn how it works, but have to *constantly* remind yourself of the little nitty-gritty details of how it works. There are so many little syntax gotchas and behavior-affecting (even *syntax*-affecting) options and environment variables and such, and data manipulation is far from easy.
Absolutely. As far as I'm concerned, I always look up to Seaborn's doc as one of the best out there. 
Look at porn
Good to hear.
 I want to use python syntax at the command-line, but I can't use this until something like [autojump](https://github.com/wting/autojump) or [z](https://github.com/rupa/z) for path jumping is available and the tab completion needs to be better(fish makes it amazing).
This is quite fair. For sharing things with others, Python and/or Bash are likely the right thing. I don't often write "xonsh scripts" per se, mostly just one-liners at the interactive prompt. For me personally, I've found a lot of the features of xonsh to be really nice (I've been using it as my default shell for &gt;1 year now). A simple example is being able to do arithmetic with floats and/or complex numbers without having to open a separate program (e.g., Python) to do the calculation. Maybe I'm just too lazy. I honestly don't really use a lot of the extra built-ins too often, but one place it has come in handy for me recently (as opposed to some awk/sed magic) is computing the average of a column in a csv, straight from the shell prompt: numpy.mean([float(i.split(',')[3]) for i in $(cat my_file.csv).splitlines()]) The same could be done in Python, sure, but I think it is nice to be able to do this on one line (and the imho more convenient `$(cat my_file.csv)` vs `open("my_file.csv").read()`) and to be dropped right back into my normal shell afterwards. But for the most part, I use it just as a normal shell: running a single command at a time. And it works pretty well at that. Then, when I want to do something more complicated, I can do it with a Pythonic syntax, which I think is very nice! &gt; Something like sh.echo(x + ' ' + y) looks a lot less intimidating, and is actually easier to write and read. This may be true (that syntax is arguably nicer), but to get there, you have to open up python and import `sh`, or write a script and invoke python on it, and then jump back to the command prompt when you're done. I think there's a benefit to being able to do it all in one place. Different strokes, I suppose :)
This is so damn cool. I just started using Python this evening. I have been wanting to learn how to code for a while now and I finally made the push and got started with code academy. This just made me want to learn even more. Really neat! 
Donate or recycle it. You're looking at this backwards: Don't create a problem just because you have a solution!
Did you try running xonsh with `prompt_toolkit` installed? This makes the tab completion much more fish-y :) You're right that it looks like we don't support autojump or z right now, but I agree that would be a great feature. We'll keep that in mind moving forward.
Exception on first run preventing any use of she'll for instance. Was still a problem two days ago with a pip package. Edit: still a think w/ archlinux aur package: Thanks for using the xonsh configuration wizard! ValueError: expected '}' before end of string Traceback (most recent call last): File "/usr/bin/xonsh", line 9, in &lt;module&gt; load_entry_point('xonsh==0.3.2', 'console_scripts', 'xonsh')() File "/usr/lib/python3.5/site-packages/xonsh/main.py", line 254, in main shell.cmdloop() File "/usr/lib/python3.5/site-packages/xonsh/readline_shell.py", line 325, in cmdloop self._cmdloop(intro=intro) File "/usr/lib/python3.5/site-packages/xonsh/readline_shell.py", line 285, in _cmdloop line = self.singleline() File "/usr/lib/python3.5/site-packages/xonsh/readline_shell.py", line 183, in singleline rtn = input(self.prompt) File "/usr/lib/python3.5/site-packages/xonsh/readline_shell.py", line 357, in prompt hide=hide) File "/usr/lib/python3.5/site-packages/xonsh/ansi_colors.py", line 46, in partial_color_format for literal, field, spec, conv in formatter.parse(template): ValueError: expected '}' before end of string
or this: http://www.fabfile.org/ which i bet is built on top of paramiko but makes it easier and not have to worry about the connection code, just write what you want. For the OPs requirements, he can log the failed connections. 
Work of an evil genius :-)
What type of functionality do you need for your scripts? Any connections to external devices via serial or Ethernet?
Ok thanks i will gove it a read
Instead of a traditional GUI, you could also consider a Flask or Django-based solution. You would then end up with a website, that you could either host on your own computer or on an internal server, exposed to the local network. That would make charting etc. really easy. You could even make interactive charts with Bokeh or D3.
&gt; I'm a slow learner … said no programmer ever.
Thanks a lot, I have been wishing for exactly this for years :)
pathlib is definitely one of my favourite new modules. It should get even better in python3.6 thanks to added functionality to make it play better with APIs that traditionally accepted only str.
You can use PyQt's uic module to load those files directly from your program, no need to compile them beforehand. See http://pyqt.sourceforge.net/Docs/PyQt4/designer.html#the-uic-module
Drawing an arbitrary graph so that nothing overlaps is actually a very complex problem. There's a whole area of mathematics dedicated to it, called "graph drawing" (duh). If your goal is to get good looking output, look into NetworkX or Graphviz. If you want to actually learn an algorithm that lets you do it yourself, prepare for a lot of math. 
SQLAlchemy. Not only is the documentation a bright example for other projects, the change-logs are also bliss. They are useful in that they describe exactly what was changed, the link to the bug-tracker, if it is a bugfix a feature, etc. I'm constantly amazed by how good it is. On the other hand one could argue that it's sad that it is the exception and not the rule. :)
I agree it may sound shady but there would be other methods using Kali/Backtrack if wanted to exploit or hack. I just want to verify I can or cannot login to the list of devices as a security precaution. Cheers.
If you need to do a bit more complex computations you could try pandas. It supports csv input and output.
I have a little example/tutorial using the uic module: https://github.com/awesomebytes/python_qt_tutorial it's very simple! :)
This is really interesting! I'm surprised there is such a range of software and choices of languages, rather than homogenising the codebase across the various departments. Does that mean that everyone has to be comfortable with coding in any language thrown at them, or do you have a specific team of Python guys which handle set codebases? Sorry for all the questions, I could keep going for ages. Have you considered an IAMA? I'm sure there would be interest in how such a large institution with such international impact does things "behind the scenes".
&gt; to get there, you have to open up python and import sh, or write a script and invoke python on it or use `python -c`
You'd really have to be more specific to your use case, and it would probably be best for you to benchmark it yourself. That said the "new thing" seems to be [uvloop](https://github.com/MagicStack/uvloop/blob/master/README.rst) which simply changes the event loop policy and claims to be 2-4x faster.
Thanks. Honestly what I have done so far is really simple to do. Most of the heavy lifting is done by the APIs. If I get the right kind of feedback from a few blind people I have reached out to and move forward, I'll have to step it up some. I'll have to handle links and images and try to seamlessly incorporate other social networks. You sound like me when I was first starting. I always regretted not studying computer science and finally I dove into bash and python about 3 years ago. It's been cool. The only limit is your imagination. Well and your patience. 
https://ccbv.co.uk/
Definitely Fask http://flask.pocoo.org I went from knowing NOTHING about python and programming in general, to building actual web applications and backend systems i earn money from.
Well, this didn't work. No plots to be seen, sadly.
Not an example but an essay: Steve Losh's [Teach, Don't Tell](http://stevelosh.com/blog/2013/09/teach-dont-tell/) is a good essay on how to write good documentation for a programming language or a library. He presents an 'anatomy of good documentation' that helped me to disentangle the different purposes documentation has to serve.
Also look at Grandalf which I have been working with recently.
There's no sound in this video. 
I agree and I think this is more a critique of CBV's than of the documentation. The [Django Vanilla Views](http://django-vanilla-views.org) project is an attempt at a simpler model. I personally use FBV's exclusively unless forced into it. We use Django Rest Framework's CBV's when writing REST API's but mostly because the framework leans heavily toward it and a good API should be highly mechanical code-by-convention stuff. I find all of the default behaviors are hard to internalize with a web framework.
If you are doing anything remotely mathematical or numeric with the file, you really should be using pandas if you can. 
If you run the attached python notebook you will be able to generate the Plotly visuals
Here is what I would do assuming you are using some IDE: * Make a Dockerfile for the python app * Make a docker-compose file to stitch things together like the python app, postgres, redis, etc. * In your python app, map a volume going from the code source on the host to where the source will be in the container. This will make it so that changes made by the host via your IDE will be instantly reflected within the container. Combined with the development server refreshing on change this makes things easy. Doing this will let you develop within Docker, but use the code reflection inspection of your IDE It seems unnecessary to be making a docker image per commit. Let git take care of being able to switch between different versions of code (exception being if you are integrating a CI system as well). A while back I wrote a tutorial on doing a web app with docker. It hasn't been updated for newer versions of docker/docker-compose/django, but it might be useful anyway: https://github.com/EntilZha/docker-workshop
[Zato](https://zato.io/docs/) is very often commended for its documentation. It has several introductory chapters, a tutorial, usage examples, reference pages, details of the architecture and everything is written or diagrammed from the perspective of its main users - SOA and API architects, programmers, administrators or testers - rather than its own authors, which is exactly what is needed to have great docs. Without this sort of empathy no documentation will ever succeed.
PyCharm. Bit lost in subsequent edits :(
Heh, glad someone read more into it than me bitching about a phrase. I used to use that phrase a lot myself. I considered myself a fast learner because I taught myself things via the internet and usually got quick results. Since then I have realized that this is simply how most people learn programming. Whether you're actually fast or not is impossible to deduce until you actually do some kind of side-by-side comparison with other people in the same situation (which is quite difficult). The reason I notice the phrase is because I read a lot of applications by people who wanted to join a medium sized software project (hobbyists, nothing professional). The applications are about half and half by people who either have the required qualifications or by people who emphasize that they will be able to quickly learn what they are missing because they are "fast learners". Turns out the limiting factor usually isn't speed but dedication.
I can generate new configuration and it gets saved. When shell starts to initialize that error happens. Starting shell again - same error.
But pandas has a pretty steep learning curve and a lot of quirks that can really demotivate you.
Article doesn't seem to be linked. Its a good idea idea in general to have separate your development/production environment. The reason for this is that development has nice features such as the Django debug server, doesn't cache requests, and whatnot while the production server should give a vanilla error page (not useful for debugging) and everything being cached can be annoying. Depending on what you are doing, you could do this in the Dockerfile or docker-compose file.
Here it is: http://hokstad.com/docker/patterns
After having generated and saved the config, there should be a file `~/.config/xonsh/config.json`. Would you mind sending me that file (here or in a PM) so I can take a look? Looks like it could be an improperly-formatted prompt (we certainly don't want to break in this case!). A temporary workaround if you want to get in and get going might be just to move that file elsewhere (so that it isn't read by xonsh, but it isn't all lost), and create an empty .xonshrc file with `touch ~/.xonshrc`.
They look really similar. One difference I was able to find is that in javascript you can pass a value in to the next() method, and the yield statement will return that value. See [Advanced Generators (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Advanced_generators)
Never stopped vim and emacs.
[TensorFlow](https://www.tensorflow.org/) would currently be my top candidate. They have really nice and comprehensive Tutorials, a bunch of useful How-To guides, and a pretty complete API documentation.
Unfortunately, https://docs.gae-init.appspot.com/ has a misconfigured certificate that won't even let me add an exception in Firefox.
But what is the realistic ceiling on *startup* performance improvements? I mean, in some contexts, I will completely avoid using `python3 -c 'import foo; foo.some_trivial_cheap_operation()'` because it's -just too slow- to start python at all. I even find myself needing to use dash instead of bash because bash is too slow. For comparison: $ time python3 -c 'print("foo")' foo python3 -c 'print("foo")' 0.06s user 0.00s system 86% cpu 0.077 total $ time bash -c 'echo foo' foo bash -c 'echo foo' 0.01s user 0.00s system 72% cpu 0.009 total $ time dash -c 'echo foo' foo dash -c 'echo foo' 0.00s user 0.00s system 0% cpu 0.002 total And heck, why not include zsh: $ time zsh -c 'echo foo' foo zsh -c 'echo foo' 0.00s user 0.00s system 19% cpu 0.008 total Here that is in a simplified list: * python3: 0.077 * bash: 0.009 * zsh: 0.008 * dash: 0.002 These are all warm starts, so should be representative for anything that you may be invoking repeatedly.
Two approaches (though not the only two, obviously) to addressing the problems caused by Python's GIL: * The Gilectomy: https://www.youtube.com/watch?v=P3AyI_u66Bw * PyParallel: http://pyparallel.org/ I'm submitting /u/trentnelson's comments as a top-level link because they are a bit buried in the [original Gilectomy discussion](https://www.reddit.com/r/Python/comments/4mc634/pycon_2016_pythons_infamous_gil/), and because I think it would be interesting to more fully discuss these two approaches in comparison to one another.
Is it just me that can hear anything in this video? No sound at all.
I didn't really mean to imply that. I was just trying to figure out if there was some technical difference or just style.
Not sure why I didn't think of scikit-learn when I saw this topic, but yeah you're absolutely right. Need to do some kind of clustering, but you don't know about clustering algorithms*? No problem, pull up the clustering page on scikit-learn documentation and read about all the ones they have implemented and good use cases for each. *I had that issue at work recently, that page describing them all was a life saver.
It sounds like you're operating on pixels stored as a two dimensional array, you've processed the pixels into an array of booleans, and you want a list of (x, y) coordinates where the boolean is True. In that case, you just need to loop through the array and append items to your list. stars = [] for y, row in enumerate(pixels_array): for x, col in enumerate(row): if col: stars.append((x, y)) 
def have_i_been_pwned(): return True
Thank you! I guess i did it the hard way.
I'd like to know if [this](https://lwn.net/Articles/650521/) (subinterpreters) has gotten anywhere. I think it would be an ideal solution for mixing just a couple of CPU-bound workers into a largely IO-bound process, which is my most common use-case.
why the hard sell? A steep learning curve can dismiss from consideration a library even if it is theoretically faster. It really depends upon wha the original posters intentions are. 
I am having a hard time just figuring out where to start honestly. But hopefully I find my stride and get pretty deep into it! 
https://groups.google.com/forum/#!topic/python-ideas/NrbcuFMf4Io%5B126-150%5D
Haha! That was funny. :D Hope you find the links useful - and find your coffee ;) In the beginning I used cheap python courses from udemy as well as youtube videos for learning python, but slowly went on to learn from stackoverflow, blogs and e-books instead.
basically I'm working on a networking middleware for games. the client is written in C++ and uses msgpack. it connects to the server (python) via tcp and sends messages to which the server does or doesn't have to respond to. since the server will be behind haproxy for load balancing, I will be running multiple nodes of it via Docker. that's why I need Redis to store connection IDs because they will be used in the session service of my middleware afterwards. the actual tcp server will just handle and store the connections and it will send the messages/requests to my RabbitMQ server which will disperse them to my worker nodes (python). (I'll have a separate queue for result callbacks). that will be done with the pika library. now all this has to be used along with tls/ssl which asyncio seems to support. so uvloop might be a better option after all.
There you go: https://gist.github.com/ed09c39523e516dfcc491c783976e2c6 By the way workaround you suggested does not help at all. Im getting same error still.
But pretty buggy to use with py3.5. Plots are often blank. This is unresolved bug since couple of months I guess.
Typed in 'Nothing', didn't get redirected to the Night's Watch. This tool is bogus.
Same reason most people use Python instead of C. C might be faster but Python saves developer time.
Hey, I would suggest starting with downloading python anaconda. Is a version of python that includes data science tools among other things. You can get some datasets to play around from kraggle.com. You need to learn how to use nupy, pandas, and matplotlib. There are a few tutorials out there on youtube. I recommend the channel by sentdex. if you any questions, or need help getting started pm me. Here is the link for anaconda https://www.continuum.io/downloads
Yeah there is obviously a 'want' for consistency but each team is lead by different tech leads and architects with varying opinions on their preferred flavour. Generally though each department has teams who specialise. For example my team focus is almost exclusively on Ruby and Go (with DevOps/Bash/AWS). The Sport team is pretty much just Node. The News feature team is primarily PHP (but has been required to pick up Node in order to create components using the service provided by Sport). But BBC is trying to move towards a place where teams can be comfortable picking up things from other teams wherever practical.
Spoken like a child.
Thanks! I like having command line screenshot with correct output to make sure readers are on the right track as they go through the tutorial. However, it looks like I missed using alt attributes on the img elements so Google knows what the screenshots represent. I just fixed that on the post.
Check it for Bitcoin 
I can't stand not knowing exactly what tool will be used for the things I type; there's a troubling ambiguity and unpredictability to it. I prefer to use a nicely configured `zsh`, with the option of dropping into `ipython` at any time, with the following automatic imports defined (you can drop `.py` files into `~/.ipython/profile_default/startup`): from plumbum import cmd, local, SshMachine, FG, BG from requests import get, post, head 
just copy the output as well then, blind people program as well
For screen readers the alt attribute is used instead of the image itself. It's part of 508 compliance so it should serve the purpose of accessibility for those with visual impairment http://warc.calpoly.edu/accessibility/508indepth/alternate.html
Thanks for that.. it's very strange but I'll take a look!
As a demonstration, here are the demoed commands in xonsh's "At a glance" item on their homepage, followed by similar or equivalent actions in an ipython shell with the aforementioned imports. It's often more verbose, but in my opinion more clear, readable and predictable. xonsh | ipython ------|-------- 1 + 1 | 1 + 1 $HOME | local.env['HOME'] x = 'US'; ${x + 'ER'} | x = 'US'; local.env[x + 'ER'] $PATH | local.env['PATH'].split(':') ls -l \`xonsh/\w+?(ci&amp;#124;ic).*\` | local.cwd.walk(lambda p: 'xonsh' in p and 'ic' in p or 'ci' in p) cd xonsh | cd xonsh git push origin master | cmd.git('push', 'origin', 'master') aliases['ls'] | alias aliases['banana'] = lambda args, stdin=None: 'My spoon is too big!\n' | alias banana echo 'My spoon is too big!\n' 
Tools: anaconda Learning: edx.org. Great website for learning this sort of stuff.
As /u/d4rch0n pointed out already: 1. there were bugs doing some simple things. It's been months and I honestly don't remember what it was, but when you're replacing stuff as battle-tested and essential for day-to-day as bash, the minimal bug becomes a major pain. At the time, it just "tasted" too alpha for me. I might give it another try soon and report what I see. 2. Even if it works great, the fact of the matter is that most systems and tools out there will use bash (or assume you use bash), with the few odd ones here and there (csh in very old stuff, zsh or ksh in particularly opinionated projects). I run a lot of software builds, and having to figure out if this or that process will actually work in Xonsh was a pain point I could not otherwise offset. Before you say "just drop to bash when necessary", you have no idea how much bullshit about "scripts launching scripts launching tools launching scripts" is out there, producing a sort of Rube Goldberg inverted pyramid balanced over /bin/bash... 3. I never liked shell scripts (be them bash, ksh or csh, it's all rubbish); I find it abhorrent how much of Linux still relies on these fragile artefacts and their awful syntax, when we have so many powerful and expressive tools at our disposal in 2016. In that sense, I'd love to see a full OS built purely on python, for which Xonsh might be a natural shell. Then again, at that point you might get python all the way down like [micropython](https://micropython.org/) does...
The pyparallel project has the downside of it more being an "Async O", as it still looks like its hard to recover information from spawned parallelets Its still nothing to dismiss, the benchmarks prove that to an excessive degree, but man I just wanna build fast two-way servers, so the gilectomy is a bit more appealing there. though hopefully that thing he was hinting at will allow for two way communication?
I'm trying to understand what this does. Most of the readme discusses trying to avoid licensing issues. Assuming it accomplishes jumping through licensing hoops... what does it do? I'll take a guess... bundles a redistributable folder of files which contains project files and miniconda, then uses some clever scripts to invoke conda to download dependencies?
Do you know what you want to do? Web? Data science? Bots and automation? 
Fuck yer screenshot.
Came here to say this. Learn from [Discord.py](https://github.com/Rapptz/discord.py), the Python Discord API. Utilize asyncio, and aiohttp for async things. Otherwise the bot could hang.
Honestly, I have no idea. Which is why I chose Python because I read its the best to start out with. I would like to have the know how when I finally get an idea of what I want to do. So far I have been watching tutorials and tinkering around with it. 
So there are a couple of things to note here. The first is that all of the shells that you mention - and xonsh too - have different behaviour for whether or not they are interactive login shell, which none of the examples you show are. On my machine, for Bash, I see scopatz@artemis ~ $ time bash -c 'echo foo' foo 0.00user 0.00system 0:00.00elapsed ?%CPU scopatz@artemis ~ $ time bash -l -c 'echo foo' foo 0.00user 0.00system 0:00.00elapsed 0%CPU scopatz@artemis ~ $ time bash -l -i -c 'echo foo' foo 0.08user 0.00system 0:00.10elapsed 92%CPU Starting up when you expect user input just takes longer. Human response time is roughly a tenth of a second, and so that is my goal for xonsh. Even Bash on my SSD, 8-core desktop comes close to taking 0.1 secs. It is true that Python - and especially importing - is slow. But Python only takes up 10% of the target budget for me: scopatz@artemis ~ $ time python -c "print('foo')" foo 0.01user 0.00system 0:00.01elapsed 100%CPU I also know of a few ways tricks to speed up importing via lazy imports or cythonizing released packages. I guess my broader point is that there are packages out there like hg that have figure out how to make snappy Python CLIs. Xonsh will get there, and probably sooner than later because us devs find it annoying too :)
Has anyone tried this on Windows? I'm stuck on Windows at work and would love to know if there are any caveats to its use on Windows.
I think you have good points. I would never really write xonsh scripts, because at that point you may as well use python. However, I have been using it to augment my productivity in the terminal. Sometimes I can best express an idea in terms of Unix commands, and sometimes I can best express an idea in python. Being able to switch between the two is a big productivity boost. 
Interesting. So is merging into mainline CPython not an intended long-term/aspirational goal of PyParallel?
Thanks! Yeah, I misdiagnosed this one (sorry about that!). But I'm 95% sure we know where the real issue is now, and we are working toward fixing it. If you're interested, I'll let you know once we've resolved it. Working on it in [this pull request](https://github.com/scopatz/xonsh/pull/1150) and [this issue](https://github.com/scopatz/xonsh/issues/1137).
Yes, that's it!
OP seems to be someone with the attitude of "the way I do it is correct, so your opinion doesn't matter".
Despite my answer suggesting pyo) About PD. There is the libpd and the python wrapper which allows you to load pd files and run them with libpd. This also works with kivy so you can have pd on your Android, but I remember it was a really complex and fragile setup last time I done this. About performance. The biggest issue is the latency of the audio server. But with portaudio and Jack support this won't be a problem, unless your soundcard isn't capable of. Doing alot of computational work in pure python, well there you are right. But DSP is always hard on the CPU and not just slow in python specifically. Moving the hard parts to C is the goto option that everyone does.
He depends on NTs overlapped IO system which is far superior to what UNIX/Linux has today unfortunately. 
I am not sure if DynamoDB works the way you think it should, any chance you could use gist or similar to show an example of the code you're having trouble with?
Thanks! This seems like a concept that could be useful to me, since I develop and distribute tools for use on Windows. I'm now trying to understand why there are so many instructions to manage environment variables from the command line. Wouldn't a configuration file be better for storing configuration details for a given application? Perhaps if it's all orchestrated with batch files anyway, it's necessary to use environment variables so that they are accessible from the batch files. I don't know if it's just me, but I always use *.bat and call them batch files. Is *.cmd the same thing? So finally, did you have a compelling reason to use batch files as opposed to implementing those scripts all in python? If it simply fits your workflow better, or you find it more useful or something, then that's a fair answer. Just curious! I may understand this better once I'm at work on my computer. It's hard to dig in on my phone, but I am interested.