Nothing hostile about it. The competition forces everyone to be in shape. See this page for the comparison between the two: [Eventlet vs. Gevent](http://blog.gevent.org/2010/02/27/why-gevent/)
&gt;For example, if you just want to retain state why use a closure if you could just use a class? Because in real examples, it might well be simpler. &gt;Flat is better than nested, closures taken to an extreme with multiple nesting Oh, come on. There is no reason the closure requires nesting here, nor anything that forbids setting up a nested class to represent the y value in the example class. You might as well complain that currying for the sake of currying is a bad idea. &gt;Delaying Execution of a Function The closure example is equivalent to: func = lambda x: x + 1 And the class examples can be re-created with: def make_incrementor(): return lambda: lambda x: x + 1 which makes obvious that there is a useless level of indirection here. Basically, the argument presented is that the class versions are "simpler" because the author *feels* they are; but to me, the motivation for that feeling is simply bizarre. After all, delaying execution doesn't actually require closed-over state; it just requires currying. 
Well, logging objects are thread-safe, so I don't see it as problematic. Presumably your choosing to use a global was practicality beating purity, like some of my design decisions in logging. Anyway I was just pulling your leg ;-)
I've found supertab to be quite effective.
Differnt kind of libraries. pycerberus deals with data validation, not HTML-forms or ORM-classes. I prefer to keep my validation separated from the view, I want to use the same validation in XML-RPC as in form POSTs, form-c can be validated with the form-a+form-b validators etc. With pycerberus you can write validation-schemas and re-use them in different places of your code. It supports i18n and has a nice API. I can't say anything about the quality but it's worked fine for me so far(I'm just a user). 
Sounds pretty much like FormEncode - any advantages to pycerberus over FE ?
And where is the function name? How would you reverse the URL without giving it a name? :D
FormEncode generates forms, it's not a pure data-validation library.
sucky, frozen to death, incompatible between versions, hard to extend, you can't add a simple timeout to the event loop without almost rewriting the whole damn thing
Wierd
&gt; it is obvious that ruby anonymous methods ( through blocks ) is the way to go here! * What's the doc-standard for anonymous functions? * How do you set a debugger breakpoint to the anonymous functions in an easy way? * How do you refer to the anonymous function when talking to your collegues? * How does your production log-system refer to the function? * What if another part wants to store a string id of the function in a hash (to prevent infinite loops for example)? Not at all obvious.
Hey, did it work?
Of course my comment here applies to the very example given (ie. route functions) and not ALL functions. Route functions are sufficiently short and simple that they don't need a whole function on their own (ie. you're not likely to set a breakpoint on them, and all the things you mention). Anonymous functions are very powerful to implement *small* functionnalities in a very elegant way, but they happen to be often required. In other words, to set a breakpoint, you would use the line number, the debugger would report it as "in file .... at line ..." and that's fine because it's such a small function that you don't want to benchmark / trace / etc. Of course, if you were writing a very complex algorithm with many sub-algorithms, you would use functions. I'm just saying that for many stuff (iterating a short function on a list, like Python lambdas, or this web route scenario) an anonymous function is better 
&gt; Of course my comment here applies to the very example given (ie. route functions) and not ALL functions. Well, that's the thing. Very often it's not worth to add features to the language just to support some special case. In the case of anonymous functions, well, I write 'def thefunction():' in a second or two so I don't care. I have nothing special against anonymous functions but it's just a syntax glue, nothing that is in anyway required so I'm happy without it. &gt; Anonymous functions are very powerful to implement small functionnalities in a very elegant way, but they happen to be often required. It's also a very elegant way to have thousands of functions that compare two ints:) 
What sort of love? I've not used twisted, as it seems like a bloody big hammer and the apparent complexity of it (at least the learning curve) dwarfs that of my own applications. I strive for simple, orthogonal metaphors in my programs and if those exist in twisted they appear to be buried deep under a mound of "just do this and trust it". I guess I'm saying that what I think it needs is a compelling and to-the-point treatment of the models at its core, and I wonder if that's on your list.
So, he has a main function, that he doesn't call? Uh, crappy card, I wouldn't hire him.
I think that's just htmlfill - you don't need to use that if you don't want (I find it convenient, but some people don't like their HTML being written over). I quite like FormEncode but it can be quirky(e.g. the whole "state" thing) and the documentation is somewhat lacking. Pycerebus might be a nicer way of doing things and is worth a look.
Written by you...? Hardly objective. Competition can be friendly and unfriendly. The latter is not appreciated.
I third the Mercurial suggestion. Do we have a winner? By the way, when writing code, using version control is *never* optional.
&gt; *Use a version control system.*
I too enjoy auto-generated html-forms, but I don't think it belongs in an data-validation library at all. Keep things separated is my motto, that's why I really enjoy werkzeug.
Does anybody here actually use IronPython for real projects?
Namely making the code less Twisted and more Python.
Hostile? How can a fork be hostile? What is up with this attitude? I *really* don't get it. Alice decides to make something cool. Bob likes the cool stuff but wants to make it cooler. Alice doesn't like the cooler stuff. There are now a few options: * Bob can just sit there and cry * Bob can spend his time in vain trying to convince Alice * Bob can make the cooler stuff and not tell Alice *or* Clair * Bob can make the cooler stuff and tell both Alice and Clair A fork is option 3 and there is really nothing hostile about it. I don't get this lame argument and i see it over and over again. Be happy that Python is rich with multiple options instead of crying that we should 'UNITE WORK'. I like both Eventlet and Gevent, I like Eventlet because well it has a clean separation and Greenlets and I like Gevent because it has a tight integration. Also, the history of Eventlet makes it so it has to support some weird quirks which Gevent can abandon. This is not something you can mix. 
help for what?
I reported a [issue](http://github.com/paulhammond/webkit2png/issues#issue/9) requesting to make it work on Linux/Windows.
I added timeout support without modifying the event loop, as well as threading support (run a function on the loop thread from another thread) and signal support (receive a signal on the loop). The basic idea is you don't use the asyncore.loop - you write you own loop and call asyncore.poll on each cycle to wait for events. 
&gt; What if you do care about the function name though? You do in Flask. The function name is the URL rule endpoint which is used for URL generation.
It's pretty simple. Bob says, "Fuck you Alice, I'm going to take all the hard work you've done, base my own thing on it, and then bad mouth you to Clair." That's a hostile fork.
Just to clarify, I don't believe that Flask is a joke. Denied was a joke framework. Flask is a real one. Note: Flask seems to differ from some other micro-frameworks in that it uses libraries behind the scenes (Werkzeug and Jinja2), rather than trying to implement everything from scratch right there in one file. 
Not me, but Resolver One does.
Did you read it? I tried to make it factual. If you found something is wrong or incomplete you are welcome to DM me or post a comment.
Why?
Yes. I'm writing a hobby project [compiler](http://www.smallshire.org.uk/sufficientlysmall/category/computing/software/net/owl-basic/) in IronPython. If I did it again, I'd probably use F# though. I'm also considering deploying some of the Python code I use at work on IronPython for interop with some other .NET libraries.
Well I do mostly web programming, so currently I'm sharing code between server and client, and I can't run python on the client. 
I use IronPython as a scripting engine for a huge c# application
I used IronPython at Resolver Systems to build a programmable spreadsheet application. In my current job I use IronPython in Silverlight for creating business web apps.
Output your data in [graphviz](http://www.graphviz.org/) and use that to generate the graph.
Check out the [networkx](http://networkx.lanl.gov/) library.
 digraph reddit { a -&gt; b a -&gt; c c [label = a] }
Thanks, After messing with graphviz and figuring out *how* I had to represent the nodes, I can probably do the same with networkx.
I used [igraph](http://igraph.sourceforge.net/) when I had to demonstrate isomorphism after reading [this tutorial](http://www.cs.rhul.ac.uk/home/tamas/development/igraph/tutorial/tutorial.html) from igraph import * g = Graph.Tree(127,2) #Create tree graph with 127 vertices each with 2 children layout = g.layout("tree") plot(g, layout = layout) You need the [Cairo library](http://www.cairographics.org/) for plotting though.
Thanks, the label=a is a neat way to do what I wanted. Great tip!
We used to do this until an email I sent got the practice banned... now we send out announcements on sametime instead. That, or add things to the top of netflix queues &gt;:)
Looks pretty good. Here's my feedback: 1.) Make the "Settings" variables all caps (`SNAPSHOT_DIR`, `START_TIME`) so they look like constants. 2.) Put the "splash" code and the code that is executed at the bottom of the script into a `main()` function and call it like this: def main(): pause = True ... if __name__ == "__main__": main() This will allow you to import the functions you define in this module into another module without the main block of code running. 3.) You have a she-bang line, which is normally a good idea, but it doesn't mean anything in Windows. 4.) Your function names have different styles of case (CamelCase `TakePicture` vs. all lower-case `onclick`). I would recommend changing them all to [pep8](http://www.python.org/dev/peps/pep-0008/) style (`take_picture` and `onclick` or `on_click`). 5.) One improvement might be to use `sys.argv` or a command line library like optparse, argparse, etc. to pass options in from the command line. You can then change the configs at the top of the file into default command line options. edit: oops found one more that is actually a pet peeve of mine: 6.) These kind of comments: #---------------- # Lock Computer #---------------- def LockComputer(): ... Don't really add anything IMO. I think the definition itself is enough separation between functions, the `#----------` boilerplate isn't really necessary. Also, if you're going to write comments for each function definition, put them inside docstrings like this: def lock_computer(): '''Make a system call to lock the computer.''' ... That way your documentation can be introspected using `help` and `__doc__` and tools like [Sphinx](http://sphinx.pocoo.org/) can build pretty documentation for you automatically. Get in the habit of writing good docstrings!
Very nice. We used to do similar things at a company I used to work for. The only problem is that it can be hard to compose a really great love sonnet in the time it takes for the victim to head to the bathroom and back. Then I embedded an automated love letter routine in a commonly used script. It would look for a .love file in the current (project) directory and send the contents to the email address in the first line of the file. I worked great for about a week until the mail server crashed while the script was running and some incriminating stack traces were dumped to stderr.
If you're on Mac, I wrote [code for doing so using Nodebox](http://github.com/llimllib/pymag-trees). If you're not on Mac, it wouldn't be *too* difficult to modify that code for use with another graphics toolkit. It went along with an article in python magazine, which I unfortunately don't have, but the source for the article is [in the same directory](http://github.com/llimllib/pymag-trees/blob/master/v3/page.src.txt).
For you pause loop this would be better. while ti &gt; 0: print("Starting in %d") % ti ti = ti -1 time.sleep(1)
You're returning location in your onclick method: location = TakePicture() but it doesn't look like you're doing anything with it. Other than that, it looks like a fun project... post some pics of the offenders!
What the hell? His loop was bad. Yours is a step in the right direction, but... for seconds in range(5, 0, -1): print "starting in", seconds time.sleep(1) *That* is Python.
Change the LockComputer function to use ctypes rather than your os.system hackery. Prefer subprocess.Popen to os.system in the other places.
Function names should be lower case with underscores, e.g. `take_picture` instead of `TakePicture` &gt; location = "%s%s.jpg" % (snapshot, str(random.randint(1,1000))) The %s formatter converts whatever you give it to a str, so it is redundant to also call `str` &gt; snapshot = "C:\\\\snap\\\\" # Snapshot Directory, Use Two Backslashes for Paths snapshot = r"C:\snap\\"
I like the look of NodeBox, pity it's Mac only.
If you're interested in rolling your own, check out the docs page on formatting options ([Python 3.1](http://docs.python.org/py3k/library/string.html#format-string-syntax), [Python 2.6](http://docs.python.org/library/string.html#format-string-syntax)). Specifically, all you'd need to is evenly space the node characters (A, B, A, etc) with whitespace padding equal to (twice the widest row minus 2) on the node rows. Then get the central branch column number ("offset") by taking the rounded difference of the horizontal distance between two connected nodes. Then get the appropriate character from ["^-v","\", "|", "/", "v-^"] depending on the offset; where the first and last option are actually string.templates (for adding "-"s in the middle as appropriate - eg, "^--v", "^------v", "v---^", etc). Then interleave the node and branch rows ## your implementation of the above */snipped/* - assume the respective rows are iterables ## from os import linesep interleaved = linesep.join((node_rows[e] + linesep + x for e,x in enumerate(branch_rows))) interleaved += linesep + node_rows[-1] # len(branch_rows) == len(node_rows) - 1
they're coming out with [a new version](http://beta.nodebox.net/) which won't be Mac only, you should try out the beta. (I haven't tried the beta, just saying that it's out there)
Or just use "C:/snap/" Windows allows you to use either forward or back slashes, it's just the command line tools that don't support forward slashes.
[pygraphviz](http://networkx.lanl.gov/pygraphviz/) is quick.
I came in here to post just that. Here's something I cooked up a while ago (you'll have to forgive the crudeness..) #!/usr/bin/python import sys import time def countdown(start_time, tick_time=1, time_units="seconds"): """ start_time - time to start from tick_time - how long it should sleep, in seconds (defaults to 1) time_units - name of the units of tick_time (eg, if tick_time = 60, time_units should equal "minutes" """ time_units = " " + str(time_units).strip() sys.stdout.write("Starting in: ") for remains in range(start_time, 0, -1): # Write to standard output; print_me = str(remains) + time_units + " " sys.stdout.write(print_me) sys.stdout.flush() # Wait; time.sleep(ticktime) if remains == 2: # De-pluralise (if required); time_units = time_units.strip("s") sys.stdout.write(chr(8)) sys.stdout.write(" ") # Erase message; for x in print_me: sys.stdout.write(chr(8)*2) sys.stdout.write(print_me) print "" # AKA sys.stdout.flush() print "Starting now.." Basically, it does what yours does, but only prints one line (it erases the previous entry) - that's why sys.stdout is used and not print (although now in python3000, print has an "end" argument so you can do it with print - though you still have to manually flush!). Also, some sundry stuff like de-pluralising and alternate units. EDIT: cleaned up a little.
&gt; you'll have to forgive the crudeness You didn't have time to paint it and build it to scale?
I am not sure if you can call it a 'micro' framework then. It depends on external libraries for mostly everything it does. Flask is an API layer on top of werkzeug/jinja2 just like Eixir is a declarative layer on top of SQLAlchemy. Usefull, but not 'micro' in my terms.
Use [python-graph](http://code.google.com/p/python-graph/) to model your desired tree and then output it to dot language (graphwiz). 
&gt;location = "%s%s.jpg" % (snapshot, str(**random.randint(1,1000)**)) This doesn't make a lot of sense to me - it makes filenames unpredictable, and it's possible that you'll lose older snapshots. Why not use the system time or increment a number to keep track?
You import a couple of platform specific or user-installed extensions - I always like to do that in a try block, in case someone tries running the script on a machine without those packages installed. try: from VideoCapture import Device except ImportError: print("This script depends on VideoCapture: videocapture.sourceforge.net") you could then have the script lock the computer anyway, even if you can't take a picture except ImportError: print("This script depends on VideoCapture: videocapture.sourceforge.net") Device = None #later... def onclick(event): LockComputer() # Lock System if Device: location = TakePicture() # Take Picture of Victim and get Location ViewSnapshots() # Load Snapshot exit() 
Came here to make this exact same comment.
That's what I use here.
Really he or she should be using os.path.join
don't you mean xrange? :P
guys, i dont think he was asking for suggestions on how to conform to pep-8, geez
For this small, no. Besides, 3k dood.
python -c "print 'hi',; print '\b\bo'" 
Sinatra depends on the rack library and at least one template engine, still people call it a microframework. Not sure what's your point here.
Spot on. What's more, using rundll32 to call LockComputer will silently [corrupt the stack](http://blogs.msdn.com/oldnewthing/archive/2004/01/15/58973.aspx "The Old New Thing: What can go wrong when you mismatch the calling convention?").
Some suggestions are functional, some are syntactical. While it may be a bit pedantic, if he does any kind of programming casually or for a living, pep-8 is a great resource for learning good practice. I'm reading over it, again, thanks to this thread :)
no xrange in python 3?
range is an iterator (like everything else) and xrange is gone. No more pre-iter xrange objects.
Even better, just use UUID. location = "{0}.jpg".format(uuid.uuid4())
Is there an OSX equivalent to VideoCapture? 
Wow, I've used python for over a year and consider myself extremely experienced/comfortable with it...but I've never seen that string format syntax. I've always does "%s %s" % (a, b).
On a related topic, since webkit is a library it might be possible to do it with less dependencies, but is there some kind of webkit2html, that would output the html as parsed by webkit (basically what you get in the webinspector). That would be propably be much better than lxml/libxml2 to deal with broken html.
His hashbang line is #!/usr/bin/env python which looks an awful lot like something Komodo Edit auto-inserts.
It's python 3 syntax, but I think it was backported to 2. 
Ah, cool!
Yep. It's a fairly new feature, [available in 2.6 onwards](http://docs.python.org/library/stdtypes.html#str.format), and there's backports to &lt;2.5
A simple `YYYYMMDDHHMMSS` datetime stamp seems like the best idea.. That way the images are ordered correctly in most file browsers, and you inherently record the time the image was captured..
I'd recommend doing something like: try: from VideoCapture import Device except ImportError, e: raise ImportError("This script depends on VideoCapture: http://videocapture.sourceforge.net") So it correctly raises the exception, just with a more helpful error message. Not relevant for this code, but if someone tries to use it as a sub-module, suppressing the error and exiting can be very annoying.. You should only really capture errors if you can recovery from the problem, or do the exit in a "def main():` UI function
http://pastebin.com/aCMnYUYr Not tested functionally, but main change is using a `main` function (so it can be imported without automatically executing any code)
That's the recommended shbang - `/usr/bin/env` allows the python executable to be located anywhere, rather than a specific path (in $PATH)
Wow, never thought to actually look up the use of env all these years.
Makes sense. So what if you want a list of numbers? You'd have to do inline xrange like: [o for o in xrange(0, 100, 5)]? I am a python developer but I havent moved to 3.0 yet.
Even awesomer (IMO) is using the locals() `dict` in concert with named substitution: dude = 'world' frob = 200 print 'Hello %(dude)s: %(frob)d' % locals()
Yep, that's the exact same shebang line I always write manually, so that part is correct...
And if the string is user-settable you'll have lots of fun getting hacked!
 list(xrange(20)) EDIT: Why the downvotes? How is that not what the others said?
just wrap it up in a list: x = list(range(0,10)) 
If you're looking to do this yourself without introducing dependencies, this pdf contains code and explanation of drawing trees. http://research.microsoft.com/en-us/um/people/akenn/fun/drawingtrees.pdf I've used it myself, works perfectly.
so long print to PDF/PostScript?
&gt; snapshot = r"C:\snap\" Actually, this doesn't work. Even with raw strings you can't end with a single backslash. os.path.join is the way to go
Not that it makes sense for this application, but if you just want a random, unique file name, the tempfile module is the secret sauce.
Unless you're writing a complete javascript interpreter you really can't. Either figure out what the buttons do and emulate that behaviour in python or instantiate a web browser widget and do your presses in that.
You're not sharing symlinks, you're just symlinking the actual files (which are on dropbox) to a local directory. And afaik you have pull changes everytime you change computers which is annoying.
You can do as follows (I don't know the equivalent stuff on mac, but I'll use linux commands instead, which shouldn't be any different from mac, I will also assume that project directory is /home/project, and your dropbox directory is /home/dropbox: 1) copy all .py files to /home/dropbox (the actual files, no links here) 2) then: windows: drag the .py files and make a shortcut out of them in /home/project (Alt+Click I believe makes a shortcut. Before you drop them, notice the shortcut icon that appears when you press Alt). Linux (should be the same as mac) run this command: $ for py in $(ls /home/dropbox | grep *.py); do ln -s "/home/dropbox/$py" /home/project; done (essestially, you're making shortcuts again. I suggest you do it in a way that you understand what you are doing) 3) go on the other computer and make the shortcuts again. Note that the actual files are on dropbox. EDIT: now you can import the symlinks (the shortcuts) into eclipse and it shouldn't complain. And you can have your project-specific files in /home/project, separate from source files.
Maybe you should bypass the front end app and look directly at where the faxes are stored to retrieve them.
use firefox with mozrepl or selenium, also there are xpcom python bindings. may be some work but it should be doable.
Maybe try [mechanize](http://wwwsearch.sourceforge.net/mechanize/). I'm not sure if it would handle the javascript actions though. 
This is pretty simple: from turtle import * from types import * myTree = ["A",["B",["C",["D","E"],"F"],"G","H"]]; s = 50; startpos = (0,120) def cntstrs(list): return len([item for item in list if type(item) is StringType]) def drawtree(tree, pos, head=0): c = cntstrs(tree) while len(tree): goto(pos) item = tree.pop(0) if head: write(item,1) drawtree(tree.pop(0),pos) else: if type(item) is StringType: newpos = (pos[0] + s*c/4 - s*cntstrs(tree), pos[1] - s) down() goto((newpos[0], newpos[1] + 15)) up() goto(newpos) write(item,1) elif type(item) is ListType: drawtree(item,newpos) up() drawtree(myTree, startpos,1) 
At some point the javascript has to be triggering some url to load new content in the browser. If you can't figure out what the urls are from looking at the javascript code, you may be able to enable logging in your browser to see what those urls are or even use a sniffer to see the http requests which would have the urls (e.g. "GET index.html"). Presumably the urls will follow some common pattern like "/loadfax?docid=43", "/loadfax?docid=44", etc..
Pythumbnail is nice. It has a batch, multi-threaded mode, uses VNC to open a firefox browser, then captures the first screenful (not the whole page). http://www.gruppo4.com/~tobia/pythumbnail.shtml
Mechanize can't do JavaScript if I recall right. 
Could you tell me more about this security vulnerability? Are they able to terminate the string and inject code or something?
Windmill is another option similar to Selenium (in both cases Python drive the browser through Javascript to click buttons). If you wanted to do entirely too much work you could use [python-spidermonkey](http://pypi.python.org/pypi/python-spidermonkey).
LiveHTTPHeaders is a great way to see what happens when you click a button.
Who r u
More details here: http://www.reddit.com/r/Ubuntu/comments/bqwa4/help_installing_python_program/
Most everything takes iterables as params for construction. Want a list? &gt;&gt;&gt; list(range(0, 100, 5)) ...and the list comprehension still sucks because it will leak the "o" out.
http://diveintopython.org/toc/index.html
Proficient in a week is a tall order. It's also a rather fuzzy definition. What is your previous development background? Have you looked at diveintopython.org (Great book, free under a GNU Documentation License) 
 python /usr/local/lib/python2.6/dist-packages/HLSPlayer-0.1/player.py This might not work if the files and folder in ../dist-packages are slightly different.
 hls-player = HLS.player:main means from HLS import player player.main() 
It looks like it got installed correctly, but your python site-packages directory isn't in your PATH, so it's not getting launched when you just try hls-player. python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()" that will print your site-packages path. go there and find hls-player, then do something like python hls-player and see if it works for you if so, add a symbolic link in your /usr/local/bin (for example) directory to hls-player so you can run it regardless of your current directory.
No, but they can get any variable from the function's scope, which is a rather large hole...
For example, if you were using Django, and did: def my_view(request): from django.conf import settings welcome_string = settings.DEBUG and "Welcome (debug)" or "Welcome" return request.user.welcome_text.format(locals()) and the user could control their name or welcome text to include `{settings.DATABASE_PASSWORD}`, `format(locals())` will expose it. Obviously this example is contrived, but it IS a risk.
I will check it out, and I agree it is a fuzzy definition but it was the one given to me. Thanks. No dev background besides two semesters of C++ and a senior research project in matlab.
Sounds good, Thanks.
Yeah, it took me two weeks to become proficient in Python. Seriously, though, the language can be learned quickly if you're already an experienced programmer. It's learning the standard library, the idioms and the best practices that takes longer.
That just came with time for you or did you have a reference to help?
It came in time, mostly by looking at other Python code (something I'm happier to do than with other languages), dropping in on comp.lang.python and #python now and again, and reading various blogs. Actually initially learning the language was with O'Reilly's 'Learning Python'. 
Thanks this helped me figure it out.
Incorrect. In the places he is using os.system, he should use subprocess.Popen. He is calling external command line applications. multiprocessing.Process is a different way of thinking about threading.Thread.
oh - i didnt know windmill. thanks for that.
Ahh, I see, he would have access to any variable in scope, that IS bad! Thanks for the awesome example!
I see, that makes sense, better to just pass in a list of the variables you want to use in that string. Thanks!
Another related use: benchmarking and other testing tasks. I use [this script](http://github.com/acdha/webtoolbox/blob/master/bin/wk_bench.py) to do performance testing where you can measure the full load-time from start of the request to when [the browser has loaded everything](http://developer.apple.com/mac/library/documentation/Cocoa/Reference/WebKit/Protocols/WebFrameLoadDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/instm/NSObject/webView:didFinishLoadForFrame:) (including scripts, Flash, etc.) and do some nice things like logging JavaScript errors, too. If you need to work with a full browser, it doesn't get much easier than this. I've been toying with the idea of doing something like what you talked about but going a step further: dynamically inject a copy of jQuery so you can simply interact with HTML using powerful, widely-understood CSS everywhere - similar to what lxml does with .cssselect but using even more of the CSS3 goodies packed into jQuery or at least [CSS3 on a modern browser](https://developer.mozilla.org/En/DOM/Document.querySelector).
I'm sure it makes fun to test this.
Doesn't every programmer need to code a formlib once in his life anyway? (and a templating engine)
This should be upvoted higher. 
 Why does that bother you?
Well, if you would have asked help with your comment, my first thing to say would be CAPITALIZE the first word. Great code also looks good.
Not really, there is a fine line between being pedantic and pragmatic...
Luckily one can add syntax highlighting all by their very self.
Except that he's running windows, so the Shebang doesn't do anything. It's also not cross-platform, so there's no use leaving it in (that I'm aware of).
I'd start by just running through the Python Tutorial (http://docs.python.org/tutorial/). It's a great introduction and will have you familiar with the basics in no time. It's the main source, along with Dive into Python, that I used to learn Python and you can probably finish it in a day. However, if you have no real background in CS, you might want to take a look at the Pragmatic Programmer's "Practical Programming: An Introduction to Computer Science Using Python" instead (http://pragprog.com/titles/gwpy/practical-programming). Their books are usually excellent and quite beginner friendly. After that, considering your field, it sounds like the O'Reilly Bio Python book is probably the way to go, so it sounds like you are on the right path there. Good luck, and don't worry, I'd say a week is plenty of time to get up to speed on what you need to do the job. 
the linux (and OSX) -friendly version is cutycapt + xvfb: http://hublog.hubmed.org/archives/001812.html no X Windows required! (well, technically xvfb _is_ X, but you don't need a video card)
Please post pics when you catch your coworkers :D
I absolutely love the comments!!! I'm going to overhaul the code with the recommendations as soon as I can. 
I primarily write python code in UNIX so it has formed a habit I think lol, this is my first Windows python script. 
Got this jerk hahah http://imgur.com/LBIxA.jpg
That was pretty fun to watch. Kudos!
It's fun at first, but if it gets tedious, just add speed("fastest") And I probably should have added a set() and reset() in there somewhere, but I wanted to keep it to as few lines as possible.
This is going to sound crazy but first learn eaither CakePHP or code igniter. In order to use correctly a framework you need to grasp correctly some principles like MVC, inheritance, etc. Then the jump to something like Django will be really easy since they both follow the same paradigms (though Python does it in a much more elegant way). Btw the Django tutorial only takes an afternoon so I recommend you trying it first.
I'd recommend you going to take time and go with the best. If you're the kind of person I think you are, you'll quickly grow out of n00bness in python web frameworks and soon you'll be eyeing at the cool features in some serious framework - had you chosen to go with a less powerful one originally.
web2py was originally written as teaching tool for undergraduate students at DePaul University. You download it, unzip it and click on it. It is the only python framework that comes with a web based IDE. You can [demo it here] (http://web2py.com/demo_admin) (readonly). Here is a minimalist complete program def index(): return 'hello %s' % request.vars.name You call it with http://127.0.0.1:8000/&lt;app&gt;/default/index?name=John Now change it in def index(): return dict(message='hello %s' % request.vars.name) And try call it with http://127.0.0.1:8000/&lt;app&gt;/default/index.html?name=John http://127.0.0.1:8000/&lt;app&gt;/default/index.json?name=John http://127.0.0.1:8000/&lt;app&gt;/default/index.xml?name=John You get the idea. When you return a dict the variables (message for example) are rendered by a template. If you do not have one you get a generic one for the extension you requested. You can import any Python module you need as in any Python program. Now change it again in (complete code excluding scaffolding code) # in models/db_message.py db.define_table('message',Field('body',requires=IS_NOT_EMPTY())) # in controller/default.py @auth.requires_login() def index(): return dict(form=crud.create(db.message), messages=db(db.message.id&gt;0).select()) # (optional) in views/default/index.html {{extend 'layout.html'}} &lt;h1&gt;Post a new message&lt;/h1&gt; {{=form}} &lt;h1&gt;Posted messages&gt;&lt;/h1&gt; &lt;ul&gt;{{for m in messages:}}&lt;li&gt;{{=m.body}}&lt;/li&gt;{{pass}}&lt;/ul&gt; You can read more in the [book](http://web2py.com/book) which is free online (all of it) and if you know Python chapter 3 is a good place to start. The book printed is 350 pages. All of them are free online. EDIT: Almost forgot. Web2py has [a plugins system](http://web2py.com/plugins), can use [Drupal Layouts](http://web2py.com/drupal) and provides API to login via [gmail, ldap, pam, twitter, linkedin, facebook, etc.](http://code.google.com/p/web2py/source/browse/#hg/gluon/contrib/login_methods). Web2py has the only Database Abstraction Layer that works on the Google App Engine out of the box, and supports 9 different relational databases. 
I started with [Bottle](http://bottle.paws.de/) -- really easy to understand, uses decorators so code still looks nice and pretty...
Ok, since you are learning Python , I would suggest a code centric framewok. Sorry, web2py is great but concentrates on point and click more than any other framework. Take a look at Pylons. It's a great framework. Web.py is nice but feels lacking in comparison. Werkzeug and Flask are nice micro frameworks as well. At the end , I would suggest Tornadoweb. Now, why not Django? You are giving Python a try, I don't want to throw the toolbox, gears, nuts &amp; bolts along with the kitchen sink at you. Try it later, but I wouldn't advise it as a first choice. 
Hey, as mental programming tics go you could do a lot worse.
I did the move from php to python, and decided to use django. I feel it is a great framework, and the learning curve isn't bad but it is still very powerful. It also has a large awesome community behind it. (shameless plug: http://PHPtoDjango.com)
Some fun frameworks with good documentation are [flask](http://flask.pocoo.org/quickstart.html)
It did- thanks! I think an old installer (maybe for R) dropped an older gfortran into /usr/bin This was wreaking havoc, of course. Once removed, all was well. 
All good suggestions but I have one correction. The fact that web2py has something than what others have do not have (the web based IDE), does not imply that web2py do not have also what others have (in this case the shell). This is extensively [explained here ](http://gluonframework.wordpress.com/2010/03/02/shell-only-web2py/) If you choose not to visit the url http://127.0.0.1:8000/admin, you can access web2py applications as with any other framework via the shell. Files are in web2py/applications and have more or less the same folder structure as Django. There is NO file containing meta data and there is NO file containing settings. Just python files, templates and static files. 
P.S. You are not the first to ask the question but I would like to ask you something: when you have made your decision, please report back to this thread which system you have evaluated and how you came to the conclusions. It can help all improve.
You should have a look at [denied](http://denied.immersedcode.org/). It good because it does everything exactly how a novice would so it's really easy to understand. ;)
A newbie will go mad trying to understand Pylons before making a usable website out of it. Learning how a web framework works is a stepping stone to become a professional, but even if that is your goal, you are better off using bottle.
I was in your position a year or so back. I first tried web2py and Django, and I didn't like either of them. Coming from PHP where I'd never used a framework and was used to doing my own auth and building my own queries, Pylons felt very familiar, and was a pleasure to code in. Note - I dove straight into frameworks without really learning Python in depth.
web2py does do some things that are not very Pythonic, I'm specifically thinking about the objects that show up without being imported. Also the web-based IDE isn't typical of how Python projects are managed and laid out. I can understand (though not entirely agree) with those choices in an instructional environment. *But*, if you want to learn **Python** and are doing so through web programming then I'm not so sure.
I use web2py and I really like it. &gt; It is the only python framework that comes with a web based IDE. I see you mentioning this on numerous occasions. Do you really think anyone who programs is going to use the web based IDE? I must say it's helpful to people who are new and who can't organize their projects efficiently. But I would prefer that people be encouraged to learn to use an editor/IDE and organize their projects to suit their needs. 
Ummm. This is what I meant in the earlier reply. Advertising the web based IDE tends to backfire. I think a better way would be to say: "Projects follow a definite folder structure. You use your ide/editor to edit them. Additionally, you also have a quick and efficient web ide/admin to make changes."
[CherryPy](http://www.cherrypy.org/) seems pretty easy and intuitive to me (Python semi-novice...)
&gt; I'd never used a framework web2py and django are MVC frameworks. The MVC part is there to ensure a clear separation of your model, view and controller. When using PHP, either you have your manual conventions for implementing MVC or you pollute the whole project with sphagetti code. For example, it isn't uncommon to see .php files which are opening connection to the database, generating data from it and writing html all in a single .php file. &gt; and was used to doing my own auth and building my own queries Nothing is stopping you from doing that in web2py/django. The question is why? 
&gt; After having used php exhaustively on many of my previous projects, I am finally ready to give python a try. You make it sound like Python is the more advanced, next level of PHP; which isn't the case:-). I find Python more elegant than PHP but most certainly, learning Python is as easy, if not easier, than learning PHP. Also, python is pretty much a general purpose language. People can argue PHP can be used as a general purpose language as well, but majority would agree it's not. &gt; There are a ton of different frameworks out there, but I have no idea which to use. Start with something that gives you quick results. I would recommend web2py/django. web2py in particular, has an easier learning curve and if you follow the web2py book(already pointed out by mdipierro), you would be implementing POC image blogs and wikis in a couple of minutes. When you mature as a python web developer and web2py starts looking constraining to you(I don't see why it would), you are free to move to a framework of your choice. Don't think that you would be wasting your time if you move from your initial framework. Python web frameworks are Python with some magic here and there, and the magic is pretty obvious if you care to look for it. What you learn from one can be carried to another. 
i had been doing my php code in an mvc-ish fashion, i should have mentioned. it wasn't perfect, but it had separation of templates, model etc.. as for db access, i prefer sqlalchemy over django's orm.
&gt; i had been doing my php code in an mvc-ish fashion, i should have mentioned. it wasn't perfect, but it had separation of templates, model etc.. So, we agree that using a MVC framework is more convenient to using haphazard conventions. Since web2py/django are **MVC** frameworks, that is +1 for them. &gt; as for db access, i prefer sqlalchemy over django's orm. That's contradictory. Didn't you say you are used to building your own queries? My point was there is no point in writing your own queries if an ORM is doing it for you. Preferring one orm over other is mostly a personal preference; there isn't much to differ on technically. I like SQLAlchemy but I have no issues with Django's ORM either. I have seen some benchmarks where web2py's ORM came out to be fastest, so I don't have any issues with that as well. Now, many people would argue web2py isn't a true ORM and is too low level. But what difference does it make to me? It's fast and convenient and works for me very well. Additionally, web2py database abstraction layer can be run on google appengine if you are complying with appengine's restrictions. 
Oh, I never implied that I was a novice programmer, but a novice python programmer. I have worked extensively with CodeIgniter, Zend Framework, and moderately with Symfony. I have also coded up my own PHP MVC frameworks for use in smaller projects.
Will do. 
Your shameless plug is an awful resource.
+1. The advantage of something like bottle is you'll have some idea how any why it does what it does, instead of having to cargo-cult along with the bigger frameworks and being totally stranded when something doesn't work and the (mostly outdated) documentation leads you around in circles.
Thanks for the input! I will be sure to work on your suggestions. anyway, google is bringing a ton of people searching for things discussed there, so all is well
It's just syntax translation tips. Delve into the good stuff like models, templates, etc.
Also, upvoted for witty response to my trolling. :)
[About the IDE please read my answer to my other thread](http://www.reddit.com/r/Python/comments/br2ak/using_python_on_the_web_which_web_framework_is/c0o5lug) Web2py does one thing that you consider not very Pythonic: It exec(ute)s models and controllers instead of import(ing) them. I would argue that exec is the most Pythonic of Python features, in fact it is the only keyword that distinguishes an interpreted language from a compiled language. I will agree with you that web2py is a very unique Python framework in this respect because it gives precedence to do-not-repeat-yourself over explicit-is-better-than-implicit. In this respect it is more similar to Rails than Django. I disagree that being Pythonic is doing what everybody else does.
I do not use much myself but it helps new users a lot understand what is where. I use when I need a quick change (perhaps during a demo) and I do not have access to ssh. It really impresses clients that you can change code from the web site in real time on a live site from the browser.
Since we are being shameful (;-) here is a [PHP-to-web2py document](http://web2py.com/AlterEgo/default/show/106) and here is a [syntax comparison between major frameworks](http://mdp.cti.depaul.edu/examples/static/web2py_vs_others.pdf) DISCLAIMER: The document is one year old (predates Django 1.x for example), outdated and biased.
I disagree.
I learned Python by starting the Django tutorials. I picked up a Python reference book (Core Python) and used it for syntax reference. I'm not the best Python coder in the world, likely because I don't get to use it as often I'd like, but it worked for me.
&gt; I would argue that exec is the most Pythonic of Python features, in fact it is the only keyword that distinguishes an interpreted language from a compiled language. You can make contorted justifications, but regardless, there is a general consensus about what it means to be Pythonic, and magical behavior like that outlined above is a pretty clear violation of it. I'm not saying it's an abomination or the worst thing in the world -- it's just pretty clearly incompatible with the word you're trying to use for it. Just because exec/eval are a primary distinction for dynamic languages does *not* mean that their use is widely condoned -- and this goes beyond Python. Eval-like functionality is generally used as a hack or last resort.
I can understand why that would seem contradictory. While SQLAlchemy does create an abstraction for the model, it is still a lot like building your own queries - ie .. # Create a new article query query = meta.Session.query(Article) # Join category which the article belongs to query = query.add_entity(Category) query = query.outerjoin((Category, Article.category_id == Category.id)) # Create a subquery to retrieve the number of comments related to the article and join it count_subq = meta.Session.query(Comment.article_id, func.count(Comment.article_id).label("comment_count")).group_by(Comment.article_id).subquery() query = query.add_column(coalesce(count_subq.c.comment_count, 0).label("comment_count")) query = query.outerjoin((count_subq, count_subq.c.article_id==Article.id)) Where as I find Django's ORM tries to hide what it's doing underneath.
I will. Read the first post. It is a blog that I will continue to work on as I learn Django myself. Haven't had any time to myself to play with stuff more, let alone post on the blog.
That's ok, I know some great programmers that prefer for example using Xslt and similar instead of using frameworks. Bit you should try Django, you'll feel right at home. The MTV paradigm has a lot in common with MVC but simplifies a lot stuff, For ex. one of my fav things about django is that a whole app can live inside one folder. 
In Django's defense, its documentation is scarily up-to-date. So much so it may not be the stable version you're using to build. Bottle is great as well!
For the casual reader I just want to clarify that we are not talking about eval/exec any user input (which I agree is bad with very few exceptions). We are talking about exec'ing code that is part of the application. The reason we exec user code if that because the code may have changed and we do not want to restart the web servers. It is clean and does not cause memory leaks. Some other web frameworks deal with this by reloading modules which is something the Python documentation explicitly say it is not safe and can cause memory leaks or forcing developers to restart the web server when code changes. Every design decision is a trade-off. For me and other web2py users this solution works well.
There was a time when these kind of implicit objects were more common -- convention in Python has moved consistently and deliberately away from that.
I agree.
I don't think anyone uses `reload()` these days in a serious web framework. Paste, CherryPy, and Django do a complete process restart when code changes. I believe mod\_wsgi effectively does the same thing, but it's a bit simpler given that it uses child process or subinterpreters. Some people still use crazy tricks with Zope 2 to reload things in-process, but they are far more complex than what `reload()` does.
I am not sure this is a convention we are talking about as much as functionality. Nobody has shown that it is possible to rewrite web2py without exec's and, in fact, I do not believe it to be possible. There is a reason exec is a keyword of the language.
I am glad to hear this.
Since he didn't mention it, the author is also the author of web2py.
I said it was biased. ;-) We are looking at revising the document. If there is something factually incorrect, please let me know.
Tornadoweb isn't much of a ramework, merely a convenient library atop epoll/select and HTTP. It does nothing else really. (Note that I prefer those very focused and compact libraries to large-ish frameworks). 
It’s not clear what you meant there, but for everyone else: in Python 2, variables “leak” from list comprehensions into the surrounding scope, but not from generator expressions. In Python 3, neither leak.
Dunno why you were downvoted. You're entitled to your choice. Perhaps too many web2py or Django fanboys 'round here.
er... why?
Why would you say that ? Is it because of the design of the framework, or the quality of the documentation ?
Here is the same query in web2py (assuming the same table/field names) rows=db(db.Category.id==db.Article.category_id) .select(db.Category.ALL,db.Article.ALL,db.Comment.id.count(), left=db.Comment.on(db.Comment.article_id==db.Article.id), groupby=db.article.id) Here is a more complete example running on a fresh web2py shell: &gt;&gt;&gt; db.define_table('Category',Field('name')) &gt;&gt;&gt; db.define_table('Article',Field('title'),Field('category',db.category)) &gt;&gt;&gt; db.define_table('Comment',Field('body'),Field('article',db.article)) &gt;&gt;&gt; manual=db.Category.insert(name='Manual') &gt;&gt;&gt; frameworks=db.Article.insert(title='Frameworks',category=manual) &gt;&gt;&gt; db.Comment.insert(body='bla',article=frameworks) &gt;&gt;&gt; db.Comment.insert(body='bla bla',article=frameworks) &gt;&gt;&gt; db.Comment.insert(body='bla bla bla',article=frameworks) &gt;&gt;&gt; print db(db.Category.id==db.Article.category) .select(db.Category.name,db.Article.title,db.Comment.id.count(), left=db.Comment.on(db.Comment.article==db.Article.id), groupby=db.Article.id) Manual,Frameworks,3 As you see we had to make web2py. We really did not have a choice.
[We already went over that recently, didn't we](http://www.reddit.com/r/Python/comments/bhz36/easy_as_cherrypy/)? ;)
In Python 3 exec is a function.
Why a framework? You only end up fighting against it sooner or later. And for a novice it might even be easier to start with WSGI, then add some templating language and storage mechanism of choice. Then go from there. In case you really want a framework maybe also have a look at [repoze.bfg](http://bfg.repoze.org) which has excellent documentation.
ah ah ah yeap :) I had forgotten it was with you. Well then let me bow out.
I imagine he was downvoted because Denied was an April fool's joke.
&gt; While SQLAlchemy does create an abstraction for the model, it is still a lot like building your own queries - ie .. Aren't there further abstractions using alchemy as their base e.g. elixir?
Flask is less than two weeks old. I wouldn't suggest it for newcomers to Python just yet (though it does look like it's shaping up very nicely).
indeed... for some reason I got mixed up with bottle. damn this isn't my day.
This is a great example of why I personally prefer the Django ORM to SQLAlchemy. Here's the equivalent in Django: articles = Article.objects.select_related('category').annotate( comment_count = Count('comments') ) To figure out the SQLAlchemy version I really need to work out what the SQL query is that I need to execute and then backport that to SQLAlchemy API calls (with the outerjoin / group_by / subquery methods). I'm using an ORM because I don't want to have to figure out the SQL for relatively straight forward operations like "fetch all articles, joined against their categories and with a count of their comments". I don't know what the equivalent to the above would be using something like Elixir - hopefully someone else can post that.
The best framework is **no** framework: # webapp.py def hello(environ, start_response): start_response('200 OK', [('Content-Type', 'text/plain')]) return ["hello kitty"] $ gunicorn webapp:hello $ firefox http://localhost:8000/ But if must have all the bells and whistles (orm/templates/session/cache/i18n/l10n/etc.) the correct choice is [pretty obvious](http://trends.google.com/websites?q=djangoproject.com,+pylonshq.com,+webpy.org,+turbogears.org,+zope.org&amp;geo=all&amp;date=all&amp;sort=0)
I also moved from PHP to Python, and at the start I found it a nightmare. WSGI really wouldn't click for me, even looking at various different web frameworks I was non-the-wiser. You see, a lot of the frameworks do a lot of "magic" under the hood, and because I wasn't used to python I couldn't see what was going on even though I understand how HTTP works. The thing that made it click for me was to write my own framework. Yes, that seems like wasted effort, however if you really want to get your head around how everything works in the python world its the best thing you can do. Google "python micro framework" and read the source of those (things like bottle, web.py, etc). You'll pick up a lot. Some other things I learned: * PHP is a *web-scripting* language, Python is a *programming* language. PHP hides away a lot of the HTTP stuff, whereas in Python you need to do a lot of it yourself. To some degree, anyway - there are many modules which help, which leads me to... * Python is all about the packages &amp; modules. The idea is that you try and write things in this way, then write a bit of glue code to stick yours with other peoples. Working in this way means you need to... * Unit test, all the way. In PHP you tend not to bother with them (I've never met a PHPer who uses them), but in Python (&amp; any other general programming language) they're you're best friend. * Lists, dicts, tuples, sets. You're not in Kansas any more; PHP has one basic array type whereas Python has a number of alternative types which are much more powerful. Learn how to use them. * In fact, make sure you understand *all* the basic Python types, and check out things like collections and queues. * I used to always check the PHP manual before I started coding to see whether there was an extension that did what I needed to do. Now I do the same with [Pypi](http://pypi.python.org), the python manual (for built-in modules), and [PyMOTW](http://www.doughellmann.com/PyMOTW/). It's pretty-much guaranteed that someone's built a module to do what you want. And finally, read [this](http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru).
&gt; To figure out the SQLAlchemy version I really need to work out what the SQL query is that I need to execute and then backport that to SQLAlchemy API calls Amen. It goes the other way too .. jigs\_up's code is completely impenetrable to me on first glance, but I'm sure I could make sense of it if I just translated it back to SQL. Look, it already has a bunch of keywords which make me think of SQL: outerjoin, coalesce, group_by and func.count. And it's supposed to be an abstraction? Or simpler? I have no experience of Django, but your example looks a lot more obvious.
[Denied](http://denied.immersedcode.org/) for sure. Check out video tutorial to get the feeling of it's convenience.
Not Pylons? Werkzeug? Why gunicorn as opposed to cherrypy, gevent, things like that?
I'm not sure that SQLAlchemy's goal is to make things simpler. That's probably the most important difference between it and Django's ORM. IMO, the purpose of the abstraction is to link your objects directly to the database, and to allow you to swap out database platforms without changing code. I personally like the fact that I'm still building queries manually (in a sense), because it gives me complete control over the resulting query string.
In my case, it was the complexity. For example, i still haven't figured out how to make Authkit work, so i ended up trying to write my own.
AuthKit is a real albatross around Pylons. It's buggy and over-complicated - it's far easier to just write your own authentication code in the controller `__before__` method, which is what most Pylons developers do (or use some other package, like repoze) once they go to the Pylons IRC and everyone tells them how crap AuthKit really is. The problem is that it's presented in the Pylons Book as the way to do authentication, for the simple reason that the author of AuthKit and the book are one and the same. Generally I would say that Pylons is not that complicated - once you get the basic concepts of WSGI and plugins etc - but the documentation is woefully incomplete and out of date.
Ignore what everybody else says, do some research and just use what you think is the best. AFAIK, they're all pretty 'pythonic' and you'll probably pick up python in a day. Also remember, that you don't HAVE to use the ORM in Django, nor do you HAVE to use the template engine. Hell, if you want to use Bottle and the Django ORM nothing's stopping you. 
Elixir queries are just SQLAlchemy queries: Elixir's value addition is more in the declaration of models. However, jigs_up's example is not the most concise. While SQLAlchemy might seem a little more wordy than Django, it's not bad at all, and covers more bases than Django does (though Django does a fine job for common and some not-so-common cases). SQLAlchemy docs on subqueries are [here](http://www.sqlalchemy.org/docs/ormtutorial.html#using-subqueries). A more concise example of join, where Publisher and Book are Elixir entities (models): print Publisher.query.join(Book) gives the following SQL: SELECT publisher.id AS publisher_id, publisher.name AS publisher_name, -- etc. other columns omitted FROM publisher JOIN book ON publisher.id = book.publisher_id I could have equivalently used Publisher.query.join('books') where 'books' is a OneToMany relation on Publisher. Similarly to Django's managers, SQLAlchemy queries allow easy subclassing and custom methods to do specific things with simple APIs, so that your project code can be made concise on a par with Django. For example, see this post by Armin Ronacher on [SQLAlchemy patterns in Zine](http://lucumr.pocoo.org/2009/1/3/sqlalchemy-patterns-in-zine). 
I agree, though in the [design pattern sense of "Framework"](http://en.wikipedia.org/wiki/Software_framework), WSGI is also a framework, albeit a much purer one. "Frameworks" like Django and Web2Py are actually hybrid framework-libraries, that give you both inversion of control plus a steaming pile of utility modules. IMO they shoot themselves in the foot by trying to do everything and ending up with an API with a massive surface area that makes it hard to learn. I'd like to see more projects realize this and split up their Framework and Library components. Django's web framework has no real dependency on Django ORM, Django Template Language, Django Forms, etc. There's really no reason they should be bundled together, taught in the same tutorial, etc. So I agree with mrtopf - Start with WSGI, then figure out what database you want and find an ORM. Once you're happy with your data models, check out the templating languages. You'll find it a lot easier to learn if you do this in a piecewise fashion than if you try to find a all-in-one "Framework" that gives you a complete monolithic development environment.
And the Django documentation is second to none, which is particularly useful when you're just starting out.
I swear this is a repost of a guy wanting to get a job and said he knew python but doesn't.... 
Flask does look interesting - Werkzeug and Jinja2 are top-notch libraries. It does require a few things before it can be considered production quality though - being able to handle more than one views module and ORM support (SQLAlchemy most likely) being two examples.
Hmm, well said. I suppose I've been trying to misuse SA. That said, I think portability across databases is a bit of a chimæra -- how often is a serious app migrated to a different DB? And is the expense of learning and working with a more complicated query language up front saved when you do? I've never had a great deal of trouble moving between different RDBMSes, and SA has at least once prevented me from doing things as efficiently as I know the DB allows.
As a client, that would trouble me. Paranoid.
Requires authentication. Requires https. Uses secure cookies. You can turn it off completely. Once again: the fact that you can do something does not mean you must.
I'm not sure SA is that database-agnostic. For example, where you can use "iexact" in Django for case insensitive queries, in SA you have to use db-specific code (MySQL and Postgres for example do things differently). That said, I prefer SA because it allows me to write SQL-as-Python. Simple inserts, updates, selects etc are as easy to do as in Django, and you can drop down more easily to a lower level of abstraction. There will always be cases however no matter what ORM you are using where a plain SQL string is just more efficient and easier to write. 
Well, you don't have to know every detail of WSGI in order to write good web applications effectively. I started out with Django and found it quite easy to get into.
Yeah, using Django productively it is a bit of a nuisance. I don't want to read the documentation of the development version, but the one of the latest stable release.
Well , you're being a bit disingenuous about the description. Having raked through Tornadoweb's code, made own improvements and customization to it and applied it to three sites , I can tell you that its more. I don't try to disparage any framework and would like to focus on the OP's question and I feel that it's a great fit. That is all.
Can you expand on the unpythonicness of magical behaviour? To me it seems as if Python encourages it by providing language features as, for example, [descriptors](http://docs.python.org/reference/datamodel.html#descriptors) or the with statement. 
In python 2 you could use it in two ways: exec code in context exec(code, context) They are equivalent. In Python 3 only the latter syntax is allowed. This is a syntactical difference not a fundamental one. exec is still there and for good reasons. 
&gt; This is a great example of why I personally prefer the Django ORM to SQLAlchemy It's not really a good example for SQLAlchemy The Article-&gt;Category can just be loaded by using eager loading: http://www.sqlalchemy.org/docs/mappers.html#mapper-loader-strategies Comment count can be setup once as a column_property: http://www.sqlalchemy.org/docs/mappers.html#sql-expressions-as-mapped-attributes and then loaded on demand per row or via a subquery.
Fair enough. I do like the Tornado lib but it is minimal and I don't personally consider it to be a rich framework. Just a specialized tool, much alike CherryPy. That's a compliment in my book BTW.
People didn't appreciate my attempt at misleading a python newbie.
I actually reference djangobook.com multiple times in the blog. I think it is the best resource I have ever found, for anything.
I've have to give it to Django as well. Pretty easy to pick up, I just set about creating a basic wiki with it not long ago.
Title|Submitted by|Submitted when ---|---|--- [Book Review: Dive Into Python 3](http://www.reddit.com/tb/anpit)|[gst](http://www.reddit.com/user/gst)|3 months ago [Python oddity: why does tarfile.extractall ignore errors by default?](http://www.reddit.com/tb/ami60)|[sridhr](http://www.reddit.com/user/sridhr)|3 months ago [The Framework Design Balancing-act - Dependency injection and -you-](http://www.reddit.com/tb/an21e)|[Crast](http://www.reddit.com/user/Crast)|3 months ago [Fixing packaging terminology confusion: PyPI will be known as "Python Project Index"](http://www.reddit.com/tb/amvlm)|[sridh](http://www.reddit.com/user/sridh)|3 months ago [Pyglet 1.1.4 released](http://www.reddit.com/tb/amoi6)|[caffeinedependent](http://www.reddit.com/user/caffeinedependent)|3 months ago [8 Reasons Why You Should Try Django](http://www.reddit.com/tb/amg1h)|[lephron](http://www.reddit.com/user/lephron)|3 months ago [Django 1.2 alpha 1 released: release notes](http://www.reddit.com/tb/am62a)|[imbaczek](http://www.reddit.com/user/imbaczek)|3 months ago [The "promise" of faster Python](http://www.reddit.com/tb/am3nz)|[gst](http://www.reddit.com/user/gst)|3 months ago [Server-side image transforms in Python](http://www.reddit.com/tb/am2qn)|[agentdero](http://www.reddit.com/user/agentdero)|3 months ago [Python Performance Tips](http://www.reddit.com/tb/alwwx)|[seabre](http://www.reddit.com/user/seabre)|3 months ago [Twisted docs generated using Sphinx](http://www.reddit.com/tb/alkzp)|[number5](http://www.reddit.com/user/number5)|3 months ago [Dangerous behavior of list(&lt;generator&gt;)](http://www.reddit.com/tb/akjlz)|[sridhr](http://www.reddit.com/user/sridhr)|3 months ago [VIM as a Python IDE](http://www.reddit.com/tb/akiiz)|[crankyadmin](http://www.reddit.com/user/crankyadmin)|3 months ago [A review of (some) Python editors](http://www.reddit.com/tb/akbav)|[sridhr](http://www.reddit.com/user/sridhr)|3 months ago [Web Sockets in Tornado](http://www.reddit.com/tb/ak9ho)|[sridhr](http://www.reddit.com/user/sridhr)|3 months ago [Decorators specific to a class](http://www.reddit.com/tb/ak1y9)|[KangOl](http://www.reddit.com/user/KangOl)|3 months ago [Welcome to The Hitchhiker’s Guide to Packaging](http://www.reddit.com/tb/ah7rz)|[krs](http://www.reddit.com/user/krs)|3 months ago [Using doctest.testmod() properly](http://www.reddit.com/tb/agzvn)|[amade](http://www.reddit.com/user/amade)|3 months ago [Stackless Python gets documentation](http://www.reddit.com/tb/ag6ha)|[euccastro](http://www.reddit.com/user/euccastro)|3 months ago [withrestart: Common Lisp's condition system done the Python way](http://www.reddit.com/tb/aflnx)|[rfkelly](http://www.reddit.com/user/rfkelly)|3 months ago [stream.py -- pipes for Python](http://www.reddit.com/tb/aeyd4)|[amade](http://www.reddit.com/user/amade)|4 months ago [Rolling My Own WYSIWYM Editor](http://www.reddit.com/tb/aeai2)|[pkkid](http://www.reddit.com/user/pkkid)|4 months ago [Design a GUI for your python project using wxFormBuilder 3.0 beta](http://www.reddit.com/tb/adroe)|[masterfap](http://www.reddit.com/user/masterfap)|4 months ago [How To Use Linux epoll with Python](http://www.reddit.com/tb/ade44)|[afoo42](http://www.reddit.com/user/afoo42)|4 months ago [Formatting and processing text in TAL templates](http://www.reddit.com/tb/abo4p)|[chompomonim](http://www.reddit.com/user/chompomonim)|4 months ago [Automating Excel Pivot Tables with Python](http://www.reddit.com/tb/ab7w6)|[dlwtidder](http://www.reddit.com/user/dlwtidder)|4 months ago [Passing Python file objects across a SWIG interface](http://www.reddit.com/tb/ab2ej)|[g4n0n](http://www.reddit.com/user/g4n0n)|4 months ago [Run-time compiled C in python scripts](http://www.reddit.com/tb/aaxu8)|[rmtew](http://www.reddit.com/user/rmtew)|4 months ago [Python and Pygame - A Primer](http://www.reddit.com/tb/aadmf)|[cannadbt](http://www.reddit.com/user/cannadbt)|4 months ago [pymex: Python embedded in MATLAB](http://www.reddit.com/tb/aa0l3)|[Lexarius](http://www.reddit.com/user/Lexarius)|4 months ago [Should you go with Google App Engine?](http://www.reddit.com/tb/a9jih)|[vilerman](http://www.reddit.com/user/vilerman)|4 months ago [Guide To Writing Games](http://www.reddit.com/tb/a78pr)|[IbeeX](http://www.reddit.com/user/IbeeX)|4 months ago [A history of Python packaging](http://www.reddit.com/tb/a2x93)|[gst](http://www.reddit.com/user/gst)|5 months ago [An Introduction to Python Objects](http://www.reddit.com/tb/a1re8)|[estherschindler](http://www.reddit.com/user/estherschindler)|5 months ago [PyMOTW: sys, Part 4: Exception Handling](http://www.reddit.com/tb/9zz02)|[IbeeX](http://www.reddit.com/user/IbeeX)|5 months ago [Python quirks ](http://www.reddit.com/tb/9z3d4)|[discostoo](http://www.reddit.com/user/discostoo)|5 months ago [Luban is a python-based, cross-platform user interface builder](http://www.reddit.com/tb/9y29g)|[deleted]|5 months ago [A visual state activity of python frameworks via IRC](http://www.reddit.com/tb/9y106)|[apardue](http://www.reddit.com/user/apardue)|5 months ago [Reworking the GIL](http://www.reddit.com/tb/9xpv1)|[gst](http://www.reddit.com/user/gst)|5 months ago [Writing apps in 24 hours #1: 'Die Schere', a video editor (with video demo)](http://www.reddit.com/tb/9xdsj)|[ralsina](http://www.reddit.com/user/ralsina)|5 months ago [Twisted Web in 60 seconds: logging errors](http://www.reddit.com/tb/9xc55)|[gst](http://www.reddit.com/user/gst)|5 months ago [Tarek: Distribute support added in zc.buildout trunk](http://www.reddit.com/tb/9wyy4)|[deleted]|5 months ago [PyMOTW: sys, Part 6: Low-level Thread Support](http://www.reddit.com/tb/a4mcr)|[IbeeX](http://www.reddit.com/user/IbeeX)|5 months ago [Py in the Sci - what SciPy is all about...](http://www.reddit.com/tb/9wyuu)|[gst](http://www.reddit.com/user/gst)|5 months ago [Building a Flash Chat Socket Server with Stackless Python](http://www.reddit.com/tb/9wxpz)|[gst](http://www.reddit.com/user/gst)|5 months ago [Aria2 xml-rpc command line control in python. Let you add new http/ftp/torrent/metalink downloads to a running aria2c. Single file script](http://www.reddit.com/tb/9wvq9)|[ccdos](http://www.reddit.com/user/ccdos)|5 months ago [python-on-a-chip](http://www.reddit.com/tb/9wtxd)|[finite](http://www.reddit.com/user/finite)|5 months ago [PythonTurtle delivers! A "learn to program" environment](http://www.reddit.com/tb/9wq6j)|[ubershmekel](http://www.reddit.com/user/ubershmekel)|5 months ago [Why I like Redis](http://www.reddit.com/tb/9wmre)|[placidified](http://www.reddit.com/user/placidified)|5 months ago [pystates: A simple but powerful state machine framework](http://www.reddit.com/tb/9wk2e)|[placidified](http://www.reddit.com/user/placidified)|5 months ago [PyPM: apt-get like package manager for Python from ActiveState](http://www.reddit.com/tb/9wi2h)|[deleted]|5 months ago [http://www.reddit.com/tb/9wdmm](http://www.reddit.com/tb/9wdmm)|[gumuz](http://www.reddit.com/user/gumuz)|5 months ago [Guido van Rossum proposes a Moratorium on language changes](http://www.reddit.com/tb/9wc2h)|[lorg](http://www.reddit.com/user/lorg)|5 months ago [Python messaging with ActiveMQ and RabbitMQ](http://www.reddit.com/tb/9w3po)|[VitaminQQQ](http://www.reddit.com/user/VitaminQQQ)|5 months ago [Unladen Swallow Q3 release](http://www.reddit.com/tb/9w3ep)|[gutworth](http://www.reddit.com/user/gutworth)|5 months ago [blist: a list-like type with better asymptotic performance](http://www.reddit.com/tb/9w2oz)|[placidified](http://www.reddit.com/user/placidified)|5 months ago [Beautiful Coroutines: Cooperative Concurrency in Python using Diesel](http://www.reddit.com/tb/9w1f8)|[placidified](http://www.reddit.com/user/placidified)|5 months ago [I wrote a python script to generate memes via memegenerator.net](http://www.reddit.com/tb/9w05h)|[kcbanner](http://www.reddit.com/user/kcbanner)|5 months ago [Integration of Python and PyQt into 3d Studio Max](http://www.reddit.com/tb/9vyfv)|[groupthinkjunkie](http://www.reddit.com/user/groupthinkjunkie)|5 months ago [tender-multipass, Python utilities for easily integrating Tender's MultiPass authentication](http://www.reddit.com/tb/9vx5d)|[siliconflorist](http://www.reddit.com/user/siliconflorist)|5 months ago [The September 2009 issue of Python Magazine](http://www.reddit.com/tb/9vsws)|[gst](http://www.reddit.com/user/gst)|5 months ago [Import Time Side Effects and You](http://www.reddit.com/tb/9vhjj)|[gst](http://www.reddit.com/user/gst)|5 months ago [Tutorial and Tips on using pythons datetime module](http://www.reddit.com/tb/9vfcj)|[vkrams](http://www.reddit.com/user/vkrams)|5 months ago [PyMOTW: sys Part 2: Runtime Environment](http://www.reddit.com/tb/9vf50)|[gst](http://www.reddit.com/user/gst)|5 months ago [Pyevolve benchmark on different Python flavors](http://www.reddit.com/tb/9vf3b)|[gst](http://www.reddit.com/user/gst)|5 months ago [Pyro is short for PYthon Remote Objects. It is an advanced and powerful Distributed Object Technology system written entirely in Python](http://www.reddit.com/tb/9v7u8)|[easytiger](http://www.reddit.com/user/easytiger)|5 months ago [Memory Size of Python Objects](http://www.reddit.com/tb/9ix9x)|[plisk](http://www.reddit.com/user/plisk)|7 months ago [Token Testing Talk Slides: Djangocon 2009](http://www.reddit.com/tb/9ikb1)|[megaman821](http://www.reddit.com/user/megaman821)|7 months ago [I wrote an app to better integrate fckeditor into django, what do you think?](http://www.reddit.com/tb/95tky)|[megaman821](http://www.reddit.com/user/megaman821)|8 months ago [Learn about decorators in python](http://www.reddit.com/tb/943vh)|[vk_rams](http://www.reddit.com/user/vk_rams)|8 months ago [Testing events with Twisted's Trial](http://www.reddit.com/tb/93xos)|[mheitzenroder](http://www.reddit.com/user/mheitzenroder)|8 months ago [Buildout for Zine blog, along with a Twitter widget](http://www.reddit.com/tb/92npy)|[ccomb](http://www.reddit.com/user/ccomb)|8 months ago 
Title|Submitted by|Submitted when ---|---|--- [PyPy numeric experiments](http://www.reddit.com/tb/926lg)|[megaman821](http://www.reddit.com/user/megaman821)|9 months ago [Browse remote directories using python](http://www.reddit.com/tb/907ky)|[vkrams](http://www.reddit.com/user/vkrams)|9 months ago [Using IDLE with virtualenv](http://www.reddit.com/r/Python/comments/8gvpd/using_idle_with_virtualenv/)|[locochilli](http://www.reddit.com/user/locochilli)|11 months ago [Hatching Python Eggs from NetBeans IDE](http://www.reddit.com/tb/7rpu6)|[gst](http://www.reddit.com/user/gst)|1 year ago [How to: Perform Multivariate Regression with Python](http://www.reddit.com/tb/7kmm7)|[agconway](http://www.reddit.com/user/agconway)|1 year ago [IronPython - 10 WPF Tutorials](http://www.reddit.com/tb/7iwhx)|[RobertSOakes](http://www.reddit.com/user/RobertSOakes)|1 year ago [JJinuxLand: Python: Class Methods Make Good Factories](http://www.reddit.com/tb/7g1nh)|[arunner](http://www.reddit.com/user/arunner)|1 year ago [Django Cachebuster - template tags for css and javascript](http://www.reddit.com/tb/72tm8)|[20seven](http://www.reddit.com/user/20seven)|1 year ago [CairoPlot v1.1 - Plottig API for Python](http://www.reddit.com/tb/71tiw)|[stalf](http://www.reddit.com/user/stalf)|1 year ago [What ???? False == True !!](http://www.reddit.com/tb/6wogq)|[matrixise](http://www.reddit.com/user/matrixise)|1 year ago [How To Install Django On Debian Etch (Apache2/mod_python)](http://www.reddit.com/tb/6sz0k)|[gst](http://www.reddit.com/user/gst)|1 year ago [Embedding Python In Apache2 With mod_python](http://www.reddit.com/tb/6svqe)|[stii](http://www.reddit.com/user/stii)|1 year ago [Django’s tipping point!](http://www.reddit.com/tb/6sj7l)|[palmTree](http://www.reddit.com/user/palmTree)|1 year ago [Auto Login to MySpace using Python](http://www.reddit.com/tb/6rvwd)|[subeenpy](http://www.reddit.com/user/subeenpy)|1 year ago [User Editable String Translations with Django](http://www.reddit.com/tb/6r8wl)|[andre_pl](http://www.reddit.com/user/andre_pl)|1 year ago [Panda3D Tutorial - Keyboard Events + Scene Graph manips](http://www.reddit.com/tb/6qs4x)|[bongotastic](http://www.reddit.com/user/bongotastic)|1 year ago [List of Python Programming Video Lectures](http://www.reddit.com/tb/6p6pd)|[pmsprasa](http://www.reddit.com/user/pmsprasa)|1 year ago [jsonpickle: turn any python object into JSON](http://www.reddit.com/tb/6p4uh)|[johnnyh749](http://www.reddit.com/user/johnnyh749)|1 year ago [Any good audio lectures to learn python on mp3 player?](http://www.reddit.com/r/Python/comments/6ow6c/any_good_audio_lectures_to_learn_python_on_mp3/)|[happyfoliage](http://www.reddit.com/user/happyfoliage)|1 year ago [Discussion: Django vs. Pylon vs. TurboGears vs. Zope](http://www.reddit.com/r/Python/comments/6o67t/discussion_django_vs_pylon_vs_turbogears_vs_zope/)|[fapman](http://www.reddit.com/user/fapman)|1 year ago [Ask Reddit: What python module can serve me as a replacement for php + tinyButStrong?](http://www.reddit.com/r/Python/comments/6igq6/ask_reddit_what_python_module_can_serve_me_as_a/)|[pistacchio](http://www.reddit.com/user/pistacchio)|1 year ago [Python Decorators: Wonderful and beautiful syntactic sugar](http://www.reddit.com/tb/6gezv)|[avinashv](http://www.reddit.com/user/avinashv)|1 year ago [Python and the Twitter API](http://www.reddit.com/tb/6fx2q)|[avinashv](http://www.reddit.com/user/avinashv)|1 year ago [Getting in the Python Mindset: What is Pythonic?](http://www.reddit.com/tb/6fp0a)|[avinashv](http://www.reddit.com/user/avinashv)|2 years ago [Finally! Primitives for working with money and currencies in Python and Django](http://www.reddit.com/tb/6cmkl)|[jdimov](http://www.reddit.com/user/jdimov)|2 years ago [Extracting Content From Websites Using BeautifulSoup](http://www.reddit.com/tb/66tnc)|[joshaidan](http://www.reddit.com/user/joshaidan)|2 years ago
I've only tried Django and CherryPy. I like CherryPy much better. It's lighterweight and easier to keep in your head. I deploy things to AppEngine, which means I already have a models/ORM framework preselected (the GAE datastore). Jinja2 is a much better template system than the one that comes with Django (they are conceptually similar, but Jinja is more consistent and easier to enhance). So models and templates are handled - all I really need now is URL dispatching. Django's URL dispatching is cool, but that's a lot of overhead just for URLs and pretty debug pages. It's not even funny how much faster CherryPy runs on AppEngine than Django does, even though Django is recommended in the GAE docs. I'm not saying CherryPy is perfect, but it's easier to learn and much faster than Django. - Make a function that returns an XML string - Put it in a class - BAM: website!
You're forgetting to swap from network byte order to host byte order. If you're doing this on most modern hardware, you're on a small-endian architecture, and network byte order is big endian, IIRC. However, it will probably all depend on the byte order of the machine you run the code on. If someone runs that on a Sun Solaris box, I'm betting they get exactly what you intend. Fortunately, there is a library function for this. Try this: hex(socket.ntohl(struct.unpack('&lt;L',socket.inet_aton('127.0.0.0'))[0])) It'll work. Here's how you can see this. Using your code, what does '127.0.0.192' become in hex? What should it be? 
"Why X, you only end up having to deal with its drawbacks sooner or later" can be applied to just about *anything*. "Why a library? you only end up fighting against it sooner or later." Why a framework? Because its advantages can outweigh it drawbacks. Because not everybody wants to reinvent a lot of wheels, and spends time putting things together, and maintain all the code by themselves. Because not everybody knows enough to even know what they'd want if they started from scratch. Now one may make an argument for composing micro-frameworks together yourself instead of picking one where this has been done for you. In certain circumstances that is useful. But it might be more work than you want to spend and it might be beyond your ability to judge. And let's be serious: a template language and a storage mechanism will have framework-like aspects anyway. And are we really serious that novices, possibly new to the Python language, are directed to building up from the ground up with something as arcane as WSGI? Thats sounds very similar to: "you don't need a framework, just do everything with CGI". Yes, people fight against frameworks. People get burned by frameworks. A particular framework is frequently not appropriate. But frequently they *are* appropriate. Frameworks are useful and frameworks are here to stay, because for many people for many projects, the pain is by far outweighed by the gain. 
 &gt;&gt;&gt; '%08x' % struct.unpack('&gt;L', socket.inet_aton('127.0.0.0')) '7f000000' edit: jehahan's snippet is better and actually takes into account byte order.
&gt; Django's web framework has no real dependency on Django ORM, &gt; Django Template Language, Django Forms, etc. There's really no &gt; reason they should be bundled together, taught in the same tutorial, &gt; etc. Of course there is a reason. It is because people *like* not having to do everything themselves, and being able to find everything in one place, especially if that is already being used by others as well, so you can exchange information with them. Cabbages and carrots also are raised by very different farming techniques, but when you walk into a grocery store you can expect them conveniently near each other in the vegetable section. 
This is exactly the sort of thing that convinced us to prioritize an overhaul of the anti-spam system.
I would define magical behavior as an abstraction that affects core semantics of the language, and has not been generally accepted by the community/BDFL. The language features you mention are documented and it's expected that Python programmers will be familiar with them. There are many abstractions in Python (or any language) which would seem magical to someone who doesn't know about them -- but you're expected to know about them. Using objects that were never visibly imported or defined in the current file is inconsistent with Python's semantics and is a bit mysterious until you read the web2py documentation. "Pythonicness" is a sort of social construct that is vaguely reached by consensus between the Python developer community and Guido. There is no purely objective way to say "this is Pythonic" or "this isn't Pythonic." A survey of the python-list or python-dev mailing lists would be a pretty good way to determine it though.
Well, the web-based interface is a nice thing for the purpose of trying out the framework to see what's it like and to learn a little about the structure of web2py. For that purpose, I think it's pretty good. However, it might backfire to advertise the web based interface as an IDE. That might be an interesting point to newbies, but developers do know that it's really icing on the cake. And to advertise that as a game-changing feature may not be a good thing. 
Pythonic or not pythonic, it really depends. And sometime, you have to think outside of the box. Web2py isn't perfect, but it's pretty good. I like it. For the purpose of learning Python, I think it serves that purpose very well, if not better than the other frameworks at that. The database abstraction layer of web2py is quite different from that of other frameworks. I'm still evaluating it. But it's pretty nice to get the job done. I do wish mdipierro spends a lot more time improving the book (SERIOUSLY). I'd like to see a developer's FAQ. 
That's curious because Armin has been punishing web2py for years about the usage of global.
Would this translate in a single query (with a outer join and a left join) or one query per record of the annotated table?
Now I understand what happened to some of my news ! ;) 
I've been working in this direction, and it looks to be a lost cause. The pdf file names are 20-30char strings created by a base64.js script that goes through a ridiculous bit twiddling procedure to create encoded filenames for some asinine reason. I haven't touched java since 2004, and I didn't like it then, so I really doubt it'll be worth the effort to try to rewrite their library in python, especially since I'll have to do this before I can even begin to understand where the ORIGINAL filename comes from before decoding (so, I may or may not be able to guess at the new filenames even after I recreate this library.) Also, this ugly enterprise code is making my eyes ache. And on to a new project in 3...2...1...
Thanks for your hard work BioGeek.
Anyone else have chrome go cross-eyed over the main font on this page? Looks fine in firefox, but in chrome it looks like a pdf of a research paper photocopied out of some academic journal circa 1983. Nice article, btw. Glad it got popped out of the spam bank.
wow. i wondered why i never saw anything frontpage from this subreddit
it surely has to do with the bio in the name :)
I think you're thinking about it wrong. If I understand what you're asking, you would like to access a dictionary using a composite key. print data["A1"] print data["A2"] data["A3"] = 42 ...etc.... Yes? (Sounds like spreadsheet coordinates) What you *could* do would be have the dictionary key be the letter, and the value of that key be a list. The number part would then index into that list. data = { "A" : [1,2,3,4,5], "B":[16,32,64,128] } print data["A"][2] # prints '3' But you want to do: print data["A2"] # prints '3' To do that you'll need to override the `__getitem__` and `__setitem__` methods of dictionaries and manage the decomposition of the key value yourself. Of course, you don't really need to do that. The cell reference "A1", "A2", etc. can just be a key to a single cell. That cell can then be whatever you need. To use the spreadsheet idea, it could be a dictionary itself... data["A1"]["value"] data["A1"]["format"] data["A1"]["protection"] ...or an object with attributes.... data["A3"].value data["A3"].style ...etc. 
That is a lot of false positives. Hopefully this corrected data will help the filter. Thank you for checking into this, and thank the Admins for making these changes so the Mods can do their good work.
Thank you.
Well, libraries are easier to exchange than frameworks though. And they tend to grow because more and more use cases need to be solved with it. And I don't see how WSGI is really that complicated. It's quite straightforward. I don't see it as arcane. I see e.g. global request variables as more problematic to understand for novices. BTW, I also started with CGI but I don't really saw this as very complicated. Looking back it was in fact quite a bit easier than it's nowadays with all those frameworks ;-) So maybe it comes mainly down to not needing to make decisions. I am also not completely against frameworks but at least it might be helpful to first implement a function in a library and then use that in a framework. That way at least that functionality is more easily usable outside the framework (and tested to do so). 
I should maybe add that more examples of how to do that and potential components to use might be useful. I also think that this way you learn more about Python. 
You're welcome. Thanks for the suggestion of making a public post with all the links that were incorrectly autobanned. I think the community appreciates the transparency.
&gt; By giving the key as A1 or A2, how can i just out put, &gt; second element of the value ? Second element of value of 'A1' in dictionary d: d['A1'][1] &gt; Also, if i choose A2, it should point out that &gt; it is 2nd element and so on... &gt; How can i implement that ? Do you mean, A2 is the second element of the dictionary? That's not possible with a standard dictionary, which is unordered (IOW, the dictionary doesn't *know* the insertion or value order of elements). You'd have to use an ordered dictionary or keep track of the element order in a separate list or dictionary (e.g. mapping key to order index). If these answers don't satisfy, please restate the questions with more detail (e.g. specify input &amp; output).
Thanks for the help, it some what made things clear, If i searched a dict for some key, how can i find the position of key ? Ex. there are 10 keys from A to J, if i call key A, value of it as well as position of A in the list should be known, in this case 1. 
Aha, I was wondering why my post dropped off the front page so quickly. 
In Django: def index(request): return "hello %s" % request.GET['name'] In web2py: def index(): return "hello world %s" % request.vars.name In both cases "request" is defined somewhere else by the framework. In both cases "is a bit mysterious until you read the [...] documentation". The difference is that in Django "request" is imported. In web2py "request" is defined by the framework in the name space where the user code is executed (like in Ruby on Rails). It saves an import for something that has to be there anyway. Anyway. People call magical things that they do not understand. They used to call magnetism magical. When people say web2py does some magic I take it as a compliment. ;-)
Cool, now I've got some reading to do!
&gt; It saves an import for something that has to be there anyway. "Saves"? Is there a shortage? Every other Python library and framework gets by without "conserving" imports in this way. I would understand if you just said "hey we're trying to make the syntax as minimalistic as possible for newbies", but you don't seem to come out and say that. &gt; Anyway. People call magical things that they do not understand. They used to call magnetism magical. When people say web2py does some magic I take it as a compliment. ;-) I don't think anyone is puzzled by `exec`. It's quite trivial to write something that will implement this exact behavior. It's just quirky and distasteful. Being able to quickly track down where a variable comes from is very useful and reduces ambiguity. If you prefer to increase ambiguity for the sake of appealing to people new to programming, that is *fine* -- just admit it instead of trying to make weird justifications that don't make any sense.
Yes. web2py is designed to appeal to people new to web programmig (although not exclusively). That it "increases ambiguity" that is your opinion because you are used to a different framework. That it is less Pythonic (by your definition) is also true. As I stated many times: Python frameworks usually weights "explicit is better then implicit" more than "do not repeat youself". Rails takes the opposite philosophy. We like the latter approach better. It is not just the exec (which is an implementation issue). In web2py everything has a default by design. Something that is not true in other Python frameworks.
Your code hurts my eyeballs. You're not programming like a Python programmer. You should (almost) never have to type "for x in range(len(foo))" Try hard to use "for x in foo" instead. Use set() Remember that "sum of the integers from 1 to N" is the same as (N*(N+1))/2 and use that trick in your code. 
BTW, your use of CamelCase for your VaribleNames is very UnPythonic. Most Python uses underscore separated varible and function names. You'll see CamelCase is some class names.
Just a single query.
Don't reuse the variable name "x". You're using it both as the output of text.readline() and "for x in range(len(TestList)):" To go through the file, use "for line in open(filename,'r'):" and forget that call to readline().
In this block: for x in range (len(TestList)): IntList = [ ] i = int(TestList[x]) IntList.append(i) return IntList What's this return doing here? Anyway, this whole block can be eliminated. Your outer loop should look like this: for line in open(filename, 'r'): for value in [int(x) for x int line.split()]: # Do something with each value 
Thank you for the clarification.
I actually see a lot pf r/py on my front page. Maybe you have too many subreddits?
I agree with your approach to building functionality: I like trying to wrap functionality into libraries, though those libraries are typically pluggable or configurable in some ways and become frameworks of their own. It's useful to try to make them work standalone and minimize the dependencies. And then I come back and combine libraries into a larger framework. hurry.resource and traject are examples of libraries like that. I do this because as you say, libraries are easier to exchange, and libraries are easier to test and think about in isolation. I don't think WSGI by itself is that complicated - it's obviously a successful API. I also think a typical novice, say a Python novice or a web development novice, is going to be confused by WSGI: a function returning an iterator, and you can wrap these in other functions and there's this middleware design pattern and so on.. and then? Now *how* am I to write a web application again? How do I access my database? Output HTML? Resolve URLs? A framework offers a lot of guidance there, and higher level patterns. A framework is a bit like a good graphical UI. It makes certain choices for you and constrains your options compared to a command line UI. In exchange, the features of a good graphical UI are discoverable and coherent, and it's easy to perform common tasks. There is a place for command line UIs, but a vast majority of computer users don't use them much (though one can argue even a basic google search is a command line UI). 
One of slacy's posts is heading in the right direction, but there's still a bunch of confusion. First step, call your variables 'intlist' or 'int_list' instead of 'IntList', the latter conventionally indicates a class in Python. I'd still recommend parsing the file as one step and analysing it as another. For the first step, something like slacy's list comprehension will work nicely. The loop will be cleaner if you start with this: for i, j in zip(intlist, intlist[1:]) print i, j Finally, the differences don't need to occur in order. This is where a set would be useful. For example, check the result of: set(range(1,5)) == set([1,5,2,4,3]) I should be including links to the documentation for list comprehensions, zip and sets but I haven't so you'll have to find them yourself :-). If you're not already using ipython or idle to experiment with examples, do so!
Ah, this is very clever! I love the idea of using zip for this problem. 
formatting looks normal in chrome for me. I really like how it looks like a tex document (bibtex style citations and all). Is this some sort of tex -&gt; html (all tex2html stuff I've seen is crap), or did the author put a crazy amount of effort into the look(css i guess)?
My solution used sum(set(values)), but i like set(range(1,n)) as well. 
wow four of my links was autobanned :( 
Really wish the mods of every other subreddit would do exactly this.
[Re-submitted this because it was autobanned by spamfilter](http://www.reddit.com/r/Python/comments/brcpk/official_announcement_list_of_all_the_submissions/)
Fontsquirrel does most of the heavy lifting: http://www.fontsquirrel.com/fonts/Latin-Modern-Roman Other than that's just just a couple of django generic views over rst docs. I don't like the clutter of most sites and reproducing a barebones latex document is pretty easy these days.
I wondered what happened to that post. Weird.
Since you're new to Python itself, I'd recommend you to go with a smaller framework such as [web.py](http://webpy.org/) or [Tornado](http://www.tornadoweb.org/)(Tornado looks like web.py though). Django is nice but I don't think it's suitable for someone who is new to Python.
I see 6 lines of code. Where are the breaks? I keep getting "unexpected character after line continuation character"
Thanks for that, by the way.
*Awesome.* Don't miss the [list of achievements](http://exogen.github.com/nose-achievements/).
Not to mention the chance to hit up some [interesting links](http://www.reddit.com/r/Python/comments/bdo8l/get_achievements_on_your_test_suite/). Thanks!
Huh? 
&lt;a,b,c,d,e,f='"',"'",'\','\n',',','"a,b,c,d,e,f="+b+a+b+e+a+b+a+e+b+c+c+b+e+b+c+"n"+b+e+b+e+b+e+b+f+b+d+"print "+f'&gt; &lt;print "a,b,c,d,e,f="+b+a+b+e+a+b+a+e+b+c+c+b+e+b+c+"n"+b+e+b+e+b+e+b+f+b+d+"print "+f&gt;
See gtfs. Where lines are defined by the &lt;&gt;
considering that i'm subscribed to 50 of them... probably
sum(set(values)) is cute, but imprecise.
I think the morale of the story is not to be too clever with how you use listcomps or genexps. It took me a few times reading over the initial post to see what was really happening, and I never would let something like that past a code review. :)
Good to see that we agree on the library approach :-) I wish more stuff would be put into libs first. Regarding WSGI I don't think you need to know about middleware and such.. This might come later. You also don't need to know about the iterator part, for beginners it might be simply a string. I agree that it's maybe not obvious how to access databases, do templating etc. but not because it's really complicated but maybe because examples are missing. Outputting HTML is just a call to some template library and e.g. using something like pymongo is also straightforward. URL resolving can be if-then-else in the beginning. But this could maybe be simpler if there would be libraries which handle it more on this level. Actually I am trying to build something like this with QuantumCore but we will see how successful this will be. But it feels good to start with the simple thing and then see where things repeat to factor them out. Another point about frameworks (and code in general of course) is that it might fit at some point in time.. When this is over either you did the right choices and your framework is developing with new trends or one maybe should start over. And I think the latter could be done more often ;-) 
Thanks for sharing. Twisted Conch documentation is sparse, so I'm quite certain that any published article on this subject is much appreciated by the community.
&gt; I agree that it's maybe not obvious how to access databases, do &gt; templating etc. but not because it's really complicated but maybe &gt; because examples are missing If you are going to construct a series of examples that tell you how to do this, they're going to have to choose some components to demonstrate the examples. If you want your example to be reasonably complete, a lot of choices will need to be made. Before you know it you end up with a framework, except you pretend it's not as the only description of the dependencies of the framework is in this documentation... Whether one should throw out a framework and start over, or stick with an existing framework is again one of those issues that doesn't have a simple answer. Throwing out a framework and building a new one may make you feel very productive, but it's in a sense a false productivity. You also lose a lot: documentation, code, community, and so on. I'll also argue that in the Python world, it happens *extremely often* that people construct new frameworks; I see a new one come by at a rate that seems like one every week! 
I vote for Django. The learning curve might look a bit steep at first, but you can be sure that it's worth the time spent learning it.
Jesus, that must have been hours of work...
Indeed. But I felt bad for everybody that got incorrectly banned, so that motivated me to sort this out. I also wrote some small Python scripts to format everything in tables etc. so I didn't loose to much time with that.
50 is the limit. If you have more than 50 reddit will randomly choose 50 of those to display as your frontpage and will cache that choice for a couple of hours. If /r/python wasn't included in this choice then you won't see links from it unless you explicitly visit the subreddit. I can't wait till this limit goes up.
obviosly Django - 
Nice, I was about to down vote you for you know what but then everything turned out better then I expected
Thanks. Very nice presentation. Decorators make it possible to go into complex processing while keeping the code very readable.
[Oh, wait, I spoke too soon...](http://www.reddit.com/r/Python/comments/br2ak/using_python_on_the_web_which_web_framework_is/c0o8xbs)
http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru
The django site has links on its docs page to whichever version of the docs you want. 
&gt; The language features you mention are documented and it's expected that Python programmers will be familiar with them. Of course you are expected to be familiar with the language feature. But taking descriptors as an example: they are used to override the semantics of attribute setting and getting. It is hard to do something non-magical with them. Whenever I set an attribute, I don't even know what it does behind the scenes. Little example which is silly but doable: obj.test = "hello world" # inserts a row in a sql table print obj.test # prints 1 Don't get me wrong, I love this feature and it made some stuff really elegant in my code. It is magical code nontheless ;)
For good style, your Django method should be named index_view :)
Hey, I took your code and had some fun with it. I added the ability to do photobooth and polaroid style images, and also random photos. Also I'm just learning python so if anyone has any suggestions I'm all ears. anyway: [http://pastebin.com/ANY9t7jv](http://pastebin.com/ANY9t7jv)
Indirectly, yes. I'm doing some sharepoint development, and while the eventual project is in c#, having a python repl for generating test data, trying out quick exploratory coding and basic experimentation is a godsend. Though I miss a more featureful interpreter like ipython. 
so, because you have disagreed with this guy in the past, he is no longer allowed to make a detailed post of how his framework looks?
[SQLAlchemy](http://www.sqlalchemy.org/)
This wasnt in the script
I used this article when writing my first ever Python script. I think optparse, and how clearly this article laid out its use, is a big part of what I really liked about Python after my first encounter.
Me too, up to the point where I read about how you are supposed to extend it. Also, argparse &gt;&gt; optparse.
No need for gunicorn for testing. from wsgiref.simple_server import make_server def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status headers = [('Content-type', 'text/plain')] # HTTP Headers start_response(status, headers) # The returned object is going to be printed return ["Hello World"] httpd = make_server('', 8000, hello_world_app) print "Serving on port 8000..." # Serve until process is killed httpd.serve_forever() 
Or use [opster](http://pypi.python.org/pypi/opster).
Is optparse really so difficult that it needs to be phrased "...for human beings"?? Much easier than coding for interdependencies with getopt...
I'd like to take this opportunity to point out that optparse is gradually being replaced by [argparse](http://code.google.com/p/argparse/) which is going to be in the Python 2.7 and 3.1 (or .2? not sure about this) standard libraries. It has a much nicer API and supports not only options but positional arguments.
That... is quite amazing. Words fail me.
If you're doing relatively simple stuff [Baker](http://bitbucket.org/mchaput/baker/src) is a nice alternative to the verbose `optparse`/`argparse` libraries: #!/usr/bin/env python import baker @baker.command def read(filename, debug=False): '''Read and print a file.''' if debug: print 'Reading', filename print open(filename).readlines() @baker.command def write(filename, debug=False): '''Write some sample text to a file.''' if debug: print 'Writing', filename with open(filename, 'w') as f: f.write('y helo thar') baker.run() With just 4 extra lines you get: * ./foo.py help * ./foo.py help write * ./foo.py read test.txt * ./foo.py read test.txt --debug * ./foo.py write test.txt * ./foo.py write test.txt --debug 
The optparse docs are really clear as is
**First: [CherryPy](http://cherrypy.org/), [Flask](http://flask.pocoo.org/), or [Bottle](http://bottle.paws.de/)** These are little frameworks that will let you write up a simple web application in a single file with only a hundred lines of code or less. Use them until you start to feel like you're missing something, or that your apps are growing into monster files. **Second: [Django](http://djangoproject.com/)** It's more complicated and has some more boiler plate than the first three, but it's there for a reason. Django's emphasis on structure and convention will keep you sane while writing larger applications. It's also extremely popular these days. **Third: [Diesel](http://dieselweb.org/)** It's not as popular as some of the others, but it's worth learning just because it forces you to wrap your head around using generators in an interesting way. Once you understand how it uses yield statements to provide the illusion of blocking while keeping things asynchronous you can make network applications that can handle monstrous numbers of concurrent connections.
Very cool news; now I'm trying wrap my head around MBAs using list comprehension constructs and generators. 
I used Python quite a bit in b-school, among other things.
I think the idea is that financial institutions, all of which have programmers on staff, can now use their programming talent to scrutinize potential investments in a uniform way. Python is a good choice for this, as readability is a strong-point of the language.
"Mandate?" More like &gt;propose. I guess sensationalism is okay if it's for upvotes.
Propose to require
A proposition is not a mandate. This is English for fucks sake.
Followed by the word "most": &gt; We are proposing to require that most ABS issuers file a computer program
As much as I love python, I don't think this is a good idea. Contracts should be written in a DSL, not a general-purpose language. [Why the banks collapsed, and how a paper on Haskell programming can help stop it happening next time](http://paulspontifications.blogspot.com/2008/09/why-banks-collapsed-and-how-paper-on.html): &gt;The solution has to be for big financial companies to reveal their positions to the regulators as formal models of the contracts they have written.
Will it mandate a Python *version* too? What if there's a bug in the interpreter?
It's a proposed new rule. Most likely it will pass and it will be mandated, hence "is to mandate"
That's very interesting. Like requiring them to record their logical thoughts on "paper". Better, to allow someone to run those logical thoughts with different inputs.
I'm reasonably sure a competent python programmer can write an expressive internal DSL with python that would work. I don't see how making it a more obscure language helps any.
It's essential that the contract be accurately transcribed into the program -- if you create a debuggable and testable form of the contract in the form of a program it still has bugs if you didn't translate the contract properly. As such it is essential that the program be readable and accurate. Imperative programming in a simple language is a good way to do that. In this light Haskell seems like a terrible idea. Of course a declarative model would allow you to do things like find boundary conditions, instead of merely doing simulations (which is what this mandate seems to be about). But maybe that's overthinking it for the moment -- having it in the form of an executable program makes translation to a declarative DSL reasonable, and this particular format for an executable program is already well understood while designing a DSL takes a long time (especially in a bureaucratic context).
Simon-Peyton Jones has a good article on creating a DSL for describing and calculating the value of contracts in Haskell: [Composing contracts: an adventure in financial engineering](http://research.microsoft.com/en-us/um/people/simonpj/Papers/financial-contracts/contracts-icfp.htm)
&gt;Most likely it will pass On what basis are you making that statement? I know the Internet is tone-deaf, so I'd like to clarify that I'm not questioning your fundamental character by asking this question, just trying to clarify things.
&gt; As for Java and C-Sharp, there is little point in having open source code if the interpreter is not also open source. Hence, Python's Open-Source interpreter to the rescue. 
Python is too damned elegant for its own good in this case; I'd rather a language where complex maths stood out like an eyesore if we're using it for regulation. I'd go so far as design a DSL that makes run-of-the-mill accounting look like QBasic while derivatives look like Malbolge. Make readability the criteria for legality and a whole lot of the more "exotic" pieces of financial wizardry will go back to the hell that spawned them.
Yes, but that doesn't answer the important question. If there's a bug in the intpreter, then are we saying that the correct agreed on behavior of that filed program is how it behaves with the bug, or how it *should* behave if the bug were fixed?
MBA's don't do that. They do very little algorithm development if any. Every financial analyst I've known that does that level of work comes from engineering, computer science, or mathematics backgrounds. They may have an MBA too...
it would be very similar in sqlalchemy if the post your are replying to CHOSE to use the declarative extension in the orm namespace. But instead they were demonstrating how the query language underneath looks. I'd be curious to see the django orm's answer for straight queries as that would be a more apples to apples comparison. waiting.....
&gt;how often is a serious app migrated to a different DB? migration would be an issue whether you were on the same database engine or different ones assuming the reason to migrate was due to different schemas. And I don't think SA claims to have any sort of built in support for migrating data from one schema to another(regardless of engine) but it does provide a lot of stuff you can use to build the migration routine. 
The IRS ought to publish the tax code that way.
Until someone writes an abstraction layer DSL and a compiler down to the SEC-mandated code. Technical solution to a social problem, etc. 
&gt;i still haven't figured out how to make Authkit work use google, you'll probably find the consensus is don't use it. Turbogears 2(built on top of pylons) uses repoze.who, you should go with that, or write your own, it's not that hard.
What percentage of SEC proposals turn into rules? I have no idea but without that there's no way to even begin approaching the question. 
&gt; I'd like to see more projects realize this and split up their Framework and Library components. You mean like pylons. I agree
Very cool! I updated my code if you want to take a look, http://pastebin.com/C3cw9aKi
At least the bug would be known in a white box, unlike a closed-source interpreter.
You have a point but I can't imagine it coming out quite terse enough to not stand out.
I can actually imagine data being moved to a different DB, for performance or licensing purposes .. but a schema change? Are you serious?
I've been playing around with [E.T.E](http://ete.cgenomics.org/) lately. It seems pretty good.
requirements change, schemas change. Ever work on a real application?
I think you are looking at it the wrong way. It isn't that the complex stuff is made some simple, but instead that the simple stuff is made so complex that nothing stands out as more complex than the rest. (think 2+2 implemented with logarithms, and cubic roots.)
That's what his article was about. But the link was buried deep enough prob better that you link it here.
iknowrite
Seriously? [RTFM](http://www.google.com/). This subject has been discussed a bazillion times.
Don't forget cosmic rays!
Dive into python, hands down.
Milton Friedman suggested that the Fed should be replaced by a computer program that would set interest rates based on various measures of economic activity. That program should be written in Python too. 
I strongly agree.
This is awesome. This is what I wanted when calculating my taxes. Why can't tax law be expressed as a Python program? It would make it easier on all of us. 
I like it. Much easier to use the SQLAlchemy. But I think I'd rather invest in learning the more powerful API.
yup. an appropriate course of action can be decided and taken when found. 
I love python... my fav programming language... but government mandates to use it?
It probably would depend on a particular version of the language spec. There are multiple implementations of the same Python spec (IronPython, Jython, CPython, Unladen Swallow...).
I didn't know Python had a formal spec. That makes things much simpler.
From a quick glance, it looks like you can just include it in your 2.6 apps right now by loading the module. For those of us who can't wait until 2.7 ;) http://argparse.googlecode.com/svn/tags/r11/argparse.py Glad to hear it's going into the standard library though.
Governments mandate these kind of things all the time.
They could add a "Section 3.3.1" to the rules... 
I am not sure you need that many examples.. e.g. you don't have to explain every templating engine as they hopefully have all docs of themselves. Likewise for ORMs etc. It's more showing how to include things. Regarding procuctivity it probably is hard to measure, esp. if you also take the framework fighting into account (maybe also on upgrades). And is it a problem if people create frameworks all the time? I don't think so. It's about experimenting and experimenting is good IMHO :-) (but as I said my approach now is not to build a framework but libraries ;-) ) 
mandate is overdramatic and has an inaccurate connotation, more like "standardize on python" 
Really? Is this the right thing to do, should the SEC really mandate individual languages? And if so, what assurances do we have that python is the right one?
&gt; That works fine in Python 3. No, since print needs parentheses :(
I do like that Python 2.X still evolves in conformance with Python 3. I'm missing a back-port of `nonlocal` but that's basically everything.
&gt; Why can't tax law be expressed as a Python program? Indeed. And why can't Python be used to change diapers? We should also be able to make our furniture out of pure Python. I wish I could eat Python code instead of food. Really, the whole world should consist of nothing but Python. I'm starting to cum just thinking about it.
&gt; I didn't know Python had a formal spec. That's because it doesn't. The closest thing is the Language Reference. In practice, the "spec" is whatever CPython's implementation is.
An example that shows how you take information in a database and display it with a template, using the security system, sounds pretty important to me. The details can be off in documentation that describes other systems, but if you're interested in people using a particular combination, you're going to have to make it convincing, obvious and easy for them. I didn't say it was a problem; you said: &gt; Another point about frameworks (and code in general of course) is &gt; that it might fit at some point in time.. When this is over either you &gt; did the right choices and your framework is developing with new &gt; trends or one maybe should start over. And I think the latter could &gt; be done more often ;-) and I'm saying it seems to be done very often. I do think that frameworks which never gather a user community or even a dedicated base of developers to support it might be problem - how does someone know when it's safe to bet on such a system? 
&gt; That program should be written in Python too. Why?
Ah, true. I guess I just meant that the range part is unchanged. In juliob’s examples of “Python 3 code” he also omitted the parens. 
import Mandate
The [optparse docs](http://docs.python.org/library/optparse.html) seem as simple, and some of the code in this article could be better, like.. if opts.man is None: print "A mandatory option is missing\n" parser.print_help() exit(-1) ..can become: if opts.man is None: parser.error("A mandatory option is missing") 
**Financial crisis - Python powered** See, it's a matter of humour. Could you imagine it being programmed by guys suffering from a Messiah complex? 
What do you mean by straight queries? Things like Article.objects.filter(headline__startswith = 'The') ?
Well, reading the code is not the point. Reading the output is. The goal is to answer the question "what happens to the investment if there is a crash in the price of X?" and get an answer from the software. A black box would work; readable code just makes it more transparent.
I think Charlie Stross suggested this in one of his sci-fi books, Accelerando. Very cool. 
queries not mapped to objects that's what I mean. Is Article of type Queryish or is it more an object that maps to a row that has some sort of meaningful context inside whatever application you are thinking of?
Correct on 2.7. The 3.x version it will be in is 3.2. I think the best argparse feature is the ability to create subcommands, although the handling of positional arguments is pretty nice as well compared to optparse. 
It's even easier than that. You can just use easy_install argparse 
Use `argparse`. Much better.
idiots that have different opinions than other idiots. ;)
I think they're confusing it for the idea that you shouldn't *write* your own web framework because there is probably already one that does what you want
Opster is quite good. Nice and succinct.
not a hundred percent false, you know. take django for example. even though python does not impose a way of doing things, django does. i guess that's what a framework means.
pythonista? gay
**tl;dr:** Python doesn't copy on variable assignment unless you explicitly tell it to.
pro tip: do not use "list" or "dict" as variable names. pro tip2: avoid using any of the names of builtins as names
I keep wanting to call temporary lists "list" but then I realize I can't so I call it "l" :( 
This [proposal](http://www.python.org/dev/peps/pep-3106/) has lead to ["dict views"](http://docs.python.org/py3k/library/stdtypes.html?highlight=view#dictionary-view-objects) in Python3k, which is basically what the OP had in mind. I am not a fan of "views" myself. I think, if anything, Guido should have replaced the iterator versions with these, or at least added viewkeys() viewvalues() viewitems() By changing existing behavior, scripts that expect **values()** to return a new list may break.
Django doesn't really deal with queries that aren't mapped to objects - in Django you define your entire database schema declaratively (by defining Django model classes) and then use those classes to run queries. In practice, I've never found this to be a problem (it does make integrating with existing databases a fair bit more tricky though). Django encourages you to fall back to raw SQL if you're doing something particularly fiddly that the ORM doesn't yet support.
It's pissing me off when person not grasping pointers dare to program.
That's really cool! Do you have a link where we can download it? 
Ya just think about python objects as pointers and there is never a problem. I hate how at least for me that object passing was taught as pass by reference when for the most part it is pass by value whos values happen to be pointers/references.
It's really not finished, but the code is available here. http://github.com/dabe/pysnap/blob/master/pysnap.py I will try to continue by adding for example an end to the game :), score and improve the animations.
Lower-case L isn't the best variable name either (`I` `i` `j` `l` `|` can all look very similar, depending on the font).. `lst` maybe?
That's awesome. I made a game of Asteroids using Pygame just the other day, the first "real" program I've ever done and it's awesome. I've just started looking at C++ and SDL now because I really want to get in to things. Excellent work on this game, although I'm not sure how the game actually works. :P
It's also the first time I really made a game. The rules are quite easy. Each block has 6 levels (from the biggest to finally disappearing). When a block falls, the level of the other blocks below, on the left and on the right is decreased by one. 
Ah, that's awesome. I hope you finish it up nicely and release it as that would be an awesome time-killer to download through the Ubuntu app store.
Excellent, thanks for posting. For the love of Space though, use spaces for tabs! &lt;/toungeincheek&gt;
While I applaud the author's willingness to teach others, I don't think that this piece has anything directly to do with thinking like a Pythonista. Names, bindings and values are universal concepts.
This is one of the advantages of immutability in functional languages. Instead of in-place changes, return a new value.
Seriously? You want them to never try to learn? And also, do you really think pointers to mutable objects is necessarily a part of "programming"? Have you ever encountered functional programming?
Why not use list() explicitly if you want a new list? That way, the exact level of deepness (or shallowness, if you like) is explicit.
Except for "values()" on older Pythons which does perform a shallow copy :-P
I came here to say the same thing
Bottom line: The P^h GIL will have to go rather sooner than later /edit: Thanks; The PIL can stay ;)
that was my point sqla provides so much more than an orm whereas you state django does not. sqla gives you not only an orm but a dsl for building sql statements, which django does not according to you, and you can still drop down into raw sql if you need to. Your stated preference that I replied to you were pointing out essentially that you prefer an orm over a dsl (apples vs. oranges) not why you prefer djangos orm over sqlas orm because the example you were replying to was not using sqla's orm. 
The song playing in the video's background - is [Across the sea by Samantha Shelton](http://amiestreet.com/music/samantha-shelton/are-you-kidding-around/across-the-sea) - just in case someone else felt the urge to listen again too.
It has a really nice flow to it even though I don't really get when blocks 'connect' and shrink..care to explain? :)
&gt; Bottom line: The PIL will have to go rather sooner than later I did not see Python Imaging Library mentioned anywhere in the TFA.
Nice!
Quite easy in fact... Each block has 6 levels (from the biggest to finally disappearing). When a block falls, the level of the other blocks below, on the left and on the right is decreased by one.
&gt;PIL Er, do you mean the GIL?
Which prompted my comment. I am an advocate of "practicality beats purity" (though I strive for purity). I was just teasing him about it because in previous communications he has come across as dogmatic rather than pragmatic on this point. Glad to see he's human, like the rest of us ;-)
That is one urge I did not feel.
Reminded me of [this song](http://www.youtube.com/watch?v=RIoJgYA5YIE).
Looks great, I'm impressed!
Looks great, kudos! I cloned the repo and tried to run the game, but clicking in the window does not do anything. Any suggestions?
First of all congratulations, it looks really fun. I especially loved how the game was synchronized to the song in the video. But what are the challenges when you have these rules? Otherwise it just seems like a game of randomly dropping blocks. Maybe use that size hierarchy to dictate certain rules (only smaller blocks will be affected etc.)
I prefer semantic names, e.g. `ponies`, `catapults`, `sex_toys`, or `octopussies`.
Any word on syntax highlighting for the template language?
Looks awesome nicely done!
Tabs are awesome. They let *me* choose how deeply I want to see the code indented without relying on editor-black-magic. It's an ASCII metacharacter, what's not to love?
I like it :) Can someone compare/recommend prototyping a game with pygame vs XNA? I haven't used either, but I'd like to use something for fast prototyping gameplay concepts - with an emphasis on fast because I want to see the concept gameplay before I get bored with implementation details, so I can iterate further on the gameplay itself. Also, xbox360 controller support is sort of a must for me.
it's the mixture of tabs and spaces that are evil. 
Funny that this has more upvotes than any dropzap post I've seen on reddit
Why does this guy use CPython, and not a more realtime/thread happy/GIL-less implementation like Stackless Python? Hell, even Jython or IronPython are valid options.
Both provide trivial means of accessing joypads/controllers. XNA is much more complete than pygame, which means you will end up implementing some stuff yourself if you use pygame instead of XNA, but on the other side of it for the most basic things pygame lets you get a barebones app out with fewer lines than XNA. As far as I know, no "real" games are made using pygame, it really is more of a prototyping-type thing, and I believe that they themselves state that pygame should not be used to make games. Really, if more comes down to if you want to use Python or C#; pygame aligns with the Python style of programming, and in a way is better when you think of your games as scripts. XNA is more "enterprisey", as is C# itself, so if you are looking to get into that sort of scene you should just stick with that.
Have a good hard look at each of your expressions. You might also want to make the precedence in your complex expressions explicit by using parentheses so it is easier to read your code and be sure it is doing what you want. Get out a piece of graph paper and walk through what you want your code to do while you pretend to be the turtle. 
Does the `syncdb` action do `manage.py syncdb --migrate` if you have South installed?
This stuff is really cool! I wish there was a Netbeans version.
I don't know the details of your drawCircle function, but I think the problem must be in: &gt; myTurtle.goto(x, spacing) Here, you're using the value of x you stored, but not the value of y. You recognized that the point you go to has to depend on x, which is why you didn't write &gt; myTurtle.goto(0, spacing) But it clearly has to depend on y too. So instead of just "spacing" you need something in terms of y.
&gt; Really, if more comes down to if you want to use Python or C# I feared that :) I use python from here and there in Maya and I know a bit of C# - I really have no preference at all, they are just tools. I guess the only way to find out is to test drive both and see which I like more + shop around for docs and resources (the one with more wins). Thanks.
Stackless doesn't do away with the GIL, and neither Jython nor IronPython have comparably significant mindshare. (Not to mention Jython's uncertain status and IronPython's dependence on Mono, which is a dealbreaker for some.)
That's exactly the problem I can't figure out. Is my whole method incorrect? Everything is working fine except for movement on the y-axis. I don't know how to do this any other way. 
Wait a sec, it looks like your drawCircle already draws a circle centered on the given point. I figured you were going to (x, spacing) because you were starting from the edge of the circle instead of the center. If you just want to draw a number of circles with the same center, shouldn't you just go to (x, y) every time? This would be even easier to do if you made your code cleaner. Your drawCircle() has what's called a "side effect" right now, because it leaves the turtle in a different place than it started. If you ended drawCircle by picking up the pen, moving back to the center of the circle, and putting down the pen again, then drawing concentric circles would be extremely easy.
Okay, so then I have this: What happens, is that the circle starts drawing in the correct position (one circle), then it jumps up to y-spacing and finishes drawing. If I get rid of spacing, then the circles won't draw.
&gt; The only organized comparisons I've seen between them are based mostly on measuring speed of rendering. Huh? I have never said to myself, "Wow, I'm wasting so much time because these templating engines aren't rendering fast enough. If only they would finish in 0.4 seconds each instead of 0.6!" This is true for all small business or personal sites that are infrequently used. All of those other speed-oriented benchmarks are for folks building sites that are deployed to several load-balanced servers and can save money by reducing CPU utilization.
Oops. Didn't notice someone posted about this before.
In `concentric`, you should now **not** do the goto bit after calling `drawCircle`, because `drawCircle` already is responsible for returning you to the center. (Not to mention, 'spacing' is a totally illogical value to use for the y-position to return to.) Also, you just pass a turtle and a radius to `drawCircle`, and should not be thinking about x-position or y-position at all for that. Your radius calculation is wrong; it should be something like `radius * spacing`. Oh, and it's spelled "amount". :)
Thank you so much for your help! It works! Also, I needed to set the range to start at one, and compensate for Start-1. I don't know what I was thinking with the coordinate based solution. You da man!
Yea, I'm getting pygame events coming in but nothing is happening in the actual game. 
BTW, you can get x and y values at the same time like x, y = myTurtle.position() and you might consider wrapping up "move to (dx, dy) relative to the current position" in a helper function. :)
Like this? x, y = myTurtle.position() ny = y + radius myTurtle.up() myTurtle.goto(x,ny) myTurtle.down() 
Sure, that works. Although I wouldn't bother assigning a separate variable for ny, but instead just write the 'y + radius' calculation directly inline.
Ah, sorry. That's what I thought you meant by a helper function. Super newbie over here. 
As I said in my original post, "I don't know what the equivalent to the above would be using something like Elixir - hopefully someone else can post that" - I'd be very interested in seeing what the equivalent would look like using one of the SQLAlchemy ORM layers.
No, I want them to learn programming of course. My point is that this topic is _below_ programming, and more about learning programming. Imagine post like this: &gt; How to think like a Programmista &gt; &gt; Hey guys! Recently I discovered amazing thing: if you write &gt; a = b &gt; b = a &gt; you won't actually swap values of these variables, and here is why... . &gt; Have you ever encountered functional programming? Yes, and I believe you can't hide in high-level abstractions forever. For instance, lists in LISP are actually single-linked lists, and cons is actually struct Cons { struct Const *car, *cdr; }; If you think of lisp structures as some beautiful algebraic data types, you fail the first moment you encounter cyclic list. Similar, but different problem for Haskell: all category theory and denotational semantics can not explain why suddenly after small modification you program takes HUGE amount of memory. You have to dig into exact order of evaluation, implementation of thunks, etc. and, of course, pointers are all over there!
I thought psyco had been abandoned in favour of pypy. Glad to see that isn't the case, as pypy still seems to be pretty far from production ready.
I think posts about learning programming are generally considered OK in r/programming. By the way, the notion you are referring to is "references" or "indirection", and not "pointers". Pointers are a very specific form of references (one that can be referred to, can usually be manipulated as a value, etc). And with that I agree, you have to understand/learn about references and indirection to do any programming anywhere. The Python text, by the way, is about unexpected behavior -- as there's a shallow-copy going on where a newbie would either expect no copy at all or a deep copy.
Let me know what you guys think? ;)
If that was Jinja2 that would be a oneliner: from hashlib import md5 jinja_env.filters['gravatar'] = lambda x, size=80: \\ 'http://www.gravatar.com/avatar/%s?d=identicon&amp;s=%d' % \\ (md5(x.strip().lower().encode('utf-8')).hexdigest(), size) Sorry for the shameless plug, but I'm quite amazed that there is a project on github for basically a one liner :)
How do you play it? What are the rules?
&gt; Sorry for the shameless plug, but I'm quite amazed that there is a project on github for basically a one liner :) Well, it's on bitbucket ;) And the author could just as easily have done it as a Django template filter, which would similarly be a one-liner :)
Well yes, but then it would only accept one argument :)
Psyco *was* abandoned (to maintenance mode IIRC), but the beauty of open source is anyone can take abandoned things up again.
Once again...CCP games is just...awesome....
http://elixir.ematia.de/trac/wiki/TutorialDivingIn :) 
ew ur gross!
Correct. The project is cool. I still need to figure out it's rules, but the music. Ben, wth man !
code, ideas etc
You also need the headers for openssl (not just the openssl package), or you won't be able to compile against it. This is libssl-dev on Ubuntu and openssl-devel on CentOS (and probably fedora). Install these than redo the compile/install of Python. Side note, after you do _./configure_ and _make_ for Python it will give you a listing of modules that weren't built. You should check these before doing test/install to make sure there isn't anything left out that you think you'll need.
According to Wikipedia: &gt; PyPy is a followup to the Psyco project PyPy has displayed relatively unimpressive performance so far, but I was under the impression that speed was definitely one of the original aims. In fact, speed is the _first_ bulletpoint in the list of pypy advantages on the pypy homepage.
Thank you very much. I felt like a FFFFFUUUUU comic protagonist after the downvote, but you make my week.
Did you see the original author's response to the same basic idea in the comments?
Yes, this really all just turns into a case for using inline template elements and then caching all of them. This way, you can use whatever underlying engine you want and still deliver the fastest possible speeds.
This is grate news
I quote from the links section of the [psyco homepage](http://psyco.sourceforge.net/links.html): &gt; The direct sequel of Psyco is PyPy «Direct sequel» and «followup project» are close enough in meaning that I'm willing to state that I think Wikipedia is in the clear, and maybe the psyco maintainers should update their own homepage...
You mean you don't think pypy will bear fruit? If that is what you mean, then I agree, it seems to me that the pypy developers have bitten of more than anybody could hope to chew. Would be awesome if I'm wrong, though.
given their current progress you are quite wrong
&gt;This is absolutely the right way to go particularly when coupled with the other proposal that detailed asset level data be also provided in machine readable (XML) format. ... &gt;Python &gt;XML FFFFFFFUUUUUUUUUUUU-
Coincidentally, there *is* a way to back one-liners with a repository on github: [gist](http://gist.github.com/).
This seems like an exercise in how not to present code on a webpage. The copy and paste from IPython makes for terrible reading
Why would this be an app and not just a library?
Supports Python 3.x!
Template performance can add up dramatically in real-world applications. Zope Page Templates account for the lion's share of Plone's runtime expense, for instance. I've heard several similar anecdotes with Django templates, Kid, and Genshi.
First of all congratulations. Is there a 3.x compliant driver for each supported database? If not, which databases work with SQLAlchemy + Python 3.x?
&gt; First of all congratulations. Indeed, congratulations to the developers (I'm not one of them :)). &gt; If not, which databases work with SQLAlchemy + Python 3.x? [Not too many](http://www.sqlalchemy.org/docs/dbengine.html?highlight=engines#supported-databases), for now.
If I could vote this up twice, I would.
Can't thank zzzeek and everyone who provided patches enough. SQLAlchemy is the best since sliced bread.
Hopefully SQLAlchemy's support for 3.x will encourage the maintainers of the drivers to port them to 3.x.
&gt; the data is being sent with fairly high throughput. Please qualify "fairly high" with an actual metric. It will help to understand the nature of the problem.
&gt; iTunes (on the Mac) uses the socket at /var/run/usbmuxd to communicate with iPhones and iPod touches that are currently plugged in. Is there another communications channel (ioctl(), e.g.) that might be used for some sort of critical signaling? Have you tried to review the traffic and see if it's different at some point?
Well, what I ultimately want is a custom template tag so I can do something like {% gravatar_url 'joe@example.com' %} in a Django template. And from the documentations that I read, the way to do that is to host the templatetags/ code in an app. That way, it is more reusable.
Now, hopefully, the GeoAlchemy guys will put 0.2 up on PyPI 
Congrats. The SQLAlchemy architecture has definitely been a source of inspiration as I work on the Django ORM.
cx_Oracle is one
Here is the .ui file (created from Qt Designer 4): &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;ui version="4.0"&gt; &lt;class&gt;TableWindow&lt;/class&gt; &lt;widget class="QWidget" name="TableWindow"&gt; &lt;property name="geometry"&gt; &lt;rect&gt; &lt;x&gt;0&lt;/x&gt; &lt;y&gt;0&lt;/y&gt; &lt;width&gt;586&lt;/width&gt; &lt;height&gt;383&lt;/height&gt; &lt;/rect&gt; &lt;/property&gt; &lt;property name="sizePolicy"&gt; &lt;sizepolicy hsizetype="Expanding" vsizetype="Expanding"&gt; &lt;horstretch&gt;0&lt;/horstretch&gt; &lt;verstretch&gt;0&lt;/verstretch&gt; &lt;/sizepolicy&gt; &lt;/property&gt; &lt;property name="windowTitle"&gt; &lt;string/&gt; &lt;/property&gt; &lt;layout class="QGridLayout" name="gridLayout"&gt; &lt;item row="0" column="0"&gt; &lt;widget class="QTableWidget" name="tableWidget"/&gt; &lt;/item&gt; &lt;item row="1" column="0"&gt; &lt;widget class="QPushButton" name="btnSave"&gt; &lt;property name="text"&gt; &lt;string&gt;Save to File&lt;/string&gt; &lt;/property&gt; &lt;/widget&gt; &lt;/item&gt; &lt;/layout&gt; &lt;/widget&gt; &lt;resources/&gt; &lt;connections/&gt; &lt;/ui&gt; 
Here is the Python code for the window (generated automatically from the .ui file using pyuic4): # -*- coding: utf-8 -*- # Form implementation generated from reading ui file 'ui_table_window.ui' # # Created: Mon Apr 19 23:47:43 2010 # by: PyQt4 UI code generator 4.6 # # WARNING! All changes made in this file will be lost! from PyQt4 import QtCore, QtGui class Ui_TableWindow(object): def setupUi(self, TableWindow): TableWindow.setObjectName("TableWindow") TableWindow.resize(586, 383) sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding) sizePolicy.setHorizontalStretch(0) sizePolicy.setVerticalStretch(0) sizePolicy.setHeightForWidth(TableWindow.sizePolicy().hasHeightForWidth()) TableWindow.setSizePolicy(sizePolicy) self.gridLayout = QtGui.QGridLayout(TableWindow) self.gridLayout.setObjectName("gridLayout") self.tableWidget = QtGui.QTableWidget(TableWindow) self.tableWidget.setObjectName("tableWidget") self.tableWidget.setColumnCount(0) self.tableWidget.setRowCount(0) self.gridLayout.addWidget(self.tableWidget, 0, 0, 1, 1) self.btnSave = QtGui.QPushButton(TableWindow) self.btnSave.setObjectName("btnSave") self.gridLayout.addWidget(self.btnSave, 1, 0, 1, 1) self.retranslateUi(TableWindow) QtCore.QMetaObject.connectSlotsByName(TableWindow) def retranslateUi(self, TableWindow): self.btnSave.setText(QtGui.QApplication.translate("TableWindow", "Save to File", None, QtGui.QApplication.UnicodeUTF8)) 
If you don't get a response here, maybe try Stack Overflow.
I thought SQLAlchemy now has a box art.
Sometimes, if you're writing a generic function to operate on lists, "lst" or "list_" *is* the most meaningful name you can give that particular variable.
If "proficient" means "able to read and write idiomatic Python," then you're doomed. That's a skill you'll only acquire after weeks and months of reading and writing code. If it means "able to be productive," then you've got a chance. I wish you luck, and hope (for your sake) it's the second definition rather than the first! P.S. Another +1 for diveintopython.org . 
For the sake of learning, i would avoide frameworks all together. Just start with good old WSGI. Once you are comfertable, i would try web.py (light, cute, awsome), or django (TOO powerful) 
Following the trend of marketing, I tend to go with names like: mylist mystr mydict etc.
I tried running your code as you pasted it here, and it works just fine. It's probably failing because you're trying to add layout to a MainWindow, and that's something you don't do.
Just for reference, here's the [code](http://pastebin.com/QJptx1c7) to run you example.
&gt; It's probably failing because you're trying to add layout to a MainWindow, and that's something you don't do. I gathered that from some of my other searching as well. That certainly would explain the problem. The irritating thing is that this code was generated directly by Qt Designer 4 and pyuic4. All I did was go to the Form properties and select "Lay out in a Grid", which (according to several tutorials and forum posts I've found online) is exactly the way you're supposed to do it. Does this mean that Designer and/or pyuic is generating bad code? If so, how do I get it to do the right thing? I really don't want to have to fix this by hand, because then anytime I change anything in the form it will overwrite my fix.
&gt; The irritating thing is that this code was generated directly by Qt Designer 4. All I did was go to the Form properties and select "Lay out in a Grid", which (according to several tutorials and forum posts I've found online) is exactly the way you're supposed to do it. What you did is make a generic Widget, instead you should have made a QMainWindow (File -&gt; New -&gt; MainWindow). Everything else like placing widgets, selecting layouts, etc..., remains the same. &gt; Does this mean that Designer is generating bad code? If so, how do I get it to do the right thing? No, no, Designer is working just fine ;), and you should continue to use it. For simple applications just create a MainWindow (you get some other benefits over just using QWidget, like a menu bar, status bar, etc...). For more complex applications you break it into multiple widgets that you design separately. Of course, you'll have one QMainWindow, and then probably a bunch of QWidgets that you embed on your MainWindow (you do that manually, it's not that complicated). If you have many .ui files it helps to separate them all into separate directory and use Make to automate building Python code from .ui files. &gt; I really don't want to have to fix this by hand, because then anytime I use Designer to change anything in the form it will overwrite my fix. Never mess with the generated code by hand, instead just inherit that code and do your tweaking in a different file. That way you can tweak your design in Designer and make additional modifications in your files that Designer won't touch. HTH...
&gt; What you did is make a generic Widget, instead you should have made a QMainWindow (File -&gt; New -&gt; MainWindow). Thank you! That was the missing piece. I think what threw me off was the terminology. Because this is not the "Main Window" in the application (i.e., it's a secondary window loaded by the main window) I just assumed that I wasn't supposed to create this as a MainWindow. But now it works. Thank you, thank you, thank you. You have saved what is left of my hair.
&gt; I think what threw me off was the terminology. Because this is not the "Main Window" in the application (i.e., it's a secondary window loaded by the main window) I just assumed that I wasn't supposed to create this as a MainWindow. Qt is quite flexible in that pretty much anything (QWidget, QDialog, etc...) can be a "main window", that is, the only window that you see on your screen. That's great if you just want to quickly show something on the screen, but when doing more complex things you should have a QMainWindow as your main window, single QWidget as a central widget of the main window, and then other widgets inside the central widget. You could do it differently, but that seems to be the best practice, anyway.
Hey, I didn't even know about your python software! I haven't seen it on PyPi (a search for pkaudio doesn't return relevant results ). I'm very interested in audio development, + I love python. Looks like you have a bunch of cool stuff there.. I'll have to check that out. Ed: Ah, actually it does show some of the stuff on PyPi, but I never noticed it.
How neat. Is there a similar tutorial for Glade/GTK2? I'm writing a music player at the moment.
This is exactly the reason I've been using Genshi and not anything else. Glad to see someone finally recognize the little templating engine that can actually report errors :)
What happens when the semantics of Python are changed in a new version of the interpreter...
I've always been partial to [JSON Template](http://json-template.googlecode.com/svn/trunk/doc/Introducing-JSON-Template.html), it lines up well with how my brain works. 
did not know that. fanks.
Here, here! I'm still missing my "I want to write a big application in a week and have never programmed before - will one of you tell me the magic secret?" Or the "Hey, some random math crap just popped into my head. I demand you explain to me why I'm right or wrong."
Well shouldn't you start by asking Python or Ruby? And shouldn't you have something potentially inflammatory in your post like 'I hear that Django is too coupled' or 'I hear that Pylons is terribly documented' or 'I hear that web2py uses exec and isn't Pythonic' or 'I hear real coders roll their own with werkzeug'? I mean, you're not even trying.
* http://feeds2.feedburner.com/UnifiedPythonPlanet * http://pypi.python.org/pypi?:action=rss
http://www.reddit.com/r/Python/
This link, Sir, is correct.
One of my [favourites](http://www.flickr.com/photos/spinjenny/4395184927/)
http://planet.python.org Occasionally comp.lang.python
One excellent module to use for real-time streaming in Python is the tweetstream module. I used it for project, and it seamlessly integrated with my other code and was incredibly easy to use. 
* http://code.activestate.com/recipes/langs/python/ * http://planet.python.org/ * http://advocacy.python.org/podcasts/ * http://www.reddit.com/r/Python/ * http://pycon.blogspot.com/ * http://www.europython.eu/ * http://blog.randell.ph/tag/python/
http://rgruet.free.fr/PQR26/PQR2.6.html
http://docs.python.org/py3k/ http://docs.python.org/ Edit: Ah, you're looking for blogs. Other people have mentioned the ones I use. I have nothing to add. :(
http://delicious.com/manatlan/python
* [Dive into Python](http://diveintopython3.org/) * [Python Debugging Techniques](http://aymanh.com/python-debugging-techniques)
http://delicious.com/timj.cu/python
Doug Hellmann's [Python Module of the Week](http://www.doughellmann.com/PyMOTW/) isn't *news* per se, but definitely stuff-about-python-worth-reading.
http://delicious.com/oxygenium/python
The very best source of regular news about the Python language and community is the Planet Python blog aggregator: http://planet.python.org/ 
i am gonna book mark this post :D.
http://neopythonic.blogspot.com/ http://python-history.blogspot.com/
Why downvote this guy? Reddit are you off your chairs?
http://delicious.com/jingleman/python
How about if I'm just not aware of anything that needs to be contributed?
I've never used PyCurl, but the API doesn't look very Pythonic: self.conn = pycurl.Curl() self.conn.setopt(pycurl.USERPWD, "%s:%s" % (USER, PASS)) 
Because saying "I agree with this" does not contribute to the discussion. That's what the up-arrow is for.
coding gui is just as wrong as generating the code from xml the correct way is to keep the ui in xml, and write code that connects to the loaded stuff
Oh, come on, guys, it was a joke. At least mildly amusing.
I'd be happy to help out with the documentation if there was a publicly editable wiki or something.
Python's documentation isn't a wiki, but these might be of interest to you: http://python.org/dev/doc http://docs.python.org/dev/documenting/index.html The documentation is written using reStructuredText, which is a fairly easy to use markup. For example, [here is the subprocess documentation](http://svn.python.org/view/python/trunk/Doc/library/subprocess.rst?view=markup).
and in this case, pythonic means?
Right, but I think people would be more willing to contribute if it was.
That was a thought of mine in the past, but after taking a deeper look, there's a lot of work to be done. If you are interested, checkout the [contributing to Python](http://www.python.org/dev/contributing) page. The [bug tracker](http://bugs.python.org) is also pretty active, and obviously the source of bugs needing some love. There's plenty of Python, C, and documentation bugs or feature requests out there.
Intuitive, "clean".
That's probably true. I think that would be an interesting addition to [Sphinx](http://sphinx.pocoo.org), although I can't say how hard it would be to implement, or if it would actually happen. It would be cool to have wiki-like pages which generate a diff for review just like any other code change. Are there other languages which do this?
Actually, I *don't* consider it very helpful to post /r/python as an answer to the question for Python bookmarks here in /r/python. Maybe I should have added some kind of irony tag.
Indeed, but I do things as they scratch itches. So far, everything I've needed has been exactly as I need it (or at least good enough).
I tried. My patch got smacked down. Oh well. http://bugs.python.org/issue1818#msg82744
That was the theme of a comment or two on the original link. For most people, Python "just works", which is awesome. Let's say you did find something that wasn't as you needed it. With Python setup how it is, would you be comfortable submitting a bug report or proposing a patch? There have been a number of times where people have submitted issues to mailing lists, partly because they don't know even about the tracker, or because it's another site to sign up for, etc.
I could probably find my way around and make the bug submission. If it's an issue I am particularly interested in, I might even dig in to how to make submissions.
Not contributing because the docs aren't in a wiki would be reasonable if the docs weren't maintained via Sphinx. But Sphinx absolutely rules; nothing even comes close to as good of a system for documentation. A wiki would be archaic in comparison.
Don't fix something that's not broken
&gt; Don’t want to fight/argue with the “but this is the way we’ve always done it” people (perception issue) I think this is a big one. And possibly more so with Python than other open projects. It's part of Python's central design philosophy that there should "only be one way to do something". The implicit assumption you often see on lists is that the current way is the one true way and all other ways are inferior. 
the correct way is to store the ui as xml, then connect signals to the ui once its loaded by a loader 
I'm too busy using it.
The barrier of having to do an SVN checkout and having to build the docs locally is probably one most don't care to deal with. I love Sphinx and find the whole process easy to work with, but I've done it for a while now. Someone noticing that function foo takes two parameters instead of one isn't going to want to checkout, learn Sphinx, build the docs, check the output, then submit a bug and a patch. Even for something like that, I'm sure plenty of people think "oh well this is obvious, someone else will catch it". As far fetched as it may be, something like a WYSIWG Sphinx editor would definitely ease the issue I mentioned. However, I don't know how common it is that people get put off by doc fixes, so I can't say if it's worth the effort to do something like that.
I don't consider myself a contributor to wikipedia, but I'll gladly pause and remove dead links in the sources if I find them, or clean up a sentence that's poor. The reason I can do this is because all I had to do was register and now it's just click-type-click done.
[Here](http://bitbucket.org/runeh/tweetstream/src/) is the home page. I actually used tweetstream to create [this](http://queshuns.com)
Building UIs from XML works in both Gtk and Qt. I have no idea what this guy was doing.
This is why I just don't bother contributing to large open source projects in general beyond bug reports. Why spend a huge amount of time and effort when you not only get no pay, but no certainty that the stuff you spent weeks on will even get in?
Are small open source projects better about this?
I don't think there are any projects that will give you certainty up front that work you'll do in the future will end up in the product, Python or not.
If I had an idea that was as good as this patch, I think I'd try it again. This patch was maybe 3 hours of effort for a somewhat experienced software developer (~4 years in industry at the time). This included checking the python source code out of CVS, writing the unittest, etc. If I cared a lot about this particular change, I could certainly just maintain a separate library.
Indeed, and certainly, the sexier projects will tend to be harder to get patches into, since they have a higher quality bar.
I submitted a "patch" to fix sample code in PEP 3101 and they updated it and I felt awesome until I realized I'm still unemployed. Why haven't I submitted another trivial PEP patch and unit test or patches to other open source projects? Because, according to the Dunning–Kruger effect, I am smarter for not bringing anything up. Except I'm stupider for not asking a question that might teach me something. Suggestions: * improve the quick search in the downloadable docs (example: in 2.6 when I search for "continue statement" the first result is "Extending Python with C or C++") * bless a web framework / CMS (or have a site to recommend web frameworks/modules/packages depending on my intended project, experience, and flexibility would have been and would still be helpful) * A chat bot on python.org to log and answer questions and pass them on to the relevant projects. Submitting reports, etc. is like getting up to change the channel, but if people think they'll get help they might give it a try. The bot will be a python dressed as a knight who says ni wearing a headset. If it doesn't know the answer, it will go "hisssss" or something * I also must have the giant flashing text flowchart from the OP edit: metaphor != simile tl;dr lazy like a tired simile 
FWIW someone was talking about a sphinx extension that makes it "wiki-like" except your edits don't immediately go live, they automatically get turned into bugs in the tracker, with diffs automatically generated. Do you think that type of thing helps, or does the "immediate satisfaction" matter too much?
That's exactly what i'm doing. I saved the glade file in gtkbuilder format and made a dictionary for handlers to class methods in my code. But what I was getting at in the article is there's nothing that sketches up skeleton code based on just the xml. But in the end, it's almost useless to do it that way anyway.
If you're using vimperator (firefox plugin to make firefox behave like G/Vi/m), you can use a Google I'm Feeling Lucky bookmark search to automatically get straight to the relevant python library documentation page (that is, you don't need to click through a search manually, or click through the python library documentation index). For example, here's what I did for Python 3.1: :bmark http://www.google.com/search?btnI=I%27m+Feeling+Lucky&amp;as_sitesearch=http%3A%2F%2Fdocs.python.org%2F3.1&amp;q=%s -title "Python 3.1 Documentation" -keyword=py3doc "Official" python version (currently 2.6.5): :bmark http://www.google.com/search?btnI=I%27m+Feeling+Lucky&amp;as_sitesearch=http%3A%2F%2Fdocs.python.org&amp;q=%s -title "Python Documentation" -keyword=pydoc Now you've bookmarked a google search for python documentation! To go to the doc page for a particular module in python 3.1 (I'll use the "collections" module as an example), all you do is :e py3doc collections or for python "official": :e pydoc collections The :e portion is "open" (replace with :tabopen to open in a new tab, hotkey is "t"), the "pydoc"/"py3doc" triggers your keyword as set in the bmark command, and the "collections" is the substitution denoted by the &amp;q=\%s portion of the bmarks. I've never used them, but I'm sure vrome/viminum (chrome) and vimperopera (opera); the trick is mainly to do with a custom google search and a simple wildcard substitution rather than vimperator magic (it doesn't work on vanilla versions of aforementioned browsers because there's no capacity to enter text after clicking on a bookmark, AFAIK). PS. This trick works with any google-able website; technically it's more a vimperator trick than it is a python trick - but it's so useful (to me, anyway) that I thought I'd share.
I believe this is the first stable release of the 1.4 branch since 1.4.0 was pulled due to compatibility issues. FYI you can get optimized Windows x64 builds here: http://www.lfd.uci.edu/~gohlke/pythonlibs/
Because I don't effing feel like it. I'm lazy. I'm too busy. I have better things to do. Nobody will use what I contribute. Why? It's none of your business.
The correct choice depends on your context.
I've posted this link here tons of times: http://www.lfd.uci.edu/~gohlke/pythonlibs/ It's the only place that offers a well maintained collection of **64 bit Windows binaries** of most major Python libraries.
I disagree. Wiki docs are generally fugly, badly maintained, with terrible version control and with dismal and unreliable edition tools. And I never manage to know which minor wikiwiki subsyntax works. Not to mention the need to create one more account on some random website. Sphinx doc is easier to read (in raw source) and preview locally, I can use my own source and work offline, ray is well documented and pretty simple, and pushing the patch upstream is as simple as opening a bug with a patch attached or proposing a branch merge. Projects using sphinx for doc also plain and simply seem to *care* more, which ensures a sounder basis for your contributions instead of a seemingly unfixable mess. 
Does Sphinx support online editing, and revision control?
It does not support online editing, and as it's part of the project sources it is revision controlled via a separate (and sane) tool.
Online editing is the most important feature I think, since it makes it easy for anyone to jump in and make quick edits.
&gt; Online editing is the most important feature I think I extremely strongly disagree, for code project documentation. &gt; since it makes it easy for anyone to jump in and make quick edits. Not something I've seen happen often on python projects. In my experience, Sphinx documentations are pretty much always higher quality and more up to date than wiki documentations. And personally, as I stated above, I'll take Sphinx over wiki any day of the week for tech doc. All my documentation contributions so far have been to projects using Sphinx. And due to being bundled, packaged and versioned with the source it documents, Sphinx has a slew of other advantages.
Python needs to mirror's PHPs documentation functionality as much as possible. The search, the indexes, the comments and sample code.
http://delicious.com/voltagex/python
Sometime in June Twitter will [stop allowing](http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c2c4963061422f28#) HTTP authentication. I may be missing something, but I don't think this module supports OAuth (yet anyway).
Is support for python3 ready yet?
I think Python lacks a good phpBB alternative. I've been meaning to work on one when I get more time on my plate.
Have you tried encoding the string as a unicode string first? Like so: user_string = user_string.encode('utf-8') It's the only thing I can think of at the moment. Sorry I'm not much help, it's been a looong day.
It depends.
most of the math stuff, rpy, networkx, matplotlib, numpy, pyephem, etc .. is still strongly linked to 2.x .. i think 3.0 support will come eventually 
I'd recommend WTForms. Similar design to Django forms, very easy to write your own validators, does form-object binding. http://wtforms.simplecodes.com/
http://www.google.com/search?q=python+unicode+punctuation+marks&amp;ie=utf-8&amp;oe=utf-8 First result points to this thread: http://coding.derkeiler.com/Archive/Python/comp.lang.python/2008-11/threads.html#01616
we just wrote pygtkhelpers for dealing with the skeleton details write a class with handlers, declare its ui file, done
What do you mean by "unicode punctuation"? Just stuff like 。．、？ Or do you want to detect the normal punctuation in a unicode string? The first case is hopeless, because different languages have different standards for what counts as punctuation. At best, you can detect punctuation for the languages you know how to handle. The second case is just trivial in Python 3. Just make sure the bytes become strings properly in the first place and it should solve itself. 
In Python 3, what you want to do is user_string = open(filename, encoding="utf-8").read()
Thanks. I know how to open a file in utf8 mode and how to read a string in utf8 mode. The problem is detecting punctuation marks apart from the ones that appear in the ASCII table.
&gt; different languages have different standards for what counts as punctuation Those are exactly the ones that I would like to detect. I want to know if there's a function in Python 3 that can do that automatically, just like it does with *string.punctuation*. That function works fine, but only detects ASCII punctuation marks.
Thanks! I'll take a look on those results :) Edit: I found this. Maybe I can use it: &gt; You can generate them automatically from the unicodedata module: check whether unicodedata.category(c) starts with "P".
Never too comfortable with submitting my own links but I think it'll be valuable to people. 
Maybe the lesson is that project should try to make sure submitters of rejected first patches are signed up to the dev mailing list/lurking in dev irc etc to try and stop their interest from fading.
Projects trying to get commiters might give more personal help and guidance to potential commiters so that even if they don't accept all of the patch straight away, they'll incorporate something of it at some point.
WRT web frameworks, Guido said he liked Django. I think anything more would be inappropriate given python is a general purpose language.
looks like code I've seen all over the place.... I can read it 
There's definitely room for friendlier and more poweful (e.g. JSON-aware) validation in Python but does it really belong with CouchDB? Perhaps your title is misleading; what you're really experimenting with is a new framework style, right?
Why bulgarian?
First of all -- many happy birthdays to you on this glorious cakeday! :) In many ways this is a framework, that's true. But I dunno. I've had some trouble using CouchDB. The thing feels like much of the code should reside in the "C" part of the "MVC" and there's really not much left in the "M" part. And once you mentally move CouchDB to the "C" part, then it makes a lot of sense to marry it with validation. I may be completely wrong here. Would not be the first time. But I think that as we start using object databases like CouchDB more and more, we'll be seeing more "frameworks" ("libraries"?) which seek to integrate the database with the validation bits. After all, if your database becomes essentially equal to a dictionary object, then there's no point in putting a barrier between it and the controller. But that's just me and my own needs. Yours are probably different.
I agree that sample code is lacking. Most modules do contain a small example, but I think this is an area that could use some expanding. Doug Hellman's PyMOTW blog does a pretty good job with examples, and I recommend his site if you are looking for good ones. If the Python docs could mirror something like that, I think they'd be better off. As for the search/index stuff for PHP, I'll take a look.
Probably :-) But maybe you have a point. TBH I miss the model-centric validation of Rails, and Pylons hasn't quite sorted validation out yet (I've contributed proposals; i know it's not trivial)...
This does not seem to be a Java vs. Python performance comparison. It checks the latency of a minimal hello world type application in various AppEngine languages and concludes that Groovy is an order of magnitude slower than all the other languages. This strongly implies that the Groovy app is recompiled on every single reload and the other apps aren't. But it says nothing about the actual performance of the other languages, since the programs are so small that language performance is drowned out by other factors like network latency and plain old random noise.
omg, use a different language. If you need so much type checks that it's faster/easier for you to figure out a shortcut for enforcing types then you probably use Python not the way it's designed to.
I've been using this: op () { python -c "import $1; from os.path import split; print split($1.__file__)[0]" | xargs open } (I have open aliased to emacs on non-Mac unixes.) 
[isinstance() considered harmful](http://www.canonical.org/~kragen/isinstance/)
I use a similar shell script to quickly access docstrings and module documentation. phelp () { case $# in 1) python -c "import ${1};help(${1})";; 2) python -c "from ${1} import ${2};help(${2})";; *) echo "Usage: phelp module [object]";; esac } } 
And there's always %edit in ipython... Of course, this bash function is a bit different as it just cd's to the directory of the source code.
I need certain number of parameters to be of a fixed type. If you are a python programmer, you must at some point perform type check for sanity. I rather have sanity check at decorator instead of function body. 
I got an assignment in my cryptography class to decipher an encrypted message in bulgarian. Also because the bulgarian alphabet can only be processed with unicode, there's no other way.
Could you declare your decorator with kwargs and use it like so: @typeCheck(a=int, b=double, c=string, d=list) ? Quick knockup that seems to work but probably has lots of broken edge cases: http://codepad.org/ACiEs1wR You can allow several types for a specific argument also! edit: new version that's a little more 'Pythonic': http://codepad.org/9l1dJVAC
The implementation of this is on some python recipe cite. I want the other interface because I usually need to check a single type to multiple parameters. 
omg rofl wtf python is so dynamic!! lol jk &lt;3&lt;3
Nice ascii art.
Have you looked at something like a json validator? CouchDB is nice, but it would be better to support a wide range of backends, then bring it through a JSON/Dict validator (http://code.google.com/p/jsonvalidator/ perhaps). Perhaps, a sort of NoSQL SQLAlchemy type solution would be a good place to start. Just thinking out loud.
Gotcha? It's the first Note on the [multiprocessing docs page](http://docs.python.org/library/multiprocessing.html) and also in the [multiprocessing programming guidelines](http://docs.python.org/library/multiprocessing.html#multiprocessing-programming). But yeah, RTFM is so XX century.
It would be nice if posts like this linked to the release notes or some release announcement. There's not much info to be gleaned from seeing the packages on SourceForge.
Because it is fun? And, working on open-source is a great way to improve your programming skills. Even if your patches are rejected, you still learn about the internal of the project, which is a good way to become an expert.
No clue why I'm still messing with this, but here's another, better version: http://codepad.org/yEFqudmx
It's still the third paragraph in multiprocessing documentation, correct? I know exactly what the gotcha is, as I killed my windows workstation twice using this friendly forkbomb. And you can say that it's messing with traditional whatever, but scripts with `__main__` seem to be working under Linux, right? So only problem here is that you need to put it in your `multiprocessing` script and be done with it? Does it sound hard? And yes -- `multiprocessing` is modelled after `threading`, but you should still read the docs (3rd paragraph, for heaven's sake), not babble about intuitive behaviour. New tool -&gt; start with the friggin' docs. And that's only against Python's philosophy if you're GvR and something in Python is not intuitive to you. Platform differences are not gotchas if they are well documented upfront (in 3rd paragraph on the main doc page). These are platform specific features. Love it or leave it. And for the love of god: new tool/toy = read the docs.
Why do you think you need to do this? Are you trying to split things up into words? Unfortunately, many languages don't put any spaces or other punctuation between words, so that is impossible in the general case. Then there are borderline questions, like whether the Chinese question word *ma* counts as punctuation. Or what about the Japanese sound extenders ～ and ー? Sometimes they're part of a word, sometimes they separate words. 
So you don't need to know all punctuation, just Bulgarian punctuation. In that case, just make your own list of punctuation that is commonly used in Bulgarian and you're set. Try looking up Cyrillic in Wikipedia and that should be it. 
No. The thing is, I made the original question in the post without saying that I specifically wanted to detect bulgarian punctuation marks because we get extra points if we can make a program that processes any language. If there's a function that detects any unicode punctuation mark, then it would be nice to know it. If there isn't, then I'll have to detect only the bulgarian punctuation marks and lose the chance to get the extra points. My program detects any language, I just need to fix the punctuation issue. Thanks for answering anyway.
I edited the post to clear this. The languages that we have to process are only european languages (spanish, french, greek, bulgarian...) so no asian languages are involved, fortunately. &gt; Unfortunately, many languages don't put any spaces or other punctuation between words, so that is impossible in the general case. Do you mean diacritical marks, like accents in spanish or french? (á è ö î ...) That's not the problem I have, I already have a function that removes all those symbols from the letters without specifying them: def diacritical(s): return ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')) So "á" will be transformed into "a". The original question is not that complex. I just want to be able to remove symbols that are not letters/spaces/numbers, considered punctuation marks, and that are not included in the ASCII symbols. For example, the spanish question and exclamation marks: **¡¿** Do you know if there's any function to remove them automatically without specifying them?
Sure! Something with a wider range of backends would be great! If you want, you can fork my code and add support for whatever backend you wish. I'll merge the best parts of your solution back to loveseat :)
Mostly because it isn't - it's a thin wrapper over the C API. This means that the C *docs* are useful, and that it is easy to keep in sync with updates to the C version. It also means you really want to wrap it in a task-specific wrapper, rather than spreading pycurl calls throughout your code - but really, you wanted to do that anyway. 
I gave up on App Engine Java. These loading requests can take several seconds, occasionally going over the 10 second load limit! I've seen it happen even for simple apps. Google needs a solution to this if they want to seriously charge money for their Java support.
That really sucks; I had a lot of fun using tweetstream. I used real-time Twitter data during the Super Bowl to predict sentiments of users to in-game events. 
And it is like that with physical stuff -- anything to do with fuel, electricity or pressure -- you better know what you are doing before you try it. Why would it be any different with computers? I actually learned that lesson through pain. :) 
If it ain't broke don't fix it. I've run into maybe 3-4 bugs I felt needed patching or at least reporting (and I did do that) in the last 12 years of using Python intensively.
It's documented, as heavily as I felt comfortable without adding flashing banners. Windows doesn't have fork(). If you have a suggestion for improving it, or patching it, feel free to contact me, file a bug, etc. I'm always happy to take user suggestions.
Isn't that exactly what the `pydoc` utility does?
Yeah, he did write rietveld in Django and it's one of the two web packages included in the App Engine runtime. I guess I would've found a "which package should I use?" FAQ page helpful. Something like: How can I speed up my calculations? Try [PerformanceTips](http://wiki.python.org/moin/PythonSpeed/PerformanceTips), psyco, numpy, scipy, pypy, etc. What python web thing should I learn? -&gt; Django I want to use a custom template render method. -&gt; Pylons? Actually I want to write a MMO game. -&gt; Twisted? 
or that the startup costs of the groovy webapp (and framework) are so much higher than the others
&gt; The gotcha is that Windows workarounds screw with the traditional model of process forking Windows is not Unix. &gt; as used in nearly all other systems You mean all other Unixen. Again, Windows is not Unix. I understand that's a bummer if you are used to or otherwise like/prefer Unix, which is fine. But that doesn't mean Windows is broken or "doing it wrong" in any way - it's just different. Also, a slight RTFM for the platform's implementation of a given high-level language feature is always recommended.
Gah, Windows is such a shit. 
Starting from WSGI sounds a little bit too low level for me. But starting from something like bottle or cherrypy, which are more like small libraries than real frameworks, sounds like a good idea. I would not recommend it for a beginner that I could not coach for a few hours though, simply because there is not enough documentation for beginners. And yes, I do think that frameworks are often armful, libraries are better.
Preloading the stuff to some kind of memory image for fast startup on arbitrary nodes might be the magic they need.
&gt; But that doesn't mean Windows is [...] "doing it wrong" in any way - it's just different. That's the same thing in this case. :-) 
Hmm... an already-initialized JVM sitting in RAM and getting duplicated every time a new app loads? It might work, but it would probably be hard to implement.
I don't think it is much extra work - current trunk was developed with 2.x base!!
Great - go for it.
The idea of jquery selector API in python is really appealing.. Don't have any use for it now but I'll definitely keep it in mind.
They're CSS selectors. JQuery didn't invent them.
use an array with a loop? for loop range bla: instaces[i] = SomeRandomClass();
I think that works in VB, not Python (at least I remembered something to that extent from VB days)
What do you want to do with the instances you create? If you just want a list of them, you could do: [SomeRandomClass() for n in xrange(N)] Edit: If you *really* want variables called Instance1, Instance2 etc, I can tell you how to do that, but it isn't pretty and you shouldn't need it.
 instances = [SomeRandomClass() for x in xrange(foo)] Cleaner, works. (This is basically what **Isvara** said)
Yeah, I would like to have those variables, not just a list.
&gt; I would like to have those variables You think that now, but you're wrong. Explain why you think you would like that. for n in xrange(1, N + 1): locals()['Instance%d' % n] = SomeRandomClass() I give that solution really as an example of the flexibility of a dynamic language like Python, but it is **not** what you want to do.
I'm doing some kind of simulation (economics related), and it's like a agent based modelling, but more towards the econometrics (regression etc) side. Each entity (represented by the class) has 2 directions (properties), and has methods to determine them, and a number of magnitudes, some are exogenously derived (i.e. from outside the class), some are endogenously derived. 
I would've if I could find one :(
There's an x64 binary [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/) that's supposed to work with 3.1.
Right, but using them to select parts of the DOM for processing in javascript is something that jquery created, or at least popularized.
Awesome, I've used pyquery before. I really like the library and the flexibility it provides!
&gt;Do you mean diacritical marks, like accents in spanish or french? (á è ö î ...) No, I mean "The sandwich that I ate for lunch was very delicious," in Japanese is "私が昼御飯で食べたサンドはとても美味しかったですよ。" The only punctuation or word divider in the sentence is the period at the end. No spaces, no nothing. 
why would that not work?
That is true; I just didn't want anyone to misunderstand the applicability of them.
They are CSS selectors, true but calling them jQuery selector isn't wrong either cause they do have a few pseudo classes that are not standard CSS (:first :last :even :odd :eq :lt :gt :checked :selected :file).
&lt;pedantic&gt; It's not bash specific &lt;/pedantic&gt;
Don't disagree with your take on the post, but I didn't want to end up talking about that age old language performance debate - although I do admit the post title does probably lead one to that conclusion. The point was, for me at least, to highlight how very bad the loading request problem was for JVM based appengine applications; and how it really can only lead to someone choosing Python on AppEngine over a JVM based alternative. That is, of course, if they are paying attention to the speed of their application - be it a simple hello world application or a more complex app. When spinning up the JVM takes around ~10s on appengine it does rate as a factor over latency...
[I tried](http://bugs.python.org/issue5608) and realized the person who maintains the windows installer apparently doesn't use windows. So My contribution was to write [documentation](http://blog.sadphaeton.com/2009/01/20/python-development-windows-part-1installing-python.html) on how to overcome this dumb decision(IMO). 
So the "problem" that Python 3 "causes" is that it's not backwards compatible. That's not a reasonable claim of "problem". :) But yes, porting can be tricky, which is why I'm writing a book about it.
No, you got that backwards, it speeds up the adoption of Python 3. If it's hard to support both Python 2 and Python 3, people will not support Python 3.
Currently Python 2.6.x is the way to go - many libraries still need to adapt to Python 3 and only [a fraction](http://pypi.python.org/pypi?:action=browse&amp;c=533&amp;show=all) of the available ones have made effort to do so yet. The best learning resource for Python was and is still [The Python Tutorial](http://docs.python.org/tutorial/index.html) in my honest opinion which can be found in the [official documentation](http://docs.python.org/). I really wouldn't waste money on physical books if you have learning material of the same (or higher) quality readily available at your fintertips. Be careful [not to learn with Dive Into Python](http://www.reddit.com/r/programming/comments/bv9gt/dive_into_python_must_die/) though.
How do you plan to reference (use) those variables later in your application?
kay, so anyone cares to explain the post?
The changelog, for where the real changes are: http://wwwsearch.sourceforge.net/mechanize/ChangeLog.txt *Edit: He time stamped it 2009 - I don't think that was intended.
Your going to love it. First, get familiar with the command line interpreter, and how to use it's debugging features. Remember to google for Python gotcha's so you know them up front. Also remember python has a batteries included approach, so if you need it is usually there already, and utilized by other modules. As for web frameworks, check out Django. It's ORM is incredible, and it also has a lot of batteries included. It has a great modular approach too, and comes with a built in authentication system (best for internal stuff). By standardizing it modules for blogs and other apps can be plugged in easily. You can also drop down to whatever level you need to get stuff down in a fairly easy organized way. Be sure to check out Django admin interface feature. Basically, with an unbelievable low amount of code Django can generate a really great interface based on the data models (best for internal stuff, like a CMS). I also used to do Java and .Net, I don't think I can go back now. Anyhow, I have built large systems in Python before, so I have to deal with systems programmings, daemons, web side stuff, API's, etc... If you have any questions don't hesitate to message me.
Python 2.5 or Python 2.6 are the way to go. Python 3.0 lacks lots of third party libraries which are the major strength of Python including most database drivers and most of the scientific and plotting libraries. Python 3.0 would not give you major functionality, just a slightly different syntax and different defaults when using unicode/utf8 in strings. If you are interested in web development may also want to check out [web2py](http://web2py.com) and the [free book](http://web2py.com/book). It is the only framework that provides a web based IDE, a ticketing system, and a database abstraction layer that allows you to run on GAE without using the native GAE API and therefore your code will be portable to Relational Databases without rewrite (and vice versa). If does not require installation or Python pre-installed (comes with 2.5 but it also runs with 2.4,2.6 and Jython). Just unzip the windows binary and click on it.
gee I don't know. what happens anytime software that things depend on comes out with a new version ? maybe someone makes the decision as to whether to upgrade shit or not based on some light cost/benefit analysis. Also, check this amazing shit out.... http://python.org/download/releases/ You can get 1.5.1 if you want. AMAZING!!!!!! And that's not all http://python.org/download/releases/src/python1.0.1.tar.gz ^----------------- there's the fucking source of 1.0.1 from 2001 So to answer your question. Nothing happens.
If/when you check out Django, don't forget the free [Django Book](http://djangobook.com/en/2.0/) online. Together with the [incredible documentation](http://docs.djangoproject.com/en/1.1/) of Django itself, you should have everything you need. If you get really comfortable with Python and Django, [Pro Django](http://prodjango.com/) seemed like a pretty good book if you *really* want to get into Django.
The Reddit API is written in Python. [Here](http://code.reddit.com/browser/r2/r2/controllers/api.py). Edit: Never mind, I read that wrong...
This is one of the main reasons I've been reluctant to play with python at all. It smells like elitism.
With Django, is there a way to publish a web application somewhere without having to host the server locally? I was interested in Google App Engine because I could create something and publish it without having the hardware investment. I read that Google App Engine supports the Django, but I was wondering if the Django ORM can be utilized to call the App Engine schema-less DB?
Word completions! #!/usr/bin/python from pyquery import PyQuery as pq import sys try: url = 'http://definr.com:4000/glob/%s' % (sys.argv[1]) print pq(url).text() or '' except: pass 
&gt; is there a way to publish a web application somewhere without having to host the server locally? Not quite sure I know what you mean there, but I think you want to know if there is a pure DJango cloud environment similar to app engine. None that I know of. However, VM hosting is really cheap, you could go that route. I work for a start-up that is going to have some great VM's and services for start-ups all the way to enterprise level soon [(http://vmfarms.com)](http://vmfarms.com). We plan to be pretty python friendly. I don't know much about app engine, but I do know that the DJango ORM does not work with google db. However, there is a patch you can use that does bring a lot of ORM functionality to DJango and google db: [http://code.google.com/appengine/articles/app-engine-patch.html](http://code.google.com/appengine/articles/app-engine-patch.html)
Not at the moment, but I'd be willing to help explain the API to someone willing to write one. It's a JSON API and there are some simple examples ([redditexporter](http://github.com/ketralnis/redditexporter/blob/master/redditexporter.py), [reddittweeter](http://github.com/ketralnis/reddittweeter/blob/master/reddittweeter.py), [redditron](http://github.com/ketralnis/redditron)) floating around as well as some more complex ones ([socialite](http://github.com/chromakode/socialite), [reddit itself](http://code.reddit.com/browser/r2/r2/controllers/api.py))
I understand the API well enough, it's just that a reddit module would make it that much easier to utilize. Would an "implement a reddit API python module" bug belong on reddit's trac? If so, mind filing it or should I do that? Also, I think the best example you could give someone would be the "reddit is fun" open source Android app, even though it doesn't use Python. It was a very useful source of API examples for me.
[42topics.com: Using Django with Appengine](http://www.42topics.com/dumps/django/docs.html) is a decent tutorial. Using Django with AppEngine isn't that difficult (as will hopefully be apparent from that tutorial). 
I think it's a stretch to call Django's docs incredible. I recently did some Django programming and found I had to repeatedly refer to source code for undocumented but useful functions and while a lot has changed since 0.96, much of the documentation has not. That said, they're certainly good, and the #django IRC channel is very helpful. Most of the code is above average (though not exceptional) as well, so deciphering it wasn't a big deal.
Yet, you won't be able to use Django's ORM with AppEngine, you must use Google's. (To me, the thing Django is best at is the ORM.) Also, google for "django friendly hosting", e.g. http://djangofriendly.com/hosts/ to find a host, so you won't need to host your own server. You don't need a VM host like another post mentioned.
Here's something I wrote a while ago for some project I've since mostly abandoned. http://github.com/davekeogh/reddit_monitor/blob/master/redditmonitor/reddit.py It doesn't support sending messages, but it would be fairly simple to add, assuming the user has enough karma to dodge the captcha.
 * Stop monkey-patching Python stdlib Wow, I never knew! It looks like there's a lot of great changes made; I look forward to using this.
The trend seems to be toward perl, python, and ruby all having the same modules, and with the same names. Time to write a meta language which maps to all three and returns source code in whichever one runs fastest...
&lt;3 this library. It gets me into courses I need when they're full.
thanks!
Since you have programming experience, I highly recommend Alex Maretlli's Painless Python talk. It will give you a good overview of python. part1: http://www.youtube.com/watch?v=bDgD9whDfEY part2: http://www.youtube.com/watch?v=y7vwZ20SDzc 
My point is that the semantics of Python are not well-defined (unlike, say, SML). The semantics of Python are "whatever the interpreter does". I guess it's not a big problem these days, most of the mistakes have been fixed in Python 3.
Learning Python 4th edition (Great introduction, covers 2.6 and little 3.0) Python for Win32 programmers. 
Bon appétit import json import urllib2 from pprint import pprint def reddit(path='/'): url = 'http://www.reddit.com%s.json' % (path) return json.loads(urllib2.urlopen(url).read()) pprint(reddit('/r/Python/comments/bvlqf/python_reddit_module/')) 
With beginners, I think the key is to find something where every *specific little thing* the beginner might want to do, some random blogger already figured it out and posted a tutorial online. Something overwhelmingly popular which stood the test of time. That narrows it down to Django or PHP imho. Bottle is nice too :)
Mostly agreed, but there's not really a huge difference between well-written Python 2.6 and Python 3. Most of the backwards incompatible changes are eliminating things that were good practice in Python 2.2 but not 2.6. Make sure to read the Whats New file for 3 and you'll know about the relevant differences. If you do use Dive Into Python, make sure to use the 3 version and then check it in 2.6 to make sure it still works. 
The documents are incredible, but not omniscient. The documentation is written as a document by people, not generated from scrubbing the source for commentary. They are not strict API documentation, as the source itself documents the API to perfect accuracy.
To be fair, Zed (author of "Dive Into Python Must Die") mainly complained it's a bad book for beginners. It might be ok for experienced programmers, dunno.
So at least we now know why [Zed was throwing shit at Mark Pilgrims dated work](http://www.reddit.com/r/programming/comments/bv9gt/dive_into_python_must_die/). Self promotion by throwing shit at others -- you've come a long way, baby... NOT. And yeah, the first page of DiP is clearly stating that it's not a book for beginners, but Zed is clearly above reading other people writing.
Zed doesn't explicitly mention DIP in this post, so it doesn't seem like a straight up reactionary book. If he didn't like Dive into python, and actually completes this book, I say cool– more free python resources &amp; a dude doing what he says he's going to do.
"The book will be totally free and nobody will be allowed to make money on it. Probably some Creative Commons license. It's written using Sphinx so other Pythonistas can contribute and maintain it." ... except that I won't put the sources anywhere to the public. One of the things that really jumped in my eye was the use of double quotes for strings. Most (if not all) Python code I read around uses single quotes (with docstrings being the exception). I also miss some things about introspection (dir, type), objects, and at least the mention of the mostly used standard libraries. Long way to go, for sure, and the use of examples in that way will make the book really tiring to read.
Where's the rant? What did he say?
Turtles all the way down.
This is exactly the type of hosting I was looking for. Thanks so much for the link. I am creating a web application for my grandfather and his friends to do genealogy (needs to be custom for what they are doing), and I just couldn't validate trying to write a Windows application using WPF and I certainly didn't have the resources to host SQL Server + IIS for them. This left me with Python or PHP web applications. I chose Python because my employer is pushing Python development in addition to .NET development.
Good for him! Worst case scenario: Zed wastes his time. Best case scenario: new Python book written for a different learning style. It's nice that Zed's doing something constructive rather than just ranting about something he doesn't like.
I personally like the official python tutorial. But I agree it's nice to have different approaches for different types of learners.
I see it the other way - it's good that something constructive is coming out of this.
Pick up some django first, then try it again.
http://www.reddit.com/r/programming/comments/bv9gt/dive_into_python_must_die/
&gt;One of the things that really jumped in my eye was the use of double quotes for strings. Most (if not all) Python code I read around uses single quotes (with docstrings being the exception). Interesting. I had single quotes for dictionary lookups but double quotes for everything else. e.g. [Mercurial's code](http://selenic.com/repo/hg-stable/file/33119d0252c1/mercurial/commands.py). Looking around, I see [Bazaar](http://bazaar.launchpad.net/~bzr-pqm/bzr/bzr.dev/annotate/head%3A/bzrlib/externalcommand.py) indeed does what you describe. [Django](http://code.djangoproject.com/browser/django/trunk/django/core/urlresolvers.py) seems to have some weird inconsistent mix. I'm using Python for a project so I was keeping my eye out for comments on how to code idiomatically.
And yet, every time i see someone ask "I am going to learn programming with python, where do I begin?", people always direct them to DiP. There are some really good python resources, but DiP is not one of them. When you are good enough to actually use DiP you are probably just better of with the official python tutorial. Anyway, respect for the guy for not just bitching but actually doing something about the problem. Edit: I slightly dislike my choose of words a bit. I do not mean that DiP is bad (I have read it, and used it). I am mostly against it being used as a first tip to people who wants to learn programming.
I didn't find any guidance in either [python.org: PEP 8: Style Guide for Python Code](http://www.python.org/dev/peps/pep-0008/) or [Google Python Style Guide](http://google-styleguide.googlecode.com/svn/trunk/pyguide.html). [stackoverflow.com: Single quotes vs. double quotes in Python](http://stackoverflow.com/questions/56011/single-quotes-vs-double-quotes-in-python)'s answer is yours: use single quotes around symbol-like strings (keys, mostly) and use double quotes for most everything else. 
What does a forum software have to do with a framework?
Heh. My convention is to use double quotes only when it reduces the amount of quote-escaping I have to do. ;)
No one is really using Python 3.0 just yet. 2.6 is probably what you want to use.
Actually I always found DiP boooring and always pointed people to the official tutorial (with online quick reference page for, well, quick reference). So, yeah. The new books seems to hold Mark Pilgrim's methodology, but it has really good parts, like chapter about strings/text -- something that 90% get wrong, even after years with Python. I will respect Zed when he stops raging and starts working. What he has now is just a stub and yet he's promoting it as a counter-to-DiP. Why does it have to be like that? There are worse books for Python out there. Why couldn't Zed just start ,,another book for Python newbs''? Because he act's like a attention whore. And wasn't that Zed who said that Python/Python's stdlib is braindamaged? Great guy to write a Python book. 
Uhm. Ok, what a waste of time. Isn't Mr. Shaw the same guy who quit the ruby community because he couldn't make any money? And then complained about it on the interwebz that he "quit" ruby (as if anyone gives a shit). Yeah I'll pass on this book.... thanks for nothing.
&gt; One of the things that really jumped in my eye was the use of double quotes for strings. Most (if not all) Python code I read around uses single quotes (with docstrings being the exception). I'm in the opposite camp. Must be b/c most of the programmers I work with (who are all excellent Python programmers) have legacy C or C++ backgrounds and are used to using double quotes for strings.
Wait for his rant about how ungrateful the Python community is.
&gt; The book will be totally free and nobody will be allowed to make money on it. This is disingenuous. What he's really saying is that nobody *except him* will be allowed to make money on it. There's no license in the world that prevents the creator from making money off their own work. Which is fine, it's his work, but he should at least be honest about it.
I wish you a lot of luck with reinventing a whole series of wheels.
I'm not so certain about that yet... 
Why do you assume that I would not use a framework?
Try [matplotlib](http://matplotlib.sourceforge.net/)
But we are really a bunch of ungrateful whitespace loving hipster assholes. I can't wait 
Yeah, I'm really looking forward to his eventual disillusionment and ranting exit from the Python community so he can go be an asshole elsewhere.
had to change json.loads to json.read and it actually worked
I always direct people who aren't programmers but want to learn Python to [Invent Your Own Computer Games with Python](http://inventwithpython.com), but then again, I'm the author of this (free Creative Commons) book. :)
Mine, too. I do this in all of my Mercurial code, too, and I think several of the other crew members do so, as well.
I had some colleagues sample some of the free books out there, and they liked [Think Python](http://www.greenteapress.com/thinkpython/thinkpython.html) the best, so we ordered some dead-tree copies of that.
Python 2.5 if he wants to use Google's AppEngine.
I'm looking for a setup for Python development for Windows, has anybody experience on this? Edit: more info: I'm just started to learn Python. I decided to just 'jump into the deep end' and just 'go for it'. I'm quite experienced in PHP and .NET/C#. .NET is nice, PHP quirks are bit annoying but usable with correct libraries. Everybody seems to love Python, especially ex-PHP programers. PHP dev is easy, just install xampp on Windows, and it comes pre-installed on Linux. And deploying is dead easy. Same for .NET, since it is Microsoft only. But I don't want use a system that confines me to one OS, and Python seems to fit the bill. I'm using Komodo for all my IDE needs. (Pardon my incoherent ramblings)
While I disagree with Zed on his methods, I just want to share my experience with him in the hopes of offering some form of balance. He went out of his way to help me while I was learning python. I wrote him and asked his advice and he sent me a long well thought out email that actually helped me. Part of his email was a request for me to check in with him once a week and to discuss any problems I had. I finally managed to become reasonably proficient thanks to him. He does not have the attitude I have seen in a lot of "celebrity" programmers, and the feeling I got was was of a very smart person that wants to help others and sometimes goes about it in a brash way. I wish that instead of getting angry, Mark (who I also respect a great deal) had made a big joke out of it as well and maybe even joined forces with him a collaboration could have produced something super cool a combination of backporting the python three book and some of Zed's entertaining writing style and compassion for clueless idiots like myself might have created a magnum opus... or they would have fought like cats and dogs over every part of the book and never finished it... Anyway moving on. Reading something like this. "Who does that motherfucker Mark Pilgrim think he is ? He released a book and then didn't constantly tweak it for free ? How dare he give away something that became outdated! Off with his head I say!" With MarkPilgrim [F] above it would have made my day. I understand someone comes out of the Ruby community and starts taking shots at something you gave your heart and soul to at one time and then gave away free is going to anger you, unless you are sitting in the midst of a lily pad with oooommm resonating from your nasal cavity. Fact of the matter is that Mark did something really good for the community (it's not perfect but perfection is unachievable by the human race without some form of machine intelligence). And that should be celebrated. As far as I know this never happened. Zed: "your book is being held up as an intro and it's killing a lot of good programmers on the vine here's how we can fix it!" Mark: "You have impugned my honor my book is perfect and for this you must die" Zed: Since it must be so I will launch my first attack using my weapon of choice venomous three finger salute blog strike. Since a ninja duel to the death hasn't happened yet, maybe there could still be some kind of accord instead of infighting among some of the leading members of the python community. Somewhere this rambling got off track. Time for anther long island ice tea. Sayonara
no, it's a stupid project.
Yup. [This](http://docs.python.org/library/index.html) is on my Speed Dial, and gets a visit almost every night. (The included .chm in the installation is nice too, although I prefer the web search)
I tried for a while, but you will find it much less painful if you dual-boot Ubuntu and use Linux for development instead. Phillip.
Instead of making a rant, he should have done this in the first place. Mark Pilgrim is probably very busy, having 2 books on the go, on top of (I believe) working at Google.
Looks like a nice set-up. Btw, get yourself this free [path editor](http://www.rapidee.com/en/about) in case you start loosing your mind with the tiny dialog boxes in the default Windows path editor. It will even show you if you have broken paths.
No matter what you think of his attitude, you have to admit the guy is extremely competent. He sets himself high standards, and interestingly, he sticks to them. Mongrel, years on, is still a production level RoR server. Lamson, a Python email framework he made is, frankly, fantastic (if you need an email framework, which most probably don't... but I did). The documentation on Lamson in particular is very good. I respect the man to be honest. He's outspoken, but he puts his money where his mouth is and what he does, he does well. edit - typo
That's a pretty retarded answer. It's like someone asking for help changing the oil on a Subaru, and you tell them it's better if they just drove a Volkswagen instead. While I agree with the sentiment, it's merely your *opinion* that Linux is better for development, and you have no objective way to prove it. Python and Django run perfectly well on Windows, so there's no technical reason to use a different OS for development or learning the technology. PyDev/Eclipse, NetBeans, Stani's Python Editor, and Wing all work well with Django on Windows. Mark Hammond's PyWin32 has a pretty decent debugger/REPL app, and it even comes bundled with ActivePython. Other Windows-friendly Python debuggers include WinPDB and PyScripter. For a beginner, I'd probably recommend PyDev/Eclipse.
As competent as he is I don't think I'd like to work with him, he seems like he'd be a very toxic element to any team unless everyone just blindly his way.
Yeah, they're cool. Other awesomeness: * `itertools`: `chain`, `cycle`, `groupby`, `izip_longest`
Personally I disagree, but to each their own :).
In person he's not necessarily the same as on his blog.
Maybe not but I've read quite a bit of the irc logs with the ruby community and what he posted on his blog and while I side with him for the most part, how he handles conflict just doesn't seem conducive to a positive work environment.
For an editor I've been liking [Komodo Edit](http://www.activestate.com/komodo_edit/) (free). I used to run python on the Windows side as well, but after a couple projects with hard-to-compile-for-Windows dependencies, I've started using a linux VM to run the actual code. So my current setup looks like: * run Komodo Edit on Windows * run VMWare Player (free) on Windows, hosting a Debian guest (I don't use X, but you can if you want) * set up directory with code as a Shared Folder in VMWare and is mounted in the guest * ssh into Debian guest (with PuTTY) and run my code there (./manage.py runserver 0.0.0.0:8000) * hit the server with a browser running on Windows (add an entry for your guest in your hosts file on Windows to make this easier) * use pdb for debugging Performance-wise it's still really quick and I don't notice the overhead of the VM. And now that I've got it all set up I prefer it even for more simple projects. That said, if you're just doing some basic stuff without many weird dependencies you're much better off starting out by just running it all on the Windows side. But if you ever find yourself hitting your head against the wall trying to get the Windows version of a lib going, the above setup isn't too hard to get configured.
does anyone know why the DiP pdf copy renders with that one icon in the middle of the page (windows, haven't checked on linux, i read on my laptop)? i've googled for it before, but had no luck finding anything. this has caused me to stop using DiP after a couple dozen pages, i usually use docstrings now.
It isn't necessarily disingenuous. If he doesn't allow himself to make any money from it, the statement will be perfectly true. What you say about how a non-commercial license would work is also true.
Yes. Was added in 2.5 I believe, so it's pretty recent. So I learned about it when it was added.
VirtualBox Edit: Sorry, feeling less flippant now. Unless you're actually planning to deploy on Windows for some crazy reason, this is the only way to go. If not, have fun writing two settings files for everything.
Stick with Python 2.5+ Tips for Beginner Python Programmers: - Learn to love iterating. Figure out ways to organize your data around Dictionaries and Lists. - Appreciate the power of [introspection](http://www.ibm.com/developerworks/library/l-pyint.html). This makes debugging code or looking at other people's code a lot easier. - Use a good python shell like ipython. Auto-completion is very handy, and it also adds some extra introspection features.
I haven't found much issues using any of the main python web framework on windows. Django, pylons, what have you, have step by step instructions on their website. If you need mysql I believe it has a "next next next" setup for windows. Just install python and [setup tool](http://peak.telecommunity.com/dist/ez_setup.py) then you'll be able to easy_install any python module you need in about 5 seconds. 
I'm curious as to why you're saying that. Care to elaborate?
Vaguely remember those, but I did not know about: [True] * 100 But of course it only makes sense, since you can add lists. That's cool.
I was just about to post this. Totally agree. Just run a virtual ubuntu desktop.
Python in a Nutshell is a good book choice, though a little dated at this point. Python Essential Reference 4th Ed. by David Beazley is the best -- and most up-to-date -- book on Python on the market right now.
Good thread. Also simpler hack-ish way is to use sum: l = [True, False, True] if sum(l) == len(l): # all true if sum(l) &gt; 0: # at least one is true 
Yes, but **any** and **all** presumably short circuit. Your **all** function must look at every element even if the first one is false. Your **any** function must look at every element even if the first one is true. That said, it may be a false optimization. It may be that simply adding all the numbers together is less expensive than performing a check on every number you look at. I suppose it would depend on your data sets.
As soon as it finds a False entry, "all" is untrue and it could, presumably, short-circuit. Conversely, as soon as "any" finds a single True entry, it can return True. cf. `my_all_v3` and `my_any_v3` in the top-voted answer in the linked SO post. =)
The only caveat I would mention is that if you're trying to initialize nested lists, you *cannot* do &gt;&gt;&gt; x = [['foo']*2]*3 &gt;&gt;&gt; x [['foo', 'foo'], ['foo', 'foo'], ['foo', 'foo']] This is because each of the sub-lists is actually the same object. If you modify one of the sub-lists, all the sub-lists will be modified: &gt;&gt;&gt; x[0][0] = 'bar' &gt;&gt;&gt; x [['bar', 'foo'], ['bar', 'foo'], ['bar', 'foo']] The correct way to handle this (even though it's arguably less elegant looking) is: &gt;&gt;&gt; x = [['foo']*2 for i in range(3)] &gt;&gt;&gt; x [['foo', 'foo'], ['foo', 'foo'], ['foo', 'foo']] Using a list comprehension causes a new list object to be created for each sub-list, thus: &gt;&gt;&gt; x[0][0] = 'bar' &gt;&gt;&gt; x [['bar', 'foo'], ['foo', 'foo'], ['foo', 'foo']]
The [functools](http://docs.python.org/library/functools.html) and [operator](http://docs.python.org/library/operator.html) modules are also very useful for writing nice, concise code. In particular, itertools and operator mesh together nicely.
doesn't the new pydev integrate django?
A Python book in response to another outdate book started out with deprecated `print` statement....
WingIDE www.wingware.com Excellent IDE, and version 4.0 (which is in private testing) now has Django features (syntax highlighting for templates, stepping through templates, etc). Check it out.
Simpler? any and all are part of the language!
print statements in Python 2 aren't deprecated.
Right - but that's hardly Mark's fault. 
&gt; objective way What about the number of steps needed to setup a working development enviroment for django? Or the number of steps to accomplish common tasks? (note: I'm not saying anything about these numbers, as I've never tried django on windows). I know, we'd need to define a "step", but in common sense, I think it can be considered a somewhat objective metric. Also, I think ptemple spoke about django development, not development in general. 
LOL So was I, this is exactly how I do it, just set it to bridged networking and you can view it from windows browsers and code on it in Ubuntu. Requires dual monitors for best results, though.
And we really need to teach new beginners Python 2 way so that they can become part of the friction to Python3 migration? What's so hard about adding parentheses? Python 2.6 even recommends doing that.
A really good and often overlooked point: "People who can code in the world of technology companies are a dime a dozen and get no respect. People who can code in biology, medicine, government, sociology, physics, history, and mathematics are respected and can do amazing things to advance those disciplines."
You could wait for an enter: `raw_input()`.
Thank you, this worked fine =D
You could start your python script from within the console. python scriptname.py
&gt; you have to admit the guy is an extremely competent I have no idea who he is. What has he done?
If all you want to measure is steps to install; that's not a valid measure of development output. Although it certainly is a measure of operational output. Dual booting is a PITA, and hinders the experience in learning and developing. You can no longer just think: "I wonder what this would look like in X." Now it becomes a matter of rebooting, returning to your original thought, executing, testing, then rebooting back into your operational environment (maybe patching along the way). Would I deploy django on windows in an operational environment? No. Would I recommend using this for some development work under Windows? Yes. Just watch for those CR/LF.
If you know .Net make sure to look at [Iron Python](http://ironpython.net/) (Python with .Net bindings). It may be an easier transition from C# to plain old Python. This is an excellent intro book to Python: [Practical Programming: An Introduction to Computer Science Using Python](http://www.amazon.com/Practical-Programming-Introduction-Pragmatic-Programmers/dp/1934356271/semafournet-20) 
you can pass the **-i** argument when you're opening the file. E.g. python -i scriptname.py This will leave you in interactive mode after your script is finished. It can be quite useful for debugging as well.
Or you can try os.system('pause') at the end of your script. Ugly, but hey. ;-)
I feel your pain. Don't have any sort of answer for you, but I feel your pain. I do have two things to say that might make you feel a little better though: 1. Remember that you're fighting the good fight, improving the quality of software for everyone. 2. Sometimes the best thing really is to just to give in and do it the dumb way. Even if the tool you want could exist, would be useful to other people and would generally make the world a better place, developing it might not be the best use of your time. Unless you're doing this as a hobby, in which case you should do whatever you get the most personal satisfaction from. But personal satisfaction doesn't pay the bills, so sometimes we just do things the dumb way and get on with the job...
Two of his major projects are, as I mentioned, Mongrel, a RoR webserver, and Lamson, a Python email framework. Mongrel was the preferred Rails production server for a long time.
Ooh, I didn't know this, sweet :)
If you wanted to only keep command prompt open for a specified time you could always import time time.sleep(seconds_to_halt_program) raw_input() does seem like the way to go for you, though. Just be careful, if you're going to use Python 3 raw_input() will be deprecated, use input() instead. EDIT: For some reason I can't get my comment formatted properly. The function 'raw_input()' has an underscore between raw and input.
Based on my experience your best option is a Divide and Conquer strategy. 1. Pick some section of the code and make it slightly better. 2. Repeat. Generic tips: * Identify copy-and-pasted code, unify it and import it. * Once something becomes testable, write a test for it. * pyflakes is really helpful, use it. (I have a hotkey for checking the current file.) * Remove all "from blah import *" and replace it with discrete imports. That way you can better see dependencies. * Rename local variables so that they have meaning. * Remove all unused code (either commented out or just not used).
Why didn't that guy get a tick?
I've used rope scripting abilities when I was writing a docstring format converter. It has a decent set of features, but they are very robust and I don't think it can handle such a complex problem like yours. Tip: try to estimate how long it would take you to rewrite the whole thing and how long it would take you to reorganize and validate the existing code? Then try to examine the merits of both cases and stick to one strategy all the way. Good luck.
This is what I do. Open up a 'Command Prompt'. Not sure what version of Windows you're running, but it should be somewhere in your Start Menu. Or you can just type 'cmd' in the 'Run' dialog box. Once you're at the command line, navigate to the folder where you keep your scripts. Then just run your programs like the above poster said.
Heh. I knew about `all` and `any` and about `[True] * 100` but this thread introduced me to `import operator`. Should be super handy for things like `reduce`.
When I want to launch a quick script from Launchy, but want to be made aware of any errors, instead of the error message being written to output and dying with the closing prompt window, I use the TkInter message boxes to show me the error messages and wait for me to hit OK before quitting out.
What's wrong with [devtodo](http://swapoff.org/DevTodo)? The main killer feature is that todo items are a tree, so you can graft subtrees ont your todo list, it's nice.
I started Python on a Finnish keyboard, and the double quote IIRC was easier to get to for my fingers than a single quote (it didn't need shift-2 as it does on a standard UK keyboard). So I tended to use double rather than single quotes. Now I'm on a UK keyboard I do the opposite.
This is kind of an ok idea, but didn't we learn anything from PHP? 
If it's open source, why not post a link to the actual source so we can give you better advice? The key question for me is, "Are there tests?"
&gt; What about the number of steps needed to setup a working development environment for django? Actually not much more even comparing to Linux. Install python, get the latest django snapshot, `python setup.py install' and you're there. 
Why run desktop version? You basically need just sshd, python and *maybe* a web server. I personally tend to use a custom lightweight setup. 
Because it'd be pretty awful form to go on reddit and post "lololol look at the shitty code," with a link. It'd be pretty clear which contributor this username belongs to, and then I can't commit no more. No, there aren't currently tests. Getting from the current state to a testable state is high on my list of things to do. 
:-( I suppose now the waters are muddied sufficiently that it can't be done. Next time consider something like, "I have inherited this package here and I will be needing to maintain it! What sort of suggestions do you have?" and skip the judgement part. Otherwise, we're in the position of a doctor being asked to prescribe for a patient who won't even reveal his specific symptoms... 
Because that tends to lead to the adoption of Ubuntu as the primary operating system. :)
The best thing I have seen for python is the PyCharm IDE.
This can't possibly be secure can it? 
"Getting from the current state to a testable state is high on my list of things to do." I think you should write the tests before you do any other activity. I'm actually not a great fan of Test-Driven Design, but in this case it's the most logical way. The reason is that once you start to make changes, you have no idea if you've broken things. If you write a lot of tests, you can use them to make sure that things that look like they are the same, are in fact the same... So I'd approach one section at a time. Write tests to prove to yourself that you really know what it does. Then make small changes, making sure the tests work each time, until the code looks better. Rinse, repeat.
That's a great one to remember! Really, this is all about mutable vs immutable objects, which is a big deal in python. For more on the dangers of mutable objects take a look at [python pitfalls](http://zephyrfalcon.org/labs/python_pitfalls.html): pitfall #5.
Specifically they're under [Built-in functions](http://docs.python.org/library/functions.html)
&gt;Identify copy-and-pasted code With [clonedigger](http://clonedigger.sourceforge.net/) - the python copy-n-paste detection tool. See sample output linked from my [blog post](http://simeonfranklin.com/blog/2010/feb/25/python-code-quality/) or [view sample output directly](http://simeonfranklin.com/code-quality/clonedigger-django-1.html)... Clonedigger takes a long time to run on large code-bases but is incredibly worth it...
It looks like any and all do in fact short-circuit (I'm running python 2.6.4): &gt;&gt;&gt; def g(x): ... yield x ... raise Exception ... &gt;&gt;&gt; any(g(True)) True &gt;&gt;&gt; any(g(False)) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 3, in g Exception &gt;&gt;&gt; all(g(False)) False &gt;&gt;&gt; all(g(True)) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 3, in g Exception &gt;&gt;&gt; 
Ok, what about a virtual machine?
yeah how about using [the real thing](http://taskwarrior.org) and stop writing crappy software ?
Sweet Jesus on a pogo stick, *finally* we can get some real package management in Python!
Awesome. [Obligatory.](http://www.youtube.com/watch?v=Y6ljFaKRTrI)
Super-good docs, as usual. Just look at the PyPi page -- incredible.
Sadly this pitfall is not in. x*n (n&gt;1) is not the same as x+x+x+...+x if x is a list of a list. In the first case x[0] is x[1] , in the second this is not true. [[1]]*3 is not the same as [[1]]+[[1]]+[[1]]
Also to be fair, the first sentence on diveintopython.org is: &gt; Dive Into Python is a Python book for experienced programmers. I don't take Zed's rant on it seriously at all.
"Perfection is achieved not when there is nothing more to add; but when there is nothing more to take away." - wish I remembered who Btw, congratulations to Tarek and everyone who's been working on Distutils2 and all the related packages and PEP's! It may be long and complex work, but it certainly is appreciated. 
I'm sorry sir, it seems you mistakenly linked to the wrong site. I believe [org mode](http://orgmode.org/) were the site you were thinking of.
I believe it was [Antoine de Saint-Exupéry](http://en.wikipedia.org/wiki/Antoine_de_Saint-Exupéry) in [Wind, Sand and Stars](http://books.google.co.uk/books?id=Ep-h7MuxLiIC&amp;lpg=PP1&amp;dq=wind%20sand%20and%20stars&amp;client=firefox-a&amp;pg=PA42#v=onepage&amp;q=%22perfection%20is%20finally%20attained%20not%20when%20there%20is%20no%20longer%20anything%20to%20add,%20but%20when%20there%20is%20no%20longer%20anything%20to%20take%20away%22&amp;f=false)
I work with the lead developer (Sean) and he recently gave a presentation on his project at our company. I thought it was quite impressive and figured someone in /r/python may be interested in it.
Same reasoning. Just takes slightly less time. I think it's that experimentation process that really allows a developer to learn and be more productive. That's just my opinion. VMs ARE awesome, especially if you can snapshot during the development process.
Also, is there an IRC chat, where I can anoy experienced python hackers?
I don't know, man. A lot of the problem is that the options are so convoluted... I'm reading this and the shit's not exactly leaping off the page, ya know? jar files were what? 1995?
[Previously](http://www.reddit.com/r/programming/comments/8nl4/a_python_script_for_importing_modules_over_the_net). I like the quote about the Ruby version: &gt; It’s not just a solution looking for a problem. It’s a solution looking for a victim.
Interesting link, but I think the complaint of "isinstance" is a little vague and could apply more generally to the pitfalls of introspection. Understandably, you have to be careful using it, but I wouldn't call it *harmful*. 
Try: irc.freenode.org #python
Thanks ! This PEP is technically "small", but the fact that we have reached a consensus was a big step forward because all people and tools are now heading in the same direction for future stuff.
Use mptt. Integrates nicely into django. http://code.google.com/p/django-mptt/ Phillip.
I am sorry you get voted down but reddit is nor very web2py friendly. My two cents without knowing much about your project. I would create a table category, a table sub-category (that reference category) and I would generate the form dynamically (SQLFORM.factory) based on the list of subcategories.
irc.freenode.org #web2py
Ah, so that's what they're for... And *anyone* can upload to pypi? That's quality :)
Here is preorder-tree-traversal in web2py: http://www.mail-archive.com/web2py@googlegroups.com/msg06396.html (it is kind of trivial so we did not considered it worthy of its own Google code project but perhaps we should do it). Anyway for the question posed by yanni the depth of tree is 2 (not arbitrary) and mptt is not the most efficient solution. Moreover he is not asking about models. He is asking about automatic generation of forms.
Usage of setuptools, and eggs, should be punishable by floggign.
Thank you for getting back to me so quickly. I find Web2Py incredibly intuitive for a beginner. Not sure why reddit isn't web2py friendly. The idea for any development environment is simplicity, right?
Interesting. It's a bit over my head for now, but the linked article (http://articles.sitepoint.com/print/hierarchical-data-database) provides a great introduction. 
Ubuntu is not just a desktop. ;) 
Care to elaborate?
Well obviously, but what are the chances that someone is going to go from a windows environment to linux server? Much smaller.
Use of setuptools is [deprecated](http://s3.pixane.com/pip_distribute.png) in favour of using [Distribute and pip](http://s3.pixane.com/python_comrades.png). See also a [recent post about the status of Python packaging](http://tarekziade.wordpress.com/2010/04/26/pep-376-is-accepted-what-it-means/).
&gt; This book’s job is to teach you the three most basic essential skills that a beginning programmer needs to know: &gt; Reading And Writing, Attention To Detail, Spotting Differences. I applaud that. I know "professionals" which should use that book.
Pip also uses eggs
&gt; I have been programming for a very long time. So long that it is incredibly boring to me. At the time that I wrote this book I knew about 20 programming languages and could learn new ones in about a day to a week depending on how weird they were. Eventually though this just became boring and couldn’t hold my interest. Zed at his best. Worst. Whatever. 
the guy is doing matrix stuff in pure python he really should compare to using numpy
This book is so well written for absolute beginners I believe my grandmother could learn to program with it.
You're missing the entire point, though: the whole book is miserably outdated and obsolete. If you learn Python through Dive Into Python, you will miss out on any modern idioms and pythonic thought-processes.
Like rescind said, numpy can really suck at pure accesses. I could use numpy to vectorize my calculations, but the calculations that could be vectorized were very few compared to the simple accesses, so I would gain a bit of speed and lose ShedSkin. Basically, the code would run perhaps twice as fast, but it would never run 47 times as fast with just numpy. In a previous example (the Cython one I mention in my post), both the Python and Cython version become faster when you use lists instead of numpy arrays.
What is wrong with setuptools and eggs?
No it doesn't: http://pip.openplans.org/#differences-from-easy-install
This link provides the details about the open source python development environment. The website also contains details about more open source products in all languages. 
Not bad. I tried out Spyder, and I had a crash while opening the file browser, but I think this is related to the latest PyQt being buggy (there are some newsgroup posts about random crashing, which I am experiencing on my own scripts as well). Also, there's a bug in the source editor. When I select a font of a particular size and click OK, and I open the font dialog again, a 2pt smaller font size gets selected. If I restart spyder with a 14pt selected font, it bounces back to 12pt. If I restart it again, it stays at 12pt, as long as I don't touch the font dialog again. But I like the integration with Pylint, and that interactive documentation is sweet. It even has a path manager, wowzers! :)
Or start by trying to write a "complex" program right away. I started using Python by writing a GTK hangman game. It was painful at times but I did it.
This is great. I don't even have to rtfa. "How I sped up my Python code 47 times with no code changes." How? How? "By compiling with ShedSkin." Okay.
The table at the bottom of your post has "Python" and "Cython" as headings. I think they should be "Python" and "ShedSkin."
well, being speedy with numpy depends on it having the fit algorithms already done cause then all you do is call into already fast code also please take a look at psyco as jit
That's exactly the approach Zed is trying to avoid and why he believes Dive Into Python is a horrible book for beginning Python programmers (since it delves into sockets and such, before the reader even knows how to write a conditional).
It doesn't install from binary packages. However, it does install eggs. If you install a package with pip, it'll build a .egg-info directory for you.
Hey, I like this guy, he has theatrics: &gt; I will give you a sample of the Python code and the same code modified for ShedSkin. You might notice that the two snippets are identical. **That’s how awesome ShedSkin is**.
Im going to use this. I've been desiring to learn Python for a long time and I find books just don't include enough step by step instructions through example. That's what I like. The downside though this is only 30 some pages... why so short?
Psyco doesn't work in 64-bit python :/ I tried it on 32-bit, and the speedup was indeed significant, but not 47x faster.
I summarise so you don't have to.
Thanks!
Sorry, fixed :(
It's still being written? That said, from a cursory look through it, I think it's a bit too basic..
Took me three methods to install Taskwarrior on Ubuntu 9.10. I had to resort to building it from source and installing multiple dependency libraries. Taskwarrior looks feature rich and all, but I just had to type `sudo easy_install done` to install done...
just keep the binaries around and stop bitching. I want to have notetaking that will work 10 years from now ... not just some lame script so when Python goes away I'll be the only one running it just for a todo list script...
Not to mention the MULTIPLE linker problems on both my Ubuntu and Debian machines. Reminded me of fucking 2003.
oh shut up, you don't know how to compile/link, so what ?
Well i would guess if you were looking for programming for fun, python is certainly it. I've been making up excuses to use python at my day job for a couple of years now. Anyway, [pygame](http://pygame.org) might be of interest to you. [StackOverflow(Python)](http://stackoverflow.com/questions/tagged/python) is a pretty good place to ask questions. As far as tools go, I wouldn't mess with an IDE myself, stick to an editor like [VIM](http://www.vim.org/) or [EMACS](http://www.gnu.org/software/emacs/) and learn the shit out of it.It will help you get better at computering in general. But both editors have awesome python support. When you feel you are ready to write bigger python projects you may find this [screencast on Paste/VirtualEnv](http://showmedo.com/videos/video?name=2910000&amp;fromSeriesID=291) useful and even [this one(unit testing with nose/coverage)](http://showmedo.com/videos/video?name=2910010&amp;fromSeriesID=291) there's plenty of others there too. Other than, code code code code code.
Thanks - a whole lot of information right there!
Maybe, but I require ultra basic to start. Getting up and running has been a hurdle. Going through this book, I'm already stumped on step 3 of exercise 0. It's telling me to find my terminal program and I don't know what he's talking about. "Search for it. You'll find it." isn't good enough, perhaps you can help me? Is this cmd.exe? If I'm right, I make this assumption knowing a bit about what he's talking about, had I not known this thing existed I wouldn't be able to proceed using this book alone.
I'm using this book as an absolute beginner (which is claims to be targeted to) and I am finding it fails to properly instruct how to get set up (exercise 0). From a beginners perspective, not knowing what I am doing in the slightest, it feels like the steps involve "Just google it." While that may be fair, it is certainly not what I would expect from an instructional book. If the book is going to teach me how to use google to learn coding, it should instruct on that as well, like where the best community for answers are, etc. But as is, I imagine exercise 0 is not useful to anyone.
I highly recommend reading Learning Python by Mark Lutz.
If Zed had ever bothered to actually read "Dive Into Python," he would be aware that there is no talk of sockets and no use of ODBC. The entire basis of his ill-informed rant was the function name I used in the early chapters, "buildODBCConnectionString", to explain string manipulation, lists, dictionaries, and other basic datatypes. It has nothing to do with using ODBC. There is not a single sentence in the entire book about connecting to or using databases through ODBC or any other API. The one time I met Zed in person (PyCon 2009, just as I was starting to write "Dive Into Python 3"), he said that he absolutely loved the original book, except why did I start it by talking about COM objects and other Windows-specific technologies? Reading comprehension does not appear to be one of his strong points.
Well, that part is intended for Mac users. http://docs.python.org/using/windows.html is a better resource for Windows users, as far as installing python is concerned.
Unfortunately it won't work for all programs.
Upvoted for this reason. It's nice to have a one liner if I don't have the time to read the whole article. If I hadn't taken the time to read it, I still would have been made aware of ShedSkin and how useful it could be.
I really love how you post stuff with *results only* and no way to reproduce your experiments in any way. Good job man, that's the best way to spread whatever facts you feel are good. PS. Stuff which *is* in the shedskin checkout doesn't run nearly that long for one example.
Interesting. I always enjoy reading your pieces. I have a few questions this time around. * I've done some machine learning stuff before (including SVMs) and I often get confused as to the exact meaning of "kernel". Your code seems to suggest that each labelled training datapoint is called a "kernel", but it was my understanding that, especially in the context of SVMs, that "kernel" is short for [kernel function](http://en.wikipedia.org/wiki/Kernel_%28statistics%29), as used in the [kernel trick](http://en.wikipedia.org/wiki/Kernel_trick). (The kernel trick is freaking awesome, by the way.) What's your take? * You may have already answered this in your answer to the above point, but *are* you using the kernel trick here? Which kernel function are you using? * The same program may run at different speeds, especially the first time it runs as compared to subsequent runs. I've seen excellent statistically-founded critiques of programmers' tendencies to spout about things exactly like you're talking about here with your 47x improvement. Obviously, since your unoptimized code took over an hour to run, it might be infeasible, but have you considered generating more statistically significant measures of how long your program actually took to run, before and after ShedSkin? I have a tendency to mistrust any measure that doesn't include a confidence interval. =) Cheers! Thanks for the post!
The maintainer of ShedSkin seems quite mature: &gt; The biggest 'improvement' of this release is perhaps that Windows is no longer supported. Windows users are encouraged to take over maintainership of the MinGW version, or to upgrade to a 'real' operating system, such as Ubuntu, and live in software freedom. 
No, but you can extract the critical code, compile that into a module and import it from your pure python code.
Yes, apart from clicking where I linked the source and running it, unfortunately I **am** too light on the reproduction. Next time I will try to install the code on your machine and run it before you read the article.
Thanks, I'm glad you enjoyed it! To answer your questions: My code is wrong, the kernel is indeed the kernel function, I just referred to the matrix of features that had been passed through the kernel as the "kernel matrix", purely because I needed a name and I didn't plan on publishing the code. I used the RBF kernel, you can see it in lines 88-89. Like you said, it took over an hour to run, so I'm not very inclined to repeat that (also, I don't have variable inputs to run it for, like I did with the previous one), you're free to try, though, as the code and data are available! Really, I don't think it matters if it's 47x or 57x or 40x, my point is that, if you have heavily algorithmic code, you should give shedskin a try and see if it's faster than the alternatives for you. It hasn't been getting much attention, even though it thoroughly deserves it. I have gotten results comparable to Cython, but I spent many more hours changing my code for Cython than just running "shedskin myprogram.py", and I think it needs to be more publicised. I have tried it with a few other scripts, and one time it was slower than psyco, but I sent it to Mark and he optimized some shedskin functions which caused it to be faster than psyco again. Psyco is better if you want to redistribute your script and don't want to require a compiler, Cython is better when you absolutely need your code to import other modules or work alongside the rest of your code, and shedskin is better when you want your code to be much faster with little hassle. All of these projects are excellent, and I'm not advocating one over the other, which is why I tried them all with great results and reported on them.
From talking to him, he appears quite mature, that sentence is uncharacteristic of him in my opinion. Maybe he was frustrated with it?
Working on Windows with anything but Microsoft tools generally suck.
Just makes me hesitate to create dependencies on a project run by someone who for ideological reasons would flippantly disregard a large population of computer users. Lots of people dislike winbloze, but lots of project managers also know how to be political about it: "we regret that maintaining the code for windows was just too much of a time sink..."
It would be nice if this book were written for Python 3. I mean sure, 2.6ish is still the most commonly used, but publishing a new beginners book on a deprecated version of a language seems counter productive to me. 
No, if I recall correctly the Windows maintainer didn't have time for it any more, that's why support was dropped. Besides, you aren't creating dependencies, it's a compiler...
&gt;purely because I needed a name and I didn't plan on publishing the code. I have to admit, I'm guilty of this as well. &gt;I used the RBF kernel, you can see it in lines 88-89. The code in your post doesn't have line numbers... ^^; In any case, that's a solid choice; I've used it myself and achieved good results. Unfortunately, I don't have a blog post on it... maybe I should download the Iris dataset and write one up. I certainly have the time right now between terms... &gt;Really, I don't think it matters if it's 47x or 57x or 40x, [...] Oh, absolutely; I was just curious. ;-) Besides, the extended run-time actually does at least some good - repeated runs would have less of an effect on run-time, decreasing variability and therefore shrinking your confidence interval bounds (increasing accuracy). It's quite an impressive improvement. I'm definitely going to check out ShedSkin. I've already heard of Cython and Psyco, so I'll keep those in my back pocket, but for the most part I'm looking for hassle-free. Thanks again for the great post!
Well... working with microsoft tools is no better.
Oh, the code on the post is just a snippet, the entire file is a bit further down where it says "in the shedskin repository", click on that.
dependencies = boss expectations ("why did it stop running fast!?", "sorry boss the creator stopped supporting xyz..."), functionality you didn't use to maintain compatibility, but now will reimplement using since it no longer works for you (NumPy), etc.
 &gt; Four years ago I was relatively good with Delphi (Pascal) Woo.. a fellow Pascal/Delphi user... we seem to be quite the oddity. &gt; However, I forgot 90% of it Nothing to sweat about &gt; Now, for Delphi, there's Borland Delphi 7, the IDE I used. It was quite simple Yah... Microsoft bought most of their devs now, so it's dead. &gt; the GUI enables you to add buttons to the form Yah. Python doesn't come with such GUI support. You have to choose from one of several GUI proving toolkit. In my opinion, the easiest to pick-up is Gtk, but the best is Qt. Both provide form designers similar to or even better than Delphi. One neither the Gtk+ or Qt designers provide that Dephi did was the GUI datasources/tables thta could be manipulated.
Ah, I see... You're right about that, then.
It's not the same code. Unless your computer is 100x slower than mine, which is likely not true. Where did you get 4000s from (or 100s). What did you run?
I also recommend not using a large ide for python dev, however straight vim and (I presume) emacs are really rather bad for editing python. Vim for instance screws up indentation, and the lack of good syntax highlighting gets old quickly. Fortunately its issues can be fixed with plugins, I recommend searching for and reading some of the many guides to setting up vim for python. If you read through a bunch of these, you can use them to identify and try just the features your like. A good starting point would be [this guide.](http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/) You mentioned simple interfaces as well. Somebody earlier recommended using gtk or qt. These are great and should be used if you are building a production quality desktop application, however if you just want a simple interface or form, I am of the opinion you give tkinter (which is built in to almost all python installs) a try. As it comes preinstalled with python there are no dependencies or issues with external libraries. For simple applications I find it to be quicker than using either of the aforementioned heavyweight solutions. Furthermore if you share your program people need not deal with installing or setting up something like qt or gtk. Pygame which was also mentioned provides decent hardware acceleration and a simple graphics interface, for starting to write games, anything with accelerated graphics, or things which require input from (joysticks, mice, etc), I recommend it. It is not however suitable for forms or other desktop style applications.
Interesting. :) I'll have to keep this sort of thing in mind when I look at OSS codebases.
Even distutils does. .egg-info directories are always installed for python &gt; = 2.5. 
"binary" eggs are disliked by a few developers because you get a zip file containing the source tree, and one of the side effect is that you can trace into zip file. Setuptools install things using its own standards that slightly vary from Distutils, leading to a bit messy site-packages. We want *one*installation standard but we currentrly have 3/4 of them. But other than that, setuptools was a good innovation and solved a lot of problems 2/3 years ago. the series of PEP we have written (345, 376, ..) are inspired from setuptools and are making some of its ideas Python-level standards. 
The reason I care is _________________. *come on, seriously, I've never heard of this site. Give me a little something to work with, please.*
The intention of this book is not to give you all the information so you can quickly get through this book. It requires you to build up your required basic skill set. BTW. Have you googled for it? That what I did and I got to a Wikipedia page which told me exactly the right thing. Even if I never would have heard of cmd.exe before.
I did google, but I didn't find a solution that worked exactly like he implied. In any case, my rant is that this guy recommends a very specific set up, but does nothing to show how to do it. I didn't download a book on how to use google and its frustrating as hell. 
Most people don't use editors to build guis, so the choice here is rather limited. Personally, I recommend PyGTK together with [Glade](http://glade.gnome.org/).
You are at odds with many when you say don't use Python 3 yet, You *should* use Python 3, unless you know you require external libraries that that will not be ported to 3 in time for you. Your text seems far too conservative. - Paddy. 
If you had comments on the site, the Python community could state any issues it has with your pages.
I will disagree with the emacs and vim people here. I'm using Eclipse + PyDev plugin on both Mac and Linux and have been for several commercial, proprietary Python-based projects. It's a lot more friendly than vim or emacs. **And you get a visual debugger!**
agreed
Looks like a PHP problem.
sorry, I modified the version in the shedskin repo a bit, to terminate sooner, which is useful for testing. remove 'if iteration==20: return ..' to get the original program.
Ah, yes, the original program terminates after 2100ish iterations.
I will look into a comment system like the django book uses on it's site where you can add a comment to any given paragraph.
You'll also be at odds with people who feel that threading in Python isn't "bad", but rather requires the developer to understand when its use is beneficial (which they should really know anyway, regardless of language). In addition, pushing people to Twisted is also not a universally recommended path. Again, it really depends on the use case. For my own work, I've tried using Twisted in multiple places, only to find its support for one thing or another lacking, and/or its documentation lacking, and so in the 5 or 6 cases where it *might've* been a good fit, I've passed and used other solutions which you would probably call "harder" than Twisted, but which in reality aren't any harder than Twisted. Further, using Python 3 is not a problem if the modules the app depends on have also been ported. Making generalities like this and putting them forth as "commandments" is probably not the greatest idea in the world. 
Now that you showed me the site, I'm wishing for it to come back online so I can see what they're actually selling. Except for one thing: Why PHP?
The differentation is made that using threads to solve concurrency is not always a good idea. Threads in Python are hard. Threads are hard in any language, if all you want is to have concurrency then there are other models to look at. Also, a small remark on my side is that I did not write all the current content on the website (while I do agree with it). I will reconsider my recommendations on Python 3. It wasn't written yesterday but a while ago and I should look into the current state of Py3k (and it's libraries, and it's distribution on common operating systems).
I'm already pretty happy with PyCharm as an IDE; "IntelliJ for Python". [Public preview](http://www.jetbrains.com/pycharm/download/index.html#linux).
To the extent that 'Dive into Python' is not the problem, 'Learn Python the Hard Way' is not the solution. I learned some very basic skills from Dive into Python, but the more important aspect of that book is one that is lacking in 99.99% of all books that attempt to be instructional: inspiration. Mark writes in an encouraging, friendly manner. You get the idea that he's excited to be telling you about Python, and that you should be excited to learn about it. The excitement and enthusiasm toward the subject is catchy. How (mechanically) students should learn anything is debatable. The one thing that is not debatable is that students learn better when they are enthusiastic toward the topic and excited about it. Books like 'Learn Python the Hard Way' are probably *capable* of inserting the necessary bits into a person's head who is forced to sit through it, but it's not like anyone is gonna rush over to a book whose very title is intimidating and whose methodology harkens back to the pre-internet era. When you realize people can click away the second they get bored, you start to value some personality and excitement in the writing, in addition to the lessons. I think Mark Pilgrim did a fine job. Also, I don't think Mark ever puts his book forth as "the only book you'll ever need". The assumption is that this is a launching point to get you grounded in fundamentals, after which you'll be more prepared to get into more advanced documentation with confidence. My experience is that this is what DiP did for me. 
The are not disabling HTTP authentication for the stream API.
Speaking as someone who uses python threads daily; and who is maintaing the multiprocessing library - Python threads aren't "hard" - like any data structure or tool, you have to know when and how to use it. The same applies to multiprocessing (which uses processes rather than threads), fork(), or any other concurrency construct. Waving your hands and saying "Just use twisted" is terrible advice. What about things like multiprocessing, I/O bound threads, gevent, stackless, kamaelia, etc, etc, etc. Python has a rather broad community when it comes to parallelism and concurrency, and so while it's good to be opinionated (we all are) an anonymous site, used as an authority stick for the IRC channel, should probably be more reasonable. As others have cited; your Python 3 text leaves a lot to be desired. It's one thing to say "A lot of libraries haven't ported, so YMMV" and a whole other thing to treat it as if it's a bad practice to use it. Heck, linking to dive into python 3's site, or expanding on it makes sense. 
Jesse, thanks for the concrete remarks on the Python 3 piece. This thread was started to hear some good criticism and it seems as if most of it is directed at the threads/twisted and the Python 3 piece. I will take the remarks in this thread and adjust the tone in the Python 3 article later this day. As for the Twisted piece I will try to get an article on there which shows when it *is* appropriate to use threads and when it is appropriate to use other measures (such as Twisted).
&gt; Four years ago I was relatively good with Delphi (Pascal) &gt;&gt; Woo.. a fellow Pascal/Delphi user... we seem to be quite the oddity. Two is even. Count me in so we can be three and remain odd. :-P /me remembers running Delphi 2 in a 386 with 4 MB of RAM (yes, I was both a poor student AND insane enough). Excellent experience. You wouldn't hit the Compile shortcut unless you had "ran" a syntax check by reading the code out loud :-)
My best book recomendation is: [Beginning Python Visualization](http://apress.com/book/view/9781430218432).
ooh, ooh, I have some suggestions! Put your name on the site, so that it's not anonymous. Contact info would be a bonus. Explain that these are not, per se, actual Python *commandments* but rather your and other's opinions. Long-time 'net people will implicitly understand that but newbies (at whom this site is presumably aimed) may not. Give a slightly more nuanced (i.e. accurate) depiction of the discussion on threading, GIL, events, etc. Avoid describing "packaging" and related things as "nonsense" :). Note, you can always point at the Hitchhiker's Guide to Packaging, http://guide.python-distribute.org/quickstart.html.
Python 2.X is still the recommended version, afaik.
I am most certainly considering linking to the HHGTP and also write some stuff about packaging in the future with distutils2 and the newly accepted PEPs as well as about the current state packaging is in. The nonsense was a referral to the current state of packaging (which is hardly documented and hard to do). I will include names of the people who wrote the pieces as well as a general contact for the website (which will be me) besides the future possibility of comments on the articles a la the django book website. Thank you.
See this comment: http://www.reddit.com/r/Python/comments/bx4wu/looking_for_writerssuggestions_for/c0p0hnk :-)
Where exactly are you running into problems?
&gt;The entire basis of his ill-informed rant was the function name I used in the early chapters, "buildODBCConnectionString", to explain string manipulation, lists, dictionaries, and other basic datatypes. OK... so why would you start off with an example which has no meaning or relevance to the beginner? People new to programming have no idea what ODBC is, and may not even yet have the skill needed to parse the name as "build ODBC connection string" without staring at it for a good long time. It's meaningless, and the results are unverifiable, since the beginner has no idea whatsoever what an ODBC connection string should look like. Hell, I've been programming for over 20 years and I don't know offhand what ODBC stands for.
This is one of the 4 'Essential' books for python. 'Learning Python' &amp; 'Programming Python' by Mark Lutz, the 'Python Cookbook' (multiple authors, can't remember their names) And some 4th one...can't remember it off the top of my head atm though.
Check out "Hello World!" by Sande - published by Manning. It's written for kids but it's actually a very cool intro to python and programming.
Well, if you can create a project not using these features you're happy. """ Shed Skin will only ever support a subset of all Python features. The following common features are currently not supported: * reflection (getattr, hasattr), eval, or other really dynamic stuff * arbitrary-size arithmetic (integers become 32-bit on most architectures!) * variable numbers of arguments and keyword arguments * multiple inheritance * nested functions and classes * unicode * inheritance from builtins (excluding Exception and object) * overloading __iter__ and __call__ * closures """ 
[pycharm](http://www.jetbrains.com/pycharm/index.html) isn't bad either
Yeah, most Python programmers have three or four windows open. One, a text editor. gedit in Ubuntu is pretty great. Check out the plugins. You'll eventually want to try "vim", but not right now; you'll know when it's time. Two, a terminal window with the interactive interpreter running. Just type "python" and enter. It's the fastest way to try new stuff or test syntax. Experiment here. Three, the window where you can run and exercise your code to see how it's working. Four, maybe, is a web browser open to the standard library or the docs for some additional module. See also "pydoc -p 50000" in a terminal window.
Why not PYQT? I have been struggling to choose between these two.
I guess you mean http://github.com/jdinuncio/pyforth/blob/master/pyforth/forthvm.py
I'd use ipython, rather than regular python for your interactive interpreter. 
hmm, i'm curious to know why.
oh yes, with python a visual debugger is a must! i think you are doing it wrong. vim for ever!
and you will have to pay for it soon.