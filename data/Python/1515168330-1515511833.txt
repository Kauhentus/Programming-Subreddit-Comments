PyQt Designer is pretty dang mature...
What **you** can and can't do doesn't matter.
Let's be honest, how many programmers use Python as their primary language at work? Also, I love Python, but as soon as we move into GUIs it just can't compete with C#, Java, Javascript.
It's just useful for different things. Java is definitely more verbose and has more boilerplate to write, but it's also stricter than Python and is a semi-compiled language, which means that it sometimes catches errors more quickly. It also forces you into an object oriented structure, which tends to encourage you to design your programs better rather than jamming a big list of functions into a single file. I also find they have strengths in different kinds of applications. I tend to prefer Java for writing games (pygame isn't great), python for doing numerical analysis work (numpy and matplotlib *are* pretty great), and Fortran, C, or C++ for the big parallel numerical simulations.
No. XCode is terrible. And breaks a lot with nearly every new release. Your debug symbols will be lost often, for no reason. When you upgrade either the OS or XCode itself, you will have to reinstall a bunch of old iOS libraries. Every upgrade. Swift is not much better. Sure, the language is nice. When you can use it. It will eventually surprise you when you need to learn objective-c just to box and unbox variables in some non-standard way, or to interact with a core library. Then you'll have to deal with language instability, and being forced to rewrite huge swaths of code every time apple upgrades the swift language. The alternative being your app breaking on every iOS device, or you telling your customers not to upgrade their operating system. So basically Apple forcing you to do a bunch of unnecessary BS, all because they can't properly deprecate an API. It's an embarrassing ecosystem. 
Oh is it? Then why is it so hard to just place two buttons on a form next to each others that both fill their half of the form? I put a horizontal layout container on the form, I tell it to stretch to the form, I put the first button in it and I cannot for the life of me put the second button in the container too. It's placed anywhere else but in the horizontal layout. I don't know why. I look at the XML code of the form (that UI XML that can be used in PyQT) and I can see the button outside of the horizontal layout. And I cannot even edit it by hand in the designer. Why is that? That's not what I call mature. Maybe it's just a bad first impression. But like I said, since we don't really require UI in our applications I gave up on that unusual case pretty quickly and went on with command line arguments. It is just not intuitive which in my book is a major aspect of maturity. /e: forgot something
&gt; way faster than we do in any other language. how? no way it should be possible with equal quality of C++ codes
Sure! The way I learned definitely wasn't perfect. However, it's hard to recognize what you're learning imperfectly/incorrectly as you're learning it. I personally think with a good enough guide/tutor you can start with any language (maybe even assembly :)). Five years ago, though, with the tutorial I was using and the starting place I found myself at, Python was not a good fit. That's not everyone's experience, but it was mine.
Electron Now go on, downvote me!
I do. Python 3, as a matter of fact. I used to write Java, and I taught myself Python precisely so I could either rewrite my stuff at work, or get a different job. It worked. Added bonus: I get paid more now.
Syntax is the first hurdle to learning a language, so I'd say that makes java harder. Also, the standard library is messy.
Do you mean something like fromkeys()? https://docs.python.org/3/library/stdtypes.html#dict.fromkeys
Sounds like you got ahold of some really bad code when you were first trying to learn Python. The entire community really embraces the mantra of `There should be one-- and preferably only one --obvious way to do it.`
I can do task scheduling with this? In other words, I can have my script try the website x number of times per day, possibly during time windows I assign? &gt; Downside is, if you never used AWS before, you'll have quite a lot of documentation to read. Yeah, I know zero about any of this. This may be a case of https://xkcd.com/1205/
If you need a sophisticated UI, you should just write the app in platform-specific code and be done with it.
And? Maybe they decided to get into Android dev, or any other number of places that Java is used. This is a non-post. Who cares?
Yeah, probably. What I'm saying. Cross platform is difficult. One of the reasons why Python UI is still problematic in my opinion. 
&gt; However, it's hard to recognize what you're learning imperfectly/incorrectly as you're learning it. &gt; &gt; The point is that, imho, there's very little you can learn by following tutorials and using libraries. You learn to program by solving problems through code. You need to write that code and to solve those problems. If solving the problem is understanding some documentation of an API that solves the problem for you, you're barely solving any problem. That's why I advocated that noobies should not use libraries. I mean, I can see why you don't want to write a request library on your own, but that's pretty much all I'd allow to a starter.
sarcasm?
If not plainly wrong
Complexity matters
It's actually possible to just finish a software project, and have given it all the features you want it to have. It used to be pretty normal.
I want
with hundreds of memory leaks in c++ codes FTFY
It looks like. My major requirement is that I can quickly build an app that suits my needs. Most of the time that's just some quickly clicked UI for some algorithm. Recently I've tried to build an RQT plugin for that project that I'm working on in my job. Simple state observation. Nothing fancy. I don't have the time to get deeper into QT Designer, unfortunately. And because of it's steep learning curve I quickly gave up on that, also because other things were more important. Mature in my case means, that I can quickly build a UI without any hiccups and without having to learn too much about the designer tool I'm working with. Just intuitively clicking here and drag&amp;dropping there and everything works as expected. QT Designer has not been like that for me, unfortunately. That's my individual and acute requirements in my job. And they are also part of my more general requirements of a UI designer. It has to be easy to use without a too steep learning curve. And also it must never do what I experienced with QT Designer: irreversibly change the appearance of a totally different control when I edit another control. Like, let me just put that button there... huh? Why's that other button so small suddenly? CTRL+Z... HUH??? Why's that button now somewhere else on the form??? CTRL+Z... HUH??? What's going on here? It has never been like that before! Things like that must not happen in an environment where you can put hours of work into! Not for a designer pro user and even more so not for a complete designer noob. So, expectable and predictable behavior even for a beginner is a major maturity aspect in my opinion. 
I actually agree with Guido on that one. Undue complexity for such a rare problem. https://mail.python.org/pipermail/python-3000/2007-July/008663.html
Don't let it rub you in the wrong way. The person probably found out six months in that his/her employer measures performance by LOC.
Why is `pip` not an option? (The `pip` module isn't installed? `pip` can't reach PyPI?) How are you installing packages? Are you using `easy_install`? Conda? Just using whatever packages ship with the OS? When bootstrapping internet-free segregated environments I have used `easy_install pip` or https://github.com/pypa/get-pip to get a working `pip` installed, and then used `python -m pip install ----index-url MIRRORURL dependencypackage` to install.
I'm writing a python framework to quickly generate and post Alexa Skills for the Amazon Echo. I've published over 50 skills in the past month, and I'm on track to being to most active developer (by skill quantity) for the Alexa ecosystem. Everything from the Lambda functions to the Selenium automation for posting the skills is all done in Python :)
and a single thread in python
I assume /u/jgardner isn't referring to what applications they can make, but rather to what techniques they can employ. Python's dynamic nature makes possible various designs that would be difficult or impossible in Java — for better or for worse. 
Downvotes are because you misread what he said. The benefit in Python is savings in *developer* time, not *computing* time. Yes, "equal quality" C++ code would likely run faster. What /u/jgardner was saying is that it would take you much longer to write that "equal quality" code in C++ compared to Python.
Isn't python semi-compiled?
&gt; pygame isn't great I think we can all agree that pygame sucks ass, unfortunately.
No problems with that so far. Things where performance is important are either broken down in a way that I can use a JIT or I use CUDA for that. GIL is also pretty tame.
Both languages are interpreted. With Python, the source code is interpreted line-by-line into the "Python VM" bytecode and then executed. Comparatively, Java source code is translated into JVM bytecode, and then when it's actually run on the JVM (which is a JIT compiler/interpreter) that bytecode is optimised into native instructions on the fly.
Right, but reading docs vs having a really well written and explained tutorial are two different things.
Or the commonly sensed "someone must still be using this, so it must be working".
i’m going to keep looking (i hate reinventing the wheel if i can help it) but it looks like something that I might have to invest time into doing.
replacing javascript by python will be a good idea too :)
Protip: Never announce goals you haven't put any effort into. 
Java is slower, harder to write, such as any less-abstracted language, compared to Python. Python is great for prototyping and small projects, and learning, but it's not great for scaleable, fast, and low-level processing. It's gotten better at low level processing by turning some of the code into c bytecode, but Python still consumes far more power to do similar operations as Java. That being said, I hate Java syntax, and it's too wordy for regular boilerplate, and simply having to install Java JRE is considered a security risk.
Also: https://pypi.org
Different people like different things. Some of those people are wrong. /s
He meant javaSCRIPT, but it's the same thing really.
Last I checked it hadn't been updated in quite a while, either. Is there another python game module that people have migrated to, or is the language just dead to game dev now?
A lot actually... Both my current and previous companies primarily use Python on the backend and it's never caused an issue.
I do. I work with a Django backend and I love it so much.
PRIDE AND ACCOMPLISHMENT
To be fair, you wrote "design your programs better". Forcing all code, object-oriented or not, into classes, one (public) class per file, is not even a structure I want. To me, that "bare minimum of structure" is *harmful* vs no structure at all.
Now that we have std::unique_ptr memory leaks are actually pretty hard to introduce in c++. I know a decent number of developers who won't let code with 'new' or 'malloc' past review.
The problem is that the "little bit of discipline, solid unit tests, solid integration tests" part takes longer than writing a few extra lines of C#. To give some context, I've written 20k lines of C# in the past year on a medium load application (1000+ requests/second) and have also worked at a billion dollar ruby/elixir startup with high load (55000 requests/second). What I've found is that static typing eliminates an entire class of errors and that actually allows me to write less code. This is great because I save time upfront from not having to write the code and I save time later from not having to maintain (and debug) it. Also when I inevitably need to refactor, I can enlist the compiler for support and have confidence that I have changed every reference that needed to be changed. The difference between refactoring with regex in vim (ruby) and refactoring with resharper in visual studio is night and day. The fact that things like flow and mypy even exist begs the question of why someone would want to add static type checking to a dynamically typed project to begin with. Why wouldn't you just use a statically typed language to begin with? The reason for this is that python and ruby are great for startups. In theory you can get an MVP running more quickly than if you used a statically typed language*, but successful startups quickly realize that maintaining a large codebase in one of those languages is very difficult. They have too much code to restart in a different language so they need to bolt on a solution that could have been implemented at the start. *In reality, I don't entirely believe developing in ruby/python is even faster up front. As long as library support is equivalent across the languages being compared then the time spent typing is negligible. Figuring out the general algorithms is what actually takes time. C# is crossplatform with .NET Core and is a very elegant language. .NET Core isn't totally production ready in terms of library support, but the VM is already caught up to java, and it will probably get there in the next few years. Here is some example code I wrote yesterday, and I honestly thing it is pretty terse and selfdescriptive. ``` var logEntriesNotOnJulyFirst1995 = logEntries.Where(entry =&gt; !DateIsTarget(entry.Date)); var groupedLogEntriesNotOnJulyFirst1995 = logEntriesNotOnJulyFirst1995.GroupBy(entry =&gt; entry.Date, entry =&gt; entry); var mostRequestedUrlsByDay = new SortedDictionary&lt;DateTime, string&gt;(); // RedBlackTree foreach (var grouping in groupedLogEntries) { var requestDictionaryForDay = CreateRequestDictionary(grouping); var mostVisitedUrlForDay = requestDictionaryForDay.OrderByDescending(entry =&gt; entry.Value).ToList().First().Key; result.Add(grouping.Key, mostVisitedUrlForDay); } using (var file = new System.IO.StreamWriter(@"C:\Users\Sean\Desktop\MostVisitedUrls.txt")) { foreach(var entry in mostRequestedUrlsByDay) { var formattedDate = $"{entry.Key.Month}-{entry.Key.Day}-{entry.Key.Year}"; file.WriteLine($"{formattedDate}:{entry.Value}"); } } ```
I did find some things hard about Python starting off - for whatever reason "range" didn't make a lot of sense to me, but seeing C style loops made more intuitive sense to me as a beginner. 
Still is.
 TypeError: Can't convert 'bytes' object to 'bites' implicitly 
I so much loved the tutorial. I had to share it after reading it. 
&gt; That doesn't apply to finding packages for a language that has evolved since the package got abandoned. It may or may not. If a package implements FTP, that's a protocol that has been stable for a long time. Python's evolution over the last five years wouldn't invalidate an FTP protocol implementation, unless it uses syntax that has stopped being valid. Likewise, anything that is a thin binding on a C library probably has no reason to use any fancy new Python language features, because it is just trying to faithfully represent the C API. If the C API is stable, then the Python wrapper will probably remain stable as well -- even if the underlying C library has a bunch of new implementation features that are all exposed through the existing API. The existence of some new feature in Python doesn't automatically imply everybody in the world has to start using it.
Including lines with a single curly brace.
`flask.g`
Same, it's easier to work with others outside of Python as well. Teams fight over styles and other petty bullshit instead of getting work done. Dogmatic programmers LOVE Python because there are 20 opinions on everything and "my opinion IS right." I really like coding by myself in Python though, I can get a lot of work done fast.
I remember seeing research showing that it was the second most used language behind JavaScript in 2017.
&gt; and simply having to install Java JRE is considered a security risk lol
Let's be clear, if you program Java in 2018 you should actually program in Kotlin. Everyone hates Java, that's why its most hardcore supporters wrote a transpiler. Just like ES6 / TypeScript for JavaScript, nobody is writing JS in actual raw JS anymore. Quit comparing Python and Java, that argument ended 5 years ago. Compare it to Kotlin or ES6 if you must.
Personally, I blame this more on the developers only caring about whether or not things work on the systems they use rather than taking the time to make things work across OS's. I think this hurts getting people into the industry as well. Let's face it there are still many more "normal people" on windows systems than any other. This is where we can get people hooked on building things.
What's a compiler? - Python
I use Python as my primary language at work. I think C# is still my language of choice, but Python3 coupled with PyCharm is a close 2nd.
I learned the first way you mentioned, and it wasn't a breeze. I had no idea what Python was doing with its data structures when you added to them, or if you used something like a list comprehension, and I wanted to allocate just the space I need in a list. I have to dissociate from the traditional memory model in order to decide what I really want to do.
Why hasn't anyone mentioned object oriented yet.
i will, thanks, im new here.
Imo Python is a more powerful OOP language than Java (for example multiple inheritance)
Java makes me harder than Python.
C# at work for me. I'm pretty rusty at Python to be honest, I try to use it for one off scripts to keep it fresh, but I'm not sure that's benefiting my Python knowledge much. I do enjoy it though.
Python is strongly typed too.
You should be able to account for this by adding padding to the screen capture image (think adding a white border around the outside of the actual input array). It's a common use operation, particularly in computer vision and neural networks (e.g. CNNs).
&gt; It also forces you into an object oriented structure It doesn't force you to do OO. Yes, it is an OOP language but you can most definitely write procedural code in Java and I'd be willing to bet a novice programmer with no knowledge of OO would end up with a far more procedural application than an OO one. It doesn't force anything. Case in point, the application I support is written in Java and has very little OO structure. It's mostly a tangled mess of procedural code.
Just use Jython!
True.
Oh I was just speaking to the difficulty of the language. Not which is better. I totally take Python over Java for my needs.
Moron 
Ah I see, I think Java is a great language as well, but Python definitely makes some things easier to do than Java.
Bullshit.. give me ab example
If you know the diameter of the smallest circle is. You can skip D-1 pixels while scanning per row.
My guess is that, worldwide, there are more people on Android and iOS systems than any other, these days. But no this really doesn't come down to laziness, it comes down to there never having been a decent story for using any non-Redmonds-blessed language on Windows. They didn't figure out until just recently that if it's running 24/7/365, it's not running Windows, and now they're slowly cottoning on to the fact that people are mostly interacting with web terminals and not desktops anymore. If we want to get people learning on Windows today the best way -- unless they solely want to do desktop apps -- is to have them spin up a Linux VM on it.
Oh I don't think Java is a great language. It is evil. I have been scarred.
If what you are doing should be schedule based (eg. something which would be run with cron) maybe Apache Airflow https://github.com/apache/incubator-airflow. Its hard to tell if that fits your use case, but hopefully it helps to at least know about it.
&gt; That's why I advocated that noobies should not use libraries. To what end, though? Should they write their own ODBC connectors? Should they write their own OS libs? Time libraries? Their own JSON parser (actually this would probably be a really good project for a beginner to learn...)? Standard libraries are most of what makes up any given programming language and is much of what makes up the "knowledge" of a language. 
If you want to preallocate with known keys then a dictionary is probably not the right data structure. You could use a class with _ _ slots _ _ or a struct. But usually the people telling you not to prematurely optimize are right. You didn’t really explain why you feel this is bad advice.
Do you feel comfortable deploying that code to production without code review, unit tests, integration tests, and passing all of the system tests? It doesn't matter what language I use, I am going to engage a sane testing policy to ensure the highest quality product possible. I have found that the ratio of testing to lines of code remains about the same regardless of what language I use. So I try to reduce the lines of code and redundant information in the code. I could probably reduce your code above to a few lines of Python, and still keep it under 80 chars per column. Add a few unit tests, and it will be ready for system integration before lunch.
Exactly. Given enough lines of code, you've implemented Lisp, but poorly.
Your rule is much to broad. What about turtle graphics? What about vpython? What about Pygame. Without libraries, all you can do is text manipulation or math. Many consider that boring.
Globals. Introspection. Duck typing. Lisp-y things.
I ran out of time trying to make the Java one.
OSU?
Yeah - I kind of appreciate that I spent a decent amount of time in a statically typed language before moving to Python. I find that way too many Python newbies don't understand what 'types' are and this leads them down the path of just trying random things until code works.
Python is strict with indenting because it has to be. Indentation isn't merely "style" in Python, it's functional in that it denotes a new code block. This is why Python has to be strict with it, i.e. preventing mixtures of tabs and spaces for indentation.
How about: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_latex.html https://techoverflow.net/2013/12/08/converting-a-pandas-dataframe-to-a-customized-latex-tabular/
C# really is a very nice language. If it played more nicely with platforms other than Windows, I think it would have been an ideal choice for medium-sized projects and larger. It's a bit of a statically typed Python with a little more cluttered syntax. As to why someone would want to add type declarations to a dynamically typed language. In my opinion static (i.e written in the code) types are convenient where the types are known while writing the code. Sometimes, however, this is not the case. Types can be created at runtime, by querying the database or reading from a .json. A Qt designer file gives you a QWidget subclass. SQLite and key-value stores hold untyped objects. Any metaclass action results in a class that's generated in runtime. In these cases, having a static type system would make you work with it somehow. It can be generating class declarations from configuration files as part of the build process (which .NET does). It can be creating an "interface" `ISomethingThatGoesInTheDatabase` with subclasses `DBInt`, `DBString`, `DBUserProfile`, etc, thereby duplicating a class hierarchy (and yes, I've seen that happen in a Java project). I think many of these issues can be overcome by using Object in statically typed code. However, that's *very* frowned upon by static typing people. I think Python type annotations might hit the sweet spot - you can use them wherever they're useful, but you don't have to use them where they don't make sense.
I'm currently using Rust to write a Lexer/Parser/Compiler for Python. It's definitely an interesting language. I do think the Rust community has done a great job at reducing the learning curve a little bit. That being said, it can still be conceptually overwhelming.
Are you implying that the docs for sqlite python module are not well written?
Different tools, different jobs, different uses. Replace your computer languages with tools you'd find in a shop and see how silly the argument looks to non coders. "Hammer is so much better than the screwdriver. And who even understands those socket wrench guys? Bunch of idiots. I'll have you know I have used my hammer as both a socket wrench AND a screwrdriver and it was just fine" Signed: A mechanical engineer that has and continually gets to deal with: C, C++, Fortran, ADA, VB, Python 2.3-2.7, Python 3+, Matlab (R13-R2017b), Simulink, PowerShell, Batch, Perl, Bash, Sh, tcsh, PHP. If you understand If, For, While. You'll go far in any language. Or argue the merits of a claw hammer over a ball peen hammer.
Anything here [Flow Based Programming](https://wiki.python.org/moin/FlowBasedProgramming) of any use?
If I know what the keys are, I don't really want to load them one at a time, right? This is for situations where I have a specific sized table that I want to use for counting. (I was originally going to use a list but decided that they're not really designed for lookup like dictionaries are). I don't consider it premature optimization because I'm not really optimizing anything, just applying what I know about the problem.
The next step is to realise that just knowing about types isn't enough when your program gets big enough. When your program is too big for your head, you need tools which robustly and unambiguously understand your types... like a compiler does. Python is a fun toy, and good for small projects where rigor isn't important. Its leakage into large scale software engineering has been a huge retrograde step, though, caused by a lack of innovation in the field around the time it emerged as a contender around 10 years ago. Fortunately we've moved on, and I look forward to Python's death for large projects as others take over, probably Go.
Ya writing pseudo code, i mean python is way easier than cpp or java
How's your math background?
Yeah, I especially if your only background is in shallow-ish Python. Rust forces you to think of memory usage and other lower level concerns, which Python can paper over for you. 
Ported an older Twitch low-viewer stream discovery website of mine from Node to Python. Uses Flask, Postgres, Docker, Docker-Compose. Links: https://github.com/joshuathompson/shuffle and http://twitchshuffle.com/. I think the people who made http://twitchswitch.tv/ pulled the idea off much better than me but I thought I'd update mine anyway haha. Python is a much better fit than Node for small background scripts running in Docker containers, it was a super smooth experience. 
Actually, I am in the same situation as sindhichhokro. What would someone that has a relatively good understanding of linear algebra stand?
&gt; like a compiler does. Like MyPy does. You want strict typing, you can do it fine. It's done better than it is for most languages (Looking at you C#. Still waiting for nullability for *everything*) It's not enforced at runtime (even though runtime type checking *exists*, it shouldn't be needed if it passes a static type checker), it just shows errors when you fuck up.
It really doesn't.
Here's a sneak peek of /r/haskell using the [top posts](https://np.reddit.com/r/haskell/top/?sort=top&amp;t=year) of the year! \#1: ["Category Theory for Programmers" has been finished!](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/) | [39 comments](https://np.reddit.com/r/haskell/comments/6x7ms0/category_theory_for_programmers_has_been_finished/) \#2: [Fantastic job everyone who made this happen!](https://i.redd.it/9ha4w2o5d0rz.jpg) | [33 comments](https://np.reddit.com/r/haskell/comments/75h6yx/fantastic_job_everyone_who_made_this_happen/) \#3: [Typing the technical interview](https://aphyr.com/posts/342-typing-the-technical-interview) | [62 comments](https://np.reddit.com/r/haskell/comments/64lg42/typing_the_technical_interview/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Stop circle jerking. 
I do. ^^^I ^^^love ^^^python
So where does MyPy not work as well?
What do you mean by AI? Machine Learning / Deep Learning? Or other approaches to AI?
Python3 dev here. We use it extensively for backend work. 
How does Python handle multiple inheritance when two base classes have a member with the same name?
Whichever class is first in the mro is resolved.
I think the problem is exactly that. A newbie don't have the means to choose the only one obvious way. 
QGIS my friend. There are some good instructions online for getting started for generating scripts, and there are a ton of plug ins. 
Check out Cython and Numba.
help me understand .... here are some scenarios. what is happening your infrastructure that requires something else? from your_lib import required_libs try: from your_lib import optional_lib except ImportError: logging.warning('optional_lib not found, xyz not supported' try: import some_lib except ImportError: import some_other_lib as some_lib 
It has been a while since I used Java but I seem to recall nearly every different root module adopting slightly different idioms because why not! Messy did not even begin to describe it.
This is trivial with [rasterio](https://mapbox.github.io/rasterio/), especially if you use [xarray's wrapper around rasterio's ingestion functions](http://xarray.pydata.org/en/stable/io.html#rasterio). 
You can try [ulimit](https://ss64.com/bash/ulimit.html). It's a bash built-in. 
We're on Windows 10. Didn't one of the Windows 10 updates add bash support? If not, would I be able to download bash and have the ulimit builtin available?
I hope the bash on windows supports ulimit, but I am not sure. Didn't think you were limited to windows. 
Animation and VFX pipelines are almost unanimously built using Python. You'd be surprised!
That doesn't make your python code run faster.
Memory leaks? In C++? This isn't 2008 kid.
The idea would be to eventually cut out the middle man and do the calculations and raster creation through an IDE. Don't get me wrong I love GIS and will continue to use it, but making scripts that can be run independently from a program like Q or Arc GIS is appealing
How can there be feedback based on one 80seconds video?
And it is a nightmare to refactor.
Hell yea now this is exactly the kind of thing I am looking for. Thanks!
Cpp is an overbloated mess of a language.
Is this too underpowered for what you want? https://petl.readthedocs.io/en/latest/
That's not true. You don't do just text manipulation or math. You compress files, convert them, and do plenty of other stuff. What I meant is that it makes no sense to use libraries for everything when you could actually learn something to make it without them. 
But that's not the point for a learner. A learner should focus on solving problems. Not writing months and months of applications by connecting to X and Y api with some loop in the middle. That's why most self-made programmers feel they're not learning imho: they are not solving problems. One of the best things I made when learning was writing a node.js docx to html converter. There were libraries for it, sure, but I learned more by doing that without using any library than I would've learned by months of "building applications". Libraries solve business problems, not programming problems. New programmers should stop learning programming by using libraries, as there's very little to learn from it.
My experience is this, although honestly I gave up on it a while go so it's a bit out of date: * Terrible website / forum * Very noobish community, which is not all bad, (I love the enthusiasm) but it's the blind leading the blind * You should have seen the fiasco that was the "website re-write". I had to stop following /r/pygame, it was a total disaster. * Very un-pythonic API * Terrible packaging. Good luck trying to get it working with venv, Python 3, etc. * I'm sure progress has been made and someone will say "That's all fixed now!" but guess what: fuck you, it was a prerequisite, not a 10-year-later bugfix! * Ugly ass website * Shitty performance (although totally acceptable by Python standards, it's just not a good platform to start with, I think.) (I doubt this is a Pygame issue though.) Don't get me wrong: I love Python like a son. I just don't think it's a suitable tool for GameDev. Yes, you can do some nice little prototypes in PyGame (I've played around with it a lot!) but PyGame is NOT a well-made Python library. Maybe some day, but ... why some day, and why not 10 years ago?
&gt; actually this would probably be a really good project for a beginner to learn... Yeah, you could definitely do worse for inspiration than what comes bundled with the language. The batteries included side of Python is what kept me programming, though. If you have to invent the universe before you can make a toy script then not a lot of people are going to be there at the end.
Python is scripting so way easier 
Far easier to refactor 1M lines of Python than 5M lines of a statically typed lnguage.a
is something like Faktory to run backend jobs what you are looking for? https://github.com/contribsys/faktory
https://www.youtube.com/user/sentdex and https://pythonprogramming.net/
Yes! You got the joke!
This is good for machine learning: http://scikit-learn.org/stable/tutorial/index.html
Lol
Give an example where you feel break or continue is appropriate, I'll give a nicer refactor.
ah okay, well in that case, there definitely are a few libraries out there that might make it easier, georasters comes to mind. I understand not wanting to use QGis because it is unbearably slow and crashes a ton. But I still always sort of did dev mode within QGis because its easier to play around and test results. You might find a library that has synonymous functions that you can port out to standalone scripts.
There's nothing Qt cannot do in regards to GUI apps. If you're looking for touchscreen GUIs, look into QML. It's used for mobile apps and PyQt5 comes with it. Download Qt OpenSource from their site to get Qt Creator. This will give you not only Designer, but the ability to design QML pages also, something pyQtDesigner cannot do. Qt Creator also comes with TONS of examples, including a data transfer app, similar to OBD2.
Of course. Using libclang to refactor 1M to 100M makes no difference. Besides Static typing doesn't mean more lines.
Jython is using Py 2 and seems almost abandoned from a quick look. Same story with IronPython. I hope these projects get revived eventually. 
The infrastructure around Java (Java EE, JNI, CORBA etc.) is "harder"/more complex than the Python equivalents. Java the language is actually easier to grasp in its entirety than Python: it doesn't have metaclasses or descriptors, for example.
Since C is a subset of C++, it's only as much of a mess as you make it. 
Well Java turns some errors that would be at runtime in python into compile time. It's not all bad. 
Not at all, I'm just wondering what the questionable parts in the official python docs for sqlite were, since python has generally very good documentation with examples, both the tutorial and the module docs. If a new user finds some part of documentation hard to understand, it might be worth reaching out the python documentation contributors and providing some feedback. It is very valuable for them to learn how's documentation seen from a newbie's perspective.
Personally I feel like not having to debug missing semi colons is my favourite python feature. Less bracket matching debugging is good too, especially as you can optionally wrap anything you want in brackets and do whitespace-independent formatting. But up near the top of my favourite features is a "we're all adults here" approach to things like private members and mixing types. It gives you a multitude of heuristics as you're reading code to tell if the code you're reading is quality code or not, which extends to being able to tell if it was written by a Java programmer. 
The last time I used the .NET ORM stuff it used code generation. It doesn't surprise me to know that it's better these days, because the language designers generally make good decisions. If you're working with two untyped systems - by which I mean systems that would work with all types - then you don't need to know what you're working with. For example, an event/notification system. The code that handles the method arguments doesn't need to know what type they are. The best you can do is treating them as `Object[]`; creating `INotificationMethodCallArguments` is much worse than just not knowing what type it is. Once someone decided to create a superclass or an interface (it's an is-a relationship, right?), you have to create classes that wrap existing classes and it becomes a huge and useless waste of time. Likewise a storage system. It takes stuff and stores it, then retrieves it for you. You know what you're going to get, but the storage system doesn't know what it's going to give you. It should handle `Object`s, not `IRetrievedItem`. When I worked in Java, there were so many useless types. Hence. If you know the type, by all means write it down. If you don't, don't. Don't create a new type so that you have something to write down. And while in most cases you know the type, the overhead of these useless types was a huge weight on the back of that Java team I was part of, because these types then invade normal code, conversions start happening back and forth... It's not pretty.
Not to be rude here (but you did insult all java programmers so I don't feel that bad), but if debugging semicolons and matching braces is still an issue for you than your opinion really doesn't matter.
Raylib is another good one. I've been messing around with it using custom rust bindings and it's been plesent. 
I know what you mean (been there), but is this a reference to xkcd or something?
Since you've mentioned you're on Windows you might want to consider using VirtualBox and create a VM with limited memory. If you're using Linux you could do that with docker which is much lighter and easier to restrict the memory. https://docs.docker.com/engine/admin/resource_constraints/
I'm OK with verbosity, most of the typing is done by the IDE anyways 
Hey all, I'm a total Python noob, and I *just* finished my very first solo script. It's just a tiny script experimenting with print formatting and logic, but any old-school South Park fans might appreciate it... name = 'Hat' answer = input('---------------------------\nWhat is the status of {}?\n\n1) Free! 2) Not Free!\n\nYour answer is: '.format(name)) if str(answer)=='1' or answer=='one' or answer=='Free!' or answer=='Free' or answer=='free!' or answer=='free': print("\nGive that man a baby!!!\n---------------------------") else: print("\nFree Hat! "*3)
As a beginner i find apps that automate common tasks to be the best for learning. 
&gt; For my science fair project a friend and I wanted to test the effect of limited RAM availability on the speed of the language. Everything works as normal, then you run out of memory and the whole machine crashes.
LaTeX is where its at when it comes to custom formatting for publications - whether its the text, the figures, the tables, charts or references. So I'd look into outputtting your Pandas objects to LaTeX. Then you may need to do some customization by hand to get the format to be just the exact way you want.
You are the inmature who cares about downvotes
I save them as files with descriptive names and move them to ~/archive in a folder with the current date as the name. I put that folder in another folder of the current year. Later if I need to find them I just use grep on the archive folder. 
&gt; Vmprof uses system signals to halt the program and record the stack - while this is convenient, it causes problems whenever the program is waiting on a syscall - normally, when it is doing IO. Because the signal must be handled in userspace, the kernel must abort the syscall it's currently handling with an error and then call the signal handler. I believe that's why vmprof [uses `SA_RESTART`](https://github.com/vmprof/vmprof-python/blob/57bdd0f8ce9b69d646a0b59248c0a3b8102b41b1/src/vmprof_unix.c#L267).
Python is great for startups.
I made one that tells me what upcoming movies are coming out at the cinema. Then I further added to the app so that it would create a collage of the movie posters for the upcoming movies and have the month and year under each poster. And now that’s my desktop background at work :) Just find something you’re passionate about and think of a way you could make it automated and nifty :D
Sorry, I should also say that PyInstrument looks really cool! Traditional profiling tools are really arcane and painful to use, and it's sad, because profiling should be something we reach for casually all the time. So it's exciting to see people worrying about making profiling more accessible. The reason I thought of vmprof is that it also has a very short path to usability: `python -m vmprof --web myscript.py` immediately gives you a helpful GUI (and it can even give useful profiles for mixed C/Python code). OTOH it's also kind of rickety in my experience – they seem to be short on maintainers. So who knows, maybe it's worth comparing notes :-).
Using pygame to write a Happy Mrs Game for my son.
Could you use setup tools and then upload them to pip. Then you could just pip install them as a requirement to your project. 
I'm not sure what background would make java seem easier? A java background? I started my python job never having written a word of the stuff and it was like writing English to me and quite intuitive. Hell I feel if I make something up it might work in python. I can write away in a text editor for python and that works fine, with the verbosity of Java I can't, things like that make it harder for me.
Okay... Yes, that's one way to do it, but... What about the places where the modules are actually used? We would have had to catch those calls as well in the case that a module is not available. That were a huge amount of additional `try-except` blocks and another huge amount of actual error handling (avoiding all calls to that module). We tried that. It's ugly. Specifically for `matplotlib` that hasn't made much sense to us. It's totally okay that the program runs with or without `matplotlib` since `matplotlib` does not alter anything. The `MagicMock` objects returned by the wrapped `import` do no harm. They just pretend to do what `matplotlib` was supposed to do - without actually doing it. A dry run, if you will. The user will be informed that `matplotlib` is optional and not installed so that they don't wonder why visualization does not work. To help you understand: we were after a solution where most of the already existing code could remain untouched. Only specific modules are marked optional. That is, if a module is missing that is not explicitly marked optional, Python will still raise an ImportError. Otherwise it will only show a warning, but the program will continue to run. The thing is, the existing code base is quite large and quite old. We still have instructions/syntax in there that date back to Python 2.5. Messing with that code aside from upgrading it to at least Python 2.7 is a risky challenge. Furthermore, it's political. There's currently no official project that involves working on the code. So everything that has to be done, must take as little time as possible. **Wrapping** `import` was the quickest and cleanest solution we could come up with within the available time. It may not be beautiful but it works and we're okay with it. It's also documented so that future developers will understand what's happening. 
I hope they were able to safely recover the beloved family member(s) who were kidnapped and held for ransom.
It's what my whole company uses as or only language, with a small bit of C.
&gt; Static typing simply allows for a faster and more secure workflow in large codebases Citations please.
So what is it about python that's harder than Java?
Is Docker a VM?
Very interested as well, thanks for the snippets summing my thoughts.
http://evanfarrer.blogspot.nl/2012/06/unit-testing-isnt-enough-you-need.html
example = {x: None for x in y} But based on what you’re describing a collection makes more sense. That being said they’re all right that this is sweating the small stuff. For one, using Python and getting the count when querying the database is going to be faster than anything Java can do. 
Has anyone used this with Pyqt? 
I do deep learning at a .NET shop and I think you're absolutely correct.
&gt; Trying to read through a code flow in a sufficiently large code base with a dynamically typed language is a nightmare Honestly, that just sounds like a badly designed application. I doubt adding strict type will make any difference to its legibility.
Don't put that voodoo on us!
`public static string foo`
```a = 10**100000000``` worked for me just took about 5 minutes. Guess its to be expected at that value
I mean I do exactly that. Here's an excerpt from some code of mine. try: import matplotlib.pyplot as plt except ImportError: plt = None print( "Warning: could not import from matplotlib. Echogram.show() will not work.") Now later on in the class that would call imshow ... def show(self): ''' Plot an image of the echogram. ''' if plt is None: logging.warning("matplotlib was not imported, cannot plot") return plt.imshow(self.data, aspect='auto') So your code (apparently) ... * literally changes the semantic meaning of a python builtin * alters behavior the user may not be expecting * probably makes the code seem odd to a new comer I would prefer my solution - which isn't full of thousands of try / excepts - any day. 
Remember guidelines aren't laws. 
Awesome I will look into it next week. Do you want any feedback on it?
The reason for that, specifically, is that Python’s dicts are very advanced data structures under the hood. In 3.6 they’re both compact and ordered; see https://mail.python.org/pipermail/python-dev/2016-September/146327.html for details. What you’re asking to do doesn’t really make sense in this context.
Even in the world before java fx. People have built some beautiful things with Swing as well
Coffee industry?
There is a correct tool for every job, each come with their own benifits and tradeoffs 
Look at the `description=` keyword argument: https://docs.python.org/3/library/argparse.html#description. That gives you a basic description on the help page. You can then play with the formatter class: https://docs.python.org/3/library/argparse.html#formatter-class. As the docs say, set the formatter class to the raw version to keep your own formatting.
I said citations, not one paper that simply discusses unit testing, from which I get the impression of strong bias.
Just my 2 cents, put a small description of what your site is and aims to do on the login page
I'd estimate I use 55% python, 44% C, and 1% bash scripting for work, so I guess that makes Python my primary language at work. 
Learning Flask, the goal is to build a simple ideas tracker since me and my friends have trouble coming up with hackathon ideas. Hopefully I'll learn enough to actually help them at the next hackathon we go to lol
That's pretty much what we had before. But it turned out really hard to maintain because other developers of certain modules (plugins) did not take the fact of optionality of some modules into account. They just imported without checking and since the plugin system that we have just bulk loads everything at once, a broken plugin could bring the whole program to its knees. It's not my job to fix plugin after plugin like this. So instead of trying to teach every developer to obey our optionality rules, this method gives them the freedom to code like all the modules were installed, and the checking takes place somewhere else. To be honest, the whole project has become awfully hard to maintain because so many developers with different kinds of experience had their fingers in it in the past. Mathematicians with some basic programming skills as well as computer scientists with all the theory but no practice. I'm the first one who throws in a good amount of theoretical *and* practical experience and I think I know quite well what I'm doing. Yes, it tinkers with Python builtins and it may confuse future developers at first. But I also think I've documented/commented it sufficiently so that any future developer should be able to quickly grasp what's going on. It may be removed again at some point in the future when the overall project has a better structure. One of the things I intend to do is to build a better plugin system which is capable of dealing with plugin meta data and load plugins on demand instead of just bulk importing everything at once. It's a lot of work and this `import` wrapping is just some dirty little helper for the time being. 
Go with Qt. QML is so much better than Kivy, plus there are examples of literally anything you could think of.
Yeah but Python forces you to write lines. In java you can code in one line One line&lt;more than one line Dummy
But shortcuts are a lifetime in the making. 
Oh, nice, thanks for the tip!
Honestly, this is why I wouldn't want to use Python at work. We used Smalltalk for a while, and the number of times people would completely not understand what they they were supposed to be using was astounding. I had to fix a ton of error checking in an ex-colleagues work because he never tested any of it, and we had an error class we were supposed to return when an error was identified, basically a custom exception class, but he just returned strings describing the error instead. So, whenever anything he wrote ran into any kind of a problem, the system would throw a NotDefined error when the system tried to log his 'error'. So, having been burned by typeless in the past, it's a bit of sticking point for me. I know it shouldn't be a problem, and of course you want to light the torches and grab the pitchforks and complain those people should be fired, but in reality it's just not that easy, and type-safety is one of those little things that just makes it easier to deal with copy-pasta programmers. 
Lol all you turds who vow to a certain programming language like it's your favorite sports team.
&gt; ... just applying what I know about the problem. But to what advantage? How would your way result in easier to read or more maintainable code? Could you show what you want to do in Pseudocode or Java so I know what you're trying?
I think it's confusing to bring a database into the conversation. Did he say that the data comes from a database?
I'm trying to make a definition bot but when the api the package i'm using uses (PyDictionary) cannot give me a definition for 'from' and 'the', that's when you know you have to switch.
What do you use to make that stuff though? People always say “oh I made X and Y” but I’m assuming you need libraries for that sort of stuff right?
Who makes this?
Python is fine, as long as you use parenthesis on if statements. Otherwise I have a seizuee reading the code.
Why?
Woowww what a great idea I think I'll create something like that to update me on any upcoming events at the hobby shop 
Interesting I'll give it a shot 
Sounds like you want the image recognition from `pyautogui` You can read about it on [Automate the Boring Stuff](https://automatetheboringstuff.com/chapter18/#calibre_link-3663) by /u/AlSweigart. The whole chapter introduces the module, but the particular linked section shows how you can snap your mouse directly to a predefined image. You just need to have an image of the circle handy.
Do what pylint says
This 'article' shows as a bunch of code on my android
Fuck off. 
I did the same.. as a complete computer science /programming noob with no formal education in the subject it was extremely difficult for me to grasp OOP.. By chapter 3 of my Java book my eyes opened and I could start putting the big picture together. Classes, encapsulation, public vs private / protected ect, getters/setters, object state, project structure and separate easy to read class files instead of a single file slammed with difficult to read L33T one liners calling 38 functions packed with for loops passing collections around. TLDR; I suppose python is too simple and too easy to use poorly for me to have learned me anything meaningful at the very beginning which frustrated me to the point of giving up multiple times 
Software Engineering Degree. Just got Admission in ME for Software Engineering. I would say 7/10 in maths
well duh maybe it's my stackoverflow experience where we are expected to get explanation for downvotes.
You should be sending new welcome messages on the server itself when people sign up. There's no reason to be doing this manually. Just do it in the backend on the server using whatever language the backend is written in. Just use conditional formatting on the spread sheet and you're done. https://support.google.com/docs/answer/78413
I am trying to solve and NLP problem where the input is a vector. I am following a paper in which they have obtained good results using B&amp;B so I want to do that. This is that paper. https://www.researchgate.net/publication/220220106_MCMR_Maximum_coverage_and_minimum_redundant_text_summarization_model 
You likely want Airflow.
https://youtu.be/M_eYSuPKP3Y
I'm not sure what is the state of pyside, but I hope it is on-par with pyqt? I finally got lazarus working so for now I will use that for a couple of small cross platform applications, I know it pascal not python.
Because it's Silly Potted hAM
Can you download the spreadsheet and then highlight the rows? And maybe reupload it after? Maybe that would be easier if the google docs api doesn’t support highlighting.
Made this over the holidays &amp; ended up thinking it was pretty fun! Any feedback welcome :-) Lots of awesome Python libraries helped out: * NLTK, to avoid repeating words, even in inflected forms (i.e., realizing that 'bed' and 'beds' are related) * wordfreq, for gravitating toward frequent-but-not-too-frequent words * Numpy, for doing the heavy lifting — words are selected using word vector math, which involves lots of matrix multiplication * Sanic, for blazing-fast request processing * h5py, for efficiently storing and loading the vector representations of words Code's on Github at http://github.com/alex-lew/robot-mind-meld -- suggestions welcome!
reference types (ie classes) can *be* null, but currently can't be typed as **possibly null**. The benefit would come from saying that a certain thing can *never be null* in the type system, which you can't do in C# now
fe2fdab56f57 by dinov (56 downloads)Mar 8, 2011 4:49 PM Associated with Release: 1.0 Beta 1. Python Tools for Visual Studio - initial commit 
Maybe he needed a job?
Everything can be null, with nullable. &gt;The benefit would come from saying that a certain thing can never be null in the type system, which you can't do in C# now Oh that's not what he said tho. 
Yes, Python gives you a lot of freedom, so it requires some self discipline, and is concise and expressive, so it requires some art and reasoning. Simply put, Python empower and trusts the developer, where Java treats him as a monkey. If you hire monkeys, or you like coding without thinking too much, Java is the choice. But looks like the Java community discovered it , because latter versions added a lot of feature to enhance freedom and expressiveness.
I wonder if WebAssembly can be used to accelerate this.
Good bot, [we](/r/redditthoughts/top/?sort=top&amp;t=year) thank you. [We](/u/jab-programming)'ve actually [dumped](https://github.com/jalanb/jab/commit/3d6e66e4) it, but [you](/u/GitHubPermalinkBot)r link is good.
Thank you Please\_ for voting on GitHubPermalinkBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Hi, just a quick question. Would you happen to have a data science position for someone graduating with a Physics MSci. July 2018. My masters project heavily involves applying machine learning to medical MRI data using TensorFlow. I also have previous work experience developing software for automated medical diagnosis. I'm moving away from the medical side of technology and go into the more directly technology oriented companies. I'm within commuting distance.
How complex would the math be? Just recently finished a BSc in Math with ~80% average
I completely agree. I enjoy Python and use it for the majority of my hobby projects... but if I was going to build and maintain a large and complex codebase, I would want static typing, which is why I stick to Java and other JVM-languages like Kotlin. There's also something to be said for easy parallellism, out-of-the-box support for Unicode, simple packaging and community that agrees on standards rather than reimplementing the wheel every &lt;arbitrary unit of time&gt;. But I won't say that here, lest I get burned at the stake by the Python community's anti-Java zealots.
Ok I'm stumped: https://imgur.com/a/VhZEw
😂 Maybe [otter](https://en.wikipedia.org/wiki/LGBT_slang#North_America)?
Unpopular opinion: don't come up with ideas. You've got time for that later. Anything worthwhile is out of your reach as a beginner now anyway. While learning, get on github and check out the trending python repos: https://github.com/trending/python Find something in there that looks fun or interesting. Active github repos almost always have open issues. Really active ones will have issues that the primary devs want to fix, but are lower priority. Get the modules, play with them, figure out fixes for the issues. Submit pull requests. As a lead developer doing hiring, I can tell you that a history of submitting to open source is going to go a lot farther than any letter of recommendation. You can get involved in the community and see your code go into real modules that people will use for real applications NOW. There's no reason to come up with your own ideas or find your passion... yet. You'll get there.
I began reading up on it today, thank you so much for the insight! It looks good for a version 2 of my project. Ty
I am sure it can be. It may even be attractive to take some C++ algorithms and translate them via emscripten, since compuation times may surpass pageload times. But rightnow it is a skeleton, an an example implementation. Things like GPGPU may also be very interesting. I sincerely hope people will use it to experiment with and to contribute to. What should stay and grow is the API, but preferably with different backends. However that's still only wishfull thinking.
Yes, sure. Feedback and contributions are very wellcome!
but nginx already logs all that information
Working on a large team with programmers who have a wide variety of skill levels will make you appreciate a strongly typed language.
You can also specify which method to call by writing `BaseClass2.method(myobject, args)`.
It sounds like what you really want is static analysis, not static typing. Static analysis is more powerful with language restrictions, but there's still a lot you can get out of it for a dynamic language. Check out https://github.com/mre/awesome-static-analysis
Self respect.
Finishing Flask App for a Client
Python is not good for game developpment anyways. It's too slow for modern-day gaming. You can do game dev, especially small games or turned-based games, but for adventure/platformer/FPS/anything else basically, forget about it. You cannot emulate physics/render images/and also render light on sprites and expect the game to run at 60 FPS or more, even with a beast for a computer. You'll need a lot of optimization to even get to playable framerates and that's just bad, cause a messy code is harder to maintain (which is often the case when you optimize). I tried pygame and pyglet, none of those really do much for game developpement anyways, besides rendering images. You still have to write an engine (pymunk is great for physics though) and that's just too much work for the benefit. You can use unity though, or unreal and have a full game engine to use however you want to do whatever you want. It's not that hard to go from python to C# if you're really proficient in python. The syntax isn't all that different (you lose list comprehensions though, and dictionnaries if I'm not mistaken) but C# looks a lot like if C++ had a baby with python. And with a game engine you just have to write the logic of your game and not bother with writing a lot of code without seeing any progress.
That's evil. I like it!
Had a similar project where total cost of items was to be highlighted in a Google spreadhseet if it went above a certain value. I used pygsheets http://pygsheets.readthedocs.io/en/latest/index.html
&gt; Anybody can view a Notebook. Did you even click the link? Hmmm. Okay. TIL.
F
But that would require a whole packaging pipeline to publish them right? I'm thinking more along the lines of common utils idioms like mapping to dictionaries, pickling to file and so on.
/r/learnpython for starters...
Just guessing here but is it rife with other beginners or more catered to those with my particular background?
No , I really want to read it , and I get downvoted? 
I am past combining "urinated" and "invaded" and we're now in the "showered and puked" territory. I'm afraid to think where this is headed. 
the official python tutorial, then the rest of python docs
It's not, really. Once u have learned how the version control software works -git/GitHub in this case-, u can start to look at the code an me see which issues u could solve. Analizing other dev's code will also make ur own abilities improve.
Yeah that's the answer here. Go to the official python docs
&gt; having been burned by typeless in the past Please be careful with your terminology as Python is strongly but dynamically typed. I find it frightening that some folk think that static type checking is the solution to everything, when they should in the same breath state whether the type checking is weak or strong.
I played on my mobile phone and twice I clicked on the wrong button. I ended up restarting the game instead of going to next round.
I saw table and was running on almost no sleep 
Sorry I was sleep deprived and misread part of what you wrote. But almost every language is going to have a way to interact with a database. However, there are best practices on querying the data which is why one of the best things you can do regardless of your preferred language is learn how to effectively use SQL. 
It is one of many. You can write performant Python programs that are not huge monoliths that give good returns on learning an IDE. Python is cross platform, you might develop/deploy on multiple platforms and prefer to have tools that work across platforms. Visual Studio is not the first on Windows - you need to de-throne developers current tools to cause them to switch. I like Anaconda which comes with Spyder - that I use on windows and Linux. I also might use Vim and Pycharm as well, but although I do have VS, I have to remind myself to keep trying it to see what its strengths are.
So I downloaded the selenium package which allows webscraping. So the script opens up chrome, goes to a website which posts upcoming movies, then I search for particular types of links (using CSS selectors), as if you ever right click a link on a page and click “inspect element” you’ll see that each link has it’s own ID or class or other means of making it unique. I do the same to get the date. So eventually I have a dictionary with “month + year: [list of movies]”. Then I downloaded the Pillow package which allows stitching of images together. Unfortunately I haven’t automated the retrieval of movie posters yet but that’s my next step. So I feed the script the posters I’d like, it converts them to the right pixel height and width, adds the date underneath, and stitches them onto my collage :)
Get rainmeter, have one color a shortcut to your editor, and the other a short cut to your shell
That’s a really good idea! I’d be happy to offer any help or advice if you hit any speed bumps. I’d recommend starting with a good webscraping package. There are plenty out there but I’ve only used Selenium so that’s always my go-to :)
Web scraping from a university website and creating a program which finds the perfect university for the user
Python is strongly typed. It is dynamically typed. And it has type inference.
https://learnxinyminutes.com/docs/python/ and playing withthat knowledge in REPL shell
[So easy](https://i.imgur.com/2FFUMDG.png)
Well i guess you only need to learn the syntax, so the official python documentation is good and you can take a look at some open source projects. Here are some exercises and their solutions: http://www.practicepython.org/
When there is a potential for confusion between continuation indents and indentation indents (for lack of a better word), PEP8 suggests to double the continuation indent, i.e.: def fancy_long_func_name( my_var_1, my_var_2, my_var_3, my_var_4): do_stuff() 
This is a reference to a published source that proves static typing catches bugs that dynamically typed languages create and can't be remedied with unit testing. How doesn't that prove that static typing has a more secure workflow?
Sorry but I disagree... I didn't make any games or GUI and I always use objects... For me everything is an object because you can isolated the logic in that class and make them easy to test. I always recommend this site with live real examples: http://schema.org/docs/gs.html
Awesome, appreciate it! :)
Unfortunately the quality is poor...
Lookup humblebundle :D Started my grinding today.. :p
Fine, all of this being based on an analysis that is statistically meaningless, using a language that doesn't get into the TIOBE top 20, and doesn't mention the (say) off by one errors that are notorious in the world of weakly but statically typed languages like C(++). If you wish to continue with such languages you're more than welcome to do so, I'm sticking with the far safer strong typing of Python as my time is precious to me. I find the tooling for python perfectly adequate for my needs, although I don't understand why these oh so brilliant statically typed languages need tooling, why doesn't the language do it for you?
How often do I have to say this is about static vs dynamic typing. Off by one errors have nothing to do with that as dynamically typed languages can suffer from those as well. If you want to waste your time in dynamically typed languages and pray everytime you press run on your program that is fine. It's proven that statically typed languages are safer. There is a reason anything safety critical is in statically typed languages.
The fastest way to download a file directly with urllib would be `urllib.request.urlretrieve('https://g.redditmedia.com/Nvyop0c_E4a_UvoyVBV7tn7fQbaCB8IeCgULGhlJlJs.gif?fm=mp4&amp;mp4-fragmented=false&amp;s=865f674de427d88d2c57b62fc1212fe4', 'Nvyop0c_E4a_UvoyVBV7tn7fQbaCB8IeCgULGhlJlJs.mp4')` Please see: [Stackoverflow: Download file from web in Python 3](https://stackoverflow.com/questions/7243750/download-file-from-web-in-python-3) for more info. Also, please ask your questions in r/learnpython next time.
It works. Also, thanks for the /r/leanpython link!
You're welcome :)
It's mostly that, but not all of it is.
Use good naming conventions and docblocks.
Also, for strings such as `----------------------` You can clean it up a bit with `'-'*{value}`. E.g. `print("\nGive that man a baby!!!\n" + "-"*25)`
Don't have link here but google "create a neural network in eleven lines of python". It was a popular article about 6 months ago, and you can create it and train it to accurately identify a small bit pattern. It may serve as a starting point, but it's not very impressive to the lay audience. This comment assumes you're a comp sci student or similar. If you need something that can learn to identify cats from dogs for example, you're going to need to get into OpenCV, TensorFlow, hardware issues, and not sleep for a second between now and then.... :)
fuck off
In my experience, the *old* Packt pub books were pretty good. The newer ones, they've taken to outsourcing to whoever is willing to put words on a page for them. So, the quality has gone down significantly (the learning ansible book in particular was atrocious). Most of these are newer books, so buyer beware. There will likely be a *lot* of Hinglish and errors. But, that said, there will probably be some good nuggets inside too. The videos from PacktPub that I've seen have all been pretty good, albiet some are pretty low quality. Don't expect high end production like something from Lynda.com, but they definitely have been helpful. So, for 15 bucks? Not a bad buy.
Here is a multilayer perceptron network with single hidden layer and a linear activation function. X is a matrix of features and samples, and y is a vector of target values. W is a matrix of the weights, which is size of features by no. of neurons. To train it: W=scipy.linalg.pinv(X.T)@y To make predictions: y_pred = W.T@X.T Simple enough?
snippetslab or gist
Soo, I tried to confuse it, then I made a typo and it predicted that... or does the "\" count as a new line or it doesn't get trough the frontend filters? if that's the case why did it print it as we (the robot and I) are saying it? Either way I'm blown away. Here is how it went: https://pastebin.com/S3UtUq9R
what’s rain meter and is it windows only?
I think they meant the explicit declaration required in Java. That verbosity that many complain about can be nice sometimes. 
The turtle module will likely be sufficient, for 2d Drawings. Here's a video on it: https://www.youtube.com/watch?v=Grc1-j4EvTk
Relatively simple script originally created for personal use, but people here might find it useful, especially if you tend to create lots of stubs before implementing them. Since org files have a very simple, plain text format this can be used even if you don't use org-mode itself.
Yes. People confuse/conflate static typing with strong typing.
Ok this is getting spammy now.
That is a very clever answer!
I tried it after jekyll and hugo and got frustrated with it fairly quickly. The theme I was trying to use was out of date or something so it wouldn't work with pelican. I had similar issues with jekyll. Hugo has so far been ok so I've stuck with it but I'm not wildly impressed with it either. I've been using pandoc to convert my markup to markdown, perhaps give that a try?
Damn noobs can't search. 
Thanks, that’s really helpful feedback! I’ll push them farther apart / increase the top button’s size on mobile.
Just one, throw a [OC] into your title so everyone knows it's original content. Personally I'll scroll right past a lot of stuff that's probably reposts (from Reddit or otherwise), or karma farming, or whatever, but I'll always pause and check out something that was posted as original content by the poster. P.S. I'll probably throw this on my Raspberry Pi tablet as the background, I like it a lot :D
thanks! Will do in the future. Actually when I️ said any suggestions I️ meant for future wallpapers but either works ¯\_(ツ)_/¯
Ha, you're totally right! I did that for print ('Free Hat!\n'*3). No clue how I missed doing it for the dashes. Thanks for the tip!
See the wiki there there is a question precisely about learning Python if you are not new to programming: https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_python.3F
You are either purposively ignoring the study I linked or are just stupid. I never said static typing makes sure that software has no bugs or that testing is unnecessary. Of course I don't make the distinction between weak and strong typing because that is not what we were arguing about. Weak vs strong typing is orthogonal to static vs dynamic typing.
I’d recommend people take a look at Cython 
In my eyes it is rather bad design than advantage. No modern language use this anymore.
Meh it's ok for a few projects. Image processing/OpenCV, Numpy and Cython hardly play nice in my experience. It's better to stick to either C++ or Python but not the mishmash that Cython is. Working with Cython I quickly found limits in just using Numpy and it only compounded when I added OpenCV. Finally, Numba is, for all intents and purposes, simpler for python code optimization which is the only use case I see Cython/Numba being used for (and again those are very limited in what you can do).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programmerhumor] [TB to when I made a bunch of people laugh and piss off feminists at the same time in r\/Python](https://www.reddit.com/r/ProgrammerHumor/comments/7ok0n1/tb_to_when_i_made_a_bunch_of_people_laugh_and/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Figure it out yourself. I'll give you a hint: you'll have to read in the whole file, make your changes, and write out the whole file.
Electric load forecasting using sqlalchemy, pandas, pickles, multiprocessing, Jupyter notebook front-end, and Linux server back-end.
Gonna have to disagree with you there, if you’re wrapping C++ to Python (this you can’t use ctypes) then Cython is far superior to Boost.Python. Yes there are limits when actually writing C++ rather than wrapping it, in which I’ve found this simplest and most idiomatic approach is to have some helper C++ functions/classes and the rest in Cython. Yes, Numba is simpler for optimisation, which again is not what we’re talking about, and if it works for a use case then it’s great, but it’s also limited in scope compared. You can actually mix and match both Cython and Numba without issues. I found though that when performance _really_ mattered, I was always able to get much better performance writing it by hand in C++/Cython. 
All the other answers are good, and here‘s the official google documentation on accessing google sheets, for reference: [Google Sheets from Python](https://developers.google.com/sheets/api/quickstart/python) 
This doesn't require code, just conditional formatting.
Why aren't your lines anti-aliased?
Yeah. I checked his account a while back. It looks like he searches current humble bundles, finds relevant subreddits, then posts links with his affiliate ID attached. Kinda lame if you ask me. 
You are thinking of a function. A class is used when you have an isolated block of logic *and data*. [Here's a famous talk you may enjoy](https://www.youtube.com/watch?v=o9pEzgHorH0). Also, I didn't mean that *only* GUIs and games use classes, it's just that those are very rich in my experience. 
or... just do your homework and earn your degree. there’s no compendium on how to do your job if you ever manage to graduate
But airflow just executes a job. It doesn’t have built in functionality like Nifi of modules that run a tail on a file constantly, keep track of the state of the tail, or sending data to HDFS, or putting to a MQ or inserting into a database. All typical things done when doing an ETL. 
The fact that I am so incapable of programming that even when my program outputs the intended output it's still wrong. 
It's just different, not necessarily harder.
The title says that LearnPython came up empty - this is the next obvious choice. If you don't have an answer, feel free to move on without dumping on a beginner.
There's a big list of python OS projects at https://github.com/lk-geimfari/awesomo/blob/master/languages/PYTHON.md But check out Axelrod - one of the core contributors has made it clear that they are welcoming to first time contributors https://github.com/Axelrod-Python/Axelrod
Get off your high horse and learn like a beginner. You don't want to apply other programming language concepts and idioms to Python. You can learn python in a day if you've known other languages. Look for videos with Raymond Hettinger. Ex: https://youtu.be/anrOzOapJ2E
If I want to actually know the behavior of a method, I need to see the code. Even the most descriptive name represents a trivial amount of code. And doc strings don't help, cause those live with the code anyway. You still have to look at the usage of `func` to find the code. To prevent that, your method names wouldn't need to be just good, but unique enough to define an interface for you. I just don't think the combination of method names alone is a good way to define an interface. It's too easy to conform to one by accident, and the method names have to get super long to present this. It's better to define and enforce this interface through code (Abstract Base Classes, in Python's case). Then you can use type hinting to help as well. Try to find Alex Martelli's essay on "Goose Typing". It's in Fluent Python, but you might be able to find it otherwise.
Really nice, high res?
[Dive Into Python 3](http://www.diveintopython3.net/).
You could check out some modules like PyGame or PyGlet for simple 2D drawing functions.
Please ask in r/learnpython. 
reposted on /r/programming
reposted on /r/programming
Please don't bother with [/r/learnpython](https://www.reddit.com/r/Python) as the advice there can be poor to downright wrong. I'd go to the [main Python mailing list](https://mail.python.org/mailman/listinfo/python-list) which is also available through gmane and google groups, although admittedly the latter is more a spamfest these days.
I'll to to make a vector image if I find some time later!
reposted on /r/programming
Avoiding continue is pretty obvious: reverse the `if` check. Avoiding break could be done by factoring out the loop to a new funcrion and using `return` instead.
Really cool!
Working my way through the [Python Data Science Handbook!](https://github.com/jakevdp/PythonDataScienceHandbook). I spent most of my time off this holiday learning the basics of Python by working my way through [Think Python!](http://greenteapress.com/thinkpython2/html/index.html), and building a checkers game and AI. I want to teach it how to be an adaptive learner. The AI beat me a couple of times last night. Either I'm good at coding, or bad at checkers...
I think you're supposed to run it as an IPython notebook.
Works fine on my computer (chrome) just not on my phone
&gt; The title says that LearnPython came up empty It doesn’t say that and it didn’t come up empty. &gt; this is the next obvious choice Except that it’s scope is something else. I’m sympathetic with OP but as long as the sub is dedicated to news about Python this post is off-topic. Like it or not, if not, petition the mods to change it. &gt; without dumping on a beginner I’m curious what words you’d use if I actually dumped on them.
[Direct link the album instead of expecting everyone to scroll through /r/programing or your profile.](https://imgur.com/a/MsYdW)
You don't know any more about a method based solely on its interface. You still need descriptive names.
r/rainmeter I suggest it because a lot of people over there are making minimalistic desktop themes, and your background would fit in really well. 
The idea behind cronicle is that because doing backups via cron is so common (like triggering a `pg_dump`), why not add a line to your cronfile to take care of the backups rotation once your dump is done ? cronicle takes care of organizing the data in daily/weekly/etc directories, and deduplication too : all organization is done using symlinks, underlying dumps are deleted when no more symlinks point to it. Scratched my own itch, but interested to know if it brings something new or if existing tools use same approach. 
It's more "go there and read the sidebar because the mods have put together a ton of resources for **learning python** at different skill levels"...
I would definitely check out some tutorials and pick up the python syntax as you go. Python as a whole is much simpler than other languages so depending on your background consistent exposure will likely allow you to adopt it quickly.
Pygame makes this very easy. Plug-and-play with coordinates essentially.
I'd focus on learning the mathematics and start modeling them in python as you go. Andrew Ng's Deep Learning Specialization on coursera is excellent, as well as Andrej Karpathy's cs231n lectures on youtube. 
Nice video man, well done and useful!
Thanks, I plan to upload every week :)
Subscribing bro, keep it up.
You should buy a microphone. This is really difficult to listen to.
I've been using Pelican for 1.5 years now, and I haven't had any problems. Haven't yet tried to convert a Jupyter Notebook yet but that is my next goal. There's the occasional poorly documented "feature" but I'm sure that happens with every static site builder (as an example, I still can't get plugins to work). I find that pelican has a large enough use case that if I google a problem, several people have written blogs on it. Hope it helps!
Github doesn't show notebooks properly on mobile 
The $20 Logitech doesn't get it done? Haha I'm planning to this week. That weird static is rough.
Thanks a ton, you were correct! I checked only on chrome, firefox had no trouble displaying it and other variations correctly. Adding `&lt;html&gt;` made Chrome display them correctly too. 
You may find it beneficial to read about [XOR-based ciphers](https://en.wikipedia.org/wiki/XOR_cipher).
Good ☝️ 
To draw PDFs, I used libcairo for this once, but text is really annoying in cairo. 
Would this be a good follow-up for someone who went through the No Starch books (Automate Things, Crash Course..) and has done at least a few side projects?
Neither is strictly better than the other. Also, running arbitrary user-submitted code in a way that's secure is _extremely fucking hard_ and there's absolutely no way you'll get it done in 10 weeks with no prior experience.
Agree. But did any other language ever force this convention?
This week is getting up to speed with Python 3+. All development with 3D apps has been with 2.7, but it's time to put on the big boy pants. I have a bead on a training path, but if anyone has any suggestions, I'd love to hear them.
Alright, but this doesn't have anything to do with Python.
I wonder if there is this type of capability in markdown since it can take latex commands. have you looked into this? 
I recently used PyBind11 for the first time, and it really is great compared to Boost.Python. Figuring out how to embed a Python runtime into a c++ app was basically just a few lines of code rather than a bunch of archaic wizardry.
It's a false dichotomy. Avoid it, and use [Pyramid](https://trypyramid.com/) instead.
[Do you know dis ?](https://docs.python.org/3/library/dis.html)
Couldn't you just run the code in a docker container or something?
You could, if you assume the code responsible for setting up and communicating with the container is completely secure - and trust me, in most implementations it's absolutely not.
What a weird switch. I went from Java to Perl to Python
Don't use xor ciphers for crypto either :) i just mentioned it as it's the standard way of doing what you're doing.
I think the normal this use the technique i showed but insde of __init__ the all and to get the behavior you want. You have to admit changing import is a sign something went wrong.
[I made this](https://i.imgur.com/mV8PQxj.gif).
Not sure what you mean but, apparently, Java and C#. You have to enclose everything in class. For instance, you cannot have single functions in these languages like in Python. Before Java 8 you had to make anonymous class instead of simple anonymous function. 
I've taken a few live online classes with this author which were based mostly on his book(s) which I haven't read. There's a lot of crossover with a lot of other intermediate and advanced python books. I found him to be an excellent instructor and I'm sure the same will come across in his books.
Um, could you fix your first sentence? I'm not sure if I understand what you're trying to say. No offense. Yes, I admit that. But there's not enough (paid) time to fix everything and there are more important things to fix/change/refactor. It may be a temporary solution or, like a usual makeshift, will last in there forever. I can't tell. It works and that's all that counts for the moment. Maybe in the future in the course of refactoring the project it will be fixed as well. Let me quote one of the greates musicians of our time, Mike Oldfield: only time will tell. 
You'll likely want to interface with an HTTP framework. See: [Django](https://www.djangoproject.com/), [Flask](http://flask.pocoo.org/); there are others as well. Also /r/learnpython 
I was talking about Smalltalk.
You may want to watch this video: [Building and breaking a Python sandbox - PyCon 2014](https://www.youtube.com/watch?v=sL_syMmRkoU) by Jessica McKellar. Hope that helps. 
You can, but it's not as simple as you are making it sound. There's lots of info on the web about running untrusted code in Docker containers, but the tl;dr is it's never 100% safe, and full virtualisation is a better sandboxing method, although even that is difficult to guarantee no vm-&gt;host breakouts. It's certainly not an Undergraduate level problem and even an experienced developer would struggle to get a secure, tested solution out the door in 10 weeks.
This is a pretty spammy post. Is there any actual content?
can't you sample random pixels for red color until you find it (or perhaps in a systematic way)? should be pretty quick
https://rcoh.me/posts/notes-on-cpython-list-internals/
I'm with you actually. Except, I will sacrifice readability for performance every time. I'm the kinda guy who uses numpy and what-not (data analysis, not to the point where I need to really on C or Fortran), so when my fans start to spin, I want to know it's for high performing code, rather than inefficient code. 
FWIW, the Harvard CS50 course does something like this - the students run a script 'check50' to run their code thru a basic set of tests to make sure it does everything the lesson requires, checks some basic style, etc. Then once the student is ready, there is a 'submit50' script that submits the student's code for automated grading. The caveat here is that the students are all running their stuff inside instances on c9.io, or a local Docker instance, and I don't really know what the back-end infrastructure is that the university uses looks like. That said, at least some of the code for the scripts mentioned above [should be available on their GitHub page](https://github.com/cs50).
&gt; To manage C# project without IDE is almost impossible. Yeah I agree. That's always a good test of a language for me: "Does this require an IDE?"
This is great. Some of my research was leading me towards Django and Flask but wanted to be sure the next “rabbit hole” was the right one. I’ll take a look at CGI as well. 
My bad, it's actually supposed to be "cod" as in call of duty. I wrote it wrong in my comment/reply
While I fully agree with your message, I must say many of the projects in the trending area may have issues beyond the scope of a beginner.
Sure :) We can make Guide how to categorize programming languages We have the first point to go :) For the second one, I would suggest: Has it nullable types?
links to the classes ?
dang that's rather depressing IMO
dang that's rather depressing IMO
S3 support would be nice. Not everyone stores backups locally. Backups better off site anyway. 
Isn't making code more Pythonic the same joke?
They're behind a pay wall on safari books online
Oh, that's interesting. I didn't know GitHub ran IPython notebooks.
No, I don't think about functions... for me objects are very small (usually responsible of one thing, I guess that is opposite to your style with a massive class)... My 1st language was Ruby so allow me to specially disagree on this.
You could easily use docker machine to start a new docker in the cloud like ec2 or gce. Pretty safe for code execution. 
&gt; When you look at the definition of Duck, you have no idea that ducks could ever have the ability to fly or swim at all. But how much does it matter whether they could *ever* have the ability compared to whether they have the ability at any given time? &gt; I also think it's confusing as all hell and a recipe for disaster in a larger project. Randomly attaching attributes to passing objects isn't a great idea, but nobody's saying that. ORMs work by "magically" adding a bunch of attributes and methods to objects, but nobody calls that a "recipe for disaster". Just because your `Animal` subclasses don't start off with a set-in-stone group of attributes doesn't mean there's no structure. That can be provided by a clearly defined set of abilities and helper functions like `can_fly(obj)`. I'm not saying it's the best or right way to do everything, but it's a perfectly valid way, as evidenced by the *extremely* common idiom of the "file-like object" (anything with a `read()` method that returns a string).
Thank you! This video is a ton of help and is going to give me a great place to start. I probably won't be able to implement all of those ideas but it's very interesting to think of all of the security measures that must be taken. Of course, this is only for a class project and won't be commercialized.
I mean this would only be for a class project so security isn't too much of an issue, I would probably just skip deploying it to Heroku. It's more of a proof of concept than anything just as long as I recognize the security issues in the documentation. 
There is no `+` in your equation. 
PyBind11 was much easier to set up and get started for me. 
Nice man. I shudder at the thought that someone might want a php wallpaper though.
In the order of operations? No, `+` and `-` are equal. `*`, `/`, `//` and `%` (a form of division) are also equal. Read that wiki page I linked or look up any tutorial or math book on order of operations. 
&gt; cronicle is written for Python 2.7 and is tested on Linux and Mac OS X. 2.7? Whenever I see something &lt;3 I ask myself why. 
Sounds fine to me.
I use Nikola and have found it a good experience so far. https://getnikola.com Very active development.
No idea. Maybe try replacing the validate_email line in my code with another similar request from another package. Maybe the site you linked has an API? In that case you could write something with, say, `requests`.
&gt; That's just what you're advocating, no? Not at all. You're clearly not getting it. And somewhat wilfully, I suspect, given how you skipped right over the ORM example, which is by far the most common example of objects having a bunch of attributes and methods that aren't there in the class definition. &gt; Those are still parts of the definition of a class or object, I would say anyone who does anything like this But you're the only one talking about that. If objects gaining attributes and methods at runtime were as inherently bad as you make it out to be, then `__metaclass__` wouldn't exist, and ORMs—which I'll wager were created by much better coders than you or me—wouldn't work the way they do. 
Ok. It isn't, though.
Studying leetcode questions to get a job at FAANG and realizing how bad I am at thinking of solutions that aren’t brute force. 
Well since I’m still an undergrad and only have ten weeks to do this and need something to show for it, I might just have to come up with a whole new solution altogether. Since the main goal of the project is to allow students who are new to CS to check their code and submit it to their prof, I’m thinking now of just making a desktop app with Electron, using [Ace](https://ace.c9.io) as a simple IDE, run the code locally, and then give the student an option to submit their code to a server and have an accompanying website where profs can view and download the submitted code. 
and a shirt
Weak and strong typing has nothing to do with the argument of dynamic vs static languages. Are C and C++ the only language you know? Java and C# are both strongly typed and static. You asked for citations regarding bugs in static and dynamic languages and you were provided with a relevant research paper that you chose to ignore. You are either willfully ignorant or insanely stupid and I feel bad for anyone that has the displeasure of working with you.
cool, i will look into it
It's audible, you can hear every word, what is the problem?
These days every 12 year old seems to able to stream Minecraft in perfect quality. I don't understand why it's hard.
&gt; The application needs login/authentication, to be able to keep track of user sessions, a database (doesn't matter which one), and I'd eventually like to deploy it on Heroku. Based on that statement as well as your experience I'd recommend going with Django. It comes with sessions and user auth out of the box. It does have a slightly higher learning curve, but a bit of that is because it comes with stuff like user auth and sessions out of the box (and a lot more like caching and an admin interface). You can do all of this with Flask yourself but you'll either have to roll your own (which will take a lot of learning) or you'll have to use some 3rd party libraries, but you'll have to learn those too. If you want a book to help you I'd highly recommend [Two Scoops of Django](https://www.amazon.com/Two-Scoops-Django-1-11-Practices/dp/0692915729/ref=asap_bc?ie=UTF8).
I'd ignore the people complaining about security, this is an undergrad project. Your professor doesn't give two fucks about security, if they did they wouldn't give this project to undergrads. Just implement this thing as best you can.
Your typo made me think. How does a snake actually tilt to one side?
If you'd like to avoid getting downvoted in the future it would probably help to explain why you think Pyramid is the better choice.
It's a very poorly produced "class". For free, it fine, but I would look for a better outlet for learning Python. 
If you want to do tutorials that are high quality but won't murder the bank, buy [this](d/B00KQPGRRE/ref=mp_s_a_1_1?ie=UTF8&amp;qid=1515287403&amp;sr=8-1&amp;pi=AC_SX236_SY340_FMwebp_QL65&amp;keywords=rode+nt-usb&amp;dpPl=1&amp;dpID=41T4kK1Ap).
Any mic suggestion?
Expectative, https://images-na.ssl-images-amazon.com/images/I/61S6a-gxD%2BL._UL1500_.jpg reality video
How about something like this: import numpy as np def scramble(s, roll=1): a = np.array(list(s)) buf = np.frombuffer(a.data, dtype='uint8') buf = np.roll(buf, roll) return ''.join(np.frombuffer(buf.data, dtype=a.dtype)) def unscramble(s, roll=1): return scramble(s, -roll) &gt;&gt;&gt; scramble('Scrambled eggs are yummy.') '匀挀爀愀洀戀氀攀搀\u2000攀最最猀\u2000愀爀攀\u2000礀甀洀洀礀⸀' &gt;&gt;&gt; unscramble('匀挀爀愀洀戀氀攀搀\u2000攀最最猀\u2000愀爀攀\u2000礀甀洀洀礀⸀') 'Scrambled eggs are yummy.' You might end up with unicode errors, but I think it's pretty clean otherwise :)
This isn't really a suitable question for this sub. Try r/learnpython and better formatting for your code, as well as more information.
How am i arguing? I said "Sounds fine to me". Go do something useful.
The [Rode NT-USB](http://amzn.eu/hoHxYti) is the best "podcaster" mic around IMO, on a cost vs performance type thing. If it's too much, the [Blue Snowball](http://amzn.eu/hjlReIQ) is decent.
I said "ok." If it sounds fine to you, then fine, you can't hear too good. I don't care. No one cares. No one is triggered. What use are you?
People are entitled to their opinion, relax. I also though it didn't sound too bad. 
For the first time I made something useful for myself at work. We have an old system we remote into for client information, I made a script using pyautogui that will extract phone numbers and emails from the system and place them on a spreadsheet. Learned a lot!
 Ok so the for character in... bit will take each character from the IP address one at a time and run it through the code. E.g ipaddress = 10.168.10.2 So the first character will be 1 It’s not a . so the first chunk of code won’t be ran, we come in at the else statement. So segment length becomes 0+1=1, and we print out the statement at the bottom. Next character will be 0. Not a . so we hit the else statement again and we have segment length = 2, and again print out the bottom statement. Next we have the . So we hit the if statement and segment becomes 2 and segment length becomes 0. Basically this code is telling you how many segments an IP address has, e.g my example has 4, and the segment lengths e.g in my example the lengths would be 2,3,2,1.
Have you looked at SethBling' MarI/O? His bot is interacting with an emulator. So it might give you some ideas. 
Thank you so much now i got it it means that if the character is not "." it adds 1 more to the SegmentLength section. Thanks a lot sir.
No problemo :)
But can you tell me i defined character as "" it means blank but i add it in a for loop i dont understand why i need to define it at first of every for loops 
You should edit it and it will sound way better, takes a few minutes. 
Yeah, I'd prefer to do it with python if possible. He is using Lua scripting for a specific emulator for tool-assisted runs with Lua scripting. The bizhawk emulator has gameboy support so maybe I will just turn to that if I can't get this to work in python. I have tried finding alternative games as well but a lot of gameboy games are ideal for "stupid" bots.
I'm just sick and tired of seeing that false dichotomy over and over. People need to figure out when Pyramid is os isn't a good fit, just as they have to with the two others. Neither of them are the perfect fit for anything anyways. But just let the bigots stay bigoted. 
Old comment, new logo, so probably already jumped from Java to Rust!
Yes sorry - was on my phone. What I was trying to say is that, assuming I understand correctly, the normal way to do something like that would be to use the techniques listed above inside of your __ init __.py file. Then when they import your module that has some set of undefined plugins, plugin detection and mocking happens there. I don't know your architecture specifically but my instinct here is that I would never let this out of design because if this were an app, I'm not sure how you inform the user behavior is faked and if is a library, I may be expecting behavior that never happens. For example, if it was some kind of computational library and it's optional that I have a linear algebra library installed, but I still use that library, my results will be wrong b/c you're going to pretend the function ran. If is a UI, I will apparently think the plugin is installed and be confused b/c it does nothing. It SEEMS from my perspective that it's more appropriate to let your junior devs code fail b/c it is written wrong then write some code that hides how the infrastructure actually works from them.
Example?
Execute the query directly. https://docs.djangoproject.com/en/2.0/topics/db/sql/#executing-custom-sql-directly I've done a lot of PostGIS work with django, none of it included working directly with django, I run all the queries directly against a raw db connection. it's much easier that way (since you can write queries and test them outside of django). 
Like astigos1 says, they're only available to Safari subscribers right now (which costs about $400/year). I'm planning to start teaching them to the general public later this year (spring or summer).
Yes, that's exactly the level its targeted to: *after* you've gone as far as you can with those things you mentioned. (Bias alert: I'm the author/content creator. I think one of my students submitted this link to the subreddit - wasn't me.)
I dont think you need to define character variable at all. Its never used/updated anywhere else, and the for loop initializes its own.
Oh neat, this fixes a lot of the problems I’ve had with Boost.Python, might take a look at this over Cython next time I need C++ interop, thanks!
howdy TorekV, that looks like a standard "initialization" step. it's there to be _certain_ that you start off with a known value. it doesn't do anything much for single runs of code - but, in some situations [like when re-running things], it can be important. however, i doubt that this is one of those situations. the `for character in IPAdress:` otta set that to one char at a time and not need any initialization. what confuses me is the 2nd `if`. that seems to be what the `else` above it covers. take care, lee 
Hey. You still got the problem that the same word will be translated to the same cipher. Besides the fact that there exists much better/more random seeming algorithms I like the that you came up with an own idea, but 70 LOC sounds a bit too much for your algorithm. I got a 5 liner for you: from functools import reduce def scramble(s): return "".join([s[0]]+[chr(((ord(s[i-1])+ord(s[i]))-32)%95+32) for i in range(1,len(s))]) def unscramble(s): return reduce(lambda x,y: x+chr((ord(y)-ord(x[-1])-32)%95+32), list(s))
I've been using Pelican for my blog for almost five years now: http://jakevdp.github.io The Jupyter notebook integration is better than it used to be, but I still wouldn't call it plug-and-play... the biggest issue is you need to find a theme that's designed to work well with notebook outputs. I spent far too much time tweaking my theme to get things working. That said, once it's set up you're in great shape. If you want super easy static blog generation with Jupyter support, I'd probably lean toward [Nikola](https://getnikola.com/). Unlike Pelican, where Jupyter notebook support is via 3rd-party plugins, Nikola has chosen to make notebook integration a core component of the package, so it's easier to get going out of the box. It's also still being very actively developed.
There is no python-centric image format but you will find python modules for most of the popular ones. You might focus your search by looking at something like SVG and Inkscape, both of which have python support.
Any more in this series? Asking for a friends educational experience only I swear
Thanks for sharing.
Before you spend money on a mic check your gain, or mic sensitivity. It could be that you need to make your mic less sensitive. I see from the video you're using Mac. In system prefs -&gt; audio -&gt; input there should be a meter that shows how sensitive your mic is. It should never go red. You want it to bounce up to the yellow and stop.
Username checks out. Recommendations, too.
thanks I will share more Python course with you http://couponsforever.com/?s=python
Not too proud to admit, but I googled that now. Read a long article on serpentine motion. I should be working on my project.
I think some people here have forgotten what it's like to be a beginner. If you are at a stage where you haven't a clue how to build a shitty little calculator or have heard the phrase "python module" uttered about three times so far etc, you probably shouldn't be looking to contribute to github projects just yet.
Yeah lots more coming. You can expect a video on a RAT (Remote Access Tool) that is built with a keylogger and screenshot functionality, and a password cracking neural net is in the works as well.
Check out the video. "Umm" every 10 seconds. Not great production quality and layout. I really would hate to see someone learn from the above option when there are much better options. Grok Learning has a great Python course, but they do charge quite a bit more. 
name checks out
Good luck from the Pythonistas over in Durham.
Packt sucks and dear lord when will these humblebundle threads stop. Mods just make a megathread and kill these damned threats. https://www.youtube.com/watch?v=0kc143SgLQY
What he said.
Spamming, hacking, DDOS attacks, etc. basically to do unlawful activities at massive scale by utilizing other people's computers as resources vs your own. 
do you want to be friends with the benedicts?
For starters you can use audacity remove static.
Get a zoom h1 for $100 or less. Firmware update enables USB microphone mode. It's *very* nice, has a tripod mount, and serves as a field recorder (because it is one)
I respectfully disagree. If you want folks to listen to you for extended periods of time, you're much better off with a better quality microphone. The tripod you refer to is only available in an accessory pack that adds at least 20-30 dollars to the price. Throw in a pop filter for another $10 and you're already more than 2/3rds of the way to the RODE-NT price point which includes those, which is well worth it. If you don't require that versatility and simply want to make high quality tutorials at your main PC, you really can't beat it for the price. Chances are if you're a technology nerd then ~$50 isn't going to break the bank. Though, I admit I might be a bit biased because [I own one and absolutely love it](https://i.imgur.com/kh870Pd.jpg), but I digress.
That's incredible how many problems you ran into. Kudos on persevering. If I could offer a tip, I would move the entire `Packaging and Deploying` section to the top. It applies to all users where the others apply to specific situations, users, and edge cases good write up and good luck with your phd
Why hack ethically at all when the point of hacking is breaking into things? The answer is to develop an understanding of how these concepts are built and executed, and to use that knowledge to improve the security of your systems.
I just hope it is not always this difficult. Thanks for the tip, it does make more sense from an applying to more people viewpoint.
It shouldn't be that difficult. I think you just had a incredibly bad misfortune. Granted i've never submitted packages for anything other than vanilla python with no OS preference, but my main hiccup is forgetting to backup .pyirc when moving to a fresh dev environment. well, i did do a little work with pandas or numpy, but the tox/ci stuff was setup by the maintainers 
Just FYI; I would do map(lambda x: len(x), ip_address.split('.')) to get lengths of segments.
Not going to disagree that RODE-NTs are worth the price, but so are H1s.
Thanks!
I will be watching these for a friend for educational purposes only. 
This is actually really helpful. I'm able to spirit through the basic stuff and get to the meat and potatoes. Thanks!
 The gaming site?
Don't know where you got arrogance from my comment but that's on you. Most others that have years of experience don't prefer to rehash day 1 intro to programming concepts. Take that as you will.
https://github.com/giampaolo/psutil
&gt;- The np.einsum function uses BLAS when possible &gt;- genfromtxt, loadtxt, fromregex and savetxt can now handle files with arbitrary Python supported encoding. &gt;- Major improvements to printing of NumPy arrays and scalars.
Note: This article addresses problems encountered when using tools like Cython and Travis; the official packing guide, linked to at the top of the article, should work fine for pure-python packages. ie: -Register an account on pypi's website -Make a setup.py by copying an example -Make a setup.cfg by copying an example -'python setup.py bdist sdist_wheel' -'twine upload dist/*' 
Where you can buy bundles for cheap
I think this is a cool tutorial, but I also don't think it's accurate to the name. I'd hardly call this a botnet. It's more like a distributed ssh management tool or something.
I did not know they sold books. Glad you mentioned it, looks like a veritable treasure trove.
No problem! :) 
I see a great many streamers, in terms of audio, using nothing more than a USB audio technica at2020 with a pop filter. Used, that mic might cost 80/90$ or so, and sounds incredibly good for the price. A pop filter shouldn't run more than 15$
Well that was fun, reminds me of playing a game of "alchemy", trying to guess combinations of nonsense words. It would be interesting to see a distribution of how long it takes a human to converge with the algorithm. Seems like sometimes it can go quite fast, but if not then it really gets disproportionately drawn-out unless you attempt to game the system. Even more interesting would be a comparison of that distribution using differently trained word-embeddings, if you haven't already experimented with that. My [first trace](https://pastebin.com/A3jxsR7j) was interesting, before I really started trying to reverse-engineer the system (such as observing that it strictly never re-uses any prior words, but only seems to 'remember' exactly one previous pairing of words when looking for a match, while generally favouring more common language). Because of those rules, it seems to have some trouble converging once the answers get quite close without exactly matching. Maybe that's just trouble knowing when it's close enough to give up, and a more generous threshold for "those are the same word" would be the easiest way to make it seem more natural/clever? I did try to 'soft reset' on line 18 to get out of the rut, because I felt like I was running out of related words without going more obscure. It would have been amusing if it had chastised me for making a 'silly' guess like that, which might be quantifiable as a much increased difference after a series of decreasing or small differences. Then again, maybe it is a good thing that it stops short of that uncanny valley of awareness. *After reading some of your well-commented code:* What is the reasoning behind being more likely to reject a candidate guess when it is "too related" to the last three previous iterations? My opinion is that most people can't act like a memoryless process, even when they explicitly try to. As such, I would have expected similarity to the past 2-3 iterations to be a positive factor when trying to magically read minds, even if it should be given reduced weight.
That’s cool, I didn’t find that on my first attempt with it! It still feels like there’s lots of potential for improvement in the area of Python profilers! But it’s always fascinated me, and the design decisions are quite interesting since you’re designing a product that could be used on literally any code for lots of different reasons. 
&gt; Truth testing of an empty array is deprecated. To check if an array is not empty, use `array.size &gt; 0`. I think this will affect me. Does anyone have an idea of the motivation behind this deprecation?
Thanks!
Thanks for this! 
Anyone got sn example how the new printing looks?
your welcome
[Deprecate truth-testing on empty arrays #9583](https://github.com/numpy/numpy/issues/9583).
Thanks for the link. The issue description is quite helpful to understand the change... I still need to think about it but it seems like a useful change to avoid tricky situations
I actually said it because I had a raging boner throughout the video.
This is great! Thanks so much!
Ohhh okay i see! Brilliant thank you all for the feedback :) I'll go over the V.2 and then try and go over the differences using the Wiki! Eventually i'll get the hang of it! Thank you all!
my pleasure
More commonly known as a distributed system.
Do you still need help?
Nope. DNS is administered by a different group so I'd have to email the updated TXT records every 3 months for all the domains. Might be plausible once wildcard certs are available though (roll on [Feb 27th](https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html)). Thanks for the suggestion.
&gt; PS: I know it looks messy but i don't know how to write it here correctly i'm sorry for that. It is right there in the side bar. You did read the side bar before posting, right? Posting code to this subreddit: Add 4 extra spaces before each line of code 
&gt; map(lambda x: len(x), ip_address.split('.')) That's just a slow and silly way to write `map(len, ip_address.split('.'))`. I like `map`, honestly I do, but when I see people fucking it up like that I'm hardly surprised that Guido doesn't like it and why so many people prefer list comprehensions instead: `[len(seg) for seg in ip_address.split('.')]`
Thank you! :)
Hell yeah
&gt; But just let the bigots stay bigoted. lol I don't think anyone in here is actively against Pyramid, but it certainly has less mindshare than Django or Flask. Heck, I've built toy things with it and tend to remember it only half the time. 
Your code is way too complicated and doing too much low-level processing. This isn't C where you have to process strings one character at a time, Python already has functions to do most of these sorts of things for you. I *think* what you are trying to do is split the IP address into segments, then print the number of characters in each segment. For example, if your IP address is '127.0.0.99' it should print Segment 1 contains 3 characters. Segment 2 contains 1 characters. Segment 3 contains 1 characters. Segment 4 contains 2 characters. The right way to do this is much simpler: segments = ip_address.split('.') for i, segment in enumerate(segments, 1): print('Segment #{} "{}" has {} characters.'.format(i, segment, len(segment))) The important parts are this: * `ip_address` is a string; we use the `split` method to split it into segments at the dots; * we then loop over those segments; * we use `enumerate()` to do the counting for us; * starting at 1, instead of the default 0. To make it clear what is going on, run this code and see what happens: print('abc-def-ghi'.split('-')) for i, x in enumerate(['zero', 'one', 'two']): print(i, x) 
Google sheets has functionality like this this built in.
I don't know why you're being downvoted, the security and working of the application are essentially the same thing. Anyone can write a script that just subprocceses out to another interperter or compiler to get a result. But doing it in a secure manner complicates lots of things. And yes, before anyone says anything, docker is probably part of the solution but there are issues there as well. 
The executable might be in that folder but if the PATH isn't set up to point to that folder Windows won't find the executable, so you'll need to set it up. Please see[3.3.1. Excursus: Setting environment variables](https://docs.python.org/3/using/windows.html#excursus-setting-environment-variables) for how to do this.
I ended up getting it to work with bizhawk emulator with python but didn't get the arrowkeys to work but by using random letterkeys for movement it ended up working. It took my a lot longer to figure out than I anticipated and I only managed to get it up and running this morning. It's currently playing Pokemon and just running around aimlessly. It has managed to get out of the room but never left the house. Couldn't be bothered to looking into screengrab or memory reading to setup some feedback into the script and just gave the buttons probabilities to be pressed. Will look into that and perhaps some simple neural network when I have time.
Thank you !!
Delete that JavaScript &amp; jQuery book. It was good back in the day, a bible even, but now it's out of date and will only hold your learning back. HTML &amp; CSS by the same author is still relevant and also excellent. [The Modern JavaScript Tutorial](http://javascript.info/) is the best source around just now, free online or $18US for the ebook. [Eloquent JavaScript](https://eloquentjavascript.net/) is my personal favourite, but it's a bit terse for beginners. There's a 3rd edition due out this year, and if you read it _after_ learning some Python or C++, you'll be fine.
I've also made good experience with Nikola! I especially like the fact that it is also possible to create static sites. 
A developer in a team should think for the team, and the product. Not just themself.
So pandas is advertised there as 'excel on steroids'. There's one thing programmers love, is doing data analysis in excel. :|
what you want to checks out
Thanks, gosh_dang_it. :)
Has anyone went through this course? Is it good material? Is the instructor easy to understand? 
[removed]
Wow, Thank you very much. Its up to me now to take massive action.
Just want to say I enjoy this style of article. Similar to what you see in 'Effective Python'. It's not just "here's how you do it", but "here's some of the background about why some choices are better/worse than others", or "here's what seems like it might work, but really doesn't, and here's why". Really helps when trying to generalize knowledge outside of simple tutorials.
please check
I already have this :( This is an awesome course though. Love Boris. He also responds to messages fairly quickly.
looks like it is working again. thanks
Thanks a lot! :)
Thank you. I've enrolled.
My pleasure. it's good for you.
Followed the link and got it for free as of 7th Jan. Thanks! 
Just paid for this and took it :/ Awesome course!
The tool should include any necessary code needed for the program, but if you have any extra files (images like you said, pickled data files, etc.) you will need to keep them alongside the executable as separate files.
Tafkas we provide coupons through our site to save your money.
Hello Pythoners, recently I made a complete python implementation of Stereo PTAM (https://github.com/uoip/stereo_ptam), a algorithm used to localize a robot and reconstruct the 3d structure of the environments. The code is based on project [sptam](https://github.com/lrse/sptam) and paper [S-PTAM](http://webdiis.unizar.es/~jcivera/papers/pire_etal_ras17.pdf). Further more, I wrote two python bindings (with pybind11): * [pangolin](https://github.com/uoip/pangolin), used to visualize large scale point clouds; * [g2o](https://github.com/uoip/g2o), used for SLAM related optimization(e.g. bundle adjustment). If you have interest in 3D Vision/Robotics/Autonomous Driving/Augmented Reality, and want to do them in python and combine with Deep Learning models, you may find these projects helpful.
Or data analysis with excel documents and outputting to something else.
I know with cxfreeze you can ask it to include a folder. I've used that to include my assets folder before. Pyinstaller probably has a similar thing too
yes you are late!!
And gone again.
"sold out" :(
ENOPARSE
yes you are late my friend
I use docopt and like it a lot, but I believe that the claim that it's an "ultimate replacement for argparse" is far too strong. There are many other options to consider, including but not limited to [clize](http://clize.readthedocs.io/en/stable/), [click](http://click.pocoo.org/5/), [defopt](http://defopt.readthedocs.io/en/stable/), [argh](http://argh.readthedocs.io/en/latest/), [Python Fire](https://github.com/google/python-fire), [plac](https://github.com/micheles/plac) and [clint](https://github.com/kennethreitz/clint).
I am a beginner now i only use what i learnt recently. Thank you for advices. Appreciated.
I tried to change the "character" to a random thing but it still works i don't think i need to do it too :/
I don't know this much now guys, but thank you i will try to learn how to do it with your ways. Appreciated.
Argh, posted after I went to bed. Will you be offering again any time in near future?
First of all, not the right subreddit, not even close. This is a news subreddit about the programming language python, which you have no interest in(as you said yourself). Secondly, RTFM. Seriously did you even the bl**dy readme? Thirdly, i am still far to nice, so here you go: git clone https://github.com/ryepdx/pyethrecover.git cd pyethrecover pip install -r requirements.txt You will also need a list of passwords to try, you may write your common passwords in a file, one line for each, or use something like https://github.com/danielmiessler/SecLists/blob/master/Passwords/10_million_password_list_top_100000.txt Then you can just execute: python pyethrecover.py -w &lt;path to your wallet .json&gt; -f &lt;path to your password.txt&gt; 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [danielmiessler/SecLists/.../**10_million_password_list_top_100000.txt** (master → 7cf6e78)](https://github.com/danielmiessler/SecLists/blob/7cf6e78ff5e7fd21f23cb2b5e109f7731daaf5e0/Passwords/10_million_password_list_top_100000.txt) ---- 
yes sure if in case in future share here!!
Yeah you can delete it, it won't affect anything
A lot of people forget that Cython isn't simply useful for writing typed Python-like language that gets transpiled to C/C++ and that it's also a great way of wrapping C/C++ libraries.
I think you are missing a close bracket on this line: guess = input("Please choose a number between " + str(l) + " and " + str(h) + "."
Just a tip: name your variables better. I know now you have only a few variables and you can remember them all, but when you will write longer and more complicated code, that will come in handy. The variable name should have a meaning of what it is exactly. I see other people already found what was causing the syntax error.
Thanks! Bookmarked your site.
What’s the discounted price with the coupon?
Thanks! That's a good tip. In this code, I named the variables based on what they are or what they do.
Yes, this is the correct solution! In this bit of code, I had tons of errors and I finally got down to this bit and couldn't figure it out. Thanks for the help!
Every video starts with "alllright" hahaha
What makes you prefer docopt over argparse? I've never found any of the replacement to really have anything that made my life feel easier. You appear to have, so can you spare a few minutes to tell the whys and whens of docopt greatness?
Google around for "math required for deep learning", "math required for ai", etc. Stats, calc, linear algebra.
I don't know about "greatness" but I find it easy to use and it has good documentation showing plenty of examples which can be downloaded so you can try them for yourself..
Your problem is that you aren’t converting your inputs from strings to ints(numbers). When you use the input() function, it stores the console input as a string of text instead of the actual number (think “15” vs 15). When you pass this variable to the randint function, it can’t use it, since it isn’t of the type it expects. To get around this, pass each of your inputs through the built-in int() function, ex. x = int(input(“Enter number here: “))
I know about the usage. I've just never found it easier to parse command line arguments by using a DSL. 
There's a "Python For Finance" Packt book in which the author admits to not being a programmer. No problem with that. He then goes on to relate his method for testing code: Comment out every line. Uncomment the first line. See if it runs. Proceed like this line by line though your code until you find the problem! He also offers an alternate method: &gt;To vividly describe this method, we call it the empty shell method. The &gt;method works like this: generate an empty shell first and test it, then add &gt;one line and test it. If there is no error, add one more line and test the &gt;program. Repeat this procedure until you finish the whole program. This is madness and unbelievable in a book that's supposedly been reviewed, but past Packt technical editors have talked about all of their recommendations going unheeded, so I shouldn't be surprised. 
Saw on another thread asking the same exact thing that there are free online resources that are much better than the books in the Humble bundle. Check out the sidebar for some online books and resources. I'm pretty new to Python and I'm just doing the stuff in the sidebar for now. 
Never used these resources, but I've heard mostly bad things about packt books. Also, I don't know about you, but I know I'd kid myself by thinking I would read as many books (the issue not being reading 2-10 books, but reading random books that are not particularly relevant to your interest right now). If I were you, I'd get one book, depending on your level you want one that [assumes you are new to programming](https://automatetheboringstuff.com/), or just [new to python](http://www.diveintopython3.net/). Then once you've finished it, and coded a project or two (no matter how big or small, useful or not, the idea is to acquire mileage), see if you want to continue using python, and if so, which branch of python you want to deepen (machine learning ? data science ? websites ?...) and get a reputable book for this. You can always donate to charity on your own too !
Hi, I'm looking for someone to assist with a one off update to a Python script to accommodate recent Google Scholar interface changes. I'm a PhD Student of Peace and Conflict studies and was using a python script (citenet) to scrape google scholar for citations related to my work. Unfortunately scholar recently updated its layout, moving some of its buttons, and now the script wont work. My knowledge of Python is rudimentary, but talking to the original developer and looking at the github it seems that only a few lines of code would need to be updated to get it working again. My university is closed at the moment over the holiday's so I cant get in touch with anyone studying IT to help me, so I'm reaching out to the Reddit community! The Github is not my own, and can be found at: https://github.com/lecy/google-scholar-scraper-in-python/blob/master/citenet/citenet.py Unfortunately I'm an unemployed New Zealand student, but I'm happy to flick an Amazon (or other) gift voucher the way of anyone that's willing to update this for me - I guess that can be discussed in more detail with whoever is interested. TLDR: I'm in need of someone to update a python script for me to reflect recent changes made in the Google Scholar's layout. Any help would be greatly appreciated, and I'm happy to work out some sort of compensation for your time! 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lecy/google-scholar-scraper-in-python/.../**citenet.py** (master → bc39848)](https://github.com/lecy/google-scholar-scraper-in-python/blob/bc3984801a90520bad3c553362b4c43e5ad8b2fe/citenet/citenet.py) ---- 
Packt is a money-making operation. It employs a group of agents who earn commission. They basically try to throw things at a wall and see what sticks. People who answer six questions about something on Stack Overflow have been contacted by Packt agents asking if they want to write a book. If Packt convinces a non-author to write a book, they're given impossible deadlines. They're also assigned an editor from India for whom English is not their first language (one Packt author has amusing stories of his editor taking perfect English and insisting on jumbling it up). Technical editors/reviewers' advice will be ignored as well, because it's about quantity, not quality. Packt will not fulfill their pledge to publicize the finished product either. In the past they also "accidentally" had an accounting problem that didn't pay any commission to anyone selling their books from their own websites. It's basically self-publishing except there are agents recruiting/tempting people into writing books and taking a big cut on any profits while doing no or negative publicity and editing. Any good Packt books are accomplished despite rather than because of Packt, and the authors tend not to repeat the process. Some have elaborate websites detailing how bad the experience was and how much they were ripped off. https://plus.google.com/+ricardocabello/posts/PDVcovR7Sir http://vpsbible.com/vpsbible-news/vpsbible-wpcop-your-free-membership-packt-publishing/
 while True: for bot in bots: bot.get(host, port)
What bad things did you hear about packt books, I am considering buying one of their books to learn Solidity.
Thanks! Also checked the coupons site and got a bunch of other courses for free. You're cool :)
Ok but can you explain the lines of code?
Thanks! These error messages are very cryptic...
Thank you for posting this. I downloaded it this morning and I'm working through it now. I've wanted to learn pandas for a while and now I have the opportunity. Thank you.
https://www.reddit.com/r/Python/comments/7nmjf6/humble_bundle_has_15_books_on_python_for_12_bucks/?st=jc58pt4c&amp;sh=19e1470d https://www.reddit.com/r/Python/comments/7o1zna/is_the_new_humble_bundle_python_packt_books_worth/?st=jc58pv7w&amp;sh=04abfc6f
Sorry dude, I'm nowhere near interested enough to transcribe that much shit code. You narrow it down to a handful of lines, I'll tell you what they do.
Hi there, I tried your suggestion but unfortunately I had no luck. How do I use "break" 
&gt; I've never found any of the replacement to really have anything that made my life feel easier. Then see the [presentation](https://www.youtube.com/watch?v=pXhcPJK5cMc) on that page. I you ever worked with people that are python developers _sometimes_ or need to maintain many small _tool scripts_ then something like `docopt` is a godsend, because snippet below is **far** easier to understand and maintain than argparse mess. """Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...] -h --help show this -s --sorted sorted output -o FILE specify output file [default: ./test.txt] --quiet print less text --verbose print more text """ from docopt import docopt if __name__ == '__main__': arguments = docopt(__doc__) print(arguments)
you can also try external pprint for python 3.6+: * https://pypi.python.org/pypi/prettyprinter
Just followed the link, confirmed free as of 07/01/2018 21:15 gmt Thanks OP. 
You should post stuff like this at /r/learnpython in the future. I think what you want here is for the player and coin leds to only turn on when the A button is pressed down, rather than happening while the A button is held. Is that right? If so, you need to keep track of whether the A button was pressed last time you went around the loop and only set the pixels when it wasn't pressed last time, but is pressed now.
File a bug report for poor documentation.
I must be a professional developer then. I almost always end up with having to support quirky command line conventions, where docopt end up being underpowered. Take a look at a nice juice bit like this: foo -d something else third --longopt foo -d something --longopt -d else third foo -d something -d else --longopt -d third The details have been redacted to protect the Santa Crunz Operation. All three versions are supposed to give the same result. This is easy to do with argparse, but AFAIK impossible with docopt. Also, I cringe internally. Which of the two FILE are significant in your example, are they supposed to be identical (and if so, what explodes when they aren't), and how much implicit magic do I have to deal with to find out what name the options are given? Long time before my autistic streak have stopped feeling bad about those questions, I'll have made the argparse setup, and probably in as many lines of code as above.
Thanks so much for this thoughtful feedback! A few scattered responses: * Humans are totally primed by previous words, and it would be interesting to try and incorporate this, as you suggest. The current "too related to the last three iterations" rejection was an attempt to avoid obscure synonym spirals (e.g., you and the bot go back and forth listing dog species or color names). It only kicks in for the most infrequent words; when testing, I logged all the rejected words to the console, and adjusted the frequency threshold until it was rejecting only words I couldn't imagine a human thinking of. You can still get into synonym spirals, but at least the words are more common! * I've wanted to add more amusing responses from the bot! It could definitely detect a sharp turn toward an irrelevant word and chastise you for it. Currently, it says "Ahh, so close!" or "Hmm, odd combination," but working in something a bit more sophisticated is on the to-do list :-) * I've wondered how up-front it should be about the rules it follows, particularly the "I won't repeat myself" rule. Should it be enforced for humans, too, maybe? The problem is that this would disable some of the fun experimenting you can currently do, by, say, repeating the same word over and over to try to goad the robot into a certain position or see how many synonyms it knows. * Knowing when the word is "close enough" to count as a win has been a really tricky challenge. I think some combination of edit distance + semantic similarity might be good. It does need to be a bit laxer than it is now :-) * I'd be really interesting in comparing that distribution of time-until-matching using different word embeddings. I wish I had thought of that before posting to Reddit, so it could have done some sort of A/B testing while the site was still in the spotlight / getting significant traffic! (Could still do the experiment, it would just take a bit longer, and I'd have to find new ways to promote the site.) thanks again!
Well, it says in the README that it's in pre-alpha status. So, basically the author doesn't think it's ready for release. So, unless you can read the code to figure things out and patch bugs yourself, I wouldn't recommend you use it. 
Darn. I'm looking for something that can generate chords from ABC notation, but this is all that I can find. Thanks for taking a look anyway!
Love Euler method, always so funny see things just going away
downvoted because you posted this twice already in the past week
&gt; Calling np.fromstring with the default value of the sep argument is deprecated. When that argument is not provided, a broken version of np.frombuffer is used that silently accepts unicode strings and -- after encoding them as either utf-8 (python 3) or the default encoding (python 2) -- treats them as binary data. If reading binary data is desired, np.frombuffer should be used directly. That's fairly surprising. I really like this numpy trend of forcing you to code it in the right way, which it sounds like will make my code faster. They did something similar and broke arrays in numpy 1.10 when they forced you to start masking your data properly. I found a lot of bugs that way. I'm not being sarcastic either. Make me do it right.
Should do one with extra tiny Python logos going across the entire screen at a slight angle.
It is not really cryptic if you know how to read them. I usually look at what kind of error I have first. In your case that is a [TypeError](https://docs.python.org/3.6/library/exceptions.html#TypeError). The kind of the error is in the last line of the Error Log. Now I know what to look for: Somewhere in the program is a variable that has a different type then what the function the variable is used in expects. Or worded a little less clumsily: A TypeError is Raised when an operation or function is applied to an object of inappropriate type. (From the Python Documentation) To know where exactly I have to look I use the Traceback of the Error Log. The Most recent call is in "Guessing Game.py" line 17. There we can see somewhere in the call to random.randint(l, h) is causing the error. Looking at the Python Documentation I can see that [random.randint](https://docs.python.org/3.6/library/random.html#random.randint) is calling only calling random.randrange and the Traceback confirms that the error is thrown somewhere in random.randrange. I looked up the documentation for [random.randrange](https://docs.python.org/3.6/library/random.html#random.randrange) and it says that it takes the same arguments as range. I looked up the documentation for [range](https://docs.python.org/3.6/library/stdtypes.html#range) and there it says the following: &gt; The arguments to the range constructor must be integers (either built-in int or any object that implements the \_\_index\_\_ special method). From that I can conclude that l and h should be of the int type since they get passed to random.randrange (through random.randint) and that function specifies integer types for its arguments. I would then check if they are integers by looking at the documentation of [input](https://docs.python.org/3/library/functions.html#input) (since the return value of input is assigned to l and h). The documentation states that input returns a string. Since a string is not a integer this matches our TypeError. 
Not to be rude, but try the search function. This bundle has been discussed 6 times so far I think, so all your questions should be answered in the posts already posted.
It's still strange that they check emptiness using array.size. That's a new one to me. It seems like it should just be something compatible with lists, so either `if my_array`, which doesn't make sense or `if len(my_array)`, which pylint hates. By using array.size, my code doesn't support lists and tuples.
Will definitely have a look tomorrow at the office! I'm a stereo vision beginner, looking to transition from Matlab to Python so this post comes at the right time! Cheers 
&gt; This is easy to do with argparse, but AFAIK impossible with docopt. I'm not sure what is so hard here, this is fairly simple with docopt. Notice that `else` and `-d else` are different kind of arguments, but this is ui problem really. ~/tmp $ cat test.py #!/usr/bin/env python """Test.py Usage: test.py -d &lt;something&gt; &lt;else&gt; &lt;third&gt; --longopt test.py -d &lt;something&gt; --longopt -d &lt;else&gt; &lt;third&gt; test.py -d &lt;something&gt; -d &lt;else&gt; --longopt -d &lt;third&gt; Options: -d &lt;value&gt; --longopt """ from docopt import docopt if __name__ == '__main__': args = docopt(__doc__) print(args) ~/tmp $ python test.py -d something else third --longopt {'--longopt': True, '-d': ['something'], '&lt;else&gt;': 'else', '&lt;third&gt;': 'third'} ~/tmp $ python test.py -d something --longopt -d else third {'--longopt': True, '-d': ['something', 'else'], '&lt;else&gt;': None, '&lt;third&gt;': 'third'} ~/tmp $ python test.py -d something -d else --longopt -d third {'--longopt': True, '-d': ['something', 'else', 'third'], '&lt;else&gt;': None, '&lt;third&gt;': None} Alternatively, you can rearrange usage to more general form: test.py [--longopt] [-d &lt;value&gt; ...] [&lt;value&gt; ...] and get result like this: ~/tmp $ python test.py -d something -d else --longopt -d third {'--longopt': True, '-d': ['something', 'else', 'third'], '&lt;value&gt;': []} ~/tmp $ python test.py -d something --longopt -d else third {'--longopt': True, '-d': ['something', 'else'], '&lt;value&gt;': ['third']} ~/tmp $ python test.py -d something else third --longopt {'--longopt': True, '-d': ['something'], '&lt;value&gt;': ['else', 'third']} 
Thank you, That's is good idea. I showed her Jupyter other day. But showing her some plotting things might be good to attract her attention.
Try renaming the file from &lt;whatever&gt;.pyw to &lt;whatever&gt;.py; I think the pyw extension means "no console mode".
I was pretty pleased with sololearn:)
Some examples would be nice. As it is, people wont go past the readme.
See https://www.reddit.com/r/learnpython/comments/7otm4x/pynput_breaks_my_enter_key_why/
Congrats for the framework! Maybe you could add some async possibilities
Put them on github and request the desktop version of github and they will render for you on your phone. 
Maybe she could find some interesting information here: https://pythonforbiologists.com
I am absolutely not paying Apple's $100 blackmail just to get whitelisted by OS X security.
Python docx
The one I work on? It's my [https://github.com/SteveDoyle2/pyNastran](Nastran/FEA) reader library. Turns out when you are reading binary files and read them properly, 300 MB/s on an SSD are very possible with Python (and that's with the most horrendous file format in existence). When you do it wrong, you end up reading the file ~500x slower. For me it's a 6+ year puzzle for me about how to manage a 200k lined project that is arguably only 1/2 way done. It's also really nice to get pull requests making the library better without me asking for them.
Re: http://masonite.docsforcode.com/docs/1.2-Directory-Structure the standard spelling is “kernel”. 
No my friends if in future share here
`input()` always returns a string. You'll want to cast to an int while comparing. Another tip: no need for `z = True`, you can check if it's true just with `while z:`, and it's probably better to use `while True:`. If you think you want to get out of the loop later on, just use the `break` keyword inside the loop. You're not using the while either way, and your `else` is in the wrong scope (with the while, not the if). To check if they input an "x", instead of getch and ord, you can do this: key = input('Enter [x] to quit.') if key.lower() != 'x': print('Your admonition here.') time.sleep(5) sys.exit()
I am learning the python bottle framework,to build a small web app 
Sure so Django has several flaws, some are moreso complaints. I've loved Django but after using other frameworks like Laravel and experience some of the design patterns and solutions in other languages it's really apparent. a huge flaw about django is the automagic model migrations. Although it *really really* convenient, i and a few other devs in my Slack group feel like they are always one migration away from destroying the migration tree or having to rollback our migrations because something didn't go right. There is too much finger crossing everytime you run a migration. With Django i've had to completely rollback, even delete my migration history and migration files and start fresh because one of them got messed up several times throughout the development of the project. A lot of other devs as well. How I fixed it, With Laravel (and Masonite) models and migrations are seperated. It lets you run migrations at a lower level which helps prevents migrations from getting messed up. I've spent a year writing several apps in Laravel and not once have I hit a migration issue. another flaw with django is the commands. Laravel has what it calls `artisan` commands which is a helper command line tool to prevent having to repeat mundane development tasks. It centralizes all commands into the `artisan` command namespace. So the flaw with django is you have to run things like `python manage.py runserver`, `django-admin startapp`, `git push heroku master`. The different types of commands seems nonsense to me and once you have used artisan commands it all just makes sense. So with Masonite I built the `craft` command tool which lets you scaffold your project. For example: `craft new projectname` creates a project `craft model modelname` creates a model `craft controller Controller` creates a controller `craft deploy` deploys to heroku `craft serve` runs the server `craft auth` creates an authentication system with a login, register and dashboard controller and views. it's just quicker, simple and removes the headache of having to remember multiple commands or having to manually create models or controllers or views. Cuts down a lot on development time. Static files was always a pain for Django to get going. Was way too complex and for a framework to be "everything and the kitchen sink" it really didn't have good out of the box support for static files. Masonite comes with static files good to go and SUPER simple to configure. As well as built in sass support. Write sass like normal and it will compile when the server is ran. deployment was painful. Took probably a whole day to figure out. There are simple `craft` commands to deploy your application. Right now just heroku builtin but i'll add other drivers like `craft deploy --driver aws` which will seamlessly deploy to aws. the rest of the list is really nuances but includes things like: "I hate having to import views everytime i want to use it." With masonite you pass the controller and method as a string: `'Controller@method'` and no need to import anything. Masonite will import in the backend. All about speed. The lack of a built in Queue system. I think Django is really great but there is a huge gap in modern web applications that are really apparent outside of the Python web framework world. I really like Python over PHP but I like Laravel over Django 1000x more. After using Laravel I would never build software with Django until a lot of this is fixed. I agree that frameworks live and die in their ecosystem but I don't think Django is the endgame. Theres a gap and I want Masonite to fill that gap.
Yeah the documentation part is really hard lol. Takes a lot of time. I'll come out with some videos and stuff to expand on the tutorials in the docs and just show off what the framework can do
ah thanks. All docs are actually on the github repo. All changes on there stay in sync with DocsForCode.com. PR is welcome :) otherwise i'll get that fixed. Thanks!
It's hard for people to understand such an awesome language like Python if they don't have a good understanding of computation. As someone who worked for a college for 7 years, she is taking the wrong course. She should be taking [this one instead](https://www.coursera.org/specializations/computer-fundamentals) 
Sheeple! How can you orbit a flat earth! \#OpenYourMind \#TheNasaDelusion ^\\s gj
Thanks for your attention, there are some weak points with my code though, like lacking of code comments or documentation, I'm trying to improve. Overall, python's performance in SLAM/Robotics is better than I thought, I'd like to see more python projects in these fields.
Cool concept!
I have not used any of those resources. Keep in mind that there are lots of good free resources for learning Python. The /r/learnpython wiki has [a list](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F) of several such resources.
Check out http://www.firsttimersonly.com/ !
Agreed but a quick example of how to build a hello world will do wonders.
You probably don't want to use any of those for hard core numerical simulations because IIRC none of them are [symplectic](https://en.wikipedia.org/wiki/Symplectic_integrator) (won't conserve energy over long timescales). You'll typically find something like [Verlet](https://en.wikipedia.org/wiki/Verlet_integration) inside of MD/n-body simulation packages.
**Symplectic integrator** In mathematics, a symplectic integrator (SI) is a numerical integration scheme for Hamiltonian systems. Symplectic integrators form the subclass of geometric integrators which, by definition, are canonical transformations. They are widely used in nonlinear dynamics, molecular dynamics, discrete element methods, accelerator physics, plasma physics, quantum physics, and celestial mechanics. *** **Verlet integration** Verlet integration (French pronunciation: ​[vɛʁˈlɛ]) is a numerical method used to integrate Newton's equations of motion. It is frequently used to calculate trajectories of particles in molecular dynamics simulations and computer graphics. The algorithm was first used in 1791 by Delambre and has been rediscovered many times since then, most recently by Loup Verlet in the 1960s for use in molecular dynamics. It was also used by Cowell and Crommelin in 1909 to compute the orbit of Halley's Comet, and by Carl Størmer in 1907 to study the trajectories of electrical particles in a magnetic field (hence it is also called Störmer's method). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Yea. If you propagate on time-scales of years, even DOP853 starts to blow up. 
I'm not if you're saying that web2py is good or bad but just looking at the documentation ... it is not expressive what do ever lol. It just looks like someone puked code into a framework ... ? I'm a big fan of "beautiful code". I'll refactor code over and over until it "looks good". Have you used web2py before? 
How did you generate the images
Coupling a framework with a deployment model / provider (Heroku) is bad. Especially when it's Heroku, the world's most retarded platform.
&gt; much more simple, developer friendly and easier to use than Django Aren't those one and the same goal?
it's not coupled exactly. the cli tool which is decoupled from the framework handles the deployment. You also don't have to use it. Nothing in the framework itself references heroku
&gt; "I hate having to import views everytime i want to use it." With masonite you pass the controller and method as a string: `'Controller@method'` and no need to import anything. Masonite will import in the backend. All about speed. Why not go all the way and have routes, controllers and views auto discovered, like Rails does? Rails blows but that's one thing it does well. Get().route('/yourmom', 'YourMomController@view') or whatever can be inferred on startup based on file structure.
That's really interesting although that might be too much magic there. A brand new developer coming into the project is going to have to search endlessly through a large project just to see which routes are going where. Maybe that's not really a concern since rails does it. I'll look into this right now. If it makes sense I might as well make it. Explain some more, how would it be auto discovered? Does it default to the view method and just append Controller to the view name?
Used it, contributed to it's DAL code, used to recommend it but no longer due to their stance on python 3. It's a great example of how to give a dev literally everything they need. Runtime, db drivers, front end framework, back end framework, built in web based ide with break point debugger. And how that can lead to a very opinionated framework that takes a lot of effort to keep maintained. Web2py conceptually was very easy to get. Also their DAL was well ahead of it's time when so many people are still building shoddy ORM's. The DAL was much closer to sqlalchemy core than an ORM, it's a functional query generator. Also most of web2py was designed by a Comp Sci Prof and was built after the API was fleshed out so it's got amazing level of test coverage and documentation. Also the code base is well documented as it's meant to be a teaching tool as well as an "enterprise" level framework. They got some things wrong too. Their routing while very easy was also very magic. Lots of global values and shared variables. Much slower than other frameworks. While they supported just about every major db and had a very pluggable auth system, some combinations had a lot fewer real world users and could be poorly optimized. The DAL however still is good and has been refactored into its own project. Hopefully they get smart and port to Python 3. Web2py is quite the monolith, and has many good lessons to teach someone who's not trying to make another django or flask. It's worth being aware of what others have built and the good and bad they brought to the table when creating your own tools. 
Awesome. Thanks for this. I'll keep reading up on this. Any contributions are appreciated. Even if you just follow i'd like to keep in touch. Theres some knowledge here I might need to extract one day.
How was it? Anything I can improve upon? I'm also planning on releasing it as a VSCode extension pretty soon.
Yeah, I'm not a fan of magic myself, but most developers would likely use a standard class naming scheme anyway, and so your routes will basically look like a list of the controllers/ directory, which is redundant, so if you're going batteries included, I'd auto-discover stuff. You could pick the scheme. Maybe look through any module inside controllers/ and add any method with a @route or @get or @post decorators? By convention the route name would be /module_name/method_name and the supported parameters are the function arguments?
I'm with you on the automatic migrations. They're really convenient, until they're not.
&gt; Especially when it's Heroku, the world's most retarded platform Why is Heroku retarded?
You seem to have a total misunderstanding of the history of the 2/3 split. Businesses standardize on one version of Python (usually 2.7 still) and then only use that. I try to write my 2.7 coffee in such a way as it will work on 3. 
exactly lol. I literally held my breath on every migration. With Laravel which separates migrations from models, i never even blinked when creating them. It was just a simple task as easy as making a route.
Ren'py can embed any python code, so probably the same way you would in normal phon. Though ren'py also has a save game functionality built in.
Textacy Seinfeld Faker Pandas Flask 
What do you mean about web2py's stance on Python 3? Looking at [py3 compat tracking · Issue #1353 · web2py/web2py](https://github.com/web2py/web2py/issues/1353) (GitHub), it looks as though they're working on it.
i was working on two things this week: 1- change flask configs, without restarting the app (done) 2- improve a amcharts map api and make it more dynamic! i hacked it around, finished with that and am on the improvements of the ui!
There is a course in udemy, it's called:"the complete python masterclasses" 
Generally you look at shebang and python3 programs should say #!python3 This is not enforced, so not a foolproof method but should cover most of the cases. 
Thanks, really appreciate the comment.
Generally people will use one version. I️ use python 3 for most things. There are a few packages that I️ use that require python 2.x. For those, I️ use a conda virtual env. 
Hah, I'm in the same boat: Python over PHP, but Laravel over Django. I'll definitely have a look at your framework :)
thanks! you'll see that the layout is VERY similar :). I took a lot of the ideas. even having `request.input('variable')`, very similar routing, near identical file structure, separated migrations from models. It's cool. Sometimes i have to double check the file extensions when switching from this to Laravel because it looks so similar lol.
Out of curiosity, why did you decide to use PeeWee ORM over SQLAlchemy?
[removed]
However businesses will all have to switch to python 3 in a couple years when there will be no more support for python 2
I use pyenv to switch the versions locally. It is relatively easy and you can almost install any python version that is out there (pypy, jython, conda and so on included). For server side stuff docker makes your life very easy. Just grab a docker container with the right python version and start it. Besides the right python version you also have a specific operation system.
[removed]
I am with you. How can one introduce a breaking change to such a simple operation as division without calling it a new language. Especially in a language that designed to do scientific work. Was it really hard to come up with new extension files such us .py3 
How is deployment relevant for the quality of a web framework? And why didn't you invest the time in making just a better deployment-tool for django?
Oh, nice! I'll take a look. Good job!
It wasn't designed to do scientific work, it just happened to be simple enough for scientists to learn. ;-) To be serious, though, at the time 3 was introduced Python didn't have anywhere near the following it does now. The problems with becoming incredibly successful at the same moment you're going through a transition are many, and in hindsight a new extension might have been a good idea, but it's way, way past the point of no return now. The shebang at the top of most files is a pretty good clue though.
It really should say: #! /bin/env python3 As that'll work in a lot more places.
Well, they won't have to... they'll want to, eventually, but they won't have to.
Yeah i guess. I dunno. I just think in a couple of years we'll all forget get about 2 because of it
That's why I used. Pyw in the first place. I figured the console might break it. Stupid of me not to try. Py though, I'll do it when I get home, thanks! 
Cuz he wants to seem edgy, probably.
So it is installing via a wheel rather than from source that solves the problem. That does make more sense. With all the things that should have worked that didn't, it wasn't too much of a stretch for something that shouldn't work to work. Thanks for sticking it out and helping me get there in the end.
I need to work with this library more in the future.
Different servers for the two versions. Since most stuff runs on some Linux, you still have both 2.x and 3.x installed and just use different commands to invoke them. generally most things should be written to work in both versions though, which can be a major pain for some libs. We're currently making the switch to 3.x and have some 80% of our code ported, so hopefully this will become obsolete for us soon.
That'd be cool too... Actually I said async but I meant concurrent, thinking of non-blocking IO and the event loop with asyncio or one similar lib.
Yeah true
Nice, but try to find a way to dynamically extract drivers version from your system, instead of hardcoding them. :)
That's to complicated for me. :(
Could you tell a little about how did you get started writing a webframework from scratch? Like what was the process like in the beginnning.
Disclaimer: all speculation. I know some games (some of them optionally) take the input from peripherals "raw", that is, straight from the driver. When they do this, settings such as Windows's mouse pointer speed are ignored. Other games do respect the Windows pointer speed setting. So what I assume is happening here is: "raw" input is taken straight from the driver, whereas "impure" input is taken from a higher-level Windows API. Games that attempt to block automation probably do so (in part) by ignoring the higher-level API calls entirely, and only trusting raw input. Raw input is (presumably) harder to fake; perhaps it requires that you actually register a device driver. https://social.msdn.microsoft.com/Forums/en-US/f4dc0d57-848c-4478-a728-7bd160f0667a/how-to-send-wminput-messages-to-a-window?forum=wdk
Don't give up. Try with wmi module, something like this: import wmi c = wmi.WMI() video = c.Win32_videocontroller print(video.properties) 
&gt; Overall, python's performance in SLAM/Robotics is better than I thought What numbers are you seeing? I looked only at the github, not the actual code; did you do even the image processing in python by yourself?
I'll just share this here too https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#python It's a github which keeps a list of free books online for all languages.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [EbookFoundation/free-programming-books/.../**free-programming-books.md#python** (master → c4a3ff8)](https://github.com/EbookFoundation/free-programming-books/blob/c4a3ff8486ed4fbfc56b4fb2f5d1d874e4aa710c/free-programming-books.md#python) ---- 
Go for it! There is much that could be made easier and more convenient in the world of python webdev.
1&gt; Always create a customized virtual environment. 2&gt; source bin/activate 3&gt; pip list and python -version 4&gt;PEP 8 reading It wont help you much but will help you least.
is this framework to be the Laravel clone in python? I'm interested in this project but I don't have any experience with PHP or Laravel.
I think the problem is also in the code base: https://github.com/josephmancuso/masonite/tree/master/kernal
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [josephmancuso/masonite/.../**kernal** (master → 0707ccb)](https://github.com/josephmancuso/masonite/tree/0707ccb1f6cacbacad04a8608c4a53dedc72387b/kernal) ---- 
If we exclude all the commonly known workhorses, I'd like to mention [parsedatetime](https://pypi.python.org/pypi/parsedatetime) which turns something usually complicated and annoying into a breeze. 
This looks really cool, I hope to find a project to use it in the near future :)
Good question! It would be really cool to see what happened behind the scenes of a cold base.
Only if you assume that we're looking at a point source due to a large distance between the masses, which for satellites is really not true, and which then makes flat versus spherical nonsense.For an extended source the gravity potentials of a disk and a sphere are different. 
It’s all relative. And this is false. Light coming at the earth would experience visual of a disk ~17 meters thick. The gravity the earth exerts is the same. A system between a satellite and either flat or spherical earth earth would have a barycenter exactly the same. Your big push for flat earth should be atmospheric drag I would think. Yet that would probably tend to average out as well. 
It appears this module was written using the old deprecated API for WCI. The new `getmarkets` endpoint doesn't provide keys like `price_eur`. It looks like the new API only provides trading pairs with BTC, eg. the data for the lab `ETH/BTC` looks like this ``` [ { 'Label': 'ETH/BTC', 'Name': 'Ethereum', 'Price': 0.07382597, 'Timestamp': 1515412020, 'Volume_24h': 292415.63970004}] ``` You would then need to pull USD/EUR exchange info from some place (eg. [fixer.io](http://fixer.io/)) and do the conversion yourself. 
lmao 
So I need to memorize which company/developer uses which version? Or is it that python isn't meant for sharing code?
I'm not familiar with Lavarel, but while looking at the code, getting serious Ruby On Rails vibes. :) It's kinda trivial how to differentiate it vs Django. But how about RoR? What benefits does it reap (besides being programming language?) 
&gt; But ever since the genius decision to fork the language (and not even change the name), I've started to loathe it. That's complete nonsense, the bulk of the language remained the same old same old. The one single change that caused the most problems was the unicode/bytes/string issue which the vast majority of people have welcomed, as a lot of the old Python 2 issues disappeared. You simply had to understand what you were doing and hence code them correctly.
I'm not sure to get what you mean… but if you just want to generate a sine wave and play it, have a look at this notebook https://github.com/mapio/sinuous-violin/blob/master/sinuous-violin.ipynb where, btw, using Fourier analysis and sine waves I'll attempt reproducing more complex timbres…
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mapio/sinuous-violin/.../**sinuous-violin.ipynb** (master → 578e5d4)](https://github.com/mapio/sinuous-violin/blob/578e5d452028317327334a0aace97e49d44043e1/sinuous-violin.ipynb) ---- 
Great idea! Hope this gains traction - recommend you do plenty of advertising ;) I would suggest a few screenshots/code snippets on the front page to get people interested (look at the webpage for reactjs.org for example)
It looks like [this guy](https://github.com/andrew-gardner/dependsworkflow) created a graphical DAG using PySide... I don't know of any general libraries for it, but it might give you some ideas.
or PonyORM or PyDAL? Well PyDAL I can answer based on the fact that it does AutoMagic migrations (something I like for the non-web backend work I do for clients). 
This is fantastic, thank you so much! I have been wondering about how this works on and off for 2 weeks, but never took the time. I'm so glad you did... it's super clear :)
We did Quantopian in our college club, it was pure python but finance knowledge is necessary. I recommend doing the boring simple stuff, kind of like doing learning python the hard way exercises instead and try to make a game.
Why not just use a real database
I just wish that I had the skills needed to make a "totally awesome" web framework in a matter of months.
How do you mean? That just creates and scaffolds a login, register and dashboard system when `craft auth` command is ran. I'll most likely move that into the CLI
Yeah basically. A LOT of the design decisions was based off of laravels designs. The file system structure is also nearly identical to Laravel. This allows a lot of the laravel like features like command line scaffolding, single file per class, separated out configurations files (which is a nice way to let third party services have their own configuration file so it doesn't get jumped up into a huge `settings.py`) etc etc. There is a lot of reasons for my architecture if you'd like to talk more
I'm sorry but you seem a bit out of route. From what I've seen, you need to focus a LOT more on the backbone of your project, and let other "superficial / additional" functionalities for later. I'm saying that, cause going through your source code, i see places where you are defining "drivers" for payment processing, when you don't even have all features a decent framework should have. Also, i see there is a `start.py` with a single function that has tons of logic, where you call it `Framework Engine`, that seems pretty unstable and terrible designed when thinking about maintenance and growth of your framework. My suggestions would be to start modularizing more your code, and making sure everything is unit tested. Whenever you have that, you start THINKING about things that are already "sketched up" in your code. In the other hand, if you're doing that for learning purposes i totally understand you.
well routes contains the route but also the `view` (Masonite uses controllers, unlike Django). It can also be named. I really like the idea of seperated routes into get and post routes. I think that logic should be in routes and not in the "views" (controllers). for example: Get().route('/login', 'LoginController@show').name('showLogin') Post().route('/login', 'LoginController@store') Get().route('/home', 'DashboardController@show').name('dashboard').middleware('auth') I think it's really expressive this way. 
This very much! There are examples on the website but they are rather hard to follow. Project could really use a gradual introduction tutorial of sorts. Framework is different enough that current examples feel much like a dump of cold water on ones head.
Thats the plan :)
Yeah sure, i'll most likely create a video on how to make a framework from scratch and there aren't really any good tutorials out there. But it all comes down to whats called a `wsgi` server which is just a function and a command line really. most wsgi servers are swappable so the syntax is all identical. The hard part is that every request lives and dies inside that wsgi function so you have to compensate a lot (like sessions aren't actually a thing since no data can persist outside of the function and request). Theres a few design humps to get over but after that it's just feature after feature.
Looking forward to it.
Because nearly every web frameworks needs to be deployed somewhere. I feel like Django forgot this idea. When working with django I realized that when i was ready to deploy, it was like a whole day of figuring it out, changing settings, changing this, adding that. modern web frameworks needs to be able to deploy on a moments notice and the difference between development and production needs to be as seamless as possible. When that's the case deployment is easy. Also I had larger complaints about Django than just the deployment issues that are solvable with this framework.
What are you using to write your work? Are you just writing everything into the shell( the little rocket looking icon)? You should be able to jut press control + shift + s to save a text file. Press control + n in the shell to open a new text file in the python editor. 
Peewee had a really nice relationship between models and migrations. They separated them out into two different things which is what i needed. It also came with really nice and easy migration support for modifying columns at the table level which is also what i wanted. Also I am making the ORM 100% swappable. So separating migrations from models will make that enitrely possible. If you want to use SQLAlchemy then all you'd have to do is pip install it and use it. There still needs to be a few slight changes to the migrations for it to be swappable but you get the idea.
Here are some shortcuts: 1. Documentation: https://docs.authlib.org/ 2. GitHub source code: https://github.com/lepture/authlib 3. Playground: https://play.authlib.org/ 4. Playground source: https://github.com/authlib/playground
Does the name 'Anpylar' imply that it follows Angularjs patterns?
Yeah that's the plan. I want to test a lot of functionality to see if it's even possible since wsgi limits a lot of possibilities since everything needs to live and die in that function form request to output. I'm am deff working on modularizing it now and a lot of the logic is there so just need to move it into classes. Shouldn't take long at all. It started as a learning project and I really don't write code in large blocky statements but once the logic is there I then move it into classes. I usually refactor into simplicity. And of course I'll be focusing on the backbone, its only a few months old really so a lot of the core features are still being developed.
It's really really not hard at all. Take a look at the code and you'll see it's really simple
that's great. enjoy learning.
This is a great example of what not to do with OSS projects and rub community the wrong way: * readme doesn't tell me what the project solves for me * readme doesn't tell me why should I choose it over other solutions (Django, Pyramid, Flask, etc.) * readme pretty much says this can't be used for real-life scenarios (integrated deployment is something you DON'T want to use apart from personal pet projects with limited access) * uses non-standard documentation publishing site - doesn't really seem trustworthy * no support for anythig besides mysql * no tests at all * doesn't follow conventions (capitalized and lower-case file names in one directory * ugly docstrings, surrounded by spaces and missing full-stops * tight coupling with gunicorn Not to bash on it, but IMHO you should fill in the missing parts before advertising. I won't go into how opinionated and clunky to use this looks for me, since it can still be salvaged. But for batteries-included, this looks like awfully empty batteries.
That's actually the only thing I can think of that I really don't like about Django. I switched from Laravel, and I've mostly been happy with the switch. I probably should have just stuck it out and learned Laravel better, but the more I learned about the "right way" to do things with Laravel, the more it felt like I was in over my head. Laracasts made me feel like I was given a puzzle with half the pieces missing, and I just couldn't finish it. Then I'd go searching for information to fill in the blanks, and I'd be given pieces to totally different puzzles.
It just return a bunch of "none"s :(
Haven't run an OSS before so learning on the job :) &gt; readme doesn't tell me what the project solves for me I'll get that done. &gt; readme doesn't tell me why should I choose it over other solutions I'll get that done &gt; readme pretty much says this can't be used for real-life scenarios (integrated deployment is something you DON'T want to use apart from personal pet projects with limited access) its not actually "integrated". nothing in the frameworks references any deployment platforms. Just has simple command line tools to scaffold the project for you. &gt; uses non-standard documentation publishing site - doesn't really seem trustworthy I built it. I'm using it to test the viability of it. Its the easiest solution i've seen for hosting and maintaining documentation. Links and updates directly through github. reliably. I tried readthedocs but everything kept breaking. &gt; no support for anythig besides mysql not true, ORM is swappable. Whatever the ORM can handle you choose is what's supported. Peewee can handle a lot of databases out of the box but you can choose SQLAlchemy &gt; no tests at all Tests coming. Spending the next few days modularizing the project &gt; ugly docstrings, surrounded by spaces and missing full-stops PR's are welcome :) &gt; tight coupling with gunicorn modularizing will solve this. Most wsgi's are swappable as i've read. I've only tried gunicorn with it but where is it "tightly" coupled? &gt; Not to bash on it, but IMHO you should fill in the missing parts before advertising. I didn't know they were missing, which is why i'm advertising. If i can get community support from good developers that contribute to OSS more than I do already then the project can grow. &gt; I won't go into how opinionated and clunky to use this looks for me, since it can still be salvaged. But for batteries-included, this looks like awfully empty batteries. What's "clunky" about it. I'm still not sure why developers think smaller is better. Just because something is "clunky" doesn't mean its not easy to use. Laravel is "clunky" by your standards but is a much better framework than anything that Python provides.
yeah there is deff multiple ways to do something. which is good and bad. But once you realize how Laravel works internally it opens the flood gates for possibilities. Theres multiple ways to do something because Laravel doesn't really hand hold much. It gives you the tools to do what you want, whether you use them or not is up to you.
Deployment is not a web-frameworks job. There are to many valid targets. How many targetrs does your framework support?
And the game preferably should be playable without graphics as it's pain in python.
The frameworks doesn't support any. The command line tool which scaffold the project for me currently supports heroku since that's what I'm most comfortable with. 
The idea was to have a very light landing page (which has also been rendered with *AnPyLar*). Having one or 2 snippets was in the pipeline and will for sure come.
*AngularJs* was the original from *Google*. *AnPyLar* builds on the concepts from the current *Angular*, departing where necessary, mostly because some things can be better expressed or made in Python. From the documentation (the introduction to the tutorial): &gt; AnPyLar is modelled after the ideas and concepts found in Google’s Angular. As such it does pay tribute by building on the Heroes tutorial, but with a Py approach. Here: https://docs.anpylar.com/tutorial/index.html 
Check out Om, an old music sequencer mainly targeted at Linux which I think used Qt and had just such a patch system.
Deployment IS integrated - it comes out of the box. It shouldn't. It could come as a plugin, maybe. Not built-in. And readme definitely shouldn't suggest "just push it to heroku", as it may lead users towards hasty decisions that weren't thought out properly. I've set multiple projects on public and private readthedocs and never had issues. That's what I mean by not trustworthy - if you are having issues with that, what else is caused by your lack of experience or undestanding of the ecosystem? I didn't mean orm, but migrations. I know I can swap in SQLAlchemy and Alembic and it will work. When looking for batteries-included, I don't really want to. Truth be told, tests are the single most important thing you need to do before advertising OSS. They act as documentation, examples and a kind of metric of design process and ideas behind the project. This should be a very high priority. Yes, WSGI servers are swappable (at least when you're not using uwsgi's extra features), but right now gunicorn is in dependencies. Framework shouldn't impose any runner in non-development scenario, because you usually want to have it standardized across multiple platforms and use something your DevOps know the most about. Well, you are getting it, but you should've read guides/checklists for that beforehand (like http://afonsopacifer.github.io/open-source-checklist/) which usually clearly mention tests. It would've saved everybody a bit of time. To be fair, IMO Django is way better than Laravel or Rails (having used Django extensively, Rails for a fair amount of time and Laravel only a bit). It's way saner in it's opinions (despite how much pain the ORM has caused me in a few cases), the things you hate coming from convention-over-configuration turn out to be amazing for big scale projects and the limits (like in templating engine or middleware) prevent you from cutting shortcuts you'd regret later on. It feels clunky because of convention over configuration (same way rails does). Also, all docstrings are ugly. They have spaces between ''' and docstring text and miss full-stops at the end. The flagpole comments are not docstrings, but they don't look pythonic too. As for PRs, I'm not really interested in using or growing your framework, since it stands opposed to what I like to use (or what has proven the best for huge projects I've participated in). That's why I didn't want to get into why it feels clunky for me. Best of luck in fixing the objective shortcomings, though, and growing your baby :)
Thanks. All points i'll learn in time :) If i never advertised it i wouldn't learn to fix it like this. Or found that checklist. Thanks for your input. I suppose i could make it excluded and pip installed later on but i'm not really sure the point as you can make the entire product without using the command line tool. As a developer I really don't care if something is integrated until it comes time to use it. I understand the point of not forcing a developer to use a specific deployment platform but just my personal opinion is that i would have loved if deploying wasn't this whole other task. I could make it more pluggable though and see how that works.
No. Browsers don't speak Python, so you'll end up using Javascript eventually.
i haven't done anything with gae in a while but i'm pretty sure that you need to run background tasks on a backend instance, not a frontend instance. check the docs
Why not learn to be constructive ?
I'm not using idler. I was watching a video on how to create commands for a Cisco router. It wasn't an advanced tutorial. The instructor has a regular Python screen on one side and the idler open on the right. After creating he went to file and pressed run module and the idler processed the info he typed. I am using Python 3.6. I haven't downloaded any extensions or add on for this version. Just using what I downloaded from the website 
But deployment IS pretty much a separate task. We use tools like docker and docker-compose or vagrant to bridge the gap between development and production environments, but they are inherently different, they need different sets of settings, prod needs to be able to scale horizontally, you want to separate machines doing critical work (http requests and critical tasks, like alerting) from others (like tasks that minify images), set up some monitoring and so on. This isn't, won't be and shouldn't be as simple as 'push to github' unless you already went through setting up servers, githooks, rollbacks etc. when dealing with live applications you can't afford to drop requests for or have security issues in. We use uwsgi or gunicorn with tailored configuration as runners to provide some of the above for us, but we use autoreloading runners with less overhead in development for ease of debugging. There's nothing wrong with pushing your personal todo app to heroku or t2.micro on default-settings gunicorn, though. It just shouldn't be included in the framework itself, especially if it's intended for large applications.
Yeah. All im saying is just like we have wrappers around libraries like an ORM can handle multiple databases, I want to do the same wrapping around the command lines. All the craft deploy command really does is wraps the heroku command line. Is that not good? Out of curiosity why is wrapping all the logic of multiple databases into an ORM good but wrapping all the logic of multiple command line programs not good?
It seems a little light on source/target connectivity, which is a main selling point of commercial ETL systems like Informatica and Ab Initio.
Nope.
ORM doesn't set up the database for you. You just use it from within the code and, in general, rely on database as your data source in your application code. Deployment is a set-up process that should be detached from the application code. It has nothing to do with application logic, either business or presentation. Application shouldn't concern itself with it, as it doesn't rely on it in any way and should work in any deployment compatible with used API (in this case, WSGI). A CI tool should be concerned with preparing a distributable artifact and then deployment automation and orchestration systems can deal with it automatically or with a push of a button (or any other devops tool). This prevents vendor locking and takes away developers' ability to break deployment easily (since CI won't build the artifact if tests won't pass, if there is not enough docs, etc.). The thing I'm trying to say is that what's fine for small scale apps not necessarily is for large apps. And as you're trying to advertise your framework as a tool for building large apps, that's something you should account for.
Reading spec is actually very boring. Haha.
Sounded like a job queue is what you need? http://www.celeryproject.org/ http://python-rq.org/
This is your globals in Java. Although I'm not sure why you're toting globals around as a good thing.
Just wrap the print statements in parentheses and you get this tutorial in "modern" Python of 2018. ;)
Yes it (Python) can! And yes you can! See this other reddit from today: - https://www.reddit.com/r/Python/comments/7oulyg/anpylar_the_python_frontend_web_framework/ Or go directly to: https://www.anpylar.com
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_tolany] [-](https://www.reddit.com/r/u_tolany/comments/7ozctk/_/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_tolany] [-](https://www.reddit.com/r/u_tolany/comments/7ozcmq/_/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
TL;DR Whooosh. Just remove parenthesis from **modern** Python of 2018 and you will be able to use **modern** code in your uncle Py2. ;) Oh wait, what is that, python2 doesn't have f-strings? Well too bad, goodluck rewriting every line that used them. F-strings aren't the only thing that break it, I wouldn't ever use python2 and I don't get why people still use it. On embedded systems I guess, oh wait I can just write more efficient code in C, boom, entire weight of interpreter is gone. Python2 fanboys grip into it so hard that they even have future module which uses python3 things LUL, I wonder why that's the case if Python3 is nothing but added parentheses.
I was just talking in the context of this tutorial -_- Never said it was better or must be used. 
OK. Cool.
I don't think people saw the '\s' at the end of your comment. 
It's not argument of better (for that people can argue with python's creators, maybe they regret it and in py4 they will remove parentheses again), I just said that the joke of "lul it's just parentheses" is as old as python2 and shouldn't be used anymore.
Try seperating the Admin section into a microservice, or, better yet, become a sysadmin! (`rm -rf` etc.)
For screencasts allow me to recommend [Python Fundamentals](https://www.pluralsight.com/courses/python-fundamentals), [Python Beyond The Basics](https://www.pluralsight.com/courses/python-beyond-basics), and [Advanced Python](https://www.pluralsight.com/courses/advanced-python) from Pluralsight. These three courses take you from installing Python, introducing the stuff you use continually, and then work up through stuff you do once week, the stuff you use once a month, to fairly esoteric topics like metaclasses and descriptors at the top end. One possibly unique aspect about these screencast classes is that there are companion books in [The Python Craftsman](https://leanpub.com/b/python-craftsman) series (the books are also available separately - scroll down - and correspond one-to-one with the Pluralsight courses). The screencasts and books follow a spiral curriculum, building competence incrementally, and revising topics in greater depth later on. They focus exclusively on the core language – knowledge which will have a lifetime of decades – rather than getting bogged down in the details of some relatively short-lived framework or library. Disclosure: I was involved in the production of this material. We've have almost uniformly great feedback.
Have you tried any other type of worker? http://docs.gunicorn.org/en/stable/design.html#choosing-a-worker-type
Can you do custom OAuth/OIDC server for your own service?
most *experienced devs*, but I can tell you haven't been in a startup with a few rails bootcampers. Making such assumptions can lead to major pain downstream.
The easiest way to do this is to fake it. Even on CodingBat it isnt really interactive, its a text box with CSS that makes it look like code and makes the cursor blink. When you hit go it takes your code and executes it server side with sample inputs and gives results. For example code execution you could leverage the Google App Engine because they make it easy to do and they already have secure environments for executing code snippets (securing arbitrary code execution on your own machine is out of scope, and integrating the GAE will probably score you bonus points with your prof). It probably also leverages some sort of test harness to do the actual results generation (given sample inputs, do I get expected outputs). You can plug these sorts of things into a Flask/Django site (python web frameworks).
What is a "regular Python screen"? Do you mean the interactive interpreter? In other words does the output at startup give the Windows equivalent of this:- Python 3.6.3 (default, Oct 3 2017, 21:45:48) [GCC 7.2.0] on linux Type "help", "copyright", "credits" or "license" for more information. You're not using IDLE but the person on the video did, so why don't you use it?
Wait, so that python framework will make front-end stuff just like javascript?!!
thats cool i want one
That’s awesome! My wife just got me started doing cross stitch (beginners embroidery? Haha) as a stress reliever. I might need to make this my next project 
Thanks. 
Hahahahahaah rails bootcampers I'm sorry.
I support the Portuguese on the top left corner. Are you based in brazil or do you run a Brazilian business?
itertools. Well you didn't specify third party :-)
This is so cute!! I love it 
i think he means the typo in the url he posted
I really like wxPython. However I am sure some people would argue for PyQt. It definitely seems to have a larger group of developers behind it than wxPython. 
Google is your friend :)
*AnPyLar* has gone a step beyond by being client-side. One of the advantages is that the application is downloaded once, and can contain multiple pages and hierarchies, which are navigated without sending a single request to the server. The server can with it be a pure API server (and the server of the initial content download), with the advantage of no longer having to implement business logic in the server.
Did you bend the knee?
That's the goal. You can check the live samples. No hidden tricks, the simply work. A link for the most complex sample (running in plnkr.co): https://www.anpylar.com/tutorial/tourer (For more links check the website linked above, there are huge buttons for each live sample) You will see that the app is 100% implemented in Python. Beware: - Python is slower than Javascript and even if you are programming in Python, things get transpiled to Javascript, so it won't be faster for sure - The download is huge (compared to the usual Javascript frameworks) but can be optimized (size-reduced) by the integrated command line interface (`anpylar-webpack`) to reduce it. See some notes at: https://docs.anpylar.com/technology.html 
What percentage of the time is spent making system calls into the kernel?
&gt; This is a great example of what not to do with OSS projects and rub community the wrong way I have to agree with this. Laravel is great for PHP, but in the end it's the programming equivalent of polishing a turd. Laravel works well for PHP because of how PHP and its community operate. A python framework needs to be... pythonic. That term isn't just for code snippets or class inheritance philosophy, it applies to the community too. Python is built on the ability to import and use someone else's code really easily. Django has the same idea with plugins. Want to add facebook logins to your site? No problem. Need a calendar application? You're covered. I'm always really wary of any framework that thinks it's already got everything I need and more, with no way for users to add features without modifying the source (looking at you, JQuery Mobile). The other problem is the approach. It comes off like "Hey everyone, you know that famous framework you've been using for years that you learned specifically to get a steady job using python? I wrote something better in just a few months."
The Van Rossums send their regards.
Must be really triggering for actual (i.e. Euro) Portugese when everytime that language appears people say Brasil ;-)
what's the [off?] tag mean?
I'm based in Brazil!
I will, soon :D.
Portugal has a current population around 10 million. Brazil is at ~200 million. So, you've got like a 95% chance of being correct if you just guess Brazil all the time.
I learnt a lot from this so thanks 0rac1e. import requests import pprint pp = pprint.PrettyPrinter(indent=4) key = '8joqLQNunHoy7jNPFiKcX1G3txxjz7'; api_url = 'https://www.worldcoinindex.com/apiservice' api_url += '/ticker?key={}&amp;label=ethbtc-btcbtc&amp;fiat=gbp'.format(key) try: data = requests.get(api_url).json() except Exception as e: print(e) data = dict() pp.pprint(data) for x in data['Markets']: a,b = x['Name'],round(x['Price'],2) print(a,b) Output: { 'Markets': [ { 'Label': 'BTC/BTC', 'Name': 'Bitcoin', 'Price': 11141.97902271, 'Timestamp': 1515434340, 'Volume_24h': 3734023210.1151156}, { 'Label': 'ETH/BTC', 'Name': 'Ethereum', 'Price': 822.35327819, 'Timestamp': 1515434340, 'Volume_24h': 3638350104.7292533}]} Bitcoin 11141.98 Ethereum 822.35
it is cool, I like it 
Portugal sells internet in packages—they trigger themselves daily
[Here's](https://medium.com/implodinggradients/meltdown-c24a9d5e254e) an article I read couple of days ago
*95.238%
"What is scripted may never build"" House Python
No we don't. You saw one image and are missinformed.
I bet there are interesting phrases for this 😂
I guess I'm confused about what you call a "module". In Python, a module just means a file. In Java, it's common to put each class in a separate file. In Python, it's common to put logical classes together, especially if they're small. Just organize it logically, but 50 files for 50 classes when multiple classes are less than 100 lines, seems excessive. I have a file with 20+ classes that is ~7000+lines, but they are all logically connected, so it's fine. When your IDE stops handling it well (e.g., trying to scroll through a long list of classes/functions), it's probably time to split things up. You can always change it later.
Probably. That's a bug tracker. Rule #1 of Python is you don't change Python without community support. What you should do is float the idea on Python-ideas and get feedback. You may need to write a PEP depending. Also, people just get busy around the holidays. The very legitimate bug I reported to the Python bug tracker took 8+ months to resolve. If you're don't even have a pull request for a new feature or a reference implementation, the likelihood of getting approval isn't very high. https://mail.python.org/mailman/listinfo/python-ideas
Dude amazing! 
I have yet to up with a better name (I realise that "module" is too generic). The files are very sparse: they are expected to contain a module docstring and a list of css_rule instances. The more I think about it, the more I dislike the choice for files. I will revert to a single file. At least that makes me more flexible during development. Thx.
The first one writes them to a file by default and I want to actually play them interactively in my Jupyter Notebooks. The second one looks interesting and pretty technical which I was going to look into if there weren't any packages that do these types of operations easily.
Did you apply the patches via the canonical-kernel-team ppa's? I ask because the patches haven't be released as part of the normal update yet ... you can only get them from the above-referenced ppa. 
This looks really nice.
I dont get it
Oops i was looking at the board lol
All of them are pretty good, these days. I still find Linux to have the lowest friction, but not by much, and that probably has as much to do with my preference for Linux as it does with Python itself.
This was the first course I completed (as a complete novice to programming) and was very happy about this course. Charles is a great teacher and the course is paced slowly enough for beginners. I wouldn't want other beginners to dismiss this course because it wasn't the right course for your wife. 
Look for any videos by Raymond Hettinger, David Beasley or Ned Batchelder, especially the ones that discuss iteration and generators as they are fundamental to modern day, high quality Python code. A lot of these, plus those by other individuals, can be found fairly easily as they are often given at the various PyCons held around the world, e.g. [PyCon Uk](https://www.youtube.com/channel/UChA9XP_feY1-1oSy2L7acog)
I'm (still!) an Apple fanboy but even I will admit, Linux has got us beat on this one.
This is noted in the documentation: https://docs.anpylar.com/technology.html &gt; - It’s slower than Javascript. This should come to no surprise, because it’s written (and your scripts transpiled to) in Javascript. And yes, Python itself is slower than Javascript to start with due to its incredible dynamism and introspection possibilities. There is no claim otherwise and during early discussions with non-programmers who were made aware of the project and its goals, it was perceived that people are always looking for the next thing that will make page rendering/loading some `picoseconds` faster (or even some `yoctoseconds` - See [Wikipedia - Second](https://en.wikipedia.org/wiki/Second)) And the emphasis when explaining what the goals were: - Elegance - Simplicity - Better Code and coding practices - Having the power of Python in the browser together with the chosen architecture - Adding some concepts from the browser like `Promises` (Python `asyncio.Futures` are close, but are not exactly the same) It is believed that the goals have been reached and the project can be used when the expectation is not to have page loading times of `yoctoseconds`, but to have a working application coded in Python. As such, it may not be the technology replacing the front-page rendering technology of `reddit` (for example), but it may be a perfect tool for Intranet applications.
I do not think this should go on python-ideas as it looks like a genuine bug report to me, not a request for a new feature. I'd go to [Python-Dev -- Python core developers](https://mail.python.org/mailman/listinfo/python-dev) and just ask what needs to be done to take the issue forward.
HUE br
You should look at dictionaries and then rewrite this: def OnKeyPress(event): if event.Key=='Menu': quit() if event.Key=='End': os.system("python3 emptytrash.pyw") if event.Key=='Home': webbrowser.open_new(url) if event.Key=='Page_Up': os.system(pageup) if event.Key=='Insert': os.system(insert) if event.Key=='Next': os.system(pagedown) if event.Key=='Scroll_Lock': os.system(scrolllock) if event.Key=='Pause': os.system(pausebreak)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [brython-dev/brython/.../**benchmarks** (master → 8994ef5)](https://github.com/brython-dev/brython/tree/8994ef59a87b72fd30d7b0a14ff5f81d8ea6772a/www/speed/benchmarks) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dsdp3ye.)
you want one wife or a python banner?
Linux is very popular in some of the industries that Python is popular in. I would recommend familiarizing yourself with it. Don't worry about going whole-hog desktop Linux with it. A VM is just fine.
I'm using Windows here and agree with everything you said.
Okay I tried, but it still doesn't work. In fact, it doesn't even work in the console window I now have :D sad :( 
For simple applications it may work very well for sure and I definitely commend your effort that went into this. It's just that there is no way that this can scale when using Brython, this is unfortunate but a fact (at least considering the state of Brython at the moment).
The Americans run the sh*t
The classic *Chicken egg problem* - If there are no frameworks (like *AnPyLar* or any later newcomer) there is no reason to improve *Brython* - And if *Brython* is not improved, there is no reason to create the frameworks Someone had to break the loop ... or at least give it a push from one of the ends ...
I have RPI which obviously runs on linux mostly, which is what I use, and I can tell that it's not that hard, you just need to be able to use bash and it's terminal at it's basics and you can do whatever you want, not that hard really. As for OS itself, doesn't really matter. For everything else I still use windows, even the python code that I run on it is actually written on my computer, and I never had any problems with that.
Let me comment on this by making an analogy with algorithmic trading. When discussing about this, many people compare the performance of `C++` vs that of `Python`, and how you cannot do HFT if you are not able to to pack your logic so that it executes within microseconds and which advantages you gain by modifying the kernel of the operating system to shave off some cycles. The issue here is that you can do algorithmic trading in Python, because HFT is one very specialized branch of it, but there are many areas where Python (even if orders of magnitude slower than C++) is more than fit for the purpose. 
Linux. I had to use windows to teach python, and it was a hassle just to get python to run. Most linux distributions include python (be it 2.7 or 3) by default, and if not, it is as easy as installing from the repos. I will concede, after installing and getting everything to run, it makes little difference what the OS is. It also depends a bit on which way you intend to go, with python. If you plan to use it for data analysis, pick the OS you are most comfortable with. If you plan on web development, you will need to work with linux servers and it is best to start learning linux along side. 
The video dates from 2014... Brython has made [huge progress](https://twitter.com/brython3/status/828724040533700608) since then. If you don't trust either, you can run the tests yourself.
So glad to hear she supports your projects like this. I now must find my wife that knows what a computer nerd I am. 
Windows
I started out with Linux, but my go-to lately is using PythonAnywhere on my chromebook. It's just easier with PythonAnywhere because I can access anywhere (as long as I have internet, of course)
Dilemma? I'm using QNX, but I have linux too. :)
Not to say there's anything wrong with creating your own (in fact, that's awesome) but what's wrong with YouTube-dl?
Via Brasil !! 👏
Hmm interesting to know. The problem I have with **/usr/bin/env** is the hardcoded path to the **env** binary. This does restrict your shebang to \*nix type systems and then only those that use the convention of **/usr/bin** for binaries. You could use #!env python and let the system figure out the path to **env** but that would be quite a security issue imo... :) Anyway, as with most of these discussions, there is no real good answer here and you should probably idd use **/usr/bin/env python** if that works for you, because that will also work on most other machines! ;)
How are you converting them to newick? 
Mine has a computer science degree and made a joke about stdio.h the other day.
Thanks guys we'll versed in both as a sys admin but looking to transistion to developing.
 random.shuffle(string_list) for line in string_list: print(line)
Pretty sure our population estimates aren't accurate to that many significant figures.
not that nerdy! /s 
How would you do it with pyautogui to fill out a posting body It looks like pyautogui.typewrite() Would I replace the last line of the code you shown me 
oh, I just had something spelled incorrectly. This is really cool!
Are you talking about the library for python? As if you are I did use that in this :)
 random.shuffle(string_list) for line in string_list: pyautogui.typewrite(line)
As a laravel Dev who's tried to Grok Django a bunch of times I gotta say this at least sounds intriguing. I'm definitely gonna give it ago and maybe try porting more nice to haves from laravel over.
Seriously thank you I been stuck for days your incredible lol now it works but every string is typed without spacing how would I have a space between each word
If you want to distribute data to many people from a low bandwidth source, you'll need a high bandwidth distributing system of some sort. Use existing systems like YouTube live or twitch. If you want to write your own client side program, you could possibly stream to a few and have them stream to their peers, creating a trickle down broadcasting network.
Hey look, i triggered a response !
Good wife
Never mind I got it
You only showed yourself ignorant. What happens when `Example` is unloaded from memory? Globals in Python stick around until the end of the process.
That is an impressive feature list, especially that it includes a Fortran compiler (closed-source by the looks of it). I guess that means it can build numpy, scipy etc on device? ... Not that I would want to do that (or edit text) on my slow-ass phone with broken touch.. but it looks cool! 
&gt; slow ass-phone *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
PyQt is not an option because of GPL , pyside is way behinds Qt so WxPython is the way to go if I want python GUI Already build an app with wxpython (version 6 beta) https://github.com/a-atalla/tuxcut
No, I meant youtube-dl the cli tool. I didn't read through your code before but having done so now I find your title a little misleading. &gt; So I decided to make my own I was expecting to find something similar to youtube-dl. What I found was a UI wrapper around youtube-dl. 
Ok last question how would I take a certain amount of strings from the list Like 20 random strings out of a list of 100
requests
 import random for line in random.sample(string_list, 20): pyautogui.typewrite(line)
Yeah, I know that the license for Qt is not great, unless you just want to do open source. And PySide is pretty dead, although I know there was some talk of creating a Qt 5 version.
Wow this is exactly what I was looking for while making this. I couldn't find any eloquent equivalent. Thank you thank you for this. I'll check it out tonight.
That's a good idea ^^
I'd suggest looking into nginx rtmp. 
Totally agree! 
Missouri election data! (spoiler: it's real untidy). 
That's super cool.
As a European with no affiliatian with either Potugal or Brazil, I often crimge when people assime that the language in Brasil was Spanish...
Thats why i said approaching the issue , i'm not asking for the code (thats why i didnt put the actual code) , i'm asking for some hint on the thing , some guidance.
Yeah this ORM looks really good. I'll implement this into the framework for sure. If you have any ideas at all just open and issue and we can talk about it there 
You may be able to install without recompiling by using a wheel file. There is one for mysqlclient here: https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient 
What do you want to do?
http://www.pyinstaller.org/ This will allow you to turn them into executable apps for mac and windows. Hope this helps! :D
Here's a nice list: https://github.com/s16h/py-must-watch
That definitely does help thank you very much!, I also need a gui do you know anything about that? *crossing fingers*
It all depends on what device your aiming to release on. * This article may help: https://insights.dice.com/2017/08/07/7-top-python-gui-frameworks-for-2017-2/ It talks about the best gui module to learn. If your just a beginner tho it would be best to learn tkinter, although its not the best looking and not very customization its a good step into learning gui. :D
Mac and Windows and linux to use with raspberry pi I'll check out that link now, really appreciate the help
I'd add Brandon Rhodes to that list.
Glad I could help!
Outro programador brasileiro! Parabéns! (Aliás, alguma sugestão para futuros programadores brasileiros?)
https://stackoverflow.com/questions/28222179/save-dendrogram-to-newick-format/31878514#31878514
I have been out of work since 2009 due to an illness. I work, instead as a stay at home father. I used to run the networking and bench tech repairs at a small store that was part of a larger local computer business. When I hurt my back in April and wasn't able to do much, I started playing around with Python. In September when I injured my back again, I became unable to get around hardly at all. Since then I've been working on learning python more so that maybe I can start supplementing my wife's income by writing some software or perhaps even doing some telecommuting stuff with python/programming. I've been digging in to PyQt5 the last month or so, writing a character generator and dungeonmaster's suite for dungeons and dragons, but it's been slow going. I've been reading 'Mastering Python' which was included in the last humble packt/python bundle and I'm enjoying it mostly. However, it doesn't really touch much on PyQt so far that I've seen. In learning more, I've come to realize that my code is...wonky...at best. I've come to the point where I'm about ready to shelve the current code that I have and begin rewriting it. I would love to go through your book and see if wxpython will do what I need it to instead of PyQt5 - hell, maybe it's easier? I'm not averse to buying it, but with 4 kids and one income, I don't really buy much for myself. The packt bundle was 15 bucks and gave me a lot of resources, and my wife was happy to agree to purchasing it, but...I don't buy stuff like that for myself very often. If you decide to give me the book, I would greatly appreciate it. Chances are I might never make any money with Python, but it's been helping keep me sane when I'm stuck in my chair. If not, I thank you greatly for the opportunity to perhaps win! Thanks for taking your time to do this...and thanks for writing the book. Congratulations on getting your book published, and good luck in your future publishing (and programming!) endeavors.
pyqt5 with qt designer I dabbled in tinter, but the qt designer for layout makes pyqt5 hard to beat
I’m doing the course. So far it is a good course as far as material goes. The instructor has a very heavy accent so it can sometimes be difficult to understand him. Turn on the captions for a real laugh. I was dying at the multiple ways the captioned the guy just saying the word Python. Great course so far though and I’m learning a lot. 
The best thing to do is work on something that you are interested in. Are you interested in making games? a website? security? 
Could you point me in a good direction to learn how to use those like tutorial video or something Thanks 
The problem is that I can find enough stuff that I am interested in, from machine learning to chess programs, but I am just not good enough to contribute because I'm new.
Was is a reworking of the Phil Collins song Sussudio? Because that’s what I think whenever I read that
You need to pick a small project and work toward being able to complete it. Make a script to organize your downloads folder, or play an audio file at a certain time, or any small little thing. Then, ask for help or Google solutions when you get stuck.
Can you explain why? I'm a beginner and can't see the problem.
Maybe I've been on the wrong project. I'd say most of the "collaboration" on open source is punting a problem off onto someone else and when you get stuck on an implementation/skill issue, you ask someone else a few questions. There's usually not much coding with others outside of "fix this before I merge it" or "hey I got stuck, can you help?". If there's some feature that you want that gets people excited, that's when there's a discussion about how far to go, and a super-preliminary API just to get going. Code review typically happens by the people actually doing the pull requests without much input. Really, you need to find something you're interested in. Depending on how much time you plan on spending, a (bad) chess program doesn't sound like it would take that long (if you used some machine learning algorithm). Tackling the bigger machine learning problem of adding some new feature probably requires some basic understanding of machine learning (far more than I have and I've managed to use it). Now if you want to just play around with it, work on your chess code, and then report something you think is a bug (with a small pull request), then I'm sure they'd be willing to at least consider it/help you. While machine learning is complicated, getting screwy error messages because you did something stupid happens to everyone. The devs don't get those errors because they understand the implications of passing in that input as say a int instead of a float. That or add documentation. All devs love to do that :)
Have you made a game tree algorithm ? Start with tic tac toe and then try something like connect four. 
Do you have a local python user group? They exist all over the world, and I'm sure your local group would have awesome projects or suggestions.
Could you maybe explain the first ten lines? I'd really appreciate it
I have made a connect 4 variant in javascript and I wont run out of project ideas in python, what i need is a place to code with others to get better at python. I dont want to learn it all alone :)
Great idea, i immediately found a "pyladies" group in my town, they say they accept males, too :P
You might want to help me on this https://github.com/kriadmin/30-seconds-of-python-code . It will be really fun. Gitter room https://gitter.im/30-seconds-of-python-code/Lobby
Good luck! Many times groups specifically for women exist in the IT space because women are so underrepresented, but I've found very few of these are for women ONLY. As long as you're a decent human being, I'm sure they'll be glad to have you around!
Did I understand it right that this is just a list of random useful python code you are supposed to understand in 30 sec? I have a little notepad with things i found useful, i could suggest that to merge into your list :)
it's funny just how crappy forward euler is for basically any problem.
https://github.com/belangeo/pyo http://ajaxsoundstudio.com/pyodoc/examples/01-intro/02-sine-tone.html
A simple CSV/JSON/XML/XLS/SQL inter converter does not solve any hard problems.
Name: House of Python Sigil: two intertwined snakes Saying: ‘never is often better than *right* now’ Titles: Defenders of the immutable Tuples. Keepers of the sacred quotes of Monty. Wardens of the Everfull Flask Lords of Rapid Dev Allegiances: Greater House of C
Build something to automate something you do all the time. Always need to run the same 3 commands to get some Excel sheet? Do that. Always check the weather on your computer when you login? Do that. Want the latest responses from Reddit to your questions? Do that. Stick to the standard lib and find something that makes your life easier by a small percentage and you'll finish it sooner. 
stick is bit too long IMO
Learning basics of python on Codeacademy.. I hope to finish it asap.. Dishan..
This is something I've been waiting for a long time.
Thank you, Mr Weatherman!
Just assign numbers to variables. You can use Python like a calculator. x = 1 y = 2 z = x + y 
You don't need any experience with PHP or Laravel by the way. If the design decision makes sense and looks good we can go ahead and implement it.
&gt; For "performance" I mean speed As do I. I use "quality" for the "goodness measure" of an algorithm and performance for its speed. The destinction is often important in CV. &gt; [...] done through **cv2**, it's in feature.py in the repo. Note this is a python project, **not a wrapper over C++ code**, I think you are very confused. 
Iv'e also had bad experiences with readthedocs -- as a user though, not a dev. I don't remember it all but iv'e seen text inside boxes which you can't see because for some ungodly reason readthedocs wants everything on the left of the screen and caps the rest of the text. Also other things. Which im too lazy to go checkup on now.
Why not?
Yeah it just seemed odd to me. I just wanted a place to host markdown files. readthedocs seemed to want to build my repo. It's probably a great service but for a documentation hosting service it wasn't the point and click solutions i was hoping for.
https://en.wikipedia.org/wiki/Time_zone The sun lights up the Earth to make day, and the Earth is round. So when, for example, it's noon in London, UK, it's late night on the previous day in the US, and morning on the next day in China.
**Time zone** A time zone is a region of the globe that observes a uniform standard time for legal, commercial, and social purposes. Time zones tend to follow the boundaries of countries and their subdivisions because it is convenient for areas in close commercial or other communication to keep the same time. Most of the time zones on land are offset from Coordinated Universal Time (UTC) by a whole number of hours (UTC−12 to UTC+14), but a few zones are offset by 30 or 45 minutes (e.g. Newfoundland Standard Time is UTC−03:30, Nepal Standard Time is UTC+05:45, and Indian Standard Time is UTC+05:30). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
jq. For dealing quickly &amp; efficiently with json parsing in one-liners. I probably wouldnt use it unless i used to be a bash programmer and needed good json parsing though; because that meant i had to learn jq which is basically a small programming language lol.
jq. For dealing quickly &amp; efficiently with json parsing in one-liners. I probably wouldnt use it unless i used to be a bash programmer and needed good json parsing though; because that meant i had to learn jq which is basically a small programming language lol.
Hi, I am working on making an web app for LISTINING to YouTube videos. Does that sounds good? Is that worthy? I've not asked anyone yet and I think it is good for music lovers and everyone who wants to JUST listen to YT videos.
:)
Microsoft are patched first? How the world has changed.
That’s the wrong question to ask. Learning a new language isn’t difficult after you’ve learned one so it doesn’t matter what languages will be the most popular in 10 years.
Would you mind sharing your scripts?
Thank you for the correction, im confused to decide between python and javascript, if you were to suggest, which one should i chose to start with for application purpose?
and is there any other language which has wider application at the moment than these two?
In 10 years you're gonna ask yourself what language won't make you hate your life... But to answer your question, COBOL. Good luck with that.
While you could probably find a number that shows the number of users of a certain language, this is still the wrong question. You use different languages for different problems and problem areas. If you ask game engine or OS developers they will point you to one set of languages (C, C++, Rust, ...) while a web developer will use another (Python, Javascript, PHP, ...) and a scientist yet another (Python, R, Matlab, ...). If you want to learn programming I suggest choosing an area that interests you, and then choose a language that is common there.
which one lang would be your choice for web development and web automation?
I'll leave that question for someone who actually works with web stuff.
I’ve just started using pelican and am hosting the site on a raspberry pi in my living room behind cloudflare warp. Works well , but I have gripes with out of date plugins and themes, but, that’s free software for you and as such I have no basis to complain :-) I’m going to try and fix some of the packages if I get a chance :-) 
I then certainly hope the spec reading will pay off :-)
...as long as you stick with one paradigm. Other paradigms may be one or more steps away: Assembler, Forth, Lisp, Prolog, Erlang, C, Haskell, APL. OpenCL/CUDA etc will also require a mind recast. So knowing Python: Smalltalk and Ruby would be easy. Java is a half step away, with its strict typing. Idiomatic Haskell, based on Category Theory, is one paradigm that seems to have a lot going for it.
I made this Python library for my own needs because I wanted to make some very simple (30 line) GUI applications using HTML/JS for the frontend. I thought others might find it useful in situations where it isn't worth the investment of using a real GUI framework, or you want to use a widget or visualisation that is only available in Javascript. Tested (a bit) on Python3 on Windows/Mac/Linux.
ah ok its about snippets, not "nice to know" things. what i have is currently: * End script at this point ```python raise Systemexit ``` * Variable string in one line ```python s = ("" if iterationcount == 1 else "s") ``` * Combining multiple strings ```python test = ['I', 'Like', 'Python', 'automation'] print ''.join(test) ``` * Set recursion limit (default 1000) ```python import sys sys.setrecursionlimit(1001) ``` * List comprehensions for multidimensional arrays ```python [[a, b, c] for a in range(x + 1) for b in range(y + 1) for c in range(z + 1) if a + b + c != n] ```
Really cool, thanks for sharing!
I know it's a long shot but on the off-chance you happen to work with Ana De Armas - hook me up brother?
What `IM_A_MUFFIN` said, but I'd also like to suggest to making something "useful" that will help in every project or just add a little touch to it. For example a simple settings system that you can reuse (e.g. settings module which has load/save function that use format you've come up with), that means you can write something into a file and forget about it unless you want to change it later, for example, how frequently it checks weather if you're logging it or want something that is realtime, the waiting time for next check could be in settings file, then for another project you would copy said settings module and use it in another project. You can also make a simple loading bar, actually, here's an example: def progress_bar(curr_value, max_value, prefix="", show_percentage=False, bar_length=50, bg_char="░", fill_char="█"): percentage = curr_value/max_value fill_bar = round(bar_length*percentage) * fill_char bg_bar = round(bar_length*(1-percentage)) * bg_char if show_percentage: ending = " [{0:.2f}%]".format(percentage*100) else: ending = " [{}/{}]".format(curr_value, max_value) print(prefix + fill_bar + bg_bar + ending, end="\r") if curr_value == max_value: print() It's customisable directly in code and can be used anywhere to indicate how much work it has finished already. It's very simple math so I won't really explain it, I'm leaving it as exercise. I will just point out that `int * string` in python means "repeat string n times", so `hi * 5` results in `hihihihihi`. Goodluck!
Great! thanks for sharing that channel :-)
Wow, pretty cool! Too bad indeed it was being stopped at 2015. Thanks for sharing!
&gt;Maybe I've been on the wrong project. I'd say most of the "collaboration" on open source is punting a problem off onto someone else (because it's their area of expertise) and when you get stuck on an implementation/skill issue, you ask someone else a few questions. There's usually not much coding with others outside of "fix this before I merge it" or "hey I got stuck, can you help?". You pretty much summed up what I fear of happening to me, that's not how it should work, everyone should equally work on all parts of project so that if someone happens to leave (the project, job, or whatever depending on what you're doing), you don't spend next 3 weeks reading their code and thinking what the fuck it's supposed to do...
Sure, check the other stuff mentioned here by user. Everything looks pretty helpful :) 
In an obvious way: the only difference between languages is semantics and syntax, the rest of them, which is around 90-95% (random number outta my ass, sorry), is the same thing accross all programming languages. If you understand what programming is and how languages work, you essentially know all languages, you are fluent in ones that you work with already, but it's not hard to become good with a new one in several weeks/months, unlike human languages. As for "most popular in 10 years", depends on what thing we'll be trying to solve the most, since programming languages are tools, they all are slightly different and assuming that nobody will try to get a nail into the wall with a screwdriver, the most popular language will be the one that will be the most suitable for that job.
Define web development. If you want it to work in a browser (talking about clientside!!!), pick JavaScript, not much choice here. If you want it to be on a server and you're asking about serverside programming... Anything from the same JavaScript (I'm biased against it so I'll suggest picking anything else but that) to literally Assembly, anything, there's lots of frameworks for that, Django (Python), Rails (or whatever, thats Ruby, I think), ASP.NET (.NET or well, C#), and so on...
Any chance you do GIS dev? Hahaha
Another ana.
Obrigado. Cara, estude e pratique. Varia muito. Tem gente que se dá bem com cursos, tem gente autodidata. Caso tenha dúvidas pode mandar uma mensagem privada e tento te ajudar!
Long shot answer: The most common cause of memory leaks I've personally seen in celery is when I use it with django and leave DEBUG mode on (in django settings). It's a slow leak too.
Post salvo caso precise tirar dúvidas de python ;) hahahaha
No problem, for loops are designed to do what you are doing. Your code will be more concise and easier to read 
**Quicksort** Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm, serving as a systematic method for placing the elements of an array in order. Developed by Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it can be about two or three times faster than its main competitors, merge sort and heapsort. Quicksort is a comparison sort, meaning that it can sort items of any type for which a "less-than" relation (formally, a total order) is defined. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
A GTK+ based GUI to create MIME types on a Linux desktop
My understanding of QuickSort was that it uses a random choice of integer from the list, but not the mean. But guess it could be similar enough that it doesn't matter after all.
I see...Just to be clear, I'm in no way claiming I created a new sorting algorithm. Thought it would be a good project, as I didn't know that particular selection strategy was widely used.
Most likely they all will. Ten years really isn't that long. It's been more than ten years since I got into this professionally, and all the languages that were around back then are still around, plus quite a few more. Ok. php seems to have dropped off, and EcmaScript has gone further, faster than I'd thought it would (thanks primarily to node.js), plus Java and desktop itself have weakened, but I can't think of any languages that had attained sufficient momentum to be adopted broadly back then that aren't still around, albeit with an evolution in their domains of appropriateness.
Your code is, most likely, running in a Container that is presenting a Virtual Machine to you... that VM is (or believes it is) running somewhere further towards the rising sun than your personal machine that you're running that code on. Now, could the server do a heck of a lot of work to figure out your relationship to the sun, then adjust the clock on the VM to match yours, and respond back with the time in your locale? Yes. But it's not worth doing so. Timezones are for humans (AKA masochists and sadists), learn to think like a machine.
and with respect to global job market, which language in your experiance has been most popular?
It's not a good idea to change max recursion depth - https://stackoverflow.com/a/3323013/3111996
As a beginner i have used a combination of python and JS at very basic level in linux OS to automate and accomplish simple tasks, i want to take it a step further but im not sure which direction to chose and which laguage to focus on more, i do not know if at industry level there is any importance to it or are there any fields which require such programming.
I'll share as soon as I have something. Will push to git and share.
Thank you for your clarification of "performance" in CV. I realize that the introduction "a complete python implementation" in the github has ambiguity, I emphasize "complete implementation"(because there some python projects that only implement parts of a SLAM system), but it can also be interpreted as "implement **all the details** of an algorithm in python", I'll modify it. Thanks again!
Thank you for your clarification of "performance" in CV. I realize that the introduction "a complete python implementation" in the github has ambiguity, I emphasize "complete implementation"(because there some python projects that only implement parts of a SLAM system), but it can also be interpreted as "implement **all the details** of an algorithm in python", I'll modify it. Thanks again!
maybe, but it is possible
Popular in terms of total number of jobs? Java, EcmaScript, C++, and Python, in roughly that order averaged over the decade, with Java dropping off near the end, Python rising, and EcmaScript sill doing well because of all the frameworks and new languages based off of it. Now, total number of jobs has nothing to do with highest quality or highest paid employment. Those come down to scarcity of people to fill the seats, and in none of those four is there really a scarcity. For instance I'd say that right now there's starting to be a booming industry in pumping out people who can use ES and Python, that's a response to there being a need today... traditionally when that happens and bakers and Uber drivers are going into debt to take bootcamps to do a thing, it's only a short time before there's a surplus of people to do that thing. Me, I'm looking at Haskell and Rust.
Continue learning Python for sure, it's useful everywhere, even in projects that aren't written in python on their own. Figure out what you want to do with your programming career, if you want one at all, then look up the jobs that suit what you want to do, and learn the listed languages, most of the time they are similar and you should notice the pattern. For example web devs almost need to understand JavaScript.
Oh hell yeah qpython has been getting kind of old and it was never this good. Thanks!
Hidrografia in your post-its
If you put the repository URL in your `.pypirc` file, you can use `twine -r pypitest` instead. 
I would need more info about your use case but basically: * In Java, you instantiate a class that will hold your state and be an entry point that Python can use to call methods (e.g., mySharedState = new MySharedState()) * In Java, you instantiate a GatewayServer (server = GatewayServer(mySharedState) * In Python, on the same machine running the JVM, you instantiate a JavaGateway (e.g., gateway = JavaGateway). You can then access the shared state with gateway.entry_point.methodOnSharedState(1, True, "a string") Further reading: * Getting strated tutorial: https://www.py4j.org/getting_started.html * Calling Python functions from Java: https://www.py4j.org/advanced_topics.html#implementing-java-interfaces-from-python-callback
Honestly, just don't use IDLE. Get a good text editor like Visual Studio Code.
I'm well aware that Django has flaws but also bear in mind the massive investment people have in the framework and the massive ecosystem that surrounds it (stuff like django social or django cms). For a framework the question you should be asking isn't "does it have flaws?" - of course it does - but are these flaws both unfixable/unlikely to be fixed and are they crippling software all the way up the stack rather than just introducing inconveniences? Sometimes the answer to that is yes (e.g. perl died this way) but once a framework or language has a significant toehold then dislodging it takes something massive. &gt;a huge flaw about django is the automagic model migrations. Although it really really convenient, i and a few other devs in my Slack group feel like they are always one migration away from destroying the migration tree or having to rollback our migrations because something didn't go right. Could you point to a specific class of bug that this magic is likely to cause and what makes it unfixable? &gt;So the flaw with django is you have to run things like python manage.py runserver, django-admin startapp, git push heroku master. Where you describe a flaw I see one of my own scripts. &gt;Static files was always a pain for Django to get going. Was way too complex and for a framework to be "everything and the kitchen sink" it really didn't have good out of the box support for static files. This is true, although: 1) It is fixable and getting fixed (it is seen as a problem). 2) There are also things to help solve the pain (e.g. whitenoise). 3) I've never found this to be an issue you couldn't work around. &gt;deployment was painful. Took probably a whole day to figure out. You probably did something wrong. Shouldn't be that hard. &gt;There are simple craft commands to deploy your application. IMHO deployment shouldn't be the framework's job, it should be the job of a deployment tool. I usually use something like ansible or heroku for deployment. &gt;I hate having to import views everytime i want to use it That's a feature, not a bug. &gt;The lack of a built in Queue system. There's nothing to be gained by building in a queue system. &gt;The lack of a real MVC structure. (Django is really more MVT than MVC) MTV is just MVC with a different name. &gt;I agree that frameworks live and die in their ecosystem but I don't think Django is the endgame. Perhaps it's not but I still think you're massively underestimating how entrenched it is, what you'd have to do to dislodge it and how much work is involved in building up something like this from scratch. From my experience, it's hard enough to dislodge frameworks that people actively *hate*. Going after one people love is pointless. Still, it's your life :)
The changes were updated on Pypi, but they should be reflected on Github now. I'll still be running tests to see that it works as expected in all possible cases, so if you encounter any more errors do let me know.
Tkinter is an interface to the Tcl/Tk software. https://en.wikipedia.org/wiki/Tcl I think theoretically you could use the OS's api ie for windows ```win32gui```. But frameworks make that process a whole lot easier.
When you care too much about language purity you end up building npm.
use atom 
&gt; That's a feature, not a bug. Like i said, some flaws, some more so complaints. this is a complaint. It's not a bug, it's just the lack of a feature. &gt; There's nothing to be gained by building in a queue system. like theres nothing to be gained by running asynchronous tasks and pushing to queue systems like redis? This doesn't make sense to me. People use celery all the time. &gt; MTV is just MVC with a different name. they are not the same. To compare them is one thing but to call them the same is not true. MVC is not MVT. MVVC aand MVVM is also not MVC. MVC is MVC. There are three basic application architectures: Application logic, Presentation logic, Database Accession logic. To call all these things MVC is nonsense. Many frameworks implement these three architectures differently but to call MVT the same thing as MVC is not true. &gt; Could you point to a specific class of bug that this magic is likely to cause and what makes it unfixable it's not a bug but an architectural design decision. Django models are literally the direct opposite of other frameworks implementations of models and migrations. Django makes take take the form of it's models which other frameworks does the opposite: makes models take the form of tables. Make changes to the table via a migration structure, models automatically inherits the form of the table when accessed. This creates the environment of finger crossing for django migrations. Making model changes has a near unlimited set of options and is too high level to work 100% of the time, even with changes. Performing migrations at a lower level (like via a migration file) releases nearly all of the magic and finger crossing and never once have I encountered an issue with models or migrations working this way. I know your a big Django fan but there are better migration solutions out there. Some can even be implemented in Django. Also Django makes developers afraid of the migration files so when i say editing a migration file, it makes a lot of people on the fence. Look at these docs for an example: https://orator-orm.com/docs/0.9/migrations.html &gt; Perhaps it's not but I still think you're massively underestimating how entrenched it is, what you'd have to do to dislodge it and how much work is involved in building up something like this from scratch. Not even a little. I understand how hard it is. I get it but it doesn't mean I'm not going to try. I feel like it's taboo in this community to talk bad about Django. I get it. I've used it. It's really good. But after using other frameworks, there are significantly better solutions to some of the architectural problems Django has tried to solve. Worst case is I and a few other contributors make this their portfolio project. Best case is you use this eventually as your go to framework. &gt; once a framework or language has a significant toehold then dislodging it takes something massive. very true. I and many other developers like the architectural solutions of Laravel so all i'm doing is basically making a Laravel port to Python
Replacing some god-awful service adapter (written in Java) with a couple of lines of neat Python
Yeah so in your function all you do is print. But in the raw code you sqrt and print on each iteration. You're not actually comparing what you think you're comparing.
I'd recommend using pyenv and not mess with your system installed Python versions. https://github.com/pyenv/pyenv-installer https://github.com/pyenv/pyenv Pyenv will install the desired Python version in your user's home directory and update you PATH variables so it is used instead of the system versions.
PyCharm community edition is free, and they provide Pro licenses for free to open source developers and students.
The odds are really good you won't need the features of Pro for quite some time, just use Community Edition. Failing that, there's VS Code, Vim and Emacs, in increasing order of learning curve.
You should probably just look at where the data is actually loaded from.
It's actually dynamically loaded so I'm not sure how I might tap into the source, I'm still pretty new to this. Also, I'm actually looking at charts on tradingview.com, and trying to see if I can sync it's data in my application. I've also looked to find their API for this, but I don't think they have provided that.
Look at the Network panel in the browser's dev tools.
 scrambler.py --unscramble &lt;path to logfile&gt;
C++ can be frustrating, yes. I was blessed to have enough time to dedicate to it so I could really works on the fundamentals. Jumping in a codebase without thorough knowledge of the base concepts will be painful, yes. These days my frustrations with the language is that it's not modern, the lack of package manager is an absolute pain (last time I wrote both a thread pool and an xml parser because it simply took less time than fiddling around with libraries). C++ 20 modules will fix that (they say) but I wait to see. I simply refuse to work with java and php. I have the feeling that it just hurt me as a programmer, and it hurt the enjoyment I get from coding (something I can't afford because I plan to code for another 40 years before retiring, and if I'm unhappy this whole time I might as well kill myself). I won't go over why I hate these languages as there are sufficient litterature on it. There are very well designed languages that you won't see much people complain about such as Elixir or Haskell. Java was pushed heavily in academia by Oracle, so that student would be familiar with it, in order to secure a supply of java programmers for the market. Languages are not equals, and working with them is not an equal experience. Try writing the same program in Python and Visual Basic if you want to experience this to the fullest. I've been professionally working in Python and it is quite pleasing. For large codebases, I miss static typing (but that's my preference). You need more tests than with other languages but that's ok. I have found that decently written javascript is also quite pleasing to work with (if your team doesn't tolerate the pure madness javascript let you get away with). That, and Typescript and Purescript are jewels.
The agreed-upon "patch day" was Jan 9 (today). Given the media leaks ... this agreed upon moratorium was abandoned on Jan 3 or Jan 4. Patches for the stock kernel were released a few days ago and RedHat has released. But Canonical doesn't use the stock kernel and has fewer resources. They have had tentative releases for two days ... but you have to actively seek them out.
What do you mean by "digitalization" here?
piratebay api https://github.com/appi147/thepiratebay
Is that bad? I have nothing but great experiences with npm. 
I know this maybe a stupid question but what is npm i tried googling it but it came up with js stuff