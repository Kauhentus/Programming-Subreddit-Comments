There is a debate to have a list of recommanded lib from pypi in the Python documentation that are endorsed by the PSF, but still separate from the release cycle.
Isn't that the problem of the Linux distro ? They should give you a proper local instead of just ASCII ?
Well, it's designed to displease. The goal is officially stated by Guido to discourage the use of too much functional programming code style, which he finds ugly. You'll never get arrow function, because that would open the door to writing stuff like: foo(bar =&gt; code code code ) And it goes against Guido views on beautiful code. I'm ok with this. Most FP dev tend to write very expressive code but kill readability. They don't know where to stop. Since you can't educate people to be reasonable, forcing their hand is the least worst option. I file that in the same category as white space indentation : human won't make the right choice and will write hard to read code, so you create an arbitrary rule to prevent it.
Finishing project euler problems. Still working on that:)
[cefpython](https://code.google.com/p/cefpython/) is probably your best bet.
Wow that font is awful
I like the syntax of: X if cond else Y Because it's unique and readable. If you use 'if cond then y else z' or 'if cond: y else: z' I think that's duplicate a code for conditional statement. Guido hate duplicate code, It's a mess. Another good example of correct way: * List comprehension: [x for x in range(5)] * Conditional Expression: x if cond else y * If conditional statement: if cond: x else: y 
Often the worst sorts of languages are those with marketing budgets. What do you find so appalling about it?
I'll install it as soon as I'm back to work, and I'll be really happy to give any feedback!
try flexx the docs: http://flexx.readthedocs.org/en/latest/ the code: https://github.com/zoofIO/flexx 
I think this project is exactly what you're looking for: https://github.com/zoofIO/flexx
when teachers give me a word-search, there is always a list of words at the bottom you are looking for, I haven't come across one without a list of words. I could use the list of english words you gave me if the user doesn't enter any words, though.
Can you make desktop/standalone apps with Django?
Eh -- I wouldn't really call myself a word-search expert since I do suck at word searches. When i'm scanning for a word I get lost or confused unless i go REALLY slow -- it was faster for me to write this program (~2.5 hours) than it would be if i tried to solve my word-search homework legitimately (It would probably take me ~4 hours), and making this program was a lot more fun than your average word-search.
Yup, I noticed this too shortly after I put up my post. Thanks! :)
&gt; http://flexx.readthedocs.org/en/latest/ Reading them now - thanks for the links!
Answering my own question, I skimmed [the docs](http://flexx.readthedocs.org/en/latest/index.html) and it does not appear there is any widget to display web content, comparable to QtWebEnginePage or the deprecated QtWebPage. This is not surprising I suppose given that one mode of a Flexx app is to run *inside* an instance of a web browser. Also missing at this stage is any kind of multi-line text display/edit widget, or any sort of table widget. Well, early days.
I recommend IPython for all your repl needs
This looks fantastic - I'll try integrating it into my research code ASAP. Thanks!
Omg. Why didn't this exist before? Thank you!!
Very cool! Thanks for releasing that. Would it be possible to add an (optional!) feature to compute and store hashes of those data sources? Then you could say "foo.png came from exactly this version of the file". For bonus points, if an input file were versioned under Git, store the Git hash of the file so that it can be trivially plucked back out of version control if you want to reproduce the results.
You can write a website with simple html, but it won't be able to change the content per each visitor (static html, for example most blogs). You can use Javascript to get some interactivity (ask the user their name, offer searching, filters, etc). If you want to store data (or offer searches of large amounts of data) then you need a program on the server. This is where a web framework helps. Dealing with different databases (SQLite, mySQL, postGres etc) is awkward so a web framework MAY allow a uniform access to the databases (Django offers this for example). There is a term CRUD (Create, Read, Update, Delete) which are the 4 basic operations you can do on a database. Django helps you write the forms for entering the data (you don't have to use it, but it saves time), it has a template language which allows you to display results (so for a phone book, you could display all the entries in order that match the search). Rails is a different framework written for Ruby, so Django won't run it. Django also has a lot of extensions, so you can probably find a lot of code already available since it is designed to be extendable.
I don't hate it exactly. But it is so rarely used that people often misinterpret when it runs. It isn't self-evident when it runs just by reading the code.
Why no pairing? SCRUM standups are understandable if you are quiet, but a need? I think if you explain to people you are quiet the right team would help make this work for you, as it's a cool part of getting things done (of course stand-ups can be replaced with group Skype call for remote teams)
At some point, any long-term developer from before 2010 will have worked 1) Without VCS 2) Without CI 3) Without Unit Tests (in some languages) Most of them will move on, and will use testing (not just unit tests), AGILE (which requires a VCS); and eventually some form of CI after someone screws up... Those that do not, or have not yet, are still people too, and they Deserve your help so long as they are not pig-headed, or too stubborn, and are willing to manage change. IF you get the opportunity to upgrade a team, i.e. you as the question and a client does not; I'd say jump on-board if after explaining that you have those additional skills and believe they will introduce a more stable, predictable environment, then these are the kinds of exceptions to your above. 
That code is more of a wip then anything. My thought process etc. tbh I'm not sure if dicts are the way to go. 
requests author tried to avoid it, since people don't want to be sticked to py3 releases. https://github.com/kennethreitz/requests/issues/2424 &gt; I discussed this at length with Guido the other day â€” chardet would have to be included first. I think that urllib3 and requests could be included into the http package together. &gt; However, I'm very inclined to agree with @hynek and @dstufft. Perhaps requests is fine just the way it is :)
Seems like one of those decisions that is incredibly intelligent...once you understand the reasoning behind it. Thank you for Requests, by the way. I'm just now learning python for use at work, and it's been incredibly helpful.
Ok, didn't get that from the bug ticket you linked to.
`logging` is another shitty design that should be in the top 3 most used stdlib modules, but most people don't know how to use it correctly.
sounds cool is the source somewhere I could see it?
Python 3 has `ThreadPoolExecutor` and `ProcessPoolExecutor` which will emit futures allowing the ability to process items in a for..loop syntax.
yeeaaahhh...I have to agree with you. I only use `@property` for its getter functionality, and usually only then for caching large "data building" values in a `self._variable` under the hood.
The 2nd code snippet is the convention for chained methods in Python.
http://github.com/Vicyorus/VicBot That's it. You can see the code is horribly formatted (wear safety goggles, you've been warned), but it works. That was the project that got me into Python and programming in general. 
Thanks for sharing, I've never heard of TinyDB. Browsing the docs it appears to be a pretty cool little library!
Honestly, the current lambda is just fine for doing actual FP anyway. Proper FP style is to use single-expression functions with recursion (mind you, Python isn't great at doing proper FP recursion either, but good luck doing TCO and not breaking Python's stack...).
I agree. If I already know an input text file is not pure 7-bit ASCII and I happen to know what the encoding of the file is, I always specify it in the 'open' function. Takes the ambiguity out of it, and makes the code platform-independent (line endings can be dealt with using the 'newline' parameter, if necessary). Encoding can be a pain, not least because it's something you typically can't figure out just by looking at the file. That's why it's so important to get the encoding from whomever created the file in the first place, and specify it in your code.
That booleans are [subtypes](https://docs.python.org/3.4/library/stdtypes.html#numeric-types-int-float-complex) of integer. I appreciate where this came from, but it still seems wrong to me. Booleans should be a distinct type of their own. "True + True + True" should not return 3 but it does. Whenever I check whether an object is an integer, I typically have to discount the possibility it's also a boolean: &gt;&gt;&gt; isinstance(False, int) True &gt;&gt;&gt; True + True + True 3 
youtube-dl can already pull m4a audio by selecting a format (`-f` &amp; `-F`, iirc). Converting to mp3 after that is an option I don't need.
Knowing that a list comprehension is not comprehending lists? :-)
And here I was about to clone it and do the same... In all seriousness though, Mongo is a bad choice for this and tinydb is just right. What would you swap out in that spot? Sqlite, maybe? Different paradigm, it gets tricky quick. 
 - inconsistency of object system Although every class derives from `object`, there are some classes which require *special* handling. I mean those starting with lowercase: def reverse_str(self): return ''.join(reversed(list(self))) str.reverse = reverse_str TypeError: can't set attributes of built-in/extension type 'str' - existence and need to use global functions, instead of corresponding object methods `any, all, filter, enumerate, getattr, setattr, len, list, set, next, sorted` and many others, build-ins mostly - deficient lambda when creating non-trivial anonymous function, where more then one expression and/or need use of statements, Python stands in your way. Forced to create full-fledged function with assigned name. - misconception of `object.__getattr__` in breakage of exception flow Find unfortunate existence of `__getattr__` leads to `AttributeError` exception object being discarded, effectively losing valuable debugging information about its origin. That's the better case. Worse when above exception is raised intentionally, not only at accessing non-existing attribute. Leads to unexpected, hard to detect, behavior. - decisions at breaking backward compatibility with Py2 Already mentioned by others. Current state after 7 years of Python3 adoption confirms mistakes made by lead devs, and underestimation of the situation. Concessions made at latest 3.x releases just highlight the truth.
After reading the source code of Python?
Sets, great. Cheers.
I work with someone like you. Its awesome. 
From a very quick look at the code it seemed to be very bad. Also, ever heard of Fabric?
&gt; Both points are fairly weak One is very well known and widely used in scientific computing. I would not call it weak. &gt; 2.or they're waiting for a C function to return A lot of people are using Python for scientific computing or data science. This generally means libraries like SciPy, NumPy, Pandas etc. Many of these are actually written in C or FORTRAN and provide a Python API for the c/fortran code, allowing it to be used as a Python library. When I talk about the GIL not being an issue "if you are waiting on C code" this is what I am referring to, and it's well known in the scientific computing community. You're welcome to write pure C or FORTRAN if you want to, but it's generally easier to write Python and call existing C/FORTRAN libs from Python. &gt; If your threads are waiting to read from disk, As for being IO bound, remember that a lot of people are also using Python as a glue language to tie together various APIs. Here, again, it's quite common to be IO bound by disk or network. And often the functions being called are actually implented in C, as explained above. Image processing would be an example. CPython is indeed the reference implementation, but it's not the only implementation you'll see in the wild.
I'm using this one https://github.com/brython-dev/brython/blob/master/www/console.html
It's mainly I/O interface to a mechanical engineering software tool (Nastran) that has the [most horrific file format you've ever seen](https://github.com/SteveDoyle2/pyNastran/blob/master/pyNastran/bdf/test/unit/testA.bdf). The input file uses 72-character lines, with 8-character fields, or 16-character fields or csv fields to define 700+ cards that describe the geometry/loads/constraints and can do static, modal transient, frequency response, static aero, flutter, thermal, transient thermal, and optimization analyses. The floats can look like `12.3`, `1.23E+1`, `1.23D+1`, and `1.23+1`. The `E` and `D` also mean different things and because you're limited on string size, writing floats means losing precision if you don't use their stupid float writing. The output file uses a Fortran formatted blocks again with a horrific format and the documentation for it it usually wrong. The commercial codes (there are ~5 knockoffs each with their own eccentricities) also have lots of bugs, so I use the testing code to debug models because it forces you to get things right. The commercial programs give less than ideal error messages (e.g. segfaulting) when you have bad inputs. Once you get I/O down, you can do a lot of cool things with it (e.g. script model building given inputs from [OpenVSP](http://www.openvsp.org/). [Here](https://github.com/SteveDoyle2/pyNastran/blob/master/pyNastran/gui/caero_subpanels.png) and [here](https://github.com/SteveDoyle2/pyNastran/blob/master/pyNastran/gui/qt.png) is the GUI. I'm biased. It's pretty and it's gotten a lot better since those pictures were taken. It's my side project and my dumping ground for anything I do at work that my boss doesn't care about. For example, it supports Cart3d, Panair, Shabp, Tecplot, and some other formats as well. They mostly all play nicely together, so you can do things very efficiently.
&gt; to know when you can use these tools, that's when expertise truly shows and when not to...
It sounds like you just got your first assignment from class. It's okay if you're confused at first, but don't be surprised if you get downvotes here.. This question to these guys is like asking what color the sky is. Basically when you type fname = requeststring("Name?:") that is the variable where the string is stored. "requeststring" is a command that prompts the user to type, displaying what's in quotes as the prompted question requiring a response. So once the user inputs the string, that answer is now saved to the fname variable. To print this variable, simply type Print fname And it will print the text stored in fname. If you want to print your own text, put it in quotes like this: Print "This is my own, static text"
you are right you need SQL :) before going all about GUI and WebApp I'm not an expierenced programmer either but my approach would probably be - plan exactly what you need and figure out how you would like to do it - design a database Layout with the Information you need You could use MySQL/MariaDB for that. My suggestion would be setting up a server for that so your data is centralized and can be accessed from wherever you install and use your application later. - Then write a some python classes which communicate with your Database using [PyMSQL](https://github.com/PyMySQL/PyMySQL) or another python mysql lib. make simple methods for reading and writing data from and to your database for example : def insert_student(self, studentname): sql = """ INSERT INTO students (name) VALUES ( %s ) """ self.db.cursor.execute(sql, studentname) Make it possible to use your application easy by just importing it and calling the methods. If this works , start with the gui :) Then you could abstract this in higher levels and build a GUI arround it or make a web application out of it. there are lots of possible ways to do that, even without HTML/CSS oh and read documtation of course ;) edit : typos
Also try r/learnpython for questions
ask them what annoys them about python. if they are experts, they will have a long list of things readily available. 
interesting idea. couple general comments: 1. use a .gitignore file so you're not committing noise like the .pyc and .*~ files. 2. your design would be improved by separating logic and presentation better, and this would provide you an opportunity to try new technologies as well. perhaps use flask to create a minimal web interface for visualization and an API for bots to interact with the scorer. 3. execfile is begging to be exploited. 
I'm assuming you mean Python 2.7? There is no Python 3.7. 
I took one look at it, thought "people could use this" and put the link up straight away. I'm delighted for the response that your (plural) efforts got here. Marks out of 10? I'll give it 11 :-)
Yeah, I can show you guys. Just a little worried of copyright because it is for college. Sorry, for not replying, had been at work. [Health Script](http://puu.sh/jTjI7/3f90d2ecb9.py) It's a bit bulky, but I wanted to get a basic code of it working before I try to condense it. And the script DOES work, but not without copying lines 16 to 100 and **print('{' +HealthBar +'} ' +PCHP +'%')** after each event in which the player receives Damage. Basically, I want the script to re-scan the HealthBars current state without copying the script again and again.
hey, no need to apologize, we're all always learning. `zip` is a function that takes a number of `iterables` and returns an iterable of `tuples` formed by the elements in each index. * an iterable is an object that can be iterated over * a tuple is an inmutable collection of ordered items so if you have two lists, `L = [2, 3, 4]` and `K = [5, 6, 7]` and call zip over them `zip(L, K)` you'll get an object that produces `(2,5), (3,6), (4,7)`. You can iterate over this with a for loop for pair in zip(L, K): print(pair) # (2, 5), (3, 6) etc. You can also do that with a list comprehension, which is what /u/billsil suggested: [pair for pair in zip(L,K)] produces a list with, again, (2, 5), (3, 6), etc. Now for your question. What are `i, j`? They are the result of the tuple unpacking. Python let's you assign the elements of a tuple to variables very easily: pair = (2, 5) a, b = pair # a = 2, b = 5 Taking that in mind, you can see it's quite useful to operate with the pair components in the list comprehension. [a * b for a, b in zip(L, K)] # [2*5, 3*6, 4*7] the list unpacking happens when you write `for a, b in zip`, and that gives you access to the variables in the former expression. List comprehensions are very powerful and useful for simple operations like this one, but become illegible pretty fast so watch out. `sum()` is a built in function that will `reduce` the list calling the operator.add function on its items. I hope this helps you get a better grasp of the solution! --- Btw, If you're new to both Python and Programming, I'd definitely stay away from other suggested solutions such as _numpy_. Chances are you won't be needing that for a long time; I think it's better to start with the basics. I'd also suggest not to be concerned with speed. The second solution proposed by /u/billsil is perfectly fine, and probably much more readable to a less experienced programmer. 
You probably want to use [PRAW][1], which is a python wrapper for the reddit API. Other then getting every comment (using [get_comments()][2]) from a subreddit and sorting them manually, the reddit API has no way to sort all the comments in a subreddit AFAIK. [1]: https://praw.readthedocs.org/en/stable/ [2]: https://praw.readthedocs.org/en/stable/pages/code_overview.html?highlight=get_comments#praw.__init__.UnauthenticatedReddit.get_comments 
The first and second options are equally fast, there's no need whatsoever to be worried about speed loss when doing a regular for loop instead of a list comprehension. In [1]: %timeit "sum([i*j for i, j in zip([1,2,3], [4,5,6]))" 10000000 loops, best of 3: 24.7 ns per loop In [2]: value = 0 In [3]: %timeit "for i, j in zip([1,2,3], [4,5,6]): value += i*j" 10000000 loops, best of 3: 24.5 ns per loop Note that in your second solution you turned the result into a float when all original items where integers! edit: grammar :\
Dnk, I'm not the developer. 
&gt; Note that in your second solution you turned the result into a float when all original items where integers! Then use: array(lista, dtype='int32') or array(lista, dtype='int64')
That's alright but you are not able to run it or am I missing something?
I have plenty of things like that I understand. If you think about it let me know if it ever becomes public.
this is only tangential to your overall point, but as far as "until you pay for PyCharm": PyCharm released an [open source edition](http://blog.jetbrains.com/pycharm/2013/09/jetbrains-delights-the-python-community-with-a-free-edition-of-its-famous-ide-pycharm-3-0/) two years ago.
I think it will, I'm just not sure when. It's in use for the first time this semester. If there are no problems, I can file off the email logins and such and post it.
let me try to change your mind about how regularly you should use functools. my opinion is that almost nobody uses functools frequently enough (myself included) and that a gigantic amount of common python patterns are improved by using functools for them. specifically, `functools.wraps` and the creation of custom decorators allows you to do functional style programming with a very powerful tool for composing functions. this ends up feeling like having the best of OOP (inheritance, encapsulation) without the cruft. 
Thanks for pointing out fabric. I did not know. Does it support coping files to the third server via second server?
Isn't it faster to remove the brackets and use a generator comprehension instead? 
To me this is very simple. Can you solve problems using Python that are pretty much bug free, written fairly quickly, and other "non-experts" can maintain with ease? If you can do this then you are an expert. I program primarily in Python and C++ and in the C++ world there are many people who claim that you aren't an expert unless you write fantastically complicated code in template obfuscations, lambdas and many other of the newest additions to C++. Then when you point out that lesser programmer will choke to death on their complicated code they will say that the "non-experts" basically shouldn't be programming. The reality is that when you look at code that comes from the "real-world" code that comes from products that have made hundreds of millions if not billions it tends to be on the simpler side of complexity not the harder side. When companies occasionally release their code (or it leaks) for their top tier products I rarely see anything but the most basic use of structures such as templates beyond things such as simple container classes. I don't even tend to see a whole host of even vaguely "Modern" C++ including exception handling, or even much along the lines of inheritance or even that much abstraction. Things such as a pure virtual class are pretty much unheard of. Thus the people programming products that are at the leading edge of both where computers are being pushed and at the leading edge of revenue tend would not qualify as experts by many academic standards. I guess the most important measure would be: Are they productive? This is how I prefer to see this question phrased. Not expertise but productiveness. I can give a golden example of this from my distant past. I knew a guy who was programming a server based system that had to do some fairly simple network packet manipulation at a reasonable speed. The highly functional prototype was written in Java but in this day and age it could easily be written in Python. This guy with expertise leaking out of his ears decided to reprogram the linux kernel to achieve the same goal. Not a kernel module but the core linux kernel modified to obtain some imaginary performance metric that would be better than simply fleshing out the excellent working prototype. Thus every time there was a new linux kernel the code had to be reexamined and most times significantly altered. I don't think that anyone would doubt his "expertise" and in a technical interview he would probably top any other 1000 programmers. Yet would you want him designing/building your system? NOTE: this is why I would prefer to hire a good programmer who had little "expertise" in a given language if they had proven problem solving skills in one or more other languages over someone who knew the nooks and crannies of the given domain language. A great programmer could become competent in pretty much any language in little time. Yet someone who has been programming in a single language for even decades could still be a terrible programmer. PERSONAL NOTE: The greatest improvement in my programming in the last decade came from a few years where I focused on significantly upgrading my math skills. Thus many of my approaches to problem solving stopped being iterative and instead would often skip much closer to the final solution. These would apply to any language without changing my level of language "expertise".
Honestly, Python doesn't have that many annoyances. Compared to other languages, zero. And most of those annoyances are to newcomers that don't know the language. There was a what makes you go WTF at Python thread here before, and it was just noise. I'm not a Python expert but here are some of mine, and I think they are minor/normal. One of my annoyances is that if code gets nested too much and because there are not braces it's difficult to tell where you are, but as they say, "flat is better than nested". Another one for me is the GIL, which can be taken care of with multiprocessing. I guess I have a love/hate thing with duck typing and not static typing. The __pycache__ thing is annoying. Precompiled bytecodes not being compatible between different interpreters are annoying. Performance is annoying, but can be solved by many ways, including not using Python or using many of the different implementations or dropping to C/Fortran if needed.
I think the definition of a Python Expert can best be stated in contrast with non-expert levels (beginner and intermediate). The following is just my humble opinion, for what it's worth: A beginner who "knows Python" knows the syntax of loops and functions, and has begun to become aware of the basic builtin functions like max, sum, etc. This programmer probably uses Google, tutorials, and StackOverflow to learn about Python. Let's hope they find PEP 8 (the Python style guide for the base distribution) and the documentation. An intermediate level Python programmer has learned the complete syntax of class definitions, list comprehensions and generator expressions, decorators, and begun to use the standard library (especially functools and collections). For example, this level programmer has become aware of the five or so syntactical cases for `else` (if-else, ternary, try-except-else-finally, for-else, and while-else). This programmer has begun to go to the documentation first when attempting to understand Python. An Expert level programmer has mastered the builtin functions and multiple modules of the standard library (for example, knowing that the collections.Counter is analogous to a bag or multiset in other languages), is familiar with the majority of the documentation, and references the Python source and PEP's as well as the documentation when trying to understand Python. This level programmer can interchange partial functions with closures, lambdas with full functions definitions, (i)map-filter-lambda pipelines with generator-expressions, and all of these with custom classes utilizing the Python datamodel. This programmer should understand when to use `super`, class methods, static methods, properties, and so on. This programmer is becoming aware of uses of metaclasses and descriptors, and understands why class decorators and `__new__` have replaced most uses of metaclasses in Python. This is just my personal point of view. I don't think there exists a canonical Python Expert definition. I'm sure as I continue to learn Python, my definition of an Expert will be modified somewhat. We want our definition to be useful. If the only experts are core contributors, that's not too useful. 
How do you keep your project readable with 500K lines of code? Can you show me the file structure?
&gt; Python integers, by definition, are of arbitrary precision. Unless you use the ctypes module or are using numpy arrays. You can use int32s in Python if you want. Also, the int/long unification was a Python 3 thing. Since ~80% of people who use Python, use Python 2.7, I disagree even more.
&gt; Why is it that people like you always assume this complaint comes from a place of ignorance? Because saying things that are objectively false tends to, you know, come from a place of either ignorance or malice. Currently, my impression is that you are ignorant at the least of the idea that saying 'Python 3 defaults to ASCII' is misinformation, and perhaps also a little bitter that Python is not doing what you want. I maintain that 'Python 3 defaults to ASCII' has completely different implications about what a correct fix would be, from 'Python 3 defaults to the locale default encoding, which is often set wrongly'. Python3 does not default to ASCII, so it can't be fixed to 'not default to ASCII'. It seems to me more likely that what you want is for it to **actively reject** ASCII -- that is, when the system encoding is set to ascii, assume that utf-8 is the encoding it should actually use.
Recently, I've been scraping the [Molex](http://www.molex.com/) website to get the 3D CAD models of their products.
Just try it in the interpreter. Better, read aweraw's excellent explanation, and then try it in the interpreter. If it only "work[ed] for one pair as opposed to the for loop going on until end" it wouldn't be an answer to your question &amp; I wouldn't have written it. 
lol, last updated 2006... Have you considered SQLAlchemy?
&gt;Honestly, Python doesn't have that many annoyances. Compared to other languages, zero. Sorry, but that's pretty absurd. Every single programming language has flaws. None of them are perfect. Python is nice compared to most other languages, but even in 3.5+ it still has its warts.
Examples?
Command-line argument tracking should be added by the end of the day - and I'll probably release a new version once I've done that. Telling it not to track input or output files is a good idea (I must say I'm intrigued about what scripts you're running that produce 10+ million files though!). I've added an issue for this: https://github.com/recipy/recipy/issues/56
Yeah, it does get tricky. I've spoken to a lot of people who'd like it to work on a shared server (so they can share things across their office, or their research group, or even just between their own computers), and TinyDB definitely won't support that. I'm not sure what other NoSQL-style databases would be best. Any ideas gratefully received!
Yup, it can accommodate files located anywhere - I just kept the files in the same directory for the example so that it was easy for anyone to run the examples. As for benefits over grepping the name: presumably that means you have to keep a copy of your script exactly how it was each time you ran it? I know I often don't bother to commit changes every time I tweak a parameter 'just for testing' (and then decide later on that those parameters were the ones I want to use but can't remember what they were). recipy keeps the `git diff` output too, so you can see exactly what you changed, and exactly what output files you produced, as well as all of the other metadata (python version, datetime of run etc). Have a play with it and see what you think!
Yup, that `try/except` idea sounds very sensible: I will probably end up doing the same thing.
Say the word "metaclass". If they look excited, nope. If they sigh, probably. If they literally facepalm, definitely.
[Careful now](https://en.wikipedia.org/wiki/No_true_Scotsman).
I'm not sure what the problem is. You know the imagenumber, and you know how to get the full file name from the imagenumber. You just have to use it in your code where you open and save the files.
&gt;In engineering --whether it be hardware, software, mechanical, etc.-- you want people who are efficient, elegant and effective problem solvers regardless of tools. They also need organizational skills. Unfortunately the ability to organize a project in a meaningful/useful way is the last thing many developers think about ... when it should be the first thing.
I'm sorry if the question is obvious, but are they going to upload (officially) anything on youtube?
/r/learnpython What you describe is an inner product and Python has special functions for that. While a lack of knowledge is OK, not looking yourself for the 1000+ solutions readily and easily accessible on google is not. 
~~http://developer.boxcar.io/api/publisher/~~ ~~It seems like they made a new API, I still use the old API and send messages like this:~~ requests.post("https://new.boxcar.io/api/notifications", data={"user_credentials": boxcar_credential, "notification[title]": "You have a schedule change the first hour!", "notification[long_message]": "Some extra info as the body, not necessary", "notification[source_name]": "Timetable bot v{}".format(version), "notification[open_url]": "http://this_gets_opened_when_you_tap_on_the_notification.com/not_necessary"}) ~~I'm going to read the new API docs now, maybe it's worth it to use the new API~~ EDIT: That API is for sending messages to your own apps, use this: http://help.boxcar.io/support/solutions/articles/6000004813-how-to-send-a-notification-to-boxcar-for-ios-users
Don't get me wrong, python is great. But from perl, I miss lexical scoping. And Moose [1], though elk [2] looks like a fun attempt at a python version of it, and traits [3] does a few things I mainly miss. virtualenv is a hack. It's also a paradox, in that I don't know how a language community with so many self-proclaimed purists haven't killed it dead already by just fixing the python interpreter properly. [1] https://metacpan.org/pod/Moose#SYNOPSIS [2] http://frasertweedale.github.io/elk/ [2] https://github.com/frasertweedale/elk [3] http://code.enthought.com/projects/traits/
Nesting, spaces and pep is a pain. Also I find mixed tabs and spaces sometimes gives cryptic errors. Only other problem, is that writing large codebases in a dynamic language makes maintenance much harder and obvious bugs can easily be missed. Oh and pip. I don't understand why python packaging is such a saga and pip update outdated is not a thing and I need a script just to do my upgrades.
better read it yourself ;) that's exactly what I just said
It makes sense once you understand it though. `def` is only run once, and you're providing a mutable data structure to it that'll probably be altered in some way. It'd be nice if Python would realize what we meant so we could avoid things like `if foo is None: foo = []`. But it's consistent with Python's execution model. 
Saw this live!
It can be done, but it's not easy. Basically you take the python code from the page (some kind of textarea) and send it to a sandboxed python interpreter running on the server, then send the results back to the web app for display. That sounds straight-forward, but it takes a lot of engineering and infrastructure to make this work. (full disclosure, I work for www.getdatajoy.com , we make an online python IDE)
you sound like me but with more cunt.
The National TV channels TV Guide, and automatically start streaming if certain shows are on (world championships and such) in my office break room TV. It usually shows like an infoscreen. And I used to scrape my school's grade-website to give me sms when my grades came out. 
Nice post, thanks for sharing. One thing I'd like to point out though. Those variables called `array` are actually linked lists. The asymptotic running times given in the readme are therefore wrong because `array[i]` is not `O(1)`?
The usage of electric car charger stations. The site has no API, fun times...
The value's a joke, but it's how I feel about Python 2's handling of bytecode. Python 3's stuffing it away in a folder is fine with me. But since I'm working on projects with 2 and 3 support, I don't write bytecode at all. 
Do you like the interaction of software with the physical world? You should check out Carbon3D! 
Can you provide more info on how you were able to automatically stream to the TV? Did the TV have a Roku, etc? 
Can you elaborate? Do you talk about organizational skills at individual level (prioritizing, juggling different tasks, order on your desk and in your files, etc.) or at project level (assigning who does what and when). Wouldn't the latter be a responsibility of a project manager?
/r/learnpython
 foo |= []
All comments are nice and provide great overview. Regarding you last two questions: my own way in web development started about 1.5 years age from udacity web-development course (https://www.udacity.com/course/web-development--cs253) by Steve Huffman, co-founder of reddit. It is well designed and organized, project based and uses low-level web framework. It familiarize you with what happens behind the curtains of high-level frameworks. Actually it helps me a lot with understanding of how web works and allows to dive deeper into web-programming and use it more productively. You should not bother to start this class with low level framework, since all concepts are introduced step by step, and even if you cannot understand something with your current level you can skip it freely and come back later. Feel free to ask questions, if you need more information about my experience
- Financial statistics for the s&amp;p 500 listed companies from yahoo finance. - Poker hands and plays on a online poker website - this involve screen scraping as it is a Flash application As a little tip: The first couple of weeks of scraping I simply store the entire html document. I only start parsing after I've got a reasonable size dataset stored offline. Sometimes the DOM structure for websites isn't totally fixed, small changes will occur (e.g. they introduces extra &lt;b&gt;&lt;/b&gt; for boldness or other idiosyncrasies). Without that dataset I wouldn't know that, and my parser would return faulty results.
Digikey and Mouser. I wrote an app to track electronics parts inventory. I used BeautifulSoup, but I'm planning to rewrite it with casperjs because the pages are increasingly rendered in JavaScript. edit: Would be happy to find JS-aware scraping tools in Python instead of going to phantomJS/casperJS. Any recommendations? 
first sign that its outdated software: its hosted on sourceforge.net
Yahoo finances, filter and model data about my portfolio without having to go stock by stock.
The easy solution would be using a service (like https://www.sonadier.com/). It will get you up and running very fast at the price of handing over your data (and money if you have &gt; 10 users). But it will handle storage and authenticating for you. If, however, you are interested in programming and creating applications and want to create this yourself, here are the things I think you need to know to create an application like this: - Learn relational database design: understand and use EER diagrams to create the structure of you database. Then use database abstraction software, aka ORM, to implement your database. I recommend SQLAlchemy. - Learn about the MVC pattern, it's a pattern to isolate your data (M for model) from the GUI (V for view) using a controller (C). - Find you GUI library of choice. You can either go desktop (Tkinter, GTK, Glade and others), or browser. Because you need to support multiple simultaneous users I recommend a browser based solution. Take a look at Flask or Django. With a browser based solution, you need to start looking for hosting, give https://www.pythonanywhere.com/ a look. - You have multiple users, so you need to start thinking about authentication. In case you went with the browser based solution django-admin or Flask-login can be a huge help. Enjoy !
http://www.micropython.org/ from the vid description and esp8266 on the node mcu is one of the cheap boards http://nodemcu.com/
It wouldn't be a big problem to log in anyways. Just use a requests Session() and send a request to log in
and PonyORM and peewee
Flexx
Webcomic sites when I want to create an offline backup for easier reading.
The new asyncio library uses different naming conventions from the rest of the standard library for reading from file handles, kind of for no reason: https://bugs.python.org/issue22279 Any collection of libraries that's big enough is going to have warts like that. Also somewhere there's a presentation from Guido with a list of things they didn't get around to fixing for Python 3.
no I don't. if ._ and .__ are not enough of a sign that you are using this at your own risk then I don't know what to tell you. call the members .__fuck_off_I_know_what_im_doing_bar if it makes you feel better.
Do you know if there are any guides on how to do this somewhere online? I'm pretty inexperienced but I'd love to try something like this. 
I used to scrape the "heavens above" website for iridium flares. I had it set up to pop a notification on my phone if one was going to occur within 10 minutes at my current location. Made for a great party trick to be able to point at the sky and witness a flare on my count.
Hi mementix, thanks for sharing this project. I just found backtrader today. Before I go and dig deep of the project, I want to check whether it can easily support a strategy involving multiple futures instruments. I think I can clean up the data and create continuous futures prices separately.
If I am using Flask to create my website should it be a lot easier to implement this IDE as python is already running in the background. This would allow me to pass the code from the console through the python back-end and send back the results? or is it a lot more complicated than I am making it sound?
&gt; that has the most horrific file format you've ever seen I have to work with [MARC 21](http://olacinc.org/drupal/conference/2012/ebook-example.pdf).
https://download.finance.yahoo.com to get particular stock quotes in text form.
I don't scrape a website, but I do scrape thousands of political emails sent out by the major parties in Canada. We're in the middle of a federal election campaign. I make them [available online.](http://canadianstenographer.ca)
Cox Cable's monthly usage page, every morning I get a push notification (pushover) that tells me how much of my cap used, remaining cap, remaining days in billing cycle and the GB/day for the rest of the cycle. I've got a gist somewhere I'll dig it up and post it.
&gt; You'll never get arrow function, because that would open the door to writing stuff like: ~~something hideous~~ And it goes against Guido views on beautiful code. It goes against mine too. If your function needs more than a single expression, and a **short** expression at that, it's too complicated to use without testing. How are you going to test anonymous functions? 
What lambda inefficiency? Functions created with `lambda` are exactly as efficient, or not, as functions created with `def`. Care to explain what you mean?
This has now been implemented in the latest version on Github (it turned out to be sensible to implement this at the same time as something else). Docs are in the README file - basically you just need to list some modules (or `all` for all modules) in the `[ignored inputs]` or `[ignored outputs]` section of your config file. Enjoy!
You shouldn't need to know all of the standard library to be considered an expert. I also wouldn't say someone who doesn't need to look things up from time to time is an expert either. I would even go so far as to say most of the people who aren't looking things up are staying in their comfort zone, and are highly likely not to be experts. If I stick in my zone of one major topic, I don't need to look anything up either. I have a pretty hard time remembering all of the methods of every 3rd party module I have used though. If someone called themselves an expert, I would simply expect that they would be able to do, or quickly learn, anything in Python. I would wager that if someone thinks of themselves as a Python expert, they are really just a Python expert in their specific domain, rather than an overall Python expert.
Well, I was against this at first too. But then I realised how neat it actually is. I mean, sure it's kinda ugly that I can `True*something` but it's really awesome to be able to write things like `sum(isinstance(x, str) for x in collection)` to count the strings in a collection.
&lt;knee-jerk reaction&gt; Oh, you hate the GIL? You lose. &lt;/knee-jerk&gt; In my experience 9 out of 10 people hating the GIL don't have the foggiest idea what they are talking about. You might be one of the exceptions, in which case sorry for the knee-jerk reaction, but you just lost all credibility by raising the GIL. As for the hideous C ternary operator, if you prefer that, you just lost all credibility *again*. Bleagh.
I **like** the ternary if syntax. It's like English: "I'm going to the movies tonight, if I can leave work early, otherwise I'll go tomorrow." It puts the important thing first, and cannot possibly be mistaken for a regular `if` block.
Sounds like this has to be an app.
So just add the parent directory to the path, do your import, and remove it again. Or use a .pth file to control the path for your project. Or make the whole project a package. You do know about packages don't you? But... really... if your module is trying to import from a parent directory, it is assuming *way* too much about the internal layout of the rest of the application. How the hell does the module know that SomeProtobuf is located in ../engine rather that, say, ../../graphics/engine/? That's not part of the module's namespace, and it cannot safely make assumptions about the layout of **unrelated** parts of the application. The real problem is not that you can't do relative imports of this kind, but that you have too much coupling between parts of your project, and think that hard-coding assumptions about the location of files into your code is a good thing.
Just to add to this: the Python source code is actually very readable C. I'm a terrible hack at C and I find I can generally read the Python source. It's an exercise I recommend for people interested in Python. Start with ceval.c
&gt; I constantly see 'adults' writing shitty code by using public members as functions. Huh? This makes no sense. Unless you're complaining about *methods*. for func in [str.upper, str.lower]: print func("Some string") results = map(float.hex, [1.0, 1.5, 2.5, 5.0]) Obviously that's a toy example, but they're called "unbound methods" and they are a feature. Otherwise, I don't know what you mean, unless it's this: myinstance.foo = 23 myinstance.foo() # raises TypeError
2013?
Dryscrape worked pretty well for me
Awesome. Any way you could post the code?
Writing Python 2/3 code is easy. Source: all my code supports 2.4 through 3.x, and the hardest part is supporting 2.4. Although in fairness there are a few, a very few, areas where it is a bit (or a lot) annoying. If I wanted to make it easy on myself, I'd drop everything below 2.7 and 3.3, and then it would *almost* be trivial. &gt; they did nothing to make is easier. And that is *complete bullshit*. You have `__future__` imports, `from futurebuiltins import *`, the 2to3 converter, the compatibility framework `six`, and the long extended support for 2.7, to just name a few. &gt; It never even occurred to them that library authors couldn't drop support for Python 2. Again, that's utter nonsense. Of course it did. That's why every version of Python 2.x from 2.5 onwards has included features to ease the transition, and 3.x as well. E.g. the re-introduction of `u""` syntax in 3.3, and the introduction of views to dicts in 2.7. Of course the transition from 2.x to 3.x hasn't gone flawlessly. "No battle plan survives contact with the enemy", as they say, and there have been mistakes that were reversed, like the re-introduction of `callable` as a builtin. In the early days, the core developers' advice was to write your application using 2, then convert to 3 using 2to3, but with experience they learned that in fact writing hybrid 2+3 code is easier than managing two source versions. For small projects, you don't even need a framework like "six". I will grant you that if your library needs to support going back to 2.5 or 2.4 or even (god help us) 2.3, you're not going to have a good time. I've tried writing code that supports 2.3 and quickly gave that up as a bad idea. I'm not that much of a masochist! But there's not much that can be done with that, and if you are support 2.3 through 2.7 you're probably already dealing with such hairy code that adding 3.x won't make much difference. My hat goes off to those who do that for big libraries. &gt; no easy way to write "if this variable here is a unicode string, encode it to utf8" Sigh. try: unicode except NameError: unicode = str if isinstance(s, unicode): the_bytes = s.encode('utf-8') 
Thanks for the suggestion! I will check it out!
Thank you for your detailed response! This answers several questions I had. I understand what you're saying about using frameworks to generate dynamic HTML pages. That completely makes sense now. 
&gt; the most horrific file format you've ever seen The file format is based on the punch card format the earlier versions used. 
&gt; I should be able to literally copy from StackOverflow, paste, and go about my business. Yeah, and I should be able to say "Microwave! Make me a burrito! Just the way I like it, and I want it ready five minutes ago!" And yet somehow I still have to get up off the couch, put the burrito in the microwave, and push buttons, like some sort of animal. Life is so unfair. But seriously, you probably would have loved the philosophy behind Apple's Hypercard. It was supposed to be like Lego for programming. The idea was that if you had an application, and you wanted to add some functionality to it, you would look at a pre-written collection of widgets (buttons mostly), copy the button and just paste it into your application, and like magic it would just work. And for trivial functionality like "Go to next page", it did work. But for everything else? No way. You're asking for the equivalent of a magic wand.
linkedin.com , pull names and emails for a company , then send out offers
I don't hate the feature, I hate the name because it lies! It's not **else**, that implies that the `else` block runs if the `for` loop *fails* to run. That is: for x in []: print "this doesn't get printed" else: print "empty list!" but that's not what it does. It unconditionally runs after the `for` block, unless you break out of the `for`, which transfers control to just past the `for...else` block. So it should be called `then`, not `else`. 
They're private attributes. not "public members". Don't you do code reviews at your workplace? If you aren't, then that's a problem with your work-flow, not Python. If you were using Java or C, your shitty coders would be breaking something else, because they're shitty coders and your project manager lets them get away with it.
I thought digikey had an API?
&gt;&gt; or is it a lot more complicated than I am making it sound? Yes and no, it depends on how far you want to go with this. If you're just exploring and learning about this stuff, then I say go right ahead and pass untrusted python scripts to `eval` and see what happens. If you want to do this "for real" then you have a lot of reading to do first :) Some good places to start: - http://pbiernat.blogspot.co.uk/2014/09/bypassing-python-sandbox-by-abusing.html?m=1 - http://programmers.stackexchange.com/questions/191623/best-practices-for-execution-of-untrusted-code - https://blog.inexplicity.de/plaidctf-2013-pyjail-writeup-part-i-breaking-the-sandbox.html The best way to sum it up is that sandboxing python so you can run un-trusted code is really, really hard. In fact it's so hard that the only way you can do it without leaving yourself open to horrifying security problems is by running the code in a locked-down container completely isolated from everything else. I'd like to address one other point. &gt;&gt; If I am using Flask to create my website should it be a lot easier In a word, no. Because you should never, ever load untrusted code into your web server process. Ever. So if you're not going to be loading the code into the server process, then you can implement the server in any language you want. It won't matter, because the python sandbox will be running somewhere far away from your web process, where it can (hopefully) do no harm. EDIT: Ask yourself the question, what should happen when you (or someone else) types this into your IDE and hits "run": import subprocess subprocess.call(['rm', '-rf', '../']) Is it going to kill your web server, or will it just remove the contents of the (already empty) container filesystem? If so, then how will you achieve that?
I believe he's talking about newsletters that are sent out from the parties to everyone who is interested.
I scrape the megamillions and powerball website for winning numbers then if 3 or more number's match I send myself an email alert, I prepay for 3 to 4 months at a time so only update my script when my numbers change 
You want a ternary *expression* that doesn't have a result if the condition is false. If you want an *if statement* without else, you already have it: if condition: do_thing() but that's *not* equivalent to: do_thing() if condition # else do_other_thing() because that's an expression, not a statement, and it needs to return a value (whether you assign the value to something or not). So whenever the condition is false, you have an expression with no value, or at least that's what it looks like. Obviously the world won't explode, that's just my sense of humour. But having an expression that fails to evaluate to anything is a feature that makes no sense. It has to do *something* when the condition is false: - "undefined behaviour", core dump -- but that's going against the design of Python that such things shouldn't occur; - raise an exception, but that's a pain to use; - return a default value - but what, and why? The third possibility is actually the most likely, especially since that's what Ruby does. Ruby returns `nil`, Python could use `None`: irb(main):004:0&gt; y = 23 if false =&gt; nil irb(main):005:0&gt; y =&gt; nil That's actually not an awful answer but I still don't like it because it's not explicit about what gets returned: conceptually, it looks like an expression with no value. If you just want to call do_thing() for its side effects, you already have Python syntax for "if without else", it's the "if without else" *statement*.
I'm having the same issue but haven't been able to solve my problem. I run the command prompt as Administrator, then execute my script but still WinError 5. Any suggestions? What windows version are you running? I'm on 10 which could be contributing.
I build that bicycle I have flask app running but I wanna levrage the app and start using Pyspark app.
I recently scraped all scraper repos from github to answer just this question. You can check my results here: https://github.com/sebastianmng/scrapers_on_github and a brief dicussion here: http://ledealgorithms.tumblr.com/post/127877324429/scrapers-on-github-2008-2015 DISCLAIMER: This was my first project in python and the code is extremely non-pythonic but the results are interesting. 
Same, very curious. I've only done a tiny bit of Web scraping but interested in learning more and better techniques. 
Is that solution obvious? Yes. Is it elegant? Yes. Is it documented? For fucks sake, do you need documentation on how to scratch your arse too? You don't sound like a beginner who is still struggling to understand why `mylist = mylist.append(1)` "doesn't work". &gt; they removed it for what, aesthetics? Well duh, that's the whole point. Yes, that's exactly right. If you're one of the 0.1% of developers who have to care about writing hybrid code, then you *might* want a built-in "unicode" name in some of your modules. Then again, you might not. If you're writing numeric code, you probably don't care about unicode. But if you're one of the 99.9% of current and future Python coders who will never see a line of Python 2 code in their life, why on earth should you be lumbered with this *utterly irrelevant and useless* synonym for str, just for the sake of a tiny minority who may or may not even need it? You want the unicode name in your project? Fine, just add it it. It's **four lines**, two if you compact it a bit. To demand that all future generations of Python coders be lumbered with this backwards-compatibility cruft just to save you from a simple code snippet is sheer selfishness. Not every trivial four-liner needs to be a built-in, especially when it's just cruft that will be redundant for nearly everyone. &gt; The fact that u"" was ever removed proves my point. They didn't think 2/3 through. That's just downright insulting. Nobody says the core devs are perfect, they're imperfect humans and we all make mistakes. But removing the u prefix seemed like a good idea, given the expectation that nobody in their right mind would write hybrid code. That expectation turned out to be wrong -- you say it was "a terrible idea", called out by "plenty of people" -- yeah, and plenty of people also said that decorators were a terrible idea, and Unicode ("ASCII is good enough for everyone"). Even a stopped clock is right twice a day. But to say the core devs *didn't even try to think about the consequences* is just wrong. &gt; they won't release a Python 2.8. Anyone who thinks that going through TWO major incompatible version upgrades (2.7 to 2.8, then 2.8 to 3.whatever) is going to be easier than going through ONE (2.7 to 3.whatever) simply hasn't thought it through. All 2.8 will do is increase the burden on library authors, who will now have to support *three* incompatible dialects: pure 2, pure 3, and this wacky half-and-half 2.8. 
Could you please elaborate on what you mean by disposable content? I am not sure what your project tries to achieve.
Give it a try by putting in your email address, and sending an email to the email address it generates for you. Should only take about 5 minutes to get it back to you unless (a) I've exceeded my free mandrillapp quota (250 per hour) or: (b) it's hit your spam folder. I should also mention this works with attachments as well, should you feel so inclined. Enjoy!
Yes, I see where you're coming from. Using a statement here is of course the correct answer (whereas, so far as I understand, Ruby does not make the distinction in the same way). Indeed, I would expect Python to return `None` - but in order to be explicit here you'd end up writing: `do_thing() if condition() else None` Which, while more explicit (and the ordering certainly feels more natural to me), is completely horrible.
This is great! Thanks for sharing. Just tested, everything worked as expected. Tho I believe it would be useful to have the original From: mentioned somewhere.
Meta-scraping.
Were you able to do it? I had a client recently offer to pay me to scrape Facebook, I turned the job down. It seemed extremely difficult to do, even just for the public content. Also, the idea of paying for proxies seems a bit dodgy to me, not sure I trust the proxy service companies. Did you use free proxies?
Oh oh! I really like this. Are you able to give me insight on how you are doing this or would be able to send me the code?! I too am on an apartment hunt!
[The requests Session Object docs.](http://docs.python-requests.org/en/latest/user/advanced/#session-objects)
How about [Python Mentors - Python Core Mentorship](http://pythonmentors.com/)?
I tried for about 10 minutes to get this to work, but it looks like you need a "partner key" from DigiKey in order to use the API. Anyways, here's the code snippet I wrote so that you don't need to to duplicate it: import suds from suds.wsse import * client=suds.client.Client('https://services.digikey.com/search/search.asmx?wsdl') security = Security() token = UsernameToken('myusername', 'mypassword') token.setnonce() token.setcreated() security.tokens.append(token) client.set_options(wsse=security) client.service.GetProductInfo('1241-1146-ND')
I couldn't agree more. It was with a heavy heart I started writing the code to parse their pages into something usable. It just seems like such a waste of time.
A professional in what? What is your programming background? What kind of job are you aiming for?
This sounds great. Is it public?
You should not learn just for knowing it but for using it! Go make something :)
4chan, i am collecting some pictures from /w/ since I easily frequently changed my phone/tablet wallpapers
Reddit. Use a small python script to monitors a subreddit of my choosing for new posts and alerts me via Pushbullet when there are new posts. Yeah, not that useful. Fun to make though and see it in action. Goes kinda crazy if you use it on a something like /r/askreddit .
A professional in programming python of course, I have done a little programming before when I was younger, aiming for an engineering type job
Python
You are clearly mistaking two different things: what _shall not_ be done and what _cannot_ be done. Languages syntaxes and semantics express what can be done. Ps: I suggest you to get a refresher about true public/private access in oop ; )
I'm curious, how much do clients topically pay to scrape things??
You're absolutely right on all accounts. The only thing Java tends to have going for it is more mature Tooling. Despite being a younger language, it's enterprise adoption has provided tools that help soften the pain of all those bullet points. Maven, for example, can handle at least all external dependencies and platform specific targets. I suppose what would be an even better step in the right direction is bigger adoption of a tool like Pants. Pants will happily compile all your dependencies and create a single deployable artifact. Even more, it is capable of including code compiled for various targets. I haven't gotten a chance to test Pants against packages that rely heavily on C extensions yet, so its possible that will continue to suck. Conda makes dealing with those a little easier, but makes literally everything else more difficult. TL;DR: Jar doesn't solve those problems, but Java in general has tools that make those problems suck less. I haven't really found anything in Python that has general adoption. If I'm wrong, please let me know, because it would solve sooo many of the challenges I've run into at work.
If "we're all adults now" doesn't apply in your workplace, or you write shitty APIs that are easier to work around than to work with then I suggest you change employers or habits.
I also scrape webcomics, but I scrape the RSS feeds to check for updates. That way I don't have to open all of them to see which ones have updated.
http://pastebin.com/pLyR6iXv Something like this? Not sure what your looking for
That's pretty accurate. :) There are exceptions though.
Varies a lot, also some of it is completely illegal/unethical. I avoid those folks. Also, there are a ton of developers in southeast Asian and eastern Europe who will do this stuff for literally $5 an hour.
There are plenty of things wrong with python (I vote mutable arguments def foo(bar=[]), but yours is not one of them. And of course packaging.
Very interesting! What operating systems are you supporting or are expecting to be supported? I ask because I use PySerial on Windows, Mac and Linux platforms. Having one package that handles al basic I/O though would be nice. 
Not according to the files.
The requests Session docs like somebody else said, and use a HTTP sniffer to see what request gets sent to the server. If it's a post-request, just use your sessionobject.post function with the target and the parameters with the username and password.
I have to agree (for the most part) I immediately returned to the previous screen when I saw the video starting. The concern was bandwidth waste. That being said there are some videos I love to watch. Especially if the video relays a new skill in relation to my hobbies which are metal and wood working. The value in a video is the content delivered. 
I play a game called Spiral Knights. It has a small but nonetheless existent community, which means a lot of YouTubers dedicated to it. Another user decided to try to make a list of every YouTube channel featuring player vs player gameplay from Spiral Knights, but he did so on the forums. I wrote a web scraper to scrape his posts for a list of the features channels and then scrape YouTube for their amount of subscribers and total views. You can find the results [**here**](http://wiki.spiralknights.com/User:Krakob/Lockdown_archive).
Don't learn Fortran
Lua is something Python has given up trying to be though: a sandboxable scripting language, designed to be embedded in a host application.
What/how do you use the yahoo finance for? 
Please don't learn Fortran, it is ancient technology by many measures. That being said do learn more than one language Python and C++ being good combinations. However you literally have the cart before the horse! You need to learn about the sorts of jobs out there and the differing software skills required. Python for example is growing in acceptance in many engineering circles, but not all. 
What /u/saturdayplace was talking about is running python code on the server to serve web pages. You are probably looking for something more like the different answers in [this SO question](http://stackoverflow.com/questions/68477/send-file-using-post-from-a-python-script). Alternatively, as you said, you might want to look at python modules available for FTP. Going the HTTP way gives you more flexibility, but will require you to write some server side code. Googling "python FTP" or "python HTTP" and similar queries should help you get started.
Will do! Thanks for the feedback!
ok thanks
Do you collect images too? I had an idea to scrape CL and do a histogram match on all images to determine which posts were using stock images (i.e. fake/spam) and which ones were real images of places for rent. But CL banned my bot fairly quickly when trying to dl images, even with a 2 second delay between request :(
This looks more general, but I found newspaper does this as well if you are more interested in articles. 
Lol haven't hit the jackpot yet
I can send you my script if you want, it's pretty simple and I'm sure it is not the most efficient way 
please do. I'd love to dig into that. 
I hear: - I don't want to discuss the things I'm working on - I don't want to work with others - I don't to isolate myself from others stand-ups and pair programming should be done in moderation but I think you should work harder and working with others. Software is built by people and being good with people is essential to a developers success.
Freaking amazing. Thanks.
I train a scikit learn ~~classifier~~ regressor to predict the growth of each stock over one month, as well as the growth of the entire s&amp;p 500 index. If the predicted growth of a stock is bigger than the predicted growth of the index, I call it an `overachiever`. Then I leverage the overachievers in a Morkowitz style portfolio and invest accordingly. Edit: regressor
Wow! Good for you; I am quite jealous you know how to do all that!
To increase your enmity even further, try it on Python 2 with `BASE=u"rÃ¤ksmÃ¶rgÃ¥s"`.
Hahah, thanks! It's mostly just BeautifulSoup and regex (for plaintext parsing). Once you've done it a few times, it basically becomes second nature.
Nah it's just a little project I wanted to share. All db details are deleted within 4 hours and emails are deleted if there's no corresponding db entry or after the email has been forwarded. There's no privacy policy because I'm not a company, and I don't guarantee the security of anything over written because I'm not a security expert.
I'd love that. 
I wrote a post about how to get full play by play data for the last world cup [here](http://nbviewer.ipython.org/github/rjtavares/football-crunching/blob/master/notebooks/how%20to%20get%20full%20play-by-play%20data%20for%20the%20WC2014.ipynb). I have no idea if it still works. I also used the data to analyze a match. I can check that post [here](http://nbviewer.ipython.org/github/rjtavares/football-crunching/blob/master/notebooks/an%20exploratory%20data%20analysis%20of%20the%20world%20cup%20final.ipynb).
Thanks! It probably would be useful but I thought that I could leave that up the the individual to determine. I'll likely add more features later so maybe this will end up being a checkbox?
Yes but much of that HPC code has existed for decades. I'm more concerned about writing new code in Fortran. 
A lot of tutorials are math orientated because they are easy to do. Convert temperate in c to f for example, it's a useful example. Simple string operations are not as easy, a form letter for example where it fills in the name of the person and the amount they owe. The string example is a longer question (and of less use, since you really need database etc to be a real form letter generator).
You can do math in python? I thought the "+" was just to add strings together. Is there anything it can't do?
For a Raspberry Pi guy, how is this different than their GPIO stuff? Also, I have some sensors that have... "streaming" data and have had a ton of trouble reading that easily. Does this library help with that problem... if you know what I'm talking about? I have no idea what I'm talking about :)
I Scraped 1000 pages of tables behind a login from an online advertising platform and pushed them to multiple csv files depending on what value was in a specific field. Was my first really truly useful python script where writing the script was shorter than doing it manually.. Pretty proud of that one considering I'm just a beginner. 
`float(1.50)` is redundant; that's the same as `1.50`. You may find cases where it's better to use formatting operators to cleanly present floats instead of storing results from `round()`, e.g. `"{:.2} cups of flour".format(cup_flour)`.
&gt; num_cookie = float(input("Enter the number of cookies: ')) This string begins with double quote and ends with single quote. &gt;cup_flour = round(FLOUR_CONSTANT / COOKIE_CONSTANT 8 num_cookie, 2) This line has an 8 instead of an asterisk. Apart from that, I don't see any problems but as you say it's very simple.
Oh that's right, | is a bitwise or and won't work like a logical or, which does not have any reflective form.
How about adding a random one to your shell on open?
Yup, it is a useful thing, but weirdly named.
Oh ok, no worries. `str.format` is the way to go and you're using it correctly. Good work :)
I think what you're looking for is the documentation on [Callable Types](https://docs.python.org/2/reference/datamodel.html#the-standard-type-hierarchy), and maybe the section on Internal Types for code objects. It looks like function has a fundamental type in Python, it does not derive from `object`. (Although you can certainly make objects which may be [called in the same way as functions](https://docs.python.org/2/reference/datamodel.html#emulating-callable-objects).)
Setting up those symbolic constants wasn't really necessary for this since it was so simple but would you say its a good idea to make a habit out of?
Definitely. Even if you're only using a constant once it's far better to give it an identifier to help someone reading the code understand what the number is for. The only change I would make is calling them something a bit more descriptive like `SUGAR_PER_COOKIE` rather than the superfluous `_CONSTANT` part.
I have done this. I use the [lftp](http://lftp.yar.ru/) command-line program to transfer the file via SFTP upload. In my python code, I use something like: threads = [] for tmp in xyz: data_file,lftp_pgm,fname = tmp thread = threading.Thread(target=run.threadLoad, args=(data_file, lftp_pgm,fname)) threads.append(thread) thread.start() In the threadLoad function: def threadLoad(self, data_file, lftp_pgm, fname): output = fname[:-4] + "out.lftp" with open(output,mode="w",encoding="latin-1") as fp: child = subprocess.Popen([ lftp_pgm, "-d", "-f", fname ], stdout=fp, stderr=fp ) streamdata = child.communicate()[0] retcode = child.returncode You might have hostname and credentials in your xyz list for multiple destinations. In your scenario, rsync may work better if your transfer window ends before the file finishes. That way it can resume where it left off at when the script runs agains. 
As far as I can tell... I got it from an external privacy policy provider. Essentially saying that the site uses tracking cookies from google for general analytics and doesn't store personally identifying information. Furthermore your email address is collected and never given to third parties. I actually delete all db records after 4 hours, or as soon as an email comes in to be sent to your email, whichever is sooner. Then I use mandrill to forward the email so there's an "air-gap" between what's coming into the server and what's going out from it. Put simply the flow is like this: take email -&gt; store in db -&gt; return unique email address receive email -&gt; delete if no db record found -&gt; else forward then delete db record and email
I was bored and had no plans today, so [I wrote one up myself](http://paste.ofcode.org/SLZSv38Va6Vvsh2BYb9T5W). It writes to and optionally backs up the motd file in /private/etc/. If you don't have write access, it'll ask for your password so that it can write to the file. Basic usage: o = onionHoroscopes("Leo") o.write2MOTD() You can change 'Leo' to whatever your sign is, or leave it blank for it to choose a random one. There's also extra settings for write2MOTD() such as choosing to backup the file, erase the motd, and/or whether you want it to include the week it's drawing from or the sign that it's displaying for. Check out the source code for a better explanation. You'll need to use Cron to schedule it to run every week or every time you start terminal. As for every time you open a terminal - thanks to [this comment](https://www.reddit.com/r/Python/comments/3ixhfs/question_what_websites_do_you_scrape_and_why/cul9qid) I learned that you can "call it from your .bashrc or .zshrc" ~~I'm not sure how to go about that. Maybe Automator?~~
I'm interested in seeing the source. Cool project! Any specific reason you decided to make it?
I know the difference between what should not be done and what can not be done, and I know about "true" private access in OOP -- there's no such thing, because there is no One True Definition of OOP. What there are is differences of opinion by language designers as to the right balance between closed and open access. In languages like C++ and Java, where the compiler prohibits access, the language is overly restrictive and programmers -- not just bad programmers, but good programmers as well -- are often forced to [look for ways to break that restriction](https://duckduckgo.com/?q=access+private+members). Bad programmers don't just grant access to things which should be private, they also prohibit access to things which should be public, and being able to escape that strait-jacket is often necessary to get things done. Encapsulation, in the sense of enforcement of closed access to private members, is [the enemy of test-driven development](https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/) and [of the user-interface](http://ayende.com/blog/4375/encapsulation-is-the-enemy-of-the-user-interface). And don't forget that *code* is a user interface too, which is why so many developers find themselves chaffing with overly-restrictive APIs. Generally such [bondage and discipline](http://c2.com/cgi/wiki?BondageAndDisciplineLanguage) languages support ways of [escaping the restrictions](http://c2.com/cgi/wiki?UnitTestingNonPublicMemberFunctions), like C++'s `friend`, or Java reflection. Those that don't tend to more academic languages with an emphasis on theoretical purity rather than the ability to get things done. Python (at least for pure Python code, code written in C is different, and rightly so since it can violate the constraint "Python should never, ever, core dump or seg fault") removes the bondage-and-discipline part of programming and replaces it with *self-discipline*. In Python, a private name is not so much a restriction that you cannot access it, but a warning that access is not guaranteed and that it is subject to change without notice. Practically speaking, languages that enforce closed access either provide an escape hatch or fade into irrelevancy; Python cuts through that to say "we know that whatever happens, you're going to want access to private attributes at some point -- here you go, knock yourself out, you're responsible for not misusing it" without the false sense of security of enforcement. When I write my own lanuage, I'm going to provide "true" private members, and the escape hatch will be to prefix access with "pretty please": result = myinstance.private + 1 # fails result = pretty please myinstance.private + 1 # succeeds 
Two reasons: (a) eventually want to make a security product and this was just an idea I wanted to see if it worked and (b) I thought this might be a good way for whistleblowers to eventually leak things I've just released the source code here: https://bitbucket.org/jaitaiwan/emgen.io
Since when math is scary? Don't you love math?
Cool. Pretty straightforward code.
Thanks! So, I'm looking through the code, and I can't find exactly what part patches the functions after the import. I see that `__init__.py` calls `log_init`, but I can't see what about that patches all module imports. How are you getting it so that the main import function will patch all functions? What are you defining that does that? also, one funny thing I thought, the utils.multiple_insert function, that inserts each item into the head of the list. So, instead of: multiple_insert(sys.meta_path, [PatchPandas(), PatchMPL(), PatchNumpy()]) You could write: sys.meta_path = [PatchNumpy(), PatchMPL(), PatchPandas()] + sys.meta_path I guess it's more obvious and descriptive with the function name, but either way that function could be redefined as `return items[::-1] + lst` instead of a for loop.
What is the benefit to collecting and analyzing this data? Are you trying to make sure political candidates don't make spurious promises in exchange for campaign funds?
Huh, well that sucks
Python 3 by default?
I didn't realize it was so easy
&gt; So i want some code too debug and practice on. You'll probably want to write it.
If you just want to draw lines pygame would be really easy https://lorenzod8n.wordpress.com/2007/05/27/pygame-tutorial-2-drawing-lines/ If you wanted to generate videos of it check out moviepy http://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/
from this relativistic point of view (that is based upon soft knowledged taken from random posts) I shall say that also indentation shall not be enforced. Self discipline is the key. AH, irony off.
Perhaps a suggestion would be to combine them all into one print statement print("this is a line\n" "This is also a line.\n" "Also with {0} cups of sugar" .format(cup_sugar)) 
What I essentially want is to render a rectangular map of squares showing the start square, goal square, obstacle squares, and the currently searched squares, rendering it over and over while it's searching until the goal square is finally reached. Really just rendering a grid of squares again and again based on a data structure that's changing during the search.
Hey @sirskitzo, Looks like parse is expected to be a generator function. In the second example I can see that the parse function contains a number of yield keywords. This make the function a generator. In the first example you have moved those yields into the responsiveCheck function, which makes responsiveCheck a generator, not parse. If you want the first example to work like the second you will need to change the parse function to something like: def parse(self, response): for item in self.responsiveCheck(response): yield item 
If an item really looks this simple &lt;item&gt; &lt;subitem&gt; bla &lt;/subitem&gt; &lt;/item&gt; then I would use regular expressions.
&gt; . Then again, you might not. If you're writing numeric code, you probably don't care about unicode. That's so far from the truth. Unicode bleeds over into everything as soon as you start parsing files. Unicode is incredibly hard until you learn to punt the unicode problem to someone else.
bless you!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
https://pypi.python.org/pypi/pygsr would probably be what you're looking for. It allows you to use the google api for speech recognition. https://github.com/drneox/PyGSR/blob/master/pygsr.py I'm interested to see how it works out for you if you decide to use it, keep me updated.
Thanks! Here is a commented python 3-version: # Python 3: use the io module. import io # define the wrapper class. class some_wrapper: # Initialize with two predefined file-like objects containing the opening and # closing tags, and assign the wrapped file to fileobj. # # We start with the opening tag, and keep a list of data to read after that. # self.cur is a pointer to the current file. # self.files is our 'to do-list'. def __init__(self, fileobj): self.cur = io.BytesIO(u'&lt;root&gt;') self.files = [fileobj, io.BytesIO(u'&lt;/root&gt;')] # The read function is defined, so that lxml can treat some_wrapper as a fileobj. # It just goes through each file (starting with io.StringIO('&lt;root&gt;')), reads the # data into a buffer, and returns that buffer. def read(self, size): buf = self.cur.read(size) # Once we arrive at the end of the file (i.e. when self.cur.read has returned # all the contents of the file), read() returns the empty string. This is of # course equivalent to False. if not buf: # If there are no more files to read, return the empty string. if not self.files: return '' # But if there are still files in the list, pop the first one from # the list and use that as our current file. self.cur = self.files.pop(0) # ...and start returning the contents of that file. return self.read(size) # Return the contents we read in the first line of this function. # (if it is not equal to the empty string) return buf
I tried to do so above :)
For detecting the f0 in speech, I used [am-fm decompy](https://github.com/bjbschmitt/AMFM_decompy).
&gt; We should change that So you can create a patch for documentation and send it for merge: https://hg.python.org/cpython/file/tip/Doc
Makes sense.
I went through the trouble of googling that for you: * http://stackoverflow.com/questions/14911122/same-code-slower-in-python3-as-compared-to-python2 * http://stackoverflow.com/questions/23453133/is-there-a-reason-python-3-enumerates-slower-than-python-2 * https://pythonadventures.wordpress.com/2013/08/15/python-3-is-slower-than-python-2/ * https://www.reddit.com/r/Python/comments/272bao/python_34_slow_compared_to_27_whats_your_mileage/ And numerous more accounts of Python 3 being at least 50% slower than 2.7. And thus we reverse your statement, why use the version that works slower, than the previous one. On forking: there is no need in forking now as 2.7 works and is supported, we'll see what happens in 2020.
Via [docs -- Mailing list for maintenance of the Python documentation](https://mail.python.org/mailman/listinfo/docs) or an issue on the [bug tracker](http://bugs.python.org/).
hi, good idea to get some feedback. there is too much redundancy in your code. you basically have a lot of lines copy-pasted which just a few keywords changing. it should be better to have an ingredients hash table with key the name of the ingredient and value the constant then you just do a small loop on key/values and compute and print
What is wrong with text-based role playing games? I just can't get enough of them. 
Praat itself has a command-line interface, which e.g. [PraatR](http://www.aaronalbin.com/praatr/) (a wrapper for R) uses. It essentially shells out to Praat, runs a command and parses the output.
I'm the author of this module. I find it really useful and thought you guys would enjoy it too. The docs are incomplete, so feel free to ask any questions.
The documentation there is wrong about get(). Dictionary get doesn't raise key error. If the default is None it returns None. KeyError is raised if you access try to access non-existing things by d[] and the default values are not set. Source: https://wiki.python.org/moin/KeyError
I'll stick with `docopt` thanks as it is documented. How can you get to version 1.0.3 without meaningful docs?
&gt; In click, commands are just functions in the global namespace, and nesting is done with the group decorator. Extending can be done with importing * from one module to another, which is bad practice You don't need to do this in click, and the functions don't need to be in the global namespace - you can define them wherever you want. All you need is to create the group in one module, and then import it whereever you want to extend it, which doesn't seem much different to importing the baseclass apart from using decorators instead of subclassing. Eg. a.py: cli = click.Group() @cli.command() def cmd_a(): print("You called cmd_a") b.py: from a import cli @cli.command() def cmd_b(): print("You called cmd_b") 
If you post on dev/python asking to contribute examples, you will probably find people to support your effort. :)
News sites and open research journals with [Emissary](https://github.com/lukeb42/emissary). Mainly just to stay relatively informed about current developments.
Yep 
bleacher report. Just for quick summaries and links to top/trending stories 
Seems quite nice. I've never written a CLI but I get the impression that this is very pythonic. Maybe I'll pick it up for a project in the future!
Note that my eventual solution was [much, much simpler](https://www.reddit.com/r/Python/comments/3izm9y/how_to_fake_opening_and_closing_tags_for_xml_file/culntyy).
Not yet worthy of linking. This is imprecise, not all the examples are full, runnable code, there are numerous small errors, etc.
Great, I just started a similar project and have some differences: I see in your version of insertion sort you keep swapping in the while loop. Shoulnd't you just remember the value to sort, then shift al others to the right and then insert the value? def insertion_sort(random_list): for i in range(len(random_list)): j = i insert_value = random_list[i] while j &gt; 0 and random_list[j-1] &gt; insert_value: random_list[j] = random_list[j-1] j -= 1 random_list[j] = insert_value I also saw that in your version of selection sort the first for loop goes to len(array), but it should go to len(array) as the last value will be sorted anyway. I also had to j += 1 in the second for loop like this: def selection_sort(random_list): for i in range(len(random_list)-1): min_index = i for j in range(i+1, len(random_list)): if random_list[j] &lt; random_list[min_index]: min_index = j; j += 1; random_list[i], random_list[min_index] = random_list[min_index], random_list[i]
Try cloning some [Python repositories on Github](https://github.com/trending?l=python). (I thought this would be an obvious place to look?)
It's a valid point but i never encountered it in practice. The only times I saw people accessing \_fields where when they needed to bypass a bad design while waiting for a patch to be accepted upstream. Because they know it's going to break their code one day, I never saw somebody taking much risk with it unless there was no other way, in which case I'm glad it was accessible. Another case where I saw it was to make a proof of concept of something cool you couldn't do with the public API (happens frequently with Django). And usually it's followed with a health debate on making this part of the API public or not.
That's not really an excruciating level of details. Documenting [the implementation of Python dicts](https://hg.python.org/cpython/file/tip/Objects/dictnotes.txt) in greater details might be. Not even documenting that `dict` can take both a positional argument and any number of keyword arguments isn't close to excruciating details. And the author's excruciating attention to detail apparently doesn't extend to indicating whether they're documenting Python 2 or Python 3 dicts (it's apparently Python 3) A number of the examples and/or assertions aren't even correct, the author apparently hasn't bothered running their code, and much of the "improved" documentation is either less clear than the official one or completely wrong (`d.get` is wrong, `k in d` is wrong, `iter` is wrong, descriptions of the constructor use are incomplete) and the order of items is pessimal compared to the official documentation (which correctly documents `d[key]` before `d.get(key)`)
I suck at math. I have been making a living using Python for 10 years.
How have you been testing your compiler without the very scripts you are now searching for?
He could be future proofing his code 
No choice of 1.5 stop-bits on the serial library?
I always throw a childish little developer tantrum when it won't let me kludge a string and an integer together. Sure, Python offers several better ways to do this, and having the concatenation operator do that sort of thing is a slippery slope where the language ends up guessing what I want it to do in ambiguous situations (where it will usually guess wrong and silently do something unfathomable,) but I don't *want* to have to write out "{0}".format() or %s or str()! Why won't it just *work!* At this point I usually throw my sippy cup full of coffee across cubicle and begin striking the desk with my weak, pudgy fists.
If only Atom wasn't running in a browser instance. Has MS opened the plugin api for VS Code yet?
I did. They managed the proxies and fake accounts. Looks like there are services that will get you fake Facebook accounts to use. As long as you keep your user agent like a browser and throttle/randomize your requests outbound so you seem more human your fine. Things like keeping a specific account linked to the same proxy ip. There will still be incidents but they will be low. I hated it. Only did a the building blocks for them before peacing out. Ethically there is so much wrong with this. 
It looks like it's only 1 or 2. what needs 1.5 stop bits? Can't you get away with using 2 in those cases?
VSCode runs with the exact same underlying browser technology that atom does afaik. Atom is a great IDE, you should honestly give it a try.
Yeah, we'll almost certainly upload them to YouTube. And if you're curious... **2013's videos**: https://www.youtube.com/channel/UCkn0L-L6auy9YAmlSy9Kv1Q. **2014's videos**: http://pyvideo.org/category/58/pytexas-2014 (those are also available on the NextDayVideo YT channel, but PyVideo's the best way to get a curated list).
I'm scraping personal usage data from NYC Citibike, becuase it's not available through their API. I set up my own API to use the scrapper and return the data. https://github.com/AdmTal/citibike-stats I'm building an iOS app on top of it.
The order is alphabetical -- except in the middle, where it seems arbitrary.
Hey all - sorry if this comes across as self-promo, but a few days back there was [this post](https://www.reddit.com/r/Python/comments/3ixhfs/question_what_websites_do_you_scrape_and_why/) about scraping data from websites in Python. I mentioned that I've been doing this with Craigslist lately, because looking for an apartment in the Bay Area is just the worst. A few people were interested in doing this, so I wrote up a short post on how to use `requests` and `BeautifulSoup` to pull some useful data from Craigslist postings. As a bonus at the end I added a bit about using the `gmail` module to auto-email yourself every time a new posting that fits your criteria is made. [Here's a link to the whole post](http://chrisholdgraf.com/querying-craigslist-with-python/) and [here's a link to the auto-mailing bot section](http://chrisholdgraf.com/querying-craigslist-with-python/#Bonus---auto-emailing-yourself-w/-notifications) Hope you guys enjoy.
Hey - if you're still curious I wrote up a little post on how to do this over the weekend. Just posted it to the /r/python subreddit [here](https://www.reddit.com/r/Python/comments/3j3jsg/i_wrote_a_quick_post_howto_on_scraping_craigslist/)
Use this time instead to update the docs.
You make it seem like I'm getting paid for this! Somebody has to archive this crap, I guess it's me.
Heya, that's a nice script you've got. You clearly value commenting well, and organising your code into coherent sections -- that's an excellent habit, hang on to that. Some pieces of advice you may appreciate: * Including the unit in a constant's name is a big help: it makes it more obvious what the constant is for, it makes it easier to remember, and it makes calculations that use that constant read more nicely. This is a bit abstract: COOKIE_CONSTANT = 48 SUGAR_CONSTANT = 1.50 # ... cup_sugar = round(SUGAR_CONSTANT / COOKIE_CONSTANT * num_cookie, 2) This is more specific, and reads more like English: NUM_COOKIES = 48 CUPS_OF_SUGAR_PER_COOKIE = 1.50 / NUM_COOKIES # ... cup_sugar = round(CUPS_OF_SUGAR_PER_COOKIE * num_cookie, 2) * Pay attention to how you would say things in English -- that's often a good hint for nice variable names. "How many cups of sugar?" "What is the number of cookies?" --&gt; giving plural names to amount-like variables sounds natural. Compare # original name cup_sugar = round(CUPS_OF_SUGAR_PER_COOKIE * num_cookie, 2) or cups_of_sugar = round(CUPS_OF_SUGAR_PER_COOKIE * num_cookies, 2) # or name it sugar_cups, cups_sugar, cups_of_sugar, ... * You put spaces around your operators, and I love you already. If you put a space after the comment sign, I will love you even more. (Putting a space after the comment sign is also in the Python style standard. I love Guido van Rossum.) Compare #This is a comment or # So is this, but doesn't it look nicer? I hope this advice resonates with you, and have fun learning programming! 
been using this https://code.google.com/p/prettytable/
What is the hardware this has been tested with? I assume the RPi, but there must be others as well to ensure reliability. I guess any hardware that runs Linux? So then in theory this would work with a Yun as well.
Nothing at all wrong with them in of themselves. I just feel it is too often the go-to start for new Python programmers, and so feels unimaginative (ironically), and they tend to use a lot of lists of items and if-then rules, and so doesn't stretch them--whereas creating tools that use more elements that are normally seen in applications (GUIs, web, times and dates, regex, files, indexing, sets, third party modules and built ins like os, sys, datetime, sqlite, etc). Having a task that forces you to confront options in programming you don't have a clue about how to even start (or even care about, at least at first) stretches you more than using a really tiny subset of Python to engage your game-making imagination. Just my $0.02.
Is there support for (or any plan to support) x32 mode on linux? For my pypy use cases, I rarely need more than 2GB and think I could stand to gain from using half as much space for each indirection. The ix86 experiments I've done were definitely slower.
Just gotta be selective. I wouldn't focus on only doing scraping work. Maybe 5 % of the market wants people the US or similar to build more elaborate production systems. But most of the market is small 10-50 dollar jobs focused for India/similar. 
I'm working on an API to streamline this process. Check it out at [nba_py](http://www.github.com/seemethere/nba_py)
Python is a very expressive language that encourages use of separate modules or packages to break out differing pieces of functionality. So, I don't think you're going to see many 1,000 SLOC Python programs that are self-contained and in a single .py file.
Basically, all of the patching is done just by modifying sys.meta_path. This is done at the bottom of the files that define the patch classes (PatchBaseScientific.py and so on), and so it is run whenever those files are imported. I'm thinking of making this more explicit soon - having a function that actually sets `sys.meta_path` which is called from `__init__.py`. This will also make it harder to forget to add a new object to `sys.meta_path` (eg. in pull requests). Yes, you're right about `multiple_insert` - I must have been exhausted when I implemented that function
The problem is that very few distributions support x32 natively (and you need all the libraries)
See [this faq entry](https://www.reddit.com/r/cscareerquestions/wiki/faq_languages), as well as the other information in both the posts and wikis of r/cscareerquestions and r/learnprogramming.
I use this. I call it `e` and put it in my path. For anything more involved than a couple of expressions, I'll use pylab. #!/usr/bin/env python3 """ This is a very simple command line calculator. It reads in all arguments as a single string and runs eval() on them. The math module is imported so you have access to all of that. If run with no arguments, it allows you to input a single line expression. In the case of command line args, square brackets are replaced with round parentheses, because many shells interpret round parentheses if they are not quoted. """ import sys, numbers import cmath, math args = sys.argv[1:] if len(args) &lt; 1: expr = input() else: expr = " ".join(args[:]) expr = expr.replace("[", "(").replace("]", ")") def log2(x): """Return the base-2 logarithm of x.""" return cmath.log(x, 2) # the smallest number such that 1+eps != 1 # (this is approximate) epsilon = sys.float_info.epsilon env = math.__dict__ env.update(cmath.__dict__) for k in [k for k in env if k.startswith("__")]: env.pop(k) env["eps"] = epsilon env["log2"] = log2 env["inf"] = float("inf") env["nan"] = float("nan") res = eval(expr, env) # throw away small imaginary parts, they're probably just due to imprecision if (isinstance(res, numbers.Number) and res != 0 and abs(res.imag)/abs(res) &lt; 10*epsilon): res = res.real print(str(res).replace("(", "[").replace(")", "]")) ---- $ e sin[pi] 1.2246467991473532e-16 $ e hex[2**8] 0x100
Is tkinter and re included in the stdlib?
https://xkcd.com/927/
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 1914 times, representing 2.4378% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cum5j6o)
yes, but re has no external dependencies
Things I've heard on the job: C for complainer, R for response: C: I hate indentation! It ends up going off screen! R: Why aren't you separating that into different functions for composition? C: Indentation is terrible. I mixed spaces and tabs and now I can't figure out what indent level this should be! R: What?! No! Why! How?! Do not mix spaces and tabs! One or the other! C: Spaces and tabs got messed up when I transferred a program from Solaris... R: I don't even know where to begin with this...
 L[L.index(a)], L[L.index(b)] = b, a What is the possible use case for this?
[Tryton](http://www.tryton.org/) is a complete rewrite of Odoo aka OpenERP with the goals to be cleaner, more pythonic and more flexible. For example, Tryton has its own classifier on [PyPI](http://pypi.python.org/pypi?:action=browse&amp;show=all&amp;c=551), it integrates nicely with [web framework like Flask](https://pypi.python.org/pypi/flask_tryton) or the [distributed task queue like Celery](https://pypi.python.org/pypi/celery_tryton)
ouch - it adds the data in vertical lines, now row -wise.
*"Python is only for beginners."* This is usually followed up with... *"Once you learn Python, then you can graduate to a "real" language like Java or C#."* Those two misnomers make me laugh the most.
Also see PTable and tabulate on PyPi.
Please help us to help you. Give us a code snippet, the full traceback that you're getting, your Python version and OS.
Excellent post, Christ. Bookmarked for future use.
Hey thanks. :) But i have a problem with writing code still, i fell like i need more fundamental understanding.
Thanks for the feedback man. I don't have a Github account at this moment in time as I have never really needed one, although once I get the chance I'll set it all up and post the code :)
You're already inspecting the stack, just look up one frame higher. * `inspect.stack()[0][0]` is the same thing as `inspect.currentframe()`. * `inspect.stack()[1]` inside the call is the same thing as `inspect.stack()[0]` at the calling site.
&gt; However, with pip being automatically installed by the stdlib, it's safe to say that getting requests has never been easier. Hell, the stdlib documentation recommends it! &gt;Requests is already distributed by distros So what is the recommended way of installing Requests? Via pip or via distro packages? You are just contradicting yourself.
I'm surprised to see how many Python 2+3 packages there are - I wonder how many of them are depending on something like `six` versus doing it themselves? (And how many just run the output through `2to3` when you run `setup.py`).
*facepalm* That was officially a brain fart. Thanks for setting me straight. :)
That is actually pretty hilarious. When I look back I've basically progressed in the opposite direction.
Hey breamoreboy! Apologies for no error snippets. I was actually able to fix the problem by using phantomjs instead of firefox driver : ) It turns out that using firefox driver requires the browser to NOT be minimized and be the active window at all times. Here is the link I used: http://sqa.stackexchange.com/questions/2609/running-webdriver-without-opening-actual-browser-window Here is the error snippet for future reference. Exception in Tkinter callback Traceback (most recent call last): File "C:\Python27\lib\lib-tk\Tkinter.py", line 1486, in __call__ return self.func(*args) File "C:\Users\TheElder777\Desktop\TDML\c2c.py", line 35, in clicked csvToConf_vFG.startMe(self.entryVar8.get(), self.entryVar9.get(), self.entryVar6.get(), self.entryVar7.get(), self.entryVar0.get(), self.entryVar1.get(), se lf.entryVar2.get(), self.entryVar3.get(), self.entryVar4.get(), self.entryVar5.get(), self.entryVar10.get(), self.entryVar11.get(), self.entryVar12.get()) File "C:\Users\TheElder777\Desktop\TDML\csvToConf_vFG.py", line 178, in startMe browser.find_by_text('Add Event').first.click() File "C:\Python27\lib\site-packages\splinter\driver\webdriver\__init__.py", line 539, in click self._element.click() File "C:\Python27\lib\site-packages\selenium\webdriver\remote\webelement.py", line 69, in click self._execute(Command.CLICK_ELEMENT) File "C:\Python27\lib\site-packages\selenium\webdriver\remote\webelement.py", line 448, in _execute return self._parent.execute(command, params) File "C:\Python27\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 196, in execute self.error_handler.check_response(response) File "C:\Python27\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 181, in check_response raise exception_class(message, screen, stacktrace) ElementNotVisibleException: Message: {"errorMessage":"Element is not currently visible and may not be manipulated","request":{"headers":{"Accept":"application/j son","Accept-Encoding":"identity","Connection":"close","Content-Length":"81","Content-Type":"application/json;charset=UTF-8","Host":"127.0.0.1:56119","User-Agen t":"Python-urllib/2.7"},"httpVersion":"1.1","method":"POST","post":"{\"sessionId\": \"6d7d7d50-5029-11e5-9778-09212426bf99\", \"id\": \":wdc:1441057476931\"}"," url":"/click","urlParsed":{"anchor":"","query":"","file":"click","directory":"/","path":"/click","relative":"/click","port":"","host":"","password":"","user":"" ,"userInfo":"","authority":"","protocol":"","source":"/click","queryKey":{},"chunks":["click"]},"urlOriginal":"/session/6d7d7d50-5029-11e5-9778-09212426bf99/ele ment/%3Awdc%3A1441057476931/click"}} Screenshot: available via screen Apologies for the slightly premature post : / Thanks again for your quick reply! 
Hmm, need a new sub: r/hackmyshit - for all your redditsourced pen testing needs.
This should be asked at /r/learnpython You're not letting the class define `self.some_dictionary()` before you call it. You start to define it, then set a key to a function that in return calls the dictionary method, which hasn't been defined yet. 
/r/learnpython
hmmm, and if someone try: ping -c1 emgen.io PING emgen.io (104.236.249.213) 56(84) bytes of data. 64 bytes from emgen.io (104.236.249.213): icmp_seq=1 ttl=51 time=132 ms email address =&gt; test@104.236.249.213 I received this one: 55e4d3bd06421b49ce4f02e0@emgen.io P.S: Just asking...I tried only to get an email...(boring time). =] [ ]'s (hugs) 
Then what is the correct way to do this? If no one at stack exchange knows, I have 0% hope anyone at /r/learnpython could figure it out. From what I can see it cannot define the dictionary before the methods are called and it cannot define the methods before the dictionary is called so it **cannot** be done. Am I correct in assuming this? I'm trying to find the limitations of what Python can do. It works fine if I split the methods into an instance of another class. class Test(object): some_dictionary = { 'key_one': self.method_one(1, 1), 'key_two': self.method_two(), 'key_three': self.method_three() } def __init__(self): self.method_three() def method_one(self, x, y): add = x + y print "Add" return self.some_dictionary.get('key_two') def method_two(self): print "doing two" return self.some_dictionary.get('key_one') def method_three(self): return self.some_dictionary.get('key_two') the_object = Test() results in: Traceback (most recent call last): File "error_test.py", line 1, in &lt;module&gt; class Test(object): File "error_test.py", line 4, in Test 'key_one': self.method_one(1, 1), NameError: name 'self' is not defined And: class Test(object): def __init__(self): self.method_three() def method_one(self, x, y): add = x + y print "Add" return self.some_dictionary.get('key_two') def method_two(self): print "doing two" return self.some_dictionary.get('key_one') def method_three(self): return self.some_dictionary.get('key_two') some_dictionary = { 'key_one': self.method_one(1, 1), 'key_two': self.method_two(), 'key_three': self.method_three() } the_object = Test() results in: Traceback (most recent call last): File "error_test.py", line 1, in &lt;module&gt; class Test(object): File "error_test.py", line 19, in Test 'key_one': self.method_one(1, 1), NameError: name 'self' is not defined 
A quick straw poll, who would let this code past a design review?
Was a table of domains, categories and approval status. With javascript pagination . 
Damn! Good catch. Thanks
&gt;The simplest solution is to just put your dict inside a method. That doesn't seem work, try it: class Test(object): def __init__(self): self.method_three() def dic_method(self): some_dictionary = { 'key_one': self.method_one(1, 1), 'key_two': self.method_two(), 'key_three': self.method_three() } def method_one(self, x, y): add = x + y print "Add" return self.dic_method.some_dictionary.get('key_two') def method_two(self): print "doing two" return self.dic_method.some_dictionary.get('key_one') def method_three(self): return self.dic_method.some_dictionary.get('key_two') the_object = Test() Result: File "error_test.py", line 29, in &lt;module&gt; the_object = Test() File "error_test.py", line 4, in __init__ self.method_three() File "error_test.py", line 23, in method_three return self.dic_method.some_dictionary.get('key_two') AttributeError: 'function' object has no attribute 'some_dictionary' Even though it clearly is defined in Test.dic_method() 
Far out. Simple but genius.
I have. Between Sublime Text, VSCode, and Atom, Atom is the third rank. The only way it beats VSCode is the plugin support. Both are behind Sublime is usability and performance.
Thanks for your assistance ubbersith! Credited you in the latest changes which fix this: bb2cb4d
Hey thanks for your help. Credited you in the latest changes which fix this: bb2cb4d
You could further obfuscate that by encoding the ip to hex. test@0x68.0xec.0xf9.0xd5 This will slip by the commit bb2cb4d. 
Thank you for taking the time to break this down for me
How are you going to handle someone using another forwarder such that: forwarder -&gt; emgen -&gt; forwarder -&gt; emgen -&gt; ... ?
Should really look into xpath w/ etree.html, your parsing would be faster and cleaner.
Code like this shouldn't make into a PR in the first place. 
* Debian proper has full toolchain support for it in, and Debian Ports has an entire x32 system (also usable via multiarch). * Gentoo has an x32 installation tarball under amd64 (and also has their own form of multiarch). * There may be other distros, I'm not as familiar with them. You can use the userland of any of the above in a chroot, provided you have a recent enough amd64 kernel.
I believe that you can use PyObj-C to make system level calls like [this example](https://pythonhosted.org/pyobjc/examples/Cocoa/AppKit/HotKeyPython/index.html)
Soo... I'm a bit simple when it comes to Python, so I'm sure this is a simple error on my part but this is what I get when I run the script: http://pastebin.ca/3146306 Any idea where I went wrong? Thanks!
This looks like it blocks as there's no select loop? Might be a problem for a game.
Assuming your game is real time, you need unblocking character input i.e. the posix equivalent of Windows's `kbhit()`. Otherwise the system will hang waiting for a key press. The usual way I see this done on POSIX is to use `select` and poll the standard input. If you google for 'kbhit on linux' you will find the code for this. However, Pygame DOES do it, and would be less hassle for you. Check their docs or post your code.
Also, why not simplify: function isEmgenEmail (email) { if (email.indexOf('@emgen.io') !== -1) { return true; } return false; } To: function isEmgenEmail (email) { return email.indexOf('@emgen.io') !== -1; }
Here's another odd unpacking thing [someone posted on twitter the other day](https://mobile.twitter.com/cfbolz/status/634279681043394560): &gt; What's a after this statement?: (a, b) = a[b] = {}, 5
[**@cfbolz**](https://twitter.com/cfbolz/) &gt; [2015-08-20 08:23 UTC](https://twitter.com/cfbolz/status/634279681043394560) &gt; Armin just came up with this puzzle, how well do you know obscure Python details? What's a after this statement?: &gt; (a, b) = a[b] = {}, 5 ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
If the person who is reporting ilikebigsandwiches for correctly pointing people at the right subreddit could instead report people who are posting python help questions here, that would be *great*.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
that's a good point - I've started trying to do this but occasionally I forget :)
Oh, sys.meta_path? Didn't even know that was a thing. Anyway, thanks! I wanted to play with that.
Look at where you're incrementing the frame_count. The while loop doesn't change and the with is a different code block, so how does the while know that frame_count has been incremented? Is the with supposed to be within the while loop?
They'd have to generate an emgen email for each loop. Emgen emails are only good to receive one email, after that they are deleted and all emails to it are bounced.
I remember dealing with one of those back in the day myself. Being a microsoft exchange admin in those days was painful...
I like it. Would you do a pull request? https://bitbucket.org/jaitaiwan/emgen.io
Thanks for the suggestion. I am trying to run the codes from like 22-44 for each photograph. So basically I tried to put all the overlaying related code within the while loop. After the text is overlayed, I want to increment the frame count by +1 (line 43).
I'd agree with that, I wouldn't call that a misnomer.
Do you know when it will hit Homebrew? 2.6.0_1 is current there.
The entire `with` block needs to be indented one more time. Lines 32-44 need to have an extra four spaces in front of them.
A simple debugging technique is to put print calls at the top and bottom of the loop which show the control, in this case frame_count. It's then easy to see if it's changing in the way you expect.
Won't this be somewhat addressed by type hunting and type checking?
Thanks for the tip. That's actually incredibly helpful advice.
Python is 2.7.6 Python3 is 3.4.3
That I do understand. And I understand there are differences between the two. However I downloaded the latest mac release of Python 3.4.3 from the official website (link included in OP). To clarify when I launch python in the terminal for the first time after starting the terminal it is telling me that I am using 2.7.6 unless I am misreading something somewhere.
Ah, okay. I understand now. Dem syntax errors will be the death of me yet. Did not realize both versions were installed. And suddenly all my example code is working! Thank you. I am not sure I would have ever found this out on my own.
Dude. If you wrote code you need github. 
&gt; (a, b) = a[b] = {}, 5 It's a recursive dictionary. I'd argue that's not really *that* odd, because we know that dictionaries are mutable objects, so `a[b] = {}, 5` will make a recursive dictionary if `{}` is the same dictionary as `a`. It does look a bit weird when you first see it though.
Dell Factory Outlet - So I can get good deals on servers before everyone else. Realestate.com.au - So I can find out when the house I grew up in goes up for sale, so I can pretend to interested in buying it, just for nostalgia. 
I could live with bad plugins, but the performance of atom was a real show stopper for me. However, I tried it at least half a year ago. Did it improve in that regard?
Atom has gotten better, but VSCode still feels faster.
FYI, Craigslist has an RSS interface, so you don't really need to scrape. Just add the URL parameter format=rss, so like: http://austin.craigslist.org/search/sss?format=rss When you start on a scraping project, if you look for a data interface first, your life will be much easier :) Also scraping is fragile.
I don't believe I am. The *recommended* way to install requests is via pip. However, any organisation that does not have policies in place for doing that may use whatever other packaging system they choose. There's no contradiction there. 
Right now the analysis is done only based on the JSON file provided by PyPI. To know if `six` or `2to3` is used I would need to download the code of each package and look into the `setup.py`. I plan to do that at some point but not in the near future...
This is an absolutely excellent discussion by Steve which I whole heartedly thank him for taking the time to write - and for championing the VS 2015 upgrade for Python 3.5. I cannot describe how difficult it has been to support some projects as Python extensions on Windows (thank god for conda!).
Wow. You all sound so pro.
I am sure there are many descriptions for which that is true.
You win!
What was the exact issue that the cheeky fellow pointed out. Did the cron infinte loop, did the server crash. I see the issue in the UI you are trying to cover and other redditors have pointed to the difficulties there which my only addition is it's kind of nasty to hardcode here, as your ip could change without your doing (if I understand GAE correctly). However, the real issue in my mind isn't authenticating the input (as you are doing with these commits) but rather, how to keep the server from having any kind of issue with sending an e-mail to a non-existent e-mail. I looked at the cron and the mailing process appears to be fine with clean up and it doesn't look like it will retry an e-mail that fails. What am I missing?
So I'm guessing it'd be useful for running pypy on embedded. How is pypy on ARM? Does it help with memory and power consumption?
Python as a language is neither slow nor fast. Implementations are what one could consider being slow or fast. 
I cant understand why either. I just confirmed they run on the same technology under the hood. I watched a tech video and the only thing I could see that could make a difference is the fact VSCode uses "render processes" to perform typical worker tasks like intellisense etc. While atom relies on third party packages for that. EDIT: that being said, I have no used visual studio code so I cannot comment on the difference in performance
This looks really nice, does it work in Linux ? It would be great if there was a way to use just the rendering part - maybe an option to export whatever is displayed in the main window to a python program that would just render that. 
This is cool. Lots of cleanup, but the end product is smooth. Next level might be to do average auction values. Also worth noting is the type of scoring for the rankings. Ppr or non-ppr is probably the biggest thing to note. Cool stuff! 
Both will do what you want to do. Anaconda: More packages, updated more often, easier update and installion of packages if you are comfortable with the commandline, better performance on some linear algebra tasks (if you pay or have a .edu email address), easier support for multiple python environments with different packages. WinPython: Portable (doesn't need to be installed system-wide, but can be), has a GUI for updating and installing packages.
ok, this makes sense. thanks a lot :) I assume that if I use anaconda-free I cannot use my software commercially right?
I'm sorry if this is off-topic, but how do I update the packages in WinPython? The GUI does not seem to list outdated packages.
Use pip or download them off the web and install them using the GUI.
This links to CSharp questions, not python questions. [Here](http://xquizzes.com/programming/Python) is the link to the python ones.
OMG YOUR CAPS SCARED ME INTO DOING AS YOU SAY. Haha. Seriously though, what's my alternatives to using RegEx? Edit: Incorrect usages of You're
Thanks for posting this! Very detailed. A few years back I was trying to roll a custom MSI to distribute PyWin32. When I realized that I had to use a very specific version of Visual Studio I was a bit flabbergasted. Luckily as a digital packrat I still had a copy kicking around that I was able to install on a VM purely for building the extension.
I use Anaconda at work. Their business model is targeted almost exclusively at the enterprise. Updating dozens, hundreds, or thousands of Anaconda installations on machines without Internet access is a chore, and Continuum sells software supplements which makes that easier ("Anaconda Server"). There's no real commercial restrictions on the use of the Python runtime or libraries installed with Anaconda (aside from those imposed by the runtime and libraries themselves). 
WTForms uses Regex to validate emails so it doesn't really answer the question...
Sadly, you're stuck in your English thinking. The world isn't ascii anymore. Just as there are now ".coffee" as a top level domain, that will only continue to grow. You also filter out top level domains that have a valid MX record. You're also not filtering out "@localhost" and "@randomhost.localdomain" which you also probably want. But generally, you have a problem when you try to validate email addresses. It's an inherently hard problem, and you can't really do it. You can filter out "known bad" things, and you can adjust quoting , semicolons and similar, but a lot of old style validation like that fails when the world changes. And tomorrow there will be a few more, shiny top level domains.
[removed]
Yes there is. You can use the [IPAddress Module](https://docs.python.org/3/library/ipaddress.html) and create an ipaddress.ip_address() object with the given one and compare it's string representation ( ip.exploded ) or better with an instantiated object of your ip addy.
Thats a fair call. From my understanding though utf8 urls are reduced down to punycode or the like for transport? So theoretically as long as the validation included punnycode I'd be ok? Are you essentially trying to point out that validating emails with regex is entirely pointless? and that I should only make sure there's no spaces and that it has an @ symbol and that's it? @localhost etc doesn't concern me there as I'm using an external service provider to forward the emails. Except for the fact that its reducing my quota. Either way though it's not too much of a concern.
Heh, thanks for letting me know is was sarcastic. At this point, I would not at all be surprised if someone on the Internet was a rabid text adventure hound. :D
I took my phones last known GPS coordinates, and used that location to monitor for upcoming flares. The app would submit a simple query to the website, and pop a notification for any events occurring within the time limit.
I'm going to need the source on that.
C, c++, haskell, javascript, java, julia
So what do I finally need to do to compile python extensions on Windows? Step by step how can I eliminate the `cannot find vcvarsall.bat` exception?
Hmm, not sure, I've never used it, I just know it exists...
I've done analysis like this before, and what you end up teasing out is the fundamental differences in how the two sites rank players. For example, I used the difference between Yahoo and ESPN rankings to make my draft one year - taking whoever ESPN said was the best available while my other commissioners used the default Yahoo rankings. My team ended up having many rookies! Turns out the biggest difference between the two sites was how much each one "guessed" the rookies would perform.
no worries, just being quibbly
What setup do you have, are you installing it form a ``setup.py`` or ``pip``?
They also block GAE IPs as well. 
Nope. But I will. Those guys are too bubbly. 
I had this problem as I used to scrape all computer gig posts (nationwide) for keywords and put them in an excel file. After I got my threading in place, I started getting banned as I would scrape every hour or so. Luckily, someone on here wrote a proxy scraper a while back and I modified it to test each proxy on Craigslist. Unfortunately, I tried to run it a couple of weeks ago and most of the proxy sites have changed their html and made it pretty hard to scrape the proxies. IE: random divs, tons of hidden elements, gif images instead of text, etc. Instead of building your own, I'd recommend finding some open source proxy scrapers and use a random proxy from the results for each request. 
Very nice. I love CLIs for everyday stuff.
Thanks @tooker. Yeah, they really save time and are cool to use.
Cool tool. Looks like you access football-data.org. How fast are scores updated?
This is amazing. I have a few suggestions. You know the way many websites provide live updates of the events as they occur in a match (e.g. cards, penalties, goals, missed chances etc.)? If you could grab them from the command line that would be awesome. Then would it be possible for you to take a more detailed input of events (such as player position data and ball position data) at a particular frequency, say every 2 seconds, and display a graphical representation of this in the command line on a 2D ASCII pitch? Or optionally in an external GUI? This would take live sports streaming to a new era! It would be very low on bandwidth and very compact on screen real estate allowing a single user to potentially watch many concurrent matches! This would be huge in the betting world! You could have a commentary with text to speech synthesis reading the events aloud and drawing additional reaction from other sources like Twitter! I was about to suggest adding the Champions League, but you already have it on your todo list. You might add the Europa League? =D Being able to see the team line-ups and subs used would be invaluable.
What do you suggest?
Thanks a lot @linusmessi. I am currently using a live API which I created myself, to get the scores. I will see if I can scrape other details too. Regarding the second point, that sounds really cool! Will think about its implementation. And yes I have Europa league on my mind too. And I am working on team-line ups right away. Thanks for a great feedback and suggestions!
Usually all it takes is `pip install -U setuptools`. You need a recent version of setuptools to take advantage of recent versions of MSVC (Or the Python 2.7 MSVC Compiler Kit).
This suffers from the classic problem of poorly explaining (if at all) what your software *is* and *does*. Why would I use ioflo? I have no idea.
Yeah, I think that shows there's reason enough for progress on PyPy3.
*"Python is garbage collected."* Wrong. When using CPython (the official Python implementation), Python is primarily reference counted. The garbage collector is only there to break reference cycles - that's why it's called the "supplemental garbage collector" and why you can in fact, disable the GC. If you're mindful enough to break the refcycles yourself using `weakref`s, then you can get away with turning the GC off entirely. This also means it's wrong to say "The object will be garbage collected" when you're talking about general object deallocation. Objects are only GC'd when refcycles are involved. If an object is only referenced as a function's local variable, and the function returns, the object is deallocated due to its reference count becoming zero when the function returns - both *immediately* and *deterministically*. This isn't the case when you're using Jython or IronPython, since it uses the object model of the underlying Java or .NET runtime respectively - and those objects are garbage collected. But since it's Java's and .NET's garbage collector doing the work, is it really fair to say the language itself is garbage collected, and not those implementations of it? 
I like magic though ;)
Ah, makes sense for the other games too
That survey also indicates a growing trend towards Python 3. There's also the fact that Python 2.8 will never exist and Python 3 is the future, so PyPy3 needs to happen.
Seriously. I have no idea what the hell this does beyond what the title says. ioflo.com isn't very helpful either. A practical use case would be very handy.
As others have pointed to, trying to validate e-mails via regex is a bit of a lesson in futility (don't know if you have seen [this](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) but it's somewhat relevant and worth a laugh). The questions I asked were attempting to separate the validation you are attempting from the actual problem that manifests to cripple your service. It sounds though as if you are unsure how this infinite generation of emgen e-mails specifically crippled your service but you have at least tackled this issue to some degree. You should probably reconsider how you "validate" an e-mail after you have assumed it's a valid e-mail. Right now, it sounds like you send an e-mail to the email being spoof'ed, so what happens when I enter my e-mail as "boob@kitty.com", do you add a DB entry because if that's the case, that's a problem. You should catch the return e-mails from the post master saying that it's a bad e-mail and clean up the database entry (this looks like it would be in the cron). I still am not seeing a good case of this "one e-mail could potential use up my quota" issue. Say I have a valid email (bob@gmail.com) and I get one@emgen.io. I take one@emgen.io and I input it into the app again and get two@emgen.io. When I send an e-mail to two@emgen.io it's going to chain throw the e-mail server sending to one and then back to bob@gmail.com. If you want to reduce the number of e-mails you are sending in such a chain, just check that the e-mail in question isn't in the database and that should be quick lookup if the db is indexed nicely. If it is, repeat until you need to forward the e-mail to a domain outside of emgen. The other case is not a chain but a loop, I am unsure how you do this very well (would love to see an exact case) but even if you did somehow have a user slick enough to do this, then you could either detect it via the method I am describing above, where you detect the loop or you could go ahead and send the e-mail but once the e-mail is used, it's deleted and again you should end up with eventually a post master reply that the e-mail in question isn't valid, then clean up because your effectively back at the case where the input from the use is an invalid/inactive e-mail. In the end, your limited number of free emails will always be a bit of a rough point but you could at least avoid detecting that an emgen e-mail is used as input and instead check it's existence in the database before forwarding the message. 
I'd say Jetbrains Pycharm(professional). I don't know if you're a student, or know one, but they have a [student program](https://www.jetbrains.com/student/).
I quite like Sublime Text 2 with SublimeREPL. It's not the easiest to set up unless you know what you're doing, but I like it. I just F5 to run your script in a separate Sublime Text tab!
You could have a script download the page every day to a known file, then have another script pull a random horoscope out whenever you open a shell. No need to use bash. Essentially: import requests with open('horoscope.html', 'w') as f: f.write(requests.get('http://www.theonion.com/features/horoscope').text) And then from bs4 import BeautifulSoup import random with open('horoscope.html') as f: data = f.read() b = BeautifulSoup(data, 'html.parser') astro = random.choice(b.findAll("li", {"class": "astro"})) print(astro.find('div', {'class': 'large-thing'}).get_text()) Finally, set up a cronjob to have the first one run at the start of the day (whatever time you think that should be). Then in your .bashrc/.zshrc run the second script.
I find the Anaconda plugin for Sublime Text to be pretty good, they're also including some of the bleeding edge features in ST3.
Most correct version: Send an email with a link + tracking image, once it arrives it's "valid" until then, you don't know. Failing that? Don't validate, just blacklist "known bad", because you cannot validate "known good" to begin with. You can't know which top level domains are active from day to day.
Is the Kickstarter one hosted anywhere? I didn't realize that a rewards tier could be full and then have people drop out
I author an open source extension that runs everywhere, but the compiling situation on Windows is beyond a pain. My biggest pet peeve is that the Python team don't make compilation with free/open source compilers the first priority. Many of the Python versions don't work with MinGW and successors, especially to do both 32 bit and 64 bit compiles. It is ridiculous that you either need to buy Microsoft tools, or jump through many brittle time-consuming hoops. I am getting very close to not supplying binary builds for Windows any more. 
This is being used here: https://docs.saltstack.com/en/latest/topics/transports/raet/index.html 
But tracking images don't show if client disable them by default...
I think that the editor's PyCharm on what must be a 800x400 window, because I use it and it's nowhere near that bad
Hey, now. According to its [webpage](http://ioflo.com/), it's "magically powerful." So I would be careful I were you. You may be angering a spiteful wizard.
Have only glanced at it but this seems to be meant to explain. http://ioflo.com/wp-content/uploads/2013/10/ioflo_Architecture_Overview_1.02.pdf
if you add braces, it will become: if ((days == 'Monday') or ('Friday')): which comes to if False or True: what you want is this: if days in ('Monday', 'Friday'): or: if days == 'Monday or days == 'Friday':
days == 'Monday' or 'Friday' gets treated as (days == 'Monday') or 'Friday' in which 'Friday' evaluates as True. Therefore this statement is always true. (days == 'Monday') or (days == 'Friday') would be better.
May be developers think it's a good thing 2.8 will never exist. I means language stability and it means the code will run in 20 years as it does today.
brutal...
Visual Studio
Visual Studio 2015 Community is free (well, as in beer, not as in speech) and it's very good (you can definitely use it for serious work - I can't find something in ~~Ultimate~~ Professional/Enterprise that I'm missing).
I use vim for everything
I deployed a fix last night but the bitbucket webhooks were having problems... All fixed now
you know you can contribute right? There is a lot of low-hanging fruit to be attacked. i would appreciate if you don't tell us what we should be doing for you for free
I didn't see any reason to hack on the Java IDE to make it a Python IDE when there was already a dedicated Python IDE by the same people. It was just as free to download the tool that was purpose-built for the language I was working in.
Here is my take on it. Hope it helps! I would suggest to define a card as a pair like `(value, suit)`. Then a deck or a hand would consist of a list of such pairs. I would actually recommend not using a set because real decks and hands _do_ have an order. This way you can use functions from the random module to shuffle them and then pop off the end of the list, which will allow you to "hit" a random card at a time. Here is some code to show what I mean. I'll leave it to you to figure out how you might use this to make a hand of cards, how to calculate the point values of a hand with aces being 1 or 11, etc. according your game's rules. &amp;nbsp; ''' Define a card as a pair of (value, suit). For example: (4, 'Clubs') or (12, 'Hearts') Values are interpreted as being in the range 1-13 with 1 = Ace, 11 = Jack, 12 = Queen, 13 = King Jokers are presumed to be absent from the deck. If jokers are desired one might define the value 0 = Joker. ''' SUITS = ('Hearts', 'Diamonds', 'Clubs', 'Spades') def deck(): ''' Returns a deck of cards in no particular order. ''' deck = [] for suit in SUITS: for value in range(14): deck.append((suit, value)) return deck import random # A shuffled deck sample_deck = deck() sample_deck.shuffle() # Now to "hit" you can just pop cards off the end of the shuffled deck card = sample_deck.pop()
Emacs + Jedi package
Since you've used them both, what do you like better about WingIDE over PyCharm. PyCharm is my goto for python in Windows, so I'm curious if I should look into wing 
My company finds MSVA highly valuable; I find them, more of a sales demo for Microsoft products. That being said, I've never tried the python tracks, so take this with a grain of salt
You dont happen to have plans to do the contour plots like in JMP do you?
Using lxml and requests: from lxml import html import requests page = requests.get('http://www.expatforum.com/expats/america-expat-forum-expats-living-america/103086-looking-work-us-work-wanted-job-offers-3.html') root = html.fromstring(page.text) for post in root.xpath("//div[starts-with(@id, 'post_message')]"): print(post.text_content()) It finds every div tag with an id that starts with "post_message" and prints it out.
The interactive debugger is incredible. PyCharm is also a resource hog. PyCharm seems to be more popular here though, but I think that might have to do with the applications people use it for. A lot of people seem to be into web stuff (e.g. Django), of which I couldn't care less about. Wing has support for that sort of stuff too, but I don't know how it compares. I do a lot of custom parsing of obscure file formats, numerical (e.g. numpy, scipy, matplotlib, VTK) and PyQt GUI programming. Managing my 500k+ line open source project with WingIDE is easy. Managing it with PyCharm was a chore.
Thanks for the info
You can start by looking at [PyPy's Development Documentation](http://doc.pypy.org/en/latest/#development-documentation) and look at the current failures on the py3.3 branch on [PyPy's BuildBot py3.3](http://buildbot.pypy.org/nightly/py3k/) page for an idea on some things that need to be fixed. Looks like the test have not run on that branch for almost 2 weeks so you may need to kick off a buildbot to test it so that you can see recent results. A buildbot can be kicked off by filling out the form towards the bottom of [Builders](http://buildbot.pypy.org/builders) page. Before doing so you may want to hop on the #pypy irc channel to get more advice and help to get started.
I do... I already have the start of it... It needs work though
That's what the upvote arrow is for...
If you aren't partial to which Python distribution you use, install Anaconda. It will work right out of the box.
I've really come to like atom with linter, linter-flake8, and autocomplete-python. It's light and it just plain works. 
Glad I could help
Maybe try the links in the sidebar under "Python jobs" or check for student or intern positions at a University in the area. Edit: And as a junior in high school if you aren't looking for money then just keep doing your own projects on the side (build a game, automate something you do often, build a GUI, do some Raspberry Pi or Arduino projects, etc) then when you apply for a job you have a lot of experience to talk about. Source: I just interviewed some college students today for programming positions and they had no outside work/school experience.
is spyder resource heavy? it seemed pretty laggy when i was trying it out, as in just typing lagged a bit. pycharm is a little slow starting up, but once it's going, it runs just fine, so i don't think it's my machine.
Cool! You can fork the repo and submit a pull request. Let me know if you need any help.
KillFunYeah. It's ridiculously fun, but it's very hard to get into mostly due to a very small player base. 
Please, if you have any other questions for the future, refer to /r/learnpython 
I just copied and pasted into excel and saved to csv. that's where the (annoying) data wrangling came in
Ohh okay, thanks for at least letting me know I wasn't missing something! Curious, have you have experimented with web scraping? A good handle on scrapers like Kimono Labs might go a long way.
I don't know Rails, so I can't comment on anything about that, but there were some comments about Django that I did not understand. For example under Controller: Django â€“ methods or classes, but in Django there is one downside: it creates a new resource object in the same place where an empty resource object was created previously. I don't understand what he is referring to by resources. Also this: RoR gives you an opportunity to leave all fields blank, by default, while Django forbids it. You do that with Django too, just add blank=True
that didnt help. I added the path to my environment ";C:\Users\user\Downloads\chromedriver_win32" and ";C:\Users\user\Downloads\chromedriver_win32\chromedriver.exe" I tried both
Thank you for your suggestions. I do plan to continue doing python projects on the side. They're rather fun.
Yeah excel 2013 supports them as well as excel online and excel for iPad. JS API between your app and excel. 
Apparently it says he will forward all emails to your mother and the NSA.
PyCharm professional also has a lot more than just the python IDE bits. Their database plugin is pretty slick for writing SQL, for instance - I've been using it as my main interface for database development for a couple of years now.
Maybe I am missing something but I don't see how the liveapi works? 
Visual Studio has the best interface, but it pisses me off with by opening new console window everytime I run a program. There's no support for MySQL or MongoDB, PyCharm works with MySQL out of the box and has a plugin for MongoDB.
I have a problem - I can't look at ugly UIs for prolonged periods of time, so no WingIDE for me :( 
You do realise that every IDE has that as well?
read [this](https://sites.google.com/a/chromium.org/chromedriver/getting-started) yet?
 **;** needs to be at the end, not at the beginning how did you add it to the path? are those printed when you run this in cmd? echo %path%
There is no hacking involved. Add the Python plugin and you have Pycharm. Only difference is that you get more options when you create a new project. edit: That said, if it works for you, nothing wrong with it.
vim.
I like this too but Sublime isn't open source which is a turn off. 
Yeah, been reading over the script and learned how you did it and manage to condense it while testing out health gain chances. On top of that, it refreshed my memory on some of the functions and features python has.
It's a full blown Visual Studio. You can do just about everything. Of course, for these purposes, it will only work with Python 3.5 (because Python 3.5 is the only one that is built with Visual Studio 2015), but that's the way it's supposed to.
It's called vim
&gt; Unfortunately there's no dark UI. There is one. Maybe not in the trial (though I doubt it). The one I like is called Monokai. https://wingware.com/images/doc/en/intro/monokai.png &gt; WingIDE is missing many features like database support, live templates and many small cool things that PyCharm has, like the ability to test regex on the fly. I don't use those things, but I know it definitely supports Django, web2py, Flask, and Plone I suggest reading through the list of how tos: https://wingware.com/doc/howtos Nobody likes a new UI if they haven't used it. I used PyCharm for a year on my open source project. Even after a year I didn't like it. &gt; Sure, it only takes 100mb in ram, while PyCharm takes 500-700mb, but I have plenty of ram and honestly don't care about that. I care about that because it's a sign of bloat. The search is slower. The refactoring is slower. If it was just 700 MB, but faster, they I'd agree. My question is what do I get for that?
Hmm.. I happen to know both Django and Rails and I'm not too sure I understand some of the points. For example: &gt; Djangoâ€™s model file doesnâ€™t give you any information regarding currently available fields in a model file, whereas RoR has a specific file, called schema.rb that stores all available models representations. On the contrary, in Django you need to define the available fields explicitly in the model file. The question becomes one of whether you prefer to view all the model fields and relationships in one place (schema.rb in RoR) or in each model (models.py in Django). I prefer Rails, but I can see how being explicit can be preferable. &gt;In addition, RoR implies an implicit method find_by that allows a developer to find a database record by a model attribute. Django has no such implicit methods. Err yes it does. It's called filter() which is a method on the manager or queryset. &gt; RoR uses methods to represent each action. Django â€“ methods or classes, but in Django there is one downside: it creates a new resource object in the same place where an empty resource object was created previously. I have no idea what this means. Both RoR and Django creates a new controller instance at each request. There is one advantage in Rails, which is that each controller method can be matched with both a URI and an http method, whereas in Django you need to handle the multiplexing yourself (either in the function or in the controller class). However that's more of an advantage of the routing mechanism, not the controller. 
Also, I'm not sure why Rails' asset pipeline is mentioned as advantage. It made sense back when it was introduced, but is now quite dated and many front-end developers favour better tools (Webpack, Gulp, etc).
Is it really a Python course? Or "Learning Visual Studio - Python Edition"? ;)
Asking the fastest way to learn coding generally isn't a good approach. It's something that's going to take time to learn, and years to master if you've never done it before. If you already know how to program, then you'll be able to learn enough python in a week or so just by Googling tutorials.
Operator precedence. A topic undergrads in Computer Science learn in their first years. Operator binding is another topic that will be mysterious if you do not know it. The C/C++ pointer dereference operator (*) is famously notorious for throwing novices a curveball. It used to be the delight of interviewers too!
I use Sublime and Pycharm on occasion. Sublime has some really neat features, I have a Windows machine for testing at work but mostly work on my Mac or Linux, best thing about Sublime is having my preferences synced to dropbox so it doesnt matter where I use sublime all my preferences are there and exactly the same on every machine including plugins. I also like the fact it looks the same when I write other languages...
Learn Python the Hard Way is an excellent resource for a beginning programmer. 
there are programming courses on MOOC's (Massive Online Open Courses) like Coursera, FutureLearn, EDX, Khan Academy, Microsoft Virtual Academy.
It's like learning an actual language - exactly the same, really, except you can't impress dates with it when ordering exotic food. There's no fast or best method, it's just working at it over a period of time. Do a course or read a book to learn the basics, and go from there - start writing apps you need. It will take years to go from knowing nothing to knowing a bit, and many years to get to 'complete expert', if ever.
I second this. It's very clean and easy to use. 
Mapping that is about or concerning object-y stuff.
I didn't even know about that plugin!
On mobile. Download the new python 2.7 or python 3.3 from python.org. It comes with the new pip. Open up your command prompt and type : pip install ipython[all] Let it do its thing for like 5 or 10 or 20 min. After its done, close command prompt. Open command prompt and start ipython notebook by typing : Ipython notebook 
I'd consider MongoDB support to be a bug, not a feature...
&gt; Step by step how can I eliminate the cannot find vcvarsall.bat exception? The reason you get this, and most linux users *won't* get something equivalent, is because most linux users will end up with the `gcc` compiler on their system by default or through some common steps they followed a year ago. So Windows doesn't come with a compiler, whereas Linux "does". So simply, any binary extensions for python that need compilation, can generally be compiled by linux users, whereas Windows users invariably don't have that tool. This is why it is such a common problem. As /u/pmatti has also linked, Microsoft have very graciously provided the CLI compiler for Python 2.7 at a nice location now. You should be able to download / install it and now no longer get the `vcvarsall.bat` error. http://www.microsoft.com/en-us/download/details.aspx?id=44266
If they've asked for experience in r or python, then they possibly are more interested in data analysis and manipulation rather than software (just a guess). For a BA portfolio I would think it's more about the documentation rather than the programming. So I would pick a project to do, doesn't matter what, just make sure you document it really well. If you don't know how to document the project then you've probably jumped the gun a bit. Make sure you've read and understand the [BABOK.](http://www.downloads-ebooks.com/pdf/babok-v3-download.html) Source: Business Analyst for 5 years
You could probably gain a bit in codelength and legibility with: return similarity &gt;= threshold Instead of the if/elif.
PyCharm. RAM heavy (Java, after all), but it's a really great tool.
That is still an installation, which by definition isn't portable. It sets environment variables, stores configuration in your home directory, etc. Although WinPython can be installed, by default it isn't. Everything it does is isolated to the folder in which you put it. You can put that folder on a thumb drive, put it on dropbox, zip it up and email it to someone, and it will just work. You can't do that with Anaconda. You can also use it in situations where Windows permissions don't let you install anything. Depending on the policies of the company in question it may also be possible to use it in situations where policies forbid users installing software. Personally, on the windows machines I use I have Anaconda installed system-wide, but keep both Python 2 and Python 3 versions of WinPython on a thumb drive in case I need Python on a computer I have no control over.
A whole load of people have commented around me - but just to see if you are still having trouble - what version of Python are you compiling for (this affects the compiler choice)? And have you installed any Visual Studio versions on your machine?
&gt; Anaconda actually comes with Numpy linked to Intel's MKL library for the free Windows distribution. No, [it doesn't](http://docs.continuum.io/mkl-optimizations/index). There is a 30-day free trial of the MKL optimizations, but after that you have to pay (or get a free academic license if you have a university email address). In fact, the presence of MKL optimizations is one of the few differences between the free and commercial versions of Anaconda. WinPython, however, uses the MKL-optimizations all the time (since it only has a free version).
This might even be worth x-posting to [/r/soccer](http://reddit.com/r/soccer)
The people who did, and do, [large projects in Lisp and Smalltalk would completely disagree](http://steve-yegge.blogspot.com.au/2008/05/dynamic-languages-strike-back.html). Or just ask Facebook and their HipHop compiler for PHP.
I have used pyinstaller and I have heard that nutika is supposed to be quite good
By doing actual learning and work? Vade retro help vampire.
You wrote autocomplete-python? You rock! &lt;3
&gt; I know exactly how Unicode and encoding/decoding work in Python because I am a Python developer. &gt; I just don't like it. That means you are actively, intentionally misrepresenting things :/ I mean, if you already know this stuff, why else would you be insisting it isn't the case? &gt; Nothing you have said is wrong. But you just keep on repeating the same thing over and over without actually addressing the issue I have (that Py3 code doesn't work when run under standard configurations, while most everything elseâ€”including Py2â€”does). That might be because I don't really give a damn about that, because for me, this conversation seemed like you constantly resisting the facts -- which you are now telling me you already know!! -- in order to, I don't know, assuage your ego, avoid taking back your words? From my POV there was no question of talking about improvements because you didn't seem to understand what the current system even *was* -- it would be like talking about international politics with someone who doesn't even seem to understand the concept of social fictions. That has been the entire conversation, AFAICS. "I want X because of &lt;wrong statement directly related to X&gt;", "The validity of your wanting X is questionable, since &lt;wrong statement&gt; is notably wrong.". There's nothing wrong with wanting a more standard and consistent behaviour WRT default encodings. But I don't trust someone making notably wrong statements about the encoding system to, you know, actually have a clue about what a genuine improvement to the encoding system might *be*. IMO this is a reasonable and honestly, very basic, standard to hold someone proposing changes to.
Thanks for link, and on the service: touching DB once a day and sending maybe 2 MB sized letter isn't that big for Win? Or I'd better separate business logic and task manager parts?
I would add www.codeeval.com and a lot of stackoverflow.com
Have you looked into flask/cherrypy? If you want to make a web framework you can use werkzeug as a wsgi servÃ©ur.
I have coded a little bit in Django. What I meant with the statement was that Rails follows a very structured way of organising code, and even an absolute beginner can easily understand the code structure. 
**[SOLVED]** The problem was I didn't set the default python interpreter for the project to be python3 instead of python. You can do this by adding a bit of code to your `.sublime-project` file: ``` "settings": { "python_interpreter" : "/usr/bin/python3" } ``` Reference: https://github.com/srusskih/SublimeJEDI/issues/187
It's not async however you can incorprate tornado into flask if you need async. Not to mention flask is stable and easy to learn. 
I've never been able to wrap my head around Rails, but Django is about as straightforward as it comes.
This template engine is actually lifted from coverage.py (yes, coverage.py includes its own template engine). And yes, that assert is in the code. We could debate whether it's reasonable to have that assert there. I put it in because in the code that calls it (a long dunder-init function btw, another thing we could debate), it's not easy to see at a glance that the indents and the dedents are properly paired, because of the structure of the code. If the template being processed had incorrect pairings, those will be raised by explicit exceptions. So, user errors (that is, incorrect templates) are being caught with exceptions. My coding errors (improper use of indent and dedent in response to the template tags) could be caught with the assert.
Fair enough. No disrespect nedbat, you know I love you. I was just speaking in generalities.
&gt; I don't trust someone making notably wrong statements about the encoding system Please humour me, and repeat precisely what I said that you think is wrong. I'm quite happy to take back anything I've said that was wrong. I've had this conversation many times, have been wrong on several occasions, and was happy for the corrections. (Last time, for example, I learnt that not all Unicode strings can be represented in every normalisation form.) But most of what you've been saying isn't really relevant to the issue. The reason, I think, is perhaps that you believe that `sys.getdefaultencoding()` applies more widely than it does. $ env -i /usr/local/bin/python3 Python 3.4.3 (default, Jul 3 2015, 01:28:31) [GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import sys &gt;&gt;&gt; import locale &gt;&gt;&gt; sys.getdefaultencoding() 'utf-8' &gt;&gt;&gt; sys.stdout.encoding 'US-ASCII' &gt;&gt;&gt; fp = open('test.json') &gt;&gt;&gt; fp.encoding 'US-ASCII' &gt;&gt;&gt; locale.getpreferredencoding() 'US-ASCII' As stated in [the article you linked to earlier](http://robjwells.com/post/61198832297/get-your-us-ascii-out-of-my-face), just because `sys.getdefaultencoding()` returns `UTF-8` doesn't actually mean that Python 3 is using `UTF-8` for IO. Python 3 *will* default to ASCII for IO (`open`, `sys.stdout` etc.) if the environment does not specifically say otherwise. As a result, Python 3 scripts die in flames when run from BBEdit, Sublime Text and other Mac apps, `cron`, `launchd` etc. This is not inherently evil, but it's compounded by the fact that Py3 doesn't give you a simple way to change this behaviour (a `-utf8` command-line option, an `# ioencoding: utf-8` "modeline" like for source file encoding). Such a solution would be more than acceptable to me. Setting `LANG` in your `launchd` environment, as the article suggests, is a bad idea for the same reason as changing the encoding in `site.py` â€” your software won't run properly on a system with the default configuration. 
"scraping" -- "scrapping" is something else.
Football* :) Good work.
I did some web scraping for the weekly production in part 2 since that was 4 * 17 different websites. the espn one was probably like 4-5 pages/websites so it was easier to just copy and paste into excel and clean it, at least for me
Thanks @santiagobasulto. I wrote soccer to avoid confusion with American football.
Thanks man. [Done!](https://www.reddit.com/r/soccer/comments/3jcntg/soccer_cli_a_command_line_interface_for_football/)
Maybe its because Django makes everything explicit, as compared to rails, where everything is implicit. But once you get familiar to rails, you come to appreciate its structure. Really helps with organizing the code. 
Goals of the project :- 1. Implement and learn metaprogramming in python. 2. Improve coding skills. I am not aiming to go fully railesque, it's just a hobby project
I know this seems like a small, insignificant thing, but it really bothers me how they can't just say a straight sentence without saying "uh" after every single word.
#Step 1:# Start up your favourite HTTP interceptor. [I'm using Charles](http://prntscr.com/8bqmlk) #Step 2:# Vote and see which request is being sent. For this site, [it's this.](http://prntscr.com/8bqnh7) ^^[raw](http://prntscr.com/8bqoac) That's it! Now you could post to the server using the requests library, but I'm not going to look through the site's Javascript to see what the interaction_token and the variation_id is for you. It's just a simple ctrl + f from here on.
Thanks for the late reply. I am not using Python at the moment, but I will look into it.
I've written a template engine in less than 10 lines. Pretty powerful; Turing-complete, supports macros, OOP, includes, libraries, and there are modules for DB, LDAP, whatever you want. (It uses eval.)
Yes. I mean 2 minutes for one single holiday+flight. Not downloading the entire website or inventory. Just one query :)
But that's the exact opposite of what should be expected from a book called The Architecture of Open Source Applications. It should be only real world code.
it's like a #python celebrity hangout in this thread.
Just curious : What do you mean by **async** in terms of web framework (serverside). I usually combine async with threads, ajax requests or other thread-like processing.
meh. First of all, oneliners are overrated. It takes 3 seconds to open a text editor to create a tidy, readable script that is much easier to improve iteratively and as a bonus it's going to be there if you need it again. Having bash, awk, curl etc why would I bother with python oneliners in interactive shell? Let's take the example. $ cat test.log INFO: visited http://www.example.com/foo ERROR: visited https://www.google.com/ ERROR: visited http://www.yahoo.com/ $ awk -F: '{ print $1; }' test.log | sort | uniq -c 2 ERROR 1 INFO $ awk '{print $NF; }' test.log | while read url; do curl -Ls -o /dev/null -w '%{http_code} %{url_effective}\n' $url; done 404 http://www.example.com/foo 200 https://www.google.pl/?gfe_rd=cr&amp;ei=8QHnVcGJGdTDNKfctdAL 200 https://www.yahoo.com/ 
Django is not async as it uses wsgi. Tornado and other async libraries do not use wsgi which is how they get around the async constraint. You could use something like gunicorn if a single Django worker is not enough. 
Metaprogramming in Python is very different than metaprogramming in Ruby. Specifically, in Python it's generally only used as a last resort, wheras in Ruby it's a common go-to technique for overcoming obstacles. Many Pythonistas spend their whole career without ever having a reason to use metaprogramming. You might want to code Python as Python, instead of trying to code Python as Ruby.
[removed]
See here ( https://store.continuum.io/cshop/mkl-optimizations/) About halfway down the paragraph starting with "Please Note" demonstrates that they do in fact come for free on Windows. 
Vy do you want to know?
But I want to make python into Ruby. Why can't you just understand that is all that matters here?
I second this. Nothing is more pleasant than that dark background with python text. 
I'd kind of expect it to be consider it is stackhut's blog
Hey condimentorice, apologies if the title seemed baity (in regards to the article pushing people into StackHut under a different premise.) Do you think we should change it to make it more clear? E.g. to 'Using StackHut to deploy Python functions directly'. Would be really interested to hear what you think would be the best description.. Cheers EDIT: I've changed it to 'Deploying Python functions as APIs with StackHut'
Attention grabbing title that's just not true.
You really need to capitalize those "i"s !
I'm not sure. I'm not familiar with the levenshtein function. From what I've read though, it's fairly similar.
thanks mate; i'll definitely check it out .
Thanks very much. Very interesting to see how you did that. I'm going to download that software and have a go myself. Thanks again. 
It costs money, but there is a free trial and there are some, ehm, other solutions. This software is not necessary, there are a bunch of solutions [here](http://security.stackexchange.com/questions/223/how-can-i-intercept-and-modify-http-requests).
&gt; Im not able to do a tbody.attrs on that I don't know what you're trying to do -- I'm guessing you're doing something like soup.find_all('tbody').tbody when you should have something like for tbody in soup.find_all('tbody'): print(tbody.attrs) As mentioned, `find_all` gives you an iterator over all results, so if you want to look at them, you should iterate over them.
Just a personal preference. I used to be more familiar with mercurial and they offered it, and github doesn't. Also, free private repositories. Personally I also want to push that github isn't the only git provider out there. Some people think git and github are one and the same. I really like bitbucket's UI and what they offer, and I want them to be a bit more well known.
Looks very cool. I look forward to playing around with it.
I really like this. It's functional and not that difficult to use. What I really like is how someone could use this to supply information to a conky (is that even still used these days?) or Rainmeter setup to display the information on your desktop. 
I didn't learn Django before Rails. It's more a mindset/paradigm/principle thing. So, like others here already said, don't force Ruby or Rails paradigms and principles on Python code.
Sure! I am always available.
Looks interesting but why not Python 3.x?
https://github.com/zzzeek/sqlalchemy/
Sometimes I think about using a "modern" editor, but I always seem to come back to vi. It's like the AK47 of the computing world. It works no matter what you do to it. 
I wrote this: https://github.com/veegee/amqpy with an emphasis on clean and correct code. Also this: https://github.com/veegee/guv which is like gevent but for Python 3 only. But some of guv's "green" patched stdlib is ported from eventlet/gevent which are relatively ugly. The core event loop and scheduling was written from scratch though. Both are fully documented with a custom Sphinx theme too. Feel free to criticize.
Just added contour plots. 
+1 for Dive Into Python 3.
Have you taken the time to look through the code that runs this site? I'm not sure if I'd consider it "beautiful" but maybe that's me.
&gt; ; needs to be at the end, not at the beginning you were right...I am dumb thanks.
 **Clean Code: A Handbook of Agile Software Craftsmanship** |||| --:|:--|:-- Current|C$41.59|Amazon Canada (New) High|C$41.59|Amazon Canada (New) Low|C$32.95|Amazon Canada (New) |Average|C$41.59|30 Day [Price History Chart and Sales Rank](http://i.imgur.com/YrAoKDI.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
It's a *beautiful miracle*...
That's almost certainly true. I have taken a look at a small minority of those projects, so I don't know for sure. But it makes sense that the list would be compiled based on functionality, not code beauty. But I would hope that beautifully-written Python projects would make it into that list, so it might be a good place to look.
Remember that there are many things you can do in Python that cannot be done in Java (especially before Java 8), and are thus not really reflected in Clean Code. For an instance, not everything needs to be wrapped in a class, primitives (lists and dicts) are more powerful, functions are first-class objects and can be passed as arguments to other functions, and so on. The thing I agree most with the book is the advice of splitting things in small functions, and it applies to Python as much as to Java. However, readability is the key, and I think you can go overboard with splitting things too. Sometimes it's better to write a descriptive comment, IMO. Don't worry about the performance of function calls until you have profiled your code. If you're coding in Python, you're probably working on stuff that's IO-bound rather than CPU-bound anyway. One neat thing you can do with Python is declaring the smaller helper functions inside other functions, to hide them from the global namespace. E.g.: def bill_customer(item, customer): def save_order(): # ... def send_email(): # ... save_order() send_email() The example is bad and artificial but you get the idea.
Okay, but apart from all that, what has Python ever done for us? Nothing!!! :-)
Quite similar to the flask counterpart: https://flask-restless.readthedocs.org/en/latest/quickstart.html
"It works... good enough" I haven't seen a 503 in a while. Sometimes I just have to refresh 5 times until it actually works.
I had this problem the other day too. I think I had to re-install (or maybe it was repair) the exact same version that didn't uninstall properly, and then uninstall it properly.
That's another thing I was curious about. Is writing helper functions in a function's namespace good practice? Obviously that's a completely missing topic in a book based around Java.
Django's use of classes and mixins is beautiful to me. But I'm using Django Rest Framework a lot and I just feel they over-did the pre-made mixins classes. Learning DRF, I was so confused about what to use where and when, until I looked at the source and saw that they're all just different combinations of mixins.
I browsed through Django's source code some years ago and found it beautifully written and completely clear.
This why I only look at what's provided and see if it looks like an email address. At least one character then an @ followed by one at least one character. I make no assumptions if the email address meets the RFC or if the account even exists. That'll happen when I try sending a message there.
A great start but I have to agree with [eusebe](https://www.reddit.com/user/eusebe), until you've put the legend on the plot you can't even start thinking about dotting the i's or crossing the t's.
Python source code.... 
Nice, my only critique is that it is clunky to have to write BACKGROUN_RED vs FOREGROUND_RED. If they are the same color, why not just do RED? If they aren't the same color, why aren't they?
Where's the HATEOAS?
I would avoid nesting a function within another function. It makes reading the function a bit harder and testing the helpers a lot harder. 
Fixed? For anyone else who has this problem, uninstalling pyside and reinstalling it seems to of fixed the issue at least for the moment. I don't know why or what the initial issue was. Edit: It still works after a restart. I'm calling it solved. It must of been some problem with the pyside install. Very strange.
The libraries `flask` and `requests` are commonly considered great examples of Pythonic style and organization.
Looks pretty good. I'll read its code to see what I can learn. Thanks!
I really appreciate your work on this - it's a great library.
This isn't a question about the language though.
Pretty cool dude. Are you using the weather data from METAR reports to code the colors? What do they mean?
Flask, easily my favorite elegant, Pythonic, code. 
**Free, Online Resources:** [Python 3 Patterns, Recipes and Idioms](http://python-3-patterns-idioms-test.readthedocs.org/en/latest/index.html) [Python Cookbook (Online Version)](http://chimera.labs.oreilly.com/books/1230000000393) **Paid Resource:** [Python Cookbook](http://www.amazon.com/Python-Cookbook-Third-David-Beazley/dp/1449340377/ref=sr_1_1?ie=UTF8&amp;qid=1441248399&amp;sr=8-1&amp;keywords=python+cookbook) 
 **Python Cookbook, Third edition** |||| --:|:--|:-- Current|$35.25|Amazon (New) High|$35.61|Amazon (New) Low|$27.89|Amazon (New) |Average|$35.25|30 Day [Price History Chart and Sales Rank](http://i.imgur.com/v7ofcc5.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
Personally I find his articles are good instruction on how to think about solving problems, which he uses python to illustrate, but not great examples of how to write python code. That's not to say he can't code or doesn't know his subject, just that his code is an illustration of how to solve problems, not write great code.
To aid mobile-users, I'll link small subreddits, which are named in the title, yet are not linked. /r/Pygame: --- ^I ^am ^a ^bot ^| [^Mail ^BotOwner](http://reddit.com/message/compose/?to=DarkMio&amp;subject=SmallSubBot%20Report) ^| ^v0.6 ^| ^[Changelog](https://github.com/DarkMio/Massdrop-Reddit-Bot) ^| [^Ban](https://www.reddit.com/message/compose/?to=SmallSubBot&amp;subject=SmallSubBot%20Report&amp;message=ban%20/r/Subreddit) ^- [^Help](https://www.reddit.com/r/MassdropBot/wiki/index#wiki_banning_a_bot)
Whatt? what about nano?
&gt; I learned VI because it's the ONLY editor I can expect to be on every Linux installation I come across. You're forgetting ed. man ed! ed man!
It's not installed by default in a lot of distros. In particular the VM's we use at work with SLES don't even have it in the repository.
LOL! Now I want the Red Hat cert tests to not allow VI.
I know, I gotta figure out how to do that with Matplotlib and basemap, lol.
Sorry, When I said big output, it's big output on stdout
I'd definitely recommend Sublime Text if open source isn't important to you. If it is check out Atom. Just about the perfect editor and completely open source. 
Hi, I really appreciate the way you wanna make this out. Seriously there are only very few people like you who want to go beyond their limits. In any case if you need any help regarding the development phase or any any another information, feel free to get in touch. Being in the services like Web Development , Web Designing and Mobile Apps &amp; Games Development from years we understands the problems that Startups face.
[removed]
"one character" could fail if you used the [a-zA-Z] regular expression to find them... Which is sort of weird. :(
It's a *beefy* miracle! https://beefymiracle.org/
I think requests is a great example of a beautiful api. I don't think its own code can really be called beautiful though - there's a lot of complexity and edge-cases they need to handle to make that api possible.
As far as async goes, have a look at [Klein](https://github.com/twisted/klein). It's a Flask-like microframework based on Twisted, so it's asynchronous. 
Python design patterns. The awsome collection of classic programming design patterns written in the best programming language https://github.com/faif/python-patterns
Don't know if there is some ready-to-use library, but implementation with PyOpenGL would be quite straightforward. And fast, when hw acceleration available.
Removes it from what?
PEP8 code is beautiful code, usually, but beautiful code is not always PEP8.
Probably C#.
Looks like it is not working in the terminal, but with a gtk-gui... so not for me then.
Good guy author!
While I'd agree Rails are less fragile to project disorganization and in some areas can significantly speed-up development process, I'd find foolish the idea write even simplified version of it. It is very complex and comprehensive task, requiring lot of man-years of experienced and talented people. Anyway, good luck with that.
I have Python Cookbook, and it is absolutely awesome. I read/watch anything I can find by [David Beazley!](http://www.dabeaz.com) If you're not familiar, read his thing on generators and you will be hooked.
http://www.reddit.com/r/buildapc/comments/3e16h7/what_is_the_best_antivirus_to_go_on_a_new_computer/ctamthw
in some specific instances i like them. e.g. you can register callbacks to Qt signals like this: b = QPushButton() @b.clicked.connect def on_click(): do_something() or you can define functions that refer to the outer scope and return them def foo(arg): thing = ... def bar(): do_something_with(arg, thing) return bar
Both Netflix and Amazon crank out pretty good quality Python, take a look at [Boto3](https://github.com/boto/boto3) Netflix has a whole page dedicated to all their [OSS tools] (https://netflix.github.io/#repo) 
So what is the question? You can just deploy 4 independent celery instances on testing, development, staging and production instances. On each instance the configuration file of your application will vary and point to the needed celery instance.
I can't seem to get this working. 3 of the 4 instances just idle, while 1 instance takes all the tasks of all stages.
This book use python 2?
It uses 3.
I'm forgot a little how to use celery, but check that you're connecting to the right instance (or broker?). Looks like code on all you stages connecting to the same broker.
But the world of Python would be better off if everyone conformed to style standards (including PEP8). It would be much easier for everyone to read everyone else's code. However, the interpreter and most code-generating tools don't enforce PEP8. Therefore, it's our job as a community, when people ask about stylish code, to point them in the direction of standards-compliant works and tutorials so that they learn in a way which most benefits the community in the future.
http://www.diveintopython3.net/
Agree, I just skimmed through those links and the code itself actually looks pretty messy
Right. Thanks.
Ohhhh awesome!
Great book, very excited for this.
Oh my poor peasant eyes burn at the sight of such beauty 
^ Great book, I own it.
You should checkout [filecmp](https://docs.python.org/2/library/filecmp.html) module. It has a [dircmp](https://docs.python.org/2/library/filecmp.html#the-dircmp-class) class that does what you need. Here is an example from [here](https://pymotw.com/2/filecmp/): import filecmp filecmp.dircmp('example/dir1', 'example/dir2').report_full_closure() You can customize the output.
The inside bit with the whirring and the clicking.
So as an old unix hacker who is just now dipping his toes into this new-fangled "DevOps" world...I have to ask, why?? What problem does vi/vim have that Vy can solve? What is the point here??
PEP8 are guidelines, not rules. You can have code that mostly conforms, and it can be beautiful, then if you force that same code into the guidelines, it becomes ugly.
3.4 unless you do science, then 2.7 and install anaconda and use spyder to code.
I wouldn't choose that language at all because of the implications of being a .Net shop, namely using Windows tools through the entire stack - and not because lolwindows, but licensing IIS, SQLServer, etc. Java I could see, since C# is basically Java Windows edition to my understanding. However, if you're choosing that language because it's compiled vs Python's interpreted, I don't think that's worth it alone considering most of the time overhead for a webapp is actually things like waiting for database IO. If you're saying because it's statically typed and provides some measure of type safety, I can understand.
So... How does it actually work? The readme doesn't really have any information.
Is it just file additions / deletions you care about, or do you need to check if files have been modified as well? Are these folders nested (ie, there are subfolders with more files/folder) , or just 2 big folders with a bunch of files? For the simplest case (2 folders, adds/deletes only, non-nested), it's fairly simple: import os folder_a = set(os.listdir("path/to/folderA")) folder_b = set(os.listdir("path/to/folderB")) missing_from_b = folder_b - folder_a missing_from_a = folder_a - folder_b To get this into excel, the simplest way is probably to save it to a CSV file, which Excel can import. Python has the `csv` module builtin which can do this. Eg: import csv with open("output.csv", "w") as f: writer = csv.writer(f, dialect='excel') writer.writerow(["Missing from Folder A", "Missing from Folder B"]) writer.writerows(zip(sorted(missing_from_a), sorted(missing_from_b))) Then just open output.csv in Excel.
You can use the Qt Designer program, which is a powerful GUI designer program for Qt, to create your GUI layout, and set up some of the interactions between components. You can then use the `pyuic4` (for Qt4) or `pyuic5` (for Qt5) to convert the resulting `.ui` file to a Python script. This Python script will create a a GUI with identical properties. You can edit this file to set up the actual behavior of the GUI.
AFAIK it is Windows only because it exploits some special feature of Windows to get the speed. More to read here. http://pyparallel.org 
You are using floating-point numbers. They are not the same as decimal numbers. They have a finite precision (that is they can only store values up to a certain number of decimal places), and they are actually binary numbers under-the-hood (which means they cannot represent many seemingly ordinary decimal numbers). Both of these issues lead to floating-point numbers accumulating error over time as you do successive calculations. This will cause the results of the calculations to drift from their ideal values. You might be able to use the python `Decimal` module to lessen some of these issues, probably by setting the precision to be much higher than the precision of the original JPL data (you will take a performance hit by doing this). However, ultimately the JPL data itself has a finite precision, which means the results are never going to be perfect.
Good series. No fluff, easy to follow along, and (mostly) relevant examples. The first video was probable the best if you think you might want to learn python...this will help answer that question. 
&gt;AFAIK it is Windows only because it exploits some special feature of Windows to get the speed. Oh lame. Then it's useless for the vast majority of high-performance users. &gt;More to read here. http://pyparallel.org Okay, thanks. 
I provide some more commentary on *Why Windows?* and/or *Why Not Linux?* here: https://www.reddit.com/r/programming/comments/3jhv80/pyparallel_an_experimental_proofofconcept_fork_of/cupeu5f 
Thanks for the tip! I looked into this at one point but if I recall correctly it's not fully free, is this true? Or is it the case that it's not free only for certain commercial uses?
So I need multiple redis instances? Do I need multiple redis applications for this or can I set up multiple environments inside 1 redis app? 
I think that's not the main problem. It is Python unrelated, but as far as I know (I just had a glance at your code), you are using what is called an explicit first order solver (in this case, the Euler forward method). This is certainly quite fast, but it is unstable and tends to amplify the errors *a lot*. You could use other solvers, like the Runge Kutta method, or look at implicit solver. One way to check this is to compute the total energy of the system (kinetic energy and potential energy), and you will see that it is (unphysically) not conserved. Ultimately, that's what you want to conserve, for a dissipationless system like this one. If you don't want to implement/optimize the solver yourself, you can use scipy's ODE module. By the way, this kind of exercise is a very good project to learn more about scientific computing, numerical stability, and equation solving. :-)
Check this out. There is am upcoming webinar where they are discussing Python 3 vs Python 2 http://bit.ly/1PNYf0R
&gt; PyParallel demonstrates that Windows actually has better facilities for solving these problems than Linux/UNIX does. So what? Not a single one of the high-performance machines or clusters I use in my work runs Windows. Not a single one of them will *ever* run Windows. That's true of every single other user in my domain - science and research. 
Yeah, that's a fair point. :) But as someone who has to actually run the code on a top 500 supercomputer, which is running Linux, it doesn't help me much.
Thanks! Yeah, the first video is mostly about why you should learn coding (as a practical skill, not just because "learn to code" is a meme or some udemy course is promising to turn you into a dotcom millionaire). The next video jumps right into coding. I like the screencast format. There is a (sometimes large) gap between looking at code in a book and actually getting it to run, and by watching someone else do it, you can see *exactly* what's going on.
&gt; Not a single one of them will ever run Windows. At a certain point of performance, the benefits of sticking with linux would be outweighed by lower costs. Or in the supercomputer world - unparalleled performance. If you could replace 10 linux webservers with a single windows one? Probably not anytime soon - there is too much entrenched dependence. How about 1000 webservers? you would be crazy not to consider it.
That's simply not how hardware decisions are made in many settings. For instance, consider a federal laboratory, like the [National Energy Research Scientific Computing Center (NERSC)](https://www.nersc.gov/). NERSC has, essentially, [two major supercomputers](https://www.nersc.gov/users/live-status/), each with over 150,000 cores. I can take a numerical Python code *today*, use mpi4py to implement an MPI scheme to handle communications between many cores running the same code and discretizing their jobs, and have it running on a NERSC machine. It's actually not all that difficult, either. Sure, it won't be as fast as a C++ or modern Fortran implementation of the code, but in many applications it'll simply get the job done. And in fact, I do this somewhat regularly - and I leave my code running for hours at a time (and have it constantly re-submitted so that I'm running essentially continuously for days or weeks on end). NERSC will never run Windows on their supercomputers. Neither will any other lab. So I'm still not seeing the use case you're advocating for. You've crafted a nice hammer, but it won't work with any of the nails in a huge swath of the Python computing world.
It actually took me a really long time to settle on the right prose/perspective to use. Once I decided to just make it statement of fact and not surround every statement with all the exposition required to support that statement (which is exhausting), things started finally flowing. That said, that took me like 3 weeks to write. I really don't like writing, apparently. I just never feel productive doing it, and I'm never happy with the end result. (Programming is the exact opposite, strangely enough. Tight feedback loop!)
Thanks!
Meh. I have found the tool has a lot of really infuriating but inexplicable delays/freezes (sometimes for as long as a minute or two at a time!) and while I really love some of its features, I probably don't use more than 10% of the app (if thatâ€”I haven't been doing much HTML development lately as most customers want single-page apps in JavaScript). It's probably time for me to spend some effort trying to learn Sublime Text; it's what everyone else on my team is using, apparently.
Yeah, reinstituting perpetual licenses if only for individuals sounds like an acceptable compromise. 
You say *today* and *never* a lot :-) &gt; So I'm still not seeing the use case you're advocating for. You've crafted a nice hammer, but it won't work with any of the nails in a huge swath of the Python computing world. You're completely missing the point of the project. I wanted to find a way to optimally exploit multiple cores with Python, and I found one. The actual interpreter changes are platform agnostic. The interface is agnostic. The implementation just currently happens to be on Windows. There is no reason it couldn't be ported to Linux or OS X. If the benefits demonstrated by PyParallel are desirable enough, someone will do it -- either the community or vendors with vested interest.
So your answer to someone's hardwork is "Oh lame". A tad lame indeed.
From the sidebar "If you are about to ask a question, please consider r/learnpython"
Yeah, you're right on the moneyâ€”I remember spending a fair bit of time in the debugger figuring out complex data objects stored in ZODB. I don't care for the (lack of) file manager in Sublime either, but I guess I'll have to get used to that. 
I've to pick 5 modules, I've picked 4 which I'm really interested in and the last one is down to Python or another Micro module that I don't really care for! Thanks, I'll do a bit of searching before I pick.
&gt; You say today and never a lot :-) Sometimes the word "never" is warranted. It definitely is in this case.
Graduated with what amounts to a microbio/molecular bio degree; can confirm biologists seem to like python. I'm currently learning it partially for that reason. I think ecologists use R a lot and some biologists use R as well, but I don't know much about R. I find it easier than visual basic the only other language I've had experience with.
&gt; So what? So perhaps they should...? At this hypothetical point, aren't you just shunning windows because that's what you've been taught to do?
tl;dr: Just do it! Not a biologist, but I'm sure that python will become a great tool for you later. At some point you will have to deal with data, and something like excel can only help you to a certain point. My primary job is not programming, but after learning python, there are so many problems it can solve for me. And python is IMO the best programming language for new programmers. Because it is easy to learn and still a powerful all-round language (meaning that you will not need to learn another language in order to do more complicated stuff) Besides listening to your teacher and perhaps following online tutorials, the best tip I can give you is google, type in something like: "python how to loop through two lists simultaneously" and look for any link from stackoverflow.com - 99.9% of your questions have already been asked and answered, the last .1% have also been asked and answered, but for some reason you didn't manage to find it.
Hello @d4rch0n. I really like the approach you've taken with this tool. A while ago I was driven by the same motivation to write a similar module. Maybe it has some ideas that are worth stealing - [oneliner](https://github.com/gvalkov/python-oneliner). Best of luck with your project! 
And mainframes also have many advantages. But that's irrelevant since most teams simply aren't going to develop on mainframes for a variety of reasons. Similar to why, in this space, they aren't developing on windows.
I think PyCharm's debugger is a fork of PyDev, a plugin for Eclipse. We could fire up Eclipse instead... Or make a standalone desktop app based on it. PUDB serves my needs some of the time, although I do agree PyCharm's debugger is superior.
Do either of these sites have an API? If not, you'd probably be better with JavaScript and writing a browser extension to do it, since you'll be screen scraping anyway.
Awesome project. Shouldn't have do dance around the OS choice topic, something amazing like this is going to need attention for each platform. It's just that Windows gets it first this time, and for a bunch of good reasons. Also Windows on VPS is usually only marginally more expensive, and in this case it's going towards parallel performance.
I've always found the JetBrains tools to be underpriced for what they provide, but I think I would have preferred they raise the price rather than go with a subscription model. 
&gt; s post full, runnable code that really, fully reproduces the problem Sorry, thanks. 
~~/r/eunichsporn~~ /r/unixporn is a contradiction in terms, now that I think about it.
It's probably worth posting this to r/learnpython if you haven't already 
You're welcome. Nice progress! I'll make a few stylistic comments, hopefully they don't come across as nitpicky. I would also suggest you to join /r/learnpython as it is dedicated to helping people out as they are learning Python. Have fun coding! If you want to import a particular symbol (function or variable) from another module, instead of writing something like import deck deck = deck.deck You can just use the `import ... from` statement like so: from deck import deck On line 93 you have a while loop with `else: pass` which has no effect, so you can just leave that line out. In fact it's quite rare to put an else clause on a while loop. So rare that probably many Python users aren't aware it is even possible. On lines 137 and 139 you have conditional statements that look like `if hitage() == True` and `if winDecider() == False`. Instead you can just write `if hitage():` and `if not winDecider():`.
The peace of mind I gain from using only free software tools and not having to deal with licenses at all is unvaluable. It would take a lot of killer features to get me to switch back at this point.
Heh, that talk was... intense. I prepped for it like three days beforehand and started with a deck of 83 slides that I wanted to get down to ~50. Sunday arrives... 153 slides. I am not good at culling decks.
Sure, but I'd argue that they deserve a flow of revenue as opposed to a one time payment if they continue to work on it. With a subscription, they don't have an incentive to do so, because people must pay just to use the software even if it doesn't change much. 
I don't recommend programming in sublime. You lose out on things like code completion, code analysis, formatting becomes more difficult, and on and on. I am refactoring some code now where it is quite obvious that the previous developer did not use an IDE. This probably caused them to not notice they were writing so many easy bugs. If you're a superstar programmer that never writes bugs, go for it. 
Companies like Adobe and Microsoft have been moving to this model, and they continue to update their software. I don't think that'll be a problem. What worries me is the expense, and that I don't own a license for my software anymore.
I use vim mode in pycharm, one of the better vim emulators I've used. It was the best of both worlds. But since I'm not about to go for a subscription model, now I'll have to get used to just vim, maybe with [NERD Tree](https://github.com/scrooloose/nerdtree)
I don't quite get why someone would need this when you can just spawn more processes. Can you prove me wrong please?
One thing I haven't seen brought up much in discussion around this is the PyCharm community edition. If you were to lose access to PyCharm professional, you'd still have available a Python IDE with refactoring, local debugger, version control, virtualenv management, test runnerâ€¦ The thing that would burn me most if my Pro subscription ran out is, oddly enough, the features PyCharm inherits from WebStorm. At least 50% of my "python" projects are HTML + JavaScript.
len(x for in xs if isinstance(x, str)) Seems a bit clearer .
I could use mmap to map some file in /tmp as shared in those processes or use POSIX shared memory.
I "believe" they do have an API, i havent looked much into it. Just a thought i had while on my flight today
`caps` to `ctrl` heretic! And for vim just use `ctrl [`
Does this indicate that Unix eventually managed to catch up with VMS and run clusters without falling over in a vast heap? Nice to know. I confess I don't know what Unix actually stands for, but VMS is Very Much Safer.
That's true. For me, the profiler would be the worst loss, it's the only decent Python profiler I've seen.
I'm trying so hard to understand OOP. Maybe I just haven't had a practical use for it yet. I'm teaching myself so I tend to run out of ideas on what to work on. 
Really weird, it's 2015, the CPUs can run like the clappers, they get really bored waiting around for that database or the network to give them something to process, but no, the obsession with efficiency lives on. The emphasis should be on code that provides business benefits, as in development time equals money. If you're not in business, like me due to poor health, just think yourself lucky.
Plugins can take care of all of that.
This comment is great. One minor correction. Explicit Runge-Kutta methods are all bad for long-term integration of periodic systems. OP needs, as you said, an energy-conserving method. That's the correct term to Google.
I used glade with pygtk last time I programmed a gui. I'm getting ready to try out Qt as people seem to say good things about it.
As far as I understand, If you buy a new license with the subscription model and then stop paying, you will lose access. If you're an existing customer and hop into subscription then stops, you we'll still keep your old perpetual license on the older version.
I've been using Python type annotations for a while now and I love the feature. Pycharm makes great use of them and offers code completion and variable analysis based on type. 
Lots of hype on the website. From looking at their own charts, performance doesn't scale linearly as they claim. That woke up my inner skeptic. The comments in this post, from the developer, didn't do anything to ease my mind. Anyone who's proposing that Linux has too many moving parts, relative to Windows; is probably selling something. Additionally, there really is no reason that this couldn't have been coded for Linux, other than the author preferring to use Windows (which unlike Linux, is limited to 64 cores if leveraging NUMA).
Emacs + evil (vim emulator) + elpy for python specific things like refactoring and completion is a nice setup.
Have you actually worked with Sublime with these plugins? It's not your grandpa's Notepad++/Gedit. I for one like the fact that it doesn't use most of memory and CPU on my machine unlike Jetbrains stuff (really, a glorified text editor shouldn't be doing that just because it's written in Java).
I think quite a few of the things people love about JetBrains tools in general can be found in Eclipse or Aptana, and for Python in particular, a lot of it is present in PyDev.
I think it has to get really, really close to $0 in licensing per VM node to get into this game. Fast parallel python, no matter how sexy it is, will not really get it there when these loads are commonly spread over dozens of instances, and people don't just run python on these machines you know. Also, PyParallel needs to beat PyPy in high-performance Python game. Does it?
In that case, you need to recursively walk through and get all the file paths. The `os.walk` function lets us construct a function to do this for us like so: import os.path import os def get_files(basedir): for basename, dirs, files in os.walk(basedir): for file in files: path = os.path.join(basename, file) yield path[len(basedir)+1:] (If you want full paths (eg. "/path/to/folderA/some/file/in/it" instead of the path relative to the root (ie."some/file/in/it"), replace the last line here with just "`yield path`".) Then you just use this function in place of `os.listdir` in the original code. Ie: folder_a = set(get_files("path/to/folderA")) folder_b = set(get_files("path/to/folderB")) and the rest is unchanged.
While PyCharm does use a bit of memory and CPU to get the job done (maybe more than other apps, because of continual code analysis), it doesn't tax my old dev machine unless I'm editing 1000+ line modules. I think you're overselling that "issue".
Oh, thank you!
&gt; AFAIK it is Windows only because it exploits some special feature of Windows What features specifically?
You should definitely check PyVmMonitor then: http://www.pyvmmonitor.com (it even integrates with PyDev/PyCharm).
Now, I'm not too fond of this way of working either... I have been upgrading yearly the last 4 years, but I can imagine not wanting to upgrade but keep the older version handy for older projects (migrating an old project to a new IDE is always a mess). Perhaps the Community Edition could take care of this issue however. On another note: am I right in thinking that an annual PyCharm license now costs about $30 less? The [the pricing page](https://www.jetbrains.com/toolbox/) seems to indicate so. 
Try Atom. I prefer it to Sublime and it's 100 percent free. 
That looks to have been confirmed - https://www.reddit.com/r/programming/comments/3ji148/jetbrains_toolbox_monthly_yearly_subscription_for/cuq9ak3
Not much. With those particular needs Aptana or Eclipse with PyDev would probably suit you better, or perhaps not since you're content with the free tier version. But understand that different folks take different strokes, to me the project setup boilerplate of a full blown IDE is often more cumbersome than useful and tools like Sublime and Atom let you project-ize as you go. If it truly were just harder people wouldn't do it en masse, the days when serious software professionals are using, say, vim not on technical merit, but just so that they're not considered quiche eaters are way behind.
First /r/learnPython is the sub you want. Second, you'll get a ton of advice for learning. If you're starting from scratch, I would recommend the [Code Academy](https://www.codeacademy.com) course on the subject. It's not perfect, but it breaks the whole language up into little 1-5 minute problems you can solve in your spare time. [code combat](https://codecombat.com/) can be useful, but I find most people get bored with it ... as a game, it's lacking, and as a tutorial, people don't feel like they're getting what they want from it. However, if reading a book, or codeacademy both seem daunting, and you just want to get your feet wet, that might help you warm up. Also, if you check the sidebar, you'll find online books that make excellent resources if you'd rather just read something. What works for you will have a lot to do with your own personality. Once you get a handle on the basics of programming in general, you can get more in-depth with something like pyGame to write your own games. 
But the subscription model provides a perverse short term financial incentive to the company: They make *more* money by *developing their software less*. Because they don't have any 'buy our upgrade *because we've got new features*' hook on sales anymore. Anyone who thinks that if you structure a system such that companies become more profitable when they do less won't result in them doing less is dreaming. Edit: Didn't take very long. From the comments in the linked article (Eugene Toporov is the Marketing Lead for JetBrains). &gt;Eugene Toporov says: &gt; &gt; On the other hand, we think weâ€™ll be able to concentrate on quality more than trying to impress users with new features so they buy upgrades. Our products are more than feature-full and we believe the quality is something that can always be improved.
I see. That's actually very helpful, thank you!
Well I use python for data science where efficiency is kinda important. If your function is getting called 100 million times then it better scale. 
Oh ok!
I bought PyCharm a few years ago and my license expired a few months back. I had to buy a new car so I can't afford to renew, which doesn't even make sense since most of my time is spent working instead of working on my hobby projects. So I'm using the last stable build released before my license expired which I'm OK with for my purposes. Will these new changes invalidate my older version of pycharm unless I get a paid subscription again or can I continue using it? 
Ohhhh, ok, so, your base knowledge is a little bit behind where it needs to be in order to discuss the technical details here. I'd recommend either [watching this](https://vimeo.com/79539317) or reviewing the [deck](https://speakerdeck.com/trent/pyparallel-how-we-removed-the-gil-and-exploited-all-cores) first, then reading [this](https://github.com/pyparallel/pyparallel/blob/branches/3.3-px/README.md), and [this](https://mail.python.org/pipermail/python-ideas/2015-June/034342.html). &gt; I'm just speculating because I don't really believe that Windows can be better at doing I/O than *nix. Keep in mind my background is UNIX/POSIX. [My PyParallel bookshelf, for example](http://pyparallel.org/books.jpg). I'm not making these outlandish claims without doing the research.
Look into Anaconda for Sublime. PyCharm is more powerful, but Sublime/Anaconda is lighter and arguably more configurable. 
Requires you complete an "offer". I cannot access it though because: "Sorry, there are no offers in your region at this time."...
print(Hello Sublime!)
I have something that I've used for installation testing, but can be easily used with this too: https://github.com/astraw38/xfl Works based off of ElementTrees, and can compare sizes, as well as export to XML if you want. 
google "python tutorial" - pick any one, all your questions posted above will be answered in under ONE hour
Ran through the entire survey process, link to download did not unlock. Question, after looking at your Post history... Do you post anything other than survey spam? 
I've had good luck using vim as an editor coupled with Spyder as a debugger when I need it.
Got any recommendations other than python-mode? I used to love it until a problem with its rope integration popped up and basically freezes vim if its not disabled.
Eclipse with PyDev is a comparable, free alternative.
This always happens when some place that sells software realizes most of their income comes from businesses. Business almost inevitably do the CBA of whether or not they should purchase a new version of software or if the old suffices. Places that sell software then realize if they just sell a subscription they continue to get revenue and to the business there is but one CBA discussion at the start. Sucks for people who don't use it for business reasons though.
Do you have a relevant online data store, either in an RDBMS or (far better given time constraints) large flat text files [EDIT: XML / JSON data retrieval, too, is useful...]? I get the sense that for that type of audience, unstructured -&gt; structured data manipulation or structured data -&gt; analytical transformation is how you pitch Python. Source: My boyfriend now does his work (biochem) in Python and SQLite after scraping Confluence for data. Because I'm a terrible influence? ;)
CodeAcademy is the answer to about 3 of your questions. It also has a web interface for programming.
Another thing you can do, if you want to keep these functions in a class, is to use the static method decorator for all functions which don't make use of the self reference. ie: @staticmethod def mean(num_list): """" return the mean of the list """" return sum(num_list)/len(num_list) The @staticmethod decorator tells the interpreter - 'hey, this method is in my class, but it doesn't need an object reference' (note the first parameter is not 'self')
I use YouCompleteMe and Syntastic, mainly. Actually, here is the plugin part of my .vimrc: " vundle filetype off set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() Plugin 'gmarik/Vundle.vim' "manage plugins Plugin 'Valloric/YouCompleteMe' "smart autocompletion Plugin 'scrooloose/syntastic' "syntax checking and linking Plugin 'ctrlp.vim' " open files quickly Plugin 'tomasr/molokai' "colorscheme Plugin 'a.vim' Plugin 'tpope/vim-commentary' "comment / uncomment lines Plugin 'tpope/vim-fugitive' " git integration Plugin 'MarcWeber/vim-addon-local-vimrc' "project-level vim configuration Plugin 'marijnh/tern_for_vim' call vundle#end() filetype plugin indent on 
Are there new benchmarks along with this latest release? 
You are right, that is why I was hesitant as I don't know about the venue.
The new macbooks are fanless with SSDs. Are we safe?
Sexy data vis in seaborn
No it doesn't. The last argument is `*args`. I did this incase I added more styles in the future and the user would then be able to mix many of them without worrying about argument order and whatnot. Although I might change that. Thanks for the suggestion.
If you provide a background colour bot not a foreground colour, it should print black text (this also works in reverse).
Cool! Always nice have to have wrappers like these. Do you know if the scoreboard endpoint gives you back current game time (Like _4:25, 2nd quarter_) for a specific game?
Yes, it is cheaper, at the cost of being forced to pay as soon as your license lapses, since you won't be able to stay on an older version if you choose not to upgrade as you can now.
It appears you are using Python 2, which means you would have to use raw_input instead of input
Spyder is my favorite Python IDE as well. Has an RStudio feel and is lightweight. 
No. Spyder is very lightweight. Initial startup is a bit slow, but pretty fast after that. 
`beautifulsoup` would be fine for this. You might also want to look at the [`requests`](http://www.python-requests.org/en/latest/) library. I know many people (myself included) prefer it to the standard library's equivalent, more traditional `urllib2`.
It's not exactly a code collection, but [Raymond Hettinger's "Beyond pep8" pycon2015 talk](https://www.youtube.com/watch?v=wf-BqAjZb8M) is absolutely *fantastic*. Pretty sure it should be required viewing for anyone who professionally writes Python code, at minimum.
Have you watched his modules tutorial from Pycon 2015? Pretty epic.
On most Chromebooks you can boot into Linux from an SD card or USB stick, IIRC. Might require devmode enabling and all that though.
Python Cookbook is available for free, actually http://chimera.labs.oreilly.com/books/1230000000393
Ironically, PyCharm would have found that one! Upvote for code review.
Thank you! Do you maybe have a clue how to authenticate NTLM with bs/requests ? Might save me some time. From a quick google search it seems like it's a bit tricky. EDIT: I think [requests-ntlm](https://github.com/requests/requests-ntlm) will do the job.
Interesting, I hadn't seen that one yet. Although the licensing is a little weird ... trial version only is for use on open source projects?
If you're doing web development, run Ubuntu in a Virtualbox and you can use a variety of editors and IDEs (including PyCharm, Vim + Jedi, Sublime + Anaconda, etc.). Managing virtualenvs, Python 2 vs. 3, etc is much more difficult in Windows, especially if collaborating on projects with people who don't use Windows.
Check out lxml, I found it faster and easier to use than bs
I'd recommend forgoing beautifulsoup in favour of lxml. It should do what you need easily, and be a lot faster. It's important to get a good grasp of xpaths, as that's what you'll be using to actually pull data out of the html.
It will but it's really slow to update. It'll update every 10 minutes or so making it practically useless for live score tracking. 
I think that's only part of it. *My* initial reaction to your project, despite how cool and interesting it is, was: "That's awesome. Too bad I can't make any use of it."
One of the advantages of Python is that most of the basic language â€” the sort a beginner would be using in their first few days of Python â€” is virtually indistinguishable from pseudocode. This is an advantage over languages where lots of imports are required, where you have to use library functions, or where there's mucky syntax. I would start with explaining concepts like variables, if-then-else, and functions. Since this is for bio, focus on libraries that already do things that people in that setting might like, then walk them through some simple examples of using those functions. I would steer clear of classes if at all possible. I agree with dodongo that moving from unstructured to structured data is a good demo of Python's usefulness. There are some sensors out there (thermometer, etc) which I believe work with Python, so that might be fun too â€” have each group in the lab hook up the sensor, read a setting, and output the result. Assuming that the libraries written for the sensors aren't too complicated, you could probably write something that didn't require anything more complicated than loops and printing.
Awesome, didn't realize they had put it online!
...aaaaaaand it failed. For some reason it ALSO needs Python 2.7 to be installed to compile this. Why should I need that?. Back to square 1. Any other suggestions, please? :)
Beautifulsoup4 supports using lxml (and other i suppose) parsers internally, and from what I've gathered so far. That way it should be just a minor performance hit.
&gt; ...aaaaaaand it failed. For some reason it ALSO needs Python 2.7 to be installed to compile this. Why should I need that? [RTFM](http://nuitka.net/doc/user-manual.html) &gt; Any other suggestions See above.
 my_var = "orig" tmp = my_var my_var = "new" my_var = tmp You can't without having some pointer to the original value (`tmp`).
You could use a decorator on any function which modified the variable. The decorator would maintain a global list so that oldvalue = valueList[-2], also the very first value of x is in valueList[0]. That is really cruddy code though. I use the equally bad: saveValue, x = x, 17 # do something with x=17 x = saveValue Code like this surely indicates that I have to rethink all the code in that section. 
Are your python27, python34, and mingw all 32 or 64 bit? Also, Anaconda support is new, maybe try using CPython? Try VS Express? I don't have a lot of experience using any of the code freeze/distribution solutions. At this point you should probably try the mailing list. 
Yep they're all 64-bit through and through :) I used Anaconda because it had some necessary libraries already installed with it (numpy, scipy, skimage). I'm having a friend try it with vanilla python and JUST the necessary libraries installed, then go through py2exe. Will see what happens. I also didn't try PyInstaller, will do that after dinner. Fingers crossed.
Simplified orbital calculations (max error 1 degree in the period 1900 to 2100) are in the excellent tutorial by Paul Schlyter: 'How to compute planetary positions'. There are examples so you can check your code as you go. http://www.stjarnhimlen.se/comp/ppcomp.html
http://www.lfd.uci.edu/~gohlke/pythonlibs/ That website is an AMAZEBALLS resource for Windows installation of some of the more ornery libraries. Numpy and Scipy are kind of a pain in the dick to install, but that guy has made it a breeze. Worth checking out. You might also want to look into virtualenv if you aren't already using it. Makes tracking down dependency induced fuckhattery so much easier. Right now may not be the best time to uproot and redo things, but in the future it should be on your radar.
Not sure if there will be any Python in my future after this. Horrible experience with this all unfortunately :( (BTW precisely the reason I used Anaconda was not to fuck around with installing necessary libs!) Also something's wrong with that link - doesn't open. Throws an XML parsing error, wtf!
You can use https://www.pythonanywhere.com/, or if you have a VPS somewhere you can use Chrome's ssh app. Neither of these is in the Store, but they will work on a Chromebook.
Thanks dude!
Does it absolutely have to be an exe, or do you just need to be able to give it to another Windows user to run? I have a tool called [Pynsist](http://pynsist.readthedocs.org/en/latest/) which can make an installer for a Python app. It avoids some of the most common issues I've run into with freeze tools like cx_Freeze and py2exe. But it doesn't make an exe that runs your code.
My memories of trying Eclipse are not that it lacks features, just that it all felt rather awkward. Like a Java IDE reluctantly compelled to try doing Python. Intellectually, I know that PyCharm is based on a Java IDE too, but Jetbrains mostly do a good job of hiding that. I haven't tried Eclipse for years, though, so maybe it's time to try it again. LiClipse looks promising.
So really dumb question, but it seems to be only working with apps I've written in pure python. I'm getting an error it can't find the modules as relative or absolute imports when using 3rd party. I'm using --recurse-all option. Is there a special way I need to build these apps?
If you go though the feature list for the current paid version of Pycharm you will see there's a lot of things it does that Sublime does not have a plugin for. Of course, the question is whether or not you need those features, or if your machine can actually handle Pycharm's cpu and memory footprint, or whether you really want to start Pycharm just to write a 10 line program.
Sitting at home pounding out code building my personal projects for hundreds of hours and continuing to do that every spare hour.
tkinter doesn't support anything other than bundle_files values 2 or 3. With a value of 1 the executable simply crashes. Just a fact of life. Can't use bundle_files value of 1. Don't want to complicate things with installers. I'll just have a small BAT file pointing to the EXE within the distro folder, and set the hide flag on the distro folder for the DVD, so that will be just fine, I think.
I think this is a great, especially as you can show how to import and manipulate data and make plots very nicely. 
My mind isn't made up at all. I realize that just because something smells funny, doesn't always mean it won't taste delicious. Thanks for clarifying the performance scaling. Makes sense, I was suspicious because the benchmarking platform of 8 cores, didn't seem to match up with some of the scaling claims implied. Has there been any testing on 30+ cores? Regarding Linux v Windows: in code, simplicity typically translates to performance. Especially if the code relies on code that relies on code... As I understood from reading other threads, you are accessing the kernel level to get better performance.
Hmmm, hacky! Besides, who knows if this will be valid for skimages library... I can try, though. But at least I got it working... EDIT: That might have worked on an older version of py2exe, I don't see that part of the code in the version I'm using. Nevermind anyways! Still much appreciate your hint on actually including the libs in the setup.py!
Ok, good luck on finishing up the Masters! :)
Thank ye! Two days to finish the paper, then! I can do it, I need roughly 10 more pages (which is gonna be easy, since in the "examples" chapter there's gonna be a decent amount of images, then some explanations below them, etc.) In any case, should be a fun thing. The topic is (obviously) converting images to sound by selecting areas of the image using lines of adjustable widths (=number of sinewaves generated), then having some more parameters to shape the audio output. By all means if you think it's interesting, the code is there on github, compile it if you have the necessary libs, have a go at it! Took me 2 months on and off working on it, couldn't do it all myself though, had a couple of guys help me out with some things along the way. :)
That is a great idea. I think I know what I can do now because I work for an health informatics group and I think one of my coworkers just finished making a 'fake' database to show some things in a similar project. We can also plug some of what they can do with the data from our other services that way. Thanks.
Yes, go with BeautifulSoup, it's a joy to use.
Quite simple, because you pay once to use your laptop for however long you want after you bought it, and you don't need to pay rent to continue to use it. The licenses they give out, while generous, have no impact on whether the change in business and individual licenses is good or bad. This particular change is being criticized, not every single product/licensing scheme the company offers. 
I don't want you to keep posting these links, this subreddit doesn't need this cruft crufting up the place.
To build on this example, you might actually implement a `Biller` class. class Biller(object): def __init__(self, bill, account notifier, formatter): self.bill = bill #etc def _format_bill(self): self._bill_representation = self.formatter.format(bill) def notify_account(self): self._format_bill() self.notifier.notify(account, payload=self._bill_representation) And then you have a single use case class. It only does one thing made up of a few methods that each serve a single well defined purpose and is *composed* of objects that (hopefully) do the same. But together they create a complicated action. Here's the trick though. You can't "new" up objects in the class itself. I put that in quotes because Python doesn't shackle us with object creation. Instead you provide to it objects that implement an interface (or a protocol as the language docs put it). Maybe you notify an account based on their preferred form of contact. Maybe you want to log all notifications. Maybe you offer personal, corporate and other types of accounts. Maybe some bills should be HTML formatted or turned into a PDF. Maybe some bills are regular bills, but might be delinquent notices or credits. But so long as your objects present the needed interface, who cares (well, who ever gets the bill, they probably do) but nothing in your domain cares what actual type they are.
Take a look at [software carpentry's lessons](https://software-carpentry.org/) (they are open source) for some ideas. I would advise against iPython notebooks/jupyter for such an intro lesson. It becomes too much for beginners to manage both the notebook vs. the language. iPython/Jupyter are awesome but hard to teach ontop of the language. I speak from experience. For a project: * Parse a large set of Blast results * Visualize some NGS data, heatmaps and metaplots (pre-aligned data) Good luck Source: I am a biologist with disillusions of being a bioinformatician. 
If you find a book that's about application architecture but uses Python as a target language, hit me up. I've spent the last few months piecing together how some things translate from Java or C# or PHP into Python. But the principles themselves are language independent. Things like dependency injection and SOLID. Concepts like not conflating data persistence with how relationships are modeled with behaviorial concerns (I've spent the last few days working out the repository pattern, so this is fresh in my head). These things cut across all languages and paradigms. Sure, Haskell being a functional language probably has a different name for SOLID but the core concepts are there.
I've used it in a small way, on Mac OS X. Worked fine.
To me, all 10 apply to Django + DRF too. I have very little experience with ORMs. Is this common or uncommon?
Chrome OS does support SSH from the shell without any modifications to the OS. This will allow you to hop onto another box without much effort and do your code there.
Another vote for using lxml directly. BS is designed to deal with badly formed HTML by using regexes instead of proper parsing. Ignore it. There appear to be NTLM libraries for requests. If they work, that's the way to go. Scrapy is a framework that tells you how to do things but doesn't give you much in the way of useful tools. If you're scraping a specific page, just write your own xpaths.
SSH being?
Is what common or uncommon? You're comparing apples to oranges when you try to compare Django/DRF and SQLAlchemy. Django is a web framework which happens to include an Object Relation Mapping (ORM) library for treating relational database tables like objects. Django Rest Framework is an extension for that web framework (Django) that provides an easy way to expose tables as represented by the Django ORM via an HTTP REST API. SQLAlchemy is an ORM library which also includes a domain specific language (DSL) for constructing SQL queries dynamically. Both Django ORM and SQLAlchemy support migrations (versioning) of your table schemas. The drawbacks you find when you get further on with Django, is that there are instances where you have no need for a web framework but you do have a need for an ORM. You also may not even need an ORM, but rather need a DSL for constructing SQL queries. In either of these cases you might find no use for Django or DRF, and SQLAlchemy wins out in its simplicity and specificity of problem-solving. Simplicity is critical to programming. Not all python is used for building web services, and not all web services in Python are written with Django (see Flask, web2py, or other "simpler" web frameworks)
It has changed, does anyone mind to do a new benchmark?
I'm not the right person to ask as I generally don't use IDEs. i know people who use either Eclipse or Aptana for pretty much everything so this is second hand of what I gather from them. I only know Eclipse, to me, felt a lot more solid than JetBrains stuff but that's not based on many hours of use.
Aptana used to come with pre packaged PyDev and takes a lot of grief from eclipse setup, but Im not sure how well they kept up with the development of Eclipse and other components they use
Erm, Tylfin was saying Nuitka is "very compatible" with CPython, not C++.
On Linux Anaconda is hellbent to fuck up your Qt environment and is surprisingly hard to weed out from PATH so if your not big about scientific, numeric or big data python I'd think twice
I highly recommend termux, a Linux terminal emulator for android which allows you to install python and vim
Afaik there are already python bindings included with systemd. Why create your own? Also the exists a logging handler for systems/journald.
Honest question here, what's up with all these SQLAlchemy love? I mean, sure, I believe SQLAlchemy is the best Python ORM available (or among any other languages even, but my experience is limited), and if I have to work with a significant amount of SQL, I would be really disappointed if I can't use SQLAlchemy. But still, isn't it still an ORM? I mean, surely most of the time it only covers one side of your application? What am I missing here? Are people somehow using SQLAlchemy in a way that I didn't know?
It's because most of as were or are using other ORMs as well - and then moving from those kludgy, clunky pieces of utter shit to SQLAlchemy triggers pure, wonderful, delightful nerdgasm. Code starts to flowing by itself in it's beauty and simplicity, obstacles are starting to disappear in rear view window and you feel total freedom, as world just happened to become what it always meant to be - nirvana.
[removed]
&gt;what's up with all these SQLAlchemy love? &gt;I believe SQLAlchemy is the best Python ORM available Didn't you just answer your own question?
Because this shows you _how it works_ rather than having people sprout all the crap about "needing dbus". Also I've found the systemd-python bindings to be sadly under-documented. Example from the `systemd.daemon.notify`: &gt; notify(status, unset_environment=False) -&gt; bool &gt; &gt; Send a message to the init system about a status change. &gt; Wraps sd_notify(3). 
Please make post mobile friendly, is so close already
I had the same kind of issue, and here are a few strength easy to highlight, for me. * You can **easily** interface Fortran (and C) with Python code, not so much with Matlab/IDL/whatever * It's free, so no expensive licence * It can be as fast to execute than Matlab/IDL/â€¦, and faster to write * Easy to install and manage dependencies with Conda (no virtualenv in my team yet), even on a remote machine * Code reusability * "I'm ready to rewrite your codebase for my use in Python, since I'll be more efficient than learning your old, proprietary, weird language" In the end, my (numerical simulations) team switched from IDL (data analysis language widely used in astrophysics) to Python in less than one year.
My recommendation is to start using it yourself, build tools to automate some of the common kinds of data processing where you only have to run one command to generate the full output. Start using Python for the things you see Python being better for, others will realize that you're getting a lot done without a lot of effort, and they'll want in on it. Don't be arrogant about it, though. Just build a tool to automate some process, then find a time to casually use it in front of a coworker or two. The goal is to show how you can get immediate satisfaction from using Python, the plethora of actual advantages (like Jupyter) will come later.
and only moments later I try and import cherrypy and discovered I have to use flask or django instead because the defaults that come with anaconda's cant be changed in a stable way... according to the Spyder developer on stackoverflow. fuckfuckfuck. oh well. 
A lot of the reluctance might have to do with - a large code base already existing in whatever language they already use. Would that need to be rewritten? How would interoperability with new code work? - the loss in productivity from having to learn a new language is not trivial. The people at your workplace have years or decades of experience using the tools they already know. Why would they want to switch to something unfamiliar? It will be frustrating, their work will be slow, and they will be unproductive for a while (even if they might arguably benefit in the long term) - Python might not be the best choice, depending on your application. If the code you write it mostly for numerical calculations, Matlab syntax is honestly easier for that (numpy is awkward to use in comparison). Also if Matlab has an industry-standard package for something specific, it's sometimes worth using that package just so your customers/paper reviewers don't raise questions about why you're not using what they expect you to use. I love Python and use it all the time, but these are all very real concerns. That said, I worked in a lab once that used Perl and convinced them to switch go Python, so it's possible :-) A lot of it has to do with writing something that's useful, maintainable and easy for colleagues to understand. As they tell writers, "show don't tell". 
My success actually came from how inefficient the existing system was, allowing me to make a strong case for python. Our R&amp;D team would write algorithms in MATLAB, then once it was fine tuned, spend a couple of weeks sitting down with a software engineer and translate the code into Java for deployment. This was obviously a huge waste of time and I demonstrated that we could put some infrastructure together to call Python code from the existing Java code and allow existing methods to have easy bug-fixes and reduce amount of code to maintain, while allowing each team to have ownership of code. This turned things into near seamless deployment, which was enough reason for my boss to put his foot down on Matlab. Things I pointed out to my boss 1. Point out cost of MATLAB - 3k per license, could be saved using Python 2. Inability to deploy MATLAB solutions - require code translation, unless you spend 15k per license. Hence no scalability. 3. Research Code could not be run by anyone else, the research team could not get any input from other teams, and the code was reliant on another company (say the license cost jumped to 10k, and we could no longer afford it - a lot of IP would be lost), and this was not a good idea for any company - put us at Mathworks mercy. 4. Equivalent methods in numpy/scipy meant we didn't actually need MATLAB. Arguably sklearn and jupyter is far superior than anything Matlab can provide. 5. Shocking documentation standards in MATLAB (I put together a sphinxdoc autogenerated html page, and compared to MATLAB standards - there's really no comparison) 6. Speed of code in MATLAB vs numpy is very comparable, and in many situations better. 7. Complex models could now be run on servers freeing up computer terminals (see if researchers are waiting for code to run - there would be hours of working time wasted while code would run on local computers) 8. Show the power of python for the non-research/software teams, discuss that learning python allows your research team to be more efficient in all tasks (renaming a bunch of files following a pattern) 12. More than one function per file - reduced number of files to deal with and shorter functions - better code design, easier to maintain, reuse. 13. Look for example where large vectors are copied around (say f(x, theta) where x is large and is called for many theta values) and this wastes time in MATLAB. Show how using OO design (a mess in MATLAB) i.e. Python classes reduce copying overhead. 9. Google results of matlab filtered to last year, all point to it's decline - dead technologies increase cost to maintain. 10. Point out that you use Python and new employees/ uni students are less likely to know MATLAB nowadays, and more likely to know Python. 11. Other things that python provides - natural language processing toolkits, ability to correct spelling mistakes easily (MATLAB has horrid string processing). Full web frameworks/protocol buffers mean you can deploy Python code for use in other teams. 12. Matlab to Python is a very simple transition Depends on your situation, but these points are usually enough to get your boss to change his mind. Once you have his support (and using Python gets support from any software teams you have), go about proving it's utility and winning team members over. The final victory came after my first seamless deployment - i.e. my code was basically put into deployment within a couple of days of testing, as opposed to the month it would take before (2 weeks translating and 2 weeks testing the translation), my boss said that the company will no longer pay for Matlab licenses after 3 months, and it is the Researchers job to produce Python code - if you wish to use Matlab, you paid for it and did the translation in your own time. Things I learned: 1. Don't volunteer to port the whole thing - it's a thankless task. Port only a small section that illustrates your points. 2. Emphasise reliance on Mathworks remaining benevolent, a dependency your company shouldn't be hamstrung by. Every other service our company used had competitors. Matlab only had Octave which is relatively garbage. This is a secret fear of any manager. 3. This change is very difficult to push for consensus - people are lazy and don't want to leave their familiar zones. Getting the manager/boss on board is very important and he'll know how to push the changes across far better than you ever will. 4. Show it's utility over Matlab in some way at the beginning, and expand to show Matlab's many deficiencies. I took code that had a 5 minute run time, ported it and optimized it run in 10 s (turned a lot of loops into numpy functions). Then added some caching behaviour, and generated documentation automatically from my code. Instituted some basic unit tests, so I could check behaviour. All of these things really impressed people and Matlab had no answer. 5. Find support from your software team (if you have one). They'll all hate Matlab and any deployment work (unless you really require the efficiency of a compiled language). And for SAS, I would rather be forced to use Matlab for the rest of my life than ever have to use SAS another day. SAS is utter garbage. Matlab at least tries to be a programming language, SAS makes php and perl seem like amazing langugaes.
The download install should be in your Applications directory. Just move that to the Trash. If you do `brew search python` you'll see what is available and is installed. System python is 2.7.6. Install python3 through brew. You should get 3.4.3.
Now those points are compelling. I hate django's notation that gets messy any time you stray off the path of fairly typical queries.
My organization uses Matlab for all the above. In addition, there's no Python equivalent to Simulink. So we need Matlab *at a minimum* just for simulink. And if it's already installed and we already know how to use it and it's already being supported by IT, there's really no point to go to Python. I am planning on learning python on my own time, though, hence my subscription to this sub.
Not really - it may act much differently for serial columns, time, etc. 
I find that if I just want to use SQLAlchemy as a passthrough for my SQL it's a consider PITA. While it's well-written, well-documented, and highly functional, if you don't want to use the ORM features it's a ton of work to filter out all the documentation, stackoverflow messages, etc that don't apply. And given that the two databases I'm most likely to use it with, SQLite &amp; Postgresql, are sufficiently different that it can't bridge them effectively, I find it's easier to do without the vast SQLAlchemy. If I was building large CRUD apps that had to use multiple transactional databases like Postgres &amp; Mysql then I'd find more value in it. 
I'm actually going to be out away from internet sources, so I was looking for something that would run just with the phone.
You don't have to use the full ORM; you can use the [Expression Language](http://docs.sqlalchemy.org/en/rel_1_0/core/tutorial.html). I used that for a PostgreSQL project, and when I wanted to move it to MySQL (Google Cloud SQL), all I had to change were a couple of lines for the "insert...returning" clauses (MySQL doesn't support that).
My phone is too crappy for this xD
ANACONDA takes a lot of the pain out of switching from MATLAB to Python, the Spyder interface makes the environment very very similar. And the install is just a point and click. 
May be good for development. But when deploying to production, always test against with the same stack to avoid surprises.
Haha, "reference" is a synonym for "pointer". So don't use terminology like "reference", instead use the convenient "oblique cognitive voorwerp". The alternative to "pointer" is "value".
I used SQLAlchemy on a project a few year ago. I hate it and much prefer Django's ORM (which, by the way you can use standalone, without any of the web framework getting in your way) The one this has Django does better than SQLAlchemy is geographical operations. Django has Geodjango which is top notch, which SQLAlchemy don't think has anything that makes that kind of stuff easy.
&gt; It can be as fast to execute than Matlab While this *can* be true, I have yet to see evidence suggesting that NumPy can compete with Matlab on signal analysis with large datasets. The last time I ran the numbers had Python taking 45s-2m to compute a cross-correlation that took Matlab about 3 seconds. As an EE aside, another big thing is that MathWorks supports a tool that converts Matlab to Verilog and VHDL and this is *huge* for electrical engineers. I have never seen a similar tool for Python that is well-supported.
In principle, a numerical Python package should be able to match the speed (or be within 1-2x the speed) of any other language, because Python can use vectorized numpy functions or call out to functions written directly in C. Matlab is similar in that regard; it is an interpreted (albeit JIT compiled nowadays) language that has respectable native array performance and also calls out to C. If there is an order of magnitude difference between Matlab and Python for a task, I would say that you are comparing apples and oranges. Matlab must be using some compiled function, and Python must not be. Indeed, if Matlab already did the work and has that function available and it would be hard to do in Python, then keep on using Matlab. But I would be wary of saying "I have yet to see evidence suggesting that NumPy can compete with Matlab" in any context. I am actually trying to convert a huge scientific simulation into Python from Matlab, and I am actually impressed at how fast Matlab does certain tasks. I can't stand the language, but there is a reason that a language called "**Mat**rix **Lab**ratory" is good at vectorized computation.
I was first introduced to python by a postdoc friend when i was in grad school (must have been around 2000, started writing Matlab in 1997). Access to Matlab and its amazing IDE was free, and you can literally do everything with Matlab. No need to switch. Then Mathworks decided to make Matlab "object oriented." What a mess they made. Thats when i abandoned hundreds of thousands lines of Matlab code for Python.
https://geoalchemy-2.readthedocs.org/en/0.2.5/
There was a post about this the other week. On mobile, bla blah blah
The experiment was literally just "create extremely large dataset. Start timer. Compute xcorr. Stop timer."
&gt; You can easily interface Fortran (and C) with Python code, not so much with Matlab/IDL/whatever Not true. Interfacing with C and Fortran is MUCH easier in Matlab. All you need is a dll/so to import. Not so with Python. &gt; Easy to install and manage dependencies with Conda Again, not true. And Conda is rubbish. &gt; Code reusability Same for Matlab.
Reading is fundamental.
Just curious: What's the argument against Conda? And does virtualenv do any better?
If you know what you need, and you should, there is no need for it.
I use the MKL optimizations. They're available for free to academic users.
He doesn't know what he's talking about. He's brought up his criticisms of Anaconda before, and they're baseless. Anaconda is recommended by virtually all of the major players in the Python scientific stack because it greatly simplifies the installation of packages with compiled components. If you want a thinner version of Anaconda, there's always Miniconda.
Thank you for the info and the places I can find free courses!
That's the thing, I done it and it's too much info and hard to understand
I'm not making an argument for or against Python. I'm just saying that if Python is that slow, then Matlab must be using a compiled function and Python is not, so it would be possible to speed up Python using a C function. That is, it isn't because the language is fundamentally slow. I didn't say "boo Matlab for cheating!" or anything. You are correct, it is a pro for Matlab. In fact, I said: &gt; Indeed, if Matlab already did the work and has that function available and it would be hard to do in Python, then keep on using Matlab. I was just trying to help you make a cost-benefit analysis, not incite a Matlab vs Python flamewar. Like I said, I use Matlab too, and I want to help people pick the right tool for the job.
I understand the point you're trying to make, but I think this is bad advice. This would not fly at a lot of companies.
I use anaconda and conda myself, and I can't imagine anything easier or that would work better. I don't really hear bad things about conda so I was curious.
Pretty sure it is.
&gt; Both of these are demonstrably true. No, they are not. libpython does not play with C++ in binary or any form. There has to be a C wrapper in there to play with libpython. That is the only thing that is demonstrably true.
 [float(i) for i in grade_list] is creating a new list, not modifying grade_list. You just have to assign the result of that operation to grade_list to get what you want. On an unrelated subjet, I'd probably do something like that for the insertion in your list: while True: percentages = input("Enter some numbers here: ") if percentages == "done": break grade_list.append(percentages) That way, you don't have to append then remove "done" in your list
Aside from running a jupyter/ipython notebook on your local network and accessing it from your phone, I can't see you having many other alternatives. I'd suggest termux, but your version of Android is incompatible with it. Have you considered getting your hands on a laptop or (preferably non-ARM) tablet device instead? Coding on a handheld is *hard*. 
Just tested 4x faster using MKL (Anaconda Accelerate) on a 1k by 1k matrix-matrix dot product. 
This is not a very good argument, as the object oriented features of Matlab are completely optional.
I think a better question is "What does a rectangle have to do with displaying anything?" Instead, have some sort of display mechanism that knows how to display shapes.
You keep using the word "argument," but no one is *arguing* with you. They are just trying to tell you reasons why Python might have been slow. As per your post, you implied that you are looking for "evidence that Python can compete with Matlab" for your task, and people are providing said evidence, along with the statement that it might be some more work with the Python version.
Before people ask: &gt;Why not use Protocol Buffers, or .. ? &gt;&gt;Protocol Buffers is indeed relatively similar to FlatBuffers, with the primary difference being that FlatBuffers does not need a parsing/ unpacking step to a secondary representation before you can access data, often coupled with per-object memory allocation. The code is an order of magnitude bigger, too. Protocol Buffers has neither optional text import/export nor schema language features like unions.
I like python, of course, but I found that creating decent looking plots is much faster in Matlab.
I can't think of anything else other than getting a new phone...
I am starting on a similar project. My plan is: Flask back end Jquery + data tables plugin for front end User clicks on summary table, jquery sends request to flask for more data. Data table plugin then displays the new data. 
You can use Numba and write numerical python code that is as fast as fortran. 
Most of this applies to anyone using python in a numerical context.
1. Create a Qt app 2. Run `windeployqt` to bundle it 3. ??? 4. Profit What's the actual question here?
Thanks for that tip! Anything to clear it up is better!
Thanks aha, I study genetics and see that python is used a lot in bioinformatics, so I decided to try my hand at it :D.
Hm, that's interesting, because the [Intel MKL](https://software.intel.com/en-us/intel-mkl/try-buy) page makes it sound like its only free to "Students, educators, academic researchers, and open source contributors". I wonder how Gohlke gets around this -- perhaps the community licensing agreement? In any case, that's good to know, thanks!
Hey guys, so I got some of the code to do what I want. My question now is, is it possible for me to use the list i create in 54 as an argument for the function (line 12) My best guess was what I wrote on my 58. The function works when I enter values directly as arguments. I really appreciate the help guys. grade_list = [] percentages = 0 while True: percentages = input("Enter some numbers here: ") if percentages == "done": break grade_list.append(percentages) print(grade_list) def gpaCalc(marks): gpaList = [] for grade in marks: #sorts data if grade &lt;= 49.0: grade = 0.00 elif 50 &lt;= grade &lt;= 52: grade = 0.70 elif 53 &lt;= grade &lt;= 56: grade = 1.00 elif 57 &lt;= grade &lt;= 59: grade = 1.30 elif 60 &lt;= grade &lt;= 62: grade = 1.70 elif 63 &lt;= grade &lt;= 66: grade = 2.00 elif 67 &lt;= grade &lt;= 69: grade = 2.30 elif 70 &lt;= grade &lt;= 72: grade = 2.70 elif 73 &lt;= grade &lt;= 76: grade = 3.00 elif 77 &lt;= grade &lt;= 79: grade = 3.30 elif 80 &lt;= grade &lt;= 84: grade = 3.70 elif 85 &lt;= grade &lt;= 89: grade = 3.90 elif 90 &lt;= grade &lt;= 100: grade = 4.00 gpaList.append(grade) #gathers data into list return gpaList print(gpaCalc(grade_list))
I don't know if it does what you want, but Spyder is generally considered a Matlab-esque IDE.
Spyder has variable introspection, but no continual analysis. Jupyter has continual analysis, but no introspection.
Your argument about the standard library is so backwards i do not know where to begin. And what about the packages that you may need that do not come with those "for dummies" distribution "solutions?" Also, you almost completely ignored my post. What about Enthought? Or other distributions? You do realize that Continuum is a for-profit business, right? Holy shit, Anaconda comes with **490** packages!? [490?!](http://docs.continuum.io/anaconda/pkg-docs). Im sorry, but that is just idiotic.
* Outside using matlab OO (which is horrid), I never saw examples of multiple functions per file. * My bad, I might have misattributed an optimization here. A function I fixed would the exact same initialisation each time, (masking, multiplying and some adding) which I coded to do only once and it saved a lot of time * Would this require another license btw? 
That should work if you indent lines 6 through 8. You might like to consider simplifying your code in the function using this [range comparison recipe](http://code.activestate.com/recipes/578158-range-comparison/).
http://lmgtfy.com/?q=What+is+SSH
Hahaha. Fair enough. Maybe someone will share a different opinion from you and actually want to help though. But thanks for the advice though.
Cron job scheduling. Very good easy with python scripts. Not so much with Matlab. That alone convinced me to switch.
Uh the Django ORM is far inferior to SQLAlachemy. 
&gt; I think there's this assumption that Matlab is quick while Python is slow, **so loops tend to be avoided in python, but not in Matlab**. That's exactly the opposite of what I was told on both counts, but what you were taught and what I was taught are wrong. Both are more or less the same. Vectorization is very much encouraged in Matlab because it's so necessary when you're dealing with numerical data. Python doesn't encourage it largely because it's not numerically focused. Matlab has vectorization support builtin. Interestingly, Python for all it's claims of batteries included does not. You need numpy or scipy and the implementations (despite the names) are different.
I'm not entirely sure that GP's linked site is 100% legal.
&gt; The last time I ran the numbers had Python taking 45s-2m to compute a cross-correlation that took Matlab about 3 seconds. it's entirely possible to use them together too http://www.mathworks.com/help/matlab/matlab-engine-for-python.html no need to get rid of existing tools to add a new tool
I'm not sure of a nice general script to do this, but the pickle library makes it easy to just wrap up an object and save it to a file. 
I wonder how much work it would take to update to Qt5?
Yeah but anaconda is dummy proof for scientific programmers. So much shit is packaged so that on your first install of conda you're pretty much ready to go as opposed to pip install a,b,c oops need this too pip install d,e and that too f,g,h and so forth. For those who are well aware of exactly what they need, there's miniconda. I actually just install miniconda whenever I have to spin up a box on aws for a project. So much simpler that way. Also coming from an astrophysics background conda was the preferred distribution in our labs.
Wouldn't Octave be a closer match for Matlab than Python? TBH, it's really difficult to consider whether the switch from Matlab to Python is even plausible for OP's organization without knowing what kind of computational tools they need. For example, I've worked with psychometrics in the past, and Python simply didn't have a toolkit for that, whereas R has a number of really extensive psychometric libraries. I can well imagine other applied sciences for which Python doesn't offer sufficient coverage, but Matlab comes with whatever you need out of the box. That together with a reluctance to learn a new language can make Python pretty unattractive. 
&gt; You can easily interface Fortran (and C) with Python code, not so much with Matlab/IDL/whatever http://karenkopecky.net/Teaching/Cclass/MatlabCallsC.pdf 
&gt; Learning some kind of scripting language like python should be essential for these people as it gives them a much broader skill set that they can use for data cleaning, scraping etc. And my mechanic learning how to cook would make them a better cook. But it won't make them a better mechanic. In larger companies there aren't a lot of 'jacks of all trades' that would do something like that. 
can this be run on Windows ?
What are you trying to do? Web or CLI/GUI Programs? If web, then I would recommend PHP for the ease of setup. For CLI/GUI Programs I would recommend Python.
what is "libpython" ? 
Web backend. Currently using django/wagtail but wanted to try something new. Guys over /r/web_design seems to have a hard-on for PHP so I would like to know what /r/python thinks.
Personally, I am more comfortable with PHP on the webdev side and Python on the CLI.
you mean "reset" ? why ?
&gt; Writing sample code and libraries for common tasks, and putting them on Github. Did your legal department sign off on that? That's a huge no-no where I work and other large companies.
don't understand your question. You have these 4 stages (production, staging, development, testing) ALL on the SAME server ?
Yes (I know..), budget stuff :(
Web designers are rarely programmers/developers. I've seen a lot of horrible PHP code written by web designers (esp. Wordpress theme designers) Python is only slightly more troublesome to setup, but typically more expensive to host as there are less options.
oh sorry are you in some war-torn chaotic or poverty-stricken place ? Maybe try virtual machines ?
It's arguably less easy to shoot yourself in the foot with Python as really if you're going to make a website you're going to do it with a framework that does security things for you. PHP is a lot less dependent on a framework so you can kind of just go ham and let come whatever may. There are entire websites dedicated to [cataloging some of the bad design choices in PHP](http://phpsadness.com/). PHP is definitely an alright language that fills a need, but it is undoubtedly a little odd. I moved from making websites in PHP to making them in Python but the biggest issue I've had is that deploying a Python web app is a major PITA. WSGI just doesn't compare to dropping files in your webroot. There are all sorts of weird quircks with wsgi that make a lot of deployment suck. I've spent hours tweaking uwsgi and really didn't get much out of it. That being said, Python makes me feel a lot better than PHP does so YMMV.
what's wrong with an "emgen inception" ?
&gt;Python is only slightly more troublesome to setup I have my own cheap test server at home and i'm working on it.
It's for a project that I am doing and I was just wondering if it was possible to "reset". Thanks for all the helpful comments!
If you to try something new you could also give a shot to something like a mini framework ala Flask.
How is your server set up at the moment? In the past I've used nginx and proxied requests to specific applications.
&gt; def num_press(x,y): if num[x] == 'y': code_y() time.sleep(1) num[x] does not exist within this scope, the check for equality with 'y' also does not make much sense. The code_y() will try to call a function with the name code_y which does not seem to be your intention. What you can do is put your code-functions inside a list like this codes = [code_1,code_2,...] and then call them with codes[i](). for i in range(0000,10000): num = "%04i" % (i,) for x in range(0,4): for y in range(0,9): num_press(x,y) print '-----------' Here you iterate first through every possible pin, then you iterate with x for every digit in that pin. Then for some reason you've got a third iteration with y from 0 to 8 (remember ranges do not include the stop number). This third iteration is completely unnecessary and i believe is only there because of the erroneous num_press function mentioned earlier. It would be enough to have for x in range(0,4): num_press(int(num[x])) This will go through every digit in the pin and send that as an integer to your num_press function, the num_press function will have to be altered for this to work. 
I didn't read the name as fiddle the first time, I read it as f-idle. I guess that would be just as appropriate.
PHP "was" a great motivation for someone starting out. It is far more understandable for non technical people and gets results witch fuel your motivation further. The above qualities "were very important" in a time where self learning material were rare, incomplete and expensive. I remember myself as a self taught back in 2006 that PHP gave me inner strength. For me this is the reason for PHP being popular back then. But now things have changed. Self learning materials (MOOCs etc) are everywhere and in great format (videos, classes etc), so it is far easier to grasp harder and more complicated therefore more sophisticated topics and tools and be productive to fuel your motivation. Also things have changed, people have realized that web is not all there is in programming due to the rise of higher added value programming activities such as games, mobile apps, data science etc. So for me this is the reason PHP is not so popular nowadays. Many other languages support the above in expense of being more complex (for example python or java) but self learning materials nowadays make this problem obsolete. TL;DR: IMHO the "only pragmatic problem" with php, which is also its great strength, is that its domain is mainly the the web. So in order to reach other cs areas which are of higher added value nowadays (eg algorithms, data, mobile, you name it..) you must switch tools
Don`t know what other guys talking about, python webapps are really easy to deploy. Also if you are talking about any highload setup with php its usually more than apache and files in webroot. If you have decent python skill I suggest using python, it will be more productive and php not that kind of language people are learning for fun or because of academic reasons. If you want learn new language - try go or node. And if you going with php, start with some good framework, maybe symfony or whatever they have now. Source: 4 years highload production php development, 10 years of general python. Not using php since 2012 and happy with it. 
FOA, congrats on your career. . i came to know about python in my company when a simple automation script was handed over to my team leader which has the potential of saving 1 man hour in 15 roughly minutes. But he was so mediocre and doesn't want the scripts in my eyes as I have my own path in VBA but shared it with his disciples. Wtf? Googled,codecademied, LPTHW-ied and at last I Made it. Now, he requested me not to threaten other people jobs with your scripts and strictly belives that machines can make mistakes. All of my initial works are only automating my boring works in office ( am n a ecommerce company with a KPO kindda job).
I'll bite, what are those terrible design choices?
I'm pretty sure he means Symfony2
Docker runs on Windows these days, so I guess it's no problem.
That may have been the case 3 or 4 years ago. But with things like seaborne, it is considerably easier to make good-looking plots now in Python. And the base plotting library, matplotlib, is doing a complete style overhaul.
I have found the exact opposite. It is easier to make very simple plots in MATLAB, but once you start doing anything complex, MATLAB becomes a major roadblock. There is a reason mathworks has spent the last 5 years or so completely rewriting their underling plotting system to be more like python's.
Yes, you can do it, but Matlab's FFI interface has some serious deficiencies compared to the Python equivalents that makes this *much* more difficult in practice.
&gt; I would like to know what /r/python thinks What the fuck do you think /r/python thinks? Do you want bias? Because this is how you get bias. You should at least ask the same question at /r/PHP if you want any sense of two sides of a coin.
Hey /r/python, what's best between PHP and Python? At least ask /r/PHP the same question.
No. Tired of playing the examples game. You'll have to take my word for it.
Or /r/lolphp
PHP - fractal of bad design is also nice read about that horrible language. http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php] [I was told to ask for your opinion here.](https://np.reddit.com/r/PHP/comments/3juj8o/i_was_told_to_ask_for_your_opinion_here/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Spyder has a small iPython shell (I think it is qtconsole) on the side, though.
WTF do you need interfaces in a dynamically typed language?
Just use Java and Spring+Hibernate+etc.
I'll give you one - it has an very deep and overly-complicated code structure, which takes great pains to avoid using the PHP standard library as much as possible, reimplementing a lot of stuff that is native in PHP. However, I don't think you can argue that the code is terrible quality - it's actually very nice.
PHP's password API functions are better than *anything* I've seen anywhere else.
Spyder has that. Actually, it has two. It supports both the regular python command prompt and jupyter.
Github supports private repositories.
Yes, the up-front costs of switching are high. But whether it is a good move depends on the up-front costs and the long-term costs of not switching. The latter, if they exist at all, depend to a large degree on what you are doing. But you can't ignore them when making a decision regarding whether to change.
&gt; Bottom line at the end of the day those are engineering dollars that need to come from somewhere. That somewhere can be reduced long-term costs. That depends on what they are doing. &gt; It depends on your application but there still seem to be a lot of gaps: There are gaps in both directions, things that MATLAB can do that Python can't do, but also things that Python can do that MATLAB can't. So it really depends on what the group is doing. &gt; There are some things I like about Python but for doing strict data manipulation I still prefer Matlab, especially stuff like vectorization Unless you want to work with slices, or broadcasting, or or data that may or may not have a length of one any dimension, or labeled data. &gt; When something breaks on Python, who do you call? We've been through this before, companies like Continuum and Enthought provide excellent support for the main packages. If you are using some niche package, then you are taking a risk with either Python or MATLAB. At least with Python, though, you have the chance to fix it yourself if upstream is unresponsive. You don't have that option with MATLAB (and make no mistake, MATLAB is not always responsive). &gt; Has your legal department vetted all of the licenses within the packages you want to use? Pretty much all the licenses you are going to encounter in Python are also used in MATLAB.
There is always a cost to switching. Whether that cost is offset by long-term advantages of using Python depends a lot on what you are doing. But you cannot ignore that cost when making your case. Nowadays, however, it is much less of an issue. There are a number of very good options of interfacing Python and MATLAB code. So you don't need to make it an either/or decision. You can start slowly integrating Python for those things it truly excels at. If it has real advantages over all, then things will move in that direction on their own. So rather than trying to convince your colleagues to switch to Python, I would encourage those colleagues that are doing things that are either much easier in Python or extremely expensive in MATLAB to integrate it into their workflow, either using general-purpose data formats or by using MATLAB/Python inteface tools. So things like big data, text processing, distributed computing, structured data, machine learning, and so on. Once a benefit has been demonstrated there, you can justify including it in additional workflows where it have benefits. This is probably the best long-term solution, since there will always be some people who don't want to switch, and some things that MATAB is still better at (maybe, depending on what you are doing). But presenting it as an all-or-nothing thing is probably not going to work unless there is something you absolutely need that MATLAB cannot do at all (which is certainly possible, but doesn't sound like the case for you).
See if this project helps https://github.com/LucianU/bud. It's my Django project template and it includes Ansible setup for deployment with uwsgi and nginx.
Most of its complaints aren't fixable without major breaking changes to PHP. I'd be surprised if that happened.
* ORM is built with Active Record design pattern, which limits ability to separate concerns. Data Mapper provides a much cleaner solution and is the pattern of choices for modern frameworks. * It's loosely coupled in theory, but in practice you're tied to their implementations (i.e. good luck ripping out ORM, but sticking with everything else). Granted, Symfony suffers from that too a bit. * Its funky MTV pattern is a mess compared to a classical MVC approach you see in Symfony or RoR. Model code creeps into "Template" which creeps into View. * In general the project doesn't encourage good code quality in my opinion. In Symfony you're almost forced to strictly follow MVC and keep controllers very thin at that, leaving business logic to external service classes.
For a second, I thought you implemented a Python interpreter in PHP. That would actually be kind of cool, let's you do Python over PHP: python.php?source=some.py
How are you meant to make python websites? Doesn't the web server just execute the .py file and pass the output to the web client?
Like have massive security exploits every five minutes.
You mean like in PHP 7? 95% of that blog post gets thrown out the window with PHP 7. The only part that will still hold is the function naming/argument order consistency. And obviously the parts where the guy who wrote this basically bitches that PHP steals too much from C/Java/Python, and in other places complains because PHP doesn't act the same as C/Java/Python. Which is it? Do you want PHP to be the same, or different, or do you just want to bitch about PHP for no reason because hating on PHP is the "cool" thing to do (like hating on Angular)?
You use [WSGI](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface) as the interface. Just "passing the output to the browser" hasn't been how web apps have worked since the days of CGI. 
I find myself wishing Python had an interface mechanism at times. I understand why it doesn't, but I'd like to be able to provide a definition of an interface that isn't reliant on `abc.ABCMeta` - more because of the conflict that happens when two metaclasses meet. 
Ah, okay. I'm not doing that, I am just making a response and passing that to standard output. https://paste.teknik.io/1808
Wow. I will give you a 100 up votes for saying this outright. You are spot on at every point. Saying this as someone with 8 + years of professional php experience.
You may want to take a look at [Boilerplate](https://github.com/coto/gae-boilerplate). There's also [SimpleAuth](https://github.com/crhym3/simpleauth) and this [tutorial](http://blog.abahgat.com/2013/01/07/user-authentication-with-webapp2-on-google-app-engine/).
The outlandish claim is that PHP is fast in the first place. Python, PHP, and Ruby are incredibly slow. Clojure, Go, Common Lisp, JavaScript, Lua, Haskell, Erlang, and pretty much everything else is faster. I don't think that any knowledgeable developer chooses PHP or Python based on performance metrics. PHP uses type coersion that is even worse than the system JS is famous for. In addition, PHP has always actively promoted the idea that some output is better than none (a very bad idea IMHO). This means that squashing errors (even critical ones) or passing back garbage is very common. Without good compile-time type checks and strong typing, the alternative is runtime type checks (which necessarily drop performance). While /u/tdammers wasn't incorrect, I think that the statements are a bit hyperbolic compared to what really happens.
I wonder if I would be able to bundle the binaries produced by one of these "freezers". My goal is to make a Windows App with Python, because Windows apps are the future for Microsoft Software, and Python should be a part of that future.
&gt;a Python web app is a major PITA [...] &gt;That being said, Python makes me feel a lot better than PHP does That strange, inexplicable sense of superiority. LOL.
you mean ``echo `some.py` ``?
Looks a lot like Spyder without the optional dependencies.
What I mean is that functionally, even modern PHP is supposednto behave like a CGI script from 1991 - a clean slate on every request, and any changes you make to any source files are picked up on the next request - or even the current one if that script hasn't been included yet. There is only so much caching can do without violating these semantics. By contrast, if you can afford to compile once and run as a long-lived process, then all sorts of things that aren't even optimizations but just common sense will come naturally. CGI semantics, in all their KISS glory, are a performance bottleneck that you can't cache away completely.
&gt; PHP is a lot less dependent on a framework so you can kind of just go ham and let come whatever may This is not true of modern PHP. Unless you have a heavily constrained piece of hardware that can't handle the "weight" of a framework, no serious developer builds web applications without at least a small HTTP abstraction and routing layer. Further, Python has things like `import` built into the language by default, while PHP only has `require`. What has modernized PHP application is userland autoloading that leverages namespaces to know which files to physically include when you new up a class. That's what has really allowed PHP applications to grow beyond a handful scripts to properly architected and designed applications. The rise of frameworks and components happened when another userland group came up with interoperability standards which allowed things like the `Composer` package manager to make it easy to pull in packages just like `gem` and `pip` that will work easily with your existing application. But it was Rails that really kickstarted the "hey, PHP really should have some proper, easy to use web application frameworks" revolution in PHP. So while you're right that PHP lets you slap together a script that can pull in HTTP input and start manipulating it easier than Python, nobody building serious web applications does that anymore. The new convention in PHP is to do front controller routing with an HTTP layer abstraction, and use composer's autoloader to do class importing through namespaces. Soooo, given that, I would argue that the decision between Python and PHP comes down to the quality of frameworks and ecosystem more so than the language itself these days. Flask (micro) and Django (full) are awesome, but so are [Slim](http://www.slimframework.com/) (micro) and [Laravel](http://laravel.com/docs/5.1) (full).
It's not so much that I want to write things like: class EmailNotifier(object) implements INotifier: ... void def notify_user(INotifier notifier, IUser user): ... I'd just like to codify that, "If you're going to pass an object to this function, make sure it has a notify method that takes these arguments." But more importantly, I'd like have a reference interface: class Notifier(object): def notify(self, user, payload): pass The problem I have with using `abc.ABCMeta` is that Python's fine with a *single* metaclass or multiple metaclasses that use single inheritance. But if there's a user that's going to implement `EmailNotifier` using some metaclass magic (their problem, not mine): &gt;TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases The other solution is doing: class Notifier(object): def notify(self, user, payload): raise NotImplementedError() And of course the non-solution of just not doing anything. I just wish there was some sort of middle ground between `raise NotImplementedError()` and `metaclass=ABCMeta`. But the only solution that will reliably work is ABCMeta. On the other hand, having this would cause some problems: * A proliferation of interfaces. Yuck. We'll end up with IReadable, IWriteable, ITransversable, etc etc. * If type checking was enforced (not something I want, but I could see this being a consequence of interfaces), I'm forced to stub out every method I'm not using from an interface. Or, I just split my interface into smaller parts and have...IReadable, IWriteable, ITransversable....yuck. I'm not hating on Python. I actually very much like Python's take on interfaces. If you want to use your object with iterators, implement `__iter__`, if you want to use bracketed look up, implement `__getitem__`, if you want to override attribute access provide an object with `__get/set/delete__`.
The only edge that PHP has over python is that is much easier to be used by a person which does not have real programming experience. It's similar a bit to NodeJS which is popular because the same crowd already knows JavaScript and doesn't want to learn another language.
&gt; WSGI just doesn't compare to dropping files in your webroot. Yep, you really can't compare these two, it's like apples and oranges, an invalid comparison. "dropping files in your webroot" doesn't make it work in PHP. You **need** some kind of thing that parses the HTTP request and passes its values on to your program be it PHP or Python or Ruby or JavaScript. And this *thing* is usually an application server that you reverse proxy to or a module of the web server itself. And by the way, even PHP now recommends to use its FPM which makes deployment quite a similar experience to Python web applications.
This looks promising: https://pypi.python.org/pypi/SpeechRecognition/
Thank you, ill try it now 
If backticks in php work this way: Yes.
Can you expand on that? I haven't really used PHP in years but most of the things listed in there are core the language. Without massive breaking changes I don't know how those could be fixed. A few examples off the top of my head that have bitten me in the past. - Error handling, functions in the standard library may throw an exception, halt or return a sentinel value. Sometimes the sentinel value could be a valid value. To know what it does you need to memorize it or look up the documentation. - Inconsistent naming of functions in the standard library, parse_url vs urlencode. Why not url_encode? - Scoping rules make code hard to reason about, if you see a variable in a php file it can be very hard to track down where that variable came from - The language is very dependent on the runtime and the runtime is very configurable from both configuration files and configuration functions. This means a library could change the runtime out from under you. For example, you could configure all errors and warnings to be printed but then include a library that disables all errors and warnings. I have no idea how to fix those issues without breaking most of the PHP out there. If you are introducing major breaking changes to a language you loose the benefit of the massive amount of existing code. If there is no existing code, why keep using PHP?
And inserting nginx as a reverse proxy takes maybe another 10 minutes. Python web deployment is much easier than most people realize. Once it's set up, the dev-deployment cycle becomes trivial.
Didn't work for 'drake' or 'lil wayne'. 
This right here. ORMs have their place but should not be used to sidestep learning SQL. It's not that hard and will bring you "closer to the metal" for understanding the underlying db structure and table relationships.
You are correct about the age of PHP vs Python. It is also true that Python most definitely has PHP beat in overall number of libraries as Python is more popular across a diverse set of programming fields and has more users. That said, PHP has quite a few popular web frameworks while python basically has Django, Pyramid, and Flask. The number of frameworks usually doesn't have much to do with how good a language is. Ruby was made popular due to Rails (honorable mention to Sinatra). If Ruby had several competing frameworks, it would probably have not achieved the success it has today.
https://www.techempower.com/benchmarks/#section=data-r10&amp;hw=peak&amp;test=query
&gt; Was looking for something like electron buy with Python what's "electron buy" ? 
My company is publicly funded. So actually, anything we can point to and say, "Look, we did this and people use it!" is good for us. Getting paid to make open source software -- livin' the dream :)
Node isn't popular strictly on the basis of already knowing JS. A lot of the initial node guys were Rails and PHP converts. Node has a much better async system baked in from the ground up (twisted and eventmachine have library problems because so much of the ecosystem isn't evented). The JS ecosystem in general is huge. In addition, node is much faster than the other common scripting languages because Google spent many millions funding their large language-implementation "dream team". Finally, node has seen a big jump in users because frameworks like React allow them both use the same rendering engine on the back-end and in the SPA, but also allows progressive enhancement with SPAs. In my time working with node, I've seldom seen it used because everyone already knew JS. It's often teams of Python or Ruby guys who learn the language and switch. The biggest issue with node is that there are times when Python or some other language is the better choice for a task, but node is used anyway.
I spend a fair amount of time working with beginning programmers (esp beginning JS and Python programmers). If you are a beginner to the point where you don't understand functions, then learning all the things there are to know about back-end work is probably not a pressing priority (first things first). With JS, I can teach you those things in the browser where you can get the feeling of making a website (and can do interactive GUI stuff from day one), but without all the real complexities involved.
you have to actually know what you're doing in python, you can't just grab the first function that sounds right.
Do you even understand what vectorization is? Vectorization is a way of writing your code such that it doesn't need to type check every data member. The only way to do that is by having static types and pushing the code down into C. So, I stand by my statement. You need a library like numpy or scipy in order to do vectorization. You can't do vectorization or get good speed for numerical calculations with CPython without using an external library, writing C code yourself, or ditching CPython entirely. &gt; it is just a bunch of extra numerical algorithms built on top of numpy No it's not. The array classes are different between numpy and scipy. The eigenvector calculations are different. They look they same. They act the same. They're not the same. It only really matters when your eigenvector is segfaulting, but switching methods will often fix your bug. Scipy's methods also tend to be faster.
There's only [one cross-correlation function in numpy...](http://docs.scipy.org/doc/numpy/reference/generated/numpy.correlate.html) There's a handful of modes, some are faster than others, but none held up to the matlab times. Further, I work primarily in Python (hence me being in this sub..), I definitely know what I am doing. I actually don't use matlab at all anymore, I just hate this "python does everything matlab does just as well and there's no reason anyone should ever use matlab ever" idea that gets thrown out around here all the time. OP wants an argument for convincing his colleagues to use python instead of matlab. If we don't give him all the facts, he's going to be laughed out of that discussion when someone brings up things like performance and built-in tool sets (especially since he's junior to all of them)
Node's popular for it's asymmetrical threading out of the box, not because it's JS. 
In *my* opinion, data models should be stupid objects in terms of behavior. They're essentially value objects, except they get their value from the database. The only behavior they have should be "How do I relate to other objects and what expectations does the database project on to me?" I'm not saying you shouldn't have methods like: `get_default_group` or something. However, consider the requirements of registering new users (something I'm working on right now). You have the obvious requirements of "Must provide username, email and password" and probably other requirements as well like, "Can't have the same username as someone else", "Can't have the same email as someone else" and then there's data that you'll likely provide as well, like when the user registered, what groups that user belongs at registration, what the permission level of the new user is. You'll probably want to send the user an email with a verification link in it. What the database have to do with any of that? How do you add an additional validation easily? A more pressing question is, "How do I test this monstrosity?" Instead, you'll want to create some registration subsystem that'll ask for things like, "What are all the usernames taken currently", "How do I notify this user?", "What requirements do I put on this user?" "What defaults do I provide?" How I'm approaching this -- and I'm not sure if it's the right way or not -- is to create a CreatNewUser command class that receives: * A user repository * A group repository * Some verification/validation object * A clock object (by default it's `datetime.datetime` but anything with a `now` callable will work) It looks like this: class CreateNewUser(object): def __init__(self, user_repo, default_group, verifier, clock=datetime.datetime): self.user_repo = user_repo self.default_group = default_group self.verifier = verifer self.clock = clock def _provide_default_data(self, user_data): defaults = {'groups': [self.default_group], 'permission_level': PermissionLevel.MEMBER, 'verified': False, 'registered_at': self.clock.now()} # don't overwrite existing data, overwrite defaults defaults.update(user_data) return defaults def execute(self, **user_data): user_data = self._provide_defaults(user_data) user = self.user_repo.create(**user_data) if self.verifier(user): self.user_repo.persist(user) return user else: # I'm actually at a loss to handle a failed validation right now And then I can make validators like, "is_username_free": def is_username_free(user, all_usernames): return user.name not in all_usernames And in the end, it looks like this: user_registerer = CreateNewUser(user_repo=repositories.get('user'), default_group=repositories.get('group').default_group, verifier=is_username_free) I can test it by providing a simple in memory user repository, some group, user my *real* verifiers (that are configured from the same in memory repositories), and a fake clock (just an object that accepts a datetime object and it's `now` returns that). If I need to place new validation requriements, I can simply create a function that accepts *other* validators and runs them all with the user object and pass that in. Handling sending the user a verification email is out of scope for this, but it's pretty easy to orchestrate them together.
&gt; I like python, of course, but I found that creating decent looking &gt; plots is much faster in Matlab. I use both MATLAB and Python daily, and this hasn't been true for 5 years. 