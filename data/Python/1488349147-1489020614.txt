Well written, and a nice overview. Thanks
perf issues? Performance? (Speaking as a Python devotee who write performant code in Python) Lua-jit is more performant than Python and has a much bigger game community. You can write performant games in Python, but you can in LUA also. I'd say you just need to learn how to diagnose and address your performance issues regardless of language. Figure out what exactly is slow and use a different algorithm, use a C library, or write that part in C.
That's python 2 for ya
an over step by a bunch of egomaniacs... That fixes the issue you have a problem with, and many others (ie `(1,2,3) &gt; 2 == ?`). The only people allowing python 2.7 to persist are the people using it. No one here has any idea what you're going on about. Maybe you should try JavaScript, they're handling the ecma 5 to 6 transition well I hear. You don't mind waiting for minutes for your interpreted language to transpile into another version before you can see the effects of your change, do you?
There's a little thing called pip...
sys is builtin. I'd just change my path.
`git init .`
Serious question in regards to politeness and robots.txt...Are you crawling linerally? If you are it would make sense to build a centralized crawl queue the distributed crawl cluster could consume and then use randomized sorting on identified links. This would ensure your crawlers are popping up all over the place across much wider time spans than a linear crawl and could still fall within respect for the other two metrics. Just sayin.
That's neat, but I think I'm gonna just stick with sqlite for now.
Don't get me wrong, I want to love python. I just want the 2/3 issue to go away
On my 2013 beat up macbook air: python3 -c "import sys; import requests; sys.exit(1);" 0.27s user 0.08s system 72% cpu 0.488 total
Depends on what you want to do I guess. There are plenty of things that only require file system access and some light text file parsing, and those start just as fast as a compiled program. Conversely, a compiled program will take a while to get a plotting framework up an running as well.
I'm not really sure why I'm being downvoted for pointing out that package management tools have nothing to do with open source..
Try installing anaconda.
Yeah, I know -- which is crazy right? That *is* python's typing system. Mypy, if used extensively, would prevent you from writing ordinary sorts of python programs because as a typing system it isn't powerful enough to describe ordinary python code. NB. The discussion there doesnt actually solve the problem. Seems like they want to add a ahead-of-time annotation/baseclass that says "this is going to be structrually typed" -- that defeats the point! The point is that repeat() should be typed so as to allow any structurally valid input.. not any input defind with magic parent, that's basically just nominal typing again. 
It's on the horizon! You only have to wait 3ish more years! I do think they could have phased it out earlier, in fairness. But then again, I don't have a stack of 2.x production code to port, so maybe the extra time is a boon to those who do!
I have a bot that tracks my expenses when I write them down in Google Keep or Evernote. It picks them up and insert them in a DB and a Google Spreadsheet that has a certain format. 
&gt; Using eval() directly is also riddled with danger for the reasons outlined above. Fortunately, it has optional arguments to restrict what eval() is allowed to execute. &gt; eval(expression[, globals[, locals]]) &gt; Setting the second argument to `{"__builtins__":}` will deny `eval()` access to any builtin Python methods Don't assume this actually makes you any safer, read the linked nedbat post (and the stuff linked from there) for evidence. It's unclear whether it's actually possible to properly sandbox python's eval, you'll always be chasing the bad guys (even if you do extensive bytecode whitelisting and attributes filtering). If you want untrusted executable code, you're better off embedding an interpreter for a separate language.
For distributing/deploying programs with those problematic dependencies/extensions there are those two projects by Continuum: * https://github.com/conda/constructor * https://github.com/conda/kapsel They work with conda packages, so all those packages are already available from the anaconda or conda-forge repos. If something is still missing, you can create a conda package yourself. It's normally pretty easy if you follow the conda-build docs.
Have you done this with Django? Do you have a tutorial for that?
Android app layouts are written in XML, I don't get your point.
Yup, still. Stuff was closed source other stuff open source. 
I dread to think about what the 4 worst articles are like. In your Best books article, which is supposedly about Python, you cite books on Java, Javascript, C, and C++. And apparently you analysed 30m stackoverflow answers to generate that list, which we all know is bullshit. Your interview questions article is utter nonsense.
That sounds pretty neat. Thanks. 
Not to mention that you will get your IP blocked by any decently run website within minutes, if not seconds, by hammering it from the same IP like this. Source: we do this on a large scale and use a LOT of proxies to prevent it
&gt; a distributed crawler No. Its a fetching script with 40 threads, not a crawler. Quick outline of the bash script: 1. Given a CSV `infile.csv` with one million URLs in it 2. Wrap each line with `curl -I "$PREVIOUS" &gt; "$PREVIOUS.dat"` 3. Split the resulting file with 1 million lines in 40 chunks: `split -n l/40 infile.csv` 4. You now have 40 files starting with `x**` 5. Execute `ls x* &gt; run.sh` 6. Append `&amp;` to every line in run.sh, `chmod +x run.sh`, `./run.sh` You accomplished exactly what you did before with this, except the memory footprint is the same as running 40 curl commands simultaneously and not ~300MB per worker. Also, the dependency to Docker has been removed. Executing top will show you up to 40 curl commands running in parallel at any given time. If you want to scale it up, just change the 40 to another variable and have more threads running. Of course I would write something in Python, and Docker has its place, but is not necessary for your example. The bash solution comes with all the shortcomings that your solution has, too. You might have to pass a timeout parameter into curl, not sure what the defaults are.
just "create a new style for this site" and paste in the CSS: https://raw.githubusercontent.com/peterewills/ipynb-zenburn/master/ipynb-zenburn.css
This looks really nice, if Sailfish really treats Python as a first-class dev language it could be the mobile story we've been lacking for a decade. As someone who got a bit burnt with Maemo/Meego, though, I'm still a bit wary, but I guess I could give it a go on the emulator before I splash any cash on an actual device. I guess my real question is, is there a real store for these apps, any monetization opportunity...? I know there are very few devices around (the AquaFish and now Sony Xperia X), but is there an infrastructure already that can be targeted? EDIT: Looks like the SDK on OSX requires VirtualBox, which I can't install (I use VmWare Fusion, and the two really don't like each other). Sigh.
Saying-you-love-openness is a ubiquitous form of virtue signalling these days. Google, Microsoft, even Apple all make a big deal of how much they "love open source" while remaining some of the biggest, most abusive vendors of closed source software out there. So, Sailfish might come with marketing jargon about openness, but they're fundamentally not-open. They previously excused this by saying "it's just the UI" as if that isn't a huge, abstract, core component with a shitton of power over you. Ubuntu Phone is more interesting than Sailfish. And, it's probably equally easy to use Python with.
[fuzzy notepad](https://eev.ee/blog)
What do you use to pull data from Keep? Last time I looked I couldn't find any kind of API. 
Yup, unfortunately there is no API yet. I just use Selenium with PhantomJS. It breaks A LOT so I'd recommend sticking to Evernote or any other with a proper API.
I don't know about best as that's very subjective so start with [A powerful yet simple switch-like dispatch system for Python](http://code.activestate.com/recipes/577507-a-powerful-yet-simple-switch-like-dispatch-system-/). Certainly a dictionary with a key is the most well known, you can even get a default for free.
Gotta love Guido, if they had agreed the android world would be so different right now
**Senior Python Developer @ Toaster London** **About Toaster** Toaster crafts beautiful design with emerging technology to create connections between brands and people. Our multi-disciplinary teams act as a creative partner, exploring ideas, design and innovation. Originating from Google Creative Lab in 2010, our close-knit teams are based in London, San Francisco, Singapore and New Delhi. Together with our clients we’ve brought to life some of the internet’s most ground-breaking integrated digital campaigns, often used as benchmarks in the ever-evolving advertising industry. **Introduction** We are on the hunt for an experienced Python developer to join the Toaster team full-time and work on exciting web projects that push the boundaries of what's possible online. This role also involves working closely with clients and other team members, along with prototyping mobile first web experiences using Django / App Engine and HTML / Javascript. You’ll also explore the latest technologies to produce innovative interactive prototypes and gaming experiences for Google Creative Lab and other clients. The ideal candidate will be hungry to learn about new technology and enjoy the opportunity to work across the full stack, while sharing their considerable backend experience and knowledge with the rest of our talented development team. A large portion of the technologies, languages and frameworks we use everyday include Django, Python, Google App Engine, Google Cloud Compute, as well as client-side libraries such as Polymer, Angular, Three.js and the Closure Library. We have an awesome crew of in-house developers and this versatile role can adapt to suit on your individual profile. However we also expect you to help lead the technical team, ensuring we continue to deliver world-class code on complex projects for our clients and their huge audiences. Leading from the front, you’ll not only give direction but be expected to get your hands dirty and help with coding on a regular basis. You will work closely with other department leads in production, design and creative to ensure our projects are delivered to the highest standard and on time. An inspiring leader, you will be a keen mentor for the team and help them grow in their career paths. Plus your technical input will be key in client meetings, creative sessions and code reviews. Above all we really value creativity and the ability to find unique solutions to solve everyday problems. As we are a young company you will have the opportunity and freedom to shape the way we work. You can check out the full details here [Toaster](https://toaster.co/careers/london/senior-python-developer)
Is there a reason you're using homebrew for these? Don't get me wrong, it is an awesome tool I rely on often, but for Python, I think `pip` and/or conda is the way to go. On that note, is there a reason you can't just use Anaconda (or Canopy)? It installs most of the scientific stack for you out of the box and then the rest is easy with pip and/or conda (never sure when to use either). I have canopy on my work mac (we have a big license for the advanced version) and anaconda on all of my home macs. It works pretty well, though I only use 2.7 (for now. Once our work machines get 3, I'll switch)
You can interface via [Python-list](https://mail.python.org/mailman/listinfo/python-list) [Gmane](gmane.comp.python.general) or [Google groups](https://groups.google.com/forum/#!forum/comp.lang.python). I prefer gmane via Thunderbird as there are hunderds of different Python resources available in one place. Google groups isn't very popular as it's too easily spammed. I very much doubt that you'd want to filter anything, there's not that much traffic nowadays.
&gt; Yeah Python 3 was a mistake and it totally didn't fix stuff that was broken /s. Love it. Marks out of 10, 15, excellent :-)
corp-2-corp ?
&gt; CPython is good for quasi-interactive stuff. This is a weird and mostly wrong statement: * You can start &amp; stop python in about 0.05 seconds. * Imports do slow it down, a bit, but not as much as you describe normally: starting python and importing matplotlib only takes my thinkpad running ubuntu about 0.2 seconds. * And who needs a data visualization program to start in less than 0.2 seconds? * And how is 0.2 seconds "quasi-interactive"? Maybe for some utilities we need to run dozens of times a second, sure. But they're edge cases.
Thanks for sharing :)
You might have heard of MeeGo / Maemo / Moblin, which are its direct predecessors (built by Nokia and Intel).
In my opinion argparse is usually ugly. I use docopt. But I suppose that with argparse-autogen you can write it shorter.
I mean in general. Mutable defaults aren't easy to solve ainonundisirregardless of a frozen dict type.
Ubuntu Phone looks in its death throes, whereas Sailfish just scored a big deal with Sony. Considering the scarcity of Linux options in the mobile market, I prefer a live platform with some bits closed to a dead one that is completely open. Regardless, "we are targeting and supporting Python" is a very different stance from "well it's Linux, so it can run Python or whatever". I've learnt that lesson with Maemo, where you could build PyQt apps but they couldn't get in the Nokia store or use certain APIs. Note how Ubuntu scrubbed all references to Python from their phone docs: https://developer.ubuntu.com/api/apps/ This, to me, signals they don't care about Python in the slightest.
Nope, I'm an iOS developer, so I guess that shelters me a lot. The only other mobile OS's I'm familiar with are Ubuntu Touch and Android
I use miniconda to install scipy on TravisCI and Appveyor. You're right about the time though. Still, I also use VTK, so scipy is a minor worry at best. Until I can also replace the kdtree method, it doesn't matter. I do spoof VTK though, so the tests run faster.
Project: * Download a number of excel .csv files from URLs. * Consolidate the spreadsheets into 1. * Delete non relevant rows (redundant header and footer informational rows) * Perform a lookup vs a master table and pull in data from certain columns into the master table Status: Just going through some python learning material to get some basics down and the fundamentals to get started on this project. Using Automate The Boring Stuff as a guide as some of their chapters are right up the alley of this project. 
TextPad. I can format data so well in it. I also have a few syntax highlighters I wrote for it. It's also really fast and handles 2+ GB of data well. It's got a nice sidebar for accessing files too.
It sounds like you have a case of 'Multiple python versions installed' What's likely happening is you have a python version installed as part of your operating system, MacOS. Generally this is the python that runs when you just type 'python' into the shell. You also have a version of python installed via homebrew. IIRC, homebrew installs executables to /usr/local/bin so you've likely got another python version installed at /usr/local/bin/python or /usr/local/bin/python3 IF you installed the numpy/scipy scientific stack via homebrew, then they are installed only in a location such that your hombrew python installation can see them. If you run python from the shell and it runs your system python, then it will not see the packages that were installed to your homebrew python installaion. try the following in the shell which python which python3 This should tell you where the commands 'python' and 'python3' are located. My guess is that the first will point to the location of your system Python installation and the second may not give you anything. You can add an alias to you .bash_profile file so that the shell interprets your command 'python' as saying "I want to run python from this specific location" and it will automatically point to your homebrew installation. for example you would add this to your .bash_profile file: alias python='/usr/local/bin/python3' This is assuming you have python3 installed via homebrew and its executable is named python3 As for why your ipython command shows python3, in the backend your ipython executable is pointing to the python3 homebrew installation. So when you execute ipython in the shell, it is loading your homebrew python interpreter rather than your system python interpreter. If you have any more specific questions I'd be happy to help. However, I have to echo what others have said and suggest you use Anaconda or Pip to install your packages. These days you can simply 'pip install numpy' or 'pip install scipy' and it will 99/100 just work. In the old days it was hard to get numpy or scipy to install correctly because they rely heavily on c and fortran; but those issues have been addressed and they can now be installed very easily. I think you will find using the anaconda python distribution to be easier in the long run rather than using Homebrew. 
windows
I posted last week about my bug report deduplication application (http://www.bugdedupe.com) which we're building in Python (mostly Flask) with a lot of Keras/Tensorflow for the backend. We've gotten it to the point where we're looking for users to test, and each user we add breaks something new. So mostly working on bug fixes and testing. Adding lots of tests. Does anyone know how to do front end testing correctly? I'm still learning web dev, and struggling with how to test the site for free. 
That's cool. Have you thought at all about how you're going to build the AI?
neither actually, when I make a Bar plot I just use rectangles. 
&gt; a-in cancels, non-un cancels, dis-irr cancels, leaving regardless. Also, the above doesn't make sense: &gt; ainonundisirregardless cannot be split like you prescribe, you'd get something like a-in on-un dis-ir regardless You probably meant: a-in non-un dis-ir regardless Making it ainnonundisirregardless. Which is actually googleable, and gives on of your own posts: https://www.reddit.com/r/Overwatch/comments/4n4b0d/soldier_76_is_a_thoughtful_dad/d41et3d/
ah I already know whats wrong. You need to make a source (how could I over look that). But i dont think those work with Bar() and thats why I use rectangles. I just left home, but im back in an hour and I'll help you than!!
I like to rewatch some liked videos on youtube and sometimes they are got deleted and you got "this video was deleted" in your "Liked" playlist. Currently I have ifttt.com setup to save liked videos to spreadsheet, but it doesn't work with videos that were liked before and relike doesn't work. So I wrote script that reads videos from playlist and add info like title, description and link to same spreadsheet. Now if something is deleted at least I would know what I lost and can try to find it somewhere else.
Hey Dave, if i can give you a tip regarding sentiment analysis . Disregarding okcoin top trader sentiment analysis all together. I have 2.25 years of history from whalecalls and it very rarely backtested into anything useful. If you check my reddit history, ive outlined a conversation with Jack Liu, CSO of Okcoin and the tl;dr is they purposely misrepresent it by using expanding functions (ie long can be 1000%). 
There are certainly a lot of possible strategies when it comes to crawling. Yours is interesting, and it would deserve to be tested. Thanks for the suggestion. Now, personally, I used a centralized queue, as you suggested. But it wasn't randomized. I determined that it wasn't necessary, because after a few minutes, the URLs' domains are so diverse and sparse that it's not really needed. I don't claim that my strategy is better than yours; but it worked well for me. My point was more in the sense that once you implement a real distributed web crawler, things become much more complicated than downloading a list of URLs. And performance management and tweaking become even more important.
You actually didn't edit them, you swapped them out using monkey patching. The thing we are trying to defend against is something like this: import random def add_random_to_list(alist=list()): alist.append(random.random()) return alist print(add_random_to_list()) print(add_random_to_list()) This could produce something like: [0.5367474447103602] [0.5367474447103602, 0.6939417869176816] Which definitely isn't what you'd want. The programmer who used the mutable `alist` default didn't expect the list to persist across calls. Using an immutable value as a convention guards against this. How will your monkey patching example ever be an issue? You're not supposed to monkey patch, unless you have too. You're an adult, you may do it if you want. However, the monkey patcher knows full and well that he is playing with fire if he does. Using an immutable for defaults is to protect the software developer from himself. Again, we are trying to protect the defaults from changing within the function. Specifically by manipulating the argument variable. The fact that you can (ab)use the function object is irrelevant.
A few reasons that I see: * For fun, if you're into that sort of thing. And if your goal is to understand how a crawler works. * For profit, if you run a company depending on web data.
/r/learnpython
By blanket solution, I meant a way to prevent *any* modifications to the defaults rather than only frozen classes. This would probably break bad code that depends on them being mutable for bootleg global variables, though.
Noob q: I have pip, python 3.6 but cant get it to install anything for me using the standard pip install xyz command. Is there anything special I have to do to get,it,to work? Thanks a ton for all the help, i think i have enough to get it working when i get some time
You don't need to hand hold the programmers, however, give them the tools to play it safe. Btw, the second you start accessing private members like this `a.__defaults__` you know you're on your own. Also I didn't understand this: &gt; This would probably break bad code that depends on them being mutable for bootleg global variables, though. What is **this**? Break what code? What is a **bootleg** global variable? **edit**: Also, the true solution is to make python instantiate the defaults at call time, not when the function is defined at startup.
This -&gt; Making defaults immutable by default. `what code` -&gt; I don't know. But there's probably somebody who uses them for globals anyway. Bootleg -&gt; not real
Avoiding VBA.
&gt; This would probably break bad code that depends on them being mutable for bootleg global variables, though. I'm not advocating retrospectively making arbitrary arguments immutable. I'm advocating giving programmers the option to do it with primitive types and collections. Anyway. If someone did use the defaults as a sort of global variable. They deserve their code to break.
From the wiki page, it's influenced by `XAML, JSON, JavaScript, Qt`. Sure, the syntax looks a lot like JSON^(it's xml with sweeter sugar added). The point is excellent UI shouldn't be written using any markup language. It's difficult to visualize and bring out people's creative aspect. The point is to inform people with other options, so people don't jump on project like this and think this is how UI should be written. Because, NO it's NOT!
It gets an error pointing at "install". I feel like I'm missing something super obvious but all the instructions I look at seem to think it'll just magically work
Look into selenium and, if you don't want a browser popping up, phantomjs. 
[removed]
Ah OK, well it will definitely help if we know the error message :)
Nice small guide. I think it's good to get up and running!
Don't include code as screenshots, show actual code. There are plenty of ways to get syntax highlighting. If you use an image search engines won't be able to index it, people can't copy paste, the image hoster may be offline or slow, …
Try running CMD as an administrator. 
&gt; pip install xyz what error do you get? Same as `python -m pip install xyz`? 
Could anyone recommend an avenue to learning about why the performance is low in the beginning, but then increases so drastically after a few seconds?
This is a general property of tracing JITs. A tracing JIT learns about the behaviour of your program as it runs. Initially since there is no machine code and it needs to record steps taken it is slower than normal interpreter (CPython). As it warms up it has more and more machine code and while it doesnt stop tracing it already benefits from removing the interpreter overhead, inlining functions in the trace, escape analysis, removing allocations etc. At some point it is fully warmed up meaning that it doesn't find any more code to trace so the performance stays more or less constant. You can read from the graph that different servers have different warmup characteristic. Depends really on how they are coded in Python and how many hot loops are hit there.
Check this [gist](https://gist.github.com/hugs/830011)
 &gt;&gt;&gt; def decToHex(n): ... if n &gt;= 0 and n ... return n ... elif n == 10: ... return 'A' ... else: ... return 'Error' Understand what I gave you. Adjust code to your needs. Go to /r/learnpyhton Also, convention for python names is snake case, so name your function dec_to_hex()
Yeah, i feel the exact same way. The |&gt; operater made me learn Elixir last summer. I really hope |&gt; will make it from F# to C# one day.
http://click.pocoo.org/5/ is pretty neat for this kinda thing also 
I just installed 3.6 in a Windows 7 Pro VM and pip installs other packages fine for me. I installed it using the defaults, so Python installed to my user folder. You shouldn't need to run pip as administrator there.
&gt; even Apple all make a big deal of how much they "love open source" while remaining some of the biggest, most abusive vendors of closed source software out there. http://opensource.apple.com/ Just because some corporations prefer BSD over GPL licenses doesn't make them 'abusers of opensource'. Does that make [Jupiter Networks](http://www.juniper.net/us/en/) and [iXsystems](https://www.ixsystems.com/) also "abusive vendors" since they keep their profitable stuff close to heart?
&gt; In what way? Well, the common error you get with default values is: def example(default=[]): for i in range(3): default.append(i) return sum(default) example() # 3 example() # 6...huh? Replace the list with a tuple and.... def example(default=tuple()): for i in range(3): default.append(i) # you can't do this because it modifies default. return sum(default)
In my experience you need to set this up on both. Definitely need the environment variables on windows. [This](https://docs.python.org/2/using/windows.html) guide is quite helpful! 
my scenario is that the number of rows requiring skipping varies for different files
Thank you so much, this really helped me! Cheers :)
Thanks for the explanation. Sounds like the tracing distinction is how it remembers code it has executed before?
NPM projects can be bundled, minified, and uglified super easily with webpack. If you are looking for an executable app, you can just install electron and build an executable with it in a single line. Yes it is a huge file but that's because Electron runs on chromium, which itself is huge in size. 
Thanks for the tip. That link always eluded me for some reason
It'll just be a bunch of None.
Just run it, it prints the numbers. How is this a question?
it works in python3, and python2 with the function import from __future__, but yes it also returns [None,None,None,None] but still meets my needs 
Does anyone have testing for all of the different ways to install a package? With pip and setuptools, pip without setuptools, no pip and setup.py install, etc, etc 
Or better yet 2.7 ;)
can you read the row in the dataframe use that position as an indexer? Assuming of course you know what the header information is on the files?
The question isn't about if it works, because obviously it does. The question is should you do it this way, is there a name for this method and is there a more pythonic way of doing it.
How is this better than simply for x in a: print(x) you are wasting a list of `None`s in the end. Imagine a has 1000 elements. 
or JITs in general :-) It's not like JVM is well known to immediately jump up to speed
So here's what I've done, I downloaded ChromeOS from https://neverware.zendesk.com/hc/en-us and put it in a VirtualBox. Next I install crouton. After I got that up and running I install xiwi, https://github.com/dnschneid/crouton/wiki/crouton-in-a-Chromium-OS-window-(xiwi) Now I'm able to run Linux in a browser tab. I installed SublimeText3, created a simple html test file. Opened it in a new window. Created a simply Python script, ran it. AWESOME! 
Thank you. This is exactly what I was looking for
I am actually collecting a [mind map of all my favourite blogs](https://my.mindnode.com/Lr33AxQg1yTrPzYJrAbFD7E6Wr7cM6YyoUfXaEzp). It's part of a [bigger mind map](https://github.com/nikitavoloboev/research) I am making. :)
try it on Medium; you'll be frustrated.
&gt; Improve Your Python Skills • Hey, I’m Dan Bader and I help Python developers take their coding skills and productivity to the next level. I’m an independent software engineer, author, and speaker. I’ve been developing software for 15 years—and I’d love to help you become a more proficient Python coder. &gt; My YouTube channel has a ton of free Python screencasts and I update it weekly. I try to keep these videos bite-sized so you can fit them in with your day. Be sure to subscribe so you won’t miss the next video! &gt; Get more free Python tips and tutorials at https://dbader.org
Perfectly reasonable. You could probably use [existing classes](https://github.com/bear/python-twitter) for connecting to social media, too.
This is great news! Looking forward for PyPy's stable support for 3.5 and 3.6!
**edit** I was really tired when writing this. I didn't want to wait until this morning as I feel this is an important subject to understand. I've given a couple of examples in the thread below which may shed some light. At least I hope so. ---- Please don't add the dependency links to setup.py! Use requirements.txt for that! Adding it to setup.py pretty much "hardcodes" it and it makes it more difficult for an end-user to override it. `dependency_links` was marked as deprecated in 2014 (iirc). But there has been some discussion about this. I haven't used dependency_links for quite some time, so I'm not sure what the current situation is. It's safer to pass them as CLI arguments to pip. It's really late and I need to sleep... I'll see if I can write down an example case tomorrow if no-one else has chimed in by then!
Not sure about streaming/live data, but I've found the librosa package very helpful with audio analysis.
* pkg_resources an be used to access files which have been bundled in your package. Basically you never know the full path of the packages once they are installed. pkg_resources gives you a way to access those files. * You use `MANIFEST.in` to include any non `.py` files in your package. By default they are not bundled. For exampe `.html` files in a web-application.
Ahh fair enough :). It may, I installed on windows a few years ago!
Most native iOS and Android apps are not written in Python. Forget the app. You clearly have an impetus to build some tools which will help your daily work, so you may wish to skim [Automate the Boring Stuff](https://automatetheboringstuff.com/) and work through it. That should be more than enough to accomplish that goal. **If** you continue down the entrepreneur path, then your experience from learning how to automate things and basic programming/problem solving will be extraordinarily helpful, regardless of whether or not it's an app. An app isn't any different than any other type of program, and there's no reason why you have to learn special skills to achieve your entrepreneurial goal. Learn to code, then eventually build some sort of mock-up of the gist of your app. Even with a working proto-type in hand, if you can't attract developers, then that should speak for itself about the prospects of your idea.
Crap, don't waste your time with it.
In an ongoing tower defense game, got the real-time pathfinding and path-blocking checks on building completed. However, it still causes small lag spikes, so this week Im going to try offloading the pathfinding functions to a different thread to see how that works.
Is the app related to your current work? I was (I imagine) in a very similar situation to your's before learning Python. I had created a great forecast model in Excel, but it was an absolute nightmare to use. Each change required me to alter over 100 tabs. I then learned basic Python using "Automate the Boring Stuff" and then focused my learning. As someone who knew NOTHING about programming, my advice is to focus on what you want to do. For me it was to manipulate Excel files and create a version of my forecast that was much easier to use. If the app is unrelated, focus first on your day job tasks. Along the way you will get ideas for the app. Edit: Also, I Highly recommend that you do not tell your employer about your coding (or at least don't expect them to care). I turned an 8 hour job into a 5 minute job with my coding. My employer just accepted the newfound boost in productivity... otherwise I could've had an extra 7hours and 55 minutes of whatever time.
No reason, other than that was the only package manager I knew I had and didn't know pip was better. Also, no there's no reason I can't, other than that I didn't know about Anaconda lol. However, I feel like I'm installing too much stuff and wasting memory because I don't really know what I'm doing. how can I make sure I don't have multiple copies of python and the scipy stack, especially if I proceed with installing Anaconda?
Yeah my attack pattern will be to automate the boring stuff at work (ie. turn an 8 hour job into a 5-minute job) and then use my new found time to get smarter in certain areas of my job or put to use on my dream. I will essentially be using Python (in my mind) to write research reports and to automate downloading earnings releases and populating results into a model. Those are really the two big time sucks (mainly the first one) that takes up a ton of my time. Just can't quite visualize how I can program something to write everything I want it to--I'm assuming it can just put in very basic data points, but maybe I'm wrong. 
Note that PyPy already has support for fstrings from CPython 3.6 so you get Python 3.5 and extras.
Why should I use twine instead of `setup.py sdist bdist_wheel upload`? 
That's fantastic. I'm guessing that it doesn't translate very well to my workload of heavy io, lots of aggregations &amp; transformations in parallel. But, still...looks great!
You can just install miniconda and then do `conda install scipy`, which will get you all of the dependencies for scipy. However, as you start to use other things like Jupyter notebook, matplotlib, Spyder, etc., you'll end up installing a bunch of the other dependencies anyway. But there's no problem with installing miniconda and incrementally just getting what you need for the moment.
The point is that bribing a minimum-wage drone from a pizza shop is *cheaper*.
&gt; While in real life we know you can't just walk around a building if the door is unlock Actually, I'm pretty sure it's safe to assume a place of business is open if the door isn't locked, until told otherwise. At least, if there's precedent to the contrary, I'd expect to have heard of it by now.
Apparently some porn sites built from cheap templates rely on the HTTP referer for a paywall (or at least used to).
His conviction was ultimately overturned, without setting a precedent one way or the other.
Of course it is "valid", but why do that when `for x in a: print(x)` is not only better but shorter too?
I don't know what kind of IO you are doing there but pure TCP benchmarks also benefit from JIT. I mesaured 20-30% speedups on a TCP bench. About aggregations and transformations that's what JIT is generally good at - removing computation overhead. Your results of course depend on what and how you are doing it. Parallel is hard on Python unless you can fit it into separate processes. Feel free to jump on #pypy channel on freenode, describe your workload to get some ideas
This was just asked a few weeks ago. I can't find the thread, as I'm on mobile, but it should give you some good answers. https://www.reddit.com/r/Python/comments/5uvy9x/what_do_you_generally_need_to_learn_to_do_the/?st=IZRSM4F6&amp;sh=cf116caa Edit: added the link to the thread. 
You live in a field?
Sqlite3 is a Db for local file access or in memory data. It does not exposes network services such as MySQL, redis, Mongo and so. If you want to separate store from business logic then you can use any of the previous mentioned solutions or build some basic web services that exposes endpoints to run specifix queries. For that, you need to define a communication standard (xml, json, msgpack) and build the query inside the web service, execute it, and return the results. Hope that helps
PyPy is the only thing keeping me on 2.7. Really eager to see the new release.
I guess I should give some more color on this - I want to learn how to use Python to parse some raw data - number/letters Throw this data into an SQLite or something Then present this data into a new format - like a GUI or something
I work with some audio streamers, which have required a person every week to manually change their incoming audio stream. Did some work with the requests library and managed to automate the stream change by date. I want to continue to expand the work, to automate getting their status and perhaps use a Raspberry Pi, LCD, and some push buttons to create a simple interface at the front of an enclosure. 
Security. Twine won't send your username and password over the internet in plain text.
Python has a built-in library for downloading web pages (urllib2) but it's quite clunky to use. There's an add-on library called 'requests' which works much better. If you're on mac or linux you can also use curl or wget from the command line to download the file you're looking for. Look into "Automate the Boring Stuff with Python" chapter 11 for more information on web scraping. You can use another library called 'beautiful soup' to do even more fancy stuff, but I don't think you need that for this assignment. 
Agreed! Couldn't believe how difficult it was to load this data up in Python 3
That's only true depending on the version of Python you're using (&lt;2.7.9, &lt;3.2), so if you're using an older version of Python, yeah you're sending it over HTTP but modern ones don't. So that's not the real value add anymore. The real value add is that twine can upload precreated packages (wheels or eggs) and distutils doesn't. So you can package up your code, test that package, and then upload it if it satisfies your test criteria. But OP's post doesn't even mention that you need to install twine, let alone either of these. It feels more like a "I finally got something on pypi" than an actual guide. Which isn't bad, but it definitely needs polish.
the beautifulsoup example I was looking at was: from BeautifulSoup import BeautifulSoup soup = BeautifulSoup('&lt;textarea name="in"&gt;&lt;/textarea&gt;') soup.find('textarea', {'name': 'in'}).insert(0, 'value') assert str(soup) == '&lt;textarea name="classified_description"&gt;value&lt;/textarea&gt;'
Thank you for your input. Can you tell me what all(concept revision, topics etc) should I know in python beforehand. I will look into what you said. 
There's a difference between saying you have a dependency on a package (that's fine) and saying you have a dependency on this very specific instance of this package located right here (here being where ever you pointed the dependency link at). A dependency is `flask&gt;=0.10`, a dependency link is `git+git://github.com/pallets/flask/tarball/master#egg=flask` Which is vastly different. That says, look for the dependency *right here* rather than in the usual haunts (pip cache, pypi). I've not personally experimented with it so I won't speak with any authority, but I'd imagine it'd take precedent over an existing cached wheel.
Just use pip unless you know you don't need pip. pip comes with setuptools, so you'd be hard pressed to not have it installed and use pip.
That certainly gave me a handful of stuff to google-thanks!
[This one](https://gist.github.com/bkellerman/e1044ba6264f111e22f2144577e2c24a) provides a decent speedup.
Check out [trabBuild](https://github.com/Duroktar/trabBuild), it's a little script I made to automate a lot of this process. It's on [pip](https://pypi.python.org/pypi/trabBuild) as well. Although the examples aren't the best, I use it every day. I'm also working on another more robust solution which is almost ready to go, it's at this repo, [PyRelease](https://github.com/pyrelease/PyRelease), made in collaboration with the gentleman who wrote [this fine article](http://renesd.blogspot.ca/2017/02/python-packaging-zero-part-one.html). It's not exactly 1 to 1 with the features in the blog but it's functional atm, and it's got right sweet colors if ya run `pyrelease-cli`. Anyways, my apologies, good article, thanks for sharing :D
Never seen this, but it looks good. Can't hurt to at least begin it. I like the format of udemy in how it tracks your progress and has more of a lecture school vibe. That helps with motivation. My first experience with Python was learnpythonthehardway.org. If you're completely new I'd do this first. Then the Jose Portillo course on udemy. I think it cost me &gt;$10 and was well worth it. I have no problem paying people for their work. 
It's valid, but it defeats the purpose of a list comp (essentially it's map but a little nicer, and eager in Py3). If you find yourself needing to cause side effects as part of iteration, you can do this: # pip install forbiddenfruit import types import forbiddenfruit from collections.abc import Collection # will fail &lt;3.6 def foreach(it, f): "eagerly map a side effect causing function over a collection" for x in it: f(x) def iforeach(it, f): "lazily map a side effect causing function over a collection" for x in it: f(x) yield def _curse(victim): forbiddenfruit.curse(victim, 'foreach', foreach) forbiddenfruit.curse(victim, 'iforeach', iforeach) foreach( [list, tuple, Collection, type({}.keys()), type({}.values()), types.GeneratorType, range], _curse ) # clean up because we're good developers del foreach_prop del iforeach_prop del _curse And then you can do: range(1, 10).foreach(print)
`raw_input()` is giving you a string. Your `range()` is full of ints. This makes your `in` check fail. Also, /r/learnpython is a better place for this.
I think it would be very interesting to perform this kind of benchmark on PyPy and CPython. Can you show up on IRC and show me some 2.7 code and I'll try make it happen on 3.5?
Really, listen to this. Don't know if it's 'windows mindset' but don't throw the admin-axe at every problem.
Better place to post this is /r/learnpython So in order to make sure the user put in an integer, you could try to parse it using the `int` function. Take a look at the `try`/`except` clause to catch any non-integer input. Hope that makes sense!
/r/learnpython And do your own homework. 
Agreed. I never needed anything else but pip.
Thanks for this. I just wish I understood to package things for inhouse consumption in terms of best practice, so that users of my apps don't have to be python experts. It all seems so confusing.
&gt; Am I wasting my time trying to learn how to code? Definitely not. Coding helps you think about solving problems logically. &gt; Is codeacademy a shitty website to learn how to code? I never used it, but taking a look at its web page, and the fact that you can run it in a browser, doesn't sound shitty at all. HTML and CSS are for mark up. They are not programming languages. If you look at existing programs, in any programming language, it will be complicated and almost incomprehensible. However, that's not how we learn to code. Start simple, with python, ruby or even C/C++. They are all good programming languages; used everywhere from beginning a programming 101 class to production level applications like google search, twitter etc. You will need to understand how to break a problem and solve it in discrete steps. Optimization comes later. 
Im going to try and build a web page from scratch all from coding just to get the hang of it. Js doesnt sound to hard and I might main that as my primary coding.
Start with the docs: https://docs.python.org/3/howto/urllib2.html.
Man, that's some good stuff :). Thanks
Nah packages can be annoying on Windows. Especially things like Scipy that have dependencies outside of python. As a non-programmer it took me all day yesterday (outside of work meetings). Downloading packages from http://www.lfd.uci.edu/~gohlke/pythonlibs/ is what worked in the end. 
I agree. I believe the easiest in your case is to ship `requirements.txt` files, so all your users need to know is: pip install -r requirements.txt In theory you don't even need to ship anything else. The text-file should suffice. Inside that file you can specify the link of the repository. I've never needed to do this (at least not yet) so what I write here is informed guesswork which I pull out of the back of my head, you may need to verify this. I'm unfortunately smack in the middle of a release phase right now and am short on time, otherwise I'd look it up. I just used the time I get from running the integration tests to write this ;) In your case, you should be able to write a requirements file like this: --extra-index-url=https://path/to/your/repo my-lib==1.0, ... myapplication==1.0 There are some issues with "trusted" repos which I ran into in the past which was irritating to resolve. I hope it works for you right out of the box. You can get a quickstart for your requirements.txt file by running `pip freeze`. Just be careful to run this from a fresh environment which contains only the things you really need. During development, some development packages happen to creep into the env (pytest, coverage, ...). Your best bet to have something clean is to start from a fresh env, install only the stuff you need and run pip freeze on that. You may also want to keep an eye out for [pipfile](https://github.com/pypa/pipfile) which is a future replacement for `requirements.txt`.
I would suggest to upgrade the documentation links to point to the Python 3 version instead of the Python 2 version because Python 2 will be discontinued in 2020 (will not receive any updated after that).
&gt; You only need to use pkg_resources [...] for compressed packages. How do you find the filename then? Using `__file__` and going from there? I agree that this will work fine as well. &gt; You only need to use [...] MANIFEST.in for compressed packages. Please correct me if I'm wrong, but from my experience, that's not true! If I'm doing something wrong here, let me know :) Following is a bash script which creates a dummy package illustrating the case. The script builds a package which contains a non-python file (`hello.txt`). As you can see by both the wheel and sdist listing, without specifying it in `MANIFEST.in` it is not included. #!/bin/bash PYTHONWARNINGS= export PYTHONWARNINGS echo "&gt;&gt;&gt; Creating dummy package" mkdir mypkg touch mypkg/__init__.py cat &lt;&lt;EOF &gt; setup.py import sys from setuptools import setup setup( name="mypkg", version="1.0", packages=['mypkg'], include_package_data=True, ) EOF echo hello &gt; mypkg/hello.txt echo "&gt;&gt;&gt; Creating sdist and wheel" python setup.py sdist &amp;&gt;/dev/null python setup.py bdist_wheel --universal &amp;&gt;/dev/null echo "&gt;&gt;&gt; Contents of sdist:" tar tzvf dist/mypkg-1.0.tar.gz echo "&gt;&gt;&gt; Contents of wheel:" unzip -l dist/mypkg-1.0-py2.py3-none-any.whl echo "&gt;&gt;&gt; Cleaning up..." rm -rf build dist mypkg mypkg.egg-info setup.py 
Exactly. We do this with strings, tuples and frozensets, since they are immutable, but there is no frozendict other than mappingproxy, which to me is a cop out. It's a view of a mutable dict. You could create a frozendict by frozendict = type(type.__dict__) however, this feels like a hack.
Stage 1 (the noob): print(variable) everywhere Stage 2 (the corporate noob): log(variable) everywhere Stage 3 (the enlightened noob): import pdb; pdb.set_trace() Stage 4 (where I stand now): # Run unit test suite
I really should try to get to stage 4...
awesome! being syntax compatible with 3.6 where it's not a problem is a very very good thing. are type declarations for variables supported?
Very poor choice for a name http://doc.devpi.net/latest/
I like it, i also have to copy paste again and again the same configuration for logging. Do you consider adding support for colorlog? What I do on my package is to detect if colorlog can be imported, in this case I have a colored logs on my terminal, if not, no color on the terminal. This way there is no change on the logging code at all (and this can be all internally handled by "devpy.develop")
You can not go wrong by playing with [pytest](http://pythontesting.net/framework/pytest/pytest-introduction/) It does not get in your way, it does not mix with the code you write, it has a very straightforward learning curve: write a separate module containing functions starting with "test" and running cheap "assert" statements, and done. Automatic test discovery, testing by convention, clean output, etc. By the time your unit tests grow, you will be sold already, and you will then be ready to use more advanced features like pytest's fixtures.
urllib2 is built in, so that will work, but it's awkward to use. 
You can use multiprocessing to apply the model to elements of an array in parallel. Here's a good primer on how to do this easliy: http://chriskiehl.com/article/parallelism-in-one-line/
PEP 20: "cryptic is better than clear"
I've actually though of doing something like this for product research. Here's some tips. 1. CSV is easy - built in module works great. 2. I don't know about using Google and choosing the first link - google detects bots and might lock it out. If you find a site that works for your needs, you could use Scrapy to do what you're describing?
or loglikeyoudontcare ;)
Heh, cool trick! (reversed(x) is clearer and better but I really liked this little trick!)
But how do you use requirements.txt in setup.py?
Thanks for the test script I'm going to try it now. What I was thinking is specifying the files in `package_data` in `setup(`in `setup.py` 
That all makes sense, but I'm still missing how dependencies are resolved. Let's say I have three projects, A, B, and C, and project A depends on project B, and project B depends on project C. Are you suggesting that in project A, I put a an entry in my `requirements.txt` for project C? If so, that seems pretty inconvenient for users of project B. They have to add a line in their `requirements.txt` for project B itself, then go and look at the `requirements.txt` for project C and reconcile all of those as well. This also doesn't seem to have the benefit you mentioned where you don't need to update many projects in the event of a VCS change—I would still need to update the `requirements.txt` in both projects A and B. Maybe I'm misunderstanding your suggestion though.
The can doesn't justify the should.
So add this line to your script ```Python packages=['mypkg'], package_data = {'mypkg': ["hello.txt"]}, ``` It appears that `package_data` gets added to `MANIFEST` https://docs.python.org/2/distutils/setupscript.html#installing-package-data 
`pip` only requires `setuptools` to install from an `sdist` or `vcs` repo. It is is possible to install `pip` without `setuptools` and then you can install wheels. 
The minus is clear enough and the preferred way. `reversed` gives the overhead of iterating through a possibly indexable iterable, and the tilde is very intransparent.
Darnit, that should teach me to always check code snippits. You could use: [x for x in a if print(x)] (`print(x)` always returns None, so the list stays empty)
You can certainly just do the miniconda installation. That gives you acces to 'conda' the package manager for Anaconda. The installer will also setup your bash_profle so that when you type python into the terminal it will launch the Anaconda python distribution. Then anytime you encounter a package you need, you can just execute the command: conda install packagename for instance for machine learning you'll likely need: conda install numpy conda install scipy conda install pandas In the future if you want to edit your bash_profile (totally safe to do so) I would suggest the following: 1. Open a terminal window 2. Navigate to your home folder: cd ~/ 3. Make a backup of the current bash profile: cp .bash_profile .bash_profile.backup 4. Edit the .bash_profile file with a text editor (Its a hidden file so its easiest to do the editing with a command line text editor nano .bash_profile 5. Add a line to create a new alias alias python='/usr/local/bin/python3.5' 6. Save and exit the terminal editor. Then quit Terminal and open it again. Now you should be able to just type 'python' and it will launch python 3.5 from /usr/local/bin/
I really like overloading the bitwise operators to do useful math. For example, the ~ operator is the 'inverse operator'. Inverse is a nice word. In English, it's a noun. But the verb 'to invert' has real usefulness. If you've got an image, maybe you can 'invert the colours'. If it's a selection, 'invert the selection'. if you have a 3d model, turn it inside out (flip the textures). I really enjoy how the bitwise operators are implemented for sets in python and use it as inspiration for clear, concise API choices for objects that feel like sets. 
I don't get it. This is hard? import logging logging.error('oh noes') And it's a few lines if you want it to go to file, to log debug, etc. These are not the difficult problems requiring a library. But, if it floats your boat, whatever. Also, one of the great things of print() func over print statement is it's trivial to search/replace with log.debug(), when you need.
I guess you could do for i in range(len(foo)): print(foo[-i-1]) and then for i in range(len(foo)): print(foo[~i]) might seem better. But you should be doing for x in reversed(foo): print(x)
don't do that when x is unsigned though!
It's the kind of chicken-or-the-egg thing that would be fine if everyone knew about it, but since it's such an obscure trick, you can't use this without being a dick.
To be fair, it comes up in other languages too, people just say "idiomatic" instead of "#{language}ic".
i'm trying to break a rijndael's encrypted data that was made with visual basic and .net pdt: doesn't work yet...
Clojure is pretty big on this. And Go (as I understand it) has a linter built into the compiler which will literally refuse to compile your code if it finds an error.
&gt; once you know what it does
What are you launching after installation ? 
That's good. I use [Flake8](http://flake8.pycqa.org/en/latest/) in a similar fashion on all my production Python code.
Oh god...don't use Python 2.6 ever and don't try to learn/fix unicode without Python 3.4+. Once you understand unicode, feel free to go back to python 2.7, but don't learn/fix unicode there. There is a difference because Python 2.x goes through multiple layers of flipping bytes to unicode and back and back between sting concatenation, print, and standard out. It's unfixable.
 for item in my_list: print(item) if "hello world" in my_favorite_phrases: print("You are probably a programmer") This is virtually psuedocode. I'd argue that many non-programmers will get the gist of what that code should do, even if it seems a little robotic. And programmers from other languages who don't know Python will probably understand immediately.
You have to vectorize your numpy or pandas code or it will be slower than if you skipped numpy. Rewrite your code, but don't use for loops or if statements. For example, It's much faster to divide all vectors by their length and then handle NaNs by setting them to 0 then to deal with them one at a time. Start at the inner loop. You have a really obvious j==0 case. Get it out of the range loop. Then use arange to act as the j variable. 
https://blogs.msdn.microsoft.com/oldnewthing/20150525-00/?p=45044
&gt; readable (once you know what it does) Having been burned by it once before (I kept reading it as - instead of ~ as they looked very similar in the environment I was using, wasted a ton of time) I'm on the fence with this one.
Lists "this is an import", but doesn't explain what a kerfas plot is or import it.
`reversed` does not walk the iterable if it's indexable and has a known length though. Read up on [PEP 322](https://www.python.org/dev/peps/pep-0322/) which is where `reversed` comes from.
This one has a nice, cryptic name.
I may be wrong, but I think it can be external or internal content. They do have a plotly package in python. [Docs](https://plot.ly/matplotlib/getting-started/)
Right, but the "inverse" of a number x is 1/x, not -x-1. Also, the inverse of a function us an obscenely complicated topic, depending on the function. So using a dedicated operator for it doesn't necessarily seem wise.
Doesn't that copy the list in reverse?
But then len() and indexing wouldn't work either, at least not without quite a bit of misdirected foolish brilliance.
By that logic everything that isn't 100% self-explanatory is cryptic. Better never do a list slice or any other than the 4 basic arithmetic operators. Heck, most of the standard library would be completely unusable since you have to read the documentation to know what it does.
That's something completely different…
Of course, but in my experience if you've gotten to the point where you're comfortable with (i)pdb, then you probably don't need to be told how valuable unit tests are.
How is this different from scrapy?
 import this
reverse the list and index it forward :\^)
Python runs in command line. So after you have installed it you should be able to type "python " Into the command line (command prompt or whatever you use) to open a Python session. You can run scripts by "python script.py" (where script.py is your script file name)
Girlfriend wrote a poem in Python where the source code and the output were both part of the poem. She workshopped it with her poetry class full of English majors and she said they had a couple questions but everyone got the jist of it and understood the poem as a whole. 
Not just if it finds an error, it won't compile if you have an unused import, for example. you might have meant an error, as in the linter finding something it didn't like. in which case, carry on.
You mean PEP8, I presume? I stick pretty close, except I'm a big fan of tabs. It makes reading other peoples code a lot more fluid when you all use the same conventions. Although the only thing that really bothers me is beginners using CamelCase for everything. 
I understand that. The primary benefit of this lib is you can get an easy way to update JSON file. I will soon be adding another method `.persist` which will do the job of persisting to the file. Untill that method is called everything will be in memory. The current implementation of library works well when you have to save something in cache in an application that has lots of network call. That was my use case. Since this is a library, it can be tweaked to accomodate all usecases.
Funny you mention the 4 basic arithmetic operators as an example of "acceptable" and presumably self-explanatory, because you did have to go to school to learn what the symbols `1+1` meant. It is certainly not self-explanatory. The distinction here regards what concepts to allow yourself to use, and you have to make reasonable choices in doing so. An array is a sequence of items indexed by position (ie counting), and we should assume that everyone who works with an array knows how to count and that they should understand the natural numbers. They should understand that `foo[x+y]` just means "count x, then count y then get that item" and assume they know how to add, because otherwise we have to teach them to count. We also have this useful (but certainly not self-evident) technique of indexing into arrays with negative numbers: `foo[-1]`. To a C programmer that is just an error, but its really just sugar around `foo[len(foo)-1]` and its very convenient so we made an exception. Nothing in the expression `foo[x-y]` that requires that they understand two complements or the way in which binary computers implement arithmetic. It is sufficient that computers do implement arithmetic, the how is irrelevant. Additionally nothing in the expression `foo[x-y]` requires knowledge of how computers implement arrays. Again it is sufficient that they do. The reader doesn't have to know about pointers or ram, he doesn't have to know about linked lists vs arrays, or any of that stuff. However `foo[~x]` does require an understanding of two complements[1]. That is why it is bad. Its pulling in domain specific knowledge beyond what is expected to work with arrays. That is the problem. You might as well advocate for writing`foo[int(math.pi*100)%10]`. [1] To add insult to injury the python unary complement is a rather strange beast as python ints aren't fixed width. Its not a real bitwise complement, its an abstract one. `~(2&lt;&lt;1024)` is a perfectly valid expression in python. It is as if python were implemented on a machine which had a infinitely many bits to represent the integer value. However on such a machine the twos complement representation doesn't even make sense. Why should -1 not just be "...00000001;0" (where the LSB is used as a sign bit)? Why would you implement it as "....ffffff"? Someone with a theoretical understanding of twos complements and exposure to the positive integers in python would conclude that `~1` would immediately cause the program to go OOM and crash.
This is definitely my main rule that I break too. If it looks better to me to space or split lines in a different way, I do it.
Wow. great offer!
 But_Im_Always_Told_To_Use_Descriptive_Variable_Names
No it doesn't, because if what you want to do is modify a default arg sometimes, but not have the change persist, this doesn't help you. It just means you can optionally opt in to not being able to do what you want. That is, at the point that you are aware enough to say def ex(default=ImmutableDict({1:2})): # wait I can't do what I want here because this is immutable You also already know the idiom def ex(default=None): if default = None: default = {1:2} for k, v in zip(range(5), range(5,10)): default[k] = v The point is to allow safe modification of defaults. The immutables don't do that, they disallow modification of defaults, a very different thing.
This program is like the Perl script `pdfcrop` but with many more options. I wrote it a couple of years ago and put it up on GitHub. I had been putting off putting it on PyPI because the package includes a Windows binary to use as a fallback for systems without Ghostscript or pdftoppm. To get the data to be distributed with the program at a fixed path location I ended up making the data directories subpackages of the main package (with `__init__.py` files) and then using the `package_data`keyword in `setup.py`.
I don't see anything in your code that would cause that. You shouldn't even need to truncate the StringIO since you create a new object with every run. I suggest you check your `teams.main` method to see if it's caching data somewhere. Also, why are you bothering with StringIO() at all? Why don't you just write directly to the file? @app.route('/&lt;solutions&gt;', methods=['GET']) def getTeams(solutions=1): old_stdout = sys.stdout with open("tmp.txt", "w") as f: sys.stdout = f teams.main(int(solutions)) sys.stdout = old_stdout return send_file("tmp.txt") If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. Edit: in fact, the fact that you have the `Starting backtracker... Printing 1 solutions...` header only once in the second example strongly suggests that the problem is elsewhere. If the file buffer was not cleared, you would have the header twice too. 
The only reason there's a million ways to do something in Javascript is because they constantly make new frameworks and build pipelines. They seem to have this belief that they need job security (they do) so they make everything so friggen complicated.
But `~` doesn't mean inverse (or well, it does in general but not for integers specifically). For integers it means bitwise inverse. So if you need to understand what does `a[~i]` mean you need to recall what `~` means in the first place (since it isn't used all that often) and you need to realize what exactly does bitwise inverse of a number mean. It may seem obvious to you if you are an experienced programmer but if a novice programmer encountered something like `a[~i]` he would certainly be confused. What is more, he would likely learn that operator `~` reverses indexes of a list and would by confused if he encountered the operator elsewhere.
Ah yeah, good point, the word "inverse" by itself is just not specific enough.
&gt; You can But you shouldn't.
&gt; The point is to allow safe modification of defaults. Sure if you can get the python guys to do that. However, I doubt it. In the meanwhile immutable types will make the programmer aware that he needs to make a mutable copy in order to use the data in an immutable default. The IDE will handle the warning about having mutable defaults in the first place, making the programmer change them to immutable ones. Then when he runs his code and gets a run-time error because he has tried to change an immutable object, he goes back and fixes his problem. This solves the issue of him being caught in the gotcha scenario. Again: * IDE warns programmer that he has mutable defaults. * Programmer changes to immutable defaults. * Program fails. * Programmer makes mutable copy of immutable default. * Programmer never ends up in the gotcha scenario. Ultimately, as I said before, having the defaults set at call-time is best. But we don't have this. In the meantime using immutable defaults prevents code to go live with the gotcha scenario.
Yeah imo this is super hacky. I'm sitting here thinking about bitwise operations thinking "does flipping the bits really count backwards?" all confused. Basically the definition of a hack. Take 1 in binary 0000 0001 Then -1 1000 0001 Since in a signed in the first element is positive or negative generally. So, I don't see how flipping all the bits would count backwards. Bah. I don't even care. OP Please don't use this **edit**: OK so to understand this you need to know 2's compliment. Please do not use this OP
Its the 2's complement representation for negative numbers. Its known to computer science students, but good to avoid in code, because its a needlessly technical solution for a problem that has an very simple and straight forward existing solution.
Slices always create copies.
How can font selection in an editor enhance python?
-1 actually isn't 1000 0001 in the most used standard for integer numbers. You are probably thinking that the first bit is the sign of a number but this has several problems (for example you have both 0 and -0). Usually modern computers use what is called "two's complement". This format encodes number -n as n+1 with bits flipped. (The +1 is exactly to avoid having two zeros.) So -1 = ~(-1+1) = ~0 = 1111 1111.
Are you not seeing [these entries](http://i.imgur.com/SpwkgFw.png) somewhere in your start menu? Idle will open the default programming environment that comes with Python, and the other one is the command line console prompt, and we have the documentation. Any of these should open just fine after installing. (the screenshot is from my Windows 7 box so it will be different under windows 10 but you should be able to find the entries I presume....)
Comment on a fairly complicated stack overflow answer (by a person who didn't know about python) http://stackoverflow.com/a/19871456/3312882 &gt; Although I appreciate the effort here, my eyes hurt when I stare at those pseudo-codes. and the response by the author of the answer... &gt; I'm not sure what you mean. My answer doesn't have pseudo code; it has Python.
font's have various quirks for readability as opposed to code: `'" `'" -~_ -~_ 1l|LI 1l|LI I don't know how the parent could confuse a ~ with a - but I assume it must be font related.
Excellent point about python hiding the implementation of lists and numbers from the users.
Ohh neat! TIL So it's basically binary but backwards. So to count from -1 to -MAX_INT you're basically counting down from MAX_INT but with the 1 in front of the binary instead of a 0. For other people like me, this site helped: http://www.binaryconvert.com/convert_signed_int.html Just click the squares at the bottom to set bits and see what negative numbers you get
Beautiful.
I bet you like Rube Goldberg machines... I love them too. The point is that they solve simple problems, that already have a simple solution, in a more complicated way. I think the idea with Python is that it adopts the simplest way of solving things, instead of asking the user to build a rube goldberg machine, while giving them enough freedom that they are able to build one, if they so desire. Hence, I respect the idea about being able to index into lists in this novel way... but I also know that this should not make its way into mainstream software. Its going to confuse people who have not been trained in computer science (or bit manipulation, 2's complement and hardware implementation of positive and negative numbers, and Python's own way of handling numbers). This obviously does not mean that python does not have complicated things... it very much does have complicated things, but that's usually because there is no simpler way to solve those issues. If you can find a way to solve something in a simpler way (more intuitive - which means a user's existing knowledge is enough to understand it), that is something worthy of a PEP.
TIL you can use [-i-1]. I didn't realize you could do it with lists, but I use ~ pretty frequently with numpy.
I can see all that but unfortunately nothing happens when I click on it! thanks
The point of `a[~i]` at least in numpy is to get the opposite of `i`. For `a` of length 6, `iall=[0, 1, 2, 3, 4, 5]`. If `i=[0, 3, 4]`, then `~i = [1, 2, 5]`.
I already tried that but it doesn't change anything... When I launch Python I get this message 'Fatal Python error: Py_Initialize: unable to load the file system codec ModuleNotFoundError: No module named 'encodings'.
80 character limit? No way, not for internal projects as everyone has at last 2560x1440 monitors or even 4k. I use PyCharm and set that up to adhere to PEP but I certainly would follow 80-char limits if contributing to pubic repos.
Agreed, that is a good idea. I didn't understand the first time I read it but I didn't even think to write stdOUT directly to a file. Def better... It seems that It must be persisting somewhere in there. The header isn't printing more than once too so idk... http://pastebin.com/sygK3iPW That is the teams.py file. I didnt include the objects because I think they shouldn't matter. I can't see where this could possibly be persisting. I appreciate your reply. EDIT: Just as you said that I saw that I have a list that isn't cleared after each run. I found and fixed it. I forgot why I made the solutionPool[] global but oh well. 
&gt; I am also not writing directly to a file because I want to be able to run teams.main() stand alone and have it print to a terminal... my code does that ... It redirects stdout directly to a file rather than to a StringIO and then to a file. Your problem is pretty obvious: you never clear out "solutionPool" for the next run. Add this after line 60: solutionPool = [] You really should rethink this to get rid of the globals all together. 
Foo should implement `__reversed__()` to operate efficiently. That's done by most of the builtin types.
Has anyone developed production implementations using sanic(or something like it)? I see a lot of chatter about these frameworks, but I haven't seen much feedback about their practical usage.
I had to do this. I read the first few lines of the file and counted the lines (n) until the data started. Then used pd.read_csv(f, skiprows=n). See _count_headers() and read_csv() in this file: https://github.com/blokeley/forcelib/blob/master/forcelib/forcelib.py
That's all well and good if your deployment pattern is to load the codebase in a directory and do install using pip. But take a look at sentry, and how it allows you to ```pip install sentry``` and then get command line wrapper to run sentry, with all settings coming from the environment. At this point, setup.py is the canonical way to install your app, and dependency_links work as expected. You can even toss ```-e .``` in a requirements.txt so in development you can still use pip. I think the bigger issue here is one that Python still needs to figure out. Dependency graphs and versioning. For example, using only requirements.txt a project I was working on recently was able to install a version of Django REST Framework and a version of djangorestframework_gis that were listed as incompatible in their setup.py files. Converting to using setup.py, the project threw an error that the gis package needed version &lt;=3.3 of DRF, though we had upgraded to 3.4. The solution was to upgrade gis to &gt;=0.11,&lt;0.12 This is waaaaay saner than hardcoding very specific versions of libraries in your app.
Looks ok at a glance, but overriding sys.stdout is really hacky. How about returning the data and printing it if needed? if __name__ == "__main__": solutionCount = int(input("Enter the number of desired solutions:")) print(main(solutionCount)) or saving it if needed: def getTeams(solutions=1): with open("tmp.txt", "w") as f: f.write(teams.main(int(solutions))) return send_file("tmp.txt")
Problem being that you then kill type inference, and the help and warnings it entail: http://i.imgur.com/MGpfPff.png Look. I'm a pragmatic guy. I'm not getting paid to go about changing the IDE vendor's software or the python programming language every time I find a corner cases like this. Using immutable defaults guards against the gotcha and keeps type inference with all the benefits it provides.
yeah, that's probably the best approach. Thanks bud 
Sorry :( That has been sorted out now. Can login &amp; use now.
Our pleasure to the wellness of the community
&gt; PEP 20: Explicit is better than implicit. :D
Ayyy
This post may be of assistance, I hope it is helpful. http://electronics.stackexchange.com/questions/12407/what-is-the-relation-between-fft-length-and-frequency-resolution
I started off, still with Automate the Boring Stuff with Python by Al Sweigart.
Python QOTW.
Well, that was easy. Thanks!
I don't mean everything but the widely abundant problems of this kind
Ok, that worked the first time when I clicked on it to test, but now its just opening a kernel/cmd window whatever it is, that spams the 2 lines in it :\ EDIT : Fixed, do not name it Jupyter. lol.
Ugh, I hate dealing with libraries where they feel the need to slap a gigantic license on every. single. file.
In the license itself it says it needs to be included in each file. It's usually a summary that references a larger `LICENSE` elsewhere. I put my header block in `&gt;&gt; .. &lt;&lt;` for easy Find -&gt; Delete.
This kind of gets at why using `~x` for `-x-1` is questionable. It's just an artifact of how we represent numbers in computers (2's complement); if we used a different representation, it would be a different equation. `(1&lt;&lt;5) | (1&lt;&lt;3)` and `2**5 + 2**3` are equivalent, but one is better for manipulating bits and the other is better for doing arithmetic. The one case where I use bitwise stuff for arithmetic is e.g. `x &amp; 255` instead of `x % 256`.
Yes I grow Astrophysics
One of the reasons I love Python over other languages is its overall renounce of special characters as syntactic sugar. The more special characters you use, the more you look like some Perl abomination: very powerful if you know perfectly what they all do, absolutely unreadable for anyone who doesn't. Most Python code does not use nor needs special characters. ~1 can be faster to write than a proper list comprehension, `sorted()` or `range()` call, but it's much less readable - there is a reason you had never seen it before. Please don't use these silly (and hard to get right) shortcuts, think of the people who will have to read your code five years down the line. In some cases, that might even be yourself.
Oh jesus that's horrific.
[**NOPE**](http://i.imgur.com/2w591.gif).&amp;nbsp; Wayyy too opinionated and assumes that Python/PEP8 is "the way".&amp;nbsp; The way it's written comes of as a rant (*it has a "pet peeves" section... wtf?!*), which clearly pervades into the many cases where I've seen *Pythonistas* ignore the actual source of error in a help request and instead point out petty stylistic preferences. &amp;nbsp; There are definitely some good guidelines in PEP8, but I much prefer language-agnostic, non-opinionated sources of style guidelines such as [**Code Complete**](https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) &amp; [**Clean Code**](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). &amp;nbsp; Also, some of the guidelines are outdated (*spaces VS tabs, max line length, etc.*) due to improvements in technology (*tooling, editors, aspect ratios getting wider, etc.*). &amp;nbsp; Consider this example from [**HowDoI**](https://github.com/gleitz/howdoi/blob/master/howdoi/howdoi.py), which is listed as a prime example of "pythonic" development in [**The Hitchhiker's Guide to Python: Best Practices for Development**](https://www.amazon.com/Hitchhikers-Guide-Python-Practices-Development/dp/1491933178) def get_parser(): parser = argparse.ArgumentParser(description='instant coding answers via the command line') parser.add_argument('query', metavar='QUERY', type=str, nargs='*', help='the question to answer') parser.add_argument('-p', '--pos', help='select answer in specified position (default: 1)', default=1, type=int) parser.add_argument('-a', '--all', help='display the full text of the answer', action='store_true') parser.add_argument('-l', '--link', help='display only the answer link', action='store_true') parser.add_argument('-c', '--color', help='enable colorized output', action='store_true') parser.add_argument('-n', '--num-answers', help='number of answers to return', default=1, type=int) parser.add_argument('-C', '--clear-cache', help='clear the cache', action='store_true') parser.add_argument('-v', '--version', help='displays the current version of howdoi', action='store_true') return parser ### VS def get_parser(): parser = argparse.ArgumentParser(description='instant coding answers via the command line') parser.add_argument('query', metavar='QUERY', type=str, nargs='*', help='the question to answer') parser.add_argument('-a', '--all', help='display the full text of the answer', action='store_true') parser.add_argument('-l', '--link', help='display only the answer link', action='store_true') parser.add_argument('-c', '--color', help='enable colorized output', action='store_true') parser.add_argument('-C', '--clear-cache', help='clear the cache', action='store_true') parser.add_argument('-v', '--version', help='displays the current version of howdoi', action='store_true') parser.add_argument('-p', '--pos', help='select answer in specified position (default: 1)', default=1, type=int) parser.add_argument('-n', '--num-answers', help='number of answers to return', default=1, type=int) return parser &amp;nbsp; I'd, without question, rather read/write/maintain the second example (*literally takes like 3 seconds to clean up*, [***AlignTab***](https://packagecontrol.io/packages/AlignTab) *+ RegEx ftw*), but that code is definitely sure to give any strict adherent PEP8 an instant fit of projectile vomiting. &amp;nbsp; (*btw, not saying* `HowDoI` *is bad code, just that the formatting imposed by PEP8 is wack*) &amp;nbsp; `/rant against the rantyness of PEP8`
Not even a warning of some sort like missing shortcut? Seems your install is borked. What installer did you download exactly? I've never had any issues with the official installers from www.python.org
That worked! But... PyCharm won't let me manually enter that for the integrated Python Console. Any ideas how I might fix this problem in PyCharm?
 import numpy x = numpy.uint32(12345)
import fuckit.logging as log
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
srs tho... contextual grouping is an actual, effective advantage; yet it's dismissed by some arbitrary standard
No, That's left for 3.6, afaik there will be no more extras in 3.5 because if they keep adding things then they would need to probably implement whole 3.6. Reaching full 3.5 compatibility is an important milestone, fstrings are just a cherry on the top.
Definitely not _class_y enough.
So she'll share it with her poetry class, but not a million strangers on reddit? Psh /s
Yeah... I used to enjoy C# but at this point I think I've changed my mind. When you need a table with "syntax", "meaning", and "mnemonic" columns to explain two operators, you should probably start questioning some life choices.
I don't know how many options you're looking at, but the easiest approach is simply to try all possible combinations. It may take a little time, or it may take literally years to evaluate all of them. If you need to cut down calculations, there are a million optimization algorithms, but I can't recommend anything without better understanding your calculation. SciPy's optimize module is the usual place to start. Can you share the code for calculating `expected_points`?
Please tell me you didn't seriously believe that... **P.S.:** [*It's a joke...*](https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034/)
For web pages or API endpoints that directly give you the data in a parsable format, something like requests is a better choice. For stuff that does a lot of JavaScript rendering and many web calls to actually fetch and display the data, it may be easier to just use selenium and let the browser render stuff for you. Selenium really started and is purposed for UI functional testing. It just has the added benefit of being useful for web scraping :)
Dare accepted! from types import MappingProxyType as frozendict def foo(bar=frozendict({'a': 'A'})): print(bar) import gc underlying_dict = gc.get_referents(bar)[0] underlying_dict['a'] = 'lololol' foo() foo() ... $ python3 test.py {'a': 'A'} {'a': 'lololol'} Below you said "read only is to be taken quite literally", but I mean, the CPython process has write access to its own memory. Even if the garbage collector didn't have the reference to the original dictionary, you'd still be able to read memory, follow pointers to where the data is and change it. You'd have to go a lot further to make it truly read-only!
Not trying to be a dick, just sharing my two cents: I agree with /u/pohmelie, this doesn't seem to have any benefit. With anything I read during my program, I can just use `json.dump` and `json.load`. In fact, in examining your source code, that's really all your library is doing. If you already have a dictionary or dictionaries in memory, why use this when I can just do my_dict[key]=new_val json.dump(my_dict, myfile) or even better, assuming this cache doesn't need to be human readable, you may use `pickle` to store and retrieve information from files in a more compact way. Sometimes it seems like a good idea to build a new library or utility to accomplish things, but in the design of such utilities, it should be asked what value over existing library tools (or at least the standard library) does it add? In this particular scenario, it seems like this library is just using 3 files and a few scores of lines of code to do what could be done in a handful of lines of code using built in libraries. 
Cool yeah, I definitely agree! One thing you may want to keep an eye out for though is the XHR requests in the Network section of chrome dev tools. Sometimes you can find an endpoint that's hit via ajax returning a JSON object full of all the data you want to scrape, in which case you won't need selenium. I understand that's not always the case though.
Yes definitely a good point! I'm no stranger to web scraping and consequently crawling through dev tools to find api urls I can hit directly :D Though sometimes its faster to slap together a selenium scraper than digging through hundreds of network requests to find the API you're looking for(and any prerequisite API calls you have to make to get stuff like auth tokens or whatnot) 
That's not true. It sets your default encoding.
Which one? 8? That's far too vague. It also says follow the code around it.
No it does not. All it does is specify the encoding of the source file, and under Python 3 that is assumed to be UTF-8 if not specified. It does *absolutely nothing*. 
Part of the problem is that it's not entirely clear how the GSM/GPS module signals you that there's a message waiting. Let's assume that the module does its signaling by writing text to the serial port. In that case, you want to open the TTY read-write instead of write-only, and then use the ```select``` module to wait for the TTY to have something available to read. Once you know that there's data to read from the module, it should be a simple matter to read and parse that data, write responses, etc. 
Any version. See PEP-3120. 
Working on a ddos detector for a class project, pretty much reading through a log file of 1000 or so lines , using regex to extract date (source ips, ports...) and then using elastic search to look up repetitive ports being hit by different ips. Still trying to figure out what GUI to use for a nice front end user experience, any suggestions ? 
Ruby.
Decorators. I constantly write a memoizing decorator and a tracing decorator.
I've been playing around with it but the reason I'm asking is to find out the way I'm 'meant' to do it which doesn't rely on Python objects which will slow it down.
&gt; OK so to understand this you need to know 2's compliment. You need to know 2's complement, period. It's the way computers store negative numbers.
What about just using the help() function directly, instead of the "?" shortcut?
Python 2.6.5 was released March 18th, 2010. It's really old. Many security holes and bug fixes have been made (e.g., the struct module went through a major revision in Python 2.7.6). Python 2.6 support for the vast majority of packages was dropped a long time ago, making it hard to do anything useful. Python 2.7 also introduced many new features to bring it more in line with Python 3.x including dictionary and set literals, ordered dicts, and context managers. You may not use those, but many packages do. The examples you see teach those features because they're great. That's on top of the unicode issue. I use Python 2.7.12; it's fine because I rarely use unicode, but I also know how to write Python 3.x compatible code. Unicode is incredibly frustrating to learn in Python 2.x. It's tough and took me, someone who had known Python 2.x for 8 years at that point, a month on and off to learn and that's with Python 3. Some of the oddities in Python 2.x, like not actually being able to see what the data actually is because it's flipping type on you is terrible. Again, it's fine if you did it right or have some idea how to. Most people don't.
I can't wait for his book. Stumbling upon pandas was literally one of the best things I ever did for work. It completely changed my career path and what I like doing. 
Best use Pandas. Would be more efficient than anything you'd write at the moment. 
Agreed. Whenever I have to "register" functions in some list, I prefer to add a simple decorator there. 
Why? It's much more elegant to iterate over values when possible.
Thank you for that explanation!
There really should be a section in the readme that compares it to all the other libraries that do the same thing. 
Aye I should really write more of them. Out of curiosity, is there a reason you don't use the functools lru cache for memoization? Also, could you elaborate more on your tracing decorator?
The illusion of choice has already been debunked... choices are only good when you have only few with distinctions between the choices which are clear and well understood. Too many choices which have very little differences cripple our ability to make decisions and we waste too much of our time in debating extremely minor points of difference. This phenomenon not only happens in js library world but even in grocery stores.
Mostly because I often need to use Python 2.7 ^(and I like it more okay) and lru_cache is not in 2.7. Tracing decorator is like: def trace(f): def tracedF(*args, **kwargs): print f.name + '(' + ', '.join(repr(a) for a in args) + ')' res = f(*args, **kwargs) print '-&gt; %r' % res return res return tracedF Essentially, it prints out every function call and its result. Some improvements I often make that I didn't want to type here include printing out kwargs, and indenting the output based on call stack depth.
Looks great. Thanks
I agree. I just visited the Cython docs and indeed couldn't find a Vector example. Although, could you rather just "import" the C++ module you've already written?
Thanks for the answers. As you might have already guessed by reading my comment... I wasn't actually looking for someone to answer them (I know them already), but was rather trying to capture the thoughts of a person like me who might be coming across the 2's complement representation for the first time. The point being that all these questions and doubts creeping up in someone's mind are drawing them away from their original goal... access an element relative to the end of the list. Even Python 2 supports arbitrarily large integers (only constrained by system memory)... and Python implements the karatsuba multiplication algorithm to multiply extremely large numbers in O(n^1.6) (as compared to n^2 for usual multiplication).
Also go has a gofmt that adjusts the code to look the same, so there is a decided code style from the start for everyone. It might feel too harsh for some, but it ca be pretty practical i guess.
I didn't say it was the primary reason, but the general lack of accessible ways to use it doesn't really help. Numba has come a long way since I last looked at it, but it doesn't look like there's a fully vendor agnostic way to use it, and it limits valid syntax pretty significantly. It looks like you'd have to have separate decorated functions for OpenCL vs CUDA, and HSA doesn't really solve the problem either. These things do decrease accessibility. As it becomes easier to develop software that can leverage it, more and more interesting ways of leveraging it will appear. Even if it stays relatively niche due to its specialized nature, I believe it would be *less* niche in a world where writing code to leverage GPUs is less daunting than it is today
Yeah you should just be able to do from libcpp.vector cimport vector and then use your `std::vector&lt;T&gt;` functions as usually, albeit with a Cython syntax instead of C++. I would however probably do as much as possible in C++, and then expose classes and functions in Cython, to then create a suitable Python module. Implementing something in Cython *from scratch* seems like a bad idea.
For anybody interested, some alternatives are listed [here](http://docs.python-guide.org/en/latest/scenarios/cli/)
Cheers, I've been importing and using the vector class, but I was struggling to find examples of methods like insert being available but I've managed to find they are. So far I've been pretty impressed with how well Cython has been working and I find it reasonable fast to develop with, I can understand just exposing my classes if I just wanted to continue using them without a significant rewrite but I haven't had any issues so far with rewriting them in Cython.
Ok, good to hear! In the cases I can't just use pure Python I usually roll a C++ library and then wrap that with Cython. That has the added benefit of being later portable to other languages, if I so wish or need (never have so far though). Of course, I also use Cython if there are just a few functions that I need to go a bit faster. In those cases making a full library and wrap that is overkill.
Thanks for the advice :) I think that's a really good point about making a C++ library portable to additional libraries, I think if I end up writing a more substantial library in the future I'll follow your advice :)
Someone posted that this week, in case you missed it: foo[~i] == foo[-i-1] Useful for iteratimg over lists backwards...
`reversed()` is even better... 
Well... but using `package_data` means you have to do all the globbing (and recursive processing) manually, no? As far as I know, package_data is one list item per file. With `MANIFEST.in` you can do things like: recursive-include examples *.txt *.py Also pruning after inclusion is convenient. Manually doing this in setup.py is cumbersome and error-prone. I find `MANIFEST.in` way more useful. Also, it's part of standard Python. So why not use it? That's what it's there for.
I absolutely agree. I was just trying to contextualise the recommendations of pypa. At work we also use `setup.py` exclusively. Maintaining `requirements.txt` files in a sane manner is impractical. I can see the idea behind `requirements.txt`. I'm not a great fan of it, and the example you gave with `pip install sentry` is a great example *against* requirements files. After about 10 years on Python I am still 100% fine with using `setup.py` exclusively.
# [TFW](https://imgur.com/0aWwPIz)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
[removed]
Transpose a nested list: myList = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] myList = list(zip(*myList)) print(myList) &gt;&gt;&gt; [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
Here's more [zip( ) Fu](http://pavdmyt.com/python-zip-fu/).
I'm in BI and building visualizations on large data in the life science space. Generally speaking, we use python as an all purpose tool, which means we prefer using python as a single language to tackle everything as opposed to multiple languages and fighting the integrations. So where would I tell you to spend your time? Learn to use python on tools like databricks, apache zeppelin, or jupyter notebooks. Find a data set either through searching or to answer a question you have. Put your data in an AWS S3 bucket and use python to connect to it, cleanse and manipulate the data, and then plot it using an interactive library like plotly. Build a dashboard from the data set with descriptive and predictive statistics using geo, boxplots, and time series charts. Accomplishing this will teach you python, statistics, visualization tools, distributed computing, apache spark, working with arrays and likely linux if going the apache zeppelin route. If you set up apache zeppelin on AWS EMR, you could spin it up and show it off during interviews as well. I would follow that up with research into how python is used and integrated into production products at scale. At this point, learning the concepts and being able to speak intelligently about them will get your foot in the door. Rinse and repeat after that - good luck!
`reversed()` returns an iterator starting from the back of a sequence as long as you're using a built-in sequence type, it doesn't return a reversed list. It will be way more efficient for nearly every case, on top of being clearer and more explicit.
Seriously if I could give him a hug I would. I owe my career to that dude.
Link or explanation for what this does? Not easily googleable
Google "pyserial monitor port".
Thanks. I knew I must be missing something obvious. 
Python's one line "ternary operator": foo = x if expr else y 
Name one?
This program is inspired by pmneila's [javascript animation](http://pmneila.github.io/jsexp/grayscott/). I found it hard to beat pmneila's implementation in the realm of js, so I wrote my own one with python. I used pyglet and OpenGL shading language GLSL1.3. My project [is here](https://github.com/neozhaoliang/pywonderland).
I use this, but I read somewhere that it isn't very *Pythonic* 
*Not a professional programmer* Can somebody tell me the advantage of using this library? What is the advantage of using this instead of a IDE eg jupyter? What does this actually does?
Have you looked at pytoolz memoize decorator? It's py2/3 and has a bunch more useful fp tools. 
Click is more pythonic.
+1. Pyserial does the job.
1. You should probably try /r/learnpython , as /r/python is more about discussions about python ecosystem. 2. You should really try to post whatever you did already. Nobody is going to solve your homework for you. 3. You have a pretty consistent separator. You should find a way to break your string around this separator and then sort things out. *Edit*: Although this is a homework, I'm very tempted to answer this, just because I managed to write said function in a single line, purely for coding golf (ok, it's a lambda, but still counts, right?)
There are also a lot of videos out there that cover python and data mining etc.
There's also the less magical, but in-the-standard-library option, cmd: https://docs.python.org/3/library/cmd.html
So this turns your code into something you can use more easily from the command line. So basically it wraps your code so it can be executed from a text user interface. This enables use without opening the file or reading the code. An IDE is different because it is designed to assist with the development. Sure you may also be able to run code through an IDE but it's heavy tool if you're not going to modify your software. Besides having to install an ide besides downloading python is a bigger barrier 
`docopt` either works great, or fails completely without telling you what the problem is. Imagine you are the script author, and you try to run your own script, while `docopt` presents you with your own help text, all while you bang your head against the wall trying to understand what the problem is.
After researching a bit, the atomicity is more nuanced than I realized. Short version is that these are _usually_ atomic for current CPython, but (a) it depends on the fact certain operations happen to be implemented with one bytecode instruction instead of 2, (b) the Python language spec doesn't guarantee they will stay atomic (see the story at https://bugs.python.org/issue13521 for example), (c) there are edge cases which make them take more than one bytecode instruction (e.g. defining \_\_hash__ or \_\_eq__ on the key object), and (d) other implementations like PyPy have totally different considerations. I modified the article to limit the scope to single threads for now. 
Setting up what devpy.autolog() gives you with logbook requires: - using tempfile to get a temp dir - using pathlib/os.path to ensure this dir is namespaced, created and writable - look up in logbook doc how to use TimedRotatingFileHandler and set it up - look up in logbook doc how to use the formatter and set it up - install colorlog and setup coloration - either force the person to manually choose a name for each log consistently and hence understand logging namespaces or use inspect to get the outter frame to figure it out - setup the lowest level possible for all handlers and the logger - manually get an environment variables to allow change the verbosity at startup and toggle coloration Then, once you have all that, you still don't have an autologging if the program crashes. To provide that you need to use an exception handler, so understand the way sys.excepthook works and how to clealy use it to not override the default one. But once you got that, you still don't have coloration of the stack trace, for that you need a second exception handler playing nice with the first one, parse the traceback and colorise it, but only if you detect a tty otherwise you'll break the terminal. And also add a separate logger to avoid logging it twice on the console. But once you got that, all the stack trace is colorized. If you want only YOUR lines of code to be colorized, then you need to list all installed packages, match the traceback lines and diff them with the colored one. Of course you can do all that manually. Or just use one line with devpy. The good thing is you can always setup cleanly logbook later because log.info/log.debug, etc works the same. So you can just get rid of the devpy import line and replace it with logbook setup and it will work. devpy cost nothing, and get you started with a nice default logging. You dev. Once you're statisfy and got more time, you replace it with stdlib's logging or logbook and got a clean setup. Win win. 
Because eventually it will do more than logging.
Because eventually it will do more than logging.
But it doesn't provide the same features at all. This will not log in a temp file, set a verbose formatter, log stack trace on program crash or colorize the stack trace. To setup up what devpy.autolog() gives you with stdlib's, it requires: - using tempfile to get a temp dir - using pathlib/os.path to ensure this dir is namespaced, created and writable - look up in logging doc how to use RotatingFileHandler and set it up - look up in logging doc how to use a Formatter and set it up - either force the person to manually choose a name for each log consistently and hence understand logging namespaces or use inspect to get the outter frame to figure it out - setup the lowest level possible for all handlers and the logger - manually get an environment variable to allow change the verbosity at startup Then, once you have all that, you still don't have an autologging if the program crashes. To provide that you need to use an exception handler, so understand the way sys.excepthook works and how to clealy use it to not override the default one. But once you got that, you still don't have coloration of the stack trace, for that you need a second exception handler playing nice with the first one, parse the traceback and colorise it, but only if you detect a tty otherwise you'll break the terminal. And also add a separate logger to avoid logging it twice on the console. But once you got that, all the stack trace is colorized. If you want only YOUR lines of code to be colorized, then you need to list all installed packages, match the traceback lines and diff them with the colored one. Of course you can do all that manually. Or just use one line with devpy. The good thing is you can always setup cleanly logging later because log.info/log.debug, etc works the same. So you can just get rid of the devpy import line and replace it with logging setup and it will work. devpy cost nothing, and get you started with a nice default logging. You dev. Once you're statisfy and got more time, you replace it with stdlib's logging or logging and got a clean setup. Win win. 
Yeah but it's static. No way to choose temp file easily, no handler to log all stack trace by default, no coloration for the stack trace, etc.
But it doesn't do the same thing at all : logging in a temp file, having a very verbose formatter, log exception on crash, colorize the stack trace... To setup up what devpy.autolog() gives you with stdlib's, it requires: - using tempfile to get a temp dir - using pathlib/os.path to ensure this dir is namespaced, created and writable - look up in logging doc how to use RotatingFileHandler and set it up - look up in logging doc how to use a Formatter and set it up - either force the person to manually choose a name for each log consistently and hence understand logging namespaces or use inspect to get the outter frame to figure it out - setup the lowest level possible for all handlers and the logger - manually get an environment variable to allow change the verbosity at startup Then, once you have all that, you still don't have an autologging if the program crashes. To provide that you need to use an exception handler, so understand the way sys.excepthook works and how to clealy use it to not override the default one. But once you got that, you still don't have coloration of the stack trace, for that you need a second exception handler playing nice with the first one, parse the traceback and colorise it, but only if you detect a tty otherwise you'll break the terminal. And also add a separate logger to avoid logging it twice on the console. But once you got that, all the stack trace is colorized. If you want only YOUR lines of code to be colorized, then you need to list all installed packages, match the traceback lines and diff them with the colored one. Of course you can do all that manually. Or just use one line with devpy. The good thing is you can always setup cleanly logging later because log.info/log.debug, etc works the same. So you can just get rid of the devpy import line and replace it with logging setup and it will work. devpy cost nothing, and get you started with a nice default logging. You dev. Once you're statisfy and got more time, you replace it with stdlib's logging or logging and got a clean setup. Win win. 
I suggest that you ask on gmane.comp.python.cython.user which is also available on Google Groups, but like all Google Groups it's too easily spammed.
You don't really need itertools, this does the same thing: def sliding_window(n, seq): return zip(*(seq[i:] for i in range(n)))
Thanks a lot buddy..Great advice!!
Thanks a lot all
Depends on how you use it. In simple cases, it's pretty damn Pythonic. If you use it like foo = bar(1 if qux() else 7 * (3 if quux() else 11)) if spam() else ham() ... then you'd better off splitting it up. But that's the case for everything, really.
`__init_subclass__` is neat. Your approach works even better if message_type can be `None` (meaning "don't register this subclass").
this image is just a snapshot of the simulation. run ``` python main.py ``` you will see the simulation run in a window popped by pyglet. presee 'Enter' to take snapshots.
To read a data file with one element per row I like this one-liner my_list = open('file.dat').read().splitlines()
I actually wrote something called argvee (pip install) that does pretty much the same, just you decorate your functions with `@app.cmd` and it checks the function params, looks for boolean flags, etc. You can have it force certain args to be a type. http://pythonhosted.org/argvee/ I still have to check if it works in python 3. TBH I never even use it because I just go through the trouble of writing out the argparse boilerplate. argparse is pretty damn easy. It's not perfect but I don't know why people are so desperate to avoid the perfectly capable stdlib arg parser.
It just helps you write CLI apps that can take arguments, flags, etc. Before anything else, learn the stdlib argparse library and get used to it. After that, check out docopt, click, and this library and see if there's any you prefer highly over argparse. I find argparse to be perfectly fine, just a little more verbose than something like click. Docopt is really cool because it's cross platform, C/C++/Rust. Though, I don't find myself copy and pasting the docs and reimplementing in rust, so not sure if I get that much use out of it besides what it offers directly. I just use argparse. I used to play with others, even wrote my own argvee that acts similar to this thing they posted, but argparse in the end doesnt require installing other dependencies just to run.
Yep, my thought's exaclty. Begins, clicks and docopt are already doing a fantastic job, why no contribute to them instead of reinventing the wheel ? 
StringIO works like a file, but can be read as a string. You can use it to capture logs. https://docs.python.org/2/library/stringio.html
Jesus. Anyone that says that sort of thing immediately outs themselves as unqualified to say it.
Agreed, it's neat My point of begging everyone not to use this hack still stands, but I agree
Well, that's an annoying format.
Thanks, yeah. I think the OP ended up with a "look this worked" article rather than a best practice doc, and those in the python packaging domain are seriously lacking. There's always a trade off with whatever solution you go with, and I suppose the most important determinant is as much a project or business decision about technical debt and easy of development rather than a religious declaration of which is better :) Thanks for the lively discussion!
Seconded 
It looks like this library does use introspection to pull in the method and class docstrings and uses them to build a standard `--help` feature. So long as the method arguments, their expected values, and other information is properly documented in the source code, this shouldn't be a big issue.
I'm not sure how you could prefer having to use and update argparse every time your program changes compared to having it done automatically. But if complex code scares you, continue using argparse- just don't be surprised when someone goes "wtf year is it?" and rips it out.
you'll need it if your iterable doesn't support slicing.
# [BALZADERAC!](http://nick-sanjayandcraig.wikia.com/wiki/Balzalderac!)
I wonder why didn't do that in the source code, this shouldn't be a big issue.
Don't you need an 'r' inside the open function to open it for reading the file, and don't you need to close the file afterwards? Sorry if I'm being stupid, just curious.
You know, this is really awesome. The same goes for the solution above. 
Isn't optparse deprecated by argparse?
The advantage of `manage` is that you do not need to touch source code. You jsut drop a `.manage.yaml` file in the root directory of the project and define things there. You can even have more than one manage file located anywhere.
It looks like you're trying to mention another user, which only works if it's done in the comments like this (otherwise they don't receive a notification): - /home/ubuntu/ --- ^I'm ^a ^bot. ^Bleep. ^Bloop. ^| ^Visit ^/r/mentionhelper ^for ^discussion/feedback ^| ^Want ^to ^be ^left ^alone? ^Reply ^to ^this ^message ^with ^"stop"
Why not functools.lru_cache(maxsize=None)?
Could you please format the code properly or consider uploading it to github? People will be much more willing to help. 
You should check out click - http://click.pocoo.org/5/ It does what you're describing really well. 
This is a side project I've been working on for the past month or so. I wanted to explore how test frameworks work as well as asynchronous python so I thought this would be a fun and useful project to do. The README should explain everything you'd want to know, but if you have any questions or thoughts please leave a comment. If you find this project at all interesting and would like to contribute the repository is open for pull requests. Thanks!
You should learn yourself, but: def sort_for_suzie(numstr): intlist = list(map(int, numstr.split("+"))) intlist.sort() return "+".join(list(map(str, intlist))) print(sort_for_suzie("2+1+2+9+7+6+1")) :: 1+1+2+2+6+7+9 
Personally I would have used more asyncio coroutines and exposed the result as a web service. But this works as well. Your teacher will love it!
43 stars on github, one issue and one PR in one day. Thank you guys!
The thing is, compared to binary operators there are much, *much* more complicated things in every day python code. It is very easy to understand what `~` does. It's just very rare for it to be actually useful, aside from little tricks like this, which is why most people don't see it until they start doing very low-level programming (usually not in Python at all). You don't need a degree or weeks of practice memorizing obscure editor shortcuts in order to understand what's happening in `somelist[~i]`. The first time you see that expression you look it up, you go "huh, neat" and you move on. I dare say that it takes a little longer for Picard-Lidelöf or vim to become "intuitive". And it also takes a lot longer to understand Python features like metaclasses… or even just the difference between an iterable and an iterator. My point is this: I have no idea what the "common user knowledge level" is but I suspect that restricting yourself to it would mean using less than 10% of Python's features and standard library – not because people are dumb but because everyone does something else and uses different parts of the language for it. Maybe pycodestyle should check variable names against [Randall Munroe's list of the 1000 most common english words](https://blog.xkcd.com/2015/09/22/a-thing-explainer-word-checker/) to lower the entry barrier for new programmers? After all *most* programmers aren't even native English speakers. I wouldn't want them to require a dictionary (the traditional kind) to understand my code base…
Oh, Sanjay and Craig! It felt familiar.
&gt; compiled I see what you did here.
Using a sentinel value in that way is pretty un-Pythonic. I'd say that if `None` could plausibly be a value in the dictionary, use the `in` or `try` strategies, depending on which is more appropriate for the situation.
I'm the author of https://github.com/squeaky-pl/portable-pypy It totally works with CPython as a build host instead of PyPy. And you don't need mercurial to clone it, you can download a snapshot in a tarball from Bitbucket. That's what my Portable PyPy project does. It has a set of Dockerfiles and scripts to do so. On the top of that the resulting binary works on any distro (without Docker). Not only Debian. I recently added support for py3.5 branch. You just need to use `-f Dockerfile.3` to `docker build` and py3.5 as target, follow instructions here: https://github.com/squeaky-pl/portable-pypy/blob/master/BUILD.rst 
I generally use `TTLCache` .. and install `cachetools` all the time to do it. https://pythonhosted.org/cachetools/
&gt; But if complex code scares you, continue using argparse You convinced me.
A LOT of people use sentinel values in that way. My first version of the article only covered the `in` and `try` strategies, and didn't even mention `get`. Follow the previous-discussion link and you'll see a lot of people thought THAT was un-Pythonic :)
an additional resource, http://shop.oreilly.com/product/0636920034391.do 
I don't agree with the other guy at all. Argparse isn't "magic" like this is. Magic is bad for medium/large projects. That said, for a quick small project I really like magic. I'll probably use this for the first few hours and then rip it out and put in argparse if a project gets larger. 
&gt; 'Fatal Python error: Py_Initialize: unable to load the file system codec ModuleNotFoundError: No module named 'encodings' [Look through the replies on this issue](https://bugs.python.org/issue27054).
Honestly you have a point. I'd want to at least stick a line in the readme to warn the next maintainer to look into the fire library. Argparse is super obvious about what it's doing though 
Is that just for storage? Use the json library. Otherwise, [this](https://www.tutorialspoint.com/python/python_files_io.htm) is a good tutorial. And just for future reference, r/learnpython is a better resource for these kind of questions.
This doesn't work with iterators/generators. Try: list(sliding_window(3, (x**2 for x in range(9))))
&gt; I hate to the poor bastard that has to code review that. Yeah, I actually left the code uncommented, because I didn't want to spoil the fun of figuring out how it works. :) I don't know a better solution. In [PyToolz](https://toolz.readthedocs.io/en/latest/_modules/toolz/itertoolz.html#sliding_window) they even use a `collections.deque` instead of `islice` to get rid of the first elements (they say because of performance reasons). 
What's your cousin Justin like?
It is a result of how python is tokenized. [Here](https://docs.python.org/3/reference/grammar.html) is the python grammar. Note that there is no whitespace token. Essentially, at the parsing stage, python just ignores all extra whitespace, so {l.p[x+1] for x in range(25)} is the same as { l . p [ x + 1 ]for x in range(25)} as far as python is concerned.
And yes, I know that there's already a vim plugin, but this one doesn't require a vim compiled with +python and I felt this was better suited to my needs. So I'm hoping it'll be well-suited to other people's needs as well. 
**Here's a sneak peek of [/r/learnpython](https://np.reddit.com/r/learnpython) using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) \#3: [Beginner's Python cheat sheets](https://np.reddit.com/r/learnpython/comments/4atn5f/beginners_python_cheat_sheets/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
I am learning python from scratch on codecademy. This is my first programming language learning. Eventually hope to use it to calculate millions of regressions on financial securities.
All you would need to change is the path for your css and js links in your template so that it looks for the files in the right spot. You could use absolute paths or use the static template tag.
I don't want to change 'index.html', so I guess I would use the absolute path. But how would I do that?
thanks
I meant Theano whoops
sounds cool :)
Good idea
One of the nice things about Fire is that it works with all Python code (or as close to 'all' as we can get). This means we're not placing restrictions on how the user writes their code. e.g. we're not asking for a particular format for docstrings so that we can parse out what the arguments should be. We do copy the docstrings verbatim and use them within the help strings in the generated CLI, so the CLI does provide a description of what it's arguments do iff the CLI author provides that description. Always room to make this even better though! 
Also when you go from O(N+M) to O(1), you're able to do things that simply weren't possible before. E.g., no one would ever think of having a command line tool with thousands of multiply nested commands that are changing every day, because that would be absurd to maintain with any of the preexisting CLI libraries. But with Fire, you don't think about the CLI at all; you just write the commands and the modules as if it's normal Python code, and the CLI is just always there, ready to use if you feel like using these commands from Bash. 
Yes it does! Certainly there's room for improvement, but I think we have a decent first implementation for our usage strings for this initial release. 
I'd maybe try r/cryptography I believe if you provide your source code/ algorithm, they do accept 'crack my crypto' posts. 
I use Pycharm because my company pays for it, otherwise I'd use Visual Studio or Visual Code with Pdb plugin.
I'm not so sure. I prefer a red bikeshed
It's not really the amount of code, I'm just not a fan of this class-based approach. People who are used to do things that way, e. g. from class based views in Django, probably find Fire very compelling. And that's okay, I just happen to have a different opinion and don't want to discourage you or other coders to pursue their own approaches.
I know, isn't that awesome?! That's really great that he takes the time out of his day to answer those questions in such an approachable way. 
If the module's maintainers don't offer 64 bit pre-compiled binaries, then you can either install a suitable C toolchain and compile the module yourself from source, for find someone who has already done that. [Christoph Gohlke](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook) is one such person. 
Were you trying to reply to this other /r/python post? https://www.reddit.com/r/Python/comments/5xdwxr/testing_homemade_encryption_program_in_python/
Oops yeah haha. 
As for connecting the games, have you considered using Firebase for the data? Or maybe MongoDB. I know with Firebase you can push the data from device to device in near real time, I use it on several projects that I work on.
[removed]
Even if they had hierarchy your problem of not knowing which modules contained what methods would persist. You'd just have to type more in front of each import and remember the names of the parent too. import tar,gzip,deflate Would just become import compress.tar,compress.gzip,compress.deflate The only way to avoid that and actually fix it would be to make it so that importing the parent would import all the children... import compress.* but doing that would be an absolute nightmare. Code written thus way would always import the entire stack including a lot of un-necessary code...but worse, it would make a backwards compatibility nightmare. Maintainers could not remove anything from compress *ever* without breaking old code in hard to debug ways
Not bad. If anyone wondering, we do the same in Emacs with [Elpy](https://elpy.readthedocs.io/) (or [step by step](http://wikemacs.org/wiki/Python)).
That's the issue I have with these benchmarks. It'd be nice to take an actual app that's WSGI server independent (e.g. doesn't rely on uwsgi quirks, etc) and put it behind these servers and run through their UI test suite.
It would be great, especially since Spotify/Google Music have 'radio based on a song'. However, the suggestions that they generate are not accessible from what I can tell. Youtube has accessible song suggestions, but I found that they are not very good in general since they frequently revert to popular tracks, rather than similar tracks. On a different note - I [did also write another script](https://github.com/schollz/youtube-music) that helps to download music from Spotify playlists which I use regularly to download my Discover playlists.
I agree that zen is not dogma, but it does seem to encompass spirit and philosophy that Python is generally developed by. I would also argue that 'import compression.gzip' doesn't help code clarity or correctness any more than 'import gzip' does. That said, I don't see a major re-org of the std library ever happening. Not due to a blind adherence to Zen, but the practical issue that it would be a huge amount of work for not a huge amount of gain while also breaking tons of existing code. Where I think we (the python community) could vastly improve the std library is in the documentation. Perhaps a better organization and a pointer to alternative modules not in the std library. (Oh, you need to mess with http requests? Check out this fancy requests module.) 
&gt; Python 4 IMHO needs to organize this hell, but with backwards compatibility. You'll be submitting the patch, right?
/r/python has not been built to serve as Gmail api discussion group.
[Sentdex](https://www.youtube.com/playlist?list=PLQVvvaa0QuDe8XSftW-RAxdo6OmaeL85M) has good videos. /r/learnpython is a better place for these questions.
I've been using Team Treehouse to cement some gaps in my python knowledge. $25 a month, if you want high quality tutorials. Udemy do flash sales on python courses for £3-4 sometimes. I know you said you dislike books but I definitely recommend the python material from no startch press. So handy to have around.
Christoph Goelhke has the download you need [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook). Download `pyHook‑1.5.1‑cp27‑cp27m‑win_amd64.whl`, save it to a folder such as `c:\downloads`, then from a command line prompt type `pip install c:\downloads\pyHook‑1.5.1‑cp27‑cp27m‑win_amd64.whl`. If the response is `'pip' is not recognized as an internal or external command, operable program or batch file.` then check that `c:\Python27\Scripts` is in your path and that you have the latest version of Python 2.7 installed (2.7.13 as of early 2017).
Just keep in mind you will need Python 32bit and PyHook 32bit if what you try to import is 32bit com object.
I used to do a lot of Python. I recently came back. Python itself is still great, but the standard lib *docs* are really bad. It's tough to find what you need. If I was going to spend effort on the standard lib, that's where I'd do it.
&gt; All you would need to change is the path for your css and js links in your template I meant to ask what you meant by this. Which path would I change? I'm guessing you mean the path in `/interactve-1/index.html`'s `&lt;head&gt;` tag? 
Spotify's is! https://developer.spotify.com/web-api/get-recommendations/ will let you get a playlist of refs based on a set of seeds, which can be any combination of tracks, artists and genres!
Cool, thanks for the links too.
Awesome! Thanks, I've added that!
Wouldn't call it homework. It is a self chosen project, where my task is to make different kinds of encryption programs and compare the security of them in for example cracking time. I am running these in the command line.
12 factor is language agnostic. Just don't write to disk or rely on things being in RAM between requests. Instead of RAM, store in redis/memcached. Instead of local disk, use S3
404
A first step when looking at how secure a cryptosystem is is to look at how long it would take to brute-force it. The Caesar cipher has only 26 possible keys, so it would be very easy to brute-force. Your block cipher has an infinite number of valid keys, but since you take every value modulo 94, you effectively have 94^4 or about 78 million different possible keys, which is better, but not nearly enough for use in practice. Unfortunately, with your block cipher, having one of the four key values correct means that one-fourth of the message is correctly translated, so you only need 94*4=376 guesses, assuming the message is long enough that you know when you have found a valid value. I haven't looked in-depth at your RSA variant, but it seems that it can still be broken by factoring n, which is really easy when p and q are two-digit numbers. 
You are correct but need to start somewhere and i'm trying to figure out how to start organizing the stuff to get logging and setting up the processing to not crash if it sees something unknown and if it does to only crash on that single file and not the entire batch of files. If this was written in pure java i would be transitioning this to spring batch so I could start breaking down the code and into jobs and let the framework do the "management" work if you will. I'm just not aware of anything like spring batch for python.
Hi, I know exactly the mentor you need. His name is Dan BADER. https://dbader.org/products/mentorship/ NB - I do not have any commercial relationship with him. But I follow him on Twitter and I subscribed to its newsletters. This guy is brillant and he is a Python specialist, for sure ! There is only one problem: the price. But is up to you !
Thank you for the answer. If I wrote a short quote of them all. could you take time how long it takes for them to be cracked. Could need some statistics. 1. vDI9,80I4&gt;Iu0: 2. 279249242250280233240321318233247323308248316239 3. [27290L, 90699L, 44140L, 81258L, 148722L, 28150L, 64755L, 79850L, 81258L, 148736L, 112371L, 3222L]
Caesar and RSA is both less than a second. I don't feel like writing a program to crack your block cipher, but a proper program probably wouldn't take more than a few seconds. (might even be less than a second as well)
the correct link seems to be https://github.com/JulianGaal/python-cheat-sheet/blob/master/NumPy.md
I think I have clearly mentioned I dont need anyoone to do my homework. I am not proficient in python so just needed a kickstart. Ty though
The [standard library documentation for `urllib.request`](https://docs.python.org/3/library/urllib.request.html) already points to `requests` as a higher level alternative. 
This is great !
RemindMe! 2 days
&gt; Instead of local disk, use S3 Just remember not to put all your data in one availability zone.
fixed! :&gt;)
Why reinvent the wheel? Put it on SO and explain why it's not a duplicate.
Didn’t find anything here! Need to sign in?
Thanks for sharing. I need this right now. 
Jupyter notebooks have become my favorite way to write scripts in python. It makes it so quick to reproduce and test things, and the ability to quickly spit out and view graphs is fantastic. I highly, highly recommend it. 
You should add `np.einsum` (Einstein summations) to your mathematics section. Much easier to do complicated operations for ndarrays and express what you mean. Example: a = np.array([0, 1, 2, 3, 4]) b = np.array([1, 2, 3, 4, 5]) np.einsum('i,i', a, b) # dot product of a and b x = np.array([1, 3, 5]) t = np.eye(3)*2 np.einsum('ij,j-&gt;i', t, x) # a round-about way to double an array with matrix multiplication
Your issue isn't strictly Django-related, but more HTML-related. Step 1, figure out the absolute path to your JS script and CSS. Step 2, update your template to use the absolute paths so that regardless of where the template is used it'll reference the proper CSS and JS. Step 3, profit. So, for example, instead of trying to load the CSS and JS script using something like: &lt;link rel="stylesheet" type="text/css" href="css/mypretty.css" media="all"&gt; You would instead use an absolute path to it: &lt;link rel="stylesheet" type="text/css" href="/css/mypretty.css" media="all"&gt; Note the leading slash on the href. This will make the template, regardless of where it's used, look for the file under yourdomain.com/css/mypretty.css. If you didn't have that leading slash it would try and load the CSS relative to the URL of the page, in your case yourdomain.com/interactive-1/css/mypretty.css (which would return a 404 since you're likely not serving the CSS from that location). If you want to get a better idea of how it works, check out [this page](https://www.w3schools.com/html/html_filepaths.asp) and [this page](http://www.coffeecup.com/help/articles/absolute-vs-relative-pathslinks/).
A readme of more than six words would go a long way to getting people to try it and/or comment.
The problem itself sounds pretty straightforward, however you will see a problem when you try to actively observe and change the clipboard. Since it's something handled by the operating system. You should take a look at things like "pyperclip" which seems to work cross platform. Essentially you want to first code a part that observes changes to the clipboard (constantly polling - or maybe you want to try to write a hook to get into the operating system?!?) then writing things into the mentioned Textfiles. The difficult part will then also be a nice presentation to know which parts you want to combine afterwards. So the user interface will be crucial - especially given that people use the clipboard a lot (you should have a mechanism to decide when to store an updated clipboard and when not). Overall this sounds like a pretty ambitious project for someone who is new to Python and programming.
 import config thing=config.CONFIG print(thing) What is the problem with this? It is trivial basic python...
its not like there are many single function packages like some other languages packages repositories have.
I am new to python. You were too at some point. 
`sort_values` returns a new DataFrame. sorted_df = df.sort_values(by=0) If you want to sort inplace, you need to specify that: df.sort_values(by=0, inplace=True) [See the docs](http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.sort_values.html) for more info. If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
I removed the multiprocessing from my version as I'm trying to get it stable. If you search for less common songs, it blows up. Trying to fix that infinite loops. It assumes you will always find 30 related songs. If not, chunks. But it is a cool idea. Might have to make a quick yea/nay interface in Tkinter.
Udemy also has a couple good video courses as well. I got a great deal during black Friday. Keep your eyes open for them if the prices seem too steep. I also second sentdex
The Sublime Text code runner doesn't support user input. Run your code from the terminal or another editor/IDE. Also, /r/learnpython is probably a better place for questions like tihs.
Thank you much!!! Would you tell me what other editor support user input? 
Great suggestion! Will add it tomorrow
I was 12 years old when I started programming using the version of qbasic included in MSDOS. I program professionally and occasionally as a hobby.
Wonder what #100k will be! Looked forward to thread #100k on a forum I used to hang at, only for it to be snatched and moved to the removed threads subforum, quite the bummer. 
Honestly. without English explanations of what was being done, I'd have had no idea what was going on. The simple mathematical expressions of the constraints in no way, shape or form can be inferred from the code that actually has to be written. 
quoth the raven, nevermore
9 years old. At first, it was just Basic on an Atari 800 in a special class at school. Then, hobby programming on a Timex Sinclair and later a TI 99/4A. 
That's a good idea, I added in a threshold for the loop. Can you let me know how you made it fail?
I used [dc.js](http://dc-js.github.io/dc.js/) to make a front end to a log reader that I built to filter down. Depending on the style of the logs `shlex.split` may be more reliable than regex, though possibly slower. 
thanks!
I wonder why he didn't try any of the typing features in python3.6. All his complaints about types could have addressed by them I think. 
Cool. Does this work without vundle?
16, in high school. job. 
I started programming when I was 17 (first year of undergrad, language - C). But that was only as part of a course. I seriously started programming in the final year of my undergrad for the final project that we had to submit to graduate. And that project was a CFD problem and I used MATLAB for programming. One of the reasons I appreciate Python so much is the ease with which you could do complex CFD calculations/data science/visualization. Life has never been the same after I discovered Python and its amazing ecosystem. That said, the language I really love and admire is Haskell. The mathematical elegance and the abstractions it allows is simply amazing. Though, unfortunately, in my field, it is a bit lacking (especially the ecosystem when compared to Python or C++). Fortunately, things seem to move in the right direction in Haskell too. 
I'd done some basic scripting when I was in my teens and did some Python dabbling in a high school CS class, but I didn't really start properly programming until I picked up PHP in my early 20's, then rediscovered Python when I was 25. I write code most days at work and have a few hobby projects on the side
Aw man, it's a Python 2 package :(
**Corrected Link** https://github.com/JulianGaal/python-cheat-sheet/blob/master/NumPy.md
Thanks :)
Yay, thanks!
Stupid reddit won't let me edit my original post...
Stupid reddit won't let me edit my original post...
There is no class in the example I just posted, so I'm not sure what you mean by a class-based approach.
I went a different way. I had trouble following your code at first, so I started rewriting it as a generator method. https://github.com/sacherjj/playlistfromsong/blob/master/playlistfromsong/song_search_service.py The idea is that you have a common object that you can call get_songs(search_string) on. This is a generator that will continue to give you songs, unless it can't find valid one, so it will exit. The method yields a tuple with youtube_url, artist, song. I am planning a tkinter interface that displays artist and song and you click download are skip.
&gt; "SQL WHERE trick", couldn't come up with a better title... It's called boolean indexing.
That's awesome! I really like your code. If you'd like, please make a pull request!
You kind of missed a few other key 12-factor points: - Use the environment (and not, say, `settings.py`) for config - Provide your own web server instead of being run by Apache/uwsgi-nginx/etc. - Output all logging to a stream instead of managing files - Specify all dependencies and don't rely on systemwide packages
Thanks
That's too many. The paradox of choice. I'll just stick with whatever I can find in Anaconda, because if I try to search through there I'll just curl up into a ball in the corner.
I have been a consultant for a long time, and I consider hours to be "billing units". All things being equal, the more time you spend, the more value you create, and the more you should be paid, but there are many factors which can change the balance. In general it is reasonable to expect a "senior" developer to be more efficient than a junior and able to accomplish more per hour, so the hourly rate to be higher. Or they might be able to do something that a junior simply cannot. Or they may produce with a better design , higher quality, faster, more reliably, have experience with the problem domain, understand the requirements with less client communication, etc. On the other hand, there are always new things to learn, and when I am working with something new it will take me more time, maybe longer than a "junior" developer who is familiar with a specific technology. I don't deserve a senior rate because I have been in the industry for x years or live someplace expensive, I deserve it because I get things done. In general, non technical clients just have some thing they need accomplished, and it has a certain value for them, and they have a certain budget. If I say "I can take care of that for $500", it doesn't matter how many hours it actually takes me as long as you get it done by the deadline and it works. As developers, we are better positioned to take on technical risks. So when you work with your clients, focus on getting the requirements clear, do whatever research into the solution that you feel necessary, then give them a fixed price quote or an estimated number of hours at your standard rate. Deliver and bill them what you quoted. You may guess wrong and it takes longer. Or it may be a new area for you and you can only bill half of the actual hours. But you will have given a professional experience for your client, and you will get more business. There is no reason to be taken advantage of. You may run into a situation which is unexpected, and it is reasonable to renegotiate. Imagine you hire a contractor to redo the kitchen in your house. They talk with you about what you want and give you an estimate of $5000. You expect it to be $5000, maybe +/- 10% if the requirements are not completely clear and have agreed that it may vary. You don't expect a bill for $8000. But if they are replacing the sink and find a leak has rotted out the floor, you expect to pay for it. This is the way clients want to be treated.
Trying to avoid installation at all is unlikely to be happy, and you likely lack permission to install _in a particular place_ or _with a particular method_, neither of which have been described. This sounds like an [XY problem](http://xyproblem.info/). You probably _should_ be installing the library into a Virtual Environment (or venv or virtualenv) located somewhere you do control (eg, your home directory).
Python noob here. Why not something like this (it's a terrible workaround, but it works)?: def thirtyfive(): return 35 Now `thirtyfive()` is immutable. 
The correct link is https://github.com/JulianGaal/python-cheat-sheet/blob/master/NumPy.md 
Absolutely you should have a contract, don't work without one. This is a good one to start with, you can use it with hourly or fixed price chunks. http://msabundle.com/ The biggest problems with hourly contracts come from mismatched expectations and failing to keep the client in control, part of which is communication. So you need to get a clear understanding of the requirements in written form. Then you create an estimate and have the client agree to move ahead, then you do the work. If you do this, if there is a disagreement then a neutral third party can review what was done and whether it met the requirements and it will be clear that you should be paid. If your hours match the estimate within some agreed accuracy, then it establishes approval to pay those hours. The detailed requirements and estimate are for *your* benefit. If you have no estimate, then the client may be surprised at how long it takes to do things, or can claim to be surprised. And you may have mismatched expectations, e.g. the client wants something simple, and you do something complex. Or the client thinks it should be simple because they don't understand the tech. Of course, clients can rip you off as well. You can ask for a retainer up front, as lawyers often do. For fixed price, you can ask for some percentage up front. For larger projects, we often use 40% on signing, 40% when we are feature complete and 20% when acceptance testing passes. If the requirements are not clear, you can work on an hourly basis to write them and create the estimate. Or you can say you will spend up to e.g. four hours on this, then come back. It is typical to find some things that are clear enough, and others which are not. So you can start with a phase 1 on the things which are ready. This is good for both sides. If you have established trust, then this process does not need to be heavy weight, but it is still important to do it. Keeping your client informed is important. A simple "agile standup" style email every day is good: today I did this (billing x hours), next I plan to do this, these are the problems I have, things I need from you. It documents the work you are doing to prevent surprise. It gives them the opportunity to say stop. It can also document them changing their mind about details, increases in scope, priorities changing, failing to approve work or clarify requirements in a timely basis. So I assume you are a good developer. You need to convince the client that you can do the work and are worth your rate. You can do that by being professional and taking the risk of new technology that you may not have worked with. Once you gain experience and reputation, you won't have to deal with crap clients. But at the beginning you need to establish yourself.
I used BASIC on a toy computer before I ever got to a real computer. In 4th grade I finally used an actual computer and tried Visual Basic. I abandoned that in 6th grade until senior year of undergrad (social science major) when i decided to take all CS classes and get a minor. Then I didn't code anymore (remember, social science) and worked at the UN and stuff and went to grad school (still social science), finished a year ago, and somehow ended up getting a job where I code as part of a research team at a nonprofit (JS, PHP, and MySQL for making data cleaning tools for other to use on the server; Python for data analysis; d3 for visualisation)
I started the rough way at 20 at the university, did some awful C and Java, then learned some Python by myself at 22 so at last managed to write some ideas of mine and got hooked. I do Python and web now.
11yrs old. Basic on ZX81 in 1981, C64 ASM, Amiga ASM and now C/Python/JS/Powershell/whatever its all the same. I'm an IT Architect as I'm a terrible programmer.
Yes, it should! Pretty much any package manager should work. I've only tested it with vim-plug and vundle. 
**Corrected Link** https://github.com/JulianGaal/python-cheat-sheet/blob/master/NumPy.md
Where I work we hire people to do Python that have never worked or even played around with the language. Just apply and ignore the silly parts. Who know who wrote the ad anyway? Could be a recruiter and they are by definition clueless about coding. One of the big advantages men have over women in the job market is that men apply for jobs where they meet some of the stated qualifications and women apply for things where they meet all (on average, statistically, etc). I'm not implying that I've figured out you're a woman or anything, just stating that you should do the advantageous thing! :P
Click the link on the page. It takes you to the full article.
Thanks!
Hi, I'm the author/maintainer of simpleeval, https://github.com/danthedeckie/simpleeval which you may find interesting It might well be extensible to what you want. Sandboxing is one problem python doesn't have a great solution for. You have to whitelist what operations you want to support really, as there are so many ways out. You could also use docker containers for bigger programs/scripts. Looking at your code above, that might be the quickest change. Or compile cpython with enscripten and put directly in the browser/v8 sandbox.
When I was 23, 4.5 years ago I started with R for statistical analysis. Soon after, I got a job implementing a statistical expert system GUI, using ... Python. After that I've been active in Machine learning (kaggle), then AI more generally (writing bots to play games, reinforcement learning). I now work at a data analytics consultancy firm, mostly working on innovative tech. I've been a blockchain developer, done projects with training computer vision models, generative chatbot sequence models, and other machine learning models. I'm also active in open source: https://github.com/kootenpv/ I experiment with a lot of programming languages and innovation, it's super fun to me.
Sweet! I need to relearn Einstein sums anyway. This will be helpful in my computational physics practice. Thanks!
Oh I don't mean you should lie. Just don't care so much about what they're asking for. 
In boolean indexing, other_a = a[b == '1'] should be other_a = a[b == 1] That is, you want to compare with the number 1, not the string '1'. Similarly for `other_other_a`
py2 only :')
Although using quotes to actually only match on the phrase does drastically reduce the impressiveness of these results.
Are you on Windows, Mac or Linux? I simply installed Anaconda, and set the init script in the Atom editor to the path of Anaconda, meaning Atom uses the packages of Anaconda to compile the code
thanks dude
Can't help you that, sry dude
If you can't find your mentor, try this great interactive website https://www.codecademy.com/learn/python
[removed]
One of the most secure type of password is one made from random common words. They are easier to remember and they have a larger entropy compared to normal passwords that use symbols, numbers and mixed case. You could use the top 10000 most common words. You can find those a list of the top 10000 most used words [here.](https://github.com/first20hours/google-10000-english/blob/master/google-10000-english.txt) For example choose 4 random words: turbo burner shell fantasy This has an entropy of 2^44 Compared to a password like this: Tr0ub4dor&amp;3 This has an entropy of 2^28 and it is harder to remember https://xkcd.com/936/
Okay. Thank you for the heads up!
Yes, all of those sites are bad. Honestly users are about the worst source of entropy imaginable. Just assign them a password. Either the user has a password manager (in which case, it will be saved no matter what it is) or they don't (in which case their passwords are insecure and can't be trusted). Using a sticky note is better than letting a user reuse a password from some site that gets hacked. 
Has Django ORM improved the ability to create singletons for two queries of the same row from different processes. I seem to remember getting Stale Object errors with Django/MySQL awhile back, leading me to resolve to stick with SQLAlchemy (or maybe PeeWee) for ORM work.
Agreed...I don't like being restricted by these rules...a long phrase that's easy to remember is better than some cryptic bunch of characters.
I would suggest giving the options of whether or not the password needs special characters or numbers. Right now you have it automatically use numbers when, generally, multiple words put together make a better password. Also, another thing I noticed, which doesn't really matter, is that if you go for an obnoxiously long password you are unable to see the full password; maybe make it so you can select the created password to copy it. One final thing, this is just me nit picking, but the fact that the text box doesn't have the text center justified bothers me, but that could just be me.
[The failure of pysandbox](https://lwn.net/Articles/574215/) should interest you.
Basic at 5 yrs old on an APPLE II in 1984. Yada yada yada, PhD from Johns Hopkins School of Medicine, now Scientist in Bioinformatics at National Institutes of Health, Python/R/C++
I have done some minimal processing with Dask, but I always found that it was not entirely solid on Windows. You may fare a little better if you're based on OSX or Linux. The Continuum guys are quick with support for bugs as well. For my scenarios, most of which were using apply on dataframes, I ended up finding a much more performant method to do it natively with pandas and chunking of my data. I'm sure I'll check it out again in the future when my current work-arounds are no longer applicable.
That's not entirely true. One decent technique that I have used for a long time is to create a sentence or two and use the first letters of each word, all punctuation, and all numbers from it. `OdttIhufaltitcaso2&amp;ut1loew.` I spend a bit more time on them and try to incorporate more variety, but this produces decent passwords that are easily memorized.
I was still referring to the example in the blog post, sorry for the confusion. Would probably make more sense to look at actual production code that uses Fire to get a better impression.
&gt; There are 10^15 of those combinations to choose from ...that's not correct. Even with a lot of potential non-alphanumeric characters it would still only be 10^8. Realistically, you'd fall prey to the fair assumption of lower-alpha-num, so it would be 36^4 - which is quite brute-forceable if the site in question doen't have a lockout policy. It certainly should never be considered secure. The rest of your post is just arguing for and against points I didn't make, but I'm sure it's useful information to someone.
A. Funny, I thought that my standpoint was already explained. Too much things might be confusing. B. I am very very narrow minded. C. Seems to me you didnt get the point. But dont mind. Keep trying.
Very handy. Saves sporadic Google searches!
Basically trying to do the group by - apply - combine at scale (500M rows). The first pass gets some statistics then the actual apply uses some scipy functions to generate new features from the raw data and stats for use in Machine learning models. Unfortunately I'm stuck in 2.7 and was kinda woo'ed by Dasks pitch to scale out. I can definitely do multiprocessing but just worry about the fact that the processing complexity and quantity of data is only getting larger
Ah that makes sense. I think I'll stick with multiprocessing for the time being. I'm doing apply as well but am still worried about how it can scale up in my use case
Thanks for the article. I'm curious if you've compared this approach (building on Flask) to using a platform like https://zato.io/ - or another ESB platform.
First of all thanks for taking your time to read the article. Answering your question. No, I didn't compared with any ESB platform. I just wanted to build something lean and simple with Flask (I had some previous experience). But I will take a look into that. Thanks.
Thanks for the idea, yeah that is nice, I might start using that myself!
&gt; I've used Dask via the Xarray library I've done the same and it has been an overall good experience. 
I was 19 years old in 1969. Programmed Fortran 66 (IV).
Any love for the one liners? import string; import random; print(''.join([ random.choice(string.ascii_letters + string.digits + string.punctuation) for n in range(23) ]))
Interesting... Thanks for the share!
List of Changes between 3.6.0 and 3.6.1rc1: https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-1-release-candidate-1
Thanks so much for the feedback! So I actually did take a look at this a while ago. I'm just not really sure how to use it in my case. So, basically, I'm trying to make the editor open ended so that people can write multiple functions and stuff in the editor. If I use simpleeval, I'm not really sure how to run it for multiple functions. Like would I have to parse the text editor beforehand and identify the functions and then run them one by one?
Just add, this is called Normalisation you should read up about it, it'll make your app so simple! This isn't specific to databases though, it can relate to classes and class methods too. It's basically just making sure that relative information is kept together rather than having huge monolithic tables and methods which are an amalgamation of different functionalities.
&gt; [bpo-29703](https://bugs.python.org/issue29703): Fix asyncio to support instantiation of new event loops in child processes. Aw yiss
This is sarcasm, right?
At the top of your script, you can put any path into sys.modiles. You can also just make a separate python install or use a vitual env.
r/learnpython is a great resource
I switched from Basemap to Cartopy a couple of years ago. I mostly use Cartopy with [Iris](http://scitools.org.uk/iris/docs/latest/index.html), which is for dealing with climate data. I have way less issues than what I used to with basemap, and my scripts are much simpler. The docs are pretty good with Cartopy, and it's maintained by the UK Metoffice. I guess the decision would depend on your specific use, but I think cartopy is the better package.
I'd definitely give it a go OK, they designed the API to look and behave like Pandas, so it's super easy get things setup and running fast. 
http://osxdaily.com/2010/07/23/set-up-text-substitution-in-mac-os-x/
Oh yeah, absolutely! I can see it being really useful for some situations, for example interacting with JSON in a JS-like way, and I have absolutely no problems with the library existing; wouldn't be against it being in something like `collections`, even. I was just making the case for it not to be the standard implementation of `dict`s.
The `sudo` will cause problems anyway, because it runs your script as root, and root can't create a window on a user desktop.
Quality is better than quantity. How many packages do the same job, e.g. compare docopt to click to ...
The startup script for the user's windowed enviroment is the `$HOME/.xinitrc`: http://fluxbox.sourceforge.net/docbook/en/html/app-setup.html Put the invocation of launcher.py in that file and background it with `&amp;`.
Victor does love his Doombots.
&gt; Where would this backend class live? Is it part of the root widget class, or part of the "App" class? This is ultimately up to you, there could be multiple good answers depending on the structure and later goals of your application. If this api management class will truly be global and you don't expect to ever work with more than one instance, managing it at App level is probably fine. &gt; Can the backend object be accessed directly by the widgets? How is that accomplished? If you store your instance as an attribute of the App, you can access it via `App.get_running_app().your_reference`, but this isn't the only option if you do put the class somewhere else. &gt; How do I make these widgets aware of my custom "new_data" event, and how can I tell the widget to listen for it? You can add your own events using `self.register_event_type('on_event')` and adding `def on_event(self): pass` to any class that inherits from EventDispatcher. The method definition can also include any attached arguments, if appropriate. You can then bind to the event just like any other in Kivy. Edit: As a side note, questions like this are probably more appropriate in /r/learnpython, or in practice you're more likely to get Kivy help via Kivy's mailing list, irc channel, or possibly /r/kivy.
I'm on mobile, so I don't have a link, but the original author of `basemap` no longer maintains it and recommends everyone switch to `cartopy`. `basemap` hasn't had an actual release in years but `cartopy`, on the other hand, is actively developed. Edit: My source is the discussion in [this issue] (https://github.com/matplotlib/basemap/issues/267) on GitHub
There should be one-- and preferably only one --obvious way to do it. Dicts ain't classes with attributes, they're maps that have keys. Sure I can see ways that this can be useful, I even like the idea myself, but being the default behaviour would by way over the top IMHO.
In addition please give us the error message. Don't type it up as that can lead to mistakes, cut and paste it.
I'm just going to copy and paste my comment about the similar `AttrDict` here. Good to teach about `__dir__`, but I generally feel that the `AttrDict` as described in the article is a code smell. I've seen developers use them before and IMO makes code more difficult to understand and encourages poor practices. I think this desire for object-like dicts comes from newer developers who tend to code toward their presentation layer of their systems. These developers don't draw the line between "models" and "views" clearly and as a result they frequently put structured data objects into elaborate nested dicts and lists (to serialize them later into JSON/XML/etc) instead of domain objects. When I take the role of a maintenance developer I assume that attribute access means I'm working with models, and lots of named item access means I'm working on a system serialization boundary, and `AttrDict` violates that. ^(and that's my rant on AttrDict that no one asked for)
I am simply amazed by the fact that you have at least 20 hours a week in which you can find the time to program by yourself. I would personally do it, and quit my present job, but I strongly believe that I would miss the social routine from my Company. That being said, I strongly advise you to not be scared of any jobs strict requirements. These kinds of requirements are wrote up by people who are not engineers. Just for the sake of it, dwell a day or two into the requirements so you would have a clear understanding of them. Keep in mind that the most important stuff is communication with the client. A morning scrum and an evening status is a must.
Slow relative to what, Django, Falcon, etc?
Setup a jupyter server on the intranet with lots of company data loaded and some plots to get them started.
That's fascinating. I didn't realise that Scrabble was that deterministic, but thinking about it, I guess it is.
One of those said, "on android". Is it possible to run python on android and can I use NumPy, Pandas, and MatPlotLib? 
I just just finally made the leap from Python 2.7.11 to Python 3.6.0 last week. Now I've got to upgrade?
Why are you transposing *EVERYTHING*? Does the `axis` kw argument to sum help you? I wasn't even aware you could call vstack with just one array. I suspect you can greatly simplify this, as it looks like you sort of just arrived at this solution by guess and check. Once you figure out how to align your dimensions properly and use broadcasting, I bet this is a one liner. But I can't figure out what you are doing, so I might be wrong. But computing `out(x,w).T - y.T` multiple times is obviously unnecessary. Also, look at np.newaxis if you need to add a new dimension for broadcasting. Edit: Something like arr = out(x,w)-y return sum(arr[:, np.newaxis] * x[np.newaxis, :], axis = ???) Just a guess
I had to look this up thinking I had been coding Python for years and missed this feature... `__init_subclass__` is a new feature in 3.6 defined by [PEP487](https://www.python.org/dev/peps/pep-0487/)
Using vstack on x[0], let's say x[0] = array([1, 2, 3]), will give array([[1], [2], [3]]). I get what you're saying about just computing out(x,w).T - y.T once, and I can easily change that, but my real problem is concerning how to perform the vectorization computations all at once. I'll add an example to my post and fix the out functions.
You are doing sum(A.T * vstack(x), 1) , isn't sum(A * x, 0) the same? Seriously, refactor a little bit, you are computing out(x, y) every time. If that is expensive no wonder why is so slow.
 In [13]: np.sum(output[None,...] * x[...,None], axis = 1) Out[13]: array([[11, 10, 9, 8], [ 7, 6, 5, 4], [ 3, 2, 1, 0]]) edit: `np.newaxis == None` 
Thank you so much that made things so much faster!
I've gotten python installed on my phone using Termux, but pandas failed to install.
Use ipython in the future, but just so you can close your current shell: http://stackoverflow.com/a/7008316/724375 You could write this to a file instead of printing 
I hear that - discovered pandas and the excel plugins to read and write files last year. Now I just use python to do all the heavy lifting, then output the transformed data back to excel for graphs. If folks just need the graphs then I'll just use matplotlib to plot the data to a png. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I've been itching to give something like this a go just for the experience. might try it.
http://qpython.com/ I've used it a bit when I didn't have access to a computer, you technically should be able to just drop the site-packages folder for the modules in the app folder and be good to go. 
I wanted to share one of the sources I started out with when I began learning Python: TheNewBoston. He has made 43 video tutorials that will take you through the basics of Python. Now he has updated his Python3 course, which I hope some newcomers to Python can take advantage of. You can use the buttons Next/Prev to go back and forth between the videos. I hope you will enjoy it.
Recruiting.
This will be better received in r/learnpython.
 "".join(random.sample(string.printable, 12))
[removed]
Are you thinking of utilizing this to make a bot learn to deathmatch? I'd love to see that especially if you trained it using [old recordings](http://www.doom2.net/doom2/lmps.html) of some of the better players and could play different people's styles. 
This reminds me of Rich Hickey's [talk](https://www.youtube.com/watch?v=oyLBGkS5ICk) on how broken our dependency management systems really are. Highly recommended watch.
Thanks, I actually tried installing numpy in Termux recently and gave up. Using these LDFLAGS, it works!
Does anyone have insight enough to say how easily the language of the actual scrabble game (dictionary and alphabet of the tiles) can be changed? Is there more to it than replacing `dictionary.json` with a dictionary in the desired language and changing tiles and their values in `config.py`?
Django is a framework for web development, as I'm sure you know. So all it does is tie together front-end, back-end and make your life generally easier when setting up a full-stack website. You will still need to know how to make a website though, so learning HTML, CSS and Javascript is a must if you want to build anything with Django. These days fancy ways of doing Javascript is all the rage, so making your front-end using React for example might look attractive on your CV. So I would suggest that on take a day or two to learn how to make a simple static website. Then make another site with some cool Javascript functions, and maybe make it responsive using Bootstrap. Once you can make simple websites pretty easily, make one with a back-end. That means, it should retrieve information from a database. This is where you will start to use Django. Git is something you can learn as you go by always having your project on something like Github. Using Django, you won't really have to know any SQL to make a website using a database like MySQL or Postgresql, but it is always a bonus to know the underlying technology of the tools you are using. When you can make websites that allow users to register, maybe even through something like Facebook or Twitter. And your website stores most info in a database and serves it to the correct users like most normal websites do. Then you should see if you can deploy your site to the public. This process will teach you many things, and it will also allow you to show off your project to potential employers. 
It does sound like you're covering different use cases. The next time I have a project of that size I'll give Fire a try. Thanks!
I'd rather create passwords out of sentences, with punctuation of course. If I were to create such a password generator I'd probably look at the structure of [this old gag program](https://gist.github.com/stemid/3058437) first to break the sentences into sections and then randomize words for each section. But that would also require some sort of categorized wordlist.
What.
We're looking for a Django developer. Depending on the skills you already have, we would consider hiring a person such as yourself, but we're based in the UK. We look for motivated individuals who are self starters. 
no, fstrings were simply not ready when 3.5 was released, and minor releases only backport fixes, not new features. the difference between fstrings and print function (and why there is a `from __future__ import` for the latter) is that while f-strings allow a syntax that was previously an import error, print functions *change* the behavior of already working code. thus, they need a more gentle introduction (opt in sine python 2.whatever, always-on starting python 3) lest they break existing code.
Ok, I think I will just have to not use f-strings in any code I want to share for a while and stick to `.format` type strings. It is slightly sad because f-strings seem nicer than `.format`. e.g name = 'usinglinux' print(f'Hello {name}') # vs print('Hello {}'.format.(name))
If anyone is interested: reorder = lambda eq: '+'.join(sorted(eq.split('+'), key=int))
Saved for later, thanks 
Great lib, but consider this: fire.Fire(Example) Next person who is not aware of the library would have to look it up. That is not a good thing.
Gratz on the move to Python3! What was the hardest part?
This is an effort to convert Python code to Java bytecode to run on Android. https://github.com/pybee/voc
This is Python, there's never "no way". :-) You could also do this with a funky source encoding that does a transformation of f-strings into regular `str.format` calls. Or -- and this is not quite the same -- you could write your code with pseudo f-strings like, where `f` is actually a formatting function that uses [`sys._getframe()`](https://docs.python.org/3.6/library/sys.html#sys._getframe) to get the caller's local variables. I don't recommend using either of these methods in real code -- they're both total hacks!
Using dicts like this is a code smell that hampers maintenance. If you know at coding time the specific values of keys in a dict, it's not really a mapping you want, it's structured data, which a class does in a much more robust way
&gt; I generally feel that the AttrDict as described in the article is a code smell. Any reference for this? &gt; These developers don't draw the line between "models" and "views" clearly and as a result they frequently put structured data objects into elaborate nested dicts and lists (to serialize them later into JSON/XML/etc) instead of domain objects. What problem does this cause? In my case, there is no presentation layer. I'm consuming REST APIs from different providers and want to main code body to uniformly access these APIs so I override the accessors to the data when appropriate when a different provider has a different label for a similar JSON key or if I need to do some computation to provide a logically similar result. &gt; When I take the role of a maintenance developer I assume that attribute access means I'm working with models Model is the layer above your raw data. So wrapping a JSON result in a DotMap is a model of sorts? &gt; a system serialization boundary That's a new term to me. 
&gt; Using dicts like this is a code smell that hampers maintenance Says who? Really, what reference states this? &gt; If you know at coding time the specific values of keys in a dict, it's not really a mapping you want Again, who says this? What software engineering text says this? Where in the Python docs is this? &gt; a class does in a much more robust way And what would do with a class? The same thing that `DotMap` is doing for you pretty much? I subclass DotMap and add methods when I need. 
Thanks for the great article. Is there a github repo for the skeleton project? I see some gists related to the article, but it would be nice to have the full project as a repo. Thanks.
Good idea, later today I will create a repo with the whole project.
Writing a tool for Windows machines that scrapes the system for information, puts the system info onto an image and sets that image as the desktop wallpaper. Using Task Scheduler to run it at log in. I call it Morpheus.
Thanks for the shoutout! The backstory behind the challenge is that I played a game of Scrabble with a coworker at a company game night event, and as I was looking at the list of scores and the final board after the game, I started wondering if it would be possible to recover the words played given just the numeric scores for each player on each turn. I mentioned this to some colleagues, and here we are! My implementation (in Clojure, not Python) can be found here: https://github.com/will2dye4/scrabulous (It's not quite done, I need to update the readme, etc., but the code is there.)
How about... name = 'foo' print('Hello {name}'.format(**locals())) You're nearly there, but not quite.
You could try 'automate the boring stuff with python'. The author (Al Sweigart) of the videos also has an accompanying book with quizzes at the end of each chapter along with projects. The a portion of the video series can be found on youtube, but the entire series is found on Udemy also.
I got to the 3rd video and had to skip it because every time he said 'string' like 'shring' it made me die a little inside... Great videos otherwise XD...
I thought TNB had a bad rep on reddit. Might be for different languages. In any case I've used his Python objects/classes tutorial in the past which is really good. 
As a beginner programmer, I've heard a lot of negative things about thenewboston from this subreddit. Told to stay away from his videos because of the examples he uses like creating methods named tuna and what not. I do not see a problem with it but experienced devs have vouched for this.
Close the console window and open a new one? Other than that, try: chcp 850 set PYTHONENCODING= code page 850 seems to be the default on my system. 
Thanks for the response, I've tried that and a few other variations, still getting the same error. 
Great idea! Not only that, it's great to know that whenever I want to do make something in a menu on OSX I can start off with your code :)
Thanks! :-) &gt; Not only that, it's great to know that whenever I want to do make something in a menu on OSX I can start off with your code You should check out [rumps](https://github.com/jaredks/rumps), it offers an awesome layer of abstraction over the Status/MenuBar APIs and also notifications. I wrote Simon from scratch because I wanted to learn more about `pyobjc`, and I think that if I'm going to develop this further into what I want, I could use more control over the APIs.
Several python scripts I run with JSON loaders are all giving the same JSON decoding errors ever since I performed the operation stated in the description. This error still persists after opening a new console, restarted computer also.
I know people really don't like him/them for Java and c/c++ but I'm not sure about python. I prefer the books and text tutorials personally
Got it, thanks for your help!
Please, how can we help when you give us nothing to work with? Cut and paste the exact error that you are getting, the snippet of code where the error occurs and a sample of data that causes the issue.
The combination of --no-index and --find-links options to the pip command can essentially turn a local file system directory into a private, local index -- of course you are left with the burden of keep that index up to date. pip3 install --no-index --find-links /tmp ipython
Looks Awesome!
That's not a stupid question, it's actually a good question! One of the first things to do is usually run the automated code tests (often called test suite, or unit tests) using the new language. If any of them reports a failure, and nothing else about the system has changed, there is *possibly* a problem with the new version. This may be a regression (something that worked in the past, and now fails but should have still worked) but there may also be a subtle change that's made on purpose. It could be that the old code mistakenly relied on a particular way the old language version solves something. When that is changed in the newer version, the code may break - and hopefully that breakage is exposed by one or more unit tests that fail. Python itself (the development version) actually contains a substantial unit test suite that tests thousands of things in the language and the standard library for correct expected behavior. That way most problems will never see the light of a release! Ofcourse you'll also find possible issues by just using the new version in day to day development work or by upgrading a test environment with it to see what might pop up. Purists or experts may study the change log or even the code changes to compare against what they expect the behavior to be. 
This is really quite amazing. Thank you for sharing this. I am making a [big mind map of all the awesome things](https://github.com/nikitavoloboev/research) and have added your project there. :)
There's no difference between a filename or a relative path or an absolute path: they can all be passed to `open()` as-is. [EAFP](http://stackoverflow.com/questions/11360858/what-is-the-eafp-principle-in-python). File globs like `directory/*/something*.py` are usually expanded into simple path names by your shell before those names are handed off to the invoked program as arguments. The examples in http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_04.html use `echo` but the principle is the same. https://docs.python.org/3/library/argparse.html is a pleasant way to handle arguments. It's slightly orthogonal to the specifics of filenames, but there's ample examples.
Ooh, bacon
thanks! more deep - math related projects will be added !
Thanks for posting this and for the link to rumps. I have been trying to make a similar app to monitor my weather station and haven't really gotten very far yet.
You make a scatter plot of the city longitudes and latitudes exactly as you were doing so in basemap.
Unless you can give us that shapefile you're reading, no one can directly translate this for you because we have no idea what format your data are in. Cartopy has [support for reading shapefiles](http://scitools.org.uk/cartopy/docs/latest/tutorials/using_the_shapereader.html?highlight=shapereader). The path of least-resistance is to use that functionality to get a [geodataframe](http://geopandas.org/data_structures.html), and then manipulate from there to get a sequence of latitudes and longitudes to plot on your scatter plot (or plot the resulting [geodataframe](http://geopandas.org/data_structures.html) directly).
Can you explain this? 
It wasn't hard at all. Getting over the stubbornness of just using what I learned in college is the hardest part. Python 3 is actually easier, I think.
As is all great code. Praise GitHub.
you mean this reaction diffusion simulation? this is invented by Turing to give a formal theory to explain the pattern on animals ( like zebra, tiger) or fruits (like watermelon). it's an interraction of two chemicals, related by a partial differential equation. but this simulation does not need any deep math. the coming projects will. 
i created a "New File" in IDLE and i make a program and save it then run it. but if there is a error i don't get any Red in IDLE program just launches and closes in Command Prompt. Can i debug in this "New File" 
I've been working with a lot of different data lately, and will probably continue to do so. I've found that Notepad++ works best for me. I've configured a nice theme that's easy on the eyes, the "Folder as workspace" option for the project I'm working on, and CTRL-R to run my python scripts. Also Notepad++ supports multiple sessions so it is easy to save where you're at on each project. Plus, it is FAST when loading data.
In IDLE hit "Run Module" or press F5. That'll either run in the IDLE console or open a new console and run. That'll print an error traceback if one occurs. To debug, in the IDLE console hit Debug -&gt; Debugger. Then when you hit run module back in your script it'll start the step by step debugging. You can right click and press "set breakpoint" to place breakpoints later in your scripts. 
Sounds awesome, did you put your code on GitHub?
Works great on El Capitan :)
No, which is why I tend to like it. I'm prone to learn programming the hard way and debug in the shell. That helps me remember things better to be honest. But that's just me, everyone has their own way of learning and retaining knowledge. 
That's a special method that retrieves shapefile data from Natural Earth automatically, and caches it on your hard drive. If it's not working, then you probably have an internet issue or you didn't give it the right file name. In this case, the latter happened. *If* you want to use the magic download function, then you'd do this: import cartopy.io.shapereader as shpreader shp_fn = shpreader.natural_earth(resolution='10m', category='cultural', name='populated_places') But this is beside the point. You just want to *read in a shapefile* and plot the points it contains. You can do that generically with the `Reader()` on that linked page. You get back an object that has everything you need in its `.geometries()`, you just have to unpack the latitudes and longitudes like you were doing in your basemap script: shp = shpreader.Reader(shp_fn) xy = [pt.coords[0] for pt in shp.geometries()] x, y = zip(*xy) ``` Then you can plot like normal on your cartopy-infused Axes.
I use Jupyter console plus Sublime Text (used to be xemacs) and Jupyter notebooks.
So how do you do the processing without pandas? Using numpy or file reads directly? 
atom.io is awesome
Interesting. So what did you do to resolve the memory issue?
thanks! As soon as i do I will :)
Should be able to do this with [watchdog](https://pypi.python.org/pypi/watchdog) and your choice of audio modules/programs with a decent cli interface.
Very cool. Can you post a gif?? 
Take a look at the source for the form inputs, as far as I know you can still pass the params based on the input names.
Excellent tutorial, and the videos are short enough that you don't need to commit an hour or two for each one.
Exactly, whatever `name="blah"` is set to for that particular input.
Python is very good for making quick programs to manipulate files. The aspects of the program you're talking about that involve opening/moving/deleting files is very easy and a google search away. Try 'import os' for dealing with file/folder paths. If you google 'python os' you can find more documentation in this module. When it comes to manipulating the audio I'm not sure. This program you're working on is very similar to a digital signal processing class I had in college. Except we used a picture and Matlab instead of audio and python. Good luck.
I've use PyScripter in the past, it works pretty good and is free. https://sourceforge.net/projects/pyscripter/
This subreddit is really more of a support group for those of us who have been lured in by Python's elegant and expressive syntax and dynamic ecosystem and now suffer from increased productivity and enjoyment from software development. My suggestion is to run as far away from Python as quickly as you can, before you find yourself employed as a software developer who enjoys what they do.
I love working with fractals, because such simple algorithms can build such amazing patterns. I'll look through these scripts tomorrow, thanks! 
jupyter notebook is a great choice, and use emacs occasionally
Diffusion limited aggregation is also a fun, related experiment that's very easy to code.
/r/learnpython 
[removed]
This is trippy
Hi /r/Python, Some of you might know the [Process Macro](http://www.processmacro.org), written by Andrew F. Hayes to facilitate the estimation of moderation, mediation, and conditional processes. This great library unfortunately required to use SPSS or SAS (proprietary softwares), and had no equivalent in open-source langages (such as R and Python). I therefore worked in my spare time a Python re-implementation, and released yesterday the first beta version of the library. It includes almost all features of Process, and offers new opportunities to save and plot the results. Full documentation is available on the GitHub repo, I'd be curious to hear your thoughts and feedback on this!
\+ "script" addon. 
Hi there, I'm from the Scalingo team, As mentionned in the answered, the good method to handle this use case is to use asynchronous jobs. With Python, you can do that pretty easily with celery[0], we've developped a Python Flask with Celery sample[1] you can get inspired of. Actually using long-running HTTP requests is not a good practice, it doesn't scale well, that's why we're encouraging better application architecture with background jobs. If you've any question, don't hesitate to reach our support from the in-app chat, we answer really quickly. :-) [0]. http://www.celeryproject.org/ [1]. https://github.com/Scalingo/sample-python-celery
Sure, I will strip the upgrade off
`is`is a test of object identity in Python, and tests if two references are pointing to the same object in memory: import copy a = [4, 5, 6] b = a #b points to the list a, it references the same object. c = copy.copy(a) #c is a copy of a, it does not reference the same object. a is b #Will return True a is c #Will return False When you write `[4, 5, 6] is [4, 5, 6]`, you effectively test if two different objects are the same (i.e. whether they are pointing to the same emplacement in memory), not if two objects have the same content. What you want to write instead is `[4, 5, 6] == [4, 5, 6]`, which will return `True`.
And [format](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) your code correctly.
it depends
A *hands-on, live demo* on how to automate a task relevant to the engineers' daily activities is a very good introduction to stress some of Python's strengths as a generic, multi-purpose language! You could e.g.: * show how to write a quick'n'dirty prototype using a Python interpreter (console-based: IPython; web-based: Jupyter notebook) * then move to a more structured script * bonus points for putting the script under version control for easy sharing and reviewing As mentioned by /u/efmccurdy, Jupyter notebooks will come very handy to load and manipulate data from the browser and toy with plotting libraries (pandas, matplotlib...). Things can even be spiced up a bit using [XKCD-style plots](http://matplotlib.org/xkcd/gallery.html) :)
does nobody read the bloody sidebar?? /r/learnpython 
does nobody read the bloody sidebar?? /r/learnpython 
Just because you're using the words key and value in your for loops doesn't mean that you are getting those portions of the dictionary returned to you. You can name those whatever you want. To get what you are looking for you have to specify them like this: for key in dctCourses.keys(): and for value in dctCourses.values(): Once you make those changes, you'll get these results: 1000 1505 1515 2550 2560 Fundamentals of Programming Intro to IS Visual Basic II Visuals Basic I Web Programming Overview Which is what I think you're after. Now in order to cut down on repeating the same code, you could just write it as so: dctCourses = { 1000:'Intro to IS', 1505:'Fundamentals of Programming', 1515:'Web Programming Overview', 2550:'Visuals Basic I', 2560:'Visual Basic II' } lstCourseKeys = [] lstCourseValues = [] for key, value in dctCourses.items(): lstCourseKeys.append(key) lstCourseValues.append(value) lstCourseKeys.sort() lstCourseValues.sort() for item in lstCourseKeys: print(item) for item in lstCourseValues: print(item)
[Emacs](https://www.gnu.org/software/emacs/) with [Elpy](https://elpy.readthedocs.io) is pretty featurefull. It does highlight a line in red when an error (with flycheck). See also a [list of python extensions for emacs](http://wikemacs.org/wiki/Python). Not to mention that git support with magit is pretty amazing, as well as other packages like [helm-ag](https://github.com/syohex/emacs-helm-ag), hydras, and more !
Sublime + Anaconda plugin + mypy plugin. Probably some other plugins as well, but they're the most python focused.
Looks good, but you should really read PEP8.
Some I've used a lot that's not mentioned here: * Komodo Edit * Visual Studio Code
Tried a lot of different IDE's / editors. Now I am satisfied with Thonny: http://thonny.org/ It is very clean, small, yet powerful!
`chain.from_iterable` is a shortcut for `chain(*iters)` except its lazy as you pointed out. `chain.from_iterable` is good as a flatten and I tend to use it as such. I prefer `chain` when there are only a few things I want strung together. 
Well, the ultimate impact of using iterators versus non-lazy sequences is memory consumption. An iterator only produces one value at a time and you're free to do something with that value and then let the GC pick it up. They affect your program design in some specific ways, too. You'd need a non-lazy chain if you needed to index into the sequences for some reason, or if you wanted to sort or 'change' the data in-place somehow ( calling back to an API to update data, DB queries, idk ). If you don't need to do any of those things, or if you know for certain that the values produced by the chain() call will be extremely numerous, I would recommend preferring the lazy implementation.
You will need a module to load the Excel file into a Python usable format. The csv module is great if the excel file can be saved as a tab delimited or a comma separated file. If it has to remain .xls, the Pandas module will allow you to load the file. From here they will behave a lot like a Python dictionary. You can iterate through the actors list and pass the actors name to your Selenium functions. As far as writing, I usually create an output.csv file if I'm using the csv module. You can change your Excel file in place using Pandas, there are some values you need to set when you save the data, I would read the docs on using it, I have done it but not very much. (I have a feeling the csv module probably can handle Excel files too, but I never needed it too, so I haven't tried it out.)
Linked from the github: Interactive web version! http://pmneila.github.io/jsexp/grayscott/
They recently added support for Google Keep within Google Docs. Have not looked at it at all, but possible the traffic is easier to automate there.
You're right! Thank you. :-) I didn't pay much attention to the implementation of `bytes2human()` as it seemed to work (I took it straight from [here](https://github.com/giampaolo/psutil/blob/master/scripts/meminfo.py)). Your second solution is much better. Do you mind if I use it?
Yea. You need to import os :( You also have to have it in the file you're checking vs importing the class. Not quite sure how to fix that.
&gt; An iterator only produces one value at a time and you're free to do something with that value and then let the GC pick it up. &gt; You'd need a non-lazy chain if you needed to index into the sequences for some reason I think you misunderstand the laziness. Both chain and chain.from_iterable lazily iterate the iterables they're given, the lazy/eager part is the iterable of iterables: chain takes them as direct parameters (= a tuple = eagerly evaluated) while from_iterable takes an iterable of iterables which will itself be lazily evaluated.
&gt; with chain being at least twice as common as chain.from_iterable. My codebase is the exact opposite. I almost never find chain to be useful, but `from_iterable` is very useful. &gt; Of course, what an utter moron Raymond is, surely back during the Python 2.3 runup he should have known about what people'd request going into Python 2.6. Yeah its too bad Python has never had a version that breaks api compatibility in which one could hope to address these kinds of issues. You make a good case for switching to Rust since python will never be able to fix these issues.
Its made me slightly better at my phobia.. I wish I knew a way to get over it. 
&gt; Yeah its too bad Python has never had a version that breaks api compatibility in which one could hope to address these kinds of issues. And maybe it was literally something nobody gave a shit about, and thus was not even raised during the stdlib cleanup. Too bad your insight was not available back there. &gt; You make a good case for switching to Rust Whose [Iterable::chain](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.chain) takes exactly two iterators? Yeah good luck with that mate.
[removed]
some of us might have 5 kids and maybe have not had time yet. only been here since last night 
For my home project, I'm continuing working with Django to get a website idea up and running. While my next steps are diving into CSS, I still have a lot of Django widgets I want to try out to add additional features (such as bulk file uploads).
I built a really nice pytest-based CI/CD pipeline at work that uses Travis, some SaaS github plugins, and created docker images uploaded to internal registry if you're looking for help/advice.
I ran into this too. I am stuck on video 6, i cant retrieve all of the data from yahoo. I even copied and pasted his code from his website and no dice.
I like it. It fits. I mean, a python is a simple and elegant creature. Just a powerful snek with no unnecessary appendages that can get the job done.
Great thread. Even just learning about tools people are using that I didn't know existed alone is useful. As time permits, I'm still plugging away at enriching downloaded bank account statements with things such as daily balance and various crosswalks like seasonal expenses to help predict free cash flow and/or number of paychecks I am ahead of bills, etc. which I am doing in Tableau Public. So far so good with the main purpose being to learn reusable Python knowledge more than anything else.
Nice one. I'll make a good use of it.
yeah, you don't understand template inheritance.
From the Pylokit manual: &gt; LibreOfficeKit currently works only on Linux systems. I guess your only option now is to run said app in a VirtualBox machine running linux. Just make sure you have the ports the app will run on the "port forwarding" in the network settings.
Writing a GUI for SVN because the ones for linux suck and I need it in my workplace. We have been waiting the switch to Git for 3+ years! I'ts not happening anytime soon.
`split()` has nothing to do with it. The problem is that `remove` modifies the list in-place, and returns `None`. When you reassign the original variable to the output of `remove()`, you overwrite the list with `None`. &gt;&gt;&gt; newlist = [0, 1, 2, 3] &gt;&gt;&gt; newlist.remove(3) &gt;&gt;&gt; newlist [0, 1, 2] &gt;&gt;&gt; newlist = newlist.remove(2) &gt;&gt;&gt; newlist &gt;&gt;&gt; type(newlist) &lt;type 'NoneType'&gt; If you have more questions like this it's better to post them on /r/learnpython. Be sure to include which version of python and what OS you are using. 
I don't mean to sound rude at all or anything, but at this point why not use django. I know alot of people here are all for flask but with all these different pain points, i just think it would be easier to get started with django and use the flask boilerplate for it. Nice Blog post!!
I'd love to hear more feedback. Would you mind sharing a minimal example or elaborating more?
Don't say "grow a pair" to someone with an mental illness. Just because it's curable doesn't mean it's not terrifying. 
Don't feel pressured to import everything and the kitchen sink. If you need the functionality of any package, you'll have to accept it's memory usage and find other places to reduce your usage. But if there isn't a need for a module, don't have it there just to safe or whatevs.
Yes it's quite unfortunate. Various severity levels of phobia of snakes is like 30% of the entire human race so very very unfortunate. 
thank you everyone!! I'm sure to get it now 
O'Reilly uses its books to raise awareness for endangered species. That's why only one textbook has a python on the cover. Fun fact. And yes it was named for Monty Python. 
We should pin it to the top of all the posts.
Give out working code and let them modify it in helpful new ways. 
&gt; Cognitive behavioral therapy Where is a good place to start?
Mayhaps it's a plot to lower the pagerank of "amazon fire" in google results for "fire" 
I'm trying to do batch processing of hive jobs ( creation of a bunch of hive/hadoop tables) using python ( subprocess, pyhive or Luigi)
Hehe. Don't you know "understand" means "to arrive at the same opinion"?
tfw requests is the best package on the planet
It's cuz OP only recognized .py file extension as "code". They use everything
This remind me iBatis, which have an Xml file to store query you map to object. I used to like it well because you know the query played by the ORM. Now we are to lazy for that, we let the ORM build and execute the query. 
OK
No. From my own observations, I perceived less question posts on here when the sticky was still around. It prevented me from making the mistake when I joined on last year.
They leaked the coding standards too
Pretty cool functional way of building web pages. I had a similar idea a while back which really kept me awake at night, thinking about ideas. What would be really cool, I think, would be if you could couple it to 'cool-reactive-js-ui-toolkit-of-the-month', so you could get client side and server side rendering.
TABS NOT SPACES!!
Quicker to iterate and then optimize with c/c++ as needed. 
&gt;I've always thought of template languages as weak programming languages That's exactly the point: https://www.w3.org/2001/tag/doc/leastPower.html Programming languages that are stronger than necessary quickly become a nightmare when you're dealing with thousands or millions of lines of code. They attract technical debt like flies on shit.
&gt;This is a professional organization and I'd expect them to use the proper tool for every job. import waterboarding
Hmm?
As far as I can tell it's just a copy of Google's python style guide. 
It is. If I remember correctly the Shellphish team has given a talk at either Defcon or BlackHat about this. A part of their research is being able to perform a completely automated CTF where the systems identify vulnerabilities and even patch them on the fly. It is a really cool topic and when I get back to a position to be able to search for it I will happily post a link a talk about it if no one else has already. Edit: https://www.youtube.com/watch?v=oznsT-ptAbk You can find more info on their site. http://angr.io/
http://docs.python-requests.org/en/master/
 you forgot `from rendition`
#ImportError: No module named waterboarding. \# damn it! I always forget... from Warcrimes import waterboarding ... 
In what universe?
In people's self created universes.
Rekt.
requests is bests
Question from a not so experienced programmer: what's wrong with tabs? 
Warcrimes?
Tfw someone told you to do a talk for a certain time and you only have half that and fill 50% with "aaaaaa" ;-)
They'd probably use PHP for that 
It just you need to choose one or tabs or spaces 
from denial import Warcrimes
despite sean hannity's proclamations, waterboarding is indeed torture, which is pretty explicitly forbidden. 
Guantanamo started as a PHP hacker camp.
It's a bit of a holy war Some people like spaces because they look the same on every computer and the layout is kept the same (while tabs can look like anywhere from 2 to 8 spaces) Some people like tabs because tabs were literally designed for indenting, you can choose the size, and when you use the keyboard arrow buttons one button press goes one layer of indentation. The right answer is to use smart tabs, where you get a feature where your editor tab button makes 4 spaces in the file, but it works like a tab as far as you care.
Tabs are displayed at inconsistent widths across different software suites. So what looks like elegantly laid out and clearly indented code for one person is possibly unreadable for another. They are however faster to input. pros and cons, pros and cons. 
join strings.
YAY?!
Based on the conversation in the github ticket I created that I linked to in 2), it's arguably a bug in the Yahoo API. Where it's denoting the class of stock (companies can release different types, e.g. voting and non-voting), Yahoo uses a - notation, e.g. BF-B. However "." is a legal character for a stock ticker, so "VOD.L" works fine in Yahoo. Makes it a pain in the arse to work around, there essentially isn't a one size fits all. To that end, I'd just suggest maybe switching to Google: df = web.DataReader(ticker, "google", start, end)
Care to share any link?
To nitpick, you just need to be consistent, but you can totally mix them. For instance, your indentation block choice can be "one tab", "4 spaces", or "space-tab-space", as long as you keep the same indentation block choice along the whole file.
aiohttp is pretty good too, feels very modeled after requests on the client side. 
For a new programmer. Why is consistency important?
No, because it was a joke. Maybe I should have said 'Haskell' instead.
Only posers and squares follow PEP8. I'm a rebel. Just the kind of fresh, outside-the-box thinking a tired establishment like the CIA needs.
A Tab will leave a line symbol, and a space will leave a dot symbol in the file. If you mix these two Python will crash. Most modern IDE's and Text editors will auto translate your Tab symbol over to spaces for you, usually 4 spaces, but this number can usually be set. This was a bigger issue back in the day. 
Took me a minute
Sounds like you just need a proper editor :P
I have sublime set up so that I hit tab and it enters four spaces. I've also got whitespace visibility turned on and it allows me to control indentation with a hot-key instead of the space bar. Basically if you're using the space bar to do 4-space indents you're doing it wrong.
Scale as you need. Start with a single threaded solution. If it really isn't fast enough, then you should look at process/thread pools. As you mention, the GIL plays a large role in what can benefit from multi threading. If you are mostly bound by I/O or a library, which mostly execute outside a python context, then you might see large benefits of threading.
They also have some [comment threads](https://wikileaks.org/ciav7p1/cms/page_14588809.html) (through the lens of 'what did other hacking groups do wrong?') about not getting too standardised or reusing code because this creates fingerprints that point back to them, and link tools to one another. But on the flip side, being too unique increases the chance of detection or incorrect implementation. Also discusses string scrubbers to remove accidental inclusions like Active Directory usernames.
Everyone everywhere uses Python. :-)
Screw PEP 8. Now we need a PEP 007!
TIL the CIA uses Python.
But also, keep in mind, QT is not exactly game oriented platform. So probably more basic kivy may be your choice.
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Yeah I'm not sure how easy it is to bundle a QT installation with your game - even though the QT tools are pretty nice and have been used for other games (at least an open-source FreeCiv client comes to mind). 
Still don't get it.
Fake News ! 
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Pip install cia
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If your username was "I_DONT_NOTICE_USERNAMES" this thread would have been perfect
Lol it's mentioned in the leak as well! 
Do they not anymore?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If I were designing something from scratch and high performance were a priority, I would almost certainly use https://docs.python.org/3/library/asyncio.html . If high performance is not a priority, then don't sweat it, anything is probably fine. I will say though that I don't think threads are worth the trouble. If you want multiple "threads" of execution in python, I think processes are the way to go.
I know, but the editors don't and convert depending on settings and version control can't be set to ignore white spaces in Python, so one programmer uses spaces check in code, other programmer checkout the code, his IDE converts 4 spaces to tabs - 100% of code changed. 
Second iteration of my Twitter realtime streaming application: Stocktalk! https://github.com/anfederico/Stocktalk
"proper", somehow Python isn't proper? If you go to any CTF event, you'll find Python everywhere. Exploring binaries and testing exploits is a very interactive process, which is why Python is the perfect fit. You want to try a lot of different approaches and prototype very rapidly. You don't want to spend an hour just to see what you made is useless. Python is the perfect tool for quickly trying crazy ideas and see what works. 
Yep, check out any CTF event, it's full of Python. It's the perfect tool for trying a lot of crazy ideas very rapidly and prototype.
Wow you saw this post? So did I!
Haha, yea. However, I have no interest of getting into the isomorphic app game. I just want standard python semantics instead of the one-off stuff usually introduced into template languages. For example, I don't like how absent data often silently becomes the empty string; I would rather keep standard python semantics of NameError, AttributeError, KeyError, etc.
I have no experience with the raspi but [here is something I haven't gotten around to finishing that might help you get started](https://paste.ofcode.org/uYKDYENhat6VG2p8HwzmHt). You basically want to reverse the English to Morse function.
I already have a batch file that starts a couple standard programs on login, so I could just add this script to the list of things there. Or just make it a single button that starts the program when clicked rather than auto running when something is dropped in the folder.
I am working on my first work project, we will see how far I get. I am importing 4 xlsx reports, scrubbing the data. Once scrubbed, I am going to export as one sheet, better yet, I will insert into a macro sheet I have in place, not sure if that is possible. 
Probably about 2 minutes
Already there-- batteries included, right?
this deserves more upvotes
I guess that is a fair trade for saving $0.00000005 worth of disk space.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yeah but secretly he likes the ones from Russian programmers
... and I'll bet 5 bucks there's a `trump-hotel` PyPi package 
pip install CrimesAgainstHumanity
What a ethralling sub thread! Does google recomment 2 or 4 spaces. I can;t wait to tell my date later tonight over dinner
Thanks for the share I am making a POS app with Flask and this would be a great addition.
http://giphy.com/gifs/wtf-what-gif-oaZk0WNSO7fXi
interesting. are DART, UNDERMINE, PALANTIR, or TYBASE familiar names to any of you guys?
My team doesn't use Python, only Java and Ruby :( (though Ruby has slowly started to grow on me over the last year)
solved it my self FO=open('myfile.csv', 'r') while True: loglines=FO.readline() if loglines.find('my search') &gt;=0: print(loglines)
Yes, my date is very much into code formatting. It makes me sad that i got so many downvotes . I thought /r/python would be supportive of my dates interest. I guess /r/python is a bunch of chauvanists that hate women
Your grammar, spelling, and punctuation are atrocious. You are clearly not into any manner of formatting or attention to detail. 2/10 level trolling.
Thanks for posting that, Billsil. I will need to load WMI to get this running, but this looks like a good start. 
I do use Vim over Emacs
) Sorry I think you dropped this
/r/learnpython you can run a python script from anywhere by providing the absolute path to the file. Open the Anaconda prompt and execute: python C:\Users\Thomas\Anaconda\first_program.py furthermore, there's no need to put your python scripts into the Anaconda folder. You could for instance put them into C:\Users\Thomas\my_python_programs\ or anywhere else...
Emacs is love.
/r/learnpython And, really, do your own homework. You'll get much more out of it. Finally, if you're finding this as hard as it appears from your post history, talk with the instructor. You're missing something here. See what it is. 
&gt;###Parentheses &gt;Use parentheses sparingly. /r/lisp is gonna have a heart attack.
The UN has declared that forcing people to code in PHP is a form of torture.
Wikipedia :P Or google. Should be easy to find someone to help you or you could go it alone. The latter takes more time but is free. Fixing phobias is really simple actually. You put up a picture in your house that is uncomfortable but you can handle. Like a comic book snake or something. Then you look at it a few times a day till it loses its power. Then touch it until that's ok. Then change to a scarier picture. Rinse repeat. That should take you almost the full distance just there. 
PEP-8 would like a space after your hash.
Why would you post this here??
While true, my current team does not do security work. 
I feel very sad about your bad attitude :C
I bet its the CIA's doing.
I assumed he misread it. 
With all respect, this is not a Python related question, and also if it was, /r/learnpython or /r/vscode is a better place to ask for help. Also, you might like using PyCharm.
[Image](https://imgs.xkcd.com/comics/ted_talk.png) [Mobile](https://m.xkcd.com/541/) **Title:** TED Talk **Title-text:** The IAU ban came after the 'redefinition of 'planet' to include the IAU president's mom' incident\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/541#Explanation) **Stats:** This comic has been referenced 242 times, representing 0.1595% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_denj39h)
I know someone at $giantTechCompany who did this with internal wiki pages because his team managed the core infrastructure. If something is going wrong, having to rely on documents on a flash drive was a real worst scenario
Also if you are doing covert operations, you don't want an extremely unique and thus easily identifiable style. 
I just found it today via https://groups.google.com/forum/#!forum/vfx-platform-discuss About the import, it is strange, because it should work: https://github.com/mottosso/Qt.py/issues/133 Maybe you could open a new issue for it.
I'm currently enrolled in an undergrad practical fundamentals of cybersecurity course at my uni, and last week, we used angr to script what we'd normally use gdb for in what's called a "capture the flag" assignment. The creator of the binary will hide away a specific string, like "flag{th1s_1$_th3_fl4g}", purposefully deep within the binary and only obtainable (normally) through some modification to the execution order of the binary. Originally, we learned to use the GNU debugger GDB for many weeks of CTF assignments, but last week we used Angr to script a way to explore many, many paths of execution in a program. Through adding constraints to inputs and explicting marking some parts of the binary as "avoid", angr would eventually navigate it's way to the end of execution (and hopefully result in a flag!) through some sort of either statistical model (maybe similar to sqlmap?) or through simply brute forcing all possible routes of execution. It's a very complex tool with lots of depth, and I've only really scratched the surface. We might be doing more of this in the later weeks, but this week moving onto forensics, buffer overflow attacks, shellcode, and circumventing stack protections by compilers. In relation to python, we're using a library called pwntools (in addition to the obvious and incredibly useful set of tools provided by Linux and GNU).
I'm a sophomore at a state school in the southeast US. It's a decent school (it sure has taught me a whole lot in a short amount of time), and we have a great offensive cybersecurity program which very often leads to jobs in places like the CIA, NSA, or the FBI.
That's because they are awesome base standards to start from.
https://en.m.wikipedia.org/wiki/Palantir_Technologies
It's ok pal.
Oh, what an impressive project! I love it.
I was trying to make you feel better haha
I like the parting words in the coding conventions page: &gt;Use common sense and BE CONSISTENT. If you are editing code, take a few minutes to look at the code around you and determine its style. If their comments have little boxes of stars around them, make your comments have little boxes of stars around them too.
You still loos the advantage to display the 4 spaces as like 8 spaces don't you? With tabs you don't 
Nice shitpost
Fair enough. I haven't used PhantomCSS in a long time. Here is an article mentioning a different library that uses the same set of tools: https://css-tricks.com/automating-css-regression-testing/
Oh well, if CIA had used Python3 exclusively there would be no Trump now... Because we all know how bad is Python2 at handling non ASCII, and I will for no obvious reason at all mention for example, text in azbuka. :0)
The real question is, is it 2/10 or 4/20? 
damn, seems like i didn’t check properly. lines like this QtGui = types.ModuleType("QtGui") apparently make it work. didn’t know that!
Me too about you! LOL!
Don't do that. Bad non-deterministic posix.
does nobody read the bloody sidebar?? /r/learnpython
Overall the article is very well written, I really enjoyed reading it, but a few technical "mistakes" or improvements... ---- ## 1. Configuring SQLAlchemy URL POSTGRES = { 'user': 'postgres', 'pw': 'password', 'db': 'my_database', 'host': 'localhost', 'port': '5432', } app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://%(user)s:\ %(pw)s@%(host)s:%(port)s/%(db)s' % POSTGRES You should use [`sqlalchemy.engine.url.URL`](http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.engine.url.URL) here instead: POSTGRES = { 'drivername': 'postgresql', 'username': 'postgres', 'password': 'password', 'database': 'my_database', 'host': 'localhost', 'port': '5432', } app.config['SQLALCHEMY_DATABASE_URI'] = URL(**POSTGRES) Of course you can also pass the `drivername` manually as a kwarg to `URL` if you don't want it in the config dict. ---- ## 2. Unnecessary method overriding You probably don't need this in your `BaseModel`, unless you want to explicitly shutdown the usage of keyword arguments: def __init__(self, *args): super().__init__(*args) Normally you'd want to write this instead to allow keyword arguments too: def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) But since the function doesn't do anything other than call `super()`, you can just leave it all out since that's done automatically! So no `__init__()` required. ---- ## 3. Multi-inherting super's super I believe ~~this is all wrong~~ the multi-inheritance here is wrong: &gt; If you have created a base model (let’s call it BaseModel) which inherits from db.Model, and then use it to define other models which also inherit from db.Model, it is possible you mixed the inheritance order: BaseModel should be first and then db.Model so that the method resolution order is consistent and BaseModel methods are not overrided by db.Model methods which have previously been overrided by BaseModel methods. Find out more on stackoverflow. &gt; Your class should begin with: &gt; `class YourModel(BaseModel, db.Model):` Your `BaseModel` already inherits `db.Model`, your other models should just inherit from `BaseModel` and nothing else. The `__abstract__ = True` will not be inherited if that's what you're worried about :) All the MRO stuff is correct, but it becomes irrelevant since you're back to single inheritance now.
Yeah but Python is kinda the default tool in forensic and penetration testing.
Way to go us for remembering it's just the internet!
*that*?
In an ongoing tower defense game, this week I'm working on tower upgrade levels and tower stats. Since balancing requires knowing creep stats, I will be working on that too.
For little boxes, use wingdings font as your default.
How can I go about doing this? I'm unfamiliar with Linux. Would windows do the same job?
Oh, and make an annoying noise when you add a closing ) that has no (.
Do they use tabs or spaces? Or is that a secret?
ImportError: No module named wmd
Oh yeah definitely. I'd suggest using a windows laptop for this. However, if you're absolutely stuck with an android tablet then linux is your best bet... As you progress in python you'll probably use linux eventually, and may fall in love with its programming features (such as the package manager called apt-get, and a functional pip). But for now you should forget about that and just get turtle running for class, and the easiest way for you to do that is with a windows laptop. Is a windows laptop an option?
Thank you :)
&gt; Use imports for packages and modules only. See, no people imports, all good :D
DevNull as a service
No. Being bloody it is too graphic. ;)
Wouldn't want any data leakage would we?
Thanks a lot! Its a little scary getting started lol.
Everyone knows this, though. Why is the CIA hiring people who don't know how to avoid muddling global scope? Maybe it's just a guide and has things like that for completeness, but still it sort of bothers me.
Think of it like this, the CIA pays you by the hour to type out a style guide, you might as well include everything. 
This is so boss!
Christ I hope whoever wrote this library puts it in his CV. "Developed a library used by the CIA"
Believe me, not everybody knows this. These are arguments I've heard in favor of using global variables. * But I don't want to pass the configuration around to everything that needs it. * It's simpler and easier to reason about. * I can adjust the value in one place and change the behavior everywhere in the program. * We just have to put locks around it, and it will be threadsafe. * I can adjust the behavior of something deep within the call stack without needing to change the function signature all the way down. Now, I know what you're thinking. These aren't actually arguments in favor of global variables. These are many things that are horribly wrong with global variables. That this makes it impossible to reason about code without knowing the runtime state of the problem. At some point, it is just easier to have a style guide, then use an argument from authority.
The documentation for [FuncAnimation](http://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html#matplotlib.animation.FuncAnimation) says this of its third argument, frames: &gt; Source of data to pass func and each frame of the animation &gt; &gt; If an iterable, then simply use the values provided. If the iterable has a length, it will override the save_count kwarg. &gt; &gt; If an integer, equivalent to passing range(frames) &gt; &gt; If a generator function, then must have the signature &gt; &gt; def gen_function() -&gt; obj: &gt; &gt; In all of these cases, the values in frames is simply passed through to the user-supplied func and thus can be of any type. &gt; &gt; If None, then equivalent to passing itertools.count. So, the argument to your function comes from this. In the simple examples, something like range(100) is used, so `animate()` is going to be called with a different `i` value for each frame. @K900_ is correct about you passing in (not invoking) a function object. `FuncAnimate()` invokes the function once for every value provided by `frames`.
 "Oops! That page can’t be found. It looks like nothing was found at this location. Maybe try a search?" This basically sums up Microsoft for me.
Might as well post his work to his personal github account
Professional? Nope. Government!
Great! very helpful!
Alternatively: ``` cd Anaconda python first_program.py ```
Thanks a bunch! 
I like the purity and it is very readable! 
It's almost as if there isn't already a set of standards for python.
Well I would make 4 spaces = tabs a standard in terms of line length, if you choose to change it on your own you can but you gotta deal with longer/shorter line lengths
Recommended reading: [“Hacking: The Art of Exploitation, 2nd Edition” by Jon Erickson](https://www.amazon.com/Hacking-Art-Exploitation-Jon-Erickson/dp/1593271441): this is a book with accurate and detailed descriptions and commands of common vulnerabilities and corresponding exploits. It is an excellent book for understanding buffer overflow vulnerabilities, string format vulnerabilities, and shellcode, and other exploitation development. “[The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws](https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470)” by Dafydd Stuttard and Marcus Pinto. The book provides a comprehensive and thorough coverage of web security mechanisms, and web vulnerabilities. “[Information Security,” 2nd Edition](https://www.amazon.com/Information-Security-Principles-Mark-Stamp/dp/0470626399), (ISBN 978-0-470-62639-9), Wiley, 2011, by Mark Stamp. The book provides a good coverage on commonly used cryptographic algorithms and cryptanalysis techniques, and security protocols. Edit: Thank you so much for the gold! It's very much appreciated. 
Atom and Sublime Text are both great text editors. PyCharm if you want an IDE.
Dude thanks a ton, especially on the lectures / course stuff, super interesting!
Absolutely, let me know if you have any questions. 
Vim, if you want a powerful command line editor with a learning curve. Sublime Text if you want a powerful GUI editor without a learning curve, which isn't free however. Atom if you want the power of Sublime Text but slower and less stable. Another Editor/Mini-IDE that might be worth a look is [Geany](https://www.geany.org/). 
Don't know if it's still the case, but their website used to be built with Zope.
This is great, thanks for the info!
Vscode for open source sublime alternative. Much snappier than Atom in my experience.
Sublime is not free, though.
Interesting topic and use of Haar. But the article was severely lacking in any explanation of what OpenCV Haar is and what it's doing. I had to look it up, which may be the purpose, but it was hard to go back and forth for implied "ease of use" of the code.
Wednesday night dates are strange. 
You could always use the rare PEPE guidance.
If you're a strong programmer, the docs might be a good place to go. If you know what something does, just digest the function signature and move on. https://docs.python.org/3/reference/index.html https://docs.python.org/3/reference/datamodel.html (This will teach you how python objects work) https://docs.python.org/3/library/stdtypes.html https://docs.python.org/3/library/functions.html https://docs.python.org/3/library/functional.html 
Are you on a mac? I really like BBedit The makers of BBedit used to make TextWrangler as the free version and BBedit as the premium. Recently, they made BBedit "freemium" and discontinued TextWrangler. The free tier is really pretty darn powerful and is all I have ever needed! With that said, I really love the software so I (and by I, I mean my employer) bought a full copy. I really struggle with text editors. I have my own workflows and preference. Every single editor has its own idiosyncracies. It just so happens that BBedit's align with mine. On linux, I have yet to find something I like as much but will check out some of the responses here. (I use a mixture of gedit and vim, neither of I love)
You could also use python-dotenv.
Thanks for the feedback. Will definitely help me improve my next post. Sometimes going deep into details can make the post too long for an average user. I am learning to find the balance. 
I also highly recommend just reading through the docs. I came from an embedded C background, and an hour or two reading the docs was enough to get me writing Python. Also read through [PEP 8](https://www.python.org/dev/peps/pep-0008/), the style guide.
Agreed, it means that they don't use tabs!
&gt; It helps them focus on the task of programming and not mucking about with text. That's just not true. Vim has a considerable learning curve especially for beginners who may not even have used a command line before. Having to fight with an unfamiliar and unintuitive editor (which it absolutely is) is a huge distraction for someone who wants to do some simple programming. There are definitely easier ways to get some ascii into a file and run it.
Basically a virtual environment allows you to a have specific set of packages installed for a given project or set of projects. For example, if I'm building one project that uses Django 1.8, and another project that uses Django 1.10, I need both versions of Django installed somewhere on my machine. I would set up and activate a virtualenv for each project, and within each virtualenv install the packages I want for that project. Now if I start another project that uses the same packages as one of those, I could build it in the same virtualenv. Or just make a new virtualenv with the same packages installed. Really it's just a way to avoid the problem of updating a package for one project and then that update screwing up other projects because they relied on a specific version of that package. 
Pretty neat!
For full IDE I've been using pycharm and its great. If you just want a text editor I would highly recommend notepad++ Also if you are already familiar with Visual Studio the new 2017 edition now has full python support
Emacs is great. 
If you want a Python IDE then I would recommend PyCharm. On OS X, I really like TextWrangler. Across platforms, I generally love Nano with syntax highlighting!
Vim is far and away the best, but it can take a little while to figure out how to use it.
This is usually not popular, but I use ActiveState's open source KomodoEdit. On Windows and Linux. For Perl, Ruby, php, Groovy and Python. I like it a lot. Not as heavy as Eclipse or Intellij. 
I realised what happended. @hovissimo though that I was asking how to do it, but I actually share an article.
Hmm, indeed. Sorry about that.
`pip install waterboarding`
Atom is pretty good and works out of the box pretty well, once you are more comfortable with it and programming you can start adding packages to do more advanced stuff. https://atom.io/
+1 on Atom.io. When I want to work on a larger project or I want to focus on programming I use Atom. If I need to just pound out a quick script or program for a small job, I use Notepad++.
*[CIA approved!](https://wikileaks.org/ciav7p1/cms/page_26968090.html)*
Windows: Notepad++ Linux: VIM
but i still dont understand what the comment I replied to is supposed to mean
Super helpful + detailed post. I'd love it even more if you went into how a Haar cascade works or what OpenCV is doing in those methods in the background 
I think a lot of the confusion stems from reusing the article title, which is a question, on a platform (Reddit) that is frequently used to ask questions. Instead, a more appropriate title would rephrase and remove the question, such as "VirtualEnv: What it is and how to install it". Also, the article title has a typo: &gt; What is a virtualenv and **hot** to install it?
To be honest your text editor matters very little when you are learning how to program. Just try the different options people have suggested and go with whatever you like
If, whenever people ask for help, they are always told to google, there will be no point in googling because there are no other answers out there to find.
Can you edit a file with it without creating a project first?
I much prefer python on mac or linux because of bash vs dos type command line. But that may just be the fact that I've grown to love bash more then dos over the years.
Please don't scrap the web. It makes Tim sad. It'd make me sad as well, unless you could replace it with something better. 
yay, nice for getting both versions
right now we're doing a crappy workaround that was included in some of the bug report threads to just specify the latest setuptools separately in our requirements.txt and exclude other versions. I'd like to do away with having to deal with it at all :( Guess my options are pin packages to versions or expect this from time to time. 
If you like nano, you may like [micro](https://github.com/zyedidia/micro).
To do what you're doing, you need to recursively visit each string node in the document. Fortunately, BeautifulSoup can do that for you; just use the [`.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#strings-and-stripped-strings) generator.
I just find bash to be so much easier to use, but I also think it's easier for using libraries and just general code management. Then there is UI stuff where in windows you would have to use ironpython to do a lot of things.
That hurts man ;_;
Just out of curiosity, have you compared these results to stocktwits data? I wonder if there's any sort of consistent relative relationship there. Maybe stocktwits mirrors twitter sentiment. Just curious.
Unless it's something like gamedev, most Python ecosystem documentation assumes a *NIX environment. Usually you have to jump though additional hoops on Windows.
The question I'm wondering that I haven't taken the time to look into is whether the community/free version of Visual Studio 2017, once it has this full Python support that we are now seeing in Preview, will support extensions/plugins like VsVim? If it doesnt, then that's a really good reason for me to stick with PyCharm whose free version does support a Vim mode as well as numerous other plugins. Since I don't work much in Visual Studio it isn't inherently better for me than PyCharm. Just read another article that said Visual Studio is headed to become the ideal Windows IDE for Python: https://nicolaiarocci.com/python-support-in-visual-studio-2017-or-the-lack-thereof/, which I'm skeptical of.
That means it will come back soon!
Hopefully so. The date of articles publication was more than a month ago! Also, I'm hoping that it will be compatible with the mac version of VS as well.
Use the appropriate string format: &gt;&gt;&gt; Na = 6.022e23 &gt;&gt;&gt; print('Na = {:f}'.format(Na)) Na = 602200000000000027262976.000000 Note that anything past the first 15 or 16 digits will not be guaranteed to be correct (and in general will not be correct), which is why this is not the default. This is a fundamental limitation of floating point. 
On Windows I often used the glob module to get lists of files that match a wildcard pattern. On Windows, glob returns files in sorted order, on Linux (so I presume MacOS too), they are not sorted - so now I always sort the list of names returned by glob. (This bit me back around Py 2.4 days and I have never retested it since, so may no longer apply.)
I believe there was a circular dependency with pyparsing, setuptools, and packaging. This should be fixed with the latest pyparsing (v2.2.0).
I dunno, i don't work for large companies :) you tell me
Am I the only one who uses Kate for linux?
Ah yes Atom, for when you want unnecessary amounts of input latency and to not be able to open field larger than 2mb...
Hahahahah well this is just lovely
As you probably guessed, the answer is "you cannot". ;) However, you *can* use signals in the multiprocessing module, right? Maybe you should consider that instead... especially since you are monitoring external programs, so the cost of creating a new process is not likely to be a big factor. Alternately, you can consider using asyncio and creating the processes with it: https://docs.python.org/3/library/asyncio-subprocess.html#process You should be able to create a separate timer coroutine and use that to **cancel()** the coroutine reading the output: https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.cancel Finally, if you really want to use threads, then you can make a timeout thread, and then write to a pipe after timeout. The thread reading from the process can then use **select()**. If input is available from the process, then read it. If input is available from the timeout pipe, then quit. Not especially elegant, but it should work.
Lots of Irritating Single Parenthesis programmer
The [`decimal` module](https://docs.python.org/3/library/decimal.html) of the standard library can do that. &gt;&gt;&gt; import decimal &gt;&gt;&gt; Na = decimal.Decimal('6.022e23') &gt;&gt;&gt; print('Na = {:f}'.format(Na)) Na = 602200000000000000000000 Note that it's quite important to pass the value as a string to the `Decimal` constructor. If you wrote `Decimal(6.022e23)` then you're passing a binary-float which is then converted to a decimal-float, but at that point it's too late. Passing a string lets the constructor parse and convert the value directly without an intermediate binary-float. 
Thanks for the feedback. It will help me improve future articles. 
VSCODE or Emacs... it depends on how geek you are :)
They use spaces. Their coding conventions were leaked as well - they use a variant of Google's standards.
What this guy said. If you're new to programming and are going into Python, PyCharm is the way to go.
Sublime 3
very interesting. I wonder what the rise of spam on stocktwits looks like. I remember when the platform came out a few years ago and it seemed pretty neat, but I'm honestly not super surprised to see that it's full of spam. I never removed my account and I still get subs every now and then. Who would sub to someone who has been hasn't been active for years...bots, that's who. Anywho, thanks for the reply and very neat project.
If you're a student, the whole jetbrains suite is free. Best IDEs out there.
I am currently writing two master thesis, one of them about a subject that I know relatively little about. To assist my research I'm coding a Django bibliography app that let's the user input books, and the books that are used as its sources. The program will then perform a network analysis, display a network graph and allow the user to gauge what the most relevant works are. 
excellent talk. Thanks for the knowledge bomb!
&gt; Mockrequests will redirect all the HTTP request of your code to cached request objects that you set up before. Like requests-cache? Where does it store the cached requests? Normally with requests-cache it all goes into an sqlite file and you can just pass the expected data to a test function and it will compare it to that.
I doubt you would have the *same* issue as our CI process is more or less custom built. I'm asking if anybody else is experiencing problems with these packages themselves in their CI pipelines (w/ packaging, etc.). If you're curious originally it manifested itself on our systems as this: https://github.com/ActiveState/appdirs/issues/89 which quickly proved to create a large rabbit hole. https://github.com/ActiveState/appdirs/issues/89 https://github.com/pypa/setuptools/issues/951
Emacs is god like.
the "recording" of requests looks interesting. i use this often to test requests: https://github.com/gabrielfalcao/HTTPretty