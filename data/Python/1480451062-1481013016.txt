Often a "package" can be something like Qt (PySide2) or WxPython, this is beyond the scope of a single developer's pull request. I am using Python3 exclusively because Python2 is no-go in terms of I18N, but the lack of a good GUI package for Python3 is painful (and Kivy isn't there yet, no bidi support for example).
I'm not sure it is so unambiguous: &gt;&gt;&gt; b'\xc2' in 'µ'.encode('utf-8') True &gt;&gt;&gt; b'\xc2' in 'µ'.encode('latin1') False What do you think &gt;&gt;&gt; b'\xc2' in 'µ' ought to be?
I'm not arguing that there are lots of legacy systems/devices running latin1 (or Shift-JIS, or one of the many other encodings that predate Unicode). I'm just saying you're going to have a hard time convincing FOSS developers to add a rainbow of text types to the core language just to support systems/devices that are essentially deprecated.
Great thanks .. I will look into these .
Agreed. Python will just try to run the code and fail if it cannot - and most python code is interchangeable between the two major versions if not without some minor changes. I think it's a good system.
Compilation is (probably) irrelevant here. You can't execute a regex without first compiling it, so the first thing that `re.findall()` does is compile the string that you pass to it. Doing that step first yourself won't make things any faster. You can maybe save a tiny amount of time if this regex is being created in a loop, but even then, the regex engine maintains a cache such that compiling the same string over and over is not expensive after the first time. Really the only reason `re.compile()` exists is if you're creating lots of different regexes in a loop. (Well, there are certainly other scenarios where it's useful, but that's the main one.)
Oh I realize a single person may not be able to fully migrate a package. That shouldnt stop you from doing something (if you feel compelled, I'm not trying to shame you for not contributing). I still need to issue the pull request, but I fixed scapy3's nmap_fp function awhile back. Essentially I did was change str() to bytes(), fixed a file path, and wrapped a map() call to return the appropriate object. There's probably something you can at least contribute to your favorite projects :)
So much of the unix world is still naïve byte strings which you have to work with which are sometimes utf-8, but can't be guaranteed. I have 40 million files on our filesystem and a few hundred are encoded in a format that breaks utf-8. It's hell figuring out a way to both work with and display these edge cases.
2 ways for web scraping
Thanks for the info :)
This is a good strategy, and its easier for you as a programmer to equate numbers than strings from the user. Many less edge cases.
Are you on windows?
 &gt;&gt;&gt; '\u0045\u0323\u0302' == '\u1ec6' False If that were True, there'd be a case to be made, but there's not. Let's not pretend Python has some pure character string behind the scenes. It's UTF-8, and it operates on byte matching.
I indeed am. Win7 x64, which seems to be the platform scipy hates the most.
It's a unicode literal, so the first one. If you don't specify an encoding, then you deal with the consequences.
&gt; Should I worry about learning 2.7? You only need to learn that if: * You're writing a library you want to be used by lots of people, or * Your workplace hasn't made the switch Unfortunately I fell into both categories.
&gt; ASCII has, at maximum 255 unique characters. ASCII has 127 characters, not 255. You're thinking of codepages or ISO-8859-* encodings (aka ANSI).
The internals of re are a little beyond me, honestly, but from the docs: ... using re.compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program. The docs do, however also say this: Note: The compiled versions of the most recent patterns passed to re.compile() and the module-level matching functions are cached, so programs that use only a few regular expressions at a time needn’t worry about compiling regular expressions. 
I don't know, but when I go into my command line and enter Python, without messing with any settings, Python 2 fires up. Either way, I think it is a bit much to say that Python 2 is dead. Not that Ubuntu distros are the arbiter, obviously I was being glib...just sayin'.... 
&gt; I thought the general consensus was "unless you really, absolutely, totally need to use 2, go with 3". Depends on what your end game is. Are you doing web development? Python 3 is better. Are you a mechanical engineer that doesn't need to interface with non ascii files? Python 2.7 is better. Library authors (like me) aren't so lucky; you support both. The second you touch encodings, you are basically forced to learn Python 3. It's hard and it's weird and it's poorly documented, but most of us have done it (I have). Don't believe me? There's a reason Raymond Hettinger has a Python 3 topic about the unicode whack-a-mole problem of encode/decode called "Stop the Pain". Encodings can even be wrong, so asking somebody that doesn't even understand Python to also understand encodings might be asking a bit much. You have to think about your program architecture in order to make the unicode problem go away. I don't think beginners have that skill. http://pyvideo.org/pycon-us-2012/pragmatic-unicode-or-how-do-i-stop-the-pain.html
Writing a table tennis tournament management software. It also calculates the ratings of the players. GUI written with kivy running on Raspberry pi.
Hojing, can you elaborate on what "*this*" is?
Clear as mud, why did I bother asking :-(
Yeah, it's also a little bit unfair towards anyone whose first language doesn't use plain ASCII, because as soon as you start doing string operations you're going to run into seemingly intractable bugs. `"こんにちは"[:1]` does not do what you'd expect it to do in Python 2, and unless you're taught about how this works it's going to be pretty confusing.
AWESOME! Let me know if there is a github up and if you need help. I might wanna contribute. Plus it would be good practice for me. 
yes
EDIT: typing "chcp 65001" in the console prior to starting Python fixes this problem. - - - - I wish... C:\Users\Andre&gt;python Python 3.5.1 |Anaconda 4.0.0 (64-bit)| (default, Feb 16 2016, 09:49:46) [MSC v.1900 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; print("\u203D") Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "C:\Users\Andre\Anaconda3\lib\encodings\cp850.py", line 19, in encode return codecs.charmap_encode(input,self.errors,encoding_map)[0] UnicodeEncodeError: 'charmap' codec can't encode character '\u203d' in position 0: character maps to &lt;undefined&gt; 
I do, the whole point is that it allows entering any pronouns. Also? Fuck off. 
All very useful suggestions, thank you! I'm always appreciative of ways to better my Python programming. Three questions, if you're willing to answer them. One, is it, in fact, good practice to not use elif if the branch returns? I considered that while writing this, but if it's the Pythonic way then I should definitely switch to it. Two, how would you suggest I integrate with gettext? I'm unfortunately not familiar enough with it to be able to reason about how my program could be more friendly to it. 
I was also going to suggest the use of `requests`. It makes things a whole lot simpler, especially if you want to use different request types such as `POST` or `PUT`.
no autocorrect here, that's exactly what I typed.
You don't really need those plus signs in the last statement. A group of strings separated by newlines surrounded by parentheses will be joined implicitly: &gt;&gt;&gt; ('Hello ' ... 'World!') 'Hello World!'
"php can divide 4 by a potato!"
&gt; What you can't do is prevent python from turning a validated string that can be encoded in latin1 into a string that cannot be encoded in latin1. ... And why would I care?
I would like that because I am currently struggling with json objects in Python. I would very much like for you to give me a demo
I confess that even after university-level Latin, it didn't occur to me that you were deliberately typing 'and its kind', I assumed the autocorrect had waxed erudite. Is this an expression you expect others to understand? It's not at all a common phrase in classical Latin afaik, and if it's a medieval expression that's gained currency in English prose, I must have missed it. The danger of people like me thinking you goofed would be enough to stop me from casual use.
&gt; typing "chcp 65001" in the console prior to starting Python fixes this problem. At least on 3.4, it leaves other problems on Windows. In particular, if I `input()` at the command prompt and copy-paste in a £ as my input, it will `raise EOFError`; if I try to do an assignment like `x = '£'`, the Python process *aborts without any error message*. I haven't even tried it with more esoteric characters.
&gt; Are you a mechanical engineer that doesn't need to interface with non ascii files? Python 2.7 is better. Believe it or not, I'd much rather use 3.x for crunching binary files. Indexing a `bytes` and getting an integer rather than a 1-length `bytes` matches the behaviour from lower-level languages, and IMX is just far more often the right thing (and when it isn't, slicing is right there for you).
...And where would you even have the opportunity to specify an encoding with the `in` operator?
&gt; python's own struct module -- which itself doesn't seem to know the difference between bytes and strings (but perhaps it's me, or perhaps I'm using some older version of python 3). o_O Python 3.4.2 (v3.4.2:ab2c023a9432, Oct 6 2014, 22:16:31) [MSC v.1600 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import struct &gt;&gt;&gt; struct.unpack('3c', b'\x01\x02\x03') (b'\x01', b'\x02', b'\x03') &gt;&gt;&gt; struct.unpack('3c', '\x01\x02\x03') Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: 'str' does not support the buffer interface I don't see an issue....
I edited my original comment to show how to use `requests` instead. Did you look at the GitHub gist I originally linked to? If you have a more specific question about json objects, it might be better to make a new post in /r/learnpython instead. This subreddit is for news on Python. 
meh. i think im in the 'finance' group @ my company but i do all the reporting. well....its all automated now so..lol
Are you sure you tried to fill in the credentials for twitter api in `chatbot/credentials.json`?
A coding language only improves when it is used. In this light, the Python ecosystem and community is being actively and deliberately harmed by those who promote continued adherence to Python2 and advocate against using Python3.
Well, more to the point he used it about something you can't even drink!
Yeah, I deleted my comment because I missed that in the documentation... So, I got that fixed, but the script died with a file not found and a unicode encode error: File "/home/tom/twitterqa/TwitterQA-master/chatbot/twitter_generate_data_pickle.py", line 36, in load_qa with open(d.format(username, "questions")) as f: FileNotFoundError: [Errno 2] No such file or directory: 'data/tweets/tomf80-questions.txt' During handling of the above exception, another exception occurred: Traceback (most recent call last): File "main.py", line 29, in &lt;module&gt; chatbot.main() File "/home/tom/twitterqa/TwitterQA-master/chatbot/chatbot.py", line 175, in main self.textData = TextData(self.args) File "/home/tom/twitterqa/TwitterQA-master/chatbot/textdata.py", line 74, in __init__ self.loadCorpus(self.samplesDir) File "/home/tom/twitterqa/TwitterQA-master/chatbot/textdata.py", line 220, in loadCorpus get_data(self.twitter_name, self.args.maxLength, self.max_tweets) File "/home/tom/twitterqa/TwitterQA-master/chatbot/twitter_generate_data_pickle.py", line 54, in get_data questions, answers = load_qa(username, max_tweets, overwrite) File "/home/tom/twitterqa/TwitterQA-master/chatbot/twitter_generate_data_pickle.py", line 44, in load_qa questions, answers = store_question_answers(username, max_tweets) File "/home/tom/twitterqa/TwitterQA-master/chatbot/twitter_qa.py", line 105, in store_question_answers f.write("\n".join(questions)) UnicodeEncodeError: 'ascii' codec can't encode character '\U0001f612' in position 450: ordinal not in range(128) The script did create data/tweets/tomf80-questions.txt, the file is empty.
Something specific to your system? Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\Users\ivosaurus&gt;python Python 3.5.1 |Continuum Analytics, Inc.| (default, Feb 16 2016, 09:49:46) [MSC v.1900 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; x = '£' &gt;&gt;&gt; x '£' &gt;&gt;&gt; y = input() £ &gt;&gt;&gt; y '£' &gt;&gt;&gt; exit() C:\Users\ivosaurus&gt;
I can only imagine in 25 years that people will be complaining about legacy unicode support. 
Thank you very much! I've taken a Python course but that was a while ago. I mostly code in C++ &amp; asm, so this will help me brush up on my Python again. I work in QT for a software company, do you recommend any courses/books that would help with learning how to better script for finding bugs?
`python` will always launch python 2.X on all distros apart from archlinux. Even Python.org have recommended that nowadays I think. Purely for ease of backwards compatibility. I believe you can get a minimal Ubuntu install nowadays where if you typed `python` it'd ask you to install `python` because it's not present on the system, only `python3` is.
wtf did you post this here as well as in /r/learnpython?
As someone who thinks the world should have standardized on ascii it does exactly what I would have expected it to do. The romanized versions of other languages should have become the defacto standard with the advent of computers. The whole world using a single alphabet would have been a great thing.
You are angry dude.
Just wanted to point out that creating a dict jut for looking up a single key can be a problem if it's in a critical code path. In these cases, having the jumps directly encoded in the bytecode can significantly reduce memory usage. When I said that dicts are heavy, I meant that they are too heavy compared to this use case. Dicts are very useful to implement switches (the poster above me had already said that), but sometimes it's better to use an if-chain, and I just wanted to add that. Sorry for being confusing.
Seriously. Also, at least if we're talking professionals, I'm pretty sure more than 10% of programmers are web developers, almost all of whom need to think about Unicode. I suspect that in fact *most* professional developers (even non-web developers) need to think about Unicode from time to time. What might be plausible is that 90% of amateur developers don't need to think about unicode. Personally I think a programming language should be optimized for the professionals, not the amateurs (and as someone who was an amateur for many years, I felt the same way then).
I haven't done automate the boring stuff as of yet, I have actually been reading the Dusty Phillips OOP book, (also, brief disclaimer: coding in Python3) but what I have been doing is working on a neat little project of mine. I'm actually improving it with new stuff as we speak. I guess I should work on automate the boring stuff. Working on a project guys, it really solidifies your understanding of python. I'm trying to rip through it. Can't wait to learn another language.
&gt; bytes matches the behaviour from lower-level languages It does, but I think that's weird. I do a LOT of work with binary files. It's the same as lower level languages, but I don't really use those. Python is largely good enough. I actually got burned by this last week: # Python 2: table_name = 'OUGV1' # nastran displacement table sort_code = int(table_name[-1]) # Python 3: table_name = b'OUGV1' # nastran displacement table sort_code = int(table_name[-1].encode('utf-8')) Um...wat? Why doesn't 1 and 2 map to themselves in binary? Also, maybe it's decode...I remember as long as I'm doing it, but forget when I'm done. 
It's better because all the random libraries you import are designed around Unicode, not Latin-1. The entire point of Python is to care less about performance and implementation details and care more about getting things done and making use of the very active and vibrant community of library development. Decode your Latin-1 into a "string", encode your "string" back to Latin-1. The fact that the "string" is internally represented in Unicode is an implementation detail (and, honestly, it's probably _not_ represented in Unicode, Python 3 has a few options for how exactly it stores strings and picks a good one depending on how the string came into existence). You're not worried about why `255 + 1 is 256` but `256 + 1 is not 257`, why care about how a string is represented internally? But what about enforcing that no non-Latin-1 characters can get into the string? That seems to me like, say, enforcing that an integer is less than 256, or that a list of strings contains only strings. There are languages that let you do that. Python is not one of them; you can make your integers as big as you want. If your code doesn't set the value incorrectly, it won't be incorrect on the other side. If you're worried about it being incorrect, catch an error when you encode the string back to Latin-1, or encode the integer back to a byte, or whatever it is you want.
Can't tell if you are joking or not, but either way that's the cutest thing I've heard all day.
It's from a book... I'll post the code: import numpy import scipy.special class neuralNetwork: # initialize the neural network def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate): # set number of nodes in each input, hidden, output layer self.inodes = inputnodes self.hnodes = hiddennodes self.onodes = outputnodes # link weight matrices, wih and who # weights inside the arrays are w_i_j, where link is from node # i to node j in the next layer # wl1 w21 # wl2 w22 etc self.wih = numpy.random.normal(0.0, pow(self.hnodes, -0.5), (self.hnodes, self.inodes)) self.who = numpy.random.normal(0.0, pow(self.onodes, -0.5), (self.onodes, self.hnodes)) # learninig rate self.lr = learningrate # activation function is the sigmoid function self.activation_function = lambda x: scipy.special.expit(x) pass # train the neural network def train(self, inputs_list, targets_list): # convert inputs list to 2d array inputs = numpy.array(inputs_list, ndmin = 2).T targets = numpy.array(targets_list, ndmin = 2).T # calcuate signals into hidden layers hidden_inputs = numpy.dot(self.wih, inputs) # calculate the signals emerging from hidden layer hidden_outputs = self.activation_function(hidden_inputs) # calculate signals into final output layer final_inputs = numpy.dot(self.who, hidden_outputs) # calculate the signals emerging from final output layer final_outputs = self.activation_function(final_inputs) # output layer error is the (target - actual) output_errors = targets - final_outputs # hidden layer error is the output_errors, split by weights, recombined at hidden nodes hidden_errors = numpy.dot(self.who.T, output_errors) # update the weights for the links between the hidden and output layers self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)), numpy.transpose(hidden_outputs)) # update the weights for the links between the input and hidden layers self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs)) pass # query the neural network def query(self, inputs_list): # convert inputs lists to 2d array inputs = numpy.array(inputs_list, ndmin = 2).T # calculate signals into hidden layer hidden_inputs = numpy.dot(self.wih, inputs) # calculate the signals emerging from hidden layer hidden_outputs = self.activation_function(hidden_inputs) # calculate signals into final output layer final_inputs = numpy.dot(self.who, hidden_outputs) # calculate the signals emerging from final output final_outputs = self.activation_function(final_inputs) return final_outputs
&gt; The Python 2 -&gt; Python 3 transition was made in a terrible way, it almost killed the language… The best example of this is them killing off the old non-parens print statement. The new print function is completely superior and print as a statement was a mistake in early python's design, no doubt about that. But they should have nonetheless kept the legacy print statement alongside the new function, just like they co-exist in python2 today. There was NO need to remove it, it was removed as an aesthetic design choice. The old print was "unpythonic" to begin with (doesn't behave like other statements) and having two redundant print choices would have been even more "unpythonic". I can sympathize with the reasons that they removed it. It was a blemish on the language. But if they'd been serious about backwards compatibility and ease of migration they would have never removed it. Being serious about backwards compatibility means keeping around the warts that you hate. 
Game is very basic, 100% there is nothing in place to prevent it and its not just for the game but the learning experience on top of it. The game serves as motivation. 
Well what are you interested in? Machine learning? Web development? Automated processes? Whatever you want, there's frameworks for it and tutorials for how to use them.
Thanks, that makes sense.
The original (fictional) etymology of "grok" was "to drink". Given the importance of water in Martian culture, it became a metaphor for deep comprehension - that you have drunk of something until you merge with it.
What's a fictional etymology? 
The etymology within the book. I originally wrote "The etymology", but this being a programming sub, someone was bound to come along and point out that there's a difference between the etymology of the word in the book, and the etymology in real life. In the book, the term "grok" comes from the Martian verb "to drink".
So the real etymology is to understand deeply.
Yes. But my reference to "drink" was to the fictional etymology, not to "grog".
The guest lecturer we had in during last semester would do a bunch of prototyping and would even keep Python for the front-end UI, simply for proof of concept and visualization. Afterward, he would refactor the front end into something a bit more pleasing and edgy, instead of the simplified UI that his team used with Python. Does that make sense? I was wondering, from that discussion, what other instances you might do that for. I've also heard that Python isn't always the most efficient language, so others may refactor for performance reasons.
Awesome, thanks for the reply! Out of curiosity, what were those instances that dropping to C was necessary or warranted?
Calculating fuel addition and chemistry management schemes for nuclear molten salt reactors :D
I've not had the need, either another library already dropped to C or Cython (numpy, uvloop, httptools, a bunch of other python libs, etc) or the project needed to be in something lower level from the start (someone else's call - which was definitely right for the projects I have been on where that call was made).
Have a browse, see if there are any projects you're interested in. https://github.com/trending/python When you find one that's interesting, read it carefully and help them out by writing some unit tests, and/or pydocs.
Just getting my ass into python myself, so take what I say with a grain of salt, but what I'd say is if you're providing your own package id look into what it takes to get it on PyPi. That would solve serving the package to the masses since that makes it easy to just pip install it. For virtualenv, I'd say keeping separate environments for both would be good, even though at first it may seem unneeded. You might have extra dependencies in your flask project that are extraneous for your package, so keeping them separate would help avoid weird dependencies. 
Is your string javascript? If so, you might want to give a javascript parser a shot, for example https://github.com/rspivak/slimit. 
&gt; But if they'd been serious about backwards compatibility and ease of migration they would have never removed it. So what would they have called the new print function? It couldn't be "print" if they want backwards compatibility, because `print(1, 2)` is clearly a print statement (not print function) with the tuple `1, 2` passed as the only argument.
As a dev whose first language was Java this experience was the strangest thing when I started to pick up Python. Strings from all kind of sources would just work out of the box in my world. Then all of a sudden I was switching to a language that did not allow me to put a german umlaut ("ä", "ü", "ö") into my function documentation. I was baffled that this was an actual issue.
I don't think I agree. If you specify an encoding, then you're looking for a bytestring in a bytestring and everything is well defined and happy. If you don't specify an encoding, then the result you get is garbage depending on the internal encoding used by whatever python implementation you use, which does not sound useful to me.
Haha, naturally. I wanted to do it, but Trump does not really reply to anything, so we cannot learn how Trump would reply. I guess a bot which doesn't answer to people and talks about building walls would be the best approximation. 
Yeah this is probably a big task as a first project. Problem is I really need to stay motivated in work and building something I'll enjoy is important. Like running in football I can do for hours but make me run a lap on a track and I dread every second.
Honestly I've never even worked on a project that really dealt with strings to begin with. Unicode had never been an issue for me of most people I know.
Unicode code points are not bytes any more than integers are bytes. The fact that computers ultimately store everything as bytes in one way or another is just an implementation detail. Python stores the Unicode code points that you pass in. All string operations are performed in terms of Unicode code points. You can debate the merits of this, but that will not change the fact that you need an encoding to convert between Unicode code points and bytes.
I think he was using it as a little reference because you two were talking about latin-1. So he threw some random Latin in there. 
Are you running using python 3.5 and tensorflow 0.9+? I tried that account (tomf80) and it worked for me. Let me know what's up.
This makes me think of the black magic that pytest does when you hand it an assert statement and it goes and decomposes the assertion on the right and left side of the == and tells you exactly why it fails... including when lengths of lists don't match and stuff, and shows you what the subexpressions evaluated to... it's incredibly slick
I'm not sure what you mean by "utf-8 literal." The closest thing Python has to a default encoding is the encoding of the source file, which defaults to utf-8. But that can be changed on a per-file basis with the [magic coding comment](https://www.python.org/dev/peps/pep-0263/). However, the encoding of the source file doesn't change the internal encoding used for strings, at all. In CPython, as of version 3.3 (implementing [PEP 393](https://www.python.org/dev/peps/pep-0393/)), the internal representation of unicode strings is as an array of code points, each either 1, 2, or 4 bytes wide. You could think of this as [UCS-n](https://en.wikipedia.org/wiki/Universal_Coded_Character_Set) encoding. This means the precise bytes used to represent a string depend on the contents of the entire string, for example `"a"` does not start with a null byte, while `"aμ"` does. If you allowed `startswith` to mix the two, you would end up with fun things like this: &gt;&gt;&gt; "a".startswith(b'a') True &gt;&gt;&gt; "aμ".startswith(b'a') False In my (admittedly naive) reading of the source, it even looks like that last line will depend on the endianness of the system you run it on.
/r/learnpython.
Aka, Technical Debt.
Moving towards Season 2 Episode 1 of Black Mirror I see! Hahaha thanks for this. Pretty awesome!
Panda3D should be the only one on that list... http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv
You also need to install TwitterAPI. I didn't see a `requirements.txt` but if you could add one it would be much appreciated. 
Not storing the encoding within the files was a mistake we'll regret for years. If only every file had a meta attribute life would be so much easier.
My bad, I guess I didn't notice as I had already installed everything. I added [requirements.txt](https://github.com/kootenpv/TwitterQA/blob/master/requirements.txt). Please let me know if you miss something else.
It "rearranged" lines I think. It's better than random shuffle, but it's not what it pretends to be. Neural nets try to spit rap but they nothing but copies, your deep learning game is weak and your coding is sloppy
Yes the well-defined structures look very nice on paper. But as you noted: good on paper, very bad in practice :( 
&gt;package and distribute my altered version of cobrapy to my other packages I assume you have a modified clone of `cobrapy`? In that directory, run `pip install -e .`; this installs cobrapy as a sneaky reference to the current directory. Everything works as normal, but your changes are instantly seen by anything else which imports cobrapy and any commandline or other tools. If you mean 'distribute to other users', you should almost certainly get your changes merged upstream instead. Can you work with the maintainers to make this faster? Can you work around them to use the current version with reduced functionality? &gt;package my extension, which depends on my altered cobrapy, to my Flask project. The best way to do this is an optional extension in `setup.py`, so you end up with `pip install mymodule[web_interface]` to install the whole thing. See [here](https://packaging.python.org/installing/#installing-setuptools-extras) and [here](https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies) for details. So I would wait for the changes to cobrapy, then `pip install yourextension[web_interface]` and run the flask server. &gt;upon updating something in the extension or open-source project code, be able to re-build my projects which depend on them (doesn't have to be fully-automatic, just sensible) I'm not sure what you mean here. `pip install -e .` might help, though you might need to do it with each virtualenv active! I tend to use one environment for several projects, if they have common dependencies, precisely to minimise this kind of bookkeeping. 
Makes me wonder how they teach and handle this stuff in those countries.
i used the q2a template, but made lots of adjustment to the core
That's the meaning; etymology is where a word comes from. The fictional meaning (in the universe's English) is 'to understand deeply'. In Martian, IIRC, add 'to drink', and a few other meanings. The real-world meaning is 'to understand deeply'. The fictional etymology of the word is 'loan word from Martian *grok* , 'to understand', which comes by metaphor from Martian *grok*, 'to drink', 'to become one with' '. The real-world etymology is 'coined by Robert A. Heinlein for his novel "Stranger in a Strange Land"'.
Not that it matters in this case, but it should be slightly faster because the concatenation is done at compile time rather than at runtime.
Coupon Save 100% . This course is a one-stop-shop for everything you’ll need to know to get started with Python, along with a few incentives
Not every sound can be spelled in English. Arabic's "ra'in" (somewhere between g, r and o), Hebrew's "het" (somewhere between h and ch, but not quite), and maybe half of the sounds in Korean, to name a few. And that's just inconveniences - what about characters that make the same sound? You can't differentiate them when spelled in English. There are many reasons not to go the way you suggest 
Solving the cryptopals probelm sets, almost done with the second set
Ignoring your kanjis eh?
The unpacking operators are much more versatile than this post describes * can unpack any iterable and ** can unpack any mapping that implements `.keys()` and `.__getitem__()`.
Well, it's not that hard to work around, since `u"こんにちは"[:1]` does do what you expect it to, but then you need to explain what Unicode is and why that "u" makes all the difference. Thankfully Python 3 allows these low level details to be postponed until later.
LOL that's impressive! Good job, you gave me a huge inspiration! Please keep improving :)
Hahaha, this made me laugh.
A list will use all the memory it requires; a generator will use only the memory necessary for one element (well, more or less, but basically this). Sure, if you're dealing with 10 or so elements, that difference doesn't make much... erm... difference. But when you're dealing with 100,000 elements (or even more), that makes a huge difference (not to mention, most algorithms would require creating the list of 100,000 elements and the process it instead of "build one, process one, repeat").
**TL;DR:** Type in ¯\\\\\\\_(ツ)\_/¯ for proper formatting Actual reply: For the ¯\_(ツ)_/¯ like you were trying for you need three backslashes, so it should look like this when you type it out ¯\\\_(ツ)_/¯ which will turn out like this ¯\\\_(ツ)\_/¯ The reason for this is that the underscore character (this one \_ ) is used to italicize words just like an asterisk does (this guy \* ). Since the "face" of the emoticon has an underscore on each side it naturally wants to italicize the "face" (this guy (ツ) ). The backslash is reddit's escape character (basically a character used to say that you don't want to use a special character in order to format, but rather you just want it to display). So your first "\\_" is just saying "hey, I don't want to italicize (ツ)" so it keeps the underscore but gets rid of the backslash since it's just an escape character. After this you still want the arm, so you have to add two more backslashes (two, not one, since backslash is an escape character, so you need an escape character for your escape character to display--confusing, I know). Anyways, I guess that's my lesson for the day on reddit formatting lol ***CAUTION: Probably very boring edit as to why you don't need to escape the second underscore, read only if you're super bored or need to fall asleep.*** Edit: The reason you only need an escape character for the first underscore and not the second is because the second underscore (which doesn't have an escape character) doesn't have another underscore with which to italicize. Reddit's formatting works in that you need a special character to indicate how you want to format text, then you put the text you want to format, then you put the character again. For example, you would type \_italicize\_ or \*italicize\* in order to get _italicize_. Since we put an escape character we have \\\_italicize\_ and don't need to escape the second underscore since there's not another non-escaped underscore with which to italicize something in between them. So technically you could have written ¯\\\\\\\_(ツ)\\\_/¯ but you don't need to since there's not a second non-escaped underscore. You ***would*** need to escape the second underscore if you planned on using another underscore in the same line (but not if you used a line break, aka pressed enter twice). If you used an asterisk later though on the same line it would not work with the non-escaped underscore to italicize. To show you this, you can type _italicize* and it should not be italicized.
&gt; Well, the reason a string really ought to count code points is because a string is an iterable and you iterate over the individual code points. That logic is *post hoc ergo propter hoc*: The iterable could as well iterate over something else than code points 😉
&gt; assuming you don't expect a language to deal in graphemes instead of unicode code points, what's wrong with the python one in terms of efficiency? pep393 strings are pretty efficient. Under this assumptions: Nothing! But I have just said, that this behaviour is not *the* big deal when dealing with unicode. Efficiently splitting a string into grapheme clusters could be much more usefull when dealing with UI. I admit that code points are simple and it is therefore a good thing to offer APIs dealing with them. But often they have shortcomings when it comes to *corner cases* - and that is where higher abstracting concepts have to come into play. &gt; which python version was this error from? i haven't had my hands on python on windows for a long time, but at least as of python 3.6, this has been addressed. Version 3.5.2 on a Windows 10 machine. That said, I started python from a CMD and a PowerShell. No difference. The problem here is just simple: Python's ``print`` tries to ``encode`` the string [platform dependent](https://docs.python.org/3/library/sys.html#sys.stdout): &gt; Under Windows, if the stream is interactive (that is, if its isatty() method returns True), the console codepage is used, otherwise the ANSI code page. You have no possibility to pass the encoding you want!
and how would that work? there are ALOT of languages that can not be represented in ascii. How do you write Hungarian in ASCII? #ÖŐÓÚÜŰÁÉ
&gt; Unfortunately Python can only control its side of the border. And that's why it is a bad API as it does not enable the programmer to chose the correct way to speak to the underlying system!
Data['DepartureBoard'][Departure'] seems to be a list, not a dict. So just iterate over each of its items: departure_exist = False For departure in Data['DepartureBoard'][Departure']: If departure['name'] == desired_name: departure_exist = True
I thought the speech synthesis was nice - i think the bad speech kinda adds something to it, but that's just me.
I wrote this in an afternoon. I'll clean it up later. Is there anything particular that you think is sloppy and should be fixed sooner?
 departure_exists = any( d['name'] == desired_name for d in Data['DepartureBoard']['Departure'] ) 
You don't need a for loop: using any() and a generator expression: departure_exist = any(d.get('name') == desired_name for d in Data['DepartureBoard']['Departure'].values()) Remove .values() if it was actually a list instead of a dict. 
This was my reason to start too!
~~That gives me:~~ ~~AttributeError: 'list' object has no attribute 'values'~~ Works without `.values()` - thx!
I think he's populated a database with lines, and then the code puts them together in the most appropriate way. He's picked the lines sure, but it's come out with new rhymes.
I came here somehow convinced it was a question about lambda instead of yield. Now I'm disappointed...
That sounds super fun! Congratulations. c:
I work for an Atlanta based company called Amplify Technologies. We're looking to fill three positions at the moment. [Python/Django Developer](http://www.amplifynation.com/assets/pdf/Software_Engineer-Amplify.pdf) [Site Reliability Engineer (SRE)](http://www.amplifynation.com/assets/pdf/Site_Reliability_Engineer-Amplify.pdf) [Technical Project Manager](http://www.amplifynation.com/assets/pdf/Technical_Project_Manager-Amplify.pdf) I can honestly say that this company is one of the best companies that I have worked for. We're small (12 people currently), we have a fantastic startup culture, many great benefits detailed [here](http://www.amplifynation.com/), competitive compensation, a CEO with a history of success, and tons of freedom in the work place. Should you apply via the email in the PDFs, please reference this reddit post. Please PM me with any questions. Thanks! 
I'd say the number one skill is the ability to write medium.com blog posts, or generate other content spam trying to capitalise on the 'everything is data science' fad.
Stop spamming Reddit
Oh, that's actually kind of cool; I assumed it was just sugar for the runtime concatenation.
You are better off posting this to r/learnpython and asking how you can improve or what you can optimize. Everyone here just wants to criticize and not give back any solid feedback. Keep up the hard work!
May I ask why?
Entertaining article describing some reasons why: https://blog.codinghorror.com/parsing-html-the-cthulhu-way/ 
I wish I had a bit of time to help you out, that could be a cool Alexa service
&gt; and if it's not English (although you write so well I would never think it wasn't), if "et consortes" is more common. thanks :-) My native language is Polish and I would say that the Latin phrases used verbatim are extremely rare while their translated versions do see some use as ordinary proverbs. 100 years ago or so there was way more emphasis on classical education which meant at least some familiarity with Latin but today peeps are half-illiterate. If anything it's the English "pollutants" that are everywhere nowadays while everything else seems to be on its way out. To be honest my Latin game is weak-to-nonexistent. It's just that I read a shitton of books before the internet era, including ones in historical settings in which the nobility used language heavily peppered with Latin, so I absorbed a few, plus some archaic Polish words plus the Past Perfect Tense, which went extinct in Polish. I use all of these from time to time mostly for flavoring, shits and giggles, in wrong contexts I am sure. Sorry to disappoint you :-) 
Because I've seen plenty of instances already where GPL ruins interoperability. Companies _don't_ _want_ GPL, and since most of the software development is performed by companies (that might have to mix and match things with different licenses) you end up having to reinvent the wheel (again) because the 10k lines of code of that GPL library that would make everybody more interoperable would force me company to release my 3 millions LOC developed over 20 years as GPL. Not going to happen.
was wondering, i mainly need to take data from exceland palce it into word, and take multiple document/sheet and create PDF out of it (can VBA do that?!)
/r/learnpython
I could store your net worth on one side of this floppy
Python shouldn't come with a standard string library, we should be forced to write our own so we'll stop arguing about unicode errors. (I'm being sarcastic. _Maybe._)
&gt; I feel There's no feeling about it, what you stated is a stone-cold fact. There's managing systems with appropriate tools, and there's _failing_. There is no gray area in between. All the hemming and hawing about "well my distro doesn't have it installed so I can't be arsed" is just lazy and incompetent. If you're just dicking around in an Ubuntu VM, fine, whatever. If you're operating applications that real people use, get your shit together.
You can read about it in the [docs](https://docs.python.org/3.5/reference/lexical_analysis.html#string-literal-concatenation). Runtime concatenation is slower because each operation causes reallocation of the string. If you need to join many strings at runtime it's faster to use `str.join()`.
I want to hug you.
Spelling mistakes. You got me. But that's not ironic.
I donated the object mapper to DataStax, it was merged into the Python Cassandra driver a couple years ago. The original, pre-merged repo is here: https://github.com/cqlengine/cqlengine As for the debugger, it's sadly gone. I was trying to solve "how did I get from X to Y" issues, so the debugger could carry with it some state. I've always meant to rewrite it and put it up somewhere but just never had the time.
This is long-awaited news for those of us constrained to the Windows ecosystem for reasons beyond our control.
You did fine. Nice write up.
I'd recommend django (maybe). I haven't gotten to into sqlalchemy so maybe I'm off base, but djangos ORM seems much more powerful. Sadly I haven't found a simple way to decouple it and use it in other projects.
* `ntkl` * `Tensorflow` and making sure do actually run `ntkl.download()` before running TwitterQA.
Nice! What kind of pains were you experiencing at work that were so bad you decided they needed you yourself to learn programming? Highly interested in this stuff.
Depending on how new you are, this is not a good first task. Youre going to be dealing with a lot (inputs, message parsing, possibly complicatsd math, etc). Not that you aren't capable, but baby steps. I would suggest implementing a protocol server (mine was JSONRPC) as a first project. This taught me a lot about sockets, parsing/handling/creating messages, and some general ways in which not to do things. If youre going to undertake your project, I recommend one step at a time, such as getting familiar with manipulating keyboard commands behind the scenes. From there, you could move on to message handling/creation, and then the actual math/logic for enemy detection. 
Here's an idea: every time an article from the Daily Mail (clickbait fascist tabloid abomination) is posted, grab a screenshot of the article and post that as a comment so people can view that instead and not give the DM visitor numbers. Added bonus would be a link to a FAQ page explaining that the DM are cunts.
Is that going to be something a bit like [camelcamelcamel.com](http://camelcamelcamel.com/)?
Sorry I just saw this reply. Sure, but it's still in the process of being migrated from an old version that didn't use the plug-in style and was becoming super bloated, but the current version is here: https://github.com/LanceMaverick/skybeard-2/tree/master The telepot branch will become the master soon, as this uses asyncio.
Started my role about 3 years ago and created our department's Excel-based reporting systems. The data input stage required logging into a web portal, waiting for the browser to render the data at each stage, then export to csv for each permutation of date/country, copy-paste results into Excel, then manually generate reports for each country from there. Breaking point was that we needed to increase report frequency and needed to find a more efficient way of doing it without increasing head count. In the last year, I've been learning Python so that I can use a basic Excel sheet for input variables*, loop through a ton of API calls, then aggregate the output I need into one file which is Tableau-ready. The reason for Excel-based input is so that other users without coding knowledge can easily run the same script (via Jupyter) and use the output file. Edit: And the web scraping part came off the back of that process, because we wanted to see if we could also save time for data where no API was available and we were typing directly into an Excel sheet.
Are you sure it was neccessary? I think I do not run `nltk`, only the original model does... but indeed... how could I have missed tensorflow :p
click bait title writing is on point at least 
Interesting framework! Looks very useful! In the past, I developed such a framework for .NET, but I'll definitely try it out since I focus more on Python development than anything else these days.
http://www.dabeaz.com/generators/
I'm guessing your native language is one that can be perfectly represented in ASCII.
/r/learnpython is the right place to post such questions. Please read the sidebar. And consider posting some code so that people can help you out!
I ran into an error with `nltk` when I tried to ask Bernie Sanders a question, and it ran away when I downloaded all of `nltk` haha.
You should document the algorithm. How is it defining rhyme and meter? What is the neural net trained on? Is it picking existing lines or generating new ones?
Constructive criticism and helpful advice is the best thing to give someone. But ripping on them without any helpful advice isn't cool.
"Yield" can to used to greatly simply your code. See for example Ned Batchelder's excellent [How to loop like a native](https://www.youtube.com/watch?v=EnSu9hHGq5o)
The aversion about Python mainly comes from a misunderstanding of its capabilities. A lot of programmers dismiss it as a "toy language", or say that it's "only good for prototyping or scripting". My guess is that most people who say this have never tried to build anything bigger than a basic script. Sure, Python is not perfect (think about the GIL, for instance), but you can build pretty much anything with it, and a lot faster than with other languages. I also think that people often underestimate Python because of its "basic" nature: * Really simple syntax. * Dynamic types. * Interpreted language. * Threading limited in many ways, performance-wise. (but there are workarounds, such as [multiprocessing.Pool](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool)). I've never built native UIs using Python, so I can't speak about that. But I built backends in Python and I found it awesome. I also built web services using Flask, and UIs using ReactJS. So Python is perfect to build backends and web services. If you're looking for "raw" performance, then C or C++ are probably better choices. But how often do you really need that much performance? P.S. Before I learnt Python, I was a C++/Java/.NET programmer. So my bias towards Python comes from experience :)
thank you so much for giving helpful feedback, seriously. i'm a bit busy with college applications and stuff but i will definitely do this within the week. 
&gt; Neural nets try to spit rap but **they do nothing but copy**, your deep learning game is weak and your coding is sloppy FTFY 
Pandas, numpy, xlrd, pypdf2 and a bunch of others depending on the project. Most of my projects are one offs and I end up recycling code to make my life easier.
Alright - I'm getting a lot of hate for two things: First -- People are disappointed that it doesn't actually write it's own lines. I'm sorry about this - I should've been clearer and used a less click-batey title. I'll update the readme to make this clearer. It just draws from a text document with a bunch of lines that you give it (they don't even have to be songs, you could feed it a bunch of rap lyrics out of order), and arranges these lines into a way that the neural network sees fit. I'd like to stress that it isn't just using chunks of other songs - if you look through the example, there are *very* few cases where two consecutive lines are from the same song. Personally, I don't believe that the flow of the song is due to the fact that it's drawing from rap songs -- since it's using lines from a ton of different songs, and not using lines from the same song right next to each other, that would kind of break up any flow or rhyming that the original song had. I hope that makes sense. Second -- My code is messy/sloppy I'm sorry about this as well, I'm trying to fix it and put everything in functions and get rid of the global variables, but i'm super busy with college applications and stuff so it will probably take around a week to actually update it and make it all nicer. In my defense, I started this project as a joke and didn't think it would actually work, so I didn't try and set my code up like i would for a big project to begin with. And here's what I mean by "started this project as a joke": I run my high school's programming club (i'm a student), and a few people in the club jokingly suggested that they want a computer program that could rap. I wrote this in one night so I could show everyone the next day - just kind of making up how it would work while I was going along. tl;dr I'm sorry about it not actually writing it's own lines, i wasn't trying imply that it did, and I'm working on rewriting it with less sloppy code (that'll be done in around a week). *if you have any suggestions or criticisms or anything please reply to this comment to let me know - i hope it doesn't seem like i'm lashing out at people who gave me criticism, because i really appreciate it as any/all of it helps me*
I LOVE the speech synthesis too.
Yep, this is getting to be a headache. 
/r/learnpython
 a_list=[["Hello", "mY", "WORLD"], ["THis", "iS", "A", "TEST"]] new_list = [[word.lower() for word in items] for items in a_list]
Newbie here. Today I learned about decorators. And generators. I'm excited to use them!
The bigger WTF is the unnecessary parens. 
You have our deepest sympathy. Now those of us with AMD video cards await openCL support. 
Seems very useful! I would prefer no GUI actually (or like `top`)
&gt; Explicit is better than implicit. That's to be explicit. Otherwise Python will automatically convert it to an instance with no arguments. If it can't then it will raise a ```TypeError``` exception on the raise line.
Yeah the T4*nn* are great machines. I still use a T420s as my main machine as I love it. I really should get a new one though as the screen is pretty awful now. So do you do all your work on the T440p? Writing, videos, etc?
TIL
First off, this is probably better suited for /r/learnpython It appears for _mac only_ it sets a custom Qt style sheet [here](https://github.com/spyder-ide/spyder/blob/master/spyder/app/mainwindow.py#L297). You might be able to modify that to have it use the QSS, but it does not natively support it. You might also want to look at [this PR](https://github.com/spyder-ide/spyder/pull/3286) which implemented a similar dark theme. Also there is [an issue](https://github.com/spyder-ide/spyder/issues/2350) that discusses a dark theme, which includes [this preview](https://cloud.githubusercontent.com/assets/3627835/9843057/32ab099c-5a7c-11e5-8159-38d8de4f3d7d.png) of what you will get with qdarkstylesheet.
Btw, jokes aside, it won't hurt you that much: try: "a"+1 except TypeError as e: raise Exception() You will just see two exceptions! A double exception can be useful :)
If you are just after see what is using your bandwidth - nethogs and a bunch of other tools will already do this - http://www.linuxlinks.com/article/20121002171429745/NetworkTools.html but agreed - it'd be nice to have a cli/curses interface so we could easily limit processes bandwidth on remote machines with ssh. I often run iftop on a router with ~10 users to see which machine is using bandwidth - though it does not have enough storage or ram to run python, and it'd be a little different limiting streams by host instead of processes by port
If you want a pipeline, rather than calling each function in turn and passing the return value of the previous to the current, why not compose the functions and then call the composed function on the initial data? This is how a pipeline works and follows the functional paradigm. Be aware that Python is missing some key things that make functional what it is. In particular, numpy arrays are mutable and many operations on them will mutate them. Also, Python doesn't perform tail call optimization, so a deeply nested series of calls will generate a large stack. For your purpose, this probably won't be a limitation, but it's worth considering If you are using these patterns. 
Except in this case they caught no specific exception
You can do this with little to no VBA using a Office Mail Merge with Outlook as it's data source. You can save the output as PDF documents directly, or save them as individual documents that some other process can handle. Likely do it without any programming.
we need to brainstorm a name for the rapper... deep flow? fuzzy logik? The notorious A.N.N.? (artificial neural network)
I'll do you one better: tmp_links = [ m.group(1)[1:-1] for m in re.finditer( r''' (?:URL|window\.location)\s* = \s*( (?:"[^"]+") | (?:'[^']+') ) ''', rstring, flags=re.VERBOSE)] It's a bit more complex, but it doesn't use backreferences (which I consider a code smell) and DOES allow inside quotes. The re.VERBOSE flag forces the regex to ignore raw whitespace characters, like ` ` and `\n`, which allows the regex to be written more readably.
The code choice to show off what the author means (in both places) is horrible. Code examples should really stand on it's on, and not require the reader to make a ton of assumptions, which, unfortunately, this does. I agree with you that the article smacks of little invested effort. **Re: Mixing the two** The callback functions for parsing in Scrapy are class functions that accept the parameter `response`. The default parsing function is called `parse()`, hence the line `def parse(self, response)`. What was omitted is any explanation that this is code within a Scrapy spider. In practice, if you pass the body of the text received from Scrapy to BS4, as explained *much* more clearly in the official Scrapy docs [here](https://doc.scrapy.org/en/latest/faq.html). **Re: Controlling Delay** With the context of the writing, though, we could assume the author is saying you can control delay this way. A better example would be: def scrape(url): soup = BeautifulSoup(urlopen(url), 'html.parser') sleep(3) soup2 = BeautifulSoup(urlopen(another_url), 'html.parser') ... do stuff with soup &amp; soup2 ... However, this is *ALSO* horrible. Not only is the request now blocking, the delay before the next request goes out is blocking, too. A very bad idea.
I know that bytes != ASCII. Bytes can be literally anything depending on how you interpret them. That's the problem. I could decode image data as ASCII and I would get some nasty jumble of garbage. I believe that Python2.x will interpret a byte string as ISO-8859-1 if the encoding isn't specified. However, the docs aren't super clear on this. Python 2.x may just default to system encoding. Regardless, if a series of bytes is encoded incorrectly, there's no way to determine the accuracy of the produced string reliably. In short, I hate how many text encodings exist.
Indeed, but my point is that it won't hurt much. It's completely unnecessary, but at least you'll still see the old exception as well. 
There's 50 videos totaling about 9.5 hours. You could power through it all in a week or two, but maybe a month more casually. Of course, that's just to go through the videos. It helps to practice programming as well. I recommend the site http://exercism.io/ and I worked through a lot of these exercises in my previous Twitch streams: https://www.twitch.tv/alsweigart/videos/all
I seen code that did this same mistake, but they had a log write that logged obj, I guess you tried? 
Nah, the method on `self.proxy`, `is_unique_property`, isn't a property, even though it starts with "is", and ends with "property". I deem this code as shit and fuck. EDIT: Didn't make it clear enough; apparently. I'm pointing out other shit stuff with the code.
There was nothing so smart as that :)
a program that would tell me what to program 
You can just google and see how many questions come up regarding the GPL terms. GPL is a real minefield to deal with and most people would rather deal with a safer option, like BSD or MIT.
As something of a noob, what is the best way of doing this? Just remove the nesting and make it flat or put all the potentially erroring code in one try?
- Tensorflow Tutorial - Django Book - OpenCV LP-Recognition (Well the NN should be replaced, maybe Tensorflow?)
Great work! I am really interested in your project because I am also working on a poetry generator using Python. So far I have it working with Robert Frost as the author only: http://www.nameamigo.com/robert-frost-poetry I wanted to verify that your code runs on Linux in Python 2.7. I just spend the better part of an hour trying to get it run on Python 3.5 in Windows... fail by me :D 
Touché!
&gt; I just spend the better part of an hour trying to get it run on Python 3.5 in Windows... fail by me :D When someone posts their python project I often skim through the code looking for print calls, and I'm always so disappointed when I don't find parentheses there :) 
&gt; I'm guessing your native language is one that can be perfectly represented in ASCII. Not even English is perfectly represented by ASCII.
Ooooh cool. I actually thought about this yesterday when I stared off into space. I mean, not about actually coding it but more like "well that's an interesting thing someone could do if it's even possible."
Wow.
you need to specify path to the firefox driver inside parentheses webdriver.Firefox(HERE) or include your driver location in your PATH environment variable
**Re. Re: Mixing the two** Right, and you can see the "self", argument in the function... but there is no class definition inheriting from scrapy.Spider. I've literally never even looked at the docs for scrapy until about 2 seconds before writing this reply just to see how it works. Is it really so hard to look at the docs before publishing an article? You simply can't assume the presence of a class definition inheriting from another class--especially when the function definition is right below the import statements without any additional indentation. It's just simply incorrect. **Re: Re: Controlling Delay** Yeah, but the for (broken) for loop after the delay is soup.findall(), meaning he put the delay between the action of downloading the page and parsing it. We could assume that is what he meant, but it is actually 100% not what he wrote. I really try hard not be negative when discussing other people's work. I like to encourage people and offer constructive feedback, and go out of my way to compliment the good points. However, this author is basically a liar. He basically states that he's used both of these libraries and offers his anecdotal insights--but it's simply not true. He couldn't possibly have used these libraries before. He can't possibly understand how classes work, nor the basic mechanics of how request/response systems generally work on the internet. It's entirely destructive to post this garbage here. Imagine you are a beginner trying to look at these code examples. The author doesn't care how much time you waste or how much frustration he causes. This is total garbage.
&gt; so if you raise BaseException(u'fuck') you will likely be fucked. Actually that'd work because it's all ASCII and python2's magic switcharoo. But this will fail: &gt;&gt;&gt; raise BaseException(u'fucká') Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; BaseException: &lt;exception str() failed&gt; 
Maybe this was ported from another language where you have to handle every exception a function can throw. I believe Java is like this.
You know guys it's not hard to think of exceptions not just as errors but also fun ways to exit code and enter code.
also this: http://stackoverflow.com/a/6470452/3810492
as for non-rap stuff, you might like kraftwerk-type music - i love it. check these out - they both use speech synthesis: https://www.youtube.com/watch?v=4YPiCeLwh5o https://youtu.be/lj1qLbJfmE8?t=90 Also - I actually released an EP entirely with this program, which can be found here: https://soundcloud.com/user-858260650-791809969/sets/imagining-the-flames
Had you heard [Danny Drive Thru's version of "Ante Up"](https://www.youtube.com/watch?v=_ygYvPA9G3o) before starting?
Not in Python 3 $ cat derp.py try: "a" + 1 except TypeError as e: raise Exception() $ python3 derp.py Traceback (most recent call last): File "derp.py", line 2, in &lt;module&gt; "a" + 1 TypeError: Can't convert 'int' object to str implicitly During handling of the above exception, another exception occurred: Traceback (most recent call last): File "derp.py", line 4, in &lt;module&gt; raise Exception() Exception $ python3 --version Python 3.5.1 
THIS IS INSANE I LOVE IT
I'm glad you agree! Hopefully the article doesn't pick up steam, as no beginner should ever see this and think it correct.
I meant raising the exception. 
I definitely meant on the exception. It shouldn't matter in this case.
There was a guy I worked with who put passes as place holders until before he knew what he wanted to do in the body of try catch or even if statements. When he went in to fill in the missing statements a lot of pass statements got left in.
That was really informative, thank you!
Thanks for the advice! I bought the udemy course "automating the boring stuff with python" just to strengthen my base knowledge of the language but I'll look into doing that as my first thing after. Would be great to have you around as a mentor any chance I could get a Skype to be able to ask questions over or any form of communication you prefer. I just find reddit PMs to not work out well for me.
Feedback is appreciated. 
You talk as if there is a choice. There isn't. Windows tells you, CodePage1252 or bust. End of discussion, no fancy unicode characters allowed outside of that.
Don't be so salty, I got it fixed with help from someone who wasn't salty. You should try that too!
I am **so** glad to have helped out there ; ) Released today(?) and possibly quite useful: https://aws.amazon.com/polly/ - I think that's a sign, no?
I honestly never understood why both languages couldn't support the same byte code. Its how Java manages to remain backward compatible for so long after all. Also, Python 3 FTW!
For me, python 3 is a step in the exact opposite of why I chose to learn and use python, and so I don't like it at all. The reason I'm against python 3, is that I want to still be able to use python and if everyone switches to python 3 it will be much harder for me to use the language. Never in my life have I seen or been given a good reason to switch to python 3, and I don't think I'll ever see one. 
SimulateMe! Jarv_
Edited.
&gt; It's one thing to raise the exception that you caught so that your calling code knows what went wrong. &gt; Then usually you'd want something else inside the _except_ block other than the _raise_ itself, I guess...
You end up raising an instance of Exception but Python creates it if you raise the class. 
Yeah, it just totally sucks. I can't imagine why you would post this kind of thing. It's super evil to mislead new programmers this way. I do have to admit, however, that I've often been guilty of over-researching something instead of just jumping in and getting to work at writing code. If anything, this has helped me to realize that secondhand evaluations and comparisons aren't nearly as valuable as forming your own opinion based on direct experience. So thanks to the author, I guess :P.
Good call - trying it out on my local machine. I know - I could use a VM, but just using iptables to mark packets and tc for everything else does not seem too risky If you have any ideas on easier/safer ways to limit/shape existing connections (I've seen glimpses of pyshaper and some other options, but looks like many things will need quite a bit of work to get it up and running) Having said that - just been tangling with tc and iptables for a while, and don't yet have a working port limiter running
 Python version 3.5.2 Tensorflow: VERSION 0.12.0-rc0 Running this in the system python3 on Ubuntu Xenial 16.04.1. I'm running it from command line with the following: python3 main.py --twitter tomf80 
 # I raise what I want # This exception proves the rule # I pass you all by
I dunno, enough arson could cover up arson. You'd just need a lot of it. 
This is especially useful if you have a super large project with multiple "modules" interacting with each other. Create a module specific exception, so when something fails, you know which module is causing the exception instantly as well as the original exception message
Just got started reading...so far so good. I'm a fan of your tsplot function for building the various plots. Going to be using that going forward (with proper attribution of course).
Where can I find an advanced cheat sheet. This is a basic pandas cheat sheet.
Just wait for CSI to show up, then light them on fire. 
You would hate me. I feel like it's more clear with them. Not just in situations like this.
Ah good - https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/qos/tc.sh It's a bit more complex than I'd like, but it works
I'm looking for an advanced sheet. Doing all sorts of group bys filters new columns ect is a breeze in dplyr with r. Looking for something that shows how to be as smooth. 
If you don't say *pass*, how does the code block know to give up control to the next code block? It's like in a board game - until you explicitly declare end of your turn, no one else can move. 
[removed]
Flask. why? Because somewhere down the line when you want to create something unique for your webapp that doesn't fit the django mold? your gonna have a bad time. if you want to learn the ins and outs of a webapp. use Flask if you just want a run of the mill website use Django
Yes. Usually, this is about adding logging code and adding data to the exception, then passing that along to the caller. That said, if you're trying to do threading in Python, you're going to have a bad time.
Thanks for the reply! I took a look at the PR but I still have no idea how to implement it. I have installed qdarkstyle using pip but I don't know what to do now.
those are important signals any program must respect - even if just by crashing. programs can't bluff their way out of system kill signals, and shouldn't try to.
I don't know if this is useful but I have it kicking around my bookmarks: https://github.com/juhgiyo/pyserver/blob/master/README.md
Ok someone clue me in like I'm 5
Something bad happens in the try block telling you specifically what went wrong with eg a ValueError or so Instead of handling the error or let it bubble up you raise one of the most generic errors available which will tell you exactly nothing This is the equivalent of lighting the house on fire because you saw a candle
I'm unsure if something as advanced as an async workflow is needed for my case. Then again, I am not even sure if select is needed. 
If you're on Linux, if the program is in the 'D' state, kill -9 can't do anything.
🎶 We didn't start the fire... it was always burning since Line 337 was running 🎶
To add to what /u/Vitrivius said: The only justifiable reason for a blind "except" (one that catches ALL errors, not just a specific type) is if you plan to use that except clause to clean up the mess, notify the user and keep track of the actual detail in the errors yourself, by at bare minimum logging them for example. Sometimes, the default exception handler terminating the program is a bit too extreme of a reaction to an unexpected error, and implementing your own exception handling this way can be the right thing to do. But a lot of times people use a blind except simply because they're too lazy to figure out what possible exceptions their code is going to potentially throw in normal circumstances. They just want to "make sure" their code will never "crash" by blindly ignoring all errors and letting the program continue operation as if the error never happened. This is very naive, and an awful habit to get into. It also becomes a debugging nightmare, since you have no way of knowing where errors are happening. It's especially awful when the program is full of blind excepts, because you can't just fix one of them, you have to fix all of them or you'll never know where the errors that you're actually trying to track down are disappearing to.
Good old defensive programming: no errors unmanaged. You buffoons pay attention, this is how you build fault-tolerant applications.
nose? really? ah... the article is from 2013.
Actually, this is the correct answer! It is not ipython that does it, it's just that my `ipython` links to ipython3. In fact, it's python 3 that shows the whole trace! This was actually very helpful. I feel this branch is the only constructive branch in the thread :/
debug = int(os.environ.get("SUUDO_DEBUG", 0)) try: stuff() except Exception as e: if debug &gt; 3: log(e) Just how I'd do it, so you dont forget to remove debug code before pushing your changes.
`raise` with no arguments means "reraise the exception you just caught". You probably knew that but maybe not everybody does.
 try: do_something except: logger.error("some useful debugging info") raise Nothing wrong with that, is there?
What if I told you this is actually the case?... I'm not even kidding : try: is_unique_property() # The function with the code in the image except: pass Ok, the situation in the code is a bit more complicated than that, but basically this is what you got.
You inspired me to make this: #!/usr/bin/env python2.7 """FizzBuzz with excpetion handling.""" def youre_exceptional(a=1): ('a'*(a &lt;= 100))[0] print a, try: ('a'*(a%3==0 and a%5==0))[0] print "FizzBuzz" except IndexError: try: ('a'*(a%3==0))[0] print "Fizz" except IndexError: try: ('a'*(a%5==0))[0] print "Buzz" except IndexError: print try: youre_exceptional(a+1) except IndexError: pass youre_exceptional()
I've mostly been tinkering with Rust as of late, and I enjoy it a whole lot. Pros: * it's fast - being a compiled language, it's (almost) as fast as C (and sometimes faster!), but also has... * compile time safety checks - Rust makes it mostly impossible to have memory management errors in your program with a very powerful compile-time static analysis process which tracks which objects are created and dropped when, and makes sure there can't be a dangling reference - even across threads * static typing - as much as I love Python's dynamic type system, static typing comes with its own advantages - refactoring is incredibly easy and you're guaranteed your program won't explode when you pass the thing that you've refactored to a thing you haven't refactored yet * traits instead of classes, and composition instead of inheritance * zero cost functional abstractions - you can write stuff like `(0..10).filter(|x| x % 2 == 1).map(|x| x * x)` and it'll not only _just work_, but compile to the same thing as a manually written out loop * `Option` and `Result` types - Rust doesn't `null`/`None` values and exceptions, and uses `Option` and `Result` monads instead, which makes error handling _very_ explicit, and at the same time, not very verbose (especially with the `?` syntax added in the latest versions) * `cargo` is great - it's basically `pip` and `virtualenv` all rolled into one and made incredibly easy to use * extra shoutout to [rayon](https://github.com/nikomatsakis/rayon) - doing anything multithreaded in Python is even more painful after seeing it Cons: * tooling isn't quite there yet - there is some autocompletion support in some IDEs with user-made plugins, but nothing even close to PyCharm or IDEA * compile times - they exist, and they're not fast enough to be irrelevant; there's work ongoing on incremental compilation, which should help matters quite a lot, but it's in really early stages * ecosystem is new - in Python, you're almost guaranteed to find an existing library for a thing, no matter what that thing is; this is much less true for Rust, though the important parts are already there * batteries aren't included - Rust ships with a minimal standard library (by design), and many useful things like datetime types aren't actually in the stdlib, so you have to go look for third-party (or second-party, in many cases) crates that implement whatever you want, and there are often multiple competing implementations with incompatible APIs and different featuresets
So many people raving about rust. I guess I know how I spent my next vacation. 
The main thing that I forgot to mention in the post: I can get stuff done in Rust nearly as fast as in Python, which is insane for a compiled language, honestly. The compiler is also insanely helpful, especially compared to something like C/C++, and even more so with the [new error message design](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html) that landed in 1.12.
Not really, or at least not reliably. The whole point of ReCaptcha is to be difficult to solve by computers, and with Google's experience and tech behind it, it's pretty damn good at it.
I routinely `except Exception:`; I use it to "wall off" parts of the code where if that operation failed it doesn't mean the rest of the program can't keep working normally. For example, the "send telemetry data" function has `except Exception: send_error_report()` at the bottom because no matter how "send telemetry data" failed, the rest of the program really doesn't care (unless it's OutOfMemoryError I guess...). And `send_error_report()` catches and disposes of errors inside itself, since... well, what, am I supposed to show them to the end-user?
You may want to focus on learning Test Driven Development and try a hobby project in that spirit. There's a book called Test Driven Development with Python by Harry Percival. I read this one, and it's a nice tutorial on building a Django site from the bottom up while using TDD
That is the same book actually. 'Obey The Testing Goat' is a phrase from that same TDD book. That is why the book has a Goat on the cover :D
Haha! That settles it then! Thanks a lot dude, I'm sticking to this one. :)
good project, but.. when I see sections like these - "How to use", it means you should invest a little bit of time to package your project. For simple stuff like this `setup.py` is basically enough, maybe `make` would be nice some example straight away. also PEP8
Beating ReCaptcha is a huge engineering effort that requires many hours of work. No way someone will share it for free.
Yes, definitely. [Nose has been dead for years now](http://nose.readthedocs.io/en/latest/#note-to-users) and nose2 is nowhere near as mature as pytest.
No system wide changes are needed, just [use a virtualenv](http://stackoverflow.com/questions/29934032/virtualenv-python-3-ubuntu-14-04-64-bit) to isolate your django project from your system libs: sudo apt-get install python3.4-venv pyvenv-3.4 /path/to/project cd /path/to/project source bin/activate anything Python related you do after `source bin/activate` will only affect the virtualenv: python -V # the default interpreter is Python 3 pip install django # django installed inside your virtualenv Every time you will work on the project you have to activate the virtualenv using cd /path/to/project source bin/activate and once you are done and want to leave the virtualenv, do deactivate
The best testing module for Python is Hypothesis, hands down. Property-based testing takes a little getting used to (what are the properties to test?) but is incredibly powerful. Basically you declare what kind of inputs your function takes, and it will be called with hundreds of examples - semi randomly exploring the state space. If any fail an assert or raise an exception, *it reduces to the simplest example*. In the trivial case, this can catch all kinds of edge cases around maximum or minimum values, empty collections, name collisions in data, encoding issues... And that's without an assertion! Then you can check - really - claims like "any my_object can be serialised, the output deserialised to an equal object, and reserialised to a bit-identical representation". This is a hugely valuable thing to know, and usually exposes all kinds of edge cases... Oh, and I suggest using py.test as your runner; the interface is great. Read up on the discovery conventions, use Hypothesis instead of py.test parameterisation, and enjoy. 
https://gist.github.com/chozabu/002ac39ba45cde1fb5131dccb2c3c8d5 -there, with python generating a few of those lines to create custom classes, and mark relevant ports, things should be good Of course, I've just realised nethogs does not seem to easily give up port numbers, may have to go for a pcap related solution
SimulateMe! well_groomed_raccoon
I've been reading a bit about Rust and seeing quite a few positive responses about it, and so I'm pretty interested in giving it a go: can you recommend any good learning resources?
Your face is naive
First language I learnt was Pascal, was a right pain in the ass, but it ended up helping quite a lot as it forced you to do everything by hand and get really familiar with all the general programming constructs and how to use them (and how and when *not* to use them and how to break everything) Then learnt (some C++) at uni, I actually quite liked it: nice and rigorous, fast, cool looking syntax. Then I learnt R then Python and now I think I might learn C (properly) so I can build nice and fast things for my python scripts, or maybe Julia because that's purported to have some pretty insane performance results and they're angling for a data/stats/etc sort of role, or Rust, because it seems pretty cool, hear lots of great things about it, C-level speed, etc..
Cheers, will do!
I started with Python and tried out Java about a month ago. I really enjoyed the ability to have multiple constructors in one class.
Might be able to do this.
You need to tell us *exactly what you did* and *what the exact result was* if you want any help. Otherwise, we have no idea what you did wrong. Include the exact commands, a description of what "it broke" means in detail, including the exact output. Ubuntu has Django packages in the official repository. They are maintained by the distro and intended to be used. They won't break anything. The only command you should need is sudo apt-get install python3-django It will install everything you need. It won't touch your Python 2 installation. 
I've used reportlab to create PDF reports. Works pretty well for me
&gt; And yes that would produce strange glyphs, but there would be no exception! So silently produce corrupted output, instead of erroring. Completely unpythonic, not to mention dumb.
Thanks, have an upvote. But this post would be way more appropriate, if you post the python code to generate the images.
Not really sure what this adds to the current conversation taking place in the community. It completely misses the point that when you set out to learn Python, the first choice you have to make is whether to pick 2 or 3. We're not helping beginners by pretending that choice doesn't exist, because it does. 
But then clearly you'd need a 4th arson to cover up the 3rd arson. 
Yet, It's Python, Not Python 2, Not Python 3. That's the whole point of it.
I think you missed what I was getting at: I'm all for the logging of exceptions and I've certainly had cases where I wanted to catch the general `Exception`. The point here is if you're doing _anything_ in the `catch` block, you don't need the `pass` statement.
You should definitely learn python 3 though, even if they are apparently the same thing
I agree, would be stupid to miss out on new features that are in 3. And reading 2 code is mostly easy.
Absolutely fantastic! 
&gt; "If you’re on the older version (“Python 2” as you say), you’re a decade behind, you should have upgraded at 2008." Not to put too fine a point on it : Go fuck yourself, buddy. You don't know me, you don't know the constraints I work with, you don't know what my goals are, and thus you don't know what I "should" be doing. I don't go around writing medium posts telling you how to do your job.
I've started with C, Assembly, VB(A) and then Java. Dabbled in Perl and then discovered Python. It was an eye-opener, a joy of coding that I haven't experienced in a while. I want to do everything in Python, but sometimes I can't for a number of reasons (unrelated to the language or any technical issues). So for applied stuff I mostly do Python, but also a fair bit of VBA - using Excel as and easy medium to exchange prototypes with clients and easy way to mock up a UI. I know that Python can be integrated with Excel in a number of ways, but I find simplicity of sending a spreadsheet that works without installation of Python on client's computers to be a very useful feature. VBA also has this mini IDE/debugger always on hand and always installed on everyone's machines - so you can webex and troubleshoot your macro right at the time of error happenning - I find this to be a real time saver. Otherwise, Python rules with its optimal balance between simplicity, speed, availability and sheer number of libraries. Also, do not take someone else'es crappy VBA code as a measure of that language. If done right, VBA can save you a lot of time and hassle and you can write the code that is fairly elegant and doesn't crash. It can't match Python (because Microsoft pretty much abandoned it), but nothing beats Excel/VBA combo for one-off throw-away prototypes (which you end up never throwing away really - because they do the job :-))
If you're on Ubuntu 16.10 pyvenv /path/to/env source /path/to/env/bin/activate pip install django That's it. Do the rest of your installations in the same environment, or make a new one if you need a different setup.
Is there any other kind of enthusiasm for tech. great, some goto the point you can also set an order on the culture of the cisco GUIs where Jaava based, and with an excellent rep, it will definitely get your CV recognised. ~/u/Jarv_ ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
Was rolling on to help people out. ~/u/PenguinRocketScience ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
The headers in HTTP 1.1 are strings so the program essentially has to recompile them into binary and add more. So it is duplicate work because the oreo final headers are just a waste of time. Also h2 compresses everything in gzip. This factor adds to the complexity because we are serving straight text files and pushing it onto the loader to make those compression. It adds more work into the load balancer especially in a container like environment. 
Thanks for the reply. Can you help a bit?
Oh. Didn't realize that was what you were getting at. I guess a `continue` statement could be useful in a loop, but `pass` is totally unnecessary.
Yup. My organization has thousands of lines of Python 2 code, Running on proprietary platforms that only support Python 2. "Switching to Python 3" would mean my organization needs to acquire and deploy millions of dollars of capital to enter the software development business, and develop entirely new Python 3 platforms to compete with the two billion-dollar firms that built and maintained our existing Python 2 platforms. This multi-million dollar expenditure would yield exactly $0 in additional revenue. But hey, according to shit-for-brains: &gt; This is all it takes to upgrade: https://docs.python.org/3/howto/pyporting.html 
can you share the code for that last one? That looks sweet :D
In general I've gotten more into statically typed languages and I just adore compiler warnings, IDE warnings and all the other awesome tools they enable.
These nerds can't take a joke about SJWs
It would really help if we could filter searches on Pypi for Python 3 support.
Started out with python, and recently started learning Haskell and Java. Haskell and functional programming is great, and I really like the static typing - which is something I miss in python, but the best part of learning Haskell really were the use of it I got in my python programming - functional thinking and a greater use of higher order functions. 
Inception Exception?
The only problem for beginners like me who are learning to code is that the default python that is bundled with my raspberrypi is python 2.7. To prove this type "python" into any bash terminal and read the output: Python 2.7.10 (default, .... I think that having to call it python3 instead of python adds a layer of obscurity that would be best if changed.
Well, the "if it's critical" bit should be handled in more specific catch blocks, not in a generic "catch Exception:" block.
Lol, thanks. Between that, the global objects, the complete lack of try/except, the complete lack of functions that return a value (they leave a web page in a state such that the caller can search it a second time for the same value), has made this quite the learning experience. FYI: if you get Nonetype or Ctype errors but they don't have a line number or even a file in the dump, look for global objects.
The way most Linux distributions have managed it, it's hard to change what the name `python` points to without breaking things. But you can change it for your own terminals by adding to your `~/.bashrc` : alias python='python3'
Why don't you post it on /r/LearnPython ?
I've been programming Python for a few years, but there were some details in these questions I wasn't aware of. The output of this especially surprised me: def multipliers(): return [lambda x : i * x for i in range(4)] print [m(2) for m in multipliers()]
How does this compare to Beautiful Soup?
just rolled this out in a project. it took me about half a day to swap out flask_jwt for this version. was even able to customize the error messages so the user experience is the same. so far so good! thanks!
The software I use daily only accepts Python 2.7, so I use that. Sometimes it's the fault of old vendors for not updating their core infrastructure. I'd gladly learn the current version, but other than my own projects there'd be no real reason. 
I was a new user to Python and that was the language being used. I imagine anybody going into the geospatial field that wants to learn Python would be in the same boat. Python 2.7 dominates that whole industry. I've had friends hit walls after doing intro classes in Python 3 and then trying to use it with some of the big geo packages. The syntax is fairly quick to convert, but that first hiccup scares a lot of new people away. I think the answer is start with what version will serve you best.
That is fascinating. Seriously cool how they worked it out. Whoever said data scientists don't add value? :P
I created an image placeholder site 5 years ago called http://fpoimg.com where I can easily generate new images based on a given size or text that I want to display: http://fpoimg.com/300x300?text=Advertisement I started the project to 1) learn about PIL 2) Learn Flask 3) Create an open source project (https://github.com/kylehayes/fpoimg) fpo means "for placement only"
Sorry to follow-up now, but I'm basically trying to use this for my business by running an Instagram bot. I run this on my Mac, but I want to run it on something tiny, since it's purpose is basic. You think Pythonista could run this script? Thanks! https://github.com/LevPasha/instabot.py
Gotta catch em all. 
I dislike working with anything that doesn't support 'advanced' features like iterators and generators (instead of lists), function decorators, context managers etc (things that make code much cleaner) or has a weak standard library. I had to do some Node.js, and even on v7.x with most of ES6 supported it was a drag. So much hairy code and wasted energy on housekeeping for even the most basic pieces of code. Only thing I like about JS is the effortless asynchronicity (event loop by default, promises) and ease of passing around functions and closures (extra nice with arrow syntax). But this is offset by the amount of noise you get in the code. ES6 helps a ton (Set, Map, arrow functions. Object. helper methods) but it is nowhere near Python. Also I gained even more appreciation for the way everything in python interacts sanely, thanks to the many little protocols (the \__dunder__ methods etc).
Yeah, you don't get it. 
This actually awesome. Thanks for sharing! It's really cool (as a hobbyist) to see how python can be used in the real world.
Well done. Clearly presented and resulted in a tangible real world improvement that any layman could understand.
Sometimes when I'm sure no one is looking, ill lock my door, turn out all the lights in my house, and will whisper ever so faintly *modern PHP isn't that bad*. 
I like using ElementTree for parsing XML files.
&gt;Stop saying “Should I learn Python 2 or Python 3”, just learn Python. This does not help much, imho
The output is **not** corrupted, the rendering might be - important difference! So you prefer exception throwing over safe execution just because of a shell that cannot render a used coded character? Fine. I do not. So how can I deal with this situation? Any suggestions? I am still waiting for an example program that ensures to be runnable without exception on arbitrary systems!
Ah, this would just be working on an old iPhone 5C with a broken camera :) I thought about a Raspberry Pi, but they're pricey. But good thinking! Thank you
It's easy to insist porting 2 to 3 but that shit costs money, foo. :)
Python means "Python3", even if /usr/bin/python doesn't.
Don't know much about lektor, but if you are looking at a static site generator then whether it's Python or not doesn't really matter too much anyway, I use hugo for that job. If you're worried about regenerating content every time there is a change why not automate this, can't you use some sort of Git hook followed by an rsync or something similar to push the build files up? As for Wagtail, wagtail is quite nice too but I consider it more a "CMS framework" rather than a CMS as you define your own content types first, e.g. Page, Post, etc. and then your content.
From the tutorial: &gt; change the default python version to python 3 Note that there is no justification given for this step and I would question the need for this. In fact I expect it will harm your system. You can run django under your preferred version of python most reliably by using a virtual environment since your choices will then override changes made by Ubuntu.
Before was QBasic in high school, which I forgot after a few years. I learned Python before taking a Java class in college because I'm a statistician by trade and Python had a reputation for being very pleasant. I love how Python simplifies a lot of annoying things in Java, like vectorization (it's still kind of a pain in Java 8) and default function arguments. I'm learning Scala now and it's like Python and Java with a ton of extra functional features. One thing that's really nice about Scala is s-strings, which allows you to put variables directly in strings. So if you have 'val name = "David"', you can just type s"Hello $name" and it'll print "Hello David." The funny thing is Python is adding these (but as f-strings) in 3.6.
Also, I think the specific error comes from you trying to add `h`, which is initialized as a 'list' type in the `for h` apparently, to an `total` which is an int. I think /u/xgpat is correct in his thoughts on your intent.
Can't test it right now, but this should be slower than if/elif/else. And syntax is messy, since it does not make code shorter or more readable. 
in the instructions, what does "Print that value into the console" in #3 mean? As far as I can tell, nothing needs to be printed here. I'm just trying to follow directions...
Pascal, biggest POS in existence, most ridiculously overly verbose bobbins. You open and close blocks with quite literally "begin" and "end". : l
I'd wager the printing is just so the website can check your work. /u/xgpat's comment is doing exactly what step 3 is asking for. In their first line, they multiply the price by the stock, which you are doing, but then they store it (`total_price = ...`), which you are not. Then they print `total_price`, aka "that value" in step 3. Finally they update `total` by adding the new `total_price` to the overall `total`.
wow. Thanks for the link
the correct code (that passes the lesson) prices = { "banana" : 4, "apple" : 2, "orange" : 1.5, "pear" : 3, } stock = { "banana" : 6, "apple" : 0, "orange" : 32, "pear" : 15, } for key in prices: print key print "price: %s" % prices[key] print "stock: %s" % stock[key] total = 0 for n in stock: total = total + (stock[n] * prices[n]) print total has no print there before the final "print total" Basically, I don't see how this follows the instructions.
A nicer solution to question 1 would be: def extendList(val, _list=None): _list = _list or [] _list.append(val) return _list
&gt; Python rules with its optimal balance between simplicity, speed, availability and sheer number of libraries. Exactly.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
That is such an elegant and well thought out argument. However, why should progress be encouraged simply for the sake of progress? If the progress is a negative thing, shouldn't we abandon it and start over fresh? That is the entire concept behind evolution and natural selection, and yet when it comes to python3 we enjoy trying to force it down everyone's throat, simply because we want to.
Heh, I did, but it got downvoted. Maybe they thought it was spammy?
Hopefully if we get some traction on it - it will get resolved! Still waiting. https://github.com/spyder-ide/spyder/issues/3447 I made that and it was merged to a similar issue. https://github.com/spyder-ide/spyder/issues/3323 There you go!
You need to be more specific as to what kind of python programmer these interview questions will suit. Should a Data Analyst be expected to know what a Senior Python Developer knows? The answer is no. These type of posts are misleading to those who actually want to interview well for a job.
Your choice of variable names can (and should) be improved. Had you named your for loop variable properly, mistake would have been easier to spot, check this out: total = 0 for item in prices: total = total + item obviously wrong. 
It's possible they just want you to see the output for your own benefit but who knows. Glad to see you got it working.
https://www.reddit.com/r/Python/comments/59bvlj/every_python_package_now_preinstalled_on_replit/?st=iw6t07g9&amp;sh=8bae10d0
You could also check out OSINT (specifically recon-ng), which uses a lot of the tools that you are describing for reconnaissance using public information. There are plenty of YouTube videos on the subject.
Thank you!
This is true, and so far I have missed 3/3 but its well formatted and well explained so that anyone can understand it.
It doesn't. It looks like an attempt to gather some attention by kicking the embers of a fire that have died down several days ago.
Yeah I only posted the link to these because the questions showed subtle, tricky details of Python.
One of my favorites is `@reify` from the Pyramid Web framework. It's like a property, except it's only executed once and the result is "cached" (the clever bit is the result is stored on the instance and *shadows* the descriptor, so there is no `if` statement to check whether the function needs to be executed, and no `_private` attribute to hold the "real" value). [Here's a Stack Overflow answer](http://stackoverflow.com/a/35328997/416467) I wrote with an equivalent one in case you don't want to drag in a whole Web framework for one decorator. :-)
My favorite is pytest on the console.
thx! didn't really know that
thx! didn't really know that
Absolutely - I hope that after learning a few other languages that I have a wide enough range to select the most appropriate language for an individual project.
Read other peoples code ! I rarely did this for other programming languages, in Python it is much easier. You can learn a lot. Don't dare to dig into the standard library, and if questions come up use stackoverflow or reddit to learn.
I already resubmitted it there yesterday, but thanks anyways!
Why though? Python **has** an official job board: https://www.python.org/jobs/
Don't quit your day job.
Awesome. Thank you for sharing.
Damning with faint praise.
I don't understand why it broke the package manager. I think even though it changed the name of python 3 to python and python to python 2 any dependencies of either language was confused and mixed up. But then again I might be wrong.
Yup. It's at repl.it.
I don't think you need masked arrays for what you are doing. The following should do it in pure numpy mask = (grid &gt;= threshold) vals = grid[mask] rows, cols = np.nonzero(mask) 
ExceptionError: ExceptionError
I created a Google calendar parsing library and Jupyter notebook front-end. I need a better name but you can find it here: https://github.com/eayoungs/Gcal
Great stuff. From the Press Release: &gt; Further tests on PV46 by engineers from LTA, DSTA and Rohde &amp; Schwarz showed that faulty train signalling hardware on PV46 was emitting erroneous signals in addition to the ones it was supposed to emit. These erroneous signals occasionally prevented trains travelling in the vicinity of PV46, including in the opposite direction, from properly communicating with the trackside signalling system. This loss of communications led to the activation of the trains’ emergency brakes.
Any python script installed by Ubuntu would have been written for the python2 interpreter but after your change those scripts would have been run under the python3 interpreter, and python3 is not backward compatible.
I self taught PHP (starting about 14 years when I was a wee lad) before learning Python and had to unlearn a bunch of bad habits - most of them my own doing, but a few from PHP itself. That was about four years ago, I've occasionally gone back to some PHP code I've written to touch it up but that's it. I've had to pick javascript up because in web development you don't have a choice. I've also tinkered with scala, java and Typescript. And I know enough C# to do small feature PRs at work. 
🎶 We didn't start the fire... it was always burning since Line 337 was *Turing* 🎶 No? Yes? raise Incomplete_Sentence()
Much better. 
I've never used it myself but there's also [xtopdf](https://bitbucket.org/vasudevram/xtopdf) which again builds on Reportlab.
Before Python I only know TI Basic, I missed GOTO for about a week.
Also consider posting to http://pythonjobs.github.io - it's a job board for developers where you make a pull request to post a job. This developer friendly mechanism acts like a crap-filter to exclude some of the more clueless advertisers who might be posting on other sites. 
"Automate the boring stuff".
I know your internet is limited, but codeacademy has a really good Python course. Their courses vary in quality, but I've found their Python course to be excellent for beginners.
As a working data scientist and a socialist who wants a balanced economy, I would say I **can** add value, but most of the time, I have not.
Rhymebase is still in its beta stage. Please like [Rhymebase on Facebook](https://facebook.com/rhymebase) if you like the API. Thank you
while in theory that seems like an innocent question, the situation nevertheless contains a sufficient volume of ambiguity, so that when presented in a less than generous manner -- to an uncharitable mind -- there is some difficulty in justifiably assigning to it the epithets you applied to the statement, inasmuch as the precise correlation between the information communicated and the facts, insofar as they can be determined and demonstrated, is such as to cause epistemological problems, of sufficient magnitude as to lay upon the logical and semantic resources of the English language a heavier burden than they can reasonably be expected to bear.
/r/iamverysmart
And no error type either!
I've got an account, but haven't really been able to do much yet. I have roughly about 2 hours of "free time" a day (less because truck inspection/maintenance is included in "free time") to learn, so it's a slow process. 
These are mostly gotchas. Any company asking them as interview questions as anything more than an assurance that you're well versed in literature surrounding the language is not a company you want to work for. I don't give a fuck that closures are late binding- if you're writing a lambda in a list comprehension you're almost certainly doing something wrong. The only one you should really know is the below (plus maybe the last two), because you can conveniently utilize this behavior to avoid the necessity of error checking in a lot of situations: list = ['a', 'b', 'c', 'd', 'e'] print list[10:]
How do you write your tests and what test runner are you using? If you are doing API design work, maybe documentation generation and mock server setup based on https://apiblueprint.org/tools.html would be handy?
The first one is good to know, since a parameter defaulting to a mutable is something you'll want to do sooner or later, and you might as well learn it the easy way. I agree it's not a good interview question, though.
Oh, ok. "Fuck off" rescinded then. I assumed you weren't given that you make "triggered" jokes and such.
Thats what I was thinking, but I don't know how that would have happened, since I've installed both on windows and nothing of the sort happened, additionally Pycharm may have caused problems by editing which version of python's cython libraries gets used but I didn't think I did anything different additionally I need some way to revert or some way to find out what actually happened. 
Half the time when I throw together a generator I want to use it more than once and when it's exhausted the second time I just throw my hands up and make the original call into a list or numpy array
If you're interested in weasyprint, here is a [post](http://pbpython.com/pdf-reports.html) with some examples. Hope it helps.
My first GUI language was VB4.0 on windows 95 :)
Gotchas are gotchas. They're not interview questions. Unless my job is going to be to fix a whole ton of broken python code written by people who didn't know python, this is irrelevant. You might as well ask me to solve a Rubiks cube- it's an interesting puzzle but you only know the answer if you've spent some time looking into it before.
In addition to what others are saying there are some very specific shortcuts that stuff in itertools can provide. I use "product" all the time... # iterate over the cartesian product (all combinations of 1 from each category) of a few filter categories... for gender, grade, major in product(genders, grades, majors): # operate on this combination of the various categories print(gender, grade, major)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Are you someone who writes flawless code out of the gate? You've never spent some time stumped on why what you thought should work didn't? I get hit with "gotchas" at least a few times while writing code for a larger project. Being able to solve them is pretty useful, so long as the "gotchas" are realistic, which again, was my first question to you. No, I don't think all "gotchas" are the same, but that seems to be your argument. 
That really depends on your skill level with SQL. If you don't have a strong grasp of set theory, cadinality, indexes, and best practice normalizations then you can end up with crazy o(N^N) queries versus something saner like o(N*2)
I am a fan of Calvin and Hobbes and wrote a [script](https://github.com/shagunsodhani/calvin) that downloads all the comic strips posted by [@Calvinn_Hobbes twitter account](https://twitter.com/Calvinn_Hobbes)
VBA--&gt;Python--&gt;Java
That breaks if the caller passes in a specific empty list expecting it to be modified, which is why explicitly checking for `_list is None` is [preferred by PEP 8](https://www.python.org/dev/peps/pep-0008/#programming-recommendations). 
Wow, that's an incredible resource. Thanks so much!
I'll put another vote in for some kind of interactive codeacademy style course. It will give you a "feel" for what it is like to work with the language, and familiarize you with the basic concepts. That said, I'd also recommend reading other kinds of materials in parallel to using that kind of course so you can get an actual *explanation* of how it works. I'd also possibly recommend trying to familiarize yourself with some kind of linux environment. It's technically not necessary, but I would argue that it is a related skill set that will serve you well. Think of it this way: Python itself is open source software. It is built of a rich ecosystem of open source libraries. Linux is really the native environment of that ecosystem. I always run Windows on my computer, but I run some kind of virtual machine or cheap rented virtual private server as a development environment. It's crazy to think that I am so comfortable using Windows day to day, but from a development perspective I find Linux to be much simpler to understand, more powerful, and more natural. This is a highly subjective opinion, but it is definitely my strong opinion. Edit: Oh yea, and check this out: [Windows Subsystem for Linux (Ubuntu)!] (https://msdn.microsoft.com/en-us/commandline/wsl/faq)
can people stop downvoting this? I think its also important to see the kinds of mentality we need to avoid.
You could post the problem here. 
Well, I think it is quite stupid but you can create new string by saving current state of "Capitality". You start with capital letter and then everything except space changes it to lowercase. And of course space changes it to capital letter again.
stackoverflow, /r/learnpython
Thank you I posted there too
using https://pypi.python.org/pypi/xmlrpclib module and total downloads is a sum of downloads of all releases.
I'd do a comparison of your input string either upper() or lower() and the same with the comparison list or tuple. if input_string.lower() in (x.lower() for x in comparison _list): pass You you could do similar with a dictionary to keep the original capitalization from your list as well and then just see if it is in, and if so grab from the dictionary. comparison_dict = { x.lower(): x for x in comparison_list } if input_str.lower() in comparison_dict: print(comparison_dict[input_str]) Just some thoughts, lots of ways to do this. Probably a faster way too but I've been on a Python slumber lately due to work.
1 - code for Flask framework 2 - code for Requests module
Using unnecessary expletives? 
That's not ``print``. I want tu use ``print`` in my CLI programs - that's the challenge!
How do I use the intel implementation without installing anaconda? 
Well, the documentation is found here, why don't you give this a try: https://software.intel.com/en-us/intel-vtune-amplifier-xe-support/documentation 
He's specifically said he can't use `str.title()`, so this option is out.
&gt; `user_input[0] = user_input[0].upper()` You can't do item assignment with a `str`, so that breaks. You'd need to do something similar to the following instead: user_input = user_input[0].upper() + user_input[1:] EDIT: I missed Hiropants making the `list()` call. I'm an idiot. Disregard this.
Edited my comment, chose the wrong str method.
Now that standard anaconda includes the Intel MKL, not that much difference. It's a 30%ish speed up over non MKL Numpy, but obviously that varies widely depending on your workload. 
The only reliable way is to detect the captcha, forward it to a human, let him/her solve it, and foward the result back. You can use the turk machine for this, and pay people to solve it.
So, do i already have this in a regular Anaconda distribution or do I have to do something extra?
Run "conda list mkl", and if anything shows up you've got it. If not, "conda update anaconda" should do the trick. 
Check out Hypothesis for generating test cases - it's perfect for hammering an api. Just declare the arg types and constraints of each endpoint, and assert that calling them doesn't raise and error (plus any more specific assertions). And don't forget to check the failures really fail! The end result is real confidence that things work, and edge cases are covered too: Hypothesis doesn't just generate values randomly, it uses heuristics to explore known error types too. And then simplifies the error case to a minimum example! 
The documentation for their bespoke libraries (like pyDAAL) is seriously lacking. As in, it's doesn't seem to be online. Otherwise if you have anaconda+MKL you have the most immediately useful part. I suspect the rest comes in much more useful if you are trying to squeeze more performance out of a specific bit of software without scaling your hardware. For the rest of us - remember not to prematurely optimize, and always consider the cost/benefit ratio of optimizing vs just buying faster hardware. P.s. Also note that Intel has always pulled a bit of a dick move with MKL and friends - it optimises for features which exist on both Intel and AMD processors but deliberately disables them if you run on an AMD CPU. Which is just spiteful.
Last time I had to edit an SVG I couldn't find anything useful among SVG specific libraries, so I used `xml.etree.ElementTree` instead.
Cool, Thanks.
&gt;P.s. Also note that Intel has always pulled a bit of a dick move with MKL and friends - it optimises for features which exist on both Intel and AMD processors but deliberately disables them if you run on an AMD CPU. Which is just spiteful. Honestly that's just normal business for Intel.
So you basically built the SVG by hand, and just used xml.... as a convenience library to deal with the XML-ish nature? 
I guess thats exactly it, I remember reading that the whole reason typing python in terminal called python 2 was to ensure backwards compatibility. the author is a real cunt.
I completely agree. It's one of the best highs you can get!
Love SWN. Hope your project goes well!
Fair enough. I think this is silly but considering OPs restrictions, you're right. 
I've patched 7 different bugs and pushed about 1/2 way through the milestones I set for myself before the 0.2-Alpha release of my Python Roguelike called Qaf. Big hurdles I cleared this week: * Major code refactoring to make things easier to read and easier to find. * Patching a number of bugs. * Added the beginnings of items and equipment. There's only 1 item in the game right now, a longsword that the player starts with and can't drop or swap, but it's the beginning. * Pushed a bugfix release: 0.1.1-Alpha Here's the repo on github: https://github.com/jonathanabennett/Qaf EDITS: Reddit Formatting is hard. :\
Please consider posting such questions to /r/learnpython. Thanks!
Lol I had actually asked an entirely different question, I'd assumed you were talking about the circle line on the London underground. I thought tfl used cool internal station codenames like Labrador park instead of king's cross etc
I beat you! VB 3.0 on Windows 3.1! hehe :)
Fake reviews is a huge issue for many programming books. I am reviewing a lot of books myself, and I am amazed how often there are reviews which are obvious manipulations where they show zero evidence of having read the book.
Experienced Python/fullstack web developer in Göteborg, Sweden looking for remote jobs (temp/perm). Portfolio: https://414soft.com/portfolio-en.html Detailed condensed CV: https://414soft.com/jacob414-en.docx E-mail: jacob@414soft.com
Rather than go through and change the user entry, can't you just just use lcase or ucase in your sql comparison against the list you have?
Just use `pytest` and save yourself all the trouble of dealing with individual warts - it has better discovery, better reporting, less boilerplate, and more powerful features (eg fixtures). Add Hypothesis to generate your test cases, and things are really nice :) 
Yes, very good link, I actually had it in my favs but didn't remember! I discovered Anaconda in this article.
I got bit by many of these when i was first starting out with Python. I would have liked to have seen this back then!
The top comment is pretty good to understand the problem https://www.reddit.com/r/Python/comments/5fqln4/in_case_of_fire_light_a_fire/damd3hl/ You can try it out. Open your python interpreter (Python2, if you can as Python3 will correctly explain you the problem) and try the following: a = b You should have a message telling you what is wrong and where the problem is ('b' is not defined). Now try this: try: a = b except: raise Exception() You should now get a beautiful "Exception" message that is, you'll agree, really informative. Now, imagine this piece of code is lost among the tens of thousands of Python lines in your project and an error occurs... You'll get this simple "Exception" message without any information about WHERE the problem is or WHAT the problem is. Good luck for debugging! ;) (I hope I explained you well)
I think the project https://orator-orm.com/ could be a good one. It's a "Python Active Record".
&gt; Edit - from reviewmeta.com: How did I not know about this site?!
you can have a look at [seagull](https://bitbucket.org/rndblnch/seagull). it has a pythonic API to build SVG, can (de)serialize to xml (to read/write svg files) and can display SVG on top of OpenGL. (disclaimer, I am the author …)
That is why i intentionally made the input type a list then after ensuring proper mutation joined it into a string I could have just stored it into a temp variable i guess rather than a list 
Well, actually a terrible bot. /r/shittyrobots
People still buy programming books? 
would be hilarious if this was a data science book, alas, it wasn't...
...Dun dun dun!
I was following their [ABI example](http://cffi.readthedocs.io/en/latest/overview.html) to try and get it working. Although my code analysis says there is improper syntax used when writing: ffi.cdef( int printf(const char *format); ) and i cannot figure out why. could it be due to not having the cffi package installed? 
Oh yes, now we know
Indeed. Here's OP's code: class TestIsEven(TestCase): def test_should_all_be_even(self): for n in (0, 4, -2, 11): with self.subTest(n=n): self.assertTrue(is_even(n)) here's pytest: @pytest.mark.parametrize('n', [0, 4, -2, 11]) def test_should_all_be_even(n): assert is_even(n) And that works starting from Python 2.6, not 3.4. ## But wait there's more Here's the subtested error result: ========================================================== FAIL: test_should_all_be_even (__main__.TestIsEven) (n=11) — — — — — — — — — — — — — — — — — — — — — — — — — — — — — Traceback (most recent call last): File “subtest.py”, line 23, in test_should_all_be_even self.assertTrue(is_even(n)) AssertionError: False is not true the information you're looking for is usually in the stack trace, but this time around half of it is in the title. Meanwhile in pytest: _________________ test_should_all_be_even[11] _________________ n = 11 @pytest.mark.parametrize('n', [0, 4, -2, 11]) def test_should_all_be_even(n): &gt; assert is_even(n) E assert False E + where False = is_even(11) The information you're looking for is in the rewritten assertion *and* in the title *and* in a separate header listing all the parameters, meaning you're going to find it no matter where you look for it. ## But wait, there's more Here's the test report from unittest: `F` Here's the test report from pytest: `test_thing.py ...F` In pytest, each parameterised iteration is reported as a test case, failed individually, and *gets its own setup and teardown*.
There is never a post about unittest without someone pointing out pytest ;) 
thank you very much, i figured out the syntax errors and got it print out the example message. based on your help, i'm guessing that there is no need to import the .dll file and import ctypes. or should that still be included?
Oops, had no idea about that sub, thank you!
Pandas is really great, if you have the time to learn it, and will deal very simply with excel, output to multiple formats, etc. You can use it with jupyter notebook to error check (interactive terminal), as demonstrated by the guy who wrote most of it in the link below. It also incorporates matplotlib, numpy, etc. and is pretty fast if you're using large datasets. Dealing with the dataframe object (which is somewhat like what you are used to in excel tables) is just a little more involved than using dictionaries and makes intuitive sense after you spend some time with it. That said, especially if you're new to programming I'd give myself a week or two to learn it thoroughly before promising anything to anybody with it. https://www.youtube.com/watch?v=w26x-z-BdWQ
why not? How do you prefer to learn new stuff?
You don't need anything that has to do with `ctypes` - `cffi` does the same thing, just in a different way.
umm have you heard about this new Thing called internet? it has current language documentation, interactive forums and tutorials.. you know everything you need and more? but I can see that someone has to show off with dust collecting paper books.. e-books no idea why would you buy those?
I am a big fan of the python+pandas approach to extracting data for reporting. If you are new to python, you should definitely spend some time learning it before diving in too deep. I have written several articles on this topic. You can [start here](http://pbpython.com/excel-pandas-comp.html) if you are interested. Good luck.
There are a lot of good PDFs and YouTube videos out there as well. I still find a paper book more comfortable to use than a PDF though. 
from what I am understanding, now I can go through the header file and create the desired C functions into a Python script using cffi. Any future files that wish to apply these C functions would only need to import the original Python script I created?
I realized this as well. Just a year ago, I used to blindly put my faith on Amazon reviews and buy whatever is 4.5, but now I have to run each product through a 3rd-party websites to check if the reviews are legitimate. 
Travels, commute, reading not on screen, etc. etc.
Tutorials always feel like I miss the idea behind everything. Sure, they are the best way to learn how to do something. But they suck at making you understand why it works like that. I like to build a foundation, either using books or something decently structured at least, and then expand on that by tutorials. Just tutorials alone make me feel like I am not doing the thinking myself.
It should already be a warning that the book does not display its author, but rather have some name like "UpSkill Learning".
If people from this thread still go ahead and buy the book, then it's fair enough. They were dumb enough to do that in the first place.
I go by a simple rule regarding digital textbooks on Amazon: if the cover has 3 or more different fonts, it's not worth checking it. It goes against the saying, but if you're using digital tools to publish, at least put something on the front that gets your attention on it before reading a preview.
Your frozenset of strings is (obviously) hashable. If you used the hash as the key it would free up a lot of memory. 
I also judge books by their covers 
Maybe the OP made that site and he's advertising it
Ok that makes sense, but what hash method would create the same hash for the frozen sets where the strings are the same but in different orders? Would any hashing method do this because they are in a frozen set? Also what is the fastest way to hash? I'm using str for the arrays obviously but is there a better way?
Im sorry, i'll not do again! Have a great day
0install is distributed right? Is it it language independent?
yes, the concept is to make desktop applications as fluid as web applications. 
Lots of free, high quality e-books exist. For example, Alex Martelli's (yes that Alex Martelli) *Python in a Nutshell* is currently free for beta testing on O'Reilly's site. You really do not have to buy anything to learn programming well these days. You might pick some things up slightly quicker if you do - but then, you may not.
&gt;I was discouraged by the internet to learn VBA so I've decided to go down the 'Python &amp; Excel' route. This is good advice. Before I learned python, I did my programming in VBA (I'm currently an accountant, so my world is excel). However, there isn't a lot of community support for VBA programmers out there. Nothing like this sub. Also Python is much more likely to land you a better job down the road, than VBA. The main advantage of VBA is that nothing extra to install, so you can share it no problem. openpyxl is a good package. I usually use this in conjunction with the shutil module, to copy an excel template, then populate it with data. I also like the xlrd package, really just for pulling excel data into python. xlwings is pretty nifty for create user-defined functions written in python, but actually calling these functions in excel. There are reliability issues with this package though that limits its full use. I wrote a pretty cool function to concatenate excel ranges (vs listing each cell as a separate argument). Pandas is very popular, but haven't used it myself. Any way, if you desire to become a true excel mage, then you need to learn python. You will mystify those around you.
"How to write Amazon Review Bots" is the one book that would want because of all the fake reviews. 
I am not denying that you can find a lot of good resources online, but there are just some niche subjects that are just easier to learn through books that might not be free online. 
I tried it out and unfortunately adding hash() around my frozenset doesn't speed up the code much at all. Edit: changing from str() to .tostring() helped a lot though! thanks!
I didn't say it would speed it up; I said it would free up a lot of memory. 
Thanks. It doesn't have dedicated servers so the players host their servers and other players connect there. I didn't bother developers with this but luckily I got a lot done reverse-engineering some source code. The communication protocol for this thing was made in hell.
How do you perform that check?
&gt; Like in the example you showed where the are five list elements and we try to start printing at index 10. Who would ever be trying to do something like that? It's such an obvious logic error that nobody would ever try to write something like that, and if they did by accident it would be an easy error to fix. Print first 10 things of some database or web list or etc. to display. This code works even if there aren't 10, you don't have to do any `if len(items) &lt; 10` or the like, you can just do basic slicing.
Numpy and Pandas work with Zappa! https://blog.zappa.io/posts/zappa-adds-support-for-manylinux-wheels I don't think anybody else can say that. API Gateway costs do add up. YMMV. I'd like to do a comparison with other frameworks in the future but don't have as much experience with them. Serverless.org Framework is mostly a JavaScript scene, I think most of the Python offerings are user-contributed (including some which just tear off little bits of Zappa.) Their whole design is much more module, ours is pretty much "throw everything behind a WSGI converter and make sure everything else Just Works." It's not a magic bullet, but I think Zappa should be a tool in your tool box.
And as if that weren't bad enough, there is the ubiquity of reviews by people who received the product as a gift for their supposedly unbiased review. It should surprise no one that all of these paid reviews are good.
reviewmeta.com 
Do you find that this is a good solution for small projects?
That's pretty cool man! I'll have to check it out :) Thanks for the suggestion
Amazon.de has been deleting these.
If you are interested - working kivy GUI prototype: https://www.reddit.com/r/Python/comments/5g4n2a/linnetlim_a_netlimiter_by_tcp_port_written_in/
I don't know nothing. 
Also, the shitty typesetting for the title. No worthwhile publisher would publish such a shit cover.
You're doing god's work.
Well I am quite amazed as to how the author presented the information about this review. 
Security: hosting on Github would be a start, as at least you can get Github downloads over HTTPS. You should also ensure that it's actually checking the HTTPS certificates - PEP 476 made Python do this by default. Wherever you host it, you need to take great care that someone can't put a malicious version of the code in its place, because you're getting people to download and run it with no chance to check the code before it runs. And there's no sandbox to protect the user, unlike the Javascript in a web application. Distribution: There are versions of Python intended as a platform - python.org makes embeddable builds for Windows, and there are things like PyRun. But that doesn't solve the distribution problem! How do you get Python, your script, and the necessary metadata onto the user's computer so they can start your application from the dock/menu? I think there's room for better solutions to automatically updating desktop applications in Python, and it's an interesting thought experiment to consider downloading all the application code every time, but it's not something I see myself using in my applications.
Such a good read. Thanks for the really clear explanation &amp; code. Equally impressed by Singapore's open data portal. https://data.gov.sg/
Don't forget to report the reviews to amazon.
What happened to making it CLI first :/? pygame seems like a big dependency...
[it's really not](https://www.youtube.com/watch?v=vExjnn_3ep4)
I have [this one](https://www.amazon.ca/Raspberry-Pi-Projects-Andrew-Robinson/dp/1118555430) and it is actually great for beginners. Good for learning both Python and the GPIO hardware of the Pi.
I've fixed up the requirements, to specify a max version, rather than exact (and removed the pkg-res line) Though, even if it does install the requirements - it may not run on OSX, I'm not sure if it is similar to linux enough
Here is project I worked on using openpyxl. Not sure what you are doing but it saves me days of work. https://github.com/scott48074/restorative_justice_helper
Pycharm does that i believe
3.8 overall isn't too bad though, no? Maybe it's a legitimate book with a legitimate author who signed a deal with a shady publisher that makes deals with these reviewers.
That works at the end of the script, but I want to set a place in the middle. I guess I can put a sys.exit() where I want it to break
Yea I mean is he looking for a debugger? Spyder, PyCharm, etc, etc... Is he doing some of kind of numerical analysis and want's to see what's going on at various points? Maybe Jupyter Notebooks then.
Ah so that's nicely lightweight! I guess I can only really judge after seeing it :)
Or anything that would raise an error (as long as it's not a SyntaxError). At the simplest, just `raise`. 
David, is that you? Thanks for the heads up on the shitly automated Amazon reviews.
It works! Great job. The main problem is that I have too many ports active, so that they do not fit (they become too small to read).
Neat! I've been using either a parametrizer or doing `assertTrue(is_even(n), n)` to log the number.
Unfortunatley, my experience is limited to small projects only, so i can't compare. But i find it suitable to Python fast development nature. 
Giving away "Advanced Review Copies" is a long time practice. As is giving review copies away. Not all reviewers who received a work for free give glowing reviews.
http://imgur.com/a/vCnd8 Two extremely similar posts, seems unnatural to me :) Also, they're gaining upvotes at basically the same speed. Username is also suspicious. Edit: I'm a dork. It's the same book and he just cross-posted without tagging the cross-post. I thought he was trying to shut down an author or publisher or something. Pardon my tin foil hat, but this sort of thing looks like a semi-automated attempt to defame two books.
That's not true, it would not work, for example the word babágy means bean bed while babaagy means baby brains. They are not interchangeable, and sound very different. Besides, no Hungarian could read that, so it does not do the job. For í, ó and ú the doubling kind of works( but not really at least it's confusing, there are typically no doubled vowels, they are only encountered at the join of composite words) , but not for the others. Hungarian is a very phonetic language (i don't know the correct word for it) Every word is pronounced exactly as it's written, thus you can not replace a character with a combination of other characters.
/r/learnpython It would also help if you provided literally any explanation of what you mean by weaving rows. The input -&gt; *magic* -&gt; output example provided isn't going to get any attention at all.
I prefer [hypothesis.strategies.sampled_from](https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.sampled_from) This sounds a lot more complex, but you can use it with any of the other strategies to explore a larger state-space... and get correctly minimised failing examples.
Keep it together, Jon Snow
I'm learning js/ES6 now after a long time in Python, and I hate that you can call functions with any arguments you want and it's fine, and that objects will work just fine and return nothing if you misspell one of their keys.
At the same time, check out both Rust and Go.
noob here, what is the correct way to do it in python? I do name_function
But did you write a review/s?
Oh hey, forgot what I've liked. VB.NET; VS as a whole: IntelliSense. Microsoft have put a lot of effort into making the .NET core extremely explorable. Their docs aren't... Comfy, but sitting down to VS was always a pleasure. Python: Indentation is so much better than brackets. Indentation is there to let humans read the code, brackets are for the runtime. Programming languages are meant to serve humans, not machines, so why is there a crutch for them? Go: Holy shit it's fast, and it has an incredible (literally) list of superstars working on it. Either it's going to plod along and sit next to Rust on the "next C" pile, or it's going to absolutely fucking skyrocket. Given that Google's funding it, I'm leaning towards the latter.
If youre just using a mapping {Key: value} That's all you need. 
Good call - I have placed the port list in a scrollview: https://github.com/chozabu/LinNetLim/commit/51694584057b3db04b409dd2d373a2bab6c75bc8
You can use matplotlib to plot the path then simply use it to render as an SVG.
Thanks
This should help https://google.github.io/styleguide/pyguide.html
Thanks - Other than 1 line to start the watcher thread, all the code to interface with the watcher/limiter is this: #generate a list of ports with up/down limit and pass to the packet limiter def apply_limits(self, obj): indata = [] for r in self.main_list.children: if r.enable_limit.state == 'down': indata.append({ "port": int(r.port_label.text), "up_limit": int(r.up_limit.text), "down_limit": int(r.down_limit.text) }) packet_limiter.set_from_ports_list(indata) #read list of ports, with current speed, total and raw speed def update_cb(self, dt): for k in list(packet_watcher.portcounts.keys()): v = packet_watcher.portcounts[k] w = self.connected_widgets.get(k, None) if not w: w = PortInfo(port=k, item=v, height=100) self.connected_widgets[k] = w self.main_list.add_widget(w) w.update(v) self.main_list.children.sort(cmp_PI)
`unicode` in 2.x was renamed to `str` in 3.x, and made the default string type. There is no `unicode` type in 3.x. `'str'` without a prefix is a unicode string (with character semantics), not a byte string, as in 2.x. `u'str'` was originally removed but was added back in 3.3 for writing compatible code, but it's a no-op. If you want a byte string you write `b'str'`. It's a really complicated topic, and much more involved than what can be explained in a single comment. It would help if you asked more specific questions. 
...because the examples are written in 2.x?
The question is what amazon isn't doing this themselves? It can't be in their interest to have fake reviews on he site that make people lose trust.
The difference between them is what I'm after. I just can't grasp the change and like I said, they look **identical** to me
I mean why are you using python 2.7.2 as opposed to 2.7.12?
Babel (http://babel.pocoo.org/) is probably a decent choice. It is possible to run with Flask, so multi-threading shouldn't be an issue.
Oh no, I know that Py2 can handle Unicode. It just took a huge amount of effort for someone who had just started programming to learn how to leverage it properly. 
Also legal Python 2. You just sometimes end up with extra parentheses in the output because you accidentally made a tuple. (And sometimes, like in this case, you don't.)
We used SQLAlchemy for a huge bespoke project at work. We are liking it now, but SQLAlchemy is very powerful and also a complex beast to master compared to the Django ORM and where we went wrong is underestimating just how much of a learning curve SQLAlchemy has for writing some of the more complex report queries for example. It took the team quite some time to actually become proficient with SQLAlchemy, but we also learned a lot during the process and I do really appreciate SQLAlchemy. We did use Pyramid, not Flask, so we setup the SQLAlchemy connection ourselves rather than relying on something like Flask-SQLAlchemy but I don't think that matters much at all. For our rest API's where we did a lot of nested objects and we had to rely a lot on joinedload and subqueryload to reduce the amount of queries it generated, otherwise you can end up with thousands of queries if you don't watch out. Some cool things we found in SQAlchemy were hybrid properties, which can be included in your queries, very nice to work with once we got a hang of it.
Right, but the original was fine in 2. Only needs fixed if you're running 3. What am I doing? This is too much explanation for a joke.
unsubscribe
Learn
working on an infinite runner game for my final project of the semsester for CS 
Import bpython, and call it directly: import bpython bpython.embed(locals())
http://thepythonguru.com/the-python-guru-pdf-download/
Yeah, and tutorials on the web are mostly misleading
&gt; I'm mainly asking for feedback on my code Still goes in /r/learnpython
You are not doing god's work. But you are a conduit for god's work.
I generate the images by using three equations for the R, G, and B values. The last one is based on the (Collatz Sequence)[Chttps://en.wikipedia.org/wiki/Collatz_conjecture] for a number where x is the number tested and y is the number of iterations of the algorithm. So my code would be something like: def Collatz(Input,Depth): DepthCounter = 0 while DepthCounter&lt;Depth: if Input == 1: break if Input%2 == 0: Input = Input/2 else: Input=(3*Input)+1 DepthCounter+=1 return int(Input) def main() while y!=height for x in range (0,width) r = Collatz(x,y) g = Collatz(y,x) b = int((r+g)/2) image.putpixel((x,y),(r,g,b,255)) if x==width-1: x=0 y+=1 image.save(filename) Note that in my code x and y are the coordinates of the image as well as the inputs of the RGB values for my image. The above code should render [this](http://imgur.com/a/FW3BC) image. BTW for everyone who wants my full crappy code with a few more functions [here](http://textuploader.com/d58ag) it is. Edits: Formatting
That's dromedaryCase. CamelCase capitalizes the first letter.
There is an option virtualenv has ` --system-site-packages` that might add the python-wxgtk3.0 package location into the module search path. Try the import again in a virtualenv created with that.
That's StudlyCaps. camelCase has a hump.
&gt; it has current language documentation, interactive forums and tutorials.. Sometimes you need more than automated API output, getting your questions closed on Stack Overflow, and Elbonians publishing one-page tutorials filled with ads on Wordpress.
Think Python is what I used. It was made by a professor to teach his class. It's free too. http://greenteapress.com/wp/think-python-2e/
My code looks disgusting. Is there another way I can add it in and have it look better without typing it in myself? 
A couple thoughts: First, in the virualenv you probably want to run that `pip install` without `sudo`. Second, the `wxpython` package looks as if it builds from source, so you'll probably need some dev packages installed for it to work. This is hard to debug without your specific error info, but check the [requirements](https://github.com/wxWidgets/Phoenix/blob/master/README.rst#prerequisites). If you get all the appropriate dev libraries installed I think it will probably work.
[I know NOTHING!](https://www.youtube.com/watch?v=UmzsWxPLIOo)
Or that you are working too hard or that your test output is not clear. Testing dosent have to be a pain.
Yea I just figured out to add the extra brackets to keep that list in tact. Thanks!
Username checks out. Sounds like every java dev i know
Why would I buy any Python book when all the same info is on the interwebs for free.
SimulateMe! Sackmaster50
I use [fakespot.com](http://fakespot.com)
I used this. Renamed my python folder, installed this monster. It *is* a monster, considering the size. It was interesting. Contrary to the regular 32bit one, it ran faster by NOT setting the process affinity to a fixed cpu. Not sure that's because of intel, or because of 6rbit. I ran into issues with ctypes and direct memory access iirc (i installed on first day of availability, my memory is fuzzy already). There was no performance improvement noticable using a few numpy functions, no improvements for anything else and used up more ram. Of course, because 64bit. Now I'm not saying no one benefits from this, but considering the size of the installation, a few issues I had and increased RAM usage (i really rather run 32bit) ... I deleted it on the same day.
All I did was renaming my python directory and installing it. Then copied the site-packages into it. Worked without problems and no need for messing around with the environment.
Maybe. Imports are generally placed at the top to help document dependencies, but this is one of the times that may not be the most readable. However, if the import is an external dependency I would keep it to the top anyway. I don't like installing a library then discovering it has more dependencies I need to take care of once I start using it.
CamelCase has multiple humps; dromedaryCase has one (or at least fewer than CamelCase).
Pandas + sqlalchemy to generate a ton of HTML tables. Really enjoying iterating on things using notebooks. 
Within tje python community sphinx is the de facto standard for documentation. So that's probably the reason why there is less interest in asciidoc? It gains interest in other languages though, especially within the JVM ecosystem I heard a lot of it lately...
You could use an IDE that can run code blockwise (like Rodeo).
Apparently both are correct. I personally use the term to refer to the lower case variant. https://en.m.wikipedia.org/wiki/Camel_case
Well `/Lib/site-packages/pygame/examples/data` has default resources for the examples but.. the second article is demonstrating the loading of resources, most likely those resources are contained in the same directory as the script from the way they are being referenced. Pygame does not come bundled with default resources outside of the example data if that is what you are assuming.
Are you saying Python in a Nutshell is lightweight? Because it's a very well known _reference_ book.
Hungarian does not work that way, that's my point. It's a very literal language, not contextual. 
You mean snek case?
Don't you need boost::python to get C++ and python to play nicely? (Also: why not just use the built in re lib?)
Because of performance reasons, I'm releasing the GIL and I'm forced to use C code here.
Are you sure releasing the GIL just for regex matching is going to help? I can only really see it being useful when you have a LOT of data, and in that case you really want something like re2 or rure or anything that's DFA based and not backtracking. 
Let's take the example of a unicode snowman ☃. In utf-8 encoding that's 3 bytes: `0xE2 0x98 0x83`. If we have a unicode string `u'☃'` it's length is 1. If we go ahead and convert that to a byte string (using utf-8) `u''.encode('utf-8')` we get `b'\xe2\x98\x83'` which now has the length 3. This is just an example of what others here mean by character semantics vs byte semantics. Now in Python2 a string was a byte string by default and in several places implicit unicode conversions would take place using the system's default locale (like adding a str and a unicode together). This could cause subtle data corrupting bugs. Python3 has taken the stance that all conversions must be explicit, so now if you add byte-string to unicode you get an exception.
Actually this tells how *NOT* to write an amazon bot.
Fantastic. It seems really usable immediately. I tried to rate limit the download speed of 443, but it seemed to have no effect? E.g. rate limit it to 1kb/s and then load youtube.com shows simply still a high speed.
I've needed something like this for my music collection. Where is the documentation for labeling my mp3 files?
Five stars ***** !!
Hmm, I've had mixed results with downloads - sometimes it seems to work fine, but other times not - currently unsure why. Limiting upload seems totally reliable - will mull it over and look into it more
Almost. I have written [citeproc-py](https://github.com/brechtm/citeproc-py) for this purpose. I did have a working example based on a custom XML input file that used citeproc-py for (the [RFIC example](http://www.mos6581.org/introducing-rinohtype#example-documents-and-input-formats) - [source](https://github.com/brechtm/rinohtype/blob/v0.1.3/examples/rfic2009/rfic2009style.py)) citations. Since then, focus has shifted to using reStructuredText as an input format which currently doesn't yet support citations using citeproc-py. It should be fairly simple to get this working though. Patches welcome ;-)
PonyOrm looks good
I think if your goal is python on microcontrollers for IoT, then I would recommend https://micropython.org/ and the pyboard. https://micropython.org/static/home/img/pybv10b-pinout.jpg I have no idea what zerynth is, from the webpage it looks like it's trying to be everything. Online courses, hardware, cross-hardware cross-platform tools, software IDEs and other tools, libraries, VMs, cloud support... you can do anything at ~~zombocom~~ zerynth, apparently.
Sorry, you're right. I meant list[:10] ... just for clarity, I assume. 
Python cookbook is very helpful, but Fluent Python of course.
Really enjoy that show too! Last couple of episodes in season 2 have python in the name also ^^
Yes, feel free. My use case exactly. Glad somebody found it helpful.
Dexter Industries has a custom PCB that integrates the Lego EV3 Robot and Raspberry Pi. There is a whole Python Library dedicated to the project and it is a lot of fun to work with. 
Not when your active sub-base isn't that high usually
Never heard of it but I already love it!
Hey I'm also semi-newbie and I recently started with an irc bot, using sockets. I find it pretty hard to find good information, where did you get yours?
&gt; Python3 has taken the stance that all conversions must be explicit This is basically the thing most 2.x people have trouble with. Otherwise the interface of using `str` in 2.x and 3.x didn't change that much. Converting data sources stored in other codecs will be lead to the same hussle in 2.x and 3.x. But most of the data especially from web services are encoded in utf-8 nowadays, so it shouldn't create much problems. But of course there are still some stubborn developers and office suits that still use outdated or odd codecs. Something like `iso-8859-1` or `Windows-1252`...
I don't really understand how temporary variables work. I'll check it out, thank you.
You can use normal variables in class methods. Instead of def do_stuff(): self.some_thing = do_other_stuff() self.some_thing_contents_element_seven = self.some_thing["contents"][7] return self.some_thing_contents_element_seven You can just do def do_stuff(): some_thing = do_other_stuff() return some_thing["content"][7]
forget about PEP8 it is intellectual wanking. But, CamelCase sux (not a PEP8 point, my taste). Constructive : do the parseData (parse_data) in __init__ This «costly» operation should be done only once. Since you seems to be a fan of encapsulation it shoud be __data__ (private data). Me I would leave access to it publicly. Leaving your API key hardcoded? Hum.... Quite stupid. if you do Celsius, then also do Farenheit. I love introspection, I would flatten the dict of relevant data in a one level dict so that you can see the keys... and just make a function. OOP is the pedantism of the ignorant in programming. But it is my opinion. Final thoughts: much ado for nothing. EDIT / PS: FUCKING USE THE __doc__ to document your API, great coders do DOCUMENT their code. PPS : - How do you change the api_key (hint constructor)? - the else from the if __name__ == "__main__" means you print an error if used as a lib, gzz, then why make a fucking object if not for reuse? Be CONSISTENT between what you code and what you print. 
Ah good point. It really is ideal to know all the dependencies at the top. 
The title is wrong and misleading. This article does not describe any issues with floating point arithmetic and Python 3. This is simply how IEEE 754 floating point arithmetic works. This scheme for representing real numbers in a finite amount of memory makes certain tradeoffs that are surprising if you haven't studied it. It's good to raise awareness about how floating point math works but don't make it sound like it has anything to do with Python. 
Eh, the licensing future and going closed source leaves a lot to be desired.
There was a dragon-ball z based irc game. Basically a bot where you register your character. Enter the battle arena by asking the gm(bot) to give you voice; and then you can start to attack other voiced users. The bot keep state of each registered character like, health, level, strength etc. And look for attack or defend commands to change the state and give feedback to the channel. Was lots of fun!
They must be high. This existing in a **library** is preposterous. It being enabled by default is beyond any reasoning. Imagine if every library did that. Soon enough your application would phone 20 servers on startup.
I thought it was IPython at first, but it was actually Mathematica. Stephen Wolfram was a consultant on the movie. http://www.space.com/34783-stephen-wolfram-arrival-interview.html
Just a noob here, but I noticed that they removed raw_input.
Not bad for someone who just learnd OOP, One small thing about local variables, if you have something like var1 var2 var3, you might want to think of better names to describe them (or a good reason why you cant remove them) Any how you should think what the purpose of the class/code, if it's only for doing one api call, you might not need a class for it...
Every single "improve performance" option I have seen is 
Pyrex is now cython And the author doesn't mention cffi, which is fast, easy, and scales to large wrappers quite well.
It's not actually counterintuitive. Consider a = [] b = [a] * 3 Are you expecting `b` to 3 deep copies of `a`?
http://pasted.co/638a0983
That's my code. 
No, we're only allowed to use what we have learned in class and we never went over anything outside of Vpython. 
Mathematica was a definitely an inspiration for IPython. Especially the notebook mode. 
rip no delivery
Question, wont that only check for the first word being capitalized? Example, if the input is new york yankees, its only checking that first N... so New york yankees would pass through, no?
They are not adding it to the *library*, they are adding it to *the tools developers use*. Quoting from the article (emphasis mine): &gt;The pieces of information reported are specifically designed to run **only in a developer's environment** and not in production. The metrics identified are, at the time of writing: &gt; &gt; * an event category (the developer commands: startproject, startapp, runserver) &gt; * the HTTP User-Agent string identifying the Django, Python, and OS versions &gt; * a user-specific unique identifier (a UUID generated on first run)
Another way to think about it x = [[]] * n Is equivalent to x = [] y = [] for _ in range(n): x.append(y) Hopefully this makes it more clear that it's the same reference being replicated in the list.
IMHO it does not make it any less bad, but good to know. I really just skimmed the article and discussion on github.
I can't tell if they're trying to pull off something sneaky or if they really are that stupid. This entire thing is fucking _lunacy_. This stands out in the pull request (https://github.com/django/deps/pull/31#issuecomment-264627961): &gt; We want to raise significant donations from corporate users who get a lot of value from a free, high-quality web framework. We don't want to rely only on donations from volunteers who may already be giving away their free time to contribute to the ecosystem outside of their job, for the profit of their employer. Usage metrics on the developer tools are _worthless_ for achieving that goal. That sponsorship pitch should start and end with "we are aware that you, ACME Corp, derive a lot of value from Django." The number of times developers fired up the development server in a day isn't even remotely relevant to determining Django's worth as a function of the value metrics a potential sponsor could contrive. Some gems from the proposal itself: &gt; In the last few years, we've started taking steps to fund important work. The Django Software Foundation now employs an engineer to shepherd Django's development, and this has been wildly successful in improving Django's velocity, reducing bugs, and shipping releases on-time. Additionally, several major new features in Django were funded through some mix of corporate sponsorship, grants, or crowdfunding. Again, what does this have to do with usage metrics? "The amount of effort required to maintain Django demands that we have one person employed full-time to work on it. Please chip in to our $200k budget to keep that guy alive." &gt; A major reason that fundraising remains difficult is our inability to measure the size of the Django community. The only information we have about the use of Django is anecdotal (e.g. "Instagram uses Django") or is measuring information without much value (e.g. number of times Django's been installed, which is essentially a vanity metric inflated by virtual environments, CI servers, and the like). If we had clear data on the extent of Django's usage, it would be much easier to approach organizations for funding. This rationale contradicts itself. Any metrics they would contrive for usage would suffer the same problems they've described right here. I work with six other developers on a distributed team. Is our company one user or six? How would they know the difference? Is the dev team at Instagram one user or one hundred? For that matter (I keep coming back to this), how is it relevant? Effort required to maintain Django is a function of contributions, not "usage", whatever they think that happens to be. You know who has the metrics they need? Github does. Open/accepted/rejected pull requests, total contributors, reviewers per contribution, etc. Estimate level of effort to maintain. Estimate number of full-time people required to provide required effort. Propose budget. Django isn't a startup. It's not like growing a social network where eyeballs matters above all else. It's a ubiquitous tool for making web applications, used by tens of thousands of developers in thousands of companies large and small. The exact counts don't matter. They need a director with experience in securing sponsorships for open-source projects, not usage metrics.
So i had this idea i was gonna try in C but i'm sure it would work with python. A dungeons and Dragons text-based game. I'm waiting until between semesters to start it but it will require a ton of work if you do want to do it.
Doesn't really help that it's a dead link...
Gave it another try as I noticed the apply button. I guess it does not make a difference. Note that you should catch the empty value (if someone sets only down or only up): `ValueError: invalid literal for int() with base 10: ''`. That way you will allow setting only 1. It has potential, I hope it'll work. Also, is there a way for you to pull info about the processes connected to the ports? It would be awesome to have a process name shown. 
Hey, its you b'day! What a wonderful day to do the switch!
If this gets accepted, I would have to walk. I'm utterly disgusted this is even proposed
&gt; consequence of list being mutable Not strictly true. Attributing this to mutability will only lead to further confusion for you down the line &gt;&gt;&gt; a = [ [] [] [] ] Also contains three "mutable" objects, but this time &gt;&gt;&gt; a[0].append(10) [[10], [], []] The more important thing to consider is whether those three objects point to the same underlying memory (i.e. did you just make a list of three of the exact same thing). For instance &gt;&gt;&gt; a = [[],]*3 &gt;&gt;&gt; id(a[0]) == id(a[1]) == id(a[2]) True (i.e. your outer list contains three of the exact same list object) &gt;&gt;&gt; a = [ [] [] [] ] &gt;&gt;&gt; id(a[0]) == id(a[1]) == id(a[2]) False (i.e. your outer list contains three separate, completely independent lists) Consider this :: &gt;&gt;&gt; n = list() &gt;&gt;&gt; a = [n,n,n] Is the behavior of a surprising or counter-intuitive to you? Ok, now why should this be different from the last line? &gt;&gt;&gt; a = [n,]*3 Still following along? What's the difference between the last line and this one? Think about the order in which this line will be executed. &gt;&gt;&gt; a = [list(), ]*3 None of this is counter-intuitive. It's just how computers work. IMHO, Every single programmer (regardless of language) should understand the concept of [pointers](https://en.wikipedia.org/wiki/Pointer_\(computer_programming\)) solid along with how your particular language abstracts them away! Some higher-level languages (e.g. Matlab) deal with this via an automatic copy-on-write mechanism (it sounds like you would consider Matlab's behavior to be more "intuitive"). Other languages (e.g. python) avoid non-explicit memory copies by convention (i.e. you either have to instantiate three lists by hand, or manually invoke a copy). Regardless, ANY language lacking an explicit pointer syntax is still just abstracting that underlying behavior away from you one way or another. Sure you can come up with a bunch of heuristic rules at this higher level of abstraction, but it will ALWAYS remain mysterious, arbitrary, and possibly counter-intuitive if you don't understand the deeper underlying concept of pointers.
No they didn't, they removed `input` and renamed `raw_input` to `input`. Using the Python 2 `input` function is nearly always a mistake, because it unconditionally evaluates the text you enter as a Python expression, which is dangerous in the hands of a newbie and encourages a cavalier approach to security vulnerabilities. And it frequently trips up beginners. In Python 3, if you want the old `input` behaviour, you simply call `eval()` on the string you get from `input`.
Take a look at this paper wrt IEEE 754 math https://ece.uwaterloo.ca/~dwharder/NumericalAnalysis/02Numerics/Double/paper.pdf
So Django will collect data from my local computer and send it to some server on the internet? Yeah, people love it when Win10 is doing that.
Hi Corm, thanks for your support. "mostly open, always free to non business" is exactly what we do. A lot of good questions here :) I'll try to answer linking to the pages of the doc where these topics are explained in details. Regarding the possibility of **using C alongside Python**, you can read detailed info (with examples too) [here](http://doc.zerynth.com/core.zerynth.stdlib/r1.0.8/clang.html) [Note that "Viper" is the old name of Zerynth. I'm pretty sure you prefer this one :) ] Regarding the **library support**, first I need to show you the **ZERYNTH Package Manager (ZPM)**. The ZPM is the engine that turns the ZERYNTH into a modular and granular development environment. The ZPM allows users to customize the setup of ZERYNTH by installing and organizing just the necessary modules and packages. How? You can search and install all the needed libraries (packages) directly from the Zerynth Studio! More info [here](http://doc.zerynth.com/core.zerynth.vpm/r1.0.0/). There are already a lot of libraries, organized into 3 categories: * **Zerynth Standard Library**. The Zerynth standard library is composed of many modules ranging from hardware interfaces to high-level functionalities. You don't need to install any packages, just import the modules in your script and you're done. * **Official Libraries**. Libraries published by the zerynth team. You need to install the related packages through the Zerynth Package Manger and import the modules in your script. * **Community Libraries**. Libraries published by community users and **approved by the Zerynth team**. You need to install the related packages through the Zerynth Package Manger and import the modules in your script. A lot of community libraries are built just porting the code from raspberry pi libraries with small effort. Of course, you can create your own libraries and publish them to the ZERYNTH Package Manager database. To publish a library you have to be associated to a **namespace**. A namespace is a unique name identifying a particular developer (or group of developers). The namespace is used by the ZERYNTH Package Manager to correctly assign a library to its owner. A special namespace “local” is used for libraries that are not going to be published online and will live only in the current instance of ZERYNTH. More info [here](http://doc.zerynth.com/core.zerynth.ide/r1.0.7/#creating-and-publishing-libraries) I hope this will help
Even if your comment made any sense: it's not possible to do both? Only people which have absolutely nothing to do read and post here?
It's more that this is actually a really hard problem. And the DSF has done several of the things suggested, like hiring people to help with fundraising. That had an impact, but is still a ways off from being sustainable funding at a level that will help the project grow and thrive. But this whole "it's easy, just do X" is being used to put down the people who actually are out there trying to do things and come up with ideas and debate them and figure out what might work, because on the internet it's very easy to make dismissive authoritative-sounding comments about things you have no personal stake in. So: if the parent poster does have a truly simple "just do this" solution that will work, well, there's a big market out there to take that solution to which pays out in a currency more valuable than reddit karma points.
This looks interesting and related to my line of work (network engineer doing programming/automation). I'll take a look at the code.
More that it was *proposed* as a *possibility* to add something which would, the first time you run `manage.py`, do (thing) to try to get a count of the number of people who use Django. So far nobody's been able to agree even on what (thing) would be, how opt-in/opt-out would work, what service it would ping, exactly what it would say when it pings, etc. And... well, that's kind of it. There's just a proposal that people are arguing about. You can read it if you want, and read the discussion and read what various people's positions are.
Edit: if you haven't already read [Joel Spolsky's Unicode essay](http://www.joelonsoftware.com/articles/Unicode.html), you should. The Python 3 `str` type is the same as the Python 2 `unicode` type, renamed, which means it understands the full Unicode character set of 1114112 distinct "characters" (actually code points, but the difference isn't important). Python 2 `str` type understands exactly 256 different "characters", and assumes that they are a dumb 8-bit version of ASCII. In other words, its really a byte-string rather than a text-string. But you might not notice, because if you put a Unicode character into a regular string in Python 2, you'll get a platform-dependent result which depends on your operating system and the terminal you are running in: py&gt; 'a' + 'é' # Python 2 'a\xc3\xa9' So it *appears* to work if you don't look too closely. However, I get a `str` with three bytes, but somebody else might get two bytes, or five, or an exception. Worse, on *my* machine I think I'm dealing with an e with an acute accent é but on somebody else's machine, the exact same piece of code may give them [a Greek iota or a Russian schcha](https://en.wikipedia.org/wiki/Mojibake). So the Python 2 `str` type is fundamentally broken when it comes to dealing with non-ASCII text strings. Hence the introduction of Unicode in Python 2.x, and the renaming of `str` to `bytes` and `unicode` to `str` in Python 3. In Python 3, `str` does the right thing whether you are English or Russian or Chinese. Python 2 strings try to guess what you want and Do What I Mean, which is great when it works, but often introduces subtle bugs that are not noticed during testing if your tests use nothing but ASCII values (as English-speaking coders tend to do). It leads to [weird bugs with cryptic error messages](http://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20) that are hard to reproduce or diagnose if you aren't an expert. Python 3 forces you to be explicit when combining bytes and (unicode) characters, rather than trying to guess what you want.
It is counter-intuitive since you're expecting that list replication involves making new instances. After all, that's how it works in the real world! If I photocopy a piece of paper, and scribble over the original, the copies don't miraculously have scribbles appear on them too. But if you think about replication as being creating new "names" for things, new *references*, rather than copying, then it becomes easier to grasp. If you imagine Donald Trump walking up to the President of the United States and punching him in the face, you won't be surprised to discover that all of the POTUS, Barack Obama, and Dad (to his kids) all complain of the same sore nose even though only one punch was thrown. So what counts as intuitive or not depends on what your assumptions are. But I agree, its hard to get past the idea that new references are copies: a = [] b = a b.append(1) assert a == [] # fails List replication `*` is just a variant of this. Edit: /s/duplication/replication/
&gt; None of this is counter-intuitive. It's just how computers work. Which is completely different from nearly everything we observe in the real-world. Hence, counter-intuitive :-P
Thanks for that, I need something simple like that for the app I'm working on.
Good stuff, thanks. Shame I'm forced to stick with Python 2 at work (small embedded systems we haven't updated to 3). Coroutines would be perfect for what we're doing.
And most companies with a worthwhile IT will have this stopped at the firewall.
Python, like Matlab, is a great language for new users because it doesn't enforce all of this. It's a quick prototyping "Can I knock this out fast". If you want all of those features use something else, IMHO. Oddly enough one of the links he has covers most of this: http://www.paulgraham.com/avg.html
2 ways to install it: * (easy route): install it via pip. Pip is a command line utility to install packages from pypi. If it's on your path just run `pip install opensimplex` from a terminal. If it isn't the executable is in `pythoninstalldir\Scripts` on Windows. If you're not on Windows and your terminal can't find it you probably don't have pip installed and you'll have to pull out the Google. * Download the package manually, then run the `setup.py` file inside it with the command line argument "install". 
This is an amazing demo of the `pytest` features. Thank you.
urwid
It's determined by the sorting algorithm. Different algorithms will call cmp in different orders, not necessarily even the same number of times. I suggest reading up on https://en.m.wikipedia.org/wiki/Sorting_algorithm Suffice to say you should not depend on the cmp function being called in a certain order, because it's always subject to change (and may not even he deterministic).
Thank you; so the order is based on Timsort then? That was my guess but didn't see it explicit stated in the documentation. I know it's building some sort of data structure based on -1, 0, 1 but wasn't sure exactly how internally Python does it.
&gt; --system-site-packages option flag *works*. But what are the downsides, if any, for using this flag? Since this will make all the rest of the modules available to virtualenv too. Thank you. 
I wrote [cursed](https://pypi.python.org/pypi/cursed) which wraps curses. [Docs here](http://pythonhosted.org/cursed/) [Example projects here](https://bitbucket.org/johannestaas/cursed/src/133d05cb6b393dbae954a643201be3d5a9906770/examples/?at=master) I made it to abstract out having multiple panes running concurrently in a screen. 
I did try with and without sudo. Both failed. A lot of people suggest we shouldn't use sudo for pip. But I tried anyway because that's what's the wiki says.
This could be the way with Linux too. Any one knows which files I should copy from where to where in Linux? I think I prefer this method.
Maybe try volunteering to do some work for a charity? They may have someone else they already use that you can peer with.
Both? It's honestly enough work that if another solution was viable I would've insisted on it. The use case was to provide RIDE, which requires wxpython. If you're doing this for continuous integration setups, I'd probably just recommend testing in docker. 
It's not really building anything; it's sorting the existing list by swapping pairs of elements until they are in ascending order.
https://github.com/peterbrittain/asciimatics
Do you mean turning them into keys? I have a hard time imagining where that would be considered good practice, do you have an example? If you mean serializing, numpy has its own binary file format .npy if I recall correctly, and alternatively hdf5 is quite fast for read.
Ahh you mean it will read the ID3 of the mp3 to get the labeling information, I see. That seems reasonable. I assumed you had to annotate the labels in a separate file.
Here is a video example of what you can do with Rhymebase: https://www.youtube.com/watch?v=py_DStBkJko If you like Rhymebase please like the page on Facebook: https://facebook.com/rhymebase
Yes - until that change is made, you can set the one you don't want to limit to a high number, like 10000 to get processes using a port, yes - lsof and other tools should be able to do this, just a matter of getting round to testing it out and implementing I'd also like to have app icons, kdes task manager does this As a side note - starting to suspect the only downlimiting I was was as a side effect of up limiting - chocking the tcp ack messages?
Thanks tom
Reddit was originally written in LISP????
Prompt Toolkit, which is also used by IPython: https://github.com/jonathanslenders/python-prompt-toolkit
It was rather full of drama: https://web.archive.org/web/20060206133929/http://reddit.com/blog/2005/12/night-of-living-python.html https://redditblog.com/2005/12/05/on-lisp/ http://www.aaronsw.com/weblog/rewritingreddit And then a week later, the first reddit comment ever was made: https://www.reddit.com/r/reddit.com/comments/17913/reddit_now_supports_comments/c51/
It's really hard to say without knowing more about the number and types of requests that Reddit receives and what type of database they're using (maybe this information is available, but I did not see it when skimming the link you posted). That being said, I would imagine that Reddit's main priorities would be concurrency first, given the massive number of simultaneous connections, followed by speed. As such, they would probably take into account benchmarks like those found [here](http://klen.github.io/py-frameworks-bench/) and [here](http://nichol.as/benchmark-of-python-web-servers). If they were being really thorough, they would probably want to run some benchmarks themselves. Based on the benchmarks I linked, they would probably *not* use Django, maybe instead opting for uwsgi, aiohttp, or falcon. Of course, with proper load balancing, you can always throw more servers at the problem, so it's also possible that they would go for easiest to write, which is very subjective and could wind up anywhere. 
&gt; May want to check the date on that Aaron Schwartz quote. Thanks, I corrected it. But it would certainly be more interesting if you gave more basis for why Django might be a good a good choice for Reddit.
It's a very interesting historical discussion.
Good work man! Just curious... why do you need to commit every day?
Have you read the actual post? /u/TomBombadildozer is addressing the usage metrics not achieving the stated goal. Nowhere does he say "just do this, it's easy to make money". In fact, his only advice in what Django "needs" to do is to "get a director with experience securing sponsorships for open-source projects". I have to agree. Usage metrics will not help any more than pypi download counts will, even if they are more "exact". And they would certainly not help more than github stats will.
Maybe as a test. Create a thing.py in your system python which just is print("it works"). Then try to create thing.pth in your virtual env that points to it. See if you can import that
Fuck. I just remembered about Aaron Schwartz. =(
That is not obligation. But, To me, I think "Daily commit" means "I'm developing and coding something everyday without stopping. So, I can grow day by day"! So, I'm trying to make it to my habit and the bot i made is for it. :D It of course may seems like self-satifaction.
Because tech illiterate politicians will definitely make it better.
Pyramid sounds like what you're looking for. Give their introduction page a read.
Rails
Oh can I recommend you look at [bottle.py](https://github.com/bottlepy/bottle/blob/0.12.10/bottle.py) a Python Web framework, comparable to flask but just under 3,750 lines of code. You can find the [docs here](http://bottlepy.org/docs/0.12/).
Tornado is pretty nice. I used some of its libraries for a TCP server recently and development was really smooth. It also interoperates well with Pythons new async/await support. 
Can't you serve Django with uwsgi?
It's good to have daily progress, but be careful not to commit for the sake of committing. Once you start breaking things down into smaller "deliverables", and committing each complete deliverable, you may well find you commit more than once a day. git makes branching and committing for small features very easy. 
Some criticism, which is aimed at helping you get better feedback on your actual code, because people will have an easier time following and reviewing. -1. /r/learnpython 0. Use github (I know for a beginner it might feel intimidating, but the earlier you learn it, the better. And gists are pretty simple). 1. Don't document for the sake of documenting. A lot of the comments are too obvious, get rid of them. 2. Document where necessary, instead. Some functions don't have any explanations. Document properly (optional, but see pep257).
I use bottle, but I still quite haven't figured out the difference between the two.
The closest thing I can think of is PyQt. The source code for the UI is an XML file (`*.ui`) but it gets compiled to Python code (the result looks like early WinForms code)
It sounds like you know what you're talking about. Feel free to go into as much detail as you like - how would you build current reddit from scratch? What are the most important aspects for something this large? 
Don't bother learning too much about `cmp`, it was removed in Python 3.
Yeah, you're right. I meant procedurally generated. I read your code and you it seems you don't. Still very cool! 
I thought Bottle pre-dates Flask? And that Flask started as a joke, riffing off of Bottle's name?
This repo is giving me an access denied error...
Can I just say it probably wouldn't be written in Python. It would most likely be Node or some offshoot. 
If they were going for speed they'd write the back end in go
SMASH THE SYSTEM
Zetcode has good tutorials online
I'm guessing it wouldn't use a framework, or if it did then only very minimally. Unique scale problems like Reddit has often require custom solutions. That said, probably Pyramid since you can pick and choose which parts of it you want to use. Honestly though if you knew you had this sort of scale problem from the get go you'd probably want to take the time to write it in Go or Rust or somesuch.
Can't you make Flask thread safe with gevent? 
Yes that's true. Armin had some heavy debate with the author of bottle dealing with the fact, that he rewrote a wsgi layer for his light weight, single file and less than 1000 LoC long web framework called bottle. (Soon the 1000 LoC maximum had been given up) Armin suggested to use an established wsgi toolkit as base for a web framework, like his own called ``werkzeug``. If I have some time today and a computer up running I will try to search the initial discussion in the German python forum. Later on Armin developed an ugly micro Web framework as an April fool. There was a YouTube clip of that... and then he showed how he would build such a framework based upon Werkzeug. That was the birth of flask.
Something like Meteor.js (Node + MongoDB)?
I doubt they'd use Python, taking into account the performance problems it's giving them.
I can't comment on whether Flask would be a good choice for current Reddit, but Flask can be used for applications where scalability is necessary. For anyone interested: [Miguel Grinberg - Flask at Scale - PyCon 2016](https://youtu.be/tdIIJuPh3SI?t=1h2m28s)
Mostly speed and concurrency, I think. Go and Rust web frameworks tend to run faster in [benchmarks](https://www.techempower.com/benchmarks/) than Python ones. Python is a higher level language than Rust and Go. Note that the faster frameworks _tend_ to be in lower level languages. For example in Python you don't have to worry about allocating memory space for your variables, or cleaning up old variables. The trade off is that you miss out on some chances for optimising computations in Python, so it tends to be slower. Another aspect is that Rust and Go are compiled, while Python is interpreted. Compilers are generally pretty well optimised to analyse the structure of your program and make it run faster. Interpreted languages generally don't do this as well. Some other interpreters, like the Java Virtual Machine or the Microsoft .NET Runtime are reasonably fast. As for concurrency, I'm not so sure, but it seems like Rust and Go handle multi-threading better than Python does, whatever 'better' means in this context. 'Better' concurrency means that you should be able to process more requests in parallel.
The Twisted community has [mailing lists, a Stack Overflow tag, and several IRC channels](https://twistedmatrix.com/trac/wiki/TwistedCommunity). Have you tried asking at one of those? Note that [the name Axolotl has been deprecated](https://whispersystems.org/blog/signal-inside-and-out/), because people started using it for both the [Signal Protocol](https://whispersystems.org/docs/) and one of its components, the [Double Ratchet Algorithm](https://whispersystems.org/docs/specifications/doubleratchet/). I'm not entirely sure about [pyaxo](https://github.com/rxcomm/pyaxo), but based on its description, it looks like it's a Python implementation of the Double Ratchet Algorithm, not the full Signal Protocol. Edit: Added a link.
"Your style" gets you -5 votes. Think about it.
Came searching for this. aiohttp + uvloop would be my guess if I were doing this.
It would perhaps be written in Go, not Python.
I had a similar script to help me commit to daily commits. Worked out well and managed to get a GitHub streak of 250 days. The focus for me was to learn something new in Python that I wouldn't get from my day job Will be starting it up again soon. It's a great way to keep momentum going on personal projects
Have science illiterate politicians hurt the NSF? They sometimes cut funding based on ideology, but the OSS world is effectively already cut 100%.
I've been making a genetic algorithm for a long time, and I just decided to switch to Python from c++ after ~600 lines of code. It's been a year or two since I last touched Python, so I'm relearning everything from loops to classes. 
Depends on if you count opportunity cost. 
It's funny that you say Flask had too many globals when that's one of my biggest criticisms of Django - it's essentially one giant global. Flask has one global that you must deal with and it is thread safe. 
&gt; Thanks, I corrected it. No you didn't. Also, the quote itself is a little off.
&gt; that's one of my biggest criticisms of Django - it's essentially one giant global. Wait what?
But wouldn't Go be even more web scale and hip? I thought node.js was already deprecated technology in the world of web hipsters.
I like and use Tornado, but it is a specialized tool and if your use case doesn't fit with it, you are making your life much harder by not choosing something like Django. Testing Tornado is much harder than a traditional framework and your libraries have to be async ready. 
Those are settings you're importing. Nothing else. &gt;You can't have more than one django application in the same interpreter I don't know flask, but django is built from the outset to support and run many apps. It's whole design is the opposite of what you said. It would be pretty useless without this pluggable design. But maybe it depends what you mean by "application". 
What is your plan for work-life balance if you commit daily? Commiting daily without a break leads to burnout which drecreases productivity and enthusiasm. This is a nice article on this topic: http://erik.io/blog/2016/04/01/how-github-contribution-graph-is-harmful/
Having recently used Django, I gotta say I really like it. The Template-Model-View structure is very well linked and easy to grasp, at least for me that never messed with a web framework before. Oh, and the documentation. Overall, in my opinion, it's a very nice framework to work with. However, it appears to be kinda slow, per some comments of this thread. Speed indeed is the most important factor when it comes to Reddit being rewritten. Is there any way to make Django faster for those purposes? And hypothetically speaking, would it be viable if Reddit were to invest in Django's development with focus on speed? 
This isn't really a meaningful question as it stands, since comparing numpy arrays doesn't necessarily give you a bool, or even something that can be converted into one: &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; a = np.array((1, 2)) &gt;&gt;&gt; b = np.array((1, 3)) &gt;&gt;&gt; a == b array([ True, False], dtype=bool) &gt;&gt;&gt; bool(a == b) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all() Even for those that do, tostring doesn't necessarily give you a valid hash: &gt;&gt;&gt; a = np.array(1, dtype=float) &gt;&gt;&gt; b = np.array(1, dtype=int) &gt;&gt;&gt; a == b True &gt;&gt;&gt; a.tostring() == b.tostring() False I think it should even be straightforward to construct arbitrarily many arrays that all compare unequal but have the same result for tostring, which could be a security hole depending on what you want to use the hash for. `np.ndarray` is a very complex beast. If you want to come up with a sensible hash function, you're going to have to specify (a) how you are going to decide whether two arrays are equal, and (b) what subset of arrays are possible inputs. And if you're talking about actually implementing `__hash__` on a subclass of `ndarray`, then you're going to have to be very careful about mutating your arrays.
Was the original lisp code open source?
It's not the most important thing to me, but it's definitely symptomatic of the bad design issues in Django. 
Somehow the article cuts for me. You can read it still by using: Install: pip install requests_viewer Then in `python`: from requests_viewer import main main("https://www.oreilly.com/learning/20-python-libraries-you-arent-using-but-should") read about the module at https://github.com/kootenpv/requests_viewer
I've had good experience with [urwid](http://urwid.org/), which provides a widget set for TUIs.
Yeah, not going to argue with that. Django is always my first choice if it fits.
Yes, they are CPU bound: https://www.reddit.com/r/sysadmin/comments/57ien6/were_reddits_infraops_team_ask_us_anything/d8sj7pt/
Why no framework? Interoperability with wsgi is a bit of a pain, and then you need to deal with routing, sessions, cookies, etc on top of that. Why not use an out of the box solution for that aspect of the application? 
Exactly this. I'm reading through comments that suggest rust/go/node or something that handles async well but these all feel like buzzword answers. There are so many other places to have obvious, bigger gains in performance than which wsgi framework is being used. 
What about with PyPy or CPython ?
What does the Python microservice world look like right now? I think the architecture would be built mostly around that. Reddit is entirely about *messages*: page requests, votes, comments, new posts. If I were architecting it, I'd use a pub/sub model with a microservice approach. Reddit is worth paying the "distributed systems tax" on, in terms of scale. I don't know what's out there for Python in that space, but I'd hunt up one of those. That's if we were sticking with Python. For massively distributed problems, I'd be tempted to investigate going the Erlang/Elixir route.
The wiki suggested using `sudo` because it assumed you're installing the package globally. If you're installing to a virtualenv you shouldn't need to use sudo. And, yeah, I wouldn't expect that to fix the problem. The core issue is that the installer requires that the necessary libraries be accessible.
Honestly, for something as large scale as reddit, it would probably be written in something more performant like Go, elixir, or scala.
Wait, Reddit didn't originally have comments? Then what was the point? 0.o
...but as he says, they are CPU bound not because of Python, but because of unoptimised code.
&gt; But my point is that django.conf.settings is a global object of settings that you can't vary. Yes you can. Put stuff in your settings.py and it gets pulled in. But if you mean django.conf.settings.foo = 'bar' then you shouldn't. I'd use something else if I want to do that. Settings is just for things like keys, ids, config etc. Things that are known at the start of launch. It's possible to have django run an api and ui simultaneously. Just set up your urls accordingly.
Ha ha, yep it didn't. Also, the front page was originally the same for everyone, you couldn't customize your subreddits. I believe that there were no subreddits in the very beginning, but it's a bit fuzzy now. When comments were first added, you couldn't up/downvote them. Way back then, reddit was about 99% developers, sysadmins, etc. It was like Slashdot, but then it spread out to a more general audience. EDIT: for example, back then you could make a joke about regular expressions and everyone would get it. Imagine doing that in r/pics now. Not saying we nerds are better than everyone else but in the early days, reddit was for the nerds. :)
I made a similar suggestion but strictly for backend/microservice-y code. I also didn't recommend node because I hate Javascript. :) The web entrypoint for an app almost doesn't matter these days, in which case you should just use what you like and your team knows, or wants to learn. But these suggestions (mine included) are sort of avoiding the main question, I would say Flask for the framework as I'm more of micro-framework guy. I prefer the Flask and Sinatra approach over Django and Rails. Still the larger point is this: reddit is currently running code in several different languages (e.g. using tools written in Java) and coupled with reverse proxies, load balancers, whatever frontend javascript it's running, it could never be "Python everywhere" or even "mostly Python".
That would be my choice. But Java (or other JVM languages like Scala, Clojure, mabye Kotlin) or Rust would also work well (pros and cons for each of course). Elixir would be an interesting language to test out too. The web API could be Python, but everything else on the backend would be something else if I were doing it. EDIT: C# would work well but I generally avoid MS technologies as much as possible and I don't see C# really catching on elsewhere even though MS open sourced it not long ago. I would also NOT use C or C++ except maybe for very specific and small components.
\*sigh\*
I agree completely, with the caveat that a simple stack is a happy stack (e.g. don't use aiohttp because it's hot right, use it because it simplifies stuff). &gt; Still the larger point is this: reddit is currently running code in several different languages (e.g. using tools written in Java) and coupled with reverse proxies, load balancers, whatever frontend javascript it's running, it could never be "Python everywhere" or even "mostly Python". It really depends on how you want to define the reddit application. Are Cassandra, nginx, uwsgi and Postgres part of the reddit application or are these tools that the reddit application uses? I'd argue that these are just tools the app uses. I tend to skew towards Uncle Bob Martin's ideology on this. He says in one of his talks that (paraphrasing here) "Spring, Hibernate, etc is not an architecture or an application, they're tools. You wouldn't ask someone about the architecture of their house and expect them to respond with nails, wood, hammers." So stripping it down to just the code that makes reddit reddit, it probably is mostly Python (though, the content of the Pyramid portion scares me enough that I've never bothered to look at the JS frontend).
you just describe Go...
Just sharing a series of posts I wrote recently about how Python is used in the film industry. The post linked outlines the pipeline in general, and there are individual case study posts for films I've worked on. They're less technical and more of an overview but I thought it would be of interest nonetheless. 
It's not development that need to be fast but maintainability yes. With decades of dev in Python I find Go apps more easy to debug and maintain. And slowly my dev become faster also. For libraries i'm totally agree, it's why I mix the two langs, that's easy in web dev.
Ok this might sound a little odd especially since it sounds like you're just starting out....try learning another language first (Go is pretty close to Python and is easy to start with to compared to others. Might also try JavaScript or another scripting language like Ruby). The question you need to ask yourself is do you want to become a better problem solver or do you want to become better at using one language. Learning to use another language adds another tool to solve a problem with and it gives you a different way of approaching programming in general. Helping an open source project is great for the community. But it may not be the best thing for your own professional development starting out.
http://adventofcode.com/ is a good exercise. Try using different methodologies to solve each problem multiple times its nice to compare standard and functional approaches
Oh I was being facetious there. I would've said "5-100x faster" (which is more realistic) but since I didn't feel like citing anything I figured it best to just throw out a figure that was obviously exaggerated. Rust really *is* significantly faster than Python and on my Raspberry Pi model A+ I wouldn't be surprised in the slightest if my Rust code was *actually* 10,000x faster but only because the startup time is so long with DDR2 and cheap micro SD cards =)
While K900_ explained the what, the reason you should use temporary (a better term would be local) is this 1: If you don't need to access those variables after the function completes, there's no need to assign them outside of the function (that's wher self.some_var would "live") 2: dot lookups (self.some_var) are expensive. If you don't -need- to do it (see 1) then dont. Below is a handy trick to get around dot lookups (but is not applicable to this situation, just some free advice) def f(): c = module.some_func for x in range(0, 1000, 1): c() This has saved you 1000 dot lookups, since you bound module.some_func to c, which is a local variable to the function f(). When f() finishes, the variable c will be removed.
Aaron's comment seemed like a jab at Django, so I think they would use the most anti-django framework out there, Tornado. It's one of the more performant frameworks available and has decent library support for things like REST API, Jinja for templates and if you use SQLAlchemy you've got an ORM. TLDR; Tornado
There's plenty of reasons you'd want two separate applications to act a seamless whole, the two most convincing I've seen are: 1. Separate UI and API portions. Assuming you don't go full javascript/SPA on the UI, there are good arguments to both sides. 2. Multi-tenancy. Develop a shared core for each tenant and then expose a tailored application for each. Even if it's as simple as whitelabeling templates, exposing a separate application and template directory for each greatly simplifies this. Of course, there are also other approaches to these problems as well, and Flask's multi-application approach isn't the end all be all solution. But it's a very nice tool to have when you need it.
Still fantastic, i love it! 
Care to explain why this is such a bad thing to someone who is not as familiar with web framework? 
&gt; https://www.reddit.com/r/sysadmin/comments/57ien6/were_reddits_infraops_team_ask_us_anything/d8sj7pt/ The details in that link sounds real close to my paragraph.
I feel like it should be more widely known that you can pipe all your python code through Cython to get C code that works on most versions of python, at which point you can incrementally concert your code base. Unfortunately this has to be done with your dependencies too.
Read the Rust book: http://rust-lang.github.io/book/ It's not very long (compared to various systems programming "Bibles") and it is easy to follow along. Just make sure you have rustup installed on your machine since it makes using *nightly* builds super easy. Nightly builds ensure that everything works with 3rd party crates and whatnot. They are surprisingly stable too. I've never encountered an issue. I think the nightlies are so stable because of the how the language was engineered and the excellent automated testing employed by Mozilla.
How long have you been coding with python?
Thanks! Glad it read well :) 
Trying to bring worst practices home on how to quantify progress is probably a very bad idea. I would consider applying the skills they attempted (and generally failed) to teach us in high school and college: make a timeline for your project, commit to it, re-calibrate it as necessary.
It's the same reason it's bad in every other type of application. Imagine you're building a desktop app, but the framework you're using for that only allows to spawn a single window. Any other window you'd need to spawn would have to be a separate process, even if conceptually all the windows make up a whole. With that said, I will caveat it with running multiple WSGI applications inside one process is not the common case. In fact, I'd imagine it's something of an outlier -- though it's one that affects me because I deal with multi-tenancy. The way we deal with multitenancy is we bootstrap a tenant object at request time that holds all the services that tenant has access to as well as their special rules. This is really gross for many reasons, and it's probably not the best way to do it even in Django (but it's what we have at work). Instead, what would be very nice to do is to be able to bootstrap the tenant object once at application start and dispatch based on who the user belongs to. Using something like the [subdomain dispatcher from the Flask documentation](http://flask.pocoo.org/docs/0.11/patterns/appdispatch/#dispatch-by-subdomain), this is completely doable by using a tenant aware application factory, even something janky like this: import os def create_tenant_path(tenant, *postfix): return os.path.join(SOME_BASE_PATH, tenant, *postfix) def get_config_name(tenant): # blow up because we didn't set the config, alternatively decide what a safe default is return os.environ['{}_WEB_CONFIG'.format(tenant)] def create_tenant_application(tenant): app = Flask( tenant, static_folder=create_tenant_path(tenant, 'static'), template_folder=create_tenant_path(tenant, 'templates'), instance_path=create_tenant_path(tenant, 'instance'), instance_relative_config=True ) app.config.from_object('{}.config.{}'.format(tenant, get_config_name(tenant))) # do stuff to register a bunch of routes and extensions here return app And then most of the bootstrapping looks like this: from application.wsgi import SubdomainDispatcher from application.bootstrap import create_tenant_application application = SubdomainDispatcher('acme.localhost', create_tenant_application) Django doesn't allow this sort of dispatching, so you need to poorly imitate it using their middleware setup (which is a separate beast than actual WSGI middleware).
What about [Tornado Web](http://www.tornadoweb.org/en/stable/)? I haven't used it to scale but it's based on events (kqueue/epoll) like golang and other high performance systems. 
Tuple with the first elements being (ndims, dim1, dim2, ... should be faster than tostring. Or wrapper object implementing `__hash__` as md5/sha1 and `__eq__` the obvious way.
Now you have two problems.
Multi-tenancy is built into Django via the sites module, so you can pretty easily whitelabel an app and serve a different look from the same core application. In terms of separating UI and API, you can do this with gunicorn. There may be a need for a custom management command to load different settings for the API and UI (namely the urls), but it's doable. I'm not saying Django is the be-all-end-all framework and I use both Django and Flask depending on the use case, but what you proposed is definitely doable within Django. References: https://docs.djangoproject.com/en/1.10/ref/contrib/sites/ https://github.com/benoitc/gunicorn/blob/master/examples/multiapp.py
Why ? We should live by and for the social pressure? This code is OOP by social pressure, do just a function that makes a call with an API key as an argument and deliver a flat dict with key =&gt; (value, unit) and it takes far less lines to write. Social pressure results in nothing good except for making masses dumbers. (J Goebbels in his blog about sociopsychology (1870))
You can also use supervisor to do this.
Microsoft announced XP would die in 2 years, then killed it. PSF keep changing the date and let's be honest, I don't think anyone really believes them anymore. Plus quite a few outfits have their own interpreter teams who would be able to do maintenance on 2.x since they're already working on various projects related to interpreter performance. For example Dropbox have their own Python JIT.
The closest is probably using [QML](http://doc.qt.io/qt-5/qmlapplications.html) with PyQT. https://www.boxcontrol.net/beginners-pyqt5-and-qml-integration-tutorial.html
I think you missed the parent post saying that already
You should check, but I think that anything pip-installed in the virtualenv will continue to override anything installed using apt-get so you can manage the upgrade process without any surprises.
Thank you for the amazing, clear and thorough answer. I understand it now
And postgres.
Integration with a forms library and a db is a common feature of rapid application development environments. I would never consider a web UI for anything, but a TUI is fine for many apps. I still read my email in mutt. As to web frameworks, the ones I know seem to work like that. I've never coded in one.
Mirror: http://webcache.googleusercontent.com/search?q=cache:QEt3EVSuYnYJ:dgovil.com/blog/2016/11/30/python-for-feature-film/+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us
Should be back up now. Reddit hugged my RAM to death. Set up a cacher and upgraded my VPS for the time being Mirror: http://webcache.googleusercontent.com/search?q=cache:QEt3EVSuYnYJ:dgovil.com/blog/2016/11/30/python-for-feature-film/+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us I was totally not expecting that much traffic on the site...my bad. I will fix that immediately.
Thanks for the breakdown man, Rust actually sounds really interesting, I'll add it to my list of things to check out
I wrote a python script to parse Oracle Hyperion Financial Reporting logs and dump to CSV. I did this to get usage information to track who is using their Essbase/Planning licenses. https://gist.github.com/paulehr/26959375e0a5d6edb998f2f25130a6bd
Should be back up now. Reddit hugged my RAM to death. Set up a cacher and upgraded my VPS for the time being
People who come to threads like this every time a new 2.* version is released, apparently...
Exactly, you build it simple and optimize or substitute critical components as you need.
we also use tornado
That's very nice to hear! I'm just trying to learn. Hope to be decent and manage to make simple programs. Just started two weeks ago!
The stacktrace says the bug occurs in caesartranslate, which you didn't provide, but if caesartranslate is library code that you can assume is correct then you need to ensure that you're passing in the right data, try printing mKey, fileName, content, myMode before you call caesartranslate. Once you do that, you'll probably find that you're only calling caesartranslate once with bad data, but if you want to run this over multiple files, you'll need to call it multiple times. Then you'll want to see how you're using your loop. for root, dirs, files in os.walk('/Ransom'): for file in files: if file.endswith((".txt")): fileName = os.path.join(file) print ('Found: ' +os.path.join(file)) Hint: you're just overwriting fileName every time with a different filename, not actually doing encryption for each file.
&gt; __data__ This is actually creating your own dunder, which you should never ever do. Private name mangling, which I agree with doesn't need to be here, looks like __var I think Raymond Hettinger has some phrase he says to the tune of 'Python is a language for and by consenting adults'. The meaning is don't make things private if they don't need to be. 
The formatting hasn't come out well but I'm pretty sure it's right as I get no indentation errors.
you may want ipython: pip install ipython it has completion like in the shell and many more.
Python already has a haskell-like version ! https://pyos.github.io/dg/ its great
I would say that it is _much_ better to use QML. It is easier to write by hand, and looks much nicer. With the new themes and widgets in Qt 5.7, it is also pretty good looking.
I haven't been able to find an easy way to install PyQt5 though. The cheeseshop only has bindings for Python 3.5 (and I need Python 3.4 because 3.5 doesn't work on Windows XP. Yes, I said Windows XP. I know.), and the usual help (Gohlke - the fact that I can type his name without looking it up says a lot) only has PyQt4. Anyway, PyQt4 has a GUI designer, so you don't even need to mess with the XML.
Celery is such a great piece of software, I get an erection every time I think about it.
This works by hooking `glob.glob` into the readline rlcompleter: https://gist.github.com/iamatypeofwalrus/5637895
Python runs from the top to the bottom. You are calling episodeone before you define the method. Try moving def episodeone: print... above def quit. On mobile hence poor formatting.
Are there any tools in your arsenal, that you could recommend to a finance guy, who wants to make 3D plots that one could move around using an oculus rift? I've been exploring the ecosystem, but it's just so massive. To be clear, I'm not looking to render a 2D image that looks 3D, I'm looking to create a "scene" of data that one could move around. 
Are you _really_ that afraid of python2 users that you decided to use a throwaway for this comment?
Thank you! What does Tornado WSGI code look like? What are the decorators? Is there a medium-complexity example you go to when introducing Flask programmers to it?
There's actually a (latency) performance _increase_ from the monolithic approach, because each Lambda VM needs to be cached individually. (Although with Zappa it'd automatically set a keep-warm for all of the functions.) From a scalability perspective, it's the same, as AWS handles everything. The only limits are the ones on your AWS account, and it's trivial to get those raised. Billing is the same as well. From a complexity perspective, it's a win, because there's only one project to manage, rather than lots of little ones. Does that make sense?
+1 on this, the docs are really good.
&gt;It doesn't repeat mistakes with threadlocals that flask or pylons did in past. Could you explain more about it?
I've been moving all of my websites over to Python3. You'd be surprised how many times I run into a problem because one or more libraries I'd been using is still Python 2.7 only.
Per-memory is definitely a valid concern, but since it's on a per-execution basis I've never seen it be an issue.
I think they were referring to their own formatting (not yours). They are correct though. You cannot call EpisodeOne before it has been defined. Move the `def EpisodeOne()...` above your `ans = True...` stuff and it should work.
I seem to remember that you also didn't have to log in to upvote. 
I suggest doing something like: import visual as vz or something. Then `sphere` becomes `vs.sphere`. It is the way most people use other Python modules. It makes your code must more robust. What if you create another module that has a `sphere` object? This way, you know the namespace and scope^1 of your objects. This is one of the things that makes Matlab such a poor programing language where everything is always defined. ^1: I may be using these terms incorrectly from a purely technical point of view
RedHat is one of reasons we are in this shit. RHEL 6 has Python 2.6 which was discontinued in 2013. RHEL 7 went with Python 2.7 even though Python 2.x was already in maintenance mode at that time and maintenance will stop before RHEL 7's EOL. PSF should have stopped supporting 2.x in 2015 as they initially stated. If RedHat still wanted to include 2.7 in RHEL 7, they should do their own maintenance releases. They do have money to support it.
(I guess you are using Windows) download it, fire up you console and type "python {path}\yacejixpupo.py". Replace {path} with your actual path. Next time ask [here](https://www.reddit.com/r/learnpython/), please.
From my experience the python 2.7 only libraries are no longer maintained, so it's probably a good idea to move away from them even when you're stuck with old python.
Now with python3 support ;) - using scapy instead of chains for pcap
Would be curious to know your vps specs before and after, and the amount of traffic you received. 
I was on the cheapest digital ocean setup with 512mb of ram, I just upped it to the 2gb ram option which helped immediately because the Mysql service was running out of memory. I'd have to look at traffic stats later. I've dealt with many hits a day but it seems to be just the number of concurrent hits that killed it. I implemented static caching now and reverted back to 512mb of ram, and it seems to be running fine now. 
just copy and paste in Notepad. If you are using Python 3 and non-ascii code, save in utf-8
Nice article. If you're interested, I recorded an episode of Talk Python To Me with Rob Blau from Autodesk about how they are using it and building tools for Python in the movie and game industry. https://talkpython.fm/episodes/show/46/python-in-movies-and-entertainment
Okay, thankyou that actually makes a whole lot more sense now.
Can you think why it's plotting the vertical asymptotes? Hint: is it connecting two points that are included in your sampled data with a line? Without seeing any code OR seeing your plot, it is impossible for anyone to tell you how to fix it. But I would guess that possible workarounds are: 1. Do not connect the sampled points with line segments, this will avoid the "asymptote" (near-vertical connecting line) between two points on the graph. 2. Prepare multiple series of data, one per period, and plot them all in the same plot with the same style. 
Hello, thanks for the response. I realized that it does end up connecting the asymptotic value. I guess I just find it strange since it is not like that in something like Mathematica. Anyway, I can make different data sets and that did work but is it possible to skip certain values? This is my code: import numpy as np import matplotlib.pylab as plt x = np.linspace(0,3.5) plt.ylim(0,10) plt.plot(x,-x*(np.cos(x)/np.sin(x))) plt.plot(x,np.sqrt(3.5*3.5-x*x)) plt.plot(x,np.tan(x)*x) plt.show() Ultimately I want to find the intersections of the circle of a certain radius and having that asymptote would mess things up. Thank you for the help so far!
Hasn't that been superseded by TensorFlow?
Since PsdHeader seems to be a namedtuple, you can use `psd.header._asdict()`.
It makes it harder to make Django a module in your application for sure. Say I actually want to put it in my monolith application with many other tasks built with Design Driven Development. Imagine I also want to be able to hot load, and reroute between instances of Django. Yeah far fetched but could make sense in a legacy scenario where the goal is to eventually break it out. Yeah this is bending over backwards.
x = x - 2 And is this counter-intuitive? You show this to any non-programmers and they'll say ERROR... With programming we have to think like computers... If the statement above is fine with you, you just need more exposure/experience with x = [[],] * 3 to quickly understand or appreciate how it works.
You need to setup python SDK for project/module. 
Sorry, but can you explain to me how I go about doing that? 
https://www.jetbrains.com/help/pycharm/2016.1/configuring-python-interpreter-for-a-project.html + don't forget to install Python SDK, it is NOT bundled with Pycharm
Experienced Python developer,located in India.Open to working remotely Made REST APIs in Django
Prehaps try this https://github.com/Chiel92/unicurses/blob/master/README.md See since 1.1 instructions 
So should I put the end of my code at the top and start at the bottom?
If you're not stuck on python, you could try golang with the [opencv bindings](https://github.com/lazywei/go-opencv). Then rely on golang's simple concurrency to process data faster. (Start with [channels](https://gobyexample.com/channels) and continue with the examples.) If you are stuck on python, check out the [multiprocessing](https://docs.python.org/2/library/multiprocessing.html) library and passing data between processes. With python you have to use multiple processes to get past the GIL. ([This article](http://fabacademy.org/archives/2015/doc/WebSocketConsole.html) may also be of some use to you.)
In PyCharm go to File-&gt;Project Settings-&gt;Project Interpreter. What is listed there in the Project Interpreter dropdown? If there is nothing there, click the gear icon to the right of the dropdown, Add Local and browse to where you have Python installed (usually C:\Python27 or C:\Python35 if you're on Windows).
1. Numpy/Scipy 2. Tornado Web
On windows the SDK might need to be installed, but on Linux PyCharm uses the native Python interpreter (and i think that all Linux installations have at least Python 2.7), so that it is NOT the case that you have to install an SDK in all cases. Certainly I downloaded the Community Edition and it works out of the box (so long as you remember to use the appropriate interpreter for your project - Py2 or Py3 for instance).
You're using Iterable and Callable wrong. Should be Iterable[Element] and Callable[[Element], bool] or something along those lines.
You sound like you've come fairly far in the project; but may I suggest you use OpenPIV? (I assume you're using particle image velocimetry), we used this at my lab, both the matlab and python version. It worked really well out of the box.
Thanks, I'll read it through and see if I learn anything!
A lot of companies use a lot of libraries internally that are still maintained but are only confirmed to work with Python 2. Not all libraries are open-sourced.
Never underestimate the bandwidth of a station wagon full of backup tapes...
VTK might be the tool for you. See, for example, Paraview - which is written with VTK and python in mind.
Thanks, I appreciate the insight.
It's always surprising that just by blocking scrolling or some overlay, they think it is possible to hide content `^_^`
So it should be the lowest common denominator, and libraries everywhere then. I'm seriously disappointed that most languages no longer include a TUI for new programmers to learn. Second there are many reasons why TUIs are still relevant. Some of the largest applications still use them, ever goto Home Depot, rent a car, or book a plane ticket? Low overhead, mature standards, low maintenance. I despair over webapps. They were supposed to be write once, run anywhere. Now you can't even keep your browser up to date for a week. Applications require conflicting browsers (ie: a company that still has to keep IE6 on their computers for poorly written apps). Nonstop changing standards (silverlight, JS, flash, etc). Plus the huge stack (web server, db server, middleware server, messaging layer). What used to be hosted on one large server now needs 4 or more VMs and all the overhead that goes with that. Frankly GUI native apps trounce webapps for maintainability, but even then I'll keep reading mail in Mutt.
I've read "Callable object is not callable anymore"...
Are you reading the feed as UTF8 and handling it as unicode text? Do you use Python 3? 
Is that a static typing? I see `number:int`. Can anyone explain?
You just can't call EpisodeOne() before it's defined. Just move all function definitions to the top of the file and then the main code below. If your program become too large for this to be feasible, learn about how to do object oriented python where the order of definitions doesn't matter so much.
Thank you for your suggestions! I will check them out!
&gt; It's probably because my Python recognizes UCS-2 characters only No. That doesn't even remotely make sense and is not correct either way. &gt; whereas these emojis come under the UTF umbrella. See above. &gt; How do I shift my python from UCS to UTF codec? You don't, that doesn't make sense either. From facebook you likely get *bytes* (`str` in Python 2), which are encoded. Mixing bytes (`str`) and strings (`unicode`) will lead to Python 2 trying to decode the former with the `ascii` codec, emoji (amongst many, many others) are not ascii and the combination thus blows up with a UnicodeDecodeError: &gt;&gt;&gt; print s 😸 &gt;&gt;&gt; print u'' + s Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; UnicodeDecodeError: 'ascii' codec can't decode byte 0xf0 in position 0: ordinal not in range(128) The proper handling is to figure out what encoding facebook uses (likely UTF-8) and *decode* the data that arrives to unicode strings before processing them. &gt;&gt;&gt; print u'' + s.decode('utf-8') 😸 
For your own mental state, please ignore this post if you're a language version zealot. :-) A lot of VFX is using 2.x because they have to use the interpreter embedded into an existing app like Autodesk Maya. Can someone in VFX comment on attitudes to 2 v 3 in the community and the issues involved with migration? I would think it would be easy as they probably aren't doing excessive unicode work? Are they working with bytes e.g. textures? Info would be much appreciated.
What is the status of markdown support in pypi readmes? Right now I'm using this horrible RST syntax.
If you install pandoc, you can dynamically convert from markdown to restructured text when you run setup. Just make sure to wrap the pandoc section with a try block to prevent downstream users from installation troubles. I'd give you a snippet but I am on a mobile.
I'm still fighting tkinter. It's a great bare-bones library, but a lot of things are quite hard and/or verbose to implement. For example, no built-in functionality for scrolling widgets, no selection-detection on listboxes, and widget layout isn't hard but gets very verbose when you want any degree of control. However, that said, it is very quick to get things working, and a functional built-in GUI toolkit is a mandatory language feature for me, so I'm very glad that it's there.
But in your case it should be `Iterable[T]` and `Callable[T, Bool]`, or maybe `Callable[T, Any]`. Otherwise, why bother with type annotations that allow parameters your function cannot handle?
The standard library docs are [here](https://docs.python.org/3/), and most third party modules are available on [PyPI](https://pypi.python.org/pypi). You can also check out [Awesome Python](http://awesome-python.com/), which is a curated list of tools and libraries for common tasks.
&gt;administartive scripts I'm 99% sure that's a typo, but it's coincidentally awesome. On a more serious note, this seems like a misuse of the term "module" when should've been "package".
The [optical flow](http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_video/py_lucas_kanade/py_lucas_kanade.html) algorithms in opencv convert image pairs to flow fields. The feature based `calcOpticalFlowPyrLK` takes 2 images and a set of good features and returns the new positions of these features. The `calcOpticalFlowFarneback` is a dense optical flow algorithm, which expects just 2 images. It returns a flow field. 
Does this work? from openpyxl.chart.shapes import GraphicalProperties chart_properties = GraphicalProperties(solidFill="FFFFFF") chart.graphical_properties = chart_properties chart.plot_area.graphical_properites = chart_properties 
fuzzywuzzy is really easy to use, highly recommended.
No, the background still stays transparent :/ The background of the chart itself is white, but the background of the chart area (including title and legends) is still transparent. Is there maybe a boolean attribute to set to True in the GraphicalProperties class?
When you need to decide what you really need in your code, Google and stackoverflow may be the best sources :) If you have **pip** installed, you can check all modules you have installed like: pip list Usually modules installed in **&lt;PYTHON_ROOT&gt;/Lib/site-packages**, there you can find the source code of the module.
 * Pillow * Django * Requests * BeautifulSoup4 * Pygame * Selenium Package * PyMongo Not like these are new or unknown modules.
Ok but is there any way for it to give an example or show usage as if you were to type in into the console with help?
This is what I wrote : # Importing the GraphicalProperties class from openpyxl.chart.shapes import GraphicalProperties # Creates the chart eruchart = BarChart() eruchart.type = "col" # Sets the chart title eruchart.title = "ERU Types" # Adds the data in the chart data = Reference(self.sheet, min_col=2, min_row=16, max_row=19) # The data categories = Reference(self.sheet, min_col=1, min_row=16, max_row=20) # The names of the data eruchart.add_data(data, titles_from_data=False) # Adding the data eruchart.set_categories(categories) # Adding the names # Chart size eruchart.width = 17 eruchart.height = 13 # Setting the background to white graph_prop = GraphicalProperties(solidFill="FFFFFF") eruchart.graphical_properties = graph_prop eruchart.plot_area.graphicalProperties = graph_prop # Inserts the chart in the recap page in the D2 cell self.sheet.add_chart(eruchart, "D2") I replaced the "shapies" bit by "shapes", I think it may have been a typo. "Shapies" is not found in openpyxl, but "shapes" is, and it has the GraphicalProperties class. What do you think?
Yeh, the "shapies" was a typo, should have been shapes. I tried your code in a simple workbook with simple data, and none of the chart shows up as transparent. Are you opening the xlsx file with Excel or something else? I gave it a test with Excel 2016. 
Annotations, it's mostly there to help the linter and intellisense out
... Okay, this was it. I use LibreOffice on Linux... But when I open the file in excel in Windows, it works. Thanks a lot :D
Nice article, thanks for sharing!
&gt; graph_prop = GraphicalProperties(solidFill="FFFFFF") Well, the documentation says that: solidFill Values must be of type &lt;class ‘openpyxl.drawing.colors.ColorChoice’&gt; In your code, you are providing a string as the solidFill attribute. Documentation for openpyxl.chart.shapes here: http://openpyxl.readthedocs.io/en/default/api/openpyxl.chart.shapes.html
I got a `NamedCursorIterable isn't iterable` the other day. That was fun. 
Interesting! How does one get into this? I have done plenty of Python roles, while not all are standard web stuff, that is my bread and butter, this looks a lot closer to my interests.
`pp(graph.get('me/notifications'))` is `pprint.pprint(graph.get('me/notifications'))`. I am posting the screenshots, because I think they will be able to paint a better picture of what is happening. The is the [link](http://imgur.com/a/3pIvB) to the screenshots... The error says... UnicodeEncodeError: 'UCS-2' codec can't encode characters in position 16-16: Non-BMP character not supported in Tk When I cross-checked it with my actual feed on facebook, I discovered that this error is only encountered when Python is trying to read a post that has emojis in it.
Yeah, a lot of times there is a py3 variant of the original library but it does mean updating everywhere that calls the library if it's renamed.
Python interprets code from top to bottom. If you haven't already defined "EpisodeOne()" you won't be able to use it. In your case you are defining `EpisodeOne()` at the end - so when you try and use it in the middle, python doesn't know it exists yet. Try this: def quits(): raise SystemExit def EpisodeOne(): print ("Episode One") introduction1() ans = True while ans: ans = input("Enter 1 to play the game \nEnter 2 to quit") if ans =="1" : EpisodeOne() elif ans =="2" : quits() elif ans =="3": print("Really...really?") elif ans=="4": print("Come on! You weren't even close!") else: ans = True 
My argument for markdown is that I'd like to use existing (edit: Existing to me, as in I already know them) formats rather than learn a new one, and I don't want to have to fiddle with a new set of RST plugins for my editors. It's not about CS theoretical issues like regularity.
Yeah but why not just use an instance? class Print: def __sub__(self, *other): print(*other) prin = Print()
&gt; My argument for markdown is that I'd like to use existing formats That's quite a departure from your original assertion. &gt; I'd like to use existing formats rather than learn a new one rST predates markdown by over two years (and is a direct descendant of Setext, which was released circa '92). Hell, [PEP 287](https://www.python.org/dev/peps/pep-0287/) predates markdown by over two years. &gt; I don't want to have to fiddle with a new set of RST plugins for my editors. Then once again /u/bixmix's suggestion works fine. You author in markdown and convert to rST during publication.
OHHHHH! That clears a lot. I was so fed up that I was trying to copy paste emogis into IDLE. Could you recommend any other IDE that supports emoji?
PyCharm may be able to output emoji, but generally trying to do Unicode stdin/out on Windows is a big pain, and it's a lot easier to write to a file. 
Will do next time, thanks for telling me 
existing = Existing to me, as in I already know them. Sorry for the confusion. I have no real problems with the workaround presented, but I would prefer if I did not have to do it.
Good job. I missed [cookiecutter](https://github.com/audreyr/cookiecutter) and [similar projects](https://github.com/audreyr/cookiecutter#similar-projects) mention.
I can see what you envision the patch notes as now. &gt; **Python 3.6.0b(-4) regression patch notes:** ... - Callables have been removed from the language. We have decided they were silly things, so they will no longer be callable. They do, however, accept email. - The compiler has been replaced with AI designed to best determine what your code should do based on current trending tweets. - The `int` type is now an html widget. ...
sounds like the wordsummarification of systemd
Honestly the biggest reason is a decade of python 2 code and not having the man power or budgets to shift it to python 3, rather than any technical reason. There's just not enough new in python 3 to warrant that kind of expenditure for the industry. Blender is the only application using python 3 but it's not used by the big studios that drive this kind of stuff. Personally I would love to go to python 3. Type notations, async and some of the other optimizations would make my life a lot easier. Right now I have to hack a lot of that into my libraries but I'd love to fall back to just default pythons implementations. 
Q. How do you distribute a Python package? A. Copy-paste the setup.py example from the distutils help page, then start adding random snippets you find online until it works.
Yea return send a value back to the function, for example in c, if a value other than 0 is returned, there is a error.
I don't know what language this is, but it sure ain't python.
#YawnzZz
Thank you - it's the pyramid-specific run configuration that I don't know how to do. Are there any pointers for that on the web? 
But unfortunately, your experience and preferences as a developer are not the singularity of the python packaging maintainers whose only focus is pleasing you.
While this is something important to know, something tells me a tutorial like this will inundate pypi with frivolous packages. 
End-user applications are fine? **[Streamlink](https://streamlink.github.io/)**: Fork of Livestreamer, being able to watch Twitch.tv in VLC/MPV is so nice. **[youtube-dl](https://rg3.github.io/youtube-dl/)**: Is another I can't imagine living without. Open source software beats any closed source sketchy browser extension (and also [discord.py](https://github.com/Rapptz/discord.py/) has been pretty nice for learning asyncio n' stuff)
&gt; Clients :) I'm so so sorry ;) Well, I suppose you'd have to compile PyQt5 from source. [You could find sources here](https://riverbankcomputing.com/software/pyqt/download5). If you want help with that, I'd be happy to help.
Ok. But if a package contains one file it is also a module. 
One possible solution not yet mentioned, is that you don't ask for a path from within your program. Instead, build it such that you pass the required path as a command line parameter. This makes it a) automatically use whatever shell tools you have to expand the path when typing the command, and b) as a bonus, makes your program easier to reuse from within shell scripts for example
I don't disagree with that, but could be a bit misleading. The whole square-is-a-rectangle-but-rectangle-isn't-a-square conundrum.
&gt; Huh, I still use setup.py. I guess that's not the way to go nowadays, though, huh. I don't really care about TLS at the moment, though, so I suppose it's fine. Older versions of Python 2.7 **can't** upload to pypi because of the TLS issues and so you will care if you're using any of those versions from your distro's package manager for example. Saying "things are fine" is not a super great approach to writing a tutorial that's supposed to work past today, and on other people's machines. &gt; Worth noting, though, is that registering your package in advance still has its uses. One is to reserve a name in advance. The other, probably more helpful one, though, is that (re-)registering your package updates the readme. This way, you can update the readme without having to release a new version of the package. Sorry but you misunderstand. The API is no longer supported and emits a message when you try to do it. ``` Server response (410): This API is no longer supported, instead simply upload the file. ```
Shameless plug: if you make packages with [flit](http://flit.readthedocs.io/en/latest/) and have `pypandoc` installed, it will convert a Markdown readme into RST for you. It's an hidden bonus feature ;-)
Will argparse give an interactive shell as well? I've only seen examples where the program is called with arguments.
I haven't had the TLS support problem, so I guess I'm on a new enough version of Python 2.7. Ergo, it's not a problem. Oh, and regarding the "unsupported" thing. What did I do the other day, then? Was that not a register? Is it called something else?
&gt; I haven't had the TLS support problem, so I guess I'm on a new enough version of Python 2.7. Ergo, it's not a problem. Not being a problem is not a good rationale for including it in a new tutorial. It's still the older way of doing things that is (slowly) being replaced as the community comes up with solutions (wheels and PEP 518) to move away from setuptools. Twine is the current [best practice](https://packaging.python.org/current/#packaging-tool-recommendations) for talking to PyPI. &gt; Oh, and regarding the "unsupported" thing. What did I do the other day, then? Was that not a register? Is it called something else? I don't know? It's been unsupported for a while now. I just ran the command to show you that error message... feel free to run it yourself if you don't believe me.
Is flit still wheel only?
Is it your machine or some school one? If it's the latter, system administrators use quotas, so one user does not use all available resources. 
yes you right, i'll edit it soon
Absent details, this looks like memory exhaustion. /u/QueueTee314 could you post a `top` screenshot, and/or more details. Is the disk light on a lot? Are other processes also slow? That points to swapping.
As has been said, [Requests](https://pypi.python.org/pypi/requests/) helps with API calls immensely. I use it very heavily. I also (don't hate me) really love [Flask](https://pypi.python.org/pypi/Flask) because it helps me write custom APIs to use alongside the Requests library.
Mobile. My bad.
That's a good thing. You are unnecessarily tying your business logic into your web framework and its crazy thread local state imports. This just makes code less clear and testing harder since you have to set up and tear down the Flask locals in tests. If you're importing stuff from `flask` all across your codebase, that's terrible. **That** is messy. I shudder to think of that codebase.
Thank you for your response and directioning me in the good way :)
Further to other answers you might like to take a look at [nullege](http://nullege.com/) which is a search engine for Python source code.
_sigh_ It's not. Regurgitating parameters down the stack makes for messy code that's _actually_ more difficult to test (hello, `mock`) and difficult to reason about, and it's vastly more difficult to refactor it if you do end up deciding that some method down the stack only needed some small aspect of the request rather than the entire request. I've unfucked this very disaster in django apps _many times_. If you have trouble with the setup and teardown of Flask contexts, consider using a [good test framework](http://docs.pytest.org/en/latest/) instead of the baked-in testing features. That problem is trivially solved with a fixture. The global request context is a compromise between the sour taste of keeping state in globals and having a concise API. _Of course_ it's awful to import the request everywhere. But what it _does_ give you is the flexibility to use the request directly when you really need it without passing a mess of parameters down the stack.
I used pyaes and rsa simply because they are 100% pure Python so they are guaranteed to work everywhere.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Flask seemed cool, until I had to (unsuccessfully) wrap my head around sqlalchemy. Django just makes the ORM so simple. Maybe I'm just missing something about how to correctly use sqlalch :(
To add to what dagmx said, also this isn't just a python thing in the film industry being years behind. Linux distributions for example, I was seeing RHEL 4 still used up until a year or so ago. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
it's pretty easy to order up a 5$/month VPS and run selenium. Windows is a bit heavy for a dev environment.
I'm taking a cryptography and communications security class in college, we need to do a project and I want to take it's implementation as seriously as I can. My groups project involves public key encryption and message signing. 
Did I say something impolite? Your answer appears to be emotionally loaded.
That's the basic premise of solving anything isn't it?
Yep, though I'm working on the PEPs (518, 517) which will support making sdists with it.
That's exactly why I got into it. It was super easy to just dive on in and start making endpoints because things were pretty self-explanatory. I'm actually having more trouble writing the front-end interface of my project than I did with the API that runs it all.
Nice!. Did you automate it or are you using python as an overkill calculator? If automated, are you using a GUI?
A few things stand out to me. The most glaring is: "prices as float." Given it looks like Walmart is sending you floats, I can't really fault you, but prices are more complicated and more precise than floats. They have an amount (which is a discrete decimal value) and a currency. However, since Walmart sends you floats, you can't really do anything about that. :( You have the ResponseHandler class with a bunch of `_safe_get_attribute` methods that all follow the same pattern. You could simplify this to just: def get(self, attr, transform=lambda x: x): if attr in self.data: return transform(self.data[attr]) return None Depending on if None is a desired value, if it's not, you could just use the `dict.get` method and check for None before doing a transform. At one point I saw: request_params = self.params for key, value in kwargs.items(): request_params[key] = value You're affecting the internal state of the object and I don't think that's intended. `self.params` is changed every time you call this method. If you can afford to drop Python 2, there's a ChainMap object in collections. If you need to support Py2 (and dropping it for ChainMap alone is silly), I'd recommend doing: params = dict(self.params) params.update(kwargs) There's a few places where you build a list with for and append, but you can just do a list comp instead. 
Automated, but with no GUI. Mainly it wraps around a neutronics code varies how much fresh fuel gets added to find the sweet spot (not exploding reactor/not shutting down).
My sympathies - geospatial python libraries have the worst APIs I've ever used :(
I'll try to make my way through the official django tutorial. Process is slow but steady so far.
Awesome, thanks for your help 
seconded
I think what you are looking for is a boolean operation. I think [pyclipper](https://github.com/greginvm/pyclipper) might do what you want. You'll need to convert it to tuples of coordinates however...
First question back, how much programming/computing experience do you have? A short answer is that the language itself is doing a lot of 'under the hood magic' that makes the programmers life 'easier' (arguable lol). Some people like to say C is more 'bare bones' or 'closer to the metal' or 'low level'. Python is a 'high level' language that abstracts away a lot of extra stuff. Dynamic typing is a good example. # python whatever_variable = 2343 # we have an int whatever_variable = '2343' # now str, change it to whatever yo dont matter # c / other static langues ### DEFINE VARIABLES int integer_variable; # this has to be an integer char string_like_variable; # has to be a string integer_variable = 234; # success integer_variable = '234'; # failure
Link to the source code: https://gist.github.com/KetoCoder/4cf8dc51860d5adab13f02b463116afc (By the way, suggestions help!)
First of all, there's a difference between a language and an implementation of that language. And you can only talk about the speed of a particular implementation. CPython is rather slow, but PyPy is often much faster. They are both implementations of the same Python language, however. CPython is slow because it's a straight interpreter(*), without any kind of advanced execution techniques, such as just-in-time compilation. It's meant to be a reference implementation, and it favors other factors like portability and maintainability over raw speed. The fact that CPython is written in C does make it faster than if it was written in some other language, but that doesn't really amount to much. It's still quite slow, because that is the nature of interpreted languages. In addition, Python is a highly dynamic language, which does not offer the chances for optimization that more static languages provide. For example, if you had a loop such as: result = [math.sin(n) for n in numbers] Every iteration of this loop has to perform an attribute lookup of the `sin` attribute of the name `math`. That's because in a dynamic language, everything can be changed at any time. There's no way to know that some part of the code doesn't reassign `math.sin` to refer to something else. So a Python implementation has to go to a lot of trouble to perform optimizations that would be trivial in static languages, such as recognizing that this is calling the same sine function over and over and optimizing for that (e.g. inlining that function) rather than making a dynamic lookup every time. A similar line of reasoning applies to types, where the compiler cannot easily look at an expression like `foo + 42` and reason about whether that's performing integer addition, floating point addition, or some other type of addition. It could be anything at runtime. In a static language, you know at compile time the type of `foo` and what kind of operation `foo + 42` means, so you can optimize it ahead of time, eliminating things like the overhead of having to look up the `+` operator at runtime. (*) The terminology here is kind of confusing, because CPython first translates Python source code into a different internal representation, called bytecode, before interpreting it. This transformation is often called "compilation", but that word has multiple meanings, and one of the meanings is when you have a language that is compiled into native machine code, making it much faster. But in CPython's case, compilation to bytecode has nothing to do with speed; it's just that bytecode makes a convenient internal representation and it makes writing an interpreter easier and cleaner. So the term "compilation" really just means a transformation from one form to another, but it's loaded down with this idea of also getting a speedup when the specific end result of the transformation is native machine instructions.
if you need a framework to do testing, you are doing it wrong. A high barrier makes people avoid writing tests at all costs. App context makes weird shit happen. It's pain in the ass if you have to debug tests
SVG's a big, scary spec, and there are multiple ways of doing things. Do you consider 4 lines making up a rectangle to be different from a rectangle element? Do you consider a circle element to be different from two arcs forming a circle? Then there's styling, z-index, evenodd vs nonzero, clipping, groups, etc... So in general, no.
Dude, I heard strings are hard.
I cannot say that was particularly helpful. ;) But thank you anyways for your response. If a tool does not exist, then I will build one - even if it needs to make simplifying assumptions. I am not a big fan of SVG either.
What is wrong with you guys? Is it April the 1st?
&gt; BTW, flask-sqlalchemy is a mess and leaky due to this design. Leaky how? Like it leaks memory? Leaky abstraction? This makes no sense. &gt; Try split read-write on master-slave that shit with auto cache invalidation. This has nothing to do with Flask, SQLAlchemy, or Flask-SQLAlchemy. This happens because database replication is typically asynchronous and readbacks complete before the data is synced to the read replica. Django has the same problem out of the box, and the most-used solutions perform master reads immediately after write in order to avoid it.
Can you say more about this? I am one of the authors of Pyramid and this is news to me...
Checkout NaCl.
[Must read](https://imgur.com/gallery/SZPjHwz)
Thanks!!! :D
**Requests**: An awesome library. I work quite a bit with APIs and this library makes it dead simple **BeautifulSoup**: My favourite library for extracting data from HTML files. Again, a very simple, elegant API
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Pretty good blog post on this topic if a bit dated https://www.google.com/amp/s/tomastouceda.com/2014/07/03/what-to-use-for-security-python-edition/amp/?client=safari Is there a specific reason to discount OpenSSL?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt;&gt; I'd like to use existing formats rather than learn a new one &gt;rST predates markdown by over two years (and is a direct descendant of Setext, which was released circa '92). Hell, [PEP 287](https://www.python.org/dev/peps/pep-0287/) predates markdown by over two years. Regardless of which came first I think Markdown "won". Source code is, for better or worse, hosted on Github which defaults to Markdown. Rewriting (or converting) documentation is certainly a waste of time so it seems a sensible request. 
Literally never heard of `twine` until this moment...
&gt; A package is automatically registered on first upload now. When was that change? I had to register about a month ago. However I was using `setup.py` and not `twine`.
Hmm I already got my answer. 
I'm glad!
Care to explain why? 
[You can use Markdown with Sphinx if you like](https://github.com/rtfd/recommonmark). Read the Docs even supports it natively (that link is to their implementation).
Go and take my upvote, mate.