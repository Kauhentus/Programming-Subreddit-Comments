[Consider it done.](http://www.reddit.com/r/python+montypython)
And I thought I was the only one who didn't like scribd. Thanks for linking to the PDF. 
Went to comments just to ask what kind of a stupid site it is. I had to scroll down every two or three slides as ads kept stacking from the top of the page and every "next slide" moved slides a bit down. But I guess it's better than nothing if you can't view the pdf for some reason. Thanks for the pdf.
I am pretty sure I didnt. I think I am owed 2 issues :(
Bad ideas are always the most fun! `GitHubImporter`, `assigned_name()` and half the others are *so tempting*... Great slides, wish I could've seen the talk live.
That's good, thanks.
Very impressive, wish I could have seen this talk live. maybe there is a typo: https://github.com/mitsuhiko/badideas/blob/master/magicmodule.py line 31: from magicmodule improt git_hash -&gt; from magicmodule import git_hash
I'm moving from Nashville to Seattle in September, but I'm curious -- what companies and where are you located? I was never under the impression that there's all that much tech going on in Nashville (especially not Python) and would love to be enlightened by someone in the know. 
tl;dr: Avoid NIH syndrome, Python has lots of batteries included! :D Agreed, if it's in the standard library and meets your needs, use it. Heck, even if it doesn't meet your needs *exactly*, you can often subclass something from the stdlib and use an interface that everyone else is used to.
The reason is - "You Must be Logged in to Download a Document", whereas github et. al don't care.
 import gc, sys def find_names(obj): frame = sys._getframe(1) while frame is not None: frame.f_locals frame = frame.f_back result = set() for referrer in gc.get_referrers(obj): if isinstance(referrer, dict): for k, v in referrer.iteritems(): if v is obj: result.add(k) return tuple(result) ... wait, why do you need the first loop?
I liked the part about extending Python's C API through Python's ctypes.
This is great news! nginx+tornado+sqlalchemy+mako have become my go-to tools for web development. Great to see the continued effort going into tornado! 
... you do know what Python is named after, right? Hint: it's not a snake. [#EANF#](#EANF#).
Thanks! I'll check that out. I'm actually mostly American. It's "Norweigianish" because all of my grandparents are Norwegian. NorweigianISH.
Thanks, I just looked at it, and it looks great. Looking forward to completing this!
It causes the frame locals to be put into a dict.
Why is it **5 years** of bad ideas?
was interesting and fun. :)
This. I got to slide twenty and had twenty ads on the page. That is ridiculous.
Offtopic again, but I had the worst experience with Scribd recently. I wanted to download some documents that I had uploaded years ago using an old account that I couldn't recover. Scribd asked that I purchase a pro account to get my old documents back. Very frustrating. One of the worst popular sites on the web. A better free alternative is needed (perhaps something built on google docs and their web view - which htmlifies pdf and other documents)
I work downtown. There's been a surge over the past few years, especially in the heath care space, which makes sense as Nashville has a $65b/year Healthcare Industry. There are 900 open IT spots here right now and it's predicted that number will grow to 5000 in the next 3 years alone. Biggest problem is that there aren't enough good developers here to fill them, especially those experienced with newer technologies (plenty of legacy folk). There's a lot of good ideas out there on the startup front - a lot revolve around game changing technologies or services that would put some power back in the hands of consumers and away from Insurance companies and larger corporations. There's a rich media email marketing company here that recently converted their entire system from PHP over to Python (http://tech.myemma.com/rewriting-emma/). Borderjump is another believer. There are several companies I'm working with as well but I can't mention the names publicly due to confidentiality agreements. Shareable Ink just relocated here from Boston - a few guys from MIT at the helm- pretty cool networked digital pen/paper technology . No Python, though - they're more Java/Ruby on Rails. Grownashville is a meetup group (meetup.org) sponsored by the Nashville Entrepreneurial Center - there are some good contacts there. http://www.entrepreneurcenter.com/ - they are located on Broadway near the river - great organization to be involved with to garner funding. They also supply space and mentoring. CoLab Nashville is a community work space not many people know about...
Seems interesting... [Click Download]...(POPOVER){sign up to download}... Damn... [Close Tab] every damn time.
Took them long enough to figure how to do IO in C++!
As soon as I saw the title I knew this was from you. ;-)
I only managed to read to slide 36. After that I gave up in disgust. I need a beer.
There's one in the last line (last token, actually) of the "implements" function, too.
Presumably armin's been accumulating these for 5 years, which is longer than I've known how to program :)
Because if my math is correctly, Georg and I started working on pocoo, the failed forum software in 2005 and a little after that we started exploiting Python :)
You might want to look at [Solr](http://lucene.apache.org/solr/)
Good stuff, considering how much performance they've managed to squeeze around the GIL it'll be pretty exciting to see what kinds of numbers they'll be able to throw around in fleet fights after this transition.
Magic, got it! (also, I want to congratulate myself on the first ever relevant use of this mêmé)
That was beautiful. Absolutely beautiful. And I feel like I need a shower now.
...and even if you _are_ logged in, half the stuff there requires you to pay a fee because it's now "archived".
hey thanks for the link, I'm going to play a bit with it
OK it's a dumb question but downvote? Really?
I'm still waiting for them to release stackless io as they said they would ...
Confused. When does any mobile platform get to be defined as a Nokia phone?
I recommend [whoosh](https://bitbucket.org/mchaput/whoosh/wiki/Home). It's pure python, very easy to get running, and pretty full featured.
 &gt;&gt;&gt; from sqlobject import * Is this really a good idea?
Good way to work backwards is to ask a few questions... 1) game_options2 is being set. Where is it being set? 2) Okay, it's being set to whatever game_options1.load_options() returned. What does game_options1.load_options() return? 3) Oh, it doesn't return anything, so None by default :)
I'm surprised that no one has mentioned [/r/learnpython](http://www.reddit.com/r/learnpython). I would start with some of the great resources already posted, but feel free to post questions to the learnpython subreddit.
So funny it was banned in Norway
This takes me back. Check this out: &gt; SQLObject creates objects that feel similar to normal Python objects (with the semantics of new-style classes). An attribute attached to a column doesn't look different than an attribute that's attached to a file, or an attribute that is calculated. It is a specific goal that you be able to change the database without changing the interface, including changing the scope of the database, making it more or less prominent as a storage mechanism. &gt; This is in contrast to some ORMs that provide a dictionary-like interface to the database (for example, PyDO). The dictionary interface distinguishes the row from a normal Python object. I also don't care for the use of strings where an attribute seems more natural -- columns are limited in number and predefined, just like attributes. (Note: newer version of PyDO apparently allow attribute access as well) &gt; **SQLObject is, to my knowledge, unique in using metaclasses to facilitate this seamless integration** . Some other ORMs use code generation to create an interface, expressing the schema in a CSV or XML file (for example, MiddleKit, part of Webware). By using metaclasses you are able to comfortably define your schema in the Python source code. No code generation, no weird tools, no compilation step. http://sqlobject.org/SQLObject.html#compared-to-other-database-wrappers (emphasis mine) SQLObject really was a trend setter. You can see it's influence all over SQLAlchemy and the Django ORM.
There's no point in waiting, if you need that kind of stuff, use [gevent](http://gevent.org),
With Flirt you can safely add friends, send messages, wall posts and more. Spyder MySpace Friend Adder Icon ·http://www.chaquetasjackets.com/spyder-chaquetasjackets_12 Spyder MySpace Friend Adder for Mac OS X
Wish I could go. :( Flying back on Sat evening.
Damn. You should change page 68 from "Questions?" to "Problem?"
I think you can safely say that of anyone who posts on the internet.
Is there any practical difference between using sys._getframe(1) and inspect.stack()[1][0] Apart from the latter looking uglier?
I tried it and it looked interesting... unfortunately the choice of license (GPL-incompatible) makes it useless for me, or at least useless for the project I wanted to use this in.
I'm not sold on using the context manager style for DSLs. lxml's [E expressions](http://lxml.de/dev/tutorial.html#the-e-factory) are more concise and less magical: from lxml.builder import E, ET pratchett = E.author( E.novels( E.novel('Small Gods', year='1992'), E.novel('The Fifth Elephant', year='1999'), E.novel('Guards! Guards!', year='1989')), name='Terry Pratchett', genre='Fantasy/Comedy') print(ET.tostring(pratchett, pretty_print=True)) 
Open interpreter, type 'help()'
Python's documentation has been popular for quite some time. Personally, I've been hitting those docs since at least 2003.
Someone should write an autocorrect hack for just this typo, it keeps ruining my productivity.
Maybe the downvotes reflect the fact that your question is not providing any details regarding your usage needs, neither is entirely clear what "operations within web page" means. Don't take it personally, but it seems either your English is poor (as mine is), your communication skills are lacking, or, more likely, you didn't take the time to properly express your question. Others might think: "Why would I wast time trying to understand what he wants to ask if he didn't bother to try to express his needs in a way that the rest can understand". Take care! **tl;dr**: try rephrasing your question.
I don't see how the context manager is "magical" when used this way. You create elements and process sub-elements in "the body" of the with statement, which corresponds to the body of the element. Seems like a very good match.
Hmmm... I don't think creative commons licenses are a good match for open source libraries. GPL incompatibility is a plus though.
Awesome thing to do: turn these into python koans; I don't understand most of them...
The latter uses the former and is slower.
This looks interesting. Can someone using it comment on the major advantages over ipython -pylab? The matrix editor looks interesting. I don't see giving up vim for random gui editor. 
I am open to changing it. To be honest I am a bit new to the open source world. What would be a better choice?
Of course it is. If you open a file with a with statement and read that file into a variable the only thing that happens is the file close with the block goes out of scope. You still have the contents in the variable or it would be useless.
This is a personal decision. Everyone has an opinion, as the author it's up to you; however, I agree that CC is not a great choice. Here is a [wizard](http://home.ccil.org/~cowan/floss/). Although you may want to start by trying to understand the [options](http://www.rants.org/2011/04/06/open-source-license-flowchart/) and what they [imply](http://stephenfanjoy.posterous.com/open-source-license-selection-in-relation-to). This [flow chart](http://f.cl.ly/items/2S3I123K113G3v2r1E2H/OSS%20License.png) is a bit sardonic but not a bad spot to start. I'd say the real choice here is do you want to use the python license? If not then it becomes copy left vs. not. Each side of this debate has valid arguments for why they are actually the true champions of *FREEDOM*. 
He said less magical, which is a good thing.
The e factory is a very good choice no doubt, and nesting the expressions like that is certainly not a bad way to do it. The advantages you get with the context managers is you can include loops and other code which gives you a little bit more power. That said, implementing expressions like e factory in datatree seems like it would be pretty easy and would have the added benefit of outputting to multiple formats. Thanks for the feedback!
This is an interesting library. Thanks for posting it. I like the idea of a common tree structure that can be serialized to various formats. That said I'm not convinced that I should be able to define something in the DSL that I can serialize in a lossy fashion (year attributes are lost in json/yaml). Also, does this really count as a DSL? Seems to me more like a "clean API." Maybe I'm wrong, just tossing it out there. Finally the ability to reconstitute the Tree from any of the serialized forms would be a nice feature. Perhaps I'm just over looking it.
Don't you need to use: 'COM7' If not, iterate over a list of strings like this: locations = ['COM1', 'COM2' etc etc] for device in locations: try: output_dev = serial.Serial(device, baudrate) else: Print 'failboat' Then use output_dev for your device... 
Does anyone know of any good tutorials for using this?
Stick to one of the big four. So, either: * GPL (or LGPL) -- if you care most about your code staying free (patches or additions made by 3rd parties must be licensed GPL (or LGPL) as well, thus keeping the whole codebase the same free license), or * BSD or MIT -- if you care most about your users being free to do what they want with the code The Free Software community generally recommends GPL (or, if the situation warrants it, LGPL). The Open Source community generally recommends BSD or MIT. I would argue that choosing to go GPL benefits the community most, while going BSD/MIT most benefits companies that might like to incorporate your software into their product. My 2 cents: unless you specifically desire to have your code see widespread use in commercial products, go GPL (or optionally LGPL for libraries, if it makes sense). For more info about free software, there's some essays on this stuff at fsf.org in their [philosophy section](http://www.gnu.org/philosophy/). 
I prefer it flattened: name, genre = 'Terry Pratchett', 'Fantasy/Comedy' novel_list = [('Small Gods', '1992'), ('The Fifth Elephant', '1999'), ('Guards! Guards!', '1989')] novels = (E.novel(title, year=year) for title, year in novel_list) author = E.author(E.novels(*novels), name=name, genre=genre) But to each his own. 
This is good for small data sets. I mainly use it for scripting now because the whole integration of ipython with variable editor/viewer is just too slow. From my experience there are no advantages over ipython -pylab.
I almost always choose BSD. It amounts to 'Please make a shitload of money off my code, but leave my name here.'
Using `with` is optional here as far as I can tell. The `__enter__` method of a Vertice returns the instance and does no contextual 'magic'. You're only using `with` to visually follow the XML structure. While I'm not sold on using`with` here, I like your use of `__getattribute__` and operator overloading to streamline the process. 
I think it's reasonable to consider the PSF license any time you are putting out a python library. That said for a free standing project I agree with this agree with the advice to stick to the big ones. Out of curiosity I checked on projects in the order in which I thought of them: * Scipy - BSD * Twisted - MIT * Mercurial - GPL * SQLAlchemy - MIT * Django - BSD * Trac - BSD * Calibre - GPL I think Trac is the only one that surprised me. 
&gt; From my experience there are no advantages over ipython -pylab. Thx
&gt; I think it's reasonable to consider the PSF license any time you are putting out a python library. No, it's *really* *really* not. Please actually read the PSF license, it basically consists of a long list of places Guido has worked, it is *not* appropriate for your codebase.
Less magical than not magical? (Which is basically what I said...)
I think you're incorrect. The *Python* license is full of Python specific stuff. The PSF license is fine.
BSD and MIT are both fine. GPL if you don't actually want people to use use your code. Apache if you like BSD / MIT but prefer to maintain the GPL incompatibility.
Yeah, I find scribd slow and with a small window on my large monitor. Can't stand the site. Thanks for the PDF and interesting talk.
I like just using gedit, but IDLE isn't bad either. Notepad++ if you want all of the extra crap.
it's neat, but slow when dealing with any "real-ish" data. i'd recommend it as an awesome tool when one is learning python, but beyond that i think you should learn how to debug in more traditional ways rather than relying on your ide to allow you to explore objects in memory. 
On Mac (I'm supposing you're using it, since it's Aquamacs), I can think of Sublime Text 2 and TextMate as paid options and TextWrangler and MacVim as free. I'd strongly suggest Sublime Text 2, only 'cause it's more active, undo works fine (TextMate is, sometimes, weird about it) and its base is Python, so you can write plugins for it in Python too. TextWrangler is okay, but the lack of colorschemes is kinda annoying to me (and I'm not a fan of white backgrounds and changing things one by one -- yes, I'm lazy and that's the only "fault" in TextWrangler). And MacVim is... well, Vim. I love vim heartily and still use it from time to time (it still offers one of the smartest indentation for python code) but... dunno, I guess I got used to ST2 alterady...
&gt; learning python ? Looks like it's really targeted at someone learning scipy or looking for a stata/spss experience in python to me. Is that wrong? 
&gt;What should I do my editing in? The best developers do it in the nude.
I quite like komodo and used to be kinda fond of geany.
Komodo from Activestate. Can run on windows, mac, and Linux and is a python powerhouse IMHO. The also have a free version and their paid (well worth the price) professional version has a free trial. www.activestate.com/komodo 
Cream is pretty good as well, if you like vim (it's a set of extensions that makes vim behave more like a normal editor when in `insert` mode).
I know you said graphical, but seriously, spend two weeks using vim. The learning curve is hard at first, but it is absolutely worth it. Force yourself through the first week. Learn some of the advanced features. Your efficiency will gradually improve, and will keep improving far beyond any editor you have used before. After a month you will never want to go back.
vim. I've started liking PyCharm as well, but that'll cost you.
Vim. Learn it, love it. You'll never go back, I promise. If you decide to pick it up, PM me and I'll give you some tips to customize Vim for coding in Python. ---------------------------------------- **Using Vim for Python:** A few resources to help you tweak Vim for use with Python: * [Turning Vim into a modern Python IDE](http://sontek.net/turning-vim-into-a-modern-python-ide) * [Vim as a Python IDE](http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/) * [Python and Vim- make your own IDE](http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/) **Customizing your .vimrc**: Those three sources have plenty of tips for writing Python in Vim, but the crucial lines you'll want for your vimrc are the following: filetype plugin indent on " Enables filetype detection, indent files, and file-specific plugins syntax on " Enable syntax highlighting set tabstop=4 " Sets tabs to 4 spaces set shiftwidth=4 " Use &lt; and &gt; keys in visual mode to block indent/unindent set smarttab " Use 'shiftwidth' setting at start of lines set expandtab " Inserts four spaces with the tab key set softtabstop=4 " Treats four spaces as one tab set autoindent My .vimrc is [here](http://dl.dropbox.com/u/24270297/.vimrc). Feel free to use it as your own, or to pick and choose what you like. **Plugins:** There are a whole host of plugins that make coding in Vim more comfortable. I'm a minimalist, so I can't really recommend any, but it's worth looking into. **Vim embedded in another IDE**: For anyone that wants to use a standard IDE without losing the functionality of Vim, I'd recommend [Eclim](http://eclim.org/). It allows you to run Vim inside of the Eclipse IDE (in addition to other configurations). Very fun, and powerful if you're willing to explore it a bit. ----------------------------------------------- One last tip: map your Caps Lock key to escape! You'll be using the Escape key a lot, and who needs Caps Lock anyway? Happy Vimming!
I've never done any coding in Windows before, until a couple days ago, and went and downloaded notepad++ because I heard it was decent. I have to say, it's *amazing*. No setup or anything, knows python syntax out of the box, color codes, has tabs for different files, and automatically opens up all of the files I previously had open the last time I closed it. It also highlights tabs red when they haven't been saved yet. I'm really digging it. The only thing I'd like to do (and maybe it CAN do this, I never bothered to check), is force notepad++ to use vim keys.
You think Vim has one of the smartest indentation modes for Python? You mean the same indentation that tries to unindent lines starting with a sharp a la C?
I too try to use Komodo, but often find myself using vi.
IMHO there are several advantages over ipython -pylab: 1. You don't have to be constantly switching between the editor and the console. 2. You can evaluate a particular piece of code 3. You have integrated debugger capabilities 4. The variable explorer is very cool 5. You have integrated documentation formatted by Sphinx (instead of plain text docstrings) I'm one of the spyder devs so (yeah!) I'm biased on this, but I've been working with it for like 8 months and I've found it has increased my productivity a lot. I haven't found problems with large data sets (as some reporters say) but please report any bug on our [Issue tracker](http://code.google.com/p/spyderlib/issues/list) We want Spyder to become the IDE of choice for scientific programming with Python.
Dunno about your configs, but Vim always did the right thing about comments for me (including adding new comments when it breaks the line automagically). Also, it is the only editor that I saw so far that can do PEP8 column-limit without a problem. If it is going to column 0 when you type "#", maybe it's not loading the Python syntax. Next time, type ":set syntax" and check if it is recognizing your .py files as "python".
can't be too careful about static discharge
I'd definitely recommend PyCharm. I used to use TextMate, however PyCharm has all the good stuff built in for Python development.
[r/vim](http://www.reddit.com/r/vim) can help with this as well.
I like the native gnu emacs for the mac. Using that and the emacs-for-python module (which puts together a bunch of non-default modes) it's a great development environment. http://gabrielelanaro.github.com/emacs-for-python/
Emacs or Vim.
+1 for vim and PyCharm. I've been using vim for years, but after seeing the demo of "intellisense" at PyCon this year, I was sold. Well worth the $99 for a personal license for me.
How do you get vim to do smart indentation for python code? This is the one reason I've been using Komodo Edit all this time, pain in the ass to mash space after every line in vim. 
Hey give me those tips, I like vim but have been using Komodo edit for my python stuff. Give me a reason to go back to vim!
In the editor you like best. Or vim. Whichever you like best. :P
I would recommend [PIDA](http://pida.co.uk/) (it has awesome vim AND emacs integration), but I'm not sure if it works on OSX (it's python-based, though, so it might) and also, its development seems to be stopped.
I was going to say "In the buff", but close enough.
Well, I'd stick with emacs. Though, if you want gui there is an emacs gui. Also, you have Geany (Linux) or Notepad++ (windows)
Any reason we can't just define a tagging and nesting convention for structured docs directly in JSON? At the end of the day, it seems all of these representations are roughly equivalent anyway; which one you use is just a preference in syntax. Or am I missing something?
FWIW, part of the success of HTML is due to the fact that they are unstructured documents lightly seasoned with structure. SGML was a structured format similar to HTML and it did not succeed well, even though lots of technologies supported it. Structured documents tend to be only lightly seasoned with content and human beings aren't very interested in that.
I hate when that happens as well but it shouldn't happen in Python code unless you don't have file type plug-ins enabled; consider adding `filetype plugin indent on` (as one of the first lines) to your `~/.vimrc`.
Add the line `filetype plugin indent on` (as one of the first lines) to your `~/.vimrc` (`~\_vimrc` on Windows).
For tabs? You add "set expandtab" on your .vimrc I have the following in my .vimrc, to set every Python buffer to follow PEP8: " default python style " (use spaces instead of tabs (expandtab), uses 4 spaces for tabs (tabstop), " when auto-indenting, also use 4 spaces (shiftwidth), when deleting text, 4 " spaces are a tab (softtabstop) and break the line at column 78 (textwidth)) au FileType python set expandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=78 
You will not be unpleased =) Vim is easy to configure and fast to compile if you're into that sort of thing. 
I can't honestly stand full ides. They just seem to get in my way. 
woah... i use eclipse and no one mentioned it. I feel like a middle schooler who showed up to school wearing clothes he didn't realize were dorky.
You can get vim mode on Komodo... 
Check out macvim and the colorscheme solarized
As you wish. =) I've edited my original comment to include some tips for getting started. Good luck!
Lucky for you, all Macs ship with vi already installed. Just open a command prompt, type 'vimtutor', and press Enter to get started. Stick with it, and you won't regret it! When you've mastered the basics, you should tweak Vim to your liking, and start coding. You'll get better with time. 
[An excellent post about vim](http://stevelosh.com/blog/2010/09/coming-home-to-vim/) (one of the top submissions in /r/vim BTW).
You should do your editing in vim.
I'm really loving Wing IDE. 
Woah thanks, man. 
Awesome, thanks!
Could you explain exactly what it is that this is doing? The plugin bit especially seems counterintuitive, since I have no plugins whatever going on. 
thanks too, it has the advantage to be written directly in python
I'm happy with Aptana, a fork of Eclipse with preinstalled plugins for python (and some other stuff). Before that, I was quite content with PsPad.
We code, in the buff -er. We execute Python is not a snake. Shocked.
VIM tutorials if you haven't touched VIM before. http://www.derekwyatt.org/vim/vim-tutorial-videos/ 
Or Emacs... if you like key combos more than modal editing and appreciate the extensibility. 
If one recommends vim, one should always also recommend Emacs (and the other way round). None can be generally recommended above the other.
Iunno, vim?
Aside from vim, I'm really digging PyDev in Eclipse for larger projects. You get things like code completion and assist, definition previews, and probably my favorite, real-time error checking (syntax, invalid member reference, unused variables, etc). You don't have to configure it that much when you first install; you only need to point it at your python directory and go from there.
Geany is rather decent if you want something lighter than a full-blown IDE. It's not going to inspire cultish fanboyism, but it gets the job done quickly without imposing needless overhead.
Or emacs if you like modal editing too: viper-mode and vimpulse gives you most if not all of the most commonly used vim shortcuts as well as staying within emacs so you can still have its "kitchen sink" approach to customization and extension.
Or he's already using Emacs, as he stated in the original post, and needs some help learning about how to configure it without using the menus.
For the mac Aquamacs is pretty good, perhaps instead of relearning how to use a new editor, maybe you just need some tutorials on how to change settings in your .emacs equivalent file instead of using the menus. It usually is much easier that way, I don't know anyone using emacs that bothers with the menus for configuration anymore. For Aquamacs, the files are: ~/Library/Preferences/Aquamacs Emacs/customizations.el ~/Library/Preferences/Aquamacs Emacs/Preferences.el If I remember correctly, customizations is the only one you really need to worry about. From there you can do pretty much anything Emacs can with the added bonus of regular Mac shortcuts using the apple key. If you really hate Emacs because you find it difficult, I would be careful about the VIM recommendations here, a lot of people like it but it is very difficult to use if you have no experience. On the Mac, if you really can't stand Aquamacs, I recomend [TextMate](http://www.macromates.com/) for development. I know a lot of developers that have shifted over to it and are very happy. I'm sure you could find out a lot more useful information about it from a simple Google search than I can provide, but I hear it is worth the $50. I love Emacs too much to let it go, but I'm certainly no editor-zealot, if you find something does not work for you there are hundreds of options out there for you.
Editra is my favorite code editor. It's OSS and they recently added an IDE plugin. Spyder is also interesting, but I haven't used it recently.
It baffles me how so many people prefer to post a question rather than take 30 seconds and type the relevant keywords into Google. 
If Apache has a 500 when you "enable" it in Apache, and it brings all of the other sites down, then I would think that the configuration part in Apache is wrong. Is there any error messages in the Apache Error Logs?
The apache error log should contain some useful info. Can you post it here?
thanks, i looked a while ago and didnt find it. nail me to a cross why dont you
Make sure that you have the apache directives correct and in your WSGIDaemonProcess dataminer user=www-data group=www-data threads=5 that the user/group www-data or what ever your user/group are exist
Tis a shame..(lol). Though, it's not to bad. I think that the popular Mac IDE with a gui is Textmate. I dont or any of the Java-based IDE's like Eclipse or whatever should run on it. Good luck.
After a month I *couldn't* go back! Every time I fired up Komodo Edit in normal mode there were random colons and characters all over the place.
Whatever you are comfortable in...
If you are looking for something that is cross platform / cross languages (python/php/html/js/more) check out Titanium Studio. It was until recently Aptana Studio until Appcelerator took it over and integrated their product line of mobile/desktop SDKs. It is based off eclipse so you can get pylint and other eclipse packages installed with ease. Also, Appcelerator did a webinar this week going over the editor and some of its features for developers. [http://www.appcelerator.com/products/titanium-studio/](http://www.appcelerator.com/products/titanium-studio/)
Haven't you heard? Real programmers use vim/emacs/ed/magnetic needles to write their code.
I know what you mean... I eventually wound up aliasing ":wq" to "logout" on my PC and all my terminal accounts!
It seems like you're using a mac so check out [macvim](http://code.google.com/p/macvim/). Its vim but with some fundamental features hooked into the OS like copy/paste. Its my main text editor now.
If you want to use emacs, use the command-line version. I love emacs, but hate Aquamacs. Aquamacs is really frustrating to use. 
I use GNU Emacs for python editing. The python.el that's shipped with it has some problems, but the original author maintains a fork [here](http://www.loveshack.ukfsn.org/emacs/#python.el). In addition I have pylint.el which comes with pylint. [Here's](http://pastebin.com/h2G9Ua5p) a pastebin of my init.el; the Python section is pretty small but references other stuff so I just included the whole thing.
I try to use N++, but I didn't think it had auto-complete for python and external python libraries. No debugger either, or am I wrong? I'd love to use it more if I could.
I wouldn't rule it out until you try it for a bit. It's the only software I've actually paid for in years (other than games and phone apps). I would buy it again in a heartbeat. 
What you should do is find the appropriate forum to ask about your problem. For Django there is: http://groups.google.com/group/django-users For Apache/mod_wsgi there is: http://groups.google.com/group/modwsgi By using the forums targeted at the specific pieces of software you are using, you will always get better responses than some generic technical forum or social commentary site. Specifically, the authors of these different software packages don't generally go trolling every unrelated forum out there and will generally only answer questions on the forum for the specific package. This includes myself for Apache/mod_wsgi. So you have a choice, go to the places where the experts reside or continue asking people just mulling around on the street. :-)
Seconded ... Wing is absolutely great!
I don't know about external python libraries - I'm only currently using pygame but didn't even pay attention to it. I'll look into it next time I'm on my laptop. Not sure if it has a debugger as I haven't even delved that far into it yet, but it's definitely nice. There are tons of menus and I haven't even used a single one yet.
[fish](http://pypi.python.org/pypi/fish/)! :)
In fact, start here, and try vim later :)
Real men use cat
from my bookmarks: Alex Martelli: http://stackoverflow.com/questions/1490190/python-modules-most-worthwhile-reading Raymond Hettinger: https://groups.google.com/d/msg/comp.lang.python/O0duTg8bSAk/R53kZv9XIk8J Open Source Project: Python itself, Django, Flask, SqlAlchemy, Mercurial, etc. you can find more here: http://stackoverflow.com/search?q=[python]open+source+project+to+learn 
http://liw.fi/ttystatus/ There's a bunch of libraries for progress bars in Python. That's mine.
It's not as mature as other solutions, but I really like [PyTools for Visual Studio](http://pytools.codeplex.com/), especially if you've worked in Visual Studio before and are familiar with it. You can download the [Visual Studio Shell](http://www.microsoft.com/downloads/en/details.aspx?FamilyID=8e5aa7b6-8436-43f0-b778-00c3bca733d3) for free so you don't have to buy a license to anything. Kind of irrelevant for you personally if you're on Mac though.
I'm having the same issue on a personal project. Can you post a sample of the code using rlwrap?
First of all, him posting here made me interested in the answer. Not everything can be delegated to Google. Perhaps a person posting prefers a more personalized answer. In fact, your condescending remark of 'ask Google', many times leads to StackOverflow forums which are not too dissimilar from Reddit.
&gt; One last tip: map your Caps Lock key to escape! You'll be using the Escape key a lot, and who needs Caps Lock anyway? Happy Vimming! How does one do this?
vim, gedit, pydev + eclipse, pycharm
I found Django, ElementTree, and Bazaar to be particularly good code bases. Also, the algorithms in *Programming Distributed Intelligence* were all written in Python, and written well.
Open source projects can also get free pycharm license for their contributors. Vim ... well, obviously, many people use it very effectively and are very happy with it, but for your specific requests (easier to change settings and "nice graphical interface") coming from **emacs** of all things ... well, vim seems like a pretty weird response to that.
Excuse me, but *real* programmers use butterflies.
This is from 2006.
IDLE can I get a hell yeah!
I'm a fan of Geany myself for editing. upvoted in hopes OP will change title to not end in preposition.
&gt; Vim. Learn it, love it. You'll never go back, I promise. I don't think I ever made it to the "love it" phase, but I learned it, got fairly good at it, but then left it. What bothered me about Vim was: * some editor commands you run from command mode, some from insert mode. Most commands in command mode didn't require the Ctrl key, but some did. Seemed like there was no rhyme or reason for which was which. Keyboard shortcuts in general felt haphazard and inconsistent. * Constantly switching into and out of command mode. Tried, but could not get used to this. Seemed like a nuisance. Personally, I found the Emacs UI to be more sensible (regarding keyboard shortcuts and also Emacs being non-modal). It was easy to learn and also had a gentle learning curve. 
&gt; You don't have to be constantly switching between the editor and the console You'd like Kate
If you're already using an Emacs on Mac OS X, but are not crazy about Aquamacs, you might prefer [a more authentic Emacs](http://emacsformacosx.com/). 
I ended up using rlfe instead. I don't expect rlwrap is much more different. Basically I didn't have to modify any of my code or SML at all. All that was required was making this alias in my .bashrc: alias sml='rlfe sml' The idea is that you just pass any program as an argument to rlfe/rlwrap and it takes care of setting up Readline stuff seamlessly. The rlfe program was available through the Ubuntu repository for me.
Vims
And it has a nice GUI. Install with Homebrew (duh) and then add one of these aliases: `alias vi='mvim'` or `alias vim='mvim'`. You can do both as well, but I like keeping the original `vi` available. You'll have to manually add a .vim directory, and a .vimrc (I did, at least). And for plugins, vimpack or pathogen are great managers.
I have changed the license to Apache License, Version 2.0. Hope that makes it accesible to everyone. Thanks for bringing it to my attention.
PyDev is awful, so...
The guys I work with like Coda as well (paid as well).
 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
I can't say its been useful... I need to stop being a baby and vim it up
[Tornado.](http://github.com/facebook/tornado) Amazing small-sized webserver with asynchronous capabilities. Source code is pretty easy to wade through, full of learning opportunities.
&gt; GPL if you don't actually want people to use use your code A lot of Free Software out in the wild would disagree. And besides, you are wrong on Apache, because it is compatible with GPL 3.
The Twisted codebase is truly well written and also well designed, which I think is almost more important. I learnt an awful lot from reading the twisted code. Also take a look at the divmod products, from the same guys. 
I disagree, I think it's pretty good... See how it is with stating opinions without qualifying them? I can just say the opposite and we are still not closer to a truth.
Another one of those useless examples.
Vim comes with lots of built-in plug-ins (file type plug-ins, indent scripts, etc). but they're all disabled by default for the sake of backwards compatibility with `vi` (which outdates most Vim users by now I'm guessing). The stupid thing is I'm sure a lot of people are scared of by how Vim works just because Vim tries to look like Vi, including all its warts -- if Vim were less focused on backwards compatibility it could gain a lot more users. **Edit:** To see the file type plug-ins installed alongside Vim you can execute the following command inside Vim: :edit $VIMRUNTIME/ftplugin That should get you a list of existing file type plug-ins including the one for Python. These scripts make Vim nicer by customizing it for a given file type. There are also indent scripts, try: :edit $VIMRUNTIME/indent/python.vim To take a look at the one for Python.
Netbeans has a python plugin
Unsure of other methods people use, but I use AutoHotKey create a script with: Capslock::Escape And run it, place it in startup if you like it a lot.
Unsure of other methods people use, but I use AutoHotKey create a script with: Capslock::Escape And run it, place it in startup if you like it a lot.
You dont switch into and out of command mode. You stay there. If you want to edit some text, you might briefly enter insert mode. But you immediately go back to command mode.
Aquamacs is a bit fidgety. I went back to plain ol' emacs: http://emacsformacosx.com/
I'd add CherryPy and Genshi
M-x butterfly
Vim can do all that you mentioned for Python code. * [Python code completion](http://www.vim.org/scripts/script.php?script_id=1542). Note that this is shipped with Vim. * Definition previews can be done in Vim with ctags and what Vim calls the preview window (`&lt;C-W&gt;}` on a tag) * Real-time code checking: [pyflakes](http://www.vim.org/scripts/script.php?script_id=2441) That said Vim doesn't claim to be full featured IDE, I haven't used PyDev much and I don't know what else it's capable of.
It was useful when I wrote it. But, um, time has moved on since then.
I'm on my Linux box at home with Vim open on the right monitor where I've been doing Python work, loving it all the while as always. It really warms my heart to see so many in here loving vim with their Python as well.
I've been planning on building an app in PySide that includes matplotlib graphs. Does this let me do that? There wasn't much info in the link.
You might find [this plugin](https://github.com/Bogdanp/PyREPL.vim) quite useful for Python development if you decide to pick up VIM. /shameless-plug
i mainly(always) use vim. although i've heard good things about wingIDE
Any idea why I have to use Shift+Esc to clear a line in the console? (rather than just Esc in IPython).
* [Videobin](http://videobin.org) (Simple video sharing site, django based) http://videobin.org/code * [Pad.ma](http://pad.ma) current version using turbogears, we are just migrating to django right now. code for current site at http://wiki.pad.ma/wiki/Source next version at http://code.0x2620.org/pandora 
We are not even sure that it will happen. We have a clear roadmap for the next releases (2.2, 2.3 and 2.4) which will bring huge improvements and bugfixes and for now we are totally committed to improving the framework. As TG overrides about 60% of the pylons code we are not really concerned about pylons being "deprecated" and we might even rewrite the remaining 30% without too many problems. Our first concern is not breaking people code while continuing to evolve and improve TG.
Thanks so much! Videobin seems a little more barebones than i was hoping for [= Pad.ma is cool, i think i saw a talk about it at the last Open Video Conference, but i'm looking for something that focuses on user uploaded content and playback, without all that extra stuff. Still, i'll keep an eye on it for other things as it looks interesting
Vim's omnicomplete does not work as good as PyDev's autocompelte. I also could not get the debugger integration via vimpdb running. On the other hand, VIM supports autocomplete with the tab key via supertab. 
Does it only consist of 2 screenshots so far?
Your favorite modules from the standard library. 
Have you got a link to Programming Distributed Intelligence? Google can't seem to find it at all.
Bazaar is awful. Django is not so beautiful too.
Last time I looked at Bazaar, it was java written python...
I'm sorry, I meant *Programming Collective Intelligence* by Toby Segaran. http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/0596529325/
He wanted to see Python in the wild, not beautiful code. Bazaar works cross-platform, has a plugin system, takes full advantage of doc strings, can be built standalone (with the python interpreter embedded), and can actually run its own unit tests. As for Django - well, a better real-world example of using metaclasses appropriately and effectively I haven't seen. And I'd contend that it is beautiful, pythonic code even if you don't agree with their design decisions; they do an excellent job of both documentation and test coverage that most code bases can't begin to approach and they fully understand the Zen of Python.
the best I have read and learnt from is Werkzeug, Jinja, Flask, Tornado and some of the standard modules such as logging. I would add the Google AppEngine API, but the smaller components of it, rather than the more complex parts CherryPy has interesting compatibility modules which are worth reading if you plan on writing an app that is 2 and 3 compat (or needs to work with the older 2's) I would avoid larger projects such as Django, as they can take a while to get your head around
All [pocoo projects](http://www.pocoo.org/projects/) are good reading
I rather like Sublime Text 2
As someone who's trying to get further into Python myself, I'd really appreciate it if the next person to downvote you would attach an explanation.
Thanks for all the responses; I'm going to rewrite the VirtualHost file, the wsgi script and reapply the settings to my httpd.conf file this morning. I'll post them all, as well as my error logs, when I'm done. Another thought I had... If I've installed Django, but then just copy over a project will it still work? or do I need to go through all the manage.py startproject xxxx and rewrite/copy &amp; paste in the new files in the new directory?
&gt;Constantly switching into and out of command mode. Tried, but could not get used to this. Seemed like a nuisance. That's the reason I left vim for emacs
BeautifulSoup — funniest code base I've ever read through. It cracks me up to see Leonard's disdain for parsing HTML grow more and more throughout the code.
My boss hooked up our test team with it. The more I use the GUI, the more I realize just how many neat little features Wing has.
You want the truth? You can't handle the truth! But seriously, here are my gripes: - Stupid default options regarding spacing, spellchecking, etc. - "Perspectives" are completely disorganized and a usability nightmare - Plugins can randomly break the whole program - Cryptic, inconsistent error messages with no foundation in reality - An editor that clearly does _not_ understand Python - Memory hog I could go on, but... I'm not an IDE user because personally, I don't think it's necessary, but PyCharm is king there. I'm an emacs user.
Or emacs it up
Thank you so much! Is this also how I could map W (capital w) to lower case w?
Your underwear.
Why? Are they assigned different functions in the IDE? It's a little bit more involved and I'm just about to leave for a train. Basically, use AHK to read the shift and the Capslock key, if they are down, and W is pressed, then send lowercase 'W'. If they are up, then proceed as normal. Should be 1 or 2 logical read statements... GetKeyState returns 1 or 0 I think, it's been a while since I used AHK for anything 'serious'.
yeah that was the joke
digging it here as well. pydev/eclipse is definitely a heavy weight and somewhat bloated, but it is so great that it is worth it to me. i think you left out the best part though - the debugging. 
You should consider also Netbeans (has matured over the years) in combination with [this amazing vim plugin](http://jvi.sourceforge.net/) (you can install it directly from the plugins menu in netbeans). 
Well, what happens is that I accidentally press "W" rather "w" when I save (write). That's what I mean.
I think most /r readers would rather see someone post a "TIL" post describing some new thing they found on their own. Asking a question that has already been answered elsewhere arguably adds little value. If the OP still wasn't sure which to use, maybe instead asking "I usually print a counter in my scripts and wanted to improve the output. I found these 2 (or more) modules for tracking progress in a script. Could someone give me recommendations?" would result in a much more interesting conversation. See [this article from the Stack Overflow blog](http://blog.stackoverflow.com/2010/10/asking-better-questions/) on asking better questions for more discussion on the topic.
I'm a bit out of the loop. Can someone update me on whats going on? My uni has ubuntu as the standard distro. Ubuntu are slowly dropping support for python 2.x and moving to 3.x with their newest releases. Im still using python 2.6 but when I checked ages ago matplotlib didnt work with python 3. Has this been fixed? This improvement looks great. Looking forward to using it. 
&gt; GA_googleFillSlot(“Articles_6_300x250″); Indeed.
Ahh ok, well, I'm at home now. So when I get a minute then I'll cook something up for you using AHK.
This is great advice, despite the downvotes. There is no better code to read than code you use, because it will pay the biggest dividends on your own programming, and because you know the ins and outs of the code from a usage standpoint already, you're in a better position to understand the implications, good and bad, of the choices the authors have made, and thus to read it with a critical mind.
This was decided to be the default shortcut. I think is not configurable, but if you want it to be please open a bug. Besides, in Ipython you need to use Ctrl+K to clear a line (that's the normal readline behavior)
Very difficult, what would you hope to gain out of such a process?
Check out panda video, it might be just what you're looking for. It's ruby though. http://www.pandastream.org/
You just described the way I feel about the world. I guess you could say you summed my hatred *Pythonically*.
Capital W is quite useful in Vim, why destroy its functionality? Unless you're writing in C or Java (or any language that uses a lot of semicolons), why not [map the semicolon key to a colon](http://vim.wikia.com/wiki/Map_semicolon_to_colon) instead? You can avoid using the shift key for ":w", and retain the functionality of W.
I don't know much about Go (i.e. nothing) but I think it's statically typed language so transaltor would be very hard. Also, python's library is quite huge. Coffeescript isn't much of a language as it is some polished javascript. Either way, they fall in the same class of languages. 
Sounds like I need learn up on Vim some more. I did'nt now W did anything. /shame :-)
Well I would settle for making script that would whitespace significant. func main() { #do something } becomes func main(): #do something
Funny, I'm reading through that book right now. While the concepts are excellent, and I definitely recommend someone read the book, a lot of his code conventions aren't exactly "clean". He doesn't follow pep8, and there's a lot he could do to make the code more readable.
Likely non-trivial but you might consider a golang backend to cython. It currently creates C, and there's a gsoc project for it to create rpython (for cython-&gt;pypy compat.)
I think you've phrased your question wrong and people here are thinking you mean actual Python instead of "a custom language with a syntax style similar to Python".
I'll edit the text.
Check out cython which compiles a subset of python via C for an idea of how complex a project like this would be... a go version might be a little simpler due to go's built in garbage collection and maps. Actually you might consider just using cython on your python code and figuring out some way to interface with the resulting compiled code from go. This would give you compilation/faster execution of your python code and the ability to use goes concurrency features to manage the whole thing.
I checked not too long ago and there's still no support in matplotlib for 3. A quick check of the repositories suggests the same. Version two can usually be installed concurrently as python2, though.
What you want then is a python-like syntax for go. A bit like [Boo](http://en.wikipedia.org/wiki/Boo_\(programming_language\)) and C#, or [Genie](http://live.gnome.org/Genie) and [Vala](http://en.wikipedia.org/wiki/Vala_\(programming_language\)).
The main python 3 branch is here: https://github.com/matplotlib/matplotlib-py3 It still has a ways to go, but it generally works for most plots on linux, in my experience. I believe there hasn't been as much work porting the other (e.g. Windows, OSX, etc) OS-specific code yet. I could be entirely wrong there, though. I've never tried to build it on windows or OSX.
Their "Learning Python" book always mentioned differences between Python 2 and 3. It was mostly a blurb here and there explaining the differences in how the versions handled things, does "Programming Python" keep to this style?
I use IDLE, and Eclipse with PyDev.
[SublimeText 2](http://www.sublimetext.com) plus some plugins: SublimeRope or SublimeCodeIntel (a port from Komodo IDE/Editor), and SublimeLint (PEP8 + pyflakes for "realtime" checking).
video: http://ep2011.europython.eu/conference/talks/5-years-of-bad-ideas
And now the page is gone? 
I put on my robe and wizard hat...
Actually, pyside support has been added to the matplotlib qt4 backend: https://github.com/matplotlib/matplotlib/pull/80 It appears to have only been merged a few days ago, though. It won't be in any of the released versions yet.
 hg clone https://matplotlib-qt4mod.googlecode.com/hg/ matplotlib-qt4mod There doesn't seem to be anything here.
I hope I wasn't the only one to lol at "HURRRRRR". 
Your blog has to be the single best thing I've found when it comes to learning Python (besides your book)! The fact that the book and the source code from your blog are for games really helps me stay focused. I'm sick of all the "toy" applications other books teach. It's very refreshing to see a completed program/game for once. And, for that reason, your material is a breath of fresh air, good sir!
I'm going to be grinning like an idiot for the next forty minutes. :D
Right. That's what I *was* doing. Still too much switching back and forth. For example, while in insert mode: want to delete the last 2 words you just typed? Exit to command mode, hit a couple keys, back to insert mode to type some more, back to command mode to think... Not my cup of tea. If it works for you, more power to you. I found it a hassle.
It really is quite nicely written (and btw it Just Worked™ on the first attempt!), having never played Bejeweled I didn't know what to do but by reading the source I was able to figure it out quite quickly. Scored 42 :P Also, I love lines like this: random.choice(GAMESOUNDS['match']).play() Could it be any easier? :)
Oh thanks, it was a config issue. I had some conflicting indentations.
I'm hoping its a good matlab equivalent. I love pylab for that, but matlab is really great for debugging and watching variables. I'm hoping this is the best of both worlds for me. (ugh, still compiling on macports...)
Thanks for all the precious feedbacks :(
You could write a preprocessor that turns indentation into whatever Go uses (braces?).
Careful, EA is buying Popcap. Expect a Cease &amp; Desist ;)
Check out Sublime Text 2. It's excellent.
Thanks, but that's just for transcoding, not a video platform like Kaltura or YouTube at all. 
Nice! But: Why not just use `glob` for the gem images and match sounds? This way people could just throw in their own images and sounds and have it Just Work. Ditto for `GEMIMAGESIZE`, could well read that from the first gem image loaded (and resize the rest as you are).
i'm really happy with vim (including python, ruby, rails and groovy plugins with railscasts and desert colorschemes) and gedit (with many plugins).
I wanted to keep the code as simple as possible, hence why I don't use OO or list comprehensions. And why I use a bunch of global variables.
Why would you use netbeans for python (or any non-java) development? 
It'd be cool to have an "advanced" version of it so that people can look at the two and see how things change as you get more familiar with Python features.
That's a pretty good idea, actually. My plate's kind of full though as it is. I throw up a lot of this code up on github if others want to take a crack at it: https://github.com/asweigart
Ever since I started my internship I've had far less time to do anything, but I'll see if I can take a look this weekend - it looks like a fun project!
-
Yeah, you would have to create your own front end to display and let your users choose videos to watch, but Panda gives you the elements to upload/transcode/stream which is nice. I also like the project because it's distributed as a fully functioning EC2 image and is reasonably easy to get started with.
The file lacks a shebang line, so "./gemgem.py" won't work because it doesn't know to use Python instead of your shell. You have to do "python ./gemgem.py" (Or add a shebang line to gemgem.py) 
or you could write a book on geodjango
Yeah, thanks for the tip. I used Zencoder this weekend, but it's proprietary SaaS
Hey! I just started learning python this week and I'm pretty excited to see this and then ecstatic to see you have a whole blog of this stuff. Thanks so much, this will be super useful.
-
Netbeans is a complete IDE and like Eclipse, you can use it with mainstream languages. Here's more [detail about netbeans and python](http://wiki.netbeans.org/Python). 
Nice find. My 9 yr old daughter is currently working through your book, learning Python. This will be a great addition to the other chapters in the book.
Using BeautifulSoup, this seems rather trivial. But maybe I'm missing something.
unrelated to this subject, you just made my day! I didn't know how to for i, data in enumerate(thing): but now, I know that enumerate() is a thing, and how useful it looks!
unrelated to this subject, you just made my day! I didn't know how to for i, data in enumerate(thing): but now, I know that enumerate() is a thing, and how useful it looks!
unrelated to this subject, you just made my day! Before just now, I didn't know how to for i, data in enumerate(thing): but now, I know that enumerate() is a thing, and how useful it looks!
I think Spyder has better integration between Ipython and the editor, but I couldn't tell for sure because I've never used Kate (although I use Kwrite a lot)
This looks really good material for this Saturday's afternoon! I've been learning Python since approximately a month, and making games has always been a personal objective of mine, so this looks very interesting indeed!
The word on the street is that if you use Python, most things are trivial... (grin)
On the street, on the wall, off the wall... Yep, Python is my goto language for getting stuff DONE.
Looks like it has been [renamed](https://bitbucket.org/mulonemartin/web2tools). It also appears to be included in [this](https://bitbucket.org/mulonemartin/bottleboilerplate/overview).
Original link doesn't work any more -- here's the [new link](https://bitbucket.org/mulonemartin/web2tools).
Thanks, I'll try: If you were building a web site which would take information form a form from several participants and perform pythonic operations upon that information, would you store and retrieve the information in and from a MySQL database, or a CSV file, or would you recommend a different approach?
User shlashla made a reddit version: http://imgur.com/DQmz0
Any chance we can get you to update it? Hopefully without &lt;br&gt; after every line of the code? *grin*
 imap &lt;ctrl&gt;w &lt;esc&gt;bdwa Or you could use the emacs/everyothermoroneditor method - hammer on 'backspace' until all the letters are gone... 
Yes - I thought about it and started working on it. Its up on bitbucket under vigo.
[Relevant](http://groups.google.com/group/comp.lang.python/msg/5abc6cb11de7c42f)
&gt; I'm going to rewrite the VirtualHost file, the wsgi script and reapply the settings to my httpd.conf file this morning. I'll post them all, as well as my error logs, when I'm done. No. Read the error log first. then fix the problem. &gt; manage.py startproject xxxx What exactly do you think this does?
&gt; What exactly do you think this does? Makes the Internet work. 
In Emacs I use Alt-Backspace to backspace-by-word. 
I would love to do this, but I have to sleep now, and tomorrow is [Reddit Meetup Day](http://www.reddit.com/r/LondonSocialClub/comments/hoy2z/global_reddit_meetup_day_june_25th_2011/?sort=new), so, outlook not so good. If it gets to be the 27th and no-one has done it yet, I'll take a shot at it.
Assuming you can use Python's token parsing rules, you could use the 'tokenize' stdlib module to do your initial parsing. It issues INDENT and DEDENT tokens that you could turn into braces, and it handles Python's line continuation syntax (including parenthesis handling), multi-line strings, etc. (You'd need to do some re-coding of Python strings to match Go's syntax rules, of course.) The tokenize module also tells you the original line location of each token, so you can use that info to track whether your output is happening on the same line numbers (so your Go development tools will identify the right lines of Python). 
I use Textmate and love it, but I haven't tried that many different choices (I use emacs sometimes, but my emacs-fu is weak, and I know nothing of Vim). I dislike Eclipse with a possibly unreasonable passion*, and PyCharm is well-designed and relatively fast, but generates some spurious "maybe-could-be-an-error-but-frequently-isn't" sort of underlining that I find very distracting. In TextMate, I've installed the PyFlakes, Pep8 and Ack-in-project bundles. The former two are useful python bundles, the latter is just better functionality than the unreliable built in search-in-project functionality. The Command+T open file dialog is so freaking quick and useful that I use it instead of tab switching. I'd say it's definitely worth the money. * (Re: eclipse) I can't begin to understand how people use such a poorly designed interface. It's surprisingly difficult to change basic functionality like the color scheme, and the hotkeys are extremely numerous and seem to have been picked at random. For example, I think Control+Shift+3 is an important hotkey in writing Java code (I think it autocompletes). WTF? As I said, my hatred of Eclipse is probably irrational since so many developers swear by it--there must be something amazing that I'm not seeing to make up for its absolutely awful UI design.
Agreed: Collective Intelligence does not always do things in the most pythonic way. Although OP could learn a lot by trying to convert that code into idiomatic python.
[http://tinyogg.com/](http://tinyogg.com/)
I haven't looked at the code, but playing it I think I found a bug. :-) Do you check for multiple simultaneous matches? I was in a position like this &gt;...a...... &gt;A....a.a &gt;...a...... ...and moved the capital A to the right. It matched against the vertical 3, but not the horizontal 3. (Edited for formatting the ASCII board.)
You have `__getitem__` and `__setiteim__`: http://docs.python.org/reference/datamodel.html#object.__getitem__
getitem() is what you're after.
thanks
thank you!
Done this a while ago. In 50 lines: http://jmk.pe.kr/pages/read/writings/cs/wikipedia-convergence Lousy code, I admit..
Wow, this actually looks really cool. However, I ran into a few problems, like the it trying to create the repl in the current buffer rather than creating a new buffer and the buffer not closing when you quit the repl (unless that's intended).
6 degrees of wikipedia - relevant: http://www.netsoc.tcd.ie/~mu/wiki/
The trick is getting the first link not in italics or parenthesis. I tried something similar in Ruby a few weeks ago but got stuck when I couldn't build a regex reliable enough to work 90% of the time. What needs to be done is something like [this](http://www.cs.hofstra.edu/~cscccl/csc16/lab8parens.txt), correcting for unclosed parenthesis.
Using BeautifulSoup, this seems rather trivial. But maybe I'm missing something. [pertinent #EANF#](#EANF#).
19 mb zip on mediafire. Not clicking. Maybe if your code was on [github](https://github.com/) I'd at least look at it.
Are you kidding me? I exported a runtime using blender.
Well I'm on a mac so I guess it doesn't matter :)
You can use blender 2.58 and load the .blend :D 
It's so worth it.
if you made I video I'd find the effort to watch it &lt;/lazy&gt;
i literally said "no" outloud while clicking out of the window
This has already been done, multiple times. The problem in general is you have to ignore things like the geocoord templates and infoboxes. Thus, you cannot rely on using the pre-generated list of links (either from the API or database tables) but must parse the wikitext yourself. If I were to do this I would use the Yahoo! snippets download (which iirc have the first paragraph of every article) and then find the first link in the wikitext that is not contained in {{}} or () (either by actually parsing the text, stripping templates and such aggressively, or just making your regexp check for it). One example (that actually follows the rules as I understand them): [blog](http://www.kevinstock.org/2011/05/following-the-first-link-on-wikipedia/) [src](https://bitbucket.org/teoryn/wikipedia-first-link) e: Actually, the Yahoo! snippets do not include the links that I thought they did.. just section headers and categories it seems. 
I think the term you're looking for is [mutability](http://en.wikipedia.org/wiki/Mutability#Python).
For what it's worth, itertools() provides all the tools required to implement `enumerate` (and even a better `enumerate`) via `izip` and `count`: for i, data in izip(count(), thing) Why's it better? Well first you don't have to start from 0, whereas `enumerate` gives you no choice: for i, data in izip(count(57), thing) # will start counting from 57 Second, through izip you can iterate on multiple collections without needing an internal indirection (with `enumerate`, you'd likely zip your collections and enumerate on the result, yielding a tuple as second element): for i, data1, data2, data3 in izip(count(), thing1, thing2, thing3) versus for i, data in enumerate(count(), zip(thing1, thing2, thing3)) data1, data2, data3 = data
Well, if you want you can just make a script with: +w::Send, w In AutoHotKey, but it'll still send something 'W' if you have the capslock enabled, but if you're using the: Capslock::Escape From before, it shouldn't matter. Also, you can chain remaps in AHK scripts. So: +w::Send, w Capslock::Escape In the same script. 
&gt; macports elsewhere you can just apt-get and your done...
I like Komdo Edit for Python and HTML, but there aren't many other languages supported. Whenever I want to try something new, all the syntax highlighting files are only available for Emacs, Vim, TextMate, and Gedit. Even Go (2009) isn't supported.
&gt; Well first you don't have to start from 0, whereas enumerate gives you no choice: It does (since Python2.6) for i, n in enumerate(range(10), start=10): print i, n 
[@property decorator](http://docs.python.org/library/functions.html#property) 
I never considered how complex the code must be for MMORPG's. Interesting read. I haven't heard of anywhere using Stackless Python except Eve Online. Why doesn't anyone use it?
The usual answer is that if you have no real understanding of the pros and cons then just do whatever looks easiest. If you're just storing a load of data with the intention of reading it in later in one big go then the way you store it makes no real difference at all.
&gt; In fact, your condescending remark of 'ask Google', many times leads to StackOverflow forums which are not too dissimilar from Reddit. ...where the question is already answered, and thus doesn't need to be asked again. Lots of us enjoy helping others with interesting programming questions, but that enjoyment is diminished if we get asked the same thing over and over again. That means we stop reading the sites where this happens, and everybody loses out.
ahhhh! my brain! I think I'll have to bookmark this for later so I can think about it when I'm a better programmer
ummm simple workaround if you want something to start from a higher number: add that number to it when you use it if you want to go through multiple things, you may as well do it that way.. but I guess I see your point, especially because it will get confusing when you want to do BOTH of those
Zap, Your question is completely legitimate because the strategy of googling for the correct answer tends to break down when you simply don't know the correct term to google. :-) Others have already pointed out that you want `__getitem__` which solves your immediate problem, but I would like to take a moment to give you some hints as to how in retrospect you could have figured this out for yourself in order to give you a sense as to how you might answer similar questions for yourself (or others) in the future. If you haven't already figured this out, it is worth noting that that the real treasure trove of information is the (previously linked) page http://docs.python.org/reference/datamodel.html and specifically the section "Basic customization" which contains not just `__getitem__` and `__setitem__` but *all* of the "special" methods that you can use for operator overloading. The list is short enough that if you have a vague sense of what you are looking for you can just do an exhaustive search and read through the whole list to see which method has the behavior you want. Alternatively, suppose you have some model object which has a behavior that you want in your own class -- e.g., subscripts in your case. You get a hint as to what method you could implement to get this behavior by getting the full lists of methods of the model using "dir": &gt;&gt;&gt; x = [1,2,3] &gt;&gt;&gt; dir(x) ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] Now you know that the method you need to define to implement subscripts must be in this list, and in particular after eliminating most of the methods that don't look like they have to do with subscripting you would most likely conclude all by yourself that `__getitem__` and `__setitem__` were the culprits. Anyway, to be clear this discussion was not meant to berate you for posting a perfectly legitimate beginner question (since where to look for this kind of information isn't a priori obvious!) but just to empower you to have a better sense of how to figure these things out for yourself in the future.
One more piece of information: When the user calls x[0:2], then the `__getitem__` method is called with a "slice" object, which you can read about at the previously mentioned treasure trove page http://docs.python.org/reference/datamodel.html under the section "slice object".
Here's what I would do: 1. Read the Ruby code. 2. Write what it does in Python. Crazy, I know. But it just might work... In all seriousness, I don't think there's a way to automagically generate python from ruby. If you have any specific problems during the porting, let us know!
Let me get this straight. You have working code in Ruby. You want to port it to Python, yet you don't know how to program in Python. How on earth does this make any sense? Learn Ruby. Or learn Python. Or better yet go to college and get a proper CS degree and buy UNIX Network Programming by Richard Stevens
That is one limitation that I left in to make the code easier. It'll detect horizontal AND vertical matches of 3 or more identical gems, but in your case, it will only match the horizontal OR vertical (whichever it matches first, because it disappears the gems after the first match, and then the other direction only has two gems.)
I'm pretty sure that .write() returns None. Try moving that call to its own line: output = open(to_file, 'w') output.write(input)
with open(input_path) as f_in: with open(output_path, 'w') as f_out: contents = f_in.read() f_out.write(contents)
Use the with keyword when opening files. The filehandle closes after exiting the with block. [Python docs explanation](http://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects) import sys from_file, to_file = sys.argv[1:] with open(from_file, 'r') as f: input = f.read() print "The input file is %d bytes long and has been copied." % len(input) with open(to_file, 'w') as f: f.write(input) http://pastebin.com/9U4DtiKT edit: Here's a short repl session that demonstrates it: &gt;&gt;&gt; with open('.bashrc', 'r') as f: ... infile = f.read() ... &gt;&gt;&gt; f.closed True 
I had started writing something in scrapy. I'll make the github repository public if anyone is interested. https://github.com/ciferkey/Philosophy
To keep in mind. You script is loading the whole file in memory. If the file is big your computer will start swapping and may crash. input = ...... output = ...... buffer_size = 1024 * 64 while True: buffer = input.read(buffer_size) if not buffer: break output.write(buffer) # close input and output if you are done 
I've sometimes found it useful to have a class that inherits from list.
Just so you know, when you use the 'with' statement in this case, the file gets closed automatically once you leave the with-block. 
You seem to have a conceptual misunderstanding. input and output are not file objects. input = open(from_file).read() print "The input file is %d bytes long and has been copied." % len(input) output = open(to_file, 'w').write(input) input.close() output.close() These lines input.close() output.close() make me think that you expect input and output to be file objects, but they aren't. Here's why: This line input = open(from_file).read() actually does a couple things. It calls open(from_file), which returns a file object, and then it calls the read() method on that object. It is sort of equivalent to f = open(from_file) input = f.read() The only difference is that you never create f, you use the return value of the open() function as an anonymous object. This is bad for a couple reasons, (1) for handling large files, you'll want to do some sort of buffering, which would require a reference to the file object and (2) python doesn't automatically close files until the file object gets deallocated by the garbage collector. If there are no references to the object, then this will happen... eventually. However, if there are dangling references to the object, then the object will never get deallocated, and the file will never get closed. On a production system where the program may need to run for a long time or perform many file operations, this could be a problem because each file opened requires a descriptor. The number of descriptors is usually fairly limited. Anyway, that's getting a bit too deep, so let's look at your code. This line output = open(to_file, 'w').write(input) is very similar to the line where you read the file, except the file mode is different and you're telling it to write the contents of input to the file. The other difference is that write() returns None. That's where your NoneType error is stemming from. It's actually kind of puzzling why you're trying to write input to the output file when you're treating input as a file object later in the code. But that's part of learning. So, here's your code, rewritten to do what you intended: input = open(from_file) data = input.read() input.close() print "The input file is %d bytes long and has been copied." % len(data) output = open(to_file, 'w') output.write(data) output.close() Now, here's the code, written to be more pythonic: with open(from_file) as input: data = input.read() with open(to_file, 'w') as output: output.write(data) The with blocks automatically close the files for you when they exit. This solves the problem of not freeing up system resources and is also useful for cases when exceptions can be thrown. EDIT: Slight formatting issues.
This is the correct answer. Using "with" is a good recommendation, but the op's problem is that he's not setting "output" to a file, he's setting it to what .write() returns (which is none). c:\Users\rwparris2&gt;python Python 2.7.1 (r271:86832, Nov 27 2010, 17:19:03) [MSC v.1500 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; output = open('blah.txt', 'w') &gt;&gt;&gt;print output &lt;open file 'blah.txt', mode 'w' at 0x0000000002AB6270&gt; &gt;&gt;&gt; output.close() &gt;&gt;&gt;print output &lt;closed file 'blah.txt', mode 'w' at 0x0000000002AB6270&gt; &gt;&gt;&gt; output = open('blah.txt', 'w').write('some input') &gt;&gt;&gt; print output None
What's the advantage of using: with open(to_file, 'w') as f: f.write(input) as opposed to the shorter: file(to_file, 'w').write(input) ?
Well I would settle for making script that would whitespace significant. func main() { #do something } becomes func main(): #do something [pertinent Python Algorithms: Mastering Basic Algorithms in the Python Language (Expert's Voice in Open Source)](http://www.amazon.com/gp/product/1430232374?ie=UTF8&amp;tag=idenprop-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=1430232374).
Isn't StackOverflow a better place for this question?
Pythonic (: You could even do with open(input_path) as f_in: with open(output_path, 'w') as f_out: f_out.write(f_in.read()) 
Python comes with a module for copying files 
Take a look at Boo ( http://boo.codehaus.org/ ) it is like a statically typed python for CLR. Also take a look at Shedskin which does static type analysis and converts the python program to C++. http://shed-skin.blogspot.com/ ---- It shouldn't be terribly difficult, maybe 2 months of fulltime work to get a basic version working. I say go for it.
http://docs.python.org/library/shutil.html
Good explanation, well written. Upcode!
The former way closes the file automatically when the interpreter exits the with block. The latter will close the file when the garbage collector decides it is time to deallocate the object. This would probably not be an issue in a simple problem like this, but in production systems or programs that perform a lot of file IO, you may run out of file descriptors in the operating system. In general, good etiquette is to keep files open only as long as you need them.
What an awesome, well written, detailed answer. Is this Stack Overflow? 
Thank you. :) No, not SO, but I do participate over there as well. I like helping regardless of where I'm at. 
[This](http://docs.python.org/dev/library/stdtypes.html#str.format) should get you straightened out.
His format function works if you use variables assigned in the script but it doesn't while getting input from the user. 
I'd say it has something to do with encoding. Python 3 has never liked it when I run scripts in a console on windows because of the encoding difference. Python 2 seems to just convert everything to ASCII and Python 3 doesn't. I tried your script on my windows machine and got the same problem you have but when trying on my Linux box it works perfectly. Edit: This is a wrong assumption... please read my reply to this comment
I'm pretty sure that .write() returns None. Try moving that call to its own line: output = open(to_file, 'w') output.write(input) [pertinent Beginning Python: From Novice to Professional](http://www.amazon.com/gp/product/159059519X?ie=UTF8&amp;tag=polidebanews-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=159059519X).
Here is the problem and I have confirmed it. The input() function does not strip '/r' from the strings so when you try to write the output the \r for each variable is put into the output. '/r' tells it to return to the beginning of the line. So, it returns to the beginning of the line and overwrites the previously written output. http://mail.python.org/pipermail/new-bugs-announce/2011-March/010263.html Edit: if you strip the '/r' it works fine... http://pastebin.com/XvB5CwCK
edit: thanks!!!! you have saved me. 
Yes, it does. You can verify with some quick debug print statements. output = open(to_file, 'w') ret = output.write(input) output.close() print 'Return from write was:', ret, 'type was:', type(ret) This should output: Return from write was: None type was: &lt;type 'NoneType'&gt; 
Is it generally preferred that people use a with statement when doing something like that? What benefits does it have over using a variable to store input? Is it just that the GC cleans up input faster?
Simplicity. Consider trying to handle errors... try: output = open(to_file, 'w') try: output.write(data) finally: output.close() except IOError,e: print e except: print 'Unknown error' This code has an outer try block that handles all exceptions. Inside the body of the outer try, it opens a file. Now, if the open fails, then the exception gets raised to the except blocks of the outer try. If it succeeds, then the code enters the inner try block. It tries to write data to output. If this fails, then an exception is raised. This inner try block doesn't actually handle any exceptions, but it has a finally block. This will ensure the file closes and it will only execute if open has succeeded. If the write succeeds then the finally block will still get executed and the file will close properly. Here's the equivalent using a with statement: try: with open(to_file, 'w') as output: output.write(data) except IOError,e: print e except: print 'Unknown error' Easier to understand, IMO. The try block handles all the exceptions, and the with block ensures that the file is closed if and only if the open succeeds.
I feel is hard to configure a website all at once, normally I do these steps: 1. Run django on dev mod on a port on the webserver, see if you can access that port. 2. Install a easy webserver like gurnicorn, make sure again that this is working by checking the port. 3. Serve on an internal port with Gurnicorn and map that to apache.
`rstrip` is a bit heavy handed (e.g. you might want to keep trailing whitespace). `replace` is a bit more surgical: height = input("How tall are you?").replace('\r', '') This problem should only show up with stdin in a win32 console. If you're using a GUI shell (e.g. IDLE, IEP, Pythonwin), you should be OK. 
The word on the street is that if you use Python, most things are trivial... (grin) [suitable Python Programming for the Absolute Beginner, 3rd Edition](http://www.amazon.com/gp/product/1435455002?ie=UTF8&amp;tag=polidebanews-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=1435455002).
I did not expect this! Thank you!
The missing ones will be available in the next days. [See you next year](http://imgur.com/1Ah7Q).
Awesome!
In PyGame the graphics are not hardware accelerated so you don't get much benefit of batching stuff up, and as far as I know there is no distinction between a 'sprite' and an 'image' - it's just a 2D lump of data that is copied to the graphics card. To improve performance you just need to be doing as little of this as possible.
Reddit allows me to give only one upvote. :(
A few more essentials (speaking as a professional physicist): * Traits (this is a biggie. Take the time to investigate if you've not used it before) * VTK/Mayavi * Chaco (Traits-based application plotting library) * Cython * PyTables / PyHDF5 * SQLAlchemy (if only more engineers learn about databases...there'd be fewer Excel spreadsheets in the world and that gotta be a good thing) * IPython I'm not so sure about Sage for engineers. It's very math-oriented and actually not that productive for engineering problems. It introduces a lot of mathematica-inspired ideas which clash slightly with the basic python / OOP world-view. For engineering numpy/scipy is a better basis. I write most of my GUIs using Traits these days but you might want to include a GUI toolkit directly. Only two choices make sense: PyQt/PySide and/or wxPython. Finally a few application-specific things I've had good experience with: * MDP (http://mdp-toolkit.sourceforge.net/), machine learning * PythonOCC (3D CAD kernel) * FiPy (A general solver framework for PDEs based on the Finite Volume Method - http://www.ctcms.nist.gov/fipy/) BC
Additionally: * IDEs: [IEP](http://code.google.com/p/iep) (supports Python 3) and [PythonToolkit](http://pythontoolkit.sourceforge.net) * Compilers: [PyCUDA](http://documen.tician.de/pycuda), [PyOpenCL](http://documen.tician.de/pyopencl), [Boost.Python](http://www.boost.org/doc/libs/1_46_1/libs/python) (C++ interoperation) * IPC/RPC: [xmlrpclib](http://docs.python.org/library/xmlrpclib.html), [multiprocessing](http://docs.python.org/library/multiprocessing.html), [RPyC](http://rpyc.wikidot.com), [Pyro](http://irmen.home.xs4all.nl/pyro3), [Twisted](http://twistedmatrix.com), [pyzmq](http://www.zeromq.org/bindings:python) Enthought's [topical software](http://scipy.org/Topical_Software) lists many more tools for visualization, publishing, optimization, equation solvers, MATLAB interfaces, parallel/distributed computing, and data storage. You can also [browse PyPI](http://pypi.python.org/pypi?:action=browse&amp;show=all&amp;c=385). Also, Christoph Gohlke has compiled many [extension packages](http://www.lfd.uci.edu/~gohlke/pythonlibs) that may be of interest to Windows users. For electrical/electronics engineering check out [ahkab](http://code.google.com/p/ahkab) (a SPICE-like simulator), [MyHDL](http://www.myhdl.org/doku.php), [mwavepy](http://code.google.com/p/mwavepy), and [PyVISA](http://pyvisa.sourceforge.net). 
Surely Excel is the greatest thing in the world?! Hell, if they'd just learn more about associative arrays, things would be a lot better. Oh, wow, I hadn't found good documentation on FiPy. That's great. And a CAD kernel, excellent. I agree with you on Sage. It could be useful, but there's a bit of dissonance there. It's kind of sad, though. Computer Algebra Systems are so very useful and many engineers don't grok them at all. I think MayAvi is now distributed with SciPy, for what it's worth. Thanks for the excellent list!
Uncertainties is an excellent package for handling standard deviations. It allows you to do any calculation as you would normally do, and it handles the standard deviations for you. Best thing is that it works great with Numpy arrays as well.
Thanks! 
I know, that's the biggest thing I miss from using ubuntu/debian. Fink doesn't have enough updated repositories, and macports has to compile every damn thing. Tis the price I pay for drinking the kool-aid, though.
Well, just slap her like you love her. Heavy handed isn't a problem then. No, you're right. It's better to take a conservative approach. 
Could you please explain more on why Traits is important to you? After reading their webpage, it seems to add features of statically typed programming languages to python. If you need static typing, wouldn't you be better off using another language?
For some reason I read that as "Eurovision" and wondered why the hell anyone would care...
Can you explain Traits please?
If they are bioengineers, BioPython is great.
`scikits`, e.g.: * `scikits.learn` * `scikits.statsmodels`
why ?
Programming Python, Fourth Edition - but I can't vouch for its quality.
The flash player won't start the video for me. Tried using Opera and Firefox. Then I decided to download the video. The download was interrupted few times. When it finally finished I tried to play the video and it was just some seemingly random noise. There was no audio as well. What could be the problem?
Thanks for the videos, I wish the audio quality was better though.
The Python Oreilly online class that's part of their certification covers Tkinter in python3. It also comes with [Python in a Nutshell](http://oreilly.com/catalog/9780596100469/#toc) that covers Tkinter. The benfit to getting both is that with the class you can ask the instructor questions about anything not just what's in the syllabus.
I am a computer scientist and I like sage, though I don't actually use sage, just the IPython bundled with sage. It's got a pretty complete and pretty [up to date collection of python packages for scientific computing](http://mirror.yandex.ru/mirrors/sage.math.washington.edu/spkg/standard/). You can just use sage -ipython and it just comes up as IPython. Moreover installing other things is pretty easy. Be warned that getting VTK/Mayavi and the rest of the Enthought packages working on a python distribution that is not the "Enthought Python Distribution" can be a huge pain in the ass. Not saying it isn't worth it, these tools are great, but can be hard to get running. Or at least they have been for me. One more plug. The best network analysis/graph theory toolkit around is [networkx](http://networkx.lanl.gov/). It isn't insanely fast or memory efficient (though for a nearly pure python package it is amazingly well executed), but it does have a huge collection of algorithms, generators, and a great API.
Would releasing a torrent for these be out of the question? Save you some bandwidth and save everyone some time.
Second. I'm downloading a video at dialup speeds.
The **TkDocs** tutorial at http://www.tkdocs.com/tutorial/index.html is good. Uses python3 and tk8.5+. They have all the example code inline in each of Tcl, Ruby, Perl, Python but you can choose to show only the Python inline.
There's also an event driven component, I noticed. You can change one value in an object and have other values automatically update as a result. It's interesting, but the benefits aren't clear to me. (I'm not BC, I'm the OP).
**Books** I suggest getting the Manning Tkinter book. Book Website (Samples Chapters, Code, Author Forum) http://www.manning.com/grayson/ **Links ** http://www.ferg.org/thinking_in_tkinter/index.html http://infohost.nmt.edu/tcc/help/lang/python/tkinter.html article on event driven programming http://eventdrivenpgm.sourceforge.net/ http://www.pythonware.com/library/index.htm http://www.tkdocs.com/ **Videos** http://www.newthinktank.com/2010/11/python-2-7-tutorial-pt-18-chat-server/ 
What are the recommended/best ones?
I've only played around with Traits (and Chaco) a little bit, but for me, the notable component of Traits is its UI. Basically, you can specify the attributes for a class (this is where the static-typing mentioned above comes in), and then you get a UI for free. So let's say I have a simulation with a number of parameters to adjust: I can create a Traits class with all those parameters as class attributes, then I get a GUI for adjusting those parameters "for free". [For example](http://drliddle.com/index.php?option=com_content&amp;view=article&amp;id=14:quicktuttraits&amp;catid=3:tutorials&amp;Itemid=6) P.S. I second bryancole's suggestion of IPython
Just be aware that the Manning book came out in 2000, when Python 3 (aka Python 3000) was more of a joke than a planned release. You'll be targeting a much older 2.x release and will probably have to do some massaging of the code to get it to work properly.
Well, to change the subject a bit: why not [freebase](http://wiki.freebase.com/wiki/Developers)? e.g.: * [Films of Stanley Kubrick](http://www.freebase.com/view/en/stanley_kubrick#film)
I can't speak for pip, but I've always used easy_install and have never had an issue. try that instead. also I would recommend you use a reliable *nix platform
For the sake of sanity, this is why I always take advantage of [using file objects as context managers via `with`](http://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects)
is the logo a rainbow? :p
I was just looking for a snippet like this, thank you (:
Now that's just awesome. As for IPython, I think most of the class is using it already.
tried easy_install, distribute &amp; pip. No luck As the other code tools are Windows only, *nix/mac are out of the question. 
I'm not using Windows but generally it's easiest to get a Windows installer for the library. For *nix systems, easy_install/pip are easy but they're not as reliable on Windows. If you can't find an installer, download the tar.gz/zip, extract, and run setup.py install at the root. This should install it. Finally, if none of this works, you could install Cygwin with Python. I'm assuming easy_install and pip would work better with Cygwin.
[buckingham](http://code.google.com/p/buckingham/) is a small one file library to do error propagation and unit conversion and both. Not on the same level as numpy but works well at what it does. 
Because freebasing is addicting and dangerous. Sorry, that was a campy one.
I actually did use 'with' in the code, but there were two nested file loops and I didn't feel like using it twice in a row. That's mostly because the code already had fairly deep indentation, but it's still not a good excuse not to use the 'with' keyword.
would fit, magic ponies, unicorns, and the name.... it has to be done
http://code.google.com/p/oauth -- Is it this one? If so, it seems to work with easy_install: C:\Users\wahaa&gt;easy_install oauth Searching for oauth Reading http://pypi.python.org/simple/oauth/ Reading http://code.google.com/p/oauth Best match: oauth 1.0.1 Downloading http://pypi.python.org/packages/source/o/oauth/oauth-1.0.1.tar.gz#md5=30ed3cc8c11d7841a89feab437aabf81 Processing oauth-1.0.1.tar.gz Running oauth-1.0.1\setup.py -q bdist_egg --dist-dir c:\users\wahaa\appdata\local\temp\easy_install-lfr9y3\oauth-1.0.1\egg-dist-tmp-zuhipb Adding oauth 1.0.1 to easy-install.pth file Installed c:\python27\lib\site-packages\oauth-1.0.1-py2.7.egg Processing dependencies for oauth Finished processing dependencies for oauth C:\Users\wahaa&gt;python Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import oauth.oauth as oauth &gt;&gt;&gt; dir(oauth) ['HTTP_METHOD', 'OAuthClient', 'OAuthConsumer', 'OAuthDataStore', 'OAuthError', 'OAuthRequest', 'OAuthServer', 'OAuthSignatureMethod', 'OAuthSignatureMethod_HMA C_SHA1', 'OAuthSignatureMethod_PLAINTEXT', 'OAuthToken', 'SIGNATURE_METHOD', 'VE RSION', '__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__pack age__', '_utf8_str', 'binascii', 'build_authenticate_header', 'cgi', 'escape', ' generate_nonce', 'generate_timestamp', 'generate_verifier', 'hmac', 'random', 't ime', 'urllib', 'urlparse'] 
Agreed, I've used it to plug in covariance matricies from scipy least-squares fits and you can plot the fit function as well as fit uncertainty. It even works for nonlinear models, as long as you register the function with the module.
Thanks, that it a different source for it, that may fix the issue. 
Especially given the alternative (if you want to be correct in all cases) is to use a try/finally (in case something raises) which also adds a level of indentation. NO EXCUSES!
Sounds like an awesome idea. Btw the command for running the script is "fab fab" but in mind I say "fab, fabulous" :p
I am looking forward to trying this out. Thank you.
oauth2 is the library you want. It's not "oauth 2.0" the specification but a re-implementation of oauth in Python. use 'pip install oauth2' Also try to stay with pip/distribute as they are the way forward for python package management.
See my other comment. You want oauth2, as it's much better and maintained. Note: distribute is not the same as easy_install/pip. It's more of a replacement for setuptools which is used by the package authors.
Same here.
Why does it seem like a lot of python devs hate blank lines? I kinda feel like if your code had a blank line after the loop and after the test assignment, you probably would have caught the bug sooner
lies
In the actual code, there was indeed a blank line there. I summarized the script for the sake of conciseness; and either way, it's not that I didn't notice something was missing, it's that I had completely forgotten about the issue of buffering.
Wait a second. You use two different syntaxes to do effectively the same thing within so few lines? You should be ashamed.
You can't exactly just paste into reddit... maybe with res.
just made a logo check it out.
YESSSSSSS!
I suggest a configuration management tool instead of custom deployment tools. The configuration management tool not only sets up packages, files and the like but also ensures that it's running, correct version and more. https://secure.wikimedia.org/wikipedia/en/wiki/Comparison_of_open_source_configuration_management_software
Couldn't you use something like with open('file1') as file1, open('file2') as file2: #code ?
Agreed re: pip. I'm curious about all these people still using easy_install.
fabulous.
That's only in Python 2.7 or later.
Actually, markdown's syntax for literal block quoting (like &lt;pre&gt;) is to indent with four spaces. Since you're usually already indented with python, you usually can just paste
It depends on what you want to do. For sequence analysis, and population genetics is OK. For the rest, it's lacking.
And `contextlib.nested` can't be used with file objects, because the object initializations are not protected (so if opening the second file crashes, the first one won't be closed).
fab fab fab...
&gt;The latter will close the file when the garbage collector decides it is time to deallocate the object. This is a very plausible answer, thank you! Unfortunately it does not seem to be true, at least for simple test cases. My experiments on Windows XP using Python 2.6.5 seem to indicate that the one-line version closes the file immediately after it is written. Test code: dat = file('in.tmp', 'r').read() file('out.tmp', 'w').write(dat) while True: pass The files are no longer open when the program hangs in the while loop. I verified this with the XP "openfiles" command-line program, as well as determining that out.tmp could be deleted or modified while the test program is still running. If I replace the second line with two lines: f=file('out.tmp', 'w') f.write(dat) then the out.tmp file does remain open, as expected
Correct; I'm still using Python 2.6 on the production server.
Solid advice. Thanks!
Just wanted to say, that's a pretty hilarious, memorable logo.
name collision http://lobstertech.com/fabulous.html
If you change this: fh = open(modified_file, "w") fh.write(new_configuration) to this: file(modified_file, "w").write(new_configuration) the file is written and closed immediately. At least that's what seems to happen on Python 2.6.5 running under Windows XP. I just ran an experiment to test this, and confirmed that behavior. I tend to use that idiom a lot, when I need a one-liner to read or write a data file. Is there some subtlety that I'm missing?
The problem with the verification you used is that it only works as an artifact of the program being so simple. If you look at the python source code for 2.6.7 (shouldn't be too much difference from 2.6.5), you'll find a file called Objects/fileobject.c There's a function called close_the_file at around line 340. This is the actual function that closes the open file. It is only called in two places, in a function called file_dealloc defined on line 520, and in a function called file_close. file_close is what's called when you call the file.close() method inside the python interpreter. file_dealloc is what's called when the garbage collector actually cleans them up. I suspect that what is happening is the garbage collector is cleaning the anonymous reference very quickly. If you want to really test it out, disable the garbage collector at the start of your program and rerun your tests. You can do this with: import gc gc.disable() Reference: docs.python.org/library/gc.html Note: I don't consider myself an expert on python internals by any means, but this seems pretty straightforward to me. 
Any suggested use for this? I guess it could be used to effectively move the authentication to your own server by creating and distributing temporary one-use passwords, but it seems like it would be a lot better to just use Google's [two-factor authentication](http://googleblog.blogspot.com/2011/02/advanced-sign-in-security-for-your.html).
Changing mass-passwords from hacked password dumps? /s
nice!
It's specifically stated that that behaviour is an implementation detail of cpython, and not something that you should count on. From http://docs.python.org/reference/datamodel.html &gt; Other implementations act differently and CPython may change. Do &gt; not depend on immediate finalization of objects when they become &gt; unreachable (ex: always close files). Using file instead of open is similarly deprecated, although probably less likely to bite you.
I think it's better here than SO, SO's formatting is terribad and feels like one of those lame Yahoo answers groups.
This really works only by chance in CPython (will still break on PyPy for example)
Inserting your gc.disable() code makes no difference, as far as I can tell. I got a more knowledgeable answer elsewhere. TIL that CPython uses a reference-counting scheme that will immediately delete unreachable objects in simple cases like this. That's an implementation detail of current versions of CPython that we're not supposed to count on. Reference: [Python Language Reference](http://docs.python.org/reference/datamodel.html)
Automatic timed password changing? You could use it to change the password every week or so from some list, then tell you your new password. Not the most secure thing to do, but an interesting idea.
&gt; Is there some subtlety that I'm missing? It's an implementation detail of using a refcounting GC, so it's not going to work with Pypy, IronPython or Jython, and even with a refcounting GC you get no guarantee it's going to work (e.g. it might only cleanup the 0-refs at the end of the current scope, stuff like that)
&gt; Now, here's the code, written to be more pythonic: &gt; with open(from_file) as input: &gt; data = input.read() &gt; with open(to_file, 'w') as output: &gt; output.write(data) You should probably nest them as well (in order to reduce the length of your scopes), and in Python 2.7 (or 3.x) you should extended managers: with open(from_file) as input, open(to_file, 'w') as output: output.write(input.read())
One user said: I really like the PyStudio plugin! Good job so far. Now Editra is getting usable, imho. But there are still some rough edges. I'd really like to see more improvements and hope that someday in the future I can abandon Eclipse with PyDev plugin in favor of Editra ... Keep on guys, I really see a viable alternative to Pydev coming up here
ROOT (root.cern.ch) is a C++ framework for scientific computing - but includes bindings for python. Unless you have a need for any of the particle physics/stats specific stuff it contains it's probably better not to go there - the rough edges between C++ and python still hurt. One important advantage however is the reflection mechanism which lets you call arbitrary C++ code from python (without needing to write as a python extension or use swig) - although other options like cython might be better if this is what you want. Also, it looks like pypy is starting to become worth looking at if you have bits that need performance.
Here are few of my choices. 1) [python\(x,y\)](http://www.pythonxy.com/) 2) [Theano](http://deeplearning.net/software/theano/) 3) pyopencv and many more. 
Unless your code might need to run on 2.4 or lower. At work, my clients deploy on RHEL 5.6 and are hung up on the idea of switching away from the supported version of Python. I totally understand wanting to write with the new features of the language, but at the same time, being stuck on 2.4 it can get annoying when third party libraries I want to use are incompatible because of code that could have been written in a compatible way with an extra 30 seconds worth of effort. That said, if the developers at my company can ever convince our higher ups to let us use 2.5+ we'll be happy to start using the new syntax ourselves.
I really appreciate the effort that goes into Europython and making these videos available, but you really need to get a proper audio recording setup. The audio quality is really poor, and so much ambient noise coupled with a non-native speaker (the gevent intro comes to mind) some of the videos are indecipherable.
sorry buddy. good luck!
A little more specialized, perhaps, but PyMol is one of the most powerful python packages I've ever used. The ability to make ray traced DNA/Protein structures has led me to waste many hours in the lab.
Thanks. And that's an impressive pun: buckingham.py -&gt; Buckingham Pi theorem.
Well, that behavior makes sense then.
This is not a particularly compelling reason to avoid context managers. Given how incredibly beneficial they are for preventing bugs and writing exception-safe code it doesn't make sense to give that up for the very few people stuck on versions prior to 2.5. I mean 2.4 is closing in on 7 years old now. 
why isn't there a better way to deploy webapps by now that doesn't involve creating symbolic links, mystery configs and chmodding? i know its not a big deal for those comfortable with linux and the command line, but for people new to web dev (especially recent windows converts), they'll probably either * follow a guide like this and have no idea whats going on * create their awesome django app, then try to deploy it, get stuck and stop using django * find a random collection of guides all over the internet, most outdated or slightly innaccurate and about two hours of trying to whack it into submission, then give up guides like this are great, but i really hope someday deploying a production django server is as easy as starting a development django server
how to flush ?
well i indent 3-spaces....
christ....why would any developer need to dig into this
 file.flush() http://docs.python.org/library/stdtypes.html#file-objects
I bookmarked it for a nice demo of using urllib and urlib2.
Also, a lot of the examples use Pmw for megawidgets and last time I looked Pmw hadn't been updated in a long long while.
it's obviously missing the part to send the new password to someone else
It won't work if you don't provide the wikipedia page url as an argv, but your page doesn't show that. python wiki.py http://en.wikipedia.org/wiki/Time_complexity 
i don't think there should be an easier way to deploy web-apps. being a server administrator requires a certain amount of knowledge, especially when that server is open to the world (e.g., security concerns step up 1000-fold when you're dealing with an actual server open to the world vs your local dev server), and if you don't have that level of knowledge &amp; aren't willing to put in the leg-work to get it, you should hire somebody that does. 
Cool...I am in that certification program. Almost done with the first section.
why isn't there a better way to build rockets by now that doesn't involve chemistry and physics?
There are companies with products in beta that solve the django hosting issue for noobs. I use one for development and staging to show clients but I setup my live sites by hand still. 
Good point, your structure would also be easier to incorporate buffered read/write for large files.
We have the recorded audio from mic. We tried to mix it in, but the compression scripts screwed up codecs somehow. Since we were handling 15-20 per day, there was no time to debug codecs, so we just went for the original audio. We will post videos with good audio in the next weeks, and at that point we will also encode them in WebM.
Frankly, I wouldn't want anyone who doesn't know their way around Linux and the command line going anywhere near a production box. 
The flash player has "issues". We're testing a new one.
We're serving them through Cloudfront, but they're still caching them. Give it a few days.
This is silly. I have a lot of time on my hand. Just send me your password and I'll take care of it. EDIT: Username and password are needed for proper changing.
what about crypting the result of a pickle dumps, and decrypting at load time ? You can use a lib like PyCrypto and let pickle handle all the hard work. Also, I would not bother and just use SSL if it's an option
Hey, I just PM'd you. Check it, it has to do with this thread.
You can do this entirely with the stdlib I think, using the hmac module.
And if you don't have a mac, [Cream](http://cream.sourceforge.net/) will do nearly identical things.
Your code doesn't work on 1.x
The source of the serialized objects is untrusted (a client connecting to my server). Encryption does not help. I need something that will ensure that deserialization produces a valid object (of the original type, from a restricted subset of types), and will not execute any untrusted code from the serialized data. Of course I could easily write something like this using e.g. the `json` module, but I thought it might exist already as a library.
Media Temple has a push-button Django system. It usually works.
Encryption does not give you any safety. What you need is a way to authenticate a serialized object string before you de-serialize it - a [MAC](http://en.wikipedia.org/wiki/Message_authentication_code). The standard library includes a good one - HMAC.
yo this is guy is a badass, watch out
One way I could approach it: I would "encapsulate" the forms fields in using namedtuples, and have read/write methods that use those tuples as parameters/return values. At first I would choose something really simple (ie: csv or other plain text format), and only implement and switch to a db based approach if it becomes necessary. In this case, you should be able to "simply" change the read/writers and off you go!
It is funny that you mention this, I was actually talking to a recruiting company here in Nashville, and they recommended your position to me. (I assume it is the same position given the description) I am an experienced (5+ years) python programmer, and am looking for a job in the Nashville area. My only problem is that I am still on school so once the semester starts I can only work 3 days a week (MWF). This has made it extremely difficult to find a job, as everyone is looking for Full-Time programmer, if you would like I can send you my resume. Edit: Changed Years of experience due to a typo
Try nginx with uWSGI running as a master process. All you have to do is create an nginx conf for your site and symlink or copy it into the `sites-enabled` folder. It's not any more sophisticated than creating a site in apache, actually.
'relevant' or 'I'll just leave this here' links without explanation Must Die. -1
http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-hidden-treasures-in-the-standard-library-4901130 There's a fantastic demonstration of the hmac module shortly in (nearish the 7 minute mark) http://www.doughellmann.com/PyMOTW/hmac/index.html By the same guy (Doug Hellmann) non-video explanation. Recommend perusing PyMOTW if you haven't already
There is, I go to the store and buy a cheap kit off the shelf for $20 where I just put the pieces together and it works. If launching a rocket took that much knowledge I'd either a) not do it or b) blow myself up trying. 
Should I require an engineer to operate my car because that's what the first cars required? Absolutely not. Should my mother have to have an intricate operating systems experience in order to use her computer? If there was she would never use it. Beginning products and systems require experts to operate them, which is expensive and dangerous. Then those experts solidfy their knowledge into the structure of the system themselves, opening up the platform to far more people to benefit from. That's all I'm suggesting, that these web deployment patterns have been around forever, people often have to deploy webservers and often don't have that experience. The best solution is to make the process easier to understand so as to allow more users to take advantage of this awesome tech stack without having to worry about shooting themselves in the foot.
Not builtin to the standard library, but it shouldn't be too hard to roll your own on top of json. If the instances are of a known set of types all you need is the type name and the json serializion of the instance members. So something like: json.dumps([type(obj).\_\_name\_\_, obj.\_\_dict\_\_]) Deserializing: name, \_dict = json.loads(the_json); instance = object.\_\_new\_\_(getattr(module, name)); instance.\_\_dict\_\_.update(\_dict)
It would be nice with a GUI to see all user mountpoints (FUSE) and mount/unmount ability. Perhaps let it integrate with KDEs notification icon? You could do it over a weekend, and you get to learn simple GUI stuff. 
People like you is what makes the world go around.
Shoot, I didn't specify that I also need your username. Perhaps there is something to this password changer script after all.
Here's one I've been thinking of doing for a while: drag n' drop file sharing between computers connected through [Synergy](http://synergy-foss.org/).
Whenever I'm itching for a project, I usually make a game. There are tons of libraries out there for this sort of thing, my main experience is Pygame. For added difficulty, maybe make a networked multiplayer game.
I've been developing something in my free time that will hopefully achieve that. It's called [Sovereign](https://github.com/DeadWisdom/Sovereign), it's basically exactly what this guy is setting up, gunicorn, nginx, supervisord, fabric but in one easy to use system. The web-serving speed is not what it should be, but is sufficient at the moment.
Before you're legally allowed to operate a car you have to acquire a license. If you operate cars professionally you're even required to renew that license in regular intervals. Oh boy, do I wish web development were regulated like that. And what about your mother? Does she know nothing about an operating system? Is all she does moan and bitch the whole day that other computing patterns work since forever and computers are too complicated? I'm sure at some point even she had to learn a few things after she realised the computer wouldn't read her mind. I think you're just trolling. Seriously. It's dangerous to have systems operated by experts!? &amp;#3232;\_&amp;#3232; 
I love guake and have been thinking about going through the source code lately. I'm not sure what it's written in. I think it would be awesome to have something that would essentially be a drop down container for your application. For example I always seem to be digging for a phone list but I don't necessarily want to leave the PDF file open all the time. If it were tucked away until I dropped it down with a hot-key combination that would be pretty sweet. Or if I have a remote desktop open all the time but again, I don't want to have it visible when I'm alt-tabbing through apps. I could just drop it down when I needed it. EDIT: Just checked and it looks like quake is written in python. http://guake.org
It's a problem that I've been working hard on to solve for the last few months. I'm looking to release an alpha or beta of it this fall with my pet-project called Prometheus. Turn-key FTP uploads for an instant blog site a-la Drupal or Wordpress? Supported. In-the-box instant deployment solutions that just work regardless of whether you're testing locally, pushing to a Heroku-like service such as ep.io, Gondor, or DotCloud, or deploying across dozens of servers configured behind load balancers with db master-slaves? All supported, and you can always pop the hood to see the same familiar Django files. Sane recipes for installing existing apps that play nicely with one another? You betcha. Being able to write your own templates of a Prometheus project if the built-in turnkey solutions just don't cut it for you? Yep, and you can share and vote on them from a central source. I might be overly ambitious for a first release, but hopefully it will turn out nicely.
A gui frontend to the compilers for SASS and CoffeeScript files. more like less.app for mac os x http://incident57.com/less/ A cross platform solution. how about it? EDIT: you don't have to write the compiler, just hook to the sass and coffescript compilers and output could be redirected files in a directory.
Medical database for poor nations.
FYI, check out the appsumo sale on this too.
Write a GUI for [bup](http://github.com/apenwarr/bup)
Is the course worth it?
sorry I misunderstood the untrusted source part. I get it now
Make a bot for Minecraft or something else accessible. You could run a local server, interact with the bot (chat commands), see what it is doing, and so on. mine staircase down 30 
I'm not a total beginner, so a lot of it has been repetition for me. I'm going through the first 2 weeks now, it's going over a bunch of basic things, effectively I guess. But really, he's just going through the excercises with the book 2.0. When I get further in, I'll let you know. Keep in mind though, there's an awesome refund policy, so there's no harm in buying it.
I think targeting 2.4 is kind of like supporting IE6. Nobody wants to do it, but depending on your client you may not have a choice. RHEL 5 is what makes 2.4 the lowest common denominator. Once RHEL 6 gains traction, supporting 2.4 will be unnecessary.
Use YAML (a superset of JSON) as your serialization format with [PyYAML](http://pyyaml.org/wiki/PyYAML). Features of YAML include object type tagging, support for references (it handles reference cycles just fine), and when using PyYAML's "safe" dumper/loader, the ability to define which of your classes should be considered safe.
Second this. I think bup has potential and a GUI could help bring it to the masses that don't type CLI.
Where do you get the artwork?
Thanks, that looks like exactly what I need! I'll be sure to check it out.
Create a filesystem analyzer. One of the features I wish were in more file managers was the ability to sort and display the biggest files and folders on your system for when you need to clean up.
Interesting. I'm so used to having a network drive between synergy'd boxes. I think this would take a large Synergy rewrite though, as Synergy isn't aware of anything except mouse position. i.e. It doesn't know you're attempting to drag/drop something.
I like making bots myself. For flash games, typically. I always wondered if I could write a Python bot for WoW, and then whether or not Warden would catch it, since it wouldn't hook into memory, merely control mouse/keyboard commands.
...then use Wordpress?
http://www.marzocca.net/linux/baobab/
I haven't used it, but does Synergy have an app menu? It must use some sort of synchronization/notification between the clients in order for a workstation to know when it has the focus. Extending that and adding a menu item for dropping/copying files is probably easier said than done, but it's whole lot easier than trying to hook into the drop handlers for each of the target OSes. Just a thought..
And bup is actually written in Python, which makes it an even more natural fit than the Synergy suggestion. +++ WOULD UPMOD AGAIN!!! +++ ;)
So, is this just for python 2? Is that worth learning? I know the basics of python 2/3 but not too well, and I'd really like to become better at it, but I don't want to learn 2.* only to have 3 take over and me be left in the dark.
There's no app menu beyond configuring client/server. There's no sync or notification. Focus is determined by where the mouse is. When your mouse goes over the border, the server grabs all your mouse/keyboard input and directs it to the other PC, until you bring the mouse back. The client is about 20KB, the server is about 24KB. The libraries to build are probably another 3-4MB if that, and that's considering it's cross-platform (and most of that is wrapped up in Windows clipboard handling, and some other Windows libs).
lol what? you know you are allowed to install python 2.7 concurrently. It won't break.
The differences between Python 2 and 3 are really pretty minor in the grand scheme of things, such that it's not really worth worrying about. If you learn one, you can adapt to the other.
Done...Used your referral code. I'm a little apprehensive learning 2.7 instead of 3.x but any python is better than no python. Thanks! 
One problem with this approach is that `set` and `frozenset` are not serializable to JSON.
Thank you! 
Oh god if you do please do it like [Daisy Disk](http://www.daisydiskapp.com/). Not so much the amazing GUI as the (which is just gorgeous) but the ability to start a "pile" of files to just auto-delete later.
PyYAML, since it is so flexible and human readable, is easy to debug. Coding for custom classes is quite straightforward.
IMO Raymond Hettinger was the most liked speaker. His topics are so core to python that they should be interesting for every python developer.
Make a rubiks' cube solver. I think that could make good use of wxPython.
Don't worry about it. You'll miss out on some cool new things in 3.x, but I'd bet the far majority of code out there will run better on 2.x.
No mobipocket? Converting ePub to mobi is usually less than satisfactory...
Does "on Kindle" mean mobipocket or AZW? Also, JPEG tables? WTF? He might as well not do it at all then. Tables should work just fine, thank you. If I can't use text-to-speech with it, I can't be arsed to buy the e-book. I guess you can't expect much for $1.
you could use dmenu and a plain text file for that phone list
You can achieve what you want with the cPickle module. You need to use the Unpickler() factory-function and give it a "find_globals" function (passed as a kw-arg, probably). This function is called with a module name and class name and returns a class object. Use this to control which classes the Unpickler can load. I've not tested this myself recently; see the pickle docs. PyYAML also gets my recommendation, but it's much slower than pickle. If you want speed, use pickle; if you want readability, use YAML; if you want JSON, stdlib.json ought to be fine 
Bullshit. I am aware that mobipocket is more limited than ePub, but it does tables just fine. I'd rather see ePub on the Kindle, too, but Kindle is still the best, most affordable e-book reader out there (anything with an LCD display doesn't count).
Usually make my own. It doesn't have to be amazing.
A python script to display the number of subscribed subreddits.
For some reason I just cannot leap beyond tutorials. One reason is at work nobody uses Python for anything. I code in ABAP which is not the most interesting thing in software.
We've started using it for small RAD stuff that needs to be developed quickly. Java would be slower to write, yet it's too complex for shell scripting. I realize python can go *far* beyond this remit, but it might be enough to get a foot-hold for the language with your peers.
Have my upvote for making me discover bup.
So a torrent is completely out of the question? I can't load a single video and get 404's when trying to download some of them.
It's not my device, it's Amazon's. You can't simply discredit a successful product because it doesn't support a superior file format. I'd rather see portable media players support OGG, too, yet the majority only allows MP3 and WMA (and whatever iTunes uses). Amazon decided to use mobipocket instead of ePub and that's a perfectly legitimate (if disappointing) decision to make. It doesn't make the reader any more broken than if it were any other way. The format it supports is merely more limited and thus may require downgrading content for it. You are wrong about me being wrong about tables. Mobipocket supports tables. It doesn't have _great_ support for tables, but it supports them: you can put data into a tabular structure and read/navigate it on a reader. If you disagree with this, you're either a liar or talking out of your ass. 
I am in a Python 3 class. I am using Zed's tutorial as well. I have had little problem so far in converting the Python 2 stuff in the tutorial to Python 3.
[ahem](http://methylblue.com/filelight/) (in the Debian and Ubuntu repo's)
At this point the most widely-used third party libraries still use 2.6 or 2.7. I started out with 3.x for a project and now use 2.6 because I needed matplotlib (graphing package). *edit also, besides the "print" statement, there's not much difference for someone beginning to learn the language.
I usually keep a SSH connection between them but same idea. :) I wonder if it might be better to just look for the boxes that are connected, e.g. look for running synergys/synergyc processes, rather than try to rewrite Synergy itself.
[Class based views](http://flask.pocoo.org/docs/views/) inspired by Django! Lovely! Thanks, Armin!
That may or may not be an issue for the OP, and is anyway solveable with the json module. It seems the OP likes YAML as a solution anyway.
From what I can tell, LPtHW only contains a single table (in ex27), which has shitty formatting in HTML, too. Unless you mean the formatted code with line numbers, where the solution is easy: drop the bloody line numbers. No matter what Amazon recommends, [simple tables are perfectly possible in mobipocket](http://www.mobipocket.com/dev/article.asp?BaseFolder=prcgen&amp;File=tables.htm) and they work just fine in [major publishers' e-books](http://www.apress.com/9781430219361), thank you. I'm not accusing you of anything. You said the mobipocket format couldn't handle tables and Zed would therefore have to convert them to JPEG. That is blatantly false. So either you know this and are lying, or you don't know this and are talking out of your ass. If you're contemplating using tables to put code blocks in e-books, you're doing it wrong. It's not like Zed is the first person to publish an e-book with code in it.
-
Start using it yourself for small stuff where it makes sense. Don't try to replace bash with it, if you're executing a bunch of UNIX command, then shells are better (way, way simpler), but as soon as somebody asks you to sort through data (list comprehensions, weeee ), or do heavy I/O (shells suck at reading/writing files), or having to use some library that would normally need to be installed but is default in python. One really good example for the last one is AD. Most companies don't mind using the LDAP side of AD for authentication (which is moronic, but whatever), this is really easy to do in python. Other examples are working out long list of files based on dates and size and type. Python + sqlite makes it fun and a breeze. 
[Changelog](http://flask.pocoo.org/docs/changelog/#version-0-7)
Flask/Django noob here. Can you explain what's the advantage of having class-based views vs function based views?
"doesn't have great support for tables" != "is shit at tables" ? Maybe the disagreement is whether "Integrating JPEGs is the only solution"?
You can use Control-W in insert mode to accomplish the same in vi.
An app store for PyPI. :-) (A GUI frontend for distutils2, distribute and pip.) Eventually you can add an online backend for ratings and reviews that is integrated with the GUI client.
Could you elaborate on this? 
Buy an e-book that does it, look how it does it. Pretty straightforward. In the case of Apress, the strategy seems to consist of using `code` and `br`, which is as obvious as it gets in the absence of `pre`.
Are you sure that Tkinter is the right technology to learn? If you want to write graphical interfaces for some desktop OS, Tkinter will always look crappy. (If that is not your goal, feel free to ignore this comment) There are plenty of nice GUI toolkits out there, for example PyQt, wxPython, PyGTK, IronPython (Windows) or PyObjC (OSX). Personally, I'd go for PyQt for cross-platform development or IronPython/PyObjC if Windows or OSX is your main (only) target.
I don't know how Django does it, but if Django does it the way Pyramid/BFG does it, then it works like this: 1. The class gets initialized and it's __init__ method is called 2. The method within the class gets called This let you put a whole lot of reusable code in the __init__ method. If you are implementing a set of CRUD views, for instance, each of them takes an object id as parameter and needs to test that this object exists and the user is authorized to access it. That's roughly 5-10 lines of boilerplate repeated in each view. It could instead be pushed into the class's __init__ method. Prior to class views, the only way to do this was via a decorator or a separate function, both of which didn't establish an obvious relationship between the helper function and the view (beyond being defined the same module).
help pypy. 
But now you're editing in Vim and using Ctrl commands like in Emacs. It just feels inconsistent to me. 
The document that `importthis` linked should explain it. We will extend the documentation for that soon.
Implement wxlumberjack, a simple log viewer with the ability to display filtered streaming/live logs. - Use wxPython to do this. Package and test your app on 3 platforms (Windows, OS X, Ubuntu). Use py2exe, py2app and cx_freeze. - Use [MVP architecture](http://wiki.wxpython.org/ModelViewPresenter/) in order to learn as much as you can about modern GUI code. - Get inspiration from [Chainsaw](http://logging.apache.org/chainsaw/index.html) but please make it look as beautiful as you can. - While you implement it, have a print out of [Ram's ten principles of good design](http://i.imgur.com/IWXHY.jpg) on your desk. Meditate on how it applies to your code. - Implement core functionality and then polish, polish, polish. Make it look like one of those uber-sexy mac apps (e.g. [Tweetie](http://tctechcrunch.files.wordpress.com/2009/04/tweetie-shot.png) ) 
I feel urge to mention that majority of view (especially CRUD views) take much less code, if you write GET/POST handling in same function. This way you don't repeat yourself, you save amount of code you need to write and a bit of speed. :)) What I'm trying to say is that class-based views are sometimes nice. But in my experience this is quite rare occasion (though I don't hesitate to use them when it's time).
Looks very useful. Thanks :)
Oh yea.. this can be a real pain in the b*** when you forgot about closing an open fp. I once did this on threaded web application. After a few minutes while stress testing the app I only got 503 errors wondering what was wrong... 
It might also be boring, but I'd like to have a simple 'card program' that shows up in the tray, and whenever I click on the icon, it shows a random card from the list in the Ubuntu notification bubbles (I can right-click on the icon to choose from which list of cards the program draws)
Django's class based views go like this, as far as execution goes: 1. Django application is loading 1. Class is fetched and its `as_view` wrapper generator is called with whatever instantiation arguments to return a wrapper (the view) that looks exactly like a view function 2. The client requests the view (class wrapper). 2. The view function is called on request, and passed `request` and whatever URL captures defined for it, like any other view 3. The view function uses the stored instantiation arguments to instantiate the class (calling `__init__`) and afterwards calls the instance's `dispatch` method with the view arguments: `request` and the others. 4. The `dispatch` method inspects `request` and calls the correct HTTP verb method, usually `get` or `post` and returns the response. 5. `get` and `post` can mutate the instance state and call instance methods to achieve the response, then returning the response 6. The response is returned and delivered to the client This has no specific support in Django internals, it's just a bundled class that can look like a view. 
Sounds cool, you should put up an pre-alpha version on github like now. 
That was me! - Still waiting on that call from the VP. Good to know a fellow redditor in Nashville....
$1? I guess Zed has sold out! Seriously though, I'm in for a buck! Though I do wish a .mobi format had been provided as well though. I converted it, but some of the code samples got cut off. But complaining on reddit is the extent to which I care. Can't complain too hard for a dollar!
Usually you implement GET/POST in the same "function" with class based views.
Yup and I will be glad when the day comes I don't have to do that. :)
Wow. Small World! :-) Reddit never ceases to amaze me.
What libs do you use for screen scrapping and input simulation ?
Uh, Vim is full of Ctrl commands, in all modes. Vi predates Emacs, so I don't really see how it's emulating Emacs. (Plus, can you name me an editor that *doesn't* use Ctrl commands?)
Mobile phones are widespread across the developing world. All but the very poorest have access to mobile phones. A database where they can link to with their cell phones to help treat minor ailments linked with symptoms could alert doctors for anything serious and help get medicines to them. 
&gt; Can you explain what's the advantage of having class-based views vs function based views? Inheritance, attributes, grouped methods, metaclasses, etc.
Like a gui version of `fortune`?
exactly, so I can learn new stuff when I'm bored by clicking the icon on the corner several times 
no, but you still have an engineer design &amp; build the car, right? in the same vein, anybody who learns to use a computer &amp; browser can use a web-app, but to ensure it is safe for both the users and the operators, you need a certain amount of technical knowledge about (web-)server administration to deploy a web-app. setting up, administrating, deploying to, debugging, managing, etc a web-server isn't as easy as "run this script and it will do everything for you" - it's a relatively complex system with a lot of interacting parts that need to be set up in custom configurations that vary depending on your hardware, what you're deploying, performance needs, etc. i don't think it safely could be, nor should it be, a one-button operation. 
I usually get mine from openclipart.org
win32api/win32con for input, and ImageGrab for screen scraping
Mmm, sounds like it's not gonna work for me. Thanks, though.
no sample on the course ?
Ok, [I've written one](http://RobertSKMiles.com/projects/get_to_philosophy) which I believe is about as simple as possible while adhering to the rules. It's a plain python script, which could very easily be converted into a windows exe with py2exe, but I believe that needs a Windows system which I don't have right now.
If you're in OSX/Linux, then you're better off using Java to do botting, as it has better libs for that than Python does.
I came here *with* this advice, without even reading the post.
Stopped reading at Lynx. OK, not really, but still, Lynx.
Maybe next year a talk called "Don't reinvent the wheel" would be in order. * There are youtube, vimeo and many others that would serve those videos happily. * There are better ways of spreading files like bit-torrent or the usenet. * There are working flash players out there. 
[ncdu](http://dev.yorhel.nl/ncdu)
Fork [ChessBoard](http://arainyday.se/projects/python/ChessBoard/) and clean it up.
I know there's some way to add them, but I wish Flask had regex-based routes built-in.
I've been trying to download single video several times during couple of days but get around 10KB/sec. What's the issue with Cloudfront still not picking up the files? 
And like [WinDirStat](http://windirstat.info/) on Windows. As fun as it might be to do this, it has been done to death already. 
Wouldn't part of the fun be making the game 'skinnable' so you can replace horrible programmer produced art with something better later?
could you explain a bit about the rationale behind 'blueprints'? The docs aren't exactly clear how they differ from modules.
Is any of that title in English? For a relative newcomer to Python, why is this a good thing?
Armin (the autor of Flask) is from Austria. Grappa is an Italian spirit, Werkzeug is a WSGI utility library by the same team as Flask itself, as is Jinja 2 which is a template library. I hope I could clear things up for you, because you should definitely give Flask a try if you want to use a python microframework.
I missed them at first too, but now I haven't come across a route, for which I really needed them. I guess once I finished my Flask projects and start a new one based on Django, I'll miss them again.
Probably not, as my next question is "What's a microframework"? I understand it's kind of a cross between a templating engine and something like ASP.NET.
I miss them from Sinatra.
Not sure if you're trolling or you are very very new here.
Global variables are bad?
Nah...when it runs, all the information is correct, so the variables are being handled properly, plus I don't think I'm actually using any global variables (everything in the casecount function is defined in the casecount module I'm importing). I should clarify it is working...-ish. When I visit the page that web.py is serving it runs the casecount function and returns the correct information exactly once - it does not update on subsequent refresh like displaying time() does. I'm still fairly new at python though, so anything I've said in this comment or on the SO post may be incorrect
No trolling intended. I can write basic scripts in Python but I always get stuck doing anything web-related.
As somebody who's fairly experienced in Python but had never done any web development before last Friday, I can recommend Flask. I was up and running with [a very simple example](https://github.com/amcameron/gchartsdemo) in one day.
Very nice. The only issue I have is with each application running its own server - is there a way to use nginx, lighttpd or cherokee? Edit: http://stackoverflow.com/questions/5131459/deploying-flask-on-cherokee-and-uwsgi
What an awesome dude.
&gt; everything in the casecount function is defined in the casecount module I'm importing Those are global variables. pace = float(delta) / float(ElTime(time, "9:00")) wtf is `time` supposed to be?
fuck me in the face. You're right. Fuck. I'm retarded. This is maybe...day 4 of me programming in python? I'm used to cludging shit together in bash...so I've got a ways to go with OO programming. But that fixed it. I love you. Thanks dude!
How about you educate yourself a bit and lurk some more before you start insulting people?
Was not meant to be an insult at all. I was genuinely suprised at the amount of jargon in the title that I didn't recognise.
This makes for a really nice take on MVC. The goal is to make GUI programming for data analysis as simple and efficient as possible, and traits/traitsgui does a great job. The only downside I've encountered is debugging: the setup/parser code for traits can throw some really funky errors. maybe there is a better way to debug, but it's been painful in my experience.
You mean like [logview](http://plumberjack.blogspot.com/2011/02/desktop-log-viewer-released.html)? It's based on Qt, but otherwise incorporates several of the points you mention: Windows/OS X/Ubuntu, model/view architecture, simple and clean UI. By all means, a wxPython version would be nice to see.
I'd love to work on a collab with you. I'm a relatively advanced python programmer in a similar situation, and I feel that the next step for improving would be working with others on collaborative projects. PM me if you want to discuss it.
wow sweet 
I sent a PM to you and the OP, with my summer free time a collaboration sounds great!
the developer you seek is in yourself.
There are dozens of post like this on craigslist every day. Programmers tend to avoid them because they sound scammy. If you have a real business idea then get some funding and offer residual plus pay.
It doesn't have to be that complicated. Flask is WSGI so you run it using Apache's mod_wsgi.
My dev box is an ARM machine with 512mb of RAM so Apache doesn't really suit.
Okay, maybe it does have to be that complicated, then. 
He still doesn't know the name of the OS that Apple sells. He fails his own test of "Attention to Detail" and "Spotting Differences" on page 2. 
Lots of stuff needs porting from 2 to 3…
This would have to be SMS based since almost all phones are dumb phones. Anyway... interesting idea! 
Thank you for this! I wasn't aware it existed. 
If I want to write one simple project to get my hands on python a bit more - what would you recommend? This or bottle? Or something else?
There is another one that I use at work and for the life of me I can *not* remember it's name, I will have a look when I get in this morning. EDIT: Nope it is filelight, just a different version.
* Many online web hosters have several issues wrt conference videos (eg: youtube max 15 min, vimeo can't skip to unbuffered content, etc) * We use a CDN for serving files, so there *should* not be bandwidth problems. We are investigating why Cloudfront doesn't appear to be caching. * We didn't write a flash player of course. The one we picked up doesn't work though it used to work in our tests, so it might be related to the scarceness of bandwidth. Again investigating... Sorry for the trouble, we'll get there, it'll work, it'll be cute, and you'll be happy :)
I haven't really used Bottle so far but just by looking a little bit through the docs I personally prefer Flask simple on the API level. Feature-wise they seem to be more or less on the same level, but I really like Flask's approach of handling slightly larger apps with modules/blueprints. But ignoring that for a second, as far as I can tell Flask also has a lot more documentation which should make it far easier for you.
Traits gives you: 1. Runtime type validation 2. Notifications 3. Automatic / declarative GUI generation 4. Default attribute ('trait') definitions Of these, 2 and 3 are the real exciting features but the framework provides so many nice concepts its hard to sum up concisely. The best way to understand is to get it installed and play with the examples/tutorials.
agreed. Look into make altinstall and virtualenvs. Also, the IUS repo (that rackspace has a hand in putting out) has packages for 2.6 on your RHEL 5x system.
Flask! Actively developed and supported (use the mailing list and the IRC channel for help). The docs are also much better and you can find a few complete projects with Flask on Github.
I downloaded first 4 videos at good speed (~500kb/sec), but on the next 6 videos I have speed only 10-13 kb/sec. It seems there is some cloudfront threshold/limit.
Have you tried posting on http://python.org/community/jobs ?
[Bottle](http://bottlepy.org) is way faster, supports Python 3, has no dependencies (single file module) and is easier to use. The last one is my personal opinion of cause. Disclaimer: I am the author of Bottle. Flask has more documentation, a bigger community and some exotic features that Bottle does not have. Given the fact that you can easily use werkzeug or Jinja2 (the libraries Flask is based on) with Bottle, the 'features' aspect is not that important to me. There is even a [plugin](http://bottlepy.org/docs/dev/plugins/werkzeug.html) that integrates werkzeug with Bottle. Jinja2 is supported anyway. Looking at the last few releases, Flask seems to evolve into a framework for small to medium sized applications (blueprints, class based views) while Bottle stays focused on smaller applications, web APIs and Google App Engine. That said, it is really a matter of preferences and personal taste. It is not hard to switch at a later point, so just choose what you like best.
I like how you are very specific about where you want to be fucked
Even with uWSGI it does not have to be this complicated: http://flask.pocoo.org/docs/deploying/uwsgi/
All Python frameworks that speak WSGI run on any WSGI server. For some well known ones we added something here: http://flask.pocoo.org/docs/deploying/
Too bad there's no windows support...
Yes, they are clearly throttling downloads. I started 2 files at ~3500 kb/s, both were soon throttled down to unbearable 50 kb/s. The flash player won't buffer either. I really hope someone prepares a torrent of all videos as downloading them or streaming them one by one is no option at that low speed.
no new content here. -1
I love the idea but I absolutely loathe the assumption that everyone is going to be using git. I myself tend to use Mercurial, and I'm certain that many others out there using Bzr, SVN, and other tools for managing their source code repositories. Now I'm not saying that I expect you to have added support for every system out there, because that's absolutely crazy. In fact I think you've done the right thing by only including support for git. What I expected however was that I would somehow be able to choose not to use git if I wanted, and just write my own VCS manager. Perhaps it should be more of a plugin model? Allowing users to contribute plugins for their VCS of choice, and select the one they need in configuration would make this tool useful to a much broader range of users. I myself would be happy to contribute Mercurial support. 
Consider [webapp2](http://webapp-improved.appspot.com/) (it runs anywhere, not only App Engine). Why? It is a single file, ridiculously easy to learn, and has a very explicit code with little magic. It is made to be just a simple foundation ready to be used and extended. As a plus, it is an improved version of App Engine default framework, so it also integrates beautifully with App Engine services. (I'm the author)
That would be [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/) I guess...
I'm the author (thanks gst!) - just to note that this is v0.1 (hastily written on my return from EuroPython) and I'm expecting to release a v0.2 in a few weeks when I've finished off the few missing sections and answered some of the remaining TODOs. Ian.
Good news nicferrier at github changed how package installs work so you can now specify what you want installed in the fabulous_conf.py file. Now we just have to abstract the project cloning part to allow other VCS. Thanks for the feedback.
Excellent news! As I stated I'm happy to contribute Mercurial support once there is abstraction as I'll be writing some Hg support in anyway.
So why don't you add it? Should be a simple matter of checking sys.platform and conditionally changing fork() calls to CreateProcess() calls, right? 
They aren't really that different. Blueprints are basically modules with some with some small improvements that were backwards-incompatible (the way the '.' prefix behaves with reference to endpoints in things like url_for()). I think the name change was also motivated by the fact that "Module" already has significance in python (anything that you can import from) so something in flask called a "Module" that means something else was more confusing than it needed to be.
Site is down.
i love your stuff. The thing is that it is very wide you are covering pyCuda, ParallelPython etc.. There is lot of breath however what i would like to see is more depth. Great stuff though.
Site is up
Warning In order not to compromise your security, this page will not be accessed A virus or unwanted program was found in the HTTP data of the requested page. Requested URL: http://www.lfd.uci.edu/~gohlke/pythonlibs/ Information: Contains recognition pattern of the HTML/Crypted.Gen HTML script virus
I'm working on a similar guide as part of a larger document and class. I was planning on covering PyOpenCL rather than pyCuda and dropping Psyco since PyPy was available. Any reason for using pyCuda over PyOpenCL? Thanks, by the way, this looks awesome.
I only included psyco (and as you'll see - it is just a place marker for now) as it is the standard tool. I haven't used it for several years but I thought I'd be complete. I didn't teach it in the class. As for pyCUDA - pyCUDA was far more mature when I started with it (about 18 mo. back). pyOpenCL looks interesting now (and it is feature-comparable with pyCUDA). I'm hoping someone takes up the challenge at the end of the doc and provides an openCL version for me.
Well, it was only a 4 hour hands-on tutorial, when writing up I wanted to cover more but I've already spent a week out of the country, now I have to do some work again :-) I've probably spent 2 days on the write-up so far (between sessions and flights), I'll put another day into the next release and then that'll be it for a while.
I would like to second this question my group uses SAS and I'd prefer to use python. And the bureaucratic restrictions. They just took away svn because it's "open source which means anyone can put any kind of virus in it"
A solution to achieve what you want, basically you can pass the initiating class into its child. However, I think this is a messy solution, perhaps you need to think of a better way of achieving what you want. Without more infor I couldn't comment class MainWindow(object): def __init__(self): self.var = "funny text" self.showdialog() def showdialog(self): dialog = DialogClass(self) class DialogClass(object): def __init__(self, app): self.label = None self.app = app #code that loads glade file, etc def on_button_click(self): self.label = self.app.var if __name__ == "__main__": appname = MainWindow() (also note I added inheritance from object to the classes to enable new style classes in python 2.7, maybe you're using python3 I don't know) EDIT: oops missed a colon
This should work fine: class MainWindow: __init__(self): self.var = "funny text" self.showdialog() def showdialog(self): dialog = DialogClass(self) class DialogClass: __init__(self, app): self._app = app self.label = None #code that loads glade file, etc def on_button_click(self) self.label = self._app.var if __name__ == "__main__": appname = MainWindow() hints: * never use globals * give components what they need to do their job 
local web gui
&gt;What I'm trying to say is that class-based views are sometimes nice. But in my experience this is quite rare occasion (though I don't hesitate to use them when it's time). To me, class-based views is one of those soup de jour. We'll see how long they will be in fashion. :-)
&gt; I think the name change was also motivated by the fact that "Module" already has significance in python I was thinking something along that line. 
Which is totally stupid, in part because it assumes people can't infect binaries (which they most certainly can!), and in part because it ignores the fact that, unlike proprietary "closed" products, open source is readily open to scrutiny and can be compiled from source locally.
What is the performance hit of the Software Transaction Memory? If you have to add transactions to everything that runs in a thread it becomes a burden, right? Couldn't we use decorators to enable transaction mode and monkey patch every object inside the method to use the transaction? I have just filled with so many questions.
Lately every bit of pypy news I read makes me more convinced that it is the future of python.
I think i've only ever seen it used in Django somewhere, and to read not to write. Can't remember where though.
The crowdfunding is a good idea. I don't know if there are enough PyPy fans to raise enough money to make it a viable model, but I know I'll throw in my $100.
Very interesting. Their existing infrastructure for transformations on the interpreter (ex. stackless) is a huge boon for this kind of thing. However, I think PyPy, Jython, and others have a tough question to answer as far as compatibility is concerned. The GIL was originally a blunt instrument to [avoid concurrent garbage collection (and other internal details)](http://wiki.python.org/moin/GlobalInterpreterLock), but its implementation has led to assumptions in Python and extension code. [Jython seems to avoid a GIL-equivalent (at least according to some documentation; I haven't verified)](http://www.jython.org/jythonbook/en/1.0/Concurrency.html#no-global-interpreter-lock) by relying on the JVM's massive engineering effort in this area. GIL-based assumptions in Python code stem from the implementation detail that every bytecode (so long as it doesn't induce other Python bytecodes to run, such as accessing an attribute is wont to do) is atomic. This has the consequence that [certain, careful usages of built in types are thread-safe *assuming a GIL*](http://stackoverflow.com/questions/2740435/are-there-some-cases-where-python-threads-can-safely-manipulate-shared-state), as well as particular things like re-binding a local / global reference. By my limited understanding of Jython's approach (from the OP's link and the Jython blurb linked above), it seems like they are trying to patch particular common cases (ex. list append / dict update), without compatible behavior in *all* GIL-abusing cases (i.e. simple are not inherently atomic). Pypy instead seems to seek full compatibility. &gt; In such a PyPy, the interpreter would start a transaction, do one or several bytecodes, and then end the transaction; and repeat. This is very similar to what is going on in CPython with the GIL I disagree with this approach. STM is an *optimistic* paradigm for synchronization, sure, but the CPython-compatibility through the same coarse grained (but now optimistic) synchronization will still have a high cost. I'm sure it would be a slow and painful transition, but the real solution here is to weed out *most* GIL assumptions in user code, and remove the compatibility burden from interpreter implementations. Perhaps PyPy should instead -- maybe as an alternative, thanks to the power of their interpreter transforms -- use STM only for fast locking on internal interpreter state, as needed, and additionally the most common built-in mutable types (that is, Jython guarantees).
&gt; If you have to add transactions to everything that runs in a thread it becomes a burden, right? Yes, and I'm not convinced that STM will work for pypy. we had to abandon it, used the CLR library with C# as it's overhead was worse than locking in several cases. Especially for high contention code, locks won out over STM for us. 
When we brought in python, the IT/Security folks just about had kittens. Luckily we have been producing so much management sided with us. 
SQLAlchemy use metaclass and mro for reading too. I am not an expert but here is what i found. Objects/typeobject.c static PyMemberDef type_members[] = { {"__basicsize__", T_INT, offsetof(PyTypeObject,tp_basicsize),READONLY}, {"__itemsize__", T_INT, offsetof(PyTypeObject, tp_itemsize), READONLY}, {"__flags__", T_LONG, offsetof(PyTypeObject, tp_flags), READONLY}, {"__weakrefoffset__", T_LONG, offsetof(PyTypeObject, tp_weaklistoffset), READONLY}, {"__base__", T_OBJECT, offsetof(PyTypeObject, tp_base), READONLY}, {"__dictoffset__", T_LONG, offsetof(PyTypeObject, tp_dictoffset), READONLY}, {"__mro__", T_OBJECT, offsetof(PyTypeObject, tp_mro), READONLY}, {0} }; __mro__ looks readonly so how can you override it ? and the second question is why do you expect ? 
It is read-only when dealing with a class that is already defined, but by overriding the \__new__ method in a metaclass you can set it to whatever you please. I don't understand your second question.
Thanks for your answer, how is that called? I want to learn more about it.
I like how you are very specific about what you like
Use [autopy](https://github.com/msanders/autopy)
You might be interested in [this](https://github.com/msanders/autopy)
The proposed change is to replace pypy's global interpreter lock -- an implementation detail of the *interpreter* that the pypy project provides to us. This change need not expose any new functionality to user code. Right now, the pypy and CPython interpreters execute one bytecode instruction (such as `LOAD_GLOBAL`) at a time. In other words, multiple Python threads take turns interpreting code. The proposed change would make it so that multiple threads run at the same time, but notice (and apologize) if they step on each other. **tl;dr** they are adding memory-level transactions to parallelize bytecode execution.
STM has significant overhead, but I think it is exceptionally applicable here. If we assume that concurrent bytecode instructions do not interfere the vast majority of the time (in which case we pay STM book-keeping fees, but today would have needlessly executed the ops sequentially), it could be a win. It really all depends on what kind of interpreter-level structures end up causing transaction rollbacks, and how often they occur.
Great explanation, thanks!
&gt; It really all depends on what kind of interpreter-level structures end up causing transaction rollbacks, and how often they occur. Agreed. The real problem will be in flagging code that you want to lock explicitly and not incur the overhead of STM. If they can do this well then their approach may work.
&gt; the CPython-compatibility through the same coarse grained (but now optimistic) synchronization will still have a high cost. Why is that? It seems to be heart of your point, but I don't follow why it must have a high cost. (And there's a lot I don't know about STM vs. locking, so please bear with me if I'm asking a FAQ'ish question.)
[enjoy](http://goo.gl/9e682) Please note that the torrent is *huge* (41GB) and some talks are in Italian. You might want to cherry pick the ones to download.
See my reply to mv46
I think you a word there.
I only have pywin32 setup in Python 3, so I had to run the module ([the version I found](http://www.brunningonline.net/simon/blog/archives/winGuiAuto.py.html), but it's very old) through 2to3 and then fix a few issues with unicode (win32 API call, ctypes/array unicode buffers). Do you have a link to a newer version? I haven't looked into your primary problem yet, but as to the 2nd, at least on the version I found, it's a bug causing it to skip the final menu. In `_findNamedSubmenu` change the for loop statement to the following: for submenuIndex in range(hMenuItemCount + 1): With the above fix, the following should all be valid ways to load the 'about notepad' dialog: activateMenuItem(notepad_win, ('help', 'about notepad')) activateMenuItem(notepad_win, ('Help', 2)) activateMenuItem(notepad_win, (4, 'about notepad')) activateMenuItem(notepad_win, (4, 2)) 
I don't know you're talking about
[here's a better link of all c.s. related videos](http://www.youtube.com/playlist?list=PL36E7A2B75028A3D6)
Kill it. Wont be missed.
create a link for donations.
I don't know why `win32api.GetWindowLong(hwnd, win32con.GWL_ID)` would return a number outside the range 0 to 65535. You could print out the value in a modified `_buildWinLong` function: def _buildWinLong(high, low): print "high: %d, low: %d" % (high, low) return int( struct.unpack('&gt;L', struct.pack('&gt;2H', high, low))[0]) For a button click, the high value should be 0 (`win32con.BN_CLICKED`) and the low value should be the ID for the button, which should be an unsigned short (0 to 65535). These go into a `WM_COMMAND` message sent to the parent window. 
it's not on their main site? must be super new. this is awesome though. I wanna dig through so much more than their this. so many awesome subjects. 
Bookmarked. Thanks.
That was the version I was using as well. This addition definitely fixes that problem, thank you very much. I'm working my way through reading and understanding how the functions work in winGuiAuto, but it's been a bit of a challenge in parts. Especially getMenuInfo(hMenu, uIDItem) when reading through _findNamedSubmenu When you're encapsulating function names/calls in boxes, what formatter is that if you don't mind me asking?
You didn't a word, but your use of tense is wrong. The title should read: The wildly successful Khan Academy has just **created** programming / computer science related videos using Python (all videos are CC licensed) 
Umm, his code wouldn't work in python 2. Print is not a function in python 2. I also don't think telling people to put an eval around the input function is a good idea. Should have simply used int().
Thanks very much, I'm going to implement and test this tomorrow so I can play with it a bit more to see how it's working. I appreciate your time!
~~At least in Python 2.6 and 2.7 'print' is both a function and a keyword~~ EDIT: Apparently I'm full of shit
You are correct, didn't know that.
For next year I already found a perfect solution for myself, I'll be there live. ;) Btw, the djangoconeurope guys used blib.tv to spread their videos, that worked great.
You're logic, and all of it's incorrectness
That's wrong. print is not a function in 2.6/2.7, unless you use `from __future__ impor t print_function`, however it is perfectly legal to follow a keyword with parens for grouping.
Write a smart IRC bot that tries to intelligently converse in a channel.
That's just about the best news I've ever heard! I've been hooked on KA since I found it a couple of months ago, and it just so happens I've been thinking for a long time about reviving my programming skills (20 year old BSc in CS gone stale).
Thanks for the suggestion, money isn't required - telling the right people about the report (so I can include their feedback and make it more useful) is all that I'm after. Cheers!
There is a (actually 2) "Donate" buttons at pypy.org.
The Python guy who moved to Khan Academy must be doing a good job
[Composition](http://stackoverflow.com/search?q=python+composition)
Not soup de jour. web.py, webapp, Tornado, tipfy and CherryPy have been focusing mainly on class based handlers for years, and others also always supported them (repoze.bfg, Pylons, Pyramid).
Well (assuming they won't break CpyExt) there must still be a way to force a single threaded mode, since C extensions rely on being able to interleave reading and modifying interpreter state with externally observable side effects.
er... Torrent has been censored, as required by US court.
I tried to download it from a couple of countries. That is the mesasge I saw downloading it from US. It should work for other people. [Edit] I just uploaded it to monova. The site says "Please allow up to one hour for propagation". I'll post the url as soon as I have it. [Edit] I added a btjunkie url
Sorry for my english... Second question is: what do you expect ? I have no practical exemple, and I don't thing it's really exists...
I don't really understand what you're saying. Are you saying that list.append shouldn't be atomic? Or that opcodes shouldn't be atomic?
Inline code spans are marked with [backticks](http://daringfireball.net/projects/markdown/syntax#code). 
i'm happy to see turbogears moving forward.
Never has my butthole clinched up so quickly. :) God I hope he does Django after this.
Do it now! Also recommend http://learnpythonthehardway.org/book/
So, last night I pushed an update that provides enough abstraction to install and configure almost any setup. Just create a new cookbook.py with your desired setup. I still need to find a way of collecting cookbooks and recipes. Any ideas?
FTA: &gt; Moreover, it can be a translation-time option: you can either get the current "pypy" with a GIL, or a version with STM, which would be slower due to the extra bookkeeping. (How much slower? I have no clue, but as a wild guess, maybe between 2 and 5 times slower. That is fine if you have enough cores, as long as it scales nicely :-) I'm afraid `multiprocessing` scales better. Now if they attempted to share as much memory as possible between processes, that would be much more relevant to my interests... Also, keep in mind a very fine point: they **are not** adding STM support to a language, so that your programs could use it (though, as the author said, it is a possibility -- to be discussed another time). They want to take/write an STM library and use it in the interpreter/compiler itself. In other words, it's not about decorators on _your_ objects that you want to use to avoid logical concurrency bugs. It's about `dict.update(other_dict)` not corrupting memory.
To be clear, using parens in 2.6/2.7 is legal, but it is treated as a tuple, (almost) as you would expect: &gt;&gt;&gt; print(1, 2, 3) (1, 2, 3) &gt;&gt;&gt; from __future__ import print_function &gt;&gt;&gt; print(1, 2, 3) 1 2 3 &gt;&gt;&gt; 
Yes! Finally! I've been hoping for them to do CS for months! Are they integrated into the tree structure yet? That would rock. EDIT: Apparently not. And they're not in the video list yet either.
I think when you´re severely abusing multiple inheritance, the standard linearization method used in attribute resolution can bite you in the ass. Being able to redefine ___mro___ would at least you allow you to "unshoot your foot". There´s probably some other useful hacks you can do with it. I´m imagining that changing the ___mro___ could be useful to create proxy objects without relying on getattr hackery. I could be wrong though.
Well obviously it's new, as it was published on June 29...
Thanks, I checked out the first few chapters. Nice sense of humour :-) Might be a little basic/slow for me, but a quick run through should give me the syntax and blow away the cobwebs nicely!
Step 1. Use anything besides XML
I'll pass what I cook up back to you. You'd like a Mandlebrot example, correct?
If you can do a pyOpenCL example in the same format as the pyCUDA example in the doc then yes, I can just include it. I want to keep everything consistent in style so there's nothing for the reader to fuss about. If you can run the pyCUDA version (do you have it installed?) and confirm that the run-time speeds are the same, that'd be awesome. I don't have pyOpenCL running so it'd take me a week or so before I could try to confirm the results. Cheers!
KHAAAAAAAN! I love this guy. This site is one of the most useful things on the internet.
Sal Khan is a gentlemen and a scholar. I wish to high five him, and buy him a beer.
Poor poor pygame. Someone should shoot it and make something better already.
And in the video, there is only one variable without a comma inside the parentheses, so it's just a variable in parentheses, instead of a tuple. Not good form.
I wonder how long it will take them to get to something interesting. I'd like to see a video on neural nets or a web app.
To be clearer, using parens with a single value is an exception to this rule, the parens just being treated as redundant: &gt;&gt;&gt; print(1) 1 &gt;&gt;&gt; from __future__ import print_function &gt;&gt;&gt; print(1) 1 &gt;&gt;&gt; In other words: don't use parens in 2.x because it's misleading.
Not quite. A single value in parens doesn't actually evaluate to a tuple. The comma is the tuple operator, the parens are not always necessary: &gt;&gt;&gt; (1) 1 &gt;&gt;&gt; 1, (1,) The confusing part is that the print keyword doesn't require a space before the parentheses, which just makes it *look* like a function. All part of why print became function in Python 3.
A cleaner solution would be to keep the for loop statement as it was and fix the value of `hMenuItemCount` in `activateMenuItem`. Find the following block and comment it out: # Get top level menu's item count. Is there a better way to do this? for hMenuItemCount in range(256): try: getMenuInfo(hMenu, hMenuItemCount) except WinGuiAutoError: break hMenuItemCount -= 1 The final decrement is wrong, but really the whole process is an unnecessary hack when there's already a function in the win32 API for this (yes, there is a better way). Add the following line to get the item count: hMenuItemCount = ctypes.windll.user32.GetMenuItemCount(hMenu) Simple, eh? 
A call can have a space between the name and parenthesized argument list, so I don't see how it technically avoids confusion, except by the grace of convention. Someone always bucks the trend, however. For example, [Tim Golden](http://timgolden.me.uk/python/winsys/index.html) adds a space to calls, and, while it perpetually annoys me like nails on a chalkboard, it hasn't killed me yet. 
 It's weird why there's no Computer Science link on the main Khanacademy website.
Sounds like you just volunteered
I've seen "orion" mentioned a few times here and there in relation to TurboGears. What is it ? A fork based on Pyramid ?
Regardless of tense, thank you for posted.
You are not the only one. I use linux / FF4 and the flashvideo says there's an error and I get 404 on the download links. Tried a few things but haven't investigated further.
If you're looking for an SDL binding try https://github.com/albertz/PySDL Also give [pyglet](http://www.pyglet.org/) a go Or maybe the Python bindings for [SFML](http://www.sfml-dev.org/)
Yeah, I've been looking at Pyglet and testing around with it. It's a really low-level binding so using it doesn't feel 'pythonic'. Thanks for the SFML link. Haven't run across that one before.
They haven't added it to the site yet. I'm sure Sal has his reasons.
What's wrong with pygame? :/ Granted, I'm not an advanced pythonista, but it doesn't seem all that bad.
the point is to learn by doing, so it is supposed to be slow repetitive and start basic. but the payoff should be actually learning.
I think it's the next gen TurboGears built on top of Pyramid (like a nickname for TurboGears 3 or something)
Does it have a JIT?
Better, pypy has a [JIT generator](http://codespeak.net/pypy/dist/pypy/doc/jit/overview.html).
From a CS standpoint, the material seems weak. Definitely not a substitute for a decently run intro to CS series taught in a classroom.
Whoa, whoa, whoa... He says to do eval(input())?! I may be new to python but you would NEVER do something like that in something such as PHP. Does eval() equate to php's version? For example: number = eval("open file, delete content") if translated of course... number + number = derp; return derp; Would open some file then delete it's content then possibly give an error. Or does eval only work with numeric value conversion?
I suggest that list, dict, and set should provide atomic operations, but in general, a single executed bytecode should have the liberty of not being atomic. As the built-in mutable types are such fundamental building blocks, I think the added versatility of guaranteed atomicity for all / most operations on them would serve clarity and brevity in many common usages concerned with thread safety. Some code in the wild (wrongly) depends on this already, but right now, it's treacherous. `list.append` is an easy case to reason about. But something like `dict.update` is not. Consider several values that get replaced, and then have 0 references. When is `__del__` called on them? Do they each see a consistent `dict` or an intermediate version? One can't answer that without knowledge beyond the GIL assumption. Adding atomicity as a documented feature is thus a separate but related issue. Executing a bytecode, though, should not be atomic. It provides for many assumptions, but all less useful than atomic list appends. Conceptually, we have this (for full CPython compat.): lock (interpreter) { run_next_instruction(); } which is literally not avoidable, to any significant degree. Pypy now proposes this: atomic { run_next_instruction(); } where the [`atomic` block indicates an STM transaction](http://en.wikipedia.org/wiki/Software_transactional_memory#Proposed_language_support), i.e. an optimistic rather than pessimistic lock. In other words, it is crippling requirement from the standpoint of implementation freedom.
Here's an idea. Make the bit mappings an ordinary list, where each item is a tuple (value, length).
&gt; Is it bad to dispatch on type? Sort of. But not really. It's a lot less "bad" feeling when you have a language with pattern matching.
Would that be something like: status = BitMapping( "/sys/devices/pci0000:00/0000:00:07.0/config", 0x06, 0x08, (3, None), (1, 'interrupt_status'), (1, 'capabilities_list'), (1, 'is_66mhz_capable'), (1, None), (1, 'fast_back_to_back_transactions_capable'), (1, 'master_data_parity_error'), (2, 'device_select_timing', {0b00: 'fast', 0b01: 'medium', 0b10: 'slow', 0b11: None}), (1, 'signaled_target_abort'), (1, 'received_target_abort'), (1, 'received_master_abort'), (1, 'signaled_system_error'), (1, 'detected_parity_error')) ? It looks less like the spec, but it might be a good idea. 
What is pattern matching? I've heard the term (and assume it doesn't mean regexps). Is that Haskell where you have fib 0 = 0 fib 1 = 1 fib n = fib (n-1) + fib (n-2) How does it affect the above kind of problem?
Been trying for the last 3 days - no luck 
Nope, eval is considered harmful. Don't use it.
You just need a "bit" more code: class bits: def __init__(self, start, end, field_name, values=None): self.start = start self.end = end self.field_name = field_name self.values = values def extract(self, frombits): value = int(frombits[self.start:self.end + 1], 2) return self.values[value] if self.values is not None else value class bit(bits): def __init__(self, start, field_name): bits.__init__(self, start, start, field_name, (False, True)) class BitMapping(object): def __init__(self, file_path, start, end, *specs): with open(file_path, 'rb') as fd: fd.seek(start) data = fd.read(end - start) bits = ''.join(bin(ord(char))[2:].zfill(8) for char in data) for spec in specs: if spec.field_name is None: continue else: setattr(self, spec.field_name, spec.extract(bits)) status = BitMapping( "/sys/devices/pci0000:00/0000:00:07.0/config", 0x06, 0x08, bits(0, 2, None), bit(3, 'interrupt_status'), bit(4, 'capabilities_list'), bit(5, 'is_66mhz_capable'), bit(6, None), bit(7, 'fast_back_to_back_transactions_capable'), bit(8, 'master_data_parity_error'), bits(9, 10, 'device_select_timing', {0b00: 'fast', 0b01: 'medium', 0b10: 'slow', 0b11: None}), bit(11, 'signaled_target_abort'), bit(12, 'received_target_abort'), bit(13, 'received_master_abort'), bit(14, 'signaled_system_error'), bit(15, 'detected_parity_error'), ) In this way, you avoid type-testing, and the code is WAY simpler. (Also, this fixes a bug in your code where it's reusing the 'states' variable without clearing it.) Essentially, your design mistake was to limit yourself to using built-in types to represent your specification, instead of creating domain-specific classes to do the job. With domain-specific classes, you can define domain-specific methods attributes and methods (like 'field_name' and 'extract()') and perform high-level operations on them. (If you want to get even fancier, you could create your domain-specific objects by parsing an extract from the spec, but that's just a bonus.)
Here's how I would do it using a namedtuple. Also, I prefer to `unpack` into an int and use bit shifting/masking. Going by the document you linked, I unpacked the data as a little endian unsigned short (i.e. byte 0 is bits 7..0 and byte 1 is bits 15..8). For the `device_select_timing` constants I'd just use a dict. Also, I wouldn't worry about including the reserved fields. No need to be fussy, IMO. **Edit: fixed lazy global usage** from collections import namedtuple STATUS_REG = ( ('reserved_1', 3), ('interrupt_status', 1), ('capabilities_list', 1), ('is_66mhz_capable', 1), ('reserved_2', 1), ('fast_back_to_back_transactions_capable', 1), ('master_data_parity_error', 1), ('device_select_timing', 2), ('signaled_target_abort', 1), ('received_target_abort', 1), ('received_master_abort', 1), ('signaled_system_error', 1), ('detected_parity_error', 1)) def make_config(reg_data, reg_struct): Config = namedtuple('Config', ' '.join(field[0] for field in reg_struct)) field_sizes = tuple(field[1] for field in reg_struct) return Config(*_parse_reg(reg_data, field_sizes)) def _parse_reg(reg_data, field_sizes): from struct import unpack parsed = [] bits = unpack('&lt;H', reg_data)[0] for size in field_sizes: parsed.append(bits &amp; ((1 &lt;&lt; size) - 1)) bits = bits &gt;&gt; size return parsed if __name__ == '__main__': config0 = make_config(b'\x00\x00', STATUS_REG) config1 = make_config(b'\x00\xFF', STATUS_REG) config2 = make_config(b'\xFF\x00', STATUS_REG) config3 = make_config(b'\xFF\xFF', STATUS_REG) 
Awesome 
Indeed. And that is exactly why you shouldn't use parens if you're not using it as a function. Empty parens are an empty tuple, though.
Isn't using eval() a very bad idea?
Personally I'd be happy to see it die. I followed it for years, only to have maintainers abandon the project, docs ignored in favour of a book you could buy, the book made obsolete by non-backwards compatible changes, a myriad of potential interchangeable parts that weren't documented, etc. In future I'll be going with Pyramid which seems to offer 85% of what Turbogears does out of the box but with far superior documentation and support.
Gah, I knew I was forgetting something. Endianness! I don't like your use of globals, though. I'll just steal the `unpack` part :-)
Ugh. That looks vastly more error-prone and difficult for a human to read than the original BitMapping code.
You're right about the globals, but I would personally stick to using a namedtuple. It's simple and works well. I edited the code to be more generalized, but that's about as far as I would go unless it was going in a library. I prefer quick and simple to minimize bugs and headaches. 
I think you mistakenly used colons here instead of commas.
Shoot, I tried a few days ago and gave up at the time. I'm sad to hear it's still slow :(
I get 404's on some of them too
This is so against what Python is about that it made me cringe, going in there. Python code is small because Python tries to be expressive, not because you can condense it all into small unreadable chunks. Cheers, though; it's definitely a fun idea for a subreddit.
Oh, wow that's really great, between you and a buddy this API related stuff is finally clicking a bit. Can't thank you enough.
Despite the rather bland and uninspiring title, this actually is an extremely useful blog post. It talks about using Vagrant, useful fabric commands (with source), configuring VIM, and a handful of good Django apps you should use. I'm certainly going to consider trying the Vagrant + Fabric approach in my next project.
and there's some valuable things in there that should be useful for any python webdev.
This still results in the same error I was originally experiencing. The low is actually 592192, which is causing the error. It almost certainly has something to do with the program I'm working with and how it assigned its buttons values? My friend suggested this, which worked: win32api.MAKELONG(low, high) If you have any insight as to why the program I'm attempting to click the button in may have such a large low value returned I'd be interested in knowing, even if it's likely out of my range of understanding at this point in time.
I can take a shot at it this weekend. I'll get back to you.
It's fun to be able to see a concept totally implemented in so few LOC. I think it would be a good way to learn about the high level of *how* something is achieved without having to sift through lines and lines of boiler code. I'm feeling that none of these projects would be production ready, though :) Edit: Ok, I think I take that back. Most of the links I have looked at so far seem to be horrendous 1 liners. I would much prefer if they were writing clean code.
vagrant sounds very interesting, but I've been messing about on ep.io (they aim to be the heroku of python web apps) and its very nice to just git-push and have your app running.
MAKELONG is just using the lower 16-bit word of 'low' and discarding the upper 16 bits. I think the following blog entry might clear things up for you. It even mentions WinGuiAuto: [Assume Nothing – Control IDs in .NET](http://ciarang.com/posts/assume-nothing-control-ids-in-net). A .NET app will apparently ignore the ID and use the button's handle. You can keep using the C macro MAKELONG or add some code to mask out the upper 16 bits: def _buildWinLong(high, low): high, low = (high &amp; 65535, low &amp; 65535) return int( struct.unpack('&gt;L', struct.pack('&gt;2H', high, low))[0]) 
Maybe, I'm still waiting for an invitation so I can't speak to the ep.io experience.
I wish they had an invite system for users; I'd invite you! I'm sure it wont take too long to get one.
[hachoir-core](https://bitbucket.org/haypo/hachoir/wiki/hachoir-core) might be good at this too, btw.
It looks like CherryPy is the way to go for people who want to use Python 3 for web programming. Most other frameworks lacks Python 3 support as of now.
Bottle has it too. Slowly but surely...
Yep takes time and having a few kinks straightened out in 3.2. 
Hope on #epio on freenode IRC and ask Andrew for an invite, they love giving them to users who take the time to ask in person.
In addition to dispatching on the value, as the fib example does, you can dispatch on the "shape" of objects, such as breaking down a tuple, or types I think (not a haskell programmer).
You're probably looking for Ctrl+C.
 while True: try: print("Muahahahaha...") except KeyboardInterrupt: print("Nice try...")
Try Ctrl+\\ then. That should kill anything. Only recommended if Ctrl+C doesn't work. 
Oops, fixed.
I am a django dev for 6 month, wish I could have read your stuff when I just started! Django still sucks for database development and migration even with South. Although I prefer django to rails, it's orm is vastly inferior.
thanks all! 
Ctrl+\ can still be captured. If you REALLY want it dead, use kill -9 (and even that might take a while if you have broken NFS shares that the process is waiting on ;))
I'm pro-life.
it's uncertain if there will be orion.
i had no problems with tg2.1 and tg2.1 docs. the mailing list is helpful, the irc room is good.
Great article. But, I don't see what is so hard about developing on the platform that you will be releasing in? It's great that there are tools to do virtual deployment, but there really isn't a system that most major linux distro's can't run on. Or even better would be to develop code that is multiplatform. /linuxsnob
Perfect! Looking forward to seeing it :-)
Line 7 should read `googolplex = ...`, not `googelplex = ...`. Other than that, you'll need a lot of space! &gt; 1 googol bytes = 9.09494702 × 10^87 terabytes
Yeah, not working for me also.
Hmm, I agree that it's not clear whether dict.update should be atomic or not. I would probably say it shouldn't, because then it's roughly equivalent to the python `for k, v in other.iteritems(): d[k] = v`, which is what you'd expect it to do. I think you've chosen a bad example wrt to finalisers though: When is `__del__` called on objects? When the garbage collector gets to them! I still don't follow your argument about opcodes not needing to be atomic. I can't think of any reason why you would want to allow execution of one opcode to see an inconsistent interpreter state due to concurrent execution of another opcode. And I can't think of any condition where you would want execution of an opcode to partially complete. Are you saying there is a case? Or are you arguing that achieving those properties through (fine grained) locks like Jython is a better strategy. If it's the latter, well isn't that just an engineering decision? The performance of each will depend a lot on how it's implemented and how it's used in practice - and the workload. But I don't see how can you ever hope to support the CPython API when using fine grained locks. If you don't care about C extensions, and fine grained locks are better for your workload, then just use Jython!
This is the first time I've heard of Bottle.
well this subreddit isnt about code golf and obfuscation
Note that you can call this "Implementing an internal DSL" instead of the maximum vague "metaprogramming". It's a domain specific language, because you implement a language just to describe how to decompose a byte into values and it is internal, because you use means of your programming language in order to implement the domain specific language, opposed to implementing a parser to get stuff done. 
[Bottle](http://bottlepy.org/) supported Python 3 before it was cool ;)
I think they just added torrents to the talk pages, some of them still 404'd last night, but those that worked downloaded quickly. Pro tip: Use the “navigator“ on the side and click “list view“, you can download the torrents from there.
As noted in [wikipedia](http://en.wikipedia.org/wiki/Googolplex) there isn't enough stuff or space in the universe to record a googolplex.
If you only need static files there is blogofile and rstblog. I use the latter for my blog. ([rstblog](https://github.com/mitsuhiko/rstblog) and here how I use it [lucumr](https://github.com/mitsuhiko/lucumr))
If two hours is too much time for you to spend setting up a blogging engine, then it doesn't sound like you should worry at all about what language it's written in.
There's [Plone](http://plone.org/) (Not exactly a blogging platform, it's sort of a CMS, bit complicated)
I'm sorry, but 2 hours is a bit much to get the damn thing to start-up, just to see if it meets my requirements. I'm looking for a replacement to wordpress which I think is a bloated piece of crap, but I can have one up in 5 minutes.
this looks interesting, thanks :)
Pyramid has 2 people working on it for GSoC 2011.
What about Glade ?
OK, this 'extra credit' assignment in the book made me laugh: "Find out what Zork and Adventure were. Try to find a copy and play it." Wow that takes me back :-) BTW I've now used Python to do the first few problems on Project Euler. Having fun.
Glade lets you to quicly do a GUI, but it's not as easy as Delphi was (I've never really used VB6, but I guess it's similar). A good example of what's easy is Qt's Creator - it's integrated with Designer, so you can (for example) click a button and it let's you code what should be done when it's clicked. Delphi was simpler to use, partially because Object Pascal was simpler to learn than C++. Something like that would be really cool for Python. I've seen some simple things like that, but it never was "it".
It's because that's a lot of work. Really a lot. VB6 had a strong Microsoft backup, Delphi was created by Borland, and nowadays Qt Creator was made by Nokia. Python has a lot of commercial support, but no big company has any interest in developing such a IDE for it. One man, or even a few enthusiasts won't be able to make something like that. At least that's what I think.
That's right. With all of Python solutions you still deal with quite a lot of 'GUI code' (which some professionals might prefer) but with VB6 you could drag the stuff you need and start coding the logic without worriying about the GUI. I made a lot of custom apps for myself with that but now even though I know Python much better than VB6 I don't bother because of the extra work needed (I mean anything other than the logic of the program itself).
Wouldn't be hard to code an simple app to create the callbacks structure for you from a gtkbuilder source, if it's just this you think it's missing. But your point is right, it never was "it", however it's a good idea to create an open-source RAD for some Python GUI toolkit, the problem is the effort required, and at least for me, looks like a "non-interesting" project to work.
in their defense, Django is a pretty complicated beast. PHP is about the only platform that allows for 5 minute installs, which is why it's so popular. pretty much everything CGI requires some knowledge and setup.
well... Wordpress, and all of PHP, for that matter, is a different thing entirely from using Python/Ruby/etc for web development. PHP was designed expressly for the purpose of back end web development and to be easy to dive in. (insert general purpose language here) was not, which means it requires some specification to define how it is going to run. It is unlikely you will find anything matching your requirements, because they are built around the implicit assumption that web development with Python is more similar to web development with PHP than it really is. Setup time is one metric where PHP will, far more often than not, beat Python. That's just not really the nature of Python web development. On the contrary, it would be much harder to do *other* things in PHP, i.e. scientific computing, statistical analysis, or game development, than it is in Python. So... yes, getting into Python web development *is* more time consuming than getting into PHP web development, but the payout is learning a tool that, in the long run, offers a wider array of use cases. \* edit - having quick setup time and giving reasonable defaults to all configuration options is within the philosophy of Ruby on Rails. If that sort of thing is very important to you, you may have greater success in /r/ruby. It's more a matter of culture and philosophy than the capabilities of the languages; Rails technically *could have* been written in Python, but the ethos of Rails is, by definition, not *Pythonic*.
Isn't [Boa Constructor](http://boa-constructor.sourceforge.net/) something like that?
Here: [wxFormsBuilder](http://en.wikipedia.org/wiki/WxFormBuilder) **Edit:** Generates code for C++ and Python.
[Boa Constructor](http://boa-constructor.sf.net/) had a very nice GUI builder, though it was modelled after [Delphi](http://en.wikipedia.org/wiki/Embarcadero_Delphi), not VB. I don't think it's been maintained in years, though.
Well, yeah, that's right. I'd hate to be *that guy* who talks about usability and all that shit, but coding a simple app in Delphi for someone who never programmed before was easy - just draw an interface, double click button and it automatically brings code window to front, type object name and it will show you all methods. I remember that I wasn't really aware what OOP was at the time, but by dragging stuff on the window I was able to create objects, and by experimenting I could create a simple notepad, calculator and whatnot. I guess it's not about a GUI maker alone, but about a whole IDE that would do most things for you like Delphi did.
Setting up a django development server is really simple. Moving it into production might be a bit more complicated because of CGI, but it doesn't take 2 hours
I wonder why mitsuhiko didn't mention Zine that he created: http://zine.pocoo.org/
I gone through the same search as OP and have come to your conclusion: It's a big boring project that no one wants to do. I looked at the options on Python's official site and most, if not all, were half-baked apps that hadn't been maintained in years. Not that I'm blaming anyone, of course. It just demonstrates the state of these solutions. The best bet I've seen is wxFormsBuilder (mentioned elsewhere). Of course, that's only if you use the wx library.
[gazpacho](http://directory.fsf.org/project/Gazpacho/)
Tornado framework has released a Python 3-compatible version recently. 
blogofile link : http://blogofile.com/
Just a quick note. I agree with post. I however I used a product called Clarion Topspeed for years to develop CRUD type desktop applications for years. Beat the hell out of any MS Products and compiled to a .exe. Found I could develop large applications such as Insurance Company Systems, Inventory and Order Entry systems in 25 - 50% of the time. I love python but all of the coding required to just get a fairly complicated screen put together is just to much I get paid to create systems and the time required for python gui coding is just to cost prohibitive.
I like it. Shouldn't be too hard.
While I hear what you are saying, it takes only a few minutes longer to get a python app running; and a while (yes quite a while) longer to do it using uwsgi but honestly; the trade off is well worth the effort
I haven't used Plone in many years, but I'm guessing there would be a similar amount of time involved in setting it up--maybe not in initial setup but configuration of various components once it's up and running.
Zine seems to be what I was looking for, I'll check it out, thanks!
This sounds like a fun project! 
Because I found out that a git repository + a static file generator &gt; any blogging engine in the world. The problem of the past that you want comments was mitigated with hosted comment systems such as disqus.
[BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) would work for parsing the HTML data, I believe. [Python Imaging Library](http://www.pythonware.com/products/pil/) should be able to transform the images. I don't know much about the rest, sniffing and serving the page, but I believe a apache server on your machine could do the custom requested page serving.
Delphi was really popular for a reason! As a former Pascal loving guy, I enjoyed a lot learning Delphi.
I totally agree, I'm just trying to be honest about where it's weaknesses lie and why they are the way they are. I'm very happy with Python for web development. I wouldn't actually *personally* use Rails (tried it, didn't like it at all), but for a lot of people it's what they're looking for.
Could you elaborate on that? The readme for your rstblog was not very helpful in finding out what exactly rstblog is ;)
I like [hyde](http://ringce.com/hyde). It's a static blog generator and fairly simple to use. Depending on what features you are looking for it might be a bit lightweight though.
There is I think... check Rapyd-Tk
We can start. I'm up to participate...
You have a bunch of .rst files in various places and it generates HTML from it combined with some templates. Look at the lucumr repo to see an example setup.
I thought you can use QT Creator through PyQt or PySide, can't you?
[Squid](http://www.squid-cache.org/) will get you most of the way there. More concrete [example](http://www.ex-parrot.com/pete/upside-down-ternet.html). 
I recently discovered WindoBuilder for Eclipse which makes Java and Swing an absolute job when it comes to GUIs. I'd love something like that for Python, that reads code translates it to a gui and once you've made changes writes out the code again.
I'm not even a 4chan user.
Proxy can be done with [Twisted](http://twistedmatrix.com/trac/).
Yup. http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/designer.html
How about starting a public open source project on github or something? We can develop it together with anyone else who is interested.
That's Qt Designer, not Qt Creator.
I tried to learn ruby a while ago, but the syntax seemed odd to me. I guess I'll try again when I have a free weekend. It's true that it's a bit more complicated to install a website written in Python rather than PHP where you just copy the files in the webroot and make a database. However I wanted to try a bunch of different options to get a sense of how they work, and the fact that it was so much more complicated to install than others kind of put me off
I am not sure about the difference, but if "Qt Designer is the Qt tool for designing and building graphical user interfaces.", then I guess that's all we need.
Thanks for introducing it but as you said these projects are all almost dead.
Can someone explain how this works, from ground up. How do you force someone connecting to your router to go through a proxy? Do you install it in the router's firmware?
You could do, or configure DHCP to set the Gateway IP to a server running the proxy, or you could manually configure the browser proxy settings.
There was a PyOhio talk comparing GUI building solutions for python. The conclusion was that Qt Designer which you can use with PyQt or PySide is the most mature and feature rich of them all. http://blip.tv/pyohio/gui-tools-4006117
Huh.... I haven't seen that option in years. Do you know if they have a learning/trial/community edition? I didn't find anything like that on their site. 
Check out [Instant Press](http://code.google.com/p/instant-press/) [[demo](http://instant2press.appspot.com/) | [video 1](http://www.youtube.com/watch?v=gtdJ5JCxiJQ&amp;feature=related) | [video 2](http://www.youtube.com/watch?v=_7UpliP6Yko&amp;feature=related)], or its successor, [Powerpack](https://bitbucket.org/mulonemartin/powerpack/wiki/Home) [[details](http://martin.tecnodoc.com.ar/default/page/powerpack) | [video](http://www.youtube.com/watch?v=nvvWE2rVnR0)].
Reinhardt?
I firmly believe that it's worth the investment to be able to use Python, even if mod_wsgi config *is* completely retarded (it is). Oh and, for the record, Ruby is a pretty sweet language, but I personally can't stand using Rails. Rails and Django are similar in many ways, and completely opposite in others. I'd go through the official tutorials to see which one you prefer; you can get a good idea of the ethos of each framework that way. Django's is a poll app, Rails' is a blog app.
Well, you couldn't change their browsers proxy settings unless you had access to their computer right? My confusion is this: If other people are connecting, he has no password, so if he has no password and can do these things to the router, doesn't that mean anyone can do these things to a router if there's no password on it? I'll look into DHCP.
Not really, VB6 is a whole IDE that greatly helps beginners in developing their first applications. Qt Designer will help you to design the interface, sure, but newbies won't know what to do with it, and that's the problem. Qt Creator has this covered, but it's only C++ (and Qt Quick or something in new versions, I guess).
ctrl+z # sleep the process kill %1 # kill the process (optional)
&gt;Go back to 4chan and stay there. No you.
First time I've seen "VB6" on reddit. My VB6 hate dictates that I must now leave reddit and never return. ;(
I'm actually almost done the alpha of this. PM me
Yeah Twisted actually turned out to be the winning combination for doing this, slightly annoyed someone else came up with this idea while I was still trying to get it launched... but that's life.
You don't force them to go through a proxy. You have your router just serve up response pages (or images) faster than a server 100's of miles away can reply. The TCP stack will ignore any late replies thinking they're multi-path fragments. Thus everything is goatse.
How about Eric? It's an IDE for Python, written in Python with support of Qt Designer's .ui files! http://eric-ide.python-projects.org/ 
[Python Tools for VS](http://pytools.codeplex.com) is better. IronPython Studio will generte Python code which it can round trip through the designer but for that to work it needs to add a bunch of metadata (in doc strings and decorators) which makes it pretty ugly. With PTVS you can make WPF apps where the UI is stored in XAML and the code is seperated from the UI. It still requires IronPython to do this though.
Check out PySide with QtCreator. 
Correct. That's why the router and/or DHCP server are secured with passwords, keys or certificates. You could install a black box device running a transparent proxy on the network between the target desktops and router. 
You can perform ARP poisoning to effectively take place of the router and route all traffic through your machine. Then, using iptables, you route that traffic through your proxy which transforms the images.
No one has bothered because python already comes with a module for tracking IP addresses.
Hey guys, supposing I wanted to learn how to make Python interact with the internet like so ^^^, where do I start? Twisted seems to require some prerequisite knowledge of web-servers and what not.
https://github.com/devdave/PyProxy It's at a proof of concept stage, PM on Reddit or Github and I'll grant you rights. Though I think my goal is in a different direction then yours, the road to get there has a lot of common ground. Also, I'm thinking of abandoning ExtJS4 for the control panel as it currently feels somewhat tedious.
So, how do you tell your router to serve up certain pages a certain way? Is there a name for this practice so I can read about it?
I came here for VB6 hate, but I am disappoint.
I've got a couple of sites running on django (nginx+fast-cgi), it's not a pain to configure...I was just talking about collective's configuration process which seems a bit too time-consuming if I just want to try it out for a bit I love Django, especially the admin site, although that's the reason why I didn't like django-cms, the way the use the admin site seems a bit over-engineered, I think there might have been a simpler way to organize things
I'll definitely give them a try...which to you recommend of the two?
Probably because most things simple enough not to require more serious multithreaded GUI programming would be better handled with a webapp these days. There's not much interest in GUIs anymore unfortunately.
Seconding PythonCard. I've used it a number of times to slap a GUI front end on scripts at work. It looks decent, is fairly cross platform (at least to Windows and Linux), and is very fast to develop. The only downside I've found is that once you push a little out of its boundaries you are back in WxPython land with all of its inherent complexity. Note: With one exception, I've only used it for smaller applications. At last check packing/dynamically re-sizing was a little harry. For bigger things if had luck with PyQt though it is a bit more complex.
A question about endianness, since you seem to know something about it. The second source I provided says "PCI devices are inherently little ENDIAN , meaning all multiple byte fields have the least significant values at the lower addresses." Does this mean the two bytes that compose the register are little-endian, or does it refer to the individual bits? If it's the bits, which is looks like, shouldn't one read the bytes in os-native format (I think), then convert to a string representing the bytes, then reverse the string?
When did you last visit? It's easy to set the format well ever since I've been using it which is for about two weeks. [Here's](http://stackoverflow.com/questions/6538147/using-super-correctly-python) a sample question I asked
I mean the page formatting. It's too big. Whilst it makes *sense* to have the question and answers the biggest thing on the page, it kind of makes it look cheap.