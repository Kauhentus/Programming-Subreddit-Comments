Completely agree. I updated the order. Thanks!
&gt; he doesn’t need a crazy solution Industry standard solutions are not crazy solutions. &gt; what do you think password vaults do anyways? they have to reverse encrypted passwords with a key/token which is exactly what I said. Yeah sure but these vault applications are built by many professionals and they are professionally maintained. Most of them also come with security best practices to follow. So you start using it, read what it tells you, follow the directions and you're pretty damn secure. &gt; don’t call me ignorant, I work in industry, teach compsci, and have studied it for years. you are not better than me so stop trying to flex online. Nobody is trying to flex online. When someone asks for security practices I give security best practices, I don't tell a noob to roll their own password encryption/decryption solution which provides no real security in itself.
did you tell him how best to store this token to use for the vault? the same thing you told me to do? if someone gets the token it’s just as insecure as if you did it yourself. it would take 3 seconds of googling to figure out which algorithm the vault uses and he can do it himself to learn more. go ahead and use a vault, it’s doing the *exact same thing* behind the scenes
throw up in the infinite loop.!
we have our own methods of programming
Yes, it's fully compatible. It's "just" compiled and tuned by Intel experts to take full advantage of Intel CPUs (with some fancier stuff in Numpy and other compiled extensions). They're pretty good about sharing it back upstream where possible, but this wouldn't work well on AMD cores, or *at all* on ARM CPUs like the Raspberry Pi.
r/dataisbeautiful 
[Freelancer] [Remote] Hello! I have experience in the following tasks: * Discord, Reddit and Twitter bots. * SMS and Email notifications using the Twilio and Sendgrid APIs. * Web scraping/data mining using BeautifulSoup, Requests and Selenium. * NoSQL, SQL, JSON, XML, CSV, XLSX, HTML conversion. ## Examples of my coding style * [Desktop GUI app that helps freelancers and employers using wxPython, SQLite and Requests.](https://github.com/PhantomInsights/forhirehelper) * [Discord Bot using the Yelp API.](https://gist.github.com/agentphantom/ee685362b2546d0b6b02596a83b679c2) * [Twitter Bot using Requests and Tweepy.](https://gist.github.com/agentphantom/798bd3511c242de526ac3a5ccbeb90e5) * [HTML to CSV using BeautifulSoup and Requests.](https://gist.github.com/agentphantom/7c7a6db62ae02093160b9085d3bb6858) * [HTML to CSV using Selenium and BeautifulSoup.](https://gist.github.com/agentphantom/77eb3f8a9177c4c0b35c6b1e289d4efc) * [HTML to SQL using BeautifulSoup, Requests and SQLite.](https://gist.github.com/agentphantom/712b87e8fc54f92b37cd06e84b25aeb3) * [GitHub API to Firebase Realtime Database using Requests.](https://gist.github.com/agentphantom/069d2bf410f5d2fee9306cc2f2070fb1) * [Desktop GUI App that finds and saves free proxies using Tkinter, Requests and BeautifulSoup.](https://gist.github.com/agentphantom/d1d2564e10ad83378efd0ab833d59dba) * [Statistical Analysis with Requests, Pandas and Matplotlib.](https://github.com/PhantomInsights/mxn-performance) Feel free to ask any questions here or via PM. ***** [^Website](https://phantom.im) ^| [^GitHub ^Portfolio](https://github.com/agentphantom)
Has anyone used Altair? Any comments about it?
Regarding recreational value, I can neither confirm nor deny that I have built a webcrawler that downloads jpegs for comics from shady comics sites and packages them into cbr files for handy offline reading on my tablet. 
`pytz` does timezone-related stuff better than Python built-in code (it relies on operating system to provide that info, but this makes code operating-system dependent because different OSs treat time differently). If your ultimate goal is consistency and correctness, then `pytz` is a good choice. If you can live with inconsistencies caused by discrepancies in OS handling of timezone-related info, then you don't need it.
Don't give up completely if you want it.
Consider crossposting this to /r/visualizedmath, they will love it for sure.
This is very useful! never thought it that way.
Thank you for the reply. I’m using serverless (AWS Lambda), so using pytz requires me to upload and maintain it. My preference would be to not use any additional packages, but it’s not a deal breaker. 
If you want to try again with less risk, do some initial training on simulated conditions (if the API of the platform you have gives the necessary data). For example, the GDAX order book is completely streamed via the websocket API with slight delay. After you make an psuedo order, you can use this API to determine if /when or if not that psuedo order would have gone through (and plot your fake profits accordingly). This isn't true of all platforms though, so keep that in mind. When you think it's ready, do it for real. Of course always only put in what you're willing to lose.
Subscribe to the python\-dev and python\-ideas mailing lists, review some of the recent and in\-progress PEP proposals, clone cPython and start looking at the internals for the standard library features that you often use. You can also go on Youtube and search for the latest PyCon videos, there are often talks by the python core developers that go into more advanced topics.
It's already been answered, but I'd probably do something like this: print('Welcome to Average Grades Calculator') ordinals = ('1st', '2nd', '3rd', '4th') grades = [] for i in range(4): grades.append(int(input("Enter the {} grade: ".format(ordinals[i])))) def average(lst): return sum(lst) / len(lst) print('The Average Grade is', average(grades))
Conda does this but doesn't have all PyPI packages. Also, occasionally you have things that assume that `python` references the system installed Python 2 rather than your default conda env. Way better than anything else I've seen though.
You do not know what an IDE is (and thats OK)! Python is not an IDE and Anaconda is not an IDE. PyCharm is an IDE. You can think of an IDE as a text editor like notepad except it is all fancy and knows stuff about (in your case) Python. It can suggest code for you to use. It can run your code for you. It can help you organize your multi-file projects. It can help you organize the code within your single-file project. It can do all sorts of stuff. Some people do not like IDEs that have never made sense to me, but whatever.
Why are so many people still on older versions of python? I can see why it doesnt just update itself \(for commercial python use for example\), but Python 2.7.0 was released on July 3rd, 2010... 8 years ago. Isnt an update to a higher version with the update of the code not worth it?
Let's see lst = [y for x in iterable if (y := complex_func(x)) &gt; 0] lst = [y for y in map(complex_func, iterable) if y &gt; 0] 
&gt; It would have been really easy to avoid this problem if you had treated your python environments as disposable artifacts of your projects. FIFY
It's a lot of code to update. Most open source libraries are compatible with python 3 but a lot of companies aren't willing to migrate entire codebases internally. Also, as far as programs assuming you have Python 2 in your path, that's because OSX and most Linux distributions have it that way and very few have python 3.
r/learnpython
Actually the opposite ;) 3Blue1Brown
Except that means it's a huge PITA to install Python command line tools. At this point, when I see a command line tool looks cool but is written in Python it makes me really sad because there's not going to be a good way to get it installed without first going through a disproportionate amount of work to give it a working environment.
I wrote some personal notes on this over at my blog, which could perhaps help you: https://fredrikaverpil.github.io/2017/11/30/dates-and-databases-with-python/
&gt; Why isnt there just one python installer that installs the current version of python, sets every setting you need by himself like the PATH and then has a manager for all packages. [relevant xkcd](https://xkcd.com/927/)
Oh, you mean like this: https://m.xkcd.com/927/
Why do you need to "install" them?
It's worth pointing out that Pokemon Company likes their trademarks, my friend Tim got a cease and desist when he made a pokedex app for ios, be careful. http://timoliver.blog/2011/07/11/ipokedex-copyright-notice-from-tpci/
If you're on linux you can usually use your distribution package manager, otherwise I reccomend https://github.com/mitsuhiko/pipsi
Most Linux users have little value-add from Anaconda AFAIK. Isn't it just a cargo cult?
- Stop using RedHat. - Stop using Amazon Linux. - macOS… not even once, even if it isn't that hard. - Have fun with some version of Fedora, Ubuntu, etc. If you must use these, use `pyenv` to properly install Python… to some hidden directory.
Is there yet some force in core Python dev team which would shield the language from such *free-cool-in* attacks ? Some authority which would carefuly consider all the benefits and costs of adding yet-another-new *appealing* feature ? I'm afraid original BDFL has already forgot his own principles, Python was built upon and did succeeded. Hasted changes and compatibility-breaking changes between 3.0, 3.3, 3.4, 3.5 and 3.6, introduction of 4th (lexical) way of string formatting (aka fu-strings), inclusion of foreign and unwieldy asyncio in stdlib when there are more elegant and clean solutions like gevent or twisted, accompanied with introduction of yet-another keywords instead keeping its set as minimal as possible etc. It looks like Javascript infected folk circles around Python like vultures ^/s 
[`pipenv`](https://github.com/pypa/pipenv) fixes a lot of these issues.
Linux and python are friends. Mac, not so much. 
Unfortunately, yes. You do. It's better to not think of Python like you think of Java. Think of Python like you would think of, say, a project's metadata. This is a huge problem with languages like Python, JavaScript (through Node.js), Ruby, etc. When it becomes necessary to use native facilities to accomplish certain goals, the dependency manager is going to get stupid complex, and it's not reasonable to assume that a single installation is going to work. You can try, though. You might get lucky.
Honestly I don't think anyone does, it might be tempting to install it to not have to setup up python properly. But even on OS X it will only ever save you any time if running some source as a one off IMO. The number of times I've looked at coworkers and friends broken python setups on OS X and it has been Conda related is in the dozens.
Actually figuring out virtual environment when you begin is a mess. You find infos on using venv, virtualenv, virtualenvwrapper, pipenv…
Thanks! I didn't know you can add dependency links through `setuptools`. However, like you said, this still isn't very ideal. I really wouldn't want to maintain a configuration that I have to update depending on which branch I'm going to be working on. That's near as cumbersome as Git submodules. &gt; Another problem with this is that you wouldn't really want to include optional dependencies, s.a. say `pytest` or `pylint` in setup.py, but managing both `setup.py` and, say, `requirements.txt` is probably still worse... As for the optional dependencies, what I have are maintain 2 different lists of requirements: one for some sort of "production" and the other for development. Only the production list is read in `setup.py`. 
My setup on macOS 1. Install Python via packages at Python.org. (Using Homebrew for this never made sense to me.) 2. Every project has its own virtualenv. I don’t recall ever needing sudo. I’ve never had any of the issues described in the comic. 
I use Anaconda fairly heavily. It's a godsend while doing any numerical or scientific computing. I really couldn't imagine installing all the various package that have bits and pieces that depend on C or Fortran or Cython whatever by hand.
Pyenv + pipenv seems to be a solution
Good point. Wasn't sure how well that work with all Reddit apps vs just the image but you do miss out on the alt text.
&gt; Why isnt there just one python installer that installs the current version of python, sets every setting you need by himself like the PATH and then has a manager for all packages. You are describing the official installer (which installs python, sets the path, and installs pip). The PROBLEM is that every few months someone believes they can do a better job. So you get some half-baked solution (which then has its own pros and cons), and then a bunch of half-baked tutorials and half-baked fans claiming "this is now the way to do it!"
And that's why you use `pyenv` and `virtualenvwrapper`.
IMO, there's actually 2 different core issues with the Python source and dependency ecosystem: - FOSS. You're relying on people doing this for free in their spare time. If you don't like the result, then help figure out how to make it sustainable. - Age. Python has many different stable ways to get it and their dependencies, but they've evolved in small minor ways and sometimes had full-sale replacement of pieces.
Or, like all things, it can be fixed with docker containers.
We never get to do things without problems. We only have the option of choosing the problems we're comfortable living with.
No, refactoring working code can be very important too.
https://xkcd.com/927/
Step 0. Get a proper IDE such as PyCharm. Step 0.5. Understand that Python is different than a statically typed and compiled language. 1. others have suggested some more advanced books. Also don't under-estimate the official python tutorial https://docs.python.org/3/tutorial/ 2. I don't really understand this question but I think it just boils down to clear design and separation of concerns in your code base, and proper naming of things a) don't bother too much by the type of things, learn about Python's "duck typing" (dynamic nature). That said, there are *type hints* nowadays that a proper IDE will use. b) help() and dir() are nice things to use in a REPL, yes. If you really like to work interactively like this, look at the IPython shell which provides a greatly enhanced REPL c) no, write / read proper documentation? Sphinx is a library that is often used when creating documentation for Python programs. d) Sure. Pycharm can do this, and if you use type hinting, it gets even better at it. Don't 100% trust it though because Python is so extremely dynamic e) Learning APIs is something we do regardless of programming language, isn't it 
&gt; there's no must-have features, etc. well yeah because the dev team kept back-porting all the new stuff they were coming up with to 2.7.x - if they'd cut off the flow the pressure to migrate would have come on a lot sooner. 
There's [this new package manager](https://github.com/sdispater/poetry) that seems promising.
&gt; Making that combination work on macOS takes stupid amounts of hacking. I'm not sure why nobody nowadays favors python installed via macports, because such combinations as you mention have worked great in my experience… even with different side-by-side versions of Python.
If you are a programmer by trade or majority of your work, environments probably seem straight forward. If you are someone who used Python as a TOOL to supplement what they usually do, environments are a PITA and things like Anaconda at least try to manage the pain. 
You compile your Python dependencies? Wow.
&gt;It's really easy to ~~avoid~~ multiply this problem if you treat your python environments as disposable artifacts of your projects.
Develop independent packages independently. If A depends on B, you should only be testing A with the release version of B, not an editable version. You might develop locally with editable versions, but your build system should only care about released versions since that is what you run in production. 
The best way to avoid this problem, IMO, is to just learn these two things: 1) How does the PATH variable work in UNIX? 2) How does the Python interpreter know where to look for packages? If you understand these two things, you can have multiple versions of Python all over your system and still understand what's going on.
I disagree-- same analogy, different heaps. For example, lets change the heap to in the shape of some cylinder X made of different varying-height infitesimal disks of various materials. In this way the density would be a good measure of bloat, no? N disks define Python as of 3.7. The next feature would be the next disk-- the denser this next disk added, the more useful the feature, the less bloat. However if it's made of styrofoam, you just added a volume of size cylinder/ N + 1 while barely increasing the density. Now at what point is this new cylinder significantly different than it prior to the most recent disk? It's a completely arbitrary line to draw, and in that sense, can't be reasonably drawn. But it seems you share in this idea, right, given your comparison of different uses by different individuals? So how can one definitively claim it superfluous? Superfluous for you? Possibly. But for me, assuming this PEP's implementation's opcodes are done in a given order (doing the comparison before assigning-- and this is fine because it really doesn't matter which you do first at the opcode level (see bottom for what I mean)), then this is a major benefit for some of the production web apps that I work on. And sure, maybe one guy doesn't like PEP572, well, tough fucking squash. When you're the leader you get to decide. Otherwise you'll follow me. There's one coworker who insists on putting `continue` at the end of every for loop. No way in hell. That's the price of this industry-- there will be someone whose code style you don't like, but you will eventually be forced to follow it, even if temporarily. ## the opcode optimization conundrum Let's say I have the function def do_stuff(input): res = parse(input) if res: return res ** 2 As a completely arbitrary example. Now, to simulate real world conditions, where data shows that res will be truthy 75% of the time, `parse = lambda i: random.random() &lt; .75`. So the opcodes are as such, with the timing of each action in units `t` (t because the wall time is near infinitesimal on a one by one basis) or `f(t)` if irrelevant to the comparison I will make), is as follows:
&gt; Is that really so hard to do? Yes! Producing one installer and package manager that suits everyone's needs is almost impossible, and persuading everyone that it's better than the stuff they already know is even harder. There are plenty of tools that work well in particular situations - e.g. for scientific programming, lots of people happily use conda. But you can also install packages through apt, or through homebrew, or manage Python versions with pyenv, and different people like all of those options.
I disagree-- same analogy, different heaps. For example, lets change the heap to in the shape of some cylinder X made of different varying-height infitesimal disks of various materials. In this way the density would be a good measure of bloat, no? N disks define Python as of 3.7. The next feature would be the next disk-- the denser this next disk added, the more useful the feature, the less bloat. However if it's made of styrofoam, you just added a volume of size cylinder/ N + 1 while barely increasing the density. Now at what point is this new cylinder significantly different than it prior to the most recent disk? It's a completely arbitrary line to draw, and in that sense, can't be reasonably drawn. But it seems you share in this idea, right, given your comparison of different uses by different individuals? So how can one definitively claim it superfluous? Superfluous for you? Possibly. But for me, assuming this PEP's implementation's opcodes are done in a given order (doing the comparison before assigning-- and this is fine because it really doesn't matter which you do first at the opcode level (see bottom for what I mean)), then this is a major benefit for some of the production web apps that I work on. And sure, maybe one guy doesn't like PEP572, well, tough fucking squash. When you're the leader you get to decide. Otherwise you'll follow me. There's one coworker who insists on putting `continue` at the end of every for loop. No way in hell. That's the price of this industry-- there will be someone whose code style you don't like, but you will eventually be forced to follow it, even if temporarily. ## the opcode optimization conundrum Let's say I have the function def do_stuff(input): res = parse(input) if res: return res ** 2 As a completely arbitrary example. Now, to simulate real world conditions, where data shows that res will be truthy 75% of the time, `parse = lambda i: random.random() &lt; .75`. So the opcodes are as such, with the timing of each action in units `t` (t because the wall time is near infinitesimal on a one by one basis) or `f(t)` if irrelevant to the comparison I will make), is as follows:
For sure. I consider this degree of understanding to be a prerequisite to the aforementioned strategy.
why would you install anaconda and your system python?
Congratulations on manually recreating virtual environments the hard way. You get a gold star for wasting time.
there's a few other nuissance things, like they don't include all the test framework stuff with all versions. So my pystone demo program for teaching really basic HPC environment management and job submissions requires like... anaconda python 3.4?
Conda had a massive advantage before wheels were widely available, because pip would try to compile things like numpy from source, which usually won't work unless you prepare your system in advance. Nowadays, that's less important, but there are still things that it's easier to install through conda.
thanks for the info!
at least it's documented and easy to understand in python. R is as bad or worse, and essentially not documented at all.
The Python org has declared pipenv to be best practices, so it is the only standard, as far as I am concerned.
You are just saying that the mess is incomplete...
IT's nothing complex, haha. :) Sure, will star and fork it ! 
I just install them with pip, with the --user flag. Works well enough, although updating is a bit of a pain. I'd rather do that then mix between pip and my package manager though. 
I use Python as a scripter for an engineering FEA program called Abaqus. Obviously Abaqus has refused to upgrade to 3. So I'm stuck with 3 too. The problem is compatibility. 
They don't. OSX in particular has a really crappy story around it.
As somebody who struggled with Python installations when trying to learn Python (as a primary R user) and having to use both 2.7, 3.6, virtual environments, and an IDE... I'm so glad to see that it's not just me. I still don't fully grasp where my python packages are when I install them by command line or PyCharm.
That's no longer the case. As far as I know, [python.org](https://python.org) has removed that endorsement
Basically the difference between the two versions now is "the one that breaks old code" vs "the one that breaks new code"
How does one get around this if I use a laptop that has &lt;1gb of space free and I want to do many different things?
read the sidebar.
I assume you'll be first in line to stop using all the code that was paid for or contributed to open source software by these companies? Here's an article from a couple of years ago that says that 57% of changes to the Linux kernel that year were made by programmers who were working for companies like Intel and (*gasp*) Redhat.
If you’re already familiar with programming, check out Fluent Python, and Effective Python books. Both are great resources to really dive into to python.
Hmm, I use CLIs all the time without any headaches at all - not sure what the issue is here. Create a virtualenv, pip install into it, activate your environment and run your commands. If you want to cron them up, just run command via that virtualenv's python. If you want to run a lot of tools and not switch virtualenvs that often, create a group one for related (or all) projects. Admittedly, it's easiest if you're using linux &amp; pip consistently rather than macos, homebrew and conda. But it's not that much worse.
It's only a mess if you've created environments without any consistency. If you're being consistent it's pretty easy.
The best option usually is to have a single thread interact with the database, with either a single producer single consumer ( thread safe, maybe lockless ) or multiple producer single consumer queue in between. Since you want 2 threads, you would have those 2 threada writing operations to the queue and the other thread interacting with the database. Other option is only one thread opening editing db at the same time with mutexes/locks etc, however it's problematic and possibly slow since then you need to open and close the db frequently.
/r/learnpython 
Next time I'll try macports; I think I had trouble making it work, but that was several months ago.
See OP's image.
I feel your pain. I haven't had to rely on python packages that include a CLI tbh, but couldn't you wrap the environment activation + CLI call into a bash script which you add to your path?
https://packaging.python.org/tutorials/managing-dependencies/ doesn't seem to indicate that sentiment: &gt; Pipenv is a dependency manager for Python projects. If you’re familiar with Node.js’ npm or Ruby’s bundler, it is similar in spirit to those tools. While pip alone is often sufficient for personal use, Pipenv is recommended for collaborative projects as it’s a higher-level tool that simplifies dependency management for common use cases.
That is, in fact, how I do it, most of the time.
On all of my development systems (and three coworkers), I have installed virtualenvwrappers and appropriate `.bash_profile`s to always activate a user-level default virtualenv. This has spared me the fun and games of Randall Munroe’s illustration, because the worst case scenario (we’re on OSX laptops with SIP enabled) is that someone uses `sudo pip` and merely permission trashes the virtualenv, which is sooooo much easier to fix up. Virtualenv isn’t just for isolating a single project - it can give you a generalized python environment that “just works” with pip without stepping on your package manager.
Mine was like that until I switched to PyCharm. Makes managing virtual environments so easy.
ok, so there are clear reasons why enterprise distributions ship old versions, mostly relating to being able to up*date* without the changing semantics that require massive reworkings of code / deployments that come with an up*grade*. There are generally reasonable timeframes set out for operating system and software (like python) distribution end-of-lifes, and like all good/bad/ugly things, there's a good hacker news post discussing the recent release from red hat of python2 being replaced by python3, a good clip before the end of python2 end-of-life: https://news.ycombinator.com/item?id=16808683 People that write code for enterprise companies generally want their experience to be as good as possible as well. The issue that comes in is ensuring a consistent runtime environment (a lot of these environments get audited and cannot get major non-security upgrades without a re-audit) and a consistent development environment (you can't split a large project into python2 and python3 sections, so you stick with what you already have working). I understand wanting to run python3 and I understand not thinking there are good reasons for enterprise customers to move "slowly" (and I definitely think they do move too slow), but the simple fact is that the larger the company is, in general there's an array of various different requirements that smaller companies don't have that lead to an aversion of major version upgrades.
This is awesome. I didn't realize this existed! I've just been using `pyvenv` and `pip`.
&gt;Why isnt there just one python installer that installs the current version of python, sets every setting you need by himself Woa woa woa, watch your micro transgressions bruh /joke 
We have some SEM tools which a lot of users use to certain types of images. These images are then characterized using another application (`AppA`). The characterization of these images are non-trivial and I am not trying to replicate the process of characterization as the `AppA` already does it pretty well. The challenge (and possibly advantage) with this image measurement application is that it's proprietary and very expensive and more importantly runs on a single server. So in order to build the pipeline, I have to have users seamlessly connect with the server (which runs `AppA`) which in turn connects to another server to grab images, and then connects to another server to drop of measured images (and in future dump it into a proper database) and then connects to the users computer, to finish of the analysis. Because users typically don't all this automatically there is little risk of wiping out the entire history of images on the servers. But if I use the production servers, I could pretty easily wipe out the entire history of images generated by users. So I have to simulate what would happen in production using VMs, and mocked up databases. Secondly, because this might be used almost daily, I have to make sure that the pipeline can work reliably. The initial setup of these VMs and infrasture was a bit complicated, but after that it has become pretty easy to run a lot of tests, and make sure that this works reliably.
Honestly I also use perl and ruby and it's roughly the same kind of mess.
Yep, this is my challenge. 
It's not satire, it's DLL Hell. I know how to compile things. I don't have time or capcity to learn every local idiosyncratic pip/gem/npm/whatever thing. Nor am I much inclined to let the language/OS be in charge of how and when I upgrade packages or add dependencies. Looking around me at coworkers, I actually spend less time in the long run maintaining build systems and the like. Because I know **exactly** what's in there and why and have it under 100% control.
I don't get how you get in this situation... Just use Python from homebrew and then install everything with pip. At max you get two Pythons (2.7/3) and two pips (pip/pip3).
Actually [HN recommends](https://news.ycombinator.com/item?id=16958818) pipenv.
`pipenv` is a year or so old and is recommended for certain use-cases for multi-user collaborative projects. But it's not like `pip` or `virtualenv` or `conda` aren't recommended for other uses (or were recommended for things like `easy_install`). I should also add anecdotally I first heard about pipenv late last year when a facebook friend (new to python) botched up all his python environment and couldn't get libraries to work.
This week, I have finished writing out one of the tests for one of the classes, client to server communication. This week I will be working on another test class which tests the same class to a fuller extent. This part of the code will be heavily used, so I need to make sure that it works well and reliably for users, especially because its going to be part of the daily workflow, and any downtime could be very expensive. I did also find that as my code became more and more complex and remember, having these tests, gave me more bandwidth to think about adding new features and modifying the code, without the fear of breaking something. I could always just press a button and verify whether this broke something or not. Following that, I will have to fix up a part of the integration test suite with some manually created data, and then switch back to fix a broken feature which is preventing me from testing the full integration test. 
Can you give us more details on this is used? Sorry I'm still using the mess of a management system shown in the comic. I have Python 3 \+ libs and Anaconda accessed through the anaconda prompt.
You install them by hand with `conda install`… or are you telling me you just don't know the names of the _few_ packages you use?
Do you have specific examples? I haven't found anything hard yet—just had to install an obvious build dependency through the package manager. It's only annoying when the build takes 15 minutes _then_ I get annoyed (looking at you spaCy).
Of course I'd do that if I could. My SSD is soldered in and I already use usb for extra storage. Yes, you may say "upgrade your laptop" but I can't afford it :)
Linux Mint uses a 3rd version of Python too, python3.4. I remember I somehow installed modules for py3.4 when I wanted it for py3.5 when using pipenv so that's a thing. I'll just stick to ubuntu, pip3, and virtualenv.
I don't know why you got down votes, life is so much easier if you are consistent.
I don't use Java. Pretty sure Java can have the same problem with any package manager. Version hell is just a product of the ecosystem, not the language. A dependency resolution algorithm is complete and produces results or not based on what's available, or is broken, _which is undefined behaviour_. `pip` ain't aware of anything installed on the system AFAIK. It just calls it (or the package build instructions call it) and hopes for the best. I'm not talking about web apps with deps locked in `setup.py`, `requirements.txt`, `Pipfile.lock`, or whatever you use. Please explain (**not rhetorically**) the ~2334 packages in Arch Linux that somehow must mostly work, using the system Python (3).
and it's buggy AF too. 
I'm currently learning Django (templates). Django has really been challenging but with the help of the official documentation and a udemy course with some textbooks, I am getting along with Django.
https://www.reddit.com/r/Python/comments/8fztrr/xkcd_python_environment/ https://www.reddit.com/r/Python/comments/8fzu4o/xkcd_python_environment/
No need to be snarky friend. For example, numba. It's a PITA to install, but comes with anaconda. And my life is significantly simpler thanks to numba. I just wanna get my work done, not spend a day figuring out how to get my system to install various things. Anaconda helps me do that, and comes with a bunch of packages I use frequently to boot.
or `pipenv` with `pyenv`
This is how I feel about tools in perl, go or js. I guess it all just depends on how familiar you are with the environment and package ecosystem.
thanks for the answer. 
You don't need `virtualenvwrapper`; `pyenv` comes with the `pyenv-virtualenv` plugin by default, and from there you should do all of your management of conda envs and virtualenvs through `pyenv`. It's a one-stop solution. P.S. It's not *perfectly* one-stop because you need to fiddle with it a bit to get conda environments to work. But it's nearly there. P.P.S. Windows can go fuck itself
Not snarky. It's not _my_ world. And what's there to figure out? You just `conda install […]`. Non-rhetorically, do people really lose track of the projects they use… when they import them at the start of every notebook or Python module? I usually do know everything I run and only install that, in each project. Same reason I don't run 'buntu. I treat every project I do as a proposal to the bastard operator from hell, the administrative fascist, or the statistically likely subset of your install base if you go big who will complain about all the dependencies you have to install on their neat and tidy cosy system.
You're right, that's what I use. But since it replaces `virtualenvwrapper`, I still think of it that way. 
`pipenv` *was* recommended by PyPA (and by extension, python.org). They removed that recommendation a few months back afaik.
To be fair I DID make a thing. And i thought the title wouldn't do it justice so i described it better in the comments. It would be one long\-ass title if I said the same in the title haha
It seems like you've already got the solution at hand.
[that's not true](https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies)
Gotcha, my only gripe is that people post stuff labeled “I made a thing”, it’s normally people trying to be cute and humble but are actually begging for attention. If this is an unpopular opinion so be it. 
&gt; Pretty sure Java can have the same problem with any package manager. Java doesn't have a package manager. You can use one of several that fit your needs, but there is no standard package manager. &gt; Version hell is just a product of the ecosystem, not the language. For sure, but this is less of a problem in a language that lacks the ability to install system-wide libraries. Like Java. &gt; Please explain (not rhetorically) the ~2334 packages in Arch Linux that somehow must mostly work, using the system Python (3). The packages provided by Arch linux are to fulfill dependencies required by other packages provided by Arch linux. It's as simple as that.
Ah, it's back. I'm almost certain this recommendation was rolled out and then pulled back a while ago, though.
We downvote everything here...for consistency.
What do you need to know? The the method's documentation is in Python's documentation: [`list`](https://docs.python.org/3/library/stdtypes.html#list) [Sequence Types](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range) [More on Lists](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists) The CPython implementation (code) is -- I believe -- [here](https://github.com/python/cpython/blob/master/Objects/listobject.c#L2421). I'm not certain, but that seems to be an in-place list reverse which is what Python's `list.reverse` method is. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**listobject.c#L2421** (master → ddbe976)](https://github.com/python/cpython/blob/ddbe976964933cb943c6383a776e800cc7e0f47d/Objects/listobject.c#L2421) ---- 
Where is Pypy ???
"All problems in computer science can be solved by another level of indirection." - [David Wheeler](https://en.wikipedia.org/wiki/David_Wheeler_\(computer_scientist\))
Botched my box for a bit just trying to setup for a course I was taking. I, unfortunately, assumed user install would be default like npm, etc., not global. Then install Anaconda for the class only to realize later that I really shouldn't have. Thankfully I had a bud that filled me in on virtual environments and that being normal. 
You literally made fun of OP for no reason whatsoever. I guess the only line you draw is around yourself?
Just in case I wasn't clear.. there are _still_ no must-have features in python 3 by comparison to python 2. Migration that happens at this point is primarily because python 2 is being deprecated in most systems.
again, because they kept back porting stuff they were adding to 3.x that wasn't in 2.x. if they'd cut off the updates from 2.x it might have added some incentive. 
I'm guessing he didn't mean it in the specific programming sense of "convert to bytecode" (or something) but the more general sense of "get them all together". 
I'm not sure I can help with the regex but what's your use case? I run a movie theater and have considered creating a similar project that grabs showtimes from all of the art houses in my city. There's a site like this in NYC called Screenslate.
&gt; FOSS. You're relying on people doing this for free in their spare time. If you don't like the result, then help figure out how to make it sustainable. The Python Software Foundation is being sponsored by a *lot* of companies, and being given presumably non-trivial amounts of money. I think they're beyond the point where it's just a few people doing it in their spare time. https://www.python.org/psf/sponsorship/sponsors/
I think they're getting downvoted because their response isn't really a helpful one. I believe the original comment is making a point about how confusing the environment system is *for Python beginners that lack experience using virtual environments*. If you're at the stage where you're dipping your feet into Python and following tutorials you may be instructed to use pipenv, pyenv, venv, conda etc. depending on the author's preference and/or the environment manager du jour when the tutorial was created. Furthermore, beginner tutorials can gloss over Python best practices like virtual environments in an effort to simplify things and jump right to learning syntax. So, as ilvoitpaslerapport said, "figuring out virtual environment when you begin is a mess." Simply saying "be consistent" doesn't really address that issue at all.
Haha. Yes. The dude is toiling away when all it takes is 2 commands. To each their own I guess.
Sounds nice. Do you have a resource that can walk me through that in Pycharm? I was using scrapy which required a virtualenv in terminal and (it worked but) it always felt like a black box of what was happening to me.
Exactly, and most articles/tutorial/forum posts you find on the topic are outdated (or rather you don't know if they're outdated).
No I think there was a misunderstanding. It isn't about losing track of what you have, it's about the ease of conda vs. manually compiling all the various C, Fortran and who knows what extensions that a particular package uses. Basically I'm saying conda saves me a boatload of time and so I don't think it's a cargo cult, but I guess for a non scientific or numerical computing audience it may not be as useful.
Please don't submit with an all-caps title.
If you're open to substituting multiprocessing for multithreading, then you can access a single SQLite database with multiple processes. The DB will consider them separate connections and subsequently provide its own locking mechanism that you don't have to write yourself. 
my old 2 core laptop just freezes when using this garbage ide, have to do hard restart. 
And when you get stuck and ask someone for help... if they're using a different setup, they can't/won't help you until you change your setup to match theirs. God forbid you ever talk to more than one person.
- egg vs wheel - universal vs pure wheel - setuptools vs distutils - install_requires vs requirements.txt - data_files vs MANIFEST.in - package vs distribution vs binaries - pip vs conda - install -e vs install - virtualenv vs venv vs pipenv - for each above: python2 vs python3 - oh, ***pip is incapable of true dependency resolution***
If the two threads are not actually accessing the database concurrently but intermittently, another option that can tide you over is: sqlite3.connect("my.db", check_same_thread=False) 
Read the sidebar then proceed to r/learnpython
Sry didn't know
You could: - Google something like "python machine learning tutorials" - Try r/learnpython, but that would involve reading the sidebar, so that's probably out for you
conda offers MLK Math Kernel Library, good speedup for Intel chips.
This image is outdated now. The answer is Docker.
On the command line you're likely installing to a system-wide directory. Just typing `python` on the command line will use the 'global'(system-wide) interpreter installed on your system. Same with `pip`. When you run `pip install` a package and it's dependencies are downloaded from [PyPi](https://pypi.org/) and installed to something like `&lt;python_install_dir&gt;/lib/site-packages`. That's the 'global' site-packages. You can do `pip install --user` to install these packages under your home directory, effectively making them user level instead of system wide. You can use something like [venv](https://docs.python.org/3/library/venv.html) to create a 'virtual environment'. A virtual environment has it's own python executable and site-packages. So if you were to create a new project you might create a new environment associated with it. The virtual environment can be located wherever you want, the important thing is to run the 'activate' script inside it which updates your PATH and other environment variables. After 'activating' the environment typing `python` will use the environment's interpreter rather than the system-wide one. Running `pip install` will install packages into the environment specific site-packages. When you create a project in PyCharm you're given the option to choose the interpreter. You can either use an existing interpreter(system wide one for example) or you can create a new environment using something like virtuanenv. When you install packages through PyCharm you're installing them the same way as you would on the command line, PyCharm just takes care of it for you. So if the project interpreter is in a environment then packages will be installed in that environment, if it's a 'global' interpreter then the packages are installed to the global site-packages.
Don't forget virtual_env 
&gt; if they'd cut off the flow the pressure to migrate would have come on a lot sooner. In computing history, trying to force people to upgrade fundamental technologies when they have a big investment in current versions and compatibility isn't guaranteed has rarely been successful.
I create my own python virtualenvs for my node projects. (And every time I have to look up how to install node to a python virtualenv.) 
Well in Python I'm trying to make a *QR Code scanner*. Right now it only encodes a string into a QR Code and saves the image as a *.png* and decodes a QR Code from a *.png*. I will start working on the scanning part(I mean pointing the webcam to a QR Code and the app decoding it) tomorrow. I'm using [an api from goqr.me](http://goqr.me/) to do the encoding and decoding of the code. 
You're asking more of an architecture question than a Python\-specific question. There's lots of intro to game development books that have design patterns that would help solve your problem. You're probably looking at something akin to Model\-View\-Control \(but for gamez, Model\-View\-Director, maybe?\). 
On Windows it makes things drastically easier. I realize the comic is macOS though.
And you are extremely, demonstrably wrong in thinking that. Sure, the sponsors give about $500k per year, and that's not a little amount of money. However, if you look at [their financials](https://www.python.org/m/files/2016_redacted.pdf). You can on Part VIII that $2 million comes from PyCon. And you can see without it, that PSF would be dead. However, the majority of Python--language itself, distros, pip, pypi, even the conference itself that generates revenue--is developed still with volunteers. And few appreciate the quantity of effort donated.
404 error, did you take the page down?
You don't need any. It's as simple as checking a box when you creating a new project. https://imgur.com/lk7Qnli For existing projects you can go to settings&gt;Project Intepreter and add a new environment. If you wanna do it through command line you can make a venv within the project folder by virtualenv/venv/pipenv as python2 -m virtualenv ./venv This makes an isolated env (a copy of python and default packages) in the folder ./venv. Now activate the venv as : source ./venv/bin/activate When activated all packages installed through pip are installed within the venv (doesnt affect global python environment) unless you use sudo. 
Sure but there's no core python version on Windows. In osx and Linux there and and doing this is basically guaranteed to break things.
The experiment I'm working with (ATLAS) users python as a configuration/steering language for the C++ based event processing framework. That's stuck on python 2 and I highly doubt it's ever going to be migrated...
I tried ggplot2 for python. Its syntax is pretty straight forward, and it does a nice job for most everyday cases. The trouble started when I needed some customization, it was pretty inconvenient. Since then I have invested in familiarizing myself with matplotlib. It may take a couple extra lines of code, but it gets any job done. Also, I read that seaborn is built on top of matplotlib, I may need to look into that for my next project. 
Have you looked into flask-marshmallow?
If you're on linux, please use Anaconda. * Firstly, If you're doing data science it has most if not all data science libraries pre-compiled. I recently discovered the the absolute gold mine that is **cudatoolkit**. No more having to compile CUDA manually. * Secondly, it's fully local so you don't need special permissions and all you need to do is add it to your path. I understand that for beginners, adding something to the PATH is not trivial. Here's a simple guide: Create a new file called *~/.conda_bashrc3* and copy paste the contents of this [link](https://gist.githubusercontent.com/nitred/714f15f24c67e1c91b7efc106bc535c6/raw/.conda_bashrc3) into the file. Then append your *~/.bashrc* file with these two aliases [here](https://gist.githubusercontent.com/nitred/714f15f24c67e1c91b7efc106bc535c6/raw/.bash_aliases_append). Afterwards if you ever want to add Anaconda to your path, all you have to do is type *anaconda3* and you will have a red color indicator that you're using the anaconda environment. If you want to exit or remove anaconda from your path, just do *CTRL+D*. * Lastly, the best and most underrated feature of anaconda is the the **environment.yml** file. It is like requirements.txt but additional environment creation and conda installation support. Please follow the guide [here](https://conda.io/docs/user-guide/tasks/manage-environments.html#creating-an-environment-file-manually). 
Thanks for the info, I'll be sure to give those a look. 
Having to use two version of python is a pain. 
Thank you for writing such an articulate response! 
I'm also secretly "mapping" out my Discord channel's user sentiments with the use of TextBlob and then use that data to do some cool stuff. So excited for this project. :) 
How does this improve on the virtualenv plugin for pyenv? I've never used virtualenvwrapper with pyenv because that plugin does it all for me, I thought.
Pyenv works fine on a Mac.
Not that I'm aware of. Sounds like a neat project, though.
That’s true of any language...
This is probably the most annoying thing about programming in general for me. The actual *programming* is nice and comprehensible to me. But then there's this whole nether world that *in theory* is supposed to all just happily run by itself if you use apt-get and pip. But then, because it's all invisibly run by these environments, suddenly something breaks, and you're basically having to learn a whole new level of the operating system - almost like learning a whole new programming language - just to get back to actually programming in the language you wanted to program in...
Not on Linux
No. Just have that. You won't need anything else. It has all the python versions you can think of and a way to switch between them, without affecting anything outside your current shell session. It also does not affect the python that comes with the OS. Plus it's totally user local. You don't need root to install python using pyenv. 99% of the time, pyenv and virtualenv will be all you need. It won't clean an already dirty environment, but it will keep your clean environment from getting dirty.
I worked with a team that for a while routinely made a mess out of things this way. All it took was a quick conversation along the lines of "so, is all of your software installed with the same tool?". Then they immediately realized, that holy shit - they had installed software five different ways. And this obviously doesn't work. It wasn't difficult for them to figure out, fix, or avoid having again the future. Though it did mean standardizing on a single virtualenv tool or being hyper-aware and owning the issue.
I keep ignoring "Do not install with sudo" for some reason and it hasn't come to bite me yet. But I rarely develop outside of a virtual environment or docker image.
I can't think of a time before seaborn cleaning up all those ugly matplotlib graphics...
I’ve actually just picked up coding after thinking about it for over 10 years. Last week I built a script that gets the system hostname, uptime, starttime and operating system and either updates or puts it in a mysql database. Now just to figure out how to show that information with php...
Not really. Thanks, I'll check it out.
Huh? What does Node have to do with Python? The better way may be to not do whatever you're doing at all. That said, I have no clue what problem you're trying to solve.
I think bottle would work. It has its own templating language and it's easy to configure routes [https://bottlepy.org/docs/dev/](https://bottlepy.org/docs/dev/) .
This is my workflow for every project: mkdir myproj # create new project dir. cd myproj # change into your project dir. pipenv --python 3.6 # create new clean virtual env. pipenv install foo # install third party packages into your venv. # write your code pipenv run python myfile.py # Run your code inside the venv. I don't think it can get much simpler than this. 
It's because Python developers are forced to write clean code all the time. The filth has to come out *somewhere*
In fact, if every project has it's pretty virtualenv, then using sudo to install something would install to the wrong interpreter (the one available to root). You also never should need sudo to install something to a virtualenv because they exist writing your home.
`python2` seriously?
ITT: ["This is stupid, it all works perfectly if you use %s" % tool for tool in ["docker", "conda", "pyenv", "the official Python installer", "pipenv", "pyenv-virtualenv", "macports", "virtualenvs", "the --user flag for pip", "virtualenvwrapper", "poetry", "not conda", "linux", "Pycharm", "compile packages yourself", "consistency", "some understanding"] ] Yup, there are so many solutions out there, how can complexity still be a problem? ;-)
It is getting kind of ridiculous to need gigabytes of storage just to run python.
`pyenv` lets you have multiple parallel installations of Python, and even switch between them automatically when you enter your project directory. ``` $ pyenv version 3.6.4 (set by /usr/local/opt/pyenv/version) $ cd OctoPrint $ pyenv version 2.7.14 (set by /Users/tradel/Code/OctoPrint/.python-version) ``` `pyenv-virtualenv` or `virtualenvwrapper` let you create project-specific python paths with just the modules you need. Put them together, and you can easily have a custom environment for every project you work on. Different versions of Python, different versions of modules, whatever you need with no conflicts. 
Not really from a deployment perspective - if you're installing into a virtualenv then you're just using whatever's in that virtualenv: whether you've got 20 python3.6 virtualenvs or 5 of python2.7, 5 python 3.4, 5 python 3.5, 5 python3.6 - it makes no difference. Perhaps from a code-sharing &amp; testing perspective it matters - just like any other language.
Help me understand how I can install Tk 8.6 on macOS using pyenv? I may have missed something.
&gt;- Stop using RedHat. RHEL 7.5 actually just deprecated python 2, and RHEL 8 will ship without it. https://www.phoronix.com/scan.php?page=news_item&amp;px=RHEL-8-No-Python-2
Trying this out. Immediately ran into errors. Should the first command line arg, the URL, be in quotes? If I don't use quotes, I get SyntaxError, invalid syntax, with the caret pointing to the colon after https: Guessing answer is yes, url goes in quotes. OK, then there's the UnicodeError, can't decode ascii character. Fix that by changing str(res.text) to res.text.encode('utf-8') Then I get a bs4 error, lxml tree parsing library not installed. Ok, installed that. Then I got a mutagenError. No such file or directory. But that's because the "Some Error Occurred" except branch runs instead of the Download Complete try statement, and it's a naked except, so I have to change that so I can see what the exception is. At this point, I'm sorta giving up. 
I've been spending weeks worth of evenings trying to get my development environment set up on Windows. All I want is to be able to have multiple versions of python installed, have pip, have virtual environments, and have a personal scripts folder in the path. This has been hell to set up. - virtualenvwrapper's Windows ports are buggy and broken. - Getting Windows to choose the right Python version is a pain in the ass, and most online suggestions are amateurish or just plain wrong (e.g. "just switch the order of PATH every time you want to use a different version!"). - I was able to get the version to be selected properly by a script shebang using Python Launcher For Windows. - But this was only after I manually edited the registry so that PLFW could actually find my installed Python binaries. - I also had to manually set all file associations because the Python installer doesn't do it, even while claiming to. - PLFW can't find my scripts, even if they're in both the PATH and the PYTHONPATH. - I'm going to try to do virtual environments with venv, but as far as I can tell, there's no convenient wrapper for it like virtualenvwrapper. I guess I'll have to write my own. - I'm really uncertain about how well venv and PLFW will work together. Windows is really a clusterfuck when it comes to setting up a development environment. 
Hello, you can write your own. It isn't that complicated. I kind of wrote one [Spewe](https://github.com/josuebrunel/spewe) \(It's not finished yet, maybe one day ...\). As mentioned above, you can check [Bottle](https://github.com/bottlepy/bottle) too. 
A relevant blog post: [pytz: The Fastest Footgun in the West](https://blog.ganssle.io/articles/2018/03/pytz-fastest-footgun.html). Time zones are very tricky, I would not recommend implementing your own. The standard library after Python 3.3 includes a timezone implementation, but it only uses static offsets, so it won't handle DST for you. I strongly recommend using `dateutil`'s time zones: from dateutil import tz EASTERN = tz.gettz('America/New_York') `dateutil` also provides a parser, so you can do: from dateutil import tz, util, parser dt = parser.parse(some_dt_string) dt = util.default_tzinfo(tz.gettz('America/New_York')) That will create a `datetime` from your string and assign it the right time zone. Depending on the exact format of the datetime string and what you want out of it there are faster and more accurate ways to achieve what you want, but the code above will do the right thing 90% of the time.
Seems to be back up now, when i tried 3 hrs ago I was getting a 404. 
Switched from pycharm to vscode some time ago. Feels much lighter and still satisfies all my needs. 
Awesome read even for a person who has been to Pycon several times already. If I will see you in the hallway I will definitely say Hi. Cheers from Germany and see you in Cleveland in 2 weeks 👍
Also not to be very negative about it but have you tried other IDEs? 
Yeah, absolutely it would, but I wanted to be really portable. Lesson learned. Still saving for a different laptop.
Needs more yum. 
You can try out Kivy, it is not HTML-based, but it is awesome GUI library for Python.
Check out [remi](https://github.com/dddomodossola/remi) and [flexx](https://github.com/flexxui/flexx).
Does it include styling? Main concern really is appearance. 
Seriously? You owe me nothing, so do what you do at whatever pace you want. I mean, you did give it away for free, so it's not like I lost out on something here. I appreciate the effort and generosity with releasing this, so thanks for that. 
Every project gets its own Docker container. 
pyforms, it has a browser i think ^^;
&gt; Install Python via packages at Python.org. (Using Homebrew for this never made sense to me.) Because the installers at Python.org used to (may still) fuck up the system Python distribution. 
Seriously, seconding this. `pyenv` is a little quirky in its own right but it does reduce you to a single tool. Need a specific _distribution_ of Python? Install it with `pyenv`. Need a virtualenv? `pyenv virtualenv`. It's easy. It's also the only way I know of to support testing under multiple versions of Python (using something like tox) without pulling all your hair out.
`pyenv`, yes. `pipenv` is a disaster. It's much more Kenneth flexing his ego than it is useful tool.
Anaconda (the Red hat installer) as well as a ton of other redhat tools are based on Python. 
I really appreciate this joke. In accordance with local subreddit policy, I downvoted you. ^But ^then ^I ^upvoted ^you.
All you're doing is adding an extra box and set of arrows to that chart
I did because he said “I made a thing”
Bingo
Pasted from my other response: my only gripe is that when people post stuff labeled “I made a thing”, it’s normally people trying to be cute and humble but are actually begging for attention. If this is an unpopular opinion so be it. 
Because it works and nothing else I tried did.
Then what do you do when you try to use parts of two different projects of your own in a third?
I still think the discussion surrounding how to convey that an area (such as Yucca Mountain) is dangerous to future civilizations is fascinating. I was first introduced to it during one of my Human-Computer Interaction courses and it has stuck with me. I highly recommend the book "The Design of Everyday Things" as a primer. Even after all these years, the principles in it make me look at things differently, and I'm not even a designer by any means. http://www.slate.com/articles/health_and_science/green_room/2009/11/atomic_priesthoods_thorn_landscapes_and_munchian_pictograms.html
Serious question, how can we prevent this madness to enter into the final release?
Alright so I was working on it at school and went thru some documentation. And i cane up with this: import random class item(): def __init__(self,name,dmg,cost): self.name = name self.dmg = 0 self.cost = 0 def __repr__(self): return "{}\n=====\n{}\nValue: {}\n".format(self.name, self.dmg,self.cost) class gold(item): def __init__(self, amt): self.amt = amt super().__init__(name="Gold", description="A round coin with {} stamped on the front.".format(str(self.amt)), value=self.amt) class Weapon(item): def __init__(self, name, description, value, damage): self.damage = damage super().__init__(name, description, value) def __str__(self): return "{}\n=====\n{}\nValue: {}\nDamage: {}".format(self.name, self.description, self.value, self.damage) class Rock(Weapon): def __init__(self): super().__init__(name="Rock", description="A fist-sized rock, suitable for bludgeoning.", value=0, damage=5) class Dagger(Weapon): def __init__(self): super().__init__(name="Dagger", description="A small dagger with some rust. Somewhat more dangerous than a rock.", value=10, damage=10) hplist = range(1,10) weaponlist= [Dagger,Rock] while True: currenthp = random.choice(hplist) currentweapon = random.choice(weaponlist) print (currenthp) print (currentweapon) Everything works much better. Idk how right it all is but, I still dont get JUST the stats/name of weapons. How would I do that?
[pyBee](https://pybee.org/)
[PyFladesk](https://github.com/smoqadam/PyFladesk)
I’m super impressed with how far your code has come in one day, awesome work! I’m confused by your question. You get to define what is printed with the __str__ function, only tell python to print stats and name 
I'm still using easy_install to be consistent
Okay so. Heres this. def __str__(self): return "{}\n=====\n{}\nValue: {}\n".format(self.name, self.dmg,self.cost) And it prints __main__.Dagger(or rock, I have it randomized). I thought that it would print the name, dmg, and cost of the items. But it doesnt. Lmao
For actually running the code, absolutely. I still use pyenv when writing it just for the sake of highliting, auto completion and tips from comment strings, but honestly can live without that.
&gt; I thought this too, so I hacked out a package do make this a bit easier. And now there's another node to the graph in the image.
I'm a Python newbie myself so it was a nice excercise to see how I'd manage. This is what I came up with. I couldn't find a way to escape the while loop when a non integer was put in so I just used a break on the ValueError you get in that situation. I'm not entirely happy with that but it did give me the option to output a nice human readable notification \^\_\^ #Average Calculator *print*\("Welcome to Average Grades Calculator"\) total = 0 n = 0 avg = 0 while True: try: grade = int\(*input*\("Enter the grade "\)\) total = total \+ grade n \+= 1 avg = total / n exce*pt ValueEr*ror: print\("Ooops that wasn't a grade..."\) break print\("The Average Grade is " \+ str\(avg*\)\)***
If you're in the USA, shopgoodwill has some decent i5 laptops that go for like $150 that would be totally fine with doing dev work on. 
I'm glad you enjoyed it! See you in Cleveland! 😄
I am not, I'm afraid! `pipenv` doesn't do the same thing. The point of `toolup` is to have an easily-reproducible environment specifically for python-based command line tools. As the docs say, some tools may be useful to you, the developer, without being used by your code (so there's no need to have it managed by pipenv or a requirements file or whatever); or they might have different version requirements (`black` is useful for all python projects, but can only run on 3.6.1+). It's valuable for such tools to be distinct from your project environment, but to benefit from all the reasons that you have a project environment in the first place (encapsulation, reproducibility, not fucking with the system python etc.).
Yeah exactly. It's like trying to learn French, and suddenly discovering I can't speak it here because my shoes don't match my shirt. 
I'm a noob, so I'm pretty sure i don't understand those two things. Do you think you could lend some insight? 
Not exactly - the executables are all in a virtualenv, and installed with pip, just like everything else should be. It's just a shortcut I used for easily configuring what I want and symlinking it so that it's available without activating the environment.
Don't use Rust/Cargo then :-*
i'm still trying to find where pip3 is on that map
don't forget to add a box with 'toolup' to the mess on that xkcd diagram ..
Hey, at least we’re not Node with it’s fucking node_modules nightmare.
What other language has a similar problem? Python is the only one I come across that drives that particular spike into my forehead. 
with Docker you get to define how you build the environment in your configuration. which means you still need to navigate trhu OP's mess to work out what to put in there.
Like? 
A weird sports betting program. It scrapes multiple sports books and predictors (sites that offer their prediction and confidence), puts it into a database, and then allows me to backtest different scenarios - complete with a parlay simulator. E.g. if the ML side recognizes a pattern, I can run that pattern in the backtester and it'll simulate bets in the suggested parlay pattern over the course of the season. It's based on a heavy overdog parlay betting system I read about and wanted to test for myself.
I got so bored of dealing with that issue that at work I’ve started writing things in Rust or Haskell so I only have to distribute a single binary. Life has gotten better. Sorry /r/Python.
because there are lots of packaged apps that only use the older version. worse, they have their set of installation instructions which often breaks whatever you have neatly set up for your development work.
No, this is a problem on all platforms. Python has *the* worst package management out of all major modern languages with the exception of C++. Heck, this mess makes NPM look like something straight out of heaven.
It's a small price to pay for "import antigravity" https://xkcd.com/353/
[If you need to compare against Node.js](https://www.youtube.com/watch?v=M1DcD8e55YY)
For the GUI, I'd suggest toying with [Flask](http://flask.pocoo.org/) or [Flexx](https://github.com/flexxui/flexx). Getting your app GUI to be browser based can make it more platform independent. There's quite a few tutorials on YouTube for them. As for the .txt or .csv, I'd recommend Sqlite3. It may seem daunting at first, but it's a good learning step into setting up a database which are valuable skills to build upon as you grow.
Initially, yes. But then, you'll work on different projects, for which you will likely want virtualenvs (so that there are no conflicts between libraries and you know what is being used by a specific project and can produce an appropriate requirements.txt or setup.py). You can create them with `python3 -m venv .virtualenvname` or `virtualenv` (or `virtualenvwrapper`. Or `pyenv`). The virtualenvs will break when their folders are moved or Python is upgraded, but we can deal with it. Everything is fine. Then you want to deploy your code to a server, run it on your machine using a cronjob or have it launched by another program. How do you `activate` the virtualenv when there's no shell? I have yet to find an easy and universal way to do that, in general I look at which environment variables are being set and try to pass them during the invocation. This kills portability to other environments. Then I want to have automated tests, and to make the process reproducible all the libraries should be installed in a new virtualenv, so that a new contributor or the CI/CD server will invoke `./test.sh` and that will create a fresh virtualenv, install the requirements in it, and run the tests. This is a pain, because if I create a virtualenv with `python3 -m venv .venv` on my computer it will have `pip3` under `.venv/bin/pip3`, but for some reason on Travis CI that does not exist. And there's no `pip` or `pip2` either. I had this issue an year ago, and eventually just had to create a different script only for Travis which did not use virtualenvs. One can use also `tox`, which automates the test-in-fresh-virtualenv thing with multiple versions of python. Too bad pip decided to [remove, then put back](https://github.com/pypa/pip/issues/4187), the `--process-dependency-links` flag, and depending on the version of pip you may or may not have troubles with repositories linked using the URL in the setup.py script, considering that tox does not invoke pip with that flag. Including private libraries like this is a common practice in companies, so I'm surprised of this decision by pip maintainer. You can also use requirements.txt, which is a bit limited (cannot specify minimum Python version or any metadata, which for me is a big problem because on my computer I have currently Python 3.6 and 3.5, and the servers often have 3.5, sometimes 3.4. And this is true for something I'm actively working on, when using code from someone else or from my past me I can only try and guess) You can use Conda, and hope the libraries you need are in their repos (or you fall back to pip and the issues above), personally I have no experience on running Conda on a server non-interactively. And this is just the beginning, how does one avoid the proliferation of virtualenvs, each one with its own copy of the same library? Also, pip has no way to resolve conflicts, if I have two dependencies that in turn require different versions of the same library, I am in trouble. And we can only hope that who writes a `setup.py` file keeps it sane and doesn't decide to install a different library, or versions of the same, based on the position of the moon or whatnot. Recently I started using `pipenv` and it seems to work nicely for now, it brings to python a way to install and manage packages and virtual environments that is more similar to what happens in other systems, but less than six months ago it [generated a different lockfile depending on how it was installed](https://github.com/pypa/pipenv/issues/857), which is the reason initially I avoided it and for now would not use in production (however, locally seems to work nicely for me, so far). Or one can use Docker, so all the packages gets installed globally inside the container, but this is a workaround more than a proper solution. This is my experience, YMMV.
People complain if they can't upgrade python separately for each project Then others complain there's two versions of python ¯\\\_(ツ)\_/¯
Seriously. Cargo is phenomenal and the whole crates system is amazing. Adding and installing dependencies is effortless. The Rust tooling / ecosystem is super, super good.
Feel like an online course? Udemy has "Machine Learning A-Z™: Hands-On Python &amp; R In Data Science" and can be had for as cheap as $12 on sale (keep an eye out for it). It's not bad for beginners. I'd post a link, but there's too much Udemy referral spam and I'm not a Udemy referrer, so I don't want to contribute to it.
I've never had an issue with those packages in over four years. YMMV.
What if I have to much indirection? 
Hoo boy, I still use virtualenvwrapper because I'm too lazy to learn another tool. pipenv is all the rage right now, but there's been a dozen others I've seen rise and fall since I've paid attention to venvs. 
Not really, I have worked for years with Node.js on a Mac and never had problems, even when upgrading it. Never found it slow, actually, but maybe it was because of the SSD and a good internet connection. Used pip in the same conditions and never found a big difference. The thing I miss most is how predictable npm is. I want to add a package to the project? `npm install --save X`, and I have it and it's on the package.json and same version will be installed on the server when I run `npm install`. I don't have to worry about other projects on the same machine using a different version of the same library, or indirect dependencies on the same project. Same goes for test dependencies. There have been questionable decisions from the maintainers, sure, which is why now I use `yarn`, which adds a proper lockfile by default to have a completely reproducible deployment. Oh, and unless you use native modules (I avoid them at all costs), stuff works on different platforms and continue to work when you upgrade the engine without even reinstalling. To obtain the same results in Python my experience is [much worse](https://www.reddit.com/r/Python/comments/8fztrr/xkcd_python_environment/dy8iagt/). 
Is there a guide your following? This is exactly what I was trying to do but was having issues.
`brew install pyenv` `pyenv install 2.7.14` `pyenv install 3.6.4` done
Then even collapses like the Soviet Union
Every Java project gets its own set of jars too. C handles it in a more extensible way, that just institutionalizes the mess and places it at the OS level. But the mess is still there. Every modern language has project based environments.
I didn't really feel like explaining it here. If you google these exact questions, you'll probably very quickly find someone who has done a much better job of it than I would have here anyways. 
Thanks for the kind words!
There was a time when pip always compiled dependencies from source. If you wanted to use a library with non-Python dependencies, like numpy and scipy, you needed to have the right compilers installed on your system. Keep in mind that scipy has *Fortran* code. [This](https://stackoverflow.com/questions/29586487/still-cant-install-scipy-due-to-missing-fortran-compiler-after-brew-install-gcc) was a very common problem back then. Anaconda shipped with pre-compiled binaries. It was straight-up more reliable to use, especially among the scientific community, who don't necessarily want to waste time mucking about with system compilers and shit. 
Change the name of the executables so they don’t clash? python2 and pip2 for python 2, python3 and pip3 for python 3. I cannot understand how it takes weeks to setup an environment like python.
I'm not questioning the use of anaconda, I setup python environments for grad students and postdocs constantly on personal computers and clusters. It's a god send. I'm questioning the graphics specific listing of the anaconda provide python interpreter being placed at `/usr/local/lib/python2.7`which I'm pretty sure is either the system root python, or the root brew python. Neither of these are compatible with anaconda python and will cause aberrant behavior.
I remember when compiling this (http://www.rdkit.org/) sweet package from source took at least a couple of hours. Conda nowadays has a lot of stuff that is missing from standard repositories and which tends to be hard to compile.
To be equivalent to the former, it'd actually have to be if (value := kwargs.get('myparam')) is not None: # myparam is defined, do something else: # myparam is not defined, do something else Or to be equivalent to the latter: if (value := kwargs.get('myparam', (sentinel := object()))) is not sentinel: # myparam is defined, do something else: # myparam is not defined, do something else 
Well that was sortof the point I was making. If you avoid the mentality of "setting up the system python environment" then you avoid the trap. By giving each java project it's own Jars to build with, the problem of working with multiple projects that have different dependencies on the same system with a single java installation is solved. It's not perfect (two libraries that depend on a module, but two different versions. yum), but it's a bit better. With python, just throw the baby out with the bathwater and forget about the existence of a "system" python installation. That's the one the OS uses. You use a different one. With C, the problem can get downright nightmarish.
I'm asking specificaly why you would configure it as your system python (/usr/local/lib/python2.7) not why you use anaconda. It's an excellent piece of software, especially for disposable environments. I would never try and replace the system python with it however, just update the path config for the local user instead.
No, you didn't miss anything - it's my mistake. I missed your mention of Tk. Sorry. Yes, as far as I know you'll need to use brew, macports, compile yourself or something similar. However once you've got Tk installed, you should be able to use pyenv and pip to install a custom Python of your desired version, with a Python Tk wrapper, without affecting system Python. That said, this is not something I've done myself, but I can try things out on my system if you need me to.
You're not making a copy with `new_dict = DICT_TEMPLATES['Key1']`, you're making a reference to the existing dict. Try `new_dict = DICT_TEMPLATES['Key1'].copy()` to make a copy.
I use [pyenv](https://github.com/pyenv/pyenv) with the virtualenv plugin. It will automatically download and install any Python version you want. Create a virtualenv and use pip to install whatever packages you want. It does all of this in ~/.pyenv, so none of it touches the system Python, and it's all isolated so you can delete a python version or virtualenv without affecting anything else. It's built on shell scripts though, so you need a *nix shell for it to work. Obviously Linux and OSX work fine, but if you want to use it on Windows you'll need to find a Bash shell first - WLS is probably the easiest way, though it will probably work on Cygwin/MSYS as well.
Make sure that you are actually taking projects and doing them. Just reading isn’t worthwhile, you have to do something with a lesson. 
That's a problem with your laptop. It can slow when indexing tiles so if your hd isn't an SSD or has a lot latency in read times, iy will feelnsouggig for a few minutes when first indexing. Halting your laptop and calling it garbage is a bit over the top.
I have been burned by sudo installing Python packages too many times. I should have heeded the warnings of my mentors and used venvs but in my noobie arrogance I thought I could get away with using sudo. Never again. Everyone go pip install virtualenv and save yourselves while you have the chance.
PATH is an environment variable that the linux shell uses when you type commands. It's a list of file system paths that (should) contains executable files. The PATH variable is resolved in the order constructed (left to right, or FIFO) and it returns the first matching instance from the list. You can override the variable by setting a local instance of the PATH variable for an application, which allows you to have multiple pythons 'installed' and each one could be used by a different app.
It just seems like you are hiding what is actually happening from the user. This is the kind of stuff I hate in Ruby. It looks nice and pretty, but doesn't actually add functionality, and can mislead people when they are reading your code... Change my mind.
Interesting, thanks so much for the reply. Is this related to the fact that dictionaries are mutable objects? I noticed that if I make DICT_TEMPLATES a list, I run into the same problem.
Writing a lot of automated build scripts for the sorting, reporting, and reduction of Astronomy data.
I'd start with the interface of the library, i.e. the functions/classes/variables the library exposes to the users. Then you go on from that.
The "how does the Python interpreter know where to look for packages" one is a pain. I wound up needing to learn and use Docker just to make sure I fully understood the _full_ set of dependencies of my projects, and wasn't inadvertently using system-wide or --user-installed packages. And then I learned about virtualenvs. go me. Still use docker, though; if you're going to write a web service in Python, may as well containerize it for simplicity's sake...
Let's add that to the graph somewhere!
My laptop didn't need python's help to be a superfund site
It installs pip into every environment it creates, and `conda env export` actually exports a YAML with lists of both Conda and PyPI dependencies. I agree, this is way, way better than anything else I've ever used. I remember someone showing me in 2014 how to install easy_install so that I could easy_install pip. Those were the days.
Situation: There are 14 competing python installation standards. /u/Rerecursing : 14?! Ridiculous! We need to develop one universal standard that covers everyone's use cases. Soon: Situation: There are 15 competing standards. https://xkcd.com/927/
[Pycharm has a gui to manage virtual envs.](https://www.jetbrains.com/help/pycharm-edu/creating-virtual-environment.html)
so should i buy 250 uk pounds ssd memory card just to install some garbage un-optimized software like pyshame? will, I am using jupyter notebook, vsc and spyder without any lagging and no system intensive resource use like what pyshame does!!
So you prefer Java-style getters and setters? That's cool. Use them.
I like to use different versions of node. So I install them in a venv. I know there's nodeenv but I just got so used to Python venvs I do that instead. 
I find it hilarious that almost every response in the thread is along the lines of "no you don't need any of that, you just need X" Never mind that no one can agree on what X is.
Tried that. Breaks the registry. Breaks virtualenvwrapper. Breaks PLFW. 
Use the right tool for the job: nodeenv
Python 3 bundles venv.
You can easily sort that out with a nice creamy abstraction layer slathered on top.
Fixing Python dependency issues by giving every app a virtualenv is like fixing Windows DLL Hell by giving every program it's own complete set of shared libraries.
Windows 10
Ah, this is great! The coloring certainly helps. Your “10 minutes to pandas” is actually what got me started with pandas, thank you very much for all you do! You are awesome.
Virtualenv. Fixed all my problems. Tiny little individual python installations.
I encounter this issue once. But it is a little different from yours. Which is I install packages from pycharm successfully and run my program from pycharm ok. But when I switch to terminal running my program the python interceptor says "missing packages" Then I noticed that there are multiple python environtments on my OSX. python2.7 python3.4 and python3.6. the python2.7 is procided by os. the 3.4 is install by brew. the 3.6 is installed by a third package management tool. So I guess your situation maybe similar to mine. If you want to upgrade your pip version just run it in your terminal by `pip install --upgrade pip` 
Really? I find it incredibly easy. Just define entry_ponts
Not if you use Anaconda. You can literall create a virtualenv for whatever python version you want.
Use virtualenvs you savage
if you want to install new packages just simply type `pip install package_name` in terminal 
That’s exactly what virtualenv, bundler, and npm do. What is the problem you see with this solution? How would you solve the problem?
That’s exactly what virtualenv, bundler, and npm do. What is the problem you see with this solution? How would you solve the problem?
Try `pip3 install beautifulsoup4`
pip3 is for python 3.x pip and pip2 is for python 2.x have you tried `pip3 install` ? 
Pipsi is such a great tool to install python apps in their own contained environment. Sometimes being isolated is not suitable, but work for most use cases with a few additional symlinks to OS' Python packages.
And pipenv? And pkg\_resources?
I'm using matplotlib to work on a 2d Fast Fourier Transform visualization helper library. It's nice.
See: `pipenv` and `poetry`for recent examples...
where can I get pip3?
Do we need to add this to OP's diagram ?
What OS
`pipenv` is fantastic *if* nobody has a dependency on your code - ie for apps but not libraries.
I like the look of Poetry, but... https://xkcd.com/927/
SUCCESS! Ok so for all interested if you are on a mac you have to use homebrew to install python3 BUT THEN (and this is where I tripped up you have to do: brew postinstall python3 If you don't do this postinstall you don't get other packages with python3 like, for example, pip3. And pip3 is needed to install BeautifulSoup4! Thank you so much guys, wish I could give you more than just one upvote!
Yep! I just tripped up in that I'm on a mac and I had to do a "brew postinstall python3" function which I left out on my initial install! But thanks for the help!
i am sorry for the way it has the code displayed i dont know how to fix it or why its not displaying it the way i have outlined
import requests from bs4 import BeautifulSoup def trade_spider(max_radius): radius=1 while radius &lt;=max_radius: offer_url = 'https://offerup.com/search/?q=bike+&amp;radius=1'+str(radius) source_code=requests.get(offer_url) plain_text=source_code.text soup=BeautifulSoup(plain_text,"html.parser") for link in soup.findAll('a',{'href':'/item/detail/'}): href=link.get('href') print(href) radius+= 1 trade_spider(1) 
I use `pipenv shell` and then I'm dropped inside of a shell with that virtualenv on and run whatever I please.
I mean I wouldn't if I were you. With out some baisc core competency no tool will be useful. You might try something more basic lime notepad.
I mean, it's really just your user directory, the system site-packages directory, and any directories you added with the PYTHONPATH environment variable. All virtual-envs and other similar solutions do is to manipulate your path so you call a different python with a different system directory. 
yeah, thats a shame, considering its such an easy function to include
I'd start with the important functions, even if they are internal. If some function is really complicated and a house of cards, make sure it's documented well.
I'll give this a go! My developer didn't know about this library. Thanks!
Yup. It was that system site packages directory I couldn't excise without either Docker or venvs...
Hopefully this isn't stirring the pot too much because Perl is for all intents and purposes dead, but CPAN was quite good.
My usual approach is to throw some search terms in to PyPI, select a few different libraries to try and just find one that is easy to work with and does the stuff I need. It’s how I settled on this one and it worked great in the project I used it for. 
Yup and you can use qtpy to make it compatible with PyQt4/5 and PySide 1/2.
What made you decide to start documenting now? Good, clean code doesn't really need to be documented.
You need to debug further than that, at least post the run with python -m pdb in front. 
sorry i dont really understand what that means can you explain what you mean
 import requests from bs4 import BeautifulSoup def trade_spider(max_radius): radius=1 while radius &lt;=max_radius: offer_url = 'https://offerup.com/search/?q=bike+&amp;radius=1'+str(radius) source_code=requests.get(offer_url) plain_text=source_code.text soup=BeautifulSoup(plain_text,"html.parser") # for link in soup.findAll('a', href=True, {'href':'/item/detail/'}): for link in soup.findAll('a', class_='opa-hover'): href=link.get('href') print("href={Href}".format(Href=href)) radius += 1 trade_spider(1) try this
Brew seemed to be the only way to get Tkinter 8.6 working with Python that I could find. cx_Freeze doesn't work with brew-installed Python unless you do some symlinking, but it's possible that it would work in a virtual environment, not sure why that solution didn't occur to me (I'm no stranger to virtual environments, use them all the time to deploy web applications). I'll have to try that out to see if it works any better, since the symlinking seems a very brittle solution.
Python and Windows definitely have their own problems getting along, but not quite the one described in the comic.
You can create a virtual env for any interpreter version with a single command e.g. `pipenv --python 3.6` and activate it with another, e.g. `pipenv shell`. I don't consider this particularly painful. 
honestly i am a beginner and this is pretty confusing to me im sorry for asking questions that might seem obvious to you but if you dont mind could you walk me trough the process of debugging because i know c++ and java but no idea how to use the debugger in either language
could we maybe get on discord and talk about this where we can share screens
The problems of xkcd post is use python in mac. I use python in Linux with pip and package manager (normally apt) and no problems. 
PITA: Pain In the Ass. Why tho?
Just because it's complicated doesn't mean it's long. Usually it's because it's tightly coupled. I'm specifically thinking of a 10 line function I wrote with ~40 lines of documentation. In addition to saying what it's doing and why, it documents what you need to modify and what you can't do.
In Linux?, no problems at all. Pip is simple and lightweight in comparation with npm or composer (run out of memory is classic with heave packages). I use many distros in my work (debian, fedora, gentoo, ubuntu) and never have problems with python.
1: The Formatting Help link below the submission box tells you that you need to add 4 spaces in front of each line of code in order for it to display properly on reddit. 2: read the sidebar 3: post this in /r/learnpython 4: read THAT sidebar
I'm trying to learn python better and just making chill ascii art with python.
Watch the conda-forge/staged-recipes repository to see how hard it is to compile many packages on all three platforms. More examples that you have time to look at are there. The 15 minutes compile time is not the issue, it is the hours and hours of time it takes to get the packages to compile at all.
/r/learnpython
oh i see would you be wiling to talk on discord and help me make the crawler i need if you are free 
thanks
I work on a scientific experiment where the development of the code began in the 90s. We need our code to work across a large variety of systems (including old computers that aren't reliably connected to the Internet). Plus we're scientists, not programmers. NSF isn't giving us money to update code, so we don't have the $$$ to pay people to do it. There's literally no reason for us to spend the time upgrading.
Okay How can I find you from crawler
https://discord.gg/6AMUwX 
Virtualenv copies and/or symlinks or hardlinks the files from system python necessary to create a second, segregated install in an arbitrary directory on your computer. You run/source a file from the command line in that directory (activate.sh/activate.bat) that modifies the environment to reference this copied version so anything you do - install packages, run python itself, etc will use this copy instead of system. This prevents clobbering the system setup if you install or upgrade arbitrary system packages. When you are done, or want to create another virtualenv, or run system python, you run ‘deactivate’ which will undo the environment modifications - so running python will again reference the system python. Any packages you installed will be ‘gone’ because they reside in the copied environment.
Learning that all you need to do is #!/path/to/venv/bin/python in the script and it will just work was a game changer for me. I wrote little shell script wrappers sourcing activate forever.. really felt dumb when I discovered that :-)
Use PIP_VIRTUALENV_REQUIRED=true so this can never happen accidentally (if you’re using pip exclusively obviously).
https://pythonprogramming.net/convolutional-neural-network-kats-vs-dogs-machine-learning-tutorial/
The entire point is that I want to use multiple python versions. 
At least part of the problem is the multitude of Pythons, all at different release levels and the fanatics who won't let old Pythons die. I swear to God, in the year 3000, there will be that one neckbeard who insists that Python 2.7 is the One True Python and someone will have hammered into some weak conformance with Cyber-Python-6000-Mark-VII or whatever the main development line is.
Check out [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/). Makes the whole thing a lot simpler, especially with the [mkproject](http://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#mkproject) command.
Recently my setup went a bit weird and instead of figuring things out or switching to pyenv (actually, I may have done that and then forgot where I left that particular install...), I just install packages with: import pip pip.main("install package_name".split()) Running Python with **sudo -H `which python3`**. Still not sure what that -H flag is for. Also works on my WinPython setup (I typically install that for the packaged Jupyter Notebook with ipython console) which would otherwise require some more complicated steps to add packages IIRC 
I also still use virtualenvwrapper, but I just looked at pipenv and it looks pretty cool. 
I wrote a "tools.py" for stuff that I need from time to time and also to procrastinate from actual coding. Maybe you can get some ideas, especially the decorator stuff. [**Here it is**](https://github.com/tweakimp/littleprojects/blob/master/usefulpython/tools.py) Most of it is just a compilation of stuff I found on stackoverflow and the rest of the internet. I would like to have some feedback on this, if you would be so kind to look over the code :\)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tweakimp/littleprojects/.../**tools.py** (master → 131d652)](https://github.com/tweakimp/littleprojects/blob/131d652b0ad33bb8c502cc709f52f2c0809e50e4/usefulpython/tools.py) ---- 
It looks neat and it's recommended by the pypa, but I'm becoming curmudgeonly. 
https://github.com/Andrew-Shay/Neuron
Thanks I’ll take your advice!
Thank you very much, I appreciate your recommendation, and looking to buy a new laptops, but I still believe pycharm is heavy on computer resources. the same laptop I run software like petrel (oil reservoir modeling and simulation) and etc without issues. wish you great day
I would really like to move away from all the printing, but I dont know how. Do you know a way to get the profiler info in another way?
The comments in [this thread](https://www.reddit.com/r/Python/comments/8elkqe/pipenv_a_guide_to_the_new_python_packaging_tool/) give a decent overview.
isn't it annoying to always have to install 3rd party packages every time you start a project? why not just use your system install?
There's no mention of high performance visualization, like libraries that bind opengl, of which, vispy is pretty decent
I don't understand decorators all that good, but where I have a attribute that I want to be set programmatically, property decorators are nice
I rarely see anyone use it with a setter, often it's just performing a calculation.
pipenv?
&gt; sluggish for a few minutes when first indexing Do you realize the magnitude of this? Well, indexing is believed to be a slow operation because it involves a lot of I/O, right? OK, filesystem performance is typically measured in IOPS. A typical performance for a consumer-level HDD is something like 120 IOPS. Reads are typically faster than writes. This isn't a database-kind of workload where the reads are short, so we can assume that we can read something like 100 MB/s (again, humble consumer electronics, no high-end enterprise stuff). In a few minutes we will have read several GB of data. Now, the question: what the hell is it indexing? Or, perhaps, this garbage IDE isn't exactly I/O bound, but CPU bound? Maybe that's why the fans keep spinning when OP runs it?
No. The thing is this isnt added to the graph. Its outside the graph. From /u/meandertothehorizon above &gt;Virtualenv copies and/or symlinks or hardlinks the files from system python necessary to create a second, segregated install in an arbitrary directory on your computer. You run/source a file from the command line in that directory (activate.sh/activate.bat) that modifies the environment to reference this copied version so anything you do - install packages, run python itself, etc will use this copy instead of system. This prevents clobbering the system setup if you install or upgrade arbitrary system packages. When you are done, or want to create another virtualenv, or run system python, you run ‘deactivate’ which will undo the environment modifications - so running python will again reference the system python. Any packages you installed will be ‘gone’ because they reside in the copied environment.
I’m not sure what the problem is with using multiple python versions. You can have any number of virtualenvs and each one is independent from the other.
It can. mkproject NewProject pip install whatever # Running code later on python /path/to/NewProject/code.py 
Try disabling Javascript in your browser and open that link again. That's what requests sees. The website you linked uses a front\-end framework and all the data is loaded via Javascript. It looks like it's backed by [https://insight.is/](https://insight.is/) which provides the API to the data. You should interact with that API directly instead of trying to parse HTML pages.
Be careful with the assumption that the first python on the $PATH will always be used. Some applications ignore it and used the system python instead \(cmake does this iirc\).
It's not quite a RPM, but there's a few projects that can produce [Zip archives that Python can open](https://www.python.org/dev/peps/pep-0441/), including [pyzzer](https://pypi.org/project/pyzzer/) and [pex](https://pypi.org/project/pex/). The problem is, all your dependencies need to be zipsafe :(
You're so going to get blocked by google :P
Hint: you're printing exactly the same line 4 times in that second for-loop. You should use ``i`` instead of ``base`` in the printing statement.
Have an iMac late 2012, 12GB RAM, two users logged in and still goes plain... Never noticed your problems.
pyenv + virtualenv is good.
Haters gonna... make some good points, actually.
After 100 requests you are blocked, tried this solution in the past 
I haven’t exactly followed any guide. I work with developers so I have someone to ask from when I need help. What I was put the uptime in seconds to the database and the calculate boot time with current time - uptime and then also put it into the database. I can post some code to you tomorrow if you want. 
I always thought I was just doing something wrong with my python environments. 
No problem as long as you use it locally without needing different versions of the same library for different applications, which can be said also for a Mac environment. What if you need to deploy the code to another system where the library you need is not on the repositories, or is not the correct version? Also this requires the user to be root and install system packages by hand, not exactly the best process. 
I speak from personal experience :-) Bing should work, though.
I think the real problem is people not understanding what their uses are. Here I'll try to explain. 1. *brew* is mainly installing packages to help OSX / profile functionality for your OS. Your desktop experience. 2. *anaconda* is targeting data scientists for helping them with several (traditionally) harder to install packages and create reproducible envs (opencv2) 3. *pip install* are for developers using python. 4. *virtualenvs* are for developers using python to separate envs, allowing you to use the same python version, but using different versions of the same package (e.g. requests==1.0.0 and requests==2.0.0) But more important it is to understand how Python and the Python path works. Read up on Python path, and then realize you can just quickly check things for yourself: - Run `whereis python` or `which python` to find out what is linked to your "one and only" (cough) `python` command - Now you are aware there are multiple python envs.... see `locate /bin/python` for probably several python versions installed on your machine - When you are in any given python interpreter, run `import os; os` it will display the packages path, giving you a clue where this python version is installed (you can see the version at the top of the interpreter but this is only half the story). - You can also use this trick when confused about "I just installed this package! why can I not load it?" through installing with `pip`. Open up an interpreter and do `import packagex; packagex` to display the path - If you want to make sure you are not losing your mind when installing with pip, do like `/path/to/python3.8/but/then/pip install ....` or `python3.8 -m pip install ...` 
Anaconda on Windows installs a shortcut called 'Anaconda command prompt', which runs cmd with the `PATH` set up to use Python things. Inside that, `jupyter notebook` should work.
Heh, I still use just pip and virtualenv. It feels like it's built into my fingers by now.
? That's the point of a setter
What’s that ( s ) doin’ in there?
But pip is not enough. If you want Python 3.6 on Ubuntu for instance, you have to install everything using something like pyenv, which opens a huge can of worms when it comes to using packages with native libraries. Getting OpenCV to compile with pyenv is not that hard, but still a pain. It's also annoying that I have to create "virtual environments" for each project manually, when *all* other major package managers install packages into the project by default.
When I click on the link I got error 503. Hope they fix it in few hours. 
Put it on github. Seriously, no one's gonna download a zip from Mediafire.
I'd change html.parser to lxml, it's recommended by bs4 creators. [https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing\-a\-parser](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)
It's up for me
https://status.python.org/incidents/0gyxs265qp6b
To prevent dependency conflicts, for example if project A relies on `django` version X and project B relies on `django` version Y. Or if proejct A relies on Python3.4 and project B relies on Python3.6.
Can you check my post now?
And how do you manage dependency version conflicts?
I don’t know what you’re asking here...
pip install --user Followed by nuking ~/.local when you mess up. 
I have never understood that argument. The python import statement is not versioned, so there can be exactly one version of a dependency installed. If that makes a conflict between requirements, no amount of magical Reitzing can fix that. Thus the argument is without merit. 
Do I have to download the package beforehand or send it to the same folder as “scripts”?
You don't have to. In fact, I would recommend you avoid setting a specific path in your shebang line. Python is smart enough, that it detects when invoking something inside a virtual env, and will use the proper sys.path. Using "#! /usr/bin/env python3" (or python if that's your thing), is enough. 
It's fun watching Python become dominant in the "pick-up-and-play" era of programming ... for something so old I'm amazed at how easily accessible it is to everyone.
And then you had two problems.
Have you considered making this an Ansible module? Tools like this are great, but the power of orchestration is multiplied when you can integrate it with other things.
Yeah when has Foss ever made a sustainable project? Besides the fact the best of almost everything is Foss. Languages, compilers, operating systems, browsers, databases. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [metaperl/python-oop/.../**README.md#web-development--html-generation** (master → be8e885)](https://github.com/metaperl/python-oop/blob/be8e885be720c989f5f7c6c57c090544621e33df/README.md#web-development--html-generation) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dy9g0l3.)
[added flexx](https://github.com/metaperl/python-oop/blob/master/README.md#web-development--html-generation) ... thanks.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [metaperl/python-oop/.../**README.md#web-development--html-generation** (master → 5d48909)](https://github.com/metaperl/python-oop/blob/5d489094dcbc95cfaa191709007eafce0b931757/README.md#web-development--html-generation) ---- 
The same thing you will have to do when pipenv fails doing anything about it.
Anaconda/miniconda?
Check out [Dash](https://plot.ly/products/dash/) which does data science stuff as single page apps. I haven't used it myself but I've heard good things. It may be what you want, depending on your needs. To answer a related question rather than the one you asked, take a look at [bulma](https://bulma.io/) - a css frontend framework - which lets you get nice looking web pages with CSS and HTML but without needing to write JavaScript.
Well, that *is* the point of using a virtualenv. That is not something pipenv has invented. I'm sorry if I misunderstood you, but you were parroting the pipenv perty-line of magical being able to fix intra-project versioning conflicts. 
You can just do something like this: python3.4 -m venv ~/.py34 source ~/.py34/bin/activate pip install whatever Later on, you (probably) don't even have to activate the venv. Just add the venv bin directory to your path in your ~/.bashrc export PATH="$PATH:~/.py34/bin" Maybe someone can correct me, but sourcing the activation script isn't really necessary as long as you provide the full path to the binary (or it can find that binary on the path) within the virtualenv directory.
a lexer tutorial with some terms definition and real world code analysis, aimed at beginners and anybody interested in the science of language building (compiler theory) suggestions appreciated !
You usually would make shared libraries from the "parts" and host them on pypi or your private package registry. You then install the libs in your "third" project via `pipenv`, `pip` or what ever tool you use to install packages in a virtualenv. 
Hey thanks for doing this. Do you think you would work on an Ubuntu package? I'd apt-get if so.
Most of us don't use the Python 2.7.x series. I prefer using Python 3.x.x as it is the most recent and most reliable.
I was also working on a project called [Pappy](https://github.com/bbevan/pappy), which makes it easier to visualize 2D Fourier Transforms of images. 
r/learnpython
You're just "selecting all" for the sequential read, which is obviously going to be fast because it's basically dumping the table. The threaded read is "selecting all where", which is obviously going to be slower since it's searching rather than dumping. Wouldn't it be starting over at the top of the index for each read? I stopped reading here. Maybe use the threading test with only one worker as pseudo sequential test. Or just iterate over the distinct symbols to search for so the test is similar. Also, a cool thing about threading with SQLite is that you can use the existing connection rather than establish it for each thread which wastes time. Just have to use cursors. This is what steered me away from multiprocessing; the amount of setup required was taking longer than the reads, but then again I never had more than 10K rows. Lastly, is the read test actually looking for the correct values? I'm not in front of a computer, and I always use row factory and cursors, so I could be wrong, but it looks like you're passing an SQLite object as an argument to the read test rather than the values stored in the object. I could definitely be wrong though.
well thanks for the suggestions, i did a test back then where i selected symbol by symbol and all rows from the table, i forgot to add that, i ll add it and run the test again. The reading test is definitely looking for the correct values :) I printed everything once to confirm in all the functions, the multitable tests at the bottom would probably be more helpful as they read and write to multiple tables simultaneously and sequential is obviously slower here, will update the code to do the per symbol thing on sequential :)
`pip install --update pip` 
See my list of issues above. 
What's pyshame? Also you can just say "ssd" instead of "ssd memory card"
&gt; Well, that is the point of using a virtualenv. Yes that's what the parents were talking about. &gt; That is not something pipenv has invented. Yes, no one said otherwise. &gt; you were parroting the pipenv party-line of magical being able to fix intra-project versioning conflicts. The discussion was about virtualenvs and how to create them. You seem to have read the whole branch with another context in mind. No one "parroted" anything about intra-project versioning conflicts.
Well, then you have to explain why you rejected virtualenvwrappers as a viable and simpler way of doing that convoluted pipenv invocation you showed. 
https://downforeveryoneorjustme.com/
pyshame = pycharm, ok sorry next time I will say "solid state drive PCIE m.2 nvme storage drive"
Are you sure pycharm isn't indexing or something? During most operations pycharm will not stress any of my laptops regardless of OS unless it is indexing. Another option to speed up pycharm is to configure the JVM settings within it to let it use more memory by default. But what you're describing seems more it's got your processor pegged doing something heavy. Is there a progress bar at the bottom right corner?
pyenv and pipenv to the rescue 
If you don't know what you are discussing, you should abstain from participating. 
I haven't used it for this purpose (python -&gt; rpm), but have a look at [fpm](https://github.com/jordansissel/fpm). It helps with package creation/conversion.
Hi, Thank you for your suggestion. To be honest, when I created this repository, it was because I didn't know most people used tools like `Ansible` to configure their Cisco devices. After some suggestions, I refactorized the code to use the `Jinja2` template engine with YAML files which is a good enhancement. According to me, `Ansible` is a good tool but too generic and tedious for a network administrator who has no knowledge in development and does not want to learn this kind of tools \(SEE: [https://github.com/rememberYou/gen\-cisco/issues/7](https://github.com/rememberYou/gen-cisco/issues/7)\) Creating a module for `Ansible` would be a good idea, even if my knowledge with `Ansible` is still weak. However, I'm more tempted to continue using a global configuration file for each device and use `Ansible` internally to generate the script and deploy it to the remote device.
dito...
what are lacs? I thought it said tacos and I know python developers can afford waaaaay more tacos than that.
no it's not that complicated to install new packages 
To give you a short explanation that won't tell you what it is but might give you an intuitive understanding of what it does: When I turn on my computer at work and open the terminal, I have my default python environment. When I type `workon py3_env`, I enter an environment I made called "py3_env". This has python 3.6 as the default, and has all the packages I need to run my development environment already installed. When I type `workon chess_thing_ts2`, I switch to a new python environment for a little game I'm working on in my own time. For argument's sake, this environment has python 2.7 as the default, and has only the packages required to run my game app. It's basically a way for you to put workspaces into buckets.
I didn't even notice that. No shortcut on my desktop but there is an Anaconda folder in my start menu, along with a start/shortcut button to Jupyter. thanks
So apparently there's a difference between .match and .search, which was my issue [as so elegantly explained here](https://stackoverflow.com/questions/3346076/python-re-match-vs-re-search).
I didn't encounter the problem while installing Python but you should definitely allow it through your home or work networks.
No, it's for the theaters on military bases. We get the shaft when it comes to ease of access to pretty much anything. I'm getting the movie info from [this website](https://www.aafes.com/exchange-stores/Movie-Guide/).
2.x is in full-on maintenance mode now. The only updates will be security updates, for organizations that haven't migrated to 3.x for whatever reasons.
I find it somewhat funny that one of the reasons people left the Perl world was “issues dealing with all the dependencies”, now it seems Python has made it worse, both in terms of dependencies and portability. 
If you are working on two different python projects, you want to isolate all the package code that each one depends on. 
3 things: 1) anaconda is a virtual environment manager. Why did you uninstall it to set up a virtual env? 2) what is the output that you get when you type “echo $path” into your terminal (without quotes) I have a feeling that even though anaconda was uninstalled it left something in your .bash_profile 3) r/learnpython is the subreddit for questions and help. r/python is a place for news about python. So if you have more questions can you post them there instead? Thanks!
Sorry, the tools are there, I’m impressed at your ability to over complicate this. You come bitching, and snarky - so.. enjoy your misery? Not sure what you want here.
Install them into your new third project, using `pip install -e &lt;/path/to/other/package&gt;`
Idk.. Linux seems to be the only one that handles a lot of versions correctly.. pip2 python2 pip3 python3 pip3.6 python3.6 etc. When I start a new project I create a new folder and go into it. $ mkvirtualenv $PROJECT_NAME -p $PYTHON_VERSION Bam. Now all you need is the virtualenvwrapper plugin for zsh/bash. Whenever I go into the folders the virtualenv is automatically activated. Or if I just want to just go to it $ workon $PROJECT_NAME 
https://packaging.python.org/ is the official documentation on the whole packaging process in python.
"A disciplined mind leads to happiness, and an undisciplined mind leads to suffering." -- Dalai Lama.
"A disciplined mind leads to happiness, and an undisciplined mind leads to suffering." -- Dalai Lama.
Huh? I'm say people don't make property setters, just the getter.
Because then the python developers would have to both figure out, and write code, to interface with RHEL linux and Fedora. And of course, to be fair, make sure they have everything configured for Debian's liking. But also account for the small changes and version updates that Ubuntu does. And then also ensuring we haven't forgotten about portage and pacman. Oh, and YaST. Oh, and then also homebrew. And quickly, for the mostly volunteer workforce that does python packaging, the task of correctly interfacing, special-casing, path-configuring becomes a matrix explosion of work from hell. We'd love to be able to do that... but it's simply not a feasible thing to achieve. You'll notice that practically all other scripting languages have the same position.
Ya, but that's not an attribute, it's a method. You're missing the person who's using your class.
Honestly, nowadays, avoid the MacOS Python distribution with extreme prejudice. It seems the developers just play around with it at a whim, installing random pypi packages into their global library for shits and giggles. Nor do they update the OpenSSL that it depends on anymore...
Anything newer is mostly better, because it could learn from other languages' previous mistakes and doesn't have all the technical debt. npm, packagist, cargo are all better. Mostly because they isolate projects by default; pip needs a whole separate project (virtualenv / venv) to do it. Go shit the bed, however.
I do know what pipenv does. That's why I could tell you that you had a needlessly convoluted workflow, and could show you how to simplify it. 
I'm assuming the first one is faster. The array module is prob'ly written in C. There's also less looping and comparing.
pipe `pip freeze` to `pip download`?
You can generate binary packages (_wheels_ in python jargon) of all dependencies with `pip wheel -r requirements --wheel-dir=wheels` Create the wheel for the package with `python setup bdist_wheel --dist-dir=wheels` Then install them using `pip install wheels/*.whl`, check. Hopefully PyPA will normalize the dependency and packaging situation over time, they've already made good progress with pip and pypi.org
Hashing is not encrypting and so you cannot decrypt a hash; you are not recovering the source information from the hash. If you publish videos maybe try to be accurate?
I can't download in said environment. It needs to be packaged.
Sometimes that's exactly what you need. This is especially true of values that change with time. Using a method might make more sense in the beginning, but using a property might be your only option if your consumers already expect the value to be an attribute. By switching from a simple attribute to a property, you avoid breaking other people's code.
Echo $path returns: /Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
Interesting change for users on Mac OS: &gt;Attention macOS users: as of 2.7.15, all python.org macOS installers ship with a builtin copy of OpenSSL. Additionally, there is a new additional installer variant for macOS 10.9+ that includes a built-in version of Tcl/Tk 8.6. See the installer README for more information.
Trying to figure out flask structure so as to build an AWS app
Exactly the workflow that I use. pipenv puts all the virtual environments in one folder so you can manage then easily. Also pipenv uses the new Pipfile with a lock so that your builds are deterministic. It anyone needs convincing there is a reason that `pipenv` has been taken over by `pypa` https://github.com/pypa/pipenv
Indents my dude import webbrowser a = input("do you like to see a scene of wolverine yes or no: ") if a == "yes": webbrowser.open_new_tab("https://www.youtube.com/watch?v=J5i8_B3K97I") if a == "no": print("ok")
Functional analysis final atm, will be building some excel based apps later on this week 
Indents dude, the next line after both of the if statements should be indented
As someone who tinkers in Python, this CEO level explamation doesn't help at all.
I swear that at no point I came across anyone saying you could make all dependencies into a wheel or egg. This seems to do half of what I want (at least it's the harder half), as I'd still need to manually add my own project wheel to the one that is created, as it's not available on pypi.
Ok, why would I use either?
Oh that I only needed 2 versions of python. Legacy support sucks.
Well, ok, read the blurb on [virtualenv'd docs intro page then](https://virtualenv.pypa.io/en/stable/)
That sounds interesting. But I still don't understand virtualenv.
I have never seen installing jdk 1.8 break jdk 1.2 code.
The first half of your post is uninformed and the second half is some r/latestagecaptialism mania that could be argued for any product and isn't so black and white as you like to believe anyway. I'm just going to ignore the tinfoil hat part of this and try to explain the indexing issue a little more. The reason PyCharm indexing is slow at indexing isn't really because of file IO. Indexing in this case means, read a file, parse it, analyze it, maintain some largish data structures in memory, write some meta data about this file, rinse and repeat for a LOT of files. So there is a lot of file IO for sure, but the killer IO is the paging in and out of RAM to the disk. It's a pretty good bet that OP has a slow or bad hard drive - just guessing based on the descriptions provided. This will exacerbate the issue by orders of magnitude. So is PyCharm resource intensive? Yes - it's inefficient in it's indexing practice. It's inefficient in startup. But is it overall less efficient than other full blown IDEs? No - actually it's not so bad in comparison. You have to remember that PyCharm is like having vscode with a 1000 plugins ins already installed and strong project management tools layered in there. It's apples to potatoes to compare something like pycharm to vscode. Compare it to exclipse and you'll get a more apples to apples situation. 
Quite unusable for now as the dependencies resolver is **sooooooo** slow (up to 30 minutes for some packages).
I just finished a little Critical Hit/Fumble effect roller for rpg's with PyQt5 and sqlite3 but I think I can't make a Windows or Mac executable so I guess I'll keep it to myself. :(
do you even grammar
1 lac is one hundred thousand.
Indent your entire code by 4 spaces on reddit to get proper formatting.
You literally haven't even addressed my use case. 
Thank you for explanation. I'm familiar with `injector` and `giveme` and I'm not a big fan of type annotations and type annotations based injection, since this force to use abstract interfaces (abc module). Anyway, I don't get your explanation about `injector` library. AFAIK you do not need explicit `Injector` instance.
I feel like an idiot not know what the "R" in the green circle is that has 53% of... Actually I have no idea what that percentages are for. The only "R" language I can think of is Ruby, but I don't recall ever seeing that icon for Ruby before.
I feel like I set up my environments all wrong, but it works. I *never* install packages to my python dir. If I need a package for a project I install it with `pip install requests --target='./'`. Super simple, clean, and easy to maintain. And I don't need to worry about another user not having a package since I know exactly what I'm using that isn't in the standard library.
i believe the "R" is referring to the R programming language
For some reason I hate the word "Pythnonista"
Just `pip install scipy numpy` - both have precompiled packages for Windows now.
There are so many options, and yet, none of them work decently. I don't understand how this happens. Microsoft is clearly trying really hard to make PowerShell the next big thing, but you can't even sudo with it without closing and re-opening the terminal "As Administrator." And then you have to import all of your modules every time you open it? Wtf is that? And then there's the problem that the userbase is too small, so nobody writes working tools for it... So then they have this attempt at native Linux in Windows called "Windows Subsystem for Linux." WSL is a wonderful idea, but the execution seems to have fallen flat due to performance issues. WSL is literally slower than running Linux in Virtualbox or in a Docker image in Windows. How could they possibly make it that bad? The one thing Microsoft really does right is hardware compatibility. At this point, my Nvidia drivers are the only thing preventing me from diving full-time into Linux. Fucking X and Wayland can't even handle 4k screens properly. And of course, MacOS is proprietorially banned from using decent hardware, ruling that option out. It seems that the more technology advances, the less it works. 
That is good news. So I can just install the [official python](https://www.python.org/) and then do the pip command, and I should be there? Thank you.
Yes.
Thanks. You can caught me before the edit. I kind of went on a rant about how frustrating this post is.
sweet. thank you.
I was referring to the part &gt; often it's just performing a calculation but often you don't want to have a setter so it makes sense that people don't always use it.
#it says: Traceback (most recent call last): File "test.py", line 4, in &lt;module&gt; a = input("do you like to see a scene of wolverine yes or no: ") File "&lt;string&gt;", line 1, in &lt;module&gt; NameError: name 'yes' is not defined 
Hi, author of Poetry here! The 30 minutes is for extreme cases (like boto3). And, to be fair, if you want an exhaustive dependency resolver using PyPI there is no way around it at the moment since there is a lot of badly published packages so you have to download the tarballs or wheels to check the dependency. This is a big mess and PyPI maintainers have no intention to change that. That's why tools like Poetry are important because they will improve the overall Python ecosystem. I am trying my best to improve things on my own but it takes time.
where? 
Thank you.
That error doesn't seem to be one that could come from the source in your original post. Post updated source code? By the looks of the error you are using a variable named: yes. Trying wrapping it in quotes so it's a string. 
I feel like this could have been googled so easily though... Matplotlib is literally the first thing that comes up when you enter `python plot` or `python matlab plot`.
I Googled, but I found numerous different solutions, so curious what people on Reddit are using today. but you can still cry if you want
Now I'm interested... What other popular solutions did you find? 
[here's](http://lmgtfy.com/?q=Python+package+for+plotting+(to+replace+basic+Mathematica+and+MATLAB+plotting)%3F) 402,000 solutions from google
Install anaconda and have numpy and scipy already there! Or miniconda if the 5gb of anaconda is too much for you to bear
Subject matter requirements, and hiring a front end dev to build around it without sharing the actual IP.
The first page has only matplotlib on it though... ¯\\\_(ツ)_/¯
To know where things are in your environment and have better control over versions. When you're working with interpreted languages like python and ruby, a particular project often need a a particular version of some dependency. If you install it system-wide every time, you will often run into conflicts. It is far easier and safer to make a virtual environment for each project. 
I'll be trying it out soon, but from what I've read, I/O is slow enough in WSL to make git unusable. 
I'm not hating btw, this post just comes over as: I don't want to solve my own problems, so I'll let the internet solve it for me. You could at least mention what different options you found on the internet and ask about the differences, what the most popular is, etc. I do believe you would get more respons that way as well! Also, this might belong in r/learnpython instead of here.. :)
Also, if a package is not available precompiled for windows through official channels, check out this [site of Christoph Gohlke](https://www.lfd.uci.edu/~gohlke/pythonlibs/)
&gt; I'm not hating btw, this post just comes over as: I don't want to solve my own problems, so I'll let the internet solve it for me. your posts come over as "my aspergers compels me to obsess over stupid shit and make delusional assumptions about people unsubstantiated by evidence". not hating bwt &gt; Also, this might belong in r/learnpython instead of here.. :) ok, thanks
use https://direnv.net/ : ``` $ cat .envrc layout_python3 ``` Solved years of pain for me.
I’m actually working on a Django project for tracking new releases by artists you follow on Spotify. It’s still in beta, so only a few people have access to it at the moment, but I’ve been getting good feedback. Really excited to get it out in the wild, but I’m still a month or so out (have to get legal stuff figured out, thanks GDPR).
I need to try some native interface stuff, I've only done web interfaces.
Trying to create a space invaders game. And struggling setting up Sublime text. 🤕
What are you struggling with in Sublime?
i understand not
I'm just a novice coder so I'm not able to help with the coding...and I am not familiar with musical terms...but it seems that the "tuple" you want to create is similar to a simple data file with what looks like 3 items (note + tempo + duration). If you can provide an example "tuple list" of a short song...it may be easier for others to help you with building the code that reads the data file and plays the tuples. Hope this helps, Robert 
Ah, classic: a simple solution to a problem you're wracking your brain over. If you'd like any help on this project, let me know! I'm currently working on a web app to help track box office receipts and payments to film distributors. I'm still learning Python but I'd love to collaborate on something.
Working on a pretty basic web app to control a dobsonian telescope. And continuing the DataCamp data science with Python career track
Already did
/r/flask
Here's a sneak peek of /r/flask using the [top posts](https://np.reddit.com/r/flask/top/?sort=top&amp;t=year) of the year! \#1: [Flask 1.0 Released 🎉](https://www.palletsprojects.com/blog/flask-1-0-released/) | [18 comments](https://np.reddit.com/r/flask/comments/8f5yn9/flask_10_released/) \#2: [Its out!](https://i.redd.it/biuiqdr32cq01.jpg) | [15 comments](https://np.reddit.com/r/flask/comments/8abz4y/its_out/) \#3: [The New and Improved Flask Mega-Tutorial](https://www.kickstarter.com/projects/1124925856/the-new-and-improved-flask-mega-tutorial) | [28 comments](https://np.reddit.com/r/flask/comments/6kcd2t/the_new_and_improved_flask_megatutorial/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
It sounds like you are doing this: if a == yes: instead of this: if a == "yes": But it's hard to tell unless you post the source code
&gt; rinse and repeat for a LOT I actually wrote several parsers / compilers, so, probably know this stuff better than you do. You are just waving your hands in the air by saying "a lot". What the hell is it indexing that it's so much that it takes it minutes? What kinds of indices? Besides, look at the post this is a response to: the author implied that the problem is in having HDD rather than SSD, but what I'm saying is that it is not even probable that HDD contributed a lot to the problem. That it is most likely that the problem was created by people writing the code for PyCharm, and not the OPs hardware. &gt; But is it overall less efficient than other full blown IDEs? No They are all garbage and designed using the same process for the same audience. The difference between PyCharm and any other program from that category isn't really worth talking about. It's just a fundamentally bad design, motivated by marketing instead of usability.
The whole first part of the DRF tutorial goes through serializing regular python objects...no ORM required. Think of DRF has a great general-purpose REST framework that, on top of that, has features and tools for integrating with Django's ORM. You can just...not use the parts you don't want.
The advantage of packaging for Debian is that it'll automatically make its way into Ubuntu. As long as I get it done in time for the Debian import freeze for the next Ubuntu release, it'll be in there. (For reference, the 18.04 import freeze was March 1st.)
Forgive my ignorance, but would somone mind explaining what this is, and what youd use it for? I couldn't glean much from the readme. 
Thanks.
false
Trying to use python 3 instead of 2 And downloading pygames package
Toying with lists and Quaaludes or whatever they're called. I'm currently going through the "make arcade games with python" website, and will be looking into network setup after that.
That could potentially fix an issue I had with using pyinstaller to compile tkinter programs... will have to try it out. 
That looks neat, but... any description of what it is or how to use it? Any links to installation instructions?
The downvotes seem a bit harsh to me, because I can easily see how the range of options now might be confusing. So I'll try to explain a bit. Matplotlib is the granddaddy plotting package in Python. It's been around for &gt;10 years, it has a lot of options, and it can produce really high quality plots. There's a story that one bit of the code got improved when NASA said they needed it to land a spacecraft on Mars. It also has the 'pylab' API which is inspired by how plotting works in Matlab, so it's definitely the first place to look if you're coming from there. Over the years, of course, Matplotlib started to look a bit dated in a few different ways, and a few years ago there was a wave of alternative plotting libraries. Some of them were new APIs on top of matplotlib (like Seaborn), others were new backends using matplotlib's API (like mpld3), and others set out to produce new APIs (like Holoviews). Many of them are 'web native' tools which specialise in producing interactive plots in a web browser (like Bokeh or Altair). So far, the explosion of options shows no sign of condensing down to a few 'blessed' packages.
Hi, thanks for commenting on this! Even for smaller libraries, it's a bit annoying to wait several minutes after `poetry install` while it's solved in a couple of seconds using `pip install`. I was thinking that the resolver could first try with the latest dependency version matching the requirements, and look for another version only if a conflict is detected. You did a very good job, I did not mean to be dismissive, I'm really hoping that `poetry` will become the de-facto `cargo` for Python.
Hi, I saw this https://www.reddit.com/r/Python/comments/8fybx2/a_hassle_free_command_line_utility_to_download_a/ post and I thought that's a good idea to present here my project. Feel free to comment this code :)
53% of all people on earth know Python? This must be the future!
A neural network that can recognise handwritten numbers with numpy
Don't get me wrong, from a user standpoint, GDPR is awesome. But from a small business standpoint, it can eat up a lot of cash trying to figure out all the legal stuff with lawyers.
You're kidding, right?
i mean what does do you even grammar means?
It means: "Capital letters at the beginning of a sentence are not optional."
for command line tools, wouldn't you just add the path to it in the venv activate script? That's what I did for invoke, because I didn't want it polluting my bash profile and it works fine.
oh sorry understood, capitals are banned as part of our author guides
Just started my first bit of python learning
Why would we want brokerless? There's no replication/guarantee the task will be executed.
Suuure. I assume it also bans periods and proper sentence structure? It's a small miracle commas are apparently still allowed.
You are right about py3 being more recent, but py2 is definitely more reliable. Being under active development means that it sometimes breaks things, whereas py2 is perfectly stable.
Imagine you want to do something that takes a long time (e.g. sleeping 10 seconds). It would freeze your python interpreter. That's why there are things usually called Tasks: you want to have it be executed elsewhere by a pool of workers. Sending an email is slow believe it or not, this is something you could then make a task of and just forget it happened. In other cases, you might want to have the result back of the task. So usually you get a "task_id" or something back (this will happen really quickly, before actually doing the work), so that you can check whether the task with "task_id" is done. When done, you can then get some status/result. 
Nice, the next step is to improve user experience by positioning Rock/Paper/Scissors buttons near to the Replay one. See also: [Fitt's law](https://en.wikipedia.org/wiki/Fitts%27s_law) ;)
**Fitts's law** Fitts's law (often cited as Fitts' law) is a predictive model of human movement primarily used in human–computer interaction and ergonomics. This scientific law predicts that the time required to rapidly move to a target area is a function of the ratio between the distance to the target and the width of the target. Fitts's law is used to model the act of pointing, either by physically touching an object with a hand or finger, or virtually, by pointing to an object on a computer monitor using a pointing device. Fitts's law has been shown to apply under a variety of conditions; with many different limbs (hands, feet, the lower lip, head-mounted sights, eye gaze), manipulanda (input devices), physical environments (including underwater), and user populations (young, old, special educational needs, and drugged participants). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
What in the world did I just read? "Restrict yourself, because otherwise you'll just be confused" seems like the punchline. You can't guarantee what you need nor how one needs their setup. Especially students who take different classes, with each one requiring one setup or another for different projects. To be honest I feel like this whole thing is a circlejerk around the xkcd that literally came out just a few days ago.
I've released [gTTS 2.0.0[(https://github.com/pndurette/gTTS), a library and CLI tool to do text-to-speech with Google Translate. I've seen it mentioned on this sub before, so thought you'd like! [New docs too](http://gtts.readthedocs.io)! Rewritten CLI, automatic supported language retrieval and smarter sentence splitting.
tip : to allow better response to your post maybe pastebin might be considered to present your code !
I know this is a windows 10 question, but for any linux users that may stumble upon this thread, if you're having dependency path problems, you have one installed at the system level (apt/yum/whatever) and the other at the pip level or otherwise.
&gt; To be honest I feel like this whole thing is a circlejerk around the xkcd that literally came out just a few days ago. In addition to that, this article have a smell of trying to collect some internet points by adding to a meme. Or at least getting people to look at the author. 
Some phone providers allow you to send an email (i.e. Verizon = 5551234567@vtext.com ) ... it'll probably be easier to find free low-volume email api's than it would to find a free text message api.
I really meant "Whatever reasons" as a generic placeholder for the reasons someone might have for not upgrading, and not as a sarcastic dismissal of their actual reasons.
I actually have Verizon -- will check it out. Is there a Python API that integrates the different wireless providers? 
I do contract work for the EPA and this is hilarious.
Yes, I haven't dug too deep but am looking forward to [this[(http://python.dronekit.io/)
Rewriting some old Visual Basic automation scripts for checking Active Directory status, syncing a SQL tables and AD, and making sure people are in the proper groups and distros.
Just made GitHub and not sure if this is the right way to share the link but here https://github.com/xyeeeex/jbier/blob/master/gameoflife
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [xyeeeex/jbier/.../**gameoflife** (master → 31f41d0)](https://github.com/xyeeeex/jbier/blob/31f41d0b2254f375d40253b5a6a3080566517729/gameoflife) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyac14r.)
Cool, but what do you need metaclasses for if there are other ways to do the same thing they do? “There should be one— and preferably only one —obvious way to do it.” - The Zen of Python. What can one do _only_ by using metaclasses?
But there’s an implied loop in the “if _ in” statements, right? I googled a little and it looks like the complexity of “in” is O(n).
It's essentially its own python install in a folder somewhere separate from your system install. When you activate a virtualenv, you're basically throwing that install's folders on the front of your path.
The summary is repeated on www.wikipython.com. It really is for Python users who are beginning to learn to use tkinter or who use it but infrequently. You would run it "in the background" and just tab to it when you need to reference something - most likely a widget option. If you are a genius or use tkinter all the time you most likely would not benefit much from it. Thank you for your interest.
At the very least, you should strive to understand how they work. There's a good chance your favourite python library uses metaclasses to do it's thing. 
Yeah, everybody’s saying that but there are very few “real-world” examples. I can mess with a class’ variables in ways other than using metaclasses, so why do I need them? Any examples?
I've been parsing through large sets of JSON Data doing some analysis on exploitation of low-CVSS vulnerabilities
Are you sure the first is faster? It's time complexity is O(s\*n^3\* (k+j)). The latter is O(n). Of course, the latter is python only while s\*n^2\*(k+j) is done in C for the former. Either way both implementations are slow. The following iirc would be O((k+j)logn) def summer_69(arr): total = 0 start = arr.index(6) while start + 1: total += sum(arr[:start]) arr = arr[arr.index(9) + 1:] start = arr.index(6) return total + sum(arr)
Soooo, this is what I found. On line 113 and 117, matplotlib has no copper member. There's an error when I put a breakpoint there
Gotta love the advice to delete all other instances of python after installing the one version you want to use. Good luck with that on a Linux distro. The author briefly touches on using virtual environments, but glosses over how to actually use them. Python virtual environments are the only thing that keeps pip package management somewhat sane (for myself). 
Thanks for the thorough explanation! Going by what youve said, I also am keen to se why/how OP eliminated a broker in this setup.
I thought we were done with python2
&gt;Why would we want brokerless? Throughput and latency are typical far better with brokerless messaging systems. &gt;There's no replication/guarantee the task will be executed. The idea would be that such failures are considered and accounted for in the overall design of the system. So, rather than having a single component that makes durability and replication 'guarantees' each component should be able recover from a failure in a know state; some argue that this is more robust approach. I'm not advocating for or against rather trying to answer your question without getting to deep into the weeds.
Building a PyStudentManager with Flask. Using an online course, but struggling to think if what else to put in it. Any suggestions?
I created a gist of the [changes](https://gist.github.com/Redjumpman/3b49508ff7b86bbee678bfac1ddc2674#file-python-2-7-15-change-log) for anyone who needs it.
You could use AWS SNS https://aws.amazon.com/sns/sms-pricing/
It does work. You just have to comment out line 64. I guess the program doesn't like units to equal 2
It's stuff like this I find most interesting! ill make sure to redo the UI tomorrow &lt;3
A deep convolutional neural network with residual connections and dilation/upconvolution for exploratory medical purposes. Learning a ton from this project! I've more or less finished the model and data handling, and can now finally start doing hyperparameter random search and optimization.
I work at an ISP and have created a script that checks if there is line of sight between potential customer sites and our closest ten highsites (transmission towers) using OpenElevation's API to query NASAs SRTM elevation data. It looks for an intersection between the elevation contours and the direct path using numpy and also plots the elevation profile using matplotlib cos people like pictures.
\+
Well if you will use beta versions of Python, what do you expect?
Exactly. Next time someone asks what Im working on ill say "absolutely nothing"
I use this scripts as a module for other scripts of mine. It uses gmail servers to send the message. I keep the carrier dict in case I do want to change it later. import smtplib carriers = { 'att': '@mms.att.net', 'tmobile':' @tmomail.net', 'verizon': '@vtext.com', 'sprint': '@page.nextel.com' } def send(msg): message = msg to_number = '000-000-0000{}'.format(carriers['att']) auth = ('**email**', '**password**') # Establish a secure session with gmail's outgoing SMTP server using your gmail account server = smtplib.SMTP( "smtp.gmail.com", 587 ) server.starttls() server.login(auth[0], auth[1]) # Send text message through SMS gateway of destination number server.sendmail( auth[0], to_number, message) I generally call the script [SMS.py](https://SMS.py). Then use it in the following way. import SMS some_text = 'Blah, blah' SMS.send(some_text) This gets you a message "from", the email address you provide in the auth. I also made a misc. email with gmail that I only use to send these messages. You could easily alter the code, to allow you to pass the phone number as a argument along with carrier etc. I just only send to me so I didn't make it that versatile.
its definitely not working because the return of the parallel grid is completely black
why did i even click
Fixing an indexing please problem with my app. Ugh. Indexing is going to be the death of me.
O__O
we just switched from bokeh to dash and could not be happier. so much better (much less fuzz with the details, looks good out of the box) and advanced interactions can be achieved without a line of javascript to write! 
You're in school; presumably you know how to read. Start with the sidebar.
Thanks for the kind words! I appreciate it. I understand how that can be frustrating but the resolver I went with flattens the dependency graph completely to have all the necessary information in case of conflicts. That being said, I think I just found a solution to the resolver. I need to test it further but for boto3, for instance, we drop from 30 minutes to ~11 seconds. So, I'll keep you posted.
Pvkooten explained it really well!
Right there with you! We’ve got to start somewhere.
Rehash of the XKCD from yesterday for clicks. -1
Initially it was just a didactical project to learn how task queues work, so I wanted it to be as simple as possible with little to none dependencies. After some hours of coding I decided to leverage ZMQ sockets messaging pattern to communicate to worker processes. It's still possible that in the near-future I'll add a broker too, probably redis, even though I found that designing the application to work without a broker feels more compelling and challenging for me.
I don't use it, I keep my packages working against future python versions. The change that broke my code is there to stay on py37, so I'm glad I caught it before release.
You should probably just figure out why ffmpeg doesn't work. 
I use PyCharm and it can use python environment from docker and docker\-compose \(intellisense, packages discovery, debugging, running tests. All works\). 
Lol OMG I thought the first post was bad. You're really into creepy / delusional / totally full of shit territory.
almost... [https://pythonclock.org/](https://pythonclock.org/)
Thank you. I've been attempting it with `vtext.com` but the Verizon service seems pretty spotty. It worked a few times and now it doesn't work anymore. The emails are going through, but no text messages are being received. 
Two glaring issues: 1. The program takes the file name from input rather than as an argument, which is not what was asked. 2. You use a dictionary (which has O(1) lookup) but iterate over all key value pairs such that you effectively have O(n) lookup. You should be directly indexing it with the letter value in some way. In C you would just create an `int[26]` and index it with the value of the char.
hm. It's not very pythonic, but since it's for a job where it seems more important to have easy and readable code I'm unsure. If this was more of an interview question seeing how well you know python though I guess it makes sense, it's way too long. 
And stylistically: 1. Your lines are very long 2. End of line comments that are all aligned with each other are not good for maintenance or readability. Also, splitting the entire file on whitespace will not be especially memory efficient if the file is large. You will end up with two copies of the file in memory, whereas a more efficient solution would be to read one line at a time and operate on it before moving on to the next.
I suspect 12: a Python interpreter in Python is in Python. But I’m not sure because, I’ll be honest, I didn’t check. But 13, a 3D renderer, is. It’s not bad to look at examples in other code. It forces you to translate those examples into more abstract models, in order to understand what they are doing.
I'll give you a bit of direction such that you can do your own research. * Look at the argparse standard library for initializing your script * Look at the Collections module, defaultdict might be better than what you're doing with the initialized alphabet * Read up how to use a context handler for file handles in python I could delve deeper into this, but I suggest doing a bit more reading on just those topics first, then take a second attempt at this script for your own education. If you like, I'm happy to give a more detailed review.
Some possible issues: * You aren't accepting a file path as an argument, which was specifically asked for in the instructions. Instead you read the path from user input, which is not the same thing. * You open the same file twice and never close it. You should use a context manager, and you should attempt to open the file in a try/except block and then continue if you succeeded, instead of opening it a second time to check if it's there before you open it. You should also check for the specific exception that would result from the file path being incorrect, not just Exception. * Your algorithm for actually calculating the maximum repeated letter in a word is unnecessarily verbose and inefficient. This is probably the single largest problem. To look up a letter in a dictionary, you're iterating serially over all the keys and values and comparing the keys to your letter! This is completely defeating the point of a dictionary. You also don't need to initialise the dictionary with every possible letter. It would probably be best to use Counter from the collections module for this, but you clean this up a lot even if you use a normal dictionary.
yep, looks that way
Might as well use Counter if you are going to use defaultdict
What's the point in not doing that? Not being sarcastic here 
.MP3 is a bit of an outdated format....
Sorry about you for job interview. You'll do better next time ! A few comments to improve what you could have done. You show of that you know a lot of CS concepts, but you are not experienced in Python, which depending on which position you re applying for may not be a good thing. Are they looking for someone with deep technical knowledge, of someone with experience ? If you have the _choice_ of language, then the examiner will at least assume you are comfortable in it so will expect idiomatic code. First: use Python 3, you'll have more thing available. Python 2 EOL is Jan1st 2020. Time to move on. If they don't let you use Python 3 that you'll likely in a company that won't give yo the best tool for your job and you fill suffer on your day-to-day job. os.system('cls') Is not portable and the all printing a header scream (to me), that you are trying to look pretty instead of having the job done. It is nice to see, but usually only if the rest is flawless. Look at collection.Counter, and string.ascii_lower that already implement what you are looking to do in `find_highest...` import string from collections import Counter filtered = [l for l in 'aBCDef!_*'.lower() if l in string.ascii_lowercase] c = Counter(filterd) letter,count = c.most_common(1)[0] return count You have no docstrings, but use comments... not really pythonic. As other said, learn context managers. `with open() ...` watch Beyond Pep 8. It's not because you know python syntax and are good in CS that you know Python: https://www.youtube.com/watch?v=wf-BqAjZb8M You do not follow the rules. You need to print the winning word not a sentence giving the wining word. Otherwse how can I pipe result to other program in a shell ? Debug message and irrelvant output should go to stderr. Use `sys.exit(code)` to inform wether the program exited sucessfully or not. You have two example, your program could have an optional test() function that assert those work if you are given a single file. If you are training on things like hacker-rank, keep in mind that it's not because the solution works that it is good. Contributing to open source is one way to learn how to write idiomatic code. You'll need to have to talk to other humans to learn that. Good luck ! 
These people deserve huge props for pulling this off. It’s a HUGE thankless job. Buy them gallons of their favorite beverages when you see them at conferences! 
well OK, what format is hip and in?
Thanks for the reply, I realize the glaring mistake regarding file name as argument. As others have stated the dictionary method was not efficient at all here.
This makes sense, I need to code with memory efficiency in mind next time.
Thanks for the response, I will check all this out as you and others have mentioned.
Thanks for all the responses, here my takeaways: 1.) File path as argument. This was a huge mistake...I need to learn more about passing arguments to the entire file. 2.) Core algorithm was not efficient at all, I will research using collections as a solution. I did not realize I defeated the purpose of a dictionary here...frustrating but I am learning. I will continue reading and absorbing everyone's answers. I am a bit discouraged and feel like I am getting a wakeup call here...perhaps I do not really know "python" at all. I just know how to comprise a generic program. 
The intended use is that a notebook is sent/copied to a student. The student uses the notebook as a tutorial and fills in code as part of their assignment. Their notebook is returned to me for grading.
Ya, that's the one scenario where this is kind of useful, when you have to conform to a particular interface. As far as setters go, I think it's more intuitive if you setter looks like a method than an attribute.
Guess I'm alone on this one. I just like the design principle that the form of a product should inform how it works. I think Dan Norman talked about how doors are more intuitive when you can see the hinges, I feel like the @property decorator hides the door's hinges. Thank you to the people who actually engaged with me instead of just down-voting.
nose has no dependencies. How exactly are you trying to install things? pip install nose shouldn't try to install anything other than nose.
My company's artifactory instance was borked for a day because I dropped the ball and forgot about this. I'm very glad they did it, but yesterday was not fun. Apparently I need to fix my reminder situation. 
Nvm it worked with easy_install nose 
That’s great, but [pip is generally what you want](http://packaging.python.org/discussions/pip-vs-easy-install/). 
Packaging is also *legitimately hard*. It's hard in every language, it sucks in every language. Different languages and package managers make different things easier / suck less, but ultimately there's just so many requirements that it's impossible to satisfy them all.
It’s *already* is usable? Holy F**K!
oh thank you for clearing that up
Fortnite season 4 is out, so I'm updating the custom leaderboard I made for my friends and I to include the new season's stats. Although today feels like more of a "database day" - it's still using Python. It feels like this is the first major upgrade I've done to an application. It feels great, but I'm also starting to better understand how/why things can break after upgrades - and maybe even starting to feel the pressure to get it working again, even though it's only used by a few people.
/r/learnpython wtf does this have to do with recursion?
For toying around*.
title linked to image https://raw.githubusercontent.com/GitHubJohn2/tksidekick/master/tkSidekick%20050118B%20Release%201.py 
It's a college's exercise! if it were not for recursion it would be too easy
Trying to learn tkinter so I can finally make a GUI and this is very relevant to my interests thanks!
m4a
I'm not positive this is right, I only tested it on the examples provided, but this is my solution. But I'm not (yet) a professional, so take it with a grain of salt. Good luck on future interviews! from collections import Counter import os import string import sys def load_file(path): with open(path, 'r') as file: contents = ' '.join([line.strip() for line in file]) print(contents) return contents def find_highest_letter_count(file_contents): word_max_tuple = ('', -1) for word in file_contents.split(' '): stripped_chars = [c for c in word.lower() if c not in string.punctuation] # This if statement protects against an edge case in which a lone punctuation # mark appears separated from others by a space. if stripped_chars: character, count = Counter(stripped_chars).most_common(1)[0] if count &gt; word_max_tuple[1]: word_max_tuple = (word, count) return word_max_tuple[0] def main(): path = sys.argv[1] assert(os.path.isfile(path)) file_contents = load_file(path) word = find_highest_letter_count(file_contents) print(word) if __name__ == '__main__': main() I didn't comment much, hit me up with any questions.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/PGanpJ8.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dyaw13o) 
ah ok gotcha thanks
Run pip from the cmd line not from within python. C:\users\matt&gt;pip install matplotlib
Some packages will assume that they're unpacked as files on disk, and try to do things like at the contents of a data file bundled with the package by constructing a path based on a module's `__file__` and trying to `open()` it; if the package is inside a pyz or egg file code like that will break.
Thank you and I'm sorry!
First off thanks for the response. I was using the command prompt that comes up when you search "command", which I just learned is different from cmd. Still, I encountered an error. Do you know why this didn't work? Thanks again https://imgur.com/a/1gybkhN 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/gNop53K.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dyawpgh) 
I worked on a small data science project using Pandas and Matplotlib. https://github.com/PhantomInsights/mxn-performance I am also tweaking a wxPython app that helps freelancers. https://github.com/PhantomInsights/forhirehelper
The problem is you are trying to urn pip install from Python. Exit python by typing: exit\(\) Now you should be at: C:\\Users\\matt Now try: pip install matplotlib
Thanks for the post, this certainly seems more "pythonic"!
You need to add the path of your pip installation to your PATH system variable. Pip is installed to C:\Python36\Scripts\ OR open a cmd prompt in the pip directory and then run you install command: C:\users\matt&gt; cd C:\Python36\Scripts C:\Python36\Scripts&gt;pip install matplotlib
In what way are you supposed to implement recursion? Or do you not know?
Oh see that's worse, try just saying "ssd" Its alot less redundant an waay easier to type 😉
Hey, Mancobbler, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Thank you, Mancobbler, for voting on CommonMisspellingBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Are you supposed to maybe write a function that parses a character, does all the logic of it being a number or an @ or not, and then call itself, passing the next character?
What an asshole. 
GL
Thanks for context for the graphs’ representation.
Working on a convolutional neural network that detects different classes of structured and unstructured data in a given image. 
Just run a function with the number and string as the arguments. As your function recourses, say if this number is none, number = 0. Set a base case that says if the character == “@“, return the argument number. Else, pass the character on to the recursion of the function. 
Recursion is really neat: turning a hard problem into a simple one you can solve over and over again. Ask yourself: how do you break your problem (some random string) into two pieces so one piece is the simplest problem you can think of and the other (harder) piece is the exact same kind of problem your function solves, only now you ask it to solve the second piece which is just a bit easier than the problem passed in. This is a fairly generic pattern you might consider: Step 1: Does the problem you've been handed end the work? If so, what should you return? Step 2: What do you break the problem into -- the piece to solve here and the piece to recurse on Step 3: What do you do with the simple piece to "solve" it by itself? Step 4: Call the function recursively on what's left Step 5: Combine the solution to the simple piece with the return from recursion, and then return the combination. For your problem, you're going to have a much more complicated function using recursion than you would just doing *for i in range(len(string))*. It's going to seem stupid, because recursion is overkill for this. But there's going to be a problem you encounter that it's perfect for, especially in this world of JSON and REST APIs.
you could slice python strings if the dollar sign is always the first character "$100.00"[1:] returns the string "100.00", which you can then make into a float easily: float("$100.00"[1:])
Your are trying to run pip inside python. Exit python then install using pip. Also you will need to use pip3 instead. 
I am positive about my answer
Don't try the python from Python.org. You seem to try to get matplotlib and pandas, so install anaconda (https://conda.io/docs/user-guide/install/index.html#regular-installation, https://www.anaconda.com/download/), it will come with all numpy pandas, matplotlib preinstalled and will have a gui to start things. You can dig in the weeds later on when you are more familiar with Python.
I have to also build some excel plugins.. but I am more familiar with Python, than VBA. What libraries are you thinking of using? I have used `xlwings` and `openpyxl`. I found `xlwings` to be better.. but I have only scratched the surface with what I needed at that time.
Do you mean that Riverbank will own the license if you use PyQt5 to make the software? Or that you will have to distribute the source code if you use PyQt5?
PyInstaller is gaining more momentum these days especially if you are on Python3
&gt; The Python Package Index (PyPI) is the principal repository of libraries for the Python programming language. Source: first line of the article.
Continuing my work from here: https://www.reddit.com/r/Python/comments/8cwslw/whats_everyone_working_on_this_week/dxish61/?st=jgmid12y&amp;sh=4608e5a2 This week, I have finished writing out one of the tests for one of the classes, client to server communication. This week I will be working on another test class which tests the same class to a fuller extent. This part of the code will be heavily used, so I need to make sure that it works well and reliably for users, especially because its going to be part of the daily workflow, and any downtime could be very expensive. I did also find that as my code became more and more complex and remember, having these tests, gave me more bandwidth to think about adding new features and modifying the code, without the fear of breaking something. I could always just press a button and verify whether this broke something or not. Following that, I will have to fix up a part of the integration test suite with some manually created data, and then switch back to fix a broken feature which is preventing me from testing the full integration test.
These are in the [standard library](https://docs.python.org/3/library/), which in Python is quite extensive. The PyPI is for 3rd-party libraries, like requests, flask, pytest, etc. Anything you `pip install` is from this package index.
Because you run through 6,7,8,9,10 and count all the numbers in it, so it runs past 5 at least 6 times. You really don't need two loops: ``` for i in range(2,20): if not any([i%x==0 for x in range (2,i)]): print('{} is prime'.format(i)) ```
Why not both? Have function 1 as a convenience wrapper for function 2. 
Look harder :P
I'd say option 2. Not calling `open` on the file within the function has the following advantages, in my opinion: + you can send in a stream (eg `io.StringIO`) directly. + You can separate the error handling logic. For example, what do you do if the file isn't found? + Makes unit testing a little more unit-y. Technically opinion 1 is "open a file *and* parse json", which I could consider to be two different thinks for the purposes of unit testing. 
i think i've updated it.
Actually you can even do one better than this and create a dictionary of prime evaluations: ``` prime_dict = { str(i): not any ([i%x==0 for x in range(2,i)]) for i in range(2,20) } ```
Objective\-C and Swift are also a terrible mess imo. Other than Java\+Maven/Gradle, what isn't?
hadn't thought of that XD
That seems fairly odd. I use AT&amp;T as in the example. I run some scripts for my job every morning at 9am to get some quick info sent to me, if a certain criteria is met. I don't believe I have had an issue yet with a message not coming through quickly, or not getting anything at all honestly. Wish I had a Verizon phone to compare with.
I might not understand, but that sounds like a job for an in-memory, key-value store.
🤣🤣🤣🤣🤣🤣😁😁😂😂
`@time_stuff def sequential_batch_read(): """ We read all the rows for each symbol one after the other in sequence First run 3.661222331999852 seconds Second run 2.2836898810001003 seconds Third run 0.24514851899994028 seconds Fourth run 0.24082150699996419 seconds """ conn = sqlite3.connect(os.path.realpath('../files/ohlc.db')) try: with conn: conn.execute(create_statement) symbols = conn.execute("SELECT DISTINCT symbol FROM database_threading_test").fetchall() for symbol in symbols: results = conn.execute("SELECT * FROM database_threading_test WHERE symbol=?", symbol).fetchall() except sqlite3.OperationalError as e: print(e)` Added this one, it seems to have the same performance as a normal sequential read operation taking 0.25 seconds after the first 2 runs to load 100k rows
At this point it's so hard to recommend any library for GUI development with pure python. Webdev technologies have taken over the world of GUIs, and now even desktop apps are using the DOM for GUIs &lt;insert Electron joke here&gt; [Remi](https://github.com/dddomodossola/remi) is kind of a neat middle ground, but it's still designed based on web technologies.
Are you using python 2 ? Don't use "input" on python 2
Pyqt is the best 
Usually this is done with some simple physics equations and acceleration due to gravity, instead of explicitly using a quadratic equation like you suggest. If you have a Vector class that helps a bunch, but here is the scalar version dt = 0.01 # timestep gravity = -1.0 # downward acceleration due to gravity vy = vy + gravity * dt # vertical velocity of the sprite, updated once per loop y = y + vy + dt # vertical position of the sprite, updated once per loop 
you can search for "gravity physics pygame" and probably find a few examples https://pythonspot.com/jump-and-run-in-pygame/
yes absolutely, it serves more as a programming exploration and is somewhat clearer than if you would read classical books explaining about it and maybe it might help in some other ways. thank you for your comment !
wx forever!
Hahahaha...young guy doesn't know how to recognize a GUI look from the 80s
I have been looking for something like that. Thanks for sharing!
Thanks
I learn start **Python.**
Mpl and pandas but no pytorch or chainer? Is this a joke?
Thanks! I will try that one. And yes, i just finish the basic course of codeacademy and now i am starting reading books like crash course and automate the boring stuff! 😊
Just started writing my first bigger program actually, a product inventory management basically. So far going well! Lot of new things but that's how you learn, by doing. 
It's funny, I've moved on to 3 practically with everything but if I ever need to do some quick scripting to parse bytes, maybe `s.encode('base64')` or `s.encode('zlib').encode('hex')`, I always go to python 2.7 just because of how easy it is. I use python 3 for all my projects but damn they made that stuff way less convenient.
you could make your custom made blocks have api end points to get the data from and then just display it using html/js and calling your apis from the browser. Or you could have something like Django poll and store the data you want from your blocks and then have Django render the html for you. 
there's decimal module for this kind of calculations
You asked for it: “Electron repels me.” :-)
The code is not acting funny. You also need to break in the else section of the code as well. What is happening is if a number is prime supposedly 5 in this example. It will check the if condition of the loop, ranged(2,5). First Iteration: 5%2 != 0, goto else -&gt; print "5 is a prime number", go to next iteration, since there is no break in else section. 2nd Iteration: 5%3 != 0, goto else -&gt; print "5 is a prime number", go to next iteration 3rd iteration: 5%4 !=0, goto else -&gt; print "5 is a prime number", go to next iteration **Add a break in the else loop and the code works fine**
Hey, you’re an asshole.
I was just reading an article of how stochastic PDEs can be used to reduce overfitting
Chuck this on r/samplesize if you haven't already 😉
You don't even really need classes. You could do everything with functions.
You could also make it a single function that can handle both. Check if it's a string using "if 
No real scope planned, did it mainly for learning purpose, I didn't really focussed on security and didn't researched much on the topic of functions serialization, but I find it interesting, what could be an improvement in that direction? Thank you for the feedback
Now you're just being negative! :-P
where can I find the first two chapters?
Try python -m pip install matplotlib
It's still a solution. "Use virtualenv" is some of the boxes/arrows on the chart, but it's still the right solution for that problem. For command-line tools, pipsi is a good solution.
Does pipenv work at the package level, or can I use it to cleanly manage multiple versions of python? Because that's the problem pyenv solves.
There is an Intro to [google machine learning!](http://learnopenerp.blogspot.com/2018/03/google-machine-learning.html) 
Sorry man. You're doing something wrong. Check this [https://pastebin.com/F2UdhhEA](https://pastebin.com/F2UdhhEA) Q100000 #1 3.9448413848876953 Q100000 #2 3.9678428173065186 Q100000 #3 3.9534366130828857 Q100000 #1 2.7898271083831787 Q100000 #2 2.805828094482422 Q100000 #3 2.801827907562256 END
Three things: * Read the Sidebar * Post your question to /r/learnpython * Either your code is just badly formatted or it is wrong, the function blocks should be indented, like so: def job1(): os.system("devcon rescan") os.system("netsh interface portproxy add v4tov4 listenaddress=192.168.1.50 listenport=1101 connectaddress=192.168.1.50 connectport=809 protocol=tcp") 
Exactly. Why is this upvoted?
this guy talks wisdom, I believe he is less than PhD holder.
Most of these tips seem pretty helpful. If you knew the paths before hand you could split them into trees and have workers take branches off the trees and do them through different proxies, if you wanted it to appear truly organic ... but alas, the reason the scraping takes place in the first place is because you don't have all the links. ;\-\)
oh thanks. I am stupid.
So if I have the blocks with the data,how can I implent it in the dashboard?
Intro: https://www.youtube.com/watch?v=8AAN03M8QhA Chapter 2: https://www.youtube.com/watch?v=Y4RwD1OGz4c
Don’t use `type(f) == str`; use `isinstance(f, str)`. It will detect subclasses and pass them. 
Question: Why newline-delineated JSON, as opposed to a single JSON array?
Your code should look like what is in this snippet. https://gist.github.com/Dextroz/6ab3a44043f61c3f822afef85094d515
Not completely a setuptools issue. setuptools plugin discovery is slow but there is a deeper issue in the python import machinery. There is a pretty nice thread on python\-dev about it \([https://mail.python.org/pipermail/python\-dev/2018\-May/153296.html](https://mail.python.org/pipermail/python-dev/2018-May/153296.html)\).
Well, in my opinion BeeWare projects can't really overcome their competitors. PyQt is much better than Toga, Kivy is much better for Android interfaces, Batavia is a very strange project, I'd rather use transpiler like Transcrypt. VOC is rather strange too.
I've got an inbox full of "projects" you can do. :)
Thanks for sharing.
I may have misunderstood how `injector` works, but from what I've seen you need to call `Injector.get()` to retrieve an instance of a class with its dependencies injected. So with a class having some dependencies, that is not a dependency itself, you would do: instance = Injector.get(MyClass) With `antidote` this would be: instance = MyClass() This means that if anyone wants to use `MyClass` it needs to be aware of the `Injector` and use it. And your code is less clean. At least in my opinion. Some may argue that having a global injector is bad idea, but if you have a large application you will probably define a global injector by yourself anyway. Managing contexts and scopes are difficult. From my experience having a context may be useful for a specific part of your application, such as tests, which you can do with `antidote`. And you can extend pretty easily `antidote` to manage a scope for dependencies if you wish. Manipulating scopes is hard. From my point of view it is just a feature that the authors found nice to implement. The only scope I've encountered are linked to the request for web application framework, which the framework handles. Concerning type annotations based injection, I don't really get why you would need abstract interfaces. In the following example there is no need for it: class Service: pass class MyClass: def __init__(self, service: Service): pass Such type annotations are easy to add, maintainable and helps IDEs a lot. The only case I see, which `antidote` could handle better, is when you need to inject a subclass. But even then, I often subclass an existing one and seldom would need an `abc` only for type annotations. Would you mind explaining why you would need it, if I missed the point ?
Also, like which parts of python I need to be looking for, like could wise.
[If you are getting interview questions about specific language features, you are interviewing for the wrong job.](http://www.jasonbock.net/jb/News/Item/7c334037d1a9437d9fa6506e2f35eaac)
I've ran into this too several times. For example, Docker logs are stored as JSON records, one per line. The reason? - JSON isn't designed to be streamed (in fact, it's not a good format for transferring large or rich data...) So, if you have a many-millions records in a log, where you'd like that each record had some easy to parse storage format, then line-delimited JSON is kind of OK... Not great, very limiting, with some useless structures and a lot of things missing, but OK...
Making a simple chat program using sockets to prepare for an assessment task at school
Make a single page web dashboard with Flask that uses publicly available apis to display things like weather, sales, sports scrores etc. 
You can find some common issues and fixes in the github issues
Python runs on Android already.
 sudo find -R / -name *python* 2&gt; /dev/null | chmod 777
Still working on an automated process for reducing Astronomy data with Python scripts. I've stepped away from the scratch coding, and I'm designing a lot more. I'm making sure that functions are small and readable. And I'm trying to figure break down the larger process into very small, manageable micro-processes.
Challenge mode: make the toaster into an autonomous drone and make it go skynet. 
Numpy is definitely a cool library.
Multi-level inheritance – a derived class d1 in inherited from base class base1, and d2 is inherited from base2. Should be --- Multi-level inheritance – a derived class d1 is inherited from base class base1, and d2 is inherited from d1. 
That is fucking cool dude.
I also made a class last week that stores a FFT2 and inverse FFT2 of an image and makes it easy to display them. This week, I need to work on some more histogram rearranging code that makes it easier to look at the patterns in the phase and frequency information. 
If I just load a .py file on Android it does what? Runs it in the terminal? Also this means that Google installed python on all android devices? Is pip included?
Yikes, that one slipped by me. Nice save, thanks
Super cool, ive thought about this before, like it
I'll be working this weekend on how to get started contributing on the [PyCon Italia new website](https://github.com/pythonitalia/pycon) :\)
that's good to know, are you building an API on top of it?
Savage
My socket-fu is pretty weak, but have you considered adding another thread on the server side that just accepts all requests and sends them through a python Queue to the processing thread?
https://i.imgur.com/HqYwKtf.png
Thanks, this really helped. I now have something closer to working, if not in the way I expected. Do you know of any packages on github (or similar) that use cffi so I can look at examples of layout? 
Do that somewhere else, then `pip install --no-index --find-links=/path/to/wheels -r requirements.txt`
What game are you botting?
You lost me at a function that opens a file to read one line from on every call. 
Google Cloud SDK is a set of tools and libraries to interact with Google Cloud services. Which services do you want interact with?
I don't even use lagnuage with 99% accuracy
Try 0.25 instead of 1/4
the way it obtains a random line index is also pretty weird (and downright broken, as it currently stands, I think)
&gt; lagnuage Checks. 
Yeah, numpy is completely unnecessary \(there's \`random.sample\`\) and the lines should be read only once and sampled many times.
from fractions import Fraction if int(Fraction(cellValue)) &lt; 5: return True
Thank you! That's very helpful actually :)
It's a game called Tribal Wars. I'm only able to use bots because all of the buttons, links, and entry fields are part of the HTML.
This still makes the mistake of loading a potentially huge file into memory twice. Also, you should just check that the characters are lowercase alphabetic directly rather than check that they're not punctuation. There are many more characters (even in ASCII) than space, newline, letters, and punctuation. From an efficiency standpoint this is also going to be relatively slow for an O(n) solution because of how many times you iterate separately over the entire file: (1) with strip(), (2) with split(), (3) when creating stripped_chars, (4) when creating the Counter. As the file gets large and you start getting cache misses that will become even more noticeable. I'm not saying that's an absolute concern here, just something to be aware of.
definitely,`random.choice` will work too.
This works, but the database I'm working with might have more elements in it that I want to manually convert into decimals.
Create a web-scraper that grabs transcripts from your favorite TV show and organizes it into a database of some sort, so you can do data analysis based on each character's dialog and that sort of stuff, create a markov chain generator, etc.
There's also https://en.m.wikipedia.org/wiki/Opus_(audio_format)
Non-Mobile link: https://en.wikipedia.org/wiki/Opus_(audio_format) *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^177478
Yeh, that's not always true though. It's not so black and white. It depends on the kind of position and your seniority at the very least. An example scenario: The candidate knows that &lt;language&gt; experience is expected (because he read the job description) and because he has very limited experience with it, he prepares for the interview sufficiently (from my POV) by creating a small project or two and putting them up on GitHub; the candidate shows commitment and interest. As a candidate, you can't go wrong with this approach. Worst case scenario you learned something new that you won't use because you won't get hired. That said, you have to consider that if that's something you mind, maybe you weren't the right candidate for the job in the first place. This is especially true for junior candidates, but I'd expect senior candidates to do this as well. An argument against that from a junior would be "But there is no way I can have experience with that, I'm applying for a junior position" and from a senior "I don't need to show the knowledge, I can learn it fast, it's easy for me". And for both of them, I'd have the same answer: "Why don't you show some commitment and interest and just learn it? If you are a junior, you should be eager to learn. And if you are a senior, it should be easy for you." I mean if you are really interested in the position and you want bonus points, why wouldn't you? If you tell me that you are extremely interested in &lt;language&gt; and you always wanted to learn it, which is why you want the position, that's great! I love that. But if you also tell me that you couldn't spend a single weekend to actually learn any of it, well... something just doesn't add up there. You see what I mean? Anyway... the reason why I'm writing this is because the article but especially way the article is presented through your link's text ("If you are getting interview questions...") could be harmful to people. They might not understand that interviewers are not always looking just for the actual knowledge. There is more to it. If you show commitment, it's never a loss for you - you either get the job or at least learn something new. I guess it depends on the company you are interviewing for as well...
You'll probably want to run some javascript on your main browser window. You can jquery hook "click" on every browser element and have the event record the element id in a javascript global array. In selenium you poll that variable in a loop.
This is really cool. How hard would it be to extend it to 2D, 3D?
It recognizes which natural language is given as input, (classifies it) from a possible 21 natural languages. Not sure if the quote still applies? I do agree though that this problem is easy to solve with ML.
The proper answer to: &gt;Q14. Write a one-liner that will count the number of capital letters in a file. Your code should work even if the file is too big to fit in memory. is, "No."
All due respect, as much as webscraping has it's use, there's a reason why companies place restrictions on their websites, and they should be respected.
The entire point of everything I'm trying to set up here is to avoid having to type the full path to every binary on my system every time I want to use it. For example, in my Linux setup with virtualenvwrapper, if I want to create and activate a virtual environment named "testenv", I will simply type: &gt; mkvirtualenv testenv &gt; workon testenv Similarly, it's [not really correct](https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take) to have the full binary path in your shebang lines, as that destroys cross-platform support (a crucial doctrine of Python). It was after I RTFM that I discovered that the cross-platform shebangs can work if you configure Python Launcher For Windows. Yet, as I described, set-up of PLFW didn't work exactly according to TFM. 
“It is not a good idea to rape someone’s server without setting a delay”
It took me an embarrassing long time to find what was different between your 2 sentences. For the benefits of others who might also be stuck: - d1 in inherited + d1 is inherited
There is an example of "manual" extent, by providing the derivatives as a numpy routine ("by hand" discretization). This will not be trivial, but it's the next goal : I will now focus on arbitrary dimension problem (2D, 3D...). I think the most "tricky" part is to have a nice routine that is able to convert from variables / position in space to global matrix position, and do the invert. Once I will have that, it will be "piece of cake". Because the computation is already done in a sparse way, the performance for higher dimension should still be good!
Nobody respects my data, why should I respect theirs?
You can also hook into the tor network for random ip's I just did that on a recent scrapper I wrote in C#. 
That will also give you a reasonable nohammer delay
What about cloudflare's JS challenge?
It always returns `''` by the way, the whole function is broken.
Many of the answer in this are wrong or not pythonic, or somethine question don't make sens. - Memory not deallocated when the interpreter exits ? - Random number without looking at whether they should be secure or not ? - most questions are Python 2 based which is irrelevant nowdays - Pickling is not string but bytes. - ... 
Thanks! Glad you liked it :\)
Personally, I have an issue with the way the article is written around "how can we get away with doing this against the site owners will?". Anytime, I have web scrapped, it wasn't a T&amp;C violation. It was was data that we \*paid\* for, or owned but there wasn't an API to exfiltrate. In these cases, yes you want your user\-agent to look like a normal browser, because you don't want their Google friendly data. Yes you want the scraper to serve cookies, to login normally, etc. But I have never seen the need for random proxies, as I've never had to hide what my scraper is doing since our purposes are 100&amp;#37; aboveboard. 
Personally, I have an issue with the way the article is written around "how can we get away with doing this against the site owners will?". Anytime, I have web scrapped, it wasn't a T&amp;C violation. It was was data that we \*paid\* for, or owned but there wasn't an API to exfiltrate. In these cases, yes you want your user\-agent to look like a normal browser, because you don't want their Google friendly data. Yes you want the scraper to serve cookies, to login normally, etc. But I have never seen the need for random proxies, as I've never had to hide what my scraper is doing since our purposes are 100&amp;#37; aboveboard.
I think this falls under the intentionally "uncompromising" design, but can one get `black` to leave quotes as they are?
I'm not familiar with how Cloudflare works, but the company I work for uses Akamai and we've had a chance to play around with Akamai's [Bot Manager](https://www.akamai.com/us/en/products/cloud-security/bot-manager.jsp) which is quite good at identifying bots &amp; mitigating them in various ways. Just some of the tricks that Akamai apparently uses is to inject javascript into pages to do things like track mouse movements, timings, etc. They do a ton of analysis using tricks like this and many others to identify bots/scrapers/etc. and are very good at it. They can quickly pick up on patterns like pseudo-random delays, etc. in mouse movements, keyboard clicks, etc. to determine if there are patterns to a given stream of traffic. I forget exactly how many bots they have identified and categorized but I think it's well into the thousands by now, and they're constantly improving/updating their definitions. Another really nice feature of their bot manager, as an Akamai customer, is the ability to screw with the responses fed back to the bot in a number of ways. Once traffic is identified as a bot Akamai gives you the ability to do anything from just logging it as a bot to slowing down the response rate to actually redirecting the query to an alternate origin. This means you could set up a server with completely bogus data and direct only bots to that server. So you could think you're scraping data from the website you're targeting but instead be getting fed a bunch of random garbage or even slightly different data. I attended a meeting at Akamai about a year ago where they went into a lot of detail about their bot manager and how they came about creating it. One of their big customers who beta tested the bot manager was a retail office supply chain that saw a lot of bots hitting their site to scrape data on pricing information, sales, etc. As Akamai was developing their bot manager this retailer for a while used the ability to redirect to an alternate site as a way to feed completely bogus pricing information to a number of the bots that were scraping them. So the bottom line is that there's likely no way to truly solve the sort of challenges that providers like Cloudflare, Akamai, etc. will throw up in your way. They have teams of people constantly working to improve their tools, and those tools can let their customers do things in such a way that you may never truly know your scraper has been identified and is being slowed down, fed bogus data, etc.
Or just use `scrapy` and obey robots.txt and not be a dick to sysadmins just trying to do their jobs? 
I set my user agent to be "definitely NOT Python 2.7". It's true. I'm using 3.6. 
You could just take the derivative of your parabolic equation and use that with a classic integrating function as /u/mdonahoe says.
Is it just some initialization process or a long running process? What exactly does the process do?
Not at this time - the project only needs a simple HTML render with no javascript/SPA so the Django templates fill that requirement. Wagtail does have an API ready to go, though, so that would make it easy if I had to add one: http://docs.wagtail.io/en/latest/advanced_topics/api/index.html
If you're looking for some general advice, The Hitchhiker's Guide to Python has a section on how to structure your project: [http://docs.python\-guide.org/en/latest/writing/structure/](http://docs.python-guide.org/en/latest/writing/structure/)
 Like this? √n² 
&gt;f you tell me that you are extremely interested in \&lt;language\&gt; and you always wanted to learn it, which is why you want the position, that's great! I love that. But if you also tell me that you couldn't spend a single weekend to actually learn any of it, well... something just doesn't add up there. You see what I mean? The counter is simple. Many people are interested in programming as a JOB, not a lifestyle, so they won't spend their weekends to get better at it, unless they're behind in work performance. So they'll express an interest to learn something new\-\-\-for the job, during work hours on the companies payroll. I don't think this is bad. Jobs already offer to pay for graduate/post\-graduate schooling, and $3k per week workshops, which sets up the expectation that you are allowed to learn on the job.
"Somebody stole from me, I should be able to steal from other people."
It may be a full session that longs as much as you’re working, but on the other hand someone may just quickly execute something and log out. Therefore execution time cannot be predicted, but from the experience it usually a long running process. 
T&amp;C are widely considered to be a unilateral agreement where one party is generally making an uninformed or implied decision with no option to negotiate terms. The legality of these is in direct question right now for this reason. If a website can say "I can use/sell your private data, it's in my T&amp;C that you never read" I really don't think it's an ethical stretch as an individual to say "I can use/sell your publicly available data based on my own personal T&amp;C, which you also never read". There are legal arguments to be had for either side, but if America in 2018 has taught us anything its that there is a wide divide between ethics and legality. Corporations should never be given preferential treatment over individual consumers and no code of ethics would imply that.
It's not really an error, its a point of contention whether Python is compiled, interpreted, or something in between. Heck it's a point of contention if x86 assembly is compiled or interpreted, considering the finagling that happens with CPUs and micro\-op caching.
I know for a fact that Akamai keeps a pretty up-to-date list of Tor exit IP's and will use that in helping to identify &amp; track bot traffic. They probably scrutinize all traffic from Tor exit nodes even more than other traffic given all the bot activity that comes from them. My bet is that other companies like Cloudflare, AWS, etc. do this as well. 
Thanks this is great. For now I'll use Conda environments, I've been comfortable with this with Tensorflow for the past few months now. 
off course it sounds dumb to add a lib just for sake of randomizing only. `numpy` is good if you are already using it for the purpose it was intended too otherwise `random.choice` will work as well.
&gt;When you hand over your data to a company, you agree to their T&amp;C's That's not always the case. 
This is a simple wrapper around black module and doesn't implement any formatting logic. So a better place to raise this concern would be in issue section of black repository.
Mimicking known, popular search engine bots is a great way to get your traffic blocked by sites that use Akamai, Cloudflare, etc. With about 30 seconds worth of effort you can find the AS numbers and netblocks assigned to [Google](https://ipinfo.io/AS15169), [Microsoft](https://ipinfo.io/AS8075), etc. I know for a fact that Akamai's bot manager is very good at identifying legitimate bot traffic from these companies versus fraudulent bot traffic. It's trivial for them to determine if a Googlebot request came from a Google IP address or some third party IP address.
You can increase that `socket.listen` backlog to something greater that 1.
That article presents a very flawed analogy. A programming language is a tool and knowing a langages features is knowing how to make best use of your tool. It would be like asking a carpenter how he/she screws in lots of screws (using the correct speed and torque settings on a drill) and gets boards smooth (with a belt sander). It is not the only questions we ask from a candidate, try to tailor questions to the skills listed on the resume, and we are not asking very hard questions. If a candidate cannot answer any questions (and cannot provide efficient alternatives to solve the problems solved by a feature), it might indicate a candidate who has never had to solve non-trivial problems and never bothered to read documentation. If a candidate has never seen a dunder method, never heard of the GIL, never packaged a project into an egg, never installed a library with pip, never set up a virtual environment, and never touched their sys.path, I am not sure if I believe that they are a senior Python developer. I am fine with a candidate telling me that they only use python for simple scripting while doing their 'real' work in C++ or Java. I am less fine with a candidate who has only written glue code between an existing application and third party APIs (see if another team is looking for a junior developer) or a candidate who does not see the value in knowing things not readily applicable to their current work (yes, I have interviewed this type of candidate).
I didn't mean to report a bug, but to ask about what's possible to any person familiar with the tool.
I find it a bit odd that some entity has to run a process at all in the container. I mean if it is something you know that will always run then you would use something like docker-compose and a startup script. If you want to go with a more enterprise solution you go with kubernetes.
Then it depends what sort of candidate are you looking for... A 10x programmer who wants the job will not mind preparing for the interview in the way I described. At least that is my experience.
The standard pattern for this: a single job that's doing the waiting and that spawns a worker on receipt of a message. The worker processes the message, returns the result, and exits. See select(), poll() etc.
An online sketcher https://sketch.io 
&gt; its a point of contention whether Python is compiled, interpreted, or something in between which makes the claim that a clear answer is possible erroneous.
I understand that it is not what you want however what you want may not be best practice. Sorry if I went on a tangent but IMHO I think you should really revisit how you are building this as it can lead to poor design and maintenance horrors. If you just want to run the process inside the container you don’t need to do exec it because that allocates a pseudo terminal you want something like what is documented in this github issue https://github.com/phusion/baseimage-docker/issues/330
&gt; senior Python developer. But this is exactly my point. If you are interviewing for a "senior *Python* developer" position, by all means, you should be answering these questions. But I'm a software engineer, not a "Python developer".
`cat bigfile | capcounter`
SimpleHTTPServer is no longer part of python 3. On Python 3 this `python -m SimpleHTTPServer` should be `python -m http.server` 
This may be true, but for my specific use case using tor was an easy way around the request limitation for the sites in question.
"Python has a multi-threading package but if you want to multi-thread to speed your code up." 
dynamic is what I'm thinking
I always used swig, but this might help for cffi: https://github.com/jiffyclub/cext23#cffi
There's always /r/learnpython. Organization really isn't a language specific problem; I'm not sure what you're asking. Python is most definitely OO; and fundamentally, everything in Python is an object (as an example): x = 1 print(x.__repr__()) General tooling ecosystem: * Layout: If you need a tool to help you get started with a layout, look into [[Cookie Cutter](https://github.com/audreyr/cookiecutter)]. * Testing: If you want help with testing, see [[Pytest](https://docs.pytest.org/en/latest/)]. * Documentation: If you want help with documentation, most projects use [[Sphinx](http://www.sphinx-doc.org/en/master/)]. * Distribution: is a weak point in python, and you might get away with setting up a private [[devpi](https://github.com/pypa/warehouse)] or [[warehouse](https://github.com/pypa/warehouse)] repository, though a better solution is probably docker for backend services. * Editors: include [[Pycharm](https://www.jetbrains.com/pycharm/)] and [[Sublime Text](https://www.sublimetext.com/)]. 
This is interesting, do you know of any apps that have this type of implementation?
Use the `exec` or `eval` function? What's wrong with using a function? 
Headless browsers are probably the best way. Also phantom.js is poorly maintained last time I checked - it gave a ton of rendering errors, so I switched over to chrome which now has a headless mode
Make a new internet
I'll teach you python for less than that :p
hmmm interesting 
wanna learn it too. could i join? 
I'll be honest once I learned that I just switched my architecture to integrate the scripts to just be on the workers. I think as an alternative, you could switch to an encrypted network like ssl, but I don't know how difficult that is/if that actually is a solution. Maybe someone else more knowledgeable will chime in.
This pattern might help: import pathlib filepath = pathlib.Path(some_path_to_file) code_as_string = filepath.open().read() d = dict(locals(), **globals()) exec(code_as_string, d, d)
&gt; ask for random IPs or at least they don’t follow a certain pattern like 1.2.3.4 to 1.2.3.**400**. /facepalm
I am more talking about a candidate's resume. If you want to brag about being an expert or senior developer in a language, I will ask you to demonstrate it at an interview. Our position also don't include a programming language in the title, though we do mention Java and Python in the description. We want a new hire to be some what familiar, just so the candidate will hit the ground running. Language knowledge is not the only factor for hiring a candidate, but it is a factor we consider, along with things like knowledge of web services and networking, knowledge about database design, and knowledge of distributed systems.
It looks like for some versions they did include a link to the changelog, but now you have to get it from the tarball.
I run most on a small `ec2` instance I have set up. Its nice cause I get access to all the S3 nice-ties like S3/RDS/etc if i need them.
brilliant
I've definitely over-engineered my setup. For most non-trivial scripts I set up a docker image that I run instead of the script directly. If I decide to run the script on the host then I set up a new `virtualenv` always. I _never_ re-use envs, its not worth the headache.
[removed]
[removed]
Thanks. This is exactly the type of advice I was seeking.
!RemindMe 14 hours
I will be messaging you on [**2018-05-03 08:42:22 UTC**](http://www.wolframalpha.com/input/?i=2018-05-03 08:42:22 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/8ggbva/ive_been_doing_python_for_about_four_months_and/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/8ggbva/ive_been_doing_python_for_about_four_months_and/]%0A%0ARemindMe! 14 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Do you know any UK football scores API's at all please? Sorry pretty new myself.
A free-tier `ec2` instance + cron will get you a long way. Thats definitely the best starting point, and then you can add more things as you need.
Add static typing. Remove this new Async function colouring shit.
What exactly are you trying to do? C macros and Lisp macros are very different and accomplish very different things.
In my experience, many sites that crawl do not do so in a respectful way. They slam the site with as many requests as possible as fast as possible. This can overload the site.
Learning about basic debugging and using PyCharm.
I've been thinking of seriously checking out PyCharm. Might use this to make the jump.
&gt; What would a non-shady use-case for this be? All personal use-cases. Any task where I could do it myself, but it would be tedious and annoying. I'd like to automate those. Library websites, school grade sites, maybe some banking thing.
I implemented one of the serial protocols for a Phillips iColor3 DMX controller and built a flask app around it so I can fire off light shows programmatically.
&gt; I don't even use lagnuage with 99% accuracy but you are a bot.
Pycharm is good as long it's used on small projects. We have a bigger project and linter and other inspections take about 10-20secons to show/hide errors. Changing scope to changed files only, doesn't really help.
It's pretty cool, I'll give you that, but I have some critiques. You cleaned up some EU parliament data, fed it into a machine learning algorithm, then discovered that the machine learning algorithm did its job? Not to mention that this has been done before. [This example](https://youtu.be/evTx5BoKcc8) that jumped out at me has a different approach to the problem, but still ends up creating a neural network that can accurately detect the language of words fed into its input. Google Translate also does this quite accurately. I feel that you could've made the program more user-friendly. Why not package it off with a basic GUI to input language detection? That'd make applying this program to practical uses much easier. Also outputting the language *names* instead of their indexes would've been better for demonstrating the program. Well done either way. The code itself is clear and easy to follow, but unless I'm grossly misunderstanding the term "Graduate project", it seems like a pretty basic application of some pyhon libraries, with the main task being the data cleaning.
Yup. Tried writing a linkedin scrapper for a competition... Within 1 min my IP got blacklisted.
bought a picamera. Gonna setup a security system in my room
Thanks for all the suggestions 
Nice, just might get in on this one.
I encounter it in the following scenario. Confluent's Kafka Connect can consume Kafka topics and write a file to S3 as the sink at a certain flush size. It can be configured to use json or avro file extensions. In both cases documents are line delimited. I didn't know how else to deal with this scenario, but I'm eager to learn any alternative :)
Is it bad that I immediately assumed that your title was actually someone asking a technical question? Anyway, great work! Just have to have a reason to actually buy a chromecast now.. 
Are you still looking for someone? I have a lot of experience in developing API callers
I'm disappointed about the Subscription model, would have really loved to make the jump from Community to Pro but 2/4/6 months is not really enticing for a Python hobbist.
In my experience tor exit IPs usually result in you getting captchad by cloudlfare or another equivalent.
Thanks for your feedback! Glad you thought it was cool :\) I realize this has been done before\-\-in fact, somebody ported Google's language detection library, and this is probably what you would actually use if you were going to need this functionality in a production environment. [https://code.google.com/archive/p/language\-detection/](https://code.google.com/archive/p/language-detection/) Still, I thought I could learn more about how its done by implementing this language detection functionality myself. Also, I'm generally interested in learning more about Natural Language Processing \(NLP\). And, yes I completely agree. I could do a lot more to make this project more user friendly, but it was assigned 4/20 and its due today 5/2, so there was limited time. In addition, I had the final problem set to complete, a quiz, and there's going to be an exam released today to complete by this coming Sunday! Lastly, "Graduate Project" is the title the teaching staff gave this project\-\-I think it's most likely titled this way because the class is composed of students taking this class for graduate and undergraduate credit, but only the students receiving graduate credit are required to complete an independent project. It's much smaller in scope then say, a semester or year long capstone project. 
Perfect thank you, I will try this and see if it works. 
I'll investigate how battle-tested task queues like celery tackle the problem, but I think that all task queues are designed to be used in a safe environment network or a VPN
I've had bad luck using Tor myself, it's very slow and many Tor IPs are broken. But sometimes it is the best way. Just don't use it for very high volume.
I personally use Flask and find it easy to use and learn with.
I dabbled in both. I think at the very surface django looks easier to use. But I felt the deeper you went the easier and more intuitive it was to use flask. 
I saw the comparison to Git and its startup time. I thought to myself, *hmm, isn't git also written in Python*? So Wikipedia ays: * Written in: C, Shell, Perl, Tcl, Python Perl? Tcl? *Shell*? So I pulled up git's source code, found mostly C and shell script, along with, indeed, perl. And python thrown in there. Holy hell. Heh... makes me think maybe I *should* be using hg.
Shhhhhh... that's supposed to be classified!
I spent many years in one big project written in .net. It had about 1M lines of code IIRC. In Visual Studio, we can create projects, which will emit one DLL. That project(DLL) can be referenced in other projects. Then we have different layers (like UI, DB, Services etc.). So we split the projects based on their logical function. Also it gave the flexibility to reuse. I was thinking along those lines. What is your opinion on VS Code for editor ? It looks better than Sublime to me - I dont have much experience with either. VS Code is free and looks solid.
Flask vs Django can be something like tabs vs spaces. A Django developer moving to Flask will feel like all of their batteries became pieces and spread out as a puzzle everywhere. A Flask developer moving to Django will feel like they're a cat that's been stuffed into a fish bowl. Another consideration is the ORM. The Django ORM is a bit nicer overall and covers most situations and nearly all of the major plugins also integrate into that ORM. So there's some nice synergy there. SqlAlchemy, though, is more flexible but requires you understand your interface far better. I prefer Flask for microservices. Django for things like a personal website. Falcon is nice if all you need is a REST interface. 
When possible I migrate automated scripts to my raspberry pi (or a few of them). I have one setup so that on startup it runs a cron file to call a python script which grabs the latest version of the code from github and then starts that up. I've added functionality to it over the past few years so it shows some LED status signs, and has a restart/shutdown button as well. 
I work in adtech and I looove (not really) the shitheads who say “well you agreed to it” Yeah, it’s just that... not the fact the entire ecosystem is built on the sand of “free” (but not really) internet and has people trading away PII without the right to know what it’s used for or if they can cancel out of the agreement. And it’s gotten bad enough to provoke one of the biggest consumer rights legislation in the industry. Everything right now (pre GDPR) is “lol you want to cancel out of giving me data? Haha too bad it’s mine now. Fuck you!” That was and is unfair. And it is changing no matter whatever the victim blamers and sleazy scam artists say. I want this world of “Why” for the data collection, not “Why not”. And it is coming sooner than I had ever dreamed of.
`hg` isn't any different - it uses `python`, `perl`, `c`, `tcl`, etc. I think any project of that size has so many bindings and customisations that you're bound to have a few different languages thrown in.
OK here's the big things to understand: Flask is a routing library. You assign a URL route to a function, and the function returns what you want to see. Really simple, but not much is built up for you that you'd have to build yourself. You will have to write a lot of code to get from flask to a blog. Django has tons of stuff built-in for session management, database mapping, front-end buildout, etc. It is its own environment and pattern for building out sites. Get to know it, and it will do a ton of the heavy lifting for you, but there's a lot to learn that comes with it.
kubernetes offers both scheduled jobs and one-off jobs triggered via API, it's my preference. Packaging python tools into docker is very easy
Or, 5 strategies to be an asshole. The only article this will trigger for legit companies is 5 ways to block this guys crappy shit and for those less inclined to play nice, 5 ways to ddos the shit out of users of these techniques by hammering it in return, or feeding it with bogus data.
`itertools.combination_with_replacement()` is the correct way. Show /r/learnpython what you have tried to no avail and they will help you. 
This will just get the whole tor network blocked, which some legit users might rely because of actual issues with internet-freedom in their countries. Mis-using it and getting everyone blocked makes you an asshole.
For me, I've spent the last 20 years avoiding Microsoft... I'm willing to consider VS Code, but I have no experience with it and it is pretty new. That said, Sublime Text's power is its [[community](https://forum.sublimetext.com/)] and [[plugins](https://packagecontrol.io/)]. Additionally, I'm not a fan of Electron's backend in an editor for python development; it's just not python centric. Pycharm in that case is actually an anomaly because it runs on Java, but it has had the most polish for an IDE based interface.
??? You can have a year subscription for \&lt;15&amp;#37; the normal price. Do you not like money?
Yes! You can load the page in a headless browser, grab the cf_token and relevant stuff once the page loads, and set it in your session. :)
I'm running a counter for the iteration and it's only going into the 10s of millions. 26^7 should be in the billions. Am I running into a memory problem here?
Thanks! So, looks like the model predicts 'Slovenian' when being given an empty string. After looking through the Slovenian sentences, I'm not actually sure why this is, but that's something I should fix. I haven't added any additional languages yet, but its something I can do quite easily. I would just need to find enough language training data for a language I want to add, and have my pre\-processing functions read from the new file path. I might have to clean the new language data in a different way as well depending on what type of garbage is in the raw file. Prior to starting the project, I read through some of this research paper to learn about using ngrams to identify language, but they only achieved an accuracy of about 75\-80&amp;#37;, evening while using ensemble learning. [http://www.aclweb.org/anthology/W13\-1729](http://www.aclweb.org/anthology/W13-1729) Another prediction model I just discovered though is this one: [https://github.com/Mimino666/langdetect/](https://github.com/Mimino666/langdetect/) This person ported Google's language detection library to Python, and from the library [source](https://code.google.com/archive/p/language-detection/) , you can see that it achieves a precision of 99&amp;#37;, and supports 53 languages. Similar to my model, it also uses Bayesian statistics. I haven't compared the difference in speed or memory of my model to either of the above.
How much "personal responsibility" should be required though? Is [76 working days per year](http://techland.time.com/2012/03/06/youd-need-76-work-days-to-read-all-your-privacy-policies-each-year/) a fair (or even productive) use of people's time? As for the legality of them, many of the convoluted ones aren't [valid in Europe](https://europa.eu/youreurope/citizens/consumers/unfair-treatment/unfair-contract-terms/index_en.htm). I've seen people refer to similar things for America, but haven't seen any literal examples myself, so I can't point you to those. Something I have seen examples for that is at least "similar" in spirit is the use of non-compete agreements as a condition for employment, which are often [not valid/enforceable](https://www.linkedin.com/pulse/20140929151034-19959056-4-reasons-why-your-non-compete-agreement-probably-isn-t-valid/).
FYI, VLC has this built in via Playback -&gt; Renderer.
Thanks everyone for the suggestions, I want to accomplish somethign similar to what this module does today: https://github.com/lihaoyi/macropy But I'd like to do it inside a Python 3.x codebase. We have a large report with plenty of boilerplate, and file manipulation. We can't use functions because we end up closing the files we are manipulating, so macros would be great, even simple ones like the ones the C pre-processor enables: http://www.cplusplus.com/doc/tutorial/preprocessor/ 
I replied above. Basically a C pre-processsor like addition of boiler plate code used for a print report.
&gt; We can't use functions because we end up closing the files we are manipulating This makes no sense. It sounds like you are trying to write some other language's idioms and limitations instead of writing Python. Can you expand a little more on what you think prevents you from using functions?
Is postman pro a permanent license?
if you have an edu email address you can get it for free under the education license
You could simply setup a Samba server🤷🏻‍♂️
This is a good example of how a feature that seems simple from the outside can require a lot of hard work, discussion and thought to get right. Kudos to Victor for seeing it through!
They don't stack so the max you can get is 6 months, but still a great deal. 
In fact at the moment it's far more likely that you didn't even know the company existed.
It's for 6 months. 
**$1 Tier** - Write Pythonic Code Like a Seasoned Developer (course) - PyCharm Professional Edition - 2 Months Subscription - Illustrated Guide to Learning Python 3 (ebook) **$15 Upwards Tier** - PyCharm Professional Edition - 6 Months Subscription - Python Jumpstart by Building 10 Apps (course) - GitKraken PRO - 1 Year License (software) - Thoughtful Machine Learning with Python (ebook) **Above Average Tier (Currently $15.47 As of Writing This)** - Mastering PyCharm (course) - Mastering PyCharm - 4 Months Subscription - DigitalOcean $50 credit (New Users Only) - Python Tricks: A Buffet of Awesome Python Features (ebook) **$20 Upwards Tier** - PyUP - 1 Year Subscription - egghead.io - 6 Months Subscription - Fluent Python (ebook) - Postman PRO - 6 Months Subscription 
Try: def count\(s\): if s.find\('@'\) \&lt; 1: return 0 else: if '0123456789'.find\(s\[0\]\) \&gt; \-1: return count\(s\[1:s.find\('@'\)\+1\]\)\+ 1 else: return count\(s\[1:s.find\('@'\)\+1\]\) s= '1gg1ggg1@g' print count\(s\)
We use ECS on AWS which is a kubernetes alternative. Docker is immensely helpful, and couple this with cloudformation you can automate change management
I need this in my life
Well, I prefer one-time purchases. I get that devs need to eat too, but from a consumer pov subscription models just doesn't work for me. Not saying that to be an ass, just because I'd much rather use an outdated software than continually paying for fixes/features I might not need.
What do you mean by this? Not something ive heard about
Thanks for the link!
At first blush, I'd suggest utilizing WMI to query RSSI values from your wireless card, and then use Python to parse the output. Here's a page to get you started with WMI: https://pypi.org/project/WMI/ And here's a page showing WMI queries that will get the wireless RSSI values: https://blogs.technet.microsoft.com/heyscriptingguy/2007/03/23/how-can-i-determine-the-signal-strength-of-a-wireless-connection/
There is no such thing as an unblockable scraper. There is a whole industry dedicated to preventing it. I worked at an org that performed large-scale web scraping as a business, it's a constant battle.
If you buy a one year sub you get a perpetual license. Considering a single year sub is cheaper than their old stand alone license cost, it's actually a better deal now than before the subscription model for literally the same outcome.
Yep! 
Does anyone know of a good tutorial or best practices on how to approach this? Sorry pretty new still as well, just done simple scripts here and there 
No need I did as a long script... too bad there is no pre-processor like features in Python, but there is a lot of other good stuff! =)
Be careful with this one. I did the same for instantwatcher.com. They banned me until I apologized. I'm still banned.
Yes there is. If you avail of an item it prints in a red font when it must be redeemed before to be still valid.
Could you expand on the playing samba shares with chrome cast? Or are you suggesting as an alternative to the simple http server?
Yes there is, but they explicitly say in a red font when it must be redeemed before to be still valid.
Download VLC into Chromecast. Login to local network settings with your PC’s account details. Voila! There you go!
The Talk Python courses link you get when you buy any particular tier do NOT expire. You could redeem them a year from now.
Isn't "fluent python" a book that I saw higly reccomended many times around here, for intermediate experienced users? Looks like a great deal to me!
So, as someone who works mainly with MicroPython/CircuitPython -- how useful are some of these subscription services? 
What the actual fuck is this? import numpy as np def get\_random\_ua\(\): random\_ua = '' ua\_file = 'ua\_file.txt' try: with open\(ua\_file\) as f: lines = f.readlines\(\) if len\(lines\) \&gt; 0: prng = np.random.RandomState\(\) index = prng.permutation\(len\(lines\) \- 1\) idx = np.asarray\(index, dtype=np.integer\)\[0\] random\_proxy = lines\[int\(idx\)\] except Exception as ex: print\('Exception in random\_ua'\) print\(str\(ex\)\) finally: return random\_ua Did you try this? import random print\(random.choice\("I’m down on my knees, searching for the answer", "Are we human or are we dancer?"\)\)
I liked it Intermediate user here. I read it 2015 ed. when it came out. I cant remember what were my python exp back then :|
I think you missed my point. If you'd engage with us a bit more substantially you might learn how someone more experienced in Python approaches the problem, ie, 'more pythonically'. But in the end, if you've got something you're happy with, all is well. Good luck with your work.
Like what? They gave a good foundation to what Django is all about. That is all that matters!
If you want to make your own wheel, consider if that wheel is actually better than existing wheels. If it takes up most of your energy/time, may be worth looking to get paid for it (not that you have to). For linear programming, you could probably go quite far, but I suspect others have gone even further. Maybe try to stand on their shoulders and improve their work. This only goes so far, but you should at least look at their work first.
Oh dear me... you got it wrong. The difference is ... "d2 is inherited from d1" (d1 instead of base2).
When in doubt, `time.sleep()`!
The edu edition is same as Pro? 
I believe so, except it is not technically licensed to develop software for sale or something of the sort
OP bought and confirmed
It said it after I bought the bundle. 
It said it after I bought the bundle. 
The below items in your order will not be available after the following dates: DigitalOcean $50 credit (redeem before July 31 at midnight Pacific time) PyCharm Professional Edition: 6 months (redeem before August 8 at midnight Pacific time) GitKraken PRO (redeem before June 14 at midnight Pacific time) Postman PRO (redeem before May 16 at midnight Pacific time) 
6 months
Postman Pro Redeem before May 16 GitKraken Pro Redeem before June 14 Digital Ocean Redeem before July 31 PyCharm Pro Redeem before August 8
If the utf-8 tag is any indication they might have written it in python 2.7
TBH, I'm not totally sure. I'm hoping to enable editing/development in a certain area of the codebase without revealing all of it. Perhaps VCS was the wrong term...
Home related automation runs on a server at home. Anything working purely with non-home services and data runs as lambda functions in AWS, either triggered via webhooks to API gateway or as a scheduled event In both cases, keep the python / pip / terraform config in public hosted git so you can redploy
&gt; python 2.7 downloaded that now it says this? https://imgur.com/UcAHhHJ
Split the repo. It's easy to do permissions per repo. Permissions per file on a distributed VCS is tricky. It probably exists but likely isn't free.
Disclaimer: I work for JetBrains. The PyCharm Edu edition is PyCharm Community Edition \+ Edu plugin, which adds interactive courses inside the IDE. What msdrahcir is talking about is a program : [https://www.jetbrains.com/student/](https://www.jetbrains.com/student/) . If you're a student falling under the terms of the ptogram, you get all the JetBrains IDEs for free.[h](https://www.jetbrains.com/student/) 
You are missing a required module. Run this command in your command line (not in IDLE): py -2 -m pip install requests
Install the requests module from pypi. `python -m pip install requests`. This type of question belongs in /r/learnpython
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/p8rjmZS.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
I have the hard copy and its a great book.
https://docs.python.org/3/library/stdtypes.html?highlight=translate#str.translate
Well, that's odd. Where did you get python2 from? You must have a very old version. Show me the output from this command: py -2 -c "import sys; print(sys.version)" If it's anything less than python 2.7.11 you should get a new version from python.org and install that. 
PyCharm is a more powerful and easier to use. Virtual environments do not have anything to do with your choice of IDE. You can use them with any python IDE. PyCharm has functionality built-in to create either virtualenv or conda virtual environments.
Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\WINDOWS\system32&gt; py -2 -c "import sys; print(sys.version)" 2.7 (r27:82525, Jul 4 2010, 07:43:08) [MSC v.1500 64 bit (AMD64)] PS C:\WINDOWS\system32&gt; 
&gt; 2010 Yeah, where did you download an 8 year old version of python? Get a the latest python2 from python.org. 
Absolutely, but that makes sense, like you said, micropython removes a lot of stuff. But did Py3 *add* a lot of stuff at startup time? It doesn't seem like it. I haven't dug around, but it doesn't *look* too different in terms of the initial startup. But why is it *that much slower* then-- the amount claimed in this thread is far beyond insignificant.
😂😂 sorry it was auto downloaded through program called qBittorent for some search feature or something 
Ok. For development of a certain area, you can have multiple repos and either create a separate python package or use git submodules. 
This bundle gets you PyCharm Professional for 6 months very cheaply, wich is a good deal if you want to test it for longer than a month. After six months you should know if paying a yearly fee is worth it for you. Additionaly if after six months you renew your subscription for another 6months to make it a full year of non-stop sub, you automatically get a perpetual fall-back license.
It was a joke about the phrasing of the title. You could claim to have "identified natural language" by saying "Yep, looks like a language; got letters, words, everything". Obviously that's not what's happening here.
One of the best programming books I've ever read. Highly, highly recommend it.
I second splitting the relevant code into its own package/repository. You get the access security and the ability to write independent tests that the contractor/third-party can run on their own. You are planning on writing tests, *aren't you*?
(submitted here) FWIW I listed Unicode in Python 3 as one of the reasons that a Unix shell shouldn't be implemented in Python (although I prototyped it in Python): http://www.oilshell.org/blog/2018/03/04.html#toc_4 I was surprised to see this page, i.e. Python making a pretty huge change post-Python-3.0. I wish UTF-8 was the default as of Python 3.0. 
Anyone know if you can upgrade from pycharm pro to the all products pack for a discount &gt; $15? 
I already have a DigitalOcean account, so if someone wants my $50 credit, PM me. First come, first serve.
Do you mean the " .upper() "?
Thanks so much! I just needed someone to point me in the right direction. I'll post future questions to r/learnpython.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
&gt; a_really_long_name_that_has_some_meaning_but_is_really_long Maybe don't name your variables like an ass. The difference in variable lengths is usually several characters max.
That's probably just because you tried to scrape linked in, and has nothing to do with mimicking known search engine bots. 
Appreciate the disclaimer and clarification. I'm using community edition and it's a great IDE so I've always wanted to explore Pro. Didn't understand how the perpetual fallback license works until I looked it up, it's a fair alternative to consider, thanks for the suggestion!
That's an overly complex function that always returns an empty string, why do you ask? 
Git is written *mostly* in C. There are some higher-level commands implemented in other languages because, well, why not? If you're just gluing a pipeline of lower-level commands together, why not just write a shell script?
yep yep, that exactly. If you have a virtualenv indexed then pycharm is wildly slow. Don't forget to invalidate cache and restart after doing so.
Then why would you ever renew?