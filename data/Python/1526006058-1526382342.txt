Firefox support coming end of this month! Will ping you when it's out
Docs need work; sorry if you weren't able to find what you were looking for. The diffs on GitHub and Bitbucket show changes as plain text. I've found that to be inadequate for comprehension. My extension improves that, by making it easier to see where a particular symbol is called from, or what a function does internally.
glad you liked it! It works only on the diff views of Github and Bitbucket right now, and reviewable is not supported. :( I'll spend some time to see what will take to get there, and put this on the roadmap for this year.
Good article but I think it gives short shrift to microservices. Just as a monolithic application can become an unwieldly (sp?) tower of babel microservices done wrong can be a mess. But done correct, where services maintain contracts/APIs, it speeds up development/enhancements/features and actually simplifies many of the items listed as "problems". Logging for example: A monolith may generate multiple log files (or even just one) but you pretty much still have to rely on everyone logging appropriately. With microservices you can sort of outsource the actual log management with something like ELK--and if you design things correctly all services must provide logging info that actually makes tracking things easier. Done correctly microservices should reduce or at least insulate ad-hoc band-aid/expedient type of crud crawling into a system. There have probably been any number of microservice type systems that made a major change that everyone hated--and it is sort of easy to reverse that out. There are just as many monolithic stuff that users just say, "Yeah, don't use version 12.1 it was awful."
It is open to non-attendees but there is a small registration fee.
Ping me as well please!
Remind me! June 1 2018
Oh and backups to S3 are working also. I had the config files encrypted with pycrytodome but ripped it out because I thought it was overkill. The project is young but I think it has potential.
No. Wallaroo is designed to work event-by-event. More like Storm, Heron, and Flink than like Hadoop.
Could you explain a bit more about the logging example. I just don't see the difference between having logging for a monolithic vs microservice architechture
Send me your github username and I will add you as a collaborator
Check out meetups if nothing else I would say
Yeah, unlike previous pycons. E.g: https://www.youtube.com/watch?v=gBlRuef4lRk has issues with sound. 
r/Titlegore much?
I don’t want to be a collaborator. I have no clue what this is. If you want to attract collaborators, you need to publicize the work and do some basic marketing. A cryptic post on Reddit won’t get you anywhere. 
That looks great! I am not using Google Chrome though and hope you have plans to support any other browser (e.g., Safari, FireFox, or Brave)?
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Firefox support coming end of this month!
Meetup.com
Sure. But to start my general point is that done correctly microservices will require components to work with other components, including logging, in an orderly fashion. That is true of a monolithic application as well--but it sometimes becomes easier to cut corners in a monolithic application. Essentially microservices or a monolithic application **CAN** leverage an external log aggregation system that helps to slice and dice info. But monolithic applications (at least most of the ones I've worked on) tend to treat logging only as a way to track down issues--user info and analytics are a secondary issue. So often logging is sort of a secondary concern--the webserver will do its logging, the db will do its stuff, our application will provide other facts about stuff that happens. On the microservice side you pretty much have to define the logging setup so the information is useful for tracking/finding issues and that ends up being good for analytics. So you say all services must provide a machine id and service id, then they also have to provide user/session info, and finally what actions took place. And you end up with a centralized place where you know what your webservers did, what the db interactions were, and what the backend business systems did. As a side note--it is funny but you can tell the writer has done dev work or worked with developers because of the side track on "time". Can't count the hours that timezones, log times, server times, etc. have led to hour long arguments and constantly having to adjust times when tracking down issues where logging isn't coordinated. Which is another good thing about microservices--you treat time as another service (NTP) and all logging uses UTC or some other definite time. Won't matter if the log comes from a server in China or from NY--the times will be relatively correct and whether using a browser or a decent tool will be adjusted appropriately to treat the times as local.
Surprise is more specific for recommendation system. You can use Tensorflow, Numpy, Pytorch etc for this as well. There are many libraries and models, you need to try our different ones based on your need and data set. 
I don't see why your logging solution is unique to microservices.
I don't know if this is helpful, but many PyCons make the videos of the talks available quite soon after the conference. 
Do you mean lxml XPath selector is 5\-10&amp;#37; faster than lxml css selector?
$30 to be exact
I’d suggest looking at upwork.com and skimming for keywords like python. While you could find a skill and then go find the market for it, you might have an easier time the other way around. I know there’s a ton of people looking for custom python tools to scrape web data and format it in particular ways, but I’m not sure what else is out there or what the going rates are.
PyJamaCon 2018–soon on everybody’s couches! Gotta find a way to contribute—I guess donate to PSF?
I’ve been using Keras lately for my research project I’m working on because it’s much less overwhelming (to me personally) than most of the other options. It runs a tensorflow backend so it’s basically just a wrapper 
I don’t think it could scale fully but you could handle a million or two probably 
You are correct it is not. A monolithic application can have well defined and useful logging information as a requirement for all parts of the application. It simply doesn't really require it. A microservice system, unless you want it to crash and burn real fast, tends to require that all the services adhere to a set of well defined contracts--logging is just one. 
If only you had a linux box to run it on...
You could possibly run an additional network trained only on biodegradable objects. Then compare the image over both networks. So run it through the first classifier to determine degradation and then if it isn’t, run it over the second. I don’t know if that will work though. Just a thought. 
If you're serious about programming and live in the area, just find a way to pay the registration fee. You'll earn that back many times over in the course of your career.
Adding to what else has been said, you could do web development with some frameworks like Django or Flask. Upwork.com is a good place to find these jobs. 
"cringe" is just default vocabulary on the internet these days for "I don't like this". It's kind of like using words like "fuck": if you use that word a lot instead of something better, then I'm going to conclude that you just don't know many words. Something something illiterate youth something something get off my lawn.
I have done this. Like you said, web scraping is big but not paid very well. Also, I've managed to find quality clients on UpWork (those willing to pay a good wage) but it's rare. Also, UpWork takes like 20%...
Never used Flask but I have deployed super basic Django sites locally. Ran into a glitch where they loaded really slow but maybe it was something to do with my MySQL workaround. Anyway, how is the workflow? Do clients expect front and back-end specialization?
Yeah ok, I'll just give up eating for this week. 
Yeah all those issues are 100% valid. I’ve had pretty much the same issues there. It’s a good place to identify what’s in demand, but not necessarily the best place to do it. 
Aside from that being far from practical advice for many people, registration has been sold out for some time. 
Here's a sneak peek of /r/Upwork using the [top posts](https://np.reddit.com/r/Upwork/top/?sort=top&amp;t=year) of the year! \#1: [How I picture myself looking for clients on Upwork](https://heroichollywood.b-cdn.net/wp-content/uploads/2017/08/It-Georgie-Gruesome-Death-Stephen-King.png?x42694) | [8 comments](https://np.reddit.com/r/Upwork/comments/76862t/how_i_picture_myself_looking_for_clients_on_upwork/) \#2: [You definitely do.](https://i.redd.it/adrw4t45l5r01.png) | [16 comments](https://np.reddit.com/r/Upwork/comments/8bbzbu/you_definitely_do/) \#3: [Happy Sunday!](https://i.redd.it/6gp8u8iebvu01.jpg) | [17 comments](https://np.reddit.com/r/Upwork/comments/8fs3e4/happy_sunday/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
`import click` 
Try sending an email to the conference sponsors, asking for a ticket for yourself. Sponsors normally have a number of tickets to give away, and you're just their target audience.
Plotly (offline) along with Cufflinks and pandas ! This is the most powerful data visualisation tool which you could use and that too for free xD ! Try it and you will find that your life suddenly became beautiful! Happy coding !
Another poor article for SEO...
If you read the docs closely you see `shelve` has some caveats, including using `pickle`. To me it feels a bit risky to use something that uses pickle for saves since a change in your code can make the pickle format used on saving incompatible with the new code. And corrupt savegames really kill the experience. I'd try something less coupled like a JSON based format, maybe using an explicit and validating (de)serializer like Marshmallow. Or maybe a SQLite3 database. And of course make sure your save code can not overwrite a save file with corrupt or empty data. You probably need a save writing thing (write to temp file, verify validity, swap name with old file etc) and a 100% understanding of what is going on when you save (is it thread safe etc).
great, will keep you posted on Firefox support. Yes, I would love to open source after some maturity to the product - perhaps later this year
I just discovered https://devpi.net/docs/devpi/devpi/stable/%2Bd/index.html which looks promising.
 import sys # use sys.stdin and print
What happened to the recording? The video is barely watchable: after ~1:12:00 the image starts to shake rapidly in a very nauseating manner, it literally hurts to watch it.
Silly me. [`itertools.product`](https://docs.python.org/3/library/itertools.html#itertools.product) is the function I was looking for.
Wear a polo, have a lanyard sticking out of your pocket and no one will knoe
1. On reddit you have to indent code with 4 spaces to get it to display properly. The triple backtick ``` doesn't work. 2. Your math is wrong. https://en.wikipedia.org/wiki/Combination
Can someone provide me with a copy (the wheel/package as uploaded on PyPi, not source code from github)? I'm currently doing a research in this field for some automated detection of such packages on PyPi and sample like this would help a lot. Thanks!
I hope sincerely that you are not the one writing the exams. This code is atrocious. Please focus on learning one language properly before doing transpilation shenanigans.
Yeah, stop being poor!
Strange. The backticks work in the new GUI.
the picture under "Sweet!" is showing wrong calculations. 29 - 21 = 18 and 15 + 8 = 33
This old project of mine implements the m,n,k,p,q rule (get `k` in a row on an `m` by `n` board, first player puts `p` stones, then `q` stones per turn). It supports up to 4 players for these games and you can play with a mix of other human players and CPU players.
I just came here to ask about a beginner-friendly GUI framework. I tried Pyforms but I couldn't understand the documentation that well. Is this good?
1. Read the sidebar. Go to r/learnpython or r/PythonHomework 2. Don't post screenshots of code. Post code. 3. Ask a question!
r/socialengineering
Here's a sneak peek of /r/SocialEngineering using the [top posts](https://np.reddit.com/r/SocialEngineering/top/?sort=top&amp;t=year) of the year! \#1: [If this is real, it's epic.](https://imgur.com/gallery/USjnb) | [188 comments](https://np.reddit.com/r/SocialEngineering/comments/6vl6ov/if_this_is_real_its_epic/) \#2: [How hacking works](https://i.redd.it/31crebjlpulz.gif) | [59 comments](https://np.reddit.com/r/SocialEngineering/comments/7028lu/how_hacking_works/) \#3: [The FCC has been using dead people's social media accounts to spread pro-repeal propaganda, but they might also be doing the same on your behalf. Please check if your accounts have been compromised.](https://www.inquisitr.com/4685704/fcc-has-reportedly-been-using-dead-peoples-social-media-accounts-to-spread-propaganda/) | [72 comments](https://np.reddit.com/r/SocialEngineering/comments/7k447c/the_fcc_has_been_using_dead_peoples_social_media/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Can you glom by combined attributes? For example, how would you sum the moons by size? target = {'system': {'planets': [{'name': 'earth', size: 'normal', 'moons': 1}, {'name': 'jupiter', size: 'huge', 'moons': 69}, {'name': 'mars', size: 'normal', 'moons': 2} ]}}
Beautiful!
Looks good but I would change the header, it kinda looks like it was done in MS Paint ;)
This is amazing! Thank you!
Apparently for data visualisation, all we need is a bar chart.
You're a savior! Thank you 
This is really awesome! Wish I had this when I was learning Python! 
Thank you!
trying to get started on a deep learning atari pinball ai using keras, but I feel kinda lost atm... [https://github.com/pedrocunial/tommy](https://github.com/pedrocunial/tommy)
Beginners, don't worry, == still gets me all the time
&gt; * `list.append(x)` - adds x to the end of the list &gt; * `list.extend(L)` - appends L to the end of the list Um... clearly not. `append` appends, `extend` extends. `[1, 2].append([3])` is `[1, 2, 3]`. `[1,2].extend([3])` is the same as `[1, 2] + [3]`, or `[1, 2, 3]`.
Someone shared [this link](https://files.pythonhosted.org/packages/d8/97/dcbd4ec7ea5e26cf3fd151a4a001a3a4c6c3269eaf3c81ad4ddb2c4e8beb/ssh_decorate-0.2.tar.gz). I think that's what you're looking for.
Interesting, though just glancing over the code it looks more in line with Wolf3D (grid based orthoganal no height difference) than Doom (non-orthoganal, 2.5D vector based with height difference but no overlapping). You might enjoy Bisqwit's youtube video on creating a Doom engine in C, https://www.youtube.com/watch?v=HQYsFshbkYw He goes through all the maths and design decisions, it's a very interesting video and would be a great starting point for making a Python version.
yes
Yeah, I think they should replace the first example with list += L
TL;DR Don’t go by this?
`dict.keys/values/items` return a view in Python 3, not a list.
TL;DR it's full of errors; the official Python docs are great and verified, and if you need a simpler way to check how things work try out [IPython](https://ipython.org/) or [PyCharm Community](https://www.jetbrains.com/pycharm)'s great builtin Python skeletons (ctrl+click a function to see its signature and description). You can also always run eg. `help(list.extend)` to see the docstring, and `dir(x)` will show you all the attributes `x` has, if you need that.
\&gt; Have others noticed the same thing? Yes. The "cheatsheet" and the "TkInter Tutorial" posted today have no value. They should not exist. Let's just downvote link posts like these.
Some better written ones might be better placed in r/learnpython, but there extra caution must be taken lest amateurs pick up poor/incorrect practices from poorly written articles.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Anyone have something similar that would not be for beginners?
All of those are tools to help in learning, not hinder it. In fact, there's hardly a better way to learn than by reading through the docs.
/u/vaderfish Could you give more info on why rubberduck requests read and *write* access to my repositories?
That is a great idea. Are you familiar with it?
You can use the built in CSV module and open that with Excel
 string = “no, you cant use typographic quotation marks” string = 'also apostrophes are more common than quotation marks' # e.g.: repr("string") == '"string"'
I think it’s applicable since python ships with SQLite built in. 
``'\n'``?
How has this got so many upvotes when there's so much wrong about it and every comment of any substantial length is pointing out multiple errors? Upvote ring?
Im sorry the CSV is built into python? 
? https://www.google.com/search?q=python+cheat+sheet&amp;tbm=isch
The [CSV module](https://docs.python.org/2/library/csv.html) comes as part of Python's [standard library](https://docs.python.org/2/library/) meaning you don't have to install extra modules.
I was actually just looking into this, and found there are some libraries for reading/writing Excel files. For example: https://github.com/jmcnamara/XlsxWriter I haven't used it yet, but it seems simple enough from the examples.
Just make sure you use Python to [make some charts about it](https://www.reddit.com/r/dataisbeautiful/comments/8ify4f/i_ate_nothing_for_a_week_drank_water_here_is_the/).
If you're using Pandas just use the [df.to_csv()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html) method.
It should not ask for write access -- that sounds like a bug at my end, and I'm checking this. Can you tell me if this on GitHub or Bitbucket? The read access is required to answer the usages/definitions queries across the repository. Getting back to you on the write access issue shortly
https://docs.python.org/3/genindex-all.html :)
There is [openpyxl](https://openpyxl.readthedocs.io/en/stable/) for newer xlsx files \(read\-write\) and [xlrd](https://pypi.org/project/xlrd/) for legacy xls \(read\-only; legacy Office formats is just a huge pile of binary shit that is impossible to reproduce\). There is [pywin32](https://pypi.org/project/pywin32/) library that enables you to use COM interfaces \(something like CreateObject in Visual Basic, I don't have much experience with this\). But it is Windows\-only and thus not Python\-way. But here's my advice: if you don't need Excel\-specific features, just use CSV as others suggested. It will save you *tons* of time.
Thank you all for your comments. And I am deleting this post with a plan to create a cheat sheet by my own hand dedicating enough time and post again as it has unacceptable errors. I am extremely sorry about the errors. I am feeling very much sorry that I did not check it before publishing. I will make a cheat sheet by dedicating hours, even days if needed, to create a perfect piece and post again. I should have given enough time on this before publishing it and I shouldn't have accepted another person's compilation. It will really hurt my reputation of more than one decade experience &amp; expertise in Python. Really sorry. 
How is your data organized? If it is in the form of dictionaries inside a list like the following: my_data = [ {'property1': 'value', 'property2': 'value'}, {'property1': 'value', 'property2': 'value'}, {'property1': 'value', 'property2': 'value'}, {'property1': 'value', 'property2': 'value'}] Then you use pandas to export it to a csv file that can later be opened in Excel. import pandas pandas.DataFrame(my_data).to_csv('my_data.csv') p.s. you can install pandas by running "pip install pandas"
Tutorial: "Download the source from here" - for a "Hello World" app. If getting one window without any content to show is so complex you can't show it inline I'm not sure I would trust it.
only allow self posts
This is on a public github repository, but on the bottom of the rubberduck pane I saw it wanted me to login to github. After clicking on that it brings me to the "Authorize this app" page: https://i.imgur.com/GpINgYy.png
Maybe you could use an [online whiteboard](https://yourpart.eu/) so all of us could collaborate in creating something great.
Ah, that's a very good suggestion. After doing the initial work I will try something like this so that we can collaborate and provide great values to others.
To be fair it’s kinda difficult to learn how to read the documentation if you don’t understand syntax/other python basics. I’m about 40 hours of learning into it and the docs are a much better resource for me right now, but I struggled at first trying to figure out how to read them. Great example of this is keyworded arguments, those were a big conceptual gap for me. Even though this may be 100% correct and the documentation is way better, I feel like this type of thing can be a good way to bridge conceptual gaps
That would be great. Thanks for working so hard. Just so I understand, what does logging in to github through rubberduck provide me? It looks like it is already navigating through the code just fine.
Yes, it's more like wolfenstein. But since there has been a newer Wolf3D, I thought expectations would be lower if I said Doom. That video will be useful when I stop with the orthogobal design. I probably wont in this text mode program. But there's a whole pygame library I never explored yet. Also some 3D opengl...
You don't need pandas for something that simple. `with open('out.csv', 'w', newline='') as csvfile:``writer = csv.DictWriter(csvfile, fieldnames=my_data[0].keys())``writer.writeheader()``writer.writerows(my_data)`
Also /u/vaderfish, the page you linked to has a lot of read-only options (unless I just need to read further).
&gt; Have others noticed the same thing? Absolutely. Of all the subreddits I visit regularly /r/Python has the most consistently **upvoted** blog spam. I'm not sure if it's the culture that leads to users saying `oh wow, a link! Great for them I'll upvote!` or if there's other methods at work but the content here has always seemed a bit fishy.
That is true. The reason I used pandas in the code sample was because I could remember the API for it from the type of my head
touche
It's a really nice interesting challenge to write wolf3d targetting text mode. Especially as ANSI is absolutely awful at doing vertical stripes, and you have to worry about the "non-square" pixel, which I see you solved by using a framebuffer and rendering out a LOWER HALF BLOCK unicode if the column is different in two rows. good work I say.
wxpython
This is the conclusion I came too as well. Useful, but not nearly as much as advertised. 
Writing python gdb scripts to read heap info in a coredump. 
The author was doing pretty good until the closing paragraph when they got "order of magnitude" wrong. Still some decent data.
Thanks :) The previous versions indeed had ugly rectangular "pixels"
The author here :) &gt; The author was doing pretty good Thanks. &gt; they got "order of magnitude" wrong Can you please expand because I don't see what is wrong? The Nim version is ~100x faster than the Python version, making it 2 orders of a magnitude faster, no? ([wiki](https://en.wikipedia.org/wiki/Order_of_magnitude))
**Order of magnitude** An order of magnitude is an approximate measure of the size of a number, equal to the logarithm (base 10) rounded to a whole number. For example, the order of magnitude of 1500 is 3, because 1500 = 1.5 × 103. Differences in order of magnitude can be measured on a base-10 logarithmic scale in “decades” (i.e., factors of ten). Examples of numbers of different magnitudes can be found at Orders of magnitude (numbers). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
PyCon will be in Cleveland again next year, and you sound like you are someone who should request financial aid. Check this link out: https://us.pycon.org/2018/financial-assistance/ Good luck!
Just post the link and we will up- or downvote.
Maybe in SQLite 3.
The reader (me) was doing pretty good until he read that Nim was 2 orders of magnitude faster than NumPy instead of what the author actually wrote - that Nim was 2 orders of magnitude faster than pure Python. I'll show myself out here.
I am planning to post them as text posts. Do you think sharing links are better than doing text post here? Or what is your best suggestion?
It bugs me, but it bugs me less than the steady stream of questions which belong in /r/learnpython.
Got it. So, I should sometimes post directly on reddit as text post and sometimes on external websites depending on what I am sharing in which part. Thank you for your suggestion. :)
This has been going on for quite a while. Only allow self posts from now on. They only care about ad views anyway. There is hardly any value in them.
The best would certainly be to have these post moderated when necessary and adding more strict rules against the 3 points you mentionned. Otherwise, as users we can down vote and I think it is even better if we comment, it will put some doubt in the mind of users that upvote without correctly checking. Finally, if nothing can be done here, another subreddit could be made, but we would be a bit alone :\)
http://lmgtfy.com/?q=Python+Excel+libraries
And then there's that too. Though at least it's free to use for open source work. 
Thanks for writing this! That was very interesting. I wasn’t aware of Nim before today—what’s your opinion of it so far? 
Yes, wxpython is a thing that exists. Your point?
It is. For GPL use.
This project just uses PyQt. You'd be better off learning to use Tkinter for now. Once you have a good grasp on Object Oriented programming with python, PyQt is going to be the easiest to pick up. 
This gets a big thumbs up from me. Pandas Excel writing is really great, and it bolts onto openpyxl and xlsxwriter effectively, so you can use both at the same time. I'd also like to fairly shamelessly plug a library I wrote called XL\-Link [https://0hughman0.github.io/xl\_link/quickstart.html](https://0hughman0.github.io/xl_link/quickstart.html) which adds a bit more functionality on to of the normal \`to\_excel\` method of Pandas.
Is there any data that can not be stored as JSON?
&gt; Absolutely. Of all the subreddits I visit regularly /r/Python has the most consistently upvoted blog spam. I'm not sure if it's the culture that leads to users saying oh wow, a link! Great for them I'll upvote! or if there's other methods at work but the content here has always seemed a bit fishy. With cases like the recent [sqlite blurb](https://www.reddit.com/r/Python/comments/8imqf9/sqlite_getting_upsert_in_3240/), it seems like your hypothetical automatic upvote of links is a theory with some merit. 
&gt; I wasn’t aware of Nim before today Well, it is not well-known, and it is still in the pre-v1.0 phase (don't let that scare you, things are quite stable and non-breaking). &gt; what’s your opinion of it so far? Now that is a though question to answer. Python is my main language, and I do most of my work in Python. I first heard about Nim in /r/Python thread called [Post-Python Dissatisfaction Syndrome](https://www.reddit.com/r/Python/comments/6c1jnv/postpython_dissatisfaction_syndrome/). I started learning Nim by translating some of my simple Python scripts to Nim. I had lots of (stupid) questions, but Nim IRC/Gitter community was very helpful and welcoming! Just couple of months later I was able to solve Advent of Code tasks [using both Nim and Python](https://github.com/narimiran/adventOfCode2017). Take a look at the code in the repo to get the feel about similarities and differences between the two languages. Long story short: Nim is fun and exciting language, and I would recommend it to the current Python users. Don't use it in production, don't expect Python's ecosystem, but use it for personal and weekend projects - you might be positively surprised. Btw, for those looking to speed-up Python, Nim compiles to C, and it is possible to call Nim code from Python using FFI. &amp;nbsp; If you have any more questions, I'd be glad to answer.
Where do I say it's a new toolkit? It literally says "based on Qt" in the headline. The advantages over "just" PyQt are mentioned on the site (creating installers, among other things). Thx for pointing out the typo! I'm on the road and will fix once at home.
Or use it for free under the GPL.
&gt;lets you create GUI apps for Windows, Mac and Linux. It is a lightweight alternative to Electron based on Qt You never explicitly state that, but you sell it as an *electron alternative*, which implies its some kind of new GUI toolkit. &gt;based on QT implies you've done some extensive core Qt toolkit modification, when I don't think that's the case. This is the impression I got, as well as other people in this thread when rapidly skimming over the project's site. I would have pushed &gt;Deploy cross-platform desktop apps in minutes instead of &gt;Create cross-platform desktop apps in minutes 
Yeah, this is been a problem for a while. I used to get excited when I would see your new post. Jump in and click the random link only to receive a big bigface. Now I'm just skeptical and typically avoid certain post now.
How does this compare to tkinter in your opinion? 
I feel you're nitpicking here. And I don't like nitpicking, I think it's harmful to the goodwill of the sub.
I am really glad this is getting put in. Super useful feature, eliminates inevitable arguments about "best practice to do upsert", which has wasted a lot of (unnecessary) time in my past multi-dev projects.
This is not a nitpick. This is the simple matter of keeping non-Python stuff out of /r/Python. Your laissez faire approach would also make changes to the POSIX standard on-topic here. 
Are you absolutely sure? While I am not a lawyer, this is my understanding of [the issue](https://www.riverbankcomputing.com/commercial/license-faq): &gt;Can my proprietary application be used with the copy of the GPL version of PyQt that the user already has installed (as part of their Linux distribution for example)? &gt; A.Yes, so long as you meet the following conditions: &gt; you are using the LGPL version of Qt &gt; your proprietary application has been developed with the commercial version of PyQt &gt;your commercial PyQt license covers the version of PyQt that the user has installed. So while you will not necessarily need a Qt license, you will likely need a PyQt license. 
Then you'll be fine moving directly into PyQt. Documentation is great and github is full of lots of small PyQt projects to look at. [ZetCode PyQt5 guide](http://zetcode.com/gui/pyqt5/) is what a lot of people point at to get started. 
appJar is a nice easy to use wrapper for tkinter, if you are looking for something simple.
&gt; prov Thanks for the link. It, however, doesn't look like the package with the backdoor inserted, it seems like the one that was the point of compromise as inside are credentials of the developer that attacker extracted. I don't see there the actual code that extracts the username/password as illustrated in the screenshot. So probably the malicious package is the higher version than 0.2.
This just uses PyQt, its not anything new. tkinter is great for small applications. PyQt is great for applications you need more advanced features in and/or prefer object oriented programming. 
&gt; which belong in a simple Google search anyone could complete in under 2 seconds. 
I don't know, why? is JSON more reliable?
Didn't plan to stick around for the sprints because I didn't think I'd be able to contribute effectively. Definitely want to do it next year, though. Is there a "How to have a good first sprint" Open Space somewhere? Would love to start getting involved in open source.
&gt; "based on QT" implies you've done some extensive core Qt toolkit modification You sure do read a lot between the lines. Electron is based on Chromium. Would you say it has done extensive modification of its rendering engine etc.? &gt; I would have pushed "Deploy" instead of "Create cross-platform desktop apps in minutes" It's an integrated solution that lets you do both. I position it as an alternative to Electron because it is. Finally, all the points you raise are addressed in the Section "Under the hood" on the page where it explicitly says that fbs "does not reinvent the wheel" and merely "integrates" PyQt et al. The same goes for other of your comments here, where you criticize something then "edit" your comment because you then went back and read the whole page.
Yeah I actually put in effort. 
Is it used in Python3 world? I remember using it in with python 2. It was nice to find it for my network\-bonded application, but with python3 it looks like you can do the same with asyncio?
SQLite is NOT a part of Python, no matter if it's bundled in some downloads. Do you seriously think that this is the proper place to discuss the internals of a termattr database entry¹? Because that's the logical consequence of allowing SQL 
Awesome, thanks for the additional info! I’ll keep looking into it. 
&gt; SQLite is NOT a part of Python Agreed. That's why I said that it _ships with_ most builds of CPython. &gt; no matter if it's bundled in some downloads It's not "bundled in some downloads". It's _a library_ that is _compiled into (most builds of) CPython_. &gt; Do you seriously think that this is the proper place to discuss the internals of a termattr database entry¹? Because that's the logical consequence of allowing SQL Clearly I don't: &gt; I agree that this post is of questionable relevance to /r/python.
You're getting a window and an installer. Show me another technology that lets you do this and can still fit in an inline example.
&gt;Would you say it has done extensive modification of its rendering engine etc.? It's quite a bit of modification to give it extensive platform integration API which has led to design differences when compared to something like Node-Webkit. So yes. 
"Having said that" is a weasel word. I'm not strawmanning your defense of the topicality. I respond to it.
Yeah and into writing coherent English. 
You caught a spelling mistake! You must be really proud of yourself! Good job buddy!
I don't like the design choice they want to push about the virtualenv being in .local/share/virtualenvs
Thanks! It's just Bootstrap with a few custom colors.
Never heard of pandas, i will look into this, thanks!
We could score blogposts on certain features to find poorly-written and SEO focused blogs. Not sure if it is possible to embed this kind of functionality in reddit, but I would be able to write some python package for this purpose.
Over at /r/learnpython the following tends to work well enough against spam: * Text only posts, more effort for spammers, easier to identify low effort posts as they won't even bother to write anything and will just post link in the thread text. * Automated removals * User reports + checking user history * In some cases just removing the threads, even if they're upvoted. Otherwise it just makes the spammers post even more spam in future. * Banning domains completely, from both comments and threads. * Users who aren't active within the community (outside of their own submissions) are not allowed to even post links to their (or others') articles/blog. Long time ago I manually reviewed every single thread that was posted, but it's simply not something that's doable all the time.
Requiring auth is somewhat a bit higher. Unless we actively downvotes the above said ones, it'll not gets right.
Require 2 self\-posts for every link posted? That way it combats the blog spam, while allowing some other content. I dunno if that's too much mod effort though.
Download Anaconda, open your py file in Spyder, add the aforementioned df to csv line (after reading up on what it is you’re actually asking Python to do). Just learned how to do this yesterday for scraping 30 years worth of NBA playoff data to a CSV for exploration in Google Sheets. Took me about five hours of reading to arrive at the point where I could debug all the issues, but it’s life changing code in terms of hours saved. 
imo What if a bot that marks a post as [SEO], [SPAM], [UNHELPFUL], [LEARNPYTHON] when someone comments the mark and received a significant amount of upvotes? A reason could be provided on the comment-reply. 
Learn about Pandas, easy and will save you lines of code.
This looks like a very interesting tool, I usually rely on PyCharm/IDEA's built-in type checking, and it's worked well for me. I'll have to set up VSCode and check this out.
Google is a pivotal skill all developers need. I use google dozens of times a day, often to look up something I've done before and just can't quite remember the process. Developers on this site are often so misguided it's baffling. Questions like "how do I make this program for something a computer is physically incapable of doing in &gt;100k lines of code" infuriate me. I'm all for self taught programmers, but self teaching should begin with how a damned computer works, not "deep learning python AI's." It leads to the epitome of dunning-kreuger, where "coders" are really just mix-and-match stack exchange hacks. 
I'd say it's more a matter of letting the community upvote what it wants. I personally would be happy to take a heavier hand on moderation, if the other mods agree, and we can come up with a policy we all agree on. 
damn! my math is so poor!!! now you know why i needed that calculator ;\) nice catch btw and thanks =\)
Thanks this is helpful!
/u/quasarj used: Ambush! /u/nevermyrealname is confused! 
I think krhags jjst
FWIW everything in PyOhio (in Columbus) is free to everyone.
It's *three* words. Check it out, I can nitpick too 😂!
Use the ZODB. You get transactions and ACID compliance. Your data will not get corrupted. PythonLinks.info/zodb
Can someone ELI5 how this is different from `mypy`?
No
They think being an ML developer means they can *use* tensorflow. Using tensorflow is entirely distinct from ML development; its like thinking your a chef when all you've done is turn the stove on. If you think you're an ML developer and you've never written a line of C, you're going to have a bad time. This is a much the fault of the ML ecosystem as the dunning-kreuger effect--most of the people working on ML have no idea how or why ML works. It's literally voodoo to all but the most inculcated developers. ML is *nothing more than a sequence of binary if statements to these people.* They cannot even grasp the basic premise of how it operates at the base layer--hell, some of *Google's* developers fall into this trap. CS is *mathematics,* and something a prof said in my first year of uni has really stuck with me: "if you cannot do it with a pen and paper, you cannot do it with a computer program." People really need to stop treating computer code like voodoo ingredients in a jumbled pot of code snippets and singletons. I actually had some kid ask me what a View Controller was last week, a kid who said he was a "full stack python developer" at the start of our talk. SMH, what the hell people? How can you be a full stack dev if you don't know what MVC architecture is? &lt;/rant&gt;
I don't like static typing in general, but I do like that Python allows its use to be a la carte.
It is used, still. I did use both gevent and asyncio, but somehow gravitate to gevent. What I strongly dislike about asyncio is that the whole codebase is littered with async's and await's, and it is not obvious at the first sight what is going on. With gevent, the code looks more "normal", you implement method and call it asynchronously.
Well I'm currently battling a pile of code with exactly this problem. 
If I was a spammer, the net result of this rule would be 2 shitty self posts and 1 blog spam post. I'm not sure if that's better than just 1 blog spam post. I would just blacklist highly reported blog domains. And they would need to contact mods to get taken off of that list. 
Out of curiosity, why don't you like static typing? What is the size of the codebase you work in/team you work with?
That makes sense. Thanks!
This is the internet, just right click it and google the term. We are not here to make sure you can understand us. This might come across as blunt, but that is not my intention. 
https://www.reddit.com/r/learnpython/wiki/faq#wiki_variable_is_one_of_two_choices.3F Also, /r/learnpython
&gt; I swear to god if I see another "look at the calculator I programmed" post where someone just used the eval function and a print statement I'm going to jump out the window. At least it's a change from the endless list of argument parsing libraries. 
Tell that to the programmer that has to debug and/or maintain a "good programmers" code that is thousands of lines long and has every variable labeled like that.
Gotcha, thanks for the response. I've personally found that it doesn't necessarily help with finding bugs, but significantly helps when reading other people's code which you're totally new to.
1) `if x == a or x == b` 2) please use /r/learnpython in future for this type of post
I'm fairly certain that it should be Life == x or Life == y
You have to write like &gt; if life == "tough" or life == "anything"
Yeah I think it helps with that too. But I'd prefer a comment that clarifies intent without enforcing checking. I think the best advantages of type checking come down to intellisense and performance optimization.
'tough' is always truthy, so it'll never get past that evaluation.
What you've actually built is a rudimentary object store database with low (or maybe no) guarantees. You're using a filesystem, so you're going to have potential (and infrequent) corruption issues with Pickles. Some alternatives to pickle/shelve in no particular order: * Zope is a database built in Python to store objects. It's old, but relatively reliable. * SQLlite (BerkleyDB) is something that Python ships as a default library, though it too suffers from filesystem corruption. For an embedded database, this is probably the generally preferred "first" solution for python. * JSON - this is a really well defined serialized format that you can easily dump and restore in Python, though you'll likely need to create a shim around JSON to translate your objects into data. However, if you're worried about corruption, why not add a verification step to validate that your output matches expectation? 
You could actually remove your "or" statements by changing your structure to: if Life.lower() == x: print(x)
Instead of your comment explaining what each number (choice) is, you could created variables to make it easier to read: rock = 1 if choice == rock: do something This has the benefit of adhering to DRY, which means if you would want to change what the user has to input, you only have to change one variable. Also consider remaining "q" to "choice" or similar. 
Bad code, sorry. At least use PEP8
&gt; We are not here to make sure you can understand us. Understanding is sort of the point of communication. I also did google it. It's just good practice to define your acronyms. In papers. In emails. In reddit posts. Why wouldn't you, unless it's such a well-known acronym as to be pervasive? Every industry has its own acronyms, so even though I've worked in telephony, security, cloud... that doesn't mean I know every possible programmer acronym in existence. /shrug, it's a minor inconvenience to ensure your readers clearly get your point.
Thanks to the kind people who helped. I honestly just opened up this subreddit for the first time and posted this. I apologize for not following simple directions. I tried pasting the code but it the format was all off and I didn't know how to fix that on here. Sorry, again. I will continue learning and hopefully, laugh at whatever mistake I did in the code posted. Cheers!
https://www.reddit.com/r/Python/comments/4lo5kw/is_there_going_to_be_live_streaming_from_pycon/
I spent my extra time this week polishing the tutorial for my package flask\-praetorian: [http://flask\-praetorian.readthedocs.io/en/latest/tutorial.html](http://flask-praetorian.readthedocs.io/en/latest/tutorial.html) In the course of that, I was using sphinx\-view to render the docs as I edited, and found a few bugs there that needed to be fixed: [https://github.com/dusktreader/sphinx\-view](https://github.com/dusktreader/sphinx-view) Besides that? Just knocking out issues with our commerical python/sqlalchemy/postgres API application at work
Is this satire? 
On the cons side, you lose the implicity of when your code goes async. Every library call may cause a race condition, every call becomes suspicious given that you want your function to be ‘atomic’. There’s a good post about that by [here](https://glyph.twistedmatrix.com/2014/02/unyielding.html) 
I'm curious as to the correctness of the parser. In mypy there was a hand rolled parser, but we ended up moving to a modified ast module because it is hard to be completely compatible. Also no Windows support :(
Block offending IP addresses, block tiny urls, require a captcha, etc. etc.
Analysing the data from a x-ray scanner, yes. Using magic to detect what is inside of a bag from a picture of the outside, no 
Pipenv is now the recommended tool by pipa
If you need a fallback, use `list.get(index, "fallback")`
I think that SEO is a common enough acronym in tech that people shouldn't need to define it whenever then introduce it to a discussion.
Pandas and Numpy are gonna be a must here.
I understand, and agree that you would define your acronyms in papers, maybe emails. But something as informal as a reddit post doesn't need it, since google is only a click away. Don't interpret this as me being mad in any way, just giving my 2 cents. 
You talk a lot about Python aspects, but what about your math skills? Have you been through basic statistics aspect?
Operator precedence This is parsed as `(Life == 'Tough') or 'tough'`, so if Life is not `'Tough'`, it'll default to `'tough'`, which evaluates as true. Because of this the first branch will always be true, and it'll always print tough.
mypy wont sell your code to Cambridge Analytica.
Comments go stale and rot. Code must be up to date. I’m a big proponent of self-documenting code for that reason. Type hints in python definitely help with that, IMO. 
Thanks for the detailed response. I agree with you. I have started a discussion with the other mods to address this. I will bring up some of your suggestions. Personally I'm not a fan of day-specific rules (like Showoff Saturday), and I have found that I enjoy some posts that others may consider just spam or solicitation, so I have been a bit hesitant to delete those if they seem to be generating a lot of discussion or upvotes. I agree that we should try to codify a rule so it is less of a judgment call, if possible.
This question might be better directed to /r/learnpython
This is a first work and very much as WIP so feel free to suggest any improvements and/or to contribute. As stated in the README, this is inspired by http://archagon.net/blog/2018/05/02/a-native-art-gallery-for-your-mac/ (spotted on [HackerNews](https://new.ycombinator.com) as I didn't have any wallpaper on my new computer. 
ERMAHGERD I'M SO UPSERT
VSCode cannot be used as a full featured Python IDE. Let's call it just an Editor.
Yes, it's really awesome :\) 
It is not an IDE, it is an editor. No matter how much those plugins power it up, in Python development, it is just an editor \- not a full/partial featured IDE.
Interesting.. I would prefer to see a post about Black itself.. this is news to me!
that is a too good joke. No reason to downvote this, please ^
Good suggestion. I would add Jupyter notebook. The primary reason I did not add it to the list is it is a web based editor instead of being an standalone one. Whatever, I will add that too. The weird guy is here. It exists because: 1. Easy to use and find \(on most platform it is pre\-installed with Python\) 2. Tkinter is the default GUI library of Python and IDLE is made with it. 3. You get a very convenient and powerful shell for free. 4. It is always close to your hand. There are other causes too, but I hope those are enough. Please ask me if you have more questions.
Well said, and one of the reasons why I've put off learning javascript for so long 
&gt; I believe your Python code could also be accelerated with numba and I bet the performance would be very close to Nim with minimal effort. I'll copy-paste my comment from the /r/programming thread: &amp;nbsp; &gt; I wonder how numba would perform Like pypy, numba was also on my radar, but I couldn't make it work by just slapping `@jit` decorator to the original code, and I didn't want to go into figuring out what's wrong nor making modifications to the original code. &gt; I suspect it should be on par with Nim. Somebody else has run [a comparison including Numba](https://github.com/henryiii/framework_compare/tree/master/lin_regression), where Numba is 1.5x faster than NumPy. This means, if we can compare tests on the different machines, that Nim should be about 2x faster than Numba.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [henryiii/framework_compare/.../**lin_regression** (master → bf533d3)](https://github.com/henryiii/framework_compare/tree/bf533d3ff1e8d9c0a0caa6e5c8c52d2f17fe511e/lin_regression) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dytx8lr.)
Also, you get way better IDE auto-completion, which then improves many factors (productivity, getting-it-right-the-first-time, etc.)
 N.n ... N. 
 Life = input('Life can be ') if Life.lower() == 'tough': print(Life) elif Life.lower() == 'difficult': print(Life) elif Life.lower() == 'easy': print(Life) else: print('Please use a different adjective')
The Internet is an integral tool in my studies. Being able to research and see topics from different perspectives is immensely useful in my opinion. It’s only those who lack self discipline that need to fully disconnect to be productive in their studies. &lt;my $0.02&gt;
Happy to answer further questions here as well :) 
Response from Bot!
ETE Toolkit supports trees formatted in the Newick format. (which is also a simple and easy format to store trees.) What do you mean by 'how do you go about it'? If I need a tree, I get a function that builds it's Newick representation, then pass that to ETE toolkit for visualization. If you can find a 'anytree to newick' function, you should be able to make the tree into something ETE can handle without much of a problem. That said after a quick (albeit non exhaustive) search I didn't find a program already made. Chances are you'll probably just have to write it yourself using [tree iterators](https://anytree.readthedocs.io/en/latest/api/anytree.iterators.html) in anytree. Why are you trying to build trees in the first place? A large part why you would choose ETE toolkit over a custom class structure depends on your use case. Because biologists and bioinformaticians need to share the phylogenetic trees, the Newick format is very helpful. But if you're trying to build something like a suffix tree, a custom class structure makes more sense. 
/u/phooji As recommended by the README, I tried to install it using `pip install pyre-check` with the latest version of pip but I'm getting Could not find a version that satisfies the requirement pyre-check (from versions: ) No matching distribution found for pyre-check I've tried this on two different machines.
This is actually true. To try it out, I walked past the security at the convention center with my badge in my pocket. Twice, they were on their phones and didn't look up. There are also a million ways onto the floor at this place.
what's a self-post? You mean comment?
Not this year. In the past we worked with some community organizations to run the livestream but they haven't been able to get to PyCon lately due to other commitments. But we do generally have the videos up about a day later, so you can already see some of them on our YouTube channel https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ
In /r/javascript, we've seen this pattern playing out more &amp; more, with insanely-low effort (and quality) content. My theory is that either yeah, someone is paying lowest-bidder for articles, or that some 'school' requires it with the obvious payout being they're posted on the prof's blog. Either way, it's a lot of crap.
Here's a sneak peek of /r/javascript using the [top posts](https://np.reddit.com/r/javascript/top/?sort=top&amp;t=year) of the year! \#1: [Pass by reference !== pass by value](https://media.giphy.com/media/xUPGcLrX5NQgooYcG4/giphy.gif) | [303 comments](https://np.reddit.com/r/javascript/comments/6hz7o6/pass_by_reference_pass_by_value/) \#2: [PSA: There are over 1000 people in the U.S. named "Infinity" and the jQuery .data() method attempts to convert to number when reading off the DOM](https://np.reddit.com/r/javascript/comments/8f57i1/psa_there_are_over_1000_people_in_the_us_named/) \#3: [I’m harvesting credit card numbers and passwords from your site. Here’s how.](https://medium.com/@david.gilbertson/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) | [80 comments](https://np.reddit.com/r/javascript/comments/7oke31/im_harvesting_credit_card_numbers_and_passwords/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Can you read the sidebar? Start there.
Make way! Make way! Get rid of this irrelevant SQLite content so that we can have space on this sub for more kids asking for help on their homework.
Text post, no link.
It is because the library evolved and the documentation sucks, it describes legacy ways how to do things. Modern asyncio can be used the same way as gevent. The only difference is the explicit await keyword before the awaiting calls.
I had 2 talks which were less exciting in the morning, however in the afternoon definitely better quality. I think this varies heavily what your interest are and what you end up attending.
I had the opposite experience. The morning was much better. I was thinking that, that I just got unlucky. The three afternoon talks that I'm thinking about were all voted on poorly in the app, so I don't think it was just me.
Gevent is inspired by Erlang, where you don't have to worry that much about context switch, There is not any shared state. Explicit await suits better languages like Python.
How do you choose, out of curiosity? Topics? Speakers you know and want to hear?
You need to be using python3/pip3
A leap of faith based on my interest. I'm full stack software engineer, so went for randomness, trio and love your bugs. So general subjects.
Definitely open to anyone, though also anyone can join the PSF so whynotbothdotgif? :)
Our company has a legacy line of business system that has some weird bug that produces some minor inconsistencies that turn into big problems if they're not noticed... I built some python tests to identify those inconsistencies and to shoot off of webhook that makes a ticket in our helpdesk system... All this because the replacement for the Legacy system is in testing right now and they do not want to put resources into the old system if they don't have to.
Don't really use Jupyter and Anaconda much, but may be this is relevant: `Please install nodejs 5+ and npm before continuing installation. nodejs may be installed using conda or directly from the nodejs website.`
First class MERGE statement would be a lot nicer...
I wish I could down vote this more.
I myself disconnect to read programming books (on paper), that's how I learn most.
1. Sounds like you actually want someone to write it for you - try r/PythonJobs where I'm sure someone will be happy to do it for you (for a fair price) 2. If you actually want to *learn* how to do it, try r/learnpython where we can help you work it out for yourself
That's not the a* code from the site. That's a slow, blind search. The actual a* code is further down the page. Also, r/learnpython is where you should probably ask questions like this.
Writing first python program of my life to do some cache warming for an internal enterprise web application. Learnt all the basic stuff, database interactions, multi threadinG, security and authentications. 
Print response.content as well as the status code, there may be more to the error.
Is it possible to pass NumPy arrays to a Nim function?
Check your rate limit. Otherwise they're probably broken. This is more suited to /r/learnpython or OWAPI's support, whatever that is.
Code is fine. Its actually utilizing code that can cause issues. Upload it. It is not your responsibility what people do with it
Just watched the demo video on https://pyre-check.org. What's this "Watchman" and "Server running" when one runs Pyre? Given that it's a Facebook project, I think that needs some explanation before I install sth like this...
[Watchman is an open source filesystem watcher.](https://facebook.github.io/watchman/) Nothing conspiratorial about it lol.
Hey, my first calculator was *graphical.* Lol. I used a library the Prof provided called SimpleGraphics and just dumped all the output into a vector. I got an A+. I keep the code on my GitHub because of how embarrassing it is to look at now. It's funny to look at shit you wrote when you thought the only way to code was procedural. I know not all good coders are university educated, but I would have never even know what questions to ask, let alone where to look, without a solid academic initiation into the world of CS.
But that involves him having to spend money or effort, neither of which he is interested in lol
Ok will do. Thanks for the advice :)
Alright, sorry about that and thanks.
Trying to write k\-means algorithm just using Numpy package. Feels it helps me to really know how it works. Also using other distances besides Euclidean.
Try to analyze Jay Chou songs to find something. 
thanks for the tip, didn't realise you can create a pipenv without a command as for version of pipenv, it was latest I managed to get some help from one of the pipenv devs (uranusjr) and eventually figured out it was a shell script in my .bashrc causing issues everything worked perfectly once it was disabled
Flask's creator had written a blogpost about asyncio: [I don't understand asyncio](http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/). I have a feeling majority of Python developers feel the same way. I still use gevent until I get asyncio.
I've yet to see a "machine learning or NLP for beginners" talk that could deliver on its promise. There's also the issue of what I feel is an inadvertent bait and switch: the actual talk might not be faithful to the description on the agenda. Neither of these issues are specific PyCon. I have a CS background and very interested in ML/NLP for practical applications, but PyCon hasn't yet scratched this itch.
Yes. Curious! I’m not the author, but there’s something wonky with how their code is displayed. 
I just wanted to say, Nathaniel Smith's talk on trio this afternoon was excellent, on all counts. He was clear, concise, informative. He structured the talk perfectly, giving motivation, theory, and practice. He did a live, non-trivial, working coding example of trio at the end. It was astounding good.
read the sidebar.
I've been told that it's worthwhile to go to talks by known-good presenters, even if you're not particularly interested in the topic they're presenting. On the balance, you won't be dozing off or fiddling on your device the whole time.
I have a compulsion to post the `plumbum` equivalent when I see these. The compulsion continues: #!/usr/bin/env python3 from plumbum.cli import Application, SwitchAttr, Flag class App(Application): count = SwitchAttr(['count'], int, 1, help="Number of greetings.") flag = Flag(['flag']) def main(self, name): for i in range(self.count): print(f"Hello, {name}!") if self.flag: print("Our flag will sail high and above!") else: print("Well, that didn't go as planned!") if __name__ == '__main__': App.run() 
I've noticed that the fun, a-hack-a-day-keeps-boredom-at-bay culture that first attracted me to Python is gradually being replaced with business drones in suits, talking about security and database reliability. We're almost like a Java con now.
I think you got unlucky. I went to a pretty poor talk this morning, but several of the talks this afternoon were excellent. Plus, we have some heavy hitters like Raymond Hettinger to look forward to tomorrow!
Show your code
thanks, wonder what's going on under the hood in sympy
Agreed. The aim of my post was not to show how slow Python can be (we all know that), but to compare NumPy and Nim speeds.
You're referring to the WAT talk on JavaScript (with a few other languages included, I'm thinking :) 
I've tried to run your code and it is slower than both NumPy and Nim. (runs in about 1 second) Then I've tried [this numba version](https://github.com/henryiii/framework_compare/blob/master/lin_regression/purenumba.py) and it runs in 0.43 seconds, making it 1.65x faster than NumPy (0.71 sec), but Nim is still almost 2x quicker than that (0.226 seconds).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [henryiii/framework_compare/.../**purenumba.py** (master → bf533d3)](https://github.com/henryiii/framework_compare/blob/bf533d3ff1e8d9c0a0caa6e5c8c52d2f17fe511e/lin_regression/purenumba.py) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyul66g.)
&gt;&gt;&gt; input("\n\npress enter key to exit.") press enter key to exit. '' &gt;&gt;&gt; 
https://gyazo.com/f26cd1126e30f04cc184406d9a363093
Hi, I'm a bot that links Gyazo images directly to save bandwidth. Direct link: https://i.gyazo.com/f26cd1126e30f04cc184406d9a363093.png Imgur mirror: https://i.imgur.com/BHMga0M.png ^^[Sourcev2](https://github.com/Ptomerty/GyazoBot) ^^| ^^[Why?](https://github.com/Ptomerty/GyazoBot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/u/derpherp128) ^^| ^^[leavemealone](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=ignoreme&amp;message=ignoreme)
Well you can be a new user iykwim ;)
&gt; numpy will be on par with the fastest C code (as numpy is really just wrappers around C code) I'm would say that's the case even here, and what is slowing numpy version is the outer loop. The thing is - often (not only in this example) you cannot avoid (and/or rewrite it in numpy) that outer loop.
The code to make it exit is , exit() You could do this by adding in some rules to make happen or make it quite simple where the user knows no difference. You could put... input(“Press enter to exit program: ) exit() This would make the program close no matter what the user presses but he will probably press enter. Since you are at chapter one I would assume you aren’t working with if statements yet which could make sure they actually pressed a certain key to exit. 
Peewee ORM has support for this (as well as the replace syntax) if you want to try it out: http://docs.peewee-orm.com/en/latest/peewee/api.html#OnConflict
I dig it. I've got just the project in mind to play around with this.
Oh yeah. I'm just saying the ratio of numpy to C performance is going to really vary with how the problem is structured and the size of the data involved in the computations. So you can't apply the numpy to C or numpy to numba ratio from one benchmark to estimate the same for another unless they are set up identically. 
Yes. But, the book wanted you to do it a different way so if it’s for an assignment I wouldn’t recommend that. The book was inferring if the input statement was the last list you don’t need the exit(), it’s just there for formality. `input(“\n\nPress the enter key to exit.”)` Is probably what you want. What did you put for your code? 
https://gyazo.com/4eb042903daa1909de95629a0f873b24 I keep getting this... 
Interesting that my example didn't work on yours. I'm using numba version 0.37.0 if you'd like to compare. I tried the linked numba example and it ran slower for me. I'm getting: - numpy: 550 ms - numba (mine): 240 ms - numba (from your link): 330 ms If things scale similarly, though, I'd expect the Nim version to perform somewhere in the 150ms mark on my machine, though. Definitely impressive! Though for my uses, it's not fast enough, over numba, for my to want to leave behind everything else that comes with Python. 
Wow. Impressive levels of idiocy here. 
According to wikipedia, an integrated development environment contains of a - * Source code editor * Build automation tools * Debugger VSCode has all these, so therefore it is an IDE. https://en.wikipedia.org/wiki/Integrated_development_environment
**Integrated development environment** An integrated development environment (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools, and a debugger. Most modern IDEs have intelligent code completion. Some IDEs, such as NetBeans and Eclipse, contain a compiler, interpreter, or both; others, such as SharpDevelop and Lazarus, do not. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
good bot
Thank you, Glaaki, for voting on WikiTextBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
OP, you're using the wrong quote marks. Look very closely at your screenshot: the quotes you're using are “these”, where Python expects "these".
Could it be the type of quote character you are using? The quotes in the screen shot look like pretty-print quotes (“”) instead of plain quotes (`" "`). The error message is consistent with this. Your screenshot shows something like: &gt; `input(“\n\nwhatever\n\n”)` It should be like: &gt; `input("\n\nwhatever\n\n")` 
I'm viewing some of the early videos and I'm disappointed with the quality of the video. The modern approach seems to have one feed from the overhead combined with a "dynamic" view of the presenter and have these statically combined so they don't overlap. I'm sure this is easy and quick to produce, but the overhead view ends up occupying 50% of the screen and is often too small on mobile. If there was an effort to post-edit into a better format I would wait for that, but there never is, and we're stuck with the cheap-and-cheerful original. I try to watch them, but I find the unnecessarily small overhead view and all that unused, static screen space annoying. Is this just me, or do others feel the same?
[removed]
It seems that you are not using proper single or double quotes
It is possible vua Nim-Pymod but be aware that the library wasn't updated for 1.5 years: https://github.com/jboy/nim-pymod#pyarrayobject-type. Also I'm writing my own Numpy + Deep Learning framework in pure Nim and I added loading and saving from .npy file the week before: https://github.com/mratsim/Arraymancer/blob/master/src/io/io_npy.nim#L66
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mratsim/Arraymancer/.../**io_npy.nim#L66** (master → d62c727)](https://github.com/mratsim/Arraymancer/blob/d62c727b85ab5b01977a99ce7834afac6d449b2a/src/io/io_npy.nim#L66) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyuqm6f.)
What is missing to be a full featured Python IDE?
In my experience Numba is pretty picky and I sometimes had slower Numba than Numpy (maybe due to multithreading false sharing/cache invalidation on reduction kernels). I'd rather use Keras GPU backend or PyTorch if I want to make a custom function the fastest possible. (Have to learn Cython too)
I tried Cython - spent about an hour slowly adding annotations and other decorations that were supposed to speed it up. And it worked, but then I just used @jit with numba on code that was written very simply/plainly and it was 2x faster than Cython. So I don't bother with Cython anymore - I hear its useful for other things, but for just doing a fast numerical algorithm, Numba was way easier. For Keras or PyTorch - those both use the GPU, right? Or can you get PyTorch speedup without GPU? Usually I'm going to Numba for code that doesn't vectorize really well (lately have been running lots of things on sparse matrices) and so I don't think the GPU stuff would help. I'd say, if the algorithm is mostly matrix multiplies, then I wouldn't expect numba to help much over just using numpy anyways. 
Did you try python-vlc
&gt;nstall too much stuff and just use „python \-m venv \&lt;venv name\&gt;“. &gt; &gt;Here might be an interesting article for you: I didn' t know about venv. Thanks ! I couldn' t isntall it on my Debian machine because the package is available only for Python 3.5.x and I already had Python 3.6 But I' ll keep an eye on it for sure !
Because `shelve` is based on `pickle`, you can implement a more reliable reduce method to your objects : it's th method that is called by pickle in order to know how to convert the object into binary data, and then convert them back.
asyncio soured a lot of people by being pretty badly designed and hard to understand. Maybe check out [Trio](https://trio.readthedocs.io/) instead.
Upload it for sure. There's nothing stopping you sharing. Just slap something like [this](https://github.com/impshum/TheHackyAsFuckSoftwareLicense) on it.
There was a business that scraped Linkedin for their core value proposition that was sued. The courts ruled that scraping was not against the law. [https://arstechnica.com/tech\-policy/2017/08/court\-rejects\-linkedin\-claim\-that\-unauthorized\-scraping\-is\-hacking/](https://arstechnica.com/tech-policy/2017/08/court-rejects-linkedin-claim-that-unauthorized-scraping-is-hacking/)
[removed]
Was it object-oriented? I can't imagine working with 10's or more classes without IDE being able to help you.
I just tried using the template but i get an import error: import bottr ModuleNotFoundError: No module named 'bottr' What to do? I did pip install correctly and have checked several times so i know it's installed but for some reason python can't find it.
I just tried using the template but i get an import error: import bottr ModuleNotFoundError: No module named 'bottr' What to do? I did pip install correctly and have checked several times so i know it's installed but for some reason python can't find it. What was the point of the $? it just gave me an error so i went without it.
I had the exact same experience experience as you with Numba vs Numpy while trying to implement running mean/variance so I didn't have to resize images to hold them all in memory, with Numba being slower here: https://github.com/mratsim/Amazon-Forest-Computer-Vision/blob/master/compute-mean-std.py in the end, both were too slow (110k images to process) and I just resized the images. Regarding Pytorch vs Numpy, one of my main issue with Numpy is that the codebase is a mess and doing a lot of thing in pure Python, Torch was originally a C/Lua library and Pytorch is a much thinner wrapper around C (now C++ with the move to Aten) than Numpy is around C/C++/Fortran. Currently I'm writing my own Numpy/Deep Learning in Nim and I'm making damn sure that it's the fastest possible down to assembly level checks. Also make sure to use MKL with Numpy, for example this bench is 3x faster with MKL than in pure Numpy (with Apple Accelerate as BLAS library): https://github.com/mratsim/Arraymancer/blob/master/benchmarks/euler_numpy.py
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mratsim/Amazon-Forest-Computer-Vision/.../**compute-mean-std.py** (master → 46abf83)](https://github.com/mratsim/Amazon-Forest-Computer-Vision/blob/46abf834128f41f4e6d8040f474ec51973ea9332/compute-mean-std.py) * [mratsim/Arraymancer/.../**euler_numpy.py** (master → d62c727)](https://github.com/mratsim/Arraymancer/blob/d62c727b85ab5b01977a99ce7834afac6d449b2a/benchmarks/euler_numpy.py) ---- 
You could do a web ui backended by python. It's a relatively common choice. Kivy is pretty easy and will do crossplatform including mobile. Pyside/pyqt5 are pretty commonly used for desktop applications.
it is a joke dude
Yeah self documenting code ftw. If you have to comment your code it’s just not good enough unfortunately 
I'll just pm you the thing
That device is 1 PCM, 2 channels. You'll need an audio platform/API that let's you mix/play/pan samples into one audio stream. Good luck.
A full blown gui framework is really complex and if you can support the intern with youre css/html knowledge is maybe faster. Otherwise kivy is probably is a good tool and quite simple to understand
My eyes.. they burn!!
I'm guessing you're new to programming in general. You should delete this post and spend some time learning how to debug. Debugging is part of the process. It's a little painful and frustrating to run into issues that you can't explain but learn to swallow the frustration and treat it like a challenge. Beginners usually debug by inserting print statements to track what their program is doing. I would encourage you to read about the 'pdb' module and learn to use it.
Thanks, I’ll definitley try kivy 
It's all open source ~~^^~~
How to integrate this with Vim or Neovim?
Just wondering, don't have the time to dig into another project at the moment
On my S8 its watchable, but I wouldn't watch on a smaller screen. There is definitely too much wasted space. 
I'll check this out, thanks
It's easy to criticize people, but a lot harder to actually put the work and get a talk accepted yourself. Show us what a good talk looks like at next year's PyCon. Looking forward to seeing what you deliver. (also if you are going to PyCon for the talks, you aren't doing it right)
Please use four spaces before every line of code. Eg. import requests
Yeah, I've been feeling the same thing. Tough to say if it's you or the conference, y'know? I'm chalking the first day up to bad luck. Hoping today is better!
try winsound but remember it only works on windows
`if answer==equal:` This could be the problem. If `answer` or `equal` are floating point results of arithmetical operations, they might be sligthly different from what you expect. Floats have limited precision, and thus many arithmetic operations will have to be rounded to the nearest valid floating point number. That means that some numbers that you might think are identical, actually differ by a very small fraction. &gt;&gt;&gt; 0.3 == 0.1 * 3 False Python 3.5 introduced the convenience function [math.isclose](https://docs.python.org/3/library/math.html#math.isclose) that you can use to compare floating point numbers, instead of using the strict `==` operator. &gt;&gt;&gt; from math import isclose &gt;&gt;&gt; isclose(0.3, 0.1*3) True
 quotient, remainder = divmod(number, another)
program.py import wx app = wx.App() frame = wx.Frame(None, title='Hello World') frame.Show() app.MainLoop() And for packaging: pip install pyinstaller pyinstaller -Fw program.py And presto, you have a distributable Hello World app. Ready to take the world by storm!
There is a frustrating facts that most of your thought has been thought by others. So I don't like to focus through disconnected way.
Nice trick! I've implemented such a function a few times already, good to have it built in
&gt; Kivy and Pygame come with sound libs, but I feel that dragging a huge project for only one of its functions would be a large overkill Kivy uses other libraries for sound, the same way you want to. I think the main options are sdl2_audio (which probably only makes sense if you're using sdl2 anyway) or gstreamer (which has generally been the default on desktop).
I don't know about this year; talks at all conferences are hit or miss. (Though I have been to a (non-PyCon) conference where ALL the talks were misses.) I usually only go to a few talks anyway, and spend most of my time at the open spaces or just meeting up with people. Remember, the main point of PyCon isn't to see the talks (they'll be uploaded to YouTube later anyway), but to *meet people*. You'll never be around 3,000 other Pythonistas at the same time until next year.
import fire https://github.com/google/python-fire 
Ouch, I missed that.
 I think there should be a clear visual way to show the relationship of high level language\(Python\) and low level language\(C/C\+\+\). 
To be fair, tech in Cleveland isn't great (from 10 years experience there). Might've attracted more talent in a better location.
Hey there. This might not be exactly what you’re looking for because it’s not a UI framework per se. However, it would allow her to write python that would be useable in a web framework without her having to know HTML and CSS. https://beer-garden.io Full disclosure I’m the author/one of the maintainers of this open source project. If you’re comfortable installing the software for her, I believe she could use python and Beer Garden to write some useful tools for you. Let me know what you think!
It also only works with wav files.
How are these messages being sent? Directly to the bot or group messages?
Sure! IDEs are greatly assisted by types but they aren't required. I mentioned earlier that the only two benefits I see to types include IDE support and performance optimization. I just don't think those benefits outweigh the huge human cost required to maintain huge codebases made rigid and baroque by type systems. Look, the value of types is largely subjective. There is plenty of evidence to support both static and dynamic camps. I know that there is a popular trend for types right now, but it's my belief that the pendulum is going to swing back the other way one day soon. And as I said in my original comment, I'm not against types when they are a la carte, and can be applied intelligently to only the circumstances where they actually have a significant impact. What I'm opposed to is blanket application of a rigid (and often arbitrary) system to every inch of the codebase. Especially in a language that was designed to be flexible and dynamic. Types, to me, are a distraction and an illusion of control that guarantee no safety while adding significant costs to refactoring maintaining, extension and development for codebases large and small. 
The principles apply to any language. There are just a few examples in the screen casts that are done in Java. However, Java, C#, Python, Ruby, Closure and many more are discussed. Good software engineering fundamentals are language agnostic for the most part. 
Well, today we have Larry Hastings, Kenneth Reitz, Raymond Hettinger, and Hynek Schlawack. That will surely make up for yesterday.
This is my first Pycon, but the talks I attended yesterday were actually pretty decent compared to other conferences I've attended. However, I think today's agenda has more interesting topics \(both in the talks and open spaces\). 
Oh shut I forgot xd
Your quick start is explicitly against bottiquette \-\- can you please revise your example to address this?
Good. Dividend and divisor are better variable names.
I kinda have it on this [picture](https://raw.githubusercontent.com/Pulecz/presentations/master/img/pyramid.png). But perhaps it would be interesting to see a C/C++ function and how it can be loaded in Python and inject some part in it.
Because I usually write large Python applications that span anywhere from 5 to 100 files in a large enterprise setting. 
Yep, effectively having multiple return values via automatic tuple unpacking is something I've not seen in any other language. It's great, and such a simple concept. 
Because not all Python programming is for data science, analytics, etc. In some cases you need to create large codebases and ipython/notebooks aren't generally the best tool for that.
Are the Python and Python/numpy timings for the entire program or just the time to run the function? 
It is just the time to run the function in all three versions.
This is a potentially unrelated question but... Using a robot framework plugin I seem to be having issues calling environment variables in PyCharm. PyCharm is completely aware of parent environment variables as it tells me and it can print me the value of that environment variable in the python console but it says the variable is undefined when I call it. I call it as follows: %{Variable}/Path The variable is just a path and I can’t seem to find the answer to this issue. I’ve tried simply defining it in PyCharm but even then it doesn’t work. 
I know those words mean the same but, if those variables were on a different page or file, I definitely would have to open Google 'to make sure' what is what. 
Or many more, if you count the files in the libraries you're importing.
This type of syntax is common in functional programming languages. 
It will be my group. But is there any such thing which could help me as I have did all of my other things 
Thank you for your replies! I honestly didn't mean this question to be aggressive I was just really interested in the differences to the tools that I tend to use are! It wasn't a comment on which is better / worse just an interest in what I could expect were I to use it
Personally I like PyCharm (coming from someone who was solely dedicated to Vim for large projects) for building applications, which for me are usually ETL pipelines. If I'm doing some kind of analysis I may use a Jupyter notebook, but to me the use cases feel like the same thing I could use a visual debugger for. 
JS/EMCAScript added it recently as well.
i think the robot framework isnt updated for current pycharm versions, not sure though, i was in a twitch chat where someone mentioned they were forced to use a older pycharm version to be able to use that plugin
I’m using the 17x builds as that’s the last time they supported clear case. Should I keep trying older versions for it to work? 
Which Twitch chat is talking about PyCharm? I presume this was in between spamming Kappa?
Excellent. I figured as much, but it's always good to kick the tires with numbers like these. Thanks for sharing your work. 
Can you send me what code you are typing into the file. You are showing the output once you run the file. Whatever window has the file name at the top. 
I don't think this is actually a good way of doing it because it's slower. It has to pack, then unpack the values. I believe writing this in two lines is faster
I'd recommend PyAudio, a wrapper for PortAudio. PortAudio is high-quality, well-tested code in wide use (disclaimer: I've known one of the maintainers for years).
Sort of, but you don't really have assignment in the same way in functional languages. Also python not needing the parentheses to make/unpack the tuple is a big part of it feeling nice to me. I found this page though which made me realise both Go and Lua share the same syntax. http://rosettacode.org/wiki/Return_multiple_values
yeah no shit "number" and "another" but calm your tits jose no one would name them that - they'd name them whatever the fuck the quantities they are - like "students" and "teachers" or "trucks" and "drivers" or some shit
What
Anaconda’s Spyder&gt;&gt;&gt; PyCharm
Ahhhh I see what you’re doing. Go up to, file -&gt; new file and type your code in the file that comes up. Hit f5 after you typed it up (or go to run -&gt; run module). It will ask you to save the file and then your program will run how you wanted it to. The Shell you’re typing into only checks code and you can’t actually write out a full program and save it or anything. 
The book Python Crash Course has a great section with three chapters on pygame. 
I would prefer something online but thanks
Go to definition is a big reason. I use vscode + jupyter notebooks and it works well for data science needs. 
Better yet, why not just register an `atexit` callback for restarting the process if it exit!
if you really need to works, going to older is probably a good thing to try.
someone brought it up in a programming stream
Sounds like a severe case of premature optimization.
I am going through this book right now. It’s been great so far, on chapter 7.
`from __future__ import print_function`
Another great book by the great man
Is this available to purchase yet?
I just realized after all this time that in my save game module "playerFile.close()" was missing the () at the end. Now I'm surprised it was working as well as it was... When you say "since a change in your code can make the pickle format used on saving incompatible" does that mean any change in your code? Or only code involving the usage of shelve? Thanks for the help everyone.
Unfortunately I don't know. Sorry. 
Isn't he the giy who made programming games with python? His name sounds familiar.
How do you do type checking with pycharm?
I just picked Automating the Boring Stuff With Python. Looks like it is a good book to learn! 
Literally the best...15 free videos on YouTube for that book. The remaining 15 are behind a $10 pay wall. I was happy to pay it.
Wow I didn’t know that! Good to know. Thanks 
It's a neat looking project, but you should look up the difference between scrape and scrap. I sent more details in a private message.
Nothing pisses me off more than a "Big concept for beginners" talk that is actually just some guy jacking off for half an hour about a shit library he coded up to solve a really niche fucking problem. And yes, those pronouns are intentional, it's always a guy. 
You don't get to tell people how to 'do' a conference right. That's some A\-grade bro\-douchery right there.
Working my way through it now! Great book so far!
To add to this, all the material and exercises are on the website for the book as well. Al really helped my interest in Python grow so much.
You may find Python's [`select`](https://docs.python.org/3.6/library/select.html) and [`selectors`](https://docs.python.org/3.6/library/selectors.html#module-selectors) modules useful.
I installed it from pythons website, i forget how I installed pip, and I installed them using pip3. And I was using python 3.6.5 environment inside of VS Code.
Yup, Al got me started with Python with that book, I am forever indebted.
Install a module with `pip3 install -I &lt;package&gt;` then write a test script and run it **from the terminal** with `python3 &lt;program&gt;` and tell me what that says if it doesn't work. Just do one module to simplify things as a test.
Love the sign!
The evening before the sprints start there's an introduction type thing explaining how to contribute for newcomers. 
The best part is when you mention that the answer is literally one Google search away, but then they say that you should be thankful they're providing "content" (in the form of easily Google-able questions) to the sub. I gave up a long time ago. 
Is this incorrect then? http://docs.python-guide.org/en/latest/starting/install3/osx/ I followed those instructions and $python -V still results in 2.7.3 ( in /usr/bin ) while python3 -V shows 3.6.5. Also /usr/local/bin does appear before /usr/bin in my $PATH.
It's hard to detect all imports without executing the code, there are so many ways of how you can import some code in a dynamic language. For example, an attacker can eval base64 decoded string or unpicke simple byte string, both cases can be used for import.
super is nice too
It's one of the most fun books that I've read, especially the last few chapters where he explains how you can write a python bot that plays video games. I've already made a couple of those myself, so I can "Automate the boring stuff" in some online games, but ^don't ^^tell ^^^anyone I highly recommend the book. 
Could you guys use the YouTube playlist function and give the videos some organization. Even if it was as simple as the day the speaker talked it would reduce the feeling of facing a firehose of info.
Yes i only get the “no module named pandas” in vs code. Does anyone know anything about that?
Yep!
/u/IAmYourDad_ posted the link in another comment [here](http://www.reddit.com/r/Python/comments/8ixbcm/-/dyvfq1h)
Dunno I'm a Linux user. I just know with both Python 2 and Python 3 installed *usually* `python` is linked to Python 2. If you wanna use Python 3 just alias it in .bashrc/.zshrc/whatever she'll you use.
That didn’t work, even though I selected my environment to be python 3.6.5, and I set the pythonPath in settings to my python 3 it is still saying python2.7 when I print sys.version
I fixed it, just downloaded anaconda. Uninstalled my vs code and then downloaded it through there and then it just uses the anaconda version so yeah haha Thank You for the hell though!
Oh you have to do `source .bashrc` or logout for the changes to take effect.
Day Two made the difference for me. Hope you found it to be the same! And I will always be thankful for the people that put on the talks. I submitted for the first time ever this year and that part alone is A LOT of work. Very thankful for those that donate their time to help further the community.
There's 45 other videos on the Udemy site, after the first 15. The first 15 are on YouTube: https://www.youtube.com/watch?v=1F_OgqRuSdI&amp;list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW The Udemy course is normally $50, but you can get it for $10 by using the link on the book's site: https://automatetheboringstuff.com/
Yeah! The Automate book covers the PyAutoGUI module, which you can use to control the keyboard and mouse from a Python script. I used it to write a bot that plays a Flash game, "Sushi Go Round": https://www.youtube.com/watch?v=lfk_T6VKhTE The code is here: https://github.com/asweigart/sushigoroundbot
The cheatsheet was a peculiarly suspicious one as well. Almost every comment was calling it out for errors, yet it got upwards of 200 upvotes.
It uses operator overloading to build an expression tree.
It's quite bad of them to recommend people install a package over insecure http. I'd recommend waiting until it's properly released and you can install it from PyPI (which pip can do with https).
Both Al and No Starch are really awesome.
Thanks!
Depends on the context. x**2 is used in math texts. x*x is one character shorter.
pretty sure it doesn't matter at all.
He also wrote No Starch Press's *Automate The Boring Stuff with Python*, which is basically the definitive intro guide to Python for the non-programmer. And he's on reddit, so he sometimes pop in to /r/Python (and related subs) to help people out.
I think he also did the automate the Borin stuff 
The problem you're having is that you are probably violating their robots.txt rules. Because it essentially looks like you're DDOSing them if you send in a ton of queries from same computer in short amount of time. A hacky way is to add a variable amount of delay time between queries.
One invokes x.__mul__(x) and the other invokes x.__pow__(2) so they could be completely different.
Think pow is fastest. Other than that I would prefer whatever reads better in your flow
What's the difference between this one and the old Hacking Secret Ciphers with Python one? A updated version? Or should i read both? Thanks
If you care about performance, x**2 is about 50% slower than x * x in tests I just ran.
oh nevermind, it's 2nd edition of it :)
I just realized its using type information from docstrings in my my case. Heres a screenshot of what it looks like in action, and the setting under Editor &gt; Inspections &gt; Python https://imgur.com/a/WAxUzK2 &gt; This inspection detects type errors in function call expressions. Due to dynamic dispatch and duck typing, this is possible in a limited but useful number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations
Yea right now I have a random pause of a float between 3-6 seconds between every action. So it loads google, pause, type query, pause, load page, pause, get results, pause, repeat. Still get insta-captcha :(
I recommend installing pyenv first, then running `pyenv install 3.6.5`. It lets you have multiple versions installed without them stomping all over each other, and it doesn’t mess with the system Python at all. 
timing benchmarks for x**n only start to be noticeable when n is like above 4 or 5.
Ah, thank you! It seems only to work on input variables, not returns. I tried to set a variable that was an int and use return from function with defined return "def return_string() -&gt; are:" But pycharm did not warn in that situation.
Don't assume, test it out. Someone else commented that pow is slower.
If you don’t like the talks I suggest you join the program committee they vote on which talks to accept
In 3.7??? Wow. Any idea why this might be the case?
I bought the book once I realized how great it is while going through it online. Once you're finished with it \-\- or confident in your grasp of Python \-\- make a reddit bot :\) /u/busterroni did a great 4 part tutorial on making a bot with PRAW \(bonus video by /u/bboe the author/maintainer of PRAW\): [https://www.youtube.com/playlist?list=PLeU7qpL3IpjBxsC5bYfTXdBp8g8vfoFJ\-](https://www.youtube.com/playlist?list=PLeU7qpL3IpjBxsC5bYfTXdBp8g8vfoFJ-)
Al is awesome I love his books 
numpy.square(x)
/u/AlSweigart 
[removed]
 $ python3 -m timeit "[x**2 for x in range(100)]" 10000 loops, best of 3: 24.4 usec per loop $ python3 -m timeit "[x*x for x in range(100)]" 100000 loops, best of 3: 5.67 usec per loop Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 03:03:55) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin 
If you are about to ask a question, please consider r/learnpython
In many cases, it may be better to take another approach to this kind of problem. By virtue of a site being dynamic, it is extremely likely that it is consuming a payload of JSON or some other form of structured data. If you can access that data from the response directly (which is pretty straightforward to locate with an HTTP debugger proxy), your code will likely be faster and less fragile, as it won't depend on the consistency of the interface at all. 
I'm still on 3.6 at the moment, but see no reason for it to have changed. pow() is a function call that then either has to do logic to see what version to use (e.g. integer or floating-point power), or to implement everything as a floating-point power, whereas x * x is just a single multiplication, mapping to a single CPU instruction. /u/galaune's timings are probably better than mine (I was naïvely using a function call with a single square inside, so more overhead), so the speedup is even bigger than I thought.
I have enjoyed several no starch books. Quality publisher!
Hey I would check out Plotly Dash (https://dash.plot.ly/) You do not need to know HTML or CSS to build a web UI using Dash. The user guide on their website does a great job on how you can get web apps up and running within a few hours! 
This is probably better suited to /r/learnpython. If you just want the labels predicted from the model associated with the rows in the df, you should be able to assign the labels attribute from the model as a new column in the dict, `data[labels]=model.labels_`
I agree, Maybe look into using the alternative (pyqt5)[https://pypi.org/project/PyQt5/] until this has better support? https://pypi.org/project/PyQt5/
&gt;&gt; There are 2000 of these queries. &gt;&gt; the free tier usage restrictions are too restrictive Maybe... pay for what you use? Or use anther search engine.
u/AlSweigart is a treasure to our community, and I mean both the broader community of Python Coders, and the more specific community of people who come to r/Python.
&gt;No description, website, or topics provided. I would suggest adding a short description, and would suggest installing in a virtual environment. Other than that, looks nice. 
Yup
I'm new to coding and tried Learn Python the Hard Way at first. I got through a lot of it but then checked out ATBS and immediately switched. They teach similar things but ATBS worked way better for me. I'm not trying to disparage the other book. It probably works better for some people but the hard way was not for me. 
Did you try using https://github.com/panzarino/mlbgame/blob/master/README.md
The python bytecode is actually the same length too. x**2 4 0 LOAD_FAST 0 (x) 2 LOAD_CONST 1 (2) 4 BINARY_POWER 6 RETURN_VALUE x * x 7 0 LOAD_FAST 0 (x) 2 LOAD_FAST 0 (x) 4 BINARY_MULTIPLY 6 RETURN_VALUE LOAD_FAST vs two LOAD_CONST? Weird. 
I’m sure that this is a violation of the game’s terms of service. Why do you want to do this?
actually I fixed it. I ran in from cmd rather than double\-clicking it and now it works.
concurrent.futures uses multiprocessing under the hood. For specific use cases, it can save a lot of boilerplate code. Boilerplate that is often confusing to new users. 
bottiquette? 
Yes it shouldn't be too hard to convert from `anytree` to ETE. thanks
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
We love you, Al. Or at least I do, thanks for helping me suck less at programming!
https://www.reddit.com/wiki/bottiquette/
I just talked to him at PyCon 2018.
:D
:D
For those curious about 2.7, they came out even for me: &gt;python -m timeit "[x**2 for x in xrange(100)]" 100000 loops, best of 3: 6.52 usec per loop &gt;python -m timeit "[x*x for x in xrange(100)]" 100000 loops, best of 3: 6.58 usec per loop &gt;python -m timeit "[pow(x,2) for x in xrange(100)]" 100000 loops, best of 3: 11.8 usec per loop
Won't this require keeping a separate player instance running for every often-used sound? Like, one for the steps, one for the shots and so on, lest the sounds start playing only *after* reading file from disk?
It seems that gstreamer is just what I was looking for. It even comes in a default Python installation, doesn't it?
Ditto. Your sushi go round code has helped me at work as a civil engineer. Thanks!
In short, it's a very different project and I'd say it's solving a very different problem. Dongo isn't trying to be what django-mongodb-engine is, and for the most part the only similarity is that it is a ORM/ODM for mongo. Other than that, dongo really isn't built for django. Though I'm sure you could write a django backend to use dongo, that would be a lot of effort that wasn't intended to be the goal of this. It might not be intuitive based on the name and description, but Dongo isn't a backend for Django. It's simply a Mongo ORM, only requirement being pymongo and six (made for 3.x, but six for python 2.7 compatibility). It'd be easier to use dongo with flask than it would be django to be honest (would work out of the box for the most part), or even just simple scripts to interact with existing data in a mongo db. The reason django is in its description is just the actual programming API, an interface like `Person.filter(age__gte=21).update(can_drink=True)`. I love the Django ORM and I think that API makes a lot of sense for interacting with mongo as well. Dongo is meant to be used as a standalone library for working with mongo, inside and out of web development. Some of the main goals with Dongo was to offer an intuitive querying API that is similar to the django sql ORM API, but other than that it's just the interface and nothing else is related, or required. You can install this on its own and just start querying a mongodb without any webserver or django app. My other main goal was to offer a bulk operations API as a primary feature. I've often had to resort to messy custom bulk code when working with pymongo, and bulk operations have always been something that's popped up as a requirement to improve performance. I wanted a simple way to abstract that and make it easy to use, not too far from just interacting with the non-bulk operations. This isn't just a mongo problem, but sql as well. Sometimes a problem requires refactoring to use bulk operations to improve the performance drastically. Dongo is meant to make that easy from the start if you know a problem can be done in bulk. Also, considering it's built for a document database, this cares nothing for the structure of the documents. When you declare "models" you just declare the name of the collection and instance methods. Nothing more is needed, no fields or anything. You don't need to declare a schema like a django model. That is a core difference that I've tried to stick with. It can work with arbitrary schema-less documents. The only connection I've tried to keep with Django is the programming interface specifically, with suffixes like `__gt` and `__regex` for queries, nested queries with `person__employer__name`, ORing and ANDing querysets together, and all that sort of magic in the django API. Other than that, it's built primarily to serve a schema-less document database and just translates this API into mongo queries like `{"$or": {"$regex": {"name": "^foo"}}, {...}}` but built with a django-like query API. I'm pretty sure django-mongodb-engine is built with the opposite idea in mind, where you pretty much do everything like django, declare models and schemas, but you just use mongo. Its goal is to be a mongo backend for django, dongo's goal is to be a django-ORM-like interface to mongo with mongo being the main focus. As for use-cases, very different. Dongo would work best as a flask site's db ORM, a dependency for a script that needs to query/modify mongo data, a standalone application that uses a mongo database, but it's not at all set up for working with django out of the box. Django-mongodb-engine is primarily to handle that use case dongo doesn't. TLDR: really they're just completely different even though they sound 99% the same from the name.
Is it able to cache all the sounds in RAM?
You didn't find anything in the sidebar?
I agree, but a lot of APIs have CORS set up to restrict that
Sure, I'll run it again tomorrow after I that out and see what happens. I cannot print the columns, generally it will detect if I try to do something like iterate through the dataframe and print the output and getting around that is a TOS violation.
I will gladly share my exercises and projects with you for $499.
Create a new post instead of commenting here. It's harder for the wider subreddit group to see your question via comment.
Based on my experience teaching R/python to professionals and academics over the last 5/6 years. For extra context I primarily teach people planning on doing data scienecey things. If you are teaching people who are completely new to programming, remember that you will likely need to explain lots of things you take for granted. Things you find easy they will not. I don't know if you are planning on doing this face to face or online videos or what. We always try to focus on the goal. Why are these people learning python? Do they feel they are moving toward that? Having your sequence of examples build on each other, with interesting data/scenarios and sort of telling a story throughout the session will help keep things interesting. kaggle has loads of interesting data. We also have for every course that we do Lecture slides A proper booklet handout (not just slide printouts, I hate when people do that) Practical exercises Solutions. A package (R/python) that contains the practicals/solutions, datasets and code necessary for them and any other examples. enthusiasm and passion shines through when presenting. The other advice I would give is that lots of people are teaching python. You have to give people a reason why they would pay you for it. 
I think the assumption that x**2 is slower than x*x could be applied to the vast majority of programming languages. However, from my POV this should not be the case now, as compilers/interpreters tend to optimize such operations via replacing x**2 by x*x and x**3 by x*x*x up to some reasonable limit in compile-/runtime. Apart from that, there are techniques, say, PGO, which measure code execution and tell you what could be optimized.
Apologies. I was/am on my phone. And I actually did base this comment on experience. A long time ago I had a memory bottleneck and after some research I resolved it by simply using math.pow. instead of the mul Which led to my false assumption in this question I'll correct the comment. Thanks for pointing this out. Must have been something else 
I'm not positive but based on the documentation, it looks like the ontimer function waits the desired amount of time and then only executes the given function (moves the enemy) once.
Pow is a more direct function.
I *don't* teach Python, but as an engineer, I have been on many courses taught by others over the decades What I like about course is when they are goal-oriented on goals relevant to my subsequent work projects. I know that there has to be some generic work on the basics, such as elementary syntax and getting an environment up-and running; but the couse needs to to have one or more mini projects that use the language features. Documentation is paramount. My best courses attended were ones from Doulos (Verilog, systemVerilog, ...), and Wellhouse Consultants (Perl). Although I took the courses nearly two decades ago, I still retain the documentation as there was enough reference material given to help me through the initial months after the course and there documentation remained a useful alternative to the books bought. Also be prepared to answer the odd, quick, (&lt;5 mins), email or phone call from past students as this has lead to repeat business and grateful former pupils giving you a shout! :-) All the best in your endeavor. P.S. Being Pythonic is a given of course. 
 * Spec: If your "source" or spec states one way then don't swap. * Wider context: If x is multiplied by several alike items, where x shares the same *likeness* then `x*x` would go together with like appearances of `x*w` and `x*z` for example. In general, use whatever is most readable/maintainable which the above two cases might help you decide :-) 
They are advertisements, the subscription services have signed up to this in the hopes they can retain new customers... that doesn't mean they're useless. PyCharm, DO and Egghead and Postman are all awesome. I'm just starting to learn Python (currently a PHP developer) ... These services allow me to dive right in for like $20 for at least 6 months.. I know I could get by without them but they will certainly help. I already pay for PHPStorm, so not having to pay for PyCharm as well is a win win!
Are you sure you've installed PySide2 to the right Python version? I mean usually *pip* installs packages for Python*2*, to install packages for Python3 you invoke *pip3* command. Also you could look up the PySide2 directory with *find* command and sys.path.append it prior to importing PySide2 in your script.
Maybe unrelated, but how do you make PyCharm to have acceptable performance on Windows? I don't know what I did wrong, I evaluated it already two times. I have Windows 8.1, 8GB RAM and intel i5 at 3.2 GHz, and Pycharm is just slow for me to effectively work with it. I eventually settled with VS Code.
Not PyGame, but there is an asteroids type game example in the pyglet documentation: https://pyglet.readthedocs.io/en/pyglet-1.3-maintenance/programming_guide/examplegame.html
I get 27.5 and 4.66 on Ubuntu But x**2 seems quicker for floats: $ python3 -m timeit "[x*x for x in [i/33 for i in range(100)]]" 100000 loops, best of 3: 8.64 usec per loop $ python3 -m timeit "[x**2 for x in [i/33 for i in range(100)]]" 100000 loops, best of 3: 10.5 usec per loop $ python3 -m timeit "import math; [x*x for x in [i*math.pi for i in range(100)]]" 100000 loops, best of 3: 12.3 usec per loop $ python3 -m timeit "import math; [x**2 for x in [i*math.pi for i in range(100)]]" 100000 loops, best of 3: 14.3 usec per loop
If you wish to join the project I'm looking for contributors. [Level Google+ Community](https://plus.google.com/u/0/communities/116458888632827092056) [Level Discord Group](https://discord.gg/7bhbQ7j)
[pythonocc](https://github.com/tpaviot/pythonocc) or perhaps [svg path tools](https://github.com/mathandy/svgpathtools)
I'll check it out thanks
:D I learned python by going through 2.5 of your books on your website. Thanks for being awesome! 
*On Windows*
Amazing!!! I want.
I think you're looking for [difflib](https://docs.python.org/3/library/difflib.html) Also check out https://github.com/seatgeek/fuzzywuzzy and search [string similarity] [fuzzy string match] and so on.
Hi, I've never been to PyCon nor any tech/programming conference. I would like to know what is the community's baseline of an excellent talk. Any names that I can search on youtube and watch? 
thank you! I'll get to reading
i fucking love python
`x**2` does not get transformed to `pow(x, 2)` for any built-in type. Also, both operations are overloadable so there's no reason to believe there's any difference in how much type checking each has to do - int by float multiplication will *also* go down a different code path than int by int. You're probably onto something with the cpu instructions though. X86 has two (integer) multiply instructions (signed and unsigned), but no power instruction - so a power function with two values only known at runtime would have to dynamically work out a series of shifts and adds. Python almost certainly offloads this to the C compiler at interpreter build time, so good money is on not just this effect, but also the rough scale of it and what power of `x**n` starts showing the opposite, being consistent across languages.
that's pretty neat, I had no clue about telebot
it's an onilne course
Here is a direct link to a matplotlib example https://matplotlib.org/examples/pylab_examples/contour_demo.html
I'd recommend this path to install the interpreter and then using virtualenvwrapper or the like to manage separate environments. I did find some silliness with pillow but I think that's an xcode/pillow issue than a brew issue. 
guise I took a treehouse course on python and I want to interview for machine learning for $$$ what do
me too! I've used it for lesser time than C or C\+\+ but it's all that I use
\+
If you want to create your own solution, you could implement a popular information retrieval technique where you vectorize the strings and then use a similarity function (such as cosine) to return the top ranked document. It's pretty intuitive to set up with a default dict.
Thank you very much! It seems that isosurfaces describes exactly what I need.
Yay for fuzzywuzzy. (I work at SeatGeek)
&gt; attempts to manage dependencies via pip executions ??? setup.py &gt; `install_requires` or `extra_requires`. `pip install mypackage` will take care of it.
Take a look in /r/learnpython: https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F
PyCon US isn't a small regional event that only draws local people. It's the main Python conference of the year, and people travel from all over the world to come to it.
Thank you!
I understand that, but even so, location matters.
I think you're drastically overstating it.
I stumble on your proposal and now I'm wondering how one can vectorize an arbitrary string.
Yes, that's what I said.
PyQT/PySide can get the job done. FreeCAD is based on PySide. It takes some time to dig through the docs, and there are not many official examples that are along the lines of a CAD editor... But the capabilities are there.
Paraview does isosurfaces.
Yes, I made exactly this: https://app.quicktype.io/?l=kotlin
Sorry—it’s not a Python library! It’s implemented in TypeScript.
I'm waiting for someone more knowledgeable to answer, but I suspect it's a deliberate choice, due to lack of interest. We have projects like Cython and Numba, which approach this path.
That's not an answer. You could write an interpreter for C if you wanted to.
You could write a compiler for Python code, it's just an interpreted language. There's some advantages to interpreted languages like ease of portability, dynamic typing, rapid development, etc. If you really want to compile Python to binary, look at something like the [Cython project](https://github.com/cython/cython)
You do realise that Python is the very definition of an interpreted language and that C is the very definition of a COMPILED language. 
Any recommendation would be appreciate it. I'm starting to watch some of them but normally there are always hidden gems (awesome talk with bad or misleading title)
That doesn't mean that one can't implement them differently. You laughed at the idea of a C interpreter... Yet it's been done lots of times.
Java isn't fully compiled, it's complied to byte code and only becomes "machine code" during execution in the JVM.
Yes but that's not helpful to why you *couldn't* compile Python or interpret C. Just because a language was originally designed to do a specific thing, doesn't mean it's impossible to do something else with it.
Sure, but you missed the point... I'm saying that no language is intrinsically "interpreted" or "compiled", because it's only a matter of whether an interpreter or compiler has been written *for* it. A language is just a specification, i.e. it's not coupled exclusively with its implementation/s
Isn't Java actually "interpreted" in the same manner Python is?
https://automatetheboringstuff.com
The answer is that of course it can be done. There is no real technical reason why python could not be compiled down to native code. There are some challenges that would need to be addressed. 1. Variables can change type at runtime. This could be addressed with a two-step process. If the compiler can prove that a given variable only has one type in practice, then it could choose to emit an efficient representation of the variable. Otherwise it could represent it as effectively a tagged Union of all possible types. 2. Modules. Supporting runtime loading and execution of arbitrary modules would be the hard part. One could embed a python interpreter in the resultant executable, but that's fairly inefficient. Or you could just require that all modules also be compiled to native code to be supported. Neither of these challenges are insurmountable. I think the only reason why it hasn't really been done, is a lack of need for such a tool.
"Can I replace my wood decking with composite decking" "No because the house came with wood" That's very much simplified but essentially what you're saying. It wouldn't be simple to do, but I don't see a reason why you couldn't make a compiler for Python
And I think Go kinda bridges the gap for a compiled easily accessible language making the need for compiled Python even lower.
It actually isn't by any means, but go ahead and keep putting yourself on the back.
The Altair tutorial was amazing, I'm sure it will change the way I think about data visualisation!
It can, in theory, but it would amount to embedding more or less the entire interpreter in the binary, and you wouldn't see a lot of performance improvement due to the highly dynamic and effectful nature of the language - everything, down to module imports, can (and often will) have side effects, there are very few guarantees you can statically rely on, so you'd have to do most things at runtime anyway, there simply isn't a lot you can infer statically and bake into machine code. The biggest win would be that you could skip the parser step, but CPython already does that by caching intermediate code in .pyc files.
RemindMe! 3 hours
I will be messaging you on [**2018-05-13 20:56:20 UTC**](http://www.wolframalpha.com/input/?i=2018-05-13 20:56:20 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/8j4ep6/pycon_2018_talk_videos/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/8j4ep6/pycon_2018_talk_videos/]%0A%0ARemindMe! 3 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Welp... It could actually. Google for Nuitka
I've watched "Beyond Unit Tests: Taking Your Testing to the Next Level" by Hillel Wayne. It makes a very good case for why you need to Hypothesis, and for contract-like testing. I liked it.
pyd's are Windows DLLs internally. On macOS native Python modules have .so extension.
To fill out inputs in form, you need to parse dom. But without opening the page in browser, how the html, css and js response will get converted into DOM tree. Also, you need v8 engine to do js compilation.
&gt; Also, you need v8 engine to do js compilation. I don't know much front-end. Could you please explain what this is?
Take a look at Nuitka, Cython and RPython. All of these projects compile either pure Python or a subset of Python to native code using C/C++ compiler.
I’ve done this in the past using ChromeDriver with Selenium; versions of ChromeDriver after ~30 allow an option for headless execution in which no window is opened but you can traverse the page in the same way. Some quick google-fu found [this](https://intoli.com/blog/running-selenium-with-headless-chrome/).
https://github.com/v8/v8/wiki/Introduction
I enjoyed the list-comprehension/generator expressions video. I went in knowing how to use them, but I found the tasks/practices to be helpful. 
I stumbled on this today while looking through various packaging options. This looks to be inspired by Twitter's [PEX](https://github.com/pantsbuild/pex). There's more information on why LinkedIn built Shiv here: http://shiv.readthedocs.io/en/latest/history.html
That's awesome, I never would have guessed but it makes sense how this had come to be. 
You don't need to know any of that. Just lookup selenium and running browsers headless like the use user mentioned; that'll meet your criteria. 
Upload the source to pastebin or similar and post a link. An image is not a preferred way of representing source code. 
You could, but given the nature of Python it wouldn't add much benefit. Consider a statement like `a + b`. In a language like C the compiler knows the type (`int`, `float`, etc.) so can directly compile that to the appropriate machine language. But in Python, that could be adding two numbers, two strings, object with an `__add__` or `__radd__` method. You probably don't want to embed all the necessary checks/dispatching at each location so instead you would need to embed a call to the runtime and once your compiler is just embedding calls to the runtime, a lot of the benefit of compilers is lost.
If it is only one form then it can be easy just install a websniffer chrome extension and submit the form, open websniffer and see the urlencoded-form data, once you see that just use requests to post that data.
That works on a time scale of a three or four years but will not work in ten or twenty years. It is likely that neither virtualenv nor conda exist any more then.
There are surely exceptions (Hinsen is one) but most productive scientists are not good software engineers. Apart from that, a large portion of work in exact science is done from PhD students, which change either to other institutions, or get a job outside science they can live from. Somebody working on his PhD usually has not the time to learn software engineering, and it takes much more time to be a good software developer.
I found the Streetfighter talk really disappointing and unentertaining and just not well presented. Only some seconds of actual gameplay, with little to no visual indication of what the bot does. 
One problem is that docker does not provide the source code of all the libraries and infrastructure code which is needed. In the long run, it is everything but trivial to replicate a complex environment. There are systems such as bitbake and yocto Linux which build everything from source, but they are only useful to experts with a lot of time. 
Python is just as compiled as Java these days. The difference is the JVM has a lot more tech for converting JVM bytecode to efficient native assembly than the CPython VM has for Python bytecode. We also don't make the compile thing a separate step, it's done automatically when you load a file if the source file is newer than the `.pyc` file (which contains Python bytecode just like `.class` files contain JVM bytecode). PyPy does have this system for converting Python bytecode is native machine code, and as such can be much faster than CPython, though as with CPython it doesn't make this a separate step.
Using system randomness to generate strings for passwords should be fine if they're sufficient length. It's not like you need an electrical noise device for a source of randomness to just generate strings to use as passwords. How they are hashed and stored is more important. Also how the user verification works. Maybe I'm wrong though. Curious to hear counterarguments.
Docker is nice for continuous integration in cloud companies and internet startups, but it is not even intended to archive software for ten or twenty years. 
I'm super impressed with the turn around time for these uploads. 
I downloaded the file and I think the top lines are gone or something, because there are no imports and there is no class declaration, the first line was the init line. Did you make a mistake, or is it me?
[The Clever Programmer](https://www.youtube.com/playlist?list=PL-J2q3Ga50oMjIbufBm0Xpz2gjCWDGimv) Try this guy too. Sometimes having different ways of explaining helps. I don't know why but I understood what I needed to do better from Qazi rather than some of the other tutorials out there. Maybe the way of explanation was different and a bit more relatable. Anyways, just follow what he says and it'll work out.
If you take a look under the hood of your browser in the developer Network tab, you can see that most browsing is http GET calls, and input forms cause http post calls. You can make the same calls from python with the [requests library](http://docs.python-requests.org/en/master/).
2to3 \-w /path/to/2/million/lines/of/2.x/code. just saying..
Hot take: `n &lt;&lt; int(math.log2(n))` (note: only works for powers of two)
Right. First you would need to convert your data to a paraview readable format like vtk. [check this out](https://www.google.co.il/amp/s/pyscience.wordpress.com/2014/09/06/numpy-to-vtk-converting-your-numpy-arrays-to-vtk-arrays-and-files/amp/)
Actuaaly I think thats the error you got to define the class, which in this case would be: class lemonstand: def __init__(self): code to run and other function of the class go here then you start the class like this: stand = lemonstand() stand.lemons 
I've done this before. Use Requests and BeautifulSoup
Nathaniel J. Smith's trio presentation is quite nice! (Something does sort of bug me about the final implementation of the Happy Eyeballs problem -- can't quite put my finger on it -- but there's no denying that its brevity shows trio's strengths)
Being compiled or interpreted (or hibrid, like Java and python actually are) is an attribute of an implementation, not of a language. Any language can be implemented as either, or in various mixes between the two approaches. Some languages are easier to implement in one approach than the other, but that's it.
They bridge the gap because python sucks in this respect.
I was planning on using Selenium and the chrome headless browser. Do you think the frameworks you mentioned are better?
I have done this for a similar problem with [pythreejs](https://github.com/jupyter-widgets/pythreejs).
if you need full javascript support, you have to use something like phantomjs. The best way in pure Python is the requests_html library I guess. It is very nice to work with.
The module name is `tweepy` in lower case, give that a try :)
I think that a headless browser is the way to go.
&gt; If the compiler can prove that a given variable only has one type The problem is that it can't. Unless you mean by "in practise" that it will code that crashes if somebody does something unexpected. For example: def foo(): bar = 42 eval(urllib2.open("http://dontdothis.com/script.py").read()) return 2 * bar script.py can contain anything, so it can also change `bar`. Even if you remove the eval line, it isn't safe, because there could be some other code that rewrites the bytecode of the `foo` method, or (more likely), changes the function local dict into something that will convert every value into a string when written to. So the only thing you can do is either: a) compile into something like: py_eval("..."); py_eval("..."); which isn't more effective than the python interpreter, or do Just In Time compilation, which isn't really compilation.
I['ve answered a similar question some time ago]
holy shit dude LMAO
Well, that's why I said "if". Obviously, it can't in the general case, which is why I said that as a fallback, it can use a tagged union approach. However, there certainly are circumstances where it can, in which case it would be able to emit an efficient representation of that code. I see what you are saying about things that I would file under "self-modifying code", to which I would just say that the same can be said about C or C++. Yea, a user could write code which modifies the machine code in memory, alters vtables, etc, etc... Which any sensible standard would just say "that's undefined behavior"; which we could say the same about a compiled python implementation.
&gt; Which any sensible standard would just say "that's undefined behavior"; which we could say the same about a compiled python implementation. Python, as it is defined, is a highly dynamic language, so insane stuff like the one described is guaranteed to work; even if you shoot yourself in the foot. Yes, If you add restrictions, it can be compiled. But then it's not Python the language anymore, but a derivative. Python by itself cannot be statically compiled. The PyPy guys actually have created such a derivative: PyPy itself is written in RPython, a restricted subset of Python that can be statically compiled (and is actually a pain to develop with; you're basically are writing a somewhat stripped down C++ code in Python syntax)
off the top of my head, I don't think he needed to pre-generate a list of events, instead could have just passed in a counter and an optional event to wait on. That's really personal preference though :)
Pyinstaller already does this.
Nope. Pyinstaller has it's own problems\(not working with pyside2 for example\) and the binaries are too large.
Does the people in charge of python REALLY make hard gaurantees about things such as the bytecode representation? (I'm genuinely curious, do you know where such a gaurantee is made?) That seems to me to more of a hindrance than anything else. For example, the main reason why C and C++ have undefined Behavior, is because in many cases giving things guaranteed Behavior is a hindrance to efficiency.
BeautifulSouo would help with scrapping. Requests would make things faster and easier compared to using Selenium
&gt; and the binaries are too large Golang binaries are also large btw
&gt; Does the people in charge of python REALLY make hard gaurantees about things such as the bytecode representation? No, bytecode is not guaranteed to be stable, but I'm pretty sure replacing the dict of a function is.
same for C#
The rewriting function dicts is an interesting case, but I actually don't think that it's insurmountable either. It would be sacrificing a bunch of the efficiency that one would hope to get from native code... but the way that I would approach that is to basically have local variables accessed indirectly via whatever we choose to implement the dict with. Basically a hash-map for looking up variables by name. I can imagine some ways to make this more efficient than the naive approach, but it would be workable. For example, if static analysis can prove that the function doesn't modify its own dict (like for leaf functions), copy local variables to the native stack upon entry and copy them back on exit allowing the actual function code to have pretty fast access. So, my feeling is essentially "technically doable, but not really worth the effort as some other languages fill the 'mostly dynamic but compiled to fast native code' niche already". BTW: I like that this conversation is actually getting to the meat of the "why" question the OP asked!
Agreed. I’m using pipenv for that.
Check out my lighting talk:https://youtu.be/c-I0md_3fbQ?t=40m1s !!
Let me know what you guys think. I think I did alright for having 2 hours to throw this together, but there's always something to improve. Very grateful for the opportunity, and for the positive reception from the community.
For anyone who currently uses `pygame`, or just would like to get into 2D game programming, I highly recommend the [Paul Vincent Craven's talk about `arcade`](https://www.youtube.com/watch?v=DAWHMHMPVHU). It starts off a bit slow with a "for dummies" style, but ends up showing how to structure your code into classes etc.
is this just fantasy?
I thought the issue with Requests is that they wouldn't load the DOM or run the JS on the site. I want to make this as lightweight as possible so the fewer libraries/frameworks I use the better.
GraalVM is an interesting experiment with language interop and also compiles to binaries with native-image.
You're right. What exactly are you trying to do? (like website, etc.)
I'm basically trying to input a bunch of ISBNs into a website, scrape the results to find the prices and then store them in a file. The website has a single search box for input and when you click the search button, the results appear are rendered below (hence why I need JS to run).
I don't think you'll need the JS. To me it sounds like you're inputing data into a form that probably does a POST. You can do this Requests. Message me the site, example, and I'll see what I can come up with.
Trying to write a script that will open a browser, navigte to a webpage, click around, and submit the form. 
Do you have any plans to update the excel videos in your course after the syntaxes changed? 
This was also discussed during the following pycon talk. Too lazy to look up the video atm https://us.pycon.org/2018/schedule/presentation/162/
I really want to read shiv, but I can only read Sheev, and I really don't get what the Senate has to do with this.
Learning Python lol
They also set up a channel URL that you can use that's easier to remember: https://www.youtube.com/pycon2018
This looks pretty straight forward: https://bookscouter.com/buy/1974305031. I'll make a demo file for you, give me an hour
I am not sure about python, but try rr maybe (https://rr-project.org/)
I'm really happy that they are now each uploaded to their own channel. This allows us to do sorting on these videos only. It's honestly surprising that after all these years, there's still no good way to do better filtering on Youtube videos. Something like "most popular video uploading in the past X days".
Not a problem! Are you new to python?
He also hosted an Open Spaces gathering about [formal methods](https://en.wikipedia.org/wiki/Formal_methods), which I found really interesting. He and another guy (forget his name) were making the case for why we need to start treating software engineering like *real* engineering. We have a tendency to fly by the seat of our pants and start writing code without really thinking about the design of it in its entirety. They used the example of a mechanical engineer pondering the design of the truss of a bridge they're about to build, realizing it's hard, then just trying to figure it out on the job site. It was pretty eye-opening.
Serious python, yes. I've written a small script here and there and use numpy to help me process data, but this would be my first real "program" with Python. I'm hoping to make something cool and put it no my GitHub :)
Is this the big main 2018 Pycon? I don't see most of the big names that usually go, like Guido, Raymond Hettinger, Brandon Rhodes, etc.
Bro, this is not the thread, and I am not the person to ask about MSSQL.
Nice! Well I'm happy to help! Can you give me some ISBN's that you've been looking for so I can test them?
Sure, here are a few. I can type up more if you need them. I haven't actually made a list of ISBN that program will eventually read from. 9780021847389 9780028028330 9781591413202 9781457304309 9780764573712
https://github.com/mlaguayojr/bookscouterdemo
The Raymond Hettinger talks are always wonderful
Thanks but this isn't sandwiched. Duly noted in evernote. ..
Yeah? I have only tested a small app. Maybe with qt et al it would be bigger. Anyway, pyinstaller has not worked with my pyside project. It's like you are presenting it as a panacea you know, but it definitively isn't there yet.
This is awesome! Thank you. Do you know why it doesn't return the list of prices though? When I ran it I got to see some stuff for Amazon but that's not in the actual returned result of the web page. When you use the normal website with that same ISBN you get a price from TextBook rush but not Amazon. I'm trying to understand that the `data` variable contains.
Thanks for the encouragement, I've gotten a bit frustrated a few times... This is actually my first coding language (not counting HTML and CSS since those are kinda limited use and read differently) so it's taking a little more focus than maybe someone experienced.
As a *real* engineer who also develops software, I can tell you that the mindsets are completely different. Engineering is build on well understood principles, constrained by well defined standards, performed under (relatively) standard project trajectories. There is room for innovation and new ideas, but structural principles haven't changed much over the years and whatever you come up with must still conform to the standards you're designing under. Comparatively, software development has almost no constraints on quality &amp; certification (outside things like MISRA). Hardware is changing, languages are evolving, this leaves lots of space for new ideas and innovation but doesn't allow for much 3rd party validation. Certainly not the way *real* engineering does anyway. When I design a structure, the design is fully documentee by me, checked &amp; reanalysed by someone else in my team, approved by the structural lead, checked by the client and completely reanalysed by a third party to verify that it conforms to the required standards. There's not many industries where the same could be said of software, though admittedly, most software won't kill anyone if its written poorly
Hmm, so how would I get all the prices? I agree that using the API is better but it doesn't help me to only get the lowest price.
[removed]
I would suggest you go to /r/learnpython as these posts aren't suited for this sub, but what you really need is to just use a search engine
I got the feeling that they were evangelising a little. They put down technologies like Coq, dismissing it as impractical. And yet a lot of certification work has been done in the language! TLA+ and Alloy sound cool, but that doesn't mean that you need to throw other technologies under the bus.
Okay, I updated it. Let me know what you think! 
Sentdex on Youtube. He is the man, and has an entire series of videos, fueled by revenge, about making a reddit api to catch spammers. It’s really neat. I didn’t even follow along coding I just watched. If you search for sentdex you literally can’t miss his awkwardly smiling profile pic.
Yea that bugs me sometimes, I’ll have to select the correct interpreter each time I open up pycharm.
I'm going into my fourth week of MIT 6.00.1x \(Intro to Computer Science with Python 3\) on edX, and I just started my first GitHub project. It's a simple encoder/decoder, I'm really doing it to learn Tkinter.
&gt; students get pycharm for free with edu. Woah! I didn't know this. I just got my 1 year subscription :). As a student, don't forget to sign up for Autodesk software also. Amazon prime is free for six months too!
Sentdex on Youtube. Again, this guy is great. Can’t miss his face if you search the name “sentdex”. He probably has a video for anything you’re interested in, and he walks through everything step by step. I’m pretty sure he has introductory videos, but the Reddit API series and PyQt4 videos are some of my favorites. And his GTA playing robot videos, which are cooler way more than they are practical, if your new at least. In the Reddit API videos, he tries to catch some Udemy spam that’s been claiming his videos as their own by searching users, posts, and subs for relevant words (“free”, “try today”, “Udemy”) and other things he considers trashy, then the bot posts a warning that the post might be spam. Aaaand in the PyQt4 videos, he uses it the library (PyQt4) to make a GUI. Fun to mess around with, and funner to turn into a raspberry pi security camera control station, if I do say so myself.
I see it returns a JSON with all the data. This is definitely the way to go. If I was going to scrape the data then I'd have to worry about formatting, but this already has it formatted in a nice and easy to consume format.
Yep! I'm glad I was able to help! Let me know if you need any other help! What's your github page? 
&gt; What's your github page? Still working on that... I'm pretty new to programming and just trying to do a few projects to get started.
This is... beautiful. Tomorrow’s meme day at school, and this would’ve been perfect with a raspberry pi on a portable screen.
Oh my god, I've never heard of Altair before. It's so cool. I'm going to use this immediately at work.
More people should know about passlib. &gt; Passlib is a password hashing library for Python https://passlib.readthedocs.io/en/stable/lib/passlib.utils.html#passlib.utils.generate_password https://pypi.org/project/passlib/ 
Op you the man
The BQPlot stuff from recent JupyterCon was amazing
you can also use `you-get` to download youtube videos. [you-get](https://github.com/soimort/you-get)
As an aerospace engineer in propulsion who happens to also do lots of software stuff at NASA I agree for the most part, though with a caveat. Flight software has extremely stringent requirements. The stuff I write to help me do analysis better and whatnot isn't controlled at all. The models that my team owns and that impact the overall design are under configuration management and have requirements that are far less stringent than flight software.
Because it's a *highly dynamic* language. Take this bit of code: a * b Looks like multiplication, right? But we can't be sure, since at compile time we have no idea what the objects that `a` and `b` reference are. The very best the compiler can do is create code to: * evaluate `a` to get an object reference * evaluate `b` to get an object reference * call the `__mul__` method of object `a` passing object `b` and **hope** that `a.__mul__` exists and it knows what to do with `b`. This is a far cry from what a C/C++ compiler can do with the same code. It knows that `a` and `b` are *always* `int`s and can generate code that: * loads the int at address `a` into register R0 * multiplies R0 with the int at address `b` which is two machine instructions (for most machines) and is very fast. So python is intepreted because it's highly dynamic and it's extremely hard to write a compiler for python that generates code like C/C++. But keep an eye on [PyPy](https://pypy.org/)!
I am the one who gave the Netflix talk: https://www.youtube.com/watch?v=iQI56-up3Yk. Happy to answer any questions. :)
I would like to read your post. Link to it after it's published?
Read the sidebar.
Thanks, sorry I’m using mobile 
For those struggling with the truncated names on youtube... here is a better list. * [Barry Warsaw - Get your resources faster, with importlib.resources - PyCon 2018](https://www.youtube.com/watch?v=ZsGFU2qh73E) * [Sunday Morning Lightning Talks + Keynote - PyCon 2018](https://www.youtube.com/watch?v=tzFWz5fiVKU) * [Daniel Pyrathon - A practical guide to Singular Value Decomposition in Python - PyCon 2018](https://www.youtube.com/watch?v=d7iIb_XVkZs) * [Mario Corchero - Effortless Logging: A deep dive into the logging module - PyCon 2018](https://www.youtube.com/watch?v=Pbz1fo7KlGg) * [Pieter Hooimeijer - Types, Deeper Static Analysis, and you - PyCon 2018](https://www.youtube.com/watch?v=hWV8t494N88) * [vigneshwer dhinakaran - Pumping up Python modules using Rust - PyCon 2018](https://www.youtube.com/watch?v=UYpWVfTng4s) * [Carl Meyer - Type-checked Python in the real world - PyCon 2018](https://www.youtube.com/watch?v=pMgmKJyWKn8) * [Amber Brown ("HawkOwl") - How We Do Identity Wrong - PyCon 2018](https://www.youtube.com/watch?v=A5tPhUKljuY) * [Alex Gaynor - Learning From Failure: Post Mortems - PyCon 2018](https://www.youtube.com/watch?v=L9Y2ap6vIMg) * [Alvaro Leiva Geisse - Systemd: why you should care as a Python developer - PyCon 2018](https://www.youtube.com/watch?v=ZUX9Fx8Rwzg) * [Ned Batchelder - Big-O: How Code Slows as Data Grows - PyCon 2018](https://www.youtube.com/watch?v=duvZ-2UK0fc) * [Greg Price - Clearer Code at Scale: Static Types at Zulip and Dropbox - PyCon 2018](https://www.youtube.com/watch?v=0c46YHS3RY8) * [Claudio Freire - Efficient shared memory data structures - PyCon 2018](https://www.youtube.com/watch?v=52zM4GgmqDE) * [Renato Oliveira - User focused API Design - PyCon 2018](https://www.youtube.com/watch?v=q42hCs2E4So) * [Steven Sklar - The Hare Wins the Race: Getting the most out of RabbitMQ in distributed applications](https://www.youtube.com/watch?v=WXkhJ92-fsY) * [Zekun Li - There and Back Again: Disable and re-enable garbage collector at Instagram - PyCon 2018](https://www.youtube.com/watch?v=WVnACT48CkE) * [Kyle Knapp - Automating Code Quality - PyCon 2018](https://www.youtube.com/watch?v=G1lDk_WKXvY) * [PSF Community Service Awards - Catherine Devlin Keynote - Final Remarks - PyCon 2018](https://www.youtube.com/watch?v=3kta4GB3PAw) * [Lightning Talks - Saturday Evening - PyCon 2018](https://www.youtube.com/watch?v=c-I0md_3fbQ) * [Trey Hunner - Python 2 to 3: How to Upgrade and What Features to Start Using - PyCon 2018](https://www.youtube.com/watch?v=klaGx9Q_SOA) * [Sara Packman - The Journey Over the Intermediate Gap - PyCon 2018](https://www.youtube.com/watch?v=49CIIu1XkIE) * [Rae Knowler - Python, Locales and Writing Systems - PyCon 2018](https://www.youtube.com/watch?v=EEV4G6rh-KQ) * [Matt Davis - Python Performance Investigation by Example - PyCon 2018](https://www.youtube.com/watch?v=yrRqNzJTBjk) * [Mariatta Wijaya - What is a Python Core Developer? - PyCon 2018](https://www.youtube.com/watch?v=hhj7eb6TrtI) * [Jason Fried - Fighting the Good Fight: Python 3 in your organization - PyCon 2018](https://www.youtube.com/watch?v=H4SS9yVWJYA) * [James Bennett - A Bit about Bytes: Understanding Python Bytecode - PyCon 2018](https://www.youtube.com/watch?v=cSSpnq362Bk) * [Hynek Schlawack - How to Write Deployment-friendly Applications - PyCon 2018](https://www.youtube.com/watch?v=wuCpCkrfeMs) * [Graham Dumpleton - Secrets of a WSGI master. - PyCon 2018](https://www.youtube.com/watch?v=CPz0s1CQsTE) * [VM (Vicky) Brasseur - The human nature of failure &amp; resiliency - PyCon 2018](https://www.youtube.com/watch?v=h-38HZqanJs) * [Paul Vincent Craven - Easy 2D Game Creation With Arcade - PyCon 2018](https://www.youtube.com/watch?v=DAWHMHMPVHU) * [Dmitry Filippov, Ewa Jodlowska - By the Numbers: Python Community Trends in 2017/2018 - PyCon 2018](https://www.youtube.com/watch?v=xEE4X-9RROM) * [Kenneth Reitz - Pipenv: The Future of Python Dependency Management - PyCon 2018](https://www.youtube.com/watch?v=GBQAKldqgZs) * [Christopher Fonnesbeck - Bayesian Non-parametric Models for Data Science using PyMC3 - PyCon 2018](https://www.youtube.com/watch?v=-sIOMs4MSuA) * [Scott Triglia - Surviving (and thriving!) when you are overloaded - PyCon 2018](https://www.youtube.com/watch?v=dWuRDbH4Xlw) * [Russell Keith-Magee - Building a cross-platform native app with BeeWare - PyCon 2018](https://www.youtube.com/watch?v=qaPzlIJ57dk) * [Lilly Ryan - Don't Look Back in Anger: Wildman Whitehouse and the Great Failure of 1858 - PyCon 2018](https://www.youtube.com/watch?v=GuNoaAFnTPg) * [Raymond Hettinger - Dataclasses: The code generator to end all code generators - PyCon 2018](https://www.youtube.com/watch?v=T-TwcmT6Rcw) * [Shannon Turner - You're an expert. Here's how to teach like one. - PyCon 2018](https://www.youtube.com/watch?v=3m555yWTaNI) * [Colin Carroll, Karin C. Knudson - Fighting Gerrymandering with PyMC3 - PyCon 2018](https://www.youtube.com/watch?v=G9I5ZnkWR0A) * [Victor Stinner - Python 3: ten years later - PyCon 2018](https://www.youtube.com/watch?v=Aj3KMefwOqI) * [Justin Myles Holmes - Python across the USA: This is the Bus. - PyCon 2018](https://www.youtube.com/watch?v=tRp84BlFF94) * [Nicolle Cysneiros - Graph Databases: Talking about your Data Relationships with Python - PyCon 2018](https://www.youtube.com/watch?v=J8LvW-tyLRc) * [Nir Arad - Controlling apples with snakes: Automating mobile apps with Appium - PyCon 2018](https://www.youtube.com/watch?v=-ltFl1vbe6I) * [Miguel Grinberg - Oops! I Committed My Password To GitHub! - PyCon 2018](https://www.youtube.com/watch?v=2uaTPmNvH0I) * [Matthew Rocklin - Democratizing Distributed Computing with Dask and JupyterHub - PyCon 2018](https://www.youtube.com/watch?v=Iq72dt1gO9c) * [Larry Hastings - Solve Your Problem With Sloppy Python - PyCon 2018](https://www.youtube.com/watch?v=Jd8ulMb6_ls) * [Janet Matsen - Programming microbes using Python - PyCon 2018](https://www.youtube.com/watch?v=5lYWxjSitIg) * [Jack Diederich - HOWTO Write a Function - PyCon 2018](https://www.youtube.com/watch?v=rrBJVMyD-Gs) * [Esther Nam - One weird trick to becoming a better software developer - PyCon 2018](https://www.youtube.com/watch?v=IYWlfVqBQLc) * [Erin Braswell - Python Data Sonification for Science and Discovery - PyCon 2018](https://www.youtube.com/watch?v=3EXvR1shVFQ) * [Dustin Ingram - Inside the Cheeseshop: How Python Packaging Works - PyCon 2018](https://www.youtube.com/watch?v=AQsZsgJ30AE) * [David Beazley - Reinventing the Parser Generator - PyCon 2018](https://www.youtube.com/watch?v=zJ9z6Ge-vXs) * [Christopher Swenson - Colossal Cave Adventure in Python... in the browser! - PyCon 2018](https://www.youtube.com/watch?v=RojaWIoBfOo) * [Christopher Beacham / Lady Red - Visualizing Algorithms with Python and Programmable LEDs](https://www.youtube.com/watch?v=wJpUlnfwjbk) * [Carol Willing - Practical Sphinx - PyCon 2018](https://www.youtube.com/watch?v=0ROZRNZkPS8) * [Anna Nicanorova - Data Visualization in Mixed Reality with Python - PyCon 2018](https://www.youtube.com/watch?v=K94iCIy77pA) * [Amjith Ramanujam - How Netflix does failovers in 7 minutes flat - PyCon 2018](https://www.youtube.com/watch?v=iQI56-up3Yk) * [Amit Saha - Counter, Gauge, Upper 90 - Oh my! - PyCon 2018](https://www.youtube.com/watch?v=R4kMwckrUlg) * [Valery Calderon - Reactive Programming with RxPy - PyCon 2018](https://www.youtube.com/watch?v=I5AZ3rTR4Wc) * [Stephanie Kim - Exploring Deep Learning Framework PyTorch - PyCon 2018](https://www.youtube.com/watch?v=LEkyvEZoDZg) * [Sam Kitajima-Kimbrel - Bowerbirds of Technology: Architecture and Teams at Less-than-Google Scale](https://www.youtube.com/watch?v=0Z45gcIwwrQ) * [Philip James, Asheesh Laroia - All in the timing: How side channel attacks work - PyCon 2018](https://www.youtube.com/watch?v=dT2xjgUInhQ) * [Padmaja Bhagwat - Listen, Attend, and Walk : Interpreting natural language navigational instructions](https://www.youtube.com/watch?v=MJBWAkE7cEo) * [Nina Zakharenko - Elegant Solutions For Everyday Python Problems - PyCon 2018](https://www.youtube.com/watch?v=WiQqqB9MlkA) * [Nathaniel J. Smith - Trio: Async concurrency for mere mortals - PyCon 2018](https://www.youtube.com/watch?v=oLkfnc_UMcE) * [Jiaqi Liu - Building a Data Pipeline with Testing in Mind - PyCon 2018](https://www.youtube.com/watch?v=fRUCAt9WFpc) * [Brian Okken, Paul Everitt - Visual Testing with PyCharm and pytest - PyCon 2018](https://www.youtube.com/watch?v=FjojZxDZscQ) * [Allison Kaptur - Love your bugs - PyCon 2018](https://www.youtube.com/watch?v=HuuYwUxM-ZY) * [Saturday Morning Lightning Talks + Keynotes - PyCon 2018](https://www.youtube.com/watch?v=VJ0vibC_Hl0) * [Lightning Talks - Friday - PyCon 2018](https://www.youtube.com/watch?v=bTAFl8P2DkE) * [Amirali Sanatinia - Getting Started with Blockchains and Cryptocurrencies in Python - PyCon 2018](https://www.youtube.com/watch?v=_nSKR-lJjO0) * [Jake VanderPlas - Exploratory Data Visualization with Vega, Vega-Lite, and Altair - PyCon 2018](https://www.youtube.com/watch?v=ms29ZPUKxbU) * [Christy Heaton - Intro to Spatial Analysis and Maps with Python - PyCon 2018](https://www.youtube.com/watch?v=uRvTeK5Ndq8) 
* [Shohei Hido - CuPy: A NumPy-compatible Library for GPU - PyCon 2018](https://www.youtube.com/watch?v=MAz1xolSB68) * [The importance of exploratory data analysis and data visualization in machine learning - PyCon 2018](https://www.youtube.com/watch?v=zIcgCZl37tU) * [Liz Sander - Software Library APIs: Lessons Learned from scikit-learn - PyCon 2018](https://www.youtube.com/watch?v=WCEXYvv-T5Q) * [Kirk Kaiser - Birding with Python and Machine Learning - PyCon 2018](https://www.youtube.com/watch?v=938yg4udxSc) * [Julie Lavoie - Beyond scraping: how to use machine learning when you're not sure where to start](https://www.youtube.com/watch?v=BwC01zoSRBc) * [Irina Truong - Adapting from Spark to Dask: what to expect - PyCon 2018](https://www.youtube.com/watch?v=X4YHGKj3V5M) * [Debugging PySpark -- Or trying to make sense of a JVM stack trace when you were minding your own bus](https://www.youtube.com/watch?v=McgG09XriEI) * [Emily Morehouse-Valcarcel - The AST and Me - PyCon 2018](https://www.youtube.com/watch?v=XhWvz4dK4ng) * [Anna Ossowski - Flourishing FLOSS: Making Your Project Successful - PyCon 2018](https://www.youtube.com/watch?v=GmbaKdd6o6A) * [Andrew Godwin - Taking Django Async - PyCon 2018](https://www.youtube.com/watch?v=-7taKQnndfo) * [Amanda Sopkin - Randomness in Python: Creating Chaos in an Ordered Machine/Controlled Environment](https://www.youtube.com/watch?v=EGF4G2feXx4) * [Alex Petralia - Analyzing Data: What pandas and SQL Taught Me About Taking an Average - PyCon 2018](https://www.youtube.com/watch?v=DlgG0QdrqAU) * [Using Python to build an AI to play and win SNES StreetFighter II - PyCon 2018](https://www.youtube.com/watch?v=NyNUYYI-Pdg) * [Van Lindberg - Deconstructing the US Patent Database - PyCon 2018](https://www.youtube.com/watch?v=lk6FGg5RzAk) * [Stacy Morse - Code Reviews Using Art Critique Principles - PyCon 2018](https://www.youtube.com/watch?v=lpWvYxEW09k) * [Code like an accountant: Designing data systems for accuracy, resilience and auditability](https://www.youtube.com/watch?v=svcBO-OjYfM) * [Lisa Roach - Demystifying the Patch Function - PyCon 2018](https://www.youtube.com/watch?v=ww1UsGZV8fQ) * [Kelsey Pedersen - Augmenting Human Decision Making with Data Science - PyCon 2018](https://www.youtube.com/watch?v=hnSgIUA57hg) * [Justin Crown - "WHAT IS THIS MESS?" - Writing tests for pre-existing code bases - PyCon 2018](https://www.youtube.com/watch?v=LDdUuoI_lIg) * [Julie Qiu - Build a Search Engine with Python + Elasticsearch - PyCon 2018](https://www.youtube.com/watch?v=6_P_h2bDwYs) * [Julie Qiu - Strategies to Edit Production Data - PyCon 2018](https://www.youtube.com/watch?v=43NiFtbNg_s) * [Joyce Jang - Build Teams as an Engineer - PyCon 2018](https://www.youtube.com/watch?v=-9NpTeddWds) * [John Reese - Thinking Outside the GIL with AsyncIO and Multiprocessing - PyCon 2018](https://www.youtube.com/watch?v=0kXaLh8Fz3k) * [Jake VanderPlas - Performance Python: Seven Strategies for Optimizing Your Numerical Code](https://www.youtube.com/watch?v=zQeYx87mfyw) * [Hillel Wayne - Beyond Unit Tests: Taking Your Testing to the Next Level - PyCon 2018](https://www.youtube.com/watch?v=MYucYon2-lk) * [David Gouldin - import time_travel: A Primer on Timezones in Python - PyCon 2018](https://www.youtube.com/watch?v=CiegLU8ijFU) * [How we designed an inclusivity-first conference on a shoestring budget and short timeline](https://www.youtube.com/watch?v=C7ZhMnfUKIA) * [Chris Schuhmacher - Coding through Adversity - PyCon 2018](https://www.youtube.com/watch?v=dGz-K8x8k5k) * [Andrew Knight - Behavior-Driven Python - PyCon 2018](https://www.youtube.com/watch?v=EtIAbfCrsFI) * [Dan Callahan - Keynote - PyCon 2018](https://www.youtube.com/watch?v=ITksU31c1WY) * [Stuart Williams - Python by Immersion - PyCon 2018](https://www.youtube.com/watch?v=M5U9RwBJXiQ) * [Shauna Gordon-McKeon - Beyond Django Basics - PyCon 2018](https://www.youtube.com/watch?v=Fzlg95lrILk) * [Mridul Seth, Eric Ma - Network Analysis Made Simple: Part II - PyCon 2018](https://www.youtube.com/watch?v=MRCLwmYTVpc) * [Kevin Markham - Using pandas for Better (and Worse) Data Science - PyCon 2018](https://www.youtube.com/watch?v=0hsKLYfyQZc) * [Harry Percival - Intermediate testing with Django: Outside-in TDD and Mocking effectively](https://www.youtube.com/watch?v=tFalO9KdCDM) * [Chalmer Lowe - Statistics and probability: your first steps on the road to data science - PyCon 2018](https://www.youtube.com/watch?v=zzbw0JbiI6Y) * [Mariatta Wijaya - Build-a-GitHub-Bot Workshop - PyCon 2018](https://www.youtube.com/watch?v=ZwvjtCjimiw) * [Rizky Ariestiyansyah - When data meets education! The secret life of data in education - PyCon 2018](https://www.youtube.com/watch?v=8OoR-P6wE0M) * [Liana Bakradze - Learning Python like a Pro - PyCon 2018](https://www.youtube.com/watch?v=DG2AAhvh7nk) * [Using GitHub, Travis CI, and Python to Introduce Collaborative Software Development - PyCon 2018](https://www.youtube.com/watch?v=cxTXJ3N91s0) * [Anubha Maneshwar - Pycamp 2K17: A Disclaimer - PyCon 2018](https://www.youtube.com/watch?v=TcHkkzWBMKY) * [Meg Ray - Python for N00bs: A cognitive and educational approach - PyCon 2018](https://www.youtube.com/watch?v=rCZgroTno1w) * [Laura Jacob - GenZeal: A new generation of thinkers who design, develop, and distribute for tomorrow](https://www.youtube.com/watch?v=8mYlzEanNEY) * [Elizabeth Wickes - Hard Shouldn't be Hardship: Supporting Absolute Novices to Python - PyCon 2018](https://www.youtube.com/watch?v=KAPeaEJeuc8) * [Douglas Blank - Jupyter Tools for Teaching and Learning - PyCon 2018](https://www.youtube.com/watch?v=iAvoE9vjZuc) * [Devishi Jha - Teaching Python 101 - PyCon 2018](https://www.youtube.com/watch?v=s36GwDng904) * [Carol Willing - STEAM Workshops using Jupyter Notebooks, JupyterHub, and Binder - PyCon 2018](https://www.youtube.com/watch?v=BqJyaejvVjQ) * [Aly Sivji, Joe Jasinski, tathagata dasgupta (t) - Docker for Data Science - PyCon 2018](https://www.youtube.com/watch?v=jbb1dbFaovg) * [Wanjun Zhang - Coding as Enrichment: How to Empower Students with Creative Coding Experiences](https://www.youtube.com/watch?v=yN98sklnHSM) * [Nicholas Tollervey - Mu - How to Make a Kids' Code Editor - PyCon 2018](https://www.youtube.com/watch?v=T5IAf5vGGSk) * [Lightning Talks - Thursday - PyCon 2018](https://www.youtube.com/watch?v=fJj18KzomR0) * [Skipper Seabold - Introduction to Python for Data Science - PyCon 2018](https://www.youtube.com/watch?v=W4WQi2OIy7o) * [Ruben Orduz, Nolan Brubaker - A Python-flavored Introduction to Containers And Kubernetes](https://www.youtube.com/watch?v=kx-048qE-TI) * [Philip James - API-Driven Django - PyCon 2018](https://www.youtube.com/watch?v=w0xgJ5C9Be8) * [Harry Percival - Introduction to TDD with Django - PyCon 2018](https://www.youtube.com/watch?v=_rLPDxpXIFc) * [Eric Ma, Mridul Seth - Network Analysis Made Simple: Part I - PyCon 2018](https://www.youtube.com/watch?v=HkbMUrgzwMs) * [Allen Downey - Complexity Science - PyCon 2018](https://www.youtube.com/watch?v=F0uiLhZmtN4) * [Adam Englander - Practical API Security - PyCon 2018](https://www.youtube.com/watch?v=wXnvEzw4hHI) * [Melanie Crutchfield - Code Your Heart Out: Beginning Python for Human People with Feelings](https://www.youtube.com/watch?v=2Tg2gfzL_8s) * [Emily Xie - Making Art with Python - PyCon 2018](https://www.youtube.com/watch?v=u3d-n41Tobw) * [Josh Lowe - Invited Speaker - PyCon 2018](https://www.youtube.com/watch?v=TStuXnGfwVw) * [Jason Huggins - Keynote - PyCon 2018](https://www.youtube.com/watch?v=q-x7jK72E6E) * [Trey Hunner - Using List Comprehensions and Generator Expressions For Data Processing - PyCon 2018](https://www.youtube.com/watch?v=_6U1XoxyyBY) * [Tom Augspurger, James Crist, Martin Durant - Parallel Data Analysis with Dask - PyCon 2018](https://www.youtube.com/watch?v=_UWRQZ3nFm0) * [Stuart Williams - Python Epiphanies - PyCon 2018](https://www.youtube.com/watch?v=-kqZtZj4Ky0) * [Mike Müller - Faster Python Programs - Measure, don't Guess - PyCon 2018](https://www.youtube.com/watch?v=DGrS0uwMuHY) * [Ian Zelikman, Austin Hacker - Workflow Engines Up and Running - PyCon 2018](https://www.youtube.com/watch?v=kw0RL9LZk9s) * [Allen Downey - Introduction to Digital Signal Processing - PyCon 2018](https://www.youtube.com/watch?v=SrJq2AzXZME) * [Tania Sanchez Monroy - Down the rabbit hole. A 101 on reproducible workflows with Python](https://www.youtube.com/watch?v=VAXCrDrAPo0) * [Scott Sanderson - Foundations of Numerical Computing in Python - PyCon 2018](https://www.youtube.com/watch?v=aGGbnMyeZs0) * [Lights Camera Action! Scrape, explore, and model to predict Oscar winners &amp; box office hits](https://www.youtube.com/watch?v=XMtygcrqHqo) * [Moshe Zadka - Web Applications, A to Z - PyCon 2018](https://www.youtube.com/watch?v=XKoK9wJjSqY) * [Michael Herman - Going Serverless with OpenFaaS, Kubernetes, and Python - PyCon 2018](https://www.youtube.com/watch?v=zxcvyrhmjbc)
I would like to see the code, interesting!
Wrong sub. Sure, it can teach you stuff. But it won't teach you about how Python really works, or any language really. You might not learn about how to traverse directories or file paths because you're just using a web interface rather than using Python installed on your own machine or in a virtual environment for example. I think codecademy does have courses for stuff like that now though, like "sysadmin" type courses. There are also sites like thepythonchallenge.com (if I recall), or project euler. Also MIT, Harvard, and Stanford have excellent open courseware for CS. You can find videos of lectures on algorithms, or can access the actual coursework for free online. This would be much better in my opinion.
Bad bot.
Thank you, javelinRL, for voting on RemindMeBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Location: Shenzhen, Beijing, Shanghai Job Role: Middle/Senior Software Engineer (Python) Who we are: ruyi.ai, the AI company that focuses on NLP and knowledge graph applications. We provide a platform for the public to develop chat bots and connect them anywhere (wechat, robots, intelligent appliance, etc.) easily. Our aim is that everyone can make their own bots! We have offices in Shenzhen, Beijing, and Shanghai, and you are free to choose where you work. We are looking for Python developers, and we have work like PySpark data processing, data crawlers, system maintenance scripting, and NLP algorithms. You will be solving challenging problems and you will improve a lot working with our NLP or knowledge graph experts. We welcome full stack developers and we value problem solving skills more than specific language or framework. Requirements: 1. B.S. or M.S. (preferred) degree in Computer Science or related technical field. We actually welcome self-taught programmers but you need to show equivalent knowledge or experience, especially basic data structures and algorithm. 2. Practical experience of Python development: we want the candidates to know the Python ecosystem, common libraries, idioms, tools, and version control, etc. 3. Good communication skills. By the way, we use Mandarin as our main work language. But most of us can communicate in English. Contact: PM me (I will refer you if you are qualified) or send your resume to hr@ruyi.ai
Ghostscript is still pretty good.
I have a follow up question for this: x**2 or x**2.0 and why? On my machine x**2.0 is about twice as fast as x**2 What is going on!?
I’ve been on google and found videos but I’ve found that people on reddit have pointed me to things that really make sense, some stuff on google doesn’t do a great job and was looking for someone who had already been through this and had a good tut that really explained this in great detail but, thank you for the very obvious and unhelpful reply you shouldn’t have even wasted your time replying! 
It only teaches the very basics and does so slowly and methodically. However, my experience with it was as someone who already had some familiarity with programming trying to learn a new language. If you are brand new to programming, it's worth a try. Last I checked though, their Python course teaches Python 2 rather than Python 3, but it shouldn't be too hard to make the switch to Python 3 (probably the main thing you'll need to remember is that `print x` becomes `print(x)`). The /r/learnpython subreddit has a [wiki](https://www.reddit.com/r/learnpython/wiki/index) with more resources that you might find useful. The most engaging (and, perhaps, best) way to learn is just to jump in and work on a project that interests you.
Cython compiler, one that is commonly used to make binary extensions for Python compiles Python into C and then the generated C into native platform executable. So, if you want to compile your Python program, one way to do that is to change file extensions from `py` to `pyx` and run Cython compiler on them. A more interesting question to ask is why do popular implementations of Python don't compile it into platform-native code. Well, one reason is that it's hard, cumbersome, creates a lot of bugs, makes development in that language harder and more cumbersome too. While Cython can compile Python sources down to native code, the speed gains aren't usually worth the effort (this will save you the translation from bytecode to C callbacks implementing that bytecode, basically, but not much more). But, debugging will become a lot harder: where do you put a breakpoint? Say, you run your compiled program in GDB, you can put the breakpoint in generated sources, but... good luck trying to understand generated code. The above problem isn't specific to Cython. Any compiled language will have to make trade-offs between speed or space efficiency and how much diagnostic information is available to the programmer / how easy it is to find it. In C, if you debug it, if you are lucky that is, and the debugger was able to restore the stack of your program... and if you were even luckier in that you were able to find the sources for dynamically loaded libraries, and you compiled w/o optimization... you will get to the info you need, but this is because the debugger for C is an extremely complex and long worked on project. In Java you cannot have certain optimizations because it's hard to make debugging tools to work when those optimizations are performed. For instance, JVM will not do tail-call elimination because it would mess with the information about your program's stack. In other words, the ability to debug their code is more valuable to Java programmers than speed. In OCaml almost all useful diagnostic information is lost during compilation: this is the trade-off the compiler designers made to improve speed. ---- I'm not saying that this is the actual reason why CPython isn't compiled, but this guess is as valid as any (provided there is / was any actual reason and not just a random chance standing behind this decision).
If you can't find a: the correct python subreddit for this kind of question b: the correct reddit bot subreddits for this kind of question etcetera, how is anyone supposed to expect that you got off your ass to use google? I wrote a reddit bot as an exercise a couple of weeks ago without begging for help. I used google and reddit's search functions. Why didn't you? Don't be lazy.
I just watched the lead-in video on sentdex's website. The first question he answered: "how did you learn python?". Answer: google.
No escape from dependencies
why fix something that isn't broken? why did Guido not make 3 backwards compatible with 2, what an idiot
That's not an installer, ie. a `.dmg` file on Mac or an installation wizard on Windows...
Open your files, look up to the py and c...
That sucks, but thanks for letting me know.
Just a random project I knocked together: a persistence of vision scroller hacked into a Lucky Cat (Maneki-neko), powered by MicroPython running on a Wemos D1. The controller sets the speed of the arm, and creates a virtual display by flickering the LEDs on and off in time on each loop. The [code is available](https://martinfitzpatrick.name/article/lucky-spinning-arm-message-cat/#code). 
I'm slightly disappointed not hearing him say "There must be another way!" and knock on the table. So 99% perfect in my dictionary. 
Sooo, since this isn't cross-platform, then what benefits does it have over, say, pyinstaller? And it requires python to be installed on the target, which pyinstaller doesn't. If this was cross-platform, then it would've been a great half-way option between just raw source and pyinstaller. But as it is, I don't really see a use-case for it.
Thanks, but that gives the same result. Maybe depends on the version of python?
This does seem to work: import sys while True: s = sys.stdin.readline() if not s: break print s 
Hey great talk ! Thanks for sharing. I work in GIS and love anything with a spatial analysis component. I never thought of programming building analyses. Do you look at network analysis problems ? Like lunch time elevator traffic or hallways / restrooms after meetings get out. Is there a case study showcase on your site ? My friends designed their dream home a few years back and ended up with a staircase you hit your head in. Python could have saved the day !
3 hours. I guess I know what to spend my time on today. Thanks. 
Arabian windows xd
*This isn't XOR, boy, it has a Huffman tree...* 
https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_python.3F
[GIFV link](https://i.imgur.com/TBcplph.gifv) --- _^I ^am ^a ^bot. ^[FAQ](https://www.reddit.com/r/livven/wiki/gifv-bot) ^// ^[code](https://github.com/Livven/GifvBot)_
A persistence of vision scroller hacked into a Lucky Cat (Maneki-neko), powered by MicroPython running on a Wemos D1. The controller sets the speed of the arm using PWM, and creates a virtual display by flickering the LEDs on and off in time on each loop. [Full code &amp; build instructions available](https://martinfitzpatrick.name/article/lucky-spinning-arm-message-cat).
Does anybody else always think of BSG when they read pycon?
Very cool and very r/cyberpunk !!
These videos are perfect for when you're exercising. Mount your cellphone on a stationary bike, and sweat while learning :)
Bohemian Raspberry spotted !
or you can use my proposition LLameDL to download audio from playlist videos or download audio for videos in chrome bookmarks
Cool! 
But aren't zipapps cross-platform? It seems like shiv kills the reason I'd want to use zipapps for.
why do you need python? just youtube-dl "my url" ....and you got it
Read the sideabar. Post in the correct subreddit. We won't do your homework for you.
If you don't like the pace of Raymond Hettinger you should watch Larry Hastings talk on Sloppy Python
I'm going to make my first Flask web app. Any pointers on where to start?
I have checked out Graphviz just now,does it support color coding of the process and the movement of objects from one to another process ? Thinking about looking into Gephi as well as networkx 
I can't really find anything on "spin format", never heard of it either. Could it be known by a different name as well?
As already said asyncio would be huge imprivement. Also why not to create function to colorize output instead of adding colors manually using concatenation? Btw I hope you had great experience creating it.
You sir are a hero.
The way you resolve relative urls could be simplified a lot. I would recommend you look at what urljoin from the standard library can do for you here. 
i used tinydb for it. 
Sort of. Zipapps can't contain packages that use C\-code, because that's not cross platform. For me, shiv is really handy for deploying utility code in production servers. We've standardized on CentOS in production, so there's no cross\-platform requirement. 
[removed]
I think they haven't broken down the processes enough. Essentially more than a 5 step process, it's too low-level and in-the weeds. Get a tool that supports sub-processes and grouped processes, then drill down one level for those things. Also the moving graphics. Visually it's a distraction. Ask yourself what the goals are. Looking cool as 1 priority, or conveying information. We sadly have too many tools enabling the latter, and not enough enabling the former. At it's simplest each step in a process needs to know * Who (is performing &amp; is overseeing) * When (conveyed generally via order) * Why (business purpose of task, decision, summary of group) * What (controls &amp; standards) Then you can simply have 3 nodes * Action nodes, * Decision nodes * Subprocess / Grouping nodes Keep things simple and you'll probably find graphviz is more than enough. There are also wrappers like plantuml (admittedly Java, but is only a `subprocess.Popen` away)
might want to include a function or two to respect robots.txt
You say you need help but you're asking for someone to do your homework for you. You're not going to learn any lesson this way (i.e. time management, coding skills, commitment etc.)
Check if this can help https://networkx.github.io/
Not even an article..... Thank you, but if we want some top articles, reddit have a nice sorting feature to get top post over one month [https://www.reddit.com/r/Python/top/?t=month](https://www.reddit.com/r/Python/top/?t=month). No need to spam here.
Pygame is really simple. Lookup a youtube video
Fair enough.
Does it say "Hell"?
I think you mean this article https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5
Does it have any community behind it whatosever?
This cat is screaming for "help"; what have you done
Needed something like this, good work!
Yea that [pipenv talk](https://www.youtube.com/watch?v=GBQAKldqgZs) was nice. I'd heard of it but hadn't dove in at all. Composer(PHP) has been my reference point for a good solid package manager and Pipenv has pulled in some of the nicer parts of it.
Cat from hell! 
you don't need help making a simple animation, you need help learning to learn.
Try shooting in slo-mo? 
Teaching myself Django in my free time. Everyone who wants python seems to want master's graduates in data science or Django devs. And I like web dev anyway. Worked through the Django tutorial for the polls app, understand the way views work a little better now. Think I'm gonna build something small first and then work my way up. To do list -&gt; blog -&gt; web forum -&gt; web store. Then it's onto react because I don't know front end shit at all.
The certificate is invalid. Are you using some type of proxy like fiddler?
That's kind of the opposite of what I want :) ....shooting slo-mo takes more frames faster, that you can then play back at 30fps to appear slower. I need to take fewer frames, keeping the aperture open for longer to get a complete rotation of the display in a single frame.
[MyBridge AI](https://www.mybridge.co/) seems more like Artificial Stupidity, trying to guess the "top 10" articles for May when we're not even half-way through the month yet.
Honestly not sure, This is a work computer. How would I go about checking that? This is a summer job and Ive had python installed for about 3 days haha. 
I understand :) 
That's just fucking absurd, I love it.
Careful if the Maneki-Neko becomes sentient and start approaching you with a perpetually flailing arm.
Are you on macOS?
No, windows 10. 
Your work probably has a firewall(or other utility) that acts as a 'man-in-the-middle' between your work station and the internet. As part of that the utility usually replaces the SSL certificate with one that your company has generated. For a quick workaround you can try: &gt; pip install --trusted-host pypi.python.org install &lt;whatever&gt; A longer process to verify the issue: You can check on linux/mac(probably) by running this in the command line: &gt; openssl s_client -showcerts -connect pypi.python.org:443 Or likely through your browser by visiting `https://pypi.python.org/simple/xlsxwriter/` and using your browser to check the certificate(google can help you with your specific browser). Look for the issuer. [Here you can see](https://i.imgur.com/RAVKGBa.png) `DigiCert` mentioned several times. They're the issuer for the certificate used on `python.org`. If your certificate is being replaced you'll see some other name(likely your company's name). In that case you should contact your sys admin team for help. You CAN get your company's root certificate and add it into your local certificate store, but that's a whole 'nother thing. 
The problem with json, at least for me, is that it gets too crowded and messy. Its probably my problem tho haha. I will take a look at that spinx thingy as well. Thank you
It makes managing environments easy by integrating virtual environments with package installations, and locking dependencies. It uses the successful style of JS's yarn and Rust's Cargo. Re the buggy dependency resolver: That made it unusable for me until a few months ago, but seems to be working now.
I don't think there's a large community using it, or at least a centralized location where people discuss it. Have you seen the examples on git? They are fairly extensive https://github.com/google/or-tools/tree/master/examples
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [google/or-tools/.../**examples** (master → 0777e4d)](https://github.com/google/or-tools/tree/0777e4d12ff9b45397c3aa6bbe14fc72b19bf453/examples) ---- 
The punchline is that you can evaluate sequences lazily using generator functions using `yield` or generator expressions along with the itertools library: https://code.camdenreslink.com/dev/7-ways-to-create-sequences-in-python/
I don't think dealing with IPs is the problem, its more about "how to deal with ping" You have a couple of options: 1. os.system() 2. subprocess If you need detailed output you will want to use subprocess. If you just need to know if it was successful or not you could just check the return code of os.system() Examples: **os.system() method:** import os with open("list_of_ips.txt", "r") as io: ip_address = io.readline() ret_code = os.system("ping -c 1 " + ip_address) if ret_code == 0: print("Server is up!") else: print("Server is down!") **subprocess method:** import subprocess with open("list_of_ips.txt", "r") as io: ip_address = io.readline() # subprocess.communicate returns a tuple of stdout, and stderr out_data = subprocess.Popen(["/bin/ping",ip_address],stdout = subprocess.PIPE).communicate()[0] # out_data is the output of the command in string form. if "Reply" in out_data: print("Server is up!") else: print("Server is down!") There are probably other ways of doing it too, maybe there is a ping module. I haven't checked. Disclaimer, I haven't tried to run any of this code, this is all of the top off my head.
I need this. Thank you so much for posting the full build details.
maybe poetry just a tidbit young, as it reaches cruise speed, it'll be more recommended !
[removed]
Lol 2 hour old account with only 1 post... smells like /u/SDisPater's alt. 
I just made a simple url\-shortner. Check it out at : [https://github.com/gurraunaqsingh/nikka\-ja](https://github.com/gurraunaqsingh/nikka-ja)
Try the --trusted-host parameter on pip, specifying the host you're downloading from.
Al is without doubt one of the pillars of the Python community.
Hi! I understand why you would think that but no, it's not me. I already raised my concerns about pipenv and why I started poetry before so I don't see a point in doing it again. I don't see why anyone expressing doubts regarding pipenv, or preferring poetry, or other tools like flit, over it would be necessarily me. But I understand why people would ask this since poetry has been gaining traction lately and more and more people are recommending it (at least that's what I have seen on Twitter). But thanks for thinking that the only person that would want to recommend poetry is me, that's pretty telling about the esteem you have of me or the project.
Ok thanks, Ill contact the IT guys and hopefully we can come up with a solution. I appreciate your help though . 
There's something called [`RebPDB`](https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html) by the PyPy team. I've never used it personally so I cannot vouch for it.
So I'm currently watching the pipenv talk and got to half of it. The author talks about that python not having a lock file. Mentions that there are two requirements "what you want" (Pipfile) and "what you need" (Pipfile.lock). The problem is that Python does have the lock, it is the requirements.txt file he mentions about it as well, but proceeds to show why it is not good by using it as "what you want" dependency. He never mentions about install_requires (and also additional tests_require, extra_requires, setup_requires for extra flexibility) which is the true "what you want" requirements, despite that his own requests package is using them (you need to specify it to have a proper PyPi package). I almost feel like he started the project without understanding first what he was trying to solve was already solved. He learned about it later but now doesn't want to admit he was wrong? In your package all you have to really do is define those parameters in setup() to list dependencies for your project, then to have a reproducible build you just call pip freeze &gt; requirements.txt in your devint environment and use that file to promote packages to qa, staging and prod.
A decision like this is never fully technical and much of will down to personal preferences by the decision makers. 
I think an article with this content is more suitable for /r/learnpython. There are some good knowledge for beginners, but really any experienced Python user should already be familiar enough with iterables, that this is known stuff. Also, you have left out at least one other way. 
And I cant even get my maneki neko to keep waving lol
Depends what module you are using to scrape the websites. If you use one that lets you set a user-agent, the website shouldn't be able to tell.
It's terrible. I am not even convinced that the "Python Packaging Authority" is an authority at all. The documentation on that site is atrocious, it's inconsistent. It's not *nearly* opinionated enough. The layout is bad. The tools (pipenv) are bad, buggy and still too new. I can't even believe that this is happening (pipenv) to be honest. Makes me realize how a decentralized approach to package management is a complete and utter disaster. PEP's upon PEP's. No input from Guido that I've ever read... I don't understand it.
They must be able to see other stuff than just user-agent right? Cant they see mouse movements, which site i just came from, what cookies i have. Shit like that?
You're running user input through md5 and hoping your best you won't get a collision. That's a bad hope. I'd suggest that you don't hash the url, but _generate_ a unique token that you represent in some way. I'd then suggest that you use a version of zBase-32 to represent this unique random thing: https://en.wikipedia.org/wiki/Base32#z-base-32 If you pick a random 128 bit integer, represent it as z-base-32, you'll end up with a decently short string that is not user controlled, and that you can quickly decode/encode and look up in your database. 
I'm still learning about these techniques, will definitely look into zbase32 and make some changes. Thanks for sharing this!
It is likely an SSL intercept at work. I have this BS all the time. You need to talk to IT and get the http(s) proxy address and then use that in pip (google how). On my mac, I set it in my `.bash_profile` but not sure about in windows.
Thank you for the feedback. I'll post it on r/learnpython. Btw, what is the way that I left off?
Project has 4K+ commits, 200+ releases and hundreds of contributors. Written by Kenneth Reitz is not a small thing. People follow authors of good, solid and popular packages more than new comers. It fixed a bunch of pip easy_install venv requirement.txt issues that were bothering people. I'll take something everyone uses but has warts than something newer and better but has less contributors and mindshare when it comes to dependency and packaging management. &gt; Buggy dependency resolver. Is that a specific bug or a design choice. As in it helps in some other way. If it is a bug, make and issue and maybe pipenv will fix it.
Addition of two iterables. 
&gt; It makes managing environments easy by integrating virtual environments with package installations, and locking dependencies. You know that we've had this thing called virtualenv, that have integrated with pip since the day after the last mastodon died? 
Virtualenv is not coupled with pip in the way pipenv is; it doesn't lock dependencies; most guides recommended using it with a wrapper that doesn't work in Windows.
It's not "python downloading something". Python is a programming language, and python.exe is the interpreter for that language on windows. It's *something written in python* downloading stuff on your computer. It could certainly be some piece of legit software performing an update -or- it could be a virus. Nobody here knows what stuff you have installed on your computer, or what languages that stuff was written in.
You know that it's extremely bad form to change a post after it have been replied to, without noting that it is in fact edited? 
Me too. When I was using Linux, it seemed to work ok. But at work on Windows, holy hell. It was buggy AF. Maybe they fixed most of the major kinks? Also, the pipfile lock process took forever too. I also noticed that when using miniconda, it takes longer to install packages and it seems they changed how it install packages behind the scenes, I think perhaps they went the similar route with pipenv. I've gone back to just using venv + pip for now until the dust settles.
To be honest. I am asking that myself. I am far away from being convinced by pipenv and really surprised, that everyone is talking about it, tutorials everywhere. Last problem: I have a package in development in a private git repo. Installing directly from the git url is no problem, but there is no chance to update via pipenv update. It's just not working. Even with editable flag enabled.
To be honest. I am asking that myself. I am far away from being convinced by pipenv and really surprised, that everyone is talking about it, tutorials everywhere. Last problem: I have a package in development in a private git repo. Installing directly from the git url is no problem, but there is no chance to update via pipenv update. It's just not working. Even with editable flag enabled.
Yes. I'm going through the list of changes to make for the 2nd edition of Automate, and I'll be updating the OpenPyXL video when I do. Also, I'll be stressin which version to install so that the backwards-incompatible changes that OpenPyXL makes won't affect the tutorial.
Nice project. I'm currently diving into python, and I'd like to contribute to your project bat the lack of documentation makes it a bit difficult :/
I think ou can right click and click properties or something and see the process that is running\(not sure, running linux atm\). Then you could open that script in notepad or something and see what it does.
The Pipfile specifies your intended dependencies. The lock file specifies the versions and hashes for those modules and their own dependencies. The difference between that and freeze is that it won’t include out of band installs (e.g. VS Code installs its support tools in the virtualenv) and in a year you’ll be able to know which modules are intentional which are orphan dependencies which you don’t need any more. 
I don't really need any contributions. It's technically finished as is, and I want to add anything else by myself on my own free time.
I would recommend [pyOCCT](https://github.com/LaughlinResearch/pyOCCT) over pythonocc, personally, but I'm not sure either is really the right tool for OP's job.
When was the last time you tried pipenv on Windows? The major fixes (anecdotally) that moved it from broken to working happened around January. The slow locking's a bummer. Hopefully they fix it soon. [Relevant thread] (https://github.com/pypa/pipenv/issues/356)
https://i.imgur.com/1x0jS7N.gif
Everytime I am reading from you, no matter if it's here or in the issues of your repositories, you are offended as fuck.
I think there is a widespread misunderstanding of what pipenv is and what role it’s designed to serve due to the biases that we, as Python developers who are intimately familiar with how the ecosystem works, carry with us. It’s the “[curse of knowledge](https://en.m.wikipedia.org/wiki/Curse_of_knowledge)”. When I first started using pipenv, I didn’t really see the point. I already had pip to install packages and virtualenv to manage isolated environments, so why would I need pipenv? The truth is, I *didn’t* need pipenv. I had already worked my way up the knowledge curve and knew how everything worked, so I didn’t have a problem with it. New developers *do* have a problem pipenv solves. The depth of knowledge necessary to develop and deploy projects is substantial, and pipenv provides a powerful and very complete abstraction over almost all of it. I spend a good amount of time mentoring new developers and introducing them to both programming in general and Python in particular. I now recommend and teach pipenv exclusively, over using pip and virtualenv. It eliminates a significant barrier to people that don’t have our depth of experience and knowledge of the ecosystem, and allows them to conform more closely to current best practices _without even being aware of their existence_. As a community, we profess that we want to be open and inclusive. Pipenv’s approach goes a long way toward reducing the impact of the “[pipeline problem](http://geekfeminism.wikia.com/wiki/Leaky_pipeline)” and therefore is a powerful tool toward achieving those ideals.
Non-Mobile link: https://en.wikipedia.org/wiki/Curse_of_knowledge *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^182383
Conda has a lot of overlap with the goals of pipenv, but it serves a different set of needs - in particular, the distribution of binaries. If the problem you’re trying solve is “how do I create reproducible environments, quickly, that include complex dependencies that are not written in pure Python”, conda is the tool of choice. If your problem is “How do I create and manage isolated environments for Python projects”, pipenv is the tool of choice. Sure, there’s probably opportunity to reduce duplication and factor out some common functionality into one or more separate libraries that could be shared between the two, but both of those projects are still rapidly growing and adding new features. The time for refactoring and optimization is once they are more mature and contributors can focus on reducing the ongoing maintenance burden. Right now, their time is much better spent implementing new features and exploring the problem space through discussion and interaction with the communities they serve.
Ok I have to give my point of view about this. &gt; The negativity coming from the Poetry community is in extremely poor taste, in my opinion Please don't include the whole community into this. Those are isolated point of views and do not represent the the opinion of the community as a whole. And to me, this post is a reasonable question. Maybe, not put in the best way possible but still a valid question, especially regarding the packaging aspect of pipenv. And, come on, coming from you and some of the interactions I have seen on the pipenv issue tracker I wouldn't say the pipenv community is welcoming either. So let's not go there. &gt; the resolver taking 1+ hours Yes that's an issue, but a very limited one on an extreme case. The poetry's resolver is much more accurate than the one provided by pipenv. &gt; Poetry is not ready for production use Maybe, but neither is pipenv. You can check its issue tracker to see the issues people have. &gt; I emailed Sebastian a few weeks ago and asked if he wanted to collaborate and potentially merge projects (he declined) This is false. Here are some of the things I said: &gt; I agree that joining forces could help improving things towards a standardised tool. However, I am not sure the philosophy behind pipenv and poetry are the same. &gt; Also, merging the two projects, if that were to happen, would require a lot of work on both parts since the codebase of both projects are drastically different. &gt; Now, I am not against the idea of joining effort in the absolute but it would require some middle ground between the two approaches to make it work, I think. Kenneth and I have strong opinions about what good interfaces should look like so I think something good could come out of it, so I am open to discuss it further. So I never declined, no. &gt; Pipenv has received 170,000 downloads in the last 30 days. Poetry has 7,000. The is an order of magnitude difference in the level of user interaction and service we are dealing with in our issue tracker. It's a much more mature product. Which is expected for a tool that is more than a year old vs a 3-month old project. That being said, I agree this is not a competition but merely attempts at solving a hard problem. And joining forces is possibly a way to go for both projects. I am hoping one tool emerges from all of this so that we have a community standard like many other languages do (cargo/Rust, composer/PHP, bundler/Ruby). And, in the end, the community will choose. We, as maintainers, can only build something we think is good and intuitive. This is not our role to make a much larger community decide what they must use but merely guide them towards all the alternatives they have.
OP: "Here are the problem I see with pipenv being the official packaging tool" [list of legitimate issues and questionable design decisions that should probably be discussed] You: Screw you guys, I'm going home!
What we need is a solution that actually solves packaging and distribution... not another more convenience wrapper which just adds another layer and hides more complexity without actually reducing the complexity of packaging and distribution. We now have: * distutils * setuptools * pex * shiv * pip \(built\-in\) * pip 3rd\-party * pipenv * pipfiles with pipfile.lock * requirements.txt * cookie cutter * pew * vex * poetry * virtualenv * virtualenvwrapper * venv It's getting much worse \- not better. The internal churn within pip also is not community driven as much as it is developer driven. It's like we didn't learn from the debacle of python3 vs 2.
Pardon me, but isn't that just another way of describing the difference between installing the dev requirements or the runtime requirements? In my development environment, I want the development stuff installed at all times. I don't give more than perhaps a few atto-fscks about what is installed in my development setup. Testing happens in a pristine environment each time anyway, and with npm creating artifact directories in the GB range, disk space has become pretty cheap. In my runtime deployment, autopep8 will never be installed. So again, it seem to be a solution looking for a problem that don't really exist. 
&gt; Please don't include the whole community into this. The entirety of the problem that I see with this is that I *perceive* that there is a vocal minority of voice in our community that seem to trying to create a rift. It’s plain to me that I’m not the only one who perceives this, based on the several other comments in this very thread that point out that many of the adversarial posts are from very new users with very few posts. I do believe this is a community issue; or more precisely, that this has all the makings of becoming a community issue. We say we strive for inclusivity, but the loudest voices right now are being anything but inclusive. That is a _community_ problem.
You can still fork it and work line by line. I'm not sure why OP posted here with the github link if he didn't want people making use of his code. It's a simple project with poor design choices though, I'd suggest looking at how he got things working and redesign it. 
oh didnt read properly...i m using qutebrowser that does it on default so didnt think of it
In my opinion it's \*much\* more important for a standard to emerge sooner with good\-enough tools rather than later with perfect tools. You can make a list of bad points about every tool in existence. However, as someone who isn't following this space very closely, I'd like more explanation of a lot of the things listed.
But it's not a packaging tool at all. That's why I don't understand why it is advertised as one.
It is concerning that you can't handle a post criticizing your software. OP was extremely mild, and you go calling an entire community in poor taste? Address his points or don't reply.
My intention was not to be negative. Not in a wrong way at least. I just don't understand why pipenv in particular has been endorsed by the PyPA while there were and still are other tools that do the same thing.
As you understand it, what problem does pipenv solve?
I was totally unaware that either of these tools existed until just now, and I have to say I'm really disappointed in the amount of vitriol and snarkiness I'm seeing. People need to set their egos aside, assume good faith, and evaluate alternatives on their merits.
I’d also go beyond new developers to include new/small projects. I’ve been using Python for a long time and have been slowly migrating so everyone on every project has a single thing which works well and doesn’t require remembering a bunch of ad hoc conventions. 
&gt; Pardon me, but isn't that just another way of describing the difference between installing the dev requirements or the runtime requirements? Nope - at least, that’s not how I see it. Dependency locking is important for security. The lockfile includes a hash of the source that the developer downloaded during the development process. What happens if the next time you download that source - when you’re deploying - the source has changed? What if it now includes malicious code? At one point, PyPI would allow a package maintainer to overwrite the same version of a package with an additional upload. It doesn’t now, but there’s still the possibility of MITM attacks through techniques like DNS poisoning. It’s particularly important when you’re relying upon non-PyPI sources. It’s not uncommon to find a fork of an abandoned package on GitHub that solves a problem that you have that’s not released on PyPI. The lockfile protects you from having that source replace that “known good” code with code that might break in unexpected or potentially malicious ways. In short - the lockfile’s purpose is to ensure reproducible deployments without having to bundle all of your dependencies.
Hey folks, [Thea](https://thea.codes) from the Python Packaging Authority here. The question here is an important one, but I am so disappointed with how negative this discussion has become. This is not the Python community that I'm proud to be a part of. We have to do better. I want to draw attention to the fact that *everyone* who is a part of PyPA is a volunteer and there are *no* qualifications other than spending your time. We are a loose collective who all want to make packaging better. We value feedback but we are so short on hands. If you want to get involved but don't know where to start please feel free to reach out to me personally - my email is on my website and [github](https://github.com/theacodes). So let's talk about Pipenv and packaging.python.org. First of all, Pipenv is *not* the *only* recommended tool that we talk about on packaging.python.org. It's not even the *first* one we talk about. Pipenv is recommended specifically for dealing with application dependencies. It's not recommend (or even designed for) dealing with library dependencies or to be some magical panacea to solve the universe of Python packaging. Adding Pipenv required a lot of [discussion](https://github.com/pypa/python-packaging-user-guide/issues/118) and [testing](https://github.com/pypa/python-packaging-user-guide/issues/373). We were extra careful not to remove or discourage the use of `pip` and `virtualenv`. We wanted to make sure that users who have the clear, well-defined use case that Pipenv solves don't have to worry about other tools, but those that do not have that use case are not confused and lost. If there's a way we can make this clearer to users, please file an issue on the user guide so we can start talking about it. I want to call out we want to integrate the excellent [Packaging Gradient](https://sedimental.org/the_packaging_gradient.html) post into an overview that helps users find which tools are most relevant to their use case. It's also worth noting that we are not intentionally excluding any projects here. We are actively keeping an eye on new projects including poetry, [flit](https://github.com/pypa/python-packaging-user-guide/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+flit), and [hatch](https://github.com/pypa/python-packaging-user-guide/issues?utf8=%E2%9C%93&amp;q=hatch+) to figure out when and how we should include them in the guide. For the most part the only thing keeping them from being in there is someone writing a pull request to add them. Note: I am about to get on a flight, but I will happily answer any questions here, over email, and on github when I get back on solid ground.
It's called a "sane reasonable default". Other libraries are also documented (pip-tools, hatch; see below). Send a pull request to add Poetry, when it's ready! https://packaging.python.org/tutorials/managing-dependencies/#next-steps
* separating dev and project dependencies in a consistent way * lock files to keep dependencies of dependencies out of the main requirements * providing one of the first implementations of Pipfile * abstracting away venvs * reducing the number of tools someone needs to know or install to get up and running
In your opinion, do the scenario you describe actually reflect what you'd call a sane deployment workflow? If so, that might explain why you see the implicit magic as a bonus. There are at least two termination worthy offences for me in what you describe. * Deployment to a new platform without proper tests and platform lockdown. Having something double guessing that is just a pain. * Developing for something that isn't a deployable target. 
To be clear — this appears to be systematic. This past week, in particular, the Poetry community has been making many aggressive comments towards Pipenv and this post was "the straw that broke the camel's back". Hence my reply. Also, please don't tell me what to do. 😉
Then send a fake referer with every request and pretend to be a search engine user who just found the site 
&gt;To be clear, this is not a fucking competition. Stop treating it like one. &amp; &gt; These are just statements. I have no real point in posting this, other than to say — seriously, stop making this a fucking competition I'll stop if you will. 😉 
To be clear, my intention is not to respond to your post in a vacuum; I’m responding out of my concern for the health of the community as a whole and for new developers in particular. I’m not a part of PyPA, though I do intend to become a contributor on projects under their umbrella in the immediate future. I can’t speak for them, but from my perspective I don’t see their endorsement of pipenv as a slight toward alternatives. I’m of the opinion that pipenv solves multiple very real problems and is objectively better than way we’ve done things to this point. I think PyPA’s members feel the same way in that respect and that’s why they’ve chosen to endorse it.
Your reply conveys what I’m trying to say more clearly and succinctly than my own.
Again with that. Except this post I am not aware of other "aggressive" comments. And you talk about an aggressive community Note that I don't consider this post agressive. It's a legitimate question for someone discovering both libraries just now.
Can you define “packaging tool”? It seems like we’re coming at this from different perspectives. I see “packaging tools” as encompassing both things that help developers create and release packages and things that help developers use packages in their own projects. Pipenv is focused on the latter, and the former is completely outside the scope of the project.
wouldn't really call this *positive*. saying that it's poorly designed and has a bad user experience is rather unhelpful. if you could provide examples of that it could at least be constructive, but best if you would us a PR or GitHub to communicate that. posting something like this on here gets this reaction, every time. but you probably knew that.
Okay thanks! I don't need to be using pipenv right now... but as soon as I get working on something where I need to declare dependencies I'll be sure to look into it then. I haven't looked at pew - I'll take a look now. I feel comfortable with virtualenv right now though so I might be a bit stubborn in switching
Please see my [post](https://www.reddit.com/r/python/comments/8jd6aq/_/dyzduci) detailing how PyPA goes through the process of adding tools to packaging.python.org.
Thanks for being a voice of reason in this thread of drama. You remind me of the reason I decided to jump into python. The sane and welcoming community. Have a safe flight. 
I have not heard about poetry until now. Still I'm very negative (and you have just managed to increase that negativity) towards you solution in search of a problem. Thank you for being such an arrogant twat! 
Maybe it's because I'm on mobile, but your code is not formatted.
The discussion wasn't negative two hours ago. The I came back to see that a whole lot of brigading had suddenly happened. If you seriously want me to believe that it's in the best interest of the Python community to let shit like that happen, I'm disappointed. 
Wow. Just...wow. I realize there's a lot of stuff you're dealing with in the background that most of the python community doesn't see, but this post is incredibly off\-putting.
Is everyone tired and cranky from staying up to late during PyCon? This kind of feels like the angry people from /r/java. We don’t have to be angry like them. We get to use Python. 
Thank you for your kind words.
https://github.com/pypa/pipenv/issues/1137#issuecomment-352637875
Thank you for providing a diplomatic response. I appreciate the time you took and your approach. I didn't realize there was so much hostility in this one area of the python community. What do you think we could do to try to put out this fire before it gets out of control?
To be honest this is the first I'm hearing of any of this. I don't know the solution, but I am more than open to discussing any ideas that y'all have.
I genuinely want to help and make sure that everyone here feels heard, but I have to be honest that I really don't have anything to do with any brigading and I don't know what you expect me or the PyPA to do about it. Would it help if I reach out to the mods here on your behalf?
Thank you. You can be too... open dev tools for a youtube channel and type in this javascript (completely safe - though you should not run arbitrary js in your browser - so read it before your copy paste. To be safer, open youtube in incognito/private browser window and then run it in devtools) res = document.querySelectorAll('ytd-grid-video-renderer') res.forEach((t) =&gt; console.log(`* [${t.querySelector('a.ytd-grid-video-renderer').text} (${t.querySelector('span.ytd-thumbnail-overlay-time-status-renderer').innerHTML.trim()})](${t.querySelector('a.ytd-grid-video-renderer').href})`))
&gt; Any recommendation would be appreciate it. Hate to type this as it can come across as rude quite easily... just want to say that its "would be **appreciated**".
I believe that to be considered an "authority" in the Python community, you have to carefully explain the history, the team, the knowledge, the goals, etc. Right now it looks like someone (pipenv project, would be my guess) randomly put a website together called "python packaging authority" and called it a day. I LOVE the idea, but you have to find a way (through writing!) to convey to users that you're not just repeating mistakes of the past. And as a second point: your third paragraph about pipenv is exactly why I believe the PyPa site fails in it's mission: it needs to be more cohesive, more opinionated, and the tools must be unified. Otherwise the message is just as confusing as it's always been. ps; everyone is grateful for your work, don't be discouraged by people's frustrations: that's the whole reason the project exists, and why it's so important.
If my memory serves me, it was last November is when I tried pipenv at work. I will eventually use pipenv when the slow install bug gets fixed. I am not part of a development team and with .whl formats widely available for Windows, I've been pretty happy with just venv\+pip so far.
I thought it said "Help". I thought op had created an ai cat that just wanted to die.
Some points. 1. Packing is one of Python's warts. So there's just going to be negative feedback. I think you have to accept that, given the domain. Probably the other major wart with Python is its relative performance to c/c\+\+/rust for cpu bound and/or concurrency. 2. Critical feedback for pypa proposed solutions feels super ignored and shutdown in github; responses are things like: we've decided this in the pep. As an average community member, I never had an opportunity to discuss the pep. And then discussion is shut down thereafter. If all y'all actually want a discussion, make that a priority and don't accept the echo hall bubble. 3. Additionally, one of Python's major advantages is one preferred method of doing things. But packaging and distribution has had a long history and today's story appears incredibly fractured. It's really clear that the fracturing is a result of \_not\_ addressing problems. And I think that fracturing is accelerating. Worst case, in a few years, python's packaging will look like javascript's ecosystem. Best case, python's packaging will perform like Rust's cargo.
I remember yours, your talk and your slides were great!
The problem I have with Pipenv is that ot doesn't respect the pip configuration file. I work behind a proxy and the "proxy"-configuration parameter is vital to me. Additionally it's feels very slow where virtualenv/pip are fast. 
Better list view of videos \(without truncated titles\) [https://www.youtube.com/playlist?list=UUsX05\-2sVSH7Nx3zuk3NYuQ](https://www.youtube.com/playlist?list=UUsX05-2sVSH7Nx3zuk3NYuQ)
&gt; If that's not welcome anymore, than I'm packing up my bags and going home — because whatever community this type of post, with this tone, comes from — I don't want to have any part of it. I personally feel this is the crux of most of these matters. If people could be a bit humble, ask questions and state opinions in a manner that was not like children calling each other names, we would all benefit greatly.
So an API is just a way to call an action on a server -- like storing/viewing data in a database or calling a function. I trained and setup RandomForest model on a server. In order for a web-based "calculator" or charting visualization to "forecast" it uses the function living on the server.
Are there reasons people using Anaconda and its environments should be interested in pipenv (or virtualenv or pew)? Are these alternatives to Anaconda's environments, or can they work together?
&gt;As an average community member, I never had an opportunity to discuss the pep. FYI anyone can subscribe to the python\-dev mailing list and participate in the discussions on PEP proposals. It's not like this stuff is happening behind closed doors.
I'm working on a small project for the law firm that my wife works for while I try and find an internship for the summer. One of the tedious tasks that the attorneys have to do is take a .docx Word file and copy/paste certain parts over to another Word file and make slight changes. I'm working on a tkinter GUI program that will let them select all the files they need to process, and it will generate the new files instead of them having to spend hours copying things over. Once I get the simple Python version working, then I'm going to port everything over to C\+\+. The hardest part so far has been that the only 3rd party module I could find to work with .docx files \(python\-docx\) has some limitations like not being able to read/edit the headers or footers... so I'm having to use it along with writing some new functionality for it. Since [python\-docx](https://github.com/python-openxml/python-docx) is on Github, I was thinking it might be a good open source project to contribute to as a summer project.
I can receive, but I don't think I can post.
\&gt; For example: vex, pipenv \(which uses pew\), pew itself &amp; virtualenvwrapper are simply abstractions for managing virtualenv. I think my point here still remains. Why do we have multiple tools to do the same thing in almost exactly the same way? We should have one preferred toolset.
Sure you can post as long as you stay on topic and following the guidelines https://www.python.org/community/lists/ &gt; Anyone can subscribe to python-dev, though your subscription will have to be approved, resulting in a delay of a day or two before you start receiving e-mail. The list address accepts e-mail from non-members (after a delay in moderation, so subscribing is a Good Idea), and the python-dev archives are public.
I got this working, the correct if statement was if (line.find(host) and line.find("succeeded!") &gt; -1) or (line2.find(host) and line2.find("succeeded!") &gt; -1): 
&gt; I believe that to be considered an "authority" in the Python community, you have to carefully explain the history, the team, the knowledge, the goals, etc. This is documented here: https://www.pypa.io/en/latest/ but tl;dr: PyPA was formed quite some time ago as a collaboration between the PSF Packaging Working Group and third-party developers. &gt; And as a second point: your third paragraph about pipenv is exactly why I believe the PyPa site fails in it's mission: it needs to be more cohesive, more opinionated, and the tools must be unified. Otherwise the message is just as confusing as it's always been. "Fails in its mission"? Can you expand on that? Our mission isn't necessarily to find or build the perfect end-all solution to packaging, it's to make it better one day at a time with the resources we have. If there's a way you think we can do better with what we have today then let's discuss that - file an issue on github or email distutils-sig and let's get the conversation started. &gt; ps; everyone is grateful for your work, don't be discouraged by people's frustrations: that's the whole reason the project exists, and why it's so important. Thank you!
&gt; Packing is one of Python's warts. So there's just going to be negative feedback. I think you have to accept that, given the domain. All of the volunteers in the PyPA are well are of that - we wouldn't need a working group or an extension of that if packaging were perfect! I think that what's difficult is that there is absolutely no solution that anyone has come up with that solves everyone's use case in Python. We're tried to be really careful to document the use cases and the tools that suit those cases. &gt; Critical feedback for pypa proposed solutions feels super ignored and shutdown in github; Please send me any examples of this you see - directly to my inbox (me@thea.codes) or just cc on github (@theacodes). &gt; As an average community member, I never had an opportunity to discuss the pep. And then discussion is shut down thereafter. If all y'all actually want a discussion, make that a priority and don't accept the echo hall bubble. As another replier mentioned, python-dev should be open - but packaging related PEPs are always discussed in distutils-sig beforehand. I really encourage you to participate there and let me know if you have any trouble or questions. &gt; It's really clear that the fracturing is a result of _not_ addressing problems. If you think there is a way we can do this better with the resources we have, or if you know of a way to get us better resources, we would love to hear it. Shoot an email to distutils-sig and let's start talking.
full stack python was pretty good to me way back when https://www.fullstackpython.com/flask.html
You gave a great talk.
Thank you for your feedback - would you mind expanding on a few things here? &gt; The documentation on that site is atrocious Could you file bugs referencing specific sections/pages you find "atrocious"? There is *lots* of work to do on the distributing side of things. It would also be great if you were willing to submit pull requests - I'll be happy to review them. &gt; it's inconsistent. Would also love any bugs/PRs to fix inconsistencies. &gt; It's not nearly opinionated enough. We have to be careful about this. I recently re-organized the docs to allow some clear separation between were we can be opinionated and where we have to be neutral. See https://packaging.python.org/contribute/#documentation-types &gt; I can't even believe that this is happening (pipenv) to be honest. It's happening because you have a handful of volunteers doing the best they can with what they have. If you aren't happy with our direction, then I encourage you to get involved. I would be more than happy to help guide you through that - feel free to reach out to me. All of my contact info is on [my website](thea.codes).
I've got one preferred toolset, virtualenv + pip + requirements.txt
On the mobile Reddit app it's just a giant wall of text
One guy makes a post about adopting poor standards and now the whole python community is negative? Come on, really?
One guy makes a post about adopting poor standards and now the whole python community is negative? Come on, really?
As always cool stuff from Keneth. Python world would be different without him. 
Thank your you for your polite and edifying comment!
Anaconda is *very* different to pipenv. Does pipenv handle compiled non-python dependencies? Does pipenv bundle personal package repos?
&gt; Why do we have multiple tools to do the same thing in almost exactly the same way? Because different people have different opinions and workflows and it's very subjective. That's why abstractions are good! &gt; We should have one preferred toolset. Why? I think we should have one _specification_ for how packaging should work. PEPs are very good at this, but implementation can be left up to the community.
Best comment in thread.. Not enough salty for my popcorn tho
\&gt; Why? You don't move forward by rebuilding the wheel.
&gt; that is able to fuck up everything on your system in numerous ways by being on the PATH or LD_LIBRARY_PATH. Organize your path better or don't put it on the path. It still works. &gt; Use your system package manager I'm on Windows. I don't have one. &gt; if something isn't available through it, use things compiled against your system libraries I'm on Windows and can't because I don't have system libraries. Anaconda is a godsend.
Yup, Anaconda is tremendously different, it is everything and the kitchen sink. And pipenv does actually support local packages with the -e flag. It provides a huge reduction to the barrier of entry, but the internals of it replicate some of the aspects of pip, pipenv, ect. 
“termination worthy”? I now feel bad for anyone who has to work with you and be positioned as the fall guy for an environmental failure. If what you worked on was really that important it'd be gross negligence not have a change management or rollback process, not to mention the cost of firing people who've just learned something. Note that at no point did I say “Cowboy up, run `pipenv update`and push it live without testing”. What I described is actually the mechanism which makes the two things you listed easy to accomplish: 1. `Pipfile` stores the developer's intentions: “I need requests” or “I need Django”. `pipenv` automatically records each install and does remember your version requirements so e.g. `pipenv install "Django&gt;=2.0"` won't ever let Django 1.10 be installed. 2. `Pipfile.lock` stores the specific version numbers and hashes for everything you installed. If you distribute that file, you're guaranteeing that you either get what you tested or an error at the time of installation. Going back to the scenario I gave, think a little longer about what that means as part of your development cycle: you've just joined a project and they want to upgrade from Ubuntu 14.04 to the current LTS release. As part of that, you either need to research whether the versions which `pip freeze` gave reflected a hard requirement or were simply the current version the last time someone updated it. You also need to check whether each one is actually still required or was something which a dependency pulled in long ago (“Do we still use urllib2 or did switching to requests make that obsolete?”) or to cover a platform-specific need such as the one I highlighted where using the Ubuntu system Python 2.7 meant that you don't have the SSL improvements most things need now. `urllib3` is helpful enough to pull in `PyOpenSSL` if you run it on an old Python 2.7 since most things break if you don't support things like SNI these days but that means that `pip freeze` will now indicate that your project depends on the whole OpenSSL toolchain at whatever version was installed at the time of freezing. Doing this using the lockfile route is easier because the `Pipfile` tells you the things you know you need and you can just have pipenv upgrade every locked version (or maybe only the ones `pipenv check` shows to have security updates) to the latest release at a convenient time in your development cycle where you can test it and ship the updated lockfile. When I upgrade to Python 3, I won't need to remove modules like `enum` or `ipaddress` from my `Pipfile` because they were never listed there but I still had full controlled versioning throughout the 2.x portion of my development cycle due to the lockfile tracking everything which was pulled in to satisfy dependencies.
Because it’s trendy and made by Kenneth Reitz. setuptools + pip + virtualenv + private index never failed to solve my problems. I couldn’t even use a private index with pipenv last time I tried (months ago, surely this has been solved). At least the CLI output is prettier.
Convert it to golang maybe 
no it's not. I stick with miniconda3 .
&gt; It seems your argument is we have 16 methods to manage dependencies/environments. Why don't you see a problem with that? One of Python's strengths is having a preferred way of doing something. That's the batteries included piece, and at least one of the major reasons why Python grew fast about a decade ago. IMO - conda is its own ecosystem, and it's not even worth including for that reason. I listed all of those packages because they highlight the stratification I perceive, and when you go off and decide to pick a package to solve a problem, that takes a lot of time. While we're measuring, I've been developing Python professionally since 1999 (I think we were using python 1.4). I don't think it should be a badge of honor, though. Packaging has always sucked; it shouldn't suck. pipenv uses virtualenv, venv and pew. For comparison and relevance, you need to include any package that overlaps. pipenv violates the "Linux motto" to do one thing well. Pip definitely uses entry points, and you can setup pip to build your wheels if you need them. Wheels are much more convenient for natively built packages... &gt; The fundamental issue I see lies is that there is not a C compiler that comes with pip. I agree that native packages and system package dependencies are an issue that are still not resolvable in the way that other languages/ecosystems can resolve. 
Thanks for sharing!
Go back to C.
I have used this code for this work. but it will work only else portion(else: print('Usage: ./collect_links.py wwww.example.com file.txt')).its just open the code in text file after running it from the terminal #!venv/bin/python import sys import requests import bs4 if len(sys.argv) == 3: # If arguments are satisfied store them in readable variables url = 'http://%s' % sys.argv[1] file_name = sys.argv[2] print('Grabbing the page...') # Get url from command line response = requests.get(url) response.raise_for_status() # Retrieve all links on the page soup = bs4.BeautifulSoup(response.text, 'html.parser') links = soup.find_all('a') file = open(file_name, 'wb') print('Collecting the links...') for link in links: href = link.get('href') + '\n' file.write(href.encode()) file.close() print('Saved to %s' % file_name) else: print('Usage: ./collect_links.py wwww.example.com file.txt')
Still reading the article but on stuff like this: ^ installing (exclusively) from a private respository works very well. Instead of replacing a dotfile somewhere in the system, specifying the repository in Pipfile is great This was already possible with specifying ‘—index-url’ as an option to pip install. Not that any company computer should ever be installing directly from PyPi. I realize blanket statements like this are difficult to make.
I've tried switch to frame before getElementById but it still won't find it. It's in a form within a table.
I feel that we are either missing more context or there's something more to it. I don't see any negativity here and these two tools __are__ competing in every sense of the word. It doesn't mean it has to be aggressive competition and that they can't coexist. Criticism is good, especially when it comes to defining standards.
\&gt; what is the problem?Somewhat facetiously, but probably still on point.... this why: [https://xkcd.com/927/](https://xkcd.com/927/) Fracturing the community by creating "competing" packages generally doesn't make it good. If you want an example, just check out the various flavor of the month javascript frameworks. Thankfully, Python has mostly avoided that type of churn.
&gt; At one point, PyPI would allow a package maintainer to overwrite the same version of a package with an additional upload. It doesn’t now So, no longer a problem.. &gt; fork of an abandoned package on GitHub that solves a problem that you have that’s not released on PyPI. The lockfile protects you from having that source replace that “known good” code with code that might break in unexpected or potentially malicious ways. For github why not `pip install git+git://git.myproject.org/MyProject@0abcdef` some hash? Other support for hashing also seems [to be present in pip 8](https://pip.readthedocs.io/en/stable/reference/pip_install/#hash-checking-mode), so I'd think it would be better to spend effort back-porting that so it's possible to use everywhere but required nowhere? Like other people here, I don't think that pushing a new and incompatible file format is a good idea. 
You need: * Somewhere to run it * Somewhere to store it Any computer will do. Something like AWS will be a small, but recurring cost and can easily scale (not that you'll need it). It allows you to save data to S3, which also scales. Something like a raspberry pi will be more expensive and won't handle much load (not that you'll need it), but it's a one-time cost, and you will have more direct control over it. You can save directly to the SD card or to any storage device connected over USB. I recommend you start by running it on your own laptop or desktop computer and saving the data to your local hard disk. Once you have it working, install the same software to whatever platform you want, modify it as necessary to work on that platform (hopefully minimal work required) and leave it running there. Keep in mind that a lot of websites don't like you constantly polling them for data. They may have explicit policies against it. Others might require you to limit how often you poll and will ban you if you exceed those limits.
Perfect case for a decorator! Check out the Python decorator library, there's even an [example for exactly what you want](https://wiki.python.org/moin/PythonDecoratorLibrary#Counting_function_calls)!
No point; I like the new tooling!
Off topic n noob question but why and where should one use docker images as opposed to virtualenvs? I don't have sn exposure to big projects but seem like we csn do almost everything with docker
I'm gonna say the iframe is the issue; I think iframes get their own DOM tree.
I think stack exchange already serves that purpose well
Make one if you want to but I don’t see a reason to fragment /r/python since there don’t seem to be that many posts as-is. 
&gt; Why don't you see a problem with that? They're different projects with different goals. Something is good or bad, solely based on can you accomplish a task with minimal effort. There are multiple solutions now. 7 years ago, it was hard. I'm sure you remember the days when the author of setuptools refused to accept pull requests to fix bugs. Distutils was created in response. Setuptools eventually died and was merged back with distutils to create a project called setuptools. &gt; One of Python's strengths is having a preferred way of doing something. Python doesn't have a basic matrix library or plotting library, yet it includes a GUI with tkinter, which isn't even a good one? Packaging is special. That's why you don't want it in the standard library. Building an "exe" with pyInstaller is special and also a packaging solution. Virtualenv is a special feature that many people don't use. The main reason I use virtualenvs is because with Anaconda, I can have a virtualenv with Python 2.7 and Python 3.6 on the same machine and easily access them from any folder; that's amazing to me. &gt; when you go off and decide to pick a package to solve a problem, that takes a lot of time In 2018, depending on your goals, it's a couple hours of googling. I did my work. My new coworker had a requirements.txt file with 20 dependencies and started pip installing things one by one today, despite the fact that there are 3 real dependencies and 95% of the time sub-dependencies are irrelevant. If you want to be that picky, specify it. Part of my solution is to offer multiple methods. My open source package can optionally use many libraries. I require the core features and if you want the fancy things, go install the dependencies. For power users, use the no-requirements install method and manage it yourself. It works really well. Why should I install x, when I care about feature y, which doesn't require x? Nobody is even trying to solve that problem. I want specific features, not packages. &gt; pipenv uses virtualenv, venv and pew. Wait, is your argument about pipenv that it shouldn't have dependencies? They're reusing code. That's how the ecosystem should work. Everything is simpler with another layer of abstraction. &gt; Pip definitely uses entry points, and you can setup pip to build your wheels if you need them. Never tried it, but that's fine. Setuptools works. Pip works. Just pick one.
Sounds like a job for cookies. You'll have to choose if you want this to be handled server side or user side. An attribute on the function and a wrapper are two ways to go. If this is web based, you could use user side cookies.
I've tried Pipenv, and I just don't get the buzz. It's just a wrapper around a few things I could already do and a lock file instead of requirements, but that's never been an issue for me. I'm suspicious that most of the hype comes from who the author is, but I think I'm just not the target audience.
The lock file is more secure (hashes), more reliable. If two packages will never agree on the version of their dependencies, it will let you know. The Pipfile itself let's you see and manage just the packages you specifically asked for, when you pipenv uninstall one of them, all those pesky dependencies disappear. It's also more easily editable and contains more information related to the dependencies and the environment.
It isn’t docker vs. virtual environments. You’d still use a virtualenv in a docker container if you were deploying a python app. 
Without knowing exactly what resources your script will be using, AWS is difficult to suggest. It can get expensive, compared to /u/28f272fe556a1363cc31's suggestion to run it on a pi.
Of course it was possible. But with Pipfile it's cleaner imho. Say I have a two company projects I'm working on and two personal projects on a single computer. While we use Docker, I still like to have the virtualenv installed locally, because PyCharm is faster and more reliable with it's IntelliSense, than remote docker interpreter. I am installing all those packages from our company's PyPi mirror, only available behind VPN. I want to install my personal project's dependencies from public pypi, because I don't want to connect through a VPN for my personal stuff. I then have two options othar than Pipfile: * for every pip command remember to use `index-url` in every project, or have scripts/aliases that do that for me * Have two `~/.pip/pip.conf`files and remembering to switch those every time I want to switch upstream pypi I do prefer the pipfile, where I just set it once per project and every pipenv command after that behaves as it should.
Use the xpath
I know what the lock file does. I just don't have any use for it. I think that while learning python without a real package tool (e.g. Cargo for Rust), I just got used to things the way they were. For me, I have no desire to abstract it all for a dependency lock.
Out of curiosity why does it recommend that you don't pin your package versions? I've been bit far too many times by packages changing interfaces with minor revisions. 
A lot of us in scientific computing like to use `conda` because it gives us access to binary executables without requiring administrator privileges like a proper UNIX-based package manager would, or like the typical `configure; make; make install` pathway would. This is useful when working on a bunch of remote servers or supercomputer clusters and you want to use a particular tool.
A lot of us in scientific computing like to use `conda` because it gives us access to binary executables without requiring administrator privileges like a proper UNIX-based package manager would, or like the typical `configure; make; make install` pathway would. This is useful when working on a bunch of remote servers or supercomputer clusters and you want to use a particular tool.
Maybe you are asking for too much.
You can start with pythonanywhere.com. It has a free account where you can run your code and save a certain amount of info.
Dear Pythonistas, Do not watch this video. It's 2:17 of garbled sound to show 2 print statements. On my death bed one of my greatest regrets with be the two minutes and seventeen seconds on my life that could have been spent doing absolutely anything other than watching this entirely worthless video. I hope this comment saves you the desire to click on this because you thought to yourself "hmm, I wonder wtf Bangla is". Just don't. You're welcome.
Not everything has to or needs to go through the PEP process. Things like the core metadata spec and build systems (pep518/517) are good examples of things that do need PEPs.
No, `lambda x: x * 37 (2)` is not the same as `(lambda x: x * 37) (2)`. The first example is technically valid, but it’s actually incorrect because it attempts to call an integer with `37 (2)`. And thus, the two examples with the lambda aren’t equivalent: the first one attempts to print the _function itself_, why the last one - only the result of its evaluation. 
Sounds awesome! Can you share the source code?
Pushing something that violates the Zen as official without a PEP is however overstepping authority. I have never seen pipenv mentioned in a broader context. Having it suddenly pushed by what appear to be a bunch of people that appear wanting Python to become Node.js is not something that will make me like neither whatever process that have been followed, nor the product. 
Gunicorn might work here, depending on your exact needs... Hard to say without knowing more. Sometimes spawning isn't the answer, but sometimes its enough. Why does a plotly app need auth anyways? Generally curious...
I read your forum post, I see now. If it's not security you're looking for why not allow a user to have thier own subdomain they call in the URL. Have dash parse that out and serve the custom page?
&gt; It's just a wrapper around a few things I could already do and a lock file instead of requirements, but that's never been an issue for me. Yap. Pretty much, but so is requests, it's just wrapper around urllib3 and other modules. Some people don't mind the extra steps and command line args, but to someone who is new any additional option or extra command is a major step or just simply extra cognitive load (create venv, activate, install, don't forget -r requirement.txt, maybe upgrade pip itself... maybe not seems important not sure...). In general when it comes to tooling (packaging / build dependencies and things like source control), there are usually two separate groups of people. Those who are excited about it, want to know how it works, what happens under the hood etc., vs those who just want to type a few commands and not think about it much because they have other domain specific problems to solve. Neither one is right or wrong, but it's hard for those in the first group (I am in that group) to sympathize or understand those in the second. "What do you mean you don't care about the awesome git repository structure!?" I used to say. And they'd say "Yeah, cool, how about you just write out the commands I have to type to commit the code / build / etc".
In that case, I think that the woke fanbois should turn down their enthusiasm towards pushing a single product a few notches down, or preferably shut the fuck up. If the Pypa want to be respected as an authority, it should start behaving as one. Shutting down that would be a first step towards that goal. 
"I'll write them out once you profess your love for directed acyclic graphs you buffoon!"
What do you expect us to do? I legitimately asking. PyPA projects have only one rule (seriously)- they must adopt our code of conduct. If you believe that a person who is a contributor or maintainer of a PyPA project is not adhering to our code of conduct then I encourage you to reach out to pypa-dev, myself, or nick coghlan privately.
I agree, the majority of the community is very sheepish. Once the community starts a bad habit it tends to persist in every recreation. Case in point, [Celery](https://www.kennethreitz.org/requests3), [TaskTiger](https://github.com/closeio/tasktiger), and [Python RQ](http://python-rq.org/) all repeat the same mistake of using reflection to define an API protocol instead of using an IDL. Which creates major limitations when trying to bridge programming languages. Most of the Python packing stuff that is happening is mostly putting lipstick on a pig. There are a lot of other issue that need to be address with in Python's packages. There needs to be a level of standards met, otherwise with the way things are headed PyPI will end up like NPM. I have also lost a lot of respect for Kenneth when he started the [Requests 3.0](https://www.kennethreitz.org/requests3) campaign. It really feels like he is misleading his community of followers to fund a recreation of [aiohttp](https://aiohttp.readthedocs.io/). There are better places where that time and money could go.
Godspeed, friend.
&gt; Right now it looks like someone (pipenv project, would be my guess) randomly put a website together called "python packaging authority" and called it a day. Actually it was put together by active members of most of the official packaging projects (setuptools/pip/virtualenv/cheeseshop&amp;warehouse/wheel/etc) as a way to officially organise those members and start to unify our efforts where appropriate, and be able to present more of a united whole to the community rather than separated fronts. And yes it was created 4 years before (2013) a commit was added to pipenv (2017).
Is there an open issue for the proxy complaint?
On platforms where there is no system package manager (OS X, Windows) it still seems like a pretty good bet.
If it's not right for you yet, just watch and wait.
Why would you want to use a virtualenv inside a docker container? Unless you're running multiple applications with conflicting requirements or python version (in which case you'd want to put them into their own containers) I don't quite see a reason to have a virtualenv. The container already provides a separate interpreter for the target application.
But then again you have [others in this thread](https://www.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/dyyz6oi/) wanting PyPA to get *more* opinionated. We try our best but it'll never be possible to please everyone.
Pipenv is garbage. It doesn't solve any problems, it creates more. Most importantly: you still need `setup.py` or manifest file or something to generate it. And so you need to manage your dependencies outside of Pipenv anyways. So, the first problem it allegedly came to solve it doesn't even really try to. Second important thing to understand about Pipenv is that it isn't an alternative, like, say, `easy_install` and `pip` are. It just uses `pip`, but badly. So that a lot of `pip` functionality is not available to you. It's also super-slow because of how badly it uses `pip`. But, this also means that all the bugs of `pip` are automatically inherited by Pipenv. Same story with virtual environment. The only good thing that was going for virtual environment is that it's, basically, a simple script, which is somewhat easy to manage. It's very bad at what it does, very inefficient, doesn't really provide good virtualization, doesn't play nice with CI. But, at least, on some level, when you are through with it, you can just patch it. Pipenv is a monster of overengineering, a bowl of spaghetti thrown into viper's nest. Did you know that it comes with its own version of half of the standard library plus its own version of a bunch of third-party libraries? Can you imagine what happens if accidentally you call this garbage program from virtual environment with modified paths, and instead of getting its own version of whatever packages it needs it gets yours, from the virtual environment or elsewhere? And to top it with a funny fact: instead of just using `ArgumentsParser`, or, what the hell, even `OptionsParser`, this garbage uses `click`, which breaks if your locale settings don't match its fashion taste! A virtualization tool that cannot run in every locale! I've managed CI for a lot of different languages and tools for many years. Pipenv is the worst thing I encountered so far. Even a heinous combination of MSBuild and TeamCity wasn't so bad compared.
Any type of VPS will do. You might want something with a lot of storage space. OVH or AWS offers a good service.
Yeah, on Windows, compiling things is a pain, and some libraries still don't come with wheels, so you're right. On Linux though…
You say that as if I weren't a scientist 😜 I’m my lab’s python expert and everybody comes to me with python problems. Half of them are said anaconda inconsistencies and are fixed once they uninstall it and switch to pip.
True, forgot to mention this
Automatetheboringstuff
Cheers guys! Will definitely check these out. Want to try and get in big data and I think python is a good place to start
I think you're doing a fantastic job. I gave up on the problem for a few years and I don't have issues anymore. An embedded compiler in the packaging tools would go a long way to fix outstanding issues, but that's probably not going to happen.
Naming yourself an Authority when you are not, is a bad move. Rename you SIG so it's clear what it is, and make absolutely sure that no one stays with the present misconception would be a good way of solving that.
My very superficial and probably wrong understanding is that it uses hashes from the packages themselves to pin you to versions. Supposedly a security feature so that you can’t install a Trojan horse package if you like (a malicious one masquerading as a benign one)
Don't ya ever need to use binary tools that have to properly installed/compiled, though? That's where conda shines for me. Also the convenience of installing the "Anaconda stack" on any system, and getting almost every scientific python package you need right out of the box.
The spintax thing is a microsyntax, so use it with something else (like json or whatever). And you still want to add a placeholder replacement on top of it, like `'Hello $name'`.
&gt; It introduces yet another file format (Pipfile) while the new pyproject.toml is now standard. This is the main problem, IMO. What should authors of alternative packaging tools do now? Do they have to support these new file as well? `requirements.txt` is not perfect but it was simple and accepted by everyone. Inventing a new format instead of using a standard one is a questionable idea on its own. Accepting a format that was invented by a one particular tool and used only by it as a standard is even more questionable. Also, I do not know for sure but I suspect that this decision has a lot to do with Kenneth Reitz's personal influence. Yeah, `requests` is a great library and I use it a lot, but does it mean that now we should uncritically accept everything that he makes? I don't think so. And I don't think that pipenv is already stable and mature enough to be accepted as the official standard.
virtualenv + pip + requirements.txt are going nowhere and are not being replaced, so if those tools work for you then you don't need to change your workflow. If sometime in the future you run into an issue that could be solved by pipenv then use it.
This is awesome. Great job on the project. I recently picked up Advances in Financial Machine Learning by Marcos Lopez de Prado which you may also find interesting as it covers stock trading in depth. I’m also new to machine learning, but have a background in finance, so I’m hoping to build something similar in the near future. 
he salty
You have two more solutions: 1. Use extra-index-url (it will try internal repo first then fall back to main one) 2. Place pip.conf in the root of your virtualenv
You should not use requirements.txt unless you needed reproducible environment (e.g promoting qa to prod etc, you generate that file using pip freeze) Instead, your requirements should be specified in setup.py install_requires and you should only list the packages that you are actually using, all other dependencies will be automatically resolved.
RIght, sorry. pip.conf in the root does work and adresses my concerns, my point on that is pretty weak then. Although I still prefer it in a single file :) (It's also why I can't wait to have time to try out poetry, pyproject.toml seems to offer even more in a single file)
I personally prefer AWS, but if the script is lightweight (as your comment below suggests), I think you can go for the free tier provided by Google Cloud (https://cloud.google.com/free/). The free tier includes one machine (1 core) and some noSQL storage (cloud data store). There are also 300-500$ free credits on signing up, but they (unlike the free tier) last only for one year.
https://zedshaw.com/2015/07/26/turd-cookies/
Always nice to read something different in this sub :) &gt; If I had to do it all over again I might opt for a more powerful parsing engine, perhaps a version of LALR(1) (i.e. Yacc/Bison). Have you given a look at [microgrammars](https://github.com/atomist/microgrammar)? 
pipenv uses pip internally, so this is probably some other kind of problem.
It makes using venv + pip + requirements.txt easier to user and more reliable.
No you wouldn't. Why would you? The docker philosophy is pretty much single process running. Unlike with a laptop you might use or a server having multiple jobs running in the background, docker image should be running just one single process and that's your app. Once that one exits, it should stop existing. Therefore you don't need to worry about system's python dependencies all that much and you don't need to worry about isolation. There should be exactly one python environment in your docker container and that's the one your app will be using.
You can use a private index now (I don't know when the change came about, but it's been a month at least - probably more). pipenv is really setuptools + pip + virtualenv in one package with a single and easy CLI. If you already do your work with pip + virtualen + requirements.txt, you might not need pipenv. It does make your job easier though.
What misconception? Is having our guide behind https://packaging.python.org/ official enough? Being recommended in the python docs? https://docs.python.org/3/library/distutils.html Most main packaging tool/project documentation is under pypa.io distutils-sig mainly hasn't been "moved" for backwards compatibility reasons / the network effect, because there are many who already know that list in particular and still use it. 
Couldn't find it or couldn't search it ? ;\)
This criticism looks quite constructive to me, language aside. An unconstructive criticism would look like "pipenv is crap lol who wrote this retarded shit".
&gt; however it’s the release process that’s at fault here. Because there is none. Kenneth (here goes the second mention) fairly often goes on commit streaks in master branch, releasing along the way. The idea that a "release process" improves quality is a zombie idea. It's been wrong since the 1960's. Fast iteration beats process in terms of quality.
A demo of *numpy* install would have nice, to see which binaries were installed. The dependency graph would then have OS constraints. How do you specify binary needs in the TOML format, e.g. for MKL Math Kernel Library?
If your image installs system packages which have Python dependencies you might run into conflicts with the libraries your own deployed app uses.
Use hyperlinks ffs. Heaps of references to stuff in there, like a Python issue, I'm on a phone I'm not googling this shit myself.
&gt; a monster of overengineering, a bowl of spaghetti thrown into viper's nest. There might be some good criticism in there, but it isn't presented in a civil manner.
Let's agree to disagree. I do believe in agile development and fast releasing. But I also believe in code review, release candidates, development builds and other very useful constructs.
http://automatetheboringstuff.com/
Thanks for the feedback! Those issues were hyperlinked at the very beginning, but I see how you could have missed them. Do you think I should make them span multiple words (currently they are only on `#number`) or hyperlink them multiple times?
As a beginner I really like pipenv. I never used environments before because the commands were so cumbersome, also I use the fish shell instead of bash so virtualenvwrapper doesn't work. So I use pipenv as a virtualenv manager or something like that, I don't know the relationship between pipenv and setuptools though.
You could temporarily remove the official endorsement of pipenv. There is value in having one, simple obvious way of doing things but there is also value in encouraging a diversity of approaches and ideas and competition, and I think putting poetry on an official level pegging with pipenv from an 'official' perspective would have value to the community. I think there's value in endorsing a clearly obvious library choice once there is relatively little controversy over it (as is the case with requests), but that does not appear to be the case with package management yet.
I've been using it for an app that optimizes roll cutting set ups (cut big bobbins into many smaller rolls) at the factory I work at. Check out numberjack as another option. 
What resource did you use to learn how to use it? Or most importantly, how do you learn to model a problem as a CSP? I think it's not just the tool I struggle with, but the very discipline of CP.
And then? Where to run it?
How would one go about doing that?
Yeah I’m pretty sure I could, but I’m making the script for someone else who may not know anything about python so it would be way harder for them
Try an raspberry pi. It can run python easily, and mysql works to. The power consumption is also very low, and you handle the data itself.
i am still on 2.7 but no, i just declare value as needed and as the type needed and not beforehand. But i am not a pro either.
Thanks for the info. 
That's how it operates practically for the most part. Mostly made up of maintainers / trusted contributers of the the 'official' / defacto python packaging projects - https://github.com/orgs/pypa/people Since PSF isn't a highly-funded multinational corporation it obviously can't employ us all as a tight-knight, formalized division... But if you ask anyone in PSF or Python developers about packaging they'll also likely direct you to ask us, one of our [member repos](https://github.com/pypa/) or on distutils-sig or pypa-dev mailing lists.
Dude. Google something like "python get title from webpage".
Are you aware of any time limits on the bundle? Ex right now I'd get the highest tier for all the books + Postman Pro alone, but I have no use for PyUp whatsoever. I may in a month or two, will the access key still work at that time, or do I have to redeem everything within X days of purchase to get everything?