Oh, I'm thinking of the case where it's a 16 GB file or something, or you're just limited with RAM. When it maps, it locks that memory to the process right? I'll get a performance hit if I mmap a file the size of my entire RAM?
IMO the far more interesting question is, why there aren't ; terminators on every line. I can kinda see that one could possibly be using them due to being used to it from other languages but that doesn't really explain the inconsistency here.
Cherrypy provides an unrivalled combination of simplicity and performance. Thanks to all who have contributed and may it go from strength to strength
I did Python the hard way, then I watched and followed some of the udemy courses, then I did the kata (exercises) on codewars. Then I just started doing it at a new job and I learned much quicker and was able to bounce things off more experienced team members to really understand it. My big suggestion is after you know thing like classes/methods etc. Just pick something you want to accomplish and write it. Then as you hit snags you'll inevitably end up at stack overflow and so forth. Get really good at using the python docs to find the built in features you want to use. 
FYI, those looking for legit Postal Code databases can purchase dumps directly from Canada Post. They get updated every 3 or so months.
You mean, from sys import argv But I just found a project I wanted to build and started. I knew almost nothing for a long time and then it started to click. Over time you'll end up googling things and finding better ways to do whatever task you're doing which will have ripple effects back into old code that you'll want to refactor. I recently reviewed several Python books so I could recommend them to friends/colleagues - and I was impressed with Python for Kids. It is a fun way to work through Python and build out some small tasks that build on each other.
I did the codecademy course, as well as "Learn Python the Hard Way." I think you can get it as a pdf for free.
Did you try using an else? What have you tried? What has been the output? What's your code look like? It's really hard to read people's minds.
As a developer who constantly switches between python and c++ intraday at work, I can say it definitely does explain it. The semicolons aren't intentional, but the reflex is to add them. When that reflex hits and an errant semicolon shows up, I often don't even notice until later.
masklinn has a point that there are not very many true fixed-width directives in regards to the strptime spec, but I definitely think we'd all benefit from a timestamp parser in the stdlib that uses the same idea and slices strings. Most of us who need to parse logs and timestamps are parsing fixed-length timestamps. strptime is really the only option I knew about before writing this, but now that I'm hearing about its spec, it's not the right tool for what we do. `monkeytime` fills that place, but maybe we would benefit from something in the stdlib that people knew to use in its place, something with a name like `parse_ts` to avoid confusion. IMO it's a bit ridiculous that strftime outputs fixed-width but strptime by spec has to parse variable width timestamps of the same directives... But that's older than Python I guess. Maybe it is time to bring something new to the table, put it in the stdlib and disconnect it from strptime.
Why am I just learning about this now? Great information.
didn't know there was a r/learnpython thanks for pointing it out
I put this on a github gist and plan to link to it from the article. Are you ok with that - https://gist.github.com/chris1610/12d7701df5c335ec98aa
What about eval("A and B or not A and C")
Hmm... but it looks like it does from what I've read. Tell me if I'm misunderstanding this. So it's mapping out virtual address space for the file, but it doesn't read it yet. It's just reserving a contiguous block of memory. Then, when you start reading, it does copy that bit from the file into memory, where you can later seek and access it efficiently since it's in RAM. So if I have a 4 GB log file, and I run `mm = mmap.mmap(f.fileno(), 0)`, I'll have a 4 GB virtual memory address space allocated for it. Now, when I read the file line by line, from start to finish, eventually I *will* use the entire 4GB. Right? If I mmap an entire file, then read the entire file, I'll have 4GB of RAM in use. So if I have a 16GB file, and I read it line by line using mmap, then I'm probably going to be swapping eventually if I have just that much RAM.
[PEX](https://github.com/pantsbuild/pex) can make that much easier.
In my opinion there is now use case left where MongoDB is superior and it has quite a few drawbacks. Another example: http://lucumr.pocoo.org/2012/12/29/sql-is-agile/
It is a considerable source of errors and frustration for newbies. I've seen people learning Java or C++ or whatnot write something like one of the following countless times: for(...); foo(); if(...); bar(); while(...); { baz(); } These are all silent errors — incorrect but still valid code. It's easy to say, oh, that's obviously wrong, but it's not at all obvious to a newbie. Most lines need a semicolon but some don't, and there's a perfectly good reason for that but it's not at all intuitive what that reason is, it just seems arbitrary to a beginner. And then there's the case where you forget a semicolon and the compiler rightfully reports an error on the line after the one that's the actual problem, which again is not intuitive at all. Python from day one was always designed to be beginner friendly. There is no need to signal the end of a statement; the end of the line signals that unambiguously. It's only needed in those other languages because they chose to have insignificant whitespace, so the end of line is ambiguous without a terminator. Plus it goes along with the general idea that Python eschews punctuation characters wherever possible. `if` and `while` statements don't need parentheses around their conditions as in other languages. Operators are words like `or` not `||`. There are no braces to signal the beginning and end of blocks. There are no sigils in front of variable names. Being so clean on the page is one of Python's main selling points.
This post doesn't make any sense. Mis-linked.
I'm sure you could atleast load the password into the clipboard, but that seems like a bad idea. 
Good point. It is rather annoying that many authors do not specify which Python version(s) their code supports. Even more so if it isn't the latest, as that is the only version that might be assumed to be supported implicitly (although even that should be considered bad practice).
For an even faster approach on PyPy use cffi instead of ctypes to call libc strptime as the JIT is able to remove most if not all of the marshalling.
Here is tip for algorithm. Get fastest kilometer from gpx file. BTW: Must be popup "You Thank Us When You Share" on every single page ?
Yeah, that would be great! If you really want to promote good practices, you could add docstrings to the functions too. I forgot to do that :(
I doubt you're going to get a step by step from anyone here. This program uses Django. Look up Django documentation and start reading. Start googling terms you don't understand. Basically, you're going to have to learn some stuff to get this to work. It has dependencies.
I might be mistaken, but since that memory region is mapped to a file, there is no need to use the swap. If more memory is needed, a region from the mmap can be simply deallocated (because it can be read from the disk if needed again). In other words, the file that is being mmapped works as its own swap area.
Oh yeah sorry, you were right! :) The check is [here](https://github.com/torvalds/linux/blob/11c8f01b423b2d9742ce21e44cb7da7b55429ad5/fs/binfmt_script.c#L25)
I just did a quick check on your Quicksort Implementation def swap( A, x, y ): tmp = A[x] A[x] = A[y] A[y] = tmp is not needed. A[x], A[y] = A[y], A[x] accomplishes the same thing without the need for a tmp variable. is there a specific reason for naming the parameter A instead of a (or something meaningful like lst)?
I did about 1/4 of the Codecademy course and then went off and did my own thing. Learn the basics, then apply those skills to make a simple program like a short "text-adventure game". I find that putting my knowledge into something will help expand what I know, because you have to debug, etc. 
https://peewee.readthedocs.org/en/latest/peewee/api.html#fn model.select().where(fn.Len(model.db_str_field) &lt; 46)
If you are given a list of students you can just read the last one with [-1] and use .pop() to delete the last entry from the list. Look into the official documentation of the random module to see if you can find anything that could help you with the grades. Generally try to create a flowchart of your program/function/method first. This will help you greatly come up with the first prototypes. 
Colorama https://github.com/tartley/colorama That's what I've be using.
Well, how about this? A,B,C=(True, True, False) eval("A and B or not A and C")
Whenever people ask me how I learned, or what they should do, the answer is the same: Find something you're passionate about and dive in. Learning the basics is fairly boring beyond the absolutely necessary basics, especially if you have a reason to be learning the language. My "intro to Python" was NLTK's Natural Language Processing with Python book. This is a horrible starting point for most beginners, but perfect for me. People get stuck in institutionalized ideas of how to "start" something, because that's how they've learned all their life; in some silly standardized way. That's the best way to apply one method to many people, but not the best way for each individual. With programming, there exists massive amounts of information online, and you can easily start in any specific field you want, learning at the pace you want. Why did you decide to learn Python? If it was web development, go that route. Games, go that route. Robotics, go that route. Data analysis.... you get the point. There is an infinite amount of paths to learning, and it is just not likely that your path will match someone else's, or at least that your ideal path would. I offer a bunch of programming tutorials on both YouTube.com/user/sentdex as well as pythonprogramming.net if you're interested in any of those topics. Google taught me everything I know, other than trial and error. Just dive in, heading towards the topic you're passionate about, taking baby steps towards that goal. As for your sys and argv concerns, here's one of my tutorials / videos regarding that exact topic: http://pythonprogramming.net/sys-module-python-3/
Worth noting that the conference has been moved two days earlier. Now 31st May-5th June.
I name it capical A because it's an array and so it's easier to distinguish it from the indices, which are lowercase x and y.
You should name the variable array then. You should also follow pep8 in regards to parentheses spacing.
Book page http://python3porting.com/
What operating system? How did you install python? How are you installing packages?
That was one of my options but fn.Len doesn't exist. 
thanks for all the info everyone. I appreciate it. 
I most definitely will! I work in digital marketing, and I created a program using a marketing automation platform that sends leads automated emails based on their product of interest. To determine how successful the email campaign is in terms of measuring user interest and seeing how many leads eventually bought the product, I want to parse my inbox with the subject lines of the email program, and capture the email address of the leads who replied to the marketing email with certain keywords. Hence....I'm learning python primarily for that purpose :) Hopefully along the way I'll fine other useful cases. 
I wonder if the PSF would offer a grant to help. https://www.python.org/psf/grants/ http://jessenoller.com/blog/2011/12/09/porting-to-python-3-an-offer-for-you
Yeah, someone suggested in the comments that actually running the tests from the installed version was the way to go, which looks like what you're doing here too. I think that's a good idea and I'm going to be looking into it.
I'll be sure to read that as well. My hesitence stems from the fact that I have a bit of exprience with MySQL. The thing I like about MongoDB is that you can revise your document schema very easily. My understanding was that you could not do this with relationsal databases. But maybe Postgres is different?
http://codecombat.com/
check out /r/learnpython for more basic questions if you use a list for the student names you can always add a new student to the list by the .append() function There's no limit then on how many names you can add. so something like student_names = [] student_names.append( raw_input() ) print student_names the above code creates an empty list of names - then add's a name to it from keyboard input - then prints the list. you should be able to figure out how to put that into a loop to fill in student names then at the end print the list. Again for the grades you can make a list: possible_grades = ['A', 'B', 'C', 'D', 'F'] # or whatever increments you want +,-, etc then look up the function random.randint(a, b) Use that to assign each student a grade from possible_grades one way would be to have the grades list be a 1-1 correspondence to the student name list: So you have a student_names list and a student_grades list where the first entry in student_grades (ie. student_grades[0] corresponds to the grade for student_name[0]) One thing that will make your life easier when learning python (especially if you solve this homework problem by using multiple lists) is to learn about using 'list comprehensions' They will save you time when you want to iterate over a list rather than explicitly writing out a for loop to loop over each element of the list. also - when asking about homework questions - its better to at least show the code that you have written and narrow your question down to a specific piece that isn't working or isn't doing what you want. don't use this forum as a way to get someone to answer your homework for you
not a problem at all happy to help out good luck with your studies and future endeavors with python
https://www.sqlite.org/lang_corefunc.html#length model.select().where(fn.length(model.db_str_field) &lt; 46) Looks like postgres has `length` as well.
That's correct. I forgot to update the post. Thank you for replaying.
Just to comment them out so if something goes wrong it can be fixed/reverted easily.
Oh yes, it's about as easy to make something that installs but is missing something as it is to make something that errors on install. Installing from a tarball and then running the tests will catch both kinds of problem (provided your tests cover the relevant things, of course).
When I was using xterm colors a lot a few years back, I found it useful to have a script to convert colorized files into html with appropriate font tags. Less technical consumers of the output could get the benefit of the colors instead of seeing a bunch of escape junk polluting a text file. Btw, use 'less -R' to view files with escape codes.
 class Pet(object): def feed(self): return 'pet' class Dog(Pet): def feed(self): return 'dog'
Yep. Colorama is the best thing I could find that would work for me on Windows. 
This is the solution. Thank you! 
that mascot
If you are cool being maybe slightly less accurate, you can do it even simpler, and just sleep for 1/60th of a second between prints. for line in lines: print line time.sleep(1.0/60)
This is a much nicer way to do it than mine
Really - I'm amazed this is not more popular! A friend of mine thinks is is probably mostly the name. Dataset does exactly what it says on the tin - I have not been using it that long but it already feels better than json/pickle for simple things, and better than mongo for complex things! Learning some actual SQL now seems much more tempting!
It's simpler, but it will 'drift' a little. I clocked my machine, it prints 70,000 rows/second. So that means it takes 0.000014286 seconds to print a row :) So every second you will be 'drifting' 0.00085716 seconds off the 60 lines/second goal. But, I guess it's probably still more precise than sleeping 100ms each time.
Not sure how much I like the web installer - though as long as there's a standalone option I won't care ;)
Then you need to follow the factory model.
What are you using to draw the interface?
colorconsole, as I said. It's all I needed to develop few classes (Widgets and simple "Window manager") responsible for drawing those windows, menus and stuff.
It's definitely cool, but my guess would be that there's just not a huge demand for something like this. If I ever need a database for a small project, I just use SQLite, which is just as easy and uses the standard SQL commands.
This is my first contribution to OSS. Figured I'd share it here and see if it was helpful for anyone. I welcome any and all pieces of constructive criticism. Because I forgot to put it in the title, it's a crosspost from /r/programming.
Interesting. I typically wrap my databases in a class with a bunch of convenience methods that ends up looking a lot like this. They probably thought of a few things I haven't.
I, uh, made a script to download the image uploads of a given reddit account. For, you know, research purposes.
OP is a real engineer. Wrote more code than it would've taken in clicking a few things just to automate it. My silliest project was a result of my hating using GasBuddy. I wrote an entire (shitty) website with Django and BeautifulSoup that scrapes an individual city/state's GasBuddy prices, and presents them in plaintext. It even shows you the cheapest option available. All because I was too lazy to use GasBuddy. [Source](https://github.com/jalavosus/GasPriceFinder), [site](http://104.131.124.158:5555/).
is this a product? OSS project? etc...? 
__Laziness intensifies__ You are awesome! 
Lol what kind of computer are you using? A toaster? Of course it can print 60 lines per second. Also "real time data is confusing anyways since there's too much data" is a very naive/nonsensical thing to say...
&gt; Also "real time data is confusing anyways since there's too much data" is a very naive/nonsensical thing to say... You haven't thought about this at all. Graphs make much more sense. I'm an aerospace engineer. I work with big data and big data data visualization almost everyday. I work with 2d, 3d, n-d, stochastic, fea, time accurate, modal, frequency you name it data. A person cannot get a good handle on what is going on with a data set much beyond it's increasing/decreasing/semi random/derivatives by scrolling/printing through a CSV/excel/screen dump. It's just too much information. You need to reduce it as much as you can. Let's assume 100,000 lines at 60 lines/second. Can you even read that? If you can't, why are you showing it? If you're trying to check for errors, store the last 10-ish lines and print them out if there's a crash. Also, that takes 1666 seconds to print, so 28 minutes. Even if you could read it, do you really want to be hyperfocused looking at floats print for 28 minutes? Also, since the columns aren't lined up properly (b/c it's CSV), when you have a long line, does it wrap so you can't even sort of identify a single column? Now what happens when your data set is 200,000 lines long? Do you really want to stare at lines printing for an hour?
Oh, I've thought about it once or twice. Betcha my data is bigger than your data :P &gt; This will simulate the mechanism by which the data was originally captured, which in turn will help develop an application to capture and analyze the data in real time. Obviously OP wants to pipe this data into something to deal with it. I just found it amusing that you thought someone was going to be sitting there staring at the numbers whizzing by like the kid in the matrix. Also: a realtime graph is "realtime data".
I've run into plenty of situations where I've naively inserted a print statement and then found that the limiting factor is literally the speed at which OS X Terminal will output Python print statements. I've seen differences up to order of minutes in this regard.
You may want to add a sys.stdout.flush() after each print, to make sure that the results are going out between each sleep; if you don't the OS may decide to buffer stdout for multiple iterations, which will cause the simulated data rate to stutter.
This is probably the most direct answer to OP's question. But I would add that for 100,00 lines he may be happier doing something like writing the file to CSV (inserting blank rows or something to represent the time gap between print() outputs he was seeking) and opening it in Excel for visual inspection. OP would also likely be interested in the Python modulo operator, if he doesn't already know about it. From the Python docs, "The % (modulo) operator yields the remainder from the division of the first argument by the second." So, e.g. (pseudocode, since I'm leaving out some code for CSV ingestion, opening a file, and what-not): for index, row in enumerate(data): write row to csvfile if index % 60 == 0: write &lt;blank row&gt; to csvfile So every sixty rows of data, it'll write a blank row, making it easier to visually inspect the data according to what OP said more closely resembles the data collection process (sounds like something that collects data once per second and he wants to break it up by minute).
&gt;(and any other computer made since 2000) Are you saying CRTs would have been better for this? Anyhow, yes, I didn't explicitly put it in but things are infinitely faster if you just let it run, or write to some sort of output file along the way. I suggested to OP how to write to a CSV with a blank row every 60 rows (to simulate what he was hoping to achieve) here: http://www.reddit.com/r/Python/comments/2rwr8h/printing_at_a_specified_rate/cnkb4zk?context=3
As a tangential note, you may want to investigate Python's import from future capability: http://stackoverflow.com/questions/7075082/what-is-future-in-python-used-for-and-how-when-to-use-it-and-how-it-works This allows you to, for instance, write Python 2.7 code using the Python 3.x style print() function. This way, if/when you eventually decide to migrate to 3.x, you'll have less legwork to do in porting your code. (It sounds like you're using 2.7 for a course, so I wouldn't do this without asking the instructor if they're going to dock you for it.)
I feel like nobody is reading the part where (s)he specifically wants data at 60Hz, and that it's going to go into another program to capture and analyze the data. If OP just wanted to look at the data, (s)he could open up the 100,000 line file with `less` or any other text viewing program.
Looks very useful. However, there is one thing... &gt; To store some data you need to get a reference to a table. You don’t need to worry about whether the table already exists or not, since dataset will create it automatically: Good luck finding typos in table names with that. &gt; [Errors should never pass silently. Unless explicitly silenced.](https://www.python.org/dev/peps/pep-0020/) 
&gt;OP said 60 lines per second, not 60 seconds per line. I definitely missed that part. I think you should be able to just reuse my code while swapping in the appropriate modulo, though. As for the rest of your post, maybe my code is overkill, but it sounds like they basically want a way to visually chunk out their data (and that their CSV provides no easy way to eyeball things). My pseudocode still provides that.
If we're talking about (mostly) pointless programs, I have a script that takes a file, guesses if it's an episode of a tv show based on the filename, then asks tvrage.com for info about the episode and moves and renames the file based on that. Because I'm too lazy to organize my hard drive myself. If we're talking about silly *code*, I had a moment working with some html where I had to access the parent of the parent of an element. So naturally I wrote: granpa = i.parent.parent I don't know why, but this line always amuses me when I see it.
I love Dataset.
I wrote a script that chose my schedule for me for my first year of university... had to supply it a good rating function, and it juggled all the courses I wanted until it found something that gave me an ideal schedule. Afterwards, I learned about genetic algorithms and it turns out that it was pretty close to what I did. Was fun.
I was crazy bored in September 2012, so I made a script that did 99 Bottles Of Beer On The Wall, except that it was 50,000 bottles of beer, and it was on a twitter account. It took three months cos of Twitter's rate limiting. http://twitter.com/50kbottles. Sadly I deleted the Github repo with the source, but it was pretty simple.
There's a long history of laziness being seen as a positive quality in programmers: http://threevirtues.com
Let's just say, HYPOTHETICALLY.... You had a particular fetish, and you reached the point where you were pretty sure you had consumed most of the free, high-quality porn available catering to this fetish. And there was one particular company that produced porn catering to this fetish. You might, being a software engineer with a bit of disposable income, sign up for a subscription.... Then write a Python script to scrape their site, dump all their videos to an external hard drive, and cancel the subscription the next day. HYPOTHETICALLY.
I like that! Reminds me of this: https://twitter.com/big_ben_clock
Any chance you could post it here? Seems like something I'd be interested in doing!
Are you aware of [ripme](https://github.com/4pr0n/ripme)? If not, make it so. Personally, I did something similar, but for mostly *actual* art research purposes -- a pretty large cross-section of topical image reddits - animals, scenery, plants, military,cars, food -- most of the SFWPorn network, basically -- as well as 'research' purposes. Silly mainly because spidering is much more efficient at procuring new reference than I am at using up reference.
Haha, that'd be a lot of digging through the archives... that was in 2003. Mostly I just created a dict with information on all the courses I wanted to take - one entry for each time slot it was offered in. So for 15 courses, there was something like 400 entries (counting all the lab sections to choose from too). I had the program populate 20 schedules at random. Then it scored each schedule. I have positive points to having lunch off. Negative points to back to back classes that weren't in the same building. Negative points to evening courses. Positive points to full days off on the schedule. Etc. It chose the best 10 to keep. For each of the top ten, it tried 'breeding' them with another top 10 by swapping 2 courses, generating 10 more schedules. I cloned these 20 and then randomly changed in or out a single course on the clones, giving me 40 schedules. Rescore the schedules, and repeat the breeding process. Eventually you'll get a schedule you like. Of course, I was a pretty novice programmer at the time, so the code was pretty nasty, but it worked. I ended up using the best scored schedule after about 20 iterations.
When I'm in a GNU/Linux shell, it is not uncommon to type `gf` instead of `fg` (which brings a sleeping program to the **f**or**g**round). So a wrote a Python script that will open up a prompt when I type `gf` (**g**irl**f**riend), and email my GF the message I enter (or a random one of the list of the previous entered ones if the prompt is left blank). Small thing to remind me to pay some attention to her when I'm programming for a long time ;-). 
I wrote a program to do my maths for me, in college. The teacher said it was fine, 'cause I understood the maths well enough to make the algorithms, so obviously I knew it. That was bullshit, I just wrote the function, and instantly forgot the maths. It's what I do now I'm out of education, so it worked ok.
https://www.pushbullet.com/
If it has a knob to turn off the magic (auto-altering tables) it would be a great tool for prototyping and then slowly moving to the real thing (joins and stuff).
The fuck? How childish can a company act? 
I would like to say that "if anal is not null" or something similar is the weirdest code I've been writing lately. (Or something else with anal, ie pilotanal, simpleanal, monthanal, dayanal)
Sometimes I think I'm the only person in the world that can't stand ORMs. I really just prefer to write the SQL.
I once met a cute girl at a party. I couldn't remember her name the next day, but I knew she was friends with four of my friends. So I wrote a python script to scrape my friends' Facebook friends, then find people they all had in common. 
I wrote [this](https://github.com/thekindlyone/Torchlit) little thing to convert mouse middle click to a series of keystrokes to apply buffs one after another in torchlight 2. and [this](https://github.com/thekindlyone/keytime) to not let accidental thumb touches on touchpad while typing on laptop move cursor anjumble d words. 
You're not alone brother.
I have downloaded all videos from a user from xhamster with some python + youtube-dl before.
I once wanted a tool on my laptop to turn tethering on on my phone, so I used my python library (pyPushBullet) to send a push notification on my laptop to my phone, which would then use tasker to turn tethering on. Only problem is...in order for my laptop to send a pushbullet push, it needs to have an internet connection, which it doesn't have because tethering isn't turned on. I am not a smart man.
You'll need to change the items array to fit your need, maybe change the index 0 to contain the entire item URL and then change the request inside the loop to item[0] (omit the base_url). Also you'll need to change the xpath selector to the correct selector that holds the price in the site you want to poll. Lastly, you might need to tinker with the price check itself (unless that site lists the price in the same way that Amazon does, ie: $100)
.. are you proposing that Unicode is a strict superset of all other encodings? Because there certainly isn't a guarantee that any character found in the filesystem is valid Unicode. Filesystems just store bytes, it's [up to the user](http://serverfault.com/questions/87055/change-filesystem-encoding-to-utf-8-in-ubuntu) what encoding those bytes use. Though I take your point, the parent post should have said 'non-ASCII'
Nonetheless, I do would like to see how this compares to SA, though. Why should I move away from something that has stood the test of time, is used and supported by many OS developers, works with nearly any No/SQL DB around, and essentially does the same thing? Addendum: I do realize that dataset is built on SA, I just don't get what problem it solves. Either I need a real fully indexed, relational data warehouse, or just a key-value-ish store I can do quick-and-dirty look-ups against. Both can be done easily with SA and the right datastore for the problem. What I'd really would want to see a clear example what dataset can do that is a pain with SA.
I have a script to get 2 separate achievements: Open Gmod 1000 times and Lick 10000 objects (goat simulator. It's actually a different achieve that is only obtainable from this "quest" in the mmo thing) It's definitely my silliest code.
In any environment where the programmer is not the DBA, you won't have ALTER privileges anyway
Pocket? EDIT: Checked out pushbullet, seems both would be good for this purpose. 
You could probably do what you wanted through texting, if there's a way to send texts using a computer. 
Not quite. You'd need to use SA and not your favourite DB connector directly. Then the examples would start to become even more similar.
I agree with you there. Things like Flask-RESTless that integrate so beautifully with SQLAlchemy make my life substantially easier as it is.
Was it 'one to one' or 'one to many' girl-bot... ekhm?
Ascii Google Earth: https://code.google.com/p/asciimapper/ Because it needed to be done. 
This reminds me about similar things I did when I was still studying. Scraping friends to find people in common, setting up a script to visit profiles on a dating website every day to show interest, setting up a script to notify me when someone came online. God... I was pretty dorky. The problem was always that writing the scripts was easy, but the part afterwards...
I once wrote a wildly obfuscated program that opens itself up, strips the actual code, and reads executes the code in the comments interleaved within the original program. The executed code opens the program up again and executes it, which executes the comments, and so on. I believe it was a couple hundred lines long. Its function was to count to ten.
I wrote a short example to scrape a page and save a numeric table in a pandas dataframe. Storing it in SQL, outputting to Excel or PDF is relatively straightforward once it's in the dataframe. HTH - http://pbpython.com/web-scraping-mn-budget.html
That does help quite a bit, thanks.
The scripts are easy, but the part after is more challenging, and thus more fun ;)
Silliest code fragment that I've caught myself doing (more than once, if you count unsubmitted Reddit comments): for i, item in zip(itertools.count(), items): # lol, what is enumerate()?
That sounds awesome! And the rest of the class is actually doing Python 3.4, me as well, but he has no problem with me writing in 2.7. I use 3.4 when I script in Blender. 
Isn't this also what `pip` uses internally?
stored proc master race
I have some code in an json-rpc based codebase that tests the size of compresison-header + Compressed output and compares if it's a size optimization or not.... For small inputs the size of the encoding header in HTTP is sometimes larger than the size win from compressing input.. (Yes. Bandwidth matters... )
My bad, you got me there. You know what I meant.
...which you still need an internet connection for ;)
A little late to the party but I have a module I like to include in my personal projects. Its named Ron after one of my friends and when called just prints out "I am Ron, please insert cookie."
Haha definitely. Like I said, was a long time ago. Happily almost-married now. Feels good man. 
Yeah, I already figured out it was important to run the code, I just am doing a relatively straightforward smoke test rather than running the whole thing.
Cool. I had also written code to parse headers from the WDI datasets before I realized that Pandas includes an API for this: http://pandas.pydata.org/pandas-docs/dev/remote_data.html#remote-data-wb I believe some of this data is also available through the Quandl API, for which there is a Python implementation which also reads data into Pandas DataFrames: http://pythonhosted.org//Quandl/
I thought about doing that once. do you have source? what was the data input? I figured timelapse screenshots with traffic coloring would be cool.
If you're designing an app that needs to do Alter/Create the assumption is you're using application level service accounts that would have proper access in prod and your security is such that regular users will only be able to take advantage under the defined logic of the application. That said I stand by what I originally said. If you're using SQL properly needing to do alter or created should be very limited and if you do you should have proper change control in effect to mitigate security concerns.
Oh! I should have guessed that Pandas already implemented even this. Real life [antigravity](http://xkcd.com/353/) example.
I dig it. I'd love to see the code! 
[You too, eh?](http://imgur.com/oAqu4nO)
This is some Seinfeld level stuff right here.
I haven't been able to get the graph search to work lately. I haven't changed any language settings either. :/
I had a REALLY flaky router, so I wrote a script to ping some public DNS servers to check for connection. If pings failed, it opened a telnet session to router and rebooted it. Worked really well.
Well, here's the code in all its unfettered glory. I checked and graphics.py is still available at wartburg. ''' graphics.py is available from http://mcsp.wartburg.edu/zelle/python/ ''' from graphics import * import math, random, time def nudge(): return 0.1 + random.random() * 0.5 def percent(): return 0.5 + random.random()* 0.5 branchlist = ["brown", "chocolate", "chocolate1", "chocolate2", "chocolate3", "chocolate4","black", "orange", "orange2", "orange3", "saddle brown", "sandy brown"] leaflist = ["green", "aquamarine2", "aquamarine4", "DarkSeaGreen1", "DarkSeaGreen2", "DarkSeaGreen3", "DarkSeaGreen4", "SeaGreen1", "SeaGreen2", "SeaGreen3", "PaleGreen1", "PaleGreen2", "PaleGreen3", "PaleGreen4", "SpringGreen2", "SpringGreen3", "SpringGreen4", "green2", "green3", "green4", "chartreuse2", "chartreuse3"] def fractal_tree(w, p, length, angle): x = p.getX() + math.cos(angle)*length y = p.getY() + math.sin(angle)*length p2 = Point(x, y) branch = Line(p, p2) branch.setWidth(length/5.0) # aspect ratio of a typical branch (?) branch.setFill(random.choice(branchlist)) branch.draw(w) if length &gt; 6: # tree gets too bushy if minimum length &lt;= 6 # draw two sub-trees fractal_tree(w, p2, length*percent(), angle-nudge()) fractal_tree(w, p2, length*percent(), angle+nudge()) else: # draw a leaf and terminate (backtrack) leaf = Circle(p2, 3) leaf.setFill(random.choice(leaflist)) leaf.setOutline(random.choice(leaflist)) leaf.draw(w) def main(): win = GraphWin("Fractal Tree", 800, 800) win.setCoords(-200, 0, 200, 400) # main branch (trunk): fractal_tree(win, Point(-50, 100), 50, math.pi/2.0) fractal_tree(win, Point(100, 50), 80, math.pi/2.0) # wait for mouse click ON THE WINDOW (not the X button) win.setBackground("navy") win.getMouse() win.close() main() 
Once upon a time, I was futzing around in dependency hell and broke matplotlib, bringing myself into a yet deeper circle of dependency hell. At this point I decided that I was just making things worse, so I should just write my own plotter. In a few dozen lines I was able to come up with a pretty flexible ASCII plotter that looked nice for everything from [simple functions](http://i.imgur.com/uTySFPA.png) to [parametric functions and noisy as hell data](http://i.imgur.com/cedrFqR.png). I put it on github to share the lolz, and it remains the most popular piece of code I've ever written. [It's here.](https://github.com/imh/hipsterplot)
If you check the commit schedule, I haven't updated this thing since November :( ZIP code support would probably be easy, but I have a programming job doing web scraping + other scripting, leading me to have no time for my projects :( 
But is it written in python? Looks like a good tool though. Thanks for introducing me to it.
That's actually pretty cool. The closest I have done with something similar is scraping my school's pdf schedule (which is fucking terrible by the way, shit is so inconsistent it hurts) and outputting all of the classes within certain times into a spreadsheet and then I hand pick my schedule manually. 
Haha sounds like the charm of that one is short lived on a server
Point taken! Will take care not to trip over that one too!
In zsh I have :wq aliased to echo "You're not in vim, asshole."
I second this.
You missed out on the fantastic opportunity to call it "spotipy".
Aw. Dang! 
So TIL that most people learn Python to download porn, or pictures of attractive ~~members of the opposite sex~~ people. **Edit:** I guess it doesn't necessarily have to be the opposite sex. Or even have to be human...
Hey! I'm going through learn python the hard way, and I was wondering what resources you used to get to this point in programming?
The documentation: * http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6 * http://code.google.com/p/modwsgi/w/list And asking questions on the mod_wsgi mailing list where there are a bunch of people who know specifically about this topic and aren't just going to pipe in and tell you to use some other WSGI server. * http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Asking_Your_Questions There are also Apache/mod_wsgi videos related to performance bottlenecks and tuning at: * http://lanyrd.com/profile/grahamdumpleton/coverage/
I forked it. But I'm a beginner and I don't know when I'll have time to noodle around with it; if someone else wants to do the needful, please do.
Better. That's how bad GasBuddy is.
It looks impressive. But I agree with /r/squiffs - it simply isnt production-ready. I looked at the PDF docs and the project starter program `jam-project.py` is not in the repo. Jam.py seems to be a free version of [Lianja](http://www.lianja.com/) which could very well be the easiest way to create an application that deploys anywhere.
Isn't that the whole concept of a library?
Install dbus with brew tap homebrew/python brew install dbus python-dbus ln -sfv /usr/local/opt/d-bus/*.plist ~/Library/LaunchAgents launchctl load ~/Library/LaunchAgents/org.freedesktop.dbus-session.plist But this python script still doesn't work for me on OS X, I have the Spotify app running and the script says &gt; Start Spotify before using this cli application. 
Ooo, that's a useful one.
He made a program that you couldn't make any sense of, unless you ran `egrep "^*?#^*?#^*?#^*?#^*?#^*?#^*?#^*?#^*?#^*?#\S+" program.py`, simple.
How long did it take you from starting to learn programming to the creation of this app? 
Woah nice! So what do you use to play the music? Their API lets you manage playlists and what not, but I didn't think it would let you stream. Is this just a command line interface for the official client?
You should definitely take a look into https://docs.python.org/3/library/argparse.html
Ha! I did a similar thing with Skype a long time ago. I'd capture all of the incoming messages, and then pipe them over to an active cleverbot session so that it maintained somewhat of a sane conversation.For about a week, I'd switch on "CleverSkype" any time I stepped away from my machine. There's just something hilarious about getting back to my computer and finding a giant comment thread where someone slowly discovers that they're talking to a machine. It was a good way to almost end a lot of friendships. 
&gt;All because I was too lazy to use [X]. That reasoning powers a good 90% of my projects, at least. 
I wrote a CLI program to record my blood levels of a particular drug I was taking using a formula, because that particular drug made me want to be productive and I had nothing better to do at the time.
60GB a month?? *How dare they!*
Well .. I did both. I cloned to my local disk, but hit fork to park it in github.
Am I doing something wrong? dafuq:PythonSpotify macbookair$ ./cli.py Traceback (most recent call last): File "./cli.py", line 2, in &lt;module&gt; from spotify import spotify File "/Users/macbookair/Documents/PythonSpotify/spotify/spotify.py", line 1, in &lt;module&gt; import requests ImportError: No module named requests
"Well maybe if I just replace dbus with some windows thing somehow?" Some skimming through code later... "This... this app may be linux through and through..." :(
Planning to view/edit it as a CSV. Which standard libraries are you referring to?
https://pypi.python.org/pypi/Unidecode - a library to replace è, é, ê, ë, ē, etc. with e (works across the alphabet + asian chars). 
I think this requires you to have spotify installed. 
D: No OSX support...:(
This is super cool. Looks like I need to learn about dbus.
When do you convert the string inputs in to numbers (float/int)?
......I'm still virgin....
This thread has been linked to from elsewhere on reddit. - [/r/ProgrammerHumor] [Cock Calculator. Yes, it exists.](http://np.reddit.com/r/ProgrammerHumor/comments/2s16ra/cock_calculator_yes_it_exists/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
Whoops. I guess the program assumes you're into sailors. 
That depends on how long since i actually started programming, or how long from starting with Python. Anyways, I skimmed through "learn python the hard way" then created this app after I was done reading that book. (And a lot of documentation)
I should update the readme with how to on dependencies like this.
&gt; we don't pay money for our books You technically do via taxes/ 
You might consider renaming your project to remove the Spotify name to alleviate any potential trademark issues in the future, but mostly because Spotipy is such an awesome name.
That's true. Didn't even think about that. I wonder if github redirects correctly if I change the name.
It's now named Spotipy!
Me thinks you didn't try that one: &gt;&gt;&gt; import functools.partial Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ImportError: No module named partial 
This is pretty awesome. I want to ask how the next block is determined, though. I played a good few minutes without seeing a square block, and as soon as I filled the space I was saving for a square block with another piece, I suddenly got 4 square blocks in a row. Maybe I'm just unlucky but it certainly didn't seem random.
Awesome work! Figured I'd throw in some inspiration on how a really well executed CLI music app might look like: https://github.com/cmus/cmus. Ncurses UI:s are always nice =)
As others have said, just do `import functools` as it doesn't matter from performance's perspective. You could always do something like `from functools import partial as functools_partial` to get somewhat the same syntax..
Hi and thanks. Dumb question: Have you started Spotify? Because this is more or less just a remote. 
Seems that it still are problems with dbus. To bad I don't have OS X to test this.
The tutorial is ok, but it's a pity that it's written with the Python 2 syntax
It does.
Is there a way to make git work with a GUI in Windows? I've been having to use the terminal version, and there's a lot of commands to remember. 
Should support OS X now.
Should support OS X now.
FYI, I'm pretty sure you can just make an empty subclass of `object`and assign attributes to it. The object's `__dict__` becomes the `dict` in your example. But yeah, just `import functools`.
It's kind of funny how you get completely believable sense of volume on the trunk / branches, without even acknowledging that such a thing as a light direction exists, just picking random colors from a list. Not so much on the leaves -- I think they probably need a volumetric rendering (eg. via blender) to get a good result from simple generation methods.
adapting to python 3 is rather trivial...the major change is the use of ```__next__ ``` rather than ```next``` when defining iterators and using them
ok thx
https://windows.github.com/
Sorry to be the buzz kill, but there is already a Spotipy: https://github.com/plamere/spotipy It's a Python Spotify library and it's on PyPi as well: https://pypi.python.org/pypi/spotipy Stay safe kids, Google your project name first! 
I noticed :/ Going to change for a new name before I upload it to pypi.
Well, number of commits doesn't mean much if “initial commit” had 80% test coverage and 4000loc ;)
Caught me. I did not check it first.
Random != even distribution. What you experienced sounds totally random to me. Traditional tetris doesn't work off of a truly random sequence of pieces, though.
He means you're going to have to be more specific with what you want the code to do. First, define what you mean by shape. That means many things. If you want to start making a game, I might recommend PyGame as a starting point. If you just want to change an image, I might recommend PIL.
yeah that would only work if you go import module.module Can anyone tell me if it works in python3 though?
Did you get through this problem? I'm on the same boat: clean: BUILD FAILED D:\pgs4a\android-sdk\tools\ant\build.xml:459: ../market_licensing resolve to a path with no project.properties file for project D:\pgs4a\android-sdk\extras\google\play_apk_expansion\downloader_library Total time: 0 seconds The build seems to have failed. Process finished with exit code -1 
Python is the perfect tool in some fields thanks to specialized libraries like sklearn, pandas, pymc,... Sadly, it is far from R in a lot of other stats fields. A mix between Python and R is a perfect combination.
install linux and setup chron? You can have it hosted online for cheap, use your current laptop, or setup an old desktop machine.
You could look into getting a Raspberry Pi. I have one set up to run a Python script every 5 minutes, by adding a cronjob (which is a unix command that allows you to execute any command in certain time intervals). Get yourself a Raspberry Pi, find a guide that explains how to set one up (including SSH access) and you have a small energy-efficient machine that can easily run small Python scripts. :) http://www.raspberrypi.org
Glad I could help. I know from first-hand experience how maddening this can be, because it's the sort of problem where it can be very hard to diagnose what's happening if you've never seen the symptoms before.
For what you describe Amazon EC2 sounds perfect as you are only require very little cpu time. what you want to do is to create a Linux instance, install your scripts and their requirements and setup cron (which allows to run jobs on a regular basis).
You don't *need* a case, but you'd probably want one.
Also bioconductor. People I know switch away from Matlab because R has bioc
What you're looking for is digital ocean. 5$ a month, I run about 15 python scripts on mine, around 10% CPU and mem usage, been running for 8 months. You get a full linux server, I'd pick debian, very easy to setup, takes less than 60 seconds to spin up the server. If you're a student you can get 100$ free credit with [github's student pack](https://education.github.com/pack) 
As long as all we all agree to fight the good fight against Matlab, I'm all for it :p
That and SAS. SAS actually has regulatory capture on the FDA. edit: http://blog.revolutionanalytics.com/2009/02/using-r-in-the-pharmaceutical-industry.html Might be under change since then.
yeah, damn. a bit toolkit optimization here and there doesn’t hurt.
490 thrusts per session? Whoa there cowboy
It's 0.4% to not see any in 30 moves, which is pretty rare. However, you got 4 in a row, which is only a 0.08% chance, even rarer! Randomness is not particularly intuitive. This is why most programmed "random" events (in games and music shuffling and such) actually use a "fair" distribution because that's what most people expect when they hear "random!"
This is fantastic, right up there with [steam locomotive](https://github.com/mtoyoda/sl).
What's childish about it?
Yeah, although Fortran is still a good choice for numerics, although I would use a newer version myself. You know all the warnings about optimization? Only in key spots, when actually needed, for libraries, etc? Numerical analysis is full of that, so the predictable, minutia focused nature of fortran is a strength, not a weakness. Plus, it is embedded in the culture, gets optimized for numerical work, etc.
I'm making the transition from R to Python so I can diversify. I am a Python noob but so far it's been pretty straightforward to do R things in Python. Pandas has been clutch since it gives Python data frames. I installed Python and Anaconda and have been on the path for a few weeks (YMMV). My goal for 2015 is to do any non-urgent analysis in Python while doing urgent stuff in R (since as of now, it's faster for me to work in R due to familiarity). 
Many Thanks the Feedback @ eagle_with_a_gun. As we move forward, We will take all your concern into account.
&gt; (P.S.: a working code would be appreciated, esp. if it's only a dozen lines or so.) So you are asking people to do it for you? &gt; Also does youtube officially provide some API for python for such tasks? or some restful API if not python API? webservice? (there are so many ways and I'm not even familiar with them or with the best way). &gt;I've heard of a web-scraping python module often talked about. Beautifulsoup? scrapy? something else? a combination? Do basic research and then ask a question. This is offensive 
Who knows if Matlab can even be displaced in academia
Thanks @Paddy3118, we will address these concerns as we move forward. 
This can be done in matplotlib however perhaps pygame is a better choice depending on what you're actually trying to do in matplotlib you would attatch a listener to your current figure (window) using mpl_connect() something like cid = matplotlib.pyplot.gcf().canvas.mpl_connect('key_release_event', on_release) matplotlib.pyplot.gcf() returns an instance of the current figure. The Figure has a 'canvas' which then in turn has a method mpl_connect(). So you call the function mpl_connect as figure.canvas.mpl_connect(). This tells the current figure to listen for a 'key_release_event' which is what happens when you press and then release a keyboard key. When it detects that event it calls the method on_release(). Thus you would also have to have defined an on_release() method def on_release(event): if event.key = 'right': # do something when right key is pressed elif event.key = 'left': # do something when left key is pressed elif event.key = 'up': # do something when up key is pressed elif event.key = 'down': # do something when down key is pressed else: # handle the situation if a non-arrow key is pressed The on_release() method takes the key_release_event as an argument passed to it through the mpl_connection. The data about which key was pressed is accessed by the 'key' variable contained by the event via event.key. Then you code in what to do if the event.key matches certain scenarios (such as arrow keys). Unless you can provide a more specific question or statement of what you're trying to accomplish I can't really do much more than the above outline. I'm not familiar with pygame but I think it would be useful for this type of scenario moreso than matplotlib - just wanted to show you that it is possible with a pretty small amount of code with matplotlib.
Haha sure if you want, just give me a shoutout on the sidebar or something. I've updated it so that it asks your gender and penis size if you are a guy. I also have it calculate how much semen has been produced in terms of 2 liter bottles and gives a comparison in distance between two cities.
What specifically? Thresholds and blurs are important, common techniques. . .
i feel kind of insulted...im whitehat all the way :)
Throws critical error shuts down computer causes crash planes go down NSA. Illuminati. xX420BlazeNoscopeXx python doesnt like virgins
polish his cock program and make it GUI
`import spam.eggs` works in Python 3 provided spam is a package and eggs is a module. `os.path` appears to be a weird exception and I don't quite understand how it works: py&gt; import os.path py&gt; import os py&gt; os.__package__ '' Edit: that means that `import functools.partial` won't work. edit again: it works because the `os` module includes this line: sys.modules['os.path'] = path 
I need to add that one.
Pythonanywhere.com sounds like the perfect answer to your desires, surprised it hasn't been suggested yet. It's super easy, you just run your scripts there. They call themselves "Batteries included" for a reason, they are likely to have all of the modules you could want already. Finally, you can indeed make a free account for running scripts, but internet access is highly limited on a free account. 
I don't really understand the need to choose. Both can be very useful to learn and have different strengths/usefulness, and are not difficult to interact between. I would draw the distinction that for 'traditional' statistics, R has a very large lead. If you need a lot of algorithmic work or data processing- Python might be easier to work with.
/r/learnpython please. That's why you're getting downvoted.
Hey guys, the fix for quicksort is now implemented. Thanks again for your feedbacks. My main focus presently is getting pre-release users for Prefies (www.prefies.com) , the parent startup/company of geekviewpoint. So please bear with me as I make the recommended changes and expand geekviewpoint to include your requests for additional solutions.
I am relatively new to python and still learning tricks of the trade. I found this easy to understand &amp; helpful in my app development
If the severability clause of the contract allows the hotel to cancel and pay a penalty, and they think they can make more from One Direction fans than they would from Django people, even after paying the penalty... 
Yeah, YouCanBookMe is particularly good at this kind of project. They have the ability to integrate with many other apps, either directly through their web hook or though an app like Zapier. Consider using YCBM for your main problem and then solving a related problem with your programming skills.
Hopefully, next time I'm having sex, she won't ask why I'm quietly counting. Oh, its a reddit thing. Just trying to estimate how many miles of cock I've given in my life. Also, who has sex an average number of times per week since they lost their virginity? I hope OP takes an underflow error into account.
Kickass.to ...?
&gt; there's no such thing. &gt; Only true masters I'm a bit conflicted here. :-)
Hitmen: The history of being really super duper sneaky 
How i did it on OSX in just a few minutes (clearly not production ready but this is just to get you started with dev) * Download Redis and run it (http://redis.io/) * pip install celery * create a tasks.py file (you can name it however you want) import celery app = celery.Celery("tasks", broker="redis://127.0.0.1:6379/0") app.conf.update( CELERY_TASK_SERIALIZER = 'json', CELERY_ACCEPT_CONTENT = ['json'], CELERY_RESULT_SERIALIZER ='json', CELERYD_CONCURRENCY = 4, ) @app.task def doIt(): print "hello world!" * start the broker celery worker --detach --loglevel=WARNING --logfile=./log/celery.log --pidfile=./pid/celery.pid --app=tasks * sample flask app import flask import tasks app = flask.Flask(__name__) @app.route("/") def about(): tasks.doIt.delay() return flask.render_template("index.html") if __name__ == "__main__": app.run(debug=True) 
Like any other piece of software. Get your requirements, design it and execute the project.
Very interesting... I don't suppose we could get a peek at one of the notebooks?
D:
Really cute idea! :-) Tiny changes required to make it work with Python 3: change xrange to range (you can probably do an if sys.version ... kind of statement to keep xrange working); this needs to be done in two files. In the main file, replace print by print(). 
Thanks for providing this. It's always good to see people getting into Python. I have some constructive criticism. From an implementation point of view * I notice you've done `import *` which is bad practise. Yea I know it's in the pygame docs, but it's terrible idea. Here's why. Once you "from X import *" you load all of the symbols in module X into your namespace. You don't know what all those symbols are and if you accidentally clash with something you've written, or with another module you've imported, you're going to have some fun debugging things. "Why is this var changed? I don't change it unless the user presses X. The user input function must be bugged. (10 hours later, no bug in input is found). Oh heck, some other module is overwriting it as it has a var with the same name." * You have a lot of `if` clauses with mutually exclusive conditions. `if key='s', if key='g'` or `if event=X, if event=y`. Only one of those can be true on any one iteration so this would be more efficient if written as `if` followed by `elif`s. That way the interpreter knows it can skip all subsequent `elif` after an `if` matches. Otherwise it has to evaulate all the ifs. Seems like a small thing but you're doing that inside your core loop and that's the worst place you can have additional overhead. From a design point of view ~~* I would have precomputed all the rotated shapes in order to save time. You probably don't really want to do 6-7 row and column adjusts each time the rotate button is pressed.~~ Actually, I don't like the way you've done it - but its not really wrong so I'm deleting this. From a deployment point of view * You're on Windows I assume? You don't have a #! in the first line of the main script, so it's not directly executable on *nix boxes. If your first line of the main file is "#!/usr/bin/env python2" it tells Linux and Macs that it's an executable script and what to use to execute it. It's also still a comment in Python so still works on Windows. * Coders generally prefer sites like github vs 0-day Warez hosts. One of my machines (the Windows one) has security software that autoblocks sites like TinyUpload. In terms of licensing * You don't appear to have a license in your code so we don't know what we can do with it? Do you want people to fix som stuff in it for you? You need a license to make your intentions clear. * I'd be more worried about the RIAA for the music, than about Lego. Lego at least have a sane digitial policy.
Awesome! Please keep us updated on the matter. 
Thanks!
Thanks for the tips- I'm used to writing for just 2.7 but it would be a good idea to keep compatible with 3+.
 &gt; I do some work in R and find the syntax just hideous. More than that, it feels ad hoc, glued together and therefore unpredictable and full of hard to remember special cases. Ugh, so much this. I don't use it that often, and only because of the rich libraries you mentioned, but when I do I feel like I have to relearn it yet again because my brain refuses to retain it. This philosophy of clutter extends to CRAN and the naming of packages. I wish someone would write something like CoffeeScript for R that would provide a more usable syntax.
Nicely done! I'd recommend taking advantage of test generation in `nose` or `py.test` in places like [this][2] where there are multiple test cases in a loop. Test generation via `yield` in those cases lets each iteration of the loop be its own test case which can pass/fail separately from the others, instead of short circuiting the test when one case fails ([example][1]). [1]: https://github.com/flask-restful/flask-restful/blob/bf983cf706c9f55e5789f621f2ce9182f01d9636/tests/test_inputs.py#L42 [2]: https://github.com/coleifer/walrus/blob/f64ddbc26b1b89b19ebb3a9589b3606986811bef/walrus/tests.py#L158-L168
Awesome! From the moment I read your other tutorial, I started researching how to do this. The next step for me is to figure out how to get multiple users to use the app. If you already know, I'd appreciate any guidance you'd give. Otherwise, I'm sure I'll find out how. Thanks for these tutorials!
We can use python onbuild docker images to simplify our Dockerfiles * https://github.com/docker-library/python/blob/d550e292eec57e83af58e05410243d387d6483a8/2.7/onbuild/Dockerfile
if you are curious, yes Python has that feature, it's called pip. You call it from the command line, e.g. "pip install package-name".
From what I've been seeing, Matlab *is* being displaced in academia. It just takes time.
Yes, totally. Thanks for the suggestion!
FWIW, I worked with /u/aclark/ at NASA. From personal experience, I know he's a very smart coder. Therefore, I suspect on the requirements issue he was just following the Heroku example of not pinning them at the absolute beginning. That's readily fixable with a `pip freeze`. Thanks for the mention of me and /u/audreyrg's book!
Shhhhhhhhhhhhhhhhhhhhhh *runs off*
Sleep is in milliseconds.
/me waves to pydanny Yeah, no good reason not to freeze requirements.
Machine learning is precisely where I'm seeing the most displacement take place. Scikit-learn is pretty much *the* reason people are leaving Matlab. Perhaps you should change labs?
Hmm I was under the impression it was still ubiquitous - obviously not. I'm a while from starting my phd anyway so I'll see what the landscape is like at that point. I'm planning to evaluate some features of R and Py soon, so I'm not biased myself to anything. What's your topic and do you have any advice if I may ask?
I feel like we could do a poll and see what kind of projects people here would like to develop. Then develop it together, there's definitely a lot of experienced programmers around to help shape/steer the project. Then debrief and start a new poll.
It looks like you are using lxml to parse the data which is a good approach. I can't tell what scraperwiki is actually doing for you. I think the best approach is to keep your scraping approach with lxml then save it via csv or maybe into a sqlite db.
your program asked for a "numer", note the spelling. The number of carets: `_` in your smiley face needs to change based on the input, which you saved in your variable `a`. But you don't yet use `a` in your output. You need to. Please consider posting beginner learning questions like this to /r/learnpython instead next time.
I guess since you're learning it would be better to get a hint rather than the whole answer? If so, here's a place to start: print("^" + ("-" * 3) + "^")# -&gt; "^---^" print("^" + ("-" * 5) + "^")# -&gt; "^-----^"
hint: smile_width='_'*a Better hint: Try /r/learnpython
Ohh srry, thank you guys
In case you care, I now do this. I had trouble making coverage work properly with it, but I wanted to have a second coverage free run of the tests anyway, so I first run the tests against the source directory with coverage on, then have a separate test stage that installs the package in a virtualenv and runs the tests off the installed version. Pleased to report no issues, but I can definitely imagine it will save me some grief in future.
It feels like a bit of a hack using the Graph API Explorer to get the access token - shouldn't that be done programmatically using your app secret and ID? That'd also allow you to refresh the token when it expires.
Pyhothesis might have been a good name for this.
I'll check that.
Sure! I cribbed most of the implementation from [cybojanek's redis array implementation](https://github.com/cybojanek/RedisArray). Because redis implements the list type as a linked list, certain operations are O(n) like `LINDEX` and `LSET`. An array type would give O(1) index and set operations. The array type is implemented with lua to ensure the atomicity of the operations. Behind-the-scenes, the data is stored in a hash.
Reminds me of [this](https://pypi.python.org/pypi/pytest-quickcheck)
Nice write up, nosey bowler. Put your shoes on!
You have the possibility of running them for free (if they're relatively small) by using the free tiers of PaaS (platform as a service) offerings such as [Heroku](https://www.heroku.com/) or [OpenShift](https://www.openshift.com/). As mentioned by another poster, [Google App Engine](https://cloud.google.com/appengine/docs/whatisgoogleappengine) is another possibility. All of these have free pricing tiers.
&gt; consistent introspection across python 3 and python 2 over the past two days. It's not much fun doesn’t sound like it. the internals of course got totally moved around. but than again, what bigger, user-facing libraries do that or bytecode manipulation? i think those layers are very sufficient for most code out there. and the rest could have switched to python 3 completely, killing python 2 support. but something went wrong in communication and we have enough people sticking with python 2 that there’s pressure for everything to maintain compatibility.
Well I mentioned bytecode manipulation because the library you were complaining about not supporting python 3 does it. :-) Bigger user facing libraries that depend on the details of the object model definitely exist - anything which uses metaclasses (e.g. Django models) has to be careful about version compatibilities. I don't think that one is *too* bad but I've never tried so I wouldn't know for sure. Pytest is an example that does bytecode manipulation, though they just bit the bullet and support both anyway. The thing that I think tends to cause more drag for larger user facing libraries is the C API. As to switching completely, it's pretty hard to kill python 2 support when it's the one that most of your users are using. And I don't think it's fair to say that it's a problem of communication - the story with python 3 is still quite painful. Some friends tried to start their new Django project in it quite recently (last year) and ended up going back to Python 2 for a mix of performance reasons and some libraries still lacking support. The whole situation is a mess and it's a real shame, I just don't think it's fair to blame individual library authors for not supporting python 3. We're stuck between a rock and a hard place there.
Still noobie, so appreciate comments. [github](https://github.com/maxtotterman/Javify). It works(still working on it), but I must finetune it kinda **much**. Again, thanks for sharing. Have been learning a lot so far.
Lots of great text search tools, just stuff a Lucene Engine in and feed it the text from the table
hmm... not quite what I'm looking for To give some more context: I have a node graph, where each node contains an arbitrary dictionary of {attribute:value}. For example: a = Node('nodeA') a['foo'] = 'bar' What I'm trying to do is implement attribute reference evaluation: b = Node('nodeB') a['foo'] = '${nodeA}.foo' a.val('foo') == b.val('foo') # desired result I'm looking for an efficient way to identify and evaluate the expression **${nodeA}.foo** Hopefully this makes a little more sense. The lookup is based on arbitrary names, and not necessarily on what's in the current locals() or globals() contexts. edit: used wrong node name in expression
I don't understand where your '${nodeB}.foo' comes from ... your code sample is way too imcomplete for me to understand (sorry). However, I think that you might want to use ``getattr()`` to achieve what you want.
apologies, it should be 'nodeA' in the expression, as a reference to the node created above. class Node(object): def __init__(self, name):
What is the actual problem you're trying to solve here?
 my_dict = {'foo.bar': 'blah'} my_string = '@{foo.bar} blah' while '@{' in my_string: token = my_string.split('@{')[1].split('}')[0] my_string = my_string.replace('@{' + token + '}', my_dict.get(token, ''))
If I'm going to write my own parser, I would end up using something more robust (regular expression + findall())
edited OP to hopefully make this clearer
Can't really be bothered going through the code, however the exception is giving you a pretty big clue. Mainly: MemoryError The module is probably trying to keep everything in memory. Solutions rewrite everything to store in some kind of database, or increase the memory of the computer where it runs.
You're a good friend
http://rosettacode.org/wiki/Rosetta_Code
There is a little issue with the documentation at the moment ([API documentation](http://pydealer.readthedocs.org/en/latest/code.html) isn't showing up), but that should be fixed soon. I'm still new to all of this documentation stuff (using Spinx and readthedocs). I believe I just forgot to add a line to the `conf.py` file. Oops! The "[getting started](http://pydealer.readthedocs.org/en/latest/usage.html)" section of the documentation should be enough to figure it out though. If not, just open up [the source](https://github.com/Trebek/pydealer), and look at the docstrings. I tried to document everything well enough. **Edit** Fixed the documentation. All working now.
The landscape for making games in Python (especially Python 3) right now is pretty bleak. There are a number of reasons that this is the case, but I really think that the bulk of it boils down to performance. Take the poor performance of the CPython interpreter, combined with a lack of good high performance alternatives for Python 3, and you end up with a pretty well-deserved reputation for bad performance. Web developers don't really care all that much about this, as most web applications are constrained by IO and database performance anyway. Scientific programmers have really, really good tools, and being able to work nimbly with their data sets in real time is more important than performance. Game developers (especially game framework developers), though, look at these performance issues and get severely discouraged. Also, deploying Python applications on the one platform that people actually *play* games on is far more difficult than it needs to be.
If values don't need to be Python expressions, then perhaps consider using YAML (and YAML anchors).
Thank you! You can make multiple decks with PyDealer, if that is what you mean? You'd just have to instantiate two (or more) decks: import pydealer deck1 = pydealer.Deck() deck2 = pydealer.Deck() Then you'd have two separate deck instances. You can even easily combine the two decks, if that is what you need. deck3 = deck1 + deck2 # or deck1 += deck2 I'm not sure if that is what you mean though. You can make as many deck instances as your computer can handle. It's up to you how you use them. I guess you could use two separate deck instances in your blackjack odds script, unless I am misunderstanding. My little package doesn't really do anything except the work of creating deck objects, full of card objects (both of which have a number of useful methods built in). It doesn't do any sort of hand evaluation for blackjack, or poker, or anything like that. It would be up to the user of PyDealer to figure out how to use it in their project. **Edit:** On a bit of a side note, you might find this little script interesting/useful: [https://gist.github.com/Trebek/8cf64ef60125c1e76560](https://gist.github.com/Trebek/8cf64ef60125c1e76560) Not that you couldn't figure out how to add up the cards in a hand for blackjack, but it demonstrates how you could do it, using PyDealer. **Edit 2:** I just want to add, for clarity's sake, that the point of PyDealer is to let users focus on what they want to do with the cards, and not have to write all of the stuff included in PyDealer. You need a deck of cards in your project? Done (`deck = pydealer.Deck()`). You need a hand as well? Done (`hand = pydealer.Stack()`). You need to find a certain card in either the deck or hand? Done (indices = stack.find("ace of spades")). You want to get/remove all cards of a given value/suit from the hand/deck? Done (`cards = deck.get("diamonds")`). My point is, you don't have to worry about that kind of stuff. PyDealer has your back. And any features it doesn't have are probably easy to implement with it.
Thing is... for 99% of 2D games, the performance limitations of python really is not an issue if the game library and application are written well. Python's syntax has so much to offer. Even if you did have performance issues you can simply do the bottleneck parts of you code in native code and simply link it. Libgdx and Unity look good but I really don't wanna deal with Java or C++ for quick prototyping. I might look into Lua if python doesn't work out. 
&gt; One does not simply link native code to Python If you already haven't, look into Cython. 
Careful though, not all Python libraries are supported on GAE. https://cloud.google.com/appengine/docs/python/tools/libraries27
Cython has the same problems as using C on Windows. Either build a funky version of Python with MinGW, or somehow get the build tools to locate the correct version of Visual Studio to do the actual building. The MinGW only works if you don't care about distributing it. If you want other people to play your game, you gotta use Visual Studio. The good news is that, on Windows at least, you only have to do it once per version of Python. The bad news is that you have to do it once per version of Python. Also, asking people to install Python to play your game seems to be harder than it should be.
&gt;Also, asking people to install Python to play your game seems to be harder than it should be. [Pyexe.](http://www.py2exe.org/)
Yeah, that's a good solution to that problem. Though, I could never get py2exe to build my extensions correctly. The documentation on using custom extensions with py2exe is... lacking... Though, I suppose that you only have to do it once.
Do yourself a favor and use unity. Ive been developing in python for years now, I've explored the possibility of making a game in python because I love it so much. But like /u/the_hoser said, the landscape is bleak. C# with Unity and visual studio is amazing, I'm really loving it. Also, when it comes time to distribute your game written in python its going to be painful. But distribution is another area where Unity shines. 
If you need a full blown search, you can try to learn elastic search, solr/lucene or just use mysql [full text search](http://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html) but before all of that, do you really need them? May be [use the index Luke](http://use-the-index-luke.com) is all you need.
Use bandernsatch instead (https://pypi.python.org/pypi/bandersnatch).
Did you mean self.loaded_urls = self.loaded_urls[1:]? [1:] returns all items except 1st, [:1] returns only the first item. I'm pretty sure you're getting IndexError because you're using [:1]. After that your list contains only one element and you're trying to get the second. Use [1:] to fix that.
Hi, Core dev from Kivy and creator of the [KivEnt](http://kivent.org/) game engine for kivy here. KivEnt has been in development for nearly 2 years now and can provide many performance improvements over standard kivy. The project is still fairly 'prerelease' status, but even then some users have done cool stuff: /u/chozabu have game alpha out on [play store](https://play.google.com/store/apps/details?id=org.chozabu.boardz&amp;hl=en) for the android deprived: [youtube](https://www.youtube.com/watch?v=SFVvMv0d54g) he have also built a cool [graphical editor](https://www.youtube.com/watch?v=oi564c2GDJ0). I think the reason you probably can't get kivy working on OSX with py3 at the moment is that you need to install a different pygame branch from normal (not an OSX user myself, just know this comes up frequently) Probably why Pygame isn't working on py3 either. We are working on replacing Pygame and improving OSX deployment at the moment. KivEnt itself is entirely coded in Cython so it should work on py3, but I must admit at the moment the Android tooling for Kivy is stuck on py2, so I mainly target and use with that day to day. Cython code compiles for both py2 and py3 automatically. 
If you use both slashes like so: /r/chozabu then Reddit will automatically linkify the subreddit for you.
Cool, now I can simulate Kripparian topdeckin pyroblast.
Only problem I see is that you're checking if there's an element (object) in a list and if it's false you're adding actual string to that list. This condition will never be true. You should check if there's a link.get('href') in a list and that will be fine. BTW: take a look at python sets.
Are you wanting the key pointing at `${nodeA}.foo` to automatically update when `nodeA.foo` is changed? e.g. b = Node('nodeB') a['foo'] = '${nodeB}.foo' a.val('foo') == b.val('foo') # desired result b['foo'] = 'another_value' a.val('foo') == 'another_value' If not, why not just b = Node('nodeB') a['foo'] = b.foo a.val('foo') == b.val('foo') # desired result Do you want node references to be global?
I don't know what the hell that is, but it sounds pretty awesome. Hope my crappy little package can help you out with that.
Consider a solution based on the linux seccomp system call. http://chdir.org/~nico/seccomp-nurse Also: http://pythonsweetness.tumblr.com/post/65442885019/secure-low-overhead-eval-sandbox-in-80-lines-of https://github.com/dw/scratch/blob/master/seccomp.py
You probably meant PyPI : the Python Package Index (https://pypi.python.org/pypi) PyPy (http://pypy.org/) is an alternative Python interpreter which (can) contains a JIT and is usually seen as very fast.
...For that matter, why not [Unity with Boo](https://en.wikipedia.org/wiki/Boo_(programming_language\))? Unity does not really care which .NET platform language it gets called from, and in fact, the standard Unity kit includes Boo already. It's about as Python as you can get.
Hearthstone (HS)is an online card game from Blizzard, a big game company. The origin of HS is in the lore of another Blizzard game called world of warcraft. Kripparrian is a famous livestreamer on a platform called Twitch, which plays a lot of HS.
No particular advice on what tool to use exactly. I only have enough experience with Cocos2d: it has evolved into something that is only actively maintained for other languages (sadly). It's great though, but you should switch languages to use it. Regarding Pygame, and since it looks like you're on OSX: I installed it successfully a couple of days ago. I agree instructions are all over the place. It's going to seem weird but what worked was described in a youtube video: https://www.youtube.com/watch?v=L0Cl4Crg7FE Expand the description of the video, it'll list all the commands you need. I'm not a homebrew user typically but in this case there is no way to success without using it. The only thing is that it mentions tcltk at the top. I skipped it as I thought it wouldn't be needed and looks like I was right. Now I have python 3.4 + pygame on OSX.
As of version 1.6, [Pip has it's own internal cache that is on by default](https://pip.pypa.io/en/latest/reference/pip_install.html#caching) which renders the setup described in the article obsolete.
At the time I played a bit with cx-freeze. It took me about 10 minutes to produce a complete standalone PyQt application on Windows, including Python, Qt and PyQt. I tested it on a friend's computer which had nothing installed and it JustWorked^TM .
You are incorrect. Pip doesn't cache wheels if they aren't available on pypi. It might in the future ;)
I think there are some options that disable unsafe side effects of eval, like executing functions, etc. I just found what i meant: [eval function from ast module](https://docs.python.org/3/library/ast.html?highlight=eval#ast.literal_eval) *Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.* *This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself. It is not capable of evaluating arbitrarily complex expressions, for example involving operators or indexing.*
I will take a look at the wiki, if it is listed there too? 
&gt; obviously you don't want to take my word for it. Not really. You haven't given me a good reason to (link?), but testing it is still a good idea: $ echo $PIP_DOWNLOAD_CACHE $ echo $PIP_WHEEL_CACHE $ rm -r ~/Library/Caches/pip $ pip install --use-wheel requests Collecting requests Downloading requests-2.5.1-py2.py3-none-any.whl (464kB) 100% |################################| 466kB 5.0MB/s Installing collected packages: requests Successfully installed requests-2.5.1 $ pip uninstall -y requests Uninstalling requests-2.5.1: Successfully uninstalled requests-2.5.1 $ pip install requests Collecting requests Using cached requests-2.5.1-py2.py3-none-any.whl Installing collected packages: requests Successfully installed requests-2.5.1
That was *not* my experience with cx-freeze. I couldn't get it to work at all. I guess we were using different versions. 
Spyder is a Python program which makes use of various libraries installed (like PyQt); they in turn are likely different for Python 2.7 and 3.4. I suspect that you need to install Spyder in both Anaconda distributions. In general, /r/learnpython is probably a better subreddit to ask such questions.
 &gt; I can't imagine this kind of thing happening in any other language ecosystem. Imagine Perl. What frustrated me, was that this has become a knee jerk reaction. Whenever I see anything about an interesting new library, I guarantee there will be 'the py3 comment'. It's open source. Please don't dismiss someone else's generous, free, and in this case quite brilliant, efforts. Heck, in this case it's even a Russian native who's gone to the effort of producing bilingual documentation with profiling and graphs. At least treat it as 'doesn't *yet* support py3'.
College level shit. (High school for you). I literally couldn't be bothered. Also found a cool equation for the area of triangles, if you know the side lengths. Hooray.
Did you read the docs? I had a lot of problems with cx_Freeze and py2exe in the past, because I couldn't google my problems. Finally, I just bit the bullet and read the docs. I was able to convert a full pygame game, and a full tkinter application. The main issue with either of these is you just need to explicitly list some modules or files that it just doesn't recognize for whatever reason. Either way, the docs are actually quite useful. 
I did read them, and I didn't find them very helpful. Mind you, this was *years* ago, and I wasn't the only one complaining about the documentation at the time. Maybe someone on the project figured out that this was a real pain point, and fixed it.
thank you..how solved it ?
Thanks for pointing me to this! KivEnt looks cool. I hope you guys keep working on it. I'll try and get it working on my mac and report back. 
Pyglet is awesome and I do use it! It's just that I'd rather have a lot more functionality already implemented. You're right that what I'm looking for is a game engine but even a library with a few extra features is better than nothing. 
Oh I remember seeing this before and forgot about it. I've used SFML before so this may work. I'll check this out. 
Thanks I'll try this. This might also make Kivy work. 
&gt; Cython is a -static- compiler for python. To be pedantic it compiles Python code to Python extension libraries using a C compiler - so you (a) need a C compiler installed, and (b) still need to distribute Python to run the extension! &gt; [Nuitka is] another compiler for python Nuitka also requires that you have a C++ compiler installed, because it generates C++ code which is then compiled into your executable. So the downside of both of these are that you need to set up a C/C++ toolchain to get it working, and only one of the two produces an actual .exe you can distribute.
Thanks. I was in this process of building my own little library with pyglet so I might look into just using this. 
&gt; Libgdx and Unity look good but I really don't wanna deal with Java or C++ for quick prototyping. Unity isn't C++ - it uses Javascript (or technically Unityscript, a derivative) or C#. In my opinion C# is probably the next best thing to Python in terms of being fairly easy to use, but with some benefits like static typing. The Unity/C# combination also cuts out all the toolchain issues that you're normally get with a C# (or C++) approach, too. So don't rule it out entirely.
Is Unity quick to get started on for small 2D games? It looks really heavy to me. C# is better than java in my opinion but its still much heavier than I'd like. 
Shouldn't `irc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)` be inside `__init__`? Otherwise the socket will be created when the module is imported (I'm not sure this is intended). Also, method names should be lower case and `underscore_spaced`. edit-- In fact there are a lot of PEP8 violations. Spaces are not a multiple of four, missing whitespace around operators, missing whitespace after ','. The module `sys` is imported but never used. I think a tutorial should follow commonly accepted style guidelines to promote good standards.
You can send an email to your providers SMS gateway. That's how I email my phone and get a text instead. Example for ATT: {10 digit number}@txt.att.net
Please do share when you've published it!
Oh, that went totally over my head.
Why aren't you using networkx or something similar, or following their approach? You almost certainly don't want to force users to write string expressions to connect nodes, you lose tab completion and syntax checking. Python gives you enough metaprogramming flexibility that you rarely need to write your own parser to implement DSLs. How about implementing `__getitem__` to wrap the return value in an `Attr` class that knows its node? Then `__setattr__` can check the type it's getting and know if it's a link to another Node.
also wow I'm an idiot, apparently using the # makes things big lol
Thankyou and thankyou. After I posted this I think I settled on that conclusion before heading to bed. That's unfortunate. I'll go ahead and post this in /r/learnpython for some more opinions. Take care. 
Updated.
You are guys are creating python cli apps for spotify already, damn spotify not even available for my country.
i’m sorry that my frustration ended up here, and i hope the author either won’t see it or will take my comment lightly. it’s the possibility of this happening that annoys me. the fact that the idea of starting something new in python 2 isn’t completely absurd in 2015! this language had an official successor for 7 years. seven! (perl 6 doesn’t compare because it’s basically an experimental fork: community-driven, no plans to give up perl 5 for it, not even feature complete)
Si hablo Español estamos poco a poco creando mas contenido. Estamos tratando de ayudar con los problemas economicos en PR. 
The problem is, GUI is a pain. Even a button, which is trivial to implement by yourself in isolation (if click within this object's rect, call 'clicked' on object), become tricky in the context of any sort of GUI, because it has to hook in to the graphics (where does the GUI render relative to the rest of the game?) and the input (does a UI element consume a mouse click?) So most libraries just don't bother and expect you to come up with it yourself. (Even Unity did an appalling job of GUI handling until recently.) In the past, I've used the [Kytten](https://github.com/kitanata/kytten) GUI with Pyglet, but found it lacking. Before that, I used [SimpleUI](http://swiftcoder.wordpress.com/category/simplui/) but that too was lacking! The C++ library SFML is great, and that has a great GUI library called SFGUI. SFML has bindings for Python... but I don't think SFGUI does. :( Also those bindings appear to be out of date. etc etc... Python is basically a wasteland for game developers. Ideally someone would take over pyglet, update it to use modern OpenGL methods, and port over some ideas from decent libraries like cocos/Flixel/Flashpunk/etc to make it more capable. Maybe if someone pays me... :)
How does this method of learning stack up against a self-learning method (e.g. *Dive Into Python 3*) ? Considering DIP3 is 462 pages of content (not including the section on how to install Python), will this course only cover rudimentary topics that are already included in DIP3?
Um, work hard to stop being mediocre then get a job? Like [this person](http://www.reddit.com/r/learnpython/comments/2s7u2s/what_are_some_projects_i_can_do_to_show/).
I was about to write a script to brute-force the names. But then I saw the hexdigest. So I knew the first piece. After that I gave __builtins__ a hard stare until I could fill in the rest. The biggest clue for that was the 'unique'.
I used the CodeAcademy Python course, which was super duper awesome. Highly recommended.
I think not just for this particular course but for any course, it depends on the person. I for one can never learn from a course and learn faster just going through a book and in general working on a project or just using the language and learning things on a need to know basis. This is how i learnt gw basic 25 years ago, C 20 years ago, and perl, php, python along the years. On the other hand, there are also many people who could only learn from a course first before venturing out on their own. The best is to try I guess.
&gt; take over pyglet, update it to use modern OpenGL methods What do you mean by this? Pyglet looks like the only well maintained library out these. I've used it and I'm not sure what you mean by this. Do you mean that it uses old OpenGL functions underneath? Or that the you can only use older functions on the provided OpenGL context. 
sounds great...next session is october though.
Check out [Kivy](http://kivy.org/) Here is an app which uses kivy: - [2048](https://play.google.com/store/apps/details?id=com.meltingrocks.kivy2048) I am sure that you wont be disappointed.
hope you like it and learn a lot! :D
I don't think so. The Sessions box shows October, but if you drop it down it shows sessions in February and June as well.
I recommend to initiate in Codecademy, then try this MOOC... you have some knowledge of the sintax from the first site and later put into action in this course :D thanks for your input :)
This is awesome! I just started learning a little bit of Python this week after studying C++ for a year and a half, and so far I am loving it. I didn't know it was such a popular language. And I guess it makes sense that colleges start with C++ if it is the hardest, because once you go up the biggest hill, you can go up any hill. But I don't think it is the hardest. For me, it is the easiest to read/understand the code.
pysdl2-cffi is my straightforward SDL2 binding, it works on Python 3 on OSX. The point of writing it with cffi is that cffi extensions work well with pypy for speed. On OSX after installing the SDL2 framework builds pysdl2-cffi will be able to run. https://pypi.python.org/pypi/pysdl2-cffi?
I see, it wasn't intended to be condescending or assholeish. Perhaps I should have expanded 'work hard' to something more concrete, like 'study the areas that interest you (using, for example, the free resources linked heavily in the sidebar of this subreddit) and develop your marketable skills so until you no-longer self-assess to being mediocre.' OP, if you can share more about your specific interest areas, or share a job posting that you're interested in being eligible for, I would be happy to suggest some concrete next steps.
That also doesn't work :) It's OK, I'm pretty sure the feature isn't in Pycharm yet. I emailed them a while ago to ask if it was in there somewhere but they said it wasn't. Although, I'm surprised that since mypy has it, they didn't just use that as a guideline.
Yeah, I hear you. The thing for me is that I'm using Python on a daily basis for projects at work (very math heavy), but oftentimes I find that my self-learned knowledge can be really lacking when it comes to implementation because I didn't take the time to learn the fundamentals of Python first. As a result I end up with programs that are a lot slower, and a lot more buggy.
"slightly hard way" -&gt; C "really hard way" -&gt; C++ hm.
To be fair /u/sharplikeginsu put more effort into that reply than OP put into the question. Shit question, shit advice. The circle is complete.
You should cross-post this with /r/learnpython. I think someone was just asking for alternatives to Learn Python the Hard Way.
Then Cython is probably not what you're looking for. Look into [cffi](https://cffi.readthedocs.org) for simple binding with C code and Weave for compiling and running C code on the fly. Both are fairly well documented and easy to set up. 
Facebook uses multiple languages for different parts of their stack. But yeah, much of the front-facing/legacy stuff is PHP.
Excellent instructor. 
Excellent work on this! I started building a dashboard that followed some of the same fundamental concepts, but wasn't nearly as pretty. My original goal was to provide HTTP end points for integration with Tasker for the components of my house that weren't already Tasker friendly. I started by automating my Samsung TV over ExLink (RS232) and my Denon/Marantz receiver over Telnet (TCP). I ended up abandoning the project after I broke my Harmony remote and picked up one of the newer units with Home Automation integration and an IR blaster rendering the originally purpose for my project unecessary. Anway, this is a long way of saying that I have some Python libraries for controlling Samsung TVs via ExLink and Denon/Marantz networked receivers if you want it. The [Samsung ExLink](https://github.com/iamcanadian2222/SamsungExLink) code is posted publicly and I would be happy to post the Denon/Marantz code if you are interested.
You really need to check out LibGDX. I know that it's not Python, but it has all of those things, and does them *well*
I'm a C fanatic too, but you can't deny that C++ has more content to cover. I would argue it's harder to learn C++ because of how it awkwardly tacks on high-level practices to low-level implementations, forcing you to constantly think in two levels.
I'm not entirely up to date on the changes to modern OpenGL but I've been told that pyglet is restricted in some ways due to using the older methods, both in that it uses older methods for its sprite rendering and perhaps in that you are restricted in what you can use on that context. Either way, it would benefit from more work being done to keep it up to date and add a few features, and it's not really well-maintained - [only one person has contributed in the last year](https://code.google.com/p/pyglet/source/list) and there are 26 defects in the issue log which show little sign of being resolved. :(
can't we all just get along?
Like the [logic module](http://docs.sympy.org/latest/modules/logic.html) in SymPy?
I don't know if there's a right or wrong answer to that- it's hard to compare skill, particularly when you're comparing skills in two different settings. My intuition tells me that C++ takes more work to become 'good' at than C does since any self-respecting C++ developer should know some of the 'tricky' bits of C too, but the opposite does not apply.
The basics of the C language as it will take the rest of your life to master it. Then move up to the higher level languages or down to assembly language which can be mixed with C if timing critical.
&gt; Employed data nerds will still use python /s fixed it for you :)
Can you explain why this is better than using Qt which is also pretty cross platform (including Android)? Is Kivy more than just a GUI toolkit?
C is a subset of C++? The hell?
Not really. The only benefit is you get to write code in python. It's slower than QT, although it does provide direct access to the shaders you'll use to render (which QT can do, but involves more hoops to jump through). QT is probably a better choice for a serious application; the kivy ios stuff is still pretty primitive. 
Man, I really should start using PyCharm.
Maybe this sounds weird, but “thinking on two levels” helps me understand the justifications for why a language is the way it is, and gives me something to tack my new knowledge to in my long-term memory.
[How I Became a Programmer](http://mattdeboard.net/2011/11/23/how-i-became-a-programmer/) for one tale. Quit your job, do nothing but learn programming for months on end.
Hopefully C# will gain some ground after Microsoft gone through their Open Source project. I mean I really like python but the enjoyment of writing code in C# is a bit higher. It's to bad microsoft didn't go opensource with their frameworks earlier and spread the love of opensource.
Python is modular. You assemble many small pieces to get what you want. Though easy to use, it's rigid and not very flexible. Ruby, in the other hand, is less modular. You have modules, but you can't import just what you want to use to the local context, so you have to put the module name in front of every class or function call. However, Ruby is far more flexible than Python. You can include new methods to any object and use blocks to implement DSLs that merge neatly into that language, which allows for a great productivity boost.
Really? That's how most people get into whatever they're doing now. No one ever grows up thinking "I want to be a copy ad writer for the 3rd largest producer of soap". I even had this admitted once on an interview with a major starch producer. The HR person asked, "Why do you want to work here? I mean, I understand no one walks into here and goes, "Woohoo! STARCH!'" :-) 
Works very nicely, install was very smooth. And it did exactly what it was supposed to do!
&gt;. You can include new methods to any object We can do that too, can't we? Even with fundamental types via the [ForbiddenFruit](http://clarete.li/forbiddenfruit/) library? &gt; and use blocks to implement DSLs that merge neatly into that &gt;language, which allows for a great productivity boost. I thought it was the opinion of Pythonistas that [decent langauges don't need blocks](http://stupidpythonideas.blogspot.com/2014/06/why-python-or-any-decent-language.html).
Take a look at the requests library too. It can do more than liburl iirc.
The cs61a and cs9h courses from UCB get posted intermittently. I don't see cs9h right now, which is what you're looking for. The later half of cs61a might be interesting to you and is on YouTube straight from UCB.
Someone should post this in Embarcadero's Delphi forum and they'll predictably freak out that Pascal was left off the list. :-) Don't bother posting in /r/delphi because it has &lt; 600 readers. That majority of active Delphi developers actually lament the existence of HTTP and post to their forum via a USENET news server, which fortunately can be accessed through the web as well. Just a bit of trivia in case you're wondering where Pascal users are hiding. Another bit of trivia: in an online exchange a few years ago with Delphi's owner's VP of Developer Relations concerning the colllapse of Pascal as a teaching language, he countered that they had just signed a deal to get into some schools in Mongolia. I wonder if Guido is worried about this....
I use requests to fetch the pages for scraping. but the download itself is tricky. sometimes it is interrupted.. wget handles those things like a champ.
Yeah, that's definitely more accurate, but C++ being a superset of C does mean C is a subset of C++. There are some extra implications to the word, I agree, but it's still technically true.
Ultimately, the "user" is going to be interacting with this through a UI. They'll create a network of nodes that have a list of editable attributes, which will all be strings at the end of the day. I also want to introduce the idea of scoping, but for now let's assume every reference must be a "full path" to the target attribute.
TIL subset can mean the opposite. :S
What? A being a subset of B means every member of A is contained in B. A being a superset of B means every member of B is contained in A. So A ⊆ B is equivalent to B ⊇ A. It doesn't mean opposite. There was probably some joke here I totally missed.
Just went through this. The last section is easier than shown. Pelican will copy the CNAME file for you, and the [docs] (http://docs.getpelican.com/en/latest/tips.htmlgive) give you a simple post commit git hook to use. 
Please tell me the average salaries listed in this info graphic are inflated.
No just averages. High cost places (SF, nyc, london) raise the average while low cost places (Omaha, SLC) lower it.
I kind of thought that too, but then I checked it vs. the Bureau of Labor statistics. They seem to have "Software Developers and Programmers (Broad Category)" listed at $92,820 mean yearly wage. http://www.bls.gov/oes/current/oes_nat.htm#15-0000
Use newer versions of Clang / GCC, they have worked to make the errors better.
I feel as if this is just randomly generated
/u/LukeSkywaIker used a very weird word to describe it, but it is very, very opinionated, arbitrary and just "hey, I'm going to tell you what to learn, suck it". 
No. By default, requests does not retry at all. It is possible to setup retrying -- see [this link](http://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request), but even if you do this, you also need to customize it so that it waits before retrying. So overall, requests is not as simple a solution as wget. BTW, wget itself is available for [Windows](http://gnuwin32.sourceforge.net/packages/wget.htm), at least, on OSX via homebrew, and on BSD via ports. 
The better way of putting it would be that C++ is an *extension* of C.
Have you seen the [MITx course](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0) on Python? "It's too slow" is not something I've ever heard people say about that one.
I agree. Awesome.
I read many tuts, but confused what to follow, so did it my way. any input on this would help.. :)
I'm not familiar with enough programming languages to say if the ones shown are in fact the hardest, but maybe other languages that aren't on the chart could be considered 5-star difficulty.
Hah, you may as well spin a wheel.
You really should. There are so many benefits, it changed python as a language for me, especially the debugger, god damn it's nice.
Yes, he has been teaching intro programing courses at UM for a few years and students love him. He is pretty funny. I wish he had more advanced classes too... 
Ah figured it out! If you import FunctionType from types you can do def test(i: str) -&gt; FunctionType: return 2 What /u/Livesinthefuture was doing was trying to set it as a specific function, rather than the type function
We don't really know, and any thoughts would be just speculation. Granted, there is no pressure on Apple to supply it, as tons of stuff inside the OS that rely on python, ruby, perl, etc. don't rely on Python 3, as it has never been there. Various Linux OS also come with Python 2 (except for somewhat fringe distribution Arch Linux that comes with Python 3 and so it breaks early and often). Windows doesn't come with any at all. 
Sorry, but this also doesn't work. It doesn't warn me when I do this, for instance: from types import FunctionType def foo(f: FunctionType): return f() foo(4) # doesn't show a warning def bar(f: str): return f bar(4) # does show a warning, "Expected type 'str', got 'int' instead" This would probably be the correct way to do it (either `FunctionType` or `Function`) but I just don't think it's implemented at all. It's certainly not in the documentation.
&gt; It makes more sense to say that C++ is a superset of C. Even Bjarne (the creator of C++) frequently repeats this when explaining the differences. C++ was never meant to replace C *or* be a new language, it's C with optional (but heavily recommended) abstractions to make it more secure while keeping most of the performance.
Pure speculation but it probably will be for a while [as in years], I code python on OS X a lot and use homebrew install python2 and python3. I never touch the os python and use the hombrew versions instead which I can keep always updated to the latest. Granted when 3.4 came out , could not find the formula so I had to create my own, but these days you can just brew install it. 
Indeed, but even if .Net can be a big headache sometimes it can also be a very helpful tool. But as you said, the inconsistencies can and will be a problem most of the time
The first one comes to mind is that some collection types use .length and others use .count, and there is no apparent pattern or discernible reason as to why - you just have to either remember which ones are which or lean on Intellisense.
Saying it either way means the same thing. ASCII is a subset of UTF-8, as per the definition of UTF-8.
Do people really do that? Spend what looks like _years_ "learning Python" from various sources (I counted ten categories with multiple sources in most in the infographic) before actually writing real code? If I recall correctly I spent one evening reading the official Python tutorial and started coding the next day. I think you guys are just procrastinating.
For some reason, Ruby is that language that just doesn't make sense to me. I've tried to get an understanding of it a few times, but it just looks strange and weird to my head.
You can monkey patch in Python, too. Though it should be avoided.
Especially the guff about C# === Windows land. Mono has come on so, so much, and is production-able for a lot of stuff.
Whats your background experience cause I had the same problem before.
In order of learning: basic -&gt; pascal -&gt; php -&gt; python -&gt; java -&gt; c# -&gt; javascript Have dabbled a bit with C, perl and brainfuck - but not enough to say I know them Prefer to work in python, and C# as a second choice. Also does a lot of work in JS these days
Brainfuck isn't shown on this infographic
&gt; I guess it makes sense that colleges start with C++ if it is the hardest Absolutely not! Colleges should be teaching Computer Science and/or programming, not the low-level technical stuff. At least to start with. There is a very large number of technical things to learn and memorize in order to use C++. Learning the concepts and essence of programming at the same time is very difficult. The common result is confused graduates with little high-level understanding about anything. IMO anyone who actually wants to teach CS or programming *to beginners* should use a language where it is easy to clearly design and implement high-level concepts *without getting lost in the technical details*. Python is absolutely superb for such purposes, while C++ is not.
&gt; "javascript" is competitive to PHP, but both stomp python and ruby errrrr no
++++++++[&gt;+&gt;++&gt;+++&gt;++++&gt;+++++&gt;++++++&gt;+++++++&gt;++++++++&gt;+++++++++&gt;++++++++++&gt;+++++++++++&gt;++++++++++++&gt;+++++++++++++&gt;++++++++++++++&gt;+++++++++++++++&gt;++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;--.++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+.-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;--.++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;---.+++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;.&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++.---&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;----.++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+.-&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;++.--&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+++.---&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;+.-&lt;&lt;&lt;&lt;. 
I learned to program in Delphi 7 and it's still viable to build applications on it (including servers and databases). I would say Borland Pascal isn't that hard to understand and the Graphical Interface in Delphi really helps (like it is in C# toolbox). And also it's native code! The unique part that sucks balls are threads. Delphi doesn't have properly lock methods and sometimes when it bugs out the application starts writing text on the top of the screen instead of inside the program.
There should be one way to do it.
She doesn't even go to this school!
Python doesn't *only* have pygame. There was a [thread yesterday](https://pay.reddit.com/r/Python/comments/2s8q7r/is_there_a_2d_game_library_or_at_least_a_good_guy/) where people suggested some alernatives, though there are also other library bindings etc. I don't disagree in general that python has far less activity here than lua, just that the focus on pygame isn't quite the full picture.
That diff... it seems to be a bit inconsistent. They remove Hanukkah but not Christmas, and Arab but not Chinese (those are far from the only examples)? What are the criteria here?
It looks like yaml is providing a generator (google it). Try converting it to a list (`data = list(data)`) and maybe only take the first item.
Hi! yaml.load_all is designed to load several yaml documents from the same stream: http://pyyaml.org/wiki/PyYAMLDocumentation#LoadingYAML Because it returns a **generator** over the yaml documents json.dumps can't directly serialize this object. Two solutions: import yaml import json stream = """ --- default: default: line_one: '[I]&lt;description&gt;[/I]' line_three: '&lt;creator&gt;' line_two: '&lt;title&gt; [&lt;type&gt;]' link_to: '&lt;citation&gt;' """ Your stream contains only one yaml document: data = yaml.load(stream) json = json.dumps(data) print(json) Your stream contains several yaml documents: data = yaml.load_all(stream) for yaml_doc in data: json = json.dumps(yaml_doc) print(json)
Short answer: Change it to yaml.load(stream) Long answer: The docs at http://pyyaml.org/wiki/PyYAMLDocumentation for Python YAML show that if your YAML file contains only a single document, you can use "yaml.load" to load the document into a python dictionary, which can then be converted easily into JSON. However, if you have several YAML documents in the same file, you can use "yaml.load_all", which will create a generator that you can iterate over for each document as a dictionary. What your code is doing is creating a generator, and then trying to parse that generator, instead of the first YAML document (which is a python dictionary). 
What did you just call my mother?
badass, thanks. and a dict is effectively just a hash in perl?
Are there any major products that use Mono? I'm too lazy to look it up.
Of course! Given you've had a look at py2exe you seem to know the pipeline of what you want. You probably want to use the PyQt as a GUI install Python x,y and all the above should be bundled together
C++ is like the boss in the video game that comes back from the dead in a later level all suped up.
I meant syntax wise. I've looked at other languages that try to make coding easier, but c++ just has a perfect syntax. I can read the code like it's English. Obviously there's more and more to c++, especially since they might be updating it more often. (Don't quote me on this, I know nothing. Professor is starting to teach some c++11 and said they might be updating every 5 ears or something to catch up with Java. Again I have no idea about this.) But syntax wise, programming wise, it makes sense. The code is clear. After 2 years, I am able to easily fix errors in the error window in vs. My first year, I didn't know what the errors were saying. Now I see them and fix the error in 2 seconds. 
correct, they are both just unordered key:value stores
IIRC Service Stack is primarily developed on Mono. There's also this like Xamarin studios and Unity.
And I can certainly see the issue if you're following the learn C# to get a job at Microsoft paths. I'm sure they're absolutely fine with no windows background.
Having a number of strings to your bow never hurts you, of course. 
Not really. I've not yet seen a single iOS/Mac developer post that hasn't stipulated Objective C as the primary language. And apart from a few people who have done it specifically in order to make a point, I don't know of any professionally-built applications which are built exclusively in Swift. Learning Swift is a good idea, but Objective C is by far the more important language for now.
In all honesty, I'm surprised how civilized and constructive the discussion has been so far. As somebody who uses Python and C++ extensively, I've observed that these things usually degrade into everybody raging about the bit of C++ they know. So I'd catutiously disagree in this specific instance.
Aside from R? Python, MATLAB, Julia, C/C++/Java There are a few domain-spec tools. But, yeah.
They shall suffer in the fires of ignorance. It is for their own good. 
One could always just grab Anaconda or Miniconda.
Hopefully mypy will gain traction and Pycharm can start to depend on it as a standard way of getting type information... which after all is the main focus of mypy and the proposed typing improvements - to help tools analyze the code, provide editing features, and catch bugs
This says what it is. And It's true. 
&gt;Python is my favourite language but I can't recommend it for games because the support just isn't there and shows no sign of coming. Unity and C# are where I'd look. Uh, here's a list of games that use Python... Civilization IV Toontown Online Eve Online World of Tanks... There's more, but yea, it can be used for games and quite successfully.
He's not complaining about the information in the post, he's complaining about the post. And he's right, it happens a lot. You allow image macros / memes / other low effort content and the community soon becomes overrun by it. Most smaller / midsize subs do not allow it, because it stifles discussion and buries more interesting posts. 
The only one of those that comes close to really being "a game made in Python" is Toontown Online. Civ 4 used Gamebryo and plenty of their own C++ code, Eve Online is Stackless Python around some hefty C++ optimization and I/O systems, and World of Tanks is based on Bigworld which just has Python as an embedded scripting language. If you want to use Panda3D, then sticking with Python is feasible. Otherwise, you tend to need a big team and a decent amount of C++ experience.
What about "I have a few ideas from projects, and I was hoping to find a good job, because I'm not satisfied with where I am in life"? Because that's why I'm getting into programming, and while I know your comment isn't intended as an attack on me, it really feels like an attack on people who got into programming because they were hoping to find a job.
inb4 programming language nazis who think theirs is the only one ...
My comment was more of towards the "If I learn to program I can retire in no time since they make sooooo much money" people. The ones who have no drive other than making a ton of money
I must be more new to programming than I thought, since I've never met or heard of these people.
I know the consensus here is to never touch the base python install and use brew to install a separate python. They're right. However, I would tell you to go beyond that, and develop using a virtual machine. With a virtual machine management tool like Vagrant and a provisioning tool like Puppet, Chef, Ansible, or Salt, you'll be able to develop in a tightly controlled, repeatable environment that'll be much closer to your deployment environment. Unless you're developing small scripts to run on your own machine, there are too many inconsistencies between your environment and your production environment that you'll drive yourself batty trying to keep track of it all. Furthermore, there's great support built into PyCharm not only for Vagrant, but also for remote interpreters. So there's no reason for testing to happen in your personal environment anymore.
According to the [PyYAML docs](http://pyyaml.org/wiki/PyYAMLDocumentation#Loader): # The following classes are available only if you build LibYAML bindings. CLoader(stream) CSafeLoader(stream) CBaseLoader(stream) I just installed **libyaml** on my system via homebrew (`brew install libyaml`) and then installed PyYAML for Python3 (`pip3 install pyyaml`). After that I loaded up a Python shell and have the following session: &gt;&gt;&gt; import yaml &gt;&gt;&gt; yaml.CLoader &lt;class 'yaml.cyaml.CLoader'&gt;
The Unity game engine uses Mono and is used (for example) by [Blizzard for Hearthstone](http://unity3d.com/showcase/case-stories/hearthstone) or for [Kerbal Space Program](http://unity3d.com/showcase/case-stories/squad-kerbal-space-program).
For Django, Angular has arguably taken the lead.
I'm not a data scientist but I would think knowing how to use Python with databases would be critical. Maybe mention some of the sql-related libraries available in python like db.py or pandasql or blaze for large data or database connection wrappers for mysql or postgres.
I work only on Windows. I use Python and PyQt to develop the code. cx_freeze to generate an exe. This allows the application to run without requiring users to install Python and libraries. I use NSIS to generate an installer exe that will put the files on the target PC, add Start menu folder/icon, register the program so it can be uninstalled from the Control Panel, add PATH variable, etc. I've used NSIS for a wide variety of installers: GUI applications, command line scripts (with PATH variable modifications), Excel Add-ins (that require a surprising amount of registry editing magic to properly install and uninstall). NSIS's documentation and forums are excellent and make it very easy to get things working quickly. 
That's a good point.
That does not hold true in .NET though. I'm not talking about strings vs arrays. I'm talking about different *collection types*. Here's an example: - Array.Length - ArraySegment.Count - List.Count - Vector.Length - Dictionary.Count Sure, these *mostly* abide by the naming convention detailed in your SO link, but that is what I'm talking about.
I suspect that it will go out just like ~~Adobe~~Apache Flex in 2011. It's [heavily criticised](http://www.quirksmode.org/blog/archives/2015/01/the_problem_wit.html). Have you actually used Angular?
Yes, I know, you do this stuff with the best intentions. There are a couple of things though: * There's a newer version of [tesseract in the official Ubuntu repo](http://packages.ubuntu.com/trusty/tesseract-ocr). Doesn't this work? * **UPDATE** Use `checkinstall` instead of `make install`. * [virtualenvwrapper is in the official Ubuntu repos](http://packages.ubuntu.com/trusty/virtualenvwrapper) as well. It's a nice tool. * Why do you suggest to build a CLI tool instead of using [the one that pytesseract provides](https://github.com/madmaze/pytesseract/blob/master/src/pytesseract.py#L174-199)? * **UPDATE** And because it wasn't easily accessible I issued a [pull request](https://github.com/madmaze/pytesseract/pull/11) (use my fork until the author merges it). * In your request handler (`ocr`) you have a weird try-if-nesting. You could just raise an exception in `process_image` and catch it in the request hander. * And while we're at it, running a site called "Real Python" you should know that a *catch-all* `except` is not good practice. * `if 'jpg' in url` ... you can't be serious. Again, you could just catch [the `IOError` that PIL throws when it can't identify the image](http://pillow.readthedocs.org/reference/Image.html#PIL.Image.open). But the most teeth-grinding thing: * **This is not RESTful!** At best this is a flavor of [RPC](https://en.wikipedia.org/wiki/Remote_procedure_call). 
I say create a github project. I'd be willing to work on this on the side to help you out. I've created a few GUI applications. This would be a simple application to put together, but would be a little bit more complicated for a fresh beginner to start out. Personally I use Anaconda as it comes with PyQT/PySide with it already. I also use PyCharm as an IDE. py2exe would be the way to make it deployable as an exe. Feel free to shoot me a message if you have any questions.
I'm guessing I'd run into more of these people if I tried to learn programming in college
I am right now. per the day job. what of it?
There are better ways. New standards and technologies are being developed. Currently there a lot of unexplored space in the webcomponent space (shadow dom, html imports, custom elements etc). There's PolymerJS that shows promise but that doesn't provide all the tools for a fully fledged app (like routing, data management etc). 
Make a comment that adds some value then. "LOL" doesn't make a basis for conversation - it's valuable only as far as trolling is valuable.
I vote for blaze :) Ease of use, power, out of core array/pandas ops, reusable expressions, multiple backends and numpy/pandas syntax 
MCMC is for generating random variables or statistical inference and Markov Chains are for modeling stochastic systems -- which do you mean?
I hope no other "uninformed" person gets to your blog and follows your instructions.
There's a chapter on Markov Chains in the Quant-Econ book that has a web site (and python code). It's free and you can find it here: http://quant-econ.net/py/finite_markov.html Further advanced chapters on Markov modeling include: http://quant-econ.net/py/markov_perf.html http://quant-econ.net/py/markov_asset.html http://quant-econ.net/py/stationary_densities.html
hmm... possibly. I'll have to check if the headers are the same size. Thanks for the suggestion!
Interesting project. A few weeks ago this project was really active. It was nice to follow your progress and I'm excited to try it out. The project seems now a little less active than before. Since you are almost (the) only developer of this project I'm wondering how you want to take this further. Do you have ideas how to involve other people and how we can make this project more active? It would be nice to have some "tasks" to work on as an open source contributor beside the bugs that are in the issue tracker. Beside this the question of [ionelmc](http://www.reddit.com/r/Python/comments/2nzi2n/meet_guv_a_new_fast_networking_library_like/cmifv15) about Asyncio is interesting. I think this library is not only about performance. It is also about coding for an implicit event loop which looks way better than coding for explicit event loop. For that reason making it compatible with asyncio seems to be a reasonable activity. It would remove a dependency, it would allow you to combine explicit with implicit event loop coding and it would allow the project to gain some interest from the people that are very excited about asyncio. Could you tell us more about the benchmark results and the goals of the project? In this way we can understand the decisions in this project better. 
Ultimately, much of the doctor's job relies on the patient taking care of themselves and doing what the doctor says. &gt; If the student doesn't learn, the teacher has failed. By your logic, if the patient dies, the doctor has failed. I think that would be a pretty black-and-white way to look at the practice of medicine, just as it is w.r.t. teaching. Unless, of course, you're a baseball fan at heart, and would consider anything greater than a 30% pass rate for any given class a success. /s
http://stackoverflow.com/questions/2581784/can-cython-compile-to-an-exe/2743448#2743448 http://stackoverflow.com/questions/22507592/making-an-executable-in-cython/22513682#22513682 
But with the new announcement of 2.0 and that it will not be backwards compatible is there is still any reason to start a new project with angular? 
what a great resource, thanks buddy. 
For now, sure. But in a few years that will not be the case. If you're telling someone which language to learn, you don't tell them to learn the one that's on its way out. It would be like telling someone to learn classic ASP a year after C# was announced. All that effort would be useless today.
&gt; So when the graphic says real code I think it implies starting a project and finishing it without any reference, which is what I assume proficient is. Nope, not "without any reference" ever. Nobody can do that in any language for any interesting problem. Before Google and Stackoverflow we consulted the manuals all the time. &gt; If you never programmed Yeah, I guess that can make things complicated. I was a professional programmer already when I learned enough Python to start coding, obviously. Still, even for people new to programming, I don't think that providing enough tutorials and shit to spend a year procrastinating before writing your first actual line of code is a good idea. I think it's a very bad idea, in fact. The sooner you start writing code the sooner you start learning stuff that's actually important and that you can't learn by passively absorbing youtube videos and whatnot. By the way, somewhere in that infographic there might have been things like coding Project Euler and the Python Challenge, as long as you're writing solutions yourself that does qualify for writing real code, I think. To some extent: you wouldn't understand the necessity for basic code hygiene like descriptive variable names, not using global variables for control flow, etc, etc, by writing less than 100 LOC programs, but at least you'll get some first-hand experience with programming in Python.
Hey, I am glad to be of some help! I am a finance guy myself and I am learning Python. I still haven't gotten through the book yet, but I am surely gonna do some exercises with the quantecon Python package.
YAY There are so many languages on this that I already know, thus this graphic reinforces my healthy sense of self worth and confidence in employability....... THUS I WILL +1 this into perpetuity like an idiot. 
Nop. You do not really need to know anything about db at least to get started. Most of the times you will get the data in a .csv. Btw, I will not focus that much in Python. I will start with the Machine Learning course by Andrew Ng at coursera. It is teached in matlab, but you can switch to python later with a little effort (this is if your main interest is data science, not python. I mean, it seems you are focusing in the tools instead of focusing in the subject). EDIT: Maybe it is just that I find much more appealing the top-down approach. I find much more interesting learning numpy or scipy once I know what is the problem that I want to solve.
Thank you very much. This seems perfect
No, not really! Only the games are listed there currently, but it's a good idea so I'll start a list there. In the meantime if you just drop by there subreddit and say hi then I'm sure you'll quickly get some ideas for things to work on and everyone is very friendly!
This post really belongs in [/rLearnPython](http://www.reddit.com/r/learnpython) but if you have specific question you can just PM me and I can try to explain as best I can. If it is required, we can Skype. Free of charge.
Yeah, I use cx_freeze to get the exe too and it works fine if I have the visual basic and qt installed, without it the exe doesn't work. Started off pretty portable since I was using base libraries for python but now I have to look into installers.
I'm happy to help. I'll PM you my username. Doesn't need to be any money involved.
I'd say it's all a matter of perspective. I prefer to work in C when I can but recognize that it lacks a lot of niceties that other languages offer. I don't feel that C++ gives you enough bang for the buck when there are plenty of other higher-level languages that are safer and are becoming almost as fast as native.
try flask or django
I wrote this tutorial while building a bot for one of the pages only I manage, so adding login would have been an overkill. Yes - it's an ugly hack, but that would have made the tutorial considerably more complex. I have not done much javascript before so couldn't have done a good tutorial about that.. should get started on that.... 
Well this is a comment graveyard. Seriously, though, popularity is hardly a good basis for choosing a library or framework. You wouldn't choose Java just because it is more popular, would you? The best thing to do is to try a few and see what works best for you. That's what I did, and I ended up with [knockout.js](http://knockoutjs.com). YMMV. There's certainly no shortage of options.
Depends on what you need. After using angular on a few projects I've found it to slow me down and be hard to maintain for small to medium tasks. Lately I've just gone back to jQuery but added underscore for templates/utilities and bacon.js to handle complicated callbacks. I like that anyone who knows JavaScript can read and maintain my jquery, with angular I felt like I was creating a burden for the next guy. I use a mix of the flask templating and underscore templating on frontend, just depends on whats easier. 
oh yes! I missed this one :)
My favorite site when using regexes: https://regex101.com/ It makes writing working, good regexes so much easier and even helps in optimizing them using the debugger.
Thanks a lot, that's a really useful tool!
I do, but running benchmarks correctly is difficult. Here are some very basic numbers all done on the same computer, with the same settings with the `wrk` tool. The app in each case is the simplest plain text "Hello, world!" http server you can think of. NodeJS with express.js: 2.6k req/s Python using bottle normally: less than 1k req/s Python using guv: 4k req/s These numbers are approximate and only for the purpose of showing approximate scale. 
I may have switched to python I still think perldoc perlretut is the best http://perldoc.perl.org/perlretut.html
&gt; Depending on how this code is used, the recent events at Charlie Hebdo's office in Paris is a good motivation to make sure watch your words. Because offending someone, intentional or not, means you'll be murdered? To hell with you, I'll write software however I want,
http://sender.readthedocs.org/en/latest/ is a pretty slick way to get it done.
Not quite what I'm asking about...I need something that sends from a chosen address. I don't have to have access to that address, it just needs to appear to come from it.
https://docs.python.org/3/library/smtplib.html
Again, not really what I'm looking for. I'm looking for more of a complete tutorial with an example SMTP server to use.
[Dubuggex](https://www.debuggex.com/) is a similarly nice tool for when you need to work with regex.
I use cherrypy as the web server and dominate as the way to generate the pages. For the database I use sqlobject. This combination gives a 100% object oriented python istic method of doing web applications.
sure you can scrape off the "header" if you know what defines the header. Could you post a couple of examples of the "header" followed by a bit of the body?
There should be a section on what regexes *aren't* good for, like parsing (?:X|HT)ML or code. Maybe mention CFGs and related tools as an alternative.
That is what you're looking for. Use 'socket.getaddrinfo(hostname, "smtp")' to find the smtp server responsible for your recipient, then use the mime module to build your smtp headers and message data. Finally, use 'smtplib.SMTP(...).sendmail(...)' and check the result to determine if it is accepted. 
&gt; And then if you count C++11 or boost and other libraries, you pretty much don't have to think about low-level stuff. Except for low level stuff like why nothing compiles or links, and why you're getting cryptic errors from header files you've never even heard of. Seriously, C++ is a horrible choice for someone who has never programmed before. Errors can come from way too many directions.
Really nice tutorial indeed. I ve got a quick question if someone knows: is findall faster than looping through the file and matching a reg on each line? I could check myself, I know but in the metro for now so if someone knows, thanks!
In your situation I'd file a Kivy bug asking to add the missing transpose function. I presume the pitch-shifting is not constant, otherwise you'd pre-shift? I don't think you can change the type of an instantiated object, when the object's type is defined by an external C module. (For regular Python objects you could assign to `obj.__class__`.) 
Pytest hands down. It's "fixtures" system alone is reason enough to use it.
I went to a meetup last year at which the presenter gave a talk on the Python package [PyParse](https://pypi.python.org/pypi/PyParse/1.1.7). He could have just been giving unfair examples, but the examples he used demonstrated that PyParse ran rings around regular expressions in terms of understanding and ease of use.
So, actually Cython cannot compile to an executable. It can create a C source file which then you have to compile to an executable with a C compiler. (Which is what I already said.) https://github.com/cython/cython/wiki/EmbeddingCython
I like [Bottle](http://bottlepy.org/docs/dev/index.html).
I assumed that people would know SQL, but maybe I should have stipulated that first. Yes, SQL should definitely be learned. If people have not learned SQL yet then I'd definitely start off learning with sqlite3 and then progress to full on database servers. I was actually appalled when someone posted learning databases was not needed and using csv files is just fine. Just looking at job postings and you can easily tell SQL is almost always mentioned. Important data that need to be stored for the long-term will almost always be stored in a database. Once you learn SQL, there are then libraries that allow you to perform sql-like processing with data or connect to databases using Python which is why I mentioned a few of those libraries. I'm sure someone will argue for learning ORM technologies as well, but that is a discussion I rather not start :-). Source: Been a data analyst for 16 years with the last 4 or 5 years using Python.
&gt; This is strictly for strptime though, strictly for timestamps with padded directives. Very small use-case I don't agree, never saw a server log without padded time. Of course, it's my limited experience.
&gt; This is not RESTful! At best this is a flavor of RPC. To be fair, nowhere does it claim to be RESTful. And, although it's hard to classify a web API with a single endpoint and a single function as anything, this actually is pretty RESTful.
&gt; I wish he had more advanced classes too. Maybe in the future, once this MOOC is finished.
There are several different Python web frameworks but I only know [Django](https://www.djangoproject.com/) and [Flash](http://flask.pocoo.org/). There are also [Bottle](http://bottlepy.org/docs/dev/index.html) and [Web2Py](http://www.web2py.com/) but I haven't much experience with them. Flask is the one I have more knowledge about. It's really simple due the small API but that doesn't make it less powerful. The problem with Flask is that it doesn't come with an ORM and integrating with one (like SQLAlchemy) is not very straightforward (you can follow a thousand recipes around how to put them together, but it will not look integrated enough). Django is a behemot of a framework and it comes with batteries included, in several different sizes for several different purposes. Understanding all layers of Django may be hard at first but once you get the hang of it, you can do a shitton with it. Depending on what you'd do in the hackathon, Flask is a good contender just because it has a smaller API and, thus, less things to learn. But if you need something more serious, with database integration, security layer, middlewares... Django is in a better position here, even if it may take you longer to understand all that. (Just to be clear: It's not that you *can't* do the things you do with Django in Flask, specially since there are lots of plugins for Flask; the problem with that approach is that although you'd understand the underlying framework well, you'll also have to learn the plugin functionality, which may take more time than simply jumping into Django and learning everything in it.)
You may want to check out the answer to [this](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) Stackoverflow question...
I really like this talk by Damian Conway: http://www.infoq.com/presentations/regex
If you want in depth knowledge of regular expression I would recommend [Mastering Regular Expressions, 3rd Edition](http://shop.oreilly.com/product/9780596528126.do). IMO every developer should read this book and follow the examples as it will make you way more productive with processing text.
Have you chosen yet? I've researched a bit of this topic and AFAIK App Academy has an excellent reputation. Never heard of Gocodenow. AppAcademy is RoR though, but I don't know how much that matters to you. I've tried out Ruby and Python and I think I like Python a little better but Rails seems to have good job opportunities.
You will probably get more out of posting this to r/learnpython.
good call, i'll copy this post over there!
Perhaps you mean http://pyparse.sourceforge.net/ ...
I use twisted and plone. Both not for the faint hearthed
Just in case you have not heard of it, check out pymc. And the great ipython book pretty probabilistic programming for hackers.
Best.Colonoscopy.ever!
 import re s = '20 43 DA 4e 4e 45 43 DA 45 44 20 DA 20 20 20 DA' m = re.findall(r'\w\w ', s) i = 0 for t in m: if t[:2] == 'DA': print i i = 0 else: i = i +1 print i
I think I meant what I wrote.
If we ommit jinja then how is the front-end developed? (With AJAX?) (As it's probably needed to get user input)
&gt; To be fair, nowhere does it claim to be RESTful. He edited the article. But yeah, I can't prove that. &gt; And, although it's hard to classify a web API with a single endpoint and a single function as anything, this actually is pretty RESTful. You're contradicting. Can it be classified or not? Why do you think it's RESTful? In my eyes it's quite obviously some kind of function that produces meaningful output when given meaningful input. Tell me how this fits more into the idea of REST than into RPC.
Hope it's not impossible for a really basic web app! :) Thanks for your input, will try these two.
The link you gave is for a package (on PyPi) whose source resides on github, having one python file that is approximately 135 lines long (almost half of which are comments or blank lines) and which only reads csv files. This is a link to that Python file: https://github.com/mhjohnson/PyParse/blob/master/PyParse.py I honestly don't think that a small, incomplete, csv reader can be described as something that can run "rings around regular expressions". Feel free to childishly downvote me again without bothering to double-check the information I give you; personally, I don't play these games.
Actually, I'm not the one who down voted you. I saw the down vote, and thought it was pretty childish, too. And I do apologize. I went back through the Meetup archives and found this as the reference: [PyParsing](http://pyparsing.wikispaces.com/Download+and+Installation) 
For legacy apps maintenance purposes, I think it'll be a long time before an iOS development job doesn't require some competency with Objective-C. A conservative guess, maybe 5 years? Even if you're building a new app, it's very common now to make use of 'CocoaPods' (basically reusable Cocoa libraries), and the overwhelming majority of these are built in Objective C. The fact that Apple carefully built Swift so that Objective C and Swift can happily coexist in the same project is great for quick adoption, but it also means that Objective C will have a very long tail.
I find [sniffer](https://github.com/jeffh/sniffer) to be invaluable while writing tests/code. It auto-re-runs all your tests on every file change. Saves massive amounts of time 
Now you have two problems!
I have about 3 or 4 books on regular expressions. I end up having to use them quite a bit. I still don't really know what I'm doing when it comes to regular expressions. It's an incredible frustration.
I really like the window title! :-) It works as is with Python 3 (tested with Python 3.4). So, overall impression: well done! Now, onto possible suggestions for improvement. My old eyes find the text really small; I'd have preferred bigger fonts ... and I thought that, typically, apps designed for children tend to favour bigger font as well. In term of usability, being able to enter the answer and simply press the enter key (instead of clicking on a button) would be an improvement imo. [not sure how to do this ... I could try to find out for you if you're interested and can't figure it out by yourself.] First impression from reading the code: I find your ``__init__`` method a bit long... Looking more closely at the code... When you have local variables that are present in a single method (e.g ``self.menu``), you do not need to write them as instance variables but simply as "normal" variables; e.g. use ``menu`` instead of ``self.menu``. By contrast, you have a single function ``new_operation`` that uses global variables; this function should be turned into a method of ``Computer``, and the global variables (e.g. ``firstNumber``) should become instance variables (``self.firstNumber``) with no more need for a global statement. In fact, you should be able to eliminate all global statements for your existing code. Clearly identifying which variables are local to a method, and which are used in more than one method is something that is really useful when trying to understand the code. Some comments are really superfluous; for example: # New operation new_operation() Comments should not duplicate the code! I tend to use comments for three things: 1. giving a high level overview of what a bunch of lines of code does; 2. explain why a certain algorithm is used 3. explain unfamiliar "trick" being used [these types of comments tend to become more and more rare with experience as the unfamiliar becomes familiar] Finally, a very minor point. The convention used by most Python programmers is to avoid camelCase name for variables, reserving such names for classes. Thus, I would have written ``first_number`` instead of ``firstNumber``. The use of this convention would have the added advantage in your case of clearly distinguising the names that **you** define (for variables and methods) from those that are part of PyQt's library ... since that library uses a camelCase convention (to parallel the original C++ version). Prenez tous mes commentaires avec un grain de sel ! ;-) And, if you change the code substantially, do not hesitate to post a link to the revised version as well for further comments. 
Okay. I feel the need to jump in. First off, thanks for your feedback. In the original article, we did say "RESTful-like". I agree with you that it is misleading to say that. I disagree with you in saying that it is not RESTful at all, though. In cases of ambiguity, it's probably best to err on the side of not classifying/labeling it - which is why I just took the word out of the article. It doesn't add anything anyway. You make good points with the try/except as well. That could be cleaned up a bit. I do disagree with a not using a catch-all in general. But I do think that's beyond the point here. I generally put a comment in the code saying something like this approach silences errors. Why not articulate your concerns/criticisms, but then issue a quick PR -&gt; https://github.com/rhgraysonii/ocr_tutorial I still would handle the try/except different than you are suggesting. But I think it only helps learners to see other ways of accomplishing things. We can comment out the other routes and just leave them in the code for learning purposes. Sound fair? 
&gt; The bottom line answer is always "If you can do what you want to do with 3.3 go for 3.3!" Here's my dilemma, I don't know what I want to do. If you don't know what you want to do, use Python 3. I would rephrase the rule as: "If you don't *know* that you need Python 2, use Python 3." Although I have to wonder what is keeping you from considering 3.4.
Can you give an actual example of a valid address which does not have a period in it?
Absolutely true. Which is why I said " all practical cases".
2.7 for compatibility, 3.x if you're just learning and productivity isn't your focus (ie. missing out on 2.7 packages won't hurt you.)
Your program is short enough that it shouldn't (imo) be separated into two or more files. However, doing so is not that complicated ... Why don't you go over the code, see if you can implement some changes that I suggested, and then pm me (en français si désiré) so that I can have a look at your revised code and can make suggestion. If, at that point, you still don't know how to put the logic into a separate file and would like to know how, I can show you how I would do it. 
Thank you; I had no idea.
What's the web application? [Spyre (DataSpyre)](https://github.com/adamhajari/spyre) is a recent project to quickly make data dashboards. It's built on top of CherryPy.
En français why not :) Je vais commencer par apporter les modification à partir de vos commentaires, et tenter de trouver la solution sur les points qui bloquent. Pour ce qui est de séparer le code c'est principalement pour garder quelque chose de plus "joli" a voir, et séparer la logique de la vue du reste. Et accessoirement aussi pour savoir comment faire. Par contre ça m'amène à une question : en Python est-ce que le fait de séparer un code en plusieurs fichiers a une quelconque incidence sur la rapidité d'exécution ? Sur un code aussi petit j'imagine que non, mais sur un code plus gros ? Ou est-ce que ça sert surtout à séparer les éléments ?
If you don't need 2.7 then learn 3.4, if you don't know that means 3.4. 2.7 represents the past and will not be supported outside of the next 5 years. 
&gt; But the most teeth-grinding thing: If that's teeth-grinding to you, I'd argue you need to ~~talk~~take a walk for a while.
I've written everything in Python 3 for years now. Production ready and everything without even thinking twice about it. I haven't had a single issue with it at all.
In Python, de séparer le tout dans différents fichiers a une incidence très, très mineure sur la vitesse d'exécution - peu importe la taille ou le nombre de fichiers. C'est effectivement utilisé dans le but de séparer les éléments.
I haven't tried anything like that, but the author claims "RegExpBuilder can represent literally every possible regular expression using methods such as either(), or(), behind(), asGroup() and so on".
You can do r'({mychar}+)@({mychar}+)'.format(mychar=r'[\w.-]') and use the `X` option to add spacing and comments if you want. This stuff should be common enough all programmers should know it. At least with SQL query builders you have the excuse they can hide dialect issues. This thing is only going to be helpful for the easy cases. I'd like a more declarative CFG-like syntax for regexes that makes it easier to define complex character classes for unicode. This LINQ approach just feels wrong when the expression parses to a tree instead of a sequence.
This looks decent. One drawback of regexes vs CFG parsers is that you need an extra step to identify how something matched and do postprocessing. 
This is very cool! Thanks for posting this. 
Oh of course. I completely agree. Every server log I've seen is padded or a Unix timestamp which is quicker to parse anyway.
Cool project! I am looking forward to your GitHub repo! :)
I had a very similar challenge a couple of months ago. At this point, I knew about CSS and HTML, but never touched any web framework. Getting started was truly overwhelming, but I eventually settled with Flask and could get it up and running within a couple of hours. 
ImageMagic
If you think you mainly want to do Django, probably 3.x, though I'd ask on a Django subreddit or forum just in case. I'm more comfortable sticking with 2.7 because there is more that works only on 2.x than works only on 3.x and I dislike being held back by dependencies and I use a lot of this and that and Murphy's law says I'll snag on a 2.x only dependency.
py.test can do something like this too with --looponfail, which will re-run only the failures until they are fixed and then run the whole suite. This is pretty nice if your tests take more than a few seconds :-)
I didn't use it! I'm not a brand newbie coder, but I was brand new to python. I took the code academy course to learn syntax, then started playing some coding games like check.io, codingame.com, pythonchallenge.com, etc. Then I started exploring other exercises and writing my own scripts to do silly little things. I have a script that (while buggy) can pull a random imgur wallpaper from the top 25 weekly /r/wallpapers posts, and then I'm working on a bash script to set it as my background. I have a script that can pull trading information from one of my games and try and identify items to sell for a profit. I'm also trying to port a Monte-Carlo simulation from MATLAB to python just to prove that I can, but that's hard and unfun so it's on the backburner. I've yet to touch a single book on "intro to python." It probably helps that I learned basic "computer science" in a Scheme-based course plus had some basic MATLAB background, but since I don't currently plan on writing code for a living this approach works well for me.
http://falconframework.org/ It's a bit difficult to install on windws, I'd say intermediate. However it is the fastest of the bunch. Definitely check it out. Also, you said Flask, but have you tried looking at Werkzeug, Paste, or WebOb?
Because it's the first book on the right hand side of this subreddit?
ok, so I figured it out. when I read the file, I need to avoid both the first ***and*** last lines in order to get a crc match. 
Thanks for those. I'll experiment with all of them. Paste especially looks interesting since the site has a tutorial about creating a web framework. That is probably a good exercise simply for the sake of the experience. Does this mean that you think these are better choices than web.py? Could web.py be falling into disuse? 
[Pillow](https://pypi.python.org/pypi/Pillow/2.0.0) perhaps? 
Popularity doesn't determine the choice - the lack of does. No one wants to deal with the walking dead.
A lot of experienced Python programmers like (or at least know about) Zed Shaw. Zed Shaw is very vocal, and he started talking about writing a book and making it free. Lots of Python programmers knew about this. Some time passes... So some novice asks for resources on learning Python. Before we had "Learning Python" because Oreilly books were cool at the time. However, so many of us remembered that crazy cat Zed Shaw made a thing! Hey, go use that thing! I bet it's great! More time passes... Directing people to "Learn Python the Hard Way" has become such an institution that we just do it. It's rarely questioned, and lots of those novices that are now experienced Python programmers are recommending it to, as they got their feet wet with Python in that book. I don't even think it's Shaw's most awesome work. http://programming-motherfucker.com/ is easily superior.
I've used web.py extensively since its early days (and we currently use it at work to power our fairly large-scale site Oyster.com) and I have some thoughts based on this. Yes, the main reason not to use it (or start new projects with it now) is that it's *not being actively maintained*, and so there are new options now which are significantly better, more modern, and definitely better maintained. I still like web.py's simple philosophy, but I think Flask/Werkzeug, Bottle, and Tornado basically fill the same "microframework" niche. I'm not a fan of many ORMs, so I do like web.py's approach of "just let you write SQL in a Pythonic fashion". However, if I were starting today I'd take a good look at the Peewee ORM, which looks like the right level of abstraction over SQL to me.
I'm with you. But note that SQLAlchemy is not an ORM. The core is a very SQLish data mapping layer. It also has an ORM built on top of that core.
Peewee plays nicely with web.py, flask, etc. And it very much takes the "standalone" approach.
Even with the drawdown and volatility restrictions, I don't see how they can avoid having the winner be a gambler who got lucky. With enough entrants, one of the many leveraged "long stocks that start with X" type strategies will beat all the cautious models. This is just a publicity stunt. The fine print says they're going to liquidate your portfolio if it drops below $90,000, so they're really only risking $10k on this.
A free algorithm for just 100k with thousands of free applicants? Awesome! That's just a giant PR gag combined with avoiding to pay an actual price for the algorithm - plus that the best one automatically sorts out itself. Edit: I'm in the wrong here, from the faq: &gt; Will you have a right to use my algorithm in the fund? Do I give up ownership of my algo by submitting it? &gt;No. Submitting your algorithm to the contest does not give Quantopian a right to use the algorithm beyond the contest. Your algorithm remains your property. 
with the time period allotted the best one will most likely not win. 
Still they get a few good developers to have an eye on for eventual employment. 
You are combining MANY different systems and levels of hardware and software. It's looking good so far. You have stuff working and it's very exciting. You need to step back an get organized. I use PyQt/Python to talk to micro-controllers with touchscreens and have to wrap them up in EXEs for Windows. I'm telling you now, it's going to become very unweildly very quickly. What I'm going to tell you now just plain sucks. It is not fun. It's pretty much yak shaving. But with what you are doing and where you want to go, you'll have to get organized now. First, look up the PEP8 style guide. Your code needs a little style changes to be read by others (especially you) in the future. Choose a revision control system such as GIT or SVN or Mercurial. When dealing with so many things that can go wrong, it's crucial to be able to roll it back to 'when it worked.' As far as the GUI, I would definitely switch to an event driven GUI such as PyQt or Kivy. You can build your GUIs in a designer and manipulate them in code later. To run an EXE you'll need pyInstaller, cxFreeze or py2exe. You must create a workflow and stick to it. For the light's bouncing, it may be you need a debounce timer. I have never experienced this on a touchscreen with PyQt, but I think it has something to do with you running the loop in pyGame. A different GUI may help. Once you get all that boring mundane stuff out of the way, you'll be able really expand on the other stuff, such as dynamically populating lists of connected lights. 
That's just who they "pay". I'm sure the fine print says they own all the losers work too.
Quantitative trading is a great way to pay lots of commissions. 
nope thanks very much for the link
The main plane for it is basically to practice some fairly basic web development because basically im a total novice :P
Thank you for the reply. I was afraid the situation was as you described. Yes, my plan was to have a file loader take whatever wav flac etc you select, and a piano type interface where each button would play a pitchshifted version of that wav flac etc. (which works in linux but not android or iOs as described in my novel above). So, instead, i'll just pick a nice sounding wav, pitchshift it into all the required frequencies, package all those wavs with the program &amp; have kivy play the appropriate one. I'd be embarrassed to file bug report since they worked so hard to get python to interface with android at all. I'd hate to complain about some little thing when they've given me this really cool, free platform to use.
Well, the person will be a programmer either way - not necessarily a good one, but he will definitely have the basic knowledge. Beyond that a participant in the upper part will be interesting for them since they have knowledge of python, statistics and the stock market - exactly what they will need in the future to keep making money with micro transactions. 
&gt; I'd be embarrassed to file bug report since they worked so hard to get python to interface with android at all. I'd hate to complain about some little thing when they've given me this really cool, free platform to use. I wouldn't be concerned about this. You may also find that someone knows how to do what you want if you ask on the kivy mailing list or irc (not sure if you already have).
You could say that about fantasy football competitions. However, you see the same people winning those every year...
&gt; This is just a publicity stunt. The fine print says they're going to liquidate your portfolio if it drops below $90,000, so they're really only risking $10k on this. With the sheer volume of LinkedIn messages I receive from big investment banks looking for quantitative software engineers to work on their real-time high-volume trading software, I wouldn't doubt it is a publicity stunt - just a question of who the stunt is for. Placing in the top 10% of this contest could result in lavish wooing by investment banks because hiring a single engineer who will go into this field with a passion is worth way more than the paltry sum they are putting at risk. The down side is that every cold contact I have ever received is quite up-front about the fact that you will need to re-locate to New York for this job. I understand *why*, I'm just somewhat comfortable with my west coast life. Also, liquidating you portfolio if you are down 10% doesn't seem like that big of a deal to me given the investment timeline. If you are down 10% then you have at most 1 day less than 6 months to gain 11% just to stay even. Unless there was a major market correction to explain that sort of drop in that time, it seems fairly prudent to pull the plug at that time. **edit:** After spending some time with this tool, I have a different opinion of the company. See [here](http://www.reddit.com/r/Python/comments/2sjun4/your_python_stock_trading_algorithm_100000_of_our/cnqgroy) if you're curious to read my somewhat ranty post on the subject.
That's right. You could say it about fantasy football, and you'd be wrong. You can say it about the stock market, and you'd be right.
Thanks, that's probably the best advice I've had thus far. You're right, thus far I have basically thrown things together, experimented and focused on getting things to 'work' (i.e. do what I want... somehow!) I'll pull out my notepad and do some planning before the code becomes impossible to read/maintain. 
Can you recommend any books on coding quant strategies? I have no desire to enter the field, I'm more aligned to PE/IB but with so many resources to help you learn python and R, and free services like quandl, I think it would be fun to learn something like this. Thanks!
I don't know much about fantasy football but it seems more like a March Madness pool or a poker tournament with high blinds. Good low-risk strategies guarantee you a position in the middle. The rewards for second place and last place are the same, so it changes the calculation.
I had a blast last year in Berlin. Looking forward to Bilbao!
Plus, not doing a splash screen is very easy in Python
duh, cuz it's teh "hard way"! plus it's full of useful example and in the end you learn python pretty well...
You are right about dbscan being more powerful than k-means. But why use clustering at all? A simple geohash would have reduced your dataset nicely.
Honestly I can't. I assume the reason I get contacted so often is that I have degrees in both mathematics and computer science and a modest background in scientific computing. I've spent most of the last several years being a very detail-oriented bare-metal OS engineer type.
I didn't need any CUCM references. I simply specify the date range when exporting the csv formatted text file from CUCM and save it locally, then run this script to export the records for the desired extension to another csv file. It exports the epoch date/time into a format that your HR person can understand, along with the call duration converted to H:M:S, and the called and calling party. 
This is very helpful, thank you!
I feel like if there are enough submissions the winner will just end up being the one that got luckiest rather than the truly best algorithm. They put in some metrics to guard against this but still, I expect it'll be the one that got luckiest under those rules.
&gt;This is just a publicity stunt. The fine print says they're going to liquidate your portfolio if it drops below $90,000, so they're really only risking $10k on this. It is a fun competition. They don't claim the rights to your work. You might even get some money out of it if you are good or, according to you, lucky. You make it sound like the fact that they get something out of the deal too is a problem. I also read this on the site: &gt;Sharpe Ratio: The gold standard of performance metrics. Penalizes an algorithm if it takes excessive risk to achieve its return. Higher Sharpe is better. Now, to be honest, I don't really know anything about investment but it does seem like this is, at least an attempt, at addressing your concern. Or?
Ah no you can pick whatever players you like. I think I should have said Fantasy Soccer... No need to get into *that* argument. Anyway point being that there might be a "knack" to these kinds of things, which might prove very useful.
from: http://cs.stanford.edu/people/karpathy/deepimagesent/
Not a good choice of name ­— [`joe` (Joe's Own Editor)](http://en.wikipedia.org/wiki/Joe's_Own_Editor) has been around since 1988 and comes standard with many Linux distributions.
&gt; Can you recommend any books on coding quant strategies? http://www.quantstart.com/articles/quantitative-finance-reading-list Favorites I've read so far: * [Inside the Black Box](http://www.amazon.com/gp/product/0470432063/) (if you're totally new to the concept) * [Quantitative Trading](http://www.amazon.com/gp/product/0470284889) (the second book, Algorithmic trading goes deeper into implementing strategies, also good) * [Trading Systems](http://www.amazon.com/gp/product/1905641796/) (a GREAT book on implementation and the process of testing a strategy) * [Active Portfolio Management](http://www.amazon.com/Active-Portfolio-Management-Quantitative-Controlling/dp/0070248826/) (Kind of a classic, more theory than implementation, requires some fundamental understanding of MPT, CAPM and related concepts. Good chapter on multi-factor risk models) Also * [Algorithmic Trading and DMA](http://www.amazon.com/gp/product/0956399207/) (Still on my bookshelf, haven't gotten around to reading it yet, but it's supposed to be *the* book on market microstructure, so if you'er interested in HFT or level-2 algos, this is a good starting point) Edit: Be prepared to spend about 3 months just randomly browsing [Investopedia](http://www.investopedia.com) to crack through all the jargon :) Also, these guys have some pretty rockin' videos on on everything finance, from "WTF is an ETF?" to "WTF is a European Call Option?" to "How do I manage my pension?", especially useful if you're in the UK. The videos helped me a lot when I was getting started at my current job. https://www.youtube.com/user/MoneyWeekVideos/videos
I think these folks value the ability to easily use any tool to work on that pipeline over crisp interfaces. Though I find the number of my unix colleagues that believe that text parsing has a role in systems interfaces dwindling. 
An inefficient market's an inefficient market.
If it's backtesting as well as forward testing, luck should have less to do with it. &gt;I expect it'll be the one that got luckiest under those rules. That's how everything in life works though, isn't it?
Oh I know, but since I know Python, and I know SQL, I just prefer to keep my abstractions in this particular area at bay a little bit more. I don't want to filter, I just want to write the damned SELECT query and be done with it.
&gt; Stock price movements are close to random if you consider it a closed system, sure. forex is even worse. but when you consider the crazy amount of data out there that isn't just correlated, but actually causational, it's far from random. hell, InBev signs their supply contracts based on temperature forecasts (hotter year = people buy more light beer).
&gt; That's how everything in life works though, isn't it? Yes and no. In a lot of cases the winner is just the one with the best strategy regardless of luck. I guess though that if you have enough players then there will always be a number of players who are using the exact same optimum strategy and so the winner just ends up being the luckiest.
And alternatively something invalid like '.@' passes the alternative check.
Maybe I just read too much Boglehead related material, but isn't this kind of trading really random and hard even for professionals to get consistent returns? That's why /r/personalfinance suggests using index funds instead of trading individual stocks. It's a neat idea to attract programmers, but it seems like it's advocating bad behavior. It assumes there exists some algorithm that gives you consistent positive returns in the stock market. Regarding using backtesting to test your algorithm: "Past performance does not predict future performance" - [Source](http://goo.gl/8rbuEs)
I was using the [Continuum's Anaconda distribution](https://store.continuum.io/cshop/anaconda/) for all of my work. I am now downloading using brew and will follow your wise advice. Thanks a bunch
Just glanced over it and it looks cool! Would you mind giving us the advantages over let's say `timeit` in a nutshell?
Seems like a good webservice. I'm glad that you didn't reimplement storing output to files.
I found the earlier edition wasn't the easiest to understand. It's an excellent book, though. I found O'Reilly's *Introducing Regular Expressions* is a bit easier to get into. Mastering works really well as an intermediate book. There's some good ideas in the Cookbook as well.
&gt; it does seem like this is, at least an attempt, at addressing your concern. They're definitely aware of the issue, it's just hard to address completely even for professionally managed funds where the strategies are constrained by investor due diligence.
&gt; I understand *why* Because Manhattan is better?
Bloomberg has a quant finance research team, with Ph.D.'s in math and physics... Quantitative finance isn't bullshit, it's just incredibly hard and not sexy. 
Wrote a very similar tool called gig a while back: https://github.com/sloria/gig . I quite like your simple approach, though.
I somewhat disagree, I see this optional type hinting being used in cases where there are unknown typed variables being returned so IDEs can better make suggestions and provide more complex static analysis tools. But I can also see how this could add a lot of complexity, I'm conflicted. 
Really? That's a really interesting perspective, you don't find any benefit in intellisense like systems that provide extra information about functions you're accessing? Maybe IDE's are less common than I thought, but I love being able to see what operations I can perform on an object while writing, I already use Pycharm's type hinting to keep myself sane when building big systems. I guess I never thought about it, but my IDE uses quite a few methods of trying to guess as to what a function is returning, letting you see exactly what you're working with. I'd be willing to bet writing Python solely in a text editor would be a pretty different experience
I've used vim for many years and what you lose in intellisense features you gain in having a very expressive and efficient finger-language for editing text. I've been stuck using Visual Studio for a project for the last couple weeks at work and it is so painful. Overcomplicated, things popping up and nagging me at every turn... so incredibly busy. I don't know how people stand it. But, different strokes for different folks. We all take our pick and get proficient with something. Then all the other stuff seems weird.
Well I agree, visual studio sucks, it really doesn't represent the python IDE ecosystem as a whole. Personally I use Pycharm with their vim editing mode, love the hell out of it, you should really give it a shot if you get the chance. Their [features extend so far and wide](https://www.jetbrains.com/pycharm/features/#pythonEditor) I couldn't come close to doing it justice, but the feeling I think you're describing, fighting with your IDE, I've never experienced with Pycharm, in contrast, the feeling constantly consumed me while using eclipse and visual studio. [In string syntax highlighting and error checking](http://i.imgur.com/z9r8tCX.png) are pretty damn handy, it supports regex, sql, pretty much whatever embedded language you're working with, and best of all everything works by default, no configuring, no need to really do anything out of your normal workflow Edit: [Here's a great review](http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/) of Pycharm from a vim user's perspective. 
I'd like to add [this comment.] (http://www.reddit.com/r/coding/comments/2sk8k6/your_python_stock_trading_algorithm_100000_of_our/cnqgtrz) by /u/redxaxder in /r/coding. Tl;dr this company just wants an algorithm for cheap (relatively speaking). Not related to the infrastructure but definitely another shitty thing this company is doing. 
Seems like gig needs internet connection to be able to work. joe seems to package gitignore files for offline support. Otherwise, pretty similar.
Such as? 
Yahoo store was written in Lisp. What's your point? 
Here's my own shot at the problem, a more comprehensive approach with regard to results: https://github.com/ionelmc/pytest-benchmark You need pytest though (if I have a choice I write all my tests in it nowdays).
It's not as if stock picking manages to do much more than that as it stands. It's why you have such complicated hedging/indexing strategies to try and avoid your luck turning bad.
Also, it was quite a big deal when reddit was ported from LISP to Python way back in the day, which I'm guessing helped to put reddit on the map in the Python world.
Also - not sure if any mail server actually supports it - but IP address can be in long integer form: $ ping reddit.com PING reddit.com (198.41.208.139) 56(84) bytes of data. 64 bytes from 198.41.208.139: icmp_seq=1 ttl=57 time=8.44 ms ^C $ python -c 'print(sum(256**i * int(x) for i, x in enumerate(reversed("198.41.209.138".split(".")))))' 3324629386 $ ping 3324629386 PING 3324629386 (198.41.209.138) 56(84) bytes of data. 64 bytes from 198.41.209.138: icmp_seq=1 ttl=58 time=8.38 ms 
Angular can be coupled quite nicely with Django thanks to django-angular: http://django-angular.readthedocs.org/en/latest/ This app reduces some boilerplate and code duplication. For instance, it has already coded facilities to share the CSRF token between angular and Django; it offers tools to share forms; it offers a view mixin to automatically handle CRUD requests; stuff like that. Really worth learning, IMO. 
How is it that no ones mentioned CherryPy yet? The nice thing about CherryPy is that its actually the core building block of TurboGears, so there is a way to "scale up" Regardless, I'm sure that CherryPy is more deployed than Web.py? Netflix uses Cherry..... 
If you look closely, you will see that some of them are symbolic links to others. There are basically only two versions: 2.7 and 3.4. Edit: typo
pyparsing is really good, but its use case is of course much wider than regex, as it can parse context-free grammar. For example, it's not so hard to build a Google-like search syntax parser with it. As such, it's also more complicated to use, while regex is handy for easy non-recursive matching - rather an overkill for BNF. Btw, would you happen to have a link to the presentation slides?
The [VERBOSE flag](https://docs.python.org/library/re.html#re.VERBOSE) can be used to make a complicated regex more understandable.
What exactly gave you the impression that this isn't another versus post?
I would recommend bottle.py. It is really easy to understand.
There is only 2 version : - Python 2 - Python 3 It's necessary because most of the python library and framework are not fully compatible with Python 3. In all case, if you start a new development you should use Python 3.
Some people (like me) are just more comfortable with explicit return statements, even if they don't really do anything. 
This is beautiful. Thank you very much.
I think this is irrelevant. More relevant, I suspect, is that Reddit has a very young demographic, and many youngish people are learning it.
Got used to it using VIM, as it uses "return" as an automatic decrement indentation. Besides, no return is the same as a single return.
Thanks, I'm in this weird spot with easy exercises being a bit repetitive, just using the same tools over and over again, so I'm looking to get past that.
The nanoseconds that longer wires add to communication times actually matter when you are working with wall street.
Apparently you can't actually use it for your own images. As far as I can understand, you first have to run object recognition (from among 4000 objects) and each object identified should be tagged. Only then can you run the script to generate the sentences.
And also because Manhattan is better.
open() is preferred over file() https://docs.python.org/2/library/functions.html#file especially as file() has been removed as a builtin in python3 https://docs.python.org/release/3.0/whatsnew/3.0.html#builtins
For future notice, stylistically use of the `file` constructor in python2 is frowned upon and gone in python3. The standard idiom is to use the builtin `open` function which returns a `file` object (`file()` and `open()` behave identically). Note the `open()` function returns an object of type `file`. (I believe the reason is that python doesn't use constructors named after the file type that often for built-in types; and in the idiom `with open(filename) as f` indicates more clearly that a file is being opened, versus you are just pointing to a closed file). E.g., with open('hello.txt', 'w') as f: print type(f) # &lt;type 'file'&gt; print type(f) == file # True print isinstance(f, file) # True https://docs.python.org/2/library/functions.html#file &gt;### file(name[, mode[, buffering]]) &gt;Constructor function for the file type, described further in section File Objects. The constructor’s arguments are the same as those of the open() built-in function described below. &gt;When opening a file, it’s preferable to use open() instead of invoking this constructor directly. file is more suited to type testing (for example, writing isinstance(f, file)). 
Yeah many Linux Distros still default to Python2. Protip: Don't try to remove Python 2 from your system, unless you feel like reinstalling your distro today. 
 with open('/tmp/foo') as file: for line in file: match = re.search(r'^(something)[0-9]+(else)', line.strip()) if match is None: continue val1,val2 = match.groups() rc1 = do_something_with(val1) rc2 = do_something_with(val2) Edit: removed semicolons left from copy-pasting the calls in the original perl code.
did you mean Codecademy? http://www.codecademy.com/tracks/python/resume
Of course, it's a trained neural network. If you want it to recognize things, you have to show it some things first.
I didn't say it was complex, I said it unnecessarily cluttered the regex for little to no benefit.
I think an important think to point out is that you don't typically use regular expressions very often in Python. Use then where necessary but otherwise find other simpler ways to do it imo. I also might recommend learning Ruby. I see it is as the natural Perl successor.
&gt; Python 2(.7), however, does not make use of these functions. Instead, it tries to read arguments as byte sequences. Characters not included in the 7-bit ASCII range end up as ? in the byte strings in sys.argv. python -i - rémi &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.argv ['-', 'r\xe9mi'] So this is only necessary for weird codepages that Python does not natively know about?
the m is for match, like 'heyou' =~ m/hey/ It is optional if you use '/' as your separator, but if you use anything else ( he's using single quotes above ) then it is required. Also uh, not to be that guy but this is not 'guru' quality code :) open(FILE,"/tmp/foo"); #Should look more like: open( my $fh, "&lt;:encoding(UTF-8)", "/tmp/foo" ) or die "Could not find file: $!"; Close file is implicit, and what do $rc1 and $rc2 do, and why are they set in that scope?
&gt; weird codepages that Python does not natively know about? No, for everything outside your default code page. On a Western European Windows `python -i - rémi` will work without issues (although you'll have to decode the bytes yourself), but it will break on a Russian Windows.
You can also give Runestone Interactive a try. It has several books you can use to learn Python as well as prompts and code walkthroughs, based on your experience level. Sign up and you can make your own course and save your work. [Runestone Interactive](http://runestoneinteractive.org)
Hahaha yeah they will change a couple variable names and use it 
Relevant: https://www.python.org/dev/peps/pep-0394/
For scripting, I can see the advantage, but for a full featured program I still prefer Python. For example, you can compile a regex and run it without having to recompile it each time, saving clock cycles. Granted this is only a piece of the pie, but I don't think Ruby or Perl do either. For a large majority of pattern matching this doesn't even matter. I hate working with regexes regardless.
Just a clarification: re.match() always matches to the beginning of the string. It is a goofy method to use for a regular expression. re.search is the general one that matches anywhere in the target string and is the one most people would be familiar with from any other use of regular expressions. (the ^, of course, already guarantees a match against the beginning of the target string)
It doesn't look like anyone has mentioned it before, so I should go ahead and say it. Python has a fileinput library that behaves similar to perl 'while($line=&lt;FILE&gt;)' stuff that should make it easier to translate perl code to python. the rest of the steps are the same as what everyone else says. Although, I tend to prefer using re.compile. import fileinput, re match_something_else = re.compile(r'^(something)[0-9]+(else)').match for line in fileinput('/tmp/foo'): match = match_something_else(line.strip()) if match: val1, val2 = match.groups() rc1 = do_something_with(val1) rc2 = do_something_with(val2) you might be able to do the match/if stuff with iterators and lambdas and whatnot, but that might get way too complicated. EDIT: fuck it, I want to give this a try: import fileinput, re match_something_else = re.compile(r'^(something)[0-9]+(else)').match for match in filter(None,(match_something_else(line.strip()) for line in fileinput('/tmp/foo'))): val1, val2 = match.groups() rc1 = do_something_with(val1) rc2 = do_something_with(val2) yeah, probably not the way to go.
&gt; It is a fun competition. They don't claim the rights to your work. You might even get some money out of it if you are good or, according to you, lucky. The contest is engineered in a way that you have 0 legal protection against them duplicating the algorithm based on the results and its basically "trust us" when they plan to build an crowd-sourced algorithmic hedge fund... Umm. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Wave power**](https://en.wikipedia.org/wiki/Wave%20power): [](#sfw) --- &gt; &gt;__Wave power__ is the transport of energy by [ocean surface waves](https://en.wikipedia.org/wiki/Ocean_surface_wave), and the capture of that energy to do useful [work](https://en.wikipedia.org/wiki/Mechanical_work) – for example, [electricity generation](https://en.wikipedia.org/wiki/Electricity_generation), [water desalination](https://en.wikipedia.org/wiki/Water_desalination), or the [pumping](https://en.wikipedia.org/wiki/Pump) of water (into reservoirs). A machine able to exploit wave power is generally known as a __wave energy converter__ (WEC). &gt;Wave power is distinct from the diurnal flux of [tidal power](https://en.wikipedia.org/wiki/Tidal_power) and the steady gyre of [ocean currents](https://en.wikipedia.org/wiki/Ocean_currents). Wave-power generation is not currently a widely employed commercial technology, although there have been attempts to use it since at least 1890. In 2008, the first experimental [wave farm](https://en.wikipedia.org/wiki/Wave_farm) was opened in Portugal, at the [Aguçadoura Wave Park](https://en.wikipedia.org/wiki/Agu%C3%A7adoura_Wave_Park). The major competitor of wave power is [offshore wind power](https://en.wikipedia.org/wiki/Offshore_wind_power). &gt;==== &gt;[**Image**](https://i.imgur.com/2LVKaig.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Pelamis_at_EMEC.jpg) - *Pelamis Wave Energy Converter on site at the European Marine Energy Centre \(EMEC\), in 2008* --- ^Interesting: [^List ^of ^wave ^power ^stations](https://en.wikipedia.org/wiki/List_of_wave_power_stations) ^| [^Wave ^power ^in ^Australia](https://en.wikipedia.org/wiki/Wave_power_in_Australia) ^| [^Pelamis ^Wave ^Power](https://en.wikipedia.org/wiki/Pelamis_Wave_Power) ^| [^Siadar ^Wave ^Power ^Station](https://en.wikipedia.org/wiki/Siadar_Wave_Power_Station) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnr91tk) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnr91tk)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I'd just like to add that isn't the only issue. For instance, when you backtest in the IDE "thing" it works fine but won't work in their "qualification" system. Apparently, computing 180 day averages is enough to cause it to timeout :| &gt; long_mavg = data[context.security].mavg(180) :| I'm not sure how I can take this seriously if it can't calculate the 180 day average for *one stock* without timing out??
for aol youd use say smtp.aol.com and connect with your user and password haha http://www.sendblaster.com/en/support/smtp-and-sending-issues/common-smtp-servers-config
&gt; I disagree with you in saying that it is not RESTful at all, though. It can't really be *a little bit* RESTful. Either it is or it isn't. And if it isn't that totally fine! &gt; it's probably best to err on the side of not classifying/labeling it What does that mean? (English is not my native language) &gt; It doesn't add anything anyway. Exactly. It's just a buzzword that in sometimes helps to describe APIs. &gt; Why not articulate your concerns/criticisms, but then issue a quick PR -&gt; https://github.com/rhgraysonii/ocr_tutorial I don't see much sense now that the article is already published.
Completely understand! I'm in IT - I hate talking to vendors for (mostly) that reason.
What sort of speedup does the cython compilation give?
Yeah, in code where early conditional returns/breaks/continues are possible and more than one or two lines come after that line, I also use flow control instead of putting most of the function/loop body in a conditional block.
From those dark Perl days I recall autodie. Why write your own error messages?
I prefer “documentation by variable naming”: name, address = match.groups()
As d4rch0n already did a great job of explaining below, Flask is a wonderful choice. For bigger applications, or more complicated stuff, Django is also an excellent choice. In fact, Tom Christie's django rest framework is excellent. Now back to your question, I'll throw redis + rq[1] as a very simple addition to his answer that makes the work scale out pretty linearly with very little work or maintenance from your standpoint. I've seem some pretty serious issues with greenlet, eventlet, and sadly gevent falling over or dead locking under load. You'd literally only change a line or two in his example to insert a new rq job and one of the rq workers would pick it up + process the job asyncronously. [1] http://python-rq.org 
I haven't read it thoroughly, so there might be an obvious logical problem in the code. However, it is entirely possible there is a problem with the data not being as you expect it (formatting, value, etc.) The first thing I do when I'm debugging a logic issue like this is print out values as they are being considered, alongside the consideration taking place. For example right before first "if" you could print("(input %s &gt; last %s) and (distance %s &lt;= lastdist %s) and (input %s == row[0] %s)" and then all your variables typecast as you have in your statement. Additionally, that's quite a mouthful. If you can break that into logical steps (and ideally comment above each step the logic involved) it will make it a lot easier to read and debug.
I dislike action at a distance. If another developer is looking for an example on how to open a file, are they going to know to look at the top and cargo-cult use autodie as well? Probably not. They'll just copy the open() line, and will then lose the error handling.
Perl has compiled regex: http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators
I'll check it out, thanks. 
[Torch](http://torch.ch/) is a scientific computing framework using Lua and a just-in-time compiler (JIT). It grew, I believe, out of deep learning research by [Yann Lecun](http://en.wikipedia.org/wiki/Yann_LeCun)'s [research group](http://yann.lecun.com/ex/downloads/) and [Ronan Collobert](http://ronan.collobert.com/) and company. Due to [Facebook's hiring of Yann Lecun](https://www.facebook.com/yann.lecun/posts/10151728212367143) [Facebook now also uses it in their artificial intelligence research](http://techcrunch.com/2015/01/16/facebook-open-sources-some-of-its-deep-learning-tools/). [iTorch](https://github.com/facebook/iTorch) is an [IPython](http://ipython.org/) kernel that lets you write Lua code for Torch using the IPython ecosystem meaning you can open up a notebook, write and run Torch/Lua code, and get results displayed richly inside your notebook. It's also a great example of the flexibility of what IPython has created, because [Python is only one of potentially many languages that can be hooked into the system](http://andrew.gibiansky.com/blog/ipython/ipython-kernels/). Another example includes [IJulia](http://nbviewer.ipython.org/url/jdj.mit.edu/~stevenj/IJulia%20Preview.ipynb).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Yann LeCun**](https://en.wikipedia.org/wiki/Yann%20LeCun): [](#sfw) --- &gt;__Yann LeCun__ (born 1960) is a computer scientist with contributions in [machine learning](https://en.wikipedia.org/wiki/Machine_learning), [computer vision](https://en.wikipedia.org/wiki/Computer_vision), [mobile robotics](https://en.wikipedia.org/wiki/Mobile_robotics) and [computational neuroscience](https://en.wikipedia.org/wiki/Computational_neuroscience). He is well known for his work on [optical character recognition](https://en.wikipedia.org/wiki/Optical_character_recognition) and [computer vision](https://en.wikipedia.org/wiki/Computer_vision) using [convolutional neural networks](https://en.wikipedia.org/wiki/Convolutional_neural_network) (CNN), and is a founding father of convolutional nets. He is also one of the main creators of the [DjVu](https://en.wikipedia.org/wiki/DjVu) image compression technology (together with [Léon Bottou](https://en.wikipedia.org/wiki/L%C3%A9on_Bottou) and Patrick Haffner). He co-developed the Lush programming language with [Léon Bottou](https://en.wikipedia.org/wiki/L%C3%A9on_Bottou). &gt;==== &gt;[**Image**](https://i.imgur.com/RDLvmK7.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Yann_LeCun_at_the_University_of_Minnesota.jpg) --- ^Interesting: [^Léon ^Bottou](https://en.wikipedia.org/wiki/L%C3%A9on_Bottou) ^| [^MNIST ^database](https://en.wikipedia.org/wiki/MNIST_database) ^| [^DjVu](https://en.wikipedia.org/wiki/DjVu) ^| [^Vladimir ^Vapnik](https://en.wikipedia.org/wiki/Vladimir_Vapnik) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnrhifa) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnrhifa)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I considered responding to this with more discussion on the architecture but, honestly, I definitely don't have time to do analysis by remote and unless you guys are blowing VC money like a dot-com at a Herman Miller convention, you probably don't have engineer headcount to address the minutiae anyway. I think we're both better served if I place a prominent link at the top and bottom of my comment so that your comment is not lost among the noise and anyone reading the thread over the weekend will get your side of this discussion as well.
Yes, but the true exchange datacenters are actually in NJ. Carteret and Mahwah.
Two thumbs up?
Whats the exact error you get in the log?
In what cases would you bypass the default sorting algorithm for python? 
I found [this article](https://developers.google.com/edu/python/regular-expressions) about regular expressions and python. Welcome aboard! As a Perl ---&gt; Python person I can say I love the structure of Python as well as the ability to import functions, etc. Stick with Python. I think you'll like it.
Thanks!
Maybe for data sets you already have information about? If it's partially sorted then you might improve performance with a specialized method. 
Why this: if match is None: continue rather than if not match: continue
I think quicksort and timsort already account for this.
Bubble sort is the worst for performance: O(n**2). Quick sort is much better: O(n*ln(n)), plus it's fun to program because it's recursive. But if you're using Python, by far the best, highly optimized, is the built in 'Timsort'. I think even Java has adopted it. Here's Tim Peter's description of it: http://svn.python.org/projects/python/trunk/Objects/listsort.txt 
Runestone is really good.
Why the context (with blah...)? Why not just `for line in open('/tmp/foo'):` IIRC, the __del__ on a file handle automatically does a close and has for years (I think).
1. That big comment block at the top of the file should have been a docstring 2. The file doesn't actually run since the `def bubblesort` line isn't indented properly. 3. Indentation violates PEP-8
Ah looks like you're right. Timsort does at least.
I mean, by definition, any sorting algorithm will take advantage of existing orderings in the sense that it will have less work to do. If there are multiple stages to an algorithm that do some sort of pre-processing, then it would likely have to be tailored to the data you're working with. Does timsort search for ordered subsets first and move them as a group as a kind of catch all? I don't really know the details of how it works just that it combines insertion and merge sort.
Sweet new docs. Always flirted with the idea of rewriting some legacy client code to support asyncio. Good to see that these libraries really taking hold and maturing!
This will work fine as is in Python 3, but in Python 2 if your input file is large you'll want to use `itertools.ifilter` instead of `filter`. Python 2's `filter` returns a list so it must store everything in memory, whereas `itertools.ifilter` and Python 3's `filter` return iterators that will do computations as needed and not store them all together. [If you *do* want a list in Python 3, you can do `list(filter(...))`]
"a formalized API for Model._meta" woo that only took ten years. Looking at these release notes just cements the idea that a monolithic framework like this is a bad idea, IMO
Disregarding cost, AppAcademy wins in terms of track record and quality of curriculum and students. So that would be my first option provided I can sort out my finances to pay the $15k upfront for AA which international students need to do. I've also been accepted to [Ironhack](http://ironhack.com) in Barcelona which is another option I'm looking at.
I'm glad to see DurationField finally in there. I [maintained a patch for it for several years](https://code.djangoproject.com/ticket/2443)... at the time (seven years ago now, holy crap), getting anything substantial merged into Django was simply impossible, it wouldn't even get reviewed. Glad to see things have improved.
* Try not to use globals so much; pass around the things that you need. Also, `global` declarations at top level do nothing; `curl_count = 0` and `curl_storage = []` are global without you needing to say so. * Don't use `list` as a variable name; `list` is already assigned at startup (to the list class itself, which is a useful name to keep around). Also, you can definitely be more descriptive than 'list', 'listx' etc. * Use a `with` block to handle files (`proxies.txt` here). Don't build up lists using a loop; write a list comprehension instead. Also, it seems like what you really want to do with the `.replace` calls is strip off the line ending (if you actually need a space at the end, that can be added manually afterward). Put together, this looks like: with open('proxies.txt') as f: proxies = [line.strip() for line in f] * Breaking a line into two parts at a colon does not require regular expressions; that's massive overkill. The functionality you need is built right into the string itself. ip, _, port = random_proxy().partition(':') * `_redo_curl` and `_create_curl` appear to do pretty much the same thing. I'm sure you can find a way to clean that up. * In `write_out`, I assume that the `data` that will be passed to your callback is a string. Your logic here is suspect; `if 'xxxx' in data`, for example, then it is necessarily *also* true that `'xxx' in data`, since `'xxx'` is a substring of `'xxxx'`. Therefore, that `elif` can never be reached. Also, you're repeating yourself with the `call_later` call; use the conditional logic just to determine a timeout value, and then make the call in one place using that value.
Author here. If there's any part of pycharm that you'd like covered, please don't hesitate to ask :)
Website down? 
Nope. Should be working fine.
Still doesn't work, try clearing your cache and try retrying
I'd rather not have Python throw memory at the problem in the way V8 does. I would no longer be able to have as many coexisting processes.
Hey! Thanks for reading my article. I think I will write PyCharm the bad parts some day. I personally really hate its crappy support for version control. I use github for mac as an alternative. So yes, most definitely, I will write something of the nature some time soon.
probably not 
Thank you. What would you focus on most as key leverage point to saturate a 100mbit port? while (count &lt; 2500) processes = [mp.Process(target=main) for x in range(12)] Ive tried making these things higher but it doesn't work. Callgraphs and things like that are nice debugging tools but aren't fun for async apps. Anyone any advice on that?
Yep. I'm a huge fan of node, but the memory issues are intense. Worth working through, but there are limitations.
That's an epic reply, but I still don't get what IPython is, or why you need a kernel for it? Why not just run torch code from the command line. Also it seems odd that you're running luau code inside something called 'IPython' ...also what's a note book in this context? 
i meant `return`, `raise`, `break`, and `continue`. so everything that short-circuits the normal control flow. loops and branches are imho another class of flow control, as they introduce a block that is executed conditionally or repeatedly.
Programming is about finding and applying principles that are as general as possible. Well, checking for ``None`` if the function can return ``None`` is such a principle. I don't see the benefit of having to reason about whether to use truthiness or checking for ``None``, when a more simple solution already exists.
thing is: both concepts are commonly used in python APIs. and people who are on a level where they don’t understand truthiness will also be confused by `is None`. they’ll say: “why not `== None`”? and you’ll have to explain object identity to them, and that there is only one `None`. not more difficult a concept than truthiness IMHO.
I disagree with your comment but it does add to the conversation. Have an upvote.
People can use ``is None`` without understand object identity, because the rule is to always use ``is None`` and never ``== None``. It's rule they can remember without understanding it in depth. 
"Search Everything" is slow depending on your machine. Its supposed to search things in parallel and your list is supposed to be populated as more items are added. For me, I don't find it slow. As for virtualenv, I know that you have builtin support. But on a *nix machine, I find installing packages via the command line much better. This I suppose is biased, since I prefer the command line over a GUI for most things.
I gotta say, I can't imagine what an IDE offers to a Python developer. Sublime Text and a terminal emulator are all I ever use.
Ah, OpenGL + assorted platform windowing APIs... Yeah, I can see that would require pretty near a complete recoding to shift the C/Python interface :(
I use vim with python-mode.
Apart from zotero integration, which I don't use, what does this give me above pandas? I'd love to use markdown for my papers but I can't get around Latex mathsetting. 
I doubt anyone on /r/python will have that but I wanted to dispel the idea that you are really "protected". They can reverse it from the output, if nothing else, and it'll be perfectly legal.
Your ideas are never protected, unless you patent them. It has always been like that.
&gt;it's basically useless (mouse clicks don't register where they should), and as far as I can tell from the IntelliJ people, they've no interest in fixing it. Do you have a link for this?
Then you're missing out. Honestly, I used to fell the same way, but developing in PyCharm is just so much better. In going to miss it :-(
PyCharm gets all the love these days but before PyCharm there was wingide (http://www.wingware.com/) and it's a very good IDE with most of the bells and whistles you'd expect to find. 
Your choice of hardware for Python development seems a bit unusual, right? Maybe IntelliJ folks think almost nobody is gonna use this setup, so why bother supporting it? 
Huh. Wondered why I suddenly started getting upvotes on my answer to that question the last couple of days...
Audio of the word here: http://en.wiktionary.org/wiki/cornucopia
I've never liked its interface, but in all honesty, I don't like being completely keyboard-bound for my development environment. I have a mouse, and I'd like to use it.
Wing looks neat, but I prefer an open solution, since the closed nature of PyCharm is what's prevented this bug from being fixed in the first place.
I just can't imagine what PyCharm does that Sublime with the right plugins doesn't. Mind you, I'm burned out on webdev, so I haven't played with Django or Flask ever. I could see an IDE being helpful for that, but then again, if that's anything like Rails, I'd probably rather use the CLI anyway.
Isn't Qt fairly low level? I have no problem spending time to learn something but I would rather not only use 3% of its features.
There's a few things I see: In your main() function, you need an instance of Automobile: auto = Automobile(lenght,horsepower,color) The get_worth() function takes 2 parameter x and y, both of which are unused. Also, in your current main() function, you are passing it 3 parameters. If you create an instance of the Automobile class, you don't need to pass it any. The get_worth() function also references self.color instead of self.__color as you have defined in your constructor. Finally, I would recommend raw_input() instead of just input(). See [here](http://stackoverflow.com/questions/4960208/python-2-7-getting-user-input-and-manipulating-as-string-without-quotations) for explanation.
To get the color value, you either have the method get_color() or the attribute __color. Internally, you can use self.__color. (BTW, internal attributes usually use a single underscore, and not two)
I'm guessing OP added x,y because python was complaining about get_worth receiving one parameter, and was being called with three :) 
There is no pycharm. [There is only vim.](http://sd.keepcalm-o-matic.co.uk/i/there-is-no-dana-there-is-only-zuul.png)
Which aspects or properties of Ruby do you find that make it a terrible language? With regards to dependencies, are you talking about bundler? Or how Ruby requires files? Or something else?
I don't think there is anything higher level than qt and it's fairly easy to use why don't you want to use only 3% of its features?
What do you mean 'fix the color'? In the constructor, you have the color variable defined as "self.__color" In get_worth(), you have "if self.color == 'red':" The error that you are receiving is because "self.color" isn't defined in your class definition. You have it called "self.__color"
I just looked at Qt, it seems promising, very promising. However I find it weird that I would need to buy it. http://www.qt.io/download/
Can you explain in simple words what you're trying to accomplish here? Edit: Also, how many cpu's do you have on that box? Edit 2: Have you actually checked how many python processes get started? From a quick read it looks like a fork bomb, since every subprocess will run the startup() function too
you don't need to, also that's the c++ version, the python one is here http://www.riverbankcomputing.co.uk/software/pyqt/intro if you buy it you get other stuff but it's definitely not needed for your needs
I find it pretty decent for working with git, and the local history can be nice as well. The peeking into how a changed section of code is different from the bar where line numbers would go is also nice. I use pycharms git integration for the most common tasks, sourcetree for anything a bit more complicated, then command line for the last 5% or quickly checking something out. One nice plugin I use a good bit is the gitignore plugin, which allows you to mix together gitignore snippets. It would be nice if it natively suggested ignoring the .idea folder. I think any of this would be good to cover.
Try using pip3.4
I've tried pip3.4.exe install django and it also doesn't work. Same error.
How the hell do i correct spelling without opening up a separate Change To... Window. I just want a simple right click drop down menu. I know it's there, I've accidentally gotten it once.
The worst bug is the non ending indexing that block autocomplete googling suggests this is due to stupid TODO Reyes scanning.
I find it much easier then manually managing virtualenvs and its one of the reasons I'd recommend it to newbies but I haven't found a way to install local pip packages yet, so I still do that on the command line before restarting.
PyCharms what i've heard good things about to, but I also don't want to pay for anything if it can be avoided. The only issue i have with PyDev is it crashes occasionally and I've had to reload my entire workspace several times after the project navigator blanked out completly. 
if you do it like this, it even works with palindromic sentences: from string import punctuation input_str = input("Please enter a string of text: ") def is_palindrome(s): s = "".join(c.lower() for c in s if c not in punctuation+" ") return s == s[::-1] if is_palindrome(input_str): print("palindrome") else: print("not a palindrome") 
&gt; PyPy is a fast, compliant alternative implementation of the Python language (2.7.8 **and 3.2.5**). ???
[::-1] will reverse a list, so you can check if any list is the same backwards with just one line. (In a python REPL, such as IDLE) &gt;&gt;&gt; def is_pal(x): return x[::-1] == x ... &gt;&gt;&gt; is_pal('nope') False &gt;&gt;&gt; is_pal('yay') True Although it doesn't have the nice output that yours has ;)
Cpu count doesn't really matter, it runs roughly the same speed wether its on a vps, dedi or a local desktop. The code is the bottleneck, not the hardware used. The right amount of processes get started, that isn't the issue. 
Humm... this should definitely not happen in PyDev (I have a really huge workspace -- editing 20-30 projects with &gt; 10k .py files and haven't had any trouble for quite a while -- I must say that 4-5 years ago this might not be the case, but that should be only in history now). Do you have an entry in the error log for that failure? Do you think you could report it at https://sw-brainwy.rhcloud.com/tracker/PyDev/ ? As a note, it's quite difficult that PyDev causes a crash, so, it's interesting reporting which other Eclipse plugins you have installed (as the issue could be in some other place).
If you go the Eclipse way, installing PyDev in it for Python development is pretty straightforward: http://pydev.org/download.html
Have you tried SourceTree from Atlassian? I really like it. 
Yea I don't actually think its pydevs fault, just something to do with eclipse as when it happens I have to delete some files in eclipses cache folder and manually re-add my projects to the workspace. I really do like PyDev itself, its just the eclipse platform seems a little bloated and I'm not a fan of java. 
Hey, thanks for responding. I always like knowing different people's opinions on different languages for either objective or subjective reasons. It helps restrict me just floating around in an echo chamber. I looked through the reasons in your link, and while there are a couple legitimate reasons listed, most were either out of date, or simply false. Keep in mind that most of that list was drafted in early 2007, and Ruby has come a long way since then. As for dealing with dependencies, I've never really had a problem, at least, not after I understood how dependencies worked in general. Tools like Bundler make it simple and easy to set up the environment. 3 weeks sounds like there was something else wrong entirely. Like, you had Ruby 1.8.7 on the Macbook or something.
But there are few [good parts](https://twitter.com/TomNomNom/status/195304317601849344)!
Oh, I know *all* about rbenv, bro. I learned way more than I ever cared to about ruby trying to get chef to run on that damn mac. And you know what? Ansible is just a better program all around. The central problem related to a gem that wouldn't run on my particular version of osx that was part of the dependency chain for chef's gem. I eventually found a solution as you generally do with enough time and pressure, but it kind of dissuaded me from ever wanting to use chef again and threw into sharp relief what I believe to be the absolute mess that is the gem system. And you're welcome. 
Does "alternative implementation" mean it has the different source code? Could anyone elaborate?
I'm sure you've fixed it now with the answer above. Btw You're spelling length wrong half the time but correctly the other half of the time.
I used PyDevs for about three years, but Eclipse always had that Java-centric tilt that I never cared for. You could spend a lot of time trying to hide its roots, but they always showed through. I haven't used PyDev in a while, but PyCharm seemed to really "understand" Django a lot better in particular. I'm sure PyDev has improved greatly, but with PyCharm being so great for me (subjectively), I haven't felt any desire to go back to the cold embrace of Eclipse. With that said, I am grateful for fabioz's hard work and hope he keeps on going!
Over-engineered, I'd say: text = input("Please entere a string of text: ") if text == "".join(reversed(text)): print("Palindrome!") else: print("Not a palindrome, fool") Didn't bother with case since your original version didn't. 
At work we have a separate git repository for our shared code like that. So, we'll add git@github.com:mywork/utils.git to our requirements.txt, and we can then say from mywork import utils. Then in code we just use utils.somefunction()
[Dammit, I'm Mad.](https://mixedlollies.wordpress.com/2008/02/15/dammit-im-mad-a-poem-by-demetri-martin/)
This is neat, but why are the dependencies listed in the readme instead of being in a requirements.txt or install_requires in setup.py?
Could someone please enlighten me with a use case for this?
 I think i'm in love with you. &lt;3 Looks like only need to tweak only a couple of small things. Thank you so much! Going to update a couple of things, post the final code here and give and give you &amp; zahlman gold. 
A simple mergesort will do an equal amount of work whether the array is sorted or not
This is what you need class Automobile: def __init__(self, length, horsepower, color): self.length = length self.horsepower = horsepower self.color = color def get_worth(self): if self.color == 'red': return 3 * self.length * self.horsepower if self.color == 'yellow': return 2 * self.length * self.horsepower if self.color == 'white': return 1 * self.length * self.horsepower def main(): length=int(input("Enter length in meters: ")) horsepower=int(input("Enter horsepower: ")) color=input("Enter color: ") auto = Automobile(length,horsepower,color) print(auto.get_worth()) #added as examples of accessing variables print(auto.length, auto.horsepower, auto.color) main() I removed the double underscores from the class variables as you referenced them elsewhere without them and you have to remain constant. You now can access these variables once the class is instanced though the class instance like thus &lt;class instance&gt;.&lt;variable name&gt; as shown above. As someone else noted you have to initialize your class to use it and finally you don't need to return your print statement.
Dicts are unordered and not orderable. You can make a list, and sort it.
okay, im trying to do that now, thanks
Does this get you part of the way towards what you want? g = {'fred':{'name':'fred', 'health':10}, 'sam':{'name':'sam', 'health':20}, 'jim':{'name':'jim', 'health':2}} sorted(g, key=lambda k: g[k]['health']) &gt; "jim", "fred", "sam"
From the side bar &gt;If you are about to ask a question, please consider r/learnpython If I had to say, it's your white spacing. Lines 10 through 17 are caught in your except block on line 7 so your intended functionality only happens when someone doesn't type in a whole number.
For those curious about how this parsing works, I recommend both /u/munificent's [blog post](http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/) on the subject, as well as an [article on Effbot](http://effbot.org/zone/simple-top-down-parsing.htm) (the Effbot one is terser, but makes a handier reference if you want to implement a parser like this yourself, and already know the basics of how it works). I actually implemented something like this yesterday in Java, because I wanted to add a simple arithmetic calculator to Minecraft (that code isn't yet available publicly, but I may get around to it soon - as it stands, you can type `/calc 2 + 2` in Minecraft and get the answer `= 4.0` back from the server). I decided to see what the result would look like in Python, and this is what came out of my rewrite (plus a few additions). The language that this evaluates (and this is an *evaluator*, not just a parser) is essentially simple arithmetic, but with functions included. In order to facilitate multi-argument functions, it also includes tuples. Why should you care? Well, if you are one of those people who thinks of parsing (expression parsing in particular) as a deep or mysterious topic (as I used to), then the simplicity of a Pratt parser will definitely surprise you. In essesnce, you define a series of tokens which know their precedences, and two methods for each type of token - one is called when the token is used in the prefix position (that is, as the first token in a new expression), and the other for when the token is used in the infix position (that is, to the right of some other expression). You then implement a bit of machinery for picking out tokens according to their precedences, and you have a parser.
Neither. Dictionaries basically don't have an order (at least, not one you can rely on). They're implemented by hash tables, which means the items are assigned into a set of buckets via a hash function (which is, ideally, essentially random - the idea is that an arbitrary item will essentially be equally likely to go into any bucket). The order you iterate over the items is arbitrary (essentially just walking through these buckets), and only remains the same so long as you don't modify the dict between iterations (this can cause a resize, which can completely change the position of every item). In short, if you want to iterate the keys in a particular order, you need to do it yourself. Ie. rather than: for key, val in d.items(): # do something with items Instead write something like: for key in sorted(d): val = d[key] # do something with items &gt;or is is first in first , second in second? There is actually a dictionary type that does remember insertion order, but it's not the standard dict. Rather, you can use an `OrderedDict`, which can be found in the collections module.
I like pycharm's merge interface, and I use the [changes log](https://www.jetbrains.com/pycharm/webhelp/log-tab.html) all the time to see where I am in comparison to other branches or remotes. I have even occasionally rebased some things, with, well, no worse rate of success than any other tool I've used. (Although trying to cherry-pick multiple commits did not go well for me this week.) The place where it falls down for me is the commit interface, and for that I keep [GitX](http://gitx.frim.nl/) or [git-cola](https://git-cola.github.io/) around. They give me much better visibility over what's going in to my commit, and a better interface to select individual patch hunks or lines.
A definitive guide to making the fonts look good on any JVM other than Apple's Java 1.6
Interesting read. I'm definitely not a fan of the scope rules in Python though.
How do your fonts look right now in PyCharm? Screenshot?
I will at some point. Right now github for mac works perfectly for me, and anything complicated can be handled by legit.
You don't really need a dict of dicts here, since you already have a name there. Once you make it a list of dicts, it's fairly easy to sort by health. g = [ {'name':'fred', 'health':10}, {'name':'sam', 'health':20}, {'name':'jim', 'health':2} ] sorted_list = sorted(g, key=lambda d: d['health'], reverse=True)
I'm pretty satisfied with the responses on the bug tracker to things that were actual bugs in core features, but yeah, things that are not standard Django applications do seem to get second-class treatment. Sucks that you got no reply at all to the remote debugger issue; good debugger support is one of the things I most value about an IDE.
On my Linux, from chrome, your page, or the site home(http://nafiulis.me/) don't load anything. However, the "Konqurer" browser load it pretty quickly. Chrome don't fail for most other pages.
The code is clean and straight-forward, but it's a lot longer and repetitive than it has to be. If you apply to it a few passes of refactoring, you could get it in half the amount of lines, and I wager you'll learn in the process.
Scoping rules also allow you to forego default value initialization if you know the variable will have a value before you use it. For example: def f(share_count): if share_count &gt; 10: next_action = "go" else: next_action = "stop" do_something(next_action) With "usual" scoping rules, you'd have to assign a default value to `next_action` before the conditional since Python doesn't distinguish between [declaration and definition](http://www.cprogramming.com/declare_vs_define.html). And as one of the commentors mentioned, the lambda capture issue has nothing to do with Python's scope logic. The C# language (v5), which has the typical C-style block scoping, introduced a change that fixed [this same issue](http://blogs.msdn.com/b/ericlippert/archive/2009/11/12/closing-over-the-loop-variable-considered-harmful.aspx).
how so? what makes it so perfect? Kivy is advertised as being perfect for touch screen deployment.
I'm on mobile otherwise I would link you but Google a video tutorial and you'll see how easy it is to do what your wanting 
I think mixing strings and bytes, not using lazy iterators by default, and ambiguous package structure are all bad practices/antipatterns. However, I agree with the rest of your advice and think it is excellent.
This is the best explanation I have seen about how dicts work. And it explains very well why they are not ordered. PyCon 2010: The Mighty Dictionary: http://youtu.be/C4Kc8xzcA68
My main motivation behind python-aead is the "associated data" portion of AEAD. If that isn't required my default recommendation is the Fernet recipe in pyca/cryptography. I dislike any libraries that dictate the iteration count of the KDF used to derive a key from a password. 10,000 iterations of PBKDF2 is much too low for comfort, on today's computers something like 100,000 iterations will be much better. The iteration count should be adapted based on the system the code will be running on. python-aead is able to take a key derived from a KDF instead of a randomly generated key, you just have to roll that portion by yourself (for now).
Ok thanks mate, I will have a look at it
numpy.any(prey &lt; 1)
honestly I'd love to look at the code if you put it on a website that made sense like github or pastebin.
Folks, Part II is out now: http://nafiulis.me/pycharm-the-good-parts-ii.html
Very nice! In the future, consider posting such examples to /r/learnpython which is really the more appropriate subreddit, and where you will likely get more feedback. I always try to find at least one thing to improve upon when a beginner shows a working program that they wrote ... You ask some yes/no questions and try to cover all cases (for exemple: "Yes", "yes", "Y", "y"). What if your friend has caps lock on so that they enter "YES") ? To make the code more robust (it still will not cover all possible cases), what I would do is replace the four comparisons you do for "Yes" (and same for "No") by a simple one like this: if answer.lower()[0] == "y": Let's break this down ... ``.lower()`` is a string method that changes all upper case characters to lower case. Given a string, ``[0]`` picks up the first character. Try it!
Awesome, thanks so much, I should've known it was a simple solution. 
I would use lists, instead of variables. Thus, instead of home1 = ... home2 = ... I would have home[0] = ... # Python lists are indexed starting at 0 home[1] = ... And, when you need to add others, home.append(...) 
sorry my knowledge is too little for that. so if i put: no_of_games=int(input("Games:\t") what could i do after that to get them to input the games results
This looks pretty easy to code in C. I translate a lot of python to C, and I find it really helps to create an un-pythonified version in python. Put your code in a function Put a simplified version of your code in another function Call them both with the same inputs. Once those match exactly, now you can code the c. I would: - remove the list comprehensions - remove the keywords, such as 'reversed' Once you've done that, the C will be far easier.
The Bad Parts*. * When you get done with The Good Parts. Gotchas, things that are awkward, things that could be better. It should be a small list. ;-)
Actually, I'm writing one right now. The bad parts of PyCharm. But, it isn't long enough yet to publish so, I gotta keep adding stuff :)
What are you wanting to do with this data? It may well be that a spreadsheet would be more suited to your needs here.
i want to compare the real scores with the persons predicted scores such as: if h1==predictedh1: score = score + 1
thanks, understood ;)
I'm sorry, I'm trying to start a discussion. Seriously, a quote from the article: "The def keyword is used to create user-defined functions." Is that intermediate level python?
It's just the name of the blog I guess
The power of IDE is that you get prepackaged editor with plugins that ease your development. You can do this with manually or stuff your editor with plugins but: * it takes time, * usually is not so well integrated (I of the IDE) * setup is tedious for every new employee, everyone has a bit different setup, it is not so trivial as "hey, install IDE X or Y" There are few features I personally consider as a must for IDE: smart code completion and integrated debugger. For me saying like "I dont see the benefits of IDE" is feels like saying "I don't want to use productivity tools". (This whole topic about IDE vs No-IDE is too subjective)
yes, I did not know [gitignore.io](https://www.gitignore.io/) , thanks ;)
yes thanks
&gt; smart code completion I have that, without an IDE. In fact, I'd consider that a must-have feature in any text editor. &gt; integrated debugger Being able to set breakpoints visually is nice for quick checks, but beyond that, all I want from an integrated debugger is a terminal interface to give commands to, and on any serious debugs, I prefer to manage breakpoints as a list anyway. Maybe I'm just getting old, but I'm faster with a terminal window.
Technically you're not even *required* to use the ORM. Django is happy to sit back and resolve URLs to functions just like Bottle and Flask. But the reality is that any project that uses Django is most likely going to be using all the Django parts. So now if you have any issue with Django's * admin * ORM * templating * form library * URL resolving * sessions * caching * authentication * permissions * management commands (ugh getopt) * migrations, now you're effectively stuck and your only option is to gut some part of Django or hope they fix it with the next version. I am not sure how Django *isn't* monolithic considering the huge number of features it tries to bundle together. Finally to be frank I don't understand how they're "adding" support for Jinja2. What stops someone from just calling Jinja2 libraries in their views? What does Django gain by attempting to "integrate"? Why not also integrate with Mako and Cheetah and Moustache...? Does this mean some improvements to Jinja2 might now be held back from Django users until Django updates their integration code? Why bother adding more stuff? 
At least 200 SLOC (25% in total) is devoted to lexing, and that is the part I'm having trouble condensing (I've converted some more lengthy sections down into table lookups, which shaves off 50 lines). I'll have to mess around with it more, but my initial attempt at using regexes for this makes it more difficult to handle errors when the regex fails to match. For example, the regex `([0-9]+[.]?[0-9]*|[0-9]*[.][0-9]+)([Ee][+-]?[0-9]+)` matches the language's floating point numbers, but if it hits something like `2.2e+`, the regex will match `2.2` and leave the `e+`. With the explicit state machine, I can get some decent error handling, but with regexes, I'll have to work out how the remaining `e+` doesn't get thrown into the next token.
tho I'll keep your first advice in mind for next time it actually put me on tracks 
The problem with your code is that you are modifying X while looping over it. It is important to realize that enumerate does *not* create a copy of X (paired with indices). Instead it is an object (called a generator) that loops through the elements of X on demand and pairs them with an index. That means that after the first iteration, in which you have already removed the first element, it returns the second element of X as it is at that point of the iteration. Since at that point the list X only has one element left, it thinks it's done and therefore ends the loop. A better way of writing a loop in which you modify a dynamic list, is to either decide in advance which elements you want to remove, or simply build a new list with the ones you want to keep: X_new = [] for i, a in enumerate (X): if not 1 in a: Xnew.append(a) X = X_new Note, that you can write this in one line with a list comprehension: X = [a for a in X if not 1 in a]
thank you very much :)
"Rules are for the obedience of fools and the guidance of wise men." Don't be concerned with there being a single right way. Read guides like this and try things and settle on what makes sense to you. Even if it takes time to get to a place of wisdom it's important that you make an active effort to get there yourself rather than be led passively.
Perhaps you put too much responsibility for "text editor". If getting old means being more experienced then you are right, but we can not compare everyone to ourselves. :D 
When the "pop(0)" runs, the item at index "1" falls to index "0", then the iteration tries to get index "1", which fails and stops the iteration. it's rare that you need "enumerate", or "list.pop(idx)" the most basic way to fix it is: def filter_no_1s(items): result = [] for item in items: if 1 not in item: result.append(item) but a generator would be better for all sorts of reasons: def filter_no_1s(items): for item in items: if 1 not in item: yield item result = filter_no_1s(items) or if you actually need a list: result = list(filter_no_1s(items)) or you can say it inline with a comprehension: result = (item for item in items if 1 not in item) result = [item for item in items if 1 not in item] 
OP, no one likes mediafire. It is a haven for malware. There are *plenty* of sites designed for sharing code. Pick one.
Your code points to https://goel.io/joe, but the cert is not right. When I ignore the cert it presents me with a 404 (for port 443). HTTP works fine though.
I don't know about "python badassery", but [Ned Batchelder's](http://nedbatchelder.com/text/) articles taught me a lot about best practices in python, or common pitfalls. He also has articles about unicode and testing in python (unicode, or the difference between `str` and `bytes`, being a common problem for newcomers to python).
Is it fully functional? -&gt; Yes. It there any way I can work around to make it more Mac friendly? -&gt; `pip install lxml` To be slightly more constructive, yes I've been using lxml for ages on Mac OS. What I'm usually doing is: 1. Install homebrew 2. run `brew install python` 3. `pip install &lt;whatever python package I'm interested in&gt;` (most of the time in a virtualenv). 
 pip install kivy ?
First off, why wouldn't you post this to /r/learnpython? But because I'm feeling generous, there are two ways. Say you've created a virtualenv via $ virtualenv /var/virtualenv/kivypy3 You can run one of the following: $ /var/virtualenv/kivypy3/bin/pip install kivy or $ source /var/virtualenv/kivypy3/bin/activate (kivypy3)$ pip install kivy
how much data do you need to pull?
So I tried `/var/virtualenv/kivypy3/bin/pip install kivy` but I get an error. Cython is missing, its required for compiling kivy ! ImportError: No module named 'Cython' 
Is the good parts for community edition? 
Activate the virtualenv first with source bin/activate 
[pyenv](https://github.com/yyuu/pyenv) is the best way to install python on OSX/Linux (in my opinion). $ brew install pyenv $ pyenv install 3.4.2
dont forget `pytest.mark.parametrize`!
Two things, Contact support, you paid for the product -&gt; if that doesn't work. Use vim.
Good suggestion. I'd add that if you don't want to accept things like "yno" or "yargh!" as responses in the affirmative, this is a nice way of doing so: `if answer.lower() in ("yes", "y"):`
ah, looks like JSON is not yet there. But it will I hope, as it's listed on Kickstarter https://www.kickstarter.com/projects/mjtamlyn/improved-postgresql-support-in-django
I've had people message me and found someone! Thank you everyone though for your helpfulness. This is my first post on Reddit and the community here is wonderful.
Dammit. Yeah, I copied the default implementation for the prefix and infix operators over, since the implementations for the specific types had all the meat. I noticed a few other comments I forgot to change. Thanks for pointing that out :) &gt; Considering I've recently implemented a toy LR(*) parser... I'm curious what for, and if you have the code anywhere. Parsing in general has always been a bit mysterious to me - RD and things like Pratt parsers which are similar in style to RD are straightforward, but table-driven methods seem more impenetrable. &gt; But I do think a lot of it is in the style of writing. Do your thoughts on this matter stem (partially, at least) from my use of `@singledispatch`? I've been trying to get into using it more (due to my interest in other languages which use generic functions, like R and Common Lisp) but I don't get the sense that others are using it a lot. Does it seem inherently unPythonic, or is it simply that it is too new?
I'm pretty sure they are.. https://www.jetbrains.com/pycharm/features/editions_comparison_matrix.html
Doesn't df = pd.read_clipboard() do this?
Quoting from your last post... &gt; How the hell do i correct spelling without opening up a separate Change To... Window. &gt; I just want a simple right click drop down menu. I know it's there, I've accidentally gotten it once.
It can be used for both. All the demos are client side code: http://salvatore.diodev.fr/RapydScript 
These software names are getting out of hand... without seeing the subreddit I thought someone was putting sticks of celery in their flask. I thought wtf? Are they blending them or something first? Celery juice? Why?
http://pyschool.net/ done entirely with Brython.
There's a whole book [here](http://www.jeffknupp.com/writing-idiomatic-python-ebook/). I buy quite a bit of programming books and this one is probably my favourite one, highly recommend it.
Holy crap, you just introduced me to annotations. Thank you!
had to delete my post because i wrote exactly the same before i scrolled and saw this perhaps they don't know about version control yet, in that case it's certainly a good thing to learn about
And here's a video series by the author: http://www.youtube.com/playlist?list=PLHb-tUHjtzRCMeC5IjbJOjNLiJ28982NJ
Or emacs, either or.
Check out the free books in the sidebar
Cool concept, but I sit here and wonder how Uglify will work on Brython... Would be nice to be able to compile and release .pyc only.
In theory you'll see worse returns if you have more processes running than cores, if each process is CPU-bound.
Thanks! I was reading an article this morning about this, I will have a deeper look at that.
It's almost impossible for International students to find work in the US due to visa and immigration laws at the moment. In terms of Ironhack, basically Internationals go back home and find jobs. Very few non-Europeans have found jobs in Europe but a few have, it's just a lot of work - like anything worthwhile is. Hope that answers your question!
this is going to sound obvious, but pygame.org is a good place to start. download a game, play it, then play with the source.
Everything I've covered so far, should be in the community edition as well except for Language Injection I think.
You are free to pick you own editor, however all anwers that differ from vim are wrong. :)
JuJu? Kafka? ZooKeeper? Eucalyptus? Yeah, they get pretty weird...
Yes, PyCharm should have some means of warning you when it's trying to index some huge data directory in your project that it should better just ignore. Unlike for you, it hasn't been a big problem for me because I could immediately identify the issue, but it's annoying...
Teaching them how to get index errors? (Just kidding...) :-) For completeness, make it `if answer and answer.lower().startswith("y"): ...` to make sure you are not trying to fetch the first char of an empty string or worse, if `answer` for some unforeseen reason still is `None`.
[The Thee Virtues of a GREAT Programmer](http://threevirtues.com/) 
Regexes will probably help. From memory you can get a lift of all match locations (which you can just take the Len of).
what if you don't have the foresight to document.
And [not just annotations...](https://www.python.org/dev/peps/pep-0484/)
&gt; count = len(s.split("as"))-1 That was great. Just one more question though. How would i be able to count the overlapping occurrences? Ive looked everywhere and cant find a solution. for example, lets say instead of as it would be bob. if a user enters bobob, it should be two bob's. Not one. It just worked because i deleted the -1 at the end and i got better estimates but for some reason its still not working 100%. Its off about 1 bob every time, I dont know why.
Test hoboboobbobbbobobbopbbobbbpbooboboboobbobovob gives 7, not 8. test obooooboboblbobbboobbobbvbobob gives 5 not 6. Its really close, i just dont understand why its not getting all of them.
The post goes against the whole message it contains: OP was very unlazy in making an image out of a simple text and uploading it to imgurl.
What does this have to do with Python?
&gt; there is no such thing as too much documentation. Java people are hard at work proving you wrong.
Hi Miguel, thanks for a further in-depth look at celery. I have a related question - I came across this the other day [Single dyno 2 processes on Heroku](http://www.radekdostal.com/content/heroku-running-multiple-python-processes-single-dyno-using-honcho) It may be that my site is not sophisticated enough to require a worker process of its own however I have built it around celery, I would like to keep using it, and it would be amzing to be able to run the whole thing on a single dyno. Could the area I am having trouble with be that I am running celery as an actual process (My Procfile looks like: web: gunicorn run:app --log-file=- worker: celery worker --app=app.celery whereas the link I have included links to [Here](http://heyman.info/2012/dec/6/heroku-multiple-processes-single-dyno-with-foreman/) Uses a Procfile that looks like this: web: gunicorn -b 0.0.0.0:$PORT -w 4 myapp.wsgi:application celery: python manage.py celeryd -c 3 --beat as opposed to a daemon, as they do? Any help would be amazing, and thanks for your book and your blog which have been invaluable 
regular expressions are something that sooner or later must be learned, are very useful and in some cases even essential. but for now you can try a less elegant solution input = raw_input("string: ") find = 'bob' count = 0 index = [] aux = 0 #list all indexes of first letter of bob for c in input: if c == find[0]: index.append(aux) aux = aux + 1 #for all indexes test successive character for i in index: a = 0 while i+a &lt; len(input) and find[a] == input[i + a]: a = a + 1 if a == len(find): count = count + 1 break print count
I have read this in the Perl man page too.
I think it is a specific case of your passwd file, I did a test with this code: I measure the time required to count the occurrences of the number 10, in 20 tuble composed of an array, and its sorted version, of 1000 random numbers between 0 and 100 the ordered version is always faster import timeit setup = ''' import random arr = [] for a in range(0,20): lol = [] for aa in range(0,1000): lol.append(random.randint(0,100)) mom = sorted(lol) arr.append((lol, mom)) ''' for t in range(0,20): a = timeit.timeit('arr[' + str(t) + '][0].count(10)', setup = setup , number=1000) b = timeit.timeit('arr[' + str(t) + '][1].count(10)', setup = setup , number=1000) print str(a) + ' - ' + str(b) output: 0.0188398361206 - 0.0176529884338 0.0191040039062 - 0.0179080963135 0.0194220542908 - 0.0178411006927 0.0191209316254 - 0.0177569389343 0.0194089412689 - 0.019711971283 0.0191640853882 - 0.0176539421082 0.0192730426788 - 0.0177450180054 0.0193121433258 - 0.0179560184479 0.0194480419159 - 0.0178151130676 0.0193469524384 - 0.018214225769 0.0192589759827 - 0.01784491539 0.0193989276886 - 0.017993927002 0.0188779830933 - 0.0195150375366 0.0194749832153 - 0.0178179740906 0.0208430290222 - 0.018049955368 0.0194010734558 - 0.0180151462555 0.0194160938263 - 0.0177819728851 0.0191400051117 - 0.0179209709167 0.0190508365631 - 0.0176458358765 0.0190360546112 - 0.0174958705902 
I don't know if this is the kind of thing you're looking for or not, but you may want to try [Python Challenge](http://www.pythonchallenge.com/). It's a series of programming challenges that gets more and more difficult as you progress.
I used a library called faker, more info at http://goo.gl/xeXgHt, to generate a list of names. then I choose one at random, and I count the occurrences in both lists. My result is that in 70% of cases, the sorted lists are more efficient import timeit setup = ''' import random from faker import Factory fake = Factory.create() arr = [] for a in range(0,100): lol = [] for aa in range(0,100): lol.append(fake.name()) mom = sorted(lol) arr.append((lol, mom)) bob = (random.choice(lol)) ''' count = 0 for t in range(0,100): a = timeit.timeit('arr[' + str(t) + '][0].count(bob)', setup = setup , number=1000) b = timeit.timeit('arr[' + str(t) + '][1].count(bob)', setup = setup , number=1000) #print str(a) + ' - ' + str(b) if b &lt; a: count = count + 1 print str(count) + '/100' 
I have long held that efficiency is naught more than the creative application of laziness.
I don't know anything about computer hardware. I didn't know if having my script use 100% and 11/12GB of RAM is bad for it in the long term. I'm new to multiprocessing, so I just didn't know if there was something I wasn't aware of.
I don't see any consistent difference on my system. I suspect that in your case you somehow have more data that fits in L1 data cache (16k probably, but the pressure also includes some of the involved Python bytecode), sorting the list only rearranges the pointers to strings, strings themselves were allocated out more or less contiguously in memory, accessing them in order allows the CPU to efficiently prefetch data, accessing them in an essentially random order causes cache misses. [Here](http://ideone.com/WhOsNu) you can see this effect more pronounced in a highly synthetic test. I really am not sure that this is what happens in your case, unless your /etc/passwd is _huge_.
Ah, I see. Thanks!
It has to do with programming. Python is a programming language.
If your processor supports hyperthreading then the number increases to two processes per core but yes, I think you'll see performance reduce as you add more processes than virtual cores. Each core executes a finite number of instructions per second so having more processes than cores requires the OS to constantly be switching processes to running then sleeping and back again, and all this context switching creates a certain amount of overhead. The more processes, the more bookkeeping the OS must do and therefore the higher the overhead. In a more IO-bound situation such as a web server waiting for incoming connections or an IDE indexing a codebase then it makes sense to add processes/threads until the CPU being utilised fully or the contention moves somewhere else such as a shared resource.
/r/programming then
You have not looked at the link provided, have you? The the OP: pygame is a python that helps you to write your own games. While /u/Darknezz19 's suggestion to have a look at the source for games is a good one for someone wanting to learn the language, it is nothing like Colobot.
So, according to you, right now your 5 processes are using 80% of your CPU and you want to run 15 to 20 processes thinking that this will speed up your code execution by a factor of 2 to 4? Let's take a step back. If your 5 processes are using 80% of your CPU (with some minor amount of CPU being used by other processes ... say 5% to keep numbers simple), this would mean that each process on its own would use about 15% of your CPU. Multiply that 15% by 7 and you get 105% i.e. more computing power than your CPU is capable of: no matter what you do, the laws of physics will not allow Python to have your CPU at more than 100% capacity. You can try to run 15, 20 ... 50 ....1000 processes, you will never exceed the 100% capacity, and using more processes will not speed things up.
If you were actually lazy, you probably wouldn't know how to do any of this. This quote is self-serving.
I'm not seeing the same thing here. However, speculating a bit, one possibility might be the order of allocation and the impact of this on caching. Eg. the various strings may be allocated in contiguous memory in order of their appearance in the list, meaning you may get fewer cache misses (at least for small strings) if accessed in that order. What happens if you do: z = sorted(x, key=id) %timeit z.count('operator:x:11:0:operator:/root:/bin/bash\n') This will create a list which has the items in order of memory address, which ought to be at least as fast as the first case if this is the culprit. However, as mentioned, I'm not seeing that here (64 bit linux system, python3). The allocations are mixed, and seem to be spaced out (mostly by 48 bytes for some reason, though I'm using fairly short strings - possibly this is the size of the str object?). A cache line is 64 bytes, so potentially there could still be a gain (unless perhaps it needs to read the whole object and it's always 48+ bytes - which might mean it's 32 bit systems that behave differently (smaller object size) - what platform are you running on? Ttesting here doesn't bear this out - all runs are pretty indistinguishable. As such, I'm not too confident in this theory.
I don't see anything wrong with posts like these - some people aren't subscribed to /r/programming (myself included, whoops).
My fault, I have edited my post to include code that anyone can test without relying on "/etc/passwd" Please let me know if you get different results than mine
I've edited my original post to make code easy to test
It's a left-associative reduce which starts from the given seed value. So e.g. foldl(f, 0, [1, 2, 3]) == f(f(f(0, 1), 2), 3) So if `f` is addition this calculates the sum of the list. I would avoid this implementation though because of recursion.
Yeah, in that code it's cache effects, just like in mine (http://ideone.com/WhOsNu if you missed it). 1000 lines * 45 characters is about enough to start getting the effect reliably and noticeably with 16k L1d cache (but not enough with 32k, by the way). If you go to 10000 lines the difference becomes about 2-3x instead of a few percent. Is your /etc/passwd really 1000 lines or so? Are you doing this on a shared server at a university or something?
I really want to slap the person who first came up with the idea of good code is self documenting code because it instantly turned not writing documentation in an ego thing. "I don't have to write docs because I'm just so damn good" / "I only have to write docs because I'm a bad programmer"
I'm not aware of any actual games that are built around teaching Pyhton, but there are some highly _gamified_ learning environments, e.g. [Codecademy](http://www.codecademy.com/en/tracks/python).
Use a bigger data set, see my code there: http://www.reddit.com/r/Python/comments/2sx5ii/why_unsorted_list_can_outperform_sorted_list_when/cntqzxd I think the gains I'm seeing are too big to be explained simply by neighboring strings being already loaded, that wouldn't speed it up more than 2x in the best case: as a matter of fact strings in /etc/password + allocation overhead are just a bit longer than a cache line, so the best case is when we examine the whole string and trigger the loading of the next cache line. And it wouldn't work in my case at all (the comparison bails out immediately), so I'm pretty sure that the CPU is clever enough to prefetch them.
* Most google hits * On github * Installable via `pip` * Professional-looking documentation * Actually works
How hard can it be to copy and paste text?
Larry Wall, the author of this quote, is also the author of one of the most ridiculed language in recent years--Perl.
Fair enough, you have a point.
Well, you'd need another compiler/interpreter to interpret another language. If there were it wouldn't be python anymore as it wouldn't fit the language definition. That's why programming is inherently English. Most programmers (historically) speak English so most are written with English based keywords. Of course comments can be, and are, written in any language.
I had a chance to look at some Obj-C code written in China. They used the normal syntax and english words in the code but comments were in Chinese. I imagine that'd be the same regardless of programming language or written language.
Well given python supports Unicode the possibilities are endless. What you sometimes see in the wild is comments will be in &lt;Pick your favorite language&gt; and variable/function names in an English version of &lt;Pick your favorite language&gt;. The Python core functions will not change across languages and most libraries will be in English as well. So this is often seen as bad practice.
&gt;Not if it's a screenshot of the text from where he was reading it. How do you copy from a screenshot and get text out?
I'm lazy, should I learn how to program?
Ceartainly, poor perl.
What type of editing? I think OpenCV is more for vision and machine learning.
If laziness was a virtue, Python would be a compiled language. "It's compiling."
Sadly, this is more common than you think.
I'm not that skilled in Python but I do know some other languages. So please keep in mind that my experience talking about Python libraries is minimal. So thank you for crossing one of my list already. What I want is to write functionality that can take multiple videos, take parts out and combine them to one. So it needs to be able to read, edit and write video in a modern format.
"I was lazy and didn't finish perl 6. So now you can be lazy and not learn all the new stuff! It's a win-win!"
Why it is getting downvoted? 
Does "Hyper-V support" mean hyper-threading support? Thanks!
Which is something I never quite understood... I've worked a lot with Perl and it just isn't _that_ hard to work with at all. And it's still - by far - the best tool for extraction, reporting, filtering, and glue. IMO anyway, but I can't think of anything that compares, except maybe Ruby, but that language feels very "toy" to me and hard to work with.
I think it does support hyper-threading. The script does use threading for the I/O stuff, and then uses multiprocessing to run the calculations. I tried threading with it, but it didn't increase the performance. The way the program is setup right now, is that I have to run 5 different versions of it at the same time. But I have them all sleep to give each one time to run first. But I've run into the problem where it takes it 3 minutes to do the calculations with multiprocessing and the next one starts runs after its 1 minute sleep. So one instance still has 5 processes running, but now the new one will add 5 more. And since they take 3 minutes, they're still running while the others start to begin their calculations. The number of processes add up. I want to make sure that it would cause some type of harm that I haven't thought of if I use 15-20 processes.
Maybe substituting "locale" for languages in your search would help? Also searching "programming in a different language" returned some results for me. The quotes force google to search for that string rather than the keywords individually.
What if OP automated the whole process?
That somewhat hurt my head, something doesn't make sense with what you are doing then. In the end though * No, running more processes that all require the CPU's attention than cores won't hurt the CPU (it mimics a stress test, just make sure your cooling is up to the job) * It is horrible inefficient to do so though and will increase runtime Think about it this way, take 5 folders you want to copy from one drive to another (to force it to actually copy instead of changing a header for where the folder is). Make it fairly large so it will take ~5 minutes to copy. Then wait 1 minute between starting each copy. It isn't an exact approximation since you have threads, but that's effectively what you are doing as each instance of the program running will suck up all your physical cores. If you did this in line so you waited for the copy to finish before starting the next, it would take 25 minutes, if you did it with a minute 'sleep' before starting each, you wind up dragging things to a halt as you have to communicate who gets which resources in which order every clock cycle (overhead) and ends up taking maybe an hour. Change the flow maybe so when one calculation has completed, pass an argument to the command line to start the next instance of the program. Then it doesn't matter how long it takes to calculate, it will automatically start the next instance instead of having an approximate sleep timer. That may take less time than bogging the CPU down with 15 CPU heavy threads in the middle. 
By the way, the factor four difference is similar to other such benchmarks, if I recall correctly.
But if the data sets were say 10x larger, then wouldn't the join / reduce phases take proportionally more time, making the map operations a drop in the proverbial bucket? Furthermore, isn't the Reduce phase scalable? Do you know of a good place to find out what an example workflow which would significantly benefit from Spark looks like? This contrived example was just part of a larger task consisting of more joins, more maps and more reduces.
I'm guessing the cooling is up to the job. It better be, because I'm most likely going to have this program run for many hours a day. Wouldn't the copying example not really apply since the disk can only write at a maximum speed? Copying 10 files at the same time will take the same amount of time as copying them consecutively. Yes, I'll also try other variations so that it doesn't have to wait just 1 minute. 