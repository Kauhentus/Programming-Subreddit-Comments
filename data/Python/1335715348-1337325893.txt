I'd imagine that Django's admin interface could be very useful for a site like that.
I had a look at the pyramid documentation and there doesn't seem to be API's for admin interface etc?. As you are already using pyramid, can u explain a bit more about how easy it is to develop e-commerce website with shopping cart using pyramid and what do i need to consider if i have to develop e-commerce website using pyramid.
I'm using Pyramid because I wrote Pyramid. I don't know that there's a reason for you to use Pyramid if the various Django things work for you.
[And when using a dictionary to look up callbacks based on a condition](http://www.reddit.com/r/Python/comments/swmuj/let_me_know_the_use_cases_for_lambda_in_python/c4hzide). I maintain that `lambda: None` is much prettier than defining a function that returns None outside of the `dict.get()` call.
It reads/writes your old SSHMenu config files and it has a GUI for configuring your hosts. It has "Open all as windows" and "open all as tabs" functionality and it also supports arbitrary numbers of submenus. It doesn't support launching arbitrary programs, though. Edit: it's also written with gtk3 rather than gtk2
Wow. thanks for taking your time. I did not expect a reply from pyramid author itself. 
Why are these sites not on the frontpage of djangoproject.com and the other frameworks used to create them?
because articles about beautiful and ugly are likely written by web/graphic designers who had to pick up actual programming for whatever reason and now fancy themselves as having a credible opinion about programmy things. They probably haven't picked up the concept of [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). Yes I am generalizing. But in my experience, these types(and to some extent UX folks) have it in their heads that they should have an opinion about all aspects of software that everyone should listen to because they have a grasp on touchy feeley things that supposedly and exclusively matter to the user. Someday they will learn their place.
The premise of the article was to show beautiful websites that had at some point in the stack been handled by Python.
&gt; /Python /r/Python (sorry, this is a pet peeve of mine) Also, the `while` statement could act as your `if`. y = None while y.strip().lower() not in ('yes', 'y'): if y is not None: # Skipped the first time, caught every time thereafter. print ("I think you should choose again!") y = input("Should Matt be placed in a leadership position? &lt;Yes or No&gt;")
The point of the article was to show the divide and that the statement made in the previous article was foolish. 
Well then you failed because it came across as a 'Nuh-uh Python be pretty tooooo' kind of post.
I agree with the first part, but care to elaborate on why switching to GitHub is bad?
I prefer to see people switching to free software code hosting sites, like [Gitorious](https://gitorious.org).
I would look up the string format() method. It helps make string generation more legible: "Hello {0}! &lt;Press Enter&gt;".format(x)
[Here][1] is an exmaple that shows how to use this. It currently does not provide entity mapping, but is going to has it in the version 0.3. [1]: http://sider.dahlia.kr/en/0.2.0/sider/ext/wsgi_referer_stat.html
&gt; I prefer to see people switching to free software code hosting sites, like Gitorious. Django is not some theoretical free software, it's open source and practical. If github is the solution that makes the django developers deliver a better project, they will use it.
So you clearly misunderstood the entire point. The initial article took the stance of python applications are ugly, I clearly said the premise is flawed and went on to quote the following. So don’t judge me based on the layout of my HTML, but on the content of my servers. That being said, I continued to illustrate that based on his premise that their were many sites that put emphasis on design in their applications. Sadly, the original post may have been nonsense but that isn't a prerequisite in forming opinions in people's minds that python developers don't appreciate good presentation in their works. It seems that you are arguing to argue, or a complete failure to understand that posts similar to that reflect badly on the python community.
He meant free as in open source, not paid. I do think it's slightly disturbing that much of the development community considers Github to be *the* place to host their projects, seemingly without being a bit more paranoid and considering the alternatives.
Because the RoR 'developers' love to spout ignorant crap that you should use RoR because it makes pretty eye candy sites. That's only because RoR is more 'designer friendly' in that it is very plug-and-play and allows quick prototyping of the designs. Meanwhile, Python is in line with developing while neglecting the front-end designs. Yes, it all depends on the designer and the front-end developer to make any project pretty. This was just showing a list of beautifully designed projects backed by Python to debunk that ignorant myth that there are no pretty Python projects out there. *Edit note*: Yes, I'm comparing Python to RoR (not Ruby), because let's be honest: when you talk about Ruby, you're talking about RoR or any of its derivatives. When you talk about Python, you're talking about a multitude of unrelated frameworks and/or raw Python. 
I've never heard this 'myth' you've been talking about and also, a belief that a server-side language makes for an ugly site is probably the most dumb opinion I've ever heard.
I'm not sure why everyone is having trouble understanding the blogger's purpose: &gt; So I recently read an article that got quite a bit of attention in the Python community earlier this week about Python applications being SO ugly. &gt; Although he may be right in some cases, but for him to ask the question ‘Dear Python, Why are you so ugly?’ is quite ridiculous. So to help everyone, here's the article: http://grokcode.com/746/dear-python-why-are-you-so-ugly/ I've heard this numerous times from RoR 'developers'. It's very ignorant, and we all know it has nothing to do with it. The blogger just gave examples as a response of how ignorant *Jess Johnson's* (writer of Dear Python...) statement may be.
For the lazy, here is the *controversial* article he is talking about: http://grokcode.com/746/dear-python-why-are-you-so-ugly/
I don't disagree with that statement at all. However, when I first started with figuring out Ruby vs. Python, I came across a few of these *arguments* and nearly went Ruby. I thought it was some sort of "magic" included in gems and whatnot that made the projects beautiful very quickly. They make it seem like if you develop RoR, you'll have a really slick and modern project in a few minutes. I'm not the only one who was thrown off by these false claims. It doesn't take long to search /r/learnprogramming or anywhere on the web to find these confusions by even seasoned programmers. RoR is not bad at all. Neither is Python. It's the communities that makes one better than the other, and ignorant claims of one or the other should be pointed out.
Github is a host for Git, which is open source. They give free hosting for open-source projects, and paid hosting for non-free projects. What's the problem again?
books are worthless because a new SDK comes out almost monthly. The [docs](https://developers.google.com/appengine/docs/python/) however are very good.
Also if you want more space, which something as large as Django *may* need.
As far as I know, it's free for open source projects of any size - all the limits are for private repostiories.
Paranoid about what? Github is not *the* host for the code, just a service that allows people to collaborate on it (and a pretty good one at that). The repo is distributed all over the place anyways.
I've seen that, but I've never heard of anyone hitting a disk space limit, and 300MB isn't so high that projects wouldn't already be running into it.
I thought this was going to be about the beauty of python based applications not their front ends. 
Wasn't the idea of the article that the language's own homepage (i.e. python.org) and similarly, other API websites were ugly? IIRC, the article did not try to claim that it is impossible to build beautiful websites using python.
Slipping between python and ruby...I think you suffer from sterotyping, or just belief in untrue things.
I know someone who may have (they have 200+ repositories), I'll ask them.
Thanks! I do use that whenever I have questions on programs (such as before), but I am proud because I was ready to ask how to fix this one I made (had the tab open and everything), but I was able to make it all on my own.
I've built a few e-commerce sites using Django, but the best route to take varies widely depending on the scope of a project. For a site of any significant size/complexity you're probably better off not using an existing platform. I can't comment on Django vs Pyramid except to say that I've occasionally found myself battling Django's assumptions.
GitHub is never free, because I cannot use it for any purpose, distribute copies of it, modify it, or redistribute modified copies. I don't care about the price of the tool, only the freedoms associated with it.
Even better!
Partly disagree with your point, but dammit if I don't love the tone and that final sentence.
Well, GitHub is just *better* than the alternatives. Pull requests, for instance, are awesome.
In what way are GitHub pull requests better than BitBucket pull requests?
Look, it's very simple. Github works, has great developers behind it, reasonable pricing and it's a lot easier to administrate than self hosting. bitbucket might be an alternative, but then you're just trading one proprietary platform for another.
I hacked together something similar for an email-based calendar manager. ie, something I could email "meet john at starbucks tuesday at 2" and have it automatically added to my calendar. Turend out to be super useful, but I didn't finish implementing it. Would love to share it with you if you're interested...
I think it depends on the object. Often what you want is not to see if something is True, but if something should be evaluated as true. Eg. if you have a sequence object seq (say a list), don't do if len(seq) &gt; 0: instead do if seq:
Exclusivity doesn't mean the end of innovation. If anything, it gathers developers into one place to concentrate on improving a single product. With that said, the pitfall of GitHub (imo) is that it isn't open source. Were it structured more like git, the community could contribute directly to the codebase and it would naturally improve with time--with or without competition. By playing their cards close to their chest, they are marginalizing great potential. Does anyone like the new 'sliding' frames? I think they're unnecessarily flashy; I'd find an expand/collapse system much more useful as I could stay on one page while navigating to others quickly if I needed to.
They both look like they were designed by programmers that were kinda good at design.
ITT: People complaining about github not being free. See, as much as I do understand the feeling behind it, nothing stops anyone from rehosting elsewhere if github starts sucking. It's **git**. Git is decentralized by nature, so you don't risk anything by having your code in a git repo on github. The only parts that are truly exclusive to github are its extra features, such as the issue tracker. I could go on, but people are forgetting the important bit: Django moved the hell away from SVN and it's about time. It's not like they moved from private git hosting to github. I can't take a project seriously when it uses cvs/svn. God damn, clicking on a great news and the feeling being ruined by better-than-thour-host attitude. Edit: That said, Gitorious is a great piece of software if you want to run/maintain it on your own, but it's a horrible host. I pull Qt's gitorious repositories daily and it's down half the time.
Look at the innovation that went on in web browsers once Microsoft could gather all the developers to work on improving IE6 ;-). Seriously, neither extreme is good for the ecosystem. Excessive fragmentation splits up developer effort and means no-one can make big advances, while monopolies mean there's not enough competition to spur projects to improve. Ideally, we need some happy medium with a few competing projects. Competition does act on open source projects as well. Even though we don't get a financial reward from our projects, we have an emotional investment in them, and want to see them succeed, so when we see another project doing a similar thing, we start thinking 'how can I make mine better so people will use it instead of that other one?'
&gt;We/the community can't directly contribute to GitHub because of the nature of the codebase (non-open). Is that a problem? It's a commercially hosted service run on private hardware, which deals with money at times. Why would they want random people hacking on their customized software, possibly introducing security flaws to mess up their accounting system, or create other disruptive or irritating issues? &gt;Granted, it's a substantial problem. I doubt it. You can make your own server and front-end if you want with a LAMP stack. Git itself is free, and is the main component of GitHub. If it's such a problem to let someone else host your code, then don't do it and don't complain when people are looking out for their best interests without harming anyone.
Also, IIRC github is free for open source projects.
Try Dive into Python, it comes as a PDF online or you can buy it. http://www.diveintopython.net/
Inline commenting.
This is basically covered in the "Watching both stdout and stderr" section which has a more portable solution than yours which is using a separate thread so only the thread blocks and communicating using a queue. This is also [the top answer corresponding to the question of the answer you posted a link to on Stack Overflow](http://stackoverflow.com/a/4896288/678387).
[Gitorious](https://gitorious.org) works, has developers, is *free*, and has an offsite instance.
Again, that's not what the gripe is. If you read the thread, the complaint is that Github is not "free as in speech".
For a second I thought, wait, shouldn't this be the other way around?
Not my project just found it randomly. 
That is a wonderful effort by Kenneth, who is amazing at API design by the way ;)
Yes but stdour.read() will block until EOF and stdout.read(n) will block until n characters are produced. It's quite possible to want to deal with processes where sometimes these conditions may never occur or may take prohibitively long.
The solution for killing sub processes at exit has a race condition: if the main process dies after the child is created but before it is added to the list, that child process will not be killed. Your exit handler would be better off constructing/retrieving the list of child processes at the time it runs.
And the fact that you're financially tied to a direct competitor. Gitorious?
Re LPTHW: I went thru 15 lessons and felt it was all like teaching me format statements. You have to do the extra credit. You'll find out it's not extra. edit added this.-&gt; The how to use python in your environment part was sterling. Worth going through the prep part and lesson one to make sure you've got this part. The editor he suggests works well. With a mac I had zero problems. Not so the Windows users who didnt follow just what he said. I didnt get stuck on setting it up to use python at all. That works. Then I went to the library and got Learning Python by Lutz. I'm getting lost in examples and exceptions and .. wait I havent written a line of code past [#! path to python] which I didnt need at all in LPTHW. I learned Fortran from a thin magazine-sized IBM manual. I was on the teaching team for a beginning pascal and problems class. Of the two LPTHW is better by far. I intend to push on and look for better as my budget sees fit. I thought I'd share my situation so far. PS Thanks to all who shared. If you know comparisons, more details might be handy. 
On a related note: that's why I hate free software. A lot of people from the free software corner would go with the inferior solutions just because it fits their overall agenda.
Why was this downvoted? If you dont like the book say something or give reasons and say what you like. DV? That's not helpful at all.
This video is to help you become an informed developer. It's only about Python 3. It's not teaching you to program python. (edit: and the Udacity course is specifically using Python 2.7) How he starts is: The directory organization of the python source tree... OP, it's not for us.
It's CPython dude. You are like the oneup kids in the extras sections of LPTHW. He's asking for the basics, for beginners. Iron and J basically compile into special versions of python in the non-standard executable eg J compiles into Java. (I did learn this from the Lutz book today.)
I think I know what you mean. Pascal has a one-page flowchart that showed the structure of the language. Keep me informed. I'm going to do Udacity too but I learned that I need some extra help in learning python from outside Udacity. edit: This link from ["How to think like a computer scientist"](http://openbookproject.net/thinkcs/python/english2e/ch02.html) supports the shorthand language introduction data I have been wanting, eg list of reserved words early on... I found it linked from 'learning to program' viz: "If you don't much like my style a web site with similar aims is the How to think like a Computer Scientist produced by Jeff Elkner who uses Python in his high School classes. It seems a little bit less comprehensive than mine, but maybe I'm just biased :-)" and from the Dive Into Python page links.
"Mahdi Yusuf" .... so maybe english is not his native language?
So what? Spelling and grammar mistakes are ugly. This makes the article ugly, which detracts from its core message.
But it's not automatically integrated with, say, an issue tracker. Yes, you can connect it yourself. But that's not what integrated means. Of course if I'm really keen to work on a project, I'll sign up for an account. But what if I've got a little bugfix or a spelling correction? If I have to go through getting an account and getting used to a different site, I'm that much more likely to think 'never mind, someone else will fix it soon'. Making it even a little bit harder for people to contribute is a bad thing.
I would not write an article in Arabic about beauty if I were unable to ensure my writing was free from spelling and grammar mistakes. Besides, a quick Google search shows that he "grew up here in Ottawa when he was younger, then started moving around all over the place". He writes well enough that he shouldn't have made the mistakes that he did. I doubt that he went through his article line by line correcting mistakes and just happened to miss the ones that he did, because they're glaringly obvious. 
That's really nice but the setup.py is lacking dependencies requirements (cython pygt4 pyqwt5 pyaudio...)
I really liked official [The Python Language Reference](http://docs.python.org/reference/index.html). There are proper and formal definitions of everything. Sometimes it is quite hard to understand. I am quite surprised that nobody mentioned it here.
You might also want to check out my project [`sarge`](http://sarge.readthedocs.org/en/latest/index.html) - it bakes in the functionality of asynchronously reading from child process output streams into queues, that you can then read from without blocking. You can capture `stdout` and `stderr` independently. 
Thanks for clarifying this. Using bytes as the method of communication between processes makes sense, now that I see it :)
Looks really good. I especially like the detail you put in the documentation :)
The URL isn't loading for me. Would love to see it as I'm interested in Python and Redis. 
Inferior? It fits all of your criteria. I agree it doesn't have some of the same features as GitHub, but that goes both ways. And yes, it's free, which makes it a lot better.
I'm sure I've seen something tying you to Gitorious financially, I will find it and expose it if it is true. If not, sorry.
&gt; And yes, it's free, which makes it a lot better. Both are free of charge. Free as in freedom is not a feature for a hosted platform.
It's not that we hate free software. But although many of us don't really care about it, you bring it up every time anyone mentions any proprietary software, even tangentially. In one thread, you commented because a screenshot revealed that someone was using Windows. It's like always steering conversations to your political or religious view - you'll annoy people. For my part, I'm happy for you to have a sensible discussion about it, and I'm sorry others downvoted your recent "let's chat" thread.
[Moving trucks are way more fun with a racing suspension.](http://www.youtube.com/watch?v=Vrhf7npIumU)
 Any chance I could get this to run in a windows environment? (I know I'm a huge noob for asking this) I have working implementations of pyopencl, pyopengl, pyside, nivdia's cg toolkit, and mako. Here's my traceback: No handlers could be found for logger "OpenGL.arrays.numpymodule" Traceback (most recent call last): File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\main.py", line 4, in &lt;module&gt; from main_window import MainWindow File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\main_window.py", line 6, in &lt;module&gt; from ui import Ui_MainWindow File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\ui.py", line 123, in &lt;module&gt; from fluid_widget import FluidWidget File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\fluid_widget.py", line 9, in &lt;module&gt; from fluid_rendering import FluidRenderer File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\fluid_rendering\__init__.py", line 2, in &lt;module&gt; from fluid_renderer import FluidRenderer File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\fluid_rendering\fluid_renderer.py", line 7, in &lt;module&gt; from cg import CGDefaultShader, cg_gl_platform, cg_gl File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\cg\__init__.py", line 4, in &lt;module&gt; from cg_shader import CGVertexShader, CGFragmentShader, CGVertexFragmentShader, CGDefaultShader File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\cg\cg_shader.py", line 10, in &lt;module&gt; from platform import cg_platform as cg, cg_gl_platform as cg_gl File "C:\Users\Student\Downloads\benma-pysph-8b280d4\benma-pysph-8b280d4\src\cg\platform.py", line 4, in &lt;module&gt; cg_platform = CDLL('libCg.so') File "C:\Python27\lib\ctypes\__init__.py", line 365, in __init__ self._handle = _dlopen(self._name, mode) WindowsError: [Error 126] The specified module could not be found
A related post has shown up today: http://alarmingdevelopment.org/?p=680 (http://www.reddit.com/r/programming/comments/szsie/an_ide_is_not_enough)
Have you installed numpy?
Technically what the OSI and the FSF recognise as FOSS is quite similar. But the people who use the terms have quite different aims and preferences. As for terminology: 'Open source' may not emphasise exactly what you mean, but at least you don't have to keep explaining what it doesn't mean. Even on here, when you said 'free software' in [this thread](http://www.reddit.com/r/Python/comments/sy9rr/django_officially_moves_to_github/) someone thought you meant zero-cost. It's an ambiguous term, and the meaning you want isn't the one most people read.
That title reads like buzzword overload.
Yup. Numpy, SciPy, the whole lot. I think it's the 'libCg.so' file that it's trying to find. Since I have a win32 version of nvidia's cg toolkit that probably doesn't have the .so extension.
M_PI is likely a constant for pi. it's either not being included by the compiler or you're missing the header... try searching files for M_PI or define it manually as, well, pi somewhere in your build configuration. ok yeah, looks like M_PI was dropped in C99 which means it's your compiler. Either define it yourself in the file, add it as a directive in your compiler... try making sure that your math library is included too? #ifndef M_PI #define M_PI 3.14159265358979323846 #endif (or add it as a DEFINE to the build string, or add it to compiler, etc.) http://ubuntuforums.org/showthread.php?t=583094
As you have noticed, I never tested it on Windows. I was afraid that the Cg bindings would be a problem, but I am glad to hear that it works when the corresponding DLLs are used. frikk correctly identified the second error. You can put the three lines of code at the top of the src/sph/sph.cl file to fix it. Could you please tell me which changes you made exactly to make it work on Windows (which name you put for the Cg DLL, etc.)? I would be grateful, then I could update the code. You can also fork the project and send a pull request if you prefer it that way.
Thanks for reading :)
Same reason as yours ? analogy time: doc orders X-ray, nurse gives rectal probe
&gt; I've been learning Python for a few weeks now Unless you're a quite experienced OOP programmer, I don't understand why you want to jump into the deep end after only a few weeks. 
 sorted_list = sorted(dict_list, key=itemgetter("name")) Is how that should be written.
And replace it with what? You need to have a synchronization method in place for numerous reasons. Garbage collection is at the top of the list, but there are hordes of other problems solved by the GIL. If it were that easy, don't you think the Python developers would have done this a LONG time ago?
If you want to go into web design you probably want to pick a framework and learn more by doing. Dream up a simple project for yourself and start coding. Django is very thoroughly documented and includes a rather extensive/lengthy tutorial. There are plenty of others and some will be better choices than others; I know nothing about them as I haven't spent any time investigating the options lately (sorry). Don't think of this framework as a choice you'll have to live with for the rest of your life—it's just somewhere to start and learn a bit by doing. Once you gain some familiarity with the language itself, testing the waters on other frameworks to find something that suits your tastes won't be a big deal.
There's no reason you couldn't do that. The module that does this just hasn't been written, yet. It'd have the same restrictions as the multiprocessing module, with possibly less overhead. 
You have a word in double in the description. &gt; Sider is a persistent object library based on Redis. This is heavily under development currently, but **but** you can check the future roadmap if you want.
For web frameworks, i'm gonna suggest [Flask](http://flask.pocoo.org/). It's very easy to get started on and it's my personal favorite web framework.
Yes, I've just seen this page so this is an "on the fly" opinion of &gt; http://tech.blog.aknin.name/2010/04/02/pythons-innards-introduction/ After mentioning Virtual Machine (a software machine inside something else software. I think "indirection".) he says this: &gt; That said, let’s start with a bird’s eye overview of what happens when you do this: $ python -c 'print("Hello, world!")'. Python’s binary is executed, the standard C library initialization which pretty much any process does happens and then the main function starts executing (see its source, ./Modules/python.c: main, which soon calls ./Modules/main.c: Py_Main). After some mundane initialization stuff (parse arguments, see if environment variables should affect behaviour, assess the situation of the standard streams and act accordingly, etc), ./Python/pythonrun.c: Py_Initialize is called. In many ways, this function is what ‘builds’ and assembles together the pieces needed to run the CPython machine and makes ‘a process’ into ‘a process with a Python interpreter in it’. Among other things, it creates two very important Python data-structures: the interpreter state and thread state. It also creates the built-in module sys and the module which hosts all builtins. I think BASIC tho "nowadays" the comparison is to Java and other "interpreted languages". This is contrasted to a "compiled language". There is a "level" of Python that saves the interpreted code in the form of a Python virtual machine language module, aka file, (there's another name for this) and you can run that module and skip the first step (interpretation). The page goes on to more detail, unlike the others I've seen that drop it there. ------------ I'm assuming _this_ is what you mean by low-level and not the ff: &gt; - How to use the Python interpreter - Basic arithmetic expressions - Representing and operating on numbers - Boolean expressions, using the range statement and lists edit: [THIS](http://openbookproject.net/thinkcs/python/english2e/ch01.html) supports me. &gt; Two kinds of programs process high-level languages into low-level languages: interpreters and compilers. An interpreter reads a high-level program and executes it, meaning that it does what the program says. It processes the program a little at a time, alternately reading lines and performing computations. 
I am not sure what you mean. When I hear "low level" I think &gt; toward assembler and &gt; toward machine langage. Higher level is fortran pascal python dbase. Higher level is both more powerful and less powerful depending on what you want. (As I "C" it the C-language is both high and low level, given its library structure but I don't know so I won't say.) How did it got misunderstood? _'preciate the explanation I would._
[scikit-image](http://scikits-image.org/) and [mahotas](http://luispedro.org/software/mahotas)
sadf, it might be - so upvote you! I would love to hear back from the OP. :)
Seconded. It's a good balance between being able to do things and not having too much abstraction between you and the library, as AeroNotix has said in this thread: a fully featured framework will probably do more harm than good for learning. If you understand web concepts very well then maybe staring with werkzeug and wsgi (what flask is built on top of) is a better idea, but you do get thrown a bit into the deep end if you aren't very comfortable with how the web works. I definitely suggest you find something that lets you follow the execution rather than having a bunch of hooks to fill in and a bunch of magic that puts it all together for you. I prefer that style anyway and I do this for a living, but that's personal preference, I dislike debugging the magic when it doesn't work. In any case it's certainly superior for learning.
another analogy: OP is asking for lime and vonncarbon gives him an orange
off: What is the book in C# you 're referring to?
You're probably ready to try something like Bottle, web.py or Flask.
You should probably mention what it does or link to a description. &gt; A general-purpose dataflow programming language based on Python, written in Python. 
There was some buzz about pyimaging earlier this year https://github.com/ojii/pymaging
Sure! I have updated the post.
OK, figured it out... I downloaded git and then your package there. 
According to their README, Pillow's primary reason for being is that PIL is not setuptools compatible. This is not a minor thing. Being able to `pip install X` is the gold standard for python software distribution and if you distribute any software that depends on PIL, your software stack becomes just as un-deployable. 
It is currently a work-in-progress, so I haven't had a chance to make it easily playable without manually installing all of the dependencies. It is meant to be a multiplayer game, so you'll have to run the server locally, and then connect to it using the gui_client.
And it's these mistakes that you'll cherish when you actually go on to write production code. I look at some of the crap I've wrote and I think "What the fuck!?" at the time I thought I was a genius but I know better now... 
Ah, right, misunderstood what you said. Carry on.
This is a fantastic low-level overview. Thanks for the link
here's what i did: * git clone https://bitbucket.org/djkool14/pyshipcommand.git * cd pyshipcommand * virtualenv . * source bin/activate * pip install -r requirements.txt on osx 10.7.3, the compiling /something/ fails
2nd'd for Flask. Easy to set up and play around, used in production too. (with Mako swapped in as template language though)
Looking cool. Needs more online examples though :) 
recommending a web framework is horrible advice for someone who just said they want to learn more python. I agree with AeroNotix. Read more books and read more code and write more code. use your new found super power to make your computer do things for you that it didn't do already. and most of all, follow your path, not some random redditor schmoe's suggestion. 
i really want to play but i dont' want to have to figure this out. sorry. i'd love to have you update this thread (or message me, whatever) when the install issues are figured out. It may have something to do with the version of gcc that I'm using to compile it. it's been a nightmare since apple went clang
I understand, but the game is nowhere near finished. I wasn't expecting so many people to want to dive into the code. I was really just looking to see how much of an interest there would be for a game like this in the Python community. I'm currently working on instructions for getting things up and running.
That's some good advice. Seconded for the book by Mark Letz
I don't think the ordering with OcempGUI. I've also noticed that OcempGUI would get installed first no matter where I placed it in the requirements file. Does anyone know why that is?
Done! Please check the README file on the repo for details on installation and usage.
Sorry, even I have had problems with installing pygame and numpy through pip (especially when using virtualenv). Installing them manually should work. I've been attempting to find a solution to this for a few days now.
I'd expect the interest to be pretty high. I've wanted to do something similar too. For people who like to program, what better than to make it a part of a good game?
Go [here](http://pragprog.com/book/gwpy/practical-programming) next.
Thanks. I'm starting to feel like there is no good way to play this game without installing everything to the global site-packages, which I don't want to do. Too bad. If this game is anything like Notch's new game, I'm super excited to play it. Maybe I'll spin up an Ubuntu box
I'm running an ATI HD5850 on Windows 7 64bit with AMD Catalyst 12.3 drivers. Building pyopenCL on Windows is pretty much an art. Lot's of trial and error. For anyone interested (or needing help), these are the exact steps I took: Although I have a 64bit OS, I could only get PyopenCL to build with 32bit versions of everything. Install Python 2.7.3 32bit Install Numpy 1.6.1 32bit Install ATI Stream SDK 2.2 32bit found [here](http://developer.amd.com/sdks/AMDAPPSDK/downloads/pages/AMDAPPSDKDownloadArchive.aspx). Then I follow these four steps from the pyopenCL [Wiki](http://wiki.tiker.net/PyOpenCL/Installation/Windows): * Download PyOpenCL doing: git clone http://git.tiker.net/trees/pyopencl.git (this step produces "pyopencl" directory at the current location) * cd pyopencl * git submodule init * git submodule update I'm building using Visual Studio 2008, so no need to edit anything yet. Continuing on: * open the Visual Studio 2008 32bit Command prompt with administrator rights * cd into your pyopencl directory * issue the command "python configure.py" Then go find the siteconfig.py file that was created in the pyopencl directory and edit it as follows: BOOST_INC_DIR = [] BOOST_LIB_DIR = [] BOOST_COMPILER = 'gcc43' BOOST_PYTHON_LIBNAME = ['boost_python'] USE_SHIPPED_BOOST = True CL_TRACE = False CL_ENABLE_GL = True CL_ENABLE_DEVICE_FISSION = True CL_INC_DIR = [r'C:\Program Files (x86)\ATI Stream\include',r'C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Include'] CL_LIB_DIR = [r'C:\Program Files (x86)\ATI Stream\lib\x86',r'C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Lib'] CL_LIBNAME = ['OpenCL'] CXXFLAGS = ['/EHsc'] LDFLAGS = ['/FORCE'] Then type 'python setup.py install' and pray. I wouldn't say I need the program for anything in particular. I'm just a mech-e grad student so I love anything FEA/CFD related. Also, I love working on GPGPU problems although I'm just starting to learn OpenCL. Running with points would be just fine for my purposes.
You have certainly hit on one of my weaknesses in writing. I don't do so well proofreading my own writing. I have taken more one look at it, hopefully it wont suck as much. I am a native english speaker, just horrible at proofreading things I write. I will definitely put more effort into it in the future. 
it's just simple best-of-breed webscale technology
I came across a little strong, upon rereading my comments - sorry about that! I obsess over and proofread nearly everything I write, to the point where just a few lines can take me ages to compose and I still make mistakes. If proofreading eats into your productivity, do it as seldom as practical/possible. There's more to life than being a good speller/grammarian.
Even though I mainly use python, this is when I bust out R for the data frame and ggplot
Just install numpy and pygame from a repo (you're using Linux I hope) and symlink them into your virtualenv.
It's awfully late here so I'll take a look to code tomorrow. Here's my name proposal: `battlepy`, maybe with upper B and PY or just the P. `spacey`, `reptilian` or `pycs` (read as pics: PYthon Combat in Space) also may sound good to you. G'night.
Out of curiosity, why did you choose to use python for this? It seems like most of the "real" code still needs be written in C (OpenCL) or the Cg (OpenGL shader language? I'm not familiar with this.). I'm asking because I'm currently studying GPGPU computing and I would love to know how you chose your languages and what benefits you see in them.
I'm doing some work with [ROS](http://ros.org/) which has Python bindings to [OpenCV](http://opencv.willowgarage.com/wiki/). I'm not sure how easy it is to use stand-alone or if it's even what you're looking for though.
Your solution will work, but as far as I know, isn't very portable. What I meant by sublassing is that with the current Popen, the command starts running the instant the Popen class is instantiated. Instead we can may be create subclass of Popen which allows us to do something like proc = Popen(...) procs.append(proc) proc.start() This way we can be sure tha no command is running without first being present in the procs list.
For the record, at least some of us here get the concept of a Script Based Game, and why it would be important to advertise the choice of scripting language. Take heart ;)
Just looking at this tutorial, almost every "Python equivalent" seems more readable than the single line Pythonect version. Not sure what problem this solves.
Cg is a shader language that gets compiled to hlsl (directx) or glsl (opengl) by nvidias cg libraries. I have basically done the same project in C++ before, and I can without a doubt say that working with Python is just so much easier. So much less code and clutter, so much less trouble developing with it. Besides not having to deal with all sorts of C things , there is one huge benefit added in that I can create the opencl/cg code with a Python template engine (I used Mako here). That way I can feed in external variables to the opencl/cg code easily, and also do some nifty tricks inside the opencl/cg code. To see how much of a difference Python makes in terms of readability, compare: C++: // open the .cl-file and load the content std::ifstream file("fluids.cl"); checkErr(file.is_open() ? CL_SUCCESS:-1, "fluids.cl"); std::string prog(std::istreambuf_iterator&lt;char&gt;(file), (std::istreambuf_iterator&lt;char&gt;())); const char *source = prog.c_str(); size_t sourceLen = prog.length(); // create a program from the source and build it _program = clCreateProgramWithSource(_context, 1, &amp;source, &amp;sourceLen, &amp;err); checkErr(err, "clCreateProgramWithSource()"); err = clBuildProgram(_program, 1, &amp;_device, NULL, NULL, NULL); checkErr(err, "clBuildProgram()"); // define kernels _densityKernel = clCreateKernel(_program, "computeDensity", &amp;err); checkErr(err, "clCreateKernel(): computeDensity()"); // ... snip .... // define arguments for kernels err = clSetKernelArg(_densityKernel, 0, sizeof(cl_mem), (void*)&amp;clPos); err |= clSetKernelArg(_densityKernel, 1, sizeof(cl_mem), (void*)&amp;clDen); err |= clSetKernelArg(_densityKernel, 2, sizeof(cl_mem), (void*)&amp;clPress); err |= clSetKernelArg(_densityKernel, 3, sizeof(cl_uint), (void*)&amp;_N); err |= clSetKernelArg(_densityKernel, 4, sizeof(float), (void*)&amp;_density0); err |= clSetKernelArg(_densityKernel, 5, sizeof(float), (void*)&amp;_h); checkErr(err, "clSetKernelArg(): Arguments for computeDensity()"); // ...snip ... // invoke kernel err = clEnqueueNDRangeKernel(_commandQueue, _densityKernel, 1, NULL, (size_t*)&amp;_N, &amp;_maxWorkGroupSize, 1, &amp;events[0], &amp;events[1]); checkErr(err, "clEnqueueNDRangeKernel(): computeDensity()"); And this for every .cl file and every kernel. [In Python](https://github.com/benma/pysph/blob/master/src/sph/sph.py): # open the .cl-file and load the content with open('%s/sph.cl' % cur_dir) as f: from mako.template import Template code = str(Template(f.read()).render( # constant parameters, replaced in code before # it is compiled use_grid=self.use_grid, reorder=self.use_grid and self.reorder, local_hash_size=self.wg_size+1, h=self.h, number_of_cells=self.number_of_cells, boxsize=self.boxsize, density0=self.density0, k=self.k, viscosity=self.viscosity, )) self.prg = cl.Program(self.ctx, code).build() # ... snip ... # invoke kenrel prg.stepDensity(queue, global_size, local_size, self.position_sorted_cl if self.use_grid and self.reorder else self.position_cl, self.density_cl, self.pressure_cl, self.params_cl, *grid_args).wait() There is one downside with Python though: there is much less (practically zero) existing pyopencl driver code (code that invokes the opencl code). Oftentimes, this is not a problem, as the kernel invocation code is usually very small and porting it to pyopencl is easy. In pysph however, I needed a radix sort implementation, and the existing invocation code written in C (found in nvidia's demos) is far from trivial. I was lucky to have found enjalot's port of radix and bitonic sort to pyopencl.
Killer. The `__del__` is the right way to do this. Why didn't I thinks of that :)
I thought that the dictionary hashing and the built-in `hash()` was essentially `id()`? EDIT: Disregard that, I suck cock.
Why not Shipy
So, a Python alternative for Puppet then? Or is it more like a Fabric replacement? Lots of very good buzz-words, but little understanding at the end of it. I wish the people who wrote these descriptions would give examples.
Maybe it's because I have full control over my environment and I run Gentoo, but I have never found a need for virtualenv.
Even when you control the environment already, virtualenv is handy for a few things: 1. Managing software with conflicting dependencies. There are ways to explicitly load a specific version of a distribution when multiple versions are installed, but this isn't always foolproof. 2. Determining your exact dependency list. Make a virtualenv (without site packages) and install the desired package with pip. Now you can use "pip freeze" to get a list of everything that was installed in the virtualenv to meet the distrib's requirements. 3. Testing. You might want to test your software with multiple versions of various libraries it depends on. Keeping these separate environments around lets you easily switch between them to run your test suite and check that they all still work. 
I would be interested in hearing this. Three problems: 1. A portion of the page is cut off in firefox 2. My browser reports this page markup is in quirksmode. wtf 3. There is no RSS feed
While I share none of these problems, I can see the different versions of packages maybe may cause some issues. As far as python is concerned, though, my system happily runs multiple versions of python.
This was helpful. Thanks. I work on an embedded system, which is something of a different animal maybe than what may others work on. My environment includes a busybox, an arm architecture, a specialized bsp package, etc. Virtualenv is 'nice' but really doesn't fit my project well. I absolutely must run my tests on the target machine. If I was doing straight web development, I think I may have a different perspective.
Neat library, but I'd rather use a full search engine like elasticsearch in this case.
Indeed. In fact it is g(f)(x)
The Mothership can have a script bound to it as well (see mship_cmd.py), and I assume that people will use it for more of the *higher logic* and strategy. I actually had tournaments planned early in development. The persistent server is mainly just a playground for developing new scripts. I had hoped that once a month I could hold a locked-script tournament that ran at a faster iteration. This could be ranked, and a more web-based viewer could be implemented to track the standings.
DLL-hell. Different projects/packages depend on different versions of modules. 
That second snippet makes no sense, just use the env's python binary directly.
I apologise, honestly I do. It just hit a nerve for reason, probably because I am attempting to learn python at the moment and someone who is obviously an expert (such as yourself) withholding information just makes it harder.
That wouldn't automatically install new/updated dependencies or set the pythonpath to allow more consistent imports.
I mean sourcing bin/activate, just exec venv/bin/python directly.
Thanks for the advice. I think i'll definitely pick up the book and go through it this summer. The book we used in class was called "Python: Programming In Context." It's actually pretty decent, but I haven't gone through the entire thing. As far as the class, he would give us problems to solve each week. Some were from this website TopCoder but he also created a bunch of them. He gave us a module to test them and see if we were right. We also had to do several major assignments, but we were usually provided some starting code. For instance we had to make a hangman game, but he helped us get started. For another assignment we had to modify hangman so the computer kept changing the word to make it harder for the user. It's funny you mention raw_input, because I definitely did use that in both of those assignments. 
What do most people do: place virtualenvs in a folder like ~/.virtualenv/ or in the directly of the project that they need a virtualenv for?
That makes complete sense to me. On Hangman alone I think I spent about 4 hours making sure my program wouldn't crash if the user made an error. I remember thinking how onerous it would be to do the same thing for a bigger and more complicated program. 
Right. But that's not very helpful in understanding how decorators work. Suppose you had this nested set of decorators: @evens @odds @primes def myfunc(x): ... Suppose they round the output to the nearest &lt;term&gt;. What gets outputted? Prime numbers? Odd numbers? Or Even numbers? Answer: *Even numbers* Suppose they round the *input* to the nearest &lt;term&gt;. What does myfunc see? Even numbers, odd numbers, or prime numbers? Answer: *Prime numbers* 
A Python IDE inside the client is planned. Does anyone know of a barebones open-source Python IDE so I don't have to create it from scratch?
From experience, I found the following explanation to have the best pedagogical value: "See this: @decorator def fun(arg): whatever That's just a shorthand for def fun(arg): whatever fun = decorator(fun) Now think about it. (Hint: remember that def x():... is just like x=... except one is used to bind functions and the other to bind values in general.)" Haven't found a person yet that wasn't happy (although it takes some people a while to think about it).
Actually, that right there is enough of an explanation for me. I never really got why people seem to find decorators so hard to understand.
I thought this was going to be a Kinect related project, poor name?
You'll find a brief example in this [screencast](http://blip.tv/saltstack/salt-installation-configuration-and-remote-execution-5713423).
I came from languages without first class functions, or languages where I could only get first class functions with pointers. New idea, that's why. Who thinks of functions that act on functions (or their args), really?
what if your pyShip bot encounters a game of robocode...
I'm not sure, it depends on too many things and varies from person to person. The path you've chosen does seem like a good one to me, I'm not going to say to stop with Flask and do more python practice questions or anything. Make sure you are getting that grounding in python (good style, knowledge of the available libraries) but I, personally, like to be working towards something real to motivate my learning. You will kick yourself later if you miss learning about some of the very useful stuff in python (generator expressions! the itertools library! ipython!) because you had framework blinders on (although that applies more to the django world I find). I will say that it will probably be helpful to go through the werkzeug tutorial (http://werkzeug.pocoo.org/docs/tutorial/) to get a feel for what those flask wrappers are actually doing and everything you can do (very easily in this stack) if you need to. It's a good tutorial and won't take long and it seems like you'd enjoy it as it's basically the first step to really taking flask apart. 
I've never messed with Forums before, but I'll look into one. For now, how about just a [/r/pyshipcommand](http://www.reddit.com/r/pyShipCommand/) subreddit?
**For those of you who are interested, I created a [/r/pyshipcommand](http://www.reddit.com/r/pyShipCommand/) subreddit that I will be posting updates to from here on out.**
your example helped me understand decorators (namely nested decorators) a lot better with the worm analogy, thanks =)
This is great! Firstly, the output from the uncomment is: profile: 6150 arbvp1 profile: 7000 arbfp1 Running with --cg-glsl brings up the fully rendered environment! Although, It doesn't seem to update with the time-step. I can see the fps changing, the load on the card increasing, and the initial state of the fluid. But no motion. Also, the output from the uncomment is modified to: profile: 7007 glslv profile: 7008 glslf profile: 7007 glslv profile: 7008 glslf profile: 7007 glslv profile: 7008 glslf profile: 7007 glslv profile: 7008 glslf profile: 7007 glslv profile: 7008 glslf profile: 7007 glslv profile: 7008 glslf Even when disabling advanced rendering, the points don't seem to be updating their positions. [Here](http://i.imgur.com/mDc6L.jpg)'s a screenshot. I really appreciate the updates.
Noob question: Why is everyone so interested in using GPUs all of a sudden? This is like the third GPU-related story I've seen on this subreddit in a week.
Then call it "Exploreships in Python" or whatever. A game's name is a huge part of it's appeal, the language not so much. I'm interested to see where this goes (and may script a ship) but any game with the name of the language in it is going to have a hard time being taken seriously by non-fans of the language.
 from itertools import chain, imap, combinations, groupby lines = [['A', 'B', 'C'], ['A', 'C', 'E'], ['E', 'F', 'D'], ['D', 'A', 'J'], ['E', 'D', 'J']] tuples = map(sorted, chain(*imap(lambda l: combinations(l, 2), lines))) result = [(k[0], k[1], len(list(g))) for k, g in groupby(sorted(tuples))]
Here we go, using itertools.combinations instead. &gt;&gt;&gt; [(a, b, len([n for n in ['abc', 'ace', 'efd', 'daj', 'edj'] if a in n and b in n])) for a, b in __import__('itertools').combinations('abcdej', 2)] [('a', 'b', 1), ('a', 'c', 2), ('a', 'd', 1), ('a', 'e', 1), ('a', 'j', 1), ('b', 'c', 1), ('b', 'd', 0), ('b', 'e', 0), ('b', 'j', 0), ('c', 'd', 0), ('c', 'e', 1), ('c', 'j', 0), ('d', 'e', 2), ('d', 'j', 2), ('e', 'j', 1)]
Or: &gt;&gt;&gt; _ = [__import__('sys').stdout.write('%s %s %s\n' % val) for val in [(a, b, len([n for n in ['abc', 'ace', 'efd', 'daj', 'edj'] if a in n and b in n])) for a, b in __import__('itertools').combinations('abcdej', 2)]] a b 1 a c 2 a d 1 a e 1 a j 1 b c 1 b d 0 b e 0 b j 0 c d 0 c e 1 c j 0 d e 2 d j 2 e j 1 
I just pushed a new version. I suspected that your default profile would be arb. Arb does not support loops that cannot be unrolled at compile time. So I fixed up the shader to support arb. After pulling the new version, you could try it with no flag, the --cg-glsl flag and the --cg-arb flag (this one should be the same as using no flag in your case). As for the positions: this is a tricky one. Maybe it has to do with the double/float issue. Edit: maybe you can find out somehow what kind of warnings the opencl-compiler generates by setting the environment variable PYOPENCL_COMPILER_OUTPUT=1.
It doesn't replace Fabric (or other similar tools). There will always be a need for agentless remote execution, e.g. for bootstrapping purposes, if your agent fails for some reason, etc.
I don't have that many but I probably will eventually have enough to possibly hit the cap.
But I freely admit that the RSS feed doesn't work for a lot of people--fixing it is on my to-do list. And, yeah, my HTML is janky.
Beginner programmer here, in one line of haskell, this: concat $ map (\(x:y:z:[]) -&gt; [x:y:[],x:z:[],y:z:[]]) ["abc","ace","efd","daj","edj"] gives: ["ab","ac","bc","ac","ae","ce","ef","ed","fd","da","dj","aj","ed","ej","dj"] I haven't figured out how to do the frequency list though.
I highly recommend you update the iPython notebook to the development version. The one you're using I had plenty more problems. That said, no autosave, yet. Though I read it's on their todo. 
`or` doesn't work that way, I know that's how English reads, but it's not how computers interprets it. `y == 'X' or 'x'` gets parsed to `(y == 'X') or ('x')` 'x' is truthy (non empty strings are always truthy), so `(y == 'X' or 'x')` is always true no matter what y is. You want something like this: good: `y == 'X' or y == 'x'` better: `y in ('X', 'x')` best: `y.lower() == 'x'`
First, use raw_input instead of input. raw_input always returns a string while input returns a python object, so it's very easily exploitable. (edit: in python 3 use input ) Second, your comparison of 'a == b or c' is improper. This is interpreted as (a == b) or c, and since c isn't False or 0, it's True. Finally, since your first if statement has this faulty comparison, the elif is never triggered because all of the tests are True in the first one.
The development version also supports ctrl-s or cmd-s shortcuts for save. But alas, no autosave yet. 
don't disagree with buzzwords, but I still believe it is true :-) Amund (developer of atbr)
Thanks so much! So pretty much I was using "or" wrong. 
Thanks for all the insight! My program now works clean as a whistle! 
with y == ("Choose Again") or ("choose again") y is only being compared to "Choose Again". If y != "Choose Again" then the conditional returns "choose again" It will work for more cases and work properly if the conditional is changed to y.lower() == "choose again" or if there were other conditions y in ["condition 1", "condition 2", "condition 3", "etc...."]
&gt;Then call it "Exploreships in Python" or whatever. [...] any game with the name of the language in it is going to have a hard time being taken seriously by non-fans of the language I'm not sure what you're trying to say here. You say it shouldn't have the name of the language in it and then suggest a name with the name of the language in it. It may be unattractive to those that don't like the language, but then that's entirely appropriate as people who don't like the language wouldn't like the game, since it involves programming in the language.
&gt;This just in: Saving prevents loss of work. News at 11.
How many to not be added in this project ?
Love the good/better/best comparisons. Seeing multiple ways to do the same thing can really help to crystallize concepts for new users. And for moderate users like me, it's a quick check to see if I've fallen into a bad habit :)
We have Captain Obvious reporting from the field. Captain, what started this riot? Well, it seems there was outrage over lost homework after an incident with the browser. At least ten people are injured, and I'm being told that one man died on the way to the hospital. Emergency response team tried to save him with Emacs shortcuts but nothing happened. Back to you, Mr. Outtafucks.
To avoid conflicts with the browser, all the shortcuts are Ctrl+m &lt;key&gt; (i.e. hold down Ctrl, tap m, tap the key you want). As kisielk says, in the development version, we've made an exception for Ctrl+s, because the browser save isn't very helpful. Autosave is planned, you can follow [the issue for it](https://github.com/ipython/ipython/issues/1378). New contributors are always welcome, and we're happy to give pointers on [the mailing list](http://mail.scipy.org/mailman/listinfo/ipython-dev) as to where to start.
I'm to old to be turning in homework. Must be the eye sight going bad that the obvious button was missed. Thanks for the additional dramatization.
Ill bookmark your comment :) Thanks for the advice 
As nice as Light Table theoretically is--I feel such money would be better spent getting Python 3 support in PyPy.
Actually it's quite common to use `break` to exit an infinite loop as then there's no need to carry around an extra "exit variable" (`quit` in your example). Removing this variable reduces the cognitive load and hence makes the code more readable.
just check the statusbar and url
My one-liner (did not look at any other solutions): https://gist.github.com/2576645 edit: it also parses the data in the text format it was given
Angry bird starts tomorrow!
thank you, this is great have you been to san diego? seems like it would be right up your alley. plus there are lots of software jobs in the area, pm if you'd like to know more
Don't know much about Haskell, but here's a Scheme-ish solution I hacked up quickly: (let* ((l '((a b c) (a c e) (e f d) (d a j) (e d j))) (m (map-apply (fn (x y z) (list (list x y) (list x z) (list y z))) l)) (f (foldr append (car m) (cdr m)))) (display (group-by f equal?)) (newline)) Which gives me: tangra@tma(~/z/scm) $ vesta list_challenge.ss [ [ (b c) 1 ] [ (a b) 1 ] [ (e j) 1 ] [ (a j) 1 ] [ (d j) 2 ] [ (d a) 1 ] [ (f d) 1 ] [ (e d) 2 ] [ (e f) 1 ] [ (c e) 1 ] [ (a e) 1 ] [ (a c) 2 ] ] 
The tricky thing about decorators is when it takes arguments. In this case, the decorator simply returns another decorator.
Yes, GPUs are good at doing small tasks, highly parallelized. So it helps with certain parallelizable tasks. Functional languages are extremely unsuited to work on GPUs, to the point that I'd claim it's near-impossible to use a functional language (Considering the functional languages in common use today) effectively on the GPU -- but of course it depends on what your language looks like exactly. It's probably not impossible to create one that looks functional-ish and works well on the GPU, but if it was to be effective, it'd have to have all the restrictions OpenCL and CUDA have today, making it rather inelegant. But I don't think it's that interesting a proposition anyway, because while it's generally a "common wisdom" that functional languages can help with parallelization/make it easier to some degree (whether that's true or not), your typical program that runs on your GPU is at most a hundred lines, more commonly ten lines long. Even if you perform many different kind of computations on the GPU, the amount of code that goes into your kernels (computation units run on the GPU) will hardly make up a significant bit of your codebase, so paradigms like functional or object-oriented programming will be irrelevant. To elaborate on the reason why functional languages are not a good match for GPUs -- the paradigm mismatch is quite drastic. On the CPU, this is not so bad, because you can add abstraction layers inbetween that even those problems out, like a garbage-collector, a virtual machine, helper libraries and "hidden" smart operators that do things in certain ways for you -- on the GPU, you don't have "room" to do this, due to restrictions like a fixed number of if-tests you can do in one thread, how much memory you have available, how many operations you are allowed to execute in one loop, how your memory access needs to be aligned and in what order it is allowed to happen and such. This is good in the way that it allows the GPU to be a much simpler device, hence being more effective for the cost and energy you put into it, but renders it more-or less impossible to ever run a complex mechanism, like say, the java virtual machine (or the python interpreter -- note that indeed this is not what the library linked by the OP attempts). OpenCL, being a C-like language, is already incredibly "abstract" and "high-level" for a GPU, and doing things like recursion are simply not possible, because GPUs don't provide the necessary functionality to do it (and indeed, you can't in OpenCL). You could, of course, try to add all these things to a GPU, but then it would become more and more like a bunch of CPUs, and each core would become so complex and expensive that you'd have just ended up building an incredibly expensive, energy-hungry array of CPUs. If you're interested to see some middle-ground between the two (CPU and GPGPU), have a look at the Cell architecture used in the PlayStation 3 and IBMs blade servers (I think). It has one PPE, which works much like a traditional CPU and runs the operating system, and 7 SPE cores which are more like GPGPU cores, in that they only can do very simple things, and basically expect to be spoon-fed work (in particular, single-precision floating-point operations) into them, which they can then burn through with very high speeds. They can't do complicated things like a normal CPU like branch-prediction etc (which speeds up any old code, but takes incredible amounts of transistors to implement), so they won't just run any average code very fast, but if you optimize your problem very well to the SPEs, you can get them to work on it extremely fast, and since they're so much simpler to build, you can have more of them for the same bucks.
ever get it figured out?
I don't think it's using decorators that is hard to comprehend. It's writing them. And obligatory SO link: http://stackoverflow.com/questions/739654/understanding-python-decorators
But if you understand closures, it really isn't all that tricky. It is just one level deeper. The only tricky thing is that parameterized decorators have parens and normal decorators don't. I think that is a wart...
While we're at it, would you be able to ID3 tag your mp3 files? It's not the biggest problem in the world though, just a little nag. I really enjoy the podcast, very good work on that, thank you for keeping us up to date!
Source?
Okay, I will next time, sorry! 
Thanks for the counter argument 
It's not quite clicking for me. I doubt it could work properly in the context of complex applications relying on a lot of different things.
[Hacker news](http://news.ycombinator.com/item?id=3746692), apparently.
Exactly. Almost everyone who cared to was able to figure it out once the got to know the @-syntax.
You know what, I found a oauth module specifically for requests here: https://github.com/maraujop/requests-oauth and I've not been able to make any significant ground, but I've been in touch briefly with the author, and he noted that he is going to make it more friendly to new users.
That's a shame :( I'd love to hear how you make out though!
Apparently, according to http://docs.python-requests.org/en/latest/community/faq/ , requests supports Python 3.1 and 3.2.
Shoot. Alright, I'll take a look into better highlighting. I'm currently using WPSyntax, let me know if you know a better one, while I'm looking.
There's very little functional difference, as they both create lists. I don't believe there's anything you can do with one that you can't do with the other. The syntax is different between the two. * `list()` &lt;=&gt; `[]` * `list(iterable)` &lt;=&gt; `[item for item in iterable]` &lt;=&gt; `iterable[:]` * `isinstance(l, list)` &lt;=&gt; `isinstance(l, type([]))` (I'm using "&lt;=&gt;" to mean "is functionally equivalent to"...) and so on. The differences are, I believe, mainly sugar. Do you have a specific question, or are you just curious?
space pyrates? pyrateers? Space PYlots? pycketboats? py ardua ad astra? lesbian pythonistas from mars?
The list() function is a constructor, whereas the [] is how you declare a list. 
You should write a README file or show some examples of the usage. Props on writing what looks to be a ton of tests for this.
Sure there is, you use braces to define a `set` literal. &gt;&gt;&gt; set([1,2,3]) == {1,2,3} True
Sorry, I meant to say there's no literal for an empty set.
Aw no, I played Core Wars and some other Crobots-type games, but I know what you mean. "Crobots" doesn't necessarily make you think of C (even if you know what C is), while "pyShipCommand" sounds like a python class. It's perfectly acceptable for him to name his game around whatever he wants. I just think naming games after programming languages is something I did when I was programming Qbasic games. :P
I prefer `{0}^{0}`
One is a type, one is a List
Okay, one line of haskell, including the input: `map (\xs@(x:_) -&gt; (x, length xs)) $ List.group $ List.sort $ concat $ map (\(x:y:z:[]) -&gt; [x:y:[],x:z:[],y:z:[]]) ["abc","ace","efd","daj","edj"]` gives: `[("ab",1),("ac",2),("ae",1),("aj",1),("bc",1),("ce",1),("da",1),("dj",2),("ed",2),("ef",1),("ej",1),("fd",1)]` Sorry, didn't realize this was a python group--5 lines Ruby, how about 1 line Haskell, including the input. 
Udacity CS101 covers web crawling, including depth and breadth. Do the course, and then build your own crawler, using [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/) for the parsing.
 d={} l = ["food","food","love","food","hey","hey"] for entry in l: d[entry] = l.count(entry) Then d["food"] == 3 etc.
[collections.Counter] (http://docs.python.org/dev/library/collections.html#collections.Counter) is the easiest way. It is a simple wrapper around a dictionary in order to count things. It can take an iterable in the constructor. from collections import Counter c = Counter(["food","food","love","food","hey","hey"]) foodCount = c["food"] # returns 3
 # source list l = ["food", "food", "love", "food", "hey", "hey"] # initialize the target dictionary d = {} # iterate through the list for item in l: # is the item already in the dictionary? if item in d: # yup! get the current count curcount = d[item] else: # no, the item isn't in the dictionary. Start counting at 0. curcount = 0 # now that we have curcount, we can increment it by one... curcount += 1 # ... and store the incremented value back into the dictionary d[item] = curcount 
no nien nyet
When I saw the title my first thought was "ooh, I figured out a way to do that; I wonder how this person is doing it." I wasn't expecting to see my own solution cited as his starting point! A nice surprise for today. I'm glad my hack was useful for at least one person, and that it was understandable enough to extend.
This forum really isn't the place for homework help, especially when your question is simply a dump of the text of the assignment. Your instructor or a tutor is a better resource, or stackoverflow once you have a specific, answerable question.
It's pretty simple actually. Just remember that `@d def f...` means `def f...; f=d(f)`. The rest is just higher order functions. 
No, not it. It had a list of filetypes for a folder. For example archives were considered zip, 7z, rar, and they would go into a /zip folder. I'll use it for now though.
Haha, I'm not a python guy, but I suppose after a few hours I can learn how to do everything and such. Oh, and you just wrote that? Well thank you.
Here's a [script I wrote](https://github.com/jameseric/mimesort) that I use on a cron job to sort my downloads. It doesn't group them as loosely as you'd like, but I've considered adding that feature.
Well, that means people, who visit hackernews, like python most. Nothing more. I bet on a different site you'd see different results.
Yeah it sucks, I hope that the google drive client for linux will work on the command line as well. Or at least release a client that is command line only, like dropbox has done. For now, I guess it will be some hoops I will be jumping through :)
Also, list without arguments creates an empty list. This is useful when you want a function that returns an empty list. A prominent example is collections.defaultdict, which takes a callable as the argument to its constructor. When the defaultdict is accessed with a key that isn't in the defaultdict, it calls the callable and uses the result as the value. For example, the following builds a defaultdict which maps a given line value to a list of line numbers that it appears on: d = defaultdict(list) for i, line in enumerate(file, 1): d[line.rstrip("\r\n")].append(i) The same works for ints, where int() gives 0: d = defaultdict(int) for i, line in enumerate(file, 1): d[line.rstrip("\r\n")] += 1 The counter example is just for illustration. That particular task usually works better with the Counter class. You can even have nested defaultdicts: def make(): return collections.defaultdict(make) d = make() d['foo']['bar']['spam'] = 1 I haven't a clue where that would be useful, but it can be done. 
&gt; If you are about to ask a question, please consider /r/learnpython Other than that, `import antigravity` usually fixes every problem.
I seriously don't find what's so hard. &gt; A decorator is a function which takes a function as an argument and returns another callable.
it is server, not clinet $ dasinbox.py 0.0.0.0 4467 [2012-04-28 07:31] INFO: inbox: Starting SMTP server at 0.0.0.0:4467
His target audience for pySHip are pythonistas because only they can play it. So putting "py" in the name is genius. C-robots says C, because it's c-robots, and a programming geek of that time would have sussed it pretty fast. We all did back in the day.
That clears it up. There is no "remote retrieval" because you're doing it directly from the inbox.py module, but it /is/ a fullblown SMTP implementation not just a relay. Ok then, makes more sense!
I've had my eye on this for a while. I just can't find it in me to buy a digital copy of a book. Despite the content seeming so interesting. I know that Matt probably won't be able to find a dead-tree publisher for this but one can dream. Matt has probably written about the two most interesting things in Python for me, syntactically sweet decorators and the efficient loveliness of iterators. Both these books sound extremely interesting.
I just checked again on the newest file with different tagging tools (mp3info, Mp3 Diag, Audio Tag Tool, Audacity) and no ID3 tag V1 or V2 can be found. Here is the output from mp3info: $ mp3info Radio\ Free\ Python\ -\ Episode\ 7\ -\ Python\ And\ CPython.mp3 Radio Free Python - Episode 7 - Python And CPython.mp3 does not have an ID3 1.x tag. Could it be that you use some other sort of tag? Not sure what audacious uses. 
Second this. Looking to learn Python and this would definitely get me into it.
Post to /r/learnpython.
So if I setup a linode and ran this script, then pointed "example.com" to my server, I could parse incoming emails sent to "me@example.com?" Is the 4467 port (from the readme) special in terms of handling emails?
&gt; This is simplest SMTP server you'll ever see. It's asynchronous. One instance should handle over one thousand emails per second, thanks to Gevent. So how does that compare to other servers?
Check the link again, I added some docs, as well as a game that just randomly plays based on chance.
&gt; So if I setup a linode and ran this script, then pointed "example.com" to my server, I could parse incoming emails sent to "me@example.com?" Yep. "me@example.com", the sender's address, and the message body would be passed to your handler function. &gt; Is the 4467 port (from the readme) special in terms of handling emails? Nope. :)
This isn't really a replacement for postfix, I mean it could be used that way, but that's not what its for. You'll notice that on receiving mail, the python script gets called. This is for any application where that could be useful. So this is for "email applications" or something. Like mailing lists that unsubcsribe when you send an email to unsubscribe@... or play by email chess programs that automatically updated board state. Or any number of other "application" type stuff as opposed to a generic email server that just stores the emails for retrieval later.
Good point
is the function that's passed in a 'black box'? what's the definition of inverse? or perhaps a better question would be will the parameter always have an inverse, and can it be determined programmatically?
i dont know what black box is is the sqr func that i want to inverse, or derivate.
Do you have a specific function you want to create an inverse for? Because that is a much simpler problem to solve.
What do you mean by "derivate"? Could you provide an example?
Lamson is awesome, but it's overkill for really simple use cases. I don't need an extremely robust SMTP system. I just want to handle a few incoming emails.
&gt; Python supports all of Lisp's essential features except macros, That is Lisp's #1 essential feature.
I'll quote the obligatory anecdote from http://smuglispweeny.blogspot.ca/2008/02/ooh-ooh-my-turn-why-lisp.html: At ILC 2002 former Lisp giant now Python advocate Peter Norvig was for some reason allowed to give the keynote address like Martin Luther leading Easter Sunday mass at the Vatican and pitching Protestantism because in his talk Peter bravely repeated his claim that Python is a Lisp. When he finished Peter took questions and to my surprise called first on the rumpled old guy who had wandered in just before the talk began and eased himself into a chair just across the aisle from me and a few rows up. This guy had wild white hair and a scraggly white beard and looked hopelessly lost as if he had gotten separated from the tour group and wandered in mostly to rest his feet and just a little to see what we were all up to. My first thought was that he would be terribly disappointed by our bizarre topic and my second thought was that he would be about the right age, Stanford is just down the road, I think he is still at Stanford -- could it be? "Yes, John?" Peter said. I won't pretend to remember Lisp inventor John McCarthy's exact words which is odd because there were only about ten but he simply asked if Python could gracefully manipulate Python code as data. "No, John, it can't," said Peter and nothing more, graciously assenting to the professor's critique, and McCarthy said no more though Peter waited a moment to see if he would and in the silence a thousand words were said.
I wouldn't count this as clever, but here is a good use of one: L = [(3, 7), (1, 6), (4, 8)] L.sort(key=lambda a: a[1]) print L [(1, 6), (3, 7), (4, 8)] The list of tuples is now sorted by the 2nd element.
The page is pretty old, probably written sometime between 1995 (1st addition of his book) and 2002 (2nd edition which included python). It's due for revision.
your list and dict stuff will never be "automatically parallelized" to that fine a degree.
Fixed so it actually works: ''' 1) Gets top 100 songs from iTunes chart 2) Plays a random song from this list in YouTube license: public domain Dependancies: 1) BeautifulSoup http://www.crummy.com/software/BeautifulSoup/ ''' from urllib2 import urlopen from webbrowser import open_new_tab from random import choice from BeautifulSoup import BeautifulSoup def get_song_list(): '''Return the top 100 songs from Apple's iTunes charts.''' URL = 'http://www.apple.com/itunes/charts/songs/' soup = BeautifulSoup(urlopen(URL).read()) titles = (sp.a.string.encode('ascii', 'ignore') for sp in soup('h3')[:99] if len(sp('a')) == 1) artists = (sp.a.string.encode('ascii', 'ignore') for sp in soup('h4')[:99] if len(sp('a')) == 1) return ['{0} {1}'.format(a, t) for a, t in zip(artists, titles)] def play_song(search_term): '''Play song in YouTube.''' URL = ("https://www.google.com/search?btnI=I'm+Feeling+Lucky&amp;ie=UTF-8" "&amp;oe=UTF-8&amp;q=site:youtube.com%20inurl:http://www.youtube.com/" "watch?v=%20{0}".format(search_term)) open_new_tab(URL) def main(): songs = get_song_list() play_song(choice(songs)) main() 
Thanks! Final question for all the marbles -- how can the example script listen for emails on all ports? As in, I'm surprised that port /isn't/ special. Maybe that's not the right way to think about it? Maybe the underlying SMTP lib just catches all SMTP traffic routed to the server..?
If you want to go down that rabbit hole I suggest you take a look at: http://greenteapress.com/semaphores/
Great little script! Thanks. **Update:** Can someone explain how that google URL works? It even redirects to youtube.
I sent you my e-mail in a PM.
Ah. Sorry, I misunderstood you - or maybe you misunderstood me, I'm not sure. :) It's only listening on one port, 4467. But that's just an arbitrarily chosen port and as good as any other. He could just have easily chosen the standard SMTP port 25.
Another common ternary pattern (which looks closer to the Java version) is: protocol = is_secure and 'https' or 'http'
Google's "I'm feeling lucky" feature takes you directly to the first returned result.
I'm a programming noob, could someone please explain what's happening here (and especially how, I get what comes out at the end): titles = (sp.a.string.encode('ascii', 'ignore') for sp in soup('h3')[:99] if len(sp('a')) == 1) artists = (sp.a.string.encode('ascii', 'ignore') for sp in soup('h4')[:99] if len(sp('a')) == 1) return ['{} {}'.format(a, t) for a, t in zip(artists, titles)] I'm mostly not sure about the *if*s and about the square brackets in the *return*. I guess the curly brackets are formatting placeholders kinda like in C strings?
Python doesn't have concurrence Don't listen to him Because of the GIL He's a fucking twit It is a stupid fucking language Of *course* python has concurrency that can't even handle multiple cpu cores Just make sure not to use the print statement what is this? 1992? In multiple threads for debugging!
[McCarthy](http://www.catonmat.net/blog/wp-content/uploads/2008/12/john-mccarthy-programming-wrong.jpg)
these are generator expressions/[list comprehensions](http://docs.python.org/tutorial/datastructures.html#list-comprehensions), they provide a simple way to filter/map data in a list or other iterable. The difference between the () and [] forms is that () creates a generator, while [] creats a list. So, the first line returns a generator which iterates through ascii strings enclosed in the first 99 'h3' titles in the page which contain a single link (which is what len(sp('a')) == 1 checks) The third line then just creates a list of title artist strings using [format specifications](http://docs.python.org/library/string.html#formatspec)
I was just looking for something like this, thanks for sharing!
s/weary/wary/
Cool. Thanks.
Why another unit testing framework? What does this do better than py.test and nose?
Looks quite nice - I like the way the set-up/tear-down methods can now have descriptive function names. Do test methods still need to be prefixed with "test_"?
Nitpick: 'ternary operator' just means any operator with three operands (as opposed to unary or binary operators, which have one or two operands, respectively). You're talking about the 'ternary if' operator.
Perfectly legitimate nitpicking.
hrm, multiprocessing, class-level setup and teardown fixture methods, and a decorator-based approach for fixture methods. Lovely. Looks like my new test framework.
I just did it using `easy_install` (`setuptools`): $ sudo easy_install beautifulsoup Password: Searching for beautifulsoup Reading http://pypi.python.org/simple/beautifulsoup/ Reading http://www.crummy.com/software/BeautifulSoup/ Reading http://www.crummy.com/software/BeautifulSoup/download/ Reading http://www.crummy.com/software/BeautifulSoup/bs3/ Reading http://www.crummy.com/software/BeautifulSoup/bs3/download/ Best match: BeautifulSoup 3.2.1 Downloading http://www.crummy.com/software/BeautifulSoup/download/3.x/BeautifulSoup-3.2.1.tar.gz Processing BeautifulSoup-3.2.1.tar.gz Running BeautifulSoup-3.2.1/setup.py -q bdist_egg --dist-dir /tmp/easy_install-tsJexK/BeautifulSoup-3.2.1/egg-dist-tmp-zvah6_ zip_safe flag not set; analyzing archive contents... /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/setuptools/command/bdist_egg.py:422: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal symbols = dict.fromkeys(iter_symbols(code)) Adding BeautifulSoup 3.2.1 to easy-install.pth file Installed /Library/Python/2.7/site-packages/BeautifulSoup-3.2.1- py2.7.egg Processing dependencies for beautifulsoup Finished processing dependencies for beautifulsoup
Can someone please educate me on the history of why the order of Python's ternary if operator's operands differs from seemingly every other programming language?
Thanks for sharing this, I am trying to do this and am running into a bit of an issue. So we have an existing buildbot and rpmbuilder in place and no real plans to abandon that but I'd like to incorporate virtualenv into our build. In doing so, I create a virtualenv in my build root (which is in my home dir) and package that up. I then run into 2 problems that I can't seem to resolve... First I get 'error: Failed dependencies' /home/blah...blah/env/bin/python2.6 is needed by rpmpackage. I figure for now, while testing I can just --nodeps it which then gives me the error: error: unpacking of archive failed on file /var/www/my_env/bin/python;4fa4012d: cpio: MD5 sum mismatch anyone have any ideas how I can fix this?
I gotta say, Python is awesome for a lot of things, but multiprocessing has been very difficult to get good at in this. All I can recommend is to do it in C or Java if you can. If you must do it in Python, then use nginx to scale a synchronous process across your units of work. I think what you should really focus on is how to scale for your application in the least complex and most maintainable way possible. Its easy to write code that utilizes concurrency poorly. I would recommend learning how to combine ZeroMQ with zlib and pickle. Additionally, I would suggest watching out for memory leaks in long running python processes. 
&gt; how to download modules....I currently have BeautifulSoup4 sitting you already downloaded. ITYM how to install the module
nose is a full unit test framework. It does test discovery but also runs tests, etc.
https://github.com/fusionbox/dinero/tree/master/dinero/gateways
Thanks for pointing that out. I should have a redirect set up, but I'll check it out. The content is sometimes out of date because it only crawls the Kickstarter site twice a day. The progress bar widgets are embedded from Kickstarter, so the information inside is more current. If there was an API, I'd update them more frequently, but since I'm scraping the site, I wanted to be polite. I'll think through some ways to fix these sort of things, though. Maybe I could filter them out in the browser.
In many languages, the `?:` operator is the only ternary operator, so people end up calling it "the ternary operator." If you say that, everyone will know what you're talking about. PEP 308 calls it "conditional expressions," on the other hand. I suppose that also makes sense, since it's an expression that will evaluate to one thing or the other conditionally. 
Fair enough. 
JohnJohnMcLovin: Look at what this man is saying. In your code I can see many tacit assumptions on the properties of f, but if you want help you need to actually sit down and think about what problem you want to solve. When you did this you should take **time and effort** to explain the problem to the people you want to help you. After all, if you expect them to spend time and effort **helping you**: it's the least you can do. If you want to indeed want to solve the problem for general f, then I can tell you now that unless you want to spend a hell of a lot of time on it: it's not going to happen. It might not even be possible to solve in the general case. So think carefully about which types of f you need to solve this problem for, because as is there is not a hope in hell that someone on the internet will be able to swing by and give you a good, prompt solution.
 protocol = 'https' if is_secure else 'http' right?
I did a year contract for a company that did the same thing as this. It was C# not python. Alas, for as cool as it is, I think you have to get setup by a bank somewhere along the line in order to use this yourself. For a variety of things but most importantly so they know who to charge per transaction. Then there's PCI compliance and stuff. Nonetheless, pretty cool stuff. 
a django app
I think he/she's referring to the fact that in python, you write: true_expression if predicate else false_expression which can seem backwards coming from languages that have the construct that you mention.
plus you can customize nose to discover tests in any way you want, including via decorator, base class, whatever. nose is a completely open ended testing framework. 
At this point, I'd SSH into the box and check the time and date to make sure it's not doing something stupid. If they're not correct, try setting up NTPd or equivalent first. If this fails, try running it under the Python debugger. When it bombs, you can look at the local variables to figure out what's going on. What your printing here isn't enough for decent troubleshooting. You might also want to check out the Plone forums and resources, as this may be a Plone problem, in which case they would know better that I would. 
What's weird is everytime I reboot I can't get the time to stick. It keeps resetting itself back 8 hours. I've tried everything for syncing with the domain or regular servers, nothing seems to work. And since it's a VM, I can't reinstall on top of the XP box. If I move the whole Folder to another computer (with python installed) then I dont get the FilterFields and it still gets stuck in the same place. 
I'm thinking it's a time issue, but every solution i've tried won't work. It keeps resetting back 8 hours. I tried syncing with multiple servers but it never works. It's a VM, so there is not CMOS battery. I've tried disjoining and rejoining the domain a few times, still nothing. The damn time might be a problem...and I can't reinstall Windows on top of it. Even the scan and repair thing went through but still didnt fix the time. 
Working for me on Chrome
Which? Here is the zope.conf https://www.dropbox.com/s/ob7zr5dzw9s46s4/zope.conf
What's you virtual environment? (VMWare... Virtualbox...) and what are the OS of the host/hosted machines? This sounds like a virtual machine host problem, so you might want to check with your vendor. If it's VirtualBox, make sure your time settings for the virtual machine are correct, otherwise it may synchronize in an unexpected fashion. Also, check the time on the host.
That's it! Bookmarked. Thank you!
Is 8 hours the difference between your time zone and GMT? Check that all the systems involved have the correct time zone set.
Doesn't always find the right version of the song because of the method of searching. Additionally, it occasionally opens a blank tab that does not redirect to anything.
BOOBIES
Sorry, no idea. :( The first one makes sense as rpm determines its dependencies itself. The second one looks strange.
Sometimes it will go to a video of random people singing the song terribly, but this method is very simple so I went with it. Most of the time it gives a good version of the song. Also, I figure it's like a converter (thing that changes channels on a TV from far away) where you just press the button again if it doesn't work; in this case, just run the script again to get a different song or a better version.
The song title goes where the {0} is: see [str.format](http://docs.python.org/library/stdtypes.html#str.format). It would still work if you put the song artist and title first though.
Coming up with those BeautifulSoup lines is more of an art than a science. You have to look at the BeautifulSoup tutorial at the same time you are inspecting the HTML elements on the site (I used chrome -&gt; right click -&gt; inspect element, then click the magnifying glass at the bottom left, and then find the text that you want to scrape). From here it's just a bit of trial and error to get the text using Python.
Ah, that explains it. I was using version 2.7.
Jesus you two. Submit a patch.
This is a wonderful idea. Thanks for giving me motivation to continue learning Python! 
If you look at the earlier reply from ecmendenhall you'll notice that his site only checks kickstarter twice a day to reduce web scraping hits on kickstarter. The actual results are displaying live info from kickstarter, so his own service does not know they are funded already (when I looked at this a few hours ago, the project displayed under $50 was not fully funded yet).
Awesome. I just spent 20 mins reading /r/truereddit because of this.
One tip I have is to use [random.choice](http://docs.python.org/library/random.html#random.choice). &gt;&gt;&gt; import random &gt;&gt;&gt; L = range(10) &gt;&gt;&gt; print random.choice(L) 4 &gt;&gt;&gt; print random.choice(L) 7
A simpler ternary operator can be achieved by combining "and" and "or". Concise but slightly confusing: (condition) and "yes" or "no"
why do you import random twice?
Works nice, though there are a few changes that I'd make: * You don't need to check for the bgcol class, thats just a decorator class for the yellow background on every other row and isn't needed to select what you're going for. * I'd recommend using the select function instead of findAll. I like it because it lets you use css-style selectors and a quick time comparison seems to show that it is faster than findAll. Instead of calling table_reddits = site_content.findAll('tr', {'class': "halluc"}) you can call table_reddits = site_content.select('tr.halluc') * Instead of iterating over a range, I'd recommend subscripting the list (ie small_list = big_list[:100] to give you a list of the first 100 elements in big_list) Then, you can just call for item in small_list: * That said, if you only want one item from the top 100, there isn't much of a point in getting the names of the top 100. Why not just call table_reddits[random.randomint(0,99)]... and skip iterating over the other 99 items in the list * Finally, if you want to sacrifice readability in favor of saying you can do that in one line of code, you can always cram it into something like this (though I used the requests library for this) webbrowser.open_new_tab('http://www.reddit.com/r/' + BeautifulSoup(requests.get('http://www.redditlist.com/').text).select('tr.halluc')[random.randint(0,99)].select('td.redditname a')[0].get_text().lower())
shelve is basically just pickle + a database . It's just a little simpler to use shelve when you're saving to a file.
ironically it looks more like junit4, which uses java annotations roughly in the same way this one uses decorators so its not more python, just more modern java :P
My version: string=""" A, B, C A, C, E E, F, D D, A, J E, D, J """ list1 = [i.replace(',','').split() for i in string.split('\n')[1:-1]] results = [] for idx,i in enumerate(list1): for idx2,j in enumerate(i): for k in i[idx2+1:]: results.append(tuple(sorted([j,k]))) for i in sorted(set(results)): print(', '.join(i)+',',results.count(i))
On the other hand, depending on what you're doing, with a little bit of abstraction this could be the base of a simple extension point for future features or third-party "plugins".
I see no python.
I think this is actually an attempt to show that all the "punctuation" is unnecessary, and does not help readability.
As you can read right there on the site, it's a (hopefully) nonexistent coding style called "pythonic java". Of course it's more readable than java, but only if you don't have to write it and only if all those braces and semicolons are where they belong.
If you could have an IDE put all the semicolons and braces in automatically based on indentation, it might actually become somewhat useful for people who really hate those 2 things.
Actually, Scala has [structural typing](http://codemonkeyism.com/scala-goodness-structural-typing/), which is kind of like a typesafe kind of duck typing. Yes, it's not quite as flexible as duck typing, but I don't believe that the kind of flexibility that duck typing offers over structural typing is necessary, especially when you're sacrificing compile-time type checking.
It requires administrator privileges to run.
Why would you want to do this? Shouldn't you be using virtualenv or something?
&gt; In C++, constants can have a profound role because the compiler can assume them to be known at compile time. If you mean what I think you mean, then you are mostly wrong here. As Yossi [explains](http://yosefk.com/c++fqa/const.html#fqa-18.14), the const keyword is irrelevant to performance, because a) usually the compiler can't be sure that the value that is pointed at by a const-qualified variable is not referenced by a non-const-qualified variable somewhere, b) and when it can be sure, it sure as hell doesn't need you telling it that this value is never modified! &gt; So, what does it mean to introduce two new keywords where taking one of the existing ones would have been fine? Which ones? You still need `var` or something like that, if you want to avoid stepping on the same rake as Python (and it is recognized as a shortcoming, since it was addressed first by `global` and then `nonlocal` keywords), and you want to allow type inference. C# uses `var` too, by the way. Then using `val` for immutable variables makes more sense than adopting C++-like `const` (with totally different both syntax and semantics).
"patches welcome", and since nobody has a patch, bug remains, but then, reinvent an entirely new framework ? why not just fix one bug ? which option benefits the community more?
I'm sure everyone knows this but anyway: [r/random](http://www.reddit.com/r/random/)
oomph, scala is… so much more that it’s difficult to select one of the many possible examples. it has type inference, everything is an expression, first-order-funtions, more functional stuff, a sophisticated type system, type inference, implicits (think an elegant way to do monkey patching without actually modifying things) lastly, [here are 99 scala examples](http://aperiodic.net/phil/scala/s-99/), and i think it’s safe to say that all are at least as elegant as in java, except if some contain enums (which are worse than java’s)
in all fairness you should use [`ConfigParser`](http://docs.python.org/library/configparser.html) instead of writing the text file by hand but `shelve` is still better, specially if you want random I/O access.
lol, quite the contrary. it’s much more concise and often beattifully elegant, but at the cost of one or two ugly forced concepts (e.g. “stable identifiers”) and a few too much keywords. but add the complexity of the type system (which sometimes gets in your way) and you’ve got pretty much all that’s bad about scala. and there’s *so much* more that i love about it.
I did not know that, cheers.
Cute. Useless, but cute.
I think it is preferable to use the standard library when possible, for example to avoid dependencies. But lack of the "discovery" option in the old unittest module made it too much of a hassle to me. Now that this is fixed, a bug in nose was enough impetus to switch back. I'd still like some of the syntactic sugar that nose provided, though.
The [Matplotlib FAQ](http://matplotlib.sourceforge.net/faq/installing_faq.html#which-python-for-osx) actually has some useful tips on this.
1. install macports (available at www.macports.org) 2. run the following command: sudo port install py27-pip 3. run the following command: sudo pip-2.7 install matplotlib pil PS: you may need to install Xcode for macports to work
Groovy?
python 2.7 comes with lion, so you can just do: easy_install pip pip install matplotlib pil and you are all set!
Both modules work fine, I have both installed on my Mac. You can easy_install pip and then pip install matplotlib and PIL. I also suggest you install IPython. The [notebook interface](http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html) is really nice for working with this kind of thing. 
No. You can write one yourself, but it's not really tail call optimization, since it's not being handled by the interpreter itself.. It's just an automatic transformation of your code, just the same way a self-parser would be. 
If you're using MacPorts, you may as well install matplotlib and PIL from there: sudo port install py27-matplotlib py27-pil
There's plenty of choice in all fields of programming, especially PHP. The problem is rather that it's not very straightforward to just pop your code somewhere and have it recognized as a web application with sane defaults. As it is, hooking up the application process to the webserver is voodoo at best, cosmic horror at worst. 
Along with everything else he denounces. Don't worry though, I'm sure a whole bunch of people will show up in a minute to post links to a bunch of blog posts from '09 and anecdotes to let you know how evil MySQL is.
On the contrary, I find his tone refreshing. Of course if I was more than a noob and had formed my own experience-based opinions, I could see myself being annoyed by him.
The nonsense part makes it *worse*. God forbid you try to do anything higher level than fetching some values from a `POST` or MySQL, you'll need to rely on the inner workings of what you've got: turns out it's nonsense. Sure, you can keep working around the potholes.. but we're on /r/Python. We're here because we're not working around a shitty language.
Python specific. MySQL connection drivers for Python are either immature (oursql) or horrible (mysql-python). Pick your poison. MySQL has two main engines to pick from: InnoDB for database features like foreign keys, MyISAM to have performance. Pick your poison. In-database unicode support is a minefield. MySQL is designed not around ASCII, but ISO 8859 (latin1). You have to specifically ask it to use UTF-8. Every time. In 2012. There are silent data loss gotchas. Need I say more? Unless you're dealing with a given stack that only gives you some (possibly ancient, buggy) version of MySQL or your legacy software has spent a decade getting married with MySQL, you're better off using Postgres. It's fast, easy and secure by default. And the venerable Python connection driver isn't horrible. Oh and Postgres isn't owned by Oracle.
No, we're here because for whatever reason we're using Python and no matter how much we love or hate Python *(or any other language)* it has *(relatively)* the same amount of shitty libraries, odd quirks, annoying bugs, and people using the language in a horrible manner as any other language. If you think Python *(or again any language)* is some pinnacle of programming perfection, you are delusional.
ok, thanks.
The point he's trying to make is that you should never do anything like this: input = sanitized(input) run_raw_sql_command("select * from x where $input"); Because your sanitized function is likely to be inherently broken. Instead you should use the provided APIs that do this for you, eg.: run_parameterised_sql_command("select * from x where %1", $input); If you need to pass arbitrary strings to any external API, that API should provide a way to encode the string to its own specification - you shouldn't have to try and change the string yourself to make it safe. If you do, you're probably using the wrong part of the API, or a bad API in the first place.
Do you need any other patterns for web dev?
In This This.
It's not really a foreign key if you use it in the same table though. So you're not really using an FK correctly in this case. You can turn FK restraints off too: SET foreign_key_checks = 0; Problem solved. You want FK constraints in place so some developer doesn't accidentally blow away large amounts of data with what might look like an innocent delete from command, because he failed to pick the schema apart. Anyways, I've seen MySQL scale to handle some of the busiest sites on the web (20,000+ requests/sec, 5+ Gb/s of data flowing at peak times). Proper architecture is everything. If you're incredibly write heavy, there's MMM, which scales out very well. You also have Percona or MariaDB which are forks, if Oracle is just too evil for you. If you're incredibly read heavy you can go single master, multiple slaves, and load balance the slaves to handle reads.
FYI it hasn't been a web.py site in a while.
&gt; So you're not really using an FK correctly in this case. Sorry, that's not correct. It is absolutely a foreign key, from one row to another. It's in the SQL specification too: http://en.wikipedia.org/wiki/Foreign_key &gt; The referencing and referenced table may be the same table, i.e. the foreign key refers back to the same table. Such a foreign key is known in SQL:2003 as a **self-referencing** or **recursive foreign key**. 
Use [splinter](http://splinter.cobrateam.info/). Splinter incorporates Selenium.
I'm not actually sure what you're going on about. The only place "web.py" even exists in this page is when you've typed it. It's barely mentioned in a comment thread on the original article, and suddenly everyone hates it?
The ZIP code example was to highlight that the purpose of validation is to insure that data conforms to a format which is meaningful and reflects the nature of the data, as opposed to sanitizing which means to makes the data safe for use in specific context. Given your example of a generic string, you wouldn't normally concern yourself with validating against special characters because, as you say, they might make perfect sense given the nature of the data. But you still always sanitize or escape it before using it in a given context. This doesn't necessarly mean you alter the stored value of the data (except with database escaping, but that's going to be unescaped in nearly all circumstances anyway).
I use sqlalchemy+pymysql for production, it works great. Handles utf8 well, much easier to install, and based on hotshot profiler, pure python driver is not a problem.
So then I think you are agreeing with the author about the stupidity of those poor validation practices, but just not agreeing that this is a trademark of "most" PHP applications/developers?
Yes!
&gt; The only place "web.py" even exists in this page is when you've typed it. Yes. Author never mentions web.py so article loses some credibility (someone else also said something similar on Hacker News) so that's why I said "something, something web.py". Capish? &gt; and suddenly everyone hates it? That's my explanation why my comment is being downvoted. Zealots at work, perhaps? 
A little light on the 'explanation' side.
ok, used this but after restarting my machine the resolv.conf is back to wifi settings again. how do i set it everytime to 127.0.0.1? even after restarts
What about name in dict in people (or in people in dict)?
Alternatives?
Take a look at this tutorial on gevent: http://sdiehl.github.com/gevent-tutorial/
Just a virtualenv + WSGI file + VirtualHost file aka one of the most common ways to deploy a Python web app. You should use an extra virtualenv for every project anyway, the WSGI file is provided by the framework and the VirtualHost configuration is basically just copy&amp;paste from any project you had before. The point of this is to have an environment that works almost like the environment on production side. What is the point of your setup?
What's going on with the _Something.ext_ names?
The problem is that most python 2 libraries use strings for text instead of Unicode. Also TIL about unicodenazi. It seems really useful for debugging.
You could set up a cron job to automatically modifies this file at certain points throughout the day. For example you could modify it to block sites during work hours but then not block them during lunch hours, all automatically. 
It sounds like he's aimed the FAQ at more experienced Python users. He says "Unicode sucks", but everything in that section points more toward "messing with Unicode sucks". In Python3 there's no "messing with Unicode" -- it just *is*.
I just use bash aliases and /etc/hosts for this. Simpler IMO. Hook it up to cron if you want the time based stuff. https://gist.github.com/1626720
I like your style. I love clear words from someone who actually knows what he's talking about for a change. The problem is just that you're human and although your opinions are profound, they aren't perfect everywhere, which makes you sound like a Dick in the few places where you're wrong. I for one don't like your casual dismissal of python 3 while also saying that Unicode sucks. I know that python 2 is the better choice if someone wants to test web frameworks (which are the have the worst share of python 3 ports of any module genre), but you should also mention that if someone chose pyramids he should also use python 3 as it makes your whole Unicode section a non-issue (and your "Unicode sucks" statement obsolete) Also you managed to get me interested in what cheetah is and why it's so unholy :)
I wrote this trying to guess what the common pitfalls would _be_—e.g., being faced with routing instead of URLs mapping to filenames.
Many people told me they've used PHP for a while and it worked well for them. I didn't go into it because it's wildly unrelated to web development with Python. If you already have a strong opinion on databases, that's great; if you don't, you can borrow mine :)
The point was not "PHP has these issues". The point was "PHP has a disproportionate number of issues in critical places and that is not okay". Nothing is perfect. That doesn't mean everything is roughly as good.
I don't disagree with you in principle but on semantics. Validation implies accepting or rejecting input and sanitizing is an act performed on data that has already been validated (even if your validation rule is as simple as "accept all"). Data which has passed validation is later subjected to some sanitizing routine. Rejecting arbitrary text for any reason (even if one imagines this rejection is insuring the input is safe) is still handled under the validation rules section of a typical PHP application or framework. Whether or not data is safe to use in its given format depends on context (is it going into a database, being displayed in a web page, going into an email header, etc?), so you do that as needed and keep the previously validated data intact in case you have to use it in a different context requiring different sanitizing procedures later. A good way to sum up what I'm saying is to look at how PHP's [filters](http://www.php.net/manual/en/filter.filters.php) are divided. Perhaps what we're both saying is using validation to sanitize input is goofy and people shouldn't do it (and one shouldn't mistake one for the other). 
Thanks, much nicer api than the ones from selenium.
If you need a script to change you machine hosts, you've big problems than spend time procrastinating. Change you habits, not your configs, or you'll get double frustrated: still waste time typing URL in your browse &amp; mad for not being able to visit.
Here is another thread, from Python-List, where the author gives some more details: http://mail.python.org/pipermail/python-list/2012-May/1291794.html
Should have guessed this but I found out this does not work when you have to connect to the internet via a proxy :)
Self con-what? Never heard of it.
oops. Let me think, if possible I will add up extra explanation.
I am not getting you, if checking for a `key` in `anotherkey` in dict will fail because, `anotherkey` in dict will yield `True` or `False` , `key` in `True` or `False` will yield `False`. If I have mistaken pl explain. 
You'd need 2 crons...one to edit the file to block domains, and another, on a different schedule, to edit the file to unblock the domains. Cron lacks flexibility as well...can't exactly do pomodoro with a cron schedule.
This is highly recommended tutorial for concurrency [http://www.dabeaz.com/coroutines/](http://www.dabeaz.com/coroutines/) libraries ------- - [http://readthedocs.org/docs/greenlet/en/latest/](http://readthedocs.org/docs/greenlet/en/latest/) - [http://www.gevent.org/intro.html](http://www.gevent.org/intro.html)
When the hijacker stated that he “retired“ the mantainer it was clear that the project cannot be trusted anymore. This just screams instability and unprofessionalism.
I agree on the bozotic part, and off topic but... Validation rejects the correct information and ensures you only accept something you application is validated to process. I would like validation more if people let me enter phone numbers as: (415) 321 1234 And credit card numbers as: 4123-1234-4568-9012 rather than junk like: 4123123445689012 English post codes have letters.... 
Holy balls, time to go double check who else still has admin rights on every project domain I own.
I know you're being wry, but it communicates two things: 1. The name of the project 2. The platform it runs on. So now I know that this project is called focus and runs on Python. Being a python programmer and reformed rubyist, I can tell by name alone that I would prefer this project to, say, focus.rb, all things being equal. Is it a little too hip of a naming convention for major projects? yeah, probably, but it's pretty decent for small, purpose built projects like this.
This is an interesting twist. Public developer drama is kind of rare. I'm devouring it with popcorn!
&gt; For example, give me the user whos username is **yourmum**. Or who’s email is **yourmum@me.net**. Or both. I stopped reading. 
I usually flip between screens. It helps me process and digest information better. I still get work done and am still rather productive(or so my PI says). 
Cute license. But go for a real one and save us all the hassle of emailing you and asking if you'll consider our "Facebook for dogs" startup evil or not. :-)
reddit has some anti-spam mechanism. and sometimes it's not easy to understand it. good job, keep going :)
installation under Ubuntu: sudo apt-get install libevent-dev python-all-dev sudo pip install gevent 
&amp;#3232;\_&amp;#3232; Do not install things in the system without using your distro's package manager. Although pip is quite nice and so on, there's still a risk to mess up your system. So do not mix these things. Keep them separate. Use a virtualenv instead. If you don't care about a library's version, use your distro's package. If you do care, install it in the virtualenv. **EDIT**ed to prevent misunderstandings.
Strong opinions on some topics, but a lot is sound and it's interesting to read.
Using Python on Windows can be tricky. `bdist` binary installers attempt to find the correct Python installer by checking the Windows registry. I did find out recently that the exe contains a zip of files very similar to an egg, and `setuptools`/`distribute` can install them. I'm hoping to work on adding `pip` support for this soon. However, there are some projects which distribute their packages as MSI executables. I don't think there's any current Python packaging tools support this.
&gt; i patiently explained why this was not acceptable as i am software (libre) developer, and advised them that if they wanted such services (...) Though the hijacking is childish and detrimental to that project, he clearly doesn't face his own actions. He was quite blunt and definitely unwilling to discuss anything that he felt wasn't relevant to his view on a community project. Does anyone know what's up with the lack of 'I' by the way? 
It just give you an ilusion that it work like php but in fact it's not. The code outside your hello() function only executed once and you can't access request data outside of your function. You also have to mess around withmod_rewrite sooner or later. Having said this, I discover this method just because webfaction provide this for the wsgi app created from their control panel. http://groups.google.com/group/modwsgi/browse_thread/thread/efa27b5d1f3ab3b3#
I'm actually the author of this tutorial. It's still unfinished but I'd appreciate any feedback on ways to improve it.
How about writing down the `ab` results of `gevent.pywsgi` and `gevent.wsgi` for comparison?
Interesting, but it's full of spoilers! I had to look away. I enjoy solving the puzzles myself. You should have a landing page that doesn't show the details, but links to the individual problems, so I can look at only the ones I've solved. Also, here is my source code to the ones I've done: https://bitbucket.org/jgrigonis/projecteuler/src I kind of wish I had taken the time to write down thoughts for each one like you did, as it's hard to go back and remember what I was thinking.
Ah sorry, I didn't even think about that. I am planning on doing it on not just project euler stuff in the future, but I have a lot of project euler stuff to write on. My current method is to write a couple revisions on each problem, so I go back and compare and contrast.
&gt; a mature software developer Superficially judging by their respective code repositories and [commit histories](https://github.com/pyjs/pyjs/graphs/contributors), they just backstabbed/excluded the most experienced and prolific developer. For the projects sake, I hope the new infrastructure can compensate for this... While I'm appreciative of the free software vs. useful infrastructure-debate (e.g. switch to github), it is a bit bizarre that the intersection between active pyjamas developers and active github users is apparently quite empty. Why the hasty switch? &lt;/ uninformed assessment of developer-drama &gt;
What about [Mechanize!](http://wwwsearch.sourceforge.net/old/mechanize/)?
Oh, I like that! I can't have slides, but I can do a few quick sketches before I go.
Neat! Thanks :) 
Nice, systematic analysis of a little problem...
This is really interesting. I will be keeping tabs on this as PyJamas always looked like an interesting project, but MY GOD that is one crazy URL.
Well, you will need to use a library for the GUI. I do not know wich one you plan to work with, but there is a high probability that using it will require you to know how to manipulate abstract objects. I highly recommend that you finish learning the basics beforehand; however, if you feel more comfortable learning by writing this project, go ahead. Just do not forget to get back to your lesson when things get blurry.
a couple of years ago I taught an introductory course to programming to a bunch of 10-15 yo gifted students using python. it was awesome fun. We got to for loops and if statements the first day and there were a couple of kids already figuring they could probably write brute force password crackers/guessers. And consequently they learned that CTRL-c is your friend. Another fun exercise was showing them that they could open any file in a text editor, and that typing random shit in a binary would corrupt it. And finally it was cool to tell them about the alternative open source tools they could use without guilt rather than trying to pirate shit, mainly gimp instead of photoshop, inkscape instead of illustrator and blender instead of 3d studio max. The next week one of the kids parents brought me their laptop to show me that one of my students had taken it upon themselves to install blender and get a game simulation running of a marble rolling across a surface and then dropping off(I have no idea how to do this, and I didn't even mention the game engine part of blender). These kids are scary smart. 
I have two questions: 1. What are/is the go-to Python GUI library? 2. I come from a C# background. Why would I choose Python for writing GUI apps? I know C# isn't cross platform, but, for example, Java is. What advantages does Python bring in this respect? I love Python to make console apps, but have never tried using it with a GUI as well.
A coworker of mine tried to explain that what we do is basically tell the computer what it needs to do. Specifically, he emphasized that unlike what the kids think, computers are actually pretty stupid, and we have to be very precise and detailed when giving instructions. He demonstrated this by having them explain how to do something (I believe he used making a PB&amp;J sandwich) and doing quite literally everything they said. "Put the peanut butter on the bread" -- place the jar of peanut butter onto the pack of bread, etc etc.
1. Maybe tk falls into this spot, but I'm not an authority. 2. I think Python is at least as cross-platform as java, but with less boilerplate code. Here's a list of gui options for python: http://wiki.python.org/moin/GuiProgramming I've experimented with and made simple applications in tkinter, wxpython, qt, and pygame. They all have various upsides and downsides.
Something that's always been a big hit: Open up www.google.com in Chrome, and replace the google logo with the school's logo. Not that hard, but usually blows their mind.
I once questioned RMS's leadership, to his face, over "marketing" issues such as the terrible state of the gnu website. I was basically laughed out of the room.
cx_freeze + Inno Setup solves this problem. You get a standalone installer without any additional dependencies. Create it takes me a few seconds (three clicks). http://i.imgur.com/ucMq2.png
And the final executable is not too big compared to the original script ? The inclusion of the interpreter generally tend to make big executables out of small programs.
your coworker seems to be a few comments above you
Sadly wasn't my coworker, totally missed it before I posted though.
Well, thanks, that's good to know. It's a pity such methods have to be used when a preinstalled Python interpreter on the user's machine would make everything easier.
what is sp in 'sp.a.string.encode('ascii', 'ignore')'? Sorry... I understand the rest of the statement, but Im just complete newb trynna figure out what's what.
No lie: I used to work at NASA. I told my son to tell his friends I was an astronaut. Guess who won that mommy war?
about 3.4 days
Never done anything similar but I'd try making a game, maybe a script to order some Dominos, or something else that's fun.
Well this post is at 47 points now, and there aren't any comments saying "It's BS It'll never work!" yet, so we're probably good.
Your question is very wrong. What is a simple software? First you have to know what you want to do and what is needed for this (skills, tools, etc). With some experience you start to notice that most "simple software" is never completed :)
You could try encapsulating the data generated by func1 in a ~~separate class~~ dictionary. func1 would then return ~~an instance of this class~~ it. Whenever you call func2, you´d explicitly pass the "state" into it. Explicit is usually better than implicit.
#2 is how you do it. I don't understand why you think it's ugly.
&gt; Something along the following lines: start N threads that each reads from a Queue.Queue() the next job to do, and does it in a "with thread.atomic" block. The STM version of PyPy is then able to run these atomic blocks concurrently. Sounds like [Grand Central Dispatch](http://developer.apple.com/library/mac/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html).
having intermediate variables between functions that don’t get args, sounds like a general design issue reshape how the functions work so you don't get intermediates that way to begin with
I don't understand what this is.
Alright, so I screwed up my first post using alien blue... I'm trying to understand the difference between recursion and iteration. I'm taking the opencourseware class on python and am supposed to make both an iterative and recursive program that: Counts the number of instances of a key within a target string. This is what I've made so far.. Could someone please tell me which method I used and help clarify the difference? I've looked to some outside sources and figured I'd just ask. May this soon be downvoted to hell!
what's going on in this metrology?
Simple is better than complex. Just use `_foo` attributes.
I am aware of how to capture a screenshot, and I'm going to assume you are just trying to be helpful and not condescending.. For the record, i'm running Linux. Alien blue is for iPad (preferred redditing device) and I was in a rush to get this posted. At a buddy's just cranked the code out and I needed to be "social". I was hoping to get a response in a timely fashion when I returned to it. I'm prolly in the wrong subreddit and my post will be banished shortly.. 
This is neither iteration nor recursion (though it's nearer iteration than recursion) - iterative implies you're going somewhere, and `while` implies you're waiting for something to stop. An iterative solution would involve iterating over something (it wants you to iterate over the `target` string) - this almost always means using `for`. Recursive solutions are much easier to recognise (though harder to write). Anything which calls itself is recursive - so all you need is `countsubstringmatch(something)` within the `def countsubstringmatch`. To keep from recursing to infinity, you need a "base case" (almost always an "`if something`" on the first line of the function) that recognises that you can't or shouldn't recurse any further, and returns. So an iterative adder would be something like def add(a,b): if a == 0: return b # nothing left to take from a, so 'b' is our answer else: a -= 1 # take 1 from a b += 1 # and give it to b return add(a,b) # recurse A few tips; * Don't use keywords (like `float`) as variables (that's why it's purple) * Python doesn't need brackets around everything - you can say `-1` or `float = find(blah blah blah)` - it can make it harder to read - `float = find(str(target), key, int(float))` would work. * You can increment with +=1 - eg, `count +=1` * Your commented `print` statements - you can use string formatting (eg, `print "entry float %s" % float`) - this is safer and faster. * I'm actually not sure why you have `float = float + 1` in the final part, when you redefine it in the next run of the loop - what happens if you take it out? * Please check the sidebar - I think /r/learnprogramming or /r/learnpython may be a better subreddit for this kind of thing.
The method you've used here is iteration. Essentially iteration is doing things with a loop: do this, then do this, then do this ... until done. Any time you're using a for loop or while loop, you're using iteration. Recursion may be best considered as something like breaking a problem down to a simpler version of the same problem, and then calling your own function to solve this smaller function as part of this. So, a way to phrase the problem in recursive terms would be something like: To count substrings: 1. Find the first occurrance of the string 2. The answer is 1 + the number of substrings in the rest of the string. Here, that second step is essentially the same problem this function is designed to solve, just applying to a different string. The final issue is how to stop. Obviously if the function keeps calling itself every time, you'll never get out. Generally then, there is some "base case" for the problem which repeated applications of step 2 will eventually reach, and "simpler" above should mean "gets closer to this base case". Here an obvious "base case" would be when you find no matches, in which case the number of substrings is 0.
And there are risks inherent in API design. So in fact his first sentence should just be omitted.
There is also [elaphe](http://code.google.com/p/elaphe/) for all sorts of barcode generation 
In recent versions `gevent.wsgi` has been deprecated and replaced by `gevent.pywsgi`. The former one uses HTTP implementations of libevent and the latter is written in pure Python. [`gevent` is moving to libev from libevent][1], so `gevent.wsgi` is not more available. :-) Moreover HTTP implementation of libevent has several bugs. [1]: http://blog.gevent.org/2011/04/28/libev-and-libevent/
yeah an end to end example besides the api docs would be awesome because I would totally use this. especially if I could broadcast the measurements to another server to process further rather than inline with the actual logic. 
Really nice tutorial, great thanks.
He mentioned Mechanize in the article.
+1. As much as I love Python, I plan to teach my kids Javascript first, since the web is something they'll be used to (future tense--they are 5, 3 and 15 weeks right now). Teaching them to use the javascript console and making live changes to a web page is both immediately gratifying and useful. Once they get the hang of that, I'll move on to a "proper" language like Python :)
Example derived from some real code we had here. My coworker came up to my desk and asked "how the heck does this even work?!" If I recall correctly, this is fixed in Python 3... Edit: Here's Guido's article on the topic http://python-history.blogspot.ca/2010/06/from-list-comprehensions-to-generator.html
Your `generators` section gave a moment of pause. We have to be a little careful with how we say `in` works with a generator: &gt;&gt;&gt; squares = (x**2 for x in range(10)) &gt;&gt;&gt; 0 in squares True &gt;&gt;&gt; 1 in squares True #Everything looks good so far, right? &gt;&gt;&gt; 3 in squares False #Still good &gt;&gt;&gt; 0 in squares False #Uh.. what? &gt;&gt;&gt; squares.next() StopIteration With a generator, the `__contains__` method will keep looking at elements until it finds the element, or it hits a `StopIteration`. With the latter, you can't do another `in` against the generator. ***** ## But it works with xrange! Yes, but `xrange` obscures this behavior a bit, because it overrides the default generator's `__contains__`, possibly to something like below: def __contains__(self, value): return self._min &lt;= value &lt;= self.max Or something with equivalent effect. Note that it doesn't behave like our `squares` generator above: &gt;&gt;&gt; digits = xrange(10) &gt;&gt;&gt; 2 in digits True &gt;&gt;&gt; 9 in digits True &gt;&gt;&gt; 20 in digits False &gt;&gt;&gt; 3 in digits #Going by our previous example, this should fail True That last true means it doesn't actually use the `next` method until a StopIteration because it knows something about what it holds. A basic generator has no idea what it's going to yield, so it can only keep yielding and checking if the next element is what you wanted, and say `False` when it runs out of things to look at. ***** ## Infinite Generators This is important in case you write an infinite generator and try to do a check for an element that isn't yielded, such as: def fib(): a, b = 1, 1 while 1: yield a b, a = a+b, b &gt;&gt;&gt; 3 in fib() True &gt;&gt;&gt; 4 in fib() #We'll be here a while.
If they're temporary, and the class is going to be populating them multiple times, I do #5, explicitly return the values from 1 and pass them to 2. 
State is complex, and introduces subtle bugs and race conditions. Passing variables is simple, and does what you expect.
I spent quite a bit of time bringing pyqrnative to a more readable state, and added a bunch more functionality. Rebirthed on pypi as [qrcode](http://pypi.python.org/pypi/qrcode).
It's awesome, but I don't think it's "cheating" per se. It's taking advantage of a lot of existing data and using it in a completely different way, which is great. A lot of websites purposefully expose data like that (Twitter, Facebook, etc.) and any application that can mix up data like that and create something completely new is fantastic. Another thing is that though cool, the Flask and Python backend may have been unnecessary (except for authentication purposes). If you're pulling all of your data from IMDB anyway, you probably didn't need to create another application server that pulls the IMDB data into its own database. You could just use only JavaScript on the front-end, and have the user pull data from IMDB directly from their own browser. This saves some bandwidth since you would only need to serve the static HTML/CSS/JavaScript files. You don't need another Python application acting as a middleman between the two, except for implementing the e-mail/password authentication. Still, props on using the (absolutely terrible and non-existent) IMDB API successfully, and nice use of your procrastination time. :P
Thanks ! I'll take a look !
I guess because there's a trade off between error correction and information capacity. If you want more robust correction, you can't store as many bytes in a QR code of the same size.
Ah makes sense, thanks.
You're very welcome! We haven't been able to publicize it much yet, so I'm glad to see the opportunity.
SciPy Superpack deserves a big mention here. It's easy, it's set up to use the optimized BLAS stuff and it let's you use the installed python distribution. https://github.com/fonnesbeck/ScipySuperpack
tl;dr uses Cool New Tech (tm) to pretend his site is IMDB's.
tb;dr too blurry, didn't read
This is the best answer. &gt; Assume that no other external or internal functions will need to access these variables either. You should also never assume this, because if you're building something with a fair amount of complexity, there _will_ come a day when you will need to access those variables. 
Came to say the same thing. Nice window dressing, but this person just made a specialized proxy.
woops right. Didn't really pay attention there.
Is login absolutely required? Can't save in session?
Runtime errors are different from parsetime errors. 
Thanks! Yeah, the IMDb really should have an API.
Like I said, there are other Py3k changes that would only occur during runtime.
Is this significantly different from noVNC?
No, just terrible side effects of function scoping :-)
A good way to keep posted on this and stay up to date is subscribing to a news letter or something like pycoders.com
* Writing PyQt applications. * Analyzing audio stuff with Numpy/SciPy/Matplotlib * Generally using the above instead of Matlab (because it's better)
The learning experience is invaluable. But even the guy said that it's 'cheating'. There's a large amount of indirection with this project.
Actually, the recent releases of gevent-websocket supports the latest protocol.
I've been saying it wrong all the time then... pyjamas is much easier to pronounce then pie-jay-ess. Hopefully all this sillyness won't kill the project.
&gt; The natural syntax ... Isn't this an oxymoron? What could be natural about a syntax? 
Still, I cannot figure out how I should be using it really. Shame because it would sound useful.
&gt; “Main” method is the program’s execution starting-point Python doesn't have a main method.
This - for a lot of more complicated packages, being able to install a binary package, rather than having to compile it locally, is significant.
pip lacks support for certain easy_install features like extras and binary packages. Without binary package support it's basically worthless on Windows.
I've been using this for a while now, and I love it. It even motivated me to learn to write docutils plugins. I've got one for embedding [YouTube videos](http://bitbucket.org/cliff/rstyoutube) that people might find useful.
If you're not already tracking your dependencies in a requirements file you could achieve that via: pip freeze &gt; /tmp/venv-deps.pip &amp;&amp; pip install -U -r /tmp/venv-deps.pip
I'd like to see built-in support for installing directly from a download cache, preferably without having to do the index lookup. 
How do you specify a dependency *at all* with pypi? 
No. The execution starting point is the top of the module you invoke from the command line. If you want to call a particular method, you have to do that after python has already started execution.
There is a [proposed GSoC project](http://lists.debian.org/debian-python/2012/04/msg00020.html) to automatically convert Python packages into Debian packages that you could install with `apt-get`.
In the meantime, I wrote an article to do it manually: http://savetheions.com/2010/01/20/packaging-python-applicationsmodules-for-debian/
Unless I'm missing a point (or sarcasm), dependencies should be specified in the package's setup.py
What I have really wanted for `pip` is parallel installation. Currently `pip` tries to install whole dependency graph in serial. Flask -&gt; Werkzeug -&gt; Jinja2 Flask-Mail -&gt; Flask -&gt; blinker -&gt; Lamson -&gt; chardet -&gt; Jinja2 -&gt; mock -&gt; nose -&gt; python-daemon The above graph can be naively resolved in three parallel steps (and can be improved more if it gets right): - `Flask`, `Flask-Mail` - `Werkzeug`, `Jinja2`, `blinker`, `Lamson` - `chardet`, `mock`, `nose`, `python-daemon`
Probably overkill but I would like to be able to do something like this when I need to update multiple libraries: pip batch_upgrade --include=django*,south --cmd="python setup.py test" Pip searches for upgrades to every matching dependency and runs the command. If it fails, proceed to downgrade each dependency in turn and run the command until the most likely offender is found. 
I understand why they made it work the way it does, but it still leads to surprising behaviour such as that which I demonstrated. Apparently enough people felt that way that they changed the way it works in Python 3 so that the inside of a comprehension actually is a new scope. I think it comes down to usability, especially since the tendency is to use single-letter variable names as the iteratee in a list comprehension. This can lead to subtle bugs like the one I demonstrated.
See also https://github.com/jordansissel/fpm It can create rpm, deb and even solaris packages.
I have no idea... But here's an open source clone that I've used a few times: https://github.com/benliles/djangopypi
pip uninstall
Simple installs from a local directory of package files, no network access or requirement for absolute file paths
Not so long. I did my first 'Hello World' in early March or so. My code isn't up anywhere because I'm constantly tinkering with it! I add functions to my bot all the time, as I think of something interesting. This is what I used as a base though: http://ubuntuforums.org/showthread.php?t=1493702 
I concur with you that flat is better than nested, that´s why I previously stated that I would return the dictionary from func1, not store it as hidden instance state 
Right, I've it so ingrained in my boilerplate vision that I forget that I have if __name__ == "__main__": in most of what I do. I've updated my comment above.
lots of static site generators out there. i just set up [nikola](http://nikola.ralsina.com.ar/) yesterday, but pelican looks more robust
Python is the language, which is supported by different interpreter implementations. The headline is correct.
Could this be hosted on a web server? If so, you could create a web application that would do it. Your server would have NumPy installed and it would do the heavy lifting while your user in the browser would input whatever they need to input. If it needs to be a self-contained *applet* without access to server resources and runs entirely in the browser, I'm afraid you will be out of luck for a simple and straightforward solution. You *might* be able to convert the C parts of NumPy and your other dependencies to Javascript using something like [Emscripten](https://github.com/kripken/emscripten) and you *might* be able to convert the Python parts of your project to Javascript using something like [Pyjs](http://pyjs.org/) but it would not be worth the effort, the energy and the maintenance hell you would end up with in my humble opinion.
If I'm understanding this correctly, it's like [Jekyll](https://github.com/mojombo/jekyll) but written in Python.
Sweet!
[yolk](http://pypi.python.org/pypi/yolk/0.4.3) is a useful tool to do that.
I found it at first confusing that generators are defined by *def:* blocks, just like functions and methods, even though they're a quite different sort of beast. It's a very nice shorthand, but choosing a different keyword would have made it less confusing for newbies IMHO. OTOH, economy of reserved words.. 
yes google does use python for some of their servers from what ive heard.
Sure, but I *thought* dependencies were through a setuptools extension to distutils - but it turns out "requires" is a standard part of disutils (although distutils doesn't do anything with it when you install a Python package unless you use setuptools). I don't think they're shown on pypi though - so specifying a project dependencies in setup.py (whether using setuptools or regular distutils) has nothing to do with *pypi* as far as I can see.
If you have Silverlight installed there is http://trypython.org
Hat into ring: I really like the multiprocessing module.
udacity.com is great...
I concur with this. As a person who is **not** a programmer, not used to programming, and not possessing the mindset of a programmer, I'm going through the Learn Python the Hard Way little by little and it makes **MUCH** more sense than the o'reilly 'Intro to python'. Sure O'reilly is massively inclusive of every little niggling detail of python, and that's great as a desk reference as you get better (I assume)...but it's a little like introducing someone to the idea of a forest by saying 'First there's this tree. See the tree? Now there's this tree next to it. See that tree? There's another tree next to it. See that tree?' Sometimes you just need to put someone in the forest and say 'this is a forest. Don't worry about the trees, we'll get to them. This whole thing around above behind, in front of and below you is part of the forest. Let's play a little bit.' I think going through Zed's tutorial/online book I might actually learn how python works a little bit. We need more sources like this for the more intricate things in python.
In case anyone was wondering, like I was, wtf calepin was: http://calepin.co/
You should do Udacity/cs212. That's one of the quizzes in the first unit out of a dozen or so, then you get more challenging ones for homework.
pip bundle was intended to do this. But no one used it and it was wonky, though I think the code is still in there.
You can't make a pypi-simple-compatible repository on S3? There is some script that I've forgotten that will create the necessary static files.
Here's the ticket if you are interested: https://github.com/pypa/pip/issues/520 Binary eggs on Linux are broken (though probably less broken with some recent versions of Python), but on Windows they are fine; I'd rather focus only on installing eggs on Windows, and avoid a half-working feature on Linux.
 ~1 &amp; 1 &lt;&lt; 1 &gt;&gt; 1 ^ 1 | 1 I've always wanted to be a real hacker! :)
There's a [port](http://pytools.codeplex.com/wikipage?title=NumPy%20and%20SciPy%20for%20.Net), but this is all piling on the complexity and may not even work in silverlight, who knows :)
I try not to read the CPython source code because it is disgusting and terrible. Have you seen the collections module? sre_parse? Aieieieieieie. (And that's not getting into the C code, ohohohoho (not even most core devs can understand _sre.)). sre_parse is great. Functions hundreds of lines long using the style of Python 1.5, mixed in with useless ineffective code hacks as "performance optimizations". Who would voluntarily "read the source, Luke"? Bah!
And once you've got yolk you can do pip install -U $(yolk -U | awk '{print $1}') to upgrade all of the outdated packages in one shot, if you're into that sort of thing.
pip works on Linux though, so the [more generic ticket](https://github.com/pypa/pip/issues/492) should be fixed, in my opinion. But that one states that the support is broken because of missing metadata. So maybe we could look into that? EDIT: typo
There are plenty of great solutions already out there, multiprocessing module is part of standard lib for instance.
I agree with CPython code can be difficult, How about reading source code of `requests`, `flask`, `Django` etc ?
I did this. Here is proof of concept, I am working on algo to solve this dependency, I passed the link to core dev of pip, no response. here is the code [https://gist.github.com/1971720](https://gist.github.com/1971720). I raised as an issue in `crate.io` github repo too, seems like more complicated to solve, If some one interested we can work on it. 
That module uses processes, not threads. Yes, it has uses, but it's not *really* the kind of multithreading we're talking about.
I am more interested in this from the point of view of running web applications rather than giant numerical calculations, and the software-transactional memory model used here does have points of interest in that regard. You should be able to have a server that lets each request-handler believe it is running single-threaded while still reaping the benefits of multiple cores. It will be possible to coordinate access to shared data without locking up the whole system. Also, for what it‘s worth, for long-running processes, PyPy is generally better than 100x slower, since its JIT can optimise out the type inference, casting, and boxing. You might still want to leave your big calculations to the tried &amp; tested Fortran libraries, though. 
&gt; but you are enduring overhead on the order of two magnitudes beyond native code by using python based software in the first place, Not anymore. PyPy is pretty damn fast already, and will get a lot faster in the future. Even if there was that much overhead, increasing speed two/fourfold is still good.
What difference does it make to you, concretely? Just curious.
Me too. Also a huge fan of joblib, which makes multiprocessing much, *much* simpler for the average script.
&gt; The confusion stems from people using "Python" as a synonym for CPython. That might be because CPython is the reference implementation of Python language.
I failed, I can't watch the video, don't know why(I can watch "normal" youtube video, though). 
isn't pypy a tech demo, too ?
the header comes from the pypy-dev mailing list. This also means that potential readers understand the distinction between "Python" as a language and "CPython" as the reference implementation.
not exactly sure what you mean, its usually twice as fast as cpython for me for numeric code it tends to be orders of magnitude faster the only real issue left is extension support, which is being worked on 
I use it inside an Ubuntu VM with 1 gig of RAM on my single-core notebook. It's not exactly "snappy", but it's responsive enough to get things done.
I've been having a great time with KDevelop. Check out [these](http://scummos.blogspot.co.uk/2011/06/basic-list-content-type-support-in.html) [few](http://scummos.blogspot.co.uk/2011/09/kdev-python-argument-type-guessing.html) [posts](http://scummos.blogspot.co.uk/2012/04/improved-code-completion-in-kdev-python.html) to see some of the things it supports for Python.
Personally I prefer PyCharm after having tested Komodo IDE, WingIDE, Eclipse+PyDev, eric and Aptana. There's also [this](http://wiki.python.org/moin/IntegratedDevelopmentEnvironments).
vim: code-completion, speedy, syntax highlighting, project management, TextMate-style snippets, complete script-ability in Python and it has the best documentation of any IDE I've ever used, including a built in tutorial. Combine all this with an astonishingly flexible mini-language for code-refactoring and I think you'll agree that it's nearing perfection. [Additional: vim did 'distraction-free' editing before the Mac hipsters thought it cool, too.]
This guy here seems to: [udacity_really_did_teach_me_to_build_a_search](http://www.reddit.com/r/Python/comments/scczv/udacity_really_did_teach_me_to_build_a_search/) 
The only one I know of was from the 1.x days. Is there another multithread/multicore Python 2.x version?
Thanks. I'm doing Khan and Coursera right now but forgot about Udacity. :)
zed's style (as awesome as it is) does not work for everything. It's great for introducing concepts to the reader assuming they know almost nothing. other material like for libraries and frameworks usually starts from a very different assumption. What would be useful in documentation is explicitly stating what the authors assumptions are about the reader, and provide links to material like zed's learn xxx the hard way and other resources to provide the reader a way to meet the authors assumptions if they feel they aren't quite there.
It works with -r requirements.txt --no-index -f file:///... . The only bug is file:// doesn't accept relative urls. If that were fixed it would work completely.
I'm a long-time Emacs user. I'm just too used to the keybindings to not lose my mind using anything else.
I don't recall needing admin rights to use pip on my Windows machine without virtualenv. The Python directory is typically in the root directory and owned by the user, so you would normally have rights to write there. As for trashing one's machine... how is that even possible? I've never encountered these Python library incompatibilities that people worry so much about. Often it seems like virtualenv is a bit of voodoo that people invoke to avoid these hidden terrors, whether they're ever likely to bite them or not.
Python has faults, but none of those were very compelling. Most of them weren't really about language design either. 
awesome, thanks for posting!
Not that I know of. I was just thinking of Greg Stein's patch to 1.4 or 1.5. I wasn't thinking of 2.X vs. 1.X as being that relevant, but that could just be my ignorance of the innards. Of course, Jython doesn't have a GIL, and it's at 2.4.
PyCharm is really nice and actively mantained http://www.jetbrains.com/pycharm/
They are welcome to it. 1) The poker hand generator usses the worst algorithm I've ever seen (generate 1-13 and 1-4 randomly, combine them, and repeat until no duplicates in your set of 5. No-one with basic grounding in comp sci would have done that vs something sane like: Put 0-51 in an array, shuffle it, draw top 5. suit = int (value div 13), card = value mod 13. 2) It does not work, using a funny deck construction due to bugs. It had 14 aces and a weird combination of allowed suits. 3) They don't actually care that the hand generator uses a bent deck so long as the hands are valid (Well I sort of see that (modular design), but someone should care enough to really fix it... it's not exactly hard to write a hand generator) 4) The contest is for shortest (and therefore probably least testable) program that can test ofr a straight (5 cards in numerical order e.g. 8,9,10,J,Q), not "most working in shortest time" one. The judge is the guy that can't write a hand generator. It's everything bad about php in one package. Carpenters using rocks instead of hammers because it's all they've ever known and they appear to work (sort of). Haha. I loved that article BTW. http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/ ninja edit - [–]yarry333 1 point 60 milliseconds ago I kind of hope that here we have standards. If some one posted that, they would be downvoted to death and someone else would say "No this suck, use Udacity (or something) instead".
Not yet, but I'm a somewhat experienced python programmer and thought I'd go through the lessons to see if there was anything I didn't know. So far, quite a bit. Did you know you can index an array with a negative number? Magic!
Does the search engine store all of the data it finds in a MYSQL database or something? Or does it just store it in a variable and the data is lost once you end the program?
trashing ones machine is more likely on a linux distro or OSX due to the OS having tools that depend on specific version of libraries that are likely comparatively out of date. Windows machines typically don't have this problem. But I will give you one real example. At least as of a few years ago, Dell had provisioning software that depended on a very old version of python(2.2 I think) and would put it in the path, the very act of installing a more recent version of python so that you could use something like Mercurial would make the provisioning software non-functional which makes network admins not happy. Another example would be red hat, typically organizations have servers that have been running for a few years, and are not likely to get upgraded because the downtime would be too costly, and organizations have support agreements with red hat that they pay $$ for. If you go installing pip and then rogue libraries onto those things, you could render the server useless, and when you call red hat support they wont be very sympathetic since they only support certain versions that are officially distributed by red hat. This is not a python specific thing, every technology that has the ability to bring libraries/modules/headers as part of the run-time has this problem. If you haven't run into it yet, I would question how long you have been using a computer. what is unique to python is virtualenv 
&gt;Too often I hear from people trying out Python for web development, only to have them go back to PHP because "it doesn't require all kinds off bullshit. It just works" Gee, do you think that the results would be any different for any other technology for those people? No, it would be the same for Ruby, Java, .net etc....
Maybe its because I'm a linux command-line guy but I love virtualenv. Honestly, once I installed virtualenvwrapper, I actually found that it made my development life easier - it never felt like an extra step or anything. Getting it set up originally was a bit of a pain, but after that, I just log in, type "workon myproject", and I'm in the right place to run my development server (django), edit my files, and the like. So - the overhead: mkvirtualenv myproject (once per project) workon myproject (once per session) rmvirtualenv myproject (once per project, assuming you're deleting it) 
I agree with everything you say. That said, I solved it in 95 characters, including the word return, but not the leading whitespace. Then I wrote a sane deck generator, and a couple tests.
So? There's still value in making it easy to get started, even if Python's currently no worse than other languages and frameworks.
I couldn't agree less. Sure, it is one more thing to learn. That's true, but it actually learning everything else so much easier. There is a bit of initial setup and such (installing virtualenv and virtualenvwrapper), but once that is done, creating and destroying environments can be done with one command. The upshot is that it allows me to create a new environment for every crazy experiment I want to run, then just nuke it afterwards, so it doesn't crap up my system. The reason that I say this makes learning the rest more easily it that it truly allows you to *play*. I can make an environment purely to dick around with some library I found online. When I discover I don't like it, I just nuke the environment, and everything stays nice and neat. Plus, I can be pretty confident that my new hair-brained scheme isn't going to screw up my environment for that big mission-critical project. IMHO, play is hands down the best way to learn - the biggest reason being that its fun, and that makes you actually spend time using features that you might never otherwise experiment with. 
well I reckon if it were possible to make it as "easy as php", someone would have done it by now. I would also reckon that there is probably a significant downside to making it as "easy as php". But who knows perhaps we are witnessing brand new insight and the answer to all our prayers. Let's just make it as "easy as PHP" and everyone wins right? I'll gladly throw a $10 investment at it when it's ready. Let's take it one step further. newbs shouldn't have to type anything, it should just do whatever they imagine, it should just work. THE TEXT EDITOR IS AN ANTI_PATTERN(for beginners) I mean it's 2012, we have more computing capacity in our pockets than I had on my desk 15 years ago. WHY MUST I STILL TYPE SHIT!!!!?????!!!!!
My retired Dad did (with no programming experience since doing some assembly in the 70s). He had a blast. 
Every now and then I check out some IDE's to see if I find something interesting, but I always end up going back to VIM. From the IDE's I've tried, I think I liked SPE best. (http://pythonide.stani.be/)
Why can't you install source on Windows? 
Thank you. Keep up the good work!
TIL about udacity. Thanks OP! I'll start now and hopefully will complete it in 7 weeks. I have to juggle work and life in the mean time, but seriously thanks a ton OP about this!
PyOhio is one of the largest Python conferences in the Midwest, and the largest entirely free Python conference anywhere. PyOhio 2012 will take place Saturday-Sunday, July 28-29, 2012 at the Ohio State University in Columbus, Ohio. See the link, or message me here for more info.
Make sure you don't have https everywhere running, it will interfere with their embedded videos.
One concrete difference is if I'm working in the interpreter, I can't just fire off a multithreaded calculation. I have to instead write a separate script, then invoke multiprocessing on it. Then I have to output that data somewhere and read it back into my interpreter session to manipulate it. For me in particular, a single common calculation takes 40 s or so, but often I want to run a set of 10-20 options. If I could just spawn 8 threads to do it, I could be done in something like 80-120 s, rather than either waiting the full 400-800 s or bothering to write a script. 
I'm on unit 5 of 7. So far it's been the most effective learning tool I've seen with python. 
This uses Google App Engine's datastore, which is similar to a MySQL database. I designed the crawler script itself to store the data as .csv files that I uploaded to the datastore. In the time since I wrote this, I've learned how to skip that step and design the crawler to run as a scheduled cron job every once in a while.
Made some changes to the highlighting. Let me know what you think. [Here](http://blog.tankorsmash.com/?p=249) is the site
Hey better late than never but I changed the formatting! Check it out [here](http://blog.tankorsmash.com/?p=249) and let me know what you think
&gt; I didn't say "as easy as PHP" I didn't say you did. I was elaborating on my original reply for your benefit. Get the fuck out of here with you debate nerdism, this isn't a debate this is a discussion. &gt; The question is, how simple can we practically make things? You tell me. all attempts thus far have failed(presumably since we are discussing it). And I personally have no desire to cater to php users. But I am curious to hear your ideas. And then tear them apart. :) And I find the current methods + best practices in my experience have been easy enough that I taught children how to program and their environment was on a usb drive. 
then again, some parts of the standard library are pretty nice code, e.g. [doctest.py](http://hg.python.org/cpython/file/99ef4501205b/Lib/doctest.py). also it’s generally a good idea to look into the source of stuff you seek to extend/build upon. anecdotical eveidence includes me writing a bunch of markdown extensions. reading the source made me understand how everything works internally and lead to pretty minimal/elegant code that used as much as possible from the library without rewriting stuff that was already there.
I propose we use projecteuler! http://projecteuler.net
Compilers in general are a pain on windows.
&gt; Get the fuck out of here with you debate nerdism, this isn't a debate this is a discussion Can you please keep this discussion civilized? We're not in kindergarten here.
Terrific. There seems to be a redundant comma in the payload map, though.
Just because Ruby, Java, .net, etc get it wrong, doesn't mean Python has to get it wrong too.
Mr. Barrel T. Roll ?
Skynet.
Right! I had forgotten that Jython didn't have a GIL. I think Jython is 2.5 compatible?
Finished it, loved it! A great experience!
I've opened that link after having worked for quite some hours and couldn't bear to read any further after I've read this: "Learning how to cd in the terminal" Seriously, a person who's not capable of understanding 'cd' in a terminal emulator on any *nix or in cmd on Windows shouldn't be learning programming in the first place. They'd have to learn some basics first, not programming. That's like saying you're going to do scientific research without having studied math and without having learned to read &amp; write. Also, saying virtualenv is an anti-pattern is like saying breathing is a crime against life. How the heck am I supposed to insulate myself from the load of crappy &amp; old packaged Python libs &amp; tools found in various distributions, if not by using virtualenv? Don't get me wrong, I do appreciate the efforts and the time of the people who've worked on those, but chances are that a lot of Python packages have evolved a lot since someone last bothered to update them. How can you explain to someone who's a beginner why Python is still a good language when the packages they find in the repos of various distributions don't work with other packages or when different projects require certain versions of some libraries? I can't really "sell" python to someone by telling them "see, this language is great, but, you have to check and guess which versions of the packages from the distro's repository are OK to use and which aren't; you will also have to remove some of these and manually reinstall other versions of these packages when you have some kind of chunk of code which requires other versions of these packages". Virtualenv is a good way to illustrate why it's important to have a stable set of libraries during the lifetime of a project and not have to rely on the distribution's packages. Not using virtualenv is like trying to rotate the earth around the socket to screw the lightbulb in it.
[Take a look at the struct module.](http://docs.python.org/library/struct.html)
It sounds like [ord(c)](http://docs.python.org/library/functions.html#ord) is what you are looking for.
Please just search reddit for the term IDE, and check the box beneath the search box for limiting your search to /r/python if desired. You'll find more information and opinion on this than you could possibly ask for. Meanwhile, shamelessly shrugging off what I just said... I've found Wing IDE so powerful and useful that it's actually worth the price. I'm an open-source and free software enthusiast but these guys are doing such a good job, they're so responsive to help requests and bug reports, that I actually don't mind paying them to work on the IDE full time. It's that good. It's pretty close to having all the power of PyCharm but with a very responsive UI. (I think it backs off just a few percent from having all of PyCharm's introspection and code-analysis powers, in exchange for remaining fast &amp; crisp no matter what). Wing works just as well on Linux or Windows. So far the only bugs or complaints I've ever had that remained longer than a week or two have been underlying problems with GTK, and minor ones at that. Of course I also use emacs a lot when I'm in a terminal-only situation. There's no substitute for being well versed in vim or emacs for that reason alone.
yeah that helps a lot thanks!
As much as I love Javascript (Honestly, I do. Read "Javascript: The Good Parts") I sure as shit don't want it to stick around until I have *kids*!
Thanks for the link. Not sure why you got 3 down votes. But I appreciate it. I played around with the libraries last night. No problem installing and the examples are excellent. I especially like the decision tree functions. I've never seen this in an AI library. I was surpised they didn't have neural networks though.
Precisely that is a generation expression, not a generator. The `yield` syntax used for functions that _create_ a new generator _instance_.
Yes, I was in the first "hexamester" that went up a week at a time. It finished about a week before it opened for people to take it at their own speed. Why do you ask?
Experienced programmers should do Udacity CS212 with Dr. Norvig.
Some other cool features in this release include intellisense when overriding a method from a base class, intellisense after raise statements for exception types, as well as some improvements to the core intellisense engine to give more specific results when calling functions with different types from different call sites.
Actually [the plan now is to implement the low level thread module](http://morepypy.blogspot.co.uk/2012/05/stm-update-back-to-threads.html) instead with the addition of the construct with thread.atomic: This is enough to allow the implementation of the transactions module.
Cheers dude - I brought it. 
Yes, but why? Can't Windows compile C reliably? 
Because it doesn't come with any compilers?
Did you read the link? The link does discuss thread.atomic.
Has this changd since the last time you posted about it 3 months ago ?
My point was that it's vanishingly rare for an update to break compatibility, but it's sadly all too common for a package to feature bugs and security holes which linger on due to the problem of updating every instance of that package on a system. 
Link is missing.
/facepalm you're out of touch. but I don't have the energy to explain it to you anymore. 
I agree, however I haven't had to rewrite portions of Python code into a lower level language yet. Python is fast enough for everything I've done with it in the last 8 years.
Keep up the great work! If only there were a way to debug inside called scripts... but you know what? I'm just insanely happy that breakpoints work.
I enjoyed [WP-Syntax](http://wordpress.org/extend/plugins/wp-syntax/), but folks around here didn't like the changing fonts, so I switched to [SyntaxHighlighter Evolved](http://wordpress.org/extend/plugins/syntaxhighlighter/) which is what is on there right now. Lemme know how it looks on your desktop
start with [Scrapy](http://www.secdev.org/projects/scapy/build_your_own_tools.html) and start analyzing the wifi signals
Will start reading now. Thanks.
You don't need Sublime Package Control to install plugins, you can just put them in the appropriate folder. SPC simply makes finding, installing, and managing plugins _easier_.
&gt;pythonista Oh, come on now.
Suppose it was 20% slower... Regular Python multithreaded performance: 1 core: 100% 2 cores: 100% 3 cores: 100% STM PyPy multithreaded performance: 1 core: 80% 2 cores: 160% 3 cores: 240%
Would love to see this talk. Having started in Django, and using Flask, I see a lot of commonalities between the two. Even Flask's documentation references Django often. I kept getting the feeling -- is Flask trying to be like Django?
They're not unrelated, because if you needed to set up the virtualenv to develop and test that script, then you can no longer just run that script without also setting up the virtualenv. Even if virtualenvs came as part of Python (which they won't, so long as Python 2 is what most people are using) and if all Python IDEs supported them (which they don't, and probably won't for years), it still leaves you with an executable file that doesn't work unless you did the magic incantation beforehand. So now you have to give them a wrapper file that sets up the virtualenv before running - except on Windows you can't even relocate a virtualenv anyway so deploying this is a real hassle. Sometimes it's as if people are only interested in using Python if it's a server app running on Linux which we deploy to a small number of places, and if everybody else has a worse experience learning and using the language because we need to account for Red Hat systems still running Python 2.2 or whatever, so be it. That can't be sensible.
On the contrary, I develop and deploy Python servers daily, on shared servers, without virtualenvs, and they work just fine. I'm sorry if your experience has not been as smooth!
[scrapy](http://scrapy.org/) =/= [scapy](http://www.secdev.org/projects/scapy/)
Is putting the application on a web page really necessary? Can you just distribute the python application itself? Will your intended audience have trouble installing python and numpy? What graphical toolkit are you using, or is it non-graphical? I'm only asking because it looks, to me, like you're trying to solve the wrong problem. 
I had every intention of having a manual switch. Just left it out for pure simplicity of what I plan to accomplish with this issue. Didn't want any sort of confusion. As for your second part, as simple as that is I had never thought about it as such. Thank you very much for that. Definitely gives me something to look for. I do plan on doing bluetooth if at all possible due to the simplicity of it, but wifi is certainly an option as well. It is just more difficult since bluetooth seems to be able to permeate my walls a bit better than wifi. (I have concrete walls on all 4 walls in my room) and the network inside the remaining portion of the house is not the same as in my room, which I know could be easily set up to work as well, but that is just more work than I would want to do because that network is constantly changing due to roommates tinkering with it all the time.
so you have admin access to those servers then? because in my experience, you have to negotiate with an entirely different group to get your stuff out in production, and that is where the struggle comes in since that department is responsible for the stability of production and is risk averse thus not running anything besides stock redhat for better or worse. That's the first scenario I was Illustrating. The other was a similar department that is in charge of enforcing licensing so that when the BSA comes they have a fighting chance in an audit. The software used for that(provided by dell) uses python 2.4 on the path. And the act of installing a newer version of python (by default) will break that software which was a situation I was describing about how one might trash their system. I never said you coudn't get around it, or fix it, I'm just saying that the happy path(double click exe WIN) does do damage. This is 2 scenarios to answer your question about "how is this even possible?" How hard is this to understand guy? Do you deny that these situations exist? Or are you just being contrarian because it's friday. Because I was merely trying to answer your question "how is this possible" not spend days splitting hairs and determining who has the bigger dick. /dead horse
I didn't even notice that his spelling was off. Nice catch though. Note taken.
I recommend using SublimeRope instead of CodeIntel. It gives good autocompletion, plus some refactoring and documentation tips (Python only). For those on Windows, the Tortoise plugin lets you integrate SVN/hg/git at once.
Ahh, for IronPython you'll get a slightly better/different experience if you go into project properties and change the launcher from the IronPython (.NET) launcher to the Standard Python launcher. You should gain good Python debugging including variable inspection, but you'll lose .NET interop debugger (stepping from Python to C#).
Get off your soapbox. You're completely off-topic.
It is common knowledge that interpreted languages are generally much slower than native code.
Please let me know what you guys think! The formatting is a bit different, so I'm just looking for feedback on what you guys think.
Thanks for the recommendation. I am using SublimeCodeIntel and it is not autocompleting some modules that I installed with "pip".
I think this is a shame. They should've simply fork the project. Hijacking the name and the website ??? c'mon...
It's low.
Paying money for a text editor just feels ... dirty
Good god, what sort of shit is that. Nobody wants to use something hijacked. Nice job splitting your community.
You'll likely to have problems as well with SublimeRope, unless you correctly setup the ".ropeproject/config.py" file for the "project" you'll be working on (instructions on SublimeRope's documentation). Take care!
Pypy vs CPython : http://speed.pypy.org/ CPython vs C / C++ : http://shootout.alioth.debian.org/
I actually don't use virtualenv for production anyway, but there are ways to have some packages cross environments, if you prefer.
I think it also keeps your packages up-to-date.
Hmm, this is interesting. Bits and pieces of it remind me of fabric. &gt;&gt;&gt; ls() u'build.py\ndist\ndocs\nLICENSE\nplumbum\nREADME.rst\nsetup.py\ntests\ntodo.txt\n' This is interesting because it's the same thing as 1.9.2p180 :001 &gt; `ls` =&gt; "Code.tgz\nDesktop\nDocuments\nDownloads\nLibrary\nMail\nMisc-Arch.vdi\nMovies\nMusic\nPictures\nPublic\nSites\nUntitled.png\nVagrantfile\nVirtualBox VMs\nbin\ncatalina.out\nconfig\necho\nindex.html\nindex.html.1\nindex.html.2\nindex.html.3\nmbox\nmindterm\nnohup.out\npackages\ntemp\nvagrant-boxes\n" in Ruby. Instead of going to the trouble of recreating all these shell commands, why don't we just make it easier to execute shell commands (which other people have done). I was expecting them to be more Pythonic - for instance, `ls()` should return a list, not a newline-delimited string.
because that would require the library to *know* all possible programs. in your case, all you need to do is &gt;&gt;&gt; ls().splitlines() ["foo.py", "bar.py", ...] And as far as listing directories goes, the path class already exposes this in a pythonic way: for subpath in local.path("/foo/bar"): print subpath Or using globbing: local.path("/foo/bar") // "*.py" Note that Plumbum is unaware of `ls` or `grep` or any of those -- it just uses `which` to find their absolute path, and the invocation syntax to run the process. from plumbum.cmd import ls is the same as from plumbum import local ls = local["ls"]
Wow, thank you for these! That's a really nice selection.
&gt; because that would require the library to know all possible programs. ~~But it already does have that requirement!~~ from plumbum.cmd import ls &gt; from plumbum.cmd import ls &gt; is the same as &gt; &gt; from plumbum import local &gt; ls = local["ls"] Wait, those things aren't actually defined? What black magic is this? I still don't see why I should use this.
Readme now has a list of snippets.
Anyone knows why this and also fabric don't do shell escaping automatically? I really liked the idea of local/remote directory navigation... I miss that on fabric.
Thanks, good catch, it looks like the formatting doesn't adjust the line spacing. I don't know how to fix that, but I'll look! If you're interested, I've put up a second part, for [downloading entire galleries.](http://blog.tankorsmash.com/?p=266)
I didn't see this in the docs (maybe I missed it), and it might be out of scope, but it would be helpful to have a pattern for auto-provisioning (i.e. programmatic retrieval of the API key and config file creation).
Classifiers say it's in alpha, FWIW
Thank you. However none of these say whether or not the support the feature I require.
In Emacs with python-mode, there's an "IM-Python" menu added which lists all classes, methods, and functions (in source code order, not alphabetical). Choose an item to jump there. Emacs requires a learning investment, but it pays off. It can do just about anything. Other editors may have the functionality you're seeking. I can't speak for them.
Usage wise, yes. Feature wise, no.
Geany. I absolutely LOVE Geany. It does exactly what you want and also offers some limited code completion.
vim?! emacs?!
See the note at http://plumbum.readthedocs.org/en/latest/local_commands.html These things are *not* predefined
&gt; Never save your files with hard tabs characters in them. Sigh...
VIM can do this with taglist plugin included: http://vim-taglist.sourceforge.net/screenshots.html This functionality can be achieved by any app that is able to work with ctags application: http://ctags.sourceforge.net/
[For new projects, spaces-only are strongly recommended over tabs. ](http://www.python.org/dev/peps/pep-0008/#tabs-or-spaces)
Well, yes, except those are different benchmarks. You can look up stuff on pypy blog where pypy is faster than C (rarely), but it would come as 2-3x slower on numerics normally. On non-numerics it's even closer, but there are no comprehensible benchmarks that would cover both C and python.
I use several computers, often over ssh. I love the consistency and power of vim (and other, non-gui editors). And the ability to play with the code, compile it yourself on minimal operating systems, and the ability to reinstall and try new things without worrying about a license. A text editor just feels like something that should be free and open source, I have a hard time wrapping my head around paying money for one. 
The scope of pep 8 is the standard lib. Furthermore it says that it doesn't matter what you choose as long as you're consistent about it. I should've said from the beginning that I don't want to discuss pep 8
It's also sometimes wrong (like a lot of common knowledge). Look for example at luaJIT
The main tutorial for matplotlib emphasises the stateful pyplot API which is similar to matlab, but it's based on an object oriented API. You can use figure and axis objects without relying on global state. Making a plotting API that's powerful and intuitive is very hard. It's simple enough to cover the basics, but once you get into grouping data, multiple axes, log scales and so on, I've yet to see an API where I don't need the manual handy.
I completely understand. If you're working via terminal and compiling from source on minimal systems, then you're working under conditions in which vim or emacs really shine. I am a long-time emacs user myself, and hear what you're saying on every level. I've also been a strong proponent of open-source software. At the same time, when I give some commercial programs a try, I can see that there is a level of polish that is sometimes worth dropping the coin. SublimeText is one of them - I've used countless IDEs and text editors, and SublimeText is the first one in a long time I've really *enjoyed* using. There is a lot of overlap with other programs, specifically Notepad++. I think N++ probably has more features out of the box, but it's hard to put my finger on it... Sublime is just really, really nice to use. My 0.02.
&gt; It doesn't work well for standalone scripts, Actually if you use setuptools "console_scripts" feature it works great. These scripts are usually installed into the virtualenv bin dir, and are tied to the virtualenv (their hashbang line points to the virtualenv python). &gt; I don't agree we should make those cases more awkward to fix a few rare problems with package compatibility on shared machines. I'm not really sure we're sharing the same problem. I support the Pyramid web framework in IRC most days. Let's imagine that someone installs Pyramid on their system on Monday (without a virtualenv) in order to try it out. That all works fine. On Tuesday, they install Pylons because they want to check out some application written in it. Now, both Pyramid and Pylons rely on WebOb. Unfortunately, for better or worse (but in *reality*, not in some theoretical perfect world) the most recently released version of Pyramid and Pylons each relies on a different version of WebOb. Without a virtualenv, the user can install some version of WebOb globally, and this version will then be used by both Pyramid and Pylons. Depending on the version he chooses to install globally, it will cause either Pyramid or Pylons to behave contra-documentation in some circumstances. If the user is green enough, or even has moderate experience with Python, he'll be very confused when he runs into the issues. If he's lucky, one of Pyramid or Pylons just won't work at all, and it'll be obvious (if irritating). If he's not so lucky, some API call his application uses will behave differently on Monday than it did on Tuesday, but he won't know it unless he has very carefully written functional tests. Given that he isn't using an isolated environment, it's not very likely he has very carefully written functional tests. I disagree that this circumstance is rare because I help people deal with it almost every day. &gt; But if you truly need isolated state, then that should be something intrinsic to the app (eg. modifying sys.path with relative paths), not something you set up outside the app (eg. virtualenv). Although I could be sold on a solution that lets the app set up its own virtualenv as the first step of execution. I use buildout+virtualenv myself to make application installations isolated and repeatable. 
eh, as much as I love emacs, the speedbar is kind of annoying, seems you can't do anything without using the mouse to select a class or a function. Though I could be missing something obvious. I just use search and rope jump to definition or rgrep to hop around the code it works pretty well
Thanks for info. This didn't load for me (errors, which I wil bug report later), but the screenshot pointed me to gedit source code plugin, which did, and uses ctags.
Not exactly hijacking the website if the actual owner of the website went along with them. The name of the project didn't get hijacked since they changed it to PyJS.
what do you mean? there's no need for shell escaping. i.e. &gt;&gt;&gt; echo("$foo&gt; &lt; | &amp;&amp;bar") u'$foo&gt; &lt; | &amp;&amp;bar'
IDLE is (in my opinion) worse than GEdit or notepad or whatever free editor Macs come with (XCode/Dashcode I think is a free download from Apple as part of the developers kit) ... why and how do you use it?
I never understand these types of things. Seems like more indirection than it's worth. Why not just: from somelib import run res = run('ls | wc -l') res.return_code res.stdout etc. I just don't get what the quasi-shell python DSL gets you, what benefit it has. Do people really have so much trouble just opening a subprocess? 
because that *relies* on the shell. it won't work on windows, say, and it's vulnerable to all sorts of string-escaping attacks. besides, plumbum does much more than a simple Popen replacement -- path abstraction, cli toolkit, running commands over ssh, etc. as for being a DSL -- that's exactly the point -- use a shell-like DSL in python, so there won't be any need to write and maintain shell scripts.
I'd appreciate that.. also if you have any ideas for improving it, I'll do what I can. I've submitted pull requests upstream to the guy who made the gedit2 version, but aside from merging my initial rewrite for gedit3, he's been pretty silent.
I was confused at first because that's exactly what requests.async did. It appears that async has been pulled out into a separate package ~~due to cross-platform issues~~ for a separation of concerns.
Post it when the talk or slides are online.
They benchmark the same alogrithms written in the individual languages. Different parts of the language are slower than others, such as how Python file IO and string parsing can be as fast as C++ but numerical computations are 50x slower.
Python sounds like an odd choice to embed if none of you have used it before. Why not Lua or Tcl?
Thanks! Nice to know that :)
Thanks for mentioning console_scripts, but I must admit that after scanning the top couple of Google results for it I have no idea what it actually does. Does it require that the software is packaged up first? &gt; the most recently released version of Pyramid and Pylons each relies on a different version of WebOb. Sounds unfortunate. But why are different versions of WebOb being deployed that break compatibility? Is there an attitude of, "everyone uses virtualenv, so it doesn't really matter if I break stuff"? In other programming ecosystems, you might typically have the runtime which is shared, and some libraries which are bundled with the app. In particular if I have 3rd party libs that might be version-sensitive then ideally I want them in source control, not coming from outside. (Also, will PyPI keep old versions around forever?) pip seems capable of installing packages in your app directory with the --target option, so I'm surprised that this is not more widely used by Python programmers. Incidentally, Pyramid is the only situation where I do use virtualenv, mostly because I find myself asking for help a lot and when in that situation it helps to be following the instructions to the letter. 
This guy is doing more than HTTP wrong.
he is one of the cleverest folks out there, he code is awesome. 
As fortune may have it, value is in the eye of the beholder. Happy circlejerking, president-of-the-fanclub-guy.
Thanks, I'll just wait until the fallout from packaging wars settles down before coming out of my fallout shelter. It'll probably be distutils4 by then.
I'd like to see more of his idea on opt-in streaming API. 
I agree. It was a lengthy article which I wrote in one take. I thought about it, but only had the energy (my fingers started being dyslexic...) to add a small note about it and link to the appropriate section in the distribute docs... ;) Maybe I'll edit it in later...
&gt; But why are different versions of WebOb being deployed that break compatibility? Is there an attitude of, "everyone uses virtualenv, so it doesn't really matter if I break stuff"? No. Pylons gets less attention than Pyramid these days and its most currently released version depends on WebOb-as-of-a-year-and-a-half-ago, whereas Pyramid won't work with WebOb versions older than a year or so. Time marches on, some things don't keep up. &gt; will PyPI keep old versions around forever? Usually people are kind enough to leave old versions of stuff on PyPI. I don't depend on it though. For customer deployments I don't use PyPI. Instead, I create a private index server and put all the right versions of stuff up on it. Then I use buildout+virtualenv to deploy that code (along with supervisor, whatever version of database stuff needed, etc).
Indeed. You used a lowercase P. 
Does ZeroMQ guarantee exactly-once delivery?
2 weird things. When he goes "a level up" around the 1/2 mark, he's actually going a level less abstract. To me at least. And when he says "HTTP works where TCP doesnt", not sure I got that either. Correct me if I'm wrong, but 99.9% of the time, HTTP runs on TCP. I guess it could -kind- of run on UDP, but the whole "packets may not show up in the right order" thing kinda puts a monkey wrench in that. Was his point more that HTTP does stuff that TCP doesn't? Yeah, no kidding. In conclusion I didn't really get anything out of this. Slides without the speaker do very little for me, and this topic seemed pretty nebulous at best. No real point, just sort of a vague "abstract away from implementation details." REALLY?
Did you just say that with non-numerics code, pypy is even closer to C in speed than numerics code? I thought that numerics code is pretty much the best kind of code to jit.
Did you skip the part where fijal said that numerical computations with pypy are 2-3x slower than C? Nothing like 50x. The topic here is not CPython.
&gt; I didn't really get anything out of this. Yeah me neither, I might be missing something obvious, but the only thing takeaway I had is that the streaming stuff breaks HTTP or makes dealing with HTTP(hard), I don't disagree exactly, but I consider that an unusual case. methods of Streaming was bolted on to HTTP which was designed to be a stateless protocol originally. So in regards to HTTP, anything not stateless, I would consider a hack. Hacks are always a PITA. I wouldn't write code that tried to handle both cases, I'd write handlers that expect either a straight Request(get/post)/Response and raise errors otherwise or I would write handlers that would expect streaming and raise errors otherwise. Though in my line of work, the latter case is a rarity. Regardless of the streaming problem, HTTP can be regarded as a nice flexible(and ubiquitous) message protocol. In [1]: import webob In [2]: print str(webob.Request.blank("/", method="POST", body="this is my payload", headers=dict(my_header="this is my header"))) POST / HTTP/1.0 Content-Length: 18 Host: localhost:80 My-Header: this is my header this is my payload In [3]: print str(webob.Response("this is my body", headers=dict(my_header="this is my header"))) 200 OK my_header: this is my header this is my body do whatever you want with those messages. stuff them in a message queue, send them over tcp, pass them to a function..., build a higher level protocol, or whatever. The advantages being, you can read this stuff or type it by hand fairly easily, and it is supported by pretty much any language you might need to integrate with. 
I tend to agree. From the article: &gt; The core problem is that I never added enough abstraction to the libraries that were implementing HTTP. While there are request and response objects, neither are entirely independent of the actual ongoing HTTP communication. This can be interpreted in a number of ways: My architecture is bad; I don't like the architecture; I don't understand abstraction; I have an incorrect understanding of abstraction; I am having a hard time encapsulating the things that I think should be encapsulated.
Nothing forces you to write it the way you do in your first example: p1 = pipe(ls, grep["\\.py"]) p2 = pipe(p1, wc["-l"]) result = p2() Or why not just: run = pipe( ls, grep["\\.py"], wc["-l"] ) result = run() My only contention with the DSL, I think, is that you can't fully replicate the shell syntax. So you get a bastardized thing that just looks messy, e.g.: (ls | grep["\\.py"] | wc["-l"])() And now instead of having to know just shell scripting and Python, you have to learn this quasi-shell syntax as well.
heh, I was going the more Jesus "the Christ" route, it being Sunday and all, but that works too :)
I understood: * He developed a "web" application. (It uses HTTP request/responses objects everywhere). * Realized that HTTP is not the best/only protocol to be used by the application. * Oooops. All my application code relies on using HTTP request/response objects. * Conclusion "I am doing HTTP wrong". I think his conclusion is not correct. It should have been "I am doing MY APPLICATION wrong". His application is/was wrong by relying too much in the communication protocol. I agree that "A Level Above HTTP" is required. But I think you should not try to create an abstraction that fits all data transfer protocols. This level above is your web-framework! You web-framework should allow you to write your application in a way where your application code does not rely on HTTP. Yes, I just said that your web-framework should allow you to write application code that does not rely on the web/http! Sometime ago I started playing with an idea of a [web-framework](http://packages.python.org/avalanche) where you write application code without using HTTP Request/Response objects directly (of course you need some configuration "to glue" your application code to HTTP). 
hmmm... you're absolutely right. I never ran into this. I actually nicked the idea from the IBM page (http://www.ibm.com/developerworks/opensource/library/os-pythonpackaging/) I ~~'ll make~~ made a note about this in the article. Thanks!
Awesome, thanks for the mention and for the great article.
I started reading your documentation but the Comic Sans header began grating on me.
Why use a table of the relevant figures when you can use a poorly laid out and labeled graph, right?
SPDY?
I do [something similar](https://github.com/mellort/reddit_api/blob/master/setup.py#L8).
indeed, numerics is the best kind of code for a jit. but it's also the worst kind of code for dynamic languages, when they're interpreted. So while the relative speedup from CPython will be the biggest in terms of numerics, the difference with C might be smaller.
"Fuck XML." -- N.W.A.
Enjoy your negative karma, president-of-the-idiots-guy.
Awesome. When I've had to lookup weather before I used pywapi and it worked pretty well, but this is so simple there would really be no reason to.
Why do you think I dont know him. Because I disagree with him and still uses his software? That's ridiculous... I know he is a great developer, I use and recommend software written by him. Jinja has nothing to do with the article. When he himself write an article saying that he is wrong in some way, why is it so outrageous when I disagree with him for the solution of his problem? Knowing the author actually reinforced my opinion. My view that the problem is that application code knows too much about HTTP is specially problematic on Flask. Because on Flask Request/Response objects are available as globals. (Between I use Flask for an application I have)
The the summers before my junior and senior years of high school I was lucky enough to participate in a research project with the head of the computer science department at a local college. I would strongly encourage you to ask your guidance department if there was any similar type of opportunities available to you.
yes: http://www.zeromq.org/topics:requirements-for-reliability
Cool. However, the degree sign may cause a problem if your source file isn't encoded properly. You can change that part of the string to "\N{DEGREE SIGN}" and it will work in any encoding. I found other unicode reference names [here](ftp://ftp.unicode.org/Public/5.2.0/ucd/UnicodeData.txt).
At one point of time you have to decide on the level of abstraction. I think it's very natural to find later on that the abstraction in some areas of your code wasn't adequat. For a non-trivial code you can't get the design right in the first place, because the problem cannot be fully understood without a solution.
&gt; have to wait for the browser to timeout. He sepecifically said browser there.
Python noob here....how can I modify this to not need a location argument? I.E. default to whatever city I set it for so I can just double click and get the weather?
That sounds like an architecture problem. You have a solution, but it turns out some bits of it are in the wrong layer. Let's say you have a process that needs to connect to a remote HTTP service and you want to use "keep-alive" so you don't waste a lot of effort on network handshaking. But the code that parses the responses assumes that a failure to get a valid response is a critical failure and always shuts down the HTTP socket. This works okay for a while, in fact it works great, because the process only ever makes one HTTP request. But the day when you try to add more requests, and each request has a small chance of getting an invalid response, you end up with a process that is slow at unpredictable intervals. The architecture problem is that the code that *sends* the HTTP requests should be isolated from the code that establishes the connections, and the code that parses the responses shouldn't even know about the socket, because you connect those things at a higher layer of code.
http://pastie.org/3908614 Fun stuff. Chokes on some things like files that are too big, but I don't really care
Hi, I am the post author. This is a good data point Armin. However I wonder about the effect on the dropoff rate during the tutorial, which is harder to measure. It is entirely possible adding virtualenv had zero effect on this rate, but it would be neat to have more data there.
I tried that but it didn't work.
Hi, Thanks for your feedback. In an ideal world everyone would learn the basics first. I would only point out that, as I see where I work every day there are a large number of people who are motivated to learn by wanting to build the end product (a blog, a website, an API etc) and try to work backward from there to learn the things they need to learn. It's not that these people are not capable of learning the cd command, it's just another thing that they have to learn to use to make their blog show up at mycoolblog.com, and the terminal is intimidating. The goal (as I see it) is to get them to a Holy Shit I made something cool and it works moment as quickly as possible; this is what gets people excited about making things and helps them persist through the inscrutable error messages and bad configs and all the other stuff that sucks about getting started. The more roadblocks that are in the way, the less chance of getting to the Holy Shit Moment. At least for me virtualenv seemed like an unnecessary step in the early going (on a Mac). Valid points have been raised that it might make things easier for users of other distros.
We've used a similar idea at work for a few years now. I'll admit it has worked well when we decided to support various protocols on the same application code path. However it's also been a nightmare because it adds layers upon layers of boilerplate when dealing with our main protocol: HTTP. I don't think the idea is to blame, mostly our implementation which was not clearly thought out. A framework that would provide such an abstraction for free would go a long way if you needed it. If not, stick to the current level of abstraction most frameworks provide already. In fact, you can implement higher level of abstractions easily with some of them I'd say: CherryPy and flask come to mind for their flexibility.
Wow. Awesome! Gonna give this a try tomorrow. Any useful "lessons learned"?
Thanks for the feedback. I agree that virtualenv is a good tool for this purpose - messing around with things without destroying mission critical projects, or to mess around with new libraries. However the beginning programmer is more likely focused on learning the syntax or getting their one project started and for them I don't know that virtualenv is necessary - that is more the target audience of this post.
Think about real time browser games. That's not using the browser for what it's intended and certainly a use case. 
Not really, fairly standard web scraping. Should be a useful utility to have once I clean it up a bit, though.
 metar -d {local icao-code} anyone? 
Requesting the weather for Paris fails to parse because of an accented character in the response. Also: the response does not indicate an encoding. Somehow I doubt this script works with any other alphabet but straight ASCII.
I also came to somewhat same conclusions about how to restructure app to not to be so tied to HTTP/WSGI semantics — the result is http://routr.readthedocs.org/ where you can specify how you map HTTP to your application API — plain functions, no request object which encapsulates too much state inside and thus no difficulties with testing, maintaining, composing such code.
The tricky thing is that if you do `import packagename.version`, it will load `packagename/__init__.py` as well, and will fail if it can't load that (e.g. if a dependency is missing). You can temporarily modify `sys.path` so you can just do `import version`, but that's not really prettier than using `exec`.
i think what vph might be saying is that you are violating jinja2's license, in that you agree to agree with everything the author says/blogs/writes/does into perpetuity. pretty standard clause for OSS software AM I RITE? /kidding
create a little script that does "python weather.py $yourlocation" and execute that one.
I'd just like to add this is something I did really quickly because I was bored and had just noticed google's weather api :) It's by no means intended to be solid or featureful.
It does :) See my reply [above](http://www.reddit.com/r/Python/comments/tlaof/weather_from_the_command_line_quick_weather/c4nu3a0).
... and what if it's utf16? :P
you're welcome! :)
Yes, definitely there is! As the title said, it was a quick hack. I got the JSON from another script (Not the python one, a modified PHP I wrote some time back) so instead of processing the JSON from python itself, I wrote a small bash script to extract the relevant information (User ID) and download (wget) the images at one go. Could have used Python to both extract and download, but the json structure was too simple and I do prefer wget for mass downloads. Thanks for pointing it out. I'll clarify in the article. 
so how would you do it? any good references?
It depends on what you're generating the PDF from. Are you converting a text file? Are you dumping the output of a python script into PDF format? I don't really have an answer for you because the work I've done with PDFs has more to do with getting stuff out of them than building one from scratch. My only advice is this: if you can settle for another format, do so. PDF is a huge pain. EDIT: stackoverflow might have better answers.
What I'm going to do is get some data from the database, properly format it, and write it to a PDF file. Thanks for the advice. I'll see if I can bypass this PDF thing.
&gt;I understand I can search the Internets for a solution, however, I'd like to know your answer in case you used such thing before and not just something that you stumbled upon. Everyone's requirements differ. I honestly would search, and try and evaluate a couple of options.
The answer from Google is encoded in latin1 but the returned XML does not specify any encoding. You can fix that by adding: xml=urlopen(url).read() xml=xml.replace('version="1.0"', 'version="1.0" encoding="latin1"') Since you are also printing the city name you need to change your stdout to utf-8 or something similar that supports accented chars, e.g.: import sys reload sys sys.setdefaultencoding('utf-8') 
I've heard good things about that one, yes.
I hate the coordinate system though. It places (0, 0) at the lower left corner. I had to build a custom wrapper around the canvas object providing a subset of the functionality for me to sanely work with it.
I'm using their Platypus high level page layout library and it is both easy enough and it does the job for me.
Sadly, that is the standard coordinate system for PDF - don't blame the chaps at ReportLab :)
I've done a bunch of mucking around with Reportlab, and had a few back-and-forth conversations with the guys who make it. Came here to suggest it, but looks like you found it first :) Also, depending on your requirements and budget, the commercial product which opens up their RML markup language is an absolute walk in the park for building documents without having to code all the layout components. It costs, but for low volume of output, it doesn't cost very much.
Deleted. This is not relevant to r/Python, it's about Dart...
This sounds like the best option. I still stand by my previous comment, though: use another format if you can. Hell plain-old HTML might be better suited to OP's needs.
ReportLab
In process, Matplotlib. Out of process, GnuPlot.
Agreed. We had a requirement for a report and we settled with excel and all newer excel programs have save to pdf option, so customer can create a pdf if required from excel.
s/hack/kludge/g But cool output. 
Everything is damn beautiful these days. Beautiful. 
Respect your friends privacy, they might not like having their picture on random sites you wish to show your work on. 
I have a project that you could easily get involved in: [openscienceframework.org](http://openscienceframework.org) I'm in the process of wrapping up private beta code and cleaning it up to put on Github and get our open source developers involved. But I have one subproject that might be perfect for you if you have interest in scientific python + web development, specifically taking a first pass at parsing ipython notebooks (xml I think) and making them pretty to display online (look up literate programming for the why's). Too complicated? Not complicated enough?
In the past I've used LaTeX for this, generating a .tex file on the fly and calling the necessary executables. This might be a decent solution if you already have LaTeX installed. It's kinda kludgy though.
Well 'beautiful' is getting way overused, every damn startup product is beautiful, every library, gist and twit is beautiful. It just might compete with 'cloud' soon enough. 
There are people who disable public profiles and pics, those are then only visible if you are their friend, or a fof depending on their setting. Thats why you could look into fetching the profile pic through your facebook account - as you are their friend - you get the profile pic. Perhaps you done so already, havent checked. But yeah, not all is public if you went by that route.
Perhaps you could ensure privacy respect by logging in and getting all the user IDs and then logging out and re-requesting all the images. If you get any 403s, move along. **Edit:** de-derping my post.
Yes it is overrated these days.
&gt;...fs and then logging *out*... Yes. Thats the way to do it. 
Can you check if facebook respects a users privacy settings - when they are "do nto show pic anywhere, no public crap etc", see if the image is available if requested by the id through graph.facebook.com ? fb is blocked at work for me. :(
Thanks. I was posting from a phone. That's never a good idea.
I still don't understand exactly what he's doing here. You can't multicast to browsers, can you? If you want to make something realtime, you can use comet (basic http) or websockets.
This is also the standard coordinate system for mathematics. It is only computer graphics (with their legacy of CRT displays) that uses the top-left corner as the origin.
I usually just have my program generate LaTeX output, then you can run it through pdflatex or MikTeX.
[SFML](http://sfml-dev.org) is a C++ multimedia library which supports accelerated 2D graphics with shaders support, windowing, audio, etc. It's mainly used for 2D game programming. If you have used or heard about SDL, then SFML is basically modern version of SDL for C++. So in Python terms, it's closer to Pygame or Pyglet.
Thanks, that actually sounds interesting. :-)
It means pretty much what it says. In process would run it in the same process as your script's Python instance, and out of process would fire up a new process to get the work done because it's only being launched by your Python process and not being created in the same process as Python. http://lmgtfy.com/?q=in+process+vs+out+of+process 
Dynamic typing and mutation seem unnecessary here, seems like you could just return a new instance with all the old data initialized. I work with Python daily, and there are many reasons for dynamic typing and mutation, but this isn't one of them.
I think it's cooler, personally, to have reliable code.
You could create a new instance, and oftentimes, that's the right solution, but there are other times where that is more error prone than this. I don't think you should go around changing classes all the time. I also work with python daily, and I've had very few times where I'd actually use this technique, but I've certainly had a couple times when I've made my life more difficult, and my code more complex by not using this technique. As you say, it isn't necessary, but then, neither are classes, list comprehensions, and numerous other niceties that python provides. But sometimes they're useful. Changing an object's type is dangerous, and should always be approached with caution, but it's not always bad.
In the right circumstances, this code is perfectly reliable. You'll want to make sure that: 1. all the states rely on the same set of instance attributes, 2. the transitions between states are rigorously restricted to a coherent set of types 3. that the transitions, types, and trickery is all well documented for developers that have to use it. This should be true any time you use deep python trickery. But there are actually remarkably few gotchas in this pattern. It does what it says on the tin. 
At run-time, he's modifying the __ class __ attribute, so that class-level lookups go somewhere else. That's a cool trick, but crazy confusing to the poor sap that doesn't notice it and is trying to fix a production bug. Reminds me of prototype-based inheritance, which I love, but I would never inflict on coworkers. Too confusing.
Agreed. If you ever use this, it should be *thoroughly* documented. 
I have been using this binding for quite some time. I must say it is very well built and elegant. Thank you for the hard work! Glad to see windows installers made available.
It's explained briefly in the introduction: http://pysfml2-cython.readthedocs.org/en/latest/introduction.html
Thanks!
A class is a construct used to define instances of itself. It defines the state and behavior of its instance objects. An object, being able to change its class, is effectively being able to change it´s state and it´s behavior. Objects can no longer be characterized by their state and behavior. Therefore a class is a construct used to create things that are not defined by state, behavior nor the thing that created them. Super!
Yeah Google Summer of Code sounds amazing, but I'm not 18 yet :( I'm definitely planning on it next year though. For the mean time, I'm taking your advice (and many others) to go work on open source projects. I'm looking into openhatch as well. Thanks for the in depth response!
The web implementation is necessary as it is the way my professor wants people to be able to access the simulator. Otherwise, I would gladly just post it for download :(
Thanks. I looked into it but ended up just rewriting the simulator in java - seemed the cleanest thing to do. I appreciate the insight though.
Thanks for the in depth reply! I appreciate it. I'll be looking into openhatch soon.
Yes, what vplatt &amp; WhyCause said (sorry for the terseness). The nice thing about using either of these is that they support a variety of backends (output formats). You can do your development writing PNG files and once you're happy w/ the results cut over to PDF. [Matplotlib](http://www.scipy.org/Cookbook/Matplotlib) is the go to graphing library for Python. See Sage, Pylab, SciPy, etc. [GnuPlot](http://www.gnuplot.info) is a stand-alone graphing toolkit. It's command line based and has its own small language. It's ideal for tying into analysis pipelines. It definitely supports [PDF](http://www.gnuplot.info/docs_4.6/gnuplot.pdf) (has 2 backends for that matter). 
supporting python 3 is pretty trivial for pure python projects and challenging for wrapped C code. there's also very few reasons to upgrade considering wxPython, VTK, and matplotlib are not supported in python 3. Better off waiting till ~2015. That said, the open source project I started supports python 3 because a user asked me to add it. I have no idea why someone would want to use python 3 given it's limitations, but to each his own.
Damn I can't believe I didn't think of that. Hopefully one of them hosts py. 
Implement something you think you might use. Otherwise it becomes an academic exercise. Games are a good way to learn.
&gt;So basically what you're saying is that Python is lacking in tools for generating PDFs :p No, not at all. Python has excellent tools for working with PDFs. I'm saying that PDF is incredibly painful to work with in general. It was a language-agnostic statement.
Webkit html to pdf from a web page http://code.google.com/p/wkhtmltopdf/
Hi jnaranjo, I have two projects that could projects that could interest you : * A startup that aims to build personal cloud services. We are looking for interns. * Free software project : a distributed social network written in Python (http://newebe.org/). If you are interested in one of them, feel free to message me. 
I'm checking it out and trying to write a simple tileset/spritesheet class that inherits Sprite class: class SpriteSheet(Sprite): def __init__(self, texture, width, height): super(SpriteSheet, self).__init__(texture) (...) It seems that sfml.Sprite.\_\_cinit\_\_() gets called before my SpriteSheet.\_\_init\_\_(), with parameters it can't handle (width and height). In fact, \_\_cinit\_\_() gets called even if I don't call parent's class constructor. How can I go around this? 
&gt; My first program ever was a D&amp;D character sheet generator. This has got to be a rite of passage for all of us nerds, I did the very same thing :D
If you're going to submit 7 month old articles, please put the date in the title. Also, in general please stop submitting so much stuff. Save your submissions for quality news or articles that are actually going to be discussed, not just links to github projects. I downvote just about everything you submit because nearly all of it is a waste of time and is just clutter.
Now you're just fishing for karma. Someone linked to another 3.1.5 document on Hacker News. Odd...
Well, I don't know what is wrong in sharing what I read in hackernews,
While true, knowing that you don't need the SPC is crucial. You won't find 100% of the plugins available through SPC, so knowing where they reside and how to install your own is incredibly helpful.
Yeah, let's not start an editorial standard of having to check HN first to see if it's been posted there as well. Furthermore, I believe sharing is one of those core internet principles. Edit: not all readers here also read HN. It could very well be that someone here could find it useful. 
It's just weird. You see something get a bunch of upvotes over there, so you just go find another page from that site and link it here. You even linked to the exact same old version it did.
Wow, PyPy's memory usage is impressive: ElementTree in PyPy outperforms the cElementTree.
Nothing really wrong. In any case we should always critically analyze what we find in internet before spreading it and producing more noise than that we already suffer. Most pythonistas inmediately realize this document corresponds to a dated python version. So it could be considered as a low quality link.
Well a table wouldn't give you the opportunity to change the legend's colours between each graph now would it?
What is the hesitation with this project? Seems to me it would be great with Python
Currently I just try to make SFML's API more pythonic. For example, you can pass tuples instead of Vector2f. Otherwise, I try to stay as close as possible to SFML's API. SFML already has a lot of features, such as sprites, shapes and rectangle intersection detection. Most additional features can probably be packaged as another library, or snippets in the tutorial/wiki.
Yeah, the arguments will always be passed to `Sprite.__cinit__()`, and it expects a texture and an IntRect. I renamed `__cinit__()` to `__init__()` in the repo to make it easier to inherit. I have some other things to fix, then I will make another release asap. Until then, you can use composition instead of inheritance.
Took a swing at a quick hack version [here](https://gist.github.com/2705927) which uses some of the less-optimal approaches discussed, but still is an end-to-end solution in Python rather than using other scripts to stitch the process together. The script uses an access code to pull your friend list, grabs the IDs from the JSON response, pulls each image and creates a randomised grid. One thing it doesn't do that the manual approach allows for is avoiding the 'blank' images, but I'll take a look at that another day. I'm sure there are better, more "pythonic" ways to go about writing the code, as I only started playing around with Python recently, so if anyone wants to run with it, fork away :)
Perhaps I should emphasize a particular part of what I said. &gt; It is common knowledge that interpreted languages are ***generally*** much slower than native code. Which actually already acknowledges your point. Otherwise, I would have said "always."
Well hi! I have a brand-spanking-new project here: https://gitorious.org/mtpm I also have an older project here:https://gitorious.org/stattr I would appreciate suggestions and/or contributions on both; they're both somewhat incomplete. I'd also appreciate indication as to where the setup instructions might be unclear. More generally, http://openhatch.org is a great place to jump into working on free software, so you could check that out :) full disclosure, I live with the founder of the site.
Ouch, ouch, ouch, ouch. Thank you for reporting this, and good job wrestling it down.
That's some hardcore debugging. Congratulations!
Apparently the *don't mix threading and forking* rule has gotten so old that the new generation has forgotten it again. Editing just to add, this problem isn't unique to Python, for example the same problem applies to glibc's stdio library, where printf() and friends internally hold a mutex during IO. POSIX includes pthread_atfork() API to supposedly allow authors to work around this, but has been proven deficient in some fairly serious ways (can't remember from the top of my head - ordering comes to mind though?). The crux is that unless you can guarantee after fork() your child does practically nothing except invoke a system call to exit or exec, you have a strong chance of hitting some code that includes a lock.
Would the solution have been to acquire the lock before forking, then releasing the lock in both the child and the parent before continuing?
Yes, but it also needs the texture and the int rect. So either I add them explicitly, and the user's constructor will always try to call `__cinit__()` with the two first arguments (in your case, texture and width), or I just use * and ** and try to extract the texture and the int rect and do type-checking myself, but this would be too much hassle, especially if I need to do this for every other class that exhibits the same behavior.
it’s about the “www”. apparently http://www.pyjs.org didn’t resolve whereas “http://pyjs.org” did, and luke refused to make a redirect.
Can't agree more: don't mix threading and forking. Issues like this occurred in CPython 2.4 and 2.5 series as well. In my experience, on Linux, things turn out pretty well most of the time. On Solaris, code apparently running correctly 100% of the time on Linux (which is most likely 99.99% of the time, but you forgot to perform just one more test-run ;-)) locks up much more frequently.
What is it for? It should be stated clearly **at the beginning** of the documentation. Then you can explain how to install it, etc.
&gt; All are very good candidates for things a beginner can do They're all things that a beginner is very welcome to do, and a good way to earn respect. But they're not necessarily easy for beginners - writing docs and examples requires a good understanding of the code and how it's meant to be used. It's often harder to write good docs and examples than to work on the code.
I don't know much about Python implementations, but I just wanna say that is damned impressive. Nice job.
&gt;don't mix threading and forking. This would make for a great T-shirt.
disclaimer first: i’m not sharing his view. the only thing i’m sharing here is my knowledge of it with you: --- luke, the most active dev of pyjamas, is its project leader. he has/had the stance that he’s the one to make decisions, and if he decides not to share reasons, he doesn’t have to. also he seems to do that very much. some of his decisions, especially in the marketing sector (promoting pyjamas/acquiring more devs) were very unpopular. these decisions combined with luke giving no reasons and being generally unbendable has lead to some devs deciding that a fork would harm their intention of acqiring more devs, which let them go rogue and hijacking the project, including name and domain.
I'm actually working on a Python tool that needs to do something similar. I need to be able to spawn processes synchronously and asynchronously as well as run python code synchronously/asynchronously. Actually, the process piece is done - I just use subprocess.Popen and poll() (or not if running an async process). For the python code, I was planning to either use threading or multiprocessing, but I was also considering gevent. I don't care so much if the GIL actually prevents truly concurrent execution. I suppose I wouldn't hit the above issue unless I called into subprocess from a thread and I don't think I'll actually need to do that. I will need to make RPC calls from my Python threads though. I think gevent would be fine actually in this case. I saw your comment and thought you might be able to recommend a specific approach. I can give you more details if necessary and of course, no problem if you don't have a recommendation, your original comment was quite informative to me. Thanks.
Hi, The book "Mining the Social Web", by Matthew Russel has some good advices and examples using Python and Twitter API. The source code provided by the book is freely available at GitHub: https://github.com/ptwobrussell/Mining-the-Social-Web Of course, the official documentation is a good place to start: https://dev.twitter.com/docs/streaming-apis 
That looks fantastic - thanks very much. 
OK. I just hate it when the abstract is missing.
you could use python "bare" using cgi-bin style. I wouldn't recommend it though ;)
FYI: /r/DSP
waaay over my head
Not sure if you intentionally took it down, but I'm getting a 404 message.
I wrote [this](http://bulkan-evcimen.com/building_twitter_filter_cherrypy_redis_tweetstream/) a while back, it might help. 
Ouch. Sorry this hit you. It got me a few months back. I was pretty annoyed that python 2.7.2 didn't come with a huge warning that forking in a multithreaded program could crash out. This was blowing up not only our job processing system but even our webserver!
Hasn't Pylons evolved into Pyramid?
Yup. But I needed to code something quickly - very quickly - and although I've used pylons a hell of a lot, I've never used pyramid. Some would say, "you should've taken this chance to get to know it!", and I'm sure they're right, but I wanted to get this project finished within a week or two. 
Have fun riding on a dead horse.
well that's very nice of you! Thanks. :) giddy up, bitch
Is this a new language bridge library?
I think you miss the point of SDL. From the wiki: &gt; SDL itself is very simple; it merely acts as a thin, cross-platform wrapper, providing support for 2D pixel operations, sound, file access, event handling, timing, threading, and more. It is often used to complement OpenGL by setting up the graphical output and providing mouse and keyboard input, which are beyond the scope of OpenGL. The idea is that it provides the bare minimum for threading, video output, audio output and user input in a cross platform library. How much you chose to build on top of that is your own choice, but core SDL as a base is a solid, small and easy to use foundation. 
These are not FFI libraries but parsers.
kivy has several "core providers" for both audio and video ( see http://kivy.org/docs/api-kivy.core.html about core abstractions) the default is to use gstreamer for both, which can load most of audio and video formats depending on which gstreamer plugins you have installed. for video the available providers are: gstreamer, pyglet, ffmpeg for audio: gstreamer, pyglet if you want to check out the code that defines the abstract video loading, and each provider you can check in the kivy.core package here: https://github.com/kivy/kivy/tree/master/kivy/core/video https://github.com/kivy/kivy/tree/master/kivy/core/audio you can select which provider is used using environment variables KIVY_VIDEO and KIVY_AUDIO (see http://kivy.org/docs/guide/environment.html) hope that helps, where you having trouble loading a certain file?
I'm not a fan of the term and don't use it, I always assumed it was derived more from "fashionista", not barista. My biggest gripe with the term is that it's a gender specific (feminine) noun used to describe a gender agnostic group.
That sounds like it ought to work. Another option is to reset that semaphore first thing in PyOS_AfterFork, because its sole purpose is to initialize a new, single-threaded process so there's nothing to conflict with.
&gt;shouldn't bring yourself down to the level of a barista What an asshole thing to say.
It doesn't come from barista. "-ista" is a suffix which when added to a noun denotes someone who practices, believes or is adept in that noun. http://en.wiktionary.org/wiki/-ista
I love it, sounds as pejorative as I'd like when referring to the **bad** part of Python programmers.
Relevant username perhaps? Either way, you're totally right.
Maybe. In that sense I would think someone who goes to bars would be a barista. 
I use it for Sphinx. In fact that cheatsheet solved me an issue.
A barista works a coffee bar you could say. 
We need more Python Ninjas too.
You mean like 'barrister', maybe?
It's not a gender specific noun at all. The suffix -ista is used in Latin languages to make something a "-person" word. So in Italian, a barista is a bar-person and it's il barista (male) or la barista (plural: i baristi/le bariste) and I think it works similarly in Spanish. Also, at OP: there's hardly a better example of a skill-full profession than a proper barista. What sort of coder doesn't appreciate a good espresso?!
Need an object database? Why not ZODB?
&gt;I'm the only person who can use the word "my" to refer to MY stuff. Amen!
Really? I'd say Software Engineering is _slightly_ more difficult than brewing coffee.
Well, they seem to handle being a decent human being better than you.
Check out its [source code](https://github.com/arigo/ffi/tree/master/src) import ctypes, ctypes.util import pycparser Looks like it's just a fancy wrapper around ctypes &amp; pycparser.
That was sort of what I was thinking the FFI did: ctypes would be unnecessary if you could parse the .h files and create an AST while parsing them. Then use the AST to produce a valid ctype signature. The part that does the hard part (the AST) can be done inside of clang or pycparser. Mapping to a ctype shouldn't be too much effort after that.
Hmm. The source code has been updated since I last looked at it.
&gt;Will update this in a bit, writing from a bus and I've had 6 pints :) Ha ha, no problem. Thanks for the help! 
Ignore all of my comments. It looks like the code was updated since the first time I looked at it.
&gt;and that unpronounceable WSGI/networking lib I believe it is pronounced `Wirkk-eh-zoi-khegh-ach`.
Whenever I see "Pythonista" I'm immediately drawn to the verse in Weird Al Yankovic's parody "Baby Got Jack" *Don't like a sister who farts while playing twister, I wish those beans did miss her, even Uncle Ben would fist her* I hate the term so much I think it needs to be parodied in this way. 
they are completely different projects, and it is fun how comparing them is always present in comments :) uWSGI is a whole-stack for hosting and deployment, gunicorn is a WSGI server/gateway. Gunicorn is extremely-minimal do-one-thing-do-it-well and very python-developer-friendly. uWSGI is full of features and very sysadmin-friendly. Comparing them is quite impossible, expecially for the different approach to problems. Regarding memory, it is normal uWSGI (being a c app with full control over objects/gc) can consume less, but we are talking about such a minimal percentage compared to the memory consumed by your app that you can simply ignore it. The same is for performance, in the real world the overhead of the WSGI part is practically irrelevant compared to the "overhead" of the app itself :)
The reason you use Python over Ruby in academic context is the exact same reason you use blueprints over cubism in construction.
I asked OP this, but do you have any thoughts on Emperor vs supervisor?
That doesn't make you above them.
Does nicely. I pop all my deployed apps in `/srv/$INSANCE/$APP` and all my virtualenvs in `/srv/$INSTANCE`. My uwsgi inis and sockets are at `/srv/$INSTANCE/uwsgi.sock` and `/srv/$INSTANCE/uwsgi.ini`. Where $INSTANCE is a name for the deployment (such as myapp_test) and $APP is the name of the app (generally the default cloned directory of the repository). I then have a nginx config generator that spits out configs for sites. Here's a skeleton for Django apps: https://github.com/radiosilence/servers.py/blob/master/skeletons/nginx_uwsgi_django.skel And a generic one for flask: https://github.com/radiosilence/servers.py/blob/master/skeletons/nginx_uwsgi.skel My uwsgi.ini files look something like this (for django): [uwsgi] socket = /srv/myinstance/uwsgi.sock module = wsgi:app chdir = /srv/myinstance/myapp virtualenv = /srv/myinstance env = DJANGO_SETTINGS_MODULE=myapp.settings uid = wsgi_myinstance gid = www-data chmod = 770 single-interpreter = true processes = 2 With myinstance and myapp replaced with respective $INSTANCE/$APP
Also a physicists. They're fantastic libraries, which ruby doesn't seem to have an equal to. The ease of optimisation with cython is also very useful, but I don't know if ruby has anything similar.
Well tell me about those excellent tools for generating PDFs - the ones that aren't Report Lab. 
It is the news I have been looking for! I will add `jython` env into my `tox.ini` configurations. :-)
I like game #4: Simon.
Ive been using Tweepy for the last few days i like it although there is a slight bug with the streaming API. It giving the second from last tweet not the current tweet, this can be fixed using this by over writing the a small party of the libery you can fine the code here [http://stackoverflow.com/questions/10083936/streaming-api-with-tweepy-only-returns-second-last-tweet-and-not-the-immediately](http://stackoverflow.com/questions/10083936/streaming-api-with-tweepy-only-returns-second-last-tweet-and-not-the-immediately)
So, someone, really. Please. I just want a straight answer why `mod_wsgi` is avoided like the plague?
If it fails, bear in mind that there are still some bits missing from this alpha. IPython uses `io` quite a bit, so we probably won't be testing on Jython until that's implemented.
It's so boring that nobody can write blog posts about it. /s I'm about to move some production stuff from uwsgi to mod_wsgi because uwsgi is just too weird. httpd has been around for decades and has all the kinks worked out in the ordinary multi-process paradigm, and when you have an app that does a lot of heavy lifting multithread or async is a bad fit. And any difference between app servers quickly disappears once you add an application that takes more than a few microseconds to reply.
so... where's the python code?
The main problem with saying "use the right tool for the job" is that there are tools that aren't the best choice for _any_ job. PHP is one of them.
I run a small personal site and I'm happy having found a reasonable provider who offers a load more than the usual choices, so I guess editing the post above will suffice.
It's not because Python became famous more recently?
I was using mod_wsgi, apache config file is so boring, so switched to `fabric + gunicorn`. My reason for avoiding `mod_wsgi` is `gunicorn + ngnix` ease of configuration. 
Python is been before `java` after `perl`. 
1. Python has it's own problems. One of them is utilizing multiple cores. Python was designed and continues to be designed specifically for a 1-core machine. There have been attempts to modify the code, but each time the implementation has had performance problems. That said, there are a group of PhDs in Europe that are tackling the problem and beating it (see: pypy). 2. There may be a lot of different web frameworks you can use within python, but the 800lb gorilla is django for web development in python. Start with that; the docs are excellent. The problems you find will likely already have solutions within the well supported community. 
If you're going to depart python for another language for predominately web app-related work I'd suggest ruby, not PHP CRUD and routing are solved problems in a number of languages, often times with distinct and mature solutions per language. If these are your only concerns, feel free to stick with PHP.
You should be comparing using != as comparing using "is" is just does check to see if the two items refer to the same location in memory. 
Laptop - 1440x900 - occasionally I'll use dual monitors...I'm usually on the move, though. 
15.6 inches? How does it stack up with dual monitors? Do the dual monitors increase the productivity marginally ?
Yeah, I figured this out. Thank you. EDIT: I figured out that != worked, but I still didn't understand why 'is not' wouldn't (and i'm still a bit confused!)
My personal preference is nginx + gunicorn.
Hurray!
My primary monitor is 1920x1080 with a smaller secondary monitor at 1280x1024. The second monitor is useful for documentation mostly, but that's mostly because it's awkward to stare out for an extended period of time.
Before I discovered Emperor mode, I was using supervisor to keep the uWSGI processes running. It worked pretty well, except for restarting processes, since supervisor can't seem to kill child processes forked from the parent.
You mean print 1 is 1L in the second snippet.
If I weren't the one asking, this is pretty much what my answer would be. If I was worried about having lots of third party apps like Wordpress, Drupal, Mediawiki, etc...then PHP is obvious (and would still be servicable). But when it comes to me making the decision to either learn a PHP Framework or a new language....That's really where I'm at.
Mine appears to be a computer, but I am still investigating.
Now we just need Jython 3.x.
The only time you should use `is` is when you're comparing against a singleton object, such as `None`. 
But threading isn't even *supported* in PHP. There's a compile-time switch you can use to enable thread support, but in practice it doesn't work well and I believe it is unrecommended by the Zend team. Python is easily the less-bad choice of the two for multicore support.
It does but MS has apparently not released the code yet so its unofficial. Mono just...I feel uncomfortable about it. I know its not technically wrong but...something.
Predicting what function gets called by a call in python is turing complete and not deterministic. Thus, you can't reliably predict the set of exceptions a function can throw even while executing the program.
I personally don't like the idea of \_\_all\_\_ because it enables the practice of importing *, which is bad in my opinion. I would rather list every single class/function I import, even if it's a long list.
All the more reason developers should document which exceptions callers ought to look out for.
Before reading your whole post, "Explicit over Implicit" came to mind for me. Personally, when I'm working in a file, I want to know where all of the imports are coming from clearly. Don't think having them in __ init __.py would be very intuitive. Same deal with import *. Such a pain to debug.
Not that I'm saying Jython is pointless but...what is the point? C is historically portable enough that python3 already runs wherever people want it (for example, ARM7.) I'm not trying to start a flamewar, and by my logic, other JVM language implementations might be pointless too. Jruby, ABCL, etc. Clojure is not pointless because that is its own language and is Java in disguise as a Lisp...I'm talking about languages that have a low-level implementation already which were redundantly implemented onto the JVM. Does anybody use Jython on an architecture where porting native python is not an option? As a side note, Jython on Android seems dead.
I think whether we should use __ init __.py as anything more than a placeholder depends on conventions. If the general majority of codebases has actual code in __ init __.py, I think this would be fine. But based on my experience, in most places it's just a placeholder.
I am currently using that laptop too with 1366x768 resolution and it started getting on my nerves lately. I am thinking of hooking my laptop with an external monitor, would it increase the productivity ??
Exactly, the icons look as if they are from windows 3.x machine or something. I don't know why they are still packing the idiotic LCD's with high end laptops with processors like quadcores and i5s.
Significant pockets of butthurt detected in the area, captain.
&gt; Clojure is not pointless because that is its own language and is Java in disguise as a Lisp Jython is Java in disguise as Python, and the whole Java stdlib is available. It just removes the need to learn a new language.
I hade added a bugfix source release: https://github.com/bastienleonard/pysfml2-cython/downloads
http://imgur.com/HVTxS
At work I use an iMac and an extra 23" monitor. Both are 1920x1080. My coding is done in SubEthaEdit, or sometimes vim.
I enjoy dual monitors because I can look at two (or more) pieces of code at the same time, or have a web browser with docs up, etc. I couldn't imagine it actually killing productivity, though I could imagine it being unnecessary for some. 
17 inch, 1440x900, numerous OS, laptop. secondary net book to scribble code when I'm on the move.
&gt; Python has it's own problems. One of them is utilizing multiple cores. Python was designed and continues to be designed specifically for a 1-core machine. There have been attempts to modify the code, but each time the implementation has had performance problems. That said, there are a group of PhDs in Europe that are tackling the problem and beating it (see: pypy). I believe that's a problem with most similarly dynamic languages, e.g. PHP has no threading, Ruby has something similar to the global interpreter lock, etc.
Here's that nifty gif he made too. It wasn't loading for me http://www.candyjapan.com/static/puchotto.gif
Yes and no. This is a primary problem of c-python and not the language. Jython, for example, does not have this problem. Pypy, another alternative interpreter, also does not have this problem.
All the comments about using == for numeric comparison are correct, as are comments about 'is' being only for object identity comparison. However, since python implementations can use integer caching (http://choorucode.wordpress.com/2012/05/01/integer-caching-in-python/) the original question still requires some explanation. It would help if we knew what platform and version of python the OP used.
the only reason I would "select" php is because I was modifying modules that plugged into a php system such as wordpress, drupal or magento. luckily I don't do that anymore.
13" Laptop, Ubuntu, Eclipse+Pydev. And before you ask, no, I'm not a pro...
But my screen (24") is so wide that I can easily look at two pieces of code (and indeed, I generally have a vertically split vim window open at any given moment), whereas with two monitors I feel like the angle is wrong or something. It must work for some people (since I have quite a few coworkers who do it and are quite productive), but I cannot get used to it.
Ah, fair enough. My screens are never quite big enough for that, though I would absolutely take a single screen the size of two screens over two screen.
14'' ThinkPad, not thinking about change. Ever.
Macbook Air 13''
For me at least, i find that my second monitor is just a netflix player while I do other stuff on the main monitor... so that could be why it is a productivity killer.
I dunno, I use a second monitor to have the web application I work on open, and the other screen has all of my terminals. It lets me easily switch back and forth between the two, and look at the code when I'm using the js console to test things.
Can't you use multiple processes and something like http://docs.python.org/library/mmap.html or http://docs.python.org/library/multiprocessing.html#sharing-state-between-processes for 2?
If you ever do an app that needs stdout and html then do not use Python. You cannot have stdout templates in Python because white space is significant. Sure, you could have two code paths for displaying and whatnot, that is pretty annoying imo.
I never knew I could do that! But OpenMP still seems much prettier.
15" laptop, 1920x1200. xmonad with default of 9 desktops, although usually only use 2-3 when programming. Also, tmux.
As a pro PHP coder I like to refer to messed up shit in PHP to my co-workers as often as possible. Someday we might switch to Python... someday.
You can use the grave (backquote, key-above-tab) \` surrounding a word to prevent markdown processing. So \``__init__.py`\` becomes `__init__.py` instead of __init__.py.
I use two 24 inch wide screen monitors, I tend to have three windows/panes with code open and 1 window with documentation. I found I got about 60% more done with two than I could have with 1.
I love how portable Python is.
If you care about your data, or your customer's privacy, using a shared server is frankly unthinkable. 
\_\_all\_\_ can also be used for discovery. For example, say you have three different "actions" (pretend the actions are classes) inside one package, \_\_all\_\_ can expose all of them to a program so an app wanting to figure out which actions are available can just query that instead of trying introspection.
[This dude at the Argonne National Laboratory](http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-python-for-high-performance-computing-4899211) gave a great talk about serious ass science computing using python. And he admits Python is slow numerically, but dev time is soooooooo much faster that he spends 10% time devving and 90% running the app. Versus the 90% time devving, 10% running in C/C++ land. Threading isn't an issue since GIL kneecaps you on that front, so they use [MPI](http://mpi4py.scipy.org/docs/usrman/intro.html#what-is-mpi) and get around that by spawning thousands of python interpreters. They parallelize on a machine that has over 160k cores!! Skip to 12:30 to see the multiprocessing aspect of the talk. 
This is what it does for me.
Dual monitors are great on a machine you only use for work. I have a dual setup at home and at work. I am very efficient at work but when i try to do something at home I find myself distracted twice as fast. 
Desktop: 120gb SSD, 500gb HDD, 16gb RAM, AMD Phenom II x6 1045t, Ubuntu 12.04 Screen: 24" 1920 x 1280 -- Laptop: 13" 3 2 Macbook air, ubuntu 12.04
Or escape the underscores with leading backslashes. `\_\_init\_\_.py` will look like \_\_init\_\_.py
Initially i thought this was a new python interpreter built on the objc runtime (like macruby for ruby vs MRI), seems like a way to call objc code from python though right?
As someone who is diving into both python and PHP, this makes me fundamentally fear the latter. Pain and doubt are things I want nothing to do with as I learn to code.
You should be very afraid of any language where bugs can appear at any time within perfectly valid code.
holy shit.
I'm trying to come up with something witty to say but, in all honesty, *how?*
macbook air with two separate accounts: one with all of my fun stuff, such as movies, games, etc. and another dedicated to programming with all of my classical music, IDE, chrome, one folder, and that's it.
Laptop, single monitor, windows/linux mint, 19" screen
 &gt;&gt;&gt;platform.is_potato() True http://www.bbspot.com/news/2008/12/linux-on-a-potato.html
Laptop 15.6" screen with 1920x1080 resolution. Windows 7 + ubuntu 12.04 Vim
All of the above, but I'm most productive on a linux desktop with a single 27" monitor. I use separate virtual desktops for emacs+terminals, ipython notebooks, and misc browsing+email.
Good catch. I compared to Java as a reply to `It's not because Python became famous more recently?`. Most people think `Java` came first then `python`
`cd ~` &amp;&amp; Laptop : 15.6 ", core 2 duo , Intel, Ubuntu 11.10, python 2.7.2, 2.6, 3.2, Ipython `cd work` &amp;&amp; `echo "I don't use Python at work :(` 
For science.
Macbook pro 15 in, external monitor, size varies whether at home or office, Vim on the laptop screen and ipython-qtconsole and terminal window on the monitor, with the Vim-ipython plugin for max fun. A variety of other windows scattered across the virtual desktops. Though, lately I've been using the ipython notebook more. It's nice to have inline figures when using matplotlib for looking at data, but to say qtconsole is devoid of features would be an understatement, especially in comparison to the rather lovely notebook interface. 
Anybody else seeing a double text effect that makes your eyes bleed when you highlight text on this page?
One of the strongest use-cases for PHP is when you just need a small "moving part" in an otherwise static site. You know "Auntie Bob's Bakery and Gold Buyers" is never going to change their website in the next ten years, but they might need a single form-to-email script, or to print today's date on the page. Everything else being raw HTML with a small block of PHP code inside is probably much less fuss and muss. There's also the issue of whether you'll always control the production environment. A PHP build can be a selling asset in the sense you can say to a client "If you no longer need our services, you can take this, throw it on $5 per month hosting anywhere and it should run fine."
I used to own one of this, what a fine piece of technology and design; I had to replace it due to the nvidia 8600M GT problem ):
Probably because you can use this in various interpreters including PyPy?
Since no one has mentioned it yet, the first stop is the matplotlib site's gallery, http://matplotlib.sourceforge.net/gallery.html which has a ton of examples with code to look at. 
Ignore this guy's comments. The source code has been updated since the first time he looked at it.
When you want to drop a file in a folder which is served by apache, and in that file you want to output the folder structure below it in nice pretty html and css. Then you want to give this "program" to your friends so they can do the same. Perhaps you want to add search function to find files below the file. Do that in python.
But not for long now as STM implementation is underway.
The best machine for coding. Dell precision. 17" 1980x1200, i7, 8gb ram. ArchLinux Netbook: hp 12", 2gb ram. ArchLinux.