Jeff knupp's idiomatic python, only 3 vids, but really nice python style. Also Raymond Hettinger's talks usually have clean pythonic style too. 
Not really, because you can only call async code from within async code. When writing a server this generally means that you need to define anything that might interact with a database as a coroutine. And of course interactions with an ORM or database driver will have to be awaited by framework users too. The good news is that this stuff isn't very hard to use. It basically boils down to using `async def` to define a coroutine and `await my_coroutine()` to call a coroutine. Then again, I'm sure frameworks could provide some clever interface around this, but that sounds like an unnecessary and cumbersome layer of abstraction to me.
[r/learnPython](https://www.reddit.com/r/learnpython)
I know this is a draft, but it seems rather light on detail WRT semantics etc.
Just wait until Python 3.9 when we have 7 ways to do string formatting.
Old: for thing in iterable: if predicate(thing): result = func(thing) else: break New: result = func(next(thing for thing in iterable if predicate(thing))) This works using `next`, which basically exposes the underlying machinery that iterates over iterators to make `for` loops work. You might prefer to make an alias `first = next` somewhere - then *that* line looks weird, but the more complicated one doesn't :) If the `predicate` never matches, then `next` will raise a `StopIteration`, so you can handle that with ordinary exception handling. I don't understand what you're expecting `__index__` to do; `s` is a float, and thus doesn't have that method. It looks like you intend to get the index from the array where the match was found. Without NumPy, the usual approach is to use `enumerate` to give us the indices and elements together. Putting that together with the previous idea, we get something like: try: l_bound = next( i for (i, s) in enumerate(samples.data[p:0:-1]) if s &gt;= threshold ) except: l_bound = p # similarly r_bound However, since you're using NumPy, you can probably do better than this - though I don't actually mess around with NumPy enough to figure this out offhand :/
Depends on the specific sensors you're getting. Look up GPIO, I2C, UART. 
You mean Python VII?
&gt; Once the threshold is missed, I can stop looking. I don't want the rest of the values at all and don't want to continue the iteration. Yes, my code does that. I passed a *generator expression* to `next`, not a list comprehension. It gets lazily evaluated. I abstractly describe a sequence "the indices of values in this source data that exceed the threshold", and taking the first value from that sequence, without computing the rest. &gt;odd, formatting of underscores For short inline bits of code, surround them with backticks (\`\`), to get something that looks `like_this`.
I also use both. The major drawback is that I still haven't adapted completely using print as a function. In fact, because I use the crap out of print statements when writing code, I shamefully use 2.7 for my personal projects and 3 for more official business.
Conceptually I think they want to signal that the async behavior is per element and not for the entire list. 
Python seems to be gaining a large number of `async` features. As someone who has never used any of them, what resources would you recommend in order to find out what `async` is all about?
Using `$^` outside of inference rules is, iirc, not defined by POSIX, so it's technically not portable (but it will likely work on most systems).
From the ice-age to the dole-age there is but one concern I have just discovered: Some tools are more general than others.
I feel async is being introduced by extension and not by comprehension. Each single keyword seems doomed to eventually support its async dual. I know I'm overreacting but this and the type system are starting to scare me.
Interesting...Python 3.3 is used less than Python 2.6, but almost everything has dropped support for Python 2.6. I use Python 2.4 on occasion, but who uses Python 3.1?
Just wanted to say that the library is far from complete. I started working on this around four days ago. I posted it since I think I have something that is sort of a basic skeleton of what I see it becoming. Any thoughts/comments will be much appreciated. Thanks!
A screenshot would be nice
The right way is to use scipy http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks_cwt.html
You can see it in action in [the example IPython notebook](https://github.com/hchasestevens/show_ast/blob/master/Example.ipynb).
Thank you! I do like that first video so far.
Suppose you're writing a web scaper. Downloading a page takes a few milliseconds, but there is a large latency on the order of seconds before the download starts for each page. Using the new async features, you can download these pages in parallel on a single thread. It's very fast and very light in terms of resource use. This is extremely important when writing a web app or anything that serves a large number of clients.
do you know about remi (https://github.com/dddomodossola/remi)? It is basically a finished and working version of your library but with fewer dependencies and less architectural complexity.
I'm on a phone. A screenshot would tell me if it's something I'd want to look at. 
Well, I still think that list comprehensions are wastly overrated. 9 times out of 10 when i make one i later have to change it to a for loop because of some special condition or another. Should never have been in the language to begin with. edit: Some examples on when you have to change from list comp to for loop because of a simple change. Which is why I dislike it: st = "sh h ka\n jhf ksh fksdhf " # double method call when checking if lines are only whitespace result = [w.strip() for w in st.split() if w.strip()] result = []; for w in st.split(): w_strip = w.strip() if w_strip: result.append(w_strip) # when the code just becomes too long for a line lexis = [] for u in uuids: (time_low, time_mid, time_hi_n_version, clock_seq, node) = u.split('-') lexi = (time_hi_n_version, time_mid, time_low, clock_seq, node) lexis.append('-'.join(lexi)) return lexis # using a method or function with no return value clean = [] for line in lines: line = line.split() # split into tokens line.sort() clean.append(line) 
I program mostly networking (protocols on top of TCP). Personally, I don't like Twisted too much either because the code often doesn't feel very pythonic and some things are overly complicated (I'm looking at you, HTTP basic auth). But I chose it because it seemed to be the most mature Python framework for async IO and it also seems to be the most complete feature-wise. So far it didn't let me down and I'm very happy with it. Thanks for the information on Twisted adding asyncio features. This is new to me and it is good to know.
You are not alone. Real python is dying, and all we get is a perl-ified asynchronised animal which has forgotten it's origins. Good old times...
I would argue that recommendations like PEP8 are not so binding so long as you have a standard within your own project. Your filename example is clearly an example of bad practice, but as is proven by the decades unsolved tabs vs spaces debate, both options of tabs and spaces have weighty advantages and disadvantages so I don't think its fair to compare using tabs to something like that.
Fair enough, threw some into the README.md :).
I have used python fulltime since 1.5.2, since about 1998-99. I know the language pretty well. It is not lack of understanding. I just find that language construct superfluous.
Some would say [Real Python is alive and well](https://gist.github.com/juanpabloaj/dffc6900f80abcfe8ce121a39cffa743)...
I usually write shell scripts, or even other python programs, to do exactly the same thing. I don't feel using make is a bad idea at all. Let's you to keep everything in a single file. Nice.
Eventually every Unicode character will be the prefix of some type of string construct.
This looks promising. Is there a way to inject CSS at a global level? From what I can tell, all styling for now has to be inlined.
learn tornado coroutines, they are very similar and a good introduction to the concept. Basically the idea is this: you have a function that takes a long time to perform its task and is not cpu bound (e.g. does network), so instead of blocking there until the operation is done, what it gives you is a "future" object, an object that encapsulates the result that will eventually come at a later stage. Instead of returning this object, it yields it. The result is that you get this future object and the routine is ready to restart exactly as it was when the future is completed. In the meantime, you can work on something else. When the future is completed, it reports so, and the routine is restarted where it left with the result. You basically obtain concurrency by interleaving a single thread jumping from one thing to the other, kind of like a collaborative multitasking. Note that this pattern requires the need for a event loop.
&gt; These counts seem somewhat unrealistic, though, so I would focus more on the relative values rather than the exact counts. That doesn't make any sense. Why would you assume the relative fractions are realistic if the counts themselves are already unrealistic? For example, if most of the scrapers are still running on Python 2.7, that will skew the counts immensely.
/r/learnpython
Add your ssh key to bitbucket. From pycharm settings select ssh client as native (default is builtin) and clone your repos via ssh, not https. I've been using pycharm this way for years, not a single problem at all... Bitbucket plugin is broken for years.
&gt; you can download these pages in parallel on a single thread It seems like they are downloaded in parallel, but the code always runs sequentially, right? The current active "download" is swapped depending on which socket blocks and which doesn't?
If you are going to get a UltraLowEnergy (U at the model name) type cpu for coding, get i5.
That's the idea. The OS provides special support for this. 
They're just aliases for the lower-case version: https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
Of course. Isn't 2.7 the default install for Ubuntu still?
Unless async class creation is going to officially be a thing (Curio supports it with a metaclass, but Beazley is a mad scientist), I doubt anything else will be async'd explicitly other than lambdas. 
Python 7⃣
Always wanted to ask: Is result = [i async for i in aiter() if i % 2] actually more readable to you, then result = [] async for i in aiter(): if i % 2: result.append(i) ? For me it's not, because verbose case makes quite clear where happens what. And comprehension, especially if it's a dictionary one, is just a bunch of symbols. Feels like I'm writing Perl, not Python. I've seen comprehensions only useful if the result of comprehension is not being saved in the variable, like d = { 'key': [i for i in range (1, 10)] } In other cases they're only make code more complex, and actually reduce readability. 
Nagare also has [an example of declarative UI generation with a counter app](http://www.naga.re/demo/). flybywire looks very nice. Nice work. Added to the [list of purely OO Python web development tools](https://github.com/metaperl/python-oop/blob/master/README.md#web-development). 
Iirc there's both Python 2.7 and 3 bundled in Ubuntu. `python` is an alias for 2.7 and there's `python3` for the latest. EDIT: apparently it's the behaviour recommended by the [PEP394](https://www.python.org/dev/peps/pep-0394) : &gt; * python2 will refer to some version of Python 2.x. * python3 will refer to some version of Python 3.x. * for the time being, all distributions should ensure that python refers to the same target as python2 . EDIT 2: Apparently, as /u/mfwl said, there's not both versions anymore
I expected it to just be a literal python.
OK, so it's not really a poem. My intention was to amuse people and hopefully even make someone laugh. Thank you for your interesting comments and I apologise for those PMs :)
&gt;Always wanted to ask: Is &gt; result = [i async for i in aiter() if i % 2] &gt;actually more readable to you, then Hi, it sounds like you are asking generally about list comprehensions and not just limited to the async case, correct? A list comprehension is really good at signalling to the reader that the purpose of the code is to make a simple list. In your case, the single line almost literally states: "Make a list with every element in this iterable where the element is an even number." Whereas the more verbose code reads: * Make a list. * Go over every element in this iterable. * If the element is an even number, then do the following: * add the element to the list. I hope you can see that the first statement is a lot better at conveying what is being done. If not, then try polling 10 other people from your office, saying it in one or the other way, and see what they find easier to understand. Being overly verbose is not always good thing. It can make the code longer, which makes it harder to understand. 
My google cloud boxes can download like 1 GBit a second. Not many websites can keep that maxed out. 100 Downloads at once can do closer.
It's also faster usually.
&gt; Hi, it sounds like you are asking generally about list comprehensions and not just limited to the async case, correct? Right. &gt; If not, then try polling 10 other people from your office, saying it in one or the other way, and see what they find easier to understand. I've tried to do exactly that, and these 3 people (10 is too much, we're a small team) are in favor of list comprehensions, for some reason. Dunno, maybe it's just a matter of habit... I do agree with /u/maxm on that, &gt; 9 times out of 10 when i make one i later have to change it to a for loop because of some special condition or another. It's exactly like that. 
In the past I read that 80% of Python 2 package downloads are actually from mirroring scripts not users, while Python 3 packages are somehow better cached and don't turn up as much in such statistics for that reason. Is this still the case?
So actually it's just `b`, `r`, and `f` when you use Py3. That's not even that many
But the comprehensions are _pythonic_! All cool kids use them!
I understand that often when the default comment is "/r/learnpython" it can be frustrating, but remember that for many who come to /r/Python to see Python news and discussions, it is frustrating as well to see people asking questions that are specific to their personal projects (not just homework), for which there is a dedicated subreddit. If you read the sticky about /r/learnpython at the top of this subreddit, you'll see that this topic would indeed fall under what should be on learnpython, not under python. So while the curt comments may seem annoying to you, it's just as annoying to constantly see people misuse the subreddit.
I use python a lot and comprehensions are just as readable as for loops. The fact you have to predefine the variable in the for loops immediately means you have to skip back to see what is being talked about inside the loop. 
I'm willing to believe that the values for 2.6, 3.4 and 3.5 are due to CI (2.6, 2.7, 3.4 and 3.5 are typical versions to test, and their numbers are comparable), but I have trouble believing there are 10x as many people who set up CI *only* for 2.7. Python 2-only libraries would also test for 2.6.
From my experience any project that was released to a production environment is only tested against its target platform. This means most projects are only tested against 2.7.x (or 2.6 for projects that target CentOS 6).
Been there, done that, used aiohttp to make my scrapper faster and man did it go faster.
Wait you do know that `subarray = [item for item in array if condition(item)]` exists right? Do you really use subarray = [] for item in array: if condition(item): subarray.append(item) It takes longer to write, longer to understand and longer to run. Not to mention the fact that generator comprehension in functions that take iterables (like `sum`) are much faster like this: sum(item for item in array if condition(item)) than like this: subarray = [] for item in array: if condition(item): subarray.append(item) sum(subarray) Comprehension are so key to modern Python I can't imagine the language without it. Code would be much more verbose, especially if you use generators over lists for faster execution. 
Ah excellent. High time! Some people in this thread seem to be unclear about its import (hah!), so here is a brief explanation. You are likely familiar with the notion of [iterators and iterables](http://anandology.com/python-practice-book/iterators.html) in python. Separately, in concurrent programming, some of you might be familiar with the subject-observer pattern, which allows an observer to be notified when the subject (or "observable") changes (such as onMouseMove()). This is also called reactive programming. Erik Meijer discovered a nice mathematical relationship (a _categorical dual_, if you will) between iterables and observables; if you squint your eyes a little, you'll see that both iterables and observables yield a stream of values, the first one synchronously and the latter asynchronously. The job of the iterable and observable is to produce a series of values, and the job of the consumer (a for loop, filter, map, etc.) is to do something with the values give to it. Neither should need to know anything about the other, whether they are running in the same thread, process or even machine. Here is Erik with a quick 15 min. video on the topic. https://www.youtube.com/watch?v=WKore-AkisY Also, ["Your Mouse is a Database"](http://queue.acm.org/detail.cfm?id=2169076), by Erik Meijer, ACM Queue, March 2012
PEP31425 - String prefixes for use in multiple concurrency models 👈f"MSG: {data}" = in_message #deconstructing receive 👉f"MSG: {data}" # message sending 🙏f"Send to main server: {datas}" # for centralized messaging # and pep something or other 👌"abc(?P&lt;def&gt;...)" # regex based deconstructing, like perl I think those are the right terms
David Beazley just gave a talk on it at PyOhio called [Fear and Awaiting in Async](https://youtu.be/E-1Y4kSsAFc) which gives a lot of insight about how 3.5 style async/await is used and what's going on with it. 
&gt; Always wanted to ask: Is &gt; &gt; result = [i async for i in aiter() if i % 2] &gt; &gt; actually more readable to you, then &gt; &gt; result = [] &gt; async for i in aiter(): &gt; if i % 2: &gt; result.append(i) &gt; ? For me, yes (although I don't like the positioning of that async, but it's the first time I'm every seen it). The non-async version, absolutely. Simple code is easy code to read, but simple doesn't mean "using simple language", it means "describing simple constructs". For loops are very general purpose. List comprehensions are very specific. By using a list comprehension you tell me (the reader) you're building a list. That's easy to understand. When you use the for loop you tell me how you're doing the task (looping over a structure) before telling me what you're doing (adding items to a list). ... and for loops are completely general. I have to understand everything inside the loop to get the gist. That's a potentially complex thing that needs understanding.
I know one in FORTH. : JOKE DUP SWAP DROP ; 
asyncio?
I think my personal limit is [A for identifier in B if C] where at most, A is a small function call on the identifier itself (`fun(identifier)`) B is just a `variable`, maybe a `variable.variable` or `variable()`, but not a `variable[number-or-string]` (too brackety) C is just a single condition, which is roughly that small if any of those are too complex, then I'd switch for a loop, or a pipeline (e.g. what `toolz` provides). - - - I personally don't find syntax conflicting with explicit/implicit stuff. Its a sequence of characters which operate the same every time, with very expected results. If it makes me stop and think, then, to me, I think it might be more associated with how its used, than the base construct. Then again I might of just been using python for long enough that I no longer know what good design is!
Videos in this thread: [Watch Playlist &amp;#9654;](http://subtletv.com/_r511i1f?feature=playlist&amp;nline=1) VIDEO|COMMENT -|- (1) [Fear and Awaiting in Async (Screencast)](https://youtube.com/watch?v=Bm96RqNGbGo) (2) [David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015](https://youtube.com/watch?v=MCs5OvhV9S4)|[5](https://reddit.com/r/Python/comments/511i1f/_/d78v4r5?context=10#d78v4r5) - This is a good summary -&gt; This one is a bit more in-depth, but I found a lot of the yield from stuff confusing. Now I just trust that asyncio will do what it is supposed to do. [A Playful Introduction to Rx by Erik Meijer](https://youtube.com/watch?v=WKore-AkisY)|[1](https://reddit.com/r/Python/comments/511i1f/_/d793soz?context=10#d793soz) - Ah excellent. High time! Some people in this thread seem to be unclear about its import (hah!), so here is a brief explanation. You are likely familiar with the notion of iterators and iterables in python. Separately, in concurrent programming,... [Fear and Awaiting in Async: A Savage Journey to the Heart of the Coroutine Dream](https://youtube.com/watch?v=E-1Y4kSsAFc)|[1](https://reddit.com/r/Python/comments/511i1f/_/d7945x9?context=10#d7945x9) - David Beazley just gave a talk on it at PyOhio called Fear and Awaiting in Async which gives a lot of insight about how 3.5 style async/await is used and what's going on with it. I'm a bot working hard to help Redditors find related videos to watch. *** [Info](https://np.reddit.com/r/SubtleTV/wiki/mentioned_videos) | Get it on [Chrome](https://chrome.google.com/webstore/detail/mentioned-videos-for-redd/fiimkmdalmgffhibfdjnhljpnigcmohf) / [Firefox](https://addons.mozilla.org/en-US/firefox/addon/mentioned-videos-for-reddit)
Yeah I'm not really sure what the semantics of this are supposed to be and the syntax looks clunky...
 array.sort() subarray = [item for item in array if condition(item)] How is your rewritten for loop better than this? Do you need array to stay unsorted? sorted = array[:] sorted.sort() subarray = [item for item in sorted if condition(item)] I don't see the problem. EDIT: wow, downvoted without explanation, look up and see you've edited you example without comment so my post makes less sense In that case, where you are filtering a list of lists and then sorting the internal lists, maybe comprehension doesn't work. Avoid using functions that take no arguments and return nothing, it's a bad practice anyway.
First of all, this is a question better suited for /r/learnpython. Next, format your code properly: put four spaces in front of each line to make Reddit recognize it as such. import sys, os.path from_file = sys.argv[1] to_file = sys.argv[2] print "Copying from %s to %s" % (from_file, to_file) indata = open(from_file).read() print "Let's read file: %r" % indata print "The input file is %d bytes long" % len(indata) print "Does the output file exist? %r" % os.path.exists(to_file) print "Ready, hit RETURN." raw_input() open(to_file, 'w').write(indata) print "All done" #to_file.close() #to_file.close() #No need to close file as after read(), file automatically close. Here, I've formatted it for you this one time. And finally: what do you actually mean by your question? I assume you meant "right", but what do you mean by "coding format"? 
Not a joke, and doesn't work in Python 3.
I don't get it.
Very first link when [googling for "python humour"](https://duckduckgo.com/html/?q=python%20humour) is, surprise surprise, [Python humour](https://www.python.org/doc/humor/). (You can even spell it in American if you like.)
This seems like a weird list to keep. I would imagine the number of companies like this number in at least the hundreds if not 1,000+
Why don't you ask your question here so we can answer it here?
Thanks K900_ for reply. I am not sure if following lines are right way to doing coding. like append two function together . os.path.exists(to_file) open(to_file, 'w').write(indata) 
Python 2 isn't installed anymore on Ubuntu 16.04, only Python 3. Kind of annoying when configuring Ubuntu 16.04 servers with Ansible since Ansible only has Python 2 support. (annoying on Ansible's end, don't blame Ubuntu for moving on to Python 3 as the default) 
You can upload binary wheels to pypi if you need to provide compiled libraries. Your answer adds a lot of scope to OP's problem.
Because aliasing real commands is often considered a [bad idea](http://superuser.com/a/384770). 
I think [WebFaction](https://www.webfaction.com/) was also distributed and Python friendly.
Remote needs to be defined. 100% or partial
I think to address your question, it's important to remember your code will generally interact with a lot of libraries that all (potentially) have their own asynchronous tasks to execute. So the value isn't as apparent in trivial examples, but becomes more obvious when your whole stack is running asynch. In a web example, if your code is asynch, it means the server code listening for requests can be more responsive.
Not right now. I will add an option to specify a custom entry point page and also maybe some to allow you to inject CSS/Javascript in to the page at initialization.
Have you used the JupyterNotebooks inside PyCharm?
Partially related, but I am always saddened by companies that have "our team" on their web page and then show only the executives, like the actual machine that keeps things working is just irrelevant.
Always wondered about this.
IMO remi feels like a desktop gui toolkit that emits html/js. flybywire and the other 2 in the same style (pyxly/enaml??) etc feel like react/js mvc shoehorned into python. each to their own I guess.
I down voted it because it includes a bunch of things that are not OO, like the web dev section.
I do not find anything harmful with having a list of companies. It could be very helpful for developers looking for remote Python jobs and it is free publicity for the company.
&gt; Python 2.x is legacy, Python 3.x is the present and future of the language Heh, writing the current version of that line might well be the most influential thing I've done yet…
I gave spyder a new try now. I think I like it more now, maybe I will switch. Even with the shortcomings, I really like the cell system (much more than the notebook one) and I really like that the editor doesn't spend huge amount of screen real estate on nothing like the notebook (i.e I can see much much more code) Thanks for all the effort, For newbies to python I always recommended spyder since it is just one stop shop.
Just use pyinstaller - pyinstaller.exe -F &lt;path_to_script&gt; -p &lt;path_to_dependencies&gt;
Thank you. I'll check it out and add it to the list, you can add it through a pull request if you want. I'll try to verify all of them, which is actually not easy.
Thanks for that, I will try to verify all of them. If you know for sure they do not use Python you can remove it through a pull request.
Very useful. Thanks!
Where everyone can compete for them and knows where they are.
&gt; GPIO, I2C, UART Merci! 
Just one of my own cross-genre quotes. If you play the game of iterators you yield, or you raise StopIteration.
Read Clean Code by Robert C Martin, your fellow programmers will thank you! Personally I've also did a lot of Python on the side, but work market here either requires front-end skills, such as html/css/javascript, that ecosystem will keep you busy for a while. Here they are also looking for people with Java skills (or .NET). Personally, I'm currently picking up Scala, but not sure how mainstream that will become.
Red Hat. And many big companies that work on the Openstack project.
From what I read, it is only for Unix-based OS's (I could be wrong) and I have Windows.
How does your company justify building a new system with a 30 year lifetime with a language version that will be unsupported in 4 years? 
&gt; halves should round towards the nearest even number I never knew this and this seems like a bizarre convention.
This is only because 2.7 is still mandatory in most linux and mac systems. If they upgraded to python 3 this number would drastically change. Python 2.7 is not better than 3, but it will be used simply because it's relied on right now. Just like the reason c is such a popular program: it's been used for so long and many programs simply can't be shut down to upgrade.
are you actually suggesting this is the result of users accidentally installing the 2.7 version when they want the 3.x one?
Rounding is a crazy rabbithole, seriously, checl out rounding on wikipedia, itll blow your mind., but bankers rounding, aka round to even is better than the commonly taught/used round up at 5 methods, since it doesnt skew the values in most cases, like common rounding does.
https://weworkremotely.com/jobs/search?term=python
Which state?
Has Canonical said at what point apt-getting "Python" will default to 3+, v. 2.7?
This may be the dumbest thing I have ever read.
so, are you suggesting this then?
Can i find your company on google? If yes, your statement is dumb, if no it likely won't appear on the list anyway.
I was hired as a junior python programmer recently. In my first month I wrote a lot more javascript than python, also touched some C++, both of those languages are always close to python jobs. You should also know SQL, git, bash/shell and stuff like that
They can implement their vision by themselves then... 
I'll again direct you to /r/learnpython. A lot of commenters don't seem to be familiar with numpy, so maybe I can help you out there. Loops are an anti-pattern when using numpy's arrays. Try to avoid them, as you're essentially ditching all the power of using a library with a C backend by constantly converting to and from Python types. You should never directly access anything that starts and ends with a double underscore. That is by definition a hack (so it's fine if you know you're hacking). Dunder methods should be accessed indirectly by language features like the for loop. This is the Pythonic way to do what you want: for p in peaks: threshold = samples.data[p] - prominence l_bound = r_bound = p while samples.data[l_bound-1] &gt;= threshold: l_bound -= 1 while samples.data[r_bound+1] &gt;= threshold: r_bound += 1 # do some thing with the range l_bound to r_bound etc... I'm curious to know why /u/zahlman reached for generators when a simple while loop will suffice. ---- Also, you can abstract out the bounds-finding process: def find_bounds(array, peak_location, threshold): l_bound = r_bound = peak_location while array[l_bound-1] &gt;= threshold: l_bound -= 1 while array[r_bound+1] &gt;= threshold: r_bound += 1 return l_bound, r_bound for p in peaks: l_bound, r_bound = find_bounds(samples.data, p, samples.data[p]-prominence) # do some thing with the range l_bound to r_bound etc... Which will let you slap a `numba.jit` decorator onto the `find_bounds` function if this becomes a bottleneck in your code.
I don't know about you but I'm paid for my "grunt work" and prefer that arrangement
I'm not sure why you're treating both approaches as mutually exclusive. Having multiple processes using asynchronous IO will be faster than anything you can do with either approach alone. That's how nginx and Tornado do it and they are pretty darn fast. You can usually get away with just throwing a ton of processes at your problem, but if you want to maximize your throughput, why not use both approaches?
Oh so you did mean the C language. C isn't used because systems can't be shut down to upgrade. New software is written in C because it's just faster than all the relevant competition. Rust is coming for C's domain though, and I hope it succeeds.
Not always. You are saying a bunch of things that sound nice that dont always play out in the real world. The reason you don't do both, is TINSTAFL. How does async work? You need to add in memory barriers and synchronized points, both of which can stall the CPU. All else being equal, code without memory barriers will do more work per millisecond than code with memory barriers and locks. I have nothing against async. I do have it being added Willy nilly without people understanding all the implications of doing so. Someone suggested using async for a scraperbot. So I challenged them to a code off. There is a very good chance I can get MORE performance without using it. Async is good for some stuff. You can't just slap it in code and call it optimal. Edit - read http://techspot.zzzeek.org/2015/02/15/asynchronous-python-and-databases/
In a sense this is really a parallel python, not just a concurrent one.
Which is yours?
Also answering to myself: maybe it's better to think of async as a modifier. It would have been unfair to judge, say, java profusion of class constructs on the basis of the combinations of public/protected/private, static, final, etc.
Yeah, that was a pain when I was doing some work on the HAWC project and half the software stack was hard coded for */usr/bin/python*
&gt; the reason c is such a popular program Uh. No.
&gt; I'm curious to know why /u/zahlman reached for generators when a simple while loop will suffice. Because they're awkward for searching tasks when indices *aren't* involved, and I hadn't clued in that they'd be necessary here anyway. :) But even when you need an index at the end of the process, it's debateable whether it's most Pythonic to compute using them.
Java, C#, and web development skills will pay the bills pretty well, but may or may not be interesting to you. Software development is really a pretty diverse cross section of skills and needs.
Hahahaha "vision"
Ah. The while loop look-ahead is a common pattern I've come across doing feature analysis on data. I'll keep your pattern in mind for future use, it'll probably come in handy.
Really? It was by default in my variant. Does that mean Ubuntu main is now doing python3 by default? 
I've been using [testflo](https://github.com/naylor-b/testflo), written by a coworker of mine. It's very fast. It's basically stable parallelizable unit testing via MPI. Runs great on Travis too.
 0.5 + 1.5 == 2.0 // float round(0.5) + round(1.5) == 1.0 // Python 2 round(0.5) + round(1.5) == 2 // Python 3
Once, I got my photo on our company's website. I wasn't an executive but it really made me feel like I had "made it". 
Pyglet has a simple "future_round" function in one of the modules to work around this: def future_round(value): """Function to have a round that functions the same on Py2 and Py3.""" # TODO: Check if future can replace this (as of August 2016, it cannot). return int(round(value)) This quick hack works in that the results are consistent, but it would be nice if the __future__ module had a round function. It doesn't, right? 
Can you name a few of these serious flaws, and what languages handle them better? 
That's because there's nothing on row 3 and, thus, that row is left out when placing the elements where they belong, as it says [here] (https://mail.python.org/pipermail/tkinter-discuss/2006-November/000965.html): &gt;Grid will always compact your GUI: if you grid something on row 3, and rows 0..2 are empty, everything is pushed up. If you add a widget at row 2, row three goes down one level to make room for row two. Similarly, for columns to the left. They suggest using a placeholder (maybe an empty label?) in the row that you want to show blank. Edit 1: you should use [Pastebin] (http://pastebin.com/) or simply paste and format your code in your post instead of linking to a screenshot. I (and I guess others, too) find it easier to read it that way and it's also easier to copy-paste it in order to edit it and provide a solution for your problem, if needed (as opposed to having to type it all). Edit 2: I forgot to type a word.
If you're considering into web development Javascript is required for front-end. You could also try Go to add static language in your toolbox.
[removed]
My two cents: it is an uphill battle already getting into AI/data science for most college grads (undergraduate and above). The math required isn't really something you learn on your own. You could certainly be somewhat of a data engineer, but when I think about the usual Venn diagram of data science, that would only satisfy one of the circles. The math/stats and business knowledge are just as important, no matter how good a coder you might be. 
I LOVE PYTHON
&gt; it's going to be a toy and doomed language .. Perl. You want to know how I know you have no idea what you're talking about?
Was good for me to read up on that standard and this post. Excellent information. https://en.wikipedia.org/wiki/IEEE_floating_point#Rounding_rules The standard has been around since 1985 and was recently updated in 2008. Languages do offer options: https://en.wikipedia.org/wiki/Rounding#Rounding_functions_in_programming_languages Several languages follow the lead of the IEEE-754 floating-point standard, and define these functions as taking a double precision float argument and returning the result of the same type, which then may be converted to an integer if necessary. This approach may avoid spurious overflows since floating-point types have a larger range than integer types. Python's decimal module helps you control the behavior you desire. https://docs.python.org/3/library/decimal.html#decimal-faq The context for arithmetic is an environment specifying precision, rounding rules, limits on exponents, flags indicating the results of operations, and trap enablers which determine whether signals are treated as exceptions. Rounding options include ROUND_CEILING, ROUND_DOWN, ROUND_FLOOR, ROUND_HALF_DOWN, ROUND_HALF_EVEN, ROUND_HALF_UP, ROUND_UP, and ROUND_05UP. It appears that Python is following convention and standards here. It's up to us to learn these things to have predictable and consistent behavior.
Most of your first points are ecosystem related. There are plenty of ecosystem and third party library issues, but Python is not alone in this. Numbers 5, 6, and 7 are just design decisions. You may not like these desicsions, but that's what it is. I feel like Python just isn't the language for you, and that's fine. Lots of vereran programmers who've been doing this for 20 years are using Python happily because they just want to get things done. You might not think Python is ready for the enterprise, but the fact is that Python is already all over the enterprise. 
Would a RPi be suitable for this project? when you say "controller," what do you mean? 
Full paths to things like sh, python, docker, etc. is what I mean. And sure, maybe you couldn't relocate your project without a bit of editing of things. But safer still, no? Again, maybe I'm just paranoid.
A couple of the best engineers that I know dropped out of high school and are self educated. I like to think of programming as a trade like nursing, plumbing, blacksmithing, carpentry. We start as noobs, and then level up through apprentice, Journeywoman, Craftsman, and then Master Crafstwoman. I'd suggest picking projects and working on them. Volunteer at a startup for 3 months, and you'll learn a ton. Or, pick a mid tier open source project and start trying to submit bug fixes. Or, simply start by building documentation for a project. Documentation is a highly underrated skill. Learn HTML+ CSS and try building a series of web scrapers, and you'll back into a lot of data science. You'll also learn skills help if you're going to start as a web programmer. Programing languages and projects I'd consider: Spend a few weeks learning C, then do a few Arduino projects to get you excited about lower level programming. Spend a few weeks using a Lisp. I like Scheme. If you have spent time in Java land, definitely give Clojure a try. Try some time with some an ML language. OCaml is nice and there's a fair bit of beginning tutorials to get you up to speed. I also really like what Microsoft is doing with F#. It's a very underrated and underused language. I've heard Prolog is interesting and mind expanding. It's on my bucket list. I love Erlang's approach to concurrency, although some find the syntax troubling. If so... try using Elixr, which is a Rubyesque syntax on top of the Erlang VM. Spend a lot of time getting to know a database and SQL. I'm a particular fan of PostGres. CS programs tend to underteach DB's and they're a standard tool in every programmer's toolbox. Then, focus on a language that's very library heavy. Pick c# and Java and build a project with it. I'd suggest a basic Android app. Swift and iOS. Try building a basic iOS app as well. Then, read widely.... not just programming books, read Shakespeare, classic literature, read comparative religions, study art. I've recently been reading a ton of economics and macro-economics. Your value as an engineer to business grows exponentially as you become an expert in additional domains alongside programming. Study improv or take some theater classes at a local community college. Being able to talk and communicate ideas clearly is essential to any kind of programming job. It's shockingly a surprisingly social undertaking. Writing. Write a blog. Try to get articles published. Writing prose clearly increases your value as a programmer exponentially in any business or organization. 
sounds horrendous to me..
I'd be happy with a JSON that allows whitespace and comments. I love YAML but it sure does get weird.
1stly - well done on getting your script working - it is a very satisfying process, isn't it. Some comments : 1. Split your functionality into functions, and don't make functions more than 10-20 lines - and remember that functiions can call other functions. Candidate functions would be at least one for each dxtype. 2. You have 4/5 separate loops around ``modelspace`` - where as it is better style to have one loop, and use an ``if`` statement within that single loop to identify the type of elemet and process as required (see functions above). 3. Use context managers (``with`` statements to open and process files and other resources) to ensure your code handles errors correctly.
lost me ...
This has nothing to do with rounding. This happens because floating point numbers are stored as x * 2^y. At the point that `y` becomes bigger than the number of bits in `x` (so 24 for a 32-bit float, 53 for a 64-bit double) a change in the least-significant-bit (LSB) of `x` will cause an increase of 2. When `y` increases again, the LSB will be worth 4. Another increase and the LSB will be worth 8. Yes, you could say that you're being rounded to even numbers, but it's nothing to do with the rounding mode. If you switch to "round to odd" mode, you'd still only get even numbers in that range. Those are the only numbers that can be represented.
Did you use access token? or did you enable the publish action permission in your app?
Why not? Having candidates come to you rather than the other way round can save a lot of headaches.
I've sent you a private message :)
I cant use the right "publish action" as i have to request a facebook approval for that. But î dont know how to, as i explained. 
... Can't you use decimals?
I use pycharm right now, and its preatty good. I also hace use aptana that it's a version of eclipse but not with good results. I also use vim, but only to touch code in remote, in case of emergency. It's not that I have anything agains vim, but as far as I'm Windows developer 'thats a must for my company' It more clean to me work with pycharm, or any other IDE in the future.
Assuming you are not being sarcastic, that isn't a bug with Python. It actually goes all the way down to hardware level and affects multiple languages. If you study computer science at university you will be taught not to use equality opertators with floating points. This is also why we have decimal libraries. You should read [What Every Computer Scientist Should Know About Floating Point Arthimetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html). If you were being sarcastic, ignore my message.
People with vision: Mao, Stalin, Pol Pot. Biggest vision wins?
I expect the point is rounding decimals is specified as [one of 8 modes](https://docs.python.org/3/library/decimal.html?highlight=decimal#rounding-modes) via either the context or a parameter to Decimal.quantize, rather than being whatever random thing round() does.
So is this in Python 3.5 currently or is it just a proposal? 
Do you have a company? Do you know how much tech companies are willing to spend to recruit? This is free advertisement.
I down voted you because you focused on the method being called "sort()" which I explicitly said was not the purpose. It could have been called "snorlak()" instead. My point is that a simple extra requirement to the list comprehension does that one have to rewrite it anyway. It was not a specific qualm about sort() vs sorted() in list comprehensions. I edited the code because I made a bug in it :-S but I did not add en "edit: xxx" to the comment (i should have) because it made no difference to the point I am trying to make. It was not a cheap shot at winning an argument by misrepresenting facts. Also I do use list comprehensions, I just don't find them useful enough that I would have added them to the language.
The same goes with pygame instead of pyglet, but that may just be me.
 -0.5 + 1.5 == 1.0 # float round(-0.5) + round(1.5) == 1.0 # python 2 round(-0.5) + round(1.5) == 2.0 # python 3 Rounding inevitably changes the end result of calculations, that's the whole point of doing it. The reason for the round-to-even convention is that it is less likely to consistently skew your end results in a particular direction. For example, suppose you are collecting, rounding, and storing a long list of positive numbers, and then at some point you calculate the average of all of those numbers. If numbers ending in .5 are always rounded up, then slightly more of the numbers will have been rounded up than down, and your average will be slightly higher than the true average. With the round-to-even convention, it should be roughly the same, assuming that there are just as many &lt;odd&gt;.5 values as &lt;even&gt;.5 ones.
And if the first one hangs? Your whole app is stopped waiting. What if you want to update the gui while downloading? What if you're throttled to some low bitrate per connection but have more total bandwidth?
`pygame` installed manually through mercurial or a [`.whl`](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame) offers you an up to date library. Latest pyglet release on PyPI is soon to be one year old...
 import math def round2(x, d=0): p = 10 ** d return float(math.floor((x * p) + math.copysign(0.5, x))) / p http://python3porting.com/differences.html#rounding-behavior
Ah, nice, thanks.
Your experience will vary from mine, but: I learned almost everything I know in this field from IRC chatooms. I was surrounded by professionals and/or obsessive nerds. I spent 3-4 years studying alone (no school), comparing my skills to theirs, until I felt ready to take a junior position. When I finally entered the industry, I was shocked! Everybody sucked compared to those IRC guys! My salary *quadrupled* in the first year. Obviously the lesson there is to keep learning, but also don't wait, and don't undervalue yourself. I think if you really enjoy it, this industry will treat you very well, wherever you are.
This is a post for /r/learnpython. Also, explain what's the exact problem you're having, and what you have already tried to solve it.
- Started reading... - Hit 'Installing Pygame' - Stopped reading. pysdl2? pyglet? kivy? panda3d? Literally anything is better than the crash-fest that is pygame in my experience with it. :/ 
/r/learnpython
Just pip install pygame. They've got it working finally. Your point about pygame being more actively developed is still true.
if you're applying to google, fb, ms, etc. there are guides online you can search for. some of the best are on university websites. some of them have lists of popular programming questions you can memorize. these companies might be your best bet since they can accommodate non traditional backgrounds, startups probably have very little breathing room to do so. other than that, it's tough if you don't have any relevant experience. given you're an engineer... matlab? r? excel and vba? these count too.
Thanks for sharing your experience with me. I am currently studying on Udacity, when i finish some courses and practice for some time i will try to get a junior position or an intership, i wont undervalue myself. This is my first post on reddit and it's nice to see how the people helps each other here. Thanks for your time
Can I ask what kind of scripts you write with numpy? I've got a maths / stats background (current undergrad) and have covered the basics in python but haven't really used numpy much and want to start working towards mathematical / scientific computing a little more.
"controller" in this context is basically the selected onboard computer, which in addition to logging may also perform some power management functions (like battery charge management). A raspberry pi is possible, it just wouldn't be my first choice. There is a discussion [here](http://space.stackexchange.com/questions/15099/is-the-pi-really-fit-for-outer-space) that may interest you. The biggest thing for me would be the power draw requirement for the RPi (half an amp at 5V ~ 2.5W).
Wait, isn't the latest stable `pygame` release 7 years old now? The last stable `pyglet` release is, as you say, 1 year old. There isn't PyPi packages for pyglet 1.3, but from the looks of it they both seem to be in equally active development: [PyGame commits](https://bitbucket.org/pygame/pygame/commits/all) [pyglet commits](https://bitbucket.org/pyglet/pyglet/commits/all)
Take a look at [Flask-RESTful](https://flask-restful.readthedocs.io/en/latest/).
Can you tell which irc i could join? As someone who is working and learning at the same time, it would help me a lot. I sometimes frequent discordapp and have got help there sometimes..
Short Answer - Nothing. I say this based on experience since so many people in this field talk a lot but know little to nothing as far as actual work is concerned. A Slightly longer answer: Confidence, and an ability to learn things on the go. No other field in engineering has as much free help in the form of documentation, youtube videos, free courses, sample code, open source projects etc as programming and web design. My suggestion to you is to build your skills simultaneously while searching for a job. Create a list of websites and applications you admire, and try to create a sample application similar to that. Build a small portfolio and showcase it to potential employers. For instance, since you have posted on python subreddit, check out 1) Learn Python the hard way - by Zed Shaw, a free online book which highlights the best way to learn python - by making coding a regular habit. 2) Also check out [PyMotW](https://pymotw.com/3/) Learn a topic and convert it into an exercise and try doing the sample application without looking at the above site. 3) Check out the [PyGame and some amazing free books on it](https://inventwithpython.com/) 4) Check out youtube videos on things like Django and Flask. There are some pretty good tutorials to get you started with. From my experience, the web has a lot of great sites to help you learn programming (whether it's web, mobile, console etc) The key is to focus on one small application at a time - and to be able to slowly finish the job you set out to do. Make programming a habit by trying to write some code every day. Learn how to use linting tools and python best practises (There are linting tools and style guides available for most mainstream languages online ) Just google it. Learn how to use Git ( and web hosting sites like github, bitbucket etc ) Learn how to deploy applications to sites like AWS, Heroku etc. There are simple tutorials to get you started on both of the above sites for free. It's a fun journey. (from one old former chemist to another. Good luck )
Huh? Pygame works great. I've written thousands of lines of code with Pygame, maybe 20 different (small) games... 
Find some open-source projects you're interested in and find a way to contribute, even if it's minimal, to that project.
all true
Clean Code should be required reading in all CS programs.
Awesome, thanks for the feedback. I have some followup questions/comments if you don't mind. * I'll break it up into functions. I'm not really sure why I didn't in the first place. I've done some larger projects for work so I'm familiar with that. Where does the 10-20 line suggestion come from? Is it in pep8 somewhere or just a 'best practice' thing? * Single loop makes sense. I'll do that soon. * This point is what I really came here for. I never think of things like error handling even though I see it brought up all the time. This seems like a good little project to get some experience implementing it. When I implement some changes I might just reply to this post again to give you a heads up. Thanks.
It doesn't harm. Some editors read it and, without it, they could use a different default encoding. I usually indicate the utf-8 encoding, even if it is implicit for Python 3.
I've always seen anonymous (lambda) functions as more of a replacement function. e.g. replace this string with its all caps version (lambda x: str.upper(x)) Partial functions are much much more flexible. A good example is for Python code that shells out to run a command. Usually it looks like: subprocess.Popen([cmd, as, a, list], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env={environment variables to pass} ...) and that's a really long entry in your Python, especially if you run it over and over and over again. So, you can do: run = functools.partial(subprocess.Popen, stdout=subprocess.Popen, stderr=subprocess.Popen, env={env}) and then your Python becomes much simpler: run(['ls', '-l', '/etc']) and if you need to overload any of those arguments, you just do it in place: run(['ls', '-l', '/etc'], stdout=open('/tmp/out')) etc. 
Personally I liked Flask-RESTPlus better.
For extra practice, pick a project on github/bitbucket/... you can be passionate about and dive in. Pick little things to do and contribute. Even if you know very little, you can always do something, even if it's just proofreading stuff. Once you gain better understanding, pick more difficult tasks. And ask people what you can work on. 
As far as a user can tell, usually the repr method. Effectively, a lot. Partial is a full object and it'll do stuff like reduce repeated keyword arguments (last one wins). I find its more useful if I'm going to repeatedly reuse the partial. If I just need to curry a callable for a single use (say a callback for one object), then I'll use a lambda. 
Hug is pretty good
I know it won't convince you, but with bottle you can reduce the typing a bit: from bottle import route, run, template @route def hello(name): return template('&lt;b&gt;Hello {{name}}&lt;/b&gt;!', name=name) run(host='localhost', port=8080) If you do not provide a path, the route decorator deduces the path from the function name and its parameters.
1. Use pip and conda, problem solved. Also let's have a little talk about Maven. 2. "I care about my program working correctly the first time, and every time" - Never happened to me. 3. Even if you install the same versions of numpy etc? 4. "You can write a function and I could mock that data type to something different and make your program cluck around like a chicken if I wanted" - you can also os.system('rm -r ~/*'). Also, if a function takes an interface then I can implement the interface to cuck like a chicken in just the same way, and common knowledge says that passing interfaces around is the right thing to do. 5. Yeah that's weird. 6. Try assertSame(200, 100+100); assertSame(400, 200+200) 7. They aren't. [[]] * 3 is the same as creating one ArrayList and adding it to an ArrayList three times. 8. Could you give an example? &gt; Python is not ready for enterprise anything. I've used enterprise Java before. Oh god it was horrible.
It took me about half a year of programming to get a job (before that it was just week to three weeks long bursts). After a month they seem impressed, at least compared to their expectations. I asked for very little money though, just to get by. Point is, at least here (Czech) programmers are always wanted. We even have bounties for recommendation internally.
Flask has [MethodViews](http://flask.pocoo.org/docs/0.11/views/#method-based-dispatching) that work like you want.
From PEP 8: &gt;Files using ASCII (in Python 2) or UTF-8 (in Python 3) should not have an encoding declaration.
Possibly Flask with http://pythonhosted.org/Flask-Classy/ would be to your liking.
If vision is so easy to come by, why haven't you started your own company yet?
&gt; I never knew this and this seems like a bizarre convention. It only seems bizarre because the curriculum set by the abjectly terrible US educational system didn't teach us mathematics properly - Ideally you should probably flip a coin to break the tie, but that's tedious - Rounding to evens/odds is about the best deterministic thing you can do - Rounding "away from zero", as we were taught, is about the most mathematically idiotic thing you can do
They say about third of RH's employees are remote workers 
Oh good point about the file and misc variable names, I think I poached some code from a tutorial somewhere. I can easily go through and make it a bit more readable.
And this is related to being considered as part of the team how? They have the vision, I make it happen. Without them, I don't know what to code. Without me, they can keep dreaming of their vision. That's why companies happen, because a single person can't do/is able to do everything. Still, it costs nothing to put my face and name on the website, because I __am__ part of the team.
I have made the switch to Python 3 but this sort of shit is why I will probably make the switch from Python in its entirety. Yes the IEEE is a great high school debating defense, but the simple reality is that 99% of people agree, and will be wildly pissed off if you round differently than the vast majority of the world. You simply don't change something this fundamental in a language unless you hate your users. What python seems to forget is that languages come and languages go. We have choices. There are new programmers every day and they will be making choices as to which languages to use. They will hear more and more about the whole 2.7 to 3 battle and say, "I just don't know which? Maybe I will pick a language that isn't at war with itself." 
Thanks so much for the detailed explanation. Thanks also for explaining how to use Reddit for these kinds of things. Really appreciate it.
You have been voted into near non existence and this does not bode well for the future of python. You are 100% correct. When you tell your customer that there is some obscure (to the bulk of the planet) standard and that now you are following it and that they are fools for not following it, you soon won't have a customer. Yey, Python just made some obscure math or CS professor happy, and in doing so has made life harder for millions of programmers. If this isn't losing the plot entirely then I don't know what is. Since I can hide behind your negative vote. I have a few other python gripes. Why so slow? I hear all the arguments and then look at other scripted weakly typed languages like javascript go so fast you can write an entire OS in them. The best part is that there are a gang of people arguing that if you want python fast then you have to strongly type it and strongly type it to their bizarre standard. Why so complex? The whole thing about python is that it is pseudo code that runs. But now the "pythonic" way to do things is to pack 800 lines of code into one comprehension that nobody can comprehend. WTF? The only thing that python now has going for it is the saying, "There is a library for that" but even that is beginning to break down as I find more and more libraries that are just not sliding into place with pip. I will pip install x and then get an error dfhadkfhjalsdhf. I will then google error dfhadkfhjalsdhf and it will turn out I am missing libWTF. I will then install libWTF and now pip install X will give me error a;dk;hadf and around and around I go. Then when I am done I will import X and it will say, "There is no module X" Not only does python have competition, but there are some seriously interesting languages coming into view. Swift has some serious momentum. If it becomes a replacement for Java on Android then watch out. C# is making crazy inroads in all kinds of interesting places such as games, and even linux. Then, just as the world turns, there will be more. 
I'm a structural engineer who had no formal education in programming, or any large projects to show. I had some linux/bash experience (gentoo from stage 1...). Had administered a gaming clan's website, and understood concepts like client vs server side code, http/email headers, post vs get, internal vs external IPs, etc. Had made a basic UI for rapid member size selection in visual basic, and some other fairly basic things. But it was enough to land me a job in tech. It's been near 7 years and I'm ultimately glad I made the switch. And as someone who's done a fair amount of interviews, your passion for computers and learning matters vastly more than education. Creatively automating your job will score you high points. I can't tell you how many graduates I've encountered who didn't understand any of things they were doing worked, but had just gone through the motions. 
`print("Hello World")` Alright, now you know more than your future boss does.
I used to hang out in efnet #java (brutal but competent people) and #win32 (had some real aces like the two guys who made the 3D engine still used by Grin and now Starbreeze and Ludvig Stragaeus). Probably a very different world now though. That was a long time ago :P
With a CI system and virtualenv this isn't a a problem. But yea, Python isn't great. It used to be much worse though :P
&gt; Compares to node... The language/ecosystem has little to do with your issue, assuming in node the package maintainer forgot the `--save` you'd have the same issue. In Python we have pip and typically a "requirements.txt" file that is somewhat of a similarity to the "package.json". Update the requirements.txt by getting your local dependencies up to date with pip, run `pip freeze &gt; requirements.txt`, validate in a clean environment and put in a PR to help them :). Maybe update the read me with any other requirements that pip can't satisfy. (If you're not using a virtualenv to isolate yourself from the system, you should). Just a tip, in the future before calling something "shit" try to understand circumstances, the overall design, and allow for some element of human error.
I've had pretty good luck with it. And it does look pretty close to what OP was asking for: from flask import Flask, request from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) todos = {} class TodoSimple(Resource): def get(self, todo_id): return {todo_id: todos[todo_id]} def put(self, todo_id): todos[todo_id] = request.form['data'] return {todo_id: todos[todo_id]} api.add_resource(TodoSimple, '/&lt;string:todo_id&gt;') if __name__ == '__main__': app.run(debug=True)
I do both. I have a `requirements.txt` that install everything I need to run the project; `setup.py` reads the file (with `readlines()`) and sets that as dependencies; for development only dependencies, I have a `requirements-dev.txt`, whose first line is `-r requirements.txt`. So, if you're using PIP for development, `pip install -r requirements-dev.txt` should install everything you need; if you want to install it yourself, `pip install -r requirements.txt` should do the trick; and, finally, using `setup.py` should mirror the last bit.
I haven't yet. It's why I've been asking people about it.
Indeed, I use it all the time. For visualizations and prototypes it's super fast and easy to get something done. And when I'm teaching beginner/intermediate programmers, it's the best solution I've found for learning gamedev basics. I've been periodically looking at pysdl2 and pyglet for the past couple of years and it feels like there's hardly anyone using them. If there's a community out there, it's pretty silent. /r/pygame isn't huge, but you will get help if you post there. /r/pyglet has only a few posts per year, while pysdl2 doesn't even have a subreddit. Panda3d is nowhere near beginner friendly and massive overkill for simple games. Kivy is promising, but (imo) isn't there yet. Pygame has its problems, but accessibility and stability are *not* among them. Plus it's easier than ever to install now - 'pip install pygame' and you're good to go!
Thanks for your answer, i will look into all that you said. I really like the advice of looking a job while stuying. I will like to hear your experience with changing your field from chemistry to programming, it will be of great help to me!.. i will send u a pm that you can respond anytime yo want
I readed some jobs offers that ask you for your Github link. I will get into that too. Thanks for your advice 
It's good to know that, beacuse that's in what i excel
it was hard to you to throw away your carrer on structural engineering?. i am thinking in switching from chemical engineering to this field.
Sure. Feel free to PM me in case you are interested in my back story.
Should a gas station attendant or a stockboy at a grocery store be featured prominently on the website of their company? Why you the developer? Why not the guy in the mailroom or the facility people keeping your building in order. Where does attribution end? See, if you weren't there developing, someone else would be. On the other hand, if the CTO or CEO weren't there, the company wouldn't exist.
Yeah another poster told me to check out the wiki on rounding - it's way more of a rabbit hole than I would have guessed!
Where I am, all employers require you to have at least a masters degree, as well as 10+ years of verifiable paid experience. Prefered hiring to applicants who have 5+ years experience in a technology that is only 3 years old. All of this, for $12/hr. So, my 20+ years of serious hobbyist programming experience isn't anywhere near enough for employers to even begin considering me.
Has anyone developed a bullet hell type of game? I would love to do a project like that but I have no clue how to start.
A closer comparison you could make is functools.partial to currying with the toolz package. Currying allows you to place the @curry decorator before any function, and it will automatically do partial evaluation if you call it without providing all arguments. It's syntactically cleaner, but requires a third-party module.
What? That's crazy. Thanks for pointing this out. I would never have guessed this behaviour. How does this make sense? The n is scoped inside the list comprehension. When is the n inside the lambda evaluated?
I've done both for multiple years. I actually really enjoyed it. Everyone has a right to learn new things! At least that was my mantra. ;-) 
From PEP 8: &gt; Files using ASCII (in Python 2) or UTF-8 (in Python 3) should not have an encoding declaration.
Bad decisions should not be cast in stone. Rounding as is commonly taught in schools is a bad decision. The math standard library round was also a bad decision. It had to be corrected. Python has a big scientific community and there isn't a disagreement about which way to deterministic-ally round numbers. So you ended up with *math.round* doing one thing and *numpy.round* doing another -- that can have bad surprises. Python 3 fixed that.
What do you mean by "as just functions"? Do you mean def run(cmd): subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env={env}) That's mostly as nice, but if you know what partial does, they're about equally understandable. Plus, `partial` lets you do other things, like `run(cmd, stdout=somethingelse)`. You *can* do that with just a function, but you have to remember to do it and it's no longer quite as nice: def run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env={env}): subprocess.Popen(cmd, stdout=stdout, stderr=stderr, env=env) At that point I think it's clearer to use partial to make it clear what you're really doing. Plus if you go ahead and do just functions, you can end up with weird issues: actions = [] for i in range(10): actions.append(lambda: print(i)) for a in actions: a() prints 9 9 9 9 9 ... where either actions.append(lambda i=i: print(i)) or, not relying on people understanding the idiom so much, actions.append(partial(print, i)) would both print 0 1 2 3 ... Beyond those two things, there are several other niceties that `partial` adds in, such as a readable `__repr__`.
Where is this?
Author here if you have questions, just released it right now
Did you sudo pip install?
Why not do a print function inside your objective function?
The other posts gave me hope as a new developer. Your reply on the other hand makes me think you work in academia, China, or are trolling
Just my two cents: Looks interesting but I am a bit concerned by the heavy bloat of Tornado, and the front facing portion in general (TypeScript, SCSS, do you really need these for simple project like that...), just don't think a simple tool like that should be so heavy.
Petrochem?
Is this like the Seattle/Bellevue area? $12/hr? With your level of experience what's stopping you and picking up and going elsewhere? Your scenario seriously sounds like a Chinese coding sweatshop. Edit: A word.
I tried that already. It's basically the same, as I am doing now. The simple problem is, that the objective function printout does not decline monotonously, as the objective is probably called multiple times for gradient evaluation. 
This outline assumes you already know at least a little bit about pygame (e.g. how to draw stuff to the screen, move it during the update loop, etc). * Get a bare-bones pygame skeleton running. Like, it just brings up a window, that's it. * Draw a sprite to the screen * Put in controls so you can move that sprite around * Put another sprite on the screen. Rather than have it controlled by the player, the computer controls this. Have it pick points to move to, move to those points, then repeat. * Put many other sprites on the screen. Take everything you did in the previous step and make it general, so you can spawn as many sprites as you want. * Add in collision detection. Your game is now about avoiding all the other sprites on the screen. * Add in respawning for the player, lives, basically a gameplay cycle. * Let the other sprites shoot at you: * Realize that a bullet is just a special case of a sprite on the screen. * Have the enemy sprites spawn a bullet sprite every so often. * The bullet sprite starts moving to where the player was when it was fired. * Add collision detection for the bullets * Remove the bullet sprite when it goes offscreen Congrats! You've got a very basic bullet hell shooter.
Well there is the callback method that SLSQP does have http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.optimize.fmin_slsqp.html Which will do pretty much the same thing. I'll take a look when I get home, I usually find SLSQP doesn't work well for me. 
can do pub/sub and RPC with minimal application code
meanwhile here in chicago my company can't find nearly enough developers. We've been hiring for over a year and still need more.. And we don't require a masters, or 5+ years experience, and we don't pay 12$ an hour....
I agree, error handling is not yet done, I didn't even test for them right now. For VOID_TAGS, elements like `&lt;br&gt;` don't work correctly if you do `&lt;br&gt;&lt;/br&gt;`. This is gonna be parsed as `&lt;br/&gt;&lt;br/&gt;` (two line breaks) by the browser. So, I have to check the tag to know how to handle the rendering.
I am the author, as it was my first Python project it was really messy. I think I will go over the code and make it pretty, I have done a lot more Python since then. 
I am the Author, I have done more python now so I will go over it and tidy it up (however I will not have access to a computer to code on for the next few weeks). I will find some time to fix this as looking at it now it looks so ugly and probably could be done much better, although I have not done much Regex since this.
Thanks for the feedback. I generally agree with you - it can be done in a much leaner way. Wtee was forked off from [tailon](https://github.com/gvalkov/tailon) and shares many of its design choices, even if they do not apply to it perfectly. Here's why things are the way they are: Browser and proxy support for websockets was funny in 2013. SockJS provided a reliable transport and tornado-sockjs looked like the best maintained backend at the time. Tornado is a fairly light dependency, imho, at least in comparison to Twisted (which was the other alternative with SockJS support then). The tailon frontend went through several rewrites. First it was plain javascript+jquery spaghetti. Then some SCSS to help with styling (tailon has more ui elements). Then structure was added with Backbone.js, which I couldn't understand after coming back to the project after a year. I settled for rewriting everything in Typescript with as few external dependencies as possible. This is all of course overkill for wtee, but it made sense for tailon. The frontend code and the build pipeline is just the same for both projects. I do hope to have the time to look into ways to make wtee lighter on dependencies. I would certainly like to lose some of the tailon baggage, although I must admit keeping things similar helps with maintenance. What alternative to tornado/sockjs would you choose? Handling FDs asynchronously is easy enough with a simple `select()`, but having something like SockJS is too valuable to go without.
My domain is usually speed power curves, NM or LM usually work. If I get into the others it usually implies to me that my model is overly complex or I need to estimate my starting conditions better.
you will find this interesting https://github.com/dropbox/pyxl
[deleted] ^^^^^^^^^^^^^^^^0.1697781490636363 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
[deleted] ^^^^^^^^^^^^^^^^0.9728473772215172 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
[deleted] ^^^^^^^^^^^^^^^^0.9400326253527749 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
As long as you represent yourself accurately, you're good.
Wat. Is this a WSGI joke? I don't understand the punchline at all. Here's a dumb one I just came up with: &gt; A concerned student comes to talk with his teacher. &gt; "I'm having trouble with my comprehension" he says. "There's just so much information, and I can't keep it all in my memory all at once" &gt; The teacher thinks for a little while and says, "perhaps you should try a generator expression". That could probably use a little revision, but it is mildly amusing and might help explain the difference between the different types of comprehensions if you are teaching about them.
I find the generation with string-based templates (like jinja or django templates) to be very limiting. Just looking at [the issues of jinja](https://github.com/pallets/jinja/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-desc) gives you an idea of the problem: - "Support Unicode literals in templates" - "Wrong line number for UndefinedError exceptions bug" - "collapse whitespace in trans blocks" - "Bug: floats are arbitrarily rounded (no filters used)" - "add filter `tojson`" All these problems are solved easily by using templating directly in python.
Have you seen http://lxml.de/lxmlhtml.html#creating-html-with-the-e-factory ?
I didn't see it and it looks quite similar to what I'm aiming for. Thanks a lot for showing me.
Partials bind at creation time, lambdas bind at run time. Lambdas can trip people up as a result when used in a loop because if you refer to a loop value, they use the last value in the loop. But they're very useful for example in UI design and when using class properties because they more closely mimic a standard method and take self. Foo = property(lambda self: self.spam()) Or in the following case it let's me check things at runtime QPushButton.clicked.connect(lambda:self.setState( checkbox.isChecked())) In the last example, if I used partial, the checkbox.isChecked() would be a static value that would reflect the state at when the partial was created, but with lambda it is evaluated each and every time the lambda is executed. 
For `str`, the real problem is that you can't just call `repr` inside the jinja template. That may be useful in many situations. I agree that the learning curve is steeper for a designer used to basic html. I'm aiming more towards backend developers making the bulk of the work and maybe some designers doing a few tweaking (like adding css classes).
[deleted] ^^^^^^^^^^^^^^^^0.024222279771709765 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Have a look at pied piper, pyp https://github.com/yuvadm/pyp Let's you do some really interesting python one liners with a nice syntax. Might be of interest to your project too. ls | pyp "p.replace('maybe','yes') | pp.sort() | pp[1:3] |p , p , p.strip('abc') | whitespace | p[3], 'no' | p.upper() "
Change domains, doing web work write some gui app. Create a client server app or game or you know,pick another language and expand you tools. Life would be hard if we only a hammer to do every task. However there is so much to learn in Python you just have pick an area of study in the real world and start making tools or modeling it.
IMO that contradicts the Zen of Python, "Explicit is better than implicit." Better to be safe than sorry when it comes at no cost. 
I was meaning I can't think of anything else to learn.I think I have a good idea now though.
javascript
Well since it is UTF-8 with python 2, I guess you are supposed to use the coding. 
I wouldn't have imagined that irc would be a format conducive to learning. Could you please share examples of how/what learning python on irc looked like for you? Most of what I didn't learn in school, I learned from stackoverflow and documentation... The immediacy of irc seems very appealing, but I just can't image trying to fit the contents of a full question in that format. How does that work?
Thanks! Got tripped up with that lambda in loop problem and didn't know about fubctools.partial to fix it. Time to remove my horrible nested functions which do thr same thing
It could be said but it would be completely untrue. For every language that has been a success there are 10s, 100s or even 1000s that have died a death with the vast majority of programmers not even noticing that they had ever existed.
Got a posting? 
[An old but still valid quote](https://mail.python.org/pipermail/python-list/2002-November/141486.html)
If you prefer Flask take a look at Flask-RESTful. If you're considering Django there is Django REST Framework.
I have never used pip3. I have Anaconda-Python3 installed. Pip seems to be fetching the python3 versions of packages. 
A lot of people put their homework questions online. Even better, you can just pick any University anywhere, and just download the curriculum of a class or something, and follow those curriculums. That's a good way to practice your skill. Even better, some post the entire work and solutions online. 
Similar to the above poster, I joined a Slack community (http://pythondevelopers.herokuapp.com/) with lots of those obsessive nerds. Some are devs with solid career experience, while some are in a transitional stage like you. The group has been a great resource to bounce ideas off of while working on my first substantial Flask app at work, and even quick one-off scripts I use for sys admin tasks. Come join us!
There is an example of an XMPP client in the Twisted library: https://github.com/twisted/twisted/blob/trunk/docs/words/examples/xmpp_client.py While not the best examples to learn from, there are several tests under: https://github.com/twisted/twisted/tree/trunk/src/twisted/words/test/ There are some examples of how to use this library here: https://metajack.im/2008/09/25/an-xmpp-echo-bot-with-twisted-and-wokkel/ https://github.com/ralphm/wokkel You can 
IRC chatrooms?
I'm like you, learning Java and Python by talking to experts in IRC channels, except without a job in programming. I should really put myself out there some more and get over this imposter syndrome. Thanks for the encouragement
Level 10, but you can get away with level 8 if you've got good enough gear from sidequests. But seriously. I would think about getting a job you're interested in, and finding a way to use and develop your programming skills within it. I always find that the easiest way to learn something is to have a project that requires you to acquire new knowledge. I could not sit down and 'learn programming'. Instead I had to 'create sales reports for multiple stores' or 'map our most influential Twitter followers' or 'notice if our competitor drops the price on any of their products'. Then I went out and got the knowledge I needed to accomplish those tasks. Okay, I don't know everything, but if you need a custom web crawler hooked up to an alerts and reporting system, I'm your guy. If you can, do what is really interesting to you. Solve a problem that is important to you. And don't worry too much about being good, just start with being good enough :)
I wouldn't label that under Python specific though
Hey can you tell more about how you use python in your job please? I am really interested to know. Thank you.
Hell in Nashville or Los Angeles they are so desperate you could start at 65k after finishing an intro to SQL course. It's embarrassing.
What about for/if handling?
You could take a look at [Codewars](https://www.codewars.com/). It has a variety of tasks created by users, sorted by difficulty and a tag system. It also has a gamified account rank system that's used to offer you random problems of "appropriate" difficulty, but you can just search for problems by tag or difficulty if that doesn't appeal to you. After you successfully complete an exercise you can view other people's solutions. Or you can do that if you're stuck, but then you don't "rank up" from that problem; again, this might or might not appeal to you.
I use something similar for diffing yaml config files. it was handy to be able to take 2 versions of a config file from version control and diff them to work out how to mutate the environment from one state to the other this lead to being able to have a main config file with default values and then other yaml 'profiles' that could be overlaid over the main config for specilisation, sort of like a super 'include' directive My Stuff: https://pypi.python.org/pypi/objdiff/ http://pythonhosted.org/objdiff/Tips_and_tricks/
/r/dailyprogrammer is what I'd use, it has a large variety, but not necessarily organized by *approach* (OOP, data structures, etc.) It's what I use at project nights at our PyUG and how I plan on teaching myself StandardML.
I agree that it's nice to keep everything separated but this often leads to a lot of boilerplate. But in the javascript world, `React` is nice because it let you write the html in javascript, replacing all those string-based templates. This is just the same thing but for python so I don't need all this API + frontend stack to get nice templating.
Pyglet contributor here. There is a lot of work going into the current development branch. Pyglet was not too long ago migrated to a dual Python 2/3 compatible code base, so there was a lot of small work to be done behind the scenes. I think the 1.3 release will be really solid when it comes out. 
You can do a lot more than web development. The Python official web site has a list of [Sucess Stories](https://www.python.org/about/success/).
Oh yeah ! That's the spirit !
[Learn Python the Hard Way](https://learnpythonthehardway.org/)
mail me (binny@dezyre.com) if you want to attend a free live online hackathon on Airflow. More details here - https://www.dezyre.com/hackerday/visualise-wikipedia-daily-trends-via-airflow
I always like those ways to write html (or xml-like things) using pure Python. I feel it makes the code very readable and maintainable. The idea of using the division symbol to separate the tag content from the header is very cool. Well done!
As my flair says already I am more into modern libraries so personally I would go with simple aiohttp server and [sockjs](https://github.com/aio-libs/sockjs). This would however mean only 3.4+ python support. But then again, in my opinion, new libraries should be developed exclusively for 3.x, supporting 2.x just means having to do 100 layers of compatibility and not being able to use the new toys.
The problem with this syntax is that your attributes ends-up after the content, making the whole thing a lot harder to read. But I agree, it makes it a lot clearer in a case with not many attributes.
Have fun: * https://automatetheboringstuff.com * http://codingame.com/ * http://codefights.com * https://www.hackerrank.com/ * http://exercism.io/
On top of other things, it's huge in security. Scripting languages are huge in security in general. Python is big, ruby is big, perl is big among the older crowd, even bash is pretty big. Python and ruby are definitely two of the most common languages you'll run into if you're looking at security tools. It's big in the sciences in general. Big in bioinformatics, along with R. Physicists use it. I think pretty much all the physical sciences have python programmers. It's big in data science. Tons of data science tools have python bindings, like pyspark. The thing is it's a good general purpose language, easy to pick up and incredibly powerful. The common theme here is it's big among people who are trained in other fields, like security, physics, biology. Engineers of all sorts pick it up and use it purely as a tool for automation. If you want to get into other careers with python other than web development, you're very likely going to need to train in another sphere of knowledge or find a place that can train you along the way (which can be quite rare). As I've heard, it's way easier to teach a physicist programming rather than a programmer physics. There might be a low barrier for entry. If you can find a foot in the door in security, knowing python is a huge plus. It might lead you to a better job, maybe doing tooling if you're proven efficient with python. I imagine it could be the same for other fields. You might also jump back into academia and study bio or something and try to get ready for a bioinformatics gig. Knowing python is huge in biology academia, but there might be a lot of educational requirements to turn it into a career. But look at it another way. Web is today's UI. Applications are very often built as some online web platform instead of distributed on CDs. People want you to subscribe to a service. This is just the direction a lot of software development has taken, and it doesn't always mean you'll be writing django views. It can lead into backend work, and that will just be general software development at some point. The web frontend is just an aspect of how people interact with your software, but it doesn't mean you'll be coding web stuff all day. I've been doing "web dev", backend for the new website of some company my employer bought, and I haven't touched HTML/CSS/JS at all. It doesn't matter if the user interacts with my software through chrome or some Qt UI, my code could be very close to the same. Web is just the user interface, HTTP is just the protocol for the API. Avoiding a "web dev" job just means you're avoiding one of the most common user interfaces. You likely just want to move more into backend work. It can take time before people start trusting you with modifying and implementing core application code from scratch. This is a very serious responsibility. It doesn't mean breaking a user button, it means the application might not perform well no matter what everyone else on your team does. It can take a bit of time and experience to find a place that will let you work on the core application, so spend your time proving yourself where you can.
&gt; web the good thing in using selenium is that you could scrape the pages that use ajax too ;-)
lxml solves this with 'attribute objects' that can be passed in as positional arguments but act as attributes instead of children: E.H1(E.CLASS("heading"), "Top News") Or just make the tag-instances callable. Calling a tag-Instance would return a copy with additional attributes or children: L.h1(cls="heading")("Top News") That would also enable you to make shortcuts for commonly used tags: heading = L.h1(cls="heading") heading("Top News") Something like that?
[deleted] ^^^^^^^^^^^^^^^^0.6938050932567996 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
[deleted] ^^^^^^^^^^^^^^^^0.0018382704284374274 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Think well before answering questions. Think about consequences of development decision, how you solutions will scale or not. Be honest about what you don't know and what you want to learn. 
[deleted] ^^^^^^^^^^^^^^^^0.8478949939312246 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
So if i have 3 columns say, 'words','meaning','sentence' so i would have to do .apply thrice? df['words'].apply(lambda x: wordnet_lemmatizer.lemmatize(x)) df['meaning'].apply(lambda x: wordnet_lemmatizer.lemmatize(x)) df['sentence'].apply(lambda x: wordnet_lemmatizer.lemmatize(x)) And i would get my result in column wise format?
[deleted] ^^^^^^^^^^^^^^^^0.5067509084443875 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Hey i worte the code and run it on python 3.4 But i am getting an error AttributeError: 'float' object has no attribute 'endswith'
[deleted] ^^^^^^^^^^^^^^^^0.5325676117468763 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
&gt; Just write it in ASCII JUST WRITE IT IN BAUDOT CODE STOP
PEP 8 says no, but PEP 8 applies to the std library, not third party code. You can do whatever you like. Personally, I prefer an explicit encoding declaration if I'm not using ASCII.
That makes sense too but I'm trying to reduce the amount of noise (parenthesis) while keeping it easy to understand. So I've choosen to do this instead: L.h1('.heading') / 'Top News' Of course, people can always have their own "factory helper" on top of the lib if they don't like the exact syntax.
Basically work on what you are working on until you get so stuck that StackOverflow doesn't return anything useful, and then paste what you are stuck on in pastebin, with lots of commenting about what you are trying to do and where it's going wrong, and politely link the paste in IRC with a short summary of the prob
System administration, game development, visual effects and animation, image manipulation, machine learning, desktop application design.. You name it, python can do it. Except maybe embedded systems 
https://caremad.io/2013/07/setup-vs-requirement/
Maybe because sending mails through the gmail server is kind of slow and after a few emails sent in a small time period may cause their systems to block your connection for a small period of time. This is how they stop individuals from spamming.
Yeah but ASCII is valid UTF8
Leetcode
Thanks everyone for the many recommendations! I'm taking a look at them.
I don't understand your response. It is an example of python being used in game development by a major title.
I'm actually [already using it](https://github.com/mdamien/chrome-extensions-archive/blob/master/extstats/templates.py#L23), it's quite nice.
Depends on what you mean by "moderately sized". We're more than 10 devs on the product I'm on, and we have 5-ish products of that size. All web based, no pure front end people. And ABSOLUTELY no pure HTML front end people, that's just to me absurd. &gt; hey still had one that did nothing but writing javascript on the frontend. Yea well, for single page apps maybe that makes more sense. But we're more traditional web based AND what I was talking about wasn't javascript fancy front end stuff, but HTML templates.
This is a great tool. For those ( like /u/kurashu89 ) who work with both Python2 and Python3, this tool isn't for you, but as someone who works a lot with Python3 and very little with Python2, it's perfect. Thanks!
/r/ProgrammerHumor 
I just added a Chrome (and now Vivaldi) custom search engine called "pydocs" that searches the py3 docs. Obviously won't work when I follow a link from elsewhere, but 90% of the time "pydocs modulename" works great. 
There is panda 3d that has a python api, pygame, and godot uses a python like language 
i figured that that might be it
No, me
It would be nice if you provided the configs you used in your examples. As of right now I don't think anyone can run those without the configs, or maybe I missed something... I also have a question, you say it uses AMQP, I know [NATS](https://nats.io/) is not directly AMQP compatible but in theory, would it be possible to use it with your library?
The python what's new page is very readable, it contains major changes in each release. On learning path, since python is not that difficult to learn, I suggest you read the official python 3 tutorial, then start using it for real projects and read relevant topics when you choose libraries, data structures, etc. Pep8 and pylint can help you write better code. It's wise to integrate them to your work flow. https://docs.python.org/3/whatsnew/index.html
Thank You!
Omg i almost believed that there was levels in programming as in RPG. you saved me from asking where i can know my level. Thanks for your commend. I alredy started a project with someone on IRC.
Nice first post. 
Gracias hermano!. Me interesa conocer gente de Venezuela que este metida en este mundo. Te contactare por privado por si estas interesado en conversar
I should work but it doesn't (lot of random errors), also it would need to look a lot more like React because it needs to handle native `onclick` handler, I just do strings. It would be funny to make that work !
I would have called it py3direct.
&gt; You name it, python can do it. Except maybe embedded systems [Embedded Python in Practice](https://www.modio.se/presentations/Embedded_Python_in_Practice.pdf) was my talk from a year ago. There are some gotchas, but it's actually quite viable in embedded usage.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Can you explain how to do this with Chrome?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I did my own Googling and found a useful guide here: [http://www.makeuseof.com/tag/create-custom-search-engines-google-chrome/](http://www.makeuseof.com/tag/create-custom-search-engines-google-chrome/).
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I think you are looking at an old n in your stack. I get a name error on the `print(n)` line. That symbol is not visible on your stack.
I didn't use Python back then, but I think more than the language, the culture changed. * Style checking using linters ([pylint](https://www.pylint.org/)), variations of PEP 8 everywhere (e.g. nobody uses camelCase for variable names anymore) * Easy-to-write tests via [pytest](http://doc.pytest.org/) (just use `assert` and pytest’s black magic will give you nice error output) * Type checking via [mypy](http://mypy-lang.org/) or the [PyCharm](https://www.jetbrains.com/pycharm/) IDE (and the new type annotations) * Good completion via [jedi](http://jedi.jedidjah.ch/) or the PyCharm IDE Language wise I'd guess it's: * Cleanly separate text and binary data with the str/bytes types * Never “close” anything. Always use context managers/the `with` statement for any connections to files, databases, urls, ... * /edit: i forgot relative imports and the new string formatting syntax (the one with braces)
Web Scraping seems useful and fun, I will try it.
is that what pickle is normally used for, sending data to other processes? Ive never played with it with it. Im not experienced in networking like this and would also like to know what is the preferred method to send data over a connection in this sort of situation. I would think just the Player object through conn.send(). is there a different serialization someone would use or is the default ok? 
also thanks for your reply, i didnt know that about pickle
Also with the natural floating point precision errors, do we really care what happens as tie breaker? It could just as easily been off by 0.0000001 already due to previous calculations.
&gt; Yey, Python just made some obscure math or CS professor happy, and in doing so has made life harder for millions of programmers. If this isn't losing the plot entirely then I don't know what is. C# is an interesting choice then. Its default behaviour (round to even as tie breaker) for `Math.Round()` is the same thing that Python 3 does.
I would hope there's an exception for the C API. Python 2 and 3 are fairly different in that regard. 
We definitely care how tie breakers are dealt with! Check out the wiki on rounding, it's way more complex than I initially guessed.
direct2py3
Theres a few packages you could experiment, like Folium, that could use better means of generating code-&gt;templates-&gt;html. You might find yourself better positioned as middleware to a templating engine. If you can find a way to add support for {{}} style templating (jinja2, handlebars, angular), you might pick up a pretty good chunk of the fullstack. I'm not going to ever serve HTML directly to the client without _any_ templating engine. But if I could save my templates as python instead of HTML, I can test the shit out of python html templates, and them test the dynamic nature.
It's a play on words. pyth(ree)direct, rather than pyth(reere)direct. And it still also works as pythree-direct.
I've done Python 3 mostly in the past year or so, so search results pointing to Python 2 docs became quite annoying. Today, I thought I should write a Chrome extension that does the redirect, but fortunately someone else has already done so. Also if you use DuckDuckGo and want to search the Python docs you can type "itertools !py" which will point to the Python 3 docs search result page or "itertools !py2" for Python 2 respectively.
Awesome. I appreciate your well thought out reply. 
Here's my short code-specific rundown, using the https://docs.python.org/3/whatsnew/ as a source. I'll highlight the ones I think are important. Everything is a class. Including builtin types like int, float, bool. They all inherit `object`, the python default type. Exceptions are a class. Modules are a class. Functions are just a class that implement `__call__()` Print is a function (since 3.0) print('Hello, world!') Strings are unicode by default (since 3.0) print('Привет мир') New string formatting -- the old % based method still works (since 2.6/3.0): "User ID: {0}".format("root") Now that strings are literals, there is a bytes type for raw bytes b'binary\x00' And consequently, the `StringIO` module is now called `io`. Ternary statements (since 2.5) a if condition else b Context managers (since 2.5/2.6) - automatically closes file handlers, db connections, etc., when you're done with them. with open('foo.txt') as file: for line in file: print(line) Arbitrary length integers (since 3.0): &gt;&gt;&gt; 9223372036854775807 ** 2 85070591730234615847396907784232501249 Integer division is now more human: &gt;&gt;&gt; 1 / 2 0.5 To get the old behaviour, use: &gt;&gt;&gt; 1 // 2 0 A new operator for matrix multiplication (`@`) introduced in 3.5. It's mostly used by numpy and friends. The syntax for octal literals is now `0o777`; for binary, `0b1111` Use `!=` for not equal to. `&lt;&gt;` has been removed List comprehensions: &gt;&gt;&gt; [x**2 for x in range(5)] [0, 1, 4, 9, 16] Dict comprehensions, as above, but for dicts: {k: v for k, v in stuff} Generators, which create the next object on command (and therefore don't take up memory): &gt;&gt;&gt; a = (x**2 for x in range(5)) &gt;&gt;&gt; for i in a: ... print(i) ... 0 1 4 9 16 New import syntax for relative imports: # relative import import .libs.mylocalmodule # absolute import import mysytemmodule Changes to the exception handling syntax (post 3.0). Best to just read the docs on that one. async and await (coroutines). This is mostly magical stuff for asynchronous io. I haven't experimented with it much as it doesn't seem to apply a lot to numerical processing. pip is always installed by default, making access to third party packages a heck of a lot simpler. Try, for example, $ pip install pytest Finally, a lot of people are writing in python 2.7. Many of the features from 3.x are available in 2.7 using the following statement: from __future__ import division, absolute_import, print_function, unicode_literals However, if you are starting a new project, target 3.5. There's been a lot of advancement since 2.x.
Good call. Thank you for the insight. 
[I've been using this](https://www.reddit.com/r/Python/comments/35hgo2/any_way_of_automatically_going_to_the_last_stable/cr4xojl) (specifically, the version I replied with).
Now THAT is good to know.
If you've got a download for Automate I would appreciate it.
WebAssembly by Mozilla would allow to write websites with any other language: https://hacks.mozilla.org/2016/03/a-webassembly-milestone/ If you meant a browser which is configurable in Python, like elisp for Emacs, look at http://www.qutebrowser.org/ cheers !
But if I had to choose one to read for the semester, which should I choose. Which one is better to start with?
Shitpost
this reminds me of how php.net can't even get language detection right, doesn't use cookies to remember choices, and regularly delivers the wrong language(or as a best case scenario displays several links with the same title but different description language) granted i live in germany near the border of france and switzerland and search in english, but for a web development language, you'd think they'd have figured out how to detect browser language by now 
/r/learnpython is for questions. /r/Python is for news, releases, and discussion.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
This shouldn't be posted here but to answer your question. As long as you can think and can follow logic then yes you can learn.
I don't have any data but I think Python is way more used to do data science, math and data visualisation than to do web development.
Besides the changes of the languages itself you missed alot of very interesting libaries and projects. Assuming you stopped with python around 2004/2005, here some of my favorites: * [Ipython/Jupyter Notebook](http://jupyter.org/) it is an advanced python interpreter with alot of magic. The notebook is a powerful addition, basically coding, documenting, sharing in your browser, the language kernel runs on a seperate server. Ideal for tinkering with code and sharing presentation, here a site with [examples](http://nb.bianp.net/sort/views/). It is one of the pillars of python's data science community. * [pandas](http://pandas.pydata.org/). It is a framework to work and manipulate dataframes/data tables. With numpy under the hood it is the best tool for trimming and analyse huge data. Thanks to numpys arrays and vectorisation. Also it offers alot of additional functionality. Easy ploting, reading and converting to alot of formats out of the box (csv, , json, xlsx, hdf, html/xml and even sql). * [SymPy](http://www.sympy.org/en/index.html). Symbolic math in the python way. * [requests](https://github.com/kennethreitz/requests). The de-facto standard to recieve and request data through http. "Http for humans" is the sub title of this module ;) * [click](http://click.pocoo.org/5/). An easy way to create complex cli applications. * [sqlalchemy](http://www.sqlalchemy.org/). A powerful SQL Toolkit, works with many different sql databases and offers an good interface to design and query your databases. * [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/). Wanna parse html or xml data in python style? This is the lib for that. If you interested in web development you should check out the top dogs [django](https://www.djangoproject.com/) and [flask](http://flask.pocoo.org/). For building microservices there is also [falcon](https://github.com/falconry/falcon). There is also [kivy](https://kivy.org/#home) for cross-platform game development either on the desktop and mobile devices. And if you think python is still too slow just try out [pypy](http://pypy.org/), [cython](http://cython.org/) or [numba](http://numba.pydata.org/). Lastly, google gave the python world [tensorflow](https://www.tensorflow.org/), a framework for machine and deep learning powered by CPU and GPU. So, that are my two cents, I hope you enjoy this links ;)
Understandably so. The pacific northwest is not cheap right now and if it doesn't pay for you to move in the long run, it's probably not worth it. Thanks for your response, was just curious.
There's a difference between math and arithmetic. I suck at arithmetic (I let computers do it for me). Also, programming more resembles formal logic than anything. You're writing instructions for a computer. Those instructions, at the higher level, may or may not involve much math, depending on what you're trying to do (certainly math is happening at the lower levels, but much of that is abstracted away from us, in much the same way that the inner workings of an engine is abstracted away from a driver, through the interface of a steering wheel, accelerator, and brakes). If you can break down a problem into smaller, simpler instructions, encapsulate those, and break it down further into even smaller, simpler instructions, and further still... then you can program.
back2py3ture
2py3furious
Is the data available for download? 
There's also `!pep &lt;number&gt;`, `!pypi`, and `!sopy` (Stack Overflow). Here's the [full list](https://duckduckgo.com/bang?q=python).
You don't get a library that big unless it's a hard problem. I actually have no trouble managing it and once I explain the logic behind where things go to people, they don't either. You really learn how to layout a project by writing that many lines. My goals from day 1 has been to do it right (so fix it if it's not as opposed to maintaining the API) and making it easy to add features without breaking other things. OK, I do some black magic (e.g. multiple levels of inheritance for some classes because I don't want a 10k lined file or using get/setattr to dynamically set variables so I don't need 60 instances of one class with slightly different names). The GUI layout is a mess, but it hasn't really hit critical mass forcing me to come up with a better layout. No idea where you can find interesting engineering problems. There are a lot of them, it just depends on what you want to do. I enjoy aircraft design, so my tools are typically geared towards that. It's really comes down to what are you interested in? Python is missing tons of functionality in regards to engineering that numpy/scipy/matplotlib don't even attempt to cover. There are libraries (e.g. controls) that attempt to do controls, but need a lot of work. Meshing, structural analysis, and CFD are all poorly done if at all. My project somewhat takes aim at commercial companies. They do a bad job with their software and then charge you for it.
From https://github.com/quantifiedcode/issues/issues/62 &gt; Hey, thanks for reaching out! I will be sending out information regarding the shutdown. Basically it's just not profitable as there is not enough revenue coming in through the site that justifies the investment in time, despite its popularity in the developer community (developers like using code checking tools, but most of them don't like to pay). &gt; I have been working on an OS version of the site, if I can find people to contribute to that I'll publish it after shutting down the main service, so you'll be able to host it yourself. 
If you use both Python 2 and Python 3, you probably don't want to use this anyway since you'll probably mostly need to access the Python 2 documentation. You're probably mostly sticking to the subset of Python that is the overlap between Python 2 and Python 3 anyway, which is better represented by the Python 2 docs since Python 3 has many added features.
I just picked up the pdf of "automate the boring stuff with python" in a humble bundle a few weeks ago and it has been pretty good. Sadly it is gone now but you maybe able to find it elsewhere.
Read the sidebar. Tons of good references there.
Cool, thanks!
 from __future__ import docs
Please use chrome and request desktop site. Notebook will be rendered.
Came here to say exactly this. That is how I first read the thread title.
I'll DM you now. This project should be reativly simpe to stand up. Just reply in DM if interested and we can work out the details.
:: researching argparse :: 'Where are the parentheses with the print statement?' 'Wait, this is 2.7! I wanted 3!' :: remember reading about this extension today :: I installed it. It'll make my life easier. 
Also this is not simply to do a deep copy. You have copy.deepcopy() for that. This function can do partial merge of two complex dictionaries. Say you have a large data object and you want to change a whole branch of things in it. You could potentially do obj[key1][key2][key3] = val for each of the changes you are trying to make. Alternatively you could simply recreate the partial subtree like: { "key1": { "key2": { "key3": new_val } } } and merge this with the existing dict and it will only update that specific value. With this tree however you could simultaneously update a whole group of values across the entire tree.
Wow, completely not my cup of tea!
Thanks for posting. Looks like some good information.
Visual studio code uses json with comments as its config format. Have you tried toml?
[There is this greasemonkey script](https://www.reddit.com/r/Python/comments/35hgo2/any_way_of_automatically_going_to_the_last_stable/cr4xojl?st=iss7y62o&amp;sh=341f6c53)
Yes, but I prefer to work at a higher level where this is an 'implementation detail' - good to know, but I'm not using pickle directly. As an example: from concurrent.futures import ProcessPoolExecutor with ProcessPoolExecutor(8) as pool: results = pool.map(lambda x: x*x, range(80)) This snippet: - starts eight Python processes (one per logical core on a newish quad-core Intel), with automatic cleanup thanks to the `with` block - assigns `results` a list of square numbers, but with calculations spread over multiple cores (OK, this is only worthwhile for much more expensive operations than multiplication!) - works by sending the function and arguments via pickle!
My dad is *terrible* at math and has been working as a programmer for decades. You can do it if you want to.
You can, also, still learn to be good at math, it is never too late and not as hard as you might think. Just time consuming. Never believe it is some built in 'I'm just bad at math' thing. That is just silly. I am not sure what your level is but just hunt down a High School Algebra book and get started. Just read a section and practice 4 or 5 problems an evening until you think you got that section down. You would be amazed at how it starts to come together after a month or two of that. Then build on it and you will be amazed that how, if you set the foundation, the rest builds easily. I recomend the book I linked to a few people as well. https://www.amazon.com/Mind-Numbers-Science-Flunked-Algebra-ebook/dp/B00G3L19ZU#nav-subnav
Geoff's github has a ton of awesome python made, data science related projects: [https://github.com/gboeing](https://github.com/gboeing). It is definitely worth checking out for anyone, like myself, who is interested in stuff like this.
I did the same, but I use local docs to make it super fast and work offline. 
&gt; Now that strings are literals, there is a bytes type for raw bytes Some strings are made using string literals, some are not. Python 2.4 had a bytes type (str), separate from its text type.
&gt; Arbitrary length integers (since 3.0): Python has shipped a bignum since time immemorial and had already long auto-upconverted in 2.4.
It's free on his site as html
Nice! I've been graphite quite a bit over the last few months and had to write my own poor version of a sender for python3 since the normal package doesn't work with it. This is much better, shall try it out! Thanks
I do want a closure (Otherwise Lambda is only a shadow of itself)... I just want the loop to establish a proper scope, or none at all. Python seems to pick the worst of both worlds. Explicit loops do not establish scope and the lambdas defined within do not bind to the local loop variable because there is no such thing as a local loop variable. However list comprehensions which being inline would seem to lack scope... actually create a scope. It just seems really backwards. I wonder what design considerations drove this decision to not establish a local scope within loops. 
Glad you found it. The custom search engines (CSE)s were literally the only feature keeping me tied to Chrome -- I can't do without them at this point. Vivaldi does them pretty well, which is why I'm giving it a shot. I'm sure yours ended up similar, but to duplicate my `pydocs` CSE: 1. Navigate to `chrome://settings` 1. `Search` -&gt; `Manage search engines` 1. `Python3 Docs` | `pydocs` | `http://docs.python.org/3/search.html?q=%s&amp;check_keywords=yes&amp;area=default` 1. Test by typing e.g. `pydocs [TAB] itertools` into the address bar My other major Python relevant CSE is for PyPI: `https://pypi.python.org/pypi?%3Aaction=search&amp;term=%s&amp;submit=search`
Changing loop scope would not affect how this works in any way. Even if Python enforced loop scope you would still get 9, 9, 9... Same with C++, which does have loop scoping. The comprehension works exactly like the unsugared loop version would. EDIT: NOT the same as C++ in the sense that the obvious way to do it would be undefined behavior, sorry. Yes if you ensure that memory is stable through an outside means. Still, poor example, but C++ gets off there by just not saying what should be done.
If the variable being bound was the loop variable sure, but if the variable being bound were allocated in each loop then it wouldn't. Right? In any case it is not exactly the same. The loop would leak loop variable outside the comprehension. Python 3 hides the loop variable inside a sugared scope. I actually prefer the old python 2 leakage as it is closer to what is really happening. 
This is *brilliant*, thanks for the suggestion. For others interested, it took &lt;5 mins to set up and is blazing fast compared to the web version I've always used. 1. Go to [docs.python.org/3/download.html](https://docs.python.org/3/download.html) 1. Download the `html` version 1. Unpack somewhere (e.g. `~/Documents/python-3.5.2-docs-html`) 1. Add as CSE: `file:///Users/yourname/Documents/python-3.5.2-docs-html/search.html?q=%s` Alternatively, in browsers not supporting CSEs, open `~/Documents/python-3.5.2-docs-html/search.html` in your browser of choice and bookmark.
You really should do `python -m pip` instead of pip, unless you like having your OS stomp all over the symlinks or being surprised when you install another Python version.
For experienced programmers I highly recommend [Dive Into Python 3](http://www.diveintopython3.net/) rather than videos.
\#2py3me
I've known people with all kinds of degrees, in fact even no formal qualifications at all, suceed in programming. If you are determined enough you will get there :-)
Nooo, whyyyy?
You are my hero!
There's a command "restart kernel and run all cells" specifically for this purpose. 
This is good. Why no Hanzi/Kanji support? It should be possible to use with Python 3, too.
&gt; A new operator for matrix multiplication (@) introduced in 3.5. It's mostly used by numpy and friends. And until it was introduced I didn't realize how much I was actually missing a dedicated symbol for this instead of using `np.dot()`. It now makes me sad to use anything &lt; 3.5... 
Thanks bro! Such a help
or shorter: &gt; don’t write `a or b` if you mean `b if a is None else a` which is in most cases.
There's a [series of Python courses on PluralSight](https://www.pluralsight.com/courses/python-fundamentals) that are pretty great. Also, [The Python Apprentice](https://leanpub.com/python-apprentice) on leanpub is a good book form of the same material. 
Only tangentially related, but I'm in love with the Dash offline documentation browser. It's great for multiple project development because I can create documentation sets for each project with the technologies and versions used by that project, and my searches are project specific. Zeal is good too (on Win and Linux), but Dash far exceeds it. 
are you high?
Yes - anything would have been better than this childish humor.
i can’t think of how that would be possible…
Absolutely love this, but it messes with my back button (i.e. pressing back redirects again). [I made my own version](https://github.com/JohnnyDeuss/py3direct) of this that changes the url before a request is made instead of redirecting. This also doesn't load the older docs before redirecting, double win.
An example where an API wants to 'hide' the open/close and make them part of the instance creation/deletion. Not a great API design - but you can't wrap that in a context manager - unless the API user has to do a with - again - not ideal. It is a contrived example - but i dislike guidance that reads like a fixed rule with no exceptions.
the website is stackoverflow.com
/r/learnpython
That's definitely an improvement and thanks for sharing the source code! 
Since you want to learn the Godot engine afterwards, you can probably skip the chapters that cover Pygame, because many things are handled differently in these two engines. But it's still fun to apply newly learned skills immediately in your Pygame games while you're learning. I'd rather read the whole book. What you should know about programming before you start with Godot: * How strings, lists, tuples and dictionaries work (dictionaries are explained [here](http://www.python-course.eu/python3_dictionaries.php)). * Control flow (if, elif, else statements, for and while loops). * Functions * Classes and objects * Libraries and modules * Files Then to start with Godot read the tutorial on their website and I also recommend the tuts on [gamefromscratch.com](http://www.gamefromscratch.com/page/Godot-Game-Engine-tutorial-series.aspx). Happy coding!
Amazing! 
For import as, you heard wrong. import as has no problem with circular imports itself. Only from import does. Now to explain why. imported modules are cached: when you start importing x, python first checks whether there is 'x' in sys.modules. If there is, it returns the value (provided it isn't none) and that's the result of import. Else, the spec is found, a new module object is created, _it is put into sys.modules under 'x' key_, and then the origin file is executed in its namespace. So you see that if you import a in b.py, and import b in a.py, and then import a in main.py, everything works fine. 'a' is not in sys.modules, so a new module a is put there, then 'b' is not in sys.modules, then new module b is put there, and then when its execution imports a, 'a' is already in sys.modules and that object is returned. No problem. On the other hand, imagine you have from a import c in b.py, and from b import d in a.py. When you start a, it finds no 'b' in sys.modules, puts a new module object there, and starts executing b.py in it. b looks for 'a' in sys.modules, doesn't find it, puts a new module object there, and starts executing a.py in it. But when it finds "from b import d" there, it looks in sys.modules['b'], finds the (new, empty) module object there, and tells you it has no attribute d it could import from it. Hope it's clear now. :-)
Nice :-) How will that affect error correction / "robustness" of the QR?
Way too condescending.
&gt; My argument is not this special case, it is that the minor changes very often makes one have to change a list comprehension to a for loop. It is a fragile language construct. I would argue that in general I would prefer def process(item): item.snorlak() return item subarray = [process(item) for item in array if condition(item)] is a lot more clear than unrolling the for-loop. Most changes I can think of would now be nicely ecapsulated in the `process()` and `condition()` functions. As has already been said, the nice thing about list comprehensions is that they make it very clear that you are indeed creating a new list. But readability is obviously somewhat subjective.
Is anyone seriously going to yell at you for including it?
I agree that this is perhaps a poor use of `RuntimeError`, but I wouldn't go so far as to say that none of the built-in exception types should be used. What about a module that implements new collections? Should it not use `KeyError` and `IndexError` as the built-in data structures do?
Yes, that's the idea.
Thank's, i was wondering which service to use ! This is perfect, I keep looking but in case, do you have any exemple of triggering S3 event with celery task ?
"Should never" is a rare rare exception in real world programming. Saying anything should never occur is generally a sign that arguments therein are a waste of time.
This guy/gal should submit a patch for the module. Heck, I might; the use of `RuntimeError` in it *is* quite dubious. That being said, the rule that's gleened from this is ridiculous. My custom container is going to use the exceptions you expect it to use (Type/Value/Key/IndexError), not some made up `WalnutJarIndexError` or similar.
Yeah, that makes sense. It's just a bit extreme to say that a library should never raise built in exceptions, and I would argue that a runtime error with a descriptive error message might do the job just as well as a custom as exception, as long as the documentation makes it clear that you should look for one. I do agree that raising a built in with no message is probably bad practice (except, like you said, where the automatic in message might provide enough info). 
I very much disagree. What you don't want is for a dependency to raise an Exception that you don't know about. Besides which, it's really silly to waste code space to define errors, when most of the time there's a standard error which covers it. ValueError is quite useful.
&gt; RuntimeError is specifically for "something went wrong with Python itself but you can probably recover." well &gt; **exception `RuntimeError`** &gt; Raised when an error is detected that doesn’t fall in any of the other categories. The associated value is a string indicating what precisely went wrong. The python-provided definition arguably applies in this situation
r/255, g/255, b/255?
It's not a simple thing, but I would start with the OpenCV tutorials, which will show you how to open an image, select groups of colours, and get their size. You have an inherent problem with "all the colours", since each pixel may differ slightly from the next, that's a lot of colours. But there are ways to group them and get some idea. 
I struggled with Algebra for a long time. I could do calculus but when it came to the algebra, I just felt like I was lacking... Then, I was given [this guide](http://www.stewartcalculus.com/data/CALCULUS%206E%20Early%20Transcendentals/upfiles/6et_reviewofalgebra.pdf) (or an older version). It was *perfect*. Everything just clicked from the one guide and I managed to really turn things around. I hope it helps you!
Looking through the use of `RuntimeError` in the standard library, I see some cases where it would probably be more appropriate to raise a more specific exception (though that would create backward compatibility issues), but mostly it seems to be raised when a function is clearly being used incorrectly. For example, some functions in `zipfile`raise `RuntimeError` if you pass in a nonsensical mode parameter (as opposed to `'r'`, `'w'`, etc.). Why would you ever want to catch that specific error instead of just fixing your code?
Yeah I scanned all the examples in the tutorial a moment ago and on my Galaxy Note 3 I can definitely notice a sizable increase in scan time whereas without graphics, it's instant. Although I think the advantage of the graphics could outweigh scan time increase. I wonder why I haven't seen anyone go to this extent with QR codes until now.
SciPy is the other major package of libraries. Most people just use unittest, I think, although unittest2 and nose and py.test have gotten some traffic. I've never really understood what problem factory girl is trying to solve, so I don't know what the pythonic equivalent would be.
It is worth pursuing (very likely to be possible) but post in r/learnpython for guidance. 
I guess this guy never heard of duck typing. You can't emulate a standard container without raising KeyError, AttributeError etc. Of course you could throw subclasses, but that's pointless since the reason for inheriting from them is so that generic code can use the original generic exception type. Ignoring containers, what about e.g. file-like objects? There an IOError might be preferable if your magic file object can report richer data in the exception, but exposing that information risks introducing brittleness to consumer code when a generic exception type would have sufficed. "It's documented as accepting a file, but when disk IO fails it's not catching the error, what's going on?!" Trying to carve a rule out of a single example generally isn't a great idea, but in this case it's plain wrong
thanks
I think the author is only talking about exceptions that the interpreter itself uses to signify an anomalous condition, such as `RuntimeError`, `FloatingPointError`, `GeneratorExit`, `KeyboardInterrupt`, `MemoryError`, and the like—_not_ higher-level exceptions like `KeyError`.
Very posible, you'll need to learn to use PyPDF2 and OpenPyXL.
It's not wrong. The author is using "core Python exceptions" to mean exceptions the interpreter itself uses, like `FloatingPointError` or `MemoryError`.
Generally yes. The standard approach is to define a top level module Error exception class for everything, and then subclass it for specific errors that people may want to tell apart. People using your module can then use 'try: ... except module.Error as e: ...' to deal with all problems, or be more specific if they want to. If you have some really exceptional errors that you want to force people to handle specifically, you make them exceptions that don't subclass your general Error class. (In the standard library, the tarfile module is an example of this pattern; tarfile.Error is specified as the base class of all exceptions it raises.) 
thanks!
The problem with relying on descriptive error texts is that you can't match on them in an except clause, and in general you probably don't want to match on them at all (if you can match on them they effectively become part of your module API because if you change the descriptive text, people's code will break). In Python, the only generally supported way for code to tell exceptions apart is by exception class. That means you should make it as easy as possible for people to do so, which means separate exception classes. If people want to catch an 'invalid password' error, for example, they should not have to catch RuntimeError and then inspect its string value; they should be able to catch zipfile.PasswordError and be done. (The zipfile module's assumption that a password mismatch is a runtime error is kind of arrogant. What if your program has asked the user for that password and they've given you the wrong one? This is nothing like, eg, the runtime error of 'tried to open a zip file with an invalid mode'.)
No, this is not correct. OSError and derivatives should reflect errors from the platform, not the module. 
&gt; Have you ever faced difficulty editing python (especially at the start where you did not have a properly set up editor)? No, but then again, I haven't really worked on a large codebase involving Python (LOC &gt; 5000), so I can't say for sure. Some people say it's harder on large codebases than with general, smaller scripts. &gt; In this case, do you think I should use significant whitespace or go with braces? I'm probably going about this the wrong way, but how much nesting of information are you expecting? It might be better to use some form of bracing (whether it's curly braces or something like Ruby's `do`-`end` pairing) if you expect a lot of nested statements.
&gt; raise Exception("Something went wrong") ha ha ha. I mostly use python for scripting (stuff built on top of pexpect) and not very often. I'm not really writing code that anyone else will use, even when I do write modules. OTOH, I'm never catching these low level exceptions in my scripts. Instead I merely catch things like the Ctrl-C interrupt exception. When I *raise Exception("something went wrong")* it is inevitably uncaught and I get a backtrace (hooray)
YAML is a pretty bad example of whitespace delimited markup because it relies almost soley on whitespace. JSON is another bad example because it has no whitespace rules to rely on. I find the most readable representation of dictionary-like data is pretty-printed json. for example: YAML: foo: - bar - baz - sub_foo: - sub_bar - sub_baz JSON: '{"foo": ["bar", "baz", {"sub_foo": ["sub_bar", "sub_baz"]}]}' pretty printed JSON: { "foo": [ "bar", "baz", { "sub_foo": [ "sub_bar", "sub_baz" ] } ] } best of both worlds, if you will. 
I am doing the titanic kaggle as I learn machine learning and python. I have two pandas dataframes, training data and testing data, so I want to make changes to them both equally so the training is similar to predicting off the test set. Example: (PD being pandas) def process_pclass(df): pclass_dummies = pd.get_dummies(df['Pclass'],prefix="Pclass") df = pd.concat([df, pclass_dummies],axis=1) df.drop('Pclass',axis=1,inplace=True) return df This is how I opt'd to do it, it kind of felt smelly all options I could think of. get_dummies() returns a dataframe, so the df (dataframe) that was included as a parameter is replaced, but since it is not by reference, the new data frame is lost when exiting the function unless I do a return dataframe as seen here. But I have a lot of features to process and the only sane way I could do it is to have them all return a dataframe and just keep passing it function to function in my master function that calls all the process_feature() functions. The other option was to combine train/test into one dataframe and just hard code it to that one rather than taking a parameter. But I thought that was smell due to the fact train has additional columns than test and I would need to separate them on a hardcoded index later.
Can you suggest with Library to use?
But remember JSON offers no comments! Especially for hand written configuration files that could be critical for usability...
&gt; PS: The exception to this rule is built-in exceptions that are specifically designed to be raised by user code as a standard signal of problems. An example is NotImplementedError, and it may be the only one that I really agree with. ^^ from the article.
You say "the maths" like there is some math in learning Python specifically you are struggling with. What learning source are you using and what math is a problem?
I gotta disagree with you, an exception to catch a specific (and interesting) error condition should probably inherit from RuntimeError. The error message is there to help humans, the code needs to be able to switch between different exceptions without inspecting the message. 
Check out this: http://notes-on-cython.readthedocs.io/en/latest/std_dev.html
Then author should say so. Incomplete/vague/wrong communication is cause of almost all issues in software development*. * source: 25 years of SD which has largely been spent trying to figure out what people/code/services/machines/specs/etc are communicating.
Silly question...can't you just raise core exceptions with custom messages to signal where it came from and why?
Matplotlib
I understand now what this is and what it will print, but initially upon reading it I was completely lost. I had someone explain it. This is just a basic example of where I stumble. Math language is lost on me.
This is a better example. evens=[i**2 for i in range(10) if i**2 % 2 == 0] print(evens) This is a better example. It basically means print even numbers squared(the remainder must be 0 when divided by 2) in the range of 10 (not inclusive of 10) Yes? So it will print: [0, 4, 16, 36, 64] Ok, so I had no idea that ** meant squared, or % indicates a remainder. Tbh, I was confused about the 'i' at first too, until I realized it was a variable. So, with this level of math understanding (basically none), can I still learn coding?? *Edit: I can't even get the format right, not sure what I'm doing wrong there.
Common misconception. It does not really. I mean, it does in the same way cooking is quantum mechanics/chemistry or throwing a ball is Newtonian physics but I think you see the absurdity in that :P Programming is about communication. Between you and the computer (trivially, because otherwise your code won't run), between you and future you (more importantly) and between you and future other humans (the hardest and most important). That's the essence and the craft. That being said: if you do scientific software you need math obviously :P But most don't. 
Most artsy QR tools leverage the error correction to get away with what they do.
If you read my post it's clear I understand that. However, it is a community representative of the Python community that should be able to lead me to the correct support channel, or discuss and think about how to address the community problem that there is not one.
yes, that is what I'm trying to say I do.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
How come? Genuinely curious
Hey, thanks for sharing this.
If you read through the ticket: I'm not saying the *project* is inactive - I'm saying the *package name* is inactive. I'm more then happy to upload a package to point to that project - the problem is someone unrelated to the project registered it, never uploaded a package, and has shown no other sign of activity. Chances are they had planned to get there feet wet in package management, lost interest, then moved on to other things, maybe even different languages. The problem is, now the package name is useless for everyone since it can't link to the project and isn't owned by anyone within the project it's destined to just sit there forever unused.
I also feel like YAML itself is too complex. INI files are very limited because you cannot define proper sections. Native syntax is a terrible idea. SQLite databases are not simple, Lua is a bad idea for the same reason native syntax is a bad idea. I'll look into EDN and SQLite, thanks.
I wouldn't say "hard", just "annyoing". The problem is twofold. One, Python's syntax-relevant indentation breaks the source code change &lt;-&gt; semantic change isomorphism. The most blatant example is `pass` - in a language with explicit block end delimiters (curly-braced languages' `}`, Ruby's `end`, etc.), removing a statement from a block amounts to removing one line from the source file; the semantic operation of one statement removal appears in source control diffs as one line removal. The same goes for Python, **except** when you're removing the last line from a block: then, the semantic operation of one statement removal is reflected as one line *modification* (or, as the case may be, a removal plus an addition). And then when you merge things, you may end up with two removals (which is correct) plus two additions (which is not). And two, using indentation as the only marker for nesting doesn't sit well with tools. Writing a parser that matches brackets is easy, writing one that understands indent-based blocks is not; and so, we get text editors that have excellent features for navigating C, JavaScript, PHP, Perl, Lisp, and even XML, JSON, CSS, HTML, and a lot more - in vim, for example, the `%` key gets me to "the other end of the current block", whether said block is a curly-brace block, angle brackets, an s-expression, an XML tag, etc. - but for Python, that doesn't work. Likewise, whitespace has a nasty tendency of being butchered when sent through textual communication channels like e-mail, blogs, IRC, forums, reddit, you name it. Fixing things on the other end is a matter of throwing the code through an automatic formatter, which is only possible when mangling whitespace doesn't lose any information, but when indentation is significant, it does. Anyhow; we're not discussing programming languages, but configuration languages, and there things are a bit different. First, source control is a much less important issue; if people put configurations in source control at all, there is not going to be frequent concurrent editing, and there will not be large refactorings, so keeping things diff-friendly is not as important. You could probably even version-control your configurations as binary blobs (i.e., no diffs at all, just "this file is different, let's replace it as a whole"). And even if you do diff and patch a lot, the *shape* of your configuration file data isn't going to change much - almost certainly, each entry is going to stay at the same indentation level for its entire lifetime. You don't move stuff up and down the configuration tree like you do with source code when you refactor - you add keys, you remove keys, you change values, and that's basically it. Now, generally speaking, I would say just bite the bullet and use YAML, unless there's a very compelling reason not to. The alternatives are worse: JSON is not human-friendly enough (syntax is too picky, no comments), INI files are just a tad bit too simple for many use cases (although when they're not, I'd probably roll with those), XML and the like are just horrible from a UX perspective, and the other alternatives are either too much off mainstream (so your users will have to learn said language just for your application), or depend too much on a particular platform or language (this is a problem with RC files as well as writing configurations in the host language itself). YAML is the smallest evil here.
"How to piss off Jeff"
Jeff, fortunately, has a great sense of humor!
Well, I must say I was surprised to see how all of them worked well. I was expecting a 100% failure rate. 
...but I'm not communicating through the CPython API... or am I? With CPython I have to go through the bother of having .pyc files lying around everywhere and being implicitly created. With numpy's approach I just write functions I want and compile them to a nice .so file that I can put whereever I need it. I find that more flexible.
Using your approach, it would either by the C-Python API or the [C-API for Numpy](http://docs.scipy.org/doc/numpy-1.10.1/user/c-info.how-to-extend.html#writing-an-extension-module). Either way, my overarching point is still the same: there exist higher-level tools which will produce nearly identical compiled code at the end, and allow you to bypass much of the scaffolding/boilerplate you have to use when directly writing an extension. 
Also check out Brandon Rhodes' talks. http://rhodesmill.org/brandon
Ah, you missed the link in my OP. Guess I should have displayed it more prominently.
Exactly! that's why I wrap all my functions so they are a single line in a try block: def plz_dont_fail(func): def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except: pass return wrapper /s 
I said harder to write, not easier to read. But thanks.
In this video from [28:38](https://youtu.be/OSGv2VnC0go?t=28m38s) &amp;ndash; 28:55, Hettinger says, "How about you take the most popular and important data-structure&amp;mdash;a dictionary&amp;mdash;and mangle it and transform it in some radical way and change its performance characteristics... Someone recently did." What exactly is he referring to?
This is a really interesting way of putting it. As a beginner I've often found myself writing programs where more or less everything is outside of a function, unless it's in a separate module altogether for whatever reason (generally if I want to be able to use it again later on another project easily). I'm reworking a recent project from more or less the ground up, and I think I'm going to keep this in mind going into it. Things will be much easier to read and follow this way. I feel like there may be a risk of having very obfuscated code this way, though. If, for instance, I have a section of code that checks if a string is formatted a certain way and then calls a separate function to do something based on what else is contained in that list wouldn't things get messy very fast? How do you work around that?
Wut?
I started with code academy, paid for the subscription, and troubled the advisors with any and all questions no matter how stupid they were. Eventually I completed the final project -- a markov chain generator. Mine used a user defined number of Twitter users to generate its tweets -- it was behind the short lived and never famous Bernie Trump account (@Bernie_Drumpf) which wasn't terribly impressive but for my first big project I was pretty proud (I even created my own module for generating markov chains- tho code academy provides one iirc). It wound up being a great launching point for other projects, and I try to avoid using popular packages wherever I can in order to learn as much I can -- I didn't/don't use twisted in an irc bot I made/am working on for instance. I don't pay for code academy any more but I highly recommend it as a starting point, just be sure to make use of your advisors. It provides a great foundation
Some say that Python's tendency over the last few years to "accept everything" is a major problem. For example: "[Python3's feature soup continues [...] throwing everything they can against the wall to see what sticks (while bloating the supposedly simple, "beginners" language)](https://news.ycombinator.com/item?id=10889712)"
I think your best bet to get a process for handling this situation is to make it a problem that can't be ignored: write a generator of likely project names, write a bot that registers pypi accounts, then start squatting on names until their servers explode.
Look into stamplay. On mobile, so can't link easily.
It can be done, but as an email marketer... how are you ensuring that multiple ISPs can see this activity? I would be worried that sending to a handful of gmail accounts wouldn't be very visible. Or worse, an ISP might notice that you're funneling your activity to only a few addresses and flag it as suspicious. This sort of thing is usually done by spacing out marking campaigns and throttling the overall number of sends. It sounds like that's not an option for your startup though? Which is a bummer.
Thanks for pointing that out.
For anyone interested, here are the recent modifications to PEPs: https://github.com/python/peps/commits/master Quite a few got accepted in the last few days, e.g. 509, 526, 527, 528, 529, 532 etc. Most of them are pretty low-level and not interesting for average Python programmers, though.
It's been a few weeks since I watched it, but if recall he was giving an example of what NOT TO DO if you want to start contributing to the python source code. Example: add docs, small changes, and not try to Re write a major component of the language. 
Oh come now. It adds only a little complexity. try: thing() except ValueError as exc: if exc.args[0] == "expected" pass else: raise
 &lt;a href="http://www.google.com" target="_self"&gt;Google&lt;/a&gt; Does that work?
could you please explain a bit more on this?
Oh man. This is why you don't do that: https://github.com/murphy214/berrl/blob/master/berrl/__init__.py I can't tell where a single fucking thing comes from. edit: you don't have issues enabled on your github, so I don't know if you want feedback, but you should really work in a virtualenv. Also, pipeleaflet requires berrl which requires psycopg2 which requires postgresql-server-dev-X.Y on debian, which is totally unnecessary, and you haven't set your dependencies in your setup.py so installation is pretty rough.
Hard it is not to `raise ValueError("Unable to decrypt Zip file - wrong password?")` It's a case produced by giving the wrong value (password) such that it can't yield a value.
This is really cool--contains the answers to questions I wouldn't have thought to ask! And thanks for writing it in a style relatively friendly to those who know less about these areas. 
Not directly in email marketing but do work as programmer for a digital marketing firm and occasionally produce and deploy email marketing content. I would highly advise against what it sounds like you are doing -- sending email blasts out from your own servers or business class email provider. This is asking for trouble in a few different areas. Have you considered a marketing automation solution that would include email capability such as Hubspot or Pardot for SalesForce? What you are asking for in Python is certainly doable, but I feel like best case scenario is it will do nothing and worst case it would severely harm your efforts.
Simply my personal preference, that's all, as I don't particularly like using underscores. Of course working professionally I'd use whatever was mandated by any given project, unlike those who seem to that that they can use any code formatting style they like, regardless of the rule book :-( 
Sure, even I use \*shudder\* spaces to indent if the project i’m contributing to does.
This is great man. Keep it going! I am a new programmer myself and started with python, so as your target audience, I am very happy about this project of yours!
Check the source of the html page that gets rendered in your browser. If it's really just `&lt;a href="http://www.google.com"&gt;Google&lt;/a&gt;` then cherrypy is not doing anything, that is indeed supposed to open in the same tab. Adding `target="_blank"` as an attribute to the `a` tag should cause the link to open in a new tab by default. http://www.w3schools.com/tags/att_a_target.asp
I think it has less to do with drop box and more a strategy to keep adding shit to python3 to see if anything makes it an attractive upgrade from 2.7
Why don't you show any output? That's always what it's about.
This is awesome. I love seeing the recommendation to run dis.dis on your functions and explore the generated bytecode. Sometimes just seeing the disassembly of a simple function can really teach you a lot about how python code actually works. When you run into something weird that doesn't make sense to you, just try running dis on the function and see *exactly* what's going on. There's no better way to understand what your code is actually doing. Rather than memorize every little gotcha and just accepting that's how python works, running dis on it can teach you why. It's basically reading the source code of source code. I definitely recommend every python developer learn a bit about python bytecode at some point during their career. You can certainly get by just fine without that, but it's great to know how the code works from the ground up.
You can use [string format notation](https://docs.python.org/3/library/string.html#format-string-syntax) $ '{:.2f}'.format(1.12345) &gt;&gt;&gt; '1.12' Also /r/learnpython :)
thanks for your comment
 decimal.Decimal(1.429).quantize(decimal.Decimal(".01"), rounding=decimal.ROUND_DOWN) This isn't truncating, but works the same for all positive numbers. Negative numbers need ROUND_UP instead. It is possible to avoid the long argument list every time by the use of contexts. Please refer to the `decimal` module's documentation.
Thanks for comment
Computers are bad at floating point values.
This is how I was going to recommend it. If you just want to truncate, splitting and splicing is how to do it.
Sometimes a nail is just a nail and not a fancy robonail, yeah? Does that only make sense to my drunken brain?
Here you go import requests from io import BytesIO from PIL import Image from collections import Counter url = 'http://i.imgur.com/4XE4KwK.jpg' bytes_data = requests.get(url).content stream = BytesIO(bytes_data) im = Image.open(stream) data = im.convert('RGB').getdata() ctr = Counter(data) print(ctr.most_common(10)) total_pixels = sum(y for x, y in ctr.items()) ratios = [(x, float(y) / total_pixels) for x, y in ctr.most_common()] for rgb, perc in ratios[:10]: print('{:0.5%}: {!r}'.format(perc, rgb)) $ python image_grabber.py [((255, 255, 255), 84912), ((16, 15, 13), 2572), ((17, 16, 14), 1942), ((15, 14, 12), 1691), ((14, 13, 11), 1513), ((18, 17, 15), 1404), ((19, 18, 16), 1320), ((20, 19, 17), 990), ((33, 29, 26), 857), ((34, 30, 27), 833)] 45.28640%: (255, 255, 255) 1.37173%: (16, 15, 13) 1.03573%: (17, 16, 14) 0.90187%: (15, 14, 12) 0.80693%: (14, 13, 11) 0.74880%: (18, 17, 15) 0.70400%: (19, 18, 16) 0.52800%: (20, 19, 17) 0.45707%: (33, 29, 26) 0.44427%: (34, 30, 27) That's the 10 most common colors, with the RGB value and the count of those in the image. If you wanted to merge the colors closest together, like treat all (254, 255, 255) as (255, 255, 255), that's a much harder problem. I believe you might do something like [dithering](http://code.activestate.com/recipes/576788-floyd-steinberg-dithering-algorithm/) https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering
Optional typing is optional.
https://github.com/devhub/domaintools/blob/master/domaintools/__init__.py There are two emails in there you might try if you haven't already. Either way, don't be surprised if they just end up uploading their package to pypi instead of giving it to you.
Boy was that ever a misleading title. More accurate (or at least less ambiguous) would be "A Python Bytecode Interpreter Written in Python". Left unqualified I thought it meant lexer parser compiler and virtual machine. Still a great article though, it's cool to see what the transistors in my computer are fundamentally doing (though they of course are interpreting x86 bytecode, not Python bytecode, which is significantly simpler lol).
He said that he had to growl at somebody at pycon for doing that... But what was done?
Thanks! It was pretty fun to put together. We have a meetup about this stuff at our office, I'm going to be putting out more of these... the next one will probably be on the Garbage Collector
Hi b0g_ First of all thanks for your words, but keep in mind that t2 instances drop down its performance **very fast**. I recommend now to add the c4 series purchased by spot instance, this way you can get x50 stable speed for just $11-$16. There are several ways to do what you want. Do you know SQS? It's a queue where you can put messages in blocks of 64KB, max 4 together I think. [SQS can receive event notifications](https://aws.amazon.com/es/blogs/aws/s3-event-notification/) the same way Lambda This is really cheap, I think 5$/1.000.000 messages, and has fancy options like &lt;&lt;block the message for x minutes, and restore it if I don't delete it by then&gt;&gt; Also you can make lambda functions as triggers pointing to your server, not like real workers. Not so good idea, you can list your s3 structure looking for new files every x minutes. The last idea I have now is to use [Pre-Signed URLs](http://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html), someone wants to upload something and you make an url so he can get permission. With that you know where, what and when the file will be uploaded. I guess there are more options, my favorite in your case number 1, use celery with aws sqs queue system so you can work with multiple ec2 instances from different locations in a dynamic way.
the link?
Python is easy to contribute to, and the community over there is very beginner friendly! I would encourage you to [submit](https://bugs.python.org/) a bug (or even better, a patch). [Instructions](https://docs.python.org/devguide/documenting.html#building-doc) to build the documentation locally, and general instructions for [building python](https://docs.python.org/devguide/setup.html), if you ever need those.
Don't forget to `return randint(0, 1)` in your except! Don't want a None return value, so make a guess as to what the real one is!
/r/learnpython yes text adventure games are possible
Thanks; re: screenshots of code. Do you think embeds from gist.github.com would be better? re: large keys: I should point out; they &amp; the hash with the size of the dict up to that point; which means only enough bits to represent the size of the table are going to be used initially. For a table of size 8 (the initial size) that's three bits, for example...since (sorry for pointing out the obvious) three bits have 8 possible configurations. re: how do all bits get incorporated: Each time there is a collision this look will run again: https://github.com/python/cpython/blob/master/Objects/dictobject.c#L568 perturb is initially set to the hash value, and this loop right shifts it once for every collision... moving those "more significant bits" into use :)
K, I was just trying to execute your pipeleaflet example1.py and it was a rabbit hole. I'd be happy to provide a code review if you want, or if you're happy with it as is then okay.
There are a couple of example messages in the image at the top of the post--but really this post is about bridging the gap between the theoretical and a commercial (but very novelty) application. Anyone can `pip install markovify` and generate some Markov chains in about 30 seconds if they want to see outputs from their own text corpus.
&gt;Dask hashes down the whole array in from_array to generate a key for it, which is the reason for it to be so slow. The solution is surprisingly simple. By passing a name='identifier' to the from_array, one can provide a custom key and from_array is a suddenly a cheap operation. from http://www.holger-peters.de/python-data-science-going-functional-or-benchmarking-dask.html
Will take a look! Thanks.
I did email them. Two months ago. They don't have access to the package name, no one related to the github project does - which is the problem.
Yes, I believe that would be possible.
Asynchronous IO (async) is a way of handling multiple connections on a single thread without blocking (pausing) for input. I'll cover what it is, and then after that, the why. To summarise how async typically works in Python: We have a single-threaded program with an event loop (reactor). This periodically fires on a timer, and checks the OS's network queues for IO. If there is no input, it goes back to sleep instead of blocking. If there is input, it returns a list of network events ("Received bytestring B from socket S") allowing the program to process the input as required. Typically this is done by callback (registering a callback function with the reactor). The reactor will then execute this user-supplied function on the input automaticaly when input is received. This function is supposed to quickly process the input and then return to sleep. If this is done, the application can handle multiple connections from a single thread without the users noticing a delay. The two main disadvantages with async are (1) your program deals with network events piecemeal as they arrive, so you often have to build up input a few bytes at a time then process it once it's completed (this is really a LINUX issue); and (2) callbacks can be hard to debug especially if you have a chain of them (but callbacks aren't required). That's not to say that async is bad: other networking models like greenthreads (what Go has) or IOCP (what Windows has) also have drawbacks. Like with every complex system there is no one best answer. As for why: Async IO is the dominant paradigm on LINUX and has kernel support. If you google any random tutorial on LINUX network programming, the majority will be single-threaded async IO in C language. The pattern is also common in GUIs that use an event loop such as Tkinter and QT, and in game engines. Python programmers were copying the paradigm and implementing async via frameworks such as Twisted and gevent. They did this because it was idiomatic, and because many of those libraries wrapped the kernel's/system C library's own async APIs, which made them performant. Implementing green threads (like Go) would have required work on the internals of the Python interpreter or it would have just sucked. It's also not true that there's a single best way of doing networking so there's room for all paradigms to exist. Said Python frameworks were incompatible with each other and slow at porting to Python 3. Python 3 was suffering from the lack of these frameworks. Node.JS, which is basically async Javascript, was gaining traction. There was therefore justification to add a common shared async framework for Python 3. Python's implementation seems heavily based on Twisted but that's subjective. Guido van Rossum did whole series of talks and keynotes on his reasons for adding it at various Pycons. There's on youtube. Best to get it straight from the horses mouth rather than someone else's mangling of Guido's thought process. As for "disruptive" if you were doing network IO in Python before you were probably already doing async via twisted or one of the other frameworks.
So then how would I go about it exactly? I found sql dumps of some dictionaries but they only provide the word, definition, and if its a n/v/adj ext not all the criteria of a dictionary 
Thanks! Adding an issue there as well: https://groups.google.com/forum/#!topic/pypa-dev/DwE21e2Nvws fingers crossed! :)
`SSLContext` was added in 2.7.9 (or around about then), and TLS 1.2 support was added in 2.7 too. You're either going to have to upgrade to a modern version of Python (I assume that's not an option if you're using Red Hat 4), or use something like PyOpenSSL. The API of PyOpenSSL is different, so you'll have to do some documentation digging if you take that route.
Now run it through Cython and see what happens! 
Why?
As mentioned in the sidebar, you're more likely to get replies in /r/learnpython. This subreddit is more for sharing Python news, projects and stuff, rather than asking (especially beginner) questions. There are some other resources in the sidebar that may be useful for you too.
Sorry for the slow reply... As I recall Anaconda installed another full blown instance of Python and I had trouble figuring out which instance was getting used and how to update packages. Also it was just big and intimidating, I think there were lots of applications in the start menu. The biggest issue is that I use too many computers with various flavors of Windows and Linux equipped with various versions of Python... I get confused when I don't use Python very often. Obviously, this is not a problem with Anaconda! The past few days I've been sticking with Ubuntu and PyCharm / Sublime, and I changed my "python" to point to 3.5 so that it doesn't keep using 2.7 within shell scripts. That was unexpected.
I'm sorry.. I tought that sub was to specific programming questions (Like "how do I do x in python" or similar) and posting a general question about the language was fine here. I'll post in /r/learnpython then
wait... just re-read your comment. I didn't know you could use Anaconda in Linux. That's interesting, I thought it was only for Windows. I'll definitely try that at some point. 
Thanks.. That's what I figured but needed some confirmation from the community. 
I need a database :/
The use case of *annotations* is fine. The use case of *annotations as type hints for mypy*, which is what this is, is not yet proven sufficiently in the wider community.
/r/learnpython https://docs.python.org/3/library/ipaddress.html https://docs.python.org/3/library/random.html#random.randint
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Changes to the dictionary implementation. If you want more specific than that you will probably have to ask him. 
Great info in here. 
sure, but what did you have issues with?? I can understand the berrl module being confusing thats a bit of a catch all name space for development. 
Alrighty, I listed the errata rather than pretending it didn't happen... AND gave you a shoutout.
Your projects don't install dependencies through pip and you have unnecessary heavy dependencies. Pip install then execute example was having me manually chase big, unnecessary dependencies, which in turn were not trivially installed. I stopped when I would have had to fork two of your projects to remove an unnecessary dependency on jupyter just to run your example.
Type hints are the only py3 thing that invokes a strong negative reaction in me. The only other bad taste in the mouth I can recall was removing tuple unpacking from lambda params, which made code less expressive and less self-explanatory, but at the end of the day I said "meh" and shrugged. This shit... it literally annoys me whenever I look at it. Honestly python code overrun by type hints (at least in this particular flavor) looks hideous. It stops being python and turns into a barely readable c++ template soup. That's what you get when you suddenly want to cram the whole type theory into a language built around duck typing. And don't tell me it's optional, in a year or two I will have to look at this shit every day. The longer I think about it, the annotations should be in an external file. Yeah, yeah, bbbut it's decoupling and might not be correct, bbbbut header files hell 2.0. As an advantage, external file would allow for iterating the ideas while not polluting the language for eternity with a half-baked, one size fits all solution, that's not even fully expressive (i am sure you can come up with use cases that are flat out impossible to describe in the current format). And if you want optional shit, it should be on you to jump through the hoops. Use an editor that takes care of the correctness if you have to. No editor is going to hide the noise of type hints embedded in the code for me. 
I don't see why it should be. Type hinting is the use case. That is sufficiently proven. The problem with this stuff is why we're introducing new syntax for things that we can already do quite well. 
He proposed some afaik and the pypy guys implemented them. But it seems weird he'd growl at himself. 
Type hinting as a use case is useful. Type hinting, in this specific implementation, tailored to one single third-party library that's not ready for production, is not demonstrated and the language shouldn't change further to accommodate it at this time.
How much are you paying for this FREE service to which you are suggesting sabotage? How much time have you volunteered to help this volunteer-powered to which you are suggesting sabotage? Oh wait... you've volunteered no money and no time. Just abuse.
You're right. I thought I checked that. But: &gt;&gt;&gt; x = 0.39999999999999997 &gt;&gt;&gt; '{}.{}'.format(str(x).split('.')[0], str(x).split('.')[1][:2]) '0.4' &gt;&gt;&gt; '{}.{}'.format(repr(x).split('.')[0], repr(x).split('.')[1][:2]) '0.39' 
May I ask what your current job is and what you dislike about it? Is something where chemistry (or basic scientific) knowledge is required but you actually mainly write code also an option? Almost all of my friends with STEM background are now essentially programmers. Some write "scientific software" for energy companies or banks, others web or educational stuff. I studied astronomy and theoretical physics and work now in computational biology. My current postdoc research involves data analysis in Python and some simulations in CUDA. I got the job besides explicitly stating at the interview that my programming experience was very limited. Not only research institutions, also companies are happy to train you and let you learn things if they are also interested in your other knowledge. The general believe is that teaching somebody to program is easier than teaching someone basic statistics, science or math. If you are unsure about such a move have a look at all the Pydata conference talks on Youtube.
If you can make use of rst or markdown, I find jupyter notebooks are super helpful for writing blog posts - especially code heavy ones because I can actually run the code that's embedded in the post and display the output. Then it's a matter of running `jupyter nbconvert - - to rst/md some.ipynb` If you're using Pelican I have a plugin that I wrote for that to handle it for me 
Nice. Next time I think I'm going to play around with pygments. I think it will do what I need it to.
Since this got so many upvotes, I can only assume most people haven't seen it before. If that's the case for you, I highly recommend watching all of his other ones too. The man is born to give talks. A youtube search for his name should bring them all up.
About the annotations in external files: [relevant PEP](https://www.python.org/dev/peps/pep-0484/#stub-files)
Is there a PEP for this? As per [What's new in 3.6?](https://docs.python.org/3.6/whatsnew/3.6.html), I believe it's [PEP-468](https://www.python.org/dev/peps/pep-0468/) but only sort-of tacked onto it- feels like this should be a bigger deal, no? I've already been planning on moving to 3.6 for a while because of how awesome and obvious f-strings are, but this would be some nice icing on the cake. :)
Not quite sure what this means - are they 'ordered' in that iterating through the keys will be in 'sorted' order, as if you had called sort on the list of keys, or will iterating through them result in you recieving them in insert order?
insert order
&gt; Pendulum is more than just a datetime library, it's also an efficient timezone library. &gt; Pendulum still depends on pytz for now, but only for its timezone database.
Neat! This is now on my read list. I didn't realise BuzzFeed had this kind of content. Shame on me!
That's great. I'm a big fan of library code doing predictable things, like the change from sort() being unstable to stable.
Please post in r/learnpython. If you want to analyse data use look at pandas.
Should have an option to read the password through STDIN (using a no-echo read mode), for those of us who don't want the encryption password showing up in `ps` or `~/.bash_history`
Agreed. Jake is usually very thorough in his analysis, as he is in this article too. But given that such an blatant problem was not addressed, doesn't sound like Jake uses conda on daily basis. I've been thinking of switching to conda/Anaconda from manual management of CPython, openblas, pip/virtualenv on linux. And I'm not convinced I should.
"ordered" means "insertion order". For a *sorted* dict see the excellent [sortedcontainers](https://pypi.python.org/pypi/sortedcontainers/1.5.3) module. This provides dicts, lists, and sets that return keys in sequence (including, you can supply a `key()` func for custom sorting), and maintain the sequence under deletions and insertions, with low overhead. This functionality is still not in the std library.
Hmm. If an algorithm *depends* or insertion order, should we still use OrderedDict even in Python3.6; for clarity? And #2: is there an equivalent space saving to be had with sets?
I'd guess deletes are a bit slower because the linked list (if it is implemented like that) has to be repaired but insertions are easy because thay are done at the end always.
Wait what does this mean for [pep 520](https://www.python.org/dev/peps/pep-0520/)
It will be confusing for newcomers to the language who may not be familiar with the syntax because the book/tutorial they are following doesn't make use of it or explain it. That said, I don't think that's a good reason to not accept the PEP.
No need. Products can just continue using OrderedDict until they drop support for &lt; 3.6.
It short: dict is now an OrderedDict. Whatever is already true of the latter is (as of 3.6) now true of the former. Ninja edit: That is, what is already true of the *behavior* of the former. There are obviously internal differences.
Apparently this can trace its origins to [a post he made on python-dev in late 2012](https://mail.python.org/pipermail/python-dev/2012-December/123028.html). As far as I can tell, there wasn't a PEP.
Thanks! 
Judging from the amount of times I've had to explain to python beginners that dictionaries are unordered, I'd have to disagree.
Does this mean you can't have integer indexes anymore? Edit: For the people who keep saying "how could that break it?", see [my confusion](https://www.reddit.com/r/Python/comments/51te8x/raymond_hettingerpython36_news_ordereddict_is/d7ew40l).
I have almost zero knowledge in python, but I think it should be: return cube(number) Or maybe assign it to another variable and then return that variable.
No need for a PEP. This is a performance change. The order of dict is still unspecified; OrderedDict is now a thin wrapper around dict, because dict happens to be ordered as an implementation detail.
Python passes references to objects as function arguments. So passing `number` as part of a list, dict, or other object would allow you to edit the number, but your are passing a mere integer (inmutable), not an object, so you are not changing the value. In other case you need to return something and then use that returned value. In your case you are not catching the value returning by `cube`. You can easily do `number = cube(number)`
Love it. Thanks!
Why would that mean you can't have integer indexes?
Why would it?
You can still use any type of key you like. The keys won't be sorted at all, they'll just be kept in order. For example, &gt;&gt;&gt; x = {'four': 4, 'seven': 3, 15: 'crazy' } &gt;&gt;&gt; x { "four": 4, "seven": 3, 15: "crazy" } &gt;&gt;&gt; x['trouble'] = 'lots of it' &gt;&gt;&gt; x[object()] = 'any hashable item at all' &gt;&gt;&gt; x { "four": 4, "seven": 3, 15: "crazy", "trouble": "lots of it", &lt;object ...&gt;: "any hashable item at all" }
Oh, so you can't access it in order, except by iterating it?
&gt; So.... nothing changed, yeah? dicts are still unordered, and ordered dicts are still ordered? From the user perspective it didn't change, from the implementation perspective it did change. &gt; Regular dicts are not ordered, so what are they talking about? Yes, according to the documentation the order is arbitrary and implementation specific. In 3.6+ they'll be ordered as an implementation detail, allowing performance improvements and code simplifications. `OrderedDict` can profit from these improvements as well since they can now be a thin wrapper around regular dicts in cpython 3.6
Why? Nothing from the user side changes, it's really just an implementation detail.
btw, /r/learnpython 
That's a separate class: OrderedDict in the connections package which he maintains.
Biomedical engineer/neuroscientist here. I have two different work flows, one for data analysis and the other for modeling. My data analysis workflow is somewhat similar to yours: *Data Analysis* At the beginning, I create a private github repo for the project and check it out. github offers unlimited private repos for people in academia, so I make lots of them. Once I get started on the actual work, I typically begin with a jupyter notebook. My ipython kernal is configured to automatically load numpy, scipy, matplotlib, pandas, seaborn, holoviews, and sympy at startup. I haven't quite gotten the hang of holoviews or bokeh yet, so I mostly use matplotlib, seaborn, and pandas for plotting. I have gotten pretty adept at using keyboard shortcuts to quickly create and delete cells, so I usually don't need a separate window for a dedicated console. If I do want a dedicated console, I have an ordinary jupyter console (not a jupyter qt console) in a drop-down console application called yakuake, so I just hit F12 to pull up my console when I need it and F12 again to get rid of it. I use the jupyter notebook to work out the analysis workflow, from loading the data to plotting it. It makes it easy to add code blocks, delete code blocks, duplicate code blocks, move code blocks around, etc. I pretty much always use pandas DataFrames as the format for the data. Once I have the workflow figured out and the plot appearance tweaked to my liking, I reorganize and combine the cells into functions. I also always have a bunch of tabs with documentation for various packages open. On my work computer this is a separate browser window on a second screen. On my laptop it is usually the same browser window. I then put these functions in a python script. I write the script using an advanced, programming-oriented text editor called Kate. Kate supports something called "sessions", which let Kate tie together a set of open files, window layout, and tools together under a certain name, making it easy to jump between projects. I use the Plasma desktop environment for Linux, which supports something called activities (basically a virtual desktop with its own set of widgets, file history, etc). I have a dedicated activity for python development, which has folders I am using at the time, a list of my kate sessions, a list of browser session, shortcuts to python-oriented applications, shortcuts to various python consoles and ssh sessions, etc. My approach to my scripts is a bit of a kludge, but I usually have a few variables and functions linked together in the `if __name__ == '__main__'` section, with long-running portions saved to and loaded from hdf5 files using `DataFrame.to_hdf`. Then I just comment or uncomment portions in the `if __name__ == '__main__'` section if I want to skip a step or change some basic properties. Everything I might need to routinely change is put in the `if __name__ == '__main__'` section. If I need multiprocessing, I usually have an argument to turn it on and off since debugging sucks in python when using multiprocessing. Generally each script is set up to carry out a single entire whole workflow, from loading raw data files at the beginning to outputting a `png`, `svg`, and `eps` figure at the end (I usually make all three). Once the code is written but before I run it, I pass it through flake8, then pylint to make sure I haven't made any stupid mistakes (which I invariably have). I find it better to fix stupid, obvious mistakes before I run the code rather than having to run the code a couple dozen times to find all the errors, especially when the error is a misspelled variable two lines before I save the figure (grrr). The function are usually set up to read data files fitting a particular format (using `pathlib` globbing) in the directory they are called from, which saves me from having to keep track of which directory the data is in across computers inside the script. I always keep the program and data folders independent. Everything is kept synced between my various computers using git. *Modeling* This is also handled through git. However, these projects tend to be larger, and I have found Jupyter to not be as useful for long-running code with lots of output. And the projects are usually too complicated for a single file. So I use a full-featured IDE called kdevelop, which embeds kate as its text editor but adds a lot of project management tools, refactoring tools, python linting tools, documentation tools, etc. It has a built-in linter so I don't need a separate flake8/pylint step, but it is a really heavy-duty program so it is overkill for my data analysis. My python activity also has a list of kdevelop projects on it. Each project is usually based in a one or more top-level directories, which are symlinked to my user python directory (yes, I know that is a terrible way to do things). There is usually a top-level directory for each individual model, and another to-level directory for a management script and associated functions that runs all the models in the right order with the right parameters. Each top-level directory has a few files, then a directory for unit tests. I unit test model code heavily, testing each function as I write it, using a combination pytest and hypothesis for the tests. I found the hard way that it is better to find out that what I think I am doing doesn't actually work before I spend a week building the rest of my code around that behavior. For the overall model management, I use pypet, which is a multiprocessing, MPI-capable python-based model management engine built around pandas that I have found to be absurdly powerful.
That was helpful, thanks.
[See this PyPy blog.](https://morepypy.blogspot.co.uk/2015/01/faster-more-memory-efficient-and-more.html) Dicts are still based on hashes.
They should still be treated as unordered
Machine learning would probably be a good fit. Personally I work as a search engineer (solr, elasticsearch) - plenty of puzzles to solve.
There are lots of data processing and statistics environments using Python. Several petrochemical companies use Python to crunch GIS data. Lots of companies contribute to OpenStack which is a large collection of APIs and system applications to orchestrate and administer virtualization and "cloud" technologies. The Australian government seems to do most of its census data processing with Python. Pretty much every single company I've ever worked at has a massive collection of Python scripts to manage all kinds of things from processing log files to system control APIs to database interfaces and every bit of maintenance you could ever need to do. Basically, web interfaces get lots of press, but they're a small fraction of the Python code out there.
when sort was changed from unstable to stable ?
[deleted] ^^^^^^^^^^^^^^^^0.4687116070059574 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
[deleted] ^^^^^^^^^^^^^^^^0.2870187621531606 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Is the author of this subscription on the subreddit? I'm getting a server error when trying to subscribe - any way to get that fixed? Really cool content by the way!
Learning Ruby right now. I was pleasantly surprised to learn today that hashes keep their order :)
They don't have to change anything. The specification hasn't changed so they still conform. 
I wasn't familiar with ordered dict, so this didn't help much :P
I don't know if this applies to you or not but the thing that most people forget is that it takes practice. Start at the beginning and work problem after problem, but not in one setting. Revisit a set of problems you worked after a day or so, and then try to do another one just like them. Then after about a week try to do one of each of the type of problems you did through out the week. I have found 'settle time' + revisiting previous work to be amazingly useful. Eventually it will start to click together and if you do this now before you get to higher level stuff you will be miles ahed of most of your classmates. 
Thanks for the nice write-up and all the efforts you put into this. I bet that (almost) everyone would benefit from better multi-core support. The alternatives listed at the bottom are certainly not ideal, but I almost got comfortable with using `multiprocessing` over the years. I can completely understand that there is a lot behind this project and idea already, and I think it will also take a whole lot of more effort to put the plan into action. Completely understandable that it hasn't been "done" yet. And please don't feel bad about not finishing through in the anticipated time frame or not finishing after all due to other things in life; it's an open source effort after all, and we all appreciate the efforts you put into this! 
Not much to it. It's a class for dict-like objects that maintain the order of their elements in a manner similar to sequence types.
This is exactly what I wanted to know.
Why "Scum" for a name, though? The screenshot looks the opposite - it looks great. Kinda reminds me of that dinky little editor called `edit.com` back in my DOS days...without all that syntax highlighting, of course.
&gt; Also the name ensures that people's standards aren't too high before they use it ;P That actually sounds a good enough idea that I might adopt it for my own projects. :D
yeah, and given that we always had `collections.OrderedDict`, it's what you should be using already for that usability you speak of. Implementation details come and go. What if around 3.9 somebody again optimizes dictionaries even harder, but at the expense of order? Will you be whining that the change broke your code, even if you were repeatedly told that implementation details =/= explicit guarantee of certain behavior? Do you depend on implementation detail specific behaviors like this? &gt;&gt;&gt; 2+3 is 5 True &gt;&gt;&gt; 2002+3 is 2005 False 
No. CPython's OrderedDict class is much faster because CPython's implementation of dict happens to be ordered. This is a CPython announcement — not a Python announcement.
If you need an OrderedDict with a lookup, you can build it on top of SortedDict from sortedcontainers.
This would be hilarious, sadly, [this is the closest thing we have to a Python Bible (PyBib? PyBible?)](https://www.python.org/dev/peps/pep-0020/)
it is. i have a little application i made for the engineers i work with. switching over and running that module, instead of the bolted-together mess i had, freed up a nice lump of code(which is purely aesthetic for me) and even had a nice little performance jump - the only way it could be any faster now is if i broke out processes onto multiple cores. 
Alright. myGlobalVar = 1 //If you just want to access a global variable, just use it def foo(): print(myGlobalVar) //If you want to modify a global variable, you need to declare it in the function def bar(): global myGlobalVar myGlobalVar = 2 foo() bar() foo() Didn't run this, but it should display 1 2 
You'll get a lot more help on /r/learnpython. A better way to deal with this is to pass the variable into the function and return it. However, you should be able to access a global variable inside of a function by using the `global` keyword. I'm on mobile so I can't really vet this, but it looks like a good explanation: http://stackoverflow.com/a/423596/2958043 Edit: added SO reference. 
you seem to be responding to two separate people with one comment
&gt; They either are and I can rely on it, or they aren't The answer is option C: They are ordered, but you can't rely on it. (because it may vary across implementations)
Yes.
What I foresee happening now is people getting confused as to why their program doesn't work on another computer because older versions of python don't have ordered dicts but their version does. If it's not part of the spec, it's better to have it be obviously incorrect so you find issues sooner.
Dicts have better performance now that's how it's helping you. As a side effect they are also ordered now, but that is not a feature.
/r/learnpython You can read the [docs](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) on it. They cover everything you need to know.
They're changing regular dicts to be ordered, and killing off OrderedDict, by the looks of it. Because if the standard python dict keeps order, you don't need a second class to do it. I believe they're using a similar (or the same) implementation that PyPy does, which is doing the same thing. See: https://morepypy.blogspot.co.uk/2015/01/faster-more-memory-efficient-and-more.html . That explains it a bit better.
A side benefit of dict being ordered is that passing keyword arguments to a function using `**kwarg` will result in `kwarg` being an ordered dict. There was at least one application I remember where I wanted to know the order of the args. Finally got what I wanted! Although not without breaking compatibility with non-cpython/PyPy implementations. 
 count = 0 def func(): global count # declare count is global count += 1 
@mchughtai93 this is the curator of Importpython. I just checked the subscription box and i am able to subscribe. I using a Gmail ID. Can you please email me cs @ importpython . com ... Not sure why you are facing this glitch. 
Yes they will. 
It's not that they won't _be_ ordered, it's that they won't be specified as ordered. Dicts being ordered will remain an implementation detail, not something that's part of the language, and other versions of CPython or other implementations of Python won't be forced to have ordered dicts by default. That's why you should use `OrderedDict` everywhere, even if it's just an alias for `dict` in CPython 3.6 specifically.
Not a bible though, but one of the best books on Python I've read. A lot of real life examples https://www.amazon.com/Fluent-Python-Luciano-Ramalho/dp/1491946008
 **Fluent Python** |||| --:|:--|:-- Current|$40.83|Amazon (New) High|$47.05|Amazon (New) Low|$32.37|Amazon (New) |Average|$41.86|30 Day [Price History Chart and Sales Rank](http://i.imgur.com/GuJnlUJ.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
The distinctions are no longer weak when they are explicitly explained in the documentation. dict order is unspecified. There is nothing ambiguous about it.
There is no guarantee that a future version of CPython won't revert to an unordered dict, or that other implementations will also have it ordered. OrderedDict should stay in use until such a day where the order is directly specified instead of being an implementation decision.
You should not expect this behavior when using dict period. If you want to rely on whether the dict is ordered or not, use OrderedDict. It's a neat implementation detail that in 3.6, OrderedDict is basically just dict, but you should not rely on that to any degree.
On my #2: [It seems](https://mail.python.org/pipermail/python-dev/2016-September/146341.html) that sets are unchanged.
Then people who don't like the feature should only contribute to projects that don't use it. And people who have no choice because they're getting paid for working on something, … well they get paid for following their boss’s choices. I neither want to use spaces for indentation, but if that's what I get paid for…
That's pretty easy actually, using multiprocess. Just be sure to divide the work into big enough chunks for the overhead not to dominate.
&gt; If an algorithm depends or insertion order, should we still use OrderedDict even in Python3.6; for clarity? Yes. Python 3.6's OrderedDict has a few additional methods but would otherwise be a very thin wrapper around the builtin dict, so you get guaranteed ordering (which you technically don't get for builtin) and better performances (than in 3.5)
There's no guarantee that the sun will rise tomorrow. You can measure it for 1000 years and get a 100% chance of the sun rising each day, but there's no official statement by the manufacturer somewhere saying that the sun will rise ad infinitum. 
Haha, I feel sorry for ya! If you've got the Win10 pro edition, the native docker is shaping up really nicely. Should allow you to do more linuxy things way easier than before. https://docs.docker.com/engine/installation/windows/
Out of curiosity, why is it a nightmare?
From [Sort Stability and Complex Sorts](https://wiki.python.org/moin/HowTo/Sorting#Sort_Stability_and_Complex_Sorts) &gt;Starting with Python 2.2, sorts are guaranteed to be stable.
/r/learnpython
I'm still having a hard time trusting that a dict has a deterministic order when *using* (reading from) it. I'm not saying that I don't trust the Python implementation. But what if I write code in Python 3.6, fully expecting the items to be in insertion order, and then the code is executed on 3.5 or lower? Unless 3.6 is really wide-spread I feel like I should silently ignore the fact that they now have a predictable ordering...
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
[Python 3.6 dict becomes compact and gets a private version; and keywords become ordered](https://mail.python.org/pipermail/python-dev/2016-September/146327.html)
See the answer to [my question below](https://www.reddit.com/r/Python/comments/51te8x/raymond_hettingerpython36_news_ordereddict_is/d7esgiw)
Python doesn't have a language specification. It has docs for CPython. That's it. 
Python doesn't have a spec. It only has CPython docs. And my hunch is they'll update soon (by CPython standards of "soon")
Curiosity got the better of me so looking around I found this [Truncation to N Decimal Places in Python](http://notonbluray.com/blog/truncation-python/). import numpy import math def truncFloat( floatValue, decimalPlaces ): return math.trunc( numpy.nextafter( floatValue, floatValue + floatValue ) * ( 10.0 ** decimalPlaces ) ) / ( 10 ** decimalPlaces ) truncFloat(0.39999999999999997, 2) 0.4 Oh dear!!!
But does this mean you can call `sorted()` on a normal dict now?
This tweet is very confusing; it implies that this is a language feature not an implementation detail.
In addition to what others have said, sys.version &gt; (3, 5) Is always false in python 2 (because `sys.version` is a string and python 2 is stupid) and will raise an error in Python 3. Use `sys.version_info`
So in Python 3.6 does the new `dict` follow the current `__eq__` behavior {1: 2, 3: 4} == {3: 4, 1: 2} # True Or the current `OrderedDict` behavior OrderedDict(((1, 2), (3, 4))) == OrderedDict(((3, 4), (1, 2))) # False ?
You can do that now OrderedDict(sorted(d.items())) Just replace `OrderedDict` with `dict` in Python 3.6
Thanks for the suggestion! And yes, you're absolutely right. I was planning on refactoring out the POP url into config so that non-gmail providers can work. Thanks! :-)
don't tempt me. actually, i doubt i will. it's just parsing orcad files. it's never working on big enough lumps of anything to warrant dividing up the workloads. 
Some strange design decisions here. When are you storing the messages on the machine, why not just store the whole raw message (including headers), instead of just subject/from/body? Right now you are stripping away a lot of information (even the date). Why have you made your own 'Email' object instead of using the email.message.Message objects that are returned by the email parser? You can then just use message.as_string() to get the raw message when saving it to disk. You could also use Python's mailbox (https://docs.python.org/2/library/mailbox.html) library for the disk storage instead of rolling your own, for storing messages in an RFC-compliant format (which would mean you could use the same message store in a different mail client without issues).
Python 3 has been around a few years now so I'd guess anything that made sense to backport has been backported by now.
Annotations are pretty simple to implement on top of docstrings. Which is why the only use of annotations in Python 3 nowadays is just that: a duplication of the docstring based typing that is age old in Python 2. 
If it makes you feel any better, ** for exponentiation and % for remainder (modulo) aren't formal mathematical notation- it's a programming language convention. Some languages use ^ for exponents (e.g. 4 ^ 2 = 4 ** 2 = 4 x 4 = 16). You can totally learn to code. Don't be intimidated, you'll learn the conventions as you go. Logic is more important that arithmetic. 
Not "also" but "only" nowadays with officially sanctioned definitions. 
Nicely done https://xkcd.com/1172/
[Image](http://imgs.xkcd.com/comics/workflow.png) [Mobile](https://m.xkcd.com/1172/) **Title:** Workflow **Title-text:** There are probably children out there holding down spacebar to stay warm in the winter\! YOUR UPDATE MURDERS CHILDREN\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1172#Explanation) **Stats:** This comic has been referenced 837 times, representing 0.6675% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d7fk424)
/r/learnpython
I agree. Of the approaches presented in the last N years, I thought this was by far the most useful for non-io bound parallelisation speedups. It is a shame he got to busy.
thanks i will post it 
Not sure why you're getting downvoted. I hate writing GUIs and I avoid it like the plague. I advertise myself as a "mostly backend" guy and I downplay my GUI experience and I don't take jobs that are mostly about writing GUIs. I mostly write command line programs and daemons. I practice what I preach too because with a few exceptions I do most of my work in a shell. It works pretty well. The bulk of my development has been non graphical. I do lots of server side, backend, frameworks, under the hood, big data processing, embedded, real time, build systems, performance optimization, devops, science, all sorts of fun stuff. I am occasionally pressed to do GUI work however so it's helpful to have SOME level of understanding. You should know at least enough to hack on an existing GUI or add a trivial GUI to one of your own apps. I can't tell you how happy I made somebody one day when I added a simple file picker dialog to a utility so they could run it just by clicking the icon. Took 5 minutes. Not sure if you're lumping web into GUI but you should also know at least enough web stuff to generate an HTML report or process a form submission. I would strongly suggest learning basic HTML/CSS/JQuery even if you don't use it a lot. Anytime I do GUI stuff I ALWAYS look to leverage bi-directional data binding. Any GUI framework, web or desktop, that doesn't uses data binding to bind up widgets and models is shit. Either add data binding features or run don't walk. Unfortunately I haven't personally found a good Python GUI desktop toolkit that supports data binding although I have heard it's possible with qt5 but I haven't seen running code. Actually Kivy looks pretty good in this respect but it's geared more towards tablets and stuff. Really somebody needs to hack this into tkinter so we can have it in the stdlib. For web stuff look at knockout.js 
check out saltstack also openshift both written in python. both look great on a resume.
https://www.youtube.com/watch?v=z5rRZdiu1UE
It seems not, it just [checks](https://hg.python.org/cpython/file/tip/Objects/dictobject.c#l3638) length and that [all items from one side are in the other](https://hg.python.org/cpython/file/tip/Objects/dictobject.c#l3591).
(was also joke) 
Yes, it would be nice to have. However it has been my experience that out of the programming languages I know, Python's documentation is a bit sparse.. well at least for the packages. There are many books, some free, on the base Python language. But the power is being able to expand Python, like with Pandas and scipy..
Hume liked it 
In Soviet Union, `dict` orders YOU!
1. 2 full days and you should be through a tutorial/book that explains basic python. If you are a complete beginner maybe a little longer 2. Learn python first. It is by far easier. Dont pile on extra hardship if you are just beginning to learn programming. 3. Everything. 4. Do some actually interesting things in python. Then depending on what you chose (Game programming, data analysis, Web Development) you can pick another language, or continue further with python.
Really love this script and I probably will end up using it on my servers that I only have command line with cron to send scheduled emails through my Gmail account. 
That's cool, I didn't know that. There's still global state though; the GIL, the master interpreter. But I guess if it works well enough for mod_wsgi it's probably good enough for running plugins.
An implementation detail that people will rely on for specific functionality had better make it into the specs... Or not be introduced anywhere.
People will rely on all kinds of unspecified things. That doesn't mean every possible thing should be specified. If you want an ordered dictionary, use OrderedDict.
Awesome!!!!!! 
Awesome! Let me know if you want to see any advancements in the script or if you run into any issues with it. :-)
This can't possibly end well when people don't realize this and start to implicitly rely on this behavior.
Yeah, what you're asking is kind of like a webcrawler. Or it just may be a webscraper, depending on the architecture of the site you're attempting to search and traverse. I would get familiar with using the `requests`library paired with `lxml` or `beautifulsoup` for HTML parsing. Do a simple web page retrieval and parse, and iterate from there
They aren't in a joke though.
That fantasy map one is interesting. I migjt have to share that with r/rpg.
People will begin to rely on this behaviour even when fully understanding what it means. They'll just willingly sacrifice jython/ironpython/etc. compatibility because this behaviour already works on 99% of interpreters that are in use (that is ~95% cpython and the next biggest chunk PyPy interpeters).
I've seen a large amount of code in the wild that relies on some order of looping in dict. This is how you get bugs that "works for me locally!"
It's definitely possible with Python, Python is one of the to go programming languages for webcrawlers. I wrote one myself and I'm a complete beginner :) The people at /r/learnpython are always happy to help you out.
Thanks I'll look into those
Just use requests and beautifulsoup or lxml like mentioned above, then just iterate through the HTML source for the information you need.
Another great thing about this change: it might actually fix latent bugs. Or at least make that bug case not a thing going forward. 
&gt; OrderedDict is dead. Long live dicts that are ordered. -[Raymond Hettinger](https://twitter.com/raymondh/status/773978885092323328) Also, [more discussion](https://www.reddit.com/r/Python/comments/51te8x/raymond_hettingerpython36_news_ordereddict_is/)
I've been making programs for real time process controls most of my life. The combination of Python and C++ is very suitable for that. Also programs for scientific computations are not that 'GUI intensive' and with Numpy and Scipy you can do a lot in that area.
I agree and I would say that it's in fact very irresponsible. Just look at all these retarded comments of people who can't wait to depend on this particular implementation detail as if it was guaranteed to be set in stone for eternity. 
https://mail.python.org/pipermail/python-dev/2016-September/146348.html Here's Guido's stance on it. Not specifying it explicitly at least for 3.6.
In other words you admit you have nothing and are trying to weasel out on a fee fee technicality. 
Guido agrees: https://mail.python.org/pipermail/python-dev/2016-September/146348.html
Yea, it sounds like between the lines it's "for the future: yes". The backwards compatibility argument to 3.5 seems pretty weak to me considering how most switching from Python 2 will probably end up at 3.6 or later and people who switched to 3.5 are probably very likely to go to 3.6 pretty fast and not look back. I do understand the rationale though. 
/me smacks forehead
I did something like this recently, but I used the [email module](https://docs.python.org/2/library/email.html) directly (I had to access the messages directly from the POP server instead of the disk and I had to look for a specific attachment, but still...) Basically, you'll have to walk through every single file in the directory (say, using [os.walk](https://docs.python.org/2/library/os.html?highlight=os#os.walk)) and then, for each file, build a `Message` object using [email.message_from_file](https://docs.python.org/2/library/email.parser.html#email.message_from_file) and walk its parts with [message.walk](https://docs.python.org/2/library/email.message.html#email.message.Message.walk). This is a very general line on how to do it. If you want, you can slow try each step before trying to write everything directly. Also, /r/learnpython should be more helpful for beginners.
No! Ordinary `dict`s are not guaranteed to be ordered by the Python spec.
Heh. I don't think I've ever gotten the same ordering of a dict twice when dealing with any decently sized collection. Isn't this a core tenet of Maps/Sets though? I don't think they in principle are guaranteed to be ordered anyway. 
This is going to turn out to be a mistake.
"So what" Virtually nobody needs compatibility with anything other than cpython/pypy so unless you're writing a large scale library or using another interpreter it's ok to rely on it, particularly because even though it's not part of the language spec removing ordering would still certainly break 3.6 code.
Yes. Use OrderedDict for another year, then check https://docs.python.org/dev/library/collections.html#collections.OrderedDict for "deprecated". Repeat.
Yes. The OrderedDict class is still around so you can guarantee that behavior when you need it.
Ok, there's a catch here actually. Asyncio isn't parallel, it's asynchronous. It uses something called cooperative scheduling in a single thread. Any yield statement says "okay, done for now" and allows the next coroutine in the event loop to take over. This means that any coroutine will "lock" the thread into itself until you manually release it with something like a `yield` or `await` statement. If you want something similar to JS promises, you need to look at the concurrent.futures library.
Hi, You might want to try r/forhire S
Great, have a joke downvote then
don't under sell you: if a recruiter has a good job, the money will come with. You have plenty of valuable experience.
It's called Scum, you can't expect THAT much from it! 
I hope you wrote a program to write all those elif statements in the tester.
Cross-posted. Thanks!
If you want to manage &amp; deploy local packages while also making use of externally managed dependencies, you might think about setting up a [local conda channel](http://conda.pydata.org/docs/custom-channels.html) that's accessible from computers at your company. If you're not familiar with conda, it's an open source cross-platform package management and distribution system, written in Python, but able to manage packages and dependencies in any language.
I hope you never write a library
Does it bring up a second Maya instance with separate windows? Do they work independently?
You can first find out why it is slow with some tools. Does it use a lot of CPU? If it does, asyncio won't help. If not (most likely), it is waiting for something. Try to use strace to find out. Can the things it is waiting for be done at the same time? If not, asyncio won't help either. If it is, did your new program yields when waiting?
Are there any existing implementations where they **strictly can't be** ordered? (due to dependence on an underlying datatype with fixed behaviour, for example) If not, then IMO we should try to get this into the spec. It has too many advantages not to, and no downsides I know of.
To improve your generator &gt; Try researching prime sieves, or rules on how to find primes so that you don't have to list all of those primes in a list. If you're going to implement it this way, at least write the generator properly so we can see that you can actually code. 
I threw this together today for fun. Mostly because I wanted to try out what was involved in making a CLI utility with python. Some quick observations from my experimenting: Regardless of whether you want to make a package or jut run it as a script, you need to have `#!/usr/bin/env python` at the top of the target script. If you're wanting to just have it for yourself, write the script and then `chmod +x file_name` (NOTICE no '.py') and then `mv filename /usr/bin/filename`. And now you can just run `filename` and you have a utility. If you want to make it into a package like I did, you must do it properly with setuptools in order to get pip to do the setup for you. You specifically need the ['entry_points'](https://github.com/raiderrobert/pomodoro/blob/master/setup.py#L33) argument for the `setup` function.
You could just use an `OrderedDict`.
Did you just quote yourself?
Never seen him in person. From recent videos, I've seen him in he looks 15-20 years younger than 60.
Here's the project. The posting also links to it. [Github](https://github.com/JaidenDeChon/headliner.py) The ReadMe says it all, but basically, my goal here is to create a website that links to the biggest headlines from websites that mainly publish unbiased and uncensored stories. I feel everyone should have access to that kind of content, and this could be considered an effort to give everyone access to all of it, very easily. I plan to integrate more websites in the future to be linked to, but for now, this is what I have. The method I'm using goes as follows: - Import everything needed, including BeautifulSoup - Download the HTML and turn it into a BS4 object - Use BS4 to sort through the data and find the specific *&lt;a&gt;* tags needed, which conveniently contain both the headlines themselves and *href* content (the link to the article- or at least, part of the link) - Parse through the *a* tags for the headlines - Parse through the *a* tags for the links - If the links are not already ones that can be followed as-is, make them that way so they can be used - Combine the list of headlines and the list of links into a dictionary Because of the wonderful people who made BeautifulSoup 4, and using modular, reusable code, every portion so far is very similar to the rest, with subtle differences on a by-site basis. Please let me know how I did, how it looks, what can be done better, etc. Thanks everyone! 
Within a run, the ordering should be consistent. Dict's iterators rely on this, although I'm not sure if this behaviour is an implementation detail or if it is actually guaranteed. 
I think your terminal is set to gbk encoding, and your code fails to convert unicode points because of incompatible characters. assuming windows, what does `chcp` in terminal say? Try running `chcp 65001` first (sets encoding of the current instance to utf8) and then run your stuff. &gt; The error shows in line one because it came from the console. I couldn't see the error in the .py file because it just crashed immediately. learn to run programs from terminal window by hand (some variation of `python myprog.py`), so you get to see the outcomes.
This is what happens when your 'spec' is an implementation.
Compact data structures keep more data in the cach and fetch more relevant data when prefetching. On modern processors this can make them faster even at the cost of greater code complexity as the gap between the cost of a non-cached memory access and executing a couple of extra CPU instructions keeps widening. This optimization might actually hurt performance on some platforms such as low powered embedded CPUs. They will probably enjoy the smaller memory footprint, though. 
You should still use OrderdDict anyway - this is only an implementation detail!
&gt; Keys and values are iterated over in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionary’s history of insertions and deletions. If keys, values and items views are iterated over with no intervening modifications to the dictionary, the order of items will directly correspond. This allows the creation of `(value, key)` pairs using `zip()`: `pairs = zip(d.values(), d.keys())`. Another way to create the same list is `pairs = [(v, k) for (k, v) in d.items()]`. so I'd say its part of the spec
I don't think that's the case, but even if it is, I don't think any part of Python claims to adhere to the LSP, making it not a bug, just a design decision you disagree with.
Looks like a lot of hard work being put in to prepare this world's best Python playlist which has links after links. No surprise why it's getting a lot of traction.
Are there any Python-level consequences for this 'private version' thing? What exactly would it be used for?
Interesting. My team at Parse.ly maintains streamparse, which is the library that lets you run Python code with an actual Apache Storm cluster. https://github.com/Parsely/streamparse I've always thought about having a "local debug mode" that would use a simplified pure Python "Storm emulator". Right now the way streamparse topologies are run locally is by auto-generating scaffolding for Storm's "flux" component, which is a local runner bundled into the Storm core.
Nope. Ordered dicts are guaranteed to be order across all versions and implementations, normal dicts are not guaranteed to be ordered at all (the fact that they are ordered in CPython 3.6 is merely and implementation detail).
Why isn't the API just: stuff = load_property_file(filename) And now "stuff" is a dict. 
How do you get ordered keyword arguments? As far as I can tell, the ordering of `dict` in 3.6 is the only way to do that. 
Depending on the implementation in Jython, they may make kwargs an OrderedDict while leaving dict alone (for example).
I use CLion for my C/Python projects (or in your case C++). It has Python support out of the box. Edit: For Python only projects I still use PyCharm. 
There is also [pyzmail](http://www.magiksys.net/pyzmail/). Extracted attachments to great success.
You should give some examples. Starting with, what's a property file? Better API than what? What are you comparing it to?
Why wouldn't they just use collections.ordereddict though? The implementation can be made identical to normal dicts (even just an alias/unchanged subclass of dict), so there'd be no performance differnce or anything, and it'd continue to work on older and different versions of python. There's really no reason not to do that if they actually *do* know about this. It's only really assumptions made in ignorance that are a real issue. &gt;because this behaviour already works on 99% of interpreters that are in use It currently works on 0% of interpreters that are in use, and after this change is made, it'll still be a minority (even for python3 interpreters) until everyone (and every distro) updates. Backward compatibility is something people care about (it hasn't been as big a deal for 3.x as for 2.x up till now, but that'll change as the user population for 3.x grows).
It's [guaranteed](https://docs.python.org/2/library/stdtypes.html#dict.items) that a dict will iterate in the same order so long as it's not modified between the calls, and likewise `.keys()` and `.values()` will be consistently in the same order assuming the same. Any modification can result in a different order though.
That **is** guaranteed though (see [Guido's comment](https://mail.python.org/pipermail/python-dev/2016-September/146348.html)). But that's different from assuming a dict will preserve order. Ie. a future/alternate version of python could change the order of dicts, but it would need to use something like an ordered dict internally for keyword parameters if so, rather than a regular dict.
Ah I see. Thanks!
How are you actually doing the match? Are you calling re.match or some other function?
Neat, a few comments: You do `list(a_set)` in a few places, but it's not actually needed as sets are iterable and unpackable themselves. I'd understand if you returning the list to the user for manipulation but you do purely in iteration. The logic in `ScheduleManager.every` is very convoluted. You'd be better served with count = None if count == float('inf') else (count - 1) map(round, chain( [(start_at - datetime.now()).total_seconds()], islice(repeat(interval.total_seconds()), count) )) The reason for the `islice` is apparently `repeat` will only accept an integer as a second argument but `islice` will happily accept an integer or None. Finally, I'm trying to submit a PR for both of these changes but the tests bugger up. Apparently, `--cover-file-config` is "unsupported" in Nose right now (it's in master, but the latest release doesn't have it) and when I run it without that option I get `EE.EEEEEEEEEEEEEEEEEEEEEEE..F` along with a bunch of tracebacks (as well as an error about not reaching 90%, but that's probably related to the coverage file). I ran the tests both on my changes and master with the same result.
 r'^username \w+$'
oh, are those the libraries? I was talking about the built in io stuff in asyncio. Those are the actually sane wrappers people have built on them (I think).
Only Python 2.7 I think we are getting to the point now where that is simply no longer viable. Py3 support or go home.
Well if anything else, I learned something new. Thanks! 
 OrderedDict({1: None, 2: None, 3: None}) Whoops!, I've accidentally relied on a `dict`'s order. Less accidentally, consider some pipeline parsing JSON into `dict`s. The user can rely on an implementation detail to losslessly convert this into an `OrderedDict`, or they can be a good user and rewrite the whole implementation to work with `OrderedDict`s to start with, ending up with much more work and more to maintain. The latter might well be a better practice, but the former certainly has its charms when there's a deadline approaching.
Ah, thanks. TIL
**THAT'S** a good thread. I just saved it and several of it's comments. Thanks!
&gt;Whoops!, I've **accidentally** Then, like I said, that's a case of assumptions made in ignorance, not people deliberately knowing better and still ignoring it. &gt;Less accidentally, consider some pipeline parsing JSON into dicts That's a better example, but it also assumes insertion order actually **does** matter here, which is rarely the case (hence why converting to dicts is commonplace). And if it does, it's not as much work as you think - there are already hooks for this in the `json` module for instance, so it's likely just a matter of adding an `object_pairs_hook=OrderedDict` parameter to the json.load call. 
I already got it to work lol. I just used Anaconda to install everything. Thank you though! 
People are going to rely on it. Eventually jython will support python3. If other implementations don't adopt this new behavior, it will be an incompatibility in practice. 
Do you know if this works with the Python2 interpreter embedded inside an application? That would be tremendously useful to me.
RegEx sounds like a drug. It even has a druggy name.
Thank you! This is exactly what I think I was missing as I was looking through all of this.
Can you install new modules under such a system? Usually you can't, but if that's possible there is no reason why this should not work for you.
Yeah, DB is what I thought is was first as well. RevDeb would be my suggestion for a new name.
Unfortunately I don't know how to do that. If you could point me to a tutorial or something on how to do that I'd love to incorporate that. Have you tried installing this? https://www.microsoft.com/en-us/download/details.aspx?id=44266 It's a minimal C++ compiler which has worked for me for a while.
Spoiler: Dan is the gossip girl. 
Therefore it is in a standard now even if it is not in the standard.
This looks interesting. Saving for later. Maybe consider cross posting to /r/machinelearning? Edit: Just saw you already did :)
The thing is, for CPU bound work you're probably doing heavy number crunching, for which you are probably already using numpy which provides much more of a performance boost than multicore pure python would. And there you can already get multicore performance beyond BLAS with cython or numba, both of which can release the GIL. It would be great if numba and cython had better support for python objects (dicts, lists, sets, etc) and if cython were more integrated into cpython. But I don't see much of a need for multicore pure python. Multiprocessing has served me well when I need to orchestrate multiple processes that need to communicate.
Hey, thanks for the link! That's the procedure that I use, but it seems to require the user to compile the cython code on their side rather than letting users download precompiled binaries. 
Ah yes.. I think I read the question wrong, now that I re-read it it's a bit odd and ambiguous. In that case if it's an *extremely* simple http server that does little other than accept a json file and return something else you could likely use http.server - but implementing anything beyond the basics with it is really not going to be worth reinventing the wheel for.
Do everyone a favor and provide examples on the page you link to. I had to click through 3 pages to see some usage examples.
Directly accessing sys.argv in setup.py is bad advice. You should register a custom command instead: https://seasonofcode.com/posts/how-to-add-custom-build-steps-and-commands-to-setuppy.html
I always reach for string methods first when using Python. If I think that's getting silly I'll move to a regex. Horses for courses :)
You might like to read this [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](http://www.joelonsoftware.com/articles/Unicode.html) for starters.
You can just `from flask import request` in those modules too, or you can pass it a a function argument from the main module.
This library looks positively fascinating. Sadly, I feel like I don't really understand the uses of all of these structures well enough to put them to proper use. Is pomegranate useful for decision making, hypothesis generation + testing, learning, and/or generating realistic-looking fake data?
Yes. You can't access the request context from another thread. Look into [this](http://flask.pocoo.org/docs/0.11/api/#flask.copy_current_request_context).
[deleted] ^^^^^^^^^^^^^^^^0.8661408153324333 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
SSH tunneling would allow you to use anything you want. http://superuser.com/questions/37738/how-to-reliably-keep-an-ssh-tunnel-open I used the accepted answer to punch out of a hostile workplace (CTO was man in the middling everyone) for my last few weeks.
This is very cool. What's performance like compared to libsnmp?
Hmm. Knowing that this was coming would certainly explain why Anaconda made the MKL versions free a few months ago. From the docs it sounds like this is more though, but Intel doesn't give the name of their conda channel anywhere obvious... 
Myopic? Care to explain? There is no difference from a security standpoint between running native code and Python code. Either way, you are telling pip to download some code from the internet and install it (by running a Python script, no less). I've given my personal reasons for not being able to compile it myself in another comment, but that's besides the point. The general way to distribute software (unless you're using something like Gentoo) is via binary packages. For development libraries, sure, you generally have the source code too (or exclusively), but that varies. If I went to install SDL, zlib, etc. on my Debian box, I'd be downloading "a random binary" from the internet. Again, most large libraries that rely on native code provide binary wheels. Not only does it remove the hurdle of requiring the exact compiler version (which is a rather annoying issue if you need multiple versions of VC++ installed), but it saves everyone some install time, especially on lower-end devices and/or for big packages. Even for the version of Python I do have the right compiler for, and on my Linux machines, I appreciate that packages such as numpy have precompiled versions so installs go quicker. This has nothing to do with open source. Any open source projects I help with that rely on native code, I ensure there are binaries available for those who want/need them. The easier it is for someone to use your software, the more likely they are to use it. Services such as TravisCI and Appveyor make this incredibly easy too, and generously provide their services for free for open source projects.
That's interesting! I'll make sure to check that out. Thanks for letting me know.
Your question is very vague.
[deleted] ^^^^^^^^^^^^^^^^0.23142779905822541 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Oh man, Google is gonna be your friend here
[deleted] ^^^^^^^^^^^^^^^^0.9660039198879657 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
If you're not familiar with the ["Context Locals"](http://flask.pocoo.org/docs/0.11/reqcontext/) you should check them out. Basically the 'request' (and some other constructs in flask) are proxies to underlying objects (analogous to a thread local variable) - so you may need to, before you hand off the request, call `request._get_current_object()`.
[deleted] ^^^^^^^^^^^^^^^^0.9094072308312693 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
[deleted] ^^^^^^^^^^^^^^^^0.496667516369943 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Will iron Python ever have a Python 3 implementation?
That's the only way to keep things thread (or courutine-)safe. When the starting function is no longer on the stack, the request context object is destroyed. 
[deleted] ^^^^^^^^^^^^^^^^0.638852763671456 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
Less than you should care about, unless you're doing thousands of concurrent requests, in which case why are you even using Flask in the first place. 
[deleted] ^^^^^^^^^^^^^^^^0.537259712547822 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
using IDLE: file menu -&gt; new file write code in the newly spawned window, for example print('what up') for i in range(3): print(i) save/save as whatever.py F5 to run it you should see something like ====================== RESTART: /home/vaphell/whatever.py ====================== what up 0 1 2 &gt;&gt;&gt; in the '&gt;&gt;&gt;' window.
I too, am learning python.. Most languages I know, like SQL you type code in at text editor then run the whole thing. IDLE is an interactive interpreter, that is at the command prompt you can enter a single command and when you hit enter it runs immediately. Try opening a File -&gt; New File using IDLE and it should let you type a script. It should even have a option to run it too.
Has this been done with other existing types? Could I see an example (reading C is no problem for me)?
Does pomegranate support schribdibble distributions?
Okay thank you, this makes more sense to me. I really was confused why it wouldn't let me type all the code in one section and then run it 
In my view, an implementation is a little to brittle or flexible to be a specification. To change a written specification, you have to choose to do so. To change an implementation-based specification you just have to fuck up a patch or have something you have no control over, like the system, changing underneath you.
Start with examples using http.server.SimpleHTTPRequestHandler then override the CGIHTTPRequestHandler.do_POST method to read and process your json. https://docs.python.org/3.5/library/http.server.html You should add a more concrete description of what you need for a fuller answer.
Seems pretty cool but sell me on it. Why should I use this over PyMC or Stan or JAGS or...?
Not sure if it covers all your needs but [crossbar.io](http://crossbar.io) has some nice RPC features and client libraries for lots of languages besides Python too. It's pretty easy to configure and getting better all the time. 
http://alkali.readthedocs.io/en/latest/quickstart.html
This is supposed to provide some optimizations on top of the normal MKL builds of numpy, scipy, etc. I haven't tested it myself, but Intel is claiming major speedups in certain operations.
I think you're misinterpreting what pomegranate does. It doesn't do bayesian inference like PyMC or Stan, it implements probabilistic models like mixture models and Bayesian networks. While it is possible to implement Bayesian versions of these models using PyMC or Stan, it would be much more difficult than using pomegranate. You can't replace PyMC/Stan/JAGS with pomegranate, and it would be very difficult to do with those what I've implemented in pomegranate.
I'm not saying those are not worth worrying about - indeed, the opposite: that they are *exactly* the ones where the problems will occur, rather than that people would do so "even when fully understanding what it means" as per the comment I was replying to.
What's wrong with PHP? 🤔
If, but it is what it is in this case. Good chance certain cpython bugs (if there are such) would be implemented by rival interpreter s as well in the name of compatibility. Much like reactos does with Windows bugs.
You should add audio to it!
A few weeks back I gave it a quick test-run comparing a full walk (starting at the root) of a couple of devices. As comparison, I used the default CLI command "snmpwalk" which - to the best of my knowledge - uses libsnmp. It was a fairly unscientific test: The machine was running other processes at the time, and I used a single execution using ``time``. Both puresnmp and libsnmp were comparable in execution time. Sometimes libsnmp was marginally faster, sometimes puresnmp was (which surprised me a bit). I was actually expecting puresnmp to be a lot slower due to the difference of C and Python. I can't give you hard numbers though. It was a test I made out of curiosity. Since that test, I've made some considerable changes to the code though. I will have to see how the updates changed things.
Exactly what I needed. Thanks!
Just had a look at the video you posted. It's a good, easy-to grasp introduction. But I'd like to add a bit to that content... and sorry for the long read: SNMP is a very old protocol ------------------------------- The protocol is - in IT terms - ancient. The [first, now obsolete RFC](https://tools.ietf.org/html/rfc1067) dates back to **1988**! This means: * Care has been taken to keep the packets very very small as network bandwidth was at a premium back then. This makes the packets sometimes a bit cryptic when sniffing on the net. For example, [3 parts of variable type information is packed into one byte][1]. * It is, even today, very efficient. * There is widespread support. Chances are, if you have a network router, it supports SNMP. * It is **insecure**. The de-facto standard nowadays is SNMP version 2C. The "C" stands for "community based security". This is just a plain-text word that gets sent over the wire to identify the client as part of one community (or group). In that version there is no "user/password" pair or even the slightest hint of encryption. Back in 1988, that really wasn't an issue. Recently there is an update to this (SNMPv3) which adds much better authentication. On the protocol level it's the same. It's just the *content* and *semantics* that changes. As long as you are in a closed network, SNMPv2c makes things simple and easy. But as soon as you cannot trust your network, you should be careful and consider maybe switching to v3. SNMP is not only for Servers -------------------------------- While the video focuses on monitoring a server farm with SNMP, the protocol itself has its root in networking and is mainly used there. That does however, under no circumstances mean that you cannot use it for a server or computer. Basically, as long as you have a device with network connectivity and it has an SNMP agent available, you can technically use SNMP to talk to it. A coffe pot with SNMP? Doable! SNMP is not only about "traps" ---------------------------------- The guy in the video focuses on traps, which are used to send alerts from some device to a SNMP application. This is mostrly used for alerts, as is explained well in the video. SNMP can also be used to **proactively read values** from a device. You can at any point in time "ask" a device for certain values. This can be used for monitoring and graphing (for example CPU usage graph and the like). This is done using "GET", "GET NEXT" and "BULK GET" requests. It can also be used to **change the configuration of a device**. SNMP is not "read only". When configured correctly, a device can accept "SET" requests to change something. A very common example in my case is to modify the description of a port on a router. MIBs &amp; OIDs -------------- In SNMP, information is organised in a tree. Every variable has a number (called on Object Identifier, or OID). This is simply a series of numbers separated by dots. See for example [the tree for system information][4]. The hostname for example sits in `1.3.6.1.2.1.1.5.0`. There are several "main" trees, where the most important ones are `1.3.6.1.2.1` (the MIB2 tree) and `1.3.6.1.4.1` (the "vendor" tree). The MIB2 tree contains a lot of information which *should* be available on most devices (hostname, network interfaces, physical components, ...). This is standardised and mostly you can live on that tree alone. The "vendor" tree on the other hand is an open playground for vendors of network devices (routers, switches, PCs, servers, ...). Usually you can get MIB files from the vendor (example: [Mikrotik][5]). These contain extensions to the well-known standard, and if you need to access some information which only makes sense for *that* vendor, it's likely in the vendor tree. These OIDs can be cryptic for an end-user. and MIB files give names to those OIDs. But they are *not needed for SNMP*. They are purely cosmetic for the end-user. Additionally MIB files can define "tables" and extend the typing information of variables. I want to repeat again: MIBs are *not needed* to make SNMP work. It only makes it prettier. There is a shift to NETCONF/YANG -------------------------------------- Being as old as it is, SNMP clearly has its quirks. And, bandwidth has increased so much that it can be argued that you can send more readable (and easier to parse) packaets over the wire. Say hello to [NETCONF][2] and [YANG][3]. Support for this is increasing, but still nowhere near as widespread as SNMP. [1]: https://github.com/exhuma/puresnmp/blob/f4e588e5503f5ffa3c8737ced8109dd64097950f/puresnmp/x690/util.py#L47 [2]: https://en.wikipedia.org/wiki/NETCONF [3]: https://en.wikipedia.org/wiki/YANG [4]: http://www.oid-info.com/cgi-bin/display?oid=1.3.6.1.2.1.1.1&amp;submit2=Tree+display [5]: http://wiki.mikrotik.com/wiki/Manual:SNMP#Management_information_base_.28MIB.29
Okay, I'll have a look at it as well. Thanks!
Seo?
Yeah, and something like this cast into an even more *out of the box* library... eventually I'd like to see something like (totally neglecting exception handling) @TheRPCLib.expose # similar to Pyro4 class Server(object): def some_method(self, name): print("Hello {}".format(name)) if __name__ == "__main__": s = Server() print s.GetHostID() s.SpinDaemon() and on client side class Client(object): proxy = TheRPCLib.CreateProxy(hostid = "0123456789ABCDEF") def call_some_method(self): self.proxy.some_method("Spaghettimonster") def make_some_error(self): self.proxy.some_other_method() # BAM! Exception! I know Pyro4 already does this but as far as I know it doesn't take the further step to just work from anywhere to anywhere. You still have to make sure that the full route between client and server is properly configured (including port forwardings in the firewall). Pyro4 won't magically figure out the best route itself like TeamViewer and Skype do. 
OK no problem :)
so you made some adjustments upon joblib, easier for parallelling with GIL released. it sounds nice, i'd like to give a try. thank you for your work~
I like it! Could you add an issue for me as a reminder?
[deleted] ^^^^^^^^^^^^^^^^0.2825155669297137 &gt; This comment has been overwritten by [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) to protect this user&amp;apos;s privacy. The purpose of this script is to help protect users from doxing, stalking, and harassment. It also helps prevent mods from profiling and censoring. &gt; If you would like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and click Install This Script on [the script](https://greasyfork.org/en/scripts/10380-reddit-overwrite) page. Then to delete your comments, simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint: use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.
You may have a look at [oslo.messaging](http://docs.openstack.org/developer/oslo.messaging/). Though it still requires proper configuration of firewall and also the messaging broker, like RabbitMQ.
I'd do it in this order: Udacity - Intro to machine learning Coursera - Machine Learning (Octave assignments translated to Python here: https://github.com/JWarmenhoven/Coursera-Machine-Learning) The first involves a lot around discovering features.
Thanks for the info! RemindMe! 2 months "That was easy!"
Fire up a vagrant box and map your source folders into it. You then can use your favorite editor as well as getting the execution environment you need. 
As someone preparing to do his undergrad thesis in machine learning whilst knowing very little about it, I hope to one day post a similar thread. Well done for your successes :) 
Thank you very much!
along with the bigger and bigger dataset, multiprocessing should be more faster than multithread theoretically even there's more overhead out there than multithread. do you agree with that? i just made a cpu intensive(ufuncs) test of cython with nogil, and found that : if backend is threading(n_jobs=3, 2 threads), with nogil is faster than with gil (of course) if backend is multiprocess(n_jobs=3), almost the same. but multiproces is faster than multithread about 3x. if so, when data is bigger and bigger, how pomegranate(or multithreading) deals with that efficiently?? 
i just wonder how to choose a right backend to deal with the right action/data, you just uniformed them -- always using multithread instead of multiprocess, but would it be always always always fast? along with the bigger data? thank you for reply~ :)
This is not really a Python question; it's an algorithms question.
Ah, you're the same guy who put out this project I'm a big fan of for it's pragmatism: https://medium.com/xeneta/boosting-sales-with-machine-learning-fbcf2e618be3#.522efnvmb. I think a lot of people believe ML must be cutting edge, Kaggle-like, and glamourous. In reality, it all comes down to providing value, such as the NLP project. I often use it to describe practical, real-world ML. Congrats on your success!
It only works with pypy. That's why it's Python 2
I love this project and I really want to check it out, but I have a few errors. The first I fixed, it was an error with mpg321. I now sort of fix it. But it still get an error on the next step in the program. Hopefully one of you knows how to fix it: "c:\Python27&gt;test.py Hi Frank, what can I do for you? High Performance MPEG 1.0/2.0/2.5 Audio Player for Layers 1, 2 and 3 version 1.23.4; written and copyright by Michael Hipp and others free software (LGPL) without any warranty but with best wishes TODO: module search relative to binary path TODO: module search relative to binary path Playing MPEG stream 1 of 1: audio.mp3 ... MPEG 2.0 L III cbr32 24000 mono [0:02] Decoding of audio.mp3 finished. Say something! Traceback (most recent call last): File "C:\Python27\test.py", line 54, in &lt;module&gt; data = recordAudio() File "C:\Python27\test.py", line 21, in recordAudio audio = r.listen(source) File "C:\Python27\lib\site-packages\speech_recognition\__init__.py", line 471, in listen assert source.stream is not None, "Audio source must be entered before listening, see documentation for `AudioSource`; are you using `source` outside AssertionError: Audio source must be entered before listening, see documentation for `AudioSource`; are you using `source` outside of a `with` statement?" 
Why text files? 
I'll just leave this valid Perl program over here. ''=~('(?{'.('-)@.)@_*([]@!@/)(@)@-@),@(@@+@)' ^'][)@]`}`]()`@.@]@%[`}%[@`@!#@%[').',"})') 
Did you roll your own declarative syntax stuff? If you did, look at tri.declarative for a better way :P
Ah, thanks. I better abstract away the parent application.
I'm new to both ML and Python, but so far developing Python in Sublime/PowerShell has been easy enough. Package Control + plugins for Sublime, and then pip install for the libraries, and you can just use venv for the packaging - am I missing something here?
Windows.
Do you run it in a VM or have you dedicated a machine to it?
In case you don't already know it: Building RPMs is not really easy. Do you have the requirement that RPMs have to be used? Otherwise, the way more flexible and common approach to Python packaging and installation is the combination of pip and setuptools (which both should be pre-installed with every normal Python installation). RPMs generally also use pip-installable packages as their sources, so you'll likely have to go through this first anyway. Here is the official guide to Python packaging: https://packaging.python.org If you have any questions regarding this, feel free to ask here.
Machine dedicated to it just because bare metal always "*works*". I shopped Amazon's used section for a GTX 960. It was the best balance between 'can do GPU neural nets' and 'Not expensive as hell'. I tried CoreOS/Docker and getting the GPU passed through was annoying and never quite worked. ESXi is overkill. Additionally all of those will send you down tangents of other things you have to learn about to get started with machine learning. Burn a 14.04 USB installer, Grab CUDA and Tensorflow and start working with ML. Edit: Would a how to/tutorial/script on how to do this be beneficial to anyone? I just assumed it was 'easy' but seeing how long it took me just to be able to do the bird classifier I can see how it's not. 
I must've just got lucky then; this was literally the first time I'd set up something this custom; my only other experiences were with full IDEs like Eclipse and VBA. Python's been great so far!
So I fired up a Sublime text 3, now I have the package manager installed. Is there any particular "hello world" setup I should try first?
[Completing "Machine Learning is Fun!"](https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721) took 3 weeks of being my own IT department and around 30 minutes of actual machine learning. Most people that write tutorials write tutorials as if everything is already setup which most of the time it isn't, especially for beginners. Even just getting the datasets, the example has ```X, Y, X_test, Y_test = pickle.load(open("full_dataset.pkl", "rb"))``` 1. No where in the instructions does it say how to get that file. 2. It's a massive file. 3. It doesn't work in Python3
I'll check tri.declatrive out, but alkali syntax is essentially identical to Django.
If anyone is curious, [here](http://neuralnetworksanddeeplearning.com) is a FANTASTIC reference for learning about artificial neural networks. I've been working through it in my free time--I'm about halfway through so far--and I'm *very* impressed. The prose is very lucid, giving lots of motivation as well as clear explanations of *why* things are done the way they are. The book also includes lots of code examples (in Python!) showing the practical aspects of implementation. It should be accessible to a motivated reader who's been exposed to the basics of Linear Algebra and Multivariable Calculus. In particular, you need to be comfy with expressing manipulations on large data sets succinctly in matrix-vector form, and you need to know about gradients and partial derivatives. 
I have not had much luck with that under windows. It tries to be self contained but whenever you encounter an error you're on your own buddy. I had a lot of trouble getting it to work so I definitely would not recommend it to a beginner.
&gt; Since it was the last LTS it means that everything has binaries for it. ubuntu 14.04 is the last LTS? http://releases.ubuntu.com/16.04/
I suppose that makes OPs work that much more valuable
Yes. 16.04 is the current LTS. 14.04 is the last LTS. And while 16.04 is the current LTS companies do not just throw resources at something because a new shiny version comes by. Nvidia's only provides CUDA 7.5 .debs for 15.04 and 14.04. MATLAB also has support for 14.04 for a long time across a large range of their releases. 14.04 is supported for R2014B-R2017B. http://www.mathworks.com/support/sysreq/roadmap.html While I used to be a 'lets install the latest everything!". Ubuntu 14.04 is very well supported by industry and will be for some time. For a machine that I need to work with a large range of packages from different vendors it's 14.04. Laptop is 16.04/Mint. Dual-2011 server is 16.04. FreeNAS machines are 9.10 (Based on FreeBSD 10.3) and my "This machine must work" is FreeBSD 10.3. All of my Windows machines are 7.
Maybe I'm missing something, but why is there sensitive information in your python source code? Usually if you need to use a password or API key you would put those in a separate text (or other format) file and make that file only readable to the user running the python code. Then in the python code you open the text file, read the sensitive information, and continue executing.
Don't use a scripting language. Anything interpreted or JITed will be easily reverse engineered. Technically even compiled code can be reverse engineered, but you'll get assembly and that's harder to understand. Anything you do will only make it harder to reverse engineer the code, and it *has to be that way* because if you mess enough with the code, the *computer* won't be able to understand and execute it.
I think Pyro4 fits your requirements more than you make it out to be: &gt; target identifier (ID or something) Pyro4 can use a logical name in its proxy uris rather than a direct reference. You do need to have the name server running to map logical names to direct references, but that will be the case with any system that creates a new abstract namespace on top of regular TCP/IP ip addresses and socket ports. &gt; credentials (username/password, SSH public key...) While Pyro4 doesn't do encryption (which is required to be secure against eavesdroppers), it does provide a mechanism to use a shared secret key to authenticate connections, or build something yourself. &gt; and knowledge about the API (not necessarily as part of the protocol but like RTFM) Admittedly, it's really limited, but Pyro4 proxy objects contain some metadata about the server object they reference. You can view the available methods and attributes that you can remotely access.
No, I don't agree with that. They should converge to the same speedup, but multiprocessing has to allocate an entirely new memory block for the new program whereas multithreading should not have to do that. I don't understand your benchmark. What do you mean "n_jobs=3, 2 threads", and "almost the same" if backend is multiprocess? Are you keeping the code literally the same except for changing the backend? I'd be interested in seeing your sample code for that and the timings you got, to clarify what you did. One of the reasons I prefer multithreading is because there is one copy of the model which each thread uses, as opposed to having to copy the model over to each process and then recombine them. It helps a lot with the bookkeeping.
I've read that, it's great, and so is this: http://cs231n.github.io/
Firewalls are there to protect against arbitrary network access. Why do you want to 'magically' get around them? Especially when it is RPC we're talking about. You certainly don't want this to be open to anyone! As I understand it, Teamviewer and Skype don't really automagically work around a firewall either. I think they use a middleman server that is accessible from both parties to set up the conversation.
RemindMe! 1 week
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
use `extend()` that is intended for bulk appends from "lists", instead of `append()` that works with single items. `re.findall()` returns a list, so ... also r/learnpython
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Subprocess.Popen doesn't wait for the command to finish. Use Subprocess.check_output instead. This will give you proper exception handling, and makes you wait for the output. Otherwise you're going to encounter race conditions Also you're using relative paths, this will only work if the command is executed in the directory itself. You should either use absolute paths or change your working directory temporarily to the directory specified. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Please use /r/learnpython
I'm on week 6 of the Stanford machine learning course at the moment and have no intention of dropping out at all. In contrary to what the article mentioned, I find that coding the algorithms "from scratch" really helps you understand what you are doing. I spend about 5 hours per week's assignment trying to figure out what I'm doing and have probably called size() on a matrix over a billion times, but all I can say that it's very much worth it. I'm still doing all these in MATLAB though (I don't want to be snobby but I dont think it's that hard?), will definitely migrate to Python in the future (or at least once I'm done with this course) From what I've read, Python is preferred because it's more user friendly and has better presentation libraries. People who use Python, am I wrong about this? 
Which should be a very thin wrapper around regular dicts, and thus much faster than the pre-3.6 version.
Even if you're on 3.6 only, if you want to guarantee ordering you should use OrderedDict. In 3.6 it should be a very thin (and thus fast) wrapper around the regular dict.
+1 for crossbar.
I used to love matlab and switched to Python. It just comes down to that Python is more open and has better support / community nowadays.
Your can learn a lot from your failures.
wasn't that a mailing list server ?
Slides for ants? It would really help if the font wasn't so small and thin and low-contrast.
Ok, no problem. Thanks!
This sounds like a nice lightweight solution. In my case I needed lots of dependencies (numpy, scipy, theano, keras) with a lot of C libs. So I decided to go with the Container solution, which ensures that I can always ship everything necessary to run the program. 
PSA: This only deals with student 101 code. input from terminal and print answer (yea, they're actually using input). Nothing to see here if you're a professional developer.
the article is about 2to3 tool found in python 3 installation
If there's already a library to do what you want, there's no point in reinventing the wheel, just use the existing library.
perhaps you can explain why my solution doesn't work. the first list creates lists with lists, which I can not interact with the way I want. So what I did next was create another from loop for nums in lst to populate another list for each possible list within the list for the lines where there are multiple numbers. What this did instead was create additional lists of each list, dependent on how many items were in the list?
For such a simple print statement, you don't need to import from future. Python 2's print statement can handle parens. Python 2.7.11 (default, May 28 2016, 16:24:58) [GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; print('testing') testing &gt;&gt;&gt; 
[I tried to go there, most people were 'eh, pickles easy'](https://www.reddit.com/r/Python/comments/4xc5ok/pickle_shouldnt_be_used_for_large_sets_of_numeric/)
Careful: Contains popups to hilltopads.net http://www.scamner.com/check/hilltopads.net
Yes! That's why I've also asked for authentication/crypto/security stuff. Sure, it would be kind of a security desaster... just as much as TeamViewer. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yeah. Pickles are basically fine if you never, ever write one to disk or send it over a non-local network. If you have persistent data, use an actual file format. If you have a network, use a network protocol. If you have third-party data, *don't allow code execution* unless you really need to! Pickle is fine for IPC in `concurrent.futures`, but I've yet to see a situation where it was the right choice to use it directly. 
Unless you want to calculate things *safely*. You can't do that using eval.
Fuck off.
More precisely, `('testing')` parses equivalently to `'testing'` in the 2.x case (ie. it's a standard use of parentheses unrelated to the print statement) In the 3.x case, print doesn't have special grammar, so the same code invokes the function correctly.
That's cool, well done.
Maybe you're referring to something like [Generic Views](https://docs.djangoproject.com/en/1.10/topics/class-based-views/generic-display/)?
How does this differ from ansible?
There's one feature it's missing - CLion doesn't auto-generate skeletons for extension modules like PyCharm does, so you don't get autocompletion or recognition of any Python-exposed methods you implement using the Python-C API/Pybind/Cython, etc. Working in a hybrid project means neither IDE is sufficient by itself, in my experience. I ended up having to work with both open at once.
Yeah but how do I get data calculated in the notebook itself (with python) in the graphs to visualize the result of my caculation editing live.
Was it [this one, about page dewarping](https://mzucker.github.io/2016/08/15/page-dewarping.html)?
Thank you so much for your inputs ! I am new to python and there is lot to learn ! I will work on version 2.0 with the above mentioned suggestions and yes that will fix this bug too ! Also props is static. It should have been a private member. Didn't know about __ modifier that will do this trick.
This is cool. How would you say this compares to Julia's approach to the expression problem (programming layers of detached multimethods around abstract types that can be overloaded (or not) for new concrete types which can then reuse abstract call stack). Also any thoughts about compiling down to Cython, Numba or Dynd?
(author here) this wasn't intended for public release quite yet. see updated README for a pointer to a paper that may answer your questions about what's brewing here.
&gt; There can be a lot of different reasons behind this: for example a Python 3 evangelist brain-washed your CTO. Really? Still? Stop dragging your feet already.
Why would I want to download 0s? Is there a 1 Downloading client too? 
Uhm the post is a link to the video of the talk..
That tool only really works with small simple programs. The sort that don't use many of the language features and don't do anything with the web. The biggest block to porting to 3 is the string/unicode change. You should look at library like Six if you're porting a major project, or an industrial strength replacement for 2-&gt;3 like Modernize.
Thank you :)
You have to sanitise pretty damn hard in order for it to be safe. You could probably get away with just allowing alphanumeric characters and + - / * ( ) If you allow underscores and quotes, you can get a shell using `__import__("os").system("/bin/bash")`. Replace bash with your own favourite malicious command. For just a calculator this might be okay, but if you want to do anything more advanced, you're going to run into issues. Best to use the PyPy sandbox, no idea how far along they are with that.
Alternatively https://github.com/Flameeyes/unpaper might be of use to you, though it's not written in Python... 
Magics are implemented as methods of a class instance, so it's theoretically possible to store and reuse data in between cells. There is no way to move data between *languages*, however, without using an intermediary, like a...file. I don't see why you would want to, either. D3 is too difficult for rapid prototyping, it's meant for making complex visualizations, it's perfectly acceptable to just write your data to a file and then read it from D3.
This looks neat, thanks for sharing. I got into AI programming with Vindinium many months ago but this looks simpler and seems to have more active players. I'll give it a go.
For some reason the video didn't appear in the post when I first saw it. I look forward to watching the video.
Came here only to write what this guy says.
I must have installed Anaconda at at least 30 Windows systems and I've had zero problems. I think all the other ways are much less beginner friendly.
Will get something downloadable shortly. The video was online before I had a chance to make my repo public
I would suggest: instead of using open() and .close - "with open(yourfile) as f: dosomething(f) ". This will close the file automatically in case you forget (like you did with the log.txt file) Other than that, good work. Maybe i will use your code myself :3
Wordpress (php) is a raging clusterfunt. 
Certainly works for a single string (as /u/tilkau comments), but the second you use it, even slightly, more extensively it changes (breaks): Python 2.7.12 (default, Jun 30 2016, 14:18:17) [GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; print('test', 'test') ('test', 'test') &gt;&gt;&gt; print('test', 'test', sep='') # python3 function File "&lt;stdin&gt;", line 1 print('test', 'test', sep='') ^ SyntaxError: invalid syntax Given the presentation was "python 3 compatibility", it's technically incompatible outside a single use.
I get that, I spend my days in 3.5. But let's not forget the actual use here: `print("ML")`, a debugging line AT BEST, no need to use a cannon to kill a fly. 
This is awesome! I'm stoked to try out CodinGame myself now.
Check out the current and past Kaggle competitions for real world use cases.
I present to you Python Wars Solo: https://github.com/pydanny/Python-Wars-Solo
See linked paper for a discussion on compilation to OpenCL. Could similarly use weave underneath to target C. Let me know if you're interested in working on something like that.
We talk about mypy in the discussion section of the linked paper. Let me know if you're interested in working on mypy integration.
No worries on posting it. Dunno who put it on HN either haha. We do support the function argument annotations. For expression and binding annotations, there isn't a good story now even with the latest PEP so we had to use the slice syntax. It works well, and works under Python 2.6+ too, so I don't see any need for a different mechanism right now.
It might be worth peeking at [Worse Than Failure](http://thedailywtf.com). They have a *huge* number of developer stories, anti-patterns, and fails. Many of these include snippets of code or diagrams that beautifully represent the fails.
https://gist.github.com/disarticulate/7286d7cebf8c071db81be49ee247e1a5 https://gist.github.com/disarticulate/d06069ff3e71cf828e5329beab8cb084
Got a link on Julia's mechanism? Not familiar with it. See paper for details on what we're doing. Anything run-time dispatch related like multimethods is different in that our mechanism is truly static / at compile time. The generated code underneath doesn't have indirection. Nothing conceptually difficult to building alternative backends. Support for true multiple backends would be interesting, let me know if you want to work on it. :-)
Default UTF-8 on Windows. FINALLY. It's not that I code on Windows much. But when I started using Python 3 I decided "okay, I'll just use open() with the defaults, clearly the right thing will happen", and later I learned that the right thing absolutely does not happen on Windows, and from then on I had to write `encoding='utf-8'` in everything even though *what the hell other encoding would I want, it's the 2010s for jeebus' sake*. I still have no idea how you print() Unicode on Windows on Python &lt; 3.6, without installing some [glorious hack](http://click.pocoo.org/5/) from Armin Ronacher that comes with Python 2 propaganda.
This is cool.
Kona, an interpreter for the K language (written in C), comes to mind. https://github.com/kevinlawler/kona/tree/master/src Sample: I t=a-&gt;t; P(4!=t &amp;&amp; 3!=ABS(t), TE) I b=0,s=0; S v=0; K z=0; S m; if(3==ABS(t))m=CSK(a); Although to the author's credit, they do occasionally use comments; something I'm not sure Arthur Whitney has ever done.
Keep in mind it's in a work-in-progress state.
&gt; only considering a single move ahead based on closeness does really well already. One of the benefits is that you don't have to accurately model your opponent's actions in the future; Your agent's ability to look n moves to the future relies on predicting accurately what your opponent is going to do. Only using a metric that doesn't try and guess what will happen in the future (apart from any assumptions that go into your metric choice) you at least avoid falling into that hole / make those tradeoffs :) 
This is great to free some memory from memcached and reclaim something useful from over-provisioned disks.
I actually started writing one of these libraries, but haven't had the time to finish it. It was pretty magical python code: Unfortunately it's too ugly to release and I haven't found time to polish it up. Here's a snippet if you're inspired to write your own! class Solid: ''' Solid objects. Solids can be added, subtracted, intersected, inverted, etc. The standard operators are chosen to match those defined for python sets. Union: A | B (bitwise or operator) Intersection: A &amp; B (bitwise and operator) Difference: A - B (subtraction operator) Symmetric Difference: A ^ B (bitwise xor operator) Complement: ~A (bitwise inverse operator) Design note: the logic for union, intersect, difference and compliment come from csg.js. Rotation, translation, etc. have syntax inspired by OpenSCAD. ''' def __init__(self, polygons=[]): self.polygons = polygons 
No. PyInstaller works with both Windows and Linux, but you'll still have to create Windows executables under Windows and Linux executables under Linux (e.g. in a virtual machine, or possibly using Windows 10's [Windows Subsystem for Linux](https://blogs.windows.com/buildingapps/2016/07/22/fun-with-the-windows-subsystem-for-linux/)). There is no cross-compiler that I know of that can produce both Windows and Linux executables at the same time.
3.6 is going to be awesome!
Go ahead. I have the philosophy that every knowledge is valid. Maybe this isn't the best course for you but is a path to learn python. If you really don't know nothing of Linux/python , install it. The best way to learn something is the practice. And remember, finish the course and make sure that you learn 90% of content. 
You don't usually create an executable for Linux like you would for Windows, because you can execute a Python script directly like an executable. However, packaging an application for Linux is a pain, because there are lots of different packaging systems.
This is nice mate. I'm cross-posting to r/learnAI which is a subreddit I'm trying to build up. If you have any content like this in future please think of putting it on r/learnAI!