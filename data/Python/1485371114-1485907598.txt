python4?
What exactly is the error message you get? At what point does it stop working?
And I think that is a very bad API. 1. Visually `df[["a"]]` and `df["a"]` don't look all that different. 2. That `__getattr__` is taking both a `str` and a `list` suggests that some kind of automatic promotion is taking place. That is certainly how I code all my functions that take multiple types. If I accept `foo` and `bar` types then the top of the function is always `if isinstance(arg, foo): arg = convert_to_bar(arg)`. So I expect that `df["a"]` gets immediately converted to `df[["a"]]`. Pandas has lots of little gotcha's like this. For instance passing a tuple into an indexer function gives a different result than passing a list. So `df.ix[(1,2), :]` is not the same as `df.ix[[1,2], :]`. This is a rather significant violation of duck-typing in python. Both tuple and list are iterables, and are functionally identical unless you attempt to modify them. The argument I pass to `df.ix` are not being passed with any expectation that they will be modified. They are intended as read-only. That is why I don't even give them names. That the library cares is decidedly odd.
It would interfere with lots of things. That's why I'm saying it's probably a bad idea to overload it. I can't come up with an alternative that would be as easy on the eyes on the spot, that's why I'm wondering if there's someone out there who figured it out.
Which is what i do with `.ix`... hence the confusion. Why do I have to change. /u/Deto gives a decent explanation of the issues, but I think for most people its not something that ever comes up, and the documentation on indexing is a wall of text about an issue they will never encounter. So my choices were: `.loc` which did something, `.iloc` which was the same thing but did something else, and `.ix` which stood for index and also had a wall of text... might as well pick the one with the correct name.
&gt; Visually df[["a"]] and df["a"] don't look all that different. I disagree. In one you're passing a string to square brackets; in the other, a list of strings. Getting different behavior is perfectly reasonable. &gt; So df.ix[(1,2), :] is not the same as df.ix[[1,2], :] I get the same result with both of these. Pandas 0.19.2. 
MIT license, modern, organized, documented. :) It's fantastic.
It might be groupby or merge or something then. I've definitely experienced some weird stuff with functions that treat list and tuple args differently (this is with 0.18).
Fucking kill me
Oh definitely, but it's one of the most clear examples. That said, it's not impossible that the pandas' implementation would still override OP's as it already overrides the default behavior. If the only thing that gets replaced is bitwise or, it's not ideal but it might not be the end of the world for most code bases.
 range(0,4) == [0, 1, 2, 3] #technically, it's a range object 0 /to/ 4 == [0,1,2,3,4] 
Ok, yeah, that's confusing. 
Awesome! üëè
The print function can take several arguments and concatenate them together: print("Has ", studentName ,"payed yet?") This print function is the only function that can do this. The `input` function requires a single argument, and you are giving it 3. Also, converting to a bool like that will only work in python2, and is considered bad code in all versions. Change it to while True: studentPayed = input("Has {} payed yet? (please answer 'True' or 'False')".format(studentName)) if studentPayed in ("True", "False"): break else: print("Your input was incorrect. Only use True or False.") If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Right. Wish we had a `__set__` magic method to align with `__setattr__/__setitem__`. Perhaps it should just be `df.ix(rows=[0,1], col_names=["foo", "bar"]).set(2)` not ideal, but...
alright thanks a lot. didnt know about /r/learnpython will use it next time 
ImportError: No module named cv2
Thank you very much!
Please abandon .lock file, force people to sticky versions direct on Pipfile, keep things simple and in a single place. Even I don't feeling like there's something wrong with plaintext requirements.txt I'd liked it as ini file, still very readable and give a lot of possiblities for future.
If it isn't too much to ask, could you provide a small sample of something in long hand Python and an example of accomplishing the same task using this library for contrast? &gt; It's a concise way to do function chaining on iterables with or without parallelizing the stream into separate threads/processes As someone that wouldn't consider themselves a programmer by trade, but codes a significant amount, is this just beyond what the average user needs or something from another language adapted to Python?
There are projects that implement similar operator overloads for C++. https://ericniebler.github.io/range-v3/ https://jscheiny.github.io/Streams/ Expressing a series of data transformations from left to right does feel intuitive and requires less typing in a lot of cases, especially compared to nested function calls. It's too bad most languages don't somehow accommodate that as a built-in feature rather than merely allowing for it in foreign-looking and "hacky" libraries.
If you're using the default numeric rows, then you can change your `.ix` to `.loc` and be fine. With a `range(n)` index df.ix[[0, 2], 'A'] is the same as df.loc[[0, 2], 'A'] I've got an example [here](http://tomaugspurger.github.io/modern-1.html) if you're interested, the first example under the Indexing section.
I'm a novice so I might be wrong but I believe you don't keep running the same tests over and over. You run all your tests upon changing the code and once the tests pass you push if to your server. There are other specific things that needs to be routinely tested and you would do those using a continuous integration server. 
Awesome, thanks man! All feedback is more than welcome, I'm constantly learning new stuff and SQLAlchemy seems really interesting but has been hard for me to grasp on. Thanks again for the answer, good to know I'm not going *entirely* wrong! :D
I know that `.ix` enables logical indexing, but I wasn't sure if either `.loc` or `.iloc` do, so I checked. My intuition was that `.iloc` would, but not `.loc` since the former is position-based while the latter is label-based. Well, thankfully, but confusingly (for me, anyway), `.loc` enables logical indexing, but `.iloc` doesn't. I'm thankful, since I use logical indexing a lot. I'm confused because logical indexing seems like a type of positional indexing, not label-based indexing.
I knew that, but still don't get it.
&gt; I can't come up with an alternative that would be as easy on the eyes on the spot What about dplyr's `%&gt;%`? (Or something else that looks kinda like a pipeline.)
I don't know that it is. For casual use pandas can be a very painful confusing experience. I wish it weren't. I've tried to contact the maintainers to identify those pain points (this bit of documentation is to confusing, or this behavior is really counter-intuitive) but they don't seem that receptive. If all you need is a quick way to: 1. Read a CSV into a table 2. Reorder and re-arrange those columns 3. Modify some values in those columns [conditioned on values in other columns] 4. Join tables together by common columns 5. Calculate some aggregations then I can't really recommend Pandas. Its only when you either need to perform real statistical analysis that it starts to pay off. I've converted a lot of stuff from pandas to sqlite and found the resulting code to be a lot more understandable. Even if I have to embed a bunch of ugly sql.
There are some good blogs on OOP in Python. Reading about classes and inheritance etc really stepped up my programming skills :)
outfile.write is a method; you have to call it. I'll also assume you want to add a newline after each input: outfile.write(input("Enter Your First Name: ")) outfile.write('\n') If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Please read the sidebar before posting something.
I used to, but not quite so much anymore.
Yeah thats what really stopping me from just diving into go but im sure will catch up at some point in the future
Did you compile it with the python3 headers?
Im not exactly sure how to use ('\n') in this case. It keeps giving me a error Never mind I got it :D
Go has awesome features! But ugh that syntax :P
I wasnt using +'\n' 
I use it on my Windows machine at work. Really nice to have a BASH like interface in Windows (did not want to learn Powershell). Totally happy with it. Has one bug for Windows, but they'll address it.
Note that labeled ranges are end-inclusive and positional ranges are end-exclusive. That means df.ix[0:2] selects three rows (0, 1, 2) if rows are labeled with integers 0, 1, 2, 3, 4, 5... and selects two rows (0, 1) if they have other labels and `0:2` is a positional slice. In [190]: d = pd.DataFrame({'x': ["a", "b", "c", "d"], 'y': [5, 5, 5, 6]}) In [191]: d Out[191]: x y 0 a 5 1 b 5 2 c 5 3 d 6 In [192]: d.ix[0:2] Out[192]: x y 0 a 5 1 b 5 2 c 5 In [193]: dprim = d.set_index("x") In [194]: dprim.ix[0:2] Out[194]: y x a 5 b 5 
By logical indexing you mean boolean indexing, right? That should be the same in `__getitem__`, `.loc`, or `.iloc`.
I assume this question was for me? I got exactly the same error as is copied in the github link above (can't find HDF5). It fails during make. I went back and added the lines provided in the thread to modules/python/common.cmake, did a make clean and make, and it worked fine. I have CV up and running with Python 3.4 on the Pi.
What do you want to build after learning the language? Always choose the tool that would help you achieve this faster.
I know it was a joke because we are still stuck with the problems python2 and 3 bring by coexisting
Yeah each time I return to pandas after being away for a while in a different language, I forget which of the many indexing functions to use and would have to google it. Often I just end up extracting the numpy array of the values and working with that directly ..
You have the option. A string means you get a series. A list means you get a dataframe. If a string also gave you a dataframe, you wouldn't have an analogous method for getting a series. 
You should send this message to someone who is working on pandas, not to me.
My main languages are Scala and Python. I use Scala if I want things to be quick, and run with a very long uptime. I use Python if I want to write stuff quickly that I'm not sure I'm going to need in a few weeks. It's nice to be able to shift idioms. 
This is not bad concept, it cod be worth while without the pipe operator overloading and instead chain functions for the same effect
I was building it over and over (to test various things) and just went ahead and scripted it. This will build a .deb file. https://gist.github.com/jed-frey/d01e2d5b39ef33207efda6e170b8788c wget https://gist.githubusercontent.com/jed-frey/d01e2d5b39ef33207efda6e170b8788c/raw/f0e2939b716ea72aef8d7bae859aa76fe0907d3e/opencv320.sh chmod +x opencv320.sh ./opencv320.sh dpkg -i opencv3 It's only been tested on Ubuntu 16.04 but I can't see any reason it wouldn't work on Debian. Edit: I had to change libjpeg8-dev to libjpeg-dev for Debian. When you get done running cmake you should see this: -- Python 3: -- Interpreter: /usr/bin/python3.4 (ver 3.4.2) -- Libraries: /usr/lib/arm-linux-gnueabihf/libpython3.4m.so (ver 3.4.2) -- numpy: /usr/lib/python3/dist-packages/numpy/core/include (ver 1.8.2) -- packages path: lib/python3.4/dist-packages -- -- Python (for build): /usr/bin/python3 
I've been disappointed with the author of that blog since I bought the book Idiomatic Python from him. I like the book, but it says you get free updates while the book is being written and that it is updated frequently. I've emailed him at least four times about updates and have never got a response :(
Why not just do `**machines` Other than that, I think having the base class (which is really an abstract class in this and OP's example) have the proxy logic isn't great since now all the subclasses have that too. 
Originally coming from the R and Matlab world, I didn't fully grasp the basic of OOP until i read this [tutorial](https://www.tutorialspoint.com/python/python_classes_objects.htm).
Try the aggregate method of a grouped df. I think that is what you are looking for. 
Data analyst at a financial firm, in their nascent Big Data Analytics group. It wasn't a pure Python gig, probably 20% of a given day was Python coding. There was a lot of SQL and commercial BI tools in play.
The majority of what I do in pandas reads just like that that list you showed there. I can do it pretty easily and painlessly - it's my go to for tabular data over python builtins (unless I have 1 to 1 relationships that dictionaries will suffice). However, it did take me a while to get as comfortable with pandas as I am now. I won't say it wasn't worth it though. It did help me to see some "good" pandas code. I wish I had taken a look at [modern pandas](https://tomaugspurger.github.io/modern-1.html) earlier.
The kind of answers you'll get could be translated to any language, not really just Python. It's more about what to expect on your first job. But back to the point: My first (paid) job (I'm still there) was web development in the field of AgTech (agriculture tech), where we develop a platform that provides a decision support system to help farmers produce more and spend less. We use the Django framework as our web platform backend, along with Pandas (and a few others I think) for our analytical models and risk detection systems. Our task scheduling is provided by Celery. Tasks vary from a simple page to show a few more info, to data analysis and manipulation. Deadlines vary, depending on client leads we might have and produce season. As in most companies, schedule can be really tight at times.
I like doing challenges, might not teach you something specific but you will be forced to learn new stuff. The sidebar here has some nice things. http://www.pythonchallenge.com/ I like this one :)
Working in manufacturing, I automate high end electrical lab equipment, process the data coming off of them, and report quality metrics back. I also have worked on lots of engineering tools, desktop apps, and large scale complex data processing pipelines. The work is pretty steady, we always have more to do than we have people to do them, and I've had to make up a lot of things as I've gone along. Manufacturing is pretty neglected when it comes to software, so we've had to write a lot of our own bindings and tools.
I must not have, I'm fairly newbie to things like this, how would I go about doing that?
Yeah, thanks. At the time I made this comment I was trying to make a "generic" generator function that would allow you to loop over a list, dict, or set without caring about the underlying object type. I ended up using these kinds of collection functions to do that. 
Learn Python. Go is better at a lot of things Python is bad at. There are far more projects written in Python than Go. That matters more. Or, if you really just want to learn a new language, you should learn Rust. It is much more "new" than Go is and you'll probably learn more about software engineering and computer science as a result.
One more for kivy! It's really awesome and deserves more recognition than it gets. I haven't dived much into it but I have yet to find any conrete negatives.
The current working directory is a per-process attribute. You're creating a child process, telling that child process to change its working directory, and then the child process terminates. The change effectively evaporates, as if it never happened. You can't spawn a child process to change the CWD of the invoking (parent) process. There's no reason to do any of this stuff by spawning subprocesses. Python can do all the work natively. #!/usr/bin/env python3 import os import zipfile import urllib.request url = 'https://github.com/sivel/speedtest-cli/archive/master.zip' filename = 'master.zip' dir = 'speedtest-cli-master' urllib.request.urlretrieve(url, filename) with zipfile.ZipFile(filename) as ziphandle: ziphandle.extractall() os.chdir(dir) # now do whatever you were going to do 
We simpletons should be honored to even get a glimpse.
While there is value to flexibility in programs there is an offsetting cost. It's harder to maintain code when each line could be doing many different things. R and pandas are both great interactive languages because there are many paths from where you are to where you want to be that take relatively few commands, but that makes them bad programming languages. I want you to be specific. If you want the series then do something like `df["foo"]._series`. Otherwise you really need to comment that `df ["foo"] #using single brackets because I want the series` which I doubt anyone does. 
Lol..I always use their materials on opencourseware. 
Ah, my bad, I misunderstood.
I don't use Nix (I use Arch Linux myself) or Go, but in my experience with building Python packages on Linux, I have rarely had an issue. It is typically as easy as cloning the Git repo and running `python3 setup.py install --user` or something along those lines. Some packages ([libsass-python](https://github.com/dahlia/libsass-python) comes to mind) where I had to wait for it to compile some code prior to installation completing, but these seems kinda rare.
Nope, we're not them. We're not even US based. If you really look into it you'll find us, there aren't that many of us (EU based). But now that you linked FarmMobile, we started alpha testing farming machinery tracking and geofencing a couple of weeks ago, as a request from a client. We're not as complete as them yet, we have a broader spectrum of operations.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
What am I looking at... 
I have my own project that is a simpler version of Github's Electron, except with Python [https://github.com/Andrew-Shay/Neuron](https://github.com/Andrew-Shay/Neuron) It only supports Python 2. It's held back by Cefpython not supporting Python 3.
I hadn't heard about toga. It looks awesome!
Glad I recently taught a Pandas tutorial without `.ix` at all, then...
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Rust doesn't really seem to be growing as much as go which is why I haven't really been considering it
Hey there! While nix is an OS it is also a standalone package manager, you could use it on arch linux! The thing with nix is you don't get pip and the ability to access setup.py etc etc. It's a weird world 
I've only ever seen prime number and Fibonacci examples of generators. Interesting from an academic standpoint, but what are some other use cases?
I use Go quite a bit for ETL projects and scaling up an application. For one and done I use Python. For analysis I use R. For cross platform work I use Java. Right tool for the job. 
if we dont want to buy a server, can we cheaply run this in the cloud somewhere? My first thought is ec2 but maybe theres a dedicated service...
Anaconda 4.3 is going to be released on January 31st, and the Anaconda3 installers will be based on Python 3.6. Shortly thereafter we will release new Miniconda installers (with Miniconda3 being Python 3.6 based). In the meantime, you can easily create Python 3.6 conda environments (using conda running any version of Python), by: conda creare -n py36 python=3.6 Almost all Python packages in the default conda repository are available for Python 3.6 already, e.g. conda create -n py36 python=3.6 pandas will get a Python 3.6 environment with pandas (the pandas compiled against Python 3.6).
Regarding your request here: &gt; Also appreciate any resources on upgrading to python3, effectively using typing, and best practices around it. I recommend reading this article: http://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/ From the article: &gt; In this post, I‚Äôll explain how mypy works, the benefits and pain points we‚Äôve seen in using mypy, and share a detailed guide for adopting mypy in a large production codebase (including how to find and fix dozens of issues in a large project in the first few days of using mypy!).
if you like syntactic sugar, use ruby
1 download opencv and type cmake-gui . 2 then look for python and enable all flags, if missing paths to libraries add them there 3 exit cmake-gui 4 type make 5 type make install 6 add the following to ~/.bashrc file export LD_LIBRARY_PATH=/usr/local/lib 
Paid?
django project for a startup that was trying to digitize valet service. i did everything, and did it very poorly.
&gt; I handled deadlines by getting them and then crushing them Please tell me this is on your resume
Working on my first "big" project. Creating a script that will automate putting my work schedule into google calendar. Would have been much easier except that the website that my work uses completely botched the CSV file export. So instead of just automating the download/upload aspect I now have to rewrite the CSV file which, turns out, is not as easy as I thought. Either way this kind of "real life" application is completely awesome and I can't wait to finally figure it out and finish it.
Dunno if this counts, but I'm a fairly new DevOps engineer (with a long-time Ops-only background). Thrown directly into the fire and have had to write Nagios checks in python, as well as various pieces of automation. Been fun.
When it happens I'll let you know. I've done some contract work, wasn't hard, bashed out the product and got paid. Been headhunted by &lt;household name website&gt; for my github profile but didn't get past the third interview. Supermarket work is much easier and probably pays the same... probably. edit: not the same as contract work, charging $50 an hour for a script is better than getting $25 an hour for standing at a checkout
the startup wasn't ultimately limited by my tech, it was limited by fairly incompetent founders. i think they have since wised up and are doing a little better with a new startup in a similar vein, so good for them. i dont know how to sum up what i learned, but most of it was not strictly "tech" stuff because i had no one to learn from on that end. it was mostly about working with other people, and how to be a little more street smart in the occasionally seedy world of startups. i learned alot more about engineering by working other places that had good engineers.
I agree that it is just a tool. Although, my first job was a company that did exclusively Python so those types of places certainly exist.
Started working as a financial analyst in healthcare, got tired of doing bitchwork in excel and automated a few tasks in R. Got frustrated with R and switched to pandas, working on generating physician productivity reports at the moment. Currently looking for an excuse to get into machine learning
The sentence doesn't make sense even with "IDLE" instead of "idle" 
First paid gig was for a company writing Scrapy spiders. We were scraping job listings from websites and feeding into a database so they could analyze them later. I wouldn't mind having a job like that again. It was pretty laid back, and easy to do.
If it's open source travis or codeship will run it for you for free. You can probably pay for it too. I don't see what the big deal is though.. "buying a server" could be just getting some old machine someone is throwing away and plugging it in. 
Perl shop - lot of Python conversion projects, custom ETL jobs (used MySQL). In one sentence: Python for data - fetching, extracting, matching client data, and system monitoring - lot of Cron jobs. This was 8 years ago. Moved on to C# and Microsoft ecosystem. I still use Python for side projects and lately for iOS using Pythonista. Once you go Python, it is hard going back to something! You start thinking Python!
Scripting software builds, this was back when Python 1.5.2 was the current version. 
25$ for an hour. Wow. In my country it's 3$... But of course the living expenses are less I think. In my python programming job now the normal salary is about 6$? 50$ is just a dream for me... I would have my whole salary after like 2 days of work... :-D
It makes slightly more sense with IDLE. Still pretty incomprehensible though.
Out of curiosity how do you get the Flask server to stop when the web browser is closed? Is that even possible?
I feel it is a trade-off. It is like a little time and energy tax you pay for with adding structure, and it returns a little bonus every time the checker catches something that would've cost more time and energy later.
On mobile so can't be too verbose, but look into the describe function. Something like: df.describe()['yyyy-mm-dd'] Will return max, min, mean, count &amp; std. Can also use on a group by: df.groupby('...').describe() 
yes it is for i need it to know that to know ho to code the python
Cool stuff, there seem to be a lot of people on at the moment, so can't really steer them but the idea is awesome.
People aren't going to do your homework for you. Instead you should post what you have, and ask specific questions where you are having problems. Even if this is not homework and you're working through a published problem in order to learn, the same applies. Post your code. Ask specific questions. Finally, as per the sidebar, /r/learnpython is where you should be.
cool, try driving different bots, should be some free :)
Writing a test automation framework for a storage company
One thing that I've for the most part did not have with my first paid job were pressing deadlines, surprisingly. The first few weeks were what I could call a "do whatever you feel like", thanks to no projects I could be pushed into. Had an internal code jam and built a disastrous code editor over GTK much on the lines of Google's infamous Wave. Learned a fair bit about blocking IO and what kind of screw-ups I could possibly end up with. Moved to a Django based app to chip in for a colleague's absence for a client; a travel management app; project got dropped a week after. Some stroke of luck there. Got tagged into another client's work, writing scrapers to work with wine pricing data. The first of the "deadline is looming" problems that was accentuated by my years together of keeping away from MySQL. Was given the task of building an agile tracker for internal use, the first hands on exposure to choosing the tech, and the rest in the job. More than deadlines (which didn't really fail to exist), the learning of how to build a consumer product thanks to iterations of ideas being rejected did give some good foothold for the learning from when I quit the job and took up the current one; building a consumer news app. In all, with deadlines, personal opinion has been the standard Calvin's last minute panic as the right mood/ingredient. Aside, tends to give reasons enough to cut away from everything else that distracts and lets me focus better. 
Can't wait till the new season!
oh, and i forgot - there are tools like pypi2nix that can turn requirement files into full specs you can base the rest of
SimulateMe! Extensionlead
Simple pyqt4 app, reads text from serial, shows the data as well as encrypts and saves to a hidden location, it's sibling app reads the saved data. A laser tag score reading app. 50 bucks, 3-4 hours of work. 
With few of the versions of Python 3 it does comes along with python. Check the version by typing pip --version in command line. If its not showing then you have to install pip
Well, sometimes our hardware setup includes servos. But that's about as close to a robot as it gets. The main piece of equipment is usually a vector network analyzer or a digital sampling oscilloscope, which are used to characterize signal paths. My division makes data cables, everything from SATA to QSFP, and backplanes that are custom made to connect an entire server rack together without having to worry about cable management. 
I usually have a "quit" button in the gui, though you can also use alerting like [socket.io](https://github.com/socketio/socket.io/blob/master/Readme.md) with [Flask-socketio](https://flask-socketio.readthedocs.io/en/latest/) to listen for a disconnect with a web socket and quit on that. I don't bother because most of the apps I do are internal for sysadmins/sre/devops to present and drill into complex status of the environment. They're smart enough to quit or kill the script and it's just not a good use of my dev time to solve such a tiny issue.
ops, rip titel, I'll blame it on not being a native speaker (should say) **I want to make a funktion which pairs values**
I was writing web apps in php for a couple of years (I know), project manager was like - I've seen this cool language called python used over in the other company, we should check it out - and the next week I was writing first django application. I wish I could say I never looked back but someone had to take care of the legacy bullshit.
Not a Python library, but is this similar to what you need? https://www.morningstarsecurity.com/research/whatweb
Very Big Bang Theory. =P
No.
A couple things. First: Welcome to the light my networking brother! Second: You've already figured out that `line` wasn't actually set in your code sample. Third: When dealing with files (as well as sockets, database connections, and other IO kinds of tasks), you want to make sure you're closing them correctly after you open them. The best way to do that in python is with context managers. That's very google-able, but here's the bottom line: instead of: readFile = open(filename, 'r') if searchText in readFile: ... use with open(filename, 'r') as readFile: readFileContents = readFile.read() if searchText in readFileContents: ... this ensures that the file will *ALWAYS* be properly opened and closed, even if Python runs into a crazy error that you didn't anticipate. Also, when reading from disk, I tend to want to pull what I need to off the disk and into memory as quickly as possible and be done with it. Open file handles are a system resource that should be conserved when possible. Same thing goes for your writes. The way your code is structures makes that a bit awkward, but there's two basic options: with open(writeDeviceListFilename, 'w') as writeDeviceList: # all the code you pasted earlier or def write_out(text, filename): with open(filename, 'a') as outfil: # assuming you want to append instead of overwrite, otherwise use 'w' outfil.write(text) ... if searchText in readFileContext: stuff = "{0:30} does have {1}\n".format(switch, searchText) else: stuff = "{0:30} does not have {1}\n".format(switch, searchText) write_out(writeDeviceFilename, stuff) Next, before I go any further: It seems pedantic, but you really should bue naming your variables `like_this` instead of `likeThis`. It makes other Python programmers' eyes bleed. Think about how you'd feel about a network with the default gateway stuck in the middle of the subnet instead of at the very beginning (so `10.10.10.10/24` instead of `10.10.10.1/24`). It'll work just fine as long as everything else is configured right... but it's so *wrong* that it's distracting. Same thing goes for variables named 'stuff'. Try not to do it. The other problem you mentioned, regarding whitespace: readFile = f.readlines() if searchText in readFile: ... You're comparing your searchText against a list of strings. In that circumstance, the strings must match exactly. When doing this sort of thing, I always make sure to specify if a variable is holding text, or a list of lines. Here's one way to do that: read_file_lines = f.readlines() output = '{0:30} does not have {1}\n'.format(switch, searchText) for line in read_file_lines: # loop line by line if search_text in line: # compare each line output = '{0:30} does have {1}\n'.format(switch, search_text) break # exits the loop because we found what we're looking for with open(output_filename, 'a') as outfile: outfile.write(output) EDIT: I forgot to talk about normalization. Basically, when you can, try to avoid comparing things that may-or-may-not have whitespace, and may-or-may-not be capitalized, etc... easy way is like this: instead of: if search_text in config: .... or if search_text == other_text: ... use if search_text.strip().lower() == other_text.strip().lower(): ... or def normalize(text): return text.strip().lower() if normalize(search_text) == normalize(other_text): ....
You'll have to learn Python 3 eventually, because it's under active development and Python 2 isn't. Given that, I think you're less likely to pick up bad habits if you learn 3 first, then 2 if you find yourself in a situation where you need it.
Great stuff here! I actually figured this out an hour or two ago and it's working but I'll take what you posted and apply that as well since I'm always looking for code improvements. The variables thing is because of my dislike of underscores but I see how I need to better adapt to conventions. Thanks again for the awesome reply. I'll reply back if I have any questions or anything. Edit - File closing I was taking care of with .disconnect() but I can see your point if my script crashes before getting there... I'll alter my code style to accommodate for that.
I worked on an enterprise router, doing a lot of packet filtering, from firewall level up to application-level (mostly HTTP, but sometimes more). Probably 95% of the code base was/is Python, about 300k lines. Most interestingly, the product started at Python 1.2, and slowly made its way up to being Python 2.7. When feasible, we've also migrated some things to Python 3.4.
Lots of companies are Python 2.7 still because it's easier to hold onto legacy. That said, there's not enough difference between 2.7 and 3.x that you can't backpedal into a job if you need to do it.
It would be easier to help if you included the error, but problably you are getting a KeyError on the line: print(condic[covran]) because unless the random number is 0 in the condic dictionary the key you are trying to access is not defined
I wasn't necessarily paid to code *in Python*. I had to build an end-to-end text analytics/data science pipeline (from cleaning the text to a variety of machine learning tasks and beyond). I chose Python since it's easy to get "quick wins" with (I.e. Rapidly prototype). Plus, scikit-learn is my favorite ML package (by a mile), and we use that package all the time. Really the choice was between doing everything in SAS or R (speed was not really an issue here). We didn't choose SAS because of expensive licenses and the steeper learning curve. I already know R, but I felt that Python was so transparent with what it was doing and had such a great ecosystem that it was hard to pass up. 
This was fun. Piloted Bumblebee in a bit of a gladiatorial fight against Redbird in front of the fridge.
This line is wrong: if spk.lower == 'hi' You probably want: if spk.lower() == 'hi' 
It started out as a part time job while I was still in school. I also had experience with GIS and a connection. Eventually led to a full time job. It was a great job, wish I had stayed.
This is awesome. Makes me want to add more variety to my running. And also start running again, as I haven't been. Thanks for sharing.
Yes. It also allows you to trim an extra variable or two out of the namespace, since you can always make it a function, pass in `my_attribute` and `my_item` and just put a `return` in front of the if statement and it will give you a true or false based on the results of the statement.
General feedback here, defining the same variables over and over inside a loop is terrible form. Define them outside the loop so you don't thrash the memory manager. Also, as others have said use a list and the random package's function to select a random list element. I'm also guessing your else clause isn't doing what you want, even if it worked. There's just too much risk of off by one errors here. Make that dict a list, and use append to add to the list. Remove the len() stuff entirely.
I've been pretty impressed with the site so far. Very nice looking site, and I am frankly surprised such high quality jobs are available that are remote. IIRC, this isn't automated. I do hope the dev is working on that. I'd hate to see this site dry up in a few weeks, I'd like it as a long term resource!
Start with python 3 and only move to python 2.7 when you encounter a reason to be using python 2.7 (a library that won't work on py3, a job that requires py2, a computer that only has py2 but you don't have install privileges, etc ...)
Django/Flask will help prevent you from reinventing the wheel. Both free, but you'll still need to do way more than you would with Spark. 
despite code error, you can just use AIML and spend more time on bot logic/answer than at base code: * http://www.devdungeon.com/content/ai-chat-bot-python-aiml
I doubt you'll find something similar. Its easy to get most of those features in django by combining set of extenstions, and since all django developers will prefer to customize it to their exact needs, I don't think there would be a market for such specialized preset.
You're welcome ;)
Hey Andrew, sorry for that, I'm rather new to reddit so I just posted it to the first Python related subreddit I found, won't happen again!
That is *literally* the most beautiful thing I have ever seen.
 &gt;IIRC, this isn't automated. I do hope the dev is working on that. It probably wasn't boring enough to be automated with Python ;) 
Thx for the answer novel, i'll post in r/learnpython next time. Cool, I'll experiment with the find method and see what I get :) But regarding my question, I understand now that strip removes the \n - new-line character. But I still don't understand how that effects my program. As the \n character or any other characters shouldn't affect my "scanning" progress. Why is it that I don't get any output at all with only .readline()? Because .readline() does return a string right? So the for loop should run at least, even if with the wrong answer.
The loop runs, but now it's looking for the substring `ATAT\n`. That substring with the newline on the end does not exist in the big string, so nothing is printed. 
Aah, okay! Sorry, didn't see that, but now I get it. Thx again :))
Git out and vote yo
older you. Everyone knows old people are dumb. So protect yourself.
Agreed it should be removed from the big buttons side by side, though it should be on the downloads page -- I think that existing table of all versions is fine as is. The text and link under the two big buttons "Wondering which version to use? Here‚Äôs more about the difference between Python 2 and 3." could move to the downloads page too.
I wrote this myself and would incredibly appreciate any feedback!
Hmm... Maybe? I guess the tutorial would have said so? But! Maybe I have to auto-open python is I open .py files?.. Will try that! edit: tried. didn't work.
The Twilio API demo is always a great jumping off point. Hey guys, let me stand in front of you and in the span of ~5 minutes go from literally nothing to having you text a phone number that I registered while in front of you and having it call you back and play a random birdsong, or variants thereof.
... Working with the Twilio API for a client using Python.
rhodecode.com uses Nix. See: https://docs.rhodecode.com/RhodeCode-Enterprise/contributing/dev-setup.html?highlight=nix https://code.rhodecode.com/rhodecode-appenlight/files/32ed84e03308a2dc223e091efe7705b54101b509/default.nix
Very nice.
Yep. Python explicitly guarantees that resources allocated using `with` *WILL* be released before execution leaves that block. Also, I'd never been a fan of the underscores thing at first either. One of the things you'll find is that the Python community is quite opinionated about things like this (to the point of even [formally specifying it](https://www.python.org/dev/peps/pep-0008/)), and once you drink the koolaid and live with it a bit, you'll find most of these really are good ideas that make it harder to make certain categories of mistakes. 
Jupyter cold effectively be used as a standalone answer to social media misinformation by just allowing for Markdown Format in text cells. Long conversations and debates could be supported by creating a public Jupyter repository that is an alternative to blogs that do not allow for Markdown. Either monetizing this access or requiring subscription could be a big revenue source of Jupyter. Use of a programming language would not be required.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I just want to say that your podcast got me into Python (&amp; programming), and I look forward to each new episode! Thank you
Don't leave comments like this in the future. If you cannot help by pointing people towards /r/learnpython with a friendly comment, then just report the post and leave no comment at all.
hard to say, since the skills you learn on your own are also valuable. of course you can learn on your own and become great at it, but having people to learn from makes it easier. if you dont want to apply for a job somewhere that has good engineers, you could probably participate in an open source project that has a good reputation and get some of the same feedback. 
Good luck!
Where's your help desk I need to put in a ticket to have a chainsaw attached to my robot
You're welcome!
Last warning; there's no need to be so abrasive. Next time it happens, you'll be banned.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
lolol u think that will accomplish something? don't let the front page stew in shit for half a day if you don't want abuse.
Nice, postman is a great tool! I just recently released [Assertible](https://assertible.com), which is definitely similar to Postman, but focuses in a bit more on the testing side of things. _(Sorry for the self-plug, but it's completely free and sounds like it could be useful!)_
From a learner's perspective, the difference isn't big enough to tip the scale either way - if you know 2, you can pick up 3 very quickly, and vv. Python 3 does more things right though, and is a better language overall, so I'd recommend you start with that, then once you're comfortable, learn what the differences between 2 and 3 are, in case you need to use 2 at some time.
That was harsh. I was reporting an actual problem touching a lot of the python community : dependency hell.
Try /r/learnpython Make sure you include the code you've tried and if you are getting errors, include the complete error message. Also include which version of python and what OS you are using. [How to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) in case you didn't know. 
more like spastic
Thank you!!!
One of my big initiatives next year is 3ify both of our main apps. Whether or not that happens is another matter, but the other Python dev on my team has agreed that all new Python services will be 3 by default. 
Use an html parser like BeautifulSoup, not regex. If you have more questions like this it's better to post them on /r/learnpython.
If you're looking to start a project in Python or to learn how to get started, I definitely recommend having a look at /r/learnpython - it's a great learning resource.
It's 2017 and I Really, really wish this article were not necessary. Unfortunate upvote. Disappointed upvote No remaining faith in humanity upvote.
I think it's Python 3 o clock by all means, but the website looks fine as it is to me.
I haven't had that problem myself, but if you can get your hands on the files, you can add them to your nix store and keep going. You can also override an expression to point at another URL. These aren't new features though. Does that help at all?
Why don't you split and take the right side of the split, then split by the text after the name taking the left side, then split agin and take the right side of the &gt;, (or the last &gt; if the ... has a &gt;.
Hope I can come! Signed up for the newsletter. 
Hmmm I shouldn't have a modal overlay, unless some ad code is fritzing. Can you point out the page exactly in case I'm having a brain fart? Thanks for the help. :)
That sounds terrible. Instead of working with raw strings you should use a ORM to communicate with a database. SQLalchemy, PonyORM or Peewee are pretty good for that job if you running your REST service with flask or falcon. If you are using Django you will use the DjangoORM and in combination with django-restframework it is actually very easy to set up a save and controlled REST service. With the included Viewsets you can limit the possible interactions and still offer a explorable API. By the way there are other kinds of powerful databases that offers right of the bat a proper driver with chainable query commands instead of raw strings. Personally I like to use falcon and RethinkDB for a REST Microservice. With falcon you define a route and the possible HTTP Verbs and rethinkDB give you a simple command like this `r.db('database').table('user_table').filter({'name': name, 'date': date, ...}).run()` done. So the user can only give some query keywords and never ever have control over the database itself. The good think here rethinkdb is non-sql db and stores the data already denorminalized and as json, so no need to convert the response for the user.
Hmm, good catch! Actually you can just wrap an exception around it and have a fallback with argument `1` instead: import sys import os try: columns, rows = os.get_terminal_size(0) except OSError: columns, rows = os.get_terminal_size(1) sys.stdout.write('cols:{}\nrows:{}\n'.format(columns, rows)) With this it works: $ size.py cols:89 rows:22 $ size.py | cat cols:89 rows:22 $ cat - | size.py cols:89 rows:22 Edit: and if you want to have it in the middle like `cat - | size.py | cat` just add one more try and finally fallback to `2`! :D 
Data science/Data analysis for a sports organization. I actually didn't know any python when I was hired, and barely knew R. A lot of my job involves working with relatively small and static data sets, which R came in handy for. I've started to teach myself python, basically since the start of this month, because I have some free time and some tasks I wanted to automate. I really like python soooooooooooooo much more than R at this point though. Deadlines - I have a lot of soft deadlines that I can push back a day or three if I need to, so those are nice. But hard deadlines? Yeah, you just get those done, whether it requires overtime or working at home or whatever it takes. When there are international orgs and hundreds of thousands of dollars at stake, I will find a way to get done whatever I need to get done, even if its just a bunch of brute force math.
There can be restrictions or tax implications depending on the type of work you do but that stuff isn't usually done as remote work anyway. Right now there aren't a ton of incentives to keep remote work in the US but there are some. Communication is easier with native English speakers, having the same waking hours is very convenient (sometimes mandatory depending on the role), contractual and legal issues are much simpler, etc. There's just a lot of more serious remote work for which the costs of going with the lowest bidder are greater than the savings.
Yesterday. I forget why I did things yesterday.
Check the sidebar is has some of the best python material I have seen.
You could lean about the MVC model for software development and create a project following the MVC architecture. Your viewer can be the browser on the phone or a traditional swift/android java app. The viewer could then communicate using an API or web-server to the controller which will handle the main bulk of your logic and important code (the core of your application). The controller can be implemented in a server like Flask or Django which can also render an HTML webpage as the viewer if you go that route. The model servers as a location to storing long term data like user info or product inventory if needed. This is not necessary for simple apps that are self contained like a calculator app or an app that lets you mkae music. If you are using a model then something like SQL (and variations of SQL) or a cloud storage service might be suitable. Here's a good video about MVC that made a lot of sense to me when I first leaned about it: https://www.youtube.com/watch?v=1IsL6g2ixak
 for i in range(10): #{ print(i) #} John Hammond?! source: https://www.youtube.com/watch?v=4s_wHUNCHK0
How long have you been working for Microsoft? 
/r/nocontext ?
Yeah the same thing is happening for me... The modal that says: &gt; Sign up for the Hello Web App email list and you'll be sent the sample immediately! You can unsubscribe from the email list any time. I had to refresh the page to get out of it 
Google Microsoft airplane joke, or Microsoft helicopter joke. What are you waiting for, it's right there in front of you.
I don't feel it applies, but it's a funny joke so thanks for the laughs.
Can't say much about Eastern Europe, but I've worked with a remote team in SE Asia for over a year and it was really hard to communicate properly. My impression (and from others in my field) is that they are used (cultural-wise) to follow trough a very delineated work, lacking the "flexibility" to solve problems on their own and come up with solutions. They can have the skills but require far more supervision and coaching, not being an attractive option for remote work which needs people who can work with minimal supervision. 
I could strangle some of the people I work with who have this mentality
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I develop python apps for Android and IOS with Kivy for a living and I would say Android is much easier to develop for. This is one of the published apps, the others coming: https://play.google.com/store/apps/details?id=rodolfo.pc.rodolfo I don't understand your question though, do you want a python interpreter in Android?? In that case, inclement has got you covered: https://play.google.com/store/apps/details?id=net.inclem.pyonicinterpreter3&amp;hl=en 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Would it be possible to include salary/hourly rate info, too?
any feedback is greatly appreciated
I use the same C code that I wrote 20 years ago.. it pisses me off that I can't use Python code I wrote 5 years ago because people thought it was intelligent to change a language. I kind of switched, for most new project. But Im stuck working back in forth between the two constantly, because of older softwares. This sub keeps pushing the idea that it's stupid to stick with 2.7. Well I think the stupid thing was to break the language.
D: Okay, looking for it and getting rid of it, my apologies! Edit: Removed!
I've managed remote teams in Eastern Europe, SE Asia, and E Asia, and I tend to find that the EE teams tend to be a bit more comfortable with independent problem solving. That said, this can bring about its own issues since miscommunication and mistranslation can snowball further than with a team that requires more direct oversight.
Type: &gt; import antigravity https://xkcd.com/353/ Also see: https://www.reddit.com/r/Python/comments/1me4d5/python_import_easter_eggs/
You can use a python program to password protect/encrypt/decrypt files. If you're asking how you might integrate into the OS itself? Varies by platform, but one simple approach on Windows would be to associate a custom file extension with your decryption program. This aspect of the project won't have *much* to do with Python. It will instead have more to do with learning how these types of things work on different platforms. For instance on Windows you may need to make some modifications to the registry. A lot of times this can be the work of an installer for your application.
&gt; Ironically, Go is a lot weaker on types than Python. Even more now that we have typings/type-annotations in Python 3.6. Please elaborate on this one. Thanks!
Iterator / Generator protocol is huge. Working with dictionary's effectively Memorization of large parts of the std lib; esp when it greatly improve performance. (collectiontools, ordereddicts, deques) Internalizing the zen of python and understand how the language features play into it. also elephant in the room is asyncio i guess now too
http://matplotlib.org/gallery.html Lots of example code for images, graphs, plots. Be sure to check out the 3d stuff near the end.
I was (and still am) a newbie in Nix, so I wasn't aware of what's possible, or how to apply a workaround properly. But if you say this might be so rare that you weren't affected, maybe it's indeed not a problem.
What the library to read a CSV and a JSON are called. You wouldn't believe the number of people whom I've asked this question dont know the answers. And they have the gall to list Python on their resume as a skill.
[removed]
Maybe I'm not expressing myself adequately. My question is what Python specific knowledge would you expect in someone who supposedly worked with the language for 3-6 years? 
I am not so sure I agree, depends what is your starting point. If you learn to program and you start with C, you will have the impression that every imperative language is the same, which is true _as far as what C covers goes_. Then one day you will switch to Python ("nearly the same") and produce extremely correct C-like python code with index variables in loops. I did this myself once. It will take several months of reading and coding to use properly the built-in data containers and specific twists of the language. And in a batteries-included language like python it takes a lot of years of solving completely different problems to know that this or that module already does 90% of what you need. So I would actually say the complete opposite. You are not an expert when you realize that every language is basically the same (you may be an expert in "programming" at that point). You are an expert of language "X" when you know _in which ways language X is unique_. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/onlinelearningnow] [For anyone learning Python for data science, this an amazing resource--excellent book as free Jupyter notebooks](https://np.reddit.com/r/OnlineLearningNow/comments/5qfql3/for_anyone_learning_python_for_data_science_this/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I'd expect a mid-level developer to be able to produce code of moderate complexity that provides business value with a moderate degree of autonomy. I would expect the contributions to make it through code review in a relatively short amount of time. I would not expect the developer to create large systems.
`from __future__ import braces` [Spoiler](/s "SyntaxError: not a chance") maybe one day the error message will change :(
Yucky. Also your comparison uses the plt.xxx API which is just bad
Nice one, saving this one for later!
It's not enough reason to keep download link at "top" page. Microsoft support Win7 for long time. But it doesn't mean Win7 is easy to buy as Win10. Python developers continue to support Python 2.7 until 2020. But it's time to remove download link from "top" page.
I'm just getting started in a data science research group. This looks really useful. Thank you!
This is very similar to my process, but my goal is to break the problem down into small steps. Then work on the first step till it is functional. Then refator it and break it down into smaller steps. Rinse and repeat with the next step. 
I use the built-in flask server, Werkzeug. It's all local-host and single user so requests-per-second are a useless measure, reliability is important, as is install package size. I'd probably look closely at Sanic instead if I were to start doing things now. Actually because I started doing the GUI this way a long time ago I still use py2app and py2exe driven from GNU Make bundling all the pieces inside. Then that's packaged with NSIS on Windows and Whitebox Packages on OSX to make installers. It's a bit of a mess and if I were to start over I'd definitely be using either Nuitka or cx_freeze instead, and PyNSIST from /u/takluyver for Windows and probably still Whitebox Packages for OSX. All my Linux users just clone the git repo and already have Python 3 running themselves. I tested Nuitka quite a while ago, and it seemed to work fine, but as all these things are internal apps for employees the packaging side just doesn't matter that much to me once solved "well enough". If py2app or py2exe break I'll probably spend the time to redo that side and test it all.
See reply to /u/rainnz just below
Thank you. I'm new to this part of reddit but I think I'll be a regular, must have missed /r/learnpython
I don't think 1 language fits all. if you want typing maybe Python is not too suitable for this particular project... I use Python for lots of things and I use Go when type checking and concurrency matter
Really neat! Bravo. Any chance to view the code? 
unless you find yourself with a huge poorly written codebase and totally wrong logic XD. Then it's easier to delete everything, start writing from scratch, delete again, cry in a corner and then start over.
Never happens to me. I guess I refactor in time? Has happened to me sort of at work though. Not my code that :P
I'm in need of a Python Developer ( Python/ Agile / Scrum / ETL )urgently required for a leading retail and ecommerce company head quartered in central London. Permanent role :) 
Thank you, I added it to the article :)
I like the idea, something similar to plotly. I would try to use the matplotlib object oriented API for this kind of thing though, and return the figure at the end (there is no need to return a reference to the plt module). If you're in the mood, see if you can find out what stage matplotib is as in defining an internal representation - I believe there is an effort to define a consistent internal data structure for plots somewhat similar to defining as nested dicts.
So I actually made a really simple PDF splitter in python. I at first had it auto-detect the files, but ... that created the problem of what if you run it once. And then you accidentally run it again ... Yeah. It requires PyPDF2, but after installing that it's just plug n play. The code: import os import os.path import PyPDF2 from PyPDF2 import * def Rename (): temp_count = 0 for file in os.listdir(): if ".pdf" in file: temp_count += 1 os.rename(file, "doc_"+str(temp_count)+".pdf") def Split (): my_file = input("Enter the name of the file you want to split: ") if ".pdf" not in my_file: my_file = my_file+".pdf" try: my_file_object = open(my_file, "rb") except: print("Couldn't find the file: "+my_file) input() quit() my_pdf = PyPDF2.PdfFileReader(my_file_object) print("found "+str(my_pdf.getNumPages())+" pages to split") for page in range(my_pdf.numPages): new_pdf = open("extracted_"+str(page)+".pdf", "wb+") temp_writer = PyPDF2.PdfFileWriter() temp_page = my_pdf.getPage(page) temp_writer.addPage(temp_page) temp_writer.write(new_pdf) new_pdf.close() my_file_object.close() print("Done") def Help (): print("-----------------------------------------------------------------") print("rename - renames all the files to doc_1, doc_2, doc_3, etc") print("split - extract all the individual pages from the named file") print("quit - exists the program") print("-----------------------------------------------------------------") #Main loop running = True Help() while running is True: do = input("do: ") if "rename" in do: Rename() elif "split" in do: Split() elif "quit" in do: quit() elif "help" in do: Help() #end of main loop 
Thanks, Satan :)
You can always comment here [Is it Python 3 yet?](https://mail.python.org/pipermail/python-ideas/2017-January/044441.html).
*While @masklinn is spot on about it being wankery, let me lend you a hand ;-))))* Certainly not all the ways, aaaand you haven't found the fastest either: s = "WTF WHY" * 1000 %%timeit s1 = str(reversed(s)) ==&gt; 3.1 ¬µs per loop %%timeit s2 = s[::-1] ==&gt; 32.8 ¬µs per loop 
In every interview for a Python dev job I've been on, I've been asked a few python specific questions to gauge my experience with the language. These ranged from how would you implement such and such, to trick questions about pass by value/reference.
Everything worth using is more or less ported to Python 3. I think a few scientific packages remain but they too will be ported sooner rather than later. So just know that 2.7 exists and what the differences are but learn using 3.6+
3-6 years? All of the knowledge.
Have you checked the result of `str(reversed(s))`? Because it probably doesn't do what you expect: &gt;&gt;&gt; print(str(reversed(s))) &lt;reversed object at 0x10cacde80&gt; which would be why it's really fast: it doesn't do anything. You're looking for `''.join(reversed(s))` and spoiler alert, it's around an order of magnitude slower than `[::-1]`.
Networkx maybe?
It's not a trick question. I also ask what library would you use to communicate with a web server. 
no, i didn't, my bad :-(
I was lucky that this made it, randomly, to my reddit front page! I likely would not have seen it otherwise. My students will all be looking at this next week. My deepest appreciation and hat's off to open GNU.
Tabs in Python are an atrocity. Any time you think, "Oh, tabs would work better here", you're thinking about a different language.
Almost every project shows the current release and "hides" old releases behind a "more versions" button. Some people (students and non-coders that want to be coders) get decision anxiety as they are faced with multiple choices. Professionals could probably care less. I install 32 bit and 64 bit Python for 3.3 to 3.6 and need to go to more downloads for that already. The extra click isn't painful, and I bet a Google search for "download python 2" will continue to work directly.
Here's the link that's linked to that commit, rather than "master" which will eventually change: https://github.com/pallets/flask/blob/6e46d0cd3969f6c13ff61c95c81a975192232fed/flask/_compat.py#L67
In a similar fashion I found these tutorials: https://www.datacamp.com/community/tutorials/python-numpy-tutorial and cheat sheets: https://www.datacamp.com/community/blog/python-numpy-cheat-sheet super helpful for me
You're going to get the most bang for your buck with typing if you're working on a *large* project (think, Google or Facebook). Google actually already *has* a sort of typing system that they require with their Napoleon docstrings. It allows for a lot better documentation generation. It's also super handy if you're using a tool like PyCharm that can take advantage of it so when you do something like import pastries pastries.make_crunchy_frog( Then it can tell you the types that the function expects. Personally, we don't use typing/mypy, I don't use it on any of my projects, *but* I can see that it would be worthwhile under certain circumstances. I don't see any reason to *not* use it, but I would definitely recommend that your focus is more on *good* unit and integration tests than it is on using typing. The former exercises your code, while the latter is more of glorified comments - helpful for other devs, but not much help to the actual code (none, really, during runtime - unless you implement something yourself).
Looks awesome, thanks for sharing!
Hey all, that's my book! I'm happy to answer any questions if you have them
Very interesting. I wonder how it copes with monkey-patching. For example, if you use `range()` in module `foo.py` and then in `bar.py` say `import foo; foo.range = my_range`. That kind of thing is not common in Python, but definitely happens sometimes. Will Nuitka detect this kind of thing, or simply not work properly (i.e., use the original, built-in `range()` functionality)?
This is the most intense CSV + Python video I've ever seen to date (and I've seen almost all of them)...I'll sub to this so see where else this is going, sweet design on the dress too.
Not sure I understand the question but you access it through Django's ORM, there is little to no difference between using databases. The queries all go through the ORM. So in your app you just do: users = User.objects.all(). 
Oh come on. Many people use Python and never have to use cmath because their applications never use complex numbers. Many people use Python and never have to deal with xml.dom because they're not working with a XML. I'd hardly expect anyone to know copy_reg as well as I do thanks to a previous job, or how well to handle pickling as well as I do, because for *most* people pickling is just about easy data transport/storage and all they really need is dumps()/loads(). 
Are you sure you are measuring growth of each language (change over time) and not comparing the respective "size" of both languages with one another (which is the easier thing to do)? Given that Rust 1.0 was 20 months (May 2015) ago vs. Go 1.0 58 months ago (March 2012), it's normal for the latter to have a much more mature ecosystem of libraries, etc. than the former. As for growth, not sure how you're measuring that, but to me, having Rust show up in most language rankings after less than 2 years is pretty fast growth. Rust may not be right for your use cases, but it feels to me like it's growing more than fast enough to be taken seriously.
Exactly. Your 3-6 years with Python is going to end in a VASTLY different skillset than my 3-6 years. This question is a misguided and pointless thought experiment. I should've added the obligatory /s for clarity. I guess the fact that OP was told TWICE his question was terrible only to immediately ask the exact same question didn't make it clear that serious responses were no longer going to be given. At that point in someone's career I don't give a shit what language specific widgets you are an expert at using. I care about your ability to solve problems and architect not-shit solutions.
As I already noted, the pipe operator is native to other languages. The reason it is called syntactic sugar is that everything this library does can be done other ways in Python already. I am also an Elixir programmer, and I use Elixir's pipe operator all the time. Languages like Elixir and Ruby support something called macros, which basically is a kind of code construct that does not get compiled or interpreted directly, but instead gets translated to an equivalent piece of code first, which is then compiled or interpreted. As a programmer, you never see this intermediate code, and you don't have to. You trust the macro to do what it was designed to do. The purpose of macros is to make code more concise and/or obvious. In Elixir, the pipe operator `|&gt;` is a macro. Python does not have macros. However, it is sometimes possible to simulate what macros do in other languages. But just because it is possible does not mean it's kosher. It is not the Python way. That is why you see so many expressions of mock-horror here. Here are two equivalent pieces of code, the first with bare Python, the second with the pipe operator. Both print the same string: from syntax_sugar import * words = ['this', 'is', 'a', 'test'] print(' '.join([word.capitalize().swapcase() for word in words])) pipe(words) | [str.capitalize] | [str.swapcase] | ' '.join | print | END Result: tHIS iS a tEST tHIS iS a tEST Actually the two lines of code are not entirely equivalent, because the pipe operator code is multi-threaded. The capitalize and swapcase operations are happening on the list in parallel.
Thanks Cediddi! Interesting idea for the lightning round.
Hi Constuelo, that's fantastic. I'm honored to have helped you get into programming.
It depends on the nature of the challenge. If it is a work-related task that requires me to explore the unknown - I always start with pen and paper and think and draw sketches before I write any code. I suggest that you learn how to use PlantUML (there is a web-based version too planttext.com/planttext) to express your thoughts, as well as RestructuredText. My flow is this - I start by writing the documentation, with descriptions of data structures and the relationships between them. Ever time I make changes in the doc I remind myself how awesome it is that I only had to change the doc, instead of changing code too. If it is a thing that requires no research and is something I've done before - I just write it.
This is exactly what I needed. I really appreciate you taking the time to write that out.
Huh, can u share a link to this project? Thanks
Note: I took the script that already exists (but only works on py2), and made it 3 compatible. I also made it async so that all requests go out at the same time. Script runs significantly faster. To use, just run the script, or if you want only a specific category you can add that as the first parameter. i.e `python oreilly.py programming`
I really like datacamp.com but its not free. Only first two chapter is free.
Checkout Pycharm, it's a full IDE for python which I think does most, if not all, of the stuff you mentioned: https://www.jetbrains.com/pycharm/ There's both a paid and a free version, depending on your needs.
Good ole pyton 
This isnt really a python discussion. But the mouse is most likely your biggest issue. I also suffer from RSI and here are the things I recommend: 1) Move to a mouseless environment (you will still need a mouse for the browser though). Consider running linux with a tiling manager such as i3 because you can do everything with keyboard shortcuts. Use terminal based tools such as vim + tmux for coding. I use pycharm, so if you want an ide, thats a good one. I can get around in pycharm with just the keyboard, though occasionally I use a mouse. 2) Get a ergonomic keyboard. You can get a kinesis, an ergodox, or even just a microsoft sculpt. The split/tented layouts are going to be the be the best for you. Keep in mind that the columnar layout is going to feel more natural that the row layout your used too. (ergodox is a columnar) 3) Consider a different keyboard layout. I use colemak instead of qwerty. qwerty is all over the place and stretches your fingers a lot. Colemak puts the most used keys right there on or near the home row. 4) stand-up desk. Sitting down can be really bad for wrist blood flow. If you are sitting down, consider getting a stool or something that will help you keep good posture. 5) stay warm. Cold hands while typing reduces blood flow and can increase strain I dont think "less keystrokes" will really give you all that much, moreso less drastic movement such as moving back and forth between a keyboard and mouse.
Yeah, the moving back and forth between mouse and keyboard is what annoys me the most about the default IDLE for Python. I currently can't afford to replace my keyboard (using a mechanical QWERTZ), but it does have the advantage of requiring only very light key presses and if I'm smart about placement, I can do with very little pain. It's really just a question of moderation. Thanks for your tips though.
That looks pretty good, thanks. I'm checking it out. Any other ideas?
&gt; I should've added the obligatory /s for clarity. Probably, I've heard the same statement made non-sarcastically too many times.
Wow, I'm honored you responded to my thread. I've been loving your book all week. Thank you for writing it and for making it freely available online! (I also bought a hard copy just in case.) And thanks for all your work on sklearn! 
Yeah I wasn't sure what the best way to write this was. I did what was simplest just to get something that worked. It'll hopefully improve as I add things
Yup. Doesn't make sense. If you want typing, use Go.
I mean I've never used Django's ORM before. Nor have I used it to manipulate a Postgres database. Any tutorials you would recommend for learning it?
Ok, basically which database you use doesn't matter with the ORM. I suggest reading through the Django docs themselves. I'm on mobile so can't link them but they're pretty good, you should be able to find what you need. Good luck!
&gt; I was curious: Did you author the book using jupyter notebook? A terrific question. I'm downloading the book primarily as I want to learn more jupyter and see examples of notebooks, secondarily to learn about Python Science though I understand their reproduction is quite insane!
Also available as a 90 page [Free PDF](http://www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.pdf) from O'Reilly. Since Jake (u/jakevdp) seems too modest to promote his own stuff, and it's been of great help to me recently, I thought I would. 
[removed]
TopicDB (https://github.com/brettkromkamp/topic_db), a graph/NoSQL database (based on topic maps) which in turn is part of a bigger project to build (3D, web-based) worlds/environments: StoryTechnologies (http://www.storytechnologies.com/). It's my first major Python project and it has been a very positive experience up until now. My "normal" language is Java and it has been a real eye-opener using Python with regards to being able to test and release very quickly.
I would second Pycharm. Others have mentioned the likely cause of your pain is switching your hand from mouse to keyboard and with Pycharm you can put it into a mouseless mode. Pycharm's mouseless mode is based off vi commands so before going out and purchasing Pycharm you should should give vi a try just for the mouseless part. vi doesn't have any autocompletion so it likely isn't for you.
I am suggesting that discussions could be run on Jupyter Notebooks just because the text cells support Markdown Format, and only that.There is another use for Jupyter where the programming support is not used, and the audience for that could be huge as people become disaffected with blogging and social media. Is that you outside the box for you?
So it's just markdown? How is that different from any other webpage? I think there may be some issues with the a language barrier.
From the description it should work. If it cannot prove that range() means the built in in some context then it would have to ask libpython to call range() as defined in the current scope. 
Very cool!
It depends on your experience, and on what you want to build. For a basic tool/script, I jump into coding right away, mainly because I generally know what is required. As it becomes more complex (read: new requirements and features), I add new classes, refactor code to meet the new needs, etc. I progressively build the whole thing this way. For a complex tool/program that has many moving parts (database, web service, queues, front end, etc.), I generally begin by drawing various schemas of the possible designs/architectures. Then I weight the pros and cons of each, and I select the best one. Then I start to code, and I proceed in the same way as for a basic tool/script.
First time I've seen this. Thought it was cheesy until she started explaining what a CSV file is and I got pretty instant Halo 1 Cortana flashbacks
while I am a pycharm user myself, you can easily add autocompletion to VI
I am new enough to Python, that I am finally sort of comfortable using python from python.org and creating various virtualenvs for that. And a bit leery of installing Anaconda side-by-side. I tried installing the python requirements for your book's notebooks into the 'official' python (on Win 7/64), and with much help from http://www.lfd.uci.edu/~gohlke/pythonlibs had a pretty good time getting prebuilt wheels to satisfy python on windows dependencies. I had to modify requirements.txt as follows to reflect the newer versions of the libraries at gohlke's site. # numpy==1.11.1 numpy==1.11.3 pandas==0.18.1 # scipy==0.17.1 scipy==0.18.1 # scikit-learn==0.17.1 scikit-learn==0.18.1 scikit-image==0.12.3 # pillow==3.4.2 pillow==4.0.0 # matplotlib==1.5.1 matplotlib==1.5.3 seaborn==0.7.0 jupyter notebook line_profiler memory_profiler numexpr pandas-datareader basemap netcdf4 Most of these seem incremental jumps, Pillow go bigged though, from 3.4.2 to 4.0.0. Eventually, by pulling down these prebuilt wheels from gohlke (and modifying requirements.txt as above and installing each wheel with `pip install foo.whl`) in the order given below(\*), pip reports everything being *installed* correctly. + numpy-1.11.3+mkl-cp36-cp36m-win32.whl + matplotlib-1.5.3-cp36-cp36m-win32.whl + Pillow-4.0.0-cp36-cp36m-win32.whl + pypng-0.0.18-py3-none-any.whl + scipy-0.18.1-cp36-cp36m-win32.whl + basemap-1.0.8-cp36-cp36m-win32.whl + scikit_image-0.12.3-cp36-cp36m-win32.whl + scikit_learn-0.18.1-cp36-cp36m-win32.whl (*) if you install scikit_image (or maybe it was scikit_learn) first, it goes out and gets a newer, apparently incompatible version of matplotlib (v 2.0) So what do you expect? Will the notebooks in your book largely work with the monkey brain transplant I performed?
Yes! STaSH has made a huge difference in terms of functionality. It addresses a good percentage of my qualms with Pythonista.
Great! I'm checking it out now and Inclement is definitely looking promisingly. 
The printed book required converting the notebooks in your book all week.
 &gt;Russel Keith-Magee! &gt;He's the BeeWare guy. I've heard a couple of interviews with him on the Talk Python to Me podcast and others. He's got a community on Gitter for BeeWare and is actively involved. If you want questions answered right from the source he's a good person to work with. 
Evidently OReilly doesn't like their website getting hammered with massive asynch requests. They treat it like a DDOS and block your IP.
\* How python coders work that don't work for companies with NDAs. I have modules on modules that I'm not ever allowed to show you. The [github](https://github.com/jed-frey/PyCANape) [versions](https://github.com/jed-frey/rtplib3) I made when I was laid off are just skeletons that point to my LinkedIn page because on the rare chance someone does want to use them they'll have to hire me to do it and I'll have to start over.
Nothing about the log output provided looks successful, especially this line: OSError: [Errno 1] Operation not permitted: '/System/Library/Frameworks/Python.framework/Versions/2.7/man' You should be using a [`virtualenv`](https://virtualenvwrapper.readthedocs.io/en/latest/). You should also be aware of [the note on the homepage](http://nose.readthedocs.io/en/latest/), and seek an alternative: &gt; Nose has been in maintenance mode for the past several years and will likely cease without a new person/team to take over maintainership. New projects should consider using Nose2, py.test, or just plain unittest/unittest2.
Quick note: it requires python 3.5 since you've used the newer asyncio syntax for function definition. It won't run on 3.4 w/o changes (3.4 is default for Ubuntu 14.04 LTS).
I was going to recommend perhaps looking into [xlwings](https://www.xlwings.org/), but I am finding the latest version slower than prior versions (&lt; 0.9). FWIW, I also have a xlwings [cheat sheet](http://nbviewer.jupyter.org/github/pybokeh/jupyter_notebooks/blob/master/xlwings/Excel_Formatting.ipynb) for common tasks just in case you have other use for it. Good luck.
can pnly ageee with the Pandas suggestion, is really good with it, just used it today to compile 64 xlsx file into a csv file, took around 28 seconds to run andal d o write it to a database (the files are however small, just a couple 100 kb each). Done similar operations on larger csv files in the near hundreds of mb and it goes fairly fast still. 
I've always been curious, do you write the book and then contact O'Reilly or is it vice versa? 
No, that's not a mistake. You can use either positional or keyword arguments, which is what it is demonstrating, as the comment states. 
Excellent resource, thanks jakevdp! I'm finding that a lot of the ipython material you describe (mostly magic commands) don't seem to work in the jupyter qtconsole -- things like %%lprun, %paste, ctrl+r for searching command history, etc etc. Have these been deprecated? 
what ?
nice, thanks for this link very useful
holy shit lol. the music is so intense. nice!
&gt; How python coders work that don't work for companies with NDAs. Today I learned that Area 51 is powered by Python!
I don't have an answer but a suggestion, read up on bankers algorithm.
uh pretty sure either way they need to be opened. I'd use VBA 
Pick the right libraries from start, and build a basic and stable skeleton before anything else.
search on "panda" ?
Finite element methods - simple 1-D bar element.
Why is Jupyter the recommended ide? For my own preference, I would need to have an overview of all data frames, functions and other items created in the environment. Wouldn't users get lost if there's no such interface for overview? 
Yes I'm indeed passing a str. But still, [this](http://imgur.com/a/YJHD8).
No direct questions, just wanted to thank you for the work you do both in promoting data science and open source. We watched an excerpt of [your SciPy 2014 lecture on Frequentism and Bayesianism](https://www.youtube.com/watch?v=KhAUfqhLakw) in a data analysis course this year. All of your work that I have seen thus far has been very high quality and educational. 
[removed]
It depends on what you want to do with the "shrinked" version. Also, post questions in /r/learnpython next time.
Depends what you want to use it for. Could a sha1 or md5 hash do the trick maybe?
Take a step back, explain what you're trying to accomplish: you might be limiting the solution by a lack of knowledge about the problem.
After AllisonPKD finally fixed her camera (about 45 sec) all was fine. I really support such way of learning and promoting own skills because that could be a tactics to get out from the crowd (and show your skills), right? Thumb up for the post.
Would be interesting to see this workingk together with schematics :)
SimulateMe! moeris
[removed]
/r/learnpython
Your wish is my command :-) [A Whirlwind Tour of Python](https://github.com/jakevdp/WhirlwindTourOfPython) [Python Data Science Handbook](https://github.com/jakevdp/PythonDataScienceHandbook)
This is the right answer, good link.
Why not?
Because you can't just run 2to3 on a big project and expect it to work fine on 3 - it can only handle simple AST transformations, and porting to 3 requires changing the semantics of anything beyond very basic programs.
1) Dependencies (some legacy) which are not upgraded to python 3 for which nobody is particularly invested in doing so. 2) A lack of killer features for python 3. 3) Python 2 has been relatively well maintained.
This is just what I needed. Thanks! 
It is when you have a bunch of people running the script at the same time.
Welcome to the world of banking software. "Why rewrite something when it works? We'll just hire that one guy who still knows Cobol."
Be the change you want to see. I'd actually contribute to this package. 
Try /r/learnprogramming.
I'm not sure Python3 adoption is really that bad. It's just that people who do not follow the default (which is Python 3 by now) tend to be very defensive and talk about their reasons a lot. 
Are you asking us to do your homework? 
it's a good idea to try thanks for your feedback
Haha, I think of string as equivalent to bytes and unicode as text now. The problem is the implicit assumptions combined with subpar testing and docs
Note: you have to do exact same things in Python 2. The difference is that 3 complains when you forget to, while 2 cheerfully mangles your data without complaining. 2 doesn't require correct string handling. 3 does. It works exactly the same way in both.
Ah ok. I'll give that a try. Thank you. 
Spend more time with the math and it won't be so difficult for you.
can someone list the three major advantages of three over two? I'd like to advocate for using three more at work, but I need some ammunition
Many (most?) of which were backported. I'm not complaining. I think if they didn't do that python would be a substantially less popular language and ecosystem. Backwards compatibility matters a lot more than people give it credit for.
That's kind of what I was talking about.
Somewhat on-topic: I recall seeing something like a calendar/graph of big Python things scheduled to drop 2 support and fully adopt 3. Everything seemed to be going 3 before 2020. Anyone have a link?
There is at least one on pypi that lists 3.4 support. Personally I just wrote my own, it took all of a few hours. Salesforce API does sorta suck for reliability, but other than that it's quite straightforward.
As someone who started on python last year, I went with 2.7 because when googling which version to use the majority of pages said not to use 3 unless I specifically had a need to use certain features.
My (limited) experience is: * OS still defaults to 2.7 (self-fulfilling inertia problem) * Early migration pain/3rd-party-woes still haunting the hive-mind * Documentation still asks the question instead of just expecting 3
I haven't touched 2.x in a couple years. At this point, to be honest, it would be a lot more hassle for me to try to write something in 2.7 and deal with the differences than it would to just write it in 3.6. It's all about what you're comfortable with, and before long most of the people comfortable with 2.7 will switch over to 3.x and then wonder what the big deal was.
Hopefully that first point will be going away soon - Arch defaults to 3 already, and Ubuntu is heading in that direction IIRC.
it has its own wiki with examples
pyforce or beatbox?
Thank you for the input.
Python 2.x is used in a lot of startup and maintenance scripts in a lot of Linux distros and products. It's extra pain to have two versions of Python installed and try to keep all the system scripts and v3 script running properly. I'm sure there are tools and guides to help with this, but someone with a sysadmin background (as opposed to dev) and purpose has run into a 'NOPE!' wall quickly when trying anything v3. I certainly did, and I dabble in development. Speaking of development, I intended to go v3 when playing with machine learning, but a lot of he libraries I needed were either only available in 2.7 flavors or much easier to obtain and use in 2.7 flavors. So v3 is a bit of a victim of 2.x's success. Perl had a similar problem back in the day. I don't recall it being as bad as this, though. Then again by the time the breaking Perl version came out Python was becoming preferred for tasks previously handled by Perl.
https://pythonclock.org/
It is? I moved my entire company's stack to Python3 18 months ago. In other news, I haven't had annoying unicode encoding/decoding errors in 18 months, for some reason.
http://www.python3statement.org/ 
Can anyone point me in the direction of a comparison between the Python 2 and Python 3 bytecodes? Just how different are they? Why couldn't there be a `from __ancient_history__ import python2` that you could place in old files, which used the Python 2 parser and compiler and then run the bytecode on the Python 3 vm (with some shims, etc.). Seems like it would be a much simpler job than what Jython does to get Python running on the JVM, which I assume has a much different memory model and virtual machine.
Clever method lookup pattern in `ClassAdapter`. I would like to see URL fragment handling like Flask's.
Think this has something to do with either the number of packages or a certain package I get it too in my root but it works fine in a new conda env
I think one of Guido's biggest mistake was not learning from other languages and OS's how important backwards compatibility is. He and the core developers decided the primary focus of the new language would be features rather than ensuring a smooth transition, and the result is 9 years later many active projects still haven't moved over.
There are also performance improvements to data structures like [dict](https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict), which a lot of people can benefit from without effort.
Not this one. The one I'm thinking of is graphic and mentions a bunch of different Python things. 
&gt; I don't recall it being as bad as this, though. Everyone basically stuck with Perl 5 so there's no division. Whether that's bad is an interesting question.
- matrix multiplication operator - lots of better alternatives are now default like new style classes, lazy iterables, true division, making it a better language to teach
From personal experience, what will happen is that those people who want them will simply continue writing Python 2 code forever. This happens whenever you make concessions like this. A large percentage will continue to write **new** code using the "ancient history" library and when you try to deprecate it in 20 years they'll start screaming about how they still need time to port their code.
I still write for py2 because Jython and other runtimes are still 2. Many embedded devices do not have enough rom or even ram to run much beyond 2.2 even.
I don't remember that but the opposite. The community was a lot more enthusiast and wanted more breaking changes but Guido didn't want to make the same mistake as Perl and decided to put the fewest changes as possible. Not so much change finally, just that dynamic typing make the conversion difficult.
Pretty much all important packages are available for Python 3: http://py3readiness.org/ I started using Python as a language about a year ago and since then I never came across a package which I could not use because it wasn't available in 3. I (personally) don't get why this is debated so much .. From my point of view Python3 is omnipresent.
&gt; lazy iteration by default for lots of stdlib functions (range, map, filter, etc) -- in fairness, these are supported (to various degrees) in Python 2 but under different names (xrange, imap, ifilter, etc). Yes, and the x/i variants are available as mentioned above &gt; yield from (which is great even if you only use it for delegating iteration) Nice to have, but unnecessary. &gt; everything releated to asyncio This is kind of a niche, and asyncio difficult to program. &gt; extended unpacking (a, *b = [1, 2, 3]) Again, niche and this can be done as arguments in 2 functions but not on the fly. &gt; multiple unpacking (being able to do {**kw1, **kw2} -- this is only 3.5+) niche &gt; extended metaclass hooks (__prepare__ + the new stuff in 3.6 for __init_subclass__ and descriptor's __set_name__) 3.6 just came out, and yes these features are nice, but again 3.x is not stable as it is progressing, and a programmer must spend time relearning the language instead of using it. &gt; raise SomeExc() from existing_exc (or None if you want to kill the context!) I don't know this, so no comment. &gt; keyword only arguments (you can technically emulate this, but only with **kwargs instead of being able to explicitly define them) Nice, but not necessary. &gt; Lots of very useful additions to various existing stdlib modules (some of these were backported by 3rd party people -- functools.singledispatch and collections.ChainMap for example) Lots of useful new stdlib additions (again, some where backported by 3rd party people -- enum for example). There are nice, but not necessary. ChainMap is quite cool.
can you give an example about how it's inconsistent?
Thanks. I did that with ["$ pip install aiohttp"](http://aiohttp.readthedocs.io/en/stable/) and after a successful installation it still gives the same error.
?
I've actually really, really wanted the `__prepare__` method in production before, and couldn't take advantage of it, because 2.7.
Do you have multiple python versions installed? 
Formatting unicode into a Python 2 str will generally work, but concatenation won't.
&gt; So it's just markdown? How is that different from any other webpage? How many webpages and especially social media sites allow for Markdown Format? Not that many. A data farm serving Jypeter notebooks could become a ready-made means to have a national discussion with some depth that cannot happen in a social media blog. It could be an answer to Facebook and Google, especially the latter, who refuses to allow for Markdown in its sites. &gt; I think there may be some issues with the [..] language barrier. I am not considering international needs, but political discussion within a nation. Besides, aren't language needs for Jupyter handled with Locale Settings? 
Yes, there are lots of new features, but none of them are "killer", and the sum total of them isn't "killer". And to define "killer": A compelling set of features that outweigh the cost of migrating an app from 2 to 3. If the benefit isn't there, then moving simply to move doesn't make a lot of sense, especially if you have limited time and budget. And clearly, for many maintainers, 6.5 years of "new" features still isn't a strong enough sell to port. I'd say that's a testament to how good Python 2 was.
The point is both projects made a major release which broke compatibility with most existing code, and both projects suffered for it - Perl has become irrelevant, Python has confused users and had to maintain the 2.x branch years longer that it should have been.
I suppose they go by the universal rule: "If something works, don't fiddle with it."
You, my friend, just made me very happy. Thank you so much...it worked. Really appreciated!!!
Why doesn't python3 have an option to run python2 code. At least for the unicode/bytes stuff which is pain to convert.
&gt; hasn't destroyed the profitability of the language. If you programmed in the 1990s, you would know how wrong you are. Delphi/Pascal was a serious contender for C++ in those times. Now it's a language people you haven't heard of.
Money, it's all resumed to money. A big company , like a BIG company would probably not open a project to migrate a whole python 2 architecture to py3, that doesn't have direct impact on their business model. At least that is my reality ( Big European telecom company )
Yes, I don't even think the usage of limited strings was part of the problem (they fell before the grand unicode unification).
It's really nice because it allows you to manipulate excel itself rather than an .xlsx file. Which is exactly what I wanted. 
Because python3 isn't Turing-complete.
&gt; Let me use the old obsolete version that is being phased out. The existence of Python 3 doesn't really make 2.7 "obsolete" in any way. I mean, new packages are being released with 2.7 support on a pretty regular basis. Anyways don't lay your issues with 2.7 -&gt; 3.x on me, I looked here in this subreddit and on a bunch of blogs/articles before deciding that 2.7 was fine for what we were doing at work. The universal sentiment was that 3.x wasn't worth moving to. Plus 2.7 is already on RHEL6 and we're working in an environment where it's difficult to get approvals to add additional system dependencies. 
Support for 2.7 ends in 2020. Even now the support it is grtting is only critical things. I would strongly suggest taking a serious look at moving to python 3 soon, even if it doesnt happen right away, and start writing python 3 compatible code
Think of it this way. If Microsoft put out a new version of Word that couldn't load any of the older documents without you going and noodling their coding, few would choose that version of Word. Not zero, but few. Many people talk about starting new projects with only 3, except that my entire environment ranging from tools to installers are all set up for 2.7. Switching to 3 would be a nightmare. The same with the average long term user of Word; they have piles of documents in the old word and now some documents in the new word? That would just suck as you typically have to open both a bunch over time. Some will blah blah about virtualenv or other solutions, but that is painful. Back to my word analogy, if word did the above, all they would have done is to open up the doors to a competitor, for if you are going to make a big switch, then why not explore all your options? Plus if Word did that once, what is saying they won't do it again? 
Yes. Downvoters are being py- douches.
Personally: because when I write code it's because I want the code to do something I care about. I want that done with a minimum of wasted time. So I'm not going to learn Python 3 unless I see a significant benefit, and I don't.
There you go. You started using Python when 3 was already out for half a decade or so. This whole move to 3 discussion has been going on for years now. 
Debian stable?
I don't know about Ubuntu, but the Ubuntu derivatives i know, including Mint, default to 2.7.
Python 2 is the default interpreter available on *nix platforms, and the benefits of Py3 aren't really worth moving to it for a lot of people. Especially if their code depends on being able to play fast and loose with bytes and string encodings (not saying that's a good reason, but you see that in a lot of python code that runs fine under Py2). That said, I write for compatibility for both.
You mean Sid? Maybe most run Jessie right now though. 
It's an uninformed rant, unfortunately. ProfessorPhi is correct.
This is basically correct. But check out curio--this might actually be the Python 3 killer feature (if it gets integrated into the stdlib).
Defensive? The Python 3 crowd is almost frothing at the mouth...
&gt; Because python3 isn't Turing-complete. "Hi, I'm u/anqxyr and I don't know what 'Turing-complete' means, but I'll readily repeat some nonsense I read on the internet." This is you; this is what you sound like.
Do you have some examples of code that doesn't port well? I ported a medium-sized project, without using a tool, in about an hour a couple months ago. I actually was surprised at how easy it was.
This is the bullshit zed shaw spreads, in case you are wondering. No, zed shaw does not appear to know what "turing complete" actually means.
Quoted from [Disassembler for Python bytecode](https://docs.python.org/3/library/dis.html) "CPython implementation detail: Bytecode is an implementation detail of the CPython interpreter. No guarantees are made that bytecode will not be added, removed, or changed between versions of Python. Use of this module should not be considered to work across Python VMs or Python releases."
The other poster had it: https://www.reddit.com/r/Python/comments/5qnvjl/comment/dd0vmul?st=IYHRAWHN&amp;sh=c0a727a5
Yeah, async/await is the first thing which looks truly exciting (which clearly isn't going to be ported back). Check out sanic, too.
Going by pros/cons probably won't work. Not that there aren't a bunch of great features in 3 (good async, sane unicode, enums are my big three), but that's not how you sponsor these projects. Here's your ammunition: Python 2 support ends in 2020. Libraries that support Python 2 will drop their own support at similar time. *Not* porting to Python 3 is accruing tech debt that will, over the next 3 years, accelerate as your work finds more and more libraries which are not usable on your version, libraries dropping support early, etc. Staying on ancient versions/languages means it becomes harder (thus more expensive) to hire people. Repeating a comment from another thread: &gt; You CAN stay on Python 2. You CAN stay on Django 1.11. It's LTS. So is Python 2.7. [...] &gt; &gt; You are free to make your infrastructure immutable; you then become responsible for it of course. And the money you're not willing to spend porting to Python 3 today will be money you spend on costs related to being on outdated infrastructure, years in the future. That's a tradeoff. Banks do it a lot I hear. A bunch of companies still use ancient hardware and technologies nobody would think of starting a business with today. These companies make billions. 
Thanks! 
Please add code to demonstrate the problem. 3.52 and 3.520000 should behave exactly the same!
That link is hella agressive. 
yeah, the 800k loc python project I work with could never be ported to 3, it would be cost prohibitive, because of the changes to unicode/bytes, which is why it will stay 2.7... indefinitely.
Newcomers will type "learn Python" in Google and find the "Learn Python the hard way" book first which is basically saying that learning Python 3 is pointless, thus making many newcomers learn Python 2. The belief that Python 3 isn't ready for use yet and unstable is still quite common on the internet.
In my experience it's being asked to work on servers that still only use 2. We don't even have 2.7, just 2.6.
How the value is formatted is not part of the object's value
You can, when the cost of not doing so becomes even greater. I've been maintaining a large base of C code for close to 25 years. When I was hired, the code was running on SCO OpenServer. Then came Darl McBride, and an OS that was a dead end. So the descision was forced. Interestingly enough, it was almost painless, compared to what we expected beforehand. And considering that we now have a product that's easier to maintain, and actually run on a modern stack, it's an overall win.
I do data science and ML stuff too: what ml libraries are you using that aren't on 3? I don't think I've seen come across anything yet that doesn't fully support 3... Also, I don't buy that line about setting up python 3 being too hard for startups: in ubuntu at least, it's like, 2/3(?) really simple lines-hell, if you're already on Ubuntu 16.10 3.6 comes bundled... OS X and windows is just a matter of running the installers, not exactly a complex or time consuming task...
Debian Jessie contains Python 2.7 (default), 3.4, and Debian has had python 3 support since version Squeeze. https://wiki.debian.org/Python
by default you mean you have to type one more character to get 3?
yes, all standard conda packages. I did some digging. It's spyder that causes the default. I add it, it crashes. I delete it, works fine. Again, thanks for the help. 
Yeah- usr/bin/python is linked to python2, so you need to type python3 for 3.x
A lot of Mint's control panels are written in 2 - I can't imagine that's going to be too easy to port over. 
You say that support will be dropped, but what does that actually mean? 2.7 won't be updated anymore? That's fine, I use 2.7 because I like 2.7 more than 3.x. I'm not sure why that's a downside for someone who is happy using 2.7.
I just explained why it's a downside; it's technical debt. It's fine now. It's totally fine for some random pet project, too. But for a big company that intends to keep using the language, keep hiring developers etc it's not fine, it borders on irresponsible. "I use 2.7 because I like 2.7 more than 3.x" is not a valid argument at that scale. And "That's fine" is not a valid answer to your core systems not receiving security updates anymore. The tradeoff is expensive. You *can* make it, but it'll cost you a lot of money over time, so you better have a *LOT* of Python 2.7 code if you want it to be worth it.
`python` will stay symlinked to `python2` on most systems because of this PEP: https://www.python.org/dev/peps/pep-0394/. "Default" means something different for most Linux distributions. Ubuntu defines it here: https://wiki.ubuntu.com/Python/3
You're assuming the code is sane. :)
Ha. As I wrote that the thought did pop up in my head. :)
*This guy*. You should ask him more questions. People like this who are just unwilling to change are pretty much the reason. 
Major problem is with load time. Using web scraping to retrieve stats every time someone makes a request to that page puts a huge strain on the server and leads to horrible scaling. Just with me it takes ~3-5s to load. A neat way of dealing with this is using a task scheduler like [Celery](http://celery.readthedocs.io/en/latest/) (also [Flask+Celery](http://flask.pocoo.org/docs/0.12/patterns/celery/)) to update a cached version of the scores periodically (once/twice a minute maybe) and have the webpage request always get fed with the cached version.
If it were irrelevant, I wouldn't of mentioned it. Yes, I would guess to some degree all 3.x code is forward compatible. I don't know, I would hope so. However, having to relearn the language continually, and then decide if the new features are of value to my programming takes time away from writing the code.
It hasn't yet, but it's only been a few months. The clock is ticking to enterprises upgrading to Windows 10 and when that day comes companies are going to be put in a world of technical debt hurt. I'm really hoping that [rtplib3](https://github.com/jed-frey/rtplib3) is found by some company realizing they can't re-write a decade+ worth of code in short time. I like [dSpace's products](https://www.dspace.com/en/inc/home.cfm) but they are very German in how they handle some things. RTPLIB2 IST DEPRKATED. MIGRATE TO .NET LAYER, SCHNELL. I hacked together a thin compatibility layer at my last job but I don't think it'll ever get seen outside of my group. I waited a few months after being laid off and then used their own documents to make a mockup of how my module looked. I did link to it on a LinkedIn group and got a HR manager and software engineer to at least look at my profile. The other project was because a company rep (another German company) told me that all customers were very happy with COM32 (32-Bit only) interface. Why would anyone want anything else? I honestly couldn't even get through to him how much easier and faster it was to do in Python. 
Porting Nvidia DIGITS to Python3. Maybe giving a Fortune 1000 company free work will get some recognition by someone.
Most likely rather than port it, they'll start slowly rewriting pieces until all you're left with of the original is a webcam pointing at VT100 terminal doing OCR on the output to bring it into your new setup.
No more so than the "Python 3 is dead; 2 forever!" posts I keep seeing. But tone aside, it's technologically correct. Python 2 and Python 3 have the same semantics for converting between byte arrays and strings. The difference is that 2 lets you treat them as the same thing when they're really not at all. Python 3 makes you say which one you want instead of guessing (often incorrectly). Edit: typos
While academically interesting, this seems unpythonic. I agree with u/breamoreboy, and would extend that to some of the other bit-wise operations.
Fuck that guy, seriously.
That's terrible and outdated advice. Python 3 has many things that will make your life better, and if you ever have to use python 2, you'll be up and running in a few hours after looking at the TL;DR of what's different. On top of that, some frameworks (most notably Django) are dropping support for python 2. 
Significant benefits: - fixed unicode (strings/bytes handling&amp;safety) - yield from, async - type annotations (wherher used as documentation or for metaprogramming) - not being one of those stubborn knuckleheads keeping progress back ;-)
Add `#!/usr/bin/python` to the top of your file and make it executable through `chmod 755`. Of course, all you gain is not typing `python`. Do you want it to be point and click?
&gt; That's terrible and outdated advice. And how do you plan to change what all the top google results are?
That doesn't really justify anything though -- if both 2 and 3 are available, then keeping those control panels on 2 for now is literally a one-character change (`python` -&gt; `python2` in the shbang). Once you've done that, you can extend the timeline for porting a bit, port the panels across one by one.
Compare `pip --version` and `python --version` to make sure you aren't installing to one and trying to run with the other. I've managed to fubar that one before. Still not sure how, but I know it's possible. 
Great, thanks for the feedback. I will check out Celery and try to implement it. Any good examples or resources that you would recommend?
Because 101% of tutorials are 2.7 and learning to program is tough so once you get comfortable with 2.7 the Python foundation says great now learn 3.5. 
I was thinking about that too, Having the page load and having AJAX call functions in the background and slowly load the components. How fast would you normally expect a site like that load for you? 
Performance is generally better than 2 now. At least, [according to this talk by Raymond Hettinger](https://www.youtube.com/watch?v=p33CVV29OG8) (explains the recent dict optimizations)
Actually it's probably better to use `#!/usr/bin/env python` in case you have other Python environments, e.g., Anaconda installed. 
This is the correct answer. 
This is very accurate. It almost made me decide to go with Python 2.
Generally, anything beyond small scripts ought not rely on the system version of python (or perl, for that matter) - and if they do, the app environment ought to be isolated from the system python environment (via virtualenv, pyenv or something similar, or just plain old PYTHONPATH). Among other things, this maintains a clear separation between app dependencies and system dependencies. You don't want your app upgrading deps that your os might depend on an vice versa. There really shouldn't be any complications from multiple installed python versions (most linux distro's already have 2/3 installed and coexisting peacefully) - so don't let that be a road block for you!
Man I am a fan of scripting but how much work is it to type $python filename.py ....
By the time you figure it out, the sun will have exploded.
I usually work with Python in ipython. There's you need ‚ÑÖrun script.py
No, the real problem with Perl 6 is that they spent 15 years designing it, and by the time it finally came out nobody cared anymore. Compatibility is less of an issue. [You can use Perl 5 modules from within Perl 6](https://docs.perl6.org/language/faq#Can_I_use_Perl_5_modules_from_Perl_6?), apparently.
If you ever use vim, after giving executable privileges and adding the shebang to the top of your file, you can also save yourself some effort by typing **:!%:p** in normal mode. 
One's a framework/API, the other is a language, I don't understand your question.
Sorry, updated the question, my focus was C# .NET Core vs Python
I'd expect near instant with a second or two of loading the data. Beyond that I would lose interest and close the tab
&gt;1) Dependencies (some legacy) which are not upgraded to python 3 for which nobody is particularly invested in doing so. But Object Oriented Code will cut down on the work we have to do we can just re-use other people's code, and not have to do it ourselves. /s But seriously, I have a couple of (3rd party) Python 2 libraries that are holding me back from Python 3. An intern a couple of years ago was trying to get me to upgrade...kid, you have no idea of the nightmare. I imagine, at some point that I may get so frustrated that I actually do the work myself, in my own free time, but that's going to require something awful to break.
There are a few issues with cross platform C#, at least from what I can see currently: 1) Little tooling on other platforms. On Windows you can use Visual Studio, afaik that's the only option. You deploy to windows servers running whatever they say you need. There aren't really any other options. Vs Python, write it how you want (numerous ides, any text editors, etc) 2) Poor documentation around what works where (edit: for non windows platforms). As someone who hasn't run Windows in 12 or so years, I have no idea where to start or go. I also don't know what falls into the "core" vs other runtimes. That said, I'm nearly positive that .Net Core will likely be faster execution time (but that may be at the cost of Developer time or various runtime requirements). [edit: clarified what I meant with #2: documentation on other platforms, for Windows it's solid]
Even with no Python 2, the plan is to have *no* `python` symlink, and `python3` as a symlink to `python3.6` (or whatever!). If you want a `python` in your PATH, you'll need to install python2.
Well, there is monodevelop instead of visual studio, but generally I agree. 
Also, `chmod +x` instead of `755` - that will only change the execute permission, without overwriting any changes you may have made to the file's permissions before. 
I'm not surprised that the "programming, motherfucker" guy didn't pay a ton of attention in class.
&gt; which will be supported by RH through 2024. What does that even mean? There will be no more bug fixes to Python 2. I swear, I don't think Red Hat does anything, except act as a server for packages.
&gt; Well, I am sorry if you don't like our German ways although I can tell you that not all of us are stuck with COM32. I didn't mean all of you were, just a few specific companies that are like that. Because of where they operate they're quite far behind the times. A lot of the tools companies use built on them are at least 10+ years old at this point. https://vector.com/vi_canape_en.html [dSpace](https://www.dspace.com/en/inc/home.cfm) just 'recently' updated from Python 2.5 to 2.7. &gt; I would then search the other repositories and discover that there are more of these skeletons Only 2. And there were a shot across the bow of some of my old co-workers who know that day is coming. Companies are going to get forced to Windows 10 sooner and *a lot* of them are going to be scrambling for a solution. &gt; If I am a Software Engineer tasked Then it's a good thing I won't be evaluated by software engineers. /r/Python is an entertaining side bar because it's nowhere near where I 'work'. Half the time I don't even put Python on my resume. 
Expanding on this, if you add the location of the file to your path or put the file in your path somewhere you can runny without the ./ export PATH=$(pwd):$PATH 
Gobbly-goop to me, but I'm sure it makes perfect sense to vimheads...*shrugs*.
If the package comes with the OS, it is supported by RH. That's why you pay thousands for what is otherwise free (CentOS). They will backport vendor supplied patches to whatever version they support and will create patches if necessary.
https://www.reddit.com/r/shittyprogramming/comments/5ejbr9/proof_that_python_3_is_not_turing_complete/
.NET is nowhere near competing against Python in critical areas like data analytics and operations. 
You can write it in PHP and wrap it in Python, then wrap it in Goland. Go is fast
Flip side: if momentum and cost have prevented upgrading despite improvements and a looming EOL for the current product for over *half a decade*, where is the magic moment that will change those economics in the coming 36 months? Especially considering many such projects have been actively growing throughout the entire period? Py3 is great. Fixing Py2 was awesome. Creating an incompatible runtime and bifurcating the entire ecosystem... that's harder to reconcile with the challenges of Enterprise Operations and long term planning (source: the frequency this discussion comes up, and it's conclusions each time).
Assuming all your 3rd party tools have python3 versions, porting over immediately would avoid technical debt that will have to be paid after 2020 when python2 ends support. That's 4 years of code you could avoid porting! Now, I've yet to work anywhere that is that forward thinking, but it makes sense in my head. 
In your bash shell, type the following and press enter: alias test='python /path/to/filename.py' From now until you close the shell, you can run your script by typing 'test' 
I honestly figured that ridiculous claim would have become a meme by now.
&gt; Arch defaults to 3 already Where already = since 2010 
This seems like a lot of work you are volunteering others to do 
Eh, because the company spent $3 million to get it to this point and its reliable and usable. They are not about to spend (in their eyes) another $3 mil just to update a version of the code language when the one its in is perfectly fine.
I think you should make a queue and feed messages to it that way
Have you tried experimenting with which voice font you use? The default is often pretty bad.
Have you tried pyttsx? https://pyttsx.readthedocs.io Edit: Just noticed that it relies on espeak, which you don't like.
Personally i like Bot3
Bot3 was amazing, because it was lauched by google
Stuff with unicode, libraries like urlib2 does not port well using 2to3
&gt; not vim Triggered
Depends on what you are doing, I tend to run most of my quick stuff in sublime.. Just hit ctrl B
The shebang line with env is preferred, see pep 394
Also might make more sense with an US keyboard...
Use type annotations with mypy. Once all the code is annotated, port.
I would like to see some evidence to support the claim that static typing makes for safer code. To start with the number of off by one errors in C must be a factor of hundreds or even thousands of times higher than in Python.
Also probably specify `python2` or `python3` explicitly.
I'm greatly amused by the replies. This is now my favorite negative-rated comment of mine.
Standing out like a sore thumb in the list of dependancies for pyspread is [wxpython](https://www.wxpython.org/). The Python 3 version [Phoenix](https://wiki.wxpython.org/ProjectPhoenix) is now coming along nicely but has been badly delayed by the need for the core maintainer, Robin Dunn, to do some paid work!!!
And another recommendation for Arrow :( Please people: Arrow is a really bad idea, don't recommend it. 
He deleted that. Replaced it with a paragraph about how he is Le master trolle and everyone didn't get his incredible sense of humour. Yeah go fuck yourself.
Or just run 2 terminals and use a tiling window manager.
also try /r/learnpython 
A great analogy. A new version of Word might be able to load the old documents, but the old version of Word coud not load the new documents, so you either have to upgrade every single version to the new Word or get every user to remember to save to an old format if using the new version. Been there, seen it done it, got the tshirt. Yuck :-(
"support will be dropped" means that the [Python Software Foundation](https://www.python.org/psf/) won't be fixing any bugs or whatever with 2.7 after 2020. You'll have to provide your own support or get paid support from a third party. I don't understand how anybody could like 2.7 more than 3.x or vice versa, to me they are still the same language. If you're comfortable with 2.7 stick with it, heck last I heard 1.5 was still in prodction use.
What do you mean you not need it? So you suggest to replace or popens with a wrapper with converter? And what if we don't know the source and encoding of coming data? Ascii was always default and it was great because all of the protocols on any level work in ascii. It's 256 bytes after all. We had a custom protocol for a flash game it was all in ascii/bytes format. It was clean and concise. Rewriting it in Python3 would take a lot of time for a can of worms bugs in the future.
Sounds like you might want Spyder instead. but the idea is you can just have a cell in the notebook that you use interactively, eg to view `df.head(5)` or `plt.imshow(my_array)`.
I know about /r/learnpython, but felt that this question might be a little too advanced or specialized.
If you're doing a lot of syscalls and wire with popen, can't you just work entirely in bytes in Python 3?
What is wrong with Arrow? How does it compare to Pendulum, Delorean, udatetime or any others?
what will you recommand instead of arrow?
The tooling for C# is little on other platforms only if you being living in a cave for the past decade now. I cannot speak of other platforms but on MacOS there are like a ton of tools for .NET and on iOS/Android as I said previously are dominated by Xamarin which offers a wide range of tools. I agree that poor documentation remark must be a bad joke, MONO has been offering a ton of documentation and dedicated libraries for each platform for over a decade now and .NET has been together with Java the most most popular cross platform environments. I am not even a C# / Mono developer and I know that. 
What's the benefit of NeoVim after the release of Vim 8 and associated async syntax checkers? That's literally the only reason I considered NeoVim for a while. 
Maybe because you entirely missed my point even after i clarified it. We are lucky to not work together. Cheers ;)
I started my coding was I was 9 by copying code I found around in magazines and books (no Internet back in 1988) , code I rarely understood but for some strange reason I made it work. Nowdays I am much better coder. Nowdays I understand what I copy. Planning is rarely required because copying also copies the general plan of the code. I am a visual guy so I usually have a plan in my head of the general structure but overall I just steal ideas , whatever I can find , decompose them , change their order and reassembly them like lego bricks. Saves a ton of time and a ton of brain power. With the Internet I feel like a kid in the candy store, so much code to copy , decompose and recompose , so much fun :) I started this strategy when I was studying Law. I was too lazy to start writing my own law essays from scratch as we required by the courses, so what I did was open the books and copy ton of text. However copying was punishable (from getting zero as a grade for the essay to be expelled by the University) so I had to find a way to make the text non recognizable so that I may not be accused of "plagiarism". I found sever techniques to eliminate recognizable characteristics of copyright infringement. Basically reshuffling of the syntax, key replacement of words etc. Of course some remained but never enough to get me into trouble. I use the same techniques with coding. 
Anything. The standard library is superior. Maybe not in usability but in correctness. 
I am exploring a style of coding that I hipstery called it "technomagic" , its basically RPG game combined with coding, where the coder is the mage and he is given a spellbook which is a coding library each spell being an object with a single method and some meta data . Each spell can be combined with each other to make up interesting software etc. So I am developing an IDE based on this approach I call "Ephestos" , its on early stage but is going strong and I am using it as development environment for my Unreal games. 
http://stackoverflow.com/questions/10026346/how-to-flood-fill-part-of-a-bitmap-enclosed-by-a-black-border-with-my-chosen-col You might want to use pillow instead of PIL though. 
None of them are good answers. When the Ruby and JS community made breaking changes (the later one did that every 3 months for the last 4 years), they just told the community to go fuck themself. And the community adapted quickly. In Python, we took them by the hand, gave them 15 years and tools and said "it's alright, we'll be here for you". And nobody moved. Basically people are looking for something we did wrong. But that's not at all what happened. The problem is that we did too much right. Conforting people that much lead the dev teams to just stay on their ass. Just like with parenting, you need a balance between being protective and being pushy. Now combine that with 3 things: - Python is everywhere. Not just the web. Everywhere. In iOS and Linux, in games, in GIS and 3D softwares... The cost to touch this code base is huge. - There is no good doc on how to do the migration. - The benefits from python 3 are abvious only AFTER you used it a lot. Not before. They are subtil things that cumulate to make your project better, not shinny stickers. It's hard to motivates people on best practices. And you got yourself in trouble. 
Check the commercial project Cereproc from Scotland. Best I have ever heard.
I feel your pain man.
It depends on what you're clicking. Is it a web page or a dialog? In any case, restricting yourself to the standard library isn't really a good practice anyway. Half of software development is keeping up with the tools available to you. If this is like a browser you need to click, try Selenium. I found that useful as a beginner because it actually opens a browser and you can see the actions actually happen on screen (and there are headless webdrivers that work with it for when that gets old). Side note: if third party libraries feels like cheating, os.system (and subprocess for that matter) probably should too ;)
Well, funny that you ask now. I'm currently making a small yet easy to use wrapper for espeak+mbrola (which produces decent results). I'll produce some unit tests and a bare documentation as soon as possible, and it'd be very good to have your feedback :) Https://github.com/hadware/voxpopuli
You can do with Java whatever you want, as long as you properly implement it.
installing conda on RHEL is easy sticking to whatever ships on your corporate mandated distro is quite irresponsible
They are enforced at "compile" time, so e.g. in the CI system. You can enforce that a commit doesn't get merged if it doesn't pass mypy.
I never experienced this problem. When are circular imports a problem? And if there actually are circular dependencies, how would you solve it?
The real question is: Does it make sense to use it in production?
Thanks for willing to help me out! myname-MBP:Applications myusername$ which python /Users/myusername/anaconda/bin/python myname-MBP:Applications myusername$ which pip /Users/myusername/anaconda/bin/pip &gt;&gt;&gt; import sys; print(sys.executable) /Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5 
You forgot the "it ain't broke, don't fix it" mentality. Python 2.7 is the default in RHEL which means it won't be going away for several more years.
That's the thing, it's not our corporate policy, it's our customer's. And we can't dictate to our customers how their servers should look.
I really like having both versions installed. If you want python 2, just call /usr/bin/python2. python 3 is aptly named "python3".
I work for a manufacturing company and we still have *DOS* applications in some places. They do one thing and they do it well, downtime is absolutely not an option.
.Net core will become a really significant player, there's no question. A lot of what holds people back using .Net is that you can only run it on windows; or you have to use mono, which has pathetic library support and generally terrible deployment story. However... We are probably still at least a year, honestly, maybe even two from .Net core being ready for any serious use. It's just a shambles right now. They've replaced the package.json with msbuild because it was too much change too soon and broken too many legacy things; now they're trying to roll everything up into a 'modern msbuild', and it's not ready yet. Nuget isn't ready yet either; nuget is the package manager, and although its pretty good, it has some pretty serious failings around selecting packages that target a *specific runtime*. That's like pypi not being able to tell you if a package can support py2 or py3; you've just got to install it and see. To over come that we have a new '.Net Standard' or go with '.Net Core' (confused yet? more background reading: https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/); that's a new standard API set that all .Net platforms have to implement. It's a minimum standard that libraries can target so you can put a library up on nuget and not worry that it only runs on windows. ...but surprise! Were you using Portable Class Libraries for your xamarin projects? Well, actually, those apparently aren't a thing anymore; port port port. One final thing: mobile! Here's a tasty quote for you: &gt; I was able to use code with reflection in a shared PCL by Xamarin Android and Xamarin iOS. Everything seemed fine after developing and testing my code on the iOS simulator. However when I tried to run my code on an actual device all hell broke loose. response: &gt; That‚Äôs why reflection is part of .NET Standard while reflection emit is not. So, in .Net standard, you can't runtime compile code; so forget compatibility with any library that depends on that. ... I mean, if you squint a bit, you can see the shiny stuff that's there to play with; a proper .Net MVC on aws linux boxes is a pretty sweet deal; it'll be cross platform and kick the ass of the equivalent python code for performance. but not yet. Not even soon. It's still ages away from all that stuff being sorted out. ...and when it is? That'll be *the start* of *possibly* seeing C# take off as a big open source language. So, tldr; In the long run? Maybe. It's a good language, its got a good chance. In the short term? Don't hold you breath. (...but if you want to play, pick up the Rider EAP from JetBrains; it's by far the best cross platform C# editor, and has pretty solid .Net core support; do not even bother with vscode; the c# plugin is rubbish. You can start playing around with it, just be aware your code won't be portable and will require you to change your project structure and tooling pretty much constantly as .Net core releases roll out)
OK, that confirms you have the two pythons installed, anaconda, and another in /Library. With any luck which pip3 Will also be in the folder in /Library. Then you can use pip3 instead of pip and you will be fine. If not, then you can always try the full path /Library/Frameworks/Python.framework/Versions/3.5/bin/pip3 
That's my point, a company would not spend thousands for a project to migrate a legacy application that is already working if it doesn't have any direct financial impact. 
Try /Library/Frameworks/Python.framework/Versions/3.5/bin/pip install aiohttp And if that doesn't work /Library/Frameworks/Python.framework/Versions/3.5/bin/python -mpip install aiohttp 
If you could enlighten me, because I haven't looked in a bit, are there good resources for what is ".Net Core" vs the rest of .Net? IIRC it was just the core open sourced and focused for cross platform? I definitely don't want to unintentionally mislead people, so I'd love to update the original post with proper resources.
The new Django, 1.11, is the last to support Python 2.
SUCCESS! Thanks for your help. How should I go about a next time? Using pip3 for future installations
Its because python2 is well maintained. Otherwise, majority of people would have considered old code as legacy and immidiately jumped ship to python3 already. Source: Me, a new python dev learning python 2.7, instead of 3.x.
Importing for type annotations does this to me a lot
/r/learnpython
/r/learnpython
Why has nobody mentioned using an IDE? If you use a good one like [Pycharm](https://www.jetbrains.com/pycharm/download/) you can just click a button and run the script. It makes changing/testing small elements far faster. The community edition of pycharm is free, and I'm pretty sure it's available on linux. 
/r/learnpython
Damn, that is one awful website. How does Transcrypt compare to Brython?
I found bash_profile: (editing text is horrible on reddit) # Setting PATH for Python 3.5 # The original version is saved in .bash_profile.pysave PATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}" export PATH # added by Anaconda3 4.1.1 installer export PATH="/Users/myusername/anaconda/bin:$PATH"
Either format() or Decimal.Decimal will help with your issue. If you are representing something like currency amounts representable by coins, the decimal class will work better than simple floats. 
Type hinting in functions def f(x: int, a: str) -&gt; str: 
I think that might be a little to easy for him..
before you read me rabble on I figure out how I think. but will not no till i figure out a work around. cuz the next line does not run till after links is closed.So I need to reach out to links or the arch forums or gentoo forum.And now to my rabbling It not that it feels like cheating.Its because by understanding. how to do with out it.So the more I learn about what goes on behind the seances .I could one day hopefully write a script that tons of people use and give back.and if I really felt like it was cheat i would write in c not c++ but c. would say assembly language or zeros and ones but no no thank you.
I haven't used espeak personally in a while. But espeak's man page shows -v is the option to change which vice to use.
There's an extensive comparison on stack overflow, made by someone that had just moved a 2700 lines project from Brython to Transcrypt. I think it's quite balanced, mentioning pro's and con's for both packages. https://stackoverflow.com/questions/30155551/python-in-browser-how-to-choose-between-brython-pypy-js-skulpt-and-transcrypt#answer-38564424 
well - first off it's "neural network", i hope that was a typo second, i've found that once you have a good understanding of python, the "pybrian" library will help you greatly. I've worked on multiple machine learning projects using it and i'm still in high school.
&gt; slice it. Please don't do that. As someone above said, use .format or printf-style formatters
The best thing NeoVim has done was advance vim's development. We've been waiting for async tasks for some time.
Udacity, python class. I believe it's Foundations of pertaining, python but I could be wrong. 
**Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) \#3: [Beginner's Python cheat sheets](https://np.reddit.com/r/learnpython/comments/4atn5f/beginners_python_cheat_sheets/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
Thanks for posting your solution!
well said mate.
Junit2html is also a good Python lib
Who downvoted this?
If you aren't really far into the project, you'd be doing yourself a favor by going to 3 now.
Cool! Transcrypt and Batavia seems to be the Best "python in the browser" options from what I've seen. 
A bit more detail would not hurt... django with which modules, who is the hosting, which backend, the css and javascript... 
I write programs that I want to use or someone asks for somewhere and I think could be fun to write.
I'm thinking of something that hasn't been done. Maybe a Raspberry Pi project. 
There is a huge culture difference too. Here are 2 articles that cover it fairly well: [These 8 Scales Reveal Everything You Should Know About Different Cultures](http://www.businessinsider.com/the-culture-map-8-scales-for-work-2015-1) [The differences between work cultures found in eleven countries](http://www.deskmag.com/en/steelcase-maps-work-cultures-among-11-countries)
I subscribe to Banas and other python channels. I like u/sentdex and his youtube channel. https://www.youtube.com/user/sentdex/playlists You can go from the basics / syntax to some advanced applications all on that channel.
&gt; IT is not a hobby for me, but the only way I earn my living for 25+ years now Good on you sir ... That Javascript has been the main language in web programming has set technology back immeasurably.
You are spot on, you need a database so you can focus on what your app does - store *contacts*. The amount of code to implement a simple query with a `GROUP BY, ORDER BY` in Python is big.
What are you working on, why is it unfinishable? 
Building a warehouse inventory management system utilizing Django and a mobile companion app for barcode scanning. Also continuing to work on my wrapper library for Intuit's QuickBase HTTP API. The existing projects were underwhelming, and it seemed like a good learning experience for writing good code.
I have read tutorials on how to make a bot that has Markov chains, that seems to be what im looking for. Thank you the link has helped me already 
I just come up with something I find would be helpful either for myself or the company I work for and build it, regardless if there is already a solution, open source or not, out there. Typically I avoid looking around GitHub or even Googling for similar projects, because when I do find something that accomplishes what I want to I don't build it. Granted, it's a smart idea to go ahead and make sure whatever name you have for your project doesn't clash with something else. Basically, don't psyche yourself out. Sure maybe someone has done it better or faster or with less code, but it's your project with your unique flair. Plus, you learn, and can iterate. 
I think that‚Äôs my problem. I keep getting inside my own head and it‚Äôs exhausting. 
Hell, my current project is a server monitoring/reporting app in Python, and I haven't looked at any other projects that do a similar thing save for the one we have deployed currently. I've deliberately avoided them. (shameless [blog post](https://medium.com/@gabrielsimmer/building-a-large-scale-server-monitor-7c54829987f9#.3zftyo99a) plug)
That's a pretty common pattern. Is it the list or the dict you are finding clunky? If it's the list and you want random access to specific records you could store a dict of dicts. The top dict would use the rid as a key since I assume that is unique If it's the dict you could try a namedtuple or class to make accessing the fields a little less awkward
The need most people have for a DI framework can be eliminated by the judicious use of other patterns and constructor injection. The remaining use is typically around testing and python being python you can inject what you want when you need it anyway. DI frameworks are a crutch for poor architecture. 
Its called pyNastran and is 91k lines of code. It's an interface to a really complicated commercial structural analysis code. The are 3 major different versions of Nastran that are run by 3 separate companies. It"s just too much stuff for a few people to do. It's been in development for 5.5 years, only supports 300/700+ cards, but does more than enough for most people. Refusing to support certain features that I know are just time sinks helps, but still. It can always support more features, be faster, have better docs, be better tested, and do it with less code.
Ooh, get thee behind me Satan. Your link to SQLITE is to 3.5 but if you'd omitted the ".5" it would have stuck with the latest Python 3 forever and a day. Just saying :-)
Thanks! Do I need to learn wxPython before Pheonix, or should I just delve right in to Pheonix?
http://codingbat.com/python is a really great site, you learn a ton about string manipulation, iteration, file reading, etc.
I'm fed up having seen this for the third time today, why not keep the subject in one place unless it's really important to the Python language?
I can't say I'd recommend it as I haven't used it myself but how about [mxdatetime](http://www.egenix.com/products/python/mxBase/mxDateTime/). It's been around for years and the company is basically Marc Andre Lemburg who's a real Pythonista, member of the PSF and all that.
https://www.reddit.com/r/Python/comments/2xcjht/new_website_for_rapydscript_the_pythonic/
Straight to Phoenix! Think of it a little like the Python 2 to 3 transition: removing a bunch of cruft and doing things right, at the expenses of some minor, easy to account for, but breaking API changes. 
This is a terrible doc. Basically it's just an index of things to look up. Any good doc would : - include a complete useful working script and show how to port it. - mention how to deal with dict.items(), xrange(), lazy builtins and the like. "learn the difference between 2 and 3" is like saying "to beat Bolt in a race, train to run faster". - weigth the benefits of 2to3 vs manual vs six and python-future. Not just listing them. And show actual usages. Parsing the docs of all those project is incredibly long. - talk about the backport lib. - have a quick note on __unicode__, __metaclass__, __nonzero__, etc. - avec an example of tox running tests on 2.7 and 3.x. - weight the benefits of 2&amp;3 vs direct 2-&gt;3. - talk about the consequences of absolute imports instead of just mentioning it quickly. This is very important. - not recommand mypy. I've been using it for months. It's not ready for most devs yet. As usual, I will have to write a doc on this. Maybe one day I'll translate all of them in english cause your situation is improving very slowly as well.
Hey! Nice first ever Python project... :D I'm not sure how much you've learned about Python, but try seeing if you can turn this into a function maybe...? No specific reasons to be honest, but just saying I would have personally wrote this as a function. But then again I don't know how much you know and don't know... Another suggestion/feature you can add: try setting it up so that it will ask for user input for the IP address and the amount of times to ping. If you end up setting this up as a function you can get the user input then pass it along to the function and then ping using the input received and then finally return "Success" if it was successful or restart the network-manager and then return "Restart Complete" if if wasn't.. OR you could get the user input from inside the function and the run your ping and check for success or not and return whatever. Just a thought... I hope I didn't confuse you and If I did, sorry. Anyway - once again, Nice code!
Agreed, will just point out he is calling `sudo` in his script already so it shouldn't be an issue.
Not the point
Maybe you should find your current default gateway and ping that if your nic is generally at fault. A lot more things can go wrong trying to reach 8.8.8.8 
THANKS. Im SO tired to be ALWAYS sent to python2 documentation when I Google smt
cool, thanks for the info. I'll work on making it faster
yups still some of them are coming.
You should keep in mind that ping behaves a lot like UDP so it may be better to do 2 pings instead of 1, it will drastically increase quality of your program. Also I think all you need to do to make your program python 3 ready is add braces around the print statement.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Rapydscript resembles Transcrypt most. It is fast and compact. I will make no comparison because it would be biased. It is certainly suitable for serious development.
It's not only JS. The whole 'technology stack' (as it's proudly called) has organically grown, rather than being designed. Something like Ajax for me feels like using the cat flap as main entrance to a mansion. But, on the other hand, we ourselves have also organically grown. In the long run natural selection does its thing. It's just a matter of being (very) patient.
I have been learning and working on selenium projects. 
I haven't tested this script, but mine was on a Windows box where it ran under my context which had privileges to restart it without prompting.
pyside?
Questions like this would be better directed at /r/learnpython. Though the answer as to why you're getting a syntax error is because it's not valid syntax. You have `'some string' * % (some, tuple)` - what do you expect this to do? `*` indicates multiplication, but then you follow that with another operator, `%`, used for string formatting, which looks like it's all that should be there. Why is the "`*`" there?
In Debian: &gt; The form #!/usr/bin/env interpreter_name is deprecated. https://www.debian.org/doc/packaging-manuals/python-policy/ch-programs.html
Why does it _have_ to be a shell script? `os.system()` doesn't check for return code but other implementations do, like [subprocess.run](https://docs.python.org/3/library/subprocess.html#subprocess.run) A python script behaves pretty much the same as a shell script, so what's the difference? There really isn't any, to the point where python driven shell like [xonsh](http://xon.sh) exists. Shell is a heavily flawed scripting language, especially when you compare it versus python in the eyes of a new programmer. Not only that but python scripts or modules are a million times more extendable and just by importing `click` and adding 3 lines of code you can have a whole command line interface up and running for your script. 
I think you have misunderstanding of Python yourself. Python is suited for shell just as much as shell language itself.
We are all retarded on this blessed day.
That's called [Operator Overloading](https://en.wikipedia.org/wiki/Operator_overloading), and it means an operator in some cases acts a certain way while in other cases differently depending on the context. * has no place there between the end of the string and the % formatting operator.
Do you wanna know how to enforce that? If every major library did what django did. and drop complete support of python 2 then. Maybe we'll see a lot more people adopting python 3
Welcome to the community!
How robust is it in handling of unsupported features? Can it ever compile successfully but generate invalid code?
As part of my "A Project every month in 2017" challenge, I have been working on developing a desktop notifier for the "social" GitHub events. For the last couple of weeks, I have been working at this tirelessly; understanding GitHub v3 API, learning how to work with Python requests, file handling, and cron jobs. This project has helped me gain deeper insight into Python and OS. I will try to make a release by the end of the month. Here is the link: https://github.com/kshitij10496/gh-notifier. Reviews and criticisms are welcome.
Interested.
Interested. 
I don't think you take the absolute of each non-zero element, which is why the highest product in the last example is 60. Given that multiplying two negative numbers results in a positive, a quick and dirty method of solving this might be (away from computer or I would write the code): 1) create list of non-zero elements as you've done 2) sort it 3) count the negative items 4) if there's an odd number of negative items, throw away the one nearest to zero 5) then calculate the product as you've done The alternative would be to permutate the non-zero elements and remember the highest product, which feels laborious
Not exactly, since they want the maximum positive value when multiplying, not just the absolute one.
Great! still got your comment! So if the elements are negative, I don't just return their absolute value, I return the greatest possible output if you multiplied the numbers. Therefore, [-3,-4,-5] would return 20 because (-4)*(-5) is 20. Multiplying (-3) too turns it negative, and choosing to multiply with (-3) instead of one of the other negative numbers does not return the greatest possible output. I ran [2, 3, 4, 5] with my code in an IDE and it returned 120. You probably did miss something.
&gt; You should keep in mind that ping behaves a lot like UDP so it may be better to do 2 pings instead of 1, it will drastically increase quality of your program. What do you mean? Reading the wiki article on UDP didn't enlighten me.
DI in python is good for pushing down singletons and localize instance creation to one point, you can do it with globals, but it is dirty a bit. For example, you have "main" class, which rolls all your app, it should use db via your "db" class with nice methods like "add_something", "get_something" etc. "Main" should know nothing about low-level db configuration, but in case you create object in "main" init you should pass config/create engine or whatever low-level things. Without injector: class A: def __init__(self, a, b, c, *db_arguments): self.db = DB(*db_arguments) ... With injector: class A: @inject(db=DB) def __init__(self, a, b, c, db): self.db = db ... So, you avoid creation/singleton boilerplate. This is abstract code, I don't know syntax of OP library.
I think the task is to search for the maximum of all proper subsets of the given sets of solor panels. Proper subsets and not just subsets, because your goal is to repair one. That is the reason that `[2,3,4,5]` isn't `2*3*4*5=120`, it should be `3*4*5=60`, because you want to repair the panel with the lowest value. I think this is a variation of the knapsack proplem, just with proper subsets and negative entries. I could be wrong, but the fact that this is a google foobar task and this &gt; Each array of solar panels contains at least 1 and no more than 50 panels, and each panel will have a power output level whose absolute value is no greater than 1000 indicates that this wouldn't be so easy and trivial. At least they gave you a maximal value to stop your search earlier if you found 1000.
You'll have to deal with Qt's license anyways.
Python Developer For Fast-Paced E-Com at Unisport A/S (Denmark) https://djangojobs.net/jobs/671/python-developer-for-fast-paced-e-com-unisport-as/
What you need to do is this: import re # the regex module prompt = re.compile('[a-z_0-9\-]+#', re.IGNORECASE) child.expect(prompt) You might want to change the regular expression to match your setup, I just pasted from my own script.
Here's the program you want: def answer(xs): negative_numbers = [] positive_numbers = [] for item in xs: if int(item) &lt; 0: negative_numbers.append(int(item)) continue positive_numbers.append(int(item)) if len(negative_numbers) % 2 != 0: negative_numbers = sorted(negative_numbers)[:-1] all_numbers = positive_numbers + negative_numbers power = 1 for number in all_numbers: if number == 0: continue power = power * number return str(power) print(answer([2, -3, 1, 0, -5])) # 30 print(answer([2, 0, 2, 2, 0])) # 8 print(answer([-2, -3, 4, -5])) # 60 This will give you the highest possible product of all the numbers provided. It does this by removing the closest-to-zero negative number, if there's an odd number of negative numbers, then multiplying all the numbers together. This ensures the result is positive.
What does env do that makes things more portable? Doesn't it just clobber your environment variables?
I think that's only for python programs specifically packaged for debian package manager. Giving the direct path will make sure that it always uses the right system python, whilst the 'env' version might use user installed versions through conda/pyenv. This makes sense for debian as a distribution, but not for python programs in general. Anyways, you should only specify the default python if you support both 2 and 3, otherwise explicitly specify the version, no matter if you use env or the direct path.
 map is lazy in python3, use list(map(f, iterable)) to compare it to python2.
I've used the boolean-as-index shortcut at times myself, but almost always have removed it for the sake of others. But this: paused = (True, False)[paused] is more commonly written: paused = not paused As for your Dictionary.get example, look into using `collections.defaultdict`. A `defaultdict(int)` will do what you want, and be more up-to-date. Here's a combination of your sorting "trick" and Dictionary.get. Instead of: sorted_keys = sorted(my_dict.keys(), key=lambda x: my_dict[x]) do: sorted_keys = sorted(my_dict, key=my_dict.get) Iterating over a dict gives you the keys, and your lambda is just a wordy duplicate of dict.get(). BEWARE of your use of And + Or: if the `true_value` evaluates to boolean False (like 0 or []), you will end up with the false value. You have "discovered" an old hack dating back to Python 1.x days, and the source of many Python bugs. If you must do a one-liner (in a list comprehension for example), use the new `true_value if condition else false_value` ternary form.
"Default to python 3" does not mean /usr/bin/python points to python3. It means it's the version installed by default.
Speak for yourself.
We use check_http from the nagios monitoring plugins to check certificates, perhaps it can be of use.
I've sent you a private message with my mail address. Kind regards Jacques
You should post things like this in /r/learnpython. Please refer to the sidebar.
Thanks I'll try that and post result in next comment. Moving this to more appropriate location https://redd.it/5r0vt1 
For your items in conversion, add + STR(" feet"), changing "feet" to meters, leagues, whatever, on each line That way it'll print 5 feet.
Two huge reasons: - Because most programmers, no matter the language they come, will be able to understand that script. While only very few people would be able to understand the bash script. - Because it would be trivial to add more complexity to the python script as needed in the future.
First off I'd recommend posting in /r/learnpython as you might get a few more replies over there. Second, you may consider breaking the problem in two. The are numerous ways to load Jason data into Python, with loading to a dict most likely the easiest. Thus you may find it easier to focus on how to translate the JSON data structure into your tree view items as the loading of the JSON shouldn't be difficult nor does it directly relate to PyQt.
On mobile so I can't really type code, but instead of creating separate variables for the three calculated values, you could make 'calculations' a dictionary where the keys are the display names, and the values are the results of the calculation, then `for display, value in calculations.items()`
This should be a bash script... if someone is capable of understanding this python then they are capable of understanding a bash script.. 
This is what it should be.. First lesson in any programming language... have you asked yourself ' Is this the most suitable language for the job?' You wouldn't do this in C. So why would it be a good idea to write this in Python, yes it is both possible and works, but it is not the most sensible to use. 
Alexa skills, and their flask-ask handlers
A discord bot (using discord.py) that posts Eve Online ship fittings from Osmium to our discord server.
That's a lot cleaner than the bash version previously shown. Yes, I think this could be understood by those people. But still there is the other point: adding complexity will quickly make it unreadable. We all know bash gets unreadable pretty quickly.
Yeah, definitely makes sense. You could use a faster, non-cryptographic hash function like xxHash, but that is probably premature optimization. Just keep in mind that different URLs can point to the same piece of content. Here are a couple of things you will encounter: * trailing slash vs no trailing slash * tracking parameters like /foo?utm_content=bar * http vs https Depending on your requirements, you might have to normalize these but that opens a huge can of worms. 
Better yet instead of using requests, use aiohttp so that your requests are async which will make your script run much faster.
Okay, thank you, much appreciated. Will keep those other factors in mind, good to know 
Because he had such a huge overreaction to something so small?
http://hypothesis.works/ is a property based testing framework similar to e.g. quickcheck. The main idea is that you don't write individual test cases ( [2, 2, 2, 0, 1] == 8 ) but rather define a certain property that needs to be fulfilled and the framework will generate random test cases to test this ( Input: list of 1-50 integers between -1000 and +1000, Output: slightly complex computation). If you have several different implementations, you could then say that given a certain input, all of them should return the exact same answer (since they would do exactly the same thing, only maybe in a more or less complicated way). If they differ in any way, this might indicate a bug in one of these implementations.
Posted on [Stack Overflow](http://stackoverflow.com/questions/41939412/defining-explicit-returns-for-aws-boto3-types)
Thank you, Hope it helps: - http://python-dependency-injector.ets-labs.org/introduction/what_is_di.html - http://python-dependency-injector.ets-labs.org/introduction/di_in_python.html
It is good to read more of the standard library when you have time. Your expression for codons might be better written as: from itertools import permutations bases = 'UCAG' codons = [''.join(perm) for perm in permutations(bases)] codons[:5] ['UCAG', 'UCGA', 'UACG', 'UAGC', 'UGCA'] 
Real programmers write O(n!) code! :D
You can check out [this file](https://github.com/kp-g-mok/YoutubeFeed/blob/master/gui_main.py) where I use a treeview to display data from a dictionary. Especially look at the act_check_feed_triggered function And as for loading data from a json: [I make a simple API](https://github.com/kp-g-mok/WebpageLister/blob/master/file_database_api.py) that interfaces with my JSON file using the json module
No he didn't... He was right. 
Does it?
I'm not "just unwilling to change". Once I need to change, the whole field of programming languages is open to me, and python 3 is just one among many choices. 
ding ding ding! We have a winner! Because it's a research language masquerading as a production language. There's certainly no technical reason. Indeed, if you compile two codebases to the JVM you could certainly do it. 
You could store the converted values in a structure, so that it holds the unit as well as the converted value. 
you could try [pyinstaller](http://www.pyinstaller.org/).
"Hello World" is simplest in a shell script, so should we never ever write a "Hello World" program in any language other than a shell script? Python is an fantastic replacement for shell scripting. It's more readable, less error prone, more powerful and more platform independent¬π. How about, as a community, we stop being total dicks against new people trying to learn. I'm so sick about it. I'm glad I started programming 30 years ago instead of today. In those days, I asked my friends, teachers and my dad. I'm pretty sure if I'd had to consult people on the internet about programming advice, I'd thought to myself "this industry is full of asshole know-it-alls, I'd better choose something else as my hobby". ¬π) And if you think shell scripting is platform independent, think again. It's not even shell independent.
Trust me, ESRIs documentation is a dream compared to some platforms
I'm sure it is , but for the $200k per year my org spends on ESRI licensing I have higher expectations. And to be fair it is getting better. 
Python is better suited to shell scripting than actual shell scripting is. If you write anything remotely resembling decent code that's semi-reliable and platform independent, Python beats the shell every day. 
While not all sites may have one, but you can attempt to scrape the canonical URL of a page as that should help to mitigate the multiple URLs per piece of content. 
-2 * -5 * 5 = -2 * -5 * 5 * 1 = 50 This example also has a subset that has the same maximum output as a larger subset, so also not a conclusive result. &gt; [...] you'll first need to figure out what the maximum output of each array actually is. Write a function answer(xs) that takes a list of integers representing the power output levels of each panel in an array, and returns the maximum product of some non-empty subset of those numbers. This states nothing about using a subset that excludes a panel scheduled for repair. It is just about the largest possible output, maybe the repair part is the next task?
platform independent shell scripting.. g'luck.
if the goal is to learn python... then find a problem that is suited to python. 
ORLY Firstly BASIC is never the right answer. xD But this example is irrelevant... it is obvioulsy more sensible to write a game in a programming language than ASM. It is also obviously more sensible to write a shell script in a shell scripting language. 
I'm not really sure what using md5 gives you over deconstructing the URL using urllib and storing the various components in a lookup. In [1]: from urllib.parse import urlparse In [2]: url = r'https://www.reddit.com/user/Llywedd' In [3]: urlparse(url) Out[3]: ParseResult(scheme='https', netloc='www.reddit.com', path='/user/Llywedd', params='', query='', fragment='') You can probably use '{}:{}'.format(netloc, path) as a key to a lookup dict with the value being some sort of metadata. 
Erm if you say so. I would say you have never really written a proper shell script because it most certainly is not more suitable. 
PySide is LGPL. How much source are you really modifying in a GUI?
As an American I completely agree
He might have been wrong there... but literally everything else he says is right... This should have been a Bash script.
&gt; This states nothing about using a subset that excludes a panel scheduled for repair. It is just about the largest possible output, maybe the repair part is the next task? I think they are talking about proper subsets and not general subsets. And a proper subset isn't allowed to be the set itself, where a normal subset is allowed to be the set itself. So proper subsets are smaller than their supersets. For this task the maximal power output is only sensefull if you get the power output from all proper subsets, otherwise you have no clue what panel you need to repair. That's what I have in my mind on this task. But as I said, the text isn't very clear.
heheh
I actually didn't do that purposefully and am unsure why it's happening. I'll try and fix it. 
This unfortunately works just for IPython and Python 3.x. If you need to use Jupyter and/or Python 2.7 (with virtualenv), once importing matplotlib under OSX you get the following error RuntimeError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends. If you are using (Ana)Conda please install python.app and replace the use of 'python' with 'pythonw'. See 'Working with Matplotlib on OSX' in the Matplotlib FAQ for more information. both in Jupyter (Python 3.x) and IPython (Python 2.7). I appreciate your suggestion, but if you read carefully the README you'll see that I am solving another problem, or that your suggestion is not a solution of mine.
None of what you're writing applies here.
Python related questions are best asked in /r/learnpython - you'll get much better answers there.
Very interesting, different perspective. Helpful thanks!
It will take me some time to go over all of this. So I will probably give multiple replies. 1st note, most people will strongly encourage you not to use globals, although there are times when they are perfectly fine to use. Generally if it is a constant, it is no problem at all. Otherwise use your discretion, and be very careful. 2nd. Lines 24 through 26, and line 21. This can all be replaced by a list comprehension. I strongly advise looking into those. So for this, I would remove line 21, and replace lines 24 - 26 with the following: video_files = [k for k in num_files if k.endswith('.mp4') or k.endswith('.avi') or k.endswith('.mkv')] Note I replaced you logic of '.mp4' in k with k.endswith('.mp4') etc... The reason for this is that using '.mp4' in k would append any file that contains .mp4 in it anywhere in the filename. So for example, if you had a file called "notes about GreatMove.mp4.txt" it would still treat it as an mp4. It may not be a likely scenario, but still something to look out for. Also, unless you have a compelling reason to study python version 2, I would recommend learning version 3 instead. 
Wow, that must be nice to have technical magazines/publications in a grocery store. Here in the U.S. (at least by me) there is nothing remotely close to anything, not Linux magazines, nothing. Sure would make grocery store trips a little more enticing.
Yeah, but it is a console script where reaction to user action is valuable. So instead of waiting for request_time*number_of_request you only wait for the longest request, which makes things much faster
A basic tutorial on list comprehensions can be found here: https://docs.python.org/3.6/tutorial/datastructures.html#list-comprehensions
I used a class that mimics the rendering of the main page, and use Q objects: https://docs.djangoproject.com/en/1.10/topics/db/queries/#complex-lookups-with-q-objects The Q object allows me to query with an "or" which includes both the tags and post titles. Here is an example of a query: try: db_entries = Contents.objects.filter(Q(tags__icontains=search_term) | Q(name__icontains=search_term)).order_by('-date_added')[0:5] except: db_entries = Contents.objects.filter(Q(tags__icontains=search_term) | Q(name__icontains=search_term)).order_by('-date_added') This essentially says: Take the captured search_term from the URL and search for the first 5 entries that (partially or fully) match either the title of the post or one of the tags. If it does not return at least 5 (one page) then just get all posts (which will be below 5) and render that. I use logic like this to make sure that the app can scale. By only getting a few objects at a time processing power and memory use is cut down. I hope that explains it a bit!
I recently tried pynsist, and found it really nice and easy
You could also use: video_files = [k for k in num_files if os.path.splitext(k)[-1] in ['.mp4','.mkv','.avi']] but it may be considered less readable by some
Barnes and Noble close by? Only place I could find anything in SE Texas...
You don't get it. A class is not high level citizen. It should be instantiated at some later point, for example, inside some method, and for that you should pass initialization arguments or factory. So, this produce boilerplate.
Next note: It doesn't look like lines 30 through 49 will work as expected because it is not inside the loop create on line 28. Instead of using a incrementing index (a=1/a+=1) you can use the enumerate function. And by using this, you can combine lines 28 - 49 into a single loop like this: for a, file in enumerate(video_files, 1): old_name, extension = os.path.splitext(file) new_name = '%s%s' %(str(a).zfill(2), extension) try: os.rename(file, new_name) except (OSError,FileNotFoundError): print('Failed to rename %s to %s' %(old_name, new_name) I left out the if oldfiles.endswith('.mp4') or oldfiles.endswith ('.mkv') or oldfiles.endswith('.avi'): line since this only is looking at the video_files varible, which already filters for those extensions. I changed the try except, since you do not have to worry about indexing with this, but should still try to catch file moving errors.
I think the best way to do this is to store tuples instead of numbers for your variables. Here's what I mean Instead of: meters = distance feet = distance * CON_FEET Try this: meters = ('meters ', distance) feet = ('feet ', distance * CON_FEET) and then in your loop, access them like so: for item in conversion: print("Your distance is " + item[0] + str(item[1])) Hope that helps!
Thanks for the example, I will try to understand it and see if I can apply it. I would have preferred something simpler but in the absence of that I would work with what I have
Haha thanks :-) I actually wrote this as a standalone component because I've personally had a couple of use cases for this exact kind of thing before (e.g. allowing users to construct dashboards from user-defined queries). Its main use for me, actually, is in another project of mine: [Statik](https://github.com/thanethomson/statik) (a generic static web site generator). There, I'm looking at taking some community recommendations for making it more secure for use in shared hosting environments, and there's not a chance in hell I'd want users to write their own SQL queries or, as it's currently written, dynamically execute user-entered Python code (it was good for the first few beta releases, and it's great for Pythonistas who want to run it on their own local machines, but I think this sort of structured query language, in MLAlchemy, makes it more secure for shared environments). Next step for Statik's going to be a web-based CMS interface that'll integrate directly with your Git repo (similar to, but more powerful than, Lektor). So I'll definitely need this more secure querying language. Will definitely add in `in` and `any` support soon!
Formatting advice - when posting code on reddit, indent it all by four spaces to make it look like code. response = input('encode/decode? ') key = int(input('enter encryption key: ')) if response == 'encode': message = input('enter message to encript: ') enDict = {'a':key, 'A':key, 'e':[key + 1], 'E':[key + 1], 'i':[key + 2],\ 'I': [key + 2], 'o':[key + 3], 'O':[key + 3],\ 'u':[key + 4], 'U': [key + 4]} print (message) in enDict.keys()
Duck typing is one of my absolute favourite things about python. I understand the circumstances of wanting stricter checking on occasion (particularly in security conscious settings), but I mostly do science in python. There, duck typing is the greatest thing since sliced bread. Also I enjoy your use of the Ellipsis object as your NOP. One of the most subtly satisfying python 3 change.
&gt; I'm not entirely sure what you're asking. OP is asking for something like integrating `ipython` into the editor so that you can directly execute highlighted code, for example, or provide an integrated REPL as part of the UI. Emacs has integration like this, using `ipython`. IDLE achieves it by using `exec` in Python to provide a REPL (since it's written in Python.)
Yeah I was mistaken, I thought PyQt was LGPL as well. 
Thanks was unaware of that library. Useful!
Next note: The website() function looks like it should work ok, line 80 will work in this case, or you could enclose the function in a while loop, that is a matter of personal taste. def wikipedia(url): def animelist(url): def imdb(url): First all of these have an subtle error, they are writing to episodelist, but not declaring it global, which means they are actually writing to a local variable called episodelist, which happens to have the same name as the global variable the data you append to it is not going to show up in the check function, but in this case you really shouldn't use a global anyways. I would recommend deleting line 12. And then pass episodelist as a parameter to the check function. check(episodelist), which could pass the same variable as a parameter to combining, which could then pass it to rename. Passing variables as parameters is usually better than global variables just because it is less prone to the specific error you have here. All of these should use a list comprehension to create episodelist as well, so for def wikipedia(url): that would be: episodelist = [item for item in info] in def animelist(url): it is slightly different... episodelist = [item.text for item in info] and def imdb(url): episodelist = [item.contents[5].text for item in info] The reasons for using list comprehensions instead of loops are: 1. They use fewer lines of code. 2. They are easily readable once you get used to them assuming you do not have too many nested lists. 3. They run a bit faster, especially if you are dealing with very large lists.
A simple hello world program works as a start point into any language because it basically has no side effects and enables you to see a very simple use case of the language of choice. Shell scripting is mostly done using shells, not Python, so becoming familiar with shell scripting would be best done with shells, then applying what you have learnt into Python. This applies the same to Python, if you want to get to grips with the language, use it for the simplest use cases and build your knowledge up, and then explore using it at a system scripting level.
I see, I think the key takeaway is I need to learn and understand list comprehensions for cleaner code. 
yes, works like a charm. must be you. You're not the first overzealous programmer that writes a complicated solution to a simple problem. This = my earlier comment which fell off the thread for reasons
https://www.reddit.com/r/Python/comments/5qwzif/mapiojupytervirtualenvosx_a_tool_to_install_a/dd3tjrs/
Putting aside the fact that you've obviously had a bad day, your age is irrelevant and the ecosystem you're describing is totally different from that that exists today, the arguments here are bigger than just "how do I do x in language y?". It's more about why certain technologies exist, what their purposes are and how you use them to greater effect in benefitting the project at hand. Its an important part of system design, and yes, in a toy project like this it doesn't really matter, but we're trying to stop new programmers from getting to a point where everything becomes needlessly over-complex and quitting.
Yes indeed, there are also similar constructs for dictionaries and sets too. 
True, I always forget this.
glad to help, more coming :)
You are not the first redditor that completely misses the point‚Ä¶ You edited your suggestion and added "yes, this doesn't work on Py2, but then again, why would you start something new in python2". Many many users (should I say a vast majority of them?) still use Python 2.7 for current and new projects. I'm not interested to take a stance in the Python 2.7 vs. 3.x fight. So, I'm probably overzealous, but you are quite blunt.
&gt; if you actually feel the need to use a cryptographic hashing function MD5 is no longer a cryptographic hashing function. What, to you, is the difference between a hash and a crypto hash? /u/Llywedd I wouldn't bother with other hashes unless you are worried about an *attacker sending specially crafted URLs to your program*. MD5 is still a good fit for hashing "arbitrary" data but, as /u/Sukrim is alluding to, it's easy for someone targeting your app to build URLs that cause collisions (if that's part of your threat model)
He's not using it to hash passwords, so using md5 is fine if not preferred over a more cpu-intensive hash.
Right, and that's why I'd recommend writing a Selenium script with a chrome webdriver, then swapping that out with a headless webdriver so that the window won't actually pop up.
Underappreciated post. This looks great! Good job :)
Next up, the combining function. This has the same error as the check function, in that you used check for a variable name. It also has the error with combined_file_name being global, but not being declared so, once again I recommend this one just not be global, and just pass it to the rename function as a parameter. So the purpose of this function is to combine the episode name with the files that were renamed in the directory function. This will depend on a few things to work properly. 1. That the files stored in the directory where in the proper order of episode number in the first place, since there was no sorting done there. 2. That both episodelist and f (which I renamed to media_files) are sorted in the exact same orders. Which should occur in the check function, assuming #1 is correct. For this operation there is built in function that will work well here called zip which will go over both lists at the same time. But it will rely on the two lists being the same length. If they are not, it will just stop at whichever list is shorter. Since you check on your answer later, this is all good. I suspect some of the logic in lines 150-154 may be un-needed, since you already have the ep_name, and ep_number from the episodelist and media_files variables, so I am going to make a change based on this, but double check that it works properly. def combining(episodelist, media_files): ''' combining the name of the files in the directory with the names of the episodes captured from a website''' combined_file_name = [] for episode_name, file_name in zip(episodelist, media_files): episode_name.strip('"') episode_number, file_ext = os.path.splitext(file_name) combined_file_name.append('%s - %s%s' %(episode_number,episode_name,file_ext)) answer = raw_input('Do you want to continue to rename? Y/N') if answer == 'y': rename(episodelist, combined_file_name) else: sys.exit() 
To sum up you've made a false claim and instead of backing down you've continued to give erroneous data, possibly to newbies who would not be geared up to knowing that you are talking complete nonsense. *plonk(er)*
1a) Somewhat agree, it's designed to be under the hood though and would argue this is a little outside the ordinary 1b) Lock it down with a password, it's a built in feature 2) It's a tried and true design pattern with tested libraries so I wouldn't worry about that too much. And I would rather do that than a possibly jenky rarely used built in (Not saying your pipe solution is bad at all, just want to say don't limit yourself because of that) Built-ins also get deprecaited over time. 
Woops, I forgot a section in this one where you printed all the file names, it should be placed exactly as it is currently written just before the line: answer = raw_input('Do you want to continue to rename? Y/N')
I haven't seen those, mind linking me to them? I'd be happy to write up a comparison.
I made a typo on this one, print('Failed to rename %s to %s' %(old_name, new_name) should be: print 'Failed to rename %s to %s' %(old_name, new_name) 
That's always been Microsoft's MO, hardly seems worth complaining about at this point.
You can even try Sublime Text, it has a built in console for running and viewing Python output. 
I don't have anything specifically, just seen several posts. 
Finally the rename function, whew. I would use the zip function here again, and possibly have a check to make sure it is renaming them correctly before it actually does so. def rename(combined_file_name): filetypes = ('.mp4', '.mkv', '.avi') files = sorted[file for file in (os.listdir(basedir) if file.endsith(filetypes)] for old_name, new_name in zip(files, combined_file_name): answer = '' while answer not in ('y','n'): answer = raw_input("Rename %s to %s ? y/n" %(old_name, new_name)) if answer == 'y': try: os.rename(old_name, new_name) except (OSError,FileNotFoundError): print 'Failed to rename %s to %s' %(old_name, new_name) else: continue A few final notes: I took the episodelist out of the parameter in this function, because it would not need to be used in this case. So it would also need to be changed at the end of the combining function. Also, since the video_files variable wasn't used, there is no reason to keep it as a global variable, since it is now only used in the directory function. This would mean with all of my recommendations, you would not need lines 11-13 in your original code. A good candidate for a global variable would be filetypes. This is because it is basically a read-only variable (meaning it never changes), it could be put on line 11 instead of f=[], as such: filetypes = ('.mp4','.avi', '.mkv') And since you are only reading from the variable, and never writing to it, you do not have to declare it as global in your functions. This would allow you to remove this line from both the check and rename functions, and also to use it in the directory function. So the list comprehension in the directory function could be change to this. video_files = [k for k in num_files if k.endswith('.mp4') or k.endswith(filetypes)] Also you will note that I did not use a list comprehension in the combining function when we create the combined_file_name. It might be possible to do so, but sometimes it just makes your code more readable when you don't, and this is definitely one of those cases. Overall the logic you used in the program is good, and except for the few errors I listed, would work fine. The main take away is that for many many of the things you want to do in python, there is often a built in function, or library that already does it. This allows you to write shorter, cleaner, faster code. Finding these built in functions and libraries is really just a matter of experience, and reading the documentation a lot. I know my first programs looked very similar to yours in structure. Here are links to the other built in functions I used: zip: https://docs.python.org/2.7/library/functions.html#zip enumerate: https://docs.python.org/2.7/library/functions.html#enumerate Good luck, feel free to PM me with any questions, or post in /r/learnpython Also if you are interested, I will post all of the recommendations I made combined together into a single program. 
I've looked around for the same thing, but nothing's available besides the Qt5 docs. The PyQt5 API is nearly identical to the cpp Qt5 APi, though, so it's only so bad. If you have questions about specific parts or notation or something, I'll do my best to answer them :-)
Again, I just want to reiterate my gratitude for all you have done. It's been really helpful. Thank you so much. I'm going to take the time to process through all of this and rewrite all the code. If you could please post the combined recommendations, I would really appreciate it. 
Looks great. Just tried it on telegram. Is there a way to switch temperature units to C from F
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I don't see the need for using dependency injection in a language that is runtime dynamic. Why have configuration and ceremony around this facet of programming, when instead you can directly replace class components and have documentation explaining that it is being done? The sole benefit of using DI setup in Python is that when you are looking at a particular class, you can tell that it was designed for dependency injection instead of relying on comments that might be out of date.
http://www.mycroft.ai
That looks really cool too, and I definitely can't compete with a funded company in terms of resources or anything. All I can immediately say in response to that is that W.I.L.L is free and available for use right now - you can sign up, contribute, see all the code, and even setup your own version, for free, while right now that's a crowdsource project that's still being funded. However, as it moves forward I'll make sure to keep an eye on it, and see what I can learn from it!
You should do a search here, the topic of python 2 vs 3 comes up every month or so. Luckily people have gotten a lot more positive towards Python 3 since last year. A lot of packages have been upgraded, so it's a good time for python 3. Myself, I write all my code compatible with python 2.7+...
If you don't complain about it though, they win
I like the [Programmica tutorial and reference](https://programmica.com/builds/pyqt5-tutorial/html/), personally. It covers the methods and signals of each object that are most commonly used. I haven't used the treeview widget before, so I can't comment on that.
Is there any way to cross-platform freeze - use a Linux or Mac platform to freeze something that can be thawed on Windows?
I would go for Wagtail, but I consider it to be a CMS Framework rather than just a CMS as you get the power to define your own data models.
How do you get invited to a national competition and not be able to understand a for loop? *^^My ^^brain ^^hurts.*
We use it at work for scripting and automation on our servers.
&gt; Lock it down with a password, it's a built in feature And then you either need to hard-code the password (creating a security vulnerability), or find some way to share a unique password between the server process and the client process... unnecessarily painful. &gt; It's a tried and true design pattern with tested libraries... But it still creates a dependency, and dependencies are a problem: it raises the specter of [dependency hell](https://en.wikipedia.org/wiki/Dependency_hell). I get pretty turned off when I download a package and find out that it requires downloading another one, which may require downloading something else, etc. These dependency chains create all kinds of issues: versioning conflicts where Library_A_version_X won't work with Library_B_version_Y, or where Library_B goes offline, etc. I mean, [remember this](https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)? You know what's better than that? Built-ins. If you have a Python interpreter of basically any recent version, then named pipes will work. Full Stop. 
A LOT of excel / csv / prn file manipulation (i'm an electrical engineer, planes are built using excel!)
Here is the re-write as requested, please note that I have no way to bug test this, since I do not have python on this laptop, so it will need some testing: import os import os.path import requests from bs4 import BeautifulSoup import sys from urlparse import urlparse basedir = raw_input('What is the full directory of the folder that contains the files?') os.chdir(basedir) filetypes = ('.mp4','.avi', '.mkv') def directory(): '''renames any mp4, avi and mkv files in the target directory to ([number][extension]) format, e.g. 01.mp4, 02.mp4,...''' num_files = os.listdir(basedir) video_files = [k for k in num_files if k.endswith('.mp4') or k.endswith(filetypes)] for index, file in enumerate(video_files, 1): old_name, extension = os.path.splitext(file) new_name = '%s%s' %(str(index).zfill(2), extension) try: os.rename(file, new_name) except (OSError,FileNotFoundError): print('Failed to rename %s to %s' %(old_name, new_name) website() def website(): '''user to input to check from which site they wish to scrape episode name info''' print ''' Enter the website where you wish to get the episode list from. This script can only fetch episode info from animelist, wikipedia or imdb. The links must be in the following format: https://myanimelist.net/anime/790/Ergo_Proxy/episode https://en.wikipedia.org/wiki/List_of_Buffy_the_Vampire_Slayer_episodes http://www.imdb.com/title/tt0367279/episodes?season=1 If you wish to cancel, type 'exit' ''' scrapefrom = raw_input ('&gt;...') parsed_scrapefrom = urlparse(scrapefrom) if 'en.wikipedia.org' in parsed_scrapefrom: wikipedia(scrapefrom) elif 'myanimelist.net' in parsed_scrapefrom: animelist(scrapefrom) elif 'www.imdb.com' in parsed_scrapefrom: imdb(scrapefrom) elif 'exit' in scrapefrom: sys.exit() else: print '\nThat\'s not a website I can scrape from, only animelist, wikipedia or imdb.' website() def wikipedia(url): '''fetching a list of episode names from wikipedia''' r = requests.get(url) soup = BeautifulSoup(r.content,'lxml') info = soup.find_all('td', {'class':'summary'}) episodelist = [item.text for item in info] check(episodelist) def animelist(url): '''fetching list of episode names from animelist''' r = requests.get(url) soup = BeautifulSoup(r.content,'lxml') info = soup.find_all('a', {'class':'fl-l fw-b '}) episodelist = [item.text for item in info] check(episodelist) def imdb(url): '''fetching a list of episode names from imdb''' r = requests.get(url) soup = BeautifulSoup(r.content,'lxml') info = soup.find_all('div', {'class':'info'}) episodelist = [item.contents[5].text for item in info] check(episodelist) def check(episodelist): '''ensuring that only mp4, avi and mkv files are renamed and checking the number of episodes from the website matches the number of episodes in the target directory''' media_files = [file for file in os.listdir(basedir) if file.endswith(filetypes)] media_files.sort() if len(media_files) != len(episodelist): print ''' The number of files in the directory do not match the number of episodes in the website's list. The number of files in your directory are %r. The number of episodes on the website are %r. Please check that you have all the correct files or that you have entered the correct link for that TV show.''' %(len(media_files), len(episodelist)) answer = raw_input('Do you still wish to continue? Yes/No \n&gt;....') if 'y' in answer: combining(episodelist, media_files) else: sys.exit() else: combining(episodelist, media_files) def combining(episodelist, media_files): ''' combining the name of the files in the directory with the names of the episodes captured from a website''' combined_file_name = [] for episode_name, file_name in zip(episodelist, media_files): episode_name.strip('"') episode_number, file_ext = os.path.splitext(file_name) combined_file_name.append('%s - %s%s' %(episode_number,episode_name,file_ext)) answer = raw_input('Do you want to continue to rename? Y/N') if 'y' not in answer: rename(combined_file_name) else: sys.exit() def rename(combined_file_name): filetypes = ('.mp4', '.mkv', '.avi') files = sorted[file for file in (os.listdir(basedir) if file.endsith(filetypes)] for old_name, new_name in zip(files, combined_file_name): answer = '' while answer not in ('y','n'): answer = raw_input("Rename %s to %s ? y/n" %(old_name, new_name)) if answer == 'y': try: os.rename(old_name, new_name) except (OSError,FileNotFoundError): print 'Failed to rename %s to %s' %(old_name, new_name) else: continue directory()
Now I feel even more confused... why it does what it does? Simply put, a for loop iterates over a list, returning the values one by one in the variable you provide: ie. for j in [1, 2, 3, 4]: (do whatever with j inside loop) returns 1, then 2, then 3, then 4 in the variable j, which you can use in the loop. If you only need to repeat something a certain amount of times, you can go: for _ in range(5): (code to be repeated) and (code to be repeated) will happen 5 times. _ is often used as a throw-away kind of variable if you don't need to use it's value, but can still be used in the loop if you wanted. If you had a list of x,y coordinates you needed to loop through, you could do: for x, y in [(1, 2), (3, 4), (5, 6)]: (do something with x and y values) and you'd get x=1, y=2, then x=3, y=4, etc.. until the end of the list is reached. Beyond that, I'm not sure what else you need to know, or why you'd need to know it, seeing as the competition seems to have pretty low entry requirements.
any plan to make it available via f-droid? don't use gapps thanks 
Me too. It helps that I live in a satellite tech hub to Silicon Valley. 
Just from a cursory glance, @subscribe({"name":"example", "check": run_check}) isn't this sort of thing why we have keyword arguments? I mean, [you're not accepting anything else](https://github.com/ironman5366/W.I.L.L/blob/master/core/plugin_handler.py#L132). The argument is even hardcoded to be a dict, not even a subclass or another mapping.
I suppose, just didn't occur to me to write it that way. The plugin handler has gone through alot of iterations and I suppose at some point it made sense to do it like that. Shouldn't impact anything negatively though. 
What is with tuple unpacking? for unit, distance in conversions: print('Your distance is {} in {}.'.format(unit, distance)) Format for the win because adding strings sucks ;)
Downloading porn.
Ok wow that helps, thank you so much
Well if we're going to start a storm, lets do this properly: 1. They didn't remove the GIL 2. Where is my damn `switch` statement? 3. Type hinting is ugly as hell as a late add on 4. Still isn't a built in way to freeze / distrib my code and dependencies 5. I can no longer mess with people by doing `True = 0` 6. [They still haven't forced the stop of `%`](https://docs.python.org/3.0/whatsnew/3.0.html#pep-3101-a-new-approach-to-string-formatting) and still use it for exceptions and logging modules 7. `logging.basicConfig`still affects the root logger only. 8. `subprocess.run` is a damn fine addition. 9. [`raise err from None`](http://www.codecalamity.com/?p=243#from-what) is a godsend 10. If you aren't using Python 3.7 nightly by now, fire your manager and take control of the project!
Does reddit allow for this sub to add a glaring notice when users start adding a new text post?
Everything. 
&gt; I just don't like the idea of being afraid of using well tested tools that already exist to solve a problem. It's definitely not fear. I've ventured down that third-party library road many times, for many platforms. But I've tried it enough to know the disadvantages, and past bad experiences have shaped my instincts. &gt; I just want to present an alternative that doesn't require all programs access a shared file, as that might not be realistic in all cases. Sure. Couldn't agree more. I posted my solution above so that others with similar problems might use it. But some who find this thread will have somewhat different needs, and your solution may be a better fit. Preserving these conversations for posterity is good for the entire community. Thanks for your comments. :) 
Thanks for open-sourcing this. 
I had NYC and LA in mind but it's not surprising there either
Quite nice and clean but nothing about slots and signals, at least a a first look
For corporate stuff, Jenkins and transient VMs in a build farm work great. For smaller projects, I wish TravisCI supported Windows. :(
done signed up ! but when log on, shows Internal server page. help?! 
That looks great, I hadn't seen it before. I'll **definitely** be contacting the author of that, I'm really interested in developing some W.I.L.L plugins based on some utils that I saw. The main difference I would say (from my admittedly limited look over) are that melissa - Uses keyword based nlp, where W.I.L.L fully parses every command with spaCy.io and determines a more dynamic and variable intent - Not very publicly availble, whereas W.I.L.L already has a publicly available free server that hosts several easy to use interfaces - Is more hardcoded in general, with case-by-case api calls and user data fetching, whereas W.I.L.L generalizes this and provides a framework for most things. Nevertheless, it's a really cool library!
What username did you sign up with? I'll look into it!
*hacks all phones in local starbucks using python*
UDP and ping don't guarantee that the data will be received. This means that even on the highest quality connections some data may be lost. In other words, one of every so many ping packets will be lost regardless of if you are actually connected so it's good to send a few to mitigate this.
 if rating &lt; 5 { install() } else { install() }
Have you looked into [tea-ci](http://docs.tea-ci.org/usage/overview/) at all for that? I haven't used it yet but has been on my radar. 
Looks great man! excited to see what else you come up with in the near future
*pretty please
I'd rather wait for the f-droid builds, since they will sort out any (possible) shenanigans with licensing, if any exist.
Well anything is possible! Can you file an issue and we can discuss it there? :-D
&gt; What, to you, is the difference between a hash and a crypto hash? Wikipedia explains it better than me: https://en.wikipedia.org/wiki/Cryptographic_hash_function In short: It is extra hardened against certain attacks and has properties that are nice to have in a general hashing function but that are crucial for cryptographic use. MD5 was designed to be used as such a function, but over time it was discovered that it does not have all these properties in the expected strength. This is why better algorithms were standardized. If you need a crypto hash, don't use MD5. If you don't need a crypto hash, don't use MD5 either. MD5 is both too weak for crypto and too convoluted for other applications.
There are MUCH faster hashing algorithms out there than MD5 if you just need a good random distribution, a good choice would be for example CityHash or xxHash: http://aras-p.info/blog/2016/08/09/More-Hash-Function-Tests/
&gt; Not very publicly availble, whereas W.I.L.L already has a publicly available free server that hosts several easy to use interfaces I don't want to use your servers (for privacy reasons), can I host my own? 
I had the same error when tried to sign in with email instead of login.
&gt; OP's whole goal was to start writing python I get that, but this isn't the direction in which to start.
I personally think starting in any way shape or form is a good way to start. If I was more concerned with my form when I started writing code I may have never started to begin with. The most important thing to do with a new coder is encourage him to write more code.
Then constructor inject a factory. But, again, this being python, it's all pointless. You can just attach whatever you want when you want and call it a day. Can that be bad? Yes, it can lead to crap code. But so can reliance on a DI framework. I've seen projects that have taken "decouple" to obsessiveness. This is just someone trying to enterprise the crap out of Python. Just because they did it in Java, doesn't mean it is good for every language. 
Recently used it to iterate through a directory and delete unneeded files. I use it anytime I can. Also, Django for web dev.
So assuming someone wanted to add that feature, how are you managing the codebase?
&gt; Where is my damn switch statement? Here: { 1: lambda x: 'yes', 2: lambda x: 'no' }.get(x, lambda x: 'maybe')(x) It's even got braces and automatic breaks, and your default is declared in line with what you're switching on! Or, if you'd rather throw an error, do `cases[x](x)`. :P
Why do I need to create an account? What is it used to track?
It's not that analogous at all, as `raise err from None` is only throwing away the context that caused this error, an exception is still being raises with a stack trace albeit a shortened one. I have used this a handful of times, but typically only in the upper, user facing levels of a program. If I can give a concise explanation of why an error happened, what's the point in giving the user the full stack trace (keep in mind they're only going to see code in there and not values by default). Now, if the default printout of a stack trace included what those values were, then I'd argue you'd need an extremely good reason to jettison the stack trace.
But what if I want to do three lines of code in one, 4 in another and just one in the rest? Switch has it's uses, (and is very clean IMO) aka why it's in most languages. 
Hi, thanks for you reply. I was reading again my post and I think I didn't express myself clearly. It wasn't specifically about Python 2 vs Python 3. I tried to start a discussion of things that Python doesn't do well, situations where we thought that we could use Python but backed off and used another language instead or things that Python could learn from other languages, dark corners that could be avoided, etc. I know it is a (very) broad topic and I was wondering about this because a friend and I were discussing about different languages and I've noticed how people usually like to point out only advantages of a language and forget to talk about the "problems". Anyhow, I would like the input from other users, to have another point of view.
The advantage to doing the loop this way is that (in a larger program) the unit and distance are named and can be easily identified without going back to the definition. I think though that when coding a script this size either is acceptable. 
This seems more like a job for `itertools.product`: from itertools import product codons = [''.join(triple) for triple in product(bases, repeat=3)]
What does this offer beyond convenience? Couldn't you install the stuff they removed manually?
I think the important part is showing people when, and when not to use shell versus Python or an interpreted language. This is clearly a task that can be done quite easily with Shell. Using Python to call binaries is often a PITA. However, showing examples on how to interact with the systemd dbus via Python (to accomplish the OP's task) is an excellent example showing the true power of Python. I'll sum up my thoughts on this whole Python vs. Bash subthread with this dank meme: http://e.lvme.me/oozm79d.jpg 
It's not spurious. They give very good reasons for it. It's not permanent and they say it will return once it meets the new (frankly good) requirements. It's not a mandatory upgrade. You can keep using 2015 and should till the bugs in 17 are ironed out and it reaches full parity. Quit getting your knickers in a twist over not such a big deal. If it matters so much, just don't upgrade till it's reintroduced. 
Love it &lt;3
bookmarked, sweeeet :D thanks for sharing. Just started getting into python recently and it blows my mind. Very cool to see examples and things people build. 
This sounds like you're trying to get someone to do your homework. 
Fair enough. Noted for future questions.
I'll try to use python for anything I can. I find it very multi-useful.
Aha! My misunderstanding was that a bare `#!python` shebang would be resolved in PATH just like `env` resolves its cmd argument; this made the use of env seem superfluous. Trying it now I see this doesn't work. 
Question: Is the client comfortable writing in html? If so, I would say that Django is not a bad option. With the admin interface you can edit objects stored in the database along with creating new ones, etc... I have found a good way to use this for my blog (for instance) is to make an object in the database for each post. Django automatically adds a primary key, date created, and date modified. I give the object a title, and some html for the post, and boom, I have a new post on the blog. Django is quite extensible on the back end, and most of the code is reusable depending on how you use it. I wish i had more to say about wagtail, but I have not used it before.
Thank you. The reason for the proxies would be to have many individual ip to use and I'm not sure that a tunnel would do this. Is that how it works or no? 
Referring to "spaCy.io" rather than just "spaCy" makes it sound like it depends on a third-party service. From a cursory glance at their website it's not clear to me whether the spaCy module is stand-alone or a client library that makes use of spaCy servers.
Does this rely on third-party APIs to understand speech, or is it the first-ever **private** personal assistant? :)
Thanks!
The article is from 2012...
Stand alone, I wanted to emphasize as much as I could how excellent that module was. It does not rely on their servers.
The android app does use google APIs for speech. No other interface uses any other API like that, an even on android, you don't have to use it.
It's much less complicated than most people parrot all day without knowing about it. You do NOT need ANY form of synchronization techniques if all your processes do is reading. Syncs are only needed if you don't know if your own code might write to memory other code might read when it might be inappropriate. In most cases all you need to do is being aware of how your programs access the memory. Sure, use spinlocks to steer! They're the fastest method (at least in pure assembly) but use them rarely and wise. Pipes are slow. Okay for short message passing and if you want a simple blocking mechanism that your os uses to assign other threads to the core (which is a performance killer for python, really, always manually assign your cores (pip install affinity :) and your cache will love you). You only need synchronization if you're not clever enough figuring out how to avoid it and I'd like to assume that most people are, but are scared from their own ignorance thanks to the exaggerations which keep getting parrotted by too many people. 
Thanks, appreciate it 
Because it's a personal assistant, it needs data about you to function. I'll list each part right here and show the code that uses it. * [Your name so it can greet you](https://github.com/ironman5366/W.I.L.L/blob/master/templates/index.html#L83) * [Your preferred news site so it can read you the news](https://github.com/ironman5366/W.I.L.L/blob/master/core/plugins/news.py#L25) * [Your email so it can serve you your reminders when you're not online] (https://github.com/ironman5366/W.I.L.L/blob/master/core/notification.py#L31) (It's also easy to opt out of email notifications, there will later be a setting for it, but ATM just let me know at will@willbeddow.com. All I send you is your reminders) * [Your location so I can serve you local weather data with pyowm](https://github.com/ironman5366/W.I.L.L/blob/master/core/plugins/weather.py) 
\&gt; uses range \&gt; complains about a lack of first classes ranges \&gt; [wtf](https://i.imgur.com/pQMgkBt.jpg) 
Here it is illustrated in an iPython notebook https://nbviewer.jupyter.org/url/pastebin.com/raw/MxPeQe0c
We are currently looking for Python developers in Hungary. Send me a PM if you're looking for a new opportunity. 
To be fair, removing the GIL probably means totally backwards incompatible shared memory model. Which would be great of course but still. 
No, I didn't suggest that at all. I said that *if* new complexity is needed, bash will quickly became unreadable, while python won't. Never said to add the complexity before needing it. It's a safeguard in case you need it.
You should check your sources. Restricting immigration based on country of origin is quite uncommon for civilized countries. 
Variable name is "VjdMidBttQlbLnR" but "includes no obfuscation? Huh?
Thanks for the feedback, that'd be a nice thing to add indeed. I'll try to add this as soon as I have time!
You are right that it is disappointing that there isn't more of an outcry when other governments infringe upon human freedoms. But America is different in that for a long time people have regarded it as "the leader of the free world". If the US government continues to promote isolationism and xenophobia then other countries are likely to follow and the suffering will be greatly magnified.
Here's a pretty great youtube playlist for ML with python: https://www.youtube.com/playlist?list=PLQVvvaa0QuDfKTOs3Keq_kaG2P55YRn5v
Update: Just added this feature! In the settings page of the webapp the user can now select their temperature units. Added in this commit: https://github.com/ironman5366/W.I.L.L/commit/bb9b3b3b1dbb9651ab20e404961b1964471f7909
It's this kind of toxic arrogance that drives people away. No don't explain anything, it will only be hateful and condescending. This isn't /r/politics.
NO!!! This was supposed to be a sub with no politics!!!! DAMMIT it's everywhere now on Reddit!!!! I just want to nerd out with code and not talk about politics in every sub.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Simply go ahead and don't talk :) 
Very cool project, lots of cool things to learn, and definitely solves a problem that others have been trying to fill for some time now (wheezy, falcon, sanic, etc.). Going to give the code a good read over the next couple of days. I know that you've got your hands full, but I just wanted offer that a CONTRIBUTING file goes a long way in getting people on board. Having spent some time looking for OSS projects to contribute to recently, I've found that projects without clear pointers about: - How to contact the maintainers? - How to get a patch accepted? - What are some things that need working on? ... are hard to join, even for experienced developers. Again, awesome job - really looking forward to seeing where this goes.
I too would love it if we didn't have to see politics everywhere. But the post explains quite well that the politics in question is likely to have impact on the Jupyter project, which is a prominent part of the Python eco system. Therefore I think it is relevant.
The best place for these sorts of questions is /r/learnpython The problem definition you've given isn't clear enough to help you, I have no understanding of the example you've given. If you'd like help you're best off posting code on something like [pastebin](https://pastebin.com) with Python syntax highlighting so we can see where you're up to. You should also try to make the example clearer, maybe format it as a [table](https://www.reddit.com/wiki/commenting#wiki_tables), providing both the source information and expected result. 
Building a generator &amp; validator for X12 EDI messages.
Why not just store the URL's as text? Do you have a real use-case for hashing? (de-duplication doesn't need hashing) How are you going to report or reviews if you hash the data? How are you going to monitor your URL normalization rules or scrape/spider logic if every bit of usable info disappears into a hash? Maybe not hash and see about hashing if there is an actual thing to solve?
Hi. This is indeed a very good suggestion and yes I am gonna need a lot of help from contributors. I wanted to write more welcoming documentation but somehow I spent most of my time profiling and working on typical C bugs :-) I am gonna write down suggested CONTRIBUTING file tomorrow.
What is bruteforce about this post? It is not mentioned beyond the title.
Could I store the URL's in a python list then compare against that list and if the URL appears there then not to scrape the data?
This type of elitist lecturing is out of place for a forum about python. The use of these forums to attempt to intimidate those who do not conform to the views of others is not right and is an attempt to co-opt non-political forums and communities for the advancement of an agenda. Please be more considerate of the community at large. People should feel safe in this forum and bringing in specific political agendas does not advance that goal. Please be considerate of others.
I feel like your argument works from the other side, too...
yeah I kind of agree‚Ä¶ I mean I think Trump is an ass hat but, really project jupyter this isn't you arena. 
Yes agree. Politics have many sides, and none of them belong here.
Solid response. And really, Project Jupyter can respond however they choose. The whole deciding how to feel about it part is up to you.
Okay, going to have a read. Thanks!
Boycott Jyputer, everyone use Anaconda Enterprise Notebooks now! Jokes aside this is really irrelevant: I went to the three cons he mentioned in the "practical considerations" section last year, and I can faithfully say there are no Libyan or Sudanese people there. Devils advocate that there are: most of the content is shared online anyways. It would only be a minor inconvenience if there were speakers barred, since it would be child's play to set up a stream. Fairly certain the travel ban ends before pydata anyways.
That guy also has a really good intro to python series that might help you get started since you're new to the language.
Let me give a counterpoint to that. I think this *is* politics as usual, and this particular incident is the logical next step in a trend that has been going on in a while, namely American businesses commenting on American politics whenever a divisive issue is discussed globally. We've seen it with federal legalization of gay marriage. The argument then was "it's not a political issue, it's a human rights issue". This argument, along with your statement that the order "affected people working on Jupyter" can be applied to any major political issue. That's what makes it political. I think the trend is caused by two major factors. First, the increased political polarization in the US and the West in general, where people on both sides are comvinced that the other side isn't just misguided, but *evil*. Second, the increased easiness with which information is spread, where everyone feels compelled to add to the public conversation on a particular topic. Under such conditions, it's easy to see how everyone, including private companies, would be compelled to get tangled up in politics. 
Fuck off. 
Working on some way to access Sharepoint online without having to deal with browsers. All I have right now is some wild ideas that get just far enough to give me hope but not enough to work. I know you can use webdav, but you can't really.
In my case, it was vice versa. I served as a technical reviewer for a few Python-related OReilly books over the years, and after that one of the editors asked if I was interested in writing a book of my own. I submitted a proposal and it went back and forth a few times, then signed the contract and started writing. I negotiated from day one to be able to release all the content as free notebooks... I'm hoping that OReilly will see the benefit of the model and use it in future projects!
I'll keep that in mind for any future editions ‚Äì thanks!
Awesome ‚Äì thanks :)
Sales forecasting. I am a product manager and I created a decent forecasting model in excel. The problem was that excel can only handle 7 nested IF/THEN statements, this meant that every 7 weeks I had to modify the entire forecast. It was a nightmare. While looking for ways to work around this in excel, I stumbled upon Python. I had no prior experience with any sort of programming. I thought it was all boring zeros and ones, I didn't realize it was a tool. This was 1 year ago and my life has completely changed. My sales forecasting model continues improve and evolve, but I am also working on various other projects primarily involving pandas.
It looks crazy fast! Good job! When I saw [Sanic](https://github.com/channelcat/sanic), I thought: "Oh well, goodbye Flask?". Now I'm thinking "Goodbye Sanic?" without even having the time to test it out ;) But seriously, I don't think that we can fairly compare Flask to anything else, especially feature-wise, or stability-wise.
I disagree, as I do not think politics are disconnected from the rest of the world.
What's the advantage of subprocess.run vs call, check_output etc?
Make sure to add other alternative units where applicable e.g. meters! 
You don't have to "convert" anything. DRF builds on top of Django, so you can take an existing project and use DRF to build an API as part of it.
I'm a bit late to the party, but thanks for sharing your post with us. I didn't know anything about Frozen-Flask.
I think it's just a prelude to [outrage over this issue](https://www.reddit.com/r/sysadmin/comments/5r8i9u/h1b_visa_bill_introduced_in_us_minimum_pay_more/).
I understand the sentiment here, many colleagues told me that I am cheating by implementing it in C. There are other C based servers used in the Python community. Meinheld C to Python ratio is for example much higher than Japronto's. I also mention at the end of the article that these techniques are not specific to Python and could be implemented in other languages.
"What about"-ism isn't actually a valid argument technique. You don't know if I did or did not so it doesn't even make sense. 
I agree. Apart from being a programmer I was always working as a DevOps. If programmers are given better, faster, lighter and self-contained tools the DevOps department will only get happier.
&gt; many colleagues told me that I am cheating by implementing it in C No, it's the right thing to do. You just need to give credit to the language you're actually using to get the performance. Claiming that Python is fast is a source of confusion for the young whippersnappers who are not yet equipped to see through the in-jokes and blatant propaganda.
Did you consider Cython instead of C?
from math import ceil print( [i**2 if i%2 == 0 else ceil(i/2) for i in range(11) ]) 
&gt; This is just another political issue with two sides Every issue has two sides. Me slapping the OP has two sides, since I think I was justified. I'm only trying to explain that people feel X, therefore this is an understandable action. It's a hard line to tread, but I'm really not trying to argue the EO itself. You can argue that people are wrong to feel X, and that's cool. I'm trying to walk a very fine line, talking about something different. FWIW, I'd recommend looking up with Giuliani said about what he was asked to do and consider that the guy campaigned on blocking all Muslims. Draw your own conclusions from that. There's a lot going on here. I have very strong opinions, and I'm trying to avoid arguing about the order.
Yes. I did think about it but Cython feels to me neither like C nor like Python. I would struggle to translate my C skills into Cython. It's kind of C with Python syntax. Then I double thought about debugging in gdb the code generated by Cython after reading some of the stacktraces generated by uvloop and I decided it would slow me down. I would probably prefer to write it in Rust if there was better support for compiling binary packages for Python with Rust. Probably would save me from some use after free, buffer overruns and other memory corruption bugs. Said that Cython is great, it's just another language to learn. I already know C and Python.
~~[Hey, do you call *this* appropriately scaled?](https://cdn-images-1.medium.com/max/800/1*FThTeS_kxx3j7AkTgmMKNw.png) 54k/121k is still pretty damn close to 1/2, imo.~~ ~~Your project is cool and apparently worth it if it's that fast, no need to make Go and Node JS worse.~~ Ooooooh well I feel stupid now. Damn that's fast.
Because `not n % 2` is the same thing as `n % 2 == 0`.
just realised, thanks. I'm a novice
Go through the tutorial and then go back and look at the documentation. It's not too bad, but it takes practice. I still cant code in C++, but unless you use template classes I'm fine reading it.
It sucks that we've gotten to a point on reddit that you have to tiptoe around and present facts in the most sensitive manner possible, and you still get downvoted with no replies. This is not why i come to r/python
Um, it's 54k vs 1,210k
Also, just so you know, saying, 'you forgot "== 0' is considered rude. It is doubly rude considering you are asking for help. Consider next time saying "I think you may have forgotten the == 0". Those extra words imply you very well could be wrong yourself, which in this case you were.
more importantly r/python isn't the world.
Define day to day tasks? My day to day is build on the 91k code base i wrote to add some new feature. I'd been coding in python a long time before staring the project and learned a lot about how to manage a huge code base. I recommend developing a single large project. I couldnt care less about a certificate. We train all our python devs. Most didnt know how to code. They're engineers, so the math and engineering problem is always most important. Research what you care about. Learn that. Does the industry use Linux or Windows? What about web vs. Desktop GUIs? Is a command line tool enough? What libraries should you know?
Right, sorry.
You are right, I am sorry.
(2) did not happen. Following an incident where an Iraqi refugee has found to have been improperly granted asylum, refugee applications were temporarily delayed by a review of existing cases. During this"ban," thousands of refugees were allowed to enter the country. At no point were green card holders affected or were refugees from any country banned indefinitely. This is not about left vs right politics; it's about core American values. No one gives a shit about Clinton anymore and the only person seriously challenging the election results is President Trump. If the issues you mentioned concern you, you should be happy to see Americans organizing in support of human rights; better late than never, right?
Sighs. Time to add 'trump' on the blacklist: #! /usr/bin/env python # -*- coding: utf-8 -*- # # Interpreter version: python 2.7 # # Imports ===================================================================== from filters.reddit_filter import filter_feed from filters.reddit_filter import banned_pattern from filters.dupe_filter import DupeFilter # Functions &amp; classes ========================================================= def filter_python_closure(dupe_filter): def filter_python(title, link, real_link, pub_date, description): title = title.lower() if title.strip().endswith("?"): return True if dupe_filter.in_dupes(real_link): return True if "twitter" in title: return True banned = [ "django", "course", "pandas", "flask", "can anyone", "can someone", "help!", "need help", "need some help", "help with", "help me", "[help]", "(help)", "python tutorial", "I am new", "I am a new", "please help", "new to coding", "new to python", "learning python", "how to write", "newbie", "win32", "win32com", "komodo ide", "mezzanine", "pycharm", "scikit", "homework", "mysql", "trumpscript", "trump", "election", "windows 10", "windows 11", "windows 12", "windows 13", "windows 14", "windows 7", "windows 8", "windows vista", "windows xp", ] if banned_pattern(banned, title): return True return filter_python # Main program ================================================================ if __name__ == '__main__': dupe_filter = DupeFilter.load_dupes("reddit_python_dupes.shelve") print filter_feed( chan_id="python", filter_item=filter_python_closure(dupe_filter) ) dupe_filter.save_dupes() 
And thank you for being reasonable about it. Too many people losing their minds, demonizing others, and indulging in the emotional reinforcement of it all. It just saddens me to see you are in the minority, and that all the comments here calling for the sub to remain apolitical have been heavily downvoted.
Prepping to move from private beta version of Nanobox to public release next Monday. Nanobox is a micro platform that allows Python developers to focus on code rather than bootstrapping development servers. https://github.com/nanobox-io/nanobox
Is it necessary for people who rely on the international community to speak out when arbitrary relationships are severed? Yes.
1,214,440 per *second*. I'd be happy to have 1,2 million requests/year :-) But seriously, while this is a great project, the write-up also says that it's idea is based on trying very hard to avoid python level objects. So, if I'd write a "normal" web app in this, what kind of speed could I expect?
I sincerely apologize, sir
It's possible though and I was always working as a load balancer.
Oh perfect, thank you! 
&gt; Python 2.7 Do you speak to your mother with a language like that?
I know what you mean. C and CPython were just made to work together. I don't know if you've seen the Rust Python API, but it wasn't too crazy to work with. I played with it and wrote [an example here](https://bitbucket.org/johannestaas/fastdtparse/src). That imports the python datetime library, does some rust to parse ints, then calls datetime initialization and returns the python object. I definitely had trouble finding documentation so this took me way longer than it should have, but I felt that seeing an example of importing python code, calling functions on classes/instances and returning python objects seemed to be the main thing I'd need to be able to do more cool stuff with Python and Rust. 
you'll be perfect someday
It makes me wonder how the performance compares once this framework runs more than a non-negligible amount of python though (e.g. rendering a template).
As one of the django CMS core developers I won't urge you to select django CMS rather than Wagtail... but it would be extremely interesting to know what your reasons for your ultimate choice are! I think both CMSes will very happily meet your needs. After all they have both been used in many, many projects, of all different kinds. But, one might suit your way of working better.
You managed to write an insanely fast http server that is insanely easy to use (due to the python interface). Usually it's "pick one", I'd say that's pretty cool.
"Costly" and "unconstitutional" aren't even remotely related. 2nd amendment is a joke. Only Americans seem unable to see it. History will be the judge. I'd bet good money it's going to be a harsh judgement. Who is stupid enough to put a con man as president? Apparently the US :(
&gt;It lets you do synchronous and asynchronous programming with asyncio and it‚Äôs shamelessly fast. Even faster than NodeJS and Go. &gt; &gt;This micro benchmark was done using a ‚ÄúHello world!‚Äù application but it clearly demonstrates server-framework overhead for a number of solutions. I don't know. To make a serious claim, I think we have to get beyond Hello World.
What sort of "hacks"? If you want to actually hack people, we're not going to help you - it's unethical. If you want to learn infosec/netsec/reverse engineering, Python is one of the tools that you'll probably run into on the way there, but it's far from the only thing you'll need to know to be competent.
[removed]
Project Jupyter could play a key role in keeping free speech alive by using Jupyter notebooks with Markdown Format available on notebook servers for use as informal discussion forums. Alternatively, these could adopt a topic hierarchy like the old USENET and charge very little for their use. I propose this because I think that blogging on social media is a failure for for speech and civil discourse. A set of servers in the U.S. and U.K would especially help the dissolution in public discourse which I believe is caused by social media, Reddit notwithstanding. If you need a revenue stream to support development of programming related development, here is your chance to reach a wider audience and do a badly needed public service.
selenium is so easy for me and i like it but the problem is that i don't know if it can handle or do these sort of projects. if you know a good tutorial on how to scrape javascript elements with scrapy please let me know.
I think that informal discussion forms are important too, but I think other pieces of software would be a better vessel for those platforms (rather than Jupyter).
[](Python Crash Course: A Hands-On, Project-Based Introduction to Programming https://www.amazon.com/dp/1593276036/ref=cm_sw_r_cp_api_j4nKybJRD4G8T) This is by far one of the best books I've seen out there not only because it explains python really well but because it has 3 practice projects in the second half of the book.
Everybody's home computer now has multiple cores and multiple virtual threads. The only way to tap into that currently is to spin up a whole other process space with `multiprocessing`, whereas if we had a thread safe memory model we could tap into all the raw power without working with queues or defining explicit shared variables for multiprocessing. It's also a failsafe way to stir up conversation on a reddit thread; present a strong opinion about it one way or another. ¬Ø\\\_(„ÉÑ)_/¬Ø 
That was the first thing I noticed, too, but it seems like spaCy is an MIT licensed application.
Does it support multiple back-and-forths (aka conversations)? The way I did it in the past was make each plugin execution (optionally) a generator and use `yield` and `send` to pass values into and out of the generator. If there was additional input required (such as a missing parameter) it could ask for more information and that next input would be passed directly into the waiting plugin. [Example from the project](https://github.com/nemec/Automaton/blob/master/automaton/server/base.py#L204-L215) and you can read a bit more about it here: https://blog.nem.ec/2012/01/12/conversations-with-computers/
Just finished a project of 4 months to automate virtual machine creation with django and the libvirt library
If someone were interested in the code I would definitely release it. Otherwise, I think there are better solutions out there for blogs lol. 
I don't have any implementations of it yet, but back and forth conversations are supported by the framework. A "response" key would be passed in the data of the response object, along with the command id. 
It certainly is out of place and not called for. This especially for a policy that is temporary too deal with real risks from this region of the world. The policy is very rational considering that ISIL is training people to infiltrate via refugee programs. You don't even need to trust our government here as the terrorist themselves have said they are doing so and there is plenty of evidence in Europe that they have been successful. In the end this highlights in my mind that liberals are poor losers. Something ruffles their feathers even a little bit and they find the need to act out. 
Upvoted because while I disagree with you, this seems like an interesting question. What do you think would be different about a new forum that would avoid the problems with existing ones (reddit, twitter, facebook, and so on)? The biggest problem to my mind is 'filter bubbles' - people group together by political leaning until they only hear from people who agree with them. Then lies that reinforce what they already think can spread easily. I don't see that adding another forum would do anything to alleviate this. (I also agree with /u/refreshx2 that Jupyter is not well suited to being adopted as a discussion forum, but I'm less interested in discussing that point)
When writing stuff like code in Reddit, you need to add 4 spaces at the beginning of each line to make it preserve indenting and not try to interpret certain symbols as formatting.
War is politics. The only countries impacted here are ones we are effectively at war with thanks to Obama. You cant remove the politics from such a measure!!! Mind you i think Trump is in fact concerned about infiltration by bad actors. This order is a very effective way to deal with that problem. This problem is real too as Europe has experienced its share of suffering from infiltration. Does this mean that everybody in the middle east is bad? Certainly not. However you do need a way to filter out the high risk individuals. Honestly i have to support Trump here. The risks simply out weigh the benefits to our country. The pluses simply out weigh the negatives. 
Your mac terminal is running python2, and textwrangler is running python3. If you installed python3 correctly, you should be able to run it in the terminal with python3 my_file.py If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, when you ask for help always include the full error message; "some error" does not help. 
Sure they are free to respond but the problem is they can end up looking very foolish. 
Sorry, I mistyped that... he has never personally been convicted, only his businesses of course. But that's just how corporate america works, no one went to jail for the financial crash after all (that's something you SHOULD blame the Obama administration for! totally and utterly unacceptable).
If you take Islam out of the equation you still have the reality that immigration as usual is no longer a smart thing to support. It has allowed the world to ignore excessive population growth, especially in economies that cant afford it. In the end we have to consider if immigration itself does more harm than good. 
Didn't work with Django for quite a time (last version I used was 1.13 I think). Skimming over channels repository I got more or less an idea. Shouldn't be too hard indeed.
Thanks. I think the first option is a good one. You can fix your numbering by adding backslashes immediately after each number.
Formal discussion groups usually reflect the views of the creator of the forum. As such they are effectively advertisement for a specific political slant. As such they gave about as much value as going to a party web site for a balanced view. 
&gt; (last version I used was 1.13 I think) Time Traveler confirmed :) They are just about to release v1.11 ...
&gt; I'm so effing tired of seeing every place on the internet where I go to dive into tech/infosec and get away from politics getting shit on by people's political beliefs. It's nice that you live a life that politics don't affect you, but many of us aren't so lucky.
Would you be able to tell me how to fix it?
We are not at war with any of the countries banned. In fact, Iraq is a critical, if contentious, ally in the fight against ISIS. The right of asylum for refugees was formally established in the Geneva Convention but the American ideal goes back way before that.
My first take was "really?" Upon reading, I found your statement quite reasonable and I am glad you made it clear how what guided your path to the US and how this policy might have affected that as well as practical ways this ban will affect Jupyter.
And just 2 days ago I was considering learning Falcon or Sanic lol. How much more would it take before Japronto is ready for production deployment? Can't wait to replace Django/gevent/psycopg2 with this and uvloop/asyncpg.
There's lots of interest. Just super divided and incomplete. See brython, transcrypt and beeware for example. 
Well, they pretty much made a public statement that they aren't open to any Trump supporters joining their team. Just because they're open source project doesn't mean this isn't going to have repercussions. And many neutral viewers will likely have the same viewpoint as op, which is wondering why a software project is taking the time to make a political statement. IMO it shows a severe lack of understanding to allow your brand to make a comment on something controversial.
# [Hiring] Molex is looking for a mid level Software Engineer with some scientific programming background. Position is located in Maumelle, AR (just outside of the capital of Little Rock), remote is not an option at this time. Full job description can be found [here](https://sjobs.brassring.com/tgwebhost/jobdetails.aspx?jobid=850143&amp;partnerid=25555&amp;siteid=5060). If that link doesn't work then you can search for it on http://www.molex.com/molex/jobs/jobs.jsp with the job number 3583BR. --- Candidates should have at least a Bachelor's degree in Systems or Computer Engineering, or Computer Science with 3+ years of software experience. We are looking for candidates who have experience designing and building small to mid-sized desktop applications (1k to 20k lines of code) in Python, with a preference for scientific or data analysis applications.
Thanks, practice projects usually really EPL me learn the syntax of a language and the finer details so to speak.
I would definitely say this is an early alpha quality software. Don't use it in production at all. If you wanna do something today go with Falcon or Sanic whatever suits you best. Japronto will go through several stages of API changes and most importantly it is written in C which means that there are dragons there and unexpected SIGSEVs (I surely didnt hunt down all of them but didnt see any in a while).
Are there any other similar statements from the more general Python community, or the Django community? I ask because those are the communities whose conferences I often attend. While I'm not directly affected by this EO, I wouldn't be comfortable attending a US conference where some classes of people were prevented from attending. PyConUS for instance has an excellent [diversity policy](https://us.pycon.org/2017/about/diversity/); this EO will directly impact PyConUS's aims to increase the diversity of their event. 
Hi, I have one user trying to run Japronto inside Docker and he reports different results as well. So don't try to do that. I run all the benchamrks on a freshly started instance that don't have anything else on it running in the background. I used this script for all the benchmarking needs: https://github.com/squeaky-pl/japronto/blob/master/misc/bootstrap.sh The methodology is: First wait until the CPU callms down (under 5% load) benchmark with -t 1 -c 100 -d 2 ten times in a row Take median of grouped continuous data, calculated as the 50th percentile, using interpolation of 10 samples this logic is coded here https://github.com/squeaky-pl/japronto/blob/master/do_wrk.py 
True it looks really similar. But in fabric you don't have what makes Ansible strong: host files and a rich module world.
Python 2.7 only, and reimplementing everything. It was a bad idea from the start. Better either: - invest in Pypy which works now; - help MS with pyjion which is only working on the JIT part so you can just plug it in CPython. Their stance felt like a childish decision of ingeniors wanting to roll on their own stuff for the sake of it instead of really improving the ecosystem.
I think the pyjion method is the best route at this point, I am quite hopeful that Bret and Dino can make a fast Python implementation on CoreCLR, it would be really cool!
Do you mean comments? If so, anything after `#` will be treated as a comment. # the next line adds 2 and 2 two_plus_two = 2 + 2 # this should be four Also, please post in /r/learnpython next time.
Yes.
Because, despite all that shit that gets posted here, you can sometimes find pearls.
That wouldn't be hard, but I am too lazy to write it right now.
Yes, that's the point. If you were to read everything that gets posted here, you wouln't be probably able to keep up with it. I've managed to read full feed for like one year, than I got tired and wrote the filter, which cuts roughly 2/3 of the traffic. Now it's like only 800 posts / month. You should see my filter for /r/programming: #! /usr/bin/env python # -*- coding: utf-8 -*- # # Interpreter version: python 2.7 # # Imports ===================================================================== from filters.reddit_filter import filter_feed from filters.reddit_filter import banned_pattern from filters.reddit_filter import banned_pattern_tokens from filters.dupe_filter import DupeFilter # Functions &amp; classes ========================================================= def filter_programming_closure(dupe_filter): def filter_programming(title, link, real_link, pub_date, description): if ".NET" in title.split(): return True title = title.lower() # usually with "python", so the whitelist lets it go if "trumphscript" in title or "trumpscript" in title: return True whitelist = [ "carmack", "clojure", "codeless", "digitalmars", "dlang", "emacs", "lisp", "pypy", "python", "pharo", "racket", "reality", "rms", "scheme", "self", "smalltalk", "stallman", "templeos", "virtual", "vr", "oculus", "vive", "hololens", ] if banned_pattern_tokens(whitelist, title): return False if dupe_filter.in_dupes(real_link): return True banned = [ "c#", "c++", "c++11", "c++14", "clang", "dart", "elixir", "f#", "fortran", "golang", "haskell", "java", "javascript", "kotlin", "perl", "php", "ruby", "rust", "scala", "swift", "typescript", "android", "angular", "angularjs", "apache", "atlasdb", "aurelia", "citrix", "codepile", "coderpower", "cppcon", "devops", "dijkstra", "docker", "eclipse", "fizzbuzz", "forth", "gitlab", "gnocchi", "godmin", "gtalkabout", "hhvm", "hipchat", "houndify", "ifttt", "instagram", "intellij", "javadoc", "javafx", "javaone", "jclarity", "jdbc", "jekyll", "jenkins", "jetbrains", "jquery", "kafka", "kaminari", "lamp", "libreoffice", "linq", "makara", "matlab", "mongodb", "monocoque", "mysql", "nanofl", "neo4j", "netbeans", "nginx", "nodejs", "npm", "openoffice", "paas", "phonegap", "phpunit", "platformio", "postgresql", "protractor", "reactjs", "redis", "redox", "rxjava", "selenium", "sqlite", "swagger", "twitter", "udacity", "webgl", "webrtc", "windbg", "windows", "winrt", "wordpress", "xamarin", "xcode", "trumpscript", "phpstorm", "pokemon", "trump", "election", # snake pits full of snakes, scorpions, spiders, shit and sjws "women", "ageism", "gender", "feminism", "diversity", "harrasment", "microaggression", ("micro", "aggression"), # I don't really care about these sentences ("microsoft", "surface"), ("microsoft", "azure"), ("anypoint", "studio"), ("css", "js"), ("css", "trick"), ("php", "framework"), ("asp", "net"), ("node", "js"), ("angluar", "js"), ("react", "js"), ("selected", "js"), ("sql", "injection"), ("css", "javascript"), ("css", "php"), ("c++", "stl"), ("google", "chrome"), ("modern", "web"), ("referrals", "free"), ("mobile", "ux"), ("recruit", "manage"), ("manage", "startup"), ("data", "analysis", "r"), # shity clickbait crap ("full", "stack", "web"), ("must", "have", "free"), ("growing", "tech", "stack"), # bullshit phrases ("how", "i", "learned", "to", "stop", "love"), ("considered", "harmful"), ] if banned_pattern_tokens(banned, title): return True # senteces as they are -&gt; simple `s in title` check banned_sentences = [ ".js", "amish programmer", "android app", "angular.js", "billing software", "hack 2.0", "help me", "komodo ide", "ms sql", "node.js", "riot.js", "react.js", "technical debt", "visual studio", "vs 2015", "vs2015", "windows 10", "windows 11", "windows 12", "windows 13", "windows 14", "windows 15", "windows 16", "windows 17", "windows 18", "windows 19", "windows 20", "windows 7", "windows 8", "windows vista", "windows xp", ] if banned_pattern(banned_sentences, title): return True return filter_programming # Main program ================================================================ if __name__ == '__main__': dupe_filter = DupeFilter.load_dupes("reddit_programming_dupes.shelve") print filter_feed( chan_id="programming", filter_item=filter_programming_closure(dupe_filter) ) dupe_filter.save_dupes() 
Ah, you're redding it via RSS. I tried that once but the volume was too high, but maybe you're onto something with filtering. 
Great work! I think I found a typo on a page: https://github.com/squeaky-pl/japronto/blob/master/tutorial/1_hello.md , "Copy and paste following code into a fail named hello.py:" -&gt; "Copy and paste following code into a file named hello.py:"
I am not going to do your homework for you. You should swap some of the characters in `messages`.
What a fail of mine :-)
Unfortunately when we give them better tools, their code quality usually goes down. Faster servers and smarter libraries do nothing for the lazy-time-pressed developer.
Just going over variables and strings, and the find() function in python. Will be recapping loops over the next couple of days before going on to new stuff.
Selenium is fine for scraping content, but if you want to scale it becomes a little tricky. If you can get all your scripts working with [the phantomjs webdriver](http://phantomjs.org/) you'll be much happier.
(excerpt from `meinheld`'s README) &gt; Thus this is yet an another asynchronous web server like gevent. So in other words, `meinheld` makes your code to switch between requests on I/O.
**[Hiring]** Full-time Instructor for Python-Based Developer Bootcamp Portland, OR **Are you passionate about code? Do you want to be a part of a collaborative team interested in making a difference in the lives of individuals?** PDX Code Guild is looking for a passionate Associate Instructor for our 12-week day Full Stack Developer Bootcamp! Join our awesome team of kick-ass men &amp; women passionate about providing students great futures through computer programming. At PDX Code Guild, we are committed to providing highly effective, hands-on computer programming instruction with the goal of preparing students successful careers in the rapidly growing IT industry. **PDX Code Guild is looking for an instructor who is interested in teaching the fundamentals of software engineering and full-stack development in an intensive, 12-week day web development course that covers Python3, Django, JavaScript, jQuery, HTML5, CSS3, relational database design, how to think like a programmer, and important developer practices like agile, source control (git), testing, code reviews, and debugging.** Faculty must facilitate hands-on individual, group, and pair programming practice as well as personal and portfolio development. **As Associate Instructor at PDX Code Guild, you will:** - Instruct students in the material provided in the PDX Code Guild curriculum - Support students during class project work as necessary - Identify activities to support and enrich existing PDX Code Guild curriculum - Develop internal tools to support the PDX Code Guild program - Assist in student assessments and the placements process - Provide feedback to teaching coordinate program logistics (guest speakers, etc) **Expected Experience:** - Has mid to high-level Python and Javascript knowledge and professional experience working with agile web or software development teams - Experience with Django, Jquery, HTML5, CSS3, and relational databases - Thrives in a continuous feedback environment and welcomes feedback from students and other instructors - Previous background in teaching and/or mentoring aspiring developers -- or a deep interest in giving it a try - Familiarity with pair programming and TDDPDX Code Guild provides equal employment opportunities (EEO) to all employees and applicants for employment. Qualified applicants will receive consideration for employment without regard to race, color, religion, sex, sexual orientation, gender perception or identity, national origin, age, marital status, protected veteran status, or disability status. To apply, email Sheri Dover at sheri@pdxcodeguild.com
Looks like you've got a typo [here](http://imgur.com/x4DfkMQ). EDIT: I was wrong.
I've managed to get similar results using multi threaded fastcgi and C++ behind nginx.
Thank you. That part I kinda get, although it's a bit confusing because: &gt; Thus this [meinheld] is yet an another asynchronous web server like gevent. And gevent's documentation reads: &gt; gevent is a coroutine -based Python networking library that uses greenlet to provide a high-level synchronous API on top of the libev event loop. But going back to my question, why would you use two separate WSGIs servers in combination? Thank you again and sorry for being slow to get it. 
Thank you for adding another option and presenting a very different strategy for performance. The big win here appears to be "pipelining", which presumably is something that any framework _could_ utilize. Am I missing something? With that thought in mind, wouldn't the benchmarking be more accurate if pipelining were disabled? What about concurrent connectivity? Finally, isn't pipelining a contract from both client and server? The only way to take advantage would be if both client and server were pipelining?
Only for CPython. Other implementations don't have it. I'm sure their C extension game is weak though since every C extension expects it though 
Google called me today, maybe they have some openings.
Try out r/learnpython. You will probably get more responses there. That being said, you should try writing everything out in pseudocode first. Just from the organization it looks like you made this on the fly. To me it seem like it could be a simple if/elif/else. if input is english: get word translate word to pig latin elif input is pig latin: get word translate word to english You can figure out the specifics. 
First they came for the Socialists, and I did not speak out‚ÄîBecause I was not a Socialist. Then they came for the Trade Unionists, and I did not speak out‚ÄîBecause I was not a Trade Unionist. Then they came for the Jews, and I did not speak out‚ÄîBecause I was not a Jew. Then they came for me‚Äîand there was no one left to speak for me. Martin Niem√∂ller (1892‚Äì1984)
Who would want right wing scumbags on their project? The joke going around the UK at the moment is that Theresa May told Trump that he was Mr Right, it was just a pity that his first name was alt.
Isn't that how Putin fiddled the US election in favour of Trump?