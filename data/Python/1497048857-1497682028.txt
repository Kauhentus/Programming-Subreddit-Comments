Did you work for Mirantis? Or HPE?
I think what OP is saying that you should consider Python 3 the 'default' Python now, and Python 2 the oddball. I also agree with that sentiment. 
&gt; udata = [unicode(e) for e in data] &gt; # or &gt; udata = map(unicode, data) This doesn't work. Notice the extra set of paren in my data: data = unicode(('first_name', 'last_name', 'email', 'password')) udata = [unicode(e) for e in data] print udata &gt;&gt;&gt;[u'(', u"'", u'f', u'i', u'r', u's', u't', u'_', u'n', u'a', u'm', u'e', u"'", u',', u' ', u"'", u'l', u'a', u's', u't', u'_', u'n', u'a', u'm', u'e', u"'", u',', u' ', u"'", u'e', u'm', u'a', u'i', u'l', u"'", u',', u' ', u"'", u'p', u'a', u's', u's', u'w', u'o', u'r', u'd', u"'", u')'] 
i can't change the first line. I'm not actually given the line, I'm given "mylist" in that exact format.
&gt; import re &gt; &gt;&gt;&gt; c = re.compile(r"\'(.*?)\'") &gt; &gt;&gt;&gt; entries = tuple(c.findall(mylist.encode('ascii','replace'))) &gt; &gt;&gt;&gt; entries &gt; ('first_name', 'last_name', 'email', 'password') &gt; &gt;&gt;&gt; type(entries) &gt; type &lt;tuple&gt; &gt; &gt;&gt;&gt; len(entries) MY HERO. Thank you!!
my mistake, you would need to use a list instead of a tuple, see edit edit: oh okay so you get the initial text as unicode not tuple
Don't forget analyzing sensor recordings, such as EEG.
Downvoting for posting a screen shot instead of text. Do you edit your code with Photoshop?
Hear, hear.
Downvoted for generic "Help" title that gives no information about what you want. Bad title: "Help!" Good title: "Cannot install scipy" Better title: "Help needed to install scipy on Windows" 
🔥🔥🔥🔥
The supposed code you provide is not real Python code, so I'm, forced to **guess** what you mean. My guess is: - you are running Python 2, not 3 - for some reason, you are given a Unicode string that looks like a tuple but is a string, e.g. `u"('fred', 'smith', 'fred@example.com', 'password')"` - for some bizarre reason, you call this **string** "mylist" (it doesn't look anything like a list to me) - and you need to convert that to an actual tuple of strings `('fred', 'smith', 'fred@example.com', 'password')`. If my guess is correct, you want: record = u"('fred', 'smith', 'fred@example.com', 'password')" assert isinstance(record, unicode) values = ast.literal_eval(record) assert isinstance(values, tuple) **DO NOT** let anyone convince you to use the built-in `eval` function to do this. That's how you get code injection security vulnerabilities. 
&gt; you can use a regular expression to pull it apart And now you have two problems. Don't do that.
Live??? Uhm, if it's something simple, maybe. Usually for real time DSP, you want somethong like an FPGA. Depends on what frequency of sampling you are using really so you don't have aliasing.
Don't do that, using a regular expression is an awful idea. py&gt; record = u"('Fred', 'O\'Brien', 'mj@example.com', 'password')" py&gt; entries = tuple(c.findall(record.encode('ascii','replace'))) py&gt; entries ('Fred', 'O', ', ', ', ') To quote Jamie Zawinski: &gt; Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. Regexes are useful, but they cannot solve this problem correctly. You need a real parser. 
&gt; /usr/bin/play -q -r 8000 -c 1 -v 100 -t sl - synth brownnoise band -n 1200 200 tremolo .1 40 When I try that, I get: sox: Usage: [ gopts ] [ fopts ] ifile [ fopts ] ofile [ effect [ effopts ] ] Failed: Not enough input or output filenames specified 
Not to reply, but merely to add some data. The example project contains about 12K of actual code I wrote. The project zip file is 602K because I included jQuery and some screenshots. Packaged up with the Electron framework the project expands to 30M on Win32, 32M on Linux and 44M for a Mac DMG. A real project like the Atom IDE is 106M for Mac. Likewise #Slack is 72M.
If you use something efficient, such as NumPy, you can get somewhat decent latency, but not great. (E.g. I might use it for generating reactive sound for an art project, but not for a guitar effect, where every millisecond counts.) When I have to write fast C code, I like experimenting and prototyping with Python first, figure out the math and algorithm, and then rewrite it in C. That can go quicker and smoother than starting in C right away. So in general, starting with Python for real-time audio stuff isn't the worst idea; however, if you're targeting the Cortex's DSP functionality, I'd guess it would make more sense to use a library that supports that chip from the start. Maybe there's one with a MicroPython binding?
Congratulations young sir! (or madam) You just won asshole of the year award! How do you feel?
I really don't mean to thread hijack here, but I thought my library, "chippy", would be of interest to people who liked this video. Chippy is a pure python module that does the same things with a few additional bits of code that might be interesting, such as how to add a RIFF header. https://github.com/benmoran56/chippy Again, not trying to hijack, but just wanted to share additional code for people interested in this topic. It's quite fun to explore. Edit: oh yeah, and a simple save method :)
80 MHz is the frequency of the processor, that may not be the same as the I/O interfaces and it doesn't include the overhead of what's already built in. You should be able to do some kind of digital processing on it. Just start simple. A low pass filter is probably the simplest thing to start with. See what it sounds like. If you are hearing periods of no sound, or super distorted sound, that's when you know you've hit the barrier. 
Check out http://pyweek.org for a start. Its a biannual few day Python game jam, so all things are limited in scope. Source code of the games are available though. Just to mention, pyglet works just fine with PyPy. PyPy itself is not such an easy interpreter to actually distribute bundled applications with, though, so for now it's not really an advantage if you plan on distributing a game. Hopefully Pyinstaller or another project can support PyPy in the future.
Best thing I can think of is go in to Preferences -&gt; Editor -&gt; Inspections -&gt; Python/Code compatibility inspection and make sure only the newest python versions are selected.
You could use tkinter or pygame or something. Not that matplotlib can't do it (I actually don't know), but those other options are made for it.
If your modifications would break 3rd party libraries, you might as well just use Julia.
Why not use numpy's built in dumping to/loading from text or binary file methods?
Numba is awesome if built in (to numpy) ufuncs don't cut it for you
My understanding is #4 is not true. Yes, at regular intervals the interpreter gives other threads a chance, but not a fair one, and the previously active thread almost always gets the GIL back
I liked [The scientist's and engineer's guide to Digital signal processing](http://www.dspguide.com/)
you should know that [GNU Radio exists, can be used in a simulation, and uses Python (with c++ for core algorithms, like Blender)](https://www.gnuradio.org/)
[import antigravity](https://xkcd.com/353/)
Its not that single core computers are rare, but that single threaded design is still extremely common. The case where you would benefit from parallelization but multiple processes is too heavy and you can't express your algorithm in C/cython/Numba is pretty rare. Those cases do exist, but not so common that it makes sense to deoptimize 99% of cases.
/u/lappoguti is mostly positive! [view results](http://ruadick.com/user/lappoguti/) - Ranked #11074 of 86381"
There's not much to say here other than if you're in Django, use its ORM. If you're not, use SQLAlchemy (or peewee or pony). 
Mirantis
RemindMe! 4 days my LineSDR is coming soon. I'll be playing a lot more with it then. see also /r/GNURadio 
**Here's a sneak peek of [/r/GNURadio](https://np.reddit.com/r/GNURadio) using the [top posts](https://np.reddit.com/r/GNURadio/top/?sort=top&amp;t=year) of the year!** \#1: [GNU Radio 3.7.10 released](http://gnuradio.org/redmine/projects/gnuradio/wiki/ChangeLogV3_7_10) | [1 comment](https://np.reddit.com/r/GNURadio/comments/4rmbhy/gnu_radio_3710_released/) \#2: [Demodulating FM Analog Video Used by 5.8GHz Drones?](http://i.imgur.com/ol5YPjB.jpg) | [10 comments](https://np.reddit.com/r/GNURadio/comments/4vs5is/demodulating_fm_analog_video_used_by_58ghz_drones/) \#3: [Help Decoding FSK](https://np.reddit.com/r/GNURadio/comments/4qxo3r/help_decoding_fsk/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
I will be messaging you on [**2017-06-14 02:17:10 UTC**](http://www.wolframalpha.com/input/?i=2017-06-14 02:17:10 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/6g9ccc/it_is_ridiculously_easy_to_generate_any_audio/dipaee6) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/6g9ccc/it_is_ridiculously_easy_to_generate_any_audio/dipaee6]%0A%0ARemindMe! 4 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dipag5u) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
As of today, there's no hard constraint on this. The set of possible states would be the initial one + any defined in your decorators. However, there is nothing to stop something from manually setting the 'state' on the instance to a value that is not covered by the decorators. I originally had a @machine class decorator that would enable it to enforce such constraints but I've since removed it. I'll keep thinking about that one for sure.
Why tho?
ahh shit, did my brother see this? let him handle it
Bit depth doesn't have much to do with aliasing, it's all about sampling rate. The problem with generating saw / ramp waves or square waves the way that they are in the example is that the vertical portion of the waveform is a change at basically infinite frequency. So no matter what your sampling rate is, you will get aliasing as the higher harmonics reflect back into the audible range. 
Hmmm Ive heard about this too. Apparently an actual bandlimited (due to Nyquist sampling theory) square wave is just a bunch of 0s and 1s, but theres a whole bunch of intermediate values and at certain times looks a bit wavey. Couldnt you just modify how the signal looks in the Fourier frequency domain (using an fft) to make sure its correctly bandlimited? 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
There are a bunch of techniques to generate a bandlimited waveform and it's not *that* hard in itself (but generating waveforms is only the beginning of virtual analog). Building it up from the Fourier series is one way but done in the naive way it only really works at constant frequency (or else you have to rebuild it again and again). 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
The bit about summing sine waves comes in because it's one way (one of the most basic ways in theory) to generate a bandlimited version of a waveform without the harmonics above the Nyquist limit. 
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
The interpreter does try to divide the time fairly, but it can vary depending on the workload. The [Python docs have a good explanation under `sys.setswitchinterval`](https://docs.python.org/3.6/library/sys.html#sys.setswitchinterval): &gt; Set the interpreter’s thread switch interval (in seconds). This floating-point value determines the ideal duration of the “timeslices” allocated to concurrently running Python threads. Please note that the actual value can be higher, especially if long-running internal functions or methods are used. Also, which thread becomes scheduled at the end of the interval is the operating system’s decision. The interpreter doesn’t have its own scheduler. The default value is 5ms. A more in-depth explanation is available in `Python/ceval_gil.h` in the CPython source repository. Here's an overview: When an inactive thread wants the GIL, it will try to acquire the GIL and timeout after the switch interval. If it times out, it will explicitly request the GIL by setting the `gil_drop_request` variable (through the `SET_GIL_DROP_REQUEST` macro). At the top of the interpreter's eval loop (`_PyEval_EvalFrameDefault`), this variable is checked (by the currently running thread). If it sees that another thread wants the GIL, the current thread releases the GIL and waits for another thread to take it. Then, it immediately starts waiting to re-acquire the GIL, timing out after the switch interval. And so the cycle repeats. :) So if the interpreter is spending a long time in one thread's eval loop iteration, that thread will receive a disproportionate amount of CPU time. In that case, it may help to increase the switch interval with `sys.setswitchinterval` to allow the other threads more CPU time. *Note: Python 2 worked differently; some of this does not apply.*
I agree this is how it should be - we work this way but as I said, only in public facing sites. 
You'll get a lot more help at /r/learnpython, but still no one is gonna do your homework. If you'd like help, post a spey question and say what you've already tried and what didn't work. Also, those pictures are pretty difficult to read, just type up a few lines to summarize it. 
Dude, are you even interested in learning this stuff?
Ok I kind of get that. Thanks.
Ok your first two sentences make perfect sense, but the third doesn't. What do you mean "reflect back into the audible range"? 
Well you've taken more signal processing classes than I have actually. I just know a *little bit* from reading about synthesizer/audio effect programming. "Virtual analog" is just the term used in the music gear/plugin industry to mean software designed to emulate the sound characteristics of an analog synth or analog audio processing. So yes it includes things like digital filter implementations (for this case IIR mostly) that are meant to behave like analog filters, digital distortion that's meant to behave like analog distortion and so on. Any processing that adds harmonics runs into the issue of aliasing - the most basic way to deal with this is to run it at a higher sample rate and downsample but there are other techniques for particular things. [a paper describing one of the classic approaches to bandlimited oscillators](https://ccrma.stanford.edu/~stilti/papers/blit.pdf)
Check out [faust](http://faust.grame.fr/examples/2015/10/01/organ.html).
[removed]
Hey! I understand, and I didn't know about the LearnPython subreddit.
Yeah, but as an absolute number I bet there are more today. These are just tools and you use tools depending on your needs. 
well, why don't just try [`pyenv`](https://github.com/pyenv/pyenv)?
It's just that with using `sudo` you are modifying your system's Python environment which (if anything breaks) can leave your system in a broken state. This is why pip's `--user` option and things like `virtualenv` exist.
I am working on DRAW: A Recurrent Neural Network For Image Generation, trying to build a keras version of Eric Jang's code. 
Awesome. Short and simple. 
Sage pretty much just wraps SymPy, SciPy, Singular, Maple, R, ATLAS, and [a bunch more](https://en.wikipedia.org/wiki/SageMath#Software_packages_contained_in_SageMath) in the familiar Python syntax.
Yes, .whl files are a possibility now, but they wen't available back when I was trying do do Python on windows, as wheels hadn't been invented yet. Sometimes you'll still need a C compiler though, I've seen for example with DB drivers where they are compiled against a specific version of the DB software so you can't always rely on .whl files being there.
Given the data format as presented then regexs work fine. If there was any variances in the data - then you are right regexs aren't the right solution. 
&gt; Given the data format as presented then regexs work fine. No it doesn't, at least not the original regex provided, I've already demonstrated data that breaks it. py&gt; record = u"('Fred', 'O\'Brien', 'mj@example.com', 'password')" py&gt; entries = tuple(c.findall(record.encode('ascii','replace'))) py&gt; entries ('Fred', 'O', ', ', ', ') 
Considering he's new to encryption I feel we should be providing feedback and constructive criticism instead of just "I'm out".
&gt; I'm probably going to get downvoted for this Yep, sure are... Downvoted for the generic, uninformative title. Downvoted for posting to the wrong subreddit. (Try /r/learnpython instead, like it says in the sidebar. But first actually try doing the work.) Downvoted for expecting people to do your homework for you. What have you tried? Have you written any code? Do you understand what is expected from you? Downvoted for posting an image instead of text. (Do you edit your code with Photoshop?) OMG, you couldn't even be bothered to take decent photos of the project, they're all on an angle. Fuck me, that's lazy. If that's the level of care and attention you apply to your animation work, you might as well just quit the course now and get a job washing dishes. And if I could, I'd downvote it even more because you *knew* it was likely against the rules and still posted it. 
After learning SQLAlchemy, I'm not sure I'd ever pick Django again, given the choice. Though you can have both. At my job we use Django, and we have a new project that requires composite primary keys (for sharding). Django orm just plain doesn't support this, so we had to use something else. Most of the old code is Django orm, the new code is just Django with SQLAlchemy. We've got it working with DRF, etc, so it's definitely possible. Given a new project, though, I'd probably roll with something that either doesn't provide it's own database layer, or something that supports SQLAlchemy out of the box. SQLAlchemy is just miles better. Wish I had learned it sooner.
If you find audioprogramming fun you should try out supercollider or csound. They are a lot more powerfull. Albeit not in python. 
Is this the official image? I'm glad to check it because if this is the official I'm building my own and never look back (what sense makes to build the dependencies like if there was no tomorrow? pip, idle3, pydoc, etc, etc, etc) Forget this comment if this is not the official one but I will label it in a way that makes clear this is a devs python not a production one
[Django tutorial](http://www.youtube.com/playlist?list=PL6gx4Cwl9DGBlmzzFcLgDhKTTfNLfX1IK) This guy does an excellent job of walking you through the setup step by step and im pretty sure he goes over your exact issue in the first video. Check it out. EDIT: the video is for windows so it does work even though there are a lot of windows haters. Im a beginner, too, and at some point I want to switch to Linux VM or whatever everyone suggests, but as a beginner, I think its better to actually start making something with the environment you have. Then you can transition environments later once you actually have lots of code or a serious project. Maybe I am totally wrong. Thats just my opinion. But anyway - I am up and running with Django just fine on my windows 7 machine and I don't see why you cant, too. The video will hopefully help. Good luck! 
Should just be able to 'jsonify' your dict and you should get the result you're looking for. 
[Maybe this will help.](https://www.reddit.com/user/patrickmoffitt/comments/6gfiu6/web_developers_can_build_desktop_applications_for/)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Short answer: it's really complicated. You have to *make* it without those harmonics, having them in there at all in your digital representation will be represented as folding, which comes out as *lower* frequencies, so you can't just filter it out. There are ways of doing it with integration, and with additive synthesis among others. It's an interesting field, but deep! The rabbit hole goes waaay down in digital audio!
If you rerun the Python installer, it should have an option to modify your path variable. Make sure to choose that. You can also set path manually. I second the Linux subsystem. Windows 10 has an option to turn it on. After that you can launch a full Linux environment from a normal Windows command prompt. Personally, I'm migrating towards this as that subsystem improves. It's really nice (for me at least) to have the ability to access Linux tooling from within a Windows environment. 
No context. What is the image about? Why do I need Docker for that?
Noted with thanks.
Omg thank you!
&gt; If you are about to ask a question, please consider r/learnpython or the learn python discord. 
Macs come with Python 2.7 installed. Do you mean how do you update that so you're using Python 3? Basically, you don't. You download Python 3 and run it as its own thing - you can do this alongside the installed 2.7 without any trouble. Further along the line you may want to look into virtual environments, and also Homebrew.
I would like something like IntelliTest, but something that really works https://docs.microsoft.com/en-us/visualstudio/test/intellitest-manual/introduction https://docs.microsoft.com/en-us/visualstudio/test/intellitest-manual/getting-started
Take a more advanced class. Learn how to talk to a database (SQLite is a good starter). Learn how to run a server (Webpy, Flask are easy to start with). Make something with a GUI (tkinter is simple but easy to use).
I never really took basic courses. So as I learned more from Google, I started making small games. One of the most recent game I made is a small, text-based monster fighting game with loot like weapons and armor. It uses many of those basic features, like loops, classes, printing text, inputs, etc. I would strongly recommend making something you like or enjoy, like games for me, and slowly trying to make more advanced versions over time.
It was true for v2.3 according to the elasticsearch team and their resilience issues list still has lots of ongoing work in it. If elasticsearch cant guarantee resilience (and they explicitly don't), that is a factor that needs to be taken into account when picking a storage Solution. 
The point of both mongodb and elasticsearch is the cluster Shard your data as much as you need (they are reporting huge volumes of real time sortof data being collected without problems) PS: sorry for responding here, I can't save the direct response
At work I created my own self extracting installer which has two payloads: A tar.gz of the package directory and a [constructor](https://www.continuum.io/blog/developer-blog/introducing-constructor) installer with all the dependencies. It extracts the tar.gz into a directory and then installs the constructor installer into that directory. The constructor installer contains relative dynamically linked dependencies, which come from conda and conda-forge. For example I included Pandas, Java, and Perl in my dependencies as well as many other python packages. You might want to go this route if you want a portable-directory which has multiple entry points. I originally used PyInstaller however all the packages will need to be bundled for each executable, so the directory size increases every time you add an entry point. Another downside to Pyinstaller is adding non Python dependencies (like Java) is more complicated.
See http://www.ni.com/white-paper/3000/en/ Basically if you generate a frequency above the nyquist rate (half the sample rate) it will fold back around the nyquist frequency axis. For example if you are generating sound at 48 kHz, your nyquist rate will be 24 kHz. If you have a 1 kHz square wave, it has harmonics at all the odd multiples of its frequency (3 kHz, 5 kHz, etc). Once you reach the harmonic at 25 kHz this gets reflected back to another 23 kHz harmonic, causing distortion. Similarly the harmonic at 27 kHz will get reflected back at 21 kHz. etc. There's ways to mitigate this. One popular technique from the past was to use wavetables to approximate the waveforms. A wavetable is basically a single cycle of a waveform that can be played back at various frequencies. You can construct the wavetable for a square wave by summing the harmonic series of odd harmonics up until the nyquist rate of the highest frequency it will be played at. For example if you were making a wavetable suitable for square waves up to 1 kHz you would use the first 12 harmonics. There's a good example on Wikipedia: https://en.wikipedia.org/wiki/File:Additive_220Hz_Square_Wave.wav If you listen as harmonics are added to the sine wave you'll hear it sound more and more like a square wave. Until about the 12th or 13th step where it starts to become buzzy and distorted. That's where the aliasing begins. 
&gt; What is it? Neither the linked page nor the homepage explain what this library is and why I might use it. Django-hotsauce (DH) is a Python microframework on top of Django and WSGI. Built for hackers in mind. DH is designed for accessing Django using an alternative Model-View-Controller API. DH is largely influenced by Non-SQL databases, including Durus and ZODB. DH is production ready and licensed under Apache2 license. I hope this helps :) 
Neat. I wrote a pelican plugin a while back to transform my notebooks into pelican posts. https://github.com/justanr/ipynb_reader I think it needs an upgrade to work with 5/6 but I still use it. There are issues with html embedded in the notebook, but I never use that so I don't worry about it. Might be with checking out instead of writing your own blog platform
Is HL7 a tree-based format like XML where nodes can have multiple attributes/tags with the same name/type? (like a single message having multiple copies of dose with different unique values). If so, there is a fundamental problem with directly converting it to a tabular spreadsheet format using easy methods like row/message dictionaries. What I did for a similar situation with XML product feeds (XML files containing many products where each product could potentially have multiple values for any given tag) to Pandas was to: * loop through and figure out the maximum number of copies of a tag/attribute that any single product had (like "color 1", "color 2", "color 3") * create a named tuple element using those maximums * turn all the products into named tuples and stick them in a list * turn that list of named tuples into a pandas dataframe
No need to tell us that your website is about cum
Took me a while to get the joke haha
Yeah, those multiple "DG1"s and "PV1"s are the kinds of things that are harder to turn into tabular data formats. If you would like a copy of my xml-to-pandas code in case it's helpful as an example, send me a private message.
Try using PowerShell instead, it comes with Windows and it has resemblance to bash on Linux. I find it works a lot better than CMD. Also it sounds like you might not have your environment variables set correctly.
Thanks for this response - I was starting to question the whole point of learning python but this gave me a reason to keep pushing forward. 
For web scraping you should check out selenium as well as beautifulsoup. They beautifully abstract the requests library, taking care about requests/headers etc.
A quick google found a few python hl7 packages. Have you looked at those? Even if they don't do the job exactly the way you want, they might provide a good framework. [python-hl7](http://python-hl7.readthedocs.io/en/latest/)
There are a few different HL7 parsers on PyPI. You just need to find one that can get your data to a state it can be converted to a pandas data frame. https://pypi.python.org/pypi?%3Aaction=search&amp;term=Hl7&amp;submit=search
Yes I did look at it. but I tried couple times by loading my hl7 file, but no luck. They only have example with creating their own hl7 message then parsing 
Learning anything new has always been a matter of motivation for me. If I didn't have a project in mind when I started I never finished. That said, python is a fantastic automater. My suggestion, if you have the resources, is to setup a jupyter notebook server. Maybe use an old laptop or try to do it on a raspberry pi. Then you don't have to worry about the dev env and can just code. From there? Rss reader/feed scrapper, news aggregator, anything out of automate the boring stuff. 
I'm afraid I don't know much about encryption. I do however know what it's like to create something for the sheer pleasure and knowledge I end up gaining from it. And, sir, I do commend you for that :) Keep it up!
OK, I don't know anything about it but I took a look. It appears to parse the message passed into a Message object which contains Segments which contain fields (and stuff). The Message appears to be iterable. I'd write a function that looped through that, adding items to a dict of dicts (from the Segments and Fields). Return that dict, pass as argument to DataFrame.from_dict and Bob's your uncle. Maybe. I'd probably stab around at it in a jupyter notebook - quicker for hacking things up like this.
The whole channel is an SJW fest. 
Yes, looks like a decent approach. You could "dry-run" through your input data, just printing the segment type or whatever and pipe that to uniq. If there's anything in there that you don't handle you can take care of it.
Python is too slow. Yes you can be fast in python with cython/ numba/ cffi+C but there's no motivation for anyone to make a way to use python if you are then just going to use python to basically write C.
Really? I thought the point of nyquist was that it limits the frequency used to interpret the signal. Like, if you had (0, 255, 0, 255, 0, 255, ...) yes there's an infinite number of frequencies that could have been sampled to produce that, but assuming a frequency range of 0 to nyquist/2 (which an audio dac does) means that this will output nyquist/2. No? Are you saying you can't represent nyquist/2?
It's smaller, more powerful than JSON. It is also statically typed. Unlike JSON it was designated to be used for API.
I've added it to the list... It should be available now!
Scrapy is very useful and easy to start. I built a scrapper in just couple days with it. 
Uh.. maybe I mean Nyquist/2. Not sure whether the 2 is built in or not. Up to 22.5 kHz in practice.
To resolve 22kHz you have to sample at 44kHz. Otherwise (255, 255, 255, ...) would be a sine at the sampling frequency. But maybe nyquist is sampling_freq/2. College was a long time ago.
Thanks mate, that actually makes sense. Much appreciated.
WOW I'VE NEVER SEEN A TUTORIAL POSTED LIKE THIS BEFORE.
Yes. There are a number of ways you could do this in Python. I'm not that familiar with the Java world but I am sure Python can do anything that Java can do. Python has graphics in modules such as Tkinter (the one that I use) and there are a number of databases that you can use as well. 
That would be pretty cool! Infact, I'd been pondering to even build the HTML using CI once I do a git push.
Thanks :) 
Great write-up. I like how it mentioned both Beautiful Soup (which is an HTML parser) vs Scrapy (which is a framework that automates navigation in addition to parsing html). I also think it's key to have a good understanding of the requests library http://docs.python-requests.org/en/master/ in order be more automated in your server requests. 
&gt;I was just wondering if you can do almost anything in Python that I could do in Java? Yes, they are both Turing Complete. ;-) &gt;graphics I've never had the need, but there is [QtPy](https://pypi.python.org/pypi/QtPy/), [Tkinter](http://www.tutorialspoint.com/python/python_gui_programming.htm), and [many more](https://docs.python.org/2/faq/gui.html). &gt;creating software Uhmm... &gt;database Learn an ORM, like SQLAlchemy, and start with SQLite as your database. If you get a lot of users you can learn Postgrsql and plug it into the back end of the ORM. 
Thanks, I was just looking into Tkinter
The "many more" from above should be [https://docs.python.org/3/faq/index.html](https://docs.python.org/3/faq/index.html) as Python 2 hits EOL in 2020 so there's not much point learning it now.
Nice one. Can you suggest if is it possible to specify the buffer size while using the copyfile() function?
I would consider developing a Graphical User Interface (GUI) for a command line application you are using (or aware of). * One caveat is that you need to learn GUI programming along the way as well, which might be hard to begin with (but that's also why you should choose a simple program!). * Go for PyQt5 if you don't know which GUI toolkit to choose (if you are on linux). * You'll develop a goddamn real product at the end of it, which might be useful for you and for many others, and you'll be proud to look at nevertheless. * This is will also motivate you to continue and improve it even more, in comparison to developing a "text editor" as a mindless practise... 
Thank you!
&gt; So it is a MVC over a MVC? Um. I would say Django itself is too huge to fit as a single Controller... DH uses Cython to optimize user-defined controllers for speed.
Oh hey! Yeah, some of this library found its way into pyglet (such as the ADSR envelopes)
I understand, even though its been removed, can I still see the comments that has been made to this post?
2.7 :(
&gt; Investment banker turned software engineer love that: makes money from other people's work and then writes article about stealing content off websites and calls himself "engineer"...
Python isn't going away anytime soon. Go learn.
Haha yeah most guides are like that. I've come across sites that have data in a mixture of json and js script structs which make scraping a pain. Worst case scenario is when scraping incorrectly closed tags with bs4 on one XML parser fails but another passes (lxml, html5lib, etc)
Hmm, the problem is that I need a kind of flexibility that the notebook doesn't have. Obviously you could create markdown plugins and new cell types, but the notebook already has a front-end. It's going to be hard to edit notebooks if the stuff you see in the front-end is too different from the rendered blog. And maintaining a notebook extension and blog engine extension that have the same features is also hard.
Oh mines nothing advanced like yours lol. I just converted something the user enters into ascii, and added a different number to each value before converting it back into characters. 
It means that when you open your command line and type `python` a Python interpreter will open, as it will be in your `PATH` (which is there your OS looks when you type something like `calc`, `python`, `sed`, etc.)
Thank you for the quick reply. Let me see if I’ve got this right. Are you saying that if I click the box, I will be able to write Python codes using Command Prompt? Is there anything else I need to know before I install it?
I haven't read the article but do you really think scraping in general is equivalent to stealing? Genuine question
Thank you, JerMenKoO.
Why not just use PyQt directly? Sounds like you don't need the web/terminal components of Pyforms, adding a whole another abstraction layer might just not be worth it.
Just run 2to3 on it.
Who even upvotes these? Same guys who posts questions here I guess... I would much rather see these super basic guides posted in learnpython, and possibly some thorough ones in the sidebar, posting these here is just repetitive. What I really dislike about the article is: 1. Python 2.7, please all new posts and articles should certainly be using Python3.X, No reason to learn python2 for beginners either, if you know and understand python3, you can understand and translate python2. 2. He uses BS, when simply selecting two elements. It is much faster to use lxml with xpath and certainly not harder. 3. He stores to CSV and recommends MySQL if the dataset gets too big. I personally have never had use of storing to CSV, especially not stock data, you get that and crunch that in python. IMO he should recommend SQLITE3, super simple to use and can handle lots of data, especially since in this case it's just index data. Easy to set up and easy to move. 4. Why scrape for stock data? There are multiple APIs for free...
&gt; all new posts and articles should certainly be using Python3.X Maybe you should go to /r/python3.
I'll send you a PM. Thank you for ypur offering mate!
I was in the process of writing a comment like this myself and gave up, since I thought it may sound too salty. I think you're absolutely right. First of all, this tutorial is laden with buzzwords, without any understanding how they relate and what they mean. I doubt he is an actual software engineer, yet he calls himself this. He calls DRY a method. He uses words like "scalable", yet does not even talk about a scalable method (this is homemade webscraping, most likely on a single local machine of a single static data source). He has a headline called "Excel CSV". He posted that tutorial to /r/Python, not /r/learnpython or the likes. Last but not least this: &gt; You should see your python version is 2.7.x. Not that it matters for this tutorial anyway, since he could've just changed or left out those few snippets that are different between 2 and 3, but he kinda insists on Python 2; maybe because it comes pre-installed on his Mac?
Mostly it's just that Pyforms raises way too many red flags for me to feel comfortable with it. It seems to mostly be a two man shop, maintained by people who think a single dot is a good commit message, their 1.0 version is still on PyQt4 when Qt 5 (and PyQt5) has been out for years, and they're in the middle of a breaking 2.0 rewrite. Also, the API they have looks extremely simplistic, so you're probably going to hit the ceiling very quickly and end up rewriting anyway. 
Excellent, thanks. This is the kind of insight I was looking for.
Just take all of this with a ~~grain~~ ~~chunk~~ massive pile of salt. I've never actually used it, I just glanced at the docs and looked up their Github page. It's entirely possible that it's actually a good option and I'm horribly wrong.
What were you typing to install autopep8, for example? It looks like you just need put sudo at the beginning of the command. sudo pip install PackageName sudo apt-get install PackageName I'm pretty new to Linux, so I might not be the best person, but I spent a bunch of time messing around with WSL on Windows 10 and trying to make it work with PyCharm.
I only need to care about my own code and i have no interest in Julia... unless she's pale, freckled and a redhead. :)
I was fighting with this a few days ago in work. We found out that VScode in windows doesn't seem to play nice with the linux binaries. What I would recommend doing is creating a windows virtualenv with all your packages installed solely for autocompletion, linting, and pep8. That's what we ended up doing and it works pretty well. 
import tensorflow as tf import os os.environ['TF_CPP_MIN_LOG_LEVEL']='2' #importing the mnist data from website from tensorflow.examples.tutorials.mnist import input_data mnist=input_data.read_data_sets("MNIST_data/",one_hot=True) #defining a layer that does (y=Wx+b) def neural_network_layers(data): layer_1={'weights':tf.Variable(tf.zeros([784,10])),'basics':tf.Variable(tf.zeros([10]))} value1=tf.add(tf.matmul(data,layer_1['weights']),layer_1['basics']) return(value1) #initializing the variables W=tf.Variable(tf.zeros([784,10])) b=tf.Variable(tf.zeros([10])) x=tf.placeholder(tf.float32,[None,784]) y_=tf.placeholder(tf.float32,[None,10]) '''this is an inbuilt function that does the same thhing as the neural_network_layer function, this inbuilt softmax function has an accuracy about 91%.''' #y = tf.nn.softmax(tf.matmul(x, W) + b) '''this enables the user defined function of creating graph which has the same accuracy as the innbuilt softmax function''' y=neural_network_layers(x) loss=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=y,labels=y_)) optimize=tf.train.GradientDescentOptimizer(0.5).minimize(loss) sess=tf.Session() init=tf.global_variables_initializer() sess.run(init) for _ in range(1500): batch_xs, batch_ys = mnist.train.next_batch(1500) a,s=sess.run([optimize,loss], feed_dict={x: batch_xs, y_: batch_ys}) print('step',_,'loss',s) prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1)) accuracy=tf.reduce_mean(tf.cast(prediction,tf.float32)) accuracy=sess.run([accuracy], feed_dict={x: mnist.test.images, y_: mnist.test.labels}) print('accuracy:',accuracy) 
Pretty basic stuff. Would probably be more appropriate for r/learnpython. Actually feels kind of like click bait. There are probably 100 beautiful soup tutorials out there at this point. Also why the fuck are you still using python 2 in the year of our lord 2017
Fellow Mainframe COBOL application programmer. We will have jobs for life even if we are dinosaurs. 
Thanks for the suggestions but something more sinister is at play as Kmatthewc suggests.
Yes. I don't see what is wrong with not getting sarcasm all the time. It also doesn't make you a "retard" or anything, some people are just not good at spotting sarcasm in general and it is not always as obvious as in this case.
Yup no problem. You'll have to edit your workspace settings to direct your python executable and site packages to be in the virtualenv directory.
It's probably depends on what these buttons really are. You're probably just scraping those website for the moment, but an easy way to do what you want would be to automate your browser with selenium. If the action launched by these buttons is just a request to a website, you could also find a way to emulate that requst
&gt; It was a joke man Nice one... ;)
Ok.
Maybe [gecode](http://www.gecode.org/) with [python wrappers](https://pypi.python.org/pypi/gecode-python) iff the problem is as complex as you make out. If not, just search for "python constraints".
I think you just popped my CSP cherry. If I'm reading this right it might just be perfect. Will let you know.
Does this require admin privileges or is this some user specific PATH?
Website scraping is more than just parsing HTML.
How are you managing your notebooks in git? I have been doing work lately on writing jupyter plugins for the client and server and need to figure out the best way to manage the notebooks in git.
Would be pretty cool to write a custom client side plugin that managed the publishing and deployment process.
Do you want to describe it a little more here - people are likely to find it a little suspicious otherwise. Still, PM me if you want help :)
The state is maintained per instance, not on the class. The 'state' attribute on the class is just the initial state of new instances, although I do agree that it's difficult to glean from the examples. A 'state' attribute, along with a few others, are automatically applied to instances upon its first transition. class Switch(object): state = 'off' @decorstate.transition('off', 'on') def on(self, *args, **kwargs): print('You turned me on!') @decorstate.transition('on', 'off') def off(self, *args, **kwargs): print('You turned me off!') &gt;&gt;&gt; s1 = Switch() &gt;&gt;&gt; s2 = Switch() &gt;&gt;&gt; s1.on() You turned me on! 'on' &gt;&gt;&gt;s1.state 'on' &gt;&gt;&gt;s2.state 'off' 
Nearly all statistical programming jobs/companies are becoming distributed to handle huge amounts of data, so you need to become familiar with distributed frameworks and languages. Hadoop, MapReduce, Spark (Scala or pyspark), hive, etc. Basically how to handle data when it exceeds memory limits. There are some great intro courses on udacity.com on Hadoop and MapReduce, and just general data science/analysis courses. Other than that, just make some test projects. I work with social media/web data, which is just collecting data, transforming it in some way, then writing output for visualizations or whatever BI tool. that'd be an easy pipeline for you to make and practice with Edit: But in terms of books, I'd recommend the O'Reilly series for data science. I'm not really a book learner but they were a good introduction to get my feet wet 
PyCharm. 
Visual Studio Code
10/10 Photoshop skillz
Pycharm, undoubtedly. Great plugins, and all the features from the full jet brains ecosystem. Works well with venv and remote interpreters.
It is probably a bad idea to try to get stdin to work like that. You could change `sys.stdin`, but that's pretty hacky already, and then you've still got the challenge of how to get the prompt that gets passed to `input()` which you probably would want. Why don't you just make those inputs into popup windows in your code? Python comes with `tkinter.simpledialog` which makes this quite easy. `tkinter.simpledialog.askstring(title, prompt)` is your input function. You need to have a tkinter parent window, but if you don't you can create an invisible one with `tkinter.Tk().withdraw()`. You can also make a little helper function for this import tkinter from tkinter import simpledialog def tk_input(prompt="", *, title="TK input: {prompt}"): # Create an invisible parent window if one doesn't exist if not tkinter._default_root: tkinter.Tk().withdraw() response = simpledialog.askstring(title.format(prompt=prompt), prompt) # Raise exception on cancellation, acts more like input() if response is None: raise EOFError("cancel") return response **EDIT:** forgot to make `tk_input` actually return the response, whoops. --- You can use `tk_input()` a lot like you would use `input()`: `tk_input("Prompt")` The window title can also be customized: `tk_input("Prompt", title="Title")` You could even replace the default input function with it if you want: import builtins builtins.input = tk_input I don't recommend that, but it is a way you could easily switch between a GUI/CLI interface for a simple input-based program.
Ok thank you, I'd prefer not to switch os even temporarily as I am building a new pc soon, so I will do it on that is necessary.
Spyder
The valid combinations are naturally indexed by lists of length 50, with each element in the range 0 through 4, the basket number. We say that a fruit in no basket is in basket zero. Build out a list of these 50 element lists by going one basket at a time. Use combinatorics to check that you have the right number of combinations.
really? you need to get out more...., really....
PyCharm
i prefer to use notepad, its clearly the best one out there... 
Honestly, in my opinion, don't use an IDE. While an IDE may sound like a good idea up front, they promote lazy programming habits, and, in some cases, make it hard to program outside of IDE helpers. If you want to REALLY know what is going on with your code, don't use auto complete, don't auto format your code. Make yourself truly learn the language. It will carry a lot more value in the long run.
Does python have enums? Seems like this is very context specific. I've used string constants similar to the title for varying uses. Enums may have helped in some, but not all.
My gut says dictionary, but yes, context
Alright, in a general matter then, when would use enums rather than string constants ? Any counter example?
This isn't homework or learning, but rather having trouble with code, so i wasn't sure where to post :) please be nice if i made a mistake
I edited the first post
How does that have anything to do with you telling someone to use a web automation kit instead of a DOM parsing tool? Again, they do two different things and can be used together to build a scraper. Suggesting one over the other is nonsensical. 
I think it depends on whether or not something is private. In general, I set tokens/keys/general private information as environment variables and read it in as a string constant. A great example of when to use an enum (or 'dictionary' in Python) is for config management.
Could you elaborate? When did it help, when did it not? I'm trying to round up the cases where I should/shouldn't go for Enums
That's a wonderful way to think around the problem. If I can traverse the list efficiently I can perform the constraint check while building. This looks like a much better approach, thank you. :) 
&gt; Tools to support converting a Python project into a standalone native application. This does look useful, thanks.
Thank you. Will take a look at the book.
I've been working on a neural net in Theano. The next thing I'm working on adding to the code is convolutional layers. Even with just small feedforward nets (5 hidden layers of 75 ReLU), I've gotten in the 95-96% range on the MNIST test set, and 97% with an ensemble of them.
beaucoups thanks! you are the man sentdex. love your stuff. working my way through your youtube series on nltk now and it is excellent
&gt; Suggesting one over the other is nonsensical. It makes perfect sense if you've done any actual scraping.
Off hand, status codes would be my number one use case - assuming enums could be used informatively. I'm sure there are better things than what I've done in the past, but we ended up pairing numbers with strings to print the actual status item. I could've code genned it to reduce duplication, but then refactoring breaks.
Neat. I don't do a whole lot of active python dev these days. Hopefully I can do a pure python 3 project next time I need something bigger.
 Hands-On Machine Learning with Scikit-Learn and TensorFlow Concepts, Tools, and Techniques to Build Intelligent Systems By Aurélien Géron http://shop.oreilly.com/product/0636920052289.do 
BS works on 3.5 without issues :) 
You'll get a lot more help at /r/learnpython. 
Much of ISLR has been implemented in Python in [this repo](https://github.com/JWarmenhoven/ISLR-python). Could be useful as a reference.
Hopefully have a good understanding of the necessary math etc from my undergrad education but brushing up on the fundamentals is probably a good idea either way. Stats make the world go round
The most common interpreter is written in C, but it doesn't convert your python into c it converts it into python byte code and executes based on those byte codes. 
Yeah definitely! If you just want to do some pet projects though, I'd suggest trying some open source code/tutorials before going deep into the theory fundamentals. The math can get pretty overwhelming, and can turn people away. Check out Keras. It's a very high level framework for deep learning. You can literally create a neural net or conv net in 10/15 lines of code.
I think this comes down to personal choice, but I like the way you are doing it now. If it grows any larger you might want to think about loading values from a CSV. One other thing that may help make the syntax as pretty as a dict: https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations If you add a \_\_str__ method to that class that returned the value you could replace print("I'm located in {}".format(Alpha2.United_States_Of_America.value)) with print("I'm located in {}".format(Alpha2.United_States_Of_America))
How you check if it's valid, how fast it needs to be and how big N is all influence the solution. For 50 elements, it probably doesnt matter.
Wow, I haven't played a mud in a decade. Let me know if you find any! 
Great !
What did it break?
I know what MUDS are but you might be looking for /r/roguelikes, [Rogue Basin](http://www.roguebasin.com/index.php?title=Python), [Complete Roguelike Tutorial, using python+libtcod](http://www.roguebasin.com/index.php?title=Complete_Roguelike_Tutorial,_using_python%2Blibtcod), etc. 
do you have plans for any tutorials on pytorch?
Thanks so much for the comment....but holy crap I don't know what any of that means lol I guess I have a lot of learning to do
How about making a website like https://www.youtube.com/ (made with Python)
Well.. it's basically "whatever the company needs". maybe it needs a backend for a new website. Or maybe it needs a way to manage batch jobs that convert video between different formats. Or maybe they want to poll one system for change, and replicate changes that are found into a separate system via their APIs. You can google "notable python projects" for some more ideas. The real answer here is that it doesn't matter as much as you think. You practice writing programs to use a variety of tools to print crap into your terminal, not because printing crap into your terminal is important, but because it's easy and irrelevant, which allows you to focus on the logical underpinnings you're meant to be focusing on. If you had to write an entire web project every time you wanted to learn a new loop structure or sorting algorithm, you'd never get anything done. You do these things because they build the effortless intuition you'll need to do real work later. It's the same reason athletes (other than power lifters) lift weights, go for runs far longer than the distance they'll cover in a single match, and train in other ways that aren't directly related to their actual sport. 
Thank you, I will check it out
Pycharm uses python to run your scripts via debugger and runtime environments. It needs to know to which python executable to feed your .py scripts when it runs them. That's the interpreter.
Learn the language and learn how to do things in it in an idiomatic way (i.e. least amount of effort). Then, in the "real world", you will be faced with problems and when you are, look for libraries that allow you to work with those problems. There is no "real world ready" stage of your programming ability.
&gt; itll be more than hello world What do you think real world companies do? (Non sarcastic). Now look up how those things are done in python. 
Instagram, they recently gave a talk at PyCon 2017. Most of their stack is in Python, with a couple bits in Cython. https://www.youtube.com/watch?v=66XoCk79kjM
You could use it to write the back end of a website, or use it to make a robot do things. And everything in-between. It's just one of many programming languages that can achieve the same kinds of goals. I've been using it at my current job project for about 6 months now, and for 3 years before that I was mostly using C#. Demand for different languages fluctuate. Right now as long as you're learning to program in *some* language that's all that matters. Then you can take what you learn and apply it to whatever language you need to get the job done in the real world.
I started mine for the sumner semester five weeks ago. Been a learning experience for sure. 
You're in one! Reddit is written primarily in python. I've used it for data analysis, plotting, modelling processes, web scraping, creating a web app, munging XML files, interacting with spreadsheets, doing computer vision stuff, running a robot, automating emails. It's a fantastic general-purpose language with libraries for practically every purpose. It's also a great glue language for chaining other stuff together.
A great way to build confidence is by tackling practice problems and then comparing your approach to the given solution/read stack exchange answers to see if there is a more optimial way to approach the problem. Give yourself plenty of time (up to a few hours) to bang your head against the keyboard and learn from those mistakes. 
Sure is! Come on back let me get you into it!
This was news to me also. Java introduced me to enums, I had no idea they had made their way into pythom!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You really have to learn the basics before you can actually start solving real problems. With Python it should take a lot less time to learn the basics compared to other languages, so just put it some more time and you will be there eventually!
~~American~~ English informal term of endearment. Refers to the people that are the closest to you, derived from the word 'family'.
Another datapoint: The company I work for makes an Open Source project called [Stacki](https://github.com/StackIQ/stacki), which is 95% written in Python. It's used to provision 100's-1000's of Linux servers (plus application stacks) in parallel, without bottlenecking.
No, go away Christina. 
That's a bit like asking "What would you build with a hammer?" The answer is whatever you want or need to build. You could probably do it in javascript, C#, PHP, or with an old casio calculator &amp; paper &amp; pen. If you want to learn better python, pick more complicated problems to solve and focus on learning new ways to do things. If you want to learn in a way that'll be better for your intended field/job, then pick a field/job and work on problems in that area. If you want to get into games, start making toy games. If you want to use machine learning with big data, then start learning those libraries. Nothing is more hire-able than a person that has interesting projects on their github. Especially ones that are impressive and show a desire to learn. Doesn't matter if it's in the right field, you can learn that later.
It's widely used in devops, for any type of scripts. Want you remove file mentioned in sqlite db or make query to some URL, it's easy to do using Python libs. One of devops tools written with Python is Ansible (https://www.ansible.com) as an example.
In general, you're getting great advice here -- just focus on learning the basics so you develop that "effortless intuition" (great phrase). But if you just want to hop in and see a _few_ things in action, you might try /u/alsweigart's [book](https://automatetheboringstuff.com/), "Automate the Boring Stuff with Python." It's got a lot of real-world examples of stuff you just might want to do, or your boss might ask you to do.
Alright, thanks 
typically people use a job queue like celery 
[removed]
(and many other programming languages)
&gt; I'm struggling to see how this is used in the real world for companies Is this your first programming language and, if not, do you ask the same question of other programming languages? As someone who works (broadly speaking) in data analysis, Python is far more immediately applicable than lower-level languages like C++ because it has a huge standard library and is so quick to write.
A great way to get into python is to try to automate some of your tasks that you do regularly - things like signing up for classes, sending yourself a text if it's going to rain, etc. Not only will you have learned the language, but you will have a project to show for it. If you don't know how to do something, someone else has had the same issue and there will be 100's of answers online, you just have to search for them.
as a low level example of real world applications thats perfect for people new to Python I can strongly recommend the book 'Automate the boring stuff with Python' every chapter is a hands n tutorial showing how to automate everyday computer related tasks with Python eg scraping data from websites, emailing people, organising files and so on. I wish Id had this book when Id first started too as its great to look at when you feel overwhelmed by the theory side.
In 'the real world', companies decide what stack does the best job at solving their problem. Because essentially all programming languages can, for the most part, solve the same problems. Python is chosen when it fits the criteria of the solution. Python is a well developed interpreted object oriented programming language with a large supporting community. Interpreted languages have faster development times as they are easy to debug and deploy, and due to the large adoption Python has lots of great 3rd party libraries. Being object oriented means it's powerful, and follows a modern programming paradigm. But it is inherently slower than its compiled cousins (c, c++,c#, java, go). Every single line of code in Python needs to be compiled (broken down to machine language) on the fly instead of that step already being taken care of in its entirety. So python is great for things such as web development, data science, back end scripting, or small jobs. Because these tasks don't need tons of resources to compute, and in most cases require constant updates and are rapidly developed. Some examples for things it's not great for is developing a video game engine or high frequency trading. For example it is costly to compute the complex algorithms to generate just the fog in a video game, let alone everything else going on, so you want your code compiled beforehand to save resources. But on the flip side if there's a non fatal bug it can be very difficult to find as the code isn't interpreted line by line anymore, once you do find it creating the new build (compiling) takes a long time. Imagine having to wait a day just to see if you were right? And lastly, although you CAN write python code for high frequency trading, you will lose to the folks who wrote theirs in C.
I work for a top tech company and Python is literally everywhere. You can do absolutely anything with it save for programs that need to be screaming fast (which, to be fair, isn't rare). What don't you think can be done with Python? I mean let's break it down: the inputs and outputs of nearly all programs today are text files, web inputs, or database data (so basically just "data, in some form") and the outputs are the same. All you need is a Python library to wrap that input and output, and boom, you're up and running and doing whatever the hell sort of business logic that you want. 
Yeah, NetworkX is amazing! Although not as fast as graph-tool and other, the fact that NetworkX is a pure Python package really helps when using it as a dependency.
If the REST webserver process is waiting for the result anyway, what is the purpose of sending the work to another machine? You could just do all the work in the webserver process, and scale out the webservers instead. Queues are usually used for tasks that are done asynchronously (usually because they are long-running or might not be able to start immediately). That is, the web server would queue the task then tell the client that the task is queued. The client would then find out later the status of the task by either querying the webserver for the status (assuming the original task request returned a task ID), or by being informed directly via a bi-directional mechanism such as websockets/WAMP.
I've used Python at work to make cross platform desktop applications with the Kivy library, and website backends with Django (good for personal projects along with another web framework, Flask). As a machine learning researcher, I use ML libraries like Tensorflow, PyTorch, Scikit-learn to train and deploy models. And of course, python is great as a go-to scripting language for whenever I need something automated on my computer (sending emails/texts, performing bulk/custom file unzips, bulk/custom retagging mp3s or movies, etc. etc. etc.) I'm sure there are other great uses I'm missing. Of course, all these things can be done with other languages, but Python basically has a library for everything.
I come across Python in the weirdest places too. [Here it is ](https://github.com/v8/v8/tree/master/gypfiles) in the Google Chrome v8 javascript engine (that powers Node) written in C++. It uses a bunch of Python. It's basically become the standard used to run tests and build tools in projects that have nothing to do with Python.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [v8/v8/.../**gypfiles** (master → f850b32)](https://github.com/v8/v8/tree/f850b32d5c5d0391bcc166f4747ab35be75b6952/gypfiles) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply disej3s.)^.
In addition to what others have mentioned, there are many programs that can be extended with Python. When this is available, it makes it relatively easy to add extra, specific functionality to fit your situation. I believe that sometimes companies have a large enough set of in-house plugins and scripts (to create the exact workflow that they desire) that they employ developers to maintain the tools that other developers need. Theoretic examples include an automatic code formatter in an IDE or a map generator in a 3D modelling program for a game. Something I've personally made on this subject is a plugin for neovim (a text editor) to assist in creating annotations for a podcast. A very specific task was made much easier with a relatively simple plugin. Another thing Python is useful for is prototyping. Since it is not as difficult to write small, quick programs, you can test an algorithm in Python as a proof of concept before implementing it in another language that is more suitable for your case.
I am assuming that OP is the repo owner (?) I am looking at this: "While choosing 6 genre classes we are getting an accuracy of 85%" 1. what would you say would be a way to increase the pct? 2. how big was the training set? 3. and is this tool/app on-line right now, or would I have to "install" it entirely from the repo? thanks a lot!
Parsing files, interacting with networks, automating tasks, etc. There are many real-world uses of Python.
I'd chose AWS lambda
Automating emails? Can I have some examples where you used it? Was it in MS Outlook?
Wow I'm totally star struck. Great book, you got me into python. I'm still a noob though - any advice for pushing from being able to tinker and cobble together code to becoming a strong, confident and flexible python programmer like you?
**Security camera** I had a spare Raspberry Pi 2 Model B and a camera module for Raspberry Pi laying around. 1. I took a joint box, fitted the Raspberry Pi inside with a wifi-usb stick. Made holes for power cable. 2 Then I set up a Linux to boot up nicely when powered up with wifi connection connecting automatically to my wifi. 3. Then I took **Python** and programmed a small Python program to start up and record an image with desired fps value to a directory. 4. Then I made another simple Python program using PyGame to view the last recorded image in the folder (network folder). That is my take on Python, real world application (my first project).
Taking your question literally, I use Python (well technically Micropython) to control an ESP8266 microcontroller that drives an individually addressable LED strip.
How companies use Python? A few common examples: * Back-end services for web sites like reddit. These generally consist of services that process http requests and store their state in some type of database, like for example postgres. Individual requests might be things like "add this comment in the discussion for this post" or "please return the 30 most popular posts in this subreddit. * Ad hoc data crunching. Often done in Jupyter notebooks. Scenario "I have some data and would like to figure out some things about it." * System administration scripts. A sysadmin might get tired of having to perform the same repetitive task four times per week. Instead he can turn the task into a python script and schedule the task to run automatically. 
Planning a chapter on automating meetings, especially with clients?
\&gt; Python 2 ಠ_ಠ
It's Google, they love Python 2. It could be that they have so much of it that upgrading to 3 is non feasible. 
I use Python to pull data from remote systems and automatically place it in another remotely hosted SQL database. That real world enough?
We probably may. It is my first year though and I like it but I'm ever looking into another possibilities
Nice! When writing your tests, try using [Hypothesis](https://hypothesis.readthedocs.io/en/latest/). The ideas is that instead of checking one example has the expected result, you check that all (hundreds) of results from random input each have some property. Except that Hypothesis is strictly better than random data, because it will report a *minimal* counterexample.
Check out [Xarray](http://xarray.pydata.org) for raster data - it just released an update with `open_rasterio` to, well, open anything via rasterio. The real advantage is that the data model is amazing, generalising the magic of pandas-like indexing to n-dimensional arrays and collections of arrays with coordinates.
I will try to answer each question: 1. I did some literature survey and found that no classifier was able to get more than 65% for 10 genre classes (at least for the papers I refereed) For example, in the SVM with polynomial kernel worked well for most genres except blues and rock. This could have been due to the fact that many other genres are derived from blues. And Rock is most confused with pop. If the number of classes are less we get better accuracy. 2 classes 99% , 4 classes 92% , 5 classes 88% , 6 class 85% , 9 classes 70%, 10 classes 65%. To get more accuracy we should try adding more features. 2. The training set from GATZAN dataset. Total 1000 songs, 100 from each genre. 3. This repo contains the app and the package. You can just use the mysvm package to get this working. https://github.com/indrajithi/mgc-python Could you please ask this question on reddit so that others can also see the answer. 
Google. I don't know how true it is now, but I know their search algorithm used to use Python, if it doesn't now.
Look for the Python study group and ask for an invite to the slack chat! They work together on projects all the time whether it's their monthly data projects or a kaggle competition team.
Selenium
You could find some python project you really like on git(lab/hub...) and try to make pull requests to fix bugs, add new features, improve the tests or the documentation. It will be really good for you to learn from production ready python code, and really good for the community too ! :)
https://wiki.python.org/moin/Python2orPython3 &gt;Short version: Python 2.x is legacy, Python 3.x is the present and future of the language If you're not familiar with the term "legacy" &gt;legacy /ˈlɛɡəsi/ &gt;1. denoting or relating to software or hardware that has been superseded but is difficult to replace because of its wide use. &gt;2. being a previous or outdated computer system 
Three years in myself. On the side I practice and learn the modern languages but COBOL pays the bills. 
Thanks!
It would help if you posted the error you get. Just looking at the code, your for statement looks like it should say: for x in len(numbers): Hope this helps. 
Love this. I too wrote a script that prints configs for the purpose of looking like I'm doing something.
&gt; Just understand that no language interfaces directly with the world. Libraries do. I've got nothing to add, other than this is a fantastic way of looking at programming in general. Case in point, I recently worked on a task for an interview where I had to process a feed using a specific protocol. Half an hour was spent writing most of the code around it, and the remaining hours I spent was learning how to use the library to turn that data into the model I required.
Sometimes I have to write python scripts for automation in AWS. For example I wrote a script to add bucket triggers to a bucket that gets created outside the cloudformation template.
I notice several things that are wrong with your code : 1. It's posted on /r/python instead of /r/learnpython. 2. It's not indented by 4 spaces and therefore reddit messes up the formatting. 3. The function doesn't take any arguments, but it ought to have numbers as an argument. 4. It attempts to use x as an index of the list numbers, even though x is an element of that list and may not be a valid index. 5. The function prints the result instead of returning it, making it very inflexible. Instead, print the return value after calling the function. 
Like learning anything programming language, you do the examples to learn the vocabulary but using it is basically the act of identifying a problem you're having or a thing you would like to have and then solve it using the language. It's hard to program with no end goal.
that's a very detailed answer -- thank you again. just a "wild" question so feel free to guess: let's say that the dataset was 30 genres and 5000 songs in each genre -- what would be your expectation in regards to accuracy? and, bonus round :) would you expect that audio bit rate would have much impact on algo's learning -- e.g. feeding it 128kbps mp3 vs. wav? 
 Like anglicizing said, you should probably have your function take in the numbers variable. Oh, silly me. This code does not even call the function. Add "sum_of_multiplies (numbers)" to the bottom of your code.
If he's automating his replies he's a hell of a brave guy/girl! I barely trust myself to send them!
Thank you for your great job in getting people started with Python. You are a true hero of the comnunity.
WxPython has way more built in widgets than Tkinter. It also looks native on all platforms while Tkinter doesn't although Tkinter has gotten a bit better looking with its ttk widgets. When I originally started using wxPython it was because I was rewriting applications that were made using VBA on top of MS Office. The widgets in wxPython were much closer than Tkinter.
Maybe they should develop a python2-&gt;python3 migration tool... 
This would error because the **len** of *numbers* is an int, which isn't iterable. If you removed that it would work, but it wouldn't give you the result you want, because it would just print every number in numbers divisible by both 3 and 5. What you want is this: def sum_of_multiples(numbers): total = 0 for x in numbers: if x % 3 == 0 or x % 5 == 0: total += x return total numbers = list(range(1001)) print(sum_of_multiples(numbers)) It's not clear from what you wrote earlier that you were ever actually *calling* the function, of course it doesn't print if it's never invoked. But even if it is invoked it's pretty hard to sum anything if you reset the running total with each new number.
I've got a 20 year career writing software and every job I've been at, I've used Python. Python is a tool. Software development isn't a "one and done" type of field. You don't learn a single tool and then you're done learning. If anything, software changes so rapidly that you're never going to have the time to learn everything, so you must specialize in something. Python is a good "something" right now. The general domains that I've used python in are: flight controls software, infotainment systems, locomotive systems, biometrics, big data, data science, distributed computing, network monitoring, web interface development, and video game development to name a few. Warts that python has are all generally related to the level of control you have with your hardware: 1. Concurrent, Parallel computing -- this means that it's difficult for python to readily utilize your CPU's multiple cores, and that can make it slow. 2. Memory management - Python comes with it's own garbage collection and memory management, but it doesn't provide for a low level interface for you to be surgical about how you setup things. 3. No JIT - There is an experimental JIT (pypy) that is really quite good, but it's not part of the standard reference python (cPython) and it's not feature complete with the latest version of Python (which has admittedly evolved rapidly - see 4). 4. Python 3 - I think the more recent additions to the language will become warts themselves. Despite their power and fulfillment of a general problem, they weren't teased out over time and have been added with less care than in the past. I think ultimately, this will show up as an issue of not having been designed correctly and by that point there won't be a way to correct. 5. Mobile platform support - you won't be writing python code to run on an iphone (Kivy is available, but it's just not a good comparison to something like swift or objective-c). There are solutions for each of these and they're not the only warts, but they're the ones you'll probably experience. Most of the solutions presented involve swapping to a new language (cython or c/c++). As a consequence, when you hit performance issues with Python, you'll end up moving to a new language (though there are quite a few really great 3rd party libraries that will give you longer legs to run with). Most at-scale issues with Python are a result of design choices within Python (it's an interpreted language and dynamically typed). But most of the time, it's a non issue. Python is really fantastic if you can use c-extension libraries and the python code is primarily orchestration of I/O bound problems.
This comment is 100% accurate. Al's Udemy course helped make me look like a hoss-a-nova in the workplace. My company uses Excel for everything. Everything. After Al's course and some self study I could manipulated our Excel sheets with Python like that chick played by Natalie Portman in the 1990s movie Hackers. You know, where they need to delete the garbage file In the virtual city. I mean, we are talking Jan Micheal Vincent, 16 quadrant level Excel manips all over those spreadsheets. Totally made my work cred spike.
I work in embedded software, and though Python isn't suitable to run on embedded platforms, it is used frequently for the automated hardware-in-the-loop testing systems.
noooooooooo :)) great. thanks a lot! this automated genre classification has been a "thorn" in my mind for a long time and your answer puts an end to it.
As others have suggested, look at NetworkX for writing simpler code. If you need more performance, simply install PyPy and run your scripts with that instead to do the data analysis, it's much faster than the standard CPython interpreter.
It's English, not American, from London.
Added a web dashboard to my pet project: https://github.com/madflojo/automatron/tree/develop
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [madflojo/automatron/.../**develop** (develop → 2a33a2f)](https://github.com/madflojo/automatron/tree/develop) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply diso7ne.)^.
No problem. Something you'll find in fields like this is that you *never* actually "know how" to do anything substantial before you do it. Every project is unique and different enough that you're always going to be figuring stuff out. Generally you always spend more time thinking than typing. If you already know how to do it, it's because you've already *done* it, so just use the work you've already done instead of reinventing the wheel, etc... Also, who wants to solve the exact same problem over and over again. That's boring. The idea is to get better at understanding how you can break a real-world problem into the kinds of problems you know how (or can learn how) to solve. So take the work I do. I'm primarily a network engineer, so I work with IP addresses a lot. So understanding and keeping track of IP addresses is a thing I need to do all the time. But there's a bunch of different ways to do that, and the answer to which way is best depends entirely on the problem I'm trying to solve. Sometimes, I just need to keep track of whether an address has been seen before, so I'll just store it as a string in a set. And maybe I need to make sure the strings I'm storing don't include whitespace and represent valid addresses... and maybe I don't. Other times, I'll need to be able to do things like make sure a given address isn't just a valid IPv4 address... I'll need to make sure it is (or isn't) a member of a particular IPv4 network. So for that, storing strings is probably not the right idea so I'd use the `ipaddress` module (which makes it easy to answer that kind of question). And maybe I'd need to store metadata about the networks... so instead of a set, I'd use a dictionary with the networks as keys, etc... See, I've done several of these things before, so you could say I "know how to do them". But I've also *not* done the last example before. So I don't *know how* to do it, exactly. But I know how to use dictionaries. And I know how to use the `ipaddress` module. And I even know of at least one problem I'd have to think my way through (what to do if an address matches more than one network). So even though I don't "know how to do it", I know I could figure it out in relatively short order if I needed to. 
Not the author. The biggest difference between hacking scripts and really producing large programs is, in my opinion, definition and purpose. Scripts are awesome for getting something going quickly. It takes significant time and effort to comment and document code at the outset, but it makes it much easier to interface with your code later. Also, I find that there's a meta-level to really good programs. Abstracting what you are trying to do to a level where you're building a tool, rather than actual executable code is a big step. You start to write code for other people to use, rather than your own personal use. Think about it this way: let's say you need to read a CSV file. You can hack a script to do it pretty easily. A meta-level above would be to write functions to repeatedly read and parse lines. 2 meta level is to create a class you can import, containing your functions. Now you've added flexibility to your functions. The next level of meta takes you to packages that might contain, say, your class for csv files, but also an output formatter and a processing class that does what you need. At this stage, you've created a tool for future use.
See the library refernce ;) https://docs.python.org/3/library/index.html But in reality with most modern languages the possibilities are endless. I've used python for web applications with flask and bottle for work. I've used it for kickstart scripting for servers. I've used it to write backup scripts. Soooo many things.
I refer everyone that asks me about learning python to your site. You made a great resource! Thank you! 
That's great! The phrase I've always used when I see people wasting their lives on stuff like this is "you see... we have these things that are really excellent at performing repetitive tasks quickly and reliably, and they're called 'computers'!" 
A long time ago I did something similar.. I made a terminal with green text and just `echo`d the contents of 'explorer.exe'. Made it a lot easier to read whatever I needed to on the other monitor without as many disapproving looks about me "not doing anything". The few times someone asked what it was, I'd just say something like "oh, this thing is just processing something... it takes forever"
People seem to recommend Cellery out of some obsession. It is not the end-all of tasks runners in Python though, and a bit of a hassle to maintain. Also, if you really do MS in CS then you should be able to ask yourself what you gain from your setup. As you described it you only add complexity and overhead and don't do anything for the *"requires a distributed system to increase the work flow"*. How does moving the all the work as one job to a single worker (and then waiting for it) increase throughput? At least break up the work into smaller parts and have multiple slaves work on pieces at same time so you'd actually gain something.
I use python and push pandas structures to R and SAS when those languages do something better than python. Python is my master language but I am flexible with what I actually do analysis with. Jupyter notebooks are amazing and the magics are super helpful. 
Everything. Literally everything. Even if it needs to be in C, wrap it in python.
No, Python 2 is still changing, including in backwards-incompatible ways (e.g. SSL certs verified by default as of 2.7.9). If you want a long-term stable release, use Python 1, that's what it's there for.
Lots of answers already here, but one I haven't seen yet is OpenStack. Historically NASA's baby (with help from RackSpace), it's Open Source cloud computing, with tons of side-projects (DBaaS, log tools, SDN, etc). Lots of companies using or contributing to it, and while AWS may have the largest market share on cloud servers, OpenStack is pretty amazing in it's own right, and free if you're willing to run it yourself. What's more, you can absolutely contribute code right now, if you want projects. [Here's a list of confirmed and triaged bugs.](https://bugs.launchpad.net/openstack/+bugs?orderby=-importance&amp;search=Search&amp;field.status:list=CONFIRMED&amp;field.status:list=TRIAGED) [Here's the official wiki on how to get started with contributions \(code fixes, feature development, security testing, whatever\)](https://wiki.openstack.org/wiki/How_To_Contribute)
This is correct, as it was *made* with python, but a bit misleading. IIRC, while it was made with python, but most of the backend was replaced with Go for speed. That being said, it's worth noting that this was recently, and unless you have over a billion users on a massively computationally intensive application, I'm going to go out on a limb and say that python is a *great* choice for most web apps. 
Congrats and thanks to Doug Hellman, this is a great resource for all skill levels, from beginners to senior devs. Looking forward to picking up the new book.
Actually same for me, Cobol pays my bills. But I'm still learning other languages and doing some independent project to gain practice on them and add to my portfolio. 
&gt; loading values from a CSV. You probably don't want to use CSV for storing a list of countries. Too many have punctuation of various kinds in their official names. It would be easy to come up with a file that various CSV parsers would disagree how to parse.
Well I tend to use it for small scripts. So current workplace I have a small program which goes and gets weather and atmospheric data and puts it into a MSSQL database. I also have another one which reads data from an Excel spreadsheet on a network drive (using xlrd library) and again inserts into a DB. The crazy thing was I should have been able to use M$ technology to read an .xlsx but using SSIS gave me so many issues I gave up. Go figure! Python wins where M$ own technology fails :)
[removed]
I think your iso country code is a perfect example of when to use enums, but that your use is basically backwards. ISO has created a specification and created a limited number of country codes. What is enumerated are the ISO codes, not the various ways that people spell country names. The name of the enum should be the code, the value should be the "country." Furthermore you might want to have a tuple with multiple attributes as the value (do a mixin with a named tuple). Having someone lookup a country by doing `Alpha2.Aland_Islands` is completely and totally wrong (IMHO). 1. SPELLING!!!! It is Åland Islands, and it should be `Alpha2.Åland_Islands` 2. If you want someone to lookup into the enum with some value then they should do so with `Alpha2["Åland Islands"]` and that should return the `Alpha2.AX`instance. 3. If you do a good mixin you might be able to do some tricks whereby you upper-case and "asciify" country names in the `__eq__` method of the value instances and have `Alpha2["aland islands"]` work as well.
Automating? Unlikely, Improving? Definitely possible, and no need for python. Just write an on-point agenda that specifies what the purpose of the meeting is, what the points are going to be and stop anyone from opening off-topic discussions. You'll cut out 3/4 of the typical meeting cruft. 
Working on a Multi-Purpose IRC chat not for Twitch.tv. I embarked on this project as a fun, yet challenging, way to learn practical Python; while I am developing the bot, I also get to provide an application that actual users can interact with. So far it's been very rewarding.
London itself was the origin of the term "fam"? The only users? What do you mean exactly; why is it a London term of endearment? English maybe... though I'm inclined to believe it started as American slang it could very well have started elsewhere. One thing I'm relatively certain of though is you're conflating the origin of the language with the origin of terms used in it.
I believe selenium has a function to find all elements give a certain parameter (XPath, ID, class name, etc.). You could use that and save the href property in a list of links to be parsed with something else.
I'm not referring to the origins of the word, I'm talking about when it changed from being family, to mean anything from friend to the person being addressed. It might have spread to popular American lexicon in the past couple of years, but has been in use in the poorer parts of London, with the current meaning, since the 90s. 
https://github.com/reddit/reddit pylons and solr and amqp and other fun.
The Python VS Code extension, which is a blend of TypeScript with some Python components, needs contributors. Take a look at the source and start trying to solve some of the reported bugs.
Is fluency in Japanese a requirement?
Yeah, actually, I didn't know that existed haha, thank you! I just needed a quick solution for UIDs for a project that could be indexed sensibly. Looking at it though, it seems to break down the number of bytes allocated to each portion of the ID different, and seems to focus on the lexicographic stability for easy sorting. Ksuid is more for easy access to timestamps and datetimes, whether or not its intended for sorting. That said, they are very similar. 
True I wasn't going for pedantic though
I love your mockup! How did you make it? Anyway I've been working on [Tale](http://pythonhosted.org/tale/). It's a library to build mudlibs or interactive fiction (text adventures) with. Perhaps it's best to describe it as a cross-breed between LPMud, CircleMud/DikuMud, and Infocom™ Z-machine. As such it's really only suitable for text based interaction so it will be quite a lot of work to build an interface for it like your mockup, but I thought I might still mention it. As it is mostly a playground for me personally, it's still very much in development though (Recently I wrote here [the results](https://www.reddit.com/r/Python/comments/6d5haz/the_story_of_adding_type_hints_to_one_of_my/) of adding type hints to Tale, by the way.) 
Instagram runs on django. That's a big site. 
I hire for a big company in NYC. Wanna chat? Pm me.
[Apple's Calendar Server](https://www.calendarserver.org) is a great example of software written in Python.
...is a circular reference
Nested circular reference, because this comment on this post uses python, and so does the site as a whole.
Start making a clone to get the basics of the structure of a game going. It's really easy to get stuck when you don't know what to do. You could also ask in r/pygame for some info or ideas.
I know for sure Sberbank uses Django for some of its productions facing 1000000 of visitors daily (mostly promo sites). So saying python can't handle something is stupid. It can handle everything alright. My own experience shows that much before you hit the 10timesslowerthanC line you'll hit other problems which can be solved with python. And 10timesslowerthanC at that point can be fixed by *throws hardware*. Because C is a clusterfuck of debugging and security holes.
&gt; But if you're not convinced, Modbus TCP will allow you to send commands to industrial controllers that actuate 5000 psi valves. I'll use Python in HVAC systems with 1000s of sensors and actuators. One of the protocols I use in Modbus TCP.
What is your reason for stating it's cheaper to operate PHP or JS?
he will find more people that need help there compared to the sub.
Python module of the week got me my first job in Python; knowing about what Doug was writing helped me pass the interview. The community is better because of Doug's work, and I'm grateful PMotW exists!
Output: gitlab [^source](http://ideone.com/6u8VF2) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/Python/comments/6griz0/i_got_free_time_ill_help_you/dit7wz3%20Include%20your%20reason%20for%20reporting%20here.) 
This is a really good intermediate level tutorial. Walks you through things without being super hand-holdy. This is exactly what I've been looking for. Much apreciated
I wrote a blog article on the various types of text-based games: https://inventwithpython.com/blog/2013/06/05/text-adventure-vs-mud-vs-roguelike-vs-dwarf-fortress/ Also, the best website two decades ago was The Mud Connector, and they still seem to be around: http://www.mudconnect.com/
No, but I have written a bot to automate replies to people on reddit. THAT IS A JOKE. I AM NOT A BOT. HA HA HA. THAT IS WHAT HUMAN LAUGHTER SOUNDS LIKE.
Thanks! :)
Thanks! :)
:D
Whoa, thanks!
Thank you!
Ha ha, thanks!
r/totallynotrobots leaking :-)
No, thank you! I recommend your book to everyone. My boss even bought the paper copy, and my whole team now does some Python scripting to help with daily automation as I've been proselytizing to anyone who will listen about automating the boring stuff. I'm now leading my own intro to Python courses at work, but it all started with this book.
Splinter is a Selenium wrapper, which will generally make your life easier and your code more pythonic.
If you have the Pro version you can set up ssh server on the container, then Pycharm Pro can remotely manage and debug your project using the container. I used to do it that way, then I got lazy and now just use Anaconda on Windows...
Is there one or two types of PDFs you are working with on a consistent basis - or are there a lot of varieties with ever changing formats. PDFs are not made with extraction in mind. I am working on a pdf extraction to insert data into a database, and it’s a clusterfuck. If you have the luxury of a PDF with named objects it’s not that bad, I think.. but if you’re in a similar situation to me you have to basically use a library to extract an XML data dump, and use PyQuery and lxml to basically scrape out your data. It’s not that bad, but it’s time consuming to setup for all the different variants. I was thinking to use OpenCV and OCR to do data extraction but I decided to go this route. I can give a little more information to you if you would like. 
Any advantages on using Anaconda for example on windows ??
Best answer really, python will be around for long past 2020
That sounds a bit desperate.
Ok I gotcha :P Thanks for the information!
[I'm glad Arch Linux perfectly understands what "should" means](http://imgur.com/k6SEdpR): &gt; This word, or the adjective "RECOMMENDED", mean that there may exist valid reasons in particular circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.
Go on StackOverflow and help people there!
Maybe, but I'm not familiar with the inner workings of Google. They probably decided that they needed more power out of their existing servers than what Python could give them but at the same time the big rewrite is generally a bad idea. With that and the assumption that they're reasonably smart people in mind, a Python -&gt; Go compiler makes perfect sense. I can't say I'd ever use it, but then again I don't run one of the biggest video sites in the world.
&gt; But, I am not sure that type annotations really add more than a docstring already provides. Except they do. A small but compelling argument is something I found the other day: the IPython REPL will read annotations of variables in functions defined in the session and offer autocomplete off of them. Dependency injection frameworks can be devised off of them. If you document with sphinx, you can use them to provide type information in your documentation rather than the `:param name type:` syntax which is clunky to me and prone to becoming out of date with the actual code. And finally, mypy provides type guarantees for your Python code. Yes, it'll work with some doc string formats but why type something twice if you can type it once? The cons for me are that they're ugly and clutter up signatures but they're ultimately no worse than most other languages -- Haskell as an exception as I think they got signatures right for the most part (though some of the crazier definitions need a freaking encyclopedia reference to understand for me). &gt; [snip] Python 3 feels like a split personality where some of your code is "return" based and some of your code is "yield" based and the code doesn't mix well. The key here is to not mix them beyond what is necessary. If you're using constructs like `yield from` and `await`, then you should only be doing IO bound code there. And in that case, you're plain sync code that just has `return` in it should be used for processing the results of that IO.
Lots of pre installed packages for analytics + Jupyter. Nothing you can't do on your own, but you only have so many hours in a lifetime so might as well not waste them... like I am on reddit.
I'm not sure what your program would do, but if all you want is to get the contents of a plain-text txt file, you don't need to use the subprocess module. &amp;nbsp; Let's say that your tweets.txt contains this: &gt;Hello World! Python is fun! The year is 2017. Good morning. then you can use the built-in open function: &gt;path = "c:\\Users\\Desktop\\tweets.txt" tweets = open(path, "r") This returns a file object, and store it in the tweets variable. For more info, read [this.](https://docs.python.org/3/library/functions.html#open) Be careful with "w", as it erases the contents of the txt. &amp;nbsp; Then, you can use .read() or .readlines() &gt; tweets.read() returns: "Hello World!/nPython is fun! The year is 2017.\n Good morning." \n is the newline character, or the "enter" key. This function returns one big chunk of continuous text. &gt;tweets.readlines() returns ["Hello World!\n", "Python is fun! The year is 2017.\n", "Good morning."] This functions returns the list of string separated by the \n character. &amp;nbsp; Now, there is one more useful function for string, the .split(). It returns a list of string separated by the string inside split, so: &gt;\&gt;&gt;&gt;str_example = "Go. Your people need you. I will be fine." \&gt;&gt;&gt;str_example.split(".") ["Go", "Your people need you", "I will be fine"] You can then store it in a variable. Also, the default is space character, so: &gt;\&gt;&gt;&gt;str_example = "Go. Your people need you. I will be fine." \&gt;&gt;&gt;str_example.split() ["Go.", "Your", "people", "need", "you.", "I", "will", "be", "fine" ] 
Interesting. On my phone so maybe I'm just missing the obvious but will interacting with this Trello board through Trello the web app break anything? 
@jemadd7, What do you do? If you already have a profession then Python can sometimes hlp. As an Engineer, I automate my repetitive tasks; make work more audit-able; create new applications; investigate problems; ... all with the help of Python. 
Not sure but I think V8 uses Python for test and build tools but not any actual V8 code. It's not "in" V8, but it is used extensively to develop V8 and many other Google projects.
Kinda late but I had to create a program with Tkinter for my python class and it was really cool, but a cs professor said python is not that good for guis and you should java instead if you wanna create better guis. Just a random thing lol, i dont think it will matter. How do you like it?
Not bad, but it jars by having initial example code that has no docstrings. I would like to think that Dropbox has doctrings in their code.
You can also do `Ctrl-Tab` and `Ctrl-Shift-Tab` to switch tabs. However, if you want to do it in python it will not be very elegant. You might be better off installing an add-on that allows custom shortcuts to be mapped. Also, /r/learnpython is more suited for this kind of questions.
Somewhere around the top-right part of the window there is a green play button. On its left there's a dropdown where you can select which configuration you'd like to execute by default. Maybe you could switch there. You could also delete those run configurations if you select the config and press that red minus icon in the window that's also visible on your screenshot (Run/Debug Configuration)
Good idea the installation of a ssh server. I will install it and I will update the image as soon as possible. 
oooppps so rude, sorry i mean not rude but your text so knocking him maybe
nice work. starred on github I'm sure there are other applications for the techniques used. 
python-pcre https://github.com/xmonader/python-pcre 
I'm too unskilled to do it myself, so I wish there was a comprehensive article about Python+ X cooperation - X being Nim, Go, Rust, anything else. All of those are interesting, fascinating and powerful ...but we can't learn them all and choosing one to suit your needs is not that easy.
Awesome write up. I really enjoyed that. Although your title was a bit misleading. From the title I was expecting you to detect edited frames using something like [error level analysis](http://fotoforensics.com/tutorial-ela.php) 
I mean, its not like it could have worse syntax than Go
How can it use the word "open" and rely on CUDA instead of OpenCL?
Yes you could but the problem is recursive. For example, if you want to read `MetricSet` as they arrive over a network connection, you still have to agree with the other end of the wire on a way to separate them. The Protobuf client will take care of separating the `repeated` messages once you have a complete `MetricSet` instance in memory, but how to distinguish a `MetricSet` from another is still up to you.
I would add a code example to the article, like a Hello-World, just to make it a bit less theoretical
PySDL2 and pyglet
Great question, and no not at all. In fact, that was one of the attractive things about using Trello for the backend. If I'm on my phone and I want to add a task through the Trello Android app, it's a great experience so that Jersey picks it up no problem.
I agree, but I think they're largely complementary, though I'll admit until this post I'd never heard of **Nim**, which is somewhat telling given I've spent a year researching what languages to add to my toolkit next. Both **Rust** and **Go** are *systems programming languages*, which makes them, broadly speaking, a bit better at lower level processes where performance trumps ease of iteration. Most people who know **Python** well find it easier to learn **Go** because it was, frankly, written as a language to fill the gaps between **Python** and **C++** by people who were quite fluent in the lessons learned from **Python**. *BUT* it's *very* opinionated, somewhat specialized towards servers and other types of concurrent processing where **Python** is weak and **C++** is *very extremely* hard to get right, and it's definitely missing some language features that a lot of people find essential, once they learn them, though the truth of that essentialness is debatable. **Rust** has a higher learning curve, as it shares some features of **C** (no garbage collection runtime, esoteric characters that seem to do magic things, general hard-to-read-ness) and has learned some things from **Haskell** (to form a somewhat weird mix of *functional* and *imperative* styles), but the main thing I find interesting about is that once people learn it, they *love* it (which is another thing it borrows for **Haskell**). Between the two I'm personally leaning towards **Rust**, partially because I don't need to write server backends yet, but largely because it *appears* to have an easy path to cross-compiling libraries that export a C-compatible *ABI*, meaning that I can call them from within **Python** code using **ctypes**... **Go** seems to have something similar, but it doesn't appear to be as fleshed out. Yet. On top of all this I intend to learn **Haskell** as well, because I really want to understand why people who grok it seem to have this Zen-like peace while using words like *monoid* and *functor* as if they mean something. My intent is to blog about all of this, but that depends a lot on my blasted **Lenovo T470** actually working, as I had to return the first unit and am **still** waiting on the replacement a month later.
See my above post and the section about essential language features whose essential nature is debatable. That underpowered language is serving a very large amount of data worldwide, absent generics.
[removed]
The fact is they're **all** interesting... what I'm trying to do is learn more about the *why* of language design choices, and how they impact the language long term. For instance there's this whole world of new languages that compile, ultimately, to **EcmaScript** (also known, albeit incorrectly, as **JavaScript**), which makes them *ideal* for front-end *web programming*... one of these is **Elm**, which takes some of the ideas from **Haskell** and then adds on **beautiful and actually useful error messages**... **SUCH** a good idea, but an afterthought in most languages. Then there's **TypeScript**, which tries to add both *static typing* and *graceful fallbacks* when compiling to earlier versions of the "machine code " that ends up being a version of **EcmaScript** that **does not itself support either feature**... also brilliant, potentially a direction that might improve **Python**, or any language. But can I learn **all** of these? No. But I can understand why a language that is itself a preprocessor to another language, which is itself implemented in a third, might be an excellent idea. The good thing is it *definitely* gets easier to learn new languages once you've learned the first few. I'm hoping I can master 2 to 4 before the Singularity arrives and my utility is weighed against my resource consumption rate.
&gt; flight controls software Used on critical systems (instead of C/C++/Rust/Ada/etc), or as part of the toolchain?
 echo "Hello World"
I won't try to convince you because it seems we disagree fundamentally, and that's cool especially since Python's typing is completely optional and gradual once you do decide to opt in. &gt; type annotations are annotations and not a type system. Attempting to use it as a type system is a gross abuse of the reasoning behind the addition of the type annotations. Python already has a type system though. Given I'm not formally trained in CS, maybe I'm misunderstanding something though. Would you elaborate on the differences for me? &gt; And mentioning statically typed languages as an example is really not a compelling argument for a language that will remain dynamically typed. The only one I mentioned was Haskell and that was to (mostly) compliment their type signatures. &gt; In other words, doc strings were being used already to support that functionality and in my mind I could use the same arguments you made for type annotations to favor doc strings. Readability counts and type annotations have just as much of a chance to become out of date as a doc string. I'll give you the readability argument because I strongly agree with it. But docstring and comment type information seem to be experimental in mypy. Other static analysis tools might have stronger support but mypy is the defacto standard. &gt; Ipython's autocomplete has no need for type annotations. I think I explained this poorly. When you're defining a function in the REPL, if you give types to the signature you can then autocomplete on the parameters. def splitone(x, n): x.&lt;tab&gt; Nothing. But if you declare x to be a str then you can autocomplete off of it. But you're right, outside of this, IPython doesn't require the static typing information as it'll use reflection to get completions. 
JetBrains employee here: this guy is right. If you want to run the file you're currently watching, you can use Ctrl+Shift+F10, that will create a temporary run configuration for the file you're editing and execute it.
&gt; systems are distributed and microservices are a norm You are using "system" as a generic term for collection of applications. You certainly can use Go for that. Traditionally however, "system programming" (two words used together) refers to running code in restricted environment that does not provide features applications take for granted like GC or runtime. Go authors did get a lot complaints about confusing people with that extension of terminology and I find their definition far less usefull, so I prefer to stick to old one.
Not having docstrings is somewhat the point. If you have them they can help, but they can come back and bite you too. Sometimes you don't have them. Even if you do, if they are wrong a couple times, you can start trusting them less. And then they are a lot less useful. But I could see that the completely undocumented function could be a bit unrealistic.
I was tired of seeing the same kind of tutorials. This one looks awesome mate. Love it!
&gt; But I could see that the completely undocumented function could be a bit unrealistic. That's my point :-) 
[Sphinx](http://www.sphinx-doc.org/en/stable/tutorial.html) is by far the easiest way to automatically generate docs from your existing code. 
TL;DR: OP makes difference images of quantized image frames to detect dupes/dupe-loops. Sounds good.
thanks mate 
Yes and no! Xarray is designed to have excellent support for NetCDF, but that really just means "collections of labelled arrays with coordinates". The reason I suggested it for you is that the methods are fantastic. You can trivially take the mean (min, idxmax, std, ...) along one or more dimensions by name, select parts of an array by coordinates, plot anything with sane defaults, and much more :)
wasn't aware for this module. It has some nice utils but somehow it does not feel "pythonic". It feel like all of the "boltons" should be different modules. Why mix stats helpers with debug helpers for example, in the same module?
Citation please. Seriously, this has always been an odd debate, IMHO. There is no permanent, inflexible, dogmatic definition for either of the terms *systems programming* or *systems programming language*, and especially not a readily accessible one that specifies those, and only those, characteristics. Do a search for either term on Google, Techopedia, Quora, Stack Overflow, etc and you'll find references to Go specifically because of its utility in distributed *systems* that, primarily, compose and talk to other *systems*. I pointed at Ousterhout because he's the earliest source I'm aware of that even tried to formally distinguish *systems programming* from either *application programming* or *scripting*, and he included **Java**, of all things, in his definition of a *SPL*. A statically compiled **Go** executable that implements **TCP** or **SSH** or some other *systems* task can* be a drop-in replacement for one written in *C*, and, for many such tasks that require concurrency, could even be more performant with greater safety, but by you definition a system component would be excluded from being one because of the language in which it was written. In a day and age when "machine" doesn't even definitionaly require hardware to even exist, I think it's quite valid to use a broader definition for *systems programming* that also happens to have been around for more than two decades.
And please, stop using argumentum ad verecundiam. Whoever tried to build it's own kernel/OS knows exactly what is and what is not a systems language.
A huge and sprawling library is more what python does then npm-style micro module chaos :D
Is this an older python 2 project? I still see a lot of the `range` vs `xrange` list/iterator naming convention issues, some `_iter` postfixes and such. Still cool, but maybe make it pythonic on python 3. for example `funcy` makes its functions return list or generator depending on whether it is running in py2 or 3)
It's not an appeal to false authority to mention the author of [the paper](http://www.tcl.tk/doc/scripting.html) that, I believe, provides the definition you're mishandling, even if I point out that you can use common search techniques to find that paper. But, *please*, as I very much want to read it, give me a citation for your definition.
Everything running on the hardware was compiled (as expected - we used assembly, then ada, then c, then c++), but we used python within the toolchain explicitly for testing and debugging. At that time (late 90s/early 2000s), Python was definitely not considered anything more than a scripting language. We definitely expanded Python's use-cases within the company. But more specifically, we created a middleware framework which (given several hardware and software interlocks) could allow for variable updating and locking, schedule modification and flight controls pipeline manipulation. The middleware framework exposed a socket interface which python could use to create local proxy values of the remote system. 
Some of these (michael) boltons *have* been incorporated into the stdlib in Py3 (datetime.timezone.utc, f'rinstance).
great!
&gt;nice work. &gt; &gt;starred on github ה &gt; &gt;I'm sure there are other applications for the techniques used. &gt; 
Nah it doesn't matter for this. You wouldn't know of it.
I took inspiration for function name from Python's builtin string methods like "isalpha", "isalnum" etc. I thought it would be more Pythonic than with underscore. 
Looking at the video, the loop cut in is pretty obvious — and in fact the optimizations used to detect the loops actually miss out on what I think is the most obvious indicator of the loop — the sudden drastic change in color of the background. For videos which feature large flat colors, I think writing a program that detects sudden drastic changes in these flat colors would be more accurate. Keeping perfectly still between takes is challenging but not too difficult; it would be much harder IMO to keep the background consistent if, as in this person's case, they are relying on natural light.
I'd like to point you to [PEP 526](https://www.python.org/dev/peps/pep-0526/#non-goals), as this is primarily where I think you and I disagree. &gt; It should also be emphasized that **Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention.** Type annotations should not be confused with variable declarations in statically typed languages. The goal of annotation syntax is to provide an easy way to specify structured type metadata for third party tools. &gt; &gt; This PEP does not require type checkers to change their type checking rules. It merely provides a more readable syntax to replace type comments. 
X-Post referenced from [/r/kivy](http://np.reddit.com/r/kivy) by /u/Ruditorres [[Tutorial] Classic Snake Game in Kivy](http://np.reddit.com/r/kivy/comments/6h0d6j/tutorial_classic_snake_game_in_kivy/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
I'd be curious to hear if someone can offer some comparisons between this and SQLAlchemy. 
I think the biggest edge for me would have been having some experiencing with programming at some point. I'm in IT but have had next to zero programming experience. We started with very simple programs and have increased the difficulty over the semester. Just do the work and ask questions if you need to. 
I wrote a script that runs a network scan and saves the results in xml and then parses through the data to list the current mac addresses and ip address to a csv file. This is the first python script i've created. I'm diggin it so far.
&gt; So, Tesla is inherently underpowered? I can rephrase that if you wish: I'd say it is inherently underpowered if it fails to ~~implement popular great ideas~~ solve popular problems many of its competitors ~~provide~~ solve. Tesla does provide different solution to combustion engine, Go doesn't have "something else" for many solutions modern languages have. &gt; There wasn't exactly a mad rush to Java from 1.4 to 1.5 Java is not known for rushing in any aspect - but it did implement generics nonetheless long time ago. So did C#, Rust, Nim, Crystal... and Go is lagging behind, without providing any typesafe alternative. &gt; all languages are underpowered if I can't just import antigravity and it just works I agree that Python sets a lot of bars high.
Planning and testing anycast DNS with PowerDNS and Exabgp. Looking forward to getting it into production and being able to move DNS closer to our customers.
Wow, hasn't seen that before! That's really neat. Maybe it could be used it on a movie and see the extent of cgi special effects vs pyrotechnics / real effects
Yeah that would be cool to look at. You could even run speech to text on the entire audio and find when he says the same phrase over and over!
&gt; Mine has the advantage of being the one you find when you Google systems programming as well. The first one I get is [System Programming](https://en.wikipedia.org/wiki/System_programming) which is completely different. Yours also has the disadvantage of being a straight synonym for *applications language*: &gt; System programming languages (or applications languages) making it redundant and useless.
This is absolutely true and a great idea - the cut is drastic in that sense and focusing on a single flat area would most likely give the most accurate results. I tried a few approaches when starting this looking for cuts specifically by checking correlations between adjacent frames. Because of the movement and the fact that I didn't have any examples of cuts (only got these after hashing analysis), I wasn't able to fit a proper threshold. I reckon using your idea of checking only a small region of the background and fitting against these known cuts would allow me to go back and find the other loops I may have missed.
does this work with SQLserver or exclusively with postgres
This is an extreme case that doesn't say much about the language's performance, because it's bottlenecked by memory and context switching, not CPU.
&gt;This is where an IDE comes in And that's where the designer of Nim and the BDFL of Python disagree. You shouldn't need an IDE to handle problems with the language design nor should you need an IDE to write code in the language in the first place. That Eclipse fills out getters and setters for you doesn't mitigate the fact that Java would be better off with properties, for instance. &gt; and there is no way to clobber your namespace (unless I misunderstood &gt;what you mean by that). You will get a compile-time error if the used &gt;procedure is ambiguous. Hmmm... so if I import two units that each have a function with the same name and I call the function without being explicit as to which one I want it'll generate a compiler error? If so, that's a good thing. What if I define a function in my code that has the same name as one in the unit I imported though? You're still left with the fact that *reading* the code is ambiguous however. To quote /u/Calime from a post to /r/nim: &gt;Another example of the hindered reading problem is the opt-in &gt;namespace mechanism (i.e. opt-in full name resolution, something C++ &gt;or Python explicitely discourage). When one reads any Nim file, one has &gt;absolutely no idea of where things come from. Was randomint() taken &gt;from the os, myrand, machinelearning or math package? Without any &gt;tooling, I don't know. And using tooling to understand what some code &gt;does is far from optimal. In my mind, Python solved this problem ages ago, so I'm not sure why the Pascal/Delphi import syntax was used - although again, it's an improvement if you can't accidentally mangle namespaces. &gt;Are you talking about these sets? Yes. Nim, Oxygene, FreePascal and anything else related to Pascal/Delphi always insist on implementing sets as a binary array, a decision that was made by Turbo Pascal in the 1980s for performance reasons. Python was the first (and essentially only) general-purpose language I've found that gives you real sets in the mathematical sense - a collection of elements of a particular type, any hashable type. For instance, I've used sets of STRINGS in Python in the last few years more than I used sets of any type in Pascal/Delphi over the last 25 years! And think about checking for duplicate files in different directories... sets of HASHES make the problem trivially simple. I don't know why every other language insists on crippling their set type, Delphi worst of all (you're limited to 256 values, which means even sets of integers can't have a higher value than 255!). I've never seen a benchmark from anyone that shows that in 2017 set performance is a limiting bottleneck, which makes remarks like "The reason is that sets are implemented as high performance bit vectors" baffling. &gt;but most languages are filled with symbols :) True, but for a language that descends from Pascal and Python, both of which tended to prefer words to symbols, it has more symbols than either one. There's a good discussion about Nim readability, including vs. Python, here: https://www.reddit.com/r/nim/comments/547inw/why_wasnt_nim_optimized_for_code_reading/
I know that isnt fully recursive types, but I said it's related. And there is currently a PR open for the Protocols PEP. Fully recursive types may require a change to the language.
Neat. I made an [XML editor too](https://github.com/novel-yet-trivial/XMLEdit) with tkinter and beautifulsoup. Yours has more features but mine gives a faster overview and editing. You should add some screenshots to the readme. 
All good points and thanks for the comments. I've created https://github.com/ahawker/decorstate/issues/1 to track it.
If you are about to ask a question, please consider r/learnpython or the learn python discord.
you can start here: https://wiki.python.org/moin/BeginnersGuide/NonProgrammers And yes, there's a lot of questions answered in r/learnpython
Procedural terrain generation! After having read Amit Patel's blog on world generation on Perlin noise, I decided to give it a go: http://imgur.com/a/XKPHC The map was generated using Caseman's excellent Perlin noise package found here: https://pypi.python.org/pypi/noise/ , and then rendered and exported as a .png file using PIL.
Thank you! Will head over there
Can you post the html and the code?
Thanks. I got that fixed.
That's pretty cool. I am going to put some screenshots on Github. I just haven't gotten around to it yet.
A big downside to my interface from your point of view is that it does not distinguish between tags and attributes. &lt;tag data='value'/&gt; shows up the same as &lt;tag&gt;&lt;data&gt;value&lt;/data&gt;&lt;/tag&gt;. I did this very much on purpose since the idea is to help people that don't need to know about the xml structure if they just want to change the value. (I wrote it to help colleagues who needed to edit values in config files.) I think your target audience will not appreciate that. 
&gt;&gt;Also enjoy the use of a "result" variable that gets automatically returned &gt;&gt;when a function ends rather than a "return" command. &gt;That is an awesome feature! I It's not a feature; it's an evolutionary dead-end. SIngle-entry, single-exit appeared in languages as Pascal, Fortran and COBOL. It has since gone virtually extinct in terms of the evolution of programming languages. &gt;I don't see how it can be problematic, can you give an example? To quote WIkipedia: &gt;According to empirical studies cited by Eric S. Roberts, student &gt;programmers had difficulty formulating correct solutions for several &gt;simple problems in a language like Pascal, which doesn't allow multiple &gt;exit points. For the problem of writing a function to linearly [search] an &gt;element in an array, a 1980 study by Henry Shapiro (cited by Roberts) &gt;found that using only the Pascal-provided control structures, the correct &gt;solution was given by only 20% of the subjects, while no subject wrote &gt;incorrect code for this problem if allowed to write a return from the middle &gt;of a loop. &gt; &gt;Others, including Kent Beck and Martin Fowler argue that one or more &gt;guard clauses -- conditional "early exit" return statements near the &gt;beginning of a function -- often make a function easier to read than the &gt;alternative. Stack Exchange also addresses the topic: https://softwareengineering.stackexchange.com/questions/118703/where-did-the-notion-of-one-return-only-come-from &gt;This notion of Single Entry, Single Exit (SESE) comes from languages &gt;with explicit resource management, like C and assembly. &gt; &gt;....When you have to manage resources manually, exploiting the options &gt;of entering or exiting a function anywhere leads to more complex code, &gt;and thus to bugs. Therefore, a school of thought appeared that &gt;propagated SESE, in order to get cleaner code and less bugs. &gt; &gt;However, when a language features exceptions, (almost) any function &gt;might be exited prematurely at (almost) any point, so you need to make &gt;provisions for premature return anyway.... Once you have done this, you &gt;cannot fail to clean up after yourself due to an early return statement, so &gt;what is probably the strongest argument in favor of SESE has vanished. &gt; &gt;That leaves readability. Of course, a 200 LoC function with half a dozen &gt;return statements sprinkled randomly over it is not good programming &gt;style and does not make for readable code. But such a function wouldn't &gt;be easy to understand without those premature returns either. &gt; &gt;So in languages where resources are not or should not be managed &gt;manually, there is little or no value in adhering to the old SESE &gt;convention. OTOH, as I have argued above, SESE often makes code &gt;more complex. So it is a dinosaur that (except for C) does not fit well into &gt;most of today's languages. Instead of helping the understandability of &gt;code, it hinders it. Also see https://stackoverflow.com/a/36839/2128279
It serves a lot more than Nim is serving.
And when it tries to implement all great ideas you get C++ and lose simplicity and readability. 
That's Lot of money. I don't see any any info about what they're planning to do with it. Any other links?
Oh man, can I make a suggestion?? When I create a new project and want to choose an existing virtual environment, make the dialog not auto expand to my system's python path, but instead to my user's `.virtualenvs` folder instead. This behavior takes about 15 seconds to load which negates me manually choosing the virtual environment from my home folder in that same amount of time. Basically it takes so long to find the wrong folder that I have to pick the correct one twice.
Post your code?
Have you considered [D](http://dlang.org/)?
I don't think people are hand-coding assembler much any more. That's a leftover from the Turbo Pascal days. You're not going to hand-code assembler that's faster than compiler-generated machine code unless you're using a horrible compiler (which is why it's still useful with Delphi). 
Jinja is pretty solid and has been around for a while, it's unlikely that a bug like this one would have gone unnoticed. Most likely, the problem is on your end; post or pastebin some code, and we might be able to help.
It's coming in the form of ~~two~~ developers from Berkeley, I believe. It was posted on the mailing list but I don't see the may 2017 archives yet. Copied and pasted from Nathaniel: Hi all, As some of you know, I've been working for... quite some time now to try to secure funding for NumPy. So I'm excited that I can now officially announce that BIDS [1] is planning to hire several folks specifically to work on NumPy. These will full time positions at UC Berkeley, postdoc or staff, with probably 2 year (initial) contracts, and the general goal will be to work on some of the major priorities we identified at the last dev meeting: more flexible dtypes, better interoperation with other array libraries, paying down technical debt, and so forth. Though I'm sure the details will change as we start to dig into things and engage with the community. More details soon; universities move slowly, so nothing's going to happen immediately. But this is definitely happening and I wanted to get something out publicly before the conference season starts – so if you're someone who might be interested in coming to work with me and the other awesome folks at BIDS, then this is a heads-up: drop me a line and we can chat! I'll be at PyCon next week if anyone happens to be there. And feel free to spread the word 
My personal opinion is that you have Python - a beautiful language that can call libraries from almost any other language. The complement to that is [Haxe](http://haxe.org/), a fine language that produces code for many other languages/platforms. With the two, you can call almost anything or produce code that can be called by almost anything. An awesome set of tools. 
I think i figured it out. I had bootstrap and footable linked in my html and so two tables were created whenever the table class was used.
By Law, funding from the Moore Foundation must be doubled every two years.
Aaah, thank you. This will work.
Awesome news.
But at least they'll be able to use NumPy to develop an optimum card counting algorithm to make all the money back on blackjack!
I thought it meant they had to code things for an alternate universe where a group of vigilante super heroes fought crime/communism.
Ah, I believe you're confusing the Moore Foundation with the Mooremens or the Minutemen. If you're a bit of a nite owl you can find some additional details on Wikipedia.
Okay, bad example. It's useful for more complicated cases, when you are constructing a long string. &gt; Around here we say "Explicit is better than implicit" and "There should be one -- and preferably only one -- obvious way in which to do it". Yes, that is the Python philosophy. It's not Nim's, and even Python doesn't strictly stick to it. Overall, I don't see the problem. If you don't like this feature then don't use it.
+1 for zappa!
Excellent! But will it be any easier to install on Windows outside of using Anaconda?
I tried slapec's comment: 1. I tried switching it to every option there was but nothing works, it either runs a specific python file or the testunit, I simply want to run the file that is currently on the screen with Ctrl+Shift+F10 but that will do a testunit I tried extra_short_giraffes comment above (ctrl-shift-f10, it won't simply run the file but will do a testunit run I want to try msuyter comment, but there is no .idea/directory in the my folder --&gt; C:\Program Files\JetBrains\PyCharm Community Edition 2017.1.3 I cannot find a reset to default button to make everything run as it were when I first installed here is what it looks like when I right click the file at the top of the screen, where is the option to just plain normally run the file, i want to see "Run test009" but instead I see "Run unittests in test009" http://imgur.com/a/4TzuW
I just started using NumPy for a robotics class and was disappointed when I found out it was pronounced numb-pie instead of numb-pee.
Telegram Group @pythongroup
requests
So learn 2 and then learn the differences? 
That's the advice I've gotten. I am no expert to provide advice of my own at this point. Only passing it along.
Working on part 3 now!
This is great news!
No. Learn 3 and then learn the differences. You cannot learn unicode properly using Python 2.
What is the problem with Anaconda? I have heard nothing but praise.
So where can I learn Python 3?
Alright so far theres one downvote and no response but i wanna hear the answer too. Maybe ill just need to hit S/O, Google or /r/learnpython, but for now ill go for "Anaconda is perfect and i challenge anybody to prove me wrong."
If it saves you any trouble, its not pee-thon either.
That's $150k per dev per year. When you include benefits like health insurance, that seems like the industry rate to me.
1. Investigate the web page. Logins are usally done with a html form that send a POST request to the link defined in the action attribute of the form. 2. Find all inputs that should be in the form. There may be hidden ones on the web page. Investigate your post request with chrome developer tools. 3. Build the python script with: requests and Beautifulsoup
Hah. We are talking Vim -- I'm pretty sure there's no noobish questions. Specifically integrating plugins with Vonda is a lot more painful than it should be. Most plugin makers assume you are using traditional virtual environments which makes things more difficult than it needs to be. You'll run into this (to an extent) with Atom as well.
Excellent and informative article, as always. The examples in this one are really good. 
You could, but I wouldn't. 
Python is really the wrong tool for the job, you could easily write a chrome / greasemonkey extension in a few lines of javascript though
By "anything else", do you just mean virtualenvs? Or can you be more specific? You can pip install things just fine into conda environments, but conda envs / virtualenvs don't mesh seamlessly at this point. As for IDEs, Vim is my primary dev tool and it works fine with Anaconda. PyCharm, Spyder, and PTVS all support Conda as well.
Why would anybody use a language that has "massive flaws" for 10 years? Put up or shut up springs to my mind.
My experience has been less than pleasant, but many tools I've wanted to use haven't worked as well as I'd like.
An idea tracker 
Great. Didn't know about that sub
Not worth an extra comment
&gt; You missed the point of the analogy. No, I got it. Its what you can achieve that matters, not how. &gt; The Go developers have long stated that they want generics I know the story, I don't want excuses. Point is, other language developers do provide this feature (and all the benefits it brings), Golang doesn't have it. "It may have it one day" is not very good answer for that, at least not without a roadmap with a schedule. &gt; If you ask me, anyone who dismisses Go because it does not have a working implementation of generics is throwing out the adult with the bathwater they've been keeping since it's first bath. A am not dismissing it entirely, only pointing out that it is behind competition in that aspect. It may well be ahead in every other, but for this one it deserves bashing. Numerous other language designers managed to provide means to solve problems Golang is not solving at all, so it is a language flaw for me. &gt; Both Tesla and Ford convert chemical potential energy to linear kinetic energy; Tesla waited until it could do that well Tesla did it before its competitors managed to do that, it would be in much worse position now if it did after all of them. 15th electric car on the market delivered many years after the boom would not sound impressive at all.
What kind of things do you want to get into? [Factory automation](https://www.youtube.com/watch?v=cEyVfiix1Lw)? Hacking [cars](https://www.youtube.com/watch?v=3bZNhMcv4Y8) or [old games](https://www.youtube.com/watch?v=v75rNdPukuI)? Or maybe you want to play with [microcontrollers](https://www.youtube.com/watch?v=D-5V7s0GflU) (longer tutorial [here](https://www.youtube.com/watch?v=9BUakSTQwb4)). All of these are from this year's PyCon. There are packages to do everything from optical interferometry to SPICE, and there are great tutorials on running simulations etc. You can use Pandas to replace Excel. There will also be the fundamental plotting and vectorization libraries (matplotlib/numpy etc) that everything else builds upon. In general, a Python programmer has great prospects. If you combine it with what you learn from Engineering (even outside your field), it can provide even more opportunities. Besides career-related things, you can [automate the boring stuff](www.automatetheboringstuff.com), You can easily get into Bayesian inference, machine learning and AI. You can even leverage that to help you with your experiments, like Ask and Tell from [scikit-optimize](https://scikit-optimize.github.io/notebooks/ask-and-tell.html). (Say you have different parameters you can change, such as your roll-off or filter type, and you want to minimize power draw while active given a certain real-life set of signals. You set up your optimizer, it gives you values to use, you run the experiment and tell it how much power it used. After a few iterations, you are close to the minimum.) **tl;dr:** Definitely relevant in engineering in general, and you can also make use of it in many places in EE.
If you read my post up near the top, but below the first one referencing Go that seems to have started all this, I personally prefer Rust, so you've won your argument there on Cargo alone. I chose Go to compare to Nim solely because it's more accessible to Python-as-a-first-language programmers syntactically, and I wanted an honest comparison for anyone in that group who is reading the OP link and yearns for something faster and statically typed,and yet still more "Pythonic" than Rust (which, as strong as it is, is not as pleasant to read as Python by a damned sight). BTW, popularity doesn't mean anything, in and of itself, it's the size of the community that matters, and **yes** I believe that is absolutely *vital* to have, because a perfect language with one user isn't gonna do much.
Aye aye capitan :) that's sounds like a lovely plan
[removed]
If it's behind the competition, but correct in asserting that the competition has implemented it in a fundamentally dangerous or broken fashion, and that implementing it to the same degree would break the -- to them -- more important promises of the language, then it's perfectly acceptable to omit a feature that, ultimately, is still a feature and not a necessity. If they're incorrect, then you're right, but I'll defer to their judgement as they know the internals much better than I. As you've said, no meaningful work *requires* generics -- or any of the alternatives that ultimately just save repetition -- and I'd argue that the vast majority of meaningful work being done by programs written in any language that have generics do not even in fact use them, or if they use them, that the majority of time their use as a programming construct is incidental to their functional use in practice. AKA the benefit accrues to the programmer, in having the sense that s(he) is writing in a feature rich language, and not the program, in having to actually rely on polymorphism to function correctly. 
Ten myths of enterprise python with Mahmoud Hashemi :-) He is a great guy, I've been disillusioned by him about python two years ago personally and since then I've got a fairly successful career writing python code, in Iran.
Which brings us back around to why every language must have every feature, or you'll reject it as inferior.
That is **way** too complicated for the end result you get. Which is why the same thing would only be a handful of lines of code using [ipywidgets](http://ipywidgets.readthedocs.io/en/latest/), [holoviews](http://holoviews.org/), or [bokeh](http://bokeh.pydata.org/en/latest/). 
No one asked for helperbot's comments either.
&gt; You will get a compile-time error if the used procedure is ambiguous. I just tried import unicode, strutils echo isUpper('a') I get no error on that. It seems you are incorrect? 
This sounds like a clan/guild invitation :D
&gt; I chose Go to compare to Nim solely because it's more accessible to Python-as-a-first-language programmers syntactically, and I wanted an honest comparison for anyone in that group who is reading the OP link and yearns for something faster and statically typed,and yet still more "Pythonic" than Rust Ok, here is my impression of Nim as a Python and Rust developer: 1. No support for concurrency/parallelism. Both Go and Rust improve a lot over Python in this aspect, I don't see a reason why any Python developer - who most likely wants more performance - would even look at Nim. And as we learn from C/C++, you can't really add those features to a language later, at least not without radically changing it. 2. It is as complex as Rust if not more, yet it doesn't seem to provide anything Rust doesn't. 3. Usage of *, $, % makes it often unreadable by (modern) Python standards. 4. Not much thought given to stdlib and type system results in bizarre limitations: var s: set[int64] # Error: set is too large. 5. String variables are mutable - big surprise for Python users. So is calling dictionaries "tables". Generally - switching from Python to native code is huge amount of effort, and I don't think Nim will provide enough value for that. It may have less steep learning curve or some fairly niche features like compilation to C, but relatively few people will choose it for that.
I've only started listening to them as well but I really enjoyed the Netflix episode and the episode with David Beazley on his talks about modules and packages!
For victory! 
I thought it's a saying then I saw the other comments and it is a thing haha 
Just surprised a position paid out by a grant wouldn't come in well under industry pay. I'm not complaining, I think it'd be great if this was well paid, just surprised since it's out of the ordinary. Also apparently is actually more than 2, op put in an edit. 
Very impressive - not just your problem solving and coding, but your write up too! Cheers.
Thanks for mentioning ipwidgets et al. I wonder if the three mentioned above could be used to make a self-contained GUI that won't choke up on large datasets. I am thinking JS and hanging browsers if data is largish. By self contained, I also mean that the control (say the button to slide to next data point), all lie besides the plot.
;-) I never tried to implement it, but is philosophically really interesting. For sure there are a bunch of implementations, but however can stimulate study on new approaches about its implementation.
Elite.
rick dangerous is a platformer, that may come more in the future, I just want to start with text based games first.
Also, have a look at this recently made post https://www.reddit.com/r/Python/comments/6h67j4/rroguelikedev_is_running_a_summer_devalong/
I know, I just couldn't resist, sorry.
a tuple is several values linked togather. exemple (x, y) for a point on a graph 
some one should do this. - first someone should list all the idea and the solution on this r/learnprogramming wiki faq:[where_can_i_find_practice_exercises_and_project_ideas](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) - tracking idea post on r/python subreddit, e.g. - [Some project ideas (forensics)?](https://www.reddit.com/r/Python/comments/696wde/some_project_ideas_forensics/?ref=search_posts) - [Useful things to make with python](https://www.reddit.com/r/Python/comments/692uxe/useful_things_to_make_with_python/?ref=search_posts) - [Any ideas for a fun programming project/challenge?](https://www.reddit.com/r/Python/comments/66p2ll/any_ideas_for_a_fun_programming_projectchallenge/?ref=search_posts) - [Ideas for Python projects?](https://www.reddit.com/r/Python/comments/63yikv/ideas_for_python_projects/?ref=search_posts) - [Open Source Contribution](https://www.reddit.com/r/Python/comments/637m1x/open_source_contribution/) - [Ideas for Program Project?](https://www.reddit.com/r/Python/comments/62g6cl/ideas_for_program_project/?ref=search_posts) - [Idea for a Beginner's Python Project (GIS or Non-GIS related)](https://www.reddit.com/r/Python/comments/61vc7n/idea_for_a_beginners_python_project_gis_or_nongis/?ref=search_posts) - [Programming Ideas for beginners with Python](https://www.reddit.com/r/Python/comments/61ro00/programming_ideas_for_beginners_with_python/?ref=search_posts) - [Need project ideas.](https://www.reddit.com/r/Python/comments/5yutxl/need_project_ideas/?ref=search_posts) - [Easy Project Ideas](https://www.reddit.com/r/Python/comments/5v4c4e/easy_project_ideas/?ref=search_posts) - [Side Projects](https://www.reddit.com/r/Python/comments/5qvr8z/side_projects/?ref=search_posts) - [Fun demo ideas for a presentation to 16-18 year olds](https://www.reddit.com/r/Python/comments/5qb8p8/fun_demo_ideas_for_a_presentation_to_1618_year/?ref=search_posts) - [If r/Python had a r/CrazyIdeas section, what would be the craziest ideas?](https://www.reddit.com/r/Python/comments/5oouzd/if_rpython_had_a_rcrazyideas_section_what_would/?ref=search_posts) - [What are some programs I can make that would realistically prepare me for a programming job using python?](https://www.reddit.com/r/Python/comments/5nyv9r/what_are_some_programs_i_can_make_that_would/?ref=search_posts) - [Physics/Optics engineer with MATLAB experience interested in learning Python. Is this a sensible choice? What can I do with Python? need application ideas to motivate learning.](https://www.reddit.com/r/Python/comments/5mslje/physicsoptics_engineer_with_matlab_experience/?ref=search_posts) - [Looking for Good Final Project Ideas](https://www.reddit.com/r/Python/comments/5m0onv/looking_for_good_final_project_ideas/?ref=search_posts) - [Anyone here ever gotten ideas for a project based on something seen in a movie or TV show?](https://www.reddit.com/r/Python/comments/5ihyki/anyone_here_ever_gotten_ideas_for_a_project_based/?ref=search_posts) - [I'm very unoriginal and doing a project for an Intro to Python class. Can someone someone suggest some cool ideas for me to program?](https://www.reddit.com/r/Python/comments/5gwgtu/im_very_unoriginal_and_doing_a_project_for_an/?ref=search_posts) - [What are some cool data science project ideas for practice?](https://www.reddit.com/r/Python/comments/5gncqn/what_are_some_cool_data_science_project_ideas_for/?ref=search_posts) - [Cool python projects to contribute on Github?](https://www.reddit.com/r/Python/comments/5fe12h/cool_python_projects_to_contribute_on_github/?ref=search_posts) - [What to learn next? AKA: What else can you do with Python?](https://www.reddit.com/r/Python/comments/5czg26/what_to_learn_next_aka_what_else_can_you_do_with/?ref=search_posts) - [Where to go from here? First Python project ideas?](https://www.reddit.com/r/Python/comments/5cyyey/where_to_go_from_here_first_python_project_ideas/?ref=search_posts) - determine if post in r/python is asking idea for project - search reddit for idea. other than subreddit in what r/learnprogramming wiki there is also r/lightbulb (r/ideas is merged into this subreddit). Or maybe search popular subreddit which require help that can be fixed in programming - parse social media for idea (github, facebook, twitter, instagram, etc) 
Just to avoid the throttling. 
Yeah, they work just fine. For instance, for ipywidgets, you'd *usually* use it to wrap a function whose arguments could be used to drill into a given dataset. I've routinely used it to analyze multi-terabyte datasets (although it's not quite "interactive" when you have to read a lot of new data from disk and slice it up for a given plot). Same thing with bokeh. Holoviews is promising for the future and works the same way.
Does not belong here. /r/learnpython. 
This is not a help forum. /r/learnpython. 
It really depends on what you're doing with the HTML after you fetch it. If you're just doing some string manipulation on it or just parsing it, I think you'll be fine. You could always look into the BeautifulSoup documentation to be really sure of what it'll do with your input. However, I would be really surprised if there are any `eval`s in there.
Yes, almost exclusively.
Thanks, at least you show me where to post
Thank you for writing this tutorial in using Peewee in python. The first time I used it I couldn't make any sense on how to use objects in the code. With this tutorial it answered most of the questions that I had about Peewee. It is much clearer for me now on how to create a table, insert rows with objects, delete and select rows. Coming from a SQL background this makes it much easier to build queries through Peewee than building queries by hand. 
ooooohhhhhh! :D
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Glad you liked.
That is going to be well under industry pay, there's a lot of extra stuff the employer pays that the employee never sees, I'll bet their take-home will be a lot closer to $100k, if not lower.
&gt; Main questions - Is python relevant in engineering especially Electrical Engineering? Yes. &gt; How hard is it to get into Python? Not hard at all. Even easier if you already know a language or two. &gt; What are the career prospects as a python programmer on its own? Decent but Don't. You're wasting your degree. &gt; And with an Electrical Engineering Degree? Great. Source: Mechanical engineer that lives between MATLAB and Python.
I prefer WinPython since it doesn't require admin to run. But Spyder is about as close to MATLAB as you're going to get.
Excellent! Discarding Nim from mental list of things to do before death.
I use that too, but the whole point was to have another official MKL channel for distribution, so it can auto-find it for you. With conda, there is no non-MKL channel. That makes it easier to not break your pyython (gotta have MKL scipy as well or python will segfault). Conda doesn't even have the non-MKL numpy, which prevents errors. If you're on Windows, just use Anaconda. It solves multiple problems. It's not perfect, but you have pip as a backup. 
Hrm, I guess we're not doing a good job advertising Nim's features. &gt; No support for concurrency/parallelism. Nim supports both. The first via [async await](https://nim-lang.org/docs/asyncnet.html#examples-chat-server) the second via [``spawn``](https://nim-lang.org/docs/manual.html#parallel-spawn-spawn-statement) and other means. &gt; It is as complex as Rust if not more, yet it doesn't seem to provide anything Rust doesn't. What gives you that impression? In my opinion Rust is far more complex if only for its ownership model. Nim is a GC'd language and in many cases as simple as Python. &gt; Usage of *, $, % makes it often unreadable by (modern) Python standards. I guess I can accept that. Symbols suck, but it's still much better than Rust and even Go. &gt; Not much thought given to stdlib and type system results in bizarre limitations: var s: set[int64] # Error: set is too large. Please read the documentation: https://nim-lang.org/docs/manual.html#types-set-type. The reason it's limited is for efficiency and you can fallback to a less efficient but more powerful set type from the ``sets`` module. &gt; String variables are mutable - big surprise for Python users. So is calling dictionaries "tables". Yep, the name ``tables`` is odd. I personally love mutable strings. Generally Nim is a much better alternative to Python than Go or Rust is IMO. 
I love Anaconda, but it's not perfect. I write a python 2.7/3.6 library and use a virtualenv for python 3.6 (so it's clearly better than stock python), but you can't start it from PowerShell. I wouldn't care if Microsoft hadn't replaced cmd in my right click menu... They did finally fix the bug where they corrupted Python any time they updated and you had your IDE locking python. I still frantically close my IDE when I see python updating to avoid another 1 hour install.
Also, it's mat-plot-liebrary, not lib. I will never say that though.
Would this affect pandas in some way? How so?
Kotlin is the way to go for Android these days.
Plus you want to attract good talent. Paying extra money paid for a better developer can pay for itself in the final output.
Where you install it determines whether it requires admin.
For long elif chains dictionaries are faster.
I might develop plugins in the future (for vim and maybe for sublime) but for now i wanted it to be editor agnostic. I tested it with sublime (export EDITOR=subl) and made a small fix for it to work. Since sublime automatically reloads files the workflow is quite smooth too. You still have to press enter in the terminal window though. It's still used best with vim, i guess.
This happens to me quite often. The way to solve this is to not put "test" in the filename. For some reason PyCharm assumes that any file with "test" in the name contains unittests. I usually change "test" to "trial". Not ideal, but it works.
Very interested in checking this out when I get home from work - I've avoided voice controlled assistants up to this point because of the potential for abuse on a central server. This sounds perfect for a Raspberry Pi! Also, it makes me think of Ahsoka Tano :D
Evaluate: This statement is false. 
I think that's good in general. Just a word of warning though. Factory automation/plant management is itself on the automation path, so you might want to diversify into other fields as well.
A lot. It's fairly simple and straightforward once you’ve got a hang of the syntax. It's harder to package stuff in Python, but if you don't need to do that then I think Python is great for GUIs.
As the official PyData pub quiz master, I have extensively researched this question. Here's what I've heard from `numpy` core developers. - num-"py": /aɪ/ rhymes with "try" - num-"py": /i/ rhymes with "see" I have also heard: - "num"-py: /nu'm/ rhymes with "room" ("num"-erical) I haven't come across anyone who says /nju'mpaɪ/ Bonus pronunciations I've heard: - matplot-"lib": /ɪ/ rhymes with "crib" - matplot-"lib": /aɪ/ rhymes with "tribe" - "scipy": /'skɪpi/, hard-k, rhymes with "slippy" - "pandas": /pʌn'dɑːs/, stress on last syllable, rhymes with "coup de grâce" By the way, I suspect most people pronounce "GotoBLAS" as /ɡoʊ/ /tuː/ like the English "go to." But it's named after Gotō Kazushige (後藤和茂.) I believe this suggests different stress pattern &amp; different vowel sound.
Well, the blog could've been made with Django (but it's not).
this is more of a question for r/learnpython
Latest language to replace java, and make android development more fun.
This is literally all that article says about python: &gt; Unfortunately, Python is not a tail-recursive language, There's python packages that emulate tail recursion that that author seems to not know about. 
Read the sidebar. This is not a support forum. /r/learnpython. 
Read sidebar: /r/learnpython 
I had an old version of conda and they've seemed to have moved the repository &amp; I am unable to update. I tried conda update conda or something to that effect. I've given up on it.
/r/learnpython Just like it says on the sidebar: &gt;If you are about to ask a question, please consider r/learnpython or the learn python discord. 
Thank You. I'll keep it in mind.
I read somewhere that what is going on in some cases on Unix is that the SSL approved ciphers are being read from `/etc/sshd_config` https://www.ssh.com/ssh/sshd_config/ Not sure it applies to your usecase, as you didn't mention ssh, but if it's something like Fabric, the underlying utility is ssh.
This looks very interesting. I do have some questions: How does your system stack up to other ASR systems in terms of recognizing arbitrary speech (i.e. not specific commands)? How accurate is it in recognizing pre-supplied commands, without the step of NLU? Is it possible to give a more strict definition of what the user can say, for instance using regular expressions? This would entail something like "open [my] (email|browser)". Or alternatively, is there a way to explicitly control the language model, by for example boosting the probability of certain words or sequences of words?
If you're interested, I'm doing the Udacity Intro to Machine Learning course (python) now and it's really great. I'd argue ML in Python is one of, if not the most, straightfoward ways to apply ML techniques given libraries such as sklearn provide much of the heavy lifting for you. Not exactly sure if you're trying to ask what is ML or how is ML using python different than other scripting languages/tools.
To collect some information the dataset are previous clean of them , organizing it in structure way . Example : the fields variation_price , current_price , current_date This way your could relate the company with the your price variation over time. Seems that a database with the fields that I written previously , applying a temporal series and analysing the variation of this values you solves your problem
I doubt that, since code requires some platform to run. So JS code included in HTML page cannot really run on Python. But if the Python code explicitly runs some code included on the page on the correct platform, that's another story. :) I haven't used Selenium much so I can't really comment on that.
BIDS is great! Go Bears! 
For that? Just reinstall it.
Can you share more details? 
I'm trying to run SQL queries in a py script and can't seem to get pymssql to import... Can anyone help a n00b out? 
What is the result from typing this in the shell? import sys print(sys.executable)
C:\Users\distortd6\AppData\Local\Programs\Python\Python35-32\pythonw.exe
Or it has a bug that they've probably fixed. Windows should be able to update without restarting...
OK, you have at least 2 copies of python installed. One is installed to "C:\Users\distortd6\AppData\Local\Programs\Python\Python35-32" and the other is installed to "C:\Python\Python35-32". You installed the package to the latter copy but you are running the former. Python copies each keep their own modules. I recommend you delete the "C:\Python\Python35-32" folder (obviously once you copy your files and data out). Then run this to install pymssl to the correct python copy: C:\Users\distortd6\AppData\Local\Programs\Python\Python35-32\python -m pip install pymssql --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Do not post images of code. Also, include which version of python and what OS you are using. 
Thanks for the reply and I agree that a database would be the best way to store the data; sorry if I wasn't clear in what I was asking....it's more to see if anyone knows if there is a library that someone has already put together than build the commentary around the price movements
I honestly know very little but also very intrigued at the concept of a program using data to learn from instead of me going back each time to update it. 
/u/TomRiddle01 You might want to look at my SO answer that achieves something similar in a cleaner fashion: https://stackoverflow.com/questions/44502905/can-i-configure-python-to-have-matlab-like-print/44507944#44507944
Seems like it, I have to admit that i'm not very fluent at this stuff. Quite new to python
You're better off starting to learn programming first (and statistics) before you jump right into Machine Learning. There is a lot of data scrubbing and prepping in order to process any algorithms...
Hi, just wanted to say that I've been slowly working into Python for a little bit and this comment caused me to buy your book. Just got it today! 
I think secrets.token_bytes was just another way to do what os.urandom does. Adding os.getrandom was a good idea though, since it's secure even on a badly seeded live distro due to blocking when flags=0 is set.
Have you tried google? That's a very common homework question; there's tons of examples out there. 
Last I checked IPython support works in python 2 but not python 3. Is that fixed?
Python (and all programming languages) is a tool for doing math (and other things). You can do as much or as little math as you want using python. The only limit is the power of your computer. 
You are not redistributing the Wikipedia module yourself, only _using_ it. There is no issue for you, unless you "vendor" the upstream (copy their code into your repository) 
Sort of a funny question. Python is just a language. You're probably familiar with basic scripting at least like autohotkey. Python is an elegant and generalized version of that. So zero math, if you want. And it's perfect for a discord bot.
Perfect. Thanks!
It is free for makers, and there is a commercial license if you want to sell devices
Hi, our ASR is using state-of-the-art deep-learning methods and compares very favorably to existing commercial systems we will provide a way for people to specialize the ASR to the commands they want their assistant to understand, in order to improve even more the accuracy, stay tuned :)
Where can I find the 'free for makers' license &amp; TOS? I would want to make sure that you're not doing stupid things like, for example, assuming full rights to applications using this framework.
This module doesn't really add anything that wasn't possible before. Instead they should have implemented a proper `crypto` library with helper methods for salting and hashing secrets.
Please contact me. I do have a startup idea, two companies that might support, looking for further help 
You can also literally download dumps of all their data in a structured format. It's like 70GB or something.
Another thing I did was set up a pwd for root and allow ssh login, and another sudo account in the Dockerfile, like this: &gt;RUN echo 'root:screencast' | chpasswd &gt;RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config &gt;RUN useradd -ms /bin/bash pi -G sudo &gt;RUN echo 'pi:raspberry' | chpasswd These are for my own internal containers so I'm not worried about security. Obviously if these are on a public network that's a no-no.
In my experience, use the editor or IDE you're already comfortable using. Otherwise, you've doubled your learning curve to a new language plus a new environment.
Pywinauto is still a 0.6 version and very much beta quality. Sikuli may be more reliable. There are at least 2 major disadvantages. Sikuli uses Jython based on Python 2.7. So many modules may not work - and in 2017 I'd very much prefer writing Python 3 code... 
I wrote an article called [Properly attributing FLOSS](https://www.modio.se/properly-attributing-floss-projects.html) a few years ago. Generally: - don't mix licenses in the same file - Attribute and track the license of code you copy - Link back to source of the file 
Sniff the network traffic and emulate it with requests
I don't know if it's new to 0.12.6 or 0.12.5 but the clickable legend to hide data is amazing!
Check the resolution of the screen capture from pyautogui, and from the image generated when you take a screen shot(cmd shift 3). If they're different then that's your issue. 
Programmaticly driving a GUI is a fragile approach with many build-in limitations. You should check if your ERP has an programming API, perhaps something like what is listed here: https://www.programmableweb.com/category/erp/api
Not my first time reading about SQL injection but this was a really good simplified explanation of it in use, maybe add the option for people to go back to certain areas of the lesson but asides from that it looks really good :)
That factory automation talk was awesome. I am currently facing some of these engineering challenges at work (IT background, little programming and no engineering experience), and am hoping to pick python up for some of this work. Thanks for posting that, huge help with what to think about.
Way cool, will fiddle with it. I find the server based always listening creeper voice rec that is the new defacto unsettling, particularly given the way a thing which may not in fact be internet sensible becomes automatic iot.
What kind of things do you want to do? I might be able to point you to more specific resources.
You don't. I've read the stackoverflow question, and I'm still confused by what it is that you think you are doing and why. If something is difficult to explain, consider that perhaps it isn't a good idea.
The first one right now is triggering a templated print job (think package labeling) using some form of motion sensor, taking a csv as the data input. I have a basic idea in mind for the code: * Take csv file (single line) and store the data from it as vars * Template it using something like jinja2 into a zpl or pcl "label" format * Trigger a print job over serial or network on sensor trigger. The issue I'm running into is that I haven't worked with physical hardware like that before, that it has to be robust, and that I'm still a beginner when it comes to coding in general, so I'm lacking confidence in my ability to do it.
What are you really trying to do? I use vtk and once my 150k element model is loaded, it's incredibly fast. I make animations with it. Thousands of cubes doesn't sound fast.
You can use a dual license though. This part is GPL because x. The rest is MIT.
Both good tools, use whatever feels right for you(might be neither). Also, it helps to not have any kind of autocompletion when you learning basics. 
you can use tornado gen.coroutine if you will go async way. But in this case, threads would be as good of an approach as async.
depending on your objective it could be from zero to a lot of math, as Python also widely used within scientific circles.
Have you profiled this to determine that this function is your bottleneck?
Try running something like Conda update or upgrade. Don't remember which but when it realizes you didn't specify a package it tells you what the command is to update itself
Super cool! Did you use something like Twitter Bootstrap to help design the website? I'll definitely keep this in mind when I go shopping for liquor soon. 
On Sunday I made a kinda cool Twitter bot that takes a photo from Unsplash and applies a style transfer from a random painting, and then tweets the result. Bot: https://twitter.com/AI_Artify Code: https://github.com/Gingernaut/AI_Artify
Something what would be interesting is a reminder program for turning in assignments and stuff. You could make the program send you a text reminder of when things are due. Maybe incorporate text and email reminders!
If you use a linter it will tell you which imports aren't being used. 
https://www.twilio.com/ https://www.mailgun.com/
How does one get involved with updating NumPy?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [kyoto-u-shinobi/yozakura_raspi/.../**mbed.py** (develop → 3da45b9)](https://github.com/kyoto-u-shinobi/yozakura_raspi/blob/3da45b9f1965907493eb02818b545db59af3f7cd/rpi/mbed.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dixf89c.)^.
What is the point of those links?
One is a great resource for programatically sending text messages, the other is a great resource for programatically sending emails. 
I'm ok with that, I'm just not clear what they have to do with the OP.
&gt; You could make the program send you a text reminder of when things are due. Maybe incorporate text and email reminders! 
You are 100% correct here. Pycharm, like python, is batteries included and some of the out of the gate tools are really, really, really nice for beginners.
Another ide in the Atom zone is Visual Studio Code, it also has some extensions to facilitate python programming. I have been using it for Python and C# recently and fairly happy.
I have to purchase all the bits, it's for a manufacturing environment. I have none of the hardware yet, although the there is a sensor plugged into another printer unit, but it uses a big plug that I have no idea how to reverse engineer. Again, not really a hardware guy. CSV file is generated by an erp, needs the multiple fields for the different information, so needs some way to delimit. Could be a string with delimiting factors or something I suppose. It's multiple entries, and a barcode, and things of varying sizes. That code looks exactly like what I am looking for too, thanks for giving me an example to look at.
Well done. I removed your email modal popup and was able to do the lesson without giving my email :) That's a vulnerability on your side haha.
No because you would not be able to write to two files at a time
r/learnpython
Asyncio is deterministic so you can't run into the same corruption problems that you could with threading. Other threads cannot corrupt what you're working on unless you yield the thread.
low effort, low quality and self promoting, all in one go. efficient at least.
Well, I guess you could speed it up somewhat by using `create_from_axis_rotation` instead of creating and multiplying three separate matrices. That would also make more sense logically. Otherwise, idk, generally you just don't want thousands of entirely independent objects in the scene, that's going to put a strain on the system no matter what. If those cubes are not entirely separate but form a particle system or something, there's a lot of clever stuff you can do to transform and render them all at once, instead of having each transform and render itself. But that would probably require ditching pyrr and manually constructing and transforming an array of matrices as others suggested.
It actually is [standardized](https://www.python.org/dev/peps/pep-0394/) for Linux in pep 394. On Windows shebangs are not used, so the schema was ignored. I hope when Python 2 is unsupported on Unixes that there can be some concensus on this.
On Windows shebangs are used, the py.exe launcher reads the shebang and invokes the right python version. It even supports small versions like 3.5.
Pha! Just two names? *Peasant! :)* I've seen `python3.5` (with version and a dot) and a `python36` (no dot) executable aliases. 
Seeing things like this only recently being added to bokeh makes me feel like its still playing catch up to plotly. 
Ah, I didnt know this! Interesting
Plotly has a lot more resources behind it, no? I have used both, but bokeh is nice and quick for my notebook work, which is nice. Great set of tools. 
Oh and on Arch Linux, "python" defaults to "python3" Learn docker. It really is a good tool for distributing binaries. 
Fedora 25: https://imgur.com/a/pX7dk
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/d5pIxIN.png ^[Source](https://github.com/AUTplayed/imguralbumbot) ^| ^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^| ^[Creator](https://np.reddit.com/user/AUTplayed/) ^| ^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^| ^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dixml3r) 
This is a real mess, because you're overloading a bitwise operator. Bitwise operators do *not* short-circuit, so any argument relying on that is totally bogus. Moreover, I agree that it should equal 3, but probably not for the reason you give. I say it should equal 3 because that is what `2 | 3` equals. That also means that `{1: 2} | {1: 4}` should equal `{1: 6}`. Again, that's because you're overloading a bitwise operator, so the semantics should relate to bitwise operations. If you don't want that connotation, then pick some other operator; it seems like addition would make more sense if you expect to merge two dictionaries with the RHS operand overriding any keys in the LHS. But it really seems like you're badly reinventing `collections.ChainMap`, so you should probably just use that instead. You ought to explain the actual problem you're trying to solve. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [TriOptima/tri.struct/.../**__init__.py#L56** (master → 588d02a)](https://github.com/TriOptima/tri.struct/blob/588d02afaabf918454d2e74de139624a0c38a075/lib/tri/struct/__init__.py#L56) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dixn3yg.)^.
Looks like memory allocation has gotten cheaper with newer Python. That is good.
I always had trouble getting a checkboxgroup to work to hide various plot elements so I'm glad to have found this. I upgraded from 0.12.4 so I wasn't sure. I'm a big advocate of using bokeh in my organization that most people just walk away from me when I start talking about it since they've heard my spiel about it so frequently.
To link against Python 3, I have to [search for](https://github.com/mkeeter/antimony/blob/252c3ab23c010e95227aee8ccc022be3dc1f37f5/CMakeLists.txt#L20-L24) `python3`, `python-py34`, `python-py35`...
Thanks! I did use a little bootstrap for styling of the "panel" components. Hope it helps!
what font is that?
I would make behavior 1 with "+" instead.
Maybe, but it at least makes it easier to jump to the symbol that defines the behavior :P
For several years, you should be using "python2" to get Python 2 and "python3" to get Python 3.
lol. I didnt even notice that. Freaking autocorrect. 
This is awesome, great job. One tiny request is to change "Now we need to configure our redis client" to "Now we need to configure our redis client in `client.py`" Or something like that to flag that it's still in the same file
Have you checked if it is using multiple threads in that operation? If it using only one, then you can try compiling pyrr or numpy with OpenBLAS 
 &gt;&gt;&gt; {2} | {4} {2, 4} Instead of 6 as I expected. What am I doing wrong?
&gt; Sure you could check celery, and after three months trying to understand the basic configuration options you'll be good to go. Sorry but no... if it takes you more than 15 minutes to have Celery with Redis and a hello world task up and running then you're doing something wrong.
There was enough candy, but they backported it all. Hence embodies the worst in open source development (if they didn't backport it, someone else would just fork it and do it anyways)
Consider using this new [Data Version Control (DVC) tool](https://blog.dataversioncontrol.com/how-a-data-scientist-can-improve-his-productivity-730425ba4aa0) for working with AWS and for iterative machine learning - it allows you to keep the code on Git and use AWS cloud storage for data. It is written on Python and open-sourced. Airflow are good for representing static and fault tolerant workflows. A huge portion of its functionality is created for monitoring, optimization and fault tolerance. DVC reflects the process of researching and looking for a great model (and pipeline), not optimizing and monitoring an existing one. This is why DVC is a good fit for iterative machine learning processes.
Thanks TopKat_
I typically use virtualenv environments and set the python version at the beginning so there's no confusion (At least when I'm not using Anaconda).
Specifying `python2` or `python3` is the best approach here. As a prior Arch user, scripts invoking `python` were a nightmare to deal with. I know, corner case, but this is also important to future-proof your code. &gt; Explicit is better than implicit.
Fedora user here, `python --version` out of the box (currently) is `2.7.13`.
[cffi](https://cffi.readthedocs.io/en/latest/).
I would move the create_engine and sessionmaker to the outside of the timed function - I guess that a lot of time is spent on these functions. And then you could add some complexity to the transactions (filter by more than one column, use other operators). Your article will be more usefull in this way.
Well to create the (I'm going to use the word database for lack of a better word) database of assignments and those assignments due dates; Could I use an excel sheet and the program basically searches for the due date finds it then sends an email reminding me say when the due date gets 2 days away? 
This has nothing to do with open source or candy (either python being FOSS or a code base written in python). It has everything to do with migrating all your old existing stable projects (not under active development) being time consuming and not worth the effort. If you have a stable few hundred thousand or million line code base written ten plus years ago by someone who has left your organization and it is just used internally, it would be a waste of resources to migrate it (especially if it relies on the C API that completely changed or external libraries that may not support py3 or that may have changed interfaces/behavior since then). At best, it will work the same. At worst, you'll introduce a bunch of rare errors in unexpected places that your tests don't catch where small external library changes (to call the py3 library) after the migration breaks things that will waste user and dev time for years. It's the reason you can still compile legacy code in fortran77 or C89 several decades later.
...or developers who use spaces are smug pedants who exaggerate their salaries to make themselves feel better about their obvious inferiority. ...or not.
I found http://click.pocoo.org/ to be quite useful and user friendly. 
`seq3np1(X)` doesn't return a value, so it returns `None` by default, which you then print. Also, try /r/learnpython.
By i replace x with 10 
You can do that, but your life will be easier if you create a delimited text file instead. Reading those into python is trivial, and libraries like Pandas will make handling dates etc easy. You can still edit the file in a Excel. 
&gt; actually on linux python refers to the default version of python for your distribution. On very stable ones like debian it is python 2.7 but on cutting edge (archlinux and gentoo at least) it is python 3.x (3.6.1) on arch currently. this is mostly because it is left to distribution maintener (and not software's programmers) to package and distribute softwares on linux distribution to have a coherent group of softwares. This is wrong, for the same reason that having, say, /lib/libc.so.5 provide glibc (libc.so.6) would be wrong. It wouldn't stop being wrong if all the distribution's own programs expected glibc to be named /lib/libc.so.5. The purpose of a Linux distribution is twofold: to run the software in the distribution itself, and to run other software. There are certain cross-distro expectations for what interfaces a distro provides. This is why even distros like Nix that don't otherwise use /usr/bin still have a /usr/bin directory containing just env: so that `#!/usr/bin/env` works. No Nix software uses /usr/bin, but that path exists for the benefit of other software. In particular, `#!/usr/bin/python` is an interface, same as libc.so.5 is an interface. Backwards-compatible updates to the interface (new Python 2.x versions; new libc5 versions) are fine. Removing the interface (which is what everyone's done with libc5 for about 20 years, now that we're using glibc) is also fine; at least you get a clear error message. Putting something incompatible in that interface is not fine. Unfortunately [PEP 394](https://www.python.org/dev/peps/pep-0394/) had to be written to point out that those cross-distro expectations about `#!/usr/bin/python` no longer hold.
I cant quite get why it works for the rest of the sequence and after it ends it has a problem with a "return" not being there.
This post has some inaccuracies/ I'll help clear them up. &gt; No support for concurrency/parallelism. Nim actually has multiple different methods for implementing concurrency. See here: https://forum.nim-lang.org/t/714 &gt; Both Go and Rust improve a lot over Python in this aspect, I don't see a reason why any Python developer - who most likely wants more performance - would even look at Nim. Because Nim is objectively faster than Python and compiles to native binaries. &gt; It is as complex as Rust if not more, yet it doesn't seem to provide anything Rust doesn't. Nim actually provides several things Rust does not: * Easy to use macros and templates. * Multiple compiler targets out of the box. * Garbage collection. * Simple operator overloading. &gt; Usage of *, $, % makes it often unreadable by (modern) Python standards. I haven't really had this issue, but I'll take your word on it. If we are comparing Nim to Rust however, I think it's a little disingenuous to say Nim overuses symbols. &gt; Not much thought given to stdlib and type system results in bizarre limitations: var s: set[int64] # Error: set is too large. This particular example is due to the implementation details of `system.set`. There is a mathematical set implementation in the `sets` module. See here: https://nim-lang.org/docs/sets.html Also, the stdlib is pretty extensive in my personal experience. There is a built in documentation generator, web server, multiple parsers, built in source code filters(for html templates and such), database drivers, html generation, all of core javascript, and more. See here for everything: https://nim-lang.org/docs/theindex.html &gt; String variables are mutable - big surprise for Python users. So is calling dictionaries "tables". I have yet to experience a problem with Nim's string handling. Once again, I'll have to take your word on it. As far as tables go, I think that they are an efficient way to implement a strongly typed data structure that is almost as easy to use as Python's dictionaries.
Cython is fantastic. You can also use ctypes if you want to stick with the standard library tooling.
Yeah, macOS still doesn't have a `python2`.
Yes I can. As you said, any code that references GPL code becomes GPL. Any code that doesn't can still be MIT. GPL doesn't propagate to all code in the same folder/project. It propagates to anything that uses a GPL component, while it's being used in conjunction with the GPL'd packagr. For example, I have a GPL GUI, but if you want to script things, that's not GPL. You have the right to make your code be GPL and MIT under certain conditions. Riverbank (they distribute PyQt) does it. LGPL for open source. GPL for companies unless you pay money to Riverbank in which case, it's LGPL. Plenty of LGPL and GPL projects use numpy, scipy, and matplotlib (they're BSD-3). That doesn't GPL-ify numpy. That's all I did, but in two distinct parts of the code that is clearly stated when you build the gui and on github.
IMO a better way to discover all of the plugins is through the pkg_resources module, which provides a couple utilities for getting entry_points defined in the setup.py. This lets other packages add plugins and you'll automatically pick them up: # setup.py setup( ..., entry_points={ 'myapp.plugins': [ 'TimePlugin=myapp.plugins.time_plugin:TimePlugin', 'DatePlugin=myapp.plugins.date_plugin:DatePlugin', ] } ) Then # load_plugins.py import pkg_resources as pkg def load_plugins(): for entry_point in pkg.iter_entry_points('myapp.plugins'): try: yield entry_point.load() except Exception: log.exception('Failed to load plugin {}' .format(entry_point.name))
On Windows, you can use the [Python Windows Launcher](https://www.python.org/dev/peps/pep-0397/) -- you can guarantee that your program will be run using Python 3 (assuming the user has installed) by doing `py -3 [your script]`. (And similarly for Python 2 by doing `py -2 [your script]`). If you need to target specifically Python 3.5 for example, you could try doing `py -3.5 [your script]`. This launcher should be bundled with all Python versions as of Python 3.3 and the more recent versions of Python 2.7 (don't remember which one, exactly). So, you could get away with telling users to use either `python3` or `py -3` and have that work for the most part. (IMO It's actually a shame that this launcher isn't installed by default on Linux -- it would make writing documentation so much easier. It's pretty nice too -- no more having to remember if it's `python3.5` or python35`.)
your careers page is a nightmare 
I'd personally just do it by finding the substring that matches a regular expression, but I love regular expressions. Edit: Now with potentially working code! It could avoid looping if you glue them all together. `&gt;&gt;&gt; import re` `&gt;&gt;&gt; reg = re.compile('^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')` `&gt;&gt;&gt; reg.findall(lines)` Double edit: Instead of that huge regex, as long as you're not worried about matching some other random 4 numbers separated by periods, there's `'([0-9]{1,3}\.){3}[0-9]{1,3}'` which is slightly less ugly.
Choose an issue that interests you and try to fix it. [Here](https://docs.scipy.org/doc/numpy-1.12.0/dev/gitwash/development_workflow.html) is the guide to contributing
Why pass through env and not directly /usr/bin/python3?
Because python might be installed in `/usr/share/bin` or `/usr/local/bin` or `/opt/python/bin` or in a virtualenv, etc. Using env will search the PATH for the first executable that matches.
or just use hackertyper.com
This is one of those annoying "why don't you do it completely differently" answers, but I would note that `journalctl` under `systemd` is a [structured log](https://kartar.net/2015/12/structured-logging/), as such it may have already done the parsing for you (see `-o json` option)
/r/learnpython
Format your code with 4 spaces in from like so: import json data = {} for i, label in enumerate(results.labels): data[i]["label"] = label.description First, you are working with dictionaries, not 'JSON objects'. They share a lot of the same things but in python you work with dictionaries. You can then export dictionaries to a JSON file / string. Your code is failing because of what the error says: data[0] doesn't exist. If you want to create a dictionary inside data[0] you should do the following: for i, label in enumerate(results.labels): data[i] = {"label": label.description} But you probably want a dictionary containing a list? If so, you should do this (no need for a loop). data = {"labels": results.labels} And try /r/learnpython
 data = [] data.append({'label': 'description'})
You can't translate what is true in Python to a compiled language. In a dynamic language, global imports commonly lead to a mess. Nim is a compiled language, so the question of which function you execute _is_ clearly defined. If there are name conflicts the compiler will tell you at compile time and you can easily resolve them. And if you want to you can go for selective imports. The reason this is rarely done is because it is rarely necessary.
alright thanks a bunch i'll move any further questions to /r/learnpython
**Here's a sneak peek of [/r/learnpython](https://np.reddit.com/r/learnpython) using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) \#3: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
I'm running Fedora 25. Can't comment on Fedora 24. Hopefully soon to be running Fedora 26 next month!
It's not a sin. It's just like eating cockroaches. Some do, others don't. 
&gt;actually on linux python refers to the default version of python for your distribution. On very stable ones like debian it is python 2.7 but on cutting edge (archlinux and gentoo at least) it is python 3.x (3.6.1) on arch currently. Gentoo user here, this is wrong. Gentoo lets you set "python" to be whatever version of Python you want it to be, but by default, if you simply "emerge python", this will be Python 2.7.12. In fact, the most recent stable version of Python on Gentoo is 3.4.5 (of course, Python 3.6 is available under ~arch, the Gentoo equivalent to testing. See [this page](https://packages.gentoo.org/packages/dev-lang/python) for more information).
&gt;You can't translate what is true in Python to a compiled language. This has nothing to do with being compiled. &gt; In a dynamic language, global imports commonly lead to a mess. I'm a longtime veteran of Delphi, the compiled language Nim borrows this design from for presumably sentimental reasons. It's a mess in Delphi too. I can show you many code samples that import 16 units with no way to know where any function in program is coming from. Worse, Delphi resolves an ambiguous function call to the last import so you can silently clobber the namespace depending on the order of your imports. The compiler won't even issue a warning. How does this have anything to do with being or not being compiled? &gt; Nim is a compiled language, so the question of which function you &gt;execute is clearly defined. Look at the code sample I posted. It is NOT clearly defined. Which library did the "avg" function come from? &gt;If there are name conflicts the compiler will tell you at compile time Someone posted here that Nim didn't do this when they compiled test code. &gt; And if you want to you can go for selective imports. It shouldn't be optional. You shouldn't be allowed to write ambiguous code. It's poor language design, period. &gt; The reason this is rarely done is because it is rarely necessary. It's always necessary so someone reading the code knows where imported items came from. 
Everything you've written is all backwards. `python` always refers to the first `python` on the `PATH`. No exceptions. This is how `PATH` works, after all. `python2`, if such a symlink or alias is available, refers to the first Python 2.x on the `PATH`, and similar with `python3`. Again, same as above: this is how `PATH` works at a fundamental level. So the naming is 100% consistent from platform to platform, largely because all shells use approximately the same convention for their `PATH` variable. Where there is lack of standardization is precisely which versions of Python are installed, and I don't think you can enforce that on everyone.
Fair enough, and thanks for the more thorough reply.
I think they are trying to, or already have, moved all the core packages to python3 so that python2 wouldn't even be installed by default. However, /usr/bin/python will likely point to python 2 (if installed) for as long as python 2 is supported.
I'm a big fan of [`plumbum`](http://plumbum.readthedocs.io/en/latest/). It offers lots of extremely convenient stuff in addition to argument handling. It's not the most concise option, but it's well organized IMO. Since /u/hendler linked `click`, here's the example from their homepage next to an equivalent `plumbum` implementation: [image for color](http://i.imgur.com/XQJpl9m.png) I hadn't heard of `fire` before, it looks super cool for some quick and dirty cli-ifying.
Daemonize?
Sure, what is it that makes you think this might not be possible? Pypy is just an executable just as Python.exe is. You'll have to get it to install pip first though after you extracted the zip file that pypy comes in, but this is trivial because we have the ensurepip module: L:\TOOLS\pypy2-58&gt;pypy.exe -m ensurepip Collecting setuptools Collecting pip Installing collected packages: setuptools, pip Successfully installed pip-9.0.1 setuptools-28.8.0 L:\TOOLS\pypy2-58&gt;bin\pip.exe --version pip 9.0.1 from l:\tools\pypy2-58\site-packages (python 2.7) 
For those interested in these microcontrollers, [Tim Head live-coded a bicycle speedometer using MicroPython on the ESP8266 during last month's PyCon talks.](https://www.youtube.com/watch?v=D-5V7s0GflU)
Or if the user works from an Anaconda environment.
I'm working on this for some time now. Hope it's mature enough to call it a beta. I would love to hear your feedback; ideas, feature requests, bug reports.. Thanks.
My editor lets me input tabs but converts them to spaces. I might throw the computer out the window if I had to push space more than once in a row. Ok, I'd think about that, and then spend the next five hours writing a "time saving" editor extension to automatically convert tabs to spaces. 
Yep, I read through it last night! 
as I understand this, this doesn't allow for dynamically adding plugins, because you have to statically define all known external "entry_points" in the setup.py?
&gt; I'm pretty sure there is python (python 2) on fedora after you install it? Yep: localhost:~% cat /etc/fedora-release Fedora release 25 (Twenty Five) localhost:~% /usr/bin/python --version Python 2.7.13 localhost:~% /usr/bin/python3 --version Python 3.5.2
Then you did something wrong with setting the PATH variable. But that's now a windows question rather than a python question, honestly. Still, check that you have - added the installation *folder*, not the executable itself to your PATH, properly quoting it if it contains spaces; - restarted your cmd.exe (to pick up the changes in the PATH variable). 
Arch has `python` and `python2`.
&gt; Nim borrows too many old/outdated ideas from Object Pascal. **No, it doesn't.** If anything, Nim introduces a lot of forward-looking "smarter compiler" / "smarter IDE" ideas that most programmers are not yet ready for. Object Pascal is hardly even Nim's great-great-uncle! *It's very sad that such a false tangent took over such a significant fraction of the conversation here...* The Wikipedia [article on Nim](https://en.wikipedia.org/wiki/Nim_%28programming_language%29) lists its influences, which are many (and, if you dig deep enough, [many roads lead back to Algol](https://archive.is/bG5Zx)). But *some influences are much more significant than others*, and mentioning some is simply redundant. Looking at the big picture: Nim's goal / motto early on has been: "as fast as **C**, as expressive as **Python**, and as extensible as **Lisp**". I also really like [this impromptu quote](https://forum.nim-lang.org/t/1961) from Araq (Nim creator / BDFL): "Nim is essentially **Ada** + a GC with a friendlier syntax". That really covers almost all of it. I think too many people think one drop of Pascal blood [makes it Pascal II](https://forum.nim-lang.org/t/592), which is silly. Quoth Araq from the forum: &gt; **Nim is not even that close to Pascal anyway:** &gt; &gt; * Macro system inspired by Lisp. &gt; &gt; * Export marker taken from Oberon. &gt; &gt; * Argument passing semantics taken from Ada. &gt; &gt; * distinct types inspired by Ada. &gt; &gt; * **Syntax also heavily influenced by Python.** &gt; &gt; * Generics inspired by C++. &gt; &gt; * The 3 pointer like types ptr, ref, var taken from Modula 3. &gt; &gt; * async / await stolen from C#. &gt; &gt; * let taken from ML. &gt; &gt; One could also argue that Nim is a statically typed Lisp with an infix syntax extended by essential features necessary for systems programming. I think [**Nim's #1 kinship is with Python**](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers), although it applies the same aesthetic and design principles to systems programming: create a language with the cleanest syntax and make the programmer as productive as possible. (Although long-term productivity goals often trump short-term ones, like that there have been many studies showing the benefits of static typing.) The decision to use the ["off-side rule"](https://en.wikipedia.org/wiki/Off-side_rule) and other Pythonic syntax (wherever there wasn't a good design reason not to) was not a decision made to maximize Nim's broad appeal (since [most programmers are addicted to curly brace languages](https://forum.nim-lang.org/t/2811)), but to make a better language. Nim is also a perfect symbiotic fit for Python, because you can create low-level [Python modules in Nim](http://akehrer.github.io/posts/connecting-nim-to-python/) instead of C. &gt; For instance, have fun with imports that only import entire libraries. [RTFM](https://nim-lang.org/docs/manual.html#modules) - you don't ***have to*** import entire libraries to be used without explicit origin prefix, that's just the default behavior for `import blah`. There's also `from blah import nil`, `import blah except x, y, z`, pure enums, etc. That is an example of a forward-looking "smarter compiler" / "smarter IDE" idea. Nim often reminds me of [Howard Roark's Parthenon Critique](https://archive.is/CzenU) - many design aspects of programming languages date back to a time when computers were very slow and very expensive, and programmers sometimes had to think about code on paper or in a very simple editor. The trade-offs once made in favor of saving compile-time memory or making the code more readable in notepad no longer make sense. In the 21st century, even a code viewer running on a cheap tablet inside the Web browser could show Nim code with interactive hints for where each identifier / overloaded operator / etc comes from. This means less verbosity, less boilerplate, and higher programmer productivity in exchange for some tiny fraction of a cent worth of extra CPU effort. &gt; Also enjoy the use of a "result" variable that gets automatically returned when a function ends rather than a "return" command. Why is this a problem? Coming from Python I still prefer to use `return` most of the time, but there are cases where assigning `result` makes code simpler. Nim gives you the choice. &gt; It's also filled with "pragmas" and symbols. Nim has *a lot* of features. Coming from Python, I found that I could write fast and practical Nim programs while only using like 20% of Nim's feature-set. The more advanced features use the pragma syntax, but you don't have to worry about it until you actually need to.
So I tried it with docker containers (example@example.com:zulip) and I'm getting this error Well oops. This one's probably our fault. Sorry about that! If you'd like, you can drop us a line to let us know what happened. I used https://github.com/galexrt/docker-zulip
He's a smart cookie, but there are plenty more in the Python camp. That's why the final decision on many PEPs these days are made by BDFL delegates, not the BDFL himself.
You, sir, are a gentleman and a scholar.
&gt; And that's where the designer of Nim and the BDFL of Python disagree. Python was conceived in the late 1980s - a time when computers were a lot slower and thus programming language compilers / interpreters / code editors could do a lot less. But both languages support both methods of importing: Nim's `import X` is Python's `from X import *` Nim's `from X import nil` is Python's `import X` &gt; You shouldn't need an IDE to handle problems with the language design nor should you need an IDE to write code in the language in the first place. Why is this an unquestionable axiom for all time? Why can't we optimize the programming experience for the programmers who do use a smart editor / IDE / code viewer? Why should the programmers who insist on writing their code in notepad be our #1 priority, to the determent of all other trade-offs? 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [irmen/Pyro4/.../**distributed-computing3** (master → 4d31123)](https://github.com/irmen/Pyro4/tree/4d31123a84a8ef2c85cc9c833c156e01e23ea131/examples/distributed-computing3) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply diya8p5.)^.
Nim is very different from Go, in some ways its polar opposite. Go's design has pivoted away from being a general-purpose systems language. It seems to be obsessed with compile time (a strange concern for a cloud mega-corp in the 21st century) and minimalism - the latter essentially means making programmer talent cheaper and easier to replace. For a modern language, Go's syntax is an insult to intelligent programmers - very ugly, depressing, and verbose compared to Nim and D. And it's very telling that Google itself uses a cacophony of languages - including Java, TypeScript, Rust, and now even Kotlin - and Go is hardly remembered! Nim manages to be both much faster and much less verbose than Go. Nim is a rare language where optimized binaries are so lean and fast you have to examine them very deeply to get any hint that they're not written in C/C++, while Go needs a couple of megs just to say "Hello World"!
Unless you're on Centos 7, because then the binary is called python34, because of course it is
I'm curious about the scales for the User Growth / Server Growth plot. It looks like they need like 20x as many servers for like, a 30% increase in users? Must be percentages or something, but it's a bit strange.
Dont be upset Mr Python2
You're not my supervisor!
They are fundamentally different. PyCharm is a full IDE; Atom is a text editor.
I could see it happening, many of the data storage factors aren't static. They more than likely need to keep adding servers at a pretty good pace just to keep up with their current users.
Not too long ago I saw Hettinger made a remark about feeling that things are beginning to get a bit rushed to be put into Python lately, which is a feeling I agree with. That was my main motivation for writing that. 
Other packages would just define their own entry points under `myapp.plugins`. I'm not sure it would still work if you did 1. Launch MyApp 2. `pip install some_package_with_entry_points` 3. Scan for `myapp.plugins` entry points but that's pretty easy to test. I personally don't have any issue with having to relaunch most applications when new plugins are installed, even if it is convenient for the user. Most of my projects that use this sort of functionality can take the hit to usability since it saves me from having to write a complicated system that continuously scans for new plugins. EDIT: It seems that by default `pkg_resources` does not pick up changes to installed packages while the current python process is still running. Just threw a quick test together that definitely showed it not picking it up until I restarted it. EDIT AGAIN: Looks like it isn't too much work to support, just replace `pkg_resources.iter_entry_points` with `pkg_resources.WorkingSet().iter_entry_points`. One thing to note is that this only works when adding definitions from modules that haven't already been imported. So you can have 1. Launch MyApp 2. `pip install package1_with_entry_points` 3. Scan for `myapp.plugins` entry points 4. `pip install package2_with_entry_points` 5. Scan for `myapp.plugins` entry points But you can't update `package1_with_entry_points` to have a modified list of entry points because those loaded entry points will already have imported modules into `sys.modules`. You'd have to know how to unload those modules then reload them. This gets to be a bit too much for me to care about, so I would stop at this point and call it good.
Sure, but many of the companies that *do* invest in new languages for some indiscernible reason choose to invest in languages that are *productive* rather than only *interesting*. **Rust**, **Go**, **Dart**, [...] **TypeScript**... these come out of established companies seeking solutions to *interesting* problems, and these same companies, no doubt, looked at probably the entire *esoteric language* space before deciding not to invest in something that existed but didn't service the *productive* need... which is where the vicious circle begins, because if *they* chose to pass on some new language, why shouldn't *I*?
That T-shirt should have "and the ability to be on a supported language and use new features and libraries and benefit from future performance improvements down the road, and also get security fixes ever." Would you make the same claims about an IT department that took 10 months to move from Windows XP to Windows 7? Should they just have stayed on XP? (Also, do you not understand how _absolutely massive_ 10% of Instagram's CPU cycles is?)
Why do people say that Python isn't scalable?
The most interesting part to me was reading that developer efficiency was their biggest motivator. I wouldn't expect that at that scale. Sure hope I can be on Python 3 sometime soon too, lol.
Can you honestly talk about developer efficiency when you waste 10 months just to upgrade the interpreter? &gt; Also, 10% at that scale is a loooot of $s. But it's only a crumble from what they could have gotten from a compiled language (or at least efficiently JIT-ed like Java or LuaJIT). I bet most of those measly 10% came from algorithm changes or newer modules replacing some of the Python with C.
I use [huey](https://github.com/coleifer/huey) for the same type of thing. I don't know if I trust function serialization ala your module.
Created a script that helps schedule student classes by identifying gaps and group availability throughout their work week. It currently runs completely from the command prompt but that is intimidating/prone to error for some of my less computer savvy colleagues. Trying to use Tkinter to develop a simple GUI for the script to make it idiot proof and more user friendly. Anyone have some good Tkinter tutorials? Using Python 3.6
&gt; It looks like they need like 20x as many servers for like, a 30% increase in users? You can't expect them to report after 10 months that the performance is down. They'll throw more hardware resources at the problem and claim 10% improvements.
&gt; windows XP If you want a realistic analogy, you'll have to stick with Linux.
You're going to spend more than 10 months backporting things to your language, then. Look, I wish Python 2.8 had happened as much as anyone does. I'm not going to defend the decision to make Python 3 a backwards-incompatible update. And yeah, maybe they should have ported their code to Go or Perl 6 or WebObjects or something instead of Python 3. But they still had to get it off of Python 2. It's no different from if Instagram had found themselves with a Classic ASP codebase and needed to spend two years rewriting it all&amp;mdash;spending those two years would have been the right call.
I usually end up wrapping scripts with a flask server and a simple web frontend.
&gt; You're going to spend more than 10 months backporting things to your language, then. No, it would probably take the same time. Also, it's "porting", not "backporting". &gt; Look, I wish Python 2.8 had happened as much as anyone does. It actually did: https://github.com/naftaliharris/tauthon 
If you can't be insightful or funny, just downvote and move on.
That doesn't make sense. XP is no longer supported, and it was deprecated. Py2 end of life is approaching, and there is a new and better version of the language. Why port? I rather think it's obvious.
Java is compiled to bytecode, same as python. If they want JIT, there is pypy.
what does "Python traditionally is not a typed language" mean?
That is really surprising. You'd think their developer cost is dwarfed by infrastructure costs like Netflix.
You will receive better replies if you suppy enough information to reproduce your results. Perhaps if you follow the advice here: https://stackoverflow.com/questions/789856/turning-on-debug-output-for-python-3-urllib you will be able to see the problem yourself. If you post the trace output we should be able to see where your request when wrong.
Neither is Ruby. But rails is used everywhere. They use Django. Big frameworks admittedly struggle to scale. If speed is a worry. Try flask. Or your favorite tiny framework. 
Maybe overload an operator that doesn't have connotations of symmetry: {1:2} &lt;&lt; {1:3} == {1:3}
I look forward to Nim reaching 1.0.
Funny, I _do_ have written quite a bit of Pascal/Delphi in my life, and yet Nim feels to me more like a Scala with Python syntax. In many cases Nim code looks like Python, in other situations it is even fully valid Scala, for instance: var df = DF.fromFile("data.csv") .map(schemaParser(schema, ',')) .map(record =&gt; record.goals) .take(5) .show() Not so much resemblance to the Pascal days to me.
The most complex math I tend to end up doing is incrementing or decrementing by one. It really depends on what you are writing. For network automation, auditing, and reporting there is very minimal. For personal use, I did some basic Algebra to figure out what buying a Tesla Model 3 would save me or cost me compared to keeping my truck. The idea that one needs to know math to do programming is more of a myth. It's more about the logic and how to think about an order of operations than it is about math for many cases.
Hmm, I haven't considered that before. I see now that I'll have to. (Currently jobhunting.) I think it might be best to get an entirely new sensor suite if you can. Good luck!
I would really love it if Fedora would have something like Ubuntu's old Quickly thing that would bootstrap a python desktop app with best practices for modern linux desktop development.
What? It is definitely a typed language.
Pyramid
Just pick 3.6 and be done with it. It's the future development of the language and it's the way more libraries will be moving in the future. Most every big library has py3 support at this point and we as python developers need to stop the bleeding and just go with the modern version. If we'd done this in the first place, we'd not have this question any longer. 
he probably means that python is not a statically typed language. that's a common mistake
Definitely worth looking into. Yeah will work on getting new sensor system. Research ahoy, and then getting everything through the finance department.
2.x has already been announced as loosing support, so as enterprise it should be an easy pick, but we all know how it works in reality, Cobalt anyone?
I mean, I think its *more likely* that the chart isn't really reflecting what's going on here.
At this point it seems at least 26 people took the latter part of his advice seriously.
About 4 hours ago, [this] (https://thenewstack.io/instagram-makes-smooth-move-python-3/) was posted in this sub about Instagram's move to Python 3. I think it's got some compelling arguments.
&gt; If it's going to take the same time, then the choice to move to the newest language is the right one. Wait, you are given two choices: move from Python2 to Python3 or to LanguageX. You choose the former, because it's "newer", even if the latter is giving you a huge performance boost?
I get your point but the truth is any of the jetbrains ides support other languages even without plugins. with plugins they are close to interchangeable.
It may be smaller than you think. Its really just pictures (and the occasional video), Im sure they have some clever compression, and I'd wager Facebook could share plenty of tips and tricks for optimization 
facepalm! Not again!
It would help if you posted the code
&gt; If speed is a worry. Try flask. You might want to double check that: https://www.techempower.com/benchmarks/
The [Python 3 Wall of Superpowers](http://python3wos.mybluemix.net/4600) sums it up. The major libraries have been ported, I'd suggest that anything that hasn't been ported by now is dead.
:-)
Thank you for the insight. I'll look into it. And also, I provided a dropbox link to the txt file I am trying to evaluate, so you are always welcome to take a gander at it. Just to stir away confusion, I did not mean to put the simulation volume, it is the enclosed volume of the relative distances. Reason I say that because the simulation box is 106.5^3 Mpc^3 in volume. Unless I am confusing myself on it. Right. I started this kind of work back in late 2015 when I just transferred into uni. What I am ultimately looking into is to compare and interpret the physics between hydrodynamical and dark matter only physics for massive Milky Way dark matter halos and its satellite subhalo in the Illustris Simulation. For this question I asked, I am wanting to look at the number density of the relative distance between the many host subhalos coupled to their satellite subhalo and after that, calculate the local density based off the number density to then calculate the local logarithmic density slope in hopes to determine and evaluate a discontinuity in the slope called a "Splashback radius". Do you do this kind of work also?
Instagram gave a great keynote at Pycon this year regarding the techniques they used to accomplish the migration. It was a really well done and interesting talk, you can find it [here.](https://www.youtube.com/watch?v=66XoCk79kjM)
Are you familiar with programming concepts or are you new to programming as well? There is a great list of resources of on the sidebar. I particular loved Think Python and Automate the Boring Stuff when I was learning!
A better way that's elegant is to leverage __new__ and pip internally. I have an example but I am on my mobile.
How many projects have &gt;100000 lines of Lua versus how many have &lt;1000? In how many projects is it the main backend language? How many projects have Lua running both backend and frontend? How many scientific papers have been written using Lua in the last 18 months (besides algorithmic benchmarking)? Is Lua being used for eg high speed algorithmic trading if it rocks so much? I actually like Lua, but let's not pretend it is more than what it is. If you really can't comprehend what makes python successful, you may have a hard time understanding why no one is buying your arguments.
It looks like basically just saying the Fedora package management team aren't stupid and do have repositories for packages, runtimes, and frameworks.
Why did they disable the garbage collector? 
While true, it'd be interesting to see how Python provided a dramatic difference in efficiency over other mainstream languages.
I will always upvote David Beazley. This is what I love about python, it gives you so much freedom 
If Django is your bottleneck, you're done optimizing. 
Surprised they got CPU savings, I've read python3 is still a little slower.
This is even more arcance wizzardry than pure metaclasses. Awesome! Favorite quote: &gt; All serious magic in python will eventually involve the collections module. But seriously the current additions to python seems to support framework designers alot. Before I never understood the need and use for things like `__init_subclass__` and `__prepare__` but now I can see alot of potential there.
&gt; But it's only a crumble from what they could have gotten from a compiled language (or at least efficiently JIT-ed like Java or LuaJIT). If you read the article, you would've seen their biggest bottleneck was the network. You can't jit network calls, and when it gets down to it Python is just as efficient as waiting on IO as finely tuned artisanal assembly. &gt; I bet most of those measly 10% came from algorithm changes or newer modules replacing some of the Python with C. lol not rust
&gt; their biggest bottleneck was the network Is that why they need a boatload of VPSs? I thought only newbies buy this explanation. Once you administer a production server, it becomes clear that the bottleneck is the CPU.
Well im familiar with some basic stuff (variable, string, int, etc..)
&gt; A lot of lawyers at a lot of companies I've spoken with lawyers at a few companies as an open source developer. They're paranoid about LGPL code, so yeah, I'd expect them to dislike the idea. They want packages to be something like BSD-3 or MIT, so there are no hoops they have to jump through and have zero risk of infecting their code. The reality is that it's only as infecting as you choose to make it or are as forced to. A dev can do that. A user cannot. &gt; if it uses GPL code it must be released under a GPL-compatible license, if it's released at all. but not the other way around Also, numpy (BSD-3) is GPL-compatible, per the numpy devs &gt; Yes. The numpy license is compatible with the GPL license, so code from numpy may be incorporated into GPL programs. https://mail.scipy.org/pipermail/numpy-discussion/2012-May/062584.html &gt; This is a lax, permissive non-copyleft free software license, compatible with the GNU GPL. It is sometimes ambiguously referred to as the MIT License. https://www.google.com/search?q=mit+gpl+compatible&amp;oq=mit+GPL+compatible&amp;aqs=chrome.0.0l3.3407j0j7&amp;sourceid=chrome&amp;ie=UTF-8 That's also the case for MIT
I tell the user to type ``python`` and support both Python 2 and Python 3 in my scripts. Really that's a horrible decision anyways for my users external to my company. For them, I use pyInstaller and build them a exe, which is slower, but who cares as long as they don't have to install anything. For users at my company, they're using Python 2.7.8-2.7.13. And yes, there are some noticeable differences in the 2.7 series.
Strings are a little slower. Dicts are a lot faster (as of python 3.6). So probably depends on your use case. 
Let's not upgrade anything or learn anymore!
GitHub link leads to the code it uses. 
If you're staying within the python language, flask is still faster than pyramid or django according to your chart. 
A more common and slightly more comprehensive definition works like this: * In the statement `x = 1`, `x` is a name and `1` is a value, and the name `x` is bound to the value `1` by the statement. * In a dynamically-typed language, values have types but names do not; a name can be bound to a value of any type, and after being bound to one value might later be re-bound to a value of another type. * In a statically-typed language, both names *and* values have types, and those types must be compatible. For example, this is why in a language like Java you would declare `int x = 1` -- this says not just that "`x` is a name currently bound to a value whose type is `int`", but also "`x` is a name of type `int` and cannot be bound to a non-`int` value". In a statically-typed language, typically there is a tool -- the compiler, for compiled languages -- which checks all types up-front to ensure they're used in legal ways. In a dynamically-typed language, nothing performs this check up-front. Related to this is *strong* versus *weak* typing; in a strongly-typed language, even if not statically-typed, operations involving incompatible types (such as, say, `1 + 'hello'` in Python) cause an error. In a weakly-typed language, the operation may be allowed, and may result in values being coerced/converted to other types. Note that people will sometimes claim Python is also weakly typed because you can do things like, say, `'a' * 4`, which has a value of `'aaaa'`. This isn't happening because of coercion or conversion; it's happening because Python supports operator overloading, and when evaluating the expression `'a' * 4` it looks at both operands to see if they define the operation for these types. Since there is a definition available for the `*` operator for these types (sequences define it as a repetition operation, when the other operand is an integer), it succeeds. You can make any arbitrary types you define work like this by defining the methods which implement whatever operators you like, and Python only allows an operation if that definition allows it.
Aren't you showing log-normal distribution?
I can see this is a sore topic in this subreddit, but it is still a confounding thing for newbies wandering in. - Current distros install 2.7 by default - Machine learning examples often don't work with Python 3, and this is what I'm beating my head against lately - I just installed a fresh Ubuntu 16.04 LTS, installed Python 3 and both `pip install --upgrade pip3` and `pip3 install --upgrade pip3` (and just `pip` for the last bit) all failed. (╯°□°）╯︵ ┻━┻ (Ok, private repo behind a proxy, so maybe upstream isn't the problem, but... (╯°□°）╯︵ ┻━┻ ) - Yes I'm sure there are ways to deal with it an other examples to find, but Googling just confuses the matter that much more I am not advocating for 2.7; I am just saying it can be really frustrating to try to get the basics working with default distros, nonworking demo code and all the 2.7 advocates near the top of search engine results.
What you'd define in `entry_points` is all the hooks available for your app. You'd probably do something pytest style and expose a hook for plugins to register themselves and do the full setup. Even better, you can use something like pluggy or stevedore to handle all the nasty bits for you and just worry about naming and calling the hook 
Have you seen [pew](https://github.com/berdario/pew)? Any reason I should prefer this?
tl;dr: Static type: x = "the variable x can only ever be a string now"
This sub has gone `0` days without 2 vs 3. 
When you're handling that amount of volume, nothing is easy.
https://www.destroyallsoftware.com/talks/useing-youre-types-good
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You can do the following (syntax may be a bit off, don't have a C++17 compiler with me atm). std::any a = "str"; a = 3.14; a = true; a = 4; std::cout &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; std::endl; So I guess you are somewhat right.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I think it is also very important to point out that you don't have to change the build process if you use ctypes. Cython can make shipping extensions more complicated.
I don't know about autocomplete but I use pydoc when I'm trying to look for something.
It all depends on your definition of long term. Is long term 1 year? People still use Perl 5. I still support code that only runs in Python 2.4 (welcome to Linux LTS...)
Thanks, also can you tell me what will i be able to do with python? Im focusing on learning but i dont know what to do with it after
That makes a lot of sense. Thanks!
Thank you very much, i will check it today.
Upvoted :)
This is sort of what people are claiming when they say Python is "untyped" -- that effectively every name in Python is of type `Any` or perhaps type `object`. Of course that doesn't work since you can still get runtime type errors in Python, but it's the general argument.
I made a hangman game today on my new HP laptop. Dad gave me a fairly new HP Pavilion g7 laptop, that he planned to get rid of due to broken hinge mount for the screen. I fixed the screen mounts by using bolts and nylon insert nuts. I used a hard drive from my old Toshiba (which had power/battery problems) and uploaded Ubuntu Linux onto it. Now I have my Dell desktop for my normal work, and my HP laptop for programming. 
It does, but that's not how the language feels to me. Features like macros, UFCS, closures/higher-order/anonymous functions, different generics, structural typing etc. create associations very far away from Pascal.
Awesome explanation, thanks!
Yeah, you **can** use MIT or BSD in something released under the GPL license; you **cannot** put GPL in any *combination* and release it under either MIT or BSD, because doing so would restrict the rights that the GPL code *copylefted* into that *combination*. A person who writes some Python tool that *uses* GPL code is not forced to do anything, unless and until that person *distributes* or *conveys* their tool to anyone else, by any means, which would include pushing it to a public repo on Github. The moment they do that, they've gone from *user* to *dev* and their code **is** GPL, whether they include a license file or not. It's both brilliant (from a FOSS-friendly perspective) and nasty (from the other side).
I see your point. Sorry, that guy was being a general dick so it was difficult to understand what he was getting at.
Also, to be accurate, Riverbank has provided an explicit *exclusion* that grants permission to FOSS, non-proprietary users of **PyQT** to use it under LGPL; it's released under GPL, but with that exclusion. Because they're the copyright owner to the entire software -- and nothing comprising that software incorporates anything that isn't permitted to be in a closed-license distribution -- they're also able to convey it with a proprietary license, which they choose to do so with a fee. It could -- and if I know lawyers, probably would -- be the position of the FSF that if you've got a public Github repo that uses GPL code in the GUI process, and no GPL code in the daemon process the GUI interacts with via API, then the entire project is GPL, because that's how you *conveyed* the code to others. If they were separate repos, with distinct installation, then I think you'd be safe, or if you had private repos and shipped both processes as separate executables with separate licenses.
Thanks for your answer. I'll have a look into Panda - unfortunately what I want to replace is part of a formula so I'm not sure this will work out.
I indent with spacetimes.
Thanks for the info and I'll certainly repost it in LearnPython 
Say the OP distributes via PyPi, and **wikipedia** is specified in `setup.py` as a dependency, but is only *imported* inside the project, and not *vendored* into it (i.e. no copy of **wikipedia** or any portion of it is inside the OP's repo) ... what *must* the OP do to respect the original MIT license? *Nothing*. When the user `pip install`s the OP's program a full copy of **wikipedia** and its license are transferred on to the user's machine; the license intent and requirements are fulfilled. Now, let's say the OP *vendored* the **wikipedia** code, say via a `git submodule`; also *nothing*, the **wikipedia** module and its license are also transferred, in their entire, to the end user, and the intent and requirements are fulfilled. Now, let's say OP actually copies and pastes some code from **wikipedia**, possibly with some modifications; now the OP *must* incorporate an explanation that, at minimum, says that the MIT license applies to that portion of code, and which incorporates a verbatim copy of the MIT license -- including the copyright section -- from **wikipedia** itself. Under the MIT license, at no point does the OP have to credit or otherwise attribute the **wikipedia** project, *beyond incorporating the copyright notice and license*, or its author ... though obviously it'd be nice to do so.
I think that the author is wrong about that. Python is a typed language. But it is not statically typed but strongly typed https://wiki.python.org/moin/Ten%20things%20people%20want%20to%20know%20about%20Python
they recycle their worker process every X minutes.
That should be nice. Recently I did that setup, it was very hardcore thing, especially for a first time. So I would appreciate such a guide for all novices.
Python is dynamic, which means it does checks on type-compatibility in each line of code at run-time. Python source code is compiled to python byte code just before it is run, however in the traditional CPython implementation that byte code is then interpreted, making it an interpreted language in the traditional sense. Whether code is compiled or interpreted and 'how much' however is a separate concept from whether it's dynamically or statically typed. However, there is a correlation that most statically typed languages are compiled.
Thank you for the great explanation! Can I ask, do static vs dynamic types make a big difference to the speed of the language? 
I don't see any API used, just executing youtube-dl in terminal...
People like to think they do. But, to take an example, much of the speed of Java comes from optimizations the JVM applies based on runtime profiling (when it mostly disregards the types declared in the source code, and instead looks at the types actually being used -- this is important given that the specific subclasses or interface implementations a program will be making use of often aren't known until runtime). PyPy is a Python interpreter which applies the same sorts of tricks Java does, and produces correspondingly large speedups as a result.
Web version is hosted on google app engine. All the procedure is same as the terminal version but instead of youtube-dl it uses youtubeinmp3 API when we uses the web version. If you give me your github user name I'll add you to that private repository after that you will to view the web version of the code in which this API is used. 
Same reason they say it's dynamically typed - because it is so?..
As a veteran engineer I can tell you that spending time and money upgrading dependencies is a necessary cost of doing business. Even if you do not get ANY "gains", a good organization will spend a percentage of their dev budget doing targeted upgrades and other "code hygiene". why? Because if you do NOT upgrade your own ecosystem incrementally to maintain compatibility with the rest of the world's software, the upgrade process will become less and less feasible, you eventually will become stranded on an abandoned legacy rock, with no way off except essentially a total rewrite. Believe me, I have seen this in action and it's not pretty.
Fine, but if you "upgrade" to what is substantially a different language, why not get the most out of your money and time by switching to a more efficient language?
I'm just going to be honest with you. If the contest is publicized at all, you're not going to win with the amount of knowledge you have right now. You will be competing against domain experts, or at least people with experience and knowledge that you simply can't get in two weeks. Text to speech is _extremely_ complicated stuff. If you want to learn it, go ahead, but be prepared it will take you much longer than a few weeks. If you just want to win the contest for money, start sending out job applications.
I want to do this in my code, but it feels so dirty. But it will also make debugging less frustrating. Are you using it? How do you like it?
I discovered the export button in Endomondo (Fitness tracking app), so now I am writing a script to do some more flexible analysis on the data.
&gt; the nice things about 3 (one of which IS overhauling multithreading.. GOOD for scale) It's not multithreading, it's asynchronous I/O. You think you're getting parallelism, but it's just concurrency. As for important libraries, those are almost always in C/C++ and with Cython you can easily generate wrappers for both Python2 and Python3.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You should ask this on /r/learnpython. The short answer is that you should create a patch corresponding to the shading you're using and manually add it to the legend.
https://docs.python.org/3/library/threading.html correct me if I'm wrong but all this is about real threads...
No. How so?
If you haven't written it up, I for one would be interested in hearing more of your experiences too.
Good point, python 3 now.
Fair points, you'll probably end up back at https://github.com/tiangolo/uwsgi-nginx-flask-docker if you apply those changes.
Here's a [github project](https://github.com/realpython/list-of-python-api-wrappers) that has a fairly comprehensive list of API wrappers.
in log(X), log(Y) graph log-normal would be curve (-ax^2 - bx - c), isn't it?
Pew is a nice pure-Python rewrite of virtualenvwrapper with a benefit of better cross-platform and cross-shell compatibility, but it also inherits some of the limitations of virtualenvwrapper which I tried to solve with Envie (see [my motivation](https://github.com/randomir/envie#motivation)). In particular, with Envie, you can: * keep environments close to projects (you don't have to keep *all* your environments for all projects in a single dir - but you can if you wish) * have multiple environments (dev/test/prod) per project (and don't care about uniquely naming them across all of you projects) * fuzzy-search &amp; activate (like: ``envie partial proj name dev``) * easily run a command in the project env, without explicit activation (like: ``envie manage.py migrate``, or from a hashbang: ``#!/usr/bin/env envie``) Also, note that Envie isn't exclusive -- it plays nice with your existing virtual environments (wherever they physically are), virtualenvwrapper, pew, vex, etc. On the other hand, Envie has limitations of its own; maybe one of the biggest being that it works only on Linux/Unix and in bash.
Welcome to the wonderful world of python. Now that you've got the control flow down, I think you couldl start working with functions. Notice how you have the yes/no logic twice? Why not pull that out into a function! def get_choice(message='Would you like to roll? '): choice = input(message) if choice not in ['yes', 'no', 'y', 'n']: return get_choice('Type yes or no: ') return choice Using that function, you can reduce the flow to 4 lines choice = get_choice() while choice in ('yes', 'y'): roll() # do your roll here choice = get_choice('Roll again? ') You could also add a function to validate that the number input is valid. 
They actually did answer your question.
Yeah, definitely more information in the root repo on pros/cons of ULID. I didnt bring all of the documentation over to the README in my repo, but note taken. I'll work to add more details about the spec. Thanks! Edit: Tracking this with https://github.com/ahawker/ulid/issues/4
It took me to the right page. Here is the problem that no one has answered. It converts the equal operator into a colon and then gives me an error. Here is a snippet of how data conversion: { "tasks": [ { "desciption": "Milk, Cheese, Pizza, Fruit", "done": false, 
Your best bet is to pick up a distribution that has this stuff pre-installed, like Anaconda.
and you wrote tests in python2 and had to migrate the tests and migration of tests introduced bugs in the tests
Most of the APIs are C (at least that Ive looked at). Just gotta wrap em into a python module (Im still trying to wrap my head around that).
Not the parent but also using it in a few projects. Our approach is to use it sparingly and mostly as a documentation hint to developers and also to make auto complete make sense of the type of values being passed to your functions. Smaller functions or when only working on builtin types we usally don't bother
That's really interesting, thank you! It looks a lot like what I am looking for.
I don't quite understand what their problem was with pickle. I use pickle protocol 2 and encoding="bytes" to move data between Python 2 and Python 3 and vice versa. The only thing you have to watch out for is surrogates on the Python 3 side.
I store a lot of data and use identifier functions all the time. I like this module a LOT. It seems deliberate and very well thought out. I'm definitely going to give it a try and see how it fits with my other helper functions. A few questions: 1. What is a `memoryview` ~ this is the first time I've seen that primitive in 10 years of Python programming. 2. Why are `class ULID`'s methods not implemented as properties? Do they make more sense as functions? 3. Are there any pros/cons of implementing a `format=` parameter so the ULID generator could insert separation characters like UUID does with `-`?
The issue I ran into most recently is someone had some horrific roll-your-own script for loading in a dataset that ended up breaking on IIRC the unzipping step, breaking due to a `bytes` related issue. Beyond that though, it's mostly just future-prints and minor stuff. 
That's the 'explicit over implicit' of the Zen of Python I suppose. Somewhat similar to the static types, that explicitness can also help reduce cognitive load. The explicitness being the casting of a and b to string.
Thank you for your response. I switched it back to dataType: "json". I google CORS Flask and found solution. https://flask-cors.readthedocs.io/en/latest/ I pip installed flask-cors and it worked. Thanks!
If I remember correct, python didn't have garbage collector from start. They relied on reference counting and just let recursive references to leak. Not a big deal for most python use-cases.
I've used Python and [Kivy](http://www.kivy.org) to make small, personal apps.
Very practical course on OpenCV. Best thing is it provides codes in both C++ and python
The problem with Anaconda : The version compliant with 3.4.1 Python is no more available on website (https://www.continuum.io/downloads). Its only available for 3.6 Python version. So, I installed 3.6 version. However, the challenge I am facing is that I am not able to locate 3.6 Python version on my laptop. I can easily locate 3.4.1 Python version on my Command Prompt as I know the location. But, I dont know the location of 3.6 Python version on my Laptop. I know it may sound stupid but I am new to programming. Any help in context of: 1. Installing pandas on 3.4.1 Python is appreciated, or 2. Identifying location of 3.6 Python version on my Laptop, is appreciated. Thank you. 
So basically what you need to do is... figure out if a string is an IP or a network-with-CIDR-mask? Seems like you could just test for "/". # Presumably set these in __init__ or something, you don't # want to be clearing them each time you add an entry. self.hostiplist = [] self.cidriplist = [] def add_ip(self): input = self.e1.get() try: if "/" in input: ip = ipaddress.ip_address(input) # Append to self.hostiplist. else: network = ipaddress.ip_network(input) # Append to self.cidriplist. except (ValueError, TypeError) as e: msg = 'Ooops: %s. Please enter an acceptable host or network IP Address.' % str(e) messagebox.showerror(title='Error', message=msg) self.e1.delete(0, END) raise e # If you want the caller to get an exception too. Although in that case maybe the # whole try/except business should be in the caller, like in the bottom code block. (Completely untested.) I removed the checks for `""` and `" "` on the basis that `ipaddress.ip_address()` will probably throw an exception with those inputs anyway so we may as well just use the one exception handler. I don't know if that's actually how it behaves though. Your general problem is you don't bother to try `ipaddress.ip_network()` after `ipaddress.ip_address()` throws (but there happens to be an alternate way of distinguishing the two inputs in this case anyway). You could also do it like this: try: ipaddress.ip_address(input) # It's an IP. except (ValueError, TypeError): ipaddress.ip_network(input) # It's a network. perhaps leading to a code structure like this: def add_ip(self, input): try: ipaddress.ip_address(input) # It's an IP. except (ValueError, TypeError): ipaddress.ip_network(input) # It's a network. def on_button_press(self): try: self.add_ip(self.e1.get()) except (ValueError, TypeError): # Neither. self.e1.delete(0, END) 
Why not load and save the count to a file?
Decided to improve you program a bit. Here is what I did: 1. First moved everything to `main` function in order to be able to write tests. 2. Then wrote tests, in order to make sure, that my changed didn't broke anything. 3. Fix code style to conform to [PEP-8](https://www.python.org/dev/peps/pep-0008/). 4. Then wrote `ask` function, to handle user input and error changing. 5. Then decided to add test, where user enters non-number value for `num_dice`, test failed. 6. Fixed failing test, by adding type validation to `ask` function. Thats it. Here is the final version: import random import time def identity(value): return value def validate(cast, value): try: return cast(value) except ValueError: return None def ask(options, cast=identity, error="Try again."): answer = validate(cast, input()) while answer not in options: print(error) answer = validate(cast, input()) return answer def main(): print("This program will roll as many dice as you need.") time.sleep(1) print("\nWould you like to roll?") roll = ask( {'yes', 'y', 'no', 'n'}, error="\nType yes (or 'y') or no (or 'n') to roll.", ) while roll in ('yes', 'y'): print("\nHow many dice do you want to roll?") num_dice = ask( range(1, 1000), cast=int, error="\nEnter a positive number, up to 1000.", ) print("\nRolling...") time.sleep(2) print("\nYou got: ") for i in range(num_dice): print(random.randint(1, 6)) print("\nRoll again?") roll = ask({'yes', 'y', 'no', 'n'}, error="\nType yes or no.") print("\nThanks for using my program!") if __name__ == '__main__': main() And tests: import pytest import roll @pytest.mark.parametrize('inputs, outputs', [ (['q', 'yes', '2', 'q', 'no'], [ 'This program will roll as many dice as you need.', '\nWould you like to roll?', "\nType yes (or 'y') or no (or 'n') to roll.", '\nHow many dice do you want to roll?', '\nRolling...', '\nYou got: ', 1, 1, '\nRoll again?', '\nType yes or no.', '\nThanks for using my program!', ]), (['q', 'y', '2', 'q', 'n'], [ 'This program will roll as many dice as you need.', '\nWould you like to roll?', "\nType yes (or 'y') or no (or 'n') to roll.", '\nHow many dice do you want to roll?', '\nRolling...', '\nYou got: ', 1, 1, '\nRoll again?', '\nType yes or no.', '\nThanks for using my program!', ]), (['n'], [ 'This program will roll as many dice as you need.', '\nWould you like to roll?', '\nThanks for using my program!', ]), (['y', 'x', '0', '2', 'n'], [ 'This program will roll as many dice as you need.', '\nWould you like to roll?', '\nHow many dice do you want to roll?', '\nEnter a positive number, up to 1000.', '\nEnter a positive number, up to 1000.', '\nRolling...', '\nYou got: ', 1, 1, '\nRoll again?', '\nThanks for using my program!', ]), ]) def test_me(inputs, outputs, mocker): mocker.patch('time.sleep') mocker.patch('random.randint', return_value=1) mocker.patch('builtins.input', side_effect=inputs) print = mocker.patch('builtins.print') roll.main() assert [args[0] for args, kwargs in print.call_args_list] == outputs You can run tests using `py.test`: pip install pytest pytest-mock pytest-cov coverage py.test --cov-report=term-missing --cov=roll test_roll.py 
Thanks! I've done some minor performance benchmarking but I do not have hard numbers against stdlib UUID's yet. This issue is tracking adding performance benchmarks: https://github.com/ahawker/ulid/issues/3 Edit: In an extremely un-scientific test, I wrote some basic benchmarks using [pytest-benchmark](https://github.com/ionelmc/pytest-benchmark) and ran them on my late 2013 MBP using Python 3.5.0. This is simply tracking object creation time `ulid.new()` vs. `uuid.uuid4() vs. `uuid.uuid1()`. Running a bunch of iterations puts ULID and UUID v4 in a similar ballpark with UUID v1 always being _way_ slower; not sure why. My hypothesis is that ULID creation with usually be slower than UUID v4 as it has to capture the current time, where UUID4 doesn't use a time source. benchmark: 3.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=5.00us max_time=1.00s calibration_precision=10 warmup=False warmup_iterations=100000) Name (time in us) Min Max Mean StdDev Median IQR Outliers(*) Rounds Iterations ------------------------------------------------------------------------------------------------------------------------------------------------------------------ test_ulid_new 4.3080 (1.0) 197.0101 (4.37) 5.7525 (1.0) 2.8383 (1.0) 5.8010 (1.0) 1.3961 (1.63) 1093;1937 30027 1 test_uuid_v4_new 6.5539 (1.52) 340.3550 (7.55) 9.1883 (1.60) 4.6774 (1.65) 8.3530 (1.44) 1.0700 (1.25) 1981;3204 38738 1 test_uuid_v1_new 6.8900 (1.60) 45.1060 (1.0) 7.7492 (1.35) 3.2051 (1.13) 7.0610 (1.22) 0.8580 (1.0) 4;5 155 1 
Boring day at the office?
/u/Dagger0, I was able to test this before leaving the office. Thanks so much, I got it working with your bottom suggestion with the two functions together. Much appreciated!!
Give PyGal a whirl I tried just about all of the python plotting packages and I found that one the easiest to get something going with.
Pretty cool!
Is "Streaks" part of the image or attached to the picture as a hashtag or something? I don't know anything about Snapchat, but the first would be very hard, the second relatively easy.
The link redirects to https://stackoverflow.com/questions/9218900/jquery-getjson-and-jquery-parsejson-return-object-object
My apology. They are part of the course team and excited about it. Before they joined the team, they were readers of my blog ( LearnOpenCV.com ) where we publish very high-quality Computer Vision and Machine Learning tutorials. So, even if my friends are biased, their excitement is genuine :), and their names are real. Also, the course starts at $249 :P
I don't like that the first is recursive, after all there is a recursion limit and it seems unnecessary to risk hitting it.
Congratulations on your first of many python apps! A suggestion. A common paradigm with input validation is using infinite loops: valid_options = ['yes', 'y', 'no', 'n'] while True: choice = input('Would you like to roll?') if choice in valid_options: break print('Illegal selection') That way you can have only one input point. Feels tighter to me. You could then expand this to a generic function: def get_input(choices, input_message, error_message='Wrong selection'): while True: choice = input(input_message) if choice in choices: return choice print(error_message)
Assuming rad and theta are numpy arrays (not matrix objects, use of matrix is discouraged), your code translates as: import numpy as np imx = rad * np.cos(theta) + imcen imy = rad * np.sin(theta) + imcen
Is that a real issue that a beginner is going to hit? There will always be a recursion limit so should we never use recursion?
Well, this is a purely iterative problem, ask until some condition is met. Using recursion there is already a bit odd, and there's also a small issue with it. If your problem is recursive, e.g. when you use a recursive data structure like a tree or so, then of course use it. Is my opinion. I'd go for def get_choice(message='Would you like to roll? '): choice = input(message) while choice not in ['yes', 'no', 'y', 'n']: choice = input('Type yes or no: ') return choice It's almost the same as yours except it doesn't need recursion.
Oh fuck me Lol. They must be really excited....
Yeah, I launch the particles one by one. But I need to do that for my implementation otherwise it would affect the output. Yes, I could benefit from refactoring, but I other than class, I have never someone read over my code and help me out with it. I was trying in a sense to improve it by introducing libraries, but you are right, a lot of it is probably due to my code. Seeing all the people doing research don't have knowledge in programming, they can't give me any feedback so I have to somewhat figure stuff out on my own
Great!
Did you try look at the actual code using pydoc or python -c "help('nmap')"
Why not just pass the whole input to .lower and not have to worry about any weird capitalization inputs?
I did it like this so someone could type Y Ya Yes Yeah Yup Etc. In upper or lower case And it always register since it only takes the first char. 
They are indeed! This is the first time we are launching a course and we got 414 enrollments so far with a few more hours to go. The course starts this Monday. When you passionately create something meaningful, you are ready to go out on a limb to promote it :). 
&gt; cx_Oracle 6.0b2 has now been released. Release notes can be found here. Install using this command: &gt; &gt; python -m pip install cx_Oracle --upgrade --pre This version should still work with an Oracle 9i database -- you must use an Oracle 11gr2 client, however!
If you have an issue, please report it here: https://github.com/oracle/python-cx_Oracle/issues
Glad you like it - we use beautiful soup and re for parsing the html and finding data in the html (for functions like get_current_securities), but for actually interacting with forms and triggering buttons, we use mechanicalsoup.
https://en.wikipedia.org/wiki/Transactional_Synchronization_Extensions : &gt; In August 2014, Intel announced a bug in the TSX implementation on current steppings of Haswell, Haswell-E, Haswell-EP and early Broadwell CPUs, which resulted in disabling the TSX feature on affected CPUs via a microcode update.
&gt; Surprised they got CPU savings, I've read python3 is still a little slower. By using Cython: https://www.youtube.com/watch?v=_1MSX7V28Po This is how people usually make Python faster - by replacing it.
I'm trying to convince myself to start writing a tool to auto-generate characterization tests.
My Data Structures prof always told us "if you can do it recursively, it can also be done iteratively." This is a man who also says every DS should be implemented with arrays in C and linked lists are satan incarnate. I follow his kind of mindset in *mostly all cases*, save a few rare functions or an interview question. If you don't do it well, it's super easy to explode in memory size the further depth you go. I mean, it's just how memory management works.
I noticed that, yes. Seems to be begging for someone to integrate into the SciPy stack...
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
So, as a person who moved from C++ from Python, let me give you what I thought was the ultimate advise: Do NOT, I repeat, do NOT try to apply what you about C++'s passing by value and reference to Python, because it's completely different, and trying to think otherwise will put you in a terrifying world of pain. Source: all the stupid mistakes I made when I started Python because I assumed that it used similar semantics.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt; * UPPER CASE * lower case * Title Case * camelCase * PascalCase * snake_case * kebab-case * Train-Case * ǝsɐɔ ʇɐq * çt̶̀͢͞h̴̷̨̡̕u̴̸̴l̡͜͞u͜͠ ̡͜͝c̀͞á̷̧̧s̷̀͠͠e̸̶͟
Well with Snapchat whenever you login with another device you have to relogin with the original device again, back and forth. I think, but I'm not sure.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
There can be many portfolios in Investopedia. Is it possible to get a list of all portfolios or should the portfolios be changed on the site?
Use a virtual env to install the pkg and then run the pydoc cmd on nmap.
Working on a python port of [bleno](https://github.com/sandeepmistry/bleno) starting with the macOS bindings using pyobjc + CoreBluetooth.
Not a feature yet, but it will be in the following week or so. Sorry!
Check this tutorial out I found it helpful. https://pythonprogramming.net/pygal-tutorial/
ohh sorry did not even know that that subreddit was even there helps a lot thanks
Certainly neat. I think cyclomatic complexity index tends to be something more valuable for identifying areas of code worth investigating.
I'm actually looking at writing a bot for this subreddit. It will look at posts, and try to decide if the post is better suited for r/learnpython instead of this sub. If so, it'll automatically comment suggesting that the op post their question to that sub. All in all, I want this bot to help new python programmers. I think python is a super welcoming language, and I want new programmers to feel welcomed into the community. 
The Ackermann function can be implemented recursively but not iteratively. 
A loop uses very little data, while each function call has overhead. Recursion is rarely needed unless you're being "clever".
I knew there was going to be an exception! Good point. I'm not denying the use of recursive alg implementation, just saying that in frequent use cases, an iterative approach is possible and may sometimes be more resource friendly.
True, and that's the main point. Pushing everything onto the stack every recursive step is a huge overhead and should be avoided unless it's necessary.
In practice python does discourage recursion 
Creating REST API scripts that parse through version firewall data and make sure they're up to date. Also, some automated scripting for end users to update firewall ACL's.
`async` is a registered keyword from 3.6. I’m not sure it is right to use it as name of the decorator. 
Embed a Spotify song into tkinter through the Spotify api. I tried using Spotipy but I could not figure it out.
I'm new to programming/python and have no idea what any of this means.
If you use the pycharm community edition text editor it has a built in spellchecker and pep8 checker
Can you put this into pastebin so it is more readable.
Print out 1.Yes 2.No 3.Quit and force them to input numbers.... hahahahahaha
OP only took A class for C++. I doubt he is able appreciate those semantics. You will need significant more time to get ingrained with that.
No worries, I understand, I'm still learning how to navigate Reddit and I appreciate the clarification. Thank you -Vince
[Addressed on the github page:](https://github.com/quora/asynq) &gt; To support Python 3.7, in which async will be a full keyword, the @async() decorator and .async attribute are aliased to @asynq() and .asynq.
I'd start with google
It's too bad python doesn't have tail recursion because that call is correctly tail recursive in just about any other language. And since the person is learning programming (and not just python) my argument would be that it is better for them to learn recursion than it is for them to learn perfect python.
It's like two lines in vim
https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/ This article got me started. Also give a good hard look at [Cookiecutter](https://github.com/audreyr/cookiecutter). You don't have to use it, but inspecting how other people package their stuff is helpful.
Serious question: do you work with other python developers? 
YOUR POSSIBLE MAKES NO EVEN WHAT DO
Based on the user, I'm estimating that this is blog spam rehashing other tutorials. Those who can't do teach. Those who can't teach paraphrase tutorials in blogspam.