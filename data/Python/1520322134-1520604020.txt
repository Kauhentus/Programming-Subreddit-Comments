But the real question is, what does even "PC LOAD LETTER" mean?
False. Mathematical operations on "real" numbers are not defined in a sense that they can be performed in finite time / have finite representation. However, one of the characteristics of a programming language is that it has some finite representation. So, the problem is actually with the language in which this calculation is expressed. Hardware simply uses a different language to express it, but the problem isn't with the fact that it is a hardware.
It's like arguing that SSL is broken because someone might have a camera in the ceiling filming your keyboard and screen.
Valid points, but I somehow doubt those were his worries
I worked with cx_Oracle for months. Installation on CentOS was easy but, oh boy, installing it on Windows was a real fight... 
No problem :)
On Linux (Mint, specifically) Sublime Text 3. On Windows, it depends: for large projects Sublime, for smaller/quick code snippets Notepad++ or VS Code. 
Windows : Atom, Notepad++ , Python IDE Macbook : Atom
Atom, but right now mostly good old Notepad+++. 
Wing. It may not be flashy, but it's a solid IDE with an excellent debugger and great support. 
Neovim with languageClient-Neovim, and nvim completion manager
For the hell of it: #!/bin/bash -eu hash() { local p read -s -p "Password: " p printf $p | sha1sum - | awk '{print $1}' } hash=`hash`; echo range=`echo $hash | head -c 5` url=https://api.pwnedpasswords.com/range/$range f=`mktemp` trap "rm $f" EXIT curl -s $url &gt; $f cat $f | while IFS=$' \t\n\r' read -r line; do if [[ "$line" =~ ^([0-9A-F]+)\:([0-9]*)$ ]]; then collisions=${BASH_REMATCH[2]} if [[ ${hash,,} == ${range,,}${BASH_REMATCH[1],,} ]]; then echo "bad, $collisions collisions for hashrange $range" found=true break fi else echo fatal error error=true break fi done
VIM 8 only
Gvim on windows, vim on linux and Macos.
Can someone please explain why jupyter is apparently so good? I use spider and have no problems with collaboration - just copy and run the code
Holy shit, you're a Shell master, for real. 
You can sentimentalize your code to cells and add comments or documentation in between and also very nice debugging. Once you are hooked you won't go back. It almost takes those nasty editing debugging processes out of the window. Just try it.
First of all, i don’t want you to take this the wrong way and stop contributing to this or any other open source projects. This is my opinion, and i would be more than happy to **** off In a world where aws cloudwatch logs and sentry are so widespread, why wouldn’t you use that? This to me spells out a fundamental issue: you don’t want constant writes to a production database writing logs. Even if you had a secondary database on another server/disk, i still see it as reinventing the wheel without getting any gain other than being able to point to something and saying: look what i wrote. To me, logs are like batteries, if you lose them you should be able to get new ones without much trouble (think individual server logs) because you already off loaded it to a log aggregator (that you don’t have to maintain)
I can fully understand that point, and this is why logging to a database is fully optional. I does what so every create a neat way to monitor requests and database changelogs, that also can be written to a file. I understand that you do not need in most cases direct logging to the database, but I had several clients that requested to do so and this is just a solution to this problem. If there's demand for it out there and possible, why shouldn't I be able to do so? For myself logging in django wasn't just enough to satisfy my needs, so I created a thing that solves this problem.
Good point. This library is still new and I am more than open to change and suggestions. I think that currently logging in Django is a bit bare and I want to develop a solution that is able to make this a bit more pleasant in experience. What would you like to have in such a logging library?
First most obvious approach is to define an enum class instead of a file: https://docs.python.org/3/library/enum.html You can do some cool stuff, like `IntEnum`, `@unique`, `@auto()`, using a tuple as value (id+sort) and/or add methods etc (see the linked docs).
What I don't like about it is, I can't see my variable space. I define a lot of functions, variables and work on my project for a couple of days and sometimes weeks at least. I forget about what I defined before, I forget dimensions, values...etc. I have to write variable.shape each time I use it. I wish we could have a tab on project that was dedicated to variables like we have on Spyder, RStudio or Matlab.
I’m a docker man myself, i log everything to stdout, then have docker log that to the syslog, then have aws send it to its logs... anything else just seems like bloat. The separation of concerns is perfect because: my app knows nothing and just logs to the console, docker knows nothing and logs to syslogs, and finally awslog agent does the final heavy lifting when it wants.. i don’t have to maintain it — out of sight, out of mind
A variable inspector already exists for the classic Jupyter notebooks as an [extension](https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tree/master/src/jupyter_contrib_nbextensions/nbextensions/varInspector). However, it has not been ported to Jupyterlab and is an [open issue](https://github.com/jupyterlab/jupyterlab/issues/443) on their Github page. They have indicated that they welcome any help with porting the code from classic Jupyter to Jupyterlab, which according to one of the contributors "should be pretty straightforward to adapt the code". So, if you (or anybody else here for that matter) is able and willing to port the code, please consider making this really useful contribution to the project.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ipython-contrib/jupyter_contrib_nbextensions/.../**varInspector** (master → 949e2a6)](https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tree/949e2a667225ef81d9898c6ff2768161baa0c257/src/jupyter_contrib_nbextensions/nbextensions/varInspector) ---- 
You can actually do that using ipython Magic commands. %whos should hopefully help you out. More Information: https://stackoverflow.com/questions/28678438/how-do-i-inspect-one-specific-object-in-ipython "The command whos and linemagic %whosare available in IPython, but are not part of standard Python. Both of these will list current variables, along with some information about them. You can specify a type to filter by, e.g." More cool jupyter tricks: https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/ 
well and this is also possible with this library, if you want you can just log everything to a file - out of sight, out of mind - just disable the flag to_database. but then it also logs every request (which is not always needed) and if someone changes something in a model of maybe particular interest. So you can log when people log in and see who did what easy.
Emacs
/r/learnpython
tq 
emacs
The official documentation is where I started
Distutils has been around for a long time, and is shipped with CPython. Setuptools adds new features to distutils and wraps it essentially.
Adding to what has already been mentioned t is convenient to have your code running in a server that can be accessible through a browser. Set up a server on a digitalOcean droplet and you have access to your code. It is also very handy for classes, tutorials and reports. Though the multi-user aspect in implemented through jupyterhub, which I have very little experience with thusfar.
Thank you! I wish I knew more about coding, I am an economist doing numerical computations mostly. But I am getting better at regular coding and started doing things outside numerical analysis and data work with codes. Hopefully I get to the point I can contribute more to Open Source projects. Meanwhile I am trying to write modules for numerical methods and provide the code.
Thank you so much for this. I did not know that
Thanks for the response, but this much I already understood. I guess what I don't quite know is following: 1. Is distutils development basically frozen and new development left for setuptools? 2. Are there situations where distutils should be preferred over setuptools? 3. Where exactly is the border between them? Feel free to answer if you know the answers, but feel no obligation to do so. I can always read about this sort of thing myself. :)
1. Not exactly "frozen" but new features usually go to setuptools because it is easier to develop new features outside of CPython itself. 2. Only if you need to depend on ancient OSes/Python distributions without a means of easily installing setuptools (or if you don't want an extra dependency). 3. I'm not so sure about this one. Setuptools in my experience has done a pretty good job about wrapping and hiding distutils. But ymmv.
try to write a little program, and Google how to
The variable inspector can cause issues though... I had a dict with 50 million keys, each with 7 np arrays with less than 1000 values. Once I created the dict, my notebook would all but freeze. Once I turned the extension off, it was fine. So just a heads up if creating very large variables. 
I really like [pyinstaller](http://www.pyinstaller.org/). Just make sure to take a good look at the docs as it has quite a few interesting features. 
Excellent thanks for the response. It sounds similar to the usual arguments you see against putting popular packages in the standard lib. E.g. you could maybe put requests in the standard lib, but it would then be stuck on the cpython development cycle losing a lot of flexibility. It seems that the current method of bundling versions of pip and setuptools with cpython itself is a pretty nice middleground. Following my build instructions in the first article will install those two packages as well so it's not really an issue there. Once again thanks for the info!
[inline plotting](https://stackoverflow.com/questions/19410042/how-to-make-ipython-notebook-matplotlib-plot-inline), [markdown content](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html) [latex typesetting](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html?highlight=latex#LaTeX-equations), [widgets](https://jupyter.org/widgets), ...
Your statements would do well in politics, but not in precise sciences. What do you mean when you say "built on"? What exactly do you mean, when you say hardware? But, really, I think that this vagueness is the result of your own confusion about things you write about. To try to make it stand out, try answering yourself these questions: 1. Given FizzBuzz solving program, what, conceptually, can you tell me about it: does it exist in the physical world? (In Kantian terms: does it have an extension), i.e. can you give any physical properties of this program, s.a. for example its weight, its size, kinetic or potential energy? 2. If you believe that it does, (and that it is _necessarily_ implemented by some hardware, i.e. it is a necessarily extensional thing). Then, how do you explain the fact that you can make statements in general, about multiple copies of this program implemented by distinct extensional things? If you believe that the FizzBuzz solving program is a purely intensional thing, then how do you reconcile your previous statement "[all] software is built on hardware"?
Instead of inline plotting, you can even use interactive in-notebook plotting that allows zooming, panning, etc. Just use `%matplotlib notebook` instead of `%matplotlib inline`.
Atom due to its customisation.
[removed]
alisson.vastserve.com about
Unfortunately, "JavaScript output is disabled in JupyterLab" which means no in-line bokeh graphs. Does anyone know of a work-around?
pyinstaller -F super_awesome_program.py
As the other poster said, the issue is that this problem is already solved in a better way by many other tools out there. ELK, Graylog, cloudwatch, etc. It's not good practice to have your application code care so much about logging. Just log to stdout and send all stdout and stderr to a log file. If your clients want their logs set them up an instance of ELK, Graylog, etc and charge them appropriately. If you're trying to write logs for all requests to a DB that's just not going to scale. Also, like the other poster said, don't let this discourage you. You probably didn't really know about the other logging systems but now you have gotten some good feedback, chalk this up to a learning experience. 
Well, that's not a biased comparison at all.
&gt; Java &gt; * Not Awesome &gt; Python &gt; * Awesome &gt; Choose your side!
More Udemy spam.
What's the point of posting this here?
They're many ways you can 'freeze' your code,each with it's pros and cons,I hope [this](http://docs.python-guide.org/en/latest/shipping/freezing) can help you.
Difficult to "pull off" a name like `do`
Wow, what a triple-A shitpost.
Do you have a try with deoplete or ncw?
I use atom in the past, but it is too slow.
SB is nice, it is faster than vscode and atom.
Pyinstaller in my go to. Making a build script with it makes it really easy.
Sorry, about the delayed response. I was busy with exams and stuff. I'd like to contribute to this. Where do I begin?
i am newbie. so i just thought to post it 
Not at all. None just means there was no return from the function.
Which one is for people who can't layout a few items and fuckup a simple bullet list?
Something I did test out at one point was ignoring all imports inside `try:except:`, which means it will only rely on other parts of the code. But then if, for some reason, the whole code is inside a `try:except:` it will analyze on nothing. Would that be better, /u/patarapolw ?
I'll see your no, and raise you a 'Hell-no!'
That's a really good way to put it! Thanks for putting it into perspective, it makes much more sense now. 
http://pandas.pydata.org/pandas-docs/stable/contributing.html
A script that scrapes my wife's HR web scheduling portal and adds her shifts to my Google calendar. It would be easier to just listen when I ask her what days she works this week, but wheres the fun in that?
I also use pyinstaller.
The beginning of this tutorial talks about handling circular dependencies in flask: https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world The whole tutorial (what's written so far) is fantastic, and worth the read. 
A distributed RPC package. Instanciate a class, initialize it with a list of addresses, and then use the object as if it's local. Return values are lists of return values from remote machines. The plan is to use it in a dev-ops environment to run sequences of events in a cloud of machines. The core is using grpc. 
Dealing with a steaming pile handed to me after the sudden departure of another developer: * A flask app with no documentation on dependencies (not even a requirements.txt file). Nothing like an archeological dig just to get the system to launch. * pipenv is part of the stack, but from all outward appearances its simply providing window dressing. * A dev environment that's apache w/mod_wsgi (which isn't necessarily bad in itself, except I have to rely on the admins to give apache the short, sharp shocks when needed). Of course, that's no biggie, because it looks like the mod_wsgi config is fubar'd and content is being served from `flask run` instead. * Zero documentation on what the production environment looks like (it's in the customer's infrastructure, and a different contractor handles all that). * The best part: there's virtually no hours left on the task order, so anything I have to do get this thing out the door and into production is largely out of the kindness of my own heart. 
I created an own Makefile to handle this :D, sounds oldschool but works great with all python version xD. The result is a single directory with executables, needed dll's, compiled pyd's and the other libs handle by own bootstrap. I like that shit, so i can compile my py-executable with different compiler, currently with gcc and clang. 
This really great -- thanks for making this. One small convenience thing that would make it even better would be adding links to the official documentation for the various operations in the solutions. 
That's probably why I have zero issues, I'm just using it to log things to a text file.
In case you were curious: I got to read about NLTK, from there about TextBlob and a few others in this domain that I did not know of previously. In the end it felt like all these were generic frameworks, so it wouldn't be as easy as I had hoped to get my specific problem solved. Because I didn't feel too much like learning any of these much to still have to write it step by step, I ended up doing it manually. I looked at the common issues that would prevent matching in my project and cleaned them (roman numerals to numbers, wording numeral to numbers. same case, no non ascii characters, no space between words etc). Then I used difflib on the cleaned input strings and the list of strings, tried various scores to see which one would give me an acceptable number of correct answers and false positives specifically in my project, and wrapped it up. That got me about half of the matches I need. I could match a few more with fine tuning the above, but it would give me too many false positives to be worth it. And I am afraid most of the rest will always need manual matching as the input strings are too messed up and I was looking probably more for a miracle than a good library :) Thank you!
Thanks a ton. This looks fantastic.
It's hard to say whether you should be using an aggregate or a filter without understanding what you're trying to accomplish. The above seems like it gives you an airline, the day of the week and (assuming cancelled is a 1/0 bool) a count of the cancelled flights on that day? You could plot the above...but what's the question you're trying to answer?
Except Jupyter isn't crap
Don't host bots on Heroku. The Heroku instance sleeps after some time of inactivity, and that may cause the bot to misbehave, not respond or outright stop working. Just rent a cheap VPS. There's loads of them for like $3 a month, which is less that you'd spend with an eletricity bill if you were to host it at home. Now, an article comparing different VPSs. That's what I'd like to see.
 I have learned how to do a proper install of ubuntu onto a flash drive. reformated my hardrive so i can transfer info between platforms. and I think today I'll be rid of windows. just one question. you listed the first step being uninstall windows. is there a reason for doing that? cause I was just going to do a USB bootable drive install of the Desired Operating system and let it rewrite the rest of the drive. I feel like unless there's a reason uninstalling windows first it would just be a waste of time. 
Can you explain the process of using the makefile for this or provide some documentation please. Much appreciated. Thank you in advance. 
Thanks for the link, this is the first I've seen pyinstaller
Same here.
I rather like pyinstaller. I had this problem at work this week and i was going back and forth between pyinstaller and py2exe and ended up just kind of picking pyinstaller on a whim. It worked great though
Do you know if you can export your keras model as a .h5 file and then use pyinstaller or some similar app? 
pynsist is pretty awesome for windows. I love nuitka, it works really well for most stuff and is cross platform (mac/win/linux).
I don't understand your comment. I was specifically contrasting the situation with floating point maths in the 1970s and early 80s, prior to the adoption of IEEE 754 maths. Today, provided you follow the standard, there is no possibly way for 1.0/x to cause a Divide By Zero error unless x == 0. And nearly all computers (mostly) follow the standard. And don't tell me "That's not how you compare floats." -- that is pure superstition. There's nothing wrong with comparing floats for equality when you know what you are doing. And if you don't know what you are doing, then *however* you compare them, you'll be doing it wrong sometimes. 
I made a shift scheduler for my sister's restaurant and it's been a godsend. Everyone puts in their preference and absolute cannot works into a webapp, the all makes three proposed shift schedules and the lead manager picks one. I get $40/week in credit. Everyone loves it. Best part for me, it adds her shifts to Google calendar so I know when to pick her up (I coordinate w parents)
haha no, there was actually no reason for me to write this. You don't have to "uninstall" a system. I'm just still angry at windows :p ; I'm very happy that you are trying unix systems ! Please take your time and don't be afraid to ask questions. These arcanes is a bit complicated but with persistence, passion and hard-work you'll be greatly rewarded. Have fun !
Here's my Makefile for a reasonably sized cross-platform nuitka build that compiles everything and makes installers for windows and OSX. I use whitebox packages to build the pkgproj for the osx installer, and NSIS for windows. https://gist.github.com/bitwisecook/3b941b4f468ee62869ecb74fa126e164
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kokimame/joytan/.../**devscript** (master → f795806)](https://github.com/kokimame/joytan/tree/f79580682132e0b9f23e9a75a44a7519da7eb460/devscript) ---- 
I don't think you need to know more than `--onefile` and `--noconsole` (depends on what you're distributing).
1. import re 2. ??? 3. Profit.
Does performance take a hit with these installers?
If you know the platform you're building the executable for, you can just distribute the python interpreter in a virtual environment, populate the env with the required libraries and tell the main script to use the virtualenv's interpreter with a shebang.
for your purposes id suggest maybe a run-through of pandas - showcases the awesome power of python at the data science/visualization level (and maybe a gateway to matplotlib for specialty purposes). sticking to standard library stuff: id say generators/iterators and text processing have good appeal, resemble plain english in syntax, and seem applicable to the work you do. 
oh my god, thanks &lt;3 btw. if someone was wondering why this answer doesn't work, is because it should be: if True in [c in questionset for c in notpossiblechars]: continue else: break
An IEC 61850 (XML) parser that builds configuration reports based on Substation Configuration Language (SCL) files. (Power delivery industry)
Didn't notice that you use it in a loop
&gt; `%matplotlib notebook` TIL. Thanks
Yeah re. The heaviest way. Looks like it will be hard to deduce which one from regex compilation + capture vs double iteration will run into a performance issue 
Hmm, what do you mean? Im new to programming, so I don't know what are you talking about xd
Yes, build your project in c++. :P
Finishing up a chapter of my first book, Python GUI programming with TKinter, which will be available from Packt publications in June. Just finishing a chapter on the Canvas, about to start the last chapter on packaging Python applications for distribution.
Do not click. More spam crap.
You're more likely to find the help you need by asking specific questions (if those questions are Django-specific, asking in /r/django ).
Regular expressions are the swiss army knife to work with strings. With it you can create patterns to match a format, capture substrings. But before using it, Python will compile it into a lower level representation. This way, regex are an optimised way when working with a same string format which might very loud to implement in Python. But this is overkill in your situation.
I made a small thing. import sys a=int(raw_input("Step? ")) x=map(int,sys.argv[1:]) g=map(str,x) m=max(map(len,g)) for i in g: print str(i)+" "*(m+((int(i)-min(x))//max(a,1))-(len(i)-1))+"#"
If you tell him he needs the decimal module, he gets the crazy idea he needs the decimal module. The person I responded to had a silly answer. &gt; It's more of an aside In other words, it doesn't matter. Don't check for floats ever exactly equaling a number. Use a tolerance.
Do you need to use Python 2 for your job or for your employer? If not, you really should use Python 3.6.
Cx
Pyinstaller is great. Just make sure you test in on a virtual machine. PyInstaller has a habit of not including all the DLLs you need, especially for packages you write. You need to force include them. Also, always start with the debug flag.
Yes, much more with the `--onefile` option. It's entirely startup costs though.
It shouldn't, the installer is basically just a zip archive that unloads a python interpreter executable and all the relevant libraries. But it automates the steps to make shortcuts and stuff so the user doesn't have to know about python at all.
Good to know!
PyCharm Sublime Text 3
I recommend pyinstaller which also works fine when using kivy. Have a good look about how to make a proper .spec file; on my side i had to include some dll so that the executable could work on any windows machine. 
1. I thought "working" could also mean coding at home. 2. I sometimes challenge myself to a game of code golf (shortest program you can make for a certain task). Python 2 sometimes shaves off bytes - my last challenge used the *cmp* function.
Pycharm has an embedded JRE, I believe a 1.8-ish version last I saw.
&gt; But what if what he needs, for what he's doing right now, is decimal math that behaves the way it does in his arithmetic class? I've been programming in Python for 11 years and I'm an aerospace engineer that uses Python to do math everyday. I expect Python to behave the way I was taught in my 14 courses of college level+ math courses. Thankfully, it does. Nobody cares about the 10th decimal place of the answer. Just round the stupid thing. &gt; You're telling them to unlearn one of the first lessons they learn in Python. Which is? Part of a good tutorial on floats shows that &gt;&gt;&gt; 0.1+0.2=0.30000000000000004 That should come soon after print('hello') and `1+2`. You don't need to say why, just that it does. A good tutorial doesn't explain IEEE. &gt; Introducing a module to them, but explaining the tradeoffs, is a good way of simultaneously delivering a result and educating them.
Hm, it'd be nice to be able to explore the values like you can in Spyder. Seems like an easy addition.
&gt; I've been programming in Python for 11 years and I'm an aerospace engineer that uses Python to do math everyday. I expect Python to behave the way I was taught in my 14 courses of college level+ math courses. Thankfully, it does. And OP probably just needs it to put the right numbers out. Thankfully, the decimal module gives them this. You both get what you want! &gt; Nobody cares about the 10th decimal place of the answer. Just round the stupid thing. Unless they do, for whatever reason. &gt; Which is? That you compare objects using '=='. Now you're saying "Compare objects with '==', unless they're floats, then test ranges.' &gt; You don't need to say why, just that it does. And why not tell them how to get what they want when they ask on reddit? What's the harm in giving them a reason *and* giving them a solution?
Ressurrecting an old project, secure block store server (akin to AWS) using public keys to assign ownership anonymously. github.com/tantalum7/hiddil.git Mostly as a more practical storage backend for an Evernote replacement I've been working on. github.com/tantalum7/dictata.git When using FTP, the only way to do reliable transfers is upload, then download and verify which is slow. Would be nice to get a hash of the data uploaded to verify integrity. 
What's the harm in giving them a reason and giving them a solution? I gave 2 solutions and explanations. 1. It doesn't matter. Don't worry about it. 2. Use a tolerance and specifically math.isclose to avoid the problem. You did not give a solution nor an answer. The answer is not, use some module that almost nobody doing math uses, which you didn't even suggest. &gt; Unless they do, for whatever reason. Not everything is theoretical. Most people just want an answer. The answer is yeah, it's an oddity of floating point math that we all deal with using some sort of tolerance or we just avoid comparing floats.
Show them what you are achieving for your job/company, how you create value for them, with code. Tease them with the non-techie things first..
Use pandas and plotly dash to create an interactive dashboard.. business people love dash(boards) and they can learn todo it them selfs as well!
What happens?
&gt; I gave 2 solutions and explanations. &gt; It doesn't matter. Don't worry about it. That's a terrible solution. &gt; Use a tolerance and specifically math.isclose to avoid the problem. If that's acceptable for their problem domain, then yeah. But that's making a lot of assumptions. &gt; You did not give a solution nor an answer. The answer is not, use some module that almost nobody doing math uses, which you didn't even suggest. I use it all the time, indirectly. In fact, in my line of work, using a float can get you in big trouble, or at least a fast-track to a failed code review. &gt; Not everything is theoretical. Most people just want an answer. That's the point *I* was trying to make. If they require decimal precision, then the decimal module is a solution. &gt; The answer is yeah, it's an oddity of floating point math that we all deal with using some sort of tolerance or we just avoid comparing floats. Or we avoid floats, if that's not good enough. 
Sure I’ll do that 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/django] [Looking for someone to collaborate with me on the project](https://www.reddit.com/r/django/comments/82hbm9/looking_for_someone_to_collaborate_with_me_on_the/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Lol, no. You'll be running your bot on a "worker" dyno (heroku's weird name for a non-web-facing server), which **never** sleeps as long as it's running and also isn't subject to the hours-per-month limit. Heroku is perfectly suited to hosting small bots and I'm pretty sick of the dpy community's hatred of it
I create a relocatable virtual environment, then package it as a rpm (using fpm).
I think a simple fix could be that the file rat_trialData.mat needs a more accurate file location description. The computer probably is not able to detect the file unless you state the specific location: example - C://Users/files/etc 
Your question has 3 answers. 1. To create an executable package that doesn't need *python*, you can use cxfreeze or py2exe, both I've used before and would recommend. 2. You will still need your users to install DLL packages like opencv. But not the dev package. Just the runtime package. You can possibly get away with including them when freezings. However, you are probably better off creating an installer after freezing that includes this sort of thing. 3. I've not found a way to package up keras. Keras invokes runtime compilation of c++ code from your python code. That's why sometimes it can take a while to load your model. It is compiling the support functions under the hood. This requires the full dev environ to do -- c++ compiler, CUDA, etc. 
While I know this isn't that helpful without explaining it but here is a [full flask project](https://github.com/miguelgrinberg/flasky) also from [miguelgrinberg](https://github.com/miguelgrinberg). You really only need to look at the app folder. He has alot of files and configs for hosting and other odds and ends you probably don't have to worry about. In the most basic form I would have everything in the `app` folder and outside that a `config.py` and `runserver.py` and that's it. This [website](http://exploreflask.com/en/latest/organizing.html) also have a good write up on flask organizing. 
If you're under windows, look into the pywin32 extensions and the WMI framework. You'll find what you need there.
Why not both? You could disable any conflicting rules based on your preferences.
Did you mean to reply to the main post? 
No that is helpful. Python code is easy to read so it is not that hard to understand what miguel is doing there. Starred it. Thanke /u/antespo
I need to print a PDF report of 12k pages on a low memory server. I think I will use tmp files and pickle to avoid having things on RAM.
Its gonna be a struggle to teach non-programmers anything worthwhile, the mindset required is a bit of a shift in consciousness. You can ignite their interest tho. I would focus on what makes Python unique: You can build a neural network in 11 lines of code https://iamtrask.github.io/2015/07/12/basic-python-network/ You can build a blockchain in less than 50 lines https://medium.com/crypto-currently/lets-build-the-tiniest-blockchain-e70965a248b There's some cool stuff you can do with Turtle or Tk that showcase how little is required to make an interesting program without external libraries. I know turtle is some basic shit, but appealing to peoples imagination is what makes a good programming talk.
I use both of them. They overlap some but experience has shown me that each has some stuff that the other doesn't. I know there was talk here and there about what it would take to unify them but nothing seems to have come of it. There is no harm in running both in your code pipeline. That's what I do for work. I also run bandit to check for a set of obvious insecure coding mistakes.
Python 3.4 is ancient and will make you look silly on your CV
I am trying to showcase a project idea through mind mapping. This is how I am able to create and prototype ideas pretty quickly. It is something that I believe all coders should get in the habit of. Please take a look at my git project posted and message me if you are interested. 
 import re STRIP_CHARS = re.compile(r'[/:\*\?\\\"\&lt;\&gt;|]+') question = input('Enter question name: ') question = STRIP_CHARS.sub('', question) print(question) Read about [`re.sub`](https://docs.python.org/3/library/re.html#re.sub) on the Python docs.
Missed this earlier, but yes — I actually built these apps as test cases for teaching. I've not used QtTest before, will definitely look into that though thanks for the tip.
Is the idea to build some sort of dashboard or an alerting system or something else? One of the techniques often used is identifying the users the system is for and build solutions around their problems. That would be something valuable to map out before you get too caught up in the system itself.
I found flake8 a little easier to apply to a big existing project because it is absurdly, stupidly easy to enable and disable rules for it. 
flake8 is better if you don't especially care about naming conventions, if you want the check to run fast, or only really care about basic correctness and white-space issues. In a large org you some code which is camel case and some which is snake case, in general code is allowed to exist in either style as long as it's consistent. With pylint, you'll spend a lot of time trying to configure the naming rules to accept one way or the other. pylint is of course more thorough and has better static analysis tools but you'll spend a lot more time getting code to be 10/10 on the pylint score than a perfect score with flake8. By the way if you do use flake8 make sure you always add --max-complexity=&lt;number&gt; to catch overly complex code. 
[Quart](https://gitlab.com/pgjones/quart) is fully type hinted (but maybe not small enough?)
It always annoys me when there's a typo in the title and now I've gone ahead and done it. :-/ 
I have started to build a crypto trading bot for bittrex. Made not much to post the code. But the backtesting works well.
I haven't used it yet but I think pycharm figures out your dependencies and makes an installer. It's the setup.py thing. Has anyone used this feature? Am I completely wrong about what it does?
I use pycharm on the daily so I will try and check this out. Will let you know when I do it!
It's not great for all cases. I like it for creating one-off scripts, especially if I'm going to share it. When I need to do more heavy lifting I turn to Spyder. I learned to code in RStudio, so I like Spyder.
Has anyone tried packaging grpcio with pyinstaller or cx_freeze or py2exe? I tried with py2exe and python crashes. So I don’t have any another option then pip to distribute my code. Also my code uses docker-py which needs OpenSSL version &gt; 0.9.8 to attach/exec on Mac OS(the issue is fixed with Mac OS 10.13.3) so I have to ask user to update their OpenSSL and python with brew. So I am looking for a better way to distribute my python code so I don’t have to care about all these.
From what I understand of your question, you could maybe use FuzzyWuzzy to search an input against your dictionary.keys(). It'll tell you which key is the closest to your input. https://github.com/seatgeek/fuzzywuzzy
As per recommendations, I've restructured the project as packages and renamed it to `vermin` (version minimum). And it's been added to PyPi also: https://pypi.python.org/pypi/vermin/ Thanks!
maybe show them some jupyter notebooks -- this not so much of programming. Maybe https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks has an example that is close to their work
I tried using cx_Freeze a while ago for a Numpy/Matplotlib script but it was a nightmare to get it to actually package all the dependencies.
Except it is. Notepad.exe is more useful.
Is that the whole error? In my experience that would be the _last_ line of a whole lot of useful output. Paste _everything_ from your command to the end of its output into a [pastebin](http://pastebin.com).
Well of course, you didn't pay unlike them, of course you're evil one. Just like you are when you ignore one thing on pep8 and some retard starts yelling at you. Aren't communities fun?
Read the sidebar for instructions on how to indent your code so that it displays properly and folks here who may be able to help you can actually make out the content in your post.
I use PyInstaller for single .exe Windows GUI app in Tkinter. All installs have another simple Python -&gt; exe that looks at the network location for a new build and pulls it down to run. I used build .bat files. Here is slightly redacted version for my main app: :: No Command Prompt Window Section pyinstaller --noconfirm ^ --noconsole ^ --windowed ^ --onefile ^ --clean ^ --noupx ^ --win-private-assemblies ^ --name my_project_name ^ --icon .\my_icon.ico ^ --workpath .\compile\build ^ --distpath .\compile\dist ^ --specpath .\compile ^ --key AAAAAAAAAAAAMYKEYHERE ^ my_project_name\main.py When debugging, remove the following lines so you can start from console and troubleshoot any issues: --noconsole ^ --windowed ^ You may have to add a few `import` statements that you don't actually use if there is any issue with PyInstaller finding all dependencies. I think I'm doing this with my SQLServer package. I don't remember.
thanks ! works neat. I was thinking too much - performing fuzzy search is exact what i was looking for.
fixed, sorry native sas programmer and new poster so picking up a few things.
No worries. By chance did you copy/paste that file location? backspace over the line completely and try typing it out by hand. Looks like you have a hidden unicode character within the string. 
Is a messenger script shell! Kk
Awesome stuff thank you for sharing 
Will try that I copy and paste. 
I tried cx_freeze with some pyqt submodules but it always includes the whole packages.
You're welcome. I've had so much fun exploring numbers with this tool that I wanted to share. 
Why is it callrd freezing your code?
What are you trying to achieve with this script ?
pylint is very whiny, for better or worse. Some of those checks still exist for legacy reasons, but aren't even correct anymore (e.g., hanging indentation checks that were added before PEP 8 improvements to clarify). You'll have to spend some time configuring and silencing things in pylint before it is useful. I believe pylint is strictly a superset of flake8. Some of the checks they share might different in the small details (I remember they used to handle two lines between top level functions slightly differently; one of them included top level variable assignments and the other didn't). In any case, pylint is pluggable, so if hypothetically flake8 had a useful check, you can write a pylint plugin for it if it hasn't been written already.
Slack bot for work automation. It's gonna make queries to our database and format the data to be displayed on our slack channel...
Most open source projects use Flake8, for two main reasons: - Flake8 is just as powerful for catching errors, while Pylint also suggests avoiding some tricky-but-useful features. If you just want to catch errors (eg undefined variable) and ensure that your code is idiomatic Python (ie PEP8), Flake8 is the way to go. In my experience it's easy to get code right first time with Flake8, but very hard with Pylint. - Plugins. Flake8 supports plugins for many things that Pylint can't do at all - from docstring style, to type checking (driving Mypy), to checking for graphically similar unicode characters [`flake8-confusables`](https://stackoverflow.com/a/26965332). It's also easy to write your own plugins, to drive custom static checks or anything else that reads code. And unasked-for advice: - whatever you pick, run it in CI and make the build fail if the linter has any complaints at all. - use something as close to the default settings as possible. - You'll have a period of transition between "no linter" and "everything passing" (except for codebases &lt;10Kloc). Fix the worst and the rarest warnings, then run *two* lint jobs: one with known problems suppressed, and one with everything enabled but only running against the diff range. You can then go back and clean up later. (nb: doesn't work for Mypy, but fine for style checkers)
Because you are effectively sealing it off from any further editing by collecting all the needed program elements and bundling them together for distribution. If you want to change the program, you edit the source files and simply freeze again into an updated version.
Why not use the built-in linter in your standard IDE? e.g. Pycharm has its own?
Have been messing around with Telegram's bot API and AWS Lambda to make me some robot friends! :)
HUEHUEHUE I'M BETTER BECAUSE I USE NODE. It's almost like Python is can be used for things other than websites, unlike Node. Have fun trying to use TensorFlow with JS
Between the name and the post history, it's a drive by spammer
Obviously, but it's still hilarious
You can get the source here: https://github.com/ConceptJunkie/rpn/ 
https://medium.com/@nazrulworld/make-sublime-text-as-the-best-ide-for-full-stack-python-development-b6a3148cb272
Thank you!!
Of course. Reddit is made in python. So is eve online. Python is used in lots of companies and fields.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I work in Python full time as an embedded software engineer. Makes it really easy to write portable code that can interact with different cpu instruction sets.
I already tried that. I listed a few of the things I have attempted in my original post but I may not have been clear, oops. Thanks though!
yeah, pycharm is awesome.
Last time I checked, Instagram is made with Python
Nice, does that gather dependencies too? I did something similar with a django app but I don't know what it included. I usually keep track of dependencies and *pip wheel* them.
Sonny, back in my day, way before the two triple aught, way before them See-attle Amazons were a thing, you had them uh **Computer Science** and you had them uh **Electrical Engineering**. Some schools even worked up **Computer and Electrical Engineering** courses. Now to get them hi-falutin' degrees, you had to get rounded. * a little discrete electronics time to understand logic and RAM and ROM * a little microprocessor coding time to make songs or blinky things * a discourse on mathematical methods and how IEEE floats ruin all your work * a fair introduction to data structures and Big O notation to understand complexity and scale * some time making programs in higher languages (plural, languages) to parse, calculate, report stuff * hopefully get some exposure to declarative/query languages like Prolog or SQL Nowadays I would imagine schools press for a lot more "applications of basic AI" or "web stack management" and a lot less "soldering LEDs together" in a software-focused curriculum, but you need to get *rounded*. In fact, if your school doesn't require you to solder some stuff, I recommend you go play with an Arduino kit and make a door alarm or a wearable LED light show. Diversity is strength. Sure, you can write programs in Python, for any number of purposes, it's a great language. It's far from what I would call a rigorous engineering background all by itself though.
Most software written in python is web-related, IMO. There's lots of talk about fancy data analysis libraries, but a lot of developers are paid to make web apps. A good pathway to being a software developer that works with python is focusing on web apps, such as flask or django. Figure out what kind of software you want to be involved with, write that software in python.
A small Regular Expressions library. Not trying to replace one, I just thing it's cool
It looks like you can at least write a Matlab matrix into a CSV, check out this link: https://www.mathworks.com/help/matlab/ref/csvwrite.html?requestedDomain=true Once you get that CSV, loading it into a pandas dataframe (my_dataframe) is as simple as: my_csv = “this is the name of the csv file—keep the script in the same folder as the csv file.csv” my_dataframe = pandas.read_csv(my_csv)
I have been getting this same error for months and it has been driving me BANANAS. I’ve tried to install Twised, Geopandas, Shapely, and all these modules and more have failed. Eventually I traced a bunch of errors back to my computer not having C++ 14.0 installed or something, and it linked me to Visual Studio Build Tools which I downloaded, but that didn’t fix it either.
Glad I am not alone. It really bothers me how easily others are able to fix theirs so easily (from google searches) but mine is just completely busted out of no where.
TextMate on my mac, IDLE on my PC. I’m starting to hate TextMate because it won’t indent correctly when I press enter. I’m liking IDLE the most right now because it’s simple. I’ve also tried PyCharm, Spyder, and Sublime. Looking at Atom next.
I got my friend into learning Python and she was having me help debug her code in Jupyter and holy hell, I do not wish that upon anyone, especially someone new. I like to keep it simple &amp; stupid. Maybe one day I’ll work with Jupyter, it does have some awesome features, but that day is not any day soon.
With the help of google.
You can even write [business oriented softwares](http://www.tryton.org) using Python.
Have you thought about using a UUID? https://en.m.wikipedia.org/wiki/Universally_unique_identifier https://docs.python.org/2/library/uuid.html
Non-Mobile link: https://en.wikipedia.org/wiki/Universally_unique_identifier *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^156873
I've been using basically only Python for the last year or so, other than some existing projects or places where I can't (HTML, etc). That said...in order to be a software engineer, you need to know more than one technology. Would you use a car mechanic who only used hammers?
Thank you. I'm actually starting to learn JavaScript, and plan to learn Java someday. I will definitely keep what you said in mind, and thanks again for the helpful reply
how about vscode？ do you have a try？
Same, I’ve tried running everything from upgrading setuptools to ezsetup and nothing has worked. At least it works on my mac and I figure out all the stuff I want there, but I have a PC for work and I’d like to be able to run all the same stuff.
I primarily use PC so I have no choice.
class Player: """This class creates the player, gets health and name""" wish_to_start = input("Do you wish to begin the game? [y]es/[n]o: ") if wish_to_start == 'y' or wish_to_start == 'Y': def __init__(self,life): self.life = 100 def start(self): self.name = input("Please input your players name: ") print("Welcome to the game {0} , your base health is {1}".format(self.name,self.life)) else: print("Farewell") player1 = Player(100) player1.start() class Enemy(Player): """This class create the enemy""" def __init__(self,life,name): self.life = life self.name = name def get_life(self): print(self.life,self.name) goblin = Enemy(50 ,"Goblin") goblin.get_life() 
 class Player: """This class creates the player, gets health and name""" wish_to_start = input("Do you wish to begin the game? [y]es/[n]o: ") if wish_to_start == 'y' or wish_to_start == 'Y': def __init__(self,life): self.life = 100 def start(self): self.name = input("Please input your players name: ") print("Welcome to the game {0} , your base health is {1}".format(self.name,self.life)) else: print("Farewell") player1 = Player(100) player1.start() class Enemy(Player): """This class create the enemy""" def __init__(self,life,name): self.life = life self.name = name def get_life(self): print(self.life,self.name) goblin = Enemy(50 ,"Goblin") goblin.get_life() 
**Pythonic Intelligence and Data Analyst** **location:** remote only **phd:** applied mathematics **ms:** neuroscience and physics **bs:** physics **intelligence experience:** compiling data with little or no ground truth and providing mathematical, visual, and written analysis **science experience:** developing numerical models of differential equations related to neuron function, constructing models of biological neuron networks, validating with experimental results, making predictions about network behavior through mathematical simulation **science topics:* neuroscience, chaotic systems, acoustics. **capabilities:* I can prototype unique approaches to correlation analysis in both continuous and discrete systems.
Next I was going to try downloading other versions of Python like 3.5 to see if it wasn’t broken before since I’ve only tried solving this problem in 3.6.4.
Take a look at MIT intro to computer science class. https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/
I could have done this wrong but I think I did it correctly. Here is the output: G:\&gt;cd G:\openpyxl-2.5.0 G:\openpyxl-2.5.0&gt;python setup.py egg_info running egg_info writing openpyxl.egg-info\PKG-INFO writing dependency_links to openpyxl.egg-info\dependency_links.txt writing requirements to openpyxl.egg-info\requires.txt writing top-level names to openpyxl.egg-info\top_level.txt reading manifest file 'openpyxl.egg-info\SOURCES.txt' reading manifest template 'MANIFEST.in' no previously-included directories found matching 'openpyxl\tests' no previously-included directories found matching 'openpyxl\sample' no previously-included directories found matching 'openpyxl\benchmarks' no previously-included directories found matching 'openpyxl\develop' no previously-included directories found matching 'scratchpad' warning: no previously-included files matching 'test_*.py' found under directory 'openpyxl' warning: no previously-included files matching 'tests\*.py' found under directory 'openpyxl' writing manifest file 'openpyxl.egg-info\SOURCES.txt' I also just wanna say thanks for helping. Really appreciate it!
So &gt; pip --non-cache-dir install openpyxl ? 
Well hell, I've seen numbers way more negative than that.
Google offers free online class for getting started with python. Automate boring stuff with python is also a really good free resource. Python can seem misleadingly simple when getting started. I think that's how it was designed. Once you feel comfortable enough start the book data structures and algorithms in python (Goldwasser, Goodrich, Tamassia) to get started with more challenging aspects of the language.
Uber's core api is / was python until very recently and they served millions or req/min
What’s the error that you get?
That doesn't look erroneous at all. Maybe it's a problem with your PATH? Were you using `pip` or `python -m pip` earlier?
Python is closer to JavaScript than Java. Js and python are interpreted languages. Js object ~= python dict, more or less. They’re close in other ways. You can try a little project where js is used for front end and python for back end. Overall, python is a general purpose language that can do almost anything Java can. 
yes :)
I had tried both. Just to be certain I just tried both: &gt; pip install openpyxl and &gt; python -m pip install openpyxl both returned the exact same material of: &gt; Collecting openpyxl &gt; Using cached openpyxl-2.5.0.tar.gz &gt; Complete output from command python setup.py egg_info: &gt; &gt; ---------------------------------------- &gt; Command "python setup.py egg_info" failed with error code 1 in C:\Users\keltn\AppData\Local\Temp\pip-build-6jnxaefg\openpyxl\ 
Eve is actually made of salt
When you first open Idle, you get an interactive Python Shell window. If you go to File / New File, it will open another window that is a file editor. There, you can type out in a whole program. You can then run it by going to Run / Run Module.
This, with the Nvidia docker runtime. Will probably need volumes mounted for some io. With privileged mode can also access webcams etc..
A game with cats.
I _think_ error code 1 is a permission error. https://superuser.com/questions/1216658/path-environment-variable-windows-10-echo-path-on-command-prompt-shows-only
piping data from various sources with various structures and trying to make it into one comprehensive data ball that I can ingest into tableau and analyze. So basic stuff like datetime, csv, requests, and database modules.
Not sure who's right but God dam watch the name calling 
Windows: Sublime Text 3
I dont get it. I write a python on an off at work and I don't get this t-shirt. What does "keal" "init" mean ? Also, is that supposed to be a double headed python logo ? 
OMG READ YOUR EMAIL!!!!!
Isn't that kind of just 'releasing' or 'publishing' ?
The lesson in screen shots must be next week
Instilling those poor naming conventions early, I see. 
Publishing or releasing would be making it available to the user. You could freeze your python project without ever letting anyone else have it.
Kealin.it or "Keal" "Init" is the brand and yes it's a double headed python logo designed to be like a biker gang jacket.
YouTube started in Python, and still is mostly.
This looks more like a flowchart than a Mindmap. 
I’m this horrible nutter at school. If someone were to ask who the “Python guy” is, people would shake their heads warning them, but point to me. I’m a great example of a very aggressive and annoying proponent of Python. However, I’m a CS student. You need a lot of background besides Python to get all you can out of Python and to know what you can’t realistically do (don’t want to do) in Python. Here’s an example of what you learn you can and can’t do with more CS backgrounding: * You need backgrounding in C/C++, this opens one to the world of Cython, C libraries, and all the low-level things Python is great for handling (Gray Hat Python by Justin Seitz). * But C/C++ will teach you that you should not build a game engine in Python or expect to use Python to script a 3d game (exception: Panda3d). In fact, besides the above, mobile development, and Javascript’s role as the master of web programming (maybe DOM through web assembly will fix this?) Python is used by industry to do anything. Furthermore, it might be the first choice or the only other competitor in the field. * Web back ends: Node, Python, PHP, Go * Computer Vision &amp; Machine Learning: Python, C++?, JS? * Big Data: Python, Go, Rust?, (various backends that can be handled through Python) * Asynchronous Systems: Go, Python, Rust, Node? * IT, hacking, etc.: Python, bash? New fields for Python: * Native app development: Pybee * Microprocessors: MicroPython * BIOS &amp; hardware testing: [BITS](https://lwn.net/Articles/641244/) There’s two keys two Python being the preferred language for a lot of things: community supported libraries, and language implementation. The former allows Python to outclass domain-specific languages in their own field (like PHP). The latter’s support and encouragement allows for creating useful subsets (MicroPython, RPython) and implementations and cross-compilers (PyPy, Stackless, IronPython, Jython, Cython, Transcrypt). Out of these two conditions, you have fortuitous decisions, like Nvidia deciding to release general computation tools to use CUDA as a Python library first. Or Google and Facebook releasing their machine learning and tensor libraries for Python. TL:DR what can’t you do in Python: * 3d game development (but: Panda3d) * Mobile app development (but: Pybee) * 1st class web scripting (but: Transcrypt and web assembly with DOM?) 
&gt;What can I do with python that's not data analysis? You could make a website, a game, or a desktop app. &gt;Would I be able to be a software engineer with **only** python? Seems like you're getting a lot of yeses, but I don't know how well you could engineer software without knowing more than one language.
Your function FindIt doesn't do anything with the argument allLines. It's just getting all the lines from a file, the lines aren't being passed as an argument. When you call the function FindIt in the last line, you haven't defined the variable allLines, which is the main thing causing the printed error. You also haven't defined the variable searchWord. You just called it word on the line before the def. Also, inside your FindIt function, you have the test if "word" in line: This will test if the actual word "word" is in the line. It won't test if the searchWord is in the line.
He said software not hardware
 a type error it says - object takes no parameters player1(100)
That would be a perfect resource for them.
Check between month and year
What kind of software? Mobile apps? Python + Django + React Native (Django is a Python framework for building backend for websites and the like. React Native is a Javascript framework that's really nice to build apps with!) Websites? Python + Django/Flask/Pyramid/many others + HTML, CSS, and Javascript.
To really grok software, I very much recommend getting your mind wrapped around the fundamentals of what a computer really IS at its core. You don't need to derive mosfet equations or design an instruction bus hypervisor. But at the same time, I see so many people trying to understand why their apps work like shit (numerical accuracy, runtime performance, etc.) because they don't understand the fundamentals.
Aye, I agree with you. You make a good point
Ive been looking! sorry its obviously very easy im just really new haha why is it giving me the brackets and ' '
I’ve done it for past 15 years or so.
Is that comma right? Before year?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
For sure. We are hiring python developers right now for our back end infrastructure and big data
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yeah, this is pretty much the poster child of the data oriented Python use cases. 
Best I can tell you is pyinstaller has a debug mode that you can turn on in the compilation process. If you are having problems running the .exe after it is created you can re-compile with debug on and that will give you the ability to see what is causing problems. 
This sounds so badass - how does this even work? Teach me your ways.
How does your company run python on an embedded system? I know there was some kind of micropython thing, but it didn't seem suitable for production code and required way more resources than the equivalent C code.
My technical background was Electrical Engineering, and I basically went from 16-bit machine code (thankfully there were only 2-3 assignments where we had to look up opcodes), assembly for a bit in class and at a co-op, then a bunch of C, some VB6/.NET, Java, now mostly Python. They all give you an appreciation for how the software stack is built up. Though despite that assembly, modern 64-bit processors are literally magic to me, caches, pipelines, prediction, oh my.
https://software.sandia.gov/downloads/pub/pyomo/PyomoOnlineDocs.html suggest that the python file passed to `pyomo solve` is a Model. `OSeMOSYS_2015_08_27_Pyomo.py` does appear to define a Model, but also hardcodes a solver (`culex`) and a filename, and whatever `instance.write` does -- these don't match the documentation's example model. opt = SolverFactory('cplex') instance = model.create_instance('OSeMOSYS_2015_08_27_Pyomo.dat') results = opt.solve(instance) # results.write() #model.solutions.load_from(results) instance.write('problem.lp', io_options={'symbolic_solver_labels':True}) Maybe someone was experimenting, or maybe this file is _not intended to be used with `pyomo solve`_. Do you have anything (eg, from [abhishek0208](https://github.com/abhishek0208)) suggesting that it _is_ supposed to be used this way?
also, dont know about pycharm, but VScode and atom uses the system linter [ I use vim, so yeah ]
I haven't because i'm not so familiar with Java, but I'm gonna work on this anyway to learn about windows and ctypes.
The official website states that it should be used with these files: http://www.osemosys.org/osemosys-pyomo.html And http://www.osemosys.org/get-started.html The official documentation only provides a solution through cplex and python: http://osemosys.readthedocs.io/en/latest/manual/Advanced%20functionalities.html#using-osemosys-with-the-solver-cplex I do have the normal interface working (momani) but it would be convenient to directly run it through the prompt, as I can more easily alter the data files in that way. 
Try JetBrain PyCharm. It will make learning 10x easier.
Awwww
Ahem.. is this the start of a new sub?
Could you go into more detail?
I read somewhere or another that it was mostly rails but I could be mistaken.
Well have you? http://dmitry.gr/?r=05.Projects&amp;proj=07.%20Linux%20on%208bit
I went and search for any recent article on that (you never know when a company decides to change stack), and it seems it is still Python. [This is from last year](https://thenewstack.io/instagram-makes-smooth-move-python-3/) 
OP just stroked out.
To me, Python is the "Jack of all, master of none" programming language. See [Awesome Python](https://github.com/vinta/awesome-python).
Really enjoyed your post. I learned SQL and VBA and now am moving towards Python. I want to dive right in and develop a Geothermal drilling program in the next few weeks. Any suggestions on books or companion software? 
I'd love to hear more about embedded Python other than micropython
Is there no micro python community?
I usually use py2app, but pyinstaller can be much smaller, especially for pyqt apps. 
I work for Vivint, the code we write runs on different security devices and panels. Python is used to interact with highly tuned linux builds via yocto/buildroot and also device drivers written in C / C++. We also have some code written in Go. It's nice that common libraries can run on the devices, on the servers, on our desktops and in containers. Python is also great for gluing hardware together and managing logic for complex systems. RAM is an issue, but you ca get away with *a lot* with tricks; might be worth a blog series.
Anything in particular you wanna know? I [replied here](https://www.reddit.com/r/Python/comments/82jkl6/what_can_i_do_with_python_thats_not_data_analysis/dvb4fpi/).
Python is a general-purpose language, so you'll find someone using it for literally everything if you look long and hard enough, but the majority of commercial Python developers fall into three major camps. * Data science, formerly scientific computing. You seem to know enough about this that you don't need help. * Web development. I don't have numbers to back this up, but it feels like this might be a declining segment with the rise of node.js. Even in decline, though, this is one of the most popular languages for server-side development with its practically native support of JSON, strong string processing utilities, and a domain where its slower execution time just doesn't matter compared to things like DB and network latency. * OS-level automation. The InfoSec guy who posted earlier would be in this niche. Python is a much nicer language than Bash, has great string processing support, and is installed almost universally in Linux distros, so when you get much past piping sed and awk together, it's easy to justify breaking out Python. Unfortunately, the 2-to-3 migration rift seemed to hit this segment harder than most, and the only real saving grace is that there hasn't been a good competing language in the space. Older tools tend to be written in Perl, some more modern tools got written in Ruby, and both of those took a much harder community hit than Python did. So, you're not imagining the abundance of jobs in the data sciences space. That's a field that's in rising demand, where demand for Python in its other major fields has leveled off.
Python has a large community behind it other than just it's scientific and analytical communities so it likely won't be disappearing anytime soon. You can easily make web apps or static websites using some handy frameworks like flask or Django and a fair bit can be done without even learning JavaScript. Going that route it will make it that much easier to pick up JavaScript too. If you get into software engineering you'll learn a lot of other languages and technologies too
Haws ma anglishe?
The important part is that you tried. 
If you had a Volvo, would you use a car mechanic who worked only on Volvos?
I'm pretty sure she was madenfrom a rib bone
Django
&gt; yocto/buildroot Bitbake all day? I can't stand Yocto's build system.
If have to know a lot more about what you mean to do to give recommendations. If you are part of a team building equipment for this purpose, Python may serve you well depending on the type of hardware you use to control the equipment, but chances are for any build that’s not from scratch, a group would purchase industrial control equipment that requires little programming, is done in a proprietary language, is manipulated by a web interface, or interacts with MATLAB. If you are talking about physics or engineering simulation software (you’re a geo engineer, relevant physicist, or applied mathematician) than you can either build a unique solution (more easily in Python) or will need to seek out specialty libraries available in either R, Python, or MATLAB. If you are creating monitoring, automation, demonstration, or educational software for such an endeavor, than Python is a very good choice, but the delivery greatly affects which libraries or accompanying software you will use. If you are working with developing or deploying hardware of any sort, than a lot learning and specialization will fall under the broader Internet of Things umbrella. Good examples of some environmental monitoring and machinery diagnostic projects (some involving Python) can be found at hackaday.com I would encourage something short of caution -patience - if you are jumping right into learning Python through a large project. However, here are a list of resources with introductions that I think you will (at least somewhat) find relative to your pursuit. * automation - Automate the boring stuff with Python (you should find that this would harmonize with your knowledge of VBA and SQL) * hardware engineering/debugging - Gray Hat Hacking with Python (certain sections are pretty informative about interfacing with different types of hardware, even if it’s they had not originally been designed to do so) * app development, data science - Udemy (lots of courses to help you use Python in more “common” ways that will get you up to speed fast with Python’s capabilities) * hardware programming - lots of resources on hackaday (for a while, Python could be used with the Raspberry Pi and Arduino platforms, but with the advent of MicroPython, compatible boards, and the support of the EU, Python is cutting itself a big corner in the hardware and micro controller world) 
&gt; BIOS &amp;amp;amp;amp;amp;amp;amp; hardware testing: BITS &gt; &gt; You forgot BIOS security testing, ChipSec.
That’s dope
Evidently it's all a circle. The number of times I've seen this argument get put forward, followed by "compiled code isn't C code" call-out by someone who has a link to provide... It reminds me of this joke: new prisoner arrives on a ward with all life serving inmates. First day, he notices them just sitting there and one of them says 5042. They all laugh. Other guy says 423... somone screams "aaahhh, that's a good one." and they all laugh once again. Finally, new inmate can't stand it and he asks wtf they're talking about, and they answer: we've been here telling the same jokes for so long that we just tell them by number now. Evidently, "compiled code is C" is joke number #498.
Yeah I don't like it either. I guess 3rd party manufacturers like it though, but I'm glad it's another team's responsibility :)
It should be. Thank goodness I have absolutely zero desire to be a mod of any form. Why don't you start it?
Embedded used to mean something else back in the day. When a full SoC like RaspberryPI costs $35 and you have boards like arduino on the market, an embedded platform might have more power than what we used to think of as an entire computer back in the 90s. In any case, think of it as a piece of hardware that has very specific devices (generally dedicate IO ports), not too much processing power to work with, and scheduling requirements (e.g. realtime etc).
That is what I'm trying to decide. If flake8 offers something more than we don't mind running both.
That shit's impressive.
Pylint seems to have a config file too, and if it is just a one time cost to write it then it won't be that big a problem for us.
Yeah, from Adam's rib.
Yeah, just running pylint by default produces a lot of output. And I too remember seeing a GitHub issue thread which highlighted that particular difference between PyLint and Flake8 but the issue was a bit old. I thought it might be fixed by now.
Badass - how’d you get into that?
I made an interface to make compiling py to exe easier. The package is found [here](https://github.com/brentvollebregt/auto-py-to-exe) and is easy to set up. It uses pyinstaller in the background. You may have to play around with the advanced section if you get errors doing it in a basic way.
Will you be able to go your whole career with only Python? Probably not. Is it OK to only know Python for now? Probably yes. Don't define your career based on a programming language. A software engineer's skill is programming, not a particular language. If you start out it's fine if you know only Python, but don't think of yourself as a Python programmer. You're a programmer, and you can pick up any language as it comes along. As luck might have it, that gets easier once you have one language under your belt.
vtk is also at the core of Enthought's Mayavi library.
Nope, not fixed yet :-/ If you still can't decide, there will be very little (if any) wasted work making your code flake8 compliant and switching to pylint later.
Retard isn't a name, it's what happens when you don't wear condoms and conceive a child at 12.
If you knew how IEEE 754 works you wouldn't be trying to pull all this shit out of your ass. Especially the last paragraph. Because like dude, you're just a bunch of atoms trying to work together, no wonder you're fucking retarded.
Hey, thanks for a detailed response! Initially we too want just idiomatic code but PyLint seems to offer a lot more thorough checks so we thought that just using it from the start keeps us in a good position for the future. PyLint seems to have plugins [too](https://pylint.readthedocs.io/en/latest/technical_reference/extensions.html). It has mention of docstyle etc. We don't have type checking yet ( because most of the codebase has been created by hobbyists - [Kodi Plugins!](https://github.com/xbmc/repo-plugins/tree/krypton) ) Is it just that flake8 plugins are easier to write or does PyLint have some technical limitations that inhibit it from doing some sort of Analysis? 1. And yeah the plan is to run these checks in CI when people create new plugins. 2. Because they're sort of agreed upon by the community? ( We do plan to do this btw ) 3. This sounds interesting but I'm not sure I understand this correctly. Can you please explain a bit more? Currently, the flow is: 1. Some user creates / modifies a Kodi Plugin. 2. Creates a pull request on a GitHub Repo. 3. Some basic plugin specific sanity checks are run ( this is not really code linting; just that some files are present etc ) 3. People review and merge it. Along with the plugin specific checks we also want to introduce code linters that will gradually help us to improve the quality of existing and new plugins. (Any thoughts etc in this are really appreciated)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [xbmc/repo-plugins/.../**8f0ca3275a9b609a068c6dd60d584d697865dd50** (krypton → 8f0ca32)](https://github.com/xbmc/repo-plugins/tree/8f0ca3275a9b609a068c6dd60d584d697865dd50) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvb705o.)
Same with instagram, pinterest, and quora. 
Dictionary of object is basically what you need, or nested dictionary, which allows you to easily generate a json document you could work with. However, storing your results into a sqlite database might be an interesting solution if you needs to generate some statistics reports
Not even JavaScript?
I think you mean Lot's wife.
At First a few words about my workplace. I am currently working with Windows 7 and 10 beside. For my complete process i installed msys2 tools for an easier using linux like tools and package managing. I have one main repository folder with all tools, runtime libs / env inside. Currently a bunch of * lang: C C++ python rust go lua tcl/tk * a lot of libs like: iup, wx widgets, ncurses As you can imagine i am on an experimental way to test some dev lifecycles and the interaction within beside my own pet projects. But anyway, inside my python folder env i have a standalone version with a junction points to standard installations(win-ex. C:\Python34) Make Process: I have a main Makefile and a Revision file wich i includes in the first one. It contains all build informations like app-name, major, minor, fix and the used python major an minor version. For each project exist an own Makefile Combination. As a not Gnu Make Specialist i created a simpley way to reach my target. Following steps will be processed until the end. * clean up build * create a single lib folder(inside my c based python bootstrap this folder will be used as main python path) * copy all needed python runtime libs to lib folder. Which libs i need to run i tested manually(Yes not much comfortable but a good learning curve to understand what a python env need to run as standaline app) * compiling c source file and linking against given python release information from Revision file. Inside this process i create a python[version].a lib from python.dll with gendef and libtool. * copy created executable and needed dlls into build folder. There could be some external runtime dlls for mssql and oracle driver which i copy into build path. * My own python script can be compiles into pyd's by using a Make Parameter. This is a little method to minimize the possibility of manipulating the revision by my colleagues. Finally thats it. I know its not a standard and maybe it sound much uncomfortable. But from my point of view i have a great overview and learned a lot of steps python are working. Maybe i will improve this process, but not yet. For me it is an easy way as the result of a great learning curve :). Hope this is a good to understand base description. If not please ask for some details.
If you can manage to standardize naming convention in your pull requests like adults, a combination of good `coverage` and flake8 will get you a really, really long way.
If it uses cython -- and it does, *if* cython was available in the environment when setup.py was called (aka pip install with no wheel) -- and has a pure Python fallback if it can't -- which it does -- then a significant drop in performance across two environments is pretty diagnostic that cython isn't available in the slower environment.
Python is big in lots of disciplines. Lots of use in web development, web scraping. Almost all the custom tooling in the Visual Effects industry is based on python. It's much larger in sysadmin work, doing a lot of the work that perl and shell scripts used to do.
Thanks! I ended up diagnosing the issue more specifically by tooling around with setup.py. Turns out I had cython but it couldn't compile upon install because of a gcc/build-essential problem. Now I'm back up to speed after installing those.
Apart from software written in Python, there's also a lot of software written in other languages that offers a Python scripting API. Two great examples are Blender and Salome.
He he, no problem I eventually found it, I should have RTFM :-)
so python goes well with salt?
New Python programmer here. New Redditor as well. Uploaded my first Python project to Github. It is a byproduct of a different project I'm working on. Its a class to measure elapsed time and count number of passes in parts of code. It is very easy to use and is inspired from tick() and tock() from Matlab. https://github.com/gulaki/code-timer Open for ideas and mods.
One of the things my job "sold me on" was that they get to learn new languages every 6 months or so. The people on my team use Ruby, Go, Python, JS, Java, Csharp, C++, blah blah blah depending on the project. That's a huge perk for a lot of engineers. I'm sure there are some places where you can do just Python but the majority of places I've seen just assume you know it and want you to know some other thing as well.
It took me way too long to realize you weren't talking about this [salt](https://saltstack.com)
reddit made of Adam's rib?
&gt; So is eve online. False, actually it's spaghetti. 
this is the error it gives me: Data must be 1-dimensional.
No, it can detect the file. I have verified it. This is the error it gives me: Data must be 1-dimensional
Oh, that's great to hear. Good luck with your project!
... The rest of the joke is So one day the new guy, trying to fit in shouts, "44!" and everyone suddenly go quiet. He asks the guy who explained it to him what's wrong. "You just gotta know how to tell it". 
I'm a full time Web developer, relying almost entirely on python every day. Yeah, you definitely have some other options :)
[blueprints](http://flask.pocoo.org/docs/0.12/blueprints/)
I suggest you read up on Docker, and also Docker Compose. Docker Compose literally changed my life, FWIW. Here's my try to answer your questions: 1. The overhead of a container is actually quite minimal. The recommendation in the Docker community is to have one service per container. Using Docker Compose, it's easy to "tie them together". Using several containers per VM is what most people do. 2. Typically using HTTP. 3. Not sure what you're asking, but I think the answer is yes :-) 4. Docker is a nice way to get reproducable deployments. One of its nicest features is that you can do deployments the same way all the way from a developers laptop up to multi server cloud deployments.
Yes - I work at a company that uses almost entirely python. If you know Django, flask, or pyramids, you can make web apps pretty easily. 
I once developed an "embedded" Python application - although really it was just on an Atom board running a highly customised Gentoo installation with an industrial spec touch screen bolted on. It'd be kind of a bad idea to try running Python on a 16-bit microcontroller or something. Not that it has stopped people [from trying](https://micropython.org/)
If you just want idiomatic code I'd start with flake8 - using default settings means that your code is consistent with both your and everyone else's code (so yep, community standards - used by eg Pandas). I haven't written a plugin for Pylint, but my impression is it takes more than the ~20 lines of code that a flake8 plugin will take. Re: workflow, I find it helpful to think about your goal and your strategy to get there separately. The usual end goal is that everything passes flake8 on every commit, using default settings. You can substitute pylint for flake8 in any of this, I just don't want to keep writing both :) So how to get there, without having to fix literally everything at the same time? The trick is to divide up existing code so you can fix it bit by bit, and ensure that new code always passes your *goal* settings (not the "I'm doing that bit later" settings). To divide up existing code, you have two options: ignore particular warnings, or ignore particular files (or directories). Both are useful! In your case, you'll probably want to configure flake8 to ignore each existing plugin (use an ini file or section), and also some common but less important warnings (which those are will depend on your code). In CI you then run two commands. `flake8` (no arguments) runs with all your ignores in place. `git diff upstream/master ./**/*py | flake8 --diff --config=empty.ini` runs flake8 with only the configuration from empty.ini (ie default settings), but only reports errors within the line range of the diff. For now, the latter command is doing most of the work. Now that everything is set up and working, you can wait as long as you like before coming back to cleanup. The first job should probably be to get the core running cleanly, or perhaps an example plugin to show best practises. As you clean each part, delete the relevant ignore config, and eventually it will be entirely clean! Finally, you can remove the diff-level linter from CI. [Here's an example of the alternative process](https://github.com/pydata/xarray/pull/1824), where you just do everything at once. Note that there are a number of tools that fix some lint errors automatically! Run each of `autoflake`, `autopep8`, and `pyformat` (in that order) - the trick is to commit the automatic output exactly, then commit any manual fixes for that in the next commit, then run all your tests before moving on to the next tool. On that note, automatic formatting tools are almost all built on flake8 too, and running eg `pyformat --inplace` and showing contributors the diff makes it really easy for them to see where their formatting needs to change. Finally, I'd suggest chatting with someone from https://home-assistant.io/ as they have a similar plugin-dominated platform and lots of automatic checks. Hope that helps! Feel free to keep asking questions, or PM me if you get stuck on something :-)
I know how this specific standard works. I actually had to implement it as part of AMF encoding. One thing that is kind of funny about you in a surprising way is how you are clueless about how much of a fool you make of yourself: you are arguing so emotionally about textbook truths, something that anyone who studied CS would've known since their first or second year in college. Are you projecting your own life story on me? -- That sounds very much like it.
I think if Software Engineer is what you aim, going with only Python from nothing is not a good way. Make no mistake if you are software engineer you can use only Python in my opinion as from Reddit to Instagram a lot of users point it out. However, software engineers is more than just writing softwares. It is more than coding. It requires solving problems with restrictions when you code, it requires you write more efficient codes. Now, not all the software engineers may agree with this but I think that what makes a good software engineer; a clean code, efficient code, solving not just algorithmic problems but also being able to solve environment problems. e.g. I am working in a sector that have huge requirements nearly every standard is more than a 1000 pages. That means just finding an algorithmic solution is not enough, it should also satisfy standards and it should be able to work efficient to run so it can be synced with other partitions and processes. It should have no more than a required memory limit or it should not allow some sectors to access other sectors memory. Now, these all can be learned with python but python makes you easier to code so if you are aiming SE with only python at the beginning it may be harder to become a good SE. I personally believe if you are aiming SE, this is a good pathline; Start with python to learn how to think algorithmic, first programming steps. Start changing your enviroment to maybe Java about when you start learning algorithms and data structers. Then again change your enviroment to C++ and study algorithms and data structures again. Then same for C. After these you should focus some computer theory such as finite state machines and learn programming languages. Little bit database and network programming. Then definitely operating systems, whole package with scheduling to semaphores. From there you can use any programming languages and head to being a SE or other programming based engineerings. It is good to know some computer architecture but not necessary. Can you be a software engineer without those? Sure. I have friends who studied electrical engineering and learn programming with Java after graduation they become software engineers. However they had some problems while coding, they are not familiar with how heap, stacks are stored at memory. How semaphores can help for multiple threads. So yes you can be a software engineer that uses only python, nothing wrong with that but I do not recommend you to become a software engineer with python only.
Nope it’s Django (which is a / the python web framework)
[Keynote from PyCon 2017](https://youtu.be/66XoCk79kjM) where they explain their stack.
For this kind of thing you don't really need to think much – just use the oldest, most popular and well supported driver i.e. PyMySQL in this case.
FWIW a package doesn't usually use cython at runtime. Cython is used to build the package by turning pyx files into c files, then a c compiler is just to turn those into pyd files (Python extension modules). There is no functional difference between using c vs cython except for the ease of use in writing the extension modules. For example, pandas uses cython to speed things up, but cython is not an install dependency of pandas, just a development dependency. 
thanks! this really clears some confusion
This... plus you may want to have a look at [collections.defaultdict](https://docs.python.org/2/library/collections.html#collections.defaultdict) which help a lot in initialising dictionaries
Youre England is very gud.
Have you seen the cookie cutter project? I'm not meaning to put down your project in any way - I've not looked at it properly - just wondering if it offers different features.
I have something I'd like to share! I had made a presentation in the last company I worked for, to introduce Python to them, and all the different ways it could be useful. I approached the presentation with the angle of automating our scheduled reports that require substantial manpower. At the end of the presentation, I had a nice demonstration, where I took our detailed annual sales data (500MB csv file, 3million rows, 15 columns), and showed how Python can extract the data, clean it through pre-written scripts and functions, and return visual reports and filtered results in less than 1 minute (steps were shown and timed in my own Jupyter notebook). Here is the public link to the presentation I gave them, I removed some information that revealed anything about that company. https://www.dropbox.com/s/6vtzub1ahbm72vm/Python%20%28share%29.pptx?dl=0 I hope it helps.
Looks interesting. I'll have a proper look when I'm not on mobile. One thing that stands out in the readme is that if you indent your code samples by four spaces, it'll format it as code and not as a quote. &gt;&gt;&gt; print('helloWorld') Goes to &gt;&gt;&gt; print('helloWorld') &gt;&gt;&gt; print('helloWorld') Goes to &gt;&gt;&gt; print('helloWorld')
The punchline I always heard is that people are in tears from the sudden eruption of hysterical laughter, the dude asks why they reacted so strongly, and they respond that they haven't heard that one before.
Also python. 
"I've done X" isn't an argument. At least to store all proper points you've made so far, I wouldn't need to waste a single bit, that's quite an upside. Have a nice day.
Maybe have a look at NLTK, it is great at this sort of language analysis.
I'd choose C over anything else to learn memory management. Imo, it's the most useful language and you can learn anything else after. On that note, I seem to have made a career based on 95% Python
(On mobile) Do “for item1, item2 in zip(list1, list2):” and build the output however you want: “output.append((item1, item2))”
Thx. I have done the tutorials and so I am still a bit new
That reminds me of one of my CS professors... he was *obsessed* with building a natural English programming specification/compiler. 
Alternatively, you can give `map` multiple sequences and it'll call the callback with them all, similar to Haskell's zipWith, so e.g. map(lambda d1, d2: {**d1, **d2}, l1, l2) will zip the two inputs together and merge their dicts. Or you can do that with a listcomp + zip: [{**d1, **d2} for d1, d2 in zip(l1, l2)]
Question regarding your flair. Why do you not like python 3.6?
Senior Fullstack developer here. I started off exclusively as a Python developer, but as time went by, I also started doing front-end tasks with AngularJS/Angular. Ideally, yes, you want to know more than one language. But to answer your question, with only Python you can still do various stuff, which are not strictly related to data analysis. I started by doing small command-line utilities to aid administrators. Gradually, I moved towards doing big system/infrastructure management code (for example, I kicked off and worked for a couple years on a big hosting account management interface for customers). I also did a CRM, where clients can sign in, pay for and receive invoices for said hosting accounts. Now I'm working for a Python Software House in Poland, where (like I said) I'm doing (among other things) backend development with Python (mostly Django and Flask) for various purposes (and only a small part is related to data analysis). And we have more than 100 developers who work in Python. So yes, it is possible to do a lot of stuff with Python, and contrary to popular belief - the language is useful in other areas than data analysis as well.
I want my old print statement back. I'm far too lazy to use parenthesis around everything but have to anyway. Other than that I love 3.6.
Do you need to know any JavaScript, CSS or HTML to do backend development?
Sure, a long time ago I once had a well-paying job just writing "Hello world" in Python. It's just a matter of how much boredom you can stand wasting your time on Earth for money. And I don't mean this as a statement. It was just the Python string `"Hello world"`. I quit when Python3 came around and they would not pay extra for having to deal with unicode support. I mean it was literally more work to type the `u`, so it was effectively a decrease in pay if I had accepted. Research sounds really exciting. I've never done it, on anything. Ever.
Pretty sure = 50/50? Cuz she got two origin stories in the bible and only one involves cloning 
Ah sorry, i should of looked at other sub reddits. Thanks for the info, i'll have a look into it.
Thanks for the thought.
&gt; map(lambda d1, d2: {**d1, **d2}, l1, l2) &gt; I like your map solution, because it will help me also to keep the orders of all the items of dict. i will try to use it Thank you 
We are writing simplified Navier stokes based models for the study of falling films : because we want to run some parametric study / optimisation, we cannot afford a month of computation per run (which is the cost for the full Navier stokes solving). So we make some assumptions on the velocity fields, integrate the fields across the film depth and obtain a simplified evolution equation that we can solve in a couple of hours. 
&gt; map(lambda d1, d2: {**d1, **d2}, l1, l2) could you please explain this map method with lambda? I know that **d1 your the item of dict without {} but i think i have to iterate them to get all items. c = map(lambda d1, d2: {**d1, **d2}, liste1, liste2) &lt;map object at 0x10422ed68&gt; result = set(c) print(c) TypeError: unhashable type: 'dict' what to do? How can i convert it? 
&gt; Forget using things like open source software. They're all pinned to decades old proprietary libraries that are incredibly out-dated compared to even basic OSS libraries out there I talked to one of my professors that focuses on safety in Embedded Systems about this. He basically argued that the reasons for this are: * Suppliers for software components are unwilling to give up their trade secrets (most obvious reason) * The question of liability is more complicated with open-source components. Because you are free to change the source code, the original company could argue that they are no longer liable for any bugs. This is bad, because you can't check everything. * Often times you actually don't want to deal with how a component works. Fiddling with them would require additional engineering resources that could be spent on the core product. This is a make-or-buy thing. * Something being decades old could imply stability. You don't know what problems the newest trendy thing might have. Of course this all depends on what you are actually doing. Hard real-time safety-critical systems are a very different thing compared to, I don't know, e.g a TV remote.
Python is surprisingly nice for keeping memory usage down with generators. I wrote a little blog post about it a while back: https://medium.com/build-and-learn/lean-devops-constant-memory-aws-lambda-c3af282bcff5
The short answer is that you can do anything with it. There are plenty of jobs writing python code for almost any application. Similar to Ruby except (a) it makes sense (b) you can also use it for scientific computing. 
Well, apparently, Google never lets go of any info ever given to it. Many years ago, before there was GitHub, I used Google code to store all sorts of junk in it. Here's the archive of that repository: https://code.google.com/archive/p/e4xu/source/default/source?page=45 If you download it, you may find a file called `amf-reader.lisp`, which implements AMF format. One function there is specifically designed to... drum roll... parse IEEE 754 format! To spare you the effort of locating it, here it is: (defun decode-ieee-754 (bytes) (let ((sign (if (logbitp 0 (first bytes)) 1 -1)) (exponent (- (logior (ash (logand (first bytes) #x7F) 4) (ash (second bytes) -4)) #x3FF)) (significand (+ #x10000000000000 (ash (logand (second bytes) #xF) 48) (reduce #'(lambda (x y) (+ (ash x 8) y)) (subseq bytes 2))))) (* sign (/ significand (ash 1 (- 52 exponent)))))) I'm not particularly proud of this code. The formatting is bad. Constants aren't given names, but, for the purpose of backing up my claims of doing something I said I did, this will work just fine.
&gt; I'd choose C over anything else to learn memory management. Imo, it's the most useful language and you can learn anything else after. Except for other paradigms of course. Haskell is still a mystery to me. Even though I understand the essential stuff. To really grok low-level topics it's also good to learn an Assembly language as well. C does hide a few things. Of course, additionally learning about Operating Systems and Computer Architecture would be even better.
You might want to try PyQt. This could be easily done using a QPainter override and a timer that queues up a redraw every 1/60 of a second or so. You could also use the more complex QGraphicsScene/QGraphicsView Framework; it has its benefits.
Can I ask where python sees use in sysadmin work? I thought powershell was the goto for that sort of thing because it was made just for supporting system administration. Not challenging, just curious.
PyLint has problems linting Python 3.6 (if you use 'f' string formatting I think). I ended up dropping it from my toolkit and use Flake8.
&gt; 16-bit machine code (thankfully there were only 2-3 assignments where we had to look up opcodes) We had a course where we had to design our own basic CPU (consisting of mostly a simple ALU) and memory. It was a lot of fun to develop our own ISA with opcodes and write programs in our self-made assembly language. &gt; Though despite that assembly, modern 64-bit processors are literally magic to me, caches, pipelines, prediction, oh my. There is a classic book "Computer Organization and Design" by Patterson &amp; Hennessy. I haven't completed it yet but it explains these things quite well. They also wrote another book on Computer Architecture, but I don't know how good that is. 
&gt; er override and a timer that queues up a redraw every 1/60 of a second or so. You could also use the more com I have used Qt before with c++.. Not gone too much into it though.. I don't intended to always draw on the screen though but just in between generations just to see how well the training is going. 
Nope, checked some videos on it. I think it could be what I need. I don't always want to draw on screen though. Its more intended as a debug system to system to see the difference between generations and visualize stuff briefly.
Doesn't that lead to people being mediocre (at best) at several languages? 
Python on rails actually
I'm the flip side of that. I'm an old-school C/C++ guy who has only learned python in the past couple of years. There's a big difference in the languages. Python feels like a scripting language to me. It is a better and more expandable version of Perl with less confusing syntax. That's great, but there are still a fair amount of areas set up to use compiled code. Also, out in the software world, you don't always get to choose your language. A large architecture may be set up before you get there. Part of your job is often to add new entry points and to make existing code more accessible and portable -- there is almost some level of migration going on even if you're also doing cool new stuff. Anyhow, you won't have infinite time so the constraints of the existing system will affect how you go forward. You usually can't redo everything from scratch. Anyhow, I agree that C/C++ is a good core language to learn. Its easy to jump to other curly-bracket languages (Java, C#, etc) at least syntactically.
..or rust, go, D or C...~-:|
Also, many microcontrollers are programmed in C. C is a must if you are interested in embedded devices.
I've had a bit more time to look at this now and firstly well done. It's great to see a new programmer writing a project and including a useful readme that actually covers what the project does as well as how to use it. It makes a huge difference. A couple of things from having a look at the code. I will try to keep it short. I'm liable to go overboard reviewing code. Firstly, what are you trying to time? You're using the `clock` function which times the CPU time rather than 'actual' time. eg on my machine, running &gt;&gt;&gt; if 1: ... print(clock()) ... sleep(5) ... print(clock()) ... Results in 0.634239 0.634277 This isn't necessarily a problem, just making sure you're timing what you're meaning to time. With CPU time on small functions, the act of recording the clock time could contribute significantly to the measured time. ---- The others are more style things and entirely up to you. * Was there a reason behind implementing the decorator as a class rather than a function? * It might be worth looking at using a try/finally to wrap the inner function as if the function raises an Exception, the timer will be left running. * As a next idea to think about, it'd be interesting to see stats about the timing, eg tracking the run time of each cycle and providing average times, min/max/SD etc. * You could look at using context managers to let you wrap arbitrary code rather than just functions: &amp;nbsp; t = Timer() with t: ... #do stuff print(t.total, t.count) Not sure how much use it'd be but it could be interesting. I'll stop now, but if you ever want an overly picky person to review code...
Basically anything. At work, I'm using it to write an LDAP wrapper. In my free time, I've been writing an HTML file builder so I can easily update my website without using a CMS or editing every HTML file when I want to change meta tags or add a new script in.
Your new community is less than 24hrs old and it sounds like you're well on your way to having your first schism. Mazel tov!
Well, powershell is Windows only, and even then I still don't think the adoption rate is that high. Look at provisioning systems like Ansible that are written in python. There are a handful of monitoring systems based off python. Many Linux distros use python pretty heavily for system level scripts and configuration. I'm
Bjarne's advice: https://www.youtube.com/watch?v=NvWTnIoQZj4 Although i disagree with his list, the gist of it is that a good programmer should know a wide enough variety of languages to know what's the best one for the job.
http://mherman.org/presentations/microservices-flask-docker/#1 These slides with and the included github pages have a nice foundation for building a scalable flask app. It might be overkill for what you are doing and the projects are very generic, but stealing some of the ideas used might be usefull.
Perhaps. The same way investing the time and effort to learning how to use a circular saw to solve problems might detract from your ultimate goal of becoming a master at using drills to solve problems. But no one gives a shit about someone being a master at either the circular saw or the drill. A carpenter must understand how to use a wide variety of tools, and when one is more appropriate than the other.
I think I may need to start looking into things like Dask and Ray. I'm starting to work with datasets that are tens of gigabytes in size. Do you have a recommendation of which to start with?
Umm Node works fine on things other than websites. And guess what I have that you don't? `{};` Yeah that's right. My code projects are actually managable. 
Try Arcade. See http://arcade.academy
I’m stealing this comparison. I will attribute it to triscuits on the Internet. 
Same.
Spend a half hour learning sed.
hewked awn fonix werks four aus
Python is the language you see the most [ROS](ros.org) nodes written in, so you can do all kinds of neat stuff with robots using Python. But really, you should learn C/C++ as well.
Would you recommend this than pygame?
Did you make a new file called pyodbc.py in your path? Sounds like its clobbering the pyodbc package you installed
help me please 
New Redditor here as well! Good that I found out this subreddit, I just started learning Python few months back and I'm looking for new ideas about projects and a good community to take/share things with. Github profile: https://github.com/Yaral Not that much there yet but the plan is to continue uploading better projects.
What do you mean by "resolution"? Also, /r/learnpython.
I mean the resolution of the window: it's blurry 
Omg. Yes I did. Deleting that fixes it, thank you!!!
There's a [comparison up](http://arcade.academy/pygame_comparison.html?highlight=pygame). Also it looks like pygame development slowed by a lot. The last update is January 2017. The one before that is August 2009. For me, the one difference is that there's [*lots* of example code up](http://arcade.academy/examples/index.html#example-code). It looks really simple to use; whereas for PyGame, [the docs](https://www.pygame.org/docs/) left me a bit confused as to where to get started. Sure, I might be doing it wrong, but first impressions.....
Are you using DPI scaling in Windows?
As the ops engineer who would have to support all those different services, I say hell no to that.
Pygame would be good.
Well, I wrote the Arcade library, so my answer is biased. I like PyGame, but it is an old library that is poorly maintained. There are drawing bugs with Pygame, particularly drawing circles and arc outlines you get a moire pattern. You can't do things as simple as rotating an ellipse. The naming conventions are weird. There are several Python 3 things, like type-checking it doesn't do. PyGame is bitmapped based, Arcade uses OpenGL for graphics acceleration. So if you use vertex buffers (see ShapeLists in Arcade) Arcade is a lot faster for drawing.
https://stackoverflow.com/questions/33137252/python-2-7-point-in-polygon-using-winding-number-algorithm-without-external-lib I found this on Stack Overflow. The problem was supposedly solved, so you'll have to make the same changes to the code posted.
I set it to 100% instead of 125%(suggested choiche) and it worked. Thank you very much
I must look into this. When I finish my current project in pygame I might swap over to this module. 
Not sure how Shapely does it, but if you have the list of vertices you could implement ray tracing
[This project](https://github.com/moinudeen/digit-recognizer-flask-cnn) uses flask to build his user interface. It sent the drawing in base64, then decode it to infer it with his model.
Why is this unexpected? Not trying to be a smartass, just trying to understand why you found this surprising. `var is var is var`, or `var == var == var` will be True for any variable in Python.
Python interpretes these expressions as `(None is None) and (None is None)`. That's why `0 &lt; x &lt; 5` works.
A SyntaxError. There's no -&gt; operator in Python. If what you mean is this: None is None is None == True Then yes it is... that's due to [operator precedence](https://docs.python.org/3/reference/expressions.html#operator-precedence), and basically it's because this: None is None is None Evaluates to this: (None is None) and (None is None) Which is: True and True Which is True.
Why are you shouting?
ok?
&gt; But no one gives a shit about someone being a master at either the circular saw or the drill. Well they probably should. My brother and I were recently lamenting the complete lack of quality and performance in our society these days. I want people who can make something excellent, not just passable.
Note that `var == var` can be false for custom types and is always false for [NaN](https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN).
~I remember a post about `a != a`~
It's unexpected, because many languages don't desugar it, and basically evaluate the operators one at a time, left to right, so you get the usually useless evaluation: var == var == var (var == var) == var True == var False # unless var == True
I was expecting it to do it sequentially, that's why
FYI, to my knowledge, numpy was one of the main driving reasons driving the development of conda. numpy used to be notoriously hard to install, and people would refuse to upgrade for fear of breaking numpy. This has mostly been fixed, but conda has really evolved into a great package managing software.
Oh, I thought I posted this in /r/learnpython, I'm sorry for the mistake.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I appreciate the response, but I think the analogy is off. I think that "circular saw vs drill" is more similar to specific methods in a language. I think learning new languages might be more like switching between metal working and woodworking. 
This sounds interesting, is this similar to emails being sent when certain criteria is met?
Not at all. There is value in specialization. Nobody gets to define what a ‘software engineer’ must do to be good. It’s good to be curious and always learning, but there is zero evidence that constantly learning new languages is a required to be successful—in fact, there’s more evidence to the contrary.
I think what you are saying is that it's easy to write things on the fly in a environment where you need to test a lot of things and try many different configurations and often needs to be done quickly. For me it seems like learning to hack into systems would be easier with something like Python or Javascript. But I what do I know.
yes, i looked at it. You can say mine has educational purposes.
I'm working on a stockmarket simulator for an event at my uni (4rth year finance student). Using tornado + websockets for the backend and vanilla javascript + bootstrap for the front end side! I bit off a bit more than I can chew with this one but im nearing completion. 
It applies there as well, but it still holds at the level I used it. There are some tasks for which Python is less suitable than others. This is a necessary consequence of the compromises that are made when designing any language or tool. The hours you spend building detailed knowledge about cPython internals and using that to squeeze x% better performance out of python might be better (more productively) spent writing performance critical components of your project in a language that is better suited to the task without herculean effort. (the speed tradeoff is just one of the easier examples here... yes I know Cython and PyPy exist, etc... Those are just more tools in the bag. Sometimes they'll be appropriate/applicable, and sometimes they won't)
Not really. The core fundamentals are generally the same, languages are tools.
You can do custom drawing with Qt using the QGraphicsView. There are a number of examples that come with their SDK. You can use either PyQt or PySide for the python bindings to the Qt C++ library.
ROFL - until this year, I hardly used Python for data analysis at all ! Some uses for python: - integrating backend services, e.g. sending email - websites and HTML/etc generation (Node competitor) - data transformation e.g. ETL - data extraction (e.g. xlrd for Excel, scrapy for web, etc) - "reference implementations" of low level networking code, chips, etc - raspberry pi hacks - creating new domain-specific languages (e.g. Tensorflow!) - automation scripts (competitor to bash...) ...and the list goes on! Pretty much, unless forced to write JS or Java/C++/go, I pretty much default to Python. 
What terms are you having problems with, maybe I can explain. Let me also try to explain more precisely why you can call it "freezing" (or bundling): with tools like PyInstaller or cx_freeze you save the state of your Python application and all of its dependencies. These tools will assemble all the used components, including the Python interpreter, in their currently used versions, and package them up into a folder or a single executable. Freezing is a metaphor for setting everything in place so it becomes harder to manipulate and therefore harder to break, which is especially important if you plan on releasing the application to the public.
And, conversely, you can publish or release the code without freezing it as a single-file distribution.
No no no... we're the Community of Embedded Python Developers ... *They're* the Embedded Python Developers Community. splitters...
You could certainly work in python exclusively doing pretty much anything. That said, if you're a software engineer you'll almost certainly end up learning multiple languages, probably *for fun*
 of = is horse = 1 course = horse horse is horse of course
If you can write Python and manipulate one's and zeros to produce the same end user experience with the 1's and 0's java would, you could stick with Python. There's support for just about everything with several languages, but it's not a good idea to go all in on one language. Understand libraries, API's, and you'll see all the languages are kind of the same. With Python you could query the web and write software that writes the non Python software for you with copy and paste. But anyway, I don't see the harm in focusing on just Python, it's only getting better and better
Computer vision! Check out opencv
Wow, thanks so much, was looking for something like this for a long time
Try the pywin32 module, you can use it to control keyboard/mouse inputs.
3000 lines for hangman seems a bit excessive. Maybe aim closer to 500. This guy does it in &lt;150 http://inventwithpython.com/chapter9.html There's no comments. 
I would say kivy because it is pythonic unlike QT and updated.
I forget the term but C can do everything assembly offers...except circular shifts. They made it clear that they will never support those. 
Once you've learned enough languages you're no longer thinking in terms of the specific language and you're instead thinking in categories of languages. Instead of thinking "I'm writing in Python" or "I'm writing in Java" you think "I'm writing in an imperative language" and you just mentally apply the syntax and language quirks as the last step. Design patterns are almost never specific to a single language.
Pyautogui could work well for this too. I use pyautogui for all sorts of redundant tasks like data entry. What’s nice is that you can use the pyautogui.locateCenterOnScreen function in a while loop to circumvent unpredictable load times on web pages. I recently used this for a project to modify nearly 7,000 records in a billing system that would otherwise have taken a person somewhere around three weeks to process. 
Thanks. Even with 3.6 annotations one has to run mypy separately? 
Python used to be the “everything language” without any prominent killer app. The meteoric rise of the data analysis ecosystem around Python is a relatively recent phenomenon (~6-7 years)
For sure. There's always an art to this kind of stuff, and balancing practical considerations is important. I'm not suggesting "you're a bad developer if all you know is python", but rather just pointing out the value a broad base of knowledge can have. For some context, I'm not a full time developer at all, and while I've dabbled in a handful of languages, Python is certainly the only language I would claim to be fluent in. That said, programming at *all* qualifies as a "side skill" for me. As a network engineer I have these types of conversations all the time, but instead of talking about knowing a variety of languages, it's about the idea of using *any* language or automation framework. A lot of network engineers are deeply intimidated by this stuff and get it in their head that if they can be enough of a wizard on the CLI, then they don't need to bother learning how to automate things. Or they'll put tons of effort into making a bad design work, rather than investing time fixing the design so that the most common changes are simple and easy to do, etc... They spend 30 minutes a piece cutting boards with a drill 3 times a day for years, instead of taking 3 days to acquire and get proficient in using a couple types of saws so that it takes 90 seconds a piece to cut boards to a far higher standard of accuracy and consistency than you could ever achieve with a drill. 
https://stackoverflow.com/questions/36399381/whats-the-fastest-way-of-checking-if-a-point-is-inside-a-polygon-in-python This post has a pure python ray tracing function.
Ok that makes sense -- thanks
I use it pretty exclusively to do tooling for our team. I enjoy it.
create a small script that reads the json, and injects it directly into the database. Skip Django.
If you do decide to do it via Django, then use create_bulk with batches to speed it up a bit
Absolutely this
Regarding #1, check for an element that doesn't appear until the page is fully loaded. https://stackoverflow.com/questions/37787453/selenium-python-how-to-wait-for-a-page-to-load-after-a-click
I would consider if you can do this with the good plotting libraries out there, like Bokeh and Plotly. There are some very usable data visualization packages that allows flexibility and animation. 
Recently finished my first django project, a site to share and find coding resources - https://www.noobhub.io/ code can be seen at https://github.com/ollysmall/wikitowns. Let me know what you think!
My bad, edited for clarity.
At first I was going to say that using PyQt would be overkill for something like this, but if you're doing data analysis then it might actually be nice because I'm sure you could benefit down the road from adding buttons / a user interface. I made you an example on how to use it: import numpy from PyQt5 import QtWidgets, QtGui class AnalysisWidget(QtWidgets.QWidget): # You could also make this a getter function or a property # see https://docs.python.org/2/library/functions.html#property # or https://docs.python.org/3/library/functions.html#property CIRCLE_DIAMETER = 10 # Since these are both used in two places, I put them up here. BUTTON_MESSAGE = 'Click the button to calculate the average.' SELECTION_MESSAGE = 'Select some points to calculate their average.' def __init__(self, parent=None): """ A widget for displaying data points and providing a way to calculate and display their average positions. :param parent: The Qt-Parent. :type parent: QObject | None """ super(QtWidgets.QWidget, self).__init__(parent) # You might want to either auto-detect the current screen size or pass these # as constructor arguments. self.scene = QtWidgets.QGraphicsScene(0, 0, 1024, 768) self.graphics_view = QtWidgets.QGraphicsView(self.scene) # Set the graphics view to have a rectangle-selection mode. self.graphics_view.setDragMode(QtWidgets.QGraphicsView.RubberBandDrag) # Set up the button and text field for calculating the average position. self.average_button = QtWidgets.QPushButton('Calculate Average') self.average_field = QtWidgets.QLineEdit(self.BUTTON_MESSAGE) self.average_button.pressed.connect(self.setAverage) # We can also just automatically calculate the average when items are selected. self.auto_average = QtWidgets.QLineEdit(self.SELECTION_MESSAGE) self.scene.selectionChanged.connect(self.autoAverage) # Put it all in a nice layout (making self the parent automatically sets it as # the main layout). layout = QtWidgets.QVBoxLayout(self) layout.addWidget(self.graphics_view) average_layout = QtWidgets.QHBoxLayout() average_layout.addWidget(self.average_button) average_layout.addWidget(self.average_field) layout.addLayout(average_layout) layout.addWidget(self.auto_average) def addDataPoint(self, x, y): """ Adds a circle to the scene at the specified position. :param x: The x position. :type x: float :param y: The y position. :type y: float """ # Create a circle and add it to the scene. radius = self.CIRCLE_DIAMETER / 2.0 # You can actually save a reference to this item and change its position later if # the data changes. It's much faster than clearing the scene. item = QtWidgets.QGraphicsEllipseItem(x - radius, y - radius, self.CIRCLE_DIAMETER, self.CIRCLE_DIAMETER) self.scene.addItem(item) # And as you can see here you can modify the item after having added it. # Set the color and make the item selectable. item.setBrush(QtGui.QBrush(QtGui.QColor(100, 0, 0))) # Make the item selectable. flags = item.flags() flags |= QtWidgets.QGraphicsItem.ItemIsSelectable item.setFlags(flags) def _calculateAverage(self): """ :returns: The average position of the selected points. :rtype: numpy.ndarray """ positions = numpy.array([ numpy.array([item.boundingRect().center().x(), item.boundingRect().center().y()]) \ for item in self.scene.selectedItems() ]) return numpy.mean(positions, axis=0) def setAverage(self): """ Called when the calculate average button is pressed. Updates the associated text field with the average of the currently selected points. """ if not self.scene.selectedItems(): self.average_field.setText(self.BUTTON_MESSAGE) return self.average_field.setText('%s' % self._calculateAverage()) def autoAverage(self): """ Called when the item selection is changed. Updates the automatically-calculated average position of the selected data points. """ if not self.scene.selectedItems(): self.auto_average.setText(self.SELECTION_MESSAGE) return self.auto_average.setText('%s' % self._calculateAverage()) def main(): # This is needed to process the Qt event loop. app = QtWidgets.QApplication([]) widget = AnalysisWidget() widget.show() # Add some data points to the scene. widget.addDataPoint(50, 50) widget.addDataPoint(100, 100) # Start the event handler. app.exec_() if __name__ == '__main__': main() 
Selenium is what you want. I'd actually recommend using RobotFramework with Python as a back end for this. So you're going to want to use [RobotFramework](http://robotframework.org/) with the Selenium2Library. In RobotFramework, you can include any python function pretty easily... if you have questions, feel free to ask (I'm a QA automation engineer).
I'm still pretty new to Mypy, but AFAIK yes. There is also pytest-mypy which runs it as part of your tests.
Django's not a database.
The performance-critical operations are likely written in C and then extended with Python for the less critical logic for ease of writing
I will take you up on that offer, but I will try to not request help unless I get absolutely stuck and my google abilities let me down.
If you think about it a python is just a snake and a snake is just a big string of spaghetti. So in that respect Eve is literally built on spaghetti code. 
How... pythonic of you.
I didn't think about this, just run it along the rules of if below date ignore, if between date period check, if above date period ignore and do not click next page. Thanks, this will avoid 50% of the loading screens, and allow me to avoid the problem of putting the script to sleep like I was mentioning in another comment. 
In [Python Function Annotations](https://www.python.org/dev/peps/pep-3107/#id32) -&gt; is used to indicate a type that a method/function returns.
&gt; Selenium2Library It's just SeleniumLibrary now. Selenium itself is in 3.x 
I second the Flask suggestion. It sounds perfect for your need and it's super simple to get started in.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kernalphage/proto_procgen/.../**image.capnp** (master → e5187cb)](https://github.com/kernalphage/proto_procgen/blob/e5187cb90b5dd57f6d2bd1d2ac077f4729f43433/image.capnp) * [kernalphage/proto_procgen/.../**svgbuilder.py** (master → e5187cb)](https://github.com/kernalphage/proto_procgen/blob/e5187cb90b5dd57f6d2bd1d2ac077f4729f43433/svgbuilder.py) ---- 
Except every project is built with (primarily) one tool, every project is left unfinished (even legacy software needs tweaks), and the next guy you hire to maintain the project has to use the same tool you used last time or rebuild the project from scratch. I don't think that's a great analogy.
/r/learnpython
This is the fastest way to populate any SQL database by a LONG LONG way.
pyinstaller is the shit. that's one super useful piece of software. 
(*Spyder maintainer here*) I can assure it's not. It's one of more complex things in Spyder! We have a lot of code to maintain the namespace objects in sync with the Variable Explorer, send serialized values back and forth between the kernel and Spyder, and avoid possible blockages due to large objects with complex repr's (like someone above said: a dict with 50 million entries!). And we still have to solve from ugly memory leaks due to us mishandling serialization!!
SqlAlchemy is not bad.
Sadly, it's 3.x specific. No love for 2.x...
Just finished up my first attempt at a tutorial; pulling reddit submissions from pushshift and plotting the data using pandas and pygal. https://github.com/captmomo/pushshift-pygal- Appreciate any feedback on how to improve my code and writing in general. Thanks :) 
Download YouTube videos
wow, took a quick look and I can't wait to dig into this. how long did it take for you to produce this?
I'm looking at it as a pedagogical tool for beginners, so I suppose I see a simpler problem to solve. It'd be fine if it was just a static representation, from my perspective, and if it was limited to some simple data types.
Because the people who state such things have no clue what they're talking about.
True enough, that was just habit. Selenium2Library works too though, as it's just a wrapper around SeleniumLibrary.
&gt; fundamental languages like C / C++ are so vast From what I see: those languages by themselves are fairly small. It's usually the standard library that is vast. C in particular is a tiny language, I'd actually be willing to risk saying that you could comfortably learn the C language in a week, doing it for a few hours each day. Because really, what are the features of the core of C language: variables, statements, functions, loops, arrays(and the special case of array: C-string), data structures, unions, pointers. (I tried to roughly put it in ascending order of difficulty, according to my opinion). Then you will need some more time for the standard libraries. In C, they are lean and each has a specific use and structure, so after checking out a few functions from it, you will most likely get a grasp of the library. Not to mention there is few of them. C++ on the other hand, is a colossus when compared to C. It has a lot more features, and its standard library has plenty of classes, structures, and functions. C++ can quickly get overwhelming, it's easy to lose oneself under all the features. I would advise people who want to understand C++: learn C too. All of C can be used in C++, and when having a better understanding of what lies beneath the C++ vectors, lambdas, and classes you will use them more consciously.
[Python built-in Turtle.](https://docs.python.org/3.6/library/turtle.html)
I've never heard that said. I've heard a number of criticisms of python, some valid, others not, but you can make money with a lemonade stand, so why not a programming language with hundreds of thousands of users? Sounds like somebody needs to think harder about ways to make money.
VxWorks (I don't shit on it, the Mars Rover has used it and it's got a solid track history), proprietary languages and platforms that have no RFC. Brand names you would recognize and some you may not: e.g. Rockwell, Woodward, Siemens...
I have never seen or heard that stated, commonly or otherwise. Troll?
=)
wha?
I like Splinter: https://splinter.readthedocs.io/en/latest/#
I've used Selenium to automate a distributed network of bots that do just what OP is talking about (retrieving invoices). Works well. If you want to run it headlessly, look into xvfb for Linux. For Windows virtual machines look into dumping the Windows session to the local console (i.e. console 0). 
I don't think anyone really says that. But if you want more insight on why some people don't think Python should be used in large scale systems here are a couple reasons. - Python is an interpreted language. That means that the python code has to be converted to an intermediate form called byte code, before it can be run in the virtual machine. I'm not an expert on the Python interpreter so you'll have to google for more info. Languages like C get compiled to an executable, which runs directly on the system hardware. So in summary, languages like C are usually faster. However, for most applications, Python's speed is completely fine. You'd be hard pressed to find a case where Python's performance is the bottleneck on your system. - Python's GIL (Global Interpreter Lock). Python is not build to run concurrent processes. Basically this makes it harder for Python programs to take advantage of modern CPUs, which usually have 4 physical cores (and 8 virtual cores if you set that in your BIOS settings). Again, this is only an issue for very specific problems. Multi processing is not needed to solve many common coding challenges. So the jist of it is that when you are creating really large scale applications, like a server that needs to process millions of requests per second, Python may not seem like the right choice. Side note - with python 3's new asyncio module, new server frameworks are being published that are extremely fast.
It's only so long because I used turtle and most of the code is drawing the buttons and lines in different instances.
&gt; **e**nglish Do you?
Big deal. For example several of my friends and former colleagues who work on real time systems and don't have CS, maths or engineering degrees haven't a clue what a regex is and neither do they care, but they get the job done.
Indeed
In my experience knowing the "language quirks" is often the most important part, but then I use a language which I know has a disproportionate amount of quirks. 
&gt; A carpenter must understand how to use a wide variety of tools, and when one is more appropriate than the other. But surely, for your average job any programming language is as good as any other (you can do CRUD apps in any language). If anything, the ecosystem behind that language will be the deal breaker.
Manuel was much better than wot u r.
Hopefully he died?
&gt; might be better (more productively) spent writing performance critical components of your project in a language that is better suited to the task without herculean effort. You missed all the hours spent in learn that new language before you get good enough to do the task you were supposed to do.
Why would I hope that? 
I'm not sure how much this package alone will help you if you can't write any Python to take advantage of it.
As a professional with actual code running on actual hardware running actual power electronics, I'd argue against every single point he's given. I know where he's coming from and his mindset, but it's not accurate for the following reasons: - Suppliers for software components are unwilling to give up their trade secrets (most obvious reason): there are no trade secrets: modern PLCs are a relic of ancient times. One 10k controller I'm thinking about runs a bonafide intel pentium chip. It has some IO boards attached, and it's inside a housing, but otherwise, it's just a pentium. The implication here is that hardware wise, there's no trade secret, it's like 7 generations old. It's literally like saying the 486 still has trade secrets in it. Furthermore, PLCs being the relic that they are, still emulate what they started off as being: programmable logic controllers. Read: a bunch of logic gates that correspond to actual clicking hardware relays that used to control plants. They implement boolean logic, PID controllers, and other basic stuff. Even protocols like CANopen need to be "hand-demuxed" using fucking gate logic. They are essentially using a Pentium as a convenient FPGA. It's horrendously onerous, and while it might have been revolutionary 40 years ago, today it is simply inadequate. - The question of liability is more complicated with open-source components. Because you are free to change the source code, the original company could argue that they are no longer liable for any bugs. This is bad, because you can't check everything. I don't need to really go into details, but I trust SocketCAN implementation of CANopen more than I trust a version of CAN that was implemented using an FPGA. Humans aren't meant to deal with that kind of coding complexity. It's the same old argument that C is somehow safer than some other language for making kernels. I think it's starting to be conclusively proven that: a) you want as much automation and high levelness to take away the ability of humans to screw up (e.g. lint, static analyzers etc) b) things like rust and go are viable... - Often times you actually don't want to deal with how a component works. Fiddling with them would require additional engineering resources that could be spent on the core product. This is a make-or-buy thing. Once again, in very specific niches, sure. In other niches, it's very common for people to in-house their hardware. "In-house" hardware gets outsourced to fab shops that have a turn around measured in days and end up costing less than literally buying components and putting them on a breadboard. "Get with the times", I say. - Something being decades old could imply stability. You don't know what problems the newest trendy thing might have. I prefer relying on something being deployed on a million devices (linux) than relying on something being deployed on 2 devices for a million years. To add to this entire topic: self driving cars are changing everything. We can simply no longer function with the tools of the PLC era to do the kind of complex things we want to achieve. Self driving cars have industrial grade reliability requirements. I'd say their requirements are actually *more* stringent than industrial equipment simply because many a large industrial device has hardware interlocks to prevent its malfunctioning (e.g. a big ass circuit breaker). Heck: many an industrial device has a big ass e-stop button on it and **has** to be able to stop on a dime. Cars don't have that luxury.
The biggest myth in programming is that you can learn a language on a six month cycle. It's complete crap unless you have the CS mind of Alan Turing. I don't know everything about Python after 17 years, C is just about impossible because every second or third paragraph says "this is undefined behaviour", so why do people fall for garbage like this?
If I may ask, what development environment do you use, and what do you use to make executables (and installation packages if any)? I'm jumping back into coding now after many years and a lot has changed.
&gt; The hours you spend building detailed knowledge about cPython internals A bit of a bugger if the next shop wants pypy, jython, ironpython...
Wow, that's great! However, it does mess up spacing. -rw-rw-r-- 1 wilfred wilfred 75,874 jan 11 00:03 image.png -rw-rw-r-- 1 wilfred wilfred 448,942 feb 19 15:20 wordfile.docx As you can see the spacing on those two lines is off. Bonus points if you can fix that ;)
The Selenium suggestions are good. But I'd also look into trying to understand how the website works and interacting with it using requests and beautiful soup. That way you avoid having to having something much heavier like selenium running. It will likely also be faster and more resilient to UI changes.
Here is a tip for you. 1. Maybe before checking if point is in a polygon, check if point is in bbox. 2. Then if your polygons are complex, try secondly if point is in simple convex hull (qhull lib). 3. After this you can go and check the rest.
&gt; I want people who can make something excellent, not just passable. Beautifully put, that's two of us :-)
No, sorry. Uses some of the cool 3 functionality. 
I personally use Sikulix http://sikulix.com/ to do similar things. Basically you can tell it to click on things on the screen, it can wait till the thing is available as well. It's actually pretty powerful and you can do a lot more than just click on things. Bonus points since it uses python for the scripting. 
My most downvoted comment ever. Is that pride I feel? 
No I’m not, my prof was making jokes that it will not make you money. I also noticed on the web where people will say that it’s good as a beginning language but can’t make a career out of it
It's impossible so he or she is clearly a complete waste of space.
Yes, but 1) The 2nd (and 3rd, 4th, etc.) languages are always easier than the first. 2) It's an investment in the same way learning the first language was, and the problem your working now isn't the only one you'll ever need to solve. You probably don't want a 1:1 ratio of languages to projects, but having even passing familiarity in other languages can be plenty useful. simple example: A year or so ago I needed some functionality. There isn't a decent project that gets close to what I need written in Python. I could start one from scratch, but it's a *big* project and that's not what I'm getting paid to do. Meanwhile there's a project written in PHP that's close to being what I need... just missing a few API endpoints and some trivial logic to expose some data. So I took a couple hours a day for a week and learned how to do what I needed. Asked a few questions on /r/phphelp to clarify what the idiomatic way to solve a particular problem was, jumped on the projects IRC channel to briefly discuss with the maintainers, and submitted a pull request. Fixed a few issues they pointed out, resubmitted, and haven't touched PHP again. I would never put "PHP" on my resume, but whatever. There was a thing that needed doing, and it didn't make sense to use my favorite tool to do it, so I used a more appropriate tool. More to the point of this thread, I feel that experience, if anything, made me a stronger programmer, rather than weaker. The business didn't need a "Python guy" it needed "a programmer guy". 
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [First time writing OOP can anyone check im on the right track.](https://np.reddit.com/r/PHPhelp/comments/65qzgl/first_time_writing_oop_can_anyone_check_im_on_the/) \#3: [Tutorial on getting xdebug to work with phpstorm?](https://np.reddit.com/r/PHPhelp/comments/70ho0c/tutorial_on_getting_xdebug_to_work_with_phpstorm/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I know it's not Python, but you may want to consider JavaScript combined with the S3 JavaScript library. You get a lot of stuff for free and Python is left to do what it does best: crunching the data.
Nice idea. The default for most tools is to avoid extra separators because other scripts want to slurp in the output and use those numbers. It's a much bigger pain to have to figure out when any given tool is using commas or periods as a list separator or as a thousands separator or as a decimal point. For example, a short `du --bytes | sort -n` would be a lot more complex with commas.
It's a different thing to contribute to a community and to maintain it. Some people dig being mods and shit. Others dig just contributing.
There's 6 letters. The length of the string is 6. Strings in Python are 0-indexed, which means they start counting positions with 0. So you have 6 letters, indexed 0 through 5.
For most Dev things I'll use pycharm. When I've made executables it's through py2exe, or pyinstaller, for Windows and Linux respectively. Good to hear! A big thing right now in every industry is micro services as well. If you know python and a container platform, there are tons of jobs out there. Docker is a good starting point of you're interested.
is it though?. Obviously I'm biased in favor of Python here, but I deeply suspect it's substantially easier to write a CLI tool to interact with a REST API in Python than in Java or C, for example. You could do it in those languages, I'm sure, but it wouldn't be as simple or time efficient. Just as i'm sure it's technically possible to write a device driver that's somehow built on Python (it'd probably have to include the interpreter? idk), but that doesn't mean it's a good idea. Now you mentioned CRUD applications... well it's certainly possible that many such applications simply don't have the kind of hotspots and such that would make calling out to code written in other languages necessary/useful. And if you literally *never* step outside of that mold, (and also never touch front end javascript and such) I guess that's fine. But I still think the mental agility you get by exposing yourself to different languages and their associated idioms/methodologies still has substantial value. I come across people that have pigeonholed themselves into their comfortable little silos and they seem to spend a lot of time getting upset about being left in the dark about things and wondering why people with less experience are promoted ahead of them and have their ideas taken more seriously. I always think of these people when I see someone arguing against learning new things and broadening skillsets. I'm not saying you should reach for a new language on every project, or that every project needs to have the most commonly called code re-written in C or anything... just that reaching outside of your comfort zone shouldn't be off the table. 
sed -i s^sed^your mom^ previous-post.txt
I will only be using this website for pulling invoices once a month, would you say soup is easier?
Precisely, look for pyvirtualdisplay. Works great, also on a remote server without GUI. Last time I used it was... today :)
Probably not then, unless the website is very easy to interact with using requests. If it was me I’d at least take a quick look using the requests tab in your browser and curl to see if you can at least access the pages and data you need. 
Amazon uses python in some of its orgs as well
for this im getting an error saying record is not defined 
"Don't use an ORM" is great advice in any scenario, not just this one.
&gt;The goal is to visualize the tensorflow learning process. If you want to learn machine learning, I recommend just learning about the fundamentals like backpropagation, gradient descent, convolution, optimization, etc. Then do the TensorFlow tutorials (e.g. MNIST). In my opinion, that's a way better method to understand TensorFlow. You are going to have to do this even if you want to use the 2d drawing thing. Read the TensorFlow API documentation well, and gain an intuition on handling numpy arrays. For seeing TensorFlow graphs and to visualize the learning process (even live), use TensorBoard and plot.ly. Use matplotlib and opencv to visualize things like convolutional filters and predictions.
hi the assignment states... Exercise 1: Compare the vocabularies of all presidential candidates Write a Python program that: Loads the CapitolWords corpus (using textaCy) Computes the TTR (based on lemmas) for all speakers in the corpus, and stores the result in a dictionary (using a defaultdict as above). Who are the speakers with the richest and poorest vocabularies? When i ran that code up there i got an error saying record hasnt been defined 
Nah its long because its long. I wouldn't want to maintain this code. See here for gothchas: https://github.com/Droogans/unmaintainable-code Your functions and variables are obscure Some functions are 1 command, some are hundreds of 'if' statements. That many nested 'if' statements is asking for trouble. There doesn't appear to be any logical structure. I was always taught to avoid globals where possible, I see a lot of globals. I mean well done and all, that's a lot of code, but I'm not certain it's an efficient use of computing power. Heaven forbid one of those if statements develops a bug. If I was you i'd get some designs on paper, draw some flow charts etc. Then re-design it to be modular. Python is supposed to be easy to read. This is not easy to read.
To help devs of python the share your scripts!!
&gt;Without the standard library you're not a C programmer That's precisely why I said that the **C language** is small and easy to learn, and also why I put libraries as a thing of their own. Because it's obvious that it will take years to be proficient in a language, just like in pretty much any other skill.
It's not exactly that you are pointing out a flaw, but rather your uncivil tone that is getting you downvotes. Unless I missed something.
not exactly, I was talking about how the python devs should concentrate on developing a gui deployment interface as priority instead of releasing new versions with minor changes. A user comes along and told me that I should do it, which I would if python was my priority which it isnt as I know 4 languages. And an argument ensued. I know coding forums are full of neckbeards with no social skills, this place isnt an exception. 
How about just admit that you're a fucking skid because you're the only one who misunderstood it and tried to act like you have 160+IQ, watch rick and morty and are more intelligent than anyone else in here?
Yes, it is possible. If you are using the `search/tweets` endpoint documented [here](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets.html), the you would set the `q` parameters to `"my name jeff"`.
Let them draw in some screen, find a region where their image ends (crop a rectangle from input screen rather than taking entire screen) scale the cut out part properly to 28x28 pixels (if you used MNIST data), feed it to neural network, and it should work. Try picking proper window size where user can draw, if you aren't sure, just try drawing on some size of canvas or whatever, then scale the image down as I said to 28x28 and look at it, if it looks good enough, and NN can still guess it, then it works as intended.
Thanks! I'd not heard of Docker before. Do you ever make executables for OSX? Seems like that has less support.
You can pass an SVG target instead of painting to the screen. In this case, you don't even need to use the Qt event loop.
Everything* in Python is 0-indexed (unless you can tell me what isn't). Just so it's clear.
Except where the fact that, even though Node.js is faster than Python (just a random example), that's the only thing that Node.js actually has over Python, I guess callback hells make money nowadays.
And you could easily write a generic function for a turtle so that it can follow a path of coordinates, in case there already isn't such function in that module. It's just waste of space. I see a lot of repeating magic numbers.
Wait, what? print is a function, all functions are called like(this).
I love it. Write mostly 2, but use future print everywhere. Mostly `end` and `file` options. The syntax for those in 2 was bad, if possible.
Like what? So far 3.X seems like a downgrade for me, losing the very handy print function, and not gaining anything that I want. 
That would be Edith.
Uhhhh, no. Only if it HAS to be. 
Mainly string formatting, type hinting, decorators
This is awesome! Do the different providers have different options? e.g. Slack has support for all kinds of crazy output formatting and UI widgets in the messages
I think pyinstaller will work with osx too but don't quote me on that haha.
What is probably meant is you "can't" make money only knowing python (or any one language) since most jobs/projects require at least basic knowledge of multiple languages. This obviously isn't always true but it is a good idea to know multiple languages. 
Yeah, each provider has its own options correlating to its api
I agree that open source on Linux is often easier but haven't convinced many people to move to Linux. The common problem on Windows is having multiple versions of libraries and no easy way to change PATH (unless you are using a terminal) to get the right ones used. The install doc recently got revamped and may help other readers: http://cx-oracle.readthedocs.io/en/latest/installation.html#installing-cx-oracle-on-windows
I've been learning Python and thought this would be a fun project. It give you three tries to say the magic word when trying to "access his computer." If you don't, it opens a youtube video of the scene timestamped. If you do, it welcomes you to Jurassic Park! # Welcome to Dennis Nedry's computer. Please be polite. import time import sys import webbrowser # Typing speeds for printouts def typeslow(str): for letter in str: sys.stdout.write(letter) sys.stdout.flush() time.sleep(0.05) def typefast(str): for letter in str: sys.stdout.write(letter) sys.stdout.flush() time.sleep(0.005) # Sammy L. tries to access stuff. "Access main security" print "Welcome to the Jurassic Park mainframe." typeslow("Ready . . .") print " " # Keeps track of how many times the user tries to get access. attempt = 0 # The user can attempt 3 times without consequences. while attempt &lt; 3: accessrequest = raw_input("&gt; ") if accessrequest != "please": attempt = attempt + 1 print "access: PERMISSION DENIED." if accessrequest == "please": print "You said the magic word!" webbrowser.open_new("https://www.youtube.com/watch?v=GI_P3UtZXAA") # Three strikes, you're out! Loops the magic word prompt and opens video. if attempt == 3: print " " typeslow("And. . .") webbrowser.open_new("https://youtu.be/RfiQYRn7fBg?t=12s") while attempt == 3: print " " typefast("YOU DIDN'T SAY THE MAGIC WORD.") 
In case your wondering what is &gt; The easiest way to send notifications! &gt; &gt; Got an app or service and you want to enable your users to use notifications with their provider of choice? Working on a script and you want to receive notification based on its output? You don't need to implement a solution yourself, or use individual provider libs. A one stop shop for all notification providers with a unified and simple interface.
Can someone share a good pyinstaller sample for project using entry point?
If you are using psql, i recommend this: https://pgloader.io/about/ I used for ~20 millions lines of data once, it took only couple of minutes. Supports several file formats for input, details can be found here: http://pgloader.readthedocs.io/en/latest/
I have written a proxy server rotation script that works with ProxyMesh proxies. You can check it at https://github.com/kashaziz/rotating-proxy-python
I hear you, I thought along similar lines as well. But take a look at https://github.com/crazyguitar/pysheeet/blob/master/docs/notes/python-new-py3.rst is anything appeals to you. I personally could use Data Classes (@dataclass), fstring, async and await. YMMV 
And that’s why your professor isn’t in industry
Are you planning to fork it and incorporate the changes or starting fresh? I do see that there are a lot of pull request that haven't been merged.. There are so many implementation of autogui tools.. I wish there was a few good ones will less bugs, and then language wrappers around them..
SikuliX is actually an interface to Sikuli written in python. Also there is lackey which is a port of Sikuli to python. Other good ones written in python: PyWinAuto, AutoPy, AutoIT https://github.com/pywinauto/pywinauto/wiki/UI-Automation-tools-ratings
I have no idea who is saying you can't use python to make money, I've been working with Python professionally for 7 years now. I get enough recruiter spam too that makes me think I wouldn't have a hard time finding more Python gigs. 
As a user of both sites you mentioned, this definitely sounds like an interesting project.
Professional Python developer here. They are wrong. There is lots of money to be made.
Check out the newer updates.
&gt;&gt;&gt; "a rose" is "a rose" is "a rose" True
Seems easier on Python as well for the fact that if I get it working one one site for invoicing I can do it for others, and then send the scripts as exes for others to run for their invoice retrievals. Also I am attatching this to another script which organizes the invoices in Excel.
It is one of the languages that shows up the most in [job postings](http://www.codingdojo.com/blog/7-most-in-demand-programming-languages-of-2018/). I think that's a damn good sign you can make money at it.
Github has a contribution tracker.
Thanks, I started this 6 months ago for my language learning. There're still a lot of things to fix and add, such as new web scrapers for online dictionaries other than Dictionary.com &amp; Wiktionary.
Thanks, yesterday I uploaded a long video based on Duolingo's Spanish Course on YouTube. The vocabs were scraped and collected from a Memrise course. I'm going to make this kind video for other languages, German, French, etc. If you're learning a language other than Spanish, let me know and I'll make the next video for it. Spanish Demo: https://www.youtube.com/watch?v=9Xqy4V_7otk
Hi Jay, which program do you want to send data from? Please show us the code so that we know what you're working with.
Put up a bitcoin-cash address and I'll throw you some money.
C: #include &lt;stdio.h&gt; void main() { int c = 3; if (3 == c == 3) { printf("All equal\n"); } else { printf("Unequal\n"); } } Prints: Unequal Go: package main import "fmt" func main() { const x = 3; fmt.Println(3 == x == 3); } Compilation produces the following error: ./test.go:8:21: cannot convert 3 (type untyped number) to type bool ./test.go:8:21: invalid operation: 3 == x == 3 (mismatched types bool and int) Rust prevents it altogether: fn main() { let c = 3; assert!(3 == c == 3); } Compilation produces: error: chained comparison operators require parentheses --&gt; test.rs:3:15 | 3 | assert!(3 == c == 3); | ^^^^^^^^^ error: aborting due to previous error Note the proposed solution is to parse it as operations on the result of the binary operation. Javascript, in the Firefox console (F12, then click on Console): &gt;&gt; const c = 3; &gt;&gt; console.log(3 == c == 3) Logs: false Pretty sure java and C# both do it this way, too. I think the reason this way is more common is that it doesn't require any additional rules in the language. A binary operator is just a binary operator. How it behaves in context depends on the rules of the language. Python's version requires an explicit rule for how chained operators behave, which requires more complexity from the parser, and is another rule for programmers to learn.
Have you tried the standard CS techniques of pseudo code, flowcharts, UML and Flow diagrams? I don't see how python becomes a special case when documenting algorithms, these are standard techniques that can be applied to any programming language.
True, could be applied to any programming language. What do most developers prefer? Pseudo code? Flow charts get a bit messy with more complicated models. I'll need to look up UML. 
Look at some of the commercial presence at PyCon and PyData. https://www.python.org/community/workshops/ Or scroll to the Sponsors section in this page: https://us.pycon.org/2018/ Recognize any logos? 
Continuing from here: https://www.reddit.com/r/Python/comments/7ysxln/project_structure_are_there_any_flaws_with_this/ I am working on a project to automate a bunch of data processing at work. I have got this working on my side, but the next challenge is to extend it to other users using a client-server mechanism. For that I am writing a integration test first. These are the steps 1. User runs a small python exe (`client.exe`) on their desktop. 2. The `client.exe` file takes a `input_parameters.txt` file with a specific name located by the python file 3. It transfer the file to a windows server over `sftp` (most likely using `paramiko`, if it takes too long I will just use a standard program and run it subprocess.call) 4. A python program takes this `input_parameters.txt` file as a input and moves some images from a central repository to a location on the server. The files are sorted into specific folder 5. It then runs a python gui automation program to generate multiple individual csv files (using `pyautogui`) library 6. The csv file is then analyzed, cleaned and from this we generate some values (using `xlwings`) 7. The images and generated (csv, excel) files are then move back to another network-folder Currently, most of the steps from 4-7 are implemented. It didnt have any integration or unit-tests so far. The last couple of weeks I spent learning about pytest, python import system, starting and stopping Windows VMs, VM configuration, in automated fashion. Right now, I am working on steps 1-4. ### The goal for this week is to be able to have a python script that can 1. create a zip file from within the script 2. upload the zip file to a server 3. unzip the zip file in the server and 4. run a python file located within the zip file on the server. 5. Integration into the overall structure of the project and atleast get this module of the integration test working. ### Challenges that I am seeing so far 1. OpenSSH on Windows doesnt work that well. I mostly figured this out.. and am taking a shortcut just so I can get project out quickly. 2. writing out the integration test first probably forced me to think more about the structure of the project and the complexities upfront but also, running an automated integration test turned out to be a bit more complicated, because I didnt know how to configure VMs to talk to each other well, about bridged networking etc. But most of that is figured out. 
Came to say just this.. Selenium is perfect. Al has a good video on youtube: https://www.youtube.com/watch?v=dZLyfbSQPXI
I agree that the python community should focus on creating a better GUI deployment system, but I don't know if it should be the Python Software Foundation's (PSF) primary concern. I think the PSF is hoping in the meantime this void will be filled by some other organization that has a higher necessity for the technology.
You should test out [this bot](https://github.com/Clarissa-Bot/Clarissa.git) a friend and I have been working on. We need new developers and new ideas. Currently we are thinking about using a different corpus than the one we currently use!
&gt;I think the PSF is hoping in the meantime this void will be filled by some other organization that has a higher necessity for the technology. the ability to deploy applications easily is a *fundamental* requirement for any language. Its PSF that should take the initiative. Python is being under utilized right now because there is no proper framework to deploy apps.
Look at something newer: https://pypi.python.org/pypi?%3Aaction=search&amp;term=EDGAR&amp;submit=search 
&gt; So the jist of it is that when you are creating really large scale applications, like a server that needs to process millions of requests per second, Python may not seem like the right choice. I know you're kind of right here in that it _may_ not be the right choice. But it's also not the wrong choice, either. NHS Digital Spine uses Python and handles 1,500 messages per second. If Python is good enough to run the NHS, then there aren't many projects that are too big for Python.
A favourite of mine is: x, y = np.genfromtxt('data.txt').T Assuming that 'data.txt' is x/y data stored in 2 columns
Been working on [this bot](https://github.com/Clarissa-Bot/Clarissa.git) for a while now. Started off as a literal toy project. I have long ways to go, and most definitely need to follow pep's guidelines for code etiquette by version 2.0.1.
Maybe solving that specific problem is too resource intensive for them to tackle right now. I agree it would really enhance the utility of the language if this problem had a better solution. I'm sure it's on their TODO list somewhere, but unfortunately isn't really high priority at the moment. Most likely due to a lack of resources. This is all conjecture on my part, so I could be talking out of my ass.
You can be a good software engineer who only knows how to write python, but learning other languages will make you an even better.
Thanks, this is good to know.
If anyone was clever enough to convert the hex bytes in your Wireshark pics to decimal, they'd have the IP of the stabby server ;) It's the 4 bytes that follow your address in the ip4 header of the frame. 
You can start by reading the sidebar, which is what it's there for :I
Ah, did not realize that.
I think it’s not a priority at all, not even a low priority. Python 3 has been here for 10 years and we don’t even have a beta application deployment framework yet ! If they were working they would have Atleast an Beta. Right now even if I write apps in python because it’s an easy language to do development in, i don’t know how to distribute it to clients 
Seems like a bunch of changes made to appease the 1%, while pissing off the other 99... Print is a function, and strings are unicode. Yuck. Print was pretty darn handy the way it was, and unicode is a fine tool for, uhhhh, people who need it. To everybody else it's just a PITA. Next, division operator. Seriously? This is an improvement? ...And it goes on from there. Most of these "improvements" could/should have been handled by specialized packages, rather than by sacrificing readability/usability in the language. But yeah, YMMV.
Yup, it's really easy to get the server IP. I just didn't include it with the bot so script kiddies won't abuse it. There's no limit on connections to the server, so you could really easily perform a denial of service with this bot and some slight modifications.
&gt; s best: crunching the data. I am starting with both Python and Tensorflow at the same time so don't want to learn another language at the same time.
&gt; out the fundamentals like backpropagation, gradient descent, convolution, optimization, etc. &gt; &gt; &gt; &gt; Then do the TensorFlow tutorials (e.g. MNIST). In my opinion, that's a w I have been learning about the fundamentals of machine learning in my free time but have not got enough time to code yet. I am planning to write some genetic algorithm stuff at first that I plan to train without any visuals but I also want to see the visuals when needed to see different between generations. I started learning Python like 2 weeks back so I am very new to this.
Salary. 
I personally really like the changes. Print as a function removes syntax corner cases (printing to stderr just looks weird in 2), Unicode strings are nice, and true division by default is a lot easier for newcomers to remember (we don't all come from C). It is slower than Python 2, which isn't cool, but understandable, and worth it for my use cases (if I'm in Python, I'm not trying to wring out every cycle). Anyway, I hope you grow to like it more.
oh, awesome, let me check that out :D
I think of it like this: a software engineer is a software developer with more proficiency in data structures, algorithms, Big O notation, and more complex computer science stuff. (Stuff that would be covered in a CS major in college) Therefore it's much simpler to teach yourself to become a software developer (i.e. learn a language, and become competent in a couple frameworks or libraries to build stuff). Then, when you build enough cool side projects, you can put together a portfolio, and potentially get hired by a company or startup (or build your own), while learning the more advanced topics to eventually call yourself a software engineer. Source: I'm doing this right now
_I_ prefer the justification / explanation to be adjacent to the code. So docstrings. Model after UML or whatever as needed. Make asciiart diagrams if it helps convey a point. Python is close enough to pseudocode; no not-quite-executable variant is needed. 
Not quite...My boss manually makes a tsql query and copy &amp; pastes the result into the slack channel up to three times a day. I made a bot that does this, so anyone can check the status of our team's progress.
gotta find a way to trick yourself into hyper focusing on it. 
 def newNation(): nation = input(activeN) if nation == 1: self.Nation = ("Castile") self.army = 21 self.money = 26.26 self.dynasty = ("De Tratsamana") rname = ("blank") print("My liege", rname,"You are the Monarch of Castile, The True king of Spain! Long live Spain, Long live the king.")
I didn't misunderstand it, it's a trivial, uninteresting question that's been asked and answered on a roughly weekly basis on [r/learnpython](https://www.reddit.com/r/learnpython/) since I started using Reddit, I just found the SyntaxError annoying. No idea why you're going full troll on it, but hey, if that's you're way of feeling valuable in life.
Adding color and tables to console output is another way to totally hose parsing. Remember kids, if you make cli output fancy and easy on the eyes (please do!) just make sure it’s an option, not the default output mode. 
Checked out your repo. I like the concept of the rock paper scissor game. It'd be interesting to see if any strategies can be implemented.
Thanks for the great feedback. I read about measuring time in Python [here!](https://www.pythoncentral.io/measure-time-in-python-time-time-vs-time-clock/). clock() as you say measures cpu time in linux based systems while time() measures wallclock time, so better to used time() on linux systems. On windows systems clock() is same as time() but more accurate. So I will add that feature like **timeit** does. For your bullet points: * used class because i learnt to make decorator that way. the function way seems simple but how to return the timer object to the main program thread without messing with the decorated functions return values? cant find that. * That is an excellent idea i hadnt thought of. The decorator must be as general as possible. * This is a very good idea. I will put in some option to declare a timer that calculates the statistics when required and not calculate when only simple timing is required. * Similar question: How to return the timer object after the context is over? I have to experiment with these things but a push in the right direction would be awesome.
Ok, I obviously cannot see your full code, but if that's all indented to the left-most side of the module, then it looks like you *should* be getting a NameError that **self** is not defined, and it should point to that line where you call **newNation**. If you changed **self** to **r1** (because it looks like you're intending to call **newNation** on an *instance* of your **Player** class, although that's a bit unclear), then you'd get a TypeError, because as defined **newNation** does not accept arguments. If you changed this: def newNation(): To: def newNation(self): Then your code would *probably* work, but then it should be indented *inside* the **Player** class to be an actual *method* of that class: class Player: def newNation(self): """ Set a new Nation on the Player. """ [...] ... because right now you're making a *function*, and a function that is so tightly bound to a particular class as to always need an instance of that class as a first parameter should probably be a bound method of that class.
You have used "def", but what you want is "class." class Nation: def __init__(self, args): # all your starting self.variables go here def do_a_thing(self, different_args): # code to do something There are two other problems with: newNation(self) First, newNation(self) needs to be assigned a variable name. Without a variable name before newNation(), the computer creates the object, but the program can't access it after that. If you can't do stuff to the object later, it's useless to you. Do the following instead: my_nation = newNation(self) The second problem is the argument passed to newNation(). "Self" won't work, since outside of creating a class, "self" means nothing. I assume you saw all of the "def my_function(self)" statements used in classes and figured you'd need that when creating a newNation(). That is not the case. Either create "my_nation = newNation()" without arguments or have some basic arguments like name, population, and so on as in *my_nation = newNation("Castile", army=21* Some tips: * Ditch the parentheses around strings, except for "input()" and "print()." Parentheses are for feeding variables into functions, not creating strings. Print() and input() are functions. * Don't name your class "newThing." Name it "Thing." You're on the right track by seeing that classes are used to make new objects, but naming things "new" is goofy. * Learn how arguments work, so that you can make many different countries with different names. If you say "self.name = 'Castile'" in newNation, then every nation will be named Castile, which ruins the purpose of classes. Classes are templates. * Descriptive variable names reduce brain fatigue. The amount of brain power used to remember what you meant by "rname" and "r1" is small, but it builds up over hours of programming. Try "ruler_name." Overall, here is what I would start with to get make this game: class Nation: def __init__(self, name, army_count, money): # take all the args in the parentheses and make them into class variables usable throughout the Nation class self.name = name self.army_count = army_count self.money = money def increase_army(self, increase_by_this_number): self.army += increase_by_this_number # etc... class Player: def __init__(self, name): self.name = name # etc... def main(): # ... ruler_name= input("Please enter a name for your ruler: ") player1 = Player(rname) player1_nation = Nation("Castile", 21, 26000) # etc... There are other ways to skin this cat, but this is one good way to do it. Checkout /r/learnpython for future questions.
Don't depend on `is` working with strings/numbers/objects/most things. You got lucky this time because they're short strings and your environment interned them.
Thanks heaps, Makes so much more sense, in the future i will use r/learnpython. 
Will requests 3 support HTTP2?
There's no fixed and standardized definition of these two terms, and it depends a lot on the interpretation of a specific company. In several less hierarchical companies I've worked for, they're pretty much interchangeable, and one department calls "engineers" what the other calls "developers", with little difference in basic responsibilities. In in other more hierarchy-focused companies the "engineer" role has more of a sense of seniority, someone with sufficient chops to be responsible for an overall product rather than the individual components of that product, while the "developer" or "programmer" roles tend to be consuming and closing Jira tickets opened by an "engineer" or "architect". Without the context of the company's view on the roles within it, it's just semantics.
A software developer writes software using the APIs/libraries that the software engineer creates.
I got lucky because I tested the code before I posted it. :) You're right, though.
Python is always the savior!
That's indeed a bit confusing, but at closer inspection you realize that the expression `None if b else x` is just the first element of the tuple.
That's true, but then I'd just suggest using matplotlib.
Feel free to pm me if you need any help with it.
I really want to be ahead of my class with everything so please assist me :D Quick questions, if i want to be the best at programming do i need to learn multiple languages? Do i need maths to be good at programming and what type of maths (be direct)? Ty!
Algorithms are generally written in psuedocode. Python is basically executable psuedocode. I think it's just easiest to write it.
Read the sidebar, post in the right subreddit, and read the sidebar over there, too.
"I didn't misunderstand it" Thinks that someone would actually type `-&gt;` in python.
You seem to like that word, skid.
People with no common sense and basic knowledge shouldn't even be allowed to post there, not sure why it's not a thing yet :)
Me either. Based on your comment and post history, it would at the very least have kept me from interacting with you.
Wow, thanks, I don't know why I thought it's not possible (in C, JavaScript, at least).
thanks man :D
To identify the best scenarios for API testing and how you can achieve the most comprehensive test coverage, join this free webinar, 'The Future of API Testing - Trends and How to Propel Your Testing' on Tuesday, March 27, 2018 at 11:30 AM PST. Register with the following link: https://info.qasource.com/signup/the-future-is-api-testing
I think you don't really need to learn lots of languages. Just pick language based on your needs. Python can be used in many fields. So first. Find on what you want to work on. Like web development, android, data or machine learning etc. Learning maths is never a bad idea, but you don't really need to know lots of maths. Just basics will do the job, I think. I have only seen Partial derivation on machine learning
No, never heard of it before.
Idk
 exactly true
When you are developing a software from scratch you are a developer. When the softest is published and you are doing regular maintenance work on it, you are an engineer. Like someone said already, there is no proper industry-wide definition and it all changes from form to form.
I'm working on a server/client connection's app with a GUI and cypher method to save all the info in a database(currently waiting to add more stuff)
Hey there! I'm struggling a little to visualize the data you have to loop over but from what I've gathered, what you need sounds fairly simple. I hope my following example can help you a little. https://pastebin.com/g9CAaBPX Good luck buddy.
That's simple precedence.
In some countries, engineer is a protected term which can only be used if you have the proper degree.
Made a lot of changes and added new features. Statistics, time data gathering. I do need a picky person to review my code. Maybe you will get more ideas looking at the code from a different point of view than me. 
This seems to be a /r/learnpython kind of thing. Anyway, it's not exactly clear to me what your datastructures are, especially `MasterDict`. Does it have a key `"Employee ID"`? What is exactly the data you want to collect? Just the sum totals of Choice A and Choice B? In the source data, is there only one entry per employee or can there be multiple?
If stdout is not a tty, suppress any fanciness.
I put the noun to ease searching and mental identification of relationed variables, methods, functions, etc. I feel it's easier while skimming for the code. 
 &gt;For example, do you use `id_file` or `file_id`? `radius_earth` or `earth_radius`? ` Whatever is the most concise. If I'm iterating over enumerated files, for example, I might use `for file_id, file in enumerate(files):`. In general I think I lean more towards `broad_specific` but I'm know I'm arbitrary sometimes.
Interesting read! The link to the programming guide gives me a 404, though.
Thanks! `MSJMKmZahSTti343DuhQRPfSvDofsZn6fo`
Not likely at first, but that is a longer-term goal.
Still trying to make my [mini-frame](https://github.com/jdavidrcamacho/mini-frame) to work.
ops! thanks a lot, there was a typo, now is fixed.
Yea that's why Django is so popular.
&gt; ...adjective before or after the noun? &gt; [list of examples without a single adjective]
Sometimes "engineers" like to think their title implies a higher level of competence. They don't merely "write code", they "engineer" things, which is totally science. This assumption is incorrect.
I think the logic would be to use `file_id`, `earth_radius` and `item_count`. Why? Because `file`, `earth` and `item` are almost classes where `id`, `radius` and `count` would be properties. So like you will wrote `file.id`, you will wrote `file_id` because you may not need a classe but just a variable. 
[Github](https://github.com/butlerallenj/osa) This was my first ReactJS app and although it is a bit sloppy, I learned a whole lot. I started this project as a gift for a friend who loves the game Overwatch. The idea was to build a "trophy" that could be put on a desk to display the statistics associated with a gamertag. Currently it only supports Xbox for gameclips (I'll have to go back and modify for other sources like PC and PS4). 
In case you are interested, the package "pyglet" seems to be quite interesting. It a high level animation package (not like pyOpengl) which seems quite intuitive.
You might want to check this https://p5py.github.io
&gt; I forget the term but C can do everything assembly offers What? How would I add the contents of the eax and ebx registers and store them in eax with C? How would I push data on the stack (i.e. the push/pop instruction on x86)? I am aware of inline assembly.. but that's not a C feature but rather an extension of your C implementation. C does not offer a way to go this low-level.
oh its perfect. I was looking for something just as "Processing" and they are so similar. Thank you very much!
Fair point about the unix/Windows discrepancy. Does windows have a way of measuring CPU time? For the class/function decorator thing, you can set attributes on the function itself. Something like: def function_timer(fn): timer = Timer() def wrapped(*a, **kw): try: timer.start() return fn(*a, **kw) finally: # This will stop the timer, whatever happens in `fn` timer.stop() wrapped.timer = timer return wrapped The try/finally allows you to return the result of the wrapped function directly without storing the result in a temporary variable. For the exception thing, you might have a function that you are aware might throw an exception. Consider a simple divide function. @FunctionTimer def divide(a, b): return a/b If you decorate this with your timer, and then call the function in an unsafe way (with input from users etc) try: fraction = divide(1, 0) except ZeroDivisionError as zde: # expected error In this case, your timer will continue to run. In general I thinks it's better to try and reduce the constraints libraries put on existing code. There are times when raising an exception is the right thing to do. If you've not come across the [functools](https://docs.python.org/3/library/functools.html) module, have a look at the `wraps` function to keep function names/docs/modules consistent. --- For the context manager, the 'clean-up' when it exits is just to stop the timer. I'm not sure what you mean about returning stuff when it exits. The return type of the `__enter__` method can be assigned to a variable. Something like [this](https://gist.github.com/facingBackwards/6db508f7e06b62538488ec9bccef3f08) would let you wrap arbitrary code and let you access the results as you are already. --- #### More nitpicking stuff ##### This is more personal preference, feel free to ignore it. ###### \_\_str\_\_ fomatting In your `__str__` method, you don't need to round the numbers before converting to strings. You could replace the `round` calls with the built in str formatting. eg: &gt;&gt;&gt; a = 3.14159 &gt;&gt;&gt; '{:.3f}'.format(a) 3.142 If you don't mind depending on Python 3.6+, you could simplify it further with f-strings: &gt;&gt;&gt; a = 3.14159 &gt;&gt;&gt; f'{a:.3f}' 3.142 ###### final_stats() I'd remove the `final_stats()` method. It's an extra step that has to be run before things work as you'd expect and means the timer can be in an inconsistent state. I would either add those calculations to the `stop()` method, or if you'd like to keep the lazy evaluation, maybe look at properties, so that if they haven't been calculated yet when you try to access one of the dependent attributes, `final_stats` get called automatically. ###### kwargs vs keywords Where you decide which units to use was it a conscious decision to use kwargs instead of a simple keyword? def __init__(self, **kwargs): self.unit = kwargs['unit'] if 'unit' in kwargs else self.__class__.default_unit Could become def __init__(self, unit=None): self.unit = unit or self.default_unit
Adjective first, unless there's a bunch of them that go together. So `earth_radius`, but if I'm doing the entire solar system, it'd be `radius_mercury`, `radius_mars`, `radius_earth`, etc.
Okay so imagine an excel sheet. Column A is Labeled "Employees" Column B is Labeled "Choice A" Column C is Labeled "Choice B" They are in a Tab Seperate List which we read to populate the MasterDict. MasterDict = {"employee": [], "choice a": [], "choice b": []} Example data would look like: J. Brown 3 2 A. Brown 2 5 N. Nelson 4 8 If we have another set of data: J. Jameson 1 30 N. Nelson 4 5 A. Johns 9 3 I dump both data sets into identical dicts (except for the values contained). The MasterDict contains all previously compiled data, so we want to change it's values and append new employee keys. So how would I increment N. Nelson's previous choices with this new data and append the new employees and their choices? Using this data, we can create a ratio between favored meal types.
The data has already been counted. I need to increment the existing data by the new data, and append new entries.
Take a look at bellybutton if you need custom linting rules https://github.com/hchasestevens/bellybutton
Yes but erlang does it better.
Integers. The number of times that meal was chosen. Sorry for the headache 👼🏻
I'm nowhere near an expert, by my teacher always said to name variables in a way that makes sense in human language. Does the variable contain the earth radius? Then it will be earth_radius
All of your examples consist of two nouns. I think I would find the convention of putting the head noun first (e.g. id_file, count_item) to be confusing because it sounds weird and could denote some other meaning. But it sounds less weird when you use adjectives. For example: file_new vs. new_file. 
This is how I do it as well. If your ide has autocomplete it makes more sense. You can type earth and see all the related variables. If you type count and your counter was cnt you’ll never find it. 
Agreed. Also, sometimes you might need multiple variables and want them to look grouped with creating an object. For example, earth_equatorial_radius and earth_polar_radius. 
Pandas?
In both dictionaries? 
Clicking on "Examples" gave me source, clicking on "Source" gave me examples.
Think about its meaning to you, as well as potentially others. File_id sounds to me like a variable reference to a specific file being worked on, whereas id_file sounds like a reference to a file containing identifiers...
Obligatory r/learnpython and 'format your code' etc. etc. What error do you get?
No ORM + Stored proc...
My wallet doesn't like the new address format, hope this helps! /u/tippr $15
Is there a way to paste it with the same format? The errors I am getting with py2exe starts with Traceback (most recent call last): then it lists a bunch of files like: File: "stltest.py", line 2, in &lt;module&gt; And ends with an impotError: No module name FileDialog Does this help? 
u/kennethreitz, you've received `0.01391104 BCH ($15 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://learnbitcoin.cash/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^Powered ^^by ^^[Rocketr](https://rocketr.net) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
If you're starting out, pick what's popular because there's just an absoulte tonne of info available online. For that, Flask is great. Super popular, answers available for just about everything, very well known. For big projects, Django is great, Pyramid is great too, but so is Flask, or Sanic, or any of the frameworks. It's about what fits your mental model best and what works well for your process and task. You won't know what you want here until you have done a few small projects in each of the frameworks. Asking "what's the +/- of X, Y and Z" tells you absolutely nothing because noone knows what you're actually trying to achieve. Same with choosing a database backend. Same with choosing a car. "Should I get the 7 seat people mover or a harley davidson? what's the +/- of each?" I don't know, what are you trying to achieve? I certainly wouldn't recommend the Harley if you're trying to drive a big family around every day.
That is a strange way to store the data, to be honest, because you access the data by employee. I would go with a defaultdict: from collections import defaultdict, Counter master_dict = defaultdict(Counter) #master_dict["J. Brown"] == Counter({'Choice A': 3, 'Choice B': 2}) That way, when updating, you can do: def parse_dataset(file): dataset = {} for line in file: emp, a, b = line.split('\t') dataset[emp] = Counter({'Choice A': int(a), 'Choice B': int(b)}) return dataset def add_dataset(dataset): for employee, choices in dataset.items(): master_dict[employee] += choices If you want to store master_dict and only need to use it with Python, I suggest using [pickle](https://docs.python.org/3.6/library/pickle.html).
It looks like you are trying to import `FileDialog`. This means you have `import FileDialog` somewhere in your code. Follow the errors until you find the file that tries to import FileDialog.
https://www.coursera.org/specializations/computer-fundamentals this is what I learned with. I would especially recommend the first two courses for getting started with a solid foundation. I really like the instructors and I think you can complete it relatively quickly with a solid understanding of not only python, but good best practices for coding in general at the end. I can also say that these courses are what really sparked my interest in programming in general.
Use github for projects and gist.github.com for small snippets or individual files. This will make it a snap for people to both comment and offer suggestions and give you pull requests http://gist.github.com 
The entire error is: Traceback (most recent call last): File "stltest.py", line 2, in &lt;module&gt; file "pylab.pyc", line 1, in &lt;module&gt; file "matplotlib\pylab.pyc", line 257, in &lt;module&gt; file "matplotlib\pyplot.pyc", line 116 in &lt;module&gt; file "matplotlib\backends\__init__.pyc", line 60, in pylab_setup file "matplotlib\backends\backend.tkagg.pyc", line 7, in &lt;module&gt; file "six.pyc", line 203, in load_module file "six.pyc", line 115, in _resolve file "six.pyc", line 82, in _import_module ImportError: No module name FileDialog 
As far as GIL argument, is [multiprocessing](https://docs.python.org/3.5/library/multiprocessing.html) not a viable solution to that problem? I'm relatively new to the python game, but have been able to solve some of my concurrent process issues with multiprocessing but I'm not entirely sure it's actually taking advantage of multiple cores.
Thanks for the suggestion! Do I include the error I am receiving at the bottom of the code? 
I would use `fileId` and `numItems`
Wich is not how you name variables in Python. See [PEP8](https://www.python.org/dev/peps/pep-0008/)
Generally, I've seen the error as a separate file. But often, we need to see the entire file (or set of files) to know what's really wrong. And because you're building a package and not merely running a file, the rest of your files becomes important.
/r/learnpython
So sth like this: from collections import defaultdict, Counter masterDict = defaultdict(Counter) masterDict['user1'] = Counter({'choice1':5, 'choice2':10}) masterDict['user2'] = Counter({'choice2':5, 'choice3':7}) addToMaster = { 'user1': {'choice1':1, 'choice2':2, 'choice3':6}, 'user3': {'choice1':2, 'choice3':4} } for user, userData in addToMaster.items(): for meal, value in userData.items(): masterDict[user][meal] += value masterDict &gt;&gt; defaultdict(collections.Counter, {'user1': Counter({'choice1': 6, 'choice2': 12, 'choice3': 6}), 'user2': Counter({'choice2': 5, 'choice3': 7}), 'user3': Counter({'choice1': 2, 'choice3': 4})})
I think it is taking advantage of multiple cores if you are implementing it right. An easy way to check would be to check your CPU utilization with a UNIX command like `top` or windows task manager. There are drawbacks to multiprocessing in Python though from what I have read. Namely I think there is a noticeable amount of overheard for doing things like passing messages between processes and starting new processes. TBH I haven't looked at multiprocessing in Python in a couple years as I've been mainly working with JavaScript at my job.
this post has nothing to do with async
I've been asked this a lot over the years, and I always give this answer. &gt; "Always put the biggest unit first." This will depend on your program's architecture and prior naming convention, and convention of the language. If you're using python, an OOP language, usually the biggest unit may be a class of some kind. But, consider this carefully. If you want to be saying that a `file` has many properties, then use `file_id`, `file_name` &amp;c. If you want to be saying that `id`s are general, and you want to be contrasting the `id` of a `file` with the `id` of a `thread` or `program`, then use `id_thread`, `id_file` and so on. Likewise, if you have `earth` having many properties then you have `earth_radius`, but if you have a lot of radii of every planet or body in space, then `radius_earth`, `radius_sun` &amp;c. makes more sense. This isn't just pedantry, there are specific advantages of writing this way. Firstly, and most importantly, it makes your code more readable. Not only does it make it clear what your object is describing, but it gives users insight into your program structure. Consider: `radius_earth` is one of many radii. You can't say if `earth` is even present in your program. `earth_radius` is a property of `earth`, and there are probably other `earth_*` in your program. Next, it makes your code easier to document and search if you group together items in a consistent way. If you do use code documenting tools, similar items will now appear next to each other alphabetically. This is the exact reason why UNIX timestamps use YYYY-MM-DD HH:MM:SS. Using any other order messes up sorting, and would be a headache if you wanted to sort anything chronologically using character sorts. Finally, it makes your code extensible via tools. Granted, many programmers don't use automation, but somebody who uses your program will try, one day. If I want to decide that, after making an `earth_radius` `int`, I actually want to make an `earth` class with a property `radius`, it's easier for me to run a script replacing all instances of `earth_` with `earth.`. This means I can get `earth.radius`, `earth.temp`, `earth.mass` all from similarly named variables. If your names are the other way around, this has to be done individually, and creates a bit of a headache as you spend more time rewriting code. What should be possible is a quick change of name, and then verification that everything you did was OK, because this is far more efficient (if you've been writing consistent code, that is).
&gt; You don't need random.shuffle. Just random.choice hey thanks. I assume this is more efficient and that's why one would be better than the other... correct-o?
thanks! And for sure there should be some.
I don't use most IDEs, so I can't say - but my editor is completion only and not suggestion.
The problem probably is that matplotlib has runtime dependencies, which means that certain libraries are not imported at the top level and thus not recognized by the compiler, but they are needed at runtime. You can solve this by explicitly importing them in your file. In this case, try adding import FileDialog to the top of your file.
There's no such thing as a default setup.py. Again, I'd expect to see you post the rest of your files (github is a great place to do that).
I’m trying to teach myself how to build a bot for crypto trading on binance... No idea where to start 
With Python I always try to write everything the exact way I say it outloud. If my code works, but I can't literally read it like an understandable sentence then I will refactor it to make it as clear and as readable as possible.
instead of `r.text` you need `r.json()`. `r.text` gives you the result as a string, without trying to parse it in any way, `json()` will try to interpret that string as JSON.
There's another subreddit you *might* want to check out: r/learnpython The problem is that it can be a bit of a weird echo chamber where people who only almost know what they're talking about give advice to people who don't know enough to tell good advice from bad advice. There's also way too many people "getting ready to get ready" --- endless discussion about which resource is the best or how to start or people who haven't done anything yet working out their two-year learning path. So... I highly recommend [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/) as a first step. Along with that, you might also want to checkout some of the command-line instruction available from The Carpentries ([Data Carpentry](http://www.datacarpentry.org/) and [Software Carpentry](https://software-carpentry.org/)). Ok, but why that, and not a hundred other beginner Python resources? (And for that matter, why Python, and not JS or Ruby or C++ or whatever.) Because if you don't become a developer, you'll still have meaningful coding skills. There are a lot of ways that having Python and command-line skills will help you in any tech-adjacent field or career. Learning how to build a crappy website or make tic-tac-toe in C++, or whatever first projects are used in entry-level books just doesn't provide you with a lot of practical skills --- they're trying to provide a foundation for you to build up on, but it end up being a "[Draw the rest of the owl](http://i0.kym-cdn.com/photos/images/facebook/000/572/078/d6d.jpg)" situation. Instead of that madness, start learning Python by doing things you might do even as a non-developer: moving files, bulk renaming files, copying data from one place to another, resizing a hundred images all at once, moving data from a csv file to a spreadsheet. These are useful things you can use, even as a non-developer, to make your work and like easier and more efficient.
It is faster if you look at the code. random.choice code is just one line return seq[int(self.random() * len(seq))] random.shuffle requires a plenty of internal manipulations on arrays (lists) including reversing them and also requires for you to pick elements.
they're technically nouns but u know what he means
Thanks! That works perfectly. I knew I was missing something super obvious. 
That works for simple cases, which *might* include OP's needs. But what I've found is that uses cases expand, and Qt is good for expansion.
What color is the bike shed?
Awesome! Should I also add it to the setup.py? Thank you!
Will do when I get home! Thank you!
YouTube would be a good bet for a starting place
Tried but still can’t seem to figure out a starting point. Literally 
I understood the joke (I am french) but I wasnt sure it was one. In doubt...
Well first I would find either an API for binance or intercept the requests your browser makes when trading. Next I'd work on doing some machine learning with the past data of whatever coin you want to trade
Exactly. Thanks for laying it out so clearly and saving me from typing up a worse version myself.
Such 3D manipulations can be implemented using matrices. Your input point will be a column vector v=[x,y,z,1]^T and output vector will be the result of premultiplying your input with an appropriate matrix A, that is, your result would be Av. See (here)[http://web.iitd.ac.in/~hegde/cad/lecture/L6_3dtrans.pdf] for a good reference on constructing matrices for rotations, scaling, etc. (Here)[https://www.lfd.uci.edu/~gohlke/code/transformations.py.html] is an excellent library if you should ever need one. It has excellent references and implementational ideas in its comments, so it's worth a look even if you don't use it. Best of luck!
Uh...what type of framework? Web framework? You really need to describe your requirements a bit more if you want good recs.
reportlab is the most popular by far and has a commercial offering with template support
I was just looking at the documentation for that! OK so with reportlab do you know of how I could integrate my plotly graphs into the reportlab PDFs? I know reportlab has its own way of creating graphs but I'm specifically going for the look and feel of graphs in plotly. An issue is that plotly graphs are in html format so is there a way I could integrate those html files into the reportlab PDF?
FYI you don't access to db instance to use LOAD DATA INFILE, there is a LOCAL option if you want to send the file from client to server. I'm using this to massively speed up data inserts in a Django app.
Write a bot that reminds you of things.
Well I've had the pain of drawing charts using reportlab and would stay well away. If plotly can export SVG or some other vector format (I'm sure it can) you should then be able to embed that into the PDF
you would use `file_id` and `num_items`
Not when your company still believes in windows XP
Yeah the issue with plotly and getting the svg is that you have to open the html file in a browser for it to download it. Do you know of any method I could use to "open" the HTML document with Python and extract the file that auto-downloads?
Yeah I've been looking at reportlab definitely. Another route i've also been considering taking is creating a single static webpage with Python and then using xhtml2pdf to create the pdf page. Do you know of a solid library for creating really simple single static webpages?
Good catch. If you look at his full error you can see it tried to import it on line 82.
You should check if there is some way to enable more detailed logging in boto, that might give some clues?
Sure, you could use chrome headless or phantomJS maybe to mock a browser, the former is probably the better option.
I had to do a 3d rotational matrix by hand across several homework assignments in a class. Fuck. That. Noise.
A static site generator is what you describing, there are quite a few Python ones, but not sure of any with programmatic CSS
In short scripts and notebooks where the variable count is low: usually adjective first simply because the makes the initial letters of variables different so it is easier for auto-completion. When there are a large number of variables: usually noun first because this allows thematically related variables to appear together in auto-suggestions.
Hey, thanks for the update! Now that you mention firewall settings, it’s probably something to do with IT settings at my work since I’m using my work laptop.
It's been mentioned elsewhere, but I also use [wkhtmltopdf]( https://wkhtmltopdf.org/) to generate PDFs from HTML. In my case, I'm rendering a hand-written HTML template, using [jinja](http://jinja.pocoo.org/docs/2.10/) to fill in the dynamic bits, though you certainly could use a static site generater too. wkhtml is based on a relatively old version of webkit, which can be a problem if you need more recent CSS features. Also worth a look would be [chrome headless](https://developers.google.com/web/updates/2017/04/headless-chrome), though last I looked couldn't handle some things I need like page number footers. 
Check out homogeneous coordinate transformations using matrices when working in object space.
This forces the caller to check the return value for None-ness before unpacking it. You may be better off returning `(None, None, None)` for return type consistency. Or raise an exception instead of returning None. Generally, having functions return multiple incompatible types will be cause for extra complexity in their callers.
Alternatively to the mentioned reportlab and wkhtmltopdf, there's also [weasyprint](https://github.com/Kozea/WeasyPrint)... it's a different approach, but has worked quite well for me in the past.
I'm not sure I'll have a use for this library for awhile, however it looks great! I'm curious where you learned this module's design pattern? I'm experimenting at work adding a hardware abstraction layer in Python and think a modified version of "this" would be fantastic.
/u/tippr 50 bits
u/liiight000, you've received `0.00005 BCH ($0.0512955 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://learnbitcoin.cash/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^Powered ^^by ^^[Rocketr](https://rocketr.net) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
I haven't used ddt, from the examples in the docs it looks like it accomplishes the same thing as ``pytest.mark.parametrize``. 
No I wouldn't.
Thank you! I recently picked up "Automate the Boring Stuff with Python" and started working through it. My profession is pretty excel/research oriented so looking into ways to automate/become more efficient. Also certainly open to whatever doors this may open! Thanks again!
This sounds like exactly what I'm looking for. Do you think you could PM me your source code so I could have a look at how you implement it?
Both file and id are nouns. In plain English, you'd say "file id" or "id of the file". So it makes most sense (to me) to name the variable as file_id.
2. So apparently, verbose = hard? 3. You don't need anaconda for ML (the only feature I've used of it is that it's easy to install on windows and comes with a bunch of modules preinstalled, I don't use any of it's features). 4. You don't need Jupyter for ML (never used it in my life and not sure what's the point of it). 5. cool you finally started actual tutorial... ... 8. Program didn't print "Hello world".
Not open source, but it basically looks like this. Look at wkhtml docs for arguments you can pass to Popen and jinja docs for what you can do with templates. from subprocess import Popen, PIPE import jinja2 template = jinja2.Template(open('path_to_html').read()) converter = r'path to wkhtml executable' html = remplate.render() # pass dynamic content as kwargs p = Popen([converter, '--quiet', '-O', 'Landscape', '--footer-right', 'Page [page]/[topage]', '-', '-'], stdin=PIPE, stdout=PIPE) output, _ = p.communicate(input=html.encode('utf-8'), timeout=5) # output is binary pdf data, can be written to file, BytesIO, etc 
&gt; Generally, having functions return multiple incompatible types will be cause for extra complexity in their callers. I have been bitten by my own code doing this when I was first starting. Instead, I often have things like: def domath(a,b,return_sub): if return_sub: return a+b,a-b return a+b Where you can request a different type of return. I am absolutely **not** advocating for it (and it really just wouldn't work in python), but in Matlab, there is a defined variable called `nargout` so you can actually know if the user asked for [A,S] = do_math(a,b); vs A = do_math(a,b); (not that you even need `nargout` in this since if the user doesn't ask for `B` it just won't get it). I think this is overall very poor design (and very implicit rather than explicit), but there *are* some times when it is nice
Can you not export to SVG programmatically? like in this example: https://plot.ly/python/static-image-export/
Well then you haven't seen a lot because matrix math is actually more complicated than taking a derivative of a simple function.
nope it still creates an html file that you have to open
No matter the IDE, auto-documentation and all fancy automatic stuff that goes back and forth in our environment, the good old principle "from the more generic to the more specific" works always, is scalable, and help people think and work better. Maybe against some grammar stuff, but it work. Date =&gt; YY.MM.DD-HH.mm.ss Property =&gt; general_concept_specific_concept and so on. So for your anwser: - file_id (because you can have file _name, _size, ...) - earth_radius (because you can have other properties to the earth). In the best case you would encapsulate inside a new object (earth.size or file.id) but when you cannot =&gt; from the generic to the specific. And in bonus it appears logically linked when the list is sorted alphabetically
noun_verb, but I really only have this problem with functions and it's handy to have data_get and data_put close to each other alphabetically.
eNGLISH.
It does, and I can't think of a field where you would have to know so many different languages. Often times around 3-4 is more than enough...
So is every game. I want to be a game developer, and I'm wasting my days in games collecting all that salt, I don't know how much exactly should I get before my first serious project, any tips?
Hey i know this doesnt really answer your question, but you might like this [jupyter notebook](https://github.com/grantmwilliams/optimization_talk/blob/master/notebook.ipynb) i wrote a while back for a talk i gave at a local meetup. Its got some graphs of hard test functions and compares some algorithms on the different functions. It's really basic and the code is super hacky because i made it in a weekend before the talk :). I've been meaning to come back to it at some point, but i've been keeping myself busy with half finished projects. Feel free to make a pull request to throw an algorithm in to compare, or to fix any of my god awful code.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [grantmwilliams/optimization_talk/.../**notebook.ipynb** (master → 0499079)](https://github.com/grantmwilliams/optimization_talk/blob/04990796a0616e68176f0607b464d9ce4124c331/notebook.ipynb) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dve1ple.)
This is a neat little bot. Great idea too. 
Thank you. :)
Nothing like spending 20 minutes trying to very careful to basic arithmetic and then getting your assignment back and you screwed up something in the middle. Our professor was ruthless and would give a 0 even if everything else was right haha. Boy did i hate rotations and very large matrix multiplication. 
Thank you. Best of luck to you, with your endeavours, too. :)
Thank you. :)
&gt; You don't need anaconda for ML (the only feature I've used of it is that it's easy to install on windows and comes with a bunch of modules preinstalled, I don't use any of it's features). Conda is super common for people working with ML because it lets you easily maintain your dependencies across projects (i have different versions of python for tensorflow/keras, sklearn only projects, etc). Conda also lets you easily get the MKL for numpy which is a pain to get otherwise (and really really increases performance under ideal conditions). &gt; You don't need Jupyter for ML (never used it in my life and not sure what's the point of it). Jupyter lets you easily visual your data. Its really useful for exploratory work or for sharing insights about data / model results with others. Its definitely not necessary and you can do the same things with pyplot in scripts, but jupyter works more like Mathematica. &gt; Program didn't print "Hello world". Seems a little unnecessary. MNIST models are considered to be the 'Hello World' of deep learning, so i think a simple regression model is fine as a "Hello world' project for machine learning.
Always the later option.
Try textract: http://textract.readthedocs.io/en/stable/
I'd stay consistent with what the code base and conventions of the team I'm working on. The difference between the two is minimal enough that the intrinsic ordering doesn't really matter to me. Consistency matters though.
The standard Processing development environment has a plug-in mode to support PyProcessing development.
but you shouldn't have used it in the first place, so you did break PEP8, but now you are too far gone to change them all so PEP8 allows you to continue
&gt;Using `_` for variables you don’t care about is just a convention. How did I never realize this
Ummm, you've come to the wrong neighborhood partner. All of our pythons are made up of ones and zeros with some tabs thrown in. Try: https://www.reddit.com/r/ballpython/ or https://www.reddit.com/r/snakes/ 
&gt;I love using tuples, especially for multiple return values When there's three or more I tend to view this as a code smell indicating either that you should be returning an object or that the method is doing too much.
I always name them stuff like make_auth_url in that case, just seems easier for me and potentially other people to understand later on if needed.
I can't find any reference in the documentation that this works: dynamodb = boto3.resource('dynamodb',a_access_key_id = 'MYSECRETKEY1',aws_secret_access_key = 'MYSECRETKEY2',region_name = 'eu-west-1' Your keys and region should be set up with aws configure or in ~/.aws/credentials I can't find any reference in the documentation that boto3.resources() would accept those as arguments.
in the term `file_id`, `file` is an adjective because it is a descriptor of the noun `id`. 
I'd prefer radius['earth'] though, the item in the list is a radius, you want the radius of earth. If you return a list or radii, I would say radii['milky way']. Personal opinion of course, but it is our style guide at work.
Oh no, don't talk about tabs. Apparently pythons don't like those.
Yeah this. Bear in mind you want to try to write readable sentences when you type Python code. (as much as it comes natural to do so) If the new ID is equal to the files ID. if new_id == file_id: For each file in the data files for file in data_files: Etc... 
If you're familiar with LaTeX, it lends itself quite well to programmatic integration and it produces beautiful pdfs!
I really appreciate the kind words! The design pattern is basically a mixture of OOP and functional programming, where the class declaration inherit the base classes and the notification flow itself bounces the sent data through various task methods.I was actually thinking of extending the docs with some technical details on the process but haven't gotten around to it yet. 
When I write code and there are two equally valid ways of interpreting something I usually make it raise an exception and force users to do it in a clearer more explicit way. I kind of wish that was what python was doing here.
I'd want to do those as `earth_radius_equatorial` and `earth_radius_polar`
For scientific programming I often use _ to denote a subscript, as in `r_earth`. For "non-scientific" variables like a file_id I use it as a space character.
it depends on the context. Eg. if the program/analysis is heavily centered around analyzing radius and other properties of a large number of objects, I think something like radius_earth, radius_venus, radius_mars, ... would make sense. However, if your analysis is more centered around analyzing "earth", it might make more sense to write it as eart_radius, earth_weight, earth_density, etc.
&gt; but you shouldn't have used it in the first place, so you did break PEP8 No. PEP8 was created in 2001, and some of my code dates to the previous millenium. So I didn't!
r/learnpython
Just curious if Cory is going to still contribute, or what the reasoning for the change is. I understand if it's personal, was just curious!
&gt;The common image formats: 'PNG', 'JPG/JPEG' are supported. In addition, formats like 'EPS', 'SVG' and 'PDF' are also supported. &gt;Note: The SVG, EPS and PDF Formats are only available for Plotly Professional users. You can get more details on our pricing page &gt;To access the image in a particular format, you can either: &gt;* append the format extension to the plot url. i.e. the JPG version of the plot: https://plot.ly/~chris/1638 is available at : https://plot.ly/~chris/1638.jpg * Add the appropriate extension to the save_as method: py.image.save_as(fig, 'chris-plot.jpg') 
So first you provide zero valuable info and then you go on to insult ppl - yet you actually wonder about being downvoted..
The people who say use Flask are happy to build just about everything themselves. You can pull in "Blueprints" for authentication and other functions but you have to do the work to integrate them. With Django that is already done for you. You just use them. At first your "small" project just needs authentication for example but as your project grows you need something else and something else again. In Django alot of these are already available ready to go. So while you don't think you need all the features of Django yet.. eventually you probably will.. In my experience anyway. HTH 
This is great! Thank you!
And then there's R where people literally name their variables file.id and I die a little inside every time
It performs the function of an adjective but I don't think it actually is by itself. "Paper" as in "paper airplane" has already become an adjective, but I have a feeling it hasn't happened to "file" yet. For somewhat different reasons, "earth" in this case is still a noun (performing a descriptive function). Potentially, there are cases where "earth" is actually an adjective similar in meaning to "earthly," but a radius cannot be earthly. 
ReportLab is probably the big one. It's been around for a very long time and is pretty easy to use. According to this page, Plotly has a way to save their graphs as png: https://plot.ly/python/static-image-export/ In ReportLab you can insert and image really simply via their Image class. This tutorial will help you get going: https://www.blog.pythonlibrary.org/2010/03/08/a-simple-step-by-step-reportlab-tutorial/ There's also https://github.com/reingart/pyfpdf and https://github.com/pmaupin/pdfrw
I use jinja2 to create static html pages and wkhtml to convert them to PDFs
Didnt see any lanyards, but Python has some official merch from vendors who have pledged to donate a portion of proceeds to PSF. https://www.python.org/community/merchandise/
While you can read off the matrix multiplication from wikipedia and all that, one thing that I recently did that really changed my understand was watch 3Blue1Brown's [Essence of Linear Algebra](https://www.youtube.com/watch?v=kjBOesZCoqc&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab) series. If you're interested in getting a better intuition for how the math and the geometry really connects.
Thank you. :) I really liked his series on [deep learning](https://www.youtube.com/watch?v=aircAruvnKk&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi).
Mock external dependencies to unit test each service. Also look into spinning up an integrated development environment with all services running. Then run your test suite to make sure everything flows thru as expected.
Yes, you will most likely need to install another package. PyGame is still one of the most popular, although it's for creating 2D games - https://www.pygame.org/news See also https://inventwithpython.com/pygame/ There is also pyglet - https://bitbucket.org/pyglet/pyglet/wiki/Home I also know some people have used Kivy for creating games in Python - https://kivy.org/#home
Just, no underscores.
Thank you so much! This is greatly appreciated! 
English lets nouns function as adjectives.
Then use this instead. http://arcade.academy/ 
I start with x1, then increment to x2, followed by x3. It maintains an order to my variables.
This episode starts down the path of test strategy with the first tests to write in either a legacy system or a project just getting off it's feet. We cover: - My approach to testing existing systems. - Put names to strategies so we can refer to them later. - Explain the strategies in general terms and explain why they are useful. - Discuss how these strategies are used in an example project. (The code is available on github). Strategies covered today: - Dog Fooding - Exploratory Testing - Tracer Bullet Tests - Act Like A Customer (ALAC) Tests - Manual Procedures - Initial automated tests at 2 levels, API and UI.
The issue with plotly is that even though you **can** get the graphs as png you have to open the html document first for it to autodownload. I'm planning to get around this with taking a snapshot of the html page with headless chrome
Hi! Do you have any examples of this? 
Well there are other plotting libraries that you can save the plot directly to disk with.
Some people swear by Click, but I am rather fond of argparse, mostly because it's in the standard library.
My coworker explained it's actually a common design pattern in Java called Inversion of Control. Do you have a Java background by chance?
&gt; There's no limit on connections to the server, so you could really easily perform a denial of service with this bot and some slight modifications. Oh geez
Can't say that I do, nor do I have formal programming knowledge. I guess I stumbled into a known design pattern 😁
So when you talk about your work with python in the embedded space, are you referring to small MCUs like the ATMega or STM32 level stuff, or higher up into the single board computer space like the RPi?
It took longer than I was expecting to implement validation in the model layer, but I'm happy with the result.
I used to use Apache FOP for this. I skipped them XSL and generated XSL-FO directly, but it’s not super hard to do either way. Even supported PDF bookmarks (which are a nice usability feature), is really fast, and is rock solid in my experience.
Remember that you can also do nested tuple unpacking which is a godsend sometimes. For example, in unit tests with mocking, sometimes you only care that one particular argument passed into the mocked out call is something you expect. Naively you end up with code like this: self.assertEqual(my_mock.call_count, 1) args, kwargs = my_mock.call_args_list[0] _, thing_i_want, _, _ = args self.assertEqual(thing_i_want, expected) But what you can do is this: (((_, thing_i_want, _, _), _),) = my_mock.call_args_list self.assertEqual(thing_i_want, expected) ... and now it says exactly what you want it to say without any extra noise.
That would be really appreciated thanks a lot
Don't use Pygame. USe Mongro1's suggestiopn. Pygame is outdated.
This really should be the go to answer when people ask questions about game building. Pygame is horrible.
Not web framework. I would like to use python only for processing and get the recommendation data.The display part of the web application will be done by other applications. Let's say, we have to build and expose the data using REST APIs. Can we build REST using Python?
He is unable to contribute to the project any longer, due to the company he now works for. They aren't actively preventing him from contributing, but it's too risky for him to continue, unfortunately. Absolutely nothing personal in any way — just legal precautions.
OK, so I've actually solved this! I used imgkit to convert the html file to a JPG file! HOW TO CONVERT HTML FILES TO PNG 1) INSTALL IMGKIT -- pip install imgkit https://pypi.python.org/pypi/imgkit/0.1.1 -- yum install wkhtmltopdf 2) INSTALL Xvfb --important as it provides a virtual display buffer for the image to be rendered - yum install xorg-x11-server-Xvfb https://reiners.io/installing-xvfb-in-centos/ - pip install xvfbwrapper https://pypi.python.org/pypi/xvfbwrapper/0.2.9 Python code: from xvfbwrapper import Xvfb import imgkit vdisplay = Xvfb() vdisplay.start() imgkit.from_file('[name of file].html','[output name].jpg') 
Thank you I appreciate this!
Or you can go over to stackoverflow or r/learnpython and get the answers for free
OK so I've been looking at Pelican and Jinja2. Do you have any familiarity with them? I'd like to have a base template where I'd just switch out stuff like titles, graph images, metrics etc but have the same layout for all of them
This is interesting! Wow, there are so many options but no the report is not for end users but for the corporate people. I'm utilising a network monitoring tool (Zabbix) to create monthly reports on the devices in our environment
Do you use any IDE for different programming languages? If you do, see if there are plugins or extensions on that IDE for Python. That should help you with familiarity. If not, you can download and use PyCharm Community Edition software. 
Is searching honestly too hard for you?
Who gets more?
Beagle Bone and other similar devices. The system as a whole is not monolithic. There are MCUs in there, and there's one big ass board that is all analog... The BB interfaces via canbus, modbus etc. Implements higher level decisions and strategies. And I can run it pretty bare to ensure good responsiveness without actually being real-time. Real-time is a weird thing anyways. I've always considered real time to be deterministically bounded. Industry peers seem to consider certain flavors of Profinet realtime while others aren't, simply based on speed of delivery. What is real-time for a chemical battery is geological scale for a turbine spinning at 3600rpm...
PyCharm is the purest IDE, but you can also just use a text editor with a plugin (VS Code, Atom, Sublime, Vim, etc.)
Ok thanks! I'm learning python in Codecademy and I think they use python 2, so that explains why raw input doesn't work in python 3.
radii makes more sense. A list should be named what it is, not what each element inside it is. You want to be able to write `for radius in radii:`.
I have and the ones it gave me were kinda bare. Figured asking a person would give me a better answer. No need for hostility.
I've used a lot of eclipse but I've been told their Python plugin is poor.
How easy is it to deploy latex these days? 
Post to /r/learnpython for help. Also, fix your code formatting. 4 spaces before every line will fix it.
If you already know how to setup a project on Eclipse it shouldn't be that hard. My suggestion was intended for you to worry less about IDE and focus on learning Python (keyboard shortcuts, etc). Give it a shot and once you are comfortable with the language, switch to PyCharm.
Arcade
What are your criteria for "best"? I like WingIDE, personally. 
PyCharm.
Visual Studio Code /thread
Is this a question? 
yes.. can you help in solving it with time complexity equal or less than O(N^2)
def equal_cubes(): d = col.defaultdict(list) for x in range(1, 1001): for y in range(x, 1001): d[x**3 + y**3].append((x, y)) for val, pairs in d.items(): if len(pairs) &gt; 1: print(val, pairs)
That wasn't even a little bit hostile. Simply typing "ide" in the sub's search box would have given you dozens of recent threads with peoples' opinions on python IDEs. No need for laziness.
Guess he means that's it's an IDE made for purely python development.
If you're using camelCase, its noun first on variables with an odd number of characters and noun last on variables with an even number of characters. If you use underscores its the same but you don't count the underscore in your count when you write it on a weekend. 
That might make it pure, but why "purest"?
Just go on upwork and freelance.
This sounds really interesting actually and I think i'll invistigate it, thanks a lot for the tip. As to your definition of end-users i guess i had something else in mind but yeah you're right
PyCharm perhaps beats every other IDE, but (conda) Spyder is specifically good for Data Sci stuff
I actually name my based on how I would write it if I was writing a real sentence. It makes the code easier to read I think, and takes less time to grep if you've never seen the code before. I think that flows with the [zen of python](https://www.python.org/dev/peps/pep-0020/) more. 
Sorry then?
Elaborate
Hahaha thanks, I had actually already written it with AngularJS but decided to move to React later. It’s some janky code but the Python API is fairly simple! Shout out to SunDwarf for his incredible Overwatch API!
Because it's an actual inyegrated development environment. Other solutions like vs code or atom are just text editors on steroids. You *can* get the same functionality, but it's not included.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Usually the engineer but it’ll depend a little on the company and industry. 
Yeah, I'd say those solutions aren't really IDEs, at least not out of the box. I wouldn't say pycharm is more pure than other python specific IDEs though. 
I like the idea, but this comes with several serious caveats: - it prevents any access to the event loops, meaning it won't play well with any lib needing a custom setup. E.G: event loop integration with another loop. - in complex setup you may have several event loops in several threads. - you can't easily start and stop the loop, which makes unit testing hard - you don't have control over the pools, and can't scale them at will - you are tying functions to a behavior, since they can't be undecorated - you can plug in a custom error management system, which for debugging async is pretty much required - what about custom eventloop policies ? Alternative event loop implementations ? 
i am getting error : TypeError: first argument must be callable or None
Error on what? Are you using py3? 
This seems to really just address running a single coroutine, which isn’t (from my experience) the common use case running an asyncio application. In this case I’d probably just favor `concurrent.futures.ThreadPoolExecutor` since it’s a simple context manager with a convenient interface for handling things as they finish (such as `concurrent.futures.as_completed`). Beyond that, most libraries abstract away the annoyance (grabbing the loop and starting a task).
`requests_html ` makes these sorts of things elegant. What was the reasoning behind accepting a bespoke string instead of a `datetime.date` object or `days_ago` directly? The current implementation makes the caller use your `date_format` ala `coolpastdate.strftime(imgur_scraper.utils.date_format))`, just for `Convert` to parse it _back_ from the string.
In the sense that they can be attributive and come describe nouns, then sure, but there are other functions of adjectives that the words in these examples can't do. For example, a prototypical adjective is gradable (e.g. very big, really new) and can show comparison (e.g. bigger, newer).
This kind of reminds me of Stream.parallel() in Java 8; yeah, the (ForkJoin/Thread)PoolExecutor setup/use gets hidden behind the lovely syntactic sugar, and that's well worth the sheer clarity of the code much of the time, but, in my experience, also tends to lead to newer developers thinking that its some form of magic ... Having to setup a thread/process pool might be a glob of code, but setting up some default pool with some default level of concurrency can be horribly inefficient.
Thanks for taking look at it. Thought it would be much easier for the user just to type the direct date like "31/12/2016" instead of having to insert a datetime object. 
Latex that will do 98% of what is needed: super super easy Latex that will do the last 2% which is critical to your particular needs: 8 months and four FTE
I want code!
The two hardest problems in computer science are cache invalidation, naming things, and off by one errors.
Fortunately in python it’s really not hard anymore: import concurrent.futures with concurrent.futures.ThreadPoolExecutor(max_workers=4) as pool: futures = pool.map(requests.get, [url_a, url_b, ...]) for future in concurrent.futures.as_completed(futures): print(future.result()) It’s both syntactic sugar over the threading/multiprocessing libraries and fairly explicit.
Run a `os.system("curl -SsL [location-of-html-file] -o [output-filename]")`
Can you put the code on some external site, for easy viewing/downloading?
When will you porting it to PS4? My friend would LOVE this!
Having thought a little more on the idea, it seems the OP could benefit from a concept in curio, `run`. The short is it takes a function reference and runs it in the event loop. Once that’s done all other calls are in the loop (and outside the primary _annoyance_) and outside the scope of a single use decorator.
This solution certainly addresses running multiple coroutines/async functions, I'm curious as to why you think it's aimed at a single coroutine. Maybe my examples are too simple. Yeah definitely if running things in a ThreadPool is going to suit your use case, this library isn't going to add anything for you. The main selling point of the library is that it makes `async`/`await` a little more convenient, and the ThreadPool and ProcessPool are like a side-convenience.
Sort of, at least in my backyard hobby garden. ;) I'm actually writing the code for my Raspberry PI/SenseHat to archive each gardens temp/humidity/pressure data into a MySQL database. My goal is to eventually include sunlight, precipitation, cosmic rays and windspeed/direction. I'll eventually build it out to include crop rotations, harvests, weather damage, etc. My goal is to have a one stop database of gardening stuff.
Be in school?
It may work to run more than one coroutine, but the “need” cited only exists with one entry point. Once the event loop is running it seems to lose value
I'm a professional Python developer, and I used to work in precision ag. I'd say Python is a good choice. :)
Mind if i DM you
An even easier solution using unsync: ```python print([response.result() for response in map(unsync(requests.get), urls)]) ``` Of course this is just complete syntactic sugar. The main benefits of unsync come through only with `async`/`await`, ThreadPools are just a side show. What if we needed to make a few requests for each URL? It could look like: ```python @unsync async def make_requests(url): req_a = unsync(requests.get)('http://sourcea.com/{}'.format(url)) req_b = unsync(requests.get)('http://sourceb.com/{}'.format(url)) return await req_a, await req_b print([req.result() for req in map(make_requests, urls)]) ```
Your patch is not being used because r it's already instantiated. You'll want to specifically replace the element of r.client that returns that object or whatever. (Sorry, on the mobile app and there's no syntax formatting)
This is probably not related to anything in this thread, but I just started learning Python as an introduction to coding and it is surprisingly somewhat interesting (so far, haha)! :-o
Do you mean the "need" in the blog post? Yeah it's a very simple example, I have a [more complicated one here](https://github.com/alex-sherman/unsync/blob/master/examples/mixing_methods.py) and there are more in that folder. Once the event loop is running is when unsync gets its value, the ambient event loop let's unsync functions be invoked whenever. I'm not sure how it loses value.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [alex-sherman/unsync/.../**mixing_methods.py** (master → ba49099)](https://github.com/alex-sherman/unsync/blob/ba4909935ff53550d70d7983383f1da313ef3ff0/examples/mixing_methods.py) ---- 
Depending on the need for results there’s either `as_completed` or `wait`, so the make_requests sample can be as simple as calling a coroutine (without awaiting) and passing it to whichever makes sense. (Sorry for the indirect link, I can’t get the sub header one on mobile: https://docs.python.org/3/library/asyncio-task.html) But again, the provided example is really just the “entry point” to the async system. If you’re just using one coroutine then asyncio really may not make sense from a legibility standpoint. Threads do almost the same thing there. Alternatively if the intention is an asyncio based app, I’d argue the explicitness of asyncio is worth it vs pulling in another dependency for people to understand. 
Yes. Flask seems to be promising. What is the learning curve for one who first time learning python? 
There is also this https://github.com/plotly/image-exporter
Depends what you mean with deploy. You could also set up a little render sever (send data, get pdf back) I was working on something like this the other day. I will post the link later. 
yeah i meant like not everyone spends their time programming constantly in school and there is a certain point when you're "capable" of being an intern and I'm wondering at which point that is. When you're comfortable with 3 languages? When you know one but can learn more and so on and have no problems with syntax? When you know architecture of computers and how all of it works and you've written your own compilers? And so on...
Learning tensorflow for machine learning in python.
Pylatex author here. I specifically created it for reporting needs of my own originally, so creating tables is quite easy. Knowing some latex is definitely important when using the library though. Be sure to check out the examples in the docs and to use the generate_tex method to debug the output. 
Sorry and thank you~~
You could have done that directly with plotly as I pointed in my comment
Regarding your first issue with the explicit event loop, curio and trio fixed that long ago. asyncio took notice, and added [asyncio.run](https://docs.python.org/3.7/library/asyncio-task.html#asyncio.asyncio.run) in Python 3.7.
* passstore.sh should be run directly using its hashbang rather than via explicitly calling bash * passtore.sh should probably not have an extension if users are supposed to call it directly * passtore.sh should have argument parsing, at the very least --help * passtore.sh needs error handling, and probably should use "bash strict mode" * don't assume a directory for the code * don't make db files executable * don't call python explicitly if you're going to make the script executable * passtore.sh doesn't even need to exist, actually - package up your module using setup.py and it will be able to be called directly * your python script should specify python2 or 3 in the hash bang * it's also missing appropriate argument parsing - look at optparse, docopt, or click There's some more in specifics, but that should give you a good list to work through for a while. :) You also would benefit from taking a cryptography course (check the wiki at r/netsec). In particular, you're going to want to learn about KDFs and key stretching algorithms and the various types of ciphers.
I found this https://github.com/nucleic/enaml It looks really good for making native ui apps with very less headache 
/r/learnpython. Make sure you show the code you have.
My work consist on analyzing crop's genomic data and I do most of my work with Python, so I work within agriculture but I have no experience with precision agriculture. Yet, I have heard about using Python for these task. I remember going to a Python meeting where it was a presented an App to manage crop fields using satellite information. I don't remember the name but it seems that there are multiple Apps that are developed for "smart farming" [^1](http://www.croplife.com/editorial/17-agriculture-apps-that-will-help-you-farm-smarter-in-2017/#Tinsel/71782/2) [^2](https://www.capterra.com/farm-management-software/). To answer your question: Yes, Python is a good language to learn (for almost anything), and it is used on agriculture. Among the reasons I would recommend to learn Python is that it is easy to learn,it is very versatile, and it have a rich package environment which ease the development of your project. To conclude, here is a article that show the use of Python for the processing of geospatial information: [^3](https://www.machinalis.com/blog/python-for-geospatial-data-processing/).
Quite proud of my first [project](https://github.com/gulaki/code-timer) that I uploaded recently called *codetimer*. It happened as a result of another project that involved moving around a lot of data in memory, and some computations as well. I had implemented them using lists, dictionaries and numpy arrays and couldn't seem to improve the performance. So I built codetimer to easily be able to measure time that each section of code or function was taking, and to count laps of each function when called within nested loops. It gave me huge insight as to where the time was being spent and made me realize that it was mostly my conceptual understanding of the methods that was to blame. I was able to improve the performance of my project by orders of magnitude, from 3 s to 60 ms, in the process the code turned out to *look* beautiful as well, and smaller. Some features include timing like Matlab using tick() tock(), function decorator to time functions, context manager timer to time code segments. Hope it helps people build better code, and faster.
Man, the Flask magic thread local API is just fucking insane for no benefit. Why can't views just take a request argument? There are [built in API's](http://flask.pocoo.org/docs/0.12/testing/) for setting up the request context. Use them instead of mock patch directly.
Thank you! I will try to learn and implement what you said. And as you said it was hobby program. 
some improvements would be: * make your python script an actual package, * do not use a DB when it should be a simple [CSV](https://docs.python.org/3/library/csv.html) file, * create a [`dict`like class](https://docs.python.org/3/reference/datamodel.html#emulating-container-types) to hide the DB interactions, * use [cmd](https://docs.python.org/3/library/cmd.html) for an actual repl and stop using `sys.argv` or, * ditch the repl in favour of command arguments with [argparse](https://docs.python.org/3/library/argparse.html). [SQLite encryption options are "weak"](https://www.sqlite.org/see/doc/trunk/www/readme.wiki), python has "nothing" for crypto out of the box, [the cryptography module](https://pypi.python.org/pypi/cryptography) is your best bet.. if you know how to do crypto that is. GUI or CLI, your choice, but what the program does and how it look should be decoupled. But more importantly, delete that repo and change your passwords. Hopefully with something akin to `cat /dev/urandom | tr --delete --complement [:graph:] | head --bytes=24` and not just a prime number.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://docs.python.org/3/library/csv.html) - Previous text "CSV" [Here is link number 2](https://docs.python.org/3/library/cmd.html) - Previous text "cmd" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20dvf7u0v) 
**Python script for conversions used by LibreOffice**: https://github.com/dagwieers/unoconv
I don't think that triple nested hairball qualifies as an improvement. 
&gt;Unfortunately I’ve been having trouble adapting to Python’s version of async/await especially coming from C#’s implementation in TPL. Parallel.ForEach(list, (item) =&gt; item.DoTheThing()); So simple that I feel silly for having put off learning it.
This sounds amazing. Would love to see you post about this. 
It's just my opinion, but on *nix based systems I like using virtualenv and install what I need from scratch. I only use Anaconda when I'm using Windows to avoid the pain of installing packages. I don't really know why I feel this way but it just "feels" better to me.
That seems like a case of mockitis, what are you actually trying to test and why are you seemingly mocking everything? If you're trying to test a Flask endpoint, just use werkzeug.test.Client to call into it. If you're trying to test a service which performs `requests` call and need to mock these, use [responses](https://github.com/getsentry/responses).
In english, instead of 'of' you can use ''s'. 'file's id' is fine. Now you just to read the '_' as ''s'. 
I prefer camelCase too. When in Rome, do as the Romans do. Follow PEP8. Use snake_case.
agreed :)
at this level, just make a map.
Maybe not as a grand total, but It is a huge part. You also need to take into account how likely people using Python for different purposes to vote on resources like SO. I believe that SO is highly biased towards certain audiences and severely under-represent others. I wouldn't take its statistics at face value. For instance, did you know that the largest project ever written in Python is, actually the infrastructure code for JP Morgan bank? But do people who work for JPM go online and talk about their experiences with Python on SO? -- quite unlikely. If you web-search for "largest Python project", you'd find guesses, like "maybe it's Django" or "maybe YouTube has the biggest codebase". But, really, it's JPM :) but you wouldn't know it, unless you work there.
 import random while(True): result = input("play the dice? (Y/N)\n") if result.upper() == 'Y': print(random.randint(1,6)) elif result.upper() == 'N': break else: print('Wrong answer, say Y or N!')
My first Python package that was made to solve an issue I was facing in my day to day work. I wrote a blog post about it https://thomasjiangcy.com/blog/fake-api-endpoints-django-rest-mock Hope this might help others!
Did you use a version of Numpy that was compiled with openblas, lapack, mkl or atlas? Lots of distributed versions of Numpy are built without those math libraries for compatibility purposes. I've seen huge speed differences between compiling with the different math libraries. My understanding is that for math heavy operations on arrays, modern CPUs use a built-in APU/FPU to handle the operations. A quad core processor usually has only one APU/FPU so leveraging multiple threads for math operations don't always translate to significant performance increases. 
asyncio syntax is definitely a trainwreck. i still find it hard to understand how after all the criticism that python has gotten over the years about poor handling of concurrency and parallelism, the library they came out with is so convoluted. the addition of threadpool and futures, on the other hand, was really good. 
I picked it up for tasks that were too cumbersome or data-intensive for bash.
Well, to be honest, it's because it seemed easy.. i have been using c++ for some time, and it felt like i needed to write too much code to do too small things. Python looked easy to learn, and it supported opencv, which i was using for an assignment. It turned out it WAS much easier, and it's fun to try and write efficient little one-lines when creating functions. I'd say i learn it for fun, for creating image recognition programs, and to save time
Note that you don't need Anaconda on Win anymore either; pipenv makes package management easy, and most packages (now including Scipy) have Windows wheels.
We created a system that allows growers to manage samples, generate recommendations and bring back the soil application data back. Pretty cool. Used by a large sugar cane producer here in Brazil
I will be revisiting Django Class Based Views, for some reason I can't seem to wrap my head around it and need more practice. I know it's supposed to be more user friendly but I keep going back to function based views. I will also squeeze in a few hours from the book Data Structures and Algorithms in Python (Goodrich, Goldwasser, Tamassia).
Here is a link to the [technical blogpost](https://medium.com/snips-ai/an-introduction-to-snips-nlu-the-open-source-library-behind-snips-embedded-voice-platform-b12b1a60a41a)
I developed management software that allows one to track livestock. You could graph weight, track serial numbers, check up on vaccinations, follow lineages and so forth. You could group into troops, mega troops and then herds. You could look at weather forecasts, track feed reserves, medication reserves and schedule things. I even implemented the beginnings of smart farming by using UHD transponder tags at chock points to scan animals as they enter and leave, but I never finished with that. I ended up selling the software to a company whose directors were total tools and the whole project went belly-up before it saw commercial release. It was largely python, and the intention was to integrate a marketplace and knowledge-base into. The software was going to be opensource with proprietary back-end for mobile apps, asyncing, the marketplace etc. Idiots ruined my baby and I won't easily forgive them for it.
A bit simpler than @boittega's solution: from random import randint while(True): answer = input("Play? (y/n) ") if answer and "y" in answer.lower(): print(randint(1, 6)) else: break
Word to the wise: switch to postgres, before its too late. Mysql is for the damned.
But if you say "Something that has something", instead of "something that is owned by", you read file id, not id of file, which is way more readable. Example: Your hand.
I started building web apps with Django
why is it risky?
Better is relative. Mysql is inevitably synonymous with surprising behavior and corrupted data. It's not like postgres is harder to use, and it's vastly better for your data.
Booooi! you go through the numbers in ascending order, but you literally say in the code that it should slap them to your `st` one by one from the left.
Note the line “st = str(c) + st”. This code builds up the value of “st”. It does so by taking a string value if the number in the variable “c” and *prepending* it the what it already has. That’s the key. If you walk through execution, the value of “st” looks like this: - 3- 43- 543- Thus is because of the order in that assignment. Consider, if the line was “st = st + str(c)” and would print out “—345”.
Maybe I’m missing something but just looking at it, it looks like it would print -3-4-5
For data analysis. Especially [pandas](https://pandas.pydata.org) Then, I learned of the fact that module development is community based. Meaning that for every problem there is a solution. This cuts down on development time significantly. Don’t forget; most developers are also responsible for support. The more they develop, the more their support workload grows. And because code that was written 6 months ago, is the same as code written by a stranger, being able to perform support becomes really important. 
Thank you so much, this was very helpful! Now I get it! :) 
That was my initial thought process too, haha. 
This is a good tip and one I will have to look into.
+1 for weasyprint, it's really easy to use. It met all the requirements I set for my project.
I don't really know too much, but if you want someone to bounce ideas off of then sure
yeah but what I'm saying is i've already tried that method and it still only downloads when you open the html file
That's gorgeous. Can't wait to use this.
Not sure if python is used in these certain applications but in livestock agriculture software technology is getting bigger and more widespread. I heard a couple weeks ago there was a project in the testing stages where a picture would be taken of the cows head and the computer could identify the cow without the need for an rfid tag. Imaging software is also out there where it takes an image above the cow and determines it's body condition score. Heat detection, calving detection(moo call) and health monitoring is becoming more widely adopted as well. Not to mention the software needed to run the robots and to turn that information from the robot into useful information for the farmer. As farms continue to get larger and the increasing difficulty of finding good workers, farmers will be turning to technology to help keep things running. 
For Ubuntu, you might look into using Miniconda instead, which I believe just adds the "conda" tool / package manager and leaves your system configurations alone.
Ah, one step ahead of me. I'm learning Python, then tensorflow
&gt; 1. It pretends to be a solution for parallelism, while it really isn't. It doesn't though. It's a solution to concurrency, not parallelism. Please learn the difference. &gt; 2. Instead of throwing away multiprocessing, Thread and building a real solution for parallel computation in Python, the developers added another clutch, which doesn't improve on what others did, and doesn't solve the problem. We all hate the GIL and the limitations it brings. But until we can retain its benefits (and there are benefits), non-multiprocess parallelism isn't going to be a thing in CPython. &gt; 3. However, it introduced a ton of incompatibilities with earlier versions. Other than you can't use async with older versions, because it doesn't exist there, what incompatibilities exist? This sounds like you're just whining. &gt; 5. asyncio introduced further garbage into the language: asynchronous iterators and asynchronous context managers. But they aren't interchangeable with iterators and context managers. You cannot do sum(x async for x in y). You cannot pass them to itertools functions and to a large body of existing thrid-party functions. Because async iteration and async context managers are dependent on coroutines. Yes it's a shame that you can't use them with the wonderful toolkit we have but they also serve a different purpose than their sync counterparts. Async iterators are closer to a stream or an rx observable than iterating over a collection of values. It's a pretty slick way of dealing with streams once you understand that. Async context managers are designed to handle io bound operations in setup and teardown. Open a database connection in setup and close it in teardown. these can't block in an async program. &gt; 6. Finally, the actual speed benefits are typically negligible... often times you can even make your code slower by using asyncio. There's overhead for sure. But it's similar to saying your program is slower if you use django to write a webapp than just standing up a socket server and dealing with it yourself. If you're expecting a massive speed boost with asyncio, it won't happen. it's not fairy dust. But if you're looking to handle more io with fewer resources, than it's a nice tool to have. &gt; 4. It made writing libraries impossible: what if your library isn't aware of asyncio? What if it doesn't even know what kind of pseudo-parallelism the library user is going to use? Ultimately, this comes down to how we write code. Most people are more than happy to write code that mixes IO and logic, package that up and ship it to pypi or wherever. But as you've stated, how do you get different async implementations to work together. Well, you really can't but as a library developer you can design an async interface and have users implement that interface with what ever libraries you want. Imagine that, actual first class design principles in Python, which are all too lacking in almost every bit of code I read. &gt; It is also impossible today to mix synchronous and asynchronous code. So, you cannot take a library which knows nothing about asyncio, and give it a function from a library that does some asyncio stuff and hope that the first library will know what to do with it. You can, you just to adapt the interface of the async code to the sync's expectations. This library, the one OP linked, can do that (albeit in a ham fisted way). This is also the way zeep's async interface works (also ham fisted). But the issue is that it's supposed to be hard to get out of async land because keeping your code in async land gives you more benefits than sporadically dropping in and out. 
been using weasyprint, because it allows me to leverage my html knownledge.
Hey you should check Humble Bundle right now. In the [mad scientist bundle](https://www.humblebundle.com/books/mad-scientist-make-books?hmb_source=navbar&amp;hmb_medium=product_tile&amp;hmb_campaign=tile_index_4) you can pay $1 for "Environmental Monitoring with Arduino" and "Atmospheric Monitoring with Arduino"
im not entirely sure but it feels like op is coming from node and wants it to kind of syntactically to representing it like that?
I’ve read through this. I’m more interested in what new features I can use in 3 for side projects Using future isn’t really an option where we work. 
I was planning to do kinda the same with the intention to automate the plants watering, based on current soil/atmosferic humidity, weather predictions and plant-specific water need. 
I can port soon! I honestly haven’t had much feedback until I posted here on r/python so I’m happy people seem to dig it! If anyone wants to submit a pull request to help improve this thing that would be sweet! u/hkamran85 I’ll send you a PM when I get PS4 gameclips running. Right now the stats should be pulled correctly!
Large scale phenotyping using drones, and analyzing the data using arcGIS and the python modules arcpy. 
I did a huge database for data analysis of crops and project indicators for an NGO. The use of python was vital. Combining Django with Pandas was just a pleasure. 
Setup a flake8 linter in your editor that uses python3 syntax.
I've never heard of a scripts folder. 
I know that dict comp and async are new. A linter won’t help me learn those. 
That's pretty amazing. I've just begun messing around with chatbot assistants, can't wait to play with this lib!
Love it when python devs spend their time fixing language issues or reinventing the wheel.
Well done. Love your site and your applications, I actually just bought your course. I plan on making and hopefully selling a desktop application in the coming months :). 
Hi! Do you by any chance have a screenshot that you would be able to share of that report? I'm aiming for a certain look and feel
If I may suggest have you heard of dash by plotly? It allows to generate interactive reports and PDFs as well. I really like it for its simplicity and ease of use. Another suggestion would be jupiter dashboards.
Woah that looks really cool. Do you by any chance know if custom data can be input? Not all the data would be presented as graphs and some would be simple data points that would be represented either in plain text or another basic format
Begone thot.
And because it's actually useful for developing small things that you'll write only once and takes like 15 mins in python. Unlike C++...