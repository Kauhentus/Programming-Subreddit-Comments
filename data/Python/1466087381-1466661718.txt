Ok, this is going to sound really stupid, but I see that you're referring to a my_project folder in your passenger_wsgi.py file, but I don't see where that's created. Passenger needs to have a /public directory that you put the passenger_wsgi.py file into right? Is this also where the site files and static files have to live?
It's primarily the distros that ship their own python in their PPA/or equivalent, as they are slow to push updates to try and guarantee more stability. This does depend on which distro though as opensuse ships much slower (more enterprise focused) than say fedora (which is rolling release dogfooding redhat updates IIRC). I even think the bundled python with OSX has had the fix for a while now.
Pycharm is actually the reason why I like Python at all now. I hated it in the beginning when I used simpler editors. There is a steep curve learning about all the possibilities Pycharm offers. And it might be that it is not suitable for some. But I think it is like learning fast typing. You need to spend time learning the tool before you can save time with it. Or you choose the easy way of "learning by doing" and get to the "middle ground" fast but there is no further potential from there.
It's serious enough to be listed [here](https://www.gnu.org/licenses/license-list.en.html#WTFPL) and to be considered a [valid Free Software licence by the FSF](https://lists.debian.org/debian-legal/2002/09/msg00032.html).
A big disclaimer is missing, that it is a bad idea.
Here is what my entire directory structure looks like ~ └── my_project.com ├── passenger_wsgi.py ├── my_project │ ├── blog │ ├── my_project │ └── static ├── public │ └── static │ ├── admin │ ├── css │ ├── img │ └── js ├── tmp └── venv
But not recommended. They recommend the X11 License or the Apache License 2.0 instead. Which makes sense, since both licenses were already upheld in courts around the world, which hasn't happened yet for the WTFPL.
If you want to keep things simple, you could try the [tf-idf statistic](https://en.wikipedia.org/wiki/Tf%E2%80%93idf). It takes word frequency in a document (the tf term) and normalizes it using the word frequency in all documents (idf term). 
Even better is to try to teach the concept to someone else
I appreciate the kind words 
This one is really nice! I wish I knew about it before I did all of this work. My only problem with it is that it seems to want a perfect python project first or it will crash. Thanks for showing me this though! It will make my life a lot easier.
Dash is a great solution as well. 
Now freerange and 100% organic!
First off, thanks for taking the time to help me with my questions. I do appreciate it! &gt; Other, much better, option would be to support the creation of the plan by a program. Yup this sounds like what I am initially trying to do. To avoid confusion on my part, you never mean a building plan in your response right? Just asking to be sure. &gt; If the user modifies something on the plan, you develop a function in the generator program, so he can do it there. Not sure if I completely understand this, but I think you mean as second step to make the GUI data editable after input? Instead of having to edit the data after the excel export from the first step. Is that right?
u jelly bro
Thanks, I'll give this a whirl and see how far I get. I REALLY appreciate you taking the time to help. I think I can work it out from here.
We're trying to have a broad spectrum of talks. The Meetup behind this has really been able to grow and diversify in the last couple of years as we've started a project night that's less focused on full-time software devs and more welcoming to students, hobbyists, etc. I know we have at least one talk that we'll pre-announce shortly that is aimed at having fun with Python :)
No worries!
Just change to print (i.print_int())
Apparently it's not as close as I thought then line 12, in print_int return (mac,ip,dns,error,i_rate,o_rate,drops) NameError: name 'mac' is not defined
Interview with Robert Collins, current core maintainer of Python’s unittest module. Some of the topics covered * How did Robert become the maintainer of unittest? * unittest2 as a rolling backport of unittest * test and class parametrization with subtest and testscenarios * Which extension to unittest most closely resembles Pytest fixtures? * Comparing Pytest and unittest * Will unittest ever get assert rewriting? * Future changes to unittest
As a new learner you shouldn't notice a difference between 3.4 and 3.5. I would suggest to install 3.5 and take what ever learning material you find that works for python 3. (In my humble opinion 3.4-&gt;3.5 wasn't such a big deal as it was made out to be, but others (many?) disagree with that) I personally don't like video tutorials for programming. Therefore I can't recommend YT. What I personally thoroughly enjoyed where all kinds of coding contests and challenges. Ie I started learning python because I was growing unhappy with tcl while solving ProjectEuler problems. CheckIO and CodinGame might even be suited for your little brother, as they are designed to look more like a game. (without hiding the code like other "coding games" like to do) One thing I like to point out is, how awesome the actual python documentation is. I think it's a good idea to just have a good rummage around in the docu to get a feel for python. Regarding your third bullet point, I'd say python is a nice addition to c++. But I really wouldn't suggest to abandon c++ in favor of python.
Main advice I can give, is don't bullshit, ever. If you don't know something, say 'I am not up to speed in that area, as I have not yet had any need to learn it to achieve a wanted outcome, but here is what I understand, and I would be very keen to learn more about it' A lot of technical interviewers will expect to take you to unknown waters eventually, which is fine. They then know how much you really know, and if you strike them as someone who has aptitude and is a 'learner' who can search out information and apply it, then that will suffice, and gaps won't be an issue. Also a lot of it is personally what you are like to work with. I would much rather work alongside a developer, who knows less, wants to learn and is socially adept, then some asshat who can code very well, but thinks he is gods gift to the programming world and will require constant energy just to try and communicate with them and find middle ground. Good luck!
NO GMOS!
You should consider taking `**kwargs` and/or passing an options dict explicitly. In either case you'll end up with a dict that contains all the options given by the user, which can be a variable amount (i.e. they're free to supply as many or as few as they want, including zero.) If you want to provide default values, [`collections.ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap) is a very handy tool for that.
I personally don't find taking \*\*kwargs to be any cleaner for functions taking large numbers of named parameters. Even worse is when this function calls another and tosses the dict to it, meaning to figure out what is actually "expected" by the function I have to look in several places. This is one place where I strongly prefer explicitness over the implicitness of kwargs.
Unlike CPython, which ships with extensive standard library, with whole distribution taking several megabytes, and this posing problems even for smaller Linux systems, not talking about microcontrollers, MicroPython adopts another way, where only few core, builtin modules are included, and all the rest are installable separately, like 3rd-party modules for "big" Python. The repository linked above contains such modules which comprise "MicroPython standard library". Besides git, they can be downloaded from PyPI too: https://pypi.python.org/pypi?%3Aaction=search&amp;term=micropython 
The standard way of documenting is using docstrings. Read the docs just displays them nicely, but if you use PyCharm and click ctrl+q it will try to show the documentation of the symbol at the cursor. 
Yeah, filter1 and filter2 are completely different and the values that you pass each one can't be mixed. For example you can pass filter1 the values '1' or '2' or '3' and filter2 True or False, and not vice-versa. So what's the advantage in this case of using *filters over **filters? Wouldn't the latter be more organised?
When deciding whether to take filters or *filters, it's really up to how the function is typically called, as it makes no difference in terms of how the function really performs. It's just a matter of whether you want to pass multiple arguments or a single list. If your question was something else and I misunderstood because of reddit garbling your formatting, let me know.
I think the best answer is "don't take so many arguments." That isn't always possible though, but in some cases it might be. For instance you might be able to group certain arguments into related groups, and then establish simple helper structs to contain those related groups. So a function that might take N arguments related to reading and parsing the input + M arguments related to the processing + P arguments related to the output, instead takes 3 argument objects which contain the values for each group within them. The downside is that this makes your API harder to use in many cases. ---- Since you describe this as filters I think the best option is a stateful object that builds the query. It can have the various filter methods and ultimately an exec method. With chaining it could look like: `Query().filter(1).filter(2).exec ()`
FYI, endless loops in a try: except: block will crash the page. 
One does not "go to expert" just by reading some online resources. IMO, expertise comes after years of implementing a wide range of solutions in Python, interacting with and contributing the community, amongst other milestones.
I'd guess that the "expert" tag is to indicate the depth of the material.
I've never heard of this. If I want to use threading or math can't I just import threading or math in micropython? How do I install a new module to my pyboard? edit: looks like you drop any modules you want in the root of the pyboard, or in lib folder https://forum.micropython.org/viewtopic.php?t=1292
Too important to be added to stdlib, which would slow down security updates, releases, and the future developments of HTTP. We've had a CVE turnaround time of 12 hours. If we were in the stdlib, it would be on the scale of months. We decided, as a group, at the last language summit, to link to Requests in the official Python documentation instead. 
[removed]
Learn Python is removing the post automatically :( so had to post here
https://www.reddit.com/r/Python/comments/4of889/how_to_organise_functions_with_many_optional/d4c6c74 Imagine a search function for products. An example call would be `f('shoes', condition='new', max_price=100)`
Looks like a fun project (don't know why folk are so down on you for calling it AI) - take a look at my, slightly similar project here www.talkigy.com/chat/poppy-cat
Sweet. I'm going back to try to make it to the meet ups from now on. 
If it's a GET, be aware that some systems have a limit on URL length, so you might want/need to break up the argument list, anyway. If it's a POST, it's common to send the arguments as JSON (or perhaps XML), in which case the filters would just be a list/dict, and it doesn't matter how many there are.
 s = ['2016-02-27 04:49:29.766684-06’, '2016-02-27 04:49:29.766684-02', ...] s = [timestamp[:-3] for timestamp in s] /r/learnpython for more resources :D
That tends to be a lot more necessary in the Java world, due to the language design, than in the Python world. See "Is no 'news' good news?" in Norvig's old [IAQ](http://norvig.com/python-iaq.html).
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Any project that has readthedocs is *able* to give you those same docs in a PDF or HTML form. For a start, you can just click [one of the download links](http://i.imgur.com/DzXDOas.png) on most readthedocs pages. 99% of readthedocs is using [Sphinx](http://www.sphinx-doc.org/en/stable/) which A) you can run on your own computer to render a HTML site viewable with any local HTML server (e.g `python3 -m http.server`) or B) render them to [another offline format](http://www.sphinx-doc.org/en/stable/builders.html) - CHM, epub, manpage, or [pdf with a bit of configuration](http://rst2pdf.ralsina.me/handbook.html#sphinx).
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
3.5, there is no point starting with an older version. Everything will work exactly the same (well, there are more things that will work in 3.5 since it's better).
Thanks! Also, thanks for /r/learnpython. I will check it out.
&gt; However, Dash is OSX only. There is [Zeal](https://zealdocs.org/)!
So many charting libraries for Python. Goes to show how much of a pos matplotlib is.
/r/learnpython mod here. It looks like you made a self-post there and just dropped the link for the post text with nothing else; I'm guessing that tripped a minimum length rule or something. ~~Try making an actual link post instead.~~ Oops, apparently we restricted that (and I see the option because I'm a mod...) Uhh, try it with actual explanatory text, then?
'Automate there boring stuff' covers such topics too (free online book)
Can you compare to Viridis (the new default colourmap in MPL)?
https://youtu.be/bSfe5M_zG2s
In that case I agree with /u/infinull. As long as you respect the original license and credit/link to the original authors, you are in the clear both legally and socially to fork and upload to PyPI. I would think forking would be preferable to packaging it within another project, because it will likely be of use to someone else at some point. In any case, you should make a good-faith effort to contact the original author. At the very least you're informing them; they may even suggest that you become the official maintainer or something like that.
That's great information, thank you for the reply :)
Wouldn't Excel forms and some VBA code to help filter handle all you need? It may not be the coolest solution, but it keeps the code overhead limited. 
What did this talk teach you about programming or python? I really didn't see the point of it at all.
Check out the talk on [xonsh](https://www.youtube.com/watch?v=uaje5I22kgE) if you've ever wished your system shell could be more like Python.
I imagine there are mixed opinions on bundling dependencies. I've seen it done several times, but in general I don't think it's a good idea. If you can use your setup.py to set the dependencies then you can still only require users of your library to do a simple `pip install X`
That big ass purple Orielly book should do the trick.
For me, I skipped over a lot of the music stuff for sake of time, but I really enjoyed his example explaining merge sort and how it stuck with him even after 2 decades. He also had a really neat way of determining complexity for motorcycle trips. Was very cool stuff. That's what I remember off the top of my head.
I didn't like that Gilectomy talk. He just says what he's done at a very high level and to me it seemed there is little hope of this working out.
To expand a little bit on this ... In practice, you are just penalizing large weight coefficients (this doesn't affect the bias unit); in other words, L2 regularization is a penalty against complexity, aiming to reduce overfitting. Given a cost function, you just add an L2 term "lambda * || w ||^2", where lambda is the regularization strength (yet another hyperparameter). So, instead of minimizing cost function "J", you minimize "J + L2". As we can see, the larger the weights (and lambda) the more bias we add when minimizing the cost. (I have a quick illustration [here](https://github.com/rasbt/python-machine-learning-book/blob/master/faq/probablistic-logistic-regression.md) ; it's for a convex cost function -- logistic regression -- but the same concept applies to MLPs). Then, when you take the derivative of that cost function in backprop, you'll get the simple weight update "w -= learning_rate * (gradient + w*lambda)"
&gt; Who knows whether the app will exist in that form by then. creepy-gary-oldman-everyone.gif
The section starting at 20minutes in is actually a ttyrec-style replay, so at that particular point he's just talking (and occasionally pausing it). He mentions that at the end of the video. 
Videos in this thread: [Watch Playlist &amp;#9654;](http://subtletv.com/_r4oh4vr?feature=playlist&amp;nline=1) VIDEO|COMMENT -|- [Lightning Talks - 2016-05-30](https://youtube.com/watch?v=yC9m2GInXqU&amp;t=331s)|[29](https://reddit.com/r/Python/comments/4oh4vr/_/d4cq74r?context=10#d4cq74r) - An amazing 5 minute talk about some datatypes. Warning: I'm the jerk who gave it. [Anthony Scopatz - xonsh - PyCon 2016](https://youtube.com/watch?v=uaje5I22kgE)|[19](https://reddit.com/r/Python/comments/4oh4vr/_/d4cnec1?context=10#d4cnec1) - Check out the talk on xonsh if you've ever wished your system shell could be more like Python. (1) [Ned Batchelder - Machete-mode debugging: Hacking your way out of a tight spot - PyCon 2016](https://youtube.com/watch?v=bAcfPzxB3dk) (2) [Larry Hastings - Removing Python's GIL: The Gilectomy - PyCon 2016](https://youtube.com/watch?v=P3AyI_u66Bw)|[13](https://reddit.com/r/Python/comments/4oh4vr/_/d4cpj4g?context=10#d4cpj4g) - Ned Batchelder - Machete-mode debugging: Hacking your way out of a tight spot Larry Hastings - Removing Python's GIL: The Gilectomy [K Lars Lohn - Keynote - PyCon 2016](https://youtube.com/watch?v=bSfe5M_zG2s)|[5](https://reddit.com/r/Python/comments/4oh4vr/_/d4cm96g?context=10#d4cm96g) - (1) [Nathaniel Manista, Augie Fackler - Code Unto Others - PyCon 2016](https://youtube.com/watch?v=aOEfIrC07XA) (2) [Matt Bachmann - Better Testing With Less Code: Property Based Testing With Python - PyCon 2016](https://youtube.com/watch?v=jvwfDdgg93E) (3) [Alex Gaynor - The cobbler's children have no shoes, or building better tools for ourselves](https://youtube.com/watch?v=gRFHvavxnos)|[5](https://reddit.com/r/Python/comments/4oh4vr/_/d4cugmn?context=10#d4cugmn) - Edit: Screw what I wrote below. I've just found my pick of the conference. While there's been a couple I thought were good (Machete Mode debugging and the Gilectomy spring to mind and are mentioned elsewhere), the vast majority of the ones I've... [Russell Keith-Magee - A tale of two cellphones: Python on Android and iOS - PyCon 2016](https://youtube.com/watch?v=NqdpK9KjGgQ)|[4](https://reddit.com/r/Python/comments/4oh4vr/_/d4ct6gf?context=10#d4ct6gf) - I was impressed by A tale of two cellphones: Python on Android and iOS. I didn't know so much progress was made towards Python apps using native Android and iOS APIs. [Brian Warner - Magic Wormhole: Simple Secure File Transfer - PyCon 2016](https://youtube.com/watch?v=dgnikoiau68)|[3](https://reddit.com/r/Python/comments/4oh4vr/_/d4cuudn?context=10#d4cuudn) - It's a bit specific, but the highlight of the videos I've seen so far was this one on a file transfer tool called magic wormhole, and the cryptographic algorithm that makes it possible. [Chelsea Voss - Oneliner-izer: An Exercise in Constrained Coding - PyCon 2016](https://youtube.com/watch?v=DsUxuz_Rt8g)|[3](https://reddit.com/r/Python/comments/4oh4vr/_/d4cwnhw?context=10#d4cwnhw) - Chelsea Voss' Oneliner-izer talk was fantastic and hilarious. A great overview of all the different ways lambdas and list comprehensions can be horribly abused to get entire programs into one line. [Scott Sanderson, Joe Jevnik - Playing with Python Bytecode - PyCon 2016](https://youtube.com/watch?v=mxjv9KqzwjI)|[3](https://reddit.com/r/Python/comments/4oh4vr/_/d4cvk21?context=10#d4cvk21) - Surprisingly, this one was a lot of fun: "Playing with Python Bytecode" [Grant Jenks - Python Sorted Collections - PyCon 2016](https://youtube.com/watch?v=7z2Ki44Vs4E)|[2](https://reddit.com/r/Python/comments/4oh4vr/_/d4cxqe1?context=10#d4cxqe1) - My favorite talk of this year: Grant Jenks - Python Sorted Collections - PyCon 2016 I'm a bot working hard to help Redditors find related videos to watch. *** [Play All](http://subtletv.com/_r4oh4vr?feature=playlist&amp;ftrlnk=1) | [Info](https://np.reddit.com/r/SubtleTV/wiki/mentioned_videos) | Get it on [Chrome](https://chrome.google.com/webstore/detail/mentioned-videos-for-redd/fiimkmdalmgffhibfdjnhljpnigcmohf) / [Firefox](https://addons.mozilla.org/en-US/firefox/addon/mentioned-videos-for-reddit)
So you never took the 15 minutes it takes to learn matplotlib?
What if your UI thread and your computation thread are both written in Python?
It's the minor customizations that become a nightmare. Ggplot is a much better alternative. 
No wheels?
Ah, I think I understand better now. I'll need a bit to start grokking them, but thank you.
It's because keynote speakers feel obliged to give some kind of "big picture" talk I think.
This is helpful. Thx :-)
I was impressed by [A tale of two cellphones: Python on Android and iOS](https://www.youtube.com/watch?v=NqdpK9KjGgQ). I didn't know so much progress was made towards Python apps using native Android and iOS APIs.
You can use multiprocessing.
How do I do this with PyQt?
Cython is great if you want to code in C. I want to code everything in Python. Also, we don't know that removing the GIL *necessarily* makes everything slower.
Edit: Screw what I wrote below. I've just found my pick of the conference. https://youtu.be/yC9m2GInXqU?t=18m35s ============== While there's been a couple I thought were good (Machete Mode debugging and the Gilectomy spring to mind and are mentioned elsewhere), the vast majority of the ones I've started watching I've found to be lack-lustre. There's quite a lot of new faces talking, so I'm wondering if there was a conscious decision not to have the same old crew giving talks. No Raymond Hettinger, no Dave Beazley, nothing I can spot from the data science wing of things (E.g. IPython or Continuum Analytics). You get the idea. I look to PyCon to get my mind blown, and I've ended up sitting through (or actually abandoning) talks which aren't that much more than high school project reports. Not actively bad, but quite a lot of meh! It just shows how hard giving interesting and entertaining talks is. Some more positive videos: * Code unto others (https://youtu.be/aOEfIrC07XA) - don't agree with everything but the premise is sound. The speaker has had Java corrupt his thinking in places IMHO. * Better testing with less code (https://youtu.be/jvwfDdgg93E) - Introduction to Hypothesis. Unfortunately that wasn't new to me, but he gave a good talk. * The cobbler's children have no shoes (https://youtu.be/gRFHvavxnos) - Improving your flow through small quick automation code. Less technical than normal for Alex Gaynor, but more constructive too. 
&gt; nothing I can spot from the data science wing of things (E.g. IPython There was [this talk about Jupyter/IPython](https://us.pycon.org/2016/schedule/presentation/2245/). The core team didn't submit anything, as far as I know. We think it's pretty well known in the Python community by now, and the new stuff we're doing is more likely to be a talk at scientific and documentation conferences rather than PyCon. I was at [ElPub](http://meetings.copernicus.org/elpub2016/conference/) last week, for instance. I've watched several videos and I haven't found them any less interesting than last year's talks. Though last year I got to go in person, which was definitely more fun than watching videos!
I don't want to dismiss your work, but after reading the README, I'm not sure what problem it's trying to solve. &gt; Now imagine doing this for a 1000 files. Can't you do: for file in os.listdir('folder'):
Nice write-up for those who aren't familiar with a linux/admin-y type environment!
&gt; Let's imagine we create a file: &gt; &gt; print("hello") &gt; &gt; This is valid Python 3, but not valid Python 2. That is valid in both Python 2 and 3, but for different reasons X3 
I saw the demo live. The funny part was his recording has typos and backspacing in it, so it looks real. There definitely was a part when he had to do some complicated code and I guessed it had to be canned but still wasn't sure. Hearing him admit it in the Q&amp;A was a relief. 
thank you!
I appreciated his candor. And not all of the audience was well versed in cpython internals. Not my favorite (that'd probably be K Lars Lohn, the one on exceptions, and one of the NLP things about dictionary) but def up there 
Another approach is to use a JIT that optimizes away most of the locking.
As a scientific developer, I disagree. In my experience, I've found that the most important thing is fundamentally changing the algorithm you're running, not increasing the speed.
Matplotlib is a quite powerful library, and even exposes a simple interface for basic plotting out-of-the box. It's real utility is in the great control and customizability you get over your plots - but yes, that requires experience to leverage fully. This is why toolkits like seaborn exist, or the plotting APIs in xarray, cartopy, and pandas. They expose a higher-level interface with sensible default aesthetics. Truthfully, a plot made in seaborn is maybe a few lines of code away from publishable quality. Holoviews is another toolkit I've been playing with recently which - although it's much more difficult to fine-tune the aesthetics - provides a powerful way to explore datasets. All of these use matplotlib under the hood. In essence, matplotlib is the "assembly language" of plotting in Python. It's *very* useful to know so you an hand-tweak things. But in practice, you should be using a toolkit built around matplotlib for most of your basic gruntwork..
Nice I think I'm going to try to fly in from DC for this. I'm still getting started with Data Analysis using Python and trying to move to the Bay Area so this may work out swimmingly
Having self as a required parameter on methods. It allows for very creative method calls (like calling the method from the class, instead of the object). Also, it offers consistency. Whenever I look through C++/Java code I am always confused by the presence of object attribute access both with and without this. Never happens in Python This is known to all pythonistas who have ever used classes, but no other language I know has that.
I don't mind that Ansible uses Python 3. I mind that they say &gt; [most Python programs (including Ansible) are not switching over yet](http://docs.ansible.com/ansible/intro_installation.html) That's not been true for a long time now. Even Flask is up to speed now!
I lost it at "unless you really want to". Good work man.
It's probably true for a lot of corporate applications written in Python. Hell, we just upgraded to 2.7 in the last 6 months or so.
Dunno why you were downvoted, you're right
`x &gt; 5 and "your mom"` will evaluate to `False` if x &lt;= 5, and `"your mom"` otherwise. Not going to say that it is my favorite, but it is a little known quirk.
Rust does it like that also.
I never thought I'd be a programmer-comedian!
context managers with the `with` statement. Suh good. Also, did you know you can use this syntax? with a() as A, b() as B, c() as C: A.fun() B.fun() C.fun()
First things I'd work on is improving your data entry and storage. This can be as simple as formatting up a worksheet with good titles, some color, and a couple sections for different inputs. Alternatively, you could take the time to build a form, but that may be more effort than it's worth. Organizing your data storage and calculations pages should limit a copy/cut operation from throwing everything out of whack. Take advantage of tables and lookups to store and present data as needed. It's much cleaner to add a new row to a table. Also, consider using a small macro to add/remove rows from the data tables. e.g.: On your input screen, have a "add data to table" macro tied to a button. The macro could add a row to the table, copy the data over, then clear the input. Excel sounds fine for what you need. It's smoothing out the process that needs work.
more!!! :-)
Tuple unpacking in function arguments: X = lambda (a, (b, c)): a + b * c print map(X, [(1, (2, 3)), (4, (5, 6))]) Sadly it went out in py3.
No, it prints a string, same as 3. ("Hello",) would be a tuple.
The "Wat" talk from Gary Bernhardt probably came before.
I'm a pretty big fan of using `type` in awful ways. Never in production code, but its a lot of fun to play around with. __Example__: &gt;&gt;&gt;Dog = type('Dog', (), {"woof": lambda self: print("Woof")}) &gt;&gt;&gt;a = Dog() &gt;&gt;&gt;a.woof() Woof EDIT: Fixed it. Thanks /u/pythoneeeer 
[Late binding closures](http://stackoverflow.com/questions/233673/lexical-closures-in-python). Basically, when you have a function that refers to an outside scope, it waits until function execution to look up the reference. This is a really common "oops" when dealing with function generators (so common that it's in the [gotchas](http://docs.python-guide.org/en/latest/writing/gotchas/)), but I really love them, because outside of that context they are incredibly powerful. On a similar note, using one-time evaluation of default arguments in functions to memoize them. Since default arguments are evaluated exactly once at function definition time, you can use them for memoization. They're also the standard workaround for when you want early binding closures, like when you're writing a function generator. And finally, callable classes, and really all of the magic/dunder (double underscore) methods. Being able to override stuff like that is so profoundly powerful. Even things as simple as defining ```__hash__``` so you can use a user class as a dictionary key is fantastic.
The are already discussions on the main scientific python mailing lists on dropping support for Python 2.7. The lead will be taken by numpy.
Thanks for the response. Good to know I can start working on the program without figuring out it wont work after too many hours xD
pycharm 
Added now.
How flexible the magic method system makes your code. The best example I can think of for this is a [pandas Dataframe](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html). [Here is an example (look at the part labelled "Accessing via label slices")](http://pandas.pydata.org/pandas-docs/stable/indexing.html#selection-by-label) Pandas kind of abuses Python magic methods to the point where it almost doesn't look like python code at all. Specifically what they do with the index fields is crazy. This type of coding can get out of hand real quick, and I would actually prefer if everything was just done using methods. I think they have methods for all of those functions, but they also overwrite the magic methods to expose that interface elsewhere. It's very expressive, but makes the code a little hard to read.
perl and ruby both do it
Do you mean Dog = type('Dog', (), {"woof": lambda self: print("Woof")}) What you typed just raises a NameError.
Yup. Wrote the start with os.listdir() to get filenames. The hardest part will be actually splitting up a filename and creating the search function to be able to find the right file I'm looking for trough user input. It's been a while I practiced Python so that doesn't really make it easier xD
I love that referencing an instance in the the object definition is not a keyword: class huh: def __init__(neat,x,y,z=1): neat.x=x neat.y=y neat.z=z is perfectly valid. In C++ it's "this" I think and that's a fixed keyword. This just a neat little thing, from a functionality point of view, being able to redefine classes on the fly, adding or removing attributes or methods **at runtime** is a killer feature. Requires a bit of meta wizardry though.
I always take this into account. If `''` or `0` make sense as input, then I will check for `None`. Obviously, this requires some discipline, but you could say the same about `if val:`, which is a common convention in Python.
One of the requirements for removing the GIL is that it can't break backwards compatibility. I thought that there are other GIL-less methods that meet everything else except they break backwards compatibility. Why is this GILectomy different?
I use SQLAlchemy-searchable http://sqlalchemy-searchable.readthedocs.io/en/latest/
https://www.destroyallsoftware.com/talks/wat You'll love WAT!
I must say, magic methods. Those give you the ability to make your own DSL just by using objects that do special stuff with i.e. their \_\_lt\_\_ method. And best, in Python 3.5 we have a new operator that is not widely used (afaik, not at all in the builtin types): '@' for matrix multiplication. So just implement \_\_matmul\_\_ or \_\_rmatmul\_\_ in your class and use the '@' operator for calling that :) I guess itertools.product would be a good one to shortcut by using '@'. 
Some SO post suggested saying "then" in your head, which I found to be a good tip when learning it.
I wouldn't trade it for the world. Being able to do `game_area[5, 10]` is so intuitively perfect.
/r/lisp We don't need ya, buddy.
Newbie question: do you use "is" and not "=" to check object identity as opposed to [insert appropriate adjective, I'm not sure how to qualify] equality?
Nice
You can, but it's going to require lots of library calls and it gets clumsy quick ... rather than (I could make this much uglier but you get the idea) import os os.chdir('/home/some/user') fd = open('some.txt', 'w') fd.close() it's cd /home/some/user touch some.txt If it's a 30 minute problem, I'm going to solve it in bash because it's usually easier ... now xonsh let's be make a quick solution in Python. 
I remember when I started getting seriously into Javascript, having known Python very well, I saw that JS had a `with` statement as well and got excited. I was disabused of that excitement very quickly.
`__class__` is just an attribute on an instance. You can reassign it however you like. Not something I would ever want to do in production code, but allows for some fun hacks.
This is spitting out domains that are already registered, so a lot of manual work is still needed to look up each entry. Why not add [whois](https://pypi.python.org/pypi/whois) and check if expiration_date is greater then the current date and then filter out those that are not available? 
Favorite quote: &gt; I don't think you've mastered something until you can do it really, really badly.
To be fair, `^` is the bitwise xor operator in many languages. For many programmers having it mean exponentiation would be confusing.
What is the relevance of celery or rabbitmq? They pass messages between processes. You are trying to solve an optimization problem. I don't see any connection. You want something from [scipy.optimize](http://docs.scipy.org/doc/scipy/reference/optimize.html) or maybe [PuLP](http://www.coin-or.org/PuLP/).
Brackets don't make tuples, commas do. In fact, brackets don't do anything unless you're calling a function. C:\Users\Asday&gt;python Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec 5 2015, 20:40:30) [MSC v.1500 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; print(((((((((("memes")))))))))) memes &gt;&gt;&gt;
&gt; Whenever I look through C++/Java code I am always confused by the presence of object attribute access both with and without this. Never happens in Python While I can appreciate the confusion when "this" isn't there, I'm not sure I understand why you would be confused if "this" IS there and how it's more confusing than self?
Our new projects are in python 3, but there's no money to spend updating our current projects.
Oops, that's egregious--I meant "==," been reading too much math :P. Thanks for the tips!!
Mutable defaults def foo(bar=[]): bar.append('?') print bar foo() foo()
Some constructive criticism: the Readme doesn't actually say what it does. The function is called `coerce_file`... so it changes a file's format? &gt; It takes one filename as input and returns whatever makes sense from a setuptools.setup point of view. What kind of file would you want to pass in? What does it mean to make sense from a setuptools.setup point of view? Do you mean you run `coerce_file('setup.py')` and it returns a dictionary with fields like name, version, etc.? The example kind of clarifies a little, but I shouldn't have to read down to the example before even having a clue what this is for. And even from the example it remains unclear.
Static method is not particularly tied to objects. It's the same in other languages, actually. If you have a static method in Java you don't have this. So your comment doesn't particularly illustrate a point.
Out of interest, what language would you nominate for having the "least" amount quirks?
https://www.python.org/dev/peps/pep-3113/ But I miss it too....
Swift has this same problem, which surprises me because it's so modern otherwise. 
`else` in `try` blocks is more intuitively obvious than what `finally` does: try: # try to open a file somefile = open('somefile') except (FileNotFoundError, OSError): # exit if there's trouble opening the file exit('Couldn't find the file!') else: # otherwise read and output the file contents and exit contents = somefile.read() somefile.close() exit(contents) finally: # Intuition suggests this shouldn't execute since both # above clauses contain exit calls. However this will # execute *before* either exit call can. print('Foobar') For the record, I know that context managers would be more appropriate for file interaction. I designed this example for the sake of argument (so that it could include an `else` clause.)
Why does that matter if you're not using the variable outside the loop, though? If you are using the variable outside the loop (and expecting it to be something else), that's exactly what I'm saying you shouldn't do.
How the core modules are almost universally terrible. If urllib2 just had a mediocre API rather than a gut wrenchingly horrible one we might not have requests.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I don't agree with your statement about all core modules, but I do agree with you on urllib2. It's like they thought, how can we take a beautiful, simple and yet expressive language and write a module that is ugly, complex and yet not expressive. At what point does requests just become the urllib3 module?
^ is a lot more annoying to type than ** on keyboards where ^ is a dead key, so I'm real happy about it.
Yep. Total coincidence that he just happened to be in there too. :)
Sure that can be confusing if you're not used to closures but that's not the fault of scoping. You get that exact same "counterintuitive" behavior with the following code no matter the scoping rules: def bar(): l = [] i = 0 l.append(lambda: i) i = 1 l.append(lambda: i) i = 2 l.append(lambda: i) i = 3 l.append(lambda: i) i = 4 l.append(lambda: i) return [f() for f in l]
 // Java class Foo { private int x; void bar () {int x; ... if(x) ...} } People probably shouldn't do this but they do, and it would help me a lot if `this.` was explicit on class member properties. Let's say I arrive deep inside ~~foo()~~ `bar()` (typo) by clicking on a traceback, so I don't get to see the local being declared at the top of the function. The only thing that really enables me to quickly read code like this is syntax coloring in my IDE. Yes, I could scroll back but why do I need to?
[cffi](https://cffi.readthedocs.io/en/latest/).
I don't know what it's like in the rest of the world, but in the UK there are 1000s of people programming who've never gone near Computer Science, any form of science in fact, Maths or Engineering. Earlier this evening over a beer I was telling an aquaintance about the so called Database Manager who in a design review admitted that they'd never heard the term "hashing algorithm". Get my drift? As a slight aside, why do you keep referring to Orwell's "Worst room in the world"? :)
Great talk, enjoyed it too :-)
Dead key? 
Its not abuse, as le, ge, etc. Are not mathematical operators, just operators sometimes used in math.
That Canadian joke doe
Should be trivial in cython. http://docs.cython.org/src/userguide/external_C_code.html 
It's abuse in the sense that creating an object that behaves this way is very unlikely to be useful or practical (and may, in fact, be more harmful than helpful) in most situations.
I don't have a Java IDE on this computer, but I'm fairly certain this wouldn't compile.
It's one of the worst features of the language! In javascript, there are objects. They are similar to dictionaries in python, and defined in much the same way: var x = {a: 1, b: 2, c: 3}; Those keys can be accessed in the same way as in python (`x["a"]`), and also in dot-syntax (`x.a`). The `with` statement basically lets you forget both of those. So instead of doing: x.c = x.a + x.b; You could do with (x) { c = a + b; } While that might look convenient, it's an evil little features with a bunch of downsides. I won't reiterate them all here, but it makes a lot of shit impossible to optimize and really makes things confusing. It's incredibly strongly discouraged by all responsible JS coders.
I never even realized that was a thing
huh, I stand corrected. I really did think this would raise an error. Perhaps it's just Eclipse and I'm just used to that. I'm not a huge Java developer either.
In other words, it's just like the Pascal `with` statement, from 1970. You have to think that if no other language designers put a feature in their language after a few decades, maybe there's a reason for that. Sometimes it's a good reason (like: it's really hard to implement, or: it makes optimization a bear), but probably not in this case. 
Languages with multiple dispatch do this, naturally. Not only is the first parameter not special, but methods don't even 'belong to' classes, like they do in single dispatch languages.
You should never, ever use something else than "self". It's not "pythonic", and is confusing for other defs.
Functions are objects. def x(y, z): return y(z)
You're right of course. I edited README.md, I hope it is clearer now. The one pain point that started it all is that I was bored having to maintain my README in rst format and having my https://pypi.python.org package pages regularly breaking because it does not tolerate any error in the rest syntax.
As someone who sometimes has to do evil, evil things with function argspecs in Python that need to be Python 2.7+ compatible, I really wish it had never existed. It's hard enough to write tools for Python developers as it is!
Alas, those are all good reasons for removing them.
Great stuff
"Interval comparison". It lets you chain range checks: "a &lt; b &lt; c" is equivalent to "a &lt; b and b &lt; c".
It's a quirk, but makes sense if you know what's going on. `and` returns the right most value unless any values left if it are falsy. `or` returns the first truthy value or the right most value if none are truthy. Conditional expressions are evaluate the returned value as a boolean.
The GIL! Has nothing to do with context manages but I just wanted to complain about it again.
The different standards of JS confuse me, but as I recall ES2015 (formerly ES7) strict mode bans the with statement.
Uhg this one is the worst for me. Urllib objects usually don't find their way into function signatures, datetime objects do all the time and its horrible how handicapped they are.
I love your game narrative 
The `else` statement following a loop is executed when you fall out of the loop body, as opposed to `break`ing out of it. As far as scoping goes, since Python uses function level scoping, you always have access to loop named variables regardless of how the loop terminates or code it runs (save code that modifies the globals dict, and anyone writing such code has way bigger issues than loop-break-else clauses).
That's Worf to you, lady. 
As is slicing (both reading and writing)
OK, I'll admit, that's pretty nifty :) I like to use [this guy's recommendations](https://blog.ionelmc.ro/2014/05/25/python-packaging/) for staying DRY while packaging but it's a little much to point newbies to. So I'll probably be referring people to this at some point. I still think you need to give more help to potential users. Your features read as if they're just a taste of what it can do, but there's no other documentation and the code is somewhat magic (at least, dense). For example it will be unclear to many why you sometimes get an object with attributes like `version` and `docstring` but other times just get a string. An exhaustive Features section that goes through what you get from every supported kind of input would clear that up. Also, your warning about importing it in `setup.py` should be much stronger. It's such an antipattern that I question whether `setupgoons` should even have a `setup.py` of its own, let alone be on PyPI. A big message like **DO NOT IMPORT ME IN `setup.py`** would hopefully suffice though. (I'm getting flashbacks to a time I had to boostrap an environment with a handful of packages that all import each other in their `setup.py` scripts)
In C++, it's largely due to RAII. Closing a scope calls the destructors and releases resources. Placing the end of a scope is then equivalent to closing the "with" block in python.
To my understanding, kinda. `using` requires an IDisposable but you're still responsible for setting it up. What `with` does is call two methods behind the scenes: `__enter__` and `__exit__` and ensures that any successful call to enter will result in a call to exit. Additionally, enter can produce a value that is assignable through: with something as x: A very common usage is for ensuring files get closed after the block exits. But you can do all sorts of stuff. For example, the decimal module has a context manager that affects the precision of Decimal objects inside the with block. 
Tack a `()` on there and enjoy your brand new, mostly anonymous class. 
My favorite quirk? class Meta(type): def __getitem__(self, key): print("From class", key) class Thing(metaclass=Meta): def __getitem__(self, key): print("From instance", key) Thing[1] # From class 1 Thing()[1] # From instance 1 You can also do fun stuff like this in Python 3. class Meta(type): def __new__(mcls, name, bases, attrs, **kwargs): # do stuff with the arbitrary keywords def __init__(cls, name, bases, attrs, **kwargs): # need to override this as well even if you don't use it class Thing(metaclass=Meta, key="word", other=4) # passed to **kwargs
I ran a morning session teaching our JS developers how to Python. We started with a sort of language diff; Python has this feature and JS doesn't; JS has this and Python doesn't etc. When it came to `with`, the wording was something like "Python has the `with` keyword. There is no equivalent feature in JS, though there is a bug with the same name"
Lua does this for class like tables, stuff like: function Point:set(x, y) self.x = x or 0 self.y = y or 0 end `function Point:set(x, y)` is equivalent to `function Point.set(self, x, y)`
And RAII is *incredible*. It's honestly one of my favorite language constructs.
Hi, I'm a noob, I've just started learning, how do I remove a key from this set? dict('dave')
When standards start banning the use of a statement, you know it's FUCKing bad.
I prefer tabs
Pretty sure that's true of most bugs in other languages...
or when you use the console are you too lazy to type the assign part of a statement sorted((8,5,2)) print(_) #[2, 5, 8]
Yes, that is nice. It works with any object that provides _ _ len _ _ as `if` is testing for a nonzero lenght. Edit, not sure how to do double _'s via markdown.
Do that to packages which people refuse to upgrade to python3. That'll teach them :P
Python has a few quirks that are pretty interesting. I did a talk about this recently so I've still got a few on my mind. Python caches the integers -5 to 256 as singletons. So, using the identity operator, we get some funny quirks. &gt;&gt;&gt; 1000 is 1000 True &gt;&gt;&gt; 4 is 4 True &gt;&gt;&gt; 4 is 2*2 True &gt;&gt;&gt; 1000 is 10*100 False Wait, what? There's also something interesting in the way Python does imports. Python's import mechanism, as far as CPython goes, lives in two places: `importlib.__import__` and `__builtins__.__import__`. The first is in the `importlib` module and the second is set up in all module scopes by the interpreter automatically. You can, interestingly enough, edit the import mechanism or remove it entirely. &gt;&gt;&gt; import random #this works &gt;&gt;&gt; del __builtins__.__import__ &gt;&gt;&gt; import os ImportError: __import__ not found Don't worry, you can fix this by setting `__builtins__.__import__ = importlib.__import__`. We just need to get our hands on the proper function... &gt;&gt;&gt; from importlib import __import__ ImportError: __import__ not found Oh wait, no you can't. (Unless you pre-imported `importlib`) Ok, I've got one last one. Python keeps all default parameter values in a closure for each function. That's why it's convention to set default values as `None`. &gt;&gt;&gt; def thing(arg=[]): ... arg.append(1) ... print(arg) &gt;&gt;&gt; thing() [1] &gt;&gt;&gt; thing() [1, 1] &gt;&gt;&gt; thing() [1, 1, 1] &gt;&gt;&gt; thing() [1, 1, 1, 1] 
Aren't the definitions limited to the module? Or do they "leak" out due to the definitions being global?
Personally I don't like requests' api too much. I find it has a tad too much "magic" going on. It is a bit "complected", in Rich Hickey's terms. But I agree it is a ton better than urllib2.
Do you need to wrap the entire api? Most of the time I find it's better to bind to just the needed functions and build a nice pythonic facade on top of them. For this ctypes is usually enough. Now, if you really need to wrap an entire library probably swig or cffi are better tools for your task.
&gt; your code shouldn't really care its not the code, its the poor sap trying to understand/debug that code that cares
Python 2.7 is the best version of Python. 
`with` in Python allows you to avoid repeating setup/cleanup code very succinctly. The simplest example is: # this opens file for reading - equivalent to f = open('file', 'r') with open('file', 'r') as f: data = f.read() ... # as we have now fallen out of the context block, f.close() has been called for us already # so now we don't have to remember to type that ourselves It's very little work in most cases to do this for anything that has boilerplate setup/cleanup code. There are two basic ways to do it. One is with a generator using contextlib: import contextlib @contextlib.contextmanager def ctx_func(): # do whatever setup first; in this example, I'll just instantiate a class called Thing thing = Thing() # whatever you yield here is what gets put into the "as ..." variable yield thing # code after yield does not run until the context block exits, so cleanup goes here thing.cleanup() I typically wrap the yield in a try/finally so that the cleanup code is executed even if an exception is raised while in the context managed block, but that may not always be what you want. The other way to make a context manager is to write a class `__enter__` and `__exit__` methods - as you would expect, `__enter__` is where your setup code goes, and `__exit__` is where your cleanup code goes. There are other interesting (and in some cases more esoteric) examples in the [contextlib](https://docs.python.org/3/library/contextlib.html) docs. 
GIL
The consistency in action: &gt;&gt;&gt; class Test: ... def __init__(self): ... self.inner = "Hello" ... def method(self, arg): ... print(self.inner, arg) ... &gt;&gt;&gt; t = Test() &gt;&gt;&gt; t.method("World") Hello World &gt;&gt;&gt; Test.method(t, "World") Hello World 
"cls" is and should be used when "this" is a class object and not instance of the class object
&gt; *"Actually the type of an object may be changed by merely assigning a different class to its __class__ attribute, but that is pure evil and I regret writing this footnote."* &gt;\- Luciano Ramalho: Fluent Python, p.242
Welp shit, time to start the holy war. I just watched silicon valley too... they made a episode about this.
camel_Case()
It works for me. You "lose" FOO because it's overridden by M but that's kind of the point.
 &gt;&gt;&gt; b = (256, 257) &gt;&gt;&gt; a = (256, 257) &gt;&gt;&gt; a[0] is b[0], a[1] is b[1] (True, False)
Hah, that's pretty funny. &gt;&gt;&gt; class A: ... def func(self): ... print("A") ... &gt;&gt;&gt; class B: ... def func(self): ... print("B") ... &gt;&gt;&gt; a = A() &gt;&gt;&gt; a.func() A &gt;&gt;&gt; a.__class__ = B &gt;&gt;&gt; a.func() B
if x == True:
Mucking with `__code__` (`func_code` in Python 2) is fun. &gt;&gt;&gt; def myfunc(x): return x &gt;&gt;&gt; myfunc.__code__ = (lambda x: x+1).__code__ &gt;&gt;&gt; myfunc(1) 2 This is nice because it lets you replace the content of a method without disturbing its scope, access to closure variables, etc.
&gt; I typically wrap the yield in a try/finally so that the cleanup code is executed even if an exception is raised while in the context managed block, but that may not always be what you want. &gt; &gt; Isn't that automatically handled by the context manager construct? I thought that was one of the features that made them so useful.
Is there a default mutable object parameter somewhere in get_dict, get_data, or do_stuff_to_data? Or anything further down that chain? If so, google "python default mutable object parameter". 
List comprehensions are just more fun in general.
I like the functionality, but agree it could do with a better keyword. I'd much rather see someone write: for x in iterable: ... code ... else: # if loop was never broken ... not_broken_code ... Than the equivalent: loop_not_broken = True for x in iterable: loop_not_broken = False ... code ... loop_not_broken = True if loop_not_broken: ... not_broken_code ... 
At first I thought you were wrong, but I verified it. The reason I thought you were wrong was that I know that in the CLI for python up it uses _ as though it were the ANS on most calculators: &gt;&gt;&gt; 8*4 32 &gt;&gt;&gt; _ 32 &gt;&gt;&gt; 
It's true though..
No I have some arguments default to None or True or False or a number, but never a dict, list, pointer etc. Thank you for the link though, I will read through that.
I've used `ping = type('', (), {'__repr__': lambda self: 'pong'})()` before. Now whenever you type "ping", it'll respond with "pong"!
You can escape characters in markdown, for example \\\_\\\_ becomes \_\_ I can see you know this as well, but for others' benefit, you can also use verbatim text by surrounding it with \`reverse quotes\` --&gt; `reverse quotes` Or, if you start a line: (and the following ones) with four spaces, you can get a whole block _*of *_ verbatim text
`if bool(x) is True and not x != True`:
You just post an example of a factory, and this specific example the author thinks would be better named something else, but they still use the same pattern.
&gt; It's more similar to a try/finally block all in one statement. That's pretty much what a using block in C# is. 
it is not. observe: In [2]: class Thing(object): ...: def __init__(self): ...: self.status = None ...: In [3]: @contextlib.contextmanager ...: def thing(): ...: t = Thing() ...: yield t ...: t.status = "Cleaned up" ...: In [4]: with thing() as thing1: ...: pass ...: In [5]: thing1.status Out[5]: 'Cleaned up' In [6]: with thing() as thing2: ...: raise Exception("nope") ...: --------------------------------------------------------------------------- Exception Traceback (most recent call last) &lt;ipython-input-6-c693c1a3e282&gt; in &lt;module&gt;() 1 with thing() as thing2: ----&gt; 2 raise Exception("nope") 3 Exception: nope In [7]: thing2 Out[7]: &lt;__main__.Thing at 0x7f545521e898&gt; In [8]: thing2.status In [9]: thing2.status is None Out[9]: True but with try/finally added: In [14]: @contextlib.contextmanager ....: def betterthing(): ....: t = Thing() ....: try: ....: yield t ....: finally: ....: t.status = "Cleaned up" ....: In [15]: with betterthing() as thing3: ....: raise Exception("yep") ....: --------------------------------------------------------------------------- Exception Traceback (most recent call last) &lt;ipython-input-15-c0a6675587a3&gt; in &lt;module&gt;() 1 with betterthing() as thing3: ----&gt; 2 raise Exception("yep") 3 Exception: yep In [16]: thing3.status Out[16]: 'Cleaned up' 
Namedtuples, while seemingly innocent, are essentially a macro in Python. The source code istruely terrifying.
Everybody use javascript
*triggered 
Integers in `range(-5, 256)`, in fact. Also this is implemented by cpython for optimization and is in no way a part of the language spec. Never rely on it, other interpreters will likely behave differently.
But interestingly(?) &gt;&gt;&gt; b = (256, 257); a = (256, 257) &gt;&gt;&gt; a[0] is b[0], a[1] is b[1] (True, True) 
&gt; Python caches the integers -5 to 256 This has caught me out before. Coming from java where strings had to be compared with str.equals(x), I assumed that in python I had to use "is" to compare them. Ended up getting an issue caused by the fact that "SmallString" is "SmallString" evaluated to True but "PrettyBigStringSizeActually" is "PrettyBigStringSizeActually" evaluated to false. 
English speaking programmers probably can't understand the glory of all strings being unicode. 
&gt; It's more similar to a try/finally block all in one statement. 90% sure that C#'s using compiles down to literally the exact same thing. 
This is not a memory leak.
Thanks, I feel really stupid for not just googling that now. 
I don't think a pure python solution is going to work well for what you are trying to do. Are you trying to do this as an exercise or do you have some functional problem that you are trying to solve? If you are trying to solve an issue you are having then I suggest using something else altogether. If you are just trying to learn you have a couple options: * Have a daemon that runs in the background and whenever Chrome starts it displays your app. (Way overkill, but it would be a good learning experience) * Change the "shortcut" for Chrome so when you first run it, your app is launched. (Probably the most functional, but also the least robust/configurable) * Find some sort of Google-Chrome "hook" so that it runs your app when it is started. (No clue if something like this exists or can without hacking chromium itself, probably a dumb way to do things regardless)
That semi colon is bugging me... &gt;&gt; a, b = (256, 257), (256, 257)
If you inadvertently reference x outside the loop, when you really meant to be referencing y, instead of getting a compiler error, you'll run and use the final value of x in the loop. It doesn't happen often, but it's a pain to diagnose when it does.
 for in in range(5) { print(i) }
When the code gets marshalled into cpython bytecode, python knows that a[1] and b[1] hold the same value and because python ints are immutable, python then optimizes it by allocating 257 only once. In nevus_bock case, the parser can't optimize the statements like this because they are parsed and executed individually in the repl. Copy the following code into your repl and you will see that it behaves just like in your example. You can probably guess why. :) def x(): b = (256, 257) a = (256, 257) print(a[0] is b[0], a[1] is b[1]) x() 
also: import braces edit. here's a little easter egg: from __future__ import braces
I try to just let my editor handle all that and convert the whole file to one or the other as needed.
ES2015 was formerly ES6
[Here](http://stackoverflow.com/a/71471/209019) are a few reasons why the Pascal's with statement is bad. I've had to program in Delphi for a job once. It's such a horrible, ugly language.
 a = [1,2,3,a] That should raise a `NameError`, unless you already declared `a` somewhere else. I find it hard to believe that this is something that actually worked in some old version of Python.
Please help!
I've just started a new Python2 project
&gt; clize uses a weird (non-standard) docstring format. Thanks for the feedback, I wish I found this sooner. I'll prioritize docstring interoperability after the next release.
[I somewhat expected this](http://vignette2.wikia.nocookie.net/villains/images/1/14/French-Monty-Python-Holy-Grail-French-taunt.jpg/revision/latest?cb=20120724171729)
A shitty calculator: from subprocess import check_output from sys import executable as python while True: code = input('&gt;&gt;&gt; ') out = check_output([python, '-c', "print("+code+", end='')"]) if out: print(out.decode()) 
&gt; Would this have the same issue when calling foo multiple times? Yes
How come there is no compiler?
Oh, went completely above my head. I was looking for stuff like `x is True` and the likes
Yes, but that one is true ;) edit: Didn't think the /s was necessary
/r/learnpython
Noob here. Would there be any reason to use this over a function?
.m3u is text file so you can use 1. python - open(). write(), close() f = open("playlist.m3u", "w") f.write(r.content) f.close() 2. redirection in operation system Open cmd.exe and run your script with "&gt;" python.exe your_script.py &gt; playlist.m3u It will save in file all text printed on screen --- Probably you will have to write to file something more than only paths to .flac - see [M3U in wikipedia](https://en.wikipedia.org/wiki/M3U) 
I like it too, and use it pretty heavily, but this kind of short circuit evaluation is not at all unique to python. 
Where are the braces?
This is not good Java though.
This has done the trick! Thank you so much! :)
Which IDE should I use?
It's also fixed in explicit loops. for i in [1, 2]: pass print(i) prints 2 in Python 2, but Python 3 raises a NameError (thank ~~god~~ Guido).
The reason for this is for `d.update(self=42)` to assign to `kwds` rather than collide with the `self` that means "the current object". No other way to properly do this. I should point out that they do use the correct name anyway though.
Use a debugger or trace the output at every step. In general: do programming. 
That has nothing to do with block scoping?
`from __future__ import braces`
`if len(seq) == 0:`
Lookin at you Thrift...
Python is good for learning, but not for a serious project. 
I don't like anyone telling me how to indent my code.
There are some cases where it makes things more clean, like breaking out of deep loops, FSMs, and multiple early returns that want to reuse some logic. In general though goto is considered very bad practise as it's easy to create big snarls of jumps that are impossible to understand. If you avoid inter-function jumps it is generally not too bad but most people still find it a hard to read style. 
`for i in range(len(data))`
I know this chain is in jest but oh my god does this sentence trigger me.
`self.say_No()`
I don't understand why this would be considered bad, it is far more readable than `if not len(seq):`
Wait do people really dislike camel case in Python? I was taught UpperClass and camelFunction.
it's not pep8
I recommend people transitioned from C/Java/JS following syntactic sugar. def foo():#{ print("Hello World!"); #} 
I kind of agree. I'm all for shorter code, but I prefer longer over non-obvious. `else` executing because `for` DIDN'T break is completely opposite to what one would intuit. Putting a comment in reminding people of this definitely helps. I've never needed to use `else` this way though, largely because when I see a case for it, I notice an opportunity to split a function that does a few things into a few functions. Of course this is a very slippery slope and must be used judiciously. You don't want 50 functions to do 53 lines of work.
Explanation please?
Hi, I don't know how to program very well, could someone help me piece together some enterprise level accounting software, I'll tip.
 print("You have a small penis!")
I import unicode_literals from `__future__` whenever I'm writing Python 2 as well, but it doesn't help me as much because it only covers my own modules. I'm frequently tying other modules together, and when some of them are still returning plain Python 2 strings, it's a disappointment.
`for i in range(len(list)): print(list[i])`
So... did this exist before O__O ? For the lazy: &gt;&gt;&gt; from __future__ import braces SyntaxError: not a chance
goto statements.......we meet again my old enemy.....
can you help me reproduce the bug in this way? I can reproduce it if there is a mutable object default parameter in the main function but if it is in a nested function I can't. See below: http://puu.sh/pxgrb/94cb951ee0.png
that's true if `x` is a `bool` object, i.e `True` or `False`. If `x` is something else, like a number or a list or something, then `x is True` will always be evaluated to `False`. That's a really annoying bug to have to find.
My bad. Didn't understand at the start. 
camelCase is not bad per se, but according to PEP 8, it is less readable than lowercase + underscores.
Gotta make it symmetric: def foo(): #{# print "Hello, world!" #}# with added Py2 triggering.
Sure... Step #1 Write a python program that displays a heart image using your favorite gui toolkit Step #2 Have your python program also launch chrome after displaying the image Step #3 Replace your regular chrome shortcut with this new python program But like other's have said, any kind of general purpose programming language is overkill for this task. If you are using linux a simple shell script will suffice, e.g. "xdg-open heart.png &amp; path_to_your_chrome_binary" or OSX "open heart.png &amp; path_to_your_chrome_binary", or a two-line batch file in windows using the start command, etc.
`for i, element in enumerate(data)`
You're right indeed but in the community a lot of people yell at you if you use that!
What do you think a memory leak is?
that looks really great - thank you for the reply.. I will look into it in more detail and report back..
As in `inspect.Signature`? That doesn't exist in Python 2.7 stdlib. I'm sure there's a third-party backport module but on some projects I can't add dependencies.
Are you saying that monkey patching or mocking is a terrible tactic?
Yeah. &gt; on some projects I can't add dependencies Why is that?
Remember to always use a context handler to open files unless you have a really good reason not to. with open(filepath) as f: ... 
I don't understand why a language that tries to limit it's line length to 79 characters does everything it can to make lines longer.
Does any JIT do that?
I suppose "can't" is a bit more firm than the truth, which is that it's a horrible pain in the ass at some companies. Examples from a previous job: * I spent three weeks going back and forth with the legal team to get us approved to use requests, then another week to getting the build guys to set up our systems to use it (they weren't stupid or jerks, just really busy and understaffed). * I gave up trying to get Paramiko into our dependencies when it became obvious (L)GPL was a very big problem for them. I ended up running ssh/scp with `subprocess.Popen`, or turning telnet on the target machines and using that to connect when I needed byte-by-byte data. * Endless, endless arguments over whether it was "safe" to use the concurrent.futures backport in our project from the lead developer.
I get you. Sometimes the reason is just irrationality on part of the developer, but every now and then someone's hands are truly tied. FYI, funcsigs is a backport of inspect.Signature. It's basically code from lifted from 3.3 with a few bugfixes, so it's the same license as Python. Though on a personal (and potentially unrelated) note I don't get why GPL is a concern for proprietary SaaS.
Both. My issue with mocks are two fold, one of which is purely a semantic issue. Actual mocks fully simulate the replacement. They have actual logic inside of them. They're much more than "When you call x.foo() you back a list of bazs", so you effectively double your work load when you use a "proper" mock. I feel the term gets thrown around a bit too loosely. But arguing that "What you're actually using is a stub" delves into semantic arguments I ultimately don't care about. My real issue with this post is the emphasis on monkey patching rather than proper design. Yes, sometimes monkey patching is the most pragmatic solution and in these instances, I fully embrace it. But it's such a powerful too and gets misused too often -- it's like using a sledgehammer to put a nail in the wall. You want your tests to simulate how code is actually used 99% of the time. If you're code isn't meant to be monkey patched, then you should avoid monkey patching. I realize that "dependency injection" has a bad reputation, and I feel like I'm selling snake oil whenever I bring it up, but providing dependencies to an instance alleviates the need to monkey patch in almost all instances. For example, I often see people monkey patch `datetime` because they call `datetime.now` inside of a method or function. But if instead you *pass* `datetime` to that callable (either upon creation or just for that one method), then you don't need to monkey patch. def more_than_10_days_ago(when): return (datetime.now() - when) &gt; timedelta(days=10) You *must* monkey patch that to get accurate tests. Instead, you can do this: def more_than_10_days_ago(when, now=datetime.now): return (now() - when) &gt; timedelta(days=10) With this one, you still implicitly depend on `datetime.now` but there's the chance to replace it with any callable that returns a datetime.
http://www.pyinvoke.org/ was posted recently in another thread. Looks nice, though I haven't used it myself.
Thanks very much for this! Do you provide a means for file upload to document libraries? I see that you can work with document libraries as a type of list template, but I didn't see a method included in the docs instructing how to upload and retrieve documents. 
It's likely that the "heart" is phase 1 of whatever they are doing. Although, at any rate, pure HTML would be best. You can set your homepage to C:\webpage.html and it will open up just fine. I can't think of any reason for something so simple to be done in Python even if it's just the basis of a bigger program.
I once used it to do mutation in a genetic programming task - converting an [abstract syntax tree](https://docs.python.org/library/ast.html) node in-place to another type, like an if-statement into a for-block: node.__class__ = mutated.__class__ node.__dict__ = copy.deepcopy(mutated).__dict__ 
Python is just a beginner language, you may want to move to a real object oriented language like Java.
I really wish they would ~double the character limit per line in PEP8. 79 is unreasonably short if you're using descriptive variable names.
My entry to this thread: All the folks still using Python 2 need to stop being lazy and upgrade their workflow to a modern version of the language already.
Try /r/learnpython.
It wasn't even SaaS, just an internal development/build tool. Big company lawyers take CYA *very* seriously... just ask [Douglas Crockford](http://dev.hasenj.org/post/3272592502/ibm-and-its-minions)
This is an interesting idea, but I wouldn't be too keen on what it would do to my method signatures. **However,** I suspect (pretty strongly) you could accomplish the same effect with decorators. You might even be able to apply the decorators only within your test suite, thereby replicating the benefits of monkeypatching without its potentially self-defeating consequences. The reason you could do it this way is that decorators create a closure for the decorated function. So in the decorator, you could *locally* monkeypatch datetime, instead of doing it globally. Though to be fair, maybe people are already doing that. I have no idea, because so far I've successfully designed all my tests (and/or libraries) such that they don't require it, so I haven't looked into it.
 end = None for i in range(10): if i % 3 == 0: print(i) end end
They were added in python3. for i in range(10): { print("Also, it removes indentation requirements"), print(i) } The lack of this was really holding back python, and the fact that it supports it is why everyone now advocated using python 3. (Though this was important enough that it was backported to python2 as well, given appropriate `__future__` statements.)
&gt;You have to think that if no other language designers put a feature in their language Visual basic has it, along with the already mentioned javascript. Though the fact that *those* particular two languages are the exception is probably stronger testimony against the idea than no languages doing it at all. 
Python 2.6.2 for the win!
Good thing what I know has nothing to do with your beliefs but truth be told I don't care enough to convince you which version the change occured.
Python is only popular because it's new.
It's much more than an interesting idea, it's a time proven approach. Instead of now statically depending on `datetime.now` you can actually supply anything that satisfies the requirements of: * is callable * can have a datetime subtracted from it * and the result of that subtraction is comparable to a timedelta For example, this contrived example: class CrazyInt: def __init__(self, x): self._x = x def __sub__(self, other): # datetime.timestamp is new 3.3 return CrazyInt(self._x - other.timestamp()) def __gt__(self, other): return self.x &gt; other.total_seconds() more_than_10_days_ago(datetime(2016, 1, 1), lambda: CrazyInt(5)) # false I'm not of the opinion that you should provide literally every dependency -- otherwise we'd end up insane signatures that are completely incomprehensible. It's best to provide non-deterministic things (`datetime.now`, for example) and also the absolute minimal object you can (a specific datetime rather than `datetime.now`). Decorators for monkey patching is still monkey patching. And how monkey patching a static dependency works is reaching into the module where the dependency is imported and replacing it on the module itself. So even using a decorator or context manage to monkey patch still does it globally where globally means the context of that module. Still, if you do that but the target is bound to, say, a default argument, the monkey patching won't do anything. # in something.py from datetime import datetime def more_than_10_days_ago(when, clock=datetime.now): ... Monkey patching datetime won't actually affect that function. Unless you meant using decorators to provide the dependencies, in which case you're in a for a world of hurt precisely because of the contract a decorator provides. @some_decorator def more_than_10_days_ago(...): ... Depending on how `some_decorator` is defined, you probably lose complete access to `more_than_10_days_ago`. If the decorator properly uses `functools.update_wrapper/wraps`, you can use `inspect.unwrap` (3.4+, or implement something similar), but most decorators I've seen don't bother to do this.
And it involves a lot of emojis...
You want to place it in /usr/bin No matter where you are, you can type xyz and it will run. Make sure to pick a fitting name. I would suggest removing the .py https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard
The only use of `goto` (in C code) that I find is usually defensible is breaking out of a double or triple loop, because it avoids having to use extra bools to track the state of your loop. For example: for (int i = 0; i &lt; 100; ++i) { for (int j = 100; j &gt; 0; --j) { for (int k = -100; k &lt; 0; ++k) { if (i * j * k == N) goto loop_end; } } } loop_end: /* continue here */ Even so, for me to pass it in code review you'd have to explain why you don't want to just refactor the loop into a function, and use `return` instead of `goto`. In python code, it would be right out. The goto module I linked is definitely just meant as a joke.
Your version produces an unnecessary `ROT_TWO`: &gt;&gt;&gt; from dis import dis &gt;&gt;&gt; def f0(): ... b = (256, 257); a = (256, 257) ... &gt;&gt;&gt; dis(f0) 2 0 LOAD_CONST 3 ((256, 257)) 3 STORE_FAST 0 (b) 6 LOAD_CONST 4 ((256, 257)) 9 STORE_FAST 1 (a) 12 LOAD_CONST 0 (None) 15 RETURN_VALUE &gt;&gt;&gt; def f1(): ... a, b = (256, 257), (256, 257) ... &gt;&gt;&gt; dis(f1) 2 0 LOAD_CONST 3 ((256, 257)) 3 LOAD_CONST 4 ((256, 257)) 6 ROT_TWO 7 STORE_FAST 0 (a) 10 STORE_FAST 1 (b) 13 LOAD_CONST 0 (None) 16 RETURN_VALUE 
I.. uh... wait \&gt;.&gt;
Thanks!
I use spaces but prefer tabs. Moving with arrow keys is faster. 
To do number 4, assuming you use `bash`, add the following line to the bottom of your `~/.bashrc`: `export PATH=$PATH:/path/to/directory/` Make sure that `xyz.py` is executable (`chmod u+x xyz.py`). If you want other users to be able to execute it as well, use `a+x`.
Hey, this isn't "Annoy /r/vim in one sentence."
&gt; Unless you meant using decorators to provide the dependencies, in which case you're in a for a world of hurt precisely because of the contract a decorator provides. That is indeed what I was suggesting. It would be a more involved, but in my personal opinion more robust, solution than either of the above. You would likely need some kind of switch to only enable the behavior during testing -- essentially a ```@monkeypatch(some_old_name, some_new_name)``` decorator that (critically) was only active during testing. Or, at a certain point, you'd be even better off doing this as a pre-test source modification. But the problem I have with passing dependencies, and what I meant by "I might not be okay with how it changes my method signatures", is that in many cases, this is a perfect example of a leaky abstraction. If your goal is strictly "I want to be able to test this function for all possible flow paths", then "change the function's signature" is seldom an appropriate action. Also keep in mind that definition time evaluation of default arguments means that supplying dependencies through them may very well be dangerous. The typical ```default=None``` pattern *can* be appropriate here, but it can also negatively affect the behavior of the internals of the function, depending on what the specific context is. And ultimately, that's precisely my point: the "best" strategy for making your tests work varies on a case-by-case basis, and I'm not comfortable making a general recommendation for dependency injection over monkeypatching. ---- I agree that monkeypatching in testing is sometimes (and maybe even oftentimes) indicative of bad software design, but I don't think dependency injection is necessarily the solution. Like you said, "practice how you play"; if ```def some_time_function():``` is intended to have a swappable ```now()``` component, then I should certainly define it that way. But if ```now()``` is strictly an implementation detail of the function that's calling it, and specific logical flow paths of that implementation need to be tested in order to evaluate internal correctness of that function, I think it is, in fact, appropriate to replace the call (for example, through monkeypatching). The question then becomes, how can I most effectively limit the effect of that substitution to only the places it is required. And that is precisely why I think a local substitution -- for example, *perhaps* through decorators -- might be better. More likely, it would be smarter to just have better test fixtures and/or granularity in the first place.
I don't know of a specific tutorial, but this is where dependency injection can help. Create a Connection class, that creates the connection, then pass it into your Foo.create(), Foo.update(), etc.... methods. This decouples the connection from the class. class Connection: def connect(connection_string) conn = create_engine(connection_string) return conn Your Connection class can have connect_SQLServer(), connectOracle(), etc... or a single connect() with a connection string passed in. 
Now that I look at it. This isn't really dependency injection, just simply handling the connection outside of the Model.
Depends on the definition of large, since I don't think most projects really get too big to done with dynamic strong typing. You can spend years working on the same project without ever hitting the point where you're hitting an unreasonable number of bugs that could be fixed by a static type system, and it's hard to pinpoint where the extra overhead of the type system early on justifies itself later. 
Python is slow.
if x != False: return True; else: return False;
PHP is clearly the most used and superior web language
&gt; I prefer tabs Uhh... is this bad thing?... o__o (Python noob)
 if ord(str(bool(x))[0]) == 84:
Oh shit, I was about to correct the fuck out of him until I read your comment.
great
DRY &gt;&gt;&gt; a = b = (256, 257)
You're confusing `if x:` and `if x is True:` - the `is` keyword tests object identity. 
Code that uses os and os.path heavily gets ugly quickly. Path.py fixes that.
You can't build a large clean code base with static typing, either.
That's interesting. Do you have a link to said discussion?
It's almost certainly something in do_stuff_to_datathat's reusing the dictionary. As others have mentioned, mutable default arguments are a pretty common pitfall that can lead to this situation, but definitely take a close look at `do_stuff_to_data` to see where it creates the dict it returns, and whether this could be reusing an existing one. It may only be on one particular codepath that apache happens to be hitting sometimes, while your console test doesn't. You can confirm if this is what's happening by printing the `id(dict)` along with the results. If it's reusing the dict, you'll see the same id printed for both object_A and object_B. OTOH, it is odd that it's only *partially* preserving the A keys (ie you have key_A_2 but not key_A_1), so potentially something else could be going on. Eg. it could be another layer messing something up (eg. maybe somehow object_B is actually getting polluted with object_A values, and so the problem is happening even before the dict creation). It's hard to diagnose without more information, but a good geneal approach in tracking down stuff like this is to add a bunch of logging, printing out the values of the dict / object at various points, and adding finer-grained logging to narrow in to the point where things go wrong. 
you can take a look on http://dev.weboob.org/api/capabilities/torrent 
Am I missing something? In both 2 and 3 this errors out with invalid syntax.
I mean SQLAlchemy does it's best to support as many backend DBs as possible, but it's hard to avoid *all* quirks. Per your example, I'm pretty sure manually creating a sequence object and assigning it will work on all supported databases, so there's no reason to do that only for oracle.
Me too, I thought this was /r/montypython 
Do you also work in Php, by any chance? Because dependency injection is a big deal over there. Php programmers coming to Python are appalled that python doesn't do Dependency Injection. I was too. Then I realised that I *don't need* to, because I can replace any dependency at runtime. And I was enlightned. &gt;But if instead you pass datetime to that callable (either upon creation or just for that one method), then you don't need to monkey patch. I think this is an unnecessary anti-pattern when you are working with something powerful and dynamic as Python. The only thing that this serves in Python is to make the dependencies explicit, which often might be not worth the trouble.. Php programmers go into great length, obsessively, to separate things a great deal, just so that they can do dependency inject stuff. They somehow take it as a measure of design competence, and pat themselves on the back for doing more of it. And the sad thing is that Php's best practice only allow one class per file! So you get a zillion files with just function wrapped in classes and in namespaces that can span multiple lines, just so they can be injected... It is a mess. You don't need it in Python.
_"An Introduction to **Mocking** in ^Python"_ ``` O'rly ```
Looks cool, I'm going to try it out. A couple things: - VLC doesn't work on my computer for Chromebook reasons; I use mplayer. Can you make the player bin be an option? - You should properly package this as a package with importable functions, and then make a script be a module like `main.py` that is called with setuptools' `entry_points`. After all I can see this growing in features. - On a similar note, a proper CLI interface (at the very least a help message if it's not used right) would be nice. Especially as other features are added. I highly highly recommend docopt. Someone else will recommend click which is nice but I think docopt is way more straightforward. - Don't check in the folders .idea, dist, or *.egg-info. - requests automatically encodes urls, so no need to do `.replace(' ', '%20')` - use the subprocess module instead of `os.system` - on my system I needed sudo to install peerflix, so maybe just don't try to do that for the user, but instead error with a helpful message - speaking of errors, your messages that print when something goes wrong (line 15) should go to stderr. And also you shouldn't exit with a return code of 0 when something didn't work. Most sensible way to accomplish both these things is to raise an exception rather than printing and exiting.
What is your educational background like? Your experience with programming in general, and python in particular? Experience with Selenium?
Work through Test Driven Development. It will teach you Django in conjunction with Selenium. 
I'm a monolingual American grad student in psycholinguistics, and my research area is how reading processes differ across languages. I'm currently using Python to generate and select stimuli for an experiment that is looking at Chinese reading. Obviously, 2.7 is a no-go for this because I'm not going to spend a week of my life trying to figure out how the fuck to properly work with Chinese characters without native Unicode support. I had another grad student suggest that "you should really be using Python 2.7 because it's much more stable." I just stared at him for a solid 30 seconds because I couldn't find the right words to describe how stupid that suggestion was.
Wait, do people actually think this? If I need to get a small webpage up and running quickly with very limited dynamic content, I might use PHP, but I would never ever ever use PHP for 98% of the things I use Python for...
(In case you didn't figure it out, and/or haven't seen it before: it's abusing the syntax for set literals.)
It's really hard to tell without an executable example and Traceback. 
What is a daemon? Could you explain option one more? I really am just trying to learn here, not trying to fix a problem. Thank you!
This is!! How exactly did he do this? What are all those files doing? Thanks alot, this is perfect
I'm also starting to look into Java so Thank you!
Yeah, but I want the image to be run on a separate tab or extension. Not on Google Chrome
i have good networking background - hardware - shifting to devops, qa which includes networking plus python. i have never done anything with python except for running scripts on switches for automation. but i know basics of python as i can relate everything to C programming(which i am intermediate) selenium never worked but want to learn...saw youtube videos
Ah. I'll paste it once I get home.
Pretty much the only website I pay to see the content from. Well worth the money (more so linux content than python though)
Print ("Hello World")
The simplest definition for a daemon is a program that simply runs in the background. In the Linux world, things that end in "d" are usually daemons. Examples of this are crond (cron daemon), httpd (web server daemon), sshd (ssh daemon), etc. What you would want to create is a program that runs as a background process (daemon) and watches for google chrome to open up. Once it does, it creates a new tab with your heart image. There are multiple ways to accomplish this and some are better than others. For example, you could have your code continually check all of the current running processes and if it sees "google-chrome" then open the tab. This however, isn't optimal; what you probably want is to have google send some sort of signal to your process to your app so it automatically opens when it starts. Unfortunately, I don't know if there is anything like this built into chrome and part of the reason python isn't the best tool for the job here. You're going to need to google, a lot. Personally, I don't think you should take up this challenge. It is unnecessarily difficult and while you may learn some, it probably isn't the best use of your time. It would be like learning to drive a car with your feet. Yes, it may make you a better driver, but learning with your hands is going to offer you better results. Instead, fix a problem you have. Automate something. I find learning for the sake of learning difficult in the beginner/intermediate stage. I'm not sure what you do for work but is there any single task that gets repetitive? Make your program do that. Some people may disagree, but you may also benefit from learning some basic Linux knowledge. 
You forgot the semicolon
They actually did add braces in Python 3
&gt; It's fine if you're interested in doing runtime monkey patching I am not sure you should be calling it monkey patching, because, but it seems like you are just re-writing symbols at run time. Monkey patching might be better suited to process where code is read, modified and eval'ed at run time..
Would like to know as well :) 
Can someone help me understand how to use mocks in a more semantically meaningful way than testing that a function got called? Let's say I want to test my search function, which utilizes another API's search function to do the heavy lifting. I want to test that the data I pulled from the external API gets properly parsed into my own data format, but of course I do not want to actually call that API. The obvious answer to me is to run the code against the real API once, save the output to a file, then monkeypatch the API call to read my file instead. This seems extremely cumbersome and difficult to manage. Is there a better way? Is there a Mock module out there that can perform this "run against real code and save output when a record flag enabled, then monkeypatch when record flag is disabled"?
With the comma? Example: names = ["Bob","Charlie","Mark"] for i, name in enumerate(names): print(name) Like that? 
After further research, I found the answer: http://two.pairlist.net/pipermail/reportlab-users/2009-December/009077.html Just wrap it in ImageReader()
One of the Python guiding principles is explicit is always better than implicit.
As requested, I recommend click.
Yeah exactly. `enumerate` is a function from the standard library which iterates over the collection, yielding a pair `(i, e)` where `i` is the current index and `e` the correspondent element.
Great post thank you. I will try this.
You shouldn't be using easy_install anymore.
Fuck this! Please add a notice that you are using torrents. Using them in Germany gets many people thousands of euros in fines. I just had to nope out of there after seeing the word torrent flicker across my screen. ~~Btw your script declares that it's to be run with python3 (first line) but it's not even written for that (e.g. print statements without parentheses).~~
You are right. I'll add it. It was just a quick hack, didn't think much about the edge cases.
You are right, sorry. That was an assumption because I got &gt; SyntaxError: Missing parentheses in call to 'print' running it the first time. **Anyway** the torrent issue is serious. Just put the word torrent anywhere in the description of your script in Github.
Thanks for this. I am going to look this over and attempt to learn from it. 
I'll add it. Thanks for your suggestion.
Maybe they care about interacting with their filesystem correctly?
What does this have to do with anything? You'd have a sum type for this. It will also stop you from having `reduce(X, method="mqx")` and not realizing it until you see the traceback in your logs.
Maybe your names are too verbose? Long lines prevent split screen editing, which I will never give up, ever. I've had no trouble with it. There are plenty of opportunities for line breaks.
Oh god
[GIFV link](https://i.imgur.com/ooDk30T.gifv) --- _^I ^am ^a ^bot. ^[FAQ](https://www.reddit.com/r/livven/wiki/gifv-bot) ^// ^[code](https://github.com/Livven/GifvBot)_
Here you go: http://chimera.labs.oreilly.com/books/1234000000754/index.html
Noice
~~Small correction: the pip install command should be `pip install python-for-android`. This is fixed in my [original post](http://inclem.net/2016/06/18/kivy/python_for_android_0_4_released/) but apparently WordPress doesn't pull the update for the Kivy blog version.~~ Edit: It's fixed now
 if x: do_something() Unless x is a boolean or implements __ bool __ / __ nonzero __, this should raise a TypeError, and if x is None it should raise an exception.
Large projects work better with stricter typing but that doesn't mean that static typing is better. Particularly since static typing comes at a high cost - increased verbosity and naturally tighter coupling.
I think here, you are wrong. You can have memory leaks in Python. If the an object(in fact anything - classes, instances, methods, functions) has a reference to something(same as above) that is never destroyed than that object will never be destroyed. Imagine a chain now where A references B, B references C, C references A. Again, these can be anything and you usually create them using closures. The A, B, C chain will never be unallocated because it contains references and produce a memory leak.
Rewriting symbols at runtime is what monkey patching is all about. Reading, modifying and evaling code at run time is a much more horrific version of monkey patching (though, I'll admit I've explored it -- the AST module is incredibly useful for this).
If you're using requests (if you're not, I recommend using it), you'll want to look into Betamax which can do exactly that. The other thing you should look into is separating your IO from your logic. I actually have an example that fits what you're describing. I work on a customer service dashboard which is essentially API aggregation. Our search functionality is powered by an API. But we needed to limit results for some user groups (because reasons). So we ended up with something that looks vaguely like this: class UserSearch: def __init__(self, connection, policy=lambda r: r): self._connection = connection self._policy = policy def search(self, **kwargs): # formulate the right search and get the base, deserialized results results = self._transform(self._connection(**self._process(**kwargs))) return self._policy(results) # other methods here Now we can extend the functionality of the user search by providing different policies -- for example, we have a policy of "If the user is in one of these groups, only provide X results". Later, we may want to do something else ("If user is in group X, filter accounts that match Y criteria"). You pull your I/O and your logic into separate places and then create things that marry them together -- functions, classes, whatever.
&gt; I'll admit I've explored it -- the AST module is incredibly useful for this.. I have done worse. I have done monkey patching in Php long before Php code had an ast representation....
I can only imagine what sorts of horrors that entails.
It wasn't in production. It was for a code coverage analysis tool I was trying to build.
It's not a syntax error, the code uses a ternary operator (X if Y else Z).
No it doesn't, unless there's something you didn't paste, because you close the `print` parens before the first `if`.
Ever visit r/learnpython? I get that newbies need a launch pad and all, but this question has been covered too many times already.
Cool, I crossposted this to r/greeblingporn
This is the world of python and we have a heavily dogmatic style guide, [PEP8](https://www.python.org/dev/peps/pep-0008/). Basically if it's more than 79 characters then you're probably doing something wrong and your code is probably difficult to read. It's usually a good hint that your line of code is trying to do too many things. Frankly I could see rewriting your line of code into about three separate functions, let alone multiple lines. So the answer to this question: &gt; Is it wrong to write a "highly productive' 250 characters long line? Is 'Yes'. Even if you *were* completely justified in having an overly long line I would recommend against it by virtue of the fact it's easier to follow a hard and fast rule of keeping lines under a certain length.
I'm strongly against the Church of the Short Line and Primitive Editors but that's a terrible example for when long lines makes sense :P Some pointers: "" not in? Is my reader screwing that up or do you really check for the existence of the empty string in a string? "len(X) != 0" is the same as just X
 A = object() B = object() C = object() A.ref = B B.ref = C C.ref = A A = Null B = Null C = Null Is this a memory leak or not? (Ignore the syntax errors, I'm on my phone) 
Generally people are fine if it's just a bit over, I think if it goes too far over it becomes hard to tell apart the arguments (if they're expressions) so I prefer something like: self.some_obj = new_obj( self.val1, self.val2, self.val3)
I say screw the limit. People do all sorts of stupid stuff to go under it. Personally I'd never break a line if my editor could do really good soft line break/formatting. Unfortunately it only does not terrible soft line breaks so I do break for things. Breaking a line up sucks for stack traces and groping though. 
They didn't utilize their own resources.
Put the thing on github. Accept pull requests. Don't try to dangle the maybe-future-money bs here. 
/r/learnpython
Of related things, MicroPython started an Android port some time ago too (and looking for people interested to play with it/continue it). 
&gt; but there aren't really situations when you can only use tabs. Meet make. (The bottom line is the same: have a nice sane configurable text editor, not what they use.) 
We currently have limited funds, but it has been tossed around that there are potential opportunities for pay. Thanks for the advice for putting it on github, I'm doing so now! :)
As you have given dislike to the mention of possible money I have removed it
recommend those
They won't, because PEP8 isn't intended to be mindlessly followed (and many people think 79-char limit is a prank to reach even those who don't understand the above). 
&gt; If the args you are passing into the new object cause it to go over 79 chars, is it preferred that you do line breaks, or add a line of code before the instantiation to map the values to be passed to variables with smaller names I would say line breaks are preferred as you don't have to deal with the cognitive overhead of variable names changing. That being said, if it's just over then I wouldn't worry about it too much if that's what you want to allow. It's more if you do it regularly or go over 100 that it becomes a serious issue.
Heck, only C probably has more compilers than Python... 
That's known as a reference cycle, and it does pose a problem for simple reference-counting garbage collectors (i.e. A references B, B references C, and C references A. Nothing outside of these 3 objects references them, yet they still cannot be deleted because the number of references for each object by this naive accounting scheme is still &gt; 0). However, these should not be a problem for Python's [garbage collector](https://docs.python.org/3/library/gc.html), which is more advanced, and explicitly deals with reference cycles (as long as A,B,C, do NOT have customized `__del__` methods... the GC punts on that since you always need a human in the loop to figure the right thing to do in that particular case) In either case, even if the python garbage collector could not deal wth it automatically, it's still not a "memory leak" in any traditional sense. In my example, after line #2 there is NOTHING that you could ever do to reclaim that memory. It's kind of like the event horizon of a black hole, there's no going back. In the python case, even if you lose all references to the cycle, and manage to defeat the reference cycle machinery of the garbage collector, you can always introspect to those objects (e.g. `gc.get_objects()`) and rejigger the references so that the garbage collector grabs them on the next pass.
Replace peerflix with touchandgo
Sounds cool. Got a link handy?
He's actually checking for `"_"`, but it got formatted away. If you have RES, check the source button.
 if (candidate_letter != ";" or (dictionary and "_" not in guess_this_word) and guess_this_word): print(f"Your word is: {guess_this_word.title()}") else: print("No word has been found...") sleep(3.5)
Just wondering: If you ended all the right lines with semicolons, could you write a fully-featured Python application in one monstrously long line?
Yes you can. Google obfuscated python for examples.
Great link. 
&gt; or add a line of code before the instantiation to map the values to be passed to variables with smaller names; ie: NO NO NO NO Do not under any circumstance change variable names just to get around code formatting standards
Well you were technically correct. The original snippet won't compile, because `if (x)` would be an error since `x` is an `int`.
bad for humans reading/maintaining it.. which doesn't imply it's correct/incorrect from code execution's point of view. Not saying I like op's line of code (I don't).
Code is for humans. If we only wanted to talk to computers, we wouldn't use code, we'd use data in memory registers.
`if x:` is a common convention in Python for truthy/falsy checks. But there are cases where you would want to check specifically for `True`, in which case the identity check, `x is True`, is preferable to the equality check, `x == True`.
Think Python by Allen Downey. Purchase, download a free PDF, or read online. http://greenteapress.com/wp/think-python-2e/
Free MIT course on programming using Python. I also was inspired to learn and just watched the first lecture. http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/Syllabus/
The Python books by Al Sweigart are a good starting point. https://inventwithpython.com/
This works better than what I had initially for putting everything on a separate line, however it doesn't address breaking up the lines on spaces as to not cut off words / letters which is the issue now. Thanks for the snazzier code, though. 
The book Fluent Python by Luciano Ramalho has some excellent tips on how to make the most of the language but probably the best way to learn is to think of something you wish was automatic and make a script for it. 
Oh, right. I completely missed out on that. In that case, may I suggest that you use 'textwrap' instead? It's a good, well tested library. 
Have you checked out xonsh? xonsh/xonsh on github.
This.
/r/learnpython
/r/learnpython
Is memory being allocated? Yes. Is it being incorrectly not returned? Yes because a circular reference will prevent the GC freeing it after it's no longer required. That's a leak. If I was to create lots of objects, and they all had a circular reference inside them, they'd not be freed when they should be freed. Creating the circular reference is not a leak, but a leak will still occur when the GC passes over it after you're done.
I think you read something into my comment which wasn't there. 
Has anyone else done something similar to this with other objects in Blender?
My guess is that some of the syntax niceties they have wouldn't be possible as a library.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/annoyinonesentence] [\/r\/python](https://np.reddit.com/r/AnnoyInOneSentence/comments/4oxdc1/rpython/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
At this point, it shouldn't be books or tutorials, it should be docs. Try to write your own software or game and use the documentation. Thats the best way. You learn so much when you're thrown into the wild!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
This looks really nice! Thank you for investing time and effort into creating something like that. I love the way you described the project and how the tutorial is written. One small tip though. Don't get me wrong, but "coc" may not be the most pleasantly sounding word since it sounds exactly like "cock." Maybe you should consider a different extension, e.g. .coco.
Does it produce Python code that runs on both Python 2 and 3? If yes, this is awesome! Writing code that's backward compatible with Python 2 is painful, and writing in Python 3 without having to worry about it would be fantastic. If this is the case, Coconut is a great tool just for that, even if you never use the functional features (which are also cool of course).
But the class isn't the statement `(a or not a)`, it (or, more accurately, an instance of it) would just be the value `a`. 
Yes! The compiled code is guaranteed to work the same on all major Python versions (2.6-2.7, 3.2-3.5).
I really love it! I will certainly be following it; for now I don't have something I want to tackle with it yet :)
Thanks!
You should definitely highlight that as a selling point. I have a project that I've been needing to backport to Python 2 for years. Boy do I hate backporting stuff. With Coconut, it seems, I can just run `coconut myproject` and get a fully 2&amp;3-compatible version. This is insane. I can't test it right now but definitely will give it a shot.
why no inheritance?
thank you
Actually it exists statically typed languages where the types are inferred and hence implicit ;)
Given that you only have three weeks to finish the contract, I would suggest choosing whichever you are most familiar with, and if you are familiar with neither, choose the one your employer is familiar with. In terms of webservers: both Django and Flask follow the WSGI standard, and I think most people combine uWSGI for dynamic content with a webserver for static assets. See for example http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html .
You're right. The explicitness is more of a side effect in python static typing, but nevertheless in this case you achieve more explicit code with static typing.
"But Python is not strongly typed"
On Apache yeah
We need to stop seeing types as only a way of avoiding bug at the cost of extra verbosity. In a language such as Haskell, Ocaml, Rust, the verbosity is limited (if any) because of type inference and the polymorphism gives us most of the flexibility of ducktyping without the limitations. But typing is also of way of reducing boilerplate by automatically writing most of the `__xxx__` methods (repr, equality, comparison, hashing, iteration) plus binary serialization, map, ... &gt; You can spend years working on the same project without ever hitting the point where you're hitting an unreasonable number of bugs that could be fixed by a static type system From my point of view, most of the bug I'm fixing in our C++ and Python codebase may have been avoided by an advanced type system. Yesterday it was a `None` / `nullptr` hidden somewhere, the day before it was a comparison between a `float` representing a distance and a `float` representing a squared distance. The day before that it was a refactoring where I renamed the wrong function.
You should have a look at Tryton (http://www.tryton.org/). It is a fork of TinyERP (a former name of Odoo aka OpenERP). The focus of Tryton is more on the framework aspect and on stability. I am using Tryton for about 8 years now and never regretted it. Especially if you have custom needs Tryton is a good choice.
Ok, I'll explain what each part here does: 1. Django/flask + your app: this is just a code, it doesn't do anything by being placed in some files. Something has to run it. 2. uwsgi or gunicorn: this is what runs your code. You tell it where your app is and how many processes you wish to run. It will listen to http on some port, translate this to API django/flask understands (called wsgi, but you don't need to know that, its all under the hood somewhere), and send back the response. It can do more things (uwsgi has plenty of features), but that's optional. Which one of those you'll use doesn't matter, and replacing one with another is trivial and doesn't affects other parts. Gunicorn is simpler and written in pure python, uwsgi has more features and is written in c. Pick any. There are other wsgi servers too. 3. Nginx. Since uwsgi/gunicorn handles http, its not absolutely necessary, but its good at many things, so people oftern use it: - if you have many application, nginx will act as a router (foo.example.com goes to localhost:3000, bar.example.com goes to localhost:3001, baz.example.com goes to somewhere.else:8080). - There are many things wsgi servers can do, but many sysadmins are familiar with nginx and already have it, so it may be more conveniet to set things like ssl termination, upload limits, "we are deploying now" page, etc. there.
There's also for v in data: i = data.index(v) # stuff goes here Which triples up by not only being unnecessary, but slow, and appearing to work most of the time but failing when data contains duplicate items.
Yeah that's slow cause index has a complexity `O(n)` where `n` is the length of `data`. Obviously it fails cause you're searching for the item and that's a semantically different thing.
Well, I can imagine in an english speaking country, "save the cocs for later" can have various reactions from your colleagues. Although I would find that very funny from a french perspective.
Imagine having to teach a comp sci class where you constantly have to tell students to open the appropriate "coc" and remind them to save their "cocs" during practicals. It'll be almost as bad as the time a lecturer forget the "o" in a variable named "count"...
If you haven't seen it I *highly* recommend checking out the web applications page in the Hitchhikers Guide to Python. It covers all your questions in depth with just enough details to get started. http://docs.python-guide.org/en/latest/scenarios/web/ 
You mean like [Coq](https://coq.inria.fr)?
Check out also [ERPNext](https://erpnext.com). [github](https://github.com/frappe/erpnext)
I'm using Komodo Edit, a balance with lightweight + functionality. For interpreter `bpython` is very useful to discover Python.
I would suggest mapping down your business processes correctly and how you would like to implement them inside an ERP is much better. I worked with OpenERP which is now known as odoo. It is pretty powerful and you can do pretty much most things you want to do with it I would recommend it as you spend more of your time in business logic and less of time in the actual UI/DB work. Also I would suggest investing more time and money into mapping down your business processes and you want them to work within your ERP. Either way good luck and have fun. 
Oops. Forgot to mention that. My user will be a developer. So the developer can write their own logic according to their scenario. Is creating an empty Python file the norm? Would it not be too vague?
/r/learnpython
Congratulations: this is quite an accomplishment, especially for an undergrad!
I was trying to think of hypothetical worse ones.. "I *defer* tabs" qualifies for me. I'm envisioning someone who writes entire functions, classes, or modules without any indentation, and only indents when they're done writing the whole thing. That would actually be a really impressive feat of concentration. It's just [OMG](http://i.imgur.com/QkBC77B.gif) levels of annoying.
https://www.youtube.com/watch?v=2Wl4ZX4-ui8
I am mystified about the voting behaviour, it seems to oscillate between 50% upvoted to 66% upvoted. I'm not unhappy, I'm just curious. May I ask - what's negative or contentious about my results?
Ha! In 3 weeks, for your first Python project? You are ambitious or naive...
Awesome. Thank you! :)
Are we not allowed to post questions here? This is not a basic question that you would have when "learning Python". 
`except`?
Just like they pronounce PDF when telling people how to save a .pdf file? *see oh sees* sounds just fine.
And now imagine trying to roll out Git to the British. Words change and people can get over it.
RemindMe! 3 weeks "That was easy!" 
I'm excited to look through this, but there's already one thing I'd like to see: sample code on the first page.
If you don't want to require users to run their whole app in Gevent to use grequests then the more traditional [requests-futures](https://github.com/ross/requests-futures) might be more convenient.
Would've be nice to read a blog post about your endeavor when you have put this project behind you. I am new in Django/Python development myself so I can't compare with Flask, but it sounds for me getting most (if not all) features you need in one framework (like Django) is exactly what you need considering the short time frame you got for delivery. Flask is very minimalistic.
 0 = n #destructuring assignment Uhh, what?
A little bit of a description would be nice. &gt;Then you can use this to set loud reminders with a delay from your main computer. Is all it says. So it basically is like an alarm clock? Are there any differences to a normal alarm clock (except I can set the time from a computer)?
Git was specifically named after the British usage of the word.
Came here to say just that. 
Is the piping that I see in the case studies a part of coconut? I use piping all the time in R in magrittr, but didn't know it was available in python. I mean this syntax: "hello" |&gt; print # prints "hello" Edit: I see from the documentation that it is!! That alone is a huge plus for me. Thanks /u/EvHub!
I Built Trigger-happy.eu to track the tech news so i'm able to create stuff automatically from service to service ;)
Good idea! For now, try the tutorial (http://coconut.readthedocs.io/en/master/HELP.html) and the documentation (http://coconut.readthedocs.io/en/master/DOCS.html) for code examples.
Pointing to two similar projects: - Mochi https://github.com/i2y/mochi (functional, pattern matching, message passing à la erlang, lisp macros, pipes, no for loop,…) - Dogelang https://pyos.github.io/dg/ more like Haskell syntax
Thanks!
I've done a lot of customization of OpenERP/Odoo at my current job, so I'll throw in my two cents. First, your question is slightly apples/oranges: Django is a web framework, Odoo is a *complete* but customizable ERP. Django is for building your own tools from scratch to model your current business practices. Odoo is for fitting your business practices into an existing ERP and customizing where necessary. Odoo, while being fairly flexible, is still very rigid in certain ways. The nice thing about Odoo is it's relatively free, assuming you want to spend the time figuring it out without paying someone to train you on it. So you can try it out first and see if your business processes can fit into it. Ours couldn't, but we have some very odd practices. Another thing to keep in mind is nationality. Odoo has some US-based accounting settings, but it's primarily used in places where VAT is a thing. If you're in the US, you might want to be extra careful about checking the accounting, if you're going to use that, and making sure it'll suit your needs. Good luck!
Dug through the COM interface of our dSpace and Matlab work benches to automate unit testing.
Thank you very much for your advice. A question for you, what might be, in your opinion, the main disadvantaged of using/developing openERP?
I actually never heard of it. Does it support French well?
1: Coconut has built-in IPython support. When you "pip install coconut" it will add a new IPython extension and a new IPython kernel. See: http://coconut.readthedocs.io/en/master/DOCS.html#ipython-jupyter-support 2: Coconut's new syntactic features should be general enough to use cleanly with any library you want. The analogous workflow in Coconut to what you're describing in R is something like this linearized_plane() |&gt; map$((xy) -&gt; vector(*xy)) |&gt; filter$((v) -&gt; abs(v) &lt;= 1) |&gt; map$(.unit) |&gt; map$(print) |&gt; consume where you take some iterator, apply a bunch of transformations to it using partial application (that's the $) combined with Coconut's optimized (much faster than vanilla Python for certain objects) iterator transformation functions (map, filter, consume, etc.).
PDF is a very complex format, and hard to generate. Why can't you just use HTML? Most browsers and operating system have a "print to PDF" feature.
Really great stuff, thanks!
We also have some instances (like the one with our ArcGIS License Manager and the one that hosts our web services) that need to be running all the time, so I use the instance tags to make sure that those ones don't get shut down. Check out Amazon's Python SDK, boto3. Super useful. 
Yes, the data starts as a PDF file. The django library looks promising. 
I've only heard it before "au vin".
If this works out for you, can you write a blogpost? I'd love to see this get more play in pydata. 
Legally, I'd stay the hell away from that. Attempting to collect EMR, which is what it sounds like you're trying to do, will send you to jail for a long time.
Are you using a web framework or just raw CGI? Most web frameworks will have ways to serve static files easily.
&gt; Print ("Hello World") print("Hello World")
sure i have it on pastebin [here](http://pastebin.com/59StVqD7)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Just raw cgi
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Then [this](http://bohdan-danishevsky.blogspot.ru/2013/11/cgi-python-serving-binary-file-from-web.html) is likely what you're looking for.
I appreciate the concern, but what I'm trying to do is authorized by our local dean, and the program would only be used to assist students in pulling data they are authorized to view for research projects. 
When you have a C library you can just use ctypes and call your functions directly from Python. No need to write wrappers. Just make sure to compile your sources into a shared library.
Can you post your code? If you have the python module installed for sublime then it should be displaying right along side your time of execution.
Define "full fledged"? Python isn't exactly a great language for game development, especially on mobile, due to performance concerns, but it is technically possible to use full OpenGL ES if you really want to. Also, /r/learnpython
As indicated by /u/guibou's example, a sum type adds cruft. It takes time and code to create and use the sum type. This reflects a deeper issue. Python puts a lot of trust in the programmer (e.g. that she won't make typos), and rewards her with minimal restrictions. This comes at the cost of useful compile-time errors. However, in *my* opinion, this loss can be largely mediated by linters, tab-completion (to prevent typos), and extensive unit tests.
If you want to build native apps for Android, you'll be better served by using the default Android libraries, and thus the default Android language - Java (or JVM languages like Kotlin or Scala). This matters a lot on mobile, because users expect a consistent user experience, and you can't really achieve that without either a) reimplementing all the default controls "to spec" (and keeping them up to date every time Google decides to redesign the platform) or b) finding a way to call out to Java from Python, which is incredibly complex - and slow to boot.
It isn't really all that interesting, so people aren't really voting one way or the other. Ok so these are the percentages of usage for some bankers in London. Great, and what of it? It's musty kinda ehh. Mildly interesting but not really surprising to anyone.
I guess its a better option. Thanks. :)
Pygame or pyglet
Cool!
/r/learnpython
I have to write this. What a great idea!
The type-checking is totally optional—it's just another way to do pattern-matching. As for the extra code—yes, the idea is to try to optimize as much away as possible. For now, one way to reduce the clutter is by compiling in package mode, which is enabled by default when compiling a folder, or can be manually enabled with the -p flag. In package mode, Coconut will put a lot of the boilerplate in a common `__coconut__.py` file instead of cluttering up everything else.
Actually, Coconut already supports a way to explicitly declare when you want to use destructuring / pattern-matching assignment. Just add `match` to the beginning. For example, match 0 = n or match vector(pts) = pts Edit: Thanks! As for an implicit itemgetter, currently there isn't one—although I like your suggestion of `.2`. Definitely worth an issue, might get added in the next version! The list of currently supported implicit partials can be found here: &lt;http://coconut.readthedocs.io/en/master/DOCS.html#implicit-partial-application&gt;.
&gt; ...using it to develop scalable microservices that connect our clients to the control plane through RESTful interfaces. Just lead off with this next time and skip the rest.
I've got a sublime script, that flips words that are separated by a comma. So if I want to switch arguments of a function, it's only one keystroke away. If you copy paste, you always have to care about the comma extra. Here is the code: import sublime, sublime_plugin class SwapperCommand(sublime_plugin.TextCommand): def run(self, edit): selections = self.view.sel() for selection in selections: selectionContent = self.view.substr(selection) swappedContent = self.swap(selectionContent) self.view.replace(edit, selection, swappedContent) self.view.end_edit(edit) def swap(self, string): parts = string.split(',') swapped = [parts[-1]] + parts[0:-1] joinedResult = ','.join(swapped) return joinedResult
- All valid Python 3 is valid Coconut, so Coconut is purely a Python extension. Mochi is a totally separate language. - Mochi code only runs on Python 3, while Coconut code runs on any major Python version, 2 or 3. - Mochi compiles to CPython bytecode, while Coconut compiles to Python. That means Coconut supports all Python implementations (e.g. PyPy, Jython, IronPython), not just CPython.
I've got a script that pings a traffic info feed, and if there's any traffic on my route home from work and Im about to leave from work it'll pop up a little alert telling me there's traffic on the way home.
I wrote a script that checks if my ISP DNS is up, then if Google DNS is up, then checks 4 of the biggest sites on the net for response. If any sites can't be reached, I log it. If all can't be reached, I log down. This runs on my router every minute. If the down minutes in a month exceed what I deem reasonable, I email myself a report of the down time and then call the ISP to complain.
thanks!
The PyDataLondon audience are predominantly not bankers/quants (they mainly go to the Python Finance meetup), speakers including Tescos, Sainsburys, Deliveroo, ProductMadness (online video games), academics, pharmacologists, various independents, ecommerce companies, lots and lots of stuff not related to banking. I think it is fairly representative of the breadth of the data science community in the UK.
You can also use curl ipinfo.io/ip This works with all keys in the returning json. To get your current city you could simply run curl ipinfo.io/city
Right - I didn't realise that Reddit adds random noise, that'd totally explain it. My bad. I figured the jiggling up and down was human-driven behaviour, hence my surprise (thanks). I'm also encouraged by the usage numbers, I frequently poll my attendees on our monthly meetups and consistently we're seeing folk upgrading and not downgrading.
Sorry if I'm being short sighted, but how did you find out there was a PayloadPlanter class?
&gt; To OP's question, Python isn't used as a "personal assistant". That's not an opinion, that's just a factually incorrect statement.
&gt;OS agnostic My new favourite term.
I made something similar, I'd be curious to see yours. Currently I have it setup to run on the desktop as a tray icon.
These.. these aren't opinions. You said "Python isn't used like this" in a thread full of examples of Python being used like this. *You* just don't use Python like this.
I like the way you think. I should put in a sleep() so it puts them on hold for 8-22 minutes randomly as well.
I will post it there. Sorry about that. 
Nice. How do you check if a content has changed or not from last check?
I keep a log file on the machine running the automation. (edit: The log file was created the first time I did the web scrape with all the policies and the data I needed from them) When it reads the log, it creates a dictionary using the policy numbers as key. If when scrapping a policy number is not in the dictionary keys from yesterday, then it adds its as a new policy. Otherwise it checks a combination of 3 or 4 string extracts from the scrape to the match policy number's value in the dictionary. The discrepancies are appended to list of each type so I can group them and then report them together. So all status changes show up together, address changes, and so forth.
RemindMe! 1 week
Is there a resource somewhere which tracks languages that compile to python? It would include these, and I guess stuff like Jinja which isn't strictly a scripting language, but it does use the Python AST to convert templates into Python code.
I guess you never used an API before.
 except SuspiciousException FTFY; Bare excepts are not zen!
Wsgi server can do logging too. But that's really all, redirects, permissions, headers, database connections and everything else belongs in the app or framework, not the server.
The joy of putting your code up public-like is that you can get help! Also, you get to show the world that you're working on something! Nobody ever gets it right the first time. This was my mistake, which is part of why my github history is sooooo sparse.
probably a cron on linux
I moved all my domains to google domains. I run a small server out of my house. Rather than continually try to remember my local IP address, I stuck this in a cron job: https://github.com/mistermocha/google-dnsupdate Google has an API for this that supposedly works with dyndns or ddclient, but they were too bulky, required installing tons of additional support libs, and ended up not working that well in the end anyway (https://support.google.com/domains/answer/6147083) so my little tool worked for me just fine.
I started that a few days ago ! https://gitlab.com/vindarel/languages-that-compile-to-python (then it's missing Coconuts) I added the Pixie lisp because it's built with RPython (but doesn't compile to python bytecode) https://github.com/pixie-lang/pixie
I had issues using multiprocessing with pyqt. There's a 'fork' of multiprocessing called multiprocess which I had some success with but it was still pretty tricky to get right. For my non-compuationally intensive tasks I simply use the built in threading from Qt (QThread) so that I can do things like loading large data sets without blocking the UI thread. I have not tried this yet with running heavy computational tasks, however.
That's awesome idea. But the important thing to note is even though the questions are repetitive, the responses are not. Each time the question is asked it generates bunch of fresh responses. That alone is worth repeating this once in a while. 
I use to work with someone that dos that, except they'd write it and never indent, granted that was in perl but it was still horrible!
Turtle is probably the easiest.
I actually do use task scheduler. Getting a python script to run from ts can be tricky. You don't reference the actual script in the Program/script box, you reference python.exe itself, and then enter the path to your script in the "Add arguments" box, and the folder where the script is located in the "Start in" box. Edit: Alternatively, you can also create a batch file that executes a python script and then call that from task scheduler.
Excellent, thanks! What's your criteria? Would Jinja be allowed (uses Python AST to compile) or disqualified (more like a library than a scripting language)?
**What's On Steam:** I'm trying to both a) keep up with and b) give a shout out to every game that pops up onto Steam. So I created What's On Steam: * **Website**: http://www.whatsonsteam.com/ * **Twitter**: https://twitter.com/WhatsOnSteam The utility scrapes the Steam Store using BeautifulSoup, and tweets using Tweepy. I find the website handy, because I can skim it periodically, and if the six-pack of screenshots looks interesting, I can dig deeper on the Steam Store page. The Twitter bot's handy because it just shoves everything into my feed. I'm also using matplotlib to create [histograms of games launched on Steam per day](https://twitter.com/dejobaan/status/744192463091425280), but I need to gather more data for it. It's all a WiP, but it's fun. I do love my Python. :)
Great idea! My friend and I did something similar for beer tap lists around town: [brewnotice.com](https://brewnotice.com)
What is a social justice warrior lol?
Which router do you have? 
Thank you!
Is it on Github? Great idea! We actually have a few users who are quite forgetful and this may be a good idea!
I've only used Selenium for testing but in the back of my mind I knew it had to have evil uses 
It runs off of one of the server boxes we have. Eventually we're planning on moving up to another of our AWS instances that is always on.
main difference is that this yells at you. You are right though, the description is not super clear.
you've just defined one of the many features available in [AutoMod](https://www.reddit.com/r/AutoModerator/)
Cron? That's the way pretty much all repetitive tasks are scheduled. 
&gt;If you don't want to read something, it's easier just to not read it than to give someone else advice on how to write it. Especially when it's bad advice. One could say the same about commenting on things you don't like, especially when it's a bad comment. 
Lawyer here. Here are a few things I've done using python: * Built a large scale internal document review platform that can handle about 20m+ pages of documents without breaking a sweat. * Small robust app to keep track of peculiarities among 50-states law, basically a compare and contrast display system. * A verdict search/tracking database * This is not for work, but for home: I really liked episodecalendar.com but I disliked how they limited you to tracking only 20 tv shows. So I built my own script that tracks as many shows as I want.
&gt; What is a social justice warrior lol? Three social justice warriors walk into a bar. lol.
I use it to patch engineering software we use which is better than what we had but still quite buggy and lacking features we needed (and now have).
Can you share it?
We have a fairly modular product offering, we had a growing backlog of missing images to create as options were added or revised, so I wrote a python script in Blender that assembles every possible product combination, in a few black/white color combinations (from which other colors are later produced), and renders them from multiple angles. Today that makes about 54,000 renders, then other scripts recolor and resize them for our website. The folder has close to a million images in all, though that includes a lot of old or intermediate stuff too. I didn't intend for that many. It crept up over the years.
Thank you for bein the guy that also lists the libraries. Python is all about the libraries
Why did you delete your previous replies?
All it does is check public IP from a few different places (icanhazip, whatismyip, and api.ipify.org) to account for one of those services going down and writes the result to a file. It's run every minute with cron. My desktop is on linux using AwesomeWM so the widget is built with lua. That more or less just reads the file and applies formatting. I used to do this all within lua/awesome with fancy timers and stuff but I was seeing some weird behavior when one of the above sites was unreachable. The entire WM would lock up. Rather than take the time to fix it properly, I was lazy and just rewrote it with python. Pretty hacky but it works.. EDIT: I have static IPs at the office too so it makes it really easy to see what I'm on at any given time.
Or for a Python-based method: pip install httpie http get ipinfo.io/city
I can tell you, you do make a difference. edit: my flair made this seem insincere, but I meant it.
Python3 has been in Fedora for a long time. If you want python3 on CentOS/RHEL &lt;= 7 (since python 3 will be in 8) then you could install it via https://www.softwarecollections.org/en/scls/?search=python . 
Did you try to convince IT to let you install the Anaconda distribution ? So you don't need pip anymore for mathematical modules : https://docs.continuum.io/anaconda/pkg-docs Or you can host your very own IPython notebook on a VPS. Prices generally start at $5/mo and you have full control.
If IT is restricting what can be installed, it may be best to give them the list of dependencies you need and let IT worry about how to install all of them. Perhaps you could give them a requirements.txt file, and then they could install pip, pip install the requirements, and then remove pip.
Bring it up with your boss and say it's stopping you from working.
Thanks. I'm hoping this will work as a compromise. 
This sounds awesome, but I seriously could not understand what you are talking about. Can you explain what you are doing? :)
I'm pulling your chain :/ I was saying that Salon.com was written by a python script made to mimic social justice memes.
Looks difficult, but I'll look into it. Thanks.
&gt; PyPy This is pretty exciting stuff.
My first instinct was to fight too, but I'm trying to be diplomatic.
Sweet. Thank you
It is certainly bad coding/design, but not all coders were born equal. MyPy makes it possible to point to a function written by one of the these less equal and say: 'you shouldn't do it like this because *the compiler* gives an error' This has saved me many a nerve.
They tag/categorize my email via notmuch and the corresponding notmuch python library
Assuming you mean without conda (the package manager of Anaconda), no: conda is an integral part of Anaconda. If you want to go guerilla, Anaconda can be installed without needing admin access. But if IT is that kind of paranoid, they may have monitoring software, and even if they don't, if you're found with something unapproved installed, you might be in trouble. Cloud services might be an option if you're allowed to get your data to them, but again, your company may well say that the data you're working on must stay on their computers.
I wrote a Twitter bot that scrapes all popular words from Urban Dictionary and tweets them periodically in the phrase "Make &lt;word&gt; Great Again!" It's usually stupid, sometimes funny, often offensive and occasionally racist. Just like the real thing. https://www.twitter.com/makeshitgreat
Please pardon my gloating, but I just got beer on tap at work and at home this week. (It's the same beer). :D
Install them in a library, add that library to your path. On your desktop: $ mkdir lib $ pip install &lt;package&gt; -t lib Copy the lib dir to where you want it used. Then, in that Python console: &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.path.append('&lt;path-to-lib&gt;') Should work for anything pure Python. If it's a c-based library, it gets a bit more complex. 
No, it's not really common. Unless you are re-using it somewhere or distributing it I've not seen someone install it in site-packages before
Kinda [like this](https://youtu.be/S20XMQyvANY) I suspect. (excellent talk on how the millions of Panama papers were analyzed)
Check out the [Kivy gallery](https://kivy.org/#gallery) for examples of shipped games.
I worked in an organization that disallowed external package management tools like pip/npm I'd recommend two methods: * Requesting a distro of python like Anaconda that will give you most everything you need for data analysis to be installed locally on your machine * Request the packages you want from your IT Dept to add to a shared python installation they can manage themselves. -- This is what my employer did. They ran every module we wanted through a series of security checks. If it passed; we got the module.
+1 more time to reddit
Yeeeah indeed, I'm myself interested here into the programming languages compatible with python, but the list is short, so I included something else (Pixie). (you know that awesome list right ? https://github.com/vinta/awesome-python) But because the list is short I will expand it to a comparison with code snippets, that would have a real value.
&gt; This is not for work, but for home: I really liked episodecalendar.com but I disliked how they limited you to tracking only 20 tv shows. So I built my own script that tracks as many shows as I want. Cool idea, what data source are you using for that if you don't mind?
[Classic](https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot)!
Actually, I'd run this as an AWS Lambda task. You can schedule the task to run daily, use the Python AWS SDK, and then you don't have to worry about what server it's on.
Haha, yea I had a friend show me a blog of how to use Python to install pip. I don't plan on sharing that with IT.
I'm working on setting up a retail shop and I'm writing up python scripts to convert catalogs in different excel/csv formats to a format we made for our shop.
I wrote whats basically a plugin for a dashboard we built in our SIEM that works basically as a 1 click ticket submission. When we get an alert and verify the infection the analyst working the alert selects from a list of remediation tasks (remove file, re-image host, etc..) and it grabs the relevant info from the alert (username, hostname, ip, location, etc) and sends the ticket to our helpdesk. Currently working on whats basically another plugin to eliminate the number of tickets we send to the helpdesk. This one works with the API for one of our monitoring tools and will go and remove a specified file/directory from a remote machine. Right now in its "beta" version its a standalone script where the analyst specifies the host and file/dir and wait for the host to be online but eventually we will be able to click a button in the dashboard and it will remove the file if its online or add it to a queue that will periodically check for online status and run once its online. I also wrote a file inventory script that reads through a few different network shares we have for certain files and creates a csv with the filename, filepath, size of each file, and total size of directories containing specific sets of files. I'm also kind of developing an all-in-1 incident response flask app that works with APIs for a few different tools we use. I can do things like query virus total for scores on urls/hashes, check the prevalence of a (md5/sha256) hash on our network, show hosts with that file and the path on that machine and query OpenDNS for their analytics on given URLs. Then there's the script I wrote that basically runs though a list of hosts from a CSV to deploy the agents for a few of our tools using subprocess to run a powershell script. This script mainly does the looping in python since I don't know powershell and the guy who wrote it only set it up to run against 1 host at a time before he left. It could be done entirely in powershell but at the time it was written I was still learning python and didn't want to dive into another language just yet.
I used thetvdb.com. They have [an API.](http://thetvdb.com/wiki/index.php?title=Programmers_API)
&gt; like this basically
how so? please correct me if i'm wrong, but doesnt he say we have to follow our morals and let us guide by the categorical imperative? so if swingking8 argues that having free internet instead of arbitrarily restricted and priced ones could be an universal law where since no harm was done no one would be worse off, then he should be in the clear! even worse, seeing that disregarding the fee does no harm one has to assume that enforcing the fee then does harm, and of course it does, monetarily on everyone but comcast. so basically kant would think it's swingking8's duty to disregard this blatent unjustice and that comcast is evil and wrong.
Thanks! And great idea, I'll look into that!
download the source code of a library and run python setup.py install.
I am assuming that you are talking about setting the build to be python in ST3 (Tools &gt; Build System &gt; Python), so when you type ctrl+b it will run. My guess is that you didn't set up the entry point for your code, as an example I saved this as sample.py import time class Things(): def __init__(self, i): self.i = i def print_i(self): for j in range(self.i): print('hiya') time.sleep(1) #this is the entry point for the build if __name__ == '__main__': Things(3).print_i() Then I set the build system and hit ctrl+b and get the console: hiya hiya hiya [Finished in 3.1s] The build system is simply invoking the script like cwd&gt;python sample.py Hope this helps. I have not played with this much but it looks like it is easy enough to set up [build system arguments](http://stackoverflow.com/questions/16618240/how-to-add-parameters-to-a-built-file-in-sublime-text-3-before-execution) or you could always take raw_input or something. As always, good luck!
RemindMe! 3 days
PM_ME_YOUR_CODE_DUDE
I'd also like to see more about the daily dashboard
i might put this on a raspberrypi......
Sure, that's like returning an `__iter__` in python, which is a different case (sans your dictionary option). I get returning a "generic" type for a `list`, but not returning a `dict` in place (in Python). Your example seems more java-esque, in which case I believe that Maps (similar to Python dicts) implement the collection interface (IIRC). However you wouldn't return an `int` verses a `dict` depending on inputs, which is much more to my intended point. (I may have not communicated that clearly)
Is it the one that's just "XFINITY" If so i might put this on a raspberrypi......
Think you could get it to automatically download monthly statements? I currently manually log into every financial website and download my monthly statements, but I'd love a way to automate this using LastPass... Also, I didn't know LastPass had an API ---- how secure is that?
As someone who just finished a semester project with an Arduino and a Hall Effect Sensor, this is brilliant *but* the sensor would have to be installed in-line with either the water intake pipe or underneath the drip tip where the coffee filters into the pot.....our issue was there wasn't enough pressure to get the wheel to spin fast enough to register a pulse, so this isn't that trivial. For reference, [here](https://www.amazon.com/1-60L-Effect-Sensor-Counter-FS300A/dp/B00HR6BTYQ/ref=sr_1_11?ie=UTF8&amp;qid=1466470282&amp;sr=8-11&amp;keywords=flow+meter) is the sensor I used. I can link the Python code if anyone cares.
Platform-agnosticism is an ancient and delicate discipline. Like any ancient and delicate discipline, it's mostly produced atrocities in its pursuit of glory. Like the JVM.
I have a script that checks the SLAs on tickets and sends out a 15 min warning using IFTTT I first set it up just for my own tickets but have now rolled it out to everyone. 
What are the actual restrictions you have? Is it sudo access? Or are you not allowed to download any files? An anaconda installation does not require any administratory rights. It also includes pip so you can pip install packages without getting permission.
I run a ClearOS 7.2 box
Instead of strike through why not just delete? 
When we investigate bugs/errors, we frequently have to download the entire session log file (if it happened &gt; 1 day ago). Wrote a Python script I frequently use to run through the log file and get rid of everything but the logs associated with the session I'm investigating to weed out the noise.
Great idea-might start doing this since I sit down myself every month and go over all my monthly charges.
where did he tell you to post it (cos i should prob post my problem there too)?
Given that such a script would only be calling one call center there must be some way to find out and handle it that way
Coconut is my attempt to fix the mistakes I thought I made with Rabbit, namely: - Coconut is compiled, while Rabbit is interpreted, making Coconut much faster - Coconut is an extension to Python, while Rabbit is a replacement, making Coconut much easier to use
If your log file gets big enough and you ever need to delete any records you will want a database. I had a similar log file for an automation script and it became a pain to open that log file and delete records every time there was a mistake that needed fixing. I now have like 3 SQL statements and a SQLite database. I use SQLite browser to browse the database if I really need to. 
I've played around with both of these and while interesting, I find Coconut to be superior. You can write standard Python in Coconut which is an advantage over Mochi. Pattern matching and explicit partial application is an advantage over Dogelang
I don't objector his collecting the data. I'm merely answering the question he asked. Why is it not being up voted? "Because it isn't up vote worthy."
I did this once. Holy charges. AWS was actually really cool about it. We are not alone!
Totally automated my data infrastructure with a combination of Python and Zapier. Python scripts hit our CRM and other data sources every 5 minutes, processes the data, and drops it into a MySQL database. Zapier also grabs some data from apps I'm not interested in managing the API calls. Events within the database manage some of the ETL. 
/r/learnpython
&gt; https://docs.python.org/3/library/sched.html#sched.scheduler.enterabs I setup a daemon just for this
PM_ME_YOUR_DUDE_CODE
/r/learnpython
is there a reason why you need IT to install pip? assuming you are on linux: download https://bootstrap.pypa.io/get-pip.py python get-pip.py --user pip PATH=~/.local/bin:${PATH} pip install --user ipython numpy ... windows and mac should be equivalent. disclaimer: * "--user installs for pip itself, should not be considered to be fully tested or endorsed", but i haven't had any problems (see https://pip.pypa.io/en/latest/installing/#id10) 
if you're on windows just install the files to a thumbdrive and then copy the contents to your drive that's how I did it for years
&gt;I have an old all-in-one that runs a browser in kiosk mode and displays the webpage with the weather, news, and scraped data what did you use flask or django or other framework?
There is a library for that. https://pypi.python.org/pypi/pyttsx
Arduino code is C-based, and we had two programs: one on the Arduino to actually count the pulses, and one in Python to take the output from the Arduino and send it to the database, which was eventually displayed on our website/mobile app (we were doing a smart home utilities project)
Could you describe the document review platform a little more? What type of documents does your platform parse? What libraries are you using?
A daily e-mail sounds annoying...
I should have written a script like this when I was in France last summer. My airbnb host gave out a login to something similar to xfinitywifi but I had to manually reset the connection. All. The. Time. It was traumatic but the wine helped.
Which beer?
I work for a gold mine and get a fixed bonus if I meet certain gold production targets. I get daily reports of what ore is available and where in the form of excel reports. I use xlwings to get data into pandas/scipy where I do an optimization using scipy.optimize. It works out what I need to mine and put into the processing plant JUST enough to get my bonuses for month. It leaves the rest for next month. I also use xlwings to output excel reports to tell excavator drivers where to dig and where truck drivers need to dump their ore/waste. Eg. If I have lots of high grade ore, I workout how to feed JUST enough to meet target and save the rest for next month. I also get a bonus for keeping the processing plant full so I put just enough good stuff in to meet gold target and crap stuff to make processing numbers. So every month it looks like I am just BARELY making targets. The last guy just put in high grade ores into the processing plant and always stressed where he was gonna find high grade ore to get his bonus. Some months he didn't get a bonus. 3 years into the job, I've only failed to get bonus a handful of times - mostly was when I was starting out and figuring out how to game the incentives structure.
/r/learnpython
Never heard of it looks good. * [Taurus Qt Designer tutorial](http://www.taurus-scada.org/en/stable/devel/designer_tutorial.html) http://www.taurus-scada.org/en/stable/index.html
In haskell, there is no literal for collection other than `[]` (linked list), so we usually convert list literals to other collection using `fromList`. That function takes a list and returns a collection with a different type depending on the context. There is also the `minBound` function (or really, a value) which is polymorphic too and depends on the context. It returns the minimum value of an `Bounded` type. For example 0 for unsigned, or `As` for a type representing `Card`. But that being said, I agree that having a return type based on value is dangerous. What I'm describing is a return type based on type context, so actually we can see this as many different functions where the overloaded one is taken at compile time based on the type context.
No need to clean up the code just for sale of public. We all write shitty looking code. As long as it works, it's good to go
[This happens to me too much](https://xkcd.com/1319/)
[Image](http://imgs.xkcd.com/comics/automation.png) [Mobile](https://m.xkcd.com/1319/) **Title:** Automation **Title-text:** 'Automating' comes from the roots 'auto\-' meaning 'self\-', and 'mating', meaning 'screwing'\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1319#Explanation) **Stats:** This comic has been referenced 346 times, representing 0.2998% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d4hozdd)
RemindMe! 5 days 
How so? They can change it so that it breaks autosignin but it will be fixed in a blink of an eye 
RemindMe! 3 days
You might be able to turn this into a product for a company like rio tinto.
I like it. Good job. 
Your support is (somewhat) important to us. Please stay on the line...
Math and data processing. I have to input the data anyway, so that can't be automated. But the math and data checks? That's a computer job. It's nice to hit 'enter' and have a 30m job done in 3 seconds.
RemindMe! 1 week
Please share!
I can't even share what mine does, but it fetches a million records every day from 7 websites, it used to take 7-8 day but with clever techniques I can get past the rate limits and now, every cron script starts at 7:00 and ends at 11:00. Just three hours. 
You can plot vlines and hlines in whatever style you like, or a point at 0,0 if that's what you want.
Sort of my thoughts too. I've used it in the very limited QA I was shoehorned into doing, but immediately saw potential for both practical laziness and evil. I'm using Python/Selenium to automate VoIP work, but also to scrape books from a certain website which gives you a free 30-day account, but there's no way I can read (and retain) the technical books I need in 30 days.
Not even remotely safe: lparen = len.__doc__[3] rparen = len.__doc__[10] exec '__import__' + lparen + '"os"' + rparen + '.system' + lparen + '"bad-command"' + rparen That depends on Python 2.x's exec statement, but I'm sure you could find something for Python 3.x. There is *NO* safe way to sandbox code with `eval()` and CPython. You need a specially modified interpreter to do that. 
difficult, since those are performance targets. meaning if the average time per call (in the company) is 3:10 minutes, the target will be set at 3. if they consistently beat that they will increase the target to 2:50 or something. so the only way to not hurt the grunts is to know that time and hit it fairly close. this way we neither screw them nor their statistics and dont interfere.
This is all working under the assumption that Comcast doesn't need revenue to operate, which is shortsighted.
hmm okay. Point taken though
I did love the talk on machete debugging. Super useful. Also, I did like the lightning talk about that library, compromise I think it was called.
dude, I loved your lightning talk, it was hilarious!
RemindMe! 1 week
doctors and teachers have drastically limited control over when they work, and there is significant logistical and social pressure to change jobs infrequently, if ever. Particularly as a teacher, you're pretty much stuck for a year no matter what. As a doctor if you walk out on a job people can literally die. Meanwhile if you hit 2 years as a SWE a lot of companies pretty much expect you to bail, and many/most companies will generally not hold it against you if you leave fairly suddenly. As a software engineer if you apply for a job with 5 different companies in 5 years on your resume, you might not even get asked about it in interviews as long as your title/comp grew across those 5. People tend to understand that it's the easiest way to move up. Obviously as you grow more senior there will be an expectation that you stay in one place for longer, and depending on your specialty that may vary, but it's still generally true. Compare that to the scrutiny a doctor or primary school teacher would receive if they had changed jobs 5 times in 5 years. Our negotiating power comes from our ability to trip and fall into another job at any time. The other problem is that the people who would benefit from a SWE union are the least competent SWEs. The good ones just change jobs until they establish themselves at one that has interesting problems, good pay, and a suitable life-work balance. Why would they want to join a union?
Better fit for /r/programming, probably.
This question is better suited to /r/learnpython (you can see this info in the right sidebar). To give you a quick tip go get you on your way: you aren't currently saving the previously entered characters anywhere.
I am a member of one(in Denmark) so I am quite sure that there is at least one... https://www.prosa.dk/in-english/
Make sure the first words are, "I am mute, and use this speech synthesiser to speak." That way they'll be terrified of hanging up on someone with a disability, that's real bad PR.
I would use it for determining which slot machines in my assigned section of the casino are due for cleaning/preventative maintenance, but I don't have direct database access. We're each assigned a section of 30 or so machines, by location. Second-party application's reports only support searching by machine number or location section, both of which can change. Would be nice to automatically correct for that, as machines are moved or converted. E.g. Section D-12 is currently machines 71350-71362, previously machines 5420-5432, over in section C-14. Right now I could search for maintenance code 200 (level 3 PM) for sections D-02 thru D-20 or for a particular machine number. I'd like to be able to go back through a machine's history, based on its current ID, but I can't without running multiple reports and collating results in Excel. Which would take way too long with the shitty software we have to use.
/r/learnpython
/r/learnpython
Unions are for staid old industries in which skills do not change. Imagine being forced to hire a Union developer back in 2004, and then still having them on your payroll because the Union wont let you replace them, even though the conditions and requirements you anticipated back then no longer apply. If your goal was to send tech jobs overseas, reducing the flexibility and increasing the cost of the local work force is exactly what you'd do.
Yeah nice catch, I thought it was 3 hours all this time :/
Just looks like /r/gitgud 
I am sure you understood what it does, it just sorts the list based data on the second character(character with index 1) in each element of the list. I hope this will explain how it did this: The sorted method in python lets you specify the comparison key from each list element. You can define this comparison key as a function and pass it on to the key parameter in your sorted function call. So in your example, the function definition is lambda tup: tup[1]. lambda is just a fancy way of saying function. So read this as a function that gets a parameter tup will return the element with index 1, meaning that the key of each element of the list data is the second character of that element. Each element of the list data will replace the tup when it tries to sort the entire list. Makes sense?
Talk to your company's legal dept, and pr dept, you may be able to contribute to the open source community.
&gt; there aren't really situations when you can only use tabs. Oh ho ho. You have never dealt with the fuckup that are makefiles. They have to use tabs, and fail with cryptic messages if you don't.
I don't think so. The way understand it, the categorical imperative means that if something is wrong, *it is always wrong* - regardless of the details surrounding when and how you do it. Hence the famous example of lying still being disallowed when a nazi comes to your door asking if you're harboring jews. So I doubt Kant would be ok with him doing this individually and frown upon it on aggregate. Unless you're referring to something other than the categorical imperative, which I'd be interested in?
This is what I'm saying: there are no costs in providing this service. The charge is an attempt for extra monetisation of down time. the budget to provide market presence is marketing, that be about 3 billion for 2015. Most of those hotspots are on peoples home routers. that means if you are a customer of comcast you will be provided (with installation fee obviously) with a xfinity router which provides you with your xfinity home network but it also has the capability to host xfinity free wifi if comcast programs it to do that. The artificial limitations of ones internet connection together with the selling of those now unused capacities are the immoral part of this transaction.
Well, with python-docx you have access to the document. To search through a file, you have to implement the search yourself on top of that. I'm pretty sure this is still better than having to do the same thing with pdf files.
In [livescript](http://livescript.net), we can write functions with one argument very easily: foo -&gt; print it "it" is recognized as the argument. We could rewrite the line like this: return self.pts |&gt; map$( -&gt; it**2) |&gt; sum |&gt; ( -&gt; it**0.5) I really like it, hope you'll think about it :)
FYI I quite enhanced the list with language features and another language ! (the predecessor of Coconut)
https://www.reddit.com/r/technology/comments/43fi39/i_set_up_my_raspberry_pi_to_automatically_tweet/
Mochi has real pipes, that we can write on new lines, whereas in Coconut (and Dg) they must be on the same line. Mochi: range(1, 31) |&gt; map(fizzbuzz) |&gt; pvector() |&gt; print() (Also Mochi has lisp-like macros and actor-style programming.)
I agree :/ not sure how to do. Also I'd like a table of contents, colors, boxes side by side… maybe time to write a little static website and publish it with gitlab-pages but that's a bit more work. (there's also the awesome-python website http://awesome-python.com/ , might worth using)
I use python-docx for something similiar. You can loop through blocks using code from [BlockItemContainer](https://github.com/python-openxml/python-docx/issues/40). From there it's a matter of matching the extracted text against your keywords.
Complete with an [RSS feed.](http://www.whatsonsteam.com/feed.rss) Nice!
What do stack traces look like?
At Space Dust Studios (video game studio) we use our own system tray Python script called Beans that automates common actions for us, and provides useful shortcuts and scripts for repetitive operations. He's come a long way since we first wrote him, and he's saved us all countless evenings waiting around for code to compile, data to sync over the wire, rebuilding assets and so on. We've made him work with Unity and Unreal Engine projects, and he can also generate final master builds for Steam, PS4 and Xbox One. See the desktop build helper section here for more info: http://blog.spaceduststudios.com/tools-and-processes-for-remote-game-development-part-2-collaboration/
wot?
Because `union`s are for C programmers. 
Yes, that is right. Thank you.
Thanks, I'll look into that. 
/r/learnpython
Is it actually about % of calls under target time or is it your average time vs target? 
Can't you get in legal trouble for publishing software like that? 
We're more disposable than other professions 
One of the professions most in danger of automation taking over as well.
Sounds great!
This. Been studying machine learning for a few years, I don't think my coworkers really understand the possibility sometimes, were a stone skip away from being automatic. At least on some of the more mundane sides of programming like application dev
If you're trying to distribute an application for Windows, have a look at [Pynsist](http://pynsist.readthedocs.io/en/latest/). I haven't tried it with Taurus, but it works a bit differently from freeze tools like cx_Freeze and PyInstaller, so maybe it will avoid the issues you're having.
While i am not suggesting that eval() can actually be made safe, i think your code would not work, as it is actually 3 statements, where eval will only take expressions (i.e. assigning a value to a variable is a syntax error in eval()). Your example code needs to be run with `exec` to work. 
How does it work?
&gt; Our negotiating power comes from our ability to trip and fall into another job at any time. I am definitely looking forward to using this phrase in the near future.
The Application Developers Alliance is the closest to a "programmers union" that I can think of. You then have the more serious/established organizations like IEEE Computer Society and ACM, which is for computer professionals in general but do have specific communities around Software Engineering. You'd also find equivalent, regional organizations like the BCS in the UK. But IEEE Computer Society and the like are still not "programmers unions". Programming is a tiny part of Software Engineering, and Software Engineering is fundamentally part of Computer Science. Those organizations work at the CS level. To answer your second question, I don't think it makes sense to have a union without regulation (e.g., who can call themselves "Software Engineer"?). And I, as a developer who may soon be a licensed engineer, I don't see why we'd want to regulate our profession -- Except for mission-critical, software-intensive systems (e.g., pacemakers, aircraft).
Same in Sweden, many software engineers are organized by [Sveriges Ingenjörer](http://www.sverigesingenjorer.se/).
I wish I had gold for you, my friend. Your answer is a masterpiece
Can you elaborate on that. I'm pretty certain that automation favors programmers (famous last words, right?). 
&gt; I'll clean up my code and make it OS agnostic, then I'll put it up I'd just like to say that this is a recipe for never posting any code. You're more of a developer than you think you are. I've been there, I get it... it sucks to put out something you're not proud of.... but really the chances that this is worth of the polish you want to put into it are low. Better to publish it, and polish later. If it's worth polishing, someone may even help you by sending you a PR. Just gist it on github. You can always update it later. 
The more of your work your boss's computer can do, the less of you your boss needs. naught_me has a much better answer.
I disagree with pretty much everything you're saying here. Do you regularly use a language with a real type system? I.e. Scala or better?
Happy for you but man, "REST frameworks" in Python are this generation's "web framework", i.e. there are now so many, it's difficult to know what one should use and why. 
And engineers.
This site is an excellent hack. I wouldn't follow the twitter feed because it would be a lot of crap but if you created a twitter bot that only tweeted the ones that passed a certain threshold like the highest rated one per day or something I would. Nice work!
WinPython is a standalone, self contained, portable Python distribution for Windows. It includes everything you've listed plus pip. You should be able to use it under even the most draconian IT policies.
I've wondered this a few times myself and I keep coming to a lack of value proposition on all sides. Why would a software engineer join the union? Why would a company hire union employees? Some sort of guild might make sense if there were guild organized apprenticeships and internships but that's a bit different.
If they post the code, it can be ported to js
What advantages or value adds does this give over Flask? I do like the auto doc, but that's easily done via Sphinx. 
I think all of this is already built in in form of Pyramid web framework. Mature and battle tested.
Does anyone actually think this 
The fact that it includes pip means that IT will not install it. I'll take a look at it, though.
If only tech companies embraced worker control!
i’m in a scientific institute doing machine learning, and you’re adorable. the stuff deep learning and other ML can do is nice if you want to learn and reproduce complex patterns, but this is such a far cry from programming that i really wonder what brought you to that conclusion
Worker control as in Co-Op or Employee owned, or do you mean contract worker? I'm a huge fan of the former I feel the latter is barely distinguishable from working at-will.
I took a quick pass through and could not find this. You can change your entire Pycharm scheme which will change this color, but changes the color for the entire skin. For that go to File &gt; Settings &gt; Editor &gt; Colors &amp; Fonts (I use Dracula). You can change all of the code color/highlighting/formatting by language and feature within here but I don't see anywhere for the code completion dialog box.
/u/has2k1, please deliver. I'm interested too.
Please read "Understanding Computers and Cognition" by Winnograd and Flores.
&gt; but the engineer who drew the bode diagram is now out of a job and looking to take someone else's That's the engineer's fault for not continuing his education. I work with those idiots all the time and it's frustrating as hell. I'll come up with a new Python script or way of doing something and they'll refuse to use it because "Eh, this doesn't take that long". When I was the young guy in an old group of engineers I got that constantly, I couldn't wait to retire. I left that job and I'm now the 'old guy' in a younger group. The younger group all loves my Python because in their words "I hate doing that shit every day". If your job is 'losing value' while you work it means that you're not doing anything to add value to it. Any time I read the sky is falling stories on Slashdot about "There are no jobs everything is outsourced" I laugh because I know, personally, exactly who those idiots are. They're the ones that only knew how to draw bode diagrams. They said "There's no way a computer will be smart enough to do all this" and kept on drawing Bode diagrams. At large companies they went quickly when Matlab came on the scene. I'm sure there's still one guy drawing diagrams by hand in a closet in some tiny shop somewhere in the US but the day is coming where his boss is going to say "Hey, that new intern just made a bode diagram python script that does your job. Do you have any other relevant skills?". And that guy is going to sit on the internet and complain about H1Bs and 'low skilled' workers taking 'high skilled' jobs. &gt; Programming won't disappear as a profession for sure, but will the lot of you be willing to endure the shit the games industry does? Lot of us? I'm a Mechanical Engineer. "Programming" is a tool I use on my job it's not my job itself. It's just a specialized hammer. Personally when I read a resume and it doesn't list a programming language it's like reading a resume that says "Can't type".
I know the extra complexity of adding a database is minimal, but I just didn't find the need for it. Especially with such a fragile project such as web scraping, were changes to the website could easily break the whole thing down. Currently the log file is pretty small (50KB) and I just rewrite the whole thing each time the process runs.
Worker Co-ops for sure. It's the only way to institutionalize worker interest.
So you're in the "It can't happen to me camp", no hate and I truly do hope you chose correctly. 
Right now, a discontinued session mead from Rogue and a black lager of my own craft. 
I have already posted the first draft of the list here in Python subreddit 5 days ago. I am updating the post so that it might reach people who did not see it first.
But that is a stenographer's union, not a programmer's one.
&gt; So you're in the "It can't happen to me camp" Oh hell no. I'm in the "I'm treading water trying to keep my neck above the waterline". *Every* job is replaceable. Even the bosses job is going to be better done by a neural network assigning tasks based on who actually does better work. However I realized that a long time ago. I also hate doing something twice. Boss asks me for a report based on data. My co-workers would make the report every time. And in 10 years they'd still be doing the report. I make a script to do the report. In 10 years the script is still doing the report and I'm off working on 2026's problems. The times I've got to talk to the people that are 'high skilled' what their skills are they're very highly skilled for 1960 not 2016. Blacksmithing is no longer a highly skilled trade. People don't apprentice for 20 years before learning to make their own swords. Society has moved on. I know it can happen to me. I've seen it happen to parts of my jobs (because I got lazy in some of my technical skills). I spent a week doing nothing but learning Python and now have Python writing my old matlab scripts for me. I think some of my co-workers think I do builds by hand. Programming, Python is not a job itself. It's a tool to get another job done. The money comes in knowing where those jobs are. I could honestly replace half of my co-workers with masters and PHDs with a high school dropout that knows Python very well. However that job isn't making Django apps or 99.9% of what I see posted on /r/Python. It's stuff like migrating our [rtplib2 to the new dSpace XIL .NET API](http://www.dspace.com/support/patches/TASC/PAPI/RTPLIB2_XIL_API_PythonNET_MigrationGuide.pdf).
&gt; I like working 80 hour weeks, it shows how dedicated I am. Sorry.
I look at lots of weather data! :) I ended up turning it into an app as well: www.skyfireapp.com
If I had a nickel every time someone asked why I didn't add an SQL database to a simple hack, which would have been TOTALLY overkill compared to just putting the data in a file ... I'd be able to retire early. 
Collective bargaining, guaranteed overtime pay and vacation days, for example. No more "sprint week" every week. Etc.
As others in here have said, some of the more progressive countries do have unions for professions like programming. In the US (where I presume OP is), unions are decreasing in popularity and prominence generally speaking for lots of reasons that I'm not interested in starting a flame war over. Back in the 90s, though, there was talk of starting a tech workers union that would have included more than just programmers. However, tech workers being who they are, there wasn't much interest in this and there was very little need seen for it. I think the industry could really benefit from some of the components of the traditional trades, though. Apprenticeships being one of the major things that I think could really improve the quality of employee and the products they produce. I also think if a union were proposed, it would have to offer these benefits among many more to be attractive to most of us. Collective bargaining doesn't really mean much in the industry since every shop can claim their requirements are slightly different, and therefore don't count toward the industry as a whole. _shrug_.
Convert to text, then stick documents into elasticsearch.
Just use vim instead of emacs. * flame has been planted *
&gt;The times I've got to talk to the people that are 'high skilled' what their skills are they're very highly skilled for 1960 not 2016. I don't quite get where you're going here. You sound intelligent so I don't believe it's "everyone except me is a dummy", but I can't quite figure out where you want this to point. I've never worked a steel mill, but I do imagine there's more to printing out an I-beam for a tower than for your standard medieval broadsword. More specialized and compartmentalized for sure. Less big guys with 20lb sledges and more auto hammers. You bring up the common argument against unionizing (those lazy fucks over there). In my experience in the blue collar world that will be the case regardless. It is possible for unions to go completely bonkers too, I think Hollywood is the poster child for bonkers union rules. Ultimately we just have to go where we think is the right direction. 
Perhaps the students there feel overwhelmed by the sheer number of courses you posted?
That's an impressive list. It's actually overwhelming, and that is likely slowing interest or appreciation. ([kjchowdhry](https://www.reddit.com/user/kjchowdhry) just posted the same idea.) Some thoughts: * I think there are different audiences for this kind of list. The current list has courses that deal with machine learning and fairly involved data analysis/visualization in the "Beginner" category. "Data Science: Practical Deep Learning in Theano + TensorFlow" shouldn't be in the same section as "Programming for Everybody (Getting Started with Python)". I'd suggest either expanding the difficulty -- or better -- adding a "category" that can be used to group related specialty "applied Python" courses like web frameworks (Django/Flask) or machine learning/data science, separately from more fundamental/generally applicable Python topics (OO programming, databases, GUIs, logging, testing, etc.). * I'd suggest moving the "difficulty" and new "category" columns to the left, and merging or removing some of the other "detail" columns. Moving the columns would allow users to find the difficulty/topics they are interested in by scanning at the left, and get the less-important details for specific courses towards the right. I'd consider eliminating the rating as not super meaningful, and would display the "Website" and "Instructor" fields merged to give more space. It might even be worth splitting the table by category as the list grows. * The column sorting algorithm doesn't work in a useful way. It's sorting alphabetically, not by an actual numeric value. So prices aren't lowest-to-highest, ratings aren't best-to-worst, difficulty isn't easiest-to-hardest, time isn't shortest-to-longest, etc. * Search works great! 
Where in this list does it say that by going through these resources you'll be an expert? 
Thanks for taking time to suggest me some amazing suggestions. I will work on your suggestions and try to give a better experience in the coming days. Thanks a lot again :)
Unions get a bunch of people colletively together to say "We want to do this job and nothing else" which is not how society progresses. Look at how the UAW fought robots and other automation (to the point that the Big 3 just said fuck it and moved elsewhere). When 'highly skilled' workers it speeds the race to them no longer being 'highly skilled'. It's already bad enough in Engineering, unions would make it that much worse. Now Bob can't be fired since he refused to learn to use MATLAB, he's going to make $50/hr drawing bode diagrams until he finally retires since he has seniority. If you think you need to unionize it means that your 'job' is one step away from full automation so perhaps pick a different path. 
The US has been shifting to a freelance / gig economy for some time now. This is the exact opposite of a union. I think the only real benefit of a programmer's union would be some sort of competency baseline. However then you would probably need to have a Java union, Python union, C union etc... How many of you want to pay separate union dues for the 5+ languages you know? As most programmers are making higher than average wages AND working conditions are the same/better than most other industries, I think the risks of programmer unions forming are much greater than the benefits. And don't think for a minute that corporations won't move programming jobs to E. Europe/Russia/India/Asia within a year if programmer unions were formed.
And the last thing we'd want is for bad programmers to be able to keep their jobs working with us.. .
Very nice, thanks again !
Username checks out 
You just blew my mind with the idea that a Python script can spoof a MAC address. Anyone got source on this for a beginner? Thx 
What have you done.
I think that thinking about converting python to sql will be harder than just starting again with the project description.
Sorry, Microsoft SQL Server
So in other words, try to rework the problem from scratch using SQL
Personally, I'd just ask for those things and, if I didn't get them, I'd find another place to be an engineer.
At least here in the states, Programmers and Engineers are so arrogant that we think they won't do us any good.
Course outline looks like a lot of basic Python, but not a lot of networking. All I can see is the section titles though, so I could be way off. 
Just say "alright, I just need python 3.4 then."
Because you're better than everyone else, right? So you don't need help negotiating your salary and working conditions. Or you'd rather just take what you can get on your own than accept help?
Introspection! Use the interpreter to play around, prototype, and to call dir or help on something. &gt;&gt;&gt;import random &gt;&gt;&gt;print dir(random) &gt;&gt;&gt;help(random.randrange)
&gt; However then you would probably need to have a Java union, Python union, C union etc... How many of you want to pay separate union dues for the 5+ languages you know? How much do you actually know about unions? This is not how it would end up. I'm a University teaching and research assistant, and I'm in the same union as some non-profit law groups and auto workers (among many others). &gt; And don't think for a minute that corporations won't move programming jobs to E. Europe/Russia/India/Asia within a year if programmer unions were formed. This is already happening. Do you really think we can stop this process by just not standing up for ourselves? "Whatever you do, don't ask for overtime pay. Don't negotiate for a higher salary. Give the company whatever they want. Otherwise they'll leave us!" Give me a break.
woosh.
Oh - script is in python2, requires `pexpect` and `pyping` - may work in py3, but I had some problem importing pyping
While automation will decrease the need for programmers, it will also result in increased demand as you need people to write the software to automate things. This isn't true for most other industries where automation is already decreasing jobs (think all of your basic office employees that are more efficient with computers - this means companies can hire less of them). So while programming isn't safe, I'd argue that it's almost the 'most safe'. Once computers are writing their own software, people are pretty much obsolete in all respects.
This assumption rests on the assumption that you can't automate a programmer. Programmers don't like to imagine that they're replaceable for reasons I don't really understand. 
I didn't say that you couldn't. Just that it would be more difficult than most other tasks. See the end of my comment. 
Sure- If the "programmers" union that was not specific to any particular programming language, then yes, there would only be one set of dues. With my final statement, I am not implying that an employee should not try to negotiate for a higher salary or better working conditions. And I am aware of programming jobs getting off-shored. I used to work with programming teams in India (jobs that were domestic in my company and moved them to India) to complete projects. I was just bringing up the topic of offshoring jobs and the "potential" for unions to make this a bigger issue. To your final response, when it comes to the standard of well-being, competitive salary, benefits, and working conditions, EVERY programmer I know has it pretty good. I don't know one of them that makes less than $60K(US) a year, and a good number of them are north of $100K. The only downside I hear from them are more work hours in a week than the typical 9-5 crowd. Maybe I only know programmers that have it good, and there are programmers out there coding at minimum wage. I am sure another poster will tell me I am missing something, but other than raising the professional/technical standards of programmers in general, I don't see any other benefits to forming a programmer's union.
Unions make it basically impossible to fire anybody for any reason. Imagine the most incompetent coworker you ever had. Now imagine 3/4 of your team was this way. I've been there. You don't want that.
pythondev.slack.com exists and is pretty active. http://pythondevelopers.herokuapp.com/ to join in.
Teachers make very little pay. Doctors, amazingly, also make very little in their first few years -- I saw one doctor work out that, for the number of hours he worked, he was making less than minimum wage. Doctors also can kill somebody if they screw up. Most programmers can't. Those that do (e.g., in aerospace) are often in unions.
Just comparing programming to warehouse work here, when you say more hours a week than typical how many hours / week do you mean? 60k/yr is pretty decent IMO, but it drops down to entry level warehouse work somewhere between 50-60 hours / week. Assuming a month vacation time in that 60k.
lol, first and second have been done. Im trying to work my way around all the loops, and from what I have read, using a cursor is some what of a no no. Im about to give up and give it a shot ha.
Because we don't like doing SQL queries.
Nope:)
With python it is really easy but sometimes I just get lazy.
I do not believe it is a case of disinterest. Your list, quite frankly, provides less context than the results that are returned from a standard google search. A list of course titles might be useful for someone seeking a specific topic, say someone looking for a Django course, but not so much for someone who wants to get into Python but doesn't know where to start. Your list contains 40 "Beginner" courses, but no real recommendation for where a beginner should start.
This is a good explanation. But just to make sure its clear, when you say character with index [1] you assume it is a list of strings. The same would work if it were a list of any object that can refer to an index. For example, if it were a list of tuples (which the name 'tup' suggests), this would sort according the second item (item at index [1]) in the tuple. 
(use json and utf) or in binary, 01110101011100110110010100100000011010100111001101101111011011100010000001100001011011100110010000100000011101010111010001100110
There's always been #django and #python on freenode
Instead of using `while == 1` and `sleep`, you could use `cron` in linux or Task Scheduler in Windows to run the script every minute.
None of it looks especially reusable. It's all procedural code in one file with data/rules in global arrays, magic constants everywhere, no GUI, and parsing that's very specific to our part numbering scheme. Render farming was achieved by shuffling the parts list and skipping any where the image already existed. And I ran into a lot of odd problems with ugly workarounds, like changes to object positions not take effect unless I forced a GUI refresh, with the 3D view visible. In 2.49 I could say `Blender.Redraw()` as a workaround before rendering. In 2.50 that was removed (along with the whole "Blender." namespace), and all I could find was a benchmark function `bpy.ops.wm.redraw_timer(type='DRAW',iterations=1)` which logged benchmark results as warnings to the console but got the job done. If I rendered without calling that, or without the 3d view open, objects would remain at their old positions in the render. Then I couldn't just show/hide objects. Having them all on one layer would crash Blender, and I vaguely recall performance problems with most workarounds I tried (over 6 years ago). So what I ended up with was having objects randomly scattered on 18 of the 20 layers (leaving the 1st for rendering, and 2nd as a workspace), and it toggles visibility by toggling whether they show up on layer 1.
Most of the are not free.
Traditional HTML pages can be RESTful. Static HTML sites are probably the most RESTful things on the Internet. 
I've been let go from a job because they entire group wanted to do things the 'old way' despite it being a significant time drain and they didn't want to learn my new fancy Python. (A good chunk of our stuff is still VBA scripts from Excel 2000). Find me one job that has remained completely unchanged in 40 years. The world moves on. We're on the cusp of robotic surgery for the easy stuff, leaving doctors to specialize on other things. I'd have quit being an Engineer 10 years ago if nothing changed. Doing things more than twice is boring. Do it once and it's fun. Program it the second time you do it and move on with life.
http://i.imgur.com/dWELFDe.gif 
Haven't tried it yet but I think pandas should do this pretty easily. Can import the csv to its internal table structure thingy. I have no idea what the specific features are called, but there are a lot of pandas/excel tutorials that I would imagine are similar.
omg omg omg. Thanks you!
I agree, the Pandas library in Python is the easiest way to do that.
Look at the pandas read_csv and to_csv commands. You'll want to use pandas.concat([dataframe1, dataframe2, ..., df_N]) to create the merged dataframe.
I read a lot of webcomics, but I hate having them scattered everywhere. So I have a list of comics, and how to grab their images, and then it downloads them all into a directory, and makes a page for "that day". That way if I miss a few days, I can just go back and read through a weeks' worth of webcomics at once. Also it lets me enjoy my comics ad free.
I'm not sure i'm entirely convinced by this argument. For one, unions have a fair amount of political power and generally get some national media coverage when they are having a tiff. I can't imagine that the combined effort of additional political sway and straight up *shaming* the companies that decide to overseas their entire programming department wouldn't be at least somewhat effective at mitigating that problem. Edit: It wasn't all that long ago the internet was a free-for-all and the idea of countries regulating it was ludicrous. Now people regularly get sued for things they do online. Amazon gets charged local taxes in some states. Uber is banned from some cities. Why is it so far removed that once a union is formed, politicians (like trump) wouldn't pander to them under the "more american jobs" platform and make outsourcing programming jobs overseas some form of illegal?
It's simple, just call a custom function that will do what you want on button click. Here's relevant matplotlib stuff. Saving to pdf: http://matplotlib.org/faq/howto_faq.html#save-multiple-plots-to-one-pdf-file Subplot demo: http://matplotlib.org/examples/pylab_examples/subplot_demo.html Tables: http://matplotlib.org/examples/pylab_examples/table_demo.html Text: http://matplotlib.org/users/text_intro.html
If you look at my long winded reply above, it's only ran locally and handles the traffic via https. No different than a web-browser (in my amateur opinion?), or at least not the sketchiest place I've decided to try to use online, regarding money. I also never got to the point of paying bills with it, so that might make this a bit better. I mean, if someone wants to hack into all of my bill sites and pay ALL of my bills for me (or even only some...), who am I to try and stop them? You know what I mean? :) 
By the way, if someone knows something about cx_freeze here are the details on SOF, http://stackoverflow.com/questions/37957964/cx-freeze-doesnt-seem-to-be-working
I think this might be a better question if you ask it specifically to what you want to do, or at least try to get as close as possible. "Show how people do this" is very vague. I personally wrote one (just talked about it in another comment, actually) about logging into websites that were for bills (monthly bills). Pull totals, show it to me, etc. That's a real world example but, not many would find it useful. So what are you trying to accomplish in the long run so we can help you better? (I say we, as in the people that know python better than me on this forum or me if you have no other choice. :) You know. That form of the word "we".)
debugging
Some work that I am doing involves collecting large amounts of certain texts and analyzing them, so by web scraping I can get large amounts of data with little work.
scrape emails from various sites and feeds those to Facebook for advertising. This is used by many. 
The biggest issue with your site is that it's not designed around **content**. It's an extremely common problem with most people who start out with web-development, they start with the fancy eye-candy and then try to cram content in there. Also that animation gets irritating real quick when you browse through the site. I'd remove it alltogether. Personally when I create small sites like this, I start by writing the content (sometimes begin in word/openoffice), and only when I have content ready I start styling it with CSS (mainly to make it more readable, spacious etc.). Sites that are focused around content and not design tend to look best imo.
There's [a little known site](https://google.com) that is known for its ability to extract information from other people's sites.
This guy relies on Python in his university courses - https://www.youtube.com/user/ralienpp. If you click around you will find a set of screencasts related to Python (specifically in networks and computer security). This is a tutorial on BSD sockets: https://www.youtube.com/watch?v=aB53R8nJGAg (actual programming is in the end) https://www.youtube.com/watch?v=DJZWSUtJgT4 - same thing, but just the screen, without the preliminary intro. https://www.youtube.com/watch?v=g49UECaIDOs - How to use pdb to debug your Python programs. https://www.youtube.com/watch?v=fdXX8Rr5JM8 - website scraping. 
Oh man don't get me started about things I miss about coding in the old pre 2.50 blender... i missed having a blank 'python' space type so much that I hacked together a way to *sort of* get it back ( personal use only as it is such a dirty hack ) Yeah I know how it is having mostly non-reusable code so oh well about making an addon. As for the redraw issue, is it something that almost rings a bell but I forget ... maybe I'll remember ... it seems like there was something tricky about rendering python-positioned meshes once. maybe this: [here's my clue](https://www.blender.org/api/blender_python_api_2_77_1/bpy.types.Scene.html#bpy.types.Scene.frame_current) which pointed to [this](https://www.blender.org/api/blender_python_api_2_77_1/bpy.types.Scene.html#bpy.types.Scene.frame_set) edit: so that would be ``bpy.context.scene.frame_set(n,nn)`` I believe.
Can you explain why you disagree? Do you really disagree that a sum type requires more code than dynamic polymorphism? I took a class in OCAML in uni, so I'm by no means an expert.
I'm pretty sure I've gotten that to work before with cx freeze... I think I was following what Spyder was doing at the time. I was also using esky which had its own built in hacks for some of the freeze programs, so that may have helped. At least once though I had to modify library source or pull from a bug fixed branch. I remember it was all about making sure all the dlls made it into the bundle, and that the qapplication could find them at runtime. For like png or ico files there was even a step where you had to tell qt where a library/DLL path was. ... sorry for rambling...
Not any programmers, but software engineers (protected title) in Canada can join their provincial engineering body.
That's kind of cool that your engineers all have the same union.
You could make games with Python but it wouldn't be my go-to for a “proper” one, with the usual caveat that I may have a different understanding of what it means to be “proper” than you do. Almost without exception, and with good reason, resource-demanding games are written in C++. I should say that C++ is considerably more complex than Python, but game programming is quite challenging in its own right. I wouldn't recommend a beginner to go down that path immediately. On the other hand, it's perfectly possible to play around with 3D programming in Python and make a “non-proper” first person shooter to get your hands dirty first.
If you do not planning to make a professional game, yes you can. Otherwise you should not. Python is good for indie game development in my opinion.
Is was more thinking of an indie game...... I just want to make a fun and simple FPS game.
If you are serious about learning to program, I'd highly suggest you the MIT opencourseware cs 6.00. A great place to start!
I think the main disadvantage would be choosing the correct licensing and hosting. I would suggest reading more or getting more info over here https://odoo-community.org/ also look into the accounting package thoroughly if you plan on using it. This is my view, there is no 'One True ERP System' all ERPs essentially come down to the implementation. The one advantage of the latest Odoo is that it enables quick prototyping once you understand it technically. All the best. 
They exist, but at least for desktop apps, the freeze tools are not very good. They all try to do dependency detection which doesn't work very well, and there are many Python packages that don't work properly when loaded from a frozen application. You can generally make it work with a fair bit of tweaking, but it's far from great. I spent a couple of years contributing to and helping people use cx_Freeze, and then I created [Pynsist](http://pynsist.readthedocs.io/en/latest/) in an attempt to get past these problems. I think Pynsist is a better way to package Python apps, but it could definitely be better, and it's only for Windows installers, not for other platforms.
Not (yet) a common pattern, but: if you use [flit](http://flit.readthedocs.io/en/latest/), it takes care of getting the version number from the package for you, so you don't need to do anything special.
There used to be two unions for engineers, one for those with bachelor's degrees and one for those with master's degrees but they merged to form one union instead. Engineers has a strong position on the Swedish market so salaries are not the primary responsibility of the union. Mostly benefits from being a member comes from unemployment pay and the union negotiates other benefits such as retirement benefits, overtime etc.
It wasn't about the "3" in "3 statements", it was about the "statements", which are not expressions. `exec` is still a statement and as such not valid inside `eval`. Just try it out. 
Has anyone got an experience with Treehouse Python? I see they offer a track which involves Flask. Got a license through work, but I generally have mixed views. Some of the content is great, some makes me feel like im 8 years old.
I think it's perfectly legitimate to ask what a new wheel brings to the table that the previous wheel didn't. Users naturally incur a penalty in switching libraries, because they have to re-learn how to do things and so on. If you want users to adopt your thing, you have to be able to communicate why it is better than the previous thing; this is particularly true if your field is very crowded, as it's the case for Python REST frameworks right now, the task is pretty basic (serving http requests), and some of the players are already kicking it out of the park. I personally tried not to be negative, but I pointed out that the field is quite packed right now and it's difficult to say how one might benefit by straying from the mainstream.
great work, would be nice to have also cli command, something like: $ mirket http://etsy.com # for all networks $ mirket http://etsy.com --list-networks $ mirket http://etsy.com --networks facebook,pinterest $ mirket http://etsy.com --as-json &gt; result.json 
I thought web apps are mostly bottlenecked by IO, am I misunderstanding this CPU counting stuff?
Wow, this is actually really useful. Thanks.
The default django structure works just fine for me. If my views.py grows too big then i turn it into a module.
Google the engine Irrlicht. Work through the examples and start changing little bits of the code until you are confident you know what you are doing. Then start a new project from scratch.
&gt; I thought web apps are mostly bottlenecked by IO Most web apps maybe, most Python apps definitely not.
Is that because Python is slow?
Hang on, so this isn't even about "semantic versioning" or anything like that. This entire complicated diagram is simply about the question where to put the version number so people can find it? Does every small detail need to be a "pattern" nowadays?
Apart from the recursion problem you might also want to read up a bit on the basics of generating primes. Because that is the most inefficient algorithm you could possibly write to do that…
You can try: * good and fast editor (f.i. vim / sublime) * console terminal for ipython, git and other stuff * screen / tmux * optionaly tile manager like i3, xmonad, very good for working with editors / terminals and multiple monitors 
It's quite complicated: There are 2 (two) distinct values that need to be considered separately. On the one hand we have `true` (in Python this is typically referred to as `True`), and on the other hand we have `false` (typically referred to as `False` by Pythoneers). Now, it is important to understand that these values describe radically different concepts. In fact, one might even go as far as to call them *exact opposites*. It is therefore useful to create a mental representation of each of the possible values. As an example it can be helpful to interpret the value `true` as the answer to the question "Was this thread pointless?" and `false` as the answer to the question "Was there no way this thread could have been avoided through a quick google search or some thinking?". I hope my reply helps you conquer this challenging subject.
Essentially time and ressources. Packaging is a very complicated problem given our complex systems, espacially for an interpretted dynamic language with compiled extensions, and the Python team has limited ressources. Another problem is the fact packaging is as much a political problem than it is a technical problem due to legal issues, OS lib linking policies, situations with dependancies, etc. Solving the problem once is not enough, you have to maintain the solution because it will break every months or so, on many plateforms. And deal with all the communities from OSes, libs and the like. Even if you had the time and ressource to do this, who has the will to do it ? The closest thing to a solution right now is nuitka, which compiles your project to an exe. It's not to hard to used, and works fairly well if you don't need cross-compilation. But it's just distributing an executable, not really packaging, which is more than that. Anyway, it's pretty good already. But man, look at the work. Look at the skills of the guy doing it, and out of sheer passion. It's insane.
I tend to agree. It's a balance between safety and freedom, but I don't want job security, I want the hability to negociate because I got the skills and they need it.
There was a terrible animation-gasm when I went to your site, and all the parts moved around the screen before they settled into position. Was that intentional?
I would do another tutorial, Code Academy can leave out many things, and can also hinder you in "experimenting". If you know the material, than you will breeze right though it. Here is a link to a decent tutorial that goes right into advanced topics. [A Python Book: Beginning Python, Advanced Python, and Python Exercises](http://www.davekuhlman.org/python_book_01.html)
And also, on a related note, is there accidental animation? I mean, is that a known issue? "I can't figure this out, my div keeps sliding in from the left." Because I think that would make life fun. It actually makes me want to get on a project and change all the classes to include crazy animations just to irritate the front end guys.
Django is slow.
I think the best feature is macro, such as I can set a shortcut key to run doctest on current file using `python3 -m doctest %F`, seeing output right below without switching context. More complex thing can be scripted using Javascript or Python. Also, it supported event-based scripts, such as: when I save a file, trigger something (eg reformat PEP8). Code completion, jumping around Python and packages are good but not perfect. Support for major languages are great (JS, Go, ...), including lints.
I don't know why anyone hasn't mentioned this already &gt; Making a proper video game Do you mean from scratch (engine and so on) or just focus on the game per se? If your case is the latter, you should definitely use an existing engine. Unity has [Boo](http://boo-lang.org/Main.aspx?TAB=About%20Boo) which is a very Python-like scripting language (I have no experience with it, I only used C# and the JavaScript-like UnityScript); Blender uses Python proper for it's game engine scripting [Here](http://stackoverflow.com/questions/4634935/game-engine-with-python-scripting) you have more information, check the answer by Azarai. tl;dr are you trying to write a game engine **and** a game, or "just" a game?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt; Seems like Python is good enough for half a billion people. Half a billion people don't need the speed or optimization. Python is perfectly fine for their use cases. Back in the day when the new hotness with Perl .cgi scripts for 'dynamic web' eBay wrote their entire backend in C for compiled .cgi programs. 
The only thing I hate of the requirement of having to name longer functions has nothing to do with python-the-language but with tooling: pycodestyle (former pep8) requires a blank line before them even in local contexts. This is non noqa'able.
There's a #programming on Snoonet if you wanna talk to Reddit people.
Is it better to have a folder called API under the root directory and then have all the apps contained under that? Would that be a better structure for future expansion with no clutter 
It's mostly a function of not having braces. There's probably a way to hack in multiline lambdas, but it's probably super horrible. If you're really envious, you might want to check out Scala. It's a little weird coming from Python, but it's pretty awesome. It even has the concept of a "by name parameter" which is basically a no argument lambda on steroids: def something(body: =&gt; T) { println("begin") val res = body println("end") res } something { println("stuck in the middle with you") 5 } And you'll see: begin stuck in the middle with you end 5 // return value Basically, you can define your own control structure looking things.
Have you tried using Scrapy? http://scrapy.org It has good defaults + tons of settings to configure crawling (including politeness, retries, cookies). For crawling, it's much better than requests + bsoup. Disclaimer: I help maintain Scrapy and work for Scrapinghub (company which sponsors Scrapy).
This is similar to a cli called howdoi. It serves a similar purpose and it could be worth checking out. https://github.com/gleitz/howdoi
My main job is automation. I use python and ruby. Python if I have the choice. I'm coming for you.
Creating a sum type doesn't take much effort at all and documents, in a way that can't go out of date, what the acceptable values are. The arguments in favor of dynamic polymorphism always seem to come down to something like, "It saves a few milliseconds of typing and all you have to do in exchange is accept intermittent programming errors and a greatly increased and ongoing documentation and testing burden." The number of hours I've wasted misusing "stringly" typed "flexible" and "easy" APIs in libraries like pandas (python) is depressing. More than anything else, I find that the best programmers reimplement algebraic types dynamically somehow or another anyway and the worst just throw an API together haphazardly because it's easy to do.
If you're not a mechanical engineer, I have nothing to fear from you, sorry. Even then, automation is good for me.
I wanted to purchase a new snowboard and the site I was purchasing from had star ratings for Stability, Control, Speed etc. but no way to compare boards from the hundred or so they have. I wrote a scraper to grab all the info into a database which I could use to decide which board fit the specs I wanted with a few simple queries.
I have a few. I am in the processes of getting them open-sourced if there is interests * Python wrapper to enable bi-directional rsync. Similar to [bitpocket](https://github.com/sickill/bitpocket) but works better for my specific uses. Keeps folders in sync, tracks file moves, backs up files (two modes of backup) and generally lets me replicate a dropbox-like workflow (except no sharing and manual sync). (Yes, there are tools that do this but they didn't work for my specific needs) * Notebook generator. I keep my notes in markdown format. Generates a nice (though spartan) website off that that. Includes a tagging system and a to-do-list generator * Also just a todo list and tag listing script * wrapper for grep to search files and include all of the flags. Grep is usually faster than anything I would write in Python but it doesn't do multiple `AND` style searches well and I always forget the flags for my uses. This simplifies both * [Already on GitHub](https://gist.github.com/Jwink3101/ac1fc27d17f37f9e72872a473183125c) * Code to clean up tables into markdown. Again, tools exists for this but my code does exactly what I want and just requires the standard library. * [On GitHub](https://gist.github.com/Jwink3101/7f19c14b01b00e84947965b20c0175db) 
No costs are incurred? That's plainly false. 
This is very cool. 
A slightly different twist that I prefer: keep the version number where you can both parse it out for setup.py and import it into your scripts to support a --version argument. 
It's not Python, but there is another one that serves a similar purpose called [how2](https://github.com/santinic/how2) if people want to check that out as well
If you get stuck programming, you don't have to google the stack overflow answer. You can find the answer from the command line. Just saves a couple steps.
&gt; I think Pynsist is a better way to package Python apps, but it could definitely be better, and it's only for Windows installers, not for other platforms. Was interested right up until the only for windows part
It's a "by name parameter" which means you give it a block of code and it'll evaluate it when it's called inside the actual definition. `=&gt; T` just means the block provided will return type T. `T` could be a more specific type though. In my above example, the `println("Stuck in the middle with you")` is only evaluated in between the two other println calls, not before. Think of it like defining your own pseudo control structure. 
Not surprise since the internet is ruled by cats.
Stack overflow has a deserved reputation of strict moderation and an unforgiving community.
I use the exec method on my metadata so my package can tell you it's ``__version__`` on import while making it possible to represent in setup.py without needing to import the package and cause ImportError hell.
Nix package manager is awesome for this.
I'd say this is a post better suited for /r/learnpython
Points well taken. How do you feel about `re`-style flags as a middle ground? This gives autocompletion and linter errors for a typo, but doesn't specify before-hand what options are allowed. However, since `enum` was introduced in 3.4, it's pretty easy to do it the "right" way. However, in an ideal world, most of this could be handled by the compiler. For example, following [this independent library](https://github.com/prechelt/typecheck-decorator), you could use function annotations to specify the possible values for a parameter. If this was integrated into a language, linters could identify the error if the value is passed as a literal.
&gt; Does every small detail need to be a "pattern" nowadays? Traceability / versioning / reproducibility isn't a small detail.
I wrote these scripts to track my bandwidth usage. Thought someone else might find them useful too. Though they're currently written for my specific use case in mind, If anyone else wants to use them, I'd make the required changes! While writing these, I stumbled upon a nice little script to plot horizontal charts on terminal: https://github.com/mkaz/termgraph/ It's not on PyPI though. Also ended up writing a tiny wrapper over `notify-send`: https://github.com/dufferzafar/netuse/blob/master/notify.py
Is this simply face detection or is there a distinction between different species? Edit: It is cat detection specifically. Cool!
Something that tells you it has a compass. Like, it should be listed in the set of features the device has. You may have to dig a bit- many commodity GPS units declare what chipset they use, so you'd need to look up the chipset (the linked one uses SiRF Star IV) and read its datasheet.
It really depends on what you're doing. Have you taken a look at numpy or pypy? If you really need a "faster algorithm" for some CPython project... why not use C?
Username checks out, redditor for 4 years. Bravo. But I have a raspberry pi and camera module and a cat. I need to come up with something using this.
Unless your company have specified what language to use when commenting and naming stuff you should always use your native language. This makes it harder for them to outsource your job. To bad if your from a English speaking country. 
The fact that I can see his comment somewhat diminishes your argument.
It's similar to what's described as the 'regex matching' solution. Except regex is just one way that setup.py can parse a version out of a text file. And instead of putting the version into the '__init__.py' I'd put it into something more normally imported like _version.py. And I'd specifically add --version to my scripts: because it's handy, and now you're reusing the version - rather than merely changing where you store it.
Just to clarify this isn't about speed in the sense of C vs Python. It's about a tool that statically analyses your code and suggests optimisation you might want to consider (much like the Ruby fasterer gem)
As usual... great stuff! Despite the obvious goal of selling books and stuff the guy still manages to provide lots of free value with your posts. I give Adrian kudos for doing it right.
any way to get an invite? :-)
Comic-rocket.com
Are you a Dutchie by chance? Because zeep is soap in Dutch!
&gt;Despite the obvious goal of selling books and stuff To me, the underlying feeling here is that this kind of thing should be frowned upon. But it's a ridiculous connotation really, if we as a world want *good* educators we need to be willing to pay a decent amount for it. A comparable amount to what that educator would get if instead of teaching they were paid to do what they teach. Otherwise we, as a world, get into this situation where it's acceptable to go around saying things like "those that can do, those that can't teach". And as far as I'm concerned that's a concept which stabs the entire world in the back. We all lose. Buy products from good educators people.
IF I had a codebase written in a foreign language I *had* to redeploy, translating variables and getting docs translated wouldn't be too hard. I could pay someone fairly cheap to do it for me. Translators are dirt cheap compared to programmers.
Except setup.py can't import from your package.
Mind sharing the endpoints for individual song data?(The endpoints you noted in main.py)
Thanks! It's got great reviews, too. And thanks to the miracle of Amazon, it'll arrive 2 days before my grandnephew does. ;-)
Versioning is important, no contest there. But this is apparently only about where to put the actual string, which should be a trivial decision. If it's not, something else has gone wrong.
I think the ideas in it could be used to make similar packaging tools for other platforms, but I haven't done that. I'm a Linux user, and I'd love to make something like Pynsist for Linux, but there's no common format for distributing and installing Linux desktop applications. Do I build deb/rpm packages and get into fights about what distros consider the right way to make packages? Bypass the distros' mechanisms with something like AppImage? Jump on the new bandwagon of snap or flatpak? Or just fall back to tarballs containing installer scripts? (I actually had a go at the last one, but without much success). I don't have a Mac, so I won't be the one to make those tools. But plenty of Python programmers do, and I think py2app is already not bad. For mobile platforms, the Beeware project has some interesting tools in development (like [Briefcase](http://pybee.org/briefcase/)), but I get the impression they're not very mature yet.
Hi /u/mvt, it looks nice and a suggestion I have is documenting which parts of the library are thread- and greenlet-safe, which will likely amount to the same thing. If none is planned to be, this is also information that is good to understand so that one knows how to get around it when embedding [zeep](http://docs.python-zeep.org/en/latest/) in a bigger project. Regards.
I'm not sure if unity support Python though.
Can you give a small runnable example?
I'm new to Python and Django, coming from PHP. Why do people use Django if it's slow?
Nice stuff!
don't mean to be that guy, but did you read what I replied above? It has Boo. There's a link on my previous comment...
No, but it can easily parse that file. Here's all the code you need to access this version number from multiple locations: My [package name]/_version.py contents: __version__ = "0.3.2" Then setup.py just includes a function to read &amp; parse that. Could do this a dozen different ways - including use Regex like OP demonstrates: def get_version(): rec = read("[package name]/_version.py") (label, version_quotes) = rec.split('=') version = version_quotes.strip()[1:-1] assert label.strip() == '__version__' assert version.count('.') == 2 return version Other scripts access that variable via: from [package name]._version import __version__ And display it via argparse: parser.add_argument('--version', action='version', version=__version__, help='displays version number')
Holy crap! I didn't even know it was my cake day! Thanks!
I bought Python for Kids for a few friends (even adults) and went through it myself first (though I wasn't new, just so I could confidently recommend it). [Amazon](https://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076)
[removed]
 **Python for Kids: A Playful Introduction to Programming** |||| --:|:--|:-- Current|$22.20|Amazon (New) High|$24.67|Amazon (New) Low|$20.01|Amazon (New) |Average|$23.21|30 Day [Price History Chart and Sales Rank](http://i.imgur.com/XlizN7i.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
1. Attach Pi to cat 2. ??? 3. Profit 
Nm problem solved. homecount = Counter(x[0] for x in flatlist) it returns a "counter" type, so it looks like a list of pairs and behaves similarly, like this [a, 1], [b, 2] It doesn't have any obvious logic to the order that it returns the information, and repeated use will bring up many different orders, but you can just call homecount[a] and get the number of times 'a' was first in it's sublist. Between this and learning how to use functions properly I've shaved about a third of my program's lines. Obviously that's a pretty rough measure of efficiency, but it's definitely a lot easier to scroll through and find things.
Interesting delema. We're talking about os calls here, and I'm not aware of any bug or gotcha in the Linux kernel that would point to this. It's my understanding that the os.open, os.close, os.unlink are wrappers around the cooresponding os calls, so who knows. Are you using the python built-in File object type? If so, calling close on the file object does a flush() on the file descriptor before calling close, this may be the overhead you're seeing if you are using the built-in file object. Perhaps experiment with using the lower level os.open(&lt;fd&gt;), os.write(&lt;fd&gt;, str), os.close(&lt;fd&gt;), os.unlink (instead of os.remove) to see if you can bypass the file objects logic.
I'm intrigued by the remote login monitoring... I know you can do that stuff with PowerShell, but I haven't seen anything in Python that would let me do this. Do you mind sharing a bit about how this works?
Very helpful. I realize that my initial code was very inefficient, but I'm going to be looking into Sieve of Eratosthenes and Memorization to slowly build it up to a worthy piece of code. Really appreciate the feedback, thank you.
I'm not sure it's a kernel issue, I think python is keeping the handles open after the file has been closed. My pattern for writing to the files is: with tempfile.NamedTemporaryFile(mode='w') as f: ...write some stuff to f... os.system('thing --infile={}'.format(f.name) f.close() Although as I'm looking through my code I do use tempfile.mkstemp in another part of the code that I might not be cleaning up correctly. This might be a non-issue.
I got it working by doing a few symlinks although I only really use 3.5 since I try to keep everything on 3.5+. If you search on pyimagesearch.com for building openCV 3 with a virtalenv you should be able to find the right things to symlink. Either that or just pick one and stick with it.
I might be crazy, but I was sure someone already did this a couple years ago. 
They missed a chance to call it typy
Aww only Python 2?
Definitely, good suggestion. I'll take this down and repost there 
This would be pretty useful if it tried to coerce strings to the needed type. Then you could give it json and get something useable. Also, being able to define regex based validators would be great. I did something like that on a project: https://github.com/Permafacture/AsanaCRM/blob/master/asanaCRM/validators.py And those get used here: https://github.com/Permafacture/AsanaCRM/blob/master/asanaCRM/parser.py
There are alot of data analysis packages, especially related to biology, that `R` provides and quickly get you to the end result. It could be nice to do all your data wrangling in python and pandas then shove it into an R package to make a pretty graph in 1 line of code.
My current `Procfile` looks like this web: python margo/margo.py 5000 The program crashes again with the same error message after 60 seconds.
How do you relate to the copyright of material on stack overflow, which is viral? (See the long and confusing discussion here http://meta.stackexchange.com/questions/12527/do-i-have-to-worry-about-copyright-issues-for-code-posted-on-stack-overflow)
Do not hardcode the Port number. Heroku expects your program to bind to the port number they assign to the container. You should replace 5000 with $PORT PS: I assume this works when you run the same code in your local machine. 
* https://github.com/iamaziz/PyDataset * https://github.com/python-visualization/folium 
I wrote littletable a few years ago when trying to compose a simple in-memory database. One design concept in particular came from my unhappiness between the model of the collection of rows in a table vs. the collection of rows in a query result (typically some sort of ResultSet collection). In littletable, every query returns another Table, so that it is easy to chain query, sort, filter, etc. littletable also makes it dead easy to import from/export to CSV and JSON files. But it is definitely a lesser-known package.
It really depends on what the project is. So many of these libraries are niche, specialized things. Here are some random, general ones from the top of my head: * Minibar - yet another CLI progress bar but clearly superior to tqdm ;-p * Xarray - pandas that handles big spatial data arrays; well written * Bokeh - one of many interactive, browser plotting libraries * Basemap/Cartopy - cartography libraries that are good for print publication * Holoviews - graphics stuff. just Google it * Pint - physical unit handling * Dask - handle "medium" sized data * Miniconda for letting me easily use py3 on an Ubuntu OS and quickly create a py2 environment when I need to put up with someone's legacy BS. Use with https://conda-forge.github.io/ * I'd also like to call out beautifulsoup and cython. They're nothing new but always appreciated. bs4 is the real OG.
Oh. Wasn't aware of that. But the program crashes again even when the the Procfile is changed to web: python margo/margo.py $PORT Should I bind my python script to this `$PORT` ? 
I had a look at your script -- I did not see command line arguments being used anywhere. How do you run it on your own machine? And where do you specify the port?