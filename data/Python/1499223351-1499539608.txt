Tesseract is alot of fun to work with and alot can be done with it if you train it right glad to see another person diving into it :)
You might also look into this python library for snapchats api https://github.com/mpolden/pysnap ive just skimmed it but it might assist you in your endeavour 
Working my way through Datacamp's Data Analyst Career track with Python. Has anyone completed completed this?
Working on a backend using the sanic library
I would also like to know where we can work on a project with other beginners 
This should be added to the sidebar at /r/learnpython.
I think ideally you should ask the author to transfer the repo to you.
Skynet is self-aware.
Hi, pyglet contributor here. &gt; I've seen pyglet suggested but from what I understand it isn't a game library as such I would say that pyglet is not "strictly" a game library. It's similar to SDL, in that it's perfectly ready to make games with, but doesn't force certain game-isms on you. Just like SDL, It's fully featured as far as graphics, input, and audio, but doesn't contain any strict framework for structuring a game. Libraries such as Cocos2D and Arcade are built on pyglet, but offer more game specific structure to help new users get something up and running quickly. pyglet is a native OpenGL library, but also provides input, windowing, and audio functionality in a cross platform way (again, similar to SDL). I think the API documentation is pretty solid, but we are in the middle of rewriting the programming guide so please bear with us :) Comments and contributions are welcome! 
I'd love to read something like that. A cool topic might be automating blogging activities via python. Like one thing I'm working on will create and populate a wordpress blog (with the posts you write, not spam) using the wordpress SQL tables and media uploads. No practical purpose, just to learn. 
Sounds good, I will be checking py-mode. Thanks for the feedback :)
Write because you like writing, not because people might want to read.
Thank you for sharing your work. It's a good resource! :) 

those are some insightful tips.. I am learning idioms now :) 
will try there, thanks!
Thank you very much! 
I started with C++ at the University. A few years later we had to complete the assignments for a course in Python (with no prerequisite scripting language experience). This made me upset, so I enrolled in the edX course from MIT. I'm not sure if it makes me self-taught, but I definitely had to fight my way trough. A good advice if you plan to work with Python: Read the advanced Python materials (Fluent Python) after you have a good basis, even though you feel like you know the language. You'll be surprised.
Left college in 2003. We were "introduced" to C Java and JavaScript. Had never even heard of Python back then. Started using it in 2007. The curriculum was quite young those days, and industry experience that adds depth and utility today's curriculum was missing, so I have had teach myself pretty much everything I use now by being a student of great teachers who write great books, and make great MIT-OCW, Udemy e.t.c courses.
Well, writing without readers is not blogging, but journaling, and I already started that. :)
&gt; No practical purpose, just to learn. I love that! I am already planning to have some tag like "hacks" or something, where I can publish some of the stuff that I wrote just for trying something out, without any practical purpose.
Great Idea, I might actually do that :D When/If I do, the Bot's first post will be about itself.
Assuming it's under the original author's username, what you might want to do is create an *organization* on Git and have the owner *transfer* it there ... this saves you having to go through the same hassle in the future if you ever want to hand off the football yourself.
Hey there, I'd start with a single Python file and make it do simple things first. Once you are more comfortable with Python, you may want to break it into multiple modules and perhaps even a package. I have no idea about the complexity of your maths but the stdlib has [modules](https://docs.python.org/3/library/numeric.html) for that, or you can look at [SciPy](https://www.scipy.org/). When it comes to generating Word document, I haven't done that but a quick a look at PyPi may reveal some [interesting packages](http://python-docx.readthedocs.io/en/latest/index.html). Also, and that's personal really, I'd start with Python3.5+ if I were you.
Please do not ask the same question in both **r/python** and **r/learnpython**.
Gah, clickbait ... this time it's a LinkedIn post that tries to get you to click on a link back to the original that was posted like a week ago. Which is still bullshit, as only one of the 5 should even be considered something most serious Python devs even need to know about.
I like how the words "BE CONSISTENT" are the only words in all caps
Thanks! what is the benefits of Python 3.5 over 2 or 3? 
Transferring the repo to a GitHub org is definitely the way to go, since if you ever step down as maintainer it makes it really easy to give someone else access.
Heya, check out Anaconda, many things installed for Windows 64 bit already. You can then install the Mysql connector with: conda install mysql-connector-python and use it like this: import mysql.connector https://anaconda.org/
It's class not to reveal the package, but you left at least me curious now \^^
Python 3.x is the the one being actively worked on by the Python dev. It has taken a long time but most libs today support it and some don't even support 2.x anylonger. So, since you are about to embark on that journey, it probably stands to reason to start with 3.x. Just to look ahead, not back :) 
100% Self taught here, well, apart from the support from the helpful and smart people around me and about a 1000 different tutorials ;) Working as a backend web developer with Django, no CS degree and still in the process of figuring a lot of stuff out. If you come from nowhere (like I did, meaning no relevant background, not even engineering or something) there is a *lot* to figure out. Learning a programming language (Python is a good choice though) is only part of it. An important part, sure, but there's a whole ecosystem of stuff around it that will take you a while to figure out too (and that can be just as challenging). Don't let that stop you, but be warned ;)
You can use BeautifulSoup parser alongside lxml if you have to parse badly formed HTML files :) Cf: http://lxml.de/lxmlhtml.html#really-broken-pages
Hi /u/schedutron It would be really helpful to have a real documentation either directly in your README file and in something like https://readthedocs.org/ For now I am just not able to understand what you project is doing \^^
Wow! Nice! Much more rigorous approach I think. My code is really a naive implementation compared to this! Thanks for sharing.
This week target is making a simple Data Science project for absolutely Python beginners and put it on my blog.
Maybe they choked on that ridiculous version numbering scheme.
Same as your browser; make a best effort. It is up to you to decide if that is acceptable for your project. We scrape/extract a ton of stuff from random sites so it is convenient to not bail on a bit of shitty HTML if the data we want can be extracted from the mess just fine
Why not both? soup = BeautifulSoup(markup, "html5lib") But is is noted as being "Very slow".
Sounds like you need a PhD in the topic in order to code any non-trivial algorithm. I think our jobs are safe for the moment.
That is absolutely an option for people already familiar with BS, but for people getting started up I see very little value in beautifulsoup these days. &gt; But is is noted as being "Very slow". Yes, html5lib is written in pure Python and thus a fairly slow parser, would be great if somebody had the time to build bindings to a fast native html5 parser (Gumbo, html5ever, myhtml, libhubbub).
Note that there are always going to be many ways to do things, in any language. You can always add 1 and subtract 1 to integers.... The difference is that it is usually obvious what is the best way in Python. But note that "explicit vs implicit" is not the same as your follow up on the motto. Explicit vs implicit is more about writing the least surprising code; as little ambiguity as possible. The idiom is just about getting used to, I think there is no discussion that Python beats Java on that hands down.
I've saved this for later, it looks a great resource for someone learning the language like myself. I'm sure it will be on your site but if not, Learning Python by Mark Lutz is a great book. Quick Edit: it's the 5th Edition I'm reading, although I'm sure there might be a slightly newer version.
Yes. Look into [PyAutoGUI](https://pyautogui.readthedocs.io/en/latest/).
Ah, this is great, thanks :)
Time for a sabbatical hmm? :D
Thanks. Yeah Learning Python is a very thorough book. One of its kind, starting from the very basics and ending with very advanced concepts. A 1600 page behemoth. 5th edition is the latest version as far as I know.
I am 30 years old, and I am proud of myself as a self taught programer, I was only graduate from high school. to me, self taught is fun and very interesting. 
Thanks. Glad that it's helpful.
Most of what I learned in CS and Software engineering is self-taught. I've stopped going to school after the equivalent of high-school.
`val = val + 1` Something like that?
sounds good! thanks for the advice :) 
Right now, a visual novel engine.
Cool site. Please make a distinction between "free ebook" and "read online for free". The two are very different. For example unless I'm overlooking something [Automate the Boring Stuff](http://pythonbooks.org/automate-the-boring-stuff-with-python-practical-programming-for-total-beginners/) is *not* available as a "free ebook" (e.g. a downloadable .epub file) but can be read online as an html website for free. Which is still awesome btw, don't get me wrong, but it means I can't put it on my ebook reader to read on the train without wifi. I think it's the same for Learn Python the Hard Way.
ok, if it happens often enough. maybe people with more experience than me have encountered this more often, but basing it on the link posted above, i personally don't encounter completely broken html like that (tables where tr's are opened but not closed) often (or at all). https://www.reddit.com/r/Python/comments/62jmec/i_am_getting_a_very_bizarre_result_when_scraping/ i may add, that i do see the benefit of using developer tools and have your python tool html tree be the same as the one the developer tools generate (vs the "view-source" code) - as this is often cause for some inconvenience.
I've made a demo video linked in the current README. You're up and running when you open S-Koo-L.py 🙂. But yes, I need more documentation. Should've done it while I was building this, but I was a kid then!
Yes well aware of the challenges :(. My programmer friend said,"You should get used to the mental breakdowns, because there's gonna be a lot!"
Love it, would be interesting to see some stuff about creating an OS service/daemon that can automatically trigger an event, for example auto archiving files in specific directories, rather than running a cron job/windows schedule task.
Thanks and good point. I will change the labels in the next update.
C is also weakly typed
Please do let me/us know if you decide to do it, and where you end up putting it.
Do it! I would like to read stuff like that. I like stuff like https://github.com/NARKOZ/hacker-scripts, and i have some scripts for me: - one that just spans "Have you opened a pomodoro yet?" as a notification on my desktop; - one that just make a slug of a text i give, create a .md file with a timestamp and the slug, and opens vim on the file for me. - one that notificates me if theres posts on hackernews, based on my keywords. Maybe thats not the kind of "automation" you mean, but i just scratch my on itchs. Im also starting with raspberry pi to automate stuff in my house. Would love to have more ideas reading a blog.
Working with NLTK and Scikit learn for training and classifying the product reviews.
Try out the subreddit "learnpython". 
You opened the prefs file only once and read through it. You will need to open it on each iteration of first loop.
What you need to do is either save the file content in a variable after you open it, either open the file before the second loop. for the first solution you need something like: "file_content = prefs .readlines()" and you make the second for to iterate over file_content for the second solution you just need to move line 3 before line 7
What are you using instead of PyGame? Do you have a link to the repo?
mySql doesnt work on python3 from my experience. Try pymysql. It worked good for my project
1. “Learnpython” sub. 2. Read the sidebar. It has useful stuff over there. Like code formatting. 3. The sidebar. It’s that way ———&gt;
Why don't you want to use the original git repo?
Thanks for the resource! I found several of these a few days ago. Trying to get into data analysis and machine learning. 
Your description of what you actually want to do isn't very clear. Add products to what? His online store? We don't know how his website works, so we can't answer for you. Does he store his products in a database? Hard coded in html files? Something else?
[Pastebin](https://pastebin.com/). I'm not going to read that monstrosity, and definitely not going to gout lines. 
Thanks and good luck with learning data science and machine learning! Which book did you settle on?
http://ideone.com/9f4XbB#sthash.ypTJ2a1M.dpuf fixed
I got the Think Stats and Think Bayes for now. Picked up the Think Python one as well today. May end up getting one of the non free ones in a few weeks. 
Does the website have an API to interact with? Or does it just pull the list of products from a database table? Retrieving and parsing the Excel file is doable, for updating the online store with the products list would depend on what mechanisms the storefront offers.
Hey I only started with python a month ago but I found this video, maybe it will help you: https://youtu.be/DEwgZNC-KyE
Over the phone you're likely to get some "What frameworks have you used?" "What libraries do you use?" questions. If you are actually going to be tested on python knowledge, the kind of questions I'd go for are things like: Whats the different between a generator and a list and when would you choose one over the other? What is a partial function? What is the GIL, why is it a problem and what are the common workarounds? What is the difference between a classmethod, a staticmethod and a property and why would you choose one over the others? How would you iterate over a list, keeping a reference to the index and value? What is a list comprehension, when would you use one? What is tuple unpacking? What does \*args and \*\*kwargs mean? How would you reverse a list? How would you remove duplicate items within a list? I could literally go on for hours. Basically, you need to know the standard library well in order to cover all possible questions, but questions about lists and dicts are probably the most likely. 
Are you sure this is the right link?
Looks like the pre-installed GitHub color scheme with the default GUI theme.
Oops, seems like I copied the link to the ad, that was before the actual video. I edited it, should be the right one now. Sorry:) 
Nice!
*Tabs or spaces?* **Tip**: if you say *tabs* you will be put on a black list and will never program again.
On line 48 you haven't closed the second parenthesis: enemydmgdealt = enemydmg * (random.randint(1,2) should be enemydmgdealt = enemydmg * (random.randint(1,2))
or you can use selenium if it's a web game or ui. http://www.seleniumhq.org/
Ah cool, I'll look into that as well :)
"Published on" being relative by default is bizarre.
*noob question* Why exactly is this, and doesn't IDLE automatically insert spaces when using tab to indent?
r/learnpython
Yeah, it's it ! Thank you !
How it's made: My bot scanned through all users that posted something in /r/Python during the last month and looked where else these users have posted stuff. It then generated this wordcloud based on that data. 
If it doesn't, I'm sure we could make it do so
In addition to what @ticketywho mentioned, you could also expect questions about how python treat variables.. What are mutable and immutable variables? What really happens when you modify a string? What is the best way to concatenate a string, considering strings are immutable? How do you create a copy of a list? All those questions involve memory, so, questions about how Python manages memory and cleans that up.. Another thing that wasn't mentioned is decorators: What is a decorator? How can you implement a decorator and why would you do that? You can also bring the context of your company.. Does it use Python for web? If so, maybe they will ask stuff about Django/Flask/etc.
Good point. Will change that to just "Published' soon, so that it can be read like "Published X years ago".
Maybe not a PhD, but definitely a super computer... But yeah, still a while away from being a widespread thing
I'd rather see an absolute date. Just my $0.02.
Definitely yes. Any large enough project has That One Query.
Only one? it's a lot for the shoulders of just one query... it should be amazing to justify that status :)
I think he means that one raw query that when you try to abstract it away causes a ton of performance issues. For reference, at a previous job there was on that handled the main search through a 500GB table of data. Putting it in the ORM caused a lot of issues for reasons management deemed not worth the time to investigate. 
FixedGearBicycle TIL...
I'm (semi)joking - it's not always one query. It's just that every big project I've seen has a query that's just really big and ugly and complicated and trying to make it work any other way slows everything down by a couple orders of magnitude, so you have to live with it.
Even when I use Sqlalchemy, sometimes I tune some queries that they look almost raw SQL, (sqlalchemy maps almost 1x1 to SQL)
Tabs are typically 8 spaces. This looks down right gaudy on screen. Its also a pain in the ass for 79 char line widths, because you run out of nesting space fast (yea unnested is better than nested sometimes you just gotta do it). Additionally, 4 spaces is not required in python, just consistency. I know a guy that writes python using 3 space indents. &gt; does IDLE do this One day youll be coding in some other IDE or maybe vim. These usually require you explicitly set that tabs convert to spaces, and how many. Idk the answer to your question, but I suggest you check the settings for that.
ORMs cover only a very small part of what modern SQL databases can do. If you limit yourself to this subset, you are doing it wrong. Have a look at my presentation "modern SQL" to get an idea what SQL can do knowdays. I don't think that any of these capabilities is used by any ORM (two times any, likely to be wrong in at least on case ;) http://modern-sql.com/slides 
[removed]
How is your skill level? 
While I admire the effort, the word cloud is a thing that should never have existed and you should feel bad for using it. 
Thanks for clarifying. So in most cases, you're using an ORM? What's the case with complex queries (not the simple CRUD operations).
Piss off
Know the basics. Can write CLI code for anything. Don't know any libraries yet. But can learn as the project goes.
Most projects I've seen used a mix of ORM for simple queries and raw SQL for complex queries (sometimes parsed into ORM objects afterwards).
Trying to run clustering on my fluid dynamics (shallow water) simulation results. I have waves, I track peaks on the waves, and I try to "guess" what are the different hydrodynamic regimes.
Top right corner. Not against it by any means but just thought that was a humorous one that doesn't necessarily fit the theme of the rest.
I agree. From your experience (which by being a fan of your blog I believe you have lots of), would you say most tech companies still use raw SQL in their code base? Or is it just legacy code and most of the new code is written with ORMs?
No no, IDLE does it - that was not a question. Apart from that I can see the advantage of using less spaces than a tab would require for indentation, that's a valid reason indeed. Although I have never heard anyone REQUIRING this, as it rather sounds like personal aesthetic preference.
[removed]
Sounds good to me, I know the basics as well but haven't worked on any projects yet. If you wanna work on something together PM me. 
They'll probably ask about the difference between mutable and immutable objects - make sure to look that up.
Yes, those hacker-scripts are very inspirational :) My own stuff is all over the place, including some stuff like yours (like popping up my emacs org-mode agenda when I unlock the screen, but this one is not (yet) in python). 
What is PEP8? If they ask that they're a decent python shop.
Pretty sure self coding AI won't ever be something useful. Maybe for self repair, but beyond that doubtfull
Please don't do this. Here are a few reasons why: * shipping secrets in the clear is a bad idea * shipping secrets in a package, private or otherwise, is an even worse idea * shipping unversioned (a tag is _not_ a version!) source code as a requirement is a _still worse_ idea (the Go community has done a great job demonstrating what a giant pain in the ass this is) * depending on the presence of a specific user account to access dependencies is also a bad idea A much better way, contrary to the author's advice, is to host a private package repository (like devpi) and host it inside a VPN. If you can't/won't run a VPN (which you should, it's cheap and easy), run it in the open, restrict network policy as much as practical, and authenticate with client certificates.
thx
When you create `prefs`, it's a file object. Try just appending `.read()` to the call to open, and then `prefs` will be a string variable with the file contents, rather than a file object which gets consumed as you iterate over it. That should fix your problem. `prefs = open("prefs", "r").read()` *Edit:* as somebody else mentioned, `readlines()` is also an option, and would likely result in behaviour closer to your current implementation. Then you'll get a list of strings, one for each line, similar to iterating over a file object (one line at a time). If you use `read()` then it returns a single string, not a list of one string per line. Iterating over that, you'll likely end up iterating over characters instead of lines, and would have to modify your logic to account for that. 
"askgaybros" ...
For reading the file you can save the excel file as csv and use `csv` or use `openpyxl` for the excel file. To upload them you can see if "nopcommerce" has an API or if not, use page scrapping to fake the requests through the admin panel (if it's standard ASP.NET, then in my experience it can be a bit tricky with some of it if you want to just use requests and bs4)
I cannot give a sensible answer to this question due to my "client bias". People who hire me usually use raw SQL. But I think people are less likely to hire me if they use only ORMs. I can however say that raw SQL is still written—a lot. I just cannot judge whether this observation applies to "most" companies/code.
Thanks!
Could you give us a list like this? 1. &lt;Subreddit&gt;: &lt;number of subscribers from r/python&gt; 2. &lt;Subreddit&gt;: &lt;number of subscribers from r/python&gt; 3. &lt;Subreddit&gt;: &lt;number of subscribers from r/python&gt;
What language did you use to make the bot? /s
Creating an app/forms for a coworker to turn their text/word docs into JSON files that are emailed to me so that I don't have to copy pasta them into a new HTML document every month. Should lessen the amount of errors and misses from copy pasta and streamline the process.
I did not expect the dominant listed sub to be one I've never heard of...
IIRC pep8 calls for 4 space indention. But you are correct that it is largely an aesthetic preference, at least with space count. Tabs are unneccessary.
The article briefly mentions NumPy and I get that this seems to be focused on the standard library, but NumPy is so pervasive, I would have been really interested to learn when, if it's available, I should choose NumPy over `array.array`
I'll be honest, I love this module.
You can have the raw data: https://pastebin.com/AqzRzUts. Each value tells you how many /r/Python users are active in what sub if each sub would have the same size.
Mine are in python because i wanted to start with python but didnt want the same old project examples. They are no polished but works hahaha.
&gt; How would you remove duplicate items within a list? Can I change the order of items? ;)
Thanks!
Whitespace Brainfuck
[removed]
He didn't. Mods did. His comment is still visible through his profile page. For the record, I'm not defending his position.
That's an interesting idea. So far I rely on the windows task scheduler, but implementing a service in python might be possible, too.
Here you go: https://pastebin.com/ThuPnvT7 Edit: In that particular format: https://pastebin.com/fQn3MKwa
You can
here's the top 100 1. kubernetes: 14164 1. flask: 13962 1. django: 10340 1. openstreetmap: 10211 1. learnmachinelearning: 9605 1. learnpython: 8639 1. getnarwhal: 8574 1. IPython: 7589 1. pygame: 7524 1. AskProgramming: 6851 1. programmingcirclejerk: 6378 1. elm: 6156 1. ansible: 5701 1. processing: 5526 1. homeassistant: 4785 1. Rlanguage: 4396 1. linuxquestions: 4300 1. github: 4248 1. LanguageTechnology: 4100 1. devops: 3984 1. elixir: 3853 1. AskStatistics: 3791 1. MLQuestions: 3608 1. git: 3579 1. emacs: 3491 1. rust: 3369 1. LaTeX: 3285 1. vim: 3258 1. golang: 3184 1. GoldandBlack: 3109 1. docker: 3024 1. linuxmemes: 2827 1. laravel: 2747 1. lisp: 2575 1. linuxmasterrace: 2501 1. archlinux: 2493 1. datascience: 2376 1. MacOS: 2369 1. cactus: 2361 1. AskNetsec: 2273 1. linux_gaming: 2249 1. linux: 2049 1. linuxadmin: 1805 1. commandline: 1709 1. debian: 1700 1. gamingsuggestions: 1669 1. thinkpad: 1667 1. SQL: 1660 1. selfhosted: 1633 1. aws: 1599 1. programminghorror: 1594 1. ITCareerQuestions: 1574 1. opensource: 1551 1. ProgrammerHumor: 1550 1. MachineLearning: 1541 1. ontario: 1507 1. factorio: 1455 1. dotnet: 1415 1. cpp: 1377 1. mechmarket: 1321 1. unixporn: 1228 1. bicycletouring: 1228 1. security: 1208 1. FierceFlow: 1190 1. shittyprogramming: 1189 1. java: 1146 1. TOR: 1095 1. amateurradio: 1088 1. haskell: 1086 1. Ubuntu: 1085 1. programming: 1068 1. firefox: 1058 1. linux4noobs: 1042 1. AskElectronics: 1035 1. PHP: 1010 1. ukpolitics: 1007 1. rails: 1002 1. algorithms: 996 1. csharp: 991 1. node: 986 1. statistics: 983 1. javascript: 961 1. retrobattlestations: 948 1. macsetups: 945 1. btc: 918 1. chromeos: 883 1. chrome: 874 1. pebble: 872 1. arduino: 869 1. ruby: 862 1. pokemongodev: 860 1. learnprogramming: 849 1. bjj: 847 1. AirForce: 840 1. CanadaPolitics: 832 1. sysadmin: 820 1. learnmath: 816 1. cscareerquestions: 799 1. Kayaking: 783 1. AskOuija: 770 [View all these subs in one link](https://www.reddit.com/r/AirForce+AskElectronics+AskNetsec+AskOuija+AskProgramming+AskStatistics+CanadaPolitics+FierceFlow+GoldandBlack+IPython+ITCareerQuestions+Kayaking+LaTeX+LanguageTechnology+MLQuestions+MacOS+MachineLearning+PHP+ProgrammerHumor+Rlanguage+SQL+TOR+Ubuntu+algorithms+amateurradio+ansible+archlinux+arduino+aws+bicycletouring+bjj+btc+cactus+chrome+chromeos+commandline+cpp+cscareerquestions+csharp+datascience+debian+devops+django+docker+dotnet+elixir+elm+emacs+factorio+firefox+flask+gamingsuggestions+getnarwhal+git+github+golang+haskell+homeassistant+java+javascript+laravel+learnmachinelearning+learnmath+learnprogramming+learnpython+linux+linux4noobs+linux_gaming+linuxadmin+linuxmasterrace+linuxmemes+linuxquestions+lisp+macsetups+mechmarket+node+ontario+opensource+openstreetmap+pebble+pokemongodev+processing+programming+programmingcirclejerk+programminghorror+pygame+rails+retrobattlestations+ruby+rust+security+selfhosted+shittyprogramming+statistics+sysadmin+thinkpad+ukpolitics+unixporn+vim/)
I will, definitely. The decision is made, I'll post an update when I have a blog post online. Thanks for the encouragement!
Plenty of shit coders write PEP8 compliant spaghetti.
To be honest I find this list strange. e.g the top #8 one, r/ipython is basically a ghost town. Maybe it's just because ppl join subs and totally forget about it after?
Brilliant 
x2
np.array are mostly used for numerical values where array.array can be used for other basic types.
Why?
So did it count the number of posts the users made in the other subs, or the number of users who posted in those subs? Because the #1, /r/kubernetes, has less than 3k subscribers, as compared to you ranking it at 14k. Something seems odd.
**Here's a sneak peek of /r/kubernetes using the [top posts](https://np.reddit.com/r/kubernetes/top/?sort=top&amp;t=all) of all time!** \#1: [Kubernetes 1.7: Security Hardening, Stateful Application Updates and Extensibility](http://blog.kubernetes.io/2017/06/kubernetes-1.7-security-hardening-stateful-application-extensibility-updates.html) | [0 comments](https://np.reddit.com/r/kubernetes/comments/6keehp/kubernetes_17_security_hardening_stateful/) \#2: [Kubernetes 1.6: Multi-user, Multi-workloads at Scale](http://blog.kubernetes.io/2017/03/kubernetes-1.6-multi-user-multi-workloads-at-scale.html) | [3 comments](https://np.reddit.com/r/kubernetes/comments/622gxg/kubernetes_16_multiuser_multiworkloads_at_scale/) \#3: [Kubernetes clusters for the hobbyist](https://github.com/hobby-kube/guide) | [8 comments](https://np.reddit.com/r/kubernetes/comments/66bunp/kubernetes_clusters_for_the_hobbyist/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
I like the idea of this, thanks for the release!
Maybe the [itertools](https://docs.python.org/2/library/itertools.html) library has something that would be helpful. But this one-liner does it I think: &gt;&gt; my_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]; &gt;&gt; outcomes = [(i, a) for i, l in enumerate(my_lists) for a in l] &gt;&gt; print(outcomes) [(0, 1), (0, 2), (0, 3), (1, 4), (1, 5), (1, 6), (2, 7), (2, 8), (2, 9), (2, 10)] 
https://github.com/rg3/youtube-dl
Looks nice, I'm playing with it right now. ([github](https://github.com/jd/daiquiri) link) 1) The name you chose is really hard to type, I don't like it. 2) None of your examples work because your default log level is `logging.WARNING` and they all use `.info`
Hey, can you check this classification algo which utilizes Scipy on whether my hot jocky best friend is gay? /s
Programmingcirclejerk at #11 and programming at #71. I love that.
I enjoy this one to keep up to date on the python ecosystem: https://pythonbytes.fm/ 
Maybe I wasn't clear enough; with your example, I'd want to generate [1,4,7], [1, 4, 8], [1, 4, 9], [1, 4, 10], [1, 5, 7], [1, 5, 8] ... etc.
/r/Trumpgret. That was unexpected.
am I the only one that lol'd over the fact that "factorio" and "ontario" are adjacent?
&gt;am I the only one Probably not
I think I may have found a solution: https://stackoverflow.com/questions/798854/all-combinations-of-a-list-of-lists
You're most welcome!
Missing /r/kivy!! 
In that case: &gt;&gt; from itertools import product &gt;&gt; my_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]; &gt;&gt; outcomes = list(product(*my_lists)) &gt;&gt; print(outcomes) [(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 4, 10), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 5, 10), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 6, 10), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 4, 10), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 5, 10), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 6, 10), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 4, 10), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 5, 10), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 6, 10)] Since the list gets very large with lots of lists, ```itertools.product``` returns an iterator which you can use without having to hold all the values in memory at once.
Yet another victory for emacs over the other editor.
I have a hard time believing /r/programming would be that low...
Yep. Orms are okay for basic CRUD and simple queries but if you start doing more complicated stuff you'll likely hit performance issues which is where a bit of SQL knowledge comes in handy.
Did they scan all subreddits, or just programming? It would be funny if Python Users had a high rate of visiting something like movies or health.
Yea, that seems to be what happened, I suspected it before I even started to compare numbers. I'm surprised more people aren't pointing that out.
I applaud their marketing methodology... and, dammit now I'm subscribed.
Also /r/esist and /r/LateStageCapitalism :)
I use the Anaconda python distribution as it has most everything I need compiled into one package.
The font size represents the orders of magnitude a user from this sub is more likely to be active in that sub compared to the average redditor. So since that sub is small and a lot of users this month were active there we get such an unintuitive result. I agree. It is a little misleading. 
You could make a new repo at that time. 
Thanks, it sounds like this is what I will attempt to do. Hopefully he comes back.
I use the standard Python installation (generally version 3.6.1, looking forward to 3.7).
That's a good point, though you wouldn't have the commit history. While I currently have long term employment, it's as a freelancer, and I'd like future employers to be able to see my work. Since most of the work I do is in private repos, I don't have much work to showcase.
Absolutely. I can write complicated queries and joins with subqueries, etc. that I can't do with a normal ORM. And if I can, it won't be nearly as easy to read as SQL. Most of the time I can use the ORM, but when I need to aggregate a bunch of data with a bunch of joins, chances are I'm writing raw SQL.
Do you use pywin32 and if so how do you install it?
So many Canadians
&gt; Tip: if you say tabs you will be put on a black list and will never program again. At my work, we have precisely one coding standard, which says "PEP-8 is wrong. Use tabs."
Knowing raw SQL is very important even if you are using an ORM. As has been brought up by many people in this post already you will inevitably run into queries that the ORM has performance issues with. If you are doing anything more complex than CRUD, you will one day run into a query that the ORM just can't handle well. In addition all the ORM is doing is building SQL queries in the background, so eventually you will need to go and debug something and need to see what SQL the ORM is generating.
You would still have the repo locally, so you would keep the commit history. Unless of course you don't have the repo locally. But most people will have a fork on GitHub. 
Ah, so I should do any work on my forked branch and then merge it into the original repo?
https://github.com/spyder-ide/spyder/issues/4678 here is the issue, and its resolution. In short, `sudo dnf install python3-qt5-webengine` does the trick.
It's just not *pythonic* enough!
Yes, to his online store. The products are in a database stored. Every info is there. The links to the images too. 
Please tell me it's one script that runs in both. 
I don't usually use it, but if I need it: 1. Try PIP 2. If fails, google "pywin32 wheel", get the .whl file and try installing it 3. If fails, check if it requires a prerequisite and install if needed/possible 4. If fails, "Screw this, I'll just do this on Linux through a VM!"
Afaik everything works via the database. But what if there is an API? How could I work with it? Any book, or more info on how to work with Python and APIs?
I find a lot of info online, but something so specific I would like to learn. Is there any book/guide to help me communicate with the website via the API?
You can, or just push directly, it is your project now. Even if you don't push to your fork, you will have the commits locally. The main reason for pushing to the fork and creating a Pull Request is so that someone can review the Pull Request. 
I pay the bills as an Oracle dev. You better believe I write SQL. ORM is great if you have a thing and want to persist the thing. If you want to operate over the entire dataset then you need to speak to the database on it's own terms.
I don't think I understand. I don't currently have ownership of the original repository, but I do have a fork. Locally I have a clone of the original repository. So if I continue to work on that, I can push directly to the original repository, but if the original author deletes the repo for whatever reason, then what happens to the old commits? This looks like it may be what I'm looking for: https://help.github.com/articles/duplicating-a-repository/#mirroring-a-repository Also, another reason, is that there are open issues on the original repo. If the original repo gets deleted, won't those disappear?
I'm sorry, I was hoping that this would be an index of the "best" books (per the title). I'd love to have only one (or maybe two) books of each type. The rest could be listed as "also in this category but not the best." Thank you for putting it together. 600 Python books. We are spoiled with riches. Personally, with decades of programming and software engineering under my belt, I have decided that "Python in a Nutshell" (which is only one step above a language spec) is perfect for me to learn Python.
Could you be so kind as to share your code? 
~~Sorted:~~ nvm, if I had scrolled down like 3 more comments I would see it was here already... 
So you know you want to take data out of an excel spreadsheet, and into a database? Python can definitely do that. I don't think there's any APIs to worry about, your friend would first have to build an API into his store website for you to access. [openpyxl](https://openpyxl.readthedocs.io/en/default/) will get you reading the excel file. The database choices are still a little unclear because you didn't say what he's using, but [mysql](http://mysql-python.sourceforge.net/MySQLdb.html#some-examples) would probably be the most common.
The official distribution is still on SourceForge - https://sourceforge.net/projects/pywin32/files/pywin32/ Alternatively one could use a wheel from Christoph Gohlke - http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32
Almost completely self-taught in Python (~4 years experience) and considered one of the 'company Python gurus' in a major software company. 
Yep, it uses MySQL. 
Search for "tuple unpacking Python". See: http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#swap-values 
hey man, thats a pretty cool skill...can you sniff Pakistanis too, we have a serious problem back here identifying them. do let me know!! 
Looking good for my 20min commutes. Gonna check that out, thanks!
I'm just using raw tkinter graphics (with the Canvas widget) and crappy gif images that I pull out of my sleeve every two minutes on paint.net. Just a horrible lightweight holiday project.
I've also decided that I can't make it multiplayer because I do most of the programming traveling. Instead, I'll probably make a basic opponent AI
It doesn't matter if the other coders on your team are sorry. What does matter is if they follow a standard. Generally you start programming without it and only later move on to standards. 
What /u/goodger mentioned will help explain what the commas are for. As for why the code does different things... I'm guessing it's because the order of operation is different.
Glad to be apart of it :D
I used anaconda for a while, but with the advent of Ubuntu on Windows 10, I just use that now. EDIT: Which is to say I just use the version of python that version of Ubuntu uses. If I need something else, I just use virtualenvs, etc. as you would on linux.
:D
The difference in the order in which you assign `a = b`. Using the initial assignment of `0` and `1`, there is no difference between a, b = 0, 1 and a = 0 b = 1 That's largely in part because you're assigning literal values. Inside the `while` loop, however, you are using variables in the assignment. a, b = b, a + b When you do this (assignment using tuple unpacking), Python will evaluate the tuple on the right before unpacking its values for assignment to the left. (Parentheses added for clarity of the explanation.) (a, b) = (b, a + b) (a, b) = (1, 0 + 1) (a, b) = (1, 1) assert a == 1 assert b == 1 That right there is no different from b = a + b a = b assert a == 1 assert b == 2 But what happens in the next iteration? (a, b) = (b, a + b) (a, b) = (1, 1 + 1) (a, b) = (1, 2) assert a == 1 assert b == 2 Your second example would fail these assertions. b = a + b b = 1 + 1 b = 2 a = b a = 2 assert a == 1 # This will raise AssertionError assert b == 2
You should use one of the python graphing libraries. The usual recommendation is `matplotlib`, but one of my personal favorites is `pygal`. The documentation for both of those should tell you how to make the graph, and how to send it out in the image format of your choice.
Spaces are preferred to tabs because it ensures consistency. Tabs can be rendered differently on different systems -- usually four or eight spaces in width.
if the title is correct, that that doesn't mean it's the dominant... it means it has the largest deviation from what subs the average redditor visits. IMO it isn't all that useful.
Okay, so you know how you have to use a list for each line, and each entry on the list represents a different point on the x-axis? Create a list for each class of motors. This list is split by day, so each day should include the number of motors in that class, produced on that day. You can create this list functionally by iterating over each day's dictionary.
You have the commits locally in your local clone of the repo. You can push them to another GitHub repo or another hosting website. Yes the issues will dissapear.
You use the keys to reference a value in the dictionary. If you have a dictionary for each day, *create* a list using the values for each day. Use that list to plot the graph.
I bet you're one of the traitors subscribing to Ruby and Rails. Low self esteem and disloyalty are common traits of emacs users.
It's pretty informative as long as you're clear what I'd actually being measured. Otherwise I'd imagine the former default subs would drown everything out.
Hey, I made this and just now discovered during publishing the existence of [maid](https://github.com/benjaminoakes/maid), a similar program written in Ruby. Maybe some of you might still appreciate it and have suggestions (besides writing more documentation, which is an issue I'm aware of).
I guess. I'd rather it ranks all subs that your average reddit doesn't visit by the most visits. You'd filter out the subs that 'your average redditor' visits and the cut-off would be some low percentage or low visit number that is an indicator of loose correlation between 'your average redditors'. or maybe that is what's happening here, and i'm just confused by the title 'ranked by deviation from the average redditor) I'm interested in what that means, at any rate, because I still don't know what kubernetes is or why it's the most popular in this list.
I'm not the library author, I follow his blog and see that this new post have not been post yet. 
Thanks :)
Is it number of users or number of activities? It seems like it must be the latter and a handful of active users are skewing things. 
Refer to github for proper formatting of the code I used. The while loop got butchered up there.
it can be easily installed with pip: `pip install pypiwin32`
&gt; why it's the most popular in this list. 'cos hardly any of its subscribers aren't also subbed to r/Python? 
Number of activities in a sub is irrelevant. As long as there was at least one activity in the last 50 posts and comments it gets counted.
What if ECHO starts high? The while loop never runs, and "start" never gets defined. It would be better to do this: while GPIO.input(ECHO) == False: pass # do nothing start = time.time() # while loop is done, assign the variable --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Well, remember that your program needs to handle *any* number of days. I'd actually reorganize how you're storing the data, so you have one dictionary, where each key is the class of engine, and the values are a list, like so: motors = {"A":[day1,day2,day3,...,dayX],"B":...} And you can handle any number of days by just appending to motors[class] for that class of engine, and you can pull out the list by just referencing motors[class] for that engine.
what can I say, we like pythons
I used to use that under 3.5 but, although it installs under 3.6, it doesn't seem to work - can't import any names from it. It also looks like it's installing under the wrong name (pypiwin32_system32) 
that's a really good point, but the statistic doesn't focus on what % of other subreddits are entirely or almost entirely consist of /r/python users. It focuses on the other non-default subs that /r/python users also use the most. You might find a sub high on that list that both /r/python and /r/java users sub to quite a bit, in which case your statement doesn't translate very well. i'm looking for a single statement that describes and applies to why all of the subs are in this top-250.
IDEs and pep8 formatters mean that PEP8 is so easy to follow, that many people do it without realising they're doing it. The idea that a company asking you about PEP8 in an interview means anything about the quality of that company is just a little bit silly. Better indicators of quality: A build wall in clear view in the dev office which is all green. An emphasis on testing techniques in the interview A mature development lifecycle, whether its scrum/kanban/Lean/etc A tech lead who is smarter than you. 
&gt; You might find a sub high on that list that both /r/python and /r/java users sub to quite a bit, in which case your statement doesn't translate very well. I don't think the data really capture that, do they? AFAIK, /r/java isn't massively popular with "the average redditor", so it isn't really going to impact the rankings, is it? 
 fd = open("some_file", "wb") fd.write(b"\x41\x42\x43") This?
What version of python and what OS are you using? 
This 
That could do it. I was missing missing the b! I also had a variable in the write argument that wrote 10000 A's opposed to anything I care to type manually
3.6, any OS tbh.
1. You need to use `yield` instead of `return`. 2. /r/learnpython
To make a generator, you need to use `yield` instead of `return`. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Are you sure you need tkinter, and not something like [curses](https://docs.python.org/2/howto/curses.html)? 
Sorry it was meant to be yield, I do know that idk why i had return
I told you how to get it done already, you need to figure out how to implement it using your current setup, or how to change your setup if the current setup won't allow you to solve the problem.
and apparently not very low on the list. 
well, subs like trumpgret, resist, and latestagecapitalism are on there, so they did in fact go through all. but a lot of the folks who are heavy on other subs are probably pretty casual here, and i'd imagine the more you're active in this sub the more weight your results have. 
/r/dataisbeautiful
So what's the problem here? That output seems correct for the values in `range(3)`...
&gt; but in the next iteration? It continues wherever it left off. There doesn't necessarily need to be any iteration involved. &gt; How/when does the function start again and know to start the next iteration? It resumes when you ask for the next value. The for-loop in your example is retrieves the next value of the generator, but again that's not necessary: &gt;&gt;&gt; def example_generator_function(): ... print("I'm starting") ... yield 1 ... print('continuing') ... yield 2 ... print('continuing again') ... yield 3 ... print('finishing') ... &gt;&gt;&gt; gen = example_generator_function() &gt;&gt;&gt; next(gen) I'm starting 1 &gt;&gt;&gt; next(gen) continuing 2 &gt;&gt;&gt; next(gen) continuing again 3 &gt;&gt;&gt; next(gen) finishing --------------------------------------------------------------------------- StopIteration Traceback (most recent call last) &lt;ipython-input-6-8a6233884a6c&gt; in &lt;module&gt;() ----&gt; 1 next(gen) StopIteration: 
Then you are all set.
As someone else said: * Step 1: Download and install Anaconda from here: https://www.continuum.io/downloads/%E3%80%82 * Step 2: conda install pymysql * Step 3: Start programming import pymysql conn = pymysql('myhost', 'mydb', 'user', 'pw') cur = conn.cursor() # get a cursor results = cur.execute('select ...') for row in cur.fetchall(): print(row) 
V A P O R W A V E
Thanks for numbering them all
I just never bothered to learn an ORM and was fine with writing SQL .
Woooo /r/bjj i'm only casual here, but I roll with a lot of programmers and I.T. pros.
Are you able to post this list in a readable format?
I (think I) see what you did there.
Nice explanation, thanks.
A generator is a function that acts like an iterator. By using yield instead of return, you are telling that function that it may return multiple values which can be accessed in a for loop (like in your example) or by using mygenerator.next(). The important difference between this and just returning a list from a function, is that the generator runs the code in the function that defines it each time it yields something. In your case its only running i*i for each case, but lets say you were wanting to create a generator for objects read from a text file that is 100gb in size. Obviously you couldn't have this all in memory on a standard workstation which may only have 16gb memory total - so you're stuck if you want to load that text file into a list. However if you create a generator that reads the text file one line at a time, processes it, yields the value and clears it from memory, then reads the next line (etc), you would not run out. Additionally the `yield` does not have to be the last line in the function. You can yield something, then have extra logic run afterwards (ie: add print(i) under the yield statement in your example). Conversely calling return will finish that function call immediately. 
Using Anaconda will save your sanity at some point. 
Thank you for the reply
I tend to use the ORM when I need the data to do a bunch of stuff in a bunch of different places, and I fall back onto raw SQL when the join is either very complicated/slow or raw transaction speed is of the essence. One little program was writing thousands of rows a second and the ORM, even as good as sqlalchemy is, was adding too much overhead to the transactions. Memory leaks and race conditions began to pop up when I tried to accelerate the program. Reverting to executemany through a bare SQL db wrapper (or even using the sqlalchemy "core" api) was the simplest way to unthrottle the program and let it fly.
Someone should write a book about that "one" query and all the myriad of techniques developers come up with to resolve them. I ended up shoe-horning postgres materialized-views into my sqlalchemy model to sweep one problem query under the rug.
Yes. I'm a former DBA and I've been on the wrong end of ORM generated sql several times. If query performance matters to you then knowing what sql you're using is a good step.
Same thing here. I was looking through and was kinda like "ok, ok, ok, ...WTF what does that have to do with Python!?"
You can't list who is subscribed to any subreddit, only people who actively post.
The thing most people don't tell you about scraping is. When you're dealing with a JS heavy site. BeautifulSoup nor Scrapy can do it. You'll need selenium or phantomjs to simulate a browser. and you're better off learning xpath. Because you'll be able to have better control on getting elements on the DOM
here's the top 100 1. /r/kubernetes: 14164 1. /r/flask: 13962 1. /r/django: 10340 1. /r/openstreetmap: 10211 1. /r/learnmachinelearning: 9605 1. /r/learnpython: 8639 1. /r/getnarwhal: 8574 1. /r/IPython: 7589 1. /r/pygame: 7524 1. /r/AskProgramming: 6851 1. /r/programmingcirclejerk: 6378 1. /r/elm: 6156 1. /r/ansible: 5701 1. /r/processing: 5526 1. /r/homeassistant: 4785 1. /r/Rlanguage: 4396 1. /r/linuxquestions: 4300 1. /r/github: 4248 1. /r/LanguageTechnology: 4100 1. /r/devops: 3984 1. /r/elixir: 3853 1. /r/AskStatistics: 3791 1. /r/MLQuestions: 3608 1. /r/git: 3579 1. /r/emacs: 3491 1. /r/rust: 3369 1. /r/LaTeX: 3285 1. /r/vim: 3258 1. /r/golang: 3184 1. /r/GoldandBlack: 3109 1. /r/docker: 3024 1. /r/linuxmemes: 2827 1. /r/laravel: 2747 1. /r/lisp: 2575 1. /r/linuxmasterrace: 2501 1. /r/archlinux: 2493 1. /r/datascience: 2376 1. /r/MacOS: 2369 1. /r/cactus: 2361 1. /r/AskNetsec: 2273 1. /r/linux_gaming: 2249 1. /r/linux: 2049 1. /r/linuxadmin: 1805 1. /r/commandline: 1709 1. /r/debian: 1700 1. /r/gamingsuggestions: 1669 1. /r/thinkpad: 1667 1. /r/SQL: 1660 1. /r/selfhosted: 1633 1. /r/aws: 1599 1. /r/programminghorror: 1594 1. /r/ITCareerQuestions: 1574 1. /r/opensource: 1551 1. /r/ProgrammerHumor: 1550 1. /r/MachineLearning: 1541 1. /r/ontario: 1507 1. /r/factorio: 1455 1. /r/dotnet: 1415 1. /r/cpp: 1377 1. /r/mechmarket: 1321 1. /r/unixporn: 1228 1. /r/bicycletouring: 1228 1. /r/security: 1208 1. /r/FierceFlow: 1190 1. /r/shittyprogramming: 1189 1. /r/java: 1146 1. /r/TOR: 1095 1. /r/amateurradio: 1088 1. /r/haskell: 1086 1. /r/Ubuntu: 1085 1. /r/programming: 1068 1. /r/firefox: 1058 1. /r/linux4noobs: 1042 1. /r/AskElectronics: 1035 1. /r/PHP: 1010 1. /r/ukpolitics: 1007 1. /r/rails: 1002 1. /r/algorithms: 996 1. /r/csharp: 991 1. /r/node: 986 1. /r/statistics: 983 1. /r/javascript: 961 1. /r/retrobattlestations: 948 1. /r/macsetups: 945 1. /r/btc: 918 1. /r/chromeos: 883 1. /r/chrome: 874 1. /r/pebble: 872 1. /r/arduino: 869 1. /r/ruby: 862 1. /r/pokemongodev: 860 1. /r/learnprogramming: 849 1. /r/bjj: 847 1. /r/AirForce: 840 1. /r/CanadaPolitics: 832 1. /r/sysadmin: 820 1. /r/learnmath: 816 1. /r/cscareerquestions: 799 1. /r/Kayaking: 783 1. /r/AskOuija: 770
How did you calculate the average redditor's likelihood to participate in a sub?
With the tuple unpacking strategy you are evaluating two calculations into a tuple result, then unpacking this tuple into the respective variables. In the second function you are working out the result of `b` then working out the result of `a` the problem being that you are using the new value of `b` instead of the old one. So in order for them to behave the same you need a variable to hold the previous value of `b`before you reassign it so you can then assign it to `a`. 
The one that paid the most.
Am I the only one that thinks this bot is stupid ?
Stop saying that
Do you like dicts?
So I tried looking it up.... &gt;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications. Okay, but what does it *do*?
&gt; If fails, "Screw this, I'll just do this on Linux through a VM!" At this point, you don't need pywin32. 
Generators in python are coroutines, normal functions and methods are subroutines. The difference is that a subroutine takes some input and returns soe output, after that the subroutine is done. A coroutine takes some input and yields multiple outputs. Basically after every yield it yields some stuff pauses itself and wait for another call to continue after the current yield. Yield is used as some kind of breakpoint that also squeezes out some data if you want, but that is not necassary. You can even send some new data into the coroutine and work with it. Python uses this behaivor to build iterators and for asynchronous coroutines too. Here a simple printer that waits for messages with `send` and throws some injected errors, that can be used to control the coroutine more specific. In [1]: def printer(): ...: while True: ...: msg = yield ...: print('Got: {}'.format(msg)) ...: In [2]: p = printer() In [3]: next(p) In [4]: p.send('Hello') Got: Hello In [5]: next(p) Got: None In [6]: p.send('world') Got: world In [7]: p.throw(ValueError) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-7-e235a427d77a&gt; in &lt;module&gt;() ----&gt; 1 p.throw(ValueError) &lt;ipython-input-1-615dac7b33d6&gt; in printer() 1 def printer(): 2 while True: ----&gt; 3 msg = yield 4 print('Got: {}'.format(msg)) 5 ValueError: And that are really the bare basics for the whole async stuff.
That is actually a pretty good idea. Get to it.
Argh! I wanted you to say "Your'e probably not the only one!'
I am 30 years old, and I am proud of myself as a self taught programer, I was only graduate from high school. to me, self taught is fun and very interesting. 
Serverless computing.
&gt; Otherwise I'd imagine the former default subs would drown everything out. People actually keep the default subs? First thing I do on a fresh account is remove them all.
It's like docker but with features beyond just putting the application into the container.
Wasn't one program or project. I got my first programming job because I was really interested in software development and being able to talk about how I enjoyed learning new things in my spare time and demonstrated the ability to see something I do or want to do and build software to help me accomplish it. that was enough to have a company see that I was a problem solver and someone they wanted working at their company. Don't spend too much time worrying about what to build. If something in your life makes you think "hmm bet I could build a program for this", do it. 
Wow, I think I'm literally the same person as you. Have you found any material for learning? I've mostly got basic knowledge of how to make a simple game.
The sidebar of this sub explains how to format the code so it shows up properly in your post. Don't just copy and paste.
Stupid bot
I &lt;3 dicts
emacs &gt; vim just sayin
I got you fam. Four stripe purple here though.
Thanks to binary wheels in pypi these days I am quite happy with plain Python.
I'm just a no stripe blue, but it's like crack to me. How long have you been training?
Four years now. It is crack!
There's a flask subreddit! Mind blown!
`bitarray` is another array data structure
'The Math of intelligence' - this guy won't ever stop getting cringier.
Streaming building models and textures to a realtime 3D citymodel
The article specifically refers to stuff from the stdlib only whilst bitarray is third party.
No, [array — Efficient arrays of numeric values](https://docs.python.org/3/library/array.html).
Curses won't work on Windows.
Exactly.
it can be used to store &gt; 'u' Py_UNICODE Unicode character 2 (see note) Which is hard to image in np.array. Also np.array can be multi-dimensional.
2. Check [pythonlibs](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
2. Check [pythonlibs](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
I'm sorry man I wish I could. I'm specialized in indians because they do their best to spread everywhere trying so hard to be like westerners and get noticed in the tech industry. You have to adapt and learn to sniff them, you know?! It's a tough job, but it pays in the end (or rather saves you money) if it helps you avoid them.
Yea, I'm learning from this book my friend shared with me. When did you learn how to use Python? 
(Hiring) Remote Front End Django Developer at Swappa LLC https://www.djangojobs.net/jobs/695/remote-front-end-django-developer-swappa-llc/ … Swappa is a user-to-user marketplace for buying and selling gently used mobile and gaming technology. Safety and simplicity is the core of our brand. Swappa is hiring a developer to help us run an eCommerce site to produce $100M in yearly sales. The Front End Django Developer role will be responsible for creating and implementing good looking, easy to understand, user-facing functionality. Your goal will be to improve commerce through good implementation. The ideal candidate must be able to implement good looking, usable interfaces from specs or from scratch. #python #django #remote #hiring #frontend
I wanted to learn how to make GUIs in Python, as well as creating something useful on a almost-daily basis... So i made a game launcher using GTK ! As there is no GOG client for Linux, i thought it might be as interesting as useful. It detects the folders (representing the games) inside the root installation folder, and for each game, creates a button allowing its selection. Then, I can launch or uninstall said selected game. I'm pretty proud of it, since I'm a total beginner, and have never had other projects than homework-style code to do. if you want to see it, it's over [there on GitHub](https://github.com/Picoma/Game-launcher), if you want to have a look, or even use it ^((even though i'm pretty sure there's somting better that exists...)) Thanks ! 
Still waiting for an asyncpg orm so yeah
&gt;How would you iterate over a list, keeping a reference to the index and value? What is an elegant way to do that ? I always do a c-style for loop but it is ugly. 
 for i, v in enumerate("abcde"): print("index: %s, value: %s" % (i, v))
 reps = 10000 fd.write(b'\x41' * reps) 
Took a brief class in game programming. I barely know any of the commands- it was very focused on games- so I'm now trying to learn from past lectures on MITx's Intro to Python course. 
Well good on you!
😃impressive 
/r/factorio makes a lot of sense. Like... a lot of lot of sense.
pytest give me so much fun while testing my code. Furthermore, with TDD pytest is very fast.
It may not help but I did something very similar with scrapy recently, here's the code: https://gist.github.com/mdamien/7b71ef06f49de1189fb75f8fed91ae82
 for i, v in enumerate(my_list): print("this is the index: {}".format(i)) print("this is the value: {}".format(v))
Thank you very much! This worked!
Suomi mainittu! Torilla tavataan to-ril-la! 
So I just finished the interview and it went extremely well. Thank you everyone. Every single person posting in this thread contributed to me getting a positive feedback. Thanks to you I was able to prepare - something I needed to do due to my lack of technical vocabulary. If anyone is curious about the interview itself, it was conducted via google hangouts and was split into 2 parts - knowledge based and practical. The practical part (writing bits of code) was easier for me, however, due to your help I was also able to answer most of the knowledge-based questions. The questions themselves were a lot like the ones you gave as examples. At the end,the guy decided to recommend me to my manager as a junior python dev. Thank you once more :)
Thanks! I was able to follow the others' advice and install anaconda and was finally able to get a connect to my mysql database. It installed python 2.7 to work, though so I guess you're right about python3 not working with mySQL. I wonder why 
Thank you very much! THis worked perfectly!
Emacs? There's even an official [mode][1] for that. [1]: http://docutils.sourceforge.net/tools/editors/emacs/rst.el
Wait, how would pass... oh, never mind, this isn't going anywhere productive. Good luck in the job search!
Useless code to close a block is exactly what Python was designed to get rid of. If your "architect" knows better, he should use another language or design his own.
He's a self-taught C programmer. He consider the lack of braces a design fault of Python, and as you can see, have found a way around that.
&gt; Useless code to close a block is exactly what Python was designed to get rid of. If the comparison is C, then that isn't really true. Python just replaced "useless" braces `{}` with "useless" whitespace ` `, both are equally "useless" just in different ways. Personally I wish we could opt for both in python. I think both have their uses. Whitespace ensures legibility, whereas braces provide extremely explicit and durable demarcation (just don't include those characters in your regex replacement patterns and you will not fuck up program control flow). So why not use both, and if they ever disagree throw a parse error: "Ambiguous parse, braces don't align with whitespace"
&gt; Have you ever tried importing braces from \_\_future__ :) 
Booleans are [a special case](https://docs.python.org/3/reference/expressions.html#booleans). &gt; In the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: False, None, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. User-defined objects can customize their truth value by providing a __bool__() method.
The tendency of python to make light of these things really bugs me. Lets make fun of the by far most popular languages in the world and do our own thing. Its not a joke, and there are people who legitimately think it is a desirable element of language design. You don't have to force it on everyone, and you don't have to give up your own design to compromise.
This is short and to the point: https://docs.python.org/2.4/lib/truth.html It behaves as expected.
Since in python ```'1' + '1' = '11'``` and ```1 + 1 = 2```, ```1 + '1'``` doesn't have a clear behaviour. Regarding booleans, they way ```if``` (and ```while```, etc) works is they run if the value has truth, that could be a ```True``` boolean, a non-empty list, a number other than ```0```, etc. https://docs.python.org/3/library/stdtypes.html#truth-value-testing 
It's not converting ints to bools. For ints, 0 is considered false and all other numbers are considered true. https://docs.python.org/2/reference/expressions.html#booleans has the complete list of what is true and what is false.
&gt; Why is it that one type of conversion works and the other doesn't? Simple answer would be: because mixing string and numbers was known to accidentally cause hard to debug problems while treating other types as boolean is well defined, commonly used and doesn't cause problems (there was an odd case with converting date type to boolean, but even that was considered to be non-issue).
If it's text-based, what kind of GUI do you need ?
&gt; The tendency of python to make light of these things really bugs me. Lets make fun of the by far most popular languages in the world and do our own thing. That is - by definition - the whole point of Python. If you want braces, one way or the other, I'm pretty sure You'll be able to find something that suits you. It'll just not be python. 
&gt; That is - by definition - the whole point of Python. What principle says python can't have both? &gt; If you want braces, one way or the other, I'm pretty sure You'll be able to find something that suits you. But it won't be python, and for the vast majority of people the reasons they use python are not based on aesthetics of language design. Its about the existence of the libraries they need to do their jobs. A Torx screw might be preferred screw, but I'm not going to make my life more difficult by refusing to use a Phillips or Flat head.
As long as you don't want to label your Canuckistan square drive thingy as a screw, I couldn't care less.
There is an ambiguity to the meaning of `1 + "1"` if you think of how Python sees it. Does it mean `1.__add__("1")`? Which would require assuming that the user wants the answer 2. Or, does it mean `"1".__radd__(1)`? Which would require assuming that the user wants the answer "11". You have the ambiguity because the **+** operator is explicitly commutative in integer math (2 + 5 == 5 + 2), while it is explicitly non-commutative in string concatenation ("2" + "5" != "5" + "2")... when faced with an ambiguity that cannot be reasonably disambiguated, an exception is the only logical result, and with the operators there's an explicitly defined path to follow to try to disambiguate, which in this case doesn't end in anything but an error. Truth testing is *unary* though... it's not converting to Boolean, it's saying "is this value the equivalent of False or the equivalent of True *for* this type?"
Well of course that attitude is exactly why your "architect" wants to do this ridiculous thing with `pass`. He is from the school of: &gt; As long as you don't label your aesthetic spacing as flow control, I couldn't care less. but of course Python does use "aesthetic spacing" as flow control, and that is ***a mortal sin*** and has to be corrected in some fashion. I don't think python should change how it uses spacing, but I think it should recognize that there are people who believe spacing is insufficient and want something more. Allow them to have that, provided that they use it in a fashion that is completely redundant with spacing.
And now create a few nodes, softmax function and so on.
Try the `matplotlib` module and post to /r/learnpython if you get stuck. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
What.
I tried to install matplotlib but I'm using a Mac and don't know how to use the .whl file. I downloaded it before on Windows 
Then tell him to use GO and fuck off :)
It's gon' rain!
You shouldn't need the .whl file; just use pip to install matplotlib: sudo pip install matplotlib What version of python are you using? 
Question?
I use sublime text with packages for [snippets](https://packagecontrol.io/packages/Restructured%20Text%20\(RST\)%20Snippets) and [syntax](https://packagecontrol.io/packages/RestructuredText%20Improved). You can easily change indentation, but I don't think it offers promotion and demotion, unfortunately. I don't know how the other editors are doing on these fronts these days, but you may want to check out [ReText](https://github.com/retext-project/retext), [rstpad](https://github.com/ShiraNai7/rstpad), Atom, and [Leo](http://leoeditor.com/).
How about because braces already have uses in this language and overloading them in a way that is entirely unrelated to their existing use and adds literally no value other than "some people are used to them" would make the language less explicit and useful for everyone else.
In Python, [bools are ints](https://www.python.org/dev/peps/pep-0285/), so there is not really any conversion going on here.
Doesn't have to be braces. I would suggest a semicolon except that it already exists in the language (although its use is rather blah....). for x in listish: print(x) ; Would have been a nice way to demarcate the end of a nesting level. Again this would be totally optional, but if it was present then it should be consistent with the indentation. The desire is merely to have SOMETHING that explicitly says "I'm done with this nested statement. The next statement ***MUST*** be one level up" just to avoid any possibility of screwing up control flow when adjusting indentation.
Well, fortunately, Python allows you to have that: for i in range(5): #{ print(i) #} Python is even versatile enough to support Pascal-style braces! for i in range(5): #begin print(i) #end; 
And that is no different from the suggested use of `pass`. A comment is a no-op, it isn't enforced by the parser. You can write your own tooling that double checks consistency of comments and indentation (much like mypy double checks type annotations). So if you don't object to `#{` and `#}` then you shouldn't object to `pass`. But people do object to doing stuff like this, because it is generally ineffectual.
Right before you leave, modify each file to start with “pass”. That’ll show ‘em.
&lt;nitpick&gt; Screws are not preferred. They all have their places to be used and are required to be selected appropriately. &lt;/nitpick&gt;
It's because everything that isn't `0` or `False` or `None` or an empty sequence is `True`. This is a design feature of the language. (You can define a class where `__bool__` returns a non-`True` value. It will then be `False`.) Python isn't the only language with this kind of treatment of booleans. It's convenient when doing conditionals. Also, `+` is overloaded, so the interpreter doesn't know what you want. Both strings and integers have a defined addition method, and neither is defined to work with the other type. When you type `1 + "1"`, do you want `1.__add__(1)` (aka `2`) or `"1".__radd__("1")` (aka `"11"`)? You need to explicitly cast to one type or the other to tell the interpreter what you want.
I finished my first project with Python. I'm relatively new to the language (~4 months). I created a reddit bot that returns player statistics when called and an NBA player is mentioned in the comment. I'm using Praw and BeautifulSoup to scrape the statistic website to generate the tables of statistics and obtain all the player names. I'd love any feedback (https://github.com/davecrob2/BallerBot). I also made a subreddit to try it out r/BallerBot.
that's not so bad. I'd never use it, since it would be just another piece of boilerplate to juggle if/when I need to move code around, but I wouldn't mind it too terribly being in the language. Really, I think the whole premise here is flawed since the argument is "it's syntactic fluff to help people keep track of indentation". Modern editors and toolchains already do a fantastic job of that. If someone insists on producing their code entirely in notepad.txt or entirely pure and unconfigured vim, that's their own problem. Generally, I'd say tools should bend to the design of the language, not the other way around.
Is this a question about usage or aliasing? If you're asking about aliasing, then 'tf' is the usual convention. If you're asking about usage, then you're going to have to provide some more detail.
Perhaps add a random "Who wants this dog?" :) I like it!
&gt; Modern editors and toolchains already do a fantastic job of that. Certainly but you can't count on everyone using a modern text editor. I'm in vim (at the console, not even gvim!) from 9 to 5 every weekday. There is also the challenge of getting all those different editors to work together correctly. That is aggravated by the use of whitespace in python. When I hit "TAB" what exactly gets written to the file? A literal tab or some number of spaces? How are my vim options understood by some other editor that someone else on my team uses?
I think that the problem is that it is non-idiomatic, which makes it difficult to read (for most of the programmers in the given language)
Can someone explain what the new "convention" is? I'm sure OP did a good job explaining it, but I don't get it.
Are you saying the `pass` is hard to read or the `#{` `#}`? I would agree the comments are hard to read, but more because they are comments and our text editors are configured to draw our attention to comments because generally they include important information known as "comments." And that means your text editor is highlighting your braces because its somehow more important you know where the block begins and ends than what is in the block or what the conditions on the block are.... -------- I don't think `pass` is hard to read. Its just stupid. It looks like someone configured their editor to automatically insert a `pass` line at the correct indentation every time they started a new block and then forgot to overwrite it with the block body. But it isn't hard to read, its just silly and ineffective. 
Also, lots of swearing at .NET for not allowing multiple inheritance. So you have to programmatically build the class. # No no. class Mixin(object): def MixinFcn(self): print("Hello!") PyClass = type("PyClass", (NetClass, Mixin), {}) # Fine. def MixinFcn(self): print("Hello!") PyClass = type("PyClass", (NetClass, ), {}) setattr(PyClass, "MixinFcn", MixinFcn) Edit: Not sure if I should be proud of this or not, but it works. def getter_gen(prop): return lambda self: getattr(self, "Get{}".format(prop))() def setter_gen(prop): return lambda self, value: getattr(self, "Set{}".format(prop))(value) def ObjectFactory(name): def __init__(self, idx): self.Index = idx netcls = getattr(DotNetClass, "DotNetApi{}".format(name)) cls = type(name, (netcls,), {"__init__": __init__, "__dict__": dict()}) # Get all setting &amp; getting methods gets = list() sets = list() for d in dir(cls): if d.startswith("Get"): gets.append(d.replace("Get", "")) if d.startswith("Set"): sets.append(d.replace("Set", "")) # Properties with setters. for prop_name in set(gets).intersection(sets): setattr(cls, prop_name.lower(), property(getter_gen(prop_name), setter_gen(prop_name))) # Properties without setters. for prop_name in set(gets).difference(sets): setattr(cls, prop_name.lower(), property(getter_gen(prop_name))) return cls Employee = ObjectFactory("Employee") Company = ObjectFactory("Company") e = Employee(1) assert(e.GetName() == e.name)
Sure. I inherit code all the time - usually battle-tested compiled C or Fortran libraries that have some useful set of numerical routines or functions. If I want to use them, one of the first things I try to do is just write an f2py wrapper so that I can access them. For code &lt;10 years old, it usually works pretty well... but unfortunately we still have lots of scientists out there coding in old-school Fortran with public/save blocks (so pre-Fortran 90 with modules) and that's not really "wrappable".
I'm saying that you should try and follow the idioms of the language (any language) to lower the cognitive load of the reader - because that's what the reader is used to. Sometimes there is more than one idiomatic way of doing things but adding fake braces or extra pass statements definitely isn't one of them!
Right which is why I think it should be something unobtrusive. I think `pass` is fairly unobtrusive. Better would be an isolated `;` or `.` at the end of each block. I don't think that would be so hard to read.
If I understand correctly: def somthng(x): for y in x: z = lala(x) pass return z pass
I think I was better off not knowing this. ty
I plan to add a cli to asserted, execution this manually was to much work. Ill rather run one command and let it spit out a test suite. I also want to pytest pickup the tests asserted creates and execute the tests dynamically And release it to pypi.
I'm sort of lost as to how this is better than a jupyter notebook.
[I just helped someone do that](https://www.reddit.com/r/learnpython/comments/6lng7t/help_me_stop_this_monster_please/djv7599/), sorta. Maybe you can use that. 
Ahhh add Machine Learning to the title just for the hell of it.
According to the article Jupyter Notebook isn't close to being a final release, and so it's not as good as this. But nowadays everything is in constant continual development so it seems fine to me that JN isn't a full release yet. If it works well for what you need, and is continuing to be improved, then it's good to go.
&gt; If the comparison is C, then that isn't really true. Python just replaced "useless" braces {} with "useless" whitespace , both are equally "useless" just in different ways. Braces in C and whitespace in Python are not useless. You need each to delineate the method body in the respective language. Python didn't replace braces with whitespace, but exploited the fact that method bodies are almost always indented in programming languages. Having both braces and indents is redundant, so you only need to keep one. Since indents provide readability and braces not so much, Python chose for indents. At least this is how I understand it.
&gt; According to the article Jupyter Notebook isn't close to being a final release, and so it's not as good as this We might as well say Windows 10 isn't in final release since they said it would be in continual development and there wouldnt be big version updates (7-&gt;8-&gt;10,etc) anymore. Jupyter notebooks are widely used in data science, science, etc. The suggestion in the article makes me think the author doesn't really know anything about data science and is just getting paid to blog about data science.
This too shall pass.
I never said they are useless. I said they are "useless." I think neither are actually useless, but that they have different uses. "useless" is /u/Willem1976's word, I think it is the wrong word. In C whitespace indentation is optional, but it is a good idea because proper indentation helps with readability. However the braces in C are what actually dictates the parsing. Python takes the opposite approach. It mandates the whitespace indentation, and therefore mandates readability. That isn't a bad decision when it comes to fixed and established code. The concern is refactoring. If you modify indentation, or use a mix of editors that do bad things with tabs vs spaces, then you can end up in a situation where the code is ambiguous. At what level was that line supposed to be indented? As you said the argument against adding some kind of terminal brace/endif/endfor construction to python is that since the whitespace dictates the parse, any explicit terminator for a nested structure is "useless" (ie superfluous/redundant). While I recognize that it is redundant, it would be a price I would be willing to pay in my own code, although I understand why others wouldn't want to use it, and I wouldn't mandate that they should. I just want it as an option.
&gt; What principle says python can't have both? from import this: &gt; There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. so, that's on BDFL, and that's just the way it is 
Controlling nuclear reactors 
My job. Automating various system management tasks for a large organization.
From the language that has how many different ways to format strings?! I don't think the zen helps for 90% of these discussions. There are too many competing objectives like: * "Explicit is better than implicit": A lot of people feel that indentation is implicit (because it is in the C family), and that an explicit terminal brace is explicit. * "Readability Counts": ditto * "Practicality beats purity": given how popular C is allowing a terminal brace has the practical effect of ending the argument. * "If the implementation is a easy to explain, it may be a good idea": I think this is easy to explain.
This is clearly an excellent idea but I feel it doesn't go far enough. Perhaps you can replace the simple pass with the more traceable print("pass"). That way you can be 100% sure the your program really is exiting scopes as intended! Even better, change the print to send_email_architect(), the implementation of which is left as an exercise to the reader. This function would need to be recursive as it will itself contain some scopes. 
Scripts, integration tests, web scraping, web servers
Scripts for? 
Modules? 
this is equivalent to "FUCKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK now that I have your attention, I would like to talk about..."
Nice to see someone else who is a proponent of this idea! I've argued for years that the choice between braces (or similar) and significant white space is a false dichotomy but most people seem incapable of even understanding what I'm saying. The downvotes you got for your comment seem to imply this is the case here too. 
You got it! And sooner or later someone's going to fsck it up: if something_severe_has_happened == True: kill = ask_really_end_world() if kill == True: warn_about_imminent_cataclysm() pass destroy_the_world()
Ryan, see me in my office first thing in the morning.
wat
I'm much more inclined to believe you misunderstand what he's saying - what editor injects arbitrary semantics like that? Ending each block with pass is of course dumb - but it's much more likely you don't understand what he said than it is that he has an editor that does rando-python and is afraid of indents.
Oh neat, interactive programming with Machine Learning in 2017, let me just upvote this immediately! ...wait, maybe I should read the article! &gt; but also enables faster prototyping. In some areas, like machine learning and data science, it is not even a matter of convenience, but necessity. That's the only mention or relation to machine learning in the entire article (unless importing numpy and/or drawing waves on a graph counts), and it occurs in the intro. The rest is just a sales pitch. Let me just downvote this immediately. 
I don't understand the term "Miner". What is it, something you came up with? Are you sure you don't mean scraper or crawler?
Coming from a shop where they actually use #end, I object to *both*. It's code bloat and a distraction, and only serves to disrupt the flow of experienced Python developers for the sake of a few noob holdouts who are stuck in C/Pascal mode. I can fit a lot more code on my screen, and it's a lot more readable, without these unnecessary garbage characters filling the page up. The simple austerity of whitespace means I can take in the structure of a page of code in a single glance. It's so frustrating and distracting having this garbage in my way that I actually wrote scripts to remove it while I work on the code, and put it back when I'm done.
You need to sort out your indentation so we can properly see the structure of your code. However, I can see that you're trying to search through the excel workbook to look for information. It would be far better to ingest the license info from the excel workbook once, before your main loop, and say, put the required info into a dictionary - looping through rows in a spreadsheet looking for values is far, far slower and more complex than just looking it up in a dictionary. Hope that helps. 
&gt;I'm much more inclined to believe you misunderstand what he's saying - what editor injects arbitrary semantics like that? I'm sorry to disappoint you. I have the IM audit trail to disprove your hope :( &gt;Ending each block with pass is of course dumb - but it's much more likely you don't understand what he said than it is that he has an editor that does rando-python and is afraid of indents. As I already stated, he's a self-taught C-coder. And as such, everything that behaves different from C is suspect. 
[removed]
Is there anything specific that interests you, where you might be able to find something interesting you could build? A lot of it comes down to finding a project or challenge that is interesting to you, and then setting out to (learn and) build it.
I would point you to some other comments of mine about the use of comments. I agree that a comment is just too damn loud (because of the shape of the orthograph character, and the way editors color it, and the general outsize importance of comments in code). I would advocate for a optional but syntactically meaningful `.` or `;` at the end of nesting levels. I think that would be unobtrusive enough to not disrupt the flow of reading code. 
Uh... I'm a self taught C programmer and that is a stupid excuse. Again, please tell me what editor is injecting arbitrary semantics. You might suggest a comment for a block delimiter or an editor that highlights flake8 mistakes and enforces the 2 line space between functions, etc. 
* Process automation * Status checks (for Nagios) * Web-based tools * Utilities and time-savers * iPython Notebook / Jupyter for data and log analysis
Since implies that contains a reasoning, but it is more of a statement. You could imagine the implementation in Python where strings and integers can be added: class MyInt(int): def __add__(self, other): if isinstance(other, str): return str(self) + other return self + other def __radd__(self, other): if isinstance(other, str): return str(self) + other return self + other one = MyInt(1) one + "1" + one + "1" "1111" It just was considered too dangerous, too many bugs happening because of it. Booleans inheriting from integers is less prone to errors.
Both are already used, and would lead to potential ambiguities or, worse, unnoticed errors. For example, an incomplete expression ending in a period would be seen as a block terminator and could be ignored.
This should be the top answer. Oh wait, we are not on stackoverflow.
forgive me but it was difficult to copy/paste and get it to show code output because of reddit's formatting. How can I go about ingesting the license info to a dictionary before the main loop ? The excel spreadsheet I was given only consists of two columns repeated 700x
Check out plotly I think their python API does stuff like this ! https://plot.ly/python/3d-scatter-plots/ edit: I got it working myself using your data ! If [this](https://plot.ly/~Addyvan/53) is what you mean then hit me up. 
On it's own line it is a syntax error. That is my particular suggestion. A line that is just a period or semicolon. If you want to merge it with the last effective line of the code it would have to be some other character. I think any of `$@?:` would be unambiguous. Although I agree that excepting the colon none are great choices. Alternately you say that you can optionally start the block with a left curly brace, instead of a colon and then close it with the matching right curly brace.
&gt; Uh... I'm a self taught C programmer and that is a stupid excuse. Again, please tell me what editor is injecting arbitrary semantics. Do you insist that Python should have braces? If not, don't see my story as an attack on you. Our standard editor is emacs. Considering his recent rant about people not using it for C, I'd wager about a weeks wages, that it's emacs and python-mode in this case. Originally, I omitted the following part of our conversation, as I was afraid that it was too easy to track. Arch: "You see, the good thing about C is that even if you remove all whitespace and newlines, you can get back to the original by passing it through an indenter. I want our python code to behave the same way." Me: "Kill me, please!"
look how much more readable and accessible this list is! Thanks! :)
I'm turning two of the eternal conundrums over: 1. Finding the clean/pythonic/good way of making a configuration object, populated by a mixture of defaults, config file (The location of which can be modified by the next two), environment variables and command line options. 2. Come up with a good docstring for build_parser()
I'm working on a blog series called Python Friday. I create a small code challenge for myself on Friday, then I do it throughout the week. I then post that challenge on the following Friday, with my working code, notes, and ideas for why the code is relevant. I will be posting a new challenge tomorrow morning. But I'll just leave [this right here](https://codeburst.io/python-friday-challenge-2-6f6808f43273) just in case. I don't actually write Python at my job, which is kind of why I thought this would be relevant. Most tutorials I have read are by folks who know all the Jargon and have a very high-level grasp of the concept. NOT I.
For pasting into reddit, make sure you are using only spaces for indentation (you should be anyway), and then indent the entire section of code in your editor (depends on the editor, but often select and tab). Copy that and paste into the reddit input box. You can then un-indent in your editor. Assuming your two columns work well as key:value pairs, grab the columns from the sheet and zip them into a dictionary, something like: license_nos = sheet.col_values(1) info = sheet.col_values(2) licenses = dict( zip( license_nos, info ) ) Then, later you can get the value from the `licenses` dict by doing something like this (using an intentionally fictional function): lic = get_lic_from_device( ip ) info = licenses[ lic ] 
I want to see this bird FitBit.
I feel that a lot of your argument is about C popularity. If you think that bracket is good "because C is popular, so it's a good idea", meh... Otherwise, it has been discussed plenty of time. Indentation is explicit if you accept that indent is significant in Python. We do not use braces because we achieve the same goal with indent. And the joke is that a lot of people get confused about that. You can spot a Python beginner with strong C experiences, not because the code is bad, but because he usually does not use the specificity of the language. In Op case, I feel like the main problem is that the "architect" forgets one thing : Python is a versatile language, with a lot of allowed stuff. Sometime, the community and some PEP will warn you about the bad thing you're doing. But you can do it. It's a great strength for prototyping. But If you want to lock the way your dev do their job (and it can be right about that, depending of the company and stuff...), that language may not be the best.
You should move on to intermediate level projects. This here is a decent list . http://wiki.openhatch.org/Intermediate_Python_Workshop/Projects . I personally began with gmail and Twitter APIs for college projects. It's not that tough, and you learn things on the way. 
What? I don't even... *sigh* Please, tell him that a great many people on the internet think he's a blithering moron.
I'm a data scientist, so: 1) Machine learning 2) Data processing pipelines 3) Tons and tons of general analysis with jupyter notebooks 
He means what modules/packages do you use to do your system management tasks?
I'm don't think this is a personal attack. And I believe he wants pass statements to end blocks. And I think that's incredibly stupid and old-manish. I just find it very difficult to swallow he has an editor that literally changes the semantics and syntax of a language like that. I guess maybe you're trying to say he has set it up to do that for him. I have known people that stay away from python b/c they don't like being told how to indent - and I was one of them once. But that was more bewilderment at some of the syntactic structures that you don't see in c and I got over that pretty quickly. 
It's pretty easy to grab the products prices from different places, just build a dictionary of the different methods you need to get the correct price The fun comes matching the products to your catalogue for price monitoring :-)
The same way you handle LF vs. CRLF issues. Develop standards. Learn how to configure your editor of choice to support those standards. If your editor of choice doesn't enable you to conform to those standards, then you've chosen poorly, so choose again. Or use widely available standard tools to handle the conversion. Luckily for us, the python community has already developed [a relevant standard](https://www.python.org/dev/peps/pep-0008/) which tells us "always use 4 spaces". If you overrule PEP8 with your own internal standard, then follow it. If it's supposed to be 2 spaces, then use 2 spaces. If it's supposed to be tabs, then use tabs. If someone on your team can't be bothered to follow your team's standards... that's a problem, but it's not a problem that language design can (or should) fix. And vim can be easily configured to use spaces instead of tabs, etc... There are plugins out there that will give it all or nearly all the features of more modern editors, so using it is really no excuse for not doing the right thing. While you're at it, figure out how to readily export/import your vim configuration from computer to computer so you don't have to dick around with setting it up manually all the time. I'm not saying this is a fantastic design in the abstract. Maybe this was harder in the 90s and I can see where people could have seriously made a case that "it's too hard to configure editors", but it's 2017 and these are solved problems. Anyone capable of learning or producing functional python code is also capable of learning to configure a text editor to use tabs instead of spaces.
Now's the time to tell your architect about the lesser known GPL, the global pass lock. If you try to pass inside a loop the interpreter will deadlock while the passes wait for each other. Unfortunately the architect's otherwise excellent idea is not possible.
&gt; Jupyter Notebook isn't close to being a final release, and so it's not as good as this That doesn't make any sense. And besides, Hydrogen relies fully on Jupyter, so it's kind of a moot point in the first place. 
I made something like this too using Pandas and datatables! Your code is a lot cleaner than mine though :-) 
Web app backend (for work), scraping various RSS feeds and storing changes in a database, reading a thermometer and making decisions to activate a fan in my bedroom, opening or closing the curtains in the same bedroom and (soon) controlling the lights in the bedroom. Besides that, I've made small apps and scripts for practicing foreign language vocabulary, bulk downloading images from websites, creating word clouds from Reddit threads, and more. Python really is a useful multi tool.
It’s not that hard - most websites don’t have anti scraper functionality. Most websites also don’t implement random A/B split testing of pages that will fuck your scraper up either. Just be gentle and don’t scrape their site too hard or frequently. I do suggest you implement random user agents and proxies to avoid detection though.
Handy!
On stackoverflow, it would be closed for being offtopic, notaquestion, misformatted, and idletoolong even after a lively thread of useful answers.
No lowercase i
That guy does not know Python don't listen to him.
Pep8s 4 spaces is stupid as fuck. It's way too much.
https://www.reddit.com/r/learnpython/wiki/faq#wiki_what_do_i_do_now_after_.5Binsert_learning_resource.5D.3F
[removed]
I believe that you're confusing "truthiness"/"falsyness" with being converted to a boolean. Instead certain values have a Boolean equivalent. See these [old but still valid docs](https://docs.python.org/2.4/lib/truth.html). It's why `if []:` would skip the block. By your logic a string is also converted to a Boolean, which isn't the case. It's really a helpful way to signal the presence of absence of a value. Note that doing `1 + "1"` and using either `1` or `"1"` in an if are quite different.
A lot of people are defending the decision without giving the historical context. In C, there is no bool, just int. Python inherited that and in its early days had no bool. Then bool was added but as a subclass of int for backward compatibility reasons. I'm sure if Guido made a new language he would start with a separate bool type that isn't an int under the covers. See here for the full story: https://www.python.org/dev/peps/pep-0285/
Beyond the common stuff (webapps, local scripts, devops, etc), I'm doing a bit with a data pipeline right now - primarily with Luigi.
Bools are actually ints. assert issubclass(bool, int) 
Kubernetes was the subject of the final keynote address of PyCon. Maybe that had some sort of influence in the short term. Not sure on the time scale of this. edit: Timeframe was the last 30 days. PyCon ended at the end of May
&gt; tell him to use GO and fuck off :) Just tell him to "Go and fuck off", don't confuse the poor architect with usage details.
Someone badly need to run import this 
A lot of people are commenting on the silly practice, so I will refrain from that specifically (but they are right...). However I am surprised by seeing this: &gt; product manager/architect came up with a brilliant idea: In what company does it make sense for a product manager to also be an architect? PMs should not be involved in implementation details - but high level product goals.
Thanks, many reusable little pieces. I have always been a backend developer as front end technology moves to fast. A backend might servive 10 front end stack changes. I was looking for sortable tables for a springboot project, but this will give me the js css I need. I have some DataSet with Metadata classes that could be used to import this data into a database. Any chance of demonstrating how to make this editable and save a new csv?
The word you're looking for is durability. Whitespace look nicer but are easily broken, thus less durable
I use Reddit a good bit, but am not a power user, but I haven't removed a lot of the defaults because I've never sat down and curated my subs. I occasionally subscribe to new subs which get added to the bottom of the list in my app which makes it easy to find them... Swipe down then tap. On desktop I almost exclusively type the whole url instead of relying on what I'm subbed to, wherever that is. I basically never look at the home screen, though I suppose it'd be more useful if I curated my subs.
Ok a little more Googling and I may have answered my own question. Microsoft has an awesome free setup for just what I want. There's some crazy splash pages that everyone will have to navigate through, but after that it looks like free access to a Jupyter notebook: https://studio.azureml.net/
A sub that exclusively trended in the python community following a convention makes sense to be top of the list if activity among non-python folks is used as a baseline.
So it's weighted by sub size? So it's effectively the percentage of subscribers that are also python subscribers?
I worked for a company that did this professionally for years. It's easy enough over a few sites or targeted. We would crawl hundreds or thousands of products across the most popular market sites so it gets more interesting with scale. We later decided to essentially suck dry the product catalog of all of the sites and do dynamic product matching. That was a beast, many sites will ban bots if not throttled properly. So, we had to have avoidance set up for when workers were banned. Things to watch out for: * Bot detection / throttling * Unicode, everywhere, Asian sites use even worse encodings, simplified Chinese etc . * some sites are not a simple html fetch. Some will have pricing updates via ajax requests that are only available in a fully rendered DOM. 
Are you sure twitter expose their videos as mp4? If they don't, just convert them yourself with something like [ffmpy](https://github.com/Ch00k/ffmpy) or even run the [VLC](https://wiki.videolan.org/Documentation:Streaming_HowTo_New/#Using_the_commandline) executable.
I can only hope that as everyone leaves, they point to this as the exact reason.
So afyer reading all the comments it seems the score is effectively recently_active_pythonistas /recently_active_redditors for each sub (?). So if 100% of recent active users in a sub were also active users in r/python, then it would get the highest score. The actual popularity of the sub is only relevant in that more active subreddits have higher confidence statistics, meaning a higher likelihood that pythonistas are appropriately well-represented. A sub with sporadic activity or very few users is less capable of providing an accurate score.
I like cloud 9 https://c9.io
Except it's generally fine. And either way, the actual point was, that if you deem it better a different way, then define a standard and stick to it. if 4 is too much, then use 2. Or use tabs. Or use 1 space. But whatever you do, *actually stick to it*. Take the very easy and accessible actions necessary to actually adhere to whichever standard you're following.
Everything!
I frickin love Pandas. Total game changer if you're assembling a database from disparate online sources.
i've recently discovered the list egg. it can be a nice way to write a couple of statements. also found you can index in a for loop that you can just k+=1 inside it and it'll be just like a while a=[1,2,3] while a: a.pop(0) 
pip install &lt;whl filepath&gt; should do the trick can you post your full syntax error?
&gt;Originally, I omitted the following part of our conversation, as I was afraid that it was too easy to track. I'm pretty sure there's only one person in the world stupid enough to try to use pass to force a deindent, it's trackable either way.
I do it. I generally write my function definition and then give it a "pass" essentially making it a do nothing function until I have my whole class laid out. Then if I don't have a return I'll leave it there to signify the end of the function and the fact that it doesn't return anything. It's not a big deal. Certainly not worth quitting your job over. If you feel so strongly about it, ask him about it, tell him how you feel.
Yep, this is also confirmed via the [pypi instructions](https://pip.pypa.io/en/latest/user_guide/#installing-from-wheels), more details (like a stack trace and exact command run) would really help.
Indentation for scope control is much stronger than braces if you ask me, especially since braces are not the only way to put a statement into flow control in C. See below for an example; int mynum = 0; int myarg = rand() % 100; if (myarg &lt; 50) mynum++; printf("Added 1 to mynum"); The printf will always print, even if ``mynum`` was not incremented. Whenever I patch code that has a single statement after a branch or loop and no braces I add the braces even if I didn't add any code to the branch/loop, as a defensive practice against problems where somebody _thinks_ they're adding code to a branch/loop but are actually writing code that will always run, or only run once. Meanwhile in Python this is already standard practice, and it's the _only_ practice. There aren't multiple ways to branch a statement and you don't have to worry about the appearance of your code tricking one of your duller coworkers into thinking it's doing something that it actually isn't. If I could make one change to the C syntax I would make semicolons after a branch/loop mandatory. That would be one less WTFism in the world.
The Bloomberg API is only available to clients of the Bloomberg Terminal (multi thousand dollar a month financial data tool, to say the least). Unless you're a terminal user, you won't get access to the API. 
I use a 13" MBP and I don't really understand what you're asking. Can you just increase the font size (you will need to do it separately for the console and the editor windows). You can also undock the run window.
Ah. Yes that would work, duh. Thanks
This code executes as expected for me. Are you just saying that the convention was messed up? P.S.: Sorry for destroying the world. Hopefully you got my warning.
You can pay for them with your 70,000 stolen karma
Am also data scientist now. No longer use Python. :( ds team i joined exclusively uses R. Am a little sad.
Working on building a script that would fetch remittance rates from various sites. Initially I wrote a script to fetch the rates every hour and save them in a database. Would use the data at some to learn python data visualisation. Currently trying to build a web app to expose it to the world for non commercial purposes. Have never build a website so struggling a bit. Any suggestions on website building are most welcome ! 
https://trinket.io/python Great IDE with support for turtles. Have used it in many workshops.
I found I was using a lot of time cropping and resizing pictures as well as rewriting my standard group work activities for different topics. The program takes all the pictures in a folder, resizes them, adds them to the powerpoint, and uses their file names as vocab words for the lesson. Next you can choose from premade warm up game, warm up question, grammar, and final activity slides(many of which are generated using the vocab words). Most of the warm up questions I got from http://iteslj.org/questions/
working on Django clone, will share it right here in a month
I'm doing NLP research, so NLP stuff (parsing, tagging, etc) Machine learning Data analysis and exploration Scripts for cleaning data Twitter API (most important corpus at the moment) Bots (Twitter, IRC)
Not following pep8 is a good contributor repellent you know
A .docx file is just a .zip file with the extension changed. Unzip them before searching. 
I've used Python anywhere for something like this in the past. Pros: You get a full VM that you can play with. You can share files with your students' VMs really easily. They've got easy setup for web thing (inc notebooks). Cons: might be a bit too much? Depends on your students' experience. Sometimes the website can get in the way of achieving things. Overall, I'm very impressed. Harry Percival, the author of "obey the testing goat", works there. 
That's no problem. Just write an "autopass" script to insert "pass" at the end of every scope, and install it as a pre-commit hook. If seeing all the "pass"es annoys you, also add an "unpass" script as a post-checkout hook. As long as you don't "copy an example from somewhere and let your editor indent it", you should be fine. Step 2: Provide those scripts to all coworkers. If PM complains, tell him that if you were to form the habit of writing that "pass" manually, you'd become unemployable at any other company, so you are not willing to do that. Well, if you find another job, please let us know where your current job was at, so we can avoid applying there. :)
Try https://notebooks.azure.com it's a not quite an IDE, but a jupyter notebook environment. used by many 1000s of ppl simultaneously. has anaconda, py2, py3 and best of all, free. 
Web scaping and NLP analysis where performance isn't the primary concern.
None so far. 
good luck with that
I recently did a similar task. Look up the following for python: Openpyxl, requests, pyqt5 if you want a gui, and think about using generators for your data read loop
As a programmer I would say that having no cells is better. Worksheets like this are better if you aim to write decent code. It's not a priority for everybody but for programmers, experimenting on Jupyter means you probably won't use any of that code and throw it away as soon as you are done.
Are you going to publish your code? Other physicists like me would be very interested ;)
I would check out [Pothos SDR Toolkit](https://github.com/pothosware/pothos-sdr/wiki) and [GNURadio](https://www.gnuradio.org). Both have Python libraries which are *relatively* easy to use. What are you looking to do with SDR? Also check out [r/rtlsdr](http://reddit.com/r/rtlsdr) for some quality resources.
This website could convert the video to mp4 on the fly. If you inspect the DOM of a video on twitter, you will see that the video is a .m3u8 file. I think you have to go with /u/llffm answer :)
&gt;In what company does it make sense for a product manager to also be an architect? in a small one
I use Vim (at the console, not even gvim!) every day for Python Programming and it is absolutely a modern editor. It can handle and show indentation just fine. Even the automatic indentation is correct 90% of the time and in the few cases where it isn't it is usually fixed with a single key press. I do have a plugin installed for Python though. Maybe that is your problem? The only Vim options you need should be in your .vimrc. Why would you care about how other editors understand vim options? It is on that other user to configure his editor for Python. I would not expect Emacs to understand the Sublime config, so why would you expect to configure other editors with vim config? And about TAB: How do you have it configured? It can insert a TAB or it can insert 4 spaces. It is usually just 1 Or 2 lines in .vimrc to get that right. Your config is your config and you should understand what is in it.
any help would be appreciated
You need a Bloomberg Terminal and even then you will most likely breach Terms of Use (unless you do all your analysis on the Terminal itself). But if you have access to a Terminal with Excel addon installed, this information that you want can be directly downloaded to excel, you just need the BDP function, the ticker of the company and the name of the field associated with the address.
Not online, but I'd also recommend [Thonny](http://thonny.org/) as I found it very good for beginners.
I'm on mobile so I can't look it up right now, but a quick solution is to just add /tts at the beginning of your message.
The saddest thing I've seen this day.
u mean like this: @bot.command() @asyncio.coroutine def hellotts(): yield from bot.send_message(message.channel, '/tts Hello, everyone... I am ' 'DiscordRaspberry. And, my creator is Kemar!', tts=True)
:D
Treating `pass` as the termination of a block is more than likely a _bug_ in the handling of Python syntax that this boss is turning into a feature. The code that is doing this was probably only considering that someone would ever use `pass` in a situation like this: def func(): pass
Yeah, if that doesn't work make sure that tts is not disabled for your server.
I did that but still get an error: Traceback (most recent call last): File "/usr/local/lib/python3.4/dist-packages/discord/ext/commands/bot.py", line 846, in process_commands yield from command.invoke(ctx) File "/usr/local/lib/python3.4/dist-packages/discord/ext/commands/core.py", line 374, in invoke yield from injected(*ctx.args, **ctx.kwargs) File "/usr/local/lib/python3.4/dist-packages/discord/ext/commands/core.py", line 54, in wrapped raise CommandInvokeError(e) from e discord.ext.commands.errors.CommandInvokeError: Command raised an exception: NameError: name 'message' is not defined 
I don't have much experience with 3.4's api and I haven't used the bot.command decorators at all. If I were to write the same functionality, it would look something like this: @client.event async def on_sever_join(server): channel = server.default_channel message = '/tts Hello...' await client.send_message(channel, message): You could also just have on_server_join() function call your defined function inside it and pass it the required parameters. Sorry I can't help with exactly what you have, it's out of my experience =(
Everything. Web apps Data science Server config management and maintenance Interaction with AWS Misc file processing and munging Monitoring Misc automation Prototyping apps I've used a lot of other languages professionally and Python is my favorite because it does all this well.
Anaconda from continuum analytics
Is Luigi production ready? Last I looked 2+ years ago it was... Weak.
Try posting in https: [/r/learnpython/](https://www.reddit.com/r/learnpython/)
Thanks!
Does anyone know if this exists for web development with Flask and Django. Everytime I make a change I have to refresh my browser and rerun my python code. I am certain there's a tool to sort this type of issue but I just don't know what to google
Interaction with various api's (work) Trapper scripts for Zabbix (Work) Writing annoying messaging scripts for HipChat API (Work, but so much fun). Backups of my personal servers (Fun) 
Can you send me the link for your blog? i'm picking up Python now and my aim is data science. Thank you! RemindMe! 3 Days
I will be messaging you on [**2017-07-10 09:51:30 UTC**](http://www.wolframalpha.com/input/?i=2017-07-10 09:51:30 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/6l79tj/whats_everyone_working_on_this_week/djw9bbt) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/6l79tj/whats_everyone_working_on_this_week/djw9bbt]%0A%0ARemindMe! 3 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! djw9bkl) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Well, the autocomplete *sounds* awesome. I keep going back and forth between Jupyter, for its quick feedback, and IntelliJ, for its killer formatting, syntax fixing, and autocomplete. Since this thing advertises itself as a happy medium, that alone interests me. The live coding editor is an idea people have been trying to get right for a while now. Seeing whether data is "flowing" or not sounds intriguing... 
What's the advantage of this over loading the data into a (SQL) db? Are there any speed/ease of use benefits? Genuinely curious.
I think one thing that jupyter notebooks is missing is a good debugger. And since you can have something like `cellA: x = 1` `cellB: x = 'your mom'` And the only way you know what `x` is to call it or look at the output number of the cells and guess, it can make it very easy to not realize how your data flows and get everything fucked up into a pile of spapeggy and meatballs (sorry ive been watching too much king of the hill).
[It really only works when its him.](https://www.youtube.com/watch?v=tbCI3lvdVps)
Will do! Thanks for all the work you do.
Hi, This is the most stable release yet of django-hotsauce. :) Whats new: Updated notmm.utils.urlmap.RegexURLMap API to support Django ORM. Updated notmm.utils.django_compat to Django 1.11.1 Experimental support for the native Django ORM. For further info, please see the wiki: http://www.isotopesoftware.ca/wiki/DjangoHotSauce Cheers, evilstoner35
control systems toolbox as a matlab replacement
Your architect's next commit is: `4f1d10d Fixed indentation and missing 'pass'` if something_severe_has_happened == True: kill = ask_really_end_world() if kill == True: warn_about_imminent_cataclysm() pass - destroy_the_world() + destroy_the_world() + pass 
Thank you!
Commands are client-side only, I think the API docs state that you simply add `tts=True` to your call to `send_message()`.
All functions return something. It can be None, but it's not nothing. If you wanna be explicit about it, return None is way better than pass.
wouldn't it be better done like: updated = Account.objects.filter( id=self.id, version=self.version, ).update( balance=F('balance') - amount, version=F('version') + 1, ) ??
&gt; explicitly transitive in integer math You mean explicitly "commutative".
Whoops. Correcting.
I don't buy that he an interpreter with a buggy parser. it sounds more like he's using pass as a delimiter in some kind of formatting macro he made in emacs
It depends on what stores or how extensive scrapping you are looking for. Many online stores have affiliate programs, these affiliate programs usually offer a product catalog with prices API (usually in XML format) for you to download. I did simple HTML scraping back in the days for PC hardware prices, it's pretty easy as long as you limit your scans to certain products.
I think it depends on your need (ours is fairly light), but airflow does look a bit more mature (and a bit more complex).
Thanks!
It will. But, I wanted to mirror it to withdraw method where the value is validated aginst the balance first. It's easier to undersatnad this way. 
REST services using Falcon and PeeWee (for Postgres), mostly as a backend for Angular2+ front ends.
Nice! Just started learning Panda like yesterday! Taking the course right now, thanks :) 
A docstring is even better than pass. 
Motive is to quickly visualize the CSV data. 
Controlling driverless tractors.
Is there an analogue for sisotool? 
If the function or class doesn't do anything, yes, I agree. For exceptions that are just for semantics, for instance. But if there's some actual code in the function, it won't help making explicit the function returns None.
Hey all! Didn't mean to spam this subreddit with non-Python content, but just wanted to share this open-source project. :-)
I'm working on a small Ruby project called colorls. Basically, colorls = ls + color + icons. Especially for terminal lovers. :-) Repo : https://github.com/athityakumar/colorls
You're a champ! Thank you!
This right here is what's needed to understand bool/int. Historical context can really clarify this type of question.
Corrected the code listing above for further review. I am working now on converting the excel to a dictionary and seeing if I can print the values but no success so far. I will continue to work on this moving forward. Let me know what you think so far. import xlrd file_location = "xxxxxxx.xls" workbook = xlrd.open_workbook(file_location) sheet = workbook.sheet_by_index(0) sheet.cell_value(2, 1) license_nos = sheet.col_values(1) info = sheet.col_values(2) licenses = dict( zip( license_nos, info) ) print licenses
Here are other project ideas I've been collecting: https://nedbatchelder.com/text/kindling.html
I think that this might find some more appreciation over at /r/linux. Neat though. Ima try it.
Absolutely. I almost always use raw SQL for anything beyond very simple queries. Sure, your ORM (whatever it is) can compose queries, but after a few years of doing it I realised I felt like I was back in the early 90s Turbo Pascal / Turbo C flipping into Turbo Debugger to stare at the generated ASM and try to figure out ways to make the compiler generate things the way I wanted them, when I should just have used inline ASM for the bits I cared about. Any time you choose an ORM you should make sure it's something you can drop down to raw SQL easily and painlessly because at some point you're going to want to construct that RIGHT INNER JOIN on a correlated subquery. I've heard the arguments over and over by people trying to make sure that when they choose to switch SQL engines they easily can. Outside toy personal projects I can count the number of SQL engine changes that have been done on my tongue, with remainders. Oh, sure, there's huge projects that have migrated MySQL -&gt; Postgres or the other way, but you can bet your bottom dollar the ORM didn't make that transition any easier. In the end, SQL is a remarkably simple and expressive language for manipulating sets, it's very worthwhile learning even if only to understand. "Tuning" SQL queries is something I do when we hit performance bottlenecks, and happens, but is usually a sign someone's screwed the pooch on the schema design in the first place. The more DBAs and senior programmers who've learned SQL seem to design things better because they're thinking in terms of sets, and put the data in the right place up front without reaching for "INDEX ALL THE THINGS AND SORT IT OUT LATER".
Thanks, shared on /r/linux. :-)
Cool, thanks for the tips. I am now studying for the tests in the university, and I thought I could do something different during my vacation time. Thanks again :)
Try the [Dask ecosystem](https://dask.pydata.org/en/latest/) ! With their distributed computed tool. It's easy to set up and it works well. https://distributed.readthedocs.io/en/latest/
Thanks! I am teaching a Python course next week and this will be great for the students who want to take it further!
Amazing! Thanks!
I've just started coding that actually :) It's gonna be something between sisotool and ShapeIt. For now I'm trying to finish up the basic class objects and regular things out of the way. It's so far pretty stable but lacking a comprehensive tutorial. So far only people with some acquaintance with control theory can use it comfortably. https://github.com/ilayn/harold in case you want to check it out.
It seems like a cool project but I'm not sure that warrants posting on this subreddit.
Without Ansible, I'd cry myself to sleep every night. I'd only be getting 90 minutes of rest each night since managing upwards of 3000 servers in 6 datacenters is a large task.
I don't have any experience with Kafka, but using rabbitmq it could look like this: - make sure your data is available from all your servers(nfs, samba, anything) - create exchange &amp; queue on rabbitmq - push messages to this exchange. Each message can have a path to a single file to process - write code which will pull a message from the queue and process single file, and then acknowledge message on successful run - launch as many instances of this code as you'd like to - rabbitmq will loadbalance between all consumers on single queue
$ python -m this | grep "only one" **There should be one-- and preferably only one --obvious way to do it.**
GOT TO GO FASTTT!!!
+1 Best of luck
You can always mandate the tools that the team uses.
Thank you!
I like the gif! :-)
This is great! Thank you! :-)
Thanks man
Mucho gracias OP. Side note, if the wife gets mad can I crash on your couch? I spend a little more time on Udemy than I should already 
Once i m subscribed Will i have a deadline to complete the course or can i start it when i want?
Hi, If you roll in it you can begin at any time you want 
The link actually came up purple for me. I have seen your code before. Looks good!. I may have tried it out but I don't remember how it went. I tried doing some control system analysis a while back.
Use the python-docx module. You really want to use a library. The Word format is nasty with all it's HTML tags, tables, headers, etc.
Thanks!
It's easy just click on Enroll Now 
 except NuclearMeltDown: pass
Thank You!!
Thanks!
I think you're putting the cart a little bit before the horse here. What you're describing looks to me like a data ingestion problem. You have lots of small, individual data files which need to be processed and pulled into a larger scale database. Once they're in that larger scale database, *then* you might run into the need to do distributed processing on it. But it seems like you should explicitly design a separate first step to your analysis pipeline that pre-processes the data into a format which is easier to work with. I routinely do this on large, structured datasets from the earth sciences. My preferred course of action is to build a pipeline using a tool like [snakemake](http://snakemake.readthedocs.io/en/stable/). In your case, that pipeline is simple - you just need a rule to process data from your input pdfs and produce and output csv, then you need a rule that ingests those CSVs in to a structured data repository or format. Snakemake works great on static input datasets. For dynamic ones - where you need to add input files and process them at some point - there are similar tools which might work well, like [luigi](https://pypi.python.org/pypi/luigi). But I really want to stress that if you treat this ingestion phase as a distinct step, then you open up a whole world of useful tools and frameworks afterwards with which to play with your data.
I've seen Python used pretty extensively for build/test/deploy automation. It's likely that the system they already have in place makes heavy use of Python for these purposes.
&gt; Why would the lack of Python be a deal breaker for our client when there are other tools that can be used Because your client's *existing environment,* be it internally-developed code or 3rd party tools/libraries - relies heavily on Python, and they want a candidate who can "hit the ground running." If they disqualified candidates who are already very proficient developers in perl/tcl/ruby, then they're idiots, because such a candidate would pick-up python very quickly. 
A DevOps engineer working on an app with a Python codebase will probably need to have some depth working in Python in order to be able to successfully manage the various environments the app will run in (test, development, production, QA, etc.) and this means knowing enough about the language and its ecosystem that handling issues related to dependency management, packaging, and versioning are no big deal. Python noobies might find that kind of stuff a little above their head. honestly, you'll just need to talk to your client about their technology in more detail. if they need a DevOps engineer who can also work on their codebase than you'll need to know more about their codebase. This is common, DevOps is not a full time role at most companies, more like a focus or specialty of a developer who also does more general purpose work.
&gt; such a candidate would pick-up python very quickly Sometimes you need someone who has spent time really getting to know a specific language. A great developer can learn any language but it will take them years to learn all the little tricks and become an expert.
Thanks everyone! Appreciate the feedback. Definitely helps with my search moving forward. 
"This is common, DevOps is not a full time role at most companies, more like a focus or specialty of a developer who also does more general purpose work." -- Sweet. thanks! I kinda figured that learning more about DevOps over the last year but wasn't sure. This helps a lot! 
I think you're getting hung up on the idea that python is a 'scripting langauge'. It's an interpreted language, meaning that programs written in python will generally need an interpreter to run. But it's not that different from java in this context, which require the java virtual machine to run. Python is so much more than a scripting language (although it works great in that context). It is most certainly used to write real things. [Reddit](https://github.com/reddit/reddit), for example, is written in python. Youtube too. And Instagram. And more! Of course, you're probably not hiring a web developer, so you can look at other real world examples where python rules the roost: it is the current king of math and science computing, having eroded the marketshare from previous king: MATLAB. And (alongside the langauge R) has a solid chunk of the statistics and analysis market. So it's used in everything from physics to finance to track and process data. It's also used as a scripting langauge, but in holywood, it's quite important in the VFX world. If anyone is customizing their tools - things like 3D Studio Max, or Blender, or whatever - then they've likely used python to do those customizations. Finally, any ops guy worth their salt will have an array of scripts that they use to manage their day to day life. If they're taking over an existing position, it's quite probable that these have already been written by an existing ops manager - and since python is the most commonly taught programming language in university, there are even odds that these scripts were written in python. 
I've worked both in devops and developer role, so few things: &gt; I thought Python was a scripting tool but recently found out that it can be used for development So you don't understand those words. Being "scripting language" is a technical term, unrelated to role some tool fulfils in given company. It is not a free pass saying "whatever skill level you have will do, we don't care", although devops people are on average way below professional developers in terms of programming skills. That's fine for most companies - just not this one. &gt; Why would the lack of Python be a deal breaker for our client Many devops jobs are not very creative. You sit, check if everything works, do basic automation of repetitive tasks, do simple things you are ask to do. This company either builds devops-related tools, or requires high degree of reliability, automation and creativity, which is why they focus on programming skills. This is definitely good for them, for you it means they have above-average requirements for candidates. &gt; when there are other tools that can be used There are other programming languages that are similar to Python, for example Ruby (most common competitor), Go or Perl. I would say that someone who knows Ruby or Go will have no problem with using Python (if he wants to learn it). If by "other tools" you meant things that aren't programming languages, than no - they cannot replace Python. So what they want is a combination of developer and devops, leaning towards development skills. This is relatively rare. In general, my personal issue with recruiters and companies hiring is that: 1. They look for and hire for technical skills when what they really want are personal traits (being a competent developer is personal trait irrelevant to programming languages someone knows). 2. Somehow related, they don't understand that many technologies are interchangeable. It is understanding how wood works that's important for a carpenter, not the name of a company who produces particular tools he uses. This is what only some companies get, but it won't even cross recruiters mind (in all cases I've seen so far). Good Ruby developer who used Heroku would be far better fill for this position than average devops person who did basic Python and some AWS, but you won't get that from looking at keywords in CV.
How long does each `pdfs-&gt;csv[]` job take? What hardware do you have locally? How often do you need to repeat the process? Do you have access to a traditional HPC cluster, e.g. if you are at a university then you probably do.
This is a weird example because it's so dependent on the API. It's 0-indexed and starts with Monday, both of which you need to know to write the unit test. So in the course of writing the unit test, you'll probably have written the function...
Every one of the posts in your history share something in common, but I can't quite put my finger on it. Also no one here is going to share a malicious program with you.
want to crime, plz halp
&gt; I thought Python was a scripting tool but recently found out that it can be used for development (duh). Scripting is development. There is no useful distinction here - it's all programming. &gt; Why would the lack of Python be a deal breaker for our client when there are other tools that can be used That's a question to ask your client.
You are awesome!
Writing a script inspired by "automate the boring stuff" that will go through my financial websites and send me an email with what the current numbers are. Want to make it run weekly at the same time so I can do analysis on my accounts. It's pretty bad that I'm too lazy to log into mint on a regular basis 😁 Also want to analyze the wife's Instagram posts to figure out what's been most popular and boost her popularity with some data analysis.
I read the API for datetime and determined that I would be looking for the number. In an attempt to be sort of kitschy I wrote a do-not-much test. But I wrote the function after writing the test, and in a very simple way this demonstrates to a person who has never seen a unit test, what a unit test look like when executed in the terminal. By no means was this post meant for a seasoned python programmer. I myself am not one.
http://pillow.readthedocs.io/en/4.2.x/ The Image.resize() function is fairly straightforward.
People use this? Are there projects you can link to that show it in action. Seems really contrived and niche to me.
The way proposed above is not obvious to me, I'd instinctively reach for a transaction rather optimistic locking via versioning. Especially if I had configured my database to use optimistic locking via transactions. 
You all get paid vacation every year? For 4 weeks?
It matters to your client because their entire code base is probably python. Hiring a guy who knows nothing when you need to him to up in running in months is awful
&gt; pick-up python very quickly. When interviewing for a specific role, it's always best to find a candidate who will fit that role. Expertise in a field is something an employer is happy to pay for; They're not usually happy to shell out dough so someone can BECOME an expert. 
Truth. I used to avoid list comprehensions like the plague, now I use them everywhere. Lots of stuff can be done quickly, it takes time to learn how to do it elegantly.
TRIGGER WARNING! I still have PTSD from back in the days when I was a Java programmer. 
First try to figure out what the first "D" in DDOS means. 
Thanks! I finished 2 projects and learned something new. They were pretty easy and I only look forward to go up from here. https://github.com/Utkarsh1308/Scrabble-Cheater https://github.com/Utkarsh1308/Flash-card-Challenge
[@bot's latest tweet](http://i.imgur.com/DzhSU18.jpg) [@bot on Twitter](https://twitter.com/bot) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Cycle Component Network | Django Developer | Vancouver, BC | Onsite | Full-time We're a small team, working out of North Vancouver. You'll join a eight person in-house dev team who are excited about new technologies and best practices. We are proud to have built a programmer friendly culture, with no strict hierarchies or rigid job roles. You'll get the chance to work on new exciting technology, and influence the direction of a rapidly growing company. http://ccnbikes.com/ Send a resume to jordan@ccnbikes.com
He's. . .not wrong. I don't get your problem. It's the math behind artificial intelligence.
Only if you promise to take down a specific host with it. It's 127.0.0.1. 
Oh, that's great! I've wanted to look into Godot, now I'm sold! 
Thanks, I'll look into Airflow!
Remember to press alt-f4 to get admin rights.
Really appreciate it bro. 
Awesome! Thanks! 
DI is a useful pattern, even in python, but this solution feels over-engineered and quite heavy. I'm not sure if I would describe this as "Easy, smart, pythonic style" and I kind of doubt the "High performance" claim. 
* edit im sure I fudged some formatting, sorry. Maybe some PEP8 stuff: `# renames all ROMs in a directory into an acceptable format` `""" renames all ROMs in a directory into an acceptable format """` or ``` \# checks to see if the directory has already been ran through program def check_file(path): ``` ``` def check_file(path): """ checks to see if the directory has already been ran through program """ ``` You could make `if os.path.isfile('RENAMED.txt') == True:` into `if os.path.isfile('RENAMED.txt'):` By personal preference I would change the `print('... Press a button to close.'), input(), exit()'` to just `sys.exit('This dir already renamed...')` since they dont have any other option anyway. But that doesn't really matter. I would use a [Context Manager](https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/) when opening the file since its slightly harder to accidentally leave the file hanging. I'd also wrap your lines 91-101 in a `def main():` and then call this at the bottom of your script: ``` if __name__ == "__main__": main() ```
I did R through datacamp and really enjoyed it. I would think Python is of similar quality and will likely find out in a few months once I get done writing my scripts. It is $15, so not much to lose.
Just nitpicking but having a unit test that will pass fail based on the day of the week is not really a good test IMO. How about abstracting the day of week out of the method into an argument, then your unit test looks a bit more like def test_answer(): expected_result = 0 test_day = 'monday' test_result = what_day(test_day) assert test_result == expected_result # can write test cases for other days too Anyhoo congrats on writing a cool blog post!
Well, this project originally was open-sourced from one of the private projects that I worked on, but I can not share example because it's certainly under NDA. You can take a look on this example - https://github.com/rmk135/my-purse-app/blob/399acb5bb0f677ed683119ae272f7688cbc94f3a/src/mypurse/containers.py It's one of the project that I'm working on in my spare time. It's not so big, but it still could demonstrate main idea of this solution . I will try to explain... Let's assume you're working on a project with 10k+ SLOC, several versions of API for iOS and Android, company website, e-shop and 3 types of admin panels. And once you wanna implement a new feature, you start asking yourself next questions - where is my profile model used? how can I find all the places where client makes a payment? how many endpoints do we have for profile registration? All these questions could be answered if you see dependencies graph of your application components, but you don't have it and you just make a full-text search on your sources, right? Main idea of Dependency Injector is to give you a unified, developer-friendly tool, that helps you to build your dependencies graph in single file. This single file is your strategic view on your project, you control panel of project's architecture. PS: And yes, people, certainly use it. I currently know about at least 5 technically successful projects that use Dependency Injector from the words of people whom contacted me directly. At the same time, I think there are more success stories, because I, for example, use a lot of libraries and think them awesome, but I've never talked to their developers. So, frankly speaking, I don't see any straight-forward meter for measuring library usage. Thanks for you comment, Roman
I'm really sorry, didn't want to make you uncomfortable. Thanks, Roman
Hello there, Thanks for feedback :) Can I ask you to explain what gives your a feeling of "heaviness" there? And why do you doubt about the performance (it's written fully in Cython, it's +10x times faster than the same in pure Python) ? Btw, do you use any other DI framework? If yes, can you, please, share what do you like?
Apart from your own talk, what else do you recommend? I'll make sure to attend yours too.
Have you tried this out in interactive mode? You can then see what happens at each stage - for instance, you can inspect your license_nos list to see if it looks right.
Will be there as well, professionally interested in package managment, containers, orchestration and monitoring. Outside-of-work interests are data science, data visualization and algorithms. So a refresher in Jupyter is happily welcomed. :-) Lurking here for other talk and workshop recommendations as well.
haha, I've already been told about how bad an idea this is. I was trying to be kitschy, and test if it's friday, because the name of my blog is 'Python Friday'. It was supposed to be funny, but I think I failed on the delivery. And also, it may not be appropriate to be funny when making suggestions on how to structure code! I added a disclaimer to my post. Thanks for the feedback!
That's normal in pretty much every developed country. Even more than 4 weeks in a bunch of European countries.
I have such a difficult time understanding the purpose of Dependency Injection in dynamic languages. We do DI in C#/Java because it's very necessary for testing. If I want to inject a mocked type into a constructor in Python, the language does not prevent me from doing it. So why would I want this? There are certain JavaScript frameworks that provide DI as well and no one can tell me why.
Awesome tips! I'll definitely work through them!
Thank you , I am here to help you and I will share more courses in the future.
Thank you , I am here to help you and I will share more courses in the future.
Thank you , I am here to help you and I will share more courses in the future.
I haven't really sat down to look at what's on yet. It probably depends a lot on what you're interested in! I know my talk is one of a group related to education. :-)
Again, thanks everyone! Appreciate the feedback! Enjoy your weekend! 
Hi, I see your question. So, I tried to give some more light on this here - http://python-dependency-injector.ets-labs.org/introduction/di_in_python.html &gt; While improved testability is one the first benefits of using dependency injection, it could be easily overwhelmed by monkey-patching technique, that works absolutely great in Python (you can monkey-patch anything, anytime). At the same time, monkey-patching has nothing similar with other advantages defined above. Also monkey-patching technique is something that could be considered like too dirty to be used in production. In overall, I think that dependency injection is useful not only for testing. It gives you much higher level of cohesion instead of coupling. Better testability is just a tip of this beneficial iceberg. 
&gt;I received several chats logs from trusted associates that show PSF members contacting authors and demanding that they stop referencing my books. Believe it or not, it’s because I said Python 3’s strings suck or that Python 3 sucks. I’m not kidding. They are so petty that they are actively trying to destroy the one book that is potentially helping the most people become Python programmers simply because…I don’t like how they implemented Python 3. I realized that I’m now sending beginners into a community that actively ostracizes and punishes anyone who dissents against the decisions of the PSF members. I simply can’t support the PSF anymore given these actions, and I can’t send them new people if this is how they treat anyone disagreeing with them. &gt;... &gt; I also hope that you understand that I cannot continue helping the Python Software Foundation given their track record of abuse. I mean, if you have a book that is also "actively trying to destroy" the efforts of the entire community to move to Python 3, for laughably bad reasons, it's hardly surprising that they don't want to recommend your book.
That sounds really cool! Do you have anything to show? 
This is what subreddits are for though dude, people who are interested in terminals would be on /r/terminals or whatever.
I played with it once, found it interesting, and then didn't do it again, so I can't give you specifics. So, Google it. Pythonista can use data on the iPad clipboard.
I'm putting together master data management matching algorithms for this challenge: https://www.patientmatchingchallenge.com/home I work as a data scientist, but this is my first foray into MDM and probabilistic matching. So far, I've been using a variety of string-similarity measures (some common, e.g. Levenshtein distance, others custom or combinations) to find duplicate records.
Awesome, thank you!
Sweet! I love me some Udemy courses. Thanks a lot!
just my two c, my favorite 'here is what a unit testis ' example is a simple addition function. Say i write a method to add two numbers together. def add_numbers(a, b): return a + b This opens up a TON of options for unit testing. Simplest one is def test_add_numbers(): expected_result = 4 test_result = add_numbers(1, 3) self.assertEqual(test_result, expected_result) 
Added to [the Python OOP catalog](https://github.com/metaperl/python-oop/blob/master/README.md#software-engineering)
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [metaperl/python-oop/.../**README.md#software-engineering** (master → 5b58f2a)](https://github.com/metaperl/python-oop/blob/5b58f2a5e6ef2c2ccfddefdbcb0cdc13737ec511/README.md#software-engineering) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djxbv3e.)^.
Classes in FORTRAN, then Pascal. Self-taught C, and many others. Later, got CS degree which mostly filled in the blanks (algorithm analysis, etc), and after that taught myself python.
Zed Shaw is a pompous douche. 
Imagine if your question was written as follows, where I replaced a few words by those indicated in bold. &gt;Client's reason was because they were light on their **Esperanto** (from **a verbal communication** stand point). &gt;I thought **Esperanto** was a **made up language but recently found out that some people used it to speak to each other**(duh). Why would the lack of **Esperanto** be a deal breaker for our client when there are other **human languages** that can be used (just curious, hypothetical reasons are welcomed).
Thanks OP
And, if you're interested, please check out the PyData Seattle tutorial on Scattertext, the tool used to make the chars in the notebook. https://github.com/JasonKessler/Scattertext-PyData
Why not just use a jupyter notebooks server and a web browser?
I did a conversion some time a go
Is it possible to have it create the HTML files beginning with only 10 entries showing at a time, rather than all? I see your demo starts with only 10 entries showing. Maybe I'm missing something. Thanks!
Awesome!
Thx!
Zed Shaw can suck a fat one.
I had a feeling about this. Good to know, thanks!
I've heard upcs can differ across companies for the same products... I have some ideas to handle this though 
But I thought Python 3 wasn't Turing complete
Just what I was looking for, perfect timing, many thx!
Thank you OP. 
I had another look at the blog post that people objected to, and that section has now been replaced by a sidebar that begins: &gt; In the previous version I trolled people...
Thanks!
There's quite a few parallel streaming solutions out there, but parallel file processing solutions are slightly different. I've done a lot of this with python, multiprocessing, pypy and a simple s3 file mover that allowed me to use multiple instances. The throughput on one was theoretically 24 billion rows a day on two 32-core instances. A few months ago I had a similar system writing millions of files a day to s3, supported by just two 8-core ec2 instances. So, it may be that the simplest &amp; least expensive solution doesn't even require any kind of framework at all. But if you were to use a combination of SQS &amp; SNS then you could build a simple auto-scaling group of servers that could scale-up when you need it and scale-down to save money. And Amazon's lambda could work similarly, though I think it would be more expensive. Finally, I'd be concerned about performance on EFS, especially if you're talking about millions of files a day and bursts, reprocessing and recoveries. In that case I think s3 may work much better.
Also, "PSF members" appears, from context, to possibly mean "any person on the internet who stopped recommending my book and encouraged others not to recommend it either". And as always, the actions of the directors of the PSF (i.e., the only people with the standing to represent and act on behalf of "the PSF") are public: https://www.python.org/psf/records/board/ It should be relatively easy to find the "destroy Zed Shaw" section in the meeting minutes, should he need to provide public evidence that won't compromise the at-risk identities of his "trusted sources".
Ohkay. I am not from a developed country.
&gt;Since I released the book in 2010 I have given it freely to about 12.5 million people. If you look at the Populations of US States I’ve helped enough people to fill about 13 of the lower populated US states. The number of people I’ve helped for free is greater than each population of all but 6 US states. This book as been a labor of love almost entirely from me with help from key people along the way, but otherwise a one man show. I only recently began to realize how remarkable this is that a single person could have so much impact on the lives of so many people. I am really honored that I could help everyone, and if you know me I’m not the type of person to toss around words like that easily. When I say I am humbled by how many people I’ve reached and the number of lives I’ve changed, I really truly mean it. I didnt think you could cram "I", "I've, and "I'm" so many times into one short self congratulatory paragraph. Also 12.5 million unique connections (if thats how he's counting it) isn't necessarily 12.5 million people helped. 
I got to that and stopped. Knowing the breadth and depth of the PEP process and how much better strings are in Python3 ( having first hand fought with parallel code for unix path strings ) I really started to doubt anything on the page.
I'd like to think the Python world has moved on from Shaw already. Or so I hope. After all the shenanigans, I mean, there's just no need for his material, or any of the other baggage that comes along with it.
Ask the question here, is this book good actually good, regardless of author view on py2 vs py3?
You sound like a great teacher!
I just started using it, and im learning things. So, its working so far.
Honestly, I am hesitant to admit this given how much people rage against Zed, this is the book that, for me, cracked the barriermand really got me coding. He may be a dick with weirdly misguided opinions, but the criticisms I see when this book pops up are about Zed, not necessarily about how he covers and reaches elementary Python. I recommended this book to two colleagues who were 'stuck'; one with an online course and one with an o'reillt text, and they both switched to it to great effect. I wish we didn't need to throw the baby out with the bathwater. The boom used to be in the sidebar. Not because Zed was a saint but because it was _effective_.
[removed]
Django does everything the Django way even if the thing is not Django-specific. E.g. tight coupling to Django internal packages, when the package could be a simple pure-Python package and could be used by everyone. So basically there is a Python ecosystem and a Django ecosystem. It's the fault of the developers who can only think in Django and not see the bigger picture. I really hate this one in the Django community.
Would you even say you were *waiting* for Godot?
Why do you think you need Kafka, Hadoop, or several CPUs? First, what are your requirements? * How big are your input files, how big will your outputs be? * When processing one file, how long does it take to process, what is your CPU and memory load? * What are your time constraints for processing? How many files processing in X (minutes, hour, days)? * Is this a one time thing, or will you be doing it again? * What degree of automation do you need? * Output dataset management: who and how will these be accessed? Will you need them immediately in a database for analytic queries? Can they sit as a file in storage until needed? There are many ways to do what you described, and depending on your requirements, you can go as simple or complex and expensive as you want. My first inclination is suggesting you only need a queue and taskers, but I'll run through all your options. --- Storage: Depending on your input and output size requirements and availability (who's going to access the file, and how will they access it?) you can go one of three ways: local file system, network system, or cloud storage. If you think you need cloud storage, S3 is a solid change to handle your inputs, so long as you don't need to update or access the files frequently (if you do, re-architect or go with a cloud file system). S3 has event hooks to fire off a task when a new file appears. --- Result sets: If it doesn't matter that all the results aren't in the same place, you could create sqlite dbs for each output result set, and use a database to track them. You could even save result sets as CSV and documents for future processing. If you need a database, use a document database (MongoDB, or AWS DocumentDB for managed service). If you want more structure, PostgreSQL has hstore and json fields. (I recommend PostgreSQL as a managed service because it can be a hassle to operate and scale). If your database needs are truly huge, too big for one VM, and you need to hold onto files for a significant period of time after processing, you'll need a distributed database. MongoDB and PostgreSQL allow you to shard your database across multiple nodes. But if it's even bigger than that, and you want to run analytical queries against all your datasets, create a new table for each result set, consider a data warehousing solution, you can add the Citus extension to PostgreSQL or use Greenplum DB, orAzure SQL DW. Mongo may also do the trick if can stomach its pipeline aggregation query engine. --- Task processing: Simple processing: * multiprocessing * [Bash xargs](http://coldattic.info/shvedsky/pro/blogs/a-foo-walks-into-a-bar/posts/7) low-level distributed job processing and management libraries: process management: * apscheduler * supervisor (pair these with a job queue library) job queue libraries: * gearmand * joblib database-backed job queue: * RQ * Huey * Celery simple workflow management: * Makefile * python-flo --- Workflow management: There are tools that can handle complex dependency handling (i.e., dependencies on datasets or earlier tasks) and can track job status, errors, and provide alerts, monitoring, and reporting. * Apache NiFi * Airbnb's Airflow * Luigi Managed service workflow system: * Azure DataFactory -- Data Lake management system: Then there's this. If you really don't want to think about it, and want a system that can handle all use cases and scale, If you don't care about the architecture details and want a one-stop-shop turn-key solution, i.e., data lake management platforms. You can run locally, on a VM, or get a marketplace managed VM. You can shard easily if you need to. * Teradata Kylo * Hortonworks Data Flow These are both built on top of Apache NiFi and feature a series of Hadoop tools to handle your data processing storage.
The SoloLearn Learn Python Course covers the following topics: Python Basics, Data Types, Control Structures, Functions and Modules, Exceptions, Working with Files, Functional Programming, Object-Oriented Programming, Regular Expressions....and even more! So don’t wait; dive right in! Start coding with Python! http://tattooapk.com/Download_Learn-Python-1_full-apk.html
Ever read anything stephan wolfram has written?
We've had Dive Into Python 3 available for free for years now; is this late addition really useful?
How does this get a downvote? The world can be unfair at times...
Is there a device similar to the arduino you use that works with python? 
Except he wasn't trolling, that's just a dumb excuse for being horribly wrong.
There are simple examples in the docs, as a beginner one of the most important things to do is learn to read and use the documentation effectively. 
His book is still a great book. People need to learn some objectivity. 
Lists are mutable, tuples are not
This. His book is good. I don't give a shit if Zed is the new Zitler. 
so are tuples in parenthesis instead of brackets and are they sort of like constants? 
To be a community that supports education and open mindedness, it is strange how quickly people will turn on you. Yes, this man seems to be quite the chode but if there is knowledge to be gained from him then let him have himself. I don't really care how much of a dick anyone is if I can learn something from them. 
Sadly, being a douche to Zed doesn't make Zed less of a troublesome character. It just makes you a douche too. You've just got to to turn the other cheek on this one. Let him do his thing, and don't be drawn into the trolling. It's a book; it's actually not bad. It can continue to fill up the space around teaching python 3, and that's a good thing. If anything, going non-free means less people will see it (inevitably), so really even if you object to Zed's teaching style or views he imparts to his students, its still a net win this way. Calling people names doesn't help. We should all just go; well, you've sucked it up and moved to python 3 like everyone else is. Good job.
Yes that's one way to think of it. Tuples are like immutable records
The fact that this post is being upvoted I think shows that the members of the community are willing to use his books as a resource, we just also want to keep people aware that the author is an ignorant chode.
I wanna be clear up front. I downvoted, but so you don't go to bed tonight imagining why, here's why you're at 11 downvotes after an hour [or at least why i contributed] Its not because you're not talking about python, the book or the author. Its because this is, word for word, how the speech starts. &gt;Your Majesties, Your Royal Highnesses, distinguished members of the Norwegian Nobel Committee, citizens of America, and citizens of the world: &gt;I receive this honor with deep gratitude and great humility. It is an award that speaks to our highest aspirations -- that for all the cruelty and hardship of our world, we are not mere prisoners of fate. Our actions matter, and can bend history in the direction of justice. &gt;And yet I would be remiss if I did not acknowledge the considerable controversy that your generous decision has generated. (Laughter.) In part, this is because I am at the beginning, and not the end, of my labors on the world stage. Compared to some of the giants of history who've received this prize -- Schweitzer and King; Marshall and Mandela -- my accomplishments are slight. &gt;**And then there are the men and women around the world who have been jailed and beaten in the pursuit of justice; those who toil in humanitarian organizations to relieve suffering; the unrecognized millions whose quiet acts of courage and compassion inspire even the most hardened cynics. I cannot argue with those who find these men and women -- some known, some obscure to all but those they help -- to be far more deserving of this honor than I.** Even if you were on topic you're still flagrantly wrong.
&gt;About the Author &gt;Stephen Wolfram is the creator of *Mathematica* and is widely regarded as the most important innovator in scientific and technical computing today. --Stephen Wolfram He certainly has the largest ego in scientific and technical computing today. 
Other people have already answered your question, so I'll just say: in the future, head to /r/learnpython for questions about syntax and stuff like that.
I didn't think anyone was even still using Zed's books.
I like this service and I've used it, but running snippets tends to be a little slow (reloads the console every time, whereas with a notebook app it's instantaneous)
This is cool. Looks like the other one I found, but I think this one might have a few less sign-up and set-up steps to click through: https://studio.azureml.net/
Nice. I'll check that out. I don't think I'll be allowed to install anything, but good to know this is out there.
Learn Python the Hard Way was one of the first programming books I read and I found it to be a great resource. I think Zed is a solid educator. He also comes off as a total douche. The two things don't need to be mutually exclusive. And honestly, if someone is going to take someone like Zed as an authority on whether or not to support Python 3 or the PSF given his character... I don't see it as a great loss. That's on them.
Would be better if you ask in /r/learnpython. Also, the error has nothing to do with processing. It's pretty descriptive in itself: unexpected argument "offset". Please refer to related documentations for the function's proper usage.
Def gonna check this out. The CC sign up is a deal-breaker for this workshop, but I could see using this myself!
Thanks
He really speaks like a "humbled" man. XD I really wonder how many of these people have quit programming because of Learn Python the Hard Way. They are not here to write complaints. I remember that when I read the book it made programming look rather dull and cumbersome and I had to fight not to quit (actually I haven't read the last chapters). Fortunately I had read another book before that showed me how much fun programming can be (Program Arcade Games).
[Ned Batchelder: Lists vs. Tuples](https://nedbatchelder.com/blog/201608/lists_vs_tuples.html)
I'm not an expert on the libs you're using. I can only see from your output that the problem is an unexpected argument. If you've fixed that, what's your current output? Also, would be better if you clarify what "processing" you are talking about. Is it processing in "multi-processing" or in "processing an image"?
Thanks for responding to the call. https://xkcd.com/386/
[Image](https://imgs.xkcd.com/comics/duty_calls.png) [Mobile](https://m.xkcd.com/386/) **Title:** Duty Calls **Title-text:** What do you want me to do? LEAVE? Then they'll keep being wrong\! [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/386#Explanation) **Stats:** This comic has been referenced 4350 times, representing 2.6773% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_djxppzi)
What do you mean "fix this argument"?
For comparison, read the [Django Girls website](https://djangogirls.org/): "we", "our" and "us", and you have to really hunt to find out the names of the founders. They're building a community without egos. Also, while it's a Django tutorial, it does have a nice [introduction to Python](https://tutorial.djangogirls.org/en/python_introduction/), which has always been Python 3 :) (And it's [available in 14 languages](https://tutorial.djangogirls.org/)) 
Bahahahahahahaha! Its what I'm here for
So you are running Python code using an interpreter called "processing"? Never heard of that... But it wouldn't be relevant to your code.
Excuse you. He actively discourages his students from trusting or learning from experienced programmers other than himself by telling them they're out to stymie their growth. With that context, he posted an explanation of his hatred of Python 3 filled with outright lies and nonsense, targeted at people who couldn't know any better. Afterward, his defense of this action was to call it "trolling." Calling someone out for bad behavior&amp;mdash;I'll be generous, what I and others perceive as bad behavior&amp;mdash;is not itself bad behavior. It does help to discourage people from using a resource that provides unhelpful advice and it helps to ward them away from a toxic personality like Shaw's.
By removing the argument as you just said yourself?
Shaw had and still has a great book but his attitude is kidna a downer.
There's a few other significant differences than just the punctuation surrounding them, through they're mainly -- more or less -- products of that *immutability*. A **list** is inherently variable in length, so Python has to allocate extra memory just because you might grow the list in the future, and the interpreter wants to be able to do that efficiently. To do so it allocates more memory than is required to hold the current amount of data, and as the list starts to fill it allocates more, then more again, and so on as you append. A **tuple** is fixed-length, so it takes up considerably less room in memory, though precisely *how much* gets super weird since a tuple can itself contain lists. A **tuple** is also, generally, *hashable* because its order and contents are fixed. This allows it to be used as a key in a **dict**, which can be very useful. I say generally, though, because the contents of the tuple must themselves be *hashable*, so a **tuple** that contains a **list** won't work in this manner. BTW, once you grok the above, it's worth looking into **collections.namedTuple**, which is basically a factory for creating records that use **tuples** internally, but allow access to its internals by name, not just index.
Adding on to what /u/Jon003 said, *LPTHW* was the book that got me into coding. It was very effective. The [approach](https://learnpythonthehardway.org/python3/intro.html) made a lot of sense to me: &gt; With the help of this book, you will do the incredibly simple things that all programmers do to learn a programming language: &gt; 1. Go through each exercise. &gt; 2. Type in each file *exactly*. &gt; 3. Make it run. &gt; &gt; That's it. This will be *very* difficult at first, but stick with it. If you go through this book and do each exercise for one or two hours a night, you will have a good foundation for moving on to another book about Python to continue your studies. If you've tried other books and tutorials without success, give this one a shot. (The accompanying video lectures didn't exist when I read the book. I doubt they're worth it.)
So that bank website doesn't require captcha to login? Apart from that, I don't see any legal issues here, if you're only trying to access information you can access with a web browser.
I'm just waiting for the Beasley's Python 3 Essential Reference. 
The thing is, you should look at the docs for `threshold_adaptive` and how to use it. Since you wrote from skimage.filters import sobel, threshold_adaptive yourself, I'm sure you know better what it does than me.
Thank you for the wonderful explanation!
Add that to the cons column 😀
Alright I see. Just a tip: if the code is someone else's then it probably could run with another version of that lib. So reading the docs would be useful.
I did a lot of research on the subject for work a couple years ago, and ended up using https://pypi.python.org/pypi/jusText I recommend doing some testing for your specific use case, there's a lot of variance on precision/recall with this kind of tools. There's no one-size-fits-all solution.
Yep. I'll be the first to say this book helped give me a an easy, and encouraging on ramp to the world of computer science. I can understand why it's not good reference material or why for some students it would be way to slow, but it allowed me to understand enough to know that I was interested. I'm now halfway through an MS in CS , and it been great so far. Zed seems pretty full of himself, and this move seems more selfish than not, but, the book itself is fine for very early beginners. Just ditch his editorializing. 
You can call someone out for bad behavior without calling them names, telling them to go fuck themselves, they can go suck a big one, telling them they should flat out leave the community, etc. ...and people, from this community, have told Zed all of those things. Which is out of line. Don't do that. If you do, **youre** in the wrong. There is no two ways about it. 
I went from a junior business analyst to a pretty good python dev mostly on lpthw. I mean, lots of self driven teaching after, but that was my first step into real programming. 
The book is fine. It's a solid approach to going through programming steps. The biggest mistake he makes in it actually regards his view on py2/py3 where is explicitly tells novice programmers that python 3 is rubbish mostly using misleading or incorrect statements that mask preferential things. 
It's probably completely unfair, but something in my soul just rebels against a book that tells the reader to flat out [memorize ~~26~~ 52 cells worth of truth tables in order to later understand logic](https://learnpythonthehardway.org/book/ex27.html). Well, at least he's honest about "the hard way".
Why would a single author use 'we, our, us"?
Lol what. I've never seen that part. I mean, sure, boolean logic can get hard, but the tables that he provides are for really fucking simple operations. How come memorizing that is easier that explaining the simple concept behind OR and AND is beyond me. I guess I studied programming the wrong way.
This is wonderful. I can't fathom what possessed you to want to do this with all the money to be made. It looks like you have a lot of great content in there. 
I daaaamn near did. Luckily I found much better resources (for Python 3) that don't have the same philosophy as my highschool math teacher of "just do exactly what I say and don't ask why." 
Why the hell would you memorize that? Evaluate the expressions, sure.
Because that *is* the way you learn. When you see a complex condition, if you cant remember that A AND B is false when a is true and b is false, then you won't be going any further with Boolean logic. I think of it like memeorizing multiplication tables upto 10. Through repetition most folks end up memorising it, whether they do it intentionally or not. We can make fun of why this needs to be done because it seems so intuitive, but to a beginner it is hard. Think back to the time when you had to learn 2+2 by counting on your fingers, and how hard it seemed. For a book aimed at brand new coders, this is a very effective approach.
&gt; Implying that meeting minutes are always accurate
It's so wrong that "douche" is allowed here but your counter arguments are being voted down. All because Zed Shaw has differing opinions from the status quo. It's this kind of exclusionary behavior that made me stop attending python events. The python community is so nasty to those people who don't toe the party line. Sure, give Steve Holden a pass for molesting people on multiple continents (like me at djangocon and PyCon), but Zed said some negative things about Python 3? Let's do underhanded things to ruin his business of teaching students! The python community is disgustingly hypocritical.
Zed's dead baby, Zed's dead.
AS someone who's late to the party, what exactly is wrong with Python 3? I've switched all of my development to Py3 and 1) it really was not that hard and 2) It's awesome, there are features that I really like.
I see you Mr FBI. We will not fall for this trap.
That's good for me that I help you
Wow. I'd be using [Hypothesis](http://hypothesis.readthedocs.io/) to test this for sure - it's perfect for these fiddly invariants.
Zed Shaw's problem with Python 3 is that Zed Shaw is an insane person. Zed Shaw believes that Python 3 isn't Turing complete. How can you have a reasonable discussion about this? How can ... ? What does ... ? I can't even. There is no meaningful platform to start a conversation with Zed Shaw about Python 3. You read Zed Shaw's criticism of Python 3 and ... every single sentence you ask yourself "what the fuck?" Every single sentence. It's almost as bad as timecube and worse than flat Earth theory. The man is mentally ill.
He speaks like Donald Trump. Not quite the same - Zed Shaw doesn't have the same repetition and simplicity, but there's something about the sentence structure and egotism, and especially that fake humility thing, that really feels like a Trump speech.
I know no one ever does, but read the terms and conditions for your bank. Technically speaking, yes, you're entitled to access your account, but they have a fairly broad range of discretion on what constitutes access, and a script initiated by you might not, legally speaking, be the same as you accessing it live. Also almost every bank offers a download your data facility of some sort, and some even have an API specifically for that purpose, so scraping might be unnecessary to begin with.
One reason could be that we want to build up a sense of community; and so, rather than talk about ourselves individually, we might talk about things inclusively from the perspective of the whole community.
Alright OP. This thread is waning, but I'm pretty sure I have a solution for you to defuse the situation with some laughs. Get yourself a fake white beard and let a few co-workers know about the plan. At an opportune meeting with this manager and none of his superiors, when code style comes up, put on the beard and recite a Gandalf-esque speech. &gt;I am a servant of the sacred PEP-8, wielder of the Zen of Python. You shall not *pass*. This dark coding style will not avail you, manager of Companyname. Go back to the Shadow! You shall not *pass*.' (Followed by dropping out of character and saying, "seriously man this pass statement at the end of a block is a bad idea.") What you're going for is defeating a bad idea with humor. Boss man can easily say "well if it means so much to you" without losing face. You need to prime your co-workers so they're in on the joke and laughing instead of confused. You can't embarrass him in front a superior. You have to have the beard or a staff or something, because that's how you show it matters to you such that you put unnecessary effort into making a point. You're looking for a new job anyway, so hey....
&gt; *Can't I just learn the concepts behind boolean algebra and not memorize this?* &gt; &gt;Sure, you can do that, but then you'll have to constantly go through the rules for boolean algebra while you code. If you memorize these first, it not only builds your memorization skills, but it also makes these operations natural. After that, the concept of boolean algebra is easy. But do whatever works for you. Please tell me this is a joke...
I recently wrote a websocket library, https://github.com/wildfoundry/dataplicity-lomond Will definitely have a look at your code when I have the time. Happy to collaborate...
LPTHW me started, now python is my job. Make of that what you will.
Source please (even if by a troll)
Does this have to be completed in a certain time limit or basically whenever?
I also went with `jusText`.
Dude, you can just literally google that question and get a stackoverflow answer. 
&gt; Looking back on the last 7 years I realized that I’ve helped a tremendous number of people, but I recently started to think that I could help people even more if I sold my books. What?! No! You helped people who wanted to become programmers, and a number of these people are kids! WITHOUT CREDITCARDS! These guides were helpful BECAUSE they were free... Seriously. Finding good Python tutorials for the bare start is hard, and normaly only the first few chapters are important, after that some are already good enough to look for their own documentation or other code examples. But the first few hours coding are crucial, and they are best when you dont have a large entry barierre, when this is free... You are just making money and less people are happy. Just say this and i wouldnt be complaining. But lying isnt going to help.
&gt; All because Zed Shaw has differing opinions from the status quo. Saying "Python 3 is not Turing-complete" is "different opinion from the status quo" the same way as saying the earth is flat. &gt; Let's do underhanded things to ruin his business of teaching students! If you warn someone of a scammer, is your motive to ruin the scammer's business or to protect the innocent?
[Pretty much this](http://i.imgur.com/NipojEa.png)
&gt; I'd like to think the Python world has moved on from Shaw already. One of the reasons why his book was so popular was that it was well grounded, if a little dry, and free. Now that it has a barrier to entry people will be less likely to recommend his book. In fact, looking at the price he's pitched himself at, he's competing against books such as Python Crash Course. Which, I feel, is vastly superior to LPTHW in every way. 
It was a great book when it was free. It is overpriced for the quality of the work now. He's in the same price point as Python Crash Course which is a superior experience for new programmers. 
He's now edited his respond so it breaks his turing complete thing into a note which explains he was "just trolling" https://learnpythonthehardway.org/book/nopython3.html Here's what he said: &gt; In computer science a fundamental law is that if I have one Turing Machine I can build any other Turing Machine. If I have COBOL then I can bootstrap a compiler for FORTRAN (as disgusting as that might be). If I have FORTH, then I can build an interpreter for Ruby. This also applies to bytecodes for CPUs. If I have a Turing Complete bytecode then I can create a compiler for any language. The rule then can be extended even further to say that if I cannot create another Turing Machine in your language, then your language cannot be Turing Complete. If I can’t use your language to write a compiler or interpreter for any other language then your language is not Turing Complete. Followed up by &gt; Currently you cannot run Python 2 inside the Python 3 virtual machine. Since I cannot, that means Python 3 is not Turing Complete and should not be used by anyone. He wrote this in an area where he is talking to novice programmers, who have been recommended his book as a starting point, and thus has been given credibility by that relationship between the novice programmer and the person who recommended it. Here is the rebuttal that made Zed sad https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/
I recommend the book "Fluent Python" by Ramalho, if you do not already have it. 
newspaper works fine for me, and I scrape dozens of different sites on a daily basis.
Open minutes are a laudable thing... but I don't find your argument convincing. People are perfectly capable of communicating outside the constraints of a board meeting and it's unlikely that people would talk about very contentious issues at board meetings unless it's necessary.
He said 52 cells. Why do you need to memorise "not or"? For basic programming logic, you need AND, OR and NOT which are 10 cells. Of these, NOT is trivial and once you understand how AND and OR work you can write out the table. XOR can come later when you start needing to do bit twiddling, but how often does a beginning Pythonista need that? This isn't a C book.
&gt; I'd like to think the Python world has moved on from Shaw already. Obviously not, since this has made a big thread on r/python :)
They "all" have bitcoin. Who needs a CC? But seriously, kids manage to a do a lot these days. I mean they can setup a Minecraft server with a forum and community, and actually grow it, which is more than some commercial outfits or professional developers can manage. I'm not denying that free information makes it easier to access. But is does also attract a different kind of user/customer. If you're the type that will pay for the book, you're less likely to be put off it once you start by people telling you things about the author.
First, keep in mind that "PSF members" includes literally anyone on earth who feels like filling out an online form for free. So as long as someone who is a PSF member also did the things he claimed, he can back it up even if no person authorized to act on behalf of the PSF did those things. And hi. I serve on the board of directors of an open-source foundation (not the PSF). Our most contentious current issue is mentioned clearly in the minutes of our meetings, posted publicly on our website. These kinds of foundations are often legally required to maintain certain levels of transparency with respect to their official acts.
Hyperlinks! http://www.diveintopython3.net/your-first-python-program.html https://learnpythonthehardway.org/book/ex4.html These strike me as pretty different books. Learn python the hard way seems to start at a lower level and concentrate far more on skill acquisition through exercise sets. Dive into python is quite a different book covering more material from a higher level viewpoint.
It's not for bit twiddling. You need to know it for writing conditionals. Not Or because you will write conditionals like ~~if (not a or b): ~~ if not (a or b) Not Or and Not And are difficult to logically derive for a beginner. I've come across a number of professional programmers who will wrongly replace ~~if (not a or b)~~ if not (a or b) with if (a and b). So you can imagine the state for a beginner. It's easy to derive for you, but you are not a beginner :) What is muscle memory over years of repetition is a new &amp; difficult encounter for a beginner. You just have to scroll down this topic to see the reviews from actual non-coders on how effective they think this approach is. Edit: I meant if not (a or b) in the example above
That looks like codegen more than it does dynamic/runtime fixtures though, it's "runtime" because everything in Python is.
2 - 5 week delivery! 
-- Michael Scott
I have no doubts that ~~your~~ PSF minutes are accurate. I think it's very unlikely that the PSF board in its entirety care about Zed Shaw's book. What I find plausible is that members of any board might muse about doing nasty things on a chat server somewhere (though actually doing them is quite a different matter), or tell people that they shouldn't recommend Zed shaw's book. I find it equally plausible that any author might hurriedly read these comments and post an angry public reply which misrepresents the exact details of what happened.
In scientifica publishing sometimes you come across articles that use *we*. Then you go to look for the names and find only one. The reason why the plural form is discouraged is because it imparts an argument or statement of authority through numbers. If you are the only author you should be honest and tell that this is your work and not hide behind a community. Sadly many new scientists are scared to stand on their own therefore trying to hide behind de *we* and the *us*. Lastly a community can have different opinions. The *us* within the community can be also a divider. Unless you are speaking for a group of people as a representative or you are several authors don't use we. It is worse than an egotistical *I*, since it hides behind the numbers.
Yes. Actually 5, but one week is earmarked to be held outside the summer vacation window (1.5 - 31.8)
&gt; If you warn someone of a scammer, is your motive to ruin the scammer's business or to protect the innocent? Careful with your analogies there! A hurried reader might think you were suggesting Zed Shaw is a scammer, which I don't believe to be accurate. I think you risk taking the turing complete thing out of context. Here's a link to the earliest version of the page with the turing complete comments that I could find: https://web.archive.org/web/20161123042252/http://learnpythonthehardway.org/book/nopython3.html I think the paragraph in question is really in need of some :P emoticons, but the charitable interpretation of the what his is saying which is what I personally believe is: 'So you can't write a perfect 2to3 translator then? Really, well I guess your language isn't turing complete then!' I don't even think his point is particularly wrong, he just might like to set it out with less fire: Various policies regarding python3 are designed to extinguish python2 and produce readable idiomatic python3 code at a cost to developers. Of course, the PSF has decided that this cost is acceptable one and the payoffs of not looking after 2to3 compatibility *forever* are worthwhile.
Many people didn't enjoy it anyway
The part about Turing completeness was just a really vexing kind of trolling. He didn't like that the python devs didn't spend a ridiculous amount of effort to make Python 3 fully backward compatible with Python 2, and dismissed their arguments with a childish snide remark. Basically it went like this: *"What do you you mean you can't assemble this IKEA bookcase? Do you not have hands? Hey everybody, Joey says he has no hands!"*
He misled beginners about Python 3. He might not be a scammer, but he was sure hurting the innocents. 
Stop there. I cant take nomore.
Yeah, I think that's a pretty misrepresentation (probably not deliberate). Here is an early version of the Zed shaw page: https://web.archive.org/web/20161123042252/http://learnpythonthehardway.org/book/nopython3.html My reading of the turing complete comments is that they are a mistimed joke along the lines of: 'Hey why can't you write a perfect 2to3 translator, isn't the definition of a turing complete language that you can interpret every other language?' I like to think of myself as a reasonable person, so I'll to try lay out my interpretation of Zed Shaw's arguments in a balanced way. - Python3 doesn't support python2 code and it is difficult to convert code - This decision is designed to kill or python2 (at a cost for python developers) - This in itself is quite an imposition - Because the costs are so high people won't move library or framework code over to python3 - This will lead python3 to die - The choice between correctness, ease of use and unicode in python3 is wrong - The fact that there are three string interpolation methods will lead to hard to read c ode (analogous to how large C programs often build their own ad-hoc standard library) I'm not sure how compelling I find these arguments, vii. is probably true but I don't think this causes that many problems in practice. vi comes up when you pipe the output of your program into another program.. which is kind of irritating, it really bites one when one is trying to write code that deals with unicode strings and runs under both python 2 and 3, though this is only really a library writers problem. I think it is wrong to completely dismiss i-v, the effects are real, and there is a reason that lots of people haven't switched over to python3 even now. The question is how high the changeover cost is and how high the payoffs of being able to ditch python2 support are. This is rather thorny topic because at it's core it has this element of 'We are going to make you do things' and 'We are making life harder for you and easier for ourselves. But by making life easier for ourselves we can serve you better'
In python you have a lot of unperfect tools to scrape website Pygoose wich is a portage of goose Newspaper that didn"t satisfy me because failed systematically over blogs Scrapy that work only if you master your targeted websites I always end up by writing a scraper that fits my needs to handle for example dynamic website and fake ajax requests... 
This argument is definitely valid. I think he genuinely felt that python2 was a better language than python3, but I think his arguments were rhetorical enough to mislead an uninformed reader, and mixing this up with the whole moral aspect of 'why are you making me do work' in such an introduction is a problem. He's a passionate guy.
*Can't I just learn the rules of maths Zed?* Sure you can, but then you'd have to go through them every time you wanted to add two different numbers together, this way you just know them! 
One issue I can see is that you are reading a chunk size of 2048 and assuming there is going to be exactly one frame in there. If the frame is larger than 2048 bytes, you are going to ignore the rest of the frame. And if there are more than one frame in that 2K you will ignore them as well. Not sure how familiar you are with low-level networking, but if you send n bytes, there is no guarantee you will recv n bytes on the other end. You might want to look at the struct module in the stdlib for processing of binary data.
It's sad that timecube is gone.
People established in Python have moved on, but pretty much every day on r/learnpython an innocent noob posts something saying they are using this terrible resource. It makes me rage...
&gt; Can I ask you to explain what gives your a feeling of "heaviness" there? How much code and documentation-reading is required to solve a simple task? For example: I have a function called `add_user(email, password, *, mailer)` and I want to inject the mailer parameter. How do I: a) Prepare a DI container with a singleton "mail_service" instance? b) Call `add_user` with the help if the DI container, providing only two parameters so the third is injected? c) Create a callable that is bound to the DI container and automatically injects all missing parameters, but only if they are not provided explicitly? &lt;-- This is what I actually want most of the time. I tried and managed to get a) working with a lot of code, multiple long include statements (the `dependency_injector` module does not import its submodules, so you have to do it manually), but I failed to get b) running for more than ~10 minutes in the REPL while reading documentation. The documentation describes how to define providers and containers (groups of providers) and I know that I can call a provider to get the instance I want, but I cannot find a single example how 'injection' works. *How do I actually inject stuff into stuff?* This should be on page one, in the very first example. Turns out you have to wrap your callable into a `dependency_injector.providers.Callable` and explicitly bind all injections you want to use, then call the resulting provider. At least I think this is the way to do it, but its more like c). I still do not know how to get b) working. Another problem: Now you have instances of `Container` or `Provider` floating around in your business-code and are calling these directly. Shouldn't a DI framework be more or less transparent to the application? I know how DI works in Java world and I think I know how DI should work in Python world (*). This is neither. &gt; And why do you doubt about the performance (it's written fully in Cython, it's +10x times faster than the same in pure Python)? Oh, did not know that. But is it really worth the effort (and the hard dependency of a full build stack and python header files on any machine I want to install this, because there are no pre-build wheels)? Are there realistic benchmarks? I kind of expect benchmarks to exist when a library claims to be 'High performance'. (*) For the curious: I played with the idea myself and the result is [bottle-inject](https://github.com/bottlepy/bottle-inject). I never completed this project, but the readme should give you an idea how I would do it. The library could be used outside of bottle, too. Just skip the first section of the readme. 
You can take it at any time 
you are a legend of the highest degree! thanks!!
What makes it bad IYO?
an nicely spotted, I made that assumption since I knew my messages weren't bigger. But you are right, I will add this to the todo. I am aware of the struct module, I chose this approach since it more closely what the RFC describes.
&gt;the criticisms I see when this book pops up are about Zed, not necessarily about how he covers and reaches elementary Python. Eh, you're not looking very hard then. I found the book to be poorly organised and lazily constructed. Its focus on rote-learning instead of conceptual understanding is just weird. Lack of in-place explanations are justified with 'look it up in the official docs, you're going to have to get used to it anyway'. And he suggests that people who don't enjoy his style are just not cut out to be programmers. In this sense, his dick-ish personality pervades the content of the book, the two are not distinct. People think he's a dick largely because of the way he wrote the book, not just because he seems like an ass at a personal level. Which is not to say it's useless, just that the style of it is really going to appeal to a subset of personality types who gain motivation from being whipped, but for people who don't learn well that way and who aren't sure if they are cut out for programming it can be a huge deterrent. Basically I just think that any recommendation for LPTHW should always come with a caveat and an alternative option. My standard recommendations are programarcadegames.com (my personal favourite) and Automate the Boring Stuff.
[Here](https://www.reddit.com/r/Python/comments/6lx37r/slug/djxyoj7) is a comment I just made which elaborates a little. If you google "LPTHW complaints" you should find a curated list of issues people have raised with it.
[If you're in EU, soon banks will be required to allow you doing so by EU law.](https://www.evry.com/en/news/articles/psd2-the-directive-that-will-change-banking-as-we-know-it/)
Code is imperfect, I will be glad and grateful to the proposed pull request. In the plans global recycling and development of payment using **Bitcoin**. [Issue](https://github.com/eorgiose/order-bot/issues/1).
It's not as easy as it should be: w = root.winfo_screenwidth() h = root.winfo_screenheight() size = tuple(int(pos) for pos in root.geometry().split('+')[0].split('x')) x = w/2 - size[0]/2 y = h/2 - size[1]/2 root.geometry("%dx%d+%d+%d" % (size + (x, y))) https://stackoverflow.com/questions/3352918/how-to-center-a-window-on-the-screen-in-tkinter These should go in /r/learnpython
Just read it thanks. And you gave recommendations which is what I was going to ask next. 
Thank you!
That book looks interesting, I think I'll check it out.
You can get his python 3 cookbook for several years, and it's more useful IMHO. 
No problem. Make sure to hang out (and post if you have troubles) in r/learnpython, it's a very active and helpful community.
I followed the discussions (nov 2016) about his rant against Python 3 and it was obvious that the author lacks a lot of it knowledge and demonstrated misunderstanding of basic programming concepts (see https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/). So personally I'd prefer not to learn from him.
Sorry for the noob question. I want to learn Python and didn't know how controversial this tutorial is. Can you recommend any others? Thanks.
Keep in mind that it isnt for a beginner, in so far my recommendation may be a little misleading as a replacement for an introduction to python ; p
Well, I'm not a complete beginner so I won't be completely lost :p
Don't take the "controversy" too seriously -- many, many people have started programming with LPTHW. It is an excellent introduction to Python and programming in general if you have little to no programming background. It goes over basic concepts like how to use the command line and boolean logic that are assumed background knowledge in other programming texts. You can do much worse than starting programming with LPTHW.
Who also wrote a great Python book... which is why I'll continue to recommend LPTHW. It's a great book, Python3-hating douche behind it or not.
It's a great book though. And really, for a beginner that won't read about him being weird, what does it matter`?
I do something similar though through docker, I'd like to here more about you setup.
Yes! I've recommended various books to people over the year, and LPTHW is by far one of the better books. It's a great book, and I would still recommend it even if the author is a tad crazy.
Please, don't listen to all the people hating. LPTHW is a great resource, and a great way to learn Python. Not wanting to use something because some side of it is "controversial" is like not believing in evolution because in some fringe areas that would be "controversial"...
It might be better to post this in the processing subreddit: https://www.reddit.com/r/processing/ This is python 2.7 code, so check that your python plugin in processing matches. You might be better off to install anaconda from continuum.io rather than the libs you have from pythonlibs. Also, I think that processing has changed a lot in recent years especially wrt to python. It looks like a library may have changed here. 
Just subbed. It will come in handy. 
To be honest I find it ridiculous. I'm self-thought and programming for 5 years and today is the first time I heard that there exists a thing called logic tables.... absolute stupidity to think you would need this. It will come natural as you program.
Very interesting! But needs more documentation and explanation of how and why it works. Otherwise it looks like voodoo. 
wtf is this
I dunno, I think his tutorial helped me more than other tutorials. Granted, I did some other tutorials before I did his(code academy and a couple of non-python edx classes). His tutorial at that time was perfect for me. My big problem was getting out of the simple boxed in environment I was accustom to working in as a complete programming rookie. He helped me get comfortable there getting out of that environment, like no other course did. I'm also a self-aware sarcastic autistic douchelord. So I can appreciate his form of dry humor and not take his douchelordliness too serious or out of context. But I can definitely concur that Learn Python the Hard Way is not for everyone. 
Modern looking and cross platform? Qt (through PyQt or PySide, your choice).
Anything besides the Fox Toolkit, but I prefer PyQt5.
In first realase it was set it to 20 by default but in subsequent release changed to all by default. I will add a command line option to specify the item limit in next release.
I have a project that I am working on that has one heck of a dependency graph if you will. If I don't keep track of them in code, I have a dickens of a time trying to remember how things link up when I revisit specific modules months later. Your examples are clear enough. Now I need to try putting together a concept design using this pattern to see how it would change my present design. It's still a head scratcher at this time. What I don't want to use this design pattern for, is a substitute design pattern for building a bunch of interfaces. Zope's architecture was full of interfaces and being the copy cat that I was at the time (plus I came to python from a c# background) I started writing interfaces everywhere when I first started using python. Hated it. It over complicated some simple applications or scripts that I was writing in python. I have since regressed to using inheritance and compositions (mixins) to string things together. On top of that I have added module(s) that track state and share varables without using globals. My biggest headaches today evolve around GUI design. In a particularly big application that I am developing, I am trying to completely decouple all the business logic from the GUI and at the same time, have two entry points into that business logic. One via the command line (using click plus ptipython) and the other via the GUI toolkit (kivy). I will later expand this to include a webview front end. This particular app needs to run on desktops, ios and android's myriad of platforms. And when running on Android the performance hit incurred when reading and writing to flash plus the obvious slower cpu clock cycles has to be taken into account in the code. I make sure that the app runs completely from the command line. Lots of cli screens that mimic what the gui will show. What happens now is that my GUI calls into my cli components. The cli in turn calls business logic. And the cli components that print to the terminal, avoid printing to the screen if they've been called from a gui widget. Jumping from screen to screen where the screen needs to access business logic that could be anywhere, has had me scratching my head. I have a solution but the dependency graph if you will is horrific. So I keep track of those dependencies in a centralized way using graphs(via hash tables) and state machines but the graphs are spread across several modules. One for the cli and the other for the gui components. To make sure that I'm not duplicating calls into the business logic I only let the cli stuff call into the business rules. I'll give this design pattern some more thought to see if it will make my design simpler. If anyone is using dependency injection to manage their gui's, I would be interested in chatting with them. 
I have tried everything to install PyQt4 for compatibility reasons with python 2.7 and I just created a HelloWorld App. &gt;I run this program: import sys from PyQt4 import QtGui app = QtGui.QApplication(sys.argv) window = QtGui.Qwidget() window.show() &gt;from a youtube video and I get this error: Traceback (most recent call last): File "vpingUi.py", line 6, in &lt;module&gt; window = QtGui.Qwidget() AttributeError: 'module' object has no attribute 'Qwidget' &gt;Do you know why, because I dont feel like I have installed it correctly :(
&gt; wtf is this Django-livestore is a fork of the Satchmo project to develop ecommerce websites in Django. See: http://isotopesoftware.ca/wiki/LiveStore
Wait what functionality of strings did they remove in python 3?
After reading these comments I thought it was going to include things like the mathematical [material conditional](https://en.wikipedia.org/wiki/Material_conditional#Truth_table), something you're generally told to understand rather than memorize, but might be easier to just learn the table first. Someone making flashcards of these statements sounds like some sort of joke. Maybe he's just "trolling" again.
I bought Learn Python the Hard Way when I was first going to learn the language and wanted some kind of book, and I returned it to the bookstore later that same day and bought a different one. His method of "teaching" basically comes down to "google is and figure it out yourself". Like yeah I could do that but I bought a book for a reason, I want some physical thing to refer back to that explains everything I need to know in a clear and concise way. If I googled everything then I would get answers either from the docs (very useful, not necessarily beginner friendly) or from many different sources explaining things in different ways, some good, some bad. Also, this was when I was in California on vacation and we were spending a lot of time in the car, where I could just read the book and mess around with Python on my laptop, but not go on the internet. In his book he said to memorize Boolean and/or tables, like just use rote memorization to memorize "false and true = false". Like what????? I thought the point was that this was LOGIC, this is how we thing and make arguments. This is something that you should teach to intuitively make sense so that you never have to make a mistake with it. It's really not that hard. In fact, it's probably the number one thing in programming that you DON'T just have to memorize blindly. Learning something the hard way does not mean learning something well or effectively. I certainly will never be purchasing anything else he writes.
Hmm... the downvotes are pretty interesting for what I considered a pretty balanced reply that includes links to sources. But hey let's just erect a strawman of zed shaw kick it and set it on fire. 
I really recommend Python Crash Course by Eric Matthes. You can read my comment a bit below about my bad experience with Learn Python the Hard Way. Maybe it worked for others but especially for someone with a basic programming background who mainly needed to know syntax and logical differences between Python and Java, that book was absolutely useless. On the other hand, Python Crash Course goes over all the basics you would need to know even if you had never programmed before, and covers a great deal of the language with great detail all in the book. It has practice mini projects for you to be able to implement what you learned, and has two big projects it walks you through in the back of the book. Most importantly imo, you can actually use it as a resource and refer back to it if you forget some kind of syntax or keyword. It was like a really fun and useful textbook that explained everything extremely well, I highly recommend it.
I used LPTHW and thought it was actually quite a good tutorial, but not that great. If you want to try other resources, I personally found *Python Crash Course* by Matthes to be a much better choice. Edit: words
I owe Learn Python The Hard Way my career. Didn't go through all sections, but it definitely got me started with programming.
That, but with Rust. I now find places in my Python code where I really wish I had Rust's type system.
Truth tables are quite popular in academia from my impression. But they're used as a structured way to write down all possible results of an expression, not for memorization. I've fortunately never seen anyone recommend that until now.
Wanted to get into making games with python for ages... No excuse now! 
The two lines don't actually use the requests module, apart from importing it? Could be a one line, seems strange to write a whole article about using one dataframe method call. 
It's just a shitty excuse to charge money for something that's been free before.
How long did it take to get used to Rust? I've been thinking of trying my hand at it 
Not my joke, but relevant: "I wonder what will attain self-awareness first, Mathematica or Steven Wolfram?"
It takes a while, initially. It's easier if you're already familiar with low level programming, but still absolutely possible to learn even if you don't. Also, the new book is great.
This is who Zed Shaw is, he threw a tantrum in the Ruby community then defected to Python. Maybe if he gets pissed enough he'll move to Go or something. Nothing is ever his fault, it's always the community.
You can use PyQt with either [Qt Quick Controls](https://doc.qt.io/qt-5/qtquickcontrols2-material.html) or [QML Material](https://github.com/alejandro-pnz/qml-material).
I don't understand why in the article `foo: foo` (1.) is considered wrong?
and many did.
Have you tried running the script without tts to make sure the issue isn't caused by something else?
His book is still better overall. 
The community didn't write the book. Even the authors you discuss still use 'we', which does not include you. It means 'we the authors', and not 'you, the reader.'
There is value for programmers in conforming def SureYouCan(Do): Things = "your" Own = "way", But = "it" Makes = Things( 'harder' , 'for', 'everyone', 'else', ).to( 'read' ) So you end up with something you can read easy peasy, but is noisy for everyone else: You contribute vastly more to yourself than to everyone else
In the early days of Python 3 it was meaningfully slower than Python 2, and since it wasn't backwards compatible, it had almost no third party library support. As a result, for a long time people (quite reasonably) chose not to adopt it, which further slowed third party library support. It was pretty reasonable to have your doubts back then. At this point, only crazy people, and people with legacy systems they think are too costly to upgrade are avoiding Python 3. As for Zed, I think he falls into both categories. He's definitely a little crazy, and he had this book that was all about Python 2 and that was going to be a lot of work to update, so he's been trying to sell the idea that Python 3 still doesn't make sense. He published a long rant on the topic not that long ago, but most of his arguments were no longer valid, and some were outright lies. So you can pretty safely just ignore him.
it's a beginner level article
Or PyOtherSide
This sample code (yes, this is me) should work better: http://duganchen.ca/mvp-for-qt-pyqt-and-pyside/
It's probably a little confusing to the beginner that you talk about requests and import requests and then don't use requests.
how in the world did this get upvoted
u might not liked it but others did 
Or just copy the cells you want and pd.read_clipboard()
I think you forgot to capitalize the 'W' in QWidget.
&gt; You can call someone out for bad behavior without calling them names Although, to be fair, Zed ignores that too. Zed really only has one philosophy in life: *If you agree with him you're right, if you disagree with him you're a stupid arsehole.* While I agree that calling people names doesn't win you points sometimes people get frustrated when dealing with that kind of attitude. I think the sad part is that Zed is truly bright and has done some pretty impressive things over his time. It's just a pain when he has his feelings hurt and packs his bat and ball and flounces or even worse starts a shit fight. 
&gt; I think he genuinely felt that python2 was a better language than python3 I think he prefers Python 2. At least, I know I did when python 3 came out. It wasn't until I started using it all the time that my gripes with Python 3 faded away into nothingness. &gt; I think his arguments were rhetorical enough to mislead an uninformed reader It wasn't rhetorical. It was pretty explicit misleading. It's sad that he push his personal agenda and wrap it up with techno babble for people who aren't likely to understand why it was full of shit. 
&gt; what exactly is wrong with Python 3? Nothing. Zed is wrong. His reasons were largely rubbish. 
I built a few defs: *List snapshots *Take snapshots *Delete server *Restore server from snapshot Each night on a cron schedule I take snapshots of all my servers. The biggest server I stop key services, shut down, then delete the droplet to save money. In the morning I use the restore from snapshot def to fire it back up when I need it. Can probably save half of monthly cost to do it this way.
&gt; Python 2 and that was going to be a lot of work to update How much work would it be to update LPTHW to Python 3? I know when I first started teaching Python I liberally used his resources in class but with modified examples to convert to 3 (I didn't have a choice on version). It was pretty painless for me. 
I am a lucky man, I started with ansi C and x86 assembler. There is nothing more strange looking and illegible so whatever I write in another language is an improvement .
Seriously. &gt; 'Now using Python requests we will write a simple two line of code to get this data in pandas data frame:' Does not use requests What?
Yes that is the word I used to describe it. 
LPTHW is *painfully* slow. 10 out of 52 exercises (19% of the book!) are teaching `print`. Without any innovating. Most people would get bored after that. Better books for beginners? [Think Python](http://greenteapress.com/wp/think-python/). [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/). Both up-to-date, modern, and written by nice, friendly people.
You owe it to beginners to not confuse them by having a random import statement that you claim you use but you actually don't. &gt; 'Now using Python requests we will write a simple two line of code to get this data in pandas data frame:' What? You don't actually use requests.
19% of that book is `print()`. It’s boring to death. Up until now, woefully outdated (web.py! nosetests! distribute!) It makes students memorize truth-tables instead of understanding it. *All objective, constructive criticism.* There are LOTS of better books.
You have to call print as a function call. Other than that it's basically the same. They added different ways to handle string formatting. foo "Hello world" print "%s" % (foo) # python 2 string formatting. print("{}".format(foo)) #python 3.x (and import __future__ in 2.6) print(f"{foo}") # python 3.6 f-strings. While not as cool as print as a function python 3 strings also handle unicode straight out of the gate. Something that Zed didn't really accept as interesting but to international developers is a huge deal. edit: added uni code
Sure you could mandate a tool that puts a `pass` statement at the end of each block... Many people find being told "you must use this editor" just as offensive as "you must follow this weird style rule."
Indeed, untill you stumble upon Forth or some such (oh right, assembler, sorry)
I mean yeah, I know all of the new cool string formatting things they added, but I don't see how that would be something to criticize about python 3 lol
I'd like to also recommend Python Crash Course by Eric Matthes. It's the same price as LPTHW but it isn't just do as I say. It covers the theory of what you're learning too and helps you learn how to make the right decisions. 
His book focuses on knowledge skills through repetition. It's a good starting point but it doesn't teach Understanding or Synthesis skills. Python CC is a better resource because it teaches Knowledge and Understanding with some application of synthesis later. 
I do use two. What is your point? The problem is if I use two and someone else wants to use 4 and we need to share some code. Then we end up with something inconsistent or there are sombre nasty whitespace refactorings that could introduce mistakes. Mistakes that could be caught if in addition to the whitespace there was a non whitespace way to mark the end of a block. 
Before you can work with shellcode injection exploits, perhaps you should better understand escape sequences. 
Wow that's actually new to me, thanks.
It really isn't "a great book", a comprehensive list of complaints about it: https://sopython.com/wiki/LPTHW_Complaints
Is the escape sequence the only issue here? It seems like the escape sequence is only present in line 24 in the re.sub("\x",
I learned from his book and I couldn't care less about the drama, he's not my buddy and I don't have to interact with him. He works for a certain learning style (not all..fair enough) and that should be all that matters. For people who know nothing about coding he really starts from the beginning. I left at the chapters that had you building a game which I found uninteresting. You have enough basic knowledge to move on from there to other resources if you like.
This guy's account is complete bullshit. Look at his submissions. https://www.reddit.com/user/min2bro/submitted/ Same links spam posted all over the place. 
To be honest your whole workflow of IMPORTHTML into Google Sheets, publish Google Sheets as CSV, import requests, read csv into pandas could have been replaced with: import pandas as pd pd.read_html('https://en.wikipedia.org/wiki/Booker_Prize')[2] Pandas has a whole amazing array of io options and a blog post summarizing the best bits would be interesting but this blog post has too little information to stand alone (in my opinion). Best of luck.
PyQt without a doubt.
For your consideration, compare and contrast the following... \x \\x \\\x \\\\x 
I looked into this with my bank (USAA), and found official API access. It seems quite common, and catered towards business software like Quicken, etc. In short time, I had GnuCash wired up to pull data.
...amongst other things, see https://sopython.com/wiki/LPTHW_Complaints for a list of things that the book doesn't do so well, or is plain wrong about. Point 16 gets me every time
Just don't learn all the details from it, since there are plenty of mistakes which make for bad coding style later on. The Python community on SO put together [a list of complaints](https://sopython.com/wiki/LPTHW_Complaints) about the book a while ago, which would be good to review so you know what mistakes to look out for.
He uses requests, just doesn't put it in the example code. It's in the .jpg right below it though.
The book isn't "bad because of Zed", it's bad because it contains mistakes, some of them pretty grave. See this list of complaints about the book: https://sopython.com/wiki/LPTHW_Complaints
Sure, a Python book teaches Python. At least it can do that. But not much more (and it's not that "the book is bad because Zed is bad and has wrong opinions"), because it contains [a boatload of mistakes](https://sopython.com/wiki/LPTHW_Complaints) that definitely should not be propagated to new Python learners
It does teach understanding. Learning by doing. 
It's not because the author has a controversial opinion about the book that many people don't like it, it's because it contains several flat-out mistakes. See [this list](https://sopython.com/wiki/LPTHW_Complaints) of things that are wrong with LPTHW. So, listening to people complaining about LPTHW is actually not a bad idea, especially considering that there are plenty of other good Python tutorials and books for beginners out there. It doesn't have to be the one with these mistakes in it...
I'm not sure I follow. I know the \\x works an escape character but the others don't..? EDIT: Like the double blackslash allows for python to not interpret it as a special character
My problem with LPTHW isn't that the author has controversial opinions, it's that this book contains lots of mistakes that make it less worthwhile than other resources for beginning Python learners. I, for one, would not be willing to use LPTHW for [this comprehensive list](https://sopython.com/wiki/LPTHW_Complaints) of things that are wrong with it's content.
Last hint before I leave you to the tender mercies of the googles... What is this escape sequence: \\ 
The formatting thing was a different reason for him disliking Python3, but to answer /u/MegaAmoonguss's question: the introduction of bytestrings makes things a little more complicated in some situations, and he didn't like that.
Other books do this too, and they do it better. And they don't contain lots of mistakes that really shouldn't be taught to Python beginners: https://sopython.com/wiki/LPTHW_Complaints
Doesn't it invoke a single backslash? https://docs.python.org/2.0/ref/strings.html I'm looking here. 
This jpg? https://techpickup.files.wordpress.com/2017/07/screen-shot-2017-07-04-at-07-05-18.png
I would have agree with /u/K900_ having experienced Rust, there are times where I wish that I have the type safe, thread safe, and compiled experience found from rust. I still like python a lot, but rust is definitely a lot closer to how I think.
Lol he posted this in /r/python 4 days ago, the only comment asked him why requests was being imported and he hasn't even bothered to fix the blog post before reposting it.
It's funny because to me the thing I miss the most from Rust in Python is tagged enums and `match`. I'm currently rewriting an old and hacky Telegram bot, and the message handling just maps perfectly to `serde` and structs. 
I would highly recommend Automate the Boring Stuff with Python.
The Rust team definitely did a great job on their language. The way they implement enums and the availability of match (not to mention the speed of match) is impressive.
This is all the more reason why at least the concept needs to be explained to beginners, instead of just asking them to memorize tables. When things need to get just a bit more complex and aren’t included in the table, the newbie reading this won’t know how to scale it. 
`match` being fast isn't really surprising, to be honest. It's just a tagged enum variant, so matching comes down to checking the tag. 
His book is still the best. And those are not mistakes. 
https://Forum.Processing.org/two/discussion/23324/executing-python-3-code-from-within-processing 
&gt; and concentrate far more on skill acquisition through exercise sets. And is that really a good way for people to learn? It seems the opposite of the Head First books that emphasize visual stimulation, a conversational style, deep thinking, touching the emotions through fun ("We now know that your ability to remember something is largely dependent on its emotional content. You remember what you care about. You remember when you feel something."), etc. &gt;... a conversational and personalized style. In recent studies, students &gt;performed up to 40% better on post-learning tests if the content spoke &gt;directly to the reader, using a first-person, conversational style rather &gt;than taking a formal tone. Tell stories instead of lecturing. Use casual &gt;language. Don't take yourself too seriously. Which would you pay more &gt;attention to: a stimulating dinner party companion, or a lecture? http://headfirstlabs.com/readme.php As a way of illustration, you linked to a page from LPTHW about variables. When I was a kid a million years ago and BASIC was the learning language of the day, this is the page from the first book about BASIC programming I read that taught me what variables are.... http://imgur.com/nZSqnD0 To this day I've never confused a variable with a vegetable! Zed's way... I don't know....
Print is important
Others might like it so much that you have it posted on two separate domains so that you can spam post it all over reddit?
Or there's another module that let's you directly read/write google sheets using panda.
Assume your trying to establish the connection then drop it when complete. What operating system are you on? You're probably going to have to do a call using something like execute to make a call to run a application on your computer. But there are some other things your going to want to watch as you use the connection. For example if the connection goes down you won't know it and you will start using your normal internet. So you want to monitor the connection the entire time. With Linux you can just monitor the presence of the tun exists. Not sure what you would monitor with windows. 
This sounds like a homework question. Do you know what it's asking you to learn?
Most vpns are openvpn on based. So connecting/disconnecting is as simple as shelling out to start/stop the service (on Linux with systemd that's just systemctl start/stop openvpn) Is this for Windows... Because that would complicate things a lot. Also do you need port forwarding?
[removed]
This is awesome! Thank you for posting this.
I am trying to teach myself programming. Just started a few days ago, I read this was a good language to begin with but have no idea where to begin to download it. I am running off an old computer that my dad handed down to me from a few years ago just to start on. HP Windows 7 Home Premium. Went through and did a bunch of updates last night and cleaned some excess programs off of the computer but that took a couple hours so i did not really get a chance to look for a good download site. Any recommended? Any good places to look at Python for beginners? Any good places to look at programming and code basics in general? 
I like you. 
For a beginner, overwhelming or confusing them is the #1 problem, and anything that simplifies the process is a win. Saying "don't think about it, just follow this table" is one such simplification. You would eventually help them get a deeper understanding of course, but only later on when they are more comfortable with the concept of flow control. While we can theoretically debate the merits of this approach forever, in practice there are a lot of people for whom this approach is effective--just see the comments in this very thread from people who have read the book. 
Isn't QML Material for C++?
It's for Qt, which is a C++ library that can be used in Python via PyQt.
Hey, dusty from SWS here. I'm also interested in this! I'll split your cost if you find someone! 
It isn’t that important. And those exercises could be done in two or three.
Guys, dont make fuss out of small things, agreed a typo, will be corrected soon.
Wouldn't that make my app feel laggy?
No. Python itself is written in C. Is it "laggy"?
Seems legit
This is great news! Not because I think it's the right book, but because LPTHW is hugely influential on new learners, and the greater community has been hurt by Zed's previous refusal to upgrade. Now the noobs will get Python 3 from the start! Hopefully we're reaching a critical point with Python 3 in terms of number of users and library support that will finally phase out Python 2.
Sounds like a deal! 
You have a point, but I think logic specifically is a very bad example for this. It’s like trying to teach a child that 2 + 2 = 4 without going in even the most basic explanation of what those symbols represent. If you show them a chalkboard that says 2 + 2 = ? they would be able to tell you that 4 is the answer, but give them two dollars, then two more dollars, and ask them how many dollars they have, and they’ll give you a blank stare. In the case of logic, the underlying principle IS the whole point. I think Zed should give his readers the benefit of the doubt and at least explain and/not/or on a cursory level. He could then of course explain that things can get much more complex and it’s up to the reader to research further, but no matter how complex logic gets, the basics remain the same, just like mathematics. 
You are welcome. Unfortunately, this is the end since Tomas finished his enormous task successfully. But frankly speaking, there is a lots stuff which could take hours or days to study. Well, most of them are hard to understand, although Tomas did his best to explain things in a comprehensive manner. 
Unless i'm reading the code wrong (which is very possible) but wouldn't the pathtoCsv line be the one invoking requests?
He is writing about swift when he writes that. In swift it seems you use `:` not `=` in the function argument area to denote kwargs. So in Python what he was saying is wrong is: ``` def f(b=b): pass ``` At least... I think. He didn't do a good job explaining much IMO. Also imo you should be doing this instead: ``` def f(b=None): pass ``` 
These are really sweet books, thanks! 
The first rule of committing crimes is to not talk about it on the internet. I remember when I… Wait. Nice try, almost got me. 
The book is ok, but the author has a particular condition where he periodically becomes an angry crackpot and writes things he regrets when he returns to sanity. If the style of the book suits you, it will help you to learn. There is really nothing wrong with the book itself.
He threw a tantrum at San Francisco and moved to Miami... To paint beach landscapes or something. 
Dave is absolutely the best. His entire YouTube channel is worth perusing. 
The VPN provider isn't really what's doing the connecting/disconnecting, it's your local computer. If you're on desktop Linux, you might use for example [Python-NetworkManager](https://pythonhosted.org/python-networkmanager/) to communicate with Network Manager. Failing that, you can always just call a shell command. If you're on Mac, it's going to be totally different. Windows totally different. Linux server, totally different. With Android, I imagine you use a Java API. It's not a matter of the provider, it's what your client does.
&gt; And is that really a good way for people to learn? Maybe. The nice thing about exercises is that they actually get you at a keyboard thinking and typing and doing. I think your own real-world project might be a better approach. (The Moore Method)[https://en.wikipedia.org/wiki/Moore_method] for teaching mathematics kind of captures this idea. In my head it's not really about formality or interestingness, it's about self direction when learning, and strangely an exercise set can be a very self-directed experience, whereas a friendly well-written text can be kind of claustrophobic. Of course it very much depends how difficult the exercises are. 
**Moore method** The Moore method is a deductive manner of instruction used in advanced mathematics courses. It is named after Robert Lee Moore, a famous topologist who first used a stronger version of the method at the University of Pennsylvania when he began teaching there in 1911. The way the course is conducted varies from instructor to instructor, but the content of the course is usually presented in whole or in part by the students themselves. Instead of using a textbook, the students are given a list of definitions and theorems which they are to prove and present in class, leading them through the subject material. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
I don't. But you might take a look at these: http://urwid.org/ http://www.npcole.com/npyscreen/ 
[polymer paper](https://www.webcomponents.org/collection/PolymerElements/paper-elements) is based on web components and is framework agnostic. its all html5 and css3 standard, the widgets you make simply become new &lt;elements&gt;&lt;/elements&gt;. I think it follows the Angular Material design philosophy.
Thanks for the help. I could run this on a Linux machine, but would prefer to keep it on a Mac if possible due to resources. 
&gt;'So you can't write a perfect 2to3 translator then? Really, well I guess your language isn't turing complete then!' Turing Completeness is about what is computable. You can't just say that it not being able to do something makes it not TC; you have to prove that that thing is computable in the first place. For example, there is a class of computable numbers, but not all real numbers are computable. What Shaw said was like saying "You can't compute 0.1, so this language is not Turing Complete." Not only is 0.1 not a computable number, that's going from one specific example to a general statement. That's not a proof. A charitable interpretation of that section would be "He was just wrong, *but he was not intentionally trying to mislead people who didn't know any better*". But Shaw disproved that himself by explaining his statements as "trolling" after the fact. There are ambiguity points that make a perfect automatic 2to3 impossible. That means a translation of a big application will need a manual hand and take time, if such a translation is required. No translation would be required on future projects if future projects default to using the version of the language that's going to be supported in the future. We shouldn't still be fighting about this 10 years on.
Not sure if troll or not...