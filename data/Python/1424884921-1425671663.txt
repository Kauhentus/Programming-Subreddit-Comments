So glad I'm my own sys admin now :-)
Proper unicode integration is reason enough.
Is MATLAB giving them problems?
The stats module has been there since earlier in 3.4, I think. I have been using it long before now.
Really? I think its lack of knowledge or competence rather than some other reason. Any competent IT shop will have their own internal mirror of RPMS [see below] or builds their own RPMS. What is stopping you from enabling or mirroring the IUS repo and install python3 and python2.7[if $osversion&lt;7] in parallel with the system repo? http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ and its as simple as yum install python34 or python27. I mention the IUS repo because its maintained by RackSpace so in theory should be a reputable source. Also the IUS repo does not overwrite system binaries. Granted sometimes their packages are backwards by a minor release and right now they have 3.4.2 , it will take a month or more before 3.4.3 is packaged. 
build your own and virtual environment it!
Ha. What I said is that RHEL shouldn't be used. Not that it can't. 
Its actually quite common in the UK. I got a one week work experience in finance. Its basically a job that's maintenance to take menial work off of real staff. 
You will note, that my original statement was that it **shouldn't** be used. Basically, the reason behind that is if you need a workaround just to make the operating system use the version of a language you want, you're likely to run into many more problems down the line. Most of the reason that somebody would use RHEL over another distro is to get the licensed support of RedHat when issues arise. RedHat isn't likely to want to provide that support if you are using workarounds to use different version of their products. It's definitely true that Python 3.4 can be installed, I never said it couldn't. I suggested that if you are going to use Python, it would be prudent to consider a distribution of Linux that provides packages of later versions in their own repos without having to look for workarounds. Calling an IT team incompetent because they don't want to workaround known issues of an OS all the time to suit your needs as a developer is the same as an IT guy calling a developer incompetent because there are bugs in their code. They are both a fact of life. I would actually trust a conservative IT guy that wasn't willing to do workarounds as long term solutions on production systems than an IT guy that uses workarounds to run code on systems that aren't designed to support it well. 
This is why i'm asking. I done some work with pandas but I have no idea how would it scale. I know for example that when I tried using R on large data sets it quickly choked. Python does no have a reputation as the fastest language so I was wondering if it would be a good choice for proccessing large amount of data. While pandas might be a good chooice for the actual processing ETL is sometime a bit more - monitoring, parallel execution / chaining, Managing data soruces etc ... No reason the invent the wheel these are common tasks.
Usually, as soon as SQL is involved, Python is fast enough. It is important however to have text-based parsers that do the heavy lifting in C as a pure python parser tends to be slow. Also, make sure that character encoding/decoding is done right (meaning everything from input file is preserved in the DB, however you achieve that.)
&gt; Could you indicate some of the advantages and disadvantages for me? Advantages: unicode is much easier, future-proofing Disadvantages: unicode is still hard and you're forced to get it right even if you don't care. Python 2.7 is drastically more popular (30% of code is Python 3.x). All the other differences are kind of irrelevant.
That's an internship, work experience is different. I worked with Serco and did some serious work, but it was not anything to complex, however it was still important work (installing cables in a new location). At least in the UK I think internships are called apprenticeships.
For someone that knows nothing about the code language you used can you explain how I use this? Do I open it in my web browser? Super excited thanks!
In short: logging_tree lets you examine Python's logging configuration at runtime, so you can see *exactly* what kind of logging is or is not happening in the libraries you're using. Since libraries can easily set their own loggers, it's possible that they'll mangle or silence logs that are useful to you, and you may not even know about it. In our case, kombu (a dependency of celery) was completely silencing a number of critical logs. Took us ages to figure that out, until we found logging_tree. It's definitely going to be a tool we keep around.
what?
\**waves while looking through binoculars from embedded Python 2.6.5 land**
"What" ain't no shell I've ever heard of.
There are quite a few sorted datasets floating around already. My personal favorite is sortedcontainers (linked above, but here it is again https://pypi.python.org/pypi/sortedcontainers) 
This is a noob question, but how do I update Python on Windows? Do I have to install it as a separate version, or can I update an existing 3.4.1 installation without messing up installed packages?
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Yes it is. Python 3 is incompatible with Python 2 for a reason. As long as people continue teaching Python 2 it will only slow down an adoption that has already taken a decade. Everyone needs to grow up and move to Python3 already. Its just a better language. 
I wish I could go. I don't know why I waited SO LONG to register. i got a plane ticket, got a hotel, and then saw registration was closed. I am hoping the registration folk can make room for poor ol me otherwise I am out quite a bit of money :(
If you download the installer, it will find the previously installed version via the registry and upgrade it. Patch releases always do this, so any installed packages you installed for python 3.4 will still be there. Only time it creates a new folder is for 'major' releases, like 3.3, 3.4, etc
Looks very similar to this post..... http://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/
I personally prefer using Python because I like the exception system, but I consider PERL to be far quicker to get up-and-running. Rare is the time I use Python to work on filesystems and not need to make several imports from * shutil * os * os.path PERL's history makes a big difference here, as it is in many respects a shell-derivitive so all of this functionality occupies what would be __builtins__ in python
Thank you!
Yes, because Python 3 is much more fun to write, has far fewer "oddities", has even better batteries included (pathlib and enums!), and is going to be the future (indeed, is currently the present, just about). You also don't have anything holding you back. No, because switching a current and important codebase will be costly, or will involve working around a module that hasn't switched and isn't worth it. Pick your option. Both are valid, but unless your job is in Python, the former is most likely the more accurate one for you.
Thanks for the feedback, I'll take this into consideration and act soon. 
Ahh, yeah, I had local functions in mind. Thanks for reminding me about their name. But from Matlab, it's super easy to add a new function. It's almost as trivial as doing it in python, though obviously in python it's way more straightforward. 
RHEL7/CentOS 7 officially lets you install newer Pythons, etc. in parallel through [Software Collections](https://www.softwarecollections.org/en/).
A lot less work: http://falcao.it/HTTPretty/
Yeah but the way /u/ajclarke worded his question suggested that wasn't the case.
That's cool. I've never used RHEL7 before. Most of my work had been done in RHEL5 a while ago and I new that many of the same limitations existed in 6 from some work I had done with it last year. Though, I'm still seeing only up to 3.3 on the list of support they have.
oh cute.
Thanks for your insight guys. I use a lot of astronomical packages which may not have been ported over. I'll have to have an in depth look tomorrow. As suggested I think I'll try both side by side for a whole. 
It's a command line program, so you run it from the terminal. Install Python 3, install the one library dependancy using pip pip3 install Pillow Create a text file with the cards you want to proxy (check gihub page for syntax). Download the program from github, navigate to the MgProxy folder in your terminal. Run python3 MgProxy &lt;path to your card input folder&gt;
This was the exact question I was looking for the solution to. I use FPM to build my packages and for upstart/systemd, I don't need to worry about permissions for data_files, but for systemv inits I do. See: https://github.com/BigSense/LtSense/blob/master/setup.py EDIT: posted on stackoverflow http://stackoverflow.com/questions/28732515/set-permissions-on-data-files-in-setup-py
This release looks to be pretty awesome, there has been some good discussion about it on HackerNews and specifically why Django is so much better than any other Python web framework out there. 
Classes = python classes ..... multithreading = multiple files And I would assume it wouldnt help all that much, it's just a bunch of python classes in a file and when I import the main file into that file, the screen is black/won't load. If you want a little code, I guess just import pygame from main import * CLASSES (Ex. class Player:) Then main file import *Imports* from classes import * GAME V
Perhaps more detail about `pip install flask` not working would help us help you.
Honestly with a title such as, "Proving that Android’s, Java’s and Python’s sorting algorithm is broken (and showing how to fix it)", implied to me that some phd student was trying to validate their life by making a grandiose claim to turn a small problem into a big one. 
You've got yourself a good old-fashioned circular module dependency! These are bad (as I'm sure that you've figured out by now.) Here are some tips on how to re-architect your code, and how to write code in the future that doesn't have this problem. 1. Remember that, if a module is not loaded (if a module is in sys.modules, it's loaded), ALL of the code in that module is executed at the precise time (read: precise line) that it is imported. There are no declarations in Python. Everything happens in the order it appears in the source file. The following does not declare a function: def do_foo(): pass It creates a function and assigns it to the variable 'do_foo'. It does this at the exact time that those lines of code are evaluated. (Technically, it does this at the exact time that the bytecode compiled from those lines of code are executed, but those are pedantic details that don't mean anything for solving your problem.) If you did this: print("Before") def thing(): pass print("After") "Before" is printed before the function is actually created, and "After" is printed after that function is created. __This is really important__! So when you do this: foo.py: import bar print("bar loaded") bar.py: import foo print("foo loaded") And then you run "python foo.py", the exact sequence of things that takes place follows: 1. The 'foo' module is created as '\_\_main\_\_'. 2. The 'bar' module is imported, created as 'bar' 3. The 'foo' module is imported, created as 'foo'. 4. The 'bar' module is already loaded, so the statement "bar loaded" is printed in the 'foo' module. 5. The statement "foo loaded" is printed in the 'bar' module. 6. The statement "bar loaded" is printed in the '\_\_main\_\_' module. This is a recipe for disaster if you actually need the contents of the other modules (which hasn't yet been created) during loading. 2. Your classes need to 'stand alone' more. Put them in their own files. You can create a directory in your project named "Classes", and put a file named "\_\_init\_\_.py" inside that directory that loads all of your individual class modules. That way, your main module can still call "from Classes import *" 3. Your classes need to be *even more* standalone. Instead of grabbing content from the Main module, they should take that content as an argument to their respective constructors, when they are used. That way, they don't even need to know that the Main module exists. EDIT: Reddit formatting is like minesweeper.
At my work we use SQL server to do the ETL process and any framework or scripted processing leverages SQLAlchemy (we interface with a postgres DB as well) and pandas for most of the work. If we have something that is stats heavy we use rpy2 and run native R scripts as needed. Pretty much a complete package for our needs.
Here I was thinking IT were SUPPORT SERVICES here to SUPPORT STAFF
Try python -m pip install flask This works if Python is in PATH but pip isn't.
That's one of the potential problems with Ruby open classes, where a class can be re-defined elsewhere with extra behaviour, when you import some other the behaviour of a known module is changed. I feel your pain because logger follow a similar "open" approach and kombu also changed the logging configuration in our codebase. =O
I've been happily using [responses](https://pypi.python.org/pypi/responses/0.3.0)
Not the places I've worked. We tend to actually get involved in any problems that happen, so it's not prudent to not care.
I actually believe his dfs implementation is broken (due to sets being unordered)
Consider yourself lucky, I just moved to a team beginning a 2.4 to 2.7 upgrade. They say if we're good, we can get our postgres updated from 8.2 too!
...and you're not a good enough detective to find blackmail on the sysadmin or good enough a hacker to plant some.
&gt;...most IT teams don't like doing that for maintenance reasons so they limit you to &gt;whatever are in the available repos. I've always found it puzzling the places where IT controls the tools rather than the users telling IT what they need to support. it seems to have changed right after I was no longer working in IT unfortunately. :-( 
Or you could use Bond and call the old library from Python 3! http://www.thregr.org/~wavexx/software/python-bond/
What you are doing is saying that it should be OPs who has the easier jobs rather than Dev, support roles should always focus on supporting staff rather than hindering them.
 class Factory: def create(self): return GoodExamList() ah so this does `GoodExamList()` why bother wrapping this in a factory. def __init__(self): ExamList.__init__(self) Ah so this does exactly what not defining it would do. def initialize(self, params): self.params = params self.search_path = params['search_path'] self._get_exam_names() self._get_good_exams(params['csv_path']) self.initialized = True why not put this in the `__init__`? Why not use specified args? We can get rid of `initialized` if we make sure that instances are always initialized. `ExamFactory.create_Exam` doesn't look like it exists. Why not just have class ExamListException(Exception): pass Why are we using eval? The class can be hashed. Why are we storing the factory methods? Why are we passing the name of the class in an evaling it instead of just instantiating it? Why are we using a factory storage?
So you're saying that IT should just maintain whatever crap Dev throws at them? Why would you push RHEL when you could go for Debian and not have the same issues? If it's a hassle to maintain because of limitations on the OS level, there is probably a better tool out there. 
/r/learnpython please in the future. You'll be downvoted here.
Slightly related: If you haven't heard of [q](https://pypi.python.org/pypi/q), go check it out this instant. It's an amazing tool in those cases where you *really just want the damn thing to print* but something is catching stdout and redirecting it to an smtp server which sends it to devnull@localhost or some shit like that. An awesome evolution of print-based debugging. https://pypi.python.org/pypi/q
I am taking a course on coursers and they are teaching python 2.x . Why are schools so far behind?
Just the wrong sub. I answered *and* downvoted.
I took two Coursera Python courses, probably the one you're taking right now. Don't worry about it too much, you're just learning the basics right now, which will transfer to 3 very easily. 
Are you using any special technic for handling this much data with python or just a ridiculously powerful hardware ? When I was using Informatica we he had a descent hardware but most of the time we tried to utilize the DB resources as much as we could. Most common scenario was using analytic functions (ranking, numbering, running avg, sums etc ...) and sorting - DB just does it better. We always got better perf after offloading the heavy lifting to the database. 
In the past I tried to use pyglet to visualize network stress and SI tests in realtime... never got it to work, I ended up using gnuplot and LaTeX to make flipbook pdfs instead.
Wrote a MITM proxy using asyncio. Smaller, rather performant, Probably could get more by abandoning that approach for a more verbose one, but proxies aren't what I'm employed to do. They're just part of the product.
* Slash their budget. * Allow them to personally spend any overall savings due to Matlab license reductions.
The splitting of initialize and __init__ was on purpose, I don't remember why, but the author was aware of what they were doing.
Between the torrential rain and the sweltering heat, not much left out of air conditioning lasts long.
It is not so much this actual bug that ids the message. The message is one that those, like me, who are in the chip design business have had to learn and that is that **"Formal methods can find errors in programs and give examples of how that bug can be exercised"** If some vendor were to allow open-source organizations like Python access to their formal checking tools then maybe we should take them up on it and formally check sections of the code to make sure it does what it should. Within limits you can ask questions like "does this output always give the right value?" and have the formal tool prove it for all input conditions or give a counter example where it doesn't hold. I've simplified things greatly as you need to constrain your inputs and restrict your search space which determines if it will work for you, but it is another useful tool for the bug-hunter. 
How would you do it with pen and paper? Discover your algorithm then try to code it. Post in /r/learnpython Generate all possibilities then make it a set, or use a set to test if something is a duplicate. Look up python set()
You can already compare Numba against Julia (and FORTRAN), if your goal is to write numerical routines in Python without having to get into writing Cython/C++. And you don't need PyPy-friendly Matplotlib: for a basic amount of plotting needs, Bokeh actually works on Pypy since it doesn't have strict dependencies on Numpy and/or Pandas. It doesn't (yet) programmatically generate static images, but instead outputs interactive web graphics.
Julia is still very immature and young as a language. Additionally, the jury is still out on its performance advantages compared to offerings in the Python space, like Numba and Cython. Jake VDP's latest blog post puts Python+Numba within spitting distance of FORTRAN, for example: https://jakevdp.github.io/blog/2015/02/24/optimizing-python-with-numpy-and-numba/ Comparing against "pure python" is disingenuous because my lazy cat is faster than pure python for numerics like this. If the goal is to write un-annotated Python code and have it run as fast as C/C++/FORTRAN, then Numba is your ticket.
If __init__() and initialize() were combined, you would have to pass initialize()'s param argument to ExamListFactory.create_ExamList() which in turn would have to call the Factory.create() method with the param argument. This would require every ExamList subclass to have the same __init__() signature. This way, all the subclass and class __init__ signatures are identical, but the initialize() method signatures could be different. Splitting these functions supports something like a forward declaration, where you create the instance before you have the info needed to fully initialize it. This is the case when you are unmarshalling class instances, perhaps reading pickled data, or otherwise persisted data. I can see using this to upgrade old persisted versions of a class to a newer version. If, for instance, the csv header was different from the current csv header expected by the code, call an upgrade() method to convert previous file contents to the current format. Your snippet of code looks more complex than it needs to be on its own, but in the context of the rest of the program, this would probably make more sense. A bit of inline documentation would help a lot. Personally, I hate having to find external documents for APIs and design details, when a few lines of comments in the code would suffice.
Or you could use my [httmock](https://github.com/patrys/httmock)
itertools.permutation
The default [disable_existing_loggers](https://docs.python.org/2/library/logging.config.html#logging.config.fileConfig) logic in logging.fileConfig is **evil**. 
The company I'm working for still uses MySQL and Django 1.5. At least they started with Python 2.7. 
Ugh, don't get me started on Python in the scientific community. *Everything* is so outdated.
&gt; where we calculated So, explain the steps of the calculation, then translate them to code. If you can't do that, then you need to be more specific about what's preventing you. *But not here*. Like the sticky and sidebar both tell you, this goes in /r/learnpython.
I think they are really `μfunc`s, as in *micro*funcs. If I understand this correctly, ufuncs can be applied to arrays in a vectorized fashion, i.e. without the performance penalty of explicitly iterating over each array entry.
ah okay, that sort of makes sense. thanks!
He's dead Jim
Oh, it already provides [explanation about that][1]: &gt; Comparison to stdeb &gt; ------------------- &gt; &gt; The current version of `py2deb` is based on [`pip-accel`][pip-accel] and [`deb-pkg-tools`][deb-pkg-tools] but &gt; early versions of `py2deb` were based on [`stdeb`][stdeb]. The `stdeb` and `py2deb` projects are both Python to Debian package converters, but there are some notable differences: &gt; &gt; - `py2deb` recursively converts all dependencies while `stdeb` requires custom &gt; scripting to accomplish the same thing. Because `py2deb` is based on &gt; `pip-accel` it is equally resilient against intermittent network errors and &gt; it shares the same download and compiled package caches. &gt; &gt; - `py2deb` can build packages with a custom installation prefix (in fact this &gt; is kind of its specialty) while `stdeb` doesn't have this concept. &gt; &gt; - `py2deb` is compatible with Python 3.4 while `stdeb` doesn't support Python &gt; 3.x (although support for Python 3.x will likely be added to `stdeb` at some &gt; point). &gt; &gt; - `stdeb` integrates tightly with the Debian packaging ecosystem, for example &gt; Python modules are installed in the [`pyshared`][pyshared] directory so that multiple &gt; Python versions can use the modules. The advantages of this are clear, but &gt; the main disadvantage is that `stdeb` is sensitive to changes in Debian &gt; packaging infrastructure. For example it doesn't run on older versions of &gt; Ubuntu Linux (at one point this was a requirement for me). `py2deb` on the &gt; other hand is kind of dumb but works almost everywhere. [pip-accel]: https://github.com/paylogic/pip-accel [deb-pkg-tools]: https://pypi.python.org/pypi/deb-pkg-tools [stdeb]: https://github.com/astraw/stdeb [pyshared]: https://www.debian.org/doc/packaging-manuals/python-policy/ch-python.html#s-paths [1]: https://github.com/paylogic/py2deb#comparison-to-stdeb
Combined with the *we'd rather have the developers develop new features clients would actually like vs. rewriting things to do exactly what they did before*
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 21. [**Generation in lexicographic order**](https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order) of article [**Permutation**](https://en.wikipedia.org/wiki/Permutation): [](#sfw) --- &gt;There are many ways to systematically generate all permutations of a given sequence. One classical algorithm, which is both simple and flexible, is based on finding the next permutation in [lexicographic ordering](https://en.wikipedia.org/wiki/Lexicographic_ordering), if it exists. It can handle repeated values, for which case it generates the distinct multiset permutations each once. Even for ordinary permutations it is significantly more efficient than generating values for the Lehmer code in lexicographic order (possibly using the [factorial number system](https://en.wikipedia.org/wiki/Factorial_number_system)) and converting those to permutations. To use it, one starts by sorting the sequence in (weakly) [increasing](https://en.wikipedia.org/wiki/Increasing) order (which gives its lexicographically minimal permutation), and then repeats advancing to the next permutation as long as one is found. The method goes back to [Narayana Pandita](https://en.wikipedia.org/wiki/Narayana_Pandit) in 14th century India, and has been frequently rediscovered ever since. &gt; --- ^Interesting: [^Permutation ^matrix](https://en.wikipedia.org/wiki/Permutation_matrix) ^| [^List ^of ^permutation ^topics](https://en.wikipedia.org/wiki/List_of_permutation_topics) ^| [^Generalized ^permutation ^matrix](https://en.wikipedia.org/wiki/Generalized_permutation_matrix) ^| [^Cyclic ^permutation](https://en.wikipedia.org/wiki/Cyclic_permutation) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+coxobmy) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+coxobmy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; py2deb recursively converts all dependencies... This seems un-debian like!? 
according to the **stickied post** at the top of this sub..... this post is better suited for /r/learnpython http://www.reddit.com/r/Python/comments/2voohz/homework_learning_and_posts_on_rpython/
I would aswell but this is my actual controlled assessment :)
Because it's what they're used to, and they can't be bothered getting with the times. Story of university professors all over.
Just stumbled upon this yesterday: http://blog.gmludo.eu/2015/02/macro-benchmark-with-django-flask-and-asyncio.html
This is a great answer. OP take note.
Noob here. But i think a reason people still use 2.7 is because some implementations (like Pygame for example) work best with the more stable versions of python
I'm not saying that's wrong. I'm having trouble coming up with a good enough business case for one distro over another. Dev would say they need python 3.4. OPs would say, this is how you get that. 
Generally while most devs aren't paid as much as those in finance you are still earning a lot more, so the pay is hardly shit. As for being sad because I am not always using my language of choice, that is some pretty diva-ish behaviour.
I'm looking at much the same thing - I need to extract text from some results pages that are only (easily) available to me in PDF format. My problem is that while PDFminer seems to be the recommended solution, it does not support Python 3... still? In 2015? Really?!?
Yes. I posted this one just a minute before your reply. What were the chances you'd come across both ? Man you know your way around :D
&gt; Consider yourself lucky, I just moved to a team beginning a 2.4 to 2.7 upgrade. Consider yourself lucky, I've recently investigated COBOL code written in 1984, maintained to this day, with no plan or need to replace it in the foreseeable future.
If you optimised your personal space with the same care that you optimised your code, wouldn't you come to the same conclusions that I did? Wouldn't retiring in your 30s or 40s be nice? You could still continue to program after that if you enjoyed it. Do what you love, or do something that lets you retire early. Don't get stuck in rat race until you're 60.
Or... you could learn Debian packaging standards.
anyone run these packages through lintian?
&gt; it does not support Python 3... still? In 2015? Really?!? Fork it, help with the migration and propose a merge. Great attitude with using a tool for free and complaining about it.
Because sqlalchemy is soooo much better, right? Don't get me wrong, sqlalchemy is great, but it's an entire new world to learn. Hard even if you are familiar with SQL itself. The django orm is easy to pick up, easy to understand and featureful enough to carry the 95% of everyday needs. A lot of people (I'm not saying everyone) like to pretend they prefer SQLAlchemy because it does things "right", but I've seen how those same people develop and they don't know the damn tool, they just google everything they ever do with it. Those that truly grasp how it works are much rarer. Compare this to giving everyone enterprise-grade construction equipment to do small DIY stuff in their own home. It's stupidly expensive, harder to handle, they're more likely to make mistakes and they won't truly appreciate the qualities. The Django ORM is great. If it consistently sucks for you, you are likely to be building something that Django simply doesn't cater to and you should admit that and use the right tool. In a previous project, I hit that and I made the mistake of sticking with Django because I liked the tool rather than listen to what my code was telling me and review my options. Wasted a lot of time due to that.
Hi everyone, I'm the maintainer of py2deb. Yesterday I decided to publish py2deb for the world to see despite the fact that the readme and API documentation should be further improved - I've waited long enough already and if I was going to wait any longer it was just not going to happen. The feedback in this Reddit thread is showing that I'll need to extend the readme to clarify my intended use cases for and design choices made in py2deb, so thanks for that :-). In reaction to some of the comments here I'll try to clarify for which use cases py2deb was built and which design choices were made in that process. I'll take these comments and integrate them into the readme soon.
For me the recursive dependency conversion is a notable feature, because I can take a Python project from PyPI, run it through py2deb and deploy/install the resulting packages - I don't have to think (too much) about the dependencies because they'll be included. Please note though that I didn't intend for py2deb to be used to generate Debian packages that are of the quality that the Debian community likes to see for packages in official repositories; it is meant for packages from PyPI that haven't been packaged in the official repositories (yet). If official Debian packages already exist for your dependencies then by all means don't use py2deb (there's no point). Also, if you only need a few packages and you know Debian packaging, then by all means do it properly and don't bother with py2deb. I created py2deb to package large-ish dependency trees where most of the packages are not available in official repositories.
I'll include a comparison to fpm in the readme soon, in the mean time I've started working on a comparison here: https://github.com/paylogic/py2deb/issues/1
reportlab plus supports reading pdfs: http://www.reportlab.com/documentation/faq/#2.1.5
Ok, thanks for the clarification.
there's a fork called pdfminer3k that works well with python 3 https://pypi.python.org/pypi/pdfminer3k/1.3.0 
As I stated in another comment, why not just use checkinstall? It's available on Debian, and it will work for ANY installation script.
Haha, wow. Whevever we feel bad, we would just say "well, we could be updating from cobol!". Now I realise how insensitive those words were, I'm sorry.
Very nice! Looking forward to it
Sweet examples. It's the small stuff that add up to make a language 
Don't worry, I didn't take them as insensitive, it was just an occasion for me to relate an interesting anecdote, and to add a bit of perspective. I was quite astonished to see the "October, 1984" date at the top of the file when I opened it (and thankfully, I don't maintain it, and I don't write COBOL).
What were the comprehensions that we're not accepted?
I would question if we're working at the same company except we're at least on postgres 9.0 (and soon upgrading)!
Doing that fails when **override is a dict with non-string keys; it's a hack and not a general solution. [Here's Guido's thoughts about it](https://mail.python.org/pipermail/python-dev/2010-April/099459.html).
I agree, complaining this way doesn't help. In fact it hurts. I know, I maintain a number of Python packages that work across versions of Python. Some of them are easy, but anything that touches on low-level unicode work (like Werkzueg and pdfminer) is much harder. Doing an open source search against 'memilanuk' does not present the image of someone who contributes at all to open source efforts. I hope they change that and gives back to the projects that keep us all employed.
Yep!
I'm so sorry! D: I wanted to know how exactly to set it up *and* how to use it. If that wouldn't be too much trouble. I have Python installed but that is as far as I could get for this. *Edit: I'm on Windows.
Ah, interesting - will wean myself away from that then.
Had to code a hardware interface in C# last week. Now I'm getting my `{` `#` `;` and `//` crossed. :-/
Ok, sure, but fpm supports more inputs, more outputs, and already has an existing community and tons of bugfixes. Why should I use this instead?
I don't know, not subbed to it. A colleague just sent me this picture, I found it hilarious and wanted to share. If it's old and/or repost, I'm sincerely sorry. 
It's written in Java 
This could be the beginning of a beautiful friendship.
So turns out using this with non-string keys works fine on Python 2, but breaks on Python 3. Another reason not to use it, if you care about compatibility. 
Basically, I would like to save e.g. "01001101" as one byte, in a file. (Without it having to be an ascii character)
If i save "01001101", will it be 1 byte or 8 byte size?
ASCII is just a way of interpreting binary. The same bunch of binary digits can also be an unsigned integer, a signed integer, a floating point number, a processor instruction. Binary by itself is not a special file format or anything. 
You can download virtualbox and install for example Ubuntu to help you with that.. Maybe you can manage to use it on windows but figuring it out may be quite a hassle. Otherwise it may take some googling but the intructions seem quite clear.. just run install.sh , edit shreddit.cfg.example and run it as in the last point of instructions.
I understand that :) , the problem is that when I save "01001101" in a .bin file, it still results in it being 8 bytes.
https://docs.python.org/2/library/binascii.html
Thanks for this, it does look much better than stdeb (which kind of works with python3 now, but it's still a hassle). Going to try it later. The dependency handling is really interesting, as it is one of my issues with stdeb; can we specify matching debian package for a dependency manually, in order to avoid py2deb packaging stuff that is already in the debian archive? Out of curiosity, how do you handle the PEP-440 version numbers that are rejected by debian tools?
Yes, and you can mix them in any order (with later keys overriding earlier keys)
I have no idea what is wrong with tailoring your skill set to what is currently in demand, I've done pretty well out of it so far.
Great, and thanks. I just installed 3.5.0a1 but it doesn't seem to be implemented in that version.
[Seems to be a similar question](http://stackoverflow.com/questions/9632995/is-there-a-python-library-that-allows-to-easily-print-ascii-art-text)
Hi manatlan and thanks for the feedback (although not the kind I was expecting :-). Sorry I didn't realize this before publishing the project, this was not my intention :-(. Do you want me to change the name?
The sh just grabs the Python requirements in requirements.txt and creates the cfg if it wasn't alrdy there. Think he could just run the .py directly if he has the reqs and edits cfg
Did you edit the cfg? It's plain text, open it in notepad or your preferred text editor that isn't MSword. Then you need to inatall PRAW. Then double click the .py 
I didnt look into it much.. Just saying that on linux it's only matter of following instructions and on windows it may not work depending of what is happening inside..
I hope you listen to period-appropriate music while working with that code, like "Break My Stride" and "Oh Sherrie."
I'll second that there aren't any good options. Everything does, if you're lucky, at least part of what you want. There a no complete solutions. I was looking for a way to fill out form fields via FDF or XFDF. Unfortunately, the "solution" seemed to be pipe the data to pdftk, which was crashing on my source PDF. I ended up writing a routine with PDFBox, creating a jar, and piping the data to that with `subprocess.Popen`.
Yeah lol. Thats what this account is for. :P I actually want to edit all previous comments with ## so it shows nothing. Not actually delete them. For those who dont know: typing just ## in the comment box and posting will post nothing - try it out!
The git repo is pretty active still. I don't know why they haven't made a new release, but I wouldn't read much into the version number. Not every project &lt; "1.0" is beta.
Try using pdb to debug your program. It's included in every Python version from recent times. Look here for a starter: http://stackoverflow.com/questions/4228637/getting-started-with-the-python-debugger-pdb You can use to put a breakpoint in your script, and then inspect the variables and step through the program one line at a time to see where it gets stuck or is having problems
Oh wow, this is a lot better than my hacky implementation. I was planning on securing it using the corporate LDAP directory, looks like flask supports this externally so this should work for me, thanks!
That' exactly what I am telling you to do, but you're limiting its scope to programming. I am not sure why. I am saying don't feel that you have to learn lang X to get 20% salary regardless of whether you like it or not. I'm saying either get a job with a lang you love, or get a job that lets you retire before 40. Don't compromise and get stuck.
I'd seen that out there... wasn't sure if it was still viable or not. Historically projects like that which haven't seen any updates in several years (2012) while their upstream version has been active... gives me cause for concern. If it works, though, that might be the only game in town for py3.
Anybody had any success with [PyPDF2](https://github.com/mstamy2/PyPDF2/)?
I have a cheap dell poweredge r710 I picked up about a year ago that I run proxmox on, haven't really run into this issue on DigitalOcean, then again your script sounds relatively complex. That script sounds really cool!
Do you know where i can find a pdf version of this? 
Oh okay! It's quite complex yeah! It is, you should check out the library, its not official, but it works well enough!
You could use Python a bit first, determine if it lacks features you would find useful and then pick another language based on that.
Thanks man, this is the type of insight I was looking for. Appreciate it.
I would agree with /u/Widdershiny's list, and if you wanted to pick 2, then Python + Javascript would be very useful. Linux is not bad to know either! A super common stack is: 1. Linux cloud server (say on Amazon Web Services or DigitalOcean) 2. Python backend service (web API, streaming with websockets) 3. User interface for desktop and mobile browsers powered by HTML+Javascript that talks to those services
Exactly, what I want to do is to splice two, 4 bit "data packets" together to create a byte. I am trying to understand struct, but there isn't a lot of straight forward documentation. 
They are the same in the ways that all c style languages are. The differences are the interesting part. If op wants to drastically broaden his horizons, I would suggest learning a functional or ML language like clojure or ocaml.
Great. Don't underestimate the power of self-teaching and non-traditional education, too, especially in the high tech fields. The sidebar has a bunch of resources, but there's Code Academy, Udacity, LinuxAcademy, Kahn Academy, ... and plain old books, too! Also, depending on where you live there might be good local meetups for python, the one here has a beginners/mentorship night every other week. Also, if you do want to get started with linux, I can't recommend [Vagrant](http://getvagrant.com) highly enough. It gives you a simple sandbox right on your local machine to beat up and learn by doing. 
My hero! Thanks for the link
This is so great! Can't wait for 3.5.
I'm not fond of this although making it easier to do those as expressions is useful for getting rid of extra lines/temporary variables. Also helps in the repl. Why can't we add a method for dict and modify + for lists/iterables A with method instead of update that creates the new merged dictionary. For list itterables just overload + to coerce iterables to lists if the first item is a list and make a chained itetable if the first item is an iterable. 
Here's a start http://www.binarytides.com/python-socket-server-code-example/ Or try udp client server
Thanks for the tip. I think you are probably right about needing different code for different websites. Would you suggest using individual modules for each site? This way I can change site specific modules when needed (aka if the site is updated. I probably then have to implement one overall module to rule them all. Muahahaha. Thanks again. I'm a beginner with python and any advice is much appreciated.
I'll look into SQL, it's one language I haven't really checked out.
This is the best source I've seen ever. Even better than Berkley &amp; MIT content, I dare to say.
Depends on your needs. If you're running Python2, I'd suggest building something using Twisted. They have a number of services already built in. Might be worth looking at this [echo server and client](http://twistedmatrix.com/documents/current/core/examples/#echo-server-client-variants). You can simply adapt that depending on your needs.
python excels at this sort of task. I scrape a lot of stuff at my job. I'd suggest the requests and beautiful soup libraries. Requests for getting the info from the pages, handling sessions, etc... and the beautiful soup for parsing the html. Depending on how much info you'll be scraping you could store in sqlite which is built into python. Good luck on your project. 
This looks really cool. I really like all the unpacking stuff in python3. 
At least extracting text seems to be easy in PyPDF2 import PyPDF2 as pdflib pdf = pdflib.PdfFileReader('yourfile.pdf') txt = u'\n'.join(pg.extractText() for pg in pdf.pages)
Imo, dont worry about C. Learn Python ... and SQL.
Good catch! My apologies, the correct package name on PYPI is [pyqt4](https://pypi.python.org/pypi/PyQt4) or [pyqt5](https://pypi.python.org/pypi/PyQt5) depending on your needs. My experience has been with using Qt4 through [PySide](https://pypi.python.org/pypi/PySide) which has a more permissive license. It's also worth noting for thoroughness that Christoph Gohlke's site has Windows binaries for a huge array of libraries available as wheel files. It looks like he has [PyQt4](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4) and [OpenCV](http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv). Interestingly at this moment OpenCV is first in the 'index by date' and he has version 2.4.11 where the [OpenCV site](http://opencv.org/downloads.html) has 2.4.10 and 3.0 beta. He often offers compiled installers for libraries not available elsewhere or with additional fixes only available via source. His site is at times an invaluable resource when dealing with troublesome Windows installs. My preference is conda &gt; pip w/wheel file &gt; package website's installer &gt; Golke's installers (now wheels) &gt; pip w/o wheel file &gt; install from source.
Is C becoming less popular?
Nothing's like COBOL. But honestly, C is like porn. When you need it, you need it. But otherwise, it's never spoken of.
Reposted it, should I remove this post?
Thanks. I appreciate it! 
Tornado has a sample [chat server](https://github.com/tornadoweb/tornado/tree/stable/demos/chat). Also, if you need to support Macs or Linux over a VPN in addition to Windows, check out SoftEther.
 mv /path/to/folder /path/to/destination
I dislike the mixture of ui and game logic! No way to reuse the logic with other ui or even architecture like a Web app and hard to test. And the check if there is a winner can be made so simple if using a data structure and not just named buttons... ;-)
Yeah! It's great to mess about with
If you need to create PDF : http://weasyprint.org/docs/
Pexpect is exactly what you need. Can you show what you tried?
It's not the same performance profile, but for the first example, you could use [collections.ChainMap](https://docs.python.org/3/library/collections.html?highlight=collections.chainmap#collections.ChainMap).
Have a look at the code behind youtube-dl and FanFictionDownloader, it does exactly this with different 'adapters' for different websites. PS: As a beginner you may have to spend some time understanding the above code.
Did you use QtDesigner or something similar for this? I am new to programming but I tried working with PyQt4 and simply wrote the code by hand, it did not seem that hard...here there is some XML file, .ui, resource files which seem so mysterious for me.. I did not use any of this in my own code. Maybe PyQt5 is just that different though.
Ah, that's important to know. You need to combine those [nybbles](https://en.wikipedia.org/wiki/Nibble) into a byte before you can save it using struct, because struct can't save anything smaller than a byte (actually computers in general can't do that). http://www.gossamer-threads.com/lists/python/python/88968 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Nibble**](https://en.wikipedia.org/wiki/Nibble): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), a __nibble__ (often __nybble__ or even __nyble__ to match the vowels of __[byte](https://en.wikipedia.org/wiki/Byte)__) is a four-[bit](https://en.wikipedia.org/wiki/Bit) aggregation, or half an [octet](https://en.wikipedia.org/wiki/Octet_(computing\)). As a nibble contains 4 bits, there are sixteen (2^4) possible values. A nibble can be represented by a single [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) digit and called a "hex digit" or, less commonly, a "hexit". &gt;A full [byte](https://en.wikipedia.org/wiki/Byte) (octet) is represented by two hexadecimal digits; therefore, it is common to display a byte of information as two nibbles. The nibble is often called a "semioctet" or a "quartet" in a [networking](https://en.wikipedia.org/wiki/Computer_network) or [telecommunication](https://en.wikipedia.org/wiki/Telecommunication) context. [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*] Sometimes the set of all [256](https://en.wikipedia.org/wiki/256_(number\)) byte values is represented as a table [16](https://en.wikipedia.org/wiki/16_(number\))×16, which gives easily readable hexadecimal codes for each value. &gt;==== &gt;[**Image**](https://i.imgur.com/q3b5A6p.png) [^(i)](https://commons.wikimedia.org/wiki/File:Octets_in_CP866_ordered_by_nibbles.png) - *An octet Code page 866 font table ordered by nibbles.* --- ^Interesting: [^Nibbler](https://en.wikipedia.org/wiki/Nibbler) ^| [^The ^Nibblers](https://en.wikipedia.org/wiki/The_Nibblers) ^| [^Nibble ^\(magazine)](https://en.wikipedia.org/wiki/Nibble_\(magazine\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+coyv46u) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+coyv46u)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
/r/learnpython please
This already works in Python 3 &gt;&gt;&gt; first, *rest = [1, 2, 3, 4] &gt;&gt;&gt; first 1 &gt;&gt;&gt; rest [2, 3, 4] or do you mean something else? &gt;&gt;&gt;
http://linux.byexamples.com/archives/478/python-writing-binary-file/
Why anyone would pay you money when you can't spend 15 seconds to type a search in google and read is beyond me. Here, I did your work for you. http://docs.activestate.com/activepython/2.7/pywin32/win32print.html
sorry, not Intellij but Pycharm.
Or IntelliJ with the Python plugin. Just kidding. :P
C will always be there, but the necessity for you to learn or know it as a programmer is becoming far less necessary.
Meh, no support for descriptors (or at least properties) and incorrect handling of method binding (essentially still getting into the the old javascript pitfalls where `this` depends on how you call the function, not where you got it from, like in Python) ...
That's the sense I've been getting. Thanks!
This is a Python-inspired language, not pure Python. Pure Python approach doesn't work in JavaScript world without excessive overhead. You're picking on design choices, not omissions. The lack of automatic binding is intentional, as the code required to support it will slow your JavaScript down to a crawl if you're creating hundreds of objects and 95% of the time you won't care that the function is unbound. If you want a bound method, use @bound decorator or bind() function. Also, the documentation is clear about "this" gotcha, and recommends using "self" (or whatever you pass as first argument to method definition) instead, which will solve most of the pitfalls you're referring to (aside from one where you do 'unbound = object.function', which @bound will handle). Same applies to descriptors, it's too much overhead to scan for assignments to non-exposed variables at runtime - although I am considering different compilation flags for handling this.
I don't like that screwdriver so I'm going to re-create it in my hammer. 
Agreed, this was already suggested on the mailing list, I just didn't have time to do so yet.
/r/learnpython
@dorsal_moral@ unfortunately i cant post it online. however here is the example Please enter the hostname? $ &lt;myhost&gt; Please enter your parameters $&lt;my parameters&gt; I finally for it working with expect on shell for today. But i might have to learn the subprocess module. thank you for your time and answers fokls much appreaciated. 
thx 
Minor note: you should never ever ever have `__double_underscore_methods__` in library code. They're explicitly reserved for the Python interpreter.
Says more about you.
SJW much?
What advantages does this have over [`sh`](https://github.com/amoffat/sh)?
Each process grabs a bunch of tests and executes them to reduce communication overhead. Use py.test on about a 100 tests and you get this: λ cat test.py import time import pytest @pytest.mark.parametrize('i', range(100)) def test_foo(i): time.sleep(1) λ py.test -n 4 test.py ============================= test session starts ============================== platform darwin -- Python 2.7.6 -- py-1.4.26 -- pytest-2.6.4 plugins: xdist gw0 [100] / gw1 [100] / gw2 [100] / gw3 [100] scheduling tests via LoadScheduling .................................................................................................... ========================= 100 passed in 26.11 seconds ========================== Works perfectly.
Shebang in a .zip file??? wow, never thought of it...
So you're saying it doesn't really start to work until you chunk together more tests? Is there any way to have more control over it like what I'm describing? Also how do you get output from the tests when running them in parallel like that? `-n` seems to not work with `-s`.
Oh damn, I was really excited reading through the examples until I saw it was node.js server side rather than browser client.
Django's ORM has several facilities for more complex queries as well as multiple tiers where you can fall back to custom SQL. * If you have performance problems you can specify an additional join with select_related. In some circumstances you can't join your way out and Django has built-in support for prefetching relations and joining them client-side with prefetch_related(). * Without using custom SQL Django supports aggregate functions and annotations (group by). https://docs.djangoproject.com/en/1.7/topics/db/aggregation/ * If you want to customize a query a little bit you can use extra parameters that allow you to insert your own clauses into the generated query: https://docs.djangoproject.com/en/1.7/ref/models/querysets/#extra * If you want to fully customize the query but still return results consistent with your model you can use raw() and specify the entire select query yourself. https://docs.djangoproject.com/en/1.7/ref/models/querysets/#raw * If you need a fully customized query with results that don't map to a model you can return the resultset as dictionary values. * If you don't want to lose the convenience of the model methods you can create an unmanaged model that uses a database view. All of these interfaces support proper query parameter passing (no concatenation should be used), and you can keep your custom database objects managed properly in your version control using the database migration facilities which also support custom SQL queries.
nice. how did you find out the api from your library?
RapydScript is great (I think it's the best option for "Python" -&gt; Javascript). I like the site organization, but I agree with others commentators that it's hard to read this thin white font - especially on red. Maybe increase font size and make it bold?
I think you can just use the `.thumbnail()` method. It resizes (*in-place*, does *not* return a copy) and keeps the aspect ratio.
replace this: &gt;result = get_data(...) with your: &gt;results = twitter.search(...)
You should give https://www.hackerrank.com/ a try. They have Python as an option.
Make a prime number finder which will find prime numbers between 2 user supplied numbers.
Holy shit, I'm excited again. Thanks for that, I wouldn't have known otherwise!
Try /r/learnpython
why?
Not sure I understand. Is there a specific reference. There are plenty of methods which are fine to use or redefine as long as it doesn't touch global state (aka side effects).
I find it a little annoying that session fixtures don't behave well with threaded (xdist plugin) tests. Otherwise I'm currently using pytest at work.
While most would say adopt early and get involved with bug reports, it sounds like you should sick with the stake version of OpenCV available for a python 2. You should be able to get PyQt working on python 2 no problem.
If you've know any of the basic algorithms and data structures they teach in low level computer science courses, that could be a good way to get familiar with the syntax and make you think while using it. Quicksort (or any sort really), linked list, binary tree, Fibonacci sequence, factorial etc.
##
great reply, thank you very much
It'd be one session per process, right? What weird behavior are you seeing?
What Guido is doing IMHO is changing things slowly. If you're right that extending this to comprehensions (that was really unpopular on dev-python) is ultimately desirable, it can be added in a future pep.
sure... it's exactly the same as `contextmanager`, which is one of my very favorite parts of the standard library. The only difference being that exceptions aren't reraised in the generator. 
Something like this, if I'm understanding the question correctly: grammar_dict = {} for i in range(len(words)): word = words[i] if word in grammar_dict: grammar_dict[word].append(word[i +1]) else: grammar_dict[word] = [words[i +1]] 
&gt; self hosting Hmm, am I to suspect you didn't just use python to run and test? ;)
Pycharm. Its built just for python and has many cool features. Vim and sublime are more general purpose with plugins on top. But it all comes down to personal preference. 
you can also use [defaultdict](https://docs.python.org/2/library/collections.html#collections.defaultdict) 
I write 1 extra line, 'class TestBlah(unittest.TestCase): and can then also use that class to group like tests together.
&gt; Update, Oct 2014: This post was written in 2008, based on me scrounging together some complementary links at the time. It’s now 2014, and accessibility is a well thought-out problem, which is generally well solved. Use the colour scheme that makes you happy. I use a black background on my Windows Phone, a dark navy in Sublime Text, a mid-grey chrome around my Office documents, and a bright white background through Outlook and my email.
I personally use Sublime Text 3 with the Anaconda plugin. Lightweight, the code checker is just as annoying/useful as PyCharm's, legit autocomplete, and of course, free. Anaconda is essentially an IDE in a plugin. I've used both Pycharm and ST3 extensively for Python, and I prefer Sublime Text 3 for anything Python. I don't need to load up an entire (Java-based!) IDE to write code. 
 zip(words[:-1], words[1:]) I dislike asymmetry.
~~sudo pip install --upgrade "ipython[notebook]"~~ pip install --user --upgrade "ipython[notebook]"
Both? I use both at the same time for different things. Sublime for quick little scripts and pycharm for large applications. The debugging in pycharm is invaluable when you're going through tons of code. Plus you get database integration, full IDE support for testing and coverage, source control integration, and tons more. Different tools guy. Start with sublime, then when you want more pick up pycharm.
you're not going to get opencv to work for python3 on windows. I've tried about 10 times...spent 10's of hours, and it just won't work. sorry guy
There are plenty of jobs in software development that don't require C++. while I am aware of some companies that like to do everything in C a dislike of the language will not set you back. These days C and C++ are a niche skill which tends to be most in demand for high performance applications. Almost everywhere else JVM, Python and other languages that are easier to get right are more popular. 
While we're at it: /r/IPython 
&gt; What real-world applications do you write with it? Python apps we made for [postfix](http://www.postfix.org): * SMTP anti-spam : Python2 + [pymilter](http://pythonhosted.org/milter/) * Logs viewer: Python3 + [PyQT5](http://www.riverbankcomputing.com/software/pyqt/intro) Python apps we made for [Microsoft Dynamics CRM](http://en.wikipedia.org/wiki/Microsoft_Dynamics_CRM): * Mailing server: [IronPython](http://ironpython.net) * Monitoring server: Python2 + [Python.NET](http://pythonnet.github.io) * Light CRM: Python3 + Django + [Python.NET](http://pythonnet.github.io) 
I learned python several years back with the intent of scraping Amazon, renaming books based on ISBN. Scraping is an excellent place to start. There are literally tonnes of tutorials and videos you can go through. Check out beautifulsoup, lxml, xpath and you'll be pretty much on the way. 
Unobtrusive and optional is what these JS types I mentioned are going for too, and it is working very well. It is very convenient, especially with a decent inference engine. 
If you are interested then use the appropriate [ius-release package](https://iuscommunity.org/pages/Repos.html#release-packages) for your OS to enable the repo.
Thought this meant IronPython for a second Edit: Of course, downvotes for no reason.
Is python in 'G:/Python34/' or is it in some other folder like 'G:/python' 'G:/tools/python' or what ever it may be?
&gt; shift+tab TIL. And I use IPython daily. Thanks. 
Maybe you are just a beginner programmer, and programming can be hard? Especially unix/hpc/mpi/etc. Programming is not the language, its design, and if you have not seen over that horizon yet then I would not make any judgements on your future. Depending on the engineering discipline you could end up programming a lot anyway.
I guess you can't just ctrl+C it? That will usually give you a traceback that will give you a clue where it is going wrong. As for debuggers, I use http://winpdb.org/
What would you say you added to the discussion?
Did the C++ mods move this to Python or what? What's this have to do with LearnPython other than learning python might be easier than C++? I'd wager most people in this subreddit do not code in C++, and cannot answer your question, thus the downvotes. For my biased answer, however: No.
 I had no idea this sub was so hostile. Removing from my defaults.
ずっと待ってた
Very cool. Thanks for the reply.
Yeah, I have been using the (words[:-1]) method 
You should also check if your environment has changed, such as a new Python, wxPyhton ect. Have a look at their migration guides and changes.txt
Don't sudo pip install
Yeah the python.exe file is in G:\Python34 
Why not?
~~Word to the wise: Disable adblock.~~
if you are writing small hello world scripts just use VI or emacs in 5 terminal... vi is on almost all servers so you can code on any machine regardless... I use pycharm for my local development and then on my AWS machines usually vi... pycharm is pretty large but it's not hard to set up at all. you just download the thing and open it up... plus it has nice autocomplete, go to definition so you can shift click on a function and go right to the source. that being said I work with quite a few sublime text users so it really don't matter... some people code in notepad++ and there code works just the same as my bloated pycharm or sublime text personally using vi has made me way more productive and I've gotten to the point where I barely use a mouse for anything except for click intensive GIS work.
I'm using it for an Ubuntu app. It's very handy for multi file/module applications. You can install compiled libs via pip or apt. You can also put pyc files in zip for obscuring your code a bit and forcing for specific arch and version of python. It's very handy for deb files too. 
Ok cool. Scraping is directly useful in my line of work, so this is probably where I'll start :)
Not using python 3.
There shouldn't be much to configure besides syntax highlighting (and sometimes set up the interpreter path if you had both Python 3 and 2); for most basic support, you can just install Python 3 language support from Package Control: [video](http://puu.sh/ggw06/7fabed991d.mp4)
So... how to do it differently? Without sudo no install completes properly.
https://i.imgur.com/Pc6Nj1E.gif
Make a counter class with a name attribute. Have it print its name and count every 10000 times it is incremented. Make an instance before any suspect loops and increment it within the loop.
Install in virtualenv
If you don't/can't read sidebars and judge the appropriate forum to ask questions in, you shouldn't take a career in programming. Be a gardener or something.
That's so sad. I was friends with him; he really was a lovely guy.
I remember him as a competent organiser that I did not want to let down when it came to my (very, very small), EuroPython presentation. I had remembered him over the years and I do think his death makes the Python community a little smaller.
Thanks, that's swell!
I believe it is going to be added in python 3.5. Python 3.5alpha1 was released yesterday or something close to that. So you answer is: "should be soon" 
http://www.reddit.com/r/Python/comments/22tb0g/pep_465_matrix_multiplication_operator_was/ 
Yes, it's been in 3.5 for most of a year. Here's the checkin from last April. https://hg.python.org/cpython/rev/c553d8f72d65 This checkin is all syntax support and scaffolding. AFAICT none of the types built in to Python implement __matmul__ (unless you count the unit tests).
I mostly install things into my home directory, e.g.: pip install --user --upgrade "ipython[notebook]"
Is something not showing up for you with adblock enabled? I use it, and I don't see any problem on the IPython docs.
I've been sudo pip installing for years without any issues? Will need to look more into this
You can make one. Running activate isn't that difficult.
If you're on windows, use anaconda. Otherwise virtualenv come standard as of 3.3 or 3.4.
This needs a way for it to contain app icons in different sizes - ideally, in whatever the freedesktop standard is.
A pig. In a cage. On antibiotics.
I admit I don't know PHP but I don't see what you mean by "everything is handled by dicts and arrays": http://book.cakephp.org/3.0/en/orm/query-builder.html Anyway, I prefer djangos ORM. It's not as powerful but the usability is great.
Um, have you commented on a wrong comment? I don't see how it relates to what I wrote, especially Windows to a question about sudo.
thank you!! 
/r/flask /r/django
Have you given django a go? It is tightly integrated and it works out of the box. I think that's comparable to cakephp. I've used cake for a long while and have given django a try. It's not the same at all but it's an environment where you are given all the tools in a single package. 
Any binary string you print on the REPL will be surrounded by `b''`. For instance, Python 3.4.2 (default, Jan 12 2015, 11:38:40) [GCC 4.9.2 20141224 (prerelease)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; a_str = "hello" &gt;&gt;&gt; a_str = a_str.encode('utf8') # now binary &gt;&gt;&gt; print(a_str) b'hello' 
perfect - thanks for that clarification.
&gt; pip search whois
You should not put your api-key directly in your code... use environment variables instead
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
I see, actually the original compiler was written in JavaScript (heavily inspired by UglifyJS structure). That is what makes this project unique compared to Skulpt, PythonJS, etc. I decided to start with JavaScript and make it behave like Python instead of starting with Python and making it figure out how to do the equivalent in JS. This results in a language that's not pure Python but has better performance/execution speed and compatibility with non-standard JS environments (i.e. game engines that use JS for scripting).
When I first tried it on firefox, I couldn't run any cells from an old notebook. Restarting the kernel didn't work. But another browser without adblock could. I reset a bunch of times, to no avail. Then I disabled adblock, reset ipython, and it worked. It was giving lots of these errors: [W 11:10:35.133 NotebookApp] 404 GET /api/kernels/eeb974e5-b0e7-4a19-bd71-f6f9cacf4dcd/channels?session_id=1234430684044271AFE7A7ACDE378F09 (127.0.0.1): Kernel does not exist: eeb974e5-b0e7-4a19-bd71-f6f9cacf4dcd [W 11:10:35.135 NotebookApp] 404 GET /api/kernels/eeb974e5-b0e7-4a19-bd71-f6f9cacf4dcd/channels?session_id=1234430684044271AFE7A7ACDE378F09 (127.0.0.1) 6.81ms referer=None [W 11:11:35.177 NotebookApp] 404 GET /api/kernels/9373a827-66be-4f6f-9303-473a82194de0/shell (127.0.0.1) 1.05ms referer=None But I just tried reproducing the problem, and couldn't. So maybe it was just a coincidence.
What are you having trouble with? I answered your question exactly... What do you need a tutorial for?? Do I have to show you how to type it out??? If that doesn't answer your question, could you be more clear on what you are trying to accomplish?
I do not want to mean that I didn't understand local host. ...my concern was how we can get that ip and port
Sorry for that...but where to get this ip and port....I don't know that. .
If you are using: a = "\x61" b = "\x62" c = "%s%s" % (a, b) To concatenate strings, you are using python wrong....
GAE last time I checked [more than a year ago, perhaps more like almost 2] did not have mysql or postgresql since they have some other database like offering. So I moved to openshift. The free tier gives you 2 gears for your app , and use up one gear for running a mysql server. I have not deployed flask, since I use django but from the docs it looks the process is the same and its really simple. https://developers.openshift.com/en/python-flask.html
I spend half my life in a Terminal and I run everything through there anyhow, but I see your complaint, and raise you the entire Python build system in Sublime. 
In 2.0 it was more visible but in 3.0 you still use dicts and arrays for complex queries: $query = $articles-&gt;find() -&gt;where([ 'author_id' =&gt; 3, 'OR' =&gt; [['view_count' =&gt; 2], ['view_count' =&gt; 3]], ]); Perhaps saving data is a better example. To save a blog post with belonging comments you would just form it like this: $data = [ 'title' =&gt; 'My title', 'body' =&gt; 'The text', 'user_id' =&gt; 1, 'user' =&gt; [ 'username' =&gt; 'mark' ], 'comments' =&gt; [ ['body' =&gt; 'First comment'], ['body' =&gt; 'Second comment'], ] ]; $articles-&gt;newEntity($data); The functionality in the last example I have yet to find in a python library. 
I think you possibly missed the end of the article, where it is recommended to use the `b"".join(iterable)` approach, on both Python 2 and 3 -- for writing 2&amp;3-compatible code. That is the point. 
Perhaps consider [Web2Py](http://www.web2py.com/). The main dev, Massimo, is quite active on reddit.
I use both. When I start a project, or I'm writing proof of concept code, I use Sublime Text. It's fast, and the auto complete is awesome. Then, I touch it up and put it all together in PyCharm. At least for me, my projects in Sublime Text turn into spaghetti code fast, but PyCharm keeps it structured. I use PyCharm as a refining tool, but Sublime Text does most of the heavy lifting.
I read the sidebar before posting but thought twice about posting it to there. I'd thought this was more suited to python in general. Rather than a simple or general topic like "how can I debug something", in this topic I have a very particular issue: I have tried several different debuggers in python 2.7, and all of them do not respond as expected to SIGINT. I needed to find a way to locate a problematic infinite loop inside someone else's prohibitively large codebase. I wouldn't consider that a beginner question. I realize I probably didn't make that very clear in the OP, but if this was a homework assignment or something with a trivial solution I would have gladly posted it to /r/learnpython. At the moment, my experience has been: * pdb &amp; pydb: closes on ctrl+c * rpdb2 &amp; winpdb: says the program is paused; program is still running * manual debugging methods: the source is far too large and unknown for that, and since it uses multiple threads it will be a pain to display anything sensible in the terminal * gdb: doesn't show the python stack, requires debug syms I ended up recompiling python2, gtk+ and gtk-aurora-engine with debug symbols enabled and tracing it via gdb to [a missing check](https://github.com/ScoreUnder/gtk-aurora-engine-fixed/commit/ae14fddcf07b3406fe53c4b7322181a0ff7c1627) in the aurora theme library. I posted to a serious place for serious answers. If I posted to /r/learnpython I'm afraid I'd get more answers focusing on the manual aspect of debugging or advice on keeping programs error-free, when that isn't much help in this case. I hoped that by posting here people would understand that it was a question I felt was more suited to this sub, and answer accordingly. I was asking the question less from the perspective of the language itself and more from the perspective of the python ecosystem and what tools or methods to use when things go bad. 
Thanks. It's probably my fault though. Reading through my own OP I don't feel like I gave enough context to describe the situation properly.
/r/learnpython please
Google now offers 3 solutions: App Engine (GAE), Managed MV (MVM), Compute Engine (CE). GAE and MVM offer a choice of Cloud Storage (NoSQL) and MySQL. They offer autoscaling. MVM runs Dockers so you an install any Docker container. CE is a regular VM and you can install everything you want on it, so any DB.
-9 is a lot
It was John Hunter two years ago and now John Pinner. Cancer is awful. My thoughts and condolences go out to his friends and family.
`--user` is better than `sudo` but I don't recommend it either. It's not compatible with some virtual environment tools (see [this discussion](https://github.com/conda/conda/issues/448)).
yeah I started using Openshift for learning
:-( Real Python developers never die. Their reference count just goes to zero.
Yeah i mostly use things like numpy and pandas, but I can see why with running some random library that may contain malicious code.
I don't believe it supports any other standards apart from the [Numpydoc format](https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt#docstring-standard). You could always open up an issue/feature request on their new Github page. I guess it would be nice to be able to specify what type of doc formatting to expect or support multiple formats, though I'd imagine this would be a pretty low priority feature for them. Of course, you always have the option of selecting the plain text format rather than rich text format for the object inspector. Doesn't look as pretty but works decently. Personally, I really like the NumpyDoc format and I've started to use it exclusively for anything I code in Python these days.
I like Numpydoc too, and use it everywhere I do not use Google. I use Google for robotics, though, because it is not really something very scientific. Though, I guess I could switch.
According to the source code it should work for the Optus network: https://github.com/typpo/textbelt/blob/master/lib/providers.js#L115
I've been using open shift for a while now. Very easy to set up and manage. I don't like the fact that they base most of their documentation on blog posts and SO questions. I used it with both mysql (for WP site) and postgre with django. Installation using a wizard, pull to set up a dev env and push to deploy. Very (very) easy set up.
I would say that no one should be using `"%s%s" % (a, b)` for concatenation and anyone who is should be taught the pythonic ways to concatenate (byte) strings. Which of course is something that the blog post goes on to demonstrate (No, I did not miss the end of the article). The premise of the blog post is "How to concatenate byte strings in Python 3". However, the post beings with an example that one should not expect to encounter yet passes it off as the way that people who write python would normally. If the premise of the blog post had been "String substitution, byte strings and writing python2/3 compatible code" I would not have made the comment I did.
crypt is [available in python](https://docs.python.org/2/library/crypt.html). Quick and dirty example: import crypt, random, string salt_chars = string.ascii_letters + "./0123456789" salt = random.choice(salt_chars) + random.choice(salt_chars) print crypt.crypt("some password", salt)
Sorry for a naive question but I am curious - how is it different from, say, django?
this has already been discussed before, the bug does not really influence anything. http://bugs.python.org/issue23515 
Web2Py is a all-one package. It is a server as well as client side. It runs without needing a webserver. Django is more of a typical CMS - much more like CakePhp in how it runs. These are just simple answers by the wya I don't know either one of them well enough to give a authoritative reply.
Thank you! That is a vaaaaast improvement. (ptpython, that is. bipython doesn't work on Py3 yet, so..)
&gt; You use IPython *notebook* daily? Yes, sorry.
Python 3.5 will re-introduce some restricted %-formatting, for bytestrings. &gt; With Python 3 and the split between str and bytes , one small but important area of programming became slightly more difficult, and much more painful -- wire format protocols https://www.python.org/dev/peps/pep-0461/
It's worth putting in a feature request if you can't find one already on their Github repository. The devs are very active, responsive and willing to entertain new feature requests.
Aren’t name clashes easily avoided with name mangling?
Windows is unsupported? By Python?
That's quite odd, usually you don't save comments simultaneously together with the article itself, since the article already exists when a comment is added. But putting that aside, I don't quite see the benefit of "doing everything with dicts and arrays". SQLAlchemy comes with an (optional) ORM, that allows you to relatively easily map tables to classes and use them pretty much like native python objects. Once you've got your models set up, it's quite readable and easy to use, imho. author = current_user_from_session article = Article(title='My title', body='The text', user=author) session.add(article) session.commit() Adding comments # query article. article = session.query(Article).filter_by(id=article_id).first() if article is None: raise Some404Error() # create comment and add it to article comments. comment = Comment(body='First comment') article.comments.append(comment) session.commit() Of course, you could also use the underlying query-builder, if that's what you desire.
Which is why I am usually always working in Spyder IDE. Ctrl+I pops up all the help docs in the Object inspector, nicely formatted and rendered. I love using IPython Notebook, but it doesn't work particularly well when developing code from scratch. I use Spyder to get things working and once I'm ready to explore data or prototype smaller pieces that build on the framework I've already developed, I then move to IPy Notebook as I love being able to document code and comments/thoughts in a single document.
The diamond is no problem in Python imho. Just call super using keyword arguments. I personally prefer multiple inheritance.
Yeah, it's good that they caught it, but right now it's pretty unlikely to ever have triggered (given the size of the dataset needed).
In my opinion both using a mixin (and all the potential problems of multiple inheritance) AND monkey-patching a class with a decorator are worse than just typing this def __init__(self, name, *args, **kwargs): self._name = name if your use case is significantly more complex, or contains some kind of data pre-processing then the mixin solution is worth thinking about. I would avoid the decorator, except maybe in unittest code. My belief is that monkey-patching is basically always unacceptable for production runtime but is sometimes helpful for testing. 
The diamond may still pose problems, because it breaks assumptions about sharing state. Otoh, pythons way of breaking these assumptions is far less likely to break stuff than c++'s way. 
Great! Best of luck on your project. I would also still try around with the other GUI-toolkits (and their GUI-designers) to see which one suits you the most!
You should be using ttk to get more native looking widgets? This is a Python3 example: from tkinter import * from tkinter import ttk master = Tk() def callback(): print("Button clicked!") b = ttk.Button(master, text="OK", command=callback) b.pack() mainloop()
[As Tim note](http://bugs.python.org/issue23515#msg236603), in the CPython implementation and with current machines, it's impossible for it to manifest (though it was still a logical error). Not unlikely, impossible, because there just isn't a machine on the planet with enough RAM for the error to arise. *But* the bug could be triggered on the slightly different/altered Java version of timsort.
Thank you for your response. I'm starting to get the hang of it, although the sheer number of permutations is still a bit mind-boggling. You refer to Anaconda and Enthought Python Distribution - am I correct in assuming that these come with a host of libraries (or toolboxes like Matlab :P?) pre-installed? So why then the need to use a dedicated text editor or things like Spyder - what do these add? Or are these simply replacements for something Notepad ++ (I know this seems straightforward, and I believe I already know the answer, but I just want to be crystal clear moving forward).
&gt; are Anaconda and Enthought kinda like super-packages which include all the packages that you just listed? I think so. Here's instructions for getting up and running with IPython and anaconda or enthought: http://ipython.org/install.html
Thanks, I'll post the same question to you as I did above. Is Spyder compatible with per-packaged programs such as Anaconda and Enthought? Do these super packages have their own Python shell? Is it replaceable with Spyder? Is there like a "mothership" program from which I can control all my libraries, editors, etc. or is the decentralization of Python non-negotiable?
Thankyou!!!
Yes, Spyder is compatible with things such as Anaconda. If you're using Windows machine, you can look at Python(x,y) which is a combination of Spyder and a distribution. That's really the only thing like a "mothership" I can think of. For OS X, homebrew + homebrew-cask might also work.
No, I don't think IPython is a GUI like most Matlab users are used to. A specific IDE like Spyder is more like the Matlab environment, with it's variable browser, and multi windowed GUI. 
Aha! I recognize IDLE - it seemed to me to be quite similar to N++, or rather more like a command prompt... though that would be my inexperience. When you use these IDE's, do you then have the ability to call either the 'naked' version of Python, or, the 'enhanced' version (ala Anaconda, etc.). i.e. as in Matlab, where you define the folder path and it includes all your toolboxes, can you preset/configure something like Spyder to automatically search through your libraries...? I know you said you lack experience in this field, so please ignore if the question is asking too much.
This is excellent! Thank you :)
I wrote a long response to a similar thread a little while ago which I am quoting below. Apart from that, I'd definitely recommend using Spyder IDE for scientific computing, especially if you are making the transition from Matlab. I really like it a lot and it integrates very well with IPython, and has great functionality for debugging, with access to variables in the variable explorer. Matplotlib has a bit of a learning curve, but it is great for plotting and is quite similar to Matlab. I'd recommend staying away from becoming dependent on Pylab as it pollutes the namespace by importing a whole bunch of crap by default. Once you get familiar with Python + Numpy + Scipy and Matplotlib, I'd highly recommend familiarizing yourself with [Pandas](http://pandas.pydata.org/) for 2D data wrangling and [Numpy Structured Arrays](http://docs.scipy.org/doc/numpy/user/basics.rec.html) for structured, multidimensional records. They are far better than the options I found in Matlab when handling and manipulating large datasets. &gt; I was in your shoes around a year ago and I jumped headfirst into Python and have not looked back. After years of frustration with Matlab, I reached the breaking point when I made a GUI based tool in Matlab and was extremely underwhelmed with how clunky the whole experience was. &gt; &gt; Here are some links that should be really helpful: &gt; &gt; https://github.com/jrjohansson/scientific-python-lectures &gt; &gt; https://scipy-lectures.github.io/ &gt; &gt; I would not recommend diving head first into Pandas or Wes McKinney's book just yet unless you really need Dataframes (which is unlikely if you are coming from Matlab). &gt; &gt; Python + Numpy + SciPy should pretty much cover most standard Matlab use unless you were using some specialized toolkits in Matlab extensively. &gt; &gt; You will need to familiarize yourself with matplotlib, but for that, JR Johansson's tutorial (1st link) is an excellent quick guide. Matplotlib is not too difficult to pick up if you are familiar with Matlab, and the quality of the plots are far superior to what Matlab produces. &gt; &gt; I also found this book pretty invaluable when I was a Python + Numpy noob: http://www.amazon.com/Scientific-Programming-Computational-Science-Engineering/dp/3642302920 &gt; &gt; In addition to all this, you will perhaps gain the most benefit by learning Python, and how to think and code in a Pythonic manner and to divorce yourself from some of the poor programming styles Matlab cultivates in users. &gt; &gt; For that, a combination of books on the sidebar in this subreddit as well as copious amounts of Googling and perusing StackOverflow will gain you a lot of knowledge. &gt; &gt; What worked for me was to start by porting some code/scripts from Matlab into Python. Then, as I gained familiarity and confidence, I began tackling newer projects for work/fun in Python + the Numpy stack right off the bat. You don't need to learn very much to get to the point that you can do most basic Matlab stuff in Python. &gt; &gt; In time, I messed around with Cython and wrote a Fresnel reflection solver that was almost 10X faster than native Python and Matlab implementations. I've also written a Matplotlib wrapper for reducing a bit of the boilerplate cruft when generating plots ([Easyplot](https://github.com/HamsterHuey/easyplot)) &gt; &gt; Since then, I've also learned to use and have fallen in love with IPython Notebook. In a scientific environment, it is amazing to be able to self document code in a living document where you can write beautifully rendered equations in Latex and simultaneously run Python code and create plots via Matplotlib, all from within a web browser. I've certainly impressed several people at work with what I have been able to do with Ipython Notebook. &gt; &gt; Lastly, I'd highly recommend installing Anaconda for your local Python distribution. It is amazingly hassle free to have a full Python + Numpy stack installation, and the package manager (conda) is excellent and simple to use. I'd also recommend using the Spyder IDE (ships by default with Anaconda) as it will be familiar to those from a Matlab background and it has a variable explorer (a feature I really loved in Matlab, and continue to love in Spyder). &gt; &gt; Sorry for this rather long essay. Hope it's helpful and feel free to PM if you have any questions. http://www.reddit.com/r/Python/comments/2vl1kv/learning_python_after_using_matlab_for_so_long/coiygup 
Good questions. It's important to keep in mind that Matlab is two things: a programming language (and an interpreter that runs code in this language) and a GUI program that aids in writing code in that language (an IDE). Python is really just the language/interpreter, it doesn't have an official IDE. Well, IDLE, but it's really just a convenience for people just starting out, not really intended to be used long-term as a full-fledged IDE. A lot of people use text editors like Notebad++ (Sublime Text is best in this category, I think) together with a Python console (IPython qtconsole offers a good improvement over the basic console). I personally use an IDE called PyCharm. I think this is the best Python IDE but Spyder is good too, and more similar to Matlab (the IDE). &gt; When you use these IDE's, do you then have the ability to call either the 'naked' version of Python, or, the 'enhanced' version (ala Anaconda, etc.). First of all, one difference between Matlab and Python (as languages) is that in Python you need to run an `import` statement to get access to any external libraries you've installed. So in a sense, you're always running Python "naked", until you import something. In a different sense, you can easily have multiple Python interpreters on your system, each with different packages installed. On Linux/OSX, there will be a system Python already installed. On Windows, you might have installed some software that comes bundled with its own Python interpreter. Best practice is to ignore those other Pythons and just use the one you install for your own work, whether it's through Anaconda or whatever. One thing Anaconda provides is the ability to manage multiple Python interpreters of its own, each with different packages/versions of packages (even different versions of Python itself). So if your projects have different dependencies, no problem. In Spyder or another IDE you can choose which Python interpreter to associate with any given project.
PIP is a package manager that will be useful since you said you are on Win7. Makes installing stuff a breeze. I've never used Anaconda and I'm sure it is fine. What I do know is that on Windows, the scientists I know all use PythonXY and seem to love it. Indeed SPYDER will make the Matlab transition smoother, and I started using it at first, but eventually I stopped for most things. I prefer just to open an iPython prompt and work from there and a less fancy text editor for scripts.
Well `virtualenv` is now standard in Python so that's a major advantage. Unless you are using Windows I think `virtualenv` is better. This is because it's harder to get everything going on Windows.
Thankyou!
I highly recommend Anaconda. Not only does it include the scientific distributions of interest (numpy, scipy, and matplotlib), it also comes with an IDE, Spyder. I used Matlab extensively as part of my last job, and now I use Anaconda for personal projects at home. IMO, Anaconda is the best free, "plug and play" alternative to Matlab. Edit: I'm on my phone at the moment, but I'd be happy to answer any questions later. Although it appears others may have already done so.
Cheers!
&gt; Well virtualenv is now standard in Python so that's a major advantage. How is that an advantage? Is it just that any advantage Anaconda offers isn't even worth the extra 5 minutes of installing it? Anaconda is definitely more of an advantage on Windows, but it can offer advantages that virtualenv can't even on other systems. For example it can do environment/versioning of non-Python package, which is very useful in some domains. It also saves lots of time compiling, and it hard-links package directories between environments, saving a ton of diskspace if you have lots of environments that each have numpy, ipython, scipy, etc. With virtualenv I'd be reluctant to create a new clean environment with the core scientific packages just for some tiny project, because it would take forever to install and take a ton of disk space. With conda, no problem. It takes just a second and no disk space.
It also might also blow up your computer if you actually are doing this on Windows XP
This sounds like homework. Is this homework?
Anaconda, enthought, and Python XY are all just python releases with a bunch of bundled libraries and tools. We use XY at work because it suits our needs very well, a few of the packages in it don't show up in Anaconda by default last I checked, but it's essentially just a bundled installer of packages that are known to play well together. Personally I can say that python with numpy handles FFTs quite easily, it's essential for our data processing, but there are a lot of other features built in to numpy that make certain operations awesomely easy. Pythons syntax is also a lot easier to get right than Matlabs, in my experience, and once you try ipython you won't want any other REPL. There's a lot of hidden functionality in ipython, like being able to profile, debug, or time your code from within an interactive session, the support for multiple GUI frameworks for interactive development, and the history/tab completion just works. It's a very powerful tool. 
but I want other people to directy run this code in their computer. What should I do to hide the api-key yet it's still accessible by the code?
Here's something I typed up in a different, similar thread. Hopefully you find it helpful! As someone who was once in your shoes, here are a few pointers: * don't ever use "import numpy as *", while it will feel less "MATLAB-y" to use np.whatever at first, it will eventually keep your code much cleaner * numpy arrays are indexed in C style by default. So if you have the matrix A = [1 2; 3 4], in MATLAB A(:) is the vector [1 3 2 4], while A.flat in numpy is the vector [1 2 3 4]. To use the MATLAB style (Fortran style), use A.flat(order="F"). There are lots of commands that depend on the order command if you want to make behavior match MATLAB. * Looping over elements of a numpy array tends to be very, very slow. Don't do it if at all possible. * When you get to the stage where your programs will take some time to run, use a profiler and look into re-writing some of your code in Cython. Cython is a tool that will let you convert Python-like code to compiled C code. It's awesome. * No tool is better than an ipython notebook for working on small projects and collaboration. * Not exactly related to Python directly, but learn to use version control. Lots of ides interface with GitHub, for example, natively. That's all I can think of for now, though there are surely others. PM me with any questions if you have them; most MATLAB commands have numpy/scipy commands that do almost the exact same thing.
This is a perfect use case for python descriptors. Somewhat clunky to code but wonderfully easy to use. Google it. :-)
Thanks for this
I would recommend Anaconda over PythonXY. One big issue is that PythonXY is still only 32-Bit, so not so great for Scientific computing when you are crunching large datasets. Moreover, Conda is simply excellent as a package manager and to maintain multiple independent environments on your system. You can easily have a Python 3.4 Numpy + Scipy install in one environment and have your base environment be Python 2.7 + the rest of the Numpy stack. Want to web dev? Easy enough to setup another environment and install Django, etc. Finally, there is better community support with Anaconda and packages are updated frequently and updating is as simple as typing conda update conda conda update anaconda in the command prompt. I installed PythonXY first when I got into Python for scientific computing and a few things were quirky and didn't work particularly well. Anaconda worked very well out of the box and I love the ease of use in keeping everything updated. Finally, if you are at an educational institution, you can get a free academic license for Intel MKL optimized version of libraries thru Anaconda, which improves performance. 
Thanks, I know all these things. 
according to the **stickied post** at the top of this sub..... this post is better suited for /r/learnpython http://www.reddit.com/r/Python/comments/2voohz/homework_learning_and_posts_on_rpython/
Use the struct module and hex. There's no reason to code that complicated loop.
Hi, im really not sure how id do that. Could you help me out?
I used both Python(x,y) and Anaconda in a scientific setting, and I would also recommend Anaconda over Python(x,y). Working with Spyder will feel much more MATLAB-like, because it integrates the prompt (IPython) with the text editor.
Quick and dirty when not on VPN, pretty handy with background encryption.
Just a thought, if you assume that knowing the filename is the security feature, then could you use the filename to generate an encryption key, then the file could be transferred encrypted?
Use a instead of r? You can't expect to write to a file unless you use the correct mode. 
I'll try that but can I use both a and b?
Googling "python append binary" brings up a bunch of links that say use "r+b". 
This is very helpful indeed. And someone did beat you to it :P, but I thank you nonetheless.
I'm thinking about it as a general approach. for instance, i'm doing a MethodLocker where it locks a method such as __delitem__ against invocation if some special flag, let's say obj._del_locked is True (whether locking methods in python is a good idea is a whole new discussion, let's do it for now :), so It is more complex than a simple `name`. But you are right, It's monkey patching, however, why not monkey patch instead of using mixins?
Thanks for the offer. I will certainly take it up :)
I totally agree. On Windows, Anaconda is the way to go. I don't get why some people get hung up that Anaconda isn't part of the standard library or don't know that there are a lot of people that have to use Windows machine at work with no admin rights with no Fortran or C compilers on said machine to install packages like numpy, scipy, etc.
I don't use Python for these applications so I don't have a lot to contribute, but I did want to say the following: I did a year of undergraduate research in image processing (processing DIC microscopy) so I feel your pain with MATLAB and I wish you good luck! The script I was using with MATLAB was taking 6-8 hours on 512x512 images and was, as yours, heavily FFT reliant. Good luck to you!
I moved from matlab to python about 4 years ago. I use Eclipse/PyDev. You are never going to find a better environment for dev than matlab. That being said, i love MSVS, but have not used PTVS (python tools for visual studio). Maybe you should look at that? I use Eclipse because i work in both Windows and *nix environments. EDIT: I just read your edit. DO NOT use anaconda or pythonxy. Both are equally shitty and get tendrils into your system you do not want. Just download binaries from [Christoph Gholke](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
FYI: I've expanded the comparison to stdeb [to include dh-virtualenv and fpm as well](https://py2deb.readthedocs.org/en/latest/comparisons.html) and moved the resulting text to [the online documentation hosted on Read The Docs](https://py2deb.readthedocs.org/) (it was getting too big/detailed for the readme).
Can we sticky this post?
Aye cheers, I've just installed Anaconda, updated some packages and stuff. A bit late to start experiment right now, but looking forward to trying it out tomorrow!
Haha, the struggle is real! I've got a fairly high end machine and sometimes my code runs for over a day! Very bothersome; which is why I'm making the switch slowly but surely to parallel and high performance computing. Good luck to you too with whatever is on your plate!
&gt; why not monkey patch instead of using mixins? I avoid monkey-patching because it completely breaks transparency of reference at runtime. Unless you know about the monkey-patch the code will not behave as expected and this can make finding and fixing bugs much more annoying. I tend to avoid mixins just to try and keep a lid on the complexity of the inheritance tree you have to fit into your brain to reason about your own code. I find overuse mixins to sometimes be a code smell that indicates spaghetti code hidden by a layer of indirection (shunt it up the inheritance tree instead of just dealing with it in the class that implements the logic). What's the actual problem you're trying to solve with this, by the way? Python not having private class members in the same way that Java does isn't actually a problem that needs solving. In fact, its just not a problem at all. 
The reddit sorts [are written in cython]( https://github.com/reddit/reddit/blob/master/r2/r2/lib/db/_sorts.pyx). I don't know what the performance implications are, but it's pretty easy to work with. Given that cython is a superset of python, the main downside is that you have to compile it. And of course things aren't necessarily faster unless you put in some extra work.
Your username is also very relevant to that PR...
Could you elaborate a bit more on the "shitty" side of Anaconda/Python(x,y)? I haven't had any issue with Anaconda (under Linux, if that matters)...
If you don't want to share state (what C++ calls "virtual inheritance", and what Python always does for inheritance), then in my opinion you almost always want composition rather than inheritance.
I'd start with anaconda + ipython (qtconsole and maybe notebooks) and then maybe spyder. Make sure you have the Numpy for matlab users open on a different tab :)
Have you used Cython? Having used both, boost.Python is a huge pain in the ass and Cython is actually pretty quick to get up and running. The tricks I have to use to get boost.Python running and especially deployed are so brittle and every little change seems to break it.
Heh, agreed..... It doesn't help in this case that the main repository is lacking tests too. Considering that this is supposed to provide authentication I'd kind of expect to see lots of test cases to cover the whole code base. Based on the commits and author activity looks like the project is kind of inactive. Which is unfortunate since the idea itself is pretty good.
&gt; the wretched diamond please excuse my ignorance, but what is "The Diamond"? Is this some kind of circular inheritance spiral of doom?
Is this an authentication provider, independent of your web application? If so, what protocol does it use to communicate with the application? Or is it an authentication module, giving your web application its own username/password store? If so, why would someone want this (embedded auth) instead of a protocol that allows reuse of external authentication providers like OpenID Connect (for example)?
I will second Anaconda. I use it professionally. I do similar work (image processing, optics) as you and can verify that you will easily be able to move away from Matlab and not miss any its tools. I've written automation scripts for observatories that run day in and day out (well, night in and night out) and process the images, all in pure Python. Please feel free to DM me if you run into any problems. 
Question, where does the data come from? What does it feed into? Is this a webapp? Is this a data engine of some sort? Context here matters a lot. Where are you hosting your database? Your question to doesn't provide enough information.
That's really bizzarre. Something doesn't seem right. I have multiple Spyder instances running right now (one in a 3.4 environment, and the other in 2.7) and each of them only use ~ 150 - 200MB total at most. I've never had memory issues running Spyder and I've also used it a lot on an older laptop with 4GB RAM (It's an 8 year old Dell laptop with an ancient Core2Duo processor).
In what ways do you use the turtle? I'm looking for materials on teaching Python and have heard good things about it. 
Check out http://beakernotebook.com/ for something like IPython on steroids.
That's pretty neat. Though how precise do you have to be with the filename? If you have to tell the recipient "my underscore holiday underscore pictures dot zip, that's all lower case", it's not quite as easy as it sounds. I might do this so it generates a short, case insensitive random code when you share a file, so you can just tell the recipient "TFEM64".
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Global Interpreter Lock**](https://en.wikipedia.org/wiki/Global%20Interpreter%20Lock): [](#sfw) --- &gt; &gt;__Global Interpreter Lock__ (GIL) is a mechanism used in computer language [interpreters](https://en.wikipedia.org/wiki/Interpreter_(computing\)) to synchronize the execution of [threads](https://en.wikipedia.org/wiki/Threads_(computer_science\)) so that only one thread can execute at a time. An interpreter which uses GIL will always allow exactly one thread to execute at a time, even if run on a [multi-core processor](https://en.wikipedia.org/wiki/Multi-core_processor). Some popular interpreters that have GIL are [CPython](https://en.wikipedia.org/wiki/CPython) and [Ruby MRI](https://en.wikipedia.org/wiki/Ruby_MRI). &gt; --- ^Interesting: [^CPython](https://en.wikipedia.org/wiki/CPython) ^| [^Stackless ^Python](https://en.wikipedia.org/wiki/Stackless_Python) ^| [^Thread ^\(computing)](https://en.wikipedia.org/wiki/Thread_\(computing\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cp1gpht) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cp1gpht)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is cool...and I will find a use for it
Interesting comment about merit and goodness of a programmer.
I highly doubt this. Like, silly bullshit doubt this.
Please use correct formatting when posting code. Indent everything four extra spaces.
In my opinion, Ipython wouldn't be the best for a Matlab newcomer, which I am to some extent; I have cause to use both Ipython and Spyder and I prefer Spyder because of its Matlab-reminiscent interface.
I was surprised myself, but watch the interview! It's straight from the horse's mouth. He started learning very basic APL, got confused (probably because it's a crazy language and he didn't know about variables) and then spent a year building an elaborate game in Hypercard. See [here in the interview](https://www.youtube.com/watch?v=rR6vHY3qYE4#t=1169) for the story.
I think you should try Flask.
[bottle](http://bottlepy.org/docs/dev/index.html). small LOC, single file.
Really? I usually just commit when I have added a new feature or made significant changes. How do you decide when to commit?
I'll second this. Flask is very easy to get started with, but can scale up to some fairly sophisticated sites.
Don't overlook Continuum Analytics' excellent Numba - which is a JIT compiler that can achieve massive and comparable speedup gains to Cython, with minimal effort (a lot of times, just a simple decorator tag at the top of the function you are trying to speed up). I've messed around with both Cython and Numba and have been impressed with both. Numba is great when it works, because it is brain dead easy to use, but if it doesn't work well for your function, it can be harder to get it to work right because you lack the power/customizability that Cython affords you. Cython has a steep learning curve if you want to get good at getting some real speed gains. It is easy to write poorly optimized Cython code and then think that it isn't buying you much performance. I've seen 10X gains over Matlab and regular Python when writing some stuff in Cython. However, I'd also like to point out that sometimes, you can gain more from using Numexpr rather than Cython as Numexpr efficiently uses all cores on your machine and is also amazingly efficient in performing the restricted subset of computations that it supports due to the way it uses processor caches and avoids creation of duplicate, temporary arrays when performing computations. For best performance, I've had a mix of Cython, Numba decorated code, and regular Python + Numexpr code. When Numba works, I prefer it as it makes the code a lot more readable and easier to maintain. At all times, you need to make sure you are profiling your code once you get to the point of trying to eke out the maximum performance. Never try to optimize prematurely. It is amazing how all preconceived notions of problem areas are thrown out the window when you profile your program and find completely non intuitive hot spots in your program. 
please see the edit
For something like function parameters, the convention is to not expect any particular *type*, but instead expect particular *behaviors*. In your case, I imagine you just want something to iterate. I would just call it "servers", and in the docstring for the function just say something like "iterates the given servers", if it iterates.
Thanks, that helps, but it doesn't answer this question: &gt; what protocol does it use to communicate with the application? Now it seems this is very important, at least if the system is exposed publicly. Designing such a protocol is not simple. If it's not exposed publicly, this seems like an inefficient pseudo-SOA architecture, compared to a built-in module to do the same.
&gt;he didn't know about variables.. He says he was probably about 12 years old at the time, after having pieced things together for a couple of years...so I think his being around 10 years old, not knowing what a variable is puts your title in a different context. Not trying to be a dick (still an interesting interview for geeks - thanks for posting). I was just hoping he was like a normal person struggling with Python who had one of those apocryphal AHA! moments, and was suddenly capable of brilliant code. There's nothing *normal* about this guy; this guy literally has programming in his blood. You dashed my hopes brother.
Interesting interview. I thought his comments on documentation were a bit ironic given the low quality of Twisted's docs.
Thanks for your comment. I used Python 2.7.7 for the code. I will update the code for Python 3 soon.
&gt; I usually just commit when I have added a new feature or made significant changes. That's what a feature branch is for ;) 
Commit constantly, to gain the advantage of being able to go back in history if you screw up :) Use one commit for any change you can reasonably describe in a sentence. Correct a mistaken 'name' to 'self.name'? That's a commit. Change a constant value to tweak behaviour? Commit. If you don't like tons of tiny commits cluttering up your master log (and I don't), create a branch for each new feature, then merge the branch when you are ready. Having a bunch of commits has saved my bacon a number of times with stupid edits or accidents.
and also explicitly seek to the end of the file.
I thought about it. But users (being lazy and all that) would likely end up using "subjects" like 1, 2, a, b... and thusly making the hashes much more collision-prone and predictable, making a dictionary-attack possible (waiting for hashes on the network and just downloading everything you can get access to). However saying that it is definitely a problem with repeating transfers: Transferring the same file always yields the same hash.
um, obvious question: did you not suggest doing asp.net instead? cant see any advantages with python when asp.net is being ported to linux by microsoft and most of .net and c# is being made open sourced...(especially when you consider there's already the asp.net MVC framework as well...)
That's awesome. I was waiting for something like this to exist. And like the other guy said, you should put it on PyPI. As easy as (with creds in `~/.pypirc`) python setup.py register python setup.py sdist python setup.py upload
https://code.djangoproject.com/ticket/21604 Due to the lack of this optimization I was forced to concatenate strings twice last week. :)
Typedefs was the wrong word, I meant type declarations. I added lines of the form "cdef float (variable names)" and "cdef int (variable names)". This informs cython of what c types to use in the c code it creates. The total time spent in this function dropped from 2 seconds to 0.2 seconds. As you say, it was a trivial change that led to a huge speedup.
Did you install it from here? https://www.python.org/downloads/windows/ Which version did you install? How are you trying to use Python? The way it's usually done is to open a .py file in your favourite text editor or IDE then when you want to run it, most editors/IDEs have a button or keypress you can hit to execute the current file.
Hi! FYI, /r/pystats exists ;)
Its so pretty *__*
If I run the file your installation adds to my path I get this error: Traceback (most recent call last): File "/usr/bin/rtv", line 9, in &lt;module&gt; load_entry_point('rtv==1.0a1', 'console_scripts', 'rtv')() File "/usr/lib/python3.4/site-packages/pkg_resources/__init__.py", line 521, in load_entry_point return get_distribution(dist).load_entry_point(group, name) File "/usr/lib/python3.4/site-packages/pkg_resources/__init__.py", line 2632, in load_entry_point return ep.load() File "/usr/lib/python3.4/site-packages/pkg_resources/__init__.py", line 2312, in load return self.resolve() File "/usr/lib/python3.4/site-packages/pkg_resources/__init__.py", line 2318, in resolve module = __import__(self.module_name, fromlist=['__name__'], level=0) ImportError: No module named 'main' If I run main.py from the cloned repo it seems to work fine. I have Python 3.4 on Arch Linux. EDIT: For some feedback: It would be terrific if you added VIM bindings for directions. That is h/j/k/l as left/down/up/right.
use idle to develop scripts, or download a proper IDE
You are on a roll, keep it up!
I teach turtle before our first exam. So the students are aware of Python's syntax and some of the basics such as how to use functions like string.upper(). At this point, I haven't taught them how to define functions yet. I ask them to type in "import turtle" at the console. Then, I ask them to type in "turtle.forward(100)" and tell me what they see. The fastest typist will see the turtle and very quickly, the entire room will get excited. I repeat my question, "Explain to me what you see". The point here is to get them to talk and try to get their mind thinking what the two lines of code have done. Next, I'll ask them to type in "turtle.left(90)". Again, I'll ask them what they see. I then wrote the following code into the whiteboard and ask them to type them in and save [1]: import turtle turtle.forward(100) turtle.left(90) turtle.forward(100) turtle.left(90) turtle.forward(100) turtle.left(90) turtle.forward(100) turtle.left(90) turtle.exitonclick() I then ask them what they see. Once the room has their program running, I ask them what they think forward means. I will then explain that the turtle is actually a robot and we are making it move. I also tell them that a turtle robot is expensive which is why I can't demonstrate how the turtle library actually work. So instead, I show them a youtube video of a turtle robot. I point at the first line. I tell them that not everything is in Python. But, there are some libraries or modules that allows a programmer to do things that other people have done. The turtle library is pre-installed so you can use it with the default installer. I then ask them to open the Python documentation and have them find the turtle module [2]. "Class, this is what we call the documentation. If you have questions, you should first learn to read the documentation". I then point at the turtle.forward line. I ask them what it does. After they give their answers, I'll tell them that "100" is the unit of how far the turtle should move. At this point, I'll put my whiteboard marker up, pointing to their right. I tell them that if you give the instruction "turtle.forward(100)", you are telling the turtle to move forward 100 units. I ask them what they think "turtle.left(90)" does. There will be a lot of discussion and I usually give hints that they are looking at the turtle from the top. After a while, I ask them "what is a protractor?" Many will realize the connection. I will them them that we are telling the turtle to move to the left by 90 degrees. I rotate my marker to point to the top as I tell them this. Then, I ask, how did the turtle in your program move? Why? I then tell them that the tip of my marker is the front of the turtle. I demonstrate how the entire code moves the turtle using my marker. I tell them that its obvious, but I ask them to tell me what exitonclick() does. There should be no confusion on this. I ask the students if they understand how the turtle moves and if the box drawing makes sense. I make sure that they understand that a program will execute each line from the top to the bottom. This will be important when explaining functions. Next, I add one new line to the code: import turtle turtle.forward(100) turtle.left(90) turtle.penup() turtle.forward(100) turtle.left(90) turtle.forward(100) turtle.left(90) turtle.forward(100) turtle.left(90) turtle.exitonclick() I ask them to run their code and tell me what happened. I then add a new line to the code: import turtle turtle.forward(100) turtle.left(90) turtle.penup() turtle.forward(100) turtle.left(90) turtle.forward(100) turtle.left(90) turtle.pendown() turtle.forward(100) turtle.left(90) turtle.exitonclick() Again, I'll ask them to run the code and explain to me the effect. I then show the video again and show them the behind the turtle is a pen. The two commands move the pen up and down. Then, I'll ask them to run the following code: import turtle turtle.backward(100) turtle.right(90) turtle.backward(100) turtle.right(90) turtle.backward(100) turtle.right(90) turtle.backward(100) turtle.right(90) turtle.exitonclick() They should be able to understand what the code does, but I want them to explain in their own words. Once I am satisfied that they understand the turtle, I ask them all to make a new program in which the turtle will draw a letter. Any letter will do but if someone has chosen a letter, no one else can submit that letter. I remind them to look at the documentation if they are stuck. I then let them do their work. If someone found the turtle.circle() function, I will commend them for reading the documentation. At the end of the day (hopefully, everyone will be done early), I will show them the example in the documentation. At this point, I also tell them about ctrl+c to stop their script. On the next day, I start introducing the def construct. I take their turtle letters and in front of them, I put their code inside a function. So, for example: def O(): ....turtle.reset() ....turtle.circle(50) Then, I run the program. Naturally, nothing will appear. I then run the functions in the console. O() This is how I introduce how to make functions. But at this point, the turtle library has done its job. Its a shame that I can't justify putting the turtle library into their exams. Many of my students are looking forward to using the turtle but I tell them that if they really want to use the turtle library, they shouldn't look for an excuse and just make their program. P.s. Sorry if this became too long and the writing is a little bit incoherent. If you have any questions, feel free to ask. [1]: I use the format "exercise#xx.py" in their files to give them a sense of progression during the semester. Also, if they save as "turtle.py", they would get a library conflict, so this format avoids a lot of unnecessary complications. [2]: I tell them that library and module are interchangeable. I do this because I know that in the future, they will be using other languages and libraries is the correct term to use.
No way. The Tianhe-2 would have to be in a shared memory configuration vice a distributed (MPI) configuration to allow one process access to all of that RAM. I highly doubt that
&gt; cant see any advantages with python when asp.net is being ported to **linux ** maturity and/or stability of asp.net in linux server at this moment hasn't proven (yet)
There are several installer (and also portable after installed) for python in windows besides the official one. * [portable python](http://portablepython.com) * [winpython](http://winpython.github.io) * [anaconda](https://store.continuum.io/cshop/anaconda) or [miniconda](http://conda.pydata.org/miniconda.html) Both winpython and anaconda are *scientific flavoured* distribution. Miniconda are barebone distribution. and http://www.lfd.uci.edu/~gohlke/pythonlibs/ this site by gohlke is an officially the unofficial site if you want to find binary distribution of python libraries in windows 
Out of sheer curiosity, what kind of algorithm runs for 6 hours on less than a megabyte of data?
I can not tell you how much I love you for doing this. My laptop is not the very best and I constantly struggle with performance problems, when working. Now I can close all those reddit tabs I have going on in the background and stay in command line. Not only does that dramatically decrease my need for alt-tab, but also it frees up used RAM memory. Thank you, thank you, thank you :)
I can't find sources for Tianhe -2 or Titan, but in my experience with top 100-300 machines, numa is used for local (e.g., same motherboard) processors and not for arbitrary located processors. 
Wait need to upgrade my python :/
Really nice, I would have been very happy to make something like that when I was a beginner. Just a few improvements you might want to consider if you continue to work on and improve this. Typically it is considered more pythonic for method names to only use snake_case and not camelCase. Though that's a very small thing and I don't want to start a style war, it does help other programmers quickly read your code. Your terminal processing is quite nice, you might even want to reuse it on other projects. To that end, I would recommend splitting it into a separate class (perhaps called Terminal) and only exposing a few methods which handle the actual printing. I've created a quick gist [here](https://gist.github.com/anonymous/e39546b82236c2e039a8). I don't have python installed at the moment so I haven't been able to check if there are any syntax errors, but it should give you a general idea of what I mean.
Thanks for this awesome project! It would be great to add some kind of dotconfig file (login, password, default subreddit, so on) in the future. WDYT?
There is a lot of room for support code on top of the basic PEP mechanism. Hopefully eventually we will get a libc extension to allow dlopen on part of a file so the extensions don't have to be extracted before use. The extensions could be uncompressed at page-aligned offsets within the zip file and opened directly. https://sourceware.org/bugzilla/show_bug.cgi?id=11767
This would be lovely. Not going to happen on windows though, not without entire custom loader.. Oh well, who cares about windows :))
We work with a neural simulator with a few core functions which compute dot products and learning rules. We basically use Cython to interface with the optimized C code we've written. We use the numpy C interface, some fancy slots and pointer arithmetic to get 10x speed ups and make use of the OpenMP pragma to parallelize the code. Getting it all working was fairly straightforward. 
Woah the password is not hidden on entry? I can't agree with that decision 
you may find this useful: https://www.youtube.com/watch?v=q0YqAbI7rw4
[Django](https://www.djangoproject.com/): - **Great** documentation, extensive, and well written. A landmark for open source projects. - Gigantic community, almost everything you need/want to do is already done. - Built-in admin interface that gives you CRUD for your models. - Great ORM with optiona coupling via ModelForms that help you kickstart your app in no time. - Single packaged dependency that gives you a lot of tools baked in. Flask is nice and simple but django is way ahead of the curve. Edit: I know you say you tried. But I wanted to point out that the apparent complexity in the kickstart is a win on the middle run, as it enforces a clearer architecture and you end up with a saner project. Flask is more "you are on your own" which is sometimes nice but most of the time ends up backfiring.
Until that happens, anyone can still install it via pip: $ pip install git+https://github.com/michael-lazar/rtv.git
I imagine it's temporary. You have to do: Rtv -u username -p password Which because you're inputting on the command line is Normal text and is stored in the history etc. 
Does it make it into the history if you pipe that from a file?
Django. But I agree, there are a lot of files to deal with at the beginning. That's why so folks advice Flask. But no, Django is the best ! (I don't like Flask, so many things must be written and configured when they come out of the box in Django). So what should we do ? Try Importd ! http://importd.readthedocs.org/en/latest/ D is for Django. This is a pure Django but minimalistic framwork à la Flask. There is no settings.py or urls.py, nor is there a need of manage.py (but you can add them when needed, it's Django).
Simple is good for learning in this case. OP gets to do everything himself, that's the best way to learn about web dev. With Django you have a powerful framework and your able to build web applications very quickly but at the end you don't learn how to do it without Django. Flask knowledge is more general in my opinion.
I think the best best as a workaround now, would be to alias the command, and make sure it isn't your password for anything else. 
There's no apocryphal AHA! moment, just work. If you're holding out hope that one day the blessing of the code gods will come upon you, then no, stop holding out that hope. :) Just think, Guido van Rossum didn't write a line of Python until he was in his 30s.
I don't know... With flask is easy to pollute your code with a lot of boilerplate syntax, decorators are cute but start to get messy with non trivial projects. Django, albeit a little more complex to kickstart encourages practices that enforce a more maintainable project. Django's start scripts also help you with the boilerplate to a point that you can almost forget about most of the scaffolding.
I submitted a pull request for the password snafu.
Thank you. I'll sure take you up on that :)
I highly recommend Miguel Grinberg's ["Flask Mega Tutorial"](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world/page/5) for learning flask.
Agreedious 
I use Winpython on my windows machine, but i use anaconda on OSx and linux for its superior package management.
Why is this important?
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
I found these playlists: * [Kivy Application Development](https://www.youtube.com/playlist?list=PLQVvvaa0QuDe_l6XiJ40yGTEqIKugAdTy) * [Kivy - Zero to Hero](https://www.youtube.com/playlist?list=PLsmvQrVhKi6KeqrhqHZIaDiRqazt5_aia) * [Kivy crash course](https://www.youtube.com/playlist?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq)
As a Kivy developer my somewhat biased opinion is...yes! In particular, I think it's an excellent replacement for pygame. It's *different* for sure, with an opengl oriented graphics api (though highly abstracted from raw opengl) that means you have to do some things in very different ways to pygame, but it's also probably vastly faster when used properly and more modern. Plus it has the widget system which is higher level but convenient even for games. As an alternative to tkinter, there are more questions, with the answers depending on exactly what you really want. A disadvantage of kivy is that it will *not* look and behave native on any given platform - you can get a long way with careful styling/themeing, but it's just not the focus of the toolkit. This is very important to some users, in which case I wouldn't recommend it, but not important for others, and that's up to you. Assuming you mention pygame because you're interested in making games, I wouldn't normally consider this an issue. And to be extra clear, since you mention it 'seems to have' support for smartphones, I'll confirm that kivy certainly does support android and iOS. Edit: &gt; Are there any good tutorials for it other than the ones on its site. I made a series of (mostly video) tutorials that people seem to like, which you can find [here](http://inclem.net/pages/kivy-crash-course/).
Yeah, it specifically would be useful for setting up sandbox environments for education or tutorials. You don't have to worry about what OS people have, etc. You setup a server that spawns a new sandbox for each user than reaches out to a URL. I didn't want to hammer [tmpnb](https://github.com/jupyter/tmpnb), so didn't call it out too much. This would be used with tmpnb or jupyter hub to provide the user a web-based environment. If you go to [the tmpnb demo site](http://tmpnb.org), it'll spin you up a personal sandbox to play with. The issue I had was that I wanted to leave the flexibility to install new packages if you don't have exactly what the user wants available. The way that tmpnb works is that it will consume the sandbox after a set period of time, so there are always fresh containers available for people to make use of. Anaconda-Notebook is an alternative image that you could use to stand up your own tmpnb server.
&gt; I've found that they behave inconsistently across platforms. This should not be the case, are you able to report a bug about it?
No problem. I saw a similar topic to [this](https://lambdaops.com/ipythonjupyter-tmpnb-debuts/) by Matt Kelley at PyTennessee and have been working on it since. If you'd like to build on it, I tried to provide a little info in the readme for how to do that. You'd likely be able to just use: FROM rothnic/anaconda-notebook in your dockerfile, then a series of statements, like: RUN PY3PATH/conda install &lt;your_gis_package&gt; This reminds me that I should probably outline in the readme the persistent environment variables that are setup, and I should make CONDA3 and CONDA2 persistent. I use them in install.sh, because I found it easier to use absolute paths in the DockerFile, since you are root during the build process.
Keep away from Django. It will teach you to tightly couple your logic, presentation and persistence.
Not now, no. This was a while ago... but it was after the last stable release, so I've never tried again. IIRC, I tried resorting to the OpenGL library because I was unsatisfied with the high-level graphics API's performance. The OpenGL documentation was basically "Go look at Khronos' website.", which is super-helpful when programming in Python. Needless to say, the experience was... not good... I use Kivy for simple mobile applications. It's an awesome experience, so I'm not trying to be anti-Kivy, here :)
We have in fact been following up with Cython development about this issue, our initial impression was that this is a bug, however it looks like we will probably be ~~adjusting our codebase~~ discussing with cython development the implications of this change. It is important to note that this is expected and basically regular with Cython breaking previous code on nearly every version. Kivy usually tries to keep pace with Cython changes although it is always a matter of timing releases. The change you see in this issue is about further increasing feedback so new users that try to build with the wrong version of cython get a helpful error instead of nonsense. Kivy will exist all year and so will Cython and both will be in development meaning that they don't always match up. Finally 'dont care to support latest cython' and 'takes longer than 2 weeks to get everything rolled up' are very different allegations. Cython 0.22 released less than 30 days ago, Kivy has been around for 8 years and in almost all of that time, but definitely not all of it, has been compatible with the latest Cython. 
Magical! How scalable is it? If I have a class of 40 students? 300? And what level of persistence does it have, can they save or load their session and files easily? Couldd I have it synch with a git repo or some other server so I can review their code at will? Sorry for the questions, I teach non CS majors and am curious about how suitable this is for my purposes.
Thank you for the clarification. I hope you understand, where my concerns come from. A WONTFIX for a problem in the current version marked as stable of a dependency has been too often the first sign of trouble in FOSS projects I have been looking at.
I've just had to add all the missing except clauses to my own code, really bit of a nuissance. The problem with kivy code seems to be functions returning void with a except * clause; Perhaps you can use functions returning int with except -1 (and return 0 on success). This is what I use, should be a tiny bit faster as well.
I meant that when you `zput my_holiday_pictures.zip`, the program would generate a random code and print it out, so the user doesn't have to pick it. You just read off your terminal to your friend. Of course, if it's cheap to check for a file, someone could just be opportunistically trying as many codes as they can. But that's true with filenames as well - they're not that high entropy.
No doubt, but the "made with &lt;3" (without or without "in San Fransisco") gets really old. Just check HN now and then.
This is a bug in the python standard library. http://bugs.python.org/issue21088 Do you mind if I ask the full version number of python that you're using?
Absolutely! Its already hooked into PRAW, I think the hardest part would be keeping the interface clean and simple.
Here's how I tend to do such things from concurrent import futures import time import random as rn def forked_process(inbound_num): print 'we are in forked_process with', inbound_num time_sleep = rn.randrange(0,10) time.sleep(time_sleep) return(inbound_num) def main(): my_list = [] for x in xrange(5000): my_list.append(x) with futures.ThreadPoolExecutor(15) as pool: futures_pool = [pool.submit(forked_process, each_thing) for each_thing in my_list] for future in futures.as_completed(futures_pool): print 'back in main with', future.result() if __name__ == '__main__': main() 
Matt, who presented/built tmpnb, said that they had something like 20,000 active users at once. He works at rackspace, so it was just a matter of having enough resources behind it. He gave each user 512MB of ram. He recently worked on a [google drive connectivity](https://github.com/jupyter/jupyter-drive), which looks like it is progressing. It seems like this might be the best route for non-cs people. They could share the completed notebook when finished, which you then collect through google drive. I left git installed in this image, so another option would be to provide some menu option or something to sync a git repo, then commit the changes back out. The tmpnb server lets you set the timeout before the container is destroyed to whatever you want it to be. If you want persistent containers, then I believe that is what [Jupyter Hub](https://github.com/jupyter/jupyterhub) is for, but I haven't used it yet. I've noticed there is some work on [automated grading of notebooks](https://github.com/jupyter/nbgrader) as well.
I think that's a great idea, make an issue in github!
Twitter handles over 500M tweets per day and billions of API requests per day. With the current rate limiting Twitter does all that AND you can see your tweet posted within seconds. So, I wouldn't say rate limit is killing anything. Just the opposite. :)
Thanks! I'm currently using a post install script for this too, but I was hoping there was a more elegant solution built into setuptools or something.
He asked for threading. Your example spawns multiple processes. You should at least comment on this.
You follow the OP's question by providing a threads-based solution. But why are you calling your worker function `forked_process`? Seriously, spawning a thread is so very different from forking a process.
frickin awesome!
https
Do `$ env python --version` and `$ python --version` return the same value? You could also try to change the first line to read `#!/usr/bin/python`, or whatever `$ which python` returns.
Trying to do 10 different things at once. I going to start down the forking path but changed my mind.
I am using Raspbian (Raspberry Pi) and env works.
Are there any screenshots you can provide?
Looks like you're running an older python without setuptools. If your machine has a newer version of python as well, you can try $ sudo python3.4 setup.py install Otherwise, you can follow the instructions at https://pip.pypa.io/en/latest/installing.html to install pip 
Edit: I didn't read your post properly. The answer below is wrong, but I can't delete it from my mobile. Sorry for the misinformation. ---------- . Sounds like the issue is with your code, not with you making it executable. Try writing a one-line test program containing only a print statement, making it executable, and running it as before. I'd expect it to work fine, which would indicate that the issue is not with running the program but rather with your flask app. Assuming the test above worked and the program ran, you'll have to debug the code of the flask application to see why it's not serving your page. Feel free to post your code here if you get stuck.
See my edit as I included the beginning of the script.
No problem, I figured you just hadn't read it carefully.
The best book is C++ Primer 5th edition, the best reference website is en.cppreference.com.
C++ is my favourite language. I have four books for you. 1) Exploring C++11 by Ray Lischner http://www.amazon.com/Exploring-Experts-Voice-Ray-Lischner/dp/1430261935. C++ is extremely complicated and this book will help you get up to speed programming with C++ and also understand it. 2) Programming Principle and Practice: using C++. http://www.stroustrup.com/Programming/. Even though this book is for beginners even seasoned programmers from other languages will gain huge insight for using/programming with C++ from the C++ creator himself. 3) The C++ Programming Language 4th Ed. Everything (99%) you need to know about the language is there. You can use it as a tutorial or reference. 4) Effective Modern C++ by Scott Meyer. As I said above C++ is complicated and quirky and the info in this book will help you understanding some of the language's 'subtleties'. Other links: The home of Standard C++ on the web http://isocpp.org/ . Nice onlice reference http://en.cppreference.com/w/cpp. Bjarne Stroustrup's homepage: http://www.stroustrup.com/. Of course there more books I'd recommend and more links but these I hope will get you started. Get Exploring C++11 first!!
[/r/cpp](http://www.reddit.com/r/cpp) maybe?
does this work for all git projects?
That's probably a good idea. I'll post there too.
I have Python 3.4.3. Which is weird, since that issue looks like it was resolved in 3.4.0. I've gotta ask -- are you planning to add features such as voting and commenting or is this going to be just a reader?
See my final edit in original post as I got it working! thanks for the help.
Yes this should work with all git projects ([other popular VCS are supported as well](https://pip.pypa.io/en/latest/reference/pip_install.html#vcs-support)). If your package dir is somewhere beneath the repo root, you might have to [jump through a few more hoops](https://pip.pypa.io/en/latest/reference/pip_install.html#examples) but it is still possible.
"How do I bake a cake?" Well, first you need to learn how wheat germinates.
TL;DR: you can put constant values (like references to global or builtin variables) as default values to function arguments so they're loaded from `locals()` instead of `globals()` which is *way* faster since loading from a local is just an array index and loading from a global is up to 3 hash table lookups. An optimizing compiler could probably do this sort of thing for you, but in an interpreted language it's hard.
Worked like a charm, thanks! If you don't mind me asking, are you thinking about adding a up/downvote and commenting mechanism? 
I've been working with arduinos a lot lately, and while I acknowledge that arduinos are coded with a C++ "like" language, it has been a worthwhile learning exercise to get used to the syntax etc. Something to consider as arduinos are great fun. 
Take a look at [OpenCV](http://opencv.org/) Python tutorials: http://docs.opencv.org/trunk/doc/py_tutorials/py_tutorials.html Specifically, to read a video from a file: http://docs.opencv.org/trunk/doc/py_tutorials/py_gui/py_video_display/py_video_display.html#playing-video-from-file I'll let you explore the rest.
Django is just like flask but someone spend a bunch of time automating the tedious shit like user registration and database stuff and templating. If you already know that shit then django is just more efficient. If you're learning then do it all with flask first then switch to django when you are ready to bust shit out.
Good point
If I were you (i.e., someone with professional programming background), I'd read the following in order: * "A Tour of C++" by Stroustrup. A brief overview of modern C++. * "The C++ Programming Language" 4e, by Stroustrup. The most in depth readable reference on modern C++. Once these are done, read the books by Scott Meyers on Effective C++. Also skim through the Boost libraries.
Glad it works!
I think I might finally get it now...
I thought arduinos were coded with a C like syntax
Thanks for the advice, and the gist too :)
Guess so, sorry, noob mistake. I thought requests already include in python standard library, since it sounds like one.
I think the 4th edition of this book was the first intro to programming I had. It's kind of terse, but strangely a very enjoyable read. This book is still probably my favorite programming book I have read, though I'm not sure if it's due to nestalgia or if the book is just that good.
It's written for C++11.
The way I learned was by playing around with OpenGL. Even simple 2D stuff with textured quads is pretty challenging for a beginner, and you will learn *a lot*. Highly recommended. https://open.gl/
Someone already mentioned H. Sutter and the books are nice, but I highly recommend also his "[Guru of the week](http://www.gotw.ca/gotw/)" blog. Very nice approach and lots of interesting info
I started C++ the same way I learned Python, by making a roguelike. I still use www.cplusplus.com and read Effective C++.
I'm amazed that no-one has mentioned this. The absolute best book for you is [Accelerated C++](http://www.amazon.com/Accelerated-C-Practical-Programming-Example/dp/020170353X) by Andrew Koenig and Barbara E. Moo. It is targeted at people who already know another language, especially Java or Python.
Wow, 938 pages.
Wonderful!
thanks, Im not very good with reddit in general :)
Can you walk through the steps you're trying to take? Maybe a comment on each line saying what you expect it to do? You are getting the user input and splitting the string reasonably correctly but after that it's unclear what you are trying to do. For formatting, four spaces before each line will make it monospaced like I've done above.
I know this question is about C++.There is /r/cprogramming but it's tiny. Does anyone know if there's a decent sized sub for C on Reddit? edit: Nevermind, it's /r/C_Programming. (in case anyone else is wondering) 
No book is truly flawless, but do you think it matters that it has been around since the 80's? (or could these online ones listed be newer editions). I hadn't heard of this book until now. edit: it does look like there's a copyright date towards the beginning as well of 2013. 
Getting a degree 
It's been updated quite regularly. The first version I got was the second edition and I found it to be excellent at that time. I recently picked up the fifth edition to get up to speed on some of the newer features. Plus, I did my Master's in the same lab as Josée so I support her when I can. She used to be a member of the C++ standardization committee when she worked at IBM, so she has excellent knowledge about C++.
There isn't great support for C++14 by the compilers at the moment (even C++11 doesn't have full support by some compilers) so its exclusion isn't a big problem. I expect that there will be a 6th edition in the next few years covering C++14.
Dive into Python is pretty good too: http://www.diveintopython.net
There is also /r/Cprog, where beginner questions that get asked a lot on C_Programming are not allowed.
In a terminal, run pydoc. Browse to the local web server and read. It won't teach you to program, but it will tell you about the modules that are installed, and you will need to know the standard library after you learn syntax. 
Here is a direct link to the [GitHub repository](https://github.com/drvinceknight/Axelrod/).
There is so much information available on the internet: https://stackoverflow.com/questions/26556667/super-anagram-solution-aok Also, this is a homework question. 
I refuse to help people who can neither read nor google
- The Python 3.4 interpreter - Make sure pip works correctly and install some standard stuff like ipython - For web apps, install flask - Install PostgreSQL, psycopg2, sqlalchemy 
/r/learnpython please
Personally I use both selenium and scrapy. I think the main reason is because Selenium is extremely slow and has so many holes since it's a tool for web testing rather than web scraping.
The great thing about these two books is they complement each other. While you're reading Tour, it'll often refer to specific parts of the TCPL book for a more comprehensive explanation.
You can't do it with PIL, but you could use something like [imageio](http://imageio.github.io/), which I believe is used inside moviepy for reading files.
And even in environments where C++14 (or even C++11) is supported, that doesn't mean that the company you're coding for is happy for you to use all those features. The newer the feature, the less likely everybody will understand it adequately.
Here is a lot of criticism/gotchas in one place, probably worth a read to avoid being bitten too many times: http://yosefk.com/c++fqa/
It is a good question, and the answer is not straightforward. Splash is a bit crazy, it has all the bad ideas implemented: write a semi-clone of super-popular mature projects like PhantomJS or Selenium? check. Integrate 4 different event loops in a same process (PyQT, WebKit, Twisted, IPtython ZeroMQ) - check. Embed two different scripting engines (Lua and JS) in a third scripting language (Python), with complete bidirectional data flows and garbage collectors working in parallel, and add C++ code wrapped in a PyQT-specific way to the mix? check. Use a non-popular language (Lua) as a main user facing language? check. Use an in-process sandbox? check. Create a custom parser for Lua in order to create an autocompletion engine? check. Splash started as a simple screenshoting service with HTTP API. It had a pool of workers by default, so it can process multiple web pages in parallel, and they can share the same in-memory cache which is important if you render multiple pages from the same website. A separate stateless service is good because a Scrapy spider doesn't need all these hard-to-install dependencies, and because it is easy to scale if the performance is not enough. Another benefit is that there is no start-stop overhead. The rendering part is quite easy with PyQT + QWebKit; add a Twisted (in the same event loop) + a pool of workers - you get a first version of Splash. There was no reason not to implement this :) Then features started to creep - once we can return a screenshot why not return a rendered HTML (after js processing), once we get rendered HTML why not return information about iframes, etc. There are easy to use HTTP endpoints for these tasks. It then become a bit too hard to accomodate for all use cases in a predefined set of endpoints, so we added scripting support. When you run a HTTP server and want to add scripting support you probably want some kind of sandbox; this is almost impossible (well, there is a pypy sandbox, but it is hard to use) if you go with Python as a scripting language. So we went with Lua; in addition to ok-ish sandbox it provided other benefits like coroutines support - this allowed async code to look like sync code. Currently the scripting engine doesn't expose many common user-facing helpers (like Selenium or CasperJS do), but it provides most basic "building blocks" - you can control the browser and execute JavaScript code. These building blocks are intended to be "sane" - for example, it is very hard to do some basic things like checking if the response is 200 or 404 both in PhantomJS (+ all its wrappers) and in Selenium; Splash returns an error indicator for 404 responses. Or let's say you get a HTML of a page somewhere, and you want to load it in a browser and take a screenshot. phantom.setContent in many cases won't work as expected because it doesn't wait for related resources to load; splash:set_content waits by default. There are many such small differences. Currently a lot of PhantomJS and Selenium features are missing, but because of these differences I still think it worths it to continue making splash scripts more powerful. There are some other cool features - for example, Splash provides a custom IPython kernel for Lua. You start IPython notebook, create a notebook with Splash kernel; after that it shows you a real browser window connected to the notebook, and you can execute and debug Splash Lua scripts using a familiar IPython notebook interface. You enter splash:go("http://google.com") in a notebook cell, execute it, and the browser in a window goes to this url. This window also has web developer tools enabled, so you can inspect the current HTML contents and e.g. copy-paste CSS selectors. The notebook provides smart Lua autocompletion with inline help; this custom Lua autocompletion engine is in some cases more advanced than what you're getting for Python in IPython notebook; in some cases Python autocompletion is better, but generally they are on par. So you can develop a script in this notebook, then clean it up and use Splash HTTP API to execute it in parallel for many URLs. Sometimes scripts run slowly; to debug it there is a web UI with a chart/timeline similar to Network tabs in Firefox/Chrome, with vertical bars for various events (e.g. "page is loaded, screenshot is taken"). Of course, you can implement something similar using PhantomJS or Selenium, but Splash is different enough, and we're using it already, that's why the development continues. Implementing all the things in non-compiled languages has some advantages - for example, we can run all 1000+ unit tests after each commit using Travis CI; this is harder for projects like PhantomJS - to run PhantomJS tests you need to compile a custom QT fork which is slow.
Thanks, I didn't know Selenium was slow. Reading that Splash is based on Qt is a bit frightening though O_o
Since I don't think anyone has mentioned it yet, just wanted to let you know Unreal Engine 4 just went completely free (well, profit sharing) so you could download the entire source for UE4 and look/play yourself as you check out these resources others have mentioned.
Not as quirky as some others. Have you Javascript yet?
I will second this and add: Accelerated C++ is the one book that teaches you C++ without trying to teach you C first. It teaches you C++ idioms from the first chapter.
/r/flask please
It seems like the need for parallel processing has been ignored by many of the posters here. The more I've read in this thread the more I think Python might be a mistake. You run the potential of having worst performance. I'd seriously consider moving to a compiled language, especially one that supports GPU processing well. However, there is a big if, do you know for sure that your algorithms parallel well? More so is the code suitable for GPU processing. Only you can answer the questions, but if your code can't be accelerated by an existing Python library performance could suffer. It comes down to how much time is wasted in the interpreter which is probably the same problem seen in Matlab. If you do need a compiled language in my opinion you are better off learning C, C++, Fortran or whatever fits best than spending time with Python. Ideally you will get formal training in one of those languages. Deciding on a language here might be a case of going with the one that has good library support for the code you want to write or GPU programming if that might work for you. However I'd strongly lean towards modern C++ which sadly isn't supported well on Windows. Here is the thing, to get rather good at writing performance demanding code requires a strong background programming / computer science. This requires a solid formal education or a very strong ability to self teach. Your code won't be high performance on your first attempt and likely not even on your tenth. There is a reason that professional programmers with experience are coveted for tasks like this. In other words to significantly enhance your softwares performance will require you to think more like a professional programmer. In any event all this talk about compiled languages is a big distraction. Anybody seriously involved with technology these days should be using Python. So learning Python is mandatory in my mind even if it can't support your kernels performance wise. It is such a useful tool that I can't imagine it not being taught to engineering students of all types. Most engineering schools don't seem to agree with that stance yet though. In any event I've seen a couple of mentions of Eclipse with PyDev installed. In my mind this is one of the best IDE solutions going for Python development. I've played a bit with iPython too, but it is much more of a works in progress for writing code and frankly has different goals than a good IDE. That being said IPython might fit in better with your development needs. As for Python itself I strongly recommend going with the latest of the 3.x.x series. A counter argument would be if you absolutely need a library only supported on the 2.x series. Like C++14 Python 3. is the way of the future. I will probably get flak for this but I really see Mac OS or LINUX as better places to develop with Python. This especially if you need to drop down into the world of C/C++, fortran or other compiled languages. The Windows environment just lags significantly when it comes to new compiler technologies, it is for example a real pain to even get CLang running on Windows. 
I refer you to the [Javascript equality table](https://dorey.github.io/JavaScript-Equality-Table/), and I'm not sure if even God could help you there. :)
Sorry I wasn't sure if this was a Flask-specific issue or a Python issue more generally. 
Hi. I'm a python noob. Is there an easy way to install it that automatically updates it if a newer version is found? If not, is there an easy way to update it after some easy way to install it?
Very cool. You should consider cross-posting to /r/evolution or /r/alife or /r/simulation.
video?
Do you mean the program you wrote closes when it finishes executing (console version I presume)? If that is the case try adding a raw_input() at the end of your code and try it again?
Yes, `int` and `except -1` is faster than `void` and `except *`. But both are slower than not handling exceptions at all, which is what the majority of the `apply()` methods do. The change in Cython requires us to add exception handling to every `apply()` method because a couple of the derived classes do so, and this wasn't the case in 0.21.
I'm doing a scraping project in python. I'm using BeautifulSoup (bs4) to parse. There are many resources online. I'd start with their docs. Some caveats: it appears that the lib overrides str(). Use someobj.__str__() instead. Also be aware of encoding. I may be wrong, but bs4 will give you unicode objects when you extract text. (I'm on mobile, can't check my code atm)
Oh man this is so cool! Definitely would love to see this in action. OP, please deliver. :P
Could you explain why that would be or if it is better than: try: from httplib import OK # Python 2 except ImportError: from http.client import OK # Python 3 response = requests.get("") # Assuming you only care about 200 OK if response.status_code == OK: pass Granted, it's more code for something short but I also find it more explicit and generalized. If you're working with more than requests it also translates a little easier I think.
In case nobody replies and you find out how, please reply yourself since me or more people would like to know the (possible) solution!
did you check the success code? success, image = self.video.read() It could be a reading error from the camera.
I'll check that out. This is my first time using OpenCV so I was hoping I could just get this working without having to become proficient in OpenCV but that rarely works with programming :). Thanks for your input. 
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Send me a message and I will give you a link to my project. I scrape game stats from ESPN.com. You can tweak it to your liking. 
if its using ajax, you may be able to find out the data endpoints and call them directly, use the network tab in Chrome to investigate it.
&gt; \# Assuming you only care about 200 OK That's the problem I have. There's a [number of 2xx](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success) status codes that indicate success. You could do something like if 400 &lt;= self.status_code &lt; 500: http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason) elif 500 &lt;= self.status_code &lt; 600: http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason) if http_error_msg: raise HTTPError(http_error_msg, response=self) but then you're just rewriting `response.raise_for_status()` (literally; I copied that from the `raise_for_status()` function). If the API you're using has specific cases that need to be handled for various 2xx codes, then definitely use the appropriate action, but if you're just wanting a generalized "did this request succeed?" check, why rewrite code that the library you're using has already written for you?
Whats the correct way to use image assets from an MIT licensed project? I noticed the logo (well part of it) from the [Django REST Framework](http://www.django-rest-framework.org) in the article without mention of where it came from.
Replacing the hard-coded "200" in the article with a symbolic "OK" is much better. Someone reading the code doesn't have to look up what "200" means. And if "200" changes someday, you're covered (or will at least have less work to do to address the change). It's probably not too likely that this exact code will ever change but it's good practice. Using a member function to check the error code adds more abstraction and this case may be more important. The article and your comment both give examples as to how: &gt; Unless otherwise noted, all actions return 200 on success &gt; \# Assuming you only care about 200 OK Maybe one day you end up using an action that returns something other than 200. Wrap this all in a member function and you only have to update your code in the function. The rest of your code will be ok. FYI: Maybe you know this and were just keeping the code simple here but stripping the namespace off "OK" ("from X import OK") is risky. If another import also has on "OK" the last one imported will clobber the first one silently. That can lead to some nasty debugging. Keeping the namespace, eg: import httplib ... if response.status_code == httplib.OK: avoids this. In this case, the namespace is different for py2 and py3. If all the "OK" code is in a member function, dealing with this is much cleaner.
 &gt;- Install PostgreSQL If your just learning/playing around look into using SQLite. It's a bit lighter weight and easier to get started with (embedded vs running a separate server).
IPython is awesome. 
they need to fix their ssl cert
I hopped into Kivy recently. I've only had a pretty short stay, but I would rank Kivy as superior to Tkinter for sure, as well as superior to PyGame, just in the development category alone, regardless of the cross-platform deployment. Adding in the deployment possibilities, and Kivy has got to be one of the most under-rated Python modules to-date IMO. Someone else linked to it already I saw, but I have a brief basics Kivy series so far here: http://pythonprogramming.net/kivy-application-development-tutorial/ I will add to it likely in time, I think the module needs far more play than it gets. Deployment to mobile is a PITA, however. That's probably the biggest learning curve for the module at the moment, I hope this improves in time. 
&gt; You see, we have covered a lot of important ground here… solidly rooted in modern engineering best practices. Just a gripe but with any API integration it is important to be able to test your code. Interesting to see if the author plans to cover the various techniques on offer to test API integrations.
Thanks, I just [cross-posted to /r/evolution](http://www.reddit.com/r/evolution/comments/2xtdco/short_history_of_the_iterated_prisoners_dilemma/) but I am not familiar with the conventions of the other two communities. You are welcome to cross-post there (or anywhere else) if you think it is a good fit with the subs' interests.
You're already able to write code, so a good way to learn a new language (imho) is go straight forward following working examples with constant reference of the language documentation. Probably I'd begin writing small python extension modules in C++. This also adds immediate value to your python expertise.
Didn't you just fork this from someone else? Whats the difference?
I'd be surprised if Amazon didn't have an API you could use instead of web scraping. It might be worth looking into...
&gt; but stripping the namespace off "OK" ("from X import OK") is risky. If another import also has on "OK" the last one imported will clobber the first one silently. I don't disagree about the possibility but, at least on the teams/projects I work with, we have strict coding standards that break the build when you try something like that (and variable names should generally be more descriptive). If that doesn't catch it then the pre-commit code review would. Not all teams have those practices though in fact the majority probably don't so making it harder to make the mistake in the first place would be the right thing to do.
Anything but xml. But if your REST api is sane and documented then it is not necessary or beneficial to have a client library. IMO
From what you've said, I think what you're calling an 'SDK' is what we'd normally call an 'API wrapper' - a Python module that handles making requests to a webservice and parsing the response. Right? If the webservice is returning XML, your API wrapper should either return the XML (parsed into something like ElementTree), or a custom object, if the wrapper 'knows' about everything that the response can contain. If you were designing the *webservice* itself, you might want to pick JSON over XML, but if someone else has written the webservice to respond with XML, your wrapper shouldn't try to translate XML to JSON.
Thanks for the feedback. It is a wrapper and I will be adding other functions that group multiple API calls into convenience methods. I am trying to figure out what would be more popular with developers. Having the option to return JSON, XML, or some other object is a given. I am curious as to which one specifically would be most helpful and more widely adopted.
You can't be serious ... read this: http://haypo-notes.readthedocs.org/python.html#python-3-is-better-than-python-2
Also that check should be done within the functions that perform the requests, and they should return the json object, not the http response.
How short does your feedback cycle need to be? If you don't need a short feedback cycle, I think it should be possible to spin up a vagrant or docker instance with redis running (in some initial state), and then run your tests there. It should also be possible to shut down redit and start it back up in your vm/docker instance within the setup/teardown methods.
I was hoping someone would chime in with that. Can you point me to any articles or whatever that discuss non-HTTP RESTful APIs? Thanks.
Oddly enough I have a module at work we just open sourced that makes this pretty easy https://pypi.python.org/pypi/redislite/1.0.12 Essentially it's a python module with an embedded redis server and extended versions of the redis.Redis() and redis.StrictRedis() classes that configure a redis instance on init and shutdown/remove them on exit. There are also functions to patch/unpatch the functions to use it with existing code. So a unit test class can patch in setUp() and each new Redis or StrictRedis object will get a new instance of redis (it's own redis server and configuration). Then unpatch in tearDown() to restore the normal functionality. So having setting up and using 2 redis instances looks something like this: &gt;&gt;&gt; from redislite import Redis &gt;&gt;&gt; connection1 = Redis() &gt;&gt;&gt; connection2 = Redis() &gt;&gt;&gt; connection1.set('key', 'value') True &gt;&gt;&gt; connection2.set('me', 'too') True &gt;&gt;&gt; connection1.keys() ['key'] &gt;&gt;&gt; connection2.keys() ['me'] &gt;&gt;&gt; connection1.get('key') 'value' &gt;&gt;&gt; connection2.get('me') 'too' &gt;&gt;&gt; 
For those on the other end of this, I've found flask-resetful to be a great library for writing REST APIs.
I'm not even a new programmer and wish I knew about those. Thanks!
What in the hell? A library that uses six for py2&amp;3 compatibility is now automatically ugly and should be avoided? What the heck drugs are you on? I'll formally request you to stop using pip, and urllib3 or requests, or dateutil, given their ugliness means they're beyond usability.
AsyncIO is pretty nice. I use it for a Twitch bot, monitoring and managing thousands and thousands of users simultaneously. A good list of current libraries built on top of it: http://asyncio.org/
Fixed, thanks for the heads up. 
It's had many a re-writing in most parts of the book since being originally published. I believe the 4th edition was the largest, and the 5th mainly to introduce C+11.
If the object mapper is using the redis.Redis() or redis.StrictRedis() objects to access the redis instance there's a patch/unpatch function to replace the normal Redis()/StrictRedis() classes with the redislite enhanced versions. So for example after running redislist.patch.patch_redis() Modules like redis_collections will use the self configured redislite instance instead of expecting one to be running. Python 2.7.5 (default, Mar 9 2014, 22:15:05) [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import redislite.patch &gt;&gt;&gt; redislite.patch.patch_redis() # This is what you'd probably run in unittest.setUp() &gt;&gt;&gt; import redis_collections &gt;&gt;&gt; td = redis_collections.Dict() &gt;&gt;&gt; td['foo']='bar' &gt;&gt;&gt; td.keys() ['foo'] 
Thanks for the suggestion. I'll consider it for part two - or, if it goes that far, part three.
Using [nose](https://nose.readthedocs.org/en/latest/), you can have module-level setup and teardown functions. You might also save a little manual work/time by using something like [watchdog](https://pypi.python.org/pypi/watchdog) to monitor your source directory for changes to .py files, and run your tests automatically (in a terminal you keep off to the side but visible). Finally, you may be able to speed up your tests by using a library like [vcr](https://github.com/kevin1024/vcrpy) to record real responses from redis, and then play them back for your tests.
It's really hard to find... [I think this is a good example](https://datatracker.ietf.org/doc/rfc7252/?include_text=1) of a non-HTTP RESTful API. HTTP is just so easy to expose and use. There's no need to poke holes in a firewall and it's easy to cache responses. It's a good protocol to work with. However, you can easily build your own, if you want to play around or have a good reason for it. Most tutorials that focus on the key guidelines will work. Roy Fielding says that it must be hypertext driven, and defines hypertext as: &gt;When I say hypertext, I mean the simultaneous presentation of information and controls such that the information becomes the affordance through which the user (or automaton) obtains choices and selects actions. Hypermedia is just an expansion on what text means to include temporal anchors within a media stream; most researchers have dropped the distinction. &gt;Hypertext does not need to be HTML on a browser. Machines can follow links when they understand the data format and relationship types. his rant: http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven some resources: http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm http://en.wikipedia.org/wiki/Representational_state_transfer http://www.restapitutorial.com/
I’ve been using Open Torque Viewer combined with the Torque App and a basic OBDII bluetooth sensor to log my car’s sensor data over the past month and a half. Plots are in the link. The code used to make the plots is available as an [ipython notebook](http://ryancompton.net/assets/torque/mpg_plots.py.html) 
If you really have the choice (e.g. if the webservice can return either), I think Python programmers now tend to prefer JSON - JSON data structures map neatly to Python dicts and lists, so it's very easy to work with them, whereas XML has to be parsed into some XML tree object, which you manipulate differently from native Python data structures.
I had a quick scan through the PR - it mostly looks fine, but I left a couple of comments with minor suggestions.
Generally you wouldn't need a test Redis, you'd mock it. by testing Redis itself you're doing something the Redis devs should have already done. You an use mock in tests to return the expected data or prevent any calls from leaving your code. Test your code. The redis data should simply be something you're feeding in. 
Take a look at step 4: &gt; Finally, the_flying_circus() must return True when evaluated. Right now you are just printing "True". Instead you want `return True`, and it doesn't need to be within the if statements.
Came here to suggest OpenCV as well. Good luck!
 If you want some advice, I would use string.lower() to negate for the need to right two if statements per input. For example, instead of writing if di=="Left" or di=="left" convert di to all lowercase using di = di.lower(). Now you can just have an if di=="left" statement.
yea, I plan to fix that soon. I realized that after I already published B1.0.0 Thank you for the feedback though friend!
I also plan to shorten a lot of the code similarly in time.
Make sure you have the entirety of https://docs.python.org/3/ (https://docs.python.org/2/ if you're using Python 2) available.
How fast can this track? Degrees per second kind of question. I should look at the code but it uses a feedback loop for aiming?
This is really cool. 
Torque seems to have some built-in logging features (something about "autotalky") but they never worked for me. Once I discovered Open Torque Viewer the app got a lot more fun.
Thanks!
Thats part of my current work. Most embedded guys I've worked with are perfectly comfortable designing and implementing automated testing, but they'll be using tools like LabVIEW because of the support for test hardware: optics, programmable power supplies, digital scopes, etc.
I used to write Python app code that sat on embedded devices. I worked with a EEs doing firmware design so I also assisted them in writing Python code that would help them test certain input parameters (usually crafting packets to go over serial). From what I've seen in working with my colleagues I agree with /u/marsanyi that most firmware engineers will use the tools that come with their hardware kits, debuggers, scopes, power supplies, and so on to validate their work. From your question it sounds like your aim is to get some sort of end to end automated testing using Python as the glue for this task. Because Python fits a lot of different needs and device testing will vary from product to product I doubt most companies think about it or advertise it as their goto for testing, rather its probably just part of their lineup for automated testing. I'm not aware of any companies that use Python for hardware testing other than my own experiences doing it, but the approach is going to vary depending on the device. To achieve your desired result you will probably want a software engineer who knows python and is interested or familiar with embedded devices(pi, adruino, etc), then put them in a room with the firmware guys and have them work together, thats how I did it anyways.
I've been watching youtube tutorials and the one I just watched showed the basics of making a web-crawler. I decided to give myself a project using what I've learned. Ended up making a web crawler that printed out links to every post on my blog, limited by the number of page I let it scrape. I was just messing around but after figuring out the infinite scroll and limiting it by number of posts, I had something that could go through a blog and show me the first post they ever posted. Which was pretty satisfying. tl:dr had fun messing around with python &amp; tumblr. 
And you get an upvote as I'm glad I purchased the kickstarter, really got me much further along than any other attempt.
WOW! i didnt know anything like dash or zeal existed. this is amazing.
Hey, are you sure it works ? It just hangs for me :(
The author notes that returning the response object might be considered leaking implementation details, and I agree. I would have expected to be doing something like: try: todos = todo.get_tasks() for t in todos: do_things_with(t) except todo.Exception: print('Something terrible happened') Granted, I skimmed the article quite heavily (sorry!), but I don't see any justification for not using exceptions. I thought that is what we pythonistas are "supposed" to use?
Why not [bitbucket](https://bitbucket.org/) or [github](https://github.com/)?
Shouldn't the name be "django-couriers"?
Very cool. Are you planning anything else with this setup?
also, whats the deal with the recent "made with love" posts?
Code auditing (if you have to provide source code), user testing, communications testing (for example, monitoring connections made by your application), database security checking (if applicable), infrastructure check (also if needed) etc. The range of tools is so wide that is hard to enumerate, you can start by assuring that the requirements are met and checking the security of the application and the infrastructure.
Excellent idea! and here is a good link for lazy people: [Python Descriptors](https://docs.python.org/2/howto/descriptor.html). I spent a lot of time creating a decorator called `Proxy` and playing with _getattribute__, just to later see your comment and learn it has actually got a name :D Sounds even better than messing with type().
This is so awesome that I'm getting one of these OBD2 devices today. I didn't know this existed!
This question sounds like homework, and it too large and abstract. Perhaps try /r/learnpython
First off, your post is probably better suited to /r/learnpython. But, as it's here I'll offer my opinion here. I mean, they're pretty basic DAO. I guess my question would be, are you using the Image model to store "small" and "large" images as separate rows? The Enum field leads me to believe this. Having written a *basic* gallery app before, the easiest thing to do is store all versions of a file in a single row (or collate them from a separate table with a join but that's needlessly complex 99% of the time). Or even better, having a naming convention like Flickr and store filenames like: * `my_base_name_s.jpg` * `my_base_name_m.jpg` * `my_base_name_b.jpg` And then just store `my_base_name` in the database, as well as a gallery path or something. There's also the lack of indices as well. Sure, you have surrogate primary keys (if you want to read some good stuff, search for "Primary Keyvil"), but how often do you look a post by it's id number rather than by title or date? You'll not notice many performance gains if your application is small, but learning where, what and how to index is a big part of database design and honestly, seems to be more of an art than a science since it'll vary table to table even in the same application. I suppose my biggest suggestion would be to completely remove the paragraph model and instead do one of the following: * Store the content in the Post table. * Benefit: grabbing a complete post is faster. * Drawback: grabbing a lot of posts (say from a search or listing just titles in an archive) is slower. * Store the content in a PostContent (or some such name) table: * Benefit: Grabbing basic information about a lot of articles is faster * Drawbacks: Grabbing a complete post is slower, you need to join the tables together. I recommend getting friendly with SQLAlchemy's very useful `with_entities` mechanism. I'd also recommend storing the contents as Markdown or reST and converting to HTML on the fly. Markdown's easier to write but reST is more reliable. But this is really neither here nor there in terms of this post. You'll definitely want to read up on database design as simply writing models with SQLAlchemy isn't really database design. There's lots of good books on the major RDBMS platforms. While not all the knowledge contained in them is transferable to any other database, many of the best practices are.
No Django 1.7 support? Really?
mistake, it's supported will fix that immediately. We are using it with Django 1.7 in production.
it's the french way of "mail" :)
I use beeps for a morse code program I wrote. But I use pyaudio to generate a tone. Does winsound run on Linux?
Video as soon as its done!
Can you find the actual source code of the python bindings?
I was also looking for the section on testing - particularly after that statement. Probably wasn't your target audience for the post since I was already familiar with what it covered, but another part covering testing would be terrific.
What do you mean exactly? And why? (Just curious.)
I was able to install a version that had it. I have a different problem now unfortunately.
Reddit is a pretty easy one to practice on. Any website that follows a simple pattern would be what you want to start with. I would also recommend using lxml instead of something like scrapy. For me using lxml really helped me learn how the scraper really works
I don't know if there exists a specific framework that does this for you but it looks simple problem enough to solve with smtplib which takes care of sending the emails and any web framework would be enough for the front end couple that to a db. For scheduling you could just run a cron to run your script which reads the db on who/what/when/where to send. 
Avira uses the beep when it detects something. If you mimic that beep it would be really annoying.
&gt; I have to do it for school hmm....
I mean fuck if I actually learn anything, right?
&gt; redditor for 21 minutes Believe me, I sent it to you. It's in the mail.
Linux has a `beep` program. from subprocess import call def Beep(freq, duration): call('beep -f %d -l %d'%(freq, duration).split()') I don't have a PC speaker (I just found out) so I can't play with it. 
I just leave the device in my car. Even after not driving for a week my battery was fine.
It's for CS: GO lol it's quite an expensive knife....
Our teacher is a bitch and can not teach, she's like 90 and doesn't know how to turn on the computer nor does she know how to even open python in IDLE
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck! 
Looks cool but it would be nice to see the code.
https://github.com/matt-desmarais/SentryTurret/
One possible solution would be: - Mandrill: you can create full text/html templates, with conditionnal, variables etc. - Apscheduler: pure python scheduler. With both, you can send every month a personalized email to your customers. Here is a complex example using template: https://mandrillapp.com/api/docs/messages.python.html#method=send-template
Cool - I've been wanting to do this for a while now but can't seem to get myself to do it. My vision is a sensor hooked up to a website and visualized with some d3.js magic.
looks awesome. Im trying to build it using open source tools if possible.
Thanks, i will try to be better i was just hacking away at it for a while
I took it more as dude has a requirement that is outside his expertise, so he asks the community of experts where he might find the right people/company for the job. Once the conversation is started, I'd imagine the person/company might offer their services through a task-based contract (like company offers 100 manhours of support for $100 an hour over the next six months on/off site, with the potential for an extension pending review). He doesn't have to be poaching, he could just be a client with money and work looking for skilled labor.
I opened the file in a hex editor and it's just 20kb worth of zeros. I think your girl is going to have to learn this particular lesson the hard way. Save often. Use [git](https://try.github.io/levels/1/challenges/1). :) GUI's exist for people who aren't comfortable on the command line.
So, you should probably mention what OS and editor you were using to edit the file. I downloaded the file, and yeah, it *is* 20K, but checking its contents with a hex editor, the file is comprised of entirely zeros, so there's no valid data there. I'm not the guy to tell you how, but *if* there's a way to save it, it'll be by recovering from a swap file on the laptop, or something in the filesystem, so you would do well to provide the core OS details for those who can help you, because that file is toast. The hex output: http://imgur.com/wMc7dlI Sorry I couldn't be of any more help, but hopefully this puts you on the right path at least. 
I'm happy to help but I'd like to know your answers to these first: * By 'system tests' do you mean integration tests of some sort? How are 'system tests' different than unit tests? * Are the failure you're seeing consistent? * Do you know why it takes hours to run these tests and is the reason it takes a while consistent? * How are the tests themselves run? * What do you expect 'automated system tests' to actually test and by 'automatic' do you mean it just runs automatically or it figures out what to test itself? We do testing like you're describing where I work against several external dependencies and we *used* to be in the same position in terms of high failure rates. I think what we did may apply here but I honestly need to know more about what your tests do first.
That's what I was worried about. I thought that might be it but I didn't want to give up. Thanks for you help. 
Yeah based on this it sounds more like you just need more resources to get started. We had a similar situation where I work in terms of mirroring production. Here's some things you might try working on: TL;DR: Sound like you're testing is in the right place but you probably need better resources. Failing that, you may need to take a look at how the tests operate in some places and improve their speed/reliability. * Get more resources for your environment. We fought pretty hard to go from 2-4 hour release cycles to fifteen minutes. It basically came down to "if you want to test like you're testing production and deploy fixes faster than you can find new problems then don't skimp on resources for testing" * Try to see if you can prepare your environment/objects for the next test while the previous tests are still running. This can cutdown on the time quite a bit for each test run depending on how it's setup. It sounds like your tests mostly care about the results so trying to decouple setup and results some might help * Try to eliminate the need to rerun tests. It's a massive time waster and it can also make it easy to mistake a flaky test for other issues. If that means getting more resources for your environment then I'd work towards that first. The other problem is people (developers/QA/etc) will sometimes start to lose confidence in the tests and cut corners. Others (PMs, managers, etc) can sometimes mistake this for a flaky product and invest time and money in somehow fixing that when it would be better to fix the tests. This does not happen in all teams but it's a possibility to be aware of. * Maybe consider writing a nose plugin to manage some of the setup and teardown. This can also give you more control over failures too if you need it (including possibly rerunning tests, if you must). * Look at figuring out how to decrease the time to create those objects. I have no idea what 'objects' are in this case but if it takes a couple minutes to create them in prod and quite a bit longer in a test then either the tests need to mirror production more closely or you have an infrastructure/configuration/resource problem. The argument you can make here is that you could end up with a mismatch between the 'real world' and tests which can lead to latent bugs only discovered in production. The reverse could also be true as well. Hopefully these suggestions might give you some ideas. If not, I probably need to understand more about your 'objects' and their permutations to understand why they take so long and what else might be possible to try.
Sorry you're stuck man, but I haven't touched a Windows operating system in years, and that wasn't by choice. Hope you fan find something. A quick and dirty fix for this (going forward) might be to just use Dropbox or something, and save files to there. It's the easiest backup system I can think of, and they're still (I think) giving away 2 Gigs free. Most importantly, they save versions of a file every time it's saved, so you could (in theory at least) "revert" to the file from a day ago, or what have you. Best of luck. 
Take a look at [PEP257](https://www.python.org/dev/peps/pep-0257/). [There's even a checker tool for it.](https://pypi.python.org/pypi/pep257) PEP257 wants a single line summary followed by a break before further description: def foo(): """A Foo method. does foo things. """ The checker is a bit pedantic for my tastes, particularly because it wants the first line to always end in a period, so no line breaks are allowed in the summary sentence. This easily collides with PEP8's 80 character max width, so I usually use the following format: def foo(): """A single sentence summary that might contain line breaks to keep everything under 80 chars. More description of what foo() does and what it's parameters and return values are """
&gt; dbVnum = re.sub(' ', '', vnumResult) That's inefficient. There is no reason to use regexps to replace space with nothing. Just do &gt; dbVnum = vnumResult.replace(' ','') As for this: for vnumResult in re.findall('\nVnum(.*?)\n', result, re.S): You are doing this multiple times, right? and most of your regexps begin with \n, I guess? Then you would probably get a large gain by iterating over the lines instead , eg. for line in fileobject: m = re.match('Vnum(.*?)\n',) if m: dbVnum = m.expand('\\1') It may not even be necessary to use regexps at all, once you are iterating over lines. For example consider the following function: def extract(prefix, line): if line.startswith(prefix): end = line.find('\n') end = None if end &lt; 0 else end return line[len(prefix):end] return None which could then be used like so: vnum = extract('Vnum', line) if vnum: dbVnum = vnum.replace(' ','') For your vnum example, and all instances where you are looking for a constant string and then want to get the value that follows it, all the way up to the next newline, it is equivalent. More information is probably required to determine how broadly applicable the above solutions are. I'd suggest putting your code up on pastebin or bpaste and providing a link to that here.
Pip doesn't always build from source. It can install binary wheels, the replacement for binary eggs. It's just that most Unix environments are such a shitshow when it comes to shared library versions and ABIs that it's practically impossible to distribute binary wheels on those platforms. But it works quite well on Windows, where ABI compatibility is not a nightmare and is rather straightforward (at least as long as you're using the Python from python.org.) If you look around on PyPI you'll see binary wheels for Windows becoming more and more prevalent. 
time to investigate the alternative, [conda](http://conda.pydata.org)? highly recommended... 
This is a good way to phrase something so it gets no help. Are you even trying? 
They are what eggs should have been, a package archive format that doesn't require executing setup.py to install. They support binary packages, but PyPI only allows uploads for platforms with known ABIs (read: Windows and OS X).
I find you a bit harsh to blame StackOverflow since your question is only 3 hours old.
Woot! 
Nothing more than a rant. pip and virtualenv SOLVE problems. Granted, they are not without issues and those issue need to be pointed out BUT they solve problems. whining about those issues without providing an alternative is of very limited use. 
&gt; Pip doesn't always build from source. If if it did, is this really a problem? 
I don't agree with all the points (or they have been addressed since this was written) but so much YES to "Goddamn requirements.txt" and "If you love pip freeze you're doing it wrong". So much bad advice on /r/learnpython in this vein. Also +1 to `conda`.
You might be right. My comment also provided very little use. ;)
Yes. It's 2015. A proper package manager should be able to handle binary installs. Some libraries take forever to compile on some machines, and if you're making many virtualenvs you have to compile the same libraries over and over again. A waste of time and processing power. That's not even to mention the need of having the proper toolchain in place, which is nearly impossible on some machines (Windows).
Thanks for the explanation. Some good food for thought there.
I agree that pip and virtualenv solve more problems than they create, but there are some things that are annoying about them. I wish that the center of truth would be my requirements.txt file. It should automatically be in sync after installing a package. I have made the mistake of deploying without pip freezing and consequently being greeted by a module import error. Instead of pip install .... and then pip freeze or pip-dump, the dependencies information should automatically be in sync. On the server all you should do is "pip install all" or something like that, just like it is with other build tools like the dreaded maven where you have a central dependencies file and stuff that is missing gets automatically downloaded or uninstalled when it is no longer needed. 
All these issues are issues of the development-deployment dichotomy and they should be acknowledged and solved at the language platform level. There should be official python tools for easy extending the platform ("pip install" equivalent) and for dealing with "developed on one machine, deployed on another" issue (virtualenv equivalent). 
While I tend to dodge everything that starts with J, I find the choice of language and implementation not as relevant as it seems. You can teach the basics in pretty much every all purpose language and forcing people to use a less common implementation reduces the copypasta and teaches research.
The benefit of Jython compared to CPython ist simple: Within Jython you have access to the great world of JVM ecosystem 😀 Perhaps further programming classes refer to that? Then it would be a good choice to embrace the platform.
And here is the reformatted code to fit to Reddit markdown. T=50#ms dt=0.02 a=17.9 b=.48 #mV^-1 c=.0032 #mV^-2 e= 26 p=.014 #mV^-1 q=1 ENa=65 EK=-85 g=1 #nS Tv=4#ms Tr=5#ms Iext=50#pA Vth=-55 def f(V,R): dVdt=(-(17.8+.48*V+.0032*V**2)*(V-ENa) -26*R*(V-EK)+Iext)/Tv dRdt=(-R+.014*V+1)/Tr return dVdt, dRdt t=np.linspace(0,T,int(T/dt)+1) V=np.zeros_like(t) R=np.zeros_like(t) V[0]=-80 R[0]=.4 for i in xrange(1, len(t)): dVdt, dRdt= f(V[i-1], R[i-1]) V[i]=V[i-1]+dVdt*dt R[i]=R[i-1]+dRdt*dt spiketimes=[] for i in xrange(1, len(t)): if V[i-1]&amp;lt;Vth and V[i]&amp;gt;=Vth: spiketimes.append(t[i-1]) firingrate=len(spiketimes)/.05 print("Firing rate={} Hz").format(firingrate) ax1=plt.gca() ax1.plot(t,Iext,color='blue',label='Membrane potential') #this plot does not work because Iext is not yet suitable for the x-axis ax2=ax1.twinx() ax2.plot(t,firingrate,color='green',label='Recovery var') #this plot does not yet work because firingrate is not yet a dependent variable.
I was thinking that while reading this, it seems like every time "pip install module" fails or runs into issues I go to http://www.lfd.uci.edu/~gohlke/pythonlibs/ to download the .whl file I need, install it and everything works. It seems like this is a relatively new way of doing things but that website has been great for me because "pip install" from official sources seems to have a relitively low success rate when it comes to installing things like pygame, kirvy, cython, scipy and really a host of fairly popular packages. 
Right and for windows Cython (that is often used to compile packages) depends on on Microsoft C++ library. You get an error like "unable to find vcvarsall.bat" Microsoft offers the Visual C++ compiler for free for windows [here now](http://www.microsoft.com/en-us/download/details.aspx?id=44266) but its for Python 2.7. For Cython and Kivy I ended up just grabbing binary .whl installers from [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/) to get around its desire to compile everything. 
&gt; Some libraries take forever to compile Just as an example of that, http://jeanphix.me/Ghost.py/ requires several hundred meg of dependencies to install.
this gets posted here about every 6 months I think. That's fine, and all, for those that haven't seen it... but unlike a meme or pic, a tech piece can become dated. The opinions in this bit are starting to show their age. 
Wait so the whole reason wheels are not seeing a lot of adoption is because they are not available through pip for linux? That seems like a needless issue :-/ 
"Write programs that do one thing and do it well." From virtualenv introduction: virtualenv is a tool to create isolated Python environments. I think virtualenv solves beautifully the kind of problem it propose to solve. If you need isolated environments and try to get it out of it, you are using the wrong tool for the job, go with Docker or LXC instead. It's what I'm reading about at the moment. I can be wrong, but it's my 2 cents.
So as a mainly Linux user, they're useless?
It's near impossible for binary wheels to be packaged usefully for Linux because of ABI compatibility issues. 
Have a link on where I can read more about this issue?
What is commonly meant by "Python" is CPython. Jython, IronPython, PyPy, etc., are also implementations of Python. The possible advantage of using Jython for your prof is to be able to use some libraries written in Java.
I really wish that pip would support installing binary eggs. The fact that it doesn't is a philosophical decision really pisses me off. Working with Python on windows is a pain in the ass specifically due to issues related to compiling from source. And who the fuck wants to install a bunch of compilers on production boxes? So stupid.
Here is a fresh take on the issue: http://www.techbroil.com/2012/06/endless-denial-of-linux-and-unstable.html Bare in mind that Linus himself has insisted that kernel ABI mostly stays stable towards userland, so in this case (python packages) it's unstable ABI of plethroa of C libraries (libwhatever.so thingies in your /usr/lib) are the actual source of grief.
If Java is a core language at that university, then Jython could be a good choice. The simple Python language syntax can be used for basic programming techniques, while simultaneously introducing students to some of the Java API they'll be using later.
I hate the word - "poaching". Somebody is offering a better work? How is it "poaching"? There is no trap, no deception, nothing against the law. Better money, better working conditions, something else that might bring professional to the company is not "poaching". Sheesh, some people...
How is the libwhatever.so resolved with source based distribution, just because the package is compiled and linked to your specific version of the lib?
&gt; and if you're making many virtualenvs you have to compile the same libraries over and over again. A waste of time and processing power. so, uh, build your own wheels? It takes almost no effort.
&gt; Almost 99% of TFA is pure whining and based on missing the point or using tools the way they're not meant to be used. Yeah, some of it sounded like "this is bad because it can be misused". This might be a problem if the misuse occurs very often but I don't think it does. I'll give NodeEnv a try sometime, sounds interesting.
Useless, if you don't mind compiling lxml over and over again. If you do mind, you can make an lxml wheel once for RHEL6, once for Wheezy, etc, and then you can install lxml within a few seconds instead of 10 minutes.
+1 for conda
In my Docker containers, no. In Vagrant-built VMs, yes. On EC2, yes. Most of what I deploy to is Amazon. Though I do try to treat them as microservices, I allow for the possibility that at some point we might cram more things on there (whether memcached or something) to save money. 
Since they will most likely be forcing Java on you, Jython would be a step towards that, though it would probably write similarly to Python and I'm not sure of the details that went into their decision. It could be possible the professor has taken a liking to Jython and prefers it over standard CPython or other variants. 
Using python on windows is too much adventure for me already.
I totally get that. Thank you for clarifying =D
&gt; This is good for making sure that your production deployment matches what you developed against And for making sure that the development environment you use is the same as the rest of your teams'. It eliminates a large swathe of "works on my machine" problems. &gt;but the problems start when you commit it to your source control and expect other people to use it. Only if you're distributing it. If you are sharing it with others on your team it's a very good idea. &gt;You've got a giant hairball of dependencies, including things you only depend on indirectly Uh, no. pip freeze doesn't change the dependencies that you have at all. It just describes the versions of the packages you have installed, a lot of which are presumably there BECAUSE they are dependencies, but that is incidental. &gt; it's impossible to use except in an isolated virtualenv This is what virtualenv is *for*. &gt; impossible to know which things can be upgraded. My solution : upgrade everything periodically and run all the tests. If nothing breaks, keep it. If something breaks, investigate and potentially kick that package back down a few versions or fix your code so that works with the latest version. Then freeze again. &gt;The correct and not-lazy way to handle dependencies is to enumerate your first-order dependencies in setup.py with constraints as appropriate (e.g. pyramid &gt;= 1.5). That way, when someone installs it, it will check that a compatible version of modules is installed but won't conflict with anyone else's requirements unless it's impossible to satisfy both. This is how I do it for libraries that I am distributing as open source, because I can't necessarily make assumptions about the versions that other people use. This also means that I have to test my code on multiple versions of a library I depend upon just in case. That is a PITA. However, I am not *ever* going to write Django&gt;=1.2 in a requirements.txt my team uses because if I set up my environment 6 months before him, we could get subtly different behavior (and bugs!) which will inevitably lead to me tearing my hair out as I try to track down the cause. Nor am I going to test a large monolithic app on any version I'm not planning on using.
&gt; That just means you have not run your code in enough environments/platforms yet :-) That would be true. Since I'm not shipping out the applications, I have full control of the platform and environment. But this isn't exactly a problem that virtualenv was meant to solve. &gt; My sysadmins however love centos 6.5 because they don't have to learn how to work with new things like systemd. Sucks for them. Most of the time, systemd is a none differentiator for daily stuff. &gt; They littlery can not fuck up the install process this way because it is all of two steps. Which is perfectly fine. My argument is that virtualenv was never meant to solve this issue -- it could help, but that's about it. So to blame it for not doing something it didn't promise to do seems unfair.
&gt; Binary packages solve very real problems. Can you give me some examples?
virtualenvs are not only for isolating from other apps, but for isolating from system python
This is not really related to python, but I'm happy to help you anyway. I have been in a similar situation. If you are lucky you can (partially) recover the file. It happened a few moths ago. I was editing a .py file in notepad++ (it could have been any file in any editor). In N++ I mapped the F11 button to launch the file in python interactively. I had been hacking scripts together to use a webcam and microphone in python and show the inputs on the screen. After hours of coding, finding the right libraries, copying scripts, read documentation, change scripts again, I finally had a program that could capture images and audio continuously, it ran and closed without errors. I changed some variables, ran the program, closed it again and reverted the changes in the variables. After reverting it to a script that ran fine, I tried to run it again but I was surprised with a BSOD. At that point I didn't really worry about it, because N++ saves the file before running it. I rebooted my pc to continue my work and found out that the file I was working on was missing. What I suspect that has happened on my computer is that the file was saved correctly, but that the Master File Table was not written to the disc. With some data recovery tools I tried to find the file, but none of those showed any result. Then I came across a professional tool that supports raw editing of a hard drive as well as searching for patterns in it. I used a trial version to search for some patterns that were in that file. I found multiple previous versions that ware complete, but the latest version was partially overwritten. I could recover most of it, but some parts I had to re-create. I used the DiskEditor program from [this](http://www.uneraser.com/). Afaik the program "DiskEditor.exe" is in the free version. This should help you to find previous saves/versions of that file that may be close to the last one. Edit: I forgot to tell you not to use that computer. Best practice is to install this software to a different computer, take the hdd out of the computer with the script and attach it to the other one. You could also boot the computer from a live Linux distro, but in that case you'll have to find out yourself how to search on the hdd. 
This might not be strictly what you're looking for, but you might want to consider integrating this into your build process and doing it ongoing. In an enterprise setting you might look at something like: [Fortify SCA](http://www8.hp.com/us/en/software-solutions/static-code-analysis-sast/), [Klockwork](http://www.klocwork.com), or [Veracode] (http://www.veracode.com). [NIST](http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html) has a list of possible tools out there as well. A cool new free service out there is [SWAMP](https://www.mir-swamp.org), but you might have some reservations about sending your code somewhere without an appropriate legal arrangement. 
&gt; If you're not &lt;doing X&gt; own then you're doing it wrong. Some day I'll read this kind of comment and it won't be an over-simplification that fails to take into account the full diversity of situations programmers run into.
&gt; I stopped doing that because it felt needless given the level of isolation a container provides. What if my app depends on a different version of a module already installed by the OS? [EDIT] For example, say that you run into a bug or limitation using some module that's part of the stdlib or packaged by your distro, and you want to upgrade it. If you upgrade the OS' copy of Python you could break something. If you upgrade the virtualenv's copy of python you're fine. An example of this is argparse - which has a different version on pypi than comes with python 2.7.3.
&gt; few second of compile time This just isn't the case across the board. If you use scientific packages, compiling numpy, scipy, and pandas takes maybe 30 minutes. If you want to use the IPython QTConsole in your env you would need to compile PySide which takes over an hour on its own. If you want every project to be in its own virtualenv the need to compile would be a *huge* stumbling block.
I just converted my entire site from PHP/Codeigniter to Python/Django ([howchoo.com](http://howchoo.com)). First of all, let me say that the experience was euphoric. The site is clean, fast, etc plus I love Python. I think you will be better off giving your life to Django rather than trying to maintain legacy code in any capacity. If you project allows, I would completely build the Django version of the application and switch over when it's ready. If you'd like specific steps I took I'd be more than happy to provide them, but I didn't use any special tools.
This article taught me that python is even cooler than I realized.
&gt; It should automatically be in sync after installing a package. I disagree. If I had a nickel for every time I was trying out a new library in a project, only to realize later that it didn't actually fit my needs, I'd be rich. I want my requirements to be generated when I know that the environment is in a good state, not every time I install or import something. If you want it to update automatically though, you can put it in a git hook. 
A lot of of Stockholm Syndrome in this thread. Python packaging certainly is very bad, especially when a wheel can't express a dependency on a system level C library. That means pip can't guarantee a correct install. This is why TFA recommends LXC: you use real packages (deb, or rpm, or whatever the OS uses) so that you can express a dependency on the C library. But then again, baking OS packages is a right PITA, so most prefer virtualenv/pip and a messed up install every now and then over 100% correctness. And it still is a few years before we will stop downloading someone's setup.py and execute it just to see which setup.py's we should also download and execute. It's amazing that we haven't seen a security apocalypse among python programmers by now. So yeah, messing with PYTHONPATH seems more or less equally wrong as the present situation, except you don't do pretend-isolation from the system. 
This is so incredibly bad, my objections would be longer than this crap article. I should have used the word sh** to describe anybody that uses fu** in a serious piece. This crys out for a ban.
&gt; They never bother to learn about setuptools. Probably because the documentation is incredibly confusing and contradictory.
 Python 3.4.1 (default, Nov 3 2014, 14:38:10) [GCC 4.9.1 20140930 (Red Hat 4.9.1-11)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; [x for x in range(10)] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &gt;&gt;&gt; What? My favorite thing about Python 3 is `print_function` being standard, the features it has are great for specific formatting, changing the `separator`, taking off the trailing `'\n'` and things that I have come to rely on. 
This is **painful** to read on mobile!
`pip freeze &gt; requirements.txt` is useful (and encouraged) if you are deploying an application that requires specific versions of packages. `setup.py` is preferred if you are distributing a module (via PyPI or the like).
Awesome. I am used to profiling .NET and SQL code, but not so much with Python. Thanks for the link! I will give it a shot.
How many times have you run into that?
I added a pastebin link to the full source
To make the other comment more clear, you can use them locally to great effect if you install the same packages often on a single machine or several machines you know share the same ABI.
Sure, there are use cases for which compiling everything is not a problem. No one would argue with that. You seemed to be implying that compiling everything is *never* a problem. 
I was really confused at spending like an hour reading the article, all its comments, and a bunch of Reddit comments before someone mentioned conda. I see folks recommending Anaconda all the time, but in a full blown packaging discussion how is conda not front and center?
[Lamson](http://lamsonproject.org/) written by Zed Shaw.
Gah, I'm sorry about that. Thanks for the polite reminder!
Plus some scientific tools also rely on Fortran compilers on top of the c/c++ build tools. This makes building numpy even trickier, especially if you want the Intel MKL BLAS bindings. This is trivial with a wheel, but can take a day of frustration trying to do it yourself. Compiling should be easy, but it isn't, largely because the documentation is scattered and incomplete. The correct instructions are more likely on StackOverflow than the developer's website or the readme.
No problem! Good luck over there - I'm sure you'll get what you need.
You learn something useful every day. I think that this is that something useful.
Installing from source on Windows is difficult to set up and installing things like numpy, scipy, pandas, PyQt/PySide, PyOpenGL, etc takes hours and sometimes has other special requirements like Fortran compilers.
Your linker (usually ld) embeds paths in the resulting binary based on what it found when it was running (which in turn are based on the command-line args to the linker). There is also a few places to configure the dynamic linker to add extra search paths after the build, but this can't fix things when the basename of the library file changes. If this sounds like a mess, then you can start to see why this is so broken.
Sorry didn't know, thanks.
This, right here, is the appropriate data structure for currency.
Nah. You'd be hard pressed to find non-decimal money these days. Incidentally, Decimal is the appropriate Python class to deal with money. Just tell it how many decimals of a cent you care about.
I will try this out later, but it does make a lot of sense. thank you
I fully agree with you here. I also believe that if you need to further isolate your environment beyond python libs, Docker/LXC/Rocket is the way to go. With containers one can isolate even other piece of the implementation, like imagemagick that does something in a subprocess or even cronjobs. It's quite the pain to install opencv too, and you can containerize that. And the ultimate thing: some stuff won't run on OSX/Win, or it's just orders of magnitude easier to get running on a unix box, and a container makes it less painful.
&gt; You seemed to be implying that compiling everything is never a problem. No, just that it's not a "huge" problem.
Consider reaching out to the author of django-php-bridge and see if they can provide some insight into this. If it is for work then paying for an afternoon of remote consultancy might be a worthwhile investment. If it is for the community then they might be willing to talk technical for free. The way I would do it: 1. The bridge stage. I would get session sharing between my two projects. I would get an instance of nginx in front of everything and have it reverse proxying all requests to the PHP web server. I can then add rules to reverse proxy to Django instead of PHP for specific URLs. The key is to have it so I can write new vertical functionality (Model -&gt; View -&gt; Template) in Django from the get go. 1.House keeping stage. Take your existing app and start cutting unused features, refactoring code and improving test coverage. This is often difficult as new features will be required. But a reacquainting and tidying stage, however brief is a place to start. Try and get good separation of concerns, basically ensure your PHP is architected in an M and VC manner. If you have a large app then gathering requirements is necessary. 1. The **M** stage. It might make sense to leave PHP serving the **VC** part and shift functionality to Django for the **M** part. Functionality can then be exposed to PHP via an internal REST API. I recommend Django Rest Framework. For parts it might make sense to do the opposite and expose the PHP models via an internal REST API to Django. Make sure you have a good DBA on hand for complex migrations, especially if your original schema isn't up to scratch as it won't be a 1-to-1. If you do not have one in house, consider a support company like Percona, Pythian etc to provide the expertise. 1. The **VC** stage. Once functionality that constitutes a Django app has had its models (or **VC**) ported to Django, it is now time to do the other bit. Move the opposite bit into Django, you will likely have to expose extra API endpoints from your PHP app where necessary. I would then repeat stages 3 and 4 until complete, cleaning up dead API endpoints as I went. Other things worth considering: * **Templates.** Will likely need to keep two sets of base templates, one for PHP and one for Django. * **Async work** basically anything that doesn't need to happen in the request-response loop (e.g. Email sending). If this can easily be ported to Django, port it into a celery task and expose an API endpoint to trigger the task. Alternatively, if you cannot port the code just yet, you can port the execution of the task. Move PHP functionality out into its own CLI script and have celery call this script, then expose an API endpoint to trigger this task.
You can also use .numerator and .denominator, or print Fraction(n, d), or str(Fraction(n, d).
22/7 is actually a really bad approximation of pi and is only accurate out to two decimal places. That value is accurate out to 10 (and the 11th rounds properly). I'd consider that a great success, not a welp! Granted 22/7 is waaayyyyy more convenient/memorable than 884279719003555/281474976710656 so there is that...
The real problem is that when you build on one machine and then run on another machine, there's the possibility for a difference between the headers and the libraries. That is where the ABI problem comes into play, because the headers define the ABI used on the client (caller, user) side of the library, whereas the compiled library defines the ABI used on the library side. If they are out of sync, you get problems. When you build from source you guarantee that the headers match the libraries, because they're both from the same system, so there is very little room for something to go wrong. 
Yea I'm going to bring the dropbox idea to her soon. I just didn't want to last night as she was already pretty upset at losing 10 hours of work 
That's a good point, I hadn't really thought of that.
Much better than 22/7 and even more memorable is 113355 -&gt; 355/113 = 3.14159292035..
There are two different string representations for most objects in Python. 'Fraction(1,2)' is the repr value, whereas '1/2' is the str value. [More.](http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python)
It transforms it in a list containing said int : &gt;&gt;&gt; a = 4 &gt;&gt;&gt; [a] [4] Here it is done to append the value at the end of the list : &gt;&gt;&gt; myList = [1, 2, 3] &gt;&gt;&gt; myList += a Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: 'int' object is not iterable &gt;&gt;&gt; myList += [a] &gt;&gt;&gt; myList [1, 2, 3, 4]
Thank you, that will help me a bunch.
For context, I still rarely use Python 3. I like wxPython, and I'm not sure Phoenix is ready. Nearly every time I use v3, I get caught out somehow with the unicode string changes - getting 'bytes' objects where I expect strings, or the other way around for passing parameters. In fairness, this is because I haven't spent any time learning about v3, and instead just jump in as if I don't need to learn anything new. Once I can use it for everything I want to do, I'll devote that time to not being so clueless :)
Yep. Very well explained too, thank you. 
thanks
this article is old as shit. 
Usually if the regular pip install fails for me from official sources I download the wheel, then shift right click my download folder and select "open command window here" then I pip install the .whl file and its not bad because you can tab complete after the first couple letters. It would be nice to have an option like "pip install -whl kirvy" to just tell pip to use a binary without the bullshit of using a browser to go get the file you need. It would be relatively simple to add a list of sources for pip to look for for whl files too pretty much like the way you update apt-get with other sources. 
&gt; GAE last time I checked [more than a year ago, perhaps more like almost 2] did not have mysql or postgresql since they have some other database like offering. There's been cloud sql for at least a couple of years, basically clustered mysql. https://cloud.google.com/appengine/docs/python/cloud-sql/
&gt;The correct instructions are more likely on StackOverflow than the developer's website or the readme. Basically describes everything I've ever done with anything programming wise (after stack overflow became a thing)
Have you attempted this homework at all? Maybe if you show us what you have so far or specifically what you're having trouble with we could help.
How about do some effort in to do this assignment. I am going to do the task now just for the lulz :P Try to do it then we will help, but show us what you need help with and not just give us your assignment
It occurred to me afterwards that this is a potential gotcha in v2... if you happened to re-use a variable from the outer scope as your comprehension variable, it would get clobbered. Glad I've never done that, that would be incredibly annoying!
I was able to copy much of the HTML to Django templates but each required careful attention. I also restructured the templates a little bit to take advantage of Django's template inheritance. I'm fairly familiar with Django's templating so it was pretty natural to convert it. Another change I made when converting was to use SASS whereas I was using plain CSS before. So this required some changes, but overall I was able to copy most of the styles without thinking about it much.
So I've just been doing setup.py install when I deploy. I know that it won't install the exact versions of dependencies if they aren't specified as exact but I typically don't mind that. Is there a reason I shouldn't do install aside from that?
PM me.
&gt; I wasn't sure about whether that was more efficient because then I have to check each line for 27 different potential beginnings. With the for loop, I should only have to run through the entire mob block one time and look for the 27 fields. Well, I haven't actually profiled things... but the thing is, regexps are definitely slower than simple Python text operations -- like, a minimum of 2-3 times slower. They just have to do more work. Of course, that should not stop you from using line iteration for most of the things, and regexps for multiline captures. But it's not that hard to use line iteration for multiline captures either -- just have a variable to keep track of where you are in the multiline parsing process.
Spyder warns you when you try to do this.
"Man wins $100,000 in lotto, beats lifelong lottery players."
Go ahead and `brew link --overwrite python`. 2to3 must have gotten installed by something else along the way. You might have to end up doing `sudo rm /usr/local/bin/2to3` depending on how it got into /usr/local.
What is this from? I love it. 
The last time Quantopian got posted there was quite a discussion here, perhaps the best argument is that this company basically gets algorithms that are going to generate shitload of money while only paying 100k (which is not much considering programmers salaries)... But from this article the company seems to be much better. 
Headline: &gt; Finance outsider wins $100,000 Article: &gt; $100,000 with which to trade for the next six months. The winner, American engineer Grant Kiehne, will get to keep all the profits generated during this period. So he wins between $0 and a percentage of that amount if his algorithm is consistent.
This is an important read too: https://docs.python.org/3/library/numbers.html. 
It's actually in tons of modules from the same author, "cancerhermit". https://www.google.com/search?client=safari&amp;rls=en&amp;q=%22from+macos.app+import+chrome%22&amp;ie=UTF-8&amp;oe=UTF-8#q=%22from+macos.app+import+chrome%22&amp;rls=en&amp;filter=0 Their github account is very strange too, with lots of empty repos.
[The backtesting platform is on Github.](https://github.com/quantopian/zipline)
What makes you think its from something?
Ummmmm..... wtf?
He could win $10k if he's really lucky/good! Maybe more...
He didn't actually win 100K, he won the right to manage 100k in assets and keep what ever profit is generated from it over 6 months. His actual purse might be anywhere from about 0 to $15k but not likely to be a whole lot more than that. A 15% return on the market in 6 months would be pretty impressive so there is a good chance he will get less than $4k out of it. 
I bet he's got plenty of job offers lined up all over Wall Street. Paying a bit more than minimum wage. So, not a total loss IMO.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Definitely an odd choice for an illustration, and likely violation of the code of conduct. I don't know where people draw the line between referencing historical phrases from literature and what is considered offensive; as well, I wouldn't want to have to be the one to decide. There is a thin line between banning literature and ideas and promoting hateful messages. If someone released a python library called PyenKampf for the sole purpose of referencing various portions of a literary text (albeit, a pretty stupid idea) would people get up in arms? If the text were any different, historical or not, "We must secure the existence of our people and a future for Hispanic Children" would it be more or less offensive? Regardless, it was done in poor taste. If this issue blows up and we can't use the term 'whitespace' anymore, I'm holding you responsible :)
Do not set a default value of [] or {} Do this... class foo(object): def __init__(self, list1=None): if list1 is None: list1 = [] list1.append(1) self.bar = list1 That's the standard.
So, you didn't read the article? 
yeah, that's what I ended up doing in the end. I just didn't expect it, so it was kind of a hassle tracking it down. Thanks for the input! I just figured I'd put it out there and see what the pro's do. 
Thanks Billsil! That's what I ended up doing. It just really caught me off guard.
Since the variables often need to be instance variables (start with `self.`), I often do this: class foo(object): def __init__(self, list1 = None): self.bar = list1 or []
It is foreplay for Bubba. You have to add a little teasing and anticipation to spice things up.
yeah, I haven't found a use for it yet, but I was imagining some possibilities. would it be considered pythonic to use it that way though?
Thanks for the help. Someone else gave me the script, I'll just have to find an alternative because i have no clue why its not working.
Agree. Git, github, forks, feature branches and pull requests. 
Nitpick mode engaged: There is no such thing as a "Python algorithm". There are algorithms, and you can implement most them in Python. But the algorithm is just an algorithm.
Mehh...depending on what I'm doing I'll do something like that, but generally it's a bad idea. There's a reason it's allowed though. You can always use a flag.
Unfortunately this doesn't scale very well (looking through commit messages, patch sets, etc.) when the number of commits per week is around a thousand. I want a way to automatically determine how my team's usage of the other team's code is broken without having to sift through the other 995 changesets I don't really care about. We waste too much time doing it manually... Sounds like I have a future side project to work on.
3.14 is actually more accurate than 22/7 and uses the same number of characters.
How about an algorithm that checks its own source code and terminates with an error if it's not valid Python?
-- Moses
Hahaha, that would be one hell of a misunderstanding :) Although judging by the name 'cancerhermit' I kind of doubt it :p
hehe, that's so true!!
I am interested in helping him, but It is the way he ask the question. Like "do the homework for me" and that bothers. I want to help people that have tried to code it and have feil to do so, but I want to see where they are stuck and help them from there, but not do it for them :P If he have do a effort he would have done some research and most of it is easy to find documentation on, because python is awesome that way :P
Yes that's what they say. I'm sure people who want to get rich would never commit software piracy either. There are so many checks to make sure what runs on hedge fund computers isn't stolen code.
1. Grab a handful of dice, 2. Roll the dice that are in your hand, 3. Pick up the ones with the highest number and discard the rest, 4. If you're holding more than one die, go to 2, 5. Your one remaining die has consistently beaten all other dice, give it $100k.
That's not really an algorithm. You could design an algorithm that checks the source code of *something*, and feed it an implementation of itself, but then you'd still just check whether this particular implementation was in Python. Or you could design an algorithm that checks whether a given algorithm can be implemented in Python, and then feed it a formal description of itself in some algorithmic language (which would probably amount to writing a cross-compiler from some other general-purpose language to Python). Or you could design an algorithm that generates a Python implementation of itself, but you could still implement the same algorithm in another language. Still doesn't change the fact that the algorithm is just the algorithm, and the Python thing is the implementation.
Nice find. All those modules seem worthless... The user is worth reporting but there does not seem to be such a feature available.
Just wanted to tell you that git keeps a log of every commit, so when you commit a file containing passwords it will still be visible e.g. https://github.com/Bertieio/PyGraph/commit/794fbb032c97f3a6c2fbfa12ef2123b7f8244026
Thanks Ill remove it now 
 public class Main throws NotPythonError { public static void main(String[] args) { raise NotPythonError; } }
All done I need to remember that every commit I do locally is synced not just the ones I push to github 
http://www.bloombergview.com/articles/2015-01-23/capital-one-fraud-researchers-may-also-have-done-some-fraud Why bother? The data you really want can be found in the databases of the payment processors. These two made millions. This is why everybody now wants to get into payment processing. This iincludes Apple and Walmart. They will literally make millions off the data.
It certainly sounds funny to my ear to characterize node.js as a "mature" asynchronous, scalable framework. Maybe it's more true than I realize.
Interesting. I would assume the winning algorithms in these type of competitions are rather high-risk ("go big or go home") due to a presumably large contestant pool, so I wouldn't be surprised if it doesn't even turn a profit in the 6 months after that.
Ok, I gave it 100k and he blew it all on hookers and craps. Bank doesn't believe me and I'm now in the hole 20 grand. What now? 
I thought the keyword was throw, not raise.
File for bankruptcy or bailout and become CEO of a different dice-rolling company.
Good answer! But I'm not sure, is it reasonable to connect Django models and PHP controllers through internal API, since PHP code rewrite required as well as good DBA/consulting, as you said. Possibly, it would be cheaper in time and money to rewrite project from scratch. Why to keep two sets of templates? Once some screen/page along with backend moved to Django, PHP templates are not needed more.
Did you report it to PyPi?
He should buy an iceberg and her wealthy. I saw it happen in a very well done documentary, I think.
More like, "Idiot sells billion dollar trading algorithm for $100k." Seriously, never compete in these bullshit "contests". They're just trying to con people out of clever ideas. 
You're probably right. I've written one java program in my life, with extensive help from IntelliJ.
While I agree with you in this particular instance, and the use of it was likely blatant and antagonistic, calling it racist and useless is our subjective opinion here. My question to you then: Is the act of singling out any particular group over another for the targeted advancement of a certain demographic wrong? There is immediate and controversial danger in agreeing blindly. If the PSF comes out and says, "We must secure the existence of our people and a future of women programmers" would you be just as upset? As is, we already cater to specific demographics already-- some are just more socially acceptable. There isn't anything hateful about the sample statement. There is historical context that can be interpreted as hateful. If the statement was a direct attack against a group of people, or promoted hate directly, then its different. Why can't we all just use Lorem Ipsum and get along? :) The author gets maximum troll points!
I wonder if you could utilize search trends with Google/yahoo/bing trend apis to chart keywords related to businesses over a period of time. granted it's not indicative of a sale since it could be searched due to negative publicity, but who knows. For example: Keywords: Chipotle, Chipotle Locations Period: 6mo I'm assuming that if their profits were increasing, you'd see an increasing trend over the past 6mo with users searching for those keywords. 
It'd be easy to hate on "Adria" in this (and many have, unfortunately). Clearly she has reasons for her outlook, but it's sad to see how the ripples of one person's misguided actions can so quickly affect others. She may be pretty unforgiving but she's certainly paid a high price for her initial actions. I'm not posting this to reignite the issue, but I think it's an important look at the other side of making communities and conferences inclusive. PyCon did this well; they were notified, they investigated, they felt things were OK, and left it at that. Another conference sporting so-called "Zero tolerance" rules might have ejected them outright, and probably lead to even worse outcomes for "Hank". Food for thought for the Python community; keep being excellent, I suppose.
I'm sure utilizing traffic data and location data is at the root of decisioning when it comes large scale commercial real estate develpment and also location choices for major chains like Starbucks. I also don't think its a coincidence that Capital One very recently announced it now wants you to download an app so they can track your location. They say it helps with fraud detection! ...but I'm sure they also have data analysts paying very close attention to everywhere you go with the sole purpose of analyzing that data for other types of investment.
As a result of this, and the flurry of similar outrages in the last few years, I avoid talking to females that I don't know at tech conferences now. edit: to clarify, I avoid *initiating* conversation.
Now, now the dice-rolling industry won't hire him now. He should look for a job at JP Morgan.
Thanks for posting this - an interesting read.
Just did. 
It's the only way for this PC, zero tolerance "business professional" atmosphere of drone parenting and nanny-states. Every time I comment about it I get downvoted but it couldn't be more true: no one you meet in a professional setting is your friend. The only interactions you should have are bland, generically friendly, half-hearted attempts at most. My personal favorite part of the article is how this woman refuses to admit having a "chip on her shoulder" and instead just shifts blame. Both parties were at fault; be an adult and take him aside one on one instead of publicly shaming someone on the internet for vigilante justice.
You might as well say you avoid talking to all humans because some humans are jerks. Using this as an excuse to reinforce gender *types isn't really the desired outcome.
As long as you feel that way about all techies and not merely women, it's a valid, if desolate, outlook.
&gt;As long as you feel that way about all techies and not merely women, it's a valid, if desolate, outlook. Absolutely 110%. NO ONE means no one; race, sex, color.. no one. If I've worked with you then you're essentially a table (or other inanimate, non-offensive object) to me. Don't shit where you eat.
If his algrothim drops to 90k it will be stopped and no money will be awarded. He only gets to keep what his algrothim makes above $100k after 6 months of running. He currently at $99k.
Reading through that, I can't help but reach the conclusion that this Aria is frankly a bit of a twat. She doesn't appear to accept any responsibility for her own behaviour, but claims Beavis was 100% responsible for what *she* did. Not surprised she hasn't found a job. I wouldn't want to work with someone like that either. 
Adria felt that her life was in danger because two guys were talking about dongles. She's clearly mentally unbalanced, that is not normal behavior. I'm not hating on her, but I do hope she seeks professional counseling. 
IMO, the title for this thread should be: *Guy called out for juvenile behavior at PyCon, loses job, gets new one a week later, but woman has her career destroyed forever." 
This issue has gotten way too complex. The only two things that should really be said is that the guys shouldn't have been disruptive and making dirty jokes in the middle of a conference, and that the woman should have just politely asked them to refrain if she truly wanted to stop the problem at the source, rather than passively aggressively posting it to twitter. 
Sorry, I restarted the (virtual) machine and everything works perfectly, awesome ! :)
More like "Guy called out for juvenile behavior at PyCon loses job and gets a new one a week later; Woman who attempted to destroy a man's life over something insignificant still struggling to find work"
"Guise, we need to have developerment. And for that, we need developerse."
She's made herself out to be a problem-making person who is context-ignorant and who'll likely over-react and get lawyers involved when she hears jokes that are tame enough for a Disney movie.
Absolutely.
did not work. got this error File "./life.py", line 167, in game stdscr.move(life.disp_rows + 4, 0) _curses.error: wmove() returned ERR
I tried the basic seed.txt and I am on ubuntu 14
If you're not trying to reignite the issue, maybe you should have used a different headline. Your submitted headline makes it sound like your post is timely, when in fact this was well-known to anyone following the issue years ago. It's an interesting article, though. And the comments in this thread have been ... illuminating.
I really think that if anyone's at fault it is the guy's company for firing him. They took the word of someone *ON TWITTER* who obviously has a serious axe to grind, and used that as a basis for upsetting the dude's career. That to me is even more insane than the public, passive-aggressive way Adria Richards chose to shame those guys.
I feel sad for both persons at the center of this mess, but where it seems like Hank is willing to admit to his own guilt in this, Adria still seems to be in denial about how her actions can be seen as bullying, abuse of powers and overall callousness towards another human being. It might just be the way this article is written, but is does feels like she is directing general anger towards men in general and her father in particular towards this one guy, without him really deserving any of it. Of course, Hank had a few terrible days and then managed to move on, whereas Adria was caught in this shit storm for at least half a year before it started to calm down. Being on the receiving end of that much hate can do weird things to a person, and going into complete denial about your own role seems like a pretty sound survival strategy.
I'm not sure. What if the algorithm specifies compiling its source and checking the binary to make sure it matches what's currently running in memory, and also checking that the source is Python? I don't even know if this works with Python.
I'd put them on a level but that is a damn fair point that hadn't occured to me, that's a seriously crappy way for an employer to behave! Makes me glad to still be in acedemia...
&gt;Another word for software is “repository”. what.
Check out the Mode Analytics SQL tutorial. It is outstanding. http://sqlschool.modeanalytics.com/ 
The OP may not've known about it until reading the article, which was posted two days ago. Looks like the book comes out at the end of the month. Sure it's old news to some, but it's not necessarily the case that he's trying to reignite it. 
What if he used Python's `sort`?
I agree with you, but I can't help but feel the same sentiment as "goforkyourselfpal" (irony :) ) If I have a great career and I keep hearing about instances like this (I used to handle the complaints in a tech sector institution), I start to take precautions -- out of pure self preservation. I would actually blame Hank's first boss in this case for not handling the situation with any tact whatsoever. Unfortunately, it seems, more institutions are shying away from anything that makes them "look bad" and so their employees (ANY gender) are not supported in cases like this. This leaves the employees without any sense of power. They have to take their own precautions because they know their employers will not stand by them if something happens. Unfortunately I have seen this first-hand.
Totally. I also think we, as members of the public, need to stop judging people in the court of public opinion. Our first reaction should be to wait for all the facts, to form our opinions carefully, and to ensure that whatever punishment for any crime fits the crime. As a people, as a mob, we need to learn to show constraint and help others do the same.
&gt; "shy nerds" as woman-hating sociopaths. Whoa there buddy... that is not the prevailing stereotype. That was disingenuous of you.
Overly aggressive trading algorithm beats conservative trading algorithm in the short term. I'm not surprised.
Appropriate username!
In what way is two guys saying they would fork another guy's repo a sexist joke?
As a person matures, and become more self-reflective, they understand that every situation and event is co-created by all the parties involved. By being a party and having a perspective you create the situation. Hank seem to grasp this, and understands it. Adria, does not. What's funny is that although this was all started with Hank and some immature humor, it turns out he is the more mature one in the group.
Except in this case, Hank was assuming 'most people are pretty reasonable' and yet the unreasonable one still changed his life. If I knew when I was to say a joke my choices were * Say the joke to my friend, stand up for my right to say a reasonable joke and for people to react reasonably if they over hear it, but I'll get fired OR * don't say the joke and be completely PC all the time and get to keep my job I choose job over joke every time. My wife/child will not suffer for me trying to stand up for this type of a principle.
I was only guessing at what he was referring to because he left it in ambiguous terms. However, in a lot of office cultures, people are essentially bland drones and there's no joking at all. Transitioning from one culture to another can be jarring. Personally, I treat women the same as men and assume they're just as dirty or inappropriate as men.
&gt; Hank is willing to admit to his own guilt I still don't understand what is it that he did wrong.
awesome, that solved all my problems thank you.
sex joke != sexist joke
The backtests would show consistency though right? I mean the sample they gave you showed a 191% return from apple dating 5 years back, although When I replaced it with a small cap (TSL) it went negative. I want to write these algorithms one day, is it not a good field?
Honestly, I find both of their employers pretty weak and mercenary to so quickly fire an employee based on public pressure or accusation. So, I certainly hope I wouldn't get fired if I were in either of their shoes, because an employer should have a better relationship with their employee than simply reading some internet comments and terminating their contract.
&gt; I mean the sample they gave you showed a 191% return from apple dating 5 years back That's funny, because a naive buy-and-hold strategy on apple would have netted 300% over the same period. Sure, people will pay you (a lot) to write those algorithms. But don't expect that you'll get rich doing the trading yourself. You certainly could, but it's not like just by being clever you can find the secret to free money. That doesn't exist. There is no strategy that can predictably beat the average rate of market returns. At least not besides things like insider knowledge or getting to make trades a fraction of a second faster than anyone else. 
&gt; It might just be the way this article is written, but is does feels like she is directing general anger towards men in general and her father in particular towards this one guy, without him really deserving any of it. I think that while her father might play a part in how she views men, the way the article brought that up was a bit non-sequitur. It seems to me like, being a woman and a person of color, in the midst of 3rd-wave feminism, she wants to encourage social change, encourage people to think about the subtle ways their behavior influences the treatment and opportunity of others around them. While I think that's a totally noble mindset, she seems pretty poorly equipped to do this effectively. It's pretty clear from her lack of empathy for what happened to Hank, that Adria sees it as an "us" vs. "them" issue. Privileged vs. underprivileged. In her mind, a privileged person getting knocked down a peg through public humiliation and being fired is plain justice--they deserved the objectively disproportionate punishment. It would not surprise me if she would view it very differently if the same exact set of events happened where the roles were reversed. Perhaps ironically, Hank was her "token white guy", individually representative of the stereotype that white males are completely unaware of their privileges in society, directly and indirectly stomping all over anybody they need/want to to maintain that privilege. Hank was that caricature for her, whether or not he really fit the bill perfectly and whether or not he really deserved to be. I hope that one day, she'll grow up a bit and realize that it would have been more effective to just speak to Hank and his friend directly instead of taking her outrage to social media and trying to make it a bigger deal than it was. If nothing else, the story serves as a prime example of what not to do in that kind of situation, and a good reminder that simply talking to someone for a quick minute can solve a relatively small problem very easily, and prevent it from having larger unintended consequences.
As little respect as I may have for her, I do think it was unprofessional of the author to change the name of one party and not the other. For all we know she'll be an awesome person three years from now, and will still have a reputation following her. But then, I'm an EU hippy with leanings towards a carefully rationed "right to be forgotten", so my opinion there is probably off by a few standard deviations.
it only happened two years ago. To anyone not up to date on the latest PyCon news, it is a contemporary issue.
Why is it, whenever we're talking about this, that **nobody** ever blames the guy's employer for firing him? It's always Richards who got him fired. If it's bad to tweet a guy's picture for making a stupid joke, how is it not *worse* to actually fire the guy for having his picture tweeted?
She's treating me like a placemat!
What exactly makes the joke sexists though? About sex, sure, but I could easily see it made between two women... And what's so bad about it?
I suppose it's easy for me, where I live (Ireland) I can sue an employer for unfair dismissal if they cannot prove either a reasonable escalation of reasonable warnings or a huge force majeur grounds for dismissal. Neither of which would have applied; if Hank were Irish, he'd have been able to sue his employer for tens of thousands of Euro for allowing a hearsay/political kerfuffle to result in summary dismissal.
Seems kinda unfair to exclude women simply because of the actions of one unreasonable asshole.
He told a joke that fell on the virgin ears of a *lady,* which, in the context of our neo-Victorian mores, is an unpardonable offense.
Could you produce an algorithm that predicts the weather? yes, but how accurate is the question. If you determine the risk/reward, and the likelihood of the outcome, I believe it is very possible. I want to write one that uses News articles (combs major sites, uses key words as indicators), volatility patterns, earnings reports, etc, then gives a statistical analysis of an outcome. based on that, if it is above 70% you make a profit (you must use options to get that kind of likelihood) it gives you a trade idea, then the user manually accepts or rejects the outcome. There are lots of things you can do with option trading, and I think if a user has the choice, they could make better decisions, kind of like how a whether man makes it more accurate by accepting or rejecting outcomes of what the computer tells them.
She was a terrible person then, and apparently hasn't learned anything from it. Nobody's going to hire her, and it's her own fault. 
That joke was not sexist in any way. Childish and innapropriate? Yes, but not sexist at all.
http://imgur.com/g7ER57V What do I win guize?
I like to redirect potentially uncomfortable conversation topics to a spirited discussion of the top posts on r/babyelephentgifs. Highly effective.
Maybe that's someone who shouts in public "DEVELOPERS! DEVELOPERS! DEVELOPERS! DEVELOPERS! DEVELOPERS! DEVELOPERS! DEVELOPERS!" until they seem like they are going to collapse. Nah, that'd just be odd.
You do not, and should not, have any right to be protected from being offended. BE OFFENDED. It happens. You do not deserve compensation because something offended you. 
+1, and as mentioned above if this had happened here in Ireland, Hank could have sued them for tens of thousands for unfair dismissal. It's so mercenary and stupid of an employer to allow hearsay to influence or trigger their decision to fire an employee. I wish the author had named the employer. Hers, too; while she was acting disgracefully, for her employers to fire her due to threats by anons and harrassers is equally disgraceful.
He's being a little hard on himself. His crude joke made its way to a much wider audience than he ever intended, and he now seems to judge himself as if he blurted it out on stage. What's even more ridiculous is that the joke wasn't even sexual in nature, just anatomical.
Here's the thing though. People can make their own jokes, and have their own fun, which is exactly what these people were doing. They were speaking amongst themselves. They have that right. I make sexist jokes myself, but I don't have any issue with women. It's just taking the piss out of a stereotype. I know you don't have to believe that, but that is the case. The difference is that I would not actually insult a woman. If you want to generalise everyone who finds things funny that you do not, that's your problem, not mine. Sexism is the issue, not jokes. Also, the examples you gave fall flat in one point. They are not jokes. The first was people directly laughing at cross dressing, and the second was people directly using faggot as an insult. Those type of things tend to be homophobic. I don't find it funny to call people a faggot as a term of derision, because that is called abuse. As you say, making jokes in earshot of someone who is the butt can be, of course, intensive. It's not everyone's duty to look after peoples feelings, mind, but it's just nice if we do. Now, here's the thing. Who was being referenced by this joke? It sure as hell was not the woman who attempted to ruin his life. A joke about big dongles, and a joke about "forking his repo" can't possibly have been referencing her. If he had been joking about black jewish women, yeah, I might fall down on her side of the argument to some extent. But he was not. They were, at best, juvenile, sexual jokes. Just stupid childish fun, they didn't even have a butt to the joke. There was no "victimised" group. Don't make this about something that it's not. I'm sure that being gay has caused you to see a lot more of the shitty side of people than anyone should have to, but that is changing. People are becoming more and more accepting of everyone, as they should (as it used to be, in fact. Homosexuality has been just peachy with loads of civilisations through the ages). I do hope that it gets easier for you faster, but don't see yourself as the victim of everything, sometimes a joke is just people trying to be funny, not brimming with subtext about their bigoted views. 
You act like it's a simple binary choice he was presented with, making it an easy situation. Just think about how many things you say to one person that might be overheard by another person everyday. 
&gt; She sounds like a person who's just aching to find something to be offended by (SJW). She's practically the prototypical example of an SJW, long before I first heard that acronym. &gt; No one has a right not be offended, especially in a public area. Incorrect. PyCon has a code of conduct which they were no doubt in violation of. Freedom of speech isn't an excuse to say whatever you like.
sadly, she is NOT ALONE.
What you're suggesting is akin to censorship. You say that jokes normalize a type of behavior which then can or does manifest as physical violence. I can see your side and I can see my side. Given the choice, I choose freedom of speech over possible deterrence of violence. I simply see it as MORE important. It's like banning books or music people don't like because they may incite violence. Arguably, many books HAVE incited violence. I guess, continue to be offended if you'd like. It will be a sad sad day when jokes, books, music, and/or art are outlawed or censored in order to preserve some sensibilities. Thankfully, I believe that more people agree with my point of view than yours and so these items will remain free to offend any and all.
Still, though, it's exactly what women DON'T need in tech. Now the 'boys' will just be waiting for her to leave so they don't have to worry about a stupid dick joke slipping out ... which is exactly how 'boys clubs' form, right? If you're less comfortable around women in professional environments, then that's a problem. 
I felt bad for her by the end. She clearly has deep issues and can't help projecting outright insane thoughts and actions on people. I just have to keep reminding myself that she is an exception and not the rule. I hope she learns to eventually not insist that everyone view the world through her own perspective, no one can help the skin color and financial settings they are born into and to expect someone of better fortune to constantly walk around fretting about this is just ludicrous.
As others have said, you don't need to avoid talking to anyone. If you are in a professional setting, especially if you are around people you don't know, just stay professional and respectful.
I wish I could let her know that interviews like this, where she comes of as being not right in the head, are just hurting her chances more. If she showed some introspection and appreciation for Hank's situation maybe someone would say "hey, she just got a bad rep. Let's have her in." but she will mostly get "she is a lawsuit waiting to happen."
Java for databases etc.
Well, remember that a person can be offended by literally ANYTHING. It is completely subjective criteria. Someone, some faceless authority, has to draw the line and determine what is "offensive" and what isn't. That's why I firmly believe that no one has the right not be offended. It's too much of a grey area. I could be offended by the color blue. I could be offended by women with curly hair or those in bikinis. It's just TOO subjective. While I agree that PyCon was essentially a private conference and so they can enforce their codes or rules, it's still a very fine line to walk to try and meet every single person's comfort needs. At some point, people need to either toughen up or isolate themselves from society if they can't deal with people. I don't know where the line is, so I opt for a fully open, non-censored, arena.
or use x is x directly :)
&gt;Soon after, her employer’s website went down. Someone launched a DDoS attack, which overwhelms a site’s servers with repeated requests. SendGrid, her employer, was told the attacks would stop if Adria was fired. Hours later, she was publicly let go. I know it's not 'correct' but I felt really *really* good reading this. 
Developer Evangelist is what I like to call a bullshit term designed to give someone a job. You know who was a Developer Evangelist? [This guy](http://i.imgur.com/uwRKMlJ.gif).
Someone made a reference to a penis and, as an over reactive professional victim she decided that she'd turn her offense at the terrible joke into "feeling threatened" and of course, flight or fight in the developer world mean's to *take a pic with your phone and tweet about it* She actually says she felt as though she was about to be killed because someone referenced a penis near her. Not *at* her, just near by. So to combat this *attempt on her life* she tweeted about it... 
all i heard was some software shit ...
&gt; Hank was a douchebag for making sexual jokes loud enough that the people around him could hear, during a presentation... this is very rude and inconsiderate behaviour, even if no harm was meant. No, it isn't. It's perfectly fine behavior. It happens all the times in conference, both from women and men. Grow up.
Well technically it is a binary choice: say it or dont. With two possible outcomes, fired or not. It can be complex in choosing one of the two I suppose. But even then you can get it down to others reactions: they can either approve/dont-care/disapprove-don't-act OR disapprove-act. And your actions: you dont care what others think (say it regardless) or you do care (two further options, you know what the others reactions will be or you dont). The only combo you have complete control of AND get to keep your job is where you do care and assume you know someone is going to disapprove and act so you don't say it.
It was more than "a controversial comment", it was his whole body or political opinions. But yeah.
This has nothing to do with freedom of speech, freedom of speech is about the government dictating what you can and cannot say. 
I love how repetitive and worthless the whole thing is. When I worked helpdesk people were so used to the "dog and pony show" that they would say "good" when I hadn't even asked how they were doing. It'd go something like this... Me: Tech Support, sfw247 speaking. Them: Hi, It's X from Y, how are you? (Every freaking time without fail, even though I know they don't care and won't even answer the question with anything of substance) Me: Good, what can I do for you? Them: Good. I can't ______, can you help? It's almost like some deranged 3way handshake of syn -&gt; syn-ack -&gt; ack only without a real purpose. 
No, they are no. And it wasn't even sexiest, it was sexual. Grow the fuck up.
That's the age we live in. The information age. Where anything you post online can and will be used against you. Considering the fact that it stated in the article that she had made a sexual joke on twitter days before this incident, I don't think she had any right whatsoever to blow this thing up like she did. And so yes, she deserved what she got because she put herself out there, and potentially ruined the life of an entire family because she didn't like overhearing some stupid joke they made. Give me a break.
That's complete horse shit. First of all jokes are jokes, you cannot infer anything about a person you don't know simply because of a joke that you overheard. There's a lot of subtlety that goes into telling a joke, it has contexts you cannot understand as a by-standard. IE: The joke is *not for you*. An example, if you were walking down the street with a friend of yours and someones kid is throwing a tantrum and your friend says "*Ugh I'd kill that kid if he did that to me*", as a 3rd party observer am I to take that as an actual threat against the kids life? No because that's fucking stupid! and logically I'd have to assume your friend is joking. But that's exactly what you're advocating. We also call this *being an unreasonable asshole*. Secondly, you do not sign a social contract when you leave the house and enter a public place to suddenly take personal responsibility for the emotions and sensitivities of everyone around you. It is the responsibility of the individual to take responsibility for their own emotions and sensitivities. If you're easily offended by people making stupid jokes, don't go to places where people could possibly be making stupid jokes. It's not their responsibility to make sure you feel safe and secure. And I already know what you're thinking "*Does that mean I shouldn't leave the house because I might become angered by stupid shit that has nothing to do with me?*" Yes, that's what I'm saying, if you're unable to maintain a lock on your own emotional state, and become offended by every damn thing, then do the public a favor and lock yourself away somewhere we don't have to see and especially hear you. And lastly, your remark about bigoted jokes showing a general lack of empathy is bullshit. Since you lack the perspective required to actually make that judgement. You're just as guilty of showing a general lack of empathy. Joking is some peoples way of coping with things. I know a person who was raped by her father as a child and she copes by joking about it openly. Now if some asshole SJW were to overhear her, they'd mistake her jokes as being crude and lacking empathy. But guess what, those jokes weren't for that eves dropping asshole they were for us and by eves dropping and implying meaning where there was none, that person is the unsympathetic asshole not the other way around.
Would the story have worked had she been anonymized, too? I wonder if there are too many relevant details to the story to actually keep her name disconnected from it. Edit: To be more clear, I think the context of the story and the reader knowing what the jokes were helps people to understand the severity of consequences possible with just a simple tweet.
does this apply to forex as well? 
Nope, it's quite clear what really happened.
yay social justice (warriors)...?
So if the alternative is a grey line, that makes the extreme more desirable? As an example, I don't want the US government to criminalize hate speech, but I prefer that neo nazis and the KKK not be permitted to spout rhetoric at PyCon. Is that an unreasonable policy decision?
Well, Disney is known for their large D
&gt; “Have you ever had an altercation at school and you could feel the hairs rise up on your back?” she asked me. &gt;“You felt fear?” I asked. &gt;“Danger,” she said. “Clearly my body was telling me, ‘You are unsafe.’” I try really hard to give people the benefit of the doubt. But this? This is stupid. Two people behind you cracking jokes and you feel like you're going to get beat up or worse? Grow up. 
I don't know man, that sounded almost... THREATENING to me. I better tweet about this, my life could be in danger.
They were likely thinking that they could avoid the inevitable twitter drama if they let him go. Little did they know, it made it worse. I can't really blame them for trying to distance themselves from the shitstorm.
That might be taking it a bit far. She's no sociopath, just an overly dramatic person. Someone who's made it their lifes work to be a societal speed bump.
[Halp Halp I'm being repressed](http://25.media.tumblr.com/49c35091e4d9d2716c7d32d7f0328f7a/tumblr_mj88inc4aw1rnzcl1o1_500.gif)
Did you even read the whole article? No one deserves what came of it. She deserved to be knocked down a peg, publicly ridiculed for her blind egotism and made to apologize yes, but it was escalated so much further by 4chan. She got 10x worse than he got.
I would subclass them if I needed specific functionality differences between the orderable classes and the abstract classes. The point of this pattern is to maintain a list of relevant classes so they can be iterated over. In this example, it's the leaves of the class tree that are of interest to the Menu class, but you may want to select a different subset for a different problem.
Yes. That is the natural and predictable blowback from this sort of thing. Because of an incident that happened to someone I used to work with (we were office mates), I'm now afraid of working with women. I wish I weren't. But I am. 
Seriously. My sister jokes about dongles on occasion. And dong, she lived in Vietnam for several years and has a few thousand left over. 
It looks to have been written by the contributor cancerhermit, here is a link to the page on GH where you can find the same string: https://github.com/cancerhermit/pg_dump.py/blob/master/gh-pages/index.html It doesn't look like his GH account has been active in the last few months. 
Yeah, and it's a tough middle ground ... because no one wants to ignore genuine sexual harassment either. It's just tough for the sexes to work together, and our culture puts all the burden on men to make that work. 
What makes something a professional setting? If you're a hobbyist who only uses python for writing an IRC bot that makes dick jokes for you, are you just not allowed to go to pycon anymore since its just for professionals? What about defcon? Old defcon was far from professional, but by now it's got so many corporations and three letter agencies that some would say its a professional setting.. so one year you just have to stop having fun with the hackers you know from irc and start making small talk about the weather and how soon the next friday is? If you did start up a non-professional programming convention where you wanted to encourage people to joke around and have fun, would it be possible to invite girls or would you just have the exact problem people have at professional cons?
&gt; If you are in a professional setting, especially if you are around &gt; people you don't know, just stay professional and respectful. That is the only way I ever behave. I just don't like the exagerated presuposition of malice/bla-ism when interacting with woman. Everyone is on tenterhooks due to the many recent high profile outrages. I would just rather avoid the whole thing together.
&gt; goddamn pc robots I'd have to imagine most robots are running some sort of Linux/Unix.
I completely agree with you, no one deserves to have the kind of threats 4chan levels against people they target. That said, her actions and attitude are way worse than 2 guys making dick jokes between themselves at a conference and it's not at all surprising that she's still unemployed, I can't imagine any employer who looks into her background during a job application would touch her with a 10 foot pole.
At the time did the code of conduct include language like "do not make others feel unwelcome"? Dick jokes trigger that whole boy's club/brogrammers thing for some people. 
FYI I believe PyCon changed their policies as a result of this to require people to report issues like this to the conference organizers. 
Making loud sexual jokes in the middle of someone's presentation is perfectly acceptable? Not in any conferences I've been to. Where do you have your conferences, the playground at middle school or something? Where I'm from people are actually mature and respectful. Hank did wrong.
Whenever I fear for my life, my first subconscious reaction is to take a picture of the source of my fear and tweet it...
&gt;....calling it racist and useless is our subjective opinion here. Hardly. It's the slogan of white supremacists, devised by a convicted terrorist from parts of Mein Kampf. Second, the "example" on the page has nothing to do with what the library claims to be used for; the "example" isn't an "example" at all. Another commenter here revealed that the same person has posted dozens of "0.01" versions of libraries with no code and just this same message. There's no ambiguity at all regarding whether this was an attempt by someone to just spam white supremacist propaganda all over PyPy. &gt; If the PSF comes out and says, "We must secure the existence of our people and &gt;a future of women programmers" would you be just as upset? If they're ripping it from Mein Kampf, of course. &gt;There isn't anything hateful about the sample statement. There is historical context &gt;that can be interpreted as hateful. Let's try this again... this IS the slogan of white supremacists. It has no other context. I learned this not because I'm a Neo-Nazi, but because doing a Google search on the phrase revealed this in 2 seconds. It has no other use, no other meaning.
If you are being professional, then you have nothing to worry about. Not talking to members of half the population doesn't help anything and could be argued will only make new problems. 
&gt; He noticed ruefully that a few days earlier the woman – her name was Adria Richards – had herself tweeted a stupid penis joke. She’d suggested to a friend that he put socks down his pants to bewilder TSA agents at the airport. This is the part I always have to point out. Not only did she over-react. But she's a freaking hypocrite as well.
The author changed one fellow's name at his request. The other party could have presumably asked for the same.
No, I don't have a son. I'm secure in my job, so the reverse issue simply doesn't effect me that much. 
But see, her doing it in the privacy of twitter is different because she's a woman and can't kill anyone with her penis.
Go ahead and read the article. Why specify that she deserved every bit of it if you didn't know what that meant?
&gt; Not talking to members of half the population doesn't help &gt; anything and could be argued will only make new problems. I talk to them. I just don't go out of my way to be super friendly. In the last few years I have adjusted my conference persona (when interacting with woman) from a super friendly outgoing professional guy, to a pleasant professional guy. I see nothing that anyone can complain about in that statement. If I hadn't previously told you I was being less forthright you would never had noticed. 
I would say that that if it is a setting where there is a code of conduct (which PyCon does have) and that it states "all communication should be appropriate for a professional audience" is clearly a professional setting.
You should read the comment thread and put what I said into actual context. Go pick a fight with someone else man, you're being childish.
She called the internet to action, no one else to blame for the fact she's still feeling the effects of her actions.
Most of the western self proclaimed feminists are. If you want to find the feminists worthy of respect, go look at the feminists in the middle east and in particular those fighting in the Kurdish militias against ISIS. Not a danty flower among them, yet they are doing more for womens rights to live in peace than the western feminists are.
Yeah, it's basically "sales rep" if you get to write your own job title.
Who was his employer? I'll make sure never to work there.
Yeah, but no one deserves death threats from 4chan. It's basically a human right that you don't deserve a 4chan death and rape threat campaign.
You should better read the **answers** too! This is imho quite useless, yeah instead dangerous to know!
The worst part of that whole situation was that shithead Adria Richards fomented all that outrage over *a dongle joke* less than 30 minutes after she herself had made a dick joke over twitter. From the very same conference no less. She is just a bigoted cynic whose entire career strategy hinges upon exploiting poisonous identity politics. 
Perhaps I should clarify. I'm not defending this users' work. I think I'm playing too much devil's advocate, or an advocate of free speech. It isn't my intention to support or make it seem like what they did was in any way OK. If that was the impression I gave, I apologize. 
This is similar to a 'traited' system, or 'mixins'. Very great way to compose functionality across components.
less than 30 minutes after she herself tweeted a dick joke. 
I'd rather not split hairs on the definition of what is considerate and what isn't (it surely isn't up to me!). I would like to believe that a considerate python user was sensitive to the context to which others would interpret their work.
He was not loud, he as talking to his friend. I go to academic conferences and constantly hear people making innuendo, silly sex jokes, or plain out chatting when they get bored during someone else's talk. That's normal. Now, if you jump off of your seat and scream as hard as you can, then yes, you're a douchebag. Talking to a friend beside you, perfectly fine. Grow up.