Strange, the package we need to install from [here](https://launchpad.net/~no1wantdthisname/+archive/ppa?field.series_filter=precise) has no edition for 12.04 Precise.
Yes, NI-VISA is installed... I surprisingly just got this working. * In Eclipse/PyDev I had to explicitly link the VISA Framework under Properties &gt; PyDev - PYTHONPATH &gt; External Libraries * Also, since I installed only the 32-Bit version of Python I had to reconfigure my interpreter under Properties &gt; PyDev - Interpreter/Grammar * I actually still get a "red X" and an "Unresolved Import" errors in Eclipse on my "from pyvisa.vpp43 import visa_library" and "import visa" lines, but when I run the program it works no problem... * Now it seems its just a matter of learning the SCPI language to send some functional commands to this thing. So far I can get a list of connected devices and ask for each device's Identification String. So thats a great start! 
Why bother when you could write a function using keyword and default arguments instead? At the very least, `within` does not seem optional so it shouldn't be treated as such. If for some reason you need to re-use the partial builder, that can also be better implemented simply as a function with partial application. Also, why use Builder("dossier") versus DossierBuilder? If the latter is misspelled, the error can at least be detected statically.
Ah, that makes sense. I always make them executable because I want tab completion on the filenames. It makes sense that you wouldn't worry them about that. Also make sure to see CognitiveLens' comment on string substitution. I hope my comments were helpful nonetheless. :)
You mention in some of the comments that you will be teaching engineers. I recommend that you start with the introductory material in [scipy-lectures](http://scipy-lectures.github.io/). 
Is dateutil better than pytz? I already tried to find the answer, but Google and StackOverflow didn't helpful for me. http://stackoverflow.com/questions/9755540/whats-the-difference-between-pytz-and-python-dateutil 
Is asm.js a similar approach to a similar problem?
out of curiosity. why is the first iteration of the very inner loop unrolled, but not the rest?
asm.js is a different approach to a different problem.
"Revolution OS" If you know a little about what Linux is, have heard the name Linus Torvalds, and wondered how the kernel + GNU fit together, or what the connection between open source and Linux is, then this documentary is especially relevant. It closed many of the gaps I had in these areas. It takes you back to the people who had a large part in starting all this, how they got so relevant in the first place (databases and web servers), and alot more. Highly recommended to my nerd friends. 
RPython and asm.js are both low-level restricted subsets of language specifications that enable more optimal compilation to machine instructions. How are they different?
Why do you care about wallpaper for a programming language? I've never even thought about a wallpaper for a language I use. 
For the same reason one keeps a t-shirt of their favorite musician. Also to promote it, among other things.
1. What does a programming language look like, anyway? 2. Who cares about wallpapers? If you're even half serious about programming, you'll never get to see the desktop anyway, because the whole screen is covered with your IDE or text editor all the time.
Python code is beautiful enough, no wallpaper needed :)
Fair point, and I don't want to argue with your view. However to explain a bit more, I look at each programming language as a tool. To continue your analogy I would not wear a t-shirt with a hammer on it if my job was a carpenter. 
Nah. Python's a workhorse. It does the job, and it has fewer rough edges than the alternatives. But "beautiful"? Sorry, no. Just fewer pimples and warts than the rest of the pack.
I like `Ellipsis`. I often use it as the opposite of `None`, i.e. meaning "everything". I look forward to using Python 3 and being able to spell it `...`. But using it instead of `pass` or `True` is weird.
Come on ... the GIL is not wart, it's a feature \*runs away\*
Thanks for the advice and compliment! I'll definitely make a few changes.
I searched for "python language wallpaper" and found quite a few. Pythonistas appreciate good design, which is why we (IMHO) defer templates to designers: http://en.wikipedia.org/wiki/Separation_of_presentation_and_content
Python for creative coding exists in many forms. Check out nodebox or many of the OpenCL related links. I've played some with Jython and Processing. One could make some really great things with PIL, pySVG, or pycairo!
From [PEP 20 - The Zen of Python](http://www.python.org/dev/peps/pep-0020/): Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! See also: import this
Yes I know Nodebox, it's pretty cool. It is not widely used though and I havent seen much done with it. 
I'm serious about programming and I'm serious about design as well. It's not just about the wallpaper. It's more about Python's philosophy. You need a good design/brand as well. In no way I'm promoting style over substance. I agree that Python is a programming language and its substance is much more important. But, just a little bit of eye-candyness would not hurt at all. Take for example UBUNTU.
Unless you really liked your hammer.
I may be burnt by C++ operator overloading, but I just hate it when I write `a = b + c` and have no damn idea of what happens there. I think I might enjoy an operator-less language where you'd have to write `a.assign(b.inc(c))` or something instead. My real-world example: if session['username']: No, `session` is not a `dict`, they're just being dicks in pretending that it is. My point is, having lots of hidden functions that you can overwrite to change the standard behavior in subtle ways is not an advantage per se. It has its upsides and downsides. 
It's good, but I think the Pandas documentation by the same author is a pretty good free substitute.
do you really?
http://browse.deviantart.com/customization/screenshots/nix/
Do you really use transparent windows for code? My terminal is transparent too but only slightly, the editor as to be totally opaque.
All the time. From https://help.ubuntu.com/community/CompositeManager/ConfiguringCompiz : &gt; Make active window translucent/opaque (built-in) &gt; &gt; *Alt + mouse wheel up/down* &gt; &gt; Make active window translucent/opaque (with the opacity plugin) &gt; &gt; *Ctrl + Shift + Scroll*, or right-click the window's title bar and select Opacity (seems to be absent in current compiz cvs.)
\n|m
Yes, I know about the website redesign. And *that* is good thing. 
http://www.reddit.com/r/Python/comments/1ankk4/is_python_a_good_tool_for_data_visualisation/
RPython is a thing to write interpreters in. It's designed to be relatively pleasant to work with when writing RPython. it's not Python, but we consider it at least better than C++ asm.js is a target for compilers that's not supposed to be used directly on top of that - RPython is much higher level. It has garbage collection, it has powerful meta-programming and high-level data structures.
Thanks! http://doc.pypy.org/en/latest/coding-guide.html
Can't argue with this logic.
When referring to the program you run, 'python' on its own generally refers to the standard python interpreter. If you have python installed, you should be able to type `python` in a terminal to open this program, then you can type any python code to run it. ipython is a shell for python, which adds a great deal more functionality to this basic command line interpreter. Stuff like tab completion (press tab to see possible completions for what you've typed), syntax highlighting, useful magic functions like `%timeit` to time how long a line of code takes, and much more. It doesn't add more to the language, but it's much more powerful and useful as an interface. More recently, it's gained a full gui mode and a browser notebook mode, the latter of which is a slightly different interface. I think pylab mostly refers to the matplotlib plotting library. This is an extremely powerful, flexible library for making graphs of more or less any type, very popular for scientific work. Also, ipython has a pylab mode that makes plotting particularly easy in a matlab style way. &gt; I don't know if these work separately, contain each other, or require one another. Overall, `python` is the standard interpreter, `ipython` is a shell for this (so you need python installed as well), and `pylab` is a set of libraries for python that you can use in either shell. &gt; What do I need to get to start learning how to code and how to plot? If you're using windows, I'm not sure what the best source for python is but overall you want to download any full python distribution. If you're doing plotting (and perhaps other scientific work?), pylab is a good direction to take, and you'll want to look at the numpy and scipy libraries as well. I'd personally look to [Enthought's free python distribution](https://www.enthought.com/products/epd/free/) which has all the basic modules for scientific work, but I don't know if something better is available for general work on windows. If you're using linux, just install whatever you need with your package manager, python is very popular so it'll probably all be available by default. If you're on OSX...I'd look at Enthought's distribution still, but again someone else may be able to suggest a better one. This is a bit of a secondary thing though, if you're new to python then first look at a good general tutorial like [Learn python the hard way](http://learnpythonthehardway.org/) and go through that.
Good summary and I would also recommend the Enthought distribution. Just on a side note about pylab: Pylab is a approach to the make the matplotlib api more usefull for interactive analysis of data. This includes a stricking similarity to the matlab idioms. It is implemeted so you can basically forget about plot classes etc... and concetated on the "hard" stuff (functional programming). Also I would not recommend using pylab in a standard interpreter because it will bock any futher output when using the interactive graphing capabilities. It is better to use it in Ipython (non blocking) either by importing: from matplotlib.pyplot import * or by using the CLI invocation: Ipython --pylab BTW: Most awesome feature is the following CLI command: IPython notebook --pylab 
I've seen a lot of people prefer Anaconda to Enthought in this subreddit. Any comment on choosing between the two?
Sounds good! Thanks for your quick and helpful responses!
Anaconda includes a lot more in the free version - it's more like a free base with some extra features you can pay for, whereas EPD Free is just a few core packages (although it's still got everything you need for a lot of data analysis). Enthought have been doing this for longer, though; Anaconda is relatively new. Enthought have also recently launched [Canopy](https://www.enthought.com/products/canopy/), which includes things like an IDE and a GUI package manager. I haven't heard from anyone using that yet, though. Both companies let students and academics get the full version for free. And representatives of both visit this subreddit at times, if you have questions for them.
Why's that?
I won't directly answer your question (others have done that quite well), but I will tell you not to make it more complex than it is. I assume you're wanting to plot scientific data, in which case the minimum almost certainly want is: - ipython - scipy/numpy - matplotlib As others have mentioned, you there exists a one-stop solution for downloading all of this: Endthought. 
Meh. I tried it out, but it sort of got in the way. I'm more of a drop-down terminal kind of guy.
This is a fork of [pythonbrew](https://github.com/utahta/pythonbrew), which is a *really* easy way to manage multiple Python installs. Each install can then initialize multiple "sandboxed" virtualenvs. However, Pythonz has good support for PyPy, Stackless and a few others. Where pythonbrew only supports standard Python. Indeed, pythonbrew wasn't updated for about a year circa 2011 then it received some love around Christmas time of 2012. It has been another 5 months or so and the pull requests and issues have stacked up. I think there have been offers from users to take over... something needs to happen on that front. That said, I haven't used pythonz as I was spoiled by Pythonbrew's interface. This part was added to the pythonz doc's a few days ago and I may give it a fair shake as it is more clear about its intended use: The recommended way to use a pythonz-installed version of Python is through virtualenv, e.g.: mkvirtualenv -p ~/.pythonz/pythons/CPython-2.7.3/bin/python python2.7.3 My issue with this approach are managing a giant list of virtualenv's as they grow exponentially with PyPy, Stackless, Cpython and Jython installs and the virtualenv's of those virtualenvs. Its a good problem to have, however, as managing the disparate installs completely manually/individually requires a great deal of work. 
python.. is a language, ipython is a tool for writing python, and pylab is some python for making charts with python.
&gt; Endthought I hope not!
That is a good point. It has to be used sparingly or not at all. I fully agree that it might even be a disadvantage.
Empty method often times does something more low level than the problem I am working on. For instance. If I am writing business logic, I don't want to be distracted with an authentication function my business logic needs. So I will just make it, and have a pass in it. Till I am ready to work on tying in authentication. In an MVC pattern I will sometimes write a controller first without having a model. If I have decided on the model's name doesn't mean I have decided on all the fields and model relations. It's how my brain works best, not everyone's same.
Hadoop with mrjob (https://github.com/Yelp/mrjob) and Impala from Cloudera is a great stack.
Will it support buildout environment ?
Sorry, but found it in the FAQ: &gt;1. Is this a terminal emulator? &gt; &gt;No. Shell (cmd.exe/bash) REPL can be used for simple tasks (file creation, git init etc.) but anything terminal like (mc, **ipython**, vim) will **not** work! SublimeREPL has a sister project: SublimePTY that aims to bring real terminal emulator to SublimeText2. SublimePTY seems the right one for IPython!
I completely agree. I think there are no bad or good languages, these are just tools, and we should use a right one for every job. Having to face a csv that I need to "noodle" and pop into a database, my hand will reach for `cat | cut | awk | mysql` first, `perl -lne` second. I doubt python will ever be called for in this case.
Thanks. CognitiveLens pointed that out too.
http://imgs.xkcd.com/comics/workflow.png
Yeah, I think their marketing team was also responsible for "Swastika Bagels" =/
Wait, you actually think that's their real company name? You added a d.
Oh. Ooooohhhhhh! Wow... I've been misreading that for months!
That is not updated. The latest version from git supports IPython. 
Read sidebars of subreddits and please ask question in /r/learnpython.
Man, "Bayesians" are more annoying than atheists and functional programming enthusiasts combined. It's a bunch of stats theorems and numeric methods, not a goddamn religion! &gt; If frequentist and Bayesian inference were programming functions, with inputs being statistical problems, then the two would be different in what they return to the user. The frequentist inference function would return a number, whereas the Bayesian function would return probabilities. Today I learned that using p-values makes me a Bayesian. &gt; Rather than try to guess λ exactly, we can only talk about what λ is likely to be by assigning a probability distribution to λ. &gt; This might seem odd at first: after all, λ is fixed, it is not (necessarily) random! How can we assign probabilities to a non-random event. Ah, we have fallen for the frequentist interpretation. Yeah, as I said it turns out that it's totally impossible for a "frequentist" to consider a coin with a fixed but unknown probability _p_ of landing heads and then compare probabilities of seeing some particular sequence of coin flips for various values of _p_ and, conversely, assume that p itself was drawn from a uniform distribution and talk about most probable values and confidence intervals based on observed data. The book appears to be really interesting and relevant to my interests, but this smug bullshit really turns me off =(
Trust me: Python is my favorite programming language, but I wouldn't recommend you to use it for plotting. Matplotlib is the worst Python package I ever came across. Have a look at R and [ggplot2](http://docs.ggplot2.org/current/), it's much better suited for creating plots.
Hi, author here :-) &gt; This appears to be linux only. It's unix only, I use it on Linux and OSX. &gt; Seriously? Yes, what's wrong with that? It's a short bash script, you can check the content if you don't trust me :-) &gt; I'm not seeing sudo-pythonz anywhere. It's an alias contained in the bashrc file you need to source. It takes care of setting the appropriate paths and then running pythonz.
I've been doing a little python, and I have no understanding if networking, so I'm looking forward to your socket server post!
I disagree. ggplot2 is cool; and I think that matplotlib is one great way to visualize data using Python. * http://scipy-lectures.github.io/intro/intro.html * http://scipy-lectures.github.io/intro/matplotlib/matplotlib.html * http://www.reddit.com/r/Python/comments/1ankk4/is_python_a_good_tool_for_data_visualisation/c905ssg
So, you've installed pip using the plugin downloaded [here](http://code.google.com/p/pythonxy/wiki/StandardPlugins)? if so, I would have hoped that because it's especially packaged for Python(x, y) it would create some kind of meaningful start menu entry. If there isn't anything for pip specifically, see if there's a Python(x, y) specific shortcut for cmd that sets the appropriate environmental variables including Path for you. If that exists, try running pip there. If you can find the actual pip application in explorer, shift and right click white space in it's directory, and choose 'open cmd here'. Try runnning pip then. If this turns out to be a Path issue (ie. you can find pip, pythonxy doesn't give you any magic to access it, and cmd can't find it), Google how to add to add a new directory to your Path. Hopefully some redditor with a Window machine will chime in on what pythonxy is doing.
I use Anaconda now. It's package manager is built in. It's also 64-bit and includes most of the packages I need. Sadly no wx or vtk. https://store.continuum.io/cshop/anaconda/
I don't fully understand your problem. You want to use pip on win 7? Download and install the windows binary from here, http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip and you are good to go. If 'pip' doesn't work in command prompt, go to advanced system settings and add it to the end of the PATH variable and re-open the command prompt. 
[docs](https://github.com/Batterii/webobtoolkit/blob/master/README.md) to get you started. 
I am very aware of `import this`. After all, Python is one of the four languages that pay my rent (and, I may add, the nicest one of those four). The "Zen of Python" is correct on some things, questionable on others, and outright wrong in a few things; also, Python itself violates its own "Zen" on numerous occasions, and the Python culture often takes `import this` as an excuse to do things sub-optimally. Again; Python is a great language. But it's not the God-sent Mother Of All Programming languages that will give you instant unicorn farts in three lines of code.
Mine says "Linux Mint 14".
yes, storm is also a library for handling sshconfig. I have plans to make some docs about using it a library.
I've moved on to other projects for the moment, but if you want to merge this with the [images2gif](http://visvis.googlecode.com/hg/vvmovie/images2gif.py) script I've seen floating around-- that would be a very welcome addition! 
http://i.imgur.com/f4sriiF.png
To use it, before pairing the device do: $./bluetooth_player.py Then pair the device through the normal bluetooth configuration GUI.
**FWIW**: pthree@083:~/Documents/python$python test2.py **0:17:16.419236** pthree@083:~/Documents/python$cat test2.py import numpy from datetime import datetime x = numpy.array([1.0]*1000000) y = numpy.array([4.0]*1000000) start = datetime.now() numpy.correlate(x,y,mode='full') end = datetime.now() print end - start pthree@083:~/Documents/python$uname -a Darwin Erics-MacBook-Pro.local 12.3.0 Darwin Kernel Version 12.3.0: Sun Jan 6 22:37:10 PST 2013; root:xnu-2050.22.13~1/RELEASE_X86_64 x86_64 &gt;&gt;&gt; import sys &gt;&gt;&gt; print sys.version 2.7.2 (default, Oct 11 2012, 20:14:37) [GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] Late 2011 13" Macbook Pro: 2.8Gghz i7 (Sandy Bridge) w/ 16GB 1333mhz DDR3, Samsung 830 256GB SSD
Unless you have a Matlab comparison, this doesn't mean much. 
No, it doesn't, but I just started learning python a few days ago and I wanted to see how this laptop stacked up ;)
Python(x,y) has three libraries for dealing with Excel in the base distribution: xlrd, xlwt, and openpyxl. Are these not sufficient for what you want to do?
https://bitbucket.org/pypa/setuptools
The script http://peak.telecommunity.com/dist/ez_setup.py doesn't work with Python 3...
WebFaction is pretty good, I've set up Django apps there easily.
I love having the freedom of a vps. Learn to set it up a few times yourself, then just use puppet or chef or something. I haven't tried either, but I hear good things about puppet.
I'd just install linux. Or, if that's too much a a commitment or you need windows running on bare metal for some reason, run a linux vm.
It seems like English might not be OP's first language, so we should give her/him the benefit of the doubt. Although I too had to choke back buzzword-induced vomit.
AWS EC2, a single micro instance will have you covered for like 95% of your hobby use cases. Easy to setup, free for the first year (first time users), you get ~600mb RAM, choose your own distribution etc etc. I've used webfaction shared hosting as well, and they're fine, just not as much bang for buck. From memory there's a few folders in your home directory that you don't get access to, and can only alter via their web interface, which I find really annoying.
Hi, it looks cool, however I cannot think of where I could use it. What do you do with it?
I've developed [pip-Win](https://sites.google.com/site/pydatalog/python/pip-for-windows), a tiny package manager for windows. It has almost 3,000 downloads now.
Musical python stuff is always cool. You might also consider: 1. Putting the code on github/bitbucket, the accounts are free and it would give people a chance to help you out with testing and the like. 2. Maybe add a specific use-case for your project, there appears to be some in the comments but maybe move that into a separate README file. 3. A bit more of an explanation of all the terminology involved. I personally have never heard of bluez or a2dp (but I may be the odd one out) Good work though. 
Cool. Is it released under some specific [open source license](http://opensource.org/licenses)?
[AppFog](http://appfog.com/) is quite good. :)
1. Use pep8 naming, even if you can't use it on your own project it will upset people on the internet less if you make things pep8 before posting them. 2. I think the right way to handle this would be to wrap pool.map in a try...finally with pool.terminate in the finally - this should mean the child processes get cleaned up when a user hits ctrl-c.
Puppet is great, but the real benefit won't roll in until you have to manage several servers.
I am absolutely in love with [Digital Ocean](https://www.digitalocean.com/?refcode=0e1810a428ac) (referral code in link). You can do pretty much whatever you want with it, it's well-priced for what you get, and if you're inexperienced with server administration and maintenance, you'll learn a lot by installing the things you need. I also got a $10 credit for using the OMGUBUNTU promo code, though I'm not sure if it's still active. Basically, the promo code is good for 2 months of free hosting with no commitments. Non-referral link: http://www.digitalocean.com
Heroku is designed with python in mind
Openpyxl will likely be what I need. Found it and installed it, but after your comment I realized that I something must have gone wrong with my install. Cue uninstall / reinstall. At reinstall I took a more informed look at the options. More than a few of the packages that were part of the "full" install were not selected by default. Notably pip, xlrd, xlwt, and openpyxl. Ah, well, reinstalling now :) Thanks.
Cool, thanks!
Similar to webfaction, but, imho, even more flexible: [DjangoEurope](http://djangoeurope.com/) and not very expensive.
&gt; I love having the freedom of a vps. Freedom is nice, but I do not like having headaches to do admin work for mail, database etc. servers, but want to jsut focus on web stuff.
WebFaction truly deserves all their credits indeed.
How is the community/support/documentation to help with the sys admin and maintenance stuff?
Actually, no, it's primarily used for Ruby. Their first supported language was Ruby (for like their first year? or two?), their tooling is mostly in Ruby, and they have a lot more customers doing Ruby. That said, their support for Python is first-rate.
escape `#` at the beginnings of lines with `\`, else your `#1…` becomes `&lt;h1&gt;1…`. and i don’t know why you’re downvoted: your second advice sounds good.
Sure! Go here: http://www.lowendbox.com/blog/ramnode-15-60year-128mb-ssd-openvz-vps-in-atlanta-seattle/ Use the link on that page to get 35% off of the cost of the server when you checkout. I went for the 256MB KVM SSD option because KVM supports doing OpenVPN connections and OpenVZ doesn't. I paid for a year in advance via paypal and it cost me $38.88. After you get through the purchasing process, you will get some emails describing the next steps. You can remotely load an OS using a very simple web-based application. I used the 64-bit Debian minimal load, but pick whatever you want from the list. They have lots of options: https://clientarea.ramnode.com/knowledgebase.php?action=displayarticle&amp;id=48 I did upgrade my debian load to wheezy (7.0) which was just released, and you need to make sure you stay on top of system and security updates or you will get pwned. After that, install whatever you like to use and play around with it. I'll be happy to answer questions if you try it and get confused.
Thanks for the info! Shame python doesn't seem to be supported.
I will use it for versioning mongodb documents.
It's a trick to ensure that `x` has the right type as `y` without explicitly declaring it. Another option would have been to explicitly add the type information of `x`, but that would have destroyed the generic interface that we were going for.
I also Love Digital Ocean. However there isnt really a community or documentation. You get a box (well a virtualized box) and you are in charge of 100% of its care and feeding. They keep the power on and the net connected and you do the rest. The best part is they charge by the hour, until you hit your monthly cap. so you can spin up their most powerful server, at almost $1.50 an hour to say, compile crazy complex software, or render stuff, or whatever, then take a snapshot (which is a damn near free disk image) and destroy it so it keep charging you. all in all they 2 hours you used a mega powerful computer cost you only $3. It is root access, no frills, command line hosting at it easiest! (and cheapest)
Well, for example with the free usage tier -- you mount storage into the instance so although the image itself is stateless your storage is separate to it. You'd have to backup with any EC2 or non-EC2 option, though.
Which operating system? Back when I used windows, I did some simple scripting of photoshop using win32com. I don't really remember the details, but a quick google brought this page: http://techarttiki.blogspot.com/2008/08/photoshop-scripting-with-python.html The same tactic could possibly be used for illustrator. This link may be of use: http://www.noah.org/python/com/illustrator/
I think it would be cool to pick up some JavaScript if you haven't. Depending on what you're up to I have some other ideas: 1. You can use Python to generate SVG. 2. Project Sikuli is a GUI automation tool that can hit buttons and press keys and such, and it uses Jython. 3. Inkscape has some nifty scripting options. Good luck! I would recommend this stuff perhaps after checking out the Illustrator JavaScript. 
Sorry, forgot to specify but I use Windows, so that might be useful. Thanks
These sound very interesting, I'll check them out. Thanks!
Good work - thanks for posting this.
http://www.pip-installer.org/en/latest/installing.html#using-get-pip
and this obscure hack does not destroy anything? how on earth, I as a user have to guess that? Also what happens if you don't do that?
For Python hosting i can strongly recommend [PythonAnywhere](https://www.pythonanywhere.com/). Like the name already says it's made especially for Python hosting. Beside that it's more than a hosting service since it also provides a online IDE.
Yes, I know how to install pip. I was commenting that the link in the above image isn't as universal as it should be.
GUI applications are notoriously difficult to test. The best way I've seen is to spend as much time as possible trying to break it, and having other people trying to break it. Children are good at this, and people who don't really know what the application is supposed to do.
Macster? hm. I prefer the nice and simple username of Macuser. That's just my preference.
My first programming language!
Yeah, that's what I use, but not an IDE.
I'd possibly offer a free `create()` function that calls the `.create()` method of the builder on the constructed object. This is primarily for dragging the call chain into an expression and avoid the noisy line continuations: dossier = create(Builder("dossier") .within(self.portal) .titled(u"Dossier")) 
Thank you!
I'd say that they announced that they were *going* to merge. This is the actual event.
Have you tried Python and Gimp?
[A historic occasion.](http://i.imgur.com/JC3DC5d.jpg)
Yeah I also used logo at school too :') 
Mine too....but surprisingly advanced for a teaching language - was derived from LISP. In true 1980's k-12 computer class fashion, I was promptly frog marched into DOS BASIC once I got older and didn't appreciate the details of the logo language until recently...
I just signed up for the [web developer](https://www.pythonanywhere.com/pricing/) price point at [PythonAnywhere](http://pythonanywhere.com/). PythonAnywhere is Platform as a service (PaaS) company which means they are in business to provide a platform to build from. If you are a web developer, I am quite positive that you have heard of Heroku, Appfog and many other PaaS providers. PythonAnywhere is a bit different in that they are not aiming to be a one stop shop for all popular language frameworks. They are clearly attempting to lock down Python dev in the cloud. The product at PythonAnywhere is really innovative among the PaaS companies that provide Python support as they require no local tools to be installed. They also have the notion of file browsing for decent visual project management and editing. They also offer DropBox sync out of the box. I particularly like that no local tools need to be installed. I can use ANY device in virtually ANY location that has internet connectivity, HUGE! What I mean is, if I want to bang something out on my phone, tablet or my parent's 1999 HP that sounds like a jet... No problem as long as it has a decent browser and internet. This is BIG win for PythonAnywhere and Python developers alike. Heroku has integrated the Cloud9 webIDE and has 'management' apps for Android/iOS: [Nezumi](http://nezumiapp.com/#/iphone), but both are third party projects and that can be good and bad. Appfog has no concept of File browsing, Consoles or webIDE's... I mean, they aren't even part of the equation, but Appfog supports a ton of different frameworks/languages. I don't want to bash on Appfog, they are a good provider and their tools are good, but PythonAnywhere has them flat out beat in some ways. The PythonAnywhere blog actually has a more comprehensive blog post on [Heroku v. PythonAnywhere](http://blog.pythonanywhere.com/65/). NetTuts+ has a nice comparison between [Heroku and Appfog](http://net.tutsplus.com/articles/editorials/appfog-vs-heroku/). PythonAnywhere is based on workers and each worker has 500mb of RAM. So at $12 a month, the Web Developer account on PythonAnywhere can have 10 webapps with 3 workers each. If you need to scale an app, I would venture to guess you could potentially deploy more workers towards a particular app if needed (don't hold me to that). The "bang for buck" or "pound" if you are in Britain like the founders and a Python developer is really compelling. One can't possibly enumerate all the possibilities for using the PythonAnywhere service. From hacking basic python scripts to running bots against irc/chat to scraping web sites/twitter to full blown web app development with Flask, Django or any of the other [batteries included libraries/frameworks](https://www.pythonanywhere.com/batteries_included/). The price point for this service is unheard of, but you need to be a Python developer. Let's take a look at a static site generator, Pelican, for an example work flow... Lets say I have an idea or thought I just need to blog. My blog is a pelican static site and I am not able to use my laptop for whatever reason. I can log into SSH into PA via one of the many Android SSH apps (or chrome for Anroid, or ssh from vim touch), create the blog post (way slower on phone), start a bash shell (or use the Android ZSH shell), issue a few commands and it is done. Then I commit and push via git and/or sync to DropBox. BAM! Blog post from the cloud with a crazy web-based workflow not possible just a few years ago. VPS are cool, but I am not a good sysadmin... I prefer coding to administration. Full disclosure: I wrote this blog post yesterday: http://michaelmartinez.in/python-anywhere-means-anywhere.html
I've never used eventlet. Mind sharing some thoughts on it?
Take the next MITx 6.00x Intro to Computer Science and Programming offering on [EDx](www.edx.org). You'll get great python exposure and the second half goes through a lot of scientific and statistics applications. They haven't officially announced it yet as far as I know, but expect one in the fall.
I would recommend trying out [OpenShift](https://www.openshift.com) - it's Red Hat's Cloud Computing Platform as a Service (PaaS). There's already an [OSQA-openshift-quickstart](https://github.com/openshift/OSQA-openshift-quickstart) (kind of like a template) for OpenShift app deployment. You might want to check that out.
Where I work, we make point-of-sale systems for specialty retailers, and we basically do black-box testing. I find the best thing to do, when you're trying to break things, is to imagine and model the most confusing interaction between customer and cashier that you can dream up. I try to imagine the customer being confused about what he or she wants to buy, or how many of a particular item, and that this happens after TOTAL has been pressed; and that the customer is going to pay by check, no, wait, by credit card; no, wait, part check and part credit card; oh, is it too late to use my coupon; that the customer is going to enter her PIN, but now has run 5 steps in the other direction because her kid is climbing on some fixture (provoking a timeout at the PIN pad); I try to think up the most confusing returns situation; et cetera and so forth. Doing it this way creates crazy scenarios, and, honestly, goes a long way to mollifying the boredom that comes with QA testing of software.
You'd have to hook directly into a downloader library rather than a subprocess
youtube-dl is intended to be used from the command-line. See also https://github.com/rg3/youtube-dl/issues/308 .
How many apps can you have running with one $8.50/month (paid yearly) or $9.50/month (paid monthly) account? 
They're configuration management systems. You put together various files to describe what should be installed on a computer/VM, then let Puppet/Chef run everything for you. Configuration can be anything from very simple (install 10 packages, make a user) to setting up a very complex environment. They also handle updates. I recommend working directly with a VPS first, though. Even with Puppet or Chef doing things automatically, you still need to know what's going on.
I'm also a satisfied ramnode customer. I think I'm paying 8 something (usd) a month for far more than I need, since I just use it to host my resume and monitor irc channels. I'm also a big fan of kvm over openvz, since openvz's shared kernel between containers can limit the network stuff you can do. I'm not sure how exactly, but I've had some iptables issues before. Also, the freedom to run whatever kernel frequently means you have more distro options. Xen has these benefits as well, but kvm's built into the kernel now.
I hear [Sikuli](http://www.sikuli.org/) is the shit. My personal preference is to not test GUIs and instead test models &amp; controllers, then have the GUIs be a thin layer on top of that. (after all, most GUIs need to be tested for usability not correctness, and usability can't be tested automatically.)
From your post, it sounds like Logo has been revamped as [Netlogo](http://ccl.northwestern.edu/netlogo/), a pretty simple language directly represented as visual models. I've taken some classes that make use of it during my time as an undergrad and I must say the visual aspect has been very helpful to understand programming concepts. Check it out, especially some of the preset models in the models library.
thanks for the advice - I should have read the formatting help
I'm not sure, but I don't think there's a limit.
Note: this is personal opinion, and not representative of any company I work with. This isn't an example of unrolling, it's an example of type inferencing without static types or templates. I haven't actually checked what happens in Numba when this statement is not used, but thanks for pointing it out, it is worth testing. Here are the two options I see for writing code when we want the type of `x` to be derived from a reduction over the elements of `y`. 1. `x = 0/0.0/+-float_max/+-int_max` This assumes either an integral or floating-point type for `x`. `0` is probably the most neutral of these, but in many languages (including Python), it still implies an integral type. 2. `x = y[0]` We want `x` to have the same type as `y`, and nothing provides stronger inference than a direct assignment. In many reduction operations, this initial assignment can work. I don't know how the inner core of PyPy works, but I would be very surprised if it doesn't take advantage of similar type inferencing.
If you'd like a python-native solution, try out salt stack.
This is seriously good news!
A bit OT, but why is the interface for [mail.python.org](http://mail.python.org) stuck in the nineties?
You need to use EBS for persistent image storage. Not terribly complicated once you are familiar with the AWS lingo.
it would be great if it were possible to declare the types of the variables using Python3's annotations in order to make them explicit instead of leaving them up to the first usage.
AutoIt: http://www.autoitscript.com/site/autoit/
[mailman](https://www.gnu.org/software/mailman/) is a mailing list software, the interface is not part of python.org
Yes, I know. I used to manage such a list, about a million years ago. I was just thinking that the css (-ish) of the new python.org could be applied to mailman. The new python.org design is supposed to be at ~~http://preview.pytthon.org/~~http://preview.python.org/, but all I'm getting right now is a HTTP 503 error. EDIT: extra "t"; didn't affect the actual error.
Because tab length is user-adjustable. One person might like 2 spaces of indentation, another one 4, oldschoolers like 8, I'm pretty sure someone out there uses 3 or 6 spaces of indentation. A file indented with tabs can be rendered differently in different editors yet remain the same logically. In fact that's the origin of the problems. Python accepts parses tabs as 8 spaces because that's the traditional value. You can mix tabs and spaces and as long as tabs are rendered as 8 spaces in your editor, you wouldn't know. The problem is that some **working** scripts written with **mixed indenting** don't **look** like they should work when you use a different tab rendering setting in your editor of choice. Notice that it only affects people who use a different setting than 8, people rendering their tabs at 8 spaces see the script just like it parses. Thus there were two solutions: a) Standardize on a rendering of 8 spaces across all editors. We won't be able to customize how the script looks but we can continue using mixed indentation. b) Standardize on tabs. We won't be able to use mixed indentation but would be able to customize how they looks. PEP 8 went with c) Standardize on spaces. So it's like the worst of both choices together, but at least it's some standard.
That is changing in MM3 I believe.
http://wiki.list.org/display/DEV/Web+Interface links to the status and mockups. Not sure how much of that ever happened though.
Just a little documentation would make Sikuli more inviting. When the landing page for "documentation" is a jumbled changelog, you know you're in for trouble. I try to enforce the "GUI as thin layer" part by also creating command-line versions of the application's major functionality. Also helps for acceptance testing, since you can verify against "gold" data.
Nope, it isn't complicated. It's very easy to save permanent data.
There is very little headache, even if you aren't a complete Linux expert. Assuming you're using a Debian-based distro, any kind of database or daemon you'd ever want is a single `apt-get install` away. For Python web development, just install your databases (MySQL, Postgre, Redis, whatever), install Apache or nginx or whatever you want, and that's about it. If you do need to send mail from it, that's not much harder to set up.
Damn, wish I knew about 'import turtles' sooner. I taught my little brother some basic (literally, Small Basic) programming because I find it a good way to learn... could have started in Python had I known!
I would disagree with all your bad points. On braces vs. whitespace: no matter what language, you should be using good whitespace already, it's part of good coding standards. If I see poorly formatted code, I immediately clean it up before trying to understand what it does, I can not abide bad formatting. Python takes away the need to match braces, which can sometimes be compiler bugs that are difficult to track down in the sometimes inevitable cases where there's 10 layers deep. There are tons of IDEs out there that have amazing Python support. PyCharm, WingIDE, DreamPie, Emacs, Vim, Gedit, Geany, KDevelop, PyDev (eclipse), Spyder, Sublime Text, and Textmate to name a few. I personally use Sublime Text for most of my coding, but also have a (student) license for WingIDE, which is a fantastic editor. On library support, you should check out the incredibly extensive [pypi.python.org](http://pypi.python.org). There are literally tens of thousands, if not in the hundreds of thousands, of free, open source libraries available. There are even more on Github and other public repos. Not only that, but with pip you can manage your libraries, and virtualenv is a fantastic tool to go with it. I think you'll find that the Python community is incredibly strong and mature once you look into it. I don't know where you got the notion that there aren't many people working with Python, some have named it the language of the decade due to its steady increase in popularity. It's been used by a huge number of big companies, including Google and Dropbox. The community is alive and well and thriving.
&gt; On braces vs. whitespace: no matter what language, you should be using good whitespace already, it's part of good coding standards. Seriously. If C just forced you to use proper whitespace, people would just ask why you needed the braces. They make it easier for the compiler, but who cares about the compiler?
&gt; Not sure how I feel about indentation vs braces. Arrggghhhh. I've been hearing this since 1997. If this is still bothering you after a month then go see a doctor about OCD. It is a total non-issue in real world programming. &gt; Why does Python have fewer people working with it? For web apps maybe. Python was late to the game with web frameworks unless you count Zope which seems to have fallen out of favor. Outside of blogs and webmail apps, python does enjoy a solid user base. 
&gt; Why does Python have fewer people working with it? I guess that PHP had a big head start in term of popularity and ease of use. You can simply upload your .php file to any random server and chances are that it will run. It's a little different with Python which might be part of the reason why there are fewer people working on it. Python is being introduced as a general programming language and a scripting language in most case and not as a web development platform. That might also be part of the reason why. If you want to do a blog, Wordpress is still fine. Different tools have better usages than others. If you want to do a quick and simple REST api layer for something else, Python is hard to beat in my humble opinion. I'm a huge fan, adopter and developer which focus on Python but I do use Wordpress as well. A carpenter won't use a hammer for every task he needs to do. You shouldn't use Python for everything you need to do.
Well, if you run ISS on a Windows server, things might get slightly bitchy to configure and maintain -- but who'd want to do that anyway given the choice of vastly superior alternatives?
What's the gui written in? For web apps selenium is pretty nifty
I have no interest in that. Mainly, I'm a Python newb and just want to know if I can run Python programs on HostGator without having to do anything special. Will it just . . . work?
In what ways do you consider NetBeans superior? I'm sure you're aware of ST2's rich plugins, snippets, and macros, which can likely be made to act as you would want. Also, you're only considering Python for web development. PHP has been around much longer for web development, but try writing a desktop application in it, or doing scientific processing, or writing a command line tool, it just wouldn't be practical. Python is a general purpose language with a huge domain, I use it at work for scientific data processing, text processing, report generation, and GUI applications. Comparing PHP and Python is like comparing apples and oranges. If you're interested in web development with Python, lately Django has been really popular, and I've used the small framework Flask. Django isn't as easy as PHP to get started, but it's still quite powerful.
HostGator might not be one of the best hosting company for Python web applications. I suggest you have a look at [Webfaction](http://www.webfaction.com/services/hosting?affiliate=delizseemack). They have great support for Python, quick and awesome technical support and they are cheap. They have a simple to use custom control panel where you can one-click install a bunch of Python applications including Django.
You have to use JavaScript: http://www.adobe.com/devnet/illustrator/scripting.html But there is a Pyhton to JavaScript compiler :) http://pyjaco.org/ Pyjaco is a Python-to-Javascript compiler. It enables compilation of standard Python code into a javascript equivalent. This javascript code can then be run in a browser, or anywhere else that javascript is used.
&gt; In what ways do you consider NetBeans superior? I'm sure you're aware of ST2's rich plugins, snippets, and macros, which can likely be made to act as you would want. Most of the things I use are built into NetBeans. The code completion is superior for PHP, from what I can tell. It's just awesome. The IDE also looks for errors pretty thoroughly. Certain frameworks are built in, like Symfony and Zend and others. The documenting is awesome. xDebug support, built in. Superior jQuery editor. Superior PHP editor. All of this functionality comes out of the box, so it just works. I can't always say the same thing about ST2 plugins. I think it is just a lot of little things. It helps that Oracle is very responsive to developers wishes. For example, I suggested PSR support for the next version of NetBeans. It showed up in the nightly builds within a couple months. And this goodness may only be the case for PHP. With Python, I am using ST2. Right now, I don't have a retina display, but I am sure that is another area where ST2 shines. I'm not sure how well Java supports retina. &gt; Also, you're only considering Python for web development. PHP has been around much longer for web development, but try writing a desktop application in it, or doing scientific processing, or writing a command line tool, it just wouldn't be practical. You are right. I am self-employed and focus on building Web sites quickly. Having said that, I hope to learn more Computer Sciencey stuff with Python to round out my self-taught work.
ST2 has the sublimelinter plugin which will check several languages for syntax and style, there is also an autocomplete plugin for python, but the name of it escapes me right now. The integrated frameworks are really nice though, but python has fewer frameworks that one might use, it's more of just importing a library and using it. Again, it's a difference between a Web language and a general purpose one. As for debugging, I prefer just using the pdb library that ships with python, it's similar to gdb, but geared towards dynamic use within a script. Some IDEs use it for providing visual debugging, but I have found that I get along quite fine without one, especially if you've got good log messages. Multithreaded apps are poor targets for traditional debuggers anyway. I hope you get the opportunity to learn a lot more about general computer science though, it's one of my favorite fields of study. A bit of math in the right place can tell you a lot about your application, and even improve the way you write code. Algorithms in particular are interesting to me, and since it's one of the oldest topics in CS, there's a lot of information available for it. 
Looks like they threw IPv6 under the bus to do it: $ host python.org python.org has address 82.94.164.162 python.org has IPv6 address 2001:888:2000:d::a2 $ host pypi.python.org pypi.python.org is an alias for front.python.org. front.python.org has address 140.211.10.69 
Yeah, I'm sure ST2 will improve for PHP. There is a framework called Laravel that is supposed to have pretty good support with ST2 plugins. I suppose it is a matter of time for things to mature.
Yeah, that was my thought as well, looks like there's gobs of video demos though. But lack of solid reference documentation does make me a little uneasy.
Yeap. ST is still a pretty young editor, and while the plugin selection has more than tripled in the last year (an estimation), it has a ways to go before it catches up with the likes of vim, emacs, and eclipse. 
in pypy it absolutely does not work like that. since it's a tracing JIT, it observes the types at runtime, so it really does not matter how exactly you ended up with your types. Also even if types are unstable, it's not the end of the world since you end up with two different code paths for both (with allocation if you go from one to another though)
First nice wrap up! The documentation is nice, there is a lot to read there is even something totally new to me in the documentation «key concepts» http://simoncoulton.github.io/watson/key-concepts/events.html What follows is not a critisim of Watson in particular but most python web frameworks: *they got inspiration from PHP at least it looks like PHP doings.* It's not bad to get inspiration from another world but in this case what they take from it is not good. In particular module loading. This is in a sens handy but very disturbing «what loads before what, again ?», «put this in the right order or it won't be loaded correctly», loading dependencies is a hell. A consequence of that is the loose connections from the user code point of view of the different part of the code. App A gets a bunch of stuff loaded because there module path can be found in a particular file that is itself loaded because it was well named in a proper place in the filesystem. Reading a website code with no particular knowledge of Python webdev is not particularly easy to understand because it all relies on module loading magic even if of course you can guess, it's Python and Pythonistas... I don't know if Watson does that based on the example app (http://simoncoulton.github.io/watson/getting-started/your-first-application.html) but thread locals are a reminiscence of PHP Globals, and those are not logical, request is not a global and it will never be, neither do a database connection. I'm not sure where thread locals can be useful, but if I can get my way away from it, I'll do. I have other things I'm not happy with the dominant web framework, but this is already a bit long so tl:dr is I've started also my own framework https://nerfed.readthedocs.org/en/latest/ which is not Python 3.3 compatible yet. 
We did that long ago. Sorry, but IPv6 is just not a priority.
BTW: I think PyPy is really cool. What I should have done a better job of clarifying in the blog post is that mostly I was talking about CPython's weaknesses (like the lack of a JIT), and the scientific/computing community's need for an implementation like NumPyPy that allows them to reuse all or most of their existing code. I don't understand your earlier statement, can you clarify for me? If, let's say, you have the code path: def foo(y): x = 0 x += y[0] + y[1] And `y` could be either a floating point or integral type, then PyPy and CPython will always allocate `x` as an `int`, right? With possibly an expensive second allocation to recreate it as a floating-point type if `y` is floating-point? But if you had the following code: def foo(y): x = y[0] x += y[1] Even in CPython, this code should be faster if `y` is not integral. I agree that this isn't quite type inferencing, but it does make good sense, regardless of whether you have a tracing JIT or not. It's not the end of the world if you forget to or can't do it, but I think it's good, readable, practice.
&gt; I've started also my own framework https://nerfed.readthedocs.org/en/latest/ Meh, I don't like this classes based approach. And I don't like it in OP's project either. But I salute to both of you for writing code and putting it out there along with great documentation!
I find this idea pretty bad honestly. No, pypy won't allocate anything here. What happens is you would have a guard on the type of y[0], which will bridge to two assembler paths. Each assembler path would cover known types from that place on (if y[1] happens to be yet a different type, you get another bridge). Then x gets treated as floating/integral type in respective paths, but it's *not* allocated. If you have a loop that sometimes has ints and sometimes floats (for example), then you end up with two assembler loops having respective low-level types with no allocation. Then a **bridge** between the two will allocate it and jump to the loop preamble, which executes a bit more code.
This will disappoint you but if you want to use any of these tools you need to "buy in" them. There are various issues caused by the dynamicity of the language that cx_freeze or py2exe or *other tool* cannot foresee and you need to fix it up. IMHO you should throw out cx_freeze and just re-package/bundle python with your application. Use 7z or something with good compression.
Not sure I see the correlation, our new datacenter doesn't have IPv6 connectivity. Now, when we start to offer PyPI only over PyCP or IPv42, then you can make the Google comparison.
Not trying to be contrarian, but what kind datacenter doesn't have ipv6 at this point? v4 addresses ARE about used up, seems very short sighted to me to lock this "new start" into an obsolete technology.
Master IPv4 allocations from IANA to regional NICs are almost used up, actual IPv4 usage is actually quite low compared to projections thanks to most mobile providers using NATs. Regardless, we are hosted from the OSU OSL datacenter as they were kind enough to offer gratis server hosting and maintain our hypervisor systems. IPv6 is really not a terribly serious thing at this point for non-ISPs (or other large organizations the scale of ISPs). If you want to ask about fringe tech we aren't using, I would start with DNSSEC, since that we should probably be doing as there is actually growing support for it :-) When we hit 10% IPv6 residential connectivity I'll start caring.
First: nice to see it target Python 3, we need more of that. Second: good job on not rolling a custom ORM. Now with the grumpy old guy glasses on: Why do all the frameworks favour indirection and magic? _Explicit is better than implicit._ Why pass Python paths as strings instead of passing the reference directly? Why have the framework discover and load your app's code instead of your app telling the framework what it needs? (Disclaimer: I've spent years and years doing web development using frameworks guilty of all of the above.)
Similarly, with gevent, assuming the same function: gevent.joinall([gevent.spawn(download, yid) for yid in DATA]) Or with a concurrency limit: from gevent.pool import Pool pool = Pool(4) pool.map(download, DATA) (Could also do `Pool(4).map(download, DATA)` if you want to be *really* terse.)
Thank you for your expiriences. I use pure Python without any framework and I am wondering about testing desktop apps now. So am I right when I say, that automated/systematic GUI testing is almost impossible or very expensive (resources, software)?
I think I'd rather use [`multiprocessing`](http://docs.python.org/library/multiprocessing.html) instead of threads.
First off, thank you for taking the time to have a read through the docs (and pointing out a few typos) :) I can only agree with your sentiments regarding inspiration, as there are plenty of nasty things people can bring across from other languages. I've tried extremely hard to avoid that, however there are certain things that I felt we're quite important (e.g. dependency injection) though these are more concepts from multiple languages rather than just PHP. DI in particular allows you to write some really easily testable code, and while you may have to spend a bit of time 'configuring' instances to begin with, it makes maintaining them in the long run much easier (at least in my experience). I've done quite a bit of research into the whole DI container debate and whether or not its really useful in Python, but I decided that it really made sense after seeing so many django.settings imports everywhere (where the module is now tied directly to django.settings because of this). Had a look at your framework when you messages me on Twitter, looks nice :) ill have a dig through it and send you some feedback on that as well :)
nice idea, I'll play around with it.
multithreading is good for I/O operations. If you do some heavy CPU-bound calculations, multiprocessing is a better choice.
Interested to hear your suggestions on avoiding using classes? I saw the video from PyCon about write less classes, but couldn't really apply the concepts to all parts of the codebase.
Oh, I'm not referring to what this talk is about. It's just a feeling, "Why do I have to use a class here?". It somehow feels clunky. I like the way that Bottle and Flask are taking.
After giving it a second look: the request object is global. Ouch. Also: is there any reason to bind routing to controller classes instead of using instances? Are your controllers stateful? This is my pet peeve with Django's class-based views.
The request object is global? It should only be accessed via self.request from within a controller, with a new one being generated on each request. You can instantiate a new instance of the request from the environ variables if you want, but I don't see a need to do that ever really. With the controllers question, a new instance of the controller is created on each request, hence the binding to the class instead. This may be due to my coming from PHP where applications only exist for the duration of the request. If there's better ways to get around this I'm all ears :)
Puzzled? [Try this](https://zato.io/docs/intro/esb-soa.html).
I'm hoping it did clarify everything? :-)
It helped. I'll admit I had never heard of ESB and I had to look it up. I usually simply refer to a message bus, but I assume an ESB is a bit higher level.
I like pragmatists as long as they keep it tidy and elegant :)
AFAICT (from a cursory glance at the source), the license is LGPLv3. Is it for all the project or only for the server ? (In other words, what's the impact on *my* code ?).
Their non-accuracy was really easy to spot and it's a good thing to remove them. So, next step -- to make "pip" smarter, and only count pip installs?
Yep, this is LGPLv3 but I'm not sure what code you mean, exactly? If you're thinking of something like, say, rolling out Zato in a company and developing services with Zato then they don't have to be LGPL. This is the same license JBoss or other servers use and no commercial software you create for a customer becomes LGPL when it's deployed on JBoss, naturally. If, on the other hand, you'd like to use some parts of Zato itself in your own code which can't use LGPL (not sure why?) then we can sure talk. I spent about 15 months on Zato, being a perfectionst as I am, I would've spent 35 more if I just hadn't told myself to finally release 1.0. Hence, some parts of the code were written with a view of making proper PyPI releases out of them because clearly they can be used standalone or at least other projects could make use of them. It's just that I didn't have time to do it. I'm thinking stuff like this pub/sub Redis client https://github.com/zatosource/zato/blob/master/code/zato-broker/src/zato/broker/client.py or this XML-RPC server agent for remotely controlling HAProxy instances over SSL, using the latter's UNIX socket https://github.com/zatosource/zato/blob/master/code/zato-agent/src/zato/agent/load_balancer/server.py So I'm not sure if this is the answer, I'm just not sure which code you meant, sfermigier?
For examples of frameworks with less mandatory use of classes, have a look at [Flask](http://flask.pocoo.org/docs/quickstart/) or [Pyramid](http://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/tutorials/wiki2/basiclayout.html#view-declarations-via-views-py). A very quick summary of how they work is that your views are functions, and are usually hooked into the dispatch system by decorators, but if you need more control you can bypass the decorator and use the functions directly. An example view in flask for example is: @app.route('/users/&lt;username&gt;', methods=['GET']) def view_profile(username): # user = Some code to get user data from your storage (using SQLAlchemy usually) return render_template('profile.html', user=user, title=user.name) This allows me to use URLs like /users/Macha . In comparison with yours, I would need to edit config.py as such: routes = { 'profile_view': '/users/profile', 'defaults': { 'controller': 'Profile' } } And add in a controller class like so: class Profile(controllers.Rest): def GET(self): username = self.request.get['username'] # user = some code to get from database (your docs don't # mention anything inbuilt so I presume this is the user's # problem return {'user': user, 'title': user.name} This would get me URLs like /users/profile?username=Macha . I don't think it's possible with your framework to use URLs as clean as Flask's. In this example, Flask is actually more configurable, as I can use cleaner URLs without GET parameters, and I can choose which template to render. It's also more neatly contained, everything being in the function or its decorator. What the route decorator does is actually modify the state of the app to record the route without requiring a seperate config file.
Just an inconsistency in your documentation, the Controller page says that a config like so: 'defaults': {'controller': 'app_name.controllers.Public', 'action': 'index'} will lead to indexAction being called on Public. On the other hand, the Your First Application section says it will call index_action .
pretty impressive that one contributor is doing all that https://github.com/zatosource/zato/pulse
Make the GUI as dumb as possible using one of the traditional patterns (MVC, MVP). It takes tremendous discipline but it pays off. In one huge project that I had, I used something like [MVP](http://wiki.wxpython.org/ModelViewPresenter/) and the isolated the wx code in the "View" and "Interactor" only. I ended up writing some frustrating code with what appeared to be "unnecessary" namespaces but, in the end, the wx code ended up being touched way way less than before.
Thanks sigzero! :-) Being a first time submitter I also posted it in /r/programming so I hope this one doesn't interfere with the other? (I can see you've read both)
I guess this will be fixed as soon as 0.7* is uploaded.
that's cool. I'm looking forward to going through your code as I get time to see how you are using pyzmq as I'm still learning how to apply it to real world problems myself (0mq docs tend to be a little more abstract than what I would like). I didn't mean to imply in my comment that what you have done is easy. It's obvious that it is a significant amount of effort which is why I was surprised that it was just one person. that person would have to be a programming god to accomplish that. :)
I get it but at the same time its a bit ridiculous that its so hard to track something as simple as download count!
Haha, no worries, thanks for the kind words and I didn't feel offended at all! Just wanted to credit my colleagues and friends who provided substantial feedback and help even though they rarely were able to express it in a form of Python code. As for ZeroMQ, I'm more experienced in treating it as a building block of message broker-like mechanisms (this is in fact something I contemplated doing for Zato at one point before I turned to MQTT with Mosquitto [1] and finally to Redis for pub/sub..) but please always feel free to drop by on IRC or just anywhere (there's a mailing list and more) to chat about that or anything really :-) [1] http://mosquitto.org/
It shouldn't. Being all Python did you have any performance issues? 
Thanks for the tip and I'll have a look closer at it (good usage examples of buildout are always welcome) but I really wait for day when Linux packagers make it possible to apt-get install zato.. I just personally don't feel this is my best area and would love if people contributed all sort of interesting ideas (code or not). I hear that Vagrant [1] is a good tool (yea, I know, I've never used it) so it would be awesome if Zato could somehow be installed anywhere. Right now, from the code layout's point of view, this is a couple of Python packages, zato-cli, zato-server and so on, living under a common buildout.cfg config. I also added install.sh which mostly installs system-wide prerequisites and runs buildout. This could be a starting point for creating any sort of installers. I added an OS X version over the weekend [2] and I can see it should be really easy to wrap it all in a homebrew formula but again, I just hope a kind soul will pop up :-) [1] http://www.vagrantup.com/ [2] https://github.com/zatosource/zato/issues/41#issuecomment-18469942
well i'm not a buildout expert by any means, but I may take a crack at it and send a pull request. having everything setup in the buildout would be really handy for development of applications to fit in zato, regardless of whether it's deployed to something different or not. 
To my knowledge, with the 1.0 release only a week ago, Zato has not been rolled anywhere out yet. I've heard from various people but no one has used it in production yet. Naturally I tested it myself and I don't think there should be any issues. It is built on top of gunicorn [1] and gevent [2] so any single server will eat as much CPU as you can offer. There's also an HA load-balancer - this is an embedded HAProxy instance. I did various tests with HAProxy (for Zato and elsewhere) and it's an incredibly stable and powerful piece of software. So you can just install a group of servers in a cluster (Zato servers are always in a cluster even if there's only one server) and have the load-balancer distribute the traffic. You have complete control over HAProxy through the web browser so you can remotely update config, assign weights to servers, take them offline, and what not. Each server is composed of one or more workers (OS-level proceses started by gunicorn) and this will all depend on a given load but a single worker should do between 100 and 1k req/s. If it's not enough, you add CPUs. If it's still not enough, you add boxes and HAProxy deals with it. If it's still not enough, you take advantage of the fact that each server is always an identical copy of the other ones and you create another mirror cluster with an external load-balancer. Sort of like it's been described here https://zato.io/docs/admin/guide/ha.html But one thing to keep in mind is that Zato is really not meant for frontend programming, this is not something to create an awesome CSS for or with. It surely can be used to support all sort of frontend applications and technically you can push anything over HTTP and other protocols Zato supports but you really should use Django for the GUI. (Or Flask, CherryPy or I don't know what people prefer, it's just that I like Django myself). So when you have a frontend app that deals with, say, 100 req/s it may very well mean only 5 req/s coming through to Zato, for instance, only actual JSON requests for some backend data from multiple data sources. And the rest will be GUI-related stuff that is to do with presentation. This I think is actually a good way to look at Zato. It's like MVC but across multiple systems. Any backend data sources are an **M**, Django (or what you need) is **V** and Zato is the **C** so you can focus on each thing separately without causing too much chaos. Though note that Zato can also be the **M** part (hence it's also a regular application server). [1] http://gunicorn.org [2] http://gevent.org
Just wanted to reply on the IDE part, PyCharm is by far the best python IDE I've worked with. Handles completion and inspections like a pro. Makes every other python IDE feel like a confused elder lost in a retirement home. Until I found it I had just given up on decent python IDEs and was just using vim.
 What would PyPi need to get a list of dependencies for each package similar to rubygems?
Honestly, I learned buildout by reading other people's config files. But before you start out I'm wondering if you had a look at the Zato's CLI? In particular, the 'zato quickstart create' command. https://zato.io/docs/admin/cli/index.html https://zato.io/docs/admin/cli/quickstart-create.html The philosophy here being that install.sh installs OS-level software packages only and it is CLI that actually establishes DB tables, creates application users etc. I'm just asking to better understand what you're thinking of creating?
Global as in not passed to the controller methods but instead kept as controller's state. I'd make controllers stateless, instantiate them once at load time and then pass requests to their method, never modifying `self` outside of `__init__`.
the reason I thought of it is when i was reading this. https://zato.io/docs/admin/guide/install-zato.html#steps installing things at the OS level and requiring root perms, though it may be a reasonable expectation from a deployment point of view, might not be necessary if you are using buildout and from a development point of view might be a huge pain. If I'm writing an app that targets this platform, it would be awesome if everything was contained in one directory and could be downloaded/installed/configured from one command. All contained in one directory may seem like a subtle detail. But I can tell you it is a godsend for those wanting to try things out without screwing up their machine or those who may have to maintain apps that target different versions of zato. So 2 benefits I would be shooting for. The ease to get started. which would make this doc shorter https://zato.io/docs/admin/guide/install-zato.html#steps or unnecessary. The ability to handle multiple versions of zato. A necessary detail for anyone who is supporting multiple customers and cant afford one machine per customer or doesn't want to. This might not be something you are shooting for and I realize that, but at this moment I'm thinking the potential benefit would outweigh the effort. But it is a holiday here today, I might think differently after a few drinks. :)
I see, very cool! The instructions need to stay I think because not everyone will be a Python user and some people just need instructions step by step. Think about guys who install and configure 2 servers and 3 databases each week and never ever will see them again, they're just configuring stuff. No root access is a very nice thing, agreed. It's just that I had a hard time installing M2Crypto, numpy and scipy with buildout. So I worked around this with this little symlink_py function - this is OK as long as you have sudo, like you said. https://github.com/zatosource/zato/blob/master/code/install.sh
I second this. I've been doing pyramid since v1.0, I like it a lot. So far I haven't run into situation where I was limited by the framework. Pyramid does not require classes for routes, just callables. That's ANY callable.
CDNs make it more difficult.
&gt;They make it easier for the compiler, but who cares about the compiler? Delphi developers. :-( 
I don't really mind them. I just see them as unnecessary if you have nice looking code. Go look at some Fortran sometime. With a 72 character limit, nicely indented Fortran code is rare, well assuming the compiler follows the Fortran standard and doesn't fix it for you.
&gt; There will now be a delay of several minutes in some cases between updating a package and having it be installable Yeah, I noticed. Sitting here waiting to test my new version.
AFAIK, nowadays, AWS sets up EBS-backed instances by default.
which version of android are you using? And which device. Open a issue on http://github.com/kivy/kivy/issues with your detils if you still face the issue. As for standalone apps on market, there are many just search for kivy on google play. There is also incomplete list at http://wiki.kivy.org.
Its been years since I've seen anyone doing any new zope development. Are you using it now? 
Braces are very useful in Ruby. However, a block in Ruby is very different than other languages. So that makes the difference. I agree that whitespacing is effective than blocking, however it's just a matter of personal opinion too. Nevertheless, I learnt good indenting from Python. Beginners starting out in Python who switch to other languages will at least write out indented code : )
Here is your breakdown of your most used words: Words|Times Used --|-- People|221 Time|136 Probably|127 Game|127 Pretty|126 Look|105 Little|103 Work|81 Mean|72 Getting|67 Yup, mine is "people" by a long shot. Heh. 
&gt; KVM supports doing OpenVPN connections and OpenVZ doesn't It should, they just have to setup some stuff on their end.
I'm using Linux for quite some time (since '99), but... &gt; If you do need to send mail from it, that's not much harder to set up. ...I do not admin mail server for quite some time (it was qmail many years ago) and considering that my own business is supposed to be handled by such mail server and one can do it wrongly, I rather leave that job to my provider. 
Very strange result I got as most-used word: | Words| Times Used | | ------ | ------ | | Wa | 171 | | Python | 123 | | Time | 95 | | Year | 83 | | Months | 81 | | Print | 81 | | File | 75 | | Found | 74 | | Number | 73 | | Code | 71 |
Ill look at that. Edit: Somewhere down the line you must have used Wa alot. Mind scanning your history to check for some strange post? Nobody else got this as a result, so I don't think it was my end. Also, sorry for the second message when you commented. For some reason message.was_comment() is being weird. Edit2: I just realized why it was being weird by commenting about it being weird. Shouldn't have added the () at the end.
For some reason even though I am making sure message.was_comment is false, it still goes through with it. On the next line i have it print message.was_comment, and it will say true, even though on the previous line I have it make sure it was False! 
We could have told you that if you provided the source. As I said before, this submission has nothing to do with python until you do so.
Yes, that is correct.
If the app is built in python than it has everything to do with Python. Why is he required to give you a source? There is nothing in the rules of this subreddit that even suggests he is required to do so.
So, what you're telling me is that I could make a C program, post about it in /r/python, and as long as I don't provide the source, it's fine being here?
Nice! Just a comment about the body font used in the docs -- for me (Google Chrome on Windows 7), about 1/3 of the pixels are missing from the glyphs, making it rather hard to read. [See screenshot](http://i.imgur.com/20jZdAj.png). Update: I noticed that it's just at the default font size -- if I go Ctrl- or Ctrl+ at those sizes it looks fine.
I can't quite put my fingers on it, but this "dependency injection" seems like a bad idea. (Is it a borrowed concept from angular.js? this dependency injection might be cute for a todo app, but for bigger apps, it might be a mess to figure out where things are)
no i'm doing pyramid dev. but that doesn't mean it's not happening. from what I understand there's a significant community of plone development. but the point is though that just because you don't read about it doesn't mean it doesn't happen. there's plenty of .net dev for example, but it's not the cool thing to blog about. yet, plenty of people make $$ doing it. 
~~It is built in python. As stated above. Stop being a dick dude. You aren't a moderator, so stop trying to enforce rules that don't even exist.~~ Sorry for being a dick myself. Code has been posted for everyone to utilize. If anyone has any questions for their own reddit bot I would love to help!
Point taken, but you understand how grating and wrong it is in casual usage like in this case.
I'm curious. Why should a class-based controller be stateless? If you want controllers to be stateless, then a function-based approach like Bottle would suffice.
But for a lot of things, the inaccuracy doesn't really matter. E.g. http://py3ksupport.appspot.com/ lists the top 50 packages by downloads/day - the precise numbers don't matter, it's just a convenient way to sample 50 very popular packages.
Question everything before getting all wet, people.
I mean, it's probably about time people started doing more work and trying less to game the system. It's getting pretty annoying to see all these articles like "Look at these six little tricks people are using to spend less time for bigger rewards!" 
I did originally want to look at decorators for this particular feature, though I couldn't find any applications that were of sufficient enough size to demonstrate how it would work if you split your controllers into multiple files. If you know of any sample code that shows this I'd love to see it :) Within Watson you can achieve the same routing functionality as your Flask example: routes = { 'profile_view': { 'path': '/users/:username', 'defaults': { 'controller': 'Profile' } } You can also force a request to only work for a particular format (json/xml for example), or http request method, or use regex instead. Granted, the above has a little more boilerplate, but when your application grows in size, it's easy to just refer to the routing config to see where a particular route is supposed to be going, rather than having to dig through your source for @route() decorators. The template used to render the view can be changed as well if required :) I'll be adding Routing to the documentation today to clear up this area a little :)
I see your point, and I guess that example was purely to demonstrate the concept (perhaps a bad example). The idea behind this the code that you write is not actually dependent on the framework (or your particular configuration) itself (something like an ORM wouldn't be). That db_read/db_write instance could be used in a completely standalone application where you manually instantiate it and then set those particular attributes. This is particularly handy when unit testing as you can mock out those pieces of functionality easily, as you would no longer would need to instantiate your entire application to test the action of a controller.
Thanks dude, I hadn't actually cross browser tested the docs yet, but that's most likely due to the following styles on the body: font-smooth: always; -webkit-font-smoothing: antialiased; That's pretty atrocious rendering though (the screenshot), as it looks nice and crisp in OSX. I'll fix this up today :) EDIT: Just pushed the changes up to github pages, should be there shortly. 
Dependency injection has been around for an insanely long time (see Martin Fowlers blog on [dependency injection](http://www.martinfowler.com/articles/injection.html) &amp; [inversion of control](http://martinfowler.com/bliki/InversionOfControl.html)). Your concern is probably directed to the 'container' itself rather than the practice of dependency injection, perhaps the implementation it's not quite 'Pythonic' enough... Having worked on many large scale enterprise products in both PHP and AS3, it's been incredibly handy to be able to just swap out components when required (new alternatives etc) at a single point in the code rather than having to go into multiple places in the codebase and modify it to suite.
Yes, if you have any ioc configuration, that should be centralized as I demonstrated above. However, one of the advantages of most dependency injection libraries is lack of repetition. In your config.py, you repeat the values for the connection string! Yes, I know you could assign that to a variable and use that variable but that is only slightly better. Conceptually, it is the exact same problem as far as I am concerned. I have a 200KLOC Python app which uses a homegrown dependency injection library and even there, there is no repetition of stuff like connection strings nor is there any assignment to variables which are then shared. It is done once, in the application's initialization and every other object which needs it, has it provided to them. In this case, the only objects that need it are the db connection, but lots of objects need the *db connection* in turn. If I was to manually retrieve these objects, that nullifies half of the value of a ioc container. The other half of the value is provided with declarative, minimal, and automatic configuration. Yours is less dependency injection and more "service locator", imo. Edit: I take that back. Reading further, I see you're almost at the same place except the field = None is quite confusing. You "should" do something like field = ioc('db_read') and whenever constructing a type, iterate through all its class fields and see if one of them is your special type. That would satisfy me :)
It does get pretty difficult if you do not have a well-defined protocol for declaring dependencies. One thing I've found useful is to have all ioc configuration in one directory so that if you need to figure out how a type is configured, you just grep "TypeName" /path/to/configuration and you're set most of the time.
Yeah, I have seen plugins for Laravel on ST2. Do you also use ST2 for PHP? Have you compared it to the latest version of NB 7.3?
Well, that's amusing. Words | Times Used :--:|:--: Line|63 File|58 Time|32 Player|29 Server|29 People|27 Block|26 Start|23 Try|23 Add|22
Use ST2 for PHP as well, I haven't touched Netbeans since migrating though. With SublimeCodeIntel, SublimeLinter etc, it seems to be 'good enough' for what I need (which is usually just a reminder of what things return what). Nothing will ever be as good as the Netbeans autocomplete (at least in my mind).
Nice idea. May I as where you hosted your bot?
My computer :P
You leave it on 24h a day or simply catch on when you're online?
As I understand it: You don't actually *need* Mozilla. They provide a default/fallback service because they want to see this adopted, but you could run your own fallback or use another provider as fallback, if so desired? `Yahoo.com` e-mail provider supports it: [Mozilla: Identity blog: 9 April 2013: *New Persona Beta: Millions of Users Ready to Log In using Any Browser*](http://identity.mozilla.com/post/new-persona-beta-millions-of-users-ready-to-log-in) says (under the "Identity Bridging" heading): &gt; The most important feature of Persona Beta 2 is Identity Bridging, where users can log into Persona-supporting web sites with their existing accounts. We’re starting with `yahoo.com`. Try it now on our sample site [123done.org](http://123done.org): click “Sign in”, enter your `yahoo.com` email address, and go! My impression of browser support was that it is supported through sites directly (eg, like OpenID) if no built-in support exists? 
both
&gt;Having worked on many large scale enterprise products in both PHP and AS3, it's been incredibly handy to be able to just swap out components when required (new alternatives etc) at a single point in the code rather than having to go into multiple places in the codebase and modify it to suite. You are probably talking about modularity in design instead of injecting dependencies into things. Take for example, the example you used in the documentation. You claimed that "from app_name import db" would be a hard-coded dependency. Then, how about "db = self.get('db_read')" and "db = self.get('db_write')"? Aren't they hard-coded dependencies? In fact, depending on 'db_read' and 'db_write' is actually worse than depending on a "db" module, because the latter has only one single point of entry. 
Words | Times Used :--:|:--: Im|99 Dont|76 Time|65 Ive|64 People|59 Guy|54 Game|52 Thats|50 Work|45 Little|36 Its practically a sentence "I dont have time, Ive people and guy games that dont work"
I don't know if you have seen this. http://plugins.netbeans.org/plugin/46432/php-zend-framework-2
Well, dependency injection is independent of ioc containers, typically. However, both of them together are most productive/powerful. I would say: ignore having your code reused for django or flask unless it's important for your own work. In that context, the point at which lolwhat would have its dependencies injected would be at the point it is constructed by the ioc container. Which would 99% of the time be automatic.
The GUI version - http://pythonturtle.org/. One thing I don't like in Python for teaching kids is the parentheses to call function. It's a distraction to say, "Ok, type g, o, `( &lt;== how do I pronounce this` ...". My kid 4 years old btw, maybe too early but he's having fun seeing the turtle move around the screen. 
Its a little bit elementary, don't you think? Sorry. I had to. I'll see myself out.
You can have as many apps but you're limited to the amount of memory you have, in case of 9.50/month plan, it's 256MB. I have 4 python apps (django, flask, bottle) currently running with total memory usage 159MB. Also have some background process doing web scraping and syncing remote data. Sometimes I got message from them telling I have exceeding my memory limit. So for now I just use supervisor memmon plugin to keep track the memory usage and make sure each process not using more than 50MB. 
I know this is old by now but thank you! I just added it.
I've found setting up a Vagrant box a pretty workable solution for web development, and handy because when I want to deploy I can just package the whole thing up. Installing a VM just for messing around with Python might be a bit much for hobbyists though.
Clearly since he posted it in r/python the bot was clearly made in Python. Why are you being a pedantic douche about this?
I use redis-py with gevent and I haven't had a problem with blocking at all yet. Even on my little netbook, redis is crazy quick. 
Here is your breakdown of your most used words: Words | Times Used :--:|:--: Number|29 Return|21 Function|20 Code|19 Work|17 Python|15 Look|14 Bit|14 String|13 Try|13 I should spend more time outside of the programming subreddits, methinks.
It has nothing to do with python if there's no more relevance to a python user than to a non-python user.
I'm I've It's * :P
I agree with the VPS solution here. Mostly because.. well.. sometimes you want to do more than python. Sometimes you want ruby. Or nginx doing very particular things. Or your DB set up in a specific way. Or users to have certain permissions,etc. Don't get me wrong.. PaaS and what not are NICE. But they only are nice when you realize their limitations and their capabilities.. and you can only do THAT when you realize the limitations and capabilities of an unrestrained server.
Here is your breakdown of your most used words: &gt;Words Times Used &gt;Read 57 &gt;Book 56 &gt;People 51 &gt;Work 35 &gt;School 26 &gt;Reading 25 &gt;Time 22 &gt;Charter 20 &gt;Feel 20 &gt;Idea 19
 Here is your breakdown of your most used words: Words Times Used Fucking 20 Thank 11 Pretty 10 Hope 10 People 10 Work 9 Pro 9 Tools 8 Industry 7 Fuck 7 ...yep. Stlll not happy with ProTools for windows. Getting used to it though. 
Thank you, these are great options when you already have the packages installed (at least from my cursory investigation). I would like something that listed dependencies like so: http://rubygems.org/gems/github As you can see, they have runtime and development dependencies listed. This allows you to 'vet' the package against similar packages before you install. Let's say there are three packages that have similar use. A quick look at the dependencies will yield a lot of information. Maybe one version are has a dependency of a package that will break another version of the package already in use for your project. There are too many "if's" to list here, but I think something like this would be really helpful... 
How does this compare to webMethods and other ESB software?
My existence is questionable, as you have discovered. I code part-time because my ADHD doesn't seem to allow me to focus 75% of the time. I'm sitting in China right now. 8 yrs Japan, 1 China, 1 HK, 1 Philippines, now back for a stint before heading to Tokyo or "home" to Australia. Usual fallback job is web development, though setting up my own consultancy now and will push Python as much as possible. Though not a great developer and not as experienced in Python, I'm pretty much hooked now on the community and the pythonic way. pip, virtualenv, Scrapy, CherryPy, Google App Engine, WebDriver have all helped me with recent projects which I could have otherwise slapped together with PHP and taken a cold shower afterwards. I've clocked up over $60k on oDesk and a bit on other sites, but prefer to get clients from the physical realm and outsource a solution I conceptualize or proof of concept. I borrow friends' offices in different countries or use co-working spaces - which are also good places to find decent developers often deep into their latest startup.
I feel your pain
Don't be too hostile about it. I think what everyone means is that if you're going to post something like this in r/python: 1. Either provide the entire source or show that it executes a function that is unique to python to prove that it was written using it 2. You can't expect to post about a bot you made in a programming language subreddit without people being curious about the source so people can use it as a reference of how the bot was made in that language. You can keep it private if you want to, but you're better off posting to /r/programming instead. 
I'm sorry /u/aperson i shouldn't have been hostile. I'll provide the source tomorrow. Edit: Fuck it. I'm so sorry Ill do it right now. Excluding the password of course Edit2: Source posted. Sorry again /u/aperson
Cute. But the french words I mostly use are all articles, prepositions and the like... :) Words | Times Used :--:|:--: De|1778 Le|1452 La|875 Que|643 Et|566 Pas|483 Qui|414 En|354 Pour|352 Un|342
* http://pythonhosted.org/distribute/setuptools.html#declaring-dependencies * http://www.python.org/dev/peps/pep-0426/#dependency-metadata * http://www.python.org/dev/peps/pep-0426/#extras-optional-dependencies
Stand up move to apologize. But you didn't need to post your code if you didn't want to in my opinion. Everything need not be shared. 
Here is your breakdown of your most used words: Words Times Used De 114 Le 74 La 56 Et 40 Pas 38 Que 36 Un 36 Je 35 Pour 27 Du 24 Hahaha not very French friendly! Those are the most common French articles /determiners. I don't know what I expected but the results gave me a good chuckle... 
Thanks Wes. I appreciate the links... maybe I am too dense, but what are you trying to say? 
Sorry I didn't do import french 
Is this for comments or posts? My results seemed... sparse.
It adds up the comments and self posts.
I am disabling the ads. Thanks for pointing it out.
Cool, thank you.
Share button is annoying as all heck on mobile too. I hate stuff following my scrolling action. Article was a good read however. 
If you use one Controller instance per app, it makes it much easier to be threadsafe. Of course, most frameworks I use do a "one controller per request" thing that makes that concept unnecessary.
Haha. Best /r/Python post ever. Words | Times Used :--:|:--: Magnet|51 People|43 Zen|42 Magnets|26 Time|26 Set|26 Pretty|25 Looking|22 Please|19 Tell|18
PEP 426 is the current standard for declaring package metadata; including dependencies. Python packages declare package metadata in `setup.py` files. ([example setup.py](https://github.com/Pylons/pyramid/blob/master/setup.py)) setup( name="Project-A", install_requires=['pyramid',], tests_require=['flake8', 'ipdb'], extras_require = { 'PDF': [], 'reST': ["docutils&gt;=0.3"], } ) There are a number of [tools for exploring Python package metadata](http://www.reddit.com/r/Python/comments/1f4pbk/pypi_download_counts_removed/ca7646i).
I like yours... here's mine &gt;Here is your breakdown of your most used words: &gt;Words Times Used &gt;People 50 &gt;Feel 22 &gt;Love 21 &gt;Time 20 &gt;Post 18 &gt;Mean 17 &gt;Work 16 &gt;Please 16 &gt;Thank 15 &gt;Makes 15 
You're a biologist? :)
Stuff that follows you as you scroll is very difficult to do right without annoying users. This share button is very annoying. More so because I thought the article was good and wanted to read it. 
I am glad you liked it. Thanks for the comment.
I really apologize. I will remove the scrolling share button to make it easier on mobile users. Thanks for pointing it out.
you might need an exception for "has" as well
I am glad you liked the article. I will make the reading much better soon, am removing the share button that scrolls and I have already removed the ad.
I have deactivated the share button that made it hard for mobile users to read the article. Thanks to all those who pointed it out. Please enjoy it.
I don't really have configurable software that is used by others so I've been using straight python with env vars to manage deployment type. It's for my own uses/projects and makes things simple. **config/\_\_init__.py** import os if os.environ.get('deployment', 'dev') == 'dev': from config import dev as config # config/dev.py else: from config import prod as config # config/prod.py **some_other.py** import config as config For projects with configs for other users, I prefer YAML. The pyyaml lib has a C extension but can be included in projects without it. Its white space significance much like python's matches my taste.
ConfigParser for simpler configuration files, JSON for anything remotely complicated.
Here is your breakdown of your most used words: |Words| Times Used| |:-----|------------| |Pretty | 151 |Time |105 |People| 82 |Game| 73 |Little| 62 |Probably| 60 |Usually| 59 |Work| 57 |Look| 56 |Getting| 52 Holy shit, 9 out of 10 Granted In a slightly different order, but still pretty shocking. 
I know I was a bit of a jerk about the whole thing (and I'm sorry as well about that), but it was a matter of 'this post has nothing to do with the python language'. There was absolutely nothing originally that made this submission relevant here.
Here is your breakdown of your most used words: Words|Times Used --|-- Pc|963 Apple|962 Fucking|35 People|32 Print|32 Feel|26 Mean|24 Time|24 Pretty|22 Command|22 Uhhh... I don't remember writing PC or Apple that many times...
Would you be so kind as to point to an example of a complicated JSON config? 
I meant built-in support. Somewhere in the preferrence to add your personas. window.postMessage() is developer work. 
Here is your breakdown of your most used words: **Words**|**Times Used** :--:|:--:| Game | 91 People | 38 Play |36 Time | 34 Look | 33 Pretty | 30 Work | 26 Nice | 25 Line | 24 Windows | 24
OpenID providers are still more http://openid.net/get-an-openid/ This can change in the future ( obviously)
Agree, but in his talk Dan Callahan keep saying that Mozilla Persona is for every one.
They need to sell it I suppose :)
How do I make my list look like yours? Serious question. I found this thread through OP's /r/circlejerk post.
&gt;Header1|Header2 &gt;--\|-- &gt;Column1|Column2 &gt;etc|etc Becomes: Header1|Header2 --|-- Column1|Column2 etc|etc [There's a complete markdown reference here](http://www.reddit.com/r/reddit.com/comments/6ewgt/reddit_markdown_primer_or_how_do_you_do_all_that/). Hope that helps!
Thank you. I'm on my phone, so this may take a bit.
Words1|Times Used --|-- Love|60 Thank|49 Time|42 Feel|32 Read|26 Year|24 Bit|23 Thought|23 Fucking|21 Look|21 I didn't double-space, against my better judgement. Only one way to find out if I did it right....
Haha! I included "1" for the first header, but forgot to put "2" for the second header. I see my confusion, but, overall, well done. (Gives self pat on back for following tech directions)
Get the Reddit Enhancement Suite, you can preview the post as you write it.
I didn't think I could on my phone? I guess I can, but I think I'd have to put chrome on my phone, which is no big deal. I'm already too deep in reddit. I feel res will take me deeper, so I abstain.
Ha, good one.
I use ConfigParser for any configuration files that **must** be human readable. For everything else, I just use a SQLite database. I know, that it makes the configuration file binary, but they're still easy-ish to read.
| Words |Times Used | |:---------|:------------| | People|40| | Pretty|38| | Definitely|25| | Nuclear|24| | Time|21| | Probably|19| | Test |17| | Create |17| | Weapon |15| | Post |14| Now all of those numbers are off by one...
|Words |Times Used| |:---------|---------:| |Head | 2| |Enjoy | 1| |Fashion |1 |Bell|1 |Marked|1 |Seat|1 |Front|1 |Planning|1 |Hell|1 |Vacate|1 I don't comment much...
My programming is quite silly... for simple stuff I just write a JSON dict to file. If the software has a database I just use a simple key:value config table along with the rest of the data. However, my projects had a GUI that exposed the configuration to the user. 
Its not that good, impressive but it does not scale well to complex applications. With sikuli drop down boxes, large tables and dynamic data is a pain. When it comes to web apps selenium is much better as you interact with the underlying DOM making gui automation feasible. Whereas with desktop apps it all depends on the gui framework and whether there is appropriate automation hooks built in to the language or toolkit to interact with the underlying widgets. Java and c# have good tools built on reflection for this. C++ based frameworks are all over the place, but implementations exist that rely on screen reader, MFC or framework level hooks. You are 100% correct with regards to not automating the gui directly if you can avoid it. For non legacy development, do it right first time around!
Download stats were a useful thing. One thing that we missed was to provide the User Agent info so we could make a difference between legit downloads and downloads made by mirrors. One way to have download count would be to set up a server for all releases for your project, that simply redirects back to PyPI after counting the hits -- of course that would be yet another point of failure. I might write that small server, with a simple stats UI
GitHub pull request spam bots... what a crazy fad!
I would argue that it's part of a CDNs responsibility to provide them.
Okay, here are some comments on (and questions about) your code: * What is this `sets.Set` and why do you use it instead of `set`? * Might be a good idea to check out [NLTK](http://nltk.org/) which can do the word extraction for you, without replacing, say: "crass" with "cras" and "gas" with "ga" (and still finding singular forms, NLTK is pretty smart!). * You could make a generator out of `for comment in comments:` and `for link in links:` and everything under them. Then, instead of `most_used_words[sword] += 1`, you do `yield sword`, and replace `most_used_words = Counter()` by `most_used_words = Counter(get_all_words())`. * You can remove the lines binding `zewDict`, `newDict`, `keys` and `values`, since you do nothing with them. * You define `msg` twice. They are a tiny bit different from each other, and it looks like you want the second one (otherwise the first word and the -- lines will be on the same row), but the formatting of the second one is more readable, so you might want to change it to msg = ('Here is your breakdown of your most used words:\n\n' 'Word | Times Used\n' ':--:|:--:\n') Or otherwise just use the second one. Ninja-edit: I know you didn't ask for this, so I hope you don't mind.
Here is your breakdown of your most used words: Words|Times Used --|-- People|223 Climate|195 Science|173 Risk|145 Change|132 Carbon|124 Cancer|116 Time|112 Global|108 Evidence|107 Wow, pretty easy to profile people using just a simple word count!
Of course a function should be enough if you don't care about things like automatic routing based on request method (calling things like `self.post(request)` automatically).
I have a settings.py file that I start from on every new project. It contains a Settings class that either reads an internal json data structure, or one in an external file when initialized. I'm trying to make the class generate dynamic properties for configuration options in the json data, but I'm still learning Python so I haven't succeeded in that yet. So far the only logic the Settings class has, besides exporting the json config and changing all *_path options to absolute paths, is that it manually exports properties for some specific options to the current application. 
http://preview.python.org works for me (the link you pasted had an extra t).
Compared to ConfigParser-style INI files? Arrays spring to mind. Or maybe nested dictionaries. These are unlikely to be needed for simple configuration systems but sometime, just sometimes, you need them. Outside of the standard library, I'd personally prefer a passive-only YAML subset to JSON for pure configuration.
I author a commercial desktop application, and I had the need to store configuration data on both GNU/Linux and Windows machines. On Linux, I simply use ConfigParser reading and writing to an appropriate ".whatever" file in the user's home directory, as one would expect. On Windows, configuration data is generally expected to live in the registry. My program actually reads and writes JSON strings as registry values in the appropriate registry key. It's all rather easy using the *winreg* module from the standard library. Of course, the program generally doesn't know which system it's using thanks to some simple wrapping. At runtime it just reads and writes configuration values using a generic interface.
I used Python modules and perhaps Python objects similar to what is [described here](http://blog.mired.org/2012/03/configuration-with-python-class-objects.html)
please elaborate. is delphi some kind of self-rewriting language?
What big advantage does IPv6 have that IPv4 doesn't? Especially if you already own said IPv4 address and thus won't have to worry about IP address scarcity?
I started with ConfigParser and ConfigObj, but then I moved on to JSON and YAML. Much better in my view.
yeah, languages like ruby or scala (and to an extent, javascript) are built around anonymous functions and blocks. you use them everywhere, e.g. for inline loops and stuff. sicne python doesn’t have the ability to use anything but the most basic lambdas inline, this naturally leads to different code. then again, coffeescript and haskell work fine without braces (i know that haskell has optional ones)
too bad python doesn’t have YAML built in. it’s so much nicer to write per hand than JSON. JSON, like XML, is made to be machine-written, and easily parseable. config files are hand-written and usually have to be parsed only once, so using a nicer syntax comes to mind immediately.
Persona's strongest aspects are: - be a federated protocol (mozilla servers are only a fallback to speed up adoption) - be privacy respectful (your email provider will never know where you're loggin) OpenId is a federated protocol, but every time you use your provider knows about it
How could that possibly be effective?! Oh yep, good deals on Nike shoes, let's just merge that.
Here is your breakdown of your most used words: Words | Times Used --|-- Return | 19 Def|11 Value|10 Elif|9 Physics|9 Print|8 Nice|6 Time|6 Python|5 Name|5 Nice, python and physics! Pretty much sums me up.
This is what I do. And installing pyyaml, typically via pip, isn't much work.
everyone browing the bug tracker sees it.
Ah cool, was just checking cause I suspected it was a typo only introduced during the posting of your previous message.
No, not mine. But the time when some people (presumably this will happen in asia first) won't have good (or even any) IPv4 connectivity is not that far off.
To type \_\_init__.py you need to escape the underscores or Reddit bolds it rather than shows them. It 's actually sufficient to just escape the first two, like so: \_\_init__.py
I can't imagine using an "ini" config file for something like [this](http://tilestache.org/doc/#configuring-tilestache)... it's much cleaner in JSON.
This submission has been linked to in 1 subreddit (at the time of comment generation): * /r/mylittleandysonic1: [Have fun with it, MLAS1.](/r/mylittleandysonic1/comments/1f77l0/have_fun_with_it_mlas1/) ---- This comment was posted by a bot, see /r/Meta_Bot for more info.
Here is your breakdown of your most used words: Words | Times Used :--:|:--: Buffalo|150 People|73 Pretty|48 Look|37 Thought|29 Time|26 Found|26 Called|26 Animal|24 Left|23 ([why buffalo is there](http://www.reddit.com/r/todayilearned/comments/1eubr3/til_that_if_you_say_the_word_buffalo_eight_times/ca3up2f))
If I need to be able to modify the configuration while running, I use a .ini or other kind of flat file approach. However, if I can get away with just a single configuration at start-time that is not modified while my application is running, then I'll go for a code file approach. In some cases, rather than the flat file, I've needed to use a database, but I prefer the flat file. That said, if you have multiple processes attempting to read and write to the flat file, it may be better if you have a different type of solution (database, global memory, etc.) as the file system could end up hanging with a dead lock.
Cool idea; but not particularly useful in any OS (linux/unix) that supports cron/crontab (and then you don't have to worry about remembering to restart all your schedule daemons on reboot). Crontab even comes with decent built in documentation nowadays without needing to even consult the manpage. djimbob:~$ crontab -l # Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute (m), hour (h), day of month (dom), month (mon), # and day of week (dow) or use '*' in these fields (for 'any').# # Notice that tasks will be started based on the cron's system # daemon's notion of time and timezones. # # Output of the crontab jobs (including errors) is sent through # email to the user the crontab file belongs to (unless redirected). # # For example, you can run a backup of all your user accounts # at 5 a.m every week with: # 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/ # # For more information see the manual pages of crontab(5) and cron(8) # # m h dom mon dow command */3 * * * * cd /home/djimbob/AutoModerator &amp;&amp; python modbot.py &gt;&gt; modbot.log # run every three minutes.
Please provide more documentation for it. The documentation in the README is not enough.
I also use ConfigParser; for what it's worth, I extended it in this simple [gist](https://gist.github.com/tomthans/4119715#file-confparser-py) to to return the parsed data as a dict
i just see “charade” and “urllib3”…
And you are right. I meant “do it as Kenneth does, but have your yaml stuff here instead of those two”.
Here is your breakdown of your most used words: |Words|Times Used :--:|:--: |Thank|19 |Idea|16 User|14 Read|14 Reddit|13 Please|12 Site|12 Work|11 Change|11 Python|11 I'm pleased by what this says about me. Thank you.
Could you elaborate a bit about integration with Django ? Where does it sits in the infrastructure and how would you deploy such setup ? Edit: After scanning through the documentation, I'm still not sure to understand the deployment philosophy .. The documentation talks about "hot-deployment" and "hot-reconfiguration", but doesn't provide any walk through or real world examples (django or not). Did I miss something ?
Including Google-Bot (which is the point, really)
Well, Windows (which of course doesn't, by default, have cron) also have a Task Scheduler that works quite well. It *is* programmable, although not a lot of people know that.
If you already know a few programming languages, then definitely. Otherwise I'd recommend against it - you'd get confused between the things the tutorial is saying and the 2-&gt;3 differences you need to keep in mind.
It's so ruby
Scala is probably not that bad. Perl is insane; it's said that "only Perl (the interpreter) can parse Perl (the language)".
ah, get it. but now that i see that pyyaml contains a pure-python version, i wonder why it isn’t already in the stdlib…
more people need to give windows task scheduler a chance, its helped me make a couple things completely hands free for me
&gt; stdlib is where a library goes to die. — Kenneth Reitz [[source](http://docs.python-requests.org/en/latest/dev/philosophy/#standard-library)]
Ok, this post seems to have a lot of keywords that trigger my senses (Jenkins, Python, Selenium). Does Jenkins trigger the Python Unit tests and the Selenium tests? Because that would be awesome.
I'm not surprised that windows a cron equivalent (but wasn't aware of it as I haven't really used windows in ~10+ years). But sticking to OS level cron/task schedulers (even if it calls a python script), seems more convenient than having to start and background a periodic task. Maybe if the startup costs are expensive and it needs to be run very frequently (like every second). Or the periodic behavior only needs to be done while a larger program is being run (e.g., start the scheduler in a separate thread). (But even in those instances - I'd more likely just call my own sleep/time functions in terms of seconds). 
so what? i don’t need a innovating YAML lib, i just need one that works, and has a nice API. it’s a data serialization format, no web framework.
Yes. Jenkins can be setup to call shell commands. For example, to run my Django unit tests, I simply call "python manage.py test".
YAML is no bueno in my humble opinion. Read this and look at your code: http://www.kalzumeus.com/2013/01/31/what-the-rails-security-issue-means-for-your-startup/
Be careful when using YAML: http://www.kalzumeus.com/2013/01/31/what-the-rails-security-issue-means-for-your-startup/ Edit to add: http://nedbatchelder.com/blog/201302/war_is_peace.html
And while everybody is piling on, "schedule" is not a searchable name, it's a verb. I really hate this trend of giving projects names that you can't search for because they're just words.
Is this going to be used on the homepage for each package? Ie. [Here](http://www.versioneye.com/package/pip--Flask)
&gt; How does this compare to webMethods and other ESB software? I'm not sure what sort of comparison you're interested in.. I understand you mean wM Integration Servers? I spent a couple of years in an environment consisting of I'm not sure how many ISs exactly, something in the 60-80 range, there were several vendors and integrators so I just didn't have the view into the whole picture. This was either wM 6.0 or 6.5 (I think we only had some developer previews or something of 7.0) which means it was some 5-8 years ago. I don't know what the latest wM can do after SAG bought it and I don't remember everything so if I'm adding an ? in the response below it simply means that I may have no clear recollection of a given thing. Please bear with me. wM is in Java and Zato is in Python. This is the key difference you'd notice as a programmer. I remember it was possible to write services in C in wM and you can do the same in Zato. Not sure if anyone used it with the former or will use it with the latter. wM had a domain-specific graphical programming language WMFL and almost everyone run away from it after a week of using. There were all source of troubles with it, starting from the fact that - I /think/ it was always interpreted (no notion of bytecode) - it was a real pain if multiple developers were developing the same wM package (? that was the name?). Everyone was using SVN (recently migrated from CVS) and in a team of about 70 developers we actually had 1 or 2 people reading the automatically generated XML, diffing it and merging conflicts. These guys were 'mergers' of code of all vendors and I don't I have to mention how many problems there were if one vendor was responsible for making sure competition's code was OK by means of manually merging propietary and undocumented XML documents for at least 8 hours a day. Junior programmers were assigned to it (who else) and quite promising programmers left our company because the job was too frustrating - over time such XML documents accumulated a lot of cruft inside but we were never sure if we could just do away with it, its being an undocumented thing - such flows were quite memory-hungry - ISs run on a bunch of cheap Linux boxes (xSeries?) and they just never had enough of RAM - the main GUI froze all the time being a Swing one which had to deal with many things at a time (invoking SOAP, parsing, saving out files and compiling too?) - there was this pipeline you stored your context in between steps (and invocations?) of a service but it quickly was turning into a mess. I don't see how else this could be implemented but I'm just saying the feature was dangerous as it was basically a sort of key/value cache with no real control over. wM is not an open-source piece of software so if you're interested in how it really works (or doesn't) you need to decompile it yourself. Thankfully it's in Java mostly not in C so it is easily doable. Zato is open-source. It was possible to develop Java right in the Developer's window (?) but no Java dev ever used it. This editor had absolutely no features and was akin to notepad.exe except that it was limited to 20 or 40 lines at once and about 400px width (being but one of windows in a bigger GUI, that's the reason). I won't go into much details but suffice it to say that in order to make the platform client bought actually usuable and to meet deadlines we were given we did everything we could, and we succeeded, to develop services in Java Spring instead of what I mention above. Hence outwardly it was all wM but in fact we were using Spring and POJOs. This was also when I started to appreciate and truly like Spring (which I remember was kinda new and a hot thing). Hey sorry /r/Python but Java does have a lot to offer and we need to learn! With Zato you develop services in Python. Python is on a sufficiently high level to feel like various domain-specific languages vendors create for EAI while at the same time it is a real programming language. A general purpose one. So you're not constrained to what I personally thought would be best for you, you can use almost any Python feature you like. But you don't have to, there are useful abstractions out of the box. I reckon it's a good compromise, you got both very high level and a real language and a bunch of abstractions you may find useful but you're not forced to use. wM was all about SOAP services. If you wanted to add 2 and 2 you wrote an 'addTwoAndTwo' SOAP service and invoked it in your WMFL code. I think I'm not mixing up things when I say that, it's simply that we stopped using WMFL at first opportunity. It simply didn't scale. This was ironic because a graphical programming language was an important selling point of wM. Zato takes a view that a service is (essentially) just a method of a class. So if you want to invoke another service you just do it right from your code, i.e. like another method. I feel this is much lighter and makes you more productive. wM had a very good broker (they bought it from ActiveWorks or bought AW themselves?). It showed a bit that it wasn't fully integrated with the rest of IS but I don't remember if I had any major complains (there were some but could be easily contained). Broker territories was a good idea and we used it. Pub/sub for documents with filters (with regexp) was a good idea. A good product all around. One quirk it had was its peculiar data format, neither XML nor anything else and I think I even wrote a Python parser for it for some reasons but I guess they just started the product before XML was invented hence the format. As a side note, we published an open-source JUnit-based project for testing wM services and tried to find potential users on wM fora but somehow the feedback wasn't huge. I don't know why really, didn't people test their services? In any case, we used it internally to a great success. The broker had a good GUI, API and the document viewer (that's the name?) was very useful. Zato uses Redis for pub/sub but it (Zato's usage of it, not Redis itself) is not that cool. There is a much simpler GUI (and a feature along the lines of document viewer is planned, only on a bit broader scale) but if you need an actual broker, you need to use AMQP or JMS WMQ with Zato. And frankly, I think I'd like to keep it that way. Bright people work on such things already and things they develop are just fine, why reinvent it? I don't remember if wM broker could full-text search over messages pub/sub-ed and Zato doesn't have it now. It's planned and the first version will almost certainly use Solr (another great Java piece of software). I also was for a moment on a project using wM Trading Networks but this was a completely different kettle of fish, really business document-oriented and seemed quite 1:1 (or 1:n too?) but not really something to do with services. In any case, Zato doesn't have it although it seemed a nice idea, a bit limited in its scope but I reckon that was to be expected. wM had the Modeler and Zato doesn't have one. I'm in two minds about that feature (in wM, Zato, WMB flows or elsewhere). On the one hand it means a sort of an order introduced to the platform (it's not all code only then) but on the other hand it does nothing to ensure an ESB isn't only a convenient carpet to brush all sort of dirty things under. It is simply something that makes people still think in interfaces instead of processes. So I'm just thinking aloud here but I guess I would be happy if there was no such thing in Zato at all. Thinking in processes could hopefully be taken care of by one of BPMs which absolutely don't have to be in Python given that they're to do with painting mostly rather than with actual programming. The only question in that case would be how to make sure people don't start creating crap systems in Zato given that there's only code you deal with, e.g. nothing forces you to actually keep your thoughts at the level of processes. And the only thing to help with such things (anywhere) is a good team of architects and analysts along methinks. I don't suppose this was a very bright discovery on my side :-) On the other hand everyone has their own share of best integration patterns and practices that 1) could be documented 2) could be turned into code Zato offered, e.g. (again thinking aloud) you'd have to implement such and such interface for Zato to understand it's meant to be used not as an anynomous service but part of a bigger integration pattern. Zato doesn't have any XA. I haven't worked with any transaction monitor myself (short of integrating with) but my Tuxedo/RRS friends tell me this is generally really serious stuff. Actually I'm not sure if there are any XA libraries for Python. This is another area Python has to catch up in. Basically, Zato is software to be used when you want to program in Python and you feel (or know) you will be productive with it. Not everything is always that simple because spending years with one product or customer means you must've surely accumulated tons of abstractions and levels on layers on top of other layers so regardless of what your language is (C, C++, ESQL, Java, anything) everything feels quite easy to use. But just recall how many *years* of combined work went into it. Python is simply a very high level language out of the box. Another thing you may want to keep in mind is that with Zato I will really try to strike a decent balance between buzzword-compliancy and the actual ease of use. For instance, WS-Coordination and related specs look useful so they can be implemented (in SOAP or JSON, why not) but I personally have no idea why people think it's so important to reinvent any cryptograhpy in XML/SOAP/WS-*. This seems a bit too much and not really practical, i.e. why not SSL everywhere? (but then again, I understand I have a limited view into matters and some people sure need it, it's just I don't feel it's much needed in messaging). I hope this gives you some general view into the situation.
I think its a cool project. Good on you for putting it out there. 
Here is your breakdown of your most used words: Words | Times Used :--:|:--: Game|37 Battle|13 Try|12 Beat|12 Played|12 Lvl|12 Check|10 Playing|9 Look|9 Story|8 Too much time in the gaming subs.
I took a lot of inspiration from Django's [signal framework](https://docs.djangoproject.com/en/1.5/topics/signals/) and much of the concepts are generally the same. It might make it easier to do an eli5 if I explain how/why I made this. I wrote an irc bot for work that does a variety of things but has the ability to load plugins that add new features. If I have a plugin for the irc bot that needs to know when something happens, like if somebody joins an irc channel or I get disconnected, I wanted to be able to know about it in my plugin code without having to rewrite a lot of things. This way, I can have my irc bot tell all of its plugins what has happened without having to know what plugins are being used. So what is it for? Basically, you can tell other parts of your application when something happens without having to know what those other parts explicitly are or what they might do. I don't know if that makes sense, but I hope that helps!
Thank you ! I'm definitely considering it for a rather large project that's coming in the next few months. I'll keep in touch with you if I have hints about making the documentation more friendly for newcomers. I'll also try to think about some open API that uses JSON.
Python syntax, but I use Buildout to keep the Python-syntax configuration bits out of the source tree. I use the arguments parameter of zc.recipe.egg to push the config into the scripts that invoke the entry points. It looks like this: [my-python-project] recipe = zc.recipe.egg eggs = MyPythonProject arguments = dsn = 'postgresql://user:pwd@example.com:5432/database' config2 = 'Hello World!' Then it generates scripts that look like: #!/software/macosx-x86_64-snowleopard/python-2.6.5/bin/python import sys sys.path[0:0] = [ '/Users/kteague/buildouts/MyPythonProject/src', '/Users/kteague/.eggs/SQLAlchemy-0.8.1-py2.6-macosx-10.6-x86_64.egg', ] import MyPythonProject.main if __name__ == '__main__': sys.exit(MyPythonProject.main(dsn = 'postgresql://user:pwd@example.com:5432/database', config2 = 'Hello World!',)) This is a super concise way of dealing with config, as you don't need to use ConfigParser and have code to locate a config file to read. It's more robust than the fragile and finicky nature of setting environment variables. It avoids the packaging SNAFUs that happen when you have a settings.py-type file embedded within your project. Rolling all configuration into a single buildout file also lets you deal with all configuration settings in one place, even if you have to set multiple configuration methods. I can use another recipe to generate a profile.sh file that contains environment variable settings. I can use another recipe to push configuration into config.ini files. I can use another recipe to push configuration into XML files. I can even use a recipe to push configuration into a settings.py-type file and write that file into the source tree. Then I can see and modify all of my configuration settings in one file and let buildout push that config into the relevant places.
Thank you!
How does it compare to Blinker ? See http://flask.pocoo.org/docs/signals/ for Blinker integration with Flask.
I like the context manager stuff. You should load everything up into a class, though, so that we can have multiple signal handlers coexisting.
I hadn't seen this library, but I'll definitely take a look. Looks similar from a quick glance
It would be nice to have a YAML parser in the standard library for such things, but ... the python standard library is a mess. It's a large monolithic library which makes no maintenance releases. It's better practice to use external dependencies when such options exist, as then you know which version of library you are using and can pull down newer releases as necessary. Sure you'll probably never need a maintenance release of YAML if you're just reading a config file, but it's just a good habit to get into to of explicitly declaring dependencies and not relying on a large, invisible monolithic dependency. 
Thanks for your comment. Using system utilities like cron can be suboptimal if all you're trying to do is schedule periodic tasks within an application, e.g. database cleanup tasks, periodic polling of other services etc. The main gripes with cron are: - cron can be overkill. It requires maintaining a separate crontab file for your app. With schedule you can keep everything in pure Python. - cron is per machine. Multiple app servers require locks of some sort to prevent job duplication. To solve this, we could put triggered jobs on a shared jobqueue (beanstalkc, resque, ...) and have them processed by several workers. - cron's syntax, while powerful, can be difficult to understand and maintain. Schedule provides an easy to read syntax based on the builder pattern, e.g. "schedule.every(2).hours.do(job, args)" Much of this was said in better words by Addam Wiggins: http://adam.heroku.com/past/2010/4/13/rethinking_cron/ I wrote schedule because I needed a lightweight scheduling solution for a Python web service backend. It's 'clockwork' (https://github.com/tomykaira/clockwork) for Python.
The pull request is gone now. Not even showing up in 'closed requests'. Just when I was going to order these shoes...
"All set and safe" :/ Let's just agree to disagree, shall we?
i like it. no fruity custom modules, nicely elegant. 
Such an API should not even exist. It sets a bad example.
why do you disagree? with what? i don’t get it. from yaml import load, unsafe_load the developer who now calls `unsafe_load` now to load untrusted YAML is clearly at fault here.
&gt; Just when I was going to order these shoes... lol
Yeah that helps a bunch, I'm still trying to "get" it enough that I could start using it, but super interesting
I made a comment about why I put this together. Does this answer your question? &gt; I wrote an irc bot for work that does a variety of things but has the ability to load plugins that add new features. If I have a plugin for the irc bot that needs to know when something happens, like if somebody joins an irc channel or I get disconnected, I wanted to be able to know about it in my plugin code without having to rewrite a lot of things. This way, I can have my irc bot tell all of its plugins what has happened without having to know what plugins are being used.
Thanks! Yes, this is clearly a work in progress so suggestions like this are always appreciated.
No. The 2 Python parsers getting active if you upload your requirements.txt, setup.py or pip.log file. Either here: http://www.versioneye.com/services or if you are logged in, here: http://www.versioneye.com/user/projects/new
Another good addition would be other intervals like every().weekday or every().monday It adds a little complexity to the way that you handle your intervals, but I think it'd help a lot.
It's also a noun. I added this task to the schedule. 
I have a ton of jobs that run on a lot of servers for asynchronous ETL processing. However, I also have to support both python and bash shell scripts. I've occasionally considered a replacement for the rare jobs that should poll every few seconds. But other than that cron has worked great, and serves as a single central location to see what runs on the server. If Schedule could support bash jobs as well I'd consider it. But I'd have to move 100% of all jobs over to it - I really don't want my jobs spread across a half-dozen schedulers!
Plus in high level languages like Python you don't have access to real signals or hardware interrupt events (afaik), so depending on the language you can kinda tell.
Yes, that's why I said "does not necessarily have to be". I appreciate that you tried to help him and I'm sure you don't mind learning something new either.
Well... http://docs.python.org/3/library/signal.html &lt;lightheartedly&gt;Anytime you ever say "Python probably doesn't have access to..." stop yourself and check the standard library. We're talking about a language that will give you access to its own Abstract Syntax Trees if you ask it nicely http://docs.python.org/3/library/parser.html&lt;/lightheartedly&gt; Some other goodies: * An RPC server and client http://docs.python.org/3/library/xmlrpc.html * An HTTP server http://docs.python.org/3/library/http.server.html and another http://docs.python.org/3/library/wsgiref.html * `dict`s you can store on a disk http://docs.python.org/3/library/shelve.html * GUIs http://docs.python.org/3/library/tk.html
Maybe its me, but I'm used to cron's syntax from years of linux and find it straightforward and powerful. Its a standard tool, and most *nix users worldwide are familiar with it. The fact that cronjobs start at system boot is convenient versus having to make sure your scheduler is running. User-friendly GUI front-ends to cron exist (e.g., [kcron](http://docs.kde.org/development/en/kdeadmin/kcron/) or [gnome-schedule](http://gnome-schedule.sourceforge.net/) though again, I prefer just using crontab). Anyhow, I find your syntax unfamiliar. If a scheduler with `schedule.every(2).hours.do(jobs, args)` was launched at 3:30, will the first call of `jobs(*args)` happen at 3:30, 4:00, 5:30 or some other time? Could I get it to first launch at 4:15 and then 6:15, ...? Writing `15 */2 * * * /usr/bin/command` in cron is straightforward that it will first run at 4:15. Within a python app with only one periodic job to schedule, I'd find some straightforward *ad hoc* python clearer: while True: time.sleep(2*3600) # (every 2 hrs) job(*args) versus learning your system import schedule schedule.every(2).hours.do(job, args) while 1: schedule.run_pending() time.sleep(1) though if you had several periodic jobs to schedule within a single python app that occur at different frequencies, your scheduler is superior. Maybe if your app automatically dealt with threading it in the background, it would be worth it? You criticized `cron` is per machine, how is this more distributed friendly than cron? I may have missed something. ---- That said, this is well-written clear succinct code. If you need to do complicated scheduling from within a python application, this is the cleanest way to do it that I've seen. If you or others find it useful or more convenient than cron, more power to you and kudos for putting it out there and getting it into PyPI. PS: The [link](http://adam.heroku.com/past/2010/4/13/rethinking_cron/) was down ("Application Error" (503 Service Unavailable), though I did find it in a [google cache](https://www.google.com/search?q=rethinking+cron+adam+heroku).
honestly, that is an awesome implementation. At one point I was writing an IRC bot and was having trouble with writing the plugins to be completely modular, I could never get it the way I wanted it to work in my head. I might revisit that project now with this in mind :)
I think of the "hooks" in Emacs. 
Nope. Made almost all of this myself.
This library has no serialization at all. If the process is killed all the programmed jobs are lost so it's risky to use as-is.
Yep, looks better to me now, thanks.
This technique can quickly make your project unmaintainable. Sure there are some good opportunities but man it can be hellish to debug overused signals. GOTO has nothing on this stuff. Do you really need it? 
you dont but i do
Yes, very good call. API design is important, and keyword arguments are the built-in, Pythonic way to do this. The one further change I'd suggest is call it `schedule.add_task()` or `add_job()`, as I think it's good for functions (which *do* something), to be verbs. This is not always the case in Python, especially for builtins, but I think it's good practice for libraries.
Really? Doesn't it make the 90% use case simpler, while still easily allowing the 10% more complex cases? For example, [requests](http://docs.python-requests.org/en/latest/) supports `requests.get()` for simple cases, but allows you to instantiate `Request` and `Session` objects manually for [advanced cases](http://docs.python-requests.org/en/latest/user/advanced/#prepared-requests). That said, I agree with [jcdyer3](http://www.reddit.com/r/Python/comments/1f6s7s/schedule_python_job_scheduling_for_humans/ca7h0pd) that the `schedule.every(10).minutes.at.foo.bar.quux.do()` API is yucky.
I would like to - how do you?
Wow, thanks so much. That is a brilliant overview.
`requests.get` does not modify global state however.
Lots of your project looks original, though you might rethink saying 100% next time. Lines 28-35 in [reddit-analysis](https://github.com/rhiever/reddit-analysis/blob/a02758517eab09dbb19ea2b18da6f8355658b436/word_freqs.py#L28) look very similar to your 14-18. People should be free to adapt and mix and match code they find online, just as long as they don't call it 100% their own work ;).
Words Times Used Pootis 50 People 48 Look 41 Ha 34 Thought 27 Guess 23 Time 23 Little 21 Doctor 21 Love 19
Shit I forgot about that part. My friend helped me out with that and I never asked where he got it. That must have been it. My bad.
Thats a security bug, as the command line args appear in top, htop and other applications 
As soon as a I read smokesignal, I knew I would be reading code about semaphores.
They aren't command line arguments, the data is embedded within the python program. I do use the [keyring](https://pypi.python.org/pypi/keyring) library a lot for handling passwords securely, it's great. 
The main question I have is: why should I use this instead of Django, Flask, Bottle, web.py, CherryPy, etc.? Is it solely for Python 3 support?
[Related reading](http://greenteapress.com/semaphores/downey08semaphores.pdf)
Thanks, buddy. I live in Austin, which is like the San Franscisco of the South. There are large programming communities of all types. Definitely a lot of people here. The WordPress meetup has over 1000 members. Python had definitely been interesting. It seems like a good language to learn things that I might never learn in PHP, so I will definitely push forward on it.
I see what you're getting at -- makes sense.
I second that. Had to make a few UI tools for my studio and having hundreds of people use it is really a stress test for the UI. The more people who use it, and the less tech savvy they are, the better. 
And you've just added two more instances of it. Sneaky!
I didn't originally intend to do any inter-thread communication, but I may see about including this in some future work. Thanks for the resource!
Here's an article I wrote a few years ago showing one example of how to use signals (the real POSIX kind, not this pub sub thing): http://www.linux-mag.com/id/5377/
Using datetime, timedelta or even better python-dateutil for more complex rules might be the better way. Reuse, dont reinvent, just for the API.
Sounds similar to the events that are found in Flash and JavaScript. 
YAML up in here...
Primarily at this stage it's for Python 3 support (that was my main motivation for writing it in the first place). I guess it sits somewhere in between Flask/Bottle and Django in terms of features and uses. It's opinionated enough to say "this is how we think you should structure your applications", but gives you enough freedom to modify that if you need to. I do have a roadmap of features planned for it, which I'll be adding to the repo as well.
JSON allllll theeeee wayyyyyy. MsgPack for small data storage!
&gt; XML, is made to be machine-written, and easily parseable. Naw. Parsing XML is no fun at all.
Well, it exists in random, matplotlib, and quite a few others.
No - I start it with `pdb script.py` and then the buffer opens, it prints the working directory, then nothing - no arrow, no (Pdb) in the gud- buffer. I'm aware of the GDB commands, and PDB, so far(running it in terminal) seems similar, but typing commands has no effect.
I'm considering moving one of my projects to ConfigParser. How do you set defaults in ConfigParser? Do you load another config file and then overwrite these with the defaults set by the config file? Or do you just manually load a dictionary and overwrite it with the config file values? 
JSON, just because it takes one line of code to get a python data structure from a JSON config file.
Why not just use a settings.py file and use straight Python? If you use dicts, you get the readability of JSON and the power of Python's data structures and stdlib. In a recent project (not web-based), I used something like this: **settings.py** import os BASE = { 'color': 'red', 'music': os.path.join('Users', 'sloria', 'Music'), 'foo': True } TEST ={ 'color': 'blue' 'music': os.path.join('Users', 'test', 'Music'), 'test': True } DEV = { # ... Development settings } PROD = { 'test': False, # ... Production settings } def get_settings(env, test=False): settings = BASE settings.update(TEST) if test else settings.update(PROD) if env == 'dev': settings.update(DEV) elif env == 'mri': settings.update(PROD) else: raise ValueError, "Environment not supported." return settings **some_file.py** from settings import get_settings # ... settings = get_settings(env='dev', test=True) print(settings['color']) # 'blue' 
For me my config file is shared across daemons and other languages so Json makes better sense than using pure python like your suggesting. That is however something which I do with smaller projects.
&gt;Not a big fan of the pseudo-english syntax. Major fan of the pseudo-English syntax. It's the only thing Ruby has over Python, and when we steal it, we steal their power. 
[anyconfig](https://pypi.python.org/pypi/anyconfig) will load multiple JSON, YAML, INI and XML files into `MergeableDict`(s) with `__getitem__`. [pyramid.config](https://pyramid.readthedocs.org/en/latest/api/config.html) ([docs](https://pyramid.readthedocs.org/en/latest/narr/configuration.html)) is also great.
Interesting. Most of my projects are web based applications, however I simply have my config file placed in my .gitignore. Then again using environment variables would be a little more difficult for me, because most of my config settings are initial values and I have a fair deal of them.
This will be a great starting point: http://pymotw.com/2/ConfigParser/
Up vote for the `quite silly` bit. I've recently been using redis as a store for site wide config settings that can be changed on the fly, live. JSON mostly serves as the initial value for this system and only holds stable config settings such as mail server info and such. So far I like redis for that sort of thing, and it works quite well for me.
This looks like an interesting project, mainly for the fact that it seems to provide a common interface for all types of config files.
Wow, all of this feedback is great! Thank you all, maybe for one of my later projects I'll mess around with some of the different solutions here, and see what works best for me besides my typical JSON flat file approach.
* https://en.wikipedia.org/wiki/Turtle_graphics * https://en.wikipedia.org/wiki/Logo_(programming_language) * https://en.wikipedia.org/wiki/Python(programming_language) * http://scipy-lectures.github.io/intro/language/python_language.html * http://interactivepython.org/courselib/static/thinkcspy/PythonTurtle/helloturtle.html * http://docs.python.org/2/library/turtle.html * http://docs.python.org/3/library/turtle.html * http://wiki.sugarlabs.org/go/Activities/Turtle_Art 
http://www.reddit.com/r/IPython/comments/1dl8wc/seeking_advice_for_introducing_ipython_in_high/ http://www.reddit.com/r/Python/comments/1dq7j0/help_tips_on_starting_up_a_coders_club_at_the/
Similar module with a similar name written by y.t. http://github.com/keis/smoke I'll look into your code and see if I can borrow some ideas 
It would be much better to switch your if statement there to check whether prod is explicitly specified rather than dev. For example, if your deployment doesn't set the environment variable correctly (potentially indicative of other problems), then the deployment should not be using prod endpoints/databases/credentials/etc. As a rule of thumb.
I don't get it. What's the point of using a with statement? def expose(f): f.__globals__.setdefault('__all__', []).append(f.__name__) return f Edit: this one should work for classes, too: def expose(obj): import sys mod = sys.modules.get(obj.__module__) assert getattr(mod, obj.__name__, None) is obj, 'Object not found in module' vars(mod).setdefault('__all__', []).append(obj.__name__) return obj
Your flare has twisted and pyramid... uhhhh, wat????
What's the advantage of using the registry instead of AppData/Roaming?
I use it in my projects and going well so far :)
Random is a special case because the state of the PRNG is an implementation detail. Make two system random objects and they are each stateless. Many Python math libraries are a collection of bad API and usually work that way because they are inspired by matlab which was written by people that did not write libraries but a scriptable shell for mathematicians. And again, just because a mistake was made in the past does not suddenly mean it should be continued in the future.
Depends, the tools available almost make it a complete IDE imo...
Downloads was a stat we used on Django Packages. I guess we have to fix this now.
Thanks for your suggestions, I've wrapped them in an [issue](https://github.com/dbader/schedule/issues/5).
Good point. My example was off the top of my head as I was writing, but your naming convention looks better.
You could use schedule...do(subprocess.call, '/bin/sh', 'task') 
One reason is that, and correct me if I'm wrong, Microsoft suggests using the registry for storing settings. However, that in and of itself isn't a particularly great reason. In my case, it was because I already needed to load some settings from the registry in the program I described that were presumably written by another program, and vice versa. Because my application needed to interact with another Windows-only program, I needed to store and retrieve at least some settings from the registry. At that point, splitting some settings out to write to AppData would have been harder than using only the registry.
Thanks for the well written remark. I would have made a similar one.
But neither is YAML I think.
i think yaml is harder than xml nodes
Is it wrong in [blinker](http://discorporate.us/projects/Blinker/), too? &gt;&gt;&gt; from blinker import signal &gt;&gt;&gt; initialized = signal('initialized') &gt;&gt;&gt; initialized is signal('initialized') True
Is the `python` tag more lax in moderation, or am I missing a reason this question should not be closed? &gt; We expect answers to be supported by facts, references, or specific expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. Or, is it not closed because a 28k+ user has the top answer and wants another "great answer" badge...
Can you start and ipython notebook session on the machine?
I think the recommended way moving forward is to use AppData for settings. I have not found an explicit statement from Microsoft, but there are a number of reasons why this seems to be true. It is much easier to move settings by copying the folder to another computer instead of messing around with the registry. Also, in a corporate setting, the Roaming folder allows a user to have his settings available from any computer connected to the network. Jeff Atwood had a [post](http://www.codinghorror.com/blog/2007/08/was-the-windows-registry-a-good-idea.html) about this. Lastly, Windows 8 Store apps use AppData as well. Of course, if you just have a few keys, then it doesn't make much of a difference, particularly if your application does not heavily rely on user specific data.
I don't see anything gimmicky or magical about it, it's pretty obvious how it works. "Gnarly" is the opposite of "sane and clean", not a requirement.
Good point. I voted to close.
you can add 'raw_input()' in the end - it will wait for a user input and will not close the window, untill you press enter also have a look on Sublime Text 2 - it is a great text editor itself and have some IDE features open you python code in it, press ctrl+b - it wil run the script and show you a console. you do not need raw_input() in this case 
E book has been out for a while. I read it a few weeks ago. Good stuff especially if you're getting into py3k. 
Bonus points for the google code jam challenges. They are a blast to try :)
Ahh, Thank you! Yeah, I use Sublime Text 2 to build websites, love that program, Thank you :D
I've been looking for something like this, thanks!
I tried for a while, and then just gave up. [This](http://www.reddit.com/r/learnpython/comments/1063o1/wx_install_problems_os_x/) might offer you some hints that will help though.
You could write a simple web application to return the PNG and/or some HTML over HTTP (over SSH). I'm not sure about rate limiting on the Pi. Django is great; bottle.py is really easy. http://www.reddit.com/r/Python/comments/1eboql/python_website_tuts_that_dont_use_django/c9yxl8w
http://scipy-lectures.github.io/intro/matplotlib/matplotlib.html
Those are high level languages. You can find python freelance jobs on elance.com You can find many permanent jobs but also some remote ones on python.org and pythonjobs.com.
http://www.pythonchallenge.com/
`cat` is for con*cat*enating output... `less` is for reading with syntax highlight and stuff...
I've never understood the concept of people after coding exercises but not maths... Do they not understand that it is the numbers driving the whole coding process? Maths-based coding exercises are what drive your knowledge of the back end, if that isn't your thing what you are actually after is design work, be it engineering for cross-component interfacing or graphic design/psychology for HCI.
Cool! http://augeas.net/docs/references/lenses/files/sshd-aug.html ([source](https://github.com/hercules-team/augeas/blob/master/lenses/sshd.aug)) http://www.reddit.com/r/Python/comments/1coj82/hi_rpython_ive_released_a_tool_to_execute/c9iu1tb [UserDict.DictMixin: `__getitem__`, `__setitem__`, `__delitem__`](http://docs.python.org/2/library/userdict.html#UserDict.DictMixin) ([operators](http://docs.python.org/2/library/operator.html)) 
If you use IPython, there's a `%pycat` magic. Though it's currently fixed to Python highlighting.
* http://docs.python.org/2/using/windows.html#executing-scripts * http://docs.python.org/3/using/windows.html#executing-scripts-without-the-python-launcher * [ipython: `%run?` || `!python scriptname.py`](http://www.reddit.com/r/Python/comments/1drv59/getting_started_with_automated_testing/c9tfxgd)
Thanks for trying - get the feeling it doesn't have much support for Mac users.
`cat` comes from the word con*cat* and its most frequent use is printing files on the standard output. `less` doesn't do syntax highlighting.
You should try this in another language, too. I did it in Ada, and after that I was sold on Python for general purpose problem solving.
All it takes is the X11 client libraries. They should not be too big. Everything else can be on the machine you are ssh'ing from.
"Expect your test projects to live a bleeding edge environment where features are born and die in a manner of weeks" Well, that's not really convincing...
Using homebrew you can install it using: brew install --python wxmac --devel This installs both wxWidget and wxPython There's probably a macports version as well.
In what world do numbers drive the whole coding process? Not all non-UI work is about math. Also, most of these math-based coding exercises don't require very much of any language at all. Most of it is actually understanding the math so you can reduce the problem. After that you're just using basic loops, condition checking and simple calculations. They're good for practice converting a problem into a sequence of logical steps (an invaluable tool for programmers of any sort), but it's not like you're going to do Project Euler in a specific language and be an expert on that language. And math isn't the only domain that gives you the ability to practice breaking down problems into code-like steps.
I never really understood why Top Coder is so popular. I'm guessing it's due to historical reasons. I keep hearing about it everywhere. Everyone at Google recommended it when I was applying for an internship there. Etc. The first two times I went to their website, I actually thought I was at the wrong place, and after looking for 10 minutes, gave up. At some point I thought this was a joke and half the Top Coder challenge was actually finding out how to use it. The third time, I persevered through, downloaded a Java client? Didn't work. Couldn't connect, downloaded another client, that one worked. Had to make another account where they asked for way too much information about me, my business? Etc. Then, once in the client, I had to mess around for another 5-10 to finally find a question, which was really long and complicated, and didn't support Python. I later found a single question that supported Python. Overall, horrible experience. I just stuck with ProjectEuler. edit: fixed some mistakes. It was typed on a phone keyboard so it was messy.
Is it worth the buy though? I feel I have a decent grasp on python, and some of the advanced topics. So after taking a quick glance through the index I was unsure if it was worth it.
here is a sampler with 48 pages: http://cdn.oreillystatic.com/oreilly/booksamplers/9781449340377_sampler.pdf
JSON? I thought Python had its own dictionary/list syntax, that might be friendlier to Python developers than something which looks similar enough to be confusing when it doesn't parse the same ..
/r/learnpython is a much more suitable place to post these types of questions.
You can buy the ebook directly from O'Reilly at a great price. Use the promo code **DSUG2** to get 50% off. Only works this month though. After buying you can download the file as an ePub, Mobi or PDF. DRM free. I have nearly completed the first chapter and it seems great so far.
I think it's a worthwhile book to have for programmers with basic or intermediate amount of Python experience. The previous Cookbook was great but severely outdated in 2013. It's awesome there's a new version now, and it covers the latest and greatest Python too.
While I can visualize an adjacency list of packages and version dependencies, it would be great to reference or visually see a graph of *`_requires` in the docs. There are [a lot of ways to build a dependency graph](http://www.reddit.com/r/Python/comments/1f4pbk/pypi_download_counts_removed/ca7646i) from [PEP 426 Metadata for Python Software Packages 2.0](http://www.python.org/dev/peps/pep-0426/) and [PEP 440 Version Identification and Dependency Specification](http://www.python.org/dev/peps/pep-0440/) (JSON) metadata 
i'd prefer json to xml or yaml. 
Wow, I just looked through the TOC and it looks... um... *comprehensive*. Just what I need to get started with PY3K and best practices. 
 settings = get_settings(env='dev', test=True) What do you do if some_file.py needs to be run both in tests and prod?
If you look at how [distil](https://distil.readthedocs.org/en/latest/packaging.html#packaging-metadata) resolves dependencies, you'll see that it addresses development and runtime dependencies, too. There's no need to download the packages or have them installed. It's not (yet) compliant with PEP 426, because it predates the latest draft of the PEP.
You got me when I was bored, so I had a look at where you commented #there has to be a better way of doing this in cell 4. What I did isn't neccesarily better, but it is different std_dev = numpy.array([numpy.std(i) for i in available_by_id.itervalues()]) max_std_dev_index = std_dev.argmax() highest_std = std_dev[max_std_dev_index] k = available_by_id.keys()[max_std_dev_index] Maybe for extremely large datasets mine might be a little bit faster, but yours could be more memory efficient. Either way, I'm not really sure why I'm posting except to justify to myself why I spent 5 minutes fucking around when I should be sleeping.
&gt; or yaml why?! JSON is a strict subset of YAML 1.2. the only difference is that YAML allows for more ways to express the same structure, some of them making it easier to write. sure, we don’t have it in the stdlib, but we should imho. --- e.g. the example metadata file: [metadata] name = pypi2rpm version = 0.1 author = Tarek Ziade author-email = tarek@ziade.org summary = Script that transforms a sdist archive into a rpm archive description-file = README home-page = http://bitbucket.org/tarek/pypi2rpm project-url: RSS feed, https://bitbucket.org/tarek/pypi2rpm/rss classifier = Development Status :: 3 - Alpha License :: OSI Approved :: Mozilla Public License 1.1 (MPL 1.1) in JSON: { "metadata": { "name": "pypi2rpm", "version": 0.1, "author": "Tarek Ziade", "author-email": "tarek@ziade.org", "summary": "Script that transforms a sdist archive into a rpm archive", "description-file": "README", "home-page": "http://bitbucket.org/tarek/pypi2rpm", "project-url": { "RSS feed": "https://bitbucket.org/tarek/pypi2rpm/rss" }, "classifier": { "Development Status": "3 - Alpha", "License": { "OSI Approved": "Mozilla Public License 1.1 (MPL 1.1)" } } } } in YAML: --- metadata: name: pypi2rpm version: 0.1 author: Tarek Ziade author-email: tarek@ziade.org summary: Script that transforms a sdist archive into a rpm archive description-file: README home-page: http://bitbucket.org/tarek/pypi2rpm project-url: { RSS feed: https://bitbucket.org/tarek/pypi2rpm/rss } classifier: Development Status: 3 - Alpha License: { OSI Approved: Mozilla Public License 1.1 (MPL 1.1) }
I don't think Ada is really the right language to try that with, they aren't really used to solve the same problems.
I like [CodeEval](https://www.codeeval.com/), they support lots of different languages, but they don't have nearly as many challenges as Project Euler does. There's another one called [HackerRank](https://www.hackerrank.com/) that's a bit more challenging than CodeEval.
That's exactly the point. To a kid with a hammer, everything looks like a nail. To a programmer who is in the habit of using a single language, everything looks like it needs that language... Until you get bludgeoned by the problem space, that is. Doing these problems in Ada was brutal, to say the least. And re-accomplishing them in Python was a breeze, and that was enough to get me out of the "everything MUST be done in Ada" zombie-mindset. 
All coding work is maths, because a computer is a binary machine. Once you understand the three coding constructs (sequence, selection and repetition) which are themselves mathematical concepts, you can go on to learn procedural and/or OOP - I'll leave you to discover where those came from. There is indeed a lot to learn in IT that isn't maths - but the development of algorithms is absolutely a mathematical process. Once you have the algorithms needed, you can abstract away the maths, but then you are dealing with software engineering, or interface design, like I said.
Didn't take long: &gt; closed as not constructive by recursive, Joe Frambach, gnat, Josh K, Keith Gaughan 4 hours ago
have an upvote for non-affiliate link.
Share your notebook. I'd like to see it. I was actually thinking of making a pandas dataframe out of all the stations, it just wasn't natural to me. 
I got this on the O'Reilly anti-DRM sale a few weeks ago, impressed so far.
you can save the file as .pyw instead of .py
I will usually have conditional logic to determine which environment to use. For example, in a GUI application, "some_file.py" pops up a dialog box which allows the user to specify which environment they want to use. This, of course, doesn't always make sense for many applications. I do, however, usually start projects using a simple Python file with dicts for configuration.
It's not quite the same, but if you want to really, really understand the ins and outs of python, I recommend the [python koans](https://github.com/gregmalcolm/python_koans/wiki)
None of those problems involve math. Sure the computer does math behind the scenes in the process of doing what you tell it to do. But you don't have to know or understand any of that math to solve the problem and write the code to solve it. To go through them one by one: 1. To process image files in a folder you need to get the list of files, and loop over it. At each step you check if the current file is an image file and, if it is you do something with it. Or you can use something that filters the files when you get them and get a list of only the image files then loop over and process without the condition check. Although in that second case the filter is probably doing what you'd be doing manually in the first case. 2. You generate and html string to create a page with a form, feed it through a web server, get back a form submission through the web server, get the string for the content from the form values, then save it somewhere. 3. You connect to a db, send an sql query, pull out the results. You don't have to know any math at all to do any of those things. Now, take Project Euler instead. Here's a write up on the first problem: http://en.wikipedia.org/wiki/Project_Euler#Example_problem_and_solutions You solve the math problem first, then you code it. It's entirely different.
Freelancer is a terrible site for work. As another dev said to me a while back, &gt; Avoid Freelancer like the plague. It's always a race to the bottom. Try ODesk or LinkedIn. ODesk is more for freelancing, working on singular projects while LinkedIn is about finding a permanent position. From your experience with HTML and PHP, it looks like you're wanting to be a web dev. Python is definitely a growing platform on the web but it's still in its infancy compared to the tenured web platforms like PHP or ASP.NET, and Java EE to a lesser extent. Python is a good all-around scripting language, as it has good web platforms as well as computational ones. Its interpreter is embedded as an internal scripting engine in many different softwares, like GIMP, Blender 3D, and LibreOffice. There's jobs out there. Probably more plentiful in the permanent position sector than freelancing, as Python is used in more specialized technologies than websites for small- to medium-sized businesses (which employ most of the freelancers). But what's more plentiful than paying work, permanent or freelancing, is open-source projects. And those look good on your portfolio. Damn good. And they let you demonstrate your team skills, which don't come into play in freelancing since 90% of freelance jobs are solo. Policies on telecommuting depend on the employer. Some want you in their office so they can keep an eye on you, or so that you can work with your colleagues face-to-face, or so that your work stays in their system. Some might let you set up a VPN so you can work from wherever. A few might prefer telecommuting because they have no room in their office. But this is all assuming you're looking to make a career out of it instead of just supplementing your income. You can try Freelancer if you want to get 20% of your earnings taken in fees and work below minimum wage. I'd recommend you check out ODesk though. Fun random fact: Reddit is currently running on Pylons, a Python web framework. I apologize if that whole thing wasn't very coherent. It's past my bedtime.
*cough* /r/dailyprogrammer 
yeah mainly because it's not in the std lib. 
ah. ok. i think we should go a new way for this: 1. define a YAML API very well, that uses `load` for what pyyaml calls `safe_load` and some longer name for the unsafe loading which creates classes and such (making us safer than ruby ;)) 2. implement that API in the stdlib 3. create (or leverage) a discovery mechanism that allows for other YAML implementations to declare themselves compatible with this API 4. when `import`ing `yaml`, prefer other installed implementations 5. ⇒ automatically allow fast implementations such as pyyaml+libyaml to be used instead of the pure-python YAML implementation in the stdlib because YAML is a standard and the API is well defined, we get well defined behavior regardless of implementation. so we can avoid putting more C into the stdlib while making it possible for users to enjoy fast parsing, and all that without packages explicitly having to import a fast 3^rd party implementation. /edit: idea’d: https://groups.google.com/d/topic/python-ideas/jbGM8BJapBQ/discussion
That project is so confusing. &gt; Removal of all dependencies on Pylons I thought they both had somewhat merged? 
Thanks a lot for the promo code and info. Really good book.
TurboGears itself won't be merged with Pyramid, even though the TurboGears team is more than willing to collaborate on any building block the projects can share as both are based on some common blocks like webob, repoze.* and many other Pylons Project pieces. The confusion has probably been caused due to the fact that some of the TurboGears developers wanted to create a project named Orion which was a rewrite of TurboGears based on pyramid, but I'm not aware it actually ever got started.
Well signing up for a Developer Preview means that no features are fixed and will be available in the final product. Don't expect to have a solid cloud application platform where you can deploy an app and keep it running for years without looking after it. Eventually this will be our goal but as a user of the Developer Preview we expect you to use and abuse our platform. Hack around with it and give us feedback. If you suggest feature X there's a chance that we might implement it but it might as well be gone a few weeks later when it doesn't work out. 
i thought it contains the metadata for packages… i write `setup.py` per hand, and i’m sure i’ll have to continue to write metadata per hand. if this isn’t the future metadata format, what is?
`raw_input()`: Python 2.x `input()`: Python 3.x
hi, main contributer here, yes, the are in development
IDEs can provide version control integration, debuggers, code analysis, autocompletion, and some other nice features. If you're happy without an IDE, you don't really need an IDE, but it couldn't hurt to play around with one. There are some free IDEs out there that work with Python.
&gt; Is there a significant advantage that IDEs provide? I've never used one and I am wondering if I have been missing out on something awesome. The usual answer is that an IDE allows seamless integration with your editor and project management. E.g. in one direction, creating a file in your editor adds it to the equivalent of `setup.py` and in the other direction, un-declared dependencies in your project will be highlighted in your editor when, for example, one tries to `import` a non-standard library package which is not in `setup.py`. These concerns tend to be more prevalent in non-Python worlds which explain why the examples above seem somewhat constructed. Aside from integration of project management with the editor, modern IDEs also include SCM integration so that creating a file not only adds it to the `setup.py` file but also `git add`s it. Now, on the flip side, there is no reason why a sufficiently smart editor can't provide these functions. For example, I use vim with NERDTree, syntastic and fugitive which, for Python, provide all the IDE-ishness I could want. As of today, IDEs tend to include integrated debuggers, GUI designers and, in some cases, time management tools. If you've no need of them, you've no need of an IDE over a modern editor. In the old days, the difference between Notepad being a text editor and Visual Studio being an IDE was clear. Nowadays the no man's land between them is being colonised.
I have never found a Python IDE that I liked. I use Sublime for everything. Even thinking about using Sublime makes me feel enlightened and calm as I type this. Ahhhh.
I find Windows installation to be a little tedious, so what's the simplest way to get a good IDE? I just need Python, Numpy+Scipy, Matplotlib, an IDE and iPython. I just do scientific computing and data analysis.
I did freelance/contract dev for several years. Your best bet for finding clients is via human networking and meetups. Otherwise its hard to find good paying jobs remotely because you're competing with the entire planet's pool of competent engineers. Additionally it might be better to connect with a remote/telecommute capable consultancy like Dolphin Micro, Six Feet Up, or similar so that they provide the face to the client while you get to code from wherever.
Great I look forward to reading this. I do some bayesian type statistics, and I should be using it more often but finding practical examples can be difficult.
http://docs.python-guide.org/en/latest/scenarios/scientific.html https://code.google.com/p/pythonxy/ http://scipy-lectures.github.io/
http://wiki.python.org/moin/IntegratedDevelopmentEnvironments#IDEs_with_introspection-based_code_completion_and_integrated_debugger
I liked it a lot. It's neither beginner nor advanced, like me. And very well done. Check out David beazley's coroutine material. I think your response will be a good indication how you'll like the book. http://dabeaz.com/coroutines/
Have you used Eclipse? How is it for Python? I've used Eclipse daily as a java programmer, and now that I'm making the switch to Python I'm not sure if I should switch to a different IDE.
I'm still on the hunt for one. I've used Komodo, WingIDE, Pycharm, and now PyScripter. All I want is one that makes sure I'm doing PEP8, will run my code when I hit a hot key, has a docked python console, and doesn't force me to create "projects" when all I want is to create a script in a folder and call it good.
Most of the IDE functionality is replaced by better command line tools and better language design. For example IDEs *can* provide source control integration.. but you should probably just dive in and use git directly. IDEs *can* autogenerate boilerplate code... which is not a huge time saver in a succinct language like python. Something like SublimeText is the best bet IMO. Sort of in between a text editor and an IDE. Some things it provides above basic text editors: * Lint/PEP8 plugins to catch errors and formatting problems as you type * context-aware autocomplete * global search/replace * vim mode if you're into it * directory tree browsing * build system * themes and plugins galore 
Eclipse pyDev is quite nice, too. It is a nice alternative to Spyder. I don't usually mention it because PyDev is somewhat harder to install than Spyder. If you are used to Eclipse though, you won't have trouble with that. The only downside I can think of is that PyDev seems to optimize a bit for the java style compile/run loop instead of the more pythonic REPL style development.
I use sublime and it works across all platforms. @OP - Why fight with windows? From personal experience it's simply not worth the time and trouble. If you only use linux for coding. Install virtualbox on your windows side, then create a virtual machine using whatever flavor of linux you like. You can quickly switch back and forth without having to dual boot. 
I use PyCharm by JetBrains on Windows 7, but the code is run &amp; tested on a Linux VM. Debugging works great, had no problems there. I could ramble on about what I like &amp; don't, but the bottom line is that there's lots of great things that come with an IDE, and here's a simple demo vid that shows off a few features: [YouTube: PyCharm Tutorial](http://www.youtube.com/watch?v=jaFEODzG7B8). There's lots more vids, just watch a couple and you'll see what the fuss is about. Text editors have their place (I'm not firing up an IDE to write a Fab script, I'll put it that way), but for writing much more than a stand-alone script, an IDE can really make a massive improvement to your workflow. JetBrains offers 30-day trial on all their software, you should check it out. And again, from the Windows pov, I'm happy: I get to use Windows for my GUI, but my code is being run on a Linux environment. And one more point for PyCharm: it runs on Windows, Linux, and Mac. I seamlessly hop back and forth between my Ubuntu laptop and the Win desktop, it's... pretty damn functional, definitely helps productivity.
pythonxy (westurner's post has the link) has all that for you. It includes the spyder IDE, which is supposed to be sort of similar to matlab's IDE. There may be better IDEs out there, but the learning curve was pretty quick for me w/ spyder. 
Would virtualbox give me the best performance? For my research, I basically need the full force of my processor. I installed two OSs because I assumed that an actual OS would be more efficient than virtual box. Maybe, I am wrong.
Ah. I don't have Win8 Pro :( 
:/ Alas, never mind then. VirtualBox is a decent alternative, and it works with Vagrant, which is helpful in keeping a golden master for you to replicate a fresh environment for every new project.
Newer alternative to python(x,y)? [winpython](https://code.google.com/p/winpython/). OTOH, I would go with just pip plus your editor of choice (gedit, SublimeText) with pyflakes8 and ropelib integration.
PEP8 checking would be nice. Like, if it gives me a squiggly line underneath something that isn't. Alt/Command-Tabbing to a terminal window to run the program isn't that cumbersome, but the lack of a proper debugger puts me in embarrassing printline debugging land. Also, fuck IDEs that make me do a project folder and all that shit. 
Will it drastically be different though? It takes me 60 seconds to switch OS (restart, boot into Ubuntu, login to account). Will VirtualBox be any faster?
Wing is a great IDE for Python on Windows (or otherwise). Very simple to pick up and use productively. Edit: Also, its free.
Sublime text 2 is free albeit nagware. 3 will probably follow suit once it is out of beta. 
 &gt;I've been coding in Python on Linux for a few years now. I specifically boot into Ubuntu whenever I need to code in Python, and I just use gedit text editor for typing up my code. You have heard of virtual machines right? Run Linux in a VM and it just becomes another app. Better yet run Windows in a VM under Linux. &gt;This has worked well for me until I decided that maybe it's time to install Python on Windows so that I don't have to switch OS every time for working with Python. Well for one you don't need to switch OS every time. Beyond that Python and the UNIX/Linux environments seem to be made for each other. At least for me Python on Windows seems to be an after thought. . &gt;I am pretty lost and tried reading up online on the matter. Pretty much all online discussions regarding Python on Windows involve some IDE instead of a simple text editor. Well you do realize that Windows suck as a traditional command line development environment. Beyond that how does one become lost in a Windows based IDE? &gt;Is there a significant advantage that IDEs provide? I've never used one and I am wondering if I have been missing out on something awesome. Well you best start using one to answer that question. Some people hate them some love them. I tend to go for Eclipse and PyDev because I can run it on Windows hardware, Macs and Linux based systems with equal results. For the simple Python programming I do PyDev is good enough, easy to use and with modern hardware snappy enough. I'm not sure I'd call it awesome but the project based nature of the IDE does make a lot of things easier or at times down right trivial. In the end if you are using a high level language like Python there is synergy with a high level development environment. 
Most impressive! I've got this bookmarked because I know I'll be working on a project with matplotlib soon, and performance will definitely be very important.
I rely on Hyper-V all the time, largely because it means I never have to turn the virtualized server off. That said, I always do the coding part in Windows, using a Samba connection to write to files on the Linux box, and SSH into that virtualized Linux server to run things like git, and... ...you know, your solution might be simpler.
ST2 has pep8 checking through sublimelint? I use it all the time. You can even remove that pesky 80char limit! I agree so hardly with project thing. Sometimes you do want project, but most of the time, especially with Python, you just want to write a one file thing and don't need all that stuff. I too stick with Sublime though. I've tried many IDEs, and while they all have neat features, none of them is as fun to code in. They also tend to be so bloated. I really wish I could choose and select specific features, but then again that's mostly what I do with ST2 through packages. Also, relearning (or rebinding) all your keyboard gestures is pretty painful too.
[SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) will show PEP 8 errors and warnings.
Text editors have syntax highlighting at best. If you're after a gEdit replacement, try [Notepad++](http://notepad-plus-plus.org/download/v6.3.3.html) IDEs have: 1. introspection 1. intellisense 1. ability to warn for syntax errors 1. debuggers 1. hooks to integrate with version control systems 1. ability to manipulate system variables (eg: `sys.path`) for specific projects ...
It's not free, but give pyCharm a shot. They have a free 30-day trial. It installs easily, and has the ability to manage installing python + modules. 
Pycharm has added inline PEP8 checking, along with refactoring help. It still runs things as "projects", but a project is just a directory. So you can just put a script in a folder. I also have a folder/project called "scratch". For small things, I start building my script in here and if it advances enough, I migrate it to its own folder.
^^ I agree using salt/vagrant. Using VB won't give you the best performance. edit: to clarify. Using virtualbox will not give you the best performance. It will simply save time since there will be no need to boot into ubuntu. You can just leave virtualbox open and ubuntu will be there in another window just like any other program
You will take a performance hit with virtualbox, but unless you're coding a serious power program (ie, massive number/grapchi crunching), it won't be a big deal. The biggest bit will be memory. A laptop with 4GB of ram will be tight, you'll probably want to allocate 2GB to your linux install, so if your workstation has 6GB or more, that will be much nicer. With your OS installed in virtualbox, you can do a couple things: 1. Shared folder between Windows and Linux 2. Suspend the VM + all running applications at will, leading to instant startup of work environment. 3. A portable environment you can move to a new laptop/desktop 4. All the linux cli tools available. You can also run you VM in full screen mode, or possibly seamless mode (applications running in guest appear as windows within the host enivronment). I haven't tried seamless mode the other way around with a Windows host and a linux guest, but having seamless mode windows in a ubuntu host works pretty well. -John
I couldn't get it to install manually, either. Setting up my new mac recently, though, I used macports and didn't have any problems installing it. Worth a try.
I have just finished updating a tool to display inline matplotlib graphics in a terminal that might work for you: https://github.com/mitotic/graphterm I tested graphterm on a Raspberry Pi a few months ago, but I have not tested the most recent version. Check out the last section (SSH etc.) of the documentation page at http://code.mindmeldr.com/graphterm/start.html##ssh-port-forwarding-and-remote-access
+1 for Python(x,y). I have similar usage needs as you do and have been happy with it so far. Reminds me of Matlab's workspace. 
I think your bot is b0rked. I sent 1 message but so far have received 4 replies. HALP! EDIT: 6 times now FFFFFFFFUUUUUUUUUUUUUUUUUUUUU
Vagrant uses the headless method with VirtualBox, which is nice--cuts down on a lot of memory use.
You are lumping two different questions together. An IDE can help you write python because they have code completion, code folding, smart indenting, debuggers and profilers. I don't think IDEs handle installing modules, maybe some do but for the most part that is not what they are designed to do. What you should do is spend some time trying to instal the modules you need correctly then choose an ide, or text editor. There is pip for managing installations, they even have their own irc channel #pip. 
No, I know they don't. My question segued into a question about useful distributions involved IDEs while having what I want. I apologize for the confusing question.
If your machine has enough resources, why not run Ubuntu in a VM? I'm running Fedora 18 in a VM on Windows. Solves the dual-boot issue. :) Pydev/Eclipse is okay, but heavy. Komodo Edit is also pretty nice too.
Downvote and move on.
I don't actually. I've never used an IDE before. I just read about it on Wikipedia and wonder what it does.
I was recently making a plot by using vlines(). I was calling plt.vlines() for every line segment which took about 12 seconds to make about 6000 lines. Then I realized vlines() can take in arrays, so I was able to reduce the calls from 6000 to to one using an array with 6000 rows, saving a boat load of time. So reducing the plot() calls is obviously the easiest way to save time. 
You mean people who work on flask core? because I'm not one of those, but I develop for http://researchdata.elsevier.com which has 2 flask sites &amp; 1 django site and I use a variety of flask-plugins.
Heh, how'd you guess? =)
Yes, that would provide the same basic abilities, but I wanted something that felt similar to how I have been used to using django signals. Just a matter of preference, I suppose.
I'm going to clear my inbox and restart it.
fwiw, it may have been a glitch on reddit's end. Whenever I got a message from the bot, the counter next to my inbox would clear, but when I got a new message the counter would be +1 what it previously was. In all, I got 6 pms from the bot and the last time showed +6. I'm going to assume the same thing was happening to the bot every time somebody sent a request to it, resetting the counter to include previous read pms thereby causing it to re-respond.
Nope, I just mean people who use Flask. Shoot me an email if you're interested! mail @ the domain from the OP.
Feel free to look for people in /r/flask as well. I'm developing quite a few apps but nothing that is very public yet. 
Here you go, sorry for the delay https://prod-vz-5.wakari.io:9005/notebook_relative/bundles/citi_bike/Citi_bike.ipynb The rest of your code is left as-is
I posted in there first actually. Thanks for the suggestion though!
Also I want to take this opportunity to thank DasIch, Thomas Waldmann, untitaker, Ronny Pfannschmidt, mgax, puzzlet, ThiefMaster and everybody else that made this release possible. There were 512 commits in the Werkzeug sprint branch before the merge. Considering there were only 1600 commits in the lifetime of Werkzeug before that's quite a high number :)
Also used with Blender for add ons and bug fixes
Downvote this if you must as it doesn't really add to the discussion in realtion to your final question. But from the first half of your post, I must say that if you enjoyed writing in gedit, maybe notepad++ is more your style. It highlights variables and all that after you save as a .py. I save as after writing my first line.
Really happy to see this, Flask is one of my favorite frameworks!
What bundle do you use for python development in sublime? I've played around with it a bit, but all I really want is auto-complete for packages, functions etc..
As a side question: does anyone know of any programming challenges that are physics related. Googling doesn't yield anything, which I think means that there aren't any, but, as a Project Euler aficionado who works in science, I'd really love such a challenge.
Try changing your PYTHONPATH settings for your IDE.
If I only use python 2.7 will there be many parts of this book that will not be relevant? Had a quick look through the sample and it looks great!
Very cool! I love Flask - it's my goto for any web app. Thank you!
I might have stalked you for weeks... :o Oh wait. No. That was someone else. I'm just a good guesser? edit: I really like the "probably" way up there- it makes me glad you're a scientist !!
This article is completely pointless. Not only does it say nothing about python except that which can be paraphrased by "use requests.json()", it does no analysis of what is said, uses c-style python, and is extremely verbose for the lack of content, which I'd argue is displayed poorly (at least it appears to be without indentation when clearly intended). &gt; i = 0 &gt; &gt; while i &lt; len(better_results['results']): &gt; &gt; print better_results['results'][i]['text'].encode('utf-8') &gt; &gt; i += 1
Jenkins more or less only calls shell commands. As a matter of fact, for most of what you'll be doing, you have to prefix each pseudo script with `#! /usr/bin/sh +x` to make them work. 
I would expect you to know that I indented the original code but the syntax-highlighting plugin didn't do the job right. I wouldn't have gotten the results if I had not indented the code. I am sorry it is pointless to you. If I thought it was pointless, I wouldn't have created the post in the first place. Have a better day!
I have always wanted to try Flask but didn't because it was Python2. I didn't pickup python until version 3.2 and I just can't bring myself to use python2 in my spare time because it was "old", even though it is (was?) faster. I can't wait to give flask a go when a stable Python3 release is made. The hype has been killing me.
Flask is far more widely used and seems like it serves the role of a web application microframework much better. I'd personally recommend looking into Django, Pyramid, or Flask. There are a ton of Python web application frameworks out there, but those three are definitely the most robust and most popular. They all have their own advantages and disadvantages; I personally prefer Flask.
Yeah, for appengine, using webapp2 is a no-brainer. However, I'm more interested in how it stands up against flask on a vps or dedicated server. 
A decent shortcut to using Eclipse with PyDev is to install Aptana Studio, which is basically Eclipse + PyDev + a few other plugins.
I have to say that link you shared there is quite impressive. I had not seen it before and I am thankful for it.
This is exciting, thank you!
Mandatory vim holy war checkin. I use vim in a terminal on my Mac, and gVim with all the bells and whistles removed in W7. Hell, there's a Firefox plugin that I use that lets me use vim on a temp file to fill in text fields on pages.
sweet, another Hacker School project
I'm glad people like you exist
Just as a side note if you're interested in looking at speed comparisons you should watch [this](http://pyvideo.org/video/1730/python-33-trust-me-its-better-than-27) talk from PyCon 2013. Brett Cannon does a great job.
You need to use an interactive GUI backend. Your script is specifying "Agg" as the backend. This will only output images. Instead, try either "WXAgg" or "QtAgg". These enable the wxPython or PyQt backends respectively. Note, you may need to install wxPython / PyQt on your raspberry pi. I've been playing with my rpi using SSH access and plotting just as you have described. You will need to use "ssh -X &lt;hostname&gt;" to activate X11 forwarding. In fact, looking at your script in more detail, you probably want to restructure this. Your script is only calling "plot.savefig" which is, as you might expect, just writing the figure to a file. Instead, you need either a call to plt.show (but this is blocking) or fig.canvas.draw I'm outta time. Good luck....
There was a lot of tweet-rage :) Glad you got it out.
&gt; For my research, I basically need the full force of my processor. Lies. You're using Python which is not exactly a performance king.
OK, I made a little example of collecting data in a second thread while plotting the results in a matplotlib figure. See http://pastebin.com/S1C4fEbn I'm using the WXAgg mpl backend because I'm most familiar with wx, but other GUI toolkits could be used (Qt or GTK). To run the script be sure to get wxPython installed (should be fine on the RPi). The magic here is the "wx.CallAfter" function which calls a function in the main (GUI) thread (I'm not sure what the equivalent would be with GTK/Qt). This can be used to call GUI operations safely from a second non-GUI thread. Running the GPIO stuff in a second thread allows your GUI to remain responsive (handle user input like mouse clicks etc) while the data logging or IO proceeds in the background. This script should run over ssh with X11 forwarding with no problems. Actually, this is a good way to work with the RPi as it relieves the wimpy rpi of some rendering work. Note, you don't actually need an X-server or desktop running on the RPi. The wxPython toolkit is an X *client*. The X-server is on the machine which is connected by SSH (the ssh-client) to the RPi.
Cool! Flask and Werkzeug are great -- I've been waiting for Python 3 support for a while! Thanks for your work!
I'm Perry sure latin1 doesn't make any sense, ever. Can somebody explain it to me?
It does, HTTP headers are latin1.
Aah, I somehow deduced that this wasn't a standard. So opposite question: how does something different than Unicode strings limited to latin1 make sense? Latin1 is text, so obviously byte strings make no sense.
&gt; Newer alternative to python(x,y)? winpython. Same team, different purpose. Python(x,y) is a fully integrated distribution, which needs full installation in the O.S. The devs ensure all parts work well with other parts, and tune their installation if needed. It makes for a great experience as a "Python workstation", but is apparently tedious to maintain. WinPython takes a lighter approach. It is portable (just unzip it anywhere), and the installed modules are closer to their original version (just installed with mostly default settings, rather than carefully tuned). (I may have described the difference very badly. Feel free to correct me. :))
Some headers traditionally do not fit into latin1 and some headers have inconsistent encoding. For instance Set-Cookie traditionally contains utf-8 values, X- headers are very often utf-8 as well.
[Fantastic.](http://24.media.tumblr.com/35fc307d2bc70394c8be604ccceb321c/tumblr_mi4pvvD1yF1qihx7io1_400.gif)
wow, that sucks. kudos to you for dealing with this crap.
Wow, someone has my back. Thank you so much for the support. 
Gondor would probably work. It doesn't need any repo access for the deploy itself, since it packages up the app based on a checkout of your working copy, and uploads a tgz. To get around the private repos, you could package up the requirements in myrepo.com, generate a simple index.html, and pass the extra index url flag. Then you can use regular http auth in the requirements. Actually, if your repo is hosted with ssl, can't you do that already?
I have to say that accidentally left my mind. I am biting myself now. 
the whole program is based around projects that the students want to work on. I figure testing out flask with python 3 would be a worth while project. 
The question you should be asking is - are you going to be spending a majority of your time writing only Python? Would your IDE be worth learning for the limited languages/text modes that it would support? Would you need a lot of IDE-specific support like refactoring and build settings? I found these questions driving me away from an IDE. I use Emacs on Windows and Linux. I am happy.
interesting subreddit...
I'll second catcradle5 in suggesting you look at Pyramid as well, I have only used it for toy examples but it's very flexible and very well tested with a good sized community. I've used Flask and only evaluated Webapp2, but since appengine wasn't a factor for me I dismissed Webapp2 since it didn't seem to offer me anything that wasn't done the same or better in Flask. Combine that with the growing Flask community and I think the choice between those two is obvious. I used Werkzeug libraries on their own before Flask even existed so I do definitely have a bias here, I tend to find that Armin Ronacher's design and code quality is generally very good and I have become a fan of his work.
This is amazing.
HTTP headers basically are MIME headers. They're assumed latin1 and can be encoded to handle other characters
I LOLLERPLEX'ed.
the first thing that will happen is that setup.py will learn to generate the PEP 426 format. after that it's not entirely clear. I'd like to make it much easier for people to use https://github.com/cournape/Bento for example, which has its own configuration format but could be easily made to generate the standard format.
Looks interesting, but unfortunately the graphs don't render in nbviewer - Javascript is scrubbed for security reasons, I think.
Hi Monk- I'd def be open to speaking to you. Do you code in Python, JS, Coffeescript or love startup culture and learn fast?
&gt; For instance the URL module got better out of necessity. That's great. When I tried to do a single code base port some months ago, this was where I had the most problems, and I never got all the tests in this area to pass. I didn't make drastic changes, as I didn't expect there was a chance of getting them merged.
Not for security reason but by design : It does not render in nbviewer because the rendering of my notebook is done client-side. There is a server-side rendering mode in Highcharts which uses phatomjs for a SVG rendering. This could be use to embed a SVG rendered version that nbviewer can handle. But then you will lose all the js interactivity that Highcharts gives.
Massive display of professionalism. It really was rather impressive, I was expecting a flamewar after reading the ticket body! Edit: iPhowned. (impressing/impressive) :(
Yes, it's (IMO) the best Python focused podcast currently out there. Larry (the host) does an awesome job at editing and asks his interviewees interesting and intelligent questions. The only downside is that it's release cycle is rather unpredictable due to [time constraints](http://www.reddit.com/r/Python/comments/120t8w/radio_free_python_whats_going_on/c6r7plu).
This is really cool, and very much in the vein of some of the tools I've been building to render JS visualization with Python data. Unfortunately, I think your approach might get broken in the next version of iPython. Here is some of the most recent relevant discussion with respect to JS/D3 and the ipynb: http://python.6.x6.nabble.com/repr-javascript-code-samples-for-D3-td5016336.html http://python.6.x6.nabble.com/implementing-sympy-plots-with-d3-in-the-notebook-td5017972.html So, the good news is that we will have a nice API with which to create JS vis in future versions of the iPython notebook. The bad news is, it's probably not coming until later this year. 
https://en.wikipedia.org/wiki/EdX
https://github.com/edx/
https://en.wikipedia.org/wiki/Massive_open_online_course
Awesome, even someone from Coverity chimed in.
this bandwagon downvoting makes no sense.
I have worked with 10Gen on a conference. They were the utmost of professional. Still not a big fan of their technology but they were a great bunch of people to work with.
I can't take the reporter seriously when they follow up as if they were just a little abrasive, when in reality they went to quite some trouble to be unprofessional and offensive. So bizarre that I can only conclude that the apology is probably just being even more sarcastic.
Aaaahahaha! This on TOP of the fact that it will randomly corrupt data on disk. Oh, MongoDB. So awful that even 10Gen tells customers "Don't use mongo in that usecase. You'll be really sorry."
Excellent! I am thrilled to see a high-production-value education-technology platform with not-for-profit backing that isn't tied to a single university hit the public sphere. I'm going to have to start digging in to see how much of Course2Go (Stanford's latest Python-based MOOC, the team of which is supposed to be shifting to edX development) has made it into edX already.
Hey Deusdies the coupon REDDITFREE4 expired please can i have another one :) plz i really need to learn python
ha thanks. i just want to help test! i guess the context was wrong, but i'm not sure how you could hack flask and/or werzeug
Is there any way to get this to compile a python script to an *.so library? 
OP, why did you capitalise "BUG" ?
I assume because it's a Big Ugly Gorilla of a bug.
On the Windows platform the [Zeus IDE](http://www.zeusedit.com/python.html) supports Python. It does the standard code folding, syntax highlighting, smart indenting etc. But it also has an integrated python debugger, is scriptable in python, has projects, workspaces, class browsing, code navigation etc. I think Zeus has good support for Python but I might be biased since I'm also the author of the Zeus IDE. 
Someone I used to work with did this with exceptions using an integer to specify how many loops to break out of. It was horrendous. I re-implemented it with smaller functions and `return`. Far more legible.
Try my project https://bitbucket.org/estin/pomp instead of Scrapy. use tip from repo, not pypi release
Checkout PyCharm. Amazing. Not only does it have fantastic code competition but it has excellent git support along with an integrated database editor. 
This is from 2007; it was rejected.
I'm using flask / python in the backend. The front end is angularJs.
should be easy to write that parser (it's probably already written for something similar) Parser can handle comments and it will produce the same file if parse rules are written correctly
Do you need it to run from windows or to parse windows configuration files? If you need to run it from windows it might work on cygwin, but I haven't tested it yet. Writing parses is not easy as you should learn the augeas language but also it is not too hard. The good thing about augeas is that it has a lot of parsers already built, check in the link I provided if what you need is in there.
May want to x post in /r/machinelearning 
No, I need to parse config files from Bethsoft games (Oblivion, Fallout 3, Skyrim) and their mods. It's the mods that's the problem, and I'd like a unified interface to all the funky formats people decide to use, the most common of which is the funky BASIC-like scripting language people use and then just `eval()` to get a config file. The second most common is an ini variant that `configparser` can parse, but not very well since it doesn't really follow the RFC (pretty similar to other ini files used by games, like Borderlands, `[section]\nx=y`). semicolon for comment (instead of #). Of course `configparser` doesn't preserve whitespace or comments, so it's not very useful to me in this case. Then there's some funky nginx-like formats like (`section { nested section { foo = 0; var2 = 3; }}`) I'm pretty comfortable with parsely (a PEG parser), but it will be a lot of code to turn it all into a nice api, that parses &amp; generates config files. I like the `TreeNode` / `TreeList` that heracles uses and a single specifier that takes in and generates config files from one specifier (with parsely I'd have to make the parse syntax and then make a generator function as well for each format)
Before I decided to fork augeas I was playing with [pylens](https://pypi.python.org/pypi/pylens), it works like augeas but applying a syntax close to [pyparsing](https://pypi.python.org/pypi/pylens) (another parser that you should check out) its syntax it's very expressive and like augeas allows you to parse files without throwing away other data.
The bug report was ridiculous and unprofessional. No need for name-calling. But the bug was seems ridiculous as well, and you could similarly get quite pissed if you spent days/hours debugging it and you can see the frustration. https://github.com/mongodb/mongo-python-driver/blob/master/bson/_cbsonmodule.c#L1196-L1206
lots of good ones: pycharm, wing, komodo, ... we (microsoft) make a free/oss plug-in for visual studio called PTVS: http://pytools.codeplex.com. 
It's especially useful when you want to do something like `for it in itertools.product(*list_of_lists)`, when you don't know the number of loops in advance.
Dependency Injection isn't really a thing to use in Python. The real thing to do is structure your constructors to take their dependencies as arguments. from core import DefaultEngine class Car: def __init__(self, engine=DefaultEngine): self.engine = engine() With this technique, you can instantiate your objects with whatever depedencies you wants; all a unit test has to do to make an object use mocked dependencies is create them and pass them to the appropriate constructor.
Before investing your time in a DI package or framework, you might want to make sure you do not aim for a [lethal injection](http://gbracha.blogspot.ca/2007/12/some-months-ago-i-wrote-couple-of-posts.html).
It's not *nix, you don't support FreeBSD, QNX and others. You support Linux which is definitely not *nix nowadays. It's not even fully POSIX compliant... More over, the support is more of Debian systems which is a one part of Linux distributions.
You don't have to be so picky. The project is in a very early stage, the c code is built with gnulib and autotools so it is portable and python run on all of them. And all the lenses work on them as their configuration files are posix compliant, even there are some lenses for solaris as far I remember. The change needed to work on other os is mainly how it loads the dynamic library in the module ~~raw.py~~libs.py, so I will be very pleased if you give me a patch to support those os. Edit: Library loading is in the libs.py module, raw.py is the conversion one.
I thought that technique is precisely what's called Dependency Injection.
I'd be very interested in a riposte to this. I'm very curious to see whether certain Java practices are less common in Python for good reasons or more arbitrary differences in culture.
His point was that "Don't call it *nix compliant if it 'aint.".
As a self-taught programmer, this person doesn't know what the fuck he's talking about. The meme image is *really* offensive in this context.
Do yourself a favour and check out all of `itertools`. It is by far my favorite library.
Might be a good example of how a CS grad may think they have the whole picture. Anyway, to be fair I feel I've had to fill in gaps on my own but maybe a CS grad doesn't do that, I guess I should write more compilers to solve problems. :D
I've been developing for 2 years now (self-taught), and I just finished my sophomore ~~year of~~ classes in Computer Science at a university. I can **promise** you I learned all 5 of those on my own, and none of it has really been contributed to at all from school. Also: all 5 of those things are better learned on your own anyways. It's making connections between all these things that school *should* do, but they don't.
DefaultEngine is clearly a class constructor from the example; I should hope it exists for the lifetime of the application.
Well, I mean he raises some important points, and the stuff he mentions is often forgotten. Just the conclusion that it has anything to with self-taught vs. formally educated is BS. Most of the formally educated programmers have forgotten everything they had to learn about programming language design and compiler theory by the time they hit the job market, and many self-taught programmers never saw the need in the first place. Not really a lot of difference there.
I like when the meme image is at the start of the article so I immediately know to close the tab.
Oh wow, first book I'll be buying a while.
I never thought I would take this much heat for giving my opinions for sure. I didn't intend to offend anyone.
What a pile of pretentious claptrap.
I didn't mean to offend you or anyone. I have changed the image. I am sorry.
Yeah, I think I'll do that. I have used bits and pieces of it before but I've never really read through the whole module.
I stated that I could be wrong. I didn't say that you must go to school to learn those 5 things. What I emphasized was the fact that some self-taught programmers don't pay much attention, not that they cannot learn on their own. Everything can be learned. Thanks for the comment.
Point taken, never intended to offend or I wouldn't have written that post.
At least someone gets the point. I was not trying to offend anyone, was trying to help the guys who are new and I am now being smoked like bacon right now. Thanks for the support.
I'm also self taught, and I didn't even get the slightest bit offended. It's just a little joke at the authors own expense. 
Fair enough. I'm not personally offended, mind you, just tried to point out how it can be seen as offensive.
Agreed. I'm actually very curious why DI (namely constructor injection) hasn't caught on for dynamically typed languages like Python. People seem to think that its some Java pattern but DI works less well in Java because you end up sacrificing a lot of type safety to achieve it which of course Python doesn't have in the first place.
I feel that clean and concise code is missing here. I don't work with many self-taught programmers; but when I do, I find it very time consuming to understand what they're doing or intending to do.
I'm not really offended myself, but I still think it's rude and inappropriate.
I appreciate it. Thank you.
Sorry I didn't add that. Either way, I know that there are many things to be learned. Some guys on Reddit could have slammed it anyway.
You can't do this sort of thing in Java easily without special tools. Python doesn't have the same restrictions.
I believe /u/gsks is referring to [IoC Containers](http://stackoverflow.com/a/1532254/564755) where one object instance acts essentially as a Factory for all external dependencies. They allow you to do things like change dependencies via config file vs. recompiling code (obviously not applicable to Python) among other things, but I'm not a huge fan of them myself.
Thanks!
No problem, my boxy relative!
Because import works EXACTLY like DI already. There is no need for DI since python does all its imports at runtime.
What would the constructor look like if your engine required a custom dependency? Or more likely, if your car had a few dependencies, which in turn had a few, many of which should be the same across parts? Does my Car need to know how to construct an Engine, Doors, and a Hood using a custom Metal and Paint, but letting them use their defaults if not provided? I do like this pattern, and it works great for little things, but having gone from Java to python, one of the big things I miss is being able to say, "Now use the mock Database and run your tests, then use the mock ConnectionDroppingDatabase and run your tests." It's trivial in any DI framework in Java, but the best I've found in pythonland is some funky monkeypatching.
If your dependencies really are that global, just use module level "global" variables. Configure the engine or whatever at the module level, no constructor signature pollution required. If you sometimes need to change your configuration, you can still use module level variables and expose context managers to allow safe temporary overrides. The [`decimal` module's `localcontext()` manager](http://docs.python.org/2/library/decimal.html#decimal.localcontext) does this to allow overriding the (otherwise global) precision of `Decimal` objects. For instance: mymodule.py import engines import contextlib engine = engines.DefaultEngine @contextlib.contextmanager def custom_engine(new_engine): global engine old_engine = engine engine = new_engine yield engine = old_engine class Widget(object): def __init__(self): self.engine = engine() ... Then: import mymodule from mymodule import * from engines import * # configure engine for duration of program mymodule.engine = NormalButNotDefaultEngine normal_object = Widget() # temporarily override the "runtime global" setting: with custom_engine(FancyEngine): special_object = Widget() ... More generally, I try to avoid "engine classes" and the like in favor of smaller, more task specific functions (which can be configured similarly), but I do understand they're a decent fit for some problems. 
Why wouldn't it?
 if first=="a" and first=="e" and first=="i" and first=="o" and first=="u": Means that the first letter has to be equal to a, e, i, o AND u at the same time, which is impossible. Try this instead : if first in "aeiou":
Oh. My god. Anyways, can you tell me what the *in* command does? Does it test for the string to exist inside of the string the *in* command goes with it? I don't recall learning it on Codecademy. Thanks!
 a in b If element a is a contained in set b, returns True, and False otherwise. &gt;&gt;&gt; 1 in (1, 2, 3, 4) True &gt;&gt;&gt; "1" in (1, 2, 3, 4) False &gt;&gt;&gt; "1" in "1234" True &gt;&gt;&gt; "23" in "1234" True &gt;&gt;&gt; "24" in "1234" False
Thanks! :D
You are welcome. Quick question, if you are learning Python, why did you choose Python 2.x instead of Python 3.x ?
Codecademy had it, so that's what I went with. Also, I got the code working, but codecademy isn't giving me the answer. It's outputting inemay (mine in pig latin) but the output is saying " Oops, try again! Your word started with a consonant, but "mineay" was printed instead of "inemay" Do you have any idea what will work?
According to [this page](http://en.wikipedia.org/wiki/Pig_latin#Rules), when the word starts with a consonant, you have to put it at the end of the word before adding "ay".
It's what I'm doing, but now it's saying "ay was printed instead of inemay" and it's really irritating &gt;.&gt;
Ok, let's see which steps we should take : 1. Ask for a word 2. If the length of the word is 0, print "empty". Otherwise, continue. 3. If the word does not begin by a vowel, we put the first letter at the end of the word. 4. We add "ay" at the end of the word. 5. We print the word. I do not understand when the word "WRONG" should be printed and according to Wikipedia, "way" should be added instead of "ay" when the word begins by a vowel. I do not now how the exercise is worded, though.
I just think I'm gonna skip this lesson, as I technically got it right, and then revisit it later. Or, clear cookies. I'll do both.
I can ensure you that your code is not correct: you do not put the first letter at the end when it's a consonant \^\^.
Not at the end, in between the word (minus the first letter) and the ay at the end. Here's the code: original = raw_input("Enter a word:") pyg = "ay" word = original.lower() first = word[0] new_word = word+pyg if len(original) &gt; 0 and original.isalpha(): if first in "aeiou": print new_word else: print word[1:]+word[0]+pyg else: print "empty" It's not my code. The console output is correct, but the website is saying it's incorrect when the output is exactly the same as what it says it should be. [EDIT] Also: http://imgur.com/eDnlFik Checkmate, it's the website.
I did this the other day. If I remember correctly you want to us "or"... If [0]string = "a" or "e" or "I" or "o" or "u": print string+"ay" Else: print ...... I forgot how it goes lol but it is something like that. Haha sorry.
Also in the bottom left corner you can click on q&amp;a and it will help out a lot 
Are you still struggling with this problem or you solved it? I am willing to help outside reddit. Just let me know.
How could I get this working on linux?
Depending on your distribution, you'll have somewhere where startup scripts go. From that point, it's just a matter of writing a script to pull down an appropriately sized kitten using wget and setting it as your desktop background with feh.
You would have to adjust some of the code that [sets the background](http://stackoverflow.com/questions/1977694/change-desktop-background).
I like to give critical bugs capital letters.
This is highly dependant on what DE you are using in Linux and what application is responsible for drawing the desktop background.
Forgive me if I'm reading this wrong, but the width/height variables are based on the actual size of the image pulled from the site? Pulling a 500x300 - 300x100 res image is going to look heinous upscaled to any modern display. 
*width* is a random int between 300 and 500. *height* is width minus 100, so 500x400, 400x300 and 300x200 would be sizes calculated (and anything inbetween of course). In all reality, it would be better to pull a width/height image as a randint between width +/- 200 and height +/- 200 where width and height are the actual desktop widths and heights.
Quick attempt: from urllib2 import urlopen import gconf import random width = random.randint(200,500) height = width-100 url = 'http://placekitten.com/' + str(width) + '/' + str(height) kitten = urlopen(url).read() f = open('/home/kitten.jpg' , 'wb') f.write(kitten) f.close() conf = gconf.client_get_default() conf.set_string('/desktop/gnome/background/picture_filename','home/kitten.jpg') Let me know if it works - don't have access to Linux right now.
After looking closer to the various DI packages, I don't think they're the solution to my problem after all. What I want is much closer to how the `logging` package works, where you configure it once and then import it and call it as a global; no attribute or parameter pollution required.
Which reminds me of the classic Peter Norvig presentation: Design Patterns in Dynamic Languages http://norvig.com/design-patterns/ "Peter Norvig demonstrates that 16 out of the 23 patterns in the Design Patterns book [...] are simplified or eliminated [...] in Lisp or Dylan." http://en.wikipedia.org/wiki/Software_design_pattern#Criticism Also see Paul Graham quoted here: http://c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures: "For example, in the OO world you hear a good deal about "patterns". I wonder if these patterns are not sometimes evidence of case (c), the human compiler, at work. When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I'm using abstractions that aren't powerful enough - often that I'm generating by hand the expansions of some macro that I need to write." 
That Stack Overflow piece has a great quote: "So, a DI container is nothing but an interpreter for a dynamic scripting language. Actually, let me rephrase that: a typical Java/.NET DI container is nothing but a crappy interpreter for a really bad dynamic scripting language with butt-ugly, often XML-based, syntax."
You don't really need anything elaborate in Python, because there is duck-typing instead of interfaces and, conventionally, config files are just other Python files. The general approach is to monkey-patch functions/classes you need to inject. Taking the car example in this thread: import core class Car: def __init__(self): self.engine = core.engine() And your config is simply a Python file (approach to loading it may vary): import core import someimpl core.engine = someimpl.MyEngine
Erm, completely clueless question here, but if the choice of get_user() implementation will remain the same during the entire lifetime of our program, why can't we just assign a particular get_user implementation to be used by now() during the config phase of our program? I.e. the "functions as first class citizens" language gang's alternative to function pointers, combined with the lack of enforced encapsulation in Python? Note that I'm rather clueless, so it's highly likely I'm missing some trivial here :-)
http://docs.repoze.org/depinj/ is one. I think the pattern is useful, but not very many Python programs give you the option of using one of multiple implementations of some interface.
it's connected - it's good because of editing and it takes a lot of time because of editing. Pick your poison :)
does this project have an IRC channel?
I would kill for a web browser standard that made browsers into sandboxes that supported a low level bytecode that any language could be translated into. Similar to asm.js but natively supported.
That would be very cool. The problem that I have with JS frameworks is that none of them solve the root problem: JavaScript sucks. Don't get me wrong, I love JQuery, and I wouldn't develop without it. But do you know why? It's because writing native JS is a slow and painful process. Debuggers suck, the syntax is disgusting, there's no real support for OO code (function pointers are a hack), and the language itself is slow to execute. The primary reason that Asm.js is fast is because it uses strongly typed variables from webgl. JavaScript is a shit language, and we could all benefit from some real choice when it comes to writing client side code.
Obviously some people in here are agreeing with you, so I'm going to have to walk into the viper's nest on this one. My day job is as a JavaScript developer in a Python shop, so I regularly have my hands on both. First, what you're talking about is not a framework. Angular is an example of a framework, jQuery is just a toolbox. jQuery was meant to solve the problem of the DOM API, which many years ago was not as mature as it now is. It's still cumbersome and too verbose, but much much faster and supports the same selectors as jQuery. If your problem is with the DOM, then yes, it does suck, but that's not JavaScript; there have been plenty of awful libraries in Python too. The debuggers for client side JS are infinitely better than pdb, ipdb, or pudb. The Chrome Dev Tools project is by far the best debugger I've ever used, but even IE8's old debugger is a lot better than what I get when I step into Python land. I have no idea what the options are when it comes to IDEs, but I'm a Vim guy so I'm not going there. Syntactically, to each their own, but JS's syntax is nothing new, it uses the same constructs as Java, C#, C++, C, etc, etc. Not much to say about it really. There's also support for OO programming, but you could be talking about a million different things here so you'll have to clarify before I can say you're wrong about anything in particular. Performance-wise, I'll just drop [this here](http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=all&amp;lang=v8&amp;lang2=python3&amp;data=u64). V8 is by far the fastest JS VM out there, but the others are still competitive. The idea that JS is slow to execute has been incorrect for quite some time. As to your overall point though, I agree. We should have alternatives to JS in client side code, and translating to JS is not solving the problem in Dart, Clojurescript, Coffeescript, or Brython. We should be seeing more projects like [Decaf](http://trydecaf.org/) if we want to see other languages become available in the browser, and not turning JS into the assembly of the web.
And, this would be worth it to add, the website I was using has set pictures for every resolution you could enter. So, 200/300 will always be the same picture. I don't like this, but it's still easy enough to work with.
I think this is covered by the sample code I posted in your other reply. You can take advantage of the fact that there's a module cache for each Python process so if you import the same module multiple times you get a reference to the exact same instance. This, I believe, is exactly what the `logging` framework does.
&gt; I think this is covered by the sample code I posted in your other reply. Nice. You're completely right. Honestly, the world needs more people like you.
Use only [The Good Parts](http://shop.oreilly.com/product/9780596517748.do) and write [Coffeescript](http://coffeescript.org/) and I guarantee you'll have a better time with JS.
Thanks, that looks quite good. And the bmp extension is necessary because Windows XP can't change the desktop background to an image that's not bmp. I believe that other systems automatically convert it to bmp anyway, so there's no point saving it to jpeg.
Actually, I updated that a bit ago on my own system, must have not synced on github. Just a second. EDIT: As well, I added the things that prickneck suggested, because, honestly, it looked much better.
My only issue is, I'm not sure how well a whitespace dependent language would do on the web. I don't think python can be minimized anywhere as nicely as Javascript can.
Yeah. I love python's whitespace approach for normal coding, but if it's gonna be embedded in html, it needs a C-style encoding format. Mako partly solved this by added 'endfor', 'endif' etc, but really, I think all that's needed is to assign two unique character sequences to represent INDENT and DEDENT in the grammar, semicolons are already accepted as statement separators.
I think that we agree on most things. It's important to point out that I wasn't making a comparison between JavaScript and Python. Both are scripting languages that lack a lot of the things that I consider necessary for serious enterprisey development tasks. JavaScript could do with a debugger or a profiler similar to the ones available for Java in Eclipse and Netbeans. Hell, Javascript and Python could use an IDE that offers code completion, inline documentation, and all the other good stuff that us Java and C# developers are used to. You're correct in saying that JavaScript's syntax is similar to that of other languages. Most modern languages derive heavily from C, so this is no surprise. However, DOM manipulation in JavaScript is particularly painful, and when I was talking about Object Oriented support, I was trying to point out that JavaScript does this in much the same way as C, which hasn't been particularly helpful in a long time. There's no such thing as overriding, overloading, type safety, interfaces, etc. These are all things that are helpful when creating large applications. I'm aware that recent developments in JavaScript interpreters have made it faster than it used to be, but again, this to me does not solve the core problem of the language: It's slow (when compared to native C or assembly) because of the lack of type safety. If we're going to go ahead and make JavaScript the "Assembly of the Web" as you so aptly put it, then we're making a huge mistake. All of that said, I strongly agree with your last paragraph. Ecosystems benefit from competition, and a few more client-side programming languages would make web development a much more enjoyable task.
You could just indent by tab or a single space (instead of the 4 spaces of the PEP), you'll be dividing the size by 4... And then replace all the lines in one block (if, for, while) with `;` delimited commands and here you have 2 characters (minimum) less per line in a block. It can definitely be done, that's a non-issue once it is actually implemented natively in the browser.
You know about urwid, right?
Why is this even an issue?
Do you use Google+ hangouts? Or skype or whichever interactive networks? I have used Codecademy myself several times and even helped them beta test some courses before release and I realized they had some issues with code evaluation in the backend. If you are on Google+, we can meet there and I can help you with python and more stuff like JS. Is there a way to send private messages here or what? Either way, let me know how you want to connect.
I appreciate your advice. Thanks a lot. 
Yep I do, but I don't want to use external modules, since I want my program to be runnable just with the stdlib... Anyways, would that have been a lot easier? Is there something like this in urwid integrated?
Awesome... I've been watching this for a while. Keep up the great work!
But then it's not Python. I won't be able to use standard Python libraries without having to convert the code myself which is a shitty place to be in. But *if* you were to want to add something, I would prefer to use braces instead. It takes up less space and it won't remind me of some of the shitty mainstream languages (cough, cough, PHP, VB).
Sizewise, javascript is a big chunk of a website. 2nd place after images, and constitutes a good ~30% of todays websites size (and that's actually minified). Since page load times are proportional to page size, even more so on mobiles with slow connection, being able to shrink the size of the script is very important. jQuery for example goes from 240kb to 80kb when minified, which is a 3x reduction. How well scripts minify is fairly important.
How many bytes are wasted because of spaces? I doubt it's a significant amount compared to other possible minifications. 
jQuery is 9000 lines. If everything is on average at one level of indentation (which is probably an underestimate), and we only use one character per indentation, that's still 9kb wasted. EDIT: Actually, you need both the indent and the linefeed iirc? So make that 18kb. Like I said, minified jQuery is 80kb, so that's already a 25% increase in size. Of course that's given a huge assumption that porting jQuery to Python would take as many lines, which is wrong.
I agree, but again it's kinda hard to pull numbers out of thin air. My gut feeling says that it would still be a significant amount, and yours contradicts that. I'd personally love to see experimental results. Is there any actual Python minifiers around? How hard would it be to write one?
Braces are a subset of what I suggested: if { and } weren't already in use in python, { as INDENT and } as DEDENT would work just fine. Not that I can think of any brace symbol which python hasn't already put to other purposes -- which is why the idea is probably just an academic exercise at best. And I can't think of a reason why you wouldn't be able to use the standard python libraries. All that's different is an "inline\_indents=True" flag (or some such) set when parsing source that came from embedded html. It results in the same bytecode, runs in the same VM -- just like you can mix python modules which use different \_\_future\_\_ imports. For client-side .py files, I'd assume the normal python style would be used anyway -- whitespace only becomes an issue when embedding in something like HTML. 
I've got something I made a little while ago that does the same thing, but pulls from some of the subreddits sort of too. https://github.com/tankorsmash/z-img-desktop-updater I haven't tested it anywhere else besides my Win7 PC, but you might be able to tweak it to run for you.
Skype, I'll PM you my username
You're also forgetting that most servers and browser support gzip. whitespaces will be somewehere high up in the compression tree; indentation will probably boil down to half a byte or something. (The number is a wild guess, but I you get my point)
How about minifying the `.pyc` files?
Basically it'd be a linebreak and a set of consecutive tabs (depending on the indentation level) per block of code. So this: def outer_func(): ''' define outer function''' def my_func(input_var): ''' do something else''' y = input_var**2 y += 1 return y my_list = [] for i in range(10): my_list.append(my_func(i)) print my_list can become: def g(): def f(x):y=x**2;y+=1;return y z=[] for i in range(10):z.append(f(i)) print z The whitespace does add some overhead, but you can reduce it and you save way more just by removing comments and renaming stuff. Also remember that JavaScript requires two braces in cases where Python can just use a single line.
I prefer the muntjac approach to replacing javascript with python. Either that or Timothy Crosley's webbot. 
Just for the record, it makes you look like a novice.
But since we already have a "registry pattern" built in, seems to me its simpler to just use that.
LLVM for browsers?
But asm.js IS supposed to be natively supported - the fact that it's also executable as normal Javascript is a useful fallback for browsers that don't support it.
I tried this on Ubuntu running xfce by adding the script to the rc.local file. No go.
It may be simpler, but it's more inflexible when it comes to unit testing (which is where I personally find the most benefit). 
asm.js has to be natively supported, otherwise it can't get the speed boost. asm.js is already about 2x native from the implementation by Firefox. If Google put their engineering might behind it think how much faster it would get still! There's no real benefit I can see over byte code vs a javascript subset, except for file size, but after gzipping, those lengthy 'function' keywords aren't that bad. And asm.js has the huge advantage of being backwards compatible. The difference is mostly cosmetic, but if it gets adopted that puts us one step away from a browser byte code, and it means we can start using these things today instead of waiting for a whole new language to come out!
This is great! With the way things are developing with asm.js, source maps, and the rise of to javascript compilers, a language agnostic web is definitely on the horizon!
Ah sorry, I'm not sure then.
Yep, agreed. I somehow have a really hard time understanding how terminals really work. I tried once to get some insight, but I'll keep it for later ;)
That actually is an unrelated issue as it turns out, that's because the WSGI decoding dance is not applied in a place where it should be. I'm fixing that now.
The Vim plugin for Intellij is pretty slick. Obviously it misses the rich plugin architecture from Vim itself, but for Vim folks like myself it makes Intellij feel more like home.
Additionally complaining about poor OO support in JavaScript is kind of strange to me since it's a prototype based language, which, while more unusual (Lau is the only other prototype based language that comes to mind) [allows you do some kind of neat stuff](http://steve-yegge.blogspot.com/2008/10/universal-design-pattern.html). Similar criticism could be leveled at Python's less then great support for functional programming, but much like JavaScript's lackluster OO that is an [deliberate language design choice](http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html), not an accident.
Raaaaaaaaaad! I'm going to look at this more, I did a lot of stuff like this for Diablo II way back when :D
Isn't a low level bytecode a level of abstraction? How does asm.js not count as one?
Indeed. No need to complicate things. 
I'm more thinking about python embedded within html itself, much like javascript triggers are frequently embedded in `onclick=''` attributes, and little blocks of javascript inserted into the html code. Py &amp; Pyc files would be fine for distributing standalone bits of python, much like standalone .js files currently. 
Whitespace minimzation is a hack when you have gzip.
Thanks. I'd like it to be more creative - I tried to get it working with object detection techniques so that it could be run from a phone looking at a screen, but I haven't been able to make it robust enough yet. It's mostly template matching with a little bit of custom fiddling to determine the health / mana levels.
I am having some trouble installing this for use with apache. I extracted the folder to /var/www/brython, and pointed the src= to /brython/brython.js, but I get a 500 error. Permissions are 775, and the apache error log (which is on the info level) gives no error messages. I have not changed my apache config in any way (could not find anything to change), and am using Flask with mod_wsgi for the backend. I know nothing about JavaScript, and am fairly inept at HTML; does anyone know what I am doing wrong?
I'm reminded of some quote about premature optimization... If python whitespace is the bandwidth and performance bottleneck, you are almost certainly doing something horribly wrong. Gzip will solve 99% of this issue without lifting a finger.
You're blowing this way out of proportion. Python indentation can be done with tabs, which decreases a lot the amount of characters used, this type of indentation also saves up on semi-colons and curly braces that are not needed to define blocks. If at the end Python still uses up more space than Javascript, the difference is quite irrelevant. The client only downloads big chunks of source once and those chunks are compressed, if a site uses images, or uses flash animations, or even video, what are a few Kbs going to matter?
Counterpoint: Python is inherently more succinct than javascript so a gzipped python file will be significantly smaller than the same logic implemented in javascript. 
That looks quite nice, I'll try it out sometime. Thanks :D
[emscripten](https://github.com/kripken/emscripten)
[Native Client Overview](https://developers.google.com/native-client/overview) [#1229](https://code.google.com/p/nativeclient/issues/detail?id=1229)
To clarify wth I'm talking about: there are a variety of metrics that will tell you how readable a body of text is--examples like the [SMOG index](http://en.wikipedia.org/wiki/SMOG) estimate the minimum (K-12) grade level that a reader is expected to have to be able to understand the contents of the given text. A number of metrics such as SMOG are demoed in this git repo.
You can install either distribute 0.6.45 [1] or the just released setuptools 0.7 [2] [1] https://pypi.python.org/pypi/distribute/0.6.45 [2] https://bitbucket.org/pypa/setuptools/downloads
-- .gitignore *.iml *.idea and yer done :\^)
Just want to say... that is **nasty** in a good way 
Actually I think the commands are almost the same in Windows and Mac assuming you have git and python properly installed
I used to create a separate Ubuntu VM in VMware workstation to code in my Windows box, but I'm generally extremely happy with Sublime Text 2, powershell and ipython with a few tweaks and customizations. I keep hearing the great things about full IDE's, but everytime I load one, it feels like overkill for python work. And, I feel like iPython, properly used and configured tends to act as an IDE regardless. If you do go full IDE, and you code with Visual Studio, take a look at Python Tools for Visual Studio. I'm pretty convinced it's the best Python IDE on the market, and it's a free, MSFT supported plug-in for VS. What I don't like about Python Tools for Visual Studio, is that it changes a lot of you path environment variables, and it wants to suck up any python project / script that you work. It's hard to go between PTVS and a text editor / command line. re: "Am I missing out by not using an IDE?" No. Not if you're used to using Gedit. I get the impression that full IDE's are preferred by developers that come from "tools first" styles of programming like people who have been heavily immersed in the Java / C# world of development. Developers that come from the Perl / Ruby / Python / bash land tend to prefer text editors + command line tools. YMMV 
WebStorm and PyCharm by Jetbrains are top grade IDEs for JavaScript and Python respectively. Not free, but off all the things you're after. I find them (and IntelliJ) to be better than Java after having used both extensively.
... and if that would worry me I would stop doing it :)
Would it be a good idea to use rpython as the assembly of the web?
Could you please elaborate your requirement. Check out the links for oss projects on [webcraler](http://www.findbestopensource.com/tagged/webcrawler) and [data mining](http://www.findbestopensource.com/tagged/data-mining)
Also, can anyone find a good and more recent article? Or, if you have knowledge please share here! Thanks
Ohh, I have never seen parameterized decorators done without classes. That's going in my save folder.
sublime makes me angry. no drag&amp;drop of selected text blocks on linux, no proper SFTP remote browsing, the only SFTP plugin (not offering this, just local mirroring) *costs money*. the highlighting files are in PLIST format, so JSON *represented as XML*: expressiveness is different. it has no embedded terminal, just a stunted python shell (without advanced features like e.g. the IPython Qt shell); the sublimerepl project is a hack and consequently halted. it makes me angry because it has potential to really be the ultimate editor people say it is, but it isn’t yet (and likely will never be, because it would need a mightier plugin API for that, and the fact that it doesn’t already have one is indicative that it will never have it)
I actually don't have much of a requirement. Just browsing for a project that grabs my attention. Those links are a good starting place though. Thank you
why not having an optional parameter to both functions with the locale? time.now("es_ES")
You want datetime.year, .month, .day, .hour, .minute, .second and .microsecond, then.
Feel free to suggest it on the mailing list.
I usually just use time.ctime()
DRY with decorator boilerplate either, use the [decorator library](https://pypi.python.org/pypi/decorator). Replace def increment(f): def wrapped_f(*args, **kw): return int(f(*args, **kw)) + 1 return wrapped_f with from decorator import decorator @decorator def increment(f, *args, **kw): return int(f(*args, **kw)) + 1: The latter has the added bonus of correctly forwarding `f.__name__`, `f.__doc__`, etc. _edit: thank you to the anonymous gold giver, I'm glad this random bit of python library knowledge helped someone!_
A decorated decorator. Should it be called ornamentation?
Just a small thing. In your first code block in the "Decorator Introduction" section, you are missing the indentation on the last line, as currently `return wrapped_f` is not within the function block of `def increment(f)`.
yeah.. that's what I used to do.. but i preferred to pick another lightweight editor. what I meant is.. for a lightweight kind of programming, i don't need a huge editor. i'd rather a faster, that doesn't loads a lot of libraries, and stuff. since all I need is just a good editor with a good syntax highlighter, etc. but setting the extensions to gitignore or whatever version control you use, is the way to go in these cases.
How one would do that?
 def parameterize_request(types=["POST"]): Isn't it a bad idea to put mutable types in a function signature, even if it's a decorator?
sounds like a golden opportunity to write yourself a little tool for getting the time format you want easily!
It's not especially easy to get set up, but I can help if you want to try it.
I've worked for two startups as a contractor and am currently employed by a startup that has two contacted programmers. Not everyone wants equity, and not everyone has 100% time to dedicate to a startup's projects but are interested in the technologies.
I though the "fn/f" thing was just me. Being still rather beginnerish, I tend to blame myself for mistakes, but after reading through a few times, I really didn't see the switchover from f to fn.
That sound's really interesting, decorators seem to be used widely not only in Turbogears to which author refers but also in Flask. Now, forgive my naive question (I'm only trying to understand this whole thing better) but what is the exact difference between: def rabbit(f): def wrapped_f(*args,**kw): return f(*args,**kw) + "...rabbit?" return wrapped_f @rabbit def makeRabbit(word): return "Hello " and def rabbit(something): def makeRabbit(something): return "Hello " + something return makeRabbit(something) print rabbit("...rabbit") Both examples print the same thing and (as I understand it) in both cases one function is wrapped in the other. Are decorators only a means to facilitate wrapping functions inside other functions in a more effective and clear way? 
Somehow I can not access your website although I can [ping its address and resolve the domain](http://bpaste.net/show/fXnV2ef5gyhnBRkfQOsP/).
[arrow](https://github.com/crsmithdev/arrow) seems like a promising lib to fix the mess that is python date time handling. edit :Note if you just want a prettier looking date time you can use datetime.now().isoformat() or str(datetime.now())
curses probably won't work in Windows, although I think it should in Mac.
That is interesting. Where are you? You can still find me on Google+ where the whole thing takes place. 
In the former case you could easily decorate other functions with rabbit, in the latter you'd have to manually include that inner func each time
As long as code never modifies the default u are OK. But a sentinel value is preferred 
* https://github.com/AppScale/appscale * http://www.reddit.com/r/Python/comments/1bx3vj/how_are_python_apps_deployed_to_production/c9b5tea * https://en.wikipedia.org/wiki/Webhook -&gt; automated build + test [and/or deploy]
The standard library function to copy over `__name__` and `__doc__` is `functools.wraps`: http://docs.python.org/2/library/functools.html#functools.wraps http://docs.python.org/3/library/functools.html#functools.wraps
http://www.reddit.com/r/IPython/comments/1fh0xc/bidirectional_communication_between_javascript/ http://www.reddit.com/r/IPython/comments/1fgmao/does_anyone_know_how_they_did_this/
This is amazing! I've added this in (with credit), I hope that's ok :)
Sorry about that! I actually copied a bit of the code over from a project I'm working on, and tried to modify the 'fn' to the more standard 'f' in the post. I think I got them all though, sorry about all the confusion...
As v_krishna points out, decorators are applied to functions, and not actual results. I like to use decorators because it removes some standard business logic that doesn't apply to what the function is actually used for. Another place where I used decorators was adding a 'round' method to every result value. so if I had a lot of methods that return floats, I could make the return values round by passing in the precision value: @decorator def add_round(f, *args, precision=None, **kwargs): result = f(*args, **kwargs) if precision: result = round(result, precision) return result This saves me having to add an optional parameter round to each method, and having to do the logic in the method itself. The method only does what it need to do: @add_round def calculate_from_slope(m, x, b): return m * x + b 
Yup, although it doesn't get rid of that silly nested function boilerplate. I should have said: Replace def increment(f): def wrapped_f(*args, **kw): return int(f(*args, **kw)) + 1 return wrapped_f with from functools import wraps def increment(f): @wraps(f) def wrapped_f(*args, **kw): return int(f(*args, **kw)) + 1 return wrapped_f then, unless you can't use non-standard libraries, immediately replace that with from decorator import decorator @decorator def increment(f, *args, **kw): return int(f(*args, **kw)) + 1:
Your last line is essentially ISO format. Try: from datetime import datetime print(datetime.now().isoformat(sep=' '))
I'm working on a larger project trying to construct a scholarly article citation network. Another guy and I are working on some front end tools for data collection but we could use help grabbing what data we can legally. For example, PubMed has a public article archive has about ~500,000 articles that can be scraped. Scraping them is easy. However, we need to go one step further; we need to scrape them, parse through them to extract their meta-data i.e.: Title, journal, authors, etc., and then put them into a standard format. Once we have a sizeable dataset we'll be able to start doing analysis of the network itself. Which will be huge. PubMed actually has ~23 million articles (but only that small subset are accessible). And they are just a drop in the bucket. If this kind of thing sounds like something you'd be interested in let me know! We'd be glad to have the help and what I brought up is only one option.
awesome. thanks!
That actually sounds pretty interesting. Pm some details or an irc or something. Off the top of my head some pandas magic sounds like what you guys need to effectively parse the meta data and that's always fun. Is this code for personal use/school/etc and will it be open source? Mostly, will it ever be proprietary? I have some stuff in my contract but I can work on anything open source or academic usually.
Decorators are amazingly powerful, and the examples you give are good (though you should either use the decorator library, or the functools.wraps API for doing your wrapping, for clarity of tracebacks). I just want to add a warning: decorators should be used sparingly, or they start to add to confusion rather than reduce it. For example, I have seen production code that has seven decorators on a single function. Some of those decorators set up wrapper functions; some of those decorators set function attributes on the wrapped methods. The interactions between the various functions were hard to ascertain, and since some of the decorators didn't copy attributes from wrapped to wrapper, subsequent code that looked for those attributes would not find it. Now imagine finding that bug -- ouch! Many of the things we use decorators for, can be performed by applying different patterns -- template method seeming like the most obvious fit. Essentially, I would just recommend that you give serious thought to alternateaps, before you settle on a decorator. 
Good work on updating the post based on comments here :)
The decorator library blew my mind when I first found out about it. I've found it to be very useful in Python libraries written for Robot Framework, which uses introspection to call Python functions in its own domain-specific language.
It's a good example for what you can do with decorators, but for the actual use case (building a JSON API) I'd rather use one of the existing API frameworks (e.g. Django Rest Framework, tastypie, etc.)
A quick googling reveals this: https://code.google.com/p/mintty/ And this: http://www.emtec.com/zoc/features.html Cheers.
I'm sorry, when I said terminal, I really meant the ancient, bug-ridden, totally neglected text interface (aka console) which only supports 16 colors. No ~~potato~~ 256-color terminal for me I'm afraid... :/
* http://docs.python.org/2/library/datetime.html#datetime.date.today * http://docs.python.org/3/library/datetime.html#datetime.date.today * http://docs.python.org/2/library/datetime.html#datetime.datetime.now * http://docs.python.org/3/library/datetime.html#datetime.datetime.now http://docs.python.org/2/library/datetime.html#datetime.date.fromordinal : import datetime def _today(self=None): """ :returns: current datetime, rounded to 0000 :rtype: datetime.datetime """ d=datetime.datetime.now() return d.fromordinal(d.toordinal()) * http://labix.org/python-dateutil#head-1443e0f14ad5dff07efd465e080d1110920673d8 * http://pandas.pydata.org/pandas-docs/dev/timeseries.html * https://pypi.python.org/pypi/pyephem/ * http://schema.org/Date * **https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators** From https://code.google.com/p/pyiso8601/ # iso8601.py ([pypi](https://pypi.python.org/pypi/iso8601)): &gt;&gt;&gt; import iso8601 &gt;&gt;&gt; iso8601.parse_date("2007-06-20T12:34:40+03:00") datetime.datetime(2007, 6, 20, 12, 34, 40, tzinfo=&lt;FixedOffset '+03:00'&gt;) &gt;&gt;&gt; iso8601.parse_date("2007-06-20T12:34:40Z") datetime.datetime(2007, 6, 20, 12, 34, 40, tzinfo=&lt;iso8601.iso8601.Utc object at 0x100ebf0&gt;) pyiso8601 naievely assumes that the timezone is UTC: In [1]: %doctest_mode &gt;&gt;&gt; import datetime, iso8601 &gt;&gt;&gt; d = datetime.datetime.now() &gt;&gt;&gt; d2 = iso8601.parse_date(d.isoformat()) &gt;&gt;&gt; d, d2 (datetime.datetime(2013, 6, 3, 16, 25, 49, 621070), datetime.datetime(2013, 6, 3, 16, 25, 49, 621070, tzinfo=&lt;iso8601.iso8601.Utc object at 0x9295f0c&gt;)) &gt;&gt;&gt; assert d == d2 Traceback (most recent call last): File "&lt;ipython-input-23-2abfcc7ac10d&gt;", line 1, in &lt;module&gt; assert d == d2 TypeError: can't compare offset-naive and offset-aware datetimes #' &gt;&gt;&gt; d.tzinfo, d.tzname() (None, None) &gt;&gt;&gt; d2.tzinfo, d2.tzname() (&lt;iso8601.iso8601.Utc object at 0x9295f0c&gt;, 'UTC') * http://pythonhosted.org/Babel/api/babel.dates-module.html#format_date * http://pythonhosted.org/Babel/api/babel.dates-module.html#format_time * http://pythonhosted.org/Babel/api/babel.dates-module.html#format_datetime 
 import datetime, operator _now = lambda: operator.attrgetter('year','month','day')(datetime.datetime.now()) assert datetime.date(*_now()) == datetime.date.today() 
[`babel.dates.format_date` and `babel.date.format_datetime`](http://pythonhosted.org/Babel/api/babel.dates-module.html)
I can think of a few use cases where this style would not be enough. def called(f): n = [0] @wraps(f) def wrapped_f(*args,**kw): print "I have been called {0} times before.".format(n[0]) n[0] += 1 f(*args,**kw) return wrapped_f This would then be a decorator to have a function that remembers how many times it has been called previously, and to print it each time. Would there be a way to implement this as well with the `decorator` library?
I like the interface that they use on repl.it, but the downside is that you aren't able to deal with files or import non system modules. Anybody know of something like this without the downsides? I pretty much want to be able to access the console and text at the same time.
tkinter is okay for very simple prototypes as it is included in the standard python distribution. Otherwise have a look at PySide with QtCreator and pyside-tools.
Ah yes, that's tricky. There's an example of this sort in the [decorator module's documentation for memoization](http://micheles.googlecode.com/hg/decorator/documentation.html#the-solution), but the result ends up being similar to the `wraps` function (albeit more transparent from the decorator caller's point of view, as it preserves the signature of the function, which `wraps` does not do). For your example, it'd be something like def _called(f, *args, **kwargs): print "I have been called {0} times before.".format(f.n) f.n += 1 f(*args, **kwargs) def called(f): f.n = 0 return decorator.decorator(_called, f) Alternatively, you could just check for `n`: @decorator def called(f, *args, **kwargs): if not hasattr(f, 'n'): f.n = 0 print "I have been called {0} times before.".format(f.n) f.n += 1 f(*args, **kwargs) Or, if you just love decorators (in a "yo dawg, I heard you like decorators" kind of way), you could have a decorator factory which creates a decorator that decorates the decorator to add fields to the function it decorates: def addfields(fields): @decorator def addthesefields(d, f): f.__dict__.update(fields) return d(f) return addthesefields @addfields({'n': 0}) @decorator def called(f, *args, **kwargs): print "I have been called {0} times before.".format(f.n) f.n += 1 f(*args, **kwargs) But now we're just being silly.
Qt (PySide) is nicer than any of the other GUI frameworks I've used. As a bonus, it has all sorts of useful stuff other than UI. I've done a few custom widgets based on drawing to a canvas, and it was reasonably straightforward. 
`gitk` uses Tcl/Tk and it's OK, I actually like interfaces like that. Last I worked with tkinter, four or so years ago, for any non-trivial stuff you had to read the original Tcl/Tk docs and submit custom commands, however Tcl is one of the easiest languages to pick up, so that was OK for me. As for drawing on canvas, I have no idea, I guess it should be pretty simple? An example of augmenting tkinter: # Tk 8.5 has this nice function that I'd like to use to get text height # Tkinter is behind currently, so I inject it myself. if not hasattr(Text, 'count'): def text_count(self, index1, index2, *options): args = ["-%s" % opt for opt in options] args.extend([index1, index2]) return self.tk.call(self._w, "count", *args) Text.count = text_count 
it hasn’t changed in any major way, just like most of the sdlib behaves. if you want a recommendation: use Qt. nice API (if not too pythonic in many places), easy to learn and use, mighty (has a webkit part built in and tons of other stuff), seamless crossplatform integration. also interesting innovations (e.g. Qt quick) alternatives: * Kivy: very pythonic. new, but coming along nicely. designed with mobile in mind, but AFAIK also well suited for desktop applications. probably not as much gimmicks as the others. * GTK: looks horrible on windows and isn’t as nice as Qt IMHO. if you are not a GNOME developer, i see no reason of using it (sorry for the harshness, GTK fans). * wxWidgets: never used it, but those who do seem to really like it. didn’t see much of it, which could mean stagnation, but not necessarily.
Tkinter is alright, I've tried to use other GUI toolkits, but I like the simplicity of Tkinter without all the bloat. If you're going to use Tkinter be sure to use ttk as well to make the widgets look better.
Sounds like Louis XIV, or Baroque.
Yah, no. Tk is very old, and not being updated, so tkinter has only so much to work with. This is (in part) why GTK exists. If you're doing cross platform, do Qt, or possibly wx if you're not doing anything complicated. If you're doing something Linux only, GTK is workable (and fairly easy, if a little limited). Tk is typically for prototyping only since it has so few features is easy to rapidly build something. If you need a reminder of how bad Tk is, just fire up IDLE, and play with its menus. And there's always building a web interface, and doing pyjamas, which isn't my cup of tea personally, but I've seen people use it to pretty solid success. 
No, GTK was created because in the past, Qt wasn't free software licensed. Now it is, so today there would be no reason to create GTK. And of you do something for Linux, Qt is the best choice AFAIK. Qt looks native everywhere, including in GTK dominated environments.
all the code for openshift origin is here: http://openshift.github.io and if you want to get involved the Open Source project, check out http://openshiftboston.eventbrite.com (Boston) or http://openshiftmtview.eventbrite.com (Mountain View) and stay tuned for EU dates coming soon
Since you mention wraps, I think it is worth bringing up a similar tool called `decorator`. Consider the following function from [stackoverflow](http://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python) import sys from contextlib import contextmanager @contextmanager def stdout_redirected(new_stdout): save_stdout = sys.stdout sys.stdout = new_stdout try: yield None finally: sys.stdout = save_stdout We can turn this into a nice decorator with def log_to_file(file): def decorator(func): @wraps(func) def wrapped(*args, **kwargs): with stdout_redirect(file): return func(*args, **kwargs) return wrapped return decorator Alternatively, we can have def log_to_file(file): @decorator def wrapped(func, *args, **kwargs): with stdout_redirect(file): return func(*args, **kwargs) return wrapped Lets say there is a function @log_to_file(file) def make_stuff(lots, of, arguments, with=None, complex=int, types=tuple()): print lots, of, arguments In ipython, make_stuff? will show that the arguments are `(*args, **kwargs)` for the first version but `(lots, of, arguments, with=None, complex=int, types=tuple())` for the second. This is accomplished through generating python as a string and using `exec` and `compile` to turn it into callable code. The ipython bit is nice, but suppose you have a decorator that uses `inspect.getargspec` to figure out what to do. Either inspect will tell you that the arguments are `*args`, `**kwargs` and your not very well off or inspect will be able to say that the arguments are exactly as they appear in the original function. `@decorator` is definitely not a drop in replacement for @wraps and certainly has limitations (what if I want to do some operation in the function closure with func such as memoization keyed off of the name?) As with the parenthetical example, you can probably find clever ways of including the calculation you want, but even if you don't end up using `decorator`, the code is at least interesting and, on close inspection, uses some of the same tricks as `mock`.
I think possible what you are going for, is def _makeRabbit(word): return "Hello " makeRabbit = rabbit(_makeRabbit) in which case, that is equivalent to @rabbit def makeRabbit(word): return "Hello "
For what it's worth - my experience with PySide wasn't happy. The bindings are extremely thin wrappers over the C API - there has been no attempt to make it Pythonic, which makes it horrible to use in Python code. It's not terrible, but it's not great.
Hows Qt vs wx?
I am in the middle of watching an excellent series of tutorial videos [here](http://www.yasinuludag.com/blog/?p=98) on the Qt Model/View architecture. That's kind of the 2nd step after the basic "how to make a widget." I got a lot of use out of [Summerfield's book](http://www.amazon.com/Rapid-GUI-Programming-Python-ebook/dp/B004YW6LNA/rqid=1370310002). It's a release behind now but still applicable. Both of these relate to Python and PyQt, but that's all available on Windows.
Why PySide not [PyQt](http://riverbankcomputing.co.uk/software/pyqt/intro)? Regarding Lattyware's comment: both are "thin wrappers" over the C++ API: all the class names, method names, enum names are the same, also almost all the argument lists are the same. That's not a problem, as I see it, but a feature. It means that all the existing Qt docs are applicable, the syntax translation becomes automatic very quickly. Don't know about PySide, but PyQt does a good job of mapping data types into Python, e.g. a QStringList can be treated like a Python list of strings, etc. 
Urge to fork and write an AI to auto-play games like this is rising. It'd be so entertaining to rack up insanely high scores just to confuse all my friends who send me those facebook game requests :)
It has not been discontinued. It is behind PyQt in supporting Qt5, though. 
Here's [a small script](https://github.com/evgorch/python-snippets/blob/master/topwp.py) that does a similar thing: it pulls the top image from a subreddit (first and only command line argument), if such exists on the first page, and sets it as your wallpaper. Linux-only though, requires [Feh](https://wiki.archlinux.org/index.php/Feh)
*shrugs* they are both fine if you are just doing GUI in python. Qt goes way beyond GUI, though, and having a single event loop that manages GUI, networking, etc is nice
&gt; Tk is very old, and not being updated Are you sure about that? Wikipedia says the latest stable version of Tk was releaesed in December 2012. And 8.5 (released 2007) introduced a whole new theme system which allowed for some pretty drastic changes (and, in most people's opinion, improvements) in look and feel. 2007 is not exactly recent, but if the last time you played with Tkinter was in the pre-8.5 days (which was true for me until recently), then what you can do with it today is *very* different.
Kivy seems really promising, but when I tried to use it I ran into tons of bugs and missing features. I hope it develops more in the coming years. 
Apart from PIL, there isn't a lot of libraries that has not yet been upgraded to Python 3...
I hope you realize that you homebrew macports and fink all do the same thing and you only need one. I would recommend homebrew, if you are going to do any kind of development on a mac you will need it (or an alternative) eventually. It isn't always the best way to install something, but it simplifies installing lots of things. If you don't want to because you are uncomfortable with a Cli then I would suggest getting so, it is an essential skill. If it's from the python side maybe you need to practice the basics of python more. No offense intended just trying to be helpful, but without more detailed information there is little anyone can do besides suggest keep learning.
Wait, if you can't install anything for 2.7 either, how is it a Python 3 problem ? And pyQt, pyGTK and all the others should work perfectly well, even on mac. **edit** oops, my bad for pyGTK, see /u/aceofears 's answer bellow.
https://en.wikipedia.org/wiki/Cloud_computing_comparison
Are those GUI libraries? Do they work with Python 3? I don't know to be honest. Sometimes it is because the download is 32 bit and I have a 64 bit computer, and other times I do not know enough about binary to install snapshots, and other times I have to use homebrew or something else and there are errors that pop up: No available formula for smpeg That is one error. Then it takes me down a roller coaster of forum links, to websites, to other sites etc. just to find out how to solve an issue. It just gets me out of the programming mood, you know? I don't know if I am the only one, but I get so focused in programming and when I have to stop and deal with this, it sucks. At least the aspect of how long and complicated it gets. 
pygtk does not work with python 3, you have to use gobject introspection instead. Since this is not supported on Windows you have to choose between python 3 and Windows support.
Different licenses. From what I've read, this was the entire reason PySide was created.
Ok, if you are a beginner, you might want to start with something simple like tkinter. [This tutorial](http://www.tkdocs.com/tutorial/index.html) should guide you through the basics.
Thank you, I did not know that :-).
Thanks, I'll definitely check out those videos and will eventually look into more books as I go further along. 
https://en.wikipedia.org/wiki/Qt_(framework) is a cross platform framework with support for Mac, Windows, Linux, and now Android.
That has nothing to do with what I just said, I was only talking about pygtk. 
&gt; you have to choose between python 3 and Windows support.
If you want to use gtk. 
Thanks for the suggestion. There's some pretty fascinating stuff in there.
http://python-gtk-3-tutorial.readthedocs.org/en/latest/install.html https://mail.gnome.org/archives/python-hackers-list/2011-August/msg00004.html http://docs.python-guide.org/en/latest/scenarios/gui.html
Thank you!
Huh, interesting, and thank you. All in all, though, I think I will stick to the `functools` method. Not so much disliking `decorators`, as I prefer the style, and feels more natural to return a function than to return a value.
&gt; I know and my question is why :/ Go back and read what he said carefully.
1. That doesn't mean anything if you can't get jhbuild working on windows. 2. Nothing in there says anything about that being merged into the main repository. Besides that, it only says that there is basic support in there. 3. I have literally no idea why you added this. 
I'm guessing you are using Firefox? We are working on a solution. Meanwhile, a bug has been [filed](https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/issues/63). Thanks for bringing this to our attention.
submit an issue.
In Chapter 6 of [Bayesian Methods for Hackers](http://nbviewer.ipython.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter6_Priorities/Priors.ipynb) (about two-thirds down), we present a similar example, but use Bayesian methods. One benefit of this latter approach is that it encodes the ridiculous noise present in financial data (ex: is vol( X ) *really* the true volatility? Probably not)
I said *carefully*. MultiLineDiver's comment says that *most libraries* other than PIL (Python Imaging Library) *have been upgraded* to 3. PIL has been replaced by something called Pillow which works with 3. Upgrading everything to 3 took some time, and that was a chicken and egg thing. Library developers didn't want to do the work to upgrade their libraries until a lot more people were using 3. People didn't want to start using 3 until their favourite libraries had been upgraded to work with it. The community was in something of a stalemate for many years. But, a lot of that work has been done now and most of the really major libraries work with Python 3.
I've been coding Qt in C++ for 3+ years, but Python + Qt is way more powerful, it enables so much.
What kind of issues? C++ official builds at www.qt-project.com work fine, and PySide is also easy to install, all across platforms.
The discount code on your book that you mention at the beginning of the article has expired. Also, thanks for posting this. I've been flirting with python-stdnet and rom will be interesting to have something to compare it with.
I know, I half expected `fn` to be a built in function only available within decorators.
1. Do you have a link to an issue or a bug report? 2. 3. #2 is the closest thing to #1 I was able to find. Are you aware of a better set of resources regarding GTK on Windows? There is an optional PyPi trove classifier for Python 3 compatible code. It would also be great if the relevant Python wiki pages and/or Python-Guide section had a column or an attribute for Python 3 compatibility. 
nope.
There is a five year old [enhancement proposal](https://bugzilla.gnome.org/show_bug.cgi?id=502970) regarding the issue. If either of those are user editable then you should add them yourself, it is one of the most important things that you need to know when looking for a library.
Can you explain how Python + Qt is more powerful than C++ Qt?
Because Python. Because you can use lambdas for slots or undo-callbacks. Because you can trivially whip up new classes and functions at runtime. Because you can use Python collections and iterators. Because you have Python batteries included. Because you have a REPL and don't need to compile stuff. Because Python is garbage collected. Because Python.
Depends. If you're on Windows or a KDE Linux, I'd probably stay away from gtk. If you use Unity or Gnome, however, gtk is awesome (IMO) and definitely worth using.
The word you're looking for is most certainly not "powerful". I think a more appropriate term would be "elegant" or "user-friendly".
Hey, it's no problem. Sorry I got stern about it. Yeah, I really think the days of Python 3 having large voids in library support is a thing of the past these days, or at least close to it. There are probably still a few things left, but I think all of the really big third party libraries have made the switch now. PIL was a real sore point for a lot of people for a long time, but I think Pillow is the beginning of the end of that. It sounds like a lot of your problems may be specific to the Mac environment, although I don't really know anything about that so I could be wrong.
Well it's not developed. It's received 5 commits for all of 2013 and 10 commits since its last release. https://qt.gitorious.org/pyside/pyside/commits/master
Yes. It's probably the easiest GUI framework I've worked with, but it did have some odd behaviours, and a number of things need to be configured in config files rather than in code, which was annoying.
Pillow2.0.0 has been released, which is a valid replacement for PIL, compatible with Python3.
PySide is dead - go with PyQT
Qt/QML is really easy to get results with, which Kivvy more or less is a clone of. I prefer QML over Kivvy even though i prefer python over ecmascript
Qt has QML, a language designed to write UI with. wx has no such thing.
There's lots of.. political nonsense surrounding PySide. http://qt-project.org/wiki/PySide_Roadmap &gt; It was noted that Digia is not returning calls or emails concerning &gt; PySide. The possibility of forking PySide and moving it out of the Qt &gt; Project development toolset was brought up but consensus was established &gt; that this was not desirable if it could be avoided. If a fork is &gt; considered later, legal consul would be asked about trademark, licensing &gt; considerations, and the potential for re-merging changes into the Qt &gt; Project at a later date. http://lists.qt-project.org/pipermail/pyside/2013-March/001173.html "A PySide sprint will be held at SciPy 2013 in June", "Enthought will look into any legal issues that need to be addressed" etc
An interesting alternative: https://github.com/enthought/enaml
Post 8.5 Tk actually looks quite good (almost native) on Mac and Windows. But on linux, it still looks really ugly. Apparently there is an experimental plugin from 2007 that makes it look like a Qt app, but it's really hard to compile these days.
[citation needed]
No it's not: They got a new maintainer and sprints are coming up. Join the mailinglist.
See PM (should have used that anyway).
No it doesn't? I've used pywt4 and I didn't do anything special to get strings returned as native python strings rather then wstrings
GTK+ also uses cairo for drawing, which is a great library.
but why exactly you cannot use one of those programs instead of the default console?
I'm almost certain it does, e.g [QLabel.text](http://pyqt.sourceforge.net/Docs/PyQt4/qlabel.html#text) noting the signature `QString QLabel.text (self)`.. QString acts like regular `str` objects in many instances, but, not all..
Because all console programs compiled for Windows use the default console API. Apart from using SSH to connect to a Linux machine, there isn't any way for a console program to use 256 colors inside the console.
Tk actually continues to be maintained, grow, and so on, BUT it has a different philosophy than, say, Qt, so Qt is likely to make more /r/Python readers comfortable.
I've rolled it out manually, and it really is pretty painless. There is a great blog post here https://www.openshift.com/wiki/installing-openshift-origin-using-vagrant-and-puppet There are also a few cool videos on YouTube about deploying it using the HEAT API from OpenStack.
I have. Not "pythonic" but once set up, it is as easy as the others for the most part. 
Proving a negative is a tough thing to ask for. I can't give you a citation - I would say the lack of direction, development and activity in general is a strong indication of where things are. When was the last release? Who is developing it now? What are their plans? I looked at the list Eikensson mentions and it hasn't changed my opinion much. What I've been able to gather is there is a small group looking at the possibility of getting things going though there are significant hurdles to clear. When I see a project that sat idle for a long time and options on moving forward include starting over from scratch, I don't think of that as a project that is alive. It might be later, but isn't now. In the mean time PyQT has been around for a long time, works well and has great support and resources around it. Sure there are a few businesses that want to make money that are interested in PySide. Me, I write open software so I'm much more interested in what is viable now and in the future than figuring out ways to get around paying for software that I'll sell.
Ah. I thought maybe there was a public announcement that I've missed.
Pyqt converts qstrings to python strings on the fly now. I have never had to do any converting
Ah no, you are wrong. Tk is continually being updated. Latest Release: Tcl/Tk 8.6.0 (Dec 20, 2012) Latest Release: Tcl/Tk 8.5.14 (Apr 3, 2013) (another is coming up shortly)
Bucky on youtube has excellent python tutorials for beginners. I highly recommend. http://www.youtube.com/watch?v=4Mf0h3HphEA&amp;list=PLCA600EB483C9FC4E You also might want to check out https://www.neckbeardrepublic.com/ a bit higher level than what you are asking but tons of python knowledge. Disclosure: I run this site. 
Nice idea. You in fact _can_ order pizza on the command line: http://www.youtube.com/watch?v=x7pPajOvQGo (Now I am hungry for pizza)
I didn't know about rom. I'm vaguely familiar with the Django ORM, but this looks like it might be simpler. Since it's in-memory, and since persistence of Python objects could also be obtained by pickle, I assume the main application of rom is for replication of object state?
This is fake and not even Python, guys.
Just get any Python [e-]book, and tell them to read up on the basics and then cherry-pick the things they need to use.
What does this have to do with python?
I'd like to second the staying away from gtk under windows. The win32 gdk backend seems like the hated step-child of the gtk world. I've got a couple of pygtk apps, and they run rock solid under linux, but crash all the time under windows... and 99% of the windbg stack traces lead back to gdk-win32. Some gtk releases only crash a little, some I can hardly run at all, and there's no predictability as to whether a given release will make things better or worse :(
That is cool. Are you still using Udacity to learn stuff? I was also inspired by them.
If you do, let me know! I'd be glad to help with anything in the code that doesn't make sense. Specifically for Puzzle Question, with the parts that are already available, you would just need to have a time delayed loop to run the analysis (it handles all the screen grabbing, interpreting, simulation, etc.) and then have a mouse driver click the two positions indicated by the "best" result. The core of it would be maybe 10 lines? I've used the core classes to do similar analysis of other games. The ones you would want are probably the "investigators" package which PQHelper uses to get all the information from the screen.
codeacademy's python track is pretty basic
If you use Python 3, it defaults to working with plain Python strings. For Python 2, QStrings are still the default.
I admit, it's not python and probably belongs in another sub. But what exactly is he *advertising* here? There are no ads on his blog, and there isn't anything on his blog that looks like a product or service. The reality is this guy is new to reddit. His blog shows he has an interest in python so he thought he'd share his idea here. Instead of pointing out to him that he should post in a different sub like a decent person would, you're just being a douche.
Maybe use NumPy/PyPy/both? Should give you a nice speedup.
Do this. Numpy ain't fast, but it's certainly faster.
http://stackoverflow.com/questions/7895278/can-i-access-imagemagick-api-with-python ?
The site I link to has a terrible design... but the content is nice imo: http://www.bogotobogo.com/python/pytut.php Functions: http://www.bogotobogo.com/python/python_functions_def.php
I agree that the Bucky Python Tutorials are very good for people that are just being introduced to Python. Bucky is entertaining and has a personally that is anything but boring. Each YouTube video is relatively short (~3-6 minutes) and covers a single or a limited number of topics. Because each video is short and covers one topic, students should not feel overwhelmed by the process of learning Python. You can see a list of all 43 videos by clicking the link below: http://www.youtube.com/playlist?list=PLCA600EB483C9FC4E 
"How long has Python 3 been out? A couple of years?" Where are you coming from ? Py3k has been here since 2008 !!! Even Python 3.2 has been already here for more than two years !
Use pillow not the dead PIL. Try the internal c-implemented methods to apply new custom palettes. getpixel() is way to slow. You can dump the whole image into numpy, there is an interface for this.