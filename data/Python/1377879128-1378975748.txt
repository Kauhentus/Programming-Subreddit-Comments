That's a good point that I didn't consider. Still, the original poster already has his answer, so I don't see what possible harm it does. Perhaps the perl solution uses some interesting technique that can be used when solving the problem in general. (I doubt it, due the nature of the problem, but I doubt thelurkingdead bothered to look at the code before making his comment.)
Is there any good documentation on QPython? I'm quite interested in this project, but have so far found only their Q&amp;A page. I would really like to know more about this project before diving into using it.
Our wiki and docs can be found here: [AppScale: GitHub Pages](https://github.com/appscale/appscale/wiki) If you have any questions, issues or just want to chat drop in our IRC channel here: [AppScale IRC](http://webchat.freenode.net/?channels=appscale&amp;uio=d4)
Here's [one](https://pwpush.cygatehosting.se/) that simply generates strange phrases from time to time. Edit: To make it relevant for python, its [github is here](https://github.com/stemid/passwordfrank)
We have a few customer quotes on our commercial site: [AppScale.com](http://www.appscale.com/) We also have some more in-depth examples of real world use cases in our latest white paper. 
I think you went on qpython.org which is only the Q&amp;A page. You could try http://qpython.com/, it has a bit more information but lacks documentation on certain parts. You could also follow the dev team on Facebook. They usually post cool stuffs like how to run django on Qpython, etc. (https://www.facebook.com/QPython)
Interesting! Having moved (a part of) my mail to an OpenVPN'd Raspberry Pi, I'm absolutely interested in a serious web interface that takes PGP into account. The filtering looks nice too. I was looking for an web interface for (dovecot-)sieve, but having it in a webmail client is great too. Is there anything we, users, can contribute at this point, or should we await the interface and API changes? 
We said we would not implement them, we didn't say we wouldn't be compatible with them.
"Coverity is great!" -- Coverity
I couldn't help but initially think this was another gem from Zed Shaw. Good stuff; is the source hosted someplace where I might be able to have a look?
Thanks for providing a description in the title. It means a lot to mobile users 
There are also http://docopt.org/
:-( That's like saying Python is a good way for beginners to approach programming before learning C++. "Simple is better than complex". This is simpler, and like Python allows one to code the way one thinks. It's also much more readable. I'd say it's a lot more Pythonic than Regex even if it's Ruby-like. :-)
How is RegExpBuilder unreadable? It reads like English. A non-programmer could read it and know what was going on, whereas regex = r[r.line_start, "thechangelog is", ["massively", "amazingly"]::7, "cool"] would not be. 
Python Weekly News http://www.pythonweekly.com/ 
It's not black magic. A `for` statement is a form of assignment -- each item in the iterable is assigned to the specified name. If the iterable has only one item, then that happens only once. I also dislike the fact that the comment that answers the question hyper-literally (how do you do assignment in a lambda) but which arguably is of no use in providing any usable advice (and no, the `setattr()` version is as much a toy answer as the pseudo-lisp version and should not find its way into real code either) has nearly eight times the number of votes as the comment that actually answers the question sensibly -- rework the problem so that you don't need to do assignment in a lambda. 
 ig^bftIT$09uC&amp;nlAK6i This is pretty nice. I'm partial to passphrases, though. I tried a 20 character password and got the above and trying for the life of me to find the curse word. Anyone see it?
tIT? 
You can also use lambdas to do assignment in lambdas. That is; parameters to the outer lambda are bound inside the inner lambda. Although you run the risk of lisp. (lambda sys: (lambda math: (lambda subroutine: (lambda echo: (lambda Cylinder: (lambda main: main() )(lambda: map( (lambda factor: (lambda my_radius, my_height: (lambda my_cylinder: echo("A cylinder with a radius of %.1fcm and a height " "of %.1fcm has a volume of %.1fcm cubed." % (my_radius, my_height, my_cylinder.volume)) )(Cylinder(my_radius, my_height)) )(factor * 10, factor * 20) ),[1, 2, 3]) ) )(type("Cylinder", (object,), dict( __init__ = lambda self, radius, height: subroutine( setattr(self, "radius", radius), setattr(self, "height", height)), volume = property(lambda self: (lambda top_area: self.height * top_area )(math.pi * self.radius ** 2)) ))) )(lambda input: sys.stdout.write(input + '\n')) )(lambda *values: None) )(__import__('math')) )(__import__('sys')) 
tits
Thank you! Shit was messing with my head.
I also had py4a installed and I believe we could call it usable. It very much depends on what you want to do with it but py4a seems to be good for everything basic.
The fact that this question even has to be asked almost five years after the release of python 3.0 shows how backwards the community is. The language is great but the community is lazy and backwards, and for someone who is still relatively new to it all, you can't imagine how much of a turn off it is.
http://i.imgur.com/POA6EVb.jpg
&gt;A non-programmer could read it and know what was going on, whereas Not only is that a mostly-useless heuristic but it's not true either. --- Try the RegExpBuilder for r[r.start, "I is ", r["really "::7, "quite "]:, r.store(["cool", "modest"], name="attitude"), r.end] which has the regex pattern: \AI\ is\ (?:(?:really\ ){,7}quite\ )*(?P&lt;attitude&gt;(?:cool|modest))\Z Seriously, I can't work it out. Not exactly that easy, eh? Even if it was possible, it'd look *something* like: pattern = ( RegExpBuilder() .startOfInput() .then("I is") .maybeSome( RegExpBuilder() .max(7).of("really") .then("quite") .getRegExp() ) .group("attitude") .like( RegExpBuilder() .either("cool") .orString("modest") .getRegExp() ) .endOfInput() .getRegExp() ) Gah! That's insane! You have `.orString` and `.orLike` and `.either` and `.eitherLike` and they can only be combined in specific orders, they mesh flags in a broken way, they have no methodology for grouping properly and it's the most information-sparse yet character-dense thing I've ever seen. Proper commented regex with `re.VERBOSE` is better, for one: matcher = r""" \A # Start of string I\ is\ # Declaration of existance (?: (?:really\ ){,7} # Up to 7 "really "s quite\ # but keep it toned down )* # Any number of times, possibly none (?P&lt;attitude&gt; # Group with name "attitude" cool|modest # I'm either cool or modest ) \Z # End of string """ re.compile(matcher, re.VERBOSE) Plus RegExpBuilder doesn't even work; RegExpBuilder().startOfInput().startOfLine().getRegExp().pattern #&gt;&gt;&gt; '(?:^)(?:^)' Note how `.startOfInput` and `.startOfLine` produce the same pattern? Anyhow, my version¹ can be found [in a Gist of mine](https://gist.github.com/Veedrac/6385310). ¹ Which I polished because some crazy person (crazy enough to use Regex) politely PM'd me asking for the code
Your domain is so meta for this app.
If you hover the password on the site it will highlight the word for you.
Hmm... if you push this hard enough maybe you can emulate a new language... """ Syntax: {...# START #...} -&gt; Start variable function definition }[...],# END #,[...]{ -&gt; Finish variable function definition }[...]# END #[...]{ -&gt; Finish variable function definition, shortcut for global functions :(lambda#): -&gt; Binds variables, but every usage needs an end, )() # END # ()( -&gt; Ends :(lambda#): binding scope :(lambda a, b, c#): -&gt; Preprepares binds for variables, but every usage needs an end, )# END a, b, c #( -&gt; Ends :(lambda a, b, c#): binding scope """ out = {...# START #...} :(lambda#): sys = __import__('sys'), math = __import__('math'), subroutine = lambda *values: None, :(lambda#): Cylinder = type("Cylinder", (object,), dict( __init__ = {...# START #...} :(lambda self, radius, height#): :# OUTPUT #: subroutine( setattr(self, "radius", radius), setattr(self, "height", height) ) )# END self, radius, height #( }[...],# END #,[...]{ volume = property( lambda self: self.height * (math.pi * self.radius ** 2) ) )), :(lambda#): print_cylinder = {...# START #...} :(lambda factor#): :(lambda#): my_radius = factor * 10, my_height = factor * 20 :(lambda#): my_cylinder = Cylinder(my_radius, my_height) :# OUTPUT #: print( "A cylinder with a radius of {:.1f}cm and a height " "of {:.1f}cm has a volume of {:.1f}cm cubed.".format( my_radius, my_height, my_cylinder.volume ) ) )() # END # ()( )() # END # ()( )# END factor #( }[...]# END #[...]{ :# OUTPUT #: map(print_cylinder, [1, 2, 3]) )() # END # ()( )() # END # ()( )() # END # ()( }[...]# END #[...]{
When I need a new password I just find a random string of characters off some product sitting on my desk. There's a bottle of hand sanitizer next to me with 40-something "random" letters and numbers running across the bottom of it. I can take *sdawi2486dspmo28SDSMO15036* from that and I have a new password that I can just look over at until I've got it down. I have several passwords like that memorized now.
ohhh you need to buy the $4.99 client to receive the message, no go
No extra fees and thousands of messages per month. Not a bad deal IMHO.
BTW Pythonista is a great Python IDE on iOS.
And here I think am I the only one who did that.
well it's not going to be popular because of non-free client
Got it. Please excuse my snarkiness, just joshing around. Although I play rough on Perl on purpose. It's all programming though. Cheers.
It's just $5 for the client, and an API key gives you 7.5k messages per month for free. That's $0.0007 a message (assuming you had to pay for the client). Twilio charges $0.01 for an SMS, which can hold a third the amount of data. Pushover seems more than reasonable, especially since it saves you the hassle of maintaining your own push infrastructure and building clients on two devices to receive messages. They gotta make money somehow.
Should we call them asswords instead of passwords?
Neat. Is the source code public?
I would personally suggest sticking to 2.7 for the time being and trying out Flask if you haven't already.
Nice! BTW, each time you generate a new passord, the twitter / facebook / reddit / digg logos blink. I guess most people won't notice it but IMHO that's annoying.
They didn't. What makes you say that? 
I wrote a [CloudBot](http://git.io/cbgit) plugin for grabbing passwords from this site in IRC: http://hasteb.in/nugakukevo.py
Standalone app, reports generated any time, have to be exactly up to date. Using the live database is (was, I don't work there any more) the only option!
Yeah, but why in the heck would you want to receive a password to use over plaintext HTTP? That's just asking to be MITMed / recorded.
Have you thought about rewriting this in JavaScript? That would avoid the MITM stuff involved with sending users passwords from the Flask server.
in chromium the select box is too narrow
Python*
I wonder if OP did it so that each time an add is requested the page reloads and they get an page hit for their ads. Sneaky, but if you care about security at all this should be 100% clientside.
Not a single line of code here, or any python related information. I am disappointed with you /r/Python. This kind of submission should not be upvoted. This is a programming subreddit, not a "promote your website" subreddit.
No
Bulletin boards are so 2003. Having said that, it's great an alternative to DjangoBB domination emerges.
This belongs in r/pyhton
python3 Pcode.py Segmentation fault (core dumped) same issue with eric.
We use IntelliJIDEA..its ridiculously priced but man it's just so good!
If you're in the mood for something completely different: myhdl, design digital circuits using python.
Pandas if you haven't already.
Haha :) You seem an ardent computer engineer like me. I tried myhdl a while back, some good examples here: http://www.myhdl.org/doku.php/cookbook:ff
Pyglet or PyGame
Last updated 2011-09-09 :|
Learn [twisted](http://krondo.com/?page_id=1327). Sure tulip is making strides, but twisted is pretty much the end-all/be-all of python networking, at least in the present moment. If you get reasonably familiar with twisted, you can build anything.
x = numpy Get the docs for x http://docs.scipy.org/doc/ Repeat{ Whenever you have some practical problem that could be solved with x, force yourself to use it consulting the docs whenever necessary } ¯\ (ツ) /¯
libdtcod: http://doryen.eptalys.net/libtcod/ The world needs more roguelike games :) Python and extensible to C.
Numpy is good to know for anything computational. 
If you've never played with natural language processing, there's lots of fun experimentation to be done with NLTK: http://nltk.org/
It's been a while since I used either one, but my impression at the time was that pygame was a bit heavy, and wasnt pure Python (it was a Python lib built on top of the SDL library). Piglet on the other hand was still relatively new, but had loads of potential. Having said that, I'd say pyglet, because even though I used it in it's very early stages, it felt much better to work with. I'm sure that's only improved. Go make a game!
This one isn't as sexy as the others that have been posted, but it's probably the most useful: http://docs.python-requests.org/en/latest/ 
Please use datetimes and not iso8601 strings. That's a serialization format not a data format. 
SQL Alchemy : http://www.sqlalchemy.org/
If what you experience is the ide suddenly disappearing, i think i have fixed that and will be releasing it in beta 6 on monday. I will still like to have your feedback though.
Webscraping is a very useful skill to have under your belt, and the [requests](http://docs.python-requests.org/en/latest/) library is the best tool for the job! I'm just a newbie, and [my code](https://github.com/johnnymo87/Vending/blob/master/ApexScrape.py) is probably a horrible mess, but your welcome to look it over if you want to get an idea of how I used requests to scrape a work website.
If you are doing a lot of webscraping for anything non-trivial such as fetching the contents of a single page, I would seriously check out [scrapy](http://scrapy.org/). Think Django-like models with spiders.
RethinkDB
is..that...Oracle APEX ?
[Requests](http://docs.python-requests.org/en/latest/)?
Twisted is incredibly useful if you're into network infrastructure.
Scientific Python Lectures - Lecture 2: Numpy * https://github.com/jrjohansson/scientific-python-lectures * http://nbviewer.ipython.org/urls/raw.github.com/jrjohansson/scientific-python-lectures/master/Lecture-2-Numpy.ipynb * https://www.wakari.io/nb/url///wakari.io/static/notebooks/Lecture_2_Numpy.ipynb A Crash Course in Python for Scientists * http://nbviewer.ipython.org/5920182#ii.-numpy-and-scipy Python Scientific Lecture Notes * https://github.com/scipy-lectures/scipy-lecture-notes/ * http://scipy-lectures.github.io/intro/numpy/index.html * http://scipy-lectures.github.io/advanced/advanced_numpy/index.html
http://docs.scipy.org/doc/numpy/reference/
[Pandas is a data analysis library.](http://pandas.pydata.org/) [Video](http://vimeo.com/59324550)
no this happens on startup (it doesnt start it just exits with that error). i would be interested if it has proper QT code completion. I am using arch linux and i have exactly the same problem with eric. if i were you i wouldnt worry too much about it unless more people report the same problem because i have latest software updates, theres probably something broken in my libraries. But if theres any information i can provide to find out why its crashing let me know. 
Here's some of my favorites: * Python's new concurrent.futures is awesome: http://docs.python.org/dev/library/concurrent.futures.html * Tornado: It's more than just a web framework! I use Tornado to write asynchronous code all the time that has nothing to do with the web. http://tornadoweb.org/ * sh: Lets you import shell commands as functions; love it. http://amoffat.github.io/sh/ * Python's atexit module: Let's you call whatever you want when your program exits. I swear very few people know it exists! http://docs.python.org/2/library/atexit.html * OnOff: Add on(), off(), and trigger() style events (like Backbone.js) to any Python class. https://github.com/LiftoffSoftware/OnOff * htmltag: Wrap whatever strings you want in HTML tags (even custom ones!) using the same slick import method as the sh module. It also has a function that can stop all known XSS vulnerabilities. https://github.com/LiftoffSoftware/htmltag
I would also suggest to go with Pyglet but it's more personal taste for the reasons pointed out by okmkz. It also wasn't so difficult to enhance the Xlib fd reactor to also react on different file descriptors (which is handy if you are working with sockets). 
What? No love for Tornado (http://tornadoweb.org/). It is so fast and the new concurrency/futures features in 3.0+ are awesome.
If you use AWS for personal use or work, I would recommend looking at boto.
python-bluez, py-visa and pyserial are nice modules if you're needing to do any kind of communication with external instruments or data recording devices. Another really neat module I just discovered is y_serial, which allows you to interface with sqlite3 databases with practically zero SQL syntax. I considered learning a bit of SQL so I could start storing all my data as python objects in a database (which I think is more space efficient than storing as text or excel data, and makes everything in one file that is searchable), but with y_serial, I can database with no SQL. Here's the link to the package index: https://pypi.python.org/pypi/y_serial/ 
Scapy is fun if you want to play with networking.
For myself, I found studying other people's code in my own field was the best way to get started. Here is one of my fav links to some kind person's program that uses numpy to calculate the equilibrium band structure of a 1-dimensional stack of semiconductors using the Poisson equation: http://pythonhosted.org/eq_band_diagram/
Boto and fabric are great if you want to do anything in AWS. 
Should this work in Python 2.6? It appears not to... I get a syntax error on this line: self.bad_inputs = dict([(key, value) for key, value in self.response.iteritems() if key not in {'errors', 'messages', 'status', 'receipt', 'request'}]) Because, I believe, of the {} set notation.
 scikit learn. It's my favorite machine learning library in any language.
[scikit](http://scikit-learn.org/stable/index.html) and pandas are really cool. 
How about a deep dive of all the ones in standard library? * httplib/2 * functools * Collections * json * minidom * os * sys We often long to see outward, but forget to look inwards first. 
Good point. I just realized that googling would mostly return pictures of large fluffy mammals.
rstr.xeger it's magic!
Whoa whoa whoa! [Reversing a reg-ex?!](http://stackoverflow.com/a/9118086/792238) That's cool!
I'm going to be "that guy" and give you the answer you didn't ask for: While I love Python as much as the next guy, I think one reaches the point where one's *Python* skills are probably best improved by spending a bored weekend learning *another* programming language — preferably one based on an entirely different underlying paradigm. A good aid to accomplish this in a weekend is Bruce Tate's book "Seven Languages in Seven Weeks".
Ah you know I did consider learning ruby instead! Especially since I've been doing a lot of [Vagrant](http://www.vagrantup.com/) and whose vagrantfile is mostly in ruby. That looks a really cool book though. Where have I heard Bruce Tate's name before?...
Good point..I haven't used all of these.
There's STILL a place for doing many [Web applications in Perl or sh](http://www.real-user-monitoring.com/hail-humble-cgi-active-web-pages-for-the-working-sysad/).
argh!!!!!! [EDIT:http://pythonhosted.org/argh/]
https://en.wikipedia.org/wiki/Procfs
Walk two paths, here is what everyone is doing: http://stg.pythonhackers.com/os/?utm_source=Python+Hackers&amp;utm_campaign=b6380a858f-Alpha_PythonHackers Here is what you do: http://codingbat.com/python
I really enjoyed playing with [basemap](http://matplotlib.org/basemap/).
I will definitely work on the Qt code completioni, thanks.
Ah cool!! I LOVE maps. I am obsessed with maps and geography! I've probably read every submission over at /r/mapporn! Check it out btw, that's one of my fav subreddits.
Sweet!
Ha, I'm already subscribed to that subreddit. If you're interested, here's something I did with basemap over at [my blog](http://gregklein.wordpress.com/2013/03/19/wikipedia-python-and-maps/). I think I submitted that to /r/mapporn a while back.
I like the concept of Tent, but I have doubts about it's practicality. Let's stick with your coffee shop example. If I have 500 friends who use this app, does that mean that the app has to make 500 request to show this data? Or is the data cached on their service and? Or let's say I want to make a service like last.fm. How would you determine what music is trending? Query all the ten servers? Or do you duplicate all user data? 
Nice you used numpy too. This is handy and that's a really cool blog you got there.
concurrent.futures is indeed awesome. I needed a quick-and-dirty in-process work queue for I/O-bound workers and the concurrent.futures ThreadPoolExecutor was perfect for it. I was able to hack it out fast and the code was ridiculously clean.
Yes this is great!
Ah scrapy looks cool! Not to be confused with [Scapy.](http://www.secdev.org/projects/scapy/)
Yes I knew I had read his name somewhere, I used his book 'Beyond Java' once.
Thanks!
Udacity has quite a few more advanced courses where you use Python. I don't know where Codecademy left off, but the Udacity course on Design of Computer Programs is pretty tough but really interesting. The one on Algorithms is cool too.
http://twitter.com/pypi
I do use datetimes (with timezones, too), that's why those examples have them wrapped in `str()`s, the docs list those attributes as datetimes, and the first handful of lines in the library set up helper functions for turning date headers from the HTTP requests into datetimes.
Yeah, it's gonna be &gt;2.7 Due to literal set notation. If that's the only thing keeping it from working in 2.6 (don't have it installed, so I wouldn't know), I can swap out the literal notation for `set()`, or you could do it yourself. But 2.7 is nice, come join us!
Unfortunately I'm tied to 2.6 because I'm using it inside other apps that have 2.6 bundled... Thanks, though - I'll look at tweaking it for 2.6
Feel free to open a pull request if you get it working: I'm not supporting 2.6 because it was going to be a pain for me to get it installed locally alongside 2.7. But if there's not much holding it back (and there shouldn't be, even most of the `__future__` imports go unused), I'd be happy to fold in support.
&gt; I'm not supporting 2.6 because it was going to be a pain for me to get it installed locally alongside 2.7. What OS are you running? Have a look at [pyenv](https://github.com/yyuu/pyenv), it makes using multiple python versions very easy and relatively frictionless. Before that I just compiled the versions I needed myself and installed them to `/opt`, then used those with virtualenv.
Try doing the problems in the [Euler Project](http://projecteuler.net/) and/or [Rosalind](http://rosalind.info/about/). At the same time, expand beyond the raw coding and get good with some of the secondary skills/technologies. For example, get a Stack Exchange account and learn how to ask questions and learn from others. This is a skill that's often overlooked. Similarly -- if you don't already have one -- get a git account learn to use it for improving prior code as you learn new things and for sharing what you have.
I may well just do that. The other thing I found is that logging.NullHandler was new in 2.7 I also caught a couple of typos that I flagged in an Issue on GitHub Other than all that, my basic test worked just fine.
For a new web server I wrote (and will be releasing soon) I used concurrent.futures extensively. I love it.
Many thanks for that. bpython (http://bpython-interpreter.org/) has a decent auto complete for PyQt working . you may want to copy it from there. Pycharm doesnt have it, pydev works almost ok with it but doesnt understand field annotations and completion could be better. i'll post to pydev today probably. def test(app:QApplication): app.auto_complete_should_really_work
It sounds like a great system, but you raise some interesting issues. I cant rightly think of a way to store the data for ease of access without giving something to the coffeshop that you dont get back. Perhaps it polls a random set of those five hundred friends, say twenty or so, for their reviews, and then if the user wants to see more, it can poll for additional data? That would reduce the requests into manageable chunks.
Build something or duplicate something... that's always going to be the answer. *What* you make isn't so important. What matters is that you do the following: - Learn to learn how to use a library - Learn to document your code (hell... you should even *start* by documenting your code, *c.f.* module-level docstrings) - Learn to distribute your code (pip, github) - Get a code review from /r/Python 
Euler Project is really more about maths than programming and I have just saw Rosalind and it seems really focused on bioinformatics... I dunno of they really fit in order to learn a language...
But in that case you couldn't view reviews in order or in any other way that requires access to all all your friends reviews. /r/darkgold can you shed some light on this? Am I missing something?
I think you mean /u/darkgold, though he may not have gold on his account to get the notification. I was thinking like reddifs comment system, except rather than load all the top reviews, pull some from each rating level (5 stars through to 1 star) and allow the user to load the entire review list if he want to see it. You could possibly have it poll friends of friends too, to grab reviews from people you dont know. Im also interested to hear from op what he thinks of these problems.
I found Python absolutely useless without numpy. I've come from mathematica and a data analysis background.
Flask and pattern. Flask is a web application framework Pattern is webcrawling, natural language processing, and machine learning tools rolled into one package.
not really a library, but it's written in python and has an API http://leoeditor.com/
I have never really managed to "wrap my head" around the whole ORM thing. Care to share a link or three?
What library is this built with? Ive wanted to put together a small forum for friends with flask or bottle myself, but ive no idea where to start with them.
The official documentation is quite good. * http://docs.sqlalchemy.org/en/rel_0_8/orm/tutorial.html * [Declarative Base](http://docs.sqlalchemy.org/en/rel_0_8/orm/extensions/declarative.html) * [Example Graph](https://github.com/zzzeek/sqlalchemy/blob/master/examples/graphs/directed_graph.py#L10)
Thank you for the information. I guess I still don't understand what using ORM gives me that I cannot easily exceed writing my own. I cannot extend the base class/tablespaces? Is the real gain that it's a singular interface to (potentially) several differing SQL back-ends?
Ah. My bad. 
I actually made a git account yesterday so I could dive into stuff. I'm definitely going to dive into these exercises. 
It's a higher level abstraction over SQL, some people claim to be more productive working with data as objects rather than dealing with cursors and queries. Suppose it's personal taste though. Personally I don't find writing complex joins that fun and sqlalchemy tends to generate the same SQL I would write otherwise by hand but with much less work. Yes, it's possible to [extend the base classes](http://docs.sqlalchemy.org/en/rel_0_8/orm/extensions/declarative.html#declarative-mixins). 
^Oh ^yeah, ^I ^did ^mean ^the ^op, ^just ^a ^typo. &gt; pull some from each rating level (5 stars through to 1 star) But since tent is all about the user controlling their data, you still have to get the ratings from the friends of the user. The way Tumblr's dashboard work could be one solution. They have several clusters, each of which house serve some number of user's and every clusters contains every post. So what could be done is if you're friends with someone, every time they add a review, their post is mirrored on your server. This would allow for faster queries (at least in the coffeeshop app case. This wouldn't work something like last.fm), but the drawbacks are pretty big too. Storage space could be an issue, and you lose control over your data.
Note: This post appears to have been moved to: http://freeprogrammersblog.vhex.net/post/small-parts-of-python-builtins-functionality-you-might-overlook/1
After the app goes through authorization it gets an ID and key from the server. It saves them so you don't have to go through auth again (not really necessary for an example app, but since you'd do that in a real app I included it).
Dunno about pattern, but how the hell did Tornado end up in the list but not Flask?!
Great questions. As far as the friends list goes, that's already on your Tent server along with information describing their profiles. Once you give the app view permissions it's not resource intensive to get. Showing the actual reviews is tricker. Tent's achilles heal is many-to-many relationships. The math just doesn't work. Let's say it's a site for all restaurant reviews in Raleigh, not just coffee, and it has 10,000 members. If they all subscribe to each other and all post one review that would be 100,000,000 requests. The way around this is to fall back to the web. Use private forums instead of Tent for large group, private communication. For public information like public product reviews on a Tent server have some other service gather them all up and make them available, though if your friends are posting private restaurant reviews those will have to come through your Tent server.
* http://nborwankar.github.io/LearnDataScience/ * https://github.com/nborwankar/LearnDataScience * [nborwankar-LearnDataScience-\[rev\].zip](https://github.com/nborwankar/LearnDataScience/zipball/master) It looks like the [OpenDST](http://opendst.org/) sources reference the docs for * Enthought EPD * Anaconda Which will install /r/ipython notebook, numpy ^[1](http://www.reddit.com/r/Python/comments/1lgxbf/best_tutorial_to_learn_numpy/) , pandas, statsmodels, scikit-learn, matplotlib for these notebooks, as well as many other outstanding python libraries for /r/datascience. 
conventional wisdom says it takes 10,000 hours of focused experience to "master" a skill, this is just the first 5 days of your 10,000 hours.
Thanks for catching those typos. I used to support bulk sending with multiple messages/devices, but it was so simple to handle outside of the library that I removed it. And left a few Ss lying around. If NullHandler isn't around in 2.7, we could just wrap that addHandler in a `try:` `except AttributeError` block, and replace it with this: class NullHandler(logging.Handler): def emit(self, record): pass 
That looks pretty good, I'll give it a shot.
This looks quite nice, would be nice to have a demo that used angularjs on the frontend.
Fixed, thanks. Simpler is definitely better for the example app.
A simple and ultra minimalist way to make your code unreadable to users of both versions of Python.
* http://www.reddit.com/r/Python/comments/1j1idm/self_learning_sites/cbajb83 * http://www.reddit.com/r/Python/comments/1eboql/python_website_tuts_that_dont_use_django/c9yxl8w * http://www.reddit.com/r/Python/comments/1fsqj1/im_writing_a_book_to_teach_kids_to_code_it_was/cadl4bb * http://www.reddit.com/r/Python/comments/1gn9gv/what_are_some_easy_projects_i_can_get_started_in/cam3t17 * http://www.reddit.com/r/django/comments/1ktlwy/is_django_capable_of_a_web_ui/cbsh3b5 * http://www.reddit.com/r/Python/comments/1b4uy3/pythonbased_health_care_exchange/c93pfhx
Thanks Coverity!
Flask is awesome right?! Pattern is just a fun parsing tool.
&gt;Start writing something. Couldn't agree more. Software, like any endeavor that combines creativity and skill, can only be mastered by *doing* it. A lot of it. Don't worry about understanding the advanced topics in the abstract; Find problems that you want to solve and start solving them in python. You'll stumble on the advanced stuff when you need it and when you have the proper context to appreciate it.
What was wrong with `six`?
Thank you so much for this 
Ive suggested above polling for reviews or (any similar data really)from your friends list. I mean people trust their friends recommendations right? Failing any hits with that, polling friends of friends seems to be the easiest option, though that gets into sticky situations involving data control and privacy. should apps you grant permissions to be allowed to poll your friends friends list if they havent given permission? Almost certainly not. I think theres a great idea here, but it hits a huge wall when it comes to social sharing, which is inarguably what social media is for. You can either retain control of your data, or allow it to be shared and give up someamount of control to do so. I love the idea of a grassroots revolution in social networking, but I think ttheres a certain amount of privacy security and control you have to be willing to give up to use it.
Hi kingkilr, Pies is significantly smaller and simpler then six because it assumes for everything possible the developer is using the Python3 compatible versions included with python 2.6+, whereas six tries to maintain compatibility with Python 2.4 - leading to many more overrides and further into different language territory. Additionally where possible pies tries to enable you to not have to change syntax at all - pass including the import. The ultimate goal, of course, is for everything to be on Python 3 directly and have no need for these compatibility libraries. Pies is simply one step closer to that goal as it includes less of these "bad" overrides. Probably most importantly though, I wrote pies before I was aware of six and simply never took the time to release it as a separate package (it was included in my existing projects as MultiplePythonSupport.py). I thought maybe someone else would find it useful as a separate entity and decided to release it as such. Thanks! Timothy
Like others said Udacity is great and one other thing you might want to look at is a book called " The Python Standard library" it's a really great book that goes through various examples on how to utilize Python's standard library. 
You guys should check out Continuum Analytics' [Anaconda](https://store.continuum.io/cshop/anaconda/). It's a package which contains an IED called Spyder (which I personally love), IPython, and all manner of mathematical libraries, including Pandas, SciPy, Numpy, Matplotlib (how I love it), qt, Tkinter (I think) and all that good stuff. I should note that Spyder is the best free IDE out there (other than Wing - is it free?). In the past, I used to go the traditional route of notebook++ -&gt; IPython or IDLE, then keep going back and forth. Spyder's layout is so friendly that it allows you to easily write, debug, compile, and keep track of everything. 
+1 on Euler. It's how I got my start. Sure it's highly mathematical, but it forces you to think like a programmer. Most of the problems have very simple solutions, but you'll find that, because the question requires analyzing enormous numbers, you have to figure out efficient ways to clean up your code and reduce unnecessary instructions. There is also a fairly well thought-out learning curve built into the sequence of problems, so you'll always feel like you're improving. 
I spent a few weeks dabbling in Haskell and realized I'm not a good enough programmer to figure it out. However, its steep learning curve and the way it forced me to think (functionally) really made me write better code in Python (even though I never touched Haskell after that day). So yeah...I'm a better programmer today for having TRIED to understand Haskell!
It even lets you pull stock data from yahoo finance! 
Isn't it? I was so overwhelmed at first...I wish they had a "complete idiot's guide to Numpy and Scipy". Just something to help me hit the ground running.
SQLite and PyQt4.
Someone share a source code?
I'm a python novice with a recent determination to get better at python. Part of this includes experimenting with using a debugger, something I've never done in my coding career. Almost all of my work is done on a remote server, which I ssh into. I typically use Komodo Edit on Win7 to connect via ssh to the remote system, edit the files in my Win Komodo editor, then execute them on the remote linux system. Any tips for setting up an environment in which I can debug using an IDE / debugger? Does python support remote debugging?
* http://docs.python.org/2/library/2to3.html * http://pythonhosted.org/six/#module-six.moves (2 -&gt; 3) * https://github.com/nandoflorestan/nine/blob/master/nine/__init__.py (3 -&gt; 2)
http://wiki.python.org/moin/PythonEditors#Enhanced_Python_shells * http://ipython.org/notebook.html * [EDIT] http://ipython.org/ipython-doc/stable/interactive/notebook.html http://wiki.python.org/moin/IntegratedDevelopmentEnvironments#IDEs_with_introspection-based_code_completion_and_integrated_debugger 
Why do you not want to do so locally?
Users that don't want to self-host can use a hosting service. It's like email in that respect. Setting up an email server is hard but you don't even have to know what one is to use email. Yep, if you use shared hosting you lose control. I actually don't think this is bad. Some people don't care about privacy, but unlike something like FB with Tent that doesn't mean that I have to use their horrible service to interact with them. Sadly this does mean I can't trust information I send them to stay private. So if I really care about privacy I have to take that into consideration when I choose what to share with them. Great point about just using quality APIs. Smart people keep asking me this question and they may be right -- if enough high quality APIs are built we really connect the web without the complications of Tent. Unfortunately I'm not convinced this is turning out to be the case. Until the default way of storing data becomes the user keeps it not the company, there will always be an incentive for companies to be more closed. We're empowering another generation of middlemen like FB with incredible moats and network effects and we're going to pay for it later. 
Just saw the tip in my inbox. I really appreciate the intent, but we'd rather work out a non-donation business model :)
This reminds me: it sure would be nice if we had a way to specify interface versions separately from implementation versions.
Good point, friends of friends stuff brings up a whole other set of issues, and it's super important. I'll do more research on the internals of Tent and hopefully have a real answer the next time someone asks about that. My personal preference would be that the people in the friends relationship could set how public the relationship is (private, viewable by other friends, etc) though I don't know how that would be implemented.
That's what the first number in a version number should be for.
I added it :)
&gt; OnOff: Add on(), off(), and trigger() style events (like Backbone.js) to any Python clas That was a javascript library.
There are many ways available to change ip address. But that methods are very easy to change ip address. You can also try the below method . Simply restart your modem then you will get the new ip address. visit this site http://www.ip-details.com/ your ip address is changed or not.
x-post /r/opensource 
I quite like using IPython's nbconvert to do reveal presentations as seen [here](http://www.youtube.com/watch?v=rBS6hmiK-H8)
My point about the API's was just in case Tent wasn't about data ownership. But it is, so the point I made isn't really relevant. Since Tent is aimed at giving (more) control to the user and not just about getting data from point A to point B, I can see how it's different from traditional transfer protocols. A huge issue with Tent is that the potential to confuse users is so large. Imagine if people start writing software and web services that use the Tent protocol. Users will be asked to provide access to certain data through the Tent protocol, which they can do by either hosting it themselves (which we've already established the majority of people won't do/be able to do) or they're using a hosting service to do it for them (which has it's own downsides, as we also mentioned). At this point the users already needs to have an account somewhere with all their data attached to it, and then to use other services they might need to register *another* account there (unless the service in question allows you to share your data with them and through them in an anonymous matter). My point here is that you'd be requiring users to make yet another account, but this time it's the final one, the omega account. The account to end all accounts. Yet services might still require you to register with them as well. If you compare that situation with the current situation you'll see how using the Tent protocol for data distribution only adds yet another account for users to keep track of. Then there's also the psychological part that is important for how users share their data with a service. Either the service has a "log in with Tent" button, and users press that, log in, and the service can access their (public/protected) information, OR the users have to explicitly set which data the service can access, OR the service presents a list of "permissions" which the users can accept or decline (similar to how Google Play Store handles permissions for apps when you want to download an app). In the first case, it doesn't *feel* like your data is secure. All it takes is a push of a button and a log-in and a service can access your data. Even though this may well be more secure than the current way of sharing data with things like Facebook or Google+, to the average users it doesn't *feel* more secure. With the second case, I doubt many users would like to go through the trouble of having to explicitly set which data to share. They want to use a service and they want to use it now, they don't care about how some semi-random website wants to use their data, just use it already so I can see what my aunt is having for dinner (just an example)! You can force the users to set this up but that just results in an unpleasant user experience. The third case is interesting and perhaps most viable but in that case, again, the user doesn't feel like it's data is that secure. All it takes for some service to see their data is for you to press "okay". Even if this is implemented so that it scans your fingerprint, takes a retina scan and analyses your DNA in order to find out whether the person pressing "okay" is actually *you*, users still won't *feel* like it's secure. I don't mean to imply that current web service *feel* secure to users. But for a protocol that's aimed at having more (secure) control of your data, the way the protocol works for uses on a psychological level is also very important. Of course apps that are build with the protocol in mind can do *some* work toward this, but in the end they are also limited to what the protocol says they should do. **I feel like I'm rambling, so I should stop writing now. In my opinion, Tent is a nice concept but it lacks in execution, and given the level of interest and attention the average user has for this sort of thing, I doubt it will be able to take off (not to mention services themselves probably would rather keep all the data to themselves anyway and wouldn't even support the Tent protocol. Entities such as Facebook or Google can easily do this because users are so incredibly invested in them due to all the time that's already been spent by the users with these services to build their accounts, their network, etc.).** Thanks for you answer though!
I can second that. If there's an android version def look at it
thanks, added this one !
Hi ! Sorry I don't think this should be added to the list because it seems it's simply a bot posting on twitter some new modules ?
It crashes as soon as it runs into a torrent that only has a magnet link and no .torrent link.
Ah, the beauty of pull requests :)
Cool, now you can use this and a [python bittorrent library](https://github.com/cscheid/python-bittorrent) to automatically search for and download content.
Nice ! I've been meaning to do that for a little while (but never did, that kind of scrapping is really annoying to code). I have a few comments about the code itself: * The TPB class is kind of useless. It would be simpler to just have the functions at module level, and it would make the lib nicer to use (no need to create an object). * The Torrent object could probably be done with namedtuple to avoid the boring-to-type constructor. * I'm sad it's not python 3 compatible. On the other hand, it will be trivial to port. * You might want to add some kind of tests, especially when doing something as fragile as scrapping (it can break on layout change): a little script that gets a given torrent page and check the constructed Torrent object is exactly what is should be. That way, you can easily make sure the site hasn't changed, and even automate the test to get an email when it stops working[1]. Of course, I'd be glad to help you with this or send you a pull request, if you want. [1] With something like this, maybe: https://github.com/progrium/skywatch
PTVS apparently supports remote debugging http://www.youtube.com/watch?v=VTluEosS4Ts
Create an issue dude!
What's the advantage over pandoc?
Yeah, it adds the same functions as a JavaScript library to Python. Sort of the point... To provide a nice, familiar functionality from a popular lib to Python. I use it quite a lot as it makes a lot of sense as a means to provide ways for plugins to hook into or override nearly anything.
There are a couple of things you're doing that could be a little more pythonic. On line 68 &gt;o['deviceName'] + '.' + str(i) The typical way to do stuff like this is "%s.%i" % (o['deviceName'],i) The addition method is frowned on because it creates a new string for each plus. Also in that whole block you're doing a manual counter, which may be unavoidable because of the i=2 thing you do. The normal way would be to do for (i,o) in enumerate(output): On line 88 your code be slightly cleaner with page = [20 for i in range((total - total % 20) / 20)] if total % 20 != 0: page.append(total % 20) One thing you might also consider doing is when you have have a long list of something like function(foo, bar, foobar) It can be a little cleaner if the commas are prefix function(foo ,bar ,foobar) Mainly because it's harder to miss a comma.
Excellent, time to write a better input plugin for [Flexget](http://flexget.com/).
Nice work. Interestingly I've been working on something similar over the last couple of weeks. There is one thing that is different in my program (besides using reveal.js) and I will share it when it is ready. 
http://planet.python.org
The author should also take a look at http://doughellmann.com/2012/11/the-performance-impact-of-using-dict-instead-of-in-cpython-2-7-2.html list()/dict()/set() are all slower than []/{}/{}
argv!!!! ftfy
http://wiki.python.org/moin/PythonEditors#Mobile_Device_Editors
I have spent the last 3 months fixing several bugs related to this so you can try the development version. It will be ready as 3.1 shortly. Basically there were problems with some options related to process management.
Why don't pip packages automatically specify required versions for dependencies? It's not like foo 1.6 can assume it will work with bar 1.8 when it was designed to work with bar 1.7...
scikit learn is spectacularly simpler than Mahout. And the online documentation is solid with lots of examples. I'd suggest starting with some kind of supervised learning. If you want a real problem to work on, you might want to check out Kaggle. 
I work from different computers over the course of a week, from different networks. Sometimes I'm on a linux or Win7 system from home, sometimes I'm on my Mac laptop from a coffee shop.
I like the idea. But `pies` is really only picking off the low hanging fruit. It's the stuff that's trivial to resolve. I admit it's nice having a library in a central place to do it, but I'm just not sure I'd find it useful enough to pull as a dependency instead of writing out the necessary definitions myself. I've only made a few modules compatible with Python 2.6/2.7/3.3, and the pain points *for me* were the differences in handling unicode. My code is littered with calls to `encode` and `decode`, and despite having read all the material I can find on the topic, I still don't have a hope of getting it right the first time. I have to wait for Python to yell at me about some bad encoding, and then I have to guess at how to fix it. (And yes, I've changed calls to `open` with calls to `codecs.open`. But I think there are still some inconsistencies standard library functions that expect strings of a particular encoding.) If you could make any progress on solving that problem, then I personally would be much more interested. And finally, you've used the GPL. Which means any project that has a [copyfree](http://copyfree.org) license can't use your library without switching to the GPL. And tons of modules are permissively licensed. If your goal is to get more people to use your code, then the GPL is working against you here.
I actually don't have any experience with Selenium so I'm really not the best person to answer those questions. As for the advantage of using Scrapy, the database interface is an ORM. It just makes manipulating the data easier.
npm actually does this kind of poorly because frozen version sets can't include dev dependencies.
Hell yes! And for what it's worth, the guys on #flexget are really, really, *really* friendly/helpful. Especially a user who goes by `gazpachoking`. That guy is as nice and helpful as they come.
Haha, oh wow. I posted in another thread a day or two ago asking if anyone had any good information for starting off building something like this with flask, and here it is. Cheers!
Related: Creating a static Flask website and hosting it for free on Github Pages -- http://www.stevenloria.com/hosting-static-flask-sites-for-free-on-github-pages/
You can debug in all of those environments. Is not hard.
If you want to build a static site, why complicate things with a web interface?
I noticed that a lot of people use a lambda expression as the key for the sort method, instead of itemgetter. from operator import itemgetter ... posts.sort(key=itemgetter('date')) vs posts.sort(key=lambda item:item['date']) Is there a reason for that? It would seem at a first glance that the lambda is slower and less idiomatic.
If by "web interface" you mean "web framework", there are a few reasons why you might want to take this route: - Flexibility. If you want to transition from a static website to a more dynamic website, it would be easy to add the new components, e.g. a database. Conversely, this flexibility also allows you to strip down your site to only those components that you need, which brings me to the next point... - Simplicity. As the author made clear in the first paragraph, his requirements were minimal. Building a blog with a lightweight framework such as Flask allows you to understand every piece and remove bloat.
number 5 as pdf too http://scipy-lectures.github.io/
I'm not clear on what your point is. Maybe my question wasn't very clear. What I'd like to do is have one centralized environment, running on a server, which will host the files and execute the python code. I would like to be able to use an interactive debugger from any of my client platforms, where I actually write the code, which connects to the remote systems and allows the interactive debugging. I think Jetbrain's IDE allows this, which I'm going to try. If you know of any FOSS systems that provide a remote interactive debugger interface, while still being a decent development environment (IDE or text editor, must have ability to open files from remote ssh/sftp servers) I'd love to try them out as well.
Awesome! I was just going to start on that. Will that book be sufficient??
You don't have to use python at all with ipython notebooks: you can just type plain markdown. 
Great job! Can't wait to try it out.
Numpy is black magic as far as I know. I had to get extensive help from /r/learnpython to do basic colour correction. I touched on "vectorizing" things, before I passed out. Woke up in Hawaii. Would recommend.
I'm very excited about this! I remember two specific one-off scripts where I really just needed very simple ways to get pixels and emulate mouse clicks. I expect this to be useful in the future.
its only 1 use case but you may be interested in this article. http://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/ 
Nice! I'm glad you'll get some use out of it. Let me know if anything breaks :) 
I've wanted to take the plunge and move from WordPress onto my own blogging platform for so long, but every time I end up stepping back from the ledge. There are just so many nice things that come with WordPress that -- even though it's a total PITA sometimes -- I have stuck with it. But this post might have given me enough of a nudge to try it myself. Various features I like about WP that I'd like to see in a home-built system: * Post previewing, see what it looks like before it's public * Scheduling posts for the future * Flexible (and permanent) URLs * Categories &amp; tags * Plugin ecosystem (SEO, email subscription, etc) ...huh, having actually sat down and written out that list, it's really not that much stuff. Will take a crack at it this week, thanks OP! :)
This is a module I've recently written. It contains: * a decorator `@printargs`, that prints the arguments and return value of all functions it decorates * a function `prvars()` that prints a function's local variables * a decorator `@typ()` that checks the types of a function's arguments and return value
Some ideas; `@printargs` should wrap its function call in a `try ... except&amp;raise ... else` to prevent breakage. A `try ... finally` could work but wouldn't let you show the errors. `@typ` should rather work like this: @typecheck def square(x: int) -&gt; int: return x * x It's a much cleaner interface, see? `inspect` will give you wanted information on these, search "function annotations" for more info. `pvars` looks especially useful...
&gt; `@printargs` should wrap its function call in a `try ... except&amp;raise ... else` to prevent breakage I'm not quite sure what you're saying here. Do you mean that it should catch the exception, print it and rethrow it? &gt; `def square(x: int) -&gt; int:` Sadly, this only works on Python 3 and I am using 2.7.
I'm happy to employ newer python programmers (http://centerforopenscience.org/jobs). Do you have any dev experience? If you really want to build your resume, develop/contribute to open source projects. I work with a lot of student/interns, and it's my number one recommendation. Luckily everything we create is free, open source, so it's easy via our internships, but you can certainly do it on your own.
I think there is a little bug here: def set_mouse_pos(self, x, y): ''' Moves mouse pointer to given screen coordinates. ''' windll.user32.SetCursorPos(0,0) #should be SetCursorPos(x, y) 
Naw, it's just an Easter Egg. ;-)
&gt;Do you mean that it should catch the exception, print it and rethrow it? You should catch it, clean up (decrease GL_PRINTARGS_DEPTH) and then rethrow. That'll prevent the indentation from breaking. It's trivial to then add printing facilities (`foo(6) raised ValueError`) so you might as well. 
I wasn't really asking for your opinion of my preferences. I wanted to know if there are remote debugging interfaces, and if anyone had experience with them. I have found some. No need to continue this conversation. Please feel free to continue doing things as you would like, and I shall do the same.
http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
Super cool. `type_backwards` seems a bit too silly, since you can just `[::-1]`. Also up in the example you use `push_to_clipboard` and `paste`. In the docs, the former is `add_to_clipboard` and the latter isn't even there. I love how simple and dependency free it is. Thanks for this.
I do not care what it does or how good it is. I will become proficient in this just because it is called pyrobot. Trying this out tomorrow.
Doh! Good catch. Fixed!
Couple of ways. However, if you're working with an excel file, I'd definitely suggest either converting to `csv` and processing in python, or using one of the Excel packages like `xlwt`. It'd be waaaaaayy easier than trying to get the program to recognize which field it's currently in by monitoring the screen (which I embarrassingly tried before I knew csv files existed), and it was a huge pain in the butt). Back on topic, you could start the program by double clicking on an icon, or sending a message to the `run` dialog. You should be able to recreate anyway that you would start the program as a human. 
Glad you like it! The type_backwards thing is probably poorly named. It doesn't just reverse the string, but types it right to left by adding a `left` keystroke after each letter, [so it looks like this.](http://imgur.com/eXJbOWG) But I agree! It's a silly function. I just thought it looked neat. Edit: Also, thanks for pointing out the readme example error. I'll fix that now. 
Check out Project Sikuli, while completely different is in the neighborhood of this awesome and welcomed work! Thank you!
No. You shouldn't use Python 3 with Django if you are just starting out. Moving from version 2 to version 3 is relatively painless and can be done in a weekend when you are ready. Because there are still a bunch of libraries that don't support Python3 and because you are learning I highly recommend against it. Get familiar with Django and some of the django packages first.
Honestly, if you're exclusively looking for jobs which use Python, expect to find trouble finding work. Software engineering involves a wide range of tools; this is like trying to be a builder who only knows how to use a phillips screwdriver.
No doubt you had a lot of fun doing this, but [AutoHotkey](http://www.autohotkey.com/) would fill the gap for the rest of the needs you may experience. I know.. sorry, but it bears mentioning.
Or Sikuki, scriptable by Jython.
this is on main page: "A message board system written in pure python using the web2py framework."
Do you plan on writing tests?
True, but with a standalone script you can write markdown in your favourite editor and use automation in your editor to generate the slides. For example, the script I am working on allows me to write slides in markdown on my ipad or laptop and I can convert on both devices to reveal.js.
Very nice but please mention [autopy](http://www.autopy.org/) too in the related work!
This is how it is in my $work. To get into any dev position requires a 5 year experience [debatable whether this is a good metric or not] and examples of code and work done. However few get into dev positions by that route. Most start in the code load/testing department and after 1 or 2 years move to a dev role and by then they have a good grasp of the whole architecture of our systems.
not in my experience. i write pure python and that's it
Hi please bear with me as i'm very new to Python First of all, what is the proper way to import this module? I tried: from tpb import TPB, Torrent but i get an error 'ImportError: cannot import name Torrent' 
Try this http://www.pythonchallenge.com/ Trust me, it's a boost.
Good question: If you go for a pipeline/stream/coroutine approach, you need to set up a pipeline to test it, so that's a tad more work to start with. In the grand scheme of things, you probably need the equivalent for other approaches if you go for 100% test coverage, so it won't matter anyways. In the past, I even found the pipeline thing useful for testing, because it was easy to insert "listening" co-routines into the pipeline for debugging and testing. YMMW and all that. Disclaimer: I'm the author of above article.
From what I understand, the site is based on this: [https://github.com/jmoswalt/passwordgen](https://github.com/jmoswalt/passwordgen)
If pygame isn't pure python, then pyglet isn't either.
Yeah, you're right. It's just that when it comes to automating Windows, it's often times just the right tool for the job. Yes, you probably CAN do it in Python; it's just not the best way to go sometimes. Examples: I have an AutoHotkey script that allowed me to remap my CapsLock key to Control-W. I usually use this in browser sessions to rapidly close tabs. It also allowed me to map my scroll wheel click to a double-click. Both of those macros work in pretty much all apps except full screen DirectX apps, which are normally games. I wouldn't even know how to do the above in Python and frankly, it's not a portable technique anyway, so why bother?
Which part of Canada? http://www.canadavisa.com/canada-salary-wizard.html
I was thinking about Toronto or Montreal I'm looking at Web Applications Developers and the median it's 73,862 Canadian dollars. Now I just have to investigate how expensive is to live overthere... Thanks
I'm not an expert in data mining by any stretch, but I have been using TextBlob to mine data for a research project and it has been FANTASTIC. Very simple and intuitive to learn. I'm normally a perl guy, but this library (coupled with BeautifulSoup4) made it worth learning python for.
74k seems reasonable. http://taxtips.ca/ is a good site for checking out what your take home salary is going to be. There's lots of living expense calculators online, you might be surprised how costly it is! 
Not sure if you intend to push this out (or if it's just a learning project), but if so, **maximum platform compatibility** (including mobile-friendly and lynx/curl-friendly). There's nothing more infuriating than requiring Windows (or any GUI) to get a key for an SSH terminal, especially at three in the morning when a service is down. Oh, and the copy-to-clipboard feature that PasswordState has is good (shame about the rest of the project).
There's a reason there aren't a lot of Mexican up there.....
In my code editor? [Menlo](http://en.wikipedia.org/wiki/Menlo_\(typeface\)).
&gt;God forbid Python developers grow up and actually commit to an interface. How would subclassing collections.abc or something like zope.interface or pycontracts help when the interface changes between versions? What do you do when the interface changes to accommodate additional features? semver.org suggests a `MAJOR.MINOR.PATCH` version scheme. Bump the "MAJOR version when you make incompatible changes" and the "MINOR version when you add functionality in a backwards-compatible manner". pip-review from pip-tools helps to identify new versions of package dependencies on a regular basis.
http://www.youtube.com/watch?feature=player_detailpage&amp;v=sOQLVm0-8Yg#t=1411 Then later: http://www.youtube.com/watch?feature=player_detailpage&amp;v=sOQLVm0-8Yg#t=2849
[Droid Sans Mono Dotted](http://blog.cosmix.org/2009/01/25/a-dotted-zero-droid-sans-mono/). Though, I just found [this](http://www.slant.co/topics/67/~what-are-the-best-programming-fonts) resource which I'll be looking through later.
If you're considering Toronto, you should check out Waterloo too. There are a lot of tech jobs here, including Google, OpenText, and BlackBerry (although pursuing a job at the latter is not exactly a risk-free career move at the moment). Waterloo is a smaller community than Toronto (about 200,000 people), has a lower cost of living than Toronto, and is only an hour drive away. I personally work at McAfee as a python dev on the north end of Waterloo. 
Maybe a little late, but I'd recommend the standard unittest library combined with the mock library (which is in the standard library in Python 3) and nose to run the tests. Unit testing has definitely improved my python code across the board. 
There are a lot of tools that could aid you in what you're doing. On the configuration management and remote execution you could look at salt and ansible. Or if you want to be more DIY you could use Fabric which is basically just an ssh wrapper. 
With Wing, you can do what you're suggesting :-) (You import a little library on the server, which registers a socket server that your Wing instance would connect to, allowing interactive remote debugging.)
I use the Source Code Pro font from Adobe. Something they got right I think. They put a lot of thought into it and if you research it a bit they even made somewhere a lenghty blogposts how and why they designed the font. TL;DR: Adobe Source Code Pro font https://github.com/adobe/source-code-pro
Terminus!
Totally replaced my previous favourite, Consolas. It is really good. 
fixed6x13. (http://en.wikipedia.org/wiki/Fixed_%28typeface%29) This is the only one. clear, small enough, readable, no AA. problem solved, next.
Inconsolata
I used [camtasia](http://www.techsmith.com/camtasia.html). 
I've been fond of Ubuntu Mono for quite some time now but recently I decided I'd try out some new monospace fonts. I'm really liking Red Hat's Liberation Mono. It's missing a lot of glyphs but it has the lion's share of them. For reference, if you want to know what the latest &amp; greatest monospace fonts look like in a terminal install Gate One: https://github.com/liftoff/GateOne I recently added a whole slew of free fonts to the package and you can switch between them on-the-fly in your open terminals. They'll be ready-to-go the moment you connect to Gate One in your browser.
Barista? :)
**Mensch** http://robey.lag.net/2010/06/21/mensch-font.html **Deja Vu Sans Mono** http://dejavu-fonts.org/wiki/Main_Page **Consolas** 
Envy Code R. [Example](http://www.fontsquirrel.com/widgets/font_image/specimen_alphabet/af58fbdcc839dfe69c8365033c3662b7)
While I don't disagree with you, I believe the *main* issue is that a project that works today may not work tomorrow, even though no changes were made. Informing people about properly defining their dependencies is important, even for projects that you would deem not stable or reputable enough to use.
do not import Torrent. Just do `from tpb import TPB`
I like neep-alt-14 from the xfonts-jmk Debian package, but zevv-peep is also good.
My problem with SCP is that it's *super* wide. Is there a readability advantage to having a font so smushed looking?
I'm liking this 14px one called [Gohu](http://font.gohu.org/). It's just a bitmap type, but I don't really like sub pixel aliased stuff. Nice, crisp pixels for me.
At McAfee I work on an automated testing framework that we use to exercise the McAfee Total Protection product to automate currently-manual tests. It's a Django web interface that uses a bunch of low-level techniques to hook into the software. I don't personally work with "exciting" security stuff. It's still a fun job though. 
Mitch Garnaat wrote both of them.
It simply is a CLI utility, while boto is a library. [Actually it internally uses boto.][1] [1]: https://github.com/aws/aws-cli/blob/1.0.0/setup.py#L10
Envy Code R
careful, "written for human beings" is the trademark of Kenneth Reitz **Edit:** jokes aside, how is it different from [RQ](http://python-rq.org/)?
Meh, Ruby's very similar to Python. Go blow your mind with a functional language like Haskell or Scala, or with a LISP-dialect like Scheme or Clojure. Even learning C would be more educational.
I am personally partial to [cousine](http://www.google.com/fonts/specimen/Cousine), but I switch it up with Ubuntu Mono occasionally too.
Java.
It's not like AHK is any more portable though. Install Python or AHK? Either way you need the software to support it. I still use it though, and for exactly the reasons you do. It's great for setting up global key bindings.
I thought it was in perl
Dejavu mono, Droid mono, Ubuntu mono. Really glad to learn about some of these other options though! 
One thought: put some thought into how you will secure access to the centralized key management system itself. SSH keys are more secure than passwords, because users cannot pick easy-to-guess keys, and usually have to own the key file plus know a password to unlock it. You will want to make sure the centralised system is secure against common security problems, or *all* of the managed servers get compromised. Something like using the open-source version of http://en.wikipedia.org/wiki/Google_Authenticator might be a good idea.
Terminus I wish to use gohu, but it's too small and its author said he has no plans to add bigger sizes, unfortunately.
Careful, Ubuntu was advertised as "Linux for human beings" too. Then they switched to Unity.
it has been so for over a year. They hired the creator and main maintainers.
Any highlights in how this is different from rq? rq: http://python-rq.org/
There are a few gems that I didn't think about before in there, thanks!
A great writeup, but one thing caught my eye: &gt; Shouldn't use type() or instanceof() in conditional --&gt; smelly Where else would you need use it if not in a conditional? It returns a `bool`. ^(^The ^author ^probably ^meant ^`isinstance` ^not ^`instanceof`)
that wasn't the official one. I assume your're talking about the CLI tool made by [Tim Kay](http://timkay.com/aws/).
The only one I would argue against is the Cascade pattern: self.release_water().shutdown().alarm() Explicit is better than implicit. Implicitly returning 'self' from a method and then chaining method calls seems like a hack to me. It only saves two lines of code and removes the explicitness of calling the methods on the actual object. If I read this, without seeing the code, I have *no* idea what "showdown()" is being called on. Other than that, if any of the methods need to return something in the future, it will break the method's contract which breaks backwards compatibility and requires restructuring code.
I have been using this for a while, it really rocks. No Java dependencies, installed within few minutes. 
Meslo
Yeah, e-mail is a necessary evil for now. I hope we'll land on some secure standard before long, but even then you always have to think that even if you're careful, the receiver(s) of the message might not be. The main reason for my reason to self-host my somewhat more important mail is not necessarily NSA-fear, but it is the commercial tracking that Gmail does (and maybe my own ISP too). I'll look into the Roundcube solution. I didn't know such plugins existed for it. Thanks!
I'm using [Anonymous Pro](http://www.marksimonson.com/fonts/view/anonymous-pro)
Do you agree with the Simple enumeration parameter? I.e. using "each" instead of something else? I haven't heard that one before and I have mixed feelings about it. But yeah, fantastic list!
Ubuntu http://font.ubuntu.com/
all day, every day.
No wonder they rewrote it. Id be curious to see the line count drop + efficiency delta numbers.
irb + ruby sdk is still better.. 
Thanks for the replay, yesterday I was looking for information about Waterloo and indeed, it's a good place to live and work. BTW I work at Intel and near to me there is a group of people working at McAfee too. I think this winter I'm going to go to Waterloo and some other places in Canada to see how extreme is the weather overthere :) 
At the moment your statement is kinda fanboyish, can you qualify your belief with examples ( I know both Ruby and Python but I am hard pressed to see how the irb, a developers console for ruby, is better than an official/sponsored toolset for AWS maintained by AWS ).
You cannot retrieve a single torrent. You'll get a list of `Torrent`s after a search. You can then use any of the class attributes from `Torrent` class. For example: from tbp import tpb t = TPB() my_torrents.search("something") for torrent in my_torrents: if torrent.name.find('someotherthing') &gt; -1: do()
I'll try to defend his statement a bit. For, e.g., browsing and esp cleaning up s3, the aws-sdk gem inside irb makes it much easier to search by prefix, sort by last_modified or file size, filter, delete, move, etc. I tend to use s3cmd for bulk upload/download but irb for exploration. Presumably you could do the same thing with boto in a python console though?
Interesting, does the aws gem use a ~/.dotFile for storing credentials or do you have to enter those in irb? 
Wow, lots more Envy Code R than I would have thought!
Hmm, boto has similar logic ( ~/.iniFile, ENV ) given that - boto s3 is something along lines of import boto conn = boto.connect_s3() #Assuming ~/.boto ini credential file bucket = conn.get_bucket(bucket_name) #assuming bucket_name = "bar" \ #and that is a valid bucket name for provided credentials for key in bucket.list(prefix="foo"): print key.name to iterate over all keys in bucket_name that are prefixed with "foo". This is a fairly trivial example so I imagine the aws gem wouldn't be much different. If you got time can you show an example of filtering by last_modified with the gem?
That's actually a great idea! I'll have to look up how to accomplish it. Assuming I can figure it out, I'll definitely add it in there. 
Sure I'm on my phone on the bus right now, but say: require 'aws-sdk' #assuming you've got credentials setup old_gz_objects = AWS::S3.new.buckets['foo'].objects.with_prefix('path/prefix/').find_all {|o| o.last_modified &lt; Date.today &amp;&amp; o.key =~ /\.gz$/ } 
ah yes, I could see this being fairly fun to work with. This is a subjective opinion but I wish Python had code blocks and fluent style class/objects were more popular. With the .find_all( block ) method, can that be done iteratively or is a grab everything kind of deal.
with_prefix returns an [object collection](http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/ObjectCollection.html) which includes [Enumerable](http://ruby-doc.org/core-1.9.3/Enumerable.html) which gives you a whole bunch of methods for traversal/sorting/searching/etc. It works by the class including it defining an "each" method that yields the next element, so AFAIK it shouldn't grab everything in one giant request but should go element by element. However I have had issues (both with S3 and with getting event history with Simple Workflow) where when you have a ton of objects, the time it takes to traverse them all (for, e.g., sorting or filtering) causes your "next page" token to expire, throwing weird intermittent errors. I've dealt with that by explicitly turning the object collection into an array before doing anything on it (so you take a big hit up-front fetching all the objects in your collection but then don't run the risk of timing out when trying to page through them). and yeah, I love ruby's syntax and general conventions, but MRI is straightforwardly horrible. IMO (working for a company that uses ruby for a ton of stuff) it is best served as a bash-replacement - I like to use ruby to drive control flow for distributed python/c/etc processing, but even with something relatively simple like manipulating 10 files with 100M lines each ruby tends to get way too slow to be useful. (we'll actually use ruby to drive awk to handle cases like this) 
Thank you so much for this!
Well, it depends. In my everyday work, I tend to use a generic "item" in such constructs where implicit readability isn't necessary. When it's obvious what you are doing, it tends to reduce the amount of "letters on the screen", and seems easier to swallow when reading. Like: for item in some_simple_iterable: item.something() or something like: map(lambda p: p.x, list_of_points) On the other hand, if I feel it is necessary to emphasize something important in iteration, or I'm iterating over some filtering function result I give long names in underscore notation: for good_student in get_students(avg_gt=9.8): good_student.give_praise() Both ways work fine, or at least I'm used to both.
Right on the spot, couldn't agree more. Also, "baning" isinstance() usage is another thing that bothers me. Why should we not use it?
It's powered by botocore, which is a different library from boto, though they're both under the boto org.
or celery for that matter http://celeryproject.org/
&gt; Why should we not use it? Because in Python you should use duck typing, which is the idea that it's not the identity of a type that matters, it's what you can do with it. If the type given to a function supports all of the operations that your function does to it, why should it matter that you didn't list that type as one of the allowed ones?
Python 3 classes look like old style classes...
I went in to tear this apart¹... It turns out this is actually really well done. Kudos to that. ¹ Not really. I wasn't expecting it to be this thorough, though. --- The things; def __eq__(self, other): if not isinstance(other, self.__class__): return False return (self.author == other.author and self.title == other.title) Shouldn't that be `return NotImplemented`? The same `return NotImplemented` should be on the other comparisons too to prevent some errors. --- hash(self.author) ^ hash(self.other) I might prefer `hash((self.author, self.other))`. --- As others have pointed out, side effecting methods and functions shouldn't return.
&gt; Other than that, if any of the methods need to return something in the future, it will break the method's contract which breaks backwards compatibility and requires restructuring code. Arguably you are then changing the interface anyway by returning a value where originally you wouldn't have, granted no one should be relying on it returning a None value, but if all of a sudden it *does* return a value then maybe they *should* be concerned about what it is returning. But I have to agree with you otherwise.
Is this better than [s3cmd](http://s3tools.org/s3cmd) for simple stuff like backing up folders to S3? you can do this with aws cli: aws s3 sync myfolder s3://mybucket/myfolder and this with s3cmd: s3cmd sync myfolder s3://mybucket/myfolder So they seem pretty similar for this use case. I guess the only real difference is that awscli is official and is fairly guaranteed to be maintained and support new features as they become available? (Although neither of them directly support glacier at the moment)
Exactly. AHK scripts are NOT portable and neither are the scripts one would produce with Python, and since it's easier to get the result in AHK for personal needs, why bother? I would go the distance with Python in a client project using the Win32 bindings, etc. or whatever as needed, but not for simple stuff. Actually I would probably just use .NET first if I needed that. That's just reality.
 hours=int(input("Enter Hours worked:")) payRate=int(raw_input("Enter your hourly wage:")) if hours &lt; 40: hours * payRate = gross print("Gross Pay:",gross else: hours - 40 = over over * (1.5 * payRate) = overPay hours - over = reg reg + overPay = gross print("Gross Pay:", gross) 
Check your parens, you're missing one. Edit: also, all of your assignments are the wrong way around. Also /r/learnpython
Okay, now I'm getting a "can't assign to operator"... on the first line of the if statement
I think it depends on what kind of API it is a part of. For instance, I think it makes sense in data filtering type situations like Django's QuerySet. In that case it is pretty intuitive that filter and order_by would return new QuerySets, while count would not. I do think it works better in C# in .NET since in that case LINQ can be used for both regular enumerable objects and also various sorts of ORMs, so there's a feeling of consistency. In Python there's already the tension between list comprehensions and functions like map and filter without adding a fluent api into the mix. Still, I think for something that is more complicated than a simple list comprehension can handle, it is a really nice way to handle a filter, sort, group, project type of situation.
See edit. 
Finally started to delve into Python and am really making the switch from Java to it. Just finished some practice programs and am ready to do even more in Python, so why not this.
&gt; Shouldn't that be return NotImplemented? Why?
What object precisely? In the menu tools there is an option run python console. Is that what you are looking for?
Hi NoeticIntelligence, try to use Tools-&gt;Run Python Console... 
Just to make sure: You are using tools-&gt;run python console ? I suspect you might be typing in the output window.
This doesn't directly support glacier, any more than S3cmd does - although there are several projects on GitHub that provide cli glacier support.
If you're debugging and you're stopped at a breakpoint, you can open the 'Evaluate expreession' window, which kind of sounds like what you're talking about. It can be pretty annoying having this as a separate window. Alternatively, you can open a console while you're stopped at a breakpoint, but it might not be so obvious that this is even an option. You need to click the 'Console' tab in the bottom/debugger area, then click the 'Show Command Line' button. That should open a console that will allow you to evaluate arbitrary expressions in whatever frame you're stopped at. This [picture](http://imgur.com/OXJNFZW) might help. I'm not totally sure that this is what you're talking about, but hopefully it helps.
Really excited about this. Protobuf was a nice idea and it's good to see it revised and improved in the ways capnproto does.
map, filter, reduce, and other "functional" language features were mainly only implemented to shuttup people requesting them, they aren't "first class" features of the language and if Guido could just ignore his critics for a moment they likely would just be removed entirely, but don't take my word for it. &gt; I ended up hating reduce() because it was almost exclusively used (a) to implement sum(), or (b) to write unreadable code. So we added builtin sum() at the same time we demoted reduce() from a builtin to something in functools (which is a dumping ground for stuff I don't really care about :-). &gt; If I think of functional programming, I mostly think of languages that have incredibly powerful compilers, like Haskell. For such a compiler, the functional paradigm is useful because it opens up a vast array of possible transformations, including parallelization. But Python's compiler has no idea what your code means, and that's useful too. So, mostly I don't think it makes much sense to try to add "functional" primitives to Python, because the reason those primitives work well in functional languages don't apply to Python, and they make the code pretty unreadable for people who aren't used to functional languages (which means most programmers). edit: since on reread my comment is unclear to me. This is in response to the "tension between list comprehensions and [functional primitives]"...
Yes that was very helpful. Thank you so much. It works.
It works :) I should have figured it out. Thanks. 
yes it was. Thank you. 
Firstly, it is only a rule of thumb. It would obviously make sense for a side-effecting method to return some success value, assuming an exception is not warranted. Something like `file.read` should *obviously* return a value. But in Python, side-effecting functions shouldn't normally return `self`. Guido and his wise compatriots long ago decided that it's confusing not to distinguish between `list1.update(list2)` and `list1 + list2` and the other incarnations of the same. You can assume for typical Python code that this is the case. Since `list1.update(list2)` returns `None` it prevents a whole load of bugs where you write `list3 = list1.update(list2)` and forget that `list` is mutated. It works the other way, too: if a method returns something that looks like a new instance you can *assume that it's important*. It is thus primarily confusing to act outside of this usage. Lots of people would prefer you stick to typical Python usage. A final point is that chaining is inherently less duck-type-able than function calls. I wince every time I see usage of `list.sort` when a `sorted` call would have been just as good and much more ducktype-able. (Did you know you can directly call `sorted` on a file, for example?) --- The only citation I could find (although I guarantee you I've seen this mentioned many times on the mailing lists) is [a hasty mention on the official tutorial](http://docs.python.org/3/tutorial/datastructures.html#id1). See also `sorted` vs `list.sort`, `random.shuffle` and all the methods on `list`, `set` and `dict`.
Because if it's not the same class, you don't know whether it's equal. Think how irritating it'd be if `int` returned `False` in that case; `Decimal(1)` couldn't safely equal `int(1)`! `NotImplemented` is a signal that Python should check the other class for what to do, and if neither of them know it returns `False` for you.
Another voice for [RQ](http://python-rq.org/). To me this (retask) already looks too complex for the simple cases and yet not powerful enough to replace something like celery if you really need the complexity / configurability
Minor note I think def polar(class_, r, theta): is supposed to be def polar(cls, r, theta): 
Honestly in my experience this subreddit combined with /r/learnpython have been the best conversational resources I've found, at least in terms of actually getting a discussion going. That said, there are some other options. I'm interpreting your question loosely in that I'm thinking beyond forums, I hope that's ok. * The [Python Newsgroup](https://groups.google.com/forum/#!forum/comp.lang.python) is pretty active. * The [Python IRC channel](http://www.python.org/community/irc/) is another option, good for short conversations. * There's a Django IRC channel, as well. That's all I got. I'd love to hear any that anyone else knows of.
&gt;The [Python Newsgroup](https://groups.google.com/forum/#!forum/comp.lang.python) is pretty active. Noooo!!! You burn us with your Google Groups link. Seriously, they/we *hate* Google Groups. Do them/us a favour and use [the proper interface](https://mail.python.org/mailman/listinfo/python-list). *EDIT:* As I've a downvote, I want to clarify that this isn't irrational hatred; Google Groups actually posts incorrectly and messes things up for them/us on the other side. There's [even a wiki page about it](https://wiki.python.org/moin/GoogleGroupsPython). Although honestly that's not the best place for a newcomer to hang out, I'd expect. It's a great place to lurk, á mon avis, because they occasionally have cool rants about clever stuff. Just remember to ignore Ranting Rick and jmf.
It's never dumb to ask for help. 
You could think of it as a very fast, language-neutral alternative to Pickle. http://kentonv.github.io/capnproto/index.html
There's also [exrex](https://github.com/asciimoo/exrex) if you're into that. Not useful too often but *invaluable* when it is.
Well, not exactly... Pickle is schemaless this is schemaful. Maybe that is being pedantic, but it is one of the major differentiators when choosing a serialization method. That said, this looks mad dope. I especially like that you don't have to compile the schemas like with protobuff and having them import directly into python is fucking mad-scientist level of cool.
Read the pep on the abc module. Shows limits of duck typing. Isinstance should be renamed to something like "supports interface".
No, it's correct. The first argument is the class passed to the method; it just can't be `class` because `class` is a reserved word, so adding an underscore (`class_`) or spelling it differently (`cls` or `klass`) work just the same.
Inconsolata
Cool stuff!
Thanks! Yeah, when I first realized that I could trivially load up a Cap'n-Proto-encoded file from the Python interactive interpreter, it was kind of amazing. (Of course, this is mostly Jason's work, not mine.) And yeah, you're right that needing a schema is pretty different from Pickle (and JSON, for that matter), especially for dynamic languages like Python. Still, in the end it's solving the same problem set.
Duck typing is one of those things that in a perfect world would work out, but doesn't in practice, especially in large systems written in dynamically-typed languages like Python. To quote Alex Payne, former API Lead at Twitter: &gt; As our system has grown, a lot of the logic in our Ruby system sort of replicates a type system, either in our unit tests or as validations on models. I think it may just be a property of large systems in dynamic languages, that eventually you end up rewriting your own type system, and you sort of do it badly. You’re checking for null values all over the place. There’s lots of calls to Ruby’s kind_of? method, which asks, “Is this a kind of User object? Because that’s what we’re expecting. If we don’t get that, this is going to explode.” It is a shame to have to write all that when there is a solution that has existed in the world of programming languages for decades now. (He's talking about Ruby, of course, but much of the same applies to Python.)
I have also seen 'klass' used as well.
I agree with this statement in principal. In practice, bad design decisions made long ago sometimes force the use of isinstance down the road.
&gt; Because in Python you should use duck typing, which is the idea that it's not the identity of a type that matters, it's what you can do with it. The problem here is that the advice is expressed in terms of absolutes. I think it's improper to say, "`isinstance` is a code smell." Well, it's not. There are legitimate uses for it. It would be better to just say what you mean, or at the very least, say something to the tune of "if you're using `isinstance` a lot, then you probably aren't writing idiomatic Python code that takes advantage of duck typing." You can't take duck typing to the extreme. For example, a list and a string are both iterable, but you almost never want to do the same thing with them. Namely, even though a string is iterable, it typically corresponds to a *single thing* in the world of ideas whereas a list corresponds to *any number of things*. They invite different case analyses.
Django [does this](https://docs.djangoproject.com/en/1.5/topics/db/queries/#chaining-filters), but the relevant classes are *immutable*; they return a new instance instead of modifying the existing instance. IMHO in that case this kind of chaining is clear and logical, or at least idiomatic within the Django community.
 map(operator.attrgetter('x'), list_of_points) good_grade = lambda student: numpy.mean(student.grades) &gt;= 9.8 good_students = itertools.ifilter(good_grade, students) map(operator.methodcaller('give_praise'), good_students)
&gt; Smalltalk Best Practice Patterns - Not for Smalltalk: Maybe: "Smalltalk Best Practice Patterns - Not *just* for Smalltalk:..." 
I feel like it should have been named "impsort," because "isort" sounds like some kind of iterator sort. Also, imps are cool.
It advertises as a utility/library. Uses GPL as a license. Ok for a utility, useless for a library. Christ, do people even read the GPL before releasing Python code (libraries!) under that license? Do you know of anyone that can make sense of how to interpret the GPL linking issue in an interpreted language? (if you do, please enlighten me, I'm all ears!)
Now I just need a tool to automatically add useful code comments, then I won't need to refactor/rebuild this pile of legacy code I have recently become the steward of.
Yeah, [others are doing it too](http://www.reddit.com/r/Python/comments/1ljbxj/a_simple_and_ultra_minimalist_way_to_support/). The only thing it's going to do is prevent people from using your software. I don't want the GPL infecting my code, that's for sure. The [answers to this SO question](http://stackoverflow.com/questions/999468/question-on-importing-a-gpled-python-library-in-commercial-code) seem to imply that the GPL applies normally to imported Python modules. If you think this is bad, look at the [license for the psycopg2](https://github.com/psycopg/psycopg2/blob/master/LICENSE) module. It causes brain damage just reading it.
I really want to trial it in a project I'm building out that presently uses protobuf (c++). However in a big corporate environment the requirement for a gcc 4.7 for the bindings and haskell for the generation makes it kind of hard. Pity. Definitely would have given a big performance boost over protobuf. 
this seems to completely abstract away flask with something that values convenience WAY over maintainablility
I do this in Vim: to sort lines M to N, :M,Nsort Or, visual selection, then, :sort
 from third_party import (lib1, lib10, lib11, lib12, lib13, lib14, lib15, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9) That's not actually an improvement, you know. Consider using something like https://pypi.python.org/pypi/natsort
Excellent post.
&gt; Indenting based on the length of something else (instead of, say, a constant 4 chars) always suffers from these kinds of problems. This is, however, how pep8 suggests it should be done. Two methods are deemed acceptable: from third_party import (lib1, lib2, lib3 lib4, lib5, ...) ('hanging indent'), or from third_party import \ lib1, lib2, lib3, \ lib4, lib5, lib6 whether the first one or the second one is nicer is a matter of opinion.
&gt; whether the first one or the second one is nicer is a matter of opinion. Not sure it's all happy-clappy relative tbh. For example, the second one is objectively superior for the reason I mentioned: renaming third_party does not introduce diff noise for every single part of the import. Minimal diffs would tend to result in better/more frequent code review and thus fewer defects.
The "before" has a syntax error the "after" doesn't have (the location of the `__future__` import).
Thanks! For some reason the url got copied several times, and now I don't know how to change it ...
My preferred pattern is this: from third_party import ( lib1, lib2, lib3, lib4, ) Works well with merges, is consistent (doesn't vary with the length of the first line), doesn't require the ugly slashes.
For my needs it does. Uploading to S3 is all you need to put stuff in glacier, since the files will automatically be moved to glacier after a day.
This one is easy so I also suggest you to try this. :1:
Thanks for the suggestion! Updated isort to use natsort!
Thanks for the note, I've changed the licensed from GPL to a much more lenient MIT based license to fix this issue. ~Timothy
Ah ok. Thanks for pointing that out. So I just looked at PEP8, and the suggestion is this: &gt; Always use cls for the first argument to class methods. &gt; &gt; If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus class_ is better than clss. (Perhaps better is to avoid such clashes by using a synonym.) 
[Ahh, the old switchit reddaroo.](http://uberpython.wordpress.com/2012/03/17/ah-the-old-reddit-switch-a-roo-analyzed/)
Hey u ever tried out twython? I found it much easier to use in terms of API than the library you chose. [my post here](http://twigstechtips.blogspot.com.au/2013/09/pythontwitter-posting-tweets-with-images.html?m=1) in case you're wondering
What are some of the use cases for this? 
Doesn't pep8 want only one module per line ?
Is it faster than cPickle ?
Flask is known for being "Pythonic" https://github.com/mitsuhiko/flask
 list(map(list, zip(*matrix))) and how many days do you need to forget what this thing is doing? i had some fun solving project euler tasks with python oneliners and i am sure that understanding such solutions now will take more time, than writing it again in readable form
I think that the best way to learn elegant and smart code is to look around and poke Python Standard Library. Just clone it: hg clone http://hg.python.org/cpython And take a look in ``Lib/`` directory.
My fav too.
python-forum.org
Also, if you're in a situation where you're doing a lot of single method calls on a collection, it might be worth defining a helper method. In the same way that Guido added sum to prevent people using reduce so much, you can create your own higher abstraction. The JS library Underscore has many of these like [pluck](http://underscorejs.org/#pluck) (get a single attribute from each object) and [invoke](http://underscorejs.org/#invoke) (call a method on each object). It is easy to make your own invoke in Python: def invoke(lst, attr_name, *args, **kwargs): for obj in lst: getattr(obj, attr_name)(*args, **kwargs) If you wanted it more like Underscore's where it always returns a value, you could also just do: def invoke(lst, attr_name, *args, **kwargs): return [getattr(obj, attr_name)(*args, **kwargs) for obj in lst] Either way, now you can just do: invoke(heap_o_stuff, 'do_it') No need for the temp variable for those times where it isn't necessary.
No. Don't go there. Really don't. Especially not if you want to see what "elegant" and "smart" code looks like. The majority of that code is horrible and quite a bit wouldn't make it into the stdlib, if someone wanted to add it today.
I really like the coding style of the [RQ project](http://python-rq.org/) &gt; RQ (Redis Queue) is a simple Python library for queueing jobs and processing them in the background with workers. I was poking around trying to understand its internals, and subsequently read the [worker code](https://github.com/nvie/rq/blob/master/rq/worker.py). I was pleasantly surprised to find it was very articulate.
... or ... you could just use a simple editor macro to do this.
Bruce Tate was a big Java booster back in the day, then changed religion and became an adherent of the Church of Ruby. In both incarnations, I found him somewhat irritating. He's grown up, though; Seven Languages is a surprisingly non-sectarian book (though his love of Ruby is still clear).
The first rule of collections.namedtuple is "don't look at the implementation"
For Enumeration, maybe he means changing the internal collection to a different type and the client getting exposed to that. In that case you could also just make employees a @property. I think a better example of abstractions might be a Department that has workers who can be employees or contractors. If usages are frequently filtering on those, then there should be a methods or properties which do the filtering instead of having every client do it themselves. Still, if you have a collection that is pretty well-defined in what it contains and needs additional functionality that isn't covered in just a tuple/list, it wouldn't be too magical I don't think to have your own enumeration. I think the issue is Department feels kind of broad as a term.
[requests](https://github.com/kennethreitz/requests/) as well.
&gt; I am looking for suggestions of elegant code, well written and readable code, and code that makes use of best practices. Suggestions? * http://www.reddit.com/r/IPython/comments/1hkqx4/crash_course_in_python_for_scientists/#cavu9w7 * http://www.reddit.com/r/Python/comments/1irhuc/til_pydoc_p_6060_instant_python_docs_at/#cb7e4mp * http://www.reddit.com/r/compsci/comments/1idf4n/good_places_to_learn_software_architecture/
https://github.com/reddit/reddit
Good point.
There was not a specific reason to use twitter library. I know there are a lot of other libraries out there that are better than this. This one did the trick so I used it. :) Btw does twython support retweeting ?
[oh dear god](http://hg.python.org/cpython/file/603b4d593758/Lib/collections.py#l234)
Pickles are basically unusable for keeping around for any significant amount of time, because they have no schema. JSON is slightly less bad, but only a little. Schemas are awesome, you're sellling capnproto short by comparing it to pickle :)
I find that perusing /r/dailyprogrammer provides a lot of interesting python code that is both well written and readable. 
Reading the code for **youtube-dl** turned me into a web-scraping machine. I picked up many good habits and tricks from following the code carefully. If you have an interest in writing your own download scripts or html parsers I would recommend reading through **youtube-dl**.
oh wow thanks!
Too bad it's not http://github.com/r/reddit
I've read most of the Pyramid source and while it works, is well tested, and well documented, I don't really think its elegant. I mean I personally even use Pyramid but things could have been done easier and cleaner. (Look at all those factories and interfaces that just screams java) Disclaimer: If you're saying "oh well if it could be done better, go fix it" well I can't.
Good news: You don't need Haskell anymore! I got rid of that in v0.2. However, you do still need GCC 4.7 (or Clang 3.2). Yeah, it's unfortunate that some corps lag behind the compiler curve... the longer you let yourself be stuck with an old compiler, the harder it gets to upgrade. Some corps (e.g. Google) have learned their lesson and now insist on always using the latest compiler version.
From what I've seen in the Python world, and this is just my opinion based on my experience, Python is a very good language for "just getting it done". But in its flexibility and introspection it allows you to do things in several different ways, some of them hackish. That combined with dynamic typing sort of results in code that isn't as nice to look at as, say most Haskell libraries that I've seen. In general anyway. I find that the examples of Haskell code I've seen are always dense enough to avoid repetition but not so dense that its impossible to decipher (APL comes to mind). But Haskell is born from this "correctness first" mentality so Its not surprising.
Yes, much faster.
Any time you want to store or transmit structured data, e.g. any time you'd normally use JSON, XML, ASN.1, or Protocol Buffers.
[Yep.](http://www.python.org/dev/peps/pep-0008/#function-and-method-arguments)
just because one language tends to abuse them doesn't mean factories aren't a valid and useful pattern edit: language fail
I briefly read some of the code in here and found a few things that weren't very pythonic. First, they break the 79 character rule a lot, for no good reason, often just with in-line comments (which PEP8 advises you use verrry sparingly). Second, this line: res = [] for l in optionf: res += shlex.split(l, comments=True) Why not just use a generator expression like res = [shlex.split(l, comments=True) for l in optionf] That's the most pythonic way to construct a list. Still, this code's very readable, and well structured. Just needs a little cleaning up.
My personal favourite - Minecraft in 900 lines of python code https://github.com/fogleman/Minecraft
Please don't be that guy! It is CPython not Python. Also the software NASA uses for its space program has a much lower bugrate as a set standard. Last but not least this is a static analysis so false-positives will occur alot. ;) So please choose a better next title. Thanks.
That's actually a list comprehension. A gen-exp uses `(` and `)`.
&gt; Works well with merges, is consistent (doesn't vary with the length of the first line), doesn't require the ugly slashes. Exactly. Not sure why I was downvoted in my parent comment.
Please correct me if I'm wrong, but I always thought list comprehensions were just generator expressions passed to list(). In other words [i for i in range(10)] == list(i for i in range(10))
May as well add my project here, which in my biased opinion is pretty clean Python code: https://github.com/mumrah/kafka-python
The python reddit API wrapper is pretty good, and is also an easy project for people familiar with reddit to understand. https://github.com/praw-dev/praw
If you are about to ask a question, please consider /r/learnpython
Cool article. By the way, you got the name of the CPython core developper wrong. It's not Nick Coughlan, it's Nick Coghlan. Grammar Nazi out :)
[CherryPy](https://bitbucket.org/cherrypy/cherrypy/src) is always my favorite example when it comes to designing a beautiful Pythonic API. The source code is full of nice abstractions as well.
I'd be surprised if the internal details are the same in those two cases, because that seems ripe for some C-level optimizations. The results will be equivalent, though. Also, from a historical standpoint, list comprehensions predate gen-exps.
You're a dipshit. Leave reddit alone.
Stop Writing Classes(speech from Pycon) http://www.youtube.com/watch?v=o9pEzgHorH0
I looked at the Python example and it is based on the Person struct defined in addressbook.capnp. Once you deserialize you access attributes through the automatically generated AddressBook object. If instead you wanted to de-serialize that struct into a AddressBook and Person class you had defined in other code would it still be faster than cPickle ? If it's still faster .. it might be nice to see an example in the python docs where it acts as a full replacement for pickle.
Code fixed with a loop. Thanks!
There's exactly one difference between those two, assuming `list` has been left untouched. The list comprehension will not catch `StopIteration`, the list function will. 
Ahhhhh, thanks for the great reply! That makes way more sense now. 
Holy shit, lay off. Also, I made one with 29 lines, so fuck you :D
This is why we can't have nice things.
First I think it is important to understand what an interface is. And for me this is the presentation layer made available to the user to interact with whatever is holding that interface. * smartphones have a touch screen that you use to interact with the OS and Apps. * google.com is you interface to the google web search database. * reddit is available through reddit.com with a web interface and on the phone through apps. When it comes to code/programming there's API (Application Programming Interface). And an API is therefore the interface made available to access an application programmatically. Because we are talking about code the user in this case is a Programmer(someone that is writing code). And in the case of Python the interface is usually made available as a Python module. * reddit is also available through the Python Reddit API at https://pypi.python.org/pypi/praw/
Very good coding *style*, but I'm not a fan of the internals myself. Everything is done through `os.fork()`: https://github.com/nvie/rq/blob/master/rq/worker.py#L355 For one, if you need a lot of workers there will be a ton of overhead incurred, and two, it doesn't play nice with libraries like `gevent` or `eventlet`.
We're talking about python, not Haskell. This is like going into /r/guns and talking about knives.
Why not make this into an extension?
&gt; I've read most of the Pyramid source and while it works, is well tested, and well documented, I don't really think its elegant. I mean I personally even use Pyramid but things could have been done easier and cleaner. (Look at all those factories and interfaces that just screams java) While interfaces and factories make [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) much simpler, *the only necessary interface for a Pyramid application developer is a callable (a function or a method) that takes a `Request` as the first parameter and returns a `Response`*: * https://en.wikipedia.org/wiki/Header_file * https://en.wikipedia.org/wiki/Interface_(object-oriented_programming) * https://en.wikipedia.org/wiki/Public_interface * https://en.wikipedia.org/wiki/Factory_pattern * https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface https://en.wikipedia.org/wiki/Separation_of_concerns#See_also &gt; Disclaimer: If you're saying "oh well if it could be done better, go fix it" well I can't. * [Source](https://github.com/Pylons/pyramid/tree/master/) ([setup.py](https://github.com/Pylons/pyramid/blob/master/setup.py)) * [Tests](https://github.com/Pylons/pyramid/tree/master/pyramid/tests) ([tox.ini](https://github.com/Pylons/pyramid/blob/master/tox.ini)) ^[*](http://www.reddit.com/r/Python/comments/1drv59/getting_started_with_automated_testing/c9tfxgd) * [Issues](https://github.com/pylons/pyramid/issues) ([new issue](https://github.com/pylons/pyramid/issues/new)) * [Documentation](http://pyramid.readthedocs.org/en/latest/) ([conf.py](https://github.com/Pylons/pyramid/blob/master/docs/conf.py), [PDF](https://media.readthedocs.org/pdf/pyramid/latest/pyramid.pdf), [ePub](https://media.readthedocs.org/epub/pyramid/latest/pyramid.epub))
This is awesome, it's easiest to learn from projects that you can read through completely in one sitting.
Hmm not sure about retweeting. I needed something that was clean for media posts and the twitter library didn't really cut it for me.
What would you have used for a title?
yes
An API is not a middleman, it is at once not a thing and all of a thing. It is a description of the commands that together constitute the interface with which you can manipulate a system, and if it's all you know about the system then it becomes the only definition of what the system is to you.
&gt; where `i` is inside a new scope for certain values of CPython
He never specified his Python version, so input might work depending on what he is using.
I've never been able to find anything I like better than Lucida Console.
A search for [ API explorer ] may be useful. * https://en.wikipedia.org/wiki/Application_programming_interface [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) #Web_APIs * http://www.reddit.com/r/programming/comments/1f9k42/a_comprehensive_guide_for_pragmatic_restful_api/ * http://www.reddit.com/r/Python/comments/1c6866/best_frameworklibraries_for_a_small_restbased/ * http://www.reddit.com/r/Python/comments/1ivpg3/sandman_a_boilerplatefree_python_rest_api/cb8rzzq 
There've been a few issues submitted over the years: https://github.com/nvie/rq/issues/45 https://github.com/nvie/rq/issues/210 I really like `rq`, but I am forced to use Celery due to `rq`'s insistence on forking as the only method of concurrency.
that's cool
does it display the build output ? why is it people dont create simple screencast of their app...
yep! line by line as it is generated, along with the application return code. [here's a picture of it generating a binary of itself](http://i.imgur.com/z6VXtlU.png). there's a few small additions i have in mind (ability to select custom flags being a big one), but i'm more than open to any suggestions too. 
damn, I was wondering when they could allow using customized backend like Postgre LISTEN/NOTIFY and prefork model...
too many, too free.....
**How to install ?** TODO * User access control. Please add the simplest user/pw scheme asap. 
what ?
This seems a bit needlessly pedantic. When people want to talk about the standard Python interpreter, the one you get when you go to python.org, download Python, and run the binary named "python", it is reasonable to call it Python. Similarly, people will talk about Ruby much more than "Matz's Ruby Interpreter".
Well, all values of Python ≥ 3.0.
Hmm doesn't look like it needs anything special. I don't use prettify - Here's how I use Highlight.js - but the process is similar. 1. Include the Google pretty print js in your blog template HTML 2. you can markup code with Google pretty print classes like this ~~~{.prettyprint .lang-js} function helloWorld() { console.log("hello"); } ~~~ 
Nobody for [Profont](http://i.imgur.com/tex0ywo.png)?
While your script is neat and does give fairly more advanced graphs, someone made a pretty cool and easy to use web version of this recently that can graph any show live in your browser. http://graphtv.kevinformatics.com
I think a setup.py is needed so you don't have to 'git clone...' And can just 'pip install gooeypi'
I was looking over the code and it seems this functionality could be put in to a flask extension on which to build applications. As it is, it is not exactly reusable for multiple purposes.
If tens of milliseconds matter then you shouldn't be using python...
Cool!! Will try on my mac when i have time!
If you are interested in knowing the low level details on how event loops work Tornado is a really good read.
I've learned a lot (and still am learning) from reading the tests in the pytest project itself. 
I use py.test (and tox) for all my Python projects: - https://github.com/halst - https://github.com/docopt - https://github.com/GreenSteam But I almost never use mocking, and instead code using Value Object pattern. You can check out more on this style of coding in this talk by Gary Bernhardt: - http://confreaks.com/videos/1314-rubyconf2012-boundaries
check [here](http://showmedo.com/videotutorials/python)
Thanks a lot for taking time to comment, I'll try to improve all that!
I don't have a very consistent use of functions and don't know much about classes, but its probably something I should dig into. Thanks for your feedback, I'll try to make it more pythonesque.
Hi lamby, Thanks for you input you can now change the wrapping mode in isort to a consistent indent format such as "hanging indents" https://github.com/timothycrosley/isort#multi-line-output-modes Thanks! Timothy
Hi littlelowercouger, Thanks for the input! you can now change the wrapping mode in isort to use this exact wrapping mode, and change the order mode to length to achieve this exact output isort -m 3 -ls https://github.com/timothycrosley/isort#ordering-by-import-length Thanks! Timothy
Good suggestion. I was thinking of creating a binary, but will give setup.py a try as well. Does setup.py work for applications as well, I thought they were only for libraries?
A binary (.exe) can work, but the setup.py also gives some good insight onto how the project works, such as a list of dependencies l, the version, etc. There are some good articles on making a good setup.py, but I'm on mobile... Also, if you want to make a .exe, you can use github's 'release' feature to put executables. Good luck!
Which can neatly be solved using the criminally underused `itertools.chain.from_iterable`: res = chain.from_iterable(shlex.split(l, comments=True) for l in optionf) One could even use `shlex.shlex` directly as a stream (`shlex.split` is a thin wrapper around it), though it requires setting `whitespace_split` which can't be done inline. def split(s): lex = shlex.shlex(s, posix=True) lex.whitespace_split = True return lex res = chain.from_iterable(imap(split, optionf))
I find the lack of `with` use weirder: the code is clearly 2.6-only (uses explicit relative imports without `__future__` import) yet around the shlex call is (essentially): optionf = open(filename_bytes) try: # do stuff finally: optionf.close() return res And the number of star imports is worrying.
Sounds good..I will look into both, thanks! 
You will have to explore them yourself. For web scraping thing just look into the extractors located here https://github.com/rg3/youtube-dl/tree/master/youtube_dl/extractor . For all the imports look here (most) https://github.com/rg3/youtube-dl/blob/master/youtube_dl/utils.py and lastly for the glue code look here https://github.com/rg3/youtube-dl/blob/master/youtube_dl/FileDownloader.py , here https://github.com/rg3/youtube-dl/blob/master/youtube_dl/InfoExtractors.py and here https://github.com/rg3/youtube-dl/blob/master/youtube_dl/YoutubeDL.py and here as well https://github.com/rg3/youtube-dl/blob/master/youtube_dl/__init__.py . I hope now you know where to start. Just start from what you want to know. :) 
that's a personal preference. I generally like camel casing. 
Come help us fix it =). The Pyramid devs are open to new ideas and suggestions, so if you feel there is an issue, come help us with it!
Take a look at pyres, maybe it does what you want it to do!
Bottle does the same: https://github.com/defnull/bottle/blob/master/bottle.py#L175 Another advantage is that you can *reset* the cached value by deleting it. 
Hah, no way. That's pretty cool. I do like my line lengths to ascend because it just looks so pretty maybe I should have become a graphic designer balls. 
Do you have any of those benchmarks online? Any that include httplib2?
Technically it is not even necessary to write to `instance.__dict__`, `setattr()` is sufficient. This is because descriptors that only implement `__get__` are "non-data descriptors" and sets/deletes always operate on the instance dictionary as if the descriptor were not there. Also, the instance dictionary is checked first on gets for non-data descriptors which is why this trick works. As soon as `__get__` adds the value to the instance dictionary, it effectively masks itself off and the attribute behaves like a normal attribute until deleted. Descriptors that do implement `__set__` (even if it just throws an error, like `@property`) are "data descriptors" and are always consulted before the instance dictionary for gets, sets, and deletes.
The thing is that it's not always necessary to follow PEP8 so strictly. Even some organisations have their own style guide which has some amendments to PEP8 like khan academy and google to name a few. http://google-styleguide.googlecode.com/svn/trunk/pyguide.html https://sites.google.com/a/khanacademy.org/forge/for-developers/styleguide/python 
This is why assigning a function to an instance variable masks the function defined in the class, by the way. Functions are non-data descriptors whose `__get__` method binds the object that the function was called on to the `self` argument. Also, there's a minor quirk only important from the performance standpoint: the instance dictionary has to be checked _after_ we tried to find the descriptor in the class hierarchy, in case it's a data descriptor.
QProcess or subprocess?
I use tox for all my projects, but usually stick to Twisted's trial (like py.test, both a test runner and a framework). I'd love to hear what people think are the awesome parts of py.test that might convince me to convert existing tests. I've made a personal commitment to use py.test next time I can and see how much it works out :)
the pytest project itself keeps a (very incomplete) list of projects using pytest: http://pytest.org/latest/projects.html#projects Recently, the authors of the pip installer have switched to using py.test and i think they organized their fixtures and code very well: https://github.com/pypa/pip/tree/develop/tests For a more complex setting involving pytest setup for server/client setup and according tests, you may check out my recent pypi server project: https://bitbucket.org/hpk42/devpi/src/f579eb2d5520a86a169ca11129a7bfd20f7944a5/server/test_devpi_server?at=default
I have a desktop menu widget that opens ssh/ftp/browser processes via POpen. I went with that as it offered a lot more flexibility for my needs. The documentation link below has an example of how to use it. http://docs.python.org/2/library/subprocess.html#popen-constructor
I'm not sure. What's the difference between the two?
Nice. Thank you. Do you know how I can make the first GUI inactive? I can do this manually but I guess there is a better option to do so. 
Andale Mono (I usually like dotted 0's) and Menlo
API's what?
Ah. It was my understanding that a fair bit of list comps were implemented directly in C (in CPython).
Pyramid also does have the nearly same implementation: https://github.com/Pylons/pyramid/blob/master/pyramid/decorator.py
according to the article API's are a things websites have so you can access them with code. cause only a website could have such a thing... 
*APIs
The title is a bit misleading. It should be "list of websites that offer a python api" or something like that
No. The problem is not you age, but the topic itself. If you're going to talk about APIs, you need to understand how to use them too. From the [Exfm api page](http://ex.fm/api): `Please do not use our API to download songs. Exfm is for streaming only.` On top of that downloading music is a sketchy territory. From one of your comments: &gt; By using my way you can get each and every song for free! I will teach how you can find out the api url for some services using chrome web inspector which do not officially provide an api. Like justhearit.com If I want to get each and every song I can just fire up a torrent client. A conference is not about tutorials. Don't confuse it with YouTube. And using an undocumented interface to access a site is probably against their TOS. &gt; I am pretty sure that if a 14 year old carries out a talk then this will have a greater impact on the python community. Greater than what? Why would it have any impact at all? Personally I don't care about your (or anyone's) age. If you're confident that you can do it (without having to say "um" between every word) do it. But not this topic.
you are right. Do you have any other suggestion ? any other topic ?
In many of those cases, the website just offer APIs and then there are Python wrappers written around them, sometimes by other people. PRAW would be a good example of that.
Speaking of AWS apis, I would love to see a program that takes the restriction given by your tier, then uses the API to look at your monthly usage and spits out [Google AppEngine like stats](http://i.imgur.com/CEublFZ.png). I'm on the free tier, but while I have a billing alarm set, it's still really confusing and complicated to set alarms for every single type of metric, and there's no way to nicely visualize it all the way you can on AppEngine, to see how much of it you've used. I realize this is most likely because they want to make more money, and I'm not sure if it goes against their rules, but I'm pretty sure it would be easily possible using these APIs and the [specific restrictions](http://aws.amazon.com/free/) to build that.
I like downloading the source files of projects (https://github.com/rg3/youtube-dl/archive/master.zip) and exploring them using my own IDE programs/debuggers. I find it harder to explore a program on the Github website than when it is on my system. Be very careful when running random code on your machine especially when you see web/downloading related imports. I generally start with _ _main_ _.py (or its equivalent if there is none) line 1 and go from there. I find that reading other people's code and checking out their imports is a great way to learn about new modules. 
The thing I like about Python is you can do it your own way if you want. This reminds me a bit of a reply I saw on stackoverflow: &gt; ok, kids, wait 'til you grow up to drink, smoke and access private variables.
This is what I used and works well: class lazyattr(object): def __init__(self, fget): self.fget = fget self.fname = fget.__name__ def __get__(self, obj, objtype): result = self.fget(obj) obj.__dict__[self.fname] = result return result then you basically use it like this: @lazyattr def my_attribute(self): return &lt;an expensive operation to generate it&gt; The value in __dict__ overshadows the function, and will return the computed value without calling the function in the future. You can remove the element from dict to have it recompute again.
Wouldn't almost any site that can output data in XML or JSON have a "Python" API since Python can read these things?
Just found youtube-dl the other day; I agree, it's some high quality stuff. 
I've written a API for Imgur called [PyImgur](https://github.com/Damgaard/PyImgur). It's fully featured and quite useful for getting those cat pics in a nice pythonic manner. It would be awesome if you added it to your list.
subprocess is native python, QProcess is Qt. I've personally used QProcess when doing PyQT/PySide work and it's worked great. 
Interesting, thanks!
Both sites you have linked do not oppose PEP8, they complement it. The khan academy one even says this on top: &gt; We follow the PEP8 style guide for Python. Docstrings follow PEP257. 
tl;dr: Closures close over variables, not values. Also worth pointing out that the second solution isn't exactly a solution. You are converting a zero arg function to a one arg function. Sure, the default argument takes care of stuff but it really isn't equivalent because I can now pass anything and screw stuff up.
In Python 3 any local variable will "fix" the first example: funcs = [] for i in range(4): def f(): j = i print(j) funcs.append(f) for f in funcs: f() 0 1 2 3 
A tuple is like a list, except it's immutable (you can't modify it once it's created). That means it can be used as a key for dicts, among others. Typically, lists also store homogeneous data (for example, a list of names), while tuples store heterogeneous data (say, name, address and age).
I doubt this would be as simple as 'just submit a patch', I have spent years making the multiprocessing pool in Celery work, and even now for the 3.1 release I have fixed yet a good number of rare deadlocks. The pool related code isn't exactly elegant or simple, but you're very likely to learn something from it. Edit: oh, and you're in for a rough ride if you think the answer is to 'just use the multiprocessing module' :)
It's slightly better. In most cases you will never notice any difference. In highly performance-critical or memory-intensive code, it could make a useful difference. But 99% of the time it is irrelevant.
Kind of. Can you have a keyed tuple like an array? (Actually - this leads to another question.. Is keyed arrays a very Python thing to do? I note that doing a foreach ($arr as $key =&gt; $value) isn't easily done.) Also - whats the deal with "lists" in python. Is that an array??!
That looks very useful, thanks.
I understand it's a complex issue, but the project has been around for a long time. Plus the codebase is a lot smaller and simpler than Celery's, so it probably wouldn't require quite as much work.
Maybe you can propose a talk on web scraping? Looks like you have actually done it to gather those songs or whatever. Now, think about what you can add on the topic at hand, what value can you add with the experience you gathered doing those projects? And tell a nice story :-) Age shouldn't matter if you master the topic.
The size/age of the project or how simple the rest of the code is irrelevant here. This isn't about how hard it was to implement this for Celery, it's about how hard it is to implement for anything similar in Python.
There are no arrays in python. PHP's array is a combination of python's list and dict. Do you want an integer indexed 'array', use a list. Do you want an array indexed by arbitrary objects, use a dict. I linked to two tutorials in my post above. I would recommend looking those over.
You can essentially think of Python lists as arrays. In C and C++, arrays must contain values of the same type though; Python lists may contain values of any type, but traditionally will often contain just values of one type.
You should get into the habit of whenever you write something like this: answer = input('Am I awesome? ') #raw_input in &lt; 3 if answer.lower() in ('yes', 'si', y', 'ye', 'yeah', 'sure', 'why not?', 'da'): print("Cool! I think you're awesome too!") else: print("Fine, jerk!") (the `in` part) you should use a tuple, because it will be faster (slightly and probably irrelevantly so, but that's no reason to use [] instead)
Very nice. I have updated the article (and http://www.pythonapi.com) Thanks!
this i dare say is going to sound totally dumb but thanks for explaining there is no arrays. I assumed that Python just used the word for list to mean an array.. Many thanks
You have access to all of the data and functionality of these sites. So if you're using the Reddit API, you can read comments, post comments, upvote, downvote, etc. - via your Python code.
That talk was super interesting.
Wouldn't you want to use a set() if you care about speed? (It's also nice semantically) I suppose there's probably some reasonably high number of elements a set would have to contain to beat out a sequential search speed wise though. EDIT: Also if you want your elements to be specified literally inline, set() will have to do a non-trivial initialization just to be used, so your specific example is probably faster than just substituting set().
PyCharm. Love it.
Big difference between reading and interacting. 
From Python 3.2, there's an optimisation that makes it fast to do a test with an inline set like this: if answer.lower() in {'yes', 'si', y'}: (the curly brackets without colons are a set literal). [Details here](http://docs.python.org/3/whatsnew/3.2.html#optimizations).
It sounds like your question has been answered, but I would suggest checking out this subreddit if you have any further to ask: /r/learnpython Good luck!
 funcs = [] for i in range(4): def f(): j = i print(j) funcs.append(f) for f in funcs: f() #&gt;&gt;&gt; 3 #&gt;&gt;&gt; 3 #&gt;&gt;&gt; 3 #&gt;&gt;&gt; 3 :/
will have a look cheers, never used anything more advanced than gedit for python yet.
My favorite way of writing def make_f(i): def f(): print(i) return f funcs = [] for i in range(4): funcs.append(make_f(i)) for f in funcs: f() #&gt;&gt;&gt; 0 #&gt;&gt;&gt; 1 #&gt;&gt;&gt; 2 #&gt;&gt;&gt; 3 is: from functools import partial def f(i): print(i) funcs = [] for i in range(4): funcs.append(partial(f, i)) for f in funcs: f() #&gt;&gt;&gt; 0 #&gt;&gt;&gt; 1 #&gt;&gt;&gt; 2 #&gt;&gt;&gt; 3 Note that in this case you can just do `funcs.append(partial(print, i))`, too.
[Jing](http://www.techsmith.com/jing.html) about as easy as it gets. Free hosting too. 
IDEs? Does it have the same definition with IDE? Because I failed to find the Editor. Only 2 projects (coming soon to 3) which run independently (not integrated). 
Integrationless Development Elements. At least that's what I'm pretending it means.
I wish Craigslist had an API.
Its is really good, and if you also do PHP you can use PhpStorm, or Webstorm if you want an IDE for HTML+CSS+JS (PhpStorm is WebStorm + PHP support). I just love to be able to use basically the same IDE for both Python and PHP
It really isn't a lambda issue. It's a scoping issue. Can you post your code somewhere so we can see it?
With the full blow version of IntelliJ IDEA you can get the html/javascript, php, and python plug-ins that WebStorm, phpStorm, and pyCharm are based on. It's pricier, but might be cheaper overall compared to three licenses. 
It can also highlight pep 8 errors as well which has helped me a lot. Also REPL so you can run snippets of code. 
If you don't want to have any dependencies (other than Python) needing to be installed, you'll want to include the python libraries directly in the github repo, and make sure the libraries are all pure Python (no C modules or other binaries). In the script that starts the app, you'll then want to add the directory containing the bundled libraries to sys.path
An example of a Django project where we do this: https://github.com/learningequality/ka-lite/ (See manage.py for an example of adding to sys.path)
That's not true. Tuples have their own dedicated fast-path arena memory allocator in CPython, which lists do not.
To follow up on this. Not only do editors like sublime,emacs,vim, and others give you more python features but they give you more powerful generic text manipulation tools. Things like keyboard macros, more intelligent copy paste buffers, and vastly increased capabilities to rearrange text quickly. Granted most of these features are not needed if you wrote good code in the first place. But when one day you need to massively re-factor some terrible code they are essential.
Are these all diff code in each lambda? So your problem would be that all buttons basically have the SAME lambda code. If so, you may want to store each lambda in a list that lives outside the scope of the loop so they aren't overwritten each time the loop executes? Its hackish and not a final solution but it may help you debug the problem. If the buttons are still all the same lambda but your list of lambdas are all still unique, you learn that its not the lambda but how you are assigning them to the buttons thats the problem. I agree with /u/mackstann that you are probably not dealing with scope correctly.
One tip right off the bat is that when you are dealing with filepaths, use os.path.join() to handle joining filenames and directories with the correct slash (/ on Mac &amp; Linux, \ on Windows).
Thanks! 
Windows automatically converts path's that use / so you should just always use / when creating paths. 
Yes, but I did not get the connection Value Objects &lt;-&gt; Testing at all. How do they relate?
Bots
You're depending on a convenience function that might not always be there. Don't.
Hi there saghul. Thanx for the suggestion. I didn't think about that :) 
Pycharm is great if i had a good laptop AND if i could afford to pay for pycharm AND if i wanted to cripple my pyhton skills. vim is free, runs on anything, and Armin ronoacher uses it. thats good enough for me!
How does it cripple your Python skills?
Really? For me it was urllib2 &lt; requests &lt; pycurl.
I have a great laptop; I can afford to pay for Pycharm; and I can spell. Me, I like good tools. They're better than bad tools.
For windows, I'm fairly sure that's guaranteed by the spec, but your general point is correct
yeah i'd love to give it a try, will do! I try not to get too reliant because a lot of the time I'm forced to do it in vi.
This is like saying you shouldn't use power tools because it removes understanding of how to hold a manual tool it's replacing. Nonsensical in an environment where if the electricity runs out, you can't do anything anyway.
Your question seems a little contrived and misleading, I don't think there is such a thing as knowing 20% of a language to be functional with 80% of it. That said, list/dictionary/set comprehensions are very useful, and I suggest just reading pythons [built-in functions](http://docs.python.org/2/library/functions.html) and experimenting with what's there. I myself find iterable based functions such as map, filter, zip and any/all to be some of the most useful, and a good understanding of the major standard libraries is nearly essential.
Hi Kamikai, Thanks for your answer. I know there is no such thing as 20% and 80% of language. Programming skill measurement is very relative. I just wanted to see which topics experts find 'must knows' in python. It is just started about journey. And your list seems to be very good.
Thanks everybody for the responses. I understand. I ask this here because you touched the subject: what about Python itself? I mean, how do I call it from my program even if the user has never installed it? Because I remember when I downloaded Python I had to specifically choose a Windows distribution
And how do you do that? Are they just normal plugins? Also, PhpStorm is god-like. I swear. I don't know if any of you guys program in PHP on the side but that IDE is fucking amazing. Are you sure I can replicate PhpStorm in IntelliJ IDEA with just a plugin?
See the comment by /u/randuser .
Yep I did, I thought that maybe it was possible to do it without making binary files. Maybe including Python itself in the project
Indeed, don't try to make the source the package.
Beeware thes ides of march. Its a play on words.
Calculators can do a lot of work for you, as long as you understand what they are doing and what problem you're actually trying to solve. It's also possible to check their output yourself if you really want to make sure everything is working [under the hood.] Shoes abstract away most of the experience of walking down the sidewalk; you feel almost nothing, stepping on pebbles or walking across glass. [Shoes are a crutch that's hindering our evolution. *Real walkers* go barefoot!] All you need to build a kernel is [ed](https://www.gnu.org/software/ed/manual/ed_manual.html) but vi (not vim) is a good crutch for people who are new to the game. *Not that it's bad to need these sorts of crutches; most of us were noobs at some point.*
This is guaranteed by POSIX, so it's not going to disappear any time soon, but there are other operating systems that use more esoteric separators, so os.path.join() is superior anyway.
Opening and closing connections a thousand times a day (or a thousand times an hour) is no big deal for MySQL.
http://docs.sqlalchemy.org/en/latest/core/pooling.html
TIL, and I was a MSDOS user from version 2.11 to 6.something. But I quickly Googled this to confirm it, and whild I found [this post on superuser](http://superuser.com/a/176395) that confirms MSDOS always supported forward slashes (backward slashes were also introduced in MSDOS 2.0), there are also mentions of a number of cases where the automatic conversion do not happen, so it still sounds like something we should not rely on.
IDK why you're being downvoted, this is a pretty good question. APIs allow you to connect to a server, GET data, and build your own application around it. Someone already used the Reddit API example, another one would be IMDB. You could write some code to get a list of movies made between 1950-1990 that are rated 5 stars or higher. You could even make a website to search fill in a field and change those parameters to say 1990-2000 and only movies with 9 star ratings a higher, so it can give other people a way to search for movies. This doesn't even have to be a website, you can write a command line program to search for something like this as well, you could create a tool lets call it imdbsearch imdbsearch --year 1990-2000 --rating 9 I found this codecademy course pretty easy to follow http://www.codecademy.com/tracks/nhtsa
If you have any external dependencies, make a requirements.txt file listing them using pip's freeze command. [Example](https://github.com/blha303/b3SRLNotify/blob/master/requirements.txt). Then people can clone your repository, make a virtualenv if they want to, and use `pip install -r requirements.txt` to download everything they need.
So I can see that considering migrating to an ORM or using connection polling are both options but it also seems that leaving it as it is is fine too. Which leads me to ask if the multi-threading nature of Waitress is going to cause me problems with increasing volume. The code is in a module that's imported. Is this thread safe?
Being Windows doesn't stop Microsoft from implementing the POSIX spec as it desires. We can argue that it is not fully POSIX-compliant, but neither is any Linux distribution I know of (Linux distributions tend to follow the LSB instead, which is mostly a superset, but not totally), and nor are any of the modern BSDs. Calling this a "convenience function" is simply not true. Every version of Windows (yes, every) has accepted a forward slash as a path separator for POSIX conformance. So has every version of MS-DOS that supported the notion of path separators (prior to DOS 2.0, there were no subdirectories, only file control blocks).
&gt;Are you sure I can replicate PhpStorm in IntelliJ IDEA with just a plugin? Yep, and also Ruby. The IntelliJ program is pretty powerful and so are it's plugins. I'd recommend extending the CSS autocompleter though, it doesn't have things like webkit-gradient and highlights them as "unidentified property" or some such.
I prefer to use vim for almost all coding jobs, but you sound like an asshole.
what you can do is chuck the command inside an exec() function (not the greatest i know) import maya.cmds as mc #maya ui code goes here for i in ['a','b','c']: exec( "mc.menuItem( label='Print %s', c=lambda x: myCommand('%s') )" % (i,i)) I also think this may work (I don't have maya around to test: mc.menuItem( label='Print %s' % i, c=lambda x=i: myCommand(x) ) 
Yes! I made a simple little app that I shared with some friends. Never try to get the end user to install something extra to run your app.
don't use any native libraries .dll or .so, nor any native API's without providing generic version fallbacks, but the biggest cause of problems is usually not using the correct filepath syntax. Python works with Unix style paths on all platforms so never use Windows C:\\ style paths, use / always.
Thank you for the detailed response, I didnt realize APIs allowed you to interact with a broad scope of data. I was under the impression that it was much narrower, ie only data from your personal reddit account. Just to make sure I understand, hypothetically, is it possible to write a python app that collects the top 10 most tweeted words per day (say, length 4 or greater). 
Twitter gives you limits at how many request you can make a day. If that limit was high enough, it could be theoretically possible. You need a really large database and process a lot of data, but yes, it could be possible. More on their limits: https://dev.twitter.com/docs/rate-limiting/1.1 There are also other sorts of API types, the one that most people use is RESTful API there is also SOAP. 
You're not asking /r/python, you're asking stackoverflow, and then directing us to it. /r/python is for news, if you want help, try /r/learnpython.
the many millions of manhours put in to python and its IDEs and this one were worth it just for title alone
I usually import it as matlab: from mlab.releases import latest_release as matlab But yes, that was a badly chosen name for the library...
See how cookiecutter does it: https://github.com/audreyr/cookiecutter
The other benefit of os.path.join() is that it will handle any redundant slashes. Compare: 'foo/' + '/' + 'bar' ==&gt; 'foo//bar' and os.path.join('foo/', 'bar') ==&gt; 'foo/bar' This might be important for displaying text in a UI to a human being. But in general it's better to make use of the standard library than writing up a quick replacement. The standard library folks have had more time than us to consider all the edge cases.
&gt; use os.path.join() to handle joining filenames and directories with the correct slash And if you just want to know which slash is the correct one just use `os.sep`.
I'm a bit confused. &gt; YOU'RE INVITED TO THE SECOND ANNUAL PYCON CANADA AUGUST 9TH - 13TH IN TORONTO GETTING US WARMED UP FOR THE FIRST PYCON US OUTSIDE OF THE US — MONTRÉAL IN 2014 AND 2015! Toronto is outside the US though...? Am I missing something? I'm super excited though to have Pycon in my city. Can't wait!
Pycon Canada and Pycon are different conferences.
Hi there danny. thanx for replying. Can I contact you through email ? or more preferably facebook ? I would like some help as this is my first pycon. I have decided to do a talk on web scraping as I have a considerable experience with it. I will be waiting for your reply
LOTS
Yeah, PhpStorm is really IDEA with the PHP plugin (http://plugins.jetbrains.com/plugin/6610?pr=idea) and some slightly nicer PHP specific menus and stuff, but all of the functionality is in that plugin. However, you have to have the IntelliJ IDEA Ultimate Edition to use the plugins. 
Do *not* use exec here. Please.
http://www.reddit.com/r/Python/comments/1lv0wr/gotcha_python_scoping_and_closures/
Ultimate being the version or licensed? I have the corporate license with the support package at work, so it's got all the bells and whistles. Might only be able to use it another few weeks though, they're taking away our internet. :/ Army network - the open to the web network doesn't allow us to install anything on the computer, but the "install anything you want" network only allows a handful of domains, it blocks the rest. If you want to install a program, you have to download it on the open network, copy it on a disk (USB disks are not allowed) and transfer it over. Its a huge pain to do web development in such an environment.
Anyone else having problems with getting Bugjar to run? Pip installs it fine but it's giving me errors related to idlelib. 
Thanks! I actually figured it out after posting last night. Basically I made a separate function with the lambdas (for making UI buttons in mel) and then ran that in the loop and it worked, even though i didn't think it would.
I'm not denying that you shouldn't use it if it's going to be a public tool, but it does work.
Sweet! That's awesome.
`lambda x=x: use(x)` vs `lambda x: use(x)`
~~I didn't create a python package yet, but it is planed. You can install now just copying in your python library path, or just creating a formcreator.pth in your python library path just with the path to where you cloned the formcreator repository.~~ Just use pip install formcreator or clone the github repository and use python setup.py install. After that just create your forms and run it with python your_form.py. And about the user/pw, it is implemented now a simple authentication using sqlalchemy, just pass not_public=True to your MainApp. 
It's a good point and I'm planing to do it. But it's my first Flask program and I'm just learning its architecture now. 
This was exactly the idea, my primary focus is to give programmers that aren't web developers a simple way to create web interfaces. If you are a web developer you probably will prefer to write your own code for your forms and application workflow.
I'd rather use these. http://hg.python.org/cpython/file/cb8dabc113b8/Lib/functools.py#l225 docs: http://docs.python.org/3.4/library/functools.html#functools.lru_cache https://github.com/repoze/repoze.lru/blob/master/repoze/lru/__init__.py
Is PyCon going to have to be two weeks long this time - one week in English, the second week all over again in French?
&gt; wrote isort because in an organization I used to work in the manager came in one day and decided all code must have alphabetically sorted imports. The code base was huge - and he meant for us to *do it by hand.* ummm M-x sort-lines and go home early, but wait a couple of days to check it in so the boss thinks you really did spend a lot of time accomodating such a stupid wish. 
despicable, at some point a real programmer will suffer with maintaining that 
It might be better to start with a lightning talk. These are generally a shorter format, easier to get accepted, easier to do, and generally used for 'look at this thing I did' type talks which it looks like you want to do.
The idea is: if you program with Value Objects you don't need mocks—you can use the objects themselves. That makes tests simpler (no mocks) and more robust (mocks can't be out of sync).
You mean "Rubik's cube" yes?
Now we can use this program to build machines that will solve the rubik's cube automatically... you know...so you don't have to break it and put it back each time.
This is specially good because it's easy to make small changes and see the results immediately. There are some "advanced" things going on, but it's easy to understand it in small bits.
Very good explanations and very useful for understand the logic of rubik's cube. Thanks.
I've actually done something similar to this - I still mutate the original object, but I actually return it.maybe not as clean as the speaker's point, though
Ahem. * https://dev.mysql.com/doc/connector-python/en/connector-python.html * http://www.sqlalchemy.org/features.html * http://www.python.org/dev/peps/pep-0249/#id15 Learn to google.
Learn to read correctly a post. It's about Python 3. I'm just sharing a solution to fix a PyMySQL bug. It's not about "which module is the best".
I always thought the official way you solve a rubik's cube is you take the stickers off.
I just missed posting on my cakeday :( This is a simple webapp written in Python using: Bottle, Waitress, and Pygments. On the client-side are jQuery, Bootstrap, and webfont_loader. This took just a few hours to put together, mostly just to play with some libraries. I have a few other features in mind, such as a download link for fonts and styles. Source is available here: https://github.com/dhagrow/fontview
[Check this out.](https://www.youtube.com/watch?v=_d0LfkIut2M) :)
Everyone says this, but I have never understood it. Don't the stickers get less sticky if you do that, and don't you have 48 instead of 20 things to move? (the center facelets can stay put in either case)
I prefer WingIDE - pure python! Also PyCharm is the best IDE, I think. But PyCharm has one disadvantage - it has been written on Java. 
Thanx for replying. I have finally settled on a talk on web scraping.
Okay guys, this is a Python community, not the community of some other languages I can think of. We value being polite, not snarky, when disagreeing. Gaetanm, if you read through the first link, it is a better connector than the one you are trying, and it supports both 2.x and 3.x Python. You can get it here: http://dev.mysql.com/downloads/connector/python/
I'm ~~reasonably~~ not that intelligent but this blows my mind. Too much math. Kudos sir.
Ya, it is way more effort to take the stickers off than to just take it apart and put it back to normal... Or just solve it normally.
to solve a rubik's cube from scratch you must first create the universe
why the enclosing "list()" ?
why is it people don't fucking test their code snippets before posting ????
&gt; Also, there's a minor quirk only important from the performance standpoint: the instance dictionary has to be checked after we tried to find the descriptor in the class hierarchy, in case it's a data descriptor. If that is true, why is it that instance attribute lookup is slightly faster than class attribute lookup? (Python 3.3) [marc@nava ~]$ python3 -mtimeit -r100 -s 'class C: clsattr=1' -s 'c=C();c.objattr=1' 'c.clsattr' 10000000 loops, best of 100: 0.0583 usec per loop [marc@nava ~]$ python3 -mtimeit -r100 -s 'class C: clsattr=1' -s 'c=C();c.objattr=1' 'c.objattr' 10000000 loops, best of 100: 0.0572 usec per loop 
It isn't one of Google's web fonts. If I can't get it from another font provider, I may host it myself.
A similar site, but for setting up vim themes: http://bytefluent.com/vivify/
Python 3's `map` returns a generator.
Yeah, it's the same for Python2 (even more pronounced for old-style classes, though those are not very relevant). I'd guess that's because if the attribute was not found on the class, then `__get__` doesn't have to be looked up on it. You can look at the source here: http://hg.python.org/cpython/file/6ecdf5de6252/Objects/object.c#l1459
Some fonts maybe easier to read for you personally, you may find you mix up certain characters more than others e.g. I and l where as the person who picked the IDE font may not have that problem. Also it could be that your IDE uses a system default, you may decide you want to select a font and use it across multiple computers which maybe multiple platforms.
It mostly comes down to personal preference, the same way some people like to change their wallpapers and modify their computer's appearance. (To some it's also about legibility; some fonts are more legible/easier on the eyes than others.)
I use [mutagen](http://code.google.com/p/mutagen) for when i need to modify audio tags. Unfortunately my own code doesn't read/write song ratings and i don't see an example of how to do it on the mutagen page. see [wikipedia/ID3](http://en.wikipedia.org/wiki/ID3) under the section ***"ID3v2 Rating tag issue"***. It looks like ratings have not been standardized in any way. You could write a value in the range of 0..255 into the POPM field.
Don't worry, you can't have "rubik's" as part of an identifier in Python anyway.
It didn't work.
I use the Anaconda distribution of python and am trying to install an unsupported package 'scitools.' I tried pip install but got the error as seen in the picture below. I have searched through my comp for hours to troubleshoot with no success as to why I keep getting an error. Any clue what I am doing wrong?
Could you add Liberation Mono too? It isn't one of Google's fonts either.
Got very excited about this for a few. My boyfriend's ancient iPod nano has been stuck with the same music for like 6 years. Didn't read the full repo info. regarding iPod version. Still, glad to know the capability exists!
Others have mentioned readability, but my personal reason is consistency across platforms and OSs. At work on Linux (old SUSE dist) I use Kate, at home on my windows box I use Notepad++, and on my OSX laptop (both at work and home), I use TextWrangler. I've more or less matched the color theming across all 3 (what a pain in the ass that was, especially Notepad++), and I've matched the font to Deja Vu Sans Mono across Linux and PC, but on my Mac I can't seem to ditch losing Menlo. Now my brain is just in python mode period, and the only thing I need to worry about is the looser styling I use at home and the more rigid styling I use at work (as an example, at work closing brackets after a long list should be on the indent level of the opening bracket, at home I find that clutters and use the closing bracket matching the list contents).
This would make a lot more sense if it was installed as a git subcommand. 
I'm completely swamped with work. However, let me see what I can do about finding good groups/resources for you to bounce your idea off of. 
Just curious: why Menlo over Monaco? When I started using osx at work I fell in love with Monaco, even though it looks shitty on Ubuntu. 
whoooaaa duuude sereiously though, very cool, i'm gonna play around with this :)
You can create custom git commands by creating an executable file on the path named git-&lt;command&gt;: $ cat | sudo tee /usr/local/bin/git-ignore &lt;&lt;END #!/bin/sh exec gig \$@ END $ sudo chmod a+x /usr/local/bin/git-ignore $ git ignore Usage: gig list gig &lt;language&gt; ... [--append --force --verbose] gig Python Ruby Clojure ... But custom commands are funky if you call them with flags. You have to terminate the option list to git with `--`: $ git ignore -- --verbose ...
Are there any good alternatives to eyed3 that work on Python 3?
Why would you test types? That seems silly. Just ensure that the behavior is correct, not that the types involved are exactly what you expected. If it quacks like a duck and all...
Screenshot plz
Is /media/ipod-backup the mount point when an iPod is connected?
On windows, you have to do python -m pydoc -p 6060
I thought that a(rgs) is print args of the current function. The lecture says: a Print the local variables
here: * https://github.com/scipy-lectures/scipy-lecture-notes/blob/master/advanced/debugging/index.rst#debugger-commands-and-interaction * https://github.com/scipy-lectures/scipy-lecture-notes/blame/master/advanced/debugging/index.rst#L504 ? Good call! * http://docs.python.org/2/library/pdb.html#debugger-commands * http://pymotw.com/2/pdb/
http://imgur.com/a/Dg07m
I don't know. I'll stay on python 2.7 as long as it's the default runtime on my machine.
It's only tested with my iPod touch 4 - I don't have anything else. If you can mount the ipod with ifuse (see readme) then there might be a chance.
I've tried several tagging libs including mutagen IIRC. Can't remember why I settled for eyeD3. I'm aware of the POPM field and have tried everything I could come up with but it always seemed that this field wouldn't be written at all :(
There's a save option and a saved tab in your user profile.
This is a start http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html 
I totally agree with you. ;) However, at that moment (a few months ago) PyMySQL was the most recommended lib (according to some Stack Overflow guys) and I didn't really search an alternative. It's still a good thing to try to fix a bug, mostly when we have the time for (mainly for a student like me).
This is very nice. I would suggest doing a pyqt version as well. Thanks!
Pretty cool idea! Can you please tell us a bit about your roadmap for this sweet project? :)
I tried, but I don't think the early ones used SQLite. There's not even a file extension in the database file, and the `file` command just lists it as "data".
Good stuff, but I would use virtualenvwrapper
Can anyone explain me what a bootstrap does exactly?
Thanks, still being a beginner this is helpful to me. I like how python scripts simpyl use makefiles rather than fancy build tools. There's really nothing wrong with a makefile.
&gt; The pictures you see are totally, like, pictures of peace spreading like a stain of love through your soul, man. They permeate and neutralize all evil, and balance your chi to allow total inner harmony, bro. Pretty cool man, wish I had it for my acid trip on the weekend haha. Also can't believe I didn't think to try ALT+F4 to exit it, I ended up changing TTYs and killing the process. Ah well!
Essentially, the author has provided a specific set of stuff he uses on all his python projects. For example a makefiel and setup.py. It'S like a project template in an IDE. You can fork it and modify to your own needs or just use it out of the box.
This might make a good addition to Audrey Roy's [cookiecutter](https://github.com/audreyr/cookiecutter) project. cookiecutter is a CLI utility that creates projects from templates (using Jinja). Converting your template to a cookiecutter template would allow you to transclude your project and personal info into the bootstrapped project. As an example, see Audrey's [cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) template. I've been using cookiecutter for many of my new projects, and it is fantastic.
Totally. It just works out of the box and that's why I love using them. Not to forget a makefile.bat generated, that works on Windows too ! :)
Will look into it and see if I can modify the code to use virtualenvwrapper . Thank you for your suggestion :)
Yes, cookiecutter is definitely fantastic. I already thanked Audrey earlier for the project. Got to learn some good tips just skimming through the repo as well. Thank you for the template idea ! :)
Also, you should look into making a yeoman.io generator. Yeoman, if you don't know, is an awesome CLI tool that with no configuration simply creates a bare bones webpage template, but there are many community plugins as well that extend its functionality.
i don't understand why you need to clone a template from github in order to use cookiecutter and get prompted for answers defined in the template. cookiecutter is a nice idea but that part seems like unnecessary coupling to a site that tends to be down at the most inconvenient times. http://cookiecutter.readthedocs.org/en/latest/usage.html#works-directly-with-git-repos-too
we know what cross platform means :)
Took me a while to figure out this had nothing to do [Twitter Bootstrap](http://getbootstrap.com/).
Now I'm even more confused. What was marijuana have to do with trees?
maybe the guys over in /r/marijuanaenthusiasts have a clue
I've checked out yeoman in the past, before they had launched. Looks like I need to go back and see what I can do with yeoman. Thanks for your suggestions :)
Am planning on writing a blog post explaining the purpose of various files and tools. I'll post a link, once I'm done. 
Ha ha, no worries. Nowadays, that's the first thing that comes into people's mind, when they hear the word "bootstrap" :)
that would be awesome. thanks
This looks overkill for python, what about shell? https://github.com/georgeyacoub/ignore
A question from the lazy, is it possible to make use of bootstrapy on Windows too?
Hopefully around the time Python 4 comes out, people will start switching to 3. 
There are a number of things wrong with a Makefile, which is why we have second- and third-gen build tools. Python *finally* has its own in [invoke](https://github.com/pyinvoke/invoke), which I'm starting to use on all my Python projects.
I love writing makefiles!
Guys is it just me or someone else also uses Sublime Text ?
You really read my submission ? or have you just said that based on the topic I have chosen ?
There is oct2py for those of us with Octave, both were based on the original mlabwrap.
Waiting for all the new async methods
no he shouldn't .. people should realize that not every word was invented in the last few years. Bootstrapping has been around in computer terms for decades, and in regular terms probably for centuries. It does your brain good to have to work once in a while
I serve them with apache, on the same machine that's running squid.. Here is the redirector: def detect_youtube_and_modify(line): # data = line.split(' ') old_url = data[0] new_url = '\n' if ('youtube' in old_url and 'videoplayback' in old_url): new_url = 'http://192.168.1.4:8081/video.mp4' + new_url return new_url This is the player config in html: &gt; ytplayer.config = {"url_v9as2": "http:\/\/s.ytimg.com\/yts\/swfbin\/cps-vflXEEle3.swf", "args": (...) "url_encoded_fmt_stream_map": "url=http%3A%2F%2Fr19---sn-bg07dn7e.c.youtube.com%2Fvideoplayback%3Fms%3Dau%26sver%3D23n_iaVY%26fexp%3D900350%252C92... Squid intercepts the GET for the file specified in "url" parameter and serves "http://192.168.1.4:8081/video.mp4" instead
&gt; no he shouldn't Preventing misunderstanding is not important??? When you read code, do you want all the comments to be ambiguous and hard to understand? &gt; Bootstrapping has been around in computer terms for decades Yes, but not with the meaning of "framework with which to start a project".
Disclaimer: I haven't tried using this code yet There's no reason this type of project can't work on any environment - it is python after all. It's possible that the developer may not have tested it in windows, and may have put a few lines in there that are OS specific, but you could easily add some extra code in to handle windows architectures. That said, I can't see anything in the code that looks like it wouldn't work on windows too (there's even a windows batch script so it probably HAS been tested on windows). You may need to have GNU make installed though.
Might just be me, but every bit of code is vertical on that page eg: http://i.imgur.com/KWC4LTl.png
&gt; Kind of a silly one Well, naming a project is always the hardest part. Anyways, this is just a boilerplate application.
Haven't really tested with windows, but it's just simple Python code. So, it should just work. But I'm afraid the setup part of it, would be a bit different(installing pip for example, a make.bat extension of makefile). So I guess this project would work well for windows too, provided you have the basic tools installed.
You strap on your boots before you do the work.
As mentioned in their repo, invoke is still in beta. There are obviously some dependencies involved in setting it up for a project. There is nothing as well-tested or used as Makefile is. 
I never really mentioned Twitter Bootstrap anywhere. I thought it seemed pretty obvious that people would understand.
what do you find lacking in make?
works fine for me in chrome, what browser are you using?
The analogy is to pulling oneself up by one's bootstraps, not to putting one's boots on.
Chrome as well, odd haha
So basically you need to get rid of the string slicing operation somehow. My first thought was that this kind of data is perhaps better suited for an sqlite database, but let's assume that we're stuck with the file. Have you tried [struct.unpack_from](http://docs.python.org/2/library/struct.html#struct.unpack_from)? It lets you use a large read buffer and then unpack multiple records from that buffer with just a single python function call, returning them in a tuple. I did some benchmarking of my own: Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win32 Type "copyright", "credits" or "license()" for more information. &gt;&gt;&gt; # take note of my platform! &gt;&gt;&gt; # I'm writing a test file of a gigabyte filled simply with 'A' characters &gt;&gt;&gt; f = open('testfile', 'wb') &gt;&gt;&gt; for i in range(1024*1024): f.write('A'*1024) &gt;&gt;&gt; f.close() &gt;&gt;&gt; &gt;&gt;&gt; # here's the naive way, same as yours &gt;&gt;&gt; def func1(): f = open('testfile', 'rb') for i in itertools.count(): record = f.read(16) if not record: break print i &gt;&gt;&gt; import itertools &gt;&gt;&gt; import timeit &gt;&gt;&gt; # did five timings &gt;&gt;&gt; timeit.repeat('func1()', 'from __main__ import func1', number=1, repeat=5) 67108864 67108864 67108864 67108864 67108864 [24.98901233151298, 24.979016540885482, 25.02090923064975, 24.973766732719696, 24.987435595208638] &gt;&gt;&gt; &gt;&gt;&gt; # alright, about 25 seconds, pretty consistent over five runs. &gt;&gt;&gt; # now let's try reading 1MB at a time and unpacking with struct.unpack_from: &gt;&gt;&gt; def func2(): f = open('testfile', 'rb') for i in itertools.count(): buf = f.read(1024*1024) if not buf: break records = struct.unpack_from('c'*16, buf) print i &gt;&gt;&gt; import struct &gt;&gt;&gt; # timing it... &gt;&gt;&gt; timeit.repeat('func2()', 'from __main__ import func2', number=1, repeat=5) 1024 1024 1024 1024 1024 [0.4133523399441401, 0.4421900984795002, 0.4418659675169465, 0.44246938307799155, 0.4426713463590204] It seems to work on my end, though I didn't test extensively. But you could give it a go.
maybe it got fixed?
Looks like it! Thanks!
It hasn't "broken" platform independence. Your python is still python. The difference is your *infrastructure* isn't platform independent. `pip` is a bit more work to install on Windows and `virtualenv` on Windows requires Powershell (instead of *sh). So either way, you'd be unable to replicate his exact work environment on Windows
Django supports Python 3 pretty well. I've lately been porting all of my Django apps to do 2/3 support, too, and it's been pretty easy, and I'm seeing a lot of other people do the same.
I think you are missing an inner loop in the unpack_from example. Eg, it reads 1Mb at a time, and only reads the first 16 bytes record off the buffer :/ I can't run a benchmark right now, but otherwise looks something I should try.
thank you for reporting this, looks like i have issues with loading javascript, i will need to fix this asap 
Damn, you're right. I misunderstood the documentation.
homepage: http://skariel.org/webalchemy/ Note that there is no intention to replace Javascript; It is still used on the frontend. 
Is that really a security concern for a command line application? If a user provides a path on the command line and uses things like `..`, then `os.path.join` *behaves as expected*.
Sounds like you need to switch to C++. This is fairly simple so that you should be able to apply the standard library (STL) in a straightforward manner. I love python but it is hardly the place to go for performance. 
That's a lot of winking.
I do similar project templating with a short code I wrote to sync my local machines with my Github repos: https://github.com/thearn/github-auto-tools My workflow for a new public project usually starts with creating a blank Github repo, then using this to sync my local repo directory with my Github account. When an empty python project is detected (based on the word 'python' being either in the title or the description), a list of templated files (.gitignore, setup.py, src directory, etc) is generated for me. Note: My local version of this tool no longer has the Wing IDE project templating - I've since moved to Sublime.
I count just under 10 full winks and a 'tee hee'
wait did you just take the same list that was on your blog , buy pythonapi.com and post the link again ?
Our IT refuses to upgrade from CentOS 5 with Python 2.4 even though I'm the only one who uses it and want him to upgrade it. I'm running CentOS 6 using VMWare and Python 2.6 (just cause it came with it) now since I needed a new glibc library for some piece of software. There will always be stupid cases of using old software, but I'm the one who pushes new version of Python and there's a fear of not being able to get bug fixes that I like to envoke to great effect. It got us off Python 2.4 and onto 2.7. We were stuck on 2.4 for ~6 years. We're now on a 6 month package upgrade cycle. I'll push for 3.4 in a year or so.
I would have prefered `;-)`s or maybe (!) or something instead of the `&lt;wink&gt;`s for emphasis.
I learned that `.send` on generators makes them coroutines but it sounds like that isn't really true, since yield &amp; send are still asymetric in terms of pause/resume. There is a Caller/Callee relationship instead of a state-machine transfer control relationship where push/pull are both equally valid ways of looking at the problem. Edit: It looks like these are posts from 1999 when generators were being debated and patches were being submitted that implemented them. `.send` was added after `yield` and generators.
Our IT department is the same. They often struggle with unicode, which python 3 resolves, but they wont budge. Wont even use a vm.
Let's add this to PEP8.
Why are you bothering with system python that shit is always out of date. Use virtualenv who cares what system python is
Cause it doesn't matter for any of the stuff that I'm using the VM for. 2.4 would work for what I'm doing. I'm not going to spend an hour setting up Python up when I'm just going to do a for loop around a subprocess call.
This drives me insane. I have recently switched to Linux and Python after 15 years on Windows and I can't find a good Python IDE. This looks perfect-- and it only runs in Windows. Argh! My mind is boggled with how poor auto-complete / intellisense is implemented in the Python IDEs in Linux.
Yes, numpy.
[Numpy.array](http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html) perhaps. Depends on what you're trying to do.
What is wrong with pycharm? I can't think of a time I have seriously missed vs.net
I'll check out PyCharm! (Edit: Actually, I did check out PyCharm. It costs $199 so I disqualified it. I switched from Microsoft to avoid paying licensing.) So far I've checked out Geany, Komodo Edit and about 3 others. It's been pretty rough. For the first time I am comprehending how polished building in C# is. I didn't ever need to go looking for documentation because the Intellisense provides the contextual 'documentation' I need as I am developing. I am looking for as close to that as possible.
Ask the NSA. They know how to use google data.
Coroutines explicitly name the direction of transfer of control flow, while a generator's `yield` will always do just that, only yield control, not transfer it.
Remember, this *was* written before the turn of the century.
Thank you for sharing :) Would love to peek under the hood.
Could be because python is less used, so the IDE's for it are worse. However, notepad++(windows only, but open source) has documentation for the builtin functions (min,max,str...).
This feels like a bug with the python API for gdata/youtube. You might want to try re-installing or updating your library: https://developers.google.com/api-client-library/python/start/installation
Runs without error on my machine: &gt;&gt;&gt; import gdata.youtube &gt;&gt;&gt; import gdata.youtube.service &gt;&gt;&gt; yt_service = gdata.youtube.service.YouTubeService() &gt;&gt;&gt; query = gdata.youtube.service.YouTubeVideoQuery() &gt;&gt;&gt; query.vq = 'rick astley never gonna give you up' &gt;&gt;&gt; query.orderby = 'viewCount' &gt;&gt;&gt; query.racy = 'include' &gt;&gt;&gt; feed = yt_service.YouTubeQuery(query) &gt;&gt;&gt; feed &lt;gdata.youtube.YouTubeVideoFeed object at 0x478af50&gt; &gt;&gt;&gt; (.env)root@ubuntu# pip freeze | grep gdata gdata==2.0.18 
Use the pycharm EAPs, they are free for 30 days and a new one rolls out every 30 days. They may be a little flaky as they are beta software, but I've found them to be pretty solid.
Pythons std-lib array module was conceived for exactly this purpose. However, if you want to manipulate the data, you probably want numpy. 
Thats great! I am planning to use this REST Framework as base for my CMS API http://www.quokkaproject.org
Sublime + CodeIntel isn't so bad. I've heard good things about IntelliJ and PyCharm.
What's wrong with vim + ctags? (neocomplcache)
There's nowhere for you to specify where you transfer control *to*. Only to whoever your caller was. That's the difference.
Linux or windows? If you're on linux you can read from your microphone under /dev.
Im running Windows.
`array.array`, numpy, pypy (it has type-based custom list strategies), ...
Ther's [eric](http://eric-ide.python-projects.org/) as well. Might give it a try.
You can even pick how many bytes per integer!
No. Nothing required. Program implemented in MS C/C++ usually ship the run-time required ... Delphi as well as C++ Builder don't need. Once I implemented a simple application in order to test the cross-platform framework and in practice under OS/X and Windows you don't even need DB client libraries (wire protocol). If you prefer open source the same component sets works well with FPC/Laz. Delphi is seen by many as a DB tool still, that was Delphi's weakest point ever since (Amiga for Graphic and Atari for Sound is a similar example) - it was top notch and one of the few option when you accessed Oracle long time ago in order to create business applications. This works still and a lot better. 500 to 3000 users against one oracle DB without app-tier blah, blah, blah ... In many places Delphi or C++ Builder are still used for maybe application you simply copy to a USB drive. WinSCP is built with that kind of technology but I think in C++ fashion - one example. See Delphi is simply as underestimated in the Windows world as Python has been in the UNIX world or or outside for a long time. Delphi is not unattractive in general ... There are many reason why Pascal is a good option to learn programming. What makes Delphi harder to learn is simply a whole bunch of functions that are important - you can recompile programs implemented in Delphi 2 or 3 15 years ago or older - those confuse people. Think of the move from Python 2 to 3 ... in Delphi that's pressing F9 (Build) and having to touch almost nothing (maybe little after 15 years). Everything does come at a price. It's better than Winforms and WPF is no option for too many still. That's why Delphi is here - I doubt that will change soon. Delphi's standing in vs. .net is very similar to Python's standing vs. Java . The beauty of Java or .net is about blind believe taught to children today. I think the title of thread simply says, that education in the fundamentals of computer science should come back to schools and universities in order to avoid such comments. btw: Haskell is the most amazing thing I have ever seen. I will have to get used to it.
Is the tulip / coroutines work being included?
xrange is generator not an array/list, and probally it should be using to loop. Also xrange isn't there in python3 (although range in py3 work mostly like xrange) 
That or create a set of branches with different setups.
&gt; mmap2(NULL, 1052672, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7296000 That syscall has nothing to do with reading from the file. Note that the `fd` argument (second to last) is -1, and the fact that this is an anonymous mapping, meaning it's not associated with any file. This is simply how you ask the kernel for a chunk of memory. You'd get roughly the same thing from a C program that calls `malloc(1024 * 1024)`. 
Browsing through the documentation, it does look clean.
PyDev in Eclipse?
Wow. Thanks everyone. Numpy sounds really popular! I'm going to have to check that out. My particular application involves pushing and randomly accessing a large number of sha256 hashes.
Check this modern age classic: http://superuser.com/questions/545329/how-do-i-make-a-machine-blank-screen-for-a-period-of-time-as-a-penalty-if-ce
I'm not sure what you mean by sparse. I'm storing and randomly accessing sha256 hashes for a project I'm doing. The integer array was just to illustrate the overuse of memory. All the entries are unique and the purpose is to require a lot of memory to arrive at a particular result.
&gt; xrange is generator No, xrange is iterable but it's a (x)range object and permits things a generator does not e.g. multiple iterations or containment checks without blowing the iterable &gt;&gt;&gt; r = xrange(5) &gt;&gt;&gt; 3 in r True &gt;&gt;&gt; 3 in r True &gt;&gt;&gt; len(r) 5 &gt;&gt;&gt; list(r) [0, 1, 2, 3, 4] &gt;&gt;&gt; list(r) [0, 1, 2, 3, 4] by comparison &gt;&gt;&gt; p = iter(r) &gt;&gt;&gt; 3 in p True &gt;&gt;&gt; 3 in p False &gt;&gt;&gt; list(p) [] &gt; although range in py3 work mostly like xrange It is for the most part an extension of Python 2's xrange: it's a virtual sequence which generates content on the fly. It adds methods, it forbids most rich comparisons and it's become hashable. Anything `xrange` could be used for, `range` can be used for in Python 3.
Same here...ALT+F4 feels so "windows-ish"
I'm assuming this is an actual joke comment and the other replier is just missing it
At my new job the senior developer said every new project package is new created using company specific cookiecutter tempaltes. He made some of them and we made the rest. Makes it so everything works right the first time, and without screwing around with changing things manaully. i get credit becuase i showed it at the team meeting. Definalty the best new library of 2013. 
Well then, depending on the density, you could store them indexed by the first 32bits, and save 32bits on each of the ones in that subarray.
Incorrect, unless I've misunderstood you? &gt;&gt;&gt; from array import array &gt;&gt;&gt; a = array('i') &gt;&gt;&gt; a.extend(range(4)) &gt;&gt;&gt; a array('i', [0, 1, 2, 3]) &gt;&gt;&gt; a[1] = 50 &gt;&gt;&gt; a array('i', [0, 50, 2, 3]) 
I played yours! I was disappointed with it, though; I didn't want any serious competition! :D
My experience is that numpy's performance, particularly in array operations is...poor. Even simply ones (eg multiply). It's much preferrable to use the core math functions whenever possible. 
That's part of the PyWeek :) Cosmologicon, Tei, Team Nerd Paradise, Forked Tail team and other usual suspects; their games are inspiring and always encourage me to improve my skills!
This is not my (considerable) experience.
How does this work? How does numpy make this happen?
I am a novice, so I by all means defer to your wisdom. The situation was we were trying to perform a relatively simple operation on a numpy array x 18,000 (ie, the same operation on a nxn array with n&lt;5) and doing it in numpy versus core math lib was a difference of many minutes. I'm sorry I've invoked the wrath of the pythonerati. I am a big numpy fan, I was just adding this in because I didn't want someone to count on it as a solution. I'm 100% prepared to be wrong. 
fair enough. it look awfully similar at a glance though.
Oh yes, operations on small arrays can certainly be slower than plain loops. However, by the time your data is large enough that the memory overhead of Python `int` objects becomes important (the OP's case), numpy takes over. For example, if instead of repeatedly doing an operation on 18,000 `(4,4)` matrices you kept a single `(18000, 4, 4)` numpy array and did the operation once, numpy would probably have beaten out your loops. [~] |1&gt; import numpy as np [~] |2&gt; small_arrays = [np.random.random_sample(16) for i in range(18000)] [~] |3&gt; big_array = np.array(small_arrays) [~] |4&gt; %timeit x = [y*5.0 for y in small_arrays] 10 loops, best of 3: 39 ms per loop [~] |5&gt; %timeit x = big_array * 5.0 1000 loops, best of 3: 201 us per loop [~] |7&gt; small_lists = [x.tolist() for x in small_arrays] [~] |8&gt; %timeit x = [[y*5.0 for y in items] for items in small_lists] 10 loops, best of 3: 25.5 ms per loop numpy is by no means a "make-it-go-faster" cure-all for all things numerical, but it does directly address the OP's problem. The OP's problem may not be your problem.
I just wonder why people give negative points to true answers :D
ah. There was an unfavorable data dependency that spelled doom for our ability to non-loop it. However, this suggests that numpy isn't even the culprit I made it out to be, but rather the loop is. 
Right. I was probably unclear. In my application, I add and then read, but never modify.
well, firstly, there's no concern to mitigate. I was just sharing some confusion I have. the time I tried cookiecutter I ran it pointed at a template I had cloned locally and was not prompted for anything I couldnt tell where the project was generated. The docs I pointed to previously seem to imply that prompting only happens if you point to a template on github. i'd personally rather just point to a directory for the template and give a name and then be prompted for any questions that the template has. Basically like paster create which is something like paster create -t my_template ./mynewbanging_project What paster doesn't have, is python3 support(I think) or a large ecosystem of templates to choose from or a clear way to add to the list of available templates(it's entry points I think) That's my .02 anyway, Others seem to be happy with it so no need to lose any sleep over me. :) 
Have you tried [Wingware](http://wingware.com/)?
Low level magic.
Just in case of confusion -- it allows you to say how many bytes per integer, and that limits the maximum integer you can then store. Eg you choose 1 byte per integer =&gt; you can store values from 0 to 255.
ah! good catch! yes, I should have payed more attention to the parameters and the read() right after it. I was also fooled by mmap() munmap() pattern I _continuously_ see in the strace, I would have expected a good allocator to cache memory requested to the OS for some time, but maybe it's just a matter of tunings. I've updated the post, thanks for pointing out the error! 
You are right :)
It's tricky to assign a single "culprit" in these cases. numpy is not as efficient as other approaches when dealing with small arrays. A Python (CPython) loop is not as efficient as the C-implemented loops inside numpy's operations. If your calculation can't be "vectorized" into a combination of numpy operations on large arrays, then you are forced to use Python loops on many small arrays. Taking that as a given, numpy's relative inefficiency with small arrays is indeed your "culprit". It's the one place where you have an actual choice to make things faster. By the way, you may want to try [tinyarray](https://pypi.python.org/pypi/tinyarray/) for your use case.
Send on generators allow you to build limited coroutines around generators pretty easily though. You write `transfer(x)` as `yield x` and you need a helper function to invoke a coroutine method so that it will pump all the yielded generators appropriately. Edit: This is also the guy behind [timsort]( http://en.m.wikipedia.org/wiki/Timsort) and Zen of Python (import this). Did he also implement lambdas? Pretty smart guy if you ask me. I probably owe him a beer (or equivalent nonalcoholic drink) if I every run into him.
A search for "eve python" and this framework is the first 3 results. I think this wins.
Don't worry, I'll protect you from pedantry: The number if bits in a byte *is* a constant (regardless of architecture): 8. *Memory addressability* is what changes (e.g. on machine A the smallest piece of memory you can request is 4 bytes, but it's 1 byte on machine B). (And some other things change as a result) (E.g. the size of a pointer in C)
Because it is entirely unhelpful. The OP is asking for assistance, others are providing it, and I'd rather the actual advice be at the top. 
Very nice ! And very neat code.
How's debugging gevent and/or greenlets? The previous release really struggled with them... (PyCharm has some tricks that make it work more reliably.)
Nothing's really changed there for this release for gevent or greenlets (we have an issue tracking gevent not working, but haven't figured out what we need to do to fix it yet). Someone did contribute back changes to make stackless work though so that's improved in 2.0. We'd also take a contribution to make gevent work if someone wanted to work on it - the nice thing is the fix is probably all in Python code :)
Why do you say that he should be using a tree structure?
Why have different response format based on who is accessing it? 
I would start with the G19 SDK documentation to learn more about what is going on. It looks like you'll end up using pyWin32 in some form: http://lglcdnet.codeplex.com/ EDIT: There is a library for python. For Gnome. Probably other libs out there as well. http://gnome15.org/index.php?option=com_content&amp;view=article&amp;id=15&amp;Itemid=39
&gt; The number if bits in a byte is a constant (regardless of architecture): 8. Wow. Things have changed from the very long time ago when I did computer architecture. It definitely wasn't a constant 3 decades ago... 6, 7, 10 and even 12 were fairly common. Depending on a large number of things. 10 wasn't in common use outside of MCU/Controller/DSP or Bit-slice type things, though. 6 and 7 were character sizes. 12 was 3 nibbles of 4 bits, for when 8 just wasn't enough especially if you didn't want to page-switch to access a little more than 64K of memory.
[For me](https://duckduckgo.com/?q=eve+python) it's the first result, followed by a number of talks about how the Eve developers use Stackless Python. I'm just sayin', you could've chosen a better name.
Do you own one yourself? If you do, you could use [wireshark](https://www.wireshark.org/) to see what it's sending to the keyboard. Just set it up to monitor the USB port. (assuming it's connected over usb). If you figured out what it's doing, you can use [libusb](http://www.libusb.org/) to send/receive from a fake port. (I think, scanning the page looks like it can)
And not even that accurate, because this doesn't even begin to approach low-level *or* magic. Now, some weird i/o device signals that ghost onto the data r/w bus depending on board &amp; CPU timing, which are accessible on the fly if you count crystal oscillation timing correctly ...
Perhaps I shouldn't have said "should be" instead "could look into". Mostly because of this: &gt; storing and randomly accessing sha256 hashes A patricia trie can be kept compact and makes accesses fast. Although, his use case fits a Judy array better, they are stupid fast and memory compact. I might be wrong. (Probably am.)
The most annoying thing about make is its very particular rules about whitespace. I honestly don't know why people don't complain about this more, considering the shit they give Python (which is far more lenient). Beyond that, while I appreciate shell scripting (and do it every day, professionally), there are a number of advantages of having a more modern general-purposes language available to you. While the simple "run this command" rules are fine, things start getting complex quickly - as seen by the fact we've created tools to generate Makefiles for us. It's a lot like using Python for configuration files - I may not need it all the time, but when I do it's really helpful. Being able to add decorators to your definitions is really cool, as is the ability to import arbitrary Python modules (and do arbitrary things with them). It can also help with portability, although honestly I don't give a shit about non-Unix systems. As a simple example, in my Rubygems' Rakefiles I add two lines like these require 'mg' MG.new 'git-scripts.gemspec' to get a whole host of gem commands added to `rake -T`. Maybe you can do this with a traditional Makefile? I don't know, but I'm pretty sure it'd be a lot harder.
&gt;There is a library :D &gt;For Gnome. D: Thanks for giving me somewhere to start.
I picked one up from the store today (not a fan of the non-mechanical keys!) so hopefully having one firsthand will help figure things out quicker. Good idea using Wireshark - I hadn't thought of that. Thanks for the input! 
Under the C standard, a `char` is a byte. However, the number of bits in a `char` is an implementation-defined constant called `CHAR_BIT` and is explicitly permitted to be something other than 8. POSIX and presumably Windows NT both require `CHAR_BIT == 8` so it's profoundly unlikely you'll see a different value in practice.
Copying HN comment: And as usual, this is REST-as-a-buzzword, not REST-as-REpresentational-State-Transfer. * Primary focus on URI structure (to the point where the third thing explained is that you can access each resource from multiple URIs… after the URI being customizable and the URI pattern &amp; mapping to CRUD operations). That there are links is only "documented" at #6. * Very little on media types: only mentioned in examples, no overview let alone more precise documentation, there seems to be 5 or 6 possible _link keys but none is defined further than the examples showing it exists. Notes that the entry point will be disabled if links are disabled, said entry point's media type is not documented and only defined as "a list of links to accessible resources". * Very limited linking (only tree traversal/reads), no support at all for resource alteration information in documents, how a resource is created, modified or deleted is solely out-of-band knowledge. No state transition is available to a RESTful Eve client, it is limited to a readonly interface. * Same for non-trivial fetching, e.g. filter and search * What little linking there is, is optional (!) * And the official documentation generation extension documents (verb, URI) pairs: http://blog.python-eve.org/eve-docs, what little data documentation there is is subservient to the creation (verb, URI) pair, and is the expected payload... Look, it's fine if you want to roll your own RPC-over-HTTP API, you can make a nice-looking RPC API and it's not like you're trying to build a RESTful one either way. But just once, I'd like to see honesty, or at least no lies. You don't have to say the whole truth (that it's an RPC API, though it totally is), just say that it's an HTTP API. But stop stating it's REST when it's not and you explicitly spit on what little restfulness there could be.
It's quite popular. Here's one method for large arrays: http://stackoverflow.com/a/10319489/341744 . Check SO with the tag `numpy` for more.
Maybe he has a twitch.
If you wish to add gnome: http://stackoverflow.com/questions/5090009/changing-wallpapers-in-python
For the interested, [this pull request](https://github.com/kennethreitz/requests/pull/1541/files) contains the current 2.0 changelog, and should be kept relatively up to date.
You can still find systems today where `CHAR_BIT` is not 8; you don't have to go to a computer museum. There are some embedded systems where that is the case, for example DSP hardware that can only access full words. But if you do allow computer museums, well, all bets are off. There were computers with 9 bit bytes and 36 bit words, computers with 7 bit bytes, 12 bit words, and so on. The notion of a byte being a fixed 8 bits is a very modern thing. 
&gt; Look, it's fine if you want to roll your own RPC-over-HTTP API Just to point out: I hope it's an hypothetical "you" as Eve is not the fruit of my work. i just posted a link sounding interesting. :-)
It's a general "you" to any API builder, Eve is not the first (nor the last, I fear) to claim a REST API of something completely unrelated to REST. But to directly answer your question, no it wasn't a "you" as in "you petrux", I don't ascribe submissions and authorship to the same person unless there are good reasons to.
I disagree with the idea that a byte is the size of a character. Perhaps that's what it originally meant, but today, in the day of unicode, this association means less and less as time goes on. Nowadays, I think it's just another aribtrary unit like a cup, inch, or gallon. Besides, while C is important, I don't think it's what defines what a byte is.
... I hope it's gotten a lot less buggy since last time I used it...
Now to get Meta Eve needs to use Eve to power their character api.
Yep, my first thought when seeing this was that this came from CCP/EVE Online team. 
Unless you don't want an int, for some reason.
Yeah, really poor name choice.
Tuples are [immutable](https://en.wikipedia.org/wiki/Immutable_object) -- http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences : a = tuple(0,1,2) assert a[0] == 0 and a[1] == 1 and a[2] == 2 assert len(a) == 3 `collections.namedtuple`s work sort of like [C `struct`](https://en.wikipedia.org/wiki/Struct_\(C_programming_language\))s -- http://docs.python.org/2/library/collections.html#collections.namedtuple : namedtuples can be subclassed: from collections import namedtuple TriangleTuple = namedtuple('TriangleTuple', ('a','b','c')) t = TriangleTuple(3,4,5) print(t) # TriangleTuple(a=3, b=4, c=5) print(t.a) # 3 class Triangle(namedtuple('Triangle', ('a','b','c'))): def str_2(self): return '\n'.join( ': '.join((str(k),str(v))) for k,v in self._asdict().iteritems()) t2 = Triangle(3,4,5) print('%s' % str(t2)) # Triangle(a=3, b=4, c=5) print(t2.a) # 3 print('%s' % t2.str_2()) # a: 3 # b: 4 # c: 5 assert t == t2 assert t == tuple(x for x in t2) 
yield from is just a perf boost for nested iterators, which is common enough to be worth its own syntax (which iterates in C code instead of Python).
gdata 2.0.18, in Python 2.7
By god i hope it works with our ssl proxy at work. And yes I will try to install this and see this week!
Here's one I found for Mediafire, allows for downloading/uploading but I have yet to test it https://github.com/Dasister/Mediafire-api-python-library Edit: It works, I have created folders and uploaded video files while using this API
First of all, you are exceedingly dismissive and that's not really fair, especially since all of your criticisms are relatively minor to the larger architecture. Hell you could pretty easily go in and make the fixes yourself. REST is hard and isn't going to be completely attained without some feedback / iteration.
I dislike the events library and the way it does hooks. I would rather something like: @app.on("GET", "people") def on_get_people(resource): if has_permission(): return True else: return False 
It seems some people aren't happy with it: http://www.acooke.org/cute/Pythonssad0.html http://acooke.org/cute/PythonEnum0.html http://grokbase.com/t/python/python-ideas/133bcg0cb2/pep-xxx-competitor-with-pep-435-adding-an-enum-type-to-the-python-standard-library And the defense: http://python-notes.boredomandlaziness.org/en/latest/python3/enum_creation.html 
Works like a charm, where Ruby is still a pain (and I love Ruby).
Scroll down for the 4 animations.
This article doesn't mention the [quantities](https://pypi.python.org/pypi/quantities/0.10.1) package, which has been around since 2011 and appears to be the most popular.
It looks like you're missing \_\_init\_\_.py files. You need one in every directory that you want to be able to import, including *blue*. It doesn't have to contain anything.
&gt;You're right about the comparison, but it should be `raise NotImplementedError` not `return NotImplemented`. I disagree. [Random supporting link.](http://stackoverflow.com/questions/878943/why-return-notimplemented-instead-of-raising-notimplementederror) --- &gt;I disagree with you about side effect methods returning. For example `create_some_thing(a, b)` should return the thing it created! `create_some_thing` in most cases should not have side-effects.
&gt;`create_some_thing` has the obvious side effect of creating the thing, so it is technically a side effect method. For example, allocating memory, or creating a memory buffer on a graphics card. That's pedanticism. Under that light, *all* methods have side-effects and thus the distinction is meaningless. The obvious way to take the statement is as a contrast between functions that *mutate* existing values and those that do not.
When you do, please message me or write to me and let me know. My Gmail address is the same username as my Reddit username. I would like to review it and let a few people know about it, as I know a few people who have been dipping their toes in Python and Qt. I think that at least one is using pyside instead of pyqt, but the bootstrap should be similar. Thanks!
You'll definitely need to add `__init__.py` files at least---this is what tells Python that your `a` or `b` directories are *packages*. If you're looking for an alternative to Sphinx's automatic API doc generation, you might want to check out [pdoc](https://github.com/BurntSushi/pdoc). /plug
8 bits = 1 byte is *a* definition. But it's a definition that really only became (almost) universal when the PC became ubiquitous. Even today, there are embedded systems where bytes are not necessarily 8 bits, but generally you need to go back to older machines like Honeywell, DEC and Control Data to find non-8-bit bytes. http://stackoverflow.com/questions/2098149/what-platforms-have-something-other-than-8-bit-char http://stackoverflow.com/questions/5516044/system-where-1-byte-8-bit 
quantities requires numpy which probably makes a deal-breaker for Dr. Dobbs. (he has Python listed as a JVM Compatible Language.... which is sort of true, but Jython can't run numpy) Then again I suppose it makes sense that this sort of thing would be used with numpy.
Is there a reason Jython can't run numpy?
Doesn't request 1.0 have proxy support ? As far as I read the commit log, the proxy support mostly improve in auto proxy detection (which may help Windows and OSX), you always can pass proxy by add "proxies" parameter to request.
&gt; First of all, you are exceedingly dismissive No, I'm objectively evaluating the claim that Eve is RESTful. &gt; that's not really fair It's not fair to evaluate claims? &gt; especially since all of your criticisms are relatively minor to the larger architecture They're not minor to the claim of RESTfulness. They're evidence that Eve is *not* RESTful in any way, shape or form. &gt; Hell you could pretty easily go in and make the fixes yourself. Irrelevant. &gt; REST is hard REST is especially hard when you don't care for it and just want a pretty buzzword. &gt; and isn't going to be completely attained without some feedback / iteration. There is *no evidence* of even the slightest *attempt* of building a RESTful system here, anybody could have written most of the points by reading Fielding's [REST APIs must be hypertext-driven](http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven) (written *5 years* ago) then reading the linked document (the post actually allows for way more criticisms on other finer points). Just about all of my criticisms fall under bullets 3, 4 and 6 of Fielding's blog post. And again, if you don't want to build a restful API *it's fine*, just stop claiming it's restful when it's trivial to demonstrate that's not the case.
If you are working on every layer of your product, you will use basically everything on a regular basis. 
Probably because reading XML in a browser is easier than reading JSON, while processing JSON in a program is easier than processing XML.
I agree, please see [this comment](http://www.reddit.com/r/Python/comments/1lpdi0/python_best_practice_patterns/cc1stby) of mine.
Jython can't access compiled CPython extensions (and NumPy is a compiled CPython extension).
Quite apart from everyone quite rightly pointing out the absence of ``__init__.py`` files, you'll also need to make sure that the ``blue`` package, its descendants and the classes and functions within them have docstrings. Sphinx will skip entire modules when using autodoc unless said module has a docstring or one uses ``:undoc-members:``. (See the [relevant section](http://sphinx-doc.org/ext/autodoc.html) of the manual. Search for 'undoc-members'.)
I guess I'm a month late to the party but I just saw this in another thread. My question: why MongoDB? You make heavy use of model schemas with relationships and all that. That's not really MongoDB's strong suit *afaik*. Also, I think a lot of people won't use it because MongoDB isn't that widespread yet and they refuse to maintain yet another DB. I guess my point is: is it the right tool for the job in this scenario?
&gt; REST is especially hard when you don't care for it and just want a pretty buzzword. No you're not being dismissive. What in the world *is* RESTful in your mind? Anything that has the least bit of pragmatism built in must just become a shallow, poor RPC, unworthy of the "RESTful" brand.
This comment comes from my experience at PyCon India which happened recently. Here are a few things to keep in mind whilst you go about your presentation; 1. DO NOT use a lot of text in your presentation. Repeat, DO NOT. Keep it short, succinct and use images. 2. DO NOT make your presentation overtly long. You probably have 30-45 minutes to make a good presentation, answer questions and keep your audience happy. 3. Use real world examples, derive analogies and assume that the audience in front of you know absolutely nothing. I'm assuming that the presentations are tagged as beginner, intermediate and advanced (hope?) and such tags help drive the right kind of audience into various presentations. 4. Lastly, interact with others, make friends, visit the various booths (if any), take part in contests (if any) and have fun. Soak in the atmosphere and see how you can be better. Considering you are already selected to be a speaker, at a conference of repute implies you have the smarts. It's a fantastic opportunity to have for an undergrad. Make the most of it!
Quepy is a python framework to transform natural language questions to queries in a database query language. It can be easily customized to different kinds of questions in natural language and database queries. So, with little coding you can build your own system for natural language access to your database. Currently Quepy provides support for Sparql and MQL query languages. We plan to extended it to other database query languages. 
OK here's what I did: From the blue folder I issued the command: C:\Python27\Scripts\sphinx-apidoc.exe -F -o doc . This caused sphinx to generate all the different module .rst files Then from the doc folder I issued 'make clean' and 'make html' It generates the autodoc with the exception of the modules that produce errors at loading. So quite a bit of progress... Thanks to all in this thread. 
Or, just link new developers directly to http://www.python.org/dev/peps/pep-0008/
I've used Pint a lot and it just feels right. Nice when a library package works out that way.
Yeah, the last two aren't accepted yet. My mistake!
I definitely agree that that's the most complete introduction for someone. I wrote this more for people who only write Python occasionally or those who don't want to read long proposals. I also cut out some of the stuff that's in PEP8 but isn't followed much in the wild, like max line length requirements and function calls that span newlines.
What's wrong with the two services you listed? It might be worth your time to pickup a box from digitalocean.com ($5/month) and configure it yourself. There would be a little learning curve but it's something you could get setup in an hour or two following some guides online or in digitalocean's archive
It is cool. I like it a lot. And it pointed me to Freebase and DBPedia, which I didn't know before, too. Three pointers in one post, 10/10, will reddit again!
I saw them. &gt; ... If you're looking for an alternative to **Sphinx's automatic API doc generation** ...
urllib?
&gt; That's not an example of anything RESTful that's an example of why something's not RESTful. Fielding lists a bunch of criteria necessary for an API to be RESTful in his opinion, this is an offshoot of a his criticism of the SocialSite API, but the post is about being RESTful not about something not being RESTful. &gt; I think Eve is an admirable attempt to go in that direction I'd like you to explain why you think that as I really can't see it. Is having a few optional, barely documented and read-only links your sufficient criteria for admirable attempts or have I missed something?
Fun fact: you'll also want to have a Fortran compiler handy if you want to build NumPy.
Most places won't have an open api. That said, you can probably request actual search pages and scrape the results. There isn't a simple library that will do this. You'll need to curl the search page and parse the resulting output. 
Let me ask it another way: What is real-world example of well implemented REST? I've been researching this topic all day and night to be honest. I've learned a lot about REST that I did not know. But it's only galvanized my understanding of REST as an ideal, an impractical one at that. Let me put it this way, if the service is paying attention to the Accept header and uses "PATCH" it's more RESTful than 99% of the internet. At that point, I'd argue that, yes, it is going in the direction of REST, admirably. In other words: there are no true Scottsman, and there is no true REST.
I'm attending PyCon UK. If you have a question that you want to be asked, let me know. It will be our little secret ;)
The services I listed don't support websockets... so yeah picking up a box would work but its more work and more expensive than a free account on Pythonanywhere or Heroku...
That rings a (painful) bell.
Thanks for the advice! I really appreciate it! And thanks for the kind words. Is your presentation online? 
"Would you like a pint?" ;)
&gt; But it's only galvanized my understanding of REST as an ideal, an impractical one at that. Right, so you assert that REST is both impossible and not something you strive for (which is your right). Why do you defend the misuse of that word then? &gt; Let me put it this way, if the service is paying attention to the Accept header and uses "PATCH" it's more RESTful than 99% of the internet. 1. that makes absolutely no sense whatsoever. Using HTTP (well or not) does not make things RESTful 2. most of the web is restful pretty much by definition since it's web sites. I would guess the web represents more than 1% of the internet
[Requests](https://github.com/kennethreitz/requests),[Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/) or [Scrapy](http://scrapy.org) should do the job.
0. I did not say I didn't strive for it. I said it's an "ideal", which mainly implies that I *do* strive for it. 1. I'm explaining how a web-framework (see: HTTP) works in a RESTful way. 2. Then by virtue of being built on a web framework Eve is RESTful. Great, I'm glad we've sorted all of this out. And now I am officially weary of this. Have a good day.
`s/wrong/not compliant with the model in my head of what it ought to do/` The counterpoint is that `dir()` was clearly designed with the goal of having `dir(foo) == dir(Foo)` where foo is an instance of a regular class Foo. With your version, `dir(Foo)` would include metaclass methods that don't exist on foo. A different type of confusion.
Deal!
And of course, an instance's `dir()` can be overridden by defining a `__dir__` method. And the documentation even notes some attributes are filtered out: &gt; return an alphabetized list of names comprising (**some of**) the attributes of the given object, and of attributes reachable from it. and, the part which apparently saddens OP, &gt; Note: Because dir() is supplied primarily as a convenience for use at an interactive prompt, **it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set** of names, and its detailed behavior may change across releases. For example, **metaclass attributes are not in the result list when the argument is a class**. 
So why not provide the denizen with a resource or project that has implemented REST properly? Based on your github commits I'm not quite sure where the arrogance or argumentative behavior is coming from. Humble yourself. 
Relying on the behavior of an overridable method may be a poor choice for the library. Python 2.6.6 (r266:84292, Dec 26 2010, 22:31:48) [GCC 4.4.5] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; class Foo(object): ... def __dir__(self): ... return ["HAT"] ... &gt;&gt;&gt; dir(Foo) ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__'] &gt;&gt;&gt; dir(Foo()) ['HAT'] If the author truly wants *any* available attribute then the built-in dir() is not the right approach vector. It just happens to mostly do what is desired.
The hardest part is *thinking* N-dimensionally. Very useful in certain situations.
&gt;The hardest part is thinking N-dimensionally. Ain't it the truth...
what's the problem with that?
&gt; Relying on the behavior of an overridable method may be a poor choice for the library. Guess we'd better stop writing libraries in python then!
It's sometimes (use your judgement of course) worth doing for interoperability -- make sure that what's upstream isn't feeding you weirdly typed data that could cause issues or your code isn't feeding unexpected types downstream.
requests, ignore the rest.
Given that this appears (from the comments in the C code) to be a design decision rather than a bug, would it be more appropriate to write a PEP proposing the change than to list it on the issues tracker? Genuine question as I am not intimately familiar with the procedures for making changes to Python.
It's not included in the [release schedule](http://www.python.org/dev/peps/pep-0429/), so my guess is no.
Multiindexing might be easier http://pandas.pydata.org/pandas-docs/stable/indexing.html#hierarchical-indexing-multiindex There's no more special code for 5D than there is for 2D
Hmm this *is* better...
*sigh* Relying on the behavior of this particular method may be a poor choice given the requirements of the library this developer is working on given the override-ability of said method. justanotherbody's statement was obviously not meant to be general.
&gt; dir is good for ipython and probably for tab completion suggestions. Given that the OP is concerned with autocompletion... I would have thought he'd welcome and approve of the behavior of dir. Yes, you're trusting the author of some_module to expose useful things, but I'd rather do that (and that seems more Pythonic) than get the complete list and do whatever kind of funky filtering I think is best.
Did you read the OP? The point is that, yes, there are indeed things you might want to autocomplete that aren't in `dir`.
if jedi started calling `dir` or trying to execute my code in general, I would be much more likely to stop using it.
Gevent and multiprocessing make a great theoretical combination when you need to work with both heavy IO and heavy CPU in Python. Unfortunately, they don't play nicely with each other. This library has the potential to change that.
Yeah, as far as I knew dir() and help() were commands that were meant to be use interactively, not in your actual code. Even the `dir(foo) == dir(Foo)` up there looks pretty strange to me and it sounds like something that can be done much better some other way.
https://code.google.com/p/buckingham/
hey, she gave a git/python tutorial when I was just starting out not too long ago! good to see she's making waves. 
Ben Orenstein (of thoughtbot, in Boston) gave a great talk on giving conference talks at the Portland Rails conference. See http://www.youtube.com/watch?v=l9JXH7JPjR4&amp;feature=youtube_gdata_player.
thanks, I'll look into it.
You could try [numba](http://numba.pydata.org/).
And you needed to reply... why? 
&gt; I'm not quite sure where the arrogance or argumentative behavior is coming from. Humble yourself. Ah yes, the well-known arrogance of deferring to the creator of a concept for its definition and requirements instead of making shit up as you go. I believe it's right next to the arrogance of quoting the documentation to explain what a construct is supposed to do, and the arrogance of reading up on a subject before talking about it.
I have no experiences with it and just found it yesterday: https://www.openshift.com/developers/python
This is my first PyCon UK too, but my experience with other events such as BarCamps and the like is that people is very friendly and you won't have any problem to meet people and ask questions (specially if there's time for a beer!).
How should it be read?