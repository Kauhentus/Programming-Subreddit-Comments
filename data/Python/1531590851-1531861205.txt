import re import requests import time base\_url = "[https://www.free-ocr.com](https://www.free-ocr.com)" r = [requests.post](https://requests.post)(base\_url, data={"userfile\_url": "[https://i.redd.it/s8f5o63sux911.jpg](https://i.redd.it/s8f5o63sux911.jpg)", "submit": "Start"}) result\_path = re.findall("/FW\[\^''\]+", r.text)\[0\] \# wait for server to process time.sleep(5) res = requests.get(base\_url + result\_path) text = lxml.html.fromstring(res.text).xpath("//textarea/text()")\[0\] \# apply fixes text = text.strip().replace('f"\\'', "f'''").replace("\*A11", "\*\^11").replace('}"', "}''").replace("1‘", "f") \# do you dare? eval(text) \#prints \*\*\*\*666\*\*\*\*
You could of course try this... import re import requests import time base_url = "https://www.free-ocr.com" r = requests.post(base_url, data={"userfile_url": "https://i.redd.it/s8f5o63sux911.jpg", "submit": "Start"}) result_path = re.findall("/FW[^'']+", r.text)[0] # wait for server to process time.sleep(5) res = requests.get(base_url + result_path) text = lxml.html.fromstring(res.text).xpath("//textarea/text()")[0] # apply fixes text = text.strip().replace('f"\'', "f'''").replace("*A11", "*^11").replace('}"', "}''").replace("1‘", "f") # do you dare? eval(text) #prints ****666****
You have room for improvement in your packaging. That will help in adoption. 1. `requirements.txt` while convenient is actually designed to pass requirements to another developer working on the same project. It was never intended to be used as a way of installing a package. 2. All python packages right now should have a `setup.py` file. You'll note that `requirements.txt` is actually a DSL. Opening it up and reading it isn't a substitute for the logic required to parse a requirements.txt. So you will either have to hack out a solution which explicitly uses `pip._core` or you will need to obsolete `requirements.txt` and duplicate all of that information inside of `setup.py`. 3. Most packages do not have a `run.py` at the top. Instead they follow one of two patterns: a. a folder with the same name as the project b. a file with the same name as the project Speaking of naming. Because packages can be used within a python script, you'll need to follow the same rules in the naming of the folder/file as you would for a variable name within Python. So in your case, that folder or file should be named `auto_py_to_exe`. Since you have a `web` folder, I highly recommend relocating `web` and `run.py` to the new folder. 4. Many users of python don't use Windows. Exe implies windows. I'm not sure if your intention was to only support Windows. However, there's a way you can identify what you intend to support by using Python's [Trove classifiers](https://pypi.org/pypi?%3Aaction=list_classifiers). There is a way to add those in your `setup.py` (classifiers=list_of_classifiers). 5. To make your package pip installable, you'll need to copy it up to pypi. Today's mechanism for doing that is to use `twine`. 6. You'll likely run into an issue when you try to use setup.py in that you're not actually sucking in your `web` folder, which is a critical component. To include those files, you'll need to create a `MANIFEST.in` file, which `setup.py` will use. 7. If you'd like your package to be callable via a module (e.g. python -m auto_py_to_exe), then you'll need to basically create a run wrapper under `project_folder/__main__.py`. Make sure this has a `if __name__ == "__main__"` line. 8. I think if you're releasing something that actually uses pyinstaller under the hood, you should demonstrate that your process works by actually building a single-file invocation of pyinstaller as a release. I note that all of your releases right now are actually source releases. I suspect there's more, but I think all of that is something you could work on if you were looking to make this more polished.
I just asked a [very similar question](https://www.reddit.com/r/learnpython/comments/8vc3zd/what_are_the_canonical_python_books/) on /r/learnpython! 
Thanks for the kind words! Any code critiques would be appreciated as well. I've been working on this for so long as a personal project that I think I started to get blind spots for obvious improvements. 
That just seems marginally less readable for the sake of saving a few lines to me. 
 del cleese
I am not familiar with those books but you could maybe have a look at my idiomatic materials [here](https://github.com/jerry-git/learn-python3/blob/master/README.md#idiomatic-python). Won't cost you anything :)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jerry-git/learn-python3/.../**README.md#idiomatic-python** (master → 2c66ca9)](https://github.com/jerry-git/learn-python3/blob/2c66ca959b6b0b25f4d602e65c190a9f84fb40db/README.md#idiomatic-python) ---- 
Bad bot.
&gt; Update: After this post was originally written back in 2014, subsequent discussions on the core python-dev mailing list led to the conclusion that the release after 3.9 will probably just be 3.10 From Nick Coghlan, on [his speculations on Python 4/PEP for Py4000](https://www.curiousefficiency.org/posts/2014/08/python-4000.html) So back in 2014 the thought was 4.0 after 3.9, but now its not so clear. Tbh I kinda want 4.0. The 2 to 3 switch needs a redemption, and there's a large lack of forward compatibility in Py3.4 to 3.8, which fucks over library maintainers. On the other hand, Py2 solved this problem by actually caring about forward compatibility and using future statements, which the thought of stupidly went away with in Py3. Not to mention versions 3.0-3.3 are highly regarded as a joke, and actually 3.4 was 3.0, 3.0-3.3 was 3.0beta.
Thanks. Yeah I'm probably going to change it to csv. Xlsx doesn't seem to be very popular :) pandas seems to handle either or with ease though
RIP in peace
I should stress that my Python skills when I wrote this were very minimal. I used this project as a way to learn Python. My variable naming sucks as I wasn't educated at that point. I've got decades of programming experience, but only weeks on Python when this was written. Despite the code shortcomings, it seems like a great thing for people just starting out that want to add something nice to their programs. Perhaps a newcomer has written a little utility that will do some kind of processing on all files in a folder. Rather than keying in the folder name on the command line, it would be super-simple to add a GUI to it to collect the folder name and then output the results using a progress bar and a message box when completed. I heard the comments on multiple files. I was specifically looking for a single file solution that "just worked". I did this because I tried SO many packages, looking for a light-weight GUI before I decided to write my own. Many FAILED outright due to complexity. It's intentional that I have one file. The code was not meant to be studied or modified. It was meant to be used. I spent more time working on the interfaces than the internals. 
Nice!
Thanks for the tip! I really would like a physical book though. It is just a medium I vastly prefer. 
Cool !
Fun
&gt; If it feels more natural to humans, isn't that a good reason to use it? I just answered this in my comment above: No, it is not a good reason to use it. Many bad things feel natural for humans to do, for example, jaywalking feels natural because it shortens the route between your current location and your destination. Many people do it because of it. And yet no sane person would advocate jaywalking as a good practice for road safety. You are also mistaken when you think that what feels natural or easy __for you to do__ makes any difference to anyone who needs to __deal with the consequences of your work__. It is usually quite the opposite: to make something easy for many people the person who does it must work hard. For example, a graphic designer must work hard on designing a font in order to make it readable, she must measure the proportions, run trials, design multiple variants and compare those. If, on the other hand she was to do what's easy for her to do, the fonts would look like proverbial "doctor's handwriting".
Good one. I wrote a similar one for WhatsApp and Hike to analyze the top emojis and words : https://github.com/tirkarthi/chat-analyzer
Your post was removed for violating Rule #1. You may have better luck posting this in our sister sub, /r/learnpython.
Your post was removed for violating Rule #1. You may have better luck posting this in our sister sub, /r/learnpython.
Your post was removed for violating Rule #1. You may have better luck posting this in our sister sub, /r/learnpython.
Your post was removed for violating Rule #1. You may have better luck posting this in our sister sub, /r/learnpython.
Your post was removed for violating Rule #1. You may have better luck posting this in our sister sub, /r/learnpython.
It looks great! Why why tkinter? It's such a mess
Your post was removed for violating Rule #1. You may have better luck posting this in our sister sub, /r/learnpython.
I'm working on a training course manager for my local running club. The app is going to be Django based and eventually hosted on Azure in a docker container
If I could only have one: fluent python. Python tricks is good, but there is so much more info in FP
Waiting for you to take my advice.
&gt; That sounds like something is seriously wrong with that program's use of asyncio. If it takes too long to get to a scheduled task, someone is hogging the event loop - either doing CPU work in the event loop thread (instead of using `loop.run_in_executor` or equivalent), or doing blocking IO. If the program finishes before `await some_task` completes, maybe awaiting it wasn't all that important? I believe you are misunderstanding-- it is not a matter of the author writing bad blocking hogging code, but rather, he wants to preemptively push coroutines into the loop. He truthfully doesn't care when it completes, it's just very nice if it is already ready, which it could theoretically be if there's enough time in between to execute these items, but he doesnt know, because the other blocking thing is out of his hands-- like the user filling out a form. Theoretically, the user could be filling out the form very quickly, causing events to fire and context switches left and right, never giving enough time for the animations to finish. The problem being, if the animations don't finish, the user won't see the "submit" button at the right time. Thus the developer says "okay, on the 65% completion mark, the events fired can wait, we need to do this animation". On the other hand, the user may not know how to touch type, and thus fills the form out slowly. While they are taking their breaks, the animations occur because a spot in the event loop is freed up. Think of it like HTTP2 server push if that helps-- the server predicts what static resources will need to be sent later, so it sends as much as it can *now* in the background while the user is reading the current page. Sure, the user may never go to the next page and never see the cool CSS animatiom that awaits him (pun not intended), but if he does, he doesn't have to wait for the CSS file to go through, most of the time (as in, unless the server doesn't preemptively send the resource in time because it is sending lots of resources). &gt; Don't get me wrong: I can imagine that there are valid use cases where one is using asyncio correctly and still needs to resume a task right away. But that sounds like expert territory. Maybe it is expert territory, maybe it isn't-- there are some use cases I've seen in async programming that use such a thing extremely cleverly and simply. The problem here is asyncio-- Python added built in coroutines, but limited the functionality of the event loop. On the other hand, frameworks such as gevent allow you to use the functionality I describe, but under a different construct-- green threads / greenlets, which on top of being more ugly because of the boilerplate, the developer gets timing issues in their main thread because the developer explicitly controls not the context switch itself, but when a context switch will happen, with `gevent.sleep`. This leads to some infamous bugs, such as when greenlets "spin in their graves". Twisted / Tornado give you the callback functionality I describe, to an extent, but also had extremely ugly boilerplate and forced function closure rules, which makes things confusing as to how the dev should proceed. &gt; The presented use case doesn't go in the details why the task would need to be continued right away: &gt; &gt; This is a common thing to do in async programming, especially in JS with web requests. You set a request to occur when available, and you really don't care when it happens, but at some point in your code you need to make sure it is done before continuing. &gt; The above is a perfect description of `await`. Sure, other callbacks and tasks can run before getting to the task you're actually interested in, but that is a consequence of the cooperative multi-tasking system. Like when you `join()` a thread, you have no guarantee that other threads won't run before the OS schedules the thread you're interested in. As you said, "you really don't care when it happens". The problem is the implementation of await acts like a very funky fork in the road. It makes you fork at point A, drive in a circle, on the way going to point B (and any other forks), and then back literally right after point A, and then the road continues to point C. It also allows you to dribe your car off a broken bridge, because any callbacks you add to task don't have their state saved anywhere. The context switching is like a clown's juggling nightmare, because it forces you to make these circles instead of just switching lanes on the road to hit point B before going back to the lane you were already in. Sure await will still be used, but it doesn't have to be to get to point B. This also allows more complex and more simple branching structures. &gt; I would like to understand the "continue the task right away" requirement, especially one that is not in the context of incorrect use of asyncio. Maybe it's not a correct use of asyncio specifically. Maybe asyncio was chosen to be limited, for whatever good reason. But this is a correct use of async programming, and after all this time to finally have an async solution built in, but have it nuetured in this way-- people would much rather use the already known async libraries that while they may not have direct comparisons/constructed ideas, but they have this functionality I describe, which can be mixed with asyncio to have almost all the functionality, but never all, because of the boilerplate. &gt; Yup, I would love it if `loop.call_soon` and `loop.call_later` returned something awaitable. On the other hand, that is about the API ergonomy and not an architectural limitation of asyncio. It is almost trivial to get the needed functionality with the appropriate wrappers (e.g. use `create_task` instead of `call_soon` or `create_task` combined with `asyncio.sleep` instead of `call_later`). That kind of thing is what I meant by rough edges. Hence being a thin wrapper. I mean, it would need to do more than this to acheive the functionality I wish, specifically, * a subclass of `types.coroutine` and `asyncio.tasks.Task` that interlink the spread of information between them, and a decorator like `asyncio.coroutine` that will appropriately convert standard and generator based coroutines into this new subclass * methods for chaining this subclass with other functions and other instancees of this subclass, creating representations of linked instances * the ability to directly await on an intermediary function/callback/coroutine * a thin wrapper around the event loop that is smart about whether it needs to do things in a "thread safe" way or not * a default "smart" event loop that lives on a separate thread and gets created as soon as needed and closes at process exist / user discretion * the previously mentioned coroutine decorator and instances of the coroutine object have the ability to choose which event loop it will run on, defaulting to the "smart" loop * this subclass will have the ability to be subclassed, with the `__call__` method taking two arguments, `resolve` and `reject`, which are specially prepared and injected by the metaclass's preparation hooks. This last bit is less necessary and just acts as a headstart for those that come specifically from JS. &gt; I actually like asyncio's primitives that convert between functions and the different futures: `run_in_executor`, `wrap_future`, and `run_coroutine_thredsafe`. They allow very elegant bridging between asyncio and thread-based futures, yet they are totally underrated. Despite being important building blocks for integrating asyncio into an existing program, they are omitted from introductory texts. All asyncio tutorials I've seen simply assume that you are either writing an application from scratch or that you have the resources to convert your whole code base to asyncio at once, perhaps allowing for a `run_in_executor` here or there. Needless to say, that is far from realistic for anything except toy programs or short scripts. I do too, but here's the thing-- the first method allows you to run threaded code in an asynchronous context. The second allows you to convert between a threaded future and an asynchronous one, acting like a lower level compatibility layer between the two. The third allows you to run async code in asynchronous contexts that live on a separate thread. That's what's needed, by *default*. There should be such a seperate thresd and loop to boot, *by default*, or at least that's how other languages do it. In Python the thread has to be manually created, a loop manually set on it, and so on. &gt; I look forward to your wrapper. Will it be on top of asyncio, or a completely different library like trio? Thin wrapper on top of asyncio. In theory it could use the trio event loop, or any other, the only problem is the event loop needs to understand what an asyncio Task is and how to act with it.
My only complaint about f-strings is that they do not play nicely with i18n. So if you are doing work that may need to have some translations at some point, you may run into a few unexpected bumps. Source: https://bugs.python.org/issue33189
Many good functions for this sort of thing can be found here https://github.com/django/django/blob/master/django/contrib/auth/password_validation.py
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [django/django/.../**password_validation.py** (master → dd3b470)](https://github.com/django/django/blob/dd3b4707198f17557fdd9fe7a6fd9025b23dcaf3/django/contrib/auth/password_validation.py) ---- 
Awesome 
You could give [Lomond](https://github.com/wildfoundry/dataplicity-lomond) a try. It's already pretty fast, and there are some additional C optimizations I'm working on. 
You need a security audit of it next
Last I checked, tornado was a very fast (maybe fastest?) microframework for web apps. I believe it also has built-in websocket support.
Yes, the best is to do some measurements for your own. I hope I helped at some level. Also don't take downvotes serious.
Here's my question for you: If you want the discussion of PEP 572 to end, is it better to ship it or revert it?
What are your CPU governor settings? 
Eventually, people will find out, that this PEP helps them. :) Actually, I don't really get why is there THAT amount of hate about it. Actually, I love it. I assume, some people may not like it, but not that much. I am just gonna wait it starting being used in real-life code. I think, it will be cool.
You may he right; I didn’t follow the discussion closely, but it seemed Guido was pushing pretty hard for it. I guess the process was more grey than that. Ah well.
Agreed. Run it through PYT, Bandit and Spaghetti. If OP wants I can help with this.
I was wondering the same thing. A web or mobile app would be better.
I wonder if the real story behind 572 is that some company pushed strongly for :=
You delivered. Thanks you so much.
Here's my question for you: if there's a decision process in place, and that process is followed correctly, at what point do you accept that it made a decision you don't like, and that's sometimes the cost of having a process that lets lots of people participate? At what point do you stop jumping up and down and screaming and stomping your feet demanding do-overs, and accept that a decision got made according to the correct process, and now it stays made? Because what you're advocating for is literally "anyone who's willing to be an asshole gets a veto". If you don't like a decision, you'll just start being vicious to everyone else, and then say it's their fault for trying to make such a "divisive" choice, they forced you into this, and if only they'd roll it back you'd stop being so awful. That's a terrible way to run a project. And people who would do that are terrible people. The PEP got accepted. It's time to move on with your life now.
Usually if I'm planning a big change to my code, making it more or less modular, shortening loops into comprehensions, etc., I'll give myself a day or two to just let it percolate in the back of my mind for a bit. If it still seems like a good idea after a couple days, then I'll do it. That cuts down on the knee-jerk reactions that I regret later.
Agree with you, except for the jaywalking. I live in a state where "right on red" is the rule, and in a multiple-college city where inexperienced drivers are common. It is safer here to cross the street in the middle of the block, where you can see what's coming for half a block both ways, than to rely on the WALK sign, faded crosswalk stripes, and those drivers' awareness. Just sayin. 
I appreciate the kind words 💖 I also can't agree more with you. 😄 I've watched Ned's Loop like a native talk many times. I linked to his talk before mine in the "related articles and videos" section for this reason. Ned's talk is a much broader tour of looping in practice while I focus specifically on `for` loops and the iterators that power them. If you haven't watched Loop like a native, definitely watch it before you watch Loop Better.
Nice try Mr. FBI man 
It's something we all want
give [autobahn-python](https://github.com/crossbario/autobahn-python) a try using [wsaccel](https://github.com/methane/wsaccel) C extension to speeds things up. that said, these days &gt;Autobahn contains NVX, a network accelerator library that provides SIMD accelerated native vector code for WebSocket (XOR masking) and UTF-8 validation.
I'm refining my weekend project https://github.com/codepr/tasq, a brokerless job queue allowing dinamically defined tasks withouth having workers knowing about the code they have to execute, adding some feature like process pool for CPU bound related jobs.
[ A N G E R Y ]
The web application itself should not be doing the heavy lifting. Most likely you should look into decoupling the heavy lifting into an independent worker, something like a [Celery](http://www.celeryproject.org/) worker. That way you can scale it separately when the time comes.
I personally prefer not to name custom exceptions BlahError, BlahException, etc. with the justification that any context where you're using this it should be painfully clear that it is in an exception (raise X, except X). ref [https://youtu.be/o9pEzgHorH0?t=616](https://youtu.be/o9pEzgHorH0?t=616)
Tkinter is awesome.
Assuming it compiles, I will guess the answer is either 1, None, or recursion depth exception.
Congratulations, you're writing security software! Getting that right is hard. Just to be sure, are you aware of this recent bug relating to integrating with GPG? https://arstechnica.com/information-technology/2018/06/decades-old-pgp-bug-allowed-hackers-to-spoof-just-about-anyones-signature/
I made that decision a few years back, there were a few reasons. First, I was inspired by a talk by Russell Keith-Magee making the case for using tkinter, [Tinkering with Tkinter](https://www.youtube.com/watch?v=yI7NYgP54sw&amp;list=PL68kZQfCPMT7tTApDvwelkbIoy16YtFW6&amp;index=4). Second, I wanted to use as few external libraries as possible. And third, I'm something of a contrarian, so I wanted to demonstrate that you can make a cool or at least decent looking GUI with tkinter. I even grew to like tkinter while working with it. 
Yes, this is something I started looking into late last year, but it's not something I've had done before, and then life kind of took over and I didn't have a change to pursue it further. I'm open to suggestions and resource son that front. I'd also like to get a formal code review for it, since this was a massive learning process for me. 
That would be amazing. Any links/resources/advice in this regard would be greatly appreciated. 
I figured you wouldn't answer my question. You assume everyone who disagrees with this PEP is an a hole which is ridiculous. 99% of python users don't know this feature exists. To say it's time to move on is silly. The differences of opinion still exist. Reverting and postponing is the only way to truly make the issue go away for a while. Even people who like this feature should be a me to see this basic logic.
Check out /r/learnpython
Thanks
Are you having a problem? Please describe the problem and the output you receive. Also, paste your code into the post (With 4 spaces before each line so it formats as code). 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Yes, I saw that. I'm pretty sure verbose mode is not enabled anywhere. I would like to get a formal security audit for the project, as I've been working on it for about four years, and it would be a shame to let it gather bugs and dust. I actually began to grow concerned about python-gnupg when isislovecruft's rewritten version of it was released a few years back. 
this is awesome
Shouldn't you be using the gpgme bindings instead of interfacing using a shell script? It seems like that would solve this.
thanks, I've heard about celery before. I'll look into that 
Also, if he renames the run.py file to run.pyc on windows, the black cmd window won't appear when you execute the program.
Oh god, I thought the message in the readme would have pointed people in the right direction if they were curious; sorry about this. If you go to [auto-py-to-exe-pypi](https://github.com/brentvollebregt/auto-py-to-exe-pypi), this is actually the PyPI version of the project. I decided to keep the original repo for two reasons. One was to keep it in line with the video (mostly); I know the video will help a lot of people in the future so I didn't want to affect it. The second was the original is easier to read for newbies. I know they are not very different at all but small changes like moving it to a new folder, creating blank files and having a setup.py can be confusing when you are first starting. I am very very sorry for this, I'll add the PyPI version to the original post. #4: It's been fully tested on Windows and Linux, I unfortunately do not have the resources to test on Mac. #7: I used entry-points but do you think this is a better method? #8: What do you mean by this? Build the whole project into an exe? I think bundling pyinstaller might be some effort.
Haha, thanks for that. I am so used to writing it out now in YouTube comments, it just flows.
I really like that. Great work. Side note: I remember when PGP Desktop was available for Windows. It was free (as in beer), simple, clean, and it worked. And then, one day, ::poof::, it disappears from the internet. The GPG suite is ok, but it's not quite as simple and intuitive as PGP Desktop. And without simplicity, a technology doesn't gain mass normie adoption. It was like Winamp, but for encrypting things. I miss it. 😔
Nope. Just more linksynergy redirect referral link SPAM.
You sir, just got yourself a free code review! Will post results later, hopefully good ones
One would imagine with all the work you put into this there is someone somewhere with the motivation and ability to do so. Sadly, that’s not me...
Do you mean in my examples? I didn't try to line things up, use multiple colors, etc, in the form that displayed all of the Widgets. The reason is that I didn't want to clutter the example code with options that line things up precisely or set differing sizes and colors for text and buttons. Maybe I should create a form that's well-designed to show in the readme. It would be more of an advertisement or perhaps an advanced example. If you can point me towards an image online somewhere of a screen that you think looks nice enough to copy, that would be really helpful.
\[fuckin' bokeh, man\]([https://i.imgur.com/FK4nFbS.mp4](https://i.imgur.com/FK4nFbS.mp4))... if there are any bokeh peeps out there, i'd actually love to get some input on what i might be missing. so this all started because i wanted to render indicators pointing at datetime/price coords. started messing around with the built in triangles. those render pointing up, which ended up overlapping quite a bit. ok. rotated them as desired only to find that the triangles are anchored in the middle of the shape to the intersect coords. awesome. tried messing around with timedelta offsets until my brain started to leak out of my ear a little... popped into the bokeh chat...was told the functionality to reposition anchor for shapes with polygons has never been requested...(whaaaaaa? comethefuckon). ok. sure let's assume that need has never arisen. what do? oh. draw them manually. how? patches. patches? patches don't have the ability to use pixels for sizing. huh? i mean i get how patches work with scalar arrays, but...you're telling me that no one thought about drawing based on intersection and then two points based on pixel distances? cool. yeah. i love drawing static size shapes on variable x and y axis comprised of datetime and price... legend doesn't pick up the shape. just the color. and while triangles remain the same pixel size when you zoom, patches scale with zoom (of course). it's working well enough at the moment, but if someone with more bokeh experience can provide a different approach which doesn't require reinvent the wheel... sorry for the rant. sort of. i love this package, but some of the parameter inconsistency is just making my eye twitch a bit last couple of days...
Wow, thanks! Any feedback, critique or review would be much appreciated. 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
The Dask docs were pretty good last time I saw them. Take a look at the multiprocess module if your task can be run in parallel. I like multiprocessing with namedtuples. Generators can speed things up too. Have you considered a database like postgresql? Even Dask recommends Postgres for data under a TB. 
heh, I actually considered adding a "No Government" clause to the license, that way if anyone ever ended up being prosecuted on the basis of some communication with a government agent through the app, I could have the option to sue that government for copyright infringement. But IANAL, and that seemed really complicated. See: https://bipcot.org/
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
You're correct, Idk why the other guy was updooted
Because in most use-cases the amount of string formatting you do is way too tiny for even a 10x improvement in difference
If you're going to publish python code it's a good idea to read PEP8. 
And ipython's shorthand import os os? os?? 
&gt; Selenium scripts failed each time a CSS style changed I'm not personally that familiar with Selenium, but I'm pretty confident you can write tests in it that test the DOM structure (which shouldn't be affected by CSS at all). Are all your tests screenshot tests? Anyway, I'm pretty sure Selenium is the right tool for the job here. I'm sure you could use web scraping frameworks to cobble together tests, but they're not really designed for that, and the ergonomics are going to be terrible. Selenium is *specifically* designed to do what you seem to be asking for, so I think you should give it another look!
&gt; I missed couple of files when it being packed because there were not in setup.py So make sure they get picked up ;) You might find the MANIFEST.in file helpful.
w
Looks good, good job!
You should probably never be messing with defining a dunder method except in a class definition - trying to achieve what is achieved with dunder methods lines up pretty perfectly with the purpose of defining a class. You can do something like this class Foo: pass f = Foo() Foo.__call__ = lambda _: print('works') f() But be aware that * It's rarely if ever the right way to solve a problem * It's not necessarily going to work depending on the implementation of the class in question. For example the builtin `str` class. Subclassing and overriding some behaviour, if that's what you really want, is the way to go.
Sure here is one for static code called PYT, https://github.com/python-security/pyt/blob/master/README.rst , Bandit is probably my favorite https://pypi.org/project/bandit/ have a read at the docs , if you need more help or a deeper dive on it just pm me.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python-security/pyt/.../**README.rst** (master → e692581)](https://github.com/python-security/pyt/blob/e692581255d551ae13963dab8913f729cb5023ee/README.rst) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e2eo9ff.)
Its not always the right solution, but I found Datacamp's Dask course to be really helpful in understanding the ins/outs of out of memory computation. Before even touching Dask they dig into generators/etc so you develop a holistic view of the problem you're solving. Despite suggestions, I had a pretty tough time with their docs.
Cool, thanks!
Apparently the opinion on this is very subjective. Honestly, I think its immensely more writable without compromising readability one bit. I have been coding in Python for 12 years now and I always felt this feature missing. From my point of view, this is greatly welcome. I would have been happy with using the 'as' keyword, but I don't think that matters all that much. Of course, your opinion is probably as valid as mine, but the core devs opinion matters more on this matter (even more does the BDFLs). With the deluge of negative opinion on this feature... I feel I am a little lonely on the full support boat. But I absolutely love this feature, and was already missing it even before it was proposed.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Wow, I understood that reference. It took a minute.
I am just getting into this, how do I know which memory values to read? Will you write something up on this?
I want to build a neural network that can play blackjack. Ironically, the hard part is making the blackjack game lol. Anyone have a script that can play blackjack in the console using OS? 
I'm having a bit of fun writing my own websocket handler that's a little more performant than what we currently have (naive benchmarking has &gt;=2x the throughput), it currently does exactly what I just said and passes the autobahn testsuite; however has no testing, no rfc7692 support and could probably be improved in many other ways that I haven't bothered to figure out yet, probably ways that take the performance down to be on par with competing libs c: I can't decide on whether to stick with one C extension or to cythonize a couple aspects like the framing, iono, we'll see how it goes or whether I lose interest first. The "client connection" side of things is hacked together, it wasn't the main focus at all, but I tacked it on for funzies. It's just something small and yeah, it's re-inventing the wheel, but I'm doing this as a hobbyist, not a job c: Current implementation is here [https://github.com/SkylarFlare/aiowebsockets](https://github.com/SkylarFlare/aiowebsockets) Please critique if you have time. 
Thanks. I'll be following this closely.
I've never enjoyed a book. Funny that.
I'm messing around making my own right now, I wouldn't suggest using it, I consider myself an amateur, but it's probably the fastest one I've tried (server side), don't quote me on client performance. I've got some other improvements (performance and otherwise) to add on and some major modifications in mind, if I don't lose interest. The client side was hacked on and I'm not sure how compliant it is. [https://github.com/SkylarFlare/aiowebsockets/](https://github.com/SkylarFlare/aiowebsockets/)
tkinter can be a major headache but it's still my favorite GUI library to work with. nice job! very slick 
Look into https://kivy.org
Nice, exactly what is in my to do
I'm not good with frontends, that it would take too long for me. But if you want you could do one
This is an exceptional situation, and is not what I was trying to say. I wasn't trying to say that jaywalking is always wrong in all contexts, it's just an example of how often times things that are easy and natural don't lead to best outcomes. Another example could be how easy people can fall pray to demagogy: because it is usually construed in such a way as to convince someone who doesn't want or is incapable of critical thinking. Being non-critical, using intuition instead, or relying on superficial characteristic of the claim rather than trying to analyze and prove it would be very easy and natural (compare the difficulty of writing a mathematical proof to the difficulty of accepting political agenda of a presidential candidate).
&gt; I am surprised that the community are suddenly such language design experts "community" here means python-dev mailing list: core developers of python. &gt; lets wait and watch. As in: "implement and then wait and watch?" This is rarely an option for a programming language: once the feature is in, it's in and will stay in the language forever.
Classic case of [RAS Syndrome](https://en.wikipedia.org/wiki/RAS_syndrome).
Thanks for the discount to $9, but in lesson 38 you say "since we already know how to use selenium etc.." but the introduction to selenium isn't until lesson 40?
Most likely no, but you can execute commands with Python just like you would from a command prompt. What OS are you referring to?
There is an os library that allows you to execute those commands like a command prompt. I don't know if that was what you were asking. I'm using Windows 10, if that was what you were asking
&gt;Is there any way to ... Yes. There is a way. The rest of the question doesn't matter - this is software, and everything is possible! But that's not a useful answer, because it's not a good question. Do you know how to make admin accounts _without_ python? If so, /r/learnpython might help you extend your knowledge. If not, this is https://en.wikipedia.org/wiki/XY_problem - how do I do confusing thing Y (make admin accounts) with supposed solution X (python3). Personally, I want to make *admin accounts for AWS S3 buckets*, so I would use the Boto3 library. Is that what you meant? Probably not.
I would trigger the appropriate PowerShell functions through Python. 
I left the question fairly open to see what you guys would do. I am not sure how to do it or what libraries to pull from or anything for that nature. Any suggestion helps and I will look into it. Thanks!
He's not even leaving the project, he's just not going to be the head of it anymore. That's quite the assumption you made there.
Please, someone ELI5 so I and others may understand the capabilities/purpose of such? Thanks in advance! 
Yes. It is standard for a wheel to include the dependencies. An extension module using libcurl would include libcurl. Pillow is a Python wrapper around the hidden extension module libImaging. Its wheels bundle libImaging and its dependencies like libjpeg, etc. Any required lib except for the 20 or so in manylinux1 (essentially glibc) go in the binary wheel. The frustration is that getting dependencies in wheels is contingent on an implementation detail: there has to be an extension module to get dependency support from tooling.
PyCharm if you want the full Python IDE experience VS Code if you want a modern lightweight editor that just works
There isn't a single universal "best" for everyone, but PyCharm is really good.
Thanks !
Then what about Anaconda ? How's is it ? 
What research have you done?
Anaconda is not an IDE.
Can you elaborate Please coz I've used IDLE python only !
Anaconda is just Python bundled with some data science modules out of the box, more or less. It's not, itself, and IDE, though I think it includes the Spyder IDE in the package.
Thanks! 😀 
does tornado provide a websocket client?
Hello! I'm a bot! I see someone has already suggested going to r/learnpython, a sub geared towards questions and learning more about python. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Every day, almost, some one posts this same question, and the answers are always the same: * No such thing as "best" because human beings are different * pycharm, IDLE, VS Code, Ecliose, etc Doesn't anyone search before posting? Or at least lurk for a bit and see what's happening.
Asking for the best IDE is like asking for the best shoe. Some people prefer adidas. Some people hate Nike. Some people don’t care and go with the cheaper one. Etc. in the end they all work, it’s just preference. Anyone who says one IDE is the best above all else in all cases isn’t worth listening to because there’s no such thing. That said, you have some choices! You could set up a vim/emacs + tmux workflow, or go with something more user friendly. Pycharm is great, vs code as well. There’s also Spyder, and some people are trying to use jupyter *lab*. I’m sure there are more. My suggestion is honestly just try them out. Use vs code for a week or two, then use pycharm (and with an open mind). You’ll find something you like. 
I mainly write little scripts that automate some of my tasks at work, and I am very happy with VS Code.
I second that: VS Code + Python plugin.
You're already in a very good state if you're using high level GPG functions instead of touching anything having to do with AES and other crypto primitives. You're using high level libraries and that's the right way to do it. People who want to use crypto generally should stick to libraries for GPG/TLS and some of those other popular high level libraries that have been audited. Though I can't say I see a huge benefit to tor here unless you picked it for some special reason. This is for just having a friend/peer communicate with you, a known party? Then why not just encrypted through the normal internet? Tor is for anonymity and anonymity alone. If you're telling them what tor hidden service to connect to, then that service isn't anonymous. You're linking it to your identity which basically makes it pointless. However, if you want to keep that communication link open and for some reason you might be abducted and that was hosted on a server they couldn't find, then it might have a point. It's something they couldn't find and couldn't take down if you covered your bases. Otherwise, if this is just for secrecy and authenticity, keeping communication private and proving it's the party you wish to speak to, Tor doesn't have much point. Maybe if you didn't want ISPs to be able to determine who the other parties are you're talking to I guess, then it can be useful. Or if you wanted to remain anonymous to the users you chat with but wanted to prove it's your same anonymous identity too maybe. But Tor is very special purpose for anonymity, so you kind of need to have a real use case for that.
I'm asking this question , coz I've only used IDLE python only and was try to know about a good IDE that can be used for ML and DL purposes, plus some other stuff like creating WebApp etc. Searching the internet for this , you get bombarded by sites with various IDE . I want to know from experiencd programmers that which will the best for the purpose. 
I've honestly never had a problem just using plain Notepad++. If I want something quick, I'll just use IDLE. Then again I never make really big projects with Python, usually small scripts for small tasks or something to query my databases from time to time as a cron job. VS Code is a really good editor though, and I just found out it's multi platform too!
Good bot
Security apps like this is best to have local. Using a web app to create encrypted messages would be a security nightmare.
Dear sir, you've just written a piece of software I wanted to make myself but postponed zillion of times due to lack of time. THANK YOU!
I'd probably just execute command-line actions to create accounts ps! you can use powershell by executing "powershell -Command ..." from the command line
Thanks for the feedback! The latter cases you identified were some of the reasons I decided to use Tor. But there were also some very practical reasons. Early on I struggled for a while trying to figure out how to establish direct P2P comms beyond a given node's LAN, since behind a router/firewall your device does not have its own public IP address. If you own the network, then you can do things like punch a hole in the firewall for the given port, and then do NAT forwarding. But that is a pain, and what if you don't have access to the router or firewall to set up the forwarding? Another alternative was to set up a public server with its own IP, and mediate/connect nodes through that, but then you also don't have direct P2P, and now you're reliant on that server. When trying out these sorts of solutions over the normal internet, it also seemed necessary to use SSL for all the networking protocols, since that is standard practice, but this meant you have to generate and maintain the proper certs and deal with them too. Using Tor solved all of these problems in one fell swoop, the tradeoff being only that you need a properly configured tor service. Tor, and the stem library, makes it absurdly easy to establish direct P2P connections/comms over the internet, with ephemeral or persistent addresses, since it proxies the connections for you, with the hidden service becoming a kind of private ip address that is accessible over the internet. In addition, hidden services also obviate the need to use SSL for the network connections, or at least, that is my understanding. This simplified the networking code, and also meant you didn't have to generate and maintain SSL certs. Beyond this, any privacy/anonymization benefits from using tor were basically icing on the cake. And that was how I ended up using Tor!
well, I would have expected that loading the data and running my model on them would use more cpu&amp;memory than just loading my data the program is doing more work and allocating more variables but takes less time and less memory? this feels wrong in so many ways
&gt; and all the arguments against it weren't very compelling. There were very good technical reasons for not using `as`. Nothing to do with how it looks.
So the previous posts asking this same question and getting the same answers didn't help, so you had to ask *again*. The answer is "there ain't no answer", as it's entirely subjective and depends on you. A lot of experienced programmers don't use any IDE beyond an editor (vim/emacs) with python-specific extensions.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Just go with PyCharm Community edition. You will fall in love with it.
I am using Pycharm when I work on Django. For some scripts, I rather use VS Code.
Ahhh, ok. I can see why you went with Tor. It is a pretty simple solution to the peer-to-peer networking issues you were tackling. Neither party needs any real control over their network this way, just the ability to communicate through Tor. No centralized servers needed, no email servers, nothing needs to be configured like that. &gt;In addition, hidden services also obviate the need to use SSL for the network connections, or at least, that is my understanding. I believe so. Tor is pretty well known in that exit nodes can read traffic and malicious exit nodes can even modify internet traffic (which is why you shouldn't browse http on Tor), but if you use hidden services and .onion services, it stays encrypted through the network and doesn't exit. Don't quote me on this but I do believe you essentially don't need SSL if you know the .onion address is correct. It should stay secret from the client to the hidden service. However, GPG should eliminate the need for any secrecy through Tor. If you use asymmetric crypto with GPG, you should get secrecy, authenticity and integrity checks and know the communication is secure (just not anonymous). Tor mostly just solves your peer-to-peer problem and eliminates the need for a central service which is pretty great. However what you get through Tor that's nice is that your ISP doesn't know who you're talking to except for your peer. There's no direct peer to peer communication. You can hide that you're chatting and who you're chatting with. If you send GPG encrypted emails, you for one need a mail service that you trust will always relay it and you also leak that you're communicating with someone specific. Through this method, you just don't. I see where you're going with it and it sounds cool! Definitely should get audited though. There's a lot of complexity here and a lot of information you don't want to leak, like even if your program checks if there's a new version through http that's a serious data leak. If your ISP sees your computer try to check some disappeer VERSION file hosted online or something and then 5 minutes later your friend does too, it's obvious the two of you are chatting through it. You have to consider everything that is fingerprintable when the program runs, and ensure everything is only happening through Tor. It probably shouldn't even leak DNS queries, so you have to make sure it isn't trying to resolve hostnames. You have to make sure the GPG functionality doesn't do something fingerprintable like check pgp.mit.edu or any pubkey hosts to look up keys or anything. If you want to claim any anonymity through Tor, you have to be very careful about absolutely all network traffic that happens. Not only should the chatting go through Tor, but everything the program does in general. Also, it's kind of hard but you also have to make sure the sort of tor traffic you send isn't very fingerprintable. I may be wrong here, but consider this: Let's say you had a very specific pattern where it sent three messages every 12 seconds, a very consistent size too... that might make it easier to find who's using disappeer from an ISPs perspective. This gets much grittier and would probably take a lot of statistical analysis but it might be a concern if it was a major feature of disappeer to hide from your ISP that you're using it. If they can find out everyone who's using it, then see the times they're using it, they can discover who is talking to who. This might be a concern if disappeer got popular and journalists in oppressive countries used it to chat. It has to be clear to users just how much anonymity you promise, because that's what Tor is meant for and these all become major concerns. Anyway, good luck! Very cool project.
visual studio code /thread
Remember that: `res = [x for line in file if (x := line.strip())]` If just a shorcut for: res = \[\] for line in file: if x := line.strip(): res.append(x)
Looks great! And looks like you can really make some advanced one-screen guis with this. On the simpler side, I've had a lot of success with [Easygui](https://github.com/robertlugg/easygui) and (even simpler) [PyMsgBox](https://github.com/asweigart/PyMsgBox). One problem is that Easygui is ugly as sin, so I've been trying to reimplement with wxPython, but no means finished yet. [Easywx](https://github.com/timbledum/easywx)
Wondering why Bridged Networking is used on the virtualbox demo image? Without changing the host firewall settings it raises security risks. [1] Changing it over to NAT I ended up with a BSOD on Win 10, the stop code was *IRQL_not_Less_Or_Equal* which suggests some sort of memory corruption or driver issues. Regardless good luck with it all, Cheers! [1] https://www.virtualbox.org/manual/ch13.html
So you want 3 rows and 2 columns so switch the 2s and 3s around. 
Does your MarkovChain code load all your data at once? What does your system generally say about its resources while your code is running?
I feel like we are letting the community down by not having an auto-reply bot to some of these questions. Along with an auto-report bot to send them back to /r/learnpython. Well, 5 hours to kick off, might as well be the difference I want to see.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Have you heard of patsy? You take a dataframe and make input/output matricies for sklearn by just doing y, X = patsy.dmatrices('y ~ x1 + x2', data=df) LogisticRegression().fit(X, y) Now you have extracted columns x1 and x2 as features from your dataframe and column y as a label. 
I'd +1 this, they've got a lot of gibberish on that site.
Another example of completely unpythonic solution: **Task**: Given a string and a non-negative int n, return a larger string that is n copies of the original string. **Solution:** def string_times(str, n): result = "" for i in range(n): # range(n) is [0, 1, 2, .... n-1] result = result + str # could use += here return result instead of: def string_times(str, n): return str*n
I've been using coding bat just as practice for python. Do you know of any alternatives I could try? 
That's exactly how you do it. I don't know what you're complaining about. What syntax did you imagine?
Although it is an IDE extension for sublime that adds a whole bunch of functionality (autocomplete/limiting/autopep/build system etc...).
Let us know how it goes! 
I have to disagree with this in my opinion. Sure you could do `str*n` but the entire point of that question would be for the programmer to come up with their own solution to a simple problem as a learning experience. Learning wouldn't be as fun and useful if you just did `from question import solution` for everything. Of course, they could have chosen something different.
A benefit of codingBat is that it is a very simple site compared to other coding-sites. It might appear more accessible for beginners, who might turn away from more bloated sites. Also learning things the imperative way before the pythonic way isn't really a bad idea. 
Yea, did just that - but my point was that `-e` worked, because the package is running from the directly. Tox helped me to identify this issue (that's why I prefer tox over -e :-))
Note that u/NovocastrianNomad ’s fix just illustrates the bug they found, not the solution you should use. Only catch the specific exceptions you’re expecting. If something you didn’t account for throws an exception, by definition your code doesn’t know how to safely handle it, and exiting the program is the right thing to do. 
lots of people are still on debian stable or an older ubuntu or mint 18.. still having python 3.5 as the default python3. so if it's for public consumption, then consider that. if it's private and you're both happily on 3.6+ then why not use both?
How long did this take? Really nice job by the way.
Horrible is a strong word for something that just tries to teach basic programming using a simple and accessible language like python. Referencing it in a python sub may not be the greatest idea but the lessons taught here could be transferred to other languages. List comprehension, string constructs, etc may not.
Thanks. My program accepts files as arguments. If one of the file does not exists, it will handle the err and show it on terminal and move on to process next time. I can't exit early... What do you suggest in this case?
Even as a manual solution, that's a terrible answer since you should never be adding strings in a loop. Better solutions are `''.join([str] * n)`, a manual implementation of such, or accumulation into a `bytearray`.
For this particular code you can use a closure: def callableString(s): def f(): print('called string {}'.format(s)) return f x = callableString('hello') x() # prints "called string hello"
If your code would, without the try block, throw a `FileNotFound` exception in the case you described then this is the exception you should catch, e.g. `except FileNotFound as err: ...`. That way if something else occurs you haven’t accounted for, the program will halt and you can then decide how you want to account for that in future. 
an alternative to pycharm is [Wing Personal](https://wingware.com/downloads/wing-personal) which i like a lot
&gt;create admin accounts Sure. On Linux you'd need to do the following: 1. Check that your program is running as root, exiting if it isn't. 2. Get information about the new account (username, uid, gid, groups (including sudo/wheel for admin), password, shell etc.) making sure the username, uid and gids aren't already used. 3. Open `/etc/passwd` and `/etc/group`, acquire exclusive locks on them (look up `flock()`) and insert formatted user data. 4. Open `/etc/shadow`, acquire lock and insert the encrypted password. 5. Create the new user's home directory and copy everything from `/etc/skel` there. 6. Loop through the new user's home dir and change the user, group and permissions to the new user. Don't forget to apply the appropriate SELinux contexts if your program is running on a Red Hat based distro. 7. (Optional) open /etc/sudoers, acquire lock, insert carefully formatted sudoers information for the new user.
Thanks it worked
I've tried using it in one of my projects and didn't find it helpful. I can't think of any occasions where it spotted a bug for me. However it raises a lot of false positives that I have to deal with. Some of it is because of the dynamic way I use Python, some is just because the system doesn't work very well. There doesn't seem to be a good way to reduce these warnings without either blocking potentially correct warnings or filling my codebase with `# type: ignore`. So I wrote my own script which filters out warnings that I've accepted [here](https://github.com/alexmojaki/birdseye/blob/master/misc/mypy_filter.py). The list of warnings I'm ignoring is [here](https://github.com/alexmojaki/birdseye/blob/master/misc/mypy_ignore.txt).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [alexmojaki/birdseye/.../**mypy_filter.py** (master → 4c54939)](https://github.com/alexmojaki/birdseye/blob/4c5493928caf43e2636d09163b86cbd777a52175/misc/mypy_filter.py) * [alexmojaki/birdseye/.../**mypy_ignore.txt** (master → 4c54939)](https://github.com/alexmojaki/birdseye/blob/4c5493928caf43e2636d09163b86cbd777a52175/misc/mypy_ignore.txt) ---- 
I use it at work on a 100K+ LOC software. The major benefit for us hasn't been less bugs or unit tests, but the ability to more easily read and reason about code written by someone else. At this point i'm so used to using it that I don't have to think about it and often end up using it even in throwaway scripts.
Thanks. BTW, how do you import types from typing modul? For instance, import typing vs from typing import Iterator, etc?
Kudos for the project. Out of curiosity since you mention Russell Keith-Magee, did you consider using Toga at all for the GUI?
You may not need python at all for this if the goal is to just run two scripts. [Windows task scheduler](https://docs.microsoft.com/en-us/windows/desktop/taskschd/task-idle-conditions) may be all you need. If it doesn’t have the features you need, you may be able to schedule a task that runs the python program, that then runs the bat scripts. Or just cut out the middle man and [run the commands from the bat file directly in your python script](https://www.poftut.com/execute-shell-command-python/)
`from typing import X`, because from context its usually obvious when a name is referring to a type.
I haven't used it a ton but it has certainly helped me catch bugs, mostly in edge cases or when I refactor and miss updating the type somewhere. I agree, it can be noisy but as I have gotten better as using the Typing library I can usual avoid most of the noise. 
&gt;manual implementation of such Which is exactly what I'm getting at. While I agree that a loop is a pretty bad solution here (albeit one that is suited to a Python beginner) simply doing `str*n` completely voids the point of the exercise.
Yes, look into Selenium or Requests. Also, /r/learnpython.
I spend most of time and effort on my [Prompose project](https://github.com/ntk148v/prompose). Using Ansible, Prompose allows users to easily configure and deploy Prometheus stack. More details in its README XD Hope you guys enjoy it! :D 
I don't quite know python, I tried learning it about a year ago, but nothing since. Couldn't write a program for this, was mainly curious if there was a program that already existed.
&gt; should never be adding strings in a loop Why not? 
yes - or better probably I use pandas.read_csv to load the data in both my ground truth as well as in my markov chain What program would I use to capture resource usage (the program runs faster than I can manually comprehend the changes in htop)
Too much copying. Append to an array instead and `join` it after the loop.
From what I understand loops in Python have a lot of overhead and strings are immutable (that is, they can't be changed). As a result you end up creating and destroying strings for every loop. I'm not 100% educated on the internals of Python however.
When the question is "how to multiply by n", the answer isn't to "add n times", it's to multiply. "x" * n isn't an obscure library import, it's a builtin string operation to do just what the question was asking, in other words, it is the correct way. 
You're missing the point entirely. It's not telling you to "multiply" anything. As I've already explained, the purpose of the question is for the programmer to come up with their **own** solution. `str*n` while correct, doesn't fit this.
Highly informative, thanks :)
That's some good stuff, thanks!
This is right, every time a "string" + "otherstring" is concatenated, it throws away the original and creates an entirely new composed string.
There's a website called [edabit](edabit.com) with a ton of exercises for Python (and many other languages), classified by difficulty level. I think people that are registered can submit new ones.
I think I understand your argument. Could it be summarized as: "The point of the tutorial is not to teach you Python, but fundamental programming concepts"? I can partially agree with showing the most simple and most intuitive answer has it's merits. So if a complete beginner does the exercise and has somehow fucked up their loop they see how the loop is written properly. But nonetheless if someone learns Python they should be presented with a solution that is Pythonic. I worked through quite a number of these exercises and the solutions are so generic. And I think exercises for Python should have Pythonic solutions. So maybe show both?
Then the exercise is pointless. "Without use Python, write a Python script to do X".
Oh, short answer, "yes" with an "if." Long answer, "no" with a "but."
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
My advice would be don't. ~25M elements isn't that many, and optimizing your pandas code would let you get better performance than dask could give you. 
It's only a simple problem depending on where you decide to stop and that is completely arbitrary. You don't get to use the language's built-in string repetition feature, and you *also* don't get to use comprehensions (which would be the next pythonic option to use), but you *do* get its string concatenation (which is all but a simple problem), unicode handling and dynamic memory allocation, etc. The restrictions on this implementation truly appear to be "implement this in Python, only using language features that also exist in Java". And I'd go as far as to say this is because of the teacher lacking that knowledge. At the very least it should teach the proper pythonic shortcut immediately after the example's solution. And explain the example was about learning to design an algorithm for a language where for-loops are generally the best way to go about it, which python isn't and you should strive to avoid. But what if it were and the language looks otherwise just like python? Then, within these hypothetical limitations, look no further than this example's pythonish code! Now let's show how to do this again in 5 different, increasingly pythonic abstractions and learn about built-in string functions and string operators, list comprehensions and the lot. Explain how they differ, and then you get to decide which implementation is right for this problem, it might even be the for-loop if you can justify it. 
I get what you're saying, but teaching someone to do the wrong thing without letting them know the problems with it is far worse than teaching someone nothing at all.
https://stackoverflow.com/questions/24145155/why-is-addition-of-immutable-containers-in-a-loop-on%C2%B2
update : ok i commented the line #im = Image.open(file) in my fonctions.py file and i don't have the error anymore, so it appears you actually can't do whatever you want in fonctions processed by workers ? or is it related to another problem ? (RAM available etc... ?) 
It’s scales exponentially. Say you’re writing “abc” 20 times: 1. “abc” (3 characters) 2. Add “abc” to “abc” involves making a new 6 character “abcabc” string. 3. Add “abc” to “abcabc” involves making a new 9 character “abcabcabc” string. At this point you’ve copied 3 + 6 + 9 characters to get a 9 character string and it just keeps getting worse. 4. 3 + 6 + 9 + 12 5. 3 + 6 + 9 + 12 + 15 And so on. If you use a list the amount of characters you copy scales linearly with the number of characters in the final string. You append 20*3 characters to a list, then you join them, and while I’m not familiar with join’s implementation it’s standard library and meant for use cases with strings so I’m sure it scales appropriately.
I will admit that your original quarrel was with how unpythonic it was so you're right in that regard. Ideally they could have chosen a question that doesn't have such an obvious answer. For example a simple question like calculating and printing a string containing only the odd multiples of two numbers within up to n. That way you can do string concat the right way while also demonstrating loops and the range function. 
The point being to demonstrate what python would look like if your teacher is unaware of its language features? How do you explain the arbitrary restriction of getting to use built-in function `range` but not `str.join` and the str operator `+` but not even mentioning `*`, if not by plain ignorance of the teacher? Or using a for-loop like that in python in the first place? Java also has a convenient string operator, `+` for concatenation. It's quite a shortcut and hides a *lot* of stuff going on under the hood. What if this was an example that showed how to do concatenation byte for byte in a Java for-loop, because that's how they know it from C? 
Another key point here is that `result` can be `True` even if `obj != Object(4)`: class A: def __eq__(self, other): print('A.eq', self, other) return False a = A() print(a in [a]) # True! Here, `a in [a]` is clearly `True`, but it never calls `A.__eq__`. Indeed `a == a` is `False`. A lot of builtin collections behave this way, performing an identity check before an equality one, so beware.
But they do get to use the `+` operator for arbitrary string *concatenation* in order to build a basic string repetition algo. Under the hood, repetition is simpler because the memory use is known beforehand. Just because it appears simpler in Java doesn't mean it is. It's like telling people they have to use paperclips to create a stack of paper sheets :) 
That's a nice website. I really like how you can see different solutions.
I agree with this post even without the non-pythonic examples. A tutorial site, especially for beginners, should be in r/learnpython.
I think the "keyword" you are looking for is webcrawling. I did a small project where it just searches within a page for a determinated sentence and it would copy paste somewhere else, so yes, in python is greatly possible, and Requests is a good starting point.
&gt; I was thinking asyncio + uvloop + websockets, any experience with this combination? Uvicorn will give you exactly that for WebSockets. https://www.uvicorn.org Might be worth a shot. You’ll also want to take a look at the ASGI interface for WebSocket connections to see how it interfaces with your application code... https://asgi.readthedocs.io/en/latest/specs/www.html#websocket 
I did consider a few different front ends, but I'm not familiar with Toga. I'll have to look into it. Any quick links or tldr?
The whole project took about 4 years, but I rebuilt it a couple times, and had periods where I wasn't able to devote much if any time to it. It has been a massive learning experience. 
You mean in the Debian VM? I used bridged networking there because I was trying to simulate app usage if it were installed normally on a device, and not inside a VM.
It's not something provided by a third party library, it's part of very low level standard library functionality. Not using it would be silly, implementing it yourself even worse. if the question or task is easily solvable with stdlib, then create a better question.
I hate to be pedantic but it's quadratic, not exponential. 3 + 6 + 9 + . . . = 3*(1 + 2 + 3 + . . .) = 3(n^2+n)/2
&gt; Java wording: they constantly refer to lists as arrays I would say that array is more of a generic programming term. They're called arrays in C as well, for example. Although context does matter. While I'd refer to [1, 2, 3] as an array, I'd refer to [1, 'two', 3] as a list since it's not homogenous. The other things you mentioned do sound like poor choices on their part though.
&gt; If people get headaches from it they should learn python better On the contrary, if you know it gives people headaches, you shouldn't use the feature. The goal of software development isn't to look clever, it's to collaborate to achieve a goal. Someone who knows Python well knows when and where to use the features it provisions.
Thank you very much for your substantive replies here. A lot of things to think about. For me, this was really a proof of concept and a programming challenge. So I would hope no one would be using this app in case of serious need for secure communications. But I would like to keep working on it, get a security audit and code review, and get more feedback on it, see if people actually see any value in the use case. The whole project has been a massive learning experience for me. 
Meh. It can be done. Or at least the program could be run on a local webserver. Way easier to write an interface that way.
Pain...frustration...mental block...is what I’m facing. I have some experience in c++(data types, arrays, functions, classes &amp; objects, files). I thought that a transition to Python at this stage would be a smooth one. So, I started a Udemy Python bootcamp course and everything was easy until I came across a programming exercise. The problem is, I can do about 70% of the arbitrary questions but the rest 30, I fail. I get the logic, but forget the tools that I have or have problem with syntax as I confuse with cpp. Anyone has any advice? 
Also, sorry about the BSOD! I have not tested the app on Windows or the Debian VM in NAT mode. 
Yes, that's the problem with keeping your unit tests inside your package directory - that the imports work whether or not the install does. By keeping the tests outside the package, you need to have a valid install for the tests to work, which means you implicitly test your install process too.
The site really is optimized for java, there are fewer python problems and they are all java-esque, I'd suggest removing it
Hello! I'm a bot! I see someone has already suggested going to r/learnpython, a sub geared towards questions and learning more about python. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
&gt; I would say that array is more of a generic programming term But they’re not claiming to teach generic programming. They’re claiming to teach Python.
If a proper solution voids the exercise then it's a bad exercise
Wrote a simple tutorial that explains how to [create pandas DataFrame](https://datatofish.com/create-pandas-dataframe/).
Nonsense. Arrays tend to be of static size (C, Java). Also, you *can* have a Java array that contains both numbers and strings, if you do it as `Object[]`.
What kind of error do you get?
I clicked hoping is was an article about [Hypothesis](https://hypothesis.works/), the property based testing tool. It's not that, but for me, still a really nice article to read since I forgot all my Statistics coursework long ago. Thanks!
What's the issue?
OOOOhhh. So when a program uses `Try`, `Except`, `Else`, and `Finally`: 1. It tries to execute a thing 2. `Except` runs if the particular Exception it is looking for occurs in `Try`. 3. `Else` runs if any OTHER type of Exception occurs (not counting Exceptions that inherit from Exception in `Except`) 4. `Finally` runs if ANY exception occurs in `Try` Note: In case anyone else is reading this, I wanted to ask another question about whether you can use multiple Excepts to catch different Exceptions, but I found this [Stack overflow on that](https://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block) I think to separate which one, I think you would split up responses by doing something like this: if(type(e)==YouAreBeingMeanException): #do a thing 
Sorry, I'm still trying to figure out Big O, but what I understood was that for the purposes of determining complexity you found the fastest growing term then dropped the coefficient? For instance, n^2 grows faster than n, so you'd drop n, then drop the 3/2 coefficient, leaving O(n^2) as the complexity. 
\[Checking collection for membership\]([https://htmlpreview.github.io/?https://github.com/jerry-git/learn-python3/blob/master/notebooks/intermediate/html/idiomatic\_loops.html#for---else---Checking-for-a-match-in-a-collection](https://htmlpreview.github.io/?https://github.com/jerry-git/learn-python3/blob/master/notebooks/intermediate/html/idiomatic_loops.html#for---else---Checking-for-a-match-in-a-collection)) data = \[1, 2, 3, 'This', 'is', 'just', 'a', 'random', 'Python', 'list'\] 'python' in data # returns True 'something' in data # returns false You can test membership by \`val in data\` 
Exactly how it got me into Python.
As was said. Point was readability not efficiency. If results are same &gt;&gt;&gt; f(x) == g(x) then code examples are equivalent as @Kaarjuus says.
Python has an array type though, so it's the wrong terminology to refer to a Python list as an array.
It's also kinda amusing because the root page redirects to `/java`, if the link is kept it should at least be `/python`.
Yes that's indeed a way to check for membership but that won't be actually directly suitable for that specific example because of the case sensitivity. It could be used like this: data = [1, 2, 3, 'This', 'is', 'just', 'a', 'random', 'Python', 'list'] lowercased = [str(elem).lower() for elem in data] if not 'python' in lowercased: raise ValueError("Nope, couldn't find.") However, the purpose of that example was to show how for-else works. I agree that the presented use case is not necessarily the best fit for the purpose.
You're right - that's called the order of the function. N^2 Is quadratic 2^N is exponential
That's still type correct. Any Object is still an Object.
I am not convinced by your feeble arguments.
One nice thing about Tkinter is that the license is rather permissive. Coupled with the fact that there is an example or tutorial for almost anything you would want to use it for. I find this helps for rapid development of projects where a GUI is necessary, but not as critical as the functionality.
I used coding bat all the way back in 2012 to first learn python. I had no idea it was still around. I have found hackerrank my new favourite place to learn new languages. I couldn't give a shit about the whole ranking system, however being able to find some problems to solve and see nice solutions at the end have done wonders for my other less used langs
Wow, this is really impressive! I congratulate you man :)
It seems as though their Python content is written by someone with only a relatively basic understanding of Python themselves. Which I'd say is a recipe for disaster: you want your teachers to be far more experienced and knowledgeable than yourself, so they can make intelligent decisions on what to teach and when. So yes, agree 100% on removing it.
Yes they are. &gt; CodingBat is a free site of live Java and Python coding problems to build coding skill
Made a fork of Quamash (a library that combines the asyncio and Qt event loops for libs like PyQt5 and PySide) that works with 3.7/3.6 (supposedly), maybe one day they'll accept the PR
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Why not just `'python' in [str(elem).lower() for elem in data]`?
Sure you could do it also without lowercased variable. I think it's a matter of taste considering the readability. ValueError is there to highlight that the ValueError is not raised when the code is executed.
Interesting, I didn't know that, thanks! I still think it depends on context though. If you're trying to teach a new programmer the basics of programming, I think splitting hairs on the difference between a linked list and an array is a bit much, especially when the implementation details are hidden as they are in a line like a = [1,2,3] (as opposed to a = list(1,2,3) or a = array('i', [1,2,3]))
The latter. Especially with the default line width, space inside a function signature is at a premium, and I'd rather not have to read `typing.` 3-4 times in a line.
This post is better suited for r/learnpython
I use type annotations but not mypy (explicitly). It's just helpful for my IDE to pick on them (probably using mypy under the hood), especially if I'm using variables it can't infer the types of - doesn't happen very often because PyCharm is great but it helps me remember how my code works.
To organize things better. Many apps can be completely decoupled but many just can't. The inheritance diagram should usually look like a wheel and spokes. If it's a mess of arrows going everywhere, you're doing it wrong.
The parentheses are annoying but I think its a pretty cool feature. I hope they eventually remove the parens and replace it with a single character.
Sure it is. The OP was implying that different types can’t live in “an array”, which isn’t really true.
The lightbulb just came on. Thanks for the explanation!
Removed
Bad bot. If the bot knows someone already suggested it, then it should just be quiet.
Cool I’ll check it out, thanks!
I don't want to live on this planet anymore... who even thought of this bizarre idea? Imagine what happens if my wheel and your wheel both include libcurl of different versions? A user with no knowledge of this particular aspect of our mental health problem would probably believe him or herself to be insane, when depending on some random condition either your or my shared library would load first, and some very interesting bugs will surface... like segfaults, which only happen every 13'th run etc. This is a hysterically bad idea. The only thing that makes it slightly more palatable is that setuptools is subj a pile of junk, that it is really hard to implement...
That’s not generic programming. Those are two specific programming languages. 
I'm very conflicted. Because while I do agree that their methods are garbage and not pythonic-- this is how major universities teach this shit. They teach Python / Java as if it were C/Java, and not because the students find Python confusing-- often nowasays Python is taught as a 101 class. But because they are used to teaching C/Java. It's the same thing with the "loops should only have one exit point" sentiment, refusing to explain `break` to their students. While this site needs to be changed, and others like it, I don't see it happenining until universities follow suit and do so first.
To their credit, every university professor and non Python programmer calla Python's list "array", with the actual stdlib array-type never mentioned/even known about.
It's also bad to do that in Java, which means that their Java solutions are also wrong probably.
You should use the following modules to create a parser. BeautifulSoup, Selenium, and NLTK. The last module is a Natural Language parser that you can use to filter out noise data from your web crawling. You can add your most important terms to a list object and then parse through your captured website data. 
Thanks. BTW, I believe PyCharm use its own static checker. 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
you shouldn't name your variables 'str' or any other reserved word for that matter
I do `import typing as tp`to stick to my usual style of not mixing namespaces while still saving a lot of space. 
`print("It is a tie. Both user and computer selected %s. No points given."%(moveString)` Missing a closing parenthesis here. Also, /r/learnpython.
So pip can't retrieve https://pypi.org/simple/pip/ or a file like https://files.pythonhosted.org/packages/0f/74/ecd13431bcc456ed390b44c8a6e917c1820365cbebcb6a8974d1cd045ab4/pip-10.0.1-py2.py3-none-any.whl Can you retrieve these using some other tool (curl, web browser, etc), or do they fail too? What is the network topology between pip and those servers? Are you behind a (transparent) proxy? Some sort of DPI firewall? 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Those fail aswell, I get a network error through browser "topology between pip and those servers" Not sure Only think I am currently using is 1.1.1.1 DNS
Sure thing: the [BeeWare project](https://pybee.org/) leaded by Russell Keith-Magee, it's a set of libraries to write multi-platform apps, main desktop systems among the targets. The point is writing in pure python with a single interface and then the libraries leverages native widgets according to the target. In order to have an overview of the libraries I suggest watching this [PyCon Australia 2017 talk](https://youtu.be/xezYYBL7nk0). I see there's a similarly named [PyCon 2018 talk](https://youtu.be/qaPzlIJ57dk), but I haven't checked it yet.
Are you behind a proxy by any chance? 
Nope, not that I am aware of
Logging is the perfect example of how not to create a module: it's about 10x too large, and so no matter how many tutorials, books, and blogs are created the moment you step outside of the trivial logging you're into a deep swamp of shit. And all that shit has a lot of inertia - so it takes a long time to support new features.
Just download Libreoffice if you want to graph it.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
A pencil and piece of paper would be entirely suitable.
A robot that plays earrape memes I M N O T K I D D I N G
Why not? It’s a simple but complete project which allows you to learn a lot of features of python and programming practices in general! Go f or it! 😊 If you need help, just ask.
That really depends-- if performance is a concern you should use a a `StringBuilder`. Otherwise `+` and `concat` are just fine-- they just use a a `StringBuilder` internally and the compiler optimizes to use a single instance in cases where it's the same statement, like this. However if the details of the added string have to be computed, the compiler won't optimize and create a new `StringBuilder` instance each time, so that not only is it just generally less performant, instance creation has to be taken into account too.
You totally could put this on a web page. If you just want a web page that displays *your* personal weight loss, Python may not be the best solution. Some of the other responders to your question are (with varying degrees of snarkiness lol) suggesting simpler suggestions... I do want to point out that the art of programming is tightly tied up with the art of "finding the simplest possible solution" for any given requirement. I think the simplest possible solution for rendering and presenting two-dimensional data (the two dimensions being time and weight) really doesn't require coding. If I just wanted to do that, I'd take a look at Google Sheets. Spreadsheet software was **born** for problems like this. Just create a date column and a weight column, and in Google Sheets for example you're just clicking Insert -&gt; Chart -&gt; Smoothed Line Chart, and the result looks [pretty good](https://docs.google.com/spreadsheets/d/1ehVgPmm7IA237U7chGw43ZnejulhyJWQ448FT7x298c/edit?usp=sharing). Of course, your ultimate objective is not "create a dope graph," your ultimate objective is "learn how to tackle progressively more difficult problems in Python because Python is fantastically useful." To that end, I 100% encourage you to work on this in Python. Another good solution, if you're interested in learning JavaScript, would be the data visualization library D3.js. This would allow / require you to render the chart as a static web site, which is all that's required since you're going to be updating the weight data yourself anyway. Hope something in there helps!
Do you think that's a contributing factor? Does the same behaviour happen with other dns servers?
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Using Chrome. Only states network error Don't believe it is the DNS, i've switched it off and still the same. Now, I used to be able to do all this before. Not sure what changed. I used Visual Code Enterprise before, had a good ammount of packages installed, including anaconda. I later uninstalled it along with the added packages. Could it be related? 
Thank god you completely saw my point to this! I've already taken the data from the web page into a google sheet with a graph, but wheres the fun in that? This is absolutely an exercise to see if i can work it into learning more python, and its going to be tracking both mine and my partners progress so a user based system might be perfect and be expanded upon later! ill look into flask thank you! :D
Thank you ill keep that in mind :)
Even if it was very simple, changing the formatting syntax would be very painful with no clear benefit. They're exists a lot of alternative logging systems, and AFAIK they are all locked into one syntax or the other.
I've been using it a little, but it's mostly to help with documentation
I outlined an argument in favor of str.format and against f strings here: https://www.reddit.com/r/Python/comments/8yapie/transfer_of_power_guido_stepping_down_as_bdfl/e29lxg6/ Curiously it did not attract much in the way of a coherent counter-argument, but jesus did it attract down votes.
Hey man! This project looks good! I was trying to using the popular python telegram wrapper but I thought the documentation was pretty poor. Yours looks great! Definitely going to try this out! 
```python
This question is likely better suited over at r/cscareerquestions
Can you expand a little on the "loops should only have one exit point"? I only know python and am self-taught for the most part so I'm more or less used to the "pythonic" way being the normal way. Why is having multiple exit points bad in other languages?
Until you start embedding complex expressions in them. Then they turn in to a mess.
Oooooo.... I like your effort to duplicate the Easygui APIs! Give the Easygui users an active project to move it. Anything to keep the attention of newcomers should they grow tired of all that command line typing. Have you thought about "fixing" Easygui's dated look using tkinter? I liked the high-level MsgBox type calls, which I duplicated in PySimpleGUI. But I also wanted to be able to customize pretty heavily.
If we assume all failures have a common cause, testing with the browser dramatically cuts down on where that cause might be. Neither Visual Studio nor Anaconda are affecting your _browser_'s failure. 
I was familiar with Cricket, but not with Toga. Looks very cool. Going to have to check that out. Thanks for the links!
if you'd like to work on the backend, give Scala a look. coupled with Cassandra + Ignite you can make some very speedy solutions. i'd recommend Python as your first language but once you've worked in something like Scala, you're not gonna enjoy going back to Python. i work on the backend in my shop, was recently tasked with building a Slackbot for internal usage, had to use Python for the fast spin up in an aws lambda, and it's been really painful. that, and ui, fuck ui, lol.
There is plenty of entry-level work out there in Python, honestly there's more demand than ever before. That said, web backend work will indeed need to know the basics of the web frontend (though, let's be honest, they're not that hard to pick up), and ML doesn't really have an established experience hierarchy yet, but has traditionally required a fairly in depth CS/Stats background, and people with kind of academic chops tend to be able to (and be expected to) bypass the entry level. The key thing to understand is that any general programming language you master sufficiently to find work will make it easier for you to pick up all the others and pick up further work. So master one. Doesn't matter which. The first language and the first job are the hardest nuts to crack, and that makes the choice of which seem larger and more foreboding than it should be. And people have been asking this exact same question for more than a decade; the answer has always been just pick one and run with it, and don't fret, Python is a fine choice.
It *isn't* bad in *any* language. It's just a shitty mantra from days before when many people wrote horrible, hard to understand code. It's a remnant of the horribly incorrect "gotos comsidered harmful" that never went away, even though it should have by now. For some context-- "Go To Statement Considered Harmful" was an essay written by Dijkstra (yes, *that* guy who has the distance algorithm named after him), in which he shat on goto statements in code. The problem is-- he was wrong. And there are people who in recent times realize he is wrong and the mantra is wrong and are starting to use it again, mostly in memory freeing segments of code. But everyone circlejerked his essay to high hell. Disregarding how I feel about PEP 572 (the new assignment expressions) there was even one guy on here that moronically, ironically (because there are plenty of goto statements in the code of the CPython 3 interpreter) tried to relate them to gotos, and off handedly mentioning how it is just as bad if not worse than a goto, and no one should ever use them, just like no one should use gotos. Many people did more than just circlejerk is essay-- plenty didn't even bother reading past the title, and "oh the great Dijkstra said it so it must be right". If you read it, he goes on to say things like "repetition clauses" (while loops) are superfluous and should be done by recursion alone instead (yeah...look how that turned out with many modern languages not implementing tail-recursion optimization...). Don't see many people sticking with that nowadays, unless it specifically easier to look at recursively rather than iteratively. Yes some of his points are correct, but his conclusion was wrong. His points about gotos being incredibly easy to make mistakes and unreadable code with are absolutely correct. But his conclusion that goto as a whole is something that should die in a fire is absolutely incorrect. Rather, people learning such languages that include gotos need to be taught to use the statement in it's proper, readable use cases. On to break and continue-- the reason why they are hated by many professors across the US is because they circlejerk Dijkstra. And in doing so, well in all technicality, these statements are just specialized gotos. Break is "goto end of loop". Continue is "goto end of cycle". If you actually think about it though-- everything is a fucking goto. While and for loops themselves-- "do_things, change_vars, goto do_things". If/else branches, try/catch/else/finally clauses, every statement that does control flow *is* just a specialized goto statement. And if you ever look at the assembly of any code you write, you'll see it littered with jump statements-- assembly's "goto". Dijkstra's circlejerked essay has brought among us many other essays, none of which I will link to here to save my last remaining brain cells from dying at the look of them. Plenty, though, can be found on Wikipedia page on "Considered Harmful" essays. Some won't be because Wikipedia doesn't update on the less popular ones, but they exist-- I've seen 5 or more in the past two years. It's gotten so bad that ["Considered Harmful" Essays Considered Harmful](https://meyerweb.com/eric/comment/chech.html) is a thing, for the reasons mentioned there, as well as the reasons I mentioned. TLDR: No! "Bad syntax" is non-existent. Use syntax well, or fail and do so badly. There is no "bad syntax", only "bad practices".
You mean like async iterators?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
And this is one of the big things you get out of a good text editor or IDE: it will give you a distinct formatting for reserved words so that you'll actually know if you're unwittingly trying to use one.
What kind of data are you scraping?
This is all true, but it applies to .format too. Keeping readability up is not always an easy task, but one we must nevertheless undertake. I think f-strings make it easier, provided you define your variables beforehand and give them good names
I wonder how much alpha this data set could provide...
Thanks everyone! A little bit of context. I know about map of `concurrent.futures` and `multiprocessing.Pool`. I was just trying to see if it was possible to make generators parallel. Idk if the coroutines are shared somehow between each call of the yield. It was just an experiment for fun.
Let me zoom in on that for you &gt; to build coding skill
&gt; I still cannot seem to overcome issues You can either try /r/psychic or maybe tell us what the issues actually are
&gt;gist.github.com/santia... I'm not sure what you mean by making generators parallel. If you want to share state between threads, you can use the [queue module](https://docs.python.org/3.7/library/queue.html#queue.Queue) or [deque](https://docs.python.org/3.7/library/collections.html#collections.deque). It seems as though you're just looking to do a few things at once. Since you're IO-bound a thread pool or asyncio would serve you well. If you don't want to use \`concurrent.futures\` and want to alter the order of when threads are executed at a low level, you can use the [Event primitive](https://docs.python.org/3.7/library/threading.html#threading.Event)
Try [HackerRank](https://www.hackerrank.com), I quite like it.
The `switch` example is really really difficult to read/understand.
Your way does involve creating a second list, so it's not in place. Secondly, he raises a value error because it's an example. Do anything you please. The demo was for-else.
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Dude, let it go. It advertises itself as a place to learn Java and Python, not as a compsci 101 “today we discover... the loop!” sort of thing. You’re trying very hard to misread this.
Building a search engine with Flask, powered by the Dewey Decimal System. Trying to index the web like a public library does.
Emergency services calls (fire department) in my city. I notify on calls near my house using street names, and am currently messing with the google maps geolocation API to do it with a geofence instead, and city-wide based on large or interesting incident types. Also my county emergency communications website. Any new post gets emailed to me, as they only update it when a large county-wide incident is happening. Rare but good to know about nearly every one.
If there were, those reasons aren't listed in the PEP. The objections raised to `as` in the PEP are just that they think it's confusing because it's already used in import, exception and with statements. I disagree.
Sweet, thanks
Queues (and other synchronization primitives) are often glossed over.
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
It’s because the object is not pickleable. RQ arguments must be serializable to some format. In this case, it failed to unpickle the Werkzeug File object. You could consider decomposing the object to a string/bytearray and pass that to your remote function instead. To pass the redis barrier, whatever objects you pass to an RQ function must survive the following: import pickle pickle.loads(pickle.dumps(obj)) 
How and why did you decide to build this project? I would consider myself not quite a beginner, but not intermediate, and I still struggle finding projects to do w/ the following parameters: It’d be great to do something fun, makes a little (or a lot) $, and solved a pain point, but I kind of go blank at finding something at the intersection of those. I’m always interested in hearing how people decided and executed on projects. 
Surely did, thanks again for the help for the thoughtful post. 
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Why the need to name them when unpacking just have them named automatically and added to the namespace dict 
See here's the thing. IMO, you're right. But even then, the website teaches programming skills poorly, by using bad practices. You can only go so far teaching general skill. At some point you have to delve into "this is how Python/Ruby do it, here's how to do it in Java, here's how to do it in C". This website, poorly teaches "coding skill".
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
U mean like: { a:b for a,b in gen1, gen2 } ...and then flatten the dict? It more generally: (a,b,...,n for a,b,...n in g1,g2,...,gn) ...and flatten the tulle list? Threads won't "parallel", because they aren't. 
What do you mean by make generators parallel? Generators are stateful objects, which compute, yield results, and get fed inputs / are able to have errors injected into them when yielding. Which part do you want to occur in parallel? If you want computation to occur in parallel, defer that to a seperate number of threads/processes within the generator and then on yield close the threads and retuen the return the result. If you mean mean the yielding of results/sending of inputs, you can theoretically create a wrapper which creates multiple generators out of one (ex 3), each yielding the nth result (1st would do 1, 4, 7, 2nd would do 2, 5, 8, 3rd would do 3, 6, 9) by keeping a map of ids to container objects within a function closure, and then make all of those multiple generators acquire and release a reentrant lock around their yielding of the initial generator, then iterate through these across multiple threads/processes...but not only is that needlessly complex it would generally be a fruitless endeavor that is extremely confusing to most.
The cases in which I've used it usually end with me not using it in the end. Optional typing is cool, but it really mostly serves as documentation for me personally, hasn't helped / hurt with keeping track of types at runtime.
This is pure evil. Nice work
Thank you for subscribing to gibberish facts. Gibberish fact: One theorized origin of the word "gibberish" comes from from the 8th-century Arab alchemist Gaber, whose works were oftentimes written in cryptic riddles and phrases intended for only his followers to decode. When these texts made it to Europe, they became infamous for their impenetrability, being filled with gibberish.
I run python from atom via shell script
Try it on cmd type python if it shows similar error then you didn't add path variable. To fix that just reinstall python, during set up check "add python to path" 
This
I'm not sure which bad practices you're referring to, but I'm not in the teaching space so I'll defer to your knowledge. At some point skills come from practice problems, and this one does a decent job, IMHO, of setting up problems, giving you space to try solutions, and then giving you the ability to check your work. If people are learning from it, that can only be a good thing.
Yeah the Demo VM image, virtualisation is a good idea for something like this so thought I'd check it out. As a suggestion for images just using regular NAT you can setup IPtables so only tor connections are allowed inbound/outbound [1], this is essentially what Whonix and TAILS does. iptables -F OUTPUT iptables -A OUTPUT -j ACCEPT -m owner --uid-owner debian-tor iptables -A OUTPUT -j ACCEPT -o lo iptables -A OUTPUT -j ACCEPT -p udp --dport 123 # NTP sync iptables -P OUTPUT DROP iptables -L -v this will block everything, including apt updates, to get them working again you need to change your apt sources to the official debian onion links [2] apt install apt-transport-tor cp /etc/apt/sources.list /etc/apt/sources.list.original echo -e "deb tor+http://sdscoq7snqtznauu.onion/torproject.org stretch main #Direct updates, official Debian repos are slow deb tor+http://vwakviie2ienjx6t.onion/debian stretch main deb-src tor+http://vwakviie2ienjx6t.onion/debian stretch main deb tor+http://sgvtcaew4bxjd7ln.onion/debian-security stretch/updates main deb-src tor+http://sgvtcaew4bxjd7ln.onion/debian-security stretch/updates main deb tor+http://vwakviie2ienjx6t.onion/debian stretch-updates main deb-src tor+http://vwakviie2ienjx6t.onion/debian stretch-updates main" &gt; /etc/apt/sources.list Would also recommend starting out with Debian netinst with the basic system tools and installing anything else needed, would reduce the image size down to a few hundred megs, add unattended-upgrades and you've got a hardened box ready to roll :) [1] https://trac.torproject.org/projects/tor/wiki/doc/BlockingNonTorTraffic [2] https://onion.debian.org
All good mate, looks like it's because of the restrictive windows settings I have anyway.
It's not an established convention, AFAIK. PEP8 and the Google style guide both say to just "pick a rule and stick with it." Also, much of the standard library has standardized on single quotes.
 RemindMe! One Month
I will be messaging you on [**2018-08-16 05:50:34 UTC**](http://www.wolframalpha.com/input/?i=2018-08-16 05:50:34 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/8lmnzr/thoughts_on_black/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/8lmnzr/thoughts_on_black/]%0A%0ARemindMe! One Month) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I use PyCharm static checker instead of mypy directly. Advantages: \- less bugs (mainly handle cases when None is returned and edge cases) \- better code completion \- better understanding of complex code \- better code documentation Disadvantages: \- longer method/functions definitions just because parameters take a lot of space
[fastly.com](https://docs.fastly.com/) is working fine on browser, it is most definitely a network issue and probably has nothing to do with python. On browser I am getting this: [pastebin](https://pastebin.com/Uuxg1rwj) I will remove the post later today as it has nothing to do with python. Thank you very much for your efforts in helping. P.S: you are very methodical it seems, I commend you for it
pyspark is overrated. reported for ads.
Coding bat is great when it's accompanied with a curated class with a teacher that knows what they're doing. Which is what the point of the website is in the first place. 
tl;dr 1. GIL is slow because obviously everyone runs Django using native threading. 2. CPython has no JIT/AOT because it's a must have for fast langs 3. Python has no static type so guessing the type during runtime is incredibly hard. I think CPython is slow solely because it's never been a top priority in PSF.
4. if you need to go fast there are better suited languages. 
or use modules written in C.
On top of that running the fucking thing takes down entire google cloud
Or pypy
He mentions PyPy and Cython, but it's worth a read for anyone that doesn't already know this stuff. He discussed which might better for a use case, and why.
tl;dr Use PyPy if you want speed, The GIL is a non-issue, or someone would have funded a GILless PyPy for $50,000 for poc and 100000 for the finished product [[0]](https://morepypy.blogspot.com/2017/08/lets-remove-global-interpreter-lock.html). Maybe I missed the point of the article. It does not even mention numba’s JIT, nor does it describe cython or pythran and when you would want to use them. 
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://morepypy.blogspot.com/2017/08/lets-remove-global-interpreter-lock.html) - Previous text "[0]" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20e2gx9g6) 
`Subscribe`
GILless pypy is easy if you don't care about Python compatibility.
Yes, you are right. I read about that practice in one article somewhere and liked the idea, but it is apparently not that widespread as I thought. I switched to black in the meantime and use double quotes now.
Depending on the nature of your app, I'd do django + drf for the server backend, and react native for the frontend. Not quite all python but a really amazing combo nonetheless. If you need to do a ton of on device processing then kivy might be an option, but really, python doesn't do mobile in any real sense. Theoretically speaking you should be able to do it with QT and have great performance and some serious libraries to draw upon but despite my numerous attempts, I've never gotten the setup to work for me. 
Returns, breaks, and gotos can be dangerous because the flow of the program doesn't correspond to the structure of the code. It means you have to examine the code in detail to figure out which bits actually execute, rather than being able to tell at a glance from the structure of the blocks. Of course there are good reasons to use them - error handling, on blocks that fit in well under a screen etc - but it's important for beginners to be wary of them, and see if there's a cleaner alternative first.
Pretty good article, but a few things could be improved. Using `loop.create_task` to run coroutines is superfluous. You can just run the coroutines directly in asyncio. create_task is best considered a low level system call that regular async/await code shouldn't ever need to use. If you need to run multiple coroutines concurrently, you probably should be using `asyncio.gather`. This example- # create loop loop = asyncio.new_event_loop() # add coroutine to the loop future = loop.create_task(my_coroutine) # stop the program and execute all coroutine added # to the loop concurrently loop.run_until_complete(future) loop.close() could be reduced to - # create loop loop = asyncio.new_event_loop() # stop the program and execute all coroutine added # to the loop concurrently loop.run_until_complete(my_coroutine) loop.close() And if you need to run more coroutines concurrently, you do: loop.run_until_complete(asyncio.gather( coroutine1, coroutine2)) Now the problem you will have, is what happens if one of your coroutines raises an exception... Here be dragons..
[Or Rust](https://github.com/getsentry/milksnake).
What confused you? What syntax would you want, if anything was possible?
1. Changing `locals()` generally doesn't work. 2. It could silently overwrite names you don't want to. 3. It's unreadable. Names suddenly appear and I don't know where they came from. 4. IDEs and linters will complain about undefined names.
If the findContours function returns a list of points, you can try [the solution here](https://stackoverflow.com/questions/47657795/how-to-calculate-area-of-polygon-from-list-of-points-with-python/47660533#47660533), where they use the shapely module to calculate the are of a polygon.
&gt; I just cannot comprehend how such a minor thing evolved into such a shitstorm. This is explainable: many people (including me) don't regard it as a minor thing. But yes, problem is that there are different schools of thought regarding how software should written. For example, some people believe that shorten the code by introducing side effect is not worth it, or is philosophically wrong to do. I also think so, but it is hard to argue about it, since it is kind of a "belief". 
r/learnpython
Cool - Thanks for clearing it out. Just need to write a custom runner that run Tox now for my `vim` setup. Thanks!
Meh it’s supposed to be black magic right
Great read to understand some concepts related to python performance
&gt;But because they are used to teaching C/Java I think a part of it is that CS101 is not about learning the language (in this case Python, but could be whatever), it's about learning CS related concepts. I did my bachelor in CS recently, we used Java 8 and never touched the stream api for example, because it abstracts away a lot of useful concepts. A lot of the programming in CS101 does not teach best practices or the easiest way to do something, it teaches overall CS concepts through coding in some arbitrary language. 
I don’t see anyone coming out and just SAYING IT, but the perceived problem is that the solutions appear to be transliterated from existing content. The best example shown in this thread is a function definition including an argument named `str`. This works just fine in python, because python is mostly consistent in letting you assign whatever names and attributes you’d like! However, no one but a very junior python student (or someone copy and pasting) would EVER do that in practice. It causes so many problems, which mostly stem from thinking about python as if it were C++/Java/C#, but with meaningful whitespace :p pylint and pycharm would even throw a fit about “shadowing a builtin,” so it’s just blatantly not content from a python person, even with a few months on the job.
Can somebody explain the technical reasoning behind #1 above for somebody trying to understand what GIL has to do with Django and the native threading comment? (And are learning Python?)
The same argument can be used against functions...
r/learnpython 
GIL is only relevant when you are doing "native threading" e.g. doing multiple task at the same time using OS mechanism. A typical (yet non-typical) example is a web server. If your server can only handle a single user at at time then it's gunna be problematic. The naive solution would be using multi-threaded app to serve web pages. You can increase your thread pool as the user number grows. However that's *not* how most modern web servers work. They either use multi-process, or pre-forked multi-process, each process has its own thread pool, or so called user-land threading. Either case GIL is kinda irrelevant in these cases. Native threading (aka OS threading) can solve some problems but often you ended up solving it without threading in Python. For IO-bound tasks Python can handle multi-threading OK, for CPU-bound tasks, Python indeed have a serious problem with multi-core support because of GIL. Then again, if you aim for speed, if your task is truly CPU-bound, why use Python anyway? tl;dr If you have a GIL problem you are doing it wrong.
I think you're neglecting the overall positive influence Diskstra's essay had in a time when many programming languages had only goto and no structured loop statements at all. And the inciting "considered harmful" title wasn't even from Dijkstra himself, but got added by the journal's editor, none other than Niklaus Wirth (particularly famous for inventing the Pascal programming language).
Thanks! That helps!
Python is easy to write and pretty clean to read but trades off some speed. If you need to go faster and don't want to rewrite everythin you can do several things: 1. use Cython which uses C 2. Numba which uses a JIT compiler 3. You can use apache thrift or libraries to send stuff to run in other languages. 
Yes but the aim is still to make things better. If you want to do that, write `globals().update(d)`.
No, functions are the opposite. A function is a contiguous block of code that corresponds to a unit of program flow. The exception is if you use multiple returns, which really is the same as a goto -they should be used carefully, for error handling (although in modern languages we have exceptions for that) or in small units where the meaning is clear.
lol what
Thanks! Feel free to contact me whenever you want.
Interesting article, but ruined by the usual lie - they take a C server, wrap it in a bit of Cython and call the whole thing "Python".
If it works with gevent + pypy I'll allow it. Seems "not yet".
Not really. You can keep your code terse by not naming the variables with str.format and you won't get any escaping issues. The structure also naturally ties code together that should be kept together (the expressions to be embedded and the string). f strings virtually requires the discipline of naming your variables beforehand in order to not get into that escaping mess and it requires discipline in order to keep variables and strings that use them together. If a language feature creates rabbit holes and requires extra discipline to use I think that's fine provided there is some sort of big win to compensate. With f strings I just do not see any big win - the code isn't significantly shorter, easier to understand or safer. It mainly just opens up rabbit holes that juniors are virtually guaranteed to jump down.
How about this: https://github.com/caterinaurban/Typpete instead?
&gt; everyone runs Django using native threading That's not threading. Those are separate processes. &gt; no JIT/AOT and it's a must have for fast languages Interpreted Lua is much faster. &gt; I think CPython is slow solely because it's never been a top priority in PSF. It's not that. Many design decisions make it very hard to optimise the interpreter. See https://code.google.com/archive/p/unladen-swallow/ 
&gt; Use PyPy if you want speed Unless your program doesn't run long enough for the speed gains to overcome the startup, tracing and JIT-ing overhead.
&gt; If it works with gevent + pypy I'll allow it. Why would you bullshit yourself like that? Face the music and admit that this article's conclusion is that the only way to speed up Python is to replace it with C (or something that transpiles to C like Cython). Labelling the result as "Python" in performance comparisons is so deceitful it should be satire...
Is it any better?
&gt; very hard to optimise the interpreter Not really, CPython intentionally rejects many performance patches (Mark Shannon, Carl Shapiro, etc.), their reason is to maintain C code "clean". 
&gt; Not really Yes, really. All attempts to significantly speed up CPython forks have failed. Even Google's - the one I linked and you did not bother to check out. &gt; many performance patches (Mark Shannon, Carl Shapiro, etc.) Where are they? I might add them to Tauthon.
Oh yeah, I really love how PySimpleGUI can be so heavily customised. Your row/list based API is super powerful. Yeah I did briefly think about tkinter, but I really struggled to get tkinter to look good/native, even with the whole TTK thing. I had also just heard so much good stuff about the wxpython project, especially with the Phoenix release, so this was a learning project for me. One of my main problems with the original easygui project was that the default font is fixed width - wouldn't be hard to fix. 
In golang, to have something faster, you replace c with golang (see lmdb/rocksdb reimplemented) In my opinion this is better.
&gt; In golang, to have something faster, you replace c with golang And what to you replace golang with if you need generics?
d, java, rust ?
java for speed? lol
thanks for the answer, i really apreciate, it really helps ! i think trying to pass an image through this redis barrier seems like a bad practice, as soon as the image was &gt;200Ko i was getting errors about RAM, or it was taking really long time just to enqueue the task, wich is not nice since i am implementing this to win time. i guess the only option left is to upload it first then pass the url of the image location as an argument or something ? wich i don't like too because the function i was trying to queue is precisely about uploading this image... amongst other things i tried to contourned the problem by saving the image in a temporary folder then give the path as an argument. but in heroku, according to my research, different dynos only have access to their local environnement, so the worker dyno doesnt have access the the web dyno files, so i got an error that the file is not found. i also can't can't pass the redis "barrier" with my mysql variable (that is declared like this) app.config['MYSQL_HOST'] = os.environ['CLEARDB_HOST'] app.config['MYSQL_USER'] = os.environ['CLEARDB_USER'] app.config['MYSQL_PASSWORD'] = os.environ['CLEARDB_PW'] app.config['MYSQL_DB'] = os.environ['CLEARDB_DB'] mysql = MySQL(app) should i find a way to serialize that too or is there another way around ? like redeclaring it in the "worker.py" file ? 
It depends on the use-case, I guess. Typpete does not do gradual typing but seems to infer better types in general.
That's an awesome idea. If you don't mind, I'd like to see the source when you're completed. I'm still learning and completing tasks like that is exactly what I love about python. How often as re you running this script? Is this ran on a computer that's up 24/7 or a hosted server?
Java is fast. Java being slow is a common misconception due to the long startup speed of the JVM, which does a lot of work upon startup as a tradeoff for high runtime performance.
He mis-spoke. He meant processes not threads. I think he's saying that using multiple processes for web is common, but other domains don't do it.
Java fan boy triggered. Of course it really depends on what you're programming, but this isn't too far from the mark: Java code can be slower than C++ code--sometimes by a factor much larger than 2 or 3. Java code can also be competitive with C++ code--but often requires substantially more memory to do so. For a few, very specific, things Java can be faster than C++ that's written similarly. That said, yes, on average code written in Java will run slower than (roughly) equivalent code written in C++. If your primary concern is with execution speed, Java has a number of disadvantages. The main one is that it depends heavily on a JIT compiler for optimization--but since the user is waiting while the JIT compiler runs, most JIT compilers don't include the most expensive optimizations. Since a C++ compiler typically runs with only a developer waiting (or nobody waiting, in the case of server-based builds with CI systems and such) it's much more reasonable for the compiler to include every optimization in the book. A second factor is closely related: C++ vendors see their customers as being extremely concerned with speed. Java vendors almost certainly see their customers as being more concerned with things like features and fast development than with achieving absolutely the highest possible execution speed. That's not to say they can or do neglect execution speed entirely, just that they don't emphasize it to nearly the same degree as C++ vendors. Garbage collection can have an effect as well. Java (normally) uses a concurrent, copying collector. This works reasonably well across a wide variety of work loads, and most JVMs have some "tuning knobs" to help out when the default setting aren't optimum.
&gt; The GIL is a non-issue, or someone would have funded a GILless PyPy for $50,000 for poc and 100000 for the finished product [0]. Can't tell if joking. Anyway the hard part is not removing GIL, but doing it without affecting single thread performance or c-extension compatibility.
&gt; Java fan boy triggered No, not really. Java is a tool like anything else. I much prefer Kotlin as it's less verbose, but I don't always get to choose &gt; Comparing Java with C++ Apples and Oranges. Compare Java with C#, or any other bytecode-interpreted language. The fact that the JVM is even able to compete with C++ is impressive, I would expect it to be slower. &gt; but since the user is waiting while the JIT compiler runs Bytecode can be optimised while the unoptimised code runs, and then replaced nearly instantaneous. And most Java code runs where no user looks at it. You're probably a desktop application developer? 
Checkio.org
Thanks
&gt; In golang The name of the bloody language is "Go". Stop doing SEO in natural languages. &gt; to have something faster, you replace c with golang Bullshit.
We were talking about replacing C with Go. I don't think recommending Java in a situation where (if justified) C was used in first place is reasonable. That said, again, it really depends on what you are doing. Anything that deals with huge amounts of texts can be a memory headache in Java, as it internally represents everything in UTF-16. 
I was mostly just joking about Golang lacking generics with that comment
In Go, calling out to C is slow and typically C is bad for concurrency, so you can get something better if you replace C with Go. It might not be as fast as the equivalent code in pure C or Rust, but it will be easier to write. 
Many people do (replacing c libraries with go libraries in go projects).
Not sure what other challenges it would face but squashfuse apparently works on Windows, so I can't think it'd be an impossible task. https://github.com/pmq20/node-packer/issues/43 
I am using Multiprocessing to run multiple tests using PhantomJS and Selenium at the same time. These tasks all checkout products on the same website. It seems that the browsers that open are sharing the same session variables or at least cookies/cache so if a product is sold out or checkout is not successful during one of the tests/tasks that product will appear in all carts on other browsers/tests. How to run multiple PhantomJS processes with Multiprocessing WITHOUT sharing data between browsers (i,e. cookies)? Anyone have any ideas? Is it possible to open a unique PhantomJS session each time? Could I clear cookies/cache after each session is started or will that not solve this issue? Snippet of code posted, let me know if more information is needed. Thanks in advanced!
No solutions? Same problem here 
&gt; In Go, calling out to C is slow Because of Go, not because of C. &gt; typically C is bad for concurrency You don't understand the difference between languages and algorithms. Write the same MxN work-stealing coroutine scheduler used by Go in C and it will be at least as fast. That's what gccgo does, actually. &gt; you can get something better if you replace C with Go Never, when it comes to performance. &gt; It might not be as fast as the equivalent code in pure C or Rust, but it will be easier to write. We were talking about performance here.
&gt; And what to you replace golang with if you need generics? Nim: https://github.com/stefantalpalaru/golib-nim ;-)
Absolutely, and I am in no way disagreeing-- like I said, no bad syntax, only bad practices. But the essay spawned such *blind* disgust against those three statements, and more constructs in later years with people following the "Considered Harmful" cliche that this did nothing but long term harm in the CS community. If you were to follow all of these essays, you would end up with nothing but a linear block of statements followed by a recursive call, with no control flow at all.
&gt;Because of Go, not because of C. Yes, 100% because of Go, you're right. Doesn't change the fact that you replace C with Go when you need to speed up Go.
evidence. [https://imgur.com/a/N3ot99I](https://imgur.com/a/N3ot99I) spoiler yes at least for web apps where db querying is a thing. Source [https://www.techempower.com/benchmarks/](https://www.techempower.com/benchmarks/)
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
&gt; Doesn't change the fact that you replace C with Go when you need to speed up Go. Absurd. Why would there be any C to replace in a Go project and how the hell would that replacement make it run faster?
tl;dr automatic type annotation. 
I am not neglecting it at all. Perhaps it did quite a lot of good at the time, but the essay spawned such *blind* disgust against those goto statements that is completely unreasonable. Goto isn't always that bad. Not to mention the other constructs in later years with people following the "Considered Harmful" cliche that did nothing but long term harm in the CS community. If you were to follow all of these essays, you would end up with nothing but a linear block of statements followed by a recursive call, with no control flow at all, at best. If you were to agree with Dijkstra's "loops are superfluous", you are now allowed to use "if/else" along with your recursion. Not much better. You are correct about Niklaus Wirth changing the title, but this does not mean that Dijkstra did not approve of the change-- generally speaking the author has final say over any editor's remarks in publication. Perhaps the letter was for its time. But when its time passed, the letter was applied to languages like FORTRAN, C, perl, and more, even though it shouldn't have. Dijkstra did nothing in his lifetime to actually properly clear up his essay for other languages.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
While I do agree that this instance is deceitful, there are other cases of using Cython speeding up Python code which are far more truthful. Just because Cython just transpiles into a Python C extension doesn't necessarily mean that it is no longer Python-- when transpiling many times it uses the Python specific object structs and datatypes instead of raw C-- it seems that there is quite a bit of overhead just going from the Python bytecode to the C object. Either way Python was never meant for speed. That said for some reason with the way that Python is heading I wouldn't be surprised if Python at some point adds other Cython features (cclasses, calling C functions directly)-- they already added optional typing.
&gt; Why would there be any C to replace in a Go project Because you can code libraries and toolkits in C and use them in other languages. What do you do in Python if you need to speed something up? You code it in C and then call the C code from Python. The same can be done in Go, maybe you already have existing code in C so you just call it from Go rather than rewriting it in Go. &gt; how the hell would that replacement make it run faster? The other guy explained it already; while C itself is faster than Go, the difference is so small that the gained benefit is less than what it takes to actually call C from Go. Thus if you want to speed up your Go, you want to get rid of all the calls to other languages.
You can open an Anaconda prompt and type 'anaconda-navigator'. 
A factor of 2-3 is pretty damn small. Usually people only note a difference after an order of magnitude. In particular, plain cpython is 2 orders of magnitude slower than C. Java and Go have really similar performance which is what the parent was talking about anyways.
The BeautifulSoup (module name is bs4) and requests modules are my go-to for this stuff. Grab raw HTML with requests and parse it with BeautifulSoup.
ok i will look into this when it comes to visualizing the data, is it hard to have it output to a google sheet? 
It's saying its not recognised as a command 
Are you able to actually get an anaconda prompt where you get to the command line and type Anaconda? If you're getting that error from just trying to run Anaconda then Anaconda is not installed properly if you're getting it only when you try to run Navigator you can maybe install it using conda. To install this package with conda run: conda install -c anaconda anaconda-navigator 
&gt; while C itself is faster than Go, the difference is so small that the gained benefit is less than what it takes to actually call C from Go That is Go's fault and problem for having such a high FFI overhead.
No dragons, just extra stuff to learn: loop.run_until_complete(asyncio.gather(coro1, coro2)) If either `coro1` or `coro2` raises, it will raise out of `gather()` and indeed also `run_until_complete()`, which will be stopped by the raised exception. Alternatively: results = loop.run_until_complete(asyncio.gather(coro1, coro2, return_exceptions=True)) This will run until both are complete, even if one raises. (You would have to manually check `results` for one or more Exception instances to find out whether that happened or not). I prefer using `asyncio.wait()` rather than `gather()`. It's only slightly more complex, but also more flexible and I find it reads easier anyway.
&gt; In a “Strongly-Typed” language, you have to specify the type of a variable when it is declared. Those would include C, C++, Java, C#, Go. &gt; In a dynamically-typed language, there are still the concept of types, but the type of a variable is dynamic. Yet another person doesn't know the difference between strong typing and static typing, apparently.
&gt; Java code can be slower than C++ code--sometimes by a factor *much larger than* 2 or 3. 
&gt; there are other cases of using Cython speeding up Python code which are far more truthful Yes, but Cython is not Python - it's a superset of a subset of Python, different enough - when you use its type notation - to be considered another language. &gt; it uses the Python specific object structs and datatypes instead of raw C+ Those Python data structures in libpython are written in C. &gt; Either way Python was never meant for speed. I know, but people insist on putting "Python" and "fast" in the same sentence, over and over again. 
I'm pretty sure Python doesn't bother guessing the type at runtime anyway-- the only time where this matters is doing an operation on two different types, such as string and numerical addition, but IIRC Python does 1. Keep type information on the object 2. Doesn't fail directly on type mismatch, but rather when the defined magic method for the operator doesn't support the other type.
I think you're missing my point, which is there are cases where Cython can be treated purely as a Python static compiler, rather than it's own language superset subset. And I've never seen people insisting on putting Python and fast in the same sentence. Even with Cython in pure python mode, it is still a snail. Just a snail on a little bit of meth. But hey, you don't always need a racehorse.
&gt; And I've never seen people insisting on putting Python and fast in the same sentence. You should read the title of this whole bloody thread.
But it isn't claiming Python is fast-- just that this specific code, when precompiled with Cython, is faster than if it was written in Go.
Not that practical, you're not really going to be able to do a lot with this server. Once you need anything that relys on the Gil, you take a pretty massive performance hit. The go server they compared this to doesn't have any similar limitation. 
Python is obliviously fast enough to fuel its continued growth. Speed should be treated as an *optimisation*; and when you do, you make a different set of decisions that usually leaves Python as still the best language to use. 
&gt; But it isn't claiming Python is fast "A multi-core **Python** HTTP server (much) **faster** than Go" The server is, of course, written in C: https://lwan.ws/
It looks like your problem is with the installation of PyQt5. Have you tried using PyQt5? What happens when you just do `from PyQt5 import QtCore` ?
Decorators can be very useful for handling exceptions, provided that you have different functions that can raise the same exception and that you want to handle in the same way. Can you point to any code where you have seen this pattern being used?
Jesus I think I lost a few brain cells from this back-and-forth.
Flask is a great choice, it's minimal and let you have a good control over all your project, Django is good too if your project has a large scale, but you could pass a lot of time to configure it correctly at the beginning .
[this is where I first saw it](https://code.tutsplus.com/tutorials/professional-error-handling-with-python--cms-25950) 
It's a great idea to improve the usually boring and repetitive task of starting a new Python project! That said, have you taken a look at [https://github.com/audreyr/cookiecutter](https://github.com/audreyr/cookiecutter)?
i know that u can run a single coroutine in that way but i don't see the point of running a single coroutine so i didn't bother explaining it
That project essentially makes mine obsolete, I guess. I didn't know about it until now. Thanks for bringing this to my notice.
i agree on asyncio.wait, so far i never needed the additional functionality of gather
How difficult this will be depends on how you’re using MSSQL today. If you’re using extensions to the SQL standard then you’ll have to work to replicate those. In general you’ll want to abstract the database into its own layer so that as little code as possible needs to interact with the database directly.
Using an ORM would make this pretty easy. If you built your own ORM or use a specific SQL abstraction layer it'll be more difficult.
Why do you need a substitute? Python has OOP tools and it has functional tools - just use whichever fits the task better.
No. You will get spoiled. You will think things are nice an easy. Good luck trying any other language after that. 
This might be interesting, but I'm afraid it's appallingly put together! The main file is 500 kB and 14,000 LoC, and it messes around with site-packages in `install.py` to install itself. Definitely worth having a look at http://python-packaging.readthedocs.io/en/latest/ and refactoring the code base so it's not just a massive unstructured list. 
Python is so heavily integrated with C and Cython that I’m ok with calling integrated code Python. Here, however, I agree with you. It seems like no new Python or Cython code was written (other than wrappers). Not Python. 
Technically yes, if you want to be creative. Functions can be instantiated with certain state information. But classes in python are better for this in every way.
The sad thing is that to call C a strongly typed is everything but true. Hard to trust such experts.
&gt; It's very hard to find a problem hitting all of the four criteria I see this all the time in Python threads, and I've seen it in Raymond Hettinger's talks. This is a post-facto justification. It's hard to find applications that have these problems in Python because Python unsuitable for them, not because the problems are rare. The truth is that they exist in nearly every project, but they're usually exported to other systems not written in Python. For lots of web applications, this is the database; for data intensive applications, it's spark + some combo of pandas and numpy.
Are you asking, can you use Python to follow a functional programming paradigm instead of a object oriented programming paradigm? If so, yes, you don't have to do OOP with Python. It is flexible to allow other approaches.
Oh, do I see a victim of functional propaganda? Seeing questions like this makes me feel guilty. Just use whatever you want. Too early to trouble yourself with such stuff.
I can help you out if you can Photoshop some money into my paypal...
Thank you for you reply. Django ORM was my first thought, and sounds like a good choice on paper, but I am wondering about the downsides of this approach?
OK, heard you on this one.... Going through the entire SDK and converting the optional parameters to all be lower case. Not good the way it is now. Better to get this over with right now before I break it for anyone that's got code using it. 
I am not sure what you mean by "extensions" to the SQL standard. TSQL in and of itself deviates in many degrees from SQL ISO standards, as do most major RDBs. So that is definitely a design concern I have thought of, but do not have the answer to. I can tell you that SQL Stored Procedures are used pretty heavily in the existing application. Other than that everything is pretty standard TSQL.
The downside is that it's just another layer of abstraction. It really depends on your use-case. Why not just start with postgres?
Mainly because I am trying to do this migration in phases, and the current application stack is soooo old, that it is more important to deal with the application first, and then plug and play the database layer later. Also, at the end of the day, data is data, and SQL for the most part is SQL. So if designed correctly it should be relatively easy to switch from one DB to another. I am just trying to assess how to design it correctly! ;-)
r/learnpython
I wrote a function to do it and am currently integrating it into the new networkx version after the pull request gets accepted 
Functions are objects and can have attributes so.. Yes but there’s not really a point in doing so. What are you trying to achieve here?
works great now thank you
C'mon, it's still right there on the front page: https://www.reddit.com/r/Python/comments/8yapie/transfer_of_power_guido_stepping_down_as_bdfl/
That E-Mail is 4 days old. How high do you estimate the chances that none of the 250 000 subscribers of this sub has linked to it yet?
fasthttp is also not a good go library. You really shouldn't use it. The standard http library is actually much faster these days at scale (in my experience building apps that talk to a ton of external services) and supports http2 as long as you change the defaults to be similar to the ones used by fasthttp (increase maxIdleConns, keepAlives, optionally an in app dns cache)
Yeah, but are the benchmarks even meaningful? Doesn't your application's processing time dominate?
[Python](https://en.wikipedia.org/wiki/Python_(programming_language)) is a multi-paradigm language and can be written in procedural, OO, and functional styles. It's all Python. 
Also https://github.com/Instagram/MonkeyType
Stack Overflow tends to be pretty toxic in general. I’ve seen several questions without example code that have helpful answers, but then if you scroll down a bit, the other responses are similar to what you’ve experienced.
Perhaps [this](https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/) more explicit writeup might be more useful to some people here. I've seen a similar one for C# and other JIT languages. Also, tossing the 84x performance improvement from PyPy there is kind of irrelevant. Entirely application specific.
No. They are complimentary, or you go the purely functional approach… with some difficulty for lack of monads, the rest of the ecosystem being a mix of OO and stateless-functions, or even having global state, etc. Classes are classes. Methods are methods. Functions that aren't methods shouldn't abuse state, even hidden like closures.
I think programming is more about learning concepts than learning syntax
Sigh. You originally said "bullshit" on replacing C with Go. It's not bullshit. Now you're arguing about something completely different and irrelevant. Besides, it's not Go's fault, it doesn't have any higher overhead than other languages, it's just that it's already very fast so making calls to other languages isn't worth it. When you compare it to something like Python, which is so slow by itself, thus the small overhead is worth because the performance gain is *so huge*.
&gt; it's not Go's fault, it doesn't have any higher overhead than other languages Guess what? https://github.com/dyu/ffi-overhead
Yes. OOP is just a programming style. There is nothing in OO that you can do, but can't in functional or imperative programming. Now, should you ? No. Using the proper paradigm for the proper task you will make for a better dev experience.
I wonder if they heard of https://github.com/squeaky-pl/japronto though that's also a proof of concept, but it'd be interesting to see if that could be developed more. 
But I forgot to stop reading at the end of my character array, and now I have what looks like.....a Klingon opera?
You just gonna keep arguing forever and ever about literally individual words (replace "any" with "much") rather than focusing on the actual matter? When are you gonna say "you know what, you're right, it wasn't bullshit like I originally said, my bad"?
/r/programming doesn't allow text posts because that mainly ends up with people asking questions about how to do something in code. It was decided that that's not what /r/programming is for. As for your question... yes, generally code is necessary on SO. You're asking for people to use their free time to help you with your coding issues, the least you could do is give them something to work with, and an explanation of what you want it to do instead.
Do you mean installing via the anaconda prompt window?
I mean writing to the Python interpreter the command I told you in the previous message. 
&gt; When are you gonna say "you know what, you're right, it wasn't bullshit like I originally said, my bad"? When that will apply. It doesn't here.
Even if it's a general question you still SHOULD include a piece of code. It shows others what your are actually talking about. It would also help if you include some non-working code (i.e. I tried this, but it didn't work). Otherwise you are just asking others to use their time to go through documentations and Google results for you, which you should do yourself.
thanks
How long did this casually take you? Damn son. 
Requests + an HTML parser?
Maybe it's time to flush python 2 support down the toilet for some of my bigger projects and start using type hints. All python needs now is a batteries-included C compiler!
Here's a GUI that I use as a front-end to an ebay search tool I wrote. It's got 3 tabs with lots of options. [eBay Search GUI Tab 1](https://i.imgur.com/hZdShgL.jpg) [eBay Search GUI Tab 2](https://i.imgur.com/S85QWLs.jpg) [eBay Search GUI Tab 3](https://i.imgur.com/C2ouaxk.jpg) Here's the code for the first tab. I tried to design the specification of the form in a way that the code was visual. If you examine the GUI on a line-by-line basis then it's easy to follow the code. Simple, right? `layout = [[Text('eBay Super Searcher!')],` `[InputText(), Text('Choose Destination Folder'), FolderBrowse(target=(ThisRow, 0))],` `[InputText(),Text('Custom text to add to folder name')],` `[Text('_' * 100, size=(75, 1))],` `[Checkbox('Save Images', default=True, size=(15, 1)), Checkbox('Save PDFs', size=(15, 1)), Checkbox('Extract PDFs', size=(15, 1))],` `[Text('Use Pre-Defined config or make your own?')],` `[InputCombo(configs)],` `[Text('_' * 100, size=(75, 1))],` `[Radio('Active Listings','ActiveComplete', default= True, size=(15, 1)), Radio('Completed Listings', 'ActiveComplete', size=(15, 1))],` `[Submit(button_color=('red', 'yellow')), Cancel(button_color=('white', 'blue'))]]`
I have tried requests + bs4 and it's really good for small scale scraping. I want something which has plugin / extension ecosystem. For example to follow all links on page recursively Scrapy provides LinkExtractor which can be used with Scrapy Rule. But with requests + HTML parser or requests + bs4 I will have to write bunch of complex code.
You could always try the alternative: [plotly](https://plot.ly/python/). In the past I have struggled to make sense of bokeh, but found the API unwieldy and documentation unclear. For my, plotly was a breath of fresh air.
probably a confusion between "async" (asynchronous programming) and "asyncio" (the python library)
I should've included that I've already searched through the documentation, and found nothing on the matter. I think I did a reasonable amount of research before posting the question. Thanks.
Then it would be a good idea to include what researches you've done in your question. Imo the problem is not about including a piece of code. It's your attitude. You need to show others that you've made an effort, and then something didn't work. If you don't include any of that, you're giving others the impression that you are just throwing your problem there, and letting others solve it. No one likes that kind of question.
That makes sense, I suppose thats what /r/learnprogramming is for. I gave an explanation of what I wanted it to do, and that is disable a certain feature on a widget. I didn't give them anything to work with because I just didn't think it would be helpful. The only code I could've given them that would be related would be something like: from tkinter import \* app = Tk() l = ListBox(master=app) l.insert(END, "One") l.insert(END, "Two") l.pack() \# Now how do I disable the automatic arrow-key input feature of the ListBox I just don't see how this example helps at all. All I really want to know if listbox has a method that will disable the input feature, and that question can be easily explained in a single sentence in english rather than python. So what was the point of writing that code at all? I suppose it would allow other people to more easily learn from the post, but it wouldn't help in seeking an answer for the question in the first place. To clarify, I'm not wanting to know if it is *generally* necessary, I'm wanting to know if it's *always* necessary to include a code sample.
https://github.com/kennethreitz/requests-html
Nice work! This reminds me of the very similar [cutelog]( https://github.com/Busimus/cutelog) library.
Only the Sith deal in absolutes. *Generally* necessary is as affirmative as you can get in a question like this. The point of providing the code was to give someone something to run, and something to modify, to show you how to solve the problem. If you don't provide a starting point, then you're just expecting the people answering your questions to do all your boilerplate code for you. If you don't put any effort in, why should they?
It will not be a 'problem' per se, but it's bad form to put unlinted code up. Sometimes what people do, myself included, is to let code 'hover': allow others to contribute, correct your style if need be, lint your code, make sure it's well-documented, etc. Then you can put it on PyPI. This is true a fortiori in your case, because your application is not something people would embed in their own applications, it's more like something one would just have as a separate standalone application, and that is perfectly doable if it's in on Github or some other service. You might want to look into packaging it as an executable, even.
That makes sense, I'll include code samples in future posts for that reason. In my case there was no non-working code. I did do adequate research (I think) I just couldn't find anything in the documentation that seemed to solve my problem. 
The funniest part is, if you point out that the community is toxic then you automatically receive down votes! I completely agree that it's generally toxic and I hate that aspect of it, and if people can't recognize it then it'll never get any better. I just didn't want to say because that's instant hate from the programming community.
Thanks for this.
https://docs.python.org/3/reference/index.html
If you know how to use Scrapy, why not, well, use Scrapy? I mean, it's not a large framework at all. It packs just what you need to be productive. Also, why does the learning curve matter if you already know how do what you need to do?
Does it support asynchronous http ? I could not find anything in docs.
I don't know scrapy well I am beginner and just tried different code snippets from scrapy tutorials and stackoverflow. If there is no other alternative then I will stick with scrapy.
SQLAlchemy is a python SQL abstraction. You can use only the core and not use the ORM, if you want to.
I am not sure how to package it as executable. One of theories I have about that is use importlib, replace \_\_name\_\_ to "\_\_main\_\_" in module, launch GUI, and launch module then. But I am sure there is a better way
Yes. You can use the numpy.random module for any of the simulations you need.
Your input has been noted. The bot adds a comment in these situations because most references to /r/learnpython do no include the added comments about paying attention to the sub rules, and in this case, why the sub is useful to a new programmer. (In fact, many times the reference to the sub is just "/r/learnpython" and nothing else). A lot of questions are not clear and encouraging users to read the rules and guidelines hopefully helps them present their question in a useful manner. This follows the comment style of the mods from the /r/python and /r/learnpython subs on threads where other users have already mentioned it. The bot is currently undergoing a lot of changes to improve its usefulness, and your suggestion is being considered. If you have any other useful suggestions, feel free to let me know.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Could you enlighten me as to what is wrong with this statement?
i'm just surprised by the level of fragmentation between glyphs. i was basically told that in order to achieve something that i would think should be available out of the box, i would have to manually extend by creating a custom subclass. WHAT?!? so your built in can't anchor anywhere but center and scales to remain the same screen size through zoom, and the alternative is to use patches which are drawn based on x and y coords, but there's no mechanic to convert initial x,y into a screen draw size if so desired... yeah. i was really enjoying bokeh from an aesthetic perspective until i had to do something which i don't really consider to be some sort of outlier use case and then hit wall after wall.
https://github.com/ross/requests-futures
[Here](https://wiki.python.org/moin/PyQt/Deploying_PyQt_Applications) is some stuff about packaging PyQT5 applications. Your best bet is probably [PyInstaller](https://www.pyinstaller.org), which creates nice cross-platform executables. There's also [py2exe](http://www.py2exe.org), which is delightfully simple, but only supports Windows executables.
Thx for this information, I looked it up and it looks very complex. Any hint which functions of it are specially useful for my purpose? 
eafp vs lbyl python uses eafp so just do it :-)
No, I meant executable as in py -m scriptname test.py
Or if you want to run on windows and don't want to use a beta version.... :\
Consider adding in print statements so you can debug your mazes. You can also set the seed used so that it always draws the same maze. 
I think you mean `python -m module_name`. Known also as [PEP 338 execution](https://www.python.org/dev/peps/pep-0338/). The mechanics of this are pretty well explained [here](https://stackoverflow.com/questions/22241420/execution-of-python-code-with-m-option-or-not).
It uses asyncio. https://github.com/kennethreitz/requests-html/blob/master/requests_html.py
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kennethreitz/requests-html/.../**requests_html.py** (master → c59480b)](https://github.com/kennethreitz/requests-html/blob/c59480bf154b86ccb492a7dcc9b6e446195dae61/requests_html.py) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e2hwiq2.)
You should post this in /r/learnpython. Anyway, Monte Carlo methods are a broad class of problems. There are tools for more specific types (such as markov-chains), but for a lot of what you're talking about, using any random number generator should be fine. I think `np.random.[...]` is pretty good but you can also use `scipy.stats.[...].rvs` As I said, this is super broad, so when you ask to another reply: &gt; Any hint which functions of it are specially useful for my purpose? you need to tell us what your purpose is! One tip: Especially while developing, use `np.random.seed` (if using that NumPy world) and/or `random.seed`. Set the seed before you run something so you get a deterministic random number. 
C, for example, has static typing, but it is weakly typed.
So one of Python's design principles is "There should be one-- and preferably only one --obvious way to do it." which means that if all went to plan such a book should not be necessary. I'm not sure if this is the case any more (see the three methods of string formatting, `asyncio` versus `gevent`, the `async` keyword versus `coroutines` etc). Personally, I've found *skimming* any introductory textbook to be a pretty informative activity if you are new to language such that "for experienced programmers" becomes less important. 
I have never used it but [records](https://github.com/kennethreitz/records) sounds like it may be what you're going for.
Ah! I missed the "-html" at the end of the link, and thought it was just a link to the bare requests package.
Thx in many ways for your response. Didn't know the other sub, but will subscribe now. I am going to have a look at the functions you mentioned. Also I will articulate my purpose in detail tomorrow morning. Thx. 
Working on a Django Saa(f)S app that helps people manage a food bank. The main objective is to create a tool where food banks can get started with zero investment (it's a free web based app), and have a really professional system that helps them be aware of what they have in stock, what they're missing, what the issues are, and so on. It is also meant to be 'rack aware': it knows where stuff has been stowed, and when it says 'issue this box of biscuits', it says where the box of biscuits is. This way, it can prioritise items with nearby expiry dates. Eventually the system will also have a level of awareness of food items. At intake, a barcode scan (easily accomplished using a phone or a cheap $20 handheld scanner) identifies what the item is, and when food items have to be issued to recipients, it performs an optimisation logic to issue an appropriate, dietarily complete and nutritious package. Individual recipients can be registered with the system (this is not necessarily using their name – a food bank has the option to simply start issuing randomly generated barcode cards that allow anonymous but trackable access) and can be put on a 'diet plan', meaning their food allergies, intolerances or special dietary needs (kosher, halal, low sodium, etc.) can be taken into account. Big and ambitious project, so right now I'm really focusing on getting an MVP out ;)
Some languages aren't so busted that you can only use a few percent of the things. fwiw i learned from martelli's nutshell book and Beazley's cookbook.
From my limited knowledge of block chains, I’d imagine it’s because python is slow relative to C++, and cannot run in a browser like JavaScript.
soooo what does that mean?
I don't think your code is that bad, but if you want to improve it, you should probably run a linter on it, like flake8 or pylint. Also i saw what looked like it was supposed to be an abstract method. You should take a look at this https://docs.python.org/3/library/abc.html for the 'proper' way of implementing those. 
The rand() function will provide a random value between 0 and 1. You can also generate random integers using randint(). I'd recommend googling monte carlo simulation in python -- you generally have to understand it in order to run it.
I really hate how popular Medium has become. The site makes articles look professional and gives the false impression that they're written by experts, but a lot of them are no better than a blog post by random people on the internet.
Python is both dynamically and strongly typed. C++, Java, C#, and Go are, I believe, all statically typed. Strong vs. Dynamic isn't a logical contrast, as things can be both. Python is such a thing. It would be more correct to compare Strong vs Weak typing, and separately, Dynamic vs Static typing. In static typed languages, you have to declare the type of a given variable before you use it, and it cannot be changed. In dynamically typed languages, the same variable can reference different types at different points in the execution flow of the program, and as such, do not require such declarations. It is relevant to note that python recently added optional "type hints" which add some of the benefits of statically typed languages, but it does not require or enforce their usage, which is a big fundamental difference. In strongly typed languages (Like Python, and frankly, most common languages afaik), the interpreter and/or compiler will never infer/change a type. So for an example in Python 3: `&gt;&gt;&gt; print(4 + 4)` `8` Here, after evaluating the `4 + 5` expression, the `__str__` method from the resulting object (which you can think of as `int(9)`) is called in order to get a string representation of that object, which is the default behavior when you call print() on any object in python. `4` and `5` are both instances of type `int`, and each have a `__str__` method. `8` is an instance of type `int`, which has a `__str__` method that can be used to get the object string representation. `print()` is basically calling `int(8).__str__()` in order to get a string that means the same thing to humans as `8`. Likewise: ```python &gt;&gt;&gt; print('dog' + 'house')` 'doghouse' ``` Here, after evaluating the `'dog' + 'house'` expression, the `__str__` method of the resulting object (which you can think of as `str('doghouse')` or just `'doghouse'`) is called in order to get a string representation of that object, `'dog'` and `'house'` are both of type `str`, and each have a `__str__` method, as well as an `__add__` method that allows for the concatenation based on the `+` operator. The concatenation expression is evaluated. However: ```python &gt;&gt;&gt; print(9 + 'doghouses') Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: unsupported operand type(s) for +: 'int' and 'str' ``` You might have expected it to `9doghouses`, but instead, you get this `TypeError`. This is Python's way of telling you that while the `+` operator works for both types `str` and `int`, this operator can't be used *between* the two types. While `9` is the same as `int(9)`, and we know that `int(9).__str__()` will return a string version of `9`, `'9'`, Python will not make that conversion from type `int` to type `str` implicitly. You have to explicitly tell it that you want a string representation of `9` by calling the built-in function `str(9)`, which is indirectly calling `int(9).__str__()`. ```python &gt;&gt;&gt; print(str(9) + 'doghouses') 9doghouses ``` The lack of CPython's willingness to implicitly convert the type for you in such cases is an example of strong typing, and is contrary to weak typing, which would allow `print(9 + 'doghouses')` to return `'9doghouses'`. A lot is made of these foundational principles. You may hear "strongly, dynamically typed" as a description of python before you really know anything about programming. However, these are really pretty small, sensible differences. To me, the important thing to take away is that all languages have to make decisions about how they will handle all sorts of situations, and they make different decisions depending on the perspectives of their authors--but the types of decisions they make are always the same, so there is a bunch of terminology to describe and categorize how languages behave. 
Well one of the problems with asyncio is how there are so many ways to achieve the same result, and they all have drawbacks. Asyncio definitely doesn't follow the zen of python.
any specific reason for numpy random over standard library?
O'Reilly's "Good Parts" books (they also published them for PHP, HTML/CSS, and Java) were all meant to tell you what to avoid as much as what to do, for languages that had had a lot of ad hoc mess and traps for the unwary in them. Python has a lot fewer of these problems, so a "Good Parts" book doesn't make as much sense for the language. You're not going to find a direct Python equivalent. [The Quick Python Book](https://www.manning.com/books/the-quick-python-book-third-edition) might be close to what you're after, if you haven't worked with Python at all. [Effective Python](https://effectivepython.com/) might be a good choice after this, or if you're already up to speed on the basics of the language. The recommendation in a different comment of the Python Cookbook is a very good one as well.
What the fuck? This /r/learnpython shit. 
Faster than Go when precompiled with Cython isn't an objective use of "fast".
Speed
Python is way, way easier to learn than Java or C++. But if you want to do iPhone stuff, go straight to Swift.
Thx for your response, have a great day. 
Python is an adequate beginner language. It is NOT a simple language. Scheme and C are simple languages. Python is very complicated. But that complexity is mostly hidden from a beginner. Easy and simple are not synonyms. Python is fairly easy to get started with. The community does a great job making sure you can install a new library and get something working that you can start playing with immediately. 
This is because asyncio allows this pattern, but it isn't safe asyncio/await design. Async code in python should have a single clear entry and exit point. The problem, as I hinted to earlier, is error propagation. If a task started with create_task raises an exception, you may be able to catch it. Ultimately the loop stops and you end in sync world. But what about the other tasks that you started? What happens to them? They could be stuck in some important io operation, which they never get to finish, since the loop dies and nobody tells them. In asyncio the only way to deal with this safely, is to have a single point of entry, and explicitly await all created tasks in async world. Trio goes so far as to make this explicit. It allows only a single entry point into async world.
Choose either Python or Ruby as a newbie. Note, if you do pick Ruby though, you gotta buckle down and learn the Rails framework too or they'll be no point.
7. I think you should consider using both. They're orthoganal and can provide you with different ways of executing the package if necessary. This is especially helpful for debugging, but it can also help the end user if they know python pretty well. 8. Yes.
This is some whack basic bitch shit. Are you that much of an asshole you don't communicate with your mother? On top of that, this code is so simple to write it is boring.
That's programming par excellence: You'll find several good tutorials and documentation on the single parts of your application. Your own job is to make them work together.
Hit me up, I'm trying to break in from full-stack(MEAN) and need professional projects for my resume. I'm pretty good and I am cheap.
\[Hiring\] Back End Developer at Harvard University \[Boston,MA,United States\] [https://djangojobs.net/jobs/786/back-end-developer-harvard-university/](https://djangojobs.net/jobs/786/back-end-developer-harvard-university/) The Harvard Humanitarian Initiative (HHI) is an interfaculty initiative with the mission to advance the science and practice of humanitarian response worldwide through research and education. As a core member of our web development staff, the Back End Developer will have a crucial role in implementing new software features under a tight development schedule. The Back End Developer is a member of a small, dynamic, and highly motivated team tasked with design, implementation, quality assurance, and user acceptance testing in a continuous integration process, and will be responsible for building applications that exhibit superior reliability, robustness, and performance. This is a hands-on web development role, and requires the implementation of a system using Python/Django, Docker, AWS, PostgreSQL (among other platforms) and using best practice continuous integration tools. 
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Totally agree. That's why moved to Reddit. If someone can't handle a question without code, then just don't comment. There are plenty of times code isn't necessary if the one answering actually knows their stuff. 
That's fair. I wasn't asking for anybody to write code for me. I looked through the docs, I fixed my code with a workaround. Now I'm wondering, is there a way to do this without a workaround. The workaround could be avoided if I could turn off the feature in question, so I'm asking if the feature can be turned off. All I need is "Yes you can turn this feature off by doing 'x' to widget". Very straight forward.
IIRC, the initial reference implementation of Bitcoin was written in Python. But in the end the main business of blockchain (lots and lots of hashing) is traditionally more the domain of C/C++ just due to sheer speed. As for JavaScript ... man, I got no idea. Browsers maybe? (I'm being a little facetious on this last bit. A little.)
I'd say if you can write all of your code in python, then it makes perfect sense to call it "Python". It would be dumb if you're looking for a high-performance library in C and you get projects designed to be used in python simply because much of backend was written in C. The intent is that it is to be used in python and the end users only write their code in python. So this is a fast web server for the Python ecosystem, thus it's "Python".
Static typing = *type* of variables doesn't change during execution (C). Dynamic typing = *type* of variables does change during execution (python). Strongly typed = variables (for example) must remain the exact same throughout the code (python) `a` &lt;&gt; `A`. Weakly typed = variables can differ (how they are written) throughout the code (Pascal) `a` == `A`.
For anyone wondering: *On Python's BDFL Guido van Rossum, his dedication to the Python community, PEP 572 and hope for a healthy outcome for the language, open source and the computing world in general.*
You don't need a MacBook for coding...
I certainly would have been more comfortable seeing him hand over the reigns to some other entity but perhaps he didn’t feel that was pythonic.
What are you trying to put in dict[key]?
You need a MacBook for making apps for Apple products. I didn’t mean I bought the MacBook solely for coding, I wanted one for general use also. That was just irrelevant to add into my post..
Okay thank you! In terms of starting with python, is there another language that would be best to learn in conjunction or after python that will help with making something like iPhone apps? Also if so will knowing python help to learn that other language? Sorry for all the questions lol
So, the first thing that I want to do is let you know that while an idea like this is a good idea....I *REALLY* want to point out that you will need to find a way to write a business contract in a way in which doesn't bite you in the ass. When it comes to automating a business process, one will have to have set expectations that are easily verifiable and are spelled out within the contract. If you are able to come to some sort of proper contract then I would say that while it's risky, you can try it. I don't know how to do the legal/business portion of this though. The reason is because a lot of times automation of a particular process is going to require a *LOT* of triage and some education upon the customer of what they *might* expect. 
&gt; '27598\tIndividual refused\n' Each line looks like that. The numbers are the ID number. So I'm trying to extract that, and put in the "Individual refused" as the value
AFAIK there's no flag to do it in Tkinter. You have to override the event handler for keypresses.
Good bot. This is actually a great bot.
Appreciate the advice! Have any advice on what process of a business actually has the ability to be automised? 
I’ve been doing a lot of automation through work and pet projects recently, the only reason I would stray away from something like this is because maintaining projects/scripts/applications built around automation is a giant PITA.
 Mods, I ask again (and again), if you can use CSS voodoo to put a notice front and center on the submit page, **please do so.** Sorry I only have a moment right now, but: - you can't slice a dict - look at this: from collections import defaultdict d = defaultdict(list) with open('medreasons.txt') as data: for line in data: k, v = line.split('\t', 1) d[int(k)].append(v.strip()) print(d) --- defaultdict(list, {27515: ['Client unavailable for med administration', 'Failure to remember'], 27598: ['Individual refused'], 28331: ['Failed to check medication changes']})
That is called consulting and I would say that in general is not subscription based
 if key not in dict.keys(): dict[key] = dict[6:-1] else: dict[key] += dict[6:-1] Did you mean `data[6:-1]`? because slicing on a dict makes no sense.
I’m not strictly talking about advice - I’m talking about providing them with a script that they will pay a monthly price for. Something of that nature :)
For one, copying purchase order fields and pasting them into excel template for the financial team to see where the money is being spent. THIS is something that every company has and they just hire a Susan or Linda to do, requires no real training other than looking at line items and copy pasting them. 
Non-programmers understand apps, not scripts. We've trained them to distrust scripts, and rightly. Here's something that could work. Get an MBA or business degree, to get credibility and your classmates as prospective clients. Offer consulting to help small businesses audit their processes and automate them.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
That is something a consultant would do.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Thanks for the explanation!
I did something similar at work. It started as a part-time project using a vendor's API to automate part selection and purchasing for the project managers, and grew into my full time job once they started liking what they saw. The bare bones took a few months of part-time work to get something the power users in my office could use and save a ton of time with. The actual release version that even essentially tech illiterate people could use took about 6 months of full time work. Basically, the gap between a tech demo and a polished release is *much* larger than you probably expect.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
[removed]
every business will have slightly different workflows for common business processes, so it would be hard to find a business process that a blanket script would work for everyone. I think if this is something you wanted to do, you would be better off adding the ability for the business to customize their workflow (think of something like sending documents through different approval processes).
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Even when they tested `server response + workload` (over just how many near-empty responses can the server spit out), their workload was Fibonacci in compiled Cython. Which is going to be compiled to blazing fast numerical C, not pretty slow Python arithmatic. Which of course is nothing like what `workload` looks for anyone actually writing a web service in Python.
Just tip, reddit does not support language-highlighting markdown code blocks, and also doesn't support \`\`\` code blocks.
Check out /r/learnpython for stuff like this. To answer your question, you don't need to use 'in' of you're checking a specific position in the list. Just use if l[1] == 'Y': ... Notice the quotes around 'Y' ?
I personally went with Stripe and didn't find it all that difficult. I don't think "quick and dirty" is the sort of strategy you ought to adopt when it comes to payment processing. Mistakes in this area can cause huge headaches with serious legal consequences.
Started a nee scoring system for cricket a huge fan of the sport and player i was hoping to develop a new scoring system thats stops us wasting paper to write everything down in with a hope that once it is finished i can then give it to my cricket club so that they can use the simple system to save time and paper and also no courses needed to understand how to use it
&gt; Never, when it comes to performance. As long as we're talking single core, yes. If the question is who can use asyncio and multicore most efficiently, it's a case-by-case thing and it depends on how good the C and Go are.
Bokeh is exactly that.
That number 8 is interesting. Since this calls pyinstaller in a shell then you need to think hard to package it. Instead of going to this effort, I decided I would redesign the internals and call pyinstaller programatically by looking where the entry-point is. I found it and linked it up found found a substantial drop in performance when calling it in python. I'll be looking into this for a bit. 
Those numbers are deceptive. People don't use HTTP pipelining because proxies and other things break it. Additionally, those benchmarks are [specifically designed to work better with pipelining and don't function as they would in the real world.](https://github.com/squeaky-pl/japronto/issues/21) HTTP pipelining can actually *hurt* performance sometimes. If you turn off HTTP pipelining then Japronto's numbers are much lower. Don't get me wrong, Japronto is incredibly fast and very impressive, but it has always annoyed me that the developer doesn't show non-pipelined results in their giant graph in the readme.
Why scrappy? Why not good old requests + beautiful soup?
Clearly I've missed something. Why don't people like := ?
This is often known as "professional services" too. You build a "solution" with say support for 1 year for code updates etc. This again though is a one time fee. Unless what you're automating is extremely dynamic, they aren't going to pay a "subscription" to access a static script every month. 
Filepath searches can be expensive and there's always a startup time for running a python script and/or parsing a command-line interface. If you're doing a search, you should use the PATH env variable or alternatively subprocess with: * posix-based (mac/linux): `which` * windows-based: `where` And then memoize that information to a config file that's read on startup and is created if it's not found. But, I'm not sure why you'd see performance drops other than startup times.
To me there are two possibilities: * One is that a group of sensible people take over and take python to the next level with key features that we have all be clamoring for. The insiders who keep giving industry talks at python showing off complex and unmaintainable code to show how smart they are get butthurt and make a fork that goes nowhere. * Two is that the insiders who give industry talks showing how smart they are remain in control and python then has a group of vital and outgoing sorts do a fork leaving the insiders to remain with the "one true" python and get all butthurt as the new python gets more and more traction. The only question I have is: * What will the new fork's name be? 
Writing prototyping some financial models
People think `as` is more readable.
I really don't think we should name the new fork node.js.
Taken?
it saves like 1 loc of normal variable instantiation for code golfing sake and encourages packing more shit into one line at the cost of more cognitive load. No side effects in conditions was one of the staple rules of python. It also looks out of place in a keyword heavy language with its symbol-based implementation. When I look at the examples I smell perl, not python. The use cases are also not critical enough for any significant ROI to be there. If that's marginal yet controversial feature is here to stay, where is my lambda arg unpacking (`lambda (x, y): x+y` that made the code measurably more expressive in py2 but went away to make language implementation more elegant? Existing solutions like itemgetters ar only putting lipstick on a pig and can shove it. Where are null coalescing operators? 
node.py
I think this is pretty cool myself, but as others have said, run a linter over it, and if i were you, I would try and write some better documentation, at the very least some doc strings that tell you how to use it. nice work!
So, I use Graphviz to export to SVG, but it also has a JSON output mode you could use to inform something else.
So... in your own words, in either possibility there are *insiders* who give industry talks showing how smart they are by *showing off* complex and unmaintainable code? You're not contributing anything here but more of the same cynicism that left our community hanging. What's your god-sent opinion of Raymond Hettinger? Of Brandon Rhodes?
&gt; After all, I've already changed my tune on str.format, enums and type annotations; perhaps over time, I'll agree with this one as well. I can see clear benefits to all of these examples, but I do not see any benefit of an assignment expression.
For speed, have you considered Vibora + lxml? That said, there's not much complex to requests + bs4. See [https://gist.github.com/bradmontgomery/1872970](https://gist.github.com/bradmontgomery/1872970) There's also always the approach of not scraping with Python and instead dumping some money in a scraper pipeline with a tutorial to follow such as [https://medium.com/northcoders/make-a-web-scraper-with-aws-lambda-and-the-serverless-framework-807d0f536d5f](https://medium.com/northcoders/make-a-web-scraper-with-aws-lambda-and-the-serverless-framework-807d0f536d5f).
But...why? The only benefits of type hinting in Python are documentation and static checking if using mypy. If you're using a tool to automatically generate this information * the static checking shouldn't need type hints to check in the first place * the automagically generated type hints could be incorrect if not all secenarios are hit, thus the checker has a false state of some sort * your documentation can be incorrect for the same reason as the above This all comes from trying to make people write a strong-dynamic language like a strong-static one, which is bad practice, all for the ability to have another level of static analysis *which now apparently is void because you are generating information for the static analysis dynamically*. This is some next level cognitive dissonance to both make optional static typing a thing, and then spend time making it both potentially incorrect and functionally useless in comparison to the already possible dynamic analysis. Sure, it will be slower, but if you focus on one and not both at the same time you'll have less mistakes both ways.
&gt; talking about providing them with a script that they will pay a monthly price for. Something of that SaaS Solutions. But know what you are up against. Go take a look at JIRA and Salesforce. They are **huge** systems with thousands of man-years invested into development of them. And they start at like 10$ and 25$ per month. 
Those deviations are exactly what I’m talking about. Hopefully many of your queries won’t make use of them and so conversion should be quick for the majority of database access. I am not familiar with the stored procedure syntax in MSSQL but hopefully the conversion is fairly mechanical.
pypython.py
Is there any reason to use beatifulsoup over lxml? I saw a lot of people say they like to use beautifulsoup powered by lxml which made me go ahead and just start using lxml.
Just reinstalled python 3.7 again on c: program and studing the tutorial and beginners guide. My first little scripts are running so far , expect to be readyto write a trading algorithm for christmas this year.
Is there a `spyder` without the three that you need? Maybe making a sym-link from `spyder3` to `spyder` in the bin directory would do it. That's what I've been doing to have `python` start `python3`
Whoever solves the GIL problem gets to be new king.
I've used Stripe and it is very easy if you're doing one-time payments... Just generate the token using Stripe's JS and then call stripe.Charge.create() in your code, it'll throw an exception if payment fails. Webhooks are also [pretty straightforward](https://stripe.com/docs/webhooks). What is your concern exactly?
I decided to just use Stripe. Im having trouble accessing the form values (like amount, description) in my view
io.py
&gt;from PyQt5 import QtCore Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ImportError: DLL load failed: The specified procedure could not be found.
I'm scared.
There were legitimate use cases. The nested regex matching example is probably the one I've encountered most often, where you have a line of text and you want to test it against a handful of regexes. I think they just chose the wrong syntax -- `as` would have been better. Most of the other examples (including the `with` examples that lead to them disregarding the `as` syntax) were all contrived.
As someone not really "in-the-know", I honestly have no fucking clue what `:=` means by just looking at it. That seems like a problem for Python.
I'd say a majority of people liked the idea of assignment expressions. But people were split pretty heavily over what the syntax should be. The proposed syntax just looked ugly and unreadable to most people. Many people preferred the `x as y` syntax, since it's more intuitive when reading out code. Right now, python doesn't use a lot of obscure symbols to represent operations like double ampersands and pipes, and deference operators, etc. Python has been designed to be written largely how it would be read. The ternary operator is a great example of this x if y else z As opposed to: y ? x : z The two primary arguments against it were that it's already used in other contexts -- `import, exception, with` and that it would be confusing to add another context for `as`. The other argument was that it would it could lead to ambiguity inside a `with` statement unless you either special cased the `with` statement to not allow this new `as` or forced it to only be used in parenthesis, which was a deal breaker for some.
While those numbers are deceptive, [Japronto is very fast as advertised](https://github.com/squeaky-pl/japronto/issues/21#issuecomment-277823424), by a significant amount over the other frameworks. Yes those numbers are deceptive, but Japronto is still significantly faster than the rest.
That should be pretty easy if you're using actual Django forms, e.g.: `class OrderView(View):` `form_class = OrderForm` `def post(self, request):` `form = self.form_class(`[`request.POST`](https://request.POST)`)` `if form.is_valid() and ('stripeToken' in` [`request.POST`](https://request.POST)`):` `print(form.cleaned_data['billing_name'])` `print(`[`request.POST`](https://request.POST)`['stripeToken'])` Something like this should work. Otherwise please post some code to show us where you're stuck.
&gt; significantly speed up That's the problem. Rome was not built in one day.
database access is IO-bound, not CPU-bound. Spark is also IO-bound. Lots of time is spent on serialization.
Who would be able to take that role, though? I mean, if large amounts of the python community are pushing back against the BDFL, why would they now choose to listen to some random new person? 
Use a dictionary of lists as an intermediate step. A `defaultdict` would make that a bit neater. 
In Pascal, it’s the assignment operator. = is used for comparison.
I'm more curious why you would have or want this data structure to begin with. If the first element of a list represents a special element as the "key", then you truly have dictionary key-value data and are simply choosing to store it in a dictionary. You should just use a dictionary instead for all of your operations. If you need to input/output the other format for legacy systems, you can do so at the edges of your system. 
Thank you!
&gt; The nested regex matching example is probably the one I've encountered most often, where you have a line of text and you want to test it against a handful of regexes. that smells like a pretty tidy for loop, which given the old way of writing means the supposed overhead is again 1-2 lines tops. 
The article has now been corrected.
\&gt; Group Director of Talent at Dimension Data, ... Python Software Foundation Fellow, Apache Foundation Member. That bio doesn't look like the author is a random person on the internet.
&gt; that smells like a pretty tidy for loop Generally, each regex match results in a different branch for processing, so even if you used a for loop, you'd still have the branching in the for loop, and it wouldn't really make the flow more readable or intuitive.
On the [tensorflow site](https://www.tensorflow.org/install/install_windows), they recommend installing using pip instead of conda. Any particular reason you don't want to use pip? It's recommended to create a virtual environment to install it and your other machine learning packages within. I didn't do this at first, and I regretted it when everything broke a reason I still don't entirely understand. The now I use a specific virtual environment and it runs smoothly
Hey! That's because I'm getting the result in that format (list of lists) from a SQL query execution as a result set.
Thanks a lot, I got it working :) 
heh, the whole project took about 4 years, with a rebuild from scratch or two, though there were a couple fairly long stretches of time here and there where I didn't get a chance to work on it at all.
Oh. If it's a table, perhaps putting it into a pandas dataframe makes sense. Then you can do joins using pandas.merge. Otherwise, go the dictionary route. 
And this is how I end up having to write code that works simultaneously with three incompatible versions of Python.
This is excellent. Thanks for this info and the sources! On a related note, as you brought up Whonix and Tails, I have gotten a couple questions about whether the app works on Whonix and Tails. One of the reasons I developed and tested it for debian was to make integration with them easier. I've tried to get it up and running inside Whonix, but didn't have any luck, and have not yet had an opportunity to do so on Tails (haven't had time to do most recent manual upgrade to new version). Do you happen to know of any resources on how to connect custom apps to the tor controller from the whonix workstation? Or any similar resources for Tails? 
How we see death of python :/ *cries*
I am wholly in favor of this. Code Battle Royale for the crown.
&gt;I'd say a majority of people liked the idea of assignment expressions. Did they? I seem to remember an informal poll of the core devs saying that support was something like three in favor to twenty-seven opposed. From my decidedly not core-dev perspective, it also breaks Python's normal functional constraints. I'm by no means a language purist, but this seems like such a dumb feature with so much cost in axes praised by the Zen of Python, like readability, sparseness, special case consistency, and one-way-ness. Honestly, to me, this one smells like jealousy of other languages or maybe a fear of future irrelevance more than a pro-Python decision.
I don't think you appreciate how great the CPython interpeter's codebase is. It's clean and readable and the core dev focus on this, often rejecting micro-optimizations in favor of less complicated code. I haven't coded C since college and when I feel really stuck with a core part of Pyton I just go to github and read the source code (after using `dis` to find the revlevent byte code). The Python community's focus on readability and clairty (i.e. "Pythonic code") doesn't come out of thin air and it doesn't come from the constraint's of the langague, Python is so dynamic you can already make a real mess without trying. The culture of tidyness despite working in a sand-box ultimately has trickled down from Guido and the core dev over the last 25 years. There have been multiple Python interpeters (IronPython, Jython, pypy, stackless, micropython, etc.) and it's never hurt the Python community, only helped expirtment with new ways of implementing Python.
Its the assignment operator for a lot of older languages, pre C. It made sense because = denots equality rather than assignment in math.
```python &gt;&gt;&gt; from collections import defaultdict &gt;&gt;&gt; lst = [["key1", "value1"], ["key2", "value2"], ["key1", "value3"]] &gt;&gt;&gt; defaultdict_list = defaultdict(list) &gt;&gt;&gt; for i in lst: ... key, values = i[0], i[1:] ... defaultdict_list[key].extend(values) ``` is probaly how I'd implement it
hi ping me your need. We will discuss how we can do it. 
&gt; you'd still have the branching in the for loop you can write your regexes in normalized way and break Example in pep572 was about mutually exclusive regexes with different group numbers. Mutual exclusivity can be solved with a loop + break, and a group number can be solved with non-capturing groups or using named groups to target exactly what's needed instead of depending on numbers produced by the layout of parentheses. Also regexes are not *that* frequent to justify their own syntax, and multipattern solutions where it supposedly shines are even rarer. Not to mention that half the story with regexes is less than stellar API of `re` which requires fucking around with truthiness in the first place. In a dict there is a risk of barfing due to the missing key. Manual membership checks can be and often are done, but there is also safe get() Are there no things that could actually significantly improve language across the board? 
Fluent Python.
I didn’t say a single person, I said entity. That could be something like a board of senior programmers who vote on changes. I would feel better about that than the idea of Python being fractured and having competing versions and incompatibility; I worry that that would be its downfall.
Except other pieces related to that info are still incorrect, and I wouldn't really call Go static.
No matter how good or bad assignment operators as described prove themselves to be, it's not worth the loss of Guido. We are really going to have to come together as a community now more than ever if the language is to have a future worth partaking in.
Good. Overengineered and overcomplicated asyncio showed that Guido lost touch quite a while ago. PEP 572 was just a confirmation.
I thought packing more shit on one line was Python's thing (e.g. list comprehension)
Take a look at [Napalm](https://github.com/napalm-automation/napalm). Specifically made for network automation. I've used it a bit for getting data from routers, but not full blow config changes. 
Raymond Hettinger for new Python Pope.
IIRC the *major* reason against `as` was that it didn't allow for any major conditions. For instance: if (m := func()) is not None: The `is not None` is a *very* common pattern, but `as` wouldn't have been able to handle it. 
FWIW the creator of the Zen of Python liked the idea... I think it basically comes down to subjectivity. I wasn't particularly fond of it for a really long time, but honestly it's kind of grown on me. Once you spend a few seconds learning the meaning (which isn't particularly complex), it immediately sticks out. 
I mean, most likely it *will* end up being the core dev team taking the reigns, and they already agree with Guido 99% of the time anyway. 
I know about all this but I'm on the same page as you and fully agree that there shouldn't be performance drops in other areas. It's just not what I'm seeing though.
Comprehensions are easily readable (if written well, but that disclaimer applies to everything) and their meaning can be inferred easily. PEP572 is mostly just noise, imo. The `:=` operator doesn't feel like python. I think a much more pythonic syntax is `if &lt;expression&gt; as output:` One of python's best qualities is its readability. I hate to see that diminished with shiny new operators we don't really need.
&gt;What could be understood at a glance as borderline plain english now has a contextual black hole right in the middle of the expression. To be fair, this is exactly what I think when I see "lambda" in the middle of an expression. To people who have no experience in lambda calculus, it looks like a blatant attempt to cram multiple unrelated declarations into a single line. I understand it now, but it is far from "readable at first glance."
Didn't he flat out say the core dev team was in charge of figuring it out? That's how I interpreted it. 
In Go it is used to declare and assign a value without specifying a type. package main func main() { var name string = "nosmokingbandit" otherName := "yourMom" } It is weird there as well since `var` can be used outside a function, but `:=` cannot.
Thank you for sharing, that is fascinating! It didn't work for things I tried, but it seems it is missing a lot of information as it doesn't use typeshed and instead uses its own type information. Im part way through trying to hook it up to typeshed, I'm interested in seeing if it will work. 
io.py.io.business
::hug::
node.js.py
It can be used for both in Mathematics.
Having to be familiar with non-intuitive assignment operators from pre-C languages doesn't seem very pythonic, but I admittedly don't know much and hold absolutely no clout in this fight.
I recently listened to a talk on the ["Talk Python" podcast](https://talkpython.fm/episodes/show/165/python-and-the-blockchain) where a company develops tools for blockchains in Python.
Nah, this is like Arthur pulling Excalibur from the stone.
Why not? f(x) as y is not None I'm not sure how that is substantially different than f(x) as y == 1
In addition to what's been said, [Enaml Native](https://www.codelv.com/projects/enaml-native/) is a really interesting project, but still in its early days. PyQT learning resources should be coming out more soon, what with their reinvigoration and rebranding, and if we're lucky we'll get good mobile guides and workflows.
&gt; But...why? Tools like these are useful mainly for programmers who want to start adding type hints to an existing, massive codebase -- a codebase that's large enough where adding type hints by hand would take far too much time to be tractable. If your codebase is mostly straightforward (e.g. stock business logic, webdev stuff, etc), the types you use in practice will probably be straightforward enough that autogeneration tools will do a good-enough job of inferring the correct types. And if they aren't, correcting a few problem spots/annotating certain problematic modules by hand is much less of a burden then annotating the entire codebase manually. Tools like these also aren't "all-or-nothing": a useful strategy is to start annotating certain core modules by hand, then use auto-generation tools to fill in the gaps. You can then of course verify the correctness of the auto-generated type hints by re-running mypy and make any necessary adjustments by hand. &gt; all for the ability to have another level of static analysis which now apparently is void because you are generating information for the static analysis dynamically. Note that ideally, you generate this information just once, during the initial migration phase. Once you have the type hints in place + mandate that any new code must use type hints (which are added by hand), you gain all the usual benefits (e.g. you can make sure new code is interacting with the rest of your codebase in a typesafe way, you can make sure refactors don't break type safety...) 
&gt; Mutual exclusivity can be solved with a loop + break Again, not really. You would either have to put the branched logic in the for loop (which doesn't improve the code), or move each regex match branch into a separate function that gets called from the for loop. Either way, it imposes a much more complicated control flow just because the langauge doesn't support assignment expressions. It forces you to have to pass around a lot of arguments, or create a lot of functions that reference a shared state with side effects, neither of which is really preferable to keeping the logic in a single flat control flow structure in a single function. &gt; Also regexes are not that frequent to justify their own syntax It's not just regexes. It's any scenario where you're testing for multiple conditions and branching the code based on the results. Regexes just happen to be a common example since parsing is something everyone does at one time or another.
I have worked this issue down to a performance decrease because of PyCharm. As you (and I) thought there being no reason for performance drops was in-fact correct.
You clearly haven't tried it. It certainly complicates the language, but it is the most impressive set of language tech I've used in a long time. And hoo boy is it fast. I've covered a lot of corners in asyncio, and every time I think they missed something I was wrong, or it was added in 3.7. They cover all the cases pretty darned well. Bravo to the Python engineers because they really knocked it out of the park with asyncio.
I think there's an generation gap here. Anybody that learned on any Algol-family language (e.g. Pascal) would immediately recognize that as assignment. Pascal was a very popular starting "real" language (after BASIC), so an entire generation of programmers is familiar with it.
You'll no doubt be getting downvoted, but you're right. It also feels that Guido has lost interest in steering the direction of Python's development a long time ago.
You have to declare the types of variables in C; however, you can a char as an int. You don't declare the types of variables in Python. However, you can treat a type as another type.
Oh, cool! Yes, using typeshed would be much better. We had some trouble with union types and any, if I recall correctly, so we sort of paused there for the moment.
&gt; Have any advice on what process of a business actually has the ability to be automised? That is entirely up to your client. But if I were to want something automated (and I'm not asking or suggesting that I want your services), here is my list: * automatically check a timesheet against time off I have marked on my outlook calendar, and then send an email that has the difference noted, and correction requested to the staff. * Take about 10 categories of data, and 132 actors, for about a total 10,000 cells of data in a PDF and verify them against the source Excel file, and then give specific errors. In a perfect world, be able to use OCR to verify data between a scan and a spreadsheet.
I hate when modern languages use := as the standard assignment operator. Or really any time a language uses non-standard syntax. Unless it's aimed at math people, then it makes sense to use :=. For this particular case := seems fine, although "as" would also have been fine with me.
I can understand the fear of irrelevance. Not so much because I can't learn another language, I already use several, but because I trust python more than most others to not become a nightmare of boilerplate code that needs makefile-equivalents and config files just to do a hello world. If python wants to stay popular, incorporating mypy static checks and some kind of JIT in the standard lib would probably be a better plan though.
I wanted to shed a light that its not completely nonintuitive, especially if your major covered some math which I feel is a fair assumption. But, I dont like it.
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Small addition: does this happen to most people when they make their first game? I'm trying to make sure this isn't an issue with my computer so that I can keep making games like this. It's super fun so far even though I haven't played it yet haha :)
Whole world agrees asyncio is terrible.
was about to comment whatabout fasthttp. Sees the bar chart, wow, it's even faster than fasthttp.
x=x+1 makes no sense in mathematics.
Isn't the regex case just bad code? And would people who write code (not trying to be judgmental, we were all beginners once) like that really take advantage of the := syntax, or would they just continue to write bad code? And wouldn't the same people also be likely to misuse the := operator in poor ways? I guess I just feel like the examples given were situations caused by people not understanding enough to optimize their code - and unlikely to be fixed (in the wild) by the introduction of a new operator. Additionally, I think there is an unknown unknown in terms of the ways that people will misuse the new operator. 
&gt; The nested regex matching example is probably the one I've encountered most often I've seen the argument a million times, again, this is because the `re` library from stdlib is badly designed. You don't have this kind of problem in other languages. Only if we can improve the returning match object a little. There's no need to change the language itself for the sake of inconvenience of one function from a particular library. 
Comprehensions are only good if they are short. E.g. y = [x for x in my_list if x &gt; 3] Once they get too complicated, you're better off using a for loop for readability IMO. 
Agree with /u/slayer_of_idiots if (m := func()) is not None: vs. if (func() as m) is not None: Look very similar to me. And both look ridiculous without the parenthesis. 
I domt really care which spyder opens, I just want the link in the navigator to work. I will look into the sym-link. That sounds like it might work. Thanks!
Every other language, which implements async stuff, does it simpler. Even C++. For example, in Python there are three things to represent pretty much the same: coroutines, futures and tasks. Sometimes they magically transform into each other. In some asyncio functions they can be used interchangeably as arguments, in some not. In most other language there is only one concept used to represent running async function: Future (in JS/Dart/C++) or Task (in C#).
nah i'd say that's just two equalities 
What is the error that you get? The generated Cython code looks innocent / there's nothing to go on there. Anyways, I'd start by verifying whether `util` is not `NULL` in that code.
x+1/2=x+1/2
This was actually debunked by actual math PhDs so many times (I've read about 10 rebuttals just on Reddit). It makes perfect sense in mathematics, and serves almost the same purpose as it does in software development. In discrete math it's a very common shortcut to: x[n+1] = x[n] + 1 In continuous math it's a very common shortcut to: x(t + Δt) = x(t) + α etc. etc.
I dont think it's null because I can take self.mClient(session,charDeeMacDennis,self.mUtil); out and replace it with a callback self.mCallback(callbackChar,self.mUtil); that uses the mUtil object and it can send a callback out to python. So the class is still allocated in memory. I'm not sure if I'm calling methods from my util class that holds the function correctly. It errors out right here if (unlikely(Py\_EnterRecursiveCall((char\*)" while calling a Python object"))) with a bad access to memory error. So I'm wondering if I'm not calling the method right. util is not null but it seems like the method inside of util is null...
Jeez what's with the downvotes. I guess that's what you get for asking questions these days. In theory, there is no reason for you to be stuck on the subscription based model. That one time payment should be equal to the sum of cash flows that you will get from the subscription if you price it correctly (google discounted cash flow).
Second that. I'm working on a project that continuously dumps the state of Kafka cluster into some object store. I have part of the code written in C, which does the deserialization of the stuff stored in Kafka, but it also needs to interface with Python code for some tasks. So, when I can avoid interacting with Python, I can get the performance of this "dumper" to be maybe 10 times better, or maybe even more, depending on the hardware only because I wouldn't need to hold the lock.
OK found one https://github.com/ParallelSSH/ssh2-python/blob/master/setup.py#L14-L25
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ParallelSSH/ssh2-python/.../**setup.py#L14-L25** (master → 8d3de49)](https://github.com/ParallelSSH/ssh2-python/blob/8d3de49c6c04ce2d3fdfb3c56d1d3a05f352a875/setup.py#L14-L25) ---- 
&gt; Never, when it comes to performance. That's actually false. I cannot find the project and the paper right now, but there was a re-implementation of Linux' kernel IP module in Go, which worked on average faster than the C version. I believe this was achieved due to automatic management of coroutines, which is hard to get right with the tools available to C programmers.
A triumvirate of Raymond, David, and Sergey!
No fair, there's at least two people who have a huge head start.
Your program's logic is mostly sound (though it'd probably be a better idea to have the user press enter without inputting anything to exit, rather than having to enter an arbitrary num like 999); your only issues lie with style/conventions. Read [this document](https://www.python.org/dev/peps/pep-0008/) closely.
Does windows use POPM for this? https://en.m.wikipedia.org/wiki/ID3#ID3v2_rating_tag_issue
Non-Mobile link: https://en.wikipedia.org/wiki/ID3#ID3v2_rating_tag_issue *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^201426
Hey, I think you're going to get a lot of programmers giving you answers, but this is really a business question. I have worked in consulting for 10years and now run my own business based on some python/Django tools I built. First thing, automation services seem like low hanging fruit and a good idea. In reality, when you pitch these services you get a couple of outcomes....if the business is big enough to have its own IT person/people then they will perceive you as a threat and tear down your case as hard as they can. If the business is smaller, they aren't going to understand what you're talking about, or won't have enough money to pay you for the services. You might find a few exceptions to this, and you might get a few gigs, but it's u likely to be enough to build a business. That being said, there are tons of opportunities to help businesses. First off, you should pick a sector that you're interested in (we picked food and agriculture). Then go out and find some problems that a lot of businesses have in common...maybe it's getting some kind of data into their accounting systems... In that case you'd want to know which accounting system most of your customer base uses and look at building a solution for them. This gets you a solution you can sell and a large customer base to sell to. I've oversimplified obviously, but this kind of approach will build a sustainable business...
But I like asyncio... 
Other languages don't give you control over the event loop. 
/r/learnpython 
I agree, I've seen it used in Mathematical texts before. 
I think at this point it just comes down to semantics. The (constant) value is being assigned to alpha using the equals operator. Functionally it's the same as assignment. 
Could be cool to display nicely structlog logs :)
I greatly appreciate all the years BDFL put into making this awesome language, but truth is BDFL went mad and started disregarding zen of python. Of all people him would be last one i expected to go this route. Async and pep 572 are in contradiction to PEP 20 at varying levels. It seems to me that python is starting to slowly become a feature minefield just like C++ and we will have to be increasingly more selective about what to use and what to not use. Worst part is that once these features are in there is no going back.
It is also used as a delayed value in Mathematica and Maple, if I recall correctly (it's been a while since I used either).
Ah, if there are issues with Unions and Anys then introducing typeshed could be an issue... well, only one way to find out! :)
Functions and docstrings. More snake_case. No more flags like `i`. Why did markTally but not classMarkTotal get incremented with `+=`? Look at collections.Counter. 
There you are, your problem has nothing to do with pyuic but with your installation of PyQt. I'm not a windows person, so you are on your own. 
Altair? Plotly?
{sarcasm} Yey now I get a fastest http server that will same 5ms out of 500ms. {sarcasm} I don't really get why people circle jerk on those "fast frameworks" while in reality of web development most of the time is spent on IO and business logics, but not in the http server code itself.
Correct. It means Set Delayed. It's actually a very useful operator in the context of Mathematica and mathematical operations in general. Whilst I dislike its existence in any language, its a very powerful tool that does function differently to a normal = and thus has a role. In Python though it seems to just be a way of reducing lines of code, and I've not yet seen the advantages that I do in Mathematica. 
It's not unintuitive. It's a fundamentally different operation that may have some substantial benefits. I don't like it, but it's not a bad thing to have at all. 
Yeah, I haven't used Maple since undergrad and I haven't used Mathematica since I stopped taking classes in grad school, so I wasn't sure. I just meant to reiterate how it is typical in code oriented towards mathematical conventions. I haven't personally noticed a need for it in my Python research code.
I highly recommend bokeh. Takes a while to figure out, but really good! 
I have tried it and it is extremely unpythonic. Biggest problem for me is that it divides codebase into two islands - normal and async. And dealing with that becomes orders of magnitude harder making code both less readable and less maintainable. Also lets not forget that coroutines are nothing more than generators under the hood. Awful awful hack. greenlet/gevent had issue solved for quite some time. All we needed was some spit and polish and adoption to cpython core, but no, we got asyncio. Sigh.
Are we seeing a trend in Programming Paradigm again? A few years back, JS was moving toward becoming more readable and expressive (trying to become python) while python was trying to incorporate parts of functional programming into its list.(Async IO) I felt like many programming languages are becoming more general and converging toward the middle. Now , coffee script(basically js with python syntax) is dropping out of favor. Asynio is not gain as much ground as everyone hoped. Python remains far away from being functional. GIL still continue to be defining feature of python. Things are being specialized again. Or at the very least, the programming heavyweights(Python and JS) are not trying to become one another competing to offer the same features. 
Awesome guide for people not familiar with any part of it. Thanks for posting! 
Hello! I'm a bot! I see someone has already suggested going to r/learnpython, a sub geared towards questions and learning more about python. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
I am not sure if I like this. I always wonder about how it would be like to be able to jump from one language to another without any frustration. But it would be quite a mess. Libraries ported everywhere. With things like [specialLib.py.js.py](https://specialLib.py.js.py)... . I mean, things could go really bad. ... but... could also be very interesting. 
&gt; I believe this was achieved due to automatic management of coroutines And therein lies your problem: you're comparing different algorithms in different languages and draw conclusions only about the languages.
&gt; Rome was not built in one day. It wasn't built on sand either.
Cleaning up, testing and documenting my application that automates the conversion of actuarial life insurance models to newer software before I leave my job on Friday to join a Big 4 consulting firm in a major USA city. I wish I could continue working on this project after I leave my company but I won’t have access to the older software. The complexity of the project made coming to work enjoyable every single day as it required continual learning. It required a deep understanding of xml, pandas, numpy, pyodbc and PyQt4. I also gained a deep understanding of classes, generators and constructors. This week I converted the application to a single executable file that doesn’t require others to even have python installed to use it. Learning python on your own is fascinating and beyond rewarding. I will use these skills throughout my entire career. Automation is coming fast folks, don’t be left on the wrong side of the tracks when it does. 
&gt; Perhaps the biggest dispute in the Python world was the transition from version 2 to version 3. Actually, I shouldn't even say "was" here, since many of my clients are still making that change. It's easy to say that this incompatible upgrade was handled poorly. And you can be sure that the Python community has learned its lesson and will never make such a break again. However, the end result—Python 3—is definitely better than Python 2. Should Guido and the core developers have handled it differently? Perhaps, but it's easy to say that in retrospect. The number of blog posts calling Python 3 a colossal mistake must have hurt Guido. But part of being a manager is having the ability to accept, filter and even ignore criticism, and he did it with aplomb. I understand that the author is trying to mend some fences, but man is that some serious equivocation! It goes back and forth and back and forth. It wasn't great, but it it won't happen again, but it was great, but not so great, but people called it terrible, but it was handled well... Couldn't that have been re-written as, "Perhaps the biggest dispute was over the transition from version 2 to version 3, which is still taking place in some quarters. Though there were often heated arguments about how it should have been handled, Guido took the managerial high ground and kept the steady course forward." 
Sigh... okay, I'll do it. 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
maybe something like: from enum import Enum class Grade(Enum): Fail = 'fail' Pass = 'pass' Credit = 'credit' Distinction = 'distinction' HighDistinction = 'high distinction' @classmethod def from_mark(cls, mark): if mark &lt; 55: return cls.Fail elif mark &lt; 65: return cls.Pass elif mark &lt; 75: return cls.Credit elif mark &lt; 85: return cls.Distinction else: return cls.HighDistinction def main(): print("Welcome to Class Mark Average Calculator.") marks = [] while True: inputs = input("Enter a mark between 0 and 100 (or just press enter to exit): ") if not inputs: break mark = float(inputs) if 0 &lt;= mark &lt;= 100: marks.append(mark) else: continue print(f'{len(marks)} marks with a total of {sum(marks)}') average = sum(marks) / len(marks) grade = Grade.from_mark(average) print(f'Grade: {grade.value} with {average:.2f}') if __name__ == '__main__': main() 
Exactly my point, thank you!
Wouldn't be the first time he's gone against the zen himself. He originally closed this bug as invalid, which was crazy: https://bugs.python.org/issue13936 
I disagree that it makes code either less readable or maintainable. Coroutines make sense to be generators, in most implementations they share the same properties. The distinction with async / await solely provides a more explicit syntax 
Just used bs4 and xmltodict to parse a life insurance model extracted to a nested XML/json like file into a flat pandas data frame. Tried some other packages but bs4 was the easiest to use.
So, let's review PEP 20: &gt;Beautiful is better than ugly. This is as subjective as they come, and so can't be evaluated in anything even approaching objectivity except in retrospect. &gt; Explicit is better than implicit. Well, explicitly calling out an expression assignment is certainly in line with this. &gt; Simple is better than complex. Assignments are pretty simple, and not any more complex for having an expression assignment. &gt; Complex is better than complicated. This was neither. &gt; Flat is better than nested. This was neither. &gt; Sparse is better than dense. Not really an issue, here. &gt; Readability counts. And here this PEP was a tremendous win, because it placed code where it's relevant, and context creates readability! &gt; Special cases aren't special enough to break the rules. No rules being broken, so we're good here. &gt; Although practicality beats purity. Fair and not violated here. &gt; Errors should never pass silently. &gt; Unless explicitly silenced. Not impacted &gt; In the face of ambiguity, refuse the temptation to guess. Not impacted. &gt; There should be one-- and preferably only one --obvious way to do it. This point is debatable. It's clear that there are now two ways to assign things, but there's still only "one obvious way". This is even called out in the recommendations at the bottom of the PEP and could easily have been turned into a warning when you mistakenly use an expression assignment as a statement. &gt; Although that way may not be obvious at first unless you're Dutch. Fair. &gt; Now is better than never. Relevant. &gt; Although never is often better than *right* now. Hence the process. &gt; If the implementation is hard to explain, it's a bad idea. Which this wasn't, and indeed was something that naive users expected all along. &gt; If the implementation is easy to explain, it may be a good idea. Ding! &gt; Namespaces are one honking great idea -- let's do more of those! Not relevant, but good point. 
Or just consider everything an ‘awaitable’
This would be fine if: * async/await keywords did not ripple through entire codebase like a tsunami * code was not divided into async and non-async with impossible interoperability at times Once we start using async it creeps in everywhere to a point where these keywords become redundant noise because everything is expected to be async. Writing code that does not do this is extremely hard task due to second point above.
/r/learnpython has a lot of information on this topic. Check the sidebar there.
List comprehensions don't have to be on one line. I very often break them up like this: with open(config_path) as f: config_pairs = [ line.strip().split('=') for line in f if not line.strip().startswith('#') ] I find it a lot easier to read than the equivalent for loop. config_pairs = [] for line in f: if line.strip().startswith('#'): continue config_pars.append(line.strip().split('='))
After doing async stuff in go, nodejs and even C++, I hate asyncio. It's probably the worst usage wise! It was confusing to figure out task / coroutines / futures and so many overlapping and auto conversions + doing a sync action inside the async function is a pain, all your libraries now need to be changed etc etc. + No multi core performance gains for free.
It saves one LOC and from that perspective I think it's pointless, but one thing I do like about it is it's very clear what runs at the end of the loop every single time. Consider this: while x: if some_condition: x -= 1 continue do_other_stuff() if other_condition: x -= 1 continue do_another_thing() x -= 1 Personally I don't like their format but I'd like it as a new block like this: while x: if some_condition: continue do_other_stuff() if other_condition: continue do_another_thing() finally: x -= 1 ... and have it force that `finally` to run even if a continue is hit. I've seen some shit code (and probably wrote some) where it continues a loop and forgets to do something at the end that it should've, and a nice little block afterwards would make it explicit how that loop works and iterates and it would force it to run so you can just write other continues and not worry about duplicating that operation. Better yet, be wary of too many continues but hey, people do it.
You don’t need to specify a type with `var`, either. `:=` is useful in `for` loops and `if` clauses to scope the variables just to that clause.
Lol writing to a stream doesn't actually write to the stream
Go to StackOverflow and start answering unanswered questions. You will learn plus help others at the same time.
Thanks
Thanks for advice
r/dailyprogrammer/
this would be excellent, except that triumvirates are proven to be disastrous in history
Looks fun thanks
It does. To see this field with mutagen, make sure you aren't using ``easy=True``.
i'm not sure i understood what you are saying, if i run multiple coroutine and one raise an Exception the one that raise an Exception will crash but everything else will continue to run. If you want to restart a dead task you could lunch a monitor task which when a task finish check if it crashed and in that case it will restart it. 
Something something 'Zen of Python' &gt;import this
BTW, here's the link for unanswered Python questions: [https://stackoverflow.com/unanswered/tagged/python](https://stackoverflow.com/unanswered/tagged/python)
&gt; but Im not happy with the amount of overhead required for Stripe or Paypal. What overhead?
And @ is so obvious?
As someone whose job revolves around writing regexes, oh god please yes I want this. "if this regex matches" is a single thought, but in Python it always needs two lines of code, which is stupid. matchymatch = re.search(pattern, string) if matchymatch: do stuff with matchymatch is so much less elegant than if matchymatch := re.search(pattern, string): do stuff with matchymatch Furthermore, by the very conceit of regexes, all the logic that's going to happen with the match object is going to happen *inside* the if statement that checks whether it exists. Even though blocks don't have namespaces in python, it is conceptually strange to pollute the outer pseudo-namespace with variables that are never used at that level. 
That's the one! The author writes in a very unstructured way, and you might find yourself getting frustrated with it (I did), but push through (I did) and finish it. The skills you'll learn doing it will enable your to achieve the requirements. Always Be Delivering.
But as guido pointed out, it would require either breaking backwards compatibility in `import`, `except`, and `with` or else having an operator that does different things in different expression types, which is more unpythonic. It also looks a lot like "and" which is easy to gloss over in a boolean evaluation expression. `:=` is unambiguous: you see it and you know some kind of assignment is happening, and you move on and keep reading. 
I think this way too hard for beginners
Thanks for answer! I uploaded my package to PyPI ( [https://pypi.org/project/loggui/](https://pypi.org/project/loggui/) ) Now thinking of what to add there
Not really. The question is asking for "projects". After learning the basics of Python, this is the way I learned. The other option is Project Euler: [https://projecteuler.net/](https://projecteuler.net/)
If he approved := (which of course he did) we already lost him. If he approved it *over the objections of the core community* (which of course he did ) then losing him is a good thing.
[https://www.codecademy.com/learn/learn-python](https://www.codecademy.com/learn/learn-python) for beginners.
Especially nested ones. Been writing python for years, can't write a nested comprehension with any reliability 
It's about context. In some cases, it makes no sense, but as mathematicians we know that no one would write a meaningless statement so we think of different contexts. 
That was a really interesting read, thanks. Big fan of coghlan after reading this and some of the core devs come off sounding like children
Nothing wrong with camel case... 
 [(k,', '.join(i for _,i in v)) for k,v in itertools.groupby(sorted(l), lambda (k,v): k) ]
Altair for sure. It creates Vega-lite javascript, and interfaces very well in Jupyter Lab.
Can't possibly be worse than type annotations and :=, right?
If you're using Numpy/Scipy, you're pretty much already using C++/Fortran, at least for the compute heavy parts.
Python have a Spark wrapper called Pyspark so you can definitely do big data with python 
Thanks for the answer. How about other things like deep learning stuff/ML stuff? Are you saying the speed will be the same as if I had everything written in C++?
Numpy, Scipy, Tensorflow, etc., are not Python code. They're thin Python wrappers around native C/C++ code. That's why they're so fast.
Spark for Python Developers - Pakt Publishing
Thanks for the info. I head for very large/real-time big data projects they use GO, not python. Any comments on that?
Thanks so much, that is good to know. But even passing data from one wrapper to another in Python, is it fast enough?
Pretty much all scientific computing stuff in Python uses Numpy internally, so there are no expensive conversions involved - you just pass a pointer to a Numpy array.
as a Math student I have never seen someone writes x=x+1. seen x\_{n+1} = x\_{n} + 1 or any other type convention you wrote. But never x=x+1. which makes no sense in mathematics. 
Stripe..
Then you are looking in a very specialized area. Python is probably the most used language for that use case. Followed by Java. I'm not sure where GO falls on the popularity list.
People uses Go because of type-checking and better concurrency than Python, so you gotta balance it out. Python offers a more streamlined workflow, a large community, and a large set of existing tools. Consider the task you want to do, its real-time constraints, then balance it out with given efficiency between the two languages. Someone made a similar post in the r/golang and here's a [good response](https://www.reddit.com/r/golang/comments/7ksrq8/is_go_a_good_choice_for_data_science_and_machine/drkq0kp)
Here's a sneak peek of /r/golang using the [top posts](https://np.reddit.com/r/golang/top/?sort=top&amp;t=year) of the year! \#1: [Go 2, please don't make it happen](https://i.redd.it/7t1p88ct13ez.jpg) | [287 comments](https://np.reddit.com/r/golang/comments/6rxfjo/go_2_please_dont_make_it_happen/) \#2: [Self-aware robot](http://i.imgur.com/KZkCd7r.png) | [35 comments](https://np.reddit.com/r/golang/comments/6uihnj/selfaware_robot/) \#3: [Go 1.9 is released](https://blog.golang.org/go1.9) | [128 comments](https://np.reddit.com/r/golang/comments/6vuhkz/go_19_is_released/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Python projects for beginners that can earn money? hehehe
Ok great! Thanks
I found [this blog](https://thinkfaster.co/2017/05/big-data-with-golang-instead-of-mapreduce/) where someone needed golang instead of pyspark. If you're in a similar situation, feel free to go with golang.
Where's the problem? I don't see any. We are comparing outcomes achieved using different competing technologies. Whatever worked for those technologies. Maybe, in principle, a turtle can run faster than a cheetah due to better aerodynamics of its body... but, in practice we don't really see it happen.
&gt; it errors How? Why don't you put a breakpoint there instead of assuming? It's really naive to believe that the value of a variable is such and such, if you can actually just point your debugger at it, and know for sure. The fact that it works with different data really doesn't mean much. Maybe you've got a pointer to some garbage memory, which, if interpreted as array of char doesn't lead to program crash, but if interpreted as something else - does.
yea thats what I figured :) but not what i wantz... Thx for the reply!
Sue me for anti-pythonistic behavior :) import re print("-- Generator -- ") # Generator def match(pattern, string, flags=0): r = re.match(pattern, string, flags) if r: yield r for matches in match("(.*)", "abcd"): for group in matches.groups(): print(group) for matches in match("(\\d)", "abcd"): for group in matches.groups(): print(group) print("-- Class -- ") # Class class Matcher: def __call__(self, pattern, string, flags=0): self.result = re.match(pattern, string, flags) return not self.result is None def __getattr__(self, name): return self.result.__getattribute__(name) matcher = Matcher() if (matcher("(.*)", "abcd")): for group in matcher.groups(): print(group) if (matcher("(.\\d)", "abcd")): for group in matcher.groups(): print(group)
This feels like the compiler writer was lazy. There's really no reason to require a different token.
Thanks for the great comment.
Great reference, thanks!
This looks good. Could you compare this with e.g. tqdm, which also does a progress bar?
Good job, now someone reading your code can't tell when you're branching and when you're looping because you've overloaded `for` to do both. 
I dont think there is something like that
Look into WinPython: [http://winpython.github.io/#portable](http://winpython.github.io/#portable)
You might wanna "pip freeze" the package requirements to a file, so you can pip install based on that. Even better, do it inside venv. If you're using python 3 you can just "python -m venv venv". This will a folder called "venv" in your current directory. Then "source venv/bin/activate" to enter the virtual environment. Python and any pip install will be located inside "venv" folder, so all your dependencies will be contained here locally. You can then copy this to maybe a USB drive and simply activate the virtual environment when you want to start working. To deactivate and go back to the global context simply type "deactivate". Hope this helps! 
What's wrong with type annotations?
I'm finding work at Upwork, unfortunately no job.
The regex example is absolutely not bad code. Again, it's a common scenario programmers encounter, where they want to branch the code based on the output of several functions.
Unfortunately I can't set break points and step through the code as I'm running it through an iphone. Which is making it a whole lot harder to debug. What I can do is add (&lt;object&gt; util).nokeCallback = session.decode ("utf-8") and see if my call back gets updated with the session and Mac address to make sure those values are still in allocated in memory. Just to rule them out as memory issues. 
The first one is a joke. 
&gt; You don't have this kind of problem in other languages. The problems exists in other languages too. Even in languages where regex expressions are a first class object, like JavaScript.
Wow can’t believe some of these datasets don’t have more views. Some of this info is really juicy for certain industries. 
Yes, they will be lazy evaluated. The same thing as if instead of using assignment operators you wrote: values = {} def set\_and\_return(key, value): values\[key\] = value return value if set\_and\_return('a', 1) or set\_and\_return('b', 2): print(values\['b'\])
Creating a web app whilst learning Django for the first time. I really wish I'd used cookiecutter from the beginning and I feel like I'm in too deep to start again. Also need to switch from mySQL to postgreSQL (the tutorial video I first followed used mySQL). This has been an amazing experience so far and I already feel like I'm hooked. I've already got the basics of the web app working, now I just need to learn how to set up users and subscriptions.
Nice! The UK data centre looks super cool! :D
I'm reading Fluent Python in order to leverage my knowledge of Python. At the same time,I also read some Python book about Data Analysis.
&gt; Explicit is better than implicit. Instead of an explicit assignment and an explicit expression now you have an expression that implicitly is also an assignment. &gt; Sparse is better than dense. Instead of an explicit assignment and an explicit expression you can do both things simultaneously now. &gt; Special cases aren't special enough to break the rules. The whole point of PEP 572 is to save one line of code in some special cases by adding a whole new syntax feature. Before we had only one way to assign something to a variable and now there are two of them. &gt; There should be one-- and preferably only one --obvious way to do it. Every example from the PEP itself now has two ways to do it: ``` # Handle a matched regex if (match := pattern.search(data)) is not None: # Do something with match ``` and ``` # Handle a matched regex match = pattern.search(data) if match is not None: # Do something with match ``` 
Where is @ used in python?
Fast compared to what? Every benchmark I've seen shows asyncio-based libraries among the slowest compared to other async solutions.
That's a fair point.
Problems requiring parallelism are exported to other tools written in other languages because Python supports it poorly. Often this comes at the added cost of serialization (which is CPU bound, generally). Python programmers don't experience this because these systems are not written in Python; of the systems I named, only one has significant Python code (Cython is not Python). If a Python programmer wants to write this type of program, they will probably have to choose a different language. I can buy the idea that they _should_ do so anyway ("if you aim for CPU speed, why use CPython anyway?"), and maybe that means it's true that CPU parallelism will not significantly change Python's strengths. What I don't agree with is that these problems are rare; I think they occur in most projects. And to clarify, even if Python got 10x faster + cpu parallelization tomorrow, people would not be ditching these other systems; but what _would_ change is that Python programmers would start _writing_ them, and perhaps more tellingly users of other languages would use them. It's the denial that this is common that lets people say "If your single threaded program is slow, multi-thread won't help either." with such confidence while also having said "for CPU-bound tasks, Python indeed has a serious problem". It can't be both.
Newb here. I took the plunge and enrolled in the udemy Python mega-course. the emphasis on data analysis- and the very low price- made it impossible for me to resist. I have an account on pythoneverywhere as the course recommends, and that is a really cool tool.
As isn't as good for foreign speakers though.
Find the QComboBox in the QListWidget and then use currentText() property to get the current setting. http://doc.qt.io/qt-5/qcombobox.html#currentText-prop Or you can use the currentTextChanged() and/or currentIndexChanged() signals to keep track of it.
i've been using postgres for a bit. People seem to be confounded with the idea that most language affects are just...affects based on how often you use it. This is such a redicuously human argument. Python: For Humans (with all flaws also)
&gt; Maybe, in principle, a turtle can run faster than a cheetah due to better aerodynamics of its body... but, in practice we don't really see it happen. You're comparing a turtle in a car with a cheetah on foot and you don't see a problem with it...
Thank you for your reply. The trouble I'm having is that the QComboBox is part of a custom QListWidgetItem that I have added using a for loop. I don't know how to make the function that is called when the item is selected find the QComboBox for that specific item.
I wasn't aware of tqdm, but it looks very cool. It seems to have similar function, but a lot more features. I would say the biggest difference is that tqdm draws a progress bar (normally), but report-on-interval just prints a message. I'm not sure how well tqdm would play with a logger, so I would have to look into it. 
Hey sounds like a good time. Just checking if you could link what series of YouTube tutorials you followed ? 
Thanks! I decided to go with this method. For others this tutorial helped a lot (https://www.youtube.com/watch?v=N5vscPTWKOk). One question - if I were using say sublime text for an editor, would I just set the python path to this environment? 
I'm not quite sure why you would need to set a python path to anything. Assuming that your machine already has python and you can use it normally, it's already in the global PATH variable. Sublime is a text editor and doesn't care where python is. 
 Welcome to the tail-end of the discussion on PEP 572 that caused the BDFL to retire If in doubt **don't do it!**
Anaconda distribution in a folder that you drop on hard drive then run from anaconda terminal it solves all the path issues and is set up for data science already. 
[PEP8 disagrees](https://www.python.org/dev/peps/pep-0008/?#function-and-variable-names)
I have never studied python, whether it be an online course or in school, but I am picking it up as I learn different libraries for the tasks I want to complete. I am really frustrated with the syntax between python2 and 3. I find I overlap quite often. I am hoping I can take some time this weekend to go over theoretical concepts and better programming practices. 
I can't think of what else it would do. Evaluation order is not affected by PEP573 and "an assignment expression does not introduce a new scope". Short-circuited side effects already exist, eg: if print(1) or True or print(3) 
The Javascript equivalent throws a \`ReferenceError\`. In Python, I'd expect an exception as well; specifically \`UnboundLocalError\`.
 https://praw.readthedocs.io/en/latest/ This is probably all you're going to need.
Jesus christ someone asks a clarifying question and you people take up your pitchforks to say "boycott it!"
Thank you a ton! 
There are relatively obvious candidates missing like the https://www.europeandataportal.eu witch is absolutely massive.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. [Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
It's unfortunate that it was never actually made clear in the PEP, but from what I understand from the "this won't introduce scoping rules" guarantee and the order of the opcodes in Guido's reference implementation, `DUP_TOP` (opcode to push the right hand of the assignment expression) is executed before any enclosing `POP_JUMP` statements (the opcodes for boolean tests and short circuit evaluation). Perhaps this should be brought up on the mailing lists so the PEP is edited for clarity (though I don't know what the process for doing so is).
Gut feeling says that it does, but I have no idea. Worst case scenario, write a simple logging handler which sends that stuff out.
r/learnpython
It does so in Javascript because in Javascript and other languages assignment in expressions introduces scope, but according to the PEP not in Python.
Well they asked a clarifying question for undocumented behavior for a new feature in an unreleased version of python. My guess is `a:=1 or b := 2` results in `b` being undefined. But it's not a problem they have (as the feature isn't out yet), and without grabbing and compiling the latest dev version of python we can't check (and even then the undocumented behavior *could* change). That said, even if it had well-defined behavior, I would argue it's a confusing style and should be avoided. Sort of like how you shouldn't have `[]` as a default function parameter (because it only gets initialized once and then the same list is mutated on all function calls, and even if that's the behavior you want there are clearer patterns to write it).
Oh, I see. Here is a simple way, but there are many ways this could be achieved. In the custom QListWidgetItem, you can store a reference to the QComboBox as a property. Then when you call myQListWidget.selectedItems(), you can iterate through the list of selected QListWidgetItems and access the comboboxes through the property. Below is sort of a basic way to do it. pseudocode: for customitem in myQListWidget.selectedItems(): combobox = customitem.thecombobox() selecteditemtext = combobox.currentText() 
That's not the point, don't be obtuse. The BDFL went on his permanent vacation due to all the vitriol and the person above me was just trying to continue it.
I think I'll do this as we need Anaconda. Would I just install it on my home computer as usual, and then just drop the Anaconda folder within ".../Program Files/Anaconda/" on a USB/Hard drive?
This is only part 1 of 5, they'll probably include it in a future part.
Got an interview coming up with a company that is upgrading their code base from perl to python. I'm a python newb (background in java), but know my basics. Wondering what kind of things I should be reading up on/practicing? Anyone care to share potential python interview questions?
Thanks!
It's interesting, but I don't agree with the premise of this library. &gt; Problem #1: Text is hard to search Text is **not** hard to search. Outputting logs the way this library does is VERY hard to search. It's easier to look at, for small cases, but would make it exceedingly difficult to consume by other tools.
I’m going to be a freshman in college studying Computer Science this fall, and I’ve had a pc all of my life and I just now started to learn some Python, I’m very much so a noob but I just made a simple calculator! I worked out all of the bugs myself so I felt pretty good from that. I’m by no means an expert at computer stuff by I’m excited to keep learning through YouTube tutorials. I don’t know what else to do.
Wait you're going to give companies the ability to wirelessly charge people's credit cards? That sounds like a huge security liability.
It appears to me that they want only one article with government databases.
Rereading I think you and I are interpretted Paddy3118's "If in doubt don't do it". I read it as "don't write code you aren't sure how python will execute it", which seems like sensible advice to me. I'm not saying it should be unspecified, but per `import this` "readability counts" and even if this behavior was explicitly defined (either guarantees that lazy assignment expressions will not be made if it fails early or that all assignment expressions get evaluated), it seems confusing and should never make it to a well-maintained codebase. That said, it's possible they meant (and I believe you are arguing against) "don't discuss PEP572" (or other python points of contention) -- discussions may cause valuable members to leave the community. I agree that would be ridiculous.
Instinct is to say no, as cython is more about CPU optimisation and I'm guessing your bottleneck is the network - assuming you're threading the requests? Obviously pretty difficult to judge though. 
The bottleneck is the request, using Cython would not speed it up much. Unless you're going to do some crunching with the data afterwards.
I am not arguing for or against readability and confusion of this specific expression. Nor am I arguing that he meant to not discuss 572, But rather that after all is said and done he is continuing to treat 572 as an "I told you so moment" then topping it off with "don't use assignment expressions". If this isn't what he meant, then he chose some horrendously poor wording and tone in attempting either of the possibilities you referenced.
I’m going down the gevent / grequests rabbit hole now.
Ah yes, this is where it's stored. thanks! I couldn't read it properly using eyed3 when passing "Windows Media Player 9 Series" as the 'email' so I thought it was a dead end. But I'm able to read it using Mutagen on tag "POPM:Windows Media Player 9 Series" #eyed3 - not working print(eyed3.load("song.mp3").tag.popularities.get('Windows Media Player 9 Series')) #mutagen - working for frame in mutagen.File("song.mp3").tags.getall("POPM:Windows Media Player 9 Series"): print(frame) 
Trying to create a .io game in python while learning python for the first time. Three weeks in and I've coded the game mechanics, played it in the terminal with the poorly coded 'AI', converted to all major religions and prayed to their gods through debugging hours, figured out that networking is not an easy concept to code, and realized that I'd have to learn a new programming language to pull this off, JavaScript. Ambitious or suicidal?
Does this count? I am teaching my 9 yr old and learning python myself. We do a few levels of code combat everyday and use python for kids. He wants to be a game dev when he grows up. I am going back to school to become a teacher so i figured why not.
&gt; type annotations As someone who made those obligatory the very second they made it into the standard, what is wrong with those? Not only do they drastically improve the readability of the code, but also they make static checking much easier and more accurate.
I thought I remembered the example had it evaluating the regex twice and therefore, was needlessly inefficient. But I might be mistaking that with an example someone gave in the comments on a thread like this.
Irrelevant. You get an UnboundLocalError when a local has been defined for the scope but has not been assigned to (bound) yet.
Benevolent **Dictator** For Life
I guess its just a matter of opinion. I prefer the former over the latter of your examples and I don't even like the `if variable` statement to rely on the "truthiness" of the variable (I prefer the explicit `if variable is None`)
This is exactly right. You'd get an `UnboundLocalError` if you are in a function that doesn't assign to `b` above the `if` or a `NameError` if you ran it at global scope with no previously defined global `b`. The short-circuiting behavior of `and` `or` and the `a if b else c` ternary operator are all well defined, and assignment expressions don't change anything about it. 
Yup the code above is equivalent to: a = 1 if not a: b = 2 if a or b: print(b) This raises UnboundLocalError.
"short circuit evaluation" is the behaviour you are describing.
Then we also shouldn't have `with`, `for`, `while`, `if`, `import`, or `class`
Sorry didnt go through the community rules, new user! Thanks though.
I'm confused, what does this have to do with assignment expressions? Incidentally you can achieve the above by just wrapping the contents of the while in a try/finally.
Not answering the question but if you are studying programming you need something to use. Get an 11" second hand chromebook for £50 and put crouton on it or something. 
The := operator combines the function of = and ==. It sets the value, and then tests it. So just C or C++.
God speed! Although unless you’re doing thousands of requests, I think a thread worker pool + queue should be enough. Also, checkout line profiler, no point working on speed optimisations until you can prove what’s wrong!
Check if your university offers a jupyter server. My university has one, and it doesn't require you to use jupyter notebooks either. Login to server, create python file, run from the terminal.
No, that's the right example, one of them at least. In general, that's one of the problems, [(x, f(x)) for x in y if f(x)] You have to do the evaluation twice because you can't store result of `f(x)` like you can if you wrote it long form z = [] for x in y: fx = f(x) if fx: z.append((x, fx))
&gt;over the objections of the core community People are so freaking full of themselves. Like the reddit hobbyists somehow know better than the guy that's been developing the language for 20+ years.
I can see the appeal in cases like that. I think mostly my gut negative reaction is worry over how people will misuse this operator. People with a little experience programming (but not a lot) tend to think it's cool or clever to cram more things on a line and this would let them get a bit carried away. For example, one example in the PEP (when comparing valid vs in-valid uses) is this: len(lines := f.readlines()) I could see someone doing something like: print(len(lines := f.readlines())) To both store the lines and print the result. So then, if I'm reading the code and I see the 'lines' variable below this, I can't just look for assignments above to see where it originates, I also have to look for the variable within any expression too. It changes the way you have to read code - before you could be guaranteed that any variable/symbol would originate in an assignment expression or an import statement. If people just use it in the proper way - for cases where you need a quick temporary variable that lives for a few lines, then this won't be a problem. But I predict improper usage is going to be prevalent and annoying.
What I meant was: * The Python community already frowns on the use of obscure code. * PEP 572 has uses, and a high potential for misuse, that is the cause of controversy in the community. * Your question walks, (blindly?), into its misuse. P.S. Your use of the word "horrendously" detracts from any point you are making as it is clearly exageration; leading some to think of what else is exagerated. 
&gt; What will the new fork's name be? snake?
Fair enough. I don't see the "I told you so" or "don't use assignment expressions" in her/his comment. I see "don't use assignment expressions in cases where you have doubts as to what they mean". I guess I should clarify that there are plenty of assignment expressions in PEP572 used in with lazy evaluation. E.g.: if any((comment := line).startswith('#') for line in lines): print("First comment:", comment) else: print("There are no comments") if all((nonblank := line).strip() == '' for line in lines): print("All lines are blank") else: print("First non-blank line:", nonblank) # Current if self._is_special: ans = self._check_nans(context=context) if ans: return ans # Improved: if self._is_special and (ans := self._check_nans(context=context)): return ans Rereading it seems relative precedence section, it seems clear that lazy evaluation still happens, and in an example like `(a := 1 or b := 2)`, we just don't define `b`. Assignment to a new variable at the end of an `or` clause is probably not helpful, but it can be with a second `and` clause or assigning to an existing variable.
Not my question, and the combination with the BDFL retirement statement makes it seem completely doom and gloom.
I believe Amazon have something like this already running. When you leave it automatically charges you for what's just gone out the door. I heard it was a test store in the valley, currently only available to their own staff (giving them reliable testers).
Start by looking at existing Reddit bots like `automoderator` to get an idea of what they do and how the operator controls it.
Hello! I'm a bot! I see someone has already suggested going to r/learnpython, a sub geared towards questions and learning more about python. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
It uses the same syntax, but isn't fully compatible with some CPython extensions. Also, saying PyPy does "a better job" than CPython isn't really fair - it just uses a different approach, and trades off complexity for speed.
The answer is, "it depends". With your interest in ML, I am sure you have heard of alpha go, the deepmind computer ai that played go. There's plenty of clones of this now and it's theoretically possible to do it in python using a machine learning library like tensorflow. The policy network will work fine and return you a move just as quickly as c++ would, since it's calling native code in tensorflow. You can also train your network in python just fine (some of them even do). However, when playing, evaulating one net isn't sufficient. You might also need Monte Carlo Tree Search to explore future positions, that's conventional code that runs on the CPU, and thats's where the python solutions come up short.
At least we still have python 2. (jk)
At a superficial level `python2` and `python3` are mostly similar... as a beginner the main difference you will find is the `print` statement. In python2 you will find that people typically use `print 1`, although `print(1)` also works.. similar to `python3`. If you dont have to maintain any `python2` packages because of any code you have written in `python2`, I would just start with `python3`. `python2` will be deprecated in 1.5 years time.. and a lot of packages have already stopped supporting `python2` https://pythonclock.org/
What? That's entirely wrong
Thanks for posting this. I haven't finished the whole article yet, but if you are the author (based on your username) then I have two pieces of advice: 1) Break comments in the cells into smaller lines. As is, the lines extend super far to the right, and readability is diminished. 2) Don't print gigantic tables or data frames if there is no reason to. You print out your entire "signals" and "apple_backtest" data frames and they take up an insane amount of real estate. They are fine for you when writing your notebook at home, but awful for putting into a blog. Just use head() if you want to get your point across by showing a table. Regardless, thanks for posting this. Your conclusion about buying and holding is some of the best advice out there in many peoples' opinions.
Continuing from here: https://www.reddit.com/r/Python/comments/8or3n3/whats_everyone_working_on_this_week/e081zpe/ Its been almost a month since I last posted. Last few weeks, I have been using `pandas` to search through some complex data, learned somewhat about pandas, improved their documentation, made some contributions to `pyautogui` etc. Currently, reviewing a report Generation tool that we use. It uses Excel, but is causing a lot of problems, because its not written well, as a result very few people use it. So currently, I am reviewing and and checking for bugs, and filing issues for myself. Once that phase is complete, I will start using it for myself for one of the projects I am involved in. The original codebase, that I started off from is getting complicated enought that I have a feeling I have to setup a separate CI-CD server for my projects. Otherwise, I will have no idea when I introduced a bug. This week, my goal is to start running the Jenkins CI-CD server on my laptop, this will enable me to reduce the downtime, when I need to fix bugs which I have inadvertently introduced into the code-base. Also I see that these days I am afraid to make modifications somewhat to the codebase, because I am afraid, I am going to introduce bugs to the codebase. I already did a test run, with a simple code to make sure everything works. Now, I have to set it up for the real code (which is much more complicated)
RemindMe! 2 days
I will be messaging you on [**2018-07-19 18:25:49 UTC**](http://www.wolframalpha.com/input/?i=2018-07-19 18:25:49 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/8zjjss/50_free_machine_learning_datasets_part_one/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/8zjjss/50_free_machine_learning_datasets_part_one/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
**Static vs. dynamic typing** * In *statically-typed* languages, a name is bound to both a *value* and a *type*. For example, given `a: Int = 5`, `a` is an `Int` that has the value `5`. Later, code that says `a = "string"` would be illegal because `"string"` is not an `Int`. * In *dynamically-typed* languages, a name is bound to just a value. For example, given `a = 5`, `a` is `5` but is not bounded by type, so later in the code, you can do `a = "string"` with no problem. Basically, in statically-typed languages, variables carry type information with them; in dynamically-typed languages, they don't. **Strong vs. weak typing** This is a more contentious point because there aren't clear definitions for this, but generally the consensus is that in *strongly-typed* languages, the compiler or runtime will not coerce one type to another. For example, in Javascript, a weakly-typed language, you can do `var a = "1" + 0` (that is, add an integer to a string), because the runtime will coerce the integer to a string; whereas in Python, you cannot do `a = "1" + 0`.
What? That's entirely wrong. It is the same as the assignment `=` operator, except that it also "returns" the value assigned. It doesnt check for equality. if x := True: print(x) # prints True if y := False: print(y) # does nothing 
Why not?
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
This is absolutely incorrect.
&gt; What will the new fork's name be? hydra
launched supplychaincube.com today built on Flask
Nothing special but enough to be happy from myself. Script connecting over api to application and performing few requests with saving data into tablets. Next step will be save and share result.
Your submission has been automatically removed. Accounts must be older than 2 weeks. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Correct. His actions were allowed, and converted BDFL to MDFL. We are lucky he abdicated rather than continue to fuck it all up.
You think I'm talking about Reddit?
Machine learning via Sentdex, while simultaneously taking Jose Portillo's python boot camp, and [Instabot.py](https://Instabot.py) ;) Immersion baby! [https://www.youtube.com/watch?v=v\_L9jR8P-54&amp;list=PLQVvvaa0QuDe6ZBtkCNWNUbdaBo2vA4RO&amp;index=1](https://www.youtube.com/watch?v=v_L9jR8P-54&amp;list=PLQVvvaa0QuDe6ZBtkCNWNUbdaBo2vA4RO&amp;index=1)
I made a small demo here: [https://repl.it/repls/SlimySvelteRegression](https://repl.it/repls/SlimySvelteRegression) More info here: [https://pandas.pydata.org/pandas-docs/stable/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/timeseries.html) and [https://pandas.pydata.org/pandas-docs/stable/10min.html](https://pandas.pydata.org/pandas-docs/stable/10min.html) Hope that helps a bit.
This is really freaking cool lol. Great idea.
I'm going to try to be as impartial as possible. Also less ELI5 and more ELI15: Whereas `=` does assignment, `:=` does assignment *and* returns the value, as well as is allowed in control flow and more complex expressions. For example, &gt;&gt;&gt; a = 3 The actual action of setting the variable is completed, but the "return" value of assignment is None (technically it doesn't return at all, but this is for the sake of analogy), and isn't allowed in control flow and more complex expressions. You can't do something like if a = randomlyChooseZeroOrOne(): f(a / 2) Because an assignment in a more complex expression is a SyntaxError. On the other hand, assignment expressions assign and return the value, using a different opcode (`DUP_TOP` instead of `STORE_&lt;type of member&gt;`), so you get the following: &gt;&gt;&gt; a := 3 3 And can do the following if a := randomlyChooseZeroOrOne(): f(a / 2) The examples I choose are superfluous, but one such case of actual improvement is reading files, functional execution on comprehensions, and regex. Whereas before you would have m = re.match(test) if m: f(m.groups()[0]) with open(path, "rb") as f: while True: chunk = f.read(2048) if not chunk: break analyze_chunk(chunk) data = [f(x) for x in range(20)] data = [y ** 2 for y in data if y] You can now do if m := re.match(test): f(m.groups()[0]) with open(path, "rb") as f: while chunk := f.read(2048): analyze_chunk(chunk) data = [y ** 2 for x in range(20) if y := f(x)] Depending on how it is used, you can get quite a performance and usability improvement. This is usually done in many other languages directly with the assignment operator, but changing that behavior now would lead to far too many backwards compatibility issues and refuel a Py2vPy3 debate. That isn't to say it is some god-operator, there are plenty of cases where using it can be confusing enough for the writer or expected readers to have it not be used. There are also people who don't like the syntax, or prefer it to be `as`, because of similarity to imports, context managers, and exceptions. There are a variety of reasons why the proposal of using `as` was rejected, including but not limited to * confusing user precedence when in a `with` statement * difficulty to parse within `with` and `except` clauses * difficulty to decide the necessary precedence, as a developer of the language * even if all the above are solved by disallowing use in `with` and `except` clauses, or what have you, then you will get complaints about arbitrary limitations Other syntaxes such as `--&gt;` were also proposed, with their own arguments both for and against, but `:=` is what was decided upon. That you can read about in the PEP, I only focused on `as` because it was a major point of discontent in the `:=` syntax. This also doesn't mean you can replace all assignment statements in your code with assignment expression statements-- in assignment expressions, you can't unpack container types nor annotate your variable with a type. You also can't chain them without parenthesis, so chained assignment expressions act differently than chained assignment operators. For example, a = b = c = 1 # all of these are 1 d, e = (2, 3) # d is 2, e is 3 f: int = 4 # f is four, typed as int Vs a = b := c = d := e := f := 1 # SyntaxError, use parentheses around assignment expressions when chaining a = (b := c = (d := (e := (f := 1)))) # SyntaxError, assignment of c does not use an expression, just the operator, not allowed in complex expressions a = (b := (c := 1)) # all are 1 a := (b := (c := 1)) # all are 1 d, e := (2, 3) # NameError, d was not defined previously, only e would have been actually set as the tuple d = None d, e := (2, 3) # d is None, e is (2, 3), the comma creates and returns an implicit tuple of (None, (2, 3)) (potentially useful when doing complex yield statements) f: int := 4 # SyntaxError, typing + assignment expressions not allowed f: int f := 4 # typed as int and then assignment expressed to 4 The first two examples shown are because of the internal behavior of the opcode necessary as well as a mix of choice by the PEP backers. The disallowing of typing was purely a style choice by the PEP backers. ...I think that covers everything, it's really hard to simplify a PEP and not miss something.
Because lots of work for little benefit is a waste of time and money.
Here you go, folks: [https://github.com/awesomedata/awesome-public-datasets](https://github.com/awesomedata/awesome-public-datasets)
Because Go has a *lot* of inferencing going behind the scenes, to the point where there are cases that it can inference not in the way the developer wishes.
You gotta use numba or cython if you want to do any complex calculations with a good amount of speed however. 
I like the proposal (PEP-572). I am not sure if people who disagree understand how good this is!
This is the one I started with: https://youtu.be/D6esTdOLXh4
I'm tasked with finding some formatting issues in a script meant to automate the populating of an Excel document. It's on of those, simple in mind, pain in the ass to perfect. If anything, it's opened my mind to a lot more data driven logistics.
&gt; Tools like these are useful mainly for programmers who want to start adding type hints to an existing, massive codebase -- a codebase that's large enough where adding type hints by hand would take far too much time to be tractable. If I were to choose between slow but accurate and fast but potentially horribly wrong, I'd go for the first. &gt; If your codebase is mostly straightforward (e.g. stock business logic, webdev stuff, etc), the types you use in practice will probably be straightforward enough that autogeneration tools will do a good-enough job of inferring the correct types. This is only true if the calls don't accept a union of multiple types and if variables retain their type throughout the scope in the first place, which to do in a dynamic language is silly. The fact that it is dynamic is a feature and should be used. &gt; And if they aren't, correcting a few problem spots/annotating certain problematic modules by hand is much less of a burden then annotating the entire codebase manually. You heavily underestimate the errors this tool causes. &gt; Tools like these also aren't "all-or-nothing": a useful strategy is to start annotating certain core modules by hand, then use auto-generation tools to fill in the gaps. Absolutely but this occurs based off the previous by-hand generation. I doubt that the example provided (20% by hand) would be enough, and even then, the tool doesn't make decisions by known hand-generated info, but completely dynamically at run time, in which inputs to the hook could be vastly underrepresented or overrepresented. &gt; You can then of course verify the correctness of the auto-generated type hints by re-running mypy and make any necessary adjustments by hand. Not necessarily, because just because this was written for with mypy in mind. It will agree with any bugs in mypy. Even worse, just because a function *currently* only ever takes an int and outputs an int, does not mean that function was meant to always take an int, and can rarely (but not gone through during this hook) take another type, such as a float. &gt; Note that ideally, you generate this information just once, during the initial migration phase. Once you have the type hints in place + mandate that any new code must use type hints (which are added by hand), you gain all the usual benefits (e.g. you can make sure new code is interacting with the rest of your codebase in a typesafe way, you can make sure refactors don't break type safety...) Yes. But, * Python is a dynamic language. By nature writing static code is an imperformant antipattern. * if the initial generation is incorrect, it can lead to more incorrectly written or unnecessarily duplicated code in the future. I'm not saying that automatically generating types is a bad thing. Just how they chose to do it, and for what reasons they chose to do it, and how the "how they chose to do it" affects all affect future code in a negative way unless it is somehow 100% incorrect, which is impossible because as stated the hook doesn't *always* run. And even if it always ran, it doesn't mean it always ran in every real world use case. An extremely imperfect solution was built for shitty reasons. I'd rather have a better solution based on the previously known types, but you'd probably need to do more than 20% then.
Good for you! Welcome to the next world of 1s and 0s. Complete with rubber ducks and that one missing character. Do you find yourself doing more coding on your own or collaboratively?
ok first of all, thank you so much for your reply So I tried something similar to what you have, but for a specific date. So for a dataframe like this [http://prntscr.com/k7mm0b](http://prntscr.com/k7mm0b) I did: \_out = df\['2015-02-28'\] and it gives me "KeyError: '2015-02-28'" Any idea why could that be?
What you are looking for is the .loc method on a DataFrame: \_out = df.loc\['2015-02-28'\]
I just released a **simple,** easy to learn and use GUI SDK called PySimpleGUI. To get it: `pip install PySimpleGUI` There's an extensive readme file with tons of examples and screenshots. If you basically need to collect a bunch of input variables then this is a great choice. Here's the GitHub that has lots of examples in the Readme [https://github.com/MikeTheWatchGuy/PySimpleGUI](https://github.com/MikeTheWatchGuy/PySimpleGUI)
CPython takes a traditional approach of compiling source code entirely before execution. Python source is compiled to a Python-specific byte code, which is then interpreted. PyPy does JIT (Just In Time) compilation; that is, code is compiled as it is executed. PyPy does *tracing* JIT compilation (Google for more info). This allows for optimizations that are difficult or impossible to implement in traditional static compilation. Also, the end result of PyPy's compilation is mostly machine code.
And is this what we can expect, as well? name = "John Jacob Jingleheimer Schmidt" if b := name.strip(): print(b.upper()) othercode = [x for x in range(100) if x % 2] if a := 1 or b := 2: print(b) # John Jacob Jingleheimer Schmidt 
 The builtin `shelve` module is a persistent dictionary based on pickle. What do you have against pickling? 
Nothing per se. I was just wondering if there were more secure production quality alternatives. 
That's amazing. 
I actually just made my leap to 3.6.5 for the next professional project. 2.7.10 was my bread and butter--doesn't take much to ignore the writing on the wall though.
It's trying to scrape the Bandcamp pages, and the layout has probably changed since the script was last updated (which was in 2017).
He might need to select the interpreter so the IDE can do code analysis for him (sublime will probably underline unknown packages in red) 
dam..its time to write my own script then
ohh ok. Thank you so much. I was trying loc with () instead of \[\] earlier, that's why. Thanks again!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Do you know anything about "Web Scraping"? https://i.imgur.com/AIU9aSh.png You can open up Dev Tools and look at the XHR requests in the Network Tab and see the API call being made that fetches the data. You can then attempt to make this call yourself using `requests` or what have you. I can help further if needed.