This book has been really great so far. I'm a maxscript guy who knows Python and wanted to understand the Maya side more. Only three chapters in so its hard to give it a proper review yet -- but I've liked the real world examples and the practical tips regarding both Python and Pymel. Galanakis has always had strong opinions around Tech Art so it was nice seeing his name on this book and getting a bit of his approach to things (although that's not the focus -- but a plus for me.) 
 @decor def foo(): pass is simply a shorthand for def foo(): pass foo = decor(foo) when parameters are involved, @decor(bar) def foo(): pass is short for: def foo(): pass blah = decor(bar) foo = blah(foo) one thing that helped me understand parameterized decorators, is that they aren't decorators themselves so much as functions that *return* a decorator
I think you could just split the line on any character sequence that ends code parsing (like a '#' that starts a comment) and then run the first string segment through as before. That should keep it from breaking on inline comments. out[i] = out[i].split('#')[0] if out[i].rstrip()[-1] != ':': out[i] += ':' You probably would also need to worry about line continuations ('\'). Those might make things tricky.
You mean existing bad code. Code that is a potentially gigantic security problem isn't "good code". I might go so far as say it's "mediocre code" or "better than nothing code".
&gt; Don't use it, don't look at the source, forget this. I know that feel.
NocoNoco
Rofl @ the issues page
I used to be in the anti-IDE camp until I realized how awesome some of the tools are. In PyCharm I really enjoy the Structure window, the code completion/suggestions (I know you can get this in Sublime), and I still have the features I like most in ST2/3 like editing with multiple cursors. When you're learning a new language it's awesome to have reminders about things like proper indentation or number of blank lines too
Ok, that makes sense, it seems to me that you might want to set up your own CA, and put that in the trust root on the machines so that the system better mirrors production though :-)
You want a dict: incarceration_rate = { 1978: 132, 1979: 133, 1980: 139, 1981: 154, 1982: 171, 1983: 179, 1984: 188, 1985: 202, 1986: 217, 1987: 231, 1988: 247, 1989: 276, 1990: 297, 1991: 313, 1992: 332, 1993: 359, 1994: 389, 1995: 411, 1996: 427, 1997: 444, 1998: 461, 1999: 463, 2000: 469, 2001: 470, 2002: 476, 2003: 483, 2004: 487, 2005: 492, 2006: 501, 2007: 506, 2008: 506, 2009: 504, 2010: 500, 2011: 492, 2012: 480 } (I copied and pasted the data from [here](http://commons.wikimedia.org/wiki/File:U.S._incarceration_rates_1925_onwards.png#mw-imagepage-content).) Then you can look up the year desired: &gt;&gt;&gt; incarceration_rate[2005] 492 
It's actually better (as per PEP 8) to enclose it in parens instead of escaping the newlines: i = (math.acos(t/r) if (a and b and c and d) else math.atan(r/t))
I'll give this a shot. My only beef with not using locals is using format like this: a.format(year=year, month=month, location=location) if it could be done like this a.format(year, month, location) I'd have no issue, except then I'd have to format the string with {0} {1} {3}, which removes my clear labels in the string. locals() is the only sane alternative. 
This is just going to get messier and messier. Layers upon layers. If I really had to do this for some reason, though, I think I would start using regex.
When I am working with different versions of python, I have two options: 1. use virtualenv, and set the python version for each. 2. alias python version inside bashrc
I'll demonstrate assuming you're on Linux/OS-X. It's probably similar in Windows, but I've always had a painful experience using python with external libraries in Windows. I'll skip over pycharm because I haven't used that, so maybe someone can help explain how to use a virtualenv with pycharm. $ virtualenv -h Usage: virtualenv [OPTIONS] DEST_DIR ... -p PYTHON_EXE, --python=PYTHON_EXE The Python interpreter to use, e.g., --python=python2.5 will use the python2.5 interpreter to create the new environment. The default is the interpreter that virtualenv was installed with (/usr/bin/python) $ virtualenv -p /usr/bin/python3.3 testing_dir Running virtualenv with interpreter /usr/bin/python3.3 Using base prefix '/usr' New python executable in testing_dir/bin/python3.3 Also creating executable in testing_dir/bin/python Installing Setuptools..............................................................................................................................................................................................................................done. Installing Pip.....................................................................................................................................................................................................................................................................................................................................done. $ source testing_dir/bin/activate (testing_dir)$ From there you can `pip install $PACKAGE` without sudo and it'll go into your virtual environment. Make sure you don't use sudo. Use the command `deactivate` to exit the virtualenv. Inside the virtualenv, you can install whatever you want, use whichever python executable you want, and not worry about tainting your system with strange libraries. This does not necessarily make things more secure. You are still running remote code, but at least not as root, and not putting it into your /usr/lib. This is great for running a project purely with the set of packages you decide at the time, and you can capture those with `pip freeze &gt; requirements.txt`. Later, someone can install all of them with `pip install -r requirements.txt`. It really helps with distributing packages and keeping the environment similar.
oh god, I forgot about 0.96... I for sure used 1.1 and 1.2. I think I dabbled in 1.3/1.4 before taking a hiatus from web development.
I actually am using Linux. Since your and /u/nzbike's replies both mention virtualenv, (I can take a hint) I went ahead and searched for how to use it with pycharm. Looks like it's pretty straightforward. I'm still trying to get my head around what virtualenv actually *is*. I've used virtualbox and vmware to create virtual machines; is virtualenv somehow similar?
now you've got two problems...
I felt constricted by the framework. I found myself always trying to use the shiniest, most magical features and then getting frustrated. bending django-admin and ModelForms often proved extremely challenging. in retrospect, I would have probably had a better time if I had just used vanilla Models+Forms and turned off django-admin completely. a lot of the things I like to do don't fit cleanly into the "web application" model either. I could never figure out a good way to use Django libraries for standalone CLI applications or daemons. in recent years, Rails has actually decomposed their libraries really well. I've used ActiveRecord in Rails, Sinatra and plain old Ruby tools. more than anything, I kind of just fell in love with Ruby. I spent years hating it but I finally learned to stop worrying and love the bomb.
Virtualenv symlinks your system's python to your newly created environments bin folder. The benefit of this is all the libraries a specific project get installed to that environment instead of globally, which prevents possible conflicts with other projects, if they were installed globally.
Although it's actually better not to do it at all. :)
Thank you for the detailed reply! I created a virtualenv project interpreter in Pycharm with Python 2.7 as the interpreter. I noticed that the Zelle files I had open in Pycharm won't run in the virtualenv environment. Not simply errors; they simply won't run. Which makes sense if virtualenv is creating a completely different production environment, I suppose. Thanks again!
Ah, that makes sense as well. I didn't realize that certain libraries could cause conflicts with others. (I'm googling 'symlink' after I submit this reply.) Thank you! Edit: Okay, it's a symbolic link!
no problem! You might want to test by just running them through the command line in the same virtualenv, just to see the output. It may give off more detailed warnings/errors that way. PyCharm could be hiding something, maybe python's output before the script is even run.
I will try that. I think I've found a solution for working with different versions; apparently Pycharm will let me open projects with either 2.7 or 3 (or, of course, a virtualenv). So, for now I've simply started a new project for the Sarker book. I need to follow up on the virtualenv lane, but I'm trying keep "lesson-creep" to minimum, at least for now. Thanks again for your help!
Perhaps, but I'll take actual readability over adherence to a set of rules any day. In fact, PEP8 itself makes that qualification right after the intro, and an abundance of uniformly spaced parentheses is an easy way to derail readability.
There's also a library called decorator that preserves the argspec too, which is useful if you like to generate documentation.
I finally wrapped my head around virtualenv after reading this excellent blog post: https://www.hackerschool.com/blog/14-there-is-no-magic-virtualenv-edition
Neat! Now make one that removes those ugly ______underscores______ 
well firstly, based on print is a function, it looks like its written in python3* not 2* (which means its not really an old program). secondly i suggest you learn how to read code. if you look at lines 61/62 (didnt even read the readme) you would see you pass it like this (assuming linux and python 3.4, calling the script varies by platform. not the arguments though) $python3.4 groupme_fetch.py the_group access_token
Just wanted to thank you. That was one of the best talks I have heard in a long time. It actually made me sort of excited about web development again.
Ew.
Thanks for the speedy reply, unfortunately I have virtually no knowledge of python or applications that use the terminal. Maybe this is ignorant on my part but I was hoping there is a quick and easy way for me to get a log of a chat without needing knowledge of python. By the way in the read me file it recommended using 2.7
...or as simple as looking up in a repo like subscene.com?
My bad... I assumed you came by this guy through programming. And hmmm... That's odd
Interestingly, here's its complement -- [C with colons instead of braces](http://blog.brush.co.nz/2007/09/nobraces/). Looks decent, actually.
Well thanks for your help anyway. When i run the thing I keep getting this error. Do you know what this means? line 5, in &lt;module&gt; import requests ImportError: No module named requests
what operating system are you on?
Mac OS X
ummm i would google installing python module &lt;module name&gt; on osx
If I read this correctly, this means that pip will now (optionally) be installed along with python 2.7.next. Previously, it required a separate install.
I tried but when I put this in $ easy_install requests it said permission denied
Maybe I don't understand the question because people are posting complicated answers, but Pycharm asks me which interpreter I would like to use on a per project basis, I switch between 2.7 and 3.4 with no problems in Pycharm.
It's arguably more readable than escaping newlines, and not prone to breakage when line endings change Ideally, though, the whole construct would be avoided where possible.
Usually, yes, although not always unavoidable
If you can use external module, take a look at periscope and / or subliminal. They both have a CLI and can be imported as a module.
For a beginner an IDE is probably overkill. It's not a waste of time to use an IDE however in fact it's the opposite. There's functionality such as refactor, quick documentation, go to implementation, comment and uncomment blocks, version control integration, interactive debugger and probably a hundred other productivity gains to be had. 
No, that approach has been known about for a good while, though obviously considered pretty hacky. Eg. I wrote [something](http://stackoverflow.com/a/215697/9493) using it 6 years ago, and it wasn't new then. Can't remember who originated it, but I remember an article showing off how unexpectedly flexible the new encoding directive was by doing something similar.
I develop things which need to run on 2.6, 2.7, 3.3 and 3.4. I use [pyenv](https://github.com/yyuu/pyenv) for that; it's a tool which makes it easy to install multiple versions of Python, and create virtualenvs which will use specific versions.
Did anyone notice the off-by-one error in the rationale?
They will not do that, and they have explained countless times why.
Yeah I was going to suggest AutoIt, the parent language of AutoHotKey. AutoIt has some great functions and tools for this kind of automation, since this is it's core feature area. WinActivate and then WaitWinActive if memory serves. Surely pywinauto or one of the other libraries mentioned can do this stuff from python since it's all windows api calls. Manipulating data in AutoIt was pretty sucky.
My only exposure to lambda stuff before python was maybe anonymous functions in MATLAB. In python I discovered if I want an inline function definition, I can use lambda, and if I need a long function at any point in my code I can def func(x): and use that the same as the lambda... I never understood what python was supposed to be lacking here. Plus there's functools.partial as well, though I've never needed to use that.
Could you just make an inputs dict and pass that instead of using locals? Explicit is better than implicit.
I, too, would like this. I see why they can't backport the whole unicode thing, but iterable unpacking and yield from would not break any existing programs. Still, Python 3 is the way forward, and I understand that they would rather move that one forward than provide incentives for sticking with 2.7.
Yup. I'm using it with http://django.pl site and I'm happy with that. 
You mustn't get stuck in the past, but look to the future! Rather than backports, ask for Python3 + PyPyJIT + NumPY - GIL ports that can run on distributed clusters of raspberry pis!!! I'm jk though. Python team is doing a great job, I appreciate all the hard work holding the language together!
Since it seems that you just want this to work with the minimum effort, try: sudo easy_install requests And enter your password when prompted. This isn't the best way to manage installing and managing python environments, but it will work.
I am not the author, btw.
Or just install [ganglia](http://ganglia.info). Far fewer dependencies and much more advanced functionality.
Considering Python's traditional affinity for Monty Python sketches, [it's likely intentional](https://www.youtube.com/watch?v=vt0Y39eMvpI).
I'm a big fan of using virtualenvwrapper: http://virtualenvwrapper.readthedocs.org/en/latest/ Check it out!
It's a programming tutorial. "This how-to article describes how you can create a set of charts for monitoring the load on one or more servers. It uses Python (psutil and bottle), MongoDb, and jquery. The general idea is the same no matter if you use a different database or web framework."
Unless you use New Relic Insights and add custom parameters. Then it becomes super useful to analyze the user interactions.
Personally, I do not like much "multiple names". When I say "more consistent than Python" I mean consistent object-orientation ( len([]) vs [].size for example ) and blocks for every thing (instead of lambda / named functions / comprehensions / "with"). I agree, that python is more mature, and many implementation decisions are reasonable and made better than Ruby's ones. But as a language Ruby is more comfortable to write in.
It's interesting to see the turn in direction this project has taken, from a sort of next-generation numpy to (in the intermediate term), an abstraction layer onto of a wide range of data sources and computation engines. I'm curious to see once dynd becomes a full-fledged backend if this strategy will have eased the transition from numpy to whatever comes next. 
It's a slippery slope. If they do this, people will ask them to backport other features, and suddenly Python 2.7 is a weird hybrid of 2 and 3. Python 2.7's feature freeze was over 4 or 5 years ago. I still use it, but I acknowledge that I am and will be missing out on new features.
or py autohotkey http://pyahk.readthedocs.org/en/latest/
You'll want to open the file and read lines up to a count (10), append them into the new file, and start over again. count = 0 var = '' with open('your_filename', 'r') as file_read: if count &lt;= 10: var = ''.join([var, ',', file_read.read()]) count ++ else: with open('new_file', 'a') as write_file: write_file.write(var + '\n') count = 0 var = '' Probably a better way to do this though, that's just off the top of my head. Plus if the number of lines in the file_read aren't in a multiple of 10, it will just wipe the ending lines away (Which is what you probably don't want). But I guess it's a start.
While I'm not saying the physics is wrong (looks correct to me), the style of code could be improved by e.g. * Not doing from 'x import *'. Keep things in their own namespace to avoid collisions. * Adhere to [pep8](http://legacy.python.org/dev/peps/pep-0008/) naming conventions of naming variables. * Try not to use global variables. For example, do 'psi' and 'E' need to be global? Would importing your functions from another module work if these need to be global? * If you comment out 'from pylab import *', any numpy functions don't work, so import it separately i.e. 'import numpy as np'.
Cool, thanks for the advice.. I'm kind of new in Python, so I guess I still miss those basic aesthetics.
Don't worry, no one is immediately great, it just takes practice :) I think the best way to learn good style is to look at other people's code, especially popular projects on github. For example, [the reddit source code](https://github.com/reddit/reddit).
I think you want something like this: import csv with open('out.csv', 'w') as out_file: out_csv = csv.writer(out_file) with open('in.txt', 'r+U') as in_file: row = [] for line_no, line in enumerate(in_file): row.append(line.strip()) if (line_no + 1) % 10 == 0: out_csv.writerow(row) row = [] if row: out_csv.writerow(row)
obligatory [requests](https://github.com/kennethreitz/requests)
++ is not a supported operator in python, you're looking for count += 1
I'm confused why this is advantageous. I get pip is pretty nice, but why did we need a PEP to do: easy_install pip
How do you know if it's down if you aren't watching the stream, and have no access to API hooks to alert you otherwise? My solution would be to load the page on a timer and see if the stream data loaded or not.
I think that if pip is included with python, the version of pip and capabilities will be more predicable. The pip 1.5 upgrade was a bit shaky, and required some changes for it to work correctly. If we know that python 2.7.next includes pip 1.5.next, it makes packing easier.
Cubes Viewer by jjmontes: http://jjmontesl.github.io/cubesviewer/ Live server can be found here: http://slicer-demo.herokuapp.com
Maybe one for Stackoverflow?
Udacity used to be free and I believe this course still is if you sign up for the 'Free Trial' https://www.udacity.com/course/cs101 also try: http://www.greenteapress.com/thinkpython/html/index.html 
Maybe try to make script to check media event play. [Here is the list of HTML5 media events](http://www.w3.org/2010/05/video/mediaevents.html) . Maybe this can help you also, not python but: http://stackoverflow.com/questions/12027092/detecting-html5-video-play-pause-state-with-jquery http://msdn.microsoft.com/en-us/library/ie/hh924822(v=vs.85).aspx
maybe try opening the file and specifying binary? with open("p9.binary", "rb") as f: if you can upload the file somewhere, that would be helpful in debugging.
Pip for python3.4 is broken on wine (because wine doesn't implement all the apis that pip3 uses), which means ensurepip causes problems for python3.4 on wine. I really hope the same thing doesn't happen with python2.7. Though if it does, I know my use case seems pretty unique so I won't be upset or anything.
Oh I see quantum effects all the time. My bugs exist until they're observed.
God this brought me back to Solid State Engineering class... cool application though.
That sounds great, I think I'll try Atom and see if I like it
It is not the project's fault if something breaks in wine
Those are entirely new features, so you can't put them in a patch release. They ought to be introduced in 2.8, which [is not going to happen](http://i.imgur.com/OSea3EG.jpg) under the schedule set out in [PEP 404](http://legacy.python.org/dev/peps/pep-0404/).
nice, but what hope is there for this project that financial institutions would actually use this? i know a couple of guys who do contracts for banks and my impression isn't that they're itching to move towards open-source solutions
Summary: This tutorial will guide you through the process of using PyQt to build a simple but useful rich-text editor. The first part of the tutorial will focus on the core features and skeleton of the editor.
Summary: Bubbles: a framework for **ETL** (**E**xtract, **T**ransform and **L**oad) written in Python. Uses metadata to describe the data processing pipeline (ETL) instead of script based description.
**Kmonodim, a Program for the Numerical Solution of the One-Dimensional Schödinger Equation** A simple algorithm for the numerical solution of the SchrÃ¶dinger equation for a one-dimensional problem with a generic potential and its practical implementation in a computer program (called Kmonodim) is presented. This approach allows the study of bound states and can be used in a laboratory course of quantum chemistry to study simple model problems or real systems for which analytical solutions cannot be obtained. The Kmonodim program is written using the C++ and Fortran languages: the management of the input and output data is performed through a graphical user interface (GUI) written using the QT/KDE libraries of the Linux KDE graphical client. The program is freely distributed under the GNU General Public License. https://github.com/stefanoborini/kmonodim
It's always PyQt and never PyQT
Duly noted!
Glad you enjoyed it! He is a great speaker and advocate for the web.
Maybe if he didn't fuck us all over with accusing us of piracy then he wouldn't get any hate.
That's [actually a thing](http://en.wikipedia.org/wiki/Heisenbug).
Fuck you. Seriously, fuck you! Book writers make a lot of money. I read http://nathanbarry.com and know how much he makes. You and the other writers are raking it in and then asking for our pity. Fuck you. Books should be free. If the Python and Django docs are free, why not your crappy book? Isn't django book free?
OMG, a noob mistake. Sorry for wasting your time. Always open byte streams as 'rb'. How do I mark laplace as answered?
haha yeah that's what I was referencing lol
Also your code has lots of HTML entities in it from incorrect escaping.
&gt; I honestly have no clue about ebook formatting you should stop right there. 
Add the absolute flag like in the linked post
Seriously, who would rage over the availablilty of a PDF, but not a Kindle/iBooks version?
Why are you using Python on wine when there are native binaries available?
Ya! Everyone should give away months and months and months worth of work for free. Fuck your bills and need to eat! Give me free stuff!
I'm cured!
Thanks for the suggestions!
https://docs.python.org/2/library/decimal.html
Are they really errors? How were these values generated? If you have a = 1.0 / 3.0 followed by b= 3.0 * a, that b isn't precisely 1.0 is not an error of floating point. If you require it to be 1.0, then it is an error of your approach.
recommending mongodb in a tutorial seems rather irresponsible.
done
I was doing the logarithm of numbers in a data set for a Stats problem (no calculator, thought it would be fun to use Python lol) so I basically had the following code: list = [number 1, 2, 3...] log = [] for n in list: m = round(math.log10(n),2) log.append(m) print log I had them in an ordered pair for a graph I was making and they turned out fine. When I printed out the list by itself, this happened. I was using Codecademy Labs, so there might be an issue there. Homework turned out fine btw.
Thanks, will use this in the future. Kind of a novice at Python atm.
Here's something you can try: go read up on [list comprehensions](https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions) You can then rewrite the code as numbers = [1, 2, 3....] log = [round(math.log10(n),2) for n in numbers] #List comprehensions are fun! print log
No worries! Don't sweat the floating point problem, it's an issue that all programmers will face - the dreaded IEEE 754 floating point problem. Basically just as how you can't represent 1/3=0.33333.. perfectly in decimal, you also can't represent 1/5 = 0.2 perfectly in binary.
Hrm, I found [this page on Intuit listing third party ](http://marketplace.intuit.com/v2/f-data-synchronization/software-solutions.aspx?ft=49,48) which isn't too promising. But you should be able to use that [QODBC](http://qodbc.com/default.htm) ($150!) bridge with pyodbc, PyQt, or PySide [this](http://www.sleeter.com/blog/2014/02/csv-secrets-quickbooks-reports-excel/) page is more promising, but still. Looks like your best free option may be manually export to csv and then import the csv with the builtin csv module. Generally dealing with less than ubiquitous proprietary formats in Python can be hard. Python is really built around open-source.
Representing floats as decimals can be annoying but the values are not technically errors.
raw_input into two variables
[What Every Computer Scientist Should Know About Floating-Point Artithmetic](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)
and related, from the python FAQ: [Why are floating point calculations so inaccurate?](https://docs.python.org/2/faq/design.html#why-are-floating-point-calculations-so-inaccurate)
Nuh, binary, son.
It's also good for readability reasons. It's annoying to read a piece of code without being able to easily figure out where a function or variable comes from.
The purpose of the `global` keyword in Python is to allow you to *set* global variables, because any time you write `my_var = 25` Python assumes it's a local variable unless told otherwise. When you want to *read/use* a global variable, this ambiguity does not exist so Python simply traverse the lexical scopes to find the variable.
r/learnpython
I would just keep using floats and get used to how they work. It's pretty rare to actually need a decimal type.
I will disagree with you, the types define the architecture. The most important thing in programming (and you can ask any programmer not just me) is the data structures. With poor type system and loose data structures you are bound to screw yourself much earlier than with good ones. Sure its possible to define those in python and PHP and Ruby, but I dont think beginner developer ever understand the importance or take the care to and if they do, they are much better off with a compiler having to verify them, than having to explain a beginner why they should write unit tests for their data structures...
round() is your friend when you don't care much for precision.
Apparently numpy has a long double type. It should be 80 bits on x86. You may want to try that. 
That whole faq is great. Recommend the read. Thanks! 
I guess it depends on whether you write finance-related code or not.
Still not using print function and `str.format()` in 2014? :p
It's been years ... but I seem to recall there was a trick to fix a couple of quirks in soap. This is the gist of it. Hth: from suds.xsd.doctor import Import, ImportDoctor # Fix missing namespace. See suds docs imp = Import('http://schemas.xmlsoap.org/soap/encoding/') doctor = ImportDoctor(imp) client = Client(url, doctor=doctor) edit, the docs: https://fedorahosted.org/suds/wiki/Documentation#Doctors 
Yeah, double-barrel shotgun all the way. https://www.youtube.com/watch?v=EY2lWmZN5TQ
Actually, 3.0 can be exactly represented by floating points. For 32-bit IEEE 754 floats, it would be 0x40400000, if I did my math correctly. This is because in binary it can be exactly expressed as 0b1.1*2^1 . Only numbers with non-terminating binary representations are impossible to exactly encode with large enough floating points.
can you develop this ? Sounds interesting.
Let's not fix what isn't broken..
I'm writing a short series on some of the problems - particularly in geometric computation - that using floats can throw up, and how to avoid them using the Python standard library Fraction type. The [first two articles](http://sixty-north.com/blog/series/robust-geometric-computation-in-python) of what will probably be a three or four article series are up.
This must be an ancient article, because `string.joinfields` (and most of the `string` module) has been deprecated for a long time and removed in 3.x. Likewise, in 3.x `map()` does not create a list. In fact, yes, [here it is in the wayback machine dated May 1998](https://web.archive.org/web/19980526013534/http://www.python.org/doc/essays/list2str.html). Python 1.5.1 was the new hotness when this was written. 
Some of you here my be interested in [QuTiP](http://qutip.org/). I've used it for a few calculations here and there, and it's quite nice.
You don't want to use floating points to represent money because round off errors could end up having genuine financial implications. Instead, use a decimal type with as high precision as you need (typically two decimal digits). Decimal types guarantee the same absolute precision everywhere, instead of floats which guarantee the same *relative* precision everywhere. You could also just use ints, e.g. insted of storing 2.51, just store 251, and make sure to remember the implicit factor of 100. In fact, it's a good exercise to implement your own decimal type wrapped around an int.
This is completely true. I work in a Bangalore based startup where Python is the only programming language being used. We have been asked by our clients whether we use Java or .NET for our product and they were surprised to learn that we use Python. Since the large part of India's IT industry uses Java or C#, students never bother about learning anything that is not part of their course structure. Where Indian engineering students are starting to learn programming through C, US or other universities are slowly moving their introductory level CS courses to Python. But the scenario is changing slowly. Conferences like PyCon and local Python user groups are becoming more popular which is spreading awareness in the community. We have hired people with little to no previous Python experience, and they actually took very little time to pick up. It will be interesting to see how the scenario changes over next couple of years.
I use both. For example it doesn't make sense to use C-style if you're constructing a URL with potential `% encoding` portions, yet it's much harder to print floating point precision with r/l padding using `.format()` I prefer C-style for positional arguments, and `.format()` for named. Right tool for the job etc etc..
We saw the same thing in Malaysia. The software industry there is still undeniably dominated by the traditional enterprise strongholds: Java, .Net, and SAP. "Alternative" languages like Python and Ruby are still upstarts, and languages like Clojure and Haskell might as well not exist. That said, times are starting to change. The number of members in the local Python User group has been steadily increasing.
Yes, true, sorry, shouldn't comment early in the morning. OP displayed outcomes of arithmetic operations, hence the machine epsilon inaccuracies.
**QuTiP***(Quantum Toolbox in Python) is open-source software for simulating the dynamics of open quantum systems. 
At line 32 you are trying to calculate a average out of student's name. Besides, the whole for loop idea is wrong - it will calculate average multiple (exactly 4, at this example) times. You also cannot pass three arguments into sum at line 38, this is not how [sum](https://docs.python.org/2/library/functions.html#sum) works. Also the function names are pretty confusing, at get_average() you are calculating total_sum, which is sum of averages. BTW, this should be asked in [/r/learnpython](http://www.reddit.com/r/learnpython)
You should read up on epsilons.
Dictionaries aren't ordered like lists are. You reach their values by their keys (e.g., dict['key']), not by numbered index.
Your file is called turtle.py so `from turtle import *` imports itself. Try naming it something else. 
Representing money with ins is a pretty good lightweight solution, since you only need to convert at the boundaries. Addition and subtraction just work. Multiplication and division are tricky because you have to remember to divide/multiply by 100 there every time. Luckily you rarely need to work with €² or £/$ (well the latter if you convert currency, which you don't need for simple bookkeeping-like applications).
Because of how the IEEE 754 standard works, floating point numbers cannot reliably store for example 0.1. This is because floating points works with adding halves ( 2^-x ) in a sense (0.5, 0.25, 0.125, 0.0675 etc.) If you add for example 0.0675 and 0.03125 you'll get 0.09375. If we add lots and lots of smaller 2^⁻x numbers, we'll still never _quite_ hit .10. This would cause every financial transaction of $X.10 be a bit inaccurate. No biggie for an individual, but it's these kinds of errors can really make the economy exciting if banks starts implementing those kind of bugs into their systems. That's sort of why the much slower and less flexible decimal data type is recommended for anywhere you actually need the exact precision.
Thank you @stiivi for your hard work on Cubes and now this. Can you compare this project to other solutions, such as https://github.com/ceumicrodata/mETL ? 
Thank you for the insight. I am sorry for posting in the wrong subreddit.
It's C++ oriented so i don't know if you might be interested or not, but there is a serie of posts from [Bruce Dawson](https://randomascii.wordpress.com/about/) about IEEE 754's Floating-Point tricks and pitfalls. 1. [Tricks With the Floating-Point Format](https://randomascii.wordpress.com/2012/01/11/tricks-with-the-floating-point-format/) 1. [Stupid Float Tricks](https://randomascii.wordpress.com/2012/01/23/stupid-float-tricks-2/) 1. [They sure look equal…](https://randomascii.wordpress.com/2012/02/11/they-sure-look-equal/) 1. [Don’t Store That in a Float](https://randomascii.wordpress.com/2012/02/13/dont-store-that-in-a-float/) 1. [Comparing Floating Point Numbers, 2012 Edition](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/) 1. [Float Precision–From Zero to 100+ Digits](https://randomascii.wordpress.com/2012/03/08/float-precisionfrom-zero-to-100-digits-2/) 1. [Intermediate Floating-Point Precision](https://randomascii.wordpress.com/2012/03/21/intermediate-floating-point-precision/) 1. [Floating-point complexities](https://randomascii.wordpress.com/2012/04/05/floating-point-complexities/) 1. [Exceptional Floating Point](https://randomascii.wordpress.com/2012/04/21/exceptional-floating-point/) 1. [That’s Not Normal–the Performance of Odd Floats](https://randomascii.wordpress.com/2012/05/20/thats-not-normalthe-performance-of-odd-floats/) 1. [Doubles are not floats, so don’t compare them](https://randomascii.wordpress.com/2012/06/26/doubles-are-not-floats-so-dont-compare-them/) 1. [Float Precision Revisited: Nine Digit Float Portability](https://randomascii.wordpress.com/2013/02/07/float-precision-revisited-nine-digit-float-portability/) 1. [Floating-Point Determinism](https://randomascii.wordpress.com/2013/07/16/floating-point-determinism/) 1. [There are Only Four Billion Floats–So Test Them All!](https://randomascii.wordpress.com/2014/01/27/theres-only-four-billion-floatsso-test-them-all/) 
No, vice versa. The case when you specifically need floating point is rare. Better use decimal with fewer surprises—even if it's slower. In making things faster, you have a motivation to learn the quirks of floats.
Agree that redis is invaluable for scraping stuff. At my company, we built a redis-based Python library to help with doing distributed, non-duplicative scraping: https://github.com/percolate/redset
I don't get it.. any competent programmer in any procedural language should be productive in python within a few days. There's no need for schools or having "python" on the CV.
If you're doing financial calculations like this absolutely make it a function straight away. Don't remember to multiply by 100 at any point. 
If anything it's a display (as a decimal) error.
There is a lot more to a language than syntax. It may take days for a competent programmer to learn the syntax, but it takes much much longer for the same programmer to learn to write idiomatic, performant code as well as learn the ecosystem of tooling and libraries available.
Oh, yeah, obviously.
Thanks, it worked!
If you aren't serving dynamic content*, then [nikola](http://getnikola.com/) may be the simplest way to go, since you can focus on content almost exclusively. /u/vindolin is right though, it's hard to make a solid recommendation without knowing your exact use case. * You can embed dynamic content like comments served from [disqus](https://disqus.com/) for example.
You are simply passing the current instance of the object to the update method of tilemap instance variable. To see what it's used to for, read the documentation and/or source of the update method.
It's just a reference to the object (think of it as the object passing itself to other object). class ObjectB(object): def update(self, number, other_object): print(other_object) class ObjectA(object): def __init__(self): self.tilemap = ObjectB() self.tilemap.update(100, self) # Check the update method above. There the ObjectB is receiving a reference to the ObjectA.
In python `eval(repr(f)) == f`. So it needs to print it with enough precision such that parsing it will produce the same value.
This style of representing decimal numbers is called fixed point, because you are representing a fixed number (in this case: 2) of decimal digits when you store the number as an int with a scaling factor of 100. Compare that with floating point where the numbers of digits after the decimal can vary, or float. (not saying you didn't know that, but maybe its helpful for others).
Is this a common pattern? I have never seen it before and it seems kinda ugly.
Reddit floating point problem here to, they round all numbers in the list to 1! ;-)
One important thing to note, though: &gt;&gt;&gt; 1 and 0 or 1 1 &gt;&gt;&gt; 0 if 1 else 1 0 
If self (or any other name) is provided to a function, then self can be used in this function. As any other name. Self is not a special keyword, you can do this instead. But this is uncomon. If self knows about tilemap does not mean, that timemap knows about about self. So we must pass it. Some code to learn, in this case self knows about register, but register does not know about self : class Millionaire(object): register=dict() def __init__(self, name, whomademe=None): self.name=name self.register.update({name:self}) if whomademe in self.register: self.whomademe=whomademe else: self.whomademe=None def get_whomademe(self): return self._whomademe def set_whomademe(self,othername): self._whomademe=self.register.get(othername,None) whomademe=property(get_whomademe,set_whomademe) millionaires=list() millionaires.append(Millionaire("George Bush senior")) millionaires.append(Millionaire("George Bush junior","George Bush senior")) millionaires.append(Millionaire("Bill Gates","Bill Gates")) for millionaire in millionaires: if millionaire.whomademe==millionaire: print("{} is a self made millionaire.".format(millionaire.name)) elif millionaire.whomademe is None: print("{} came from nowhere.".format(millionaire.name)) else: print("{} made {} to millionaire.".format(millionaire.whomademe.name, millionaire.name)) 
Actually you'd basically never need to divide/multiply by 100 as part of multiplication/division, everything just works.
/u/vindolin &amp; /u/emarshall85 Thanks for replaying :) By one page I'm talking about the template/theme like [those examples](http://designscrazed.net/free-responsive-html5-css3-templates/). I think that the website will embed content from other sites, for example: get text from a webpage in an other site and show the text in a limited area.. I have no idea how to fetch the content because it depends on many things.. I'll be not working on this project alone, members from my FOSS community will be involved too.. For now I need just to find out if I can use the One Page templates with a python framework, I don't won't to use a big one.. That's why I was looking for /r/flask and /r/bottlepy And of course I don't want to use a PHP CMS because I don't really to setup a hole CMS for one page website.
Except (like I said) if you want to convert between currencies, but then you'd better use `Decimal` anyway.
Right, but you said "divide/multiply by 100 there every time" but that's not true, normally when you multiply or divide you'd be multiplying $ by units to get $, which means it doesn't matter if it's that or ¢ by units to get ¢.
Yeah but we're talking about Indian IT outsourcing firms here, not competent programmers.
Yeah, I know about the SDK; I was just wondering if there were some pre-rolled libraries that might shorten the development time. 
Thanks!
Floats are like that in every language, they are approximations. You should never use them for anything you want exact math for. 
Every time you multiply or divide currency together, not with a unit (of course then you have the issue of what the precision of the unit is if it isn't integer), but like I said, when do you ever need €²?
Floating point...not even .999999999999999999999999999999999
although this is a python board don't just limit yourself to looking at python and a framework such as pygame. I highly recommend something like even lua to program in for making something quick and easy. Lua with love2d for example is a great combo. You need such little code to build a simple retro game with the basics.
I see what you did there ;) 
Talk about a poorly worded title. 
&gt; yet it's much harder to print floating point precision with r/l padding using .format() Eh? It uses exactly the same syntax for that part of the specification. &gt;&gt;&gt; '{:3.2f}'.format(1123.2131) '1123.21' 
A chat app is a good start to learn async code. If you want more pm me, i am using tornado to build something cool.
Here is another: http://video.coldfrontconf.com/the-web-in-a-mobile-world-dominated-by
Decimals are not dangerous. They do exactly what you would expect from decimal calculations. Floats have many quirks that you will need to take into account, from knowing its binary representation (this post), what precision it is to managing carrying error with long-lived values. Equality checks are just one of the gotchas. It is unreasonable to pick float without question. It should be decimal that's going in without question, with a rationale to use float if that's necessary.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Association (object-oriented programming)**](https://en.wikipedia.org/wiki/Association%20%28object-oriented%20programming%29): [](#sfw) --- &gt; &gt;In [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming), __association__ defines a relationship between classes of objects that allows one object instance to cause another to perform an action on its behalf. This relationship is [structural](https://en.wikipedia.org/wiki/Unified_Modeling_Language#Structure_diagrams), because it specifies that objects of one kind are connected to objects of another and does not represent [behaviour](https://en.wikipedia.org/wiki/Unified_Modeling_Language#Behavior_diagrams). &gt;In generic terms, the [causation](https://en.wikipedia.org/wiki/Causality) is usually called "sending a [message](https://en.wikipedia.org/wiki/Message)", "invoking a [method](https://en.wikipedia.org/wiki/Method_(computer_science\))" or "calling a [member function](https://en.wikipedia.org/wiki/Member_function)" to the controlled object. Concrete implementation usually requires the requesting object to invoke a *method* or *member function* using a reference or pointer to the memory location of the controlled object. &gt;The objects that are related via the association are considered to act in a [role](https://en.wikipedia.org/wiki/Role_(computer_science\)) with respect to the association, if object's current state in the active situation allows the other associated objects to use the object in the manner specified by the role. A role can be used to distinguish two objects of the same class when describing its use in the context of the association. A role describes the *public* aspects of an object with respect to an association. &gt; --- ^Interesting: [^Object ^\(computer ^science)](https://en.wikipedia.org/wiki/Object_\(computer_science\)) ^| [^COBOL](https://en.wikipedia.org/wiki/COBOL) ^| [^Class ^\(computer ^programming)](https://en.wikipedia.org/wiki/Class_\(computer_programming\)) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ck9xbpg) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ck9xbpg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
What about input through Javascript that is also used for some arithmetic on the front end. In the case of financial operations, is it safe to multiply by 100 and use that for addition and subtraction? I'm not sure if multiplication and division have similar caveats. 
The only way I know of to persist anything in python, is via Pickleing. This, though, only persists data, not necessarily code. One hack is to store some code as a string into a variable, and pickle said variable. This code can then be executed. This, though, opens your application/program wide for injections and other malicious attacks. I would not suggest it.
I was researching floating point math the other day and I stumbled onto this awesome site which uses a java applet to show floating point operations. It's fun to play with (scroll down past "validate") adding two numbers together. and yes, it confirms that 0x40400000 = 3.0 exactly. http://users-tima.imag.fr/cis/guyot/Cours/Oparithm/english/Flottan.htm
I think the _right_ way to do this is to make it such that your application/service doesn't have state. Also, it _must_ be transactional so that when you kill it in the middle of the transaction then it won't `commit`. 
&gt;Huh? $2 * $2 = $²4. We represent $1 as 100, so we get 200 * 200 = 40000 which we need to divide by 100 to get the right result. Hmm... $2 * $2 =$²4. So, 200 * 200 =40000. Now, convert to $: 40000 / 100=$400. You really do need to divide by 100² or 10000 to get the correct result.
`result[randrange(len(result))]` — should be `random.choice(result)` (and you should probably check whether the result is empty). It sure is fun!
Use decimal
Actually, I don't think we need to divide at all, because that way we can represent $0.01 * $0.01 = $²0.0001 as an integer (as `1 * 1 = 1`). Of course, then we need to remember the unit used so we're better off using a unit system like [url=https://pypi.python.org/pypi/units/0.04]units[/url]. Anyway, like I said before I don't think there is ever any reason to multiply money with money. Because that's insane.
In Python it is. I have never seen the pattern used in actual code (I'll be happy to be proven wrong.) The parent example is too simplistic (probably because it's just to demonstrate passing around objects with `self`.) The example you gave is incredibly convoluted. It can easily be rewritten to be much simpler without passing around the object in that manner. Again, I'd like to see examples of how this pattern can help improve real code. Not looking for an argument here, I genuinely find it ugly and would be happy to be proven wrong.
You don't have to divide until you want to express in another unit. If you use DOHlars where $1 = DOH100, then $0.01 * $0.01 = $²0.0001 and DOH1 * DOH1 = DOH²1. But what what all the past posts have been telling you, and I'm not sure you understand (whether or not it makes sense to multiply $ by $), to convert from DOH to $, you divide by 100. To convert from DOH² to $² you have to divide by 100². It's trivial unit analysis: $1 = DOH100 DOH² / DOH100 = DOH-$, DOH-$ / DOH100 = $² 
Like a web app.
This is sort of possible, but it depends a lot on what your process is doing, what about sockets, connections to databases, etc. How do you persist state in those? I think this is an instance of the [xy problem](http://mywiki.wooledge.org/XyProblem), why don't you tell us exactly what you're trying to do.
Huh? When was there racism? I have plenty of friends who hail from the subcontinent and are fantastic developers. But none of them work for outsourcing firms.
Showing a random comment for a random porn video.
I am from India and I work in IT, so I guess I am qualified to answer. In India, top IT firms do not require programmers or coders. Its always more of tech support kinda work, without real coding. The top IT firms are Infosys, Wipro, TCS, CTS etc. None of this IT firms do coding most of the time they provide tech support kinda work. These are service based companies, not product. Thats why these organizations mostly stuck up with either Java or .NET. In such organizations, only 8-10% people do actual coding, creating products. These people actually use many interesting technologies. These guys are usually have good programming knowledge. India has approx 3500 engineering schools. Among those, only 20 are really good. And say some next 80 do okay. Rest all colleges suck donkey balls. I belonged to one such college. We are not taught Python or JS, because companies don't care and don't hire us. So, thats the reason why majority of Indian engineers suck. And in India, its very easy to get a college degree without actual hardwork (thats entirely another topic) In interviews, we are asked to write how to swap two numbers, how to write binary search, how to write bubble sort etc. Thats all. The questions always will be either related to basic sorting or searching algorithms. So interviewers don't care at all how good you are as a programmer. So, students never care to study them too. tldr; companies don't want python programmers cos they mostly work on ancient mainframes involving COBOL, Java or .NET, thus students never worry about learning anything other Java or .NET. and we suck at that also.
[Google is your friend](https://encrypted.google.com/search?hl=en&amp;q=IDLE%20python%20version)
Their love focus is the corporate stuff: Java, .Net
----Why are you doing this dear? Yourfather is very worried about you and we want you to come home. We love you but this is appalling---- 
Best one I've seen so far: &gt; can anyone tell me the name of the songs?\^\^ What are you there for, buddy?
Awesome job. Just a word of advice for the future when you're writing more than 8 lines. Regex matching on html is the path of pain. I'd recommend using a library that properly parses html/xml trees such as BeautifulSoup. 
FYI, urlopen doesn't return a socket, it returns a file-like object. I usually just call it "f" if there is no need for a more descriptive name.
Yup... My first run was Traceback (most recent call last): File "C:\aaa\test.py", line 14, in &lt;module&gt; print "----" + result[randrange(len(result))] + "----" File "C:\Python27\lib\random.py", line 192, in randrange raise ValueError, "empty range for randrange()" ValueError: empty range for randrange() 
Don't give it a thought, dude. There will always be creepy guys who don't get "snark" - though a response which sounds dangerously like a threat is a new one to me. 
Apologies. Not everyone gets a choice as to where they work. I've heard so many attacks on me as an Indian developer who has been employed as an outsourcer that I can get defensive.
Main reason : http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
Also- the fedora version is really old. I'd look for the jurko port. 
Can I parse *that answer* with regex?
mysteriously, this ended up in a colleague's .profile. thanks!
i don't think so. there's this other thing that used to exist, i don't know if it's been deprecated or not. https://developer.intuit.com/docs/95_legacy/qbd_v2/qbd_v2_reference/0400_data_synchronization so when you turn that on, quickbooks will periodically sync the local data with a cloud store. Which it will then expose as rest services. 4 years ago, there were wrappers in many languages for those rest apis. what are you trying to do btw?
3.4 cannot be represented as a binary float, no matter how many bits you use, just like 1/3 cannot be represented as a decimal float, no matter how many digits you use. So, if you need decimal fractions to be precise you should use decimal floating-point, or store cents instead of dollars, or use fixed point. But, in many domains the inability to represent 3.4 exactly is not an actual problem. Any finite floating-point format will have many numbers that it cannot represent. Understand it, then deal with it. Switching to base-ten floating-point has many disadvantages, including worse performance and greatly increased 'wobble'. See this article (mine) for details: https://randomascii.wordpress.com/2012/03/08/float-precisionfrom-zero-to-100-digits-2/ Without more details about what you are trying to do we can't really comment further.
I've never seen anyone come back after asking about the song in any online video - usually YouTube. I always have this vision of a disembodied soul, drifting across the net. They hear music as they float past the plane of YouTube, and hear themselves utter "wut is the name of that song at th begining?" and then keep floating, never to return for the answer. Nevermind that you can clearly hear runs of words that - if typed into google (with roughly a 1:1 ratio of difficulty with asking the question on YouTube) - would immediately reveal the song's name. They can't even. I imagine that as they drift through other planes of the internet they might say things like "Are you my mummy?" or perhaps "Is that the nice lady? What was it before, about being stupid? Don't tell the others. They'll only laugh. I can't see."
I suppose you could store state in a pickled object. Then you could wrap the whole script in a try/finally statement, catching the exception and run some cleanup code to update stored state no?
oh man, this is great. I've spent 40 mins going through these. ----She's awesome! Attitude's a 10!---- ----fantastic good enjoyment for pron watchers----
The requirements at this point are pretty vague. What I'm hoping for at this point is a full-fledged connector that can be used to connect from a remotely hosted web application, and which will give us the most access to customize. I would prefer not rolling my own SDK-driven solution. I'm definitely open to anything, but I was thinking that if I could have a persistent staging/go-between MySQL database I could use that for all changes and reporting. Then I could sync the database periodically with QB to accomplish the input stuff. However, the following is known: - we need to be able to input payroll automatically from a web application (currently building with Django) - we need to be able to have on-demand reporting (whether via staging db connected to QB or with a direct QB report) that will be displayed via JS-driven charts in Django). These would likely be standard reports where only the date range would change. I want the user to be able to select that and run the query accordingly. 
Reminds me of http://pornhubcommentsonstockphotos.tumblr.com
for something this simple a proper regex would be about 1000x faster. Sure you might say it doesn't matter, but if he wanted to do this on 10 processes or 100 threads or 1000 green threads, it would use much less cpu with a regex. I think we can agree that parsing the whole dom for such a simple example is overkill.
Am I the only one with the idea that using a "python2" encoding and incoperate lib2to3 to magically transform a python2 code to be used in Python3?
I actually don't agree, sorry. 1) People are sharing code snippets, it's a very short distance from "I saw this working last week on reddit" to "let me try it on my project" and then an improper habit is learned. When you see a potential problem or are showing example code, I think it's 100% appropriate to highlight that this may not be the right approach for others to use or learn from. In the same way, if I saw someone string concatenating a SQL statement, even if it didn't involve user input, I would call out to swap to a prepared statement. It's important to highlight good habits. 2) After spending 100ms on a network call I'm not going I'm not going to quibble over differences that amount to &gt;1ms, it's a sort of micro-optimization few people actually need. I'd argue a lot more people need to reaffirm that regex is a poor approach to handling html than need to micro optimize. If anything I'm more sympathetic to arguments about the amount of pressure it puts on the GC (depending on the library and the complexity of the page, I've seen some dom representations create several thousand strings). If that amount of speed is actually needed, I'd politely suggest that python is not the strongest choice for super high performance in languages. 3) I actually disagree on the "1000x faster" claim, but as I didn't make the claim (you did), I'd be interested if you tested both and posted the performance difference ;)
Hillarious! And it works in qpython for android!
CTHULHU MEET ZALGO, NOW FIGHT! ^(or kiss, that works too)
I'm going to do this later. The only addition is making sure the random comment is &lt; 140 characters, but it should be no problem.
----Give me your big hard cock Rocco, please. Grrrrrrrrrr---- 
IDLE is a tk graphics toolkit wrapper for a Python application that runs other Python code. Each IDLE instance is built for only one version of Python, and you would have to call the IDLE instance included in your install folder of Python 3.4.1 (assuming you installed that version of Python).
!! Lolll !! Would be even more funny if it printed the comments from a livecam session in real time
Do you have any concrete suggestions? You are also welcome to prototype some, I'll help you with understanding the Bubbles internals. (author here)
Thank you. Bubbles is still a prototype and the next iteration will have a slightly different approach. mETL is a nice Python ETL framework. The main difference is that mETL is streaming the data and the operations work on a row/record level. In mETL you need to fetch the data to apply the operation in-Python. Where in Bubbles the operation is executed in the source system if it is possible. For example "keep all records from year 2014" will be executed depending on the input. If the input is SQL statement, then `WHERE year = 2014` will be composed, if the input is an iterator (or any unknown object that has no such operation implemented) then Python iterator filter will be appled and data will be streamed.
That's very smooth. I hacked together: from random import randrange import re import urllib.request socket = urllib.request.urlopen("http://www.youporn.com/random/video/") htmlSource = socket.read() htmlSource = htmlSource.decode('utf8') socket.close() result = re.findall('&lt;p class="message"&gt;((?:.|\\n)*?)&lt;/p&gt;', htmlSource) print("----" + result[randrange(len(result))] + "----") 
I highly recommend lxml over BeautifulSoup.
Its more of personal thing. For example, if you can create programs that are good in your field then you are proficient 
&gt; 3) I actually disagree on the "1000x faster" claim, but as I didn't make the claim (you did), I'd be interested if you tested both and posted the performance difference ;) My tests show 300x-400x in this simple case: In [24]: %timeit re.findall('&lt;p class="message"&gt;((?:.|\\n)*?)&lt;/p&gt;', html) 10000 loops, best of 3: 130 us per loop In [25]: %timeit [node.text for node in bs4.BeautifulSoup(html).findAll('p', attrs={'class': 'message'})] 10 loops, best of 3: 46.3 ms per loop Of course you'll do better if you have multiple queries on the same soup. Still, 40+ms is pretty terrible. Edit: lxml does much better: In [73]: %timeit [n.text for n in lxml.etree.HTML(html).xpath('//p[@class="message"]')] 100 loops, best of 3: 3.42 ms per loop
----Good fucking! I love her hairy bush. She can only take half of the long mastercock. That man has to be carefull with the vaginas he meet. Girls love mastercocks!---- hahahahahaha 
&gt; People are sharing code snippets, it's a very short distance from "I saw this working last week on reddit" to "let me try it on my project" and then an improper habit is learned. These people are not professionals and should be not hired or immediately fired. If you can't apply different practices/techniques based on different needs/requirements, you are really bad. 
+1 for running the test, that's a lot more than I would have expected.
I'm trying to learn regex and could someone please explain what this line actually does? &lt;p class="message"&gt;((?:.|\\n)*?)
Care to explain what exactly you want to mean by proficient? Cause this could be a very long debate
----there's room for two in that hole---- Fucking laughed hard at this.
There is way too broad of a question. It's like asking when darkness turns to light in the morning.
Because you are not actually closing your socket, and putting multiple imports on one line makes Guido cry. 
I hate this question. It's everywhere. Why?
----That bagel was asking for it!---- oh god...
See the other reply to my comment. There are many stupid and/or lazy people on the internet.
If the job you're applying for asks for it.
Won't the OS close the socket when the process exits?
So I wrote a script to post these to twitter after seeing /u/delicious_dioxin suggest it. Here's the twitter: [@PornCumments](https://twitter.com/PornCumments). [Here's the gist.](https://gist.github.com/OstrichProjects/cff4de65e02f9bca43ea) Does anyone have any suggestions on where I can run this every hour (I only have my laptop at school and don't feel like leaving it on 24/7)? If not, it should be tweeting on the hour every hour in the next couple of days/whenever my friend responds to my facebook message. Edit: My friend reminded me that I have a raspberryPi sitting in my desk not being used so I guess I'll use that instead.
Noobie python dev here and I have a question: You are saying he didnt close the socket, but, in fact he did using the "with" block. Am I right?
Yeah but wouldn't .urlopen have an \_\_exit\_\_that would close the socket anyway? And about the imports, I know it doesn't comply with PEP8 but aren't we trying to do the lest amount of lines?
In practice you are considered proficient when you can get away with claiming that for yourself. That in turn depends on whomever you make the claim to, so there is no good answer to that question.
Just make sure you properly handle all possible exceptions so it remains stable.
I don't know of any trivial or generic solution to persist all application state (like "all execution state"). Usually you will have to identify the statefull parts of your application and then persist and resume them manually (for example in a database...). It also helps to design your app in a way that tries to minimize dependency on state...
Sure you can do this with Bottle or Flask, but I'd say the one page-ness of your site is more determined by your front end technologies like jQuery or Angular.
My coworker just pasted this link in our IRC channel. We have a bot. I implemented a function that runs this every time you type '.sexy' and spits the output into the channel. Here's hoping I still have a job on Monday. I also added santization, so there's that. Some examples: 17:11 &lt;xenu&gt; roflson: Heidi Klum looking chick with nice body, ****, and feet **** gives black male actor oral pleasure then rides his **** hard. Couple have ****ual intercourse in the **** then **** ****. 17:21 &lt;xenu&gt; roflson: pantyhose is a king of the **** i love it... You guys get the idea.
Hahah very fun! For my BeautifulSoup friends getting socket errors: from bs4 import BeautifulSoup import urllib, random page = BeautifulSoup(urllib.urlopen('http://www.youporn.com/random/video/')) comments = page.findAll('p','message') print random.choice(comments).text raw_input()
When the "with" block ends it does not call a close() method. It calls an __exit__() method. And the urlopen object does not have an __exit__() method. Wrapping it with closing() as in my example adds an __exit__() method that calls close(), making it close at te end of the "with" block. 
But why do we ACCEPT this insanity? Why haven't we pushed for a much better standard than IEEE 754 decades ago? Why haven't Intel's foundries been burned to the ground in protest? Why haven't programmers of the world gone on strike for hardware decimal support???
It's an error of an inherently flawed representation. Documenting it doesn't make it not an error. 1 / 3 * 3 IS precisely 1.0. IEEE 754 just can't represent it. It's broken and no one ever pushed for anything better and now we have fast, crappy floating point hardware as standard. "Here's the wrong answers, really fast!"
NOT all programmers will face this problem. There's a language called Cobra, which aims to be a mix of the best ideas from several languages, with a lot of that coming from Python. The author of Cobra realizes that IEEE 754 violates the principal of least astonishment, so the decimal type is the default floating point type in the language! For some reason Guido has been convinced of the need for type annotations with MyPy, but he has been unconvinced so far to make the Decimal type our default the way arbitrary precision integer is our default (actually only, outside of arrays) integer type. Maybe we need a new push for this... when does anyone ever NOT want an accurate value?
&gt; Decimals are not dangerous. They do exactly what you would expect from decimal calculations. Decimals are slow. Python isn't the fastest language under the sun, but floats still blow decimals out of the water in pure performance.
At least in Germany I only get the age verification page. The script now sets the corresponding cookie variable first and also takes into account videos without any comments: from random import randrange import re import urllib import urllib2 import random comments = [] def get_comments(): opener = urllib2.build_opener() opener.addheaders.append(('Cookie', 'age_verified=1')) f = opener.open("http://www.youporn.com/random/video/") htmlSource = f.read() f.close() return re.findall('&lt;p class="message"&gt;((?:.|\\n)*?)&lt;/p&gt;', htmlSource) while len(comments) == 0: comments = get_comments() print random.choice(comments)
You forgot to mention how they don't care what your specialization was in engineering school; they'll hire you as long as you have a BTech. My friend studied biotech and was offered a job at TCS. The guy hadn't even read a single line of maths since 10th grade and could barely install a fresh copy of Windows. 
Was gonna post this. I check it every once in a while for a good laugh.
I love it, good job ! Hahaha !
The sidebar is pretty Python-specific. It sounds like you're having issues with general OOP concepts, and I'd suggest expanding your search to general CS books that introduce object-oriented programming. There, I suspect, authors may have put more thought into how they introduce OOP. For the syntax and mechanics of how Python does it, the sidebar should cover it.
*----FRED LOVES BIG TITTIES!!! WOO HOO!!!! Wilma is needing some new boobs...----* Cmon Wilma, get it together.
I expect many laughs to come from following this
this seems to be the best solution since: * it uses random.choice * it bypasses the age verification * it will always output a comment also here's a slightly modified version for python 3 from random import randrange import re import urllib.request import random comments = [] def get_comments(): opener = urllib.request.build_opener() opener.addheaders.append(('Cookie', 'age_verified=1')) f = opener.open("http://www.youporn.com/random/video/") htmlSource = f.read() f.close() return re.findall('&lt;p class="message"&gt;((?:.|\\n)*?)&lt;/p&gt;', htmlSource.decode("utf-8")) while len(comments) == 0: comments = get_comments() print("----" + random.choice(comments) + "----") update1 (this should be slightly better/faster since it keeps the socket open till it finds a comment): from random import randrange import re import urllib.request import random comments = [] def get_comments(): global comments opener = urllib.request.build_opener() opener.addheaders.append(('Cookie', 'age_verified=1')) while len(comments) == 0: f = opener.open("http://www.youporn.com/random/video/") htmlSource = f.read() comments = re.findall('&lt;p class="message"&gt;((?:.|\\n)*?)&lt;/p&gt;', htmlSource.decode("utf-8")) f.close() return comments get_comments() print("----" + random.choice(comments) + "----") update2 (returned to a function-less version, 13 lines): from random import randrange import re import urllib.request import random comments = [] opener = urllib.request.build_opener() opener.addheaders.append(('Cookie', 'age_verified=1')) while len(comments) == 0: f = opener.open("http://www.youporn.com/random/video/") htmlSource = f.read() comments = re.findall('&lt;p class="message"&gt;((?:.|\\n)*?)&lt;/p&gt;', htmlSource.decode("utf-8")) f.close() print("----" + random.choice(comments) + "----")
Thanks. I feel like an idiot when working with OOP concepts. Is it just me or is OOP actually difficult to understand?
This will go far over your head, but for anyone else reading: there are 2 better ways to write this regex. Either ([.\n]*?) or (.*?) # with re.DOTALL passed to your re function
 try: do_stuff() except: do_stuff() Done. Please don't do this.
Two lines saved, not including the virtualenv setup and requirements.txt. Doesn't seem worth it.
Yes, these porn comments are not production-ready
It's pretty similar to [zest.releaser](https://pypi.python.org/pypi/zest.releaser), which is what I use to release packages to a private repo. Automating that stuff is good, especially when training new devs and you don't have to go into a whole python packaging tutorial and can just tell them, "run ./bin/fullrelease and follow the prompts".
Just wondering (not trying to sound condescending) but do you understand that all OOP is is a way of organizing information? It doesn't add any additional functionality.
---anal is overrated---
That's awesome, thanks. For some reason I hadn't found that while searching.
Why? Decimal can represent some numbers better, but it is worse in other ways. Without more information about the actual problem it's impossible to tell whether decimal would make things actually better or just look better.
Remember to escape your text before asking the shell to parse and **execute** it...
that's why `trueValue` and `falseValue` are wrapped in lists - the list is not empty despite what the value happens to be (even None). Good eye though. *edit* well this is half remembered; and i've just gotten used to putting up with python's odd "ternary"; let me check that.... *edit edit* beltorak @ kryos [~] $ python3 Python 3.4.0 (default, Apr 11 2014, 13:05:11) [GCC 4.8.2] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; 1 and 0 or 1 1 &gt;&gt;&gt; (1 and [0] or [1])[0] 0 &gt;&gt;&gt; 
I'm interested in a GUI for quickly inspecting and editing nested JSON structures, and for a moment I thought that's what this was. I wouldn't worry about using `isinstance()` here. JSON has a specific set of known types, and I think it's appropriate to distinguish them using isinstance. The interface checking is mainly for things like "a readable file like object", where the method can practically accept anything that implements the necessary methods.
what makes you proficient will mostly have to do with your ability to solve problems at the algorithm level, and not at the python implementation level. once you've got the problem-solving skills down, what makes you proficient at python will be mainly how well you know existing libraries (those in the standard library, and the popular ones in your field). once you know the libraries and how to use them, its just a matter of writing elegant, testable, readable code.
Reason being that Indian tech companies are not tech companies, they are tech support companies. I work with managers who can't tell a difference between a Python or Java code, let alone how it works. India tech companies just want someone to read a document, read an already existing code base, get the defect and resolve it, and in that too they rely on customer to tell the exact solution or at least a ball park solution. Most of the Engg i hire for my company are hired coz we need mule workers who can just bow their head, read the document and proceed as asked. We do get some brilliant engineers but they either go for GMAT /CAT and leave or just become MULES.
It's funny you should say that because I came close to building a pop-up web version where I could browse, fill-in templates and issue new requests. 
That's when a video has no comments.
&gt; May be a dumb question 
Good ol' little bobby (oblig http://xkcd.com/327/)
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=327#Explanation) **Stats:** This comic has been referenced 324 times, representing 0.9955% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ckae9wh)
Any parallelism, implicit or explicit? 
I just integrated this into my irc bot. Thank you for this.
If anyone wants to know, I've seen people use [\S\s] for the same thing without using flags to modify dot to match everything. \s means whitespace, and \S means not whitespace. So it looks a bit nicer with: &lt;p class="message"&gt;([\S\s]*?)
I changed it a bit to work with reddit comments. I probably did it horribly but it works #!/bin/python from random import randrange import re import urllib import string import random comments = [] CHARS = string.lowercase + string.digits def clean_html(raw_html): cleanr1 =re.compile('&lt;.*?&gt;') cleanr2 =re.compile('&amp;.*?;') cleantext = re.sub(cleanr1,'', raw_html) cleantext = re.sub(cleanr2,'', cleantext) return cleantext def rand_string(string_length): return '1'+''.join([random.choice(CHARS) for x in range(string_length-1)]) def get_comments(): rand = rand_string(6) socket = urllib.urlopen("http://reddit.com/comments/" + rand) htmlSource = socket.read() socket.close() comment = re.findall('&lt;div class="md"&gt;&lt;p&gt;((?:.|\\n)*?)&lt;/div&gt;', htmlSource) if(comment is not '[]'): return comment while len(comments) == 0: comments = get_comments() print(clean_html(comments[randrange(len(comments))]))
Get a free EC2 instance and run it there.
graphlab, pandas csv files not excel but converting is easy
I did that and still get 2.5.4. That's my problem.
Ooops, just say the thing about /r/learnreddit, sorry for bothering you folks, I will post this there!
On an outdated Ubuntu 12.04 system with Python 2.7.3 and NumPy 1.6.1, different outcome: 10000: 0.0513451099396 0.0200769901276 100000: 0.654278993607 0.224766969681 1000000: 6.2372648716 2.82088780403 10000000: 27.1327559948 25.3607211113 I see your results a little with NumPy 1.8.2: 10000: 0.0290150642395 0.0206480026245 100000: 0.37825012207 0.224531888962 1000000: 4.16156506538 2.83178591728 10000000: 25.3689110279 26.173885107 But numpy.unique does not preserve order.
Just [quickly double-checked](http://sebastianraschka.com/Articles/2014_python_lda.html#scikit-learn-update), the LDA finally works as intended now.
Or this: https://www.youtube.com/watch?v=i2GY_Q5GetU&amp;feature=youtube_gdata_player
In Python 3.x, ``print`` is a function, not a keyword. So you'd have to write: ``` print("something") ``` ...rather than... ``` print "something" ```
My first python website was randomyoutubecomment.com Same idea, although slightly less awful.
App Engine
What if you do it this way? ``` list(set(seq)) ``` ...assuming order is not relevant. EDIT: Sorry, read your comments, you're trying to preserve order.
Would all of the imports and etc work properly? Sorry, i never even knew I could run python on my android. Thought android could only really do java haha
Thank you so much, do I have to do this with everything or do the parentheses only need to be applied for the print function?
Raspberry Pi &gt;crontab -e 0 * * * * /path/to/script 
I have a linode vps that I have stuff run on, i think for 10 bucks a month. But you can do something simple with a Raspberry Pi as well. When you want to run the script you could do: nohup python script.py &amp; and that will run the script in the background and won't kill when you logoff or edit the terminal. 
If you've used C, you might think of objects as structs with functions attached. (Obviously this is a gross simplification, but it might help you to understand it) Realistically, an object is just a way to represent something which has state. Instead of writing a bunch of functions, and passing all intermediate values between those functions, you can write an object which stores intermediate values. It's the difference between writing code like this: def bark(name_of_dog): print "%s goes woof!" % name_of_dog # bark three times bark("Fido") bark("Fido") bark("Fido") And this: # a class is a blueprint for a thing class Dog(object): def __init__(self, name): self.name = name def bark(self): print "%s goes woof!" % self.name # an object is once specific instance of that blueprint dog = Dog(name="Fido") # here's a second dog dog2 = Dog(name="Mary") # bark a couple of times dog.bark() dog.bark() dog2.bark() In the first case, any time your dog barks, you need to supply your ``bark`` function the name of the dog. Architecturally, you can imagine situations where the programmer would accidentally misspell the dog's name, causing bugs. Then the question arises: "What if I have a dog which barks in a different way?" In the first case, you'd have to write a new function ``bark_louder`` (or whatever) to create this functionality. In the second case, the dog intrinsically has a name which is remembered forever. You can ``dog.bark()`` as many times as you want without having to pass the dog's name. You can also create multiple dogs, each of which are independent entities. Additionally, you can create a new type of dog which barks louder by "subclassing" ``Dog``. For example, you could write: class BigDog(Dog): # read as "BigDog" inherits all of the methods from "Dog" def bark(self): # ... except this one, which we're changing print "WOOF!" Here, ``BigDog`` "inherits" everything from ``Dog``, except it overrides the ``bark`` method. This is the benefit of inheritance in OOP, you can re-use code. But notice: The OOP method is actually more verbose in this particular case (and in a lot of cases, actually). But the benefit is that you get a nice, clean interface that's easy to extend and re-use. In other words: for most programmers, OOP is just a question of code architecture and design. It's not fundamentally better or worse, it doesn't provide any special functionality -- it's just a different methodology for writing software. The hypothesis is that it provides for code that has less bugs, is easier to maintain, and is more extensible -- which is why it's popular. But again, this is not really a universal truth at all -- there's a lot of bad OO code, just like there's a lot of bad procedural code. 
Probably depends on what you install. Android is Linux at the end of the day, so as long as what you install is compatible with the ABI on your phone, you're good to go. Probably there are apps which you could get that take the hassle out of it for you. I don't have any personal experience with it though, so YMMV
I think this has more to do with an understanding of the ecosystem. For example, if you can answer questions like "Is something like this in the stdlib?" or "What are 3 examples of libraries that implement x?" relatively quickly, I think you're probably pretty proficient.
What do you mean by forced terminations? Do you mean a ``SIGKILL``?
Hi, you can click "reply" on a comment so that the person gets notified that you responded to them. No, you can't do this with everything. I would just look up whatever you're doing in the Python documentation, which is pretty good. For example, here's the documentation for ``print``: https://docs.python.org/3/library/functions.html#print And there are examples here: https://docs.python.org/3/tutorial/inputoutput.html
Boot into single user mode. This gives you instant root and then change your password. http://playwithmyled.com/2012/10/change-raspberry-pi-lost-password/
Thank you so much again! ^-^!
Nothing is going to save you. OP was computing logs, and in general, answers are transcendental. rational number systems, scaled bigints, BCD floats, quad precision floats are of no help. What representation won't suffer these problems for some types of calculations? No, the problem isn't the representation; the problem is in expecting exactness when it isn't warranted.
if you already have windows and office, you can do Excel over COM using pywin32, there are easy to find tutorials for it
Is there a reason why not? Sorry if it seems obvious but that doesn't seem like bad exception handling to me (unless you mean catch specific errors rather than any error in which case I get it)
The same code is running in the try and except blocks.
*facepalm* yep, that would make sense. I thought you meant, run other code in the exception which seemed to make perfect sense to me. sorry 'bout that.
[This](http://pastebin.com/GQ54emRf) is my spin on the code. It attributes the comments to random famous people. 
----the 1 with the pony tail had a sweet bush !----
I personally, in a very similar situation, didn't use a framework at all, but built a website just using Python &amp; WSGI. If you don't want to do that I really enjoyed flask. (Super personal opinion though)
True that, didn't think much
I've only tried django, it's reasonably easy to pick up and use. I use it for all personal projects. Sorry I can't help any more than that. Good luck!
Thanks for the answer. Django certainly seems like the most popular option, but I can't help but feeling overwhelmed when I tried.
I'll look into this. Thank you very much!
Nothing explicit yet. However, the "execution engine" is meant to be an object with potential custom implementations, therefore you would not be stuck with the built-in way of execution of the pipeline.
Nice. I have this hooked up to crontab and espeak now. No regrets.
Flask
Yes
Ya, i think i know how to go about it now. I'll have to figure out how to impl. that clean up code. 
Have you tried running "which idle"(on linux) or "where idle"(on windows) to make sure you're running the correct version?
This is the best and only answer. It's like having a pint-sized server to do your botting for you.
If you have to maintain order, then `numpy.unique` is not a viable solution: &gt;&gt;&gt; numpy_unique(['quux', 'foo', 'bar', 'foo', 'quux']) array(['bar', 'foo', 'quux'], dtype='|S4') If order doesn't actually matter, then just use `set(seq)`. 
[Do this instead.](https://pypi.python.org/pypi/fuckit) &gt; FuckIt.py uses state-of-the-art technology to make sure your Python code runs whether it has any right to or not. Some code has an error? Fuck it. &gt; FuckIt.py uses a combination of dynamic compilation, Abstract Syntax Tree rewriting, live call stack modification, and love to get rid of all those pesky errors that make programming so hard.
&gt; PHP it's a trap! :v Does Python still makes use of GIL to emulate threading (or did the core team managed to fix that!!) 
can't do that since it's to run on server as background process (for multi users)
I haven't done that, but I run a program importing NLTK and get an error saying "with will be a keyword in 2.6" or something to that extent, which tells me enough to know it's not correct.
use requests library
You are quite correct. Indexing python lists is very fast. Faster than indexing numpy arrays by some margin. The performance gains from numpy come when you use its element-wise operations or fancy-indexing. In general, manipulating items in lists is fast but creating many python objects to go in the lists is slow. BTW. It's sligtly hacky but you could try: memo = set() filtered_list = [(item, memo.add(item))[0] for item in input_list if item not in memo] 
So,i just passing the current instance to 'self'?Thank you
Thanks for the example :D
Thank you for this -- I've used your cleaned up version in a small herokuapp I just wrote :) http://porncumments.herokuapp.com/
To let you know, I've used your brilliant name to make a small webapp: http://porncumments.herokuapp.com/
It may be overhauling but Django is the best option IMHO. First of all you get very good model base out of the box. On top of that with the newest version you get database migrations. And with Django REST Framework making API is just brilliant. Use Angular JS to create frontend of your website and Django &amp; DRF for the backend.
Pipe this to espeak for fun
Give this man a beer!
How so? The only thing I can find on this github account are forked repositories with no contributions from the OP (there is one original repo with some Java in it, but the only commits are again from someone else). And this hash cracker is not really a complex program. Now I don't want to say that the OP is _not_ proficient, but based on the Github profiles and this Gist, I couldn't make a statement either way.
I'm really sorry to abuse your code... and anyone who's image I'm abusing I took what you did, added a random flickr image getter, and well, this happend: http://imgur.com/a/45Kwo (The only curation I did was remove non-english comments and comments that were too long. I then threw away most the comments that add nothing like "Hot!" etc). This album will self-destruct in 24 hours. 
This might be a good case for [sets](https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset). pantry = set(['butter', 'flour', 'baking powder', 'chocolate chips']) recipe = set(['flour', 'baking powder', 'butter', 'egg', 'sugar', 'chocolate chips']) ingredients_needed = recipe - pantry if ingredients_needed: print "You need:" for ingredient in ingredients_needed: print ingredient else: print "You have all the ingredients!" 
&gt; would love to go on knees for mouthful of cum With this gif: http://i.imgur.com/MGKPXJL.gif Perfect.
At least I made mine vaguely sane....:- for i in range(20): try: do_work() except: pass Thats actual the worker part that drives this:- http://www.reddit.com/r/Python/comments/2fk5se/the_most_fun_eight_lines_ive_written/ckao2fg I'll call my throwaway routines `do_stuff` from now on. 
Google app engine. 
Yeah, why do you think people here will want to do your homework for you?
Hey spartan117au, Here are a few things that will help you solve this problem. Make sure to take a look at the examples listed in the documentation and to try them out yourself. - To take input from the user https://docs.python.org/3.4/library/functions.html#input - To split the input from the user given a specific delimitter string. For example, a comma https://docs.python.org/3.4/library/stdtypes.html#str.split - List comprehensions https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions - Stripping leading and trailing spaces from a string https://docs.python.org/3.4/library/stdtypes.html#str.strip 
I think CC-Attribution sounds like what you want. Personally I enjoy MIT because it's highly unrestrictive. And either way, even if you happen to use a license that permits usage without being credited, most people still will, especially if there's an "original source" like github or PyPi to get it from. 
Drink coffee.
I'm currently making a small task manager, it should be finished by tonight, if you want a look at that?
&gt; I'm not arguing that hiring programmers without prior Python experience is a bad. I'm arguing that your statement "should be productive in python within a few days" is an incredible overstatement. I've seen it loads of times at work. I might add that my job is to work on a mature big code base, so it's probably easier to jump in and write/modify idiomatic code though. But still!
Don't be surprised if most of the tutorials are good at telling you what you can do with Django and poor at what you can do to Django. Everyone who studied it in my department found that a bit of a hurdle including myself.
I've been using it for years, I know it very well. I was making a joke at the fact that OP will need to put in some work to get it done in two days.
Said colleauge is not very linux-savvy, so my thought was that if he doesn't notice the random porn-cumments showing up every time he logs in the next step will be to "upgrade" his .profile to do something in the line of "sleep $(get a decent random number of minutes) m sh /tmp/porncumments.sh" and see if he notices anything strange then ;)
This is one I've played with in the past: [xlwings]( http://xlwings.org)
Man, this answer took me way further down the rabbit hole than I had wanted to go. Let's start by saying I still haven't had a cup of coffee, and I'm not terribly in the mood to pull firefox source code to see how they're parsing. Instead I'll say the distinction I'm making is between scanning for the next tag and constructing a tree of tags to represent the data *vs* treating the document like it's text and searching for a text match. Both may use regex at some point, because finding the next lexically significant character (i.e. a close tag '&gt;' or an open tag '&lt;' or others '&lt;!--', etc, etc, etc) may be conveniently expressed with a regex. However the important thing is what you're doing, are you trying to faithfully understand the nested structures, the escaped characters, etc, or just blindly looking for the first '&lt;p.foo&gt;' you find? Or **the worst** something like this '&lt;foo (.*)&gt;' or '&lt;foo&gt;(.*)&lt;/foo&gt;'. This option can work in simple scenarios but long run hurts. Okay distinction made I hope. The answer was more complicated than I had hoped. bs4 source near line 180: http://bazaar.launchpad.net/~leonardr/beautifulsoup/bs4/view/head:/bs4/builder/_htmlparser.py uses a regex to find the starting tag but then what does it do? Calls Python's html.parser library &gt;.&gt; Sweet, what does python's library do? Source in Python-2.7.8/Lib/HTMLParser.py First thing, hey look it's that regex from bs4! Looks like someone copy pasted O.o Keep reading, we see that it's doing the "right thing", it's starting to build tags, then scanning for the next important character one token at a time. Look around line ~160 to see what I mean. Okay, but people keep asking about lxml, what does it do? It looks like it's wrapping libxml2 which is c (c being significantly less fun to read than python). Anyhow source http://fossies.org/dox/libxml2-2.9.1/parser_8c_source.html Near line ~9932 So it's also scanning for the next token and then acting on that to build one tag at a time. So both of these are "doing the right thing". **EDIT** If you followed me on this journey, I'd like to highlight this as why some people hate passing data as XML and prefer something like json. Look at libxml2 man, that parser is more than 15k loc, because that's how complicated XML can be. It's a heavy weight spec that can do a ton, but if you need to pass a few k-v pairs, you probably don't want/need all of that overhead. Anyhow /interview-questions.
Could have read the rss feed or the api instead
No, I definitely changed it.
Really? I guess I've seen it used few times and thought it was. Thanks for the info.
&gt; these people are not professionals My only point was that the bar for being a professional (by the standard definition) isn't as high as most of us would like it to be. Because of this, I do think it is good practice to demarcate quick and dirty from "code I'd put into production." But that wasn't my point. 
I hadn't heard of this. Their documentation seems really extensive and their website is pretty. Thanks for the link.
Except that if result: print random.choice(result) is shorter and to the point.
Oh god, I got &gt;cute ladyboy.......... huge cock and great fuck.................. [with this](http://i.imgur.com/6u2Lk2d.gif). ಠ_ಠ
Haha are you following me ? :) Let's either wait or start our own project [putting them functions together](http://www.reddit.com/r/Python/comments/2flq77/package_that_handle_the_corporate_universal_data/) &gt; The modules xlrd and xlwt reads and writes to Excel 2003 (.xls) format. I do not have much experience using these modules LOL it is the most well-known and I think the *very first* Excel-handling package. (try google "python excel") It does support .xlsx since a couple years back. 
&gt;Ideally I'd like attribution, and **notification of my code being bundled into something else**, or stop people from claiming my code is their code... This is extremely uncommon. If you vanish off the face of the internet, it leaves your code in a legal gray area. In fact, this requirement by itself is sufficiently problematic that the [FSF would not regard such code as free software](http://www.gnu.org/licenses/license-list.html#OpenPublicL). I would recommend dropping this requirement and then going for a 3-clause BSD license, which looks [like this](http://opensource.org/licenses/BSD-3-Clause). You could add a polite *request* that downstream reusers notify you, but it would just be a request, not a legal obligation. I'd recommend clearly separating this request from the license itself, to emphasize its non-binding nature.
Completeness? It's listing out libraries for working with excel. Why not note it for context?
what ? I'm asking if you can provide some insight about xlwings. your reply does not make sense.
turbogears. It is a pythonic framework «en kit», very versatile. http://turbogears.readthedocs.org/en/latest/cookbook/cookbook.html#tg-cookbook The author took very sain defaults, and the doc often show you how it is done, and how to provide your custom piece of framework (in case for instance you need custom authentication). It provide the classical support for handling dev/production versioning, distribution. Docs are extensive. And the code is a pleasure to read. For me it is the most pythonic «heavy weigth» light framework, that will make you understand «how it is done». Heavy for the feature, light for the architecture, the ease of use and the flexibility. Not famous, but serious. 
Flask, Pyramid and Django are all great frameworks with different design decisions. Look into all three and choose the one that resonates with you the most. You can't go wrong with any of the three.
It's not very well mobile optimized. If you can think of what it would look like on a phone, I'm all ears -- I'd love if it looked good everywhere. 
Don't spend time on reddit ...
Bookmarked!
Tornado
I've had success automating Excel using win32com. If you're comfortable with the Excel object model, then it becomes a easy as using VBA, but with the power of Python. For example: http://pythonexcels.com/python-excel-mini-cookbook/
I done a lot of this stuff, and while I prefered xlwt + xlrd where possible, the tool I kept on coming back to was COM. You can access COM from Python, and through COM you can access pretty much anything Microsoft. It does mean you have to use windows, but if you're dealing with craploads of Excel files, chances are you're already stuck on windows. The COM bindings in Python are actually pretty good. There was never a task that I didn't only complete, but achieved things that simply weren't possible in VBA.
Sorry if I come off as rude but I feel like when we use tools like this (excel automation) we exacerbate the problem. I know that if you're going to push excel out this is better than manually doing it, but there are better ways, even for excel. Instead of fixing the process and utilizing proper reporting methods e.g. refreshable charting, exception based reporting, specific reporting tools, etc. we prolong and grow the problem since we're just masking the underlying issue. This is probably a great tool but you're no closer to solving the reporting problem than you were before, you still have excel reports and data dumps which you're responsible for. Also, you've almost certainly made the problem worse because now they see your process as automated with new found capacity, thus more ad hoc requests are made. I'm not against more requests, but you can see how this just deepens the issues. What's the answer? Get tools into the hands of users that let them view and filter the data they need themselves or build reporting that you only build once and it manages itself going forward, even if its in excel. I hope my tone isn't rude, I just know from experience thay this isn't the way. 
OP, as another poster pointed out, it's because you're using a python 3.x interpreter. With that said, either get a Python 3 book/use the official tutorial, or install the python 2.7 interpreter instead.
OP, based on your github you are ready for an internship python job where you are able to learn from someone who is already experienced with decent sized projects. It looks to me like you're able to complete a homework type project, but I don't see any applications on your github of significant size, or any that solve a real problem that people need. It's still evident from your comments, you're in the "exploration" phase. You mentioned "I'm going to make a task manager tonight" -- that's great, and what you're wanting to do is create a task manager -- for the challenge of creating one. This is the learning mentality. Once you gain more experience doing this you will be able to solve business problems. Then you can claim proficiency on your resume. The problem isn't even really related specifically to your Python proficiency. It's just an overall reflection of where you are at as a developer right now. You'll level up soon. 
No additional functionality ? That's funny. Maybe you have missed some "features" of OOP. 
Well, it's craigslist. I'm quite sure native germans don't use it, so it's not very representative.
Sure, but Java-fied Python code really just kills the soul.
Well, as far as I know the DLR (german NASA) uses it to some extent [0]. I also would suggest visiting the Python meetup [1], some of those guys and gals just organized this years amazing EuroPython and have probably a lot more insight into the job world here. Since Berlin has a startup scene (at least to some degree), you'll probably have no problems finding some shops who use Python. And the employment situation for students is not that bad. If you'll consider doing something else (system administrators are in somewhat of a demand at universities), I'm sure you'll find something fast. [0] http://www.dlr.de/sc/desktopdefault.aspx/tabid-1186/1640_read-28124/ [1] http://www.meetup.com/Python-Users-Berlin-PUB/
Craigslist isn't used much in Europe.
It all boils down to one important thing: do you speak German? If not, startups may be most open to English speakers. Try: http://berlinstartupjobs.com/?s=python&amp;lang=en
I'm the VP of Engineering for a hardware startup in Berlin. We use Python (flask, twisted) for our backend. Feel free to pm me your CV. *edit: Of course, anyone is free to send me their CV. If you don't happen to be a good match for us, I am well connected with other startups (hard and soft) and we pass qualified candidates around.
I don't get why you want to work with Python specifically. I mean, it's a pretty good language but the programming language a company uses doesn't seem like a very significant thing to consider when picking a place to work.
PyCharm hands down. 
Emacs with Jedi
Now this looks good.
vim
Why not get Unix Epoch and convert it to right TZ?
Every tool has strong and weak points and usually people choose depending what they want from tools. Personally i tried vim,sublime,pycharm. i use sublime and sometimes pycharm (when i have to do lot of re-factoring pycharm is handy especially on big projects). But i started with pycharm (coming from java). I don't regret switching to sublime but it was a great experience starting with pycharm. It works out of the box with no setup, good static analysis and ctrl+click / auto complete is quite good. I believe the last thing you want to do when you start a new language is to spend a lot of time learning other tools because you want to focus on the language it self. So i would recommend to code 1 month on free pycharm so you dont waste time setting up sublime/vim and afterwards give both sublime and vim a try and you can choose. Of course you have other choices eg emacs pydev etc. But you will never get a straight answer. Different people like different tools. Also something i really like on sublime with 10 keys i can open a file in github. much faster than moving my hand to the mouse finding a browser etc.
Also i believe sublime is better at linting because it considers unused variables and imports as erros and it doesn't ignore pep8 line too long.
Wow. Thanks man. Can i just ask how you learnt python?
You're only working with it most of the day. There are of course important other things to consider, but it's not as easy to select on them. Easier to find the Python companies and then look for your other requirements than the other way around.
Thanks man. I think i will stick to the interactive course i am doing now. Hopefully i will then learn how to do it independently.
Komodo Edit is pretty good.
you are welcome keep in mind this is my own experience. i know people who started with vim and still use/love vim and i respect them. most important is to respect what other people use if they believe it makes them more productive
you could use elpy-mode (with jedi or rope), that is actually pretty good and simplifies the setup.
You are best advised to stick with a good text editor, VIM, which requires some learning as well.. I went around the group, Eclipse, and several others and on going to Pycon realized "most" of the better programmers there stuck with a basic editor. The IDE's introduce too much cruft and become a hindrance rather than a help. And no I don't mean notepad or wordpad, nor notepad+. Suck it up and learn VIM and Python together and you will be rewarded.
100% agree it can take more on big projects ;)
If you go to Inspections-&gt;Python-&gt;PEP 8 coding style violation you can set it to be any colour or level of alert that you want, including making it an error so you can't run your code until it's fixed. Pycharm also has the functionality to automatically go through your code and make it PEP8 compliant (Code-&gt;Reformat Code or Ctrl+Alt+L).
I may be wrong i coudlnt get a great linting in pycharm. It maybe because it has too many staff and i get lost. Let me know if i'm wrong but heres my experience: i did set pep8 to be same with error (red). it grays out unused imports and i think it ignores line too long, Also unused variables i think are kind of grayed out but not really red. If you go in a big file and reformat code it all looks good in pycharm, then you go in sublime and you get lot of linting errors. But the main reasons i switched to sublime it has good plugins that save my time and its lightweight, its also faster to switch to files. I think pycharm is a classic example of a java app that takes all your ram it can take me 2-3 gb working on 2 big but not huge projects at the same time. Well big is relevant. At least in sublime it works without having to go through all this crazy gui and configure it..... just install a plugin
IDLE is good for learning. Once you really start using it in your day to day life, Komodo Edit. 
I was having similar problems, but [this](http://stackoverflow.com/a/18535753) solved it for me.
It's not really about Python, but your OS. If `localtime` gives you wrong results, you should set correct time zone and rtc value in your system. If you use Ubuntu, run `dpkg-reconfigure tzdata` and then `date -s` with correct local time, if needed.
I would like to make another recommendation for a learning tool... [iPython Notebook](http://ipython.org/notebook.html). While it is not an IDE, it's not meant for writing complete programs, and it does require some setup, it's quite nice for playing around while you learn, because it combines code snippets and their results in one document -- it's kind of like having the Python command line right inside your notes. As for IDEs, I have no problem wholeheartely recommending PyCharm if you want one, but I also don't think it's necessary until you're working on a project where you benefit from its features (and note that its most compelling features are in the paid version anyway), and it might just get in the way while you're learning. I'm partial to Emacs, but I do recognize that Vim and Sublime are more popular these days, just pick one and go with that instead of an IDE :)
This question comes up again and again, and I think people look at it the wrong way. When I was a new developer, I was constantly trying out new IDEs, new libraries, new code review tools, new *everything*. It took me a few years to realize that I was simply trying to compensate for my fear that I wasn't a good developer. Or that good developers are actually good developers because of the tools they use. Today I use vim because it's easier for *me*. You may like emacs, gedit, nano, PyCharm, or any one of a hundred different IDEs out there. *I* am more *productive* in vim. That's what matters. Not the new-fangled features of some new IDE. Pick a simple one at first, and use it. Switch if or when you have a compelling reason to use something else. The best way to be a good developer is to jump in and get started. Familiarize yourself with a language and framework, set a task, and get the job done. All my software development is done using 'git' (but this works in any version control system). I figure out the next item on my hit list (say "Create the 'about' page"). Then I create a branch called 'create-about-page', and start working. I occasionally get distracted and start doing other things--but then I notice the branch name right in front of me... Once you're done, commit your changes, merge the branch, and figure out the next thing to do. Stay on task. Good luck. ;)
I use the Darcula theme in Pycharm and any PEP8 violations it underlines with an ugly yellow squiggly line so it's very obvious where it's happening. I would like to know what sort of linting errors Sublime Text raises with the PEP8-compliant code that Pycharm outputs when you use Reformat Code. As for unused variables and imports I think it's fine to just grey them out. If you are playing around with an idea you don't want the IDE to stop you from running the program just because you've commented out a variable's initialisation or something. Resource usage isn't a concern to me. I'm a professional developer and the machines I work on are specced accordingly. The boss will gladly shell out $100 for 16+GB of RAM for your development machine if it will save you even an hour of productive time over the next year- that's just sensible spending. Configuring your tools the way you need them to be is just part of the job. If you threw away every tool that didn't work exactly the way you wanted right out of the box then you'd be developing with notepad or nano.
There's a German NASA? Now I have to worry that [this](http://www.imdb.com/title/tt1034314/?ref_=nv_sr_1) was a documentary....
Is there a Kaspar's List or something?
I prefer PyCharm or IDLE. If I'm doing remote work over ssh or something I'll just use nano or vim.
[Wing 101](http://wingware.com/downloads/wingide-101) is the free version of Wing IDE. I used it for serious development for several months and it's perfectly fine. I finally upgraded to the "Personal" version because I wanted to be able to debug multi-threaded code.
PyCharm is excellent as a free tool. I thought you wouldn't be able to do web development but had no problem running Django and Flask. Also, if you're on Windows Python Tools for Visual Studio is very good and supports the popular web frameworks. I think it works with Express which is the free version of Visual Studio but you'll have to check.
what's wrong with a one word answer? OP simply asks what the best ide is without asking for any explanation. vim is a very extensible text editor. i like the approach of starting with something basic (though vim is not necessarily basic..) and adding on the bits that you find useful or you need rather than giving someone a huge tool that they have no idea how to use or approach.
complete program code: def index(): return "Hello world" complete program code: db.define_table('friend',Field('name')) @auth.requires_login() def my_friends(): return dict(grid=SQLFORM.grid(db.friend)) What frameworks is this? Can you make anything easier in another framework? Which python framework comes with a web based IDE? Which python framework comes with a built-in pluralization engine? Which python framework can to automatic database migrations since 2007? Which python framework has a database abstraction layer that works with relation databases (sqlite, postgres, oracle, etc) and also with MongoDB and the google datastore?
Thank you for the reply i always considered pycharm a good tool for static analysis anyway. i dont have 16gb at work and for me if an ide takes 3 is too much because the swap is being used a lot. also im not the only person complaining about pycharm and ram. As i mentioned line too long is ignored by default, but i apologize i shouldn't say pep8 i should say linting instead. Personally i consider unused imports and variables as an error. All tools have prons and cons pycharm does some good things but is not perfect and pycharm is what i did choose as a beginner. I'll update my previous comment. +1 for correcting me
Thanks man. I will give sublime a try. :)
I like geany for most things. It's not an IDE, but does enough to keep me happy.
I haven't used Sublime Text professionally so it sounds like it's worth trying out. I'm a bit leery though that starting with just an editor and adding a million plugins will just end up trying to approximate what PyCharm can do right out of the box. Integration with HTML/JS, Grunt, Bower, NodeJS, AngularJS, Django, Flask- Pycharm understands all of these frameworks and tools and exposes them so simply. You should really be bugging your management for better hardware. I'm not sure of your situation or seniority but if the PC is ever the bottleneck in my workflow I take some screenshots showing the resource usage maxing out, send them to my manager and IT dept., and I have an upgrade within a day or two. A one-off upgrade to a developers machine is much cheaper than wasting expensive developer-hours on slow startup times and performance degradation from memory swapping. Any manager should be able to understand that.
I second Geany for quick scripting. It's my Swiss Army Knife of editors. 
1. I use Windows 8.1. 2. I just use the regular program icon (except right now, where I'm navigating to IDLE in the python34 folder specifically). 3. By running PyCharm (which has the correct version), I simply get errors saying, "This module doesn't exist." There's not much of a stack because the program fails to really *do* anything since I'm literally importing the module and calling a function that would simply print something. The problem, I've found, is NLTK requires a 32-bit installation, but there is no 32-bit installation of python34 available for Windows (though there seems to be a workaround, they don't really explain which file to modify). I have a VM of Fedora, so I'll probably just install python34 there and forget about trying to make it work on Windows. 
Aha! I had gone into the environment variables and removed all the references to python from "Path", but I hadn't seen there was a "PYTHONHOME" variable. Anyway, somehow it had got set to "%VPROJECT%\..\sdktools\python\2.5". After a bit of googling I can link that to the Alien Swarm SDK tools, which I installed the other day through Steam. Case closed, thanks for your help!
To piggy back, any know of python jobs in austin? 
You might be getting artifacts because 41kHz is a weird sampling rate. Digital audio usually uses either multiples of 8kHz, or 44.1kHz. As for delay: you've got it set to 5 seconds. Can you just reduce that? If you want real-time audio, you need &lt;150ms of delay.
Angular js and Flask - Code: https://github.com/redbrain/yogurt
Try spyder -- it's the Rstudio of Python. https://code.google.com/p/spyderlib/
I learned using VIM + a few addons for python. Many people will yell at me for stating this but my knowing vim has made working with servers (which always happens through ssh in my case) much easier than it would have been if I hadn't. Essentially, I feel like if you're learning python in a *nix environment that you're going to hit either vim or emacs eventually. Might as well learn now?
Amazon would work fine. They give every account a free tier for testing and low bandwidth use. 
This was excessive for a relatively small application of only a few thousand lines of code (total around 4k or 5k). I didn't have a virtualenv or anything other than about a dozen folders with a couples files each. Code Intel for Sublime can index it without needing to use more than a few dozen MB, and I get all my completions, inline docs, and everything, and total ST doesn't use more than 100 MB of RAM. PyCharm uses that much without a single file open. On a fresh install with no project open, it used as much RAM as my current editor, and once I opened a project it jumped to 3 times that. Not really acceptable in my opinion.
Sorry, I'd be happy to give you a hand, or get you some resources, but you need to be more specific about where you are at, and where your troubles are.
[Vim with jedi/rope/pymode](http://michiganlabs.com/vim-python-ide)
In the end it's Java and to be expected. It doesn't grow linearly with tons of stuff open. It's mainly just really fat to begin with.
Not sure if it counts as a IDE, but I just use Notepad++ with the obsidian theme with some python plugins.
Don't remember specific names, but I attended the startup crawl during SXSW last year and *a lot* of them used Python at least for parts of their back-end. Interviewed with Indeed too and they said they use Python for some stuff.
For learning I'd recommend any text editor with syntax highlighting, such a [Sublime Text 3](http://www.sublimetext.com/3). For learning, you probably aren't doing anything that really needs an IDE, and an IDE will probably just be more trouble than it's worth.
Hey there from youtube.com/sentdex. The best free IDE for python, in my honest, non-sarcastic, opinion is the one that comes with python, IDLE. I have to truly specify that I am not sarcastic, since last time I was heavily downvoted and chastised for not taking the question seriously. I don't like the interactive one, the text editor where you open idle and go file &gt; new. I like this IDE for quite a few reasons. It does auto indent, and does do highlighting. It basically does what every editor will do for you, no matter where you go. This is great, because you wont require a specific environment. When I go from doing a lot of development on my computer, to doing a lot of development on my web server, it's a seamless switch. I don't need to do some massive adjustment. I usually pull files and work in a temp env via IDLE, but I do sometimes go in with nano / vim to make changes. Depending on where you go, you'll find the editors change. If you get hooked on one editor, you're going to have a hard time being agile. All of that said, I also just plain displease using any fancy editors. I like my editors basic. It keeps me on my toes and forces me to know what I am doing without having it fix my problems or immediately notify me. The downside to this of course is that you do make mistakes. I think it's worth it. I think the better question is to just ask "what are the free python IDEs?" and try them all out for yourself. See what you find the most comfortable. Everyone's going to have their own opinion, and of course believe in, hands down, their specific method. Best wishes with Python, it's served me very well, hope it does you too. 
Yeah, I think for a beginner, you should stick to a simple text editor with tab completion. IDEs are good for keeping track of large programs, but you don't need them when you're starting out.
the thing with pycharm and the other intellij products is that they are great for new devs because they impose coding standards on you, once you are familiar with those standards though switching to something as powerful as vim may be a good move.. but for the dev just starting out in a new environment or one doing something is finicky is javascript the intellij are hands down the best. sure for python you can use any editor, but your code if you don't know what you are doing and are still learning is going to look cleaner and more professional just by using pycharm and as you code more in pycharm you'll begin to understand best practices and what not. No an IDE shouldn't be a crutch, and you shouldn't rely on it but it really really helps and simplifies the amount of things you have to remember
Hasn't anyone tried "Pyscripter"?
PyCharm is actually great for learning because it has it's inspection feature that tells you all sorts of things that improve your code. Go into the preferences and turn on all the inspections, it will force you to develop some good habits and write more readable code.
I'll second Sublime (Atom is free and similar). IntelliJ is nice but it kills my battery and I often code on the go. 
haha...no... 
Oops forgot pythonanywhere's free service didn't include web connectivity. Could buy the $5 option though and set up a scheduled task. 
I use Eclipse/Pydev in an introductory programming course that I teach. There are better, lighter, simpler IDEs out there but Eclipse has the advantage of being the "full" product and is usable for many different languages without having to load up a different IDE. Linux, OSX and Windows are supported. It would be great to learn with an editor/console combination, but I prefer not to distract students with extra windows and the lack of integrated debugging is eventually a liability. And to those suggesting my favorite text editor, Vim, are you serious? Vim for a beginner? It doesn't do a single thing that a novice expects a text editor to do. Very confusing. EDIT: Having said all of that, if Eclipse is too scary to contemplate then by all means download Pycharm. I haven't tried their free version since they split into pro and community, but their full version from a few years ago was very, very good.
Just to clarify for those unfamiliar with jetbrains, they develop both IntelliJ IDEA for Java, and PyCharm for Python. /u/zymbolic likes their platform.
That was definitely what sold me to jet brains. I'm not a computer scientist by education, so my code was always super sloppy.
Yeah I remember having these problems ~1 year ago, but now it's fine. 
I like it a lot. I write a lot of java too so its great to be able switch back and forth. 
Agree 100% PyCharm is brilliant. Can't wait for Jetbrains c/c++ IDE. 
There is ALSO a paid version that I think gets you more features. I've never used it though. The free version does all I could really ever want and more.
As far as I can tell, there are soo many python shops here. Do you go to any of the meetups?
&gt; I didn't have a virtualenv How would using a virtualenv do anything but *decrease* the number of packages PyCharm scans?
PyCharm is essentially IntelliJ with their python plugin. 
I don't like to waste RAM just because I can, but really PyCharm provides more than its share of features for the memory. When I compare what IDEA consumes to something like Chrome anyway, it's not really the problem child on my system. 
PyCharm (and IDEA in general) have a Power Save Mode feature on the File menu. Turn that on when you're on the go to keep it from auto-indexing and doing other relatively power hungry things and you'll notice a big difference. 
No, which one?
my gripe with sublime is file extension association. It doesn't do it properly. If you dblclick on a file in explorer, sublime wouldn't open it. My favorite part is [when the developer blamed windows for it](http://www.sublimetext.com/forum/viewtopic.php?f=2&amp;t=1652&amp;start=10#p7646). . . because file association is a common problem among windows program (tip: it isn't).
&gt; Uhh.. my personal laptop has 16gb of ram.. my dev machine from work has 16gb of ram too. .300mb is nothing My work machine has 4 GB (yes, it's terrible, I've tried getting more and they won't let me), that sits at about 2.5 GB used idle with outlook and lync closed from corporate bloatware and because I have to have some proprietary drivers on my computer that have services running constantly so that I can talk to hardware for my development. I'm in electrical engineering, not web development. I have to have software for controlling oscilloscopes, network analysers, I2C controllers, arduinos, digital IO boards, pneumatics, servos, light curtains, lasers, label printers, and barcode scanners. 300 MB is a pretty sizeable chunk of RAM for me to have to worry about with all that overhead. I send at least one screenshot a week of my utilization to our IT guys saying that I need a better computer, but that won't happen without manager approval, and my manager's primary development experience is with Tcl using Notepad++, so it's "good enough for him". &gt; and if you have used intellij products before you should know that you aren't 'just editing code' if you want to just edit code there is stuff like notepad++ and that's a quick dirty feature-less editor. And IntelliJ is not the only provider of editors with those features. I don't use Notepad++, I use ST3, but I wasn't using all those awesome features of PyCharm when I opened my first project with it. When even Visual Studio uses less memory, it can be called a resource hog. &gt; for a full-fledged full-featured ide the intellij stuff is well worth it and helps you code much quicker and more efficiently with cleaner looking code as well. Thanks, but I have those tools already. I have flake8 integration for code styling, and ST has some pretty powerful features for editing code quickly, not to mention it's extensible in Python, so whatever feature I'm missing I can either install a plug-in or build one myself. The only real benefit I see from using PyCharm is having an inline graphical debugger. And that is only really useful when running it on a development machine; having to debug problems on a production machine (different computers for me) which do not have PyCharm installed on them means that my options are limited to `pdb` and `ipdb`, at least one of which is installed, and can be integrated into the code so that if something really goes wrong, my application can drop into a debug state and I can then interactively examine the internal state to determine the source of the problem. &gt; your 'beef' with them is nonsensical. When there are fully featured editors out there (Sublime, vim, emacs, among others) that can offer the majority of PyCharm's claimed advantages, but yet they consume a small fraction of the resources, I don't think my argument is nonsensical. &gt; tl;dr this isn't 1995 get with the times. Not everyone is so lucky as you to have the top-of-the-line hardware. Many of us have to work within outdated constraints. Corporate red tape, ignorance, and politics often get in the way of me getting the tools I need to complete my job. It's particularly frustrating when I see that my company has no problems dropping twice what my house is worth on a [single instrument](http://www.tek.com/bit-error-rate-tester/bertscope), yet we can't budget another $100 per laptop for the dozen people on my team. tl;dr: Not everyone gets to have nice dev machines. For my particular use case, PyCharm uses too much resources for it to be practical. Just because you don't experience those problems doesn't mean that everyone else is free from them as well.
Eclipse is quite manageable once you nail down the one or two perspectives you really need to use in it. In fact, I have changed the Debug perspective in Eclipse for Java development and have it open everything I need in just that perspective. I saved over the default version of it to make sure it comes up the way I need, and I just don't even use the other perspectives. It's quite manageable that way. Also, switching between perspectives really slowed my Eclipse instance down, so it's much faster that way.
I only have 4 GB of RAM on my work machine... And yeah, my "biggest beef" is really that it uses a bit more than I'd like, but I've recommended it to others as a good Python IDE that doesn't require as much setup as Sublime Text (my editor of choice, I also like multi-language support).
This....this comment right here is the truth
IPython 
They have many products. PhpStorm for PHP, WebStorm for Javascript, RubyMine for Ruby, ReSharper for visual studio. All of it use their "core" of I understand correctly.
/u/darkpixel2k made a comment about personal confidence and editors that is spot the hell on. If you can use notepad.exe in a way that you don't have to think abotu the editor... where you can just write and edit without trying to figure out what keystroke is next or how to do &lt;whatever&gt;, then use notepad. Whatever editor is comfortable for you, use that. different editors have different display features, themes, folding, hiliting, popping completion, and all that... but it's all just convenience. 'A good IDE' doesn't write the program. The best ide or editor is the one that stays out of the way and lets you write the program... And getting started actually writing is the hardest cherry to pop. [edit] OH OH i forgot to say... Most 'new' programmers thing they're cheating or "not a real programmer" with a bunch of browser tabs open for reference. that is by NO MEANS cheating... matter of fact, i think that's a good topic.
&gt; I have no idea how to approach it. I know that I want run it off the google app engine. Take a step back. Start writing your app. Get it working on your machine. *Then* think about GAE, AWS, etc.
While this is true, I'd recommend PyCharm for dedicated python devs, or anyone who only knows Python and doesn't plan to expand their knowledge for a while. IntelliJ can be slightly overwhelming (but not as bad as Eclipse + PyDev, imo) if you don't know what you're doing.
Python library for serializing any arbitrary object graph into JSON. It can take almost any Python object and turn the object into JSON. Additionally, it can reconstitute the object back into Python.
PyDev and Eclipse. I have a love / hate relationship with Eclipse, however PyDev is very good. The unfortunate thing is the need for lots of RAM and a multicore machine. Multi core because the app is Java based with many threads. 
[Sublime Text 2 (or 3)](http://www.sublimetext.com/2). Looks so nice if you change the color scheme, it has the ability to move lines of code up/down with copy paste and editing multiple lines of code simoultenously. Did I mention unlike $EVERY_IDE_EVER it boots in under a second. Ps, it has a console for executing your code, but imo you should be doing that in a terminal. Unless you're on windows. In which case go with like Eclipse, because you seem to like living the hard life.
How is this a valid critique? The man has a personal problem because of his situation. Just because we can afford shitloads of ram isn't gonna change his position...
This might not be a popular opinion but I really like LightTable
There is no such thing as the best IDE that is free. You would first have to define what you mean by best and that would varies for everyone. Some might prefer to be able to input more lines of code, some might prefer the ease of use, some might prefer the ability to maximize the coding automation they can get from their IDE, some might prefer the usability features and some might prefer something else. All those aspects will contribute differently to your overall productivity depending on your own abilities, interests and knowledge. If you are looking for good all-around suggestions for well known IDEs, than the suggestions in this thread will help you but you are the only one who can define what is the best IDE for you. I personally use [Sublime Text](http://www.sublimetext.com/) which might not even be considered an IDE but an enhanced text editor and it does a pretty good job for me. It might not be the tool for you. It's not free and *a license must be purchased for continued use* but you can try as long as you want. In many cases especially for small to medium projects, you do not even need an IDE with Python. It can get in your way more than it can help you. Can you picture a construction worker asking his colleges what is the best free hammer to build a house? They might have to ask you how big are your hands, can you carry a heavy tool for a long period of time, are you going to use it for pounding nails, busting up brick, demolishing plaster, chip concrete, break tile?
Before you ask what the best IDE is, ask yourself whether you want to use an IDE in the first place. There are many very good reccomendations here for IDEs, and at some point if you're working on large projects you may want to use one - they contain many handy features. That being said, especially if you're just beginning to learn a prorgamming language, you might find that all the bells and whistles and complications of an IDE get in your way when what you really are trying to do is worry about the code. By all means, feel free to try some of these suggestions, but if you're just learning a language for the first time, you might find it helpful to just use a plain text editor with some syntax highlighting while you learn. It might not be as easy to write the code, but what you learn will stick in your head better - at least, that's what I experience when I'm trying to learn something new. Best of luck!
yeah 4 gb isn't really a lot... wind 7, a 300mb editor and 10 tabs (which is pretty common for me) will make for some thrashy performance.
If your argument is that vim is too confusing for a beginner, why not notepad++ or gedit? All a beginner needs is a basic text editor with syntax highlighting and a terminal to execute the code. Eclipse adds layers of complexity that a beginner doesn't need as well. If they want to jump into debugging, they can try out pdb/ipdb. IMO it'd be better to learn with those first, so you know what the features of a debugger are, and you learn the tool that comes with python. It may not be "user friendly", but it follows a pretty standard interface and sets them up for the basics of gdb if they ever run into it. Debugging can be a pretty advanced topic, and the difficulty won't lie in the interface as much as the method.
I agree PyCharm is great, and would add using ipython notebook is great for quick and dirty iterations
The only wasted RAM is unused RAM. No point in having RAM that just sits there without use.
just don't pretend to be an authority on python and you should be fine
/r/learnpython
I did not mention about COM but I did play around with it. Some of the things I found were: * Because it spawns its own Excel processes, sometimes that can be buggy and results in lingering zombie EXCEL.EXE processes. It was inconsistent i.e. something it happened sometimes it didn't. * It interferes with me opening the same Excel file in the Excel application itself (which happens all the time) - Excel will say something along the lines of "file already opened, would you like to revert your changes". 
With modern operating systems, it's never sitting there without use. The OS uses it to cache file system reads and writes, buffers and other purposes. So yes, applications that use RAM unnecessarily do waste system resources and degrade the potential performance of the system. I never thought I'd say this, but right now I'm feeling nostalgic for the days when programmers actually worked hard to save every byte of memory they could and write tight code.
&gt; but the standard machine these days is 8gb Where? For who? For the kid in the poorly funded school? For the young person learning on hand-me-down equipment? For people who don't live in first world nations? Heck, I talked to someone last year in Pakistan whose computer science class is using Pascal - Turbo Pascal FOR DOS. Jessica McKellar has taught women programming in Haiti - do you think they're all running with 16GB? And what about just plain broke college students? Or the senior citizen living on disability or social security? Or the unemployed? Not everyone's a middle-class+ first world developer with a six-figure salary.
I work with 2GB. :-) 20 browser tabs open = not a good idea.
I do understand where you are coming from. There problem is that only a fraction of the reports and ad-hoc requests can be automated this way i.e. by giving users a "dashboard" view where they can filter and export whatever data they want. One is because the requested data itself can vary tremendously from one request to another. Another bigger issue is that our process of releasing data requires prior approval / red tapes from appropriate higher-ups. I can't just "release" all data and let users do whatever they want (actually some of them are pretty well-versed with Excel pivot tables and the like). Some (all?) of this data is sensitive and its release need to be controlled. I won't be comfortable releasing even slightly bigger in scope than what is already approved to be released. Maybe you think this amount of red tape is excessive and needs to change, but this is the model we are working with and it ensures that sensitive data is not handed over unjudiciously without audit trails. 
&gt;what's wrong with a one word answer? What's wrong is that inevitably there's going to be more than one opinion about this - and this is clearly a question that involves a lot of subjectivity. If everyone posted one word answers the OP would end up with nothing but a list of Python IDEs with nothing to help choose between them. which is probably where they started from in the first place.
Another good and reasonably powerful IDE is [Eric](http://eric-ide.python-projects.org/index.html). If PyCharm is too heavy for your system (or you want the look of Qt) this is a decent option. It actually has a few unique features such as a built-in chat system and the ability to share open tabs with other users running Eric so you could do collaborative development with someone or ask for help with a problem and show them your code.
There's recognized support for several popular third party libraries (django, for instance). If the company would pay for it, let them.
I'm glad that you've found something that works for you, but don't you ever wish for things like completions or snippits?
As long as you don't try to pass your site as the original source for the Python programming language or its implementations, you will be fine. Just refer to your site as "Python.Buzz"; you could also add a copyright note at the end of your pages ("Python is ™ @ Python Software Foundation etc etc"). With the proliferation of TLDs, I don't think the PSF should worry too much about owning every "python" domain out there. (Disclaimer: I own Pythonaro.com)
&gt; In Python it is. I have never seen the pattern used in actual code (I'll be happy to be proven wrong.) The question is an [actual code.](https://github.com/renfredxh/tmx/blob/master/examples/shoot-em-up.py) at line 130. &gt; The parent example is too simplistic (probably because it's just to demonstrate passing around objects with self.) I thought that was the question... Why passing around self in a method of self? Or have I misunderstoodthe question? &gt; The example you gave is incredibly convoluted. It can easily be rewritten to be much simpler without passing around the object in that manner. Maybe. The example contains 5-10 lines of sparse code, all the other lines are demonstration. This is not convoluted for me. &gt; Again, I'd like to see examples of how this pattern can help improve real code. Not looking for an argument here, I genuinely find it ugly and would be happy to be proven wrong. I have really tried to find that for you on code.google. I could not find any. I could only find examples in my own closed codebase. In my example I tried to trasform my real world usage. 
Um, the site layout on mobile (android chrome) is nearly unusable.
I like geany a lot.
Interesting, in my 2 years I never had zombie Excel.exe problems, but it has been 4 years since I done this. Either way, I have no intention of defending Excel's stability. IMHO, when dealing with Excel files, you're already neck deep in it. That file format is just a pathetic joke if ever there was one. Point 2: definitely. edit: I did have instability if I did the wrong thing, like all MS technology, there is 50 ways to do something, but only 1 way that reliably wont crash.
The Python date/time API is built on top of the standard system C library. Any API call that defaults to local timezone uses the standard setting from the underlying operating system. First, make sure your OS is set to the correct time zone. The next step is to correctly use an API with several strata that have accumulated of the last several decades and includes some questionable API design decisions...
Well, ReSharper can't use their core, it's written in .NET! :) Other than that, it's true :)
*Just for reference I've worked in banking, anti money laundering/terrorist financing, manufacturing, fraud, and other finance realms, as an engineer, BSA, and reporting analyst so I do understand your need for security and audit. Not trying to be that guy, just giving background.* &gt; only a fraction of the reports and ad-hoc requests can be automated this way I think more important than automating them is taking the responsibility away from yourself and onto the user. What I mean by that is, create a way to let the user get the data. Whether that be in just refreshing something or using a filtering tool, or actual reporting tools, you should make sure the data is correct and let them pull their appropriate info. Anybody (even your 70 year old admin) can click a refresh button. &gt; data itself can vary tremendously from one request to another I probably wasn't clear, I didn't mean a single report, I just meant try and move your reports to this format (where the user has the responsibility of the report). If you can consolidate, awesome, but yeah it's probably not going to happen. &gt; Some (all?) of this data is sensitive and its release need to be controlled Not sure what you mean, you're deploying excel sheets, what worse way can there be to control data? You're end users almost guaranteed to be sharing their workbooks with other people, it's the nature of excel. If you're talking about only giving specific people specific data, just because you let the user get their data doesn't mean you have to give them more than they have now (I'm not saying everyone gets all the data), you can allow them to filter and drill down on the same data their privy to now. Just to be clear I don't think you should change your model at all, that's way harder than changing/upgrading some tools, yeah a culture change would be great for a lot of us but it's a freaking pipe dream. Listen, you're talking about all of the same problems every group that's inundated with manual-ish reports has; security, generalization, metric conformity, automation, etc. These are not easy problems, I know that as well as anyone, but (and don't take this wrong way) you're making excuses. I've made these same excuses/mistakes myself because these problems seem insurmountable and it's just more work later down the line. You do what's easier for you and what gets the job done but my advice would be start now on changing your reporting culture instead of prolonging your current one. I hope my message came off as just informative, (that's my only intent) it's hard to share knowledge on the internet without sounding pretentious. Good luck, seriously.
Agreed. Between the push to Unicode, 64 bit instruction sets and data types, and VM languages like Python, Java, and C# we waste a phenomenal amount of memory today just by default. I don't want to live in the past by giving up all those features and what they enable, but sometimes 8 bits (or even 7) was enough, ya know?
Worth the expense report. Hell, I even bought the pro version when it was on sale (before the community edition existed) and I have no regrets.
You deserve to work somewhere better. :(
Try searching on careers.stackexchange.com
it use some code-analytic tools on background. To disable or minimize that there is an option called "Power-saving mode", you can use it.
I just started using vim seriously the other night, and it's the first time I've ever been this excited about a text editor. It took about 3-4 hours to set up my vimrc and lookup what exactly I was setting up, and to add the plugins I'd deem necessary for the features I'd care for, but wow - after setting it up, the power you end up accessing is awesome. I'd always thought the vim-crowd were stodgy old coots that were stuck in their ways, but boy was I wrong. This thing is mind blowing. Hands down the best editor I've used.
eclipse
yes! thank you!
That's how I feel too. I'm fairly new and I use eclipse, because I'm familiar with it from Java and I love how intuitive it feels for me.
How did you get "use sublime" from that post? Use Vim :p
Uh, the OS handles file association, not Sublime. Its definitely Windows.
yeah... when you hear hooves, think horses, not zebras. considering that the dozens, if not hundreds, of windows programs i've installed since windows vista, and this "windows problem" has only shown up for this program... it's a sublime problem. It's either a windows problem that everyone else has worked around, (and sublime should be able to as well) or it's not a windows problem. so yeah, there's dozens of choices in that arena. 
Do you mean free as in freedom or free as in free beer?
Wow 300 megs? No wonder I can't run it on my iPhone 4.
Don't listen to this guy.
This is really cool. Thanks for sharing!
Is not written what type of jail you are escaping. Is it an ast parser jail or just some module which cleans up locals and modules on startup?
I have no idea what exactly your point in this whole thing is, but file association is done by the OS. That's the matter of fact. When installing some programs give you the option to associate them with specific relevant file types, but sublime doesn't do this. And it wouldn't really make sense to offer this option during install, since on the base level sublime is a text editor. So the amount of file types you can possibly edit with it are huge.
Awesome :-) Maybe redact your friend's mobile number from sendscore.py, though.
Why? Would you care to explain what is wrong in your opinion with the eclipse/pydev combo?
&gt; $ sudo pip install twilio *cringe*
But who cares about 300 MB of RAM nowdays? RAM has become so cheap that it is not a problem to have 4-8GB...
An 8 GB stick of RAM is $70. If you are a software engineer and your company is so fucked that they can't spend ~1/1000 of your salary on BASIC equipment, you should probably take a quick look at the market for software engineers.
&gt; Wasting programmer time is the true inefficiency, not wasting machine time.
You might find this interesting: [The hundred year language](http://www.paulgraham.com/hundred.html)
maybe you wanna check out [pyo](http://ajaxsoundstudio.com/software/pyo/). Pretty awesome sound processing library. edit: typo
I don't know why you are being downvoted, but installing with sudo is not a good practise.
Back on Ubuntu it never worked for me without sudo
thanks, i need more time to fix that in all browsers.
Use virtualenv. But pip works fine on ubuntu without sudo as well. Do you have any logs or error messages?
Why? Isn't it easier writing if you know the name correctly?
No.
Works fine for me, as I set them in the OS.
haha. I know but other people have suggested sublime and just from the upfront looks of it, I will try that first :P
Thanks man!
PyPI is not a trustworthy repository because nobody checks the packages. Anyone can upload anything. That's already dangerous and running it as root is just insane. The preferred way is to use a virtualenv or [`--user`](http://pip.readthedocs.org/en/latest/user_guide.html#user-installs). --- I personally have a "white list" policy with root permissions. Basically only system services and tools get them.
I just wanted to say that this is pretty much my own experience as well. In fairness I was skeptical about the utility of an IDE even before trying, but even after putting that bias aside pycharm surprised me with how sluggish it was. Maybe this is still better than other IDEs, I do have pretty scary memories of encountering Eclipse. Either way I am not doubting that it brings some nifty features on the table specially when it comes to organizing large project, but personally I feel that a smart text editor is nice enough for all purposes. Also admittedly it sounds like a tired cliche but I believe beginners should avoid using IDEs during their learning period because it takes away vital experience of writing code as it is and also instead of being the helpful tool, it can easily become the bottleneck. Pycharm seemed to have an awful lot of features which can easily become a massive distraction. And finally I suppose a major appeal of using IDEs is that they have a visual debugger. The ability to watch what transpires line by line is very helpful no doubt. But there are more powerful substitutes available albeit with slightly steeper learning curve. I recommend having ipython terminal and sublime text open side by side to form a working environment and using [ipdb](https://pypi.python.org/pypi/ipdb) as the debugger. It provides the niceties of ipython and the facilities of pdb such as set trace, breakpoint, step down etc. inside the debugger. Overall I feel that this is a complete yet minimal setup that is both easy and convenient to use. 
I'd definitely use something like atom over sublime, just cause of the insane pricing.
The easiest way to find language-specific jobs in the US is to use indeed.com and search for "Python" in "Austin, TX" for example. You can click on "Advanced Search" to eliminate staffing agencies, miles from the city, and so on.
Don't let OP express himself.
Yeah, the first version used BS, but I wanted to be able to send it to friends without them having to install extra libs.
I would not mind that :)
I was really only trying to say that Vim was a bad choice. There aren't many cross platform editors that I would recommend, and I didn't realize that gedit was one of them (cross platform) until you mentioned it. Gedit is a very pleasant editing experience for novices. I have historically avoided using editor/terminal combinations for my classes because our IT policies used to prevent students from using the terminal!
Well, it is because I didn't know what the code does exactly other than installing. I know [now](https://stackoverflow.com/questions/15028648/is-it-acceptable-safe-to-run-pip-install-under-sudo)
This is a good point. FWIW, I meant "being bundled into something commercially sold"...but I don't want to stop, or inhibit it's use, so...thanks for the logic/insight.
I don't get the point, wasn't virtualenv-wrapper already there? what problem venv it is trying to solve other tools lack?
You can actually get Eclipse without a Java perspective. You have to go to the [full download page](http://download.eclipse.org/eclipse/downloads/drops4/R-4.4-201406061215/) and scroll down the the "Platform Runtime Binary". If you look for the version I linked, it's only about 65MB compared to the 206 MB "standard" download. Then you just need to download whatever plugins you need (PyDev, web stuff, etc). It could be my imagination, but it feels like it's a bit faster this way.
Really hope those are fake Twillio credentials and phone number in the code listing... 
And we have come full circle. A bot in our channel was the original inspiration for this.
I have actually written a small helper tool like this one for myself, so I think I can give some reasoning. `virtualenv-wrapper` has two flaws that keep me from using it. Firstly, it stores the virtual environments in a single location in the home directory, and identifies them by name. This requires me to remember which name refers to a virtual environment for which of my (many) projects. `venv` instead keeps the virtualenvs as a hidden directory in the project itself and therefore binds them together. Secondly, `virtualenv-wrapper` requires to be sourced into the shell to provide its commands—it doesn't work as a standalone command. This means certain problems when trying to use it in automated scripts which, e.g. don't necessarily use the same shell. Neither of them is perfect though—for example, `virtualenv-wrapper` could keep its virtual environments in `~/.cache` instead, that would have certain benefits to XDG-compliant tools (e.g. backup tools can automatically exclude this directory from backups—and if you have many virtual environments on a small drive, that's quite helpful!). `venv` is not good when you want to test your code in two different environments (e.g. with different python versions).
The biggest difference is venv stores one virtualenv per project in .venv along with your .git and requirements.txt, while virtualenvwrapper organizes all your virtualenvs in one place. you can run command inside a virtualenv via venv without activating it (or 'workon' it) venv is a single command, virtualenvwrapper provides a large set of commands and IIRC virtualenvwrapper doesn't work on windows.
So the usefulness of this is that you can serialize objects between Python and Javascript. Something else I'm missing?
Hahahahaha. I think there's something to be said about the propensity of programmers here.
switching can be done in future version, imaginary usage: ~/project1&gt; venv reg work1 ~/project2&gt; venv -e work1 run python For different python versions, tox might be a better choice
No, definitely not completion. Sometimes I use the tabbing completion built into IDLE, for something like getting the various functions within a module if you don't remember the name exactly, but I always complete my brackets when I start them... etc, if that's what you mean. I've used quite a few fancy IDEs in the past that did complete for me, and I just didn't care for it. Not sure what you mean by snippits, care to explain?
for the 32 bit installation of python3.4 on this page https://www.python.org/downloads/release/python-341/ under the title: Windows x86 MSI installer but I'm not sure that will solve your problem 
Know anyone who's hiring? I can work remote or anywhere in central Arkansas, but having just bought a house I'm in no position to relocate. 
That's right, sir.
It's a rather unfortunate choice of module name: it clashes with python 3.3's new `venv` module.
The real answer is that the implementation of `numpy.unique` just [isn't very impressive](https://github.com/numpy/numpy/blob/master/numpy/lib/arraysetops.py#L96). It's basically this, for the default code-path: ar = np.asanyarray(ar).flatten() if ar.size == 0: return ar ar.sort() flag = np.concatenate(([True], ar[1:] != ar[:-1])) return ar[flag] I'm almost surprised the set option isn't *faster* than it, given how poorly this should perform compared to hashing. Note, however, that you should really be passing a numpy array to functions like `numpy.unique`, because the overhead of converting is often very large, as it is in this case. --- Once we get a C implementation of `OrderedDict` (it's coming... slowly), you could do `OrderedDict.fromkeys(seq).keys()`, but for now that's even slower :/.
Phrasing..
Is it gonna be free?
Can only agree with this. It's the Visual Studio of Python.
I'm definitely gonna check this out. . . Thanks!
This again? :)
does it have proper python support yet? or plugins?
If you can't change the system time, and there may be reasons why not, then look at timedelta https://docs.python.org/2/library/datetime.html#timedelta-objects where you are going to need to be careful with any daylight time changes, as well. 
You don't need an IDE. Learn to use a real text editor like vim or emacs. 
Totally agree. I used it the other day for turning a big dict of EXIF data into JSON when the built-in lib was complaining. 
&gt;My desktop has 2GB of RAM So does mine, but then again, my IDE looks like [this](http://imgur.com/1yisrt0). If you can solve your problem by throwing money/HW at it, just do it.
Hey folks, I put this project together the last two weekends. I am looking for some brave souls who want to give this a try. Things work pretty well for myself. I have been running this project for about a week on my personal email server that I use for myself and some friends and I have successfully send out hundreds of email notifications to a dozen iOS devices. I'll be happy to answer questions here or in the Github issue tracker. 
Sure. Snippits are bits of generic code; usually idioms that are familiar in a language. For example, I can type `ifmain` and press my trigger key (Ctrl+j) to expand the snippit to: if __name__ == '__main__': I have a number of them setup to handle this stuff. It really speeds up some parts of coding, or helps me to remember things. For example, I have class-based and function-based snippits for decorators and context managers, etc.
So how does requests compare with beautiful soup for a simple parsing like this?
yes before using sublime ive been through vim tutor and installed many plugins. i respect vim emcas etc and respect the people who use it but its not my tool. i got annoyed switching files (i was still beginner so i might have been doing something wrong) but on pair programming i see people using vim wasting time switching files. I dont say dont use it , vim has nice shortcuts but its just not what i want to use (at least at the moment) 
I use vim because I'm too lazy to install linux, so for C programming I SSH into the university. Now I've fallen in love with it, and I get to tell everyone else how they are noobs because they don't use vim.
Fucking oath. If IDLE has gotten me through 2 years of my degree so far, it can't be that bad. I just the python shell on one half of my screen, and the file I'm working with on the opposite half. Especially for learning python, IDLE is ideal, since you get to skip the bullshit with all the features of IDEs and can just stick to coding. It's why I think that a terminal window and whatever text editor of choice is the best option for learning C.
What's your rational for not getting them to use IDLE? I would think that it would be a better start, since it's stock with Python and it's easy to use.
They don't compare since they are used for different purposes. You use requests to retreive the page and then use beautifulsoup to extract the needed info from the downloaded HTML content.
Ah I see. That's a neat feature. I don't know, just never been a fan of this sort of thing, especially when learning to program. I feel like if I was to use features like that when I started, and I needed to write a statement like if __name__ == '__main__': ...I might forget exactly how it went. It's like saving phone numbers to names in your phone. If you keep doing that, you'll easily forget the actual number that corresponds to the name if you're not careful. I don't really like that. I wouldn't be surprised if you said you typed that quick statement from your memory, so it's just an example, and mostly pertaining to myself. I just think the fancy IDEs would turn me into a lazy programmer. They definitely would have ruined the learning process for me in the early days. I don't know how highly people value eclipse, but I used that with Java when I was learning, and I didn't learn a thing for a while, since eclipse will just fix your script for you to make it run. Definitely not conducive to learning for me. I think once you're an experienced programmer, all these things can certainly save you time. If you're not prone to regressing, then they are probably a fantastic choice for an experienced dev since it will probably speed up dev time. 
What's the emacs crowd response?
I dont think this is an honest comparison since its only compute. The time spent moving data over to the GPU seems to be omitted.
Each implementation is wrapped in a function and that entire function call is timed. So it most definitely includes data transfer for all the implementations. If I'm wrong, I'll update all the numbers. I'll check my work.
Has this really happned or is it copied/stolen from somewhere like [this](http://www.reddit.com/r/Python/comments/1yrvrm/functional_programming_with_pythonlearn_how_the/)
honestly, I'd recommend going the virtualenv route. I had similar problems with arch linux (and yes it can be fixed with appending --user on to the end) but using virtualenv and requirements.txt is much much cleaner.
It's a pretty poor sandbox if it was blacklisting the *word* `open` and not the function. Breaking [Python Tutor](http://pythontutor.com/) took a bit of a different turn. So we're back at [this commit](https://github.com/pgbovine/OnlinePythonTutor/blob/ea846ead7567cc9fe3a5499a30a8bc910c38ef6f/v3/pg_logger.py#L146) and we have this restricted import: # Restrict imports to a whitelist def __restricted_import__(*args): if args[0] in ALLOWED_STDLIB_MODULE_IMPORTS + CUSTOM_MODULE_IMPORTS: imported_mod = BUILTIN_IMPORT(*args) if args[0] in CUSTOM_MODULE_IMPORTS: # add special magical functions to custom imported modules setattr(imported_mod, 'setHTML', setHTML) setattr(imported_mod, 'setCSS', setCSS) setattr(imported_mod, 'setJS', setJS) return imported_mod else: raise ImportError('{0} not supported'.format(args[0])) I noticed that this has a security flaw: we can fake equality. class FakinString(str): def __eq__(self, other): return True def __hash__(self): return str.__hash__(self) # Now we can import sys... print(__import__(FakinString("resource"))) # But it's meant to be blocked import resource I got a reassuring response: &gt; Thanks for the report, Joshua! I've been aware of these exploits for some time now and have blocked I/O at a lower level to prevent them from doing too much damage. Now, mostly this was prevented by [limiting resource usage](https://github.com/pgbovine/OnlinePythonTutor/blob/ea846ead7567cc9fe3a5499a30a8bc910c38ef6f/v3/pg_logger.py#L1082), meaning that even if I got `open`, I couldn't use it: resource.setrlimit(resource.RLIMIT_NOFILE, (0, 0)) # no opened files allowed Even more irritatingly, most things were *deleted* from `sys.modules`, so one couldn't reimport them (it would open the file again)! In particular, I couldn't import `os`, and `__builtins__` was deleted and replaced with a far more filtered alternative. But he forgot about `posix`, the underlying low-level module: posix = __import__(FakinString("posix")) posix.chmod(posix.getcwd(), NUMBER) This brought the site down. Of course, [this was fixed](https://github.com/pgbovine/OnlinePythonTutor/commit/fd30b5e13ffc95c5e460cbea549637dcb375a15d), but I wasn't done. Here's where it gets fun. inspect = __import__(FakinString("inspect")) gc = __import__(FakinString("gc")) # Need to do such "hacky" means due to some errors that occur when modules have no __name__ attribute, # which is the case with some of these. os = sorted( filter(inspect.ismodule, gc.get_objects()) )[93] print os.chmod As deleted modules (in this case `os`) are still imported by other modules, all I had to do was traverse the whole of the GC and remember what index it happens to be at. This is now fixed, and `FakinString` no longer works. But it was fun while it lasted. There are still ways to interestingly crash things, but none of them do damage outside of the process. I think there still might be ways to break the border (there's a particular hack in `itertools` that looks interesting) but I'm quite far from joining the pieces. 
&gt;Instead you should make pip install it elsewhere What if you don't want it elsewhere or scattered all over your machine?
Unfortunately, I won't be able to use it, but dude, you saved me a crapload of research time. I'm setting up an email server for someone, and one of the feature requests was for Push.. All my quick googles were either: * Adding push notifications to your app. * IMAP IDLE command, which seems like *almost* push, but not quite. I wonder if we could signup as a developer, get the "add push to your app" cert, and use that to send the push notification, instead of using the OSX server cert.
I'm glad it helped but this was the seventh result on Google when I searched for 'python no module named encodings'. You should probably search a little harder next time
&gt; So a first uneducated thought might be to run it with sudo which is dangerous. I've been a software developer in Python for years, and "sudo pip install" is what I, and other developers I've seen always do. But then, I really only install popular libraries - matplotlib, numpy, scipy, ... Is it because you're installing things you don't trust?
I agree with you - I've done "sudo pip install" for years and **never** had a problem.
&gt;Of course, anyone is free to send me their CV How long will this offer last?
To address some people's confusion, once you run pip with sudo, the package management database files are saved by the root user. Henceforth you will always need to use pip with sudo. 
Ah sorry for taking up your time then. After googling now I can see that I did look at that page while attempting to find out what was going on, but at the time I didn't recognise the significance of the solution. (I wasn't aware of anything that would have changed PYTHONHOME at all).
To be honest I'd have just used Django instead of rolling my own framework
This is overengineered and does not follow any of the usual conventions. You should take a look at some of the Python web frameworks like Flask, Django or Pyramid to get an idea of how web applications are usually structured. This is going to be helpful, even if you don't want to use a framework. That being said even if you don't want to use a framework, dealing with WSGI directly is a bad idea. You should use at least [Werkzeug](http://werkzeug.pocoo.org/), which provides you with a useful abstraction over WSGI, has a good solution for routing and several other useful utilities.
Seeing as pip installs from PyPi and anyone can upload to PyPi, you should by default be very cautious about installing things from there. But you especially should not be installing things as root from there.
All good, as long as it solved your problem I'm happy
requests makes web requests more easy than urllib, beautiful makes html and xml parsing more easy than html.parser/lxml/html5lib (it wraps them)
I liked eclipse since PCs had about 512MB of ram. It was awfully memory hungry (still is) and I always felt it was a shame, because it was a useful IDE. Now with 4,8,16.. GB of ram in my machines, I use it exclusively. In my current work I juggle Python, Java, Javascript, Android, web and desktop all in the same editor.
Messaging you on [**2014-09-28 20:57:53 UTC**](http://www.wolframalpha.com/input/?i=2014-09-28 20:57:53 UTC To Local Time) to remind you of [**this comment.**](http://www.reddit.com/r/Python/comments/2fp1o0/exploring_neural_data_free_mooc_by_brown/ckbvvs8) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[http://www.reddit.com/r/Python/comments/2fp1o0/exploring_neural_data_free_mooc_by_brown/ckbvvs8]%0A%0ARemindMe! 21 days ) to send a PM to also be reminded and to reduce spam. _____ [^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/) ^| [^([Custom Reminder])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!) ^| [^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback) ^| [^([Code])](https://github.com/SIlver--/remindmebot-reddit)
Looks like Tony took care of it. That's why he's our top man. He saved my baby from a tree with no more than two lines of Python. What a guy!
Man, fuck that guy. I bet he doesn't even know Tony.
That is the first thing I thought. Otherwise his friend is going to be pissed once all the crap starts coming in. His own account is effectively compromised too. 
Like I said, I've done it for years without a problem. Can you give a specific example of a problem happening to you?
ok thank you! i wasn't sure if i should focus on something like that now or later. 
You might want to take a look at other python projects and how they use setuptools (setup.py) for structuring a python package that is installable (via pip usually). From there you can look at creating unit tests. I definitely agree with other comments. Check out the popular python web frameworks: Pyramid, Django, Flask, and many others.
My eclipse environment at work would leave you comatose.
Ubuntu, like Debian, installs packages into /usr/local by default when you run the system pip w/ no virtualenv. You can install in /usr/local if your user is a member of the staff group. So if you want things installed system wide, add your user to the staff group or create a new user that is a member of the group. Note that the staff group doesn't give you r/w to the rest of the system files, just /usr/local. Otherwise just use a virtualenv.
Yeah, I'm not sure why people are playing the "risk" card with installing libraries with sudo. The best reason for a Python developer not to install packages into the system path is that there's not a good solution for having multiple version of the same package installed--or sometimes third party libraries may have a name collision, and other such concerns. Many devs use Python a little bit more like a utility belt--so just having "whatever" installed is no big deal. However, once you do have some code that is only tested with version X, but some other code needs version Y, and porting the vX to vY is either to much time or not possible, then it's suddenly a big mess. So using virtualenv allows each project/app-suite that you're working on to have their own dependencies installed separately. Not only do you avoid the problems described above, but you should also be able to keep any "package state" nice and tight to your software with an updated requirements.txt file (or setup.py dependencies, whatever you want). So you don't end up in a situation where you are dependent on a library or behavior that was installed on your system but may not be installed on your deployment environment. As a pragmatic alternative to "never use sudo to install Python packages", I would propose something more like: "You should only use sudo to install Python packages if you really mean it to alter your entire system for all Python software on your system. If you're installing something for your personal use or for the development of software, it's better to create a limited environment. Keeping the concept of "user" and "system" separate is wise."
Pycharm uses 3gb of ram and takes 15-30 minutes to index our codebase fresh after clearing the cache. It also takes ~15 minutes of initial setup to tell it where the relevant source/git roots are in the large, messy repository. I'd still use it if it used twice as much resources/time. If you like grepping through half-million-LOC repositories to find the things you want, then PyCharm is not for you. If you like jumping directly (instantly!) to the definition of relevant functions and variables across half-million-lines of code, then it's totally worth the time it takes to set up. You only need to save 5 second per grepped-for-identifier and grep for 720 identifiers *ever* (!) for PyCharm to pay for its own timesink in savings.
At first glance, it's vulnerable to SQL injection. Is there a good reason you can't go with an existing framework?
Interesting list of features. I've had a bit of a look into it and here's the responses: 1. PyCharm can't do this 2. You can use Ctrl+Shift+N for File Search or Shift,Shift for Search Everywhere to find files instead of classes 3. PyCharm is technically a plugin for the full IDE called IntelliJ IDEA which can do basically any language. It's a very powerful IDE, I use it for Java. 4. Push and Pull are in the VCS-&gt;Git menu in PyCharm, not sure if you mean something else here 5. OK I can see where multi-line edit would be useful but I would personally still write a regex and step through each match deciding whether to replace or not. Both multi-line edit and regex break down when you have lots of instances and only want to change some of them. 6. PyCharm does a lot of indexing in the background and I've never seen it take more than a fraction of a second to find text in files or find symbols in the project. I guess this comes down to the speed of your dev machine as well.
If you want to be able to work with multiple systems with differing requirements, *you want it scattered across your system*. 
just a note. for vim I recommend vim-addon-manager ( https://github.com/MarcWeber/vim-addon-manager ) to easily manage extensions, and settin up your vimrc to enable them based on file type and other things like that.
so was abstraction a problem for you? that is dumb, isn't it? I mean, I know what's 'behind the scenes' but I continue to not use eclipse!
beer is freedom!11!!
Well, it's also that Eclipse adds all these XML project files and such and I don't really like that, especially if I'm just making a simple Java command line program. Also manipulating things like include and library directories for things like C++ require the editing of a GUI table and having the IDE handle that and arguments, where for me, a makefile seems like a much simpler approach. I think the issue is that while I understand what the IDE is doing, there also maybe other things that I'm not aware of what it is doing. I prefer that everything my program is doing is done because I set it up to do so rather than having something else do it. I don't know if I really cleared that up, it is mostly a control issue that I have. Plus I understand it better and it is a faster method for me.
hi, can you please point to some tutorial on virtualenv, which details about how to use it, best practices etc ?
Awesome! One small comment though. Make sure that you handle an exception that might happen inside the loop (internet connection being wonky?) because the process will exit, your friend won't get his updates and you'll never know about it.
It would be interesting to see how does the implementation which comes with scipy compare.
http://devdocs.io/
That's super fucking lame.
This is from the potential of a security breach. If it hasn't happened to you, great! But that doesn't mean it can't happen. Best practice says you should never install and run code from untrusted sources. Because PyPi allows for arbitrary uploads, you should treat all code as untrusted. If you aren't supposed to run arbitrary code as a user, you sure as hell shouldn't be running it as root. If you feel PyPi is secure enough to warrant doing a potentially dangerous operation, go ahead.
Why would you self sign your certificate for your live site?
You have a lot of work to do before this is anywhere near ready to be used by a large group of people: **Security** * You do not have a valid SSL certificate * You are asking people to hand over their log data while ignoring certificate validation * Your agent code should not be hosted on your server, it should be hosted in a public location under revision control. * Your agent code requires root privileges and inserts iptables rules. You should really consider a system that at least allows dry runs. * You place too much trust in those using your api. It would only take a single person to completely break this and make every IP address untrusted * Speaking of this, want to run DoS on a server? Submit the target's IP address. * Generally speaking trusting or distrusting IPs based on logs will only lead to sadness, just wait for a client to forget their login creds and suddenly they are untrusted **Code** * Where's the server side code? * Read PEP8, read it again and then look at your code. * Never under any circumstances use `try: except:`. * Don't use `try: except Exception: ` to fix the above. Catch the proper exception(s) * Use logging, not print statements * Check to make sure you're not inserting duplicate * You're making a lot of assumptions about things to ignore when it should be left up to the end user. Also, use a proper library to help calculate the ranges string matching is not enough * `for i in ips['Success'].split(','):...` Requests is 'requests for humans', there are lots of attributes, properties, other things that tell you exactly what you need to know. In this case it looks like your server is sending back a bad response. The server should be sending back a 'clean' response making this kind of parsing unnecessary. * CONSTANTS_SHOULD_BE_CAPITALIZED **Setup/Run/Environment** * `sudo easy_install --upgrade requests` - This is a very bad idea, you will eventually break someone's server * Requiring Python 2.7 will limit your install base quite a bit, I don't see any reason this can't support 2.6-3.4 * Don't have a while loop, leave that up a cron to implement. This will also ensure you use a minimum amount of resources. * Not everyone uses /var/log, either adapt the script to account for this or make it configurable Also, I'm sorry but here are my suggestions given the state of things: * Take down the website and the code * Take some time to learn better security practices * Learn Python coding standards * Look at how other similar systems are implemented before writing your own. If you feel the need to do something differently first understand why it was done another way first. Again, sorry for being so negative but security is not a joke and when the application is security focused getting it right comes first.
and your wise advice is.........
Just this week I ran pip install scipy" on a notebook. Let's just say I was completely amazed by how many compilers were called. 
PHP web development is almost entirely done with frameworks. Check out Laravel, I prefer it to Django
Thank you very much for your post. I am going to take all of your advice, make a checklist, and work through the problems one by one. Feedback of this type is exactly why I posted it on here. It's obviously very, VERY early in development and the script wasn't originally intended for mass consumption, so I'll end up rewriting it. As far as the cert it concerned, I'm working on getting that. Again, thank you for taking the time to respond.
I'm working on that.
Two questions: How much faster will the numpy version run if you vectorize it? amps = np.zeros(freqs.size, dtype='float') amps = 2.0*np.sqrt(np.sum(m*np.cos(2*np.pi*f*t))**2 + np.sum(m*np.sin(2*np.pi*f*t))**2)/t.size Looking at your code, it's hard to tell, but you may have to use np.outer(f,t) instead of f*t, to get the vectors aligned correctly. Also, does your cython implementation have any python calls inside the loop? (check out the bottom of this page: http://docs.cython.org/src/quickstart/cythonize.html)
You're welcome. I didn't know how you'd take it so just tried to put out everything I could so some of it might make it through. When doing code reviews I try not to make it personal. Hopefully it didn't come across in that way, but if it did please let me know so I can make improvements of my own too.
I am familiar with Laravel. I know quite a few php devs that started around same time as OP. Most of them either didn't or still don't use any major framework as a significant portion of their work. Laravel is really quite new in the grand scheme of things.
Can tell me why? I am using psycopgs2 positional parameters. Is it still vulnerable?
Looks like it. This is where they attempt to validate raw SQL: https://github.com/psycopg/psycopg2/blob/master/psycopg/cursor_type.c#L371 And this is where we send raw SQL: https://github.com/psycopg/psycopg2/blob/master/psycopg/cursor_type.c#L444 None of that is really "prepared statements" nor does it allow for any intelligent caching. Prepared statements have a SQL statement (with value place holders) and values sent separately (i.e. not merged together). This allows the server to load the already parsed/partially optimized SQL AST, add in the values on the server-side (inside the AST) and then execute (whatever is left). This is how you do prepared statements in Postgres: http://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQPREPARE It's very much like MySQL. First you setup the prepared statement, then you place in the SQL (which has ?'s or something in place of where the actual values go), then you add each value with a separate C call, then you send it. I only know this because I have to add prepared statement support to a Python MySQL driver. :)
I could be off my rocker, but I place intrinsic value in doing these rudimentary things manually when first learning a language. I think it is useful to learn the concept before abstracting it away with a robust tool, such as an IDE variable inspector. But again, we are entering the realm of personal preferences.
http://virtualenv.readthedocs.org/en/latest/
Try StartSSL, it's free and recognized by the majority.
Thanks - I found them last night when I was looking for a free one, but they were doing maintenance. I'll follow through with it posthaste. 
&gt; Take a look at werkzeug and sqlalchemy to learn the basics. In PHP, I have used the 'Doctrine' library a lot, which is the most popular DB abstraction and ORM tool right now. My exprience is that it makes initial development very fast. But once you are into advanced stages, you ll have to face issues which is caused by some quirk in the internal implementation. There is too much stuff being handled internally, hidden from the user (proxys and stuff). So when something does not work as you expect, you ll have to dig into the library code to see what is happening. Hence I now prefer using raw sql queries and use the data to manually hydrate any required entities from the repository context. I am aware of that this makes maintaining stuff a little more harder. But since any change in the db structure is limited to the repository layer (layers above only deal with Entity objects) I am not sure that is going to be a huge problem.
Where was the code source? The dude makes a lot of good points but don't take the site or the code down, putting the code up is how you got the very useful feedback in the first place, that's the point of OSS, you can get help, provided you've done the initial legwork first.
&gt; Coming from php especially if you were doing that for over 8 years, you probably didn't, or still don't, use any framework with php In the php world right now, the framework craze is a bit in decline. People are using a thing called 'composer' which is a library manager to glue specialized components together to make applications. This works well, provided you do a good job of selecting the right components (which will be taken care of the framework, if you use one though) and is my preferred method of building applications. One reason is that, there is no stuff going on in the background, which is supposed to help you. And it often works. But when it don't, it is not very pleasant. So I prefer my applications to be explicit in what they are doing. And when I use a library, I want to know that its scope is really, so that I can exclude it from my reasoning when something goes wrong, or if something is performing as good as I need. For eg, using psycopg2 and jinja. You know were their scope ends so it is easy to decide if those things are involved in any issue you are dealing with.
I don't know anything about his Twillio service, but at&amp;t api key is only $99 per year and as for all the other U.S. carriers I believe they still have a wide open web to sms gateway.
It probably is faster. I know this is /r/python, but I actually use the Java plugins with Eclipse. I'm actually using it under protest as that's just what my current project dictates. I would rather be using IntelliJ. That said, once I got used to Eclipse, it's not too bad. It's definitely lacking in some features that IntelliJ has, but there you go. All that aside, if I were going to start a Python project today, it would be on PyCharm. I wouldn't waste any time on Eclipse if I had my druthers.
&gt; There's good waste, and bad waste. I'm interested in good waste-- the kind where, by spending more, we can get simpler designs. How will we take advantage of the opportunities to waste cycles that we'll get from new, faster hardware? He has a point there. And he has good ideas. I do wish he would move a little faster with Arc. He may think it will all be worth the wait in the end, but I think he forgets that us humans need it to move a little faster for it to be of any use. In the meantime, we all get a little closer everyday to using Javascript for everything. ::shudder:: According to pg himself, he's going to work on Arc again. But that was stated 160+ days ago. I think we would know by now if any progress had been made. https://news.ycombinator.com/item?id=7493993 
Sometimes I prefer the phrasing of non-English speakers. The words come in just slightly different timing/pattern and I have to pay a bit more attention, so it makes a better impact in my memory. Someday, I'll be able to apply a filter and make everything sound awesome. That's a potentially controversial and offensive side project. I'll call it PyESL and it'll be basic rest API pyESL(text_to_transform, language_origin). Haha! I can already imagine Russian, Chinese and Indian phrasing patterns. Man, I need to get a corpus going. this could be awesome, or highly offensive.
Thanks for the links. &gt; Prepared statements have a SQL statement (with value place holders) and values sent separately (i.e. not merged together). This allows the server to load the already parsed/partially optimized SQL AST, add in the values on the server-side (inside the AST) and then execute (whatever is left). I am aware of this. But as far as I checked, I was not able to find a way to do proper prepared statement in python, (I have not looked into issuing prepare commands directly to postgres server)..So I concluded that, may be, the way psycopg2 deals with the positional arguments is enough to mitigate sql injection issues Because they have stated very clearly that one should not use string interpolation to construct queries (Not even at gun point!) and should always use positional parameters. So is there anyway we can use real prepared statements for postgres from python?
You're right :)
I looked into his ipython, but it appears to be more of a presentation type python shell application that an instructor would use to show students examples. Am I missing something?
Komodo Edit is good, but I find myself using Sublime Text 3 an awful lot because it's fast and doesn't use much memory on an old computer with a 64 bit processor like the core 2 duo. 64 bit beta version has large file support. Either one of these editors work much faster than those java programs these other guys are suggesting. In windows Notepad++ would even work to write python.
won't disagree with you on that. however, the app i'm building is for a start up .. and we want to have it immediately be prepared for a large user base. so i'm trying to make sure when i develop it, that i keep all future/potential problems in mind. 
Most Python DB drivers claim not not use string interpolation. You give it a SQL query with place holders and a set of values. Then... they prepare the SQL query client side by... \*drum roll\* Interpolation!!! And then execute the values. It's not secure -- which is why there is a call to "validate the sql" first. The answer to your question is "No and Yes and Maybe". No -- the psycopg2 driver does not use the prepared statements API laid out in http://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQPREPARE Yes -- by hacking in the API calls from the link above to the C-extension or using CFFI or using ctypes to manipulate libpq. If I was in your situation and under the gun, I'd load libpq via CFFI with the appropriate headers/structs for doing a prepared statement, then I'd pass the arguments/variables inside the pyscopg2 C-Extension to the CFFI wrapped prepare API and send/execute it via a CFFI call. It'd be more like a monkey patch or wrapper. Maybe -- You can emulate prepared statements via the second answer to this StackOverflow question (http://stackoverflow.com/questions/9866350/prepared-statements-using-psycopg) 
What's the effective difference between IMAP IDLE and push notifications?
Oh boy...I wish I could downvote this more than once since it's completely false and misleading. When you use named or positional paramaters pyscopg2 does a number of things. The most basic (and useful) thing is, that is converts Python objects to their appropriate PostgreSQL representation. This means it i.e. converts `None` to `null`, `True` to `true` and even things like `datetime` objects. [Here](http://initd.org/psycopg/docs/usage.html#adaptation-of-python-values-to-sql-types) is a list of built in types it supports (you can extend this). It also encode unicode object to the correct charset (depending on the connection) and, most important for us here, escapes anything since it knows best. After all, it's a database driver so you sould assume that it knows how to drive database. **tl/dr**: As long as you are using `cursor.execute` with named or positional parameters your are as save as you can get! This is why there is a [big, fat warning](http://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-queries) to **never** use string concatenation. --- The reason why the post is particular bad is that the author even dug up a code sample to "prove" he is right yet completely ignoring *anything* that happens before this particular code. Yes, the low level codes naively builds a string because, guess what, it ultimately has to send a string to the database! And should I tell you more: It's good design this way. You low level code should only deal with low level stuff and should trust it's caller since it's internal code. 
Scrapy can comfortably scrape ~200 pages simultaneously. It's amazingly performant thanks to Twisted and LXML. No idea if your JS backend can keep up.
&gt; The reason why the post is particular bad is that the author even dug up a code sample to "prove" he is right yet completely ignoring anything that happens before this particular code. It does client side query string building. And it places the serialized values to the input SQL string. There's nothing wrong with that. What is wrong is calling it a prepared statement as it does not use the prepared statement API. (http://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQPREPARE) &gt;Yes, the low level codes naively builds a string because, guess what, it ultimately has to send a string to the database! And should I tell you more: It's good design this way. You low level code should only deal with low level stuff and should trust it's caller since it's internal code. Passing a SQL query string with values encoded into PQexec(...) does not sound like a PQPrepare, PQexecPrepared. And a common SQL query string != executing a prepared statement. See http://www.postgresql.org/docs/9.2/static/sql-prepare.html
It's neat to see something like this being built (and maybe formalized due to its affiliation with open stack). I've been using docker to run my tox tests for a while, and it's treated me pretty well. The main concern I have is portability. Not for my own sake--I'm never far from a proper Linux development environment--but for those confined to less (open) development-friendly (and docker-friendly, of course) platforms. Should be interesting to see what happens in that regard one way or another.
And other things most people don't think of... A good framework should take in to session prediction, fixation, cookie security, etc. I can go on and on. When I review code, most of the bugs are in new code not shared code. When you write or don't use a framework you're adding a whole lot to the "this code has bugs" list. What's more fun is that a lot of them will be bugs that no one is going to think of the first time they write a framework.
 &gt; The testing in the OpenStack world is a bit different than the other unit testing. Since OpenStack is inherently working with the local system components we have to get abstracted from the local developer box to match exactly the system components. How is this unit testing if you're dependent on what's on the box? It's a neat solution for rapid integration testing however.
It depends. I tend to agree with your that doing complex stuff (say a very specific aggregate over a bunch of joins) with an ORM is a little more complex then using raw SQL. This is why (at least SQLAlchemy) allows you to do both. You can use you entity mapping for basic stuff and for the two really complex queries, bypass some levels of ORM and talk directly to the database. This is *fine* and I think SQLAlchemy even states this in their documentation. But using an ORM is somewhat a matter of taste. so I will no discuss this any further. However, you should definitely *not* roll you own WSGI/HTTP abstraction. While HTTP doesn't *look* complex in it's basic form, real world HTTP is a horrible mess of misunderstanding, quasi standards and wild guesses from all parties. If you look at things like [Werkzeug](https://github.com/mitsuhiko/werkzeug/) or [WebOb](http://webob.org/) you will find a lot of things they do just to fix these quirks and provide an abstraction that is low level but also keeps the user sane. Imho this point is not debatable: You don't do this on your own because you as a sole programmer cannot recreate the amount of man hours that were already done in this projects. Which brings me to another point. **In Python, we use libraries. A lot. Whenever we can. We love it.** I know that this feels strange for a PHP programmer (no offense!) since I have a colleague who also switched from PHP to Python and had to relearn this. Reason for this is that most mature Python libraries got you covered in almost all cases. They provide a clean and simple basic interface for basic use cases but allow you to also dig deeper by providing extensions points and hooks for more specific things. I personally know that working with PHP libraries is sometimes painful because their interfaces are (in my opinion) sometimes really bad. Not so with Python libraries. Since Python is a much more flexible language you can build an interface that is clean and easy to use. The common workflow for "I have a thing to do in Python" is: * Go to the [Python Package Index](https://pypi.python.org/pypi) and see if their is a library that solves your problem. * If you find nothing you may be using the wrong keywords. Try using Google to see if their is a library that solves your problem. * If you find nothing you may be using the wrong quires. Go to Reddit or Stackoverflow and ask people if they know a library that solves your problem. * If you still find nothing you may have discovered a completely new field of computer science and you should probably write a a university about it so they can do some cool basic research! The only cases when it's imho acceptable to write your own stuff are: * As a learning effort. This is fine but please *do not use in production*. Whenever other people are using stuff and your stuff sucks (which is probably will since you are only a single person and all programmers suck) you are making other peoples lifes suck. Don't do that! * Their is really nothing out there that fits your purpose. This is very rare and will probably only happen only a few times during your life as programmer. * Their is something but you are certain that you can do better. This should not happen for a newcomer since a probably can'T do better. Note that this doesn't count bugs. If you find bugs it's usually better to fix them and create a pull request upstream so everyone benefits. Also remember that when you publish a library and other people start using it you will probably need to support it for a while. Of course no one can force you to but at least myself would feel *morally* bound to do it. Plus an abandoned project with your name on it will look bad to everyone who may want to hire you.
&gt; However, you should definitely not roll you own WSGI/HTTP abstraction. Yes. You have convinced me.. &gt;In Python, we use libraries. A lot. Whenever we can. We love it. You guys have got me wrong completely. What you say is really similar to how PHP programmers work now. The composer package manager has made it really easy to depend on third party libraries and this is almost used universally. I am not against using libraries. I really don't want to create my own stuff for everything. As you can see I am already using Jinja for templates, passlib for password hashing and psycopg2 for db access. So I am not against using external libraries. I just want to glue these things myself into an application. The purpose of the post was to get a feed back on the things I have done specifically. For eg. The use of a DI container to resolve some of the dependencies as opposed to importing dependencies at the top of each file. How I have used decorators in the container for caching reusable items. How I have used decorators in the repository to make sure only one instance of an domain entity only exist at any point. stuff like that..
indent your code
&gt; i am using Jinja for templates, which I assumes to take care of XSS. I'm not a Jinja expert, but [this bit of Flask docs](http://flask.pocoo.org/docs/0.10/security/) says otherwise. Note also how the doc says Flask will do some of the necessary configuration for you. &gt; For session handling, I ll use another external library. I think requests library has this built in. right? Requests is a client library. I'm not aware of libraries dedicated to http sessions server-side, because it's the sort of thing that most frameworks do for you (either directly like Django, or optionally like Flask). So it's another piece of the puzzle you'll have to handle directly, I think.
Thanks for the links.. &gt;Requests is a client library. I'm not aware of libraries dedicated to http sessions server-side.. [This](http://docs.python-requests.org/en/latest/user/advanced/#session-objects) is what I am taking about. EDIT: Seems that you are right. this is probably not what I want..). At this point I am almost convinced to go along with Flask..
 while True: pass
IRC is a much better candidate for this. Edit: good on you for doing what you're doing! But Skype leaves a lot to be desired.
To add to that: WSGI is a nightmare to implement, especially on Python 3 due to the encoding/decoding dance. It has become nearly impossible to reliably use the WSGI env without going through an abstraction layer. As such I would strongly recommend using Werkzeug or something like that at the very least. (If for no other reason that you will get the added benefit of everybody else's experience of working around WSGI bugs. There are certain modules in Werkzeug that have become so complex due to the Python 3 changes that very few people understand the ramifications of it any more)
Scrapy does not have out-of-box features for distiributed crawlers. It have not requests queue for distributed crawlers, but it will be done with third-part packages. Scrapy solid and strong framework, and may be will be difficult manage scrapy instances. But if you planned for building big, scalable distributed scraping system, you can build you own framework on requests (+gevent) or asyncio and lxml (or others) with yours infrastructure requirements. It is not so hard, but give you what you want with scaling. For my tasks and projects I use my lightweight framework [Pomp](http://pomp.readthedocs.org/en/latest/) sorry for my poor English.
One of the weirder things about Python is that the style guide recommends using the triple-quoted string for multi-line comments, even though the triple-quoted string is parsed as a legitimate statement. I can't imagine when this might cause issues, but it's still something to look out for. For what it's worth, comments like x = 3 # Comment here is an actual comment, and will be ignored by the compiler.
Thanks a lot. When I get some time I'll make that change you speak of. I think I tried that long ago and it didn't make a massive difference, especially on the long-running sizes. The cython version has no python calls inside of the loops, I checked it with cython -a tool. The speeds seems reasonable to me as they compare well with the single-threaded Fortran version. Of course I can make an openmp version of the cython implementation and a multiprocessing version of the numpy implementation and test parallel performance of those also, as well as an opencl parallel version that runs on the i7 to compare to the fortran version, must just install the opencl drivers for my CPU. 
Now you can implement L-system (http://en.wikipedia.org/wiki/L-system) for drawing even more awesome fractals. For many of the fractals on this page: http://en.wikipedia.org/wiki/List_of_fractals_by_Hausdorff_dimension you can see how to draw them with L-system on their page.
I was going to try that, as well as trying a fast fourier transform to compare. This algorithm is woefully slow but works for data not evenly spaced, which is why it is useful. 
Cool, I will have to give a few of those a go.
\* all strings. Also, numbers, integer, floating point and even complex -- only purely imaginary though, because interestingly the CPython compiler does optimize `1j + 1` to a constant, but fails to optimize the whole `load_const, pop` away. But if you're not against executing a couple cheap extra bytecode instructions, you can also go for simple arithmetic expressions, empty list and dictionary literals, `lambda: None`, various variable and attribute lookup (like `object`, `len`, or some local variable name) and basically every expression that doesn't have side effects and doesn't involve much computation. You can even use it to write so called "self documenting code", for example: if x[i] &lt; x[i + 1]: sorted else: x[i], x[i + 1] = x[i + 1], x[i] ^^^please ^^^don't ^^^write ^^^code ^^^like ^^^that
https://github.com/inc0/cracken AFAIK this was some sort of your target.. 
I've played a bit with it already (on a Mac, using boot2docker). I see a huge potential for such a tool. 
 def python3_is_cool(): ...
Not so weird. The peephole optimizer removes the string since it's not used. py&gt; s = """x = 1 ... '''this is a multiline ... commend''' ... y = 2""" py&gt; code = compile(s, '', 'exec') py&gt; from dis import dis py&gt; dis(code) 1 0 LOAD_CONST 0 (1) 3 STORE_NAME 0 (x) 4 6 LOAD_CONST 1 (2) 9 STORE_NAME 1 (y) 12 LOAD_CONST 2 (None) 15 RETURN_VALUE There's no reference to the string in the compiled byte code. It's purely a comment. Technically, this is implementation dependent -- very old versions of CPython won't do that, and other implementations like Jython or IronPython may not. But even they will simply create the string, then garbage collect it. 
&gt; My work machine has 4 GB (yes, it's terrible, o_O I *dream* of having 4 GB of RAM. My computer has 2GB of RAM, and I use it as a desktop as well as a server. And you know what? It handles most things I throw at it just fine.
Yes!
And the code you write probably runs like a crippled dog dragging a grand piano through a swamp on any machine with less than 16GB of RAM :-( I am a big believer in having developers work on the lowest spec machine possible as much as practical.
I don't wanna be mean but how do you expect people that aren't involved with openstack to use your package if you don't publish it to PyPI ?
Actually even then. Only then the package database you just sudo-ized is your venv, not your actual system's. 
i wish i found a good tutorial on "how the hell install Pygame in ubuntu"
Here it is: http://www.jetbrains.com/clion/
Came here to say this.
The project *just* started and it's not in a good-enough state to be published to PyPI. It'll definitely be published as soon as it gets some more tests and the current features get cleaned up a bit.
I use PHP very little and use Laravel when I need something quick and dirty up as a placeholder or functioning mockup. It's very easy to use. Not touting any other particular virtues, it's just very easy to get something up quickly with it.
I wouldn't expect it to be a lot faster, and it is way less readable. I'm generally pretty happy with python code that's nearly as fast as fortran! "You thought reading vectorized code was hard? This version is matrixised!"
Looking at /u/narenarya, all he has done on reddit to spam for his blog. not cool, bro.
HAHAHA I wish it was that easy.
Works for me, what's the problem?
You might think of integrating with fail2ban. That way you don't have to worry about dealing with log parsing (and dealing with everyones differing logging methods), also you can hand off the blocking rather than using iptables directly. Furthermore, you won't have to worry as much about people banning themselves by forgetting their passwords as one usually writes fail2ban rules to fix that problem.
The name is a bit unfortunate, "dox" has an entirely different meaning in many online communities: https://en.wikipedia.org/wiki/Doxing
nah, ignore me, I was just ranting. Pygame seems to allow for a standard ubuntu python installation, and since i use Anaconda i cant make it work.
My experience with PA has been good, but you will run out of your 100 second CPU allowance on the free tier very quickly. Also, I found the online console to be a bit slow. Maybe you can build all of the files offline and then upload them to PA to avoid the slow online console issue?
The backend server uses Tornado: &gt; **Web and WebSocket server, worker processes.** Written in Python, uses Tornado, Celery, Mongo DB, MongoEngine, Redis. I am not the author btw 
You might want to check out https://codio.com, they allow you to create one free project (project = a VM). Took me about 5 minutes to set up the "hello world" app: http://mineral-enjoy.codio.io:6464/ (*edit: looks like the box only stays up while you're logged in) Couple of notes on it: - you gotta use "parts install pip" first - you gotta update .bash_profile with the path to the python `bin/` directory ($HOME/.parts/packages/python2/2.7.8/bin) - supervisor is optional, i installed it just so that demo page would stay up. might not be necessary for instructing a class. Tons of docs on their site, the "[Features](https://codio.com/s/features/)" page gives a decent rundown. I think the online-coding solutions are going to be your best bet, whether PythonAnywhere or Codio, as you'll be able to spend more time focusing on Flask, and everyone will have the same starting point.
SSL in place. Thanks for the feedback, friend.
&gt;What could have possibly gone wrong? You created multiple paid instances, entered your CC info and left them running.
Shut 'er down, STAT!
That's what they are at the moment, but I have no use for it in this form anymore.
Web.py, hands down. It feels like Flask but doesn't have Jinja2 and an ORM included (which I believe Flask does). I install Jinja2 and SQLAlchemy manually and there is nothing I miss. In fact, I believe Reddit was running on Web.py a few years ago (a Reddit developer wrote Web.py I believe). It is the only framework which doesn't feel like it restricts me in what to do. After Django and Flask, Web.py is a relief.
Most cloud services can be surprisingly expensive. For example, AWS once you figure out the cost of your base servers, and in all the other services(CDN, load balancing, proper back-ups, etc.) you find out it really isn’t all that cheap.
I can confirm it's because you left one or more instances running. Unfortunately, i've done the same mistake, but with 150 instances. Costs added to 800$ in one day
&gt;So I had to use the slow algorithm OR I had resample the dataset into one that was evenly sampled in time. I chose the former because thats what was done by everyone else (maybe a topic for another post). That was a fun read and I'd especially love to see you discuss the DFT some more.
The first problem is simply the structure and naming: * back, common, src? Those are all horrible names for packages. You want to stick to nouns as names and they should be descriptive. back, common or src tell me nothing about what might be in there. You should have *one* root package for the entire project, unless you have truly independent packages that could be turned into projects of their own. If the latter is actually the case, do that. * repos.*_repo is horrible naming. Python is not C, we have namespaces use them. Don't use prefixes or postfixes for namespaces or worse namespaces and prefixes/postfixes. * In addition to that, your repo stuff is practically an ORM. Even if for some (probably bad) reason you don't want to use SQLAlchemy, at least call your models: models. They are called that in every language/framework I've encountered so far and there is no good reason to break that convention and inevitably cause confusion. * You modules are overly specific: Having a module per class may be acceptable, a good idea or even necessary in other languages but it's not in Python. As it stands putting all your controllers in a single module would be perfectly fine. Even if your application grows, web applications can be usually be fairly well separated into more or less independent sub-applications. For Python web applications the usual pattern is to use MVT. You usually have an application/framework part that handles routing and dispatches requests to a view that corresponds to the path, the view interacts with the database through a model and renders a template and returns it as a response.
If you're just starting out, I'd recommend Heroku. They have great help documents and their dashboard tells you exactly how much your configuration will cost you. 
When you do things in the non-canonical way, someone reading your code will struggle to understand why or how it works and waste time figuring it out rather than doing what they intended to do when they opened up their editor.
I've always wanted to experiment with meshnets but never had enough local friends or local machines to try it out. With those many raspberry pis, you could easily set up a network and try it out and see how it works on a practical scale. For instance, are raspberry pis a viable option? With 9, can you spread them up and down your street and set up a local network? Stuff like that.
Cool, I somehow missed the imgur link there. Have you run any benchmarks to see what performance you could get from the 9 pis? Might be worth browsing or cross posting to /r/raspberry_pi/ for ideas as well.
&gt; What could have possibly gone wrong? You gave them your cc. if you were evaluating, the generous free tier should have been more than adequate.
&gt; They cut the bill in half. Could not talk em down to 0?
you can use any text editor and third party tools for massaging the code to bring it up to the coding standards
&gt; you can use freenode webchat to join in the conversation. just enter a nickname and #python as channel. i think you need to use a registered nickname to be able to post in that channel
App Engine does allow you to set a maximum budget per day.
Indeed. I always write a single quoted string rather than any of this namby-pamby no-op crap. if x: print "Yay!" else: "passé" 
You pay them to stay online.
well aint that something. lemme edit my post
&gt; &gt; I am a big believer in having developers work on the lowest spec &gt; &gt; machine possible as much as practical. &gt; &gt; Then you are a fool, giving a developer a fast machine doesn't mean they &gt; write inefficient code it means they can write code more quickly with less friction, I'm guilty of overstating my position. Shame on me. Nevertheless, I stand by my statement, but with provisos. Certainly it depends on the type of software the developers are working on. Software written for a narrow niche where you control the environment can be written to whatever hardware specs you want, in which case it doesn't matter if the developers are using monster server-class machines with 12 cores and 64GB of RAM since that's what the software will be running on too. Nor does it matter if you're writing (say) code for iPhones, or embedded devices, since the developers actually have to run the code on the device it's being designed for (or an emulation thereof). The danger is especially great in desktop and web software, where the common tendency is for the developer to insist he needs the biggest, beefiest machine he can get ('cos productivity', he says, while spending half the day on Reddit *wink*), and never tries the software on the sort of entry-level machines that his users have. It's a miracle if the average developer profiles his code *at all*, but when they do, it's almost always on the same beefy machine they wrote the code on the first place, not a 512MB entry level PC. The average developer, in my experience, has *no clue* what the user experience will be for the majority of his users. It's only dumb luck, and Moore's Law, that it doesn't utterly suck *completely*. (The worst examples of this today are probably [web sites with fancy UIs and large downloads](http://www.nngroup.com/articles/website-response-times/), written by developers on ultra-fast ADSL2 30 yards from the exchange, and are painful on regular ADSL and completely impossibly on dial-up.) Using the same sort of machine as your clients is a form of "eat your own dog food". Testing, profiling, and whole-application optimization (as opposed to micro-optimizing individual functions and methods) are some of the more tedious and boring parts of development, and most developers do as little of that as possible. It's hard to motivate most developers to do that, but if they're coding on the lowest capacity machine practical, pure self-interest will ensure that the code they write will perform adequately on their own low-end machine. &gt; if you don't understand why a fast development machine improves the &gt; process then I don't know where to start. This is not 1986 when compiling a bare-bones, lightweight text editor took 10 or 12 hours. It's 2014, I can download, compile and install Python in the time it takes to make a cup of tea, even on my slow ADSL link and under-powered computer. With a few exceptions, for 95% of your work day, your computer is waiting for you, not you for it. Having a faster, beefier machine isn't going to speed up the meetings with the project manager. Nor will it speed up the time you spend reading code, or documentation, or the time you spend clicking through the bug tracker looking for a bug that looks interesting but not too hard. Or the time you spend thinking about what code you're going to write, sketching on the whiteboard, or simply typing code into an editor. In my estimate, about 95% of the work of a typical programmer is already as fast as it can possibly get, because the limiting factor is not the computer, but *you*, the human being in front of the keyboard. That remaining 5% is especially noticeable, precisely because we're waiting on the computer, but in the big picture of what we do as developers, it's mostly unimportant. Of course, I could be wrong. If you think I'm wrong, the way to prove it is to demonstrate significant productivity gains of programmers with beefy machines, not *self-reported* gains but independent, statistical evidence from serious studies. (What I'd really like to see is double-blind tests, where some programmers are given machines with more memory, and others aren't, but all the machines are rigged to report the same amount of memory.) 
I named 'back' because it was supposed to contain the files for the admin (back end) section of the application. common was supposed to contain all the stuff that can be used in both front end and back end. Naming 'src' was the most pointless. I agree. Regarding repos_*, I initially did what you suggest. I mean repositories.user, controllers.user etc. But I thought naming it as user_repo helps to quickly identify the file when I see it in a file list (often in my editor). I just couldn't see any down sides of doing so. Regarding models, I think the models, as they are are usually referred to, are aware of the persistence and can save and load themselves. You may have noticed that my Entities are not aware of persistence layer and does not know to save or load themselves. &gt;Even if your application grows, web applications can be usually be fairly well separated into more or less independent sub-applications. Oh. I see. That was my only concern. I will look into MVT. Thanks for a really good feedback. 
Not from what I heard, but then I wasn't directly involved. To be honest, I'm surprised that they cut it at all. After all, we did have the instance on.
&gt; What's Morepath? Morepath is your friendly neighborhood web framework with super powers. It lets you easily create links between resources, and offers a range of mechanisms that allow you to better organize and reuse code. Morepath is geared towards this modern age of the web where more and more UI logic is moving into JavaScript, into the browser -- it does this by being great at creating RESTful hypermedia APIs. I didn't quite get what this means. Reading forward didn't help me either. Would anyone shed a light by any chance?
Please don't recommend heroku to anyone. Especially beginners. 
This is why I never bothered playing around with AWS.
Elaborate.
Make sure you enable [quota's](https://developers.google.com/appengine/docs/quotas?hl=nl). We use a daily limit of 2$ in development projects. Furthermore you should really have a look at your dashboard. I find [the old one](https://appengine.google.com/dashboard) better than the new one https://console.developers.google.com/project/apps~YOUR-APP-ID-HERE/appengine Find out what service is costing you your money. For any service you can find a decent "pricing" page explaining where costs originate from. Most likely you want to read [This one](https://developers.google.com/appengine/pricing?hl=nl)
&gt;It felt too complex to me, so I decided to leave it for now, and come back later when I'm a little bit more advanced with programming. It sounds like the problem was you didn't properly shut it off / delete your instance, and thus it was running the whole time -- it may have been doing nothing, but still it was running -- if you didn't shut it down then they don't have any way to know that you weren't actively using it, so they're going to charge you for the time. It also sounds like you chose some pretty ridiculous specs when you got your instance. I don't use Google App Engine or any of Google's Cloud services, but I have a Rackspace Cloud Server that I get charged about $20/mo for, but I specifically chose the cheapest options. When you got your cloud server you likely had to specify what operating system you wanted on it, and if you weren't careful you probably chose an OS that had a licensing fee, like Red Hat Enterprise, or something (which is why your initial bill is high), you may also have chosen an amount of RAM or Storage space that was, in hindsight, ridiculous, etc. Again, I have never used Google's Cloud Services, but Rackspace charges me $0.022/hour for my tiny personal web development testing server, depending on the specs of the Cloud server that I have, so if Google operates similarly, you probably have a server that's specced out to be charging something like $0.68/hour (with ~180 hours so far in September, that's roughly $124) -- that's gotta be **insanely** overpowered for your needs. Unfortunately, none of this will get your $654 dollars back, and you should quickly go in and delete your server now, if you haven't already done so.
Thanks for sharing! Have you tried it? Can you also have music files on the server, or is it "cloud" only? 
I'm going to use this...
Just make sure you set a billing alert if your bills exceed certain amount. Also, you can try out some higher tier instance on the cheap using [spot instance](http://aws.amazon.com/ec2/purchasing-options/spot-instances/). For example, the GPU instance spot price is usually 80-90% cheaper during work days and spike during holiday.
Or it's a way of preventing abuse. You could, if you were so inclined, roll out infinite free tier AWS accounts otherwise. 
Hasn't stopped Heroku from allowing free tier accounts without payment authentication.
Is it just an alert or does it actually kill the instance before the limit is hit?
Any major differences in the service provided? 
It's just a warning. http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-billing-alert.html Still better than nothing. Before this feature implemented, stories about accidentally getting billed thousands of dollar on aws is pretty common, but amazon usually refund them.
Thanks. I just sent them a message using your link. I hope they'll be kind enough.
&gt; It's the Visual Studio of Python. Is that supposed to be a good thing?
Hey, thanks for this feedback; this means I have work to do improving the documentation at least. Did you read anything on the website at http://morepath.readthedocs.org at all? Morepath is a web framework. It helps you make resources available on the web under URLs, such as "/users/blah", or "/documents/10". By combining these you can build a web application. These resources in traditional web applications tend to be HTML pages. In recent years you many web applications take a data-driven approach, typically having JSON resources. Then there is code in the browser that does ajax requests to those resources and constructs the UI somehow. Morepath doesn't deal with the client-side part, it just tries to be a good backend to such UIs. Morepath aims to be small but still has a lot of power. The power comes out of a range of features that help you write more reusable code. One way it does this is by separating the model object (with data in it, say a User instance or a Document instance) from the views used to represent these models (as JSON, typically). I won't go into details, but it makes more easy to use inheritance and composition patterns to reuse view code. Morepath also makes it easy to create links to objects. Morepath knows how to create links for the classes you put on the web as resources under URLs, i.e. you can say request.link(my_user) or request.link(my_document) and Morepath will figure out the rest. This kind of linking is very useful when you want to create a RESTful HTTP API. REST is a style of creating a HTTP API. The idea is that the client code (in the browser, or some custom client code you wrote) does not know about all the URLs of the service, but only a single entry point, just like when you go to a website you don't know all the URLs to type, you just go to the home page. You then navigate to further pages by clicking hyperlinks, and similarly there are URLs embedded in the JSON and the client can follow them. A modern term for such as REST HTTP API is "hypermedia API". This is because the word "REST" has eroded from its original meaning to the point where people can give REST best practices advice with a straight face without even mentioning links. But they're basically the same thing. I won't go into the details of the benefits of doing web services this way, but basically you decouple the client more from the server; the client only needs to know how to understand the JSON, it doesn't need to know about the URL structure of the server so you're relatively free to change it. Besides helping with fine-grained reuse, Morepath also makes it easy to compose a larger web application out of a range of smaller ones. The benefit of doing that is that you can develop each web application separately, test them in isolation, and then later combine this. This is a kind of "coarse grained reuse". There still need to be a way for one web application to link to another one, and this recent release improves that story. I hope this helps a little! 
Heroku doesn't start charging you after a year? :-)
Why would you need AngularFire? 
I tried Spyder. It was the first and only editor I've used that actually lagged behind my typing, and I don't even touch type. Way too slow, tries to do too much at the wrong time. Like, I'd start to type a function: def f and it's already telling me I have a syntax error. No kidding it's a syntax error, that's because I haven't finished typing yet. Meanwhile all this annoying bling (tooltips, icons, ~~dancing paperclips~~ etc.) keeps flashing on and off distracting me from programming.
I'm not a big fan of IDLE personally, I just don't care for its look and feel. But I'm a big fan of lightweight development environments instead of enormous bloated IDEs, so IDLE gets my approval.
Countless, but as far as my use case was concerned none were relevant.
You have reserved and elastic instances. Elastic can only utilize it's maximum amount of resources for a set amount of total time, determined by the amount of time it doesn't use a lot. Storage and reserved, that's fixed. 
It takes a bit to learn Django, like any other framework. I think others (flask?) might be a little easier, since Django is pretty "heavy" (ie. contains a lot of stuff). Then again, it's not too hard to learn the basics. They have a 6-part tutorial that really does cover all the basics (https://docs.djangoproject.com/en/1.7/intro/tutorial01/). You could step through that, then start modifying it to fit your need. My advice: it's *very* hard to make a complete product. Or even a complete feature. When you're starting out, it's ridiculously difficult. However, it's easy to make one small step of something. Step 1: install django. You could probably do that. Step 2: create a blank project. Step 3: make it say "hello world". Etc, etc. If you try to make your whole site, that's crazy. But if you just keep adding on small steps, you start to make it there. I constantly remind myself to stop solving multiple problems. One small step at a time, it helps. Good luck!
Your code is badly formatted, use the code button(`&lt;&gt;`), or prepend each line with four spaces : print("Knock knock.") input() print("Who's there?") input() print("Interrupting cow.") input() print("Interrupting cow wh", end = '') print("-MOO!") I see no real difference between doing this and using a single print call.
Or turn it off, most cloud providers don't charge instance costs (when turned off), they will still charge hdd space tough. 
Some songs are purely instrumental. And even if the original commenter never comes back, other people may have the same question, and they will see the answer in the comments.
Thanks, by the way I copy and pasted it, it actually structured in my actually code.
You pay for convenience and fast access to extra (temporary) hardware. Like any prostitute, if you stop paying they will be gone. There is a good chance amazon won't send a big guy with a baseball bat after you tough. 
You have exactly hit upon what keeps me away from most of the cloud. I use Linode which gives me a good virtual server for $20 a month. I can spin up as many as I want very quickly or spin up extra powerful servers. But the key is that I know that my limit is $20. If enough users come along to require more servers each server load of new users pretty damn well generate more than $20 in revenue. Whereas I tried the Amazon cloud trial and their pricing scared the shit out of me. One good denial of service attack and my bill would be astronomical. Or a miscalculation on my part, or ... But putting cost caps on what they will provide doesn't help either because if something comes along and I use up my cap in the first day or two of the month then presumably the whole month might end up costing 10 or more times what I budgeted or it might mean that they shut me down every time I hit the cap. Some people will argue that if you can't afford a variable bill then your business sucks, but a real business is built on solid budgeting. Surprise budgeting is piss poor planning. 
I mostly agree but 2 points. for 2) i think ctrl+shift+n is not as good as sublime. i used both ct+sh+n and ct+n but i maybe wrong. I didn't use pyharm for 2 months and when i did go back to do a refactor i found that ctrl+shift+n was harder to switch than sublime but ctrl+n is really good. I think sublime is a bit more intuitive. Will need to go back and have a look again to make sure. for 4) yes i know its builtin but never used it as much so far on git im using terminal. so can't say for sure but ive seen a person doing all his git with no mouse inside sublime. not 100% sure if pycharm supports because ive always done it in terminal its just a ctrl+tab anyway not a big deal. hopefully the jetbrains guys read this staff too so they will improve it, can email them the conversation if you want.
Use admin, backend or frontend as names. They are not so long that you gain anything significant by abbreviating them but I'm probably not the only one who is going to be confused by your abbreviation. The fact that your entities as you call them don't know how to save or load does not conflict with the name model. The pattern you are using is commonly referred to as unit of work pattern and is also used by SQLAlchemy's ORM, in which you query the database through a [session](http://docs.sqlalchemy.org/en/rel_0_9/orm/session.html) to which you also need to add models, if you want to insert them into the database.
The [documentation](https://docs.python.org/3.4/library/functions.html#print) describes exactly what the `end` keyword argument does.
Thanks for the feedback. It does help. I may give it a try and see it for myself if it would make sens in my development practices.
You're also going to need either special drivers or a mac to do realtime audio, FYI.
I once had a stripper ask me if I wanted to be her body guard or whatever the current term is in common usage. Probably would have been good money for a couple of hours work. The problem isn't the baseball bat but rather all the whining afterward. 
+++++++ I really have to question the value in some of these services. 
Google? Customer service? Hope you know someone at Google...
My opinion is along the lines of it really not mattering what you do at the level of this framework. Whether you use Web2Py or Flask.. that, to me, feels like such a thin layer in between the actual important parts that no matter which one you use, you will not be spending much time there. If your code is well organized/structured, then your Flask (my preference) code will only be around 10-20 lines of code, max. Everything else will be some form of HTML/CSS/JS code, or the interface with your data models/database. So really, worry less about the framework-- but write your code in a way that no matter which framework you use, it will be very easy to integrate with. After all, you're just getting inputs from the user and sending outputs back to them at this point.
Thanks a lot for this response I will definitly use this piece of information I decided to use Web2Py for this project and upcoming projects I'll evaluate to Django(If a project gets really big) Will still look in to Flask and Django just to see the differences and see how they work/
In which way? Examples of the way I used it for variable star analysis? Could be a nice topic, I could show a variety of ways of figuring out how the pulsation modes in stars or whatever from noisy data?
Thanks, pyo had exactly what i needed!
Most interesting use would be to rewrite lines, e.g. &gt;&gt;&gt; print("abc");print("def") abc def &gt;&gt;&gt; print("abc", end="\r"); print("def") def This can be used to create things like progress bars, ect.
I found their mentions of Java and .NET off: - .NET is not a language, it is a platform. They probably meant C# - Java has not been proprietary for a few years, and OpenJDK 8 is supposed to be the official reference implementation. 
Without looking at the code, looks like just other storage services. For playing music off a remote server, I'm currently using CherryMusic (http://www.fomori.org/cherrymusic/), which is also Python-based. It works well enough both on desktop and mobile (and even continues playing when backgrounded in mobile safari, which is nice).
Not true. I have been receiving "your account will be shut down immediately if we don't get paid" emails from them for like 4 accounts for the past 8 or so months. It's a standoff now. Edit: It's only like $8 total but still...
&gt;if I wanted to be her body guard or whatever the current term is in common usage Pimp?
EDIT: Poster who replied to me corrected me; I had to install ASIO drivers on my Windows box when I was doing audio stuff. Sorry, I did some quick Googling before, but wasn't able to jog my memory. I can't remember, it has been years - I think the drivers were called JACKAudio or something. It's not that some Windows boxes won't be able to just do realtime audio out of the box, it's that a not insignificant minority won't be able to.
Heh... my bad. Should have the code now.
Awesome! Does this mean 3.3 support is coming soon? Having "yield from" support would mean I could dump CPython in production... :)
 "123".isdigit() == True "abc".isdigit() == False
What you are actually asking is whether a string can be parsed as an integer, which is actually quite a different question than your title, which would relate to checking the type of a variable using `isinstance()` or `type()` or something like that. To see if a string can be parsed as an int, just go ahead and try to do that. If it fails, an exception will be raised which you can catch and act on accordingly. 
 try: c = int(choice) except ValueError: c = None print "Not a number" if c != None: ... Edited per /u/Proselyte5's valid criticism. Also see /u/alenajoykrieger's comment.
"except ValueError:" would be a little safer
Oddly enough, I don't end up using Eclipse for Java. Netbeans seems to be easier for me to use out of the box. I haven't really had much experience with IntelliJ.
fixed it, thank you.
TIL about the optional `else` clause for try-except blocks. I was actually writing up a rant about how that else clause will always be executed (assuming it worked the same as a for-else or while-else), thankfully tried it for myself before posting, and then went to the documentation to learn more. neat.
It's Amazon. They will bend over a substantial amount to make the customer happy. The cloud itself was really a pet project and it makes ludicrous revenue. Amazon does similar to meet the customers needs in other areas doing things like throwing development hours at it, etc. This is why it's basically a zero profit corporation, take all the money you make in one department to spring forward a new one (thus allowing you to innovate and carve out new market territory).
I had to set the `PYTHONSTARTUP` environment variable to `$HOME/.pythonrc` for this to work. Just a heads-up for anyone who might be wondering why it seems to be broken.
You really should though, especially if you're not maintaining it. I forgot about a Windows VM I spun up at Rackspace for 1 night, then 4-6 weeks later got an email from their support department saying it had been disabled due to abuse. Hackers had taken it over and started doing nefarious things. Luckily I was only on the hook for the accumulated hourly usage, and no significant bandwidth. 
Yikes, can't believe I left that part out (arguably, it's _the_ most important part to getting this to work). I've gotten so used to just updating my `.pythonrc` that I totally glossed over the environment variable which makes it all possible. I just updated the post. Thanks. :)
You don't need to set `c` to `None` if you add an `else` clause: try: c = int(choice) except ValueError: print "Not a number" else: ...do stuff knowing that c is definitely an int...
The added `else` for for/while/try is generally disliked for its name. It really could have been made more obvious with a keyword like `nobreak` for for/while and something like `success` in try/except. I personally think it's easy to remember once you've read the docs once, but lots of people have brought this up and complained about it.
 if type(a) is int: print 'I'm an int' else: print 'Not an int' 
Interesting, useful for many I'm sure, but I very much do not want to run all of that every time I open up my interpreter. If I find myself importing something a lot, it's generally in one project so I just do `-i` with a python script with the same sort of rc instead. I can think of a case where I have an app.py that I absolutely do not want to run inside my current directory, as soon as I open an interpreter with those same settings, it will execute it. That could be dangerous. 
I used to really dislike the naming of else for for loops, but now it seems very natural- the whole point is for a "search" loop that breaks as soon as it finds something, so the mental reading is like "else if nothing is found:"
I wanted a fairly clean way to do imports and not break on errors, so I did this: def do_import(module, description="", fromlist=[]): try: __import__(module, fromlist=fromlist) except: print "Unable to import " + (",".join(fromlist) + " from " if fromlist else "") + module else: print "Imported " + (",".join(fromlist) + " from " if fromlist else "") + module do_import("bs4", "BeautifulSoup4", ["BeautifulSoup"]) do_import("requests", "requests") A slight edit to be a little cleaner. Old versions: https://gist.github.com/blha303/d647b24b2cdbdc9a164a Thanks for your suggestion, theli0nheart :D
Codewars now supports python.
It's that it's reusing a keyword that means something totally different in a different context. Even though my intuition makes sense to me, a more consistent (though less practical) behavior for the looping else might be to execute the clause if the loop is never entered. Many think that it would have been better to use a new keyword (such as complete: or noexcept: for the looping and exceptions). Personally, I'm against adding new keywords to the language at this point, since they might overlap someone's variable name and break backwards compatibility.
Then you are very lucky. I have built premium clouds using the same stack amazon uses, worked with many large scale companies on AWS, and deployed very large scale(5000 req/sec at peak) apps on AWS. My entire career is in large scale hosting systems and web apps, and virtualization clouds. In my experience AWS is overhyped. Once you factor in the whole setup with EC2 instances, EBS, Elastic Load Balancing, RDS, S3, offsite back-ups, etc. of a properly setup and redundant system, it adds up. However, the worst part is the man hours. You get a loose bag of parts which still takes times to put together, and you get no support, so you are completely screwed when they fuck up. If you do want their terrible support to get them to fix their problems, [it costs way too much](https://aws.amazon.com/premiumsupport/pricing/), particularly for large clients. Not to mention how slow their systems are. I have seen one cut their number of virtual servers in half leaving that platform, and a couple who couldn’t even use them because of how terrible the network latency is. And lets not forget the outages and EC2 instances that regularly disappear. Yes, they have some neat stuff, but they aren’t all that good. If you have to have AWS, look into someone like engine yard. They do a good job of building a proper system that can work with AWS. Fully managed too. Otherwise checkout RackSpaces(Cloud) and Linodes options. All work well, and you can get fully managed with premium support for what AWS would only provide terrible first level support for. Major savings on man hours, and peace of mind for vacations and sleeping. Even without it is major difference. For example, Rackspaces cheapest on-demand virtual server with 4 vCPUs is $0.148/h while AWS is $0.210/h, and Rackspaces come with great basic support, AWS with none. Plus all of them have a lot of bells and whistles now, using the same stack as AWS(Xen, HaProxy(load balancing), etc.), and data centres all over the world. 
&gt; I also don't have the time to spec out how it should work. &gt; I just want a working copy. This sounds like a disaster waiting to happen. Any competent freelancer is going to want a good spec or else risk getting dragged into an argument after-the-fact about what "working" means.
Happened same with AWS. I was curious to try their free tier and I signup. Later I had totally forgot it. An 1.5 year later, I came to know that from past 4-5 months still actively running and the pending amount is $300. In India $300 is lot and I did not know what to do. I contacted their support and explained them everything. They gave me complete fee waiver :-)
Seconded. I'm sure a basic spec won't take OP too long to put together. What's an hour or two of work vs days of back &amp; forth arguing emails?
Don`t immediately save parsed data items direct in SQL db or NoSQL db, it will be slow down you system. The right way is parse data to CSV files and then do bulk insert into storage. it will be fast and do not blocks yours spiders.
The is the Python 3 implementation of a Python 2 and earlier feature. In an effort to make Python 3 more consistent, print is no longer a special statement, it is simply a function. In Python 2, leaving a trailing comma on a print statement caused the standard newline to be omitted. This is particularly useful when writing simple console programs where you might want to rewrite the current line (say for a simple progress bar) using \r (carriage return). You don't want newlines to be printed as you'll constantly drop down to the next line. Python 3 obviously needed a way to replicate this behaviour, but by making it a name argument to the print function, it is not more powerful that the special syntax in Python 2. Not that it really makes much difference. Anything special you could put in end you could just put in the string, however, it still serves the important purpose of letting you omit the standard newline at the end of a print.
Timedelta may solve the immediate problem but is a poor choice because it won't provide any indication of what timezone you are in. As a result, simply inspecting a datetime object will provide no indication of whether you've already added an hour to it or not. pytz is the generally accepted way to create timezone aware datetime object. http://stackoverflow.com/questions/4530069/python-how-to-get-a-value-of-datetime-today-that-is-timezone-aware
What ?
&gt; If your developers aren't testing on the target hardware/platform/niche and the &gt; only way you have to make them do it is by giving them obsolete computers &gt; then you have a bigger issue. I didn't say obsolete computers, don't be an ass. I said the lowest spec machines you can use. As opposed to the highest spec machines you can afford. I'm not saying you should dig a Pentium II with 32MB of RAM out of the trash and using that as your development machine. That would be absurd. Although, quite frankly, the idea of projects like OLPC and the Raspberry Pi is that you can get some really impressive and productive work done on cheap, low-powered devices. But that's another story... &gt; A 5% improvement in performance (assuming we take your figures as gospel) I never said a 5% improvement of performance. I said that perhaps 5% of the developers work day is subject to improvement. You should think of a 5% of 5% improvement, or 0.25%, which is just lost in the noise. That's equivalent to saving less than a minute and a half each day. Of course, these sorts of numbers are pretty meaningless in isolation. If you genuinely could save a minute a day, or even 20 minutes per day, or an hour, does that actually correspond to *better performing software*? Or would that mean that your developers would just spend 20 minutes longer each day on Reddit? Or perhaps meetings with management, or adding new features. **All else being equal**, giving your developers faster machines *doesn't* automatically make the software perform better on low end machines. The opposite: people tend to write software for what they expect, and if developers expect high end machines with a lot of RAM, powerful CPUs and fast Internet connections, they will tend to write software that requires high end machines. But, and this is the point I am making, if you want to [ensure your dog food is palatable](http://www.baselinemag.com/imagesvr_ce/baselinemag/images/stories/slideshows/084711_bsl_sucky_jobs/SS_084711_bsl_sucky_jobs08.jpg), then [you better eat it yourself](http://www.zdnet.com/blog/carroll/microsoft-eat-your-own-dog-food/1870). The greater the distance between the development machines the coders are using, and the production machines other people will be using the software on, the greater the chances are that the user experience will be lousy. The closer the two are, *pure self-interest* will ensure that the developers keep the software usable at the low end. Assuming that management allows them to: sometimes even the best developer intentions in the world run up against management which won't let you fix performance bugs. [Joel Spolsky has a story about this](http://www.joelonsoftware.com/articles/fog0000000012.html) from his days working on Juno: "AOL was signing up members at a furious rate, in part because it provided a better user experience than Juno, and we didn't understand that, because we didn't eat our own dog food. And we didn't eat our own dog food, because it was disgusting, and management was sufficiently dysfunctional that we simply were not allowed to fix it, and at least make it tolerable to eat." *Performance is just another feature.* If you're not using your software on the low end machines that you claim to support, chances are high that your software will be painful on those low end machines. And "using" doesn't mean spending five minutes once a month checking that the app opens and the menus are all spelled correctly. 
Windows 
Ehhm yea, you still have to pay what you used. But they will shut it down.
always use prepaid card for test :/ try to negociate ...
As a reusable function (this is a little neater IMO): def get_comment(): html = requests.get("http://www.youporn.com/random/video/").text comments = re.findall('&lt;p class="message"&gt;(.*?)&lt;/p&gt;', html) try: return "----" + random.choice(comments) + "----" except IndexError: # no comment return get_comment() *They'll be soo many twitter bots...*
They could be possibly using Ansible or Fabric if they are asking Python related questions. Look into that. Also Vagrant and docker might come into play.
Looking forward to trying this out! Thanks for this :)
I've worked many years for few Java based systems. Scripting for WebLogic Scripting Tool(WLST) was the starting point. Interfacing with file-based data exchanges, SAP RFC calls, and lots of simple server-based batch programs have been written in Jython by ease of use with rather short time. It is a definite time-saving robust tool for Java-based developers.
In the land if the blind the one eyed man is king! The internet can make everyone look smarter than yourself. Over promote. Get the job. Move on :-)
&gt; If you do want their terrible support to get them to fix their problems, Only a complete fucking moron would use Ubuntu or Debian for their servers. I'd bet money, that's the "issue" you encountered with EC2. ... and FYI the little system I was talking about could hit 5k/second on a single micro instance (that's 0.013/hour bud). 2 app servers + a reverse proxy cache, can handle well in excess of 100k concurrent requests. Your "very large scale" apps on AWS, don't impress me. Like I said, amazon makes sense for **professionals** that ... actually know what they are doing. If you spring for all the bells and whistles and support ... stumble with the basics, of course it's going to cost you more time and money ... if you use just their basic services it's no different than any other VM. Though it sounds like you're getting tripped up because of the vast amount of features they offer. Like just because they are there, you have to use them ... pay for them ... and waste your time failing to understand how to use them efficiently. All this sounds like an issue with your competency as a cloud "developer" or "engineer" or what-ever you like to call yourself. Which is sort of the category of folks I implied weren't a great match for AWS. Don't feel bad, marginally competent in this field is like the top 5%.
omfg pythonrc take me im yours. for a guy who spends as much time grooming my bashrc as myself, I cant believe i didnt think about this
Here's mine. Interesting parts are commands memory and cheap debugging. # -*- coding: UTF-8 -*- # enable syntax completion try: import readline except ImportError: print("Module readline not available.") else: import rlcompleter readline.parse_and_bind("tab: complete") # modules I often use from pprint import pprint try: from tabulate import tabulate except ImportError: pass # command history import os import atexit # file pyhistory must be created first, e.g. with `touch` historyPath = os.path.expanduser("~/.pyhistory") def save_history(historyPath=historyPath): import readline readline.write_history_file(historyPath) if os.path.exists(historyPath): readline.read_history_file(historyPath) atexit.register(save_history) del os, atexit, readline, rlcompleter, save_history, historyPath # cheap debugging def dbg(fun, *args, **kwargs): # evaluate and print local vars in case of exception try: return fun(*args, **kwargs) except: import inspect v = inspect.trace()[-1][0].f_locals pprint(v) raise def return_exception(fun, *args, **kwargs): try: return fun(*args, **kwargs) except BaseException as e: return e def return_exception_with_locals(fun, *args, **kwargs): try: return fun(*args, **kwargs) except BaseException as e: import inspect v = inspect.trace()[-1][0].f_locals return e, v 
It seems everyone agrees on "The Pragmatic Programmer". I shall buy it. I'm glad to see "The Algorithm Design Manual" in there. It's a brilliant way to refresh your algorithm's knowledge. Really great book I think.
Go with Python 3 unless you have a compelling reason not to. If you don't know, you probably don't.
If you want to do unicode, use Python 3. If not, I'd stick with Python 2.7. Honestly, they're not that different, but most of the code out there is Python 2.7 based. Figure out what 3rd party packages you want to use and decide from there. You probably will have to make some compromise if your code is big enough. It'll give you a chance to learn to write compatible code since whenever you do upgrade, it'll be a smooth process.
Add ".py" to the PATHEXT variable. Depending on how the filetype associations are set up (I don't know how ActivePython does it) that could fix the issue.
unicode is not the only reason to use python 3. there is also the re-worked standard library, exception chaining, and all the other features why eternal stay-sayers rant that they want a python 2.8. sure, you can write code now in python2.7 in a future-proof way, but that hassle is unnecessariy these days.
IPython would do all the readline stuff for you (and more). Edit: Not sure what's so controversial about this?
This. It's like renting a car -- even if you leave it in the parking lot for the entire duration, you still have to pay. You're paying for the dedicated resources, not the actual use you make of them.
Nice idea. Will download and play with this this weekend. 
If you know Python, I'd appreciate enhancements on GitHub. There's bunch of error checking that could be done.
Been a while due to health issues. But i am a python dev with 20years soft eng experience. So sure will have a look. 
Oh. I didn't notice that you wrote from /r/Python and not /r/Kindle.
&gt; .ipythonrc Unfortunately still does not work with django's manage.py shell at all :(
I know about IPython, thank you. I tried it and it's not as amazing as people pretend it to be. I would've enjoyed ipdb, but it fucks up my history when it loads the whole ipython libs... If it's a "all or nothing", I'd rather stay at nothing.
I'm sorry but can you give me an example.I need more explanation.Thank you very much P.S:sorry for late reply
It really depends on how your periodic wave/function is represented. If sampled discretely/numerically, then you can use `numpy.fft`. If you have a function (symbolically), then you will need a symbolic package such as `sympy`.
Thank you! This solves a real problem for me. My wife did agree to have a network cable run to the bedroom, but she won't (for obvious reasons) allow me to use devices with a backlit screen. So until now I was sitting there with a Kindle DX full of literature. Not any more...
AWESOME. Thank you SO much OP. I'll look at the source when I get home.
It is meant to pull self posts from story-based subreddits like /r/tifu, /r/talesfromtechsupport, /r/nosleep etc. I want to add the ability to create books from single posts via URL. I will consider pulling some comments with that. If it works out, I may create something else for /r/AskReddit and similar discussion-based subs.
:D
The corollary that follows from that, is that the file doesn't actually have to be $HOME/.pythonrc. I've had mine set to ~/dev/utils/startup.py for a while now.
Woah! 
Yeah I'll message you after work, maybe I can use some of my code and somehow enhance your code or something.
I look at this the other way around: that way, my virtualenv stays the way it will be in test/production. I would hate to get all the way to that point, only to find out I forgot some random import in my code because it was already covered by my .pythonrc.
Essentially you're just going to have some thin layer that is going to handle request and make database queries. I'm going to guess that 98% of your code is going to be HTML/CSS/JS, and for the backend stuff, anything will do (although Django in this case would be an overkill), but I highly recommend Flask. 
Just wondering, as I am setting up a startup company for a web app: what distro would you actually recommend if Ubuntu and Debian are a no-go? RHEL/CentOS?
I will definitely use this for TFTS, thank you!
What do you need to do with MWS that the library doesn't support? Why not just fork that repo yourself and build those features on? Or is the protocol stuff a bit too hairy to deal with? I'd agree with /u/jnvilo, raise some issues on the project so that there's something concrete to discuss ... 
No. Python3 will soon be deader than disco.
arch, or another minimalist distro.
But Arch is rolling, while Debian has stable releases which are supported for a long time and thoroughly supported?
Can you clarify what you mean? I use virtualenvs all day long and as long as the `PYTHONSTARTUP` environment variable is set, it works like a charm.
Nah, Eclipse/pydev for python, Netbeans for Java. Odd, I know.
ah had not considered that. Still I imagine there are less bloated distros that are stable, I would be curious as to [u/orangesunshine](http://www.reddit.com/user/orangesunshine) would suggest.
Yup.* *First I'm not a RH fanboy, it's just the easiest sell to an enterprise. Fact is I'd rather run FreeBSD jails, than Xen ... but I live in this world rather than a perfect one and so I've found RH is the best of several rather shit choices. If you want newer versions of system softwares then Fedora, though that only gives you a year's worth of support. Though, there's a new thing in the latest Redhat/CentOS ... Redhat Software Collections. Download and install all your dependencies with a package manager ... "horray". The biggest complaint against RH, was "old" packages ... which is a terrible argument ... First because you shouldn't have any system dependencies. You shouldn't be installing *anything* for your application with a package manager. Use /srv or /opt ... automate it. Second because the alternative most people offer is ubuntu/debian, and their system packages are notorious for being packaged/patched into oblivion. The apache you're used to on Ubuntu at minimum has a completely off-spec /etc ... and at worst has breaking changes at compile time. Last I checked there were some very critical patches to things like ... Java, and all of its dependencies were trashed. Oh, and don't forget the Kernel. Debian/Ubuntu developers are notorious for making patches downstream ... and either not submitting them upstream or ignoring the upstream developers when they are rejected. Redhat has a reputation for having made HUGE contributions to the kernel and ecosystem at large. Last ... Canonical doesn't employ a staff of developers ... though they offer "enterprise" support. Not sure how that scheme even works. If you find a bug, best their technicians can probably do is open a ticket on the same bug tracker you can access. Redhat, best they can do is let you talk directly to the maintainer they *employ* ... make a patch ... and have you rockin' and rollin' in no-time.
You should cross post it to /r/kindle Edit: nvm you did already. 
I already did. I'm a mod there, heh.
&gt; exception chaining, You can handle exceptions in Python 2.7 to the same level, even it requires 2 more lines of code. &gt; and all the other features why eternal stay-sayers rant that they want a python 2.8. I don't want that...though I wouldn't mind bug fixing the future module to actually act like Python 3. Why did dictionaries have to no longer sort things of mixed types? Why is it string bugs go away when you don't use unicode in Python 2 or don't use future in Python 3? I want a single code base.
Yes, but I don't need to explain. 
Err, you seem to be missing something here. This will import the module, but the reference to the new module will be just lost inside your function. Maybe you want something like: globals()[module] = _ _ import _ _ (...) Though that doesn't account from fromlists etc. 
Do I need to be on a unix based OS to install it using pip? 
Windows has pip, but I don't know. I'm new to all this. I have not used any OS-specific code, I believe.
Heroku stops your instances on free tier if they aren't used. So it takes some time for them to start up if they need to be started. But you can use pingdom or something similar so that they are always used. And Heroku is Paas(just git push -&gt; magic -&gt; running server), AWS is Iass(you have to install stuff or use already made AWS image. But you have whole virtualized instance).
I wanted to try this, but kindlegen is not available for my platform (bsd). Maybe this could be a drop in replacement? https://pypi.python.org/pypi/ebookmaker/0.4.0a4 EDIT: Scratch that. The library depends upon kindlegen.
Arch would have been better if they did like FreeBSD and ports ... instead they kept the whole Gentoo rolling release absurdity going. ... Gentoo was dumb enough with the whole 'compile your own packages for "speed" ' ... stupidity ... Arch is more or less the same, except offering a new level of stupidity emphasizing the rolling release as an advantage ... '0-Day release for all system packages ... for "stability"' You want a 0-day for your /srv or /opt ... okay ... but you *never* want untested, unsupported packages for your OS.
Pulling comments would make this a really great tool. I'd love to be able to read long discussion threads.
I posted to OP to be careful of cloud services and gave a basic example. You came along with a explanation of AWS basic features. I simply responded with what my experience was in these technologies, and the issues I have encountered with AWS, as well as some of basic examples from other providers. You responded with a very rude response criticizing me greatly because I dare to point out the down-sides of this massive company. &gt; Only a complete fucking moron would use Ubuntu or Debian for their servers. I'd bet money, that's the "issue" you encountered with EC2. No, you are not a complete moron for using those. I personally think RedHat is ideal, but the world is not over if you use those distributions. The fact to that you would refer to someone as a complete moron for using them shows how unstable you are. You need to take a less emotional stance on something so inconsequential. As well, my issues were not at the OS level, but at the hardware and hypervisor level. EC2 instances were disappearing, which is not uncommon in my experience. What I don’t like is having to pay for support to have them fix an issue with their system. Something easily and freely accomplished at other providers. It also troubles me from having built large Xen based clouds before, and making contributions to the source of some of the technologies AWS depends on, that they could have these kinds of issues because I know the technology is there to serve their customers better. &gt; ... and FYI the little system I was talking about could hit 5k/second on a single micro instance (that's 0.013/hour bud). 2 app servers + a reverse proxy cache, can handle well in excess of 100k concurrent requests. Your "very large scale" apps on AWS, don't impress me. I highly doubt this, particularly is you are processing anything significant. AWS’s cheap micro instances are very underpowered, and their network performance is terrible. As well, you seem to be exhibiting an angry me too vibe by saying that you can somehow make the weakest possible server on AWS can handle the SAME r/s as an entire system I have setup. What an odd coincidence. Also, systems aren’t always comparable. A system that has a lot of connections to outside APIs, out of band video processing, DBs, etc. is not the same as some HAProxy server serving cached content. I also gave that example to show I have robust experience on the platform, not to be competitive. &gt; Though it sounds like you're getting tripped up because of the vast amount of features they offer. Like just because they are there, you have to use them ... pay for them ... and waste your time failing to understand how to use them efficiently. I never said I was tripped up on their features, I spoke how a system can cost more then you think, particularly once you factor in man hours, and how their system can let you down. I know how to use them. &gt; All this sounds like an issue with your competency as a cloud "developer" or "engineer" or what-ever you like to call yourself. Which is sort of the category of folks I implied weren't a great match for AWS. Don't feel bad, marginally competent in this field is like the top 5%. This is an incredibly rude thing to say. I am not here to have a dick measuring contest with you. I was pointing out that AWS is not a robust as everyone thinks it is, and from a managerial stand-point, total costs can escalate. I hope you take what I am about to say seriously: You have issues. You should not be getting so emotional worked-up, defensive, and rude over someone criticizing a large public company, or over someones OS choice. In the greater scheme of things, and in your career, these things matter little. I clicked on your username and was astounded by your ego and how critical you are of others and their technology choices. If a start-up chooses Redis over Memcache, Ubuntu over CentOS, RackSpace over AWS, etc. it is fine, and every interaction with someone is not a competition. I have a strong feeling your attitude extends beyond internet forums, and affects your personal life and career. If you ever want to talk about how to find peace and change yourself for the better, please don’t hesitate to message me. 
Also, a much easier read than CLRS =]
I withdraw my recommendation. I used Spyder in grad school (which was only a few years ago) and it was pretty good then. I just tried to start it again and it crashed.
First let me make it abundantly clear to you. I think you are stupid. Don't take it personal. I'm not upset or anything. It's just something you're going to have to deal with ... in your own time. &gt;EC2 instances were disappearing, which is not uncommon in my experience. There are bugs in the *DOWNSTREAM* Ubuntu/Debian patches to the Linux kernel. They've been there for over 5 years ... I can repeatably demonstrate several of these ... it'd take all of about 15 minutes for me to spin up a Ubuntu instance and show you. &gt;I highly doubt this, particularly is you are processing anything significant I can achieve these sorts of numbers due to *intelligent* planning, and cache-ing levels. I use memcache extensively ... along with a reverse proxy cache ... all this runs just fine on a micro ... I didn't say it could only hit 5k ... I said it could *easily* hit 5k on a micro. I said a small cluster was hitting well over 100k, you think 1 of the app servers isn't able to best 5000 req/second? I know the same app on an m2.medium hits over 100k ... If you are going to retort with some emotional childish bullshit, about me using the 100k # too much ... it's because I honestly don't remember exactly what the results of the bench ... I just know they were a *hell* of a lot higher than 100k. &gt;I know how to use them. Yet you were unaware of a bug that's been known for 6+ years with Xen ... and blamed it on the provider rather than OS you were using. Pretty amazing how I guessed which OS you were running ... huh? &gt;This is an incredibly rude thing to say. Not only are you incompetent, you're stupid ... on multiple levels. You think being a nerd makes you smart. It doesn't. It just indicates that you have a *major* deficit. So you're at best average intelligence matched with a really really low social IQ. I have no right to think someone making *basic* errors is incompetent? No right to call someone doing moronic things ... a moron? I'm arrogant? I'm lying about my experience ... because it sounds impossible to you? Consider the fact that it's not. Then consider what I'd think of someone telling me things I've heard *thousands* of times, that I know to be mistakes/misconceptions due to incompetence.
Eventlet is. PyPy supports greenlet which is at the core of both gevent and eventlet. But gevent has more C code underneath with PyPy can't optimize. But it can work nicely with eventlet. 
I'm torn on this idea. On the one hand; it's not that I have zero time to do a spec. It's just that I can't share in the responsibility of figuring out how it works in the other languages &amp; making sure that I have equal functionality. On the other hand it's not complicated to discuss. If I need 3 reports and 6 functions, they either work or they don't. I either get the same report that I would have gotten if I used the Java examples or I don't get an output. A developer would need to know which parts I need, but I don't feel I should have to tell them the details of their job. 
You beautiful sonuvah bitch! Good show! Goooood shoooow!
my anaconda dont want none unless you got buns hon
&gt;What I said was that my preferred OS is RedHat, but that it is all right for people to like Ubuntu or Debian too if that is something they prefer and that they aren’t a "complete moron” for doing so. People can eat sewage ... though eating sewage is moronic ... if your goal is to eat food. Just like building a slow and unstable application is moronic if your goals are fast and stable. If your paycheck depends on your success ... the goal is to be good at what you do ... isn't it? I know these subtle nuances have escaped you thus far. You clearly have the impression that you're capable, the fact I don't share that impression isn't because of some internal problem I have with my brain ... rather my statements ... come from confidence. I know that Ubuntu doesn't work with Xen. I know that only a complete fucking moron would chose a non-functional platform to launch their application on ... and only an even bigger moron would walk around thinking AWS has some major issue with instances "disappearing" (it's a kernel panic, for those of you with a clue) and failing to respond ... when *huge* deployments have never encountered the issue ... like amazon.com. The fact you're so upset, only demonstrates I got pretty much everything I said right ... and only builds my confidence. A one line reply (*like a link to the ticket you submitted to redhat*) would have shut me up, made me re-evaluate my brain problems, and destroyed my self confidence ... instead you write back attacking my personality ... telling me I need to find peace. Fuck you. By the way ... that's a centered, peaceful, well intentioned ... **FUCK YOU**. &gt;I never said I was using Ubuntu or Debian. I was using RedHat on those instances that crapped out. You weren't ... and we both know that. Though if anyone else manages to read this ... the bug you described is *really* common, and fairly specific ... and isn't an issue with RedHat or Xen. There has never been a RH xen kernel that produces the issue you described ... If you some-how stumbled across something new, AWS and RH would have been all over it ... with or without payed support. Since you know, RH and AWS have like kind of a lot of money in this whole virtualization thing.
[pygame](http://pygame.org/news.html) is a well-known library designed to make game programming simple, and a community of users. If you enter "asteroids" in the search box on that page, you get multiple hits on contributed versions.
it's straight GitHub Pages, right?
If sale price is dependent on the product price, sale price should be an attribute of the `DetVenda` model. Default values can only be constants, not attributes of linked models.
&gt; Either they work or they don't. But unless you write a spec, how do you even know what "work" means? &gt; I don't feel I should have to tell them the details of their job. Their job is to implement what you ask them for. It is not their job to take a vague description from you and figure out what you want, and then inevitably get sucked into arguments with you because they interpreted your request differently than you wanted.
Probably! 😳😳😳 There are limits to what one would be comfortable with, so I declined. What was strange was that she seemed to be quiet and laid back relative to her working partners. Nice girl really. 
The big problem with this is that everyone wants .docx format. Something that generates html or pdf doesn't cut it because you have to convert from either of those to .docx and there don't seem to be any really good and free options out there. pandoc sometimes does an *ok* job if you're lucky, there are a couple of cloud services that will do a document at a time slightly better than *ok*, and otherwise Adobe has an online conversion service that costs something like $20 a year and apparently does a good enough job. I've just gone through this with my resume in LaTeX that exports horribly to word format directly, and only marginally better when i do it to html or pdf (which looks best) first and then convert to word doc in one of the ways i've mentioned above.
Why is it that developers are willing to write libraries to automate almost any task, or generate almost any type of output format, *except* SQL? Why does the principle of laziness -- never do by hand that which you can automate -- go out the window when talking to a database?
[Grease](https://github.com/caseman/grease) uses Asteroids as examples.
Don't get me wrong, but I think you are mixing up something. JACK Audio actually is the realtime audio server for Linux. Prior to that realtime audio was a PITA. Realtime audio is no problem on windows if you use ASIO, which is the everywhere-go-to standard and nothing really fancy. It really depends on the audio hardware you use. Some internal cheapo interface ~~will~~ could either have a big latency (not really realtime) or it will create artefacts if you set the buffer size too low. But any 50 bucks USB2.0 interface will get you to the point where it will be perceived as realtime without any artefacts. That being said, you still can introduce a lot of latency if you do heavy signal processing with your recorded audio before it is played back. But thats nothing the os audio server or interface is responsible for. By the way pyo does a very good job in handling all the different os audio system (asio, jack and core audio). You only need to make sure it actually uses the desired device (sometimes the device numbers change if you plug it into another usb port). But that was the only problem I experienced so far. edit: typos
Well you're doing a little false advertising there, don't you? *"my first pypi package, xickle. Letting you persist and read from XML just as easily as you manipulate json"* But xmltodict does all the work, you just wrote a tiny wrapper, and you don't even mention that. You should definitely say that you made a wrapper and it requires xmltodict rather than claiming you made the module that allows users to use XML files like JSON ones.
I'm much the same as you - like the language but am far from a pro (I'm a seasoned C# man). I've been using Python for over a year now and still find the 2 / 3 thing frustrating - so much so it's putting me off the language itself. Python 3 is great to work with but just beware you'll hit problems with third party libraries. Most of the main ones are supported but all of a sudden you'll read something you want to try out and find 3 isn't supported or doesn't work as it should.
I like the analogy. I would argue the ORM doesn't expose a powerful enough language for batch operations involving multiple models and often makes poor decisions when accessing relations. They have a ton of great features -- I think that keeping track of updated fields and only save those needed is great. But they appropriate for all interaction with your database. I think that ORMs generate as good SQL as you tell them to, but common idioms don't teach that. For example, changing fields on many models is usually done by loading and saving each model rather than a single update statement. 
I think that ORMs typically encompass two things, which people should view separately, but actually get mixed up. The first part isn't actually ORM (but is needed for an ORM) and that is an SQL builder. Often, you need to construct a query dynamically; a problem with SQL is that the order the SQL query is written in (eg., select ... join ... join ... where ... order by ...) is often not the same as the order you'd like to build it up in the code. So an SQL builder makes life easier; I want this table and that table; I want these where conditions; now I want such-and-such columns .... and the SQL builder sorts out the actual SQL. The second part is the real ORM part, the bit that attempts to bash SQL (well, actually to bash relational calculus) into an object model. The problem here is, they are not a perfect match, and there is a real risk of ending up interacting with the database in really inefficient ways. I've seen systems that had real performance problems because people didn't understand what RDBMSs are good at (and what they are not good at). I sometimes have a niggling feeling that a lot of the popularity of NoSQL databases (which, by the way, I think are really useful when they match the needs of the application) is partly due to people encountering RDBMSs via ORMs, and then thinking 'well, this is just objects so what do we need that clunky old SQL stuff for'.
"Then again, no matter what James says, XML was not meant to be read by humans. It's meant to be read by machines." What? I don't know who James is or why he's being cited as an anti-authority for the absurd assertation, but your claim is pretty nonsensical and utterly without any kind of reasonable support. There's lots of structured data formats not meant to be read by humans. They aren't text. Text is meant to be read by humans. Heck, even raw JSON without a schema or specification is meant to be human-readable. You may not know what a given structure is, but by darn it you know its an int or a string or such and in an array or object or such,. XML moreso, since, you know, since you can write it such that its not barfed text with no specifiication. It even goes out of its way to provide mechanisms for you to specify its interpretation. In nice, human, text ways, with segments of raw binary data very clearly marked. You state that persistence isn't pretty, but show only input, not output nor round-tripped result. Thus, I'm assuming your output is a horrendous mess -- I can't be bothered to check to see if that's true mind you, so if its not, update and correct me if I'm wrong. 
First of all, /r/learnpython is probably the right place for this question. Secondly, instead of trying to fix the current logic, you should consider wrapping this in some classes. You could for instance have a class called Room, which had some info on exits to other rooms, a description, and so on. This would make your program a lot more extensible and easy to debug.
If you *looked* at the link pointed to by "James", you'd know that he was the [original author of Tomcat and Ant](http://ant.apache.org/contributors.html). But of course, I assume you've not looked -- you even point that out yourself. So, maybe, instead of leaving nonsensical and utterly idiotic comments, you could leave a constructive comment, preferably with code, but I guess you're too full of balderdash to do so.
You say mongodb, while in the install instructions it says sqlite. And on the requirements there is no pymongo, only psycopg2 (postgresql driver).
I mostly agree with the "article," but it's terribly written and devoid of content. I've been working with relational databases and SQL since well before there *were* ORMs. No doubt this prejudices me against ORMs and for pure, handwritten SQL. It's not for lack of trying, though; I've worked with several ORM systems and my experience has been pretty consistent: they make simple databases quick and easy to manipulate, but once you start approaching the complexity of a useful, real-world database, all the indirection adds up and you wind up writing more (and more convoluted) code than is necessary. ORMs often require you to bend over backwards to accomodate (what I think of as) common SQL patterns. Maybe I'm just getting too old for this stuff, but I do actually see ORMs as primarily useful for those allergic to real database work, and suitable only for small, casual projects.
Very helpful project! This eases the whole process of creating a vagrant box.
Very good explanation of why Docker would probably too complicated for that use case and why vagrant seems to be the best choice. Thanks!
makes perfect sense. tell me then what distro would you suggest for this use case then.
Thanks. Also, I think this method should be faster than doing string manipulation.
I don't think anyone's "afraid" of SQL, it's just a single-purpose language. Who wants to step outside the language they're using to actually get work done to write SQL, when there are SQL query-builders and ORMs for almost any language now?
If you have Acaconda for python 3 run thins comand in the prompt: *conda install launcher*
Yep ASIO is what I was trying to think of.
Reminds me of Weird Al's new song "Mission Statement": https://www.youtube.com/watch?v=GyV_UG60dD4
The module packaging is weird, and if you don't get your file structure set up correctly to begin with, your commit history is going to be completely b0rked when you go back to retrofit it all together.
We're trying to switch to mongo now. We haven't figured it out yet.
&gt; If you have Acaconda for python 3 run thins comand in the prompt: conda install launcher i understand how to run the launcher. what i mean is that i don't really see the point of using this launcher at the moment. conda's biggest feature (the package manager) doesn't seem to be part of what is managed by this UI.
Ordered the book, thanks!
Yes I've read it. Looks messy to me: ClassName and function_name, but also in some case functionName too ;)
Also can you elaborate on the following: "don't make everything a class"? 
How should I get my file structure set up correctly? 
Can someone give me the 50,000 ft view on this? I feel like we might need to take this offline and really blue-sky it to see if we're still on the critical path. At the end of the day, we really need to stick to our core competencies and leverage suppliers when we can. Synergy.
It's mostly just knowing that your package distribution files generally need to be a directory above the package that you're trying to distribute. I mean, that's not always true, because you can build module-only distributions, but that's its own challenge.
Correct, the launcher is for managing "apps" like IPython Notebook as well as environments and channels. Support for managing packages in general is being worked on. Edit: see https://github.com/conda/conda-ui
CorporateUnspoken.py def OutsourceToChina(profitMargin): profitMargin*=1.1 return profitMargin def MaximizeProfit(workerProductivity, workerCost): profitMargin = workerProductivity/workerCost while profitMargin&lt;1.0: profitMargin = OutsourceToChina(profitMargin) return profitMargin 
Not enough clouds.
Needs a synergy object and synergize() method.
How about a box.ThinkOutsideOf()?
Synergize should be the lambda function calling convention, imho.
Please find attached the FY24Q7 Deliverable Area Key Mission Report Dashboard Summary Tool.xlsx. Just circling back to reach out and touch base with you here: who is primary owner of these key Priority Area mission critical deliverables? I'll sched a sit-down 1:1 with corp until we've got a bulletproof go-to-market plan, but they'll mark this as a miss unless we've got alignment. 
&gt; also in some case functionName Only if the project is already doing the wrong thing. As much as it sucks, consistency in naming is usually better than rigid adherence to the current "best practices".
I would take a look at SaltStack which is an infrastructure management tool written in Python (http://docs.saltstack.com/en/latest/). Honestly, if the company is using a full featured tool like this then you are better off focusing on being solid in your DevOps concepts since a lot of the work required to use these tools is configuration and getting the right setup rather than coming up with some brilliant python code. Also, I'd echo what the others have said about knowing about Vagrant and/or Docker.
True, but I don't like their mission statement. 
What's horrible too is when you work with former (US) military people. Holy fucking shit guys, PowerPoint is not a fucking text editor, what the hell do you think Word is for? I'm serious, you can dump a page of text onto the PowerPoint slide and they'll love it and say that you make great slides. 
Let's not make this into rocket science. Does it deliver the mail?
Have a look at [CookieCutter](https://pypi.python.org/pypi/cookiecutter/0.7.2) or [modern-package-template](https://pypi.python.org/pypi/modern-package-template/1.0)
Let's touch base later to review your feelings. You're clearly not a team player and we need to have our priorities aligned.
This project is missing comment blocks: Mission Statement { Comments go here }
You have to set a maximum daily budget on Google App Engine. The OP willingly authorized at least $18/day to reach $530 for August.
Because 100 functions is chaos. Unless your data has absolutely NO structure, it is your responsibility to make it explicit in a program using Aristotelian logic, unless of coarse you are using stochastic modelling, genetic algorithms, etc. There are lots of examples where the OOP solution fails this test, but even then it is better than nothing. This said, for smaller problems I will absolutely use 10 functions as long as clarity rules.
In a way, yes. I'm not sure the cleanest way to make the HTML page work with the Liquid templates for the rest of my blog. I'm currently pushing the HTML and PDF documents to the repo for my blog, which is what shows up at http://bamos.io/cv. However, somebody could use GitHub Pages directly without an external blog dependency. I've had great experience using the [Grunt Build Control](https://www.npmjs.org/package/grunt-build-control) for another of my projects. Take a look [here](https://github.com/bamos/beamer-snippets/blob/master/Gruntfile.js). I'm happy to help anybody trying to use GitHub pages directly with my CV template.
This can work very well for functional systems, where things are intended to be composable in a *functional* way. Once you have classes in the mix, you wind up needing classes that can be interchanged with functions (like c++ operator() or D's opCall), and vice-versa. Python does a pretty good job of siloing these approaches into different libraries, and is fairly pragmatic about what tool to use for which job. But that doesn't mean you're not occasionally building bridges between each approach. IMO, functional composition falls short in practice when you have code that dares to generate closures as an output. Unit-testing these in isolation is hard to solve since no language I know of gives you the ability to introspect what a closed-over function's scope is. The result is you have to *call* a closure to verify what its closing/currying parts are correct, which is a different kind of test since you have to exhaustively call it with varying inputs in order to ensure that its configuration is sound. In contrast, knowing that it is configured correctly ahead of time lets you focus on coverage when calling it. From this angle, a class is a much cleaner choice since it's easier to unit-test since you'd have member variables instead of curried arguments or just regard the class as the enclosing "scope".
Maybe this depends a lot on what field you're in and the kinds of positions you're applying to. I've used Markdown/HTML/PDF exclusively through my Computer Science undergrad to apply to internships, jobs, and PhD programs and have rarely been asked for `.docx`, I think the last time a system asked me for `.docx` was a few years ago. In the cases I have been asked for `.docx`, the companies are usually looking for something they can easily parse and add to a huge candidate database. They also allow txt files, so I just submit the Markdown file. Take a look at the Markdown file that my system creates [here](https://raw.githubusercontent.com/bamos/bamos.github.io/master/cv.md). The formatting isn't the best, but I think it's acceptable for systems that are only looking to extract keywords from the documents.
Ok but first help me with this error: “The instruction at ‘AC9E00F3’ referenced memory at ‘CBDEF4BB’. The memory could not be “read”.
intuit is discontinuing the data sync/rest apis for QuickBooks desktop https://developer.intuit.com/blog/2014/09/08/timeline-to-discontinue-the-quickbooks-desktop-rest-api honestly I don't think there's any good way to get the reporting out of quickbooks...
I apologize for my colleague, he has a lot on his plate. At the end of the day, it is what it is. Going forward, a proactive value-added proposition like yours offers synergy with the kind of best practices a robust, impactful rockstar like myself brings to the table. Let's do whatever it takes to touch base and take it to the next level.
etree has a version called LXML that is what you are looking for.
Don't forget to run that through flake8!