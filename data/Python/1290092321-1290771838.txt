nicely written and encouraging!
I was sad too. But Javascript is still better than ObjC.
This is cool. What other cities do you have plans for?
You mention a FAQ but I didn't find it. What python frameworks did you use? HTTP server? Database? Do you plan to do it for countries/regions also? Very neat anyway! 
Right now Toronto &amp; Berlin, although it may take some time. Toronto has islands, and while we currently support a "single Point of Interest per island", supporting multiple ones will require a few small changes. (For example of island support see San Francisco or New York City.) Since right now I'm working on other features, Toronto will be postponed until we implement this, or until we implement a workaround for the meantime.
This looks *very* cool. The idea is really solid - I immediately thought that this was something I could really use next time I go on a holiday. And the 30 seconds I spent looking at it was all very easy to navigate and use. I'll definitely be coming back to this later to take a closer look.
The about page is pretty new, and we didn't add the FAQ yet. Thanks for reminding me, we'll add it soon :) Re technical: I used Turbogears+sqlobject over mysql. Back when I started this django wasn't as evolved, and I liked the philosophy behind TG more. Since then I've stayed with TG because it answers our needs, and moving to something else is costly (considering that this is a self-funded garage project). We prefer new features :) Re: countries/regions: We have the technology for that already, (and the algorithm was designed with support for that in mind), but for now the plans for that are "sometime in the future". Re: very neat anyway: thanks!
Your site not only looks sharp and is pretty easy to use- its an awesome idea. Nice job!
Very cool! I wouldn't like to plan a 'proper' trip with it - kinda robs it of its human touch - but if i were to find myself needing to visit a city on business for 2 days, it'd be very handy. Nice one!
very very nice. 10 seconds to get to a nicely laid out fully organized trip: great stuff. Out of curiosity, where do you get the city info, is it something that you've entered yourself city by city or is it more "social" and based on other peoples recommendation?
Well, all of the Python is at the backend. Python isn't a very popular frontend web language ;)
Looks great! I have two issues: 1. I want to be able to add destinations to my trip in bulk. Each time I browse all the places to visit, I make one a definite choice, and I'm taken back to the itinerary page. I want to be able to select many at once, then click the "back to itinerary" link. 2. Similar theme, each time I did the above, the "guide" would pop up in the middle of the map, which I'd have to skip each time. The first time it appeared I clicked through and read all the advice, but it kept coming back.
It's not very Pythonic, but it is very good.
I like it a lot! Nice job on the map interface :) I presume you enter all the points of interest by hand for every destination? Maybe your next step would be to have a user-provided content (POIs) for non-existing destinations and thus expanding the destinations pool.
Nice, you did this all by yourself? I am curious about your framework, database, etc. In general, I think it is a good job. How do you plan to promote it? It looks like your revenue will come through hotel bookings right?
Do you get referral $ to travel sites when people book? I hope so! Well done.
your site is something that I want to use. :D keep updating and expanding. its a nice work.
1)Needs more destinations 2)Skip the "wizard" and get people straight to the "google maps" page, all the options should be defined there (city , days etc). Also when in the google maps page there should be a way redefine anything that i defined before (you don't give me an option to change my destination for example...), or atleast a link to go back to the wizard (if you intend to keep the wizard that is ^^) 3)There is something wrong with your /blog , takes 14seconds to get a response from the server , the rest pages load fine Overall i like the idea of your site. If you don't mind answering , i was wondering why it took you two years to complete the site, have you been working on it full time or in your spare time ?
Pyodbc is lots of things to lots of people. I am constantly finding bugs in it, but I'm grateful it exists.
Great work lorg.
Why did it take you 2 years? How frequently would you work on it? It looks really nice, though I haven't checked every page yet. I'm curious about the development time mostly because that's honestly kind of discouraging if you worked on this a lot and it still took 2 years to get out. I don't mean that as an insult, but more so it makes me feel like I'm not going to have but so much accomplished before I die lol.
Very cool site, a feature I would like to see is multiple destination selection, this way you can plan a cross-country trip like visiting the whole Europe, something I'm thinking about, but it needs more destinations first. Keep the good work.
Their docs are so byzantine and useless. I don't even know why they bother posting them. When you know what you are doing, using it is not terrible but...
Very very very nice. I'm going to Rome soon and it will be much easier to plan visits now !
 + 3600 * offset WHOOSH
What I think is that this is site, and the entire mindset behind this site, is not what is really needed and exists in an alternate world where iPods and Twitter and Fischer Spooner are relevant. That world is very far from this one. In this world, we're running out of fuel, and food prices are starting to skyrocket as inflation sets in.
This is exactly my opinion too. Very intuitive design and I honestly think I can make good use out of the site the next time I'm making a trip. 
Dude, this is pretty awesome. There are some *VERY* smart UI decisions that you've made. I particularly like the quick guide that pops up to help you use the map the first time.
You are good.
I disagree. The wizard is useful. Loading a really busy page covered in a giant map isn't necessarily great. A compromise might be the wizard in a JS popup box sitting over the whole page (which would be greyed out like a lightbox photoviewer script), but I'm not convinced that it's needed.
I think you've got the wrong idea about the Toronto Islands. They're very small with very little to do. Certainly they're not on *most* tourists or even Torontonians to-do lists.
This is awesome. I like the interface and such an app is something that is not well addressed by existing websites. I assume you'll want to commercialize it. Do you have a defined trip format? If so can you publish it so people can upload trips to you? This should be crowdsourced and trips should be voted on by travelers. The best thing would be a trip editor where people can create trips and post them for crowd voting or you can have a bunch of moderators from each locale who filter out the crappy submissions. Either way you need some way to tap into the wisdom of the crowds with this. **EDIT** I noticed after playing with it that you can alter a proposed trip by removing/adding attractions and/or altering the times. Where does the city information come from? You only offer a handful of cities right now. If it's not through some web service then maybe that's the part that you could crowdsource? For example as a Varsovian I know quite a bit about places to see in Warsaw. I could easily contribute to a list of attractions etc.
Software development is this field where you get 80% done and you're left with the other 80% to do.
Thanks! Will fix :)
I built an engine that collects information from the web, and then does entity resolution. For example it can say that "Tour Eiffel" ~ "Eiffel Tower". Of course, it has some errors, these are then fixed by a content editor who goes over it. So I'd call it half automatic. When we have more resources, it will be even more automated. By the way, I wrote a bit in blog about the database design for the content resolution issue, it's a recurring pattern. I've thought of writing a long article about that, but first I'm going to move my blog to new hosting. (It's [www.algorithm.co.il](http://www.algorithm.co.il/) btw)
Thanks! See my answer [here](http://www.reddit.com/r/Python/comments/e83w9/hi_pyreddit_check_out_my_website_written_in/c1637vp)
I have a partner, but I did all the programming. Re framework, see my answer [here](http://www.reddit.com/r/Python/comments/e83w9/hi_pyreddit_check_out_my_website_written_in/c16253y) Re revenue: that's a channel we have right now, we are considering adding more. We have an infinitude of features and ideas waiting to be implemented!
I know it's against reddiquette to say you got an upvote, but you did. I can't stress this enough.
There's a pretty long story of what happened in these two years, maybe I'll do a IAMA. To keep it short, it boils down to this: 1. Automatic planning is pretty hard, product-wise. We have a lot of features now, and we still feel we have a long way to go before the product is "like we want it to be". 2. Working without funding is hard, you have to have a job. 3. Trying to get funding is hard, and it's even harder to keep developing while you're doing that. The same goes for anything that is not direct work on the product.
Thanks! We got plans for that as well, but it's a bit down the road. We are also adding more destinations :)
[Fix This!](http://i.imgur.com/u8bhi.png) And you should probably check for that in another languages, which may make the button larger!
1. I know, we feel the pain. We're working on that as I answered other people. 2. I disagree w.r.t. wizard. We discovered it is critical. There was a time it worked like you suggested, and what we have now is a huge improvement. Still, you are right in that the choices you make in the wizards should still be available in the UI 3. Will check up on that. Re two years, see my answer [here](http://www.reddit.com/r/Python/comments/e83w9/hi_pyreddit_check_out_my_website_written_in/c16394h)
That is not correct. It got renamed lambda *a: list(xrange(*a)) 
Hi All. It's been very exciting for me to put this post here, and your comments have been heartwarming. Believe me when I say, after two years of work, this feedback is very much appreciated. I also very much appreciate the people who point out problems, even when I disagree. This is the kind of thing that helps us make the website better. One final note: for a long time I've been pretty quiet on reddit, and mostly reading. I think this post convinced me to participate more. Thank you :)
Ugh... I didn't think of other languages for the like button. Thanks!
We will consider this, thanks for the information.
[One more](http://i.imgur.com/ELKc1.png)
We're also stockpiling on long-storage edibles, just in case. It's all part of the master plan ;) Seriously now: you may be right. Still, as a personal life choice of what to do, I think it's reasonable.
Do write the article. The blog looks interesting, I'll check back on it once in a while. Liked the js templating, did something similar for a work project a while back. Lastly I was surprised, and glad, the .il TLD is not blocked in the UAE anymore; I just hope that open knesset stuff didn't ring any alarm... hehe we'll see... :)
Looks very cool. Did you do the design yourself also?
Brilliant site! I'll probably use it next time I travel. Some suggestions: * Public Transportation options * Booking flights/trains or a way to set your arrival/departure time (a half day of itinerary would be nice). Maybe look at what tripit does and integrate a similar feature * I think more can be done with the dining options. I find one of the hardest things about visiting somewhere to be figuring out where to eat that isn't too touristy. Yelp integration might be the way to go here? (And not eating at the same place 4 days in a row) Again, love the site! Keep up the good work. And let me know if you're looking to add programmers. Also, and this is just a personal preference, but the whole flickr thing where you don't use vowels is a bit over used. It's a little too much like riding the fad. But again, that's just me.
My partner did almost 100% of the graphical design/UX. I just implement it...
Will fix as well. I have to tell you though, this whole settings page needs (is going) to be redesigned...
Please do an ama, I'd love to hear more about the process and everything. Any kind of estimate of how many hours went into it, either total or on a weekly basis, something along those lines. Is this your first project?
&gt; Software development is this field where you get 80% done and hope no one notices. This has been my experience. 
I will consider. Maybe I'll do a joint IAMA with my partner.
Re is this my first project: this is the biggest project I've ever worked on that is also mine. However, I've programmed professionally before that, and also worked on bigger projects.
This website is really well made, but I'm wondering how you make money? There are no ads, and from what I can tell this is a free service.
Correct format: `lambda *a: list(xrange(*a))`
Currently there is an affiliate marketing booking link, but we consider it more of a feature than advertising.
Emac is a powerfuls tool, but if you just wants to learn how to writes a Python and are havings trouble and wants to get starteds right away, you can just use Notespad to write codes. Also to play arounds with the languages, you can install IDLE, for what to enter the codes and with a prompts and interprets statesments right away.
I hope this isn't against reddiquette, but all you people writing kind words: it would help immensely if you write a review of us (on your blog for example). It doesn't have to be good (but it would be nice if it is ;), we like it real. But we do need the exposure. If you intend to plan a trip, and you enjoyed working with plnnr, think of sharing your trip. Every little bit helps. &lt;/request for help&gt;
Ditch the feedback button on the right.
I find the site incredibly amazing, and I also appreciate your sense of humor. That being said (though I imagine you may be in the process of implementing this), I think this would work best for business travelers. If you could set up an account (so that you don't visit the same attractions twice on repeated business trips) and also say what hours you'll be off work, I think this would be incredibly popular. Perhaps also include restaurant recommendations based upon type of cuisine desired and price range. I've probably given you another 2 years of work to do already. I'm definitely going to use this next time I visit New York or D.C. Keep up the good work.
Heh. I was tempted to say something like "You lie! The site only returned HTML, CSS, and Javascript when I visited it! No Python at all!" -- but I wasn't sure the joke would make it through a text-only comment.
As I think I said elsewhere, we already have an infinitude of features to implement. Suggestions are still welcome - they do help us prioritze :)
I must say though, he does have a point. The "actual application" page (the one with the big map) actually has tons of javascript, and I wrote a lot of javascript widgets. This was also the first website I developed, and consequently, the first time I programmed with Javascript. After two years, I now consider myself reasonably experienced with JS ;) As far as evidence for Python - it is indeed sparse from a black box point of view. I did try to share some of the code/experience on my [blog](http://www.algorithm.co.il), and on presentations I gave to the local [PyWeb group](http://groups.google.com/group/pyweb-il).
I assume you're already familiar with emacs? If you're not then I'd recommend notepad++ (or vim ;) .) There is a registry change for xp where you can right click on a folder to open a command prompt there, which is convenient for testing your code. Another tip: You don't even have to do "C:\pythonx.x\python.exe myfile.py" you can just do "myfile.py" on the command line and windows will open it with the right executable as long as it has the .py extension. Edit: here is the addon for xp to open command windows anywhere http://download.microsoft.com/download/whistler/Install/2/WXP/EN-US/CmdHerePowertoySetup.exe
Same here, totally recommend Linode. Simple, straight-forward, affordable, and responsive customer service.
A few years ago, I wrote a small guitar tuner in Python, see [here](http://www.algorithm.co.il/blogs/index.php/pytuner/). Later I used similar code to identify chords and attempted to write a blues improviser in Python. IIRC, for analysis, at first I used pymedia, and in newer pythons I moved to pyaudio. For playback I used pygame.
* It makes me productive. Totally possible to build a prototype web app in one afternoon. * It's acceptably fast for a dynamic language and never Segfault-ing on me because of running out of memory (when run for long period of time). * Cython is like magic. * Tornado web framework is fast, simple and doesn't get in the way. * List Comprehension always impress dinner guests. * It's deeply rooted in popular linux distro (Debian &amp; RedHat).
Python and emacs support is kind of confusing right now because there are two different suppliers of python-mode, neither of which are clearly better than the other. You seem like you are new to emacs, so I would suggest just sticking to the one that is distributed with emacs these days. You don't need any extra .el files (but for when you do need them, the convention is to put them in ~/.emacs.d/site-lisp (where ~ is whatever you set %HOME% to on windows)). What you do need to do is set up your emacs configuration file. On windows this file is named .emacs or _emacs and you should set an environment variable named %HOME% set to some folder and put the file there. Then add the following to it: (setq python-python-command "C:/Python/python.exe") (require 'python-mode) That should probably work. Then you can load up python files in emacs and as long as then end in a .py extension it should load up the correct mode for them. If it does not (it will say Fundamental on the mode bar instead of python-mode then add this, too: (setq auto-mode-alist (append '(("\\.py$" . python-mode)) auto-mode-alist))) When it all works you should be able to do C-cC-! to start the python prompt, and C-cC-c to send your buffer contents to the python prompt. For the people saying use notepad or whatever instead of emacs, don't do that. Emacs is awesome for development with dynamic languages like python, and while there might be a million commands in it, you only have to memorize ten or so to be as productive as you'd be in notepad.
Any redditor's experiences on this subject?
Man, we are all dumb. The xrange name is **gone!** So it should be: lambda *a: list(range(*a)) :/ (duh.) Nice catch on the *, btw! 
Here: aeiou You seem to be missing these ;) jokimg aside looks great, well done.
Awesome, good work! How are you generating the data for the tours? Are you putting it in all manually? Have you thought about somehow building a level of crowdsourcing into it?
Hey! Where'd you get those? I've been looking all over for them!
The content itself was mostly collected from the internet and has some content editing. The trips themselves are generated by an algorithm I developed. Re crowdsourcing: yes. But crowdsourcing requires more exposure to work (i.e. getting "critical mass"), and will also require more development work.
If you say "xrange" is now named "range" then "list(range)" is the name of the old "range".
Very impresive and slick. Maybe you could try crowdsourcing for more travel ideas. Make some sort of incentive for content makers.
You should have (or create) a .emacs file in wherever emacs thinks home is. Just open ~/.emacs from within emacs. Add this to your .emacs, assuming you have a directory ~/.emacs-modes/python-mode containing python-mode.el: (setq load-path `("~/.emacs-modes/python-mode" . ,load-path)) (load-library "python-mode") (setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist)) That should let you get syntax highlighting etc when you open .py files. If you want to run python within emacs you'll need a lot more stuff, but that's hardly worth the trouble IMO. What you really want to do to get started with python is install easy_install if you don't have it and then use it to install ipython. 
Very nice. I don't travel much but if I did, I'd use it. Great design and very nice typography choices (secret typophile here). Keep up the good work.
/me blinks, stares at screen. um, yeah, I guess that's true... but for some reason it's not as funny. ;) 
[x for x in range(n)] ?
It's quite awesome -- would've loved it for my trip to NYC last weekend. A couple of notes though: * It doesn't seem to allow time for lunch? * On that same note, restaurant suggestions would be awesome -- you're already telling me where to go, why not tell me where to eat, at least for lunch when you're directing me already. Heck, why not breakfast and dinner too? Maybe I'm weird, but half of my vacations are food related and these cities undoubtedly have some great eats. * No nightlife? * I wouldn't mind being able to decide whether I want to walk or cab or whatever (i.e. today I'd like to stay close to the hotel, tomorrow I'd like to travel within 50 miles) Just some thoughts, take 'em or don't. Awesome site though -- well done.
Is stuck "Calculating"... but then again, Opera has issues.
Might I recommend [this awesome (free) ebook](http://learnpythonthehardway.org/index) for learning python? Not only will it help you get going it also includes some setup instructions for beginners. Also note, for running the 'python' command from any location in Command Prompt on Windows you must add ";C:\PythonXX" (where XX is version number, 2.7 = 27, etc.) to the end of your PATH variable. You can get to this in Windows 7 by right clicking Computer &gt; Properties &gt; Advanced system settings &gt; Advanced (Tab) &gt; Environmental Variables... (Button). If you run 'python' without specifying a *.py file to open, it will open python and let you run python commands right against python, if that makes sense. This way you can test and play around with things quickly. For example if you type a = 5 and press enter, next time you use a it will be 5, and so forth. Good luck!
Google in one line of code: grep "my search" *.html Hurrah for gross oversimplifications!
I think you mean "plns"
I am using http://www.zeromq.org/ for a networking project. It's not a full messaging solution, but instead aims common and complex communication patterns very simple. Supersockets!
I don't know if there's anything faster than [System V Message Queues](http://semanchuk.com/philip/sysv_ipc/). But the queues are persistent even if the process dies and so requires a strategy for cleaning up abandoned queues.
There's a number of things you can change here. name_parts = ['c', 'h', 'a', 'r', 'l', 'i', 'e', '.', '.', '.'] does not need to be an array, you can simply use a string: name_parts = 'charlie...' and you can still reference it like an array using indices and slices. Then where you speak it slowly, you don't need to manually build each section the way you did, rather you should use a loop def speak_slowly(n): for i in range(10): os.system('clear') print n[:i] sleep(0.2) In this situation, we're using a slice rather than an index. What a slice does is give you everything from the start up to but not including the index (i). So 'charlie...'[:3] -&gt; 'cha' Also where you've said while "true": will technically provide the behaviour you want, it would be better said while True: In Python, a non empty string will roughly equate to True while an empty string, 0, None, or False will all roughly equate to False, meaning it will fail an if/while test. So though the way you wrote it works, stylistically it's better if you actually use True. And where you've used charlie_loud and charlie_quiet to determine if a string is upper case or lower case, you can simply call hello.isupper() which isn't 'i supper' but 'is upper', meaning, is the string upper case? It will return True if it is. Then your transformed program should look like #import time related functions from time import time, sleep import os import random import sys #set lists and variables name_parts = 'charlie' strong_call = 'psst!' verify = ["hey! You... you okay, bud?", "you gonna answer me or what?", "hey! seriously, man! you alive over there?", "crap, charlie... i'm sorry, bro.", "any idea where we are?"] #define a function to slowly say charlie's name. (I'm sure this isn't the most efficient way, but it's what I could #get to work.) def speak_slowly(n): for i in range(10): os.system('clear') print n[:i] sleep(0.2) #Print introductory text os.system("clear") while True: hello = raw_input() if hello == "": #THE GOAL IS TO MAKE THIS THING NOT SHUT UP UNTIL THE USER ENTERS SOMETHING, THEN USE A SPECIFIC RESPONSE. THE USER SHOULD RECEIVE SOME SORT OF FEEDBACK (HIS FRIEND DIES, ETC) FROM SAYING THE WRONG THING OR SAYING IT IN THE WRONG WAY (TOO LOUD, OR WHEN SOMEONE IS WALKING BY). os.system("clear") print verify[0] sleep(4) os.system("clear") sleep(2) print strong_call sleep(4) os.system("clear") sleep(2) speak_slowly(name_parts) sleep(1) os.system("clear") sleep(2) print strong_call sleep(5) os.system("clear") sleep(5) random.shuffle(verify) elif hello.isupper(): print "pipe down man! you trying to get us killed!" sleep(1) print "oh, no..." sleep(0.5) print "no!" sleep(0.5) print "Noooooo!" sleep(1) os.system("clear") sys.exit("Yup. Your Fault.") elif hello.islower(): print "oh man. thank God you're alive." # HOW DO I GO INTO A PROMPT AFTER THESE TO START TAKING COMMANDS FROM THE USER? else: print "hello?" sleep(2) print "charlie?" sleep(1) print "That you?"
That was the problem I ran into. I went through about 30 iterations of how to make it work, and none of them produced the right result. So I just decided to make something that worked, and learn the right way from geniuses like yourself. Thanks!
I threw together a simple one in django that used cron to run a [manage.py action](http://docs.djangoproject.com/en/dev/howto/custom-management-commands/) that would loop through a que model and delete them after it was done. http://pastebin.com/1BPcyF4V
Also, you don't need to clear the screen and write out more of the word each time: if you put a comma at the end of a print, then it won't newline. print 'h', sleep(0.2) print 'i', 
The vector clouds in the web design, the shiny icons, the cute domain that's missing vowels. I get tired of that shit.
That does leave that annoying space between each character though. Here's my suggestion: def speak_slowly(msg, wait_time=.2): for c in msg: sys.stdout.write(c); sys.stdout.flush() time.sleep(wait_time) print The `sys.stdout.flush()` is needed to "force" the output to stdout, and the final print is used just for the side effect of producing the final newline. This function also handles input strings of arbitrary length and allows the caller to override the default pause between characters.
It looks like you're off to a good start! Congrats! you should have a closer look at iteration &amp; loops. These will allow you to improve and clean up the program quite a bit. 
Not bad man. Nice to see you at it.
It would be cool if you could add Orlando, including the theme parks and the attractions inside.
OP, I think you're confusing the concept of the smalltalk re-loadable image, and the idea of a database. See http://en.wikipedia.org/wiki/Smalltalk#Image-based_persistence for more info. You could probably do this in python by loading up inspect and pickle and streaming out everything in locals in every object that you're running, and loading it in by default when you start up. But python isn't written to work this way normally, and allows a lot more external state (e.g. network connections, open files outside of the program, database connections, rpc, etc.).
**C H A R L I E**
Looks fucking amazing. It'd be cool if you could add the functionality of finding cheap pubs/bars/restaurants.
No persistence essentially means your piping all your messages to /dev/null. Other than that it's good.
I'm far from savvy, but I'll offer some noob-to-noob advice: I've wanted to learn programming at varying times in history, and have taught myself numerous languages, but never programmed anything in them aside from the exercises you get in a tutorial. My impending mid-life crisis has ressurected the urge to program and someone recommended Python to me. I spent a lot of time collecting resources, and I've been reading and watching like crazy. The coolest thing that's happened to me is that I decided this week that I'd create SOMETHING (no "buts" about it) while I was traveling for work. And that actually ended up working for me. I've been looking at the following resources: http://www.learnpythonthehardway.org (great introductory book. Zed gets you used to using a computer like a programmer, albeit a beginner one. I recommend starting here then, while still doing that program, start going through the video lessons at the next link in numerical order once you get through Exercise 5 or something) http://python.sourcequench.org (you can download a torrent of all these video files by looking through the author's comment history: http://www.reddit.com/user/ryanshea) And this link is good for offering perspective (for me, at least). He does a great job of pointing out that it won't happen overnight and you literally have to start off very small. http://shawnpresser.blogspot.com/2010/10/how-to-become-game-programmer.html I haven't made it particularly far through those resources, honestly, but I was feeling froggy this week and decided to make something. I actually did, and I posted the results [here](http://www.reddit.com/r/learnprogramming/comments/e8fn5/proud_of_myself_but_i_still_feel_pretty_retired/) and [here](http://www.reddit.com/r/Python/comments/e8fgt/proud_of_myself_but_i_still_feel_pretty_retired/), and these brilliant fellow redditors have given me lots of things to think about and try out, so hopefully I can come back with an update in the next few weeks. You may not get much response to your post, since you can find a lot of answers by browsing through the history of this subreddit and /r/learnprogramming, but I think the links I posted will give you a great start, and then you'll just have to commit yourself to producing something soon. Once you do that, it's up to you how much you rely on tutorials, I'd imagine, but I can already see that the feedback that I'm getting on my own creation is priceless for learning. 
You could easily implement a zmq broker with persistence, but yeah. It's just another option that can be evaluated and in some cases be the right tool for the job.
That's a crappy excuse. Your program has a bug. He never specified that the strings wouldn't repeat either. In any event, the fix is simple enough; just use the `count` parameter of `replace`: `list.append(str2.replace(str1, '', count=1))` .
what I really had in mind was this.... xrange=range range=lambda *a: list(xrange(*a) and now 3.x behaves like 2.x in this respect (I think).
Should be `else` not `or`. 
oops. fixed.
Please take this as constructive criticism. If your site looks terrible in IE6, then let it look terrible in IE6. I'm not upgrading this browser, so don't direct me to a page telling me to upgrade my browser. It makes you look like an arrogant jerk. Maybe you did it this way to save time, not out of disdain for people who use inferior broswers, but that is the impression that I get. Best practices is to add a message to the target page for IE6 users warning that the site will not work correctly with IE6 and include links to other browsers. About the only web sites that do it your way are one-man operations designed by programmers, so it also doesn't look very professional.
Not a problem, try: `speak_slowly('`**C H A R L I E**`')` 
Good list, but I'd also suggest the official [python tutorial](http://docs.python.org/tutorial/).
Using ipython defeats the theme of the book, which is "text editor, command prompt, compile on command line".
[Learn Python the Hard Way](http://learnpythonthehardway.org/) is a good read.
Thank you for that. It's been a long time since I talked to an IE 6 user. I'm curious though: why won't you upgrade? or at least use another browser "side by side"?
Neh, it's a bug I have. It's already listed, and I'll be fixing it soon enough. Thanks for the report!
I use other browsers at home. At work I'm stuck with IE6. (We're not allowed to use anything else.)
1. The clouds are [png](http://plnnr.com/static/images/website/header_cloud.png). My partner made them himself. Maybe he has a vector-image source for that, but I doubt it. 2. If you pick Barcelona or Paris in the wizard, you'll notice that the clouds are replaced by a silhouette of the city. The cloud was there because these took a lot of work, he didn't want to make more for other cities, and we needed some graphic there that looked good and was reminiscent of travel. We tested images of airplanes and such, and settled on this compromise. 3. Cute domain that's missing vowels: picking domain names is hard. Our previous domain was aitinerary. We both thought that plnnr was a good compromise. We were advised to change it, but couldn't find a better name. Now we are too far along to change.
Orlando is on our todo list, but a bit further down.
That's so sad...
Re the mindset behind this: the ie6 page was written about a year and a half ago, or sometime around that period. "Back then", IE6 was still (relatively) widely used, and writing such a page was a very strong ideological statement/choice. Or maybe it was just fashion. I remember feeling very strongly about not changing my markup &amp; css for IE6 users :)
Nice site! I'll refer this to my friends. It's pretty cool, I just tried it for London. Also told the guys @ BBC Click, hope it might come up on the programme one day and spread the word out?
Thanks!
Are you talking about in memory or networked? For networked message queueing, I use [Kestrel](https://github.com/robey/kestrel) to great success after dumping beanstalkd which was more memory hungry than I wanted. Take any decent python memcached client library and you've got a Kestrel client library, pretty straight-forward to use. The big win for Kestrel is that it uses journals files, so I've had queues get tens of gigabytes large due to unseasonably high load and Kestrel kept on keepin' on (the machine was hurting due to all the extra disk I/O though).
I agree, that would be awesome. It's even on our plans :)
Got it. IE6 market share is way down now and web developers have won the battle, so please just ignore us now instead of redirecting to a Screw You page.
[Done](http://plnnr.com/page/faq/). Let me know if you have questions you think I should add. 
The title suggests that somehow Python gets invoked from Excel. But actually Excel is not a part of this: &gt; Pyspread is a cross-platform Python spreadsheet application. It is based on and written in the programming language Python. 
Even though you don't have enough cities, you have a stellar idea. I'm guessing you'll be offered some money OR some company will steal the idea. Great job. Are you using django?
I love your design.
i see you hail from c. welcome to python. string management is much more easier.
Small suggestion, I would use print random.choice(verify) rather than print verify[0] ... random.shuffle(verify)
Having an upvote-downvote site for trips would be awesome... i'd use it
Most def. You could have a range of bars etc, but as long as you have a get fed and drunk for cheap option, that would be great.
I really like your attitude - you get it done even if you know it's not very good, but you also take the time to investigate a better way to do things. Good luck and keep going!
beanstalkd seems like a very good choice if you don't need anything complex
I've been using dir, but never heard about help, but it seems only natural given matlab. I wonder if there are any other functions like this I should know about.
* Re public transportation: On our roadmap :) * Arrival &amp; departure: already possible, you can change the time each day starts and ends. * dining options: We feel the pain, and we put it very high on the priority list. We'll probably even integrate with Yelp, just like you said... * domain name: see my answer [here](http://www.reddit.com/r/Python/comments/e83w9/hi_pyreddit_check_out_my_website_written_in/c165l5v)
I wrote my own which you can find here: https://github.com/shaurz/fsmonitor It uses ctypes to access inotify functions directly instead of depending on pyinotify. On Windows the only dependency is pywin32. I haven't promoted it because I plan some API changes in the future, single file monitoring doesn't work on Windows yet since it uses ReadDirectoryChanges, and non-blocking polling doesn't work on Linux yet. I don't actually have a license for the code yet but I will probably use BSD/MIT style license. At the moment all I use it for is updating the directory tree in my (unreleased) text-editor. I use the editor every day at my day job (and my own projects) so I would say the code is quite reliable since it hasn't failed yet.
Thanks a lot. I appreciate it. I will get on Zed's Python the Hard Way and some of the videos. Just out of curiosity, what does that program do that you wrote. I know you said it's a text based adventure, but how does it work?
To see if a string contains _any_ uppercase characters what you need to do is loop through a list of such characters checking if each one is `in` the string: if any(x in hello for x in charlie_loud): pass In fact, you can simplify your code by doing `import string` since that module already has a list of uppercase characters for you to use: import string if any(x in hello for x in string.uppercase): pass If you want to check that _all_ the characters are uppercase, then you can use the `hello.isupper()` function suggested by others. There are corresponding `string.lowercase` and `hello.islower()` attributes for the opposite case. As far as reddit's comment syntax goes, you should make sure all pieces of code have 4 extra spaces at the start of every line. There's a "formatting help" link below the comment input box, and there's also a more [comprehensive guide](http://www.reddit.com/comments/6ewgt/reddit_markdown_primer_or_how_do_you_do_all_that) around here somewhere.
that doesn't fix it either if its not at the beginning of the string but is at the end thx for trying also lots of solutions here have bugs because he really didn't define the problem well
As a follow up question, can people direct me to a few good examples of websites or programs created in Python?
I'd like to see him review [Celery](http://celeryproject.org/) as well.
Well, it doesn't, really. Right now it's just the intro to a text-based adventure. It's some guy calling out to his friend to see if he's okay, and they're in some sort of stressful (kidnapped, P.O.W., etc.) situation. I never actually thought of what the story would be like. I just like writing, and have always wanted to do programming. The idea is that you type something in while he's talking, which either: a) gets him killed, b) makes him think he might have heard you, c) let's him know you're okay and starts a dialogue between you, which would launch you into the story/game (currently unwritten/uncoded).
Honestly, I wouldn't bother with that until you've written something, if I were you. Trust me. Tunnel vision is your friend.
beautilful!!! Can users help create new cities??
*crickets chirp*
hmm... so you're saying it's better not to know?
Not quite, but very close. The booking urls are affiliate links to hotelscombined. The nice thing about it is that it behaves more like a feature than an advertisement, which gives us the "warm fuzzies" :). Also, thanks!
Let me know when linux inotify can give you the pid of the event source. I've seen patches discussed briefly on lkml but they didn't go anywhere. :( Having the pid would be super awesome.
Wow! Your site is great. I love it. 
I'm saying that information overload will keep you from getting results. I know that personally. Choose a path and follow it. The one I gave you is the one I've started following while working a full time job and balancing family time (as well as being remarkably scatterbrained), so I can attest to it being pretty mindless. You can read/watch one of the lessons from either Learn Python the Hard Way or Python Osmosis during a 15 minute break. Just keep working at them until you feel like trying something of your own, and then start doing it. I still plan on going through those tutorials, but actually putting down code is paramount, because now I have an idea that's all my own, so there's automatically a level of commitment to seeing it become fully developed. The brain work starts when you want it to, when you actually decide that you have something you want to do with it, and you decide when to start, and you dedicate yourself to creating something that works (no matter how ugly). This is the hump to getting started. Actually starting to make something. So make your path there as quick and simple, but useful, as possible. You're going to get all sorts of suggestions on what and how, and they've all had varying levels of success for different people. So weeding through them to isolate the best or trying to do them all is counterproductive. tl;dr - Just start with one simple path. You can branch out once you get dangerous (I'm not yet, by far.)
Python Osmosis (at the http://python.sourcequench.org link above) goes right through the tutorial, but in bite-sized video chunks. I offered that because it's easy to watch a quick 3-8 minute video during a free moment. Also, there's something about having a human voice leading you through it that helps, I think.
Double underscores [mangle the name](http://docs.python.org/tutorial/classes.html#private-variables). Change __ y to _ y and it should be fine.
I haven't tried it yet, but it looks good. Nice work. &gt; At the moment all I use it for is updating the directory tree in my (unreleased) text-editor. I've done something similar with ReadDirectoryChanges in a C extension...interestingly enough, also intended to be used for a text editor I was writing in order to learn wxPython.
But I want class 2 to make private variables.
good one, that one!
1. private attributes are not inherited (*edit: in oop*) 2. private/public is not very pythonistic (it doesn't even exist). There is a convention that _attribute should not be accessed directly by other classes 
Well I have a vague idea of what I want to be able to program, and granted to get there will take me many many hours of study, but I feel it would be helpful if I could find landmarks of what people have done at different levels and stages of programming ability (specifically with python) and to understand how something programmed in Python differs from something in a different programming language. 
I understand what you're saying. I just think you'll get buyer's remorse soon after heading down that route.
A basic FAQ page that you can read in one hour also seems like a good idea imo http://www.markus-gattol.name/ws/python.html
Really, just never use the name mangling. One _ is enough to let other people know the variable is "private".
I think Jeff is less-than-familiar with Python conventions or is otherwise misunderstanding the purpose of `__foobar`. Obviously these conventions aren't set in stone, but they're in [PEP 8](http://www.python.org/dev/peps/pep-0008/) and are generally considered to be good ideas. A single underscore is a convention used to indicate that a field or method is some internal detail of implementation, that it's not guaranteed to work the same way in future versions and that tinkering with it can cause unintended side-effects. (It's slightly more than a convention, since things with leading underscores won't be brought in when doing `from foo import *`). A double underscore mangles the name in a well-documented way. The intent is not to be some black magic making a member private, but rather to help avoid name clashes when subclassing.
I enjoyed reading that, more for the interesting use of English than the actual content. Most of the "hacks" weren't specific to Python editing, but useful nonetheless.
Private attributes *are* inherited, but the names are mangled. http://www.reddit.com/r/Python/comments/cad1i/double_underscores_pep_8_and_orms/c0r7s9z?context=1
Catchy name, too!
Private attributes in general; not in python: I was pointing out that his example was intrinsically wrong, because private attributes should not be inherited whatever the language is. _attr is just a [convention](http://docs.python.org/tutorial/classes.html#private-variables), and not an actual private attribute. 
Haha, I think I know what you mean. Good thing it's free. 
Eclipse + PyDev is a good solution. There is also an Eclipse distribution [Aptana something](http://aptana.com/products/studio3/download). About PHP security issues: not a valid reason! If you lack the necessary php knowledge to secure your website, use a php framework (always a better option anyway). Python is really great, but in my opinion it's also a bit more complicated to start web dev with than php. But worth it! 
os.path.relpath edit: oops just saw that you were talking about uris. Well maybe it works. But I'll leave this here because this week I remade a kind of relpath before discovering it existed. Might help someone.
I'm curious, what would you use the source pid for?
I'm using wxPython too, but I'm already quite experienced with it. I wanted an editor which fitted my work style, I wasn't happy with any that existed. The main feature is projects with full automatic session save/restore so that I can close it anytime, and start it up in the exact same state it was (including all tabs, scroll positions, editor selection, directory tree expansion and selection). Even unsaved files which don't have a corresponding file are saved and restored, until I decide to give it a filename. Switching between different projects is super fast since they get added to a menu on creation and each project has its own session.
The post is about 1.5 years old. In that time I think Celery+Redis has become another viable option.
Seriously, subversion ? In this day and age ? http://wiki.osqa.net/display/docs/Downloading+OSQA
I once was helping set up a site based on CNPROG, the project on which OSQA was based. The code quality was terrible, *incredibly* buggy, configuration wasn't centralized properly... I wouldn't trust OSQA to be much better (in fact, I'm a regular user of an OSQA-based site, and am constantly encountering bugs). FWIW, it seems [Plurk Solace](http://opensource.plurk.com/Solace/) is far superior in terms of its engineering, still Python-based, and BSD licensed rather than GPLed.
I'm not familiar with emacs, or python at all. I have a decent knowledge of PHP, JavaScript, etc, so figured it's time to learn something else. Emacs seems like it's a little much for me now. Maybe you're right and Notepad++ is the way to go. Thanks for the tips!
Thanks a lot, I'll try this out. But I have no idea what this means: &gt;When it all works you should be able to do C-cC-! to start the python prompt, and C-cC-c to send your buffer contents to the python prompt.
Never heard of easy_install or ipython... I'll check it out. Thanks for the help!
I've never used a PHP framework... I've always just hand-written my PHP. Can you suggest a good/simple framework for a noob?
I'm not a php expert, but you can look at zend framework/symfony. It helps implementing a clean MVC architecture as well.
Subversion is the most commonly used version control system. So yes, subversion in this day and age.
All those solutions use ANSI colors. You'd have to patch them up or use colorama to get them to work in Windows.
Anyone aware if there was any way to capture the 'who' information from file changes? I can tell if a file itself changes, but it would be handier to know it changed as well as who did it. Brilliant work. I've been looking for something like this for a side project, but haven't done any searching to see what was available.
Cool, thanks. I thought about checking out CodeIgniter, and I hear that Zend has a steep learning curve.
I've seen a few of these, but alas, none work on FreeBSD. :(
Again, thanks for all of your input. I have created my first document sample and it looks great. Now I just have to sell a Python solution. We actually use Jython extensively but have nothing in C Python (in production) at the moment so it's not an entirely foreign concept.
The other problem I found when trying zeromq was that it tries to handle failures for you, and seems to make it difficult to handle them yourself. For example one thing I tried was having one client send to two servers. This is the one of the first examples they use. Everything works great if both server are up, otherwise it hangs. I sort of expected it to send to both servers while both are up, otherwise send only to the server that is reachable. Instead it just blocks waiting for the other server to come back online. If you enable ZMQ_NOBLOCK you can find out if the send failed, but things quickly become messy after that. I was trying to build gearman on top of zmq, but making client to server failover was a lot harder than I would have thought.
One nice thing about gearman is that you get queuing and RPC in the same framework. RPC requests are fast and persisted to disk, background jobs can be persisted to sqlite/mysql etc. The other nice thing is that it is shared nothing, so you just run 2+ gearman job servers and point all your workers and clients at both servers, then you have no SPOF. There isn't any replication from the queue store, but that shouldn't be a problem in most situations. Basically it is robust enough that if the job server reboots no jobs are lost, but if the job server gets nuked from orbit you might have some lost jobs. (You can do both with AMQP, but it is a little tricky to do RPC. you have to build a temporary reply queue and send the reply-to queue name as part of the request)
I'm currently trying to wrap my head around BSD kqueue. FreeBSD support might show up. Patches welcome as well. =) I am also currently looking at the source code for http://freebsd.unixfreunde.de/sources/wait_on-1.1.tar.gz Cheers.
I don't disagree with you. It's just surprising to see an open source project nowadays that's not on git or mercurial. Almost all subversion projects I see these days are commercial/closed source.
Seconded. The probram OP is using is called Abaqus. The GUI is a nightmare.
So... would there be a variable/object/thing called mbd.job['all']? Or do I need to do something to find all of the names of the ... things in that ... thing. I don't know the lingo here, I speak FORTRAN.
You can iterate over all keys in a dictionary with: for key in d.iterkeys(): ... So something like this should do the trick (i don't know what constants actually got imported): for job in mdb.jobs.iterkeys(): mdb.jobs[job].writeInput(consistencyChecking=OFF)
Probably `mdb.job.keys()` will give you all the names, `mdb.jobs.values()` will give you all the tables (if that's what those are).
I don't know of anything that has Javascript support. There is a libxml DOM-like binding (can't remember the name), and there's pyspidermonkey which embeds a Javascript interpreter in Python, but I don't think anyone has actually glued those together for a fake browser.
&gt; HtmlUnit is a "GUI-Less browser for Java programs". [blahblahblah ... ] It has fairly good JavaScript support (which is constantly improving) and is able to [...] [simulate] either Firefox or Internet Explorer depending on the configuration you want to use. I don't really like that approach to testing things. It says "it's sorta like Whatever, but it's also not". If you want to automate testing in all your supported browsers, and you should, then you need to ... test your stuff in those browsers. And not in some "constantly improving Browser-like". [Windmill](http://www.getwindmill.com/) and [Selenium](http://seleniumhq.org/) both do that. Windmill lets you write your tests in Python, and has my vote.
Thank you very much. I tried it out, but ran into an error: &lt;type 'AttributeError'&gt;: 'kut_EOContainerIntObj' object has no attribute 'iterkeys' So would iterkeys() be a function that returns a constant?
Cool. This did it: for job in mdb.jobs.keys(): mdb.jobs[job].writeInput(consistencyChecking=OFF) 
no its not plenty of projects are (unfortunately) still using cvs.
holy shit this saves a lot of time
In my opinion it's easier than python frameworks, and the server setup is also simpler. You just need a LAMP and you're good to go, setting up an apache+mod_wsgi is a bit more complicated than apt-getting lamp ;) 
I'm on Windows : \ I do have PHP, Apache, MySQL and PhpMyAdmin installed. That's all I should need, right?
Yup. You might want to check PHPEclipse it's quite nice. You are using wampserver?
is there any way to achieve protected access for variables? I know private vars are not inherited, I want to make protected vars
what's wrong with this one? for job in mdb.jobs.values(): job.writeInput(consistencyChecking=OFF) 
if mdb.jobs is a Python dict, what about: for job in mdb.jobs: mdb.jobs[job].writeInput(consistencyChecking=OFF) 
Hmm, nifty. My CronExpression module seems to be quite a bit more flexible than his cron library with the added benefit of supporting cron lines without any modification. Will definitely have to take a look at the code though.
True, it is an ill-defined problem.
I did some tests and determined that even if I could get it to work, it's probably just best to access the data directly. I was envisioning a architecture where data was all access via resources and the caching was handled via HTTP headers and a caching proxy. I ended up just ditching this indirect data access method in my tests because it's just plain doesn't work well and kills concurrency: http://docs.knoxpy.org/restexperiments/ I could theoretically use Request.get_response on an app that has a HTTP based caching middleware and accomplish what I want. Phase 3 of my tests will explore different caching techniques. 
+1 for Solace. Have not looked at the OSQA, but had positive experience with Solace.
I have synatastic plugin for python and pylint plugin. Would I still need pyflakes ? Also I am using pydiction currently for code completion. Is there a better tool available for this ? 
bleah ! I have some speedups in store that should push us closer to current J2.
My sole experience with OSQA is that I once attempted to register for an OSQA-based site and post a solution. Never again.
Homework is given so you can figure it out yourself. If you can't figure it out, see [this page](http://en.wikipedia.org/wiki/Do_while_loop).
1. Until means the loop will stop once the condition is fulfilled, so this means a single iteration. 2. The language here isn't Python, so it's a bit strange to see it in the python subreddit. 3. This seems like a homework problem. It's best to try and solve these on your own :)
Is this really Python? What's with the asterisks? However, judging by the code, I would guess that it will iterate once: First time through, k = 1, but loop will only go as long as k is 1 or less. So after it's incremented on the first time through, the condition k &gt; 1 is false, and it will stop. I'm pretty sure that's not Python though :). Try: k = 1 while k &lt;= 1: print k k += 1
Do Until is not the same as Do While. Now get back to your homework.
I recently purchased PyCharm 1.0 and I've been *very* happy with it. Recommended.
I think putting ANSI codes into the logfiles themselves is a bad idea. Writing simple logfile viewer in Python that would add the ANSI codes to the output based on keywords would've been better idea...
You should not need protected var in the first place. Think python, not java or c++. What you can do is prefix your attributes with an underscore to make it clear that they should not be used by subclasses/other classes. 
Is template rendering really a bottleneck for web apps?
Obligatory: http://www.codeirony.com/?p=9
[Of course](http://www.codeirony.com/?p=9).
Meh. I switched from Jinja to Mako not for speed, but because I could put (nearly) whatever I wanted into the expression substitution tag and it wouldn't choke. IIRC Jinja actually parses the "Python" you put in the tags, while Mako uses it as given. Now if only Mako natively had inline control structures and I didn't have to hack that in myself. ; )
Ooo! Do tell! We like stories here...
&gt; I think putting ANSI codes into the logfiles themselves is a bad idea. Sure, but it's easy enough to avoid that: configure your logging to set a ColorFormatter on streamhandlers where the stream isatty. And you're done. StreamHandlers generally aren't used for files (there are file handlers for that), and if you check for `os.isatty(strm)` you'll catch output redirections done by people too lazy to reconfigure the logging subsystem (or by people piping into e.g. grep).
&gt; IIRC Jinja actually parses the "Python" you put in the tags Jinja parses the Jinja expression language which is *not* Python but heavily Python inspired. There are a couple of differences. For instance in Jinja2 there are test expressions: {% if value is even %}...{% endif %} Also there are pipes for filtering: {% if value|upper == 'HELLO' %}...{% endif %} Already from this it would be impossible to directly translate that into Python, but even without that, there are completely different scoping rules and much more. For instance Jinja will evaluate as much as possible at compile time: &gt;&gt;&gt; print Environment(autoescape=True).compile('Hello {{ "&lt;World&gt;!" }}', raw=True) *snip* def root(context, environment=environment): if 0: yield None yield u'Hello &amp;lt;World&amp;gt;!' Completely different semantics :) //EDIT: more fun with the compiler: &gt;&gt;&gt; print Environment(autoescape=True).compile('{% for item in foo %}{{ item }}{% endfor %}', raw=True) def root(context, environment=environment): l_foo = context.resolve('foo') if 0: yield None l_item = missing for l_item in l_foo: if 0: yield None yield escape(l_item) l_item = missing &gt;&gt;&gt; print Environment(autoescape=True).compile('{% for item in foo %}{{ loop.index }}: {{ item }}{% endfor %}', raw=True) def root(context, environment=environment): l_foo = context.resolve('foo') if 0: yield None l_item = missing for l_item, l_loop in LoopContext(l_foo): if 0: yield None yield u'%s: %s' % ( escape(environment.getattr(l_loop, 'index')), escape(l_item), ) l_item = missing 
inline like what, ${'foo' if 'bar' else 'bat'} ? 
The likely reason we take a little more time than needed is due to some of the pomp and circumstance when the template first runs, to figure out the "namespace" objects that are present. There are some obvious code cleanups in that area and hopefully more I haven't noticed, ticket #156 will begin to address them. There's probably some more template inline code speedups as well, I tend to not look for them much these days.
It definitely can be, if unreasonably slow. If you are profiling an app that pulls its data from memcached and spits right out into a template without any DB access, the templating can often be 50% or more of the time spent. The complexity of the template can also have an impact, if for example you use memcached to cache the final output of the template, versus caching the individual components of data that render into various subsections of the template which combine together to form the output, that makes a palpable difference in profiling as well. When Reddit first switched to Mako they contacted me about slowness and I had to direct them away from some Mako features that are known to add latency (i.e. `import "*"`).
This seems really great for exporting/manipulating data, what tools are around for importing tabular data from xls/csv?
If you're coming from CSV, Python's built in `csv` is nice. In 2.7 (I think) you can get the data back as named tuples instead of just rows.
The python packages "xlrd" and "xlwt" can be used to read &amp; write excel files. They're actually separate projects, but work reasonably well with eachother, allowing primitive edit &amp; save capability. Haven't used xlrd all that much, but my company uses xlwt heavily, and I can testify it works very well for generating xls files. Homepage is [http://www.python-excel.org/](http://www.python-excel.org/) edit: doh, meant to respond directly to issackelly.
This was posted to r/Python [just a couple of months ago](http://www.reddit.com/r/Python/comments/dd7w3/tablib_a_new_module_for_tabular_data_w/).
You might like [geany](http://geany.org). They have windows, mac, and linux builds (and uses scintilla, which is what np++ uses, so it should be somewhat comfortable already).
&gt; If you're coming from CSV, Python's built in csv is nice. No, it's not. It doesn't even have transparent unicode support.
It was related to objects and/or a database. It may have been [Magma or Gemstone](http://www.reddit.com/r/programming/comments/92ixq/magma_a_smalltalk_object_database_objects_are/) or something similar (which works with objects). It's possible it really wasn't very special and/or I am wrong about what it really was... however, I suspect it might still be useful to be able to work with data in memory, instead of the database, when you want low latency.
Perhaps I've missed it, but does this allow you to attach metadata to the columns or rows in any way? If you look at most (all?) of the popular statistical packages out there (Stata, SAS, R, SPSS, etc.), they all have some facility for attaching notes/descriptions/etc. to variables (columns) and observations (rows) - if this were easily supported in TabLib, it'd make it much easier to move between python and those applications - and/or let us not have to deal with Stata, etc. for some tasks because we need to preserve metadata. Just a thought.
I just put these together and I'd like to have people test it out so that I can get it into the main branch. OSX is a bit tricky so if you have that it would be especially helpful. Nobody has tested it on windows yet. Even if you don't have a kinect, it would be helpful if you test it and tell me if it complains about not having a kinect or not finding the library. These were accepted into the mainline, so you can test them out here now https://github.com/OpenKinect/libfreenect My Cython bindings now available in the mainline Here is a blog my friend Andrew and I are keeping updated with our toys https://dappervision-labs.posterous.com/
All of the suggested modules are fantastic, and are actually what Tablib uses under the covers. I wrote it ;) Tablib supports import of many datatypes too. All you have to do is set data.csv = 'some string of csv data' and you're good to go! Often times its more appropriate to write your own parser if it's a complex /inconsistent format and populate yourself though.
You can currently add row 'tags', and filter a dataset to only contain rows with a certain tag. http://tablib.org/tutorial.html#filtering-datasets-with-tags
I would recommend to look at Tabular, although it lacks some export formats, it does have a lot more functions than tablib.
Code's up on github: https://github.com/kennethreitz/tablib Patches, Feature Suggestions, Etc welcome :)
If I need to pay for an python IDE, Wing IDE is the best one I had so far. It's really fast and smart compared those Java-based solutions. I just wish Wing's python shell is as smart as dreampie.
what does format-agnostic mean?
Hmm, do they really provide "edit &amp; save capability"? Last time I checked it enabled "read &amp; overwrite everything" as you could not edit and save. This would make my day.
Awesome work. My kinect arrives tuesday and I can't wait to get hacking. I have osx and would be happy to put it through it's paces. Have you looked at pymt at all? It would be cool to be able to use this with an existing multi touch framework!
Awesome, but over the top. I use Mako, but I will concede that it can be slow if used _incorrectly_, its a very robust templating system and you can put a lot of business logic, and even database calls into your templates. But, if used correctly the differences illustrated are fairly insignificant. The way to "optimize" your template system is to ensure that you use it for templating, not as yet another place to shove in business logic or datastore accesses. 
You could try eventlet - the latest version has zeromq support
Is hooking up the hardware to my computer tricky at all? Do I need the standalone version that comes with a power source?
The feature set isn't designed for any particular data format. They can all be used interchangeably and seamlessly. Support for any format can be easily added.
i tried! (also tried sudo apt-get install libusb-dev) dylan@MAJUSCULE:~/libfreenect/c/build$ cmake .. -- The CXX compiler identification is unknown CMake Error: your CXX compiler: "CMAKE_CXX_COMPILER- NOTFOUND" was not found. Please set CMAKE_CXX_COMPILER to a valid compiler path or name. -- Operating system is Linux -- Got System Processor x86_64 -- Linux x86_64 Detected -- libfreenect will be installed to /usr/local -- Headers will be installed to /usr/local/include/libfreenect -- Libraries will be installed to /usr/local/lib64 -- checking for module 'libusb-1.0&gt;=1.0.3' -- package 'libusb-1.0&gt;=1.0.3' not found USB_INCLUDE_DIR=USB_INCLUDE_DIR-NOTFOUND USB_LIBRARY=USB_LIBRARY-NOTFOUND CMake Error at Modules/LibFindMacros.cmake:74 (message): Required library USB NOT FOUND. Install the library (dev version) and try again. If the library is already installed, use ccmake to set the missing variables manually. Call Stack (most recent call first): Modules/FindUSB.cmake:31 (libfind_process) lib/CMakeLists.txt:5 (find_package) -- Configuring incomplete, errors occurred! dylan@MAJUSCULE:~/libfreenect/c/build$ p.s. i dont have a kinect 
for i in x + [y]
I would have expected this to get downvoted. Not because I think it's a bad post, but because I often see newbie questions get downvoted on Reddit. Nice job, /r/Python! Also, to the OP, prepend your code with four spaces (oh, it's like Python, whitespace is significant :-P), and comments will not turn out all weird and blue: # Comment! **edit**: if you're using Vim, stand at the beginning of the first line, press Ctrl-V to enter Visual Block select mode, move down to the last line you want to indent, press 'I' (capital i), type four spaces and finally hit 'escape'. This will indent the entire block four spaces. 
Definitely agree, it's rather nice for embedding.
This is why I hate that "dailywtf" site. They're just people trying to "get it done" under the pressure of having to release on time. We've all been down that "there must be a better way to do this, but no time!" road. Too easy to publicly make fun of other people's code without knowing the circumstances.
Useless trivia time! The reason we need to do a 'flush' is because in the olden days the mainframes would delay sending anything to the terminals (dumb screens/keyboards that didn't have their own processor, etc) attached to it for performance (latency actually) reasons. Therefor both the terminal and the mainframe would buffer a whole line of text before sending it. The 'flush' operation tells the Operating System to send what's been printed/typed regardless of whether it's a complete line (i.e. ends in \\n). 
 &gt;&gt;&gt; mega_list = [[] for n in xrange(3)] &gt;&gt;&gt; mega_list[0].append('foo') &gt;&gt;&gt; mega_list [['foo'], [], []] 
&gt; xrange Wonderful. I knew there had to be a fix, but couldn't google for it without the right keyword. Thanks!
Hey man, awesome work, I am waiting for my Kinect (also arriving on Tuesday) then I can give them a good test on OSX (and maybe Windows if I can steal my girlfriends PC).
Also, if you're making lists of lists for numeric data, you might want to check out numpy. numpy.zeros((2,3)) creates a 2x3 matrix pre-filled with zeros.
I never expected it to get downvoted. I can understand how people would downvote a posts asking to be spoon-fed answers (how do I do this? which book should I read?), which is why I made sure that I got my code to the point where it would actually do something. I figured that if I could show what it was supposed to be doing, I could be shown how to make it do so more efficiently.
it has nothing to do with xrange and everything to do with the list comprehension. the comprehension evaluates the `[]` for each element in the iterable (in this case, `xrange(3)`). since it evaluates new each time, they are independent lists, whereas `[[]]*3` evaluates `[]` once, and then copies its reference for the other two.
I understand the computational issue - I just didn't know the function that would let me create multiple []s that evaluate independently.
Anyone tried to get this working in windows yet?
Looks like you need build-essential? Not sure I did the Python bindings, not the build system.
Yes that is the one I have. Setup for me went like this. I got it, I installed the driver (~10 minutes). I hacked around the GL demo (~20 minutes) trying to get the images into formats I am familiar with. After that it was really simple. I wrote a python library to interface with the C library (~1.5 hour). After that I cleaned it up and it was accepted into the mainline this morning. It's amazing how easy it is to use.
Nope haven't tried it. Join us on the #openkinect room in @freenode and we can help you through it. It's a great community (only a few weeks old).
Windows support is thin, but that is mostly because of the lack of people trying. OSX support is decent, and Python support is top-notch : P
Many tried, so far it's difficult. The way we have been doing it makes it difficult to port to windows and even a bit tedious with OSX. I'm sure it will be working soon, people have some C# libraries but I haven't tried it.
Well it's not like nix isn't freely available. Thanks for all this work i hope this starts to take off. Having python bindings for everything would be a dream.
The problem is that conceptually what you wrote is the same as this: l = [] ll = [l] l3a = [l, l, l] l3b = ll * 3 assert l3a == l3b In this example, it's not surprising that you're getting the same mutable object three times. In fact, it would be huge pain in the butt if Python didn't use the same object, because then you'd get a big performance problem out of simple list manipulation and there'd be no way to not clone the list. I can understand how the bug might creep into code if you weren't thinking about it and how it would be a huge pain to track down, but I don't really see what alternative choice Python has about the matter, besides getting rid of mutable objects.
I think you're still missing it. The function that creates new list instances is named `list`. It's not being used here. The fact that the working example is a comprehension is the important thing, not `xrange` (which is almost the same as `range` anyway). Think about the difference between these two code examples: &gt;&gt;&gt; #Buggy version &gt;&gt;&gt; mega_list = [] &gt;&gt;&gt; micro_list = [] &gt;&gt;&gt; for i in range(3): ... mega_list.append(micro_list) ... &gt;&gt;&gt; mega_list [[], [], []] &gt;&gt;&gt; mega_list[0].append(1) &gt;&gt;&gt; mega_list [[1], [1], [1]] &gt;&gt;&gt; #Working version &gt;&gt;&gt; mega_list = [] &gt;&gt;&gt; for i in range(3): ... micro_list = [] ... mega_list.append(micro_list) ... &gt;&gt;&gt; mega_list [[], [], []] &gt;&gt;&gt; mega_list[0].append(1) &gt;&gt;&gt; mega_list [[1], [], []] The difference in the working version is that I create a new list object every time I loop through. In the buggy version, I keep duplicating the same list object. `range`/`xrange` has nothing to do with it.
EDIT yourself: It's a dipshit thing to do to ask homework questions in a forum like this. If you make a good grade in a class, it is supposed to signal to your potential employers that you know how to do the work, not that you know how to beg other people to do your work for you. Moreover, this isn't even Python.
I think I misstated myself. When I said I understood the computational issue, I didn't mean, "Yes, I understand how xrange() solves everything!" I meant that I understood that the lists I created all had the same reference, but I was looking for some code that would do what your working version code does in a single line. So xrange() was the key to making it happen, although it had nothing to do with the underlying issue of reference assignment.
err, i might be missing something obvious, but: dylan@MAJUSCULE:~/scripts$ sudo apt-get install build-essential [sudo] password for dylan: Reading package lists... Done Building dependency tree Reading state information... Done build-essential is already the newest version. build-essential set to manually installed. 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
that's a great tutorial, but it'd be pretty hard going if you don't know how to program in some other language.
You're telling Python to make a list containing an object, then repeat this list 3 times. &gt;&gt;&gt; confusing_list = [[]] * 3 &gt;&gt;&gt; for x in confusing_list: print id(x) ... 4299912544 4299912544 4299912544 [id()](http://docs.python.org/library/functions.html#id) returns a unique number for each Python object, meaning each all the lists in `mega_list` are the same object Why? The Python interpreter sees `[]` telling it to make a new list object. Then it sees the `* 3` asking it to repeat the contents 3 times. What you are expecting it to do is create a new empty list object, which it cannot sensibly do (as the object can be *anything*) The correct way to make a list-of-lists is to do it in some kind of loop, e.g: &gt;&gt;&gt; sensible_list = [[] for x in range(3)] Or more verbosely: &gt;&gt;&gt; sensible_list = [] &gt;&gt;&gt; for x in range(3): ... sensible_list.append([]) ... Both of these create a list containing three unique lists &gt;&gt;&gt; for x in sensible_list: print id(x) ... 4300013512 4300050584 4300050728 
Instead of control structures taking up a whole line and managing white space with a trailing backslash, I've hacked in control tags, much like Jinja's. eg. `%{if some_condition}conditional content%{endif}` I believe I also added explicit white space modifiers to both the existing expression tags and these control tags ala Jinja (eg. `%{~ if condition ~}` will eat white space on either side of the tag). 
Thanks for the clarification!
I bought it especially to use it with python. Just didn't knew it would be possible so soon :) Great job!
Wait, so which one should I use?
if he didn't fix bugs or add features then he must have either added bugs or removed features...this leads me to believe that 3.2.0 is strictly an experimental version...
That's what I'm thinking. Plus, you should never use x.x.0 releases; that's just asking for trouble. I'd wait for the next revision and keep using whatever it is you're currently using.
&gt; after dumping beanstalkd which was more memory hungry than I wanted. Does Kestrel really use less memory than beanstalkd? That's a bit surprising. I would have thought a Scala app running on top of the JVM would use way more memory than a native executable coded in C.
&gt; **UNAMBIGUOUSLY THE VERSION YOU SHOULD USE version 3.2.0**
You are confused = I fudged up the versioning.
lxml.
Thanks : ) I have a Cython version coming out tonight.
 c:\Python27\Scripts\pip.exe install lxml Downloading/unpacking lxml Downloading lxml-2.3beta1.tar.gz (3.2Mb): 3.2Mb downloaded Running setup.py egg_info for package lxml Building lxml version 2.3.beta1. NOTE: Trying to build without Cython, pre-generated 'src/lxmllxml.etree.c' needs to be available. And plenty of more compiler complaints .. not looking so good. Unfortunately lxml is useless if one wishes to make an application that is easy_install/pip installable.
FUCK YEAH. BS 3.1.0 caused too much trouble for me over the last year...
Just install Cython.
Doesn't help, `pip install cython` fails also :) I'm a bit off-topic here, but .. Maybe I have missed something, but what is supposed to be platform independent python application distribution mechanism? PyPI, tar.gz and soon to be deprecated egg work quite nicely as long as you avoid dependencies which try to compile something .. I know you could make windows installer / deb package / etc that installs dependencies requiring compiled binaries but that's not nearly as convenient as simply using PyPI. Last time I checked how to make windows installer for a python application I came into conclusion that I don't really want to touch that bag of worms quite yet ...
No, he just bumped the version number of 3.0.8.1 to 3.2.0, so that the latest stable build would have the largest version number.
What are you trying to say? Why can't you give monoglot a straight answer to his or her question??
I am trying to say that the author of the post wanted to make clear that people should use 3.2.0. Or at least that's what I understood, please correct me if I am wrong.
Was that David Tennant narrating at the beginning?
I use QTdesigner and it works amazing. I had no real GUI experience, but was basically able to create the GUI through QTdesigner, convert the .ui file to python with pyuic, and then the only python I needed to write for it was to connect the buttons / actions to my code through slots. I recommend installing qtdesigner and finding a tutorial. You will see how easy it is.
if you're interested in starting from the ground up and learning some basic stuff for wx http://zetcode.com/wxpython/ is awesome and has simple examples. It goes over several types of widgets, events and styles. I've never used any GUI tools like glade for python, not sure how they are. something i made in like 5 minutes: http://www.filedropper.com/chatgui 
Agree completely. BeautifulSoup interface is fun, but it breaks on so many things... I found much greater success with lxml, which is why I wrapped it with a beautifulsoup like interface.
Unfortunately, it's not easy to install lxml with pip. The easy way is to use easy_install. And regarding your issues with installing Cython, I assume it says something about a missing .bat. You need to specify the compiler that you want to build Cython with and you do that in Python\Lib\site-packages\distutils\distutils.cfg. I used MingW32, so I wrote: [build] compiler = mingw32 You also need to have the location of the compiler added to PATH. 
don't wanna give the problem away, so: what have you got so far, where are you stuck? What steps does this program involve, and how would you solve each of them?
That is pretty sweet. 
If you're trying to parse XML with Beautiful Soup you're doing it wrong.
Tkinter is rather nice for some quick and dirty GUI. And it comes preinstalled with Python.
Why "if 0: yield None"?
Some hints: - you can input a string using the *input()* function. - you can use *assert* to check wether a integer is in the range [1000..9999] - you can convert a string to an integer using the *int()* function - you can reverse a string using *string slicing* ([::] syntax) - you loop using the *for* keyword - you can loop over a string - you print to the screen using the print keyword Using these hints and the manual should bring you a long way towards the solution.
 def homework(num): for i in reversed(str(num)): print(i) 
Because I'm lazy.
If you have to convert it to an int immediately that makes it a bit trickier as strings would be much easier to work with. If i were you i would just use mod. This might not be elegant(or very moral of me) but heres your homework num = 5364 reslist = [] while True: if num &gt;= 10: reslist.append(num % 10) num = int(num/10) elif 10 &gt; num &gt; 0: reslist.append(num) num = int(num/10) elif num == 0: break; print reslist Edit: Like the others said, please do some research and attempt to understand the various solutions. For strings simple reversals are easy and even built in. For ints you should understand basic concepts like mod (%) 
Well he said it had to be immediately converted to an int. So converting it immediately back to a string may be out of the question.
Thanks - yeah, I saw that - it's close, but not quite what I was looking for. In many ways, tagging the data is just generating data that isn't contained in a new column but could (should?) be[1] - particularly in the example you have on the tutorial. What I'm getting at are variable labels, data labels, characteristics and the like. Data is often much more valuable when you can include information about the variables and/or how it was collected and when you can separate coding from storage. Question text, for example, is a bit of metadata that is frequently useful when dealing with datasets that have come from questionnaires. Similarly, a description of the variable (useful for derived variables when they're calculated based on other data, either in the dataset or external). In any case, let me be clear, I'm not trying to be critical of Tablib - it looks fantastic and a real step forward from the existing libraries out there - I will certainly look at it for future projects that our research group takes on - the discussion above is simply thought about how it could be *that much more useful* to those of us that deal with scientific/statistical datasets. [1] depending on how strict you are in your data-dogma =)
But you are too lazy to do... what? =P
notepad++ in windows has a lot of that functionality if you're curious
I wasn't asking for anybody to do the work for me, I had done the work but still saw that two options could be a possibility. This happens all the time in Reddit, and in the real world. Now, go troll elsewhere.
Only emit that line if there is no other statement in the body. (eg: empty body)
If this is truly homework, research the following. **len**, **reversed**, **str**, **input**, **raw_input**, **print** and **int**. A for loop should be Python 101. To be honest, this is an extremely primitive problem. Try to understand it Vs copy and pasting solutions otherwise just drop out. I'm not being mean and sorry if I may come across as that.
I've been pretty pleased with wxPython; having worked with Swing (recently) and C++ Qt (10 years ago), I've found it predictable and pleasant to use. The book has been helpful for solving problems, and getting ideas about better approaches. I think GUI toolkits/libraries are sufficiently complicated that you're just going to need to bite the bullet and get in some practice with them. Either start in on your task and expect to have to redo some of the GUI stuff as you get more familiar with it, or do some minor projects just to learn.
I'm a big fan of [How to Think Like a Computer Scientist](http://greenteapress.com/thinkpython/), personally.
What benefits does running as a service entail on Windows? It doesn't seem very useful unless you intend to launch the process at boot time which I do not see done in your code.
Having recently looked into this, I'd go with pyside.
As a matter of fact, this works on any sequence type, The built-in sequence types are strings, Unicode strings, lists, tuples, buffers, and xrange objects (python 2.x). Additionally, any type that implements a \_\_getitem\_\_ that accepts slices will work.
The MOAR you know. Thanks!
I'm not doing the guy's homework for him. It's only a part of what he'd need.
Holy crap. To think I never used the skip argument...
What is this sorcery?
Nifty thing to have.
**input** will take any number of digits and make them int. Although you can use **str** to convert an int to a string, **raw_input** will do it for you simpler. Experiment with them. Your while 'True' should be while True (no quotes). Better yet, you can test for a condition in a while statement e.g., **while Ndigit != 0:**. As it is now, it's a little more than necessary. I'll give you a hint. You want to check the length of an object. Integers don't have lengths but strings do. Check to make sure the length is 4 otherwise what you do is up to you. If the condition of the object meets a length of 4, you would want to **iterate** over the items in that object and the **for** statement is the simplest for this. As of right now, you seem to have an idea of a few things. You seem to be expressing yourself well yet you might be over-complicating it. Get input, check that it is indeed an int with a length of 4 (2 steps), if not what now? break? and If the condition is met, iterate over 4 items using a **for** loop
I don't like it, it is very cluttered, and I need a cross-platform editor.
Is dabo in development any more? 
Ah. And you can't use `pass` cause you need to assert that it will be a generator. Got it.
From the [ChangeLog](http://svn.dabodev.com/dabo/trunk/ChangeLog) &gt; See the Subversion log for all the details. &gt; Dabo 0.9.3 (2010-09-12) Revision 6018): Last updated two months ago. I would say that it's still in development. 
Gigantosaurus is almost entirely correct. The only change is that now the Tag constructor can take a dict for its attributes, whereas before it could only take a list of (attr, value) tuples. 3.2.0 is completely safe to switch to. Tag("a", {"href": "foo.html"}) instead of only being able to do Tag("a", [("href", "foo.html")]) By the way, I'm the Aaron that Leonard referred to.
Sort of, kind of, not really. The 3.1 version switched the underlying parser to HTMLParser because SGMLParser has been removed in Python 3. It turns out that HTMLParser = FAIL on many pages. The 3.0.8 version was released *after* 3.1, but based on the 3.0.x code. The 3.2 release is mostly to clarify things.
TIR (This I remembered)
Count 1 more vote for Glade, but with PyGTK, not pyQt.
I disagree that you need to figure all your homework out yourself, but that's why classes have TA's. To help you when you're stuck, and ask questions to.
The dict class, when printed uses the \_\_repr\_\_ method of all its values for a representation, for some reason. And when you use repr on Unicode strings, you get escaped output. Only when you print does the actual Unicode show up. To demonstrate: &gt;&gt;&gt; a = u"ಠ_ಠ" &gt;&gt;&gt; a u'\u0ca0_\u0ca0' &gt;&gt;&gt; repr(a) "u'\\u0ca0_\\u0ca0'" &gt;&gt;&gt; print a ಠ_ಠ so use a for loop of some sort to print out your values individually, and you'll get the proper unicode characters. It doesn't really matter though, since the string data is still the same (and correct Unicode).
That's only reversed! Let's completely flip it! from string import maketrans def flip(x): alphabet = "abcdefghijklmnopqrstuvwxyz" rot_alphabet = "ɐqɔpǝɟbɥıظʞןɯuodbɹsʇnʌʍxʎz" trantab = maketrans(alphabet, rot_alphabet) return x.translate(trantab)[::-1] edit: fixed bugs, sheesh
Groovy, it works great with: for k, v in sorted(dict.items(), key=itemgetter(1)): print k, v Thanks a bunch 
So, is this just a Python implementation of a datagrid?
anybody used this framework before? I am wondering how it compared to camelot for example.
no what its for.
&gt; s = s[::-1] Don't you mean x = x[::-1]
News section on their web-site has recent updates...
Does this work in pre-3.0 versions of Python? I thought the default then was ASCII strings unless you specifically asked for Unicode?
&gt; **AMBIGUOUSLY THE VERSION YOU SHOULD USE version 3.2.0** The situation starts to get very, very confusing to me when I selectively quote you.
le bug
I'm not sure what your program will do in the end, but it sounds like it will simply manage a directory of ebooks with perhaps some metadata about them? Sounds about right for a first project if you do have previous experience. I'm not sure if you will be adding a graphical UI or what you have in mind so that will greatly change the skill requirements. Only point I'd recommend is to not fiddle with directory strings yourself (dir + '/' + filename type stuff). Python has built in libraries for this that allow it to be cross platform and more stable.
?
In the end, I would like to give it a very basic graphical UI, but this is another area in which I am out of my depth. First steps would be accessing and altering metadata. In fact, this is the most important feature for me, and will likely be the most challenging, as I would like to be able to change metadata on many different formats once I am done. File conversion would be nice, but is not a priority to me.
shit, I've spent like one hour fixing bugs like that
Knowing this actually helped me out on a job interview. The interviewer asked me to give him the shortest way I knew to reverse a string, and I wrote this on the board. Apparently his boss suggested it, intending it to be a semi-challenging interview question. The guy interviewing me knew it was a trivial exercise, but still presented it to see how familiar with the language candidates were.
That much delay to display 500 rows? I hope that doesn't scale linearly. It seems really nice, but it is much better to use an interactive terminal like DreamPie, together with a full featured database browser, like NaviCat.
I was going to take another stab at c++ in case I decide to get a kinect for christmas. It's a hard sell since I don't even have an 360... At least now I can stick with python.
You can do UI with Python without much trouble, but doing it all at once would be a bit overwhelming. You should be fine. I'd recommend using Dive into Python and the Python docs to slug through it. Good luck!
Thanks for the advice!
PyQt, especially if this will be used on Windows.
¡ʇǝǝʍs
it might be easier to do with a desktop webapp and then switch to making a GUI later if you even want to at that point. Things like django can make the interface between python, databases and presentation extremely easy to handle. The upside is that django tutorials are awesome
pyflakes is your friend!
They also added an extra o in rot_alphabet.
I gathered that it was directly querying a remote MySQL database over the Internet. If you watch when they are creating the connection, there is a noticeable lag as it makes the connection.
Seriously, what is this? I've been learning Python by myself and I know about getting a substring from string[start:end] but nothing like this.
Neato at the time I had checked it out last it hadn't seen development for a lot longer than that.
From memory you can also get it to return every second item using x[::2] and presumably every second item in reverse using x[::-2]
I didn't even try this, I just entered it into the comment field and submitted. That'll show me!
That's why it's a fiend.
The best way would be to use `unichar()` or `\u` with the character numbers so your source can still be read as many encodings (valid ASCII and UTF-8, for example) and so you don't have to add `# encoding:utf-8` at the top
not what its for
I've never heard of magma. Gemstone is one of the big names in the small field of object databases, and is most likely what you're thinking of since it's pretty tied into smalltalk.
Thumbs up for the string module and nested for loop within an if. Python is so neat.
The code is well-written. Do you mind if I incorporate some of your code into watchdog? Thank you. =) 
To be honest I didn't know this. I knew about the skip argument to indexing syntax, but it never dawned on me to use it for this purpose. I still prefer reversed().
What do you mean? I know plenty of people who attempt to parse XHTML with Beautiful Soup.
When it makes the table? No. It already has the data in the cursor.
What's the setup he uses to have autocomplete at the Python shell?
You can also string[start:end:step]
reversed() is definitely the more pythonic way. I dare say, that makes it better too.
It won't make any difference in speed and performance, none that you will ever notice anyway. I'd prefer to make product into a class: class Product: def __init__(self, description, buy_price, sell_price, inventory): self.description = description self.buy_price = buy_price self.sell_price = sell_price self.inventory = inventory # Some product p = Product("product1", 3, 4, 9) Because it'll make the code more readable once you start doing things with these products.
Achieving optimal performance really depends on how you plan on accessing the data. Unless you need to do complex aggregations on large sets of the data, a simple, easy way to go could be: products = { '38' : {'quantity':5, 'buy_price':3, 'sell_price':7}, '39' : {'quantity':4, 'buy_price':2, 'sell_price':6} } 
Then it would immediately end in the first loop when it wrap from start to end, wouldn't it?
Take a look at http://code.google.com/p/aranduka/ You might be better off in this case if you start by tweaking someone else's code. And being able to read someone else's code is also one of the best capacities you can have. Once done with your tweaking, try to generalize it and submit your code to the chosen opensource project.
http://learnpythonthehardway.org 52 exercises. Go at your own pace. Learn by doing. You won't know until you do. If you put this off for whatever reason, you won't learn... ever. Enough said.
I'd do the same, but use named tuples[1] instead of classes. Same readability but cheaper memory costs (which might matter if you have lots of Products) [1] http://docs.python.org/library/collections.html#collections.namedtuple
The step being negative tells it to start at the end and work backwards.
Thanks, I had completely forgotten about those. I think it depends on whether there will be much functionality related to Products. In that case the class would be a good place to put it in the form as methods. If it's only about representing data, named tuples seem to be the best fit.
It's called slicing lists. You can find some more information from [here](http://diveintopython.org/native_data_types/lists.html)
What are some of the Windows concerns? (I use linux but I will be building for windows)
I would also like to know. It's not iPython.
Just freakin' google it. Python GUI recommendations threads are all over the place. Reddit, StackOverflow, you name it. Always the same question, always the same answers.
If you do x[::1] it not only reverses it, but reverses it back to the original! 'hello'
Pig Latin: def piglatin(word): return word[1:]+word[0]+'ay' def piglatins(sentence): words=sentence.split() for w in words: print piglatin(w),
Not working for me. &gt;&gt;&gt; flip('testing') Traceback (most recent call last): File "&lt;pyshell#12&gt;", line 1, in &lt;module&gt; flip('testing') File "C:/Python26/ke/flip.py", line 8, in flip trantab = maketrans(alphabet, rot_alphabet) ValueError: maketrans arguments must have same length
Oh and it would look better if on rot_alphabet you replaced ظ by ɾ
dabo is really cool. I wish they'd drop their home-grown ORM and go with something like SQAlchemy, or even better make the ORM layer pluggable, but overall it's a great meta-framework.
I actually highly doubt this. A cursor is generally a handle to the database result set that one must fetch from ([this is backed up from this simple tutorial](http://www.tutorialspoint.com/python/python_database_access.htm)). The python function gets the cursor passed in to it which they probably call fetchall() on. This would *then* retrieve all the data in the result set over the connection.
I don't really think in patterns. If the problem at hand merits an object-oriented solution, then it gets one. The datastructures and inheritance patterns just work for you, rather then against you, in Python's case. Python's operator overloading and inheritable list and dict implementations are wonderful; they make your abstractions much more intuitive and usable, especially when you're making your own datastructures. Good luck trying to make PHP figure out how to compare two of your objects equal using its fifteen different equality operators. Once you've mastered that, if you try sticking it in an associative array, you're in for a whole new world of hurt. Its all tools man. If OO doesn't work for your problem, or finding an OO solution is not readily apparent, it's probably not a problem suited to be solved with OO. Just be aware of the gains you get with objects, and the losses you take without them. I've found the OO gains I get from Python are &gt;&gt; then those you get from PHP. EDIT: Grammar. EDIT (again): And also, I'd like to apologize for my initial terse response. You were genuinely curious, and I was genuinely jaded :)
What, no.... He executes the query to load the cursor *delay that I'm not talking about.* Then he executes another command to load the GUI window *delay that I am talking about.* It shocks me cause I do stuff all the time at the few thousand lines level that I tend to be browsing through, which are subsets of millions of lines, and it all works with my methods, but it wouldn't with these.
How auobt fnippilg lkie tsih? &gt;&gt;&gt; ' '.join([x[0] + x[-2:0:-1] + (x[-1] if len(x)&gt;1 else "") for x in "This is also a way to flip a string".split(' ')]) 'Tihs is aslo a way to filp a snirtg' 
Not only would this be the more readable solution but it would also be the safer solution. If you went the multiple arrays route you could have the good old db problems of inconsistency; for example, if you deleted from buy_pricelist but not sell_pricelist your checks would be off by one and would cause all kinds of problems. Having an array of objects means that you can add attributes to the class with a default in one place and you don't have the maintenance nightmare that is multiple, positional arrays. Please OP *please* listen to this (wo)?man.
And it is! With a catch. I think Python's greatness lies in both its operator overloading, and its built-in datastructure "canon," if you don't mind me taking a word from literary analysis. Devs bring to the table some implicit assumptions about what operators mean, and python provides some very nice defaults, and very nice adapter superclasses to "funnel" developers into using operations the way they're used in the rest of the language. The whole community encourages consistency with their "one clear way to do everything" philosophy. 
I was just saying that the cursor probably didn't hold the data. He first executed the query which probably didn't load the full result set into the cursor; the cursor just pointed to the result set on the server. The UI had to call a fetch&lt;all|one&gt;() command to load the data over the (slow-as-hell) network. Unless cursors work differently than how I understand them to.
s/array/list/g
You should checkout [Askbot](http://askbot.org/) too
Try changing the character set strings to unicode objects, if you're on python2.x
You should probably use easy_install -- pip doesn't install binary packages, and I *think* lxml has Windows binary packages available (at least it has in the past). You can generally mix and match easy_install and pip without problems, so you don't have to entirely change your behavior.
You should use reversed() if you want to save some memory (and possibly execution time).
Actually `reversed` returns an iterator, but your point certainly stands. Not to mention the `s[::-1]` method is significantly faster: &gt;&gt;&gt; timeit.Timer('"".join(reversed("foobarbaz"))').timeit() 2.0831266230322605 &gt;&gt;&gt; timeit.Timer('"foobarbaz"[::-1]').timeit() 0.4351482782885192
I did try that before posting and it didn't work. 
To be more clear: If you do `unicode(rot_alphabet)`, it will still fail, because it is turning each byte into a unicode character, because it has no way to know the boundaries of the characters you are giving it without knowing the encoding. You need to decode from the proper encoding, probably utf-8. If you do `len(rot_alphabet.decode('utf-8'))`, you should get `26`. If that fails, try `'utf-16'`. Alternatively, when you define alphabet in the first place, use unicode literals, like `u'ɐqɔpǝɟbɥıظʞןɯuodbɹsʇnʌʍxʎz'`. Edit: Oh, nevermind. It looks like maketrans can't handle higher codepoints. Boo. Edit 2: Unicode's translate works, but doesn't use the output of maketrans. Replace `maketrans(alphabet, rot_alphabet)` with `dict(zip((ord(c) for c in alphabet), rot_alphabet))`, to match the help docstring for `u''.translate`: &gt; Return a copy of the string S, where all characters have been mapped &gt; through the given translation table, which must be a mapping of &gt; Unicode ordinals to Unicode ordinals, Unicode strings or None. &gt; Unmapped characters are left untouched. Characters mapped to None &gt; are deleted. 
My point is even though he said "it all makes sense now!", what he describe doesn't really makes sense i.e., "starting at the beginning, ending at the end, and taking steps of -1" wouldn't work.
If the word begins with a vowel (but not a semivowel), you just append '-ay'. So: def piglatin(word): if word[0] in ('a','e','i','o','u'): return word + 'ay' else: return word[1:] + word[0] + 'ay' Or if we're going to ignore the 79 character/line suggestion in [PEP 8](http://www.python.org/dev/peps/pep-0008/): def piglatin(word): return word+'ay' if word[0] in ('a','e','i','o','u') else word[1:]+word[0]+'ay'
Maybe it's based on [Py](http://www.wxpython.org/py.php), more specifically PyShell. The documentation is old, but there is a quite recent version in the latest wxPython. From wxPython's changelog: &gt; Applied the final version of patch #10959 to the PyCrust code. It adds many enhancements to the Py suite, inlcuding the ability to edit blocks of code (called slices) as a whole before executing them, and also the ability to execute some simple shell commands. If you have wxPython installed on Windows, you may have something like *C:\Python26\Scripts\pycrust.bat* in your installation.
I still like the namedtuple factory but one annoyance I discovered is that the product is immutable. x = namedtuple("z, y"); foo = x(1,2); foo.z = 30 throws an Exception you have to use foo._replace(z=30) instead. I may have missed it in the documentation, but I didn't see anywhere that mentioned this behavior.
But! `&gt;&gt;&gt; Timer('[1,2,3,4,5,6,7,8,9,10].reverse()').timeit()` `0.5567534421274232` `&gt;&gt;&gt; Timer('[1,2,3,4,5,6,7,8,9,10][::-1]').timeit()` `0.7544841592995795` So use it for strings, but use the reverse method on lists.
I think if you're worried about this, on some level, you're doing it wrong. The setters and getters for properties should only be used because they have to be there for the code to make sense. (For example if the property is derived from another property.) I'd argue that if they have serious side effects (like performing I/O), they shouldn't be exposed as a property with setters or getters, but as functions.
Just put some boring news story about Kate Middleton and wassisface through it, and it became entertaining !
I'm guessing this is meant for some kind of introspection tool, not as a design pattern.
Stupid off topic question: I tend to use stuff like "in ('a','e','i','o','u')" a lot but I heard that it's a little inefficient since the the tuple would need to be generated everytime that if statement is executed. Do you guys ever try to use globals or "static" variables in that situation? def isvowel(x): return x in isvowel.vowels isvowel.vowels=('a','e','i','o','u') ??
don't forget words beginning with sh / ch / th def piglatin(word): if word[0] in ('a','e','i','o','u'): return word + 'ay' else: if word[1] == 'h': return word[2:] + word[:2] + 'ay' else: return word + 'ay' 
Or 'qu'. And you forgot the `elif` keyword and the correct return value in that last `else`. So: def piglatin(word): if word[0] in ('a','e','i','o','u'): return word+'ay' elif word[1] == 'h' or word[:2] == 'qu': return word[2:] + word[:2] + 'ay' else: return word[1:] + word[:1] + 'ay' The amusing part is that we can keep doing this all day, couldn't we?
Yeah -- something like this should only be used by things that need to non-invasively inspect a running program (e.g. in a debugger), because in any other situation you are fucking up the intention of the program. Proxy objects, for example, pretend to be something else for a *reason*, so breaking their encapsulation is a bad idea in the general case.
Maybe it would be more helpful for us to talk about it as a range of left and right sides, instead of as start and stop positions: 'string'[leftSide:rightSide:howYouWantToMoveThroughTheRange] ?
It instantiates the class, and the new instance will be garbage collected some time in the future. There is no guarantee it will be collected "right now". I usually use this form in the interpreter shell, or in very small scripts, or when I know this behavior doesn't matter much. If you want to make sure resources are collected, use try-finally, or even better, the with statement.
Ever tried to run GTK apps on windows? It's one big dll hell.
Is it detrimental to performance? should I just make a super class so that all the other classes can have access?
THIS IS HELPFUL ADVICE. thank you.
http://docs.python.org/library/functions.html#staticmethod Obviously this is only if you don't need access to non-static info. Otherwise yes, it creates an instance with whatever overhead is required (based on the specifics of the class).
Can you explain your try-finally and with comment? With 'try-finally', are you suggesting explicitly declaring a variable a=class() and then del a in the finally block? And with 'with', doesn't the object need an \_\_exit\_\_ function to be used there? Is there some kind of wrapper that you can use with 'with' so that it will construct and then destroy an object you pass to it?
Ah, good point. Didn't think of that.
In general, getting and releasing an object isn't that expensive, and it happens *all the time* in Python. I wouldn't worry *too* much about whether it's inefficient unless you have a reason to. Nonetheless, mythin's suggestion to use a static method is probably what you're looking for. What are you trying to do? Finally, if by "super class" you mean "catch-all class," I'd strongly urge you not to take that approach. Down that path lies only pain and suffering.
&gt; Is that bad form? It is if you do it more than a few times. If you need the instance, then save it. Consider making it a classmethod, if you really don't need the instance. Klass.function()
If you're just using the class to house a function or functions, it might be better to use a module instead. The module then effectively acts a singleton. Whether this is the best approach entirely depends on what you are doing.
 Ok this works. # -*- coding: utf-8 -*- def flip(x): alphabet = 'abcdefghijklmnopqrstuvwxyz ' rot_alphabet = u'ɐqɔpǝɟɓɥıɾʞlɯuodbɹsʇnʌʍxʎz ' trantab = dict(zip(alphabet, rot_alphabet)) return ''.join([trantab[c] for c in x])[::-1] 
I'm trying to write a class that just output the error message in the correct format for me, for example: class Error: Errormessage(...): class Foo: Bar(...): Try: Except: Error().Errormessage() I'm trying to have a verbose error message that's why edit: New code http://www.reddit.com/r/Python/comments/ea228/calling_function_using_classfunction/c16iuhr
I am using it as a module according to this? http://docs.python.org/tutorial/modules.html I'm just wondering if invoking it like that cost too much or if its bad form.
http://www.reddit.com/r/Python/comments/ea228/calling_function_using_classfunction/c16iq51 That is my code did you mean that, I'm a bit confuse edit: New code http://www.reddit.com/r/Python/comments/ea228/calling_function_using_classfunction/c16iuhr
http://code.google.com/p/instant-press/ (runs on GAE too)
Check out [Zine](http://zine.pocoo.org/).
Not really, because remember, when howYouWantToMoveThroughTheRange is negative, you move from right to left. &gt;&gt;&gt; x = ['a','b','c','d'] &gt;&gt;&gt; print x[1:3:-1] [] &gt;&gt;&gt; print x[3:1:-1] ['d', 'c']
Oh, I could. Sure beats working.
Not just debuggers, static checkers like pychecker could benefit from this. 
Perfect! My new code: class Error: @staticmethod Errormessage(...): class Foo: Bar(...): Try: Except: Error.Errormessage() I'm guessing it doesn't instantiate the class anymore. I'm still a little confuse on the difference between @staticmethod and @classmethod using either allows you not to instantaneous the class? foo.bar(...): for @staticmethod foo(...): for @classmethod Is the assumption correct? Google isn't friendly today. 
Zine's dead baby. Zine's dead.
I think everyone's favorite blog application is the one they wrote for themselves in the course of learning their preferred web framework.
&gt; in the course of learning flavor-of-the-month web framework that they will call "preferred" until a new flavor arrives. ftfy
 And with that, the two lovebirds PEEL AWAY on Grace, as the SONG on the BOOM BOX RISES.
This is true, and I might end up doing that. I just want to see what is out there first. EDIT: Actually, nevermind. It needs to have a gui editor. I don't want to have to write that. 
Don't forget using `[:]` to make a copy of a sequence &gt;&gt;&gt; x = [1,2,3] &gt;&gt;&gt; y = x &gt;&gt;&gt; y.append(4) &gt;&gt;&gt; y [1, 2, 3, 4] &gt;&gt;&gt; x [1, 2, 3, 4] &gt;&gt;&gt; z = x[:] &gt;&gt;&gt; z.append(5) &gt;&gt;&gt; z [1, 2, 3, 4, 5] &gt;&gt;&gt; x [1, 2, 3, 4] 
The only possible performance advantage of the multi-and form is the chance for short-circuit evaluation. However, all() may do that internally as well. Personally, I just consider a stylistic preference thing. For more than four-ish items, the all form might look cleaner. 
&gt; in the course of learning the framework that will eventually hamper their totally awesome blog engine requiring them to write their own framework and then blog about it FTFY
I like [http://blogofile.com/](http://blogofile.com/) . Even though I have a regular managed Wordpress blog, I would probably try something along a static site compiler like Blogofile.
I think we'd need to see the `def` for `c.event` to properly understand what's going on with that decorator. 
It's just an event trigger for when the object is modified.
Roll your own.
I've made two little apps in tkinter, and was rather surprised by how good it was, as people have a tendency to bash it. I'm not saying it is the best, but it works adequately for what I've done so far. Here are my simple little projects: http://bitbucket.org/jgrigonis/mathfacts http://bitbucket.org/jgrigonis/mortgagecalculator
Well, it looks like it's *probably* bad form, but I can't say for sure without knowing the context. If `class` doesn't take any args, I don't see what the point of using a class is. As far as performance concerns, again there's no way to say without knowing what you're doing. That said, it's unlikely that this by itself is going to cost too much.
all() does short circuit, but every element will be looked at when constructing the list.
Ok. But.... The `c.event` decorator should be returning a callable. And how it scopes `c.id` over the closure will affect what's printing. I think there's some interaction going on that we can't see from just what you posted. Maybe you meant to decorate with just `c`, not `c.event` ? 
How often do you just want the string, though? 9 times out of 10 you're iterating through it anyway.
While this is true, starting with something feature complete that you can easily edit has its merits.
It might have improved greatly a couple of years ago, but that's just my impression from googling stuff -- I stumbled on a lot of recipes that are not necessary now. The downsides that I've encountered: 1. Visual GUI editors are nice, I want one. There are some, but all seem abandoned quite a while ago. 2. It doesn't have some controls that I feel __must__ be there. Like comboboxes. So I waste some time rereading the documentation just not believing that it's not me who missed it, that this shit is really not there, then some more time making do with substitutes like menubutton+dropdown menu. 3. Tkinter documentation sucks, so you'd have to read tcl/tk docs as well. Also, tkinter sucks and you most probably would have to learn how to talk to tcl/tk directly. The good thing is that it's easy, usually. The bad thing is that there's some weird tcl/tk extensions and pure tcl recipes that I don't quite understand how to use. __Clarification__: this applies if you have a somewhat nontrivial idea of a GUI and expect tcl/tk to allow you to implement it. 4. Some controls kinda exist but are different from other GUI frameworks. For example, in WinForms I have splitters that I can place wherever I want and they work. In tcl/tk there is something like a resizable panel or something, called weirdly and with tkinter documentation trying its best to divert your attention from it. 3. Fucking menubuttons and fucking buttons have different fucking height. And there are several levels of wrappers, with some offsets added somewhere. Figuring that out can drive a man insane! Insane, I tell ya! Unless you don't care if your buttons on a tool panel don't line up prettily, of course. 7. Figuring out how to coax the grid layout into making one column somewhat wider than others, then use different quotients for resizing is not good for your sanity either. On the other hand, the Text control is absolutely fucking INSANE, and I mean that in a good sense of the word, tags are awesome and it is unbelievably fast actually, you can load a 20MB file and it would use 20MB of memory and be snappy!
`all` almost certainly short-circuits internally, but the call to it requires all arguments to be evaluated, which might be costly depending on the arguments. It also requires a list to be constructed, which will add to the overhead.
There's my offering, Django Tech Blog (http://willmcgugan.com/2009/3/14/the-low-down-on-django-techblog/) I have touched the code for a long time, but its been powering my blog for over a year now...
I agree with your sentiments. I still plan to learn and use something better eventually. Even in my simple little apps I did find myself banging my head on things that seem intuitively trivial.
I have no idea what you are talking about! I recommend this very good blog engine: https://github.com/sontek/django-tekblog
Sure, the cases when you want code like this is pretty rare. But as the final code demonstrates, when you do need it it is hard to get right! In the general case the standard introspection tools like dir and getattr do exactly what you want.
These are good points. My main concern was stylistically whether this was a no-no that I hadn't heard of, or if it was common practice to use all when it saves some space (particularly if it's the difference between a multi-line conditional and a single-line). Thanks for the feedback!
If I had to go with a blog, I'd definitely choose yours. I love your book!
Gracias :-)
After spending some two weeks with Zine, 8 hours a day, I must say that I'm disappointed in it. The code seems to have been architected by someone who wanted to make everything OO (even when it lead to code that is a *lot* harder to change than it should be) and use Python's introspection in ways that make the code harder to understand, not easier.
You mean like this? http://tinymce.moxiecode.com/ It takes over any &lt;textarea&gt; you desire and returns HTML. Or, my personal favorite is to write in Markdown and use a filter when you display it.
del a in the finally block doesn't promise releasing resources. A more apt example would be using open(). In this case, it would be: f = open(..) try: ... finally: f.close() or with the with statement: with open(...) as f: .... If you're writing your own classes, you indeed need to write your own \__exit__ function (or use a contextmanager! much simpler) 
What exactly are you trying to do? Why not just "raise MyError()"?
I'm not sure I understand. Why would I want to make a webapp? I am assuming I'm missing out on some implementation concept here. Perhaps I should emphasize the *basic* in my grasp of the *basic*s of computer programming. I have made very simple local programs, and that was a long time ago; I've never done any kind of web applications.
Thanks, and you're quite right. I'll check it out.
It's a "classic". Note that on_value_change is a closure over c. However, during the loop c is changed, and all the on_value_change functions refer to the same c, that by the end of loop refers to the last of the root.children. This means that when any of the on_value_change functions is called, it will be called for the last c. There are two ways to avoid this: 1. Use default parameters like so: for c in root.children: @c.event def on_value_change(cur_c = c, *args): print cur_c.id, ' - ', args 2. Use a wrapping function, and call it with the current c, like so: for c in root.children: def wrapper(cur_c): @c.event def on_value_change(*args): print cur_c.id, ' - ', args wrapper(c) Personally, I prefer the second one as it's not a "hack" and "how it should be". Many would prefer the first one, as it's simpler to understand, and involves less typing &amp; complexity. Both are ok to use.
Perhaps you could roll your own that uses Git (not DB) as a data store using one of the Python libraries ([dulwich](http://code.activestate.com/pypm/dulwich/), [etc](http://code.activestate.com/pypm/search:git/).) somewhat similar to [Wheat](https://github.com/creationix/wheat) ([example](http://howtonode.org/)) from the node.js community.
This seems like a case of premature optimization to me. Write it in the clearest way possible (using tuples, classes or namedtuples, whichever you think is best), and if speed or memory become a problem, optimize then. (P.S. I too accidentally the all 3 the same amount of times! ;)
 &gt;&gt;&gt; print x[::-1] ['d', 'c', 'b', 'a'] Maybe if you leave the inputs blank, it takes its left/right queues from the step direction?
it looks pretty though
Just a small point: all() and any() don't always require all arguments to be evaluated, when you call them like so: all(x for x in seq) any(x for x in seq) In this case the short circuit works as you expect.
You should have tried clicking the link after reading the title but before commenting... ;p (does the smiley face make my point less offensive? 'Cause I don't want to sound offensive, but really, dude, read the linked stuff before you comment, titles can't possibly convey the subtleties like this).
If you leave either one or both blank it definitely takes its queue from the step direction. Blank means "all the way to the end."
that makes sense if you started with a sequence. The sample created a list by combining a,b,x,y. all(x for x in (a,b,x,y)) will still construct a list and evaluate every element in it. 
yup. I used to do this to create pairs form a single list: zip(x[::2],x[1::2])
Well, I glanced through the document but didn't read in detail, obviously. Sorry if I offended you.
Yeah, I've been trying that out the last few days and it seems pretty nice. Mostly to supplement my Wordpress blog however. The thing that's keeping me from switching is worry over handing my comments over to disqus. 
my first python app after a long hiatus was an ebook manager. Real basic, just crawl directories and add file names, paths and metadata to a sqlite db. Might have been all of 20-30 lines of code. Sounds like you have a good starting point but I'd second the suggestion of "Learn Python the Hard Way" and add "How to Think Like a Computer Scientist: Learning with Python"
It looks like the soup is tasty but don't ask how it's cooked.
Verbose error message, write to file/log. I'm just trying to minimize creating multiple instances of the module which i thought would eat too much memory. Essentially errorException.py Foo1.py Foo2.py Main.py Mains call foo1,foo2 each can raise exception within its class. Now I don't want to rewrite and format my exception every time so I would call errorException.py later I will just add a handle there to write to log files. I want errorEx.py to take parameters and returns when it need to without instantiating.
It takes arguments, its just that I don't need persistent data after I call the class. Plus many programing path may need to call its functions so I don't really want to create too many of it. See: http://www.reddit.com/r/Python/comments/ea228/calling_function_using_classfunction/c16jqcp
Why do you need an alternative to Wordpress? If this is for your own personal use, and you're just looking for something hackable, be a *real programmer* and code in raw markdown with Git for version control. There are a number of packages that generate static sites from markdown given templates.
I just switched to [Blogofile](http://www.blogofile.com/) yesterday and here's my [blog post](http://techspot.zzzeek.org/2010/11/21/how-coders-blog/) about it.
armin just mentioned today he's migrating off of it (he wrote it).
Aha, thank you very much. I get it, and it works, it just seems extraneous and silly.
Nicely done.
I'm using Zine but I don't love it. I think I will switch soon.
These days its actually much easier to make richer UI inside the browser than it is with local windowing toolkits. Most of your program logic sounds like something Django would do very well. You'd also have to learn some Javascript/jQuery but its not really much of hurdle after you learn Python. Take a look at Sencha ( http://www.sencha.com ) or some other web framework and compare that to PyQT or PyGTK and pick which one you think you would like to write in.
Never checked out PHPEclipse. Is it easier to set up than CodeIgniter? Not using wampserver. I installed everything separately. Maybe using wampserver would've been easier.
Why do people always think that someone who asks a question has no good reason for asking the question? Do you really think OP hasn't considered rolling his/her own? And what does git have to do with it? OP asked for a blog app, not recommendations on version control.
For what it's worth, regular tuples are also immutable.
How can I recommend something without context? The fact that the OP is asking for Python suggests to me that he likes Python and wants to write a specific sort of extension, and doesn't want to work with WordPress. Without better requirements than "I want a blog" my answer is pretty much "use WordPress, worry about platform when you have some content."
I use [Hyde](https://github.com/lakshmivyas/hyde). It generates flat, static HTML files from templates, so it's not for you if you need anything dynamic (you can get comments with Disqus though). If all you want is a blog, however, it's really nice to just render out some HTML files, slap them behind Nginx and not ever have to worry about going down from too much traffic. I wrote a [blog post](http://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/) about why I switched to it that you might find interesting.
Is it worth it? Let me work it. Put a string down, flip it and reverse it.
I use [PyBlosxom](http://pyblosxom.bluesock.org/). Quite minimalistic. You just put some html in a file somehow. That file is a post. The first line of the file is the title of the blog post. The program generates a blog out of the files using the date stamps. There are a bunch of plugins available to do the various things associated with blogs. If you want to do something pretty you pretty much have to dig into some CSS.
you're more worried about disqus than the continuous parade of new exploits against wordpress sites ? interesting.
freyrs3 gave you the right answer. webapps running on the local machine can give new developers a very easy way to create very pretty, very powerful applications without the penalty of learning GUI programming. Basically a webserver running on the same machine as the e-book library can provide a browser based front-end to the library and can run complex searches, maintain tags via a database component, etc All of a web-browser's built in capabilities like HTML rendering and javascript can then provide you with a way to rapidly make pretty user interfaces that have the added benefit of being available from both your own machine and any machine that connect to your machine via a web browser. 
It appears to strip the head and style tags from the markup. Simple enough to do without a library.
Yes, definitely check this one out. Watch the video.
Not exactly. It strips out all the surrounding content of a page as well. Give it an article and it will return what is most likely to be the article's content.
http://www.aidanf.net/archive/software/bte-body-text-extraction https://github.com/aidanf/BTE
I used Twisted for a Go (the game) server and I am very happy with that choice. It has everything you may need. It was really easy to implement chat rooms, private chat, live public and private games, etc.
I agree that in this case, it's less relevant to the OP's code sample. I was just pointing out something regarding all() and any()'s behavior. To answer your statement: in all(x for x in (a,b,x,y)), a tuple with four elements will be constructed. "Evaluated" is a bit ambiguous though. If for instance, all of a,b,x,y implement __nonzero__, and if b.__nonzero__() returns False, than x's and y's __nonzero__ won't be called. This also happens anyway when you do all([a,b,x,y]).
I think this is a bit of premature optimization (saving the instantiation). I also suggest reading about the logging module - it can save you a lot of pain :) 
Alright thanks
A namespace is just a mapping between strings and values - very much like a dict (Which is how it is implemented internally). For example, class A(object): b = 1 the namespace A maps between the string 'b' and the value 1. When you write A.b, a check is made if 'b' is in A's namespace, and if so, its value is returned. 
I guess this is similar to the case of `sorted` versus `list.sort`, where the latter is more efficient. So yeah, generally if you don't need the original list, it's better to sort/reverse it in-place.
Yeah you don't need an xbox. For $200 you can have the coolest vision hacking toy ever and it works in Python : )
Nice. I've decided to use Twisted because I really don't want to deal with thread safety and the insane details of threads just yet. I really just need a server that can broadcast a message from one connection to all the other connections. Any idea?
EUREKA! So essentially namespace is a .py file with variables, and you can then call those variables "A.b" in your example. 
Found a great library: https://github.com/gfxmonk/python-readability import readability print readability.Document('http://ssutch.org/iphonecaching').summary() It's a port of [Arc90's readability](http://lab.arc90.com/experiments/readability/js/readability.js) It's slow, uses BeautifulSoup but works.
A namespace is a way of organizing your code, mainly if you had a large project, particularly if you're collaborating. You may have functions that have the same names. Maybe you created a function called subtract and your friend you're working on a project with created a function called subtract. How can we use both functions and avoid the fact that they're called the same thing and probably do different operations? Namespaces. You put your code in your own namespace and your friend puts his code in his namespace and then you can reference those functions with the namespaces appended on and the conflict is gone.
Prospect of data loss worries me more than risks of being outdated. And this isn't baseless worry, twitter lost all my tweets a while back Show me an unpatched exploit for a fully updated wordpress installation with no plugins except akismet and wordpress stats. 
Yes, it sorta does.
have a look at http://www.markus-gattol.name/ws/python.html#namespace_scope
but if b, x, and y are not just variable references but complicated functions if x and calc1() and calc2() and calc3(): # do stuff then that form *won't* call calc1, calc2, or calc3 if x evaluates to False. however, the alternate form suggested (all(x for x in (a, calc1(), calc2(), calc3()))) *does* call calc1/2/3. this (ugly as shit) form doesn't though: if all(x() for x in (lambda: a, lambda: calc1(), lambda: calc2(), lambda: calc3())): # do stuff *hurk* edit: you can prove this to yourself by something like the following def f(s): print s return len(s) &gt; 3 if False and f("as") and f("asdf"): pass # doesn't print anything if all(x for x in (False, f("as"), f("asdf"))): pass # prints "as" and "asdf" if all(x() for x in (lambda: False, lambda: f("as"), lambda: f("asdf"))): pass # doesn't print anything
Your blog-setup has been very inspiring. I started from your repository and am currently (non-publicly) stripping out/adapting/modifying it to my needs, into something that says "inspired by" instead of "stolen off" ;-).
Mainly: revision control.
And that's a shame really, it's about time python got a standard blog/cms engine like Wordpress, I wonder why we don't have one yet. 
Not quite. A namespace is *any* way of dividing names up so they don't trample over the top of each other. A module (a separate .py file) provides a namespace for variables, but inside that namespace, a class provides another (nested) namespace, and methods inside that class have namespaces of their own. In the other direction, "packages" (directories full of modules) are a way to namespace modules.
A .py with variables is a namespace, but the concept of "namespace" is more general. Essentially, it's anything you can lookup names in. Anytime you're writing `something.name`, or even just `name`, what you're doing is looking up "`name`" in one or more namespaces. So: &gt;&gt;&gt; class C(object): pass &gt;&gt;&gt; C # Looks up C in the current module's namespace &gt;&gt;&gt; C.foo # Then looks up foo in class C's namespace &gt;&gt;&gt; c=C() &gt;&gt;&gt; c.foo # Look up foo in instance c's namespace Sometimes requesting a name will actually try multiple namespaces. For instance, getting an attribute from an instance will try, in order: 1. The instance's namespace (usually implemented via `__dict__` 2. The class's namespace 3. Any base-classes If not found in any namespace, it'll throw an exception. There's a similar lookup for plain variables, where it'll first try the local namespace, then any enclosing functions, then the global namespace, and then the special `__builtins__` namespace.
Possibly not, but I find pyflakes-vim's notifications much much nicer than anything else I've seen. It underlines the token (or nearest it can find) that triggered the error, then when you move your cursor over it the status line will show you the detail. It's very unobtrusive, but effective.
You can always use Plone, on Zope. If you dare.
This discussion kind of had me thinking of "and" as a useful syntax for flow control. a() and \ b() and \ c() will cause the flow to occur only if all functions return True. so it can work as shorthand for if not a(): return if not b(): return if not c(): return 
I prefer multiple ands because of principle of least surprise - the all() version would make me stop and think for a moment.
I think that the first form is more idiomatic in Perl, and the second is more idiomatic in Python (explicit is better than implicit).
In python 'names' are bound to objects: a = 1 Above the name 'a' is bound to the integer 1. b = a Above, the name 'b' is bound to the same object 'a' was bound to (in this case it gets bound to the integer 1). Of course one name can only be bound to one object: a = 2 Now the name 'a' is bound to 2. (Name 'b' is still bound to 1). Now here's the thing - names exist within namespaces. The same name 'a' can be bound to a different object in another namespace. The simplest kind of namespace is a module: x.py: a = 1 y.py: a = 2 Above you have two modules. Each module contains a name 'a'. But the name 'a' in x.py is completely different and unrelated to the name 'a' in y.py. If you imported both you can refer to them separately: import x, y print x.a print y.a You can say the module x's namespace has a name called 'a'. You can also say the module 'x' has an attribute 'a'. If you create a class, it gets its own namespace: z.py: a = 1 # this a is different from the a below class foo: a = 2 Above you have a module 'z' - it has two names (or attributes): 1. 'a' is an integer 2. 'foo' is a class The class called 'foo' has its own namespace with one attribute 'a'. So you can do: print a # prints 1 print foo.a # print 2 Another place where you have a namespace is when a function is run: def f(): b = 2 c = 3 When you call f(), a new namespace is created. This namespace exists only *while the function is running* - the names 'b' and 'c' are defined and when the function returns, the namespace is deleted (so you lose the values of b and c at that point). In this case you don't call the names 'b' and 'c' attributes, but you call them variables. So names always exist in namespaces, but they can be referred to as 'attributes' or 'variables' depending on what kind of a namespace it is. One namespaces exists for each module, class and function call in the program. There may be more namespaces you encounter as you learn more. Hope this helps.
Both are not idiomatic in python. The way to go about this is actually having functions throw exceptions upon failure. That's the pythonic way. The second one is actually idiomatic C, where function failure by return value is prominent.
How about `if y not in x` ? [Link to the documentation](http://docs.python.org/reference/expressions.html#in) in case.
that was what I was thinking, but Python syntax is still new for me so I wasn't sure.
I think the simplest thing is to make it a set and test for not in-ness. You didn't ask for my advice but I'll give it anyway. :-) Worry about writing Python clearly (without being stupid about performance). If you *must* have great speed (a rare need) then you want another language.
You didn't mention a, b and c were failing in your example. I assumed they were just Boolean tests.
Does it have to be an array? x in set("one", "two", "three", "four", "five") is much faster than x in ["one", "two", "three", "four", "five"], especially if you can construct the set beforehand.
the array will have new items appended to it several times after creation, so I'm guessing I should use a dictionary or list for this.
Do this. I wrote my own static HTML generator over the course of a few evenings. You get a *lot* of satisfaction using something you wrote yourself.
Just as easy to just type it into the console and try it as it is to type it in here.
If you don't need to keep the items in order, use a set. Fast membership testing.
Get yourself [ipython](http://ipython.scipy.org/moin/) to play around with fragments like that. With autocompletion :)
I am subscribed to both Dabo and Camelot lists. I subscribed to both approximatly the same day. Dabo has 137 messages, Camelot has 18. Secondly, Camelot is a framework especially written for database applications. Many many Dabo applications written by its users are not database applications, so Dabo is more general. Camelot has good features, and I think its even faster to create database apps with. It relies on two powerful toolkits : Elixir and Qt. One of the benefits of using Elixir for example is that you define only your classes and the framework creates the tables, set relations b/w them and the UI. It also easy to have informations from both the parent and the children tables in one grid. You should try both and see what fits your needs best.
did you start a project? - django-admin.py startproject mysite - http://docs.djangoproject.com/en/dev/intro/tutorial01/
 x in set("one", "two", "three", "four", "five") is only faster if the set is already constructed. If you have to construct the set to do the comparison, you'll see a considerable slow down. In a test I did with 100,000 strings, it took approximately 0.022 seconds to create the set and find an element in the set (about the same for checking that an element is not in the set). If I simply test whether or not an element is in the list, I get a result in 0.00059 seconds for an element in the list, and 0.0060 seconds for an element not in the list. Now, if I pre-construct a set object, doing a test takes about 7 microseconds regardless of whether or not the element is in the set. So if you have to do multiple comparisons, it's definitely faster to construct a set. But if you're just doing one comparison, creating a set is a massive waste of time.
I'm the guy in the video. The delay is due to using an underpowered (non-Pro) MacBook for the session, which had no separate video RAM. Driving two displays and running all the session material ate up all of the whopping 2MB of RAM on that machine, causing a lot of swapping, which is what you're seeing. You can see a better example using more capable hardware (my current MBP) on a recent screencast we did: http://c0129431.cdn.cloudfiles.rackspacecloud.com/browse_shell.html
I found [Kukkaisvoima](http://23.fi/kukkaisvoima/) to be quite useful. It is minimalistic though.
The point is to have ready-to-use classes/functions/methods when you develop a database application, and dabo.ui.browse is one of them. 
Show us the goods already. (the script)
I'm still not sure there is a consensus about WSGI on Py3k -- see http://wsgi.org/wsgi/Python_3 -- but *if* you manage to get the Django runserver to work, then you should be able to use FastCGI based deployment without problems. YMMV, HTH, etc.
This is very good advice; often a minute spent at the console saves twenty minutes spelunking the docs.
You can write your blog in any editor, on any computer and then push it when you're done. You don't have to worry much about security compared to using a web-based admin interface. You also have full change history. For a blog all this is very convenient.
Yup. This is very clear in the documentation. Django is well documented and this is one of the first lines. This makes the question annoying.
Converts...to what?
I don't like how we downvote beginner questions. Very often at coding challenges or *dojos* you'll see two senior developers go at it over a single line of code. In the end everyone ends up learning something.
Co[n]verts HTML to...?
You really should be on planet python.
A .py file is also known as a module. A module contains names that are bound to objects (which may be simple values, functions, classes, etc). A module is a space for names (that are bound to objects)--a separate space that may contain the same names as some other module. In my experience, in Python the term "namespace" most often refers to a module, although I agree with other commenters that the concept is more general.
Oh, you are/were. I guess it hasn't picked up the switch yet.
WTF is this login for disqus?
The set constructor requires a single argument (a sequence): x in set(("one", "two", "three", "four", "five")) The extra pair of parens makes a tuple out of the four words.
I think what you're saying is true, but we don't normally refer to the local scope of a method as a namespace.
If it's a short list, using `element in my_list` (as suggested elsewhere in this thread) could be more efficient (for some value of efficient). If you want great speed, you just rewrite the relevant portion in C, right? Edit: ["short" is relative](http://www.reddit.com/r/Python/comments/eahbg/another_beginner_question/c16ln7w)
It's a `list`, not an `array`. And, yes, it does matter.
It's a `list`, not an `array`. And, yes, it does matter.
Context is everything when asking for the "best" or "most efficient" way to do something. How big do you expect the **list** to be? Will you be adding and removing items often? Does order matter? Etc.
&gt;reference counting for garbage collection (which is what CPython uses) TIL. I'm not a Python programmer, but I had always thought CPython had a full garbage collector. 
I've narrowed down the problem a little more. If the script is simply `import sys`, I get a different, WSGI-specific error. If I have (anywhere) `import os` I get the error from the title However I can `import os` from the interactive interpreter The full script looks like this `import os` `import sys` `os.environ['DJANGO_SETTINGS_MODULE'] = '/home/ubiqutinatedkarma/django/mysite/mysite.settings'` `import django.core.handlers.wsgi` `application = django.core.handlers.wsgi.WSGIHandler()`
yeah i switched the blog in the most un-RESTful way, I switched all my guids from wordpress "?id=27" to named paths, didn't provide any link translations, deleted a bunch of old posts i didn't like. If planet python picks up that they aren't hitting my RSS feed then I'll know they care :).
thats a login for [disqus](http://www.disqus.com) so you can post comments and/or spam.
why don't you export the disqus comments on a nightly basis ? they don't seem to be unreasonable about your data. also about WP, sure they fix the bugs but is your blog your full time job and you're checking WP releases every day and upgrading every few weeks? Then you lose whatever plugins haven't upgraded ? I have enough production sites to worry about without a silly blog becoming a daily maintenance task.
As mentioned in the article it has both. Reference counting is the primary mechanism but it has a garbage collector for collecting cycles.
Django is not supported on Python 3 - you need to use python 2.x
Yep, using python 2.7 for actually running django. I suppose I might have to recompile mod_wsgi to use 2.7 as well...
Pulled this out of my company's internal python toolkit. I've found it very helpful for managing weakrefs... you can just do "foo = weakref_property('_foo')" in your class definition, and then read/write "self.foo" like it was a strong reference. from weakref import ref as make_weakref class weakref_property(object): """descriptor which provides transparent access to stored object via weakref. This property stores a weak reference to any value passed to it, using another (hidden) attribute, thus the attribute acts like a proxy for whatever is referenced. ``None`` is returned if no reference is present, and if ``None`` is stored, any weak references will be purged. :param attr: This allows specifying the attribute that will be used to store the weak reference. By default, a random one based on the property's id will be chosen. """ attr = None #: the attribute we'll store the weakref in def __init__(self, attr=None): if attr is None: self.attr = "_weakref_property__%d" % (id(self),) else: self.attr = attr def __get__(self, instance, owner): if instance is None: return self else: ref = getattr(instance, self.attr, None) if ref: return ref() else: return None def __set__(self, instance, value): if value is None: setattr(instance, self.attr, None) else: setattr(instance, self.attr, make_weakref(value)) def __delete__(self, instance): delattr(instance, self.attr) 
Doesn't it? 'Reference counting' is a full garbage collector, right?
The answer is **if variable not in x**. variable(y) is not a variable but a result from a call. Am I missing something?
I agree, but my point was really that the strength of the language lies in clarity and conciseness. To a person who is a "beginner" the thing to focus on, IMHO, is writing clean code. I teach. Students often have the idea (which may have come from other people, say, their Java teachers) that they need to be all the time focused on efficient code. But it seems to me that Martelli has it right in _Python in a Nutshell_ when he says something like, "Don't do these couple of stupid things but other than that just write good code." 
Might want to add some locations to the path too, here is mine which is located at /srv/www/ running an app in /srv/www/minetrade/ But it could also be the python3 vs 2.x thing. 1 import os 2 import sys 3 4 os.environ['DJANGO_SETTINGS_MODULE'] = 'minetrade.settings' 5 6 sys.path.append('/srv/www/minetrade') 7 sys.path.append('/srv/www') 8 9 10 import django.core.handlers.wsgi 11 application = django.core.handlers.wsgi.WSGIHandler()
I've never used birtviewer but another java reporting engine that is pretty good is http://www.pentaho.com/... It might solve your issues.
Reference counting is not generally considered garbage collection. By full garbage collection I mean something more like mark and sweep. I'm also not saying CPython shouldn't use reference counting either. :-) Reference counting, though less flexible, is much more deterministic and reliable than garbage collection; for example, I *really* like taking advantage of Perl's reference counting when it comes to file handles. 
Right, like I said, I hope that delay isn't linear with the size of the data. If it is just from loading up the widget and not the data then that is excellent. I'm glad my explanation of what I meant was downvoted. Thanks jerks. Explaining things that seem like problems is pretty important if you want to establish a user base. We can't all just circle jerk all day.
Would this work for the minimalistic style you want? http://lab.arc90.com/experiments/readability/
I don't quite follow this. I'm guessing len of a string returns the number of bytes the string is, not the number of unicode characters. Is there a way to determine the number of unicode characters a string is?
No, it's pretty independent of the size of the data, as the underlying wx.Grid uses a virtual table design that only copies/writes the data being displayed, not the entire data set. And btw, we welcome criticism and suggestions; whoever downvoted you is not part of the Dabo project.
It doesn't return the number of bytes, which would be totally confusing, but the number of Unicode code points in the string, which need not be the same as the number of characters in the string. It goes like this: originally Unicode was conceived as a character set stretching from U+0000 to U+FFFF, all representable in two bytes per character, which is what UCS-2 (the straight 16-bit encoding of Unicode) does. Later it was found that this was not enough, and so the original range (up to U+FFFF) was named the Basic Multilingual Plane, and everything beyond (up to U+10FFFF) is officially called the Supplementary Planes (although everyone really calls them the Astral Planes). The UTF-16 encoding that is the usual 16-bit encoding used today was developed from UCS-2 to support this. In order to squeeze more than 65536 characters into a two-byte encoding there is a trick. Two blocks in the BMP, called the surrogate blocks, are set aside for this. Basically, to encode a non-BMP character you use two code points from the surrogate blocks to encode a single character. So UTF-16 (like UTF-8) is a variable-length encoding. Now, what's going on is that len() returns the number of Unicode code points (16-bit values, if you like) in the string. If the i in chr(i) is higher than 0xFFFF then obviously two UTF-16 code points have to be returned, in order to represent the non-BMP character. (It's possible to build a so-called "wide" Python build, which uses UTF-32/UCS-4 to encode text, where this is not an issue.) You may consider this ugly, and it's certainly trivial to modify len() so that it counts the correct number of characters, but it does require traversing the string to see how many surrogate code points are in it (or storing the string length in a separate field from the sequence length). Unfortunately, it gets worse. Most people are used to thinking of, say, "é" as a single character, but in Unicode there are two ways of representing it it. Either as a single character (ISO 8859-1 legacy) or as "e" followed by "combining ´ above". If you do the latter, how many characters are there in the string? (Note that for extra fun you can stack several combining characters into a base character.) Sadly, truly multilingual text processing is a very difficult thing.
If the “string” is an instance of `str` (or `bytes` in 3k), `len(s)` will return the number of bytes. If the “string” is an instance of `unicode`, then `len(s)` will return the number of unicode characters: &gt;&gt;&gt; u = u"ಠ_ಠ" &gt;&gt;&gt; u u'\u0ca0_\u0ca0' &gt;&gt;&gt; len(u) 3 &gt;&gt;&gt; s = u.encode("utf-8") &gt;&gt;&gt; s '\xe0\xb2\xa0_\xe0\xb2\xa0' &gt;&gt;&gt; len(s) 7 **EDIT**: It appears that I'm wrong — see @ascii's reply.
&gt; This is why I'm publishing guiskel, a collection of GUI layer skeletons. It's a simple cross-toolkit application that does "Hello [name]!". To create a new application, all you have to do is to copy the project and remove toolkit layers you don't want. Awesome! Saved!
Could you check apache's error.log if there's anything resembling a traceback?
Looks like you need to do sys.path.append('/home/ubiqutinatedkarma/django/mysite') followed by os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings' or similar (I can't tell what your exact directory structure is - e.g. whether that final 'mysite' on the path is necessary or not.)
In that case, maybe you want to create an instance of your class somewhere in the program and then use the instance throughout the rest of the program.
Or use it to write the world's shortest "Is the string 'a' a palindrome?" test: a==a[::-1] Why bother? Maybe to pass an MIT programming course exam.
Have you looked into other Python reporting tools? There's a list here that could be helpful: http://pythonsource.com/open-source/charting-and-reporting
Confirmed that it's an issue with `import os`, as error_log shows: ImportError: No module named os However, from the interactive prompt: Python 3.1.2 (r312:79147, Oct 4 2010, 12:35:40) [GCC 4.5.1] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import os &gt;&gt;&gt; os.name 'posix' ok, /headdesk... it seems it was a conflict between mod_python and mod_wsgi. Once I commented out mod_python in httpd.conf it worked properly. Thanks so much for your replies so far. I understand that most of the time it's some simple issue that the dolt posting just hasn't sorted out for themselves (presumably the reason this thread is currently at -1). It means a lot to me that you're lending a hand!
It's our own dShell class, which is based on PyShell. 
This one little portion of Dabo is, yes. But Dabo is a complete desktop application framework, not just a grid.
When we started Dabo, SQLAlchemy didn't exist, so we made our own. That said, we plan on switching to SQLAlchemy at some point, but there have always been more pressing issues and limited dev resources.
http://codepad.org/rSChgKL6 Trying to understand why I have to hit "enter" twice to start, and why it doesn't keep looping.
wat!
[html2text](http://www.aaronsw.com/2002/html2text/) Converts HTML to markdown
&gt; Basically, to encode a non-BMP character you use two code points from the surrogate blocks to encode a single character. So UTF-16 (like UTF-8) is a variable-length encoding. Not quite. To encode a non-BMP codepoint in UTF-16, you use two 16-bit integers. A character can be composed of multiple code points. A code point can be encoded in multiple integers. e︣ is a single character. It's represented with two codepoints. Those codepoints can be represented with various integers in UTF-8, UTF-16, or UTF-32. Python's len() doesn't count characters, or codepoints. It counts integers in whatever internal representation Python was compiled with. That's why it can return different counts for strings with identical codepoints.
Pretty much all the current Unicode implementations which use UTF-16 re-create the C mistake of `character = byte` as `character = utf16 codepoint`. The worst thing is what is reported here: in Java and C# `char` doesn't even handle things outside the BMP, you have to pass `strings` of surrogate pairs around. Argh.
Not true, and that's what's confusing. IF you compiled python in narrow mode, i.e. with 16 bit character size (ucs2), and IF you have a unicode string consisting of a singl character _outside_ of the BMP (one whose binary value is above \uFFFF) at then the length of that string is 2: len("\U001020ac") == 2 Note that most py3k versions use wide mode, and will return 1 in the above example. That is thoroughly confusing. Confusing enough that narrow mode is a bad idea, IMO.
Yup - by using UTF-16, we're basically getting all the bugs, corner cases and complexity of UTF-8 and most of the increased memory usage of UCS4. Like all compromises, UTF-16 manages to combine the worst aspects of two solutions. Edit: Correction from larsga, I meant UTF-16, not UCS2.
You mean UTF-16, I think, not UCS-2. UCS-2 is dead simple, but only supports the BMP.
&gt; Not quite. To encode a non-BMP codepoint in UTF-16, you use two 16- &gt; bit integers. A character can be composed of multiple code points. True, and I say as much at the end, but I felt it as better to separate the issues to keep this understandable. &gt; Python's len() doesn't count characters, or codepoints. It counts &gt; integers in whatever internal representation Python was compiled &gt; with. That's why it can return different counts for strings with &gt; identical codepoints. True. I should have made that clearer.
&gt; True, and I say as much at the end, but I felt it as better to separate the issues to keep this understandable. You said: &gt; Basically, to encode a non-BMP character you use two code points from the surrogate blocks to encode a single character. But there's no such thing as a "non-BMP character"; there are non-BMP *codepoints*, which UTF-16 represents with two 16-bit integers, but those integers are not codepoints. For example, U+0020, U+FF5E, and U+1D11E are all single codepoints. The Python string "\U0001d11e" contains one codepoint, regardless of what len() returns.
Thanks, you're right of course. I've edited my original post, so as to not further confuse an already highly confusing mess.
Right. I wasn't arguing against that point at all, but I must say that the examples with function callings are very good. 
&gt; But there's no such thing as a "non-BMP character" Well, strictly speaking there isn't. Unicode itself calls them "supplementary characters", but I used "non-BMP" because I thought that was easier to understand. &gt; there are non-BMP codepoints, which UTF-16 represents with two 16- &gt; bit integers, but those integers are not codepoints. Technically, it's true that the numbers aren't code points. Unicode calls them "code units", distinguishing them from points in the character space which have characters attached. Personally, I think that to split the hairs that fine in a discussion like this is more likely to confuse people than enlighten them. But when the Unicode spec (version 5.2.0, chapter 2, page 22) says: &gt; For supplementary characters, UTF-16 requires two 16-bit code units. I don't think they mean to imply that there's no such thing as "non-BMP (ie: supplementary) characters".
The same is true in JavaScript, always. It wears its UTF-16 implementation on the outside for everyone to see.
&gt; Well, strictly speaking there isn't. Unicode itself calls them "supplementary characters", but I used "non-BMP" because I thought that was easier to understand. I'm not objecting to "non-BMP", but to "character". There's no such thing as a Unicode character. Certain human viewers might consider certain codepoints to contain 0, 1, 2, 3, or whatever characters, but that's entirely dependent on the viewer. How many characters are in the single codepoints "ﬁ" and "ﬂ"? Is "Ǆ" one character or two? &gt; I don't think they mean to imply that there's no such thing as "non-BMP (ie: supplementary) characters". They're distinguishing between code points (part of Unicode) and code units (part of UTF). The code point U+1D11E is represented in UTF-16 with two code units, 0xD834 and 0xDD1E. Python strings don't store code points, they store code units. That's why a string with one codepoint, like "\U0001D11E" can have a different length on different platforms.
This is what Prolog does.
Larsga's last point, about combining characters, is very important. Before criticizing the choice of UCS-2 (_not_ UTF-16, it is UCS-2 if your surrogate pairs are counted as two separate characters) as your base encoding you should fully understand that UTF-32 _is not any better_. Also I'd like to mention that encoding specifications such as UTF-8 don't specify the strategy for dealing with combining characters and that sucks hard. As it is, currently you could have the following options for dealing with Unicode: 1. single-byte strings encoded in Latin-1 or single-byte strings that are actually UTF-8 but are manipulated as single-byte strings. First is not an option in this day and age, second is too buggy to be an option. 2. UCS-2, it takes 2x space for storing ASCII stuff but you would encounter non-ASCII stuff for sure. It breaks on the characters from outside the BMP, it breaks on non-normalizable combining characters (for which there's no "this letter with an emphasis mark" symbol; here and after by normalization I mean condensing normalization), as for normalizable, your encoder/decoder should take care of them, but otherwise just works. 3. UTF-32 - it still breaks on non-normalizable combining characters. But yeah, it doesn't break on domino dice characters, I'm writing it down here, huge success. At only 2x more space cost, with no benefits on usual workloads. 4. True, flawless, cheap Unicode strings that do not support indexing in any form. Concatenation, iteration, but not indexing. 5. True, flawless, huge-ass Unicode strings represented as trees of symbols and supporting indexing. So. For your basic stringing needs, UCS-2 is the best choice by far. But it should be complemented by one of the (4) or (5), or even both alternatives for when you really need the true flawless Unicode stringionizing. Stringulation. Sadly, I don't see any libraries catering to that in any modern language, including Python (on an unrelated note, why do I write it as 'Pythin' all the time?).
&gt; you should fully understand that UTF-32 is not any better. Yes it is: you don't get fucking lasagna surrogate pairs of hell. You still get that combining characters crap, but at least you get one less level of hell. &gt; UCS-2, it takes 2x space for storing ASCII stuff but you would encounter non-ASCII stuff for sure. Hey, here's an idea if you care so much for efficiency: use binaries, not strings. Oh, and Python supports utf-32 strings: it's a compilation flag away.
And even if you use the ucs4 flag, you still get the issue that unicode glyphs (the stuff that's displayed on your screen) can be composed of multiple combining characters.
&gt; but at least you get one less level of hell. The number of levels of hell doesn't matter if you are not going to deal with them. If you are not going to deal with them, then users complaining about their dangling Accent de gue would be more frequent than the users complaining about their splat domino piece. Using UTF-32 did not give you anything worth mentioning. If you are going to deal with them, then it doesn't matter at all what your default string type utilizes, if you use a completely different string type. &gt; Hey, here's an idea if you care so much for efficiency: use binaries, not strings. &gt; Oh, and Python supports utf-32 strings: it's a compilation flag away. Are you drunk? In my previous encounters with you you weren't giving a reason to suspect a lack of reading comprehension skills.
Completely understand, and thanks for reply.
Good idea, but my money is in GUI apps moving towards tkinter.ttk (themed Tk as introduced in Tk 8.5) since it ships with Python since 2.7 (IIRC) and 3.1, and at the same time it matches the features of Qt, WxWidgets, etc.
Have you seen ipython?
btw, if you're linking to a site that requires access to http resources, don't post the https link, coz it looks like shit until I hit the "allow unsecure content" override :) (specifically, the CSS file)
wxPython is very, very easy if you use wxFormBuilder.
But recognize what this means: you may write open-source software that links against the GPL version of Qt/PyQt, and distribute your software under, say, a BSD license. HOWEVER, and this is important: If someone uses your library and links to it, then their software either needs to also be released under one of the exception licenses, or under the GPL, or they need to purchase a commercial version of PyQt. (They can include/distribute the LGPL version of Qt with their software.)
Have a list of all connections and send to all of them in a loop. Remember Twisted doesn't automagically makes your code non-blocking, if something on your code blocks, you should use a thread to block only that thread and not the twisted event loop.
When I got into python gui stuff I just assumed wx was the way to go. Is it worth checking out TK? Any benefits?
Hey I was also thinking of making a program in python. I have experience with C and Android programming before. I have done some command line python programs and want to move to a bigger project. Which web platform would recommend? (i know reddit is made using pylons). I am new to web programming so please keep that in mind.
Django, simply because it's tutorials and resources are the best for initially getting into web devel. Its really the de facto standard of Python web frameworks. If you want something more minimalist try Flask ( http://flask.pocoo.org/ ) or Bottle ( http://bottle.paws.de ). Same ideas as Django but without the built in ORM and templating engine. If you're using one of these take a look at SQL Alchemy since its really great for database management and I sort of wish Django used it. For more complex UI on the clientside I really can't recommend jQuery + Backbone.js highly enough. Backbone.js + Django Piston makes making a REST API really trivial.
Thanks for that! Now if you could recommend some Django tutorials...(besides the official site of course). I have looked around, but I am the type of person who would rather use random tutorials than a book, so if you remember any please link. Thanks!
The official ones ( i.e. building a blog from scratch ) is pretty much the tutorial that everyone does. http://docs.djangoproject.com/en/1.2 , you'll find the official Django documentation is pretty much awesome. There are a variety of good video tutorials floating around, like http://net.tutsplus.com/articles/news/diving-into-django A lot of good django code exists in external packages, http://djangopackages.com is a really good place to find drop-in packages for your application. PM me, if you're looking for something more specific. EDIT: I also wish I had seen this tutorial when I first started ( http://andyet.net/blog/2010/oct/29/building-a-single-page-app-with-backbonejs-undersc ) with Django/JS.
&gt;Thanks jerks. No need to be rude, shrodikan was raising a valid query which you insisted on ignoring (namely, is the data fetched when the query is executed, or when you issue fetchall / fetchone on the cursor) as it turns out, judging from me doing a select * on a 200 meg table while watching memory usage, the answer is "when the query is executed", so network performance did **not** affect the second command.
You'd think so, but I just did a test, and python's memory usage went up when I executed a query that returned a large (4 million row) dataset. Actually issuing the fetchall() command didn't affect it at all, suggesting all that function does is make another reference to the cursor's tuple-of-tuples that represents the result.
&gt;I set autocommit to TRUE and this allowed me to send queries successfully. that's entirely wierd. what happens if you turn autocommit off and do cursor.commit() just after creating it?
why is linking to a python module asking me for a google username and password?
I wish I had a problem complex enough to use these new GPU and parallel computing wrappers and libraries. :( http://gpgpu.org/2010/03/09/clyther-python-opencl http://gitorious.org/python-opencl http://pypi.python.org/pypi/pyopencl/0.90
Upvote for explaining what Theano is in the title. Seriously, so many posts are of the form "Grobbledygook 7.2.5 release", and link to release notes that *also* don't explain what Grobbledygook does.
yes, but it's something different: ipython does a lot of things, but it its TAB-completion output if monochromatic (did you look at the screenshot on the page?). I also think it's not easy to change that because it uses readline to do completions, which does not support ANSI escape sequences.
What kind of disk are you using that the CPU is your bottleneck?
How does this differ from other libraries like [Copperhead](http://code.google.com/p/copperhead/)?
My favorite, [py-cuda](http://pypi.python.org/pypi/pycuda).
I tried birt / birtviewer but it proved real hard work (and buggy). In the end, I moved to python+django+ReportLab. People have complained the ReportLab API isn't too pythonic, but its a very mature and stable library which makes PDF-generation relatively painless. Couple this with a decent ORM/web-framework and you've got a reporting system which is far more flexible and easier to work with than BIRT. 
It started as a Google summer of code project by Guilherme Polo ( http://code.google.com/p/python-ttk/ ) and then it was adopted in the main Python distribution (not completely sure when, but I think it's 2.7 and 3.1, or maybe 2.7 and 3.0). Well, the obvious one would be distribution/deployment (at least eventually). Tk itself is maintained by ActiveState, and the wrappers ship with Python already. Plus, you can use the package listed above if you use 2.5 or 2.6. I haven't done anything complicated using this yet, but that's because I didn't need anything too fancy lately. Citations: http://docs.python.org/whatsnew/2.7.html#ttk-themed-widgets-for-tk http://docs.python.org/library/tk.html http://docs.python.org/library/tix.html#module-Tix http://docs.python.org/library/ttk.html#module-ttk some usage examples: http://code.google.com/p/python-ttk/wiki/ttkWizard 
Adoh I misread your post somehow (inserted an extra negative maybe). You and I said the same thing pretty much (except you pointed out that the same kind of thing applies when you just mention x by name and x.\_\_nonzero\_\_ is non-trivial)
Linux and Emacs. Anything else just makes me sad. And then angry. And then sad again when I realize how easily I fall victim to the nerd rage. 
uh huh, which I said: &gt;He executes the query to load the cursor Which is also pretty obvious from the video, as the step before the table render also has an associated delay.
Mac OS and Emacs.
Mac OS and vim.
Not really mind, but I am coding with MacVim + Mac OS X.
&gt; There's no such thing as a Unicode character. Then why does the Unicode standard keep using the phrase "Unicode character" over and over? &gt; Certain human viewers might consider certain codepoints to contain &gt; 0, 1, 2, 3, or whatever characters, but that's entirely dependent on &gt; the viewer. I agree. The spec, however, still refers to encoded characters as "Unicode characters" and "character codes". &gt; How many characters are in the single codepoints "ﬁ" and "ﬂ"? Is &gt; "Ǆ" one character or two? Congratulations. You're now back to the same rhetorical question I asked in my original comment.
Windows and Eclipse. The fonts don't make my eyes hurt.
vim + ipython
OS X and PyCharm. Best IDE I've ever used bar none.
Windows and Emacs (with Yasnippet) as an editor, IEP as IDE, ipython (pylab) for scientific computing in Python.
Linux + Eclipse (PyDev + PyLint) + Vim + IPython
Linux in a VM and Vim
Windows on Eclipse with PyDev. If I am forced on a linux box then I'll use vim
Vim (macvim) + MacOS, ocasionally Linux via Parallels
I think woven could be a very good experience for you https://github.com/bretth/woven
Windows and Eclipse+pydev
Fonts look better in Eclipse? You can use a different fonts in Emacs or gVim on Windows. _vimrc: set guifont=Consolas:h11:cDEFAULT init.el: (set-face-attribute 'default nil :font "Consolas-11") and now fonts look great.
I thought it was till you made this comment.
Linux and Geany.
Mac OS + Komodo 
And this is exactly the point. All this talk about combining characters is thoroughly irrelevant to the problem the poster talks about.
gedit on fc13 On another note, is it worth to learn Eclipse?
I'm just using some crap 7200 RPM "green" drive -- disk is certainly the bottleneck. Brandon Craig Rhodes explains it better than I would: &gt; The issue is how to keep the disk as busy as possible as its head trundles slowly back and forth across the platter. With several copy operations going at once, the disk drivers in the operating system get the chance to order the next several thousand disk block accesses, sort them by position on the disk, and then move the disk head across the platter once while hitting all of those sectors.
I do most of my development on Windows but I also have a Mac. I use a mix of Komodo and Vim on both of OSes when it comes to pure Python, plus Visual Studio for C and C++ on Windows. I would say the Mac is the more enjoyable of the two in terms of the total package, but that doesn't help when I'm developing Windows-specific things :/
Consolas - best font
Anyone still using SPE?
gvim with pyflakes-pep8, ropevim, vim-pep8, vim-cute-python on GNU/Linux
very nice, thank you for posting this. I wouldn;t have seen it otherwise.
&gt; On Windows, readline is not available at all not true. i remember getting a compiled version a while ago. but that was the command prompt time. now we all use powershell.
os x + macvim.
I have a mild preference for Linux, usually Debian, for Python development, but I don't mind working on Windows (XP). As for an IDE, I use one I authored for Windows that is not specifically for Python, but adequately supports the language. I run it under WINE on Linux.
I agree with what you said about birt, ReportLab will definitely one of my options, I am also looking in to sphinx, most popular python library docs are written in sphinx and it look really nice, but aside from pdf generation, excel spreadsheet is also important for us, are there any straight forward way of generating html tables to excel spreadsheet.
Windows + Komodo
Linux + Komodo
Both for many reasons.... Although for sure Vista really really really pisses me off with its constant churning and inability to deal with many small files... :( sad bunny.... Maybe have to force myself to buy Windows 7 Urrrrrrrghghhghgh Primarily: Linux - Ubuntu / Eclipse PyDev / Intelli J Idea / GEdit &lt;br/&gt; Can never escape the beast: Windows - Eclipse PyDev / pspad :P / Take Command
&gt; The code seems to have been architected by someone who wanted to make everything OO (even when it lead to code that is a lot harder to change than it should be) and use Python's introspection in ways that make the code harder to understand, not easier. That someone was me and it was architectured to be pluggable, not necessarily object oriented. In fact I was criticized for using events instead of classes very early on. Also, where does it use introspection? Plugins are loaded explicitly, so the closest would be reflection. However Zine was an earlier project of mine and I think it inherited a lot of flaws from Wordpress where I started my journey with blogging. I recently (a few days ago) switched [my blog](http://lucumr.pocoo.org/) to being generated from .rst files statically.
Switch to an UCS4 build if you work beyond the basic plane.
Consolas 4lyfe
From the libraries I use everyday simplejson's [speedups](http://code.google.com/p/simplejson/source/browse/trunk/simplejson/_speedups.c) might be the best reference to increasing performance. It's a really well designed library and the code itself is quite clean. Also, most of the libraries in stdlib have speedups, so I think it's worth [checking them out](http://svn.python.org/view/python/trunk/Modules/). 
that looks very cool, i'm gonna give it a test drive :)
But I can't even read the comments. Oh right, javascript for everything now. I give up.
phat article..
Mac OS X and Komodo
I thought I was the only one to use Consolas.. I have been redeemed!! 
Linux
Mac + Coda developing on a Linux VM 
OSX, tailored mvim, pycharm. Git.
This is excellent. I had forgotten about Randall's involvement!
&gt; Using the hot algorithm for comments isn't that smart since it seems to be heavily biased toward comments posted early. I think that statement is false? It would seem to me that using the hot algorithm would introduce a bias toward *later* comments, since the hot algorithm gives additional weight to recency.
**Work:** * Windows XP sp3 * Vim/gVim **Home:** * Arch linux * Vim
I've got Consolas in Putty, in gVim, in pretty much everything that will take it :)
PyDev works on linux.
VIM &gt; Emacs! Couldn't not troll. 
linux, vim, git
No slashed/dotted zero :(
the point is, there could still be a delay from it executing the query without that also being the point where the result set is transferred. However, this is all academic, since that *is* when the result set is transferred, in MySQLdb anyway (though the very fact that PEP249 specifies fetchone and fetchall implies this may not be the case for other implementations)
&gt; Also, where does it use introspection? The way the permissions were set up took me longer to understand than it should have. &gt; That someone was me and it was architectured to be pluggable, not necessarily object oriented. All the classes seemed to have been very tightly coupled. For example, I was trying to add a new way of authenticating -- basically on login check if the username/password exists in an external database and if it does, then create a new zine user with that info and log the person in. Took way too long to figure out how to do it. Had I written it myself, I would probably have had a function like check_login(username, password) but Zine's code tries to do a lot of things automagically on all levels. Which means that if you want to change something fundamental, you're fucked. The code seemed a lot like it had been written by someone showing off ;) If that sounded a bit harsh, then I'm sorry. I didn't mean to. Zine has very clean code for what it is, but the architecture annoys me.
I'd use [os.walk()](http://docs.python.org/library/os.html) to build a tree of all of the files under your local root. I'd say you store each folder as a python dictionary so that you can add in relevant information (timestamps) later. As you pull the files in [note their modified date](http://stackoverflow.com/questions/237079/how-to-get-file-creation-modification-date-times-in-python). From there you can do a series of gdatacopier gls calls to see which files are mismatched between the local host and then copy as needed. Cases where GDocs has a folder that you don't have locally will need special attention. Date thresholds can be measured with [timedelta](http://docs.python.org/library/datetime.html#timedelta-objects). 
Google's [command line tools](http://code.google.com/p/googlecl/) already provide [a nice way](http://code.google.com/p/googlecl/wiki/Manual#Docs) to do this, if it's enough for your needs you could just wrap around these. Not familiar with gdatacopier, but unless there's a specific reason you're using it instead, I'd recommend using googles own. If it's not enough, then you'll just have to use the docs [api](http://code.google.com/apis/documents/).
geddit in ubuntu or nano if I don't have GUI Eclipse is also very very good, but very very bloated IMO. Better than geddit if you're trying to track a large application.
If you know your command lines (svn, grep, locate, ack-grep maybe) I would say no.
Linux
Is there any benefit of using Eclipse/komodo IDE's over simple text editors like notepad++ for small programs?
Hah. The terminology is confusing. Reference counting is a perfectly valid technique for garbage collection but it is not a garbage collector. Python *does* have a garbage collector, it is only used for cycles. (See the gc module.)
Thanks I think I got it now, was making it too hard on myself x)
Depends on the application. Vim does not have org-mode, rst-mode with table-insert (automatic expansion of the cells to content) etc. Subscript and superscript in tex files (AUCTeX) are much more readable. Vim also does not have [imaxima](http://sites.google.com/site/imaximaimath/), [ESS](http://ess.r-project.org/) etc. If I'm wrong, let me know.
I wish I knew how to use emacs. I've been using vim since 1995 and am just way too productive in it to switch. Even if emacs is better, I'm not sure it's worth the learning curve at this point. However, if you're primarily writing code and you're not using either vim or emacs, it's very much worth the effort to learn one of them.
Emacs with a black background and beige text. And ipython.
Work: windows with vim/pycharm Home: Linux or OS X with vim/pycharm Looking at getting linux at work too so my only interaction with windows is via vm for testing only.
Thanks, the effect is pretty obvious when put that way, but I would've never suspect that it exists, would assume the opposite actually, that too much simultaneous operations cause unnecessary seeks (which is true as well, of course, but I would've said that two is already "too much"). By the way, do I understand correctly that the results would be exactly the same on a single-core machine?
Arch Linux + vim + bpython
Emacs is pretty cool and the ultimate Swiss Army knife. But I never got comfortable with the macros. In any case, I don't really care, just couldn't resist starting trouble. Edit: Specifically, too much use of the pinky.
Oh, and another question: what speedup you get if you use only 2 processes? 
Like Tango theme or themes [based on the Tango color pallete](http://jblevins.org/projects/emacs-color-themes/).
Never seen vim-cute-python before. Very interesting! Do you use it purely to make your code more compact? I assume you still type "in", "and", "or", "not", etc etc?
openSuse + Eclipse + PyDev
shift click, TODOs, Bookmarks, auto import, code formatting, code completion, plugins... I used to do small editing in notepad++, now I always use Eclipse.
The One True Font.
Thanks for this. I'm working on a project that will be implementing this type of sorting for news so the code examples are very useful.
It looks like Copperhead's aim is to take fairly general Python functions, introspect on them somehow (perhaps using the `ast` module) and attempt to make them suitable for data-parallel execution on the GPU. Theano's aim is more constrained to efficiently evaluating mathematical expressions that operate on scalars, vectors, matrices and more general N-dimensional tensors. We provide an API for defining such expressions in terms of 'symbolic' placeholders that very closely mimics NumPy's API for operating on arrays, and once the expression is represented in this fashion, we can do various optimizations on the graph to make things more efficient or numerically stable, and finally generate fast code for evaluating the expression. Theano can generate code either in C for execution on the CPU *or* custom CUDA kernels for execution on an Nvidia GPU. Once compiled, Theano spits back a Python callable that can take NumPy arrays as input. Also, because of the way the expression is represented, taking the derivative of the expression with respect to any of the inputs is straightforward, so Theano can give you the gradient of your function for free, without having to sit down with a pen and paper and churn through the calculus yourself. The use case for Theano is mainly in scientific and engineering domains where a certain mathematical function (and possibly its gradient) have to be evaluated many many times (such as when numerically optimizing an objective function), and this evaluation if done naively can become a significant bottleneck. Thus it's often worth the initial overhead of compiling that function with Theano because of all the time saved evaluating it later.
Using Python on Windows always feels so dirty. Thankfully, I have Linux at home.
I couldn't agree more, which is why I was pretty careful with this submission. :)
PyCUDA is great (we are exploring using it in future versions of Theano) though it really does necessitate knowing a fair bit about GPU programming in order to get anything done. One of the aims of Theano's GPU capabilities is to make use of the GPU as simple and transparent as possible, letting our optimization routines take care of as many of the details as it can, letting you focus on your domain problem.
Linux. As for editors, I'm usually torn, I generally hate VIM and Emacs equally for keyboard gymnastics... though if I'm in a pinch, I'll use VIM with configs heavily stolen from the Cream project... Honestly, I usually wind up using Kate most of the time, fullscreen, and call it good (I'm the type of developer that likes his tools to *get the fuck out of his way and let him work*... VIM and Emacs typically don't do that without severe configuration on my part... And don't give me that "you just need to get used to it" bullshit, I've worked with Unix longer than most of you have been alive, it's not a matter of just "getting used to it"... it's a matter of "drinking koolaid that I'd rather not drink".) If I'm *forced* to work in Windows then, blarg... I guess Notepad++... I generally want to stab small children repeatedly with whomever is currently forcing me to work in Windows at the moment whenever I'm in Windows... As for Macs, well, I didn't like them in the 80s, I didn't like them in the 90s, and they certainly haven't done anything to ingratiate themselves to me lately... So I tend to avoid them like the plague. I don't *care* how much BSD is inside them... Though, if I *was* working on a Mac, I'd very likely shell out the cash for TextMate because what little I've seen of it makes me want it on Linux, which should be pretty telling in and of itself... *Edit*: Oh, I guess I should say that for me the *most* important thing tends to be dark syntax highlighting and readable fonts. If I can't get zenburn or something similar (I'm currently a big fan of rdark on kate) then I'm pretty damned miserable... Beyond that, as long as I don't have to jump through a lot of hoops to use whatever editor du jour, then I can be happy...
linux, emacs(for python), eclipse(for java). mostly terminal
I have been using OSX and Eclipse for a bit, but I recently started a tutorial about XCode and Python/PyObjc anybody have any insight into this set up?
After a few quick runs I'm seeing 2 processes being 1.2x faster than 1 process. The numbers can be pretty weird just running with a bunch of other stuff open, especially when moving to 4+ processes. I'll see if I can spend some time running this as the only thing on the box.
I don't have a single-core machine available, but I imagine a similar result would happen.
For developing Windows-specific, there really is nothing better than Visual Studio. Honestly, it's such a nice tool and platform that I can understand why developers would never want to switch to anything else. Edit: not for python, mind you, just in general. Though ironpython ain't bad ;)
Komodo for me as well... Great package.
VMS + LSE? I mean, I have OpenVMS at both home &amp; work, as well as OpenBSD &amp; Linux at home, and Solaris &amp; Linux at work. I generally use vim on Unices. 
Mac OS + Aquamacs (using Tramp, servers run Ubuntu server)
&gt;Great package. Reminder: We're not on gonewild.
Windows + Komodo or Mac + Komodo
This makes sense if the disk is mounted async, but in the case that it's mounted sync or softupdate style (where the data is async but the FS tables are sync; the default in most FSs) the I/O scheduler has less leeway in ordering events
I use Consolas, but I use Eclipse not for the font rendering. I use Windows for the font rendering. I use Eclipse for the great programming environment. Tell me, how do you do in vim: cross file context-sensitive refactoring (not just an in-file find and replace), mouse-hover javadoc popups, hi-lighted scrollbar occurrences of the current variable/method? I've used vim, and its neat for small programs, but doesn't cut it for large software in terms of productivity. Sure I can do cool regex replaces etc, but I need that almost 0% of the time, compared to the stuff I use all the time in Eclipse that vim doesn't have.
Thanks for the detailed explanation. I'm interested because I did a little work involving the Brent root finding method in scipy, obviously using numpy's stuff as a basis. I used cython to compile to C, which worked wonderfully, and am looking for a similar 'simple' way of getting it to run parallel on a CUDA card. The root finding is just inside a big loop, so it should be pretty trivial to parallelize. 
Great library
Is this from project euler?
Matches thed features of Qt? Are you sure about that? LOC compaison of Qt vs Tk toolkits might be enlightening.
 def score(ups, downs): return ups - downs And later: s = score(ups, downs) I don't understand the logic behind this. Why define a function that subtracts two variables instead of simply subtracting them?
Can't the second equation be changed to: a = math.e ** ( math.log(N+1) / x )
&gt; I've used vim, and its neat for small programs, but doesn't cut it for large software in terms of productivity. I agree with you. BTW, I do not know how to with vim but in Emacs you can use [ropemacs](http://rope.sourceforge.net/ropemacs.html) for performing python refactorings, display docs etc. Check out also yasnippet [demo](http://www.youtube.com/watch?v=76Ygeg9miao) from 2:00. 
Mac OS X with MacVim.
Nope. a^x = N*n + 1 for any value of n.
In case they later decide that they want to change the weightings. It's a typical abstraction, even if it is a bit simple.
Hmm. The big deal when using a GPU is to avoid copies back to the host. If you have to do a lot of logic in Python/NumPy between GPU steps then you lose big. I don't recall the details of Brent's method but it's worth giving Theano a try, especially if you have a card already.
By far linux. With good, simple IDEs, windows is ignorable nowadays as long as it doesn't involve systems programming which is unbearable under windows.
&gt;I've worked with Unix longer than most of you have been alive Likewise and I absolutely agree with you. I suspect that I should make the effort to learn vi after all these years but on the other hand... well, no, I should definitely make the effort to learn it. &gt;Oh, I guess I should say that for me the most important thing tends to be dark syntax highlighting and readable fonts. If I can't get zenburn or something similar (I'm currently a big fan of rdark on kate) then I'm pretty damned miserable... I feel exactly the same way. If I can't get that, I basically cannot code. Coding in the default screen environment of Visual Studio is the worst thing ever-- bright screen plus clutter times 11.
You should probably check out [Shor's algorithm](http://en.wikipedia.org/wiki/Shor%27s_algorithm) - which doesn't run on a classical computer, but which could run on a quantum computer. Generally a is chosen at random and x is found rather than the other way around there though. Out of interest, what do you want this for? Is it for factoring N?
Yes, this will work. But I suspect (OP, correct me if I'm wrong) that they only want integer solutions, and are more interested in a^x = kN + 1 to get around that.
Windows 7 is WAY better. If you paid money for Vista, just pirate Windows7. They ripped you off with a crap product which they did not support, so why the hell not?
*hint - it's 1.
I was using consolas until i switched to Anonymous Pro, you can find it for free with a google search.
I'm using Anonymous Pro and it has a slashed zero. It's available free online.
&gt; the game :(
&gt; well, no, I should definitely make the effort to learn it Oh I've learned it... that doesn't mean I have to *like* it... I'll still bitch and moan about the keyboard gymnastics and more often than not just fucking switch to GNU Nano which gets out of my way (and now actually has speedy syntax highlighting). I honestly am kind of a minimalist with regard to editors... I *really* do like editors that do their job and get **out** of my way. VIM/Emacs do **not** do that.. &gt; I feel exactly the same way. If I can't get that, I basically cannot code. Coding in the default screen environment of Visual Studio is the worst thing ever-- bright screen plus clutter times 11. Holy crap... and working in VS is like coding through a keyhole! You have all these dialogs all around your code which occupies a tiny little hole in the middle of your screen. Writing any sizable project in VS (and, regrettably, I've built my fair share of big VS projects) is what I imagine it's like to build a miniature ship in a bottle... 
I actually like BlitzMax. This is largely because of the great minimalism of its editor.
Donated for what? And who's jokri?
Offtopic küll ilmselgelt, aga kas sa näpid Djangot ka? :)
Hmmm, I'd never heard of BlitzMax before, it looks interesting... Pity it's not cheaper and/or Open-Source.... I've been pining for an easy LOGO/Basic-like educational language that is graphic-heavy and geared toward being exciting and accessible to kids the way that languages like Basic/PILOT/LOGO were to people my age and one generation younger... I keep toying with the idea of writing some sort of wrapper module around Python/Pygame to do something *like* this, but I get busy and never do... I just think it sort of sucks that computers these days *do* so much for you and require so little, because the end result is that it doesn't enthuse and train kids these days in the technology the way previous harder-to-use technology did my generation... If someone could make it feel like a game (in the same way hacking on the old 6052-based systems of my youth felt like a game to me) then I think we could get more kids these days into technology for the right reasons.
I used vim for quite some time and then switched to emacs (I just kept wanting more from vim and eventually decided that the emacs kitchen sink was closer to what I wanted). Using viper mode and vimpulse I was able to make emacs behave roughly like vim. I was able to learn the little differences along the way fairly easily and never really took much of a hit to my productivity (besides the weekend or two that it took to get a decent setup together).
Linux and emacs (made to act like vim but with everything emacs has to offer) by far is my favourite.
Linux, Emacs, Python
Indeed, he seems to be talking about `top` not `hot`.
Yep. Võtsin just paar nädalat tagasi kätte. Väga meeldib! :)
&gt; Then why does the Unicode standard keep using the phrase "Unicode character" over and over? Because the Unicode standard was written by different people over a period of years, and not all of them bothered to consider how much confusion poorly chosen words could cause. &gt; I agree. The spec, however, still refers to encoded characters as "Unicode characters" and "character codes". Just because the spec is incorrect is no reason to encourage incorrect words in other contexts. &gt; Congratulations. You're now back to the same rhetorical question I asked in my original comment. Not quite; you were using "codepoint" to mean a 16-bit word in UTF-16. And your solution to counting characters doesn't work when considering multi-character codepoints.
Blitz is no joke, there are a huge number of commercial games written in it, mostly shovelware and small indy titles, but for those applications I think it's second to none. I also think it's no accident that Windows no longer ships with basic.
Python Software Foundation http://www.python.org/psf/donations/
Python GUIs are for wimps. Use a web framework. Turn your browser into the GUI. It is easier, more portable, keep the data centralized, keep the users always up to date. And you can sell/provide the service, instead of just the app. Edit: I am not a native english speaker and I used the term wimps according to the definition "timid or unadventurous person", not in any offensive sense.
Can you name a serious python app that relies on file locking?
**Best cross browser python framework?** web2py, Django, mod_python, etc... What is the best framework for IE, Firefox, and Opera that you can run without modifying?
Well he did say for any a and N, in which case, he can't restrict the result to only integers.
Home: Linux/vim Work: Linux/vim/WingIDE
mod_python is not framework and officially deprecated. I would suggest a full stack framework (one that includes everything you need) as opposed as glued framework (made by assembling third party libraries that do not always work well together) or a micro-framework (minimalist approach). The most common ones are web2py and Django. I am the lead developer of web2py so I am biased. I have though Django in a university course and I have developed web sites for the United Nations in Django before developing web2py. web2py was developed to be a no-brainer to setup (no configuration files), to install (there is no installation, unzip and run), run everywhere out of the box (has no dependencies, on windows comes with python included), and use (it is the only one that comes with a web based IDE to create, modify, debug, test, manage apps and databases). We tested it on all the browsers you mentioned including IE6. web2py is the only framework that lets you deploy apps on the google app engine, without modifications. We have a very active and friendly mailing list with ~2300 members growing exponentially. [Here are some sites made with web2py](http://web2py.com/poweredby). 
What if it's a desktop app specifically that you want? Not everything can be converted to a web service.
Let me put it in another way. Any multithreaded app or multiprocess app that opens a file for writing should use file locking or it is buggy. I define a serious app as one that relies on multiple processes and threads.
The ranking algorithm takes into account both age and amount of donation, so it could just be that someone donated a large sum very recently. It'd push a bigger donation out of the top spot if it was recent enough. It's like Reddit's hot list: it's not the all-time best stories, it's the best stories that happened recently.
Again, name one. If your software design relies on file locking, it's broken. Put a mutex around file accesses. EDIT: Why are multiple threads opening the same file for writing?
After evaluating many of the python GUI options, I went with PyQt as my platform of choice. If you have some requirements beyond cross platform, I can be more specific about my choice.
Web frameworks are getting better, but no matter which you use, you will still be writing your GUI in JavaScript, not Python. You can try [Pyjamas](http://pyjs.org/) to convert your Python to JavaScript. From what I've seen of it so far, though, I think I'd still stick with a good JavaScript library like jQuery if I had to do web work. That said, I still prefer a good desktop app, if only for responsiveness and offline access.
I've used wxPython and had no issues. It's very easy to build with wxFormBuilder, generate an .xrc file, and load it up.
It kind of can... *thinks about it for a moment* ...well, pretty much everything that has a GUI
A web app does not need to be a web service. A web app can run on localhost and be accessible only to the current user. A GUI has a very similar similar structure to a web app because both need to handle concurrency (the gui events and the computation). The differences are that 1) GUI uses a limited set of proprietary controls vs a web app which uses the browser controls which can be extended using multiple JS libraries. 2) GUI's use system sockets why web apps use Internet sockets, which means the latter allows you (if you so choose) to run the computation and the presentation on separate machines; 3) web apps handle concurrency better and therefore multiple users... you see lots of GUI apps that freeze because of poor concurrency (this is not a limitation of the GUI but a complexity of the underlying programming model). When you develop a web app you typically use a framework. Most frameworks today build interfaces from you from data, handle all concurrency, come with database and database abstraction layer. They all use html+css for the presentation which allow you to style your pages much better than a GUI ever could. The only reason to use a GUI is if you need to do intensive graphics or high performance real time visualization. And even in this area web apps are making big progress.
The responsiveness is not an issue if the web app runs locally as a desktop app. Even if you use JS+HTML+CSS, still most of the app logic can be done in Python. You just handle the data presentation in your browser and JS+HTML+CSS give you more flexibility and expressiveness that any GUI can.
PyQt is my preference. It has a very clean API and is picking up features via Qt much more quickly than any of the others. For those concerned about the GPL, [PySide](http://www.pyside.org/) is coming of age as an LGPL alternative. I've used PyGTK extensively as well, which, in my opinion, is filled with holes. TkInter has the significant advantage of being included with Python. All three will work on the major platforms (as does wxPython) and any platform specific features are usually well documented as such. Just as with editors though, you'll find people all over the place for their preference, so in the end you'll just have to try them.
Mutex only works for threads, not processes. In Python threads are rarely a good idea because of the GIL. sqlite for example uses locking (alhtough it does not need MHwin32 because - I think - they have their own implementation on win32). Web servers use file locking.
I agree with your first point, though that cuts out the advantage of centralized data and keeping your users up to date. I would argue against the flexibility and expressiveness of JS+HTML+CSS vs QGraphicsView or OpenGL.
This setup appeals to me so much. "Oh hey, I've got a bunch of resources lying around. Guess I should do something cool with them . . . "
why? the client side code is still provided by the server and therefore always up to date. You can do OpenGL in the browser: http://thebackbutton.com/post_oldblogpost_89. There are other options. 
&gt; File locking does not work without it on windows Python is supposed to be cross-platform, not Windows specific.
Qt &amp; PyQt. Later Qt &amp; PySide when it gets more robust.
I could have my desktop app load it's code from a server every time it started too. I don't think we're really arguing anything on that point. And sure, you could do OpenGL on the browser, but I think it says something that no one really is.
ok, then answer this.. would you want to browse your files with browser or with a simple desktop application?. Here's the kicker.. if you say browser, you are an idiot.
There are lots of unix specific functions that ship with Python (including flock which does not work on windows). For file locking to be portable there must be a way to implement it on different architectures. If a user downloads Python on unix/linux/mac that user can do file locking, if a user download the python windows binary, that user cannot do file locking. Mind that I am not a windows user but this problem is the single most common problem of web2py users on window. Anyway, I am just asking a question. Why not?
no, it's not from project Euler. It's for a personal project I'm working on.
One thing is load 10K of HTML+CSS+JS (and cache it) and one thing is downloading the entire app (many MB?). By the way, the latter raises many security issues.
yes, thank you.
I will try this now.
Python does come with msvcrt which has some file locking functionality for Windows. Also [lockfile](http://code.google.com/p/pylockfile/)
Yes, I am quite familiar with this algorithm and this question is related. But, I am coming up with an alternate version of it which provides the order of a, but needs to be solved for a, I'm hoping there is a polynomial time way to solve the question presented here.
&gt; Anyway, I am just asking a question. Why not? Generally, file locking is completely unnecessary. Being both unnecessary and not supporting cross-platform, there's no reason to have it ship with Python
I dunno, I'd say using the whole web app stack just for something like a notepad application seems a touch cumbersome. 
?? I'm talking about Python code. If you really wanted to do it this way, you wouldn't have to transfer any more data than with JS+HTML+CSS. Less probably, because you could rely on whatever GUI framework you were using to provide so much. I know using exec in Python is "dangerous". Security is *always* an issue. The major risk is in determining the source of the update, much more so than in the code execution.
Well, if GIL is a problem, you can use [multiprocessing](http://docs.python.org/library/multiprocessing.html) which has pretty much the same interface as threads (that means locks, too).
Would either of these work? Wrapping it in [locks](http://docs.python.org/library/multiprocessing.html#synchronization-primitives) or [queues](http://docs.python.org/library/multiprocessing.html#exchanging-objects-between-processes) from the [multiprocessing library](http://docs.python.org/library/multiprocessing.html).
Also of note is that PySide was [started](http://www.pyside.org/about/) by Nokia.
http://www.google.com/search?client=ubuntu&amp;channel=fs&amp;q=site%3A+reddit.com+%22programming+podcasts%22&amp;ie=utf-8&amp;oe=utf-8
1 and N-1 are both trivial in this problem.
No because it is not locking a file. There may be other processes accessing the same file (also needing locking) that are not written in Python.
Why? Is there a good comparison someplace?
If it breaks on the biggest platform, it's not really either of those is it?
Here is a complete web app in web2py that implements something like notepad. # omitting about 20 lines of scaffolding settings... db.define_table('item',Field('name',unique=True),Field('body','text')) @auth.requires_login() def edit(): response.files.append('http://github.com/akzhan/jwysiwyg/raw/master/jwysiwyg/jquery.wysiwyg.css') response.files.append('http://github.com/akzhan/jwysiwyg/raw/master/jwysiwyg/jquery.wysiwyg.js') script=SCRIPT("jQuery(document).ready(function(){jQuery('textarea').jwysiwyg();});") return dict(form=crud.update(db.item,db.item(name=request.vars.name)), script=script) Allows file creation/update. Looks like [this](http://akzhan.github.com/jwysiwyg/examples/01-basic.html) since uses that JS module. Stores the text in the database as html, creates the database and the table if they do not exist. Is accessible from anywhere but enforces access control. Provide register/login/lost password/change password functionality. To create/update/rename "virtual" file: http://domain/.../edit (create) http://domain/.../edit?name=filename.ext (update/rename) Can you do this in a GUI in less lines?
This may solve my problem. Thanks I will look into it.
Guess it's time to post that to Python dev: http://mail.python.org/mailman/listinfo/python-dev and ask the about including it standard in Python. Let me know if you post it there. I would like to see what the reply is.
 I checked lockfile. Useless. Comment form inside the code "Locking is done on a per-thread basis instead of a per-process basis." Completely misses the point of what file locking is for.
Hm. Ok, didn't expect there to be a jQuery plugin that does that, though to be fair there are a lot of GUI editors where rich text area it's not even a line of code: just drag and drop onto the GUI editor. What if I want to save it as file on my computer?
This might be file locking for all Windows processes: http://www.effbot.org/librarybook/msvcrt.htm I believe this is the license for the code: http://effbot.org/zone/copyright.htm (The code is actually from a book of his, so you may want to ask.) Still, I hope you do bring it up in Python dev mailing list, even if you do get it working for yourself. :)
Software Engineering radio is excellent, been working through these on the bus and they have all been quite interesting/enjoyable and are not focused on a single technology like some tech podcasts: http://www.se-radio.net/
"biggest platform" here is a bit open to interpretation. And it doesn't break, you simply don't use it, there is a difference.
msvcrt seems to solve the problem. not lockfile.
add a line def download_file(): return db.item(name=request.vars.name).body Mind that the previous example already saved it (server-side) in the database.
Another vote for PyQt/PySide.
&gt; and not all of them bothered to consider how much confusion poorly chosen words could cause. With respect, as someone reading through this conversation hours after the fact, I don't think it is larsga who has introduced confusion.
There's a bunch listed on the wiki page for [discrete logarithms](http://en.wikipedia.org/wiki/Discrete_logarithm#Algorithms).
Really? LOC is not a very good argument. You can "scaffold" away 1k lines but it won't change the end product: from PyQt4 import QtGui app = QtGui.QApplication([]) editor = QtGui.QPlainTextEdit() editor.show() app.exec() # or exec_ for Python &lt; 3 To save: def save(): filename = QtGui.QFileDialog.getSaveFileName() if filename: with open(filename, 'w+') as file: file.write(editor.toPlainText()) saveButton.clicked.connect(save) Way more important than LOC, which is easier to understand? Instead of QPlainTextEdit I could use a subclass that does all and more than jquery.wysiwyg. No login required. Web apps have their strengths. But I can't see myself loading up Chrome and logging in to type up a quick note anytime soon.
Aside from the locking stuff, there are some valuable things in the win32 extensions, and I don't understand why they are not included with Python. I've used several win32 functions, but the only one I can remember right now is one that would return the eight-character file name of a file when given the long file name.
it's also the only way to get inotify type events on a directory in windows.
That doesn't mean what you think it means, although I agree it's worded badly. "per-thread" basis here refers to the granularity of the locking, i.e. two threads from the same process can block each other just as easily as two different processes. It will definitely do cross-process locking and I have used it for that purpose in the past.
I don't know if the win32 lib will help, but Windows does have a runas /user:blah that you could probably wrap around your command. 
Again, name one web server that requires file locking. Why do several of your processes need to write to the same file? Can you specify a use case that is not the result of poor architectural choices?
What breaks exactly? Can you name a major program that breaks?
I was actually just playing with wxFormBuilder tonight. It seems to be the most robust of all the GUI builders I've seen. I don't like the "spacers" that wx uses though. I may be ignorant, but it seems pretty difficult to get precise placement of elements in a window. Also, can you elaborate on the .xrc file usage?
You shouldn't generally need spacers - I just use a wxBoxSizer, with the layout set to horizontal or vertical as I need it. You can adjust the ratios between sizers by setting the 'proportion' property - if you set one element to 1, and another to 2, the latter will be twice as big as the former. To use an xrc file, hit f8 to generate, click the XRC tab, save this as something.xrc, then in your code: def OnInit(self): res = xrc.XmlResource('something.xrc') self._xrc_frame = res.LoadFrame(None, 'my_frame') self.my_object = MyObject(self._xrc_frame) self._adjust_initial_layout() self._xrc_frame.Show(True) self._xrc_frame.Layout()
I may have had the wrong terminology. I was thinking of the sizers. I was working with grid sizers, which I wasn't impressed with. It seems like you have to really nest them to get precise layout, which seems overly complicated. I'll have to work with it some though to see if I can get them to play nice. Thanks for the code sample! I may prefer to take the straight python code generated, especially when adding in the event handlers.
**OPEN SOURCE PROGRAMMERS DO NOT CARE ABOUT WINDOWS. THAT'S WHY.**
thank you, this is helpful.
They don't ship with win32 extensions because the python developers don't want the burden of maintenance. Yes this is a serious concern - the stdlib is huge already. I seem to recall that there were quite some discussions in the past when the subprocess and elementtree modules were included in the stdlib. Myself - I'm using ctypes more and win32 less these days. 
Though I prefer GTK, the QT or wx bindings are probably your best bet.
Many open source programmers do care about Windows. The problem is that many don't run windows natively and so they don't see all the issue. They rely on the community to provide insight (bug reports, patches, suggestions, etc) to help with something on Windows. When the those that care about the open source programs on Windows don't help, the programmers can't help.
Okay, then Microsoft doesn't care about open source software. Apple bundles Python with OS X! If Windows did the same, we probably wouldn't be having this discussion.
Biggest platform? In what market? Desktop, server, mobile? Now how many mobile devices are there for every desktop? Symbian owns mobile world wide. Unix/Linux owns server though .NET is going strong. Just because Windows is the de-facto standard for desktops doesn't make it the biggest platform. So there are problems with Python on Windows, it is open source so suggest a way to address it.
So basically it's PyQt with official support? Cool. :)
I've tried all three. pyQt has a richer collection of widgets, and that's really what makes it for me since in most cases I am too lazy to worry about writing custom widgets.
I find Qt Designer to be much more robust and feature-complete than wxFormBuilder. Not that I have anything against the latter, but Qt Designer is IMHO more polished - consider that it's an official Qt/Nokia tool for designing Qt GUIs (not only PyQt/Pyside), and Qt is a framework with a huge user base.
pyQt allows absolute positioning if that's a big deal for you. I found wx better for making quick and easy applications that work well at any window size but they take a bit more work to get them to look shiny and polished. Sizers have a lot to do with that.
I compared PyQt to wxPython [here](http://eli.thegreenplace.net/2009/01/19/moving-to-pyqt/).
[ActivePython](http://www.activestate.com/activepython/downloads) does include PyWin32 [among other things](http://docs.activestate.com/activepython/3.1/whatsincluded.html).
It's not done yet (especially on non-Linux) but it's compatible with your PyQt code (after you change your imports so you import the PySide stuff) so when it's going to be awesome once completed.
What would be the point of that? ttk extends on tk anyway.
&lt;keanu&gt; Hum, [deja](http://www.reddit.com/r/Python/search?q=python+gui) [vu](http://stackoverflow.com/search?q=python+gui) &lt;/keanu&gt;
microsoft doesn't care about OSS because it doesn't bundle python? That's a rather parochial view, no? As to why they won't do that, it would make python part of their support burden, so a) would need security updates via windows updates, b) could be prone to forking if MS decide to fix security updates before upstream does (and does them in such a way that it results in different behaviour), c) be a shitload of hassle for them that they don't need.
Sizers (which I can see is what you meant) are great for handling cross-platform issues like difference DPI, fonts, and what have you. It also enables you do resizable dialog layouts with little pain. Absolute positioning is definitely also possible in wx but a dialog designed under Windows will most likely look like crap under Linux. You should definitely make the effort and learn how to use sizers properly. You can easily achieve any layout you want once your brain is wired to the concept. It does require nesting sizers as you describe but again, handling cross-platform layout issues and resizing dialogs manually is even more painful. The BoxSizer is IMO not the best approach and I rarely use them. I use the FlexGridSizer and on occasion the GridBagSizer.
If you want to build an application for real everyday work, you need to build a desktop application or a rich client. When users are working with your app regularly for long hours it's all about performance and usability, not shiny web 2.0 buttons and flash animations. At my company some really huge SAP apps are made with web GUIs and they are great great failures. Those guys should have used a rich client. PyQt is also my recommendation.
Well, designers "back then" used nested tables to achieve positioning as well. It's not that bad, using multiple nested sizers.
Yeah, you still type the same, and the line where the cursor is looks like just regular python code. On all other lines, the cute-ification is done. I've added more concealments: syntax match pyNiceOperator "\&lt;in\&gt;" conceal cchar=∈ syntax match pyNiceOperator "\&lt;or\&gt;" conceal cchar=∨ syntax match pyNiceOperator "\&lt;and\&gt;" conceal cchar=∧ syntax match pyNiceOperator "\&lt;not " conceal cchar=¬ syntax match pyNiceOperator "&lt;=" conceal cchar=≤ syntax match pyNiceOperator "&gt;=" conceal cchar=≥ syntax match pyNiceOperator "==" conceal cchar=≡ syntax match pyNiceOperator "!=" conceal cchar=≠ syntax match pyNiceOperator "\&lt;not any\&gt;" conceal cchar=∄ syntax match pyNiceOperator "\&lt;not in\&gt;" conceal cchar=∉ syntax keyword pyNiceOperator all conceal cchar=∀ syntax keyword pyNiceOperator any conceal cchar=∃ syntax keyword pyNiceOperator sum conceal cchar=∑ syntax keyword pyNiceOperator filter conceal cchar=σ syntax keyword pyNiceStatement for conceal cchar=∀ syntax keyword pyNiceStatement lambda conceal cchar=λ Example screenshot: http://gyazo.com/14349757242b8731b38bdf6202228c8e.png
I'm glad people are liking PyQt, because it's the default in Maya (the 3D app I use at home and work) from v. 2011 on up. I like to hear that it has supporters, so it's not a worthless thing to learn that will evaporate in a few years. I'm hoping my company moves to 2011 from our current v. 2008 so I can get away from decades-old Motif-based UIs that I've struggled with in Maya since the late 90s.
Mailman.
Shedskin took longer than regular Python! I'm surprised he didn't try psyco.
My guess: 64-bit system. That could explain shedskin performance (running without -l).
ropevim for refactoring. I believe ropevim also displays pydoc. Vim doesn't have a scrollbar by default, so your last one doesn't apply. The only thing that vim doesn't have that eclipse does is Mylyn. I'm sure it is only a matter of time. 
Cross platform GUIs are a pipe dream unless it's for a personal project, a captive audience (internal deployment dictated by an IT department) or sufficiently desperate geeks (Java IDEs.) Generally speaking the feel of cross platform UIs is wrong and you'll have to adapt them to each platform to make users happy. At which point the usefulness of having a common, non-native toolkit is questionable.
psyco is known to be slower than pypy on most stuff
Microsoft, belatedly, [did shipped Python code in Win](http://python-history.blogspot.com/2009/01/microsoft-ships-python-code-in-1996.html)... :-)
This guy needs to describe the benchmark and publish source, otherwise it's meaningless.
Recurring dilemma. A similar discussion from 3 months ago: http://www.reddit.com/r/Python/comments/d1fqa/ask_python_which_gui_toolkit_should_i_use/ (I still didn't quite test http://page.sourceforge.net/ :( ) Also relevant: http://www.reddit.com/r/Python/comments/eaji4/getting_started_with_python_gui_applications/ 
From what i have heard that python support for emacs is partial and divided between two different plugins. Which one you use ?
this would involve downloading the torrent file, decoding the metadata inside of it (its bencoded), and then scraping from the tracker. http://wiki.theory.org/BitTorrentSpecification will be quite useful. Files and size is stored inside of the .torrent file, but there is no way you can know about the seeders and leechers if you don't contact the tracker.
Yes, you can be very expressive with JS+HTML+CSS from a design point of view. Web is very strong in representation, not so much in interaction. Still, everything can be done with both technologies (JS+HTML+CSS or Flash and a GUI Toolkit like Qt). But creating something like Google Docs with JS+HTML is probably 20 times more demanding than doing it with PyQt. And the result will be very noticably worse (while still impressive). It's all about what kind of app for what kind of users. If you go to the ice cream shop, flip-flops are fine. If you go for a 5 h hike in the mountains, proper shows have advantages.
I made [this](https://github.com/Sillern/rss_torrent_fetcher) a while ago. A small tool which downloads a bittorrent-file and some light parsing. I used [HunnyB](http://pypi.python.org/pypi/HunnyB/0.1.0) to decode the bencoding.
I can't wait to start using PyPy. Anyone know when it's gonna support NumPy, Matplotlib and other such libraries?
Why no Cython? Where is the source? I've done Cython and seen huge speedups for relatively little effort. It's a great intermediary.
Right. I've been seeing this question come up here for the last 3-4 years. Wx and Qt are still the most popular and viable options. But is it my imagination, or has reddit's opinion moved slightly away from Wx towards Qt over this time?
I've used Tk, wx widgets, and PyQt. Of the three, PyQt is by and far the most thorough, best documented, and reading the code gives me warm fuzzies.
Yes, this! I know I can do it with sizers, but I feel like I'm struggling with exactly where I want stuff. I don't do it very often, but I'll give Microsoft some credit with their Visual Studio product. It's a pretty damn slick IDE / GUI Designer.
Tore kuulda. Saan siis umbes kuu või kahe pärast, s.t. siis kui sa minust ette juba oled jõudnud, mõne küsimuse esitada :)
Would love to see the memory usage comparison.
How does this differ from [plac](http://micheles.googlecode.com/hg/plac/doc/plac.html)?
&gt; I've done Cython and seen huge speedups for relatively little effort. It's a great intermediary. Ditto that; heck, I've seen rather impressive speedups with zero changes to the source. It gets even better when you start profiling, and adding static typing to the hot spots (especially math).
&gt; What if it's a desktop app specifically that you want? Then use Mozilla Prism. &gt; Not everything can be converted to a web service. Well what features do you need?
Definately pyqt. I code an application for GeoTechnical testing using Linux/Wind. All code is checkout straight from svn in the morning, works a dream.
They seem to have the same capabilities.
I wish we could have a JIT merged into mainline Python. And then a good solution for removing the GIL. I don't hate the GIL, just nobody's come up with a good solution for removing it yet.
I do have to admit, I used Visual Studio Express (Visual Basic .NET) back in 2005 and their GUI designer was really nice
I really need to look into pypy.
There is a very vague plan to support numpy natively at some point. Matplotlib and such are unlikely and would rather work via cpython C extensions (btw, it's open source, you can help)
Thank you so much for the kind words. They keep me inspired to polish watchdog as much as possible. =)
Thanks a ton! :)
This is exactly the thing you want, ive done what i think to be nearly exactly what your looking for, bencode is the money. I ripped my version right from the bittorrent source tree though, something was wierd about the pypi one.
You always do a really, really good job at selling web2py. Every time I read one of your comments, I get the urge to grab it and start making something. I haven't written any python web apps in almost 3 years, but I'm determined that the next app will be in web2py.
What a splendid idea!
linux with eclipse+ pydev 
A guy from bpython commented on the blog saying that it will be helpful for them - replacing some code they already have that does the same thing (but misses some cases this covers).
Well, discussing when you might want to do it is how the article *starts*. So the fact that you hadn't read it before posting your comment was obvious to anyone who *did* read it...
The problem is that you can't remove the GIL without adding proper garbage collection.
Is PyPy going to break the nice interaction we have with C right now? I mean is it going to become harder to write wrappers to C libraries like that, since Numpy/Scipy/Pylab are basically just this, right.
What is it about mailman that requires file locking?
What about one of the various Google APIs? I think the geocode one supports this, if not the static maps one should. update: google.loader.ClientLocation works with Google's AJAX loader api.
Hi, I would really like to chat with you. I figured out how to make it broadcast a message received from one client to all other clients. The problem is I need my code to also be receiving data from another server simultaneously. The way I did that was by using thread.start_new_thread() and it does listen properly. Now my problem is I need to share the data that is being received on the receiver thread with my twistd application.. I tried using the Queue class, but it isn't quite working.
Sign up with some company that will find an ip-address and set up some code to make a call to there api and it will give you geolocation. Or better yet, to also give some user control ask them to pick a location it should give results. You can then represent the data by all kinds of ways such as image mapping which can give some cool effects. Use api only if user selects get my location. But depending on if they are set up through an isp(internet service provider) as many are now using proxy. There location is not always that good, so better yet ask. Will get some wrong results but data is still similar in completeness. Set up zones it will make your game like football with divisions, make your own divisions. It is farely easy to usually get the state through easy api call. Multiple states even better. 
TBH I don't write that much python so i just use whatever the default mode in emacs 24 is, and run ipython in an ansi-term buffer, and that does plenty enough for me. 
I wouldn't mind that.
There is an opensource data base geoip from maxmind. http://www.maxmind.com/app/ip-location 
This is amazing. Nothing better to practice your coding skills than to interface with something you already know, and automate it :)
Wow. Here was me thinking that PyPy was mainly about self-hosting and language development. I had no idea it was so fast.
Hold on, I can debug python in VIM? I need to look into this!
Nobody would. It's just awfully hard to bolt on CPython. I wish PyPy obsoletes CPython and enables that kind of nifty stuff.
Yes, you need some kind of a lock when accessing the file resource for logging. However, how this locking effect is accomplished to up to the developer. It doesn't necessarily require the file locking mechanism provided by the operating system.
That's a really entertaining suggestion, but I don't really know where to go with it. What toolkit would you use? [Dijit](http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html) seems like a natural choice, but it lacks the drag-n-drop widget layout apps of [QT](http://doc.qt.nokia.com/qtcreator-2.1-snapshot/creator-using-qt-designer.html) or [GTK](http://glade.gnome.org/). Moreover, how would you get the UI and the python to communicate? Would the abstraction between code and UI be as simple as with PyQt?
Before you start, you should join our mailing list. It is a fun a useful place. 
Why not make use of HTML5 Geolocation API? In conjunction with Google Maps API you can do nice lookups...
&gt; return td.days * 86400 + td.seconds + (float(td.microseconds) / 1000000) That doesn't count for leap-second, no?
Man, you just ruined my productivity for the next month. I hate you
:D
That was my thought, too! I just tried this out and it's working. I'm even running on Windows where things like this don't normally work.
[Gauss–Legendre_algorithm](http://en.wikipedia.org/wiki/Gauss–Legendre_algorithm)
print is not a function in python2.6. You can import the print function though. This should work in 2.6: from __future__ import print_function myjob="hacker" print(myjob, end=' ') 
 from __future__ import print_function myjob = "hacker" for c in myjob: print(c, end=' ') ... h a c k e r Perfect it works this way...although it seems strange that there wouldn't be a mention of version differences...because in the book (Learning Python) by Mark Lutz, he usually mentions what differs between 2.6 and 3.X also if print is not a function in 2.6 how come I can do something such as: &gt;&gt;&gt; s = 'spam' &gt;&gt;&gt; print(s) &gt;&gt;&gt; spam
are you sure ???? that shot would put me to sleep in like 15 minutes
Pi's a transcendental number. You *can't* compute it "to as many digits as possible."
[here is a good read](http://www.skipole.plus.com/pythonrag/issues/pythonrag_january_2010.pdf) I liked. starting Page 5
To start with you'll need to choose your algorithm for calculating pi. The simplest one to understand is 4 x (1 - 1/3 + 1/5 - 1/7 …) but it's very inefficient as a means of calculating. Still there's no reason you couldn't write a program that fills your whole hard drive with pi digits if you really wanted to. You just need to append to a file periodically to free up memory. 
 PythonWin 2.6.6 &gt;&gt;&gt; s='spam' &gt;&gt;&gt; (s)==s True &gt;&gt;&gt; You are not calling the print function but printing the expression (s).
Depends on what you mean by possible, I guess. If possible means catching 'em all, you can't do it, but if it means 120 GB worth, it can be done. 
VIPER + PYTHON: Snake Development Platform 
Python 3 is free. You're probably going to keep running into little things like this if you're not careful (and you can't really be careful when you're starting out, since you don't know what to be careful about). I would suggest just installing Python 3. 
&gt;How do you think I can accomplish this without requiring the use of a supercomputer? http://www.telegraph.co.uk/science/science-news/7973234/Japanese-man-calculates-Pi-to-5-trillion-digits-on-homemade-computer.html I think this is a cool Idea. just try with your current hardware (maybe just invest in some more memory and hard drive space). Good luck!
[This](http://mathforum.org/library/drmath/view/58285.html) should get you started.
I've done this, and porting the algorithm to C made Python look embarrassingly slow.
This looks kind-of close to the RSA encryption algorithm (I don't remember the theory behind RSA - I read on it ten years ago or so). If it's RSA, you're probably looking at solving an NP complete problem. Why are you trying to solve this?
Which linux distribution you are using under VM and which host OS and why? Is VM a better option than dual boot OSes? What are you hardware specs; i've heard that linux under VM performs too slugish, is it true?
&gt; Is this too ambitious for a first program? No; For python it sounds about right. &gt; It seems like I should be able to get there with a few months of effort, but I don't even know what I don't know. **Before coding**: Decide on some major areas of functionality for your project (for example: parsing directories, extracting metadata, storing metadata, searching metadata, GUI, logging). Once you decide that, decide that you will not add anything new until these work. Otherwise, you end up with the [feature creep](http://en.wikipedia.org/wiki/Feature_creep) syndrome. Write a few ideas on what each module of your application should do (e.g. parsing directories: "Parse directories recursively from a starting point and return a full list of files"). You can use a simple text file for that, but if you feel the need to change functionality (or realize mid-implementation that you need different functionality) write it down in the document. Choose a version control system (I would recommend Mercurial, but if you have something else you're more familiar with, use that). Keep all your content except compiled files (in python *.pyc files) in the version control system. That includes your brief specifications document (that I wrote about above). Choose a way to keep track of issues. For the beginning, this may be a simple XLS/Open Office table, or a more elaborate system. Just keep it up to date. The important thing is to not keep issues you have to solve on papers on your desk (those get lost) or worse, in your head. Then, start coding one module at a time, and only write enough code into it that the other modules can use it.Each module should cover a separate area of functionality (parsing directories, extracting metadata, storing metadata, etc). 
I am wondering if python 2.7 is shipped with a compatibility module. I would say: import python3 And that would mean all future imports, unicode and bytestring changes, range=xrange etc.... All the things that are backported... 
This is really cool. I'm going to make this my christmas project.
Isn't it enough that they're on GitHub or Bitbucket already? I don't quite see the point.
I guess it runs as multiple processes and locks mailbox files around modifying them...