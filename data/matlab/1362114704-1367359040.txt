Thanks - I tried that out seemed straightforward, but now i need to work with methods! 
thanks man 
 feval(@nonlinearrhs,v) The @ is important.
really? several thousand m-files?
check out [fgetl](http://www.mathworks.com/help/matlab/ref/fgetl.html). The example is exactly what you are looking for. This function grabs the content of your current line number in the file and advances to the next line automatically. fid = fopen('fgetl.m'); tline = fgetl(fid); while ischar(tline) disp(tline) tline = fgetl(fid); end fclose(fid);
Thanks mate ! I can't upvote this hard enough. This is exactly what I was looking for !
Do you know a good tutorial?
have you read http://www.mathworks.com/help/matlab/ref/spdiags.html ? If you are just trying to create an nxn matrix filled with the example here : http://i.imgur.com/28eC1QV.png then it would probably be much easier to just define it directly like : n=(number_of_row) % preallocate A(n,n)=0; % top two rows A(1:2,1:4)= [#,#,#,#;#,#,#,#]; % n-4 middle rows for i=3:n-2 A(i,i-2:i+2)=[#,#,#,#,#]; end % last 2 rows A(n-1:n,n-4:n)=[#,#,#,#;#,#,#,#]; good luck ( edit: fixed formatting)
Probably something along the lines of take the n-termed poly, put it in a data structure where term where the x^nth term is in the nth space of the column (or row) vector which holds it. If for example, there is no x^3 term, that coeff is zero. This way you will gain the "sparseness" that they mention. Next add or multiply coefficients by iterating through the n-poly in a for loop and using the index i to address the ith element of the m-degree poly, performing the requested addition or multiplication. Once you have completed the operation, you will have the answer in place of the n-degree poly. Return that. 
By its name, the static text objects are not very interactive. Why are you using static text for interaction rather than a pushbutton, toggle button, checkbox, etc.? The doc for uicontrol states: **Static text controls do not activate callback routines when clicked.** It does have the ButtonDownFcn which, from the doc (*&gt;&gt; docsearch('uicontrol properties')*): * If the uicontrol's Enable propertyis set to on, the ButtonDownFcn callbackexecutes when you click the right or left mouse button in a 5-pixelborder around the uicontrol or when you click the right mouse buttonon the control itself. * If the uicontrol's Enable propertyis set to inactive or off, the ButtonDownFcn executeswhen you click the right or left mouse button in the 5-pixel borderor on the control itself.
If you're plotting just points, you can use the scatter function, and pass it a colorData array the same size as x and y that'll color each point as you choose. For a line, if you use plot() with a 2-D array for y, it'll plot each column (row?) a different color.
I appreciate that, but my issue is with how to implement it. I've tried sourcing information about it, looking at various example code, but it seems to go over my head. If you could produce something that would cater to my specific circumstance it would be greatly, greatly venerated.
Think you want eval(). It executes a string as if it were a line of code. So just write the line of code with the dynamic variable name in it as a string (using sprintf() or whatever to format a variable's value into the string) and then execute it using eval(). Eg: for n = 1:5 x = rand(1); mycode = sprintf("variable%d = %g", n, x); eval(mycode); end
I've had to do this, it sucks, but eval() will do this for you, although it's not optimal: for i = 1:10 var_name=sprintf('variable_%g',i); eval('%s=%g;',var_name,i); end You'll have ten variable names of the form 'variable_x' which equals x.
The closest thing you can do in matlab is to define something that's empty with specified type, as in the following: x=zeros(0,'uint8'); Strings are inherently pointers, so there is no space allocated, unless you first want to allocate the string as a character array, in which case you could do the following: x = char(zeros(1,24,'uint8'));
This is essentially the method that I was going to settle on to use, until I realized that the data that I want to plot could possibly be different lengths. E.g I am plotting a sequence of time series data where the lengths of the time and data vector could possibly be different for each trace, so this precludes me from storing all of the data nicely in a matrix and using a custom color map to plot :-(
Thank you!
if you want to pad your matrix with NaN's, then matlab will ignore the NaN elements. For example: X = 1:5; Y = [1 2 8; 2 5 4; NaN 8 10; NaN NaN 15; NaN NaN 20;]; plot(X,Y); Edit: If you have your data in a cell array of vectors that you want to convert to a padded nan matrix, you can do it fairly quickly with cellfun. Let's say you have the following: data={[1 2 3],[4 5 6 7],[1 2]}; max_len=max(cellfun(@length,data)); % find max length cell2mat(cellfun(@(x) vertcat(x(:),nan(max_len-length(x),1)),data,'UniformOutput',false)); % do it all in one sexy step plot(1:max_len,data); There you'll have a NaN-padded matrix where each column is a new line, and it can be plotted.
Am I right in assuming that you have the data and just want to change the name to something more logical? If so, I'd suggest using assignin(). It's less confusing and faster than eval().
Nice, didn't know about that one.
I see a few problems: 1) x and y need to increment by `stepsize`, not by 1. So change the for loops to `for r=1:stepsize:x`, etc. 2) You need to call `mean()` twice. One gets the mean in the x-direction and the other in the y-direction. Also you have an off-by-one error in the indexing: mColor = mean(mean(pic(r:(r+stepSize-1),c:(c+stepSize-1),:))); 3) You need to use `repmat()` to make the mean color matrix the same shape as the part of `pic` you're replacing: mColor = repmat(mColor, stepSize, stepSize); pic(r:(r+stepSize-1),c:(c+stepSize-1),:)= mColor; 4) There will still be errors if the stepSize is not evenly divisible into x and y.
Thank you! The mean value is working and now it's finding the right right color. Now how do I get this to repeat throughout the rest of the image using that for loop? I thought that the one nested loop I used would have been enough, but it still stops after one square.
The problem with imfilter is that it's going to shift your filter over every pixel, and as a result you won't really be able to define the hard boundaries that you want. I'd recommend checking out the [documentation for block processing](http://www.mathworks.com/help/images/ref/blockproc.html), which will do exactly what you want, but since I'm familiar with Matlab I'll help you along a bit more: If you briefly read the documentation, the blockproc function requires as input an image, a block size, and a function for processing each block. With this knowledge, we can rewrite your function in juts a few lines. function pixellate(fileName, stepSize) I=imread(fileName); fun = @(block_struct) mean2(block_struct.data)*ones(size(block_struct.data)); I2=uint8(blockproc(I,[stepSize stepSize],fun)); image(I2); ta-da! Note that this generates a grayscale image, since all the RGB values are the same. If you wanted to extend this to make "average colors,"--that's kind of a tough one, because we'll get into color theory. A super naive way is to simply average the three layers individually, in which case you can modify @fun to take the mean across each color slice individually: function pixellate_color(fileName, stepSize) I=imread(fileName); fun = @(block_struct) repmat(mean(mean(block_struct.data,1),2),[block_struct.blockSize(1) block_struct.blockSize(2) 1]); I2=uint8(blockproc(I,[stepSize stepSize],fun)); image(I2);
It works for me, but I don't know how your filenames work. The error is probably here: x = size(fileName(:,1,1)); y = size(fileName(1,:,1)); These variables probably aren't being set to the correct size of the image. Instead, set it like this: x = (size(pic,1)); y = (size(pic,2)); Also, to fix problem 4) from before, replace the interior of the for-loops with this: r_values = r:min(r+stepSize-1, x); c_values = c:min(c+stepSize-1, y); mColor = mean(mean(pic(r_values,c_values,:))); mColor = repmat(mColor, numel(r_values),numel(c_values)); pic(r_values,c_values,:)= mColor;
Oh, dear. [Here's the long answer](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html). The short answer is, there are an infinite number of real numbers. It's impossible to represent every one of them in a computer that has a finite number of ways to represent numbers. This is true not just because numbers can get bigger and bigger, but because they can become more and more precise. Between 0.9 and 1.0, you have 0.99. But between 0.99 and 1.0 you also have 0.999. And on and on. Consequently, when you type in any particular number, your computer may be representing it internally as not exactly the number you enter, but as a number that's very close that it can represent. Even shorter answer: It isn't safe to compare floating point (i.e. non-integers) to one another.
I should probably be more specific. It isn't safe to compare floating point numbers to one another for EQUALITY. Unexpected things will happen. (At least, they are unexpected if you don't understand floating point representation.)
Thanks for the replies. I suppose one solution is to convert them into integers (*100) and compare. Is there any other way? 
Easier way is to do something like this: if(abs(a-b)&lt;1e-10) ...do your stuff... end
The preferred way is compare within some tolerance. If I am looking for all numbers withing a vector that are within a floating point number (say pi, for example), I can do: find(abs(x - pi)&lt;tolerance) where *tolerance* is my small number that I want as the error tolerance, and *x* is the vector I'm looking through. Also, since it seems like the whole floating-point representation thing is new to you, you might also like to know that numbers *can* be stored to arbitrary precision in computers as strings, and there are even toolboxes in MATLAB that allow one to do so. For engineering applications, though, it's rare to need arbitrary precision libraries (I can't think of a time where I have needed to use one).
Sure. After the image is loaded, you can see how big it is using the `size()` function: x = (size(pic,1)); y = (size(pic,2)); In the second part, I made sure that you would never try to index the array out of bounds, by stating the coordinates in each iteration went from `c` to `c + stepSize -1`, unless that second one was greater than `x`. (and the same for y)
Check out my other answer; you can do all of this in 2 lines of code, excluding reading and displaying the image.
You can't test floats for equality. Actually, you kind of can pretend when you know for a fact to which accuracy you're getting, which is why decimal arithmetic used to be a Pretty Soon Now feature. When you punch in 0.95, the machine understands binary 0.00101111, but if somehow during calculations your binary representation gets clipped (here's a discussion on [floating point precision](http://stackoverflow.com/questions/872544/precision-of-floating-point)), equality fails. Computer vendors used to sell exact decimal arithmetic for that very reason -- we think in decimal, we know what's happening when decimal representation is rounded down and why. One of the casualties of the competition-from-below dynamics of the computer industry. It's an extremely common mistake, though. What, xkcd had a strip about the frigging Knapsack problem and the alt-text confessed that he tried a Python script to solve an instance regarding the total cost of a combination of food items in a menu -- and then ran into trouble with testing floats for equality. Man, if your underlying is money, internal representation = integer cents. Anyway, for anything like search in a vector space, you test for an interval. That's what eps is for, btw, but you can define any other delta/epsilon constant.
For pretty much any application that needs arbitrary precision numbers in a controlled/guaranteed way, Mathematica is the way to go. (It helps that fraction representation is handled automagically). Of course you can always read from strings as you say, but intermediate operations will still be operating at machine-representation resolution, so the point is kind of lost. This tolerance thing is easier to handle in engineering than in finance. In both cases the resolution of the models is lower than that of machine-representable numbers, but numbers in finance get copied and pasted around models with different internal contexts. It's the stuff of madness -- high-resolution models (like analytically solved derivative pricing formulas) get thrown low-resolution data carried on from myriad intermediate sources. (Mathematica would solve this by just clipping the results to known precision. In practice, we use a mix of Stata, Excel, Matlab and eyeballing a number of digits to trust.) 
That's interesting. I haven't touched finance; machine learning is my field. Oh, and some MATLAB [toolboxes](http://www.advanpix.com/) will work on arbitrary precision types, but I don't doubt that Mathematica is better in this regard.
By the way, note that multiplying two polynomials is what convolution is, so you can easily just use conv(x,y) where x is your vector of coefficients for poly1 and y is the vector for poly2. So--you'll get a big speedup using Matlab's native functions, so try the following against anything you do and see how fast it s: % generate two polynomials of order 10,000 whose coefficients vary between 0 and 50 p1=round(rand(1,10000)*50); p2=round(rand(1,10000)*50); % calculate the convolution of these two tic; p3=conv(p1,p2); toc; &gt;&gt; Elapsed time is 0.018950 seconds. In Matlab, it's far more important to know ways to utilize native functions properly, since they're usually coded much, much more efficiently than implementing a more efficient algorithm overtop.
Yeah well. Most of machine learning is numerics. Might as well be C/C++, but Matlab is bloody convenient for developing algorithms and shipping them to some poor code monkey in Brazil or something. As for Mathematica, s/Mathematica/symbolic computing in general. It's just that Mathematica is _very_ well polished and supported, while open source projects such as MacSyma have often opted for generality at the expense of thoroughness, and one really prefers to have a good symbolic PDE solver rather than a theorem prover. Mathematica gets bonus points for being a proper Lisp at its core -- you can drive yourself mad just thinking of how many things you can do recombining probability (yeah -- symbolic probability distributions on which transforms and metadistributions can be constructed), image, sound, etc. etc. on a full metaprogrammable environment. But I digress. Mathematica actually gets a bit of a bad rep when it comes to numerics. The nonlinear optimizers aren't very flexible in terms of being able to tweak them, but they're quite fast and applicable everywhere, from inference on derived distributions (think of a Poisson process whose parameter is a Beta distribution with parameters each a zero-truncated Weibull squared) to numerical integration on weird noncompact spaces, not to mention combinatorial optimization on graphs. And so on. But machine learning, yeah -- you kind of need to focus on something that can be ported to a [brain computer interface](http://www.extremetech.com/extreme/149879-brown-university-creates-first-wireless-implanted-brain-computer-interface?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=brown-university-creates-first-wireless-implanted-brain-computer-interface#.UTSlG7s4vLQ.reddit) when push comes to shovel, which my baroque Mathematica monstrosities can't. I admire the discipline you folks have -- focus on getting results right rather than fussing with the innards of stuff. I once had a four-line Haskell program that decoded Caesar cyphers without knowing the rotation number -- it optimized for the letter frequency in english in some ad hoc way that covered 98% of cases. But then I was barely out of my teens, my head still wasn't filled with all sorts of ideas of how all things can be improved.
In the x86 standard, there are actually [instructions](http://en.wikipedia.org/wiki/X86_instruction_listings) for dealing with "binary coded decimal" numbers interestingly enough.
Thanks for all of this! I was specifically trying to do it with a nested for loop but this is also really cool. Thank you anyway!
Thanks! This (and everyone's comments) have been very helpful! 
+= and ++ don't work in matlab. What is that part of your code trying to do? Look up datestr.
Nevermind, I got it. In case anybody wants to know, I used y = filter(filtername,signalname); figure; plot(x,y);
This is one method I find useful, at least when you need to export data that can be used in MATLAB or spreadsheets(DATA in this case is some matrix): csvwrite(strcat(datestr(now,30), '.csv'), DATA)
Thanks for asking the question. I enjoyed the well vocalised answers as well. I have similar issues in experimentation. My boss gets annoyed when i take the extra time to program in tolerances or take extra data points for statistical purposes. But i have learned that taking the time to understand how the computer and my boss "think" is good for everyone. Sorry for my ramblings. Cheers
play around with datevec(now). If I remember right, it will return year, month, day, hour, minute, second. 
To expand on this, you can customize the format of your filename: &gt;&gt; c = round(clock); % this returns a vector of [Y Month D H Minute S] &gt;&gt; fname = sprintf('OutputFile_%04d%02d%02d_H%02dM%02dS%02d.txt', c); OutputFile_20130305_H08M18S52.txt With different formatting: &gt;&gt; fname = sprintf('OutputFile_%04d_%02d_%02d_%02d_%02d_%02d.txt', c) OutputFile_2013_03_05_08_18_52.txt
Are you a Python programmer? In MATLAB, string concatenation is performed using [] or strcat: % get the clock data and put it in an easily-usable form c = strtrim(cellstr(num2str(round(clock)'))); d=[]; for n = 1:6 d = [d,c{n}]; % can also use: %d = strcat(d,c{n}); end But I recommend the sprintf method that /r/riboch and showed in another comment. 
 backEulerfedbatchSystem(FedbatchFermenterModel(t,x,u,d,par),drhs,x0,t0,tf,n) 
Yes, thank for expanding upon that, without it there is no point to using sprintf. 
I am currently learning about matlab, and am finding it hard to follow. Can anyone explain these 5 steps that have been used to pitch shift a signal. I understand part 1 is generating a signal but i'm not sure what lines 4 and 8 are actually doing. Why does it need to be converted to native data in part 2, does this create an integer array? Why does part 3c onvert into a float point array? Thanks for any help 
Matlab is a little funny with strings. It treats them as list of letters. (This can be extremely useful in many functions like fuzzy string matching etc, but it's going to back fire here) So lets assume the user input is 'alligator' Then your first comparison will be doing this 'a'=='a' 'l'=='l'... and so on. If your two words aren't the same size then this will not work. The easiest solution is just to do strcmp(d{1},D) or regexp(d{1},D) This will give you a list of logicals (or numbers if you use regexp) that will show where your item is. You could then loop through this. If you want to be fancy, and force Matlab to obey you, you could, but you'd need to pad your strings to the same size and find a way to deal with the fact it's comparing each letter individually. It's more more effective to use the build in functions. (Or you could use like the first three letters or something)
Ok, a bit hard from your code to discern what's going on, but I think I understand from your initial description. To rephrase (let me know if I'm wrong): You have a big list of keywords, and the user inputs a subset of these keywords. You then search through ten documents, and you want to output a single matrix. For starters, your output matrix isn't the right size, which you claim is 10x2. Let's say the user wants 5 keywords, then how do you plan on putting the relative frequencies of every keyword in only one matrix element? You're going to need a 10xN matrix, where N is the number of keywords that the user has indicated. So let's assume that you've decided to use a 10xN matrix. Here's how I would go about doing it. Additionally--I'm not really sure what your "input matrix" does, since what would be populating it? You might as well have the input matrix be the list of documents. I think you need to clarify your inputs a little better. Anyway, here goes: % Try to use variable/function names that match their function % Note: "documents" is going to be a cell array of filenames function frequencies = find_keyword_occurrences(documents) % List of keywords that are hardcoded. Better would be to store these in a .txt file keywords = {'alligator', 'alpaca', 'barracuda', 'bluebird', 'camel', 'cobra', 'coyote', 'flamingo',... 'hippopotamus', 'lizard', 'mockingbird', 'mouse', 'octopus', 'penguin', 'pigeon',... 'porpoise', 'rattlesnake', 'rhinoceros', 'whale', 'zebra'}; % Gather keywords from the user user_keywords = cell(0); word=[]; ind=1; while(true) % get the user's keyword word=input('Enter a keyword from the dictionary','s'); if(strcmp(word,'stop')), break; elseif(~any(strcmp(word,keywords))) fprintf('Invalid word, please enter another.\n'); else user_keywords{ind}=word; ind=ind+1; end end % in case the user put in the same word more than once, remove multiples user_keywords=unique(user_keywords); % now we can run through each document and count the frequency of each % word. I'm guessing you have code written to do this; if not, I can try to help you further.
By the way, using filter will often give you a phase shift. It's more common to use filtfilt(), which runs both forward and backward. Otherwise sharp points will be shifted a bit.
Why doesn't it work. FedbatchFermenterModel(t,x,u,d,par) Does return a singular value, right?
"Unexpected bracket/parenthesis" error message displayed. I am trying to declare global the parameters of FedbatchFermenterModel and see if it works.
This way isn't really algorithmically optimal; I would keep my "dictionary" sorted by word length, keep a hash of the locations of each word length, and then for each word in the paragraph, check the word length and then you only have to compare it to words of the same length. But--if you want to keep doing it, matlab's strcmp can compare every string in one list to every string in another. Of course, the problem is--how do you do this quickly? The best way to utilize Matlab's speed is to just use what's fastest, e.g. let Matlab do the iteration under the hood, and that's done by vectorization. So how can you have matlab compare everything in list 1 to everything in list 2? Let's pretend we're comparing to vectors A and B of different sizes to find out where we have equality: A = [1 2 3 4]; B = [2 5 6]; To do this in one step, we can use a little trick. Let's flip B sideways, and then replicate each vector out so it's the same width and height as the other: A = [1 2 3 4; 1 2 3 4; 1 2 3 4]; B = [2 2 2 2; 5 5 5 5; 6 6 6 6]; Whatch now what happens when we do A - B: &gt;&gt; A - B ans = -1 0 1 2 -4 -3 -2 -1 -5 -4 -3 -2 Note that there's only one location where A(i,j)==B(i,j), location (1,2). This tells us, of course, than element #1 in array B is equal to element #2 in array B. If there were many of these, we could simply do the following: [I,J]=find(A-B==0); And this would give us a list of all locations where the B(I) == A(J). So, now we can just use strcmp! Let's say we have a dictionary and a paragraph: dictionary = {'animal', 'barrel', 'eating', 'giraffe', 'I', 'like', 'zebra'}; paragraph = {'I', 'like', 'eating', 'animals'}; We can do what we did before to replicate each out: A=repmat(dictionary,length(paragraph),1); B=repmat(paragraph',1,length(dictionary)); % note the transpose of paragraph!! bad_matches = ~strcmp(A,B); Note that we're finding places where they match; you could just as easily find places where they don't match. Also, since we only care about what in paragraph matches what's in dictionary, we only need to look along one direction of our matrix. bad_matches ans = ans = 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 We only care about which rows contain all ones, which means that the word in paragraph didn't match ANY words in dictionary. So we can use the 'all' command along the 2nd dimension here: bad_locs=all(bad_matches,2)' bad_locs = 0 0 0 1 This tells us that our 4th word was bad. What was wrong? If you look closely, the dictionary contains 'animal', but the paragraph included 'animals.' Hope this helps.
You really don't need to use trapz, since bins aren't trapezoids, they're rectangular. One quick question--are you trying to normalize the area under the histogram, or the values in the histogram? The former doesn't really make sense, since the concept of "bar width" is dependent on the thing that you're measuring. For example, if you made a histogram of the number of sheep, bears, and ogres in your backyard, then the "x" value doesn't have any meaning at all. But--to quickly answer your question how to normalize a histogram, it's incredibly easy: n = hist(x); n = n./sum(n); If, for some reason, you were also taking into account bin size, then you can also divide by your bin width: n = hist(bins, bin_centers); bin_width=mean(diff(bin_centers)); n=n./(sum(n)*bin_width); That's all you need. You can do fancy things with your histogram if you want (specify bins, etc.), but normalizing a histogram just means setting the sum of the counts to unity.
Ok, this makes tons of sense! I just spent 10 minutes editing my code and it works! Thank you so much for the help! I would have ended up spending a couple of hours trying to figure it out without the help. One last part I'm not sure about is how to store the output from my function. I'm supposed to do something like: MyData=lab(A) and then after I enter the keywords it displays the result AND saves it as MyData. I think I understand how to save the output within my function using the 'save' command but how would I retrieve user input on what the file name should be? From what you've said and what I have done it seems that Matlab has trouble with words/letters and you have to manipulate the code so that you're working with numbers instead.
Hey, thanks for the help! I was able to get my code working once I understood how strcmp works! I should definitely incorporate the message to tell a user if the word they entered is not within the list of accepted keywords. I don't think it matters in my code if the same word is entered multiple times because the way I did it if strcmp returns a one (meaning that word is a keyword) then it sets the kth row in my vector to a 1 to show that it is a word being searched for. So if the word is entered multiple times it won't matter because that row is already a 1. I did already have the code written for frequency and listing the results in descending order. I knew that code already worked so I figured it would be confusing if I included it into this post. If you'd like to see how my code ended up (if you're curious) I'd be glad to share it! I think I used approximately the same method you did with just a few minor differences. My code might be a bit messier and not fully simplified because I'm still trying to get the hang of Matlab coding! : - D
If it has only one output, what /u/darkscout wrote should work. Another way to approach this is with a function handle. Send the function and its inputs into backEulerfedbatchSystem() along with the other inputs. Then, once inside, execute the function: function dxdt = FedbatchFermenterModel(t,x,u,d,par) ... end %function and then function [t,y]= backEulerfedbatchSystem(FFM,t,x,u,d,par,,drhs,x0,t0,tf,n) FFM_Value = FFM(t,x,u,d,par); % do your other stuff here. ... end %function Then, when you call backEuler..., use this: backEulerfedbatchSystem(@FedbatchFermenterModel, t, x, u, d, par, drhs, x0, t0, tf, n) The "@" symbold indicates that you're sending in a function handle. Think of it as kind of like a pointer.
Matlab save is weird, slow, and not very good. Using input as an example. Fname=input('please enter filename with single quotes ') save(Fname, 'MyData') So what Matlab is going to do is look for the variable named MyData (so you need the ' ') and save it as the string stored in Fname. I think it also works to use something like. save([Fname,'.txt'], 'MyData') if you want it saved as a .txt. But you might also need to specify the file format. I don't remember. I personally just use xlswrite it's pretty dynamic and doesn't use the weird ' ' thing that save does. So in xlswrite it would be xlswrte([Fname,'.xls'],MyData) But only if my data is a 2-d matrix, if it's not you need to collapse it to a 2-d matrix or shit will hit the fan. But I think it can handle a cell matrix pretty easily. Let me know if you have any other questions.
Are you defining q=1:10 before the function? Also, save the function file to the same folder, and the file MUST have the same name as the function.
The code runs as is. The Q is defined before the function. It just spits out the optimum value for the last value of Q(I tested and confirmed this by comparing the answer given when changing Q=1 and Q=10)
You can get away with using dir, so if you are in the directory containing the bitmaps: d=dir('*.bmp'); Then you have the name in a string as d(i).name. This will remove the need for the extra excel file.
Sorry I must of copied my code at a bad point lol. I have everything correct as far as the Q/q and y/j. I'm sorry I didn't want to post every bit of the code. My function is called upon as an input in running the golden search code. I do have the initial guess as an input. Ya know what I will just post the whole current thing. 
going to try it right now, thanks! 
Thanks for your help btw :) The code does work though, its just not doing everything I need. I need it to run a loop to calculate different optimal values of x for a range of Qs and then save these values. I know I need a loop for the Q = 1:10 but I do not know where to put it nor how to do it correctly.
Hard to read your stuff, so I'll just write it as I would do it: % plot a histogram: x = randn(1e6,1); [counts,ctrs] = hist(x,1e3); freqs = counts / sum(counts); bar(ctrs,freqs) %plot a gaussian pdf mean_x = mean(x); var_x = var(x); p = 1/sqrt(2*pi*var_x)*exp(-0.5*(ctrs-mean_x).^2/var_x); hold on plot(ctrs,p/sum(p),'y-','linewidth',3) The choices of 1e6 and 1e3 are to get a large enough sample and fine enough binning to make it look good: [http://imgur.com/pbW3KG2](http://imgur.com/pbW3KG2)
You need to use trapz to get properly normalised histogram to compare with pdf: [nh, xh] = hist(x); bar(xh,nh/trapz(xh,nh)); hold on plot(xh, pdf); Another problem with your version is that you are using fk (the counts) as the x axis for the pdf. 
thanks for this -- !
I just noticed that when you plot(rand(5,2)'), it puts all the data points in the first row (of the transposed matrix) at x=1, and all the data on the second row at x=2. Why is this the expected behavior? edit: this solves it: data=rand(5,2); plot([data(:,1)' ;NaN*ones(1,5)], [data(:,2)'; NaN*ones(5,1)'],'x','markersize',10,'linewidth',3)
If you need this to be called within Fedbatch..., the way that /u/darkscout should work. Otherwise, you can just separate the calls: FFM_output = FedbatchFermenterModel(t,x,u,d,par); backEulerfedbatchSystem(FFM_output, drhs, x0, t0, tf, n); Still, I think it should work with the call to Fedbatch... "embedded" in the call to backEuler...
Pitch shifting while keeping the same length is a pretty complicated operation and there isn't a native matlab function to do it. You might be able to find some sample code on the web though.
ok, thank you
For each t, you can simply do this: sum(imGS &gt; t) ... to get the number of values in imGS that are greater than the current t. That is both faster and cleaner. You won't need the inner for loop with its if-else-statement. Edit: An edited/shortened version of your code: http://pastebin.com/Cw3Wge0R I wasn't able to actually test it because Matlab is not installed on this computer. Hope it works as intended.
Look up logical indexing - you can get rid of one or both of those for loops with it. For instance, this: Z = zeros(size(imGS)); % Make another array to fill up... for ii = 1:numel(imGS); if imGS(ii)&gt;t; Z(ii) = 1; else Z(ii) = 0; end end sum1 = sum(sum(Z)); can be simplified as: sum1 = sum( sum( imGS &gt; t ) );
Thanks to you two (filrrrn and Meltz014) for simplifying my code. It is important to be concise. Concerning the application of the formula/sum linked on imgur, is it properly done?
What are you pitch shifting? If you are shifting sine waves (singular or multiple) or triangular etc, then it should be relatively trivial to reconstruct the desired signal (e.g. to halve the pitch, crop off the second half of the data and then play at half the sample rate Fs). To increase the pitch and retain the length is more complicated, but still possible. If you are trying to pitch shift something more complicated such as speech, then as /u/cantquitreddit says, this is not an easy thing to do.
I agree. the "embedded" call is really attractive but I get an error message (unexpected parenthesis) Could it be because the output of Fedbatch... is a vector?
There are a variety of methods for doing this, but as another poster said, they are pretty complicated, and your choice of method will depend on the desired characteristics of the output signal. If you want something that "just works," you might want to try using Audacity or digital audio workstation (DAW) software e.g. Ableton. If you want something sort of midway between math-heavy tools like MATLAB and music-focused software like DAWs, you might like to try PureData or Max/MSP, both of which have a number of pitch shifting plugins online.
Well it looks like your outer loop should be t = 0:255, correct?
I don't know anything about the topic and therefore don't know whether you are using the correct formula. But what you did does indeed seem to be the proper translation of the formula you linked to. I find 1/n easier to read than n\^-1, though: ATM = 1/255 * 1/numel(imGS) * sum Also, your loop starts with t=1 but the formula says t should start with 0. Glad I could help.
Now I am changing the way I go about it. I am going to try and use a new file to call the golden section search file for a range of Qs. 
Thanks. I figured it out but your code is much more beautiful.
Thanks. Quick question. Why use variance instead of std?
If you don't give X values to the plot() function, Matlab assumings x = 1...n, where n is the number of data points. In your case, you're trying to plot a 2x5 matrix (row x column), which means five lines, each of which has two points. Thus Matlab automatically generates X = 1:2, the indices of the vectors being plotted.
So I'm completely unfamiliar with your area of research, but I'll try to help anyway. It sounds like you have the following: Buzzards Bay: ------------------------------------------ Block Island: ---- ---- ----- --- Where dashes are data--is that correct? And you want to essentially fill in the gaps? If this is the case, here's what your data might look like: buzzard_timestamps * 1xN vector of timestamps for buzzard's bay data. buzzard_data * 1xN vector of corresponding wind speeds for buzzar'ds bay block_timestamps * 1xM vector of timestamps for Block Island. vector of broken-up timestamps block_data * 1xM vector of corresponding windspeeds for Block Island Where M &lt; N. Now you have to decide how you want to fill in the gaps. Do you want to just take the data from buzzard and insert it into block, do you want to do that and then smooth the edges, or do you want to somehow take buzzard data and filter it somehow so it's statistically similar to the block data, and connect the points? If we're in the right direction, we can take it from here.
The quiver() command will do this, though it can be tricky.
 L = linspace(-5,5,50); W = L; [x,y] = meshgrid(L,W); u = zeros(size(x)); v = zeros(size(x)); for i = 1:numel(x) u(i) = sin(x(i)); v(i) = cos(y(i)); end quiver(x,y,u,v); figure(gcf) xlabel('x') ylabel('y') axis tight equal;
I figured it out thanks all for looking
Thanks
I don't have MATLAB in front of me but in most languages, a logical statement should work with a list, so maybe making a list of (2001, 2002, 2003... 2008) and saying data_2m.year==list would work? Also if your data only has 2001-2008 data, you could just cut out the statement (data_2m.year==2001).
Thanks for the quick response, but I have tried that. It says matrix dimensions do not agree. There are also years other than 2001-2008.
Thanks. That worked. The isfinite is because some of the data is NaN(not a number). Without it matlab would get mad at me.
basically this... Buzzards Bay(BB): --------------------------- Block Island(BI): ____________-----__________ I want to correlate BB with BI and create wind speeds for the empty data based on the correlation between the aligned data. The aligned data have the same timestamps, but obviously different wind speeds (though they should be fairly similar). The new data may be based on the slope/fit of the BB long time series of data, but I'm not sure how to apply that to the known BI data for the empty spaces. Thanks for your response! 
if your document (data file) is tab separated you can use tdfread .... as in tdfread('2m.mat') ... top of document should be the shorthands you want to use for the names of the vectors, and nothing else, everything tab separated ...
I'm making some assumptions about your data setup and will add a disclaimer that this isn't the most versatile code, but this, I believe, does what you want. Sometimes you have to remove the data from the data structure in order to use the pretty, clean vectorized MATLAB functionality. Also, if you have the Statistics Toolbox, check out the command **grpstats().** This example is hard-coded for your exact problem definition and (I think) uses only core MATLAB functions. %% Make some fake data like I think you're working with data_2m = struct; count = 0; for y = 2000:2012 for m = 1:12 for d = 1:7 count = count+1; data_2m(count).year = y; data_2m(count).month = m; data_2m(count).T = 50+randi(50); end end end %% Filter out the data in our years and month of interest. YearsICareAbout = 2001:2008; YearsIndex = ismember(vertcat(data_2m.year), YearsICareAbout); MonthsIndex = (vertcat(data_2m.month)==8); data_new = data_2m(YearsIndex&amp;MonthsIndex); %% Now we have to take the mean of the temperatures in August of every year % % Use a for loop TempMeans = []; for y = YearsICareAbout TempMeans = [TempMeans; [y, mean([data_new([data_new.year]==y).T])]]; end %% A fancy way Y = [data_new.year]; T = [data_new.T]; TempMeans2 = [YearsICareAbout(:), accumarray(Y(:)-2000, T(:), [], @mean)]; 
consider using isnan? also, to avoid for loops (if you care), this does it in one line: mean(data_2m.T(data_2m.year &gt; 2000 &amp; data_2m.year&lt;2009 &amp; data_2m.month == 8 &amp; ~isnan(data_2m.T)));
Question: Why do you have a for loop inside a while loop? I am pretty sure you don't need the for loop there as you could integrate it to the while loop without the need of making the for loop.
You mean you need a weibull function? Edit - If A is your x-axis and B is your y-values, then there will be a function that maps x to y. You can't take a given vector and plot it into a required "shape". x needs to be mapped to y via a weibull function. Do you have a weibull function written? If not, you can use the MATLAB function - y = wblcdf(x,a,b); where x is your input vector, and a and b are your scaling and shape parameters respectively.
Can't really do it in one line. But you can do: XY = [Structure.Position]; X = XY(1:2:end);
Huh? Are you saying you have an array of structures? As you can see, I assigned a matrix of size (5,2) to blah, which is an array of 5 1x2 position vectors. If you have an array of structures you need to address each structure too. So test(1).blah, test(2).blah, etc ..
You need to check the "help" for that function.
It would help if you described where exactly you are stuck on. We are not here to just solve the homework problems for you.
Yeah... I was hoping to get away with it without resorting to a loop.
In the equation for Normal distribution, std^2 is used. Variance equal to standard deviation squared, so it's faster to compute variance and use that in the calculation instead.
We don't do homework help. Get lost.
Amplitude modulation is multiplying the message signal and the carrier signal in the time domain, or convolving them in the frequency domain. You're multiplying them in the frequency domain and screwing it up. To demodulate the signal, you multiply the modulated carrier by the same carrier, leaving you with y\*carrier^2 and then you lowpass filter it to remove the higher-than-baseband portions of the signal. There are many ways to do this in Matlab.
probably the integral from 0 to x of that distribution...
Would i include that in the loop or add it afterwards? Just because I don't have a printer around me to test it out. 
put the semicolons after your `mean` and `std` function calls, then put the `fprint` line right before the `end` Fprint prints to the screen, not the printer, by default.
Or, in probability terms: OUTPUT = Prob(x&lt;=INPUT)
Why not test(:).blah(:,1)?
You're right, it may not work because you have two colon operators. At the very least try playing around with the syntax. I don't know myself until I fiddle around with it in the command line.
And if I call the function in this way for a = 1:6; K_New(a) = GetKValues(305000,320,a,X(a),Y(a)); end I get unacceptable answers. However if I enter through the GUI with the proper values I get the correct ones :(
Maybe you can let GetKValues be a function with 4 inputs, namely p, T, component_numbers, and i. Then put x and y into the body of the function as vectors and use x(i) and y(i). I'm half-guessing as to what you mean, so forgive me if what I said is totally wrong for your application.
So if you type GetKValues(30500,320,1,X(1),Y(1)) into the command window, you get exactly 1 number and it's what it should be?
I get 1 number. The number is acceptable. If I type GetKValues into the command window this is what occurs. Pressure? Temperature? Number of Components? C Enter Component 1 Enter Composition of 1 in liquid Enter Composition of 2 in vapor .... until component C with composition C in liquid and vapor
You are correct, it doesn't work. You cannot do it in one line, but you can do it in two. See my comment.
I swear its impossible. I need a way to input the variables into the GUI I believe.
Thanks. So the amplitude modulated signal should be: ampmod=(note) .* (sin(2*pi*freq*t))? This is still not plotting. It takes octave 5 minutes to put up the figure, but it's blank
Er, if C, say = 4, wouldnt you need x(1:4) and same for y?
Try lowering the sampling frequency to a value ~2-5 times that of the carrier frequency. 
This does not actually send anything to a printer. It 'prints' to the console in Matlab (i.e. it outputs a string).
This looks right to me based on the problem statement. I'm interested to see if it works for OP.
No idea if you can easily do this. But having done single frame image processing in Matlab, I would break the avi into frames and then load the frames in and then run some form of correlation routine. Whichever is appropriate to get a power spectrum of matching your image. If the power exceeds a threshold then declare the image present and record the frame and location. You might need to do some filtering of you data first and think about how you want to store your image data. Ie hsv rbg etc
Just do a "doc videoReader". Basically, you can do something like this: videoObj = VideoReader('myMovie.avi'); frameRate = videoObj.FrameRate; tagged_frames=false(1,videoObj.NumberOfFrames); coords=zeros(2,videoObj,NumberOfFrames); for i = 1:videoObj.NumberOfFrames I=read(videoObj,i); % read the i'th frame into an image % Do image processing if(thing_appears(I)) tagged_frames(i)=true; coords(:,i) = get_coords_where_thing_appears(I); end end % get times of appearance locs=find(tagged_frames); dt=1/frameRate; times_of_appearance=dt*locs;
Can you provide the video file somehow so I can help debug? I would think it would keep reading the same frame (3600) over and over again, but I'm not exactly sure. It looks from the documentation that Matlab has a hard time determining the number of frames in a video with variable framerate, so it's possible something weird is going on. If you provide us with your video (how big is it) I can help you tackle the issue.
Hi, quick tip for posting code in reddit: put 4 spaces at the beginning to make it appear as code, and make sure you have an extra newline before you start. So like this: This has four spaces at the beginning!
Post it to mathworks file exchange too =)
I tried this and it still didn't work. Thanks for the attempted help though!
Can't believe you need help on this, it's fuckin easy as shit
Thanks a lot, It's working now!
Fucking simple stuff
Can't believe you don't understand Weibull shapes, they're fuckin simple, you phallus.
You shouldn't be coding if you don't know how to accomplish simple shit like this. Simple as that really.
Well sorry for being fairly new to Matlab, and wanting a little help for a personal project I'm doing for fun to improve my skills. Dick. Edit: After reading through your comment history, it's not a surprise you made a post like this, have fun using Reddit as an outlet for your pent up aggression from whatever's actually bothering you in real life.
Thanks for the reply, that's what I started doing but the video files are fairly large (like 30-40 minutes) and wasn't aware if there was a more efficient method. I suppose I'll use this though.
Why would you print the entire manual? 
This is Maths not English. There are no questions, mouthbreather.
Perhaps because paper is still higher resolution than a second monitor.
Yeah, that will make it easy to search for something specific.
I make tutorials for my freshman MATLAB course, with images included. Now I have to re-do the images. :(
try the "surf" function
I would think that the algorithms needed for sparse computations on a GPU would be pretty applicable to MICs. I was hoping that Mathwork's acquisition of Jacket Matlab would yield results for this release.
Without seeing the actual data it is hard to tell if this works but you could try to interpolate the data to a form which can be used with "contour"-function using "TriScatteredInterp".
You ask questions in English class, not Maths class, ignoramous.
If you haven't already, you should consider performing a more rigorous check for normality within the distribution. 
Check out Psychtoolbox: http://psychtoolbox.org/HomePage.
Hi I ended up using: triangulization = delaunay(x,y); trisurf(triangulization, x,y,T) Works nice!
Matlab FileExchange helps: **Making Surface Plots From Scatter Data** http://www.mathworks.com/matlabcentral/fileexchange/5105 Peeked into the code, looks like it does exactly your solution. Might generate prettier plots. Btw, if you're rotating your plot, try the following to make it less choppy: &gt;&gt; set(gcf,'Renderer','OpenGL');
shit firehose
I blocked this dude yesterday. Sorry about that. 
Depending on the staining, you might be able to use [color segmentation](http://www.mathworks.com/help/images/examples/color-based-segmentation-using-the-l-a-b-color-space.html). You could also look into [texture-based segmentation](http://www.mathworks.com/products/image/examples.html?file=/products/demos/shipping/images/ipextexturefilter.html). It really just depends on the nature of the images you're working with. You might also try over at /r/computervision.
What *are* you looking for, if not the built-in GUI capabilities in MATLAB? With MATLAB, you can very easily create full-screen interfaces with simple controls like pushbuttons and sliders. Here is a very, very basic one with 4 buttons: hf = figure('Units', 'Normalized', 'Position', [0 0 1 1]); hb1 = uicontrol('Style', 'pushbutton', 'Units', 'Normalized',... 'Position', [0 0.5 0.5 0.5], 'String', 'Button 1', ... 'Callback', @(h, e)msgbox('You picked #1'),... 'Parent', hf); hb2 = uicontrol('Style', 'pushbutton', 'Units', 'Normalized',... 'Position', [0.5 0 0.5 0.5], 'String', 'Button 2', ... 'Callback', @(h, e)msgbox('You picked #2'),... 'Parent', hf); hb3 = uicontrol('Style', 'pushbutton', 'Units', 'Normalized',... 'Position', [0 0 0.5 0.5], 'String', 'Button 3', ... 'Callback', @(h, e)msgbox('You picked #3'),... 'Parent', hf); hb4 = uicontrol('Style', 'pushbutton', 'Units', 'Normalized',... 'Position', [0.5 0.5 0.5 0.5], 'String', 'Button 4', ... 'Callback', @(h, e)msgbox('You picked #4'),... 'Parent', hf);
Which errors are you getting? Which line of your code is producing them?
I only just started this year! I haven't thought about that, actually. I haven't looked into how easy the images are to change, but I believe that they are. 
I mean. Really? It's not like this is /r/funny where stuff gets shoved off the front page after 20 seconds. http://www.reddit.com/r/matlab/comments/19z3zf/r2013a_is_here_your_thoughts/
Thanks for your reply once again. I have just a little confusion. Obviously the vectors are different lengths for BI and BB (BI doesn't include the zeros). Should I add NaN's or zeros for both the wind speeds and time so that the vectors align based on common dates of data recorded? *edit - I aligned the data and put zeros for all the points of missing BI data. As a result, those values turn into NaN's. Could this be related to the fact the the block_index shows zeros at all the missing data points, and 1's where there is data? *also - I don't have the 'corr' function in matlab so I used 'corrcoef' and just entered the r value from that when needed
Eventually you'll have to hand this off and whoever receives it will appreciate any effort making this easy. 
Can you paste your code? You can create an object to record audio but you have to make sure to activate it before it does anything. http://www.mathworks.com/help/matlab/ref/audiorecorder.html 
Cool, will try and fiddle with this. 
* MathWorks didn't acquire Jacket. * You should submit your feature request to MathWorks via the link provided in [the comments here](http://blog.accelereyes.com/blog/2012/12/12/exciting-updates-from-accelereyes/).
Thanks for the response. I'm using a single fluorescent stain. I'm not sure how well the color segmentation algorithm would handle it, but it seems like it'd be better choice than the texture-based segmentation you mentioned. Either way, thanks for both the links, regardless of which one I'll use! 
What's your major? Maybe you could gear something towards that
Use matlab to cipher / decipher messages using a simple encryption method. Go to your library and check out a book called "The Code Book" by Singh... It's sort of a history of cryptography thru the ages. I recommend coding something similar to the method that Mary queen of scots employed. (Shifting alphabets with a "key" --typically a passage from a book.)
Nowhere in this post does it ask anyone to do anything for him. It sounds like he's just looking for a recommendation for a project that is reasonable for an introductory class.
What kind of class is it? What grade level? One really awesome thing you can do with matlab is use the fft function to identify notes. Use audiorecorder to record a segment of audio data from a microphone. Then, take the fft of every 1/8th of a second of data, then compare the frequency data in the fft of the segments to the frequencies of known notes (like 440.0 for A, 256.0 for C, etc), and output which note is dominant for each segment. The end goal is a music 'recognizer' where you can hum or sing or play an instrument into the microphone, then matlab will figure out which notes they are and print them. For bonus, generate a pure sine wave for each segment from the recognized notes and play it back! This sounds complicated, but its less than 30 lines really, and is super neat.
My major is mechanical engineering. 
another thing you can do with the fft function is propagate a light wave through free space using fourier optics. I did this recently but the theory might be hard to grasp for someone not into that branch. It was about 30 lines of code. http://i.imgur.com/YtUZsai.png
* [Effective today, AccelerEyes will discontinue new Jacket product sales. Future GPU computing updates will be available in MathWorks’ products, providing a path to ease the transition for Jacket customers.](http://blog.accelereyes.com/blog/2012/12/12/exciting-updates-from-accelereyes/) * I've been interviewed (phone and email) by Mathworks developers since last summer specifically about sparse matrices and GPUs. 
It never showed up (not even in new), so I thought it got deleted by the mods
id do an engine simulation. where the user can edit certain variables (that you choose to show the user how variables like gas intake, cylinder size, and material density affects things like torque, rpm, and things of that matter) good luck, hope to see your code once its written
I can't say any more about it, but trust me, MathWorks *did not* acquire AccelerEyes or Jacket.
You're right, *acquire* isn't the best word for it. I meant *acquire* in the non-technical sense, ie "After visiting the museum, I had acquired a new sense of patriotism..." *Partnered with* would have been a better term to go with.
Plus this attitude is just arrogant. Not everybody has a mentor to coach their matlab skills. Plenty of times all people need is just a hint. If they are obviously asking for homework help you point them in the right direction, not give them the answer. 'GTFO, no homework help!' means you are simply an asshole.
Have you tried a simple thresholding?
I remember having the same project for my matlab class. I ended up making a GUI piano keyboard that could basically function as a synthesizer. Then I got bored and added the ability to change octaves, waveforms (square, sawtooth, etc), and synching key presses to commands in the program. Edit - There's also the good old Sudoku solver, if that wasn't already a project for you.
Just realized I already had some NaN's deep in my BB data which was throwing everything off. This worked perfectly. I truly appreciate your response and time.
Have you verified that your microphone is working properly? We've all done silly things like that.
I'm a bit confused about your goal. Can you explain a bit more?
Oke, but instead of a msgbox, I want a variable to change. How do I do that? I've tried ..., 'Callback', @(h,e)changevar(input),... Where changevar is an internally defined function that sets var to input, however, for some reason that doesn't register. Any ideas?
Here, you're going to have to learn about [Creating and Running a Programmatic GUI](http://www.mathworks.com/help/matlab/creating_guis/creating-and-running-a-programmatic-gui.html). More specifically, you'll need to know how to [write code for callbacks](http://www.mathworks.com/help/matlab/creating_guis/writing-code-for-callbacks.html).
It's not actually a mic. It's an auxiliary male-to-male cable plugged into my iPhone. All of the pieces work. And actually it all started working without explanation last night. 
Well that's weird. Glad we could help?
Yup I got it all figured out by doing what you said with the time vector. Unfortunately, my University issued Matlab didn't come with the stats toolbox. It's pretty frustrating considering how often I need to find alternatives for certain functions. Oh well Thanks again for your help.
Why not just generate 4 random variables? Something along the lines of: a = floor(2*rand(1)); b = floor(1 + 2*rand(1)); c = floor(2*rand(1)); d = floor(2*rand(1)); If each is uniformly distributed, then isn't the likelihood of any combination equal? EDIT: formatting - all the **'s made everything *italics* :)
Ah, I see. In my line of work, I do Monte-Carlo simulation on the order of thousands of samples, so this is not something I think of daily ;) Thanks for the response!
Write it in LaTeX (or LyX, etc...), and then just swap out the image files.
Hi-- If you're dynamically setting the Callback function of a graphics object, you can indeed pass it arguments, but with the following syntax: set(hObject,'Callback',{@callback_name,var1,var2,var3...}); Note that many callbacks have a few variables in front, so you might want to play a bit to debug. Most button objects, for example, have an automatic two arguments (hObject, the mouse pointer, and events, which carries some information about the nature of the click), and then your var1 will start. So, for example, the button press callback that you personally define will look something like this: function callback_name(hObject,events,var1,var2,var3...) ...or something similar.
Swapping the images isn't hard, it's the fact that I have to go and retake the images. 
Y = fft(X,[],3) will give you the fft in one go as long as your computer doesn't choke on your dataset. You could get the values for the power spectrum in another line of code, but I am unsure about how to plot the result in one go. 
If you don't mind doing something not-amazingly-useful-for-society but good for sharpening your skills overall, http://projecteuler.net/ is fun. 
What i would do is place the call to the plotting function in a for loop from 1: length(X). Use hold on to plot to the same axes, or if you call h= axes at the beginning, you can plot to the axes defined by h. Use set(gco) to change line properties. 
I like this approach because it doesn't require NaN entries
I am not understanding. How is it that you have a temperature field without knowing the x,y locations on that field? Like, how big is your temperature matrix?
Thanks so much for the help guys! Doyle think you could expand a little on how to use cell arrays?
If you have any of the toolboxes, they can be fun to mess around with. One of my freshman students interfaced with a webcam and could track the motion of an object real time using image processing. Other students have used it to make an AI for a board game such as connect four or minesweeper. It really depends on your experience though. Find a problem or puzzle that interests you and then try using MATLAB to solve it.
http://www.mathworks.com/help/matlab/ref/cell.html Even after using Matlab in many courses, I still find it useful to look at the documentation, since it's easy to forget. (: So, let's say you wanted to store your encoding. I would do something like: A = cell(12, 1); A{0} = [0 0 0 1 1 0 1]; A{1} = [0 0 1 1 0 0 1]; And so on. Now, note that cell arrays are different in that a) you address them with {i} curly braces to get/set information, and b) you can put any vectors in them of any size. You could do A{12} = [0 1 0 1 0]; And it wouldn't cry. In fact, you could put more than just vectors in your cell array--think of them as arrays from Java or C; they can be formed of any Object with a capital "O". So, you could have a cell-array of matrices, or a cell-array of structs, whatever. Good luck! 
Lots :P What are you wanting to do?
Given that I have a matrix defined by m = [ x1 y1 ; x2 y2] so plotting and translations ect 
Well, if you are interested in complex numbers (i.e. phasors), keep in mind that MATLAB, being a language for math, actually handles them directly. Like, you can say: fuck = 5.0 - 2.5i; And this will be a complex variable. There are a lot of functions that are capable of handling such variables.
Use imagesc(t0) rather than image(t0) - this will do the color data map scaling for you.
True, or one could tell image to use scaled CDataMapping with the same result: image(t0, 'CDataMapping', 'scaled')
Yeah that's what I was thinking of doing, but I'm trying to avoid the for loops as much as possible because of indexing problems ans keeping track of my variables. I have two sets of 10 of these matrices and need to make 20 of these plots. If such a function isn't available online though the for loops would probably be easier than rewriting the function I have to deal with matrices
A lot of the plot functions in MATLAB already support multiple-column inputs: plot(randn(10)) area(rand(10)) What is the function that you're currently using to plot? Open it up and look inside. One option would be to move your **for** loop inside the function, thus hiding it from you. If you *really* want to avoid for loops, look into the plotting support for multiple column data like I showed above. Either way, I recommend modifying your current function rather than try to find another or build your own completely from scratch.
Just to follow-up on why the matrix is a bit better: You can access a single row easily: x = table(5,:); You can access multiple rows super easily: x = table([5 7],:); x = 0 1 0 0 0 1 1 0 1 0 1 1 1 1 You can also concatenate those into a single row by transposing and using reshape: reshape(x',1,[]); x = 0 1 0 0 0 1 1 0 1 0 1 1 1 1 Finally, it's really easy to get rid of the NaN's afterwards: x = 1 0 1 0 0 0 0 nan 0 1 0 1 0 nan x(isnan(x))=[] x = 1 0 1 0 0 0 0 0 1 0 1 0
Here's what I use for this exact purpose: function [domain, power] = get_fft(data, frequency, generate_plot, plot_mean) %-------------------------------------------------------------------------- % get_fft.m - Fast Fourier Transform on a data matrix % % Usage: [domain, power] = get_fft(data, frequency, generate_plot, ... % plot_mean) % Input: data * matrix of row-vectors of input data % frequency * sampling frequency of input data % generate_plot (optional)* true or false % plot_mean (optional) * plots mean FFT as red line % Output: domain * frequency domain % power * power of FFT coefficients % % Written by Marshall Crumiller % Last Updated 1/22/08 %-------------------------------------------------------------------------- Fs = frequency; % sampling frequency L = size(data,2); % length NFFT = 2^nextpow2(L); % next power of 2 from length of Y Y = abs(fft(data',NFFT)/L)'; domain = Fs/2 * linspace(0,1,NFFT/2+1); % frequency domain power = 2*Y(:,1:NFFT/2+1); if(exist('generate_plot','var') &amp;&amp; generate_plot) if(isempty(get(0,'currentfigure'))) scrsz = get(0,'ScreenSize'); width = scrsz(3)*.9; height = scrsz(4)*.9; left=(scrsz(3)-width)*.5; bot=(scrsz(4)-height)*.5; figure('outerposition',[left bot width height]); end hold on; plot(domain(2:end),power(:,2:end),'linesmooth','on'); title('Single-Sided Amplitude Spectrum','fontsize',12,'fontweight','bold'); xlabel('Frequency (Hz)'); ylabel('Power'); if(exist('plot_mean','var') &amp;&amp; plot_mean) hold on; mean_Y = mean(Y,1); h2=plot(domain,2*mean_Y(1:NFFT/2+1),'k','linewidth',2,'linesmooth','on'); legend(h2,'mean'); end end set(gca,'xscale','log','yscale','log','xlim',[domain(1) domain(end)]); grid on;
Thank you very much. I don't have time to try it out right now, but it looks like what I need. Just to confirm, I input the matrix and it will treat each row as a time series and plot as many spectra as there are rows right? Briefly looking through the script I don't see where that happens, but I can probably figure it out working with it later. Ill get back to you when I try it out.
Exactly. You can see the "plot(domain(2:end),power(:,2:end),'linesmooth','on'); I might have added that 2:end at some point, so maybe just get rid of the indexing and change it to this: plot(domain,power,'linesmooth','on'); FFT() can take matrix input; this is called on line 4 ("Y = abs..."). The 2nd to last line puts everything on a log-log scale. You can edit this at will. I think I might have put in the domain(2:end) because a frequency of 0Hz can't be expressed on a logarithmic scale.
Using the matrix I've been able to account for all the encoded integer values of 0 to 12 but am now struggling on how to account for the negative values. Do you think you would be able to clarify that up as well? Thanks for the help, once again
http://www.mathworks.com/help/matlab/ref/quiver.html
using: c = 5 + 5i; quiver(real(c),imag(c)); I get an arrow from (1,1) to (5.5,5.5,), what am I doing wrong? Thank you Mick
Biologist matlabber here. This is also a common problem when looking at neurons. Is this a slice from a z-stack? There might be something written for Image J that'll take care of this for you. If there isn't, I'd threshold the green channel (which presumably is carrying your GFP signal) and then look for contiguous voxels. If it's really just a 2D image, then this is going to be pretty tricky. 
quiver3(0,0,0,2,3,5) will plot that example vector.
I would have suggested mapping a line segment, but I didn't know that existed. Matlab really does have a function for nearly everything to make life simple.
All subsystems run at all the steps. I guess I don't understand the question. You could use signal builder. If you want to test a bunch things you can use a from workspace/to workspace and run it in a forloop with 'sim' from the matlab command line. for reactantA=[0:.1:1] for reactantB=[0:.1:1] sim(myModel,[0 100]) end end Where reactantA and B are constant blocks. Then pull off the last 'from workspace' variable. You could also compile it to a windows application and run that using fromfile
**TLDR on top: I don't think FUNCTIONS exists or, if it does, its case is not all capitalized.** Please run this command: dir('..\..\TMD') My only thought is that FUNCTIONS is maybe Functions or functions instead. It seems like ..\..\TMD\ is being added OK so it's not like **addpath** has gone crazy. Some advice: use the **fullfile** command when you're creating or appending paths and filenames so that you don't get duplicate '\\' or the slash in the wrong direction: addpath(fullfile(dir_tmd, '\FUNCTIONS\')); Also, on your TEST 1, if you say "do something on ..\..\TMD\FUNCTIONS," MATLAB knows where you currently are (absolute path from c:\...) and thus can figure out the absolute path of ..\..\TMD\FUNCTIONS.
Assuming you have the image processing toolbox, I would look up the "blobs" demo. It walks you through filtering, thresholding and object counting. BUT, like mamaBiskothu said, what you're asking is a step beyond basic image processing -- you want to combine blobs depending on shape, proximity, and orientation. This is complicated stuff. Now, I am by no means an image processing expert. But the first thing that pops in my mind would be to (1) find all the individual blobs. (2) Check the distances between blobs. (3) If there is a distance less than a threshold that you've determined, (4) Do a linear regression of the x-y points in each of the two nearby blobs to get a rough approximation of the orientation of the blob, and finally (5) if the slopes of each regression are similar enough, then treat both blobs as one. This of course would require significant work to get right. And frankly, I don't even think it would work in the case you showed, because the left-most blob looks roughly circular, so a regression through its points probably won't turn up a slope similar to the other blob.
Thank you for your reply The directory FUNCTIONS definitely exists :) (in capitalised form). The fullfile method seems to have worked, though - but I've got another error now!! it apparently now finds FUNCTIONS but not DATA (another directory on the same level as FUNCTIONS)... :) - using the fullfile method there too. dir_tmd=(['..\..\TMD']); addpath( dir_tmd ); addpath(fullfile(dir_tmd, '\FUNCTIONS\')); Model=(fullfile(dir_tmd, '\DATA\Model_tpxo7.2')) Gives File ..\..\TMD\DATA\Model_tpxo7.2 does not exist filestructure... it's [right there](http://imgur.com/5NCdzpU) though &gt;.&lt; 
No. You don't 'add it earlier in code'. You go to the directory you want to add. Add it (pwd) then save the path. You run it once and it's saved for ever and always. Edit: &gt; At this point I need to tell it where the TMD directory is. No. Tell it where everything is from the beginning. Do you have any 'cd' commands anywhere in your code. I'd put money on you're 'cd' to a new directory and if I had to guess. C:\Users\Jenny\ When you do '..' it is not relative to the script it is relative to where YOU are. If you want to do it relative to the script you need to use: fileparts(mfilename('fullfile'))
Go into where you are calling this code. Type: pwd Go into the FUNCTIONS folder. Type pwd Let us know the results. Edit. Even better. Do this. fprintf('You are currently in: %s',pwd); dir_tmd=(['..\..\TMD']); addpath( dir_tmd ); addpath([ dir_tmd '\FUNCTIONS\']); 
&gt; No. You don't 'add it earlier in code'. You go to the directory you want to add. Add it (pwd) then save the path. You run it once and it's saved for ever and always. That's what I meant - this has been done initially in the code &gt; No. Tell it where everything is from the beginning. If I was writing this code I'd do that - but this isn't my code. I'm trying to adapt/run it. &gt; Do you have any 'cd' commands anywhere in your code. I'd put money on you're 'cd' to a new directory and if I had to guess. C:\Users\Jenny\ When you do '..' it is not relative to the script it is relative to where YOU are. I understand this concept - but I believe all the references are done from the current directory ie no cd commands &gt; If you want to do it relative to the script you need to use: fileparts(mfilename('fullfile')) So, by *relative to the script* do you mean *relative to the location of the script currently running*?
Thankyou for your help :) You are currently in: C:\Users\Jenny\Documents\MATLAB\make_input\code File ..\..\TMD\DATA\Model_tpxo7.2 does not exist File NOT found
&gt; So, by relative to the script do you mean relative to the location of the script currently running? Yes. If you have C:\MATLAB in your path and C:\MATLAB\awesome.m But you are in C:\PROJECT1\ and call awesome from the command window if you have anything '../../' in awesome.m it is relative to C:\PROJECT1'
Well, I'm not sure how to answer that for you... it is being shown inside [matlab](http://imgur.com/vQUANMn) though? 
FULL ERROR: You are currently in: C:\Users\Jenny\Documents\MATLAB\make_input\codewarning : yor latitude tooo low: mesh.geog(:,2) and Y &lt; 5 degN File ..\..\TMD\DATA\Model_tpxo7.2 does not exist File NOT found Undefined function or variable 'amp'. Error in A1_setup_model_files (line 250) [ierr,origin] = setup_spectral_tide64_da(elvfile,obc_nodes, amp, phase, start_run_date ,Model) ;
just a moment, I'll make a screencap.
Well Amp is not the same as amp. Matlab is case sensitive. And why are you CDing to the tmd directory? Why not just add the path that the function is in to your path? I hate to say it but what ever code you inherited or are forced to work with is a cluster fuck.
 sprintf If you want more than one line, use {}.
When did I say to use fprintf? And it doesn't go in the plot function anyway. It goes in title/xlabel/ylabel command.
whoops I meant title
it is difficult to interpret - but thanks for letting me know about the case-sensitive thing, perhaps that's it? 
oooh thanks I'll give that a go
Oh god. That's it? Make the value IN SA0: SA0 and the value in AA0: AA0 Then make the display/scope blocks a 'to workspace' block. If you only care about the last data point then tell it to only save the last data point. Give me a few and I'll have something. Also, why did you make triggered subsystems? You can delete that. And it's a coding nuance that the running max should have something connected to the other input, even if it's just a constant 0. Personally I would use a unit delay and a max block with 2 inputs. edit: i=1; for SA0=[1:1:10 pi] for AA0=[e(1) 2^4 6*pi] clear maxProduction; sim('model') a(i,:)=[SA0 AA0 maxProduction]; i=i+1; end end Search for the max of a(:,3)
~~You're linspacing to an irrational number. 0.6 isn't 0.6.~~ You can either use round/round2 (file exchange). Or use something like uint8 to convert everything into an integer.
&gt;And 0.6*10+1 isn't 7. It's not? Is double precision really not enough to correctly evaluate this extremely simple expression that every $3 calculator gets right? And why does Matlab return exactly 7 when I evaluate the same expression in the command window. Not trying to yank your chain here, but it seems to me there's something else to this.
&gt; but it seems to me there's something else to this. Look up eps. There's not anything greatly more complex to it. It's come up at least 3-4 times in the last few months. If you really want to do this do 0:10 and divide by 10 in your other equation. 
I second this. sprintf() returns a string, which title will happily take as an input.
All right, I guess I don't know enough about how different data types work. As I've said, I'm pretty new to all of this. I'd still be interested to learn why Matlab returns different results for the same expression depending on if it's part of a script or entered in the command window. 
This is when it would be nice if Matlab had a `reduce()` function. Here's a quick-and-dirty version. function out = reduce(f, array, init) if (length(array) == 0) out = init; else out = reduce(f, array(2:end), f(init, array{1})); end end And using it for your problem, reduce(@intersect, A(2:end), A{1}) I only tested it in GNU Octave, which has more complete syntax for higher-order stuff like this, but I think it will work fine in Matlab, too. 
title(['Time Series with mu=', num2str(mui)])
Take away from this: you can chain strings together in a vector string3 = ['string1','and','string3'] = 'string1andstring3' knowing that, making custom titles is a piece of cake, and always use num2str(). Also, MATLAB recognises LaTeX commands as well. To actually print the symbol "mu", just do \mu in the string.
MATLAB was made for vectors. Have fun.
God no. num2str and the [] are a bastardization. sprintf is the best way to do it. You can set exactly what you want. There is a reason sprintf/fprintf has survived for so long from the C world. You only want 2 digits? '%.2f' You want exactly 10 spaces consumed '% 10.2f' (Works great when printing tables with fprintf. Want preceding zeros? '%010.2f' Want it left justified? '%-010.2f' doc fprintf And see everything it can do.
Hi I've used your advice and it's all working now. ;D I've made it into this: http://i.imgur.com/oItPB1L.png Just one last thing, have you got any idea how I can find the time at which the maximum occurs? Greetings!
In that case you're better off just writing it all to the workspace and doing a max() in matlab and fixing the max and index of time there. [prodMax,i]=max(prod) Also add a 'clock-&gt;workspace' set of blocks timeMax=time(i); There are also ways to do it in Simulink but it's way more trick. I'd use an if/then set of blocks. I'll whip something up before I head out for the day. Edit: I did it 2 different ways in Simulink. Here's the model I used: https://www.dropbox.com/s/korahv4jvci70ds/CurrentMaxwTime.mdl [Model picture.](http://i.imgur.com/2dpN4Ow.png) [Scope output.](http://i.imgur.com/hqC7uat.png) Top scope is from the top if/then model. The bottom scope is from the triggered subsystem model. If you notice the top line always follows the maximum value of RAND. And if you look in the display the 'max output time' is 17.08 which on the graphs is (drum roll) the time the max occurs. Note the trigger block has to be set to "States when enabling: **held**"."
you need to run ./matlab -desktop not ./matlab -glnx86
And then lock it to your sidebar so you don't need to run it from terminal every time.
I just tried that and it said ./matlab: 1: /usr/local/MATLAB/R2012a_Student/bin/util/oscheck.sh: /lib64/libc.so.6: not found --------------------------------------------------------------------------- Warning: Cannot locate Java Runtime Environment (JRE) . . . 1. Either a correct JRE was not available for redistribution when this release was shipped, in which case you should refer to the Release Notes for additional information about how to get it. 2. Or you have tried to use the MATLAB_JAVA environment variable to specify an alternate JRE, but MATLAB cannot find it. Please run 'matlab -n' to determine what value you are using for MATLAB_JAVA and fix accordingly. --------------------------------------------------------------------------- matlab: No MATLAB bin directory for this machine architecture. ARCH = glnxa64 
What version of Java are you using? Of it's not the official one Matlab is trekking you to set the version. 
type "java -version" in the terminal.
That message is essentially trying to tell you you cannot run it as 64 bit, which is the default if you do not specify it as -glnx86. Did you try running it as 'matlab -desktop -glnx86'? Can you show us the output of matlab -n -glnx86? 
I did. It's saved both in /usr/local/... and /home/george/...
then try the launcher from the /home/george/.../bin/
I've tried everything that's been suggested with both. 
woops, silly mistake. try ~$ sudo ln -s /lib/i386-linux-gnu/libc.so.6 /lib/libc.so.6
Ok. Nothing printed to the screen, which I'll assume is a good thing. Now what? 
now try running matlab again the same way you did before. cd /usr/local/MATLAB/R2012a_Student/bin sudo ./matlab -glnx86
OMG I LOVE YOU. It worked. Will you marry me? 
You can also modify it so that you don't have to run as sudo (it gets annoying after a while to have to re-enter your password every time you run the program) by doing this: ~$ sudo chmod a+x /usr/local/MATLAB/R2012a_Student/ edit: Thank you for the Reddit Gold =)
what arch are you running?
Not to be the guy that says 'did you google it'. But come on. It's the page of of hits. Hybrid-Electric Vehicle Model in Simulink Recorded Webinar: Hybrid Electric Vehicle Modeling and Simulation HYBRID ELECTRIC VEHICLE SIMULINK TOOLBOX 
What about it?
Depends how complex you want to get and what resources are available at your university. 
Wow. Thanks for all the help. I couldn't have asked for more. 
That is true, but that model doesn't give me the output I need. 
Well with as much information as you've given us It gives you exactly what you asked for. No model is going to give you 100% of what you ask for, you're probably going to have to do work.
Sounds like homework. Fuck off.
Add dots for element-by-element multiplication instead of matrix multiplication: `f = 180*pi*x1.^2 + 172*pi*x1.*x2`
What wasn't answered in doc sprintf or help sprintf ? &gt; If anyone could offer any help it would be much appreciated. I helped you by giving you the name of the function you should use. The sprintf help is less than a page long and has 6 examples. The doc is 2-3 pages and gives you instructions on how to do almost anything with sprintf.
I haven't thoroughly tested this but: mat = cell2mat(A); uni = unique(mat); remat = repmat(mat,length(uni),1); reuni = repmat(uni',1, length(mat)); intersection = uni(sum(reuni==remat,2) == length(A)) 
Can you post the code that you have? Also, what exactly are you looking for? I don't understand this: *"my problem is that I can't make the as a coeffecient and put it in a string. ex [0 0 0 1 1 1 1] would be 3B4A."*
Sorry I'm on my phone but so far I have a counter for each case, within a for loop and that would be the sum, the biggest thing I'd be looking for is probably how to put that count into a string.
OK I am going to start here assuming that you have properly computed the run length of each 0,1 sequence into a vector x, say: x = [1 2 3 2 1 2 3 2 1 4]; I am also going to assume that the length of x is divisible by 2. (Otherwise we could pad a zero on the end). I also assume that your output should be 1B2A3B2A....1B4A. First, I reshape x so that we have the pairs [1 2], [3 2], etc. more easily accessible: x2 = reshape(x,2,[]) x2 = 1 3 1 3 1 2 2 2 2 4 And then loop through and concatenate: w = []; for n = 1:size(x2,2) w = sprintf('%s%dB%dA', w, x2(1,n), x2(2,n)); end w = 1B2A3B2A1B2A3B2A1B4A Disclaimer: I'm sure that there are sexier ways to do this, but this one is straightforward and does the trick. If you had, say, a billion elements to x, avoiding for-loops might be a good idea.
I just wrote up a quick and pretty sexy version to do this without loops. Briefly, here's the code: function intersection = intersectAll(A) A=cellfun(@unique,A,'UniformOutput',false); X=horzcat(A{:}); [U,I]=unique(sort(X),'first'); value_count=diff([I length(X)+1]); intersection=U(value_count==length(A)); To quickly explain how it works: 1. Remove duplicates in each cell of A. 2. Combine all elements of A into a single list 3. Sort them 4. Find the index of the first occurrence of each value. 5. The difference between these indices tells us how many of each value there are. 6. Elements whose count is equal to the length of A implies that that element existed in every cell of A, and hence is in the intersection.
so here's a plot just to compare the new data. As you can see, BI appears to be an underestimate. The real BI data is greater than that of BB as shown around 250 and greater (I didn't specify the dates on the x-axis yet). How can I increase the BI data? This should increase the maxes as well as decrease the minimums I presume http://i.imgur.com/KF9h00v.png?1
Are you sure you're using randn() and not rand()? I find it suspicious that one vector is consistently greater than the other for such a long span.
I believe you're describing a least squares problem, which is solvable using linear regression. Look into this and let me know if that suits your needs.
Can you post the actual code? It looks like only positive noise is being added, whereas the noise should be drawn with mean 0.
The function is exp[-(d/hs)\^n] where d is a constant and hs and n are my unknown variables. Just had a look at [the fminsearch\(\) help](http://www.mathworks.com/help/matlab/ref/fminsearch.html) and it looks promising. Will I be able to use that one or will I need to get one of the toolboxes you mentioned? Thanks for your reply!
Thanks for your reply. I am only familiar with LS regression for linear functions. The one I need to fit is non-linear (sorry, should have mentioned that) and my understanding is that you can't use LS regression for that, right? (/u/agentq512's post seems to confirm this.)
You should be able to use fminsearch without any of the other toolboxes. [Here's an example](http://www.mathworks.com/help/matlab/math/example-curve-fitting-via-optimization.html)
You might be mistaking what "linear" in linear regression implies. if your function is something like y= B_0+B_1*x_1+B_2*x_2+b_3*x_1*x_2+B_4*x_1^2+B_5*x_2^2 , you can still use linear regression. All that is necessary that you are linear with respect to the *parameters* B_1, ... , B_5. All you need to do is preformat your data. If you just have x_1 and x_2 as your data, create x1^2, x2^2, x1*x2 columns from your data. Then perform linear regression as usual. What does your function actually look like?
fminsearch is pretty powerful. fminsearch(@(x) exp(-(1/x(1))^x(2)),[1 2]) (where d=1) That will make the minimum. Now if you're comparing it to data. You can make a 'cost' function. Where cost=sum((ActualData-exp(-(1/x(1))^x(2)))^2); That will sum up the cost and return the function with the minimum 'cost'
Great, thanks!
Well, no: linear regression won't work on this problem because it is not linear with respect to the parameters. 
That's what I thought. Thanks, though. (As I said, this is not my field. I am trying to help a friend who has no experience with Matlab.)
Link to Cody. They're simple short tasks that improve your understanding of both matlab functions and syntax. Plus looking at other creative ways people solve the problem is fun. I held a "lowest score" for a solution for 3 months. Kind of cool. Homework rule for me is: Ask a specific question. No matter how basic. "I need to make a vector to do x y z". Not "Hey, so this is due in 4 hours" then a link to the PDF.
fminsearch is a good choice for these types of functions. fmincon is also a viable option. I would caution that when you use fminsearch, take care what initial guess you give it. The result can be dependent on this guess, particularly if it's a BAD initial guess. If you don't have a good idea where to start, just take a few varied points and see where they end up.
Several things: Main error, look at the 2nd line in your function, you write xin(1:end-nlag); but you don't save that to a variable. Just writing this line doesn't trim the array down. try: if(nlag&gt;=0) x_in=find(isfinite(xin(1:end-nlag))); etc. 2nd, if you plan on using this function for other purposes, you might want to throw in more error checking to make sure the vectors are of the same length and have the right dimensions and are composed of numbers. Also, if there are errors in the array and not every entry is a number, length( find( isfinite(xin))) may not have the same length as the yin case, you should do an try-catch on that
Hmm, ok. Thanks. I already added the Cody link and I'll come up with some homework copy later. 
I'd like to see a "here is how you post code" entry somewhere. I wrote a little process for pasting in from the MATLAB editor. It was something like: * CONTROL-A (to select all) * TAB (to tab over 4 spaces) * CONTROL-C (to copy) * SHIFT-TAB (to un-tab) * (goes to reddit) * CONTROL-V (to paste in as formatted code) (yes, this is windows-centric as far as the key mappings go. It also assumes that they have the tab key in the MATLAB editor set to 4 spaces. This is easily modified in the preferences.) Also, I don't know how easy it is to do, but a "This question has been answered" tag might be nice to see on the main page. Kind of like /r/explainlikeimfive.
I agree with the "don't link your assignment PDF and expect us to solve it." bit. Perhaps it'd be nice to include a best practice format for help. Like: * what are you trying to do? * how would you approach this (pseudocode)? * what have you tried? (include your code thus far) * what error is it giving you? (preferably copied directly from the command window) 
You can use if-then, assert(), or validateattributes() statements, for instance: assert(all(size(x)==size(y)), 'X and Y are of different size'') or validateattributes(x, {'numeric'}) or if isnumeric(x) &amp; isnumeric(y) &amp; all(size(x)==size(y)) % something here end
This is my code if(nlag&gt;=0); x_in=find(isfinite(xin(1:end-nlag))); y_in=find(isfinite(yin(1+nlag:end))); %length(x_in) needs to equal length(y_in) lagcor=corrcoef(x_in,y_in); lag_corr=lagcor(1,2); else(nlag&lt;0); x_in=find(isfinite(xin(1-nlag:end))); y_in=find(isfinite(yin(1:end+nlag))); %length(x_in) needs to equal length(y_in) lagcor=corrcoef(x_in,y_in); lag_corr=lagcor(1,2); end What do you think would be the best way to make the length of x_in the same as the length of y_in
Your formatting is screwed - if you indent everything with 4 spaces it will be fine. From what I can read you have a 8x4 matrix neighbourhood from which you take values and compute the 8x1 vector W. You then take your result as the min of W. Your first port of call is: doc min Where you have: cycbest = min(W) You could also have [cycbest bestInd] = min(W); This will give you the minimal value in cycbest AND the corresponding element index in bestInd. x1,x2,x3, and x4 can then be set from neighbourhood(bestInd,:).
Check out [export_fig](http://www.mathworks.com/matlabcentral/fileexchange/23629-exportfig). It does a great job of exporting to pdf. Otherwise, I'd either suggest cropping the pdf or copying and pasting the data to excel and plotting it there (obviously not advisable if you have a ton of graphs to plot). 
Yes, you can set your figure's paper size, position on the paper, and other options with the 'set' command. Example: set(gcf,'PaperUnits','inches','Papersize',[Width Height]','PaperPositionMode','Auto', ...). Then set your figure to take up as much paper as you want. figure('Position',[X_start,Y_start,X_end,Y_end]) theres more options Im forgetting. Then just saveas(gcf,'FILENAME.pdf'). Putting them all together: figure('position',[100,100,800,1000]) set(gcf,'PaperPositionMode','auto') saveas(gcf,'FILE.pdf') Should give you about a full-page pdf export of your graph. You can use handles on the figure. If you make the figure smaller, itll export smaller. You might need a pdf printer installed for this to work (not sure, but might be native .pdf built into saveas). ***Edit: .pdf is a native format in matlab. http://www.mathworks.com/help/matlab/ref/saveas.html
Those key commands do not work on all platforms.
You can save eps with this command and later convert to PDF: print -depsc2 'filename.eps'
Or embed it straight in your LaTeX documents. I had documents that would write themselves with fprintf and print.
Oh Christ. gist.git.com
I have been using a file that someone posted on the Matlab file exchange site a while back called [eps2pdf](http://www.mathworks.com/matlabcentral/fileexchange/5782-eps2pdf) (click download submission for the file there). You create your graph, save as an eps, and then run the m-file to convert it to a pdf without all of the extra white space. It takes the extra step, but it has worked really well for me.
You can also do your regular plotting commands and then add 'print figure.jpg' or 'print figure.pdf' to the end of the list 
True, which is why I mentioned in my post that it was windows-centric. It's easily translated to the other standard key mappings from OSX and Linux installs.
check out `plot2svg` I find it produces better figures than saving as a pdf. Although it does create a fuck ton of clipping paths http://www.mathworks.com/matlabcentral/fileexchange/7401-scalable-vector-graphics-svg-export-of-figures
Have you thought about doing it this way using a COM interface, Dim MatLab As Object Dim Result As String Dim MReal(1, 3) As Double Dim MImag(1, 3) As Double MatLab = CreateObject("Matlab.Application") 'Calling MATLAB function from VB 'Assuming solve_bvp exists at specified location Result = MatLab.Execute("cd d:\matlab\work\bvp") Result = MatLab.Execute("solve_bvp") 'Executing other MATLAB commands Result = MatLab.Execute("surf(peaks)") Result = MatLab.Execute("a = [1 2 3 4; 5 6 7 8]") Result = MatLab.Execute("b = a + a ") 'Bring matrix b into VB program MatLab.GetFullMatrix("b", "base", MReal, MImag) [source](http://www.mathworks.com/help/matlab/matlab_external/call-a-matlab-function-from-visual-basic-net-client.html) 
The reason I wanted to use a compiled dll instead of a COM server was because I will be deploying my applications to third party individuals who will not have Matlab licences. Using the dll method allows me to distribute my code, the Matlab dlls and the Matlab Complier Runtime (which is free and doesn't need a licence)
That needs a video capture card, USB or otherwise. Wifi ip camera is much better. 
You are currently only modifying intensities of the color channels. Think this as multiplying color vector [r g b]' from left with a 3x3 transformation matrix [0.3 0 0;0 0.59 0;0 0 0.11] instead of a 1x3 transformation [0.3 0.59 0.11]. This should work: gray_combination = 0.3*X(:,:,1) + 0.59*X(:,:,2) + 0.11*X(:,:,3);
Thank you so much for your help, this has been a great function, but I'm running into one problem. If I call for the plot then it appears correctly with all ten spectra on one plot, but I cant sem to get the data out for all of the ten FFTs I've had it run. I'm expecting 10xX matrices out, like I put in, but I only get a 1xX matrix out. The plotting works fine, but I can't seem to get all of the FFT data out.
There are two output arguments: one is a list of the relevant frequencies, and the other is the power (amplitude) of the signal at that frequency. If you look at the function definition (first line of the program), it looks like this: function [domain, power] = get_fft(data, frequency, generate_plot, plot_mean) So you'd call it by saying this: [domain,power] = get_fft(data,100); ...if you have a 100Hz signal, for example. The resulting **domain** variable is a 1xN vector (with N = 2^nextpow2(length_of_data)-1 and the **power** variable will be a 10xN. You can plot the result with the following later if you want: loglog(domain,power'); Make sure to transpose power, since Matlab plots columns and not rows.
The easiest way is to use **imapplymatrix**. Here's some easy code: X = imread('photo2.jpg'); gray_coefs=[0.3 0.59 0.11]; X = imapplymatrix(gray_coefs,X); imagesc(X); colormap gray; The reason it's looking green is because Matlab's imagesc() function uses the default colormap, and scales values along the range of the **jet** colormap. Switch to colormap gray (see above code) to make it display properly.
Thanks for the quick reply, you're awesome. I figured it out actually. I was trying to shorten the output for a 10x(X-1) matrix and whatever I did had changed it to a 1xX matrix.
You mean an IP camera? I dont want to be limited to wifi areas and IP cameras tend to weight more and take more power.
Or maybe this could help, too. Not totally sure what you're looking for, though. t = 1:.1:2*pi; xt = sin(t); yt = cos(t); zt = sin(t); HANDLE = plot3(xt,yt,zt); set(HANDLE,'YDataSource','y','XDataSource','x','ZDataSource','z'); for n = 1:length(t) axis([-1 1 -1 1 -1 1]); x = xt(1:n); y = yt(1:n); z = zt(1:n); refreshdata(HANDLE); pause(0.1); end You don't have to plot it that way, either - you could just plot the point like you did and that's fine. But it would probably be smart to compute everything ahead of time so that if your function is really complicated it will run at similar speeds on different peoples' computers.
And if your function is simple it (probably) won't matter anyways. Maybe OP could also look into the "getframe" or "movie" commands: http://www.mathworks.com/help/matlab/ref/getframe.html ...although I generally find that to be pretty slow and memory intensive. Up to OP's needs, really. That way it would be easier to build some kind of gui with a slider for manipulating the frames of the animation. GUIDE makes it fairly straightforwards to get a simple gui up and running.
What's your application? 
If you can find a camera that has a c/c++ based driver package you can always generate a mex function to use it in MATLAB. Furthermore, you may be able to find people who have already done this for certain cameras to save yourself some time. Otherwise the Image Acquisition Toolbox may already have supported options.
It sounds like he is calling the figure() command in the function. So if you try to initialize a subplot, the function will just create a new figure window no matter what. You will probably have to go into the function to make any changes. The figure() command just opens up a new window, so if you can find that in the function then you can make whatever changes you need to there.
I realized that he did this after looking through his function a bit. Thanks!
Move your **hold on** call to AFTER the first plot. **hold on** applies to the current axes object (whatever **gca** returns) and thus your call is operating on the previous plot each time. for i=1:10 figure(i) plot(OHSU_interp_fft{11},OHSU_interp_fft{i}(10,:),'r'); hold on; plot(peking_final{11},peking_final{i}(11,:),'b'); end I removed the **hold off** since it's not necessary.
You can also use **imlincomb()** if you have the image processing toolbox: X2 = imlincomb(0.3, X(:,:,1), 0.59, X(:,:,2), 0.11, X(:,:,3)); imagesc(X2) colormap(gray(256))
You can manually create axes wherever you'd like using the axes() command, like the following: margin_left=.05 % 5% margin margin_right=.01; margin_top=.05; margin_bot=.05; plot_width=1-margin_left-margin_right; plot_height=1-margin_top-margin_bot; a=axes('position',[margin_left margin_bot plot_width plot_height]); I like keeping my margins as variables so that I can easily adjust things. In addition, you I often have a "middle_margin_x" and y if I want to make multiple plots: % provide additional margins between plots middle_margin_x=.01; middle_margin_y=.01; num_rows = 3; num_cols=2; % determine the size of each axis plot_width=(1-margin_left-margin_right-(num_cols-1)*middle_margin_x); plot_height=(1-margin_top-margin_bot-(num_rows-1)*middle_margin_y); ax=zeros(num_rows,num_cols); % keep axis handles for i = 1:num_rows y = 1-margin_top-i*plot_height-(i-1)*middle_margin_y; for j = 1:num_cols x = margin_left+(i-1)*(plot_width+middle_margin_x); a(i,j)=axes('position',[x y plot_width plot_height]); end end
figure() generates a new figure. You have to have an axis object in order to call hold. You could do the following instead: for i = 1:10 figure; plot(OHSU_interp_fft{11},OHSU_interp_fft{i}(10,:),'r'); hold on; plot(peking_final{11},peking_final{i}(11,:),'b'); end
As the truck moves across the truss, the forces on each node will change (i'm assuming the truck is an evenly distributed load). At each change in position (of say, the centroid of the truck, approximated as a rectangle), the forces will change, you invert the matrices and obtain the displacement at each node. To determine the internal forces, you can use the displacements as well as some material properties of the truss to determine the internal stresses on each truss member.
1) Your professor sucks. He put way too much information into 1 problem trying to confuse people. "Given the speed limit". So is everything 45% higher or not. 2) What are the dimensions of everything? I see the wheelbase, how large are the trusses? 3) Pretty much you're going to need to solve them with Y force agnostic. Meaning a variable you can put in as it moves across. Putting it in a matrix and doing rref should be the easiest. If you posted the matrix you had I could help but definitely not redoing that math again. Edit: I really hope this is a project and not just a generic HW problem. You're going to have to piecewise everything. Even with 1 wheel it's a bitch.
Well if you change the length of the t array from 0 to 5, matlab should only plot that region. But in case that isn't working, you could use the axis command to specify how much to show on each axis. I don't remember the exact format (look it up in the help window) but it is something like axis([0 5 0 10]) where the 0 and 5 are the left and right x limits and 0 and 10 are the bottom and top y limits. Hope that helps!
Thanks for your input man. It is a project yeah, not just homework! The prof has been a bit harsh, we're all new to matlab and this seems a bit over the top. Most of us are struggling. Trying to gather knowledge and learn as much as I can anyway, I've found that reddit is a very useful and friendly place :) This matlab sub is great for learning tricks! So i've got as far as finding the vector of the unknown axial forces. I didn't include the dimensions and stuff in the picture but i'll paste you what code i have so far! 
Try xlim([0 5])
this is what you need to do.
My understanding is vectorization is they way to go in Matlab as they are much faster than loops?
Hey there! Thank you a lot! This ended up working exactly how I wanted it to. I wasn't sure if I was supposed to add that line before or after the plot(t,y). I had never seen that code before (This is my first real semester using MatLab), so I gave it a try after plot(t,y) and it worked perfectly! Thanks again!
I ended up using the line that /u/do_hickey recommended and it worked for me. Thanks for your help though :D
Yeah, ended up doing this and it worked. Ty guys for teaching me something new!
Just went through very poor Matlab course for engineers taught by CS guys. Bucket of fail. Matlab seems to be the class no one wants to teach so instructor changes often. TAs where mildly socially retarded so they had a hard time understanding why someone would ask them a question. Just ranting about bad courses/profs. Go to office hours and ask though. Profs like people that go to office hours.
Please use https://gist.github.com/ That is a whole bunch of garbage. And he wants to to actually not neglect the weight of the steel or asphalt? Because for a beginning statics class that is one fuck of a big 'do not ignore'.
I was going to say that there is not significant benefit at least in this case as there is only very few loop iterations and in each iteration we would do relatively large amount of computations, but after I ran a small test script I have to say that "tradition" vectorization would still be the fastest way to create linear combination of double precision image: img = rand(1000,1000,3); w = [0.3, 0.6, 0.1]; %% Using imlincomb tic res0 = imlincomb(w(1), img(:,:,1), w(2), img(:,:,2), w(3), img(:,:,3)); toc %around 0.0131 %% Using loops tic res1 = zeros(size(img,1),size(img,2)); for ii = 1:size(img,3) res1 = res1 + img(:,:,ii)*w(ii); end toc %around 0.0156 %% Using bsxfun tic res2 = sum(bsxfun(@times,res0, reshape(w,[1 1 numel(w)])),3); toc; %around 0.0129 %% Using matrix algebra / traditional vectorization tic res3 = zeros(size(img,1), size(img,2)); res3(:) = reshape(img,numel(img)/size(img,3), size(img,3))*w'; toc %around 0.0053 %% Without reservering memory first tic res35 = reshape(reshape(img,numel(img)/size(img,3), size(img,3))*w', [size(img,1) size(img,2)]); toc; %around 0.0046 %% Directly tic res4 = img(:,:,1)*w(1) + img(:,:,2)*w(2) + img(:,:,3)*w(3); toc; %around 0.198 But even tough the "traditional" vectorization was fastest in this case, I would still probably use for-loops in actual production code (if speed was not utmost importance) as in my opinion it is the most straight forward one / most self documenting. (This benchmark might also be faulty)
Here is a link with the code i have compiled so far. There was more details in the question I just didn't include them in the above picture. They were just properties etc. The part i'm stuck on is the graphical part and the truck moving across. https://gist.github.com/anonymous/5224231
No problem. All commands that affect the plot should be put after the plot command is called. Similar commands are ylim, xlabel, ylabel, title, legend, gridminor, etc. Good luck with Matlab!
Hey, check out the example here: http://www.mathworks.com/help/matlab/ref/getframe.html you use "getframe" to grab each frame as you display the iterations of the ball flight, and then use "movie" to play the frames. If you have any questions, bounce a message back - I use this method to make movies in my research. Cheers.
If we assume you intialize x,y,z to nans beforehand I think you can do subplot(2,3,6), plot3(x,y,z); title('3-D Plot of flight'); set(gca, 'Xgrid', 'on', 'Ygrid', 'on'); xlabel('X-Distance, m'); ylabel('Y-Distance, m'); zlabel('Z-Distance, m'); while ((z(i)&gt;0)||(i==1)) %i.e., while ball is still in flight t(i+1)=t(i)+dt; %Change by "dt" seconds every time x(i+1)=x(i)+u(i)*dt; y(i+1)=y(i)+v(i)*dt; z(i+1)=z(i)+w(i)*dt; i=i+1; subplot(2,3,6), plot3(x,y,z); zlim([0,max(z)]); drawnow end This will plot the trajectory at each point it calculates. if you want to plot not at each point, but every 5 iterations for example you could put the subplot[]drawnow into a if like if (t % 5*dt==0) ; [...]; end instead of drawnow
Comet3 http://www.mathworks.com/help/matlab/ref/comet3.html 
Thank you very much!
A link to Pastebin.com in the sidebar with instructions to put code in there with the matlab formatting option would be cool.
Thank you once again!
At first glance, here's a suggestion. size = size(TempOld); You are assigning a variable to size and therefore rewriting the size function. I would recommend you change the name of the variable. I don't think it will influence your code at all though as you don't call the size function after this.
1) Use matrix math. It makes life so much easier. 2) Let me find my example... http://www.reddit.com/r/matlab/comments/11zuw0/need_advice_if_this_is_possible_to_complete_in/ 
I used the profiler on your code. Looks like your innermost loop is taking up the vast majority of your computation time. I'm wondering if there was any way to simplify that. If not, then I don't have any other ideas. http://i.imgur.com/zJFMkXW.png Also, this might save you a second or two of computation time, but you should preallocate the size of your "TempNew" matrix in the beginning. ie- TempNew = zeros(61,11); somewhere early on. That way, MATLAB won't have to resize it every loop. 
Hi, I realize my previous solution wasn't actually what you were asking for. If you have a scatterplot, I'm guessing that you have two vectors of data--one for the X variable, one for the Y variable, and you want to find all unique pairs. Using simply unique(X) and unique(Y) and combining won't do it. Here's an easy example why not: X = [1 1 1 2 2]; Y = [2 3 4 2 5]; If you were just looking for unique(X) and unique(Y), and taking the intersection, you'd end up with the empty set, despite the fact that all of these points are unique in X/Y space. So what can we do? We need some way to find unique _pairs_ of points. One easy way that's not completely optimal is to just multiply them and take the unique points there. It's possible you'll end up ignoring some unique points. If you're dealing with integers, for example, then points (2,3) and (3,2) will map to the same location, but it'll at least do a better job than doing unique(X) and unique(Y): [~,I]=unique(X.*Y); scatter(X(I),Y(I)); You can make it a bit more complicated if you'd like to reduce the chance that you'll have "collisions," i.e. where x1*y1 == x2*y2, but this is the general idea.
Where should I preallocate the size in the code? 
I found that interp2 was giving me problems, instead I used griddata with 'cubic' specified. Would the results be better for interp2?
If you want to mask it with gaussian white noise, I can give you a small piece of code that I am using. You specific a certain SNR and it masks the visual target accordingly. If you want to just have a noise mask that covers your image entirely, then use the chequerboard function to create a texture and overlay your original one with this one
A certain SNR is not important so I'll take a look at the chequerboard function. Thanks for the pointer, I'll report back. ;)
[Visual masking](http://psychology.wikia.com/wiki/Visual_masking) (specifically backwards masking) is a common technique in behavioral/experimental psychology experiments. Sorry, I should have been clearer about that.
Or if you want proper WGN, then use the imnoise function. http://www.mathworks.de/de/help/images/ref/imnoise.html
However if you have 3 points it will just draw straight lines between them. spline 
Using the `.'` (transpose) operator instead of the `'` (conjugate transpose) operator might make it easier to read. The [coeffs](http://www.mathworks.com/help/symbolic/coeffs.html) function can be used to extract the coefficients. Look through the examples to see how to do it for the multivariate case (which you have here).
No problem. I don't know who came up with the idea of masking, whether it was first used in visual or auditory research. But this is not a recent development: people have been using this in visual research for ages. And yes, the mask appears in the same spatial location as the stimulus it masks. At least in my case. There are cases (see the link in my previous post) where they are not in the same spatial location. I am not very familiar with that, though. I have never read an article in which it's done and wouldn't know which field actually does that and for what purpose.
Thanks for the suggestion. My stimulus is not an image, though. It's just a colored square that I draw on screen with 'FillRect'. Also, I'll need to distribute this across a number of computers and can only change so many things on them (installing software etc. is a fight with the IT "service" people every single time... don't get me started) so I want to keep the toolbox dependencies at a minimum. Psychtoolbox is already installed so I try to find a work-around for this with what's at my disposal. Again, thanks for the link, though.
Some details would be helpful.
 std?
Can you share the example code that isn't working properly for you? That may help. Also - why are some intersections blue dots and some red? What criteria is used to determine the coloring?
What exactly do you want to use to measure the goodness of fit? http://www.mathworks.com/help/curvefit/evaluating-goodness-of-fit.html#bq_5kwr-3 R^2 is a typical value for measuring data fit to linear regression: http://www.mathworks.com/help/matlab/data_analysis/linear-regression.html
Thank you, that was exactly what I was looking for.
I'll test his and let you know. Thanks!
Because there is no new item. In my experiment, I'll display n stimuli (say, 5 squares in different colors) on random locations on the screen for x milliseconds. Then they'll disappear and only one of them reappears and might or might not have changed color. Your task is to respond "same" or "change". It's called a change detection task. (And as you might imagine, it's incredibly boring.) The colored squares will leave an iconic memory trace after they disappear and we don't want participants to be able to use such traces to make their same/change decision. That's why iconic memory is "overwritten" by visual masks. This is a very common technique in these kinds of experiments.
*"I've been trying and trying"* What do you have so far? edit: I find it useful to create a script for what I want to do and refine my code there and then when it's done, just wrap it up in a function. 
Note that sin(x) is a built in function, so that you don't have to code it. You want something like y=a*sin(b*x), where a and b are passed in, and x is the domain you need: a vector of numbers between 1 and 20.
I don't want to do your assignment for you, so let's start out by pointing you in the direction of some helpful MATLAB functions, and see what you can do. Look up these: * `sin` * `plot` If you are starting from literally zero experience, you'll also need to know how to create a vector. In your case, x would range from 1 to 20 (with some spacing of your choosing). Try looking into those and report back ;) EDIT: again, just in case you are starting from the zero point, here is how you look up a function in MATLAB. Type: &gt;&gt; help sin To display the help for the sin function right in the command window. For more information, try typing: &gt;&gt; doc sin That will open the documentation window, which sometimes has more info, and/or examples. Best of luck!
Is this using the global optimization toolbox? I don't have that toolbox anymore, but did use it for a year or so. I believe there was a criteria for that though. Try looking [here](http://www.mathworks.com/help/gads/gaoptimset.html)
If someone wants to see the whole program just lmk and I can send it to you.
&gt; (tried to copy paste the code here directly but reddit auto-formating screws it up) Four spaces. Gist. Have you tried using the debugger? Put an if any(isNan(y)) disp('xxx'); end at the bottom and put a breakpoint on the disp. 
If you have the image processing toolbox, you should use the RGB2GRAY function. out = rgb2gray(X); If you look at the algorithm description in the documentation for RGB2GRAY, it is using the weighting that you want for for the R,G,B channels. 0.2989 * R + 0.5870 * G + 0.1140 * B 
What values did you use for V_M, m, z_0, w_0, and L? Your code seems to be fine.
Couple of ways to do this. The most straightforward, just loop over the rows and use if statements. Though this is more "brute-force" and slow. The slightly more elegant way would be to use `find()`. If your data is stored in an array, `x`, this will look something along the lines of: a = find(x(:,1)==0 &amp; x(:,2)==16); b = find(x(:,1)==0 &amp; x(:,2)==32); c = find(x(:,1)==0 &amp; x(:,2)==48); where `a`, `b`, and `c`, are the three criteria given. The `&amp;` might need to be a `&amp;&amp;`, I always mix that up... Anyways...that should do the trick ;) I'm sure there are more ways, and possibly a more efficient and elegant way, too. But either of these should work :)
To get what he's looking for I'd just do a logical and sum it. &gt; I need to find the number of rows a=sum((x(:,1)==0 &amp; x(:,2)==16); etc.
V_m = 0.2; m is a parameter to define the step function f(z) ,in this case it is around 10. z_0 = 3; w_0 = 3; L = 2*z_0 + w_0 = 9
&gt; Four spaces. Gist. what? &gt; Have you tried using the debugger? as you can see on my 3 screenshot, this is happening inside the function ''un_passage.m'', I call it from my main file.m, the breakpoints don't seem to work this way... (unless I really don't know how to use them properly, I never used them much.)
&gt; what? Use four spaces. Or use gist. &gt; I call it from my main file.m, the breakpoints don't seem to work this way So you tried it and it didn't work?
&gt; Use four spaces. Or use gist. Still don't get it.... where to put the four spaces? and what is Gist? &gt; So you tried it and it didn't work? Yeah, I did, the code didn't stop at the breakpoint inside the function. Also I'm not quite sure what is it supposed to do... It displays a message if it sees a NaN, but how does that help? I already know that the output is full of NaNs (except the first line, which are the input initial conditions).
Thank you! Exactly what I was looking for. And so simple...I have a lot learn.
Thank you! This gets the job done as well. I appreciate it!
Assuming you have the variables loaded into matlab as X Y U_X U_X=U_X*1e10; Assuming you have the variables stored in matlab as A=[X Y U_X] A(:,3)=A(:,3)*1e10; Repeat for other variable.
[Gist](http://bit.ly/ZZXtVN). And for four spaces: read "formatting help". &gt; Also I'm not quite sure what is it supposed to do... It displays a message if it sees a NaN, No. It's just a dummy line so you can put a breakpoint there. And it helps because you can figure out WHY you're getting NaNs. I would just debug it but matlab doesn't seem to run jpgs from imgur. 
1) I am still deciding where the points should be, they can form a simple grid of 4x2 or be staggered if that gives better results. Ideally interpolating and extrapolating is the goal. I am not sure how I would extrapolate though. 2) The loading on the board can vary from a simple moment (4 point bending test) to a torsional test. I know the beam theory for the bending test, I am not sure how it would apply to the torsion test. More over I am not sure how to even code that in.
hmmm...I'm not sure if staggered or grid is better off the top of my head. If it is 4x2, then you'll be able to get up to cubic curvature in the long direction, and only linear in the short. This should be OK for the bending test. If shape and material properties are constant along the length, the curvature should be approximately parabolic, so 4 points will be able to capture this sufficiently. I'll need to ruminate on the torsion test for a bit ;) What I was alluding to with my last point, though, is that say you know the curvature should be a certain shape. So, in the 4 point bending you know the equation for that curve in terms of geometry and material parameters. Rather than using those parameters, just find the coefficients based off of the measured deflection, and use this functional form to find intermediate points.
You need to install gcc.
Agreed
The only reason I see for those NaNs, is having an initial condition r_0 = 0, and therefore a division by zero. I tested your code for other values of r_0, and it ran smoothly.
 &gt;&gt; doc VideoReader There is a nice example on the documentation on how to set it up and grab single frames.
The difference is that `sum(f)` will not give you the *area* under the histogram, i.e. the integral. You want to normalize such that the *integral* is equal to 1, not the sum. The difference between `sum(f)` and `trapz(x,f)` is simply accounting for the bin size. Hope that helps!
Like I said, I was sure there was a more elegant solution, that just came to mind first :D What do you mean by &gt; should be a hint that you're doing something wrong though?
Calculation of y inside or outside the plot function shouldn't make a difference - just would be "neater" outside. The elementwise vs. matrix division certainly is an issue though. I agree with /u/chawdipper, switching your division to ./ should do the trick. EDIT: The reason it works in ezplot is that in ezplot, x is treated as a scalar variable, rather than an array/vector.
Yep. ./ fixed everything. plot(x,1./3*x.^2.*sqrt(((area-x.^2)./(2*x)).^2-(x.^2./4))); 
Upon further consideration, I think I may know why this is a completely stupid question. I'll leave it up for the sake of discussion, and in case other people are wondering why, though. My guess as to why the former is much faster is that it a DFT breaks the Fourier Transform into a matrix multiplication. For a vector, X, of size Nx1, the DFT is simply a multplication of `F*X`, where `F` is some NxN matrix of Fourier coefficients. So the FFT routine will create this NxN matrix, which is the same for **all** rows of the matrix S, above. Hence, calling FFT multiple times will cause redundant work in creating this matrix. This also means, the entire S can be multiplied by F, for a completely vectorized FFT. Is this correct? Sorry for asking and answering my own question! Sometimes just asking causes you to realize the errors in your thinking!
Another way of doing it that has worked for me in the past is to include everything in the plot function plot(OHSU_interp_fft{11},OHSU_interp_fft{i}(10,:),'r', peking_final{11},peking_final{i}(11,:),'b'); 
MATLAB has built-in multi-threading for FFT. See http://www.mathworks.com/discovery/multicore-matlab.html. In fact, doing the DFT by matrix multiplication is painfully slow. The FFT is called 'fast' basically because it's fast compared to that.
You probably want something like this: http://www.mathworks.com/help/matlab/ref/fftw.html Also, look into installing something like MKL or AMD core math library Also, if you are really doing it so many times on such a large dataset, would something like Jacket, or even coding it in OpenCL, help? Lastly, can you post the code for your iterations? Iterating in the frequency domain can often be optimized away.
It's gotta be this: set(OUTH,'Color','k','MarkerFaceColor','k','Markersize',8); What is the OUTH handle supposed to point to? EDIT: Yup, the third output is for "handles of the lines and other objects used in the plot". So you're explicitly resetting the line colors with that command. What are you *trying* to accomplish with that command?
Problem 1) Yes, these are "embarrassingly parallel" operations. You can *very* easily parallelize that operation by replacing your "for" with a "parfor". This command will usually behave exactly like a "for", until you execute it with an open 'matlabpool', or collection of cores available for matlab to use. Check the help for the syntax on 'matlabpool' and 'parfor' and they'll have examples. It's pretty much just 'open pool' --&gt; 'run parfor' --&gt; profit! Problem 2) As far as I know, matlab stores matrices in contiguous blocks of memory. So a large matrix needs an obscenely large chunk of RAM, and it needs TWICE that size if you go to re-size it on the fly (like adding elements from within a loop, BAD!). You can calculate the required amount of ram based on the type of variable you're using and the size and purchase RAM based on that. It's hard to say what those other researchers are doing without knowing more about their work and which languages they're using ... things like Fortran and C variants may have much cleaner memory management options available. Some of my Fortran code runs matrices of 150,000*500 double precision values without any issues at all.
Yes this is definitely possible. I'll edit this comment when I get to my desk with how to do it. EDIT: if you run `matlab -nodesktop` in the terminal, it won't open the main program window. If you are on a remote server, and `ssh` without `-X`, this is automatic. In any case, you need to make sure you add the MATLAB directory to your path, so the matlab command is valid. This will be something like: PATH=$PATH:$HOME/bin:/usr/local/MATLAB/R2011b/bin Though, you may need to change the exact chain to match your system (and of course version of MATLAB). Hope that helps.
Even if you have the Ram available, I've run into cases where matlab hits an artificial memory cap. If you're working with such huge matrices the move over to Fortran will probably pay over in dividends (or C). 
matlab -nodesktop -r "FILENAME"
Filename is what you want to run. 
AWESOME! Tuning the FFT looks like it should make a huge difference in my very repetitive example. How would those math libraries help in MATLAB? Aren't those for other languages? I'm not familiar with Jacket or OpenCL. I do a lot of other work in Fortran (with or without parallelization) - and this code would certainly be sped up with a move over to Fortran. I'm not in that big a need to speed up though - I'm developing a new/different method to simulate something, and want to show the speed up when using the FFT vs. not. So I can get quite good numbers in MATLAB alone. Right now, one simulation step takes 8 seconds for me. The iterations are monte-carlo, so they themselves are embarrassingly parallel - but the timing that counts is *each* iteration, not aggregate. To that end - can't post code just yet, unplubished work and you never know these days ;) Thanks for all your ideas, I'm going to check out the `fftw` tuning for sure.
Awesome, looks like `fft` already does exactly what I want! Along with a slew of other [functions](http://www.mathworks.com/support/solutions/en/data/1-4PG4AN/?solution=1-4PG4AN.). I assume you don't need to `matlabpool` or anything, and this is all automatic if you have multiple cores/threads?
First of all, fft(S) and fft(S,[],1) apply the fft on the columns of S. fft(S,[],2) will apply the fft on each row. fft(S,[],1) will be (usually) faster due to MATLAB's "column-major" convention. I think that a lot of your time in the parfor loop is being taken up by the overhead of moving each column out to the workers and moving the results back to the client. If you distribute S (using Sd = distributed(S);) amongst the workers and THEN run the fft(Sd) I think you'll get a better feel for the speed. Keep in mind also that until you get to big data, the overhead of running on a pool will overshadow any gain in speed from doing it in parallel. 
OOPS - yeah those were typos (most importantly I forgot to skip the `n` argument - FFTs of length 1 sure are fast! Thanks for catching! I was not suggesting that using a `parfor` would be the ideal solution, I was more so wondering if there was a parallel FFT function, or if it was overloaded in someway to account for multi-core machines. The link /u/benpheil posted was pretty much exactly what I was looking for :D
Hmm...looks like tuning doesn't make a difference if you already have a power of 2 - oh well! And yeah not accusing you (or most people on here). Just not worth the risk of posting stuff in an open forum. Just takes one person!
Okay so does that mean it passes the step size? or it is actually the point that the interval starts at that it is passing on? 
would this mean I would have to put the program's m file in the bin folder in order to run it?
Okay, all good, thank you! Is there any way to get the step size that the solver is currently taking?
Nope - the bin folder is just where the `matlab` executable is stored. Your m-file should be in whatever your current directory is. So if you're trying to run ~/home/einstein1351/some_folder/main.m, then make sure you are currently in ~/home/einstein1351/some_folder/ when you run `matlab -nodesktop -r main`
I am NOT condoning your use of way too many loops. That being said, though, to get your code to work properly, *as written*, you need to fix: if j==i x(i) = x(i) + B(i) / A(i,i); else x(i) = x(i) - (A(i,j)*x(j)) / A(i,i); end I think that should clear it up. However, that's just a band-aid to get it to spit out the right answer ;)
Getting the current step size of the solver is probably not important for your program, but if you're curious about it, you can have a look inside the ode45 function. edit ode45 Around line 300, you will find a comment that marks the beginning of the "Main loop". The next step size is calculated in the first part of the main loop, and stored in the variable *h*. Remember that each step is further sub-divided (I think ode45 sub-divides into 4 by default), so your ODE function will not only be evaluated at the point defined by the major iterations *h*. As you can see, everything is controlled by ode45.m, which makes it difficult to obtain the current step size from inside your function. It is possible to obtain it during the integration, but probably not worth it. 
HA! whoops. That'll happen sometimes... especially when writing code on reddit without testing it ;) Hmmm... did you initialize `x`? It should be initialized as zeros - so: x = zeros(m,1); BTW, what is your loop `for k=1:t` looping over? The index `k` does not show up in any of this? Is that necessary? Since `x` does not depend on `k` you should probably move it outside of the `k`-loop. Let me know if it works!
k was just a letter I chose to that I could limit the number of iterations to t (which I set earlier on) by looping from 1:t (not sure if this is right, I'm pretty new to MatLab) I'm using 'input' and a string to set all x = 0 at the start, it's still giving NaN for all of them :/ Thanks for the help by the way :)
Awesome! Thank you very much :) 
OOHHH okay, I understand what the `k`-loop is doing now. Let's see...is anything in A or B a NaN? Is A zero anywhere? You're going to need to roll up your sleeves and do some debugging I think. I'd start by putting a line like: if sum(isnan(x)) keyboard; end after the `if-else-end` statement. That will let you look in and see when NaN's are starting to appear. 
Okay, thanks, I'll persevere and see if I can find out where the NaNs are coming from and fix it
format long?
That was it. Thanks!
Will that ensure that no elements of B repeat?
Not sure exactly what you mean but, are you aware that element wise operations need a period in front of the operator? (I.e., * and / are matrix product and inverse while .* and ./ are element wise multiplication and division) 
Is the . necessary as I'm only multiplying elements of matrices, not the matrices themselves. I want to generalise the equation as x(i) = (B(i) - A(i,j)*x(j)) / A(i,i) but miss out when i=j. e.g. if you look at the 2nd equation it has A(2,1) A(2,3) and A(2,4) [misses out A(2,2)] Not sure if that makes sense
Actually, presuming in understanding you correctly, this is probably faster and shorter: X = (B-A*x+diag(A).*x)./diag(A); You may need to transpose the results of the diag operation.
 x=inv(A.*eye(n))*(B-A.*(1-eye(n))*x); So, here's how it actually works. Lets start with sum_j of A(i,j)*x(j). That is just the definition of matrix-multiplication,so we know that becomes A*x in matlab code. Of course, you have thing where you ACTUALLY want sum_j of A(i,j)*x for all i not equal to j. The inner term should be 0 if i=j. That means that, basically, instead of A, you want this matrix [0 A(1,2) A(1,3) A(1,4);... A(2,1) 0 A(2,3) A(2,4);... A(3,1) A(3,2) 0 A(3,4);... A(4,1) A(4,2) A(4,3) 0;] To GET that matrix, we are going to basically want to take the original A, and set the elements on the diagonal to 0. To do that, we *element-wise* multiply the elements of the original A with a mask matrix M, where M is [0 1 1 1;... 1 0 1 1;... 1 1 0 1;... 1 1 1 0] So...how do we make M? Well, M is like the reverse of an identity matrix...where all the 0s are 1s and all the 1s are zeros....so M=(1-eye(n)). So, we have Amodified*x, where Amodified=A.*M, so A.*(1-eye(n))*x So, then, the next step, is to subtract that from B, which is self-explainatory. (B-A.*(1-eye(n))*x) So, then, this whole thing is a column-vector...call it y. Now, we need to scale every element of y by dividing by the diagonal elements of A...so, that is, we want to do x(i)=y(i)/A(i,i). That is just multiplication times a scaling matrix Aidiag... so x=Aidiag*y; where Aidiag is [1/A(1,1) 0 0 0;... 0 1/A(2,2) 0 0;... 0 0 1/A(3,3) 0;... 0 0 0 1/A(4,4);] So, to get Aidiag, first we compute Adiag, which is the matrix of A(i,i) on the diagonal, not 1/A(i,i) on the diagonal.. To do this, we use the same 'masking' trick as before, but with an identity matrix: Adiag=A.*eye(n). Now, Adiag is just the inverse of Aidiag, so to get Aidiag, we find the inverse... Aidiag=inv(A.*eye(n)) So, our final result is x=Aidiag*y x=Aidiag*(B-A.*(1-eye(n))*x) x=inv(A.*eye(n))*(B-A.*(1-eye(n))*x); done!
Post your code, including A,x,b. Also, run size(A),size(x),size(B) before the line to make sure you get the right result. The code works fine on my end. http://ideone.com/Z1QoT3 
And what are they outputting? Posting your code is probably the right soluton here. You can see from my link that the code I provided works.
I'm no expert, but I'd recommend reading about nested functions. As far as I'm aware, if a variable is defined in your GUI then it should be accessible by all child functions but not by their children/ancestors (not sure about the nomenclature here but I think it makes sense). I usually define var=[]; in the parent function if it is not otherwise defined to share it between 'sibling' functions. Hope this helps
I haven't read up on this lately but you use to be suppose to share data in a GUI using either a global variable or the handles object/structure that gets tossed around (look up "guidata" I think that was an important command to use with it)
Ok, so I'm using guide to create my user interface, not coding it. Where would I define and initialize the global variable so that the Callback functions and the opening function both share the variable? Basically where is their common parent.
I've seen sample codes that pass data around using handles, but it looks overly complicated or what I want to do so I'm trying to hunt down more info to see if I can do it with globals
Using handles is arguably even simpler but I guess it may be less transparent and arguably cumbersome. I'm not sure how it compares on performance though.
I don't know how to do it with GUIDE, sorry. But I think that when you're editing a GUI you can save it as an .m file and edit the code from there. So you'd just make sure it is defined outwith any nested functions and that is just anywhere on the main file really. I think by the nature of callbacks it doesn't have to be defined before them.
Yeah, I'm in the .m file. The user below had a simple solution that is working. Thank you though.
Either way it's almost working now. The globals are taken care of.
This worked perfectly. Thank you.
 &gt;&gt; a = [1 2 3] a = 1 2 3 &gt;&gt; a(2) = [] a = 1 3
it's a 1x52, but I may have just figured it out by your explanation of X(i)=[].
If your 1x52 contains ones and zeros, corresponding to "in the deck" and "out of the deck", you could just add an if statement like if x(i)==0, restart function.
"t" is not defined in line 6
SHIT it's because I made an edit to include that line after defining t in matlab before, I'll make a quick edit thanks for pointing that out!
it's fixed now http://pastebin.com/2F15YvDw
yep now it works, looks pretty cool!
 x=0:.1:5 x=linspace(0,5,51);
Gist. Pastebin. Four Spaces. And almost anything can be sped up in matlab using vector math.
If you want one continuous sound then just add a line to concatinate the variable such as: result = [result, currently playing wavefile]; Otherwise if you want each waveform asba new line, you can start a new iterating variable with value zero before the first for loop: k = 0 And then in each if statement add 1 to k and use that as a subscript in your result variable: k = k + 1; result(k,:) = waveform; Is this what you're getting at?
 result = [result, currently playing wavefile]; This is exactly what I was trying haha. I put it in the for loop, right after the if-then statements, and it the wav file was unplayable. When I added that code to right below the for loops, it only played the first sound. This is so frustrating because it should be working like this! In my above code, I have: y = resample(A, Fs, f); (...) end soundsc(y, Fs) endx2 result = [result, y]; Is this wrong? 
In my above code, I have: y = resample(A, Fs, f); etc end soundsc(y, Fs) end end result = [result, y]; Is this wrong? 
I can't look it up (on cell phone) so I cant say for sure. All it does I think is change the sample frequency of a sound. Its not wrong it just won't do what you are trying. Also it won't be necessary unless you run out of memory and need to downsample. Wav files have a pretty high sample rate.
Run bench on both of them. But my experience is the exact opposite. Also check your optimization settings. You can run Simulink in a few different modes. Some of them compile an app and then run it. If your code doesn't change it's something to look into.
Are you running a newer version? Maybe they actually put some time into Mac/Linux optimization. 
Yeah, 2012b
Oh no no, sorry. I wasn't trying to point out the resampling part; I was trying to illustrate where I have the result = [result, y]; and that its still only playing the first sound. Should it be another variable instead of y? Soundsc(y, Fs) plays exactly what I want, but I just cant seem to figure out how to write a wav file with what soundsc(y, fs) plays. Do you want me to send you the entire code? 
It wouldn't help to send the whole code. I don't have matlab on my computer here. Result = [result y]; should work. Put a break point in the script and see what happens to result during the loop. If wavread imports as a column array, you'll need to transpose it for it to work.
I had it in the wrong place but it works, thank you so fucking much! This was driving me absolutely insane. 
Maybe you can use 'drawnow' to force the graphics pipeline push through. That might help update the GUI. 
Are you displaying graphics? In my experience the biggest difference between machines of the same era is graphics cards. And macs usually have really nice ones. Like darkscout says, 'bench' would reveal this right away.
You could also use D{:} to display all of the cards
Not quite following your first explanation, but earlier I actually tried D=deck{i}, and when i went go to call it I would only get the first card to show up which is 'A' 'Hearts'. 
My explanation is for after you call the function. This function creates the deck of cards then my explanation is for after you call the function if you want to then see what cards it created. D is a vector of cards but to actually access the value of the cards you have to use cell array notation, which is the { bracket. So the loop I wrote in my first explanation is iterating through your deck array and displaying the card value and suit. You technically have a cell array of cell arrays. So D{1} holds a cell array that is 1 row by 2 columns. So when you write D{1}{1} you are saying you want the first card and the card value as that is stored in the first cell. Similarly, D{1}{2} is the suit. Then D{2}{1} and D{2}{2} are for the second card in the deck.
The default way to share data between the callbacks in the .m file generated by guide is via the **handles** structure. This structure contains the handles of all of your gui objects and are listed by their **tag** properties. Note that **handles** is the third input to every callback function. So anywhere in the code, you can add on a field to **handles** handles.blahbeeblah = 42; This adds a field onto the LOCAL copy of handles. If you want to 'save' the new version of handles back out, just run: guidata(hObject, handles); See the doc for **guidata()** for more help. There's also a page on data sharing and management in GUIDE GUIs somewhere in the doc.
Simulink does not use multi-core. You can manually setup parfor to use multi-core for multiple simultions, but the quad-core may be slower than a dual core with faster clock speed. Furthermore, memory won't be a big issue here unless you are coming close to running out of it. That being said, the differences you're seeing are way bigger than what one would expect for those differences. Does your model have any stateflow or MATLAB functions? Those need to be all compiled before running and may cause some of the slow down the first run through the sim.
ahh ok I understand what you are saying now. But is there no way for me to edit the function so when I call it, it shows the cards and not the dimensions of the arrays? also why can't i just use that loop that you mentioned earlier in function, so when i call it it shows the cards and not the arrays?
Yea you can do that too. Instead of writing deck at the end of your function you can use the loop i wrote in the first comment. Just replace D with deck also you should move D=deck; out of the loop. You only need that line of code once.
You don't need to plot anything of two variables. I think you're misunderstanding the question. I don't want to give too much away though, since this seems to be a HW assignment... ;)
The way to do this is through the UserData field of your form. In your opening function do: Zombie1_OpeningFcn(hObject, ~, handles, varargin) ud.t = 0; set(hObject, 'UserData', ud); % note that this is the FORM UserData Then in your button callback you can get and fetch userdata: forward_Callback(hObject, ~, handles) ud = get(handles.form1, 'UserData'); % get the form UserData ud.t = ud.t + 1; % increment t disp(ud.t); % just for debugging -- remove later set(handles.form1, 'UserData', ud); % save the modified Userdata % back to the form
Hmmm, you *could* use [`repmat`](http://www.mathworks.com/help/matlab/ref/repmat.html) to tile `f` to be the same size as `tauy`. Then the `./` will work. That is probably more efficient than looping over the 156. It is more taxing on memory, but if your computer can't hold two arrays of 360x160x156 I'd be surprised.
Awesome - thanks. :)
I remember having to do something like this for a freshman engineering class too (I'm guessing you have to code either blackjack or poker in matlab). Just as a hint, it's a a lot easier if you just assign each card a number, rather than using a cell array. If you randomly pick a number num = randi([1, 13], 1, 1); and a suit possiblesuits = [0, 13, 26, 39]; suit = suits(randi([1, 4], 1)); card = suit+num; you should have and independent identifier for each card (you can pick whatever suit you want to be 1-13, 14-26, etc), and it should be easy to figure out which suit and which card you have. Note that with a minimal amount of thought you can condense the code into two or three lines. Once you've pulled a card out, it's pretty trivial to remove it from the deck. As an added bonus, you can do a quick google search to get images of a every card in a standard deck and make your program show the user
bsxfun can be more memory efficient for this sort of operation: A = magic(4) x = [1;2;3;4] B = bsxfun(@times, A, x) or, in your case: X = randn(360,160,156); f = rand(160,360); Y = bsxfun(@rdivide, X, f');
If I'm not mistaken, you could use a for loop like so for i=1:156 u_inferred(i) = tauy(:,:,i)./f'/1035 end Too obvious I guess?
Yeah, I just ended up putting the for loop at the end of the code and it worked perfectly! Very much appreciate all the help you've given.
look into xtick http://www.mathworks.com/help/matlab/ref/axes_props.html If you need to change anything with regards to the axes, bookmark that link
Why is this in /r/matlab?
damn awesome!
Depending on what the plot command looks like, plot(x+1992, y) should work just fine. But using XTick and XTickLabel *does* give a lot more control. Also there's [this](http://www.mathworks.com/support/solutions/en/data/1-15HXQ/).
You may be able to create a quick loop to build up the cell array and then use that variable as the label input. If it won't accept a straight variable name, there's always eval()
How do you find the gain and phase on paper?
The result of the division will be a 360x156 matrix, so if you wanted to take the looping route you'd have to change your code to: for i = 1:156 u_inferred(:,:,i) = tauy(:,:,i)./f'/1035 end But, as I alluded in my earlier - and is generally the rule for MATLAB - looping should be avoided. That being said, if you're not trying to optimize anything, this is definitely the simplest solution!
Unfamiliar with `bsxfun` - love learning new tricks!
I'm not sure if this is the best solution, but a whole loop would suffice. Play=input('do you want to play again?') while(strcmpi(Play, 'yes')) Do the blackjack stuff here Play=input('do you want to play again?') On my phone so forgive the formatting. 
 playAgain='Yes'; while strcmp(playAgain,'Yes') blackjack; % Your blackjack function. playAgain=questdlg('Do you want to play blackjack again?', 'Replay Question', 'Yes', 'No', 'No') end or like Lexarius suggests. while true blackjack; % Your blackjack function. playAgain=questdlg('Do you want to play blackjack again?', 'Replay Question', 'Yes', 'No', 'No') if strcmp(playAgain,'No') break; end end
Alright I get what you are saying. I have a part of the code that checks to see if the player or the dealer has gotten blackjack off of their first two cards and if someone does have it then they obviously win. what do i put there so it just skips the rest of the code and then asks the player if they want to play again?
 return Put the rest of the code in if statements.
yeah most of it is, Thanks for the help!
Design a program that generates novel project ideas. edit: If you want a serious answer you should probably be a bit more specific, at the moment your question couldn't possibly be more vague. We have no idea what your interests are, what your academic backgrounds are, or what your programming knowledge is.
OP could base it on the **why** command in MATLAB. Hint: &gt;&gt; edit why.m
Have you looked at the outputs of the function, S, F, T, and P? I think the actual spectrogram data (the columns being the STFT of the 13s segments, of course) is found in the variable S. So you need to take the mean of all of the columns. (unless I'm mistaken)
Wow, I didn't even know this existed and it's totally amazing!
Damn, I didn't even think of that, thanks I'll give that a go.
*and is generally the rule for MATLAB* With emphasis on the **generally.** Sometimes it's easier to just write a loop and be done with it rather than reformulate a complex problem for vectorization. For this problem, the bsxfun version (0.078534s) and the for loop version (0.083394s) are nearly identical in speed. Now, if the loop were 2000000 iterations, I imagine we'd see a difference.
Write a code that simulates a planet's orbit around the Sun. It uses fairly basic physics and general coding techniques. It's also kinda cool!
I'm a hardware guy, I suggest writing code that you can upload to an Ardunio board and do a HWIL test.
Run a simulation of x games of the [Monte Hall problem](http://en.wikipedia.org/wiki/Monty_Hall_problem). Show that your odds double if you pick the other door. [Here's the output](http://i.imgur.com/D26eklY.png) from my simulation of 250 games if you always stay with your original choice and if you always switch.
Exactly. Though, there is value in setting good habits for small examples, that pay dividends in the larger ones ;)
I'm writing a ducted rocket/ram rocket performance code. Wrote one before, but left the company so I lost the IP. I'll write it up, plan it and do the first run in Matlab before rewriting in C. Maybe some OOP? Don't use the GUI. Just... don't. Some data analysis?
Well I know gain of the system is output gain divided by the input gain. The phase of the system is the difference of phase between input and the output.
I just analyzed a bunch of lfp data spectrogram. Use the P variable that this function spits out. Plot it using imagesc(). You can specify the data limits with imagesc() (you cant with image()). More to your question: In order to do an average, you'll need to split up your lfp data into equal-length individual trials and take the average of each time point in the traces. Then do a spectrogram of that average trace. 
[Here](http://www.mathworks.com/help/ident/ref/bode.html). &gt; [mag,phase] = bode(sys,w) returns magnitudes mag in absolute units and phase values phase in degrees. The response values in mag and phase correspond to the frequencies specified by w as follows: &gt;If w is a cell array {wmin,wmax}, [mag,phase] = bode(sys,w) returns the system response at frequency values in the range {wmin,wmax}. &gt;If w is a vector of frequencies, [mag,phase] = bode(sys,w) returns the system response at each of the frequencies specified in w.
I totally agree.
This may be what you are looking for: %Sample data data={{'name1' 'range1' 11} ... {'name1' 'range1' 12} ... {'name1' 'range1' 13} ... {'name2' 'range2' 21} ... {'name2' 'range2' 22} ... {'name2' 'range2' 23} ... {'name2' 'range3' 31} ... {'name2' 'range3' 32} ... {'name2' 'range3' 33}}; %Convert to columns tmp=vertcat(data{:}); tmp=transpose(tmp); tmp=num2cell(tmp,2); tmp=transpose(tmp); data=tmp; names=data{1}; ranges=data{2}; values=data{3}; %Unique names [tmp{1},tmp{2},tmp{3}]=unique(names); %swap varname here ic=transpose(tmp{3}); ia_names=accumarray(ic,1:length(ic),{},@(x) {sort(x)}); ia_names=cellfun(@(x) num2cell(x),ia_names,'UniformOutput',false); ia_names=cellfun(@(x) transpose(x),ia_names,'UniformOutput',false); out={}; for i=1:numel(ia_names); ia_names_current=cell2mat(ia_names{i}); name_range=ranges(ia_names_current); %swap varname here clear tmp; %Unique ranges within each unique name [tmp{1},tmp{2},tmp{3}]=unique(name_range); ic=transpose(tmp{3}); ia_names_ranges=accumarray(ic,1:length(ic),{},@(x) {sort(x)}); ia_names_ranges=cellfun(@(x) num2cell(x),ia_names_ranges,'UniformOutput',false); ia_names_ranges=cellfun(@(x) transpose(x),ia_names_ranges,'UniformOutput',false); for j=1:numel(ia_names_ranges) ia_names_ranges_current=cell2mat(ia_names_ranges{j}); ia_translate=ia_names_current(ia_names_ranges_current); name_range_value=values(ia_translate); name_range_value=cell2mat(name_range_value); ave_name_range_value=mean(name_range_value); s=[sprintf('Group1: %s, Group2: %s, Average: %d, rows:', ... names{ia_names{i}{1}}, ... %swap varname here ranges{ia_translate(j)}, ... %swap varname here ave_name_range_value), ... sprintf('%d ',ia_translate),char(10)]; out=[out,s]; end end sprintf('%s',out{:}) Result: Group1: name1, Group2: range1, Average: 12, rows:1 2 3 Group1: name2, Group2: range2, Average: 22, rows:4 5 6 Group1: name2, Group2: range3, Average: 32, rows:7 8 9 To switch the groups, swap the variable 'names' with 'ranges' in the code lines marked '%swap varname here' Result: Group1: range1, Group2: name1, Average: 12, rows:1 2 3 Group1: range2, Group2: name2, Average: 22, rows:4 5 6 Group1: range3, Group2: name2, Average: 32, rows:7 8 9
Trying to figure this out is hurting my head, not really sure what you're describing/asking. So let's start with verifying that I understand. You currently have some data, in an array `A`, let's call it. Let's say that `A` is 6x3 = 18 rows, and names+ranges+3xdata = 5 columns (or more if more data columns included). So then, `A(:,1)` are the so-called name values, which are non-unique, in that the same name might repeat for other ranges? Likewise, `A(:,2)` are the ranges, which again are non-unique as they exist for multiple names? Finally, `A(:,3:end)` represents whatever data there is. So the issue, is that given a name, you want to find the rows which are applicable, and see that data over the various ranges? You can use the find function, I think. So if you want a specific `name = foo`, you can: inds = find(A(:,1) == foo); where `inds` will represent the row indices. So `A(inds,:)` will then be only the rows of `A` with that particular name. Of course, you could do the same thing for ranges, just searching on the 2nd rather than 1st column. Structures could potentially work, but from how I understand your problem it seems like it would be messy. Hope this helps somewhat. Honestly, I still am pretty unsure of what you're describing and asking...
You could put the entire code in a while loop check = 1; while check == 1; &lt;play the game&gt; a = input('Enter a 1 if you want to play again: '); if a ~= 1 check = 0; disp('Thank you for playing') end end This will just allow you to loop your code until they no loner want to play anymore
Thanks for the help. I agree on the structures, it was getting a bit too much so I thought Id ask /r/matlab if they had solutions. I did consider the find on the first column, with a strcmp, so my inds will give me all rows. Then Id have to do a subloop to only find certain ranges with another find and a range &gt;= &amp;&amp; &lt; or to find those values and store them. That variable might be 1 to about 8 rows, no big deal. Then Id average. But moving through all the names would require this in a loop and it also gets messy. Thinking out loud here semi pseudocode count=1; for i=1:# of names inds(count,:)=find(var_names) count=count+1 end count=1; for j=1:# of inds indt(count,:)=find(inds(j,1) &gt;= RANGEA_LOW &amp;&amp; RANGEA_HIGH) count=count+1 end indt % For name1, with rangeA, I have indt, which Ill call indt_A % Now I need to loop this again for rangeB, rangeC, ... rangeN % And once Im done, I need to loop everything for Name2, Name3 % up to NameY, and I need to store each of those subsets for each % Name. Anyways, thats where I left off, realizing Id have stacks of for loops or this really strange set of struct or cell variables (I racked my brain trying to figure out the best way) and then trying to address them.
Wow, THANKS!!!! Impressive work on the for loops too!!! It looks like my ticket out of this exhell I had to put up with in the meantime while I worked on my code. Ill let you know how it works! EDIT: It works!!! Since original data had random # for range1 (e.g. it might be 25 or 26.2 or 22.5) I added a simple if statement prefunction to "bin" my data into hard string range1-3 (e.g. 'VALUE25' or 'VALUE35') and output a data cell identical to your sample data cells. Then I converted your values assignment to include more data columns and updated the averaging to average along rows and output in a single 1 x 3 column vector to with averaged data in {3} to {5} per name, per range. values=[data{3}; data{4}; data{5}]; ... ave_name_range_value=mean(name_range_value')'; Final thing, it might be a conflict with my older version r2007b, but the accumarray complains if I use the {} for SZ... has to be replaced with []. accumarray(ic,1:length(ic),{},@(x) {sort(x)}); % errors because thinks SZ is non-empty? accumarray(ic,1:length(ic),[],@(x) {sort(x)}); % works in r2007b All in all, I cant say thanks enough for how much this helps.
It might be easier to just give each card a #1-52. Then you can use two properties: 1. Check the suit by saying mod(card,4)+1; 2. Check the rank by saying mod(card,13)+1; For example, check out the following code: suits = {'Hearts','Clubs','Diamond','Spades'}; ranks = {'A','2','3','4','5','6','7','8','9','10','J','Q','K'}; For example, let's say we pull a random card #28 out of the deck. card=28; fprintf('The suit is %s\n',suits{mod(card,4)+1}); fprintf('The rank is %s\n',ranks{mod(card,13)+1}); &gt;&gt; The suit is Hearts The rank is 3 
The only way is to do repmat(). Make sure you get your dimensions lined up properly. In your case, you can do the following: % setup so I can do the manipulation tauy = rand(360,160,156); f = rand(160,360); % repmat and divide frep = repmat(f',[1 1 156]); % note the transpose of f u_inferred=tauy./frep; The result is that u_inferred is now the same size as tauy.
Did you attempt this at all?
I'm not sure what you mean. Just start your 'x' or 'time' vector at zero: y=[.2 .3 .4 .3 .2] x=[0:4] plot(x,y) it starts at 0 on the x-axis Alternatively, plot(y) set(gca,'xtick',[1:5]) set(gca,'xtickLabel',[0:4]) 
So thanks for trying. I have a matrix (2D) with i-rows and j-columns. The matrix is filled with data using 2 for loops like so for j=1:20 for i=1:250 *some calculations and whatnot* *save all my results on Matrix(i,j)* end end so then I go "plot(Matrix)" And it plots i vs j values. i on the x-axis = these values are luckily increasing by 1 so it just plots 1,2,3,4,5,6,7... However in reality the i-values should start from 0 and not 1. So my graph starts at the x-value of 1 instead of 0. How can I make it so it starts at 0? maybe this graph will help? http://i.imgur.com/vbq8aGT.png I just have a matrix though, not arrays. And it's around 1000 columns....
Do you want to open text files, input text manually or something else? 
I thought about putting it in the array. Then do C = length (array) and then probably take every single letter and made an code to decrypt it.
http://i.imgur.com/UmpOi.gif
Look into matlabs handling of strings. 
I think you may want to look into median filtering. The function is called medfilt2 in matlab. Each output value contains the median value of the neighboring values. Another idea, if you didn't want to use filtering, would be to just find all the indices of your array which exceed a certain threshold, say O(10) for example, (or for which the gradient exceeds a threshold) and set those values to the average of their neighbors.
Can you link to your data or something?
It's a 2D array which is 1024x1024. Through an iterative updating procedure I sometimes see this noise. If you're really interested in taking a look, I can upload a .txt file with this data in it - any suggestions for a good host?
OK in the meantime - [here's an image](http://i.imgur.com/iiOMeUr.jpg) of what I'm talking about -- this is after one iteration, when only one noisey peak is noticeable. After more iterations some more appear (currently rerunning now to get some data to upload).
[Here's the data](https://dl.dropbox.com/u/13387461/SG.mat) that created the plot in my other reply. It only has one peak at this point, but its taking a while to rerun for more iterations, and time for me to head out of the office - I'll update data tomorrow if anybody is interested in this problem :)
Great thanks. [Here is what your cleaned data looks like](https://dl.dropbox.com/u/4724281/cleaned.png). As others have mentioned, a 2-D median filter does the trick nicely. Why does it do it nicely? The median filter will take a mini-array, (I picked a 5x5 block), and go over the entire image, and at every point will compute the median of that block. The median is what is known as a robust statistic, because it is VERY immune to outliers. It will sort all the elements in that block by increasing order, and pick the middle element. That is the median. You can see how/why it doesnt care about the outliers, because you are literally never performing any arithmetic with it. In contrast, a mean filter always performed arithmetic on everyone. The median filter is a non-linear filter, and a robust statistic. The mean filter is a linear filter and a non-robust statistic. (The mean-filter still has its uses though). Rule of thumb, always make sure your median kernel is an odd total number. For example, the 5x5 kernel has 25 elements which is odd which is good. This is because you can then split the elements into 12 + 1 + 12 in increasing order, and the dude in the middle is the one you pick. If your kernel was 4x4 = 16 however, you cant split it this way, and will be forced to perform arithmetic, which you dont want. If your noise is as you say it is here, then in image processing, this is known as 'salt and pepper' noise. The median filter will null out salt and pepper noise easily, and have it running back to its mama like a little bitch. Here is the code: cleaned = medfilt2(SG, [5 5]); [Here is your clean data](https://dl.dropbox.com/u/4724281/cleaned.mat) 
I dont see how filtfilt would help him here, he is trying to remove outliers. Also filtfilt needs parameters which he does not have. 
&gt; Filtering out some noise? Filtfilt will filter the data. &gt; Such that, f(i,j) might be O(102) while all of its surrounding neighbors are O(10-3) In which case my second suggestion will work. 
Thanks so much! I appreciate all your time and effort, especially your explanation! 
Ask and you shall receive bro. Out of curiosity, just what is this data from anyway?
Its a clough penzien evolutionary spectrum, it's used to describe the frequency content of nonstationary seismic ground motion... If that means anything ;-) 
Thats very interesting as my background is actually in signal-processing. Googling Clough Penzien gets me some results about books - is this a book or a method for describing spectra of non-stationary signals? I'm very interested in non-stationary modelling since I deal a lot with that as well! 
Thank you so much, the only part of this project I couldn't figure out!
It's basically the equivalent of a SQL GROUP BY function that can also concatenate. I've been focusing on coding this type of solution for a few years, but was able to express it in Matlab since last year, and it is much easier to debug in that environment. I'm glad that it was able to solve the problem.
I do perception research. I use Matlab + Psychophysics Toolbox for experiment design and stimulus generation. I do simple stats in Matlab and make quick summary data plots, but I use R for more complicated stats and pretty figures. I used to use Matlab for modeling/simulation and machine learning tasks, but am almost completely switched over to R at this point. I have also used Python + PsychoPy for experiment design, but PsychoPy has less support/functionality (for now) so I don't use it often. 
Matlab fulfills a researcher's need to quickly iterate algorithm design and play around with the data. It's fairly good at this, especially if the toolboxes match your needs. On the other hand, it's bulky, proprietary, expensive, non-verifiable, and the language's grammar and semantics are often lacking. It tends to integrate poorly or awkwardly with external codebases. I don't blame your software engineers for being wary of letting any Matlab into their products. Imagine asking for an algorithm for drawing an analog clock face for a [fancy e-ink watch](http://getpebble.com/) and the guys in the lab hand you a TI-83 running what is arguably a pretty nice clock simulation written in TI-BASIC. Despite their assurances that it should work perfectly fine on the watch by wiring it to the calculator with a serial cable, this solution is probably not optimal. The fact that open source alternatives are encroaching on Matlab's territory is a good thing, both for open science and for the health of the Matlab ecosystem. Competition is good. Matlab will be forced to evolve if TMW wants to keep its money faucet running.
Hey, here is a small example how it can be done with char() and double() functions: clc clear all % original text to encode org = 'Hello this is original text'; orgDouble = double(org); fprintf('Original (character): %s', org) fprintf('\nOriginal (double): %s', num2str(orgDouble)) %encoding codedDouble = (orgDouble + 5).*2; codedChar = char(codedDouble); fprintf('\n\nCoded (double): %s', num2str(codedDouble)) fprintf('\nCoded (character): %s', num2str(codedChar)) %decoding decodedDouble = (double(codedChar)./2)-5; decodedChar = char(decodedDouble); fprintf('\n\nDecodet (double): %s', num2str(decodedDouble)) fprintf('\nDecodet (character): %s', num2str(decodedChar)) EDIT: spelling
I am a grad student/research assistant in ME. Everyone here pretty much uses MATLAB exclusively for simple simulations, data processing, and plotting. I recently switched to using Python (Numpy, Scipy, Matplotlib) for data processing and plotting, and I like it a lot. Besides the elimination of licensing costs and complications, Python is more useful than MATLAB for general purpose programming, and it easily does everything I used to do with MATLAB. I like the Spyder IDE interface a bit better than the MATLAB interface also. I doubt anyone else I work with will make the transition, unless they need to start reusing some of my code, heh. 
&gt; It tends to integrate poorly or awkwardly with external codebases. I don't blame your software engineers for being wary of letting any Matlab into their products While it's not specifically Matlab. Simulink is used by a ton of companies. Integrates into external code bases rather well. Compiles straight to C or C++ for a number of processors. All of which can be checked before compiling. I don't see any open source software coming close to its territory. I think TMW's money flow is fine.
Yes - /u/Ayakalam, and /u/biophysicsguy had the right idea with median filtering. Other filters would take into account the outliers/noise too much for me - in fact by dampening them down and "spreading them out," it could perhaps be *worse* off in my applications. Thanks for the help, though, /u/darkscout!
Disk drive R/D here. We use (as one of our many in-house developed tools) an extensive matlab library as a top-level way of doing various things, but it's very intimately tied to a repository of Python scripts as the next layer down. Matlab is great for tweaking and analyzing our large amounts of data
I've been hearing more and more people talking about Python as an alternative and it's piquing my interest. Fortunately, work pays for MATLAB and I'm relatively competent at getting it to do what I want, but part of me wants to branch out a bit. Especially if it handles GUIs better than MATLAB does.
If I were you, and the outliers are as extreme as you say, I'd try simply running a threshold. I.e. if any values are above a certain value (or deviate from the mean by a certain amount) then replace it with a small value (or divide it by a certain amount or whatever).
I'd say give it a shot. Most of the knowledge and intuition I developed in MATLAB carried over to Numpy quite well. If you're on Windows, I recommend Python (x,y) as a nice convenient package that installs everything you need to start. After installation, open up Spyder (included) and go to town. This is a good reference list for MATLAB converts: http://mathesaurus.sourceforge.net/matlab-numpy.html
http://www.mathworks.com/help/aeroblks/aerodynamics.html 
OP could also just use imshow() instead of image() or imagesc() to display the image. imshow() defaults to the gray colormap, unlike image() and imagesc() which default to the jet colormap.
Do you ever make large scale programs or is your work mainly small analysis functions of what? I've used R from time to time. It's obviously a vastly better stats app then the matlab stats toolbox etc even with the matlab dataset class that's copied from R. However, I find it's dev environment, in particular it's debugging unacceptable. I don't know how anyone writes more than 50 lines of it a time without at least thinking about committing suicide. Bottom line, I just assume that almost no one does anything in it but small functions to get some quick sat. So, do you ever write more than 50 lines of it at a time?
Mechanical Engineering PhD Student here (almost done, I think). In my lab we do Automotive research, and almost everyone uses Matlab for just about everything. Simple models, data analysis, complex figures, etc. Our entire experimental data post-processing package was written in Matlab. There is little to no competition in these areas, and the people that use Excel for just about anything is dropping all the time. However, for more complicated modelling we use different packages. Systems level stuff is either Simulink (for the controls guys) or GT-Power (for the Engine/Combustion guys). High resolution CFD (what I do) is almost entirely in Fortran. This is due to the large legacy code base of very complex and very powerful models that has grown over the course of dozens of previous PhD's. But then I go back to Matlab for postprocessing and visualizing my simulation results. 
If I understand you correctly, you just need to set the "Cluster" value to 'row' or 2. edit: Oh, I see what you mean. You need to do Constrained clustering. I don't think matlab implements that but you may be able to find a script that does it....
The thing is I've fielded any number of significant modules in matlab and, despite all the software engineering (SE) ire I've dealt with, NEVER is it the matlab that's anywhere near the top of observed bugs (pre fielding or fielded). I’ve always thought, once you meet the basic speed and bug requirements, that the only thing that matters, i.e. for product success, is algorithm performance. I can’t tell you how many times I’ve run into alg groups run by SEs where they make a joke of a prototype (perhaps in matlab) and then spent almost all the rest of the development cycle messing around with their software design (OOP etc stuff). All their meetings tend to be about software (vs algorithms). The alg dev process ossifies and so in the end they end up with a very elegant, from an OOP/ SE perspective, module but suboptimal algorithms simply because that’s not where they put their time and worse is that the large amount of software classes etc represents an investment they don’t want to give up. I think that’s a bad tradeoff as it’s the algorithm performance that drives the product success (again as long as the bug and speed requirements are met) SE people have this tendency to think of alg dev like SE where you can upfront determine the proper software which therefore is amenable to abstraction and then becomes a “done” thing (i.e. algorithm is “done” as per the Gantt chart). From my experience, (non trivial) algorithms are never done. This is particularly true if the nature of the data is changing due to changes in the underling platform that creates the data (e.g. a new DNA sequencing machine). I can’t tell you how many times I’ve listened to SE run algorithm groups present their algorithms where all I’m thinking is “and what did you do in month 2 let alone year 2” or I’ll ask them about whether they tried something and they’ll just say “we didn’t have the time for that”. Note, this NEVER phases them. I think matlab lets you spend time doing maximum algorithm dev. It reminds me of what Stephen Colbert said about his training and Second City TV where he learned to wear his characters “as like as a cap” that he could just remove and replace. I guess there is the question of my claim of meeting bug/speed specs. To that end: 1) My domain of mainly signal/image processing =&gt; matrices, So though my algs might be mathematically complex, they aren't very complex from a software engineering point of view. They don't need polymorphism, factory classes etc, arbitrary concurrency (see below). This just makes it much less likely to have bugs and much easier to debug (little behavior that can only be observed at run time when the polymorphism is resolved). Typically the API just needs to be one function where the input is, for example, an image and the output is "the answer". Just more Simplicity==&gt; less opportunity for bugs 2) Libraries – Matlab has lots of good, fast, trustworthy, libraries etc that allow me to concentrate on other things. 3) The debugger and visualization– given that my algs really match matlab’s matrix centric language and tools, its so easy for me to debug by stopping in the debugger and using all the (matrix) visualization tools, on the fly. I have noticed that for all their protests, the SE people seem to be impressed by how quickly I can locate and fix a bug. I’d like to think it’s because I’m just so damned smart but the truth is it’s because of the Matlab IDE etc. 4) By the time I field an app it's been run with a huge amount of data both simulated and real so if there was a problem it would come out well before shipping. Of course, I use error handling (try/catch) to ensure nothing really horrible happens and if unexpected conditions/bugs occur they’ll often throw error conditions that get logged for debugging purposes (but they don’t crash the app!) 5) If the matlab is a fielded a compiled DLL, I put it in a separate process to ensure safety (e.g. if memory is an issue you can bounce that process and release the memory). Though I'm sure this will make people wince it seems every project I've seen fielded, the other stuff is mainly in Java and/or C++ and ends up with so many more memory bugs. 6) One stop shopping – It’s just harder to debug algorithms that uses multiple languages (e.g a combo of python, R, C++) 7) Not much need for free-form concurrency which also seems to lead to a fair amount of bugs. Of course, matlab has some internal concurrency and with the parallel toolbox has some more but it’s not like the free-form concurrency that a lot of standard software controlling apps have (arbitrary processes that have to synch on arbitrary conditions). Creating concurrency bugs is easy and debugging concurrency issues is hard. (And if is appropriate to call my compiled matlab dll module that way I'll let the the non matlab calling/controlling code do that) 8) Speed – most of the problems I see with speed in matlab is due to bad matlab programming (not vectorizing). Recently, I just about doubled the speed of a large matlab code base (developed by several people over a year or so) by vectorizing. Using the profiler, it took me a week. Normally, what happens is that there may be a function which isn’t amenable to vectorization but I can find that with the profiler recode that in C++ =&gt; mex. 9) Given all this, and given that most of what I do ends up with a classifier, there might be bugs but that, in the end, just figures into the classifier performance. That is, even if there was some small bug, it might causes a misclassification but then it becomes part of the error budget and so its put into perspective (which is to say that if such a missed bug (not noticed by error handling) caused 0.1% misclassification I’m not as worried about it as some algorithm issue that seems to be responsible for 3% misclassification.) 
Thanks for the info. One transformation you may or may not have heard about for analysis is the Hilbert-Huang Transform, which was motivated by having to deal with non-stationarities. That is/was the only one I am aware of. 
Is that what you would actually call it, constrained clustering? I think part of my issue is just nomenclature, and that I can't wrap my mind around how you do unsupervised analysis with supervision.
Electrical engineer doing audio dsp. Algorithm design is done in matlab and much of our testing platform is as well because the utilities were originally written in matlab. We have an entire team dedicated to porting matlab to c.
Systems engineer at an electronics manufacturer. I use LabView predominantly to create hardware controlling programs. I used MATLAB a lot in school but they had never even heard of it at my job. I convinced my bosses to buy MATLAB so I could use raw height data to calculate pin co-planarity, which required algorithms that I could not do in LabView. I hate LabView graphical programming. Unfortunately, my company already owns the full LabView development suite so I can't justify spending several grand more for the toolboxes I'd need (instrument control, simulink) to do what I can do in LabView. 
This is what I've done for something similar. filename = ('file.txt'); fid=fopen(filename); data = textscan(fid,'%s',3000,'delimiter','\n'); [rows cols] = cellfun(@size,data); N=N; for ii = 1:rows temp = data{1}{ii}; if strncmpi(temp, 'HEADER',6) count = count+1; ind(count) = ii; for jj = 1:N temp = str2num(data{1}{ii+jj}); if isempty(temp) == 0 DATA(jj,count)= temp(1); else break end end end end 
&gt; Normally, what happens is that there may be a function which isn’t amenable to vectorization but I can find that with the profiler recode that in C++ =&gt; mex. Allow me to introduce you to [MATLAB Coder](http://www.mathworks.com/products/matlab-coder/), my friend.
As I pointed out to OP in another comment, have you tried using [MATLAB Coder](http://www.mathworks.com/products/matlab-coder/) to perform the MATLAB to C conversion automatically?
It eventually becomes silicon so mips count.
R I use for more complicated analysis like mixed-effects modeling, psychometric function fitting (there are some nice packages for both), some simple modeling, and making plots. Once you get your data in an R-friendly format, it's relatively easy to do a wide variety of stats/machine learning with just a line or two. As a result, most of my R code is pretty short. I agree with you that R can be a pain as soon as I need to start writing complicated functions. It has more potential for being slow and some people run C code from R to get a speed boost. I think this is a huge pain (from a coding and debugging standpoint), so for situations where this might occur, like image processing, I use Matlab. Basically, I'm lazy and my choice of language depends on the available libraries for the task. R has better stats libraries. 
The compiler just packages your MATLAB code up with a redistributable version of the runtime so you can run it standalone without a MATLAB license, but it doesn't provide any speedup. Coder actually compiles your MATLAB code to C, which usually gives a (significant) speedup. Yeah, Coder should probably actually be called "compiler"...
Coder reminds me of the old matlab compiler where it compiled to C/C++, a lot of functions weren't supported (although for the coder the question is "what is supported"), and then you optimized the C/C++ by hand.
Why not do it in Simulink and let Mathworks write the C for you?
damn, that helped a lot. Thanx!
How are you writing to CSV? Because fprintf(csvFile,'%f',now) would correctly put the decimals in there. Also, how are you viewing the CSV file? Excel might be the one doing the rounding.
http://docs.psychtoolbox.org/GetSecs 
tic toc?
But using that I can only get time stamps that are relative to the start of the experiment/script, right? I'd like to have something that records the date and time, if possible. Am I asking too much?
The crucial part of it is this, I guess: dlmwrite(fPath, paradigm, '-append', 'delimiter', ','); I use '-append' because I have a chunk of code that writes the column names to the file right before that part. In column 32, 'paradigm' has the time stamp that has been assigned using paradigm(t, 32) = now; ... on each trial t. I read in the data using R's read.csv() function.
Have you opened it in a text editor to see if it's there? It does look like you can set the precision with dlmwrite: http://www.mathworks.com/help/matlab/ref/dlmwrite.html dlmwrite('myfile.txt', M, 'delimiter', '\t', 'precision', 6) dlmwrite('myfile.txt', m, 'precision', '%.6f', 'newline', 'pc')
Opened it in a text editor and it's written as "3533e+05". **Specifying the precision did solve the problem!** Thank you very much. I still feel like I shouldn't be using 'now' to begin with. Any suggestions for an alternative that is easier to interpret but lets me compress the same amount of information into a single column of my matrix?
Depends on what you want to do. If it's just elapsed time you could use tic/toc. Start 'tic' when you run your function then every time you run toc it will create a time. So show the dialog 'toc', user clicks something 'toc', user does something else 'toc'. Then they will all be relative to the tic. Or if you just need relative time you could do show dialog 'tic' user does something 'toc'.
I was looking for something that tells me which year, month, day, hour, minute, second, and millisecond of an event. It should be accurate to at least ~100 ms. I was trying to figure out your code snippet. This is what I tried: start_time = GetSecs; [~, keyCode] = KbWait([], 2); fprintf('The %s key was pressed at time %.3f seconds\n', KbName(keyCode), 'start_time'); I don't understand why you put start_time in quotes, though. If I do, it gives me this rather strange output: The d key was pressed at time 115.000 seconds The tart_time key was pressed at time &gt;&gt; d Without the single quotes, the output is: The d key was pressed at time 326783.236 seconds &gt;&gt; d I feel like I am missing something very obvious.
Yeah, /u/kbank4130 suggested using tic and toc as well. But I don't think it contains all the information I want. [This is my reply to his comment](http://www.reddit.com/r/matlab/comments/1buqep/recording_time_stamps_with_millisecond_precision/c9aboss).
Well what do you want to record? Reconding the start of an experiment down to the millisecond seems excessive. Recording user response down to the millisecond is not. If you just want the hour/minute the user started the test then now should be fine.
I'd like to have the means to reconstruct on which day and at what time the experiment took place (i.e. the data was recorded) as well as the interval between each trial. 'now' seems to give me all of that so that's cool. I was just wondering whether there'd be another way that would be preferred and is more easily interpreted outside Matlab. Thanks!
http://www.mathworks.com/help/matlab/ref/clock.html, should be a vector of double data types. Keep in mind though, accuracy may vary because of the computer set up. I'm not sure how time is kept on machines, but I think there is an inaccuracy that's less than machine epsilon, so it shouldn't give you trouble unless you're making long runs.
You might want to ask on r/bioinformatics. 
I don't exactly understand what you are trying to do but you are correct the quotes were a typo sorry 
I would double check that whatever you use is actually as precise as you want. Even if something can display the time to that many decimal points, it doesn't mean it's correct. I'm not sure if it is possible to do something like this reliably, on a desktop computer, with Matlab.
Didn't open your link cuz I'm in mobile. Proper loop format goes something like this. for i=1:100 i end This will print the numbers 1 through 100. Hope this helps.
There are about 100 different ways to accomplish this. A loop is about 85 of them. Attempt something and bring us some basic code, then we can help guide you. 
There's a typo in the assignment. Within the summation, there should be an "i" somewhere, probably sum(0.1*i). At any rate, the only way to get good at programming is to work at it. Eventually figuring out a way that will work will come quicker than before. 
Not necessarily. There's no variable that's changing in the summation. You're just summing 0.1 1000 times (i.e.- 0.1*1000) That is, every loop, you're adding a fixed about (constant=0.1) and not a variable about, which would imply using "i" within the summation
Hint: You're going to use a "for loop" for each summation. The rest of the mathematical operations should be fairly straightforward
Would changing the format help? format long This just changes the way numbers are displayed, but it might put it into the form you're looking for
Vectorize if you can. That's the point of matlab. Think matrices. Matrix Lab. Matlab. 
Changing the precision in the function that creates my CSV files helped (dlmwrite as a parameter called 'precision' and I set that to 6, as suggested by /u/darkscout.)
Create a variable called something like total_sum and make it 0 to begin with. Then use a for loop to re-create the summation in the assignment. On each iteration of the loop, at to total_sum. After everything is summed up, compute the absolute difference (i.e. subtract the total_sum from the number in front of the summation). That's one approach. Like /u/do_hickey said: show us some code and we'll be able to point you in the right direction.
Cheers, I'll start checking it out.
What have you tried so far? Because this is... 1st week stuff.
This. Here's another hint: You can create a vector with this syntax: variable = startNumber:increment:endNumber So x = 2:2:10; becomes [2 4 6 8 10] Hope that helps.
Sure, I feel that is incomplete though, or even lazy.
Datestr http://www.mathworks.com/help/matlab/ref/datestr.html 
X=.1*ones(1000,1) Y=sum(X) 
Or 200 - 2 * (1000 * .1) 
Is it because there is no "approx" in your definition of "fapre"? Maybe it's returning 0/0. Next time, insert some code that will let you check parts of your code. e.g. see what "macexp(n+1) - macexp(n)" is for each step.
I've done that, and it works out. We were instructed to use "approx" as a dummy variable to act as a place holder for whatever we chose to enter, that being macexp(n+1). Also when I ran it fmacexp diminished after the 4th iteration (n=4) to 0, which is definitely not supposed to happen. When worked out by hand it works fine but when using the AF's it screws up.
Would including something as simple as "approx=1;" be enough? Or would I have to replace macexp with approx in the function, and then just input macexp within the loop?
how can I get in touch with the mailing list?
Use MRIcron. The mailing list can be found on the main SPM site.
Do you know* which variable I should use to define Q and h?
you could use the Symbolic Toolbox. Just define your variables at the beginning by saying: syms Q3 Q4 h1 h2 h5 h6 h7 h8 then you can continue on your merry way. But looking at your problem, it looks like you have 8 equations and 8 unknowns. So if I'm interpreting this right I would change equations 3 and 4 such that Q3 and Q4 are in the h vector. This way you would have a set of linear equations that can be quickly solved in Matlab using the function linsolve(). 
You need to multiply your *picture* by the matrix [0 1; -1 0] first. And then explain what your notation here means.
Make the threshold bar a separate plot at the end and use "hold on" right before this plot command
Two things: 1. Make your threshold bar a separate plot. I'm guessing this never changes, so it's a waste to include it. 2. If you want to speed everything up, use drawnow() instead of pause(). Try this: subplot(1,2,1); hold on; speedgraph = plot(iterations_speed,magspeed,'r','linesmooth','on'); threshbar = plot(iterations_speed,threshold_bar,'color',[0 .5 0]); % 'g' is ugly, use darker green set(speedgraph,'YDataSource','magspeed','XDataSource','iterations_speed'); grid on; axis square; later... for i = 1:N iterations_speed=.... magspeed=.......... refreshdata(speedgraph); drawnow; end
Can you quickly explain what hold on does? seen it a few times but never knew what it meant
Actually just looked it up. I see
Yes, I got access to it today. I wasn't able to find any of the answers to the chapter exercises though, which was slightly frustrating. The website mainly has artwork and a few sample data sets. Let me know if you still want all this and we can set up a dropbox transfer. 
Thanks, it runs much smoother and I follow you, but the threshold bar still doesn't show up.
Yes, I did try that. The second one appeared to not work. How would I go about implementing the first one? Would I need to compile that code into a .java file or just paste into a text document?
Umm, you would just paste it into a text document, but the text document has to have a .java extension. .java files are text files that are compiled to .class files.
Not sure I quite understand... you have a triangulation and a point, and you want to know the vertices of the triangle in which your point is. Is this what you mean? In this case: DT = DelaunayTri(X); index = pointLocation(DT, point); neighbours = DT.Triangulation(index); coordinates = DT.X(neighbours,:); Now each row of *coordinates* contains the coordinates of one of the vertices of the triangle in which your input point is. I hope this helps!
What platform are you on? If it's Linux or Mac you can call curl with the command line interface.
Can you give a test file that reproduces the error?
I believe KbName('1!') will get you the keyboard 1 regardless of OS. You can always figure this out by using KbName backwards: KbName(49) returns 1! Not sure why you can't detect multiple keypresses on Windows. You could try looking at the last two elements in the keyboard queue (see the various KbQueue commands). You can also try posting to the psychtoolbox yahoo forum.
Thanks a lot. The '1!' thing did the trick. I knew it'd be something obvious! I only really need to detect two key presses at the same time which works just fine so I won't bother with this for now (there are more important things on my to-do list for this project than reading up on potential future problems, I you know what I mean). Cheers!
&gt; Then, I want to draw a path from one random vertex to another random vertex without crossing the given boundary. 1. Are the vertices referenced in this statement vertices of your delauney triangles? Or are they random points? 2. Is the "given boundary" the external boundary? 3. If the two vertices are *not* delauney triangle vertices, but rather just two random points in space, are they restricted to being inside your closed loop boundary, or might one be inside and one outside?
Well, you should try paring the file down until you have the minimum set of commands the reproduce the error. That will give you a pretty good indication of where the problem lies.
I realise that, however the script is for a specific series of reactions and conditions hence it cannot be pared down or simplified. To simplify I would have to remove complex reactions which are what characterises this issue. Specifically its a series of ODEs that are highly non-linear and exceptionally stiff due to extremely high temperature dependence. I do not think it would be possible to replicate this error with another script. Hence I asked for a general case.
[Here](http://i.imgur.com/9rjq7Q1.png) is a drawing of what I am talking about. The black polygon is made up of the external edges of a bunch Delauny Triangles. See [here](http://stackoverflow.com/questions/8997099/algorithm-to-generate-random-2d-polygon/9008916#9008916). 1. Yes. A curvy path that "navigates" within the boundary of the "polygon" from one vertex to another (e.g. red to blue in the picture above). 2. Yes, I am talking about the external boundary. 3. They are triangle vertices, but not necessarily the same triangle. I hope that clears things up a little more.
This should work. Note because your 'walk' is exactly half of the 'points' you are only going to have two values and it will be one after the other in sequence until the end. points = 1:100; n = numel(points); iterations = 1000; %for example indices = zeros(1,iterations); indices(1) = randi(n); walk = 50; for i = 2 : iterations r=randi(2); if r==1; indices(i) = indices(i - 1) + walk; end if r==2; indices(i) = indices(i - 1) - walk; end if indices(i) &gt; n; indices(i) = indices(i) - 100;end if indices(i) &lt; 0; indices(i) = indices(i) + 100;end end
Write psuedo-code before you start. It's better to get a good idea about how your program is going to flow rather than just an idea.
^ What he said. Every time you find yourself writing a *for* loop, ask yourself: can I do this as a vector/matrix operation? It'll almost certainly be faster way, as MATLAB is designed to handle matrix operations (hence the name). That said, there are plenty of occasions where you just have to use a loop. This is often the case when you're handling really big sets of data - you will rapidly run out of RAM trying to, say, FFT a multi-million-point matrix in one go (as I found). In these cases, you can try parallelising by using *parfor*, but it's not perfect. Finally, at the end of the day MATLAB is a high-level language and it just isn't going to come close to the speed of other languages like C or FORTRAN for a lot of tasks. Personally, I use MATLAB for design/testing/playing around, but if there's a CPU-intensive task I have to do often I'll re-code it in another language.
matlab has lots of little specialized commands that help cut down on the code. I'm quite fond of find, length, fliplr, as well as all the colon usage. Also avoid using horzcat and vertcat.
*sigh* This is really vague and comes up really often on forums online. In my opinion, it isn't really about knowing "tricks". That is like saying, "What are some good tricks to efficient programming?" It isn't necessarily about tricks, it is about knowing the system, understanding where inefficiencies lie, and sometimes more importantly, understanding [big O notation ](http://en.wikipedia.org/wiki/Big_O_notation) and what the structure of an algorithm means to its run-time. I'm not talking complex stuff here. Just, "What does putting a for loop inside a for loop do for my runtime?" (hint, it can ^2 the runtime) "If I double the length of this vector, what will it do to runtime? Double, quadruple, 10^2 increase?" (depends on the code, could do any one of those things) Often the problem lies in some nuance. It isn't that you didn't or couldn't "vectorize", it is often that you've created some hot-spot or used some piece of inefficient code at just the wrong spot. Matlab has the perfect solution for you, it's called the profiler. help profile This thing is incredible. It can show you the line in your code that is taking the most time. You can even drill down deeper. If it is an *.m function, then you can keep going deeper until you've found the line or lines that are sucking up time. It can really help you evaluate where things are going wrong in slow code. Sorry about the slight rant, I get this a lot from people looking for the magic answer that will turn all their code into a blazing cheetah. Sometimes the answer is just "more hard work and learning". 
Hmm. So, I could input the polygon and a line segment from my "random" inside point to the vertex (A or B), and count the number of intersections. If it's just 1, the vertex is visible, if it's &gt; 1, not visible. Thank you! Edit: But, the "vision" line can overlap with the boundary of the polygon...
Since you are wrapping at 100 wouldn't you just retrace the same two spots 0 and 50? Often with a random walk you would have random length. Say the following pseudocode for ... maxWalk = 50 nextWalk = UniformRandom(-maxWalk, maxWalk) currentPosition = currentWalk + nextWalk end for (UniformRandom isn't a matlab function, randi might be the right one)
Profile is fucking fantastic. 
 % make figures look pretty set(0,'DefaultAxesFontName', 'Times New Roman') set(0,'DefaultAxesFontSize', 14); set(0,'defaultfigurecolor',[1 1 1]); set(0,'DefaultFigureWindowStyle','docked'); set(0,'DefaultLineMarkerSize',12); set(0,'DefaultAxesColorOrder',... [ 0 0 1.0000;... 0 0.7500 0;... 1.0000 0 0;... 0 0.5000 0.5000;... 0.7500 0.7500 0;... 0.2500 0.2500 0.2500;... 0.9191 0.3939 0;... 0.3939 0 0.9191;... 0 0.9285 0.3714;... 0.9191 0 0.3939;... 0.4472 0.8944 0]); set(0,'diary','on')
&gt;In order to make a subsystem in Simulink, highlight the blocks you want in the subsystem, right click, and hit create subsystem You can also use CTRL-G instead of the menu.
I think your pre-edit sentence is valid, no? 
At the very least, I think its a starting point.
I love ctrl-I, I learned it about halfway through my introductory Matlab course I discovered it, use it all the time now.
Is it free?
Nope, IIRC, it's a $5,000 add-on.
Whoops, correction: $6,500.
bsxfun all the things! (also, use multicore aware builtins http://www.walkingrandomly.com/?p=1894)
quit will quit, and sometimes that's the best damn function you've ever seen....
Python save us. 
Running a function in breakpoint mode. Use the [-] to hide blocks of code. Using .(parens) notation. Using Profiler 
I consider you my brother
Right? Dude, I mean, "just code up what you need in C" - ARRGGHHHHHGHG!!!! I saw red everytime they would say this. Its like, I wanted to take them by the ear and say: "The human race doesnt fucking develop by re-inventing the fucking wheel everytime we need one!!" Gah! I swear, it is amazing how some companies can stay in business with attitudes like this. Someone is getting his cock sucked somewhere because I see no other way. 
Upvote for .(fieldname)! Makes for much more sophisticated referencing of data structures, I use it for everything. Ninja (?) edit: I am going to use Profiler ALL THE TIME now.
Same thing that OP posted, automatically indents everything, just makes everything look much neater 
The people who use C/C++ are the worst. You KNOW they have no way of doing visualization or analysis at run/debug time. If I see one more fucking person dump shit out into a CSV file, often without even column headers, so they can do their "analysis" in fucking Excel. They end up with shit but the SEs don't give a shit. That being said, the python thing, if I'm to believe the what I've read that there exists configs have a good IDE etc, might be a decent game and matlab is fucking expensive. I've decided I'm obliged to take a real thorough look at it. 
Profiler is great, makes it so easy to speed up your program by a significant amount by just making changes where they're actually needed 
Yeah, I am a total python noob, but I am going to make a huge push for it when my work calms down a little. I hear good things about "Python(x,y)". Ive dabbled in python before and its not hard at all, just takes some getting used to, its still a higher level language. If you know ML/Python/C++, I think you'll be pretty future proof for the next 10 years or so. 
Oh sweet, auto smart indent! Love it!
So is python(x,y) include an IDE? The IDE/debugger thing is a real concern of mine. Also, do you happen to know where iPython and Pandas fit, if at all, into this milieu? A lot of people seem to have positive things to say about those items.
WAT! I spent about an hour earlier today manually cleaning up some code, most of which was spent on indentation terribleness. 
I think Python(X,Y) includes an IDE yes. And in fact, I think its IDE is "Spyder". iPython is 'interactive' Python, but frankly I do not know how it fits. To be honest, I find the multitude of all those names of Python this and Python that a little annoying, no one really says what/where they fit exactly. Is it an IDE? Is it a compiler of some sort? Is it a library? Skin? Its kinda a maze, although probably one of those things that clears up when someone delves into it. I think for windows machines, PythonXY is a good starting point, as it has an IDE, and is the most 'matlab' like from what I hear. I can let you know as I experiment with it more in the near future. 
This is very helpful. Thanks a lot.
I think so too. Thank you for the help.
I wish every editor for every language had this. I know there are a few PHP/C beautifiers out there but it's not built in.
Simulink can be controlled programmatically. I have a whole host of scripts that will do stuff I commonly do in Simulink. For example in all of my Simulink models I like to turn on all Library Link displays. Turn on sample time colors. Turn on Wide Lines for non 1x1 signal vectors, etc. set_param(model,'WideLines','on') set_param(model,'ShowPortDataTypes','on') set_param(model,'ShowStorageClass','on') set_param(model,'ShowTestPointIcons','on') set_param(model,'ShowLineDimensions','on') set_param(model,'LibraryLinkDisplay','all') set_param(model,'SampleTimeColors','on') set_param(model,'SampleTimeAnnotations','on') 
Thanks, I'll try this out as well as YouCanCallMeKhal's one. I realise that it would be the same two points every time this kind of fits into an overall problem I am working on. I've just asked YouCanCallMeKhal the same thing but would it be possible to have this output every point the person walks on? As in ...2, 3, 4, ...
Wow. Master student of geomatics here. Didn't know about profile. That thing is going to save me some time and increase my understanding of matlab!
&gt; can I do this as a vector/matrix operation And it's something that comes with experience. Some of the crap I vectorize now I would have never thought possible when I started. You can play lots of 'tricks' with indexing to get stuff vectorized.
 eval(['!explorer ' cd '&amp;']) Opens a windows explorer window in the current directory. There is a similar Mac/Linux equivalent. I have this in a tiny .m script in my default work MATLAB folder.
In this code, you could output the points that are walked on with something like: points = 1:100; n = numel(points); iterations = 1000; %for example indices = zeros(1,iterations); indices(1) = randi(n); walk = 50; steps = zeros(walk,iterations); for i = 2 : iterations r=randi(2); if r==1; indices(i) = indices(i - 1) + walk; end if r==2; indices(i) = indices(i - 1) - walk; end if indices(i) &gt; n; indices(i) = indices(i) - 100;end if indices(i) &lt; 0; indices(i) = indices(i) + 100;end if indices(i)&gt;indices(i-1); steps(:,i) = indices(i-1):1:indices(i); end if indices(i)&lt;indices(i-1); steps(:,i) = [indices(i-1):100, 1:indices(i)]; end end This is assuming that walk length is less than number of points, such that if location at i is less than location at i+1, the steps are straight between them with no wrap around.
I haven't come across anything like this myself. What do the results look like? Are they close to what you expect? One of the reasons I prefer Simulink over MATLAB for solving ODE's is because it's easier to debug.
This would probably be easier as a function: function out = change(vec) [r, c] = size(vec) for i=i:(r-1) out(i:1) = vec((i+1),2)-vec(i,2); end Then run it from the command line as: &lt;outputName&gt; = change(&lt;inputVector&gt;) or something like that.
Oh that makes sense, thanks
As near as I can decipher you are just looking for the difference between adjacent entries in a vector. That is exactly what diff() calculates. The syntax is fairly simple: change = diff(vec); As far the user specified variable name, look at genvarname() and see if that is sufficient for your needs. Without knowing more specifics on what you are trying to accomplish it is a bit difficult to offer much more advice than that.
Yup, up to a point, then it goes mental and eventually exits! 
What exactly is undefined?
Quite often I use functions like repmat, reshape and meshgrid to put large amounts of data into a mode that can be vectorised. 
After I am confident that my code is working properly but just taking a long time to run (around 30 to 40 minutes), I convert some sections to C and either call it directly or use MEX. Sometimes it isn't possible to convert the whole code to C due to the number of useful toolboxes MATLAB has, so this is a very nice option.
A couple of things: 1.) use the pwd command to verify that you are indeed in the same directory as the function. 2.) Copy and pasting the function name is a bad idea. Matlab finds the function name by the physical name of the file, and not the function definition line in the .m file. Example: someFunction.m contains function [x,y] myFun(z), you would call this from the command line as someFunction() **NOT** myFun. 3.) Use the commands path to view the path, and addpath to add folders to the path, and pwd to list the current directory you are in. Matlab looks for scripts in any folders in the PATH variable, and the current working directory. Use ls to list the files in the directory and make sure that the file is physically in the directory, and that it has the right name. 4.) After TA'ing many undergraduate matlab courses, if I had a nickel for everytime a student had problems with exactly this, I'd be fairly wealthy.
Caveat: Locations added with addpath do not persist when you restart MATLAB.
Thanks for your response. (2) All the functions are named according to the function handle within the function. For that matter, Matlab complains when these don't match, so I can confirm that they match across the board. (1+3) I can confirm that the working directory is in the path (using the pwd command), and that the functions are in the directory. Again, this problem persists for many functions in the directory, though not all of them. (4) I'm not an undergrad taking a programming class; I've built an entire data processing pipeline in matlab on the same machine and it all works smoothly in the OSX environment. The thing that really gets me is that when I hit the "run" button from within the function editor, I get the same error. What would cause that?
I wonder if it is a file permission error. I've had that sometimes when copying OSX files to windows for some reason... make sure that they are owned by your user and full permissions... other than that, sounds strange
Maybe? I just tried creating a new function (a duplicate of an existing function, which is dependent on other functions in the working directory - none of which would run) and saving it in the WD, and it worked just fine. Furthermore all other functions in the directory suddenly worked as well, and it held up after moving the entire directory to a different folder. So it's working fine now, but I'm still madly curious as to what happened and why. Could it be that matlab doesn't actually initialize/compile user-created directories the same way it does its own, but that step is triggered once you create a new function in that path? If that's the case, you'd think other people would have seen this problem by now...
zscore your data, and throw out anything &gt;4 std deviations from the mean. This will pretty much guarantee grabbing your outliers: http://i.imgur.com/0YMva1C.jpg Here's the code I used to generate that figure: load('SG.mat'); z=zscore(SG); scrsz = get(0,'ScreenSize'); width = scrsz(3)*.9; height = scrsz(4)*.9; left=(scrsz(3)-width)*.5; bot=(scrsz(4)-height)*.5; f=figure('outerposition',[left bot width height]); set(f,'renderer','opengl'); axes('position',[.03 .03 .47 .93]); surf(SG,'edgecolor','none','AmbientStrength',0.7,'linesmooth','on'); lighting phong; camlight('right','local'); title('Original Data','fontsize',24,'fontweight','bold'); grid on; axes('position',[.53 .03 .47 .93]); SG(abs(z)&gt;4)=0; surf(SG,'edgecolor','none','AmbientStrength',0.7,'linesmooth','on'); lighting phong; camlight('right','local'); title('Std Dev &gt; 3 removed','fontsize',24,'fontweight','bold'); grid on;
So you're trying to extract each inertia matrix from the array of matrices "I"? Try using cell2mat(I(n)). 
You don't need that many for loops. for i = 1:ndof Inertia = I(:,:,i) end is enough. edit: also, when creating the 'I' matrix I would use cell arrays instead of a 3D matrix, e.g. I{1} = 3x3 matrix, I{2} = 3x3 matrix etc. Then you could simply use each cell array (I{i}) when doing the multiplication with the 3x1 matrix and you won't need to create that Inertia matrix. Both ways of course work, the one I'm suggesting I feel is more intuitive.
/stupid fail function fire_y_Callback(hObject, eventdata, handles) handles.fire_y=str2double(get(hObject,'String')); SG = startgoal(handles.robot_x,handles.robot_y,handles.fire_x,handles.fire_y); SG = sgplot(SG); legend([A.axes,Os(1).axes,R.axes,S.axes,G.axes],'Arena','Obstacle',... 'Robot','Start','Fire');
Thanks!
I initially tried your method before to no avail, however I was hoping that passing one value at a time would work. I just tried your method again, but I got the exact same error except for: Error in DHKineticEnergyCombined (line 37) Inertia = I(:,:,i) (ie. the point in the code when I try to grab the values from the matrices) Also when trying the cell method I got the error: Index exceeds matrix dimensions. Error in DHKineticEnergyCombined (line 37) Tw = Tw + 1/2*OmegaTrans*I{i}*Omega Error in Aex_P5_28 (line 68) Tv =DHKineticEnergyCombined(dq,thi,ali,di,ai,rho,dcs,ms,I) 
I think ndof might be larger than the number of 'I' matrices, i.e. you get an error when the program tries to grab an 'I' matrix that doesn't exist. Have you tried removing the semicolon after the Tw function inside the for loop to see if it at least goes through the loop once?. I'd also try printing out all the values you use in the for loop to see if they're of the correct size. That's basically how I do it when I get errors. I remove semicolons to print out values to find where things go wrong. The root cause of errors is often not in the line that makes the program stop. edit: Just saw your edit. That's what I guessed ;) To avoid such errors you shouldn't assign numerical values whenever possible and just use variables, e.g. when you define 'I' it should be a 3x3xndof matrix.
I highly recommend "The Elements of Matlab Style" (978-0521732581) as a style guide. It's not going to help you learn how to code in matlab, but it will help you to write good code when you do.
so the top for loop needs to be: for i = 1:size(I,3) ... end
Mastering Matlab 7 by Hanselman and Littlefield is a good one too 
Am I just being overly oldschool to say that I usually really like the MATLAB Documentation?
Not at all. I feel like once I become a little more used to working my way through structuring codes properly, more of the MATLAB documentation will be helpful to me.
Thanks for the other recommendations!
Hey, sorry that I don't remember the commands of the top of my head. -The first step is to get a specific colour range for each fish. You do that by getting some averages from the images. -The next step is to apply these colour ranges by thresholding the images and receiving binary images. -You can then extract the connected components from these binary images. -On these binary images you can calculate something called the "Image Moments". These image moments are properties of the shapes (similar to the area, centroid etc.) Specifically, you may wan to look at Hu's Moment Invariants, that are properties of shapes, that are the same for each shape, regardless of the scale or rotation of the shape. That should get you going. If you need more in depth help, you can ask here or google the specific keywords. Edit: fixed formatting
Actually have this book and have used a bit of it. Really should finish it and utilize all the information, it is very good. The MATLAB books recommended by my professors actually failed to comprehend the information on how to do the assignments I needed at the time, basic ones at that. Found this one on my own, and cleared up a lot of information.
There seems to be an 8th edition out now too.
If the fish outlines/shapes are very distinctive, you could use edge and regionprops to identify where fish are in the image and then do some form of texture analysis on the regions of the image tagged as fish to determine which kind of fish a particular region corresponds to. 
thanks for your help. Could I perform a similar algorithm for grayscale images? Here is an example of an image I would be using. Basically the shape of the fish is very robust compared to the background and I hope to be able to outline fish and maybe highlight its lateral line (the gray/white break horizontally across the fish's body) http://i.imgur.com/wqyMnaz.png
The radon transform is inherently a loop-based operation and Matlab is dog slow at it. MEX + OpenMP are your friends here. The built in radon/iradon commands call MEX'd implementations, but they have some problems of their own.
For fun, here is a way to do it without loops: h = [12 5 4]'; step = 0.5; D = repmat([0:step:max(h)], size(h,1), 1); D(repmat(h, 1, size(D,2)) &lt; D) = 0 This is somewhat obfuscated, doesn't use memory nicely, and probably less efficient than using a loop, so, uh, don't use this version. 
How is this defined mathematically? Do you have a reference (even wikipedia)?
i used rand to fill the matrix with random numbers( and then i used a threshold to assume that the a number above that threshold means that the packet is lost) but i need sth else in order the numbers to follow a non uniform distribution...
What distribution would you like them to follow? 
You can use pdf() and cdf() to generate all manner of different random distributions. Without knowing more about the specific problem you are trying to simulate it is pretty much impossible to offer any worthwhile advice.
See [random walk.](http://en.wikipedia.org/wiki/Random_walk)
This doesn't sound like a MATLAB problem.
For an image like this you would have to look into texture based detection. It is not really my field. One strategy that you could try is to do edge detection on the image. Anything that is not the fish should just look like noise, which you could filter out, based on line length, or just based on the connected components. In addition, if the image is so grainy, you should smoothing it (Gaussian blur) first. This will remove a great deal of the artifacts of noise. Smooth it first and then try edge detection. That would be my initial guess. As far as highlighting the lateral line that may be harder, but you can sort of see a gradient in the y-direction. Once you get the outline of the fish, you can take those pixels and get the "fish indexes" and then get a region of interest, which will be just your fish. You can try blurring it significantly and then get the image gradient. The image gradient is essentially the derivative of the values in the image. You may be able to find a zero-crossing along the fish center line. I hope this helps.
actually i think you helped a lot with cdf and pdf. i ll give it a try that way. ty
Looks awesome! Very useful! Cheers
Looks good, already exists though: http://www.mathworks.com/matlabcentral/fileexchange/7173-grabit
I've stored all these axes in the handles struct and now it's giving me an error that A doesn't exist - Reference to non-existent field 'A'. Error in robotsimgui&gt;fire_y_Callback (line 252) arenafire=handles.A; Error in gui_mainfcn (line 96) feval(varargin{:}); Error in robotsimgui (line 42) gui_mainfcn(gui_State, varargin{:}); Error in @(hObject,eventdata)robotsimgui('fire_y_Callback',hObject,eventdata,guidata(hObject)) Error while evaluating uicontrol Callback
God love you, but it already exists: http://digitizer.sourceforge.net/
Did you use `guidata` to save the handles after you modified them?
Thanks. I was pretty sure I had use a loop, nice to see there's a separate method. 
Thanks.
Yep, now it says I've got too many input arguments in my startgoal function... I'm putting 4 things in, it's written to take 4 inputs. startgoal function %Start/Goal Class - Constructor function SG = startgoal(robot_x,robot_y,fire_x,fire_y) SG.sx = robot_x; SG.sy = robot_y; SG.gx = fire_x; SG.gy = fire_y; end call to the function robot_x=handles.robot_x; robot_y=handles.robot_y; fire_x=handles.fire_x; fire_y=handles.fire_y; handles.SG = startgoal(robot_x,robot_y,fire_x,fire_y); handles.SG = sgplot(handles.SG); arenafire=handles.A; legend([arenafire.axes,handles.Os(1).axes,handles.R.axes,handles.S.axes,handles.G.axes],'Arena','Obstacle',... 'Robot','Start','Fire'); guidata(hObject,handles); 
Hmm, sound like you might be running some kind of scam. Anyways, there are a million ways to do this. You can either use some of the built in filters matlab has like butter to remove the noise pretty easily. Or if want to get more complicated import some C++ to run OpenCV, or apply edge detection and a convolution matrix or something like that. I would recommend trying out the filters you think might work individually in something like photoshop or GIMP an then when you get what you want, begin writing the code to automate the process in Matlab.
Thanks, that could help! and btw I swear it's not scam, I just want this to get a passing score at an image processing class I have.
I've used [Data Thief](http://www.datathief.org/) for years now, but I'll give yours a try.
Fucking read your notes then
 margin 
As painful as it is for me to say, this is one of those things that you should work your way through. Read the documrntation on the GUIDE interface then start simple and build. You will become a substantially better programmer from it....
I think that when you are viewing the plot in its figure window, that you can just click on the line of the bode plot and it will display the information for that point. You can then drag that around the bode plot to find the point you are most interested in. If you click on another part of the plot, another box should appear. I am not positive because I have done this only using the sisotool function, but it seems to work on any matlab plot. Hope this helps.
There is quite a learning curve to matlab GUI building, but once you get the hang of it, it's not too bad. Having been through this before, I can offer a few hints that might make things easier to grasp. 1. Interaction is handled through callback functions (in the &lt;GUI name&gt;.m file. Callbacks are named after the button/checkbox/textbox/whatever name, so give your buttons and boxes a recognizable name. Matlab names the callback for you...don't change their name. 2. Write your processing code in separate functions and call them in the callbacks. These functions can be m files in your path or included in the &lt;GUI name&gt;.m 3. Use the handles structure to store persistent data. So for instance, your button callback could call uigetfile(), load the data, store it in handles.data, then call the processing functions to make the plots. 4. Get used to accessing axes and figure properties using low level parameters. When you plot the data, or modify axes properties, etc you will need to specify the axes handle manually (hint: it will be handles.&lt;axes name&gt; where &lt;axes name&gt; is what you named it in guide). 5. Learn to love breakpoints. You can place a breakpoint in a callback and trace the operation. You will learn a lot by just placing a breakpoint early in the GUI and stepping through it to see the workflow.
Can you post an image to play with?
Well, for one thing .... MATLAB is built to do vector math, so dot(A,B) is the same as A'*B. I wouldn't use the name "sum" for a variable, since it's also an intrinsic function and can potentially cause problems. 
The sphere command DOES just give you a series of XYZ points. See the documentation [here](http://www.mathworks.com/help/matlab/ref/sphere.html), complete with examples for shifting the origin. Scaling the size of the sphere doesn't appear covered on that page, but you can simply multiply the X,Y,Z arrays by the radius you want before you shift it.
Are you just looking for the general equation for a sphere? A sphere at (X0, Y0, Z0) with radius r satisfies the equation (X-X0)^2 + (Y-Y0)^2 + (Z-Z0)^2 = r^2.
Ha...yep. That's the property name. I was going off of memory last night and didn't have matlab open in front of me.
something like this will work: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% I = &lt;number of iterations&gt;; J = &lt;number of outputs per iteration&gt;; out = zeros(I,J); for i=1:I out(i,:) = dosomething(someargs); %Assuming the function returns a 1xJ vector with all output % or % out(i,1) = dosomething1(someargs); %Assuming each output is generated by a different function out(i,2) = dosomething2(someargs); out(i,3) = dosomething3(someargs); ..... out(i,J) = dosomethingN(someargs); end %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% That will give you a single matrix with your result, but it does require the data to be 'well behaved'. That is, each iteration produces exactly J results, and all results are the same type. An alternative to this would be to create J different versions of out, where each one is a 1xI vector 
This is great advice, OP, he hit on all the points I was going to. Great starting point.
Okay I will try some stuff like this. The only other question is that my output is coming from a seperate matlab function I made if I did something like out=zeros (l, J) for i=1:l out(i, :)=function_output
using colon notation, out(1,:) indexes all members of row 1. So as long as your function returns J elements or a 1xJ vector, you should be okay. Here are some examples of colon notation that might help you wrap your head around it some more: out = ones(1,4); out(1,:) = 10; % assign all members of row 1 to be 10; out(1,:) = [1 2 3 4]; %out(1,1) = 1...out(1,2) = 2...out(1,3) = 3, etc out(1,:) = 1:4; %same as above out(1,:) = function(); %where function returns 4 elements out(1,:) = [1 2]; %error...you are replacing 4 elements with 2 out(1,1:2) = [1 2]; %this works, and does out(1,1) = 1 out(1,2) = 2 and doesn't touch out(1,3) or out(1,4) out(1,[1 2]) = [1 2]; %same as above, just a different way to specifying indicies does that make sense? 
Margin will give you the margins on the bode, stepinfo(sys) will get you the step response overshoot and settling time. With the data from stepinfo you can plot the result on the figure as you would any other figure. The best way to find ways of doing this programmatically via google is "MATLAB command line whatever you need to do" 
Presumably you have X, Y, and Z data. Just add an offset to each. If you want to move it from (0,0,0) to (3,4,-8), just do this: X=X+3; Y=Y+4; Z=Z-8;
You should paste your code into: https://gist.github.com/ (If its not too long) Probably easier to help you out that way.
Well that for lines was fairly goddamn obvious. Damnit. What about changing the center of a sphere point plot?
If you have the Image Processing Toolbox, look into the morphological filters (and the demos to see examples). imdilate(), imerode(), etc. [here is the doc page for an example](http://www.mathworks.com/help/releases/R2012b/images/morphology-fundamentals-dilation-and-erosion.html) 
Structure arrays are handy if the data is of different types or lengths such that it won't work with a single matrix...but when you start to get into big data sets, they become inefficient. Each structure contains a copy of the metadata defining the structure, so a struct array of length N will contain N-1 duplicate copies of the metadata. A few bytes here and there times a few hundred thousand start to add up fast. My preferred way of handling this situation is with cell array. Cell arrays have the added bonus that they are not contiguous in memory. So a 1x4 cell array of 10x10 matrices is just 4 10x10 matrices and a 1x4 matrix of pointers. If you were to do this with a 10x10x4 matrix, matlab would malloc enough memory to hold the 400 element matrix in one contiguous block.
Thank you! This is exactly what i needed. I normally google all of my MATLAB problems but i didn't know what i wanted or could do with it. 
You didn't even try! Google around a bit and put in some effort on your own and I'm sure people here will be happy to help if you get stuck.
Yea sort of. So in matlab-ese, arrays are special because they are contiguous in memory. This is how they achieve their vector performance. Matlab only needs to know the memory address of the first element and the size of the array....then it can just shift through the address space to access the elements. ---- Side bar ---- This is why you should always preallocate your arrays and use vector operations over for loops when you can. If you do something like: for i=1:10000 a(i,:) = rand(1,100); end Matlab will malloc a 1x100 block of memory on the first loop and assign the values...then on the second loop it will malloc a different 2x100 block, copy the original data over, append the new data to a(2,:), then move the pointer to reference the new memory space....wash rinse and repeat and you wind up moving more and more data each time. The slowdown is actually pretty dramatic for even moderate sized arrays. ---end side bar ----- A cell array is just an array...it is allocated the same as a normal array. The difference is, instead of each element of the cell array holding a single value, it holds a pointer. This is how cell arrays can be mixed type and size....the actual cell array isn't holding the different data types....it just knows where those data exist in memory. so as an example: a = cell(1,4); %allocates a 1x4 array in memory of type cell a{1} = rand(1,100); %allocates a new 1x100 variable somewhere in memory and stores a pointer to it in the first element of a a{2} = struct('x', 1, 'y', 2,'z', 5); %creates a structure in memory somewhere else and stores the pointer to it in the second element a{3} = cell(1,10); %allocates a new cell array in memory and stores a pointer to it in a{3}...so you can nest cell arrays if so desired The main benefit of cell arrays is that each element can be a different data type or of variable length. They aren't so much a data type, as they are a container for organizing and grouping data together. They can also be useful if you must allocate variables dynamically. For instance if you have something like: i=1; stop = 0; while ~stop a(i,:) = function_that_produces_1x100000_output_array if some_test(a), stop = 1; end i = i+1; end Where you have no idea how long it will run and you can't guess well enough to even try....then using a{i} = function... should be faster, because a{} would be only i x 1 ..... not i x 100000....so you wind up copying much less data and working much faster. Here are some benchmarks on my laptop to illustrate: &gt;&gt; tic; for i=1:1000; a(i,:) = rand(1,1000); end, toc; Elapsed time is 2.639786 seconds. &gt;&gt; clear &gt;&gt; a = zeros(1000,1000); &gt;&gt; tic; for i=1:1000; a(i,:) = rand(1,1000); end, toc; Elapsed time is 0.088672 seconds. &gt;&gt; clear &gt;&gt; tic; for i=1:1000; a{i} = rand(1,1000); end, toc; Elapsed time is 0.082106 seconds. &gt;&gt; tic; a = rand(1000,1000); toc Elapsed time is 0.064522 seconds. So you can see there is a HUGE penalty for not preallocating a with the for loop. The preallocated for loop and the cell array version are very close and probably within normal processing variance, and the final full vectorized version is faster than them all. 
Just generate your array of [x y z] points, offset and scaled how you want them, then do surf(x,y,z) to plot. 
not sure if trying to actually help or just want my CC's numbers....
you have your list of tif files. Simply do Inds=randperm(1:length(tifFiles)); outside your loop then, inside your loop do baseFileName = tifFiles(Inds(k)).name
Yep. Alternatively you could randomize your loop since you don't use k to index anything other than your files: for k = randperm(length(tifFiles)) Don't need to change anything else.
Google it. Somebody somewhere has done it before you, probably 3 years ago.
do it with the pseudoinverse (A'A)^-1 *A' 
You were close incognito! First result in Google for 'matlab best fit line in 3d' is this gem which finds the best fit, but no parameters. It was posted just over 8 years ago. http://www.mathworks.com/matlabcentral/newsreader/view_thread/90452 Third results is this bad boy: http://www.mathworks.com/matlabcentral/fileexchange/24062-3d-least-squares-polynomial-fit-in-x-and-y Which seems to find coefficients for a given equation. It was posted just over 4 years ago. I started browsing this subreddit a few weeks ago hoping to see some awesome discussion and insightful code. Sadly 95% of what I've seen is a lot of requests for help with seemingly no effort invested to solve it first. Really saddens me :(
Thank you! The loop was the culprit. All of my roadblocks seem to have the simplest of solutions, much to my chagrin. 
Thanks! 
A few options I can think of. First is a convolution.....Convolving your matrix with [1 1 1] will perform a moving window sum, where the resulting matrix will contain (i-1) + (i) + (i+1). E.g.: &gt;&gt; mask = [0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1]; &gt;&gt; neighbors = conv(mask,[1 1 1],'same') neighbors = 0 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 1 1 2 1 2 1 2 1 &gt;&gt;neighbors - mask ans = 0 1 0 1 1 0 1 0 0 0 0 0 0 1 0 1 0 1 0 2 0 2 0 2 0 So the convolution tells you how many neighbors each point has, then you subtract off your original mask, as you aren't considering those points anyway. The result matches your example, except there are some extra cells flagged...but by your definition, they should be flagged anyway since they have at least one neighbor. If it's the case that each viable neighbor can only be used once, you will need to do something more clever. My approach would be to pad the ends of the array and use circshift. This will let you align each member of the array with it's neighbor on either side, where upon you can compare and act accordingly. The other less optimum solution would be to iterate over the array. If you could clear up the point about how you achieved your result, it would help a lot. **EDIT** you could also use [1 0 1] as your convolution kernel and skip subtracting off the original mask. E.G. conv(mask,[1 0 1],'same') conv(mask,[1 1 1],'same') - mask are equivalent operations
Izhikevich came up with nice computationally efficient way to simulate gen3 neural nets: [http://www.izhikevich.org/publications/spikes.htm](http://www.izhikevich.org/publications/spikes.htm) There is a demo matlab app attached: [http://www.izhikevich.org/publications/net.m](http://www.izhikevich.org/publications/net.m)
Try this and I think you'll see why you're getting large negative answers and so forth. function z = diff_func(x,y) z=2*y.^2-2*sqrt(x.^2+y.^2)+4*x+2*y-2*x.*y+1; or z=(x.^2 + 2*x.*y + y.^2 - x + y - 1).^2 - (x^2 - y.^2 - 2*sqrt(x.^ 2 + y.^2) + 3*x +3*y).^2; Now make a script %% [X Y] = meshgrid(-10:10,-10:10); Z = diff_func(X,Y); figure(1) surf(X,Y,Z) Looks like your objective function is wrong. Shouldn't it look more like function z = diff_func(x,y) z=sqrt( (x.^2 + 2*x.*y + y.^2 - x + y - 1 - x^2 - y.^2 - 2*sqrt(x.^ 2 + y.^2) + 3*x + 3*y).^2); Now I can change it back to diff_func(x) with x(1), x(2), use fminsearch, and I get x = 5.147911617159846 y = 0.069981514025480 although now there are local minima and you may need to do options = optimset('TolX',1e-10,'TolFun',1e-10) to try to get more precision. Or try fminunc or patternsearch.
Not sure this is the most efficient thing, but I think it'll work and is straightforward. AngularSpecter appears to have the more elegant solution. x = ...% data vector indx = []; for i=2:length(x)-1 A=x(i-1);B=x(i+1); if x(i) == 0 if [A B] == [1 0] || [A B] == [0 1] indx = [indx i]; end end end
Neural Network toolbox. Or find the (free) Netlab library and use those functions.
I don't understand your equation. Where's the dt?
i think repmat() should do what you want. it also works for arbitrary-dimension matrices.
odeset documention says to do odeset('Mass',@Mfun) where Mfun(t,y) evaluates your mass matrix. As far as I can tell, you are passing a string instead of a function to the solver. If that's not it, you'll probably have to post some code.
as the others posted, repmat is probably the best solution, however for completeness I'll note that [x, x, x] would also do that for you. 
I know that would work, but that's what I wanted to avoid. I want to do x*20000 so typing x would be impractical. But repmat is exactly what I want. 
I tried, still NaN. EDIT: Nope, still NAN. agwfa - name of .m file T = NaN In agwfa&gt;pushbutton2_Callback at 76 In gui_mainfcn at 67 In agwfa at 16 In @(hObject,eventdata)agwfa('pushbutton2_Callback',hObject,eventdata,guidata(hObject)) Encrypted = 
What are the dimensions on Z? (I see the transpose in there - are you sure it's set up properly?)
This sounds right, thanks a lot! I'll go punch some numbers. *still doesn't work.
rscale only works for SISO. You are trying to apply it to a problem with 2 control inputs (MIMO).
Have you tried hcard=image(BCmat);
Yeah, you're right. Any ideas for how i should be doing it?
So, I'm trying to take the text from editbox, turn it to doubles/singles and then to some stuff with this array, then turn this to char again (button) Then static text shall show me this text.
You want to use the kronecker product. If x is your matrix, kron(X,ones(1,2))
If I understand what you want, I think the way I would do it is this: the original matrix is m x n. Multiply by an n x 2n matrix that looks like this: 1 1 0 0 0 0 ... 0 0 1 1 0 0 ... 0 0 0 0 1 1 ... Then create your final matrix by doing something like this: output = zeros(2m, 2n); output(1:2:end,:) = input; output(2:2:end,:) = input; There's probably a more elegant way, and perhaps I misunderstood what you are trying to do, but that should work. Edit: I don't understand why my 4 spaces at the beginning of each line doesn't format this as code... Double edit: thanks ginglymus!
Yeah, that's what I had in mind in case nothing else worked. I hoped there was some built-in feature that I was overlooking. Or some way of passing it the string that it will actually enforce a line break. But it seems I'll have to use DrawFormattedText. Cheers!
As I said, it's part of the Psychophysics Toolbox. You can find a doc [here](http://docs.psychtoolbox.org/GetEchoString). Unfortunately, it's not very helpful. Apparently, the function just doesn't let me put more than one line of text in there so I'll have to work around it.
Do some debugging to determine what is causing the error. If you want help, we are going to need a screenshot of your GUI to see what is in the editbox and a copy of your code in pushbutton2_Callback to see what's going on.
[Screenshot](http://radikal-foto.ru/F/s018.radikal.ru/i523/1304/17/c0be3e284b46.png.html?u=http%3a%2f%2fs018.radikal.ru%2fi523%2f1304%2f17%2fc0be3e284b46.png) [code](http://ideone.com/uqbb3E)
And another (related) question that I thought you might have some insight on as well: Do you have any idea why [backspace] works fine in GetEchoNumber but doesn't in GetEchoString? This is only on the PCs in the lab on which I have to use [delete] instead. [backspace] works fine for both functions on my MacBook. This isn't dramatic, just weird...
Ahh, great, thanks! That might be a better approach...
I would have to know more about the problem.
What happens if you open a new figure and do image(BCmat) or imagesc(BCmat) without the GUI? (I personally prefer imagesc.) figure; BCmat=imread('b1fv.png'); imagesc(BCmat) If that does not work, it would make me think the png image has an alpha channel or the image is wrong because I do not see anything out of the ordinary with your code. If that produces no results I have one more idea.
You have to use odeset to change the reltol and abstol for orbital problems. odeopts=odeset('AbsTol',1E-9,'RelTol',1E-9); The error it gives is because you "hit" the body you are orbiting around. Why must you have the mass matrix? Is it because it is easier to manipulate on paper? Next, be careful with dx^2 /dt^2 and dx/dt, from what you posted it is not clear that you turned the problem into a system of first order ODEs. 
horzcat in a loop would work, but I don't recommend it.
I'll try changing the tolerances, that may do the trick. The mass matrix is because I have coupled 2nd order ODEs. For example: a*psi_dd + b*theta_dd + (other terms) = 0 And, I cannot use substitution to solve the equations for just one 2nd order term. My system states are: x1 = theta x2 = phi x3 = phi_d x4 = gamma x5 = gamma_d x6 = psi x7 = psi_d (where _d indicates a derivative) Will post code in a bit, don't have it right now.
I set it up as a state-space system, such that the vector of dx terms is actually what is being integrated by the ode sovler. A normal SS model is of the form: dx = A*x + B*y But since I have a nonlinear system, my right hand side is just a function of the states and time, so M(t,x)*dx = f(t,x) edit: my system has the mass matrix on the LHS
I may have been doing that wrong... Will check later and return with results. Thanks
Oh, mate=\ I told you I need this text from vvod in double.
No, it appears you need T to be a string. You convert it to double on line 12 of your code. Or am I missing something? Change line 5 to T = get(handles.vvod,'String') without a ";" at the end and let us know what it outputs on the command line. If it's not working, this will help us debug.
So as i understand it, theres a oython 3 that has a significantly different syntax and isnt compatible with pythonxy etc. How much if an issue is this? On another matter: Frankly, im a bit shocked at python's use of whitespace (line ends and indentation) to guide its interpreter. I didnt know there were modern languages that still did this
You can try 10. ['This is a test' char(10) 'of a line wrap'] Depending on how it's being displayed you may actually need to do a \r or \n.
No.
The Add-On [Image Processing Toolbox](http://www.mathworks.com/products/image/) has a lot of abilities that could enable you to do this. It can separate objects and then you could write a function to find the centroid of an arbitrary polygon (this may exist already). Then just cycle through the identified objects and find the 2D centroid locations using the function in a loop.
Ive never done anything past simple edge detection, but conceptually I don't see why not. Search for boundaries, identify each individual objects, and then find the center of the boundary. Now going from concept to reality is the challenging part :p Perhaps this is a step in the right direction? http://www.mathworks.com/matlabcentral/newsreader/view_thread/72736 Edit: or exactly what WalterFStarbuck said. I should have read the responses first!
Awesome! Much better. Thank you. I obviously didn't understand meshgrid.
Maybe. 
Don't use double equals. That will only be true if the robot's edge is perfectly lined up with the obstacles edge. Use angle brackets to signify inequality (less than or greater than). This will allow you to catch overlaps. 
Hm, I'm not sure. We have all macs in the lab so I don't know =/ Might be worth posting on the psychtoolbox yahoo forum. Do you have the UnifyKbNames call at the top of your script? I'm not sure if that will make a difference, but might be worth a try.
world2 = cell(size(world)); world2(world==0) = deal({' '}); world2(world==1) = deal({'*'}); 
If you have a binary image a.k.a. "mask" image, with one connected component that is the foreground object you care about, you can do: img = rgb2gray(imread('http://bb-attachments.cycling74.com.s3.amazonaws.com/2921.export.jpg.resize'))&gt;128; [rows,cols] = find(img&gt;0); centroid_x = mean(cols(:)); centroid_y = mean(rows(:)); imagesc(img), hold on, plot(centroid_x, centroid_y,'bo') Or replace mean with median or trimmean to your liking. That url image is just some random one I found right now as an example.
If you change the for loop declaration to for a=int64(1:100) and remove the other 2 lines with int64(), does that help? You're using int64 wrong (it returns a 64bit int, it doesn't convert the operand in place), and I'm guessing that's messing up other things. I don't have matlab installed on this computer, so sorry but I can't test this out for you.
There are many ways to do this, but here's one I just threw together which goes with your use of **randi**. m = 5; n = 5; mychars = {' ', '*'}; worldNum = randi([1 2], m, n); worldChar = mychars(worldNum);
This, or another trick is to check that they are *pretty close to each other*: if abs(R.y_max - Os(i).y_min) &lt; 0.001 || abs(R.x_max - Os(i).x_max) &lt; 0.001 Where 0.001 is my made-up tolerance for "closeness."
Check out the command **regionprops** in the Image Processing Toolbox. This requires you to already have the object segmented (black/white silhouette).
Index exceeds matrix dimensions. Error in extrastuff (line 5) for a=int64(1:100) 
Tried that but it doesn't work unfortunately. :( Thanks though!
No change in error.
**This is the correct answer** Thanks! Also, I found out sprintf's output is annoying. fprintf is what I was looking for. 
sprintf is not really for printing text, it's for creating a string. Useful in its own way, obviously -- sometimes you want to make a string with printf/fprintf style formatting but just save it in a variable, not display it. But actually, in this case, you could in fact just use disp, which is even simpler.
Ok, I did a couple of things. But now I faced another [problem](http://cs411121.vk.me/v411121863/ba45/Erzk2vNrOLw.jpg) Posting the whole [code](http://ideone.com/57I2ta) now The bttns are Encrypt and Decrypt.
**edit: ignore this, see my other solution, which is correct.** ~~Hi there,~~ ~~The problem is that your PNG images use [indexed color](http://en.wikipedia.org/wiki/Indexed_color); the PNG file keeps a header containing the palette of color information, and each pixel is simply an index reference into that color palette. Without the palette information, Matlab scales these according to the current colormap, and the result is that you can get funky colors.~~ ~~You should be able to fix this easily by extracting the map during imread as follows:~~ ~~[BCmat,cmap] = imread('b1fv.png');~~ ~~....~~ ~~hcard=image('CData',BCmat);~~ ~~colormap(cmap);~~ ~~Try that.~~ ~~edit**: I just saw that you've tried this already. Would you mind linking the .png files so I can take a look?~~~~
 x=randi([0 1],m,n); x(x==0)=' '; x(x==1)='*'; x=char(x);
Be very careful if your X and Y are of the same length; meshgrid often gives the transpose of what you really want. For example, let's say you have x = 1:5, and y = 1:10 as your x and y points, and you have some Z data that is Z=rand(5,10); Meshgrid() will reverse this: [X,Y]=meshgrid(x,y) X = 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 Y = 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8 8 9 9 9 9 9 10 10 10 10 10 Usually, people refer to X as their first dimension, and Y to their second dimension, and this causes confusion with 3D plots in Matlab; Matlab interprets x,y,z data as X being the 2nd dimension usually (as per the example above). So--in that case, you'd have to transpose your Z before you did a plot (or transpose X and Y): plot3(X',Y',Z); I say be careful if X and Y are the same length because your data will plot fine without error, but everything will be rotated by 90 degrees! **edit: A small tip.** Matlab's 3d plots default to the painters renderer, which is slow. Set your figure's renderer to opengl to speed things up a lot: figure; plot3(X',Y',Z); set(gcf,'renderer','opengl'); grid on;
I'll give it a try without the gui, thanks. I'll let you know when I get a chance to work on it again.
I got my cards from [this website.](http://www.jfitz.com/cards/)
Hi GraspinglySilver, So I've solved the problem. The reason is that, by default, Matlab assigns the same colormap to every axis in the figure. In this particular instance, the colormap associated with each PNG is different. If you slowly pause between the display of each image, you'll see that it shows the image correctly using the imshow(I+1,map) (see below for the I+1 reasoning). The second you show the next image, the colormap for everything in the figure is assigned to the new colormap, and becomes screwed up. Fortunately, there's a quick solution: the freezeColors command, found in [this matlabcentral file](http://www.mathworks.com/matlabcentral/fileexchange/7943). Just put that into your path, and call "freezeColors" after every time you load the image. Finally, I noticed that the PNGs are imported using 0-indexing instead of 1-indexing, which means you must add 1 to your image. Thus, the following will work (I tested it on your cards): [I,map]=imread('1.png'); imshow(I+1,map); freezeColors; Now you can plot the other ones as well. Here is some code that will display all of the pngs in a single directory using this method: function plot_cards(directory) %-------------------------------------------------------------------------- if(~exist('directory','var') || ~exist('directory','dir')), directory=pwd; end listing=dir(sprintf('%s\\*.png',directory)); filenames={listing.name}; num_files=length(filenames); scrsz = get(0,'ScreenSize'); width = scrsz(3)*.9; height = scrsz(4)*.9; left=(scrsz(3)-width)*.5; bot=(scrsz(4)-height)*.5; figure('outerposition',[left bot width height]); num_rows=round(sqrt(num_files)); num_cols=ceil(num_files/num_rows); plot_width=1/num_cols; plot_height=1/num_rows; ind=1; for i = 1:num_rows x=(i-1)*plot_width; for j = 1:num_rows if(ind&gt;num_files), break; end y=1-j*plot_height; axes('position',[x y plot_width plot_height]); [I,map]=imread(filenames{ind}); imshow(I+1,map); freezeColors; ind=ind+1; set(gca,'box','on','xtick',[],'ytick',[]); end end With the resulting screenshot: http://i.imgur.com/3FO3EDb.png Cheers!
The reason you're getting a NaN is because get(handles.vvod,'String') is, for some reason, not a string. Are you familiar with breakpoints? In the callback containing the code for get(handles.vvod,'String'), put a breakpoint immediately afterwards and check the value that comes out.
Or is there any good websites that can help me with conways game of life program that uses for loops and if statements?
I was talking to him earlier in Burke. He's already done with his 
I know what I need to do I just can't remember how to do it 
Thank you for the info and for introducing me to freezeColors, I'm sure it will prove useful. However, it appears I wasn't clear enough in describing my problem. The color changes occur when cards are moved on the screen, either with the addition of new cards or with the dealing of a new hand. I can use freezeColors to ensure that the most recently added card is correctly colored; however, all previously added cards become incorrectly colored. Any thoughts on this? Edit: Please note that I do not add all the cards at once, but individually based on user input.
mldivide uses Gaussian elimination, which is O(n^3) http://www.mathworks.com/help/matlab/ref/inv.html http://en.wikipedia.org/wiki/Gaussian_elimination 
Ok, we can do this without freezeColors but it'll be a little bit tricky. I'll quickly explain: Matlab always uses indexed color to display images, using a colormap. The colormap is an Nx3 matrix where each row specifies the RGB value of a color. So, for example, the following colormap: cmap = [1 0 0; 0 1 0; 0 0 1]; Has three colors in it, and an image that uses indexed color just assigns a number to each pixel, which corresponds to that row's color. So, for example, an image that looks like this: I = [ 1 2 3; 1 2 3; 1 2 3]; Will look like three vertical stripes of red, green, and blue. So, moving on. What's happening in the program is that Matlab stores one colormap for the entire figure, but each "card image" has its own colormap. So what happens is that when you add a new card, the colormap for the new card gets applied to every card in the figure. The result is that all the other cards will end up looking funky. This is also why the newest card looks ok--because *its* colormap is the one that got loaded. So, here's one way we can fix it, which might be a little bit of a pain, but not too much. Every time we add a new card, we're going to simply *extend* the current color map by tacking on the new one onto the old one. Then we're going to add whatever offset we need to the current image so that the proper subset of the colormap gets accessed. The best way to do this is to write a function called "add card." Every time you want to add a new card, instead of calling [I,map]=imread('filename.png'), we're going to call our new function instead. The new function takes not only the filename, but also the current colormap. This is what it looks like: function [I,map] = imcardread(filename,current_map) if(~exist('current_map','var') || isempty(current_map)), current_map=[]; end offset=size(current_map,1); % offset of new image [I,Imap]=imread(filename); % read the image along with the colormap map=[current_map; Imap]; % extend the current colormap I=double(I)+offset+1; % note the +1 fix here Ok, so now we're set to use it! Let's test it out! (you can copy and paste this function if you'd like): function plot_cards(directory) %-------------------------------------------------------------------------- if(~exist('directory','var') || ~exist('directory','dir')), directory=pwd; end listing=dir(sprintf('%s\\*.png',directory)); filenames={listing.name}; num_files=length(filenames); scrsz = get(0,'ScreenSize'); width = scrsz(3)*.9; height = scrsz(4)*.9; left=(scrsz(3)-width)*.5; bot=(scrsz(4)-height)*.5; figure('outerposition',[left bot width height]); num_rows=round(sqrt(num_files)); num_cols=ceil(num_files/num_rows); plot_width=1/num_cols; plot_height=1/num_rows; ind=1; map=[]; for i = 1:num_rows x=(i-1)*plot_width; for j = 1:num_rows if(ind&gt;num_files), break; end y=1-j*plot_height; axes('position',[x y plot_width plot_height]); [I,map]=imcardread(filenames{ind},map); imshow(I,map); ind=ind+1; set(gca,'box','on','xtick',[],'ytick',[]); end end
Thanks, just what I was looking for!
I actually just turned in this project a couple hours ago and this is essentially how I ended up solving it! I needed to know the diagonal neighbors as well, so I made 8 vectors, each of which was the dimensions of the original vector plus two, and filled it all with zeros. Then I did basically what you said and placed the original vector in the new ones based on the "direction" I wanted to check. Thanks for the response!
I did not realize copying and pasting would do this. I will rewrite the section of the code I am struggling with
 for i = 1:R react(i)= get(G.edit1(i),'string'); %change something %Only works on strings with one character end for j = 1:P prod(j) = get(G.edit2(j),'string'); end reaction = struct('reactants',react,'products',prod)
is it possibly the way I am trying to save it? I believe my loop is messing with it
Put 4 spaces before each line of code and it won't do that (and make sure you have two newlines before the code begins).
Make react and prod cell arrays, and reference their contents with {} braces instead of parens: react=cell(1,R); prod=cell(1,P); for i = 1:R react{i}= get(G.edit1(i),'string'); %change something %Only works on strings with one character end for j = 1:P prod{j} = get(G.edit2(j),'string'); end reaction = struct('reactants',react,'products',prod)
That's great. There's actually an even easier way to do it, similarly to how AngularSpecter did it above, using conv2 (2-dimensional convolution). Briefly: Y=rand(20); X=false(20); X(Y&lt;.25)=true; % 25% are alive mask=[1 1 1; 1 0 1; 1 1 1]; neighbors = conv2(X,mask,'same'); That'll do it in 3 lines for you!
Thank you for all of your help! right now I don't see any problems
You truly have earned that tag of 'Matlab pro'. Thank you so so much for not simply providing a solution, but actually explaining clearly and concisely what the problem was and what I could do about it. You get all the upvotes.
If you're pasting your code into reddit from the MATLAB editor, perform these steps to get it to format correctly: 1. CONTROL-A (select all)* 2. CONTROL-I (clean up the formatting) 3. TAB (insert 4 leading spaces on each line)** 4. CONTROL-C (copy the code to clipboard) 5. SHIFT-TAB (remove the 4 leading space) 6. Go to Reddit comment box 7. CONTROL-V (paste the code in) * *these are Windows default key bindings. For others, see the doc. * **The default in MATLAB editor is to insert 4 spaces per tab. If you changed it in the preferences, then this may not work. function ChemicalEquationBalance F.fig = figure('Visible','on','Color','blue','Position',[300 300 600 300]); F.sb1 = uicontrol('Style','pop','BackgroundColor','green',... 'Position',[100 150 150 70],'fontsize',14,'fontweight','bold',... 'string',{'1 Reactant';'2 Reactants';'3 Reactants'}); F.sb2 = uicontrol('Style','pop','BackgroundColor','yellow',... 'Position',[400 150 150 70],'fontsize',14,'fontweight','bold',... 'string',{'1 Product';'2 Products';'3 Products'}); F.push= uicontrol('Style','pushbutton','BackgroundColor','magenta',... 'Position',[130 50 60 20],'String','Continue','Callback',@continuefn); set([F.sb1,F.sb2],{'callback'},{{@scrollbar1};{@scrollbar2}}); F.list = {1,2,3}; G.fig = figure('Visible','off','Color','cyan','Position',[300 300 600 300]); end function scrollbar1(source,eventdata) end function scrollbar2(source,eventdata) end function continuefn(source,eventdata) set([F.fig F.sb1 F.sb2],'Visible','off'); set(G.fig,'Visible','on'); G.text = uicontrol('style','text','string','Reactants','position',... [100,250,100,40],'fontsize',14,'backgroundcolor','blue'); G.text2 = uicontrol('Style','text','string','Products','position',... [400,250,100,40],'fontsize',14,'backgroundcolor','blue'); G.text3 = uicontrol('style','text','string','--&gt;','position',... [270 140 50 50],'backgroundcolor','cyan','fontsize',14); G.button = uicontrol('style','pushbutton','position',[100 100 60 30],... 'backgroundcolor','magenta','callback',@balance,'string','Balance'); R = get(F.sb1,'value'); P = get(F.sb2,'value'); start_x = 275; start_y = 150; for i = 1:R Redit(i).name = []; Redit(i).x = start_x - i80; Redit(i).y = start_y; G.edit1(i) = uicontrol('style','edit','position',[Redit(i).x... ,Redit(i).y,50,50],'callback',@reactants,'backgroundcolor','green'); end for i = 1:P Pedit(i).name = []; Pedit(i).x = start_x + i80; Pedit(i).y = start_y; G.edit2(i) = uicontrol('style','edit','position',[Pedit(i).x... ,Pedit(i).y,50,50],'callback',@products,'backgroundcolor','yellow'); end end function reactants(source,eventdata) end function products(source,eventdata) end function balance(source,eventdata) set([G.fig],'visible','off'); R = get(F.sb1,'value'); P = get(F.sb2,'value'); for i = 1:R react(i)= get(G.edit1(i),'string'); %change something %Only works on strings with one character end for j = 1:P prod(j) = get(G.edit2(j),'string'); end reaction = struct('reactants',react,'products',prod) end
Without having wells_sealevel.mat, it looks like what you want is to use the fft function and interpolate the absolute value at the given periods. 
I'd say more like 300+ years ago, but I'm just being petty.
That, or use / and \ (AKA mrdivide and mldivide). For a system of Ax=b, x = A\b For a system of xA=b, x = b\A
So I don't quite have time to test this fully--have you tried '\r\n' instead of just '\n'?
The big thing is to define an x-y pair to attach the vector to and then to use quiver. Like so: [X Y]=meshgrid(linspace(-pi,pi,25),linspace(-pi,pi,25)); U=-Y; V=X; quiver(X(:),Y(:),U(:),V(:)) (X,Y) are the X and Y-coordinates to attach the vector (U,V) to create a vector field.
Here's a function I wrote a while ago that I think it what you want: % PlotColumn.m % % plot a column with the radius varying based on input vector % % INPUTS: % height - vector indicating the coordinate of each point % radius - vector indicating the object radius at each point % NTheta - Resolution of the disks % % OUTPUT: % hf - handle to the figure created % hs - handle to the surface created % % Example: % &gt;&gt; h = linspace(0, 2*pi, 100); % &gt;&gt; r = 2 + cos(h); % &gt;&gt; [hf, hs] = PlotColumn(h, r, 100) function [hf, hs] = PlotColumn(height, radius, NTheta) if nargin&lt;3 NTheta = 100; end radius = radius(:); height = height(:); theta = linspace(0, 2*pi, NTheta)'; [H, Theta] = meshgrid(height,theta); X = repmat(radius',NTheta,1).*sin(Theta); Y = repmat(radius',NTheta,1).*cos(Theta); Z = H; hf = figure; hs = surf(X, Y, Z); axis equal 
In retrospect, I think I completely missed the point of your question. I'll leave this here, though. It might be of interest to *somebody*.
While that is a very useful function, I'm afraid you are correct. Thank you for your reply though, much appreciated.
Ah yes i see. Just one thing though; due to the fact i only have one vector, namely 'B', how do i go about defining U and V? Thanks for your response.
I think (not sure) that Matlab lacks the low-latency audio capabilities that you would want/expect from a live music program. It doesn't seem like you're the first to think about it, though: http://signalsprocessed.blogspot.com/2011/09/real-time-control-of-matlab-using-midi.html
This is what confused me. What is B? How does it represent the field? Does B just represent the data at one slice due to the infinite length of the wire? If so, is B the field strength as a function of distance from the wire? (this would allow for a circle). Are you looking for something like [this?](http://web.ncf.ca/ch865/graphics/MagFldStraightWire.jpeg)
You can answer this for yourself: type 'edit expm' and you'll see the source code for the function expm. Here, you can see that "EXPM is computed using a scaling and squaring algorithm with a Pade approximation," with a reference to an article: N. J. Higham, The scaling and squaring method for the matrix exponential revisited. SIAM J. Matrix Anal. Appl., 26(4) (2005), pp. 1179-1193. So you could read the source of expm.m and/or that article and see if that algorithm takes diagonal matrices into account. My guess (without having done that) is that the algorithm doesn't handle diagonal matrices differently. The time it would take to test that, O(n^2 ), probably wouldn't pay off. I wouldn't be surprised if the algorithm were still faster for diagonal matrices, but I would be surprised if the code handles the two cases separately.
This? % fake data Radius = [1 2 3 4]; B = 10*[0.1 0.05 0.02 0.01]; NumPoints = length(B); % the theta values where we want to draw arrows NumArrows = 10; Theta = linspace(0, 2*pi, NumArrows+1); Theta = Theta(1:end-1); % the circle for reference CircleX = cos(linspace(0,2*pi,100)); CircleY = sin(linspace(0,2*pi,100)); figure hold on for ThisPoint = 1:NumPoints % draw the circle plot(Radius(ThisPoint)*CircleX, Radius(ThisPoint)*CircleY, 'r-') for ThisTheta = Theta ThisB = B(ThisPoint); ThisRadius = Radius(ThisPoint); % rotation matrix for easy replication of the arrow R = [cos(ThisTheta), -sin(ThisTheta); sin(ThisTheta), cos(ThisTheta)]; % basic vector point straight up that we will rotate P = [ThisRadius, ThisRadius; 0, ThisB]; PRot = R*P; quiver(PRot(1,1), PRot(2,1), PRot(1,2)-PRot(1,1), PRot(2,2)-PRot(2,1),... 'LineWidth', 2, 'MaxHeadSize', 5, 'Color', 'k') end end axis equal
This could easily work. The challenge (as mentioned previously) is how well can it handle latency. There are a number of ways to resolve this issue if it doesn't work immediately. You can use a mex file or generate C-code, that would speed up your algorithms. If you want to deploy it you can generate code for FPGA that could handle it. You can also try using Simulink instead with something like xPC Target for real-time processing. xPC would allow you to run the algorithm real time then read/write data from MATLAB.
I'll defiantly look into that, I'm actually a little surprised this is theoretically possible, I thought it might be a little too far fetched, while I'm at it, I might as well ask if the other part of my idea is feasible. My other idea was to use data from variables, and using different equations, or functions, plot them as points on a graph of something, and use some animation code and have it projected behind us as we play, and have it act almost as a visualizer
I ended up just reducing the font size right before to make it fit on screen and then set it back to normal afterwards. I'll try \r\n when I get back to the office tomorrow, though. I'll let you know, thanks!
As a caveat, it may be possible, but may require some serious work to get it going fast enough for oyu. For reference though this file exchange submission: http://www.mathworks.com/matlabcentral/fileexchange/26367-guitar-tuner essentially tells you what note youre playing by doing an FFT (i believe) on the input signal. You could extrapolate this to work for your application. This http://www.mathworks.com/matlabcentral/fileexchange/40324-wave-player-visualizations-geek and this http://www.mathworks.com/matlabcentral/fileexchange/32083-harmonograph may also be of interest and this https://www.mathworks.com/matlabcentral/fileexchange/32304-realtime-audio-input 
In order to use quiver, you need to have some idea of the spatial distribution of B. See the documentation [here](http://www.mathworks.com/help/matlab/ref/quiver.html), they have an example where they show it in use. Good luck.
This would be very easy in matlab. help surf You can set the colourmap to anything you like, including 'no' coloumap so that 'height' information only is related to whatever your third variable is. If you want the simulated '3D surface' with a simulated light source too, check out: help surfl
Wow, thanks for all the info, I'll be sure to check it out!
Someone correct me if I'm wrong, but I believe when using a central difference (i.e. [f(x+(1/2)h) - f(x-(1/2)h)]/2h) the error scales like O(h^(2)) so if the acceptable error is E, you could get a good approximation using O(sqrt(E)) as the step. EDIT: Changed the formula. EDIT2: As a side note, I personally think an h step of 10^(-5) or 10^(-6) is going to be the sweet spot for accuracy (using double precision).
I've used surf many times, but it looks like surfl is more or less what I'm looking for. Unfortunately I'm on octave right now, where the implementation of surfl is not great, but when I'm next on MATLAB I'll give it a shot. Thanks.
You sir, have just saved my ass. Thank you so so much, I really appreciate it.
I'm not great with Simulink, but you should turn on the signal dimension display to help follow the size through your model. It shows the signal dimension on every wire. I'm using R2013a and it's in **Display-&gt;Signals &amp; Ports-&gt;Signal Dimensions.**
It is indeed. What did you choose for your step value? 
I am sure this is not the most efficient way, but you could just have a variable that stores the lowest value yet, the corresponding inputs, and then just use a nested for loop to loop through the two variables and check the expressions versus the current lowest value--if it's lower, set it and the corresponding inputs as the lowest value etc. EDIT: As others have said, brute forcing is definitely not the most efficient way.
 fminsearch If you *really* want to brute force it for d=0.5:0.5:35 for k=10^5:100:7*10^8 end end If each value of d doesn't depend on the last you can easily use parfor and parallelize it with the distributed toolbox if you have that. k is only 69990001 in length if it's a simple equation you could just vectorize it if you have enough memory. Personally when I have to brute force it (for technical reasons) I usually increase my step size and then narrow down on what I want to find. So take steps of d in 5 find a range over which it is the minimum (you do have to make sure it doesn't do anything weird between there)
Vectorize your equation; use meshgrid() to create your sample space, and run the equation once using your matrices of parameters as inputs. then find the minimum.
Ack. No NO NO NNNNOOOOOO. Loops are bad. Bad bad bad. Terrible. Stop it. No Loops. Vectors man! VECTORS! Always go for the vectors. Never not vector. If you aren't vectoring you are WRONG. I could go on for a while longer, but I don't have all day here... Consider the following bit of magic: [x y] = meshgrid(-10:10, -10:10); d = sqrt(x.^2+y.^2); We make a nice shiny blob of vectors containing coordinates. And use that to find the radial distance at each X,Y pair. It's like fscking magic. Also, absurdly faster than doing an equivalent calculation brute force using loops. Now take that and try to solve your problem using the same idea. I'll leave finding the lowest value and its location as an exercise for you to solve. Hint: NO GOD DAMNED FOR LOOPS.
oh wow thanks everyone ! was not expecting INPUT so quickly ! (yes it was horrible but its late in my defense so my sub par jokes will have to do) General consensus is to use vectors and it does make it easier, don't know why i hadn't considered it. Going to use this method instead. Was stuck in the brute force mind set, assuming my computer was capable of it. The actual increments i used above were actually larger than what was necessary i just planned on manually changing the increments / uppper and lower bounds once i had a solution at each step to find the exact k value and d value etc.. 
^^^ This guy. Estimating slope using a neighboring point is the exact definition of finding a derivative (as your step approaches 0). So your plan to avoid finding the derivative is doomed from the start ;) 
No fair out-pedanting my pedantry!
Did you read his conditions? [x y] = meshgrid(0.5:0.5:35, 10^5:100:7*10^8); Maximum variable size allowed by the program is exceeded. Error in meshgrid (line 57) xx = xx(ones(ny, 1),:); 
Fantastic, I can't wait til I get home when the semester ends, I'm sure along with a few friends who took matlab classes that we can figure this out, thanks for all the help!
I think printf in mex will print to the matlab command window? Is that too clunky?
Reporting back: I did try it. But just as with \n, it simply prints the string as it is: the return characters seem to be ignored completely. (That is, it will actually appear as "this is \r\n my string" on screen.) Thanks for the idea, though. :)
Try this, which comes close (just copy/paste into matlab): scrsz = get(0,'ScreenSize'); width = scrsz(3)*.7; height = scrsz(4)*.7; left=(scrsz(3)-width)*.5; bot=(scrsz(4)-height)*.5; figure('outerposition',[left bot width height]); axes('position',[0 0 1 1]); load('penny.mat'); P=interp2(P,2); surf(P,'edgecolor','none','ambientstrength',0.7); axis([-10 529 -10 529 0 2000]); axis square; view(180,40); colormap gray; lighting phong; camlight('right'); set(gca,'xtick',[],'ytick',[],'ztick',[],'color','k');
meshgrid!? No NO NO NNNNOOOOOO. You Monster! d = sqrt(bsxfun(@plus, (-10:10).^2, (-10:10).'.^2))
you could use mexcallmatlab, to call back into matlab and invoke a function. you could write a function called "updateProgressBar" that keeps a nested workspace inside it holding the instance of the progress bar. then just call that with the % done value. mexcallmatlab has some overhead though (any time you cross the mex/matlab boundary), so don't do it often. 
Good god, man. I don't have time to read all that! Please don't post your homework here and expect us to do it for you. Make a new post with specific questions about specific pieces of code you have already written, and I would be glad to help you. 
how about: fails = strcmp(data.Results,'Fail'); That might not work, I don't have MATLAB with me right now, but if you play around with strcmp I think you can get it (use strcmpi if you want it to be case insensitive). (FYI, strcmp is 'string compare'.)
strcmpi should help. http://www.mathworks.com.au/help/matlab/ref/strcmpi.html 
Thank you both, that seems to work! However when I print "fails," it's a vector of zeros and 1s. My end goal is to plot a graph (one of those bubble chart things, not sure of the official names; if I can't find out how to do that I'll just do a bar graph) of the number of restaurants that failed versus passed versus were out of business, etc. If I do size(fails) it is 1 x 18829, which is the length of the dataset (18829 restaurants; 60000 originally but Matlab didn't like that). I was hoping the end result would be a matrix of the same number of columns as the dataset, but simply with a reduced number of rows - only the restaurants that failed. Then I would do size(fails, 1) to get the number of rows, and plot that against "fails, passes, out-of-businesses," etc. Can anyone help me make that smaller dataset? I hope that rambly description made sense.
I'm not really following what you really need. It's always a little difficult on these sites to understand exactly what people want/are doing. Here are some things for you to try that might help you. failed_rest_set = data(fails); number_of_failed_rest = sum(fails);
I'm sorry, let me see if I can clarify. I have a dataset composed of 18829 rows; each row represents a restaurant. The columns contain information such as the date the inspection occurred, why an inspection was performed, whether or not they passed etc. Let's say 15000 restaurants passed, 3000 failed, and 329 were actually out of business. I'm trying to first make a matrix of 3000 rows and the same number of columns of the original dataset - this new matrix will contain only the restaurants that failed. If I then do size(this_matrix), it should return 1 x 3000. If I do that for "passes" and "out of business" too, then I'll have three numbers that I can plot. My goal would be a bar graph where the x-axis is "Failed," "Passed," "Was out of business," and the y-axis is "number of restaurants." This way a viewer could quickly see what percentage of restaurants passed versus failed. (In that case, maybe a pie chart would be better...) However, now that I've typed all that out, I see I can use what you suggested and do sum(fail), because that's exactly the number of restaurants that failed. So, thank you! (I'll leave the above spiel in case it comes in handy for a future question.) I appreciate your help! (As a side note, I "invented" that command in my exam on Wednesday because it asked me to calculate the sum of a matrix and I didn't know how, and crossed my fingers that it was a real command.)
My memory gives no fucks! 
Plot(y,x); %just reverse the dimensions
Yes. When you're plotting you specify your data: plot(x,y) You can also define [function handles](http://www.mathworks.com/help/matlab/function-handles.html) however you want: f = @(y) y.^2 y = 0:5; plot(f(y),y)
Yes. The **plot** command just plots vectors of values. How you arrive at those numbers is up to you: y = linspace(-10,10,1000); x = y.^2; figure plot(x,y, 'b-') hold on plot(x, 5*ones(size(x)), 'r-')
Seems like you are on the right track, but a bit more knowledge never hurts! That big vector of 0s and 1s strcmp() returns is a logical vector. It shows the locations of entries that matched whatever operation you performed to generate it. It comes in handy quite often! Small demo: a = 1:20; index = a &gt; 10; results = a(index); Now you have just the values that meet your criteria that a is above 10. You can also cram it all in one go: results = a(a &gt; 10);
Thank you for the explanation! I figured it might have been a logical vector since it returned 1s and 0s. I'll have to remember that, it seems like it could come in handy. Here's a picture of what I was trying to do: http://i1297.photobucket.com/albums/ag29/kinezumi89/inspectionresults_zps3517bfa2.png I also made a bar graph of "possible health risk" (low, medium, high) and another pie chart of "why was the inspection performed." Unfortunately I forgot we're supposed to "allow the user some control over what is visualized," so I'm just making a GUI with the three buttons being "display graph 1," "display graph 2," etc. (Hopefully he doesn't want us to allow the user to type in their selection, since I don't know how to do that.)
My guess is that it is including both the true states and the observed/estimated states.
I use parfor on a HPC cluster (we currently don't have DCE license) and this limits me to the number of cores on one node (max of 12). However, I imagine that if we had DCE, I could use as many processors/cores as necessary (under 1 license). So my suspicion is that you can combine all your function runs into one script that doles out the work to different processor cores. You should ask your cluster admins about the limitations/benefits of DCE. If nothing else, other users might appreciate not having the base licenses tied up.
Another question (hopefully someone checks back!): The dataset contains information about more than just restaurants - grocery stores, bakeries, schools, etc. Currently I have (using the strcmpi() command) pulled out all the establishments that failed. However, I would like to go a step further by breaking the failed establishments down into type of establishment; IE restaurants that failed, schools that failed, etc. How do I do this? I'm guessing there are two ways - either set up a "restaurants" vector, and then pull out the failed ones, or pull the restaurants out of the fails-group. My initial goal was to make a mini-dataset containing all the failed establishments. However, because I ended up using the strcmpi() command, thus making a logical vector of 1s and 0s, I can no longer further analyze the "fails" vector. Can anyone help me pare down my dataset to a smaller dataset containing only the establishments that failed, rather than making a logical vector?
Its the same procedure.....just a different object. Instead of the callback firing on button press it fires when the text box loses focus or when the user hits enter. The documentation has the specific callback names to use.
I figured it had to be similar at least. Do you know the command specifically? I haven't been able to find it online. This is what I have now: choice = menu('Please choose the type of establishment:', 'Restaurant', 'Grocery Store', 'School', 'Rooftop', 'Bakery', 'Daycare', 'Gas Station', 'Other'); But rather than list the types of establishments, I want to just say "Please choose a type of establishment:" and have the user type it in.
The process is largely the same. Use strcmp to find where certain entries are, pull those entries out, then use it again o this new subset to find the ones that failed. Without knowing exactly how you have the data stored I can't be of much more help than that. I know you gave some details above, but I'm lazy and don't feel like re-reading what I already skimmed :x
Haha that's alright, I understand. I appreciate the help! So when strcmpi() returns a vector of 1s and 0s, previously I've been using sum() to calculate the number of 1s. Is there a way to return the indices of the 1s? Like how you can do [maxvalue index] = max(), and it returns both the max value and the index. I like your idea of using strcmpi() and pulling out the ones that I want, but I'm not sure how to go about the "pulling out" part. (So basically all of it.) At least that way I wouldn't have to change all the code I've already written. As a bit of background, the dataset is a csv file about food inspections. Info such as the establishment type, why they were inspected, if they passed, etc is in the file, and I have to do various visualizations for my final exam/project for my programming class. Thanks again for your help!
Sorry, I'm not being very clear. We've only been doing Matlab for a month (the rest of the semester was C++) so I don't really know what I'm doing. I know how to make a GUI with buttons the user clicks, but I have no idea how to make a GUI where the user types in his choice instead. 
He's probably not using uicontrols and all that. I think what he's looking for is: ans = inputdlg('prompt');
You want a popupmenu rather than a pushbutton style. You will also make use of text style uicontrol. Just use the functions figure, uicontrol, and set to make it. Watch [this video](http://blogs.mathworks.com/videos/2007/12/28/matlab-basics-guis-without-guide/). f = figure; h = uicontrol(f,'style', 'popupmenu','string', {'choice 1', 'choice 2',},'position',[10 10 100 30]) set(h,'callback', {somef,h})
Yea.....this is what he's afrert
Again, grain of salt since I'm flying blind: Typically with a logical you just use it as the index to your data. No craziness needed. Overly simplified example: data = {'abc', 'ac', 'def', 'ab', 'abc'}; data(strcmp(data,'abc')) That will print out just the first and last item as they are the only matches. It might take a bit more leg work for your , but the basic idea is still the same in the end. You can also use find to get the indices: index = find(fails == 1) Or even combine the two: index = find(strcmp(data,'abc')) There are probably a dozen other ways to get to the same result. It largely comes down to how the data is stored (individual vectors, big nasty matrix, cell array, etc...) and what, if anything, you've already found for a previous step that you can reuse to avoid searching again. 
Thank you, this is exactly what I want! But with the normal button-type GUI, you set each possible case. IE set each button, and what happens if each button is clicked. How do I do that for this command? So if the user types "Restaurant" in the text box, how do I make the program do what I want it to do? Sorry if this doesn't make sense, I don't have a lot of experience with Matlab so it's hard for me to articulate what exactly I want.
That looks promising, I'm on octave where lighting isn't implemented but as soon as I'm on matlab again I'll try it. Thanks.
Thanks for the suggestions. While I play around with them, here's the dataset I'm using, so maybe it'll give you a better idea of what I'm trying to do. I actually filtered it by April 2012 - April 2013, because it's much too large as it is for Matlab to work with. https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5
The "index" command worked perfectly! It returned a vector, with each component equaling the index of each instance of fail==1. (Well, the index - 1, but I fixed that.) Before, when I pulled out all the establishments in total that failed, I used this command: fail = strcmpi(data.Results,'Fail'); Which worked fine. BUT this pulls out ALL the failed establishments. How do I only pull out the establishments with the indices that correspond to the results of the "index" command you provided? For example, index = find(fail == 1) returns 23 56 58 103 Etc. I want to know which of those ^^ (23, 56, 58, etc) rows ALSO failed the inspection. If I were in C++ I would write if (FacilityType == 'Restaurant' &amp;&amp; Results == 'Fail') then do a,b,c. I hope this makes sense! 
Knowing how you have it stored in MATLAB is the important part. Considering the large assortment of data types, I'm going to go with a cell array. I made up my own tiny, fake dataset to make explaining easier. data = {'grocery' 'fail' 40 'restaurant' 'fail' 25 'grocery' 'pass' 95} Each row is an entry with the type of place, pass/fail, and their score. We can find all the items in a given category by using strcmp and looking only at the first column (where the type of business is stored) to get our logical vector, then use find to get the indices where that logical is true: index = find(strcmp(data(:,1),'grocery')) Now we know what the indices of the rows which contain the type of business we want to consider. Next, we search just those to find the ones that failed: fails = strcmp(data(index,2), 'fail') And BAM! Logical vector showing what rows grocery stores failed inspection. You can either sum up that to get the count, or use find again to get the indices of those if you want to do another search for some other attribute. This can all be crammed into one big nasty line if you want. This also is just one way of approaching it as mentioned before. It is a bit clumsy and mildly inefficient, but it works! Bonus: you get a good bit of exposure to how the various functions work and what you can get out of them. 
&gt; this is just a 100-level class and we've only been doing Matlab for a month my matlab class was a 200-level course and we never even talked about GUIs.... :( i will finish my MSEE program and I've never had to create a GUI. :(
I usually don't like giving complete solutions, but I can't resist the charms of such an epic MSPaint diagram... min = 0; max = 10; n = 4; tmp = linspace(min, max, n+1); loads = tmp(2:end)-diff(tmp)/2;
Fun fact: other than going out of your specified bounds, your solution does exactly what mine does. With a lot of extra WAT thrown in but that is another discussion ;) (For reference - WAT -&gt; http://www.youtube.com/watch?v=kXEgk1Hdze0 ) And mad props for actually trying on your own.
Oh, so it's like: x = input('Please input a value for x'); y = input('Please input a value for y'); z = x + y; A very basic example, but that's really all I've seen thus far. That looks perfect! I'll play around with it and see what I can come up with. Thanks for your help! If you're enthralled by this project, feel free to hop over to my "working with strings" as I'm thoroughly confused. =) 
Unfortunately I'm not really sure how to answer your question of how the data is stored in Matlab because I'm not really sure. :) I used this command to load it, if that helps: data = dataset('File', 'Food_Inspections.csv', 'Delimiter', ','); (Sorry if I told you that already, now I'M forgetting what I've written.) Thanks for the explanation! I'll tinker around with it and see what I can come up with. 
I must be doing something wrong! Here's what I've written: restaurant = strcmpi(data.FacilityType, 'Restaurant'); numrestaurant = sum(restaurant); indexrestaurant = find(strcmpi(data(:,1),'Restaurant')); restaurantfail = strcmpi(data(indexrestaurant,2), 'Fail'); numrestaurantfail = sum(restaurantfail); I did that for fail, pass, pass with conditions, etc (all for grocery stores). Unfortunately they're all returning 0 for the sum! numrestaurant outputs around 11000 which seems correct (18000 establishments total) but all the other sums output 0.
Because then the user can type it in however they want; it's more robust. strcmp() is case sensitive. 
That was it, thank you! 
Im not quite sure what your requirements are, but I would make a an matrix with the outer columns being numbers, and the outer rows being letters (think of a chess board). Leave the rest of the matrix empty, but with the 4 necessary starting pieces in the middle. Maybe make them an "x and o" or a "b and w"? From there display the entire thing, and then ask the users what piece they want to use and in what direction. From there, asign left/down a negative value, and right/up with a positive value to track the users moves. Run an if loop, to check if the pieces within the user's move are their color, and if not then change the piece and add the extra where necessary. Put conditions in so they can't change the outer rows/columns, and then track who wins. There might be an easier way to do this using an interactive GUI for the pieces, but I'm a freshman engineering student who hasn't quite gotten into that stuff. Hope this helps. 
http://www.youtube.com/watch?v=D_hmws6dwgg i think this is exactly as flexible as you need it to be.
Just wondering for my own knowledge-- in order to store numbers and characters together one would have to use a cell array right? 
A good start would be to make the matrix and algorithms. Your bestbet is probably to make a sqaure matrix (say 5 by 5 as a test for the algorithms and expand it later), using 1 = white and 0 = black so that a GUI can read it (but for testing, I'd say use the variable viewer to just see the table. Use jxnpope12's idea of having the players enter the coordinates of their pieces into the command window as Letters and Numbers, then decode the letters to find the desired column.
you're correct. A cell array can hold both numbers and characters together 
A combination of jxnpope's logic, and kieno's suggestion to test out the program first on a 5x5 is right on par. For the GUI development, look into "Graphics and GUIs with MATLAB" by Patrick Marchand, and O. Thomas Holland. Specifically, Chapters 2,3,6,7,10. I am using the 3rd edition from 2003. There may be newer editions out there, but the pdf i found online was all that I needed to learn GUI development. I've been programming for 8 years now. Started off with C++, &amp; Java (built chess in Java). For the last 6 years, I have been using Matlab. I most recently built a simulation tool of a production facility, and use GUIs mainly for getting inputs from the user, and not so much, an interactive UI,(i.e. getting inputs, and depict a piece move). I'll try and find the source link of the book pdf for you if you are interested. EDIT: [link found: Graphics and GUIs with MATLAB 3rd e. ](http://www.kxcad.net/cae_MATLAB/Matlab_Ebooks/Matlab%20-%20Graphics%20and%20GUIs%20with%20Matlab,%203rd%20Edition.pdf)
TIL about profile. I am an IE grad student running lots of simulations. I've been working on improving my files through vectorizing, and removing nested loops. Time to see if profile can confirm my coding bottlenecks. OFF TO THE BATCAVE!
figure; hold on; %rest is up to you
TYVM! I've got it working now!
plot(x,QX) will also work. 
yep, as will just plain plot(QX') plot interprets columns as individual traces, so you need the transpose. Also, if you use 'hold all' instead of 'hold on', matlab will automatically cycle through colors as you add new lines.
You probably can't automatically seperate the data into matrices for each note....well, you *might* be able to, but thats harder. My suggestion originally was just to split the track into equal-sized segments 1/8th of a second long and find out which note is heard for each segment. You can use this to write a score out.
I would store the board in a logical matrix and flip the elements between 0 and 1. If you use imagesc to plot the matrix and set 'axis equal', it should draw out the board how you want. You can even use 'grid' to draw the cell borders. Look into ginput() to handle your user interaction. It will spit back the x,y position clicked by the user which you can use to figure out which element of the array to flip.
Ahh! That hold all is one of those things I wished existed and didn't know. Thanks!
i'm guessing there's something off about the indexing in those for loops. remember, matlab can operate on some or all elements within a dimension in a multidimensional matrix. Get to know and love the ":" operator. you can simplify this matrix instantiation by getting rid of those for loops. matlab's best feature perhaps is its parallel processing to avoid needless repetition from for loops.
plot(QX.') Never forget that without the period, it's a conjugate transpose! 
if you use find like this on a matrix you will get the linear indices, that is treating the matrix as if it were a vector. You can use [I,J] = find(...) to get the matrix indices, but there's a much simpler and faster way, without using find at all: data(data~=0) = 1; EDIT: changed == to ~=, as per [the comment](http://www.reddit.com/r/matlab/comments/1d9rsd/using_find_correctly/c9o9tq8) by the_bananaphone
I have a few different data sources. Should I use babiesa(babiesa==0) =1; rather than data? 
I want to keep the zeros in the matrix as well, but just change the non zeros to 1. Would this do that? 
Could I prevent this from writing over the original babiesa matrix by doing it like that? clutch=babiesa(babiesa~=0) =1; ?
Thank you so much! 
Use sign()! That's a really easy way, and you could do abs(sign()) if you have negative numbers too.
Yes! This is what I was trying to remember how to do! I knew something existed that did this! 
Cool, thank you! 
This will not create a matrix of numbers,but a logical variable with TRUEs and FALSEs (they are represented as 1s and 0s). Luckily, MATLAB will often treat a logical TRUE as the number 1 and FALSE as 0 (for example, you can sum, average, etc. a logical variable).
Interesting.....I have never used .' and have never had an issue. What's the difference?
This is the result, btw: http://i.imgur.com/oPIujwZ.png
Never tried it, but would this work for what you need? http://www.mathworks.co.uk/help/matlab/ref/videoreaderclass.html
An ODE solver integrates dx/dt, not dx. There has to be a dt somewhere...
I think you want something of the form dx/dt = Ax + B With that in mind, m*xdd = F can be rewritten as [xd; xdd] = [0 1; 0 0]*[x; v] - [0; 1/m]*F and can be put into the ode solver along with some initial conditions, time steps, etc. You'll have to expand to two dimensions. *EDIT dx/dt, not dy/dt 
if there are way too many iterations, only use printf for one of the loops, or every 10 or so iterations (this can be done with an if statement and the modulus operator). 
If you want it at the low level, you can probably construct a [memmapfile](http://www.mathworks.com/help/matlab/ref/memmapfile.html) object which wil map out the structure of the raw file into individual chunks (with specified format) which can be read into matlab. The other option would be fopen and fread. Both require you to know something about the underlying structure of the file.
What do you mean when you say "expand the dimensions"?
You'l need equations in the x and y directions. [xd_x; xdd_x; xd_y; xdd_y] = ...
Maybe I'll give this a test. Also, isnan() is one of my most use functions, but I use it as ~isnan() to get back the real values. Thanks.
ah, gotcha. So xd is velocity, xdd is acceleration, etc? which ode solver should i use, if i recall there are quite a few (ode13, ode26 or something like that, etc.)
Without seeing the code I'm not sure how much help we can be. Does the code use eval() at all? It could be buried in there, which wouldn't get picked up as a warning.
No eval(). Thanks for commenting, I just didn't know if there wasn't a way to ask matlab where it was computing the output. 
You could step through the code using the debugger, but it would be easier if you could post it here. Usually, it is not very difficult to trace this kind of problem, unless you have a very large code.
I have found the problem area with the debugger/trial and error but I'm really new to the debugger (that was my first time using it) and it's still not clear what the issue is. I'll edit my OP. Thanks for reading. 
right, xd = velocity and xdd is acceleration. Start with ode45. If that has some trouble, check your code for errors. Then try some of the others.
Depending on what you want, you might consider coding a routine that will draw black squares over the points which contain NaNs. Just get the 4 coordinates based on your mesh, and then use the function rectangle, perhaps.
For future reference, newer versions of matlab feature colorful indicators in the scrollbar! An error is a red line, a warning (such as leaving a line without a semicolon) is orange.
There isn't one for real numbers, other than .' being a tiny little bit faster.
It only comes up with complex numbers: run the following code... temp=(1:5)+1j*(1:5) temp' temp.' Note how temp.' still has positive imaginary components, but temp' has negative components. I lost a LOT of sleep because of that.
quick question: in your first comment, you have it as " - [0; 1/m]*F"....why is it minus instead of plus? the way it is now gives xdd = -F/m
This is the outline of the function solution: function [Cx,Cy ] = MyController( step, Fx,Fy, location, velocities, controller) % Parameters: % step: the current step (as measured in seconds). This number also % provides the index of the latest entry in Fx and Fy % Fx,Fy: vectors containing the history of x and y wind forces % location: a 2 column matrix containing history of x and y location % Each row corresponds to a time step and the first column is % the x value while the second column is the y value % velocities: a 2 column matrix containing history of velocities % Each row corresponds to a time step and the first column is % the x value while the second column is the y value % controller: a 2 column matrix containing the history of controller % commands. % Each row corresponds to a time step and the first column is % the x value while the second column is the y value % % Returns as results: % Cx,Cy: scalars indicating the x and y forces specified by the % controller [Newtons]. end 
https://aws.amazon.com/gpu/
So math works lets you download a trial version of any toolbox for 30 days for free (I have a license. It might depend on that). 
Well that seems like problem number one to solve. Buying a new video card :)
More to the point. GPUs are used a ton for matrix inversion. I don't have direct experience directly in this but I would bet its optimized for just your kind of problem
Great! Thank you very much. I'll take a look at the Amazon EC2. It's really more of a matter of becoming familiar and formatting the code to find the best way to program it for GPUs, so if I can remote in for a few bucks, I think that will be worth it to play around and make sure I should go for the card.
If your NaN's are sparse, I'd recommend replacing them with the average of their neighbors, or else do something a bit more sophisticated with 2D interpolation. This way you'll retain your [I assume smooth] plotting features.
To solve the ode, first define the function: function dx = odefun(x,t) dx = A*x + B end where dx=Ax+B is the state model of the system (previous posts explain where that comes from). Then call that function from the solver [T, X] = ode45(@odefun,[T1 T2], x0) x0 are the initial conditions (a vector), T1 and T2 define the time window, and T and X are the time and solution vectors. Now you have position and velocity (and mass), so I'm assuming you can do something like use momentum and impulse to determine the restoring force. 
Best is to actually do it in your code, plus it makes it more readable.
for some reason i almost never use while loops in matlab. i find myself using for loops the majority of the time. i am not sure that you can do non-integer increments using while loops in matlab. i would suggest you create m2 and m1 arrays so you can easily plot them against Ix. m1(x) = ........ m2(x) = ........ i know this isn't very helpful but it was just a thought that came to me at the moment. i don't have matlab on this library computer but i'm sure somebody else will be able to help you. **Edit:** maybe try for x = 0:01:4 if ..............
Are you using LaTeX? I think there's a package that formats and syntax highlights text as it would look in MatLab. 
 fprintf(['Just split ', ... 'the strings', ... 'across multiples lines', ... 'the same way.'])