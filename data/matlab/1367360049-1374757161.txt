You can't use a vector in an equality. You also don't need a while loop at all, just use a for loop. for x = 0:dx:4 Secondly, if you're wanting to plot out m1 and m2 at the end you need to store them in a vector as you go along. Right now you're clobbering the value every iteration of the loop and at the end you'll only have the last one calculated. There are numerous ways to accomplish this with what you have right now. The two easiest are going to be one of the two choices below. Both do the same thing, so go with what makes more sense to you. m1 = [m1 &lt;new value&gt;] m1(end+1) = &lt;new value&gt; Both are rather clumsy and terrible ways to doing it, so please don't get into the habit. They are just band-aids to get you going. The better option is to have the index of your for loop be an integer so you can preallocate the m1 and m2 vectors rather than recreating them at every step. You would need a few other changes in your script as well. That is another lesson for another day though. I'll leave it be since doing it 'the wrong way' is not a big deal for a tiny workload like this one. Edit: Ugh, missed the part with Dix. Again, you can't use an entire vector in an equality. You'll need to alter it to something along the lines of for i = 1:length(x) and go from there. Be careful with your Dix vector though as it has one less element than your x vector! 
Trial by fire is the best. Cody is a great tool to learn lots of matlab. And there is a crash course on the right.
right you are, called [mcode](http://www.mathworks.com/matlabcentral/fileexchange/8015-m-code-latex-package), very easy to use and makes everything look nice and tidy OP, don't be afraid to dive into LaTex, it's easy and fun, as simple as html1 coding on a notepad
I was thinking more of an official published MATLAB beginners book?
There isn't one.
Few questions: 1. **What's the application?** 2. **Is "x" sparse?** (Matlab doesn't support sparse arrays on GPU, yet) 3. **Could it be represented as a sparse?** (CPU sparse is generally much faster than GPU dense) 4. **Is it necessary to have exact solution?** (Recall that accuracy of 10^-9 on the meter scale is accuracy to the diameter of a hydrogen atom) 5. **Have you tried iterative methods?** (Define a "loose tolerance," say 10^-5 (which is 99.999% accurate))
So filling the vector makes sense but I think I am confused on the syntax. For what I am trying to do I would put m1 = [m1 &lt;dx/V1&gt;]; right? It gives me an error if I do that saying it is an invalid matlab syntax. As for the Dix, how do I make it the same size as x? I don't fully understand why it isn't to begine with. And do I need a for loop in a for loop? Doesn't length(x) just tell you how big the vector is? I don't understand how that helps. Sorry this is my first time using Matlab. I've only programmed in c++ before. Thanks for answering.
So for creating the m1 and m2 array, is it possible to make an empty array or do I need to put something in it to begin and then the for loop will replace the vector? Like will making m1 and m2 all zeros work?
1. Basic research mathematical modeling - one dimensional line plots are the result, but from very large sets of values. 2. No. 3. Heh, I tried, but turns out parfor didn't like that. 4. Yes. I'm working with atoms. :) 5. I have not tried that. I will look into it. Error bars might be ok. Thanks!
Step 1) Do it by hand.
you can initialize them as empty matrices: m1 = []; m2 = []; like another person on here already said, try for i = 1:length(x) if Dix &lt;= 0 V2 = Vmaxmu; V1 = Vmaxmu/(1+Vmaxmu*Dix); else V1 = Vmaxmu; V2 = Vmaxmu/(1-Vmaxmu*Dix); end m1(i) = x(i)/V1; m2(i) = x(i)/V2; end If I understand correctly, Dix is a scalar value (constant). So V1 and V2 will also be constant depending on the value of Dix. So now fill up x1 and x2 using the x vector elements as the dx.
I see the latex option in the publish window but I think the form that the file has to be in for me to submit it for my assignment has to be a doc or a pdf
Dix is a vector showing the difference between each element in x, so Dix needs to be indexed as well. But there is the added difficulty that it is shorter than x so it either needs to be extended either at the beginning or end by a 0, or some extra fancy logic used for that fringe case (up to OP, I don't know his end goal here).
Dix isn't a scalar in this case. In this case it happens to be -10x + 20. So right now matlab is telling me that matrix dimensions don't agree so it can't fill V2. I am lost on how to make x and Dix the same size and don't understand why they aren't the same size.
for k=1:n *yp*(k+1)=((n.*p)^k)*exp(-n*p)/(product(0:k)); end plot(k,yb) edit i fixed two of the errors i got the poisson but i get errors on the ones marked. "the variable appears to change size on every loop iteration (within a script). consider preallocationg for speed" how do i preallocate this?
I'm new around here, but I'd say you're barking up the wrong tree. No one is going to do your homework for you, and shame on you for asking. However, if you started it, couldn't figure out how to do something, and then asked a specfic question, l'm sure everyone on r/matlab would be glad to help.
Mother of god, someone is using MATLAB to teach OOP? You poor bastard... I'd offer some advice, but no attempt on your own == no love. Even terrible nonsensical key mashing coupled with 30 seconds of Googling will get you somewhere.
I find it exceedingly difficult to believe that 5 HOURS of Google-fu yielded you no useful results covering the most basic premises of OOP and how to apply them in MATLAB. Especially considering the entire first page of Google results for 'MATLAB OOP' is full of pages that lay things out in excruciating detail using very simple examples.
You can generate a PDF from the LaTeX output.
yes, what you do is download a typesetter, what matlab exports is a .tex document that you yourself run through a typesetter, say TexWorks (just google "download latex"), run it once and you get a nice looking .pdf document
Well, thanks a lot. I have a couple of questions now. How can I make gui open other guis in one window? Second: Im putting in the textbox 4 or 5 and still it gives me error, but i made it to be an error if it is less than 0 or more than 9. Code for this [button](http://ideone.com/Fq19MS)
uiputfile may be more appropriate. 
I'm not really familiar with the GUI handles, but remember that &gt;&gt; assert(4 &lt; 9) &gt;&gt; assert('4' &lt; 9) ??? Assertion failed. because &gt;&gt; double('4') ans = 52 To be honest, I think you should figure out the first question on your own.
You can mex the fortran code (as long as you have a fortran compiler "mex -setup") into an s function and run it that way.
The only problem is that the fortran code would take too long to run as a mex file. Is there any way to run the fortran code seperately with a matlab command?
You can execute system commands with the ! operator. E.g. ! dir The hard part will be passing your variables to the Fortran program. I've done this before using temporary files, but that was helped by the fact that the program I was using was expecting a file input. So if you can modify your Fortran code to read in a text file with the vector as an input and write a file with your output, you can use Matlab to create the Fortran input and read back the Fortran output. Fairly quick if you only have to do it a few times, but if you have the same situation as I had, it can take a while if you're doing this hundreds or thousands of times.
You can write an interface in c, mex that, then use that to talk with the fortran code.
Some Psychtoolbox functions output something like that and don't get picked up by MATLAB's warnings. I really hate when this happens. When all else fails, just semicolon the shit out of everything.
If the problem is very large, it's best to read and write to a binary file instead. Text file is easier, however 
I was going to suggest the same thing!
1) Do you have control toolbox installed? 2) Type which tf Does it come back with something?
try: num = [1 1] dem = [1 3 1] G = tf(num, dem)
'tf' not found.
The video I was following used similar values. I already tried assigning num and dem values like you mentioned and it errors after your last line. 
Gotcha. I guess I am SOL then? 
I can see why he hates everyone...
Do you have a .wav file of the recording? Try this if you do: filename = 'myfile.wav'; [y,Fs] = audioread(filename); sound(y,Fs);
try reverse schroeder integration or hilbert transform
Your error does not have anything to do with 'redefining' x(1) as x1 (although that will be the next error you run into). You need to check the docs on integrate(). I'm fairly certain that function does not do what you think it does. Look into int() from the Symbolic Math Toolbox instead. Bonus (since you will run into this immediate after fixing the above issue): In all of your anonymous functions x is undefined and your x(5) x(6) etc are going to error out. You need to rethink what is supposed to go where in your calculations. Bonus 2: Rethink your variable names. The x passed into Blah() really has fuck all to do with the x being passed into your anonymous functions. Naming them the same thing is a Bad Thing(tm) as it just leads to cluster fucks and confusion. Bonus 3: You don't need four separate anonymous function definitions. Those all do the exact same thing (or they will when used properly). Hopefully working through Bonus 2 ill make this more apparent. If not I'll explain better in the next go round.
yeah its a .wav file. I will give that a go after footy, thanks :)
Yeah he is polish and only likes the austrian guy. I'll have a look at that. Thanks.
Try using the [quad](http://www.mathworks.co.uk/help/matlab/ref/quad.html) function.
I wish I could help but I have no idea what bifurcation problems are. I never encountered that in EE.
Both matrices need to have the same dimensions for a subtraction to occur. If you are trying to subtract each row of B from A do something like r = repmat( A, 600, 1 ) - B; ...btw, each matrix has 6 columns not rows
Here's another example if needed: clear all; %make A an evenly spaced array from 0.02 to 4 A = 0.02:0.02:4; %intialize x0 and make it the same length as A x0=0.5*ones(1,length(A)); %calculate x1 for all values of A at once for n=1:500; x1=A.*x0.*(1-x0); x0=x1; end; %initilize b and c. b = zeros(50,length(A)); c = zeros(50,length(A)); b(1,:)=A; c(1,:)=x1; %calculate b and c for all values of A at once for s=2:50; b(s,:)=A; c(s,:)=A.*c(s-1,:).*(1-c(s-1,:)); end; %plot everything at once figure(1) plot(b,c,'o') 
Try the surf command. I don't have Matlab at the moment.
I think what you have to do is the foollowing: x = []; y=[]; z=[]; for i=1:50: x = [x mat(i,1,:)]; y = [y mat(i,2,:)]; z = [z mat(i,3,:)]; end; [X,Y,Z] = meshgrid(x,y,z); mesh(X,Y,Z); OR x = []; y=[]; z=[]; for i=1:50: x = [x mat(:,1,i)]; y = [y mat(:,2,i)]; z = [z mat(:,3,i)]; end; [X,Y,Z] = meshgrid(x,y,z); mesh(X,Y,Z); this might give you an idea to proceed im not even sure if this is 100% correct but i am pretty sure you have to do something similar.
Well first what you do is use ode45 to solve the homogenous equation to find the homogenous solution. Then you take the jacobian of that using matlabs built in derivative functions and get the eigenvalues. theeeeen you plot the eigenvalues and voila. It was a few months ago but this is basically what you do.
what's the difference between the mesh function and the meshgrid? 
mesh plots the points, meshgrid creates the grid from one dimensional values. google it and look at examples
Here's a simplified explanation of what a bifurcation is: Say you have a system of differential equations: dx/dt= x^2 * (x-2 + u) dy/dt=y^2 * (x-u) The point of bifurcation is to vary the parameter "u". Then we look at the eigenvalues of the matrix to see which ones are positive or negative. Some variations will yield stable solutions, some will yield unstable solutions, and in some cases, certain parameter values will cause the equation to not exist (like if you had a u-2 in the denominator, u could not equal 2). Within the context of a problem (or mathematical model), these solutions help us fit our model to given data 
I'm about to try this code out and see what happens. I'll follow up in a bit, thanks for the example!
This is a newly released package, so any feedback on it, or just examples of how you're using it are most welcome!
One thing I've found with Matlab compiler is you have to make sure everything is taken care of. Close matlab, launch it and run your script by itself. Now start doing 'weird' stuff like closing the dialog box or entering jibberish into the dialog prompts. There is no place to gracefully fail.
You can use the find function to get an array of indices of another array that match a condition you specify. For example, I = find(isint(theta)) % will return a vector I such that theta(I) returns the integer values of theta. Then you can use the vector I to accomplish what you need. x = r*cos(theta(I)); y = r*sin(theta(I)); The only problem I can think of is that "isint" might not be the best way to get the integer values. The mod function is probably a better way to go but I can't think of how to do it right now.
I could not get it to work by either of your suggestions. What am I missing here? Does it require an IF? n=12; d = 200; r = 3200; dbyr=d/r; theta=0:0.0001:2*pi; k=(n/(2*pi))*(theta+dbyr*sin(theta)); plot(theta,k) I = mod(k,1) == 0 x = r*cos(theta(I)) y = r*sin(theta(I))
I'm not at a machine that has matlab on it so I'm less use than I could be. what is the value of I? it should be an array of 1s and 0s as long and theta and k. are you getting an error? or are you not getting the result you want? if it is an error what error are you getting?
Oh I forgot, you have to plot the eigenvalues against the parameter you are changing in the model and take the jacobian at certain points. That way you will see when the stabillity changes at the points your are investigating that fullfill L(u) = 0, where L is the differential operator.
It may or may not be depending on your needs. Want to know the real answer for your situation? Try it. If it works then it works right? 
No, it's not. The way my program works is that you input the airfoil (cross section shape) of the wing at one end and the airfoil shape at the other, and it determines the geometry of the wing between the two points. I've divided the computation into lower and upper surfaces, so what this should be plotting is a curved rectangular sheet. [This is what it calculates before determining the surface] (http://imgur.com/R6YJn6z). What it should be plotting now is a plane that joins the lower surfaces of both of these shapes. [So something like the top surface of this](http://www.me.utexas.edu/news/_images2009/airplane_wing_300x246.jpg)
I've been looking at it, and I've got one question: Would it be better for me to have a 50x50x3 matrix, and have all the x points on one 50x50 matrix, all the y on another, and all the z on one? Or should i keep it in the 50x3x50 form where one row corresponds to a point where one 50x3 is all the points corresponding to that cross section?
look up the doc for mod. Like I said I don;t have access to MATLAB right now. Make sure you are using it right. 
Well, what you need to do is extract the points and feed it to the meshgrid function. I should have extracted the corresponding points on each cross section along all crossections (my first code) and then do it for each point along the rims of the cross section. You have to have the x-vector of values to feed to the meshgrid function. It cannot be a matrix if you want it to format correctly. same with your y and z vectors. if you want to plot it without creating a 3D surface and using meshes and meshgrid just use plot3 and for-loops with your current matrix.
Ok thanks I'll give it a try
I see, mine didn't look like a wing at all. [This one](http://imgur.com/sCJOZUH) looks a bit better (I only used the first 2 cross-sections). Getting closer? EDIT: Here's some code for the figure: fill3([val(:,1,1);flipud(val(:,1,2))], [val(:,2,1);flipud(val(:,2,2))], [val(:,3,1);val(:,3,2)],'b')
I am also interested in this. Currently the only way I know how to do this is to use the matlab engines to send c data and matlab plot commands to matlab on my computer. It makes it so I can handle all my data in c and then export it to do plotting in matlab. I heard that matlab has the ability to translate matlab code into c code, and if this is true it would save me a ton of headache
If you have a need to integrate the matlab code into a C program or run it on a platform for which matlab is not available, it may be useful. The exported C will not be easy to edit though, so it's not really useful to just run in the same way as a matlab script. Also to do this I think you need the Compiler Toolbox.
You can turn a MATLAB function into standalone C using MATLAB Coder (note: not Compiler). From there you can compile the generated code into an EXE, or combine several functions together into a DLL, LIB, or a regular MEX file if you want. The possible downside is that only a subset of MATLAB language is supported for code generation: * [Functions supported for code generation](http://www.mathworks.com/help/simulink/ug/functions-supported-for-code-generation--alphabetical-list.html) MATLAB Compiler is a bit different. It does convert your MATLAB code into C but it does so in a way that the resulting C is still dependent on a set of libraries that are part of the MATLAB installation. This is why you need to make sure anyone using your deployed application also has the correct version of the MATLAB Compiler Runtime installed; the MCR is what provides these MATLAB libraries for the generated application. The upside is that you can use the MATLAB Compiler for pretty much any code you write (and you can bundle up GUIs in your application as well), but the downside is that your generated code needs the MCR in order to function. So if you end up needing to put the code on a microcontroller or something, you're better off using the Coder.
 parfor i2=1:numberofdocs1 linelength = length(B{i2}); termdocMap = containers.Map(); for j=1:linelength; B{i2}{j} = regexprep(B{i2}{j},'\W',''); B{i2}{j} = lower(B{i2}{j}); if ~isempty(B{i2}{j}) keypresent = isKey(termdocMap, B{i2}{j}); if keypresent==0 termdocMap(B{i2}{j})=1; else termdocMap(B{i2}{j})=termdocMap(B{i2}{j})+1; end end end doctermoccurencearray{i2}{1} = keys(termdocMap); doctermoccurencearray{i2}{2} = values(termdocMap,doctermoccurencearray{i2}{1}); end
I posted my code, I don't think that's my issue as I've only got one array all four of my workers are accessing.
Hmmm. Ok, that looks like it should be fine with a parfor. 
You might want to consider using another tool/language for the task. Does your script need any fancy Matlab toolboxes? If not, might Octave, Python or mabye Julia be an alternative? 
Unless you're using some special Matlab functionality, it may run perfectly well in octave, which anyone could have access to. 
I may be too blunt, but: if you are unwilling to spend the 2-3 minutes to make your code readable, I am unwilling to help you. Please read the "formatting help" section of the code, reformat your OP, and then you may receive some help. Otherwise, you do not deserve it.
Not sure I understand your question correctly, but if you want to pass additional parameters you could do so by writing [T,Y] = ode45(@(t,y) test(t,y,b),[0:0.1:5],1)
Ah, thanks - anonymous functions. That seems to work.
also, from a very noob MATLABer you can get the user input by using b=input('user inputs value for b&gt;&gt;'); but that is probably way more basic than you wanted
Is there a reason reddit doesn't display your text the exact way you type it?
Click "formatting help"
Just freaking use Gist. People can edit the code. Resave it. There needs to be big bold letters above the submission.
&gt;Is there a way to integrate a function with a variable that is taken from the user? I probably don't understand your question, but there is slight chance that simple eval or syms+subs would help you.
You should really consider doing your own homework, before asking others to spend their time doing it for you. Have you tried it? If you answered questions 5.1-5.7, section *5.7.2 - Private functions* will show you how to do the rest. If you have any questions, come back and let's discuss them. [EDIT](http://books.google.co.uk/books?id=fhpotPvv7v8C&amp;pg=PA252&amp;lpg=PA252&amp;dq=%22Write+a+function+that+uses+function+random0+to+generate+a+random+value+in+the+range+[low,high%29,+where+low+and+high+are+passed+as+calling+arguments%22&amp;source=bl&amp;ots=2fj9Hp53Zt&amp;sig=InQUeZNiUobL3O9dTMqpLlv1eWI&amp;hl=en&amp;sa=X&amp;ei=J_WHUc6nLM3U0gGY3YDIAw&amp;ved=0CC0Q6AEwAA#v=onepage&amp;q=%22Write%20a%20function%20that%20uses%20function%20random0%20to%20generate%20a%20random%20value%20in%20the%20range%20[low%2Chigh%29%2C%20where%20low%20and%20high%20are%20passed%20as%20calling%20arguments%22&amp;f=false)
Wow. Not even trying to cover up a homework problem. 
The function you're missing is *str2double*. Have a look at [this](http://ideone.com/7gsSsP) code.
By having smaller increments, you are creating more points. So the sum should be greater when you add all of them up. Edit: I don't believe using "sum" will give you the area under the curve. 
ex: lets say when the interval is large y contains: y = [1 3 5 3 1] sum(y) = 13 if you have a small interval: y = [1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1] ...etc sum(y) = 100 Edit: the point i'm trying to make is that **using sum alone** won't give you the area under the curve (integration).
&gt; Edit: I don't believe using "sum" will give you the area under the curve. Bernhard Riemann would like to have a word with you...
I mean using the sum command in matlab won't calculate the area under the curve. Edit: grammar Edit 2: sum will just add the elements in the vector and give a scalar value.
Because you are doing it wrong... x = 0:0.01:2; y=x.^2; integral = sum(y)*0.01; Approximation results in 2.6867 Actual result is 8/3 or 2.666666666666 Replacing sum with trapz gives 2.667 due to the better approximation when using trapezoids over rectangles for subintervals. **Edit:** It helps if I retype my example properly... **Edit 2:** You have not made your point at all. Assuming the above represent samples taken at intervals of 1, that would be a Riemann sum approximation of the area under that curve. It would be wrong when compared to the proper integral for your function, but that is to be expected since you have a very coarse sampling of the actual function you would integrate. 
&gt; Edit 2: sum will just add the elements in the vector and give a scalar value. That is correct. This scalar value is also the Riemann sum approximation of a function. Also known as the area under a curve. Just because the data passed into sum may not always represent some function does not mean it can never do so.
Yes. But I thought the difference between *sum* and *trapz* would be evident by changing the increment size.
trapz(y) takes doesn't take the x increment into account and uses a unit increment. trapz(x,y) on the other hand does. Sum just adds up the elements (which if there is a unit increment, would be the area under the curve+one extra endpoint). That's why trapz(y) and sum(y) return about the same answer.
The difference is extremely evident when changing the increment size. Re-do the above but use 0.5 for the step. The sum() version will give you an answer of 3.75 whereas trapz() will give you 2.75. 
For integration, I always use "cumtrapz". Not the most glorious name, but it's a cumulative trapezoidal method and it's quite accurate.
Alright, I fooled around with it for a while. It would appear that if you just use trapz(y) uses a step size of like 1 (I guess x1 x2 x3 etc etc.) so its pretty much adding up the y values. However, if you do trapz(x,y), it spits out a different answer of like 1. 
Thanks. That clears it up!
I will be using this function based solely on the name. Thanks.
If you have symbolic toolbox you can compare the accuracies with following script: % Problem definition syms x minval = 0; maxval = pi; points = 100; fun = cos(x^2).*x % Sample t = linspace(minval,maxval,points); y = subs(fun,x,t); % Solve res_summing = sum(y.*(t(2)-t(1))) res_trapz = trapz(t,y) res_accurate = subs(int(fun,x,minval,maxval)) % Compare errors err_summing = (res_summing-res_accurate)/res_accurate err_trapz = (res_trapz-res_accurate)/res_accurate For the above script we get +20% error for summing and only -0.3% for the trapz.
you could try strfind or findstr
Thanks a lot, you helped me.
Thank you! That was very helpful and it was indeed that simple.
Are you a member on Mathworks.com? I'm looking at [this](http://www.mathworks.com/training-schedule/certifications/) page and I can login to register/see the price. The locations where they offer the exams is somewhat limited. 
I think it would be worthwhile IF your career path depends on it. For example: http://www.indeed.com/jobs?q=matlab+-mathworks&amp;l= Look at the MATLAB jobs and see where you fit in. In Finance there are a number of good paying jobs for people who are well versed in MATLAB.
How complicated is it? Compiler works well enough for a lot of cases and the MCR is available online so it should be easy to distribute. If it uses supported functions, you can generate c-code with MATLAB code and save a lot more time/energy for everyone involved.
You might be tempted to call surf every time you update position, but I think it is faster to manipulate the data directly. Evaluate this: cla [X1, Y1, Z1] = sphere(50); [X2, Y2, Z2] = sphere(10); location = [0 3 0]; X2 = X2/4+location(1); Y2 = Y2/4+location(2); Z2 = Z2/4+location(3); h1 = surf(X1,Y1,Z1); ax1 = gca; f1 = gcf; hold on h2 = surf(X2,Y2,Z2); axis equal shading interp set(ax1,'color',[0 0 0],'xlim',[-3.5 3.5],'xgrid','off','ylim',[-3.5 3.5],'ygrid','off','zgrid','off') while 1 theta = atan2(location(2),location(1)); R = sqrt(location(1)^2 + location(2)^2); dx2 = R * cos(theta+pi/180)- location(1); dy2 = R * sin(theta+pi/180)- location(2); location = [location(1)+dx2, location(2)+dy2, location(3)]; x2 = get(h2,'xdata'); y2 = get(h2,'ydata'); set(h2,'xdata',x2+dx2); set(h2,'ydata',y2+dy2); pause(0.01) end 
Where's the guide? Haha.
I thought I linked it...[here it is again](https://www.dropbox.com/s/m0atg2kzkob619e/Guide%20%281%29.docx)
Perfect, thank you!
fread would work, I think. fopen just opens a file for saving, right?
Check out textscan. It's much more powerful than csvread and can ignore columns.
This is actually very similar to a question I wanted to ask. I am wondering if matrix multiplication would possibly work using the null matrix or inverses to produce the idenity matrix.
In order to use fread, you have to use fopen first.
Were you given any information as to the format of the file? With this sort of file, it *is* just a collection of numbers and unless you know the format, you could guess forever.
Ha, not sure what I was thinking, this was a quick reply from mobile and didn't really read it. Would using fread like [A, count] = fread(___) return the required info in Count?
There's a book called MATLAB for Engineers, interestingly enough. It got me through an introductory course a few years ago. Also I like the book MATLA for Neuroscientists. It might not be as germane for you though.
the ts file was created from a mpg2 video file.and that the problem.with fread we see a huge collection of numbers but we don't know what they represent in order to find the packets we need.
I haven't yet found a book out there that's good at actually teaching programming via Matlab. Most of them seem to assume you already know programming in general, and then go zooming ahead at full speed with what's special about Matlab. Thus, depending on how central you think Matlab will be for your future life/career, it might be worth picking up another programming language that has better beginner-style tutorials available (e.g. Python) to learn general skills, and that will give you something to build on as you study Matlab. Programming languages are similar to spoken languages in that the more of them you know, the easier it becomes to pick up additional ones quickly. -- says the guy who just taught a 1-year course on programming both Python and Matlab, and whose students managed to survive
Physics student here, this guy lectures at my university and writes fantastic notes for courses he teaches, one of them happens to be a computational science class using MATLAB http://mathsci.ucd.ie/~onaraigh/acm20030.html . 
I used the book [Matlab: An Introduction with Applications](http://www.amazon.com/MATLAB-Introduction-Applications-4th-ebook/dp/B005FHLHUU/ref=sr_1_1?ie=UTF8&amp;qid=1368372381&amp;sr=8-1&amp;keywords=Matlab+Amos+and+Gilat) by Amos and Gilat, and it was pretty good. It assumes you know basically nothing, no programming, so it might be too simple for you, but it has tons of exercises which you can do to practice. This book is really only for the basics of MATLAB, and not very advanced though. It'll help you with writing scripts, matrix and vector operations, plotting data, writing functions, basic programming if-then, while loops, etc. 
Agreed on the third options. Hash marks are useful if there is a large difference between data groups but not important just to identify zero. I must object to your use of png -&gt; photoshop though, eps -&gt; illustrator yields much higher quality images. 
Such a datasheet would be enormous, but let me try to clarify a few things that might help you in the future. Every graphical object in Matlab has a bunch of properties that alter its appearance. Whenever Matlab creates a new graphical object, it gives it an "identification number," which we call a *handle*, which lets us refer to that specific graphics object. For example, if we say: f=figure; a=axes; p=plot(1:10); we now have three object handles; one pointing to the figure, one to an axis, and one to a plot. These are three different types of graphics objects, and they have different properties. In Matlab, you can ask any object what all of its properties are using the get(handle) command: get(p) This will return a big list of properties and their values. Alternatively, you can ask it what the values of specific properties are: &gt;&gt; get(p,'LineWidth') ans = 0.5000 You can read up on every type of graphical object in the Matlab documentation (get used to calling "doc plot") or whatever. There are axis objects, surface objects, lineseries objects, patch objects, lighting objects, etc. Many kinds, and each have similar but often distinct properties. As an example for your tick marks, axis objects have "xticks" and "yticks" (and zticks) that are demarcated locations on the X and Y axes where labels and gridlines are located. If you have an axis object, you can ask where the tick marks are located: &gt;&gt; get(gca,'xtick') ans = 1 2 3 4 5 6 7 8 9 10 Or if you want to only label even numbers, you can do the following: &gt; set(gca,'xtick',2:10);
[google](http://www.google.com) *^if ^this ^link ^is ^offensive ^or ^incorrect, ^reply ^with ^"remove". ^\(Abusers ^will ^be ^banned ^from ^removing.)*
Another helpful tip: some properties take boolean flags, or doubles, as inputs. Others, however, have a small set of strings as valid inputs. If you want to know which strings are allowed, do this: h = plot([1 2 3]); set(h,'linestyle') (Note that you are setting a property, but NOT supplying a value). You should see this: [ {-} | -- | : | -. | none ] which is a list of valid strings, separated by the '|' character. Now, you don't have to use trial and error, or look it up in the documentation.
Definitely DEFINITELY don't call surf every time. I wish Matlab would put more warnings for calls to plot() inside of a for loop. Updating XData and YData is significantly faster. Also, Plasma--I think you for a double-newline before your code began or something--most of it is in plaintext instead of Reddit's code format.
By the way, in addition to Plasma's post (which is great), you can make your spheres look really sexy by using the following: [x,y,z]=sphere(50); s=surf(x,y,z,'facecolor','b','edgecolor','none'); camlight; lighting gouraud; That change this into this. If you want them semi-transparent call alpha(s,0.5); or something.
Could you sketch out what you're trying to achieve? I might be able to give you some Matlab code for it.
Well, yes and no. Your vector image is going to have to get rasterized at some point or another before it is printed... I just choose to do it at this stage rather than a later one because it tends to be easier for me to do any additional work in Photoshop, and a lot of journals and such only accept pixel-based images rather than vector-based ones. Matlab can export at arbitrarily large dpi... as long as you set it to 600dpi or above, that should be all you ever need for publication.
First of all, formatting the code so that we could actually read it here would help as would telling us what the problem you're having is. I see a few problems: (1) It looks like your definition of x2(1) is located in a comment. (2) your thetaAccel functions should each be in their own file and you just call them here. (3) rather than a for loop you should take advantage of the fact MATLAB treats everything as vectors and use .* and ./ to speed up the code.
Are you trying to analyze a pendulums motion? Please edit how you have your code is formatted above. It's a little difficult to read. 
Google is always a powerful resource method as others have suggested. When I learned Matlab I used: [Applied Numerical Methods with MATLAB for engineers and scientist by Chapra](http://www.slideshare.net/KaXioSosa/chapra-applied-numerical-methods-matlab-engineers-scientists-3rd-txtbk). I know two different professors at my institution that rely on this as there text. The link above is a free online copy of it. 
You could something like [this](http://pastebin.com/EZLvfgSw), but preferrably a bit more structured (ie some empty lines, spaces, comment if needed, etc). Adding four spaces in front of every line in the post should make the text be written in code mode
Are you trying to accomplish something similar to [this](http://m2matlabdb.ma.tum.de/download.jsp?MC_ID=3&amp;SC_ID=9&amp;MP_ID=402)? I hope that you don't just copy this code verbatim, that is plagiarism. 
[This guy has a really nice Matlab animation of coupled pendulum.](http://www.youtube.com/watch?v=idlM9lQiAH0)
Also in the future you should include what your input parameters are and what you are trying to calculate for the problem. 
Could you write out the problem with a little more detail?
Matlab doesn't like implied multiplication, especially between variables. Make sure you always write out the star to explicitly show multiplication. ex: y = 3; t = 4; y*t = 12 yt =&gt; completely different variable
Thanks for your answer, but I have been using y*t but it doesn't work. I don't know why the * doesn't appear in my post.
The problem is not with RK2 and RK4 or how to solve the ivp, it is when I need to find the error and I need to evaluate the ivp in t=0:h:20, but i gives me an error, and it is mostly because of the -t*y part. I think I need to change the function (eval) but i can't fin anything that works.
Oh, I understand ... I didn't interpret that at all from your text, but it seems you've already found another kind of solution :-)
I think I found the problem. Just stepping through in the command window (always helpful for debugging!): ____ dsolve('Dy = -y*t + sin(3*t) - cos(t*.01) + 3*sin(7*t)', 'y(0) = 0') ans = int(exp(x^2/2)*(sin(3*x) - cos(x/100) + 3*sin(7*x)), x = 0..t, IgnoreAnalyticConstraints)/exp(t^2/2) ____ According to dsolve, the exact solution is an itegral. You might be wondering what the IgnoreAnalyticConstraints thing is, well: By default, the solver applies the purely algebraic simplifications to the expressions on both sides of equations. These simplifications might not be generally valid. Therefore, by default the solver does not guarantee general correctness and completeness of the results. To solve ordinary differential equations without additional assumptions, set IgnoreAnalyticConstraints to false. The results obtained with IgnoreAnalyticConstraints set to false are correct for all values of the arguments. If you do not set IgnoreAnalyticConstraints to false, always verify results returned by the dsolve command. ____ So trying again with ignoring analytic constraints off: ___ dsolve('Dy = -y*t + sin(3*t) - cos(t*.01) + 3*sin(7*t)', 'y(0) = 0', 'IgnoreAnalyticConstraints', 'none') ans = int(exp(x^2/2)*(sin(3*x) - cos(x/100) + 3*sin(7*x)), x = 0..t)/exp(t^2/2) ___ Sadly this is still an integral, so you must first evaluate the integral before you can send the resulting function to eval. The real problem here is this integral is a darned hard one to solve. Actually, I'm not sure you can evaluate this integral symbolically. Someone with more experience on the matter may be needed at this point. You may have to numerically estimate this integral.
/r/Rsoftware
/r/rstats 
/r/statistics has some knowledgeable folks. 
Risky click of the day...
I'm sorry, but could you share your script on pastebin? I'm at work and 2shared is blocked. Also, it sounds like you know what you're doing. Which parts specifically are giving you trouble?
I thought about fixing it, but I realized it was emphasizing the lines that demonstrated my advice. 
What error does it give you. 
Error using sym/eval (line 11) Error: Unexpected MATLAB expression. Basically i want to evaluate this: exp(-t^2/2)*int(exp(x2/2)(sin(3x) - cos(x/100) + 3sin(7x)), x = 0..t, IgnoreAnalyticConstraints)/exp(t2/2) if t=0:h:20, dom = [0,20], h=(5,5/2,5/4.....)
 A(isnan(A)) = []; This will remove any elements that are not a number.
NaN means not a number. Your call to median attempts to sort the values, and it doesn't know where to put the NaN in the list, so it returns a NaN.
while apro_med&gt;0.05 tend=20; h_euler = 5; t_euler=0:h_euler:tend; n_euler=tend/h_euler; for j=1:n_euler; y2(j+1)=y2(j)+h_euler*primay2(y2(j),t_euler(j)); y3(j+1)=y3(j)+0.5*h_euler*primay3(y3(j),t_euler(j)); end A(:,1)=(abs((y2-y3)./y2))./n_euler; A(isnan(A)) = []; apro_med=median(A); if apro_med&gt;0.05 h_euler=h_euler/2 else h_euler=h_euler end end &gt;I tried this, but it still does'nt work. I don't know what part I'm missing. 
You need to rethink the steps required to complete the calculations. The while loop isn't working because the condition you defined (&gt;.05) is not met on the first iteration of the loop. I'm going to bed and not going to solve this for you, but my advice to you would be to stop over thinking the problem, step away from the code, and follow the calculation steps one at a time (I.e. line by line, from one loop iteration to the next). If you haven't found them already, look into the built in debugging tools in the Matlab editor.
Thanks alot for your help and time.
Is this a part of a bigger code? Have you declared the variables apro_med, y2, y3 etc before the loop?
Never mind I think I can make it less messy by using two file arrays PatternA = fullfile(MyFolder, 'a*.jpg'); FilesA = dir(PatternA); PatternB = fullfile(MyFolder, 'b*.jpg'); FilesB = dir(PatternB); and then using FilesA(1) and FilesB(1) to work with the two. If anyone has any more intuitive suggestion I am open but this is working for me for now. :)
I do not think that you absolutely have to use the fullfile function. The line below would work fine. FilesB = dir('b*.jpg') Edit: if it's in a specific folder, you can put a string inside... FilesB = dir([MyFolder 'b*.jpg']) 
Hi! I'm sorry it took me quite long, but I have added the script on pastebin, as you suggested, and I edited with comments in the parts I need help with. Thank you.
Yes, I didn't put it because I tought it wasn't necesary. primay2 = @(y,t) -y*t + sin(3*t) - cos(t*0.1) + 3*sin(7*t); y2(1)=0; primay3 = @(y,t) -y*t + sin(3*t) - cos(t*0.1) + 3*sin(7*t); y3(1)=0; tend=20; apro_med=0.05
if you don't specify a range, *xlsread* will load in all data on the sheet. I'm not sure if you can just specify the ~~top right~~ top left like you can with *xlswrite*, but it doesn't hurt to try.
Thanks for the reply. Unfortunately it appears that xlsread needs both a start and end point defined. Trying to read 'A2' reports that worksheet A2 cannot be found. Trying to read 'A2:' and 'A2:C' both report that the data range is invalid. Any other suggestions? Am I missing something obvious here?
can't you do: RANGE=strcat('A2:C',num2str(n)); [NUMERIC,TXT,RAW]=XLSREAD(FILE,SHEET,RANGE)
will you explain what you mean by updating xdata and ydata vs plotting within a for loop? 
there are functions called nanmean, nanmedian, nanstd... that ignore nans... but PPGBM's advice is solid. 
This would be golden, but unfortunately we are not allowed to manually edit the input '.xlsx' file, and it does contain headers.
The problem is that 'n' changes for each file. And each time I run the script, I may want to use a different input file to check data from a different experiment.
How do you specify just the top right in xlswrite?
&gt;apro_med=0.05 This is why your while loop of apro_med&gt;0.05 doesn't start. 0.05 is not more than 0.05. You either want to start with a different value, or use &gt;= as your check.
try this (should give you the length data in the column C) n = num2str(length(xlsread('Spreadsheet_Name.xlsx', 'Sheet Name', 'C:C'))) then xlsread('Spreadsheet_Name.xlsx', 'Sheet Name', ['A2:C' n]) It requires two reads, but this is the only way I know how to do it. 
Sorry. I meant top left. But do do this, say you have a 5 x 4 matrix, *a* then xlswrite('filename.xlsx',a,'Sheet1',A2) will put the matrix A2:E5.
ah ok, I wonder why that doesn't work in xlsread?
Just using: data=xlsread('Input Data/Group B input.xlsx','A:C'); worked a charm. Thanks very much for your help everyone. Have an upvote for your time!
No problem. When you call "plot," Matlab has to construct new graphics objects, which is costly. It'll have to 1. delete what's already there, 2. preallocate new memory for your new graphics object, 3. assign all of the standard properties to the graphics objects, 3. Run everything through the graphics pipeline to ensure lighting, plot ordering, alpha transparency, etc. is set, and 4. Display to the screen. When you simply update XData and YData, you bypass steps 1-3 (most of 3), and run only step 4. This is much faster for Matlab, and you'll get faster updates. To clarify what I mean by the difference between the two, consider the following two scenarios: **Scenario 1: plotting within a loop -- Move a sine wave sideways** x = linspace(0,2*pi,500); offsets=linspace(0,2*pi,1000); figure; tic; for i = 1:1000 plot(x,sin(x-offsets(i)),'k','linesmooth','on'); grid on; drawnow; end toc; &gt;&gt; Elapsed time is 6.180256 seconds. **Scenario 2: Updating YData in a loop -- Move a sine wave sideways** x = linspace(0,2*pi,500); offsets=linspace(0,2*pi,1000); figure; hold on; p=plot(x,sin(x),'k','linesmooth','on'); grid on; tic; for i = 1:1000 set(p,'YData',sin(x-offsets(i))); % update YData only drawnow; end toc; &gt;&gt; Elapsed time is 2.442954 seconds. This is a very simple example that already shows big gains. When you're plotting complex objects, such as moving spheres through space, your speedup will be much, much greater.
You are only shifting the red channel, use following line instead: test(:,d,:) = test(:,d+20,:);
Perhaps, thinking about it the other way, it works in *xlswrite* because you have the information to infer both corners. *xlswrite* could take size(a) and the starting point *A2* and infer the other corner *E5*. With *xlsread* you don't know *a piori* how big the matrix or vector is, or if it's a regular size (rectangular), so it requires input on what to read from. I'm just speculating here though.
I second that solution. 
Yep, i'm just dumb :)
Can you read the whole sheet and then manipulate the array in Matlab, rather than trying to only pull in the relevant cells? So: [NUMERIC,TXT,RAW]=xlsread('Input Data/TESTING.xlsx','A:C'); then manipulate as needed. Should be much faster to manipulate the matrices/cell arrays once they have been read into Matlab.
Looks like you have a: axis equal command somewhere. Which is forcing the distance between 0 and 1 to be the same on both axes. Try removing it.
You can do axis equal, but incase you run into this problem down the road just do this create a a figure using this &gt;figure('units','normalized','outerposition',[0 0 1 1]), this makes it so you can tell it where to be with number from 0 to 1 (the edges of your screen). Then create a subplot, and you can determine the exact width and length of plot inside the figure window &gt;subplot('Position',[.05 .05 .9 .9]) This will be useful for when you need to fit multiple plots in tightly with eachother, or if you really want to set the edges of your plot to the edges of your screen. For quick fixes though, use the axis equal method
Thanks. I'm sort of confused with plotting my data, and having to solely rely on copy-pasting from other code that I found online. Do you know of a good resource that describes everything I need to know about plotting things in MATLAB? Edit: For example, do you know how one would go about grabbing which value corresponds to that point? I tried the pointer thing which gives the corresponding x,y,z values in a yellow box, but that didn't give any information for the value of the plot since it's 2-D. Below is the code I'm using to plot it figure(1); pcolor(xxP,zzP,B); colormap(jet); shading interp; % axis equal; axis([-xPmax xPmax -zPmax zPmax]); xlabel('&lt;-- x --&gt;');ylabel('&lt;-- z --&gt;'); title('Magnetic Field Distibution'); colorbar;
TBH, I have literally just pieced my knowledge of matlab together from http://www.mathworks.com/help/matlab/ it's basically just the official matlab documentation on everything. I havev't read a book on matlab or anything like that. I find that I will normally realize I need to do something, like change the axis scaling, then look it up by google search which leads you normally to the matlab help/documentation section. From there, if you are still confused, the matlab forums will normally have a thread by someone who is having the exact same problem. google is your best friend. 
for x = 1:5 matlab sucks end 
while loop = 0 then if x = loop(x:`:5)) end end 
a = imread('pic_name') b = imhist(a) end end 
nanmean, etc. are part of the Statistics Toolbox, so knowing /u/PPGBM's logical indexing is the best course of action.
If you want to preserve the original size of A, you can use: Am = median(A(~isnan(A))); i.e. "Take the median of the non-nan elements of A.
As I said, you need to know the file format. A quick google search returns [this](http://en.wikipedia.org/wiki/MPEG_transport_stream). Something like this is what you're looking for - it tells you what each bit/byte/word/etc. of the file means. So based on that page I linked, the first byte read from the file should be 0x47. You might also find functions (perhaps on the file exchange) to do this for you.
It's trying to preserve the aspect ratio in x and y axes. Try typing daspect([1 2 1]) And play with the first two numbers to get it the way you want Also type set(vca,'position',[0 0 1 1]) 
You can cram a LOT of functionality into very little code in MATLAB. It can be tricky to pick up. There are a lot of built-in commands to learn and even more clever ways of using them to figure out after you finally find them. Generally speaking: if you have a loop that only contains a single command (or even worse, another loop...) odds are there is a better way to achieve what you're doing. People are used to needing loops to operate on every entry in data structure from other languages so it can be a hard habit to break!
ah, yes. i'm so spoiled by toolboxes...
Hi--I'm not sure what you mean. What do you mean "all locations of the sine wave?" Sine is a function whose domain encompasses the entire real number line....we'd need a screen of infinite width.
Run these: % Make the figure resizeable to then export with less margin if desired set(gca,'ButtonDownFcn','selectmoveresize'); set(gcf,'WindowButtonDownFcn','selectmoveresize'); % Optional, allows setting of position by clicking elsewhere It'll give you marks to drag the corners or edges of the figures to fill the space to your liking.
Try to think of a situation where that if statement can evaluate to true. I'll give you a hint: there is only one time that will ever happen and in that one situation the swap of values will be redundant anyways... You are almost there, just need to reconsider your logic to make it do what you actually intend. I would highly suggest you give [rubber duck debugging](http://en.wikipedia.org/wiki/Rubber_duck_debugging) a try. It works wonders for these types of bugs.
&gt;No no no no no no no no no nononononononononononono. NO! Just... augh. Loops. Loops everywhere... Loops make MATLAB sad. Can't emphasize this enough. All day long.
This doesn't fully answer your question but if you're just doing linear regression you might want to use the \ operator. For example you can create a matrix [a ones(size(a,1),1)] \ b. the first element of the output will give you your B in A+Bx and the second element will be your B. If you want to get the correlation coefficient just use the corr() function. I think (but could be wrong) that it's included as a regular function in matlab (i.e., not a part of the stats package). 
I am worried I am not understanding the general Function Structure of MATLab. I wanted to use MATLAB Builder EX to convert this to a .dll and .bas to make an Excel Add-in.where the three inputs are X's Y's and whether you want A,B, or R
ah man, unfortunately I can't help you there. I just use it to make GUI's and to code data analysis. To make a function to run inside of matlab you need a line that looks like function out = yourfx(in) at the beginning of the file. This might not be helpful for your application though. Good luck!
Can you copy and paste exactly what you entered on the command line and error message? 
apologies- i was totally unclear. so i end up with [this](http://i.imgur.com/5eOqxmz.png) if i execute: x = linspace(0,2*pi,500); cols=jet(500); offsets=linspace(0,2*pi,1000); figure; hold on; for i = 1:1000 plot(x,sin(x-offsets(i)),'color',cols(i,:),'linesmooth','on'); grid on; end is there any way to generate the same image by updating YData rather than replotting? 
Hey, it seems that you're doing simple linear regression, i.e. a single explanatory variable. I've written a few scripts that do multiple linear regression problems because I took a class in it and used MATLAB for the calculations. If you'd like... I can send you what I have. It avoids the whole polyfit fiasco. It requires a bit more statistical knowledge to understand where the equation come from, but if you're using it, it's probably better that you know that stuff anyway! It's essentially the same formulas, but just with a bit more matrix algebra. to be clear, multiple linear regression: y = B0 + B1 * X1 + B2 * X2 + ... where B0, B1, B2,... are determined by minimizing the mean square error
 clc clear close all %HW 2 problem 3.14 %Data % independent/explanatory variables - often Xi, X1, X2, etc. R=[0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.918900000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.754700000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.568500000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;0.361000000000000;]; T=[-10;0;10;20;30;40;50;60;70;80;-10;0;10;20;30;40;50;60;70;80;-10;0;10;20;30;40;50;60;70;80;-10;0;10;20;30;40;50;60;70;80;]; % dependent variable - often y U=[3.12800000000000;2.42700000000000;1.94000000000000;1.58600000000000;1.32500000000000;1.12600000000000;0.969400000000000;0.847300000000000;0.748100000000000;0.667100000000000;2.27000000000000;1.81900000000000;1.48900000000000;1.24600000000000;1.06200000000000;0.916000000000000;0.800500000000000;0.709100000000000;0.634500000000000;0.571500000000000;1.59300000000000;1.32400000000000;1.11800000000000;0.957600000000000;0.830200000000000;0.728200000000000;0.647000000000000;0.578400000000000;0.521900000000000;0.473500000000000;1.16100000000000;0.992500000000000;0.860100000000000;0.752300000000000;0.666300000000000;0.594000000000000;0.533800000000000;0.480400000000000;0.436100000000000;0.401600000000000;]; n=length(U); k=2; % put independent variables in matrix form, include a column of ones (for intercept term B0) X=zeros(n,3); X(:,1)=1; X(:,2)=R; X(:,3)=T; % minimize the mean square error and determine the vector of coefficients directly B=((X'*X)^-1)*X'*U; % entry 1, B(1), is B0, the intercept term % entry 2, B(2), is B1, the slope for X1 % entry 3, B(3), is B2, the slope for X2 SSr=B'*X'*U-sum(U)^2/n; SSres=U'*U-B'*X'*U; SSt=U'*U-sum(U)^2/n; % for plotting r=.22:.02:1; r=r'; t=-17.5:2.5:80; t=t'; x=zeros(n,3); x(:,1)=1; x(:,2)=r; x(:,3)=t; u=x*B; figure(1) hold on scatter3(T,R,U,'filled') grid on plot3(t,r,u) zlabel('Viscosity','fontweight','b') ylabel('Ratio','fontweight','b') xlabel('Temperature','fontweight','b') title(['Multiple Linear Regression Model'],'fontweight','b') disp('Multiple Linear Regression Model') % display all three constants str=[num2str(B(1)) ' ' num2str(B(2)) ' ' num2str(B(3))]; disp('Beta 0 Beta 1 Beta 2') disp(str) R_sq=SSr/SSt R_squad=1-((SSres/(n-k-1))/(SSt/(n-1))) %% Test for significance of regression (F-test) display(' '); display('Test Ho: B1=B2=0'); Fo_1=abs((SSr/k)/(SSres/(n-k-1))); F_95=abs(finv(.95,k,n-k-1)); if abs(Fo_1)&gt;F_95 reject='Yes'; else reject='No'; end str=[num2str(Fo_1) ' ' num2str(F_95) ' ' reject]; disp('Fo_1 F_95 Reject Ho?') disp(str) %% Test for significance of a single regression coefficient (t-test) display(' '); display('Test Ho: B1=0'); C=(X'*X)^-1; % Testing B1, use C(2,2) var_hat=SSres/(n-k-1); to_1=abs(B(2)/sqrt(var_hat*C(2,2))); t_95=abs(tinv(.025,n-k-1)); if abs(to_1)&gt;t_95 reject='Yes'; else reject='No'; end str=[num2str(to_1) ' ' num2str(t_95) ' ' reject]; disp('to_1 t_95 Reject Ho?') disp(str) display(' '); display('Test Ho: B2=0'); % Testing B2, use C(3,3) to_2=abs(B(3)/sqrt(var_hat*C(3,3))); t_95=abs(tinv(.025,n-k-1)); if abs(to_2)&gt;t_95 reject='Yes'; else reject='No'; end str=[num2str(to_2) ' ' num2str(t_95) ' ' reject]; disp('to_2 t_95 Reject Ho?') disp(str) %% Create a simple model that only uses T % now we have simple linear regression, one explanatory variable %find Sxy_T, Sxx_T, and SSt_T sxy=zeros(length(T),1); sxx=zeros(length(T),1); sst=zeros(length(T),1); T_bar=mean(T); U_bar=mean(U); for i=1:length(T) sst(i)=(U(i)-U_bar).^2; sxx(i)=(T(i)-T_bar).^2; sxy(i)=U(i)*(T(i)-T_bar); if i&gt;1 sst(i)=(U(i)-U_bar).^2+sst(i-1); sxx(i)=(T(i)-T_bar).^2+sxx(i-1); sxy(i)=U(i)*(T(i)-T_bar)+sxy(i-1); end end SSt_T=sst(length(T)); Sxx_T=sxx(length(T)); Sxy_T=sxy(length(T)); clear sst sxx sxy % simple linear regression fomulas % is B1, the slope term Beta1_T=Sxy_T/Sxx_T; % is B0, the intercept term Beta0_T=U_bar-Beta1_T*T_bar; % Find the residual (error) sum of squares SSres_T=SSt_T-Beta1_T*Sxy_T; MSres_T=SSres_T/(n-2); SSr_T=SSt_T-SSres_T; display(' '); disp('Simple Linear Regression Model') str=[num2str(Beta0_T) ' ' num2str(Beta1_T)]; disp('Beta 0 Beta 1') disp(str) %find correlation between U and T p=Sxy_T/sqrt(Sxx_T*SSt_T); R_sq_T=p^2 %find R squared adjusted R_squad_T=1-(SSres_T/(n-2))/(SSt_T/(n-1)) %% Find a 99% Confidence Interval for the regression coefficient for Temperature for the multiple regression model and simple regression model % Testing B2, use C(3,3) same to_2 as before display(' '); display('Find a 99% CI for Beta 2 (Temp.) in Multiple Regression'); t_99=abs(tinv(.005,n-k-1)); LL=B(3)-t_99*sqrt(var_hat*C(3,3)); UL=B(3)+t_99*sqrt(var_hat*C(3,3)); str=[num2str(LL) ' ' num2str(B(3)) ' ' num2str(UL)]; disp('Lower Beta 2 Beta 2 Upper Beta 2') disp(str) % find 99% CI for the slope Beta_1 display(' '); display('Find a 99% CI for Beta 1 (Temp.) in Simple Regression'); t99_T=abs(tinv(0.005,n-2)); LL=Beta1_T-t99_T*sqrt(MSres_T/Sxx_T); UL=Beta1_T+t99_T*sqrt(MSres_T/Sxx_T); str=[num2str(LL) ' ' num2str(Beta1_T) ' ' num2str(UL)]; disp('Lower Beta 1 Beta 1 Upper Beta 1') disp(str) 
I've tried all the obvious things such as forcequitting and restarting matlab. Something weird that I have noticed is that I can only NOT close the figures which were created by code in the same directory as the code wherein I redefined 'CloseRequestFcn', i.e. I ran old code from a directory one level higher and was able to close the figures. 
Hey sorry, if you put 4 spaces before every line (and an extra newline at the beginning) you'll get "code mode." I see what you're doing though--do you want to have that entire thing move? If not, you can speed up your plotting by getting rid of the loop, and instead creating a matrix where each column is a new line that you want to plot: num_pts=500; num_offsets=1000; x = linspace(0,2*pi,num_pts); cols=jet(num_offsets); offsets=repmat(linspace(0,2,num_offsets),num_pts,1); figure; hold all; set(gca,'colororder',cols,'xlim',[0 2*pi]); xx=repmat(x',1,num_offsets)-offsets; p=plot(x,sin(xx),'linesmooth','on'); grid on; By the way, not quite sure why you're trying to do this--your original post mentioned moving spheres. Here's how you can move a sphere around with a little shadow underneath: [x,y,z]=sphere(50); % make a figure bigger than the standard sucky one scrsz = get(0,'ScreenSize'); width = scrsz(3)*.9; height = scrsz(4)*.9; left=(scrsz(3)-width)*.5; bot=(scrsz(4)-height)*.5; figure('outerposition',[left bot width height]); hold all; view(3); set(gca,'xlim',[-pi pi],'ylim',[-pi pi],'zlim',[-pi pi]); grid on; N=100; num_revolutions=5; t=linspace(0,2*pi*num_revolutions,N*num_revolutions); x_offsets=cos(t); y_offsets=sin(t); s=surf(x,y,z,'facecolor','r','edgecolor','none'); camlight; lighting gouraud; axis square; % let's draw a circular shadow below t=linspace(0,2*pi,50); shadow_x=cos(t); shadow_y=sin(t); shadow_z=ones(1,50)*-pi; p=patch(shadow_x,shadow_y,shadow_z,'k','edgecolor','none'); alpha(p,0.5); for i = 1:N*num_revolutions set(s,'XData',x+x_offsets(i),'YData',y+y_offsets(i)); set(p,'XData',shadow_x+x_offsets(i),'YData',shadow_y+y_offsets(i)); drawnow; end
Look in to try/catch blocks: http://www.mathworks.com/help/matlab/ref/try.html Put the save command in the catch block, which will be executed if an error occurs in the try block. Edit: I now realized I completely misinterpreted you question, sorry, it's been a long day. I'd just comment out the error ridden lines so they get saved but don't get checked by the editor.
it gives you an error message when you try and save? As in you try and save the m file...not execute it? ..... or do you have breakpoints enabled and it is telling you it cannot enable breakpoints with errors in the code?
Sorry, it's not entirely clear what you're trying to do. Do you just want to do multivariate linear regression? There are a whole bunch of functions for doing this in Matlab, and they will actually be better than yours because they're capable of doing some nice stuff, like dealing with nearly singular matrices and some of them can produce regression diagnostics for you, not to mention allowing regression weights or ridge parameters. regress, lscov and the backslash operator, \, are all in plain-vanilla Matlab. regstats and ridge are in the stats package. Rolling your own isn't that hard (I've had to do it for work because we have special requirements), but in any case, I can't imagine why you're using polyfit on a linear function. A couple other things: your repeated if/else should probably be a case statement (switch/case) for readability and you should really just return all the parameters (with a varargout) and skip that stat_a_b_r part altogether. 
[The equivalent of this post] (http://www.youtube.com/watch?v=0cVlTeIATBs) **matlab code tricks, discussion, questions; but we don't do your homework!**
thanks again for being incredibly helpful (and teaching me how to write in code mode....i'm learning so much here on r/matlab). so fyi i'm not the OP, was just curious about how to implement the update YData thing you suggested... and I guess from what I understand, updating Ydata and using drawnow will 'clear' the previous plot. But I guess the message I'm getting from you is that if I need to do an operation in a loop, I should just create a "results" matrix and plot the data as a matrix rather than plotting within the loop where I perform the operation... Not sure if that makes sense to you but thank you thank you for all of your help! I learned a ton. :) 
Try reducing your step size. If you look at the scale of the plot, it's blowing up to 10^17. I reduced h by a factor of 10 and it looks fine.
 for i = 1:4 tolerance = 0.25*h(1,i); if abs(h(2,i)-h(1,i)) &gt;= tolerance h(2,i) = h(1,i); end end Another solution. This way you only need one logical comparison. We find the absolute difference between the two values and then compare this to the tolerance which has been set to a quarter of the first value. Hope that makes sense. And be sure to test my code :-) 
Also, unless you're testing Euler's method for educational purposes, there is a more sensible way of integrating your function: primay2 = @(t,y) -y*t + sin(3*t) - cos(t/10) + 3*sin(7*t); [t,y]=ode45(primay2,[0 20],0); plot(t,y) [Figure](http://imgur.com/6Ptfngi). 
Can you give us an example of some code which causes this? If I introduce an error into a MATLAB file and press [Save], it doesn't say anything. It just saves.
Here's a way to do this without loops h = rand(2, 4); % fake data badindex = ~(abs(diff(h)./h(2,:)) &lt;= 0.25); h(2, badindex) = h(1, badindex);
Side note: I mis-parsed that headline. I came in here ready to use matlab to pull off a bank heist. I am going to go finish my coffee in that hole over there now...
* frame = read(test,k); * while d&lt;c-25 * frame(:,d,:) = frame(:,d+25,:); * d=d+2; * end That's what i do with the frames, looking for [this](http://i.imgur.com/gNNoXWr.jpg) effect, on every frame, so the output video should look like [THIS](http://www.youtube.com/watch?v=89cGA4-yPRw) with [these](http://i.imgur.com/HGYUeVk.png) 3D options enabled.
Here is a example script how to use 'VideoWriter' (which seems to be new object oriented way of creating videos and which replaces 'avifile'): %Load test data img = imread('peppers.png'); %Prepare file to which we want to write our output images directly video_obj_raw = VideoWriter('rolling_perppers_raw.avi'); open(video_obj_raw); %Prepare file to which we want to write "processed" version of the images video_obj_plot = VideoWriter('rolling_perppers_plot.avi'); open(video_obj_plot) % While processing... for ii = linspace(0,360,100); % Do something img_rot = imrotate(img,ii,'bilinear','crop'); % Write the raw image data writeVideo(video_obj_raw, im2frame(img_rot)); % Plot the raw image data to a figure imagesc(img_rot); title(sprintf('Rotated peppers: %0.1f',ii)) % 'getframe' "takes a screenshot" either of the figure (when using % 'gcf'), or area of the axes ('gca') writeVideo(video_obj_plot, getframe(gcf)); end % The video files needs to be finalized close(video_obj_raw); close(video_obj_plot);
I don't understand whats happening :( Can you give me an example how to write a video with 10 images, lets say i have a while cycle with 10 iterations, every iteration i get one image. writeVideo(video_obj), im2frame(img_obj) - i understand this bit, but what is % Plot the raw image data to a figure ? EDIT: IT FUCKING WORKED ! I love you man :) I only used writeVideo(video_obj_raw, im2frame(img_rot)); to make the file :) Everything is cool, now, is it possible to keep the audio too ?
Try just reading the C column to find the length like in my original post. Not sure, but it could be quicker. 
Yep, you are correct. Reading just the C column took 3 seconds, and reading A:C took 5. Thanks for your help! :)
Sounds like you're just getting M-lint warnings in the m-file editor. You can right click the error and choose to ignore it. Just be careful you don't choose to ignore it globally- you normally want to be reminded of these things.
You could index i too and create a 3D Matrix? But the find solution is much faster than the if-else statements.
Nice to hear you got it to work. Just to clarify, the script created two .avi-files, first having "raw frames" to which you can not draw lines, text, labels, etc. Second one is created from figure/axes window and you can use MATLABs normal plotting tools to draw on the frame before rendering it to the video. About the audio: I haven't used these, but it seems like [vision.VideoFileWriter](http://www.mathworks.se/help/dsp/ref/signalblks.multimediafilewriterclass.html) or [signalblks.MultimediaFileWriter](http://www.mathworks.se/help/vision/ref/vision.videofilewriterclass.html) could be used, but it still might be easier to first render the video, and then add the audio afterwards using external program (for example VirtualDub).
Glad you could find a solution yourself. Changing your outer for-loop to for s=unique(data(:,2) might be a little more robust. (In case your subject numbers are not a perfect sequence.)
All three of those have demonstration examples included. One of them is even named 'example.m' for fucks sake... What level of documentation are you expecting from an academic publishing? The fact that they posted a fully working codebase with a demo is about as good as it gets.
Specifically, for fucks sake, I am not sure how they obtained the .mat files for each image in the example (the variable "dataFileName" in the example.m that you are referring to). But yeah, thanks for the shithole answer to a reasonable question - not everyone is as talented as you, obviously, and I wouldn't have asked if I hadn't put in a whole lot of effort over several days.
By the way, you can set the "position" of any plotted element. The typical units are "normalized," which means it ranges from 0 to 1, where 1 = 100% of the span. So for example: set(gca,'position',[.05 .05 .9 .94]); This will set the position of the axes 5% from the left, 5% from the bottom, a width of 90% the figure width, and a height of 90% the figure height. You can move your colorbar too, just make sure you grab a handle when you create it: c = colorbar; set(c,'position',[.96 .05 .03 .94]);
Fair enough, I did say I'd appreciate any response. As for not having relevant information, it would have been easier just to mention that, no? Why assume that the person asking a question is a lazy sod that just wants work done by someone else? Shit, if answering bothered you that much, why not just leave it and let someone else have a go? And yeah, my mistake, glanced at the wrong filename since several pieces from all the programs are open on my desktop. Thanks for the last bit. Does this mean that this mat file is just a blank file (or even just a file name)? I'll give this a shot.
Because 98% of posts similar to yours ARE lazy sacks of shit looking for someone to do their homework or bail them out on a long term project they are starting in the final hour. That shit pisses me off and I have absolutely no qualms on calling them out. Bonus: my current research involves an algorithm that needs to run for a while before I can make a judgement on whatever new code I'm trying (or to get to the new code so it can fail spectacularly). That gives me plenty of time to waste on Reddit spreading my own vigilante justice being an internet tough guy. That .mat CAN start empty. Read lines 184-229 for the portion that tries to load the file. Lines 231-271 generate that information if it is not present.
Hey man I have the same exact problem this is so weird. 
Got the CTM working! And it was simple enough that I feel like an idiot now. Anyway, thanks for pointing me in the right direction, and sorry for venting - I was getting real frustrated. I really need to learn matlab before attempting this kind of thing. Going to give the Berkeley one a shot again since thats the one I really want, then the easy part is over. Next step is actually following the damn papers line-by-line and understanding the algorithms.
No worries. Hopefully you understand the frustration and the venting from my side now ;) There are a lot of very helpful people floating around here. Just keep in mind good questions get good answers. Code snippets are basically a requirement for that most of the time.
A simple way that I use (depending on the type of data) is to find the mean and standard deviation of the 'good' data and purge 'bad' data that's a certain number of standard deviations away from the mean. I'm sure there's a fancier, better mathematical way but I have no idea what it is.
Hmm - I could do that. But on the other hand, I definitely want to show that there is still an extremely large value at that region.
This is good advice. If you think the large value is truly an outlier and is not representative of the rest of your data set, than I would replace with the mean of the rest of your data with the outlier removed.
Take a look at the [axis](http://www.mathworks.com/help/matlab/ref/axis.html) function. You can specify the limits yourself. Do some statistics on the data to figure out what they should be.
Not misleading with error bars.
My teacher in numerical methods recommended changing all values above/below some appropriate threshold into NaN. Personally I'm not sold the idea, but I thought I'd pass it along.
how would you apply error bars to this graph?
I don't know what you're doing specifically, but this kind of technique can easily become counterproductive or, worse, downright deceptive. If your data are shit, you need to show it! And if you have a genuine reason to believe that some points are 'bad' then you need a better selection criterion than simply being 1SD away from the mean (both statistics which will be disproportionately affected by the 'bad' data in any case - so you're not really removing its influence, you're just making it harder to spot).
One of Matlab's selling points is the ease of its plotting and visualization capabilities. If all you want to do is plot a vector (i.e., the temperature at different points in time at one predetermined point on a rod), consider the following: U = getHeatEquationWhatever(Uinitial, alpha); plot(U) Where the getHeatEquationWhatever() function is whatever you do to go from an initial heat distribution Uinitial on the rod to the answer in the silly sample above. Oftentimes, people don't necessarily struggle with plotting things in Matlab, but in understanding what the associated routines expect as inputs and the syntax for array manipulation (to get the "right" input). Here's an example to get started if this is the case. X = 0:0.1:2*pi; Y = sin(X); % Most matlab built-in functions accept vector-valued results natively. plot(X,Y); The : operator in the first line is a little subtle. In the above code, it just means "Make a vector that gives you the uniform points between 0 and 2Pi with spacing 0.1" Write back to let us know where you're at. More details means better help.
Help Xlim
 z=abs(zscore(data)); z(z&gt;3)=[];
I guess I was being general about setting plot limits, but yes, ylim in this case. 
You don't even need a find. Just do logical indexing. 
Do you have a layout for the graph? As in a set of (x, y) coordinates for where your vertices go? If you don't, then the first thing you need to do is make one. If you have nothing better, use a circle with evenly spaced points. A for-loop will do fine for drawing your edges and changing the color of your nodes. Just plot lines from one point to another (on the same plot, of course). Write a separate function to make arrowheads (something like arrow(x1,y1,x2,y2)). I'm on my phone right now so I can't really write out code, but I can give more details in the morning. Good luck! 
Yeah, matlab suggested the same thing. Clever old matlab.
You want to read in using [fscanf](http://www.mathworks.com/help/matlab/ref/serial.fscanf.html) rather than fread. 
These either do not return anything or show me an error: z = fscanf(s) z fscanf(s) fscanf(s,'char',47) fscanf(s,'char') fscanf(s,47) [A,47,msg] = fscanf(s) [A,count,msg] = fscanf(s) Any ideas what the right input should look like?
I need to stop replying late at night... thrope raises a very good point above, namely Poisson is not a continuous distribution so your request is a bit mystifying. Secondly, assuming you do in fact want a Poisson distribution but only values from some specific range your original approach will work well enough. Generate a parameter, test if it's in your bounds, use it, repeat. The only problem is then the parameters you are using are essentially of another distribution since you are throwing out a fair chunk of the values.
 &gt;&gt; char([65 84 43 67 82 67 61 49 13] AT+CRC=1 &gt;&gt; fprintf('%s\n',[65 84 43 67 82 67 61 49 13]) AT+CRC=1
You cannot enable a break point on code that won't parse. By "won't parse" I mean not code that has bugs in it, but code with syntax errors -- errors that make your text not valid Matlab code. If you *need* to save the file, disable your break points.
Thanks a ton, Bison. I am using biograph and its really really cute.
Thanks a lot Tobb. I figured out the usage with Matlab's biograph. Thanks anyways bro. 
class(s) returns **ans = serial** &gt;&gt; fread(s,64,'char'); Warning: Unsuccessful read: The specified amount of data was not returned within the Timeout period. and &gt;&gt; fread(s,64,'char*1') Error using serial/fread (line 171) Invalid PRECISION specified. Type 'help serial/fread' for more information. Those are the errors I get. Yes, I am using PC connected to the phone.
I'm sorry, but I do not understand what are you trying to say? That is the command I use to ask for the Caller ID. Is there are reason I should go with fprintf? The ASCII I want decoded to char is the 47 numbers listed above: &gt;&gt; fread(s, 47) ans = 65 84 43 67 82 67 61 49 13 #etc...
The axis function won't get rid of the value. Instead it will just show lines going to the upper y limit of the graph and, like you said, will look ugly. To get rid of it, you'll have to replace it was [NaN]. Some other options: * Show both graphs (like mentioned by stilllolcats). * You could do some type of statistical test to determine if it is truly an outlier. If so, document in the text and remove (replace with[NaN]). * Or you could modify the y-axis by using axis([20,120,-25,25]) and then modify the y-axis labels to represent a non-linear scale that jumps from, say, 20 to 80. This would probably be misleading to most readers though. Bad idea. Why did I even suggest it?
http://www.reddit.com/r/matlab/comments/1eggx9/update_2d_to_3d_now_with_video/ this might help. 
You need to separate the &lt; and &gt; comparisons, and use an &amp; (or &amp;&amp;) to get both. Something like y&gt;x &amp;&amp; y&lt;z
I did this now, but how do I get the program to plot only the centroids that meet this criteria, and not all of the centroids?
I'm not sure? If you get the logic in the if statement correct, it should give you that behavior. 
I got it working thanks!
Not wonderfully coded but does the job. I have a tendency to leave semicolons off certain lines to show how a simulation is progressing, if I need to debug. I then forget about it and when I run the code weeks later, I can't remember for the life of me which variable is printing to the screen nor from which function. I found a way to get mlint to do it, and I wrote this little script that takes a cell input with a list of .m files, and it'll then tell you which, if any, lines are missing semicolons that would cause output to the command window.
randi
http://lmgtfy.com/?q=matlab+random+integers&amp;l=1
Yep. I don't think I've ever seen something so blatantly Google-able in this sub.
Would you mind explaining .(fieldname)? I use structures a bit and am not sure how you would go about referencing them in a more sophisticated manner.
Look at the output of textscan. I created this file: 1 2 3 4 5 6 7 8 a 10 11 12 13 14 15 16 And then ran this: D = textscan(fid, '%f%f%f', 'ReturnOnError', true) And got this: D = [3x1 double] [3x1 double] [2x1 double] Note that it read up to the point it hit the 'a.' If I resume reading, I get this: A = fgetl(fid) A = a 10 Which tells me that any subsequent read operation from that file ID will resume exactly where textscan first stopped.
Congrats on your first submission, but there exists a similar tool that will report on all m-lint warnings and errors in a given folder: http://www.mathworks.com/help/matlab/matlab_prog/matlab-code-analyzer-report.html?searchHighlight=Reports That said, this requires mouse clicks where yours does not, so yours is better for automation and is tailored specifically to the semicolon problem.
Thank you for the congrats. I've been using MATLAB for about seven years so it's probably overdue. I have seen the code analyser before, but I appreciate you pointing it out. My code often has things "wrong" (like prod(size()) rather than numel) with it, and as you said - I often *just* want to find out what on earth is printing to the screen. It might just be a problem unique to myself, but I hope someone else finds it useful!
You can use the `patch` or `rectangle` functions to display an arbitrary rectangle in an axis. This is how, for example [progbar](http://www.mathworks.com/matlabcentral/fileexchange/869-progbar) is implemented. You can read the source to see how it's done (progbar uses `rectangle`, so you can search for it).
yes, this will be the best way to approach it. I would go one step further and create the patch object when the axes are initialized and then just update the 'Vertices' property: h=patch([0 0 1 1], [0 1 1 0],'b'); %create the patch xlim([0 11]); %define axes range %update the width width = 5; set(h,'Vertices', [0 0; 0 1; width 1; width 0]) store the handle to the patch in the main 'handles' structure and write a callback function to update. You can do the same with 'rectangle' and the 'Position' property, which has the syntax [x y w h].
An RA in a collaborators lab did this very same thing by placing a uipanel within another uipanel. He would increase the width of the inside panel (which started small) as progress was made until it was the same width as the outside panel when progress was finished. You can use this code to change width of the inside panel, tagged *"progress"*, in whatever callback: set(handles.progress,'Position',[0, 0, percentprogress, 2]) The attribute that you're setting, Position, contains four values: [x position, y position (both relative to the outer uipanel, hence the zeroes), width, height]. Positions must be 0 and height must match the outer uipanel (here, 2). The width, *percentprogress* should go from 1 or 0 to the width of the outside panel (so %Progress * width). Let me know if you have any questions.
Why not just read it in as you go through, rather than going through it twice? If you can send a test file, I'd be happy to take a look through it. Out of curiosity, what are you doing with the data once you import it? What's this for?
ah, I didn't realise it was that straight forward. I've been saving the fieldnames to a variable then referencing them using the eval function e.g. eval([ 'samplestruct.' structnames{1} ]) Thanks for explaining. 
This seems like it would work a lot better than the garbage I have, let me try it out. Thanks for helping me with this, this is unfortunately my first large file reader.
If you don't open a cluster of workers with the "matlabpool" command, doesn't parfor run sequentially?
That's exactly the point. Running the loops sequentially will take ~6x more time than running 6 at a time (plus a little overhead). Anyways, check out the profiler to look at ways of speeding up the code.
No. I think you are missing my point. parfor is **slower** than for when there isn't a matlabpool (or a pool of 1) Obviously parfor with a large matlab pool will be faster than for (usually at least). I am looking for a way to that I can switch between for and parfor so that I am not using parfor when there isn't a matlab pool.
Almost. fgetl is a function that gets the next line in the file. So use that instead of your tline = tline + 1; line. Like this: if ~isempty(strfind(tline,'FIND_ME')) tline = fgetl(fid_source); % this will go to the next line while (isempty(strfind(tline,'END_HERE')) a = textscan(tline, '%x %x %x %x', 'delimiter', ','); % Read in formatted data tline = fgetl(fid_source); end end And fix the ~ in the while statement, you want it to search while it does not find 'END_HERE' (double negative, arghhh).
Thanks! You are my hero of the day.
No problem, glad to help. I did something similar a few months ago to modify ADAMS\Chassis input files to automate a 2-day task in to a few hours.
You could set your code up like if matlabpool('size') % parfor loop goes here else % for loop goes here end However, I'd be surprised if you really do see a significant change in speed due only to the use of parfor versus for; I wouldn't think there'd be *that* much overhead in parfor checking the size of the pool.
Nice! I have one more question: textscan doesn't handle hexadecimal formats, so at the moment I have a cell of strings (basically n lines x 5 columns). What is the fastest way to convert this to decimal, besides by using loops?
Sorry, I don't know. I've never dealt with hex numbers.
I got it to work using vVolumeFaceMx = sscanf(tline, '%x %x %x %x %x'); just for reference
This is probably due to cache misses, caused by the fact that parfor traverses the iterator in reverse order when no matlabpool is available. I would follow the advice by CapturedMoments if this is causing noticeable performance issues. EDIT: In response to the actual question being asked, unfortunately there isn't an elegant solution here.
I wanted to this last week. What I came up with was to put the code inside the for loop into a separate m file. That way I could do basically what CapturedMoments suggested without things getting too messy.
Yes. Just send to a UDP broadcast IP. Alternatively you can just put multiple UPD send blocks in your model that each get the same input.
You do realize that Matlab has a built in LU factorization function right...? EDIT: Not that I don't appreciate the code! Great Job! Just wanted to let you know the function exists ( 
Didnt know, made it instead. Ill delete it then 
Do your own fucking homework.
I strongly encourage you to discuss this with your course TAs or professor rather than strangers on the internet. If peer collaboration is encouraged (and in my experience, it almost always is for engineers), working with them will also be more helpful. Discussing possible approaches in person and getting instant feedback will be a more productive use of your time. If you're getting complex Matlab assignments in your first year, I'd take it as a sign that mastery of the language will be important for, at very least, the rest of your degree work. Don't do yourself a disservice by looking for the answer online; try out ways to do it, code it up, and see what works or where Matlab spits out errors. It's clear from the code you've provided that you haven't even built up the framework for how to manage the game. I will provide this advice: start by writing "pseudo-code" without thinking about how to code it in Matlab. What should the program be able to do? How do players interact with it? When a player makes a move, how does the program react? Once you have that, think about what underlying data structures need to exist. After you've gone through those design steps, I'd suggest writing the "engine" for your game: how to apply player input to the state of the game and letting the game decide how to respond. The last step, in my opinion, is actually making the GUI. I think you've gotten ahead of yourself and really would be well-served by seeking guidance from your instructors.
Thanks Mimshot. But how do I put a routing switch at my server that can select between many packets?
NO! I really wasn't trying to be rude. Just thought I would let you know. EDIT: And look at all the upvotes. Obviously others appreciated it. 
You shouldn't have to. Each computer on the subnet will get all the packets, but set your clients up to just ignore the ones they don't need. You can do this by sending packets to different ports or including a flag in the packet and filter them out programmatically.
I know you didnt want to be rude. But i dont think its a necessary post, if there is a better ( i suppose) function for this. 
Can you use the smooth function? 
read the doc page on 'filter'… they're example is a simple boxcar filter.
If each point in the matrix is set to one (or any known value) you could use: while sum(sum(prod(size(matrix)))) &lt; prod(size(matrix))
Have you tried the following? while all(game_state(:)) ~= 1 From your description, it sounds like the problem's related to the fact you're passing a matrix rather than a vector. I think this would be the simplest solution.
You're a legend! Works perfectly
To avoid the loop because this is matlab, use a colon with all, then reshape the output. reshape(game_state(~all(game_state)),8,8)
 for x = 0:4*a if 0&lt;x&lt;a M1 end end that is what i tried so far but its definitely wrong...
well you can't use a for loop to go from 0 to "4*a" because "a" has no value as you made it a symbolic variable. I'm sort of confused as to what you're asking for because it looks as if you already have your equations for M and V. Are you looking to plug in varying values of x into these equations and get out a moment and shear force in terms of Ra, q, and a? Because if so, I would recommend looking at the symbolic function "subs()" which could plug in values of a for x.
Provided that the pictures have a consistent naming/numbering('timeXa.jpg' where X is the index/number of the picture, you should use a for-loop with strings that will make up the file name. I don't have MATLAB in front of me, but it should be something like this: First, create strings of the filename before and after the number, like so: S1 = 'time'; S3 = 'a.jpg'; Now start a for-loop: for i = 1:n S2 = num2str(i); filename = [S1 S2 S3]; Here, n is the number of pictures you need to scan. I'm assuming the number starts at 1(if not, change the 1 in 'i = 1:n' to wherever the numbering starts). The num2str command changes the current index number(i) into a string, then the filename line puts the strings together. So, if the current number was 15, S2 would be '15' and filename would be 'time15a.jpg'. You can replace then put the filename string into the imread function Actual_pic = imread(filename); No single quotes are needed. After that, everything else should be the same, however you will want to create a vector so that all the values you are calculating will be saved as the program loops through the images, instead of being overwritten. Do this by indexing a vector and saving the value you want at the end of the for-loop. WP(i) = White_pix This will save the White_pix values in a vector. Now, looking at your code, it looks like the first loop is just finding the maximum grayscale value. The position of the max value(pos_x and pos_y) looks unused. You can simplify that entire loop with: max_value = max(max(Grayscale_pic)); You need to use max twice because the first one will find the max value of each row, then the second will find the max of the entire matrix. The second loop looks like it counts the number of pixels above a certain grayscale value. In this line: if Grayscale_pic(i,j)&gt;=11 Is the '11' always the same, or do you change it based on the max_value? If its based on the max value and you have to define that. For instance if you want pixels that are only above half the max value, you would use: if Grayscale_pic(i,j)&gt;= 0.5*max_value If they need to be above 75% of the max, you would use 0.75*max_value, etc. If you are just copying the values into an excel sheet, you should just be able to open the vector that saves the values and copy the cells. This can be automated but you should only need to do it once so I won't go into that. You can therefore leave out the part that saves the values to a text file, unless that is necessary for some reason. Though you should probably figure out how to implement this on your own, I put the edited code here. Try and look through it though and understand what everything is doing. There are improvements to the code you could make but this should work for what you need. At the end, you should be able to open the WP vector, which should contain the values for each image. I think you can just copy+paste the values into excel, if not you can google how to write a vector to an excel file. ------- % This program is for Ben's project. It will first go through and % determine the value of the brightest (greyscale) pixel. The user will be % prompted to decide the pixel values to be counted based on that and then % it will count up the number of pixels that satisfy that brigthness. % % Joseph North % 5-9-2013 clear clc n = &lt;number of pictures here&gt;; S1 = 'time'; S3 = 'a.jpg'; brightness = 0.5; %Percentage of max value for a 'bright pixel' for i = 1:n; S2 = num2str(i); filename = [S1 S2 S3]; xmax = 1024; % x pixels in the picture ymax = 1360; %y pixels in the picture White_pix = 0; % the number of light pixels max_value = 0; % the highest value of a pixel (brightest) pos_x = 0; % x location of the brightest pixel pos_y = 0; %y location of the brightest pixel Actual_pic = imread(filename); % Read in the worm picture % Grayscale_pic=rgb2gray(Actual_pic); imshow(Actual_pic), figure, imshow(Grayscale_pic); %displays both pictures max_value = max(max(Grayscale_pic)); % This loop counts the number of brigth pixels. A user will have to % determine what is bright using the information from the loop above. for j=1:(ymax)-1 for i=1:(xmax)-1 if Grayscale_pic(i,j)&gt;= brightness*max_value; White_pix=White_pix+1; end end end WP(i) = White_pix end
Just realized something: use 'k', or whatever variable, instead of 'i' in the bigger for-loop(the one that reads each picture), as 'i' is already used in the for-loops you had for counting through the pixels. If you use i, it will get reset when that loop runs, so you need to use another index variable. &gt; I really don't understand programming that well. When you say "indexing a vector" does that mean like a matrix of numbers? I'm not a CS major and never formally learned any programming, so I don't know if "indexing a vector" is the right terminology. When you run that for loop(for k = 1:n, using k instead of i for the reason above), 'k' is the index variable. In the loop you already had, 'i' and 'j' were indices used to look at a certain pixel in the grayscale matrix(Grayscale_pic(i,j)). A vector is just a one dimensional matrix, like [1 2 3] or [4 7 2], and can be used to store a series of numbers. The line at the end of the for-loop, WP(i) = White_pix is storing the white_pix value in the ith position of the WP vector each time the loop goes through. So, it will save the value for the 1st pic in the first position, the value for the 8th pic in the 8th position, etc., so you will eventually have one long vector with all the values in it, with their position in the vector corresponding to the picture number. So if your vector was: [93 28 23 75 44] the value for the 3rd picture would be 23, etc. &gt; Also, in terms of that threshold value of 11. Then you can just leave it at 11, provided that number is valid for all the pictures. In that case, though, you don't need to calculate the max value, as it isn't used, unless you are using it elsewhere? I that case, you should create another vector that saves the max_value values, similar to the WP vector.
You can do this with matlab but I believe it requires the DAQ toolbox. Is's my understanding that this is only available on Windows. Also, if you get into this, you might have to run matlab with administrator privileges in order to access the sound card. Check out the DAQ toolbox website here: http://www.mathworks.com/products/daq/index.html Edit: Playrec actually seems like it'll do the trick for free. 
This is all good info. If your filenames do not have a consistent naming style as described above, there are still ways to make this work. Probably the easiest way would be to put all of the images you want to process in the same directory. Assuming that they are all the same file type (eg: jpg, bmp, etc.) you can use the 'dir' command to return a list of all files in a directory. Example: Suppose your function "MyFunction.m" is located in C:\stuff and all of your images (lets assume they are jpg's) are in C:\stuff\images. You code would look something like this: ****** %return filenames for all jpg files in subdirectory 'images' FileNameList = dir('images\\*.jpg'); %Process each image for i = 1:length(FileNameList) Image = imread(['images\',FileNameList(i)]); ....Process image.... end; ****** The above uses relative directory paths, which means that MatLab looks for the 'images' directory inside of the currect working directory (where MyFunction.m is executing from, C:\stuff). If your images were stored elsewhere on your drive, say C:\MyImages, then you would need to use full directory paths in the 'dir' &amp; 'imread' commands, so MatLab knows where to find them.
/u/threefs provided a good way to do it below. To make it a bit easier if you don't have a systematic naming convention, you can easily grab all of the images from a directory using the ls() command as follows: names=cellstr(ls('directory/*.jpg')); There you go, now you have a cell array of all of the names of the images in a single directory. You can iterate through those.
Great tutorial. Just wanted to note that if OP is getting images from a camera or microscope, they might be formatted like this: image0001.tif image0002.tif ... image0010.tif In which case the string concatenate method won't work, because you'd either start with: s1 = 'image000' or s1 = 'image00' neither of which would work for all images. Of course, you could do some if/then to solve the problem but a better way would be to do: for i = 1:nimage filename = sprintf('image%04d.tif',i) // do stuff end This way, the correct number of zeros will always be in place. (here, in sprintf the %04d starts with 0000 and adds i to it, so if i = 6, filename = 'image0006.tif', if i = 222, filename = 'image0222.tif') If you have a different number of digits in your filenames, then change the number before d to that number. 
Yes... You can do this, I did it once a long time ago and I don't believe I ran it in root mode. Here's a PDF that talks about it. http://faculty.olin.edu/bstorey/Notes/Card.pdf Also, to OP, another thing to consider, at least for your first task, might be using the sound command. I don't have the documentation in front of me, but i think you could just set up 'x' as a variable containing the waveform you want to produce, and then 'sound(x,sampling_rate), like this: fs = 44100; t = 0:0.01:3; x = sin(2*pi*t/fs); sound(x,fs); % this command plays a sine-wave out your soundcard
Do this: a_x_SMA3=smooth(a_x,11);
It's because you're setting sum to uint8. Here's what happens: the first iteration, you have "12345" as a double, so floor(12345/10) = floor(1234.5) = 1234. The second time around, you have "15" as a uint8--an INTEGER ONLY. In this case "15/2", since "15" is uint8, gives you 1.5 which is converted to 2. THEN you're doing the floor of 2, which gives you 2. Remove the uint8() and everything works perfectly.
The proper way to do it, if you know how many elements you have in advance, is to reserve space for the array. Then each iteration of the loop will assign your value to the respective location, like follows: N=100; % number of iterations x=zeros(1,N); for i = 1:N x(i)=func(arguments); end Your function should return the value like this: function result = func(x) % code goes here
unfortunately, thats exactly my problem, the number of elements changes based on an excel file im reading in, and the number of elements can range from 5 to 30.... for what its worth...... can i establish an empty array larger than the max number of elements I know will fill fill it, and then fill it? and if so, how would I do that? PS. thanks for the reply. 
This looks promising. I'll give this a try. Thanks.
Yup, thats what was turning up with my searches - but it didn't look promising, considering that I am running x64 linux which DAQ doesn't seem to like.
Yeah, if it's a small number of elements don't bother preallocating. That helps if you're on the order of thousands of elements, otherwise it doesn't really matter too much. Try this: x = []; for while(more cells to read) x(i) = func(args); end
http://www.youtube.com/watch?v=hqBMXN28TSA and another http://www.youtube.com/watch?v=cVrM1iAd8ic
If you have the aerospace blockset, there's a 6dof rigid body block that implements the rigid body equations of motion. If not, the equations of motion are pretty straightforward to derive and implement yourself (they're also very well documented, in case you don't want to do the derivation) either in MATLAB or Simulink. Aerospace blockset user's manual: http://www.mathworks.com/help/releases/R13sp2/pdf_doc/aeroblks/aeroblks.pdf
Was there something in particular about this that was confusing you? clear all; clc; x=linspace(-1,1,7); for i=1:length(x) if x(i) == 0 solution(i)=1; else solution(i)=sin(x(i))/x(i); end end solution'
It is a poorly worded problem. I would simply define x as x=linspace(-1,1,7)+realmin; y=six(x)/x; Problem solved. realmin returns the smallest positive normalized floating-point number in IEEE double precision. Which for double precision floating point numbers is 2.2251e-308.
Oops! Yes, 1300 degrees Celsius. I think they're trying to say it's the temperature of the mantle, but that doesn't really make sense since temperature changes with depth. 
In the line where you calculate T, it looks like you left out a factor of 2 in the denominator.
Oh. My. God. I've been staring at this for days trying to figure out what I was doing wrong. Yep. That fixes it. THANK YOU SO MUCH!
Mathworks has this PD controller and model on their site. http://www.mathworks.com/matlabcentral/fileexchange/41149-pd-control-quadrotor-simulink Outside of that, I've seen all sorts of controllers and models on IEEE Xplore. Edit:spelling
eps(x) gives the distance between x and the next largest double precision number. You could use x=linspace(-1,1,7); x=x+eps(x); or something along those lines. It really is a crappy question. What you are really doing is applying the small angle approximation sin(x)~x when x&lt;&lt;1. When you perturb x a tiny bit away from zero (delta&lt;&lt;1) you recover the limit. Both realmin and eps gives you a small constant.
Yeah, I've seen those, they are awesome and exactly what I need, but where could I get the model if I'm not able to make one myself. I have very very little experience with simulink, unfortunately. 
I've seen those, but I was wondering if that's a good idea to use since the quadcopter uses a PID controller. Or am I not understanding something?
That has to be it. Thanks!
Yeah, that's pretty much it. Thanks!
If you find one, could you update me? I developed a quadrotor as project in university, but never derived a simulink model for it (just embedded C). I have developed a model for a MUAV as my thesis but I cannot share that sorry :), but it is possible!
Uhhh, I'm trying to get an understanding of what's being done in the model, but I have no idea what the gains are and what the graphs show as the outcome. Could you please help a bit if you know this?
If I have read your description right, you have a grid of cells, where each cell is 200x200. The grid is 16 cells across and 23 cells tall. In that case, there's no need to use a for-loop to do this. In fact, we can make the code easier to read and faster by vectorizing. First, we'll convert a point's (x,y) coordinates into an (i,j) pair, where (i,j) refers to the cell that the point lies in. We'll assume cell (0,0) is the most bottom-left cell, (1,0) is the cell to it's right, and so on. So cell (3,5) would be the the fourth cell in the sixth row from the bottom. Anyways, to do this, we simply write: i = floor(x/200); j = floor(y/200); This will compute `i` and `j` for all of your points simultaneously. Now we need to map a cell's (i,j) pair into the index that you want to use, but this is also very easy. Some thought shows that a cell's index number is just `1 + i + 16*j`. So, all of the code you need to solve this problem is: i = floor(x/200); j = floor(y/200); index = 1 + i + 16*j; 
Genius, thanks a lot! 
Which graphs/gains in particular are you looking at? Also, I thought you wanted a PID controller?
Yeah, PID would be better. I'm looking at the X Y Z graphs/plots that are on the right when you open up the model.
Can't you just validate the ginput results, then report "invalid move" if it is out of bounds? like so [x,y] = ginput() if validated do action else display error message end
So like, if (it meets the required moves and such) do action else display error message end I've used the error function to display an error message but that isn't what I want because that stops the script. I want to know how I can just get the player to input a new ginput() and forget about the old one. I've tried using try [x,y] = ginput(1) catch return end But return takes me back to where I called the function? Is there a way I can just restart the current subfunction because return doesn't seem to do that? Thanks
You're probably looking for the find command. If you try something like find(A(:,1:1500)&gt;.5) it'll return an array of indexes for values in columns 1 to 1500 with values greater than a given threshold. With the indexes, you can then perform operations on those values.
You are right about not using PD. This file is aweful. You cannot simply use a derivative block in a controller for a number of reasons and no one would ever do that for a real controller.
There are a number of papers that describe the dynamics of a quad. You have a few options. First, you can create a CAD model and use simmechanics link to derive the mechanics. This would work well if you already have a model in solidworks. Otherwise you can define the aerodynamics and use the 6-dof block to create the simulation For the controller, you want to feedback the rates and use a discrete time PID block. Design an inner loop for the rates and an outer loop for positions. The PID blocks have PID tuners so you don't really need to understand control that well to utilize them: http://www.mathworks.com/help/slcontrol/examples/automated-tuning-of-the-simulink-pid-controller-block.html But if you are actually using this on a real system you need to understand that the controller is only as good as the model it was designed for. So make sure you have a good model. Check out this paper for the aerodynamic forces and moments: http://www.idearesearch.in/Papers/GN-070.pdf It's a pretty good starting point and you can figure out how these can be applied to the 6-dof block. 
Assuming you're running the sub function within the try statement, can you do something like notdone = 1 while notdone try blah blah blah notdone = 0 catch err blah blah end end I'm assuming you know something about this that we don't, but is there a good reason why the sub function might fail one time and succeeed immediately after? 
I used [this](https://dl.dropboxusercontent.com/u/60259953/my_ginput.zip) modified 'ginput' function a while back. I can't find where I originally downloaded it from, but I have put it on my dropbox. I think it only allows button clicks in the current axes. Then you'll need to modify the if statement in the 'get_pt' function to check for invalid areas.
I'm looking for a way to analyze my dataset in three different sections, my script will find the threshold and do all the other stuff. I can't figure out how to separate the data, analyze it, and then put it back together in the script. Thanks for the response though.
Thanks for the reply. It's for a game and I'm getting the player's input using ginput(). When they click on an invalid spot, I want it to catch the error and restart the subfunction.
If you're just looking to pass your script the three different sections then you could split it like so A(:,1:1500); A(:,1501:3500); A(:,3501:); That has the first 1.5 seconds, the next 2 seconds, and then the rest of the data. In order to concatenate the output matrices, simply use this syntax: Ans = [A; B; C]
Jeez, that's like too smart for me. I have no idea what you are talking about with the controller model. I really have almost no experience with Matlab, so that's a huge problem. And I only have about a week to find an example I could understand and describe in my thesis. Thanks a lot anyway, man!
Watch this video about controller types: http://www.mathworks.com/videos/using-bode-plots-lead-lag-pid-controllers-4-of-5-77061.html 
That will vertically concat though. I think he'd be looking for ans = [A, B, C]
Did you read the dissertation that comes with the file? He derives several different controllers, including a PID controller.
The way I have always done it is to use get(gcf,'CurrentPoint'). You can then use the location of the axes in question to determine whether or not the mouse is within the proper bounds and, if it is, apply the proper function.
This is how I always do it. Especially with stuff like ginput. I wrote a function to let people draw lines on a graph. (I think it was using settling time). So I did button="No" while strcmp(button,"No") ... button=questdlg('Are you happy with your selection') end 
Oh, another question: If I edit the command to try and get it to display more contour lines, it does, but they become smaller spaced. I want to be able to display the 1400 isotherm, but I can't figure out how. If I do [C,h]=contour(t,z,T,4,'k'), with any number (4-10) it just spaces them smaller. Any idea how to keep them displaying contours every 200 degrees, but get it to display more?
You and /u/jjs027 seem to know a lot about this stuff. I downloaded [this](https://github.com/gibiansky/experiments/tree/master/quadcopter/matlab) visualization that Bobo_bobbins found for me, but I can't get it to play. Could you help please? I like that it has the visualization itself and the graphs, I would use these 
Use a while loop: Valid = false; while ~valid [x y] = ginput(); If *validate* *do stuff* Valid = true; else beep(); fprintf('Invalid entry); end end
The maximum value of 'erf' is 1, so the maximum value of T will be Tm, or 1300. To specify which contours to show, specify a vector V with the contours you want, where V(1)&lt;V(2)&lt;...&lt;V(end). V=[-1300 -1200 -1100 -1000] [C,h]=contour(t,z,T,V,'k')
That won’t work is the elements of A and B are in a different order or difference sizes. You could loop it but that is slow and what I am trying to avoid from my home-grown solutions. Also, I am actually completely uninterested in the intersection. I really want the indecies it returns so that [C,ixa,ixb]=intersect(A,B) then A(ixa)=B(ixb). So your method, while it would work, only gives 
Thank You! That's perfect!
Please read my post... &gt;I have no problem writing up something to calculate new tickmarks, but is there a way to force matlab to redo the ticks? There's no point in coding something if the functionality already exists. Hence my question.
Would 'refresh' or 'refreshdata' work for this? I've never used it, but it may do what you want.
No luck, appreciate the tip though
&gt; P.S. i love using loops in MATLAB. and i am aware that it might not be the most efficient way of doing what you're trying to do. Everytime you use a for loop a Mathworks dev kills a kitten.
Redraws to matlab's idea of a best fit, but the ticks are still frozen. Super annoying!
possibly, but I think it will be simpler to just manually calculate them. I've been ~~fighting~~ using matlab for many years now and in my experience, any time you need to do anything fancy with plotting, you save yourself a lot of headache by using low level tools and interacting with the figure/axes/child properties directly. I've encountered weird quirks in too many of the functions designed to make figure manipulation simpler (e.g. they change properties that you don't expect them to change)...by doing it manually, you eliminate any doubt about what is going on. I don't even use plotyy anymore...I just stack my own axes. for your particular situation, I think linspace would be useful to produce evenly spaced ticks between the ylims.
That's pretty much what I was thinking. It's the first time I've actually had to plot separate axes, so plotyy() was the logical first step. For this GUI it'll work fine, but it seems like I'm going to be modifying it so much it seems like there really isn't a point using it over learning to stack axes in the future! Always a fight to find an elegant solution that actually works, the wonders of MATLAB :)
Loops are often a great first-pass to make sure you have the right algorithms, and to establish the desired behavior. After that, you can vectorize. Loops aren't as bad as they used to be since they use some type of Just In Time compilation, but you'll almost always find a boost with vectorized code. Also, *once you're used to it* it can be more elegant and readable
Put the command 'dbstop if error' at the beginning of your code. If/when your code barfs it will stop executing and enter the debugger with everything still in scope. There are a few more error handling options under Debug -&gt; Stop if errors/warnings
Yep. It's either this or a try/catch/disp('') with a breakpoint on the disp. Because sometimes built in functions hit errors under normal operating conditions and you'll stop in the middle of nowhere. 
Holy crap, I've been using MATLAB for years, I can't believe I never knew this.
It isn't a panacea by any means. If your code breaks it works great. If your code breaks something in a MATLAB call you get a dump of whatever that internal function was doing. Not always the most helpful of outcomes. I'm still a major advocate for proper try/catch exception handling, but most of the time quick and dirty wins the day over proper and cumbersome.
I understand that. I am just wondering if there is a way to get back the default behavior now so it just stops on the error without the debugger. Also, I (try) to work only from the command line so I do not even have the debug dropdown. As is, I make very extensive use of keyboard, return and dbquit.
nevermind, I found it. It is "dbclear all" thanks!
When that happens you can change the workspace back to the function you want. Drop down box on top of the workapace window
Fantastic to know, I'll look for that next time I run into this situation. 
Ah, I misunderstood what you were wanting to change. Looks like you worked it out on your own though.
can you clarify what you are doing? Are you comparing the values in the array? Are you just trying to create an intersect routine that works for floats to some tolerance? If so, what's wrong with bsxfun(@minus, ,) &lt; tolerance?
all(all(matrix))
There is nothing *wrong* with that; it is actually the basis of my current home-made tool. But it requires a for loop through one of the arrays to mimic the indexing return of intersect. The indices of what elements overlap the others is the key thing I am looking for. I wanted something faster. The issues I mention aside, the method I talk about is faster for larger arrays and only slightly slower for smaller ones. Looping through to find the indices is not as fast on large arrays since it has more to loop.
Okay, another question. Is it possible to add another axis scale? Like on the left, have depth just as is, but on the right, add another scale? I want to add pressure as a function of depth, but I can't figure out how to add another scale.
Just out of curiosity, is it running slowly? Vectorization is good when you're deal with large datasets, but if your code works as is and you're not going to be scaling up, then I'd say there's not much of a problem.
This will only work when you're all 1's, not when there's no zeros. I'd do this: while(all(~game_state(:)==0))
You can solve it the matrix way. you'd have to rearrange your equations though: http://www.mathsisfun.com/algebra/systems-linear-equations-matrices.html
The natural choice in your case (coming from alpha) would be to use Mathematica, which doesn't have a hard limit on the number of variables (neither does Matlab). Your line of code can be directly evaluated in Mathematica (well, almost-- change 'solve' to 'Solve') and the output is: {{a -&gt; 1/3 + (4 h)/3 + (2 x)/3 - y/3 - z/3, b -&gt; h + y, c -&gt; 4/3 + (4 h)/3 - (4 x)/3 - (4 y)/3 - z/3, d -&gt; -h, e -&gt; -(1/3) - (4 h)/3 + x/3 + y/3 + z/3, f -&gt; -h, g -&gt; -(1/3) - (4 h)/3 + x/3 + y/3 + z/3}} Similar code could be used in Matlab, just with different syntax: http://www.mathworks.com/help/symbolic/solve.html
Just to clarify, I mean to re-write the equations in the form of: Ax=B Where A is an 8x8 matrix of coefficients, x is your 8x1 vector of variables, and B is a 8x1 vector of values.
Good practise - never use length(X) on a matrix. Using size(X,1) and size(X,2) at all times is a good habit to get into (numel(X) and length(X) acceptable if you're sure it's a vector). Use meaningful variable names - A,B,C,temp,tempdata. Even monthtag1/2/3 and sum1/2/3 aren't great as it's not clear what the difference between them is. See http://pastebin.com/Lp2d0wdUB, but basically if you want to vectorise your code don't throw stuff into a cell array; it might still be possible but since your data is nicely square you should use a matrix instead and then logical index it if speed is your main concern. If you need to store previous results in said matrix make it 3 dimensional and you're still fine and dandy.
it looks like in the example that you gave you have more unknowns than equations: a,b,c,d,e,f,g,h are 1 to 8 and then you also have x,y and z adding three more unknowns. so it looks like you have 11 unknowns and 7 equations 
Matlab solves this trivially. It is literally x = A\B
https://www.google.com/search?q=matlab+calling+external+program
Do your own homework.
It is probably easier/more educational for you to just learn python. 
completely agree. The only reason to do it as described is if you need to use a toolbox function that isn't available in python already. If you know how to write matlab, you can figure out python. If you insist on using matlab, check out the 'system' command (or ! syntax...works like ` in perl). another option would be to force your partner to switch to perl and use matlab's 'perl' command. 
What do you mean by compress? You could plot the log of y?
you mean something like: set(gca,'YScale','Log'); ?
not quite; I'm looking for something that will let the y axis go say 8 per grid instead of 2 per grid. 
Not really sure what you mean. You can change the axis tick marks with the 'YTicks' axes property, but that doesn't affect how the data are plotted.
I'm just trying to make each grid along the y-axis weigh more, i.e. each step up is +4 amplitude instead of +2 amplitude, which would 'squish' the plot. 
Still don't quite understand, what's a grid?
I'm just trying to make each grid along the y-axis weigh more, i.e. each step up is +4 amplitude instead of +2 amplitude, which would 'squish' the plot
each axis tick is 0.5. Do you want more or less ticks? Changing that still won't scale the data though...
The axes are defined by xlim and ylim. When you plot data, it computes where that point lies relative to those limits. E.g. if ylim is [0 1] and you plot y=.5, you get a point halfway up the axis. No matter how you change the physical size of the axes, the point stays at that relative position. So when you plot multiple points, the actual observed distance between them will be a function of xlim/ylim and the physical size of the plot. If you want y to look more squished than x, you need to either physically resize the window such that y is narrower than x or adjust xlim/ylim. The actual ticks are just markers. They are realistically plotted like any other data. You can tell matlab where to plot the ticks and even which values to use for labels, but their scale is tied to the axes, just like the data.
i think what you want can be archived by resizing the plot window. either manipulate it with the mouse or set the position atribute
Alternatively, you can also do xlim([xmin xmax]); ylim([ymin ymax]); If you'd like to control just one axis.
use the form y2-y1=x2-x1 to solve for the slope of your line, where y2 and y1 are your y values and x2 and x1 are your x values of your two points. Once you have that value, which is your slope, substitute it into the linear line equation y=mx+b where m is the slope you just solved for. Then choose the x and y values of either point, (seriously, either will give you the same result) to solve for b, your y intercept. You now know the formula for the equation of the line that passes through those two points. Now that you have your equation solved for your range (y), you can plot that against whatever domain (x) you wish. Message me if this isn't clear enough for you.
ok, so with the polyfit: a=polyfit([1 5],[3 7]) and then??
Remember your grade 7 math! %points given X=[1,3]; Y=[5,7]; %find slope m=(Y(2)-Y(1))/(X(2)-X(1)); %set range for x x=-10:1:10; %point slope form of line y=m*(x-X(1))+Y(1); %plot plot(x,y)
Can you guys please help me? I can send my file to somebody of you and explain exactly what's what I want? Please! I'll be truly thankful. 
You need to specify the order of the polynomial as a third argument. I.e. a straight line (y= mx+b) is a first order polynomial (x^n for n=1), so p=polyfit(your x's,your y's, 1). Note that p will contain values for m and x in order - use them appropriately to construct your line. Use polyval to draw points for a range of specified x's. Edit: on second thought, if you only have two points, just calculate the line yourself as the other posters have suggested. 
Yes i know that but it's not that simple. I thought there will be a function to make an infinite line, but I see there isn't. There are 19 lines inside a for that I want to extend. Can I please send you my file, I think it will take you just a few minutes and you will save my day!
what do you mean by.. "I thought there will be a function to make an infinite line, but I see there isn't. "
but im not able to trust this. When i tried a simple one: Solve [{w + y + z = 1, w = 1 - y}] it gives Solve[{1, 1 - y}] and some errors if i do Solve[{x + y + z = 1, x = 1 - y}, {x, y, z}] again a few errors and then olve[{1, 1 - y}, {1 - y, y, z}] Edit: Okay now its working.. but i still dont understand what the output for my original answer means {{a -&gt; 1/3 + (4 h)/3 + (2 x)/3 - y/3 - z/3, b -&gt; h + y, c -&gt; 4/3 + (4 h)/3 - (4 x)/3 - (4 y)/3 - z/3, d -&gt; -h, e -&gt; -(1/3) - (4 h)/3 + x/3 + y/3 + z/3, f -&gt; -h, g -&gt; -(1/3) - (4 h)/3 + x/3 + y/3 + z/3}} specifies values of a to g but not h. However if i assign h with an arbitrary value it given an error. My main aim is to check if d-h end up being forced to be =0. Edit 2: Alright im getting the hang of this now. Thanks.
This is my original code: %% Half-Space cooling Model clc;clf;close;clear; [x,z]=meshgrid(0:2:5000, -400:2:0); % x is the distance from the ridge, in km % z is the depth from the surface, in km u=1*10^-4; %velocity of the oceanic plate moving away from the ridge [km/yr] %estimates are between .7&amp;1*10^-4 km/yr (ie 70&amp;100mm/yr t = x./u; % [yr] k = 3*10^-5; %thermal diffusivity constant [km^2/yr] T = 1300.*erf(z./(2*sqrt(k.*t))); V=[-1250 -1200 -1100 -1000 -800 -600 -400 -200]; [C,h]=contour(t,z,-T,-V,'r'); % the [C,h] to call C for height commands % 'k' to make the lines black clabel(C,h) xlabel('distance from ridge, yrs'); ylabel('depth from the surface, km'); legend ('Red lines are Temperature isotherms','Location', 'SouthWest'); 
Okay, but when I add this to my initial code, it brings up a second figure... How do I get it to format onto my current figure? Also, I understand how you formatted the left axis, (I think), but not where the right axis came from. Is your plot (-10:10...) command calling a new plot? I need the pressure scale to vary linearly with depth, such that, at 100 km depth, the pressure is 3 GPa. (at 200 km, the pressure is 6 GPa... ie g=10 %[m/s^2] p=3000 % [kg/m^3] And z is depth, so it varies z= [0:400] %[km] P=g*p*z And I would prefer to have pressure ticks every 1 GPa, so that roughly every 30 km there is a pressure tick.
Yes, my plot command was just to create the first set of axes in the same fashion contourf would, so you can remove that. Just get the first plot how you want it, then start at a(1) = gca And go from there. Figure makes the new figure Plot draws left set of axes a(1) = gca gets handle to left axes a(2) = axes( ). Creates right set of axes with the same exact position and size as the first, so they overlap exactly. The color, none makes the top axes transparent and the YAxesLocation switches the tick labels to the right side. As for the ticks...you set the ticks and tick labels via the YTick and YTickcLabel axes properties using set() and get(). YTick is the position ticks are placed and they are relative to ylim. Think about the ticks as being plotted along the side (like normal data) at the locations specified in the YTick array. YTickLabel is an array the same length as YTick but has the text that goes on each tick. The trick I pulled was to leave the axes limits alone, so the ticks on the new axes were plotted at the same data value, but I modified the label to the new value. To do your actual conversion, just update the anonymous function. Something like: P =@(z) g*p*z Having different ticks on each axis is simple. Just change YTicks. Either compute what the equivalent 1 GPa grid will be in terms of depth or change the ylim on a(2) to reflect pressure. edit: Ignore this next part. You can set 'box' to 'off' and it removes the ticks on the opposite side &gt;The catch is that matlab always plots tick marks on both sides so you need to be careful to keep them lined up or it looks bad
Thanks for taking a look. You're right that in the base case I'm just using the "shortcut" for solving 2 x 2 matrices. But this function is recursively calling itself until that case is reached (every "R" matrix is defined by calling this function from within itself). In the else statement where R1-R6 are being manipulated and assembled into matrix is the recursive definition of the matrix inversion. If you pass this function a 2^2 x 2^2 square matrix it will successfully block out each quadrant into its own matrix, solve it, then reassemble it but for some reason it doesn't work for any higher order. Anyway, thanks again for taking a look. Recursion is weird.
Didn't even know matlab could do this so I can't help much. Maybe this will lead to the right direction. http://www.youtube.com/watch?v=jwIRagDnRCE http://www.mathworks.com/help/imaq/videoinput.html So i guess you could make a loop or if statement to capture a frame every 10 seconds. http://madan.wordpress.com/2007/03/23/image-capture-using-webcam-in-matlab/
thanks! going to watch the vid now.
 %% Half-Space cooling Model clc;clf;close;clear; [x,z]=meshgrid(0:2:5000, -400:2:0); % x is the distance from the ridge, in km % z is the depth from the surface, in km u=1*10^-4; %velocity of the oceanic plate moving away from the ridge [km/yr] %estimates are between .7&amp;1*10^-4 km/yr (ie 70&amp;100mm/yr t = x./u; % [yr] k = 3*10^-5; %thermal diffusivity constant [km^2/yr] T = 1300.*erf(z./(2*sqrt(k.*t))); V=[-1250 -1200 -1100 -1000 -800 -600 -400 -200]; [C,h]=contour(t/10^6,z,-T,-V,'r'); % the [C,h] to call C for height commands % 'k' to make the lines black clabel(C,h) xlabel('distance from ridge, mya'); ylabel('depth from the surface, km'); legend ('Red lines are Temperature isotherms','Location', 'SouthWest'); g=10; % [m/s^2] rho=3000; % [kg/m^3] z=[0:5:400]; P = g*rho*(z)/(10^9); % answer in [GPa] a(1) = gca; % gets handle to left axis a(2) = axes('Color', 'none', ... 'YAxisLocation','Right', ... 'XTick',[]); set(gca,'YTickLabel',['1' ;'2'; '3'; '4'; '5'; ... '6'; '7' ;'8'; '9'; '10'; '11'; '12']) set(gca,'YTick', [0:1:12]) ylabel (a(2), 'Pressure (GPa)') I'm having trouble removing the extra ticks on the R y-axis, as well as having incorrect values for the pressure, even though I've defined it correctly. Do you know what's wrong?
I haven't had my morning coffee yet, so I could be misunderstanding the question, but I think the easiest way would be to multiple z by -range then subtract your near value. newZ = Z.*(near-far)-near;
That's what multiplying by -range (instead of +range) will do - it'll reverse your values.
No, I think they do... Z' = -r*Z - n, where r = f - n Z' = -Z*(f-n) - n Z' = Z*(n-f) - n
a(1) and a(2) are handles to the axes....a(1) is the bottom (left) and a(2) is the top (right). Once you define them, don't use gca anymore. If you want to modify the right axes, use a(2) instead of gca. To fix the 'overlapping' ticks: set(a(1), 'box', 'off'); set(a(2), 'box', 'off'); For the pressure...without knowing the range of values for depth or pressure, it's hard to help, but try something like this: %Define anon function to compute pressure from z (in GPa) P = @(z)g.*rho.*z./1e9; %Fetch the ylim from axes 1 (z) and convert to pressure pRange = P(ylim(a(1)); %Put the axes limits of the second axes in terms of pressure ylim(a(2), pRange); %Set the yticks on the second axes to range from the lowest pressure value %rounded up to the nearest whole number to the highest pressure value, rounded %down to the nearest whole, incrementing by 1. set(a(2), 'YTick', ceil(pRange(1)):floor(pRange(2))) This would go right after the a(1).... a(2).... lines (in place of your last 3 lines). The important part is to make sure that ylim(a(2)) = P( ylim(a(1))). That is, the y limits for the second set of axes are the y limits from the first set converted from depth to pressure. If that is true, then you can put the ticks wherever you want, and since the axes are in terms of pressure, you don't have to mess with adjusting the labels at all. 
Maybe I should get myself a cup of coffee too... I'll implement this when I get home and report if the function returns the expected values. 
Wasn't obvious... I had to get a pen and paper out for the first time this week! Why is there not a quick &amp; easy way to do algebra on my screen?
Try doc system(). You might be better off keeping temporary files, however, and writing/reading to those.
I'm no MATLAB expert but it appears that the fminbnd function is calling the smoothILT function (first argument in the fminbnd function, @smoothILT). The mux input is coming from fminbnd. http://www.mathworks.com/help/matlab/ref/function_handle.html Hopefully, somebody can explain it better because I'd also like to understand this.
So basically just this?: range=near-far newZ = Z.*(range)-near; result=newZ; I've already tried loops and complex matrices to solve this. I can´t really believe that I spent 5 hours on these 3 simple lines of code. 
I'm sorry this is so complicated! It's been awhile since I've taken a Matlab course, and then because I was the only one in my research group who has any experience, I was asked to do this project! I now don't have anything on the second y-axis. :( just a 0 at the top... Which is good, I guess, because that's closer than I've been for awhile. If I remove the @z, the values are 1:0.1:0, which is what I've been getting for a while. The values should be like this Depth Pressure 33 km 1 GPa 66 km 2 GPa 100 km 3 GPa 133 km 4 GPa 166 km 5 GPa 200 km 6 GPa 233 km 7 GPa 266 km 8 GPa 300 km 9 GPA 333 km 10 GPa 366 km 11 GPa 400 km 12 GPa Which should equate to P=3 * z * 10^-5 with z ranging from 0 to 400. I've placed this after my legend ('...'); command a(1) = gca; % gets handle to left axis a(2) = axes('Color', 'none', ... 'YAxisLocation','Right', ... 'XTick',[]); set(a(1), 'box', 'off'); set(a(2), 'box', 'off'); %Define anon function to compute pressure from z (in GPa) g=10; % [m/s^2] rho=3000; % [kg/m^3] P = @(z) g.*rho.*z./1e9; %Fetch the ylim from axes 1 (z) and convert to pressure pRange = P(ylim(a(1))); %Put the axes limits of the second axes in terms of pressure ylim(a(2), pRange); % Set the yticks on the second axes to range from the lowest pressure value % rounded up to the nearest whole number to the highest pressure value, % rounded down to the nearest whole, incrementing by 1. set(a(2), 'YTick', ceil(pRange(1)):floor(pRange(2))) ylabel (a(2), 'Pressure (GPa)') 
1:.1:0 will return an empty matrix... it would need to be either -1:.1:0 or 1:-.1:0. I think the problem is the axes are descending, which is throwing something off. To brute force it, try something like: a(1) = gca; % gets handle to left axis a(2) = axes('Color', 'none', ... 'YAxisLocation','Right', ... 'XTick',[]); set(a(1), 'box', 'off'); set(a(2), 'box', 'off'); set(a(2), 'YLim', [1 12]); set(a(2), 'YTick', 1:12); set(a(2), 'YDir', 'reverse'); 
no problem. Glad you got it sorted out.
Yup, looks like it should work! Sometimes it just takes a new perspective
Were you expecting the simulation to be different? If I ask 2 computers what 2+2 is I home I get 4 on every single one.
I use many, many, random values and seed variables. Each simulation run in series is very, very, different....
Yeah, I've had that exact same problem. The Matlab random number generator resets to the exact same state at every startup. You can try it. Start matlab, type randi(10). Restart it and type randi(10). You'll get the same random number. The sequence will be the same too. This means, code that uses the random number generator will create the same sequence of random numbers on each simulation, resulting in numerically identical simulations. If you put rng('shuffle') at the top of your code, this will seed the random number generator with the clock time and prevent this issue from happening. 
You just saved me a ton of effort! lol. Because I was about to code all this extra file copying and magic... and it would probably have done nothing. Thanks for saving me all that work! You are right, I'm not changing up my random number generator enough. So it has nothing to do with 'shared' files.
I THINK this is what's happening: fminbnd finds the x that gives the minimum for myfun(x) so you call xm = fminbnd(@myfun,lb,ub,options) and no other aguments should be allowed. Notice x isn't an argument to fminbnd, but fminbnd returns the value of x which minimizes myfun. So I think that's what's happening here, you don't input mux, but fminbnd gives the value of mux on [0 10] that gives the minimum. This is not a multivariable minimization, the other arguments are treated as parameters! However, the [official docs for fminbnd](http://www.mathworks.com/help/matlab/ref/fminbnd.html) say to pass extra parameters in with an inline anonymous function, so the functionality your seeing might work, but it's certainly not documented.
&gt; I THINK this is what's happening: fminbnd finds the x that gives the minimum for myfun(x) so you call xm = fminbnd(@myfun,lb,ub,options) and no other aguments should be allowed. Interesting. I never thought of it like that before. I love people like you.
Oh why thank you. I booted up Matlab and looked at the source for fminbnd and it does what I'm describing. It's doing single variable minimization on the first argument to the function (mux) and passing all args &gt; 4 as the rest of the arg to the function being minimized. It's a little strange that that's not documented. If you wanted to be clearer you could call an anonymous function in the first arg to fminbnd like: muxm = fminbnd(@(y) smoothILT(y,chipercent,chimin,Ar,A,H,Dm,D,mD,Xs,N,mux),0,10,fop); Make sense? 
WHOA. Any ideas why they don't just use the date/time as a seed automatically? 
I think it might be for debugging and reproducibility purposes. Easier to debug non-deterministic code perhaps? Beyond that, I don't know. That behavior is unlike any other programming language I've dealt with.
It is indeed for reproducing results involving the RNG. It is one of the many many many MATLAB 'features' that is incredibly useful if you know it exists or absolutely infuriating if you do not. Lucky OP made that transition between groups today!
thank you sir! upvote your way!
Kinda weird question to ask as it would make sense to check the documentation when choosing an appropriate solver, which leads to [ode23tb](http://www.mathworks.com.au/help/matlab/ref/ode23tb.html)
ode45 is a nonstiff solver, ode23tb is a stiff solver.
Thanks! This really helped. 
IMHO the best way to do this is with a log file, not screen dump. I use a function that accepts a file handle, an error level, and a text string as inputs. It formats the message, adding a timestamp, worker number (i use it for parallel jobs), and error level in typical syslog format, then writes it to the file. You can follow the progress with tail, and it keeps a record in case it brings the entire system down.
This dev has their shit together! Internet high five for following (and sharing) good practices.
The function scatteredInterpolant should help.
two things to do: 1. If you are using proper error handling (try, catch structures), then you add an [error] log message in the 'catch' statement, including a the full error message and dbstack output. If you don't have error handling written into the code, you can 'cheap out' and wrap everything in a try-catch block, so if it borks anywhere, you can still at least dump the error to the log file. 2. Log info level 'heatbeat' updates. Make a log entry at critical points in the code....any place you would comment with a header to explain what happens next. All of my big processing loops also log a line every 10/100/1000 iterations, depending on speed and size. They usually list the current iteration number, percent done, the elapsed time since the start of the loop (using tic/toc) and the estimated time to completion (elapsed time / iteration number * total iterations). so all you have to do is tail your log file and watch it. When you see [error] come up, you know it's dead. If it stalls without error, you will notice a lack of expected activity and know something is wrong. 
thanks. I've fixed a lot of bad code in the past. I'm just hoping to spare someone else some of the crap I've been through.
Thanks a lot for the great ideas. I have never used [error] before and now looking into the help file. Thanks again :)
no prob, but I'll save you some time. there is no [error] command in matlab...I was refering to is as the message type. For instance, a log entry would look something like: 06/05/2013 12:48:03 | [info] Processing started 06/05/2013 12:48:05 | [error] User is an idiot. exiting 'try' and 'catch' are the important guys. try &lt;some code&gt; catch exception &lt;error handling&gt; end If any error occurs during &lt;some code&gt;, then it jumps to the code located after 'catch', with the variable 'expression' holding the info about the error that occurred. You can then do what you need to do...maybe try and recover from it, or just log it happened, then [rethrow](http://www.mathworks.com/help/matlab/ref/rethrow.html) it and let the program die
No, the data is not a function. Think of it as measured expirmental data, and my problem is fitting a function of the three spatial variables x, y, z to describe it
Just checked the details on that. Seems like its what I need, can't wait to test it out tomorrow at work. Thanks!!
The data 'are'. Give what I suggested a shot. 
From [MW Dictionary](http://www.merriam-webster.com/dictionary/data): &gt; **Data leads** a life of its own quite independent of datum, of which it was originally the plural. It occurs in two constructions: as a plural noun (like earnings), taking a plural verb and plural modifiers (as these, many, a few) but not cardinal numbers, and serving as a referent for plural pronouns (as they, them); and as an abstract mass noun (like information), taking a singular verb and singular modifiers (as this, much, little), and being referred to by a singular pronoun (it). Both constructions are standard. The plural construction is more common in print, evidently because the house style of several publishers mandates it. Data may also take a singular verb. Also, the fellows at MW dictionary prefer to treat it as a singular noun - *Data leads a life of its own*... --- The MATLAB function [interp3](http://www.mathworks.com/help/matlab/ref/interp3.html) requires that V is a 3-D array and the other 3 inputs are equal sized 3-D arrays produced from meshgrid. Trying to pass vectors results in: ??? Error using ==&gt; interp3 at 129 V must be a 3-D array. --- I am pretty certain that [TriScatteredInterp](http://www.mathworks.com/help/matlab/ref/triscatteredinterp.html) / scatteredInterpolant is the function that I need, as DocRadar suggested. 
In the scientific community the word data is almost always treated as plural. 
Take a look at the surf function.
 M=50+(110-50).*rand(30,3); plot(M(1:30,1),'b-') hold all plot(M(1:30,2),'g:') hold all plot(M(1:30,3),'r--') xlabel('Day') ylabel('Temperature') title('30 Day Temperature Distribution Plot For 3 Cities') legend('City 1','City 2','City 3') Avg=mean(M) Max=max(M,[],1) Min=min(M,[],1) I have all of that and it's returning the correct information. I just need to figure out how to get the days that correspond with the max temperatures.
I had already read it, but obviously not closely enough. I figured it out, thanks!
Would this be done with an inline function?
What have you tried so far? Depending on your level of newbness. You could do a for loop. You could do vector math.
I have it set up as an inline function, but I don't know to plot it. f=inline('x^2+y^2-x*y+x^2*y','x','y')
 f(x,y) With the point stuck in it? Maybe? I've been experimenting, is this correct? fplot('f',[-10 10 -5 5])
&gt; With the point stuck in it? Maybe? Don't ask me, try it. &gt; I've been experimenting, is this correct? Personally I hate fplot. I much prefer plot. Another hint. If you do .* or .^ it will do matrix multiply and powers.
You're welcome!
only problem is scatteredInterpolant is strictly on MATLAB2013, and is not there on MATLAB2012 D: TriScatteredInterp is what is available and is pretty much the same thing except that it doesn't extrapolate, so when I try to apply my interp to the full cubic space all my edge values are NaN :(
We're not going to do your homework for you, but as a starting point type in "doc surf" and take it from there. I suspect they want you to provide a surface plot. Documentation really is quite good in Matlab, use it! You have already received a good hint for how to get the function values, try to figure it out.
If nearest neighbor extrapolation is good enough, perhaps you could just define additional points at the corners of your space with known values?
That is not matrix-multiply, it's element-by-element multiplication!
That's what I meant. 
That's funny because I work in the scientific community and everyone around here says "this data is..." :)
On a Mac, you can go to the terminal (or use the system command in matlab) to crop out the white space boarder completely: pdfcrop inputfile.pdf outputfile.pdf 
I am writing this program to be used multiple times so it would be better to do it inside Matlab.
I've used this one successfully before: http://www.mathworks.com/matlabcentral/fileexchange/10889-savefig There are other options like http://www.mathworks.com/matlabcentral/fileexchange/16179-save2pdf But I haven't tried it. To the best of my knowledge, it's still problematic to get nice and cropped pdf printouts from Matlab nativel/builtin but I'd be surprised if these options do not serve you well.
 system('pdfcrop inputfile.pdf outputfile.pdf') But I'm not sure if that will work on a PC, probably not, I think it's a unix tool. I used savefig for most of my figure work for grad school and professionally when working on both PC and Mac until about 2y ago. Too complicated to go into my current methods as I'm just on my phone ATM.
You need to change the PaperPosition: set(gcf,[0.250000,0.250000,8.000000,10.500000]) 
Awesome, thanks for the link. I just gave it a try but no luck on receiving the data. I'm getting the error "judp.m--Failed to receive UDP packet; connection timed out." I have the app configured to send the data to "The computer running matlabs IP, Port #" and I am running the function "MSSG = judp('RECEIVE',Port #,1000,5000)" as per the instructions. Was wondering if you might be able to suggest where I could start troubleshooting.
you might want to look at MATLAB function [xlsread](http://www.mathworks.com/help/matlab/ref/xlsread.html) to get started. from there, depending on what you want to do, it should be pretty simple.
Here's a vectorized and simple way to do it. Suppose we have two vectors X (1xM) and Y (1xN) of doubles: x=repmat(X,length(Y),1); y=repmat(Y',1,length(X)); tolerance=1e-3; % whatever you want it to be locs=abs(x-y)&lt;tolerance; We now have a logical matrix that tells us what elements of one set are within the tolerance of members of the other set. If you want to use this to find the intersection of the two, you can simply use the following: X(any(locs,1))=[]; % remove elements from X that have values in Y within the tolerance level Z=[X Y];
While I think that would work, I am actually not at all interested in the actual intersection, but the *indices* that relate which elements correspond to each other. Thanks though
Also, I need to be able to work on rows. This only works for cectors
I second the xlsread() suggestion. Fingers crossed that the data you're working with are in a standard format. Are you looking at relationships between dendritic spine morphology and behavior? Either way, the best way to learn matlab is to have a problem to work on, and it sounds like you've got a good start. Dive right in. Google, help, and lookfor, are your friends. 
 [I,J]=find(locs); Every location in the *locs* variable tells you whether or not the elements correspond to each other. Every column of the resulting MxN matrix tells you which elements of Y correspond to that element of X, and every row tells you which element of X corresponds to that element of Y. I think you have everything you need--can you be a bit more specific about what you exactly it is that you want?
The dir command will return all the files in a directory. Learn about cell arrays and associated functions/syntax (cell2mat to get a regular array of doubles, when to use () or {}). Plotting options to make pretty graphs.
In my experience, the best way to propagate errors is the hard way: code it by hand. However, if you have the Symbolic Math toolbox, maybe this can help you out: [Propagation of Uncertainty](http://www.mathworks.com/matlabcentral/fileexchange/17901-propagation-of-uncertainty).
Thank you sir. 
If you're willing to write a small program, I have a suggestion that could help out. I do mathematical work on scattered data interpolation, and this is a problem I deal with every day. The approach I outline shouldn't take more than a few minutes to code, and should provide you with an interpolant of a function of three variables. We're going to use a radial basis function interpolation method. The things you need to do are the following: A: Have your data that you want to fit plus some collection of scattered points (your (x,y,z) scattered nodes and the data vector v corresponding to those nodes) B: Choose a radial basis function (Gaussians, thin plate splines, multiquadrics, whatever. See references for details) C: Construct a matrix of pairwise distances between your scattered nodes. That is, if nodes(j) = [x(j) y(j) z(j)], then you want a Distance Matrix DM(j,k) = norm(nodes(j)-nodes(k)). See references for free code if you want to save some time. D: Let phi denote the radial basis function of your choice. Apply phi to every element in DM (you can write an anonymous function phi(x) = @(x) exp(-a*x.^2) for example, for some fixed scale parameter a. Then just do the command A = phi(DM) to get this matrix. E: We want to get the coefficients of the RBF expansion, that way we can evaluate our interpolant at any point wherever. To do this, we invert the interpolation matrix problem Ac = v where A is the matrix we constructed, phi(DM), and v is your assigned data at the nodes, with v(j) corresponding to the data at nodes(j). At this point, you have an interpolant, which is of the form sum_{j=1}^N c_j phi(||x-x_j||). To evaluate this at any point, you need to just evaluate that expression. This requires that you compute the pairwise distance between your evaluation point x, and the fixed data nodes (use DistanceMatrix function), apply phi, and sum with the c_j coefficients. You can create a nice meshgrid of evaluation points, evaluate over those to evaluate where you need to. If this is confusing or you need an example m-file, just let me know and I can paste something. Hope this helps, and if I misunderstood the question, let me know and I'll help out how I can. References: See Greg Fasshauer's excellent book "Meshfree Approximation Methods with MATLAB" or check out his online lectures where he runs through some examples of how to do these computations. See here for examples and code: I think in his first lecture, somewhere he pastes code for a DistanceMatrix function. The rest is just choosing an RBF, and then running the code above. http://www.math.iit.edu/~fass/590/notes/
http://www.mathworks.co.uk/matlabcentral/
I don't have an answer for you, but you may also want to mention which OS you're on.
Good point. My home computer is using Windows 7 and my work computer uses some form of Linux, red hat I believe.
I have also been having this problem! I'm using Windows 7, and thought it was just lag on my oldish computer. One of my lab mates who uses whatever the latest version of OSX is has also noticed the lag, and he has a brand new (&lt;2 mo) Macbook Pro. Also interested to hear if anyone has a solution.
I have run Matlab on a few different distros of linux and noticed the lag as well. That is most likely due to the fact that you're using Wine for compatibility. Any program intended to be run on Windows or MacOS that is being run on Linux will experience some lag. I have Matlab installed on two different PC's, both running Win7 and have noticed no issues. One is a Asus EEE PC (a netbook) with 2gb of ram. The other a Dell XPS 17z with 8gb of ram. I can only really tell a difference in performance went running a script with many iterations (Monte Carlo for example), but this is to be expected. EDIT: Also, does your default directory have a large number of files in it? For example if you are using your desktop as a default dir. 
http://www.mathworks.com/matlabcentral
I'm experiencing the lag on both my Windows 7 machine and a linux machine. The actual performance computationally is fine, its really only this minor annoyance of it actually opening up the m-file editor, not the actual running of the script that I'm seeing this lag.
what have you done so far? I am for helping someone out, but to be honest this sounds like you are asking us to do your homework.
And does your default directory have a large number of files in it?
It could be. I would just try creating a new **empty** file folder and just set that as your Matlab directory on the computer running Windows. 
Also, let us know if that solves it. I'm curious because I couldn't find much info for this problem online. 
Also **mesh**.
It's bizarre that this doesn't happen when you use `edit` instead of double-clicking on the file. There's a [bug report](http://www.mathworks.com/support/bugreports/905821) for something that sounds like what you're experiencing on 13a. Might be worth taking a look and maybe giving the patch a try. You need to have a MathWorks account to view the bug reports though.
I have asked for help not for teaching
https://www.google.com/search?q=simulink+s-function+tutorial&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a http://www.mathworks.com/help/simulink/sfg/s-function-examples.html http://www.chem.mtu.edu/~tbco/cm416/MatlabTutorialPart5.pdf 
Why are you using Matlab? Did you write the perl programme or have you just been given it to use? It sounds like you would be much better using a native language that you can run on Ubuntu box and outputting the results/progress into a csv file that you can read into Matlab at a later stage, if you so wish.
If you just need to create a simple S-Function, don't forget about [S-Function Builder](http://www.mathworks.com/help/simulink/slref/sfunctionbuilder.html) and [Legacy Code Tool](http://www.mathworks.com/help/simulink/slref/legacy_code.html) (the latter of which is a tad harder to use, but gives you a bit more control). It's still a good idea to look through examples like /u/MechEGuy posted, but it's also important to know that you don't always have to start writing S-Functions from scratch.
**rand** will produce a uniform distribution in [0,1]. You can scale and shift that as required by your problem. See the doc for an example of how to do so. You may also look up **round()** if you need only the integers in that range.
What are "the numbers (0-A)"? What are "2+ digits"? What is "1"? What does "It stems it" mean?
His/her project is about [dual-tone multi-frequency](http://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling) which can be used to detect keys pressed telephone keypad by detecting standardized tones. I don't know what "stems" exactly means, but seems to be related to [Goertzel-algorithm](http://en.wikipedia.org/wiki/Goertzel_algorithm). Maybe it means that the output of Geortzel has exceeded some threshold.
Use the right tool for the job. If your job is to interface with excel, use VBA. xlsread is fairly limited. It demands that data in the excel files be in specific configurations. To read in anything that isn't block data, you'll end up using low level I/O functions anyway. Now, if what you are doing with the data suggests something that you might need matlab for, then go for it, or try pythonxy
clabel.m does something like this. (You click near a contour and the script puts a label **on** that contour. Cool, huh?) Here's a concept-pseudoscript for you: * Use ginput to get the exact x-y location of a clicked point. * Compute the distance from that clicked point to every other point in the your data. * Find the data index for which that distance is minimized. * Output the data's x-y point associated with that index.
Presuming you and not your employer own the code, put it on Github! Include a file called LICENSE and put in it [whatever license you care to](https://en.wikipedia.org/wiki/Comparison_of_free_software_licenses), and include a copyright comment at the top of each of the files if you like. You'll never be able to stop someone from using your code, but this way you can at least make a reasonable claim at authorship, and potentially a legal one. That, or the file exchange as mentioned.
One thing you will learn with time is that MATLAB's built in editor is pretty poor - i.e. no search and replace in selection, no regex, etc. The best way to achieve what you are after (as far as I know there is no direct solution) is to just write your text, then select all the lines you want as comments and press CTRL+R to toggle commenting on ALL the lines at once. CTRL+T will remove the comment on any selected lines. This assumes you have the Windows shortcut set in use (which you probably want, e.g. CTRL+C for copy). Set this in Preferences -&gt; keyboard -&gt; shortcuts, then the top dropdown box.
Firstly use the documentation heavily. Secondly I'm assuming you have the centroid Y,X location in the image. If you were to plot(image((centroid_y - max_radius):(centroid_y + max_radius), centroid_x)) You will get a plot of intensity values vertically through the centroid. Then have a play around with the ginput function to get user input from a graph click. Alternatively why not just get the peaks automatically if they are clear enough. Use max to find the location of the max intensity value in image((centroid_y - max_radius):centroid_y,centroid_x) and similarly for centroid + radius. Subtract the indices and boom - number of pixels between the two peak summits.
This might be a poor idea, but in case you haven't thought of it, you could make your .m files into .p so that people can't see your source code. Holding onto the original .m files might help to strengthen the case that it is your work.
This sounds like exactly what I need to do. I don't personally own a matlab license, so I was concerned about the legitimacy of creating an account with Mathworks, but I don't see why there should be any problem publishing to github. Thanks so much for the excellent advice! 
what does your program do?
It's an agent based stock market simulation based on a paper written by Doyne Farmer. I started building it thinking both that I knew how to program, and that I understood Agent Based models. I didn't realize that I had no idea what I was doing until after I had already become obsessed with the project. After all the work that I put into it, it was a pretty big letdown to realize that I couldn't find any laymen who were even remotely interested in what it could do, and I was too afraid to post it online for fear that somebody might steal it and try to take credit for it. I'm hoping this github is exactly what I was looking for.
You could use block comments instead: %{ This is a comment This is another comment This is the final comment %}
To get mouse input from the user, you can use **ginput()** to allow them to click on the figure. It will return the (x,y) coordinates of each click.
Check out the **datacursormode** command.
I have no idea what Goertzel is, but it seems like there's something going on inside there that doesn't like your "1." Who wrote it? Can you look at the source? Are you meant to understand the algorithm or was it given to you as a "black box?" Maybe use MATLAB debugger to look inside that code while it's analyzing the "1." If someone (professor?) provided the function, go ask them. See if they have an example that DOES work correctly and try to see what the difference is. 
Are you looking to move this entire process into MATLAB? Do you have the MATLAB Global Optimization Toolbox? Do you have MATLAB Parallel Computing Toolbox and MATLAB Distributed Computing Server (MDCS)? Correct me if I'm wrong, but it sounds like you're trying to "hack" MATLAB's global optim functionality do perform its calculations on your own cluster with your Perl code. I don't know that you can do this. If you have access to the aforementioned toolboxes and a cluster, you *can* use a pool with the GA toolbox. [See here](http://www.mathworks.com/help/gads/parallel-computing.html) Now, if you're trying to just write your own GA front-end in MATLAB and then call out to the cluster with your Perl code, you can just call out using the [perl](http://www.mathworks.com/help/matlab/ref/perl.html) command. You'd have to set up some way to wait for the results to return. I would imagine (and I'm totally guessing here) that having your perl script return the results to a txt file would easiest. Then you could just read that txt file into MATLAB for the next step.
At each step in the loop you are reevaluating one number (b). There is nothing to sum() - at each new increment of n, you need to evaluate a new part of the summation and sum all of the previous parts together.
Thanks! I'll mess with this. That part with the error is super helpful.
As this is a homework problem, I hesitate to give you actual code. I would look into representing b as a vector. *(to the purists, I know this means constantly redefining the size of b, which is inefficient, but this problem is simple enough)*
I think I figured it out. Thanks a bunch!
Anytime! Best of luck learning more with Matlab - it is a truly powerful tool!
Is cumtrapz what you are looking for?
This seems to be one way to do it, thanks!
This one never fails to make me laugh :D
Be sure to adjust for your step size.
Not sure how you plan on using 3 bits to represent 128, but with integers you could do the following: x = (rand(1)-.5)*256;
Comander Sammo gave the best solution, but a trick I did for all my coding (not just in matlab) is to re-map my keyboard to a more programmer friendly one. For mine, my number line is now solely the 'special' characters (not that special when you use them 50 times a day each). Windows has a tool for this [here](http://msdn.microsoft.com/en-ca/goglobal/bb964665.aspx)
Don't most MP3 players have a folder option, where you can just play from a particular directory? Every one that I ever owned did Sansa, Phillips, Sony. I find myself doing similar things all the time. I often find it easier to write a quick Matlab script for batch operations than to write a shell script or Windows batch file.
this is definitely outlined in the EBR^
"If all you have is a hammer, everything looks like a nail"
Autohotkey, friend. 
I see your MATLAB and raise you python.... import os import sys def main(argv): orginal = '' new = '' if not argv: print 'frename.py &lt;orginal name prefix&gt; &lt;outputfile prefix&gt;' sys.exit(2) print argv orginal = argv[0] new = argv[1] print 'Orginal file name is "', orginal print 'New file name is "', new for filename in os.listdir("."): if filename.startswith(orginal): os.rename(filename, ''.join([new,filename[len(new):]])) if __name__ == "__main__": main(sys.argv[1:]) I use this when I need to rename the prefix of a file. Comes in handy. Hopefully it helps someone.
Some good pointers out already. Personally I mostly learned it from getting searching matlab help on "guide", the GUI builder/editor in matlab. There are some elementary examples given too. Data transfer/storage is a bit tricky if you are new but if you are doing something very simple/dirty you can always use global variables.
Thanks man, but I just used the following [(clicky)](http://www.mathworks.com/matlabcentral/fileexchange/3265-magnetginput) to run this function. It took a bit of working out but it worked in the end
**TIL** Wow I'm downloading that right now
It sounds like you are trying to do domain coloring. If so there are a lot files on MATLAB's file exchange.
Thank you, that was just what I needed. Now I just need to figure out now to customize my axes.
Eventdata is useful for certain GUI objects. For uitables, for example, eventdata can tell you the row/column number of the cell currently being edited. In most cases, though, you wont use it.
You're right. Coupled with cumsum, cumprod... And I've legit used all of them. 
ylim and xlim? I looked at the documentation for imagesc and there is an overloaded input imagesc(x,y,C) that you could use to define x and y.
I believe xlim and ylim only zooms the axes, which isn't what I want. I want to replace the normal 0-N axis grading and replace it with one that grades from -range to range without changing the picture. I haven't checked imagesc(x,y,C) because I am no longer using imagesc, but a custom written program called dcolor that does domain coloring. I should check if there's anything in that program that can do what I want. Edit: OK, I solved it! If you modify the gca properties 'YTickLabel' and 'XTickLabel' you can change it to what you want it to say.
Are you sure it only zooms? I thought it just sets the upper and lower limit of the axis. The ticks set where matlab actually labs values on the axis.
Except in this case he reached for a socket wrench...
Well, what I got when I changed ylim i just got a couple of rows of the matrix rather than it just changing the tick labels. At least I got one way working, even if it isn't a very pretty solution.
How is this problem solved analytically? I'm guessing you'll have to look at the eigenvalues of the matrices, so eig() would be a start. 
You are talking about the profiler. Get the doc you want via: doc profile or doc 'Profiling for Improving Performance'
That's it! Thanks a bunch.
Just to clarify, are you saying you want to multiply 1x1x2 1x1x4 1x1x1 1x3x2 1x3x4 1x3x1 and continue this progression through 2x3x2 2x3x4 2x3x1? 
Hm, I fixed signatures and that seemed to fix the initial conditions error but now when I run it it doesn't know about B. I get &gt;??? Input argument "B" is undefined. &gt;Error in ==&gt; lec1_rhs at 5 rhs=[y2; (B-100)*y1]; But B is clearly defined. 
Right, except on the first part the 1x3 would be repeated for the second 3 in the second column.
I think your best bet to make it size independent is to change the alignment of the columns and sum them up and use a while loop that implements this change while your new matrix is not equal to your original. For example, your original matrix is [1 1 2 2 3 4 2 3 1] you would sum up the row and then implement the change to make your new matrix [1 1 4 2 3 1 2 3 2] (i just moved last last column up one, moving 2 from the top to the bottom) then sum up the row for this. This would be inside of a while loop that keeps doing this until your new matrix is equal to the one you originally had. Then you would do the same thing with the second to last column and so on until you are changing the first column. Sorry I can't help more right now. Good luck.
I've not got a copy of MATLAB so this may not be exact, but I believe the following will work (assuming A is your initial matrix): n = size(A,1); P = perms(1:n); pSize = size(P,1); out = zeros(pSize,1); for i=1:pSize out(i) = sum(A(P(i,:),:)); end beyond n=10 you'll probably get terrible performance as obviously you've got a factorial loop, but for everything up to there it should work. Hope my memory is correct and those commands all exist and do what I expect!
There is one little error with the syntax. But thank you so much, this was exactly what I was looking for.
Your code isn't working (expressions missing etc...). Anyhow, I fixed it and solved the problem: you intially plot a 500x500 empty image and then overwrite it with your 300x300 data - thus the offset. This is the fixed version: % Function showing 2 gratings of different orientations% B= zeros (300, 300); figure(1); imagesc(B); hold on; n = 300; [X,Y] = meshgrid(linspace(-pi,pi,n)); sinewave2D = sin(5*X); sinewave2D = rot90(sinewave2D); sinewave2D = rot90(sinewave2D); imagesc (sinewave2D); set(gcf,'Color',[0.5,0.5,0.5]); axis equal;axis off;colormap gray; set (gcf, 'position',[300 200 400 400]); figure(2) imagesc (B); hold on; n = 300; [X,Y] = meshgrid(linspace(-pi,pi,n)); horizontalGrating = sin(5*Y); horizontalGrating = rot90(horizontalGrating); horizontalGrating = rot90(horizontalGrating); imagesc (horizontalGrating); set(gcf,'Color',[0.5,0.5,0.5]); axis equal;axis off;colormap(gray); set(gcf,'position',[800 200 400 400]); I don't think you even need to plot B beforehand - it is completely replaced by the next plot anyway.
Thanks! Cant believe we overlooked that part xD totally get it now!
http://www.mathworks.com/help/matlab/ref/set.html http://www.mathworks.com/help/matlab/ref/gcf.html hopefully this helps.
Have a look at the help for [nargin](http://www.mathworks.com/help/matlab/ref/nargin.html), the last section about varargin in particular: "... function can accept an indeterminate number of additional input arguments."
I would assume it uses [varargin](http://www.mathworks.com/help/matlab/ref/varargin.html), and then parses the argument list.
Have a look at the inputParser class: http://www.mathworks.de/de/help/matlab/ref/inputparserclass.html
In the 2nd call to zeros, don't use a colon as the second argument. This doesn't make sense. You need a number there. Type 'help zeros'
Thank you.
I did it the ghetto way by making separate .fig and .m GUIs for each configuration and made the new GUI open in the same position as the old GUI and delete the old GUI. Works well enough. I'd love to hear about a better solution. I used a button to call the new GUI and in the call to open the new GUI I included arguments for the current GUI's position and it's handle so it can be deleted using the delete(h) function by the new GUI.
Where's the code? Spirit of science and all that.
As someone who regularly fights with MATLAB GUIs, you are a beautiful human being for showing me this
&gt; I wanted to use a command to match a personal dictionary of words I created with said "tons of data" What does that mean exactly? Do you simply want the indexes of where each word in your dictionary matches in your data cell? If so, you should look into [regexp](http://www.mathworks.com/help/matlab/ref/regexp.html) Also, your dictionary is a cell. If you want the actual string value and not a 1x1 cell of the string, you should be indexing it like so: dictionary{ii}
&gt;Do you simply want the indexes of where each word in your dictionary matches in your data cell? Yes, exactly. Thank you I am (relative) noob ! So if I wanted to match an exact case it should look something like this : regexpi(Variable-TonsofData, 'StringIwanttocompare') ? If so would a loop for checking the indexes look something like this ? for j=1:319; regexpi(Variable-TonsofData, dictionary{j}); end Thanks again mate.
&gt;the integral function doesn't accept vector input how else do you want to vectorize it? If you don't want to write an integral function yourself I think all you can do is pipe it through arrayfun if you don't want to loop.
the way I have done it in the past is to make multiple panels containing the figures/buttons/textboxes that I want grouped into tabs. You then give each panel the same position so they overlap and programatically change the 'Visible' property to only show the one you are interested in.
These are handle classes right? When the constructor for compoundObject creates its children objects, store the handles in a property as an array. In boss.addSubordinate you would create the compound object then access the property with the array of handles and store them wherever. However, I think it would be better to just preserve the hierarchy and leave the references in the compoundObjects. If you need a list of all children objects, write a dynamic get method that will recursively parse the compoundObjects and return the handles. By not caching the handles in the parent you can modify the compoundObjects directly by reference and not have to worry about calling an 'update' method in the parent. 
So something else that might help: Depending on the rest of the code, you might be able to use inheritance to simplify things. compoundObject could inherit simpleObject such that both share the same set of methods (with different code driving them). So for instance, you could make simpleObject.get_property return a single value, but compoundObject.get_property return an array of values (From each simpleObject) or the mean value, or the max, or whatever. Boss could just have a list of handles containing both simple and compound objects, but since the methods are overloaded, it wouldn't care about the actual class, as the methods are all the same. If you aren't using the compountObject to maintain hierarchy and interact with groups of simpleObjects in bulk, it would be simpler to just write a method to create a block of simpleObjects en-mass and return an array of handles to them. 
Reading your question this was the solution I thought of immediately so I'm pretty sure you have the right idea! Love it when that happens straight after posting a question :P 
Hahaha ! Yeah :P. I have even sent an e-mail to a professor asking him a question about it ! :P
Thanks that is what I thought :)
Try defining your function as an anonymous function within your .m script. http://www.mathworks.com/products/matlab/examples.html?file=/products/demos/shipping/matlab/anondemo.html
welp, i have no idea what the "??? Error using ==&gt; wgifc File must be GIF89a format for appending" is about, but i did figure out a work around. The new code i use is... [filename,pathname]=uigetfile('.txt','Select data files. hold command to select multiple files','MultiSelect', 'on'); figure(1) gifname='test_animate.gif'; for count_file=1:length(filename) %load in the file fullpath=char(strcat(pathname,filename(count_file)));% char is used to turn the strcat from a cell into a string so that fid can use it as a path. fid=fopen(fullpath); data=textscan(fid,'%f64 %f64','headerLines',3); % skip the header lines x=data{1,1}'; y=data{1,2}'; plot(wavelength,transmit) drawnow frame=getframe(1); im=frame2im(frame); [imind(:,:,1,count_file),cm]=rgb2ind(im,256); end imwrite(imind,cm,gifname,'gif','Loopcount',inf) This basically skirts around having to append to the .gif since i just build up imind as i go, then i write to a .gif at the very end. I still think it's weird that my first attempt didn't work though. 
no, it should be if count_file==length(filename) imwrite(imind,cm,gifname,'gif','Loopcount',inf); else imwrite(imind,cm,gifname,'gif','WriteMode','append'); end because 'Loopcount' inf should be set when the program exits the for loop. the order of the if else structure is fine since you want imwrite to be appended if the for loop isn't finished. 
Please put 4 spaces before your lines of code so they are formatted correctly or use something like pastebin. It will allow us to more easily decipher your code.
Doesn't look fixed. Use Gist.
If you copy/paste and run the first example that i copy/pasta'd from the site that i linked, it run's fine and plops out a .gif. Somehow going from that example to my first example generates an error. I have no idea why. http://youtu.be/fq3abPnEEGE
Why not just have each matrix be a different dimension within A? for n A(n) = ... end
did you initialize A before the loop? A = zeros(x,y,n) for n A(n) = zeros(x,y) A(n) = ... end
You're assignment is incorrect, you should do A(:,n) = ... or A(n,:) = ... depending if you want to store the data in rows or columns.
The data you are trying to save each iteration is a 2 dimensional matrix, so you should change your assignment to A(n,:,:) = ... Also, you could make A a cell array and do A{n} = ...
oh, well I was oversimplifying. n = 10 A = zeros(x,y,n) for n = 1:10 A(n) = zeros(x,y) A(n) = ... end
Right, sorry on mobile, combine this answer and mine.
Good question. I threw together a quick benchmark of a few different functions to test this. These are the running times for 1000 iterations of each function, with varying numbers of threads (this is on an i7-970): Function: eig 1 threads: 233.7943 2 threads: 117.7381 3 threads: 81.3069 4 threads: 64.6511 5 threads: 54.126 6 threads: 48.2012 7 threads: 47.0136 8 threads: 47.1387 9 threads: 47.6813 10 threads: 48.636 11 threads: 51.4493 12 threads: 52.3227 Function: mtimes 1 threads: 30.5084 2 threads: 15.5372 3 threads: 10.7949 4 threads: 8.6281 5 threads: 7.5103 6 threads: 6.9448 7 threads: 6.3701 8 threads: 6.1783 9 threads: 6.0625 10 threads: 5.9998 11 threads: 6.0984 12 threads: 6.2042 Function: fft 1 threads: 9.7392 2 threads: 5.1587 3 threads: 3.8212 4 threads: 3.1953 5 threads: 2.967 6 threads: 2.7721 7 threads: 2.6759 8 threads: 2.5948 9 threads: 2.6212 10 threads: 2.6042 11 threads: 2.6774 12 threads: 2.5318 Function: plus 1 threads: 10.453 2 threads: 5.3803 3 threads: 3.78 4 threads: 3.0128 5 threads: 2.5875 6 threads: 2.4378 7 threads: 2.1785 8 threads: 2.0046 9 threads: 1.9642 10 threads: 1.8486 11 threads: 1.7893 12 threads: 1.763 For the (most likely) CPU bound functions like eig and mtimes, there's actually a slight increase in running times with more than 7-10 threads. I suspect addition is most likely to be limited by memory access speed, since it is an O(n) operation. Here we see a decrease, albeit a slight one, in total run time all the way up to 12 threads. So the answer is "it depends." The results seem to agree with my intuition that if the bottleneck is somewhere other than the CPU, then there will be a greater benefit from using virtual cores. In all cases we definitely see diminishing returns to adding more threads beyond the number of physical cores, though. [Here's the code](http://pastebin.com/vukhhEJ4)
&gt; Mechanical Turk sounds like a cool idea, but you could easily do that yourself with a little MATLAB GUI. I ended up doing the Mturk. Well actually I ended up doing it twice. The first one I submitted I screwed up my script and used files{1} so I paid $10 to have people determine the rotation of the exact same image. 1000 times. The second time I lowered the reward from $0.01 to $0.00. I thought "Maybe someone will want to do this for free!". It wasn't done in 10 seconds like the $0.01 but there are a lot of bored housewives that like sorting photos. Downloaded the CSV file used matlab to make a script to sort them and used XnConvert to rotate it. &gt; Cropping I'll try that. I was playing around with edge detection and it sort of works but it's not perfect. &gt; Duplicate Detection Do you know if there is a way to summarize a photo with a few numbers? I thought about doing something like this but it's 'expensive' because you need to do 'n!' comparisons. (Although if I let it run over night it's moot). I also used XnConvert to resize all images so the longest side was 640 pixels. It it makes it much faster, especially when some of them are 5k+ pixels on one side.
Are you using any of the physical modeling tools (e.g. SimElectronics, SimPowerSystems), or base Simulink?
What do you mean by "short commands"? [edit] Is this what you want? N=3; X=randi(10,5); Q=zeros(size(X)); Q(X&gt;=N)=1;
I can only use the fully typed out methods behind things like inv(A), conv(A) for this task.
Sort of. If you're not saturating your physical CPU cores (i.e. bottlenecks outside of the CPU, like memory IO), then usually there will be a speed-up, at least in my experience. However, if you're already utilizing all your cycles using your physical cores, hyperthreading won't get you anywhere. Easy way to check is look at the CPU utilization when you're running stuff. If your CPU use is hovering at something below 100%, add more cores and see if it helps.
 help dec2bin
base simulink. The capacitors from the circuits toolbox thing do not join to my signal paths. Is there a way to do a conversion between the two types or is that just wishful thinking? 
He's trying to make a logical matrix, not convert it to binary. Took me a read through or two before I realized that myself.
This looks fine to me (I'm still unsure on your requirements and constraints on usable functions): X = rand(10); N = 0.5; Y = X-N; Z = abs(Y); Q = Y-Z; B = Q./Q; %element-wise division Except that B is left with nan values where you divide by zero. You have to replace those with 0 values: B(isnan(B)) = 0 Can you use typecasting to do this? B = logical(X-N) Or simple thresholding? B = X&gt;N
You have to use [S-PS](http://www.mathworks.com/help/physmod/simscape/ref/simulinkpsconverter.html) or [PS-S](http://www.mathworks.com/help/physmod/simscape/ref/pssimulinkconverter.html) blocks to go between base Simulink and Simscape blocks like the capacitors you seem to be talking about (you'll also need a ground in your electrical circuit, a [Solver Configuration](http://www.mathworks.com/help/physmod/simscape/ref/solverconfiguration.html) block, and a voltage or current source providing power). If you want to stay with base Simulink all the way, you need to find the differential equations describing the dynamics of the capacitors you're modeling and either implement them with integrators, gains, etc. or something like a transfer function or state space block.
 B = X&gt;N That seems to be the fastest way
Well you technically answered the OP's question...
Have you considered just using the mathematical model of a capacitor. It is pretty trivial to do with basic simulink blocks.
gruesome yet informative. Thanks
FreeMat is pretty good as a basic replacement for Matlab. It doesn't have any of the fancy toolboxes, but plotting and matrix operations pose no problem.
The skewing part could be achieved by this: http://en.wikipedia.org/wiki/Skew_normal_distribution For the bounding part - if the distribution was multiplied by an appropriate window function, that might work. You'd have to correct the area under the curve, though. http://en.wikipedia.org/wiki/Window_function 
I don't know COMSOL, but can't you make these variables inputs and outputs to the Matlab function?
I posted this on mathworks too and it seems like [persistent](http://www.mathworks.com/help/matlab/ref/persistent.html) can help me... still don't completely grasp how to use it but it could possibly solve this problem
Glad you found it on your own. You might also want to look into anonymous functions.
My experience with most of the free implementations of Matlab has been pretty poor. If you specifically need Matlab, shell out the cash and get it. Most likely, you're a student and the student version costs about as much as a textbook. If you need it for work, your employer should just buy it for you. On the other hand, if what you really want is an open source scientific computing package, you're going to be better off with Python or even Julia than the free Matlab knock-offs in my opinion.
Shared memory is a four letter word in the language of matlab. However, there is at least one project that implements it using mex: http://www.mathworks.com/matlabcentral/fileexchange/28572-sharedmatrix however the problem is that sharing is read only....writing requires the memory to be detached. With proper synchronization it could be possible though another solution that could help with IO speeds is to create a ramdisk and use it to cache the files. Matlab would never know the difference.
You can read the CSV file in smaller portions.
Open the file using fopen() and then use textscan(); With the right options, you can specify the delimiter and go line at a time if necessary. 
Here are some other strategies you might use. 1) Change the version of mat file it is saving if possible. Matlab enables compression on mat file saves by default. (the '-v6' option) Compression can take a lot of time, especially on larger mat files. I have often found it to be significantly faster to just turn off compression. Hard drives are fast and I don't need to save the storage space. 2) How much space is required? If you move where you are saving the mat files from a spinning disk hard drive to something solid state, it could speed things up *significantly*. You wouldn't have to get a full SSD to do this either. Check out [SSD in your pocket](http://www.codinghorror.com/blog/2012/11/a-ssd-in-your-pocket.html). 
&gt; another solution that could help with IO speeds is to create a ramdisk and use it to cache the files. Matlab would never know the difference. Good idea. I haven't done something like that since way back in the Mac OS 7 days.
It would be easier for us to help you if you shared the error messages as well. Where is your xprime function? 
Assuming I correctly understand what you want to achieve - this is what I came up with (using some example data). The code should be self explanatory (i hope) :). Feel free to ask if anything is unclear. %% generate data [x, y, z]=peaks; %% define profile line startPoint=[-3 -1]; stopPoint=[2 2]; nPoints=100; %% calculate points on line lineX=linspace(startPoint(1),stopPoint(1),nPoints); lineY=linspace(startPoint(2),stopPoint(2),nPoints); %% calculate profile profile=interp2(x,y,z,lineX,lineY); Edit: This will only work on a regular or graded mesh, if you want to work on your orininal (possibly scattered) data, I suggest looking into TriScatteredInterp, which basically works just as interp2.
hmm. that makes sense but when I go to plot the profile it just plots at a constant z value, rather than plotting z values along the profile? maybe me code will help it make more sense? I'm sure this should be a simple task but I can't find much help in matlab answers or elsewhere. %load data data=dlmread('22-05-13.xyz',' ',0,0); x=data(:,1); y=data(:,2); z=data(:,3); %calculate max, min, average, std dev Zmax = max(max(z)); Zmin = min(min(z)); Xmax = max(max(x)); Xmin = min(min(x)); Ymax = max(max(y)); Ymin = min(min(y)); stdDev =std(z(:)); volume = trapz(x,y); %regular grid data fig=figure(1); F=TriScatteredInterp(x,y,z); [qx,qy] = meshgrid (Xmin:0.001:Xmax,Ymin:0.001:Ymax); qz = F(qx,qy); mesh(qx,qy,qz); axis tight lighting phong shading interp title ('GridData') xlabel ('(m)') ylabel ('(m)') zlabel ('height (m)') view (2) colormap (jet) material shiny colorbar save triScatInterpSurf.fig %Obtain start position for slice extraction dcm_obj = datacursormode(fig); set(dcm_obj,'Displaystyle','datatip','SnapToDataVertex','off','Enable','on'); %displays dialog box f = warndlg('Input Required.', 'Choose a start location'); waitfor(f); c_infoStart = getCursorInfo(dcm_obj); posSt=getfield(c_infoStart,'Position'); %extract x,y,z for start location of 2D slice extraction sliceStartX = posSt(:,1); sliceStartY = posSt(:,2); sliceStartZ = posSt(:,3); %Obtain end position for slice extraction dcm_obj = datacursormode(fig); set(dcm_obj,'Displaystyle','datatip','SnapToDataVertex','off','Enable','on'); %displays dialog box f = warndlg('Input Required.', 'Choose an end location'); waitfor(f); c_infoEnd = getCursorInfo(dcm_obj); posE=getfield(c_infoStart,'Position'); %extract x,y,z for start location of 2D slice extraction sliceEndX = posE(:,1); sliceEndY = posE(:,2); sliceEndZ = posE(:,3); save('TransectCoord.mat', 'sliceEndX','sliceEndY','sliceEndZ','sliceStartX','sliceStartY','sliceStartZ') It's pretty clunky and I'm sure it could be optimized but I'm still learning. EDIT: Figured it out. I was calling c_infoStart when I should have been calling c_infoEnd. It now works perfectly, thanks.
I am taking a look at sharedmatrix and it looks legit. seems better than 'persistent' for what I need
Is that comma after figure(1) messing anything up? I haven't seen that before
A discrete filter cutoff frequency (for a low pass, is the frequency above which signals are attenuated) is usually defined relative to the discrete sample frequency. Say it is 0.2. So if you run the sim at 100 Hz, it will filter signals above 20 Hz. But, if you run it at 1000 Hz, it will filter signals above 200 Hz and not filter signals between 20 and 200 Hz like it did before. That is why. Check the parameters of the low pass and adjust it as necessary.
That makes a lot more sense, I'll take a look! Thanks!
If all you need is to be able to access values from the last time your Matlab function was called, then persistent is probably the easiest way to go. Add something like this to your function: persistent A; if(isempty(A)) %Assign an initial value to be used on the first invocation end %your algorithm here, using the value of A A = ... %assign value to use for A in the next function invocation and now the value assigned to A will be retained the next time the function is called
Just to add: you can specify how many lines you'd like textscan to read, so you can batch it into, say, 1000 lines at a time. Textscan also allows you to skip columns if you don't need them. This can save a lot of memory as well.
One thing that should also work is a rate transition. In your full system model/simulation whatever, you may want that higher rate. You can downsample that to a rate that matches the filter. Of course you can also design the filter to accept 1kHz input. 
Not sure it's what you're looking for, but a call to assignin within your function can save select variables to your Matlab workspace. Either that or make some global variables.
Matlab should be able to handle that no problem... How much ram do you have?
I only have about 3 or so GB of ram. Just loading a few of those large matrices eats up all of my ram. Is my best solution to just get some more memory?
Or you know, Unix.
This makes sense: &gt; I have a 3d array of values 0 - 1, This does not make sense: &gt; with an object made from the value 1. This does not make sense: &gt; surface of this object Please clarify what these things mean.
You could split A into blocks so that you can perform 4 smaller multiplies: Ax=b; A = [A11 A12; A21 A22]; x = [x1; x2]; % and b = [b1; b2]; b1 = A11*x1 + A12*x2; b2 = A21*x1 + A22*x2;
I could be mistaken, but doesn't ellipticF take two input arguments? It seems to compute just fine as long as I give it two inputs. I've never used MuPAD, or elliptic integrals for that matter, but the documentation seems to suggest you're missing an input. Example on my end: http://i.imgur.com/OR1F8W5.png http://www.mathworks.com/help/symbolic/ellipticf.html
That's my mistake for not writing it in my comment properly, sorry. I know it needs two inputs. It's those symbolic examples where you put in ellipticF(x,y) and it just outputs F(x|y) that are my problem. I need the actual symbolic output.
Okay, I think the issue here is that elliptic integrals don't have a "symbolic form" other than their integral representation. Taking a quote from Wiki, "In general, elliptic integrals cannot be expressed in terms of elementary functions." So this is likely where your problem starts. MuPAD is being "smart" by just returning you the same thing you type in, as there isn't really a better way for it to return it to you. Someone better versed in math might be able to step in and correct me, but this is my best hunch. EDIT: I tried something out in Mathematica, which I'm more familiar with. http://imgur.com/9FtS2Ui After coding the integral formula for EllipticF, and after a bit of computation time, Mathematica realizes I've defined exactly EllipticF, and assigns my function call as such. I imagine MuPAD is thinking along similar lines here.
Ya that's pretty much where I've gotten to. Even if I try to type it in manually in Maple or WolframAlpha as the actual integral that the elliptic integral represents I get dead ends and computation errors. Thanks for trying though!! Edit: Yes you're exactly right I think. I get the same thing from Wolfram and Maple. I'm gonna go see if I can find somebody in the math department.
Can you give me a .mat file containing the set1TargetA, B, and C data so I can get a better idea of what's going on? My guess is that it has to do with the fact that plotyy() creates *two* axis objects. Matlab only keeps a single active axis at a time, if you want to call "hold" and have it apply to both axes, you have to do the following: hold(AX(1),'on'); hold(AX(2),'on'); and later... hold(AX(1),'off'); hold(AX(2),'off'); note that the "hold" command is axis-specific. So your initial hold on command creates a new blank axis and sets its hold property to 'on.' This has no bearing on plots to subsequent axes.
The java update breaks matlab on OSX, read this: http://www.mathworks.us/matlabcentral/answers/79489-java-1-6-0_51-breaks-matlab-2012b-and-below
Try the hold method first and see if that works; it's probably the issue. If that still doesn't work, I can just make up my own data.
Yup, that fixed it—Matlab works perfectly now. Thank you very much!
Don't really understand what you're trying to do but something along these lines should work. sign changes: x_ind = x &gt;= 0; x_ind(2:end) ~= x_ind(1:end-1) indexes for which both vectors are positive: x &gt;= 0 &amp; y &gt;= 0
The matlab GUI is written in java? TIL.
I'm not entirely sure what you're looking for, but sign(x) will give a vector with 1 where x is positive, -1 where x is negative, and 0 where x is zero. If you're looking for indices where both are positive, then union() should do the rest for you. 
No problem! Almost everyone where I work uses Matlab on OSX so I got the email about how to fix it even before I noticed Matlab wasn't working.
Thank you so much, is there any way to tweak it so that it gives the location of the positive number instead of the change of sign? I'm trying to get the first and last number of the positive sections. 
&gt; If it matters, this loop is inside another loop, but it was working earlier, not sure what happened. Yeah, it probably matters. Post it. You also haven't said what `Y` is. 
First off, I'm pretty sure you could do this without a loop. Also, I'm assuming Y and H are single values. And check to make sure that 'time' and 'Seismogram' are actually each 1 x 929 or 929 x 1. "length()" only gives you the largest dimension. SCRIPT %%%%%%%%%%%%%%%%%%%%% amplitudeXY= (Y + (Seismogram)*H); plot(time,amplitudeXY,'w') %%%%%%%%%%%%%%%%%
* Y could be messed up * clear and preallocate amplitudeXY (and maybe other variables) at the beginning of the script
Locating every positive number is quite easy: find((sign(x))==1) More problematic was locating the first and last positive number of the positive sections. I did it, but the code is quite shitty and I'm not proud of it. I'm 100% sure there's more clever way to do it, but atm I can't think of anything better. Well, at least it works: x_ind=x&gt;0 x_ind = wextend('1','zpd',x_ind,1) find((x_ind(3:end)+x_ind(2:end-1)+x_ind(1:end-2)==2)==1)
Y is another constant, sorry
yes, They are the same dimension. And I couldn't figure it out with out the loop. But more importantly, since I really only want 1 of every 5 values, I think I need the loop eventually. 
Y is another constant, sorry. amplitudXY is cleared and this is the first allocation of it in the script.
It's easy to grab every fifth row. For instance: x = x(1:5:end,:); Using logical arrays you can actually do many tests to determine which values you wish to keep. These are very powerful and help in Matlab development greatly. 
This is not typical behaviour from Matlab, as you are probably aware. Perhaps Matlab Answers is a better place to ask this question, as you don't seem to have received any responses here. Good luck.
Thank you Maharishi_Lung I will try that.
My PhD has been almost all matlab and the only thing I really did was use it and figure it out. These sites: * http://undocumentedmatlab.com/ * http://blogs.mathworks.com/loren/ * http://abandonmatlab.wordpress.com/ gave me a few tips and tricks from browsing through. But most of what I learned was through getting stuck and searching google and the docs for an answer.
Were you given any resources/exercises to do to get a feel for the sorts of things Matlab can do/ just to get some practice?
Nicely done! That is much nicer than the Matlab standard. If I had any request, would there be a good way to handle non-matrix, multiple dataset input? I'm often faced with creating boxplots with multiple categories that have different lengths. It is completely awkward to pad some of the datasets with NaNs and create a matrix. Just a thought. Great though. I really like the addition of mu. 
Just my two cents so take it anyway you want... I figured out python and matlab (minimally, still getting used to it), by just having a project or issue in mind and scouring the internet looking for solutions. It seems like cheating, but every project/task you come up against teaches you something new that you reference later. So what I do now is just make up a project for myself, for instance...pull data from an astronomy database and try to plot something. It seems ridiculous at first but if you ask the right questions (to your browser) you'll start figuring it out. Good luck. It's fun AND it's a pain in the a**.
I did similar, but instead of a matrix, I made it a cell array of vectors, in case some experiments had a different number of trials. You might want to make this an option. Also, passing a cell array of labels would make it more convenient if they're not naturally numbers.
thats a good idea Mr. Smartypants! I will think about implementing it
I like it because it highlights the limitations of matlab and points out things you either can't do, or can't do well. When you are first formulating an approach to solving a problem, knowing what not to do is (IMHO) more important than knowing what to. As far as I have found, there only other way to get that knowledge is trial and error and talking with mathworks engineers.
Hey there! This is slightly off topic but I'm interested in the Lyapunov equation but I'm not exactly sure what it means. I'm doing stochastic state space modeling where I need initial estimates for all those parameters. What does the Lyapunov equation represent? What does the solution to the Lyapunov equation represent? Something regarding stability in time for the states?
More readable rewriting (nobody likes L as a variable...!) function [output] = dwt2(input) % input is 2D for j=1:size(input,1) input(:,j) = dwt(input(:,j)); end for i=1:size(input,2) input(i,:) = dwt(input(i,:)); end output = input; end So a few things: * In the first loop you are doing "replace every column with dwt(that_column)" in the second you are doing "replace every row with dwt(that_row)" - are you trying to do that (ie apply the function twice in different ways?) * Can dwt() work on a matrix? It looks like you're applying it to vectors (rows and column). If you can, then it's easy, it's just: # function out=dwt2(in) out=dwt(in); end Can you show the dwt code? That's the part which you need to optimise I suspect. Also if you need to do something to every element the following is pretty compact: output = zeros(size(input)); for i = 1:numel(input) output(i)=FUNCTION(input(i)); end
Profiled. idwt2 and dwt2 are eating up the most time, like I thought.
Have a play with the following -it should do all of the rows in 1 go, but I've not got a copy of MATLAB to test in; should be close though and your dwt2 will be dwt_mat(dwt_mat(x)')' or something. function y = dwt_mat(x) assert(mod(size(x,1),2)=0,'Odd nunmber of rows') y = (x(1:2:end,:) + [x(1:2:end/2,:) -fliplr(x(end:-2:end/2,:))])/sqrt(2) end
Had some time to check if code I posted actually works. It's faulty. That one shoulld always work: X_ind=[0 X&gt;0 0]; X_p=(X_ind(2:end)-X_ind(1:end-1).*X_ind(2:end))~=0; X_n=(X_ind(1:end-1)-X_ind(2:end).*X_ind(1:end-1))~=0; X_p=[0 X_p]; X_n=[X_n 0]; X_out=X_n+X_p; X_out=X_out(2:end-1)&gt;0; find(X_out==1) clear X_ind X_p X_n
I'd also recommend looking at SOSTOOLS, a MATLAB toolbox for sum of squares optimization. If I recall correctly, it can do some neat stuff like finding Lyapunov functions for you for some systems.
http://stackoverflow.com/questions/5301419/how-do-i-read-a-delimited-file-with-strings-numbers-with-octave
what exactly are you attempting to do? Are you trying to design the firmware for the micro in simulink and compile that into firmware? or are you trying to build firmware for the dev board that has serial communication that you can interact with in simulink?
when is it faulty, I've checked it with different cases and it checks out.
The latter. Is that possible? I'm trying to test the control of a system. EDIT: Wait a minute... We can write the code in MATLAB then compile the code in the kit? I wanna know more about that! 
The latter option is very possible. The first option is the questionable one. Building a serial interface isn't that difficult. The launchpad routes the si through the USB giving you virtual com port access. Here is a [good discussion on it](http://fortytwoandnow.blogspot.com/2012/10/c2000-piccolo-serial-communications.html) The rest of the firmware really depends on the application and I couldn't even speculate about what it needs to do. The basic method will be to develop firmware that listens for specific commands, processes them and possibly replies. For instance you could have a command that requests a value of a GPIO pin, the MCU would read the value and reply. Or maybe the MCU is generating a PWM output, and you want to change the duty cycle. You could have a command to set new parameters that affect that. Once this is established on the MCU side, then just write the matlab code to use that set of commands to interact with the device.
 x=[1] x=[1 -1 1] x=[1 1 -1 1 -1 1 1] etc. basically every case when some positive number is alone + some more.
Thanks for the link, that was exactly what I was looking for. :) &gt; The basic method will be to develop firmware that listens for specific commands, processes them and possibly replies. That was my first thought. My idea is to control the model of a DC motor (for simplicity) using space-state control. It would read velocity and return the comand signal to the model of the converter. I've never worked with MCUs before, just had the basics in some university courses, so I may be going too far. Thank you very much for your help! If you'd like, i'll send the code once it's done. 
Well it sounds like you want to develop the actual motor control firmware in matlab and compile it for the MCU. That's a touch different. [This might help you out](http://www.mathworks.com/hardware-support/ti-piccolo.html)
Actually I wanted to write the firmware by myself, but that'll help :)
You can set the renderer to whatever you'd like. For 3D plots and anti-aliasing, or anything involving animations, you're going to want to use opengl. If you call a plot with the 'linesmooth' property matlab will usually automatically pick openGL, for example: x=linspace(0,2*pi,1000); figure; plot(x,sin(x),'linesmooth','on'); grid on; get(gcf,'renderer') Will generate the following: ans = OpenGL The documentation discusses the three basic types of renderers: * painters — The original rendering method used by MATLAB is faster when the figure contains only simple or small graphics objects. * zbuffer — MATLAB draws graphics objects faster and more accurately because it colors objects on a per-pixel basis and MATLAB renders only those pixels that are visible in the scene (thus eliminating front-to-back sorting errors). Note that this method can consume a lot of system memory if MATLAB is displaying a complex scene. * OpenGL — OpenGL is a renderer that is available on many computer systems. This renderer is generally faster than painters or zbuffer and in some cases enables MATLAB to access graphics hardware that is available on some systems. You can read more here: http://www.mathworks.com/help/matlab/ref/figure_props.html#RendererMode
Check out Matlab's Pearson System, which includes the pearsrnd() function. This should do exactly what you want--it generates random numbers using specified mean, standard deviation, skew, and kurtosis. http://www.mathworks.com/help/stats/pearsrnd.html
This may be helpful for you: http://www.mathworks.com/matlabcentral/fileexchange/8597
Thanks, but for some reason it is just plotting &gt; &gt;figure(3) &gt; &gt;t=-10:0.01:10; &gt; &gt;x_1=sin(t); &gt; &gt;y_1=cos(t); &gt; &gt;z_1=t; &gt; &gt;clinep(x_1, y_1, z_1) &gt; &gt;view(-50, 30) as green (no color)
ah right I see, thanks a bunch!
To my understanding, if there exists a symmetric matrix L such that A*L+L*A'+B*B'=0 then the linear system x\dot=Ax+Bu is asymptotically stable (I am a bit confused over this as well). Also, I found the following MATLAB code (YAY): function x=lyap2(A,C) n=size(C,1); A0=kron(A,eye(n))+kron(eye(n),A); c=C(:); x0=-inv(A0)*c; x=reshape(x0,n,n);
There might be something in the image processing toolbox that you can use, if you have that. If not, there's an algorithm called SIFT that will help accomplish this. It's available here: http://www.vlfeat.org/~vedaldi/code/sift.html
This is essentially an [image registration](http://en.wikipedia.org/wiki/Image_registration) problem, and is not trivial to solve. The Computer Vision Toolbox probably has some useful tools. As /u/forever_erratic said - the rotation complicates things. Things can be further complicated by changes in scale and/or skew. 
Have you tried xpcsliface?
No I haven't, what is sliface?
I typed it in wrong. Fixed now. It will create a new model with input/output blocks to communicate to a separate model will specially tagged elements running in external mode. See: http://www.kxcad.net/cae_MATLAB/toolbox/xpc/ug/f4-19341.html for a description of how it works. It's fairly complicated to figure out, but I think it's the answer to your problem. I'm happy to help if you have any specific questions about it.
What do you mean? I'm guessing I set up a cyclic buffer, and then just have a triggered subsystem afterwards? The problems seem to be that the trigger system holds its last output until next - this is highly problematic, I only want specific outputs. And not a bunch of them!
Depending on what you have available, xpcsliface may not be available to you (xPC Target). You can try communicating between models via UDP blocks: http://www.mathworks.com/help/instrument/udpreceive.html They are available in a number of blocksets. This should allow you to send/receive data fairly easily between models.
&gt;I have a problem where I want to take parts of the signal (from the trigger and N points ahead). You weren't really clear what you meant by "take" the parts of the signal. I thought you meant sample-and-hold, which is exactly what the triggered subsystem does. What would you like the output of the triggered subsystem to be when its not triggered?
I found out how to do it now - I use a cyclic buffer, and then the next part of the code, I trigger on the times where I know the content of the buffer is the wanted! But thanks for your help and time! Sorry about unclear explanations - not used to coding that much!
 x = sin(0:.1:100); What is the frequency of that wave in Hz? There is no answer, because I never told you the units on the time base. I could tell you the frequency in terms of the number of samples (1/63 cycles per sample), but unless you know the sample spacing, you can't relate it back to a time based frequency. If my sample rate was 1 Hz (each element of the array recorded 1s apart, then my sine wave has frequency .0159Hz. If my sample rate is 1kHz, then the wave has a frequency of 16Hz. If you are defining your cutoff frequencies in real Hz, then you have to have this parameter set to properly scale the filter. You can leave it in 'relative' terms by not supplying a sampling rate, but you will need to adjust your cutoff frequencies accordingly. 
His original solution is still faster, though (on my MATLAB 2012b). For 100 million datapoints without any stale data, it is 1.8 vs 2.4 seconds. If there are only stale datapoints (e.g. a constant array), it is 3.3 vs 31 s. The Matlab JIT really has become quite nice, I guess.
Could you please post a link?
Look into Hu moments. Typically in this situation you would correlate the smaller window against the larger image...a peak in the correlation would represent the match. Since you need rotational invariance, you need to use a different metric than the raw color space... like the Hu moments. These are image moments that are scale and rotationally invariant. So you could write a manual correlation algorithm that seeks across the large image, looking at a single 'window' (the same size as the small image) at a time. Compute the moments for the window, correlate with the moments of the small image, then shift the window. ... wash rinse repeat, look for the peak That is sort of a brute force method, and will likely be pretty expensive, but it should work. 
expensive as in time and hardware? 
computationally. As in it could take a long ass time to run.
I think it beats my method of rotating the picture 359 times and trying to find the other picture in it. I was going to use a brute force algorithm that I had written to find a string withing a larger string and adjust it for matrices 
I guess I am not too surprised. I recently spent 3 hours meticulously vectorizing a function. My head hurt by the end from all the careful concentration of what was going on where, and how the vectors and indices aligned. I eventually got a really nice, elegant solution. I test it with tic and toc and they show the same execution time. Ok, so I then put it in t a for loop and make it repeat the calculation 1e4 times. Sure enough, the non-vectorized was faster! such is life. I still had fun with the puzzle of vectorizing, both for this question and my code (but I am sure my PhD advisor would have preferred my time was spent elsewhere)
Another take: isstale=A(1:end-2)==A(2:end-1) &amp; A(2:end-1)==A(3:end) You may want to shift this one way or the other and pad the beginning and end (since they are always going to be zero if you look at least 2 around). For a 1e7 constant array (My version is old and cannot do 1e8), it is still slower. The original is 0.301114 sec, my first one is 2.163922 sec and the new vectorized version is 0.445796 sec. I guess still not better, but closer! Okay, back to my own work now... **EDIT:** To make the indices line up do isstale=[0 0 A(1:end-2)==A(2:end-1) &amp; A(2:end-1)==A(3:end)]
Happens to me all the time as well. But I guess I've come to the point where seeing a loop in Matlab gives me a headache... ;) 
Yeah, It still amazes me that my [second take](http://www.reddit.com/r/matlab/comments/1i2w3p/trying_to_find_sequentially_repeating_data_in_a/cb0mu43) isn't faster. Especially since the argument of this 'if' is a logical, we should be able to vectorize the whole thing. I can easily accept that my first pass was slower but the fact that the second one doesn't beat it is the kind of thing that really frustrates me! Also, I tested it with using A=randi(40,1,1e5); since that is likely to have at least a few stale entries without them all being stale. The for loop still wins! 
I would suggest re-plotting 3 times, for each of the 3 regions. I would set the parts that don't correspond to these regions as "NaN", so then they're plotted as "transparent" instead of having values of 0. I'm not sure about the colorbar part.... I'm sure you can work that out. :)
The interpreter is proprietary, so we don't know how it works. There's only 1 real type, which is a double. Everything else is secretly a double, including booleans and integers. Of course, it's been a while, but the general rule is that things are very loose and free in MATLAB. There's no type checking. There aren't really strings, just character vectors, which are really just integer vectors conveniently displayed as ASCII.
Maybe I misundersttod but, C = circle - circle2; Also colormap works in 0..1 range, so you should normalize image to that range.
I need the centre circle to be a different colour than the background though...
Your C looks good as far as the 2 circles with different values goes. However, you just need to adjust how you're displaying it. One option (easiest) is to just use imagesc(). This automatically scales the data to use the full extent of the default colormap (which is jet(64), I believe). imagesc(C) If you're intent on using image() or imshow(), you need to understand how indexed images and colormaps work. A colormap (as I see you built your own) contains some number of rows of R,G,B values in [0,1] which indicate the color applied to some value in C. row 1 is applied to all elements of value, row 2 is applied to all elements of value 2, etc. So first of all, you need to have 3 (or more) rows in your colormap. Also you need to add 1 to everything to get your indices aligned: mymap = [0 0 0; 0.5 0.5 0.5; 1 1 1]; imshow(C+1,mymap) colorbar You can also make a lazy gray colormap: mymap = gray(3);
Ah! Great. I had tried something like your mymap but I didn't know I had to add 1 to everything. I will try this out tomorrow when I get back to my computer with MATLAB on it. 
While there are much more elegant and complicated ways to do this, you can perform a brute force search using normxcorr2() from the image processing toolbox. Of course, as you stated in another comment, you'd have to repeat this for many rotations of your smaller image. I doubt you'd need 360 different rotations to get a pretty good match, though. % the image (should be available in any MATLAB) I = imread('cameraman.tif'); % the kernel (what we're looking for) k = I(36:80, 98:132); % apply normxcorr2 J = normxcorr2(k,I); figure imshow(I) figure imagesc(J) The read peak in the second image indicates the best match.
UDP bocks seem like their purpose is machine-machine interface. Can they be configured for use on different models on a single machine?
Eh... like, MATLAB functions that do so? Or what do you mean by "resources"?
Thanks for the reply! The logic sounds good, but I tried it out and plotting 'NaN' doesn't plot transparent, it plots the same color as whatever the minimum on the color scheme is. Is there a different way to plot transparent? Because if so this method would work.
That's strange. I use this method for my plots when I need to "remove" part of what's being plotted. Which plotting command are you using?
Maybe I shouldn't have been using the word 'plot'. The command is imagesc().
Yeah, that doesn't work. lol You can try [transparency in images](http://www.mathworks.com/company/newsletters/articles/image-overlay-using-transparency.html), if you need to. In this method, you have your image data, and then you modify the alpha (% transparency) of each pixel by supplying another matrix. That sounds like it's what you want. Keep this alpha in mind for the future - lots of Matlab constructs have the ability to be transparent. Another option would be to change the command to a countourf plot, but it sounds like you want the pixellation as it it.
Do you know your numerical theory? You might be lost because you don't know what all the parameters mean? They are for specific numerical algorithms for solving this kind of stuff. Work with the documentation at Mathworks a little bit more. It's a little bit daunting at first but the guide is essentially working through applications of each of the code. I would highly suggest writing out your scripts in pseudo code before you start to do anything else. Learn how to use matrix representation to represent your linear systems of ODEs if you don't already know how. That'll take you pretty far in writing your scripts. If you're passing MATLAB excel data, then your pseudo code for a script could looking something like: % Read in excel file with coeff odeSys1 = xlsread('file', -1); % Solve sys dydtSys1 = ode45(...); % Plot results plot(dydtSys1, ...) % Write out results to file xlsWrite(...); This is extremely generalized but if you can plan out linear blocks of code, then you'll have an easier time starting to at least think about your code. That's usually the hardest part. At this point just access the full docs online and try to modify bits of the examples as you go along. See if you can code a Lotka Volterra system and plot it. 
Yes this looks like what I was after, thank you! I'll give it a shot and let you know how it goes.
Please do. I can see using this technique for some of my data, as well.
Yeah diff is the way to do it. Something like: dA = diff(A); stale = dA(2:end) == 0 &amp; dA(1:end-1) == 0;
Unfortunately, it seems that you need to have the image stored as a .png file first, and then set the alpha value from there. I don't think it will work for making matlab pixel elements transparent. Thanks for the help though!
Sorry nevermind, I got my data to work with your code, it now splits everything up into 3 color schemes nicely. If I could ask one more thing, is there a way to incorporate the three colorbars beside the plot? Thanks again!
 A = []; for i=1:999 A = [A,i,0,i,0]; end
Yes. 
 &gt; A = []; &gt; for i=1:999 &gt; A = [A,i,0,i,0]; &gt; end Wait, I am a bit confused, why isn't it A = []; for i=1:999 A = [i,0,i,0]; end why is there an A in the first spot inside the for loop? is it because A keeps on growing every iteration?
Yes, with your loop at the end A = [999,0,999,0]
I see, so it is calling the vector A from the ith-1 step and adding the ith four components to it. Still though, isn't a for loop a matlab built in function? how deep can you go? technically speaking, even the "+" sign is a built in function, isn't it?
yea, and even indexing a variable calls subsref(), so .... 
Just to play devil's advocate, I would say "not using a built-in function" is analogous to doing it in c without #including anything. In this solution, the matrix concatenation ( A = [A,i,0,i,0]) is in fact calling the horzcat() function, so I would say it does not satisfy the given requirement. Edit: though without this or access to an allocator (e.g., zeros()), I'm not sure it can be done.
Matlab is a bit weird when it comes to that: &gt;&gt; which plus built-in (C:\Program Files (x86)\MATLAB\R2011b\toolbox\matlab\ops\@single\plus) % single method It's so you can overload it for different types. So say you make your own numeric type you can define your own methods.
a(1,999*4) = 0; %same as zeros(1,999*4) a(1:4:end) = 1:999; a(3:4:end) = 1:999;
Dang, this way is equally good and probably a bit easier to understand. C=zeros(1,999*4); C(1:4:end)=1:999; C(3:4:end)=1:999; Speed differences between your method and my method: Elapsed time is 31.891762 seconds. (mine) Elapsed time is 31.557686 seconds. (yours) That's doing it 1e6 times. 1e6. For time comparison doing the for loop this many times would take an estimated **2.4 hours**. Vectors FTW. 
Try chapter two of this [pdf](http://www.cs.rice.edu/~nakhleh/COMP572/Papers/matode.pdf‎)
Thanks for the reply :) yes, it is. Another weird thing is, MATLAB won't even start unless I get off my home wifi! It keeps "initializing" forever unless I get off the internet and then start it again...
Weird indeed! I would carefully check the task manager and cpu usages before starting Matlab both at home and at work.
Without more information, it is difficult to offer a complete solution. The task of finding the sub-vectors would look something like this, though (calling your first input vector A here): endIndices = [0 find(A(1:end-1) &gt; A(2:end))]; This gives you a vector where each value is the last index in one of your sub-vectors, with a 0 tacked on at the start. You could then loop through endIndices, at each iteration assigning the corresponding sub-vector to the matrix you are constructing. Something like: for i = 1:(numel(endIndices) - 1) n = endIndices(i + 1) - endIndices(i) + 1; M(i, 1:n) = A((endIndices(i) + 1):endIndices(i + 1)); end Where M is the matrix you are creating. It is not clear from your example how you would want to determine the number of leading zeros in each row of your output matrix, so my example just starts at the first column. You will want to preallocate M, starting with a matrix of zeros and filling in the values from your vector. Hope that helps. Note that I have not tested the code above, so take it with a grain of salt.
1. Identify indexes for start of new string 1. Calculate the total number of elements you'll have and create a vector of appropriate total size 1. It is probably possible to create a loop-free way to create a logical index which will allow output(IND_1) = input(IND_2), but it's going to be FAR easier to loop through each rising series and put them in the right place. Personally I'd do something like this: A; % your input changes = A(2:end)&lt;A(1:end-1); out = repmat(min(A):max(A),sum(changes),1); % create a matrix with lots of 1:n style rows such that you only need to overwrite the "bad" bits with 0s for i=1:numel(changes); out(i,1:A(i)-1) = 0; % add 0s to the start of the row out(i,A(i+1)+1:end) = 0; % add 0s to the end of the row end The loop logic may be a bit iffy but you should be able to make it work. It might need some thought about first/last loops through as special cases - I'm very much leaving that to you as it's 2am and I'm hot and tired ;) Personally I don't think you should ever need to do this - a better structure would probably be a 3 column matrix with start/step/end ([2,1,7;3,1,9;2,1,5] for your example - *much* neater to work with!) Or something like a cell array/structure if you have something jagged you need to keep in such a format.
Good luck.
I immediately thought the same thing as I've had similar problems to OP and it was most often caused by MATLAB accessing external files. To test it, just copy the files over from the network location to your computer's hard drive, update the MATLAB path and see how it performs. 
If I were writing this I'd probably have each of those objects assigned as different texture objects, you can then rotate each of those separately when you draw them using DrawTexture: http://docs.psychtoolbox.org/DrawTexture
Yea, at my school if the IT installs matlab, their installer automatically sets the env variable MATLABHOME to a path on the "h" drive, which is where your roving home dir is mounted in the labs. Without this mount point present, matlab shows the splash, waits a while then silently exits...no error or crash dump. Since windows buries env variables it took me days to figure this out. So make sure both your path and env variables have no references to network mounted shares.
Have you ever thought about using [ILNumerics](http://ilnumerics.net/) instead? ILNumerics is a math library for C#; its syntax is very similar to Matlab and Octave. It includes a wide range of 2d and 3d visualization features and allows you to create interactive .NET-applications easily. The Community Edition is free.
Switching to Python/Numpy/Scipy will fix your issue. Licensing issues with my university's MATLAB copy is what inspired my switch. It was quite worth it. 
Link doesn't work, but [this one](http://www.cs.rice.edu/~nakhleh/COMP572/Papers/matode.pdf) does - thanks!
Haven't, but I'll take a look at it, thanks!
It's still checking the license server. It's a bug. Do you have some toolboxes that are networked? If so remove that .lic file.
Thanks, I'll try that!
Okay, please don't kill me but...how can I check for this? -_- I know I am so new at this. Thanks for helping out!
Open "My Computer" and see if you have any network drives. They should have a special icon (looks like a drive with a pipe connected underneath it). If it's mapped to a drive letter, it will say which one next to it in parentheses. If you do, then just check your matlab path ("set path" in the options, or type 'path' on the command line) and see if any directories in your path exist on the network drive. 
i'd do something like ..... while done != 1 then in case 15 done = 1
I'm assuming you are using the 'menu' command? The way to do it would be to access the handles structure of the menu and change the callbacks. However, as far as I know, you can't do that as matlab pauses execution when the box is up. so... the best way to do it is to build your own menu either in guide or by making a new figure, adding ui primitives and attaching proper callbacks. 
I'm pretty sure 'primes' might be the command you're looking for... d=2; n=10; p = primes(n); index = diff(p)==d; p1=p(index); p2=p(find(index)+1) Then you could use 'reshape' to get them in any form factor you want. 
Dude stfu. MATLAB is a powerful computational language and far more intuitive than old school FORTRAN. Although you may not execute it directly for results, it's incredibly useful for data analysis. There's a reason why it's one of the primary tools for techies at famous financial firms.
I ended up setting an arbitrary value equal to the while loop. Then for case 15 I put clc then a break command. Then closed every thing off with end, close all, and clc. Works perfectly! Thanks for the response!
I tried almost what you said, and it worked. Thanks a lot!
Thanks. Do you know of a way where I could use a for loop to achieve what I want to do in this program? As you can tell I'm pretty new to MATLAB. 
Use true/false not ==1 / ~=1, but otherwise yes, this is how to do it.
If you're new to MATLAB, it's worth learning that you almost never use tight loops like you would in other languages. If you can vectorize the command, it will run much faster and have better looking code. For example, in C, C++, Java, etc. if you have two vectors "a" and "b" and want to elementwise add them and store the answer in "c" you might do something like: for (int i==0; i&lt;100; i++) { c[i] = a[i] + b[i]; } This is **not** how you want to do it in MATLAB. The following code is all you need: c = a .* b; That's it, and it is *much* faster than a for loop would be. I know it takes some getting used to coming from other languages, but it's really important to use that functionality and start getting comfortable with it if you want to be a proficient MATLAB programmer.
Just FYI, b=a(:); is faster than b=reshape(a,1,[]); It likely doesn’t matter but it is worth noting. 
Notice how its a primary tool for people for people who don't generally get a formal programming background. Python+numpy+scipy does a better job, with less effort, for free. C and Fortran are substantially faster, also free, and can do multi-cpu processing with no "licensing" costs.
Honestly, this is like arguing that a hammer is better than a screwdriver. They serve different purposes.
I've successfully transferred data between two models using the UDP blocks. Unfortunately, the UDP block isn't one that can be compiled on the microcontroller so it errors anyway. Thank you for the suggestion though, this is a step in the right direction
This is the best I could do. It still has an unvectorized outer loop, but it's very concise if a bit cryptic. list = [2 3 4 5 6 7 3 5 6 7 8 9 2 3 4 5 8]; nLoops = sum(diff(list) &lt; 0)+1; n = [1 cumsum(diff(list) &lt; 0)+1]; out = zeros(nLoops, 10); for i = 1:nLoops shortList = list(n==i); out(i,shortList) = shortList; end disp(out); Yes, I changed your input slightly to make sure it works with gaps.
That doesn't work for me. At least not for getting what OP wants. This should work E = [1:999;zeros(1,999)]; % two copies E = [E;E]; % then use reshape to unwrap that into a 1xN vector E = E(:); Also it appears to be a bit slower than the other ones pointed out below. Doing them 1e4 times: 1. Elapsed time is 0.653509 seconds. 2. Elapsed time is 0.400019 seconds. 3. Elapsed time is 2.021087 seconds. 4. Elapsed time is 3.354057 seconds. Where 1 is my method, 2 is /u/jdnuts, 3 is a corrected version of what you posted and 4 is with what jwink3101 posted.
I did a similar test with similar values but uncreated the array outside the loop. When I did that, reshape was slower. I'm on my phone now but when I get to work, I'll test this again
Yes, the outer product method you used should be faster.
Although compared to the for loop at 88 seconds they're all infinitely better.
For the following code: clear a=rand(400,10); N=1e6; tic for i=1:N;b=a(:);end toc tic for i=1:N;b=reshape(a,[],1);end toc I get: Elapsed time is 0.252630 seconds. Elapsed time is 1.304492 seconds. The reshape is slower with this array. 
Weird. I like how we're arguing over 1 second over 1,000,000 cycles where as compared to the for loop we're saving a few hours. Kids: Vectorize your code. 
Weird how when you get to 1e6 it actually takes longer.
Holy spaghetti paste batman! Ain't nobody got time fo' that... Pastebin is your friend.
What do you mean by reconstruct the input face or match it up correctly? What are you getting? Which outputs work and which don't?
Your lowpass cutoff must be less than half of your sampling frequency; for better results you want it to be higher, but let's pretend you have a 300Hz signal: Fs = 300; % sampling frequency lowpass = 100; % cutoff frequency [b,a] = butter(4,lowpass/(Fs/2),'low'); % apply zero phase lag filter (effectively doubles filter order) Y = filtfilt(b,a,X);
Thanks for helping. For starters, I'm relatively new to filtering, so everything is useful. However, in Simulink, I'm using the Low Pass Filter from the DSP toolbox, which has a handy GUI. Trying to translate this to my project. You are using a sampling frequency of 300, the same as your 300Hz signal. Translating this to my project, my Fs should be 100e6? The sampling frequency is one of the big things I'm caught up with. Should the Fs depend on the frequency I'm trying to filter out? Also, you said "for better results you want it higher". Are you referring to the sampling frequency or the cutoff? EDIT: Here is the GUI I'm referring to: [http://i.imgur.com/w1Z03G3.png](http://i.imgur.com/w1Z03G3.png)
Hi there-- So "Fs" is your sampling frequency. Since you said: &gt; points separated by 1ps (1*10^(-12)) this means that your sampling frequency is Fs=1^(12), so you are perfectly safe. Sampling frequency is how many data points you take per second. Thus here's what you'd do: Fs = 1e12; % sampling frequency lowpass = 100; % cutoff frequency [b,a] = butter(4,lowpass/(Fs/2),'low'); % apply zero phase lag filter (effectively doubles filter order) Y = filtfilt(b,a,X);
Hey, thanks again for the help! Would you suggest I try to make a custom block in Simulink with this code, or would there be a better solution? Also, one more tiny thing. The cutoff frequency, that should be 100e6 in my case, correct? Or does a lower cutoff just give me better performance? Thanks again for your help.
Thanks, I'll be reading a bit today ;)
I would set up a for-loop that looks at each pixel individually. In the body of the loop, include some code that compares the RGB-values to some threshold that you define. If the pixel has an average value of 128 or higher, then change every RGB-value in that pixel to 255 (the pixel becomes white.) Otherwise, if the pixel is dark enough (if the average value is 127 or less), then make every RGB-value 0 (the pixel becomes black.) You may have to play with the threshold value to make it print out EXACTLY the way it looks in your example.
It might be a bit more complex, but [radon transform](http://www-rohan.sdsu.edu/doc/matlab/toolbox/images/transf10.html) can be used to find lines. [Radon result](http://i.imgur.com/LdNneAp.png) after removing ball and rod (a(a&lt;30)=mean(a(:));).
With [local normalization](http://www.mathworks.com/matlabcentral/fileexchange/8303-local-normalization) the [result](http://i.imgur.com/uogmd5n.png). c=localnormalize(double(a),4,4); h = fspecial('average', 10); d=filter2(h, c); e=d&lt;-0.4;
THIS You have no idea how much this will save me. Thank you :) 
This could work. Thank you :) 
You don't need to pre-allocate when using a cell (ignoring the fact that your current pre-allocation is done incorrectly).
mean can take a 2d array and give you a 1d array of the mean of one of the dimensions. You can specify which dimension. To turn 300x2000 to 1x2000, replace the second loop with: intensity{frame}=mean(img); Use mean(img,2) if you want 300x1. This probably won't make things much faster since it is probably the reading of each frame individually that is making you go slowly, but try it out. The next thing I would do is to load the whole movie at once into a 4d RBG array and then convert and crop at once, but the number of frames you can load at once is limited by your RAM.
You can analyze the compressed binary, but I don't think it's possible to analyze the actual contents of a compressed archive without decompressing it...
You could use RANSAC for the line detection. [I've only done it in C++, but here's a Matlab example.](http://www.mathworks.com/matlabcentral/fileexchange/30809-ransac-algorithm-with-example-of-finding-homography) The ball and rod probably need a filter or some sort of edge detection like Canny. How much movement are you expecting in the scene?
You have two formatting specifiers so your fprintf is pulling two values out of your vector at a time. On that note, you are doing the same thing in the first fprintf but it isn't manifesting itself since you only supply a single item for it to use.
Nudge: doc cell Shove off cliff: [Cell arrays for fun and profit](http://www.mathworks.com/help/matlab/cell-arrays.html)
Thank you, I was sure it was something simple like that
Hi, sorry I kind of forgot to come back to this. The "cutoff frequency" sets frequencies above which you want to filter out. If you set the cutoff frequency to 100e6, that means that you want to filter out any aspects of the signal whose frequencies are higher than 100 million Hz. That's not what you're going for, since that will more or less leave the entire signal intact. You can look at how much power (in the frequency domain) of the original signal will remain by using the freqz() function as follows--let's assuming we're sampling at around 100kHz isntead, just to look at our filter properties, to make this a bit more manageable. Fs = 1e5; % sampling frequency lowpass = 100; % cutoff frequency [b,a] = butter(4,lowpass/(Fs/2),'low'); [h,w]=freqz(b,a,2^14); semilogx(w,10*log10(abs(h).^2),'linewidth',2); grid on; xlabel('pi radians per sample'); ylabel('power (dB)'); Note that this gives you the response in pi radians per sample. To put in terms of pi radians per second, we multiple the X axis by the sampling frequency (samples per second) to give pi radians per second, and then we can convert to Hz by further converting via dividing by 2\*pi (since there are 2*pi radians per Hz): Fs = 1e5; % sampling frequency lowpass = 100; % cutoff frequency [b,a] = butter(4,lowpass/(Fs/2),'low'); [h,w]=freqz(b,a,2^14); semilogx(w*Fs/(2*pi),10*log10(abs(h).^2),'linewidth',2); grid on; xlabel('pi radians per sample'); ylabel('power (dB)'); You can see the "knee bend" right at 100Hz--this tells us how our filter starts depleting the signal of power around 100Hz and as we get to higher frequencies. 
A cell array will do the job, but if you want to do it without cells, you could do it with multiple structure arrays. devices = struct( 'devices', [device1, device2,...,device6]); device1 = struct( 'channel1', [], 'channel2', [],..., 'channel16', []); ... device6 = struct( 'channel1', [], 'channel2', [],..., 'channel16', []);
You can probably remove the remaining noise in the background by excluding connected components from the image based on major axis length as calculable by the regionprops function. 
Could? Yes. Should. No, absolutely not. Splitting it into multiple structs is no different than his current attempts to use matrices. I'd even put forth the argument it is even more cumbersome due to the added difficulty in looping and indexing. Use the tool designed for the job, that is why it is there.
Maybe overkill for this problem, but I do love me some Radon transformations!
A tiny bit more testing should answer your question about (2:3):2:10 vs 2:2:10. You've gone this far with it, don't stop short. As for the second question you will have to define 'multiple numbers' a bit more clearly and precisely.
You can do whatever you want to the compressed file. It's going to be worthless though since you probably care more about the underlying data than the useless garble of the compressed version. There are numerous strategies for dealing with large datasets. Sadly that's the best answer I can give since 'way way huger' is far from a well defined metric for the size of your data and 'analyze through MATLAB' is not an algorithm I am familiar with using.
decompressed files are on the order of 80-150GB each. At that size, I don't even have the hardware to store them. compressed they are 2-6GB. edit* i suppose thats not entirely true. If I unpack them and then analyze them one at a time, i suppose i do have the capacity to handle the decompressed files.
I agree with you, but I remember someone (I think my numerical analysis prof from undergrad) telling me to avoid using cells whenever possible. I can't remember exactly why though. Have you heard this too?
as far as 'analyze through matlab' since, with the tools i have, its hard for me to unpack the files to see whats in them, its also hard for me to describe how i am going to analyze them. i should know more about that in a few days, though.
 &gt;&gt; PI Undefined function or variable 'PI'. &gt;&gt; pi ans = 3.14159265358979
Given the absurd size of the data files, I'm going to assume it doesn't all have to be in memory at once. There are plenty of options for parsing through a file in small chunks using MATLAB. There are also numerous outside of MATLAB options to explore (SciPy/NumPy, some SQL mojo, R, et al).
thank you. i will check out matlab and file parsing. my suspicion is that im going to have to take relevant parts of the data from some of the files, put that into another file, then work through that. i appreciate your help.
You might give [ILNumerics](http://ilnumerics.net) a try: It's a Math Library for C#/.NET with a syntax quite similar to Matlab.
You can try to profile to see where the bottleneck is: profile on this_function profile viewer and when you're done just profile off Also, to compute the mean I think you should probably just do: intensity{frame} = mean(img); If you call it like this, mean will automatically calculate the mean of each column and store it a row vector.
Using cells is certainly slower than using regular numeric matrices, if the data you're working with fits into a regular numeric matrix. That's because a regular numeric matrix is just a big chunk of memory that low-level mathematical operations can be optimized to run really fast on. A cell matrix is basically a list of pointers to such chunks of memory, but you can't do math across different entries in the cell matrix nearly as fast as you can do it within a single entry. So if you have 5 sessions of data recorded from 20 sources for 1000 timepoints each, it will generally be much faster to work with it as a 5x20x1000 matrix of doubles than as a 1x5 cell matrix where each entry in the cell matrix is a 20x1000 matrix. Or worse yet, a 5x20 cell matrix of 1x1000 double arrays. Not to mention that using regular numeric matrices as much as possible will generally be much more Matlabic (in the same sense that good Python code is "Pythonic"). The 'for' loop is your enemy for any kind of intensive computation in Matlab, and using matrix operations will help you avoid 'for' looping over your data and speed things up considerably. And you can only perform those arithmetical matrix operations on regular numeric matrices, not cells. Of course, if your data sizes are irregular, there's nothing wrong with using cells -- not much else you can do. If your data chunks are *close* in size, you can always do things like use a regular numeric matrix and fill in the gaps with NaNs... sometimes it's messier/less efficient to use cells and sometimes to deal with NaNs, just depends. But generally when you do big, expensive calculations, it's on your regularly-sized data and not on a bunch of irregularly sized smaller chunks anyway. TL;DR For maximum speed/elegance, use regular numeric arrays whenever you can; cells are there for when you can't due to irregular data sizes, but there's nothing wrong with using them in those cases. EDIT: Adding on -- as a really stupid, oversimplified example I like to give why this is -- imagine you, the human, have a 2-dimensional grid of integers (say, 10 rows by 10 columns) in front of you written on a single sheet of paper. If someone asks you to sum up the entries in each column by hand, that's not too hard to do. But if instead, each row of numbers is written on a separate sheet of paper, and you still have to sum up by column -- you can see how that would be a lot slower, with all the shuffling around of papers you'd have to do. In a super-simplified way, that's the difference between the efficiency of using a 10x10 numeric matrix in Matlab and using a 1x10 cell array of 1x10 numeric arrays.
Hello, Maybe I can bother you again, as I am having difficulty using your code to do what I expect it to do. A 100MHz signal with DC offset, created at a sampling frequency of 1^12. t = 0:1e-12:1e-7; X = 3 + cos(1e8*2*pi*t); Fs = 1e12; % sampling frequency lowpass = 1e6; % cutoff frequency [b,a] = butter(4,lowpass/(Fs/2),'low'); % apply zero phase lag filter (effectively doubles filter order) Y = filtfilt(b,a,X); plot(Y) With this setup, I am still filtering down to zero, when I want to see a DC value of three. Any advice? And thanks again for this help, you've put a bunch of time into this thread already.
I am not sure what you want this to do? Or, is there supposed to be a 5 and 7? Are you looping to combine (2:2:10) and (2:2:10)? what you want is very unclear
Bro, the easiest solution since you know the signal sizes. Giant 2D array(vector in matlab) d1_ch1,d1_ch2,...,d1_ch16,d2_ch2,d1_ch2,...,d2_ch16, etc matlab can/will fill in any blank data points with NaN you can remove this later at your lesuire depending on what you want to do with the data A = [1,2;NaN,2]; x = A(1,:); % removes NaNs auto magically x(x==NaN)=[] % remove all NaNs if needed 
Well I can't use a 2D array because each channel of each device may have multiple data readings over the data collecting period. I have no idea how many data points there will be because sometimes the serial data skips over a channel, which is fine for my project, but that means I have no way of predicting how many total data points each channel with have.
why would the structure I suggested not work then? device1_chanel1 ..., device2_chanel1, ... data point 1,... ,data point 1 data point 2,... ,data point 2 data point 3,... ,NaN data point 4,... ,NaN data point 5,... ,NaN no need to know how many data points are in each channel when you import it into matlab, it will fill in missing values with NaN
Hmmm, I'll try it out and see how it works, thanks!
This is exactly how cell arrays work and your code works perfectly for me. What errors are you getting?
I'm currently running R2012b and yes all my source files are separate.
Can you be a little more specific please? I copy/pasted your code into matlab and it worked just fine. Are you trying to generate the date strings on the fly or something? The cell array assignment should work though.
I think we might be running into precision errors here, although it's hard to say. Let's stretch our time a little bit by a factor of one million--so we have a 10MHz signal that stretches for 0.1s with a 100Hz sine wave: t = 0:1e-6:1e-1; X = 3 + cos(1e2*2*pi*t); Fs = 1e6; % sampling frequency lowpass = 1e2/3; % cutoff frequency [b,a] = butter(2,lowpass/(Fs/2),'low'); % apply zero phase lag filter (effectively doubles filter order) Y = filtfilt(b,a,X); plot(t,Y); You can still see that you're getting edge effects, which might be avoided a bit if you want to pad your data.
Totally worked, thanks!
Ok, there are a few small things you can do to increase the speed: 1. It's faster to use new variables for objects that have different sizes than to reassign a variable to the same name. Fore example, this will produce faster results: img = read(video,frame); img2 = imcrop(img,rect); img3 = rgb2gray(img); 2. Use mean() with the direction argument: intensity{i} = mean(img3,1); Aside from those changes, there isn't much you can do. However, these changes will only marginally help; most likely you're being bottlenecked by the speed of your hard drive, which has to read the video file, and doing small optimizations otherwise won't help too much.
what could be wrong with my permutation of the children???
As with everything else, I am a bit confused as to what you want to do. Is it something as follows? (note, I use a for loop. You can probably avoid it but this is just easier for this) year=[2013 2013 2013 2013 2013]; month=[1 3 4 5 9]; day=[27 5 24 7 10]; for i=1:length(day) date{i}=sprintf('%4i-%02i-%02i',year(i),month(i),day(i)); end 
Browse through [this answer from MATLAB central](http://www.mathworks.com/matlabcentral/newsreader/view_thread/29067) Specifically from message 4 and onward. There are a few other similar issues that crop up in Google, but they all boil down to that same situation. Namely there are a certain number of handles present but you are acting on too few or to many and MATLAB gets cranky. [A second source](http://undocumentedmatlab.com/blog/figure-toolbar-components/) covers a similar problem when mucking with GUI elements. It stems from some handles being hidden and causing the above too few/too many situation. Edit: Fixed links.
Answer to your problem: Your main for loop is creating cellArray, then filling it with the second for loop. On the next iteration this happens again and obliterates everything the previous loop iteration did. When all is said and done you are left with whatever happened in the last loop iteration to run. Advice: doc struct2cell This will probably save you a ton of headache, but to be honest I'm not interested in deciphering that wall of evals to figure out WTF is going on and what the end result should be. Advice 2: Don't use the same variable as an index to a nested loop. Some languages let you get away with it, but it is a terrible terrible habit. It makes code harder to read and can lead to some nasty hard to detect unintended behavior.
yea the eval stuff is a bit obscure. Basically the .xyz files I'm loading are all named something along the lines of 25-05-13AM. the evals are pulling the '25' and 'AM' to use when naming the new variables 'x', 'y', 'z' and others. I appreciate the quick response and advice. I've only been using matlab for a few weeks now so I need all the bad habits beaten out of me. I'll keep plugging away.
Do you have a set of initial conditions as well?
Thank you very much kind sir, I believe you are right. size(get(handles.axes1,'children')) was twice what it should be. But without any changes, successive runs are working fine. I'm pretty confused, I clear everything at the beginning, I hold on and off of handles.axes1 every time I change a value (I change the visibility of the plots using checkboxes)
It appears what happened was that I assumed cla(handles.axes2,'reset') would clean out the handles associated with that graph, when a new file was entered into the program too many children were populating that graph.
Sounds like you will need a DAE solver like ode15s. Will think about it some more. 
Check out the function [setfield](http://www.mathworks.com/help/matlab/ref/setfield.html). It shows you how you can build the structure quickly and how you can dynamically reference fields using the (string) syntax. s = struct; fieldnames = {['scan' fname], 'x'}; s = setfield(s, fieldnames{:}, data(:,1)); Is equivalent to: s.(['scan' fname]).x = data(:,1);
Then adding additional rigid constraints like this will overdetermine the system. Some time integrators (not sure about ode45, but ode15s does it) provide a means of restricting the solutions to be positive - but this is different from a rigid algebraic constraint like you are giving. (And serves only as a guide to size the time step, not as an actual constraint). For the system you are describing one of the following things is necessary to make it solvable: * Some of the dx(n)/dt terms do NOT exist. Then you can use a mass matrix to enforce the algebraic constraints INSTEAD of the dx(n)/dt terms. (As /u/dispatch134711 indicated, you'd need to use a DAE solver instead, like ode15s). * Other unknowns are present (other than x(1)...x(6)), one per constraint. edit: Note, this has nothing to do with MATLAB - an ODE system is simply overdetermined if, besides a set of ICs and a full dx/dt vector it also has other constraints.
This is an excellent point, but lets say the initial conditions also satisfied x(1)+x(2)+x(3)=1 and x(4)+x(5)+x(6)=1, (forget about the other two) would it still be overdetermined?
Of course.
of course it would be overdetermined? 
You should look up the profiler and tic, toc. Rather than using disp() to try and measure performance.
I did try using the profiler first however it said "Note that built-in functions do not appear in profiler reports" tic, toc however I'm not sure about =) Thanks for the advice =)
The crosshairs will rotate to pi/8 (mod pi/4) in our tests. The ball and rod will remain almost completely stationary. What I was planning on doing is converting the image into black&amp;white with a very small threshold, enlarging it by using bwmorph(~bw,'dilate',num), and then adding it to the image to make it white
Yeah I was converting it to a binary image from here. Then I eroded the image to break apart some of the noise and then used bwareaopen(im,1000); to remove anything under a 1000pixel^2 area. I found the lines would be around 2200-2400 so this seems like a safe method. 
I'm about 90% sure that sind works by multiplying its input by pi/180 and calling sin. The sin function should be just a hardware call (which is implemented as a lookup table) and thus unbelievably fast.
Indeed. Though it is still interesting to know that sin is faster than sind. It could help people who want to make more efficient programs. I.e. they should learn how to use radians.
Actually it's even worse than that: &gt;&gt; x = randn(10000, 1); &gt;&gt; tic; a = sin(x*pi/180); toc; Elapsed time is 0.000151 seconds. &gt;&gt; tic; b = sind(x); toc; Elapsed time is 0.000478 seconds. I'm not sure what sind is doing, but it's much slower than even converting to radians yourself.
Is it still a lookup table methodology? I thought it was via pade coefficients that are hard-coded (in...hardware) and then the trig functions were computed that way? I'm digging deep from my numerical sequence now. 
So it is... =S Hmm... I wonder what it is doing... perhaps it has additional checks? - Or it's just a bug which has been overlooked.
I think: What you're actually solving here is a differential algebraic equation (DAE) which is a bit more challenging. ode15s will be your integrator of choice. Time to dig deep into the ode15s documentation, or, my favorite ODE book...[Computer methods for ODEs and DAEs](http://www.ec-securehost.com/SIAM/ot61.html)!
I've noticed the localnormalize uses the statistics toolbox when it uses the norminv function. Is there any way to work around that do you think? 
That is a constant for you. norminv(epsilon/2,0,sigma) = -6.5794
clc;clear % these points form a square when plotted sqx=[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 2.2 2.2 2.3 2.3 2.3 2.3 2.3 2.3 2.6 2.8 3.2 3.3 3.6 3.5 3.4 3.8 3.9 3.9 3.5 3 2.8 2.8 3.1 3.5 3.6 3.5 3.4 3.6 4 4 2.1 2.2 2.5 2.6 2.7 2.8 2.9 3.4 2.5 2.8]; sqy=[2 4 4 2.2 2.3 2.5 2.6 2.4 2.1 2.9 3.4 3.5 3.6 2.8 2.4 2.6 3.8 3.9 2.1 2.5 2.9 3.5 3.4 3.6 3.5 3.8 3.7 3.9 3.9 4 3.4 3.6 2.5 2.8 2.1 2.2 2.7 2.8 2.9 2.3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]; %rectangle recx=[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 2.1 2.2 2.4 2.5 2.6 2.8 2.7 2.9 2.9 2.8 3.1 3.3 3.5 3.4 3.6 3.7 3.9 3.8 3.8 3.9 2 2.1 2.2 2.3 2.6 2.5 2.8 2.7 2.8 2.9 3.3 3.1 3.2 3.5 3.4 3.4 3.6 3.6 3.9 3.8]; recy=[2.1 2.2 2.5 2.8 2.9 2.9 3.1 3.4 3.5 3.9 4.1 4.2 4.4 4.5 4.9 4.8 5.3 5.4 5.7 5.9 2.2 2.2 2.4 2.6 2.5 2.8 2.9 3.3 3.5 3.9 3.8 4.1 4.5 4.6 4.9 5.1 5.3 5.6 5.9 5.8 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6]; %calculates the rotation. sq=[sqx;sqy]; th=(10*pi)./180; sqrot =[cos(th) sin(th);-sin(th) cos(th)]*[sqx;sqy]; figure(1);clf; scatter(sqx,sqy); axis([1 7 1 7]); rotate3d on figure(2);clf; scatter(recx,recy); axis([1 7 1 7]) figure(3);clf; scatter(sqrot(1,:),sqrot(2,:)); axis([1 7 1 7]) 
Sorry, yes. Yes, it would be overdetermined. Basically, here is the deal: A system of ODEs is well-determined if (not iff, but if): * There are N ODEs. * Each ODE is an expression that defines a dx(i)/dt in terms of t and x(1)...x(N). * There are initial conditions for each element of vector x. That's all it needs. Any additional specifications overdetermine it. Enforcing that certain algebraic expressions that the initial condition/initial derivative vector(s) satisfy overdetermines the system. Here is a really, really simple example that illustrates it: dX_1/dt = 1*X_1 dX_2/dt = 2*X_2 X0 = [1/2;1/2] Solution is obviously, by separation of variables: X = 1/2*[exp(t); exp(2*t)] Now note: the ICs satisfy X_1 + X_2 = 1, and infinitely many other algebraic relationships. The solution does not. A solution that would also satisfy this algebraic relationship simply does not exist, so you won't be able to find it. Because it is an overdetermined system.
Cheers, my first time copying matlab, didn't realise it changed the formatting so much 
Thank you
Yeah, the asterisk gets turned into a formatting character. You can either use the 'code' format (4 spaces in front of each line) or use another website, like [pastebin](http://pastebin.com/). I've formatted your code for you. clc;clear % these points form a square when plotted sqx=[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 2.2 2.2 2.3 2.3 2.3 2.3 2.3 2.3 2.6 2.8 3.2 3.3 3.6 3.5 3.4 3.8 3.9 3.9 3.5 3 2.8 2.8 3.1 3.5 3.6 3.5 3.4 3.6 4 4 2.1 2.2 2.5 2.6 2.7 2.8 2.9 3.4 2.5 2.8]; sqy=[2 4 4 2.2 2.3 2.5 2.6 2.4 2.1 2.9 3.4 3.5 3.6 2.8 2.4 2.6 3.8 3.9 2.1 2.5 2.9 3.5 3.4 3.6 3.5 3.8 3.7 3.9 3.9 4 3.4 3.6 2.5 2.8 2.1 2.2 2.7 2.8 2.9 2.3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]; %rectangle recx=[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 2.1 2.2 2.4 2.5 2.6 2.8 2.7 2.9 2.9 2.8 3.1 3.3 3.5 3.4 3.6 3.7 3.9 3.8 3.8 3.9 2 2.1 2.2 2.3 2.6 2.5 2.8 2.7 2.8 2.9 3.3 3.1 3.2 3.5 3.4 3.4 3.6 3.6 3.9 3.8]; recy=[2.1 2.2 2.5 2.8 2.9 2.9 3.1 3.4 3.5 3.9 4.1 4.2 4.4 4.5 4.9 4.8 5.3 5.4 5.7 5.9 2.2 2.2 2.4 2.6 2.5 2.8 2.9 3.3 3.5 3.9 3.8 4.1 4.5 4.6 4.9 5.1 5.3 5.6 5.9 5.8 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6]; %calculates the rotation. sq=[sqx;sqy]; th=(10*pi)./180; sqrot =[cos(th) sin(th);-sin(th) cos(th)]*[sqx;sqy]; figure(1);clf; scatter(sqx,sqy); axis([1 7 1 7]); rotate3d on figure(2);clf; scatter(recx,recy); axis([1 7 1 7]) figure(3);clf; scatter(sqrot(1,:),sqrot(2,:)); axis([1 7 1 7])
Couldn't you just put the capture command in a for loop which stores the waveform in a cell. You could have it end when you reach the 10 minute mark using a simple counter or tic...toc which is summed up each iteration of the loop.
Since you know it's a rectangle, you can just find the most common angles between points, un-rotate it, and read off the measurements. test_rec = sqrot; % change this for the one to analyze % Mean subtract new_rec = test_rec-repmat(mean(test_rec,2),1,length(test_rec)); % Find all angles [Ax, Ay] = meshgrid(new_rec(1,:), new_rec(2,:)); th = atan2(Ay-Ay', Ax-Ax'); % Find the most common angle [a,b] = hist(mod(th(:)*4,2*pi),200); d_th = b(find(a==max(a), 1)) / 4; % Unrotate the shape rot = [cos(-d_th) sin(-d_th); -sin(-d_th) cos(-d_th)]; new_rec = rot * new_rec; figure(4);clf;scatter(new_rec(1,:),new_rec(2,:)); % Read out parameters dx = max(new_rec(1,:)) - min(new_rec(1,:)); dy = max(new_rec(2,:)) - min(new_rec(2,:)); if dx &gt; dy length = dx width = dy else length = dy width = dx end Give me length = 2.0043 width = 2.0041
I guess it makes sense that since it leads to that paper, it's what the function follows. Thank you for that. 
Hey thanks a lot! I'm away from my computer for another day but this looks good, will try it when I get back.
I've done some high speed video processing, so maybe I can help. In my opinion, when you're working with that many frames, it's cumbersome to use VideoReader. I would convert the video frames to a sequence of tiff or jpeg files, then process them sequentially. After they've been processed, then you can convert them back into a video file.
Thanks I will look into that. I actually only need the frames anyway so maybe this is a better approach. 
Centroid gives you the weighted center coordinates of a specified binary region. A blob will give you a different center than an ellipse. For example, the 'C' shape below will give you a coordinate that is left of the center. a = 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 1 1 &gt;&gt; regionprops(a) ans = Area: 15 Centroid: [2.8667 3] BoundingBox: [0.5000 0.5000 5 5] 
Think about it like this -- if you start with an empty 3x4 matrix A, you can define any element with a statement A(i,j)=n where i is the row number, j is the column number, and n is the value to be assigned. Now what if i and j were each the iterators of a loop?
Not quite, i is the row number, not the number of rows (which is fixed at 3 in your example). So your loops run over i=1:3 and j=1:4.
I tried, i=1:3 j=1:4 for k=1:i for h=1:j n=(i+j)/sqrt(j) A(i,j)=n end end But I am getting "Error using + Matrix dimensions must agree. Error in HW7_ENG187 (line 13) n=(i+j)/sqrt(j)" I think the program thinks I am trying to make a matrix with 3 elements in one row and 4 elements in another. Any idea what could be causing this breakdown of communication?
Try using this as a skeleton to help you understand a bit better: X=zeros(3,4); for i = 1:3 for j = 1:4 X(i,j) = 3*i+6*j; end end what does that do?
Awesome, a thousand thank yous to both of you.
The dimension will go up to millions by millions, eventually. Which is why I'd like to just isolate the nonzero elements. What do you mean by crossproduct? The matrix times its transpose?
&gt;What do you mean by crossproduct? The matrix times its transpose? Yes. &gt;The dimension will go up to millions by millions, eventually. OK. Is that for _both_ dimensions. As in the rows _and_ the columns are both millions and millions? If one side is much smaller just do one of the following: Z=X'X; or Z=XX'; and eigen(Z) or eigen(X'X) or eigen(XX'). It's just a simple matrix multiplication to get the other side. You can even still use svds() and specify, say, 10 dimensions (or whatever you want) with the smallest crossproduct matrix you can create. Then it's just a few tricks and you get the other dimension back, et voila. 
Yeah, the rows and columns will both be in the millions. Thanks for the tip though.
http://en.wikipedia.org/wiki/Lanczos_algorithm (if A is symmetric) http://en.wikipedia.org/wiki/Arnoldi_iteration (if A is not symmetric)
Thanks. Do you know if any built-in MATLAB functions use these?
I don't know for sure, but I doubt it very much (edit: it does!). It's not too complicated to implement, though. The only drawback is I don't know how you could get the *biggest* eigenvalue/vector with those algorithms. I bet someone else has done that research though. Or maybe for your application, you can just get a bunch of them and use the biggest in that subset.
It turns out that's what MATLAB is using. I did some peeking: inside SVDS is a call to EIGS inside EIGS is a call to ARPACK, which is a library to do Arnoldi/Lanczos iteration!
I did eventually. I didn't know that it takes so long for question to show up in that subreddit. &gt;As for the second question you will have to define 'multiple numbers' a bit more clearly and precisely. This: http://en.wikipedia.org/wiki/Multiple_%28mathematics%29 And that is the code answering my question: N = 100; C = arrayfun(@(x)x+x:x:N, 2:N, 'UniformOutput', false); unique([C{:}])
Can you provide an example call of this function? What is in particles and P? What are the typical sizes of the inputs? Also, do you have the Statistics Toolbox? 
Sure 4 particles let's call them a,b,c and d particles = [a;b;c;d] p = probability that each particle is to be drawn: p = [1;2;3;4] so particle a has 1/10th chance of being picked and d has 4/10ths of a chance to be picked. We take 4 random 'scores', I'll use integers for simplicity rp = randi(sum(p),4) we get these results: (1;3;8;7) Use cumsum to turn p into a cumulative vector (1;3;6;10) Now the challenge is to find where the values in rp are in p. The solution (by inspection) is (a;b;d;d). Get it? Anyway I found a solution to my issue and it is surprisingly easy! function [np] = selectParticles(particles,p) cs = cumsum(p); rs = rand(length(cs),1)*sum(p); A = bsxfun(@ge,cs,rs'); [~,m] = max(A); np = particles(m); end
p and P are the same just mere typo differences. In my original text it's called score but I figured that'd be to abstract. " Each time we draw a particle out of the bag we take note of what particle it is " Sorry I Thought that would be enough but in the case of uncertainty the function is meant to take N particles out of the bag, one at a time, and take note of which particle was chosen, then put back in the bag.
Thanks, So regionprops('centroid') gets the actual blob centroid, not the property of its best-fit ellipse like it does for other functions?
I believe the key issue is whether it's the centroid of the regionprops() ellipse or the raw blob.
I to used repmat in my secondary draft of my code, though it wasn't massively faster than the code with the loop since repmat is slow. This led me to discover bsxfun which is faster at doing repmat's job. Finaly I realised that I could just do it all in one step =P So I did =P. Yeah, The difference isn't massive however it's for some code for a little quad-copter and analysing data from it (for eventual navigation) and ultimately I need to get it as fast as possible, else the quad-copter could be flying straight into a cliff when it thinks it is a 10-20 meters away from it =P hehe I will likely be having roughly 1000 to 10000 probabilities and currently my whole code runs in 0.7 seconds (where the select particles function is called twice). This is much better from my initial code which ran in 30 seconds =P. Also a fair bit of that time is taken in plotting so it's going well I feel =). I will try out your code and see if it makes any differences in speed =) Thanks EDIT: Ran it through a few times and compared both our codes. It seems they run in almost exactly the same time =P Edit2: Though on my pc yours runs out of memory at 50,000 and I'm assuming that's because of repmat, where as bsxfun doesn't have that issue it seems
I'm glad you figured it out. My direction was similar (using bsxfun).
By the same token this is computer science. You are given a problem that you are to solve. Bags may not exist in matlab but by the same token neither do cars yet we still manage to simulate them in matlab. so yes np is a list of N chosen particles, p is the relative probabilities and particles is a list of particles. As I gave in my example: Particles: Probability of being picked: a 1 b 2 c 3 d 4 Where probability here is given a unit of 1/sum(probability). I.e. the true probability of 'a' being picked is 1/10 Perhaps this table format is easier to understand? The challenge is to pick 4 particles at random given there biases and return the list of particles picked
Epic! I'd like to see what differences you have in case it is more efficient your way =) If you don't mind of course =)
I knew it! Someone told me about the ARPACK connection. Thanks for checking. I wonder if SVDS calculates all the eigenvalues, then picks the biggest ones. That would explain why it isn't faster.
So far, I've thought of something like this... idx = strfind(txt,'AMPL2'); handles.Amp3(1:7,1) = 0; i = 1; for j = 1:length(idx); if idx(1,j) == 8 handles.Amp3(i,1) = j; i = i+1; end end AND I GET THIS: Undefined function 'eq' for input arguments of type 'cell'. cell2mat(txt) gets me all the strings smashed together in one cell. cell2mat(idx) gets me idx(1,1:7) = 8 which is not helpful as I need those index positions where the 8's reside in the idx 1x70 cell. 
This is what I had when I posted asking for problem clarification: function [np] = selectParticles(particles,p) p=p(:)'; n = size(particles,1); y = cumsum(p./sum(p)); R = rand(n,1); ChoiceIndex = (length(p)+1)-sum(bsxfun(@lt, R, y),2); np = particles(ChoiceIndex,:); end
Correct. It will look very similar to the center of a best-fit ellipse, but it won't be the same as an ellipse that fully encloses the blob. 
Off the top of my head, something like this should return a logical array where the strings end and don't end with the extension ampl3 (haven't tested): cellfullofstrings = {'str1.ampl3', 'str2.ampl3', 'str3.phase3'}; stringtofind = 'ampl3'; lengthofstringtofind = numel(stringtofind); ismatch = cellfun(@(x) strcmp(x(end-lengthofstringtofind:end), stringtofind), cellfullofstrings); 
I tried that, and it seems like an easier issue to deal with. This is what I put in: stringtofind = 'AMPL3'; lengthofstringtofind = numel(stringtofind); ismatch = cellfun(@(x) strcmp(x(end-lengthofstringtofind:end), stringtofind), txt); This is what its telling me: Subscript indices must either be real positive integers or logicals. Thanks a bunch for helping!
I know this isn't what you and/or your instructor were asking, but I thought I'd also show you a *vectorized* version of the same thing. Basically, you avoid the loops and everything is usually much faster. It is, in general, better to vectorize whenever possible as you will save a lot of time. However, it either (a) isn't practical, (b) isn't worth the work or (c) not possible. Anyway, the vectorized version of the above loop is: [jj,ii]=meshgrid(1:4,1:3); X = 3.*ii+6.*jj; Good luck with your work! 
I think strcmp is giving me a logical of sorts and txt is simply a cell array of strings. This doesn't seem to be compatible, but i'm not quite sure what the x does in strcmp or the anonymous function @(x)
First thought, try not using 'min', instead use 'all' to make sure you aren't accidentally doing a costly type conversion from boolean. There are lots of different algorithms that one could think of to accomplish this that you could try. Here's an idea I just came up with: Combine the two arrays into one. Do a unique on the result and make sure it is the same length as A (this requires A to be unique, if A and B are not unique by-row, then the result is unpredictable. size(unique(vertcat(A, B), 'rows'), 1) == size(A, 1) Beyond that, not sure of a great way to make it any faster than you found with 'ismember' without writing your own algorithms. If you can assume both arrays are ordered, theoretically you should be able to come up with an algorithm that is O(n). 
I would try and do something like, phrase = 'AMPL3'; % This could be changed by user input ind = zeros(length(cellFullOfStrings)); for j = 1:length(cellFullOfStrings) temp = cellFullOfStrings{j}; if strcmp(temp(end-length(phrase):end),phrase) ind(j) = 1; end end I'm not entirely certain if this would work as I didn't try it, but the method behind this is that it would go through every element in your cell array and then check if the last characters match the characters of your phrase. The line strcmp(temp(end-length(phrase):end),phrase) is supposed to compare the last letters of the cell element. I'm not sure if just doing end-length(phrase) will bring you to the correct character though. This would create a logical index that would indicate whether or not that element contained the phrase. 
Do you know how to do what I'm trying to do?
I'm not quite sure what you're trying to do. Can you give some more details? Are you looking for the geographic center of an object relative to its extreme points?
just the x y co-ordinates of the intersection of the regionprops() long and short axes, which is also the regionprops() ellipse centroid.
Thanks. I'll test this tomorrow. Both arrays are unique. I had thought of something similar with union but I was getting a strange result (likely my fault, but I didn't investigate) The arrays are only roughly sorted but not in a helpful way. And I like the 'all' instead of 'sum'. When I first wrote this a long time ago, I didn't use it and I didn't think to revisit that here. I will see if that helps. Thanks!
there's some issues here. First: cellfullofstrings{1}(end-lengthofstringtofind:end) returns .ampl3 Further, it doesn't return the indices, instead it returns a boolean vector use this instead: cellfullofstrings = {'str1.ampl3', 'str2.ampl3', 'str3.phase3'}; stringtofind = 'ampl3'; indices = find(cellfun(@(x) ~isempty(strfind(x,stringtofind)),cellfullofstrings)); if you want to absolutely guarantee that the stringtofind is at the end of the sequence, use something like cellfullofstrings = {'str1.ampl3', 'str2.ampl3', 'str3.phase3', 'str4.ampl3.phase3', 'str5.ampl3'}; stringtofind = 'ampl3'; slen = length(stringtofind); indices = find(cellfun(@(x) strcmp(x(end-slen+1:end),stringtofind),cellfullofstrings)); 
The most direct approach would be to use quiver3.
There is a +1 missing in the cellfun: cellfullofstrings = {'str1.ampl3', 'str2.ampl3', 'str3.phase3'}; stringtofind = 'ampl3'; lengthofstringtofind = numel(stringtofind); ismatch = cellfun(@(x) strcmp(x(end-lengthofstringtofind+1:end), stringtofind), cellfullofstrings); 
Huh, interesting. I've been programming with Matlab for a long time and had used the rather similar function cellfun, but somehow had never run into bsxfun. Maybe *because* I started a long time ago -- apparently bsxfun came into existence in 2007, which is a few years after the bulk of my Matlab training. Anyway, looks super-useful for certain contexts like this, and certainly more memory efficient than using repmat in the (somewhat limited) cases where it applies -- so good to know about! Interesting on the timing comparison -- [this post](http://blogs.mathworks.com/loren/2008/08/04/comparing-repmat-and-bsxfun-performance/) suggests that bsxfun ran in about 2/3 the time of repmat in their testing, although I'm sure it depends a lot on exactly what you're doing. And I suspect various optimizations have been done since 2008 when that was written that also affect how efficiently each one operates in different circumstances. I did max out my RAM in this computer at 8GB so I'm not surprised that a system with a more typical 2-4GB would probably hit its limit at fewer items...
It also stores arrays in column-major order, so if you have a two dimensional array a(i,j) and you decide you want an array of them it's better to make it a(i,j,k), rather than a(k,i,j) which would be more natural in most languages.
All of the methods that use `ismember` were the slowest. The `unique` method you suggested is just ever-so-slightly faster than the `setdiff` method. Thanks I actually realized that I can at least save some time by rethinking a data structure so that I can put it into a parfor. That should help too
You probably want to use union(A,B,'rows') rather than isempty or min. I did the following A = floor(rand(100,6) * 10) + 1; % random numbers from 1 to 10 By = A([28 37 17 5 38 18 82 22], :); % By yes, is subset of A Bn = floor(rand(10,6) * 10) + 1; % Bn no, is not subset of A % is By a subset of A C = union(A, By, 'rows'); is_subset = size(A,1) == size(C,1); % is Bn a subset of A C = union(A, Bn, 'rows'); is_subset = size(A,1) == size(C,1) It looked about 35% faster to me. 
Your right about the logical index.. and this is what seems to be the hang up at this point. Error: Subscript indices must either be real positive integers or logicals. ** my cell full of strings is (txt) from an xlsread. Can I change something to logicals that isn't, or find something thats like strcmp that doesn't give me logicals?
If you're doing this comparison a lot with the same A, it may help to pre-sort. I know that `unique` sorts the array if it hasn't already been sorted. `ismember` probably doesn't something similar. You could try `profile` to see what is taking the most time within those functions. `ismember` is not a compiled function, so you can get at its internals and see what is being slow. Just curious, for you, how slow is slow and how large are A and B? 
A is length n, B is length m. If A is sorted, you can skip straight to wherever B(1) first occurs in A - with binary search this will be O(log(n)) - which is better than stepping through A one element at a time as that is O(n). Imagine in your example if you had a gazillion 0s at the start of your A - you don't want to look through all gazillion of them before you get to the first 1 value!
MATLAB resets any changes to a for loop index when it gets back to the top of the loop. What you are trying to do is impossible using a for loop. I do not know why they implemented it this way other than to protect you from shooting yourself in the foot. Generally this is 'nice', but sometimes you WANT to shoot yourself in the foot at which point it is very annoying. Trying to save me from myself only makes things more difficult and introduces yet another annoying language quirk/feature to remember. Easy fix: use a while loop. It is a 'better' practice in this situation anyways. count = 0; while count &lt;= 360 if count == 40 count = count+300; end disp(num2str(count)); count = count + 10; end 
You can't change the iteration variable in a for loop. While true, you can change it, when you hit the bottom of the loop, it will just restart where you left off. Plus, it is generally bad form if the code needs to be maintainable in any way (by you or anyone else). Most people assume when reading for loops that the iterator (`count` in your case) behave. For your case, you could use a while loop and manage your own counter. That would give you the flexibility you want. while count &lt;= 360 if count=40 count=count+300; end disp(num2str(count)) count = count + 10; end
Thank you :)
Thanks :)
Isn't your algorithm is at best O(n log n) because you need to sort the lists first?
Yeah, absolutely. But I'm not doing a binary search because I'm assuming A and B are *pretty close* to being the same things. This happens a lot in the data I have and so making that assumption is pretty reasonable. While in edge cases could be pretty bad if A is really biost situations is far faster than doing a binary search for every row of B, which can often be very close to the same size as A. It's the difference between getting O(m log(n)) in all cases and getting O(n) in most cases. Works great if A and B are about the same size and contain mostly the same info. 
Yeah, I was coming into it with the assumption of the lists being sorted first and focusing on the comparison part. But with sort, it could be more like O(n log n) depending on the sort used. But in reality, O(n log n) is pretty good in most circumstances. The OP is trying to compare two large arrays. I'd like to know, but I'm assuming ismember is giving him relatively poor performance that isn't approaching O(n log n). Though I'm just assuming because there isn't really enough info in the original post to decide. Maybe A is 5 rows long and B is 4 and he's just doing it 1e9 times and all the time is made up of method overhead (check out the `ismember` source, there's a lot of overhead for every call). 
I'll look into the presorting, but the order of A *does* matter so I'd have to store it and be careful about which I use. A and B are on the order of 1e3 x 25 (but A is always larger than B). Certainly not huge, but it gets called a lot and there isn't really any way around that. I have actually reduced the number of calls by many orders-of-magnitude with some careful recoding. Plus, even if the savings are minor, it is sometimes fun to see what I can do to optimize.
does the error happen at the if statement? I'm thinking that some of the strings might be shorter than the phrase you're searching for. If this is the case, I would put in an if statement right before saying something along the lines of if length(temp) &gt;= length(phrase) % compare the strings % ... % end I'm afraid I don't follow your last question...
Dude! Thanks!! Feel free to ask me any additional questions you have; I work with MATLAB pretty much all day at work :)
If you HAVE to use a for loop: i=0 for count=0:10:360 if count==40 i=i+300; elseif i&lt;=350 i=i+10; else i=i+1; end if i &lt;=360 disp(num2str(i)) end end
Everyone else did answered your questions but I wanted to add a note about how MATLAB thinks about the `for` loop. You specify for i=1:5 what you are really specifying is: for i=[1 2 3 4 5] Therefore at the top of the loop, it moves to the next entry in the `for` loop's array. Therefore, changing `i` in the loop, doesn’t increase the iteration 
I'm not entirely sure what you're trying to do. Are you simply trying to turn this 3D array into a 2D array? Just by sort of stacking each of the third dimensions underneath one another? If so, you can try something along these lines: k = 0 for ii = 1:length(ilat) for jj = 1:length(ilon) k = k + 1 sst_time(k,:) = squeeze(sst(ilon(jj), ilat(ii),:) end end
Yep bsxfun definitely made this function run faster but ony by about 4/5 if anything. Though I think the slowest part of my code is the max function. I had never come across bsxfun either but then again there's not a lot that was covered (programming wise) in my matlab course... It was more just a numerical methods course =/ Damn physics degree... 
Cell folding may not be enabled by default, it wasn't for me. [See this blog entry](http://blogs.mathworks.com/community/2009/06/15/fold-whatever-you-want-using-cells/) for more info. Also worth noting, I think they renamed cell mode to section mode in R2012b. I don't have R2012b installed on this machine so I can't check if the process is the same. It should be similar.
This is called "code folding" in Matlab. Goto Preferences--&gt;Editor--&gt;Code Folding and you can choose what kind of parts to fold. Selecting "Sections" will allow you to fold anything between two double comments: %% fold from here code more code %% to here
Ahhh. I remember using %% in the past thinking that %% will comment out the comment =P. I got scared when a big yellow block appeared so I never used it. Now I know what it does it's going to be much easier to read this code. Thanks =)
I have R2011a so it still seems to be named cell mode thanks both of you for the solution though =)
Ha. I remember discovering this in the same way a few years ago. Note that you can also execute ONLY the code in the currently-highlighted cell. There is a button for it in the editor or you can use CONTROL-ENTER (in Windows). This is nice when you're working on a small part of a time-consuming process. Note, though, that this does not auto-save like the play button (or F5 - in Windows) does. I lost a half-day's work one time with that after MATLAB crashed.
So what are you trying to do with this? Do you want to pull each element out individually? Do you want to pull out 525 arrays that are 375 numbers long?
Please, for the love of all that is just in the world, never ever do this. Messing with the index of a for loop is bad enough. Adding a secondary index is begging for disaster. Case in point: line 8.
Awesome! That is super useful! That will save a bunch of time thanks =D Ouch... Do all variables set before still get saved? Or does very specifically that piece of code only run? Edit: I guess I can test that much out on my own... xD
That is going to depend very heavily on what you did to transform and scale the data before plotting it. There is a good chance that you've lost information along the way and trying to go backwards is going to give you inaccurate results. To be honest this sounds like a situation that desperately needs some [rubber duck debugging](https://en.wikipedia.org/wiki/Rubber_duck_debugging). If you have the original data, why are you trying to go backwards and pull it out of your manipulated and fudged plot? Is there a better way to go about accomplishing this?? (Hint: There is pretty much always a better way.)
Is there any reason you can't just use the x,y coords to directly check your actual data? Trying to reverse engineer it out of the colorbar backwards through your transformation seems like a needlessly complicated route. You seem confident you can get there using that approach, but just because you can does not mean you should!
use imtool 
MATLAB just uses a fuckton of memory, on a clean startup I just did now it is apparently using 645mb edit: [clicky](http://i.imgur.com/dV0x6WE.png)
&gt; 32bit student edition I found your problem.
This was my original aim, to create a new array for each outcome
Touche ;) Slightly more helpful comment: This is yet another example of needing to step back and re-examine what you're trying to do. If you are stuck doing this step in MATLAB you will have to re-evaluate that monstrous 3d matrix. As you are now painfully aware even a simple boolean takes up a decent amount of memory in MATLAB. Why? Who freakin knows. Add it to the long list of 'what the fuck' moments MATLAB puts in your way. One possibly helpful tidbit I can offer would be to try using a 1-d cell of 2-d matrices. MATLAB tries to cram a matrix into a contiguous block of memory. That is one of many tricks it uses to do computations so stupidly fast (hellllo vectorization). Unfortunately it can also bite you in the ass when using ridiculously large sets of information. By splitting things off into cells, you can work around that. Now you have small matrices that can be stored all over the place and a nice tidy cell array of pointers to those tid bits. Sadly this doesn't solve the problem you're facing with a gigantic ~48 GB hunk of information. Sure MATLAB will stop crapping out, but now you're going to have absurd amounts of thrashing and it is going to destroy your performance. You can look into finding your logical array after thresholding and writing a handler to convert chunks of that into integers with each bit representing a pixel. MATLAB does decently with bit-wise operations so you shouldn't take too large of a performance hit with the added overhead. Writing it will be an adventure, but that's why you have a job ;) At that point you might as well just offload even more into the Java you have already written as you're no longer really using MATLAB for anything it is 'good' at.
I'll try to expand: So I have global data but I've trimmed it down to 21 longitude coordinates and 25 latitude coordinates, each containing 375 values spanning from Nov 1981 - Jan 2013. I've been trying to make the loop above simply not overwrite itself when creating the sst_time variable for each outcome. My original aim was to get a new variable for every lon and lat. But now I realise I need to do some more work on the data so it would be best if sst_time contains all the possible outcomes. Sorry, it's hard to explain something when it's all so new. 
Can you write bytes directly in MATLAB? You could fill a byte/int with the corresponding number of bits worth of values by doing various bit shifts (or multiplying by 2 if MATLAB doesn't allow that).
here try this myindex=0; for i=1:21 for j=1:25 myindex=myindex+1; for k = 1:375 b(myindex, k+2)=a(i, j, k); b(myindex, 1)=i; b(myindex, 2)=j; end end end edit: slight explaination on what your output will be: Imagine your data is a 2d matrix (21x25) (m by n) with a 3rd dimension being the 375 values. I have transformed this data into a 525 by 377 matrix. Each of the rows is in the same format: a(:, 1) = what row the 375 numbers were originally found in. (value of m) a(:, 2) = what column the 375 numbers were originally found in. (value of n) a(:, 3:end) = the 375 numbers themselves. 
Sparse matrix.
yes pack is what you want.
I used to just wrap it in a for loop where it only loops once and you can use the for loop click box to open/close the section of code you need.
lol. That's fairly ingenius but it may slow down the code somewhat?
Yeah. Infact I find that extremely annoying. Like all our "programming" courses in physics have ALWAYS been about the same thing 'Numerical Methods' and they aren't actually a programming course... We've had a python and a matlab course; and in both we've learnt as you said 10% programming, 90% specific examples. The outcome of this is when it comes to actually doing the exam we may know *what we need to do* but we have no idea **how we do it**. Ultimately I'd prefer if they taught it the other way round in all honesty. Maybe 75% programming and 25% other. Because in all honesty being a physicist, our job is to solve problems and to solve problems we need good tools e.g. knowing how to programme properly and efficiently. We **don't** need to know every possible way of solving very specific problems... Then again... This is the reason why I don't want to do physics anymore... =P I want to do Computer Science so I can have ACTUAL courses on PROGRAMMING finally! =P Well if you could finish that book someday I'm sure it would be immensly useful for all newcomers to matlab =).
 ismatrix('this is a string') returns 1 even though this is clearly a character array ismatrix(1) returns 1 even though it is clearly a 1x1 scalar ismatrix([1 2 3]) returns 1 even though this is clearly a 1x3 column vector ismatrix({[1 2 3],[1 2 3]}) returns 1 even though this is clearly a 1x2 cell array containing 1x3 vectors ismatrix(NaN) returns 1 even though the input is not a number ismatrix([]) returns 1 even though the input is empty and has size 0x0 x=1; ismatrix(x==1) returns 1 even though the input type is of type logical (i.e. true/false boolean array), not a numeric input type g = inline('t^2'); ismatrix(g) returns 1 even though the input is an inline function sqr = @(x) x.^2; ismatrix(sqr) returns 1 even though the input is an anonymous function ismatrix(@min); returns 1 even though the input is a function handle to a built-in function h=plot([1 2 3]); ismatrix(h) returns 1 even though the input is a plot handle A.x = 1; ismatrix(A) returns 1 even though the input is a structure syms x; ismatrix(x) returns 1 even though the input is a symbolic variable X = randn(10,10,10); ismatrix(X) returns 0 even though X is an NxMxP matrix. X = randn(10,10,10); ismatrix(X(:,:,1)); returns 1 X = randn(10,10,10); ismatrix(X(1,:,:)); returns 0; ismatrix(squeeze(X(1,:,:))); returns 1 unsurprisingly
You can actually use the code you already have for the most part I believe. (IF I understand what you are wanting here) My solution is using the following: time = num2str(now*10000000000) eval( ['sst_time_ ' time '= sst_time'] ) This will display the following: sst_time_( System Time In NanoSeconds) You should call this after your for loop else it may get a bit laggy and slow. Also you should *try* to avoid using loops. They are very slow and in the world of work time is money. Anyways I hope this helps!
Everything in **MAT**rix **LAB**oratory is a matrix. Use size. if size(x,1)==1&amp;&amp;size(x,2)==1
 ismatrix('this is a string') Matrix of integers told to display as ASCII. ismatrix(1) 1x1 matrix. ismatrix([1 2 3]) 1x3 matrix. 
Yes, I'm aware that almost everything is considered a "matrix" by matlab. I was trying to point out to both the commenter, and the OP, that "matrix" needs to be defined in this context by the writer of the assignment, and that for nearly any input, ismatrix() is going to return true, even if the input may not be considered a "matrix" in many circles. edit: modified my list of examples above to include inline functions, anonymous functions, structures, and symbolic variables, matrices with more than 2 dimensions 
ismatrix(randn(10,10,10))
 prod(size(x)) == 1 or numel(x) == 1
They don't work that way unfortunately. They work based on an entry being 0 or something else, not on the individual bits used to represent anything. Unless your logical arrays have a VERY significant portion of 0 entry items you probably won't get any gains at all. No harm in trying out a small test case, but don't expect miracles!