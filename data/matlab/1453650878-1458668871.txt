How automatic does it need to be? Are you generating lots of plots with varying x axis ranges that need this? It wouldn't be that difficult to script something up to automatically change things for you. Something like: currLims=axis; minMaxPi=floor(abs(currLims)/pi).*sign(currLims); ax = gca; dPi = 1; % Controls the increment size between labels tickvals=[minMaxPi(1):dPi:minMaxPi(2)] ax.XTick = tickvals*pi; ticklabs=cell(1,length(ax.XTick)); for iTick=1:length(tickvals) if tickvals(iTick)==1 ticklabs{iTick}='\pi'; elseif tickvals(iTick)==0 ticklabs{iTick}='0'; elseif tickvals(iTick)==-1 ticklabs{iTick}='-\pi'; else ticklabs{iTick}=[num2str(tickvals(iTick)),'\pi']; end end ax.XTickLabel = ticklabs; I haven't tested this, but the basic idea should work. You can make it more complex if you wanted it to handle fractional values as well. There's probably a more elegant way to handle the exceptions when making the strings, but I haven't had enough coffee this morning. This whole thing could be made into a function where you pass it the figure handle and desired increment for the label values and it would format and apply them to your figure. 
They are indeed timestamps and I don't intend to watch a 36 hour long movie so I think I'm safe. I thought: replacing a string in a text file should be fairly easy. Adding just a couple of seconds to a timestamp (not needing to account for leap years etc.) should be fairly easy, or so I thought. And so I thought there should be an easy solution that I just cannot think of. Looking at your example, my thought was to do this: N=5; %how many seconds I want to add t='14:35:59.812'; [ Y, M, D, H, MN, S] = datevec(t); G=H*3600+MN*60+S+N; H=floor(G/3600); MN=floor((G-H*3600)/60); S=G-H*3600-MN*60; which gives the correct # hours minutes and seconds, and then to try to convert that back to a datevector. Or is that a foolish way to do it?
I think you can do something similar with datenum. Convert your date string to a number using datenum, add the 5 seconds (careful though cause the unit of datenum is days), and then concert back to string with datestr. 
You already have the data and you just want to plot it? If so just look at some of the plotting tools. 
If you already have the coordinate data, then what is it you need to simulate?
Forget the url part, and just try to parse a string first. URLRead() just downloads the HTML content of the website as a string. Also, in my personal opinion, you should do array manipulation exercises before the file I/O or API related ones, but don't take me too seriously if you are enjoying what you are doing :)
load filename figure; hold all; for r=1:4 plot(data(:,r)); end 
soooo... does this run? If not, why do you think it doesn't run? (what errors do you get?) Which functions do you think you need to use to solve a differential equation? Have you checked their documentation? 
It didn't run because I forgot to add in the y=(whatever) function in the same m file. I got it now though. It took like 5 or 10 minutes after posting this to get everything to work.
To expand on the answer- All the functions you're using are vectorized- which is a MATLAB term for "they accept a vector input, and will do a calculation on each element in the vector." Of course, not all functions will behave that way (for instance, functions you write yourself). So, in general you want to save your outputs as a vector. Thus, you could add in a loop counter variable outside of your for loop: k = 0; and then inside your loop, increment your counter: k = k + 1; and then instead of just having `sig` and `tau` you would say: sig(k) = ((sigx + sigy)/2) + .... and the same idea for tau. Now, MATLAB knows that `sig` and `tau` are vectors, and will save them as such. 
You can follow the documentation [here](http://www.mathworks.com/help/matlab/creating_plots/add-text-to-specific-points-on-graph.html). In general, the MATLAB documentation is really good- just type what you want to do and "MATLAB" into Google and you'll find it. 
I'm having trouble following what you want to do exactly, but if I'm understanding you correctly that you want to simply remove one of the rows of your matrix (in this case the second row) you just do this: A(2,:) =[];
You can just point and click with the text or textarrow tool. You can use those commands in your scripts as well to automate. 
Your example shows that these two vectors seem to be fairly close already? Why aren't you just repmating one of the vectors and then finding the minimum error across the common axis?
Check out this: [gmmreg](https://code.google.com/archive/p/gmmreg/) for MATLAB, Python and C++
This is incomprehensible 
Not really sure what you're trying to do. In your code, its fitting an 10th degree polynomial equation; but then you're only graphing the 1st polynomial and offset? Is that what you intended? I can't think of when that would ever be applicable... so I think you want to use: z=polyfit(Vim,Vom,2);
try this: z2=polyfit(Vim(6:20),Vom(6:20),10); Slope2 = z2(1); Intercept2 = z2(2); Vom_best2=Slope2*Vim(6:10)+Intercept2; plot(Vim(6:20),Vom_best2); 
&gt; z2=polyfit(Vim(6:20),Vom(6:20),10); &gt; &gt; Slope2 = z2(1); &gt; &gt; Intercept2 = z2(2); &gt; &gt; Vom_best2=Slope2*Vim(6:20)+Intercept2; &gt; &gt; plot(Vim(6:20),Vom_best2); Looks like this works! (had to change line 4 to Vim(6:20)). Can you explain why my original code didn't work? And what you did differently exactly?
Your last two multiplications need to use "`.*`" as opposed to "`*`" As in... psi = 1 / a*sin(n*pi*L) .* sin(n*pi*L) + sin(n2*pi*L) .* sin(n2*pi*L) + 2/a*sin(n*pi*L) .* sin(n2*pi*L) .* cos(w*t)
Create the distribution object: pd = fitdist(...) Find the confidence interval: CI = paramci(pd)
repmat() is a Matlab command to repeat a matrix. You could use it to copy your two arrays into new matrices. You've got 2x14 and 2x30, but you need to figure out which of the 30 are closest to the 14. Take the 14 and make 30 copies of it, 2x14x30, make 14 copies of the 30, 2x30x14. Realign them for matrix math where 1x30x14 are all the X values are static horizontally from the original 2x30 and 1x30x14 of the other matrix are now all the X values static vertically. Find the least squares error between the two sets of points using X and Y. The smallest error in each row or column will give you the index of the match corresponding to the 14 or 30 from the original sets. Using min() you can get the row minimum index for each column. This doesn't require you to iterate anything and uses a lot of the built in functions designed for matrix math. At least this is how I saw the problem as you described it. gmmreg() will probably also work, but it seems to be designed for matching shapes. It will work for you, but it feels like renting a dump truck when all you want to do is transport a hamster.
Do you have to find whether or not the small image is a part of the big image? Or do you have to find the position of the small image within the big image, knowing that it IS a part of the big image? [This example](http://www.mathworks.com/help/releases/R2015b/vision/examples/object-detection-in-a-cluttered-scene-using-point-feature-matching.html) may be helpful, though possibly more advanced than you're allowed. You can also just try a correlation (normxcorr2) of the small image with the big image. Otherwise, your idea of some sort of hash signature might work, though I don't know of any built-in functionality in MATLAB for that.
So i know for certain that the small image is inside the big image, but i cant imagine it having an effect on anything if it is not inside the large image. Was told that it is pixel - to - pixel perfect match so the RGB values will be equal. Also trying to reduce the use of built in functions. Obviously the likes imread and imshow can be used, but any obscureish ones are 'frowned' upon. edit: also ill look over the link you attached and see how that looks. edit2: unfortunately i think using some of the functions would be out of the scope of what I know so far. This is the very first assignment in a class that is the very first matlab class for most of us students.
Read up on convolution. https://www.cs.duke.edu/courses/fall13/compsci527/notes/convolution.pdf Now implement something similar, except that you want your output matrix to tell you how much absolute difference there is between your small image and the large image at every location. Then it's a simple [row, col] = find(~X); Where X is the output of your function. 
This gives the upper and lower CI for the gradient and the y-intercept, I need to translate that to shaded CI for the regression line
Have a look at xcorr2
hmm i dont think i am allowed to use that unfortunately. out of the scope of what we have learned so far. kind of the frustrating part of academic matlab... 
i see what your are saying. Only issue i can see is that the genrate value function i dont have access to the smaller image. a series of smaller images will be input into the second funciton that i have listed. would this be an issue?
Oh, it's really real unfortunately. See [here.](http://i.imgur.com/1iJ184I.jpg?1) Confusingly worded too.
You need to put the argument in parenthesis like the following: plot(x)
Check your matlab version. Histogram is a recent addition. If your version is older, try hist().
I'm sorry! You're right. This worked. I thought I tried this... Thank you.
Without knowing why you want to do something like that, it's hard to suggest a solution. That's a very odd goal, so it's likely you're trying to solve your actual problem in the wrong way. 
If you put four spaces in front of your code, reddit won't format it, so we can read it. Like this: y = x^2; Anyway, plot() is a function, just like atan(), sin(), or almost anything else. Like anything else, you need to feed it's arguments in parentheses. 
Jesus fucking christ, what kind of people are teaching Matlab these days? This is the stupidest assignment I've ever seen. It's so bad I originally thought that OP was trolling. 
You can't just make a sphere at the point you're interested in with surf? Maybe I don't understand what you're trying to do
As a Matlab TA this is a horrific way to learn :s There must have been some kind of hint dropped in your lecture of how your teacher wants you to do this because there is no sensible/intuitive way that I can see.
If a is the *string* '0'. Then isnumeric(a) will return 0 because the *string* '0' is not numeric!
Not sure what is going on with "s" but here's how you'd solve for an adjugate matrix... A = [1 2 3; 4 5 6; 7 8 9] [u,s,v] = svd(A); s0 = diag(s); ix = toeplitz(ones(n-1,1),[1 zeros(1,n-1)]) + repmat((1:n-1)',1,n); B = det(u*v')*v*diag(prod(reshape(s0(ix),n-1,n),1))*u'; The progress you made above suggests that either you are new to linear algebra, new to matlab, or both. If you need to solve for some series 's' within the adjugate matrix you should ask for help from your linear algebra TA; if this is homework, please flair your post accordingly.
Intro on cellular automata in matlab... https://courses.cit.cornell.edu/bionb441/CA/
The Kinect adaptor is supported on 32-bit and 64-bit Windows. http://www.mathworks.com/help/imaq/important-information-about-the-kinect-adaptor.html Kinect to do skeletal tracking in matlab... http://www.mathworks.com/help/imaq/acquiring-image-and-skeletal-data-using-the-kinect.html
I'll be honest, I've completely ignored the first function signature you gave because I have no idea why you need it. All you need is: function [row, column] = find (small_image, big_image) but I'd recommend not calling it find (if that's allowed) because there is a builtin function with the same name. If you're concerned about speed, the best thing you can do is make sure you don't use loops unless there is absolutely no way around it. Whenever possible, vectorize your code. Check out http://www.mathworks.com/help/matlab/matlab_prog/vectorization.html?refresh=true
Probably because you are lacking the symbolic math toolbox? 
unfortunately the first function signature is given and we have to write the body of it...kind of dumb to be honest, but thanks for the help. Ill have a look at what you linked. edit: vectorization is actually going to be very useful once i get to comparison matching so thats a good start for that half of the program.
Hey, i made a .m file that does exactly this. I can email it to you if you PM me.
nope. I think i can handle the image comparison part. I just am struggling with doing something with the initial big image function that generates some value. I was considering doing some functions so that I have: value.something1 value.something2 just not sure of any ideas that would increase the speed once plugged into the other function signature... :/ kind of tough using what our teacher gave us. I appreciate the help by the way. New to matlab and image processing and just havent been given very much instruction. edit: I think for the comparison part it would be acceptable to just check a 2x2 absolute difference i dont think that I dont believe that any more would be necessary. edit2: i also converted the matrix to int16 to allow negative values, so that Uint8 didnt yield false positives with 0 values.
The documentation is excellent. Read the introductory material and work on sample problems. 
If you have six wave files, you'll need to first get them into matlab's working memory. I suggest you look into using audioread(). From there your next hunch is correct in that you can use one of the built in rand() functions to select at random different samples from your now raw wave file data. Once you make your new array, you can use audiowrite() to turn the raw data back into a wave file.
Is there a good reason for doing this? OOP is not necessary for quality code development, and I personally am not a fan of OOP in Matlab. 
http://www.mathworks.com/help/distcomp/nan.html
Currently all of the elements that are not defined I have as NaN, but I want blanks or something minimal looking. My professor does not want this table to be cluttered up. Is there a way to replace the NaN with something else that is a more minimalistic placeholder?
As someone who is moving the other direction, I am wondering why? Some things is matlab are easier and you can often clobber something together, but then it is hard to build on it. Sure, in Python you have to track name-spaces and you have longer calls, but that adds to the self-documenting features. Anyway, you could essentially invert [Numpy for Matlab users](https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html)
Yeah I get all that. I'm not saying it should never be used. I just dislike it. My point is just that, if OP already has a working (or close to working) solution, then there's no reason to rewrite it using OOP. Doing it just because someone likes the idea of object orientation isn't wise. If there's a realistic motivation then by all means, go ahead. 
My daughter is taking her first computer science course in matlab at Georiga Tech and I want to be able to help her understand the material better. I agree that python / numpy / scipy are the direction I would go in if I were doing heavy numerical analysis. Or R. 
I would also want to additionally point out, when I audioread() something, the values are between -1 and 1. It seems rand* (I was planning on using randperm()) only works with non-negative integers. This is another problem I'm trying to circumvent. Would I have to loop through each value of an original wave file, and increase by 1? Then afterwards, decrease the scrambled vector by 1 to return to original relative values? Maybe I'm over-complicating things here, but again, any advice would be greatly appreciated!
check out the functions 'patch' or 'isosurface'. If these aren't what you need, can you post some code or maybe some images and I can try and help further
Well, you can bypass the dot nomenclature for a package by [importing](http://www.mathworks.com/help/matlab/ref/import.html) it, but that's probably not what you meant. What kind of nomenclature would you prefer? 
Depends how exactly you want to define a peak, but you could do this with findpeaks() and some code to compare the positions of peaks from each data set. 
So I'm assuming you've already spent the 30 seconds in google and read this? http://www.mathworks.com/help/matlab/learn_matlab/matrices-and-arrays.html
Yeah. Didn't understand it.
I don't know if it is accessible to all, but the Mathworks website has a ton of useful tutorials, including a beginner's tutorial. The link is below: http://www.mathworks.com/support/learn-with-matlab-tutorials.html I would recommend also just jumping in. I learned Python after learning Matlab and I found a lot of the basic structure is the same. You can always start with translating something from Python (or any language) into Matlab.
As someone also "moving the other way," what are you doing to convert matlab skills to Python skills?
Surface normals are directions (vectors), not points. I would assume they are unit vectors, so just use their start point to define points `(x,y)` on a surface and create a mesh from them. Define your Delaunay triangles (TIN should also work) by interpolating over `(x,y)` then mesh it... tri = delaunay(x,y); h = trimesh(tri, x, y, z);
If you need a "free Matlab" consider Octave or Scilab, both of which should be sufficient for purposes such as school, though neither is 100% compatible (Octave has better compability than Scilab). Or if your school has a campus license available for students, contact your school IT. If you want to be a 1337 h4x0r, you'll need to find out how to pirate your software yourself. Or, as the sidebar says, "We are here to help, but won't do your homework or help you pirate software."
For comparison of integer arrays, you can use: all(small_im == big_im(r:r+Ro-1)) Or, more simply: isequal(small_im, big_im(r:Ro-1)) Rather than the `diff_array` and `sum(abs(...))` bit. You wouldn't want to compare floating point arrays (in any language, not just Matlab) that way due to floating point errors (although `==0` isn't any better; you'd want to compare the diff using &lt; to a tolerance value), but it works fine for integers. As for vectorizing the loops...it's relatively trivial to flatten to one loop (just loop over index rather than subscript; getting the indexing right is slightly tricky since the small array is larger than a single element, but it's not too bad), but that doesn't help efficiency and makes the code less readable. If the small image generally contains a pixel that is relatively unique in the larger image--a hot spot, for example--then you can drastically reduce your search time by finding occurrences of that hot spot in the small array and comparing each to all plausible locations in the large array. For example, if the small image is a 3x3 array with values [0, 0, 0; 0, 16, 0; 0, 0, 0] And the large array only has a few places where the value 16 occurs, you can simply use [r, c] = find(small_im==16); [R, C] = find(big_im==16); invalid_row = R &lt; r | R &gt; size(big_im, 1) - size(small_im, 1) + r; invalid_col = C &lt; c | C &gt; size(big_im, 2) - size(small_im,2) + c; valid_position = ~invalid_row &amp; ~invalid_col; rows = [R(valid_position) - r + 1, R(valid_position) + size(small_im, 1) - r]; cols = [C(valid_position) - c + 1, C(valid_position) + size(small_im, 2) - c]; for n = 1:sum(valid_positron) if isequal(small_im, big_im(rows(n,1): rows(n,2), cols(n,1):cols(n,2))) % return rows(n,1) and cols(n,1) if you want the index of the upper left corner of the small image, or return R(n) and C(n) of you want the index of the particular value you found end end This gets you down to one loop (two if the value you picked in the sub array isn't unique), and, if the value you pick in the small array is unique enough (not necessarily interesting in the image, but unique), then you may only need a few passes through the loop to find a sub-image that matches; worst case would be a nearly-uniform image whose sub image is distinguishable, and even then this method should be at worst not appreciably worse than the brute force method of looping over rows and columns. Note that this type of comparison only works for exact sub image matching--if even a single element is altered, no match will be found. 
Unless I'm confused, that only loads the figure handle, which allows you to change properties of the figure (like the axes, background color, etc). But what I want is the plot handles, so I can modify the plots themselves (color, linewidth, visibility, etc). 
As an answer to your "why" question: I like a lot of things about python (it's free is a good one) and I think for simulations it's great- but for crunching through "real data" (for instance, I analyze test data from radars), MATLAB can't be beat. And it's for a pretty simple reason really- they have a persistent workspace. With python I'd have to load my data in through a fileread, and then save it off to a file, then look through that file and decide what I want to do next to the data, then reload it in through fileread, etc. All that IO is not only tedious, but it takes a long time for larger files. 
Those are also accessible, but the hierarchy goes figure-&gt; axes -&gt; object So you would use: h.CurrentAxes.Children To get at the object itself to change those properties
As written, the matrix dimensions should match--providing size with a matrix and a dimension argument forces it to return a scalar, so size(A, 1) - size(B, 1) Has to be scalar - scalar. What is returned by each of your calls to `size`?
not sure why but when i stored my Ro, Co and Rb, Cb values in the form of [Ro Co] it would not work but i removed that and it seems to be ok. Thanks!
right, i appreciate the help - thanks!
In older versions of Matlab (anything before 2014b), you'd need to wrap each layer in a call to `handle` to get the . notation (e.g., `h = handle (openfig('figure.fig'))`). Which might make it easier for you to drill down using `get` rather than `.`. If you use subplot or manually put more than one axes in the figure, you'll need to either use the figure's children property or findobj to get handles to all of the access rather than just the current axes. In general, if you know your plot objects are all lines and are the only lines in any/all axes in the figure, you can also use: hlines = findob(h, 'Type', 'line'); Or you can do things like set the tag and/or DisplayName properties when you create the plot objects and use `findobj` to locate them (setting the DisplayName property has the added bonus of causing the legend to display a meaningful name without needing to pass it a cellstr of names in the order you created the plot objects). Another solution might be to store your handles as userdata or appdata in the figure before saving it; I don't think that would work, since saving to file probably destroys that link as well, but it might be worth a shot. 
I took /u/CyndaquilTurd advise and looked into Delaunay triangles. Seems to be a good direction. I attached a link to a download (not sure if this is the best way to share files) of the .mat [file] (https://filetea.me/t1sMIxicFnGTDGQFR8M1yI9hg). I can also just send some images if that would be better. This is the code that I used. It isn't properly triangulating, and I am not sure the cause. tri = delaunay(Cu_x,Cu_y,Cu_z); trimesh(tri,Cu_x,Cu_y,Cu_z); To get a feel for what it is supposed to look like, Just run a 3-D scatter plot of the values. scatter3(Cu_x,Cu_y,Cu_z) 
Thanks this looks easy enough. Unfortunately I had to turn in the output of the code this morning, but I could incorporate this in future iterations. 
Yeah, you can do this with max(). I'm assuming you want the x value at which f(x) is a maximum, right? That's exactly what you'd use the second output of max() for. 
Wow thanks for the tips. I'll try to remember these in future work. 
It will be easier for me to help you if you just post images of your results (trimesh and your scatter plot)
&gt; It isn't properly triangulating This is the expected results from a delaunay triangulation. What's the issue?
Thank you so much!
WOW............................ Thanks so much. I totally forgot about just plain old addition. Thought I had to do something similar to concatenating. Anyway, thanks!
 Warning: Duplicate data points have been detected and removed. Some point indices will not be referenced by the triangulation. I get this message when I run it. This causes the mesh to not triangulate some of the other circular shapes. I am also not sure what duplicate data there is as they should all be differently defined. 
Think about how many samples you get per second at 10ms sample rate and how many per second at 50ms sample rate. 
You iterate k after the computation of x; when you're at the 11th iteration, you increment k and then close the loop. It therefore appears to be 12 instead of 11.
You're starting k at zero instead of one.
You're also starting with k=0 instead of k=1, is there a reason for that? 
 A=100*rand(10000,3); LOW=A(A(:,2)&lt;10,:); %Pulls out rows that have the second column less than 10 HIGH=A(A(:,2)&gt;10,:); %Pulls out rows that have the second column greater than 10
I recommend looking up logical indexing in the built in documentation. This and so many other questions can be answered by the documentation. i = A(:,2)&lt;10; Alt10 = A(i,:); Agte10 = A(~i,:);
Yes, there should have been a less than or equal to sign on one.
A(:,2)&lt;10 gives a vector of trues (1) and falses (0) equal to the number of rows. When you put that vector into A, like A(A(:,2)&lt;10,:), it will pull out all the rows that correspond to true in the vector.
[Logical indexing](http://www.mathworks.com/help/matlab/math/matrix-indexing.html#bq7egb6-1), it's in the documentation, like I mentioned before. Mathworks has published tons of material on this well documented **feature**. 
[Logical Indexing](http://blogs.mathworks.com/steve/2008/01/28/logical-indexing/) is perhaps MATLAB's most powerful feature. In general, you tell it what rows you want via a logical statement (=, &gt;, &lt;, etc). When first starting out, it's easier to do it in two steps. Let's say your matrix is called A, and depth is in the second column. Your first step is to get a vector of the times when your depth is less than 10: ind_lessthan = A(:,2) &lt; 10; if you run that code, you will see `ind_lessthan` is a vector, length equal to the number of rows of A, of trues and falses (or 1's and 0's). Then, you can use that array to say what rows of A you want: A_lessthan = A(ind_lessthan,:); You could repeat the process for greater than, or realize that the times it's greater than is equal to the opposite of less than (unless you really need to exclude equal to 10...), then: A_greaterthan = A(~ind_lessthan,:); Now, turns out you can do this in one step- you never need to directly make the index array: A_lessthan = A(A(:,2) &lt; 10, :);
name = input('What is your name?: ','s'); fprintf('Are you sure your name is %s?\n',name)
Thank you sir, but it seems that it leaves two &gt;&gt; at the end of the line when I run the script.
This code should give you a newline after fprintf. Make sure the \n is there.
Since they're both prompts, you might want to use `input` for both; but just so you know, you can concatenate string matrices in `disp`, like any other kind of matrix: name = input('What is your name?: '); disp( [ 'Are you sure your name is ' name '?'] )
I think it is supposed to be length(power) and not the other way round.
Was it specified to be a loop? Read the documentation for cumsum. http://www.mathworks.com/help/matlab/ref/cumsum.html Or just sum if you only need the final total.
Yes you are right. It goes to infinity when it gets close to the boundary of the circular objects. I am bounding it using `x/(1+x)` function. No, I can't do that. One of the things that I'm trying to show is that the field is bounded to the interval `[0, 1]`.
There is no command to perform the law of cosines if what you seek is to only provide the three distances and expect a resultant angle. However, you can write one for yourself which I am guessing is the focus of your assignment. You should bookmark Matlab's online help [library](http://www.mathworks.com/help/matlab/ref/cos.html) as a first step to help you understand what each function does and how you use it. The added bonus is at the bottom of the page it lists associated commands, variations on sine and cosine. You probably want to build something as follows: % law of cosines: returns the angle associated with vertex opposite segment a function result = lawOfCosines(a,b,c) ... result = 'calculated angle' end
This should solve it then: h= surf(X,Y,Field) shading interp set(h,'edgecolor',[0 0 0]) 
If you have have trouble understanding the code, set a break point prior to where your confusion starts. This will allow you to inspect all the elements of the function and operate on them via the command line as you step through the function. As there are twelve files shared via Google drive, most folks aren't going to be willing to spend the time reviewing all of them. This sounds less like a Matlab specific question and more about comparing the results of two different approaches. It isn't clear to me that you even know what the result is supposed to be and it sounds like you think the code you linked doesn't work because it doesn't agree with the output of a different programs results. Is it possible for you to do a small matrix by hand, so you know it is correct, and compare that to each of the software results you get?
&gt;You have pennies, nickles, and dimes... Use a function in matlab to solve a system of equations to find the number of each coin. let's give these arbitrary names: p := the number of pennies n := the number of nickels d := the number of dimes &gt;You have twice as many dimes as pennies. This is the same as "The number of dimes is twice the number of pennies." Well, we just named those quantities so let's use their short names: "d is twice p," or more formally, "d = 2 p." &gt;In total you have 40 coins worth $2.66. Let's break this into two parts. &gt;In total you have... $2.66. The value of your coins is the number of each times their value. p pennies worth a cent each, plus n nickels at 5 cents each, plus d dimes at 10 cents each. p + 5 n + 1 d = 266. &gt;In total you have 40 coins. The number of coins you have is just the sum of the number of each. p + n + d = 40. Now you have a system of 3 equations linear in three unknowns. To make it into Ax = b form, just move everything to the left side. IIRC, you can solve these in matlab with x = A\b: A = [-2 0 1; 1 5 10; 1 1 1] b = [0; 266; 40] x = A\b Or something. I didn't check the syntax.
It's interesting, even when I change this the output value doesn't change.
Yeah, I thought that'd be OK since it corresponds with the iteration, but I'll try defining it as a different variable.
Only if you increment k at the beginning of the loop.
 B(:,coldep) = [] This will remove those values from B. You may want to do this to a copy of B so you don't lose the original data, if you need it in the future.
Thank you for the advice! I already have some skills in Java and I'm aware I should learn another mainstream language, I'm planning on taking a C course over the summer break.
Thanks for the answer. It is certainly easier to just take some random test and show a piece of paper which says "hey, I'm good at this". I'll keep it in mind, and try to find some cool projects to work on. :)
It seems to simply close the figure when I try to click on a "system". Am I doing something wrong? EDIT: Nevermind, I need the Computer Vision System Toolbox
The user is able to pick any 5 points, and then you must transform and track those points? I believe you need to do a series of transforms since each transform requires a specific matrix. You can multiply them all together, but they must each be uniquely generated.
The [cross-correlation](https://en.wikipedia.org/wiki/Cross-correlation) between two functions (continuous or discrete) is the integral of the product of those functions at a certain offset. Basically, a function overlaid with a shifted/stretched copy of itself should have the biggest cross-correlation where it puts it "back in sync", periodicity nonwithstanding. That's little more than a fancy brute force for delay, but that's all I've got.
Here is a picture http://imgur.com/NvoEkik
Well there is a function for [chi-squared test](http://se.mathworks.com/help/stats/chi2gof.html) right in matlab. That might help you out a bit. Also there is one for [histogram](http://se.mathworks.com/help/matlab/ref/histogram.html). Check those out to start with.
You can concatenate stuff just by treating the strings as vectors, so then you could do something like: name = input('Please type your name user: ', 's'); %Save name to variable 'name' question = ['Are you sure your name is: ', name, '? ']; %Question is the first string + 'name' + '? ' answer = input(question, 's'); %Save answer to variable 'answer' EDIT: Oh and this has apparently been asked [yesterday](https://www.reddit.com/r/matlab/comments/43jyy0/need_help_with_a_simple_code/). You can check that out. 
You probably want to use [hierarchical clustering](http://de.mathworks.com/help/stats/hierarchical-clustering.html) to determine the similarity of vectors. I would probably extract some position-independent statistical properties of the data sets and use that for clustering.
&gt; Will add photo of code Why is this a thing? I get so many screenshots and camera phone photos from students...
Thank you! And sorry I was just panicking a little bit didn't think to look for other questions like that. 
I do not have an answer for you but I am very curious why you would ever need all those digits. 
Believe me, I've spent a lot of time trying to do just that. I definitely agree that hierarchical clustering is a good approach for this type of problem, but it only works if I can extract position invariant features, as you said. Signals from different sources (or noise signals) can appear very similar, however, and so far my attempts to engineer features that are position invariant have failed. My hope was that the approach I (awkwardly) outlined above would enable me to obtain a more invariant representation of the signal. P.s. I should note that while the signals I want to differentiate are similar, they have sufficient commonalities such that a human eye can make good intuitive judgments about whether two signals have a common source or not. So I believe the necessary information is there, just that a naive analysis (e.g. PCA, etc) is unlikely to capture that information.
Ah that's much better. Thank you. Professor told us to use matlab and didnt even give us a tutorial lol
I think he's asking why people don't just C/P the code?
Yes this. It's okay if it's an obvious bug or a tiny amount of code. What I'm seeing more often these days is a photo of lots of complex code and attached to a message saying "Why doesn't this work?". Sending the .m file or copy/pasted code would be more useful since one could run the program!
Having had to grade a lot of Matlab programms in the last semester, I'd like to give 2 tips for the rookies, seeing some people doing those "mistakes" quite often: 1. When working with big Matrices, with a lot of zeros use the sparse format, it saves a lot of time. With Sparse(A) and Full(A) you can switch between two format for a Matrix A 2. Try avoiding comparing two variables with equal or inequal: if(variable~=pi) %Bad if(abs(variable-pi)&lt;eps*10) %Good 
Yes. That's why I want to obtain a multidimensional non-Euclidean distance metric. I can empirically determine how to weight the different transformations, e.g. a large distance in the "time shift domain" axis is ok / that dimension receives a small weight, but only a very small distance in "time expansion domain" is allowable / that dimension is weighted heavily. After applying weights, I could sum the dimensions and get a matrix of pairwise distances, which could be used as an input to the linkage function for hierarchical clustering.
Change in aptitude and/or shift in voltage are both linear transforms, so there are efficient (and simple) ways of handling those. You can either do a linear least-squares fit, or you could normalise the data, e.g. so that each vector has a mean of zero and a standard deviation of one. Shifting in time is a nonlinear transform. For such short vectors you could just do a brute force search and use the best match. You could also look for some distinctive feature (e.g. peak or centroid) and shift the signal so that always falls in the same place. Alternatively, you could transform to a domain which is translation invariant (e.g. fft), though that trick can be difficult to get to work in practice. Scaling in time is also nonlinear, and you have similar options, i.e. brute force search, or scale using a feature like FWHM. For background, take a look at [scale invariant feature transforms](https://en.wikipedia.org/wiki/Scale-invariant_feature_transform), which use this approach to match features in images.
Thanks for your reply! I could use some additional clarification on parts of it, if you're able. "Do a linear least squares fit" Didn't understand that one. "Brute force search for shift in time" I want to be able to obtain shift values that aren't in whole indices, i.e. fractions of a tick. "FFT translation invariant" I know what the FFT is, but didn't understand this part.
The `mod` function is greatly under-appreciated. It gives you the "modulus" of two numbers (basically the remainder after division). This may seem pretty boring, but it turns out to be very useful when dealing with anything repetitive. The `rem` function does something similar. The most straightforward instance where this is useful is wrapping. Say you have a vector where values are over a large range, and you want to wrap those values to a smaller range. `mod` will do this for you. An example that came up a few days ago was with something having to make their own `sawtooth` function. With `mod`, this is just `mod(1:1000, 4)`, for example. In fact, MATLAB's own `sawtooth` function uses `rem` in exactly this way. Similarly, you can use it for converting seconds to minutes or hours. Another use is to do something every N steps through a loop, such as with a progress notification or flushing your file write buffer (for safety). It is also useful for extracting individual digits. `mod(n, 10)` is the "ones" place in a number, for example.
Are you using a supported compiler? It should tell you about it in the README of LibSVM ( I had a similar problem )
Yes id like a little more info on the 2nd one :)
It has to do with how numbers are represented in a computer. Floating-point numbers (like `float` or `double`) only have a finite number of decimal places they can store. Further, they store numbers in binary format, and some simple decimal numbers cannot be represented in binary. These two issues combined mean that math on floating-point numbers is not exact. Small (and sometimes large) errors will accumulate, resulting in numbers that should be equal no longer being equal in the eyes of the computer. So rather than directly checking if two numbers are equal, you should check if two numbers are equal within a certain margin. This isn't an issue with `int` types (`int32`, `int16`, `uint8`, etc.). Those are exact, and so equality tests with them are safe as long as you can be certain that all numbers involved are always strictly integers.
thank you, couldn't have said it better. Just to show an example: variable = sqrt(pi); variable = variable^2; if(variable~=pi) % =&gt; false =&gt; variable is not pi display('variable ist not pi'); end if(abs(variable-pi)&lt;eps*10) % =&gt; equal up to rounding error display('variable is pi'); end
My recent favorite: http://www.mathworks.com/help/matlab/matlab_oop/scoping-classes-with-packages.html Matlab supports namespaces simular to how python does. Organizing with packages makes your code a heck of a lot cleaner and more portable. My all time favorite: [Accumarray](http://blogs.mathworks.com/loren/2008/02/20/under-appreciated-accumarray/). It's stupid powerful and does a task that can only otherwise be accomplished with nested loops. 
Without knowing what the image looks like, it'll be hard to help. I'm guessing you'll need to figure out some mathematical way of identifying what a vein is in the image. Looks like you might be doing some of that with the threshold commands, but I can't really tell
Omg....my entire simulation...This may or may not have changed my life. 
Maybe try this: num_correct = zeros(200,1); for i = 1:200 a = find( strcmp(test_key,answers{i}{:}) ); num_correct(i) = length(a); end I didn't open up matlab to see if it works though. Hope this helps. EDIT: oops, forgot you're comparing strings. I'm not sure if strcmp() works like this though \\:
If there is anything you usually do in Excel, try it in matlab
Two easy ways to loop: Loop over each row, and use `all(strcmp(test_key(:).', answers(row, :))` to test whether all strings in all columns of that row match Loop over each column, constructing a logical array of matches as you go: result = false(size(answers)); for column = 1:size(answers,2) result(:,column) = strcmp(test_key, answers(:,column)); end correct_rows = all(result, 2); The output is a 200x1 logical array of whether all answers in that row were correct. You can probably do this without looping using `bsxfun`, but I can't test that at the moment (something like `bsxfun(@strcmp, test_key, answers)`, maybe with the order switched or one or more arrays transposed, should give you the same 200x40 logical as `result` in the loop I wrote). Edit: formatting. Apparently lists and code formatting don't play nice in sequential paragraphs? 
yes and no. Matlab doesn't really think. but what it does well is crunching numbers using linear algebra and specifically matrices. That is where the MAT comes from. MATLAB is short for Matrix Laboratory. But of course as the software has advanced it has increased its features. but in general, it likes to work with matrices. 
No, like I said as they added features it can store data in many many formats. you can write text files, create bitmaps, you can export vectors, and matrices as many different types of audio files, you can save as excel files. CSV's, etc. etc. etc. I didn't know you were asking if it stored data only in matrices. That was not exactly clear. But that is different than saying "Matlab thinks in matricies" because once you import any of those file types it will usually store them as a matrix in RAM, unless you save it in one of those file formats or in a struct, or *.mat. Matlab mostly processes using matrix math so it does like "to think in matrices" if that is what you mean. but it does not simply store all values and variables as a matrix. 
In addition to your own answer, there are also ~~strings~~ chars. There are a lot of objects in Matlab that are a collection of these basic types (think of axis objects or figures). I don't think this is very important; as long as you are aware of the different data types and their properties you can do almost anything.
You're right, my mistake! 
Ok, well that one worked. Thank you! I was trying to avoid loops because they're so slow, but oh well. It's due in an hour so I'm turning it in now. Thank you for your help! You're the man!
You will want to read [this post](http://undocumentedmatlab.com/blog/matlabs-internal-memory-representation) from the Undocumented MATLAB blog.
This was true for a long time. Even cell arrays, structs, strings, and handles are really specialized matrices in MATLAB. Except when accessing underlying Java types, all MATLAB [data structures](http://undocumentedmatlab.com/blog/udd-properties) were matrices. However, this has changed recently. MATLAB has been slowly adding new data types that are not matrices, such as the [map](http://www.mathworks.com/help/matlab/map-containers.html), which is a [hash table](https://en.wikipedia.org/wiki/Hash_table), and the new [HG2](http://undocumentedmatlab.com/blog/matlab-hg2) graphics system which is object-oriented rather than handle-based.
Axis objects weren't exposed directly by the MATLAB language, though (unless you use undocumented interfaces to get at the underlying Java objects). As far as the MATLAB language was concerned, you access such objects through handles, which are matrices. This has changed recently with HG2, which uses object-oriented interfaces instead of handles, but that only changed within the last year or two.
Well be sure to pick something fun. Make something you WANT to finish, and enjoy working on. I did a lot of animations in MATLAB to show the behavior of 2+ order differential equations. I got to combine math and programming into something fun and visually pleasing to employers. Think of something fun YOU want to do; something that pulls from the subjects you enjoy. Turn that into a project.
Could you expand on this? How would you structure a matrix to represent a handle?
I tried to attach an image to the post, but couldn't seem to find how to do it. I do believe the image's poorish quality is affecting the results (it was taken with a PI camera with a filter over it). 
If accumarray does what I think it does you may have shaved hours or days off my simulation. It's insane how two of the three or so tips posted here might cut my computation time in half. Thanks!
I can see now what you're talking about... Any suggestions on how to fix that?
Do you know how to turn an ODE into a state space matrix?
Okay. Stackoverflow is generally helpful, but I've always found Matlab usually has its own solution if you poke around for long enough. Does this [function](http://www.mathworks.com/help/images/ref/fitgeotrans.html) achieve your goal? It takes in three points and uses three static points to provide a proper geometric transform matrix.
No worries, mate. Best of luck with your studies!
Thanks for looking at my problem. They were just place holders for now. I ran the same scenario with only the last field (m x k) in the struct (and another scenario as just the last field in a cell array). Those extra fields do not contribute to the problem (noticeably).
Thank you for the so much tips, I've been adding them in sporadically with some good results. 
Thank you for looking at my problem. YES THEY CAN be represented by a sparse matrix, since they consist of mostly 0's. I was not aware that there is a matlab implementation of sparse matrices. (Im on my phone now, but i will look into it tomorrow). How do sparse matrices work exactly? Do they just compress the zero sections of the surface?
No problem. It took me quite a while to get in the mindset of vectorizing code, not to mention some of the other matlab-isms (my prior experience was in C), so I'm happy to pass it on when I can. 
Sparse matrices don't so much "compress" the zero sections, they just don't store them to begin with (which I guess _is_ a form of compression). Rather than a big block of rows/cols containing all values like a normal (2D) matrix it just stores the _locations_ of the non-zero entries and their values.
What do you mean by cut? if X &gt; limit %"cut" Y end 
Thank you very much I think its just the solution I needed... one last question can I do operations on the sparse matrix or do I need to first convert it back to a normal array?
Like this: [X,Y,Z] = cylinder(1,100); inds=Y&gt;0; X=X(inds); Y=Y(inds); surface([X X],[Y Y],[Y 0*Y]) hold off;
This is how I had formatted my script originally but was still having the same issue. I'll have to try again later to make sure it wasn't a typo.
 -1.^(1:5) ans = -1 -1 -1 -1 -1 If you aren't vectorizing, you don't need .^ just ^
Whoa, very cool! Is there a way to close the shape? edit: I was able to "close" the shape by adding T=surf([sin(t) sin(t)],[cos(t) zeros(1000,1)],[cos(t) zeros(1000,1)],'Linestyle','none','FaceColor','Interp') Also, I'm trying to understand what's happening. From what I got... &amp;nbsp; * inds is a variable that holds all Y values greater than 0 (I set this to Y&gt;=0 so that it goes all the way around). * X=X(inds) writes all x values when Y&gt;0 to X, and the same for Y=Y(inds). &amp;nbsp; I'm not sure what the surface command is doing though. I get that surface() uses vectors, but after reading [the help page](http://www.mathworks.com/help/matlab/ref/surface.html), I'm not entirely sure what each value represents. Thanks for posting this!
Yes, it should have been Y&gt;=0 and that notation puts X and Y into a vector. A clearer example is this: t=linspace(-pi/2,pi/2,1000)'; surf([sin(t) sin(t)],[cos(t) cos(t)],[cos(t) zeros(1000,1)],'Linestyle','None','FaceColor','Interp') What I am doing is creating one parametric curve ([sin(t) cos(t) 0]) then I create a second parametric curve ([sin(t) cos(t) cos(t)]). After I append them together ([zeros(1000,1) cos(t)]), surf will connect them creating a surface. In your case, I had X and Y given from cylinder, I turned it into a vector, then I recognized that the equation for your plane is Y=Z, so I used the Y values in place for Z giving me a parametric curve, and finally created a matrix by appending that together with zeros (the second parametric curve) to pass to surface.
[removed]
B = A(1, :, :) ?
Just To follow up on the problem, I found the solution, here it is with my variable names on it: [Z,Y] = meshgrid(z_Trimmed,y_Trimmed); S3 = size(Z); Z_row = reshape(Z,S3(1)*S3(2),1); Y_row = reshape(Y,S3(1)*S3(2),1); std_dev_Row = reshape(std_dev_Trimmed,S3(1)*S3(2),1); TimeConst_Row = reshape(TimeConst_Trimmed,S3(1)*S3(2),1); figure(12) hold off; h=plot3(Z_row, Y_row, TimeConst_Row, '.k'); set(h, 'MarkerSize', 5); hold on % now draw the vertical errorbar for each point for i=1:length(Z_row) xV = [Z_row(i); Z_row(i)]; yV = [Y_row(i); Y_row(i)]; zMin = TimeConst_Row(i) + std_dev_Row(i); zMax = TimeConst_Row(i) - std_dev_Row(i); zV = [zMin, zMax]; % draw vertical error bar h=plot3(xV, yV, zV, '-k'); set(h, 'LineWidth', 0.5); end surf(z_Trimmed,y_Trimmed,TimeConst_Trimmed,'edgecolor','none','facecolor','interp','facealpha','0.5') colormap(ParaviewCMap) xlabel('Depth(mm)') ylabel('Width(mm)') title('TimeConstant with ErrorBars') daspect([0.0001,0.0001,1]) hold off Credit to: http://code.izzid.com/2007/08/19/How-to-make-a-3D-plot-with-errorbars-in-matlab.html
I think that instead of Z_row=reshape(...) You could just use Z_row=Z(:) (Using (:) to reduce arrays to one dimension can also be handy to calculate sums or min/max etc) Now that I think of it, you don't even need the _row variables since Z_row(i)=Z(i) (although that could be confusing). You could also use quiver3 instead of plot3 if you want to avoid the for loop but it won't make much of a difference. %input: x,y: coordinates of length m and n %z: matrix of size m x n %dev: matrix of size m x n %initialisation x=1:3; y=1:5; z=ones(5,3) dev=rand(5,3); %drawing [X,Y] = meshgrid(x,y) surf(x,y,z); hold on q=quiver3(X(:) , Y(:) , z(:)-dev(:), ... zeros(size(z(:))), zeros(size(z(:))) , 2*dev(:) , 0); %last value is scaling factor, 0 = no scaling set(q,'showarrowhead','off') %only show lines instead of arrows %set your linespecs as needed set(q,'LineWidth',1) set(q,'color','k')
 B = squeeze(A(1,:,:)); or B(:,:) = A(1,:,:); will do the trick.
Thank you for pointing those things out. I'll use the "e" notation more often. But like I said, the aim here wasn't to make good code, it was just to show something cool I found today.
Will try this, thanks!
What line of work are you in? It sounds very cool. Btw, I updated the code so the linear fit is calculated and plotted on every loop, so it looks even cooler now! These visualisations are what keep me interested. This MC stuff is really cool. I'm looking into methods for calculating integrals and stuff right now. It ***is*** very powerful, as you say. 
That happens to be *exactly* what I want to work with after my studies. I'm actually studying mechanical engineering at the moment but my university allows me to choose fluids engineering as a concentration. Would that good for getting into aerospace? What could be useful in your field? Of the various options available to me, the following broad departments are most interesting to me: * Energy, Process and Flow Engineering * Industrial Mechanics (These are my best attempts at translating their names from another language, so the fields may or may not sound familiar) 
Makes sense. Thanks for the input! I already love what I'm doing at the moment so it will hopefully turn out fine :)
I have tested some gpu performance on image processing, maybe my task was similar to yours. My problem was to process n images with the same gpu function (conv2), I tested the performance with the CUDA code (file.cu) vs gpuarray elements in conv2, the processing time is essentially the same, but the processing time is reduced drastically if your GPU has a compute capability &gt; 3.0, like a GTX750 or better. The parfor in GPU elements must decrease even more your processing time, but first try it with only a couple of matrices to avoid a bad usage of the GPUarray functions and variables, like multiple data sendings to GPU and back inside your functions
In my case, the function was the same but with different parameters (different kernel sizes), every image size was distinct, so I put the images in a folder and rename them to the order I nedded, then I loaded the images inside the parfor loop like this: filesN=dir('D:\my_folder\*.png'); parfor k=1:1800 nameN=filesN(k).name; A=imread(nameN); B=myfunction(A,x,y,z); end Personally I have to choose this structure because some functions I used required 2 or more input images, also some tasks I needed weren't available in pagefun, arrayfun or bsxfun with GPU compatibility. Hope this helps
nice post, I like your figures better as below. They tend to flash less and look nicer. Only 1 plot that isnt giving me epilepsy subplot(211); axis square plot(x(b),y(b),'.r') hold on plot(x(~b),y(~b),'.g') pbaspect([1 1 1]) subplot(212); semilogx(k(2:i-1),c(2:i-1),'-b') hold on semilogx(k(2:i-1),pi+0*k(2:i-1),'-r'); pause(0.001) pbaspect([1 1 1]) end
Screw wordpad. Notepad++ is what everyone needs. It's my favorite method to browse text files. Being able to see \n and \r characters is a lifesaver.
Change to hold all if you want it to vary colors as it plots successive lines.
May be in the older versions. Since 2015a (honestly don't remember how it was handled prior to that), the colors are changed with the *hold on;*
Okay, I didn't understand before, but maybe I do now. You want the user to define how much Scale, Shear, Translation, and Rotation then create a matrix to carry that out on the image. You don't want to have to deal with the initial image and the rotated image because you don't know what the user wants until they specify it. It sounds like you want to fill out these [four matrices](http://www.mathworks.com/discovery/affine-transformation.html) and then applying them to the image after input from the user.
Not an answer to your question, but maybe you should try getting used to working in the script window? I mean the command window is great for trying out code, but you can achieve pretty much the same and more in the script interface, you just hit the run button to test your code and voila, if you forget a semi-colon it won't fill your script code with 14,000 zeros. Later on when trying out code/programs from yourself or other people you'll be running the m-file script or function anyway and not just pasting it into the command window, it's a lot easier to dissect and analyze the code that way since if there are errors they get displayed in the command window but your code stays untouched in a separate window.
You could use the diary I guess. 
Notepad doesn't handle either carriage returns or newline characters (don't remember) in the normal fashion, which gives you the result you're seeing. If you want it to look right in Notepad, I'm pretty sure you need both a carriage return and a newline. 
You may also be looking for drawnow;
This is the right answer. Work from a script, copy/paste any relevant output from command window into script comments, rule the world. 
Huh, I didn't realize that, thanks.
Multiply though by t, next notice that the left hand side looks like the result of the product rule. (yt)' = ty' + y Integrate both sides, now. You should get yt = [something]. Solve for y. After you've done this, read the section on integrating factors. 
I tried: test = taylor(f,x,'Order',10,'OrderMode','absolute') and: test = taylor(f,x,'Order',10,'OrderMode','relative') They give the same answer.
So I made the change that you said (that was a stupid typo, my bad. thanks for point it out!) However, my error message has now changed. This is what it is giving me: Error using matrix_input&gt;testbtn_Callback Too many output arguments. Error in matrix_input&gt;submitbtn_Callback (line 63) 'Callback', {testbtn_Callback, matrixdisplay}); Error while evaluating DestroyedObject Callback
It's [Monte Carlo integration](https://en.wikipedia.org/wiki/Monte_Carlo_integration)
Is this even a Matlab question? It sounds like a math question. 
Does Wolfram zero index its arrays? I know Matlab indexes starting at one, and that throws a lot of people off. Otherwise maybe Matlab just decided that the last term was too small and didn't include it? This probably isn't that helpful, but I hope that gets you thinking at least. 
A 300MB video file compressed with h.264 is typically a bit over 4GB of raw pixel data. If you have inefficient data packing it could be over twice that. 8GB is going to be near impossible to fit into contiguous memory. I doubt Matlab is trying very hard to page the data reasonably. The long story short is you either need to implement your own decoder in Matlab (awful). Or just dump frames like you suggested (the right answer). Ffmpeg will do it, so will mplayer, so will vlc, just make sure you have enough free space.
You forgot the `@` on your function handle. That means you're calling `testbtn_Callback` and attempting to put the output inside that cell array. You are getting an error because that function doesn't generate outputs. 
thanks, that worked. One more question, how would I label each individual y axis? 
In addition to Weed_O_Whirler's suggestion, this can also be done in a lower-level way by manually setting graphics properties of axes (all applicable properties can be found on [this help page](https://www.mathworks.com/help/matlab/ref/axes-properties.html)). In this approach you would be setting ax.YLabel.String. To echo the sentiment in the top response on this thread, the matlab help pages are very powerful once you know how to find what you're looking for. I encourage you to familiarize yourself with them if you plan to spend any nontrivial amount of time using matlab. 
You don't even need `run`--just the function name (optionally, with empty parentheses to make it obvious you're calling a function and not a variable) works fine. It just needs to be in scope for the parent function. You can also use an anonymous function to call `matrix_input` rather than defining a mostly-empty callback: set(nobtn, 'Callback', @(~,~) matrix_input); Will cause the callback to discard the uicontrol handle and the empty eventdata that are passed by default to callbacks, only calling `matrix_input`; you can also set the callback when the uicontrol is created, by passing the second two arguments in the `set` statement above to `uicontrol`. The third code-block you wrote in your original post actually redefines `matrix_input` as a nested function in the callback, which would make it impossible to call the original `matrix_input` function from within that code. You don't need to use the `function` keyword to call a function--only to define one. 
Ive figured it out, I will post the solution
I've solved it
Give your variables descriptive names. Make sure to use the .* operator wherever you do multiplication (do not use * here). Learn how to make simple [plots](http://www.mathworks.com/help/matlab/ref/plot.html) Learn how to request [input](http://www.mathworks.com/help/matlab/ref/input.html)
B= 5 syms EZ cd cd = 3 % A = your win ezplot(A,[0 1 0 1])
x(1000) y(1000) No semicolon means it'll show the output of a calc. You can also use disp() or fprintf() http://uk.mathworks.com/help/matlab/ref/disp.html Also, if you're not interested in the intermediate values of x and y then you don't need to store them in an array. You can just use x = x*... etc, and the value of x will be updated each loop. 
Writing x and y displays all the values
ah. x(end) and y(end) should work
Can you briefly explain everything here? I want to understand everything as I learn to code!
 EZ = 0:0.01:10; % EZ is 0 to 10 with increments of 0.01 % use input function to prompt user B = input("Select value for B and press return"); cd = input("Select value for cd and press return"); A = B * exp(-EZ) * sin (c*=d - EZ); figure; % create a window to plot plot(EZ,A); % create axes and plot EZ against A % Add text labels title("Exponentially decaying sine wave"); xlabel("EZ [units]"); ylabel("A [units]"); Let me know if there's anything you don't get
1001 (because of the n+1) would be the last index of x and y. 
%This shows diurnal temperature variation across several lunations T1 = input('Enter value for 1/2 of peak/trough amplitude'); e = input('Enter value for ((pi/Pk)^.5)'); z = input('Enter value for depth in meters'); w = input('Enter value for frequency via (2pi/P)'); t = 1:1:40; T0 = T1 * exp(-e * z) * sin((w*t)-(e*z)); figure(1); plot(t, T1); title('Exponentially decaying sine wave'); xlabel('Lunations'); ylabel('Temperature (K)');
This is my current code BUT the graph does NOT show a single line on it! It should show a sine curve graph. Help! I am trying to show diurnal temperatures over 40 lunations. The average temperature is 250K and the daily flux is 1.8K so 251.8K during the day and 250K at night for example.
 J=repmat(I(m,1:256),256,1); Although I'm not sure I'm interpreting what you are trying to do quite right. Either way, I think the repmat function is what you are looking for. 
Perhaps make use of repmat() to repeat that row from I 256 times? for m = 1:256 J = repmat(I(m, 1:256), [256, 1]); %J manipulation end ? If there's any way you can remove need for all the repeated rows in the J processing that would be a plus since you wouldn't need to allocate all that memory and could instead just operate on that single row from I.
I think you mean to plot T0 instead of T1.
To clarify: Say I have a matrix 1 2 3 4 5 6 7 8 9 I want the 3 J results to be: 1 2 3 | 4 5 6 | 7 8 9 1 2 3 | 4 5 6 | 7 8 9 1 2 3 | 4 5 6 | 7 8 9 In my case I'm doing it for a 256x256 matrix. Unfortunately, repmat seems to output the data (double) to a single... which I then need to convert back into a double to use imwrite. 
J is then padded and rotated 360x (there's another loop outside the code I posted) and each frame is summed. Because it's an image manipulation problem I can't just play with a vector instead (as I understand it).
If you're padding it afterwards why not just directly reference the section of I that you want to manipulate? Or just prealocate an array J of the size it will ultimately have, and copy the relevant (repmat'ed) section of I into it in one shot? Also, when you say "rotated 360x", do you mean 360 *degrees*? Because that's the same as no rotation at all. If you just want to flip it or rotate it 90 degrees, why not just use rot90() or something like that? 
There's no rule that says you can't operate on a vector in an image processing application if it's a vector that you need to operate on. 
That is what my code is doing: J(a,1:256) = I(m,1:256); It takes the entire of the mth row (from col 1 to col 256) and places it in the entire ath row, then loops until every ath row has been satisfied. And I don't know what to tell you about converting to a single. The result of your suggestion gives me a 256x256 single where my code gave me a 256x256 double.
Right. That's not what your example is representing. You should read the documentation for the functions you're using. Things don't change datatype without some reason. 
The end result needs to be centred correctly so all of the images have to have equal padding. If I just used imrotates built in mechanism then I would have inconsistent matrix sizes, I believe.
Oh yes that's correct, and a good reason for padding it yourself. So use repmat to pull out and replicate your row, and have the matrix already alocated to the right size using zeros(), then you should be all set with no inner loop and no allocation lag. 
I would suspect that round(t1_calc/dt) sometimes goes to &lt;= 0.
Is this for reconstructing a tomographic image from raw data? There's a tool for that. Radon() and iradon(), I believe. 
When I do this, it displays a figure/graph with no lines on it. there is no line or sine graph line etc. It is completely blank. My values are: T1 = 250 e = 40 z = .45 w = 40 t = 400 At this point I am just plugging in random values to try to get somewhat in the ballpark of the actual figure. Thank you for your help!
What I'm doing is very similar but with some slight differences that makes me unable to use those tools. Thanks for the help. Managed to fix the problems I had with repmat and have made the process about 40% faster.
It should look shape wise something like this with smoother curves (ignore everything besides the red line)
imread - for whatever reason - started declaring as single instead of double as it had previously. Don't know what caused the change but just needed to work around that. Didn't notice that was the problem and assumed repmat was doing it.
http://1.bp.blogspot.com/-hO-zZlmDnSs/Tmgf4bX1VNI/AAAAAAAAE5I/ZhKWmSZSV3M/s1600/temp923536.gif
Always try to index instead of using a double for loop when you can. for example; m = 1:256; a = 1:256; inx = combvec(m,a); %pre-process the combinations of a and m for i = 1:length(inx) J(inx(i,1),1:256) = I(inx(i,2),1:256); %J manipulation end Its much faster.
My advice is, if you want to learn matlab, you just need to learn how to google. e.g. google:"how to change axis matlab" Its faster then submitting posts for trivial questions.
You don't need a goto--calling the function (i.e., typing its name) causes Matlab to execute that function. When that function finishes, though, it will return to the workspace the function was called from. For example, let's say you start in the base workspace (like when you first start Matlab). When you call a function--for example, `matrix_input`--by typing its name (and, in parentheses, any required arguments to the function), Matlab creates a new workspace for that function--and it does so for every function called in `matrix_input`. So, if `matrix_input` calls `uicontrol` to add a pushbutton, your function stack while Matlab executes `uicontrol` looks like this: &lt;base&gt; |-&gt; matrix_input |-&gt; uicontrol Once `uicontrol` finishes, it returns to `matrix_input`, which can then call other functions or finish and return to base. Some guis use `uiwait` to block executing while the gui exists (i.e.: they block Matlab from executing other code until the user closes the gui), so any cleanup code can be placed in the gui's main function after the call to `uiwait`, since it won't be executed until the gui is closed. Other guis--like yours, unless i miss my guess--don't block execution, so the cleanup code/further instructions need to be called by either a uicontrol callback (such as `nobtn`) or the gui's `CloseRequestFcn`; in either case, arbitrary calls to other functions can be made by simply inserting the function call into the appropriate callback or close function. So I'm still not seeing your problem: if you want to execute (jump to) a function, simply call that function--by typing just the function name (`matrix_input`), not the function prototype (`function matrix_input`). If I'm using terms you aren't familiar with, ask me (or Google) and I should be able to help. But you still didn't describe how the behavior you currently have differs from what you want--what about your gui isn't behaving as expected, and are there any errors thrown by Matlab when the gui runs? 
Easier to just use x(end) so you can use different number of iterations. 
yes, i hit = instead of backspace c*=d should be cd I don't currently have access to matlab so i can't test for errors. as far as I know the only way you can get it free is illegally.
Hello thank you for your help on this. However when I put your code into Matlab it does not work. I get this error: inner matrix dimensions must agree. Any idea? I have been banging my head against the computer all day trying to figure this out.
Actually this is what it says: Error using * Inner matrix dimensions must agree.
OK so I have now got MATLAB to test the code. The problem here is that MATLAB (matrix laboratory) assumes that you want to do matrix multiplication you use '\*' - you need to use a period before - '.\*' this is not necessary when one of the variables is scalar so: A = B * exp(-EZ) * sin (cd - EZ); becomes: A = B * exp(-EZ) .* sin (cd - EZ); Note that the first multiplication does not need to be specified as element-wise as B is a scalar. If you want to read more about element-wise vs matrix operators, there is lots of info on MATLAB's official site. I saw in another post you gave an example picture, but it looks unlike the equation you gave. The other one looks something like: y=sin(x)+sin(15x) In any case it doesn't appear to exponentially decrease
This. More specifically the program checks the value of power before the while loop runs, not during. A solution would be to simply add: V=V(1:end-1) after the while loop. Since you know the while loop will concatenate the updated value of *power* to *V* for **one** value over 1000 because it only checks the value of power at the beginning of the next loop. Another solution would be to simply change your while condition to: while 2^(k+1) &lt; 1000 power = 2^k; k = k+1; V = [V,power] end Hope this helped.
Also, I don't want the sin wave to exponentially decrease. It should just show a sin wave with the peaks and troughs 1.8 kelvin apart, across an X axis of 40 lunations (so 0 to 40). The mean temp line should average between 250 and 255 Kelvin or so and the sine wave itself should represent the diurnal flux. Thanks again everyone for the help!
So this code SHOWS exactly what I am trying to reproduce! I pulled the equation directly from this paper I am conducting research related to and for some reason cannot generate the graph based on their equation. However, this code you just provided, as I stated, is exactly what I am trying to reproduce. BUT, I want to be able to plug in random variable values to generate a similar graph (as you just listed). How would I go about this? 
The reason you have a 1024 in your array V, is because the while loop is still satisfied when k=10. Try using while power &lt; 1000 V = [V,power]; k=k+1; power = 2^k; end Now you can see the V saves the value for k=9, and when it computes power for k=10, the while loop is not satisfied.
Exactly right.
That depends on how similar the code is in each case. You'll have to provide more details. What are you trying to do under the if else. Pretty sure you don't want an if/else though.
I'm generating a separate GUI with an editable table with the specific dimensions the user selected. Meaning, if they select a 6x7 matrix, then a new window with an editable table of dimension 6x7 will open up, and they can input the values of their matrix. I'm on mobile, but I'll have my computer soon... Do you need to see the code? It's very straightforward. What would you recommend if not the "if" statements? I can't think of another way to do this
Unless I'm missing something, just make the table based on the inputs. For instance, save the number of rows as variable `n` and number of columns as variable `m` and then make a new array, size NxM. 
I'm not sure what the editable table looks like, but wouldn't the idea be like create_table(c, r). Like, your function should account for variable size. Unless there's something else you have in mind with your gui, the workaround would be to use a static 10 by 10, have the user edit, then just cut out what's needed after, like B [1:c, 1:r]. 
No problem
switch / case might do what you want?
Can you not evaluate the first slot (sorry dont remember the word) of the array and then the second, and so do the action accordingly? That will depend alot on what do you do on each if. i.e. if they are repeatable or have any sort of pattern
Can you show us the code you use to make a say... 3x2 table, and I think we could help you make an NxM table
Well the issue is, the only code I know how to make a table requires that you put in the 'data' for the table in the code. Meaning, I don't even know how to make a blank table: But here is the code I've got for making a 3x2 editable table with 0's for all the entries: matrixdisplay = figure(); %...Open new window set(matrixdisplay, 'MenuBar', 'none',... 'ToolBar', 'none',... 'Name','Confirm',... 'NumberTitle','off',... 'Position', [450 450 200 140]) %Generate the main "label" text text = uicontrol(matrixdisplay, 'Style','text',... 'String','Is this the correct Matrix?',... 'Position',[0 100 200 30]); %create blank table data data3x2 = [0 0; 0 0; 0 0]; %Create the uitable twobytwo = uitable(matrixdisplay,'Data',data3x2,... 'Position', [75 45 100 100],... 'ColumnEditable',true(1,3),... 'ColumnName',[],... 'ColumnWidth', {20},... 'RowName',[]); %Set width and height twobytwo.Position(3) = twobytwo.Extent(3); twobytwo.Position(4) = twobytwo.Extent(4);
OK, so look at your "create blank table data" line %create blank table data data3x2 = [0 0; 0 0; 0 0]; Replace the line with: data = zeros(n,m) where `n` is the number of rows and `m` is the number of columns. So, when `n=3` and `m=2` you end up with the same blank table as before. Now, let's say other things change based on the number of rows and columns you have (hard for me to tell, but for instance, maybe you change column width based on number of columns you have), then all you have to do is write the formula in terms of `m` for the column width, something like 'ColumnWidth', {40/m} (or whatever you use to determine it). 
Wow! That's fantastic! thank you! Is there anyway to make the table TRULY blank though? without it having 0's to begin with?
Perhaps you need to read Code Complete by Steve McConnel.
Wow. this is EXACTLY what I was looking for. Thank you SO MUCH! :D
Any kind of references would be greatly appreciated honestly. I really do want to learn as much as possible!
So if there are &gt;1 cores set to be available to the matlab session then using those functions will result in all available cores to that session being used?
Functions that hook into libraries that take advantage of parallelism like mkl, blas, and lapack will use the processors available to them. That said, I'm surprised you have the ram required for that problem as is.
It's saying the header takes up 48 lines
Ram is a constraint, I have had to change from a double to single precision but I am only using ~50Gb at the moment, 128 available (Linux machine). edit: And thanks for the rapid replies.
If you only need a small number of the largest or smallest eigenvalues, you can use the eigs command. It can help with the memory issues. Only works with double precision though
Why isn't version control "automatic" in modern operating systems? I'd rather take the disk space penalty and have an automated version control versus the time penalty of having to manually type the various commands requiredz 
When creating compiled applications, I found it best to make a Python (or bash or what have you) script to generate all of the needed paths in Matlab and save them in a file "mcpath" and then create a system command to call mcr directly. This method is opposed to calling mcr() from the matlab command prompt which compiles in everything currently in your path. I use version control as well, so I have built into this script an auto-generated changelog that can be viewed from within the application. I'm always messing with my matlab path, so when I compile a specific application, I like knowing that only the exact paths that program needs will be included. Oh, also the generated .ctf file can be opened and edited with a program like 7Zip. You won't be able to modify any of the packaged .m files, but you will be able to change any other dependencies that get included in your application. The program I usually compile runs a lot of Python code as well, so sometimes if I only need to make a change to one of those .py files, i just open the .ctf with 7zip and edit the file that I need to change.
Along the same topic, I discovered the other day that figs = get(0, 'Children') Will return a list of all currently open figures.
I think it is on newer macs but I turned it off. The ability to set a commit point with the all-important comment is big. But year, that would be nice. Of course, version control is also very much about collaboration 
Upload them where? Do you mean load the images into Matlab's workspace? If so that example seems a little over complex. Try: % Switch to the image directory cd '~/Desktop/image_dir' % Assuming it's a *.nix system, otherwise edit the string as needed. filenames = dir(*.jpg); % lists all files in the current directory ending in .jpg, your extension may be different. % load each file in order of file name for n = 1:length(filenames) data{n} = imread(filenames(n).name); end Now you've got a cell array of the images that you can convert to an array using cell2mat assuming they're all the same size. 
It's a technical computer language, almost anything is possible. If your images are all the same size and in RGB then cell2mat returns a 4D array. This array contains all the images in one block of data. You should be able to apply a function to everything all at once. 
Awesome thank you so much. Is there a way to standardize the sizes of all of the images in matlab after I load them in?
The images don't need alignment which is good because they are all different. So on the line with filenames = dir(*.jpg) do I just write the folder name or the file names of all of the images?
Already submitted, still no response...
&gt;Not sure how to do "y[n-1]" in MatLAB. If you have defined a function to be called **y** that takes a single parameter **n** then you can simply call it as y(n). The function **y** will then be evaluated at the point **n** and return it. So you could for example just say a = y(5) and the variable a would then be assigned the value of the function **y** at the point 5. To define a function simply create a MATLAB file called for example y.m. Then just add what it's supposed to do. function result = y(n) result = 2 * y(n-1) + x(n); This won't work since you haven't defined **x** and you need a basecase for the function just like you asked in &gt;**bonus questions: Is there a way to force my y[n] function at a certain value for a given n? Like say I want y[-1] to be at a value of zero and still do these calculations? The lazy way to define **x** is to just use an anonymous function such as x = @(n) 2*n To force a function to be a certain value you just insert an if-guard that assigns the output value to what kind of value you want. For example if n &lt; 0 result = 1 else ... end You should be able to piece together a working script from just these things but let me know if you have some questions.
Thanks man! I'll give this a try. Really appreciate it. 
The Matlab Documentation is excellent. The first few sections cover the fundamentals so it's worth reading. 
Yeah. A cfit is like a struct so you have the variable and then its properties. Let's say you call your fit: Pete = fit(var1,var2,'Gauss1'). A Gauss1 fit has 3 coefficients, a, b and c. So if you want to find out what a is just call Pete.a in the command window. If you want to change Pete.a because you want to explore what it would look like, just say Pete.a = 50 or whatever and that's it.
[Learn how to search this subreddit. Somebody answered this just 4 days back.](https://www.reddit.com/r/matlab/comments/44aipg/heres_a_simple_monte_carlo_method_to_calculate_pi/)
I think this is a great first assignment for people who already know a bit of math! Kudos to your professor. Now, you probably know (or should know, anyway) that the area of a circle that fits snugly inside a square is (pi / 4) times the area of that square. So, if you generate a bunch of random points inside the square, the amount of points that fall inside the circle as a fraction of the total amount will be roughly equal to (pi / 4). So here's what you do: * Generate a bunch of evenly distributed points inside a square * Check their distance to the centre of the square * Count the number of points for which that distance is smaller than the radius of the circle (half of the length of the square) * Profit!
Thanks!
So I tried writing up a script and was mostly successful. I wrote a script for x(n) and for y(n). For x(n): function in = x(n) in = 2*n; end For y(n): function out = y(n) if n&gt;-1 out = 2*y(n-1) + x(n); else out = 0; end So this worked (though there is probably a better way to write this) and I was getting the correct outputs for both x(n) and y(n). My problem came when I defined a vector **n** and ran that through. So if I define in the command window: **n** = [1,2,3]. I get the answers correct for x(n) but for y(n) I get y(n) = [2, 8, 14] which is incorrect. Why would that happen? And is there a correct way to run a vector of inputs? 
&gt; the misconception that the class knows how to code using MATLAB Your professor probably just assumed that you'd use that most basic of engineering skills: google. I searched "matlab calculate pi monte carlo" and the first 10 results are tutorials, examples, code, or discussion of this problem (and probably the next 10 are too; I didn't look). I know it may feel like you're being thrown in the deep end, but basic Matlab is actually one of the most straight-forward of many things you'll be expected to figure out for yourself during university and throughout the rest of your career. The internet is full of tutorials, guides, documentation, and examples, and many universities don't think it's worth valuable classroom time to pay someone to sit there and watch you while you spend a couple hours working through online tutorials. I'm willing to bet that most of the people here self-taught most of what they know about Matlab, so you're in good company!
Adapt this to your problem, particularly the paragraphs about equality constraints and binary bounds: http://se.mathworks.com/help/optim/ug/travelling-salesman-problem.html#zmw57dd0e27809 However, notice that the objective function (dist) is a vector, so you have to keep that in mind as initially you have a 10x10 matrix for the c values.
You can probably solve it in multiple ways but the easiest one is probably by just using a function called *arrayfun*. This function takes another function (**y**) and also the parameters you want the function to be called with. It then repeatedly calls this function for each element and returns a vector of values. arrayfun(@y,[1 2 3]) ans = 2 8 22
If your matrix has lots of zeros consider using sparse representation to save memory. 
Good catch. I saw this only after I finished my code but in hindsight I don't think a slab of code would've helped me understand the 'why'. I'm still trying to understand why something is coded the way it is. However I was able to synthesize [something](http://pastebin.com/iddeCSse) much simpler based off a couple of tutorials I read/watched. Now I'm just trying to learn how to format the graph in such a way that the whole circle will be plotted instead of just a quarter of it.
Thanks! I'm exploring other possible subtour breaking constraints. If I'm not mistaken, I think this particular document implements this constraint http://imgur.com/QxJGl7M, recursively. Now my question is how do I implement http://imgur.com/yEUFyHX in the same recursive manner? A = spalloc(0,lendist,0); % Allocate a sparse linear inequality constraint matrix b = []; while numtours &gt; 1 % repeat until there is just one subtour % Add the subtour constraints b = [b;zeros(numtours,1)]; % allocate b A = [A;spalloc(numtours,lendist,nStops)]; % a guess at how many nonzeros to allocate for ii = 1:numtours rowIdx = size(A,1)+1; % Counter for indexing subTourIdx = tours{ii}; % Extract the current subtour ------------------------------- I think that up until this point, the code should be the same. I have no idea how to introduce these U_i into the intlinprog setup. Here, U_i is a variable representing the position of node i in the tour Many thanks!
I'm not sure I understand this. First, instead of mcr(), do you mean mcc()? (The MCR is the MATLAB Compiler Runtime, while mcc is the command to create a compiled application.) Second, mcc() doesn't "compile in everything currently in your path." It only includes what it needs, so to speak, essentially using either depfun() or (if you use the -a switch) everything in a specified folder. 
I think the problem is you are only giving it x and y values from 0 to 1 from the rand function. This only traces out the circle in the first quadrant. Try x = -1 + 2*rand([1 n]); y = -1 + 2*rand([1 n]); This gives x and y values from - 1 to 1 which will let you plot the whole circle. Btw, I'm the one who posted the Monte Carlo Pi code on this sub a few days ago so I'm open to questions if you have any. 
Here are some relevant lines for a makefile I used on Linux: LDFLAGS :=-I/usr/local/MATLAB/VERSION/extern/include LKFLAGS :=-Wl,-rpath-link,/usr/local/MATLAB/VERSION/bin/glnxa64 -L/usr/local/MATLAB/VERSION/bin/glnxa64 CXXFLAGS :=-DMX_COMPAT_32 -DGLNXA64 -DGCC -Wall -O3 -g -fPIC -std=gnu++0x -pthread $(LDFLAGS) $(LKFLAGS) LIBS :=-lm -leng -lmat -lmx Where VERSION is the folder of the MATLAB version you're using.
The profile tool, it's awesome.
Could you provide me with an example?
Generally, `tic` and `toc` are the way to go, except that you will want to do something like: Ntest = 1e3 tic for i = 1:Ntest % call script here end toc There will need to be a bit of play to get a good number `Ntest` but repeating it is useful for a good benchmark
Hint 1: There are fancy ways to do this, but basically you're looking to estimate the linear filter that produced the artifact, and then use that to deconvolve the image. Hint 2: Sample/estimate that linear filter from the image since you've basically got a bunch of impulse responses if you pick the right stars. Once you've estimated the filter use it restore using deconvolution. Hint 3: Look up how to convolve/deconvolve using fft and ifft and play with some simulated data to get a feel for what multiplication and division in FFT space do.
Just click run and time instead of clicking run
Periods tend to denote subfields of structures in most languages. foo.bar = 10 Will create a structure called "foo" with an element called "bar" which holds the value 10. You can add other subfields to foo as well. Go ahead and try it, declare the variable then type "foo" in the command window and see what you get.
no
I've used the fit() function for this, where you use F=fit(x, y, 'poly1') where the poly1 says that it's a polynomial of the first order (aka linear). If you type F in the command window, it will report the value for the slope and intercept along with the uncertainties for each assuming a 95% confidence interval. I believe you can then use cint(F,. 95) to get a matrix of the confidence intervals for the fit you calculated, assuming 95%.
You can also bootstrap confidence intervals for your coefficients. Simulate random draws from your data set to produce a new data set and estimate a new set of coefficient values. Repeat this process 1000 times. Then use the 5% and 95% values of the distribution of each coefficient to produce a confidence interval for each coefficient. Small CIs correspond to low uncertainty and vice versa.
https://en.wikipedia.org/wiki/Fluid_simulation
Periods in this context is for object oriented related stuff. Good for dealing with "things" that have several properties. For example: &gt;&gt; person1.name = 'Carl Carlson'; &gt;&gt; person1.height = 175.3; &gt;&gt; person1.weight = 83.6; &gt;&gt; person1 person1 = name: 'Carl Carlson' height: 175.3000 weight: 83.6000 &gt;&gt; person1.name ans = Carl Carlson 
Just as an aside, you'd be better off having it as person(1).name In other words, structures are dimensional just like any other array. They're very useful.
Oh, that is surprising. I just tested out: &gt;&gt; 'A':'Z' ans = ABCDEFGHIJKLMNOPQRSTUVWXYZ (BTW, notice how by indenting with four spaces I made it format as code). So you can define `alphabet='A':'Z'` then `alphabet(1)` will be `A`, etc...
There is no one way to handle this and in fact there is quite a bit of literature on ways to fit a polynomial and estimate both errors on the fit and errors on the coefficients. I would google around and read up on different techniques. This is math question more than a matlab question... A quick search turn up [this Stack Exchange thread](http://stats.stackexchange.com/questions/12054/propagation-of-polynomial-coefficient-errors-in-fit) which may be worth a read
the 2 links to post my practice is blocked for me but this is what I am trying currently: for number = 1:26 for alphabet = 'A':'Z' if number =1 disp(A) elseif end; end; I am lost at elseif
First of all, no need for an `elseif`. You can just `end`. But you *really* do not need the nested loop or an `if` at all. If you have alphabet = 'A':'Z' then &gt;&gt; number = 1 &gt;&gt; disp(alphabet(number)) 'A' That is about as far as I can go without doing the work for you. 
Please format code with four spaces like this or inline with backticks `like this` Also, this could have been easily googled. 
When I tried that it also affected my y values. i effectively just want to chop the graph off from 0-2, leaving the y values the same 
Yep that is basically it. Its part of a larger simple climate simulation project that im working on. The idea would be that once i have the water level set, i could calculate each cell's albedo and emissivity and then model additional changes to climate. That sounds like a good approach, though I'm not super worried about it being resource intensive. Im also considering a slow, recursive 'walking' algorithm to detect the edges of a basin and then fill that way. Thank you for the tips!
My approach was to get an initial melt and then approximate a hydrologic cycle (map rainfall across planet) and then find the watersheds and such, but you're probably right, since of course the water would fill the basins across the planet. As a layman (not a geologist, hydrologist, climatologist), wouldn't Hellas basin, while filled, end up substantially less filled (sealevelwise) than the Borealis basin? I'd imagine that hellas alone due to its depth would have a volume comparable to that of the borealis, but with no direct water connection. Would the water cycle alone be enough to fill it to the datum? That sounds like a cool project. I know very little about GIS but have tooled around with QGIS in the past.
That does sound really cool. Do you know of any material that discusses the mathematics governing groundwater flow? I also will eventually need to account for permafrost melt, which should be interesting and challenging 
So i messed up I'm trying to time a matlab function would I still do the same thing?
Okay so I did a pretty rough first go in five lines by using matlab's built-in imfill function. sealevel = 0; groundmap = hmap&gt;sealevel; watermap = hmap&lt;=sealevel; hellas = ones(ydim,xdim)-imfill(groundmap,[1,1],4); watermapt = (watermap-hellas).*(sealevel-hmap); Groundmap is a binary map of everything above sea level (1 if the pixel is above, 0 if below or equal to). Water map is the inverse of groundmap. I filled in the borealis basin on groundmap and inverted that and called it hellas. Finally, i subtracted hellas from watermap to remove all non-borealis bodies of water. And here's the result: http://i.imgur.com/TEkOhkx.png It's not a true flow algorithm but it suits the purposes for the initial melting. I plan to revisit this problem once I work out the hydrology but for now, this should suffice. As a bonus, here's what it looks like with a constant sea level across the planet http://i.imgur.com/OXjUCGB.png 
&gt;Do you know of any material that discusses the mathematics governing groundwater flow? Oooooh man, that gets real complicated real fast - after a graduate level course in hydrogeology, it seems to me that it's nearly impossible to accurately predict, even with a relatively good idea of the subsurface geology. We have little to no idea what the subsurface geology of Mars is, so there's really no way to be sure any assumptions you make regarding subsurface water flow would be accurate. At the current rate of Mars exploration, that's a question that won't be answered for ~50-100 years, sorry! &gt; account for permafrost melt I'd be interested to see what the latest estimates are for water content of permafrost across Mars, I sort of lost track of that a couple years ago and the numbers were constantly changing then.
Sexy! I wonder what (if any) ice caps would look like if it was warm enough to have this much liquid water. Historically, ice caps are unusual for Earth, but we've got them now because we're just in a stadial of an overall cold period. Cool project! Maybe drop a line to /r/Mars or /r/geology to check us in on your progress! I would love to see the preliminary results of a wet Martian climate model.
That would be awesome. Thank you so much!
The code you posted is completely illegible. Anyway, just read the documentation. 
If the matrices are called time and Force : plot( time(400:1500) , Force(400:1500) ) 
In MATLAB you use the `:` operator to indicate ranges. So, let's say you have a vector `v` and you want elements `a` thru `b` then you say: v2 = v(a:b); The `:` operator by itself indicated "all." So, let's say you had an array `A`and you wanted all of the columns and rows a thru b, then you'd say: A2 = A(a:b,:); 
Personally I'd do Andrew Ng's machine learning course on coursera (or some of it). After a short while the exercises lead to digit recognition.
No it's a linear graph that's coming out 
Find returns all instances it finds, if it finds two it's gonna return two values. Try `m = find(x == minimum,1)`
Thanks!! That worked. Do you have any advice for the user inputting requirements for row vectors? (Question 2)
Yeah, for 2 I don't have an elegant solution. You're just gonna have to write some code to check the `size(x,1)` and `size(x,2)`.
The `a.b` notation is used for three different things in MATLAB. The original use, which is also the case in your example, is for a matrix type called a `struct`, short for "[structure](http://de.mathworks.com/help/matlab/matlab_prog/cell-vs-struct-arrays.html)". In your example `thing` is the struct, while `d` is called a "field" of that struct. It is basically a way to store variables inside other variables. `thing` can hold many such fields, each with its own contents. If you want to get a bit technical (skip this paragraph if you don't), in MATLAB a struct is basically a cell array (a matrix that can hold arbitrary values), where one of the dimensions is accessed by name rather than be index. This is why you can have structs with different dimensions. The second use, which was added much, much later, is for something called [object-oriented programming](http://www.mathworks.com/discovery/object-oriented-programming.html). In this, you can combine data and functions that act on that data into a single variable. You can think of it sort of like a struct where some of the fields are functions that act on other fields. The third use, which was added later still, is for something called "[packages](http://www.mathworks.com/help/matlab/matlab_oop/scoping-classes-with-packages.html)". By putting a `+` in front of a folder name, MATLAB will treat its contents as a "package", where you access the functions and classes by `foldername.filename`. These can be nested, so for example `folder.subfolder.subsubfolder.filename`.
[mode](http://www.mathworks.com/help/matlab/ref/mode.html) might work and is pretty simple.
Hi thanks for your reply. I tried this and it doesnt seem to be working. As there are many data points to a high number of decimal places, the part where the graph is flat "technically" isnt totally flat, there is a tiny variation. Is there anyway to work in a small tolerance?
I was afraid of that. Next idea, calculate the total variation in a region around each point and pick the smallest. Loop through x and use `linspace` or `:` to sample points around the current x. Then use `sum(abs(diff(y)))` to calculate the total variation. The minimum total variation corresponds to the flat region, but you need to pick an appropriate size of the sampling region.
You have a few problems here. First, think about the condition for your while loop--does it ever change? If a condition for a while loop is always true and no break statements punch out of the loop, it won't ever get to the code after the loop (i.e., your for loop that is supposed to do the actual conversion). The second problem is related: how does the user indicate s/he is done putting in values to convert? The while loop, which keeps getting and throwing away user inputs without doing anything to them, doesn't give the user any ability to enter anything but strings to ostensibly convert. For the user to break the loop, you'd need to process some other input--either make the behavior different if the user inputs a particular string (e.g., 'done', 'exit', 'quit', '0'; you should add the expected value to the prompt so the user knows how to exit), or you'll need to add a second call to `input` to ask the user if s/he wants to continue. Third: once you get a way out of the while loop, you need to think about what each variable contains at that point. Since all of your processing occurs after the loop, any value overwritten in the loop is lost--so you'll only process the last string the user entered, since `romS` is overwritten each loop. There are two easy solutions to this: add a count variable to the while loop and make `romS` a cell array, using `romS{count} = input...` (and putting `count = 1` before the loop and `count =count+1` after the `input` line in the loop), then process each cell of `romS` in your for loop and return all the results at once; or, more simply and better for an interactive converter, move the for loops inside the while loop--so the conversion is made and printed after each entry, and `romS` can be overwritten each pass through yhe while loop. Third: why did you make R_Val a string? Think about what the code is doing when it runs: when you add `R_Val(j)` to `result`, you're adding the double value of the character at position j, which probably isn't what you want. Try running `R_Val(2)` from the command window, and try adding it to `Result`--you'll get '0' (the character 0, which is the second element of the string R_Val) and 48 (which is `0 + double('0')`, the ascii code for the character 0). You can make `R_Val` a double (numeric) array instead of a string by replacing the single quotes with square brackets: R_Val = [1000, 500, ...1]; That way, `R_Val(1)` is 1000, not '1'. Keep asking questions if any of this doesn't make sense or you so need help.
This won't work.
This is the best way.
I had to do this recently, glad it came in handy.
It depends on what you want. Are your vectors/matrices intended as y-values? Are they all related to another variable (like time)? Do you want to plot each one in its entirety, or do you only want to plot the relevant subsection of each vector (e.g., the exact point, or the ten points before and after the point of interest)? There are lots of ways to do this, many of which change the look of the plot; you need to decide what you want it to show before you decide on a method. Also, as always: tell us what you've done so far, what happened and how it differed from what you expected to happen--that helps to give you meaningful answers. 
If your array variable is `X` row vector, then you index like this. X(31,:) X(122,:) X(5,:) The first number is the row, the second is the column where "`:`" means "all columns"
If your matrix is a bunch of x, y pairs and you want to replace those pairs that are inside a circle centered on (a, b), you could use the identity (x-a)^2 + (y-b)^2 &lt;= r^2 I think.
Yup! I know how to define a circle. I just don't know how to write "find elements whose position are in this circle" "replace all those elements by zero"
I still don't know what your matrix looks like, but again if it's just a list of pairs then the simplest way to do it would be for ii=1:length(A) if A(ii,1)^2 + A(i,2)^2 &lt;= r^2 A(ii,:) = 0; end end
You could create an X axis for each of your arrays, such that the features in question all correspond to the same X value. Then plot them all, and they'll line up. 
Have you put any thought into this yourself? At all? 
This is the general solution for a circle. Let's assume your circle is defined by the point (a, b) and the radius r [x, y] = meshgrid(1:N, 1:M); circle = ((x - a).^2 + (y - b).^2 &lt;= r^2); This gives us a matrix which is a logical mask indicating which parts of A are in the circle. You can extend this with A(circle) = 0; to solve your original problem.
Matlab, Simulink, control system toolbox, maybe stats or optimization. Image processing toolbox and comm systems toolbox are helpful if you are taking related coursework.
Add up the input to get the total value. Now divide the total value by 25, the integer part is the number of quarters. Now take the remainder divide by 10, integer part is number of dimes, etc. You can get the integer part with fix(a,b) and remainder with rem(a,b). i.e. total value of 67 cents: fix(67,25) = 2 ====&gt; 2 quarters rem(67,25) = 17 fix(17,10) = 1 ====&gt; 1 dime rem(17,10) = 7 fix(7,5) = 1 ====&gt; 1 nickel rem(7,5) = 2 ====&gt; 2 pennies
So the rest are not relevant to my needs, in a sense?
it is quite limiting and thanks 
They may be. What I listed is probably the bare minimum that a mech e might use. You can always install more if the need arises.
You probably know this, but for OP's sake: the smallest number of US coins for any given value can be found by starting from the largest coins and working down, like the code above states. That's not always the case for all currencies, so it's pretty cool that it's possible!
This might be relevant. https://www.youtube.com/watch?v=9dZzyl7dCuw
This looks like typical rounding errors caused by computers doing math in binary. It tries to record a base 10 number using only 0 and 1, which for certain numbers, even basic ones like 0.1, is impossible to perfectly accurately represent. 
One line solution: 4*(sum((rand(n,1).^2+rand(n,1).^2)&lt;1))/n If you want a nice plot: n=1000; A=rand(n,2)*2-1; ndx=(A(:,1).^2+A(:,2).^2)&lt;1; hold off plot( A(ndx,1)',A(ndx,2)','bo') hold on plot( A(ndx~=1,1)',A(ndx~=1,2)','ro') pi_aprox=4*sum(ndx)/n; title(['Estimation of pi is ',num2str(pi_aprox)]) Hope this helps you! For the script to work you have to remove the capital letters. (Alien blue puts them there!) Btw some last general advice for matlab: try to avoid any explicit looping. Matlabs internal functionality is a lot faster than loops due to process vectorization. But that's a different story.
http://imgur.com/w92ZpvP Here I painted a scheme/diagram that makes it a lot easier to understand the boat thing/my question. (the angles are for technical reasons 0° 90° 180° ... paint won't rotate degreewise, but my data does) The data I have is situation 1,2 and 3. i have A and B's coordinates and directions. I need to translate/rotate/normalize/egocentric - whatever the right word might be, to get to situation 4,5 and 6 respectively. In the end, all data (4,5,6) pooled will look like 7, with the new coordinates and directions of B, because then A would always be in the center and heading up. I would believe that something like that might be used often in a different context and am hoping for a inline function or topic to search in.
As /u/rogerrrr said, this is typical of numerical calculations and a fundamental aspect of how computers compute floating point operations. Any floating point operation will yield error on the order of your machine epsilon. Type the command eps to check your machine epsilon. Mine is 2.2204e-16. Yours should be around there too. Any floating point operation will have error on the order of eps built in and will propagate through if you're not very careful when dealing with tiny numbers. There are many ways to manage this problem; it's part of the art of numerical computing. [Here](http://www.mathworks.com/matlabcentral/answers/102419-how-do-i-determine-if-the-error-in-my-answer-is-the-result-of-round-off-error-or-a-bug) is a good Mathworks entry about this.
What can we do to avoid these types of mistakes? 
You should design your code so that floating point representation error is the least significant source of error. For example, if you're code is approximating the solution of a differential equation using finite differences the truncation error from using a finite amount of terms in your Taylor series expansion should be orders of magnitude more significant than floating point representation error. If for some reason you cannot avoid using very small numbers you may simply check the absolute difference between two numbers and if it's below a certain threshold, set it to zero. No matter what you do, you'll have to test and isolate parts of your code to check where this might arise. I've also seen extended precision arithmetic libraries for other languages which mitigate this problem at additional computation cost. Not sure if something like that exists for MATLAB.
Avoid dealing with small numbers, use log arithmetic when needed. 
http://floating-point-gui.de/
try foo = abs(a-b)&lt;.0000001 equality is hard with computers, because of their limited precision. so it's usually better to look for "sufficiently close" rather than "exactly equal"
foo = (a-b) &lt; 0.0000001 Min = solve(a*cos(alpha)-b*sin(alpha),alpha) Like this?
Thanks! It works now, but it doesn't do what I thought it would. It opens "Window Design &amp; Analysis Tool"... Because I thought it was going to let me ask a question on psych toolbox, that the user could then answer showing their answer on screen and then pressing enter moves on to the next screen. But that doesn't seem to happen :( 
Ideally you'd obtain data in some format that Matlab can easily read, like a csv or something. But if this is a homework assignment and all you have is a pdf or something, you may simply have to type it in. That's fine in small quantities. You could also copy/paste from your assignment into a script, and then just add the correct brackets so Matlab correctly interprets your arrays. 
What if I have a word document and a big table full of data. Is there a quick way to import that or copy past that? Also, can you use spaces instead of commas in the arrays?
Ok cool. Thanks for the tips!
If you can copy just the table from Word into Excel you can save it in Excel as a CSV file. From there it should import into matlab quite easily. You could use the following: matrixname=importdata('datafilename.csv'); Then you would have one big matrix of all of your table data. It can be a little screwy if some of your columns of data are not numbers (e.g. if they are text). If so, you may also have to do: matrixname=matrixname.data; which will filter out and throw away the text data leaving you with just the matrix of numbers from your table. Lastly, if you want different columns to have different variable names, you can start breaking up your original matrix into smaller ones. For instance, you could name the whole 2nd column of data 'Values': Values=matrixdata(:,2) Hope this helps.
 k = 1; # I am 1 k = k*-1; # now I am -1 k = k*-1 # now I am 1 again etc.
Oh, thank you, I didn't know subtracting converts to numeric vectors.
complete Matlab noob here, trying to get some homework done. I hope it's okay if I post my question here instead of making a new post pls help me OP 1st part says: "Create a variable calls final_value which is holding a value of 20." okay easy 2nd part says: "Create a row vector from 20 to the final_value with an increment of 8.(Do not use the value of final_value)." wot??
To save time the code is this function number = GetEchoNumber(window,msg,x,y,textColor,bgColor) %number = GetEchoNumber(window, msg, x, y [, textColor][, bgColor][, deviceIndex][, untilTime=inf][, KbCheck args...]) % % Get a number typed at the keyboard. Entry is terminated by &lt;return&gt; or % &lt;enter&gt;. Typed characters are displayed on the screen. Useful for i/o in % a Screen window. Equivalent to "number = str2num(GetEchoString(...))". % % Returns the empty matrix if no number is entered. Returns a column vector % with multiple numbers if more than one number is entered. % % Typed characters are displayed in the window. The delete or backspace key % is handled correctly, ie., it erases the last typed number. % % 'window' = Window to draw to. 'msg' = A message string displayed to % prompt for input. 'x', 'y' = Start position of message prompt. % 'textColor' = Color to use for drawing the text. 'bgColor' = Background % color for text. By default, the background is transparent. If a non-empty % 'bgColor' is specified it will be used. The current alpha blending % setting will affect the appearance of the text if 'bgColor' is specified! if nargin &lt; 6 bgColor = []; end if nargin &lt; 5 textColor = []; end string = GetEchoString(window,msg,x,y,textColor,bgColor,1,varargin{:}); number = str2num(string); %#ok&lt;ST2NM&gt; return; 
Thank you so much for the input. I will reply today or tomorrow with an exact reading from the paper that explains the equation. THANK YOU! You seriouslu clarified this more efficently than I was able to understand it.
So, this may or may not work for you, but what I often do is use a text-editor that allows for vertical selection. With that, I can often mess with the formatting. Alternatively, I will use a separate Python code that will format it (you can probably probably do it in Matlab too but it's harder)
Take a look at [jacobianest](http://www.mathworks.com/matlabcentral/fileexchange/13490-adaptive-robust-numerical-differentiation/content/DERIVESTsuite/jacobianest.m) 
&gt; matrixname=importdata('datafilename.csv'); Ok, so I did this and it worked, but it game me a 27x1 matrix. How do I get it into a 1x27 matrix and have it show up in my code like the other values. Not sure if I'm makin sense, but I want to somehow show all that data I just imported, using your method, in this form in my code: Vr=[1,3,4,5.6,7.8,9,etc...]
A single quote (') is equivalent to the transpose command. It will flip the columns and the rows, so: [2;1]'=[2,1] I don't quite understand the rest of what you were asking, but putting a ' after your matrix, like: matrixname=matrixname'; will make the 27x1 into a 1x27.
Actually nothing was "converted". Strings are always numeric vectors of type char. Nothing had to be converted because they were already numeric. See this previous response I made on the topic: https://www.reddit.com/r/matlab/comments/459bdc/for_loop_help/czwmefx
As long as matrixname and y are both the same length, yes. Otherwise you will have to plot a portion of one of them so that it can correctly match each X value to a Y value. The first variable will be the one on the X axis. Note that you can plot them against each other as long as they are the same length, even if one is a column vector and the other is a row vector. Matlab doesn't care if one is 27x1 and the other is 1x27.
It worked! Thanks for the help!!!
I don't understand that assignment but start:increment:end creates an array
Great, thanks! Took onboard your advice, not sure exactly what I did to get it working, but it now works :)
My question is more aimed at how to make the program faster
In addition to what others have said, trying to reduce use of unnecessary for-loops can (but not always) speed it up. Tricks to doing this are to play around and get an intuitive feel for how arrays splice (for example `A(4:9,3:6)`) and how to use Matlab's operations along a row of a larger array. This will *usually*, though not always, speed things up. Also, spend some time thinking about how your operations scale. For example, at one point, I was doing something by generating a large array, then cutting our most of the rows that aren't valid for my use. That was fine and easy to understand until I realized that the size of the array was `2^d`. In most cases, I had `d` around 4. But when I went to `d = 23`, suddenly I was building a 8388608x23 array to keep about 15 of the entries. oops! I put a bunch of thought into how do to it better and directly build the 15! Tip: Sometimes these types of optimizations can make your code harder to understand. Document and comment your code. And, sometimes include the slower version in comments if it is more clear!
Oh, in addition to my other reply, look into the parallel tool box. As with many things, just using it without much thought won't give you any appreciable gains, but if you are doing, say a loop, and it is amendable to a `parfor` (quick test is to wonder if the order of the loop matters), you can get some pretty good speed up. Again, it depends on the situation since `parfor` also adds some overhead.
A good start is John D'Erricos's "Optimization Tips and Tricks": http://de.mathworks.com/matlabcentral/fileexchange/8553-optimization-tips-and-tricks 
TIL, thanks.
*Any help would be greatly appreciated. I know how to use bincdf and nbincdf but I just dont know how to specify that I need 10 successes in a row. Just asking for some help
This is about mathematical optimization. OP is talking about code optimization.
Are there downsides to preallocating a huge array like that? If you dont know how big its going to be?
Ah cool, haven't used those function before, thanks.
what have you tried? Read the help on plotting and that will give you some examples. To get the help, try `doc plot`. Also, notice the use of `.*` and `./`, etc. 
I'm not really familiar with [symsum](http://www.mathworks.com/help/symbolic/symsum.html?requestedDomain=www.mathworks.com), but it doesn't look like what you're looking for. I think [cumsum](http://www.mathworks.com/help/matlab/ref/cumsum.html) will serve you better. **Edit:** Wait, do you just want the total at the end? Just use sum()! Also, you're doing more work with the index "i" than you need to. It's basically redundant: subtraction will vectorize automatically. You're doing it right with the .^ for the exponent though.
Yes, I just wanted the sum, I'll try that out soon, thanks!
"Subscript indices must either be real positive integers or logicals." is surprisingly descriptive and accurate. You can't use floating point numbers for indices in computer science, generally. Ever. The solution to this if you want to use a midpoint RK-method of integration is to plot twice as many data points as the resolution of the answer you desire. Then you can use the data points that are relevant to each method. 
ELI5? I'm studying mechanical engineering, so this definitely is not my strongest area.
Think of your computer as made up of a large series of number boxes. You can tell the computer you want 1000 or 2000 number boxes to store numbers in, and if it has that many, it will give them to you. However, if you tell it you want 1000.5 number boxes, it blows up. It doesn't know what half a number box is, or what it means. Long story short, if you want nstep resolution of your integrals, you need 2*nstep values of your function, so that you can capture those midpoints. Because they aren't midpoints....they're just more points.
I usually almost always do reltol. Is it better to do abstol if we know, for example, that Newton's method should always go to 0? And good point on the iterator, I missed that. That's why I suggested earlier up to use x_curr and x_prev.
It's not a class task, I'm trying to implement a method which I found in a paper. "The first image supplied to mpegSize is assigned as an I frame and the second as a P frame." 
You're going to have to have some understanding of what those terms mean. Matlab can't help you if you don't understand the math. 
Need to drop element 3 from a vector(v)? You can do it as &gt; v(3)=[] Need to drop element 3 from a cell array(c)? you CANT do it as &gt; v{3}=[] but this works fine &gt;v(3) = [] I thought it was nifty.
The code is literally right there. The plotted curves are more or less described by the legend. What progress have you made so far?
I understand the basics of the terms. That an I-frame is a frame with the largest quality and are the frames that other frames are predicted from. Whereas a P-frame is an encoded frame which is based on the previous frame that being an I or B frame. 
Yeah... this has been tripping me up lately. Here's a [blog post](http://blogs.mathworks.com/loren/2006/06/21/cell-arrays-and-their-contents/) with more information about this.
I tend to pull the full file into a cell structure using textscan then iterate through the lines to parse out what I need. This seems to work pretty well when the usual import functions don't play nice with the format of my data
 nstep=40; dt=0.2; f1=zeros(nstep,1); f2=zeros(nstep,1); f3=zeros(nstep,1); f4=zeros(nstep,1); fex=zeros(nstep,1); t=zeros(nstep,1); t(2)=0; f1(2)=1; f2(2)=1; f3(2)=1; fex(2)=1; for i=4:nstep f1(i-1)=f1(i-2)-(f1(i-2)*t(i-2)*dt/2); %Euler half f2(i-1)=f2(i-2)-(f1(i-1)*t(i-1)*dt/2); %Backward Euler half f3(i)=f3(i-2)-(f2(i-1)*t(i-1)*dt); %Midpoint Rule full f4(i)=f4(i-2)-((((f1(i-2)*t(i-2)))+(2*f1(i-1)*t(i-1))+... (2*f2(i-1)*t(i-1))+(f3(i)*t(i)))*(dt/6)); %Simpson's Rule full t(i)=t(i-2)+dt; fex(i)=exp(-(t(i)^2)/2.0); end; plot(t,f1); hold on; plot(t,f2,'r'); plot(t,f3,'k'); plot(t,f4,'g'); plot(t,fex,'r','linewidth',3); set(gca,'fontsize',24,'linewidth',2); So I essentially double all my i values to get rid of the 0.5's. This didn't give an error, but my plot for midpoint rule is an oscillation. It doesn't help that I'm not sure what to expect out of my plots.
You are going to have to play with the ranges and the iteration factor to get the right answers. Basically you are getting around the fact that the computer can't use half-indicies by doubling the amount of indicies and skipping some where appropriate. Consider the 1-to-1 correlation that you can set up with the following sequence of numbers: If you write down all the indexes the way they are written down in the math book, it looks like this: N = 0, .5, 1, 1.5, 2, 2.5, 3, 3.5.... However the **same** indexes in your program should be assigned like this: N = 0, 1, 2, 3, 4, 5, 6, 7.... In this way, **the n = .5 point in the text book corresponds to the n = 1 point in your program, the n = 1 point in the text book corresponds to the n = 2 point in your program, and so on.** There's the same amount of points, and they have the same function values. But the index values (think of them as their names, if that helps), are different.
Thank you
This may be well known to many, but just in case, I want to talk about index arrays. Consider the following example: &gt;&gt; A = 1:10; We can get the elements of `A` that are, say,`&lt;=5` by doing: &gt;&gt; A(A&lt;=5) But, let's look more closely at the indexing: &gt;&gt; disp(A&lt;=5) 1 1 1 1 1 0 0 0 0 0 We know we can access this with &gt;&gt; A([1,2,3,4,5]) as well. What `A&lt;=5` is doing is: &gt;&gt; A([true true true true true false false false false false]) Obviously, you would never write the above in code. If you wanted `[1,2,3,4,5]`, you would do &gt;&gt; find(A&lt;=5) What I am getting at is, there are two ways to accesses elements of an array: logical indices and directly listing them (not sure of the technical term). And, note that A(find(A&lt;=5)) &lt;==&gt; A(A&lt;=5) The key is that the `find` command can be a bottleneck
Do your x and y coordinates form an evenly spaced rectangular grid or are they kind of randomly sampling the 2D plane? If you have an even grid then I think the solution is as easy as summing up the number of points at which the wind speed is within the 38-49 m/s range and multiply by the area of a grid unit. I'm assuming your situation is the latter case though, am I right?
First of all how are you plotting the data? Secondly from a quick glance it just looks like you're out by a factor of ten.
Max has a second output which gives you the index of the maximum element of a row. So you can type v = [0,2,4,6,4,2,0]; [m,i] = max(v); % i should equal 4 instead of v = [0,2,4,6,4,2,0]; m = max(v); i = find(v == m, 1, 'first'); % i should equal 4 The first way can be vectorized, when v is a matrix instead of a row. This is much much much faster than looping through rows and doing it the second way. I've been using matlab since 2005, and today is the first time I found out about this. 
I've never really used the contour plotting command before, but if it's similar to the mesh plotting command you may have to just add in some x and y arrays. Which will look something similar to: contour(x,y,Data) where x, and y are arrays going from 10 to 200 in steps of 10. I'm on my phone at the minute so I can't check if I'm correct, just have ago and see what happens.
Definitely looks like it. I ended up doing the same thing manually, but this will save me time in the future! thanks for your post.
You are basically correct. The `@` symbol tells matlab what you independent variable(s) is in the function. So it doesn't go looking for a variable `x` in the workspace. The `.'` is mostly the transpose, but it is the element-wise transpose. If `x` is a real matrix, it is the same as without the `.`, but without the `.` if `x` is complex, then the `'` transposes and takes the complex conjugate, with the `.'` it doesn't take the complex conjugate. 
I think because the code isn't set as code (no four spaces, no \` around the code) the \*s made it make italics. I think the code is actually: 0.5*x.'*Q*x If you look, the `x.'` is italics
Ok. I swear when I first opened the page, there were no other replies...
Thank you :) 
[Switch to 15b, if you haven't already.](http://blogs.mathworks.com/loren/2016/02/12/run-code-faster-with-the-new-matlab-execution-engine/)
For two vector inputs (e.g., if you want to find the closest value in a vector A to each value in a vector B), use `interp1` with 'nearest' as the interp method (to avoid out of bounds NaNs, put `inf` or `-inf` on each end of the lookup vector--but generally only do this with 'nearest', not any other interp method). Likewise, for matrix inputs, use `interp2`. 
`max` (and `min`, which has an identical second output, and `sum`, `prod`, `any`, `all`, `mean`, `std`, and `diff`, to name a few) also can take a dimensional argument. So, if you want to now the column in which the max value in each row of a matrix occurs, use: [~, colum] = max(A, [], 2); (The default dimension is 1, so `max(A)` operates on each column by default). If you want the index of the max value of a multi-dimensional matrix, though, rather than the max along a particular dimension, use: [~, idx] = max(A(:)); The colon operator, when used without any other index arguments, forces any array (including cell arrays) to column. On a similar topic: `find` can return two outputs, but doing so changes the first output: [idx] = find(A) But: [row, coumn] = find(A) The tilda counts, so: [row, ~] = find(A) Is different than calling `find` with a single output. You can always use `ind2sub` and `sub2ind` to convert from `[row, coumn]` to `idx` and back, but, since you generally will only need one or the other, it's usually easier to use the outputs from `find`. 
On the topic of indexing cell arrays: Several Matlab functions (e.g., `regexp`) return nested cell arrays that can be irritating--I'll frequently find myself with an Nx1 cell array of 1xM cells (from a regexp operating on an Nx1 cellstr with 'once' and 'tokens' as options, for example). Fortunately, it's easy to flatten this to an NxM cell array--as long as all of the nested arrays are the same size. For a cell array C of size Nx1 where each cell contains a 1xM array, all of a single type, use: C = vertcat (C{:}); Now C is an NxM array of the same type as was in each cell of the original array. If each of the nested arrays is Mx1 rather than 1xM, either use `horzcat` in the same way to get an MxN array, or use `cellfun(@transpose, C)` to transpose the nested arrays prior to flattening C. If some of the cells are empty (e.g., non-matching regexp), you can either use the code from above (which will return an array of size (N-P)xM, where P is the number of empty cells), or you can use a two/three-step process to get back an NxM cell array with P rows of empty cells: empty = cellfun('isempty', C); if all(empty(:)), error('all cells are empty'); end D = cell(size(C, 1), size(C{find(~empty,1)}, 2)); D(~empty, :) = vertcat(C{:}); 
This is excellent. 
That would certainly work. In my uses, I was actually always more interested in the index anyway. Also, I am not sure if that would be any faster and/or easier. It also may depend on the length of the vector itself.
This actually does down many of my programs that deal with big data/ many function calls. I reverted to 15a
It's way faster than looping over either vector, at least for large vectors/lots of iterations (I've usually seen it making a pretty dramatic difference by few hundred thousand elements per vector). If I recall correctly, and it can return an array of indexes, at least for some data sets. Edit: clarification about indexing and vector sizes. 
ooh ooh do my flair
Instead of `hold on` use `subplot(2,2,i)` Also, don't use `i` as an index because of the risk of collisions with imaginary numbers.
Yes! Also as advice to newcomers to MATLab who are doing homework, learn how to use the publish option if your lab doesn't teach this. It will save you time and effort. 
In addition, depending on where inside a function this is, you may need to use drawnow to force MatLab to draw the plot before everything else is finished. 
Using Matlab syntax because I'm not familiar with Scilab and assuming you have the values imported as an 1 x 28800 array, you could use a for loop like minuteAvg = zeros(1,1440); for k = 0 : 1439 minuteAvg(k) = mean(data((k*20+1) : (k*20 + 20)); end Or you could rearrange the data such that you have columns of length 20 and then average all the columns: tmpMatrix = reshape(data,20,1440); minuteAvg = mean(tmpMatrix); It'd be also possible to do this in excel I guess but I'm not familiar enough with that to do it efficiently.
You should just explain what your problem is in the post; it is possible that someone can help you without the need for them to understand Kriging or even surrogate modeling in general. Having said that, I have some experience with surrogate modelling, though not with Kriging in particular.
thanks that worked. Two other questions now... How do I create a title for the whole plot? And, how do I create dynamic titles for each subplot. By this I mean I want each plot title to say Y = iX (Y = X, Y = 2X, Y = 3X etc). I tried title(i) which gave 1, 2, 3 as titles, and title('Y = '), but I'm struggling to combine the two to get something like title('Y = ' i 'X') Edit: I got the second issue using sprintf. Still stuck on the main title though
A better tool for this is memmapfile; it maps a whole file to a variable, but doesn't load the file into ram. HDF5 is my favorite scientific file format, but man, that low-level file I/O is horrendous. Steep learning curve. 
When using `pcolor` you can return the plot handle. When using `colormap` you can hand in an option input, which is a plot handle. Thus, your code would look a little something like this: h1 = pcolor(X1,Y1,C1); h2 = pcolor(X2,Y2,C2); colormap(h1, map1); colormap(h2, map2);
I think my code is now correctly formatted. Apologies for the mistake.
It is now back. And no worries, just trying to make it easier for everyone else who reads it. 
Yes. So what's not working, what have you tried?
A kernel is a good guess, but not exactly. Further hint: r stands for rate. 
Here's one way to do it: range = find(S &gt; 10 &amp; S &lt; 20); [maxp, indexOfMaxPWithinRange] = max(P(range)); P_At_Max=P(range(indexOfMaxPWithinRange)) S_At_Max=S(range(indexOfMaxPWithinRange)) You're defining the range of indexes you want to search over, then finding the max of just that range. It's important to note that the index that the max function will return will be the index within the *range* variable, so the index of the max within P is range(indexOfMaxPWithinRange)
I believe the MATLAB function `eval` is what you want, you can read up on it [here](http://www.mathworks.com/help/matlab/ref/eval.html). 
Ah thank you so much! I also realized that the arguments need to be apart of the string before it's evaluated. 
Maybe you just need `run`? 
The random variable is a good idea for bugging. How ever kinda got lost in the second part. So is my foreground for the loop ok? And if it is it will call out each variable 1 at a time in a sense until it's been paired with ever counter part?
Good idea. I plan to add a PDF document with visuals at the file exchange page.
If your data is stored in a matfile, you can also use matfile(), which does the same thing. 
The issue with matfile is I found it to be INCREDIBLY slow compared to using h5write. I believe this in part to be because of the compression that is forced when using matfile. I actually timed the same piece of code earlier today using both the matfile and h5write methods....the h5write code took ~10 minutes to run, and the matfile code took nearly 2 hours. Im not sure if this is always the case, but for what im doing matfile is way to slow to0 be usable.
This might not fix it, but try changing your index variable in the for loops from "i" to something else. Even if this doesnt end up being the solution its probably for the better, since using i as an index variable can easily get confused with i=sqrt(-1). You should avoid using "j" as an index variable for the same reason. Also, you have a nested loop that uses the same variable. Nested loops have to have seperate variables or it doesnt work right.
Make sure you don't use the *end* keyword with matfile because this will force the whole variable to be loaded. This is mentioned in matfile documentation.
For backward Euler, shouldn't you be using the current time t(i) rather than t(i-1)?
Yeah, I know how to use subplot, but when you open a figure and then open the plot tools and dock figure options you can slip the figure into tiles. I am wondering how to fill these tiles with separate figures.
You want : so that i and j become vectors starting at 1 going up in increments of 1 to the length.
You could do it recursively - but it would be a headache. Some problems are by nature iterative. The key is not to naively eliminate loops - but to eliminate them and utilise them where appropriate.
The MATLAB editor does allow you to insert spaces when the tab key is pressed. I think it might be the default. You can also control how many spaces it inserts.
The error message is pretty descriptive, why don't you go through your vectors and find out for yourself? Should be easy to spot It does have nothing to do with the convolution itself
I'm doing it in C++ and finding hidden pairs literally requires me to have 10 loops within themselves. 
You can solve sudoku using linear programming, which matlab can do. I don't think you'd need yo write any loops, although the solver would probably use loops under the hood.
&gt; Hi again. I finished the code but I would like a final opinion on it. I think I completed my task too so that's a thing. &gt; &gt; &gt; &gt; c=[0 1 2]; &gt; &gt; d=[1 3 5 7]; &gt; &gt; for i=1:length(c) &gt; &gt; for j=1:length(d) &gt; &gt; c(i)*[2;1]+d(j)*[0;1] &gt; &gt; end &gt; &gt; end 
It's a neat challenge, and I don't mean to belittle it. But the delineation between "Matlab loop" and "not Matlab loop" is somewhat arbitrary and ill-defined. You could write a mex solver, and that wouldn't use any "Matlab loops". You could probably use accumarray, bsxfun, etc, do those count? What if you figure out how to solve it with 9 iterations, and then unroll that loop? 
I use bsxfun. :)
&gt; What if you figure out how to solve it with 9 iterations, and then unroll that loop? Well...I'd say ok provided there was some proof that those 9 unfolded iterations would solve EVERY sudoku puzzle you could throw at it. 
I don't think it's possible. You may be able to avoid iteration but only by hiding it with another construct.
I'll check it out. I nearly guarantee however it's using iteration internally.
Thanks for the info, any ideas on how to solve given problem though?
great start, but it is incomplete, as technically your task specifies to display using the display command. I would do this: clc; clear all; close all; c=[0 1 2]; d=[1 3 5 7]; for i=1:length(c) for j=1:length(d) lincomb{i,j} = c(i)*[2;1]+d(j)*[0;1]; disp(lincomb{i,j}) end end The first line is something I include at the beginning of all of my codes unless they take quite a long time to run. It clears the display window, clears all of the variables, and closes all of the windows. It technically is not necessary here. The rest is the same until the nested for loop. Define a cell variable lincomb. A cell (notice the {} instead of the []) is basically a matrix, but instead of strictly numbers it can have lots of other types of variables in it. In this case it is storing the vector answers in each of its position! Afterwards, simply display the current position. Not the perfect way of doing it, but extremely straightforward. I don't usually give away the answers, but you had it anyway! I do, though, hope my explanations help!
There is probably a bug in the code needed to retrieve or display the popup info. Are you making custom classes?
This has happened to me while making classes that had custom display methods or get methods.
It seems like it could be something to do with my work laptop- work locks it down and modifies so many things that software just has problems sometimes. Thanks for the tip. 
I'm not, no. I did some experimentation and noticed in my code it was working fine, and then after I plotted something it stopped working. Does that offer you any insight?
I could not find any way to do it with smooth, conv, or filter - however, nlfilter allows definition of arbitrary sliding window functions.
True because those other functions are linear meaning that you can only scale and add/subtract the values in the sliding window. nlfilter (Non-Linear Filter) lets you specify and arbitrary function to apply to the values in the neighborhood. Multiplying all of the numbers together is a nonlinear operation.
Ah, very true. I always loves terminology lessons, helps me learn faster in the future. Thank you!
You can convert a nonlinear operation to a linear one through the kernel trick. In this case by applying a `log`.
The data file contains just recordings all recorded at 0.020 sec intervals each. I have the data saved a .txt but whenever I attempt to import the text file its assigns the data either by single column rows containing about 8 values and many rows; or the same data by row separated by columns. I will try your method above too hope it works and thanks!
Good point, though we'll need to watch out for roundoff errors especially if we're looking for exact matches (prod(X) == 13): % define the data X = [1 2 3 4 5]; Y = log(X); % look in decimal prod(X) % 120 exp(sum(Y)) % 1.200000000000000e+02 % look in hex num2hex(exp(sum(Y))) % 405dfffffffffffe num2hex(prod(X)) % 405e000000000000
A bit of shameless self promoting, checkout my cheat sheet in the right side bar.
&gt;I'm more so struggling with where to begin/the general concept involved. A good rule of thumb is to carefully read the assignment for hints like: &gt;use linspace to create the mi/h vector. And then to go read the helpful and thorough matlab documentation on any functions that are mentioned: doc linspace That ought to get you started.
I wish I could comment, but I honestly have not tried Octave yet. I have heard great things and seen some people get in FreeMAT vs. Octave debates before, so I'm certain in reality it's just as good. Each have nuances over the other that make them better for certain tasks, I'd imagine.
First, I didn't write clear all I wrote clear. Clear just clears the variables from the base workspace. The [documentation on it](http://www.mathworks.com/help/matlab/ref/clear.html) doesn't say that using clear decreases system performance but it does say clear all does. Second, I would argue that there are very good reasons to place those three lines at the top of every script. I've never written a script where I didn't. Sure, you would save an infinitesimal amount of CPU time by not re initializing every variable, but you would certainly lose more time in debugging especially if you regularly run scripts with different settings. For instance, if you decrease your timestep in a numerical differential equation scheme, you'll get a bunch of crap at the end of your loop variables from your last run. If you don't clear or close the figure you'll just end up plotting over your previous plot. If you use clf instead of close all you'll only clear the last figure and then your window is full of old plots. Sure you can functionalize everything you do and end up with twice as many files in your directory and not have access to the function workspace after your script has run. But that approach has never served me or anyone I've ever worked with well. I don't see the benefit of that kind of scoping at all. I write functions for procedures that I need to run over and over again and that's it. It's much more beneficial to be able to play around with your results in the command window after the routine has finished.
Well, I like Octave because I can install it on my Android device! Imagine running most .m files on your phone! 
What do you need help with? The basics of MATLAB, importing data from .mat files, calculating centroids, plotting figures...? Try to scope your question to something that can be more directly answered :)
Matlab is pretty good about naming functions in ways that make sense--if you want to find the mean of a set of data, you use `mean`; if you want to plot it, use `plot`. It's not quite that simple, of course--you have to pass your data to those functions in a way that the functions do what you intend: try `doc mean` or `help mean` (/plot) and see what you can figure out. If you still have problems, tell us what you've tried, what you expected to happen and what actually happened. 
Right so I've imported my data: AA is the angle of attack data and is roughly -10 to 6, then theres the Cp data which less -1 to 1 roughly, and finally the X/c data which is 0 to 1 as its a ratio of length. So below I Transposed my Angle to attack data and transposed it to make it the same size as my Cp matrix. I also did this with the X/c (XC) data. Ive seen the code you posted but I'm not sure how to translate that to my variables. AA=AoA' A=AA(ones(1,34),:)'; xc1=xc'; XC=xc1(ones(1,34),:)'; contourf(XC, A, Cp) 
Err, that's not a piece of code, I was making the point that if Cp is a 17 x 34 matrix, then length(x) should be 17 and length(y) should be 34.
as you've probably gathered I'm shite at matlab. anyway, yea the cp is already 17x34 and I made the other two variables 17x34 by ones. So they are all the same size. if i do the surf function a get nice looking thing but the contourf gives a line as if the cp isn't plotting correctly.
The point is that they're **not supposed** to be the same size. If Cp is 17 x 34, then x should be 17 x 1, and y should be 34 x 1. x and y gives the axes for what Cp is plotting. It's exactly the same as if when you do: x = linspace(0,1,501); y = cos(2*pi*3*x); figure(); plot(x,y); Now, you COULD just do: figure(); plot(y); but then the axes don't make sense, right? So we tell Matlab what it is we're plotting on the x axis by saying figure(); plot(x,y); It's the same with contour and contourf. Try this on for size - just do: figure(); contourf(Cp); That should give you the plot that you want, but see how the axes are just numbered rather than having a meaningful value. Well, it's exactly the same as when you do plot(y) without specifying what x is. Except with contour plots, you have *two* axes that you need to specify rather than one.
I use [MATLAB Drive](http://www.mathworks.com/matlabcentral/fileexchange/51940-matlab-drive). I've used Google Drive too with success. I set the path to be $ML_DRIVE/projects or $GOOG_DRIVE/projects. Seems ok to me. I add this to the default path, not replace it. (NB, I work for MathWorks, but 0 part of my job is sales, support, etc.)
//*edit: also, 4 spaces starting lines you want displayed as code helps readability// You can use a [RGB color triplet](http://www.rapidtables.com/web/color/RGB_Color.htm) (&lt;-- shamelessly I admit to using this site) to specify any color and any number of colors for your lines. You'll need to use a name,value pair for the [line properties](http://www.mathworks.com/help/matlab/ref/chartline-properties.html). Simple example: xx = 0:0.01:(4*pi); yy = sin(xx); plot(xx,yy,'color',[1 0 0]); would make a red sine curve. For your N (I'll use 15 here) experiments, you could use a cell array of your RGB values: ptcolors{1} = [1 0 0]; ptcolors{2} = [0 0 1]; ptcolors{3} = [1 0 1]; ..... ptcolors{15} = [0.5 0.5 0.5]; and to plot this: figure; hold on; for ip = 1:15 plot(xx,yy(ip,:),'color',ptcolor{ip}); end Here to condense things I've assumed you've put in each row of the yy array an individual experiment (i.e. NCF1 is row 1, .... NCF6 is row 6). Now, if each experiment is different size/length/timespan but you're plotting a span that covers all experiments, you'll have to keep your (cumbersome) way, but using the name,value spec for 'color',[R G B] still stands as how to force your own desired colors.
I GOT IT, it was backwards. found a lovely function called flipper which reversed my array. thanks for the help :)
Setup a github account. Version control is amazing and will change your programing life.
What have you tried? 
Github plus cloud storage is also great. Saves a lot of unnecessary push / pulls so what you have is available on the other PC. 
Ok, I understand that I need to have the start point at the end. The way the script file is written, I don't see a way to edit or add to the matrices that define the x and y components without messing up the the rest of the script. 
clear clc load plot_5 x = x'; y = y'; xavg = mean(x); yavg = mean(y); center = [xavg yavg]; disp('center point of polygon is:') disp(' x= y=') disp(center) newx = x - xavg; newy = y - yavg; newx = newx'; newy = newy'; disp('new nodes (x,y)') disp(' x y') new_nodes = [newx newy]; new_nodes = new_nodes'; fprintf('%10.2f %10.2f\n' , new_nodes) dist_nodes = sqrt(((newx .^2)+(newy .^2))); dis_mat = [newx newy dist_nodes]; dis_mat = dis_mat'; disp(' x y dist from (0,0)') fprintf('%10.2f %10.2f %10.3f\n' , dis_mat) plot(newx,newy);axis([-10 10 -10 10]) here is the script so far.
Matrices can always be modified, either in line or more permanently. One easy way is to use `horzcat` or `vertcat`, or to use square braces, to append a value. For example, for an Nx1 vector `A`, you can append a value with: `A = [A; value];`. You don't have to assign it back to the matrix if you're passing the result to a function, though--`sin([x; value])` returns the same array as if you had assigned the value to the end of `x` and then passed `x` to the function. 
Why is this dumb? Serious question. I may or may not currently store my code on Dropbox. Maybe.
I interpret it as cloud storage at the expense of VCS. I always make a repo. I also almost always use cloud storage. 
Put an if statement in there to filter out the big ones, if x(i)&lt;8 ,y(i)=x(i), else y(i) = something. Sorry for the half assed answer but it'll get you started. 
 null(A)
There are two ways I can see you doing this. One is to create two different figures and use copyObj to assign them to a new parent. I might be able to find some example code of this somewhere, but it's a bit less straightforward. The more straightforward option is to a create a container matrix that has both your images in them. So for example, im1 = sign(randn(200,200)); x1 = 20; y1 = 20; im2 = sign(randn(200,200)); x2 = 280; y2 = 280; im = zeros(500,500); im((1:+size(im1,1))+y1,(1:size(im1,2))+x1) = im1; im((1:+size(im2,1))+y2,(1:size(im2,2))+x2) = im2; figure(); imagesc(im) colormap('gray') Or something like that. 
Each entry in z corresponds to a value of x and a value of y, and so z should be a 270x270 matrix, not a 1x270 vector. How would you create a 2D plot when your z-variable is just 1D?
Reading around this does appear to be unsafe. I'll look at it some more. 
Your answer is actually more advanced than I think you realize, and is actually a simpler/quicker way of doing this than using a loop (there is none even needed! but I assume this is an intro class and the loop is meant to be use for practice, along with if-statement(s)). What your answer is doing currently: y=(x&lt;8) is returning 0s and 1s in y where your vector x is indeed x &lt; 8. See for yourself -- I bet y evaluates to [1 1 0 1 0 1 1 0 0 1]. This is simply the logic "is x &lt; 8, at this particular index? 1=yes, 0=no." You could thusly get the *acutal* x values you want by then calling: x(y) and that should give you [-3 5 -0.5 5 1 0.25]. An *even quicker* way of doing this would simply be calling x(x&lt;8) Now, using loops, and you'll need an if-statement like the other poster suggested (though the logic isn't exactly what you'll need), you'll have to do the following: 1) loop over the length of your x vector (you do) 2) check if that particular index in x contains a value &lt; 8 3) store that value in y 3.5) think of a way to have these values store and not just overwrite themselves in y Step 3.5 is a tricky one for newcomers, as they will run into this problem where they think they're assigning things into y correctly only to come to find they've only assigned what amounts to the last successful iteration of their for-loop and if-statement. .. just a word of caution. Hopefully you'll have learned your current code, while not the best, a) gets the job done and b) does it better than your assignment suggests (meaning it can be done w.o loops). But, for the sake of your assignment and learning (which is what intro classes is all about), try out making it work with a for-loop and if-statement.
http://octave-online.net/
The `@` symbol indicates an anonymous function, but you can use "normal" functions as well using separate files. You can define "subfunctions" as well. [Have a look at the documentation](https://nl.mathworks.com/help/matlab/ref/function.html).
A contour plot shows the lines in 2D space where the function z has a constant value. For example, a line might be defined by the expression x+y = 2, where a line would be drawn on the plot that satisfies the equation for z. For the contour function, you don't need to strictly specify x and y as the function will still draw contour lines at the places where z has a constant value. However, the axes won't make much sense in this case so you probably do want to specify the x and y axes. So, you can probably see then that your matrix z should contain for each entry an evaluation of your function at a specific value of x and y. For example: x = linspace(-2,2,501); y = linspace(-2,2,501); z = zeros(length(x),length(y)); f = @(x,y)(exp(-(x.^2 + y.^2))); for i = 1:length(x); for j = 1:length(y); z(i,j) = f(x,y); end end figure(); contour(x,y,z); Now, there are actually much better ways of doing this: [X,Y] = meshgrid(x,y); z = f(X,Y); but it's probably less obvious what's going on when we do it that way. So no, it shouldn't repeat in the columns - the ith row and jth column of your matrix z should correspond to a function evaluated at the ith value of x and the jth value of y. 
Yes, `deal` checks to see if the number of outputs is equal to the number of inputs. 
The way I always work in Matlab is that I have a base directory with the only files there being some scratch files and one called `add_to_path`. Inside `add_to_path`, I have different options to call things like addpath(genpath('/path/to/my/files')) and then I keep the files in git for version control. This is great since I can also define specific "toolboxes". I have one that is my general purpose tool box and then I have project/application specific. I host my git repos on either my webserver ([webfaction](https://www.webfaction.com/)) or a server at work. Or, sometimes both since you can have multiple "hosts" (remotes) in git. It all depends on the actual project, whether I am allowed to let it leave the network, and where I need access to it. I've also heard of people using DropBox, but know that Dropbox is not a version control system. It can serve some of the same functionality, but I wouldn't rely on it.
I think it's fine to give advice to people about the Matlab interface and stuff - but if it's an issue with their code because they're not using 'real' Matlab then I'd probably be useless as I only use Matlab. I guess the same is true for lots of people here.
You're reading too much into this. It's just a joke. 
It's better than "because we haven't learned python yet" ;)
Replace the for loop with theta=linspace (0,360,n). This returns a vecotr of n values evenly spaced between 0 and 360.
Thank you so very much!
You don't really "fit" a Fourier series. The fft function lets you do a Fourier transform on your signal. If you're trying to code up something that lets you do one yourself, you should give us exactly what exactly you're trying to do, what you've tried so far and where you're stuck. The [homework sticky](https://www.reddit.com/r/matlab/comments/462uwe/submitting_homework_questions_read_this/) gives a good summary of how to appropriately ask questions on this sub.
I like this. I've moved as much as I can to Python but sadly I just started a project where I need to use a lot of legacy Matlab code for some filters, etc. I may spend a bit of time playing with interfacing them, but honestly at a certain point, it won't be worth the effort. I guess I'll just move back and forth.
http://www.strongmotioncenter.org/vdc/scripts/stnpage.plx?stations=588 look aroubd this site lots of good stuff
Figure windows can capture key press events which can then be filtered to particular keys, but I don't think the root window has an easily-accessible way to do so. You can use an infinite while loop with `input` to repeatedly wait for user input and respond appropriately (including prompting the user), but it will only output the value once before code execution is blocked by user input--which is probably a better solution, since "continously" printing the value would rapidly hide any prompts. You might be able to capture keypress events or retrieve typed characters from the command window, but it won't be nearly as straightforward as I think you'd like; if you want to go that route, undocumented matlab has a function called `cprintf` on their blog/the Mathworks exchange, and it mount have some useful snippets--but it won't be friendly to Matlab beginners. More importantly: why do you want to do this? There might be a solution that would fit your needs better than what you're asking--displaying the current value in a window and enabling keypress callbacks to change it, for example. 
It's for a senior capstone project where we are making a semi-automated drone. So I made a script that outputs a pulse position modulation signal and I want to connect my laptop to a radio transmitter's trainer port (basically this lets me feed commands to a drone from matlab by using the soundfc function to output the signal). Anyways, I want to be able to use WASD keys to change the values of my signal's matrix, which in turn would let me fly the drone using matlab. It was part of our sponsor's requirements that we make a matlab script that will be able to operate the drone.
My thoughts: Octave's great, but MW dropped a nuke on them when they introduced their noncommercial use licenses. It's scary how much cool stuff $500 buys you now. Octave's audience is probably limited to the people for whom that's too much money.
You know you can get the student license for like $50? Also many schools have a student edition that you can register through the school's network.
Using linspace is definitely the right solution, but you should also read your code and understand why it did what it did. It was doing exactly what you were telling it to do, so understanding how loops work would be valuable to you. 
No problem. If you run into problems, feel free to pm me. 
$500 is the cost of the Matlab noncommercial license *with* most of the toolboxes that tend to be used in EE. And those toolboxes are also the biggest competitive advantage that Matlab has over Octave. But yes, I do agree with your main point.
You could start here: http://www.mathworks.com/matlabcentral/fileexchange/44077-batch-job Or, here: http://www.mathworks.com/matlabcentral/fileexchange/13775-multicore-parallel-processing-on-multiple-cores
Thank you, I'll give it a try!
I have matlab at work on a remote machine which is fine since I work via the command line anyway. My manager has told me I can get a copy on my laptop (which I can take home) if I need it. But, personally, I use it so little now that I really can't justify spending the money. For the most part, I just don't use Matlab if I am away from work (or not on the VPN but that is slow). I may try Octave. And, I used to be a grad student and had a license on my home machine but that expired and I am not paying for it. I installed Octave there but I am having trouble with plotting but I don't really care since I don't need it.
I won't go into details about how to approach the algorithm in this post (it's quite a monster!) but Matlab will happily compare multiple rows at a time. Consider the following: &gt;&gt; A = [1, 2, 3; 4, 5, 6; 7, 8, 9] A = 1 2 3 4 5 6 7 8 9 &gt;&gt; B = repmat(A, 2, 1) %create matrix with repeating rows B = 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 &gt;&gt; i=1; j=4; %indexes for rows &gt;&gt; block_1 = B(i:i+2,:) %one block of 3 rows, starting at row i block_1 = 1 2 3 4 5 6 7 8 9 &gt;&gt; block_2 = B(j:j+2,:) %another block of 3 rows, starting at j block_2 = 1 2 3 4 5 6 7 8 9 &gt;&gt; block_1 == block_2 %element-wise comparison (not useful) ans = 1 1 1 1 1 1 1 1 1 &gt;&gt; isequal(block_1, block_2) %array comparison ans = 1 Maybe this will help with your attempts so far!
I'll test it tomorrow, but last I tried it didn't work so well. Perhaps there was something in my iterator. I'll reply back later. Thanks though :)
Hi, I think im in your class, but this assignment is a bit tricky. I have struggled all weekend with it. A little tip i can give is check out the inverse of the images. I'(x,y) = 255 - I(x,y) Seeing this gave me a good start. From there you can take a look at the histogram and develop a method to use piecewise linear contrasting to get a greater range, this makes the assumption that a majority of the intensity levels will lie with in the pieces of a paper. Think of this as a range once you find the max intensity from there the values adjacent to it are most likely to also belong to the sheet of paper.
Notice that in the MATLAB editor `out` has a yellow-squiggly line under it? If you mouse over `out` it will pop up a tip: &gt; The variable 'out' appears to be changing size with every loop iteration. Consider preallocating for speed This means `out` has to get re-initiated every time through the loop. Instead, make `out` a variable full of zeros (or ones, or really anything) of the right size, something like out = zeros(r-5,c-5); This can speed up your code a whole lot. In fact, any time you see yellow squiggly lines in the editor, mouse over it and read the tip.
So you want to see if it enters any state it's been in before? Make a big-ass list of all the states it's been in before and compare at each step. If you're dealing with really big numbers, something like a set or other structure utilizing a hash would be more adequate, but I don't know enough matlab for that.
I feel like my method should work, though, and I'm just doing something wrong in trying to implement it. I don't have time to spend trying to come up with something new. 
plot(1:4) grid on set(gca,'Xtick',1:4,'XTickLabel',{'a', 'b', 'c', 'd'})
You could use a cell array, since a cell can hold anything. If you have to use a matrix, you could use a 3D matrix for greyscale, or a 4D matrix for RGB. In 4d, that would be for example [length, width, RGB, imagenumber]. Note that these are going to get huge if you try to load a lot of images into memory uncompressed at once. If you are more specific about your project, I'm sure there is a better solution that could be found. 
Just create a matrix to hold your results: Storage = zeros(prod(size(img)), nImages, 'single') Or whatever class you want, then loop over your database, reshaping each img into a one d vector. Storage( : , iCol) = iImg(:) I do this when prepping for PCA, and it works fine for images of higher dimension as well. 
So you are using a (very non-optimal) linear convolution. You can use the convolution theorem (Google) to do *circular* convolution instead. The only trick is making sure you pad with the mean of the image before using the fft, and after the ifft, you'll need to use fftshift, prior to trimming back to the original size.
This should be pretty straightforward using MATLAB's find command. All you need are the column indices that define the left and right edges, and the row indices that define the top and bottom edges of the page. Once you've converted to grayscale and normalized the histogram, you'll need to pick a threshold value to pass to find. Maybe start with 75 and go from there. Some pseudocode that may be helpful: % img has been converted to grayscale and its histogram is normalized threshold = 75; [row,col] = find(img&gt;threshold); left = min(col); right = max(col); top = min(row); bottom = max(row); That should give you enough to crop the image.
This could be due to several things. We need more details to provide proper advice. Your numerical integration software is likely attempting to plug-in a range of values for `x` and `y`. There is obviously some issues with what your integrator is attempting to do &amp; how your functions are setup. Maybe try using `trapz`? See the [Multiple Numerical Integration](http://www.mathworks.com/help/matlab/ref/trapz.html) section.
I think the easiest way would be to use diag(v,k) to create diagonal matrices with offset k. example: e = ones(4,1); S = eye(5) + diag(2*e,1) + diag(3*e,-1) If you want to create sparse matrices directly, you could use [spdiags](http://de.mathworks.com/help/matlab/ref/spdiags.html) &gt;A = spdiags(B,d,m,n) creates an m-by-n sparse matrix by taking the columns of B and placing them along the diagonals specified by d. For this, the columns of B would have to be filled with zeros at the right positions for all diagonals except the main diagonal. d would look like [-4 -1 0 1 4] Or you could do it iteratively adding the diagonals one by one &gt;A = spdiags(B,d,A) replaces the diagonals specified by d with the columns of B. The output is sparse. This way you don't need to add zeros to B because you can make B exactly the length you need in each step. It would end up something like A=speyes(559); %creates sparse identity matrix A=spdiags(ones(558,1),1,A); %adds ones ... 
I'll look into this when I add indeterminism into my simulation. I did it way more complicated than needed so a simple isequal(i,i+y); sufficed in the end, iterating on i and y. However, when things are fully modeled, I'd need a solution that finds the repeating element in a=[1 2 3 4; 1 2 3 5; 1 2 3 4; 1 2 3 6; 1 2 3 4; 1 2 3 5; 1 2 3 4; 1 2 3 5]; In this array, the sequence [1 2 3 4; 1 2 3 5] is the only one that repeats and only at row 5:8, but isequal and the other ways I originally tried wasn't so good at finding that. However, thats for later. I'll mark your post though :) thanks. 
Maybe I misunderstood your post, but you thinkin about det(matrix) ? My matrix must be square and while I can force it to be, it stops me from running my simulation more than a x cycles. That might be enough sometimes, but I would rather not limit myself to that. edit: det(testmatrix) finds only repeating rows, not repeating patterns. For example, if 1=2 all the time, then yes. det(x) works, and a nice method (thanks), but if you try to find repeating patterns in PI, if there were any, it would say yes even though there might not be. Kinda like if you want to test when 1=2 all the time, even though the first 1000 cycles 1=[1:1000]
First response to a google of `matlab rgb to cmyk`: https://www.mathworks.com/matlabcentral/newsreader/view_thread/260758 The first answer may be what you're looking for. Your image will be an m\*n\*3 array (the 3rd axis being R, G and B, probably in that order), so you just want to create an m\*n\*4 array and populate it using the formulae from that answer.
I'm not sure if this is helpful, but you can flexibly (although this is slow if that matters) grow a matrix as a loop continues. E.g., M = []; n = 0; while n &lt; 30, M = [M; n, 2 * n, n^3]; n = n + 1; end; Maybe a useful starting point. 
Not knowing your application, but you could try connecting one of the pwm outputs to a resistor and capacitor. The output voltage would be proportional to the pwm duty cycle.
Your post has been removed. There is not enough information here for anyone to help you, other than to do your homework for you. You need to show us what you've done/where you're stuck/what specifically you need help with. Posting the question and not offering anything else is not enough. Please read the longer guidelines [here](https://www.reddit.com/r/matlab/comments/462uwe/submitting_homework_questions_read_this/). If you add in the information, respond to this post and I will re-instate your question. 
It's not quite that simple to get something that works in general (even reliably across the 3 sample images the OP provided). You'd have to tweak the threshold value for each photo you are cropping to properly catch the edge of the paper given different backgrounds. Additionally this finds the very first pixels along the x and y axes that hit the threshold value, but the edge of the paper is a collection of many pixels. You'd get an unusably large number of false positives for this to work.
Yeah, the unique function works for deterministic patterns, 2 leads to 3 for example. For now, my matrix is produced deterministically so unique works. In the future however, I can only determine repetition by checking if something repeats "forever". So what I want is this: Imagine a indeterministic neural net (with spontaneus firing for example) where one row is the input to the next rows output, and so on. This kind of looped neural net or network will fall into 3 states given time: 1) network death 2) forever chaos, 3) endless repetition of some pattern. How to determine which of those three a current run is? How to determine the length of chaos until settling in 1 or 2? Is that more clear? :) At that point I might use some frequency analysis. FFT should pick up on any cyclical behaviour, as long as output is distinct enough.
In lines 69 and 70 you shift by xA and yA. xA is still defined from the last for loop (suspicious) as 2.5 which seems to be about the amount your output is shifted as well but what is yA? Maybe you need to redefine xA and yA in every iteration similar to what you did in line 18? To check your code it'd be helpful to reduce it as much as possible. For example does phiA behave the way you want or is it already shifted? If it's shifted you know that the error is in the last few lines.
http://i.imgur.com/wVIXtOQ.png Try using this and rotating the graph. If that's not the answer you wanted, try fiddling with the axial bounds as well.
oh wow, thanks! I just wasn't visualizing it correctly. 
I'm only familiar with ni instruments, but can you just do OutputSingleScan(&lt;outputsessionname&gt;,&lt;x&gt;)?
I've added my information
Use structures. You can store your parameters with params.m = m; params.n = n; etc. and then just pass params to your function like you want.
Could you try to rephrase this? I'm unsure what you're asking.
Well in this case since X=Y it's also 1. Are you asking this for the case where Y is some arbitrary function of X?
As /u/pdhoward said, structures are the way to go. You can just have a `parameters` structure. But, even better, you can do defaults as follows in the example below where I require `x` and `y` but the rest are options First, two notes: * **I didn't test this**. There may be small syntax errors * I will be including this some day in a Tip Tuesday) Example code: function [output] = yourFuction(x,y,optionsIN) % Documentation... % Set defaults: options.A = 'a'; options.N = 4784; options.yn = 'yes'; options.method = 'optimal' ; % Override defaults with `optionsIN` for opt in fieldnames(optionsIN) options.(opt) = optionsIN.(opt) end 
Also, to /u/cowgod42, thank you for caring about this! I am working with someone elses code and it is super, super messy. They have tons of useless statements and I keep getting bugs due to how I import things. They *try* to be advanced with allowing empty settings, etc so you end up with calls like functionXYZ(a,[],[],[],5,[],923,a) and it gets really hard to keep straight
np :)
You can also use the [`inputParser`](http://www.mathworks.com/help/matlab/ref/inputparser-class.html) class (though it can be overkill), or parameter-value pairs with `varargin` (as Matlab supports for `plot` and related functions). I usually find parameter-value pairs to be the most convenient as a user--you don't have to build a struct or remember a particular parameter order, and misspellings can't pass unnoticed. If you're going to make a defaults struct and assign the user's fields, i would recommend using `isfield` to check that all fields in the struct the user passed in are actually overriding fields in your defaults struct--else, a close misspelling could result in parameters being ignored without any warning or error. 
You want the second output of max() and min(), and you don't need find(). I know the editor is giving you a warning about using find(). Stop ignoring it. Read the documentation for max() and min(). Also, it's unlikely that you need arrayfun(). Your function f() should be able to take an array input and return an array output. If it can't, you should write it so it does. It's very rare that arrayfun actually needs to be used. 
Those aren't functions, they're arrays. Min will do this for you type doc min 
You're right. You're even right about the warning haha. Thank you! Much appreciated!
I know, just didn't know how it was like that. Figured it out though, I had to tweak the settings on it.
By default, the : operator indexes by 1, but you can make it index by whatever you want. So, you want 10 times the number of steps, then you say t=0:.1:2*pi; Or if you want a fixed number of steps you can use `linspace`. For 100 steps you'd say t = linspace(0,2*pi,100);
In lines 27 and 28 loop too often (you changed K to k in the retry but didn't change the loop limit). As A and B grow larger than the original sizes of the matrices (k x k), matlab will just add new rows and columns to the matrix. So in the end S and h are k^2 x k^2 matrices. The rows of these matrix are repeated k times because you for A = 1 to k you have the same value in centers(A,1) and then loop over all values in centers(:,2) and so on. Instead of creating the centers matrix that contains all possible combinations of xA and xB I would just use vectors x and y of length k that hold all possible values of xA and xB. Then just use x(A) and y(B) in the loops These vectors are really easy to create: Instead of x = zeros(1,k); for i = 1:k x(i)=spacing*(-n+i-1); end you can just put x = spacing* (-n : n) %(-n:n) creates the array -5 -4 -3 .... 3 4 5 
Try [axis](http://de.mathworks.com/help/matlab/ref/axis.html)([xmin xmax ymin ymax]) Your files are not public btw. 
Have you thought about using a window function instead of trying to trim the data to form complete cycles? It's much easier, and will still give you valid FFT data.
Yes that would definitely work, I was just hoping there was a way to do it without adding additional circuitry. Every time I use a PWM output it only varies the time between the digital on and off. I need a continuous 1.5V to leave the arduino. Thanks for the reply though!
Oh whoops that's my bad, but I figured it out just forgot to delete the post
i = [1:1:540]
What's the issue with that? Edit: Oh... nevermind, lol
No, we don't do this here.
Keep your racist comments to yourself.
When you define the function, you should use variables as the input. function [ distance ] = two_point_distance( points ) And the definition is usually in a file with the function name (two_point_distance.m). When you run it in the command window, you can enter in the numbers in place of the variable. &gt;&gt; d = two_point_distance([-3 2 2 -10]) 
They're teaching you Matlab for a reason. I was a demonstrator at my university throughout my PhD, and I've marked people Matlab assignments and you can spot it a mile away when someone else has done the work. More importantly if I had a hint you didn't do the work I would be grilling you and asking you what does every single part of your script do, in detail.
Hello, does the repetition also occur for subsequent rows? E.g. if 7 is the repetition of 1, is 8 the repetition of 2? If so, then you can use autocorrelation. Just reformat the matrix as a single row vector (or column, doesnt matter), but remember the number of rows you had before. Then just compute the autocorrelation of the vector by [lags,corr]=xcorr(vec,vec) where vec is your vector. this gives you the correlation with respect to the lags (shifts of your vector), and the maximum correlation will be at the lag where the vector starts to repeat. so [~,idx]=max(abs(corr)) will give you the index of the maximum correlation and lags(idx) the corresponding shift. To translate this back to the rows of the collumn, just divide lags(idx)/n where n is the number of rows and you are done.
Well... you won't even get to your while-loop as you don't have n assigned. I suspect your code errors out on this line while (abs(n-x) &lt;= tol) Also, you may want to reconsider your inequality there...
&gt; The roots of education are bitter, but the fruit is sweet. &gt; ~Aristotle Seriously, suck it up. You think checking out because the people you have to work with are idiots is an option? You're gonna have a hard life. 
Could be because he's teaching a dead language that is about as irreverent in industry as steam engines. 
What industry are we talking about? I think there's a reason why students around the world are learning (yeah, if they do their homework) MATLAB.
When you're scripting and debugging, remove the semicolons, have it print the variables and convince yourself each line functions correctly. Teaching yourself a good debugging mindset will get you further in the long run. Also, if you're debugging or writing somethi ng for the first time, get rid of the input prompts, those will slow you down.
gb2tumblr
I know you're learning but this is better i = 1:540 Perhaps in this context it doesn't much matter. The square brackets are a function call to concatenate whatever is inside. If there is nothing to concatenate, which is the case here, it's just an additional unnecessary function call for the interpreter. 
Also, if you wanted to do conditional, try something like this x = linspace(0,2*pi,100); y = zeros(length(x),1); % Preallocate y(x&lt;=pi) = sin(x(x&lt;=pi)); y(x&gt;pi) = cos(x(x&gt;pi)); plot(x,y)
Nice. Let us know how it goes
You should read the error message that I know you're getting. 
So do worse in more important classes to pass a completely irrelevant one? &gt; work smarter, not harder &gt; ~someone who gets it
I ended up switching from MATLAB 2015 to 2013 (I had both installed luckily) Let me try to clarify the trouble I'm having, just for future reference. I entered a function and tried to run it, but it came back as "not enough input arguments, would you like to set a new value as a default?" (then something about alt + enter) It is a prompt that pops up under Run in the editor. So I put in one of the values I was looking for, but now I can't seem to enter any other values into the function. Say I entered 1 into the value as a "default input argument", well now I can't run the function with 2 as a value because the function will always use 1. I guess a better question would be how to completely clear a function to clean slate?
Since you apparently know what is being used (serious question: what is being used?), why not substitute matlab with that instead?
Here is something that should produce the same result: x = data(:,2) %to clean up the rest of the code B = x( x&gt;=25 ); C = x( x&lt;25 &amp;&amp; x&gt;=2.5 ); D = x( x&lt;2.5 ); this works because if x is an array, x&gt;=25 produces a logical array that contains 0 at every index where x is &lt;25 and 1 at every index where x is &gt;= 25. Now as you can read in the error message, you can pass logicals as an array index. If you do so, it will return every entry of the array where the logical is 1 and omit every entry where the logical is 0. So if you use x&gt;=25 as an index for x, all the entries of x that are &gt;= 25 will be returned. Example: x = [5 1 4 2 3] ind = (x&gt;=3) %now ind = [1 0 1 0 1] x(ind) %produces [5 4 3]
oh, i made a slight boo-boo. The maximum of the autocorrelation will be at 0 lags, but you get another peak when the vector starts to repeat. So you take the number of lags between 2 subsequent peaks and devide this by the number of rows you had.
I don't know how computationally efficient this method is. Running a simulation now scheduled to take 50 hours. At the moment I merely count the number of unique bottomlevel states of the system (all information of the state of the system, not output), and count how many rows, or states, until a given row repeats (which gives me the block size of the repetition). Later, with indeterminism, I might need something like autocorrelation as it's unsure if it will repeat at all, but it might be very similar.
Apparently you're really set to not do anything with Matlab. Fine, power to you. But we don't do this here. Maybe /r/domyhomework is more to your liking.
Look in your workspace and see if the variable is empty. That is my first advice I will check the code when I come by a pc
Have you searched the documentation for date related functions? There's a ton of them. Something like this might get you going. datestr(datevec('2/1/2016 5:51')+[0,0,0,-5,0,0],'yyyy-mm-dd HH:MM:SS') [datestr](http://www.mathworks.com/help/matlab/ref/datestr.html) [datevec](http://www.mathworks.com/help/matlab/ref/datevec.html)
I don't think anyone asked for your opinion... 
It's laughable that you think your opinion matters.
You don't have to ask for my opinion. I'm gracious enough to give it to you anyways. I work at Lockheed and if you think Matlab and coding in general isn't important you won't get a job here or anywhere else. Every Mechanical Engineer here is well versed in at least one language and most of the time it's Matlab because it's good for interpreting data and solving DiffEQs. I'm assuming you are in college so it's a little late for you to have this attitude. Hopefully you are a freshman that hasn't grown out of it yet.
&gt; How can I do the same with live capturing from a webcam? MATLAB has a webcam data acquisition package. Check the documentation [here](http://www.mathworks.com/help/supportpkg/usbwebcams/ug/webcam.html). &gt; I would like to detect if someone shows rock, paper or scissors. How can I do that? This is non-trivial. You'd need to use some sort of machine learning algorithm for it to intelligently decide what configuration your hands are in. Perhaps if you put some kind of markers on your fingers and have it detect when it sees zero, two or five on screen you can avoid anything complicated. You'd need the person to be aware of what they are showing the camera though.
I got the answer than you. 
Good! Also be careful with ^ vs .^ and * vs .* if you're new to matlab. They do different things with scalars vs matrices.
thank you I figured it out using something similar: A=DATEdata; B=datenum(A); C=(B-.20845); D = datetime(C,'ConvertFrom','datenum'); E= datetime(D,'Format','yyyy-MM-dd HH:mm:ss'); cellstr(E); 
Okey dokey thanks for the heads up and thanks for responding so quickly to my posts. 
Okay thanks again, if I see any mech e's I'll pass the word on.
Oh sorry I missed the second part of his post. Yeah detecting if skin tone is present is pretty easy. Detecting hand shape is much more difficult.
Could you point me to basic info about window functions in matlab? I'm doing something similar, but am currently using findpeaks and am not completely satisfied. I might look into windowing
I am on my phone but look for things like array2mat or something. Or, just reallocate the final size and use indexing
You're very close. When you say you are having a problem making the input argument a vector, what have you tried already? EDIT: Looking at your example more closely, there are a few things I missed on first glance. (1) Take a look at the syntax for defining a function. Note the difference between []'s and ()'s. http://www.mathworks.com/help/matlab/ref/function.html (2) Then take a look at how to create a numeric array: http://www.mathworks.com/help/matlab/matlab_prog/create-numeric-arrays.html Here's how I think you should try to think of this. Say I gave you an array X which had all 4 components you're interested in, in the order you specified. How would you (a) define that (at the interactive command line) and (b) access each of the components (in programming, this is called *indexing*).
Yeah, I thought about `datenum` but using `datevec` seemed to make the operation more obvious and explicit. 
&gt; function distance = two_point_distance[x1,y1;x2,y2]; &gt; distance = sqrt((x1-x2)^2 + (y1-y2)^2); &gt; end &gt; Why do you have a semicolon separating your y1 and x2? It should look like this: function distance = two_point_distance[x1, y1, x2, y2]; distance = sqrt((x1-x2)^2 + (y1-y2)^2); end dist = two_point_distance(-3, 2, 2, -10)
As to why there is a semicolon, I was just testing out different things. I don't think my homework wants it to be [x1, y1, x2, y2] because it want's it to be able ti call with [ x1 y1 x2 y2]
Were you having problems with Matlab?
Yes, there are better ways. If this is a one-off that you'll keep in MATLAB, you arrange the data as a long form cell or matrix. You can Google wide vs long data to see what I mean. You could then "query" the data you need using various find, strcmp, regexp, and intersect functions.
I was unaware, also when I use your method I get this error Error: File: two_point_distance.m Line: 1 Column: 39 Unbalanced or unexpected parenthesis or bracket. I am inputting dist = two_point_distance([-3 2 2 -10]) into the command window. 
Get rid of the semicolon and open curly brace after the function declaration. [Here's](http://www.mathworks.com/help/matlab/ref/function.html) documentation on function syntax.
Like SamStringTheory pointed out, if the { between the function line and the a=... isn't a typo then that's probably the problem. Also, a cleaner and simpler way of doing that assignment would be a = mat(1,:); The colon operator tells it to include that entire dimension.
 Fs = 44100; % Desired sample rate in Hz t = 0:1/Fs:1; % Array of sample points in time, from 0 to total duration in seconds, in steps of sample interval f = 440; % Frequency of desired tone y = sin(2.*pi.*f.*t); sound(y, Fs, 16); % (wave, playback sample rate, playback bit depth) Apologies for poor formatting, I'm posting from my phone.
exactly. What would be fun would be to make another NN to classify my original NN state patterns. That might actually be quicker when number of states/timepoints reaches the hundred thousands.
It looks like you've already gotten help, but for future reference, if you're pasting code into reddit, please prepend all lines with four spaces like this to make it format like code. You can also use the back tick character: ` to add code `inline` 
It looks like you've already gotten help, but for future reference, if you're pasting code into reddit, please prepend all lines with four spaces like this to make it format like code. You can also use the back tick character: ` to add code `inline` 
 doc ifft The answer is there. Or read the documentation for indexing. 
Im not clear on exactly what you are looking to visualize in your stack of images? Do you want the outside of the object projected in 3D?
[sliceomatic](http://www.mathworks.com/matlabcentral/fileexchange/764-sliceomatic)
So I can force it to real value by symmetric flag? Because right now it's symmetric with the first N/4 and last N/4 similar being zeroed out. Sorry this is another question
Thank you! Btw. what do you think how could I continue this project?
Since you're already working with circles, you could try to detect coins. Here is a good tutorial: http://www.mathworks.com/matlabcentral/fileexchange/25157-image-segmentation-tutorial 
This is probably better suited to /r/compsci (although I don't post there, so check its sidebar for a better place to post to.) This should be a good start: [subset sum problem](http://stackoverflow.com/questions/18305843/find-all-subsets-that-sum-to-a-particular-value)
Can you use [imfindcircles\(\)](http://www.mathworks.com/help/images/ref/imfindcircles.html?s_tid=srchtitle)? Examples [here](http://blogs.mathworks.com/loren/2014/10/23/using-matlab-to-detect-cookies/) and [here](http://www.mathworks.com/help/images/examples/detect-and-measure-circular-objects-in-an-image.html) may be useful.
That was my first thought but if you take a picture from a different distance than the radius won't match.
[I think I've made it with a simple ratio.](https://gaborvecsei.wordpress.com/2016/02/28/image-analysis-coin-counting/) 
Thank you!
I must be really dumb. I forgot I had to name it the same thing. Thanks!!
I'd check out the 'coins.png' demo image that comes with Matlab if you're looking for another image :) It's using US currency, however. You should be able to detect the background of the image using a histogram approach. It looks like someone's built a nice tutorial to solve the [same problem](http://www.mathworks.com/matlabcentral/fileexchange/25157-image-segmentation-tutorial)!
First of all: it's very likely that a quadruple for loop is not the best way to go about this, either for readability or for efficiency; instead, it would be better to see if you can vectorize at least part of the loops. Vectorizing is a way off operating on the entire array (or a slice of it) at once: for example, if I want to take the square root of all values in an N×M matrix A, I use `sqrt(A)`--which returns an M×N matrix of the square roots of the values in A--rather than looping from 1 to N and 1 to M to take the square root of each value one at a time. I'm not sure what the proper indexing would be in your case, since I don't know the size or shape of numerous variables, but, as a general rule: if you're looping from 1 to N and only operating on either 1) scalar values (like `alpha` appears to be) or 2) arrays with N elements (or functions that will return an array with N elements, like `exp` if you pass it an N element vector), then you don't need to loop. So, for example, if I had the following double loop: for n = 1:100 for m = 1:200 A(n,m) = sin(n)/m; end end I could vectorize the inner loop by: for n = 1: 100 A(n, :) = sin(n) ./ m; end This example is a bit contrived--the outer loop can be vectorized as well, though it requires more effort based on the way I wrote it--but it demonstrates one way to vectorize a loop: work on one dimension at a time. But, if you don't want to vectorize: What index to use depends on what your final array should be--do you want a 4-d array of size m×m×K×K (or other permutations), or a 2-d matrix of size 2*m×2*K, or something else? Preallocate the array to the size you want with `zeros` or `nans`--this will help you with understanding what the correct index should be, and it will help the performance of your code (else, if you expand the array one element at at time as seems to be the case in your loops, Matlab has to re-allocate memory on each pass; this doesn't matter much for small arrays, but it kills loop performance for large arrays and limits Matlab's available memory). For example, if I was going to use the for loops I used in the previous example, I would preallocate A prior to the loop as: A = NaN(100, 200); Or: A = zeros(100, 200); (I tend to use `zeros` rather than `NaN`, but, if your array could have valid values of 0, `NaN` makes it easy to see if you're skipping elements by accident.) In addition to preallocating: run the code one loop at a time and watch where the values change (you can do this via the debugger--in the editor, click on the line number of code in the inner loop to set a breakpoint (a big red dot) and click the "Run with Debugging" button at the top). As you step through, it might become obvious to you how you should index to get the result you want. 
First and foremost you need to implement your ODE as a function in MATLAB in the following fashion : function xdot= ODE( t,x ) xdot= 2*x^3 end The next step will be the implementation of the Euler method itself: function [t, x] = Euler(f, tinterval, x0, n) % Aproximation of x' = f(t, x) over tinterval = [t0, tn] % with beginning value x(t0) = x0 and stepsize dt = (tn - t0)/n x = zeros(n+1, 1); % pre-allocation of x as a column vector x(1) = x0; % x0 is the first element of the % solutionvector x dt = (tinterval(2) - tinterval(1))/n; t = tinterval(1):dt:tinterval(2) ; % making the t vector for k = 1:n x(k+1)=x(k) + dt*f(t(k),x(k)); % the for loop that calculates y(k+1) based on t(k) and x(k) end t = t'; % t as a column vector end Only thing you need to do is substitute the t for the x and the x for the y and it should work for your specific case Hope this helps a bit ! 
This is what I'm fairly certain is happening: Begin first loop: a = 1 Begin second loop: b = 1 Begin third loop: i = 1 Calculate xA Begin fourth loop: j = 1 Loop through all of j Then increase i to 2, loop through all of j again Etc. Once you have looped through all of the j terms (i.e. once j = K) and calculated all of the appropriate i terms, then b begins to increase. However, all of the i and j values are the same, so for the first loop through b = 1, j = 1 and i = 1, which means the previous values stored in psi(1,1) (i.e. from when b = 2) get replaced. There might be a quicker way to do this than four for loops, but this is what my TA told me to do. Thanks!
I'm fairly certain that my matrix is supposed to be m x m, but I'm not 100% sure. I might be able to vectorize, as you said, but it's not a technique I'm familiar with, and this is the way my TA said I should do it. I did preallocate, however, I didn't include that code, and I apologize. I allocated psi to be zeros(mxm).
Sorry, let me be a bit clearer about what I'm trying to do. xs = -2:0.01:2; ys=xs; m = size(xs,2); psi = zeros(m,m); For every pair of (xs,ys) points, I want a value of psi. Psi depends both on xs and ys (in this case) and on xA/xB, which I determine in the loops. I am not certain how to achieve this, given that for every loop of a and b the values of i and j are the same, meaning that those entries get rewritten every time. I need a way to prevent that from happening.
I'm kind of lost with your code for the implementation of the Euler method. Should I be verbatim putting in "tinterval" or should I put in a number that indicates my interval. Sorry I just have a really poor grasp of what the MATLAB coding really means.
That's a bit more clear, but what are `c0` and `centers`? Where does `K` come from? It's not possible for your final matrix to be m×m if you're looping from 1 to m twice and from 1 to k (unless k is 1) twice and generating a unique value each time--at least, not if you want to retain all values. Either your loops are generating (k-1)^2 duplicate values, or your final matrix is too small to hold all values. Edit: fixed the number of duplicates
No worries about not including the preallocation--it makes the code a bit more clear, but I primarily just wanted to make sure it was happening somewhere. 
&gt; this is what my TA told me to do. I hope you are not forced to use his/her way too much. I would recommend to ditch the centers matrix and several loops. Either your psi matrix is too small or you loop way too often. (I think it's the latter.) You should probably show your whole work because I suspect there is some confusing stuff going on with these variables. Is K = k^2 and k = 2m+1 by any chance? Or just K=2m+1? Or something else entirely?
I like your method (it's a really good start that can be applied to plenty of things). Though it has it's obvious limitations: * What if my background is not nicely homogeneous? (threshold needs to be determined) * What if there are non-coins in the image? (maybe do something like fitting a circle to the objects?) * What if the image is taken at a slight angle? (maybe detect straight lines to detect the vanishing points in the image?) * What if there isn't a 200 UHF coin in there ? (you mention this yourself, a possible solution would be looking at the color information) * What if the coins are touching? (I think that might go wrong since it will detect them as 1 object. Maybe use edge detection instead?) But the fun thing with this is: It doesn't need to be applied to coins! Maybe a next fun project would be something like a QR code reader? Try to apply image correction on an image that is taken at an angle? It's fun to see how other people solve these kinds of problems and you clearly show your steps. Though maybe add a link to your code?
MATLAB does not support the line: i =+ 1; You have to say: i = i + 1; Thus, you are always simply setting i = 1, and then when you do `(i-1)` it breaks. So, a tip for this sort of debugging- use the MALTAB debugger. It is so easy to use. Simply click on the `-` mark on the line of question, and a red circle will appear there. Then, when you run your script, it will 'break' there, and you can investigate all of your variable values. If you did this, you'd see that `i = 1`, which is not what you would expect. So then, you could move your break point back further, and see what was going wrong with your `i` variable. 
Thank you! Neither of us noticed the typo. Also that's great to know. Our teacher basically said here's what you need to do have fun and left us to figure it out. Only a few people in the class have any programming background. Most have never even used matlab or anything similar so we're just winging it and hoping it works. It really sucks.
I have one that I don't have stuck on anything. I'll send it to you if you PM me where you want it sent. 
That's by far the best way to start :). It really depends on what "the industry" entails. If it's in a factory: than you pretty much can assume your pictures will be perfect in every way. But then you get an added advantage: If you assume the distance from the coins to the camera is the same every time you don't need a 200 UHF coin in there (you can calculate the size of a pixel and use that as a constant). The questions I gave are just some common ones that you will probably bump into. Is this for a specific project? Or just as a learning exercise for you? 
Round off error. Just use real( ifft )
Without seeing your code and maybe some screen shots there is no way for us to diagnose your problem. 
Simulink doesn't always evaluate blocks in the order you expect. The [Sorted execution order](http://www.mathworks.com/help/simulink/ug/controlling-and-displaying-the-sorted-order.html) of a model is dictated by Simulink making sure data dependencies are satisfied. Blocks that are near the end of the "flow" of your model might get evaluated first because their output at a given time step doesn't depend on the input at that same time step (e.g Integrator blocks, which have state). You can try to tweak it some by setting block priorities, but for the most part Simulink just figures out the right way to do things for each model. That said, as far as I know, having an unexpected sorted order shouldn't give you a wrong answer. What exactly was "unexpected" about the result you got?
How are you for sure that the script even works? Code running for this long most of the time mean an infinite loop. Check your conditions and if they are even met. I'll take a look at your code later in the day but my gut feeling tells me that's your problem.
A couple of things: 1. Why not re-post your corrected code? Just show us what you're running 2. Whenever you see MATLAB put a yellow underline under a variable (which I know it is doing, a lot!) that is MATLAB warning you about something. Mouse over that thing, and see what it is telling you to do. Do that (in this case, it is going to warn you to pre-allocate) 3. On things where they might be taking a long time/you're not sure if it is working properly- try using the function `waitbar`. It is very easy to use and will show you if your calculation is still advancing, or if it is stuck and spinning forever. As a quick example, to use a `waitbar` in your second while loop you would do something like this h = waitbar(0, 'dxr fraction of distance'); while dxr(i) &lt; distance waitbar(dxr(i)/distance, h); (rest of code as normal) This will show you if your code is getting stuck somewhere, or just advancing very slowly. 
I'd think so because BetaR can't be higher than 1 or else it's going faster than the speed of light and vre &amp; vfe are both velocities so they're reflecting BetaR. 
&gt; I don't think it's getting stuck because it's worked for all the other numbers I've run. This is, in general, a pretty poor assumption. For instance, I work with ballistic propagators quite a bit, and ones that work just fine under a lot of cases can completely crap out when you start increasing things (especially by orders of magnitude like you are). Secondly, the most important, easy change you can do is to pre-allocate your arrays. That's what MATLAB's editor is telling you to do. It can make your code run 10x's faster. Until that is done, trying to find other things is useless. In general to pre-allocate you either know how large your array will be or set the maximum size it could be and make an array of that size and fill it with whatever you want (zeros, ones, etc). And then you write over top of those with your calculations. 
Also, re-checking your code- you don't need the whole array you are making. You never use anything except the i'th and i'th-1 input. Why bother storing them all?
Yeah, I kept finding stuff about preallocating for arrays, but I have no idea how to add something like that to our code. 
I get an error of "Index exceeds matrix dimensions. Error in rocket (line 52) vre2(i)=(vrf2+vfe2(i-1))/(1+vrf2*vre(i-1));"
From the sidebar: &gt; We are here to help, but won't do your homework Please do not simply do homework for people. 
My bad, didn't catch it was homework
Except it still doesn't work especially for the graphs.
I don't get how I can preallocate for something I have no idea how big it'll be. I'm dealing with 2billion so it's got to be massive.
I get why, but that doesn't make it work. It works for the flyby part, but it completely messes up the rendezvous part and graphs. 
That's correct! So what happens if you just preallocate: variable = zeros(1,2000000000) for all your variables? (seriously, just try it out, open matlab and do it). EDIT: correction: It shouldn't be zeros(1,2000000000) but zeros(1,2000000000/stepsize) it's a rough estimation but just try it out.
This was super useful! Thank you so much! 
Compiled C/C++/FORTRAN can be many times faster than MATLAB... or slower. It depends on how well you structure your algorithm and what kind of optimizations you use. Well written code in those languages will *almost* always beat well written code in MATLAB. EDIT: You might appreciate the top answer in [this](http://stackoverflow.com/questions/20513071/performance-tradeoff-when-is-matlab-better-slower-than-c-c) StackOverflow post on MATLAB vs C/C++ performance.
Interpreted MATLAB will not beat compiled and optimized FORTRAN BLAS for linear algebra even with MATLAB running LAPACK under the hood. It's many times slower just with the overhead. EDIT: Apologies if I misunderstood. If OP is doing linear algebra in the parts of his MATLAB code that he wishes to turn into C/C++/FORTRAN, he is better off sticking with MATLAB since it already is calling compiled code. In that case, sure.
If you're worried about the variable being overwritten, allocate you inputs into different indices. You can just use the index you use in the for loop for instance. [CarTaskAnswer(i)]=CarTaskQuestionAnswer(w,Width,Height); 
I think you are intending to element-wise divide two vectors, so change line 6 to y = (x.^n)./(k.^n + x.^2); The ./ will do element-wise division between the numerator and denominator vectors. You are doing matrix division in your current code and returning scalar values.
You don't need the brackets for that, but this would definitely work. 
Could you just add the two data vectors for each sound file, normalize to be within -1 to +1, then playback the resultant data? (Not super familiar with sound manipulation in MATLAB, but it seems like this would work).
check /u/mrjammer's comment on where to place the zero's (you will notice that you've already kinda- preallocated something but only the first value, you want to preallocate them all. As for the basics of matlab: Google is your friend. The sidebar in this subreddit has some links to "places to learn Matlab" and "Matlab resources". And you can of course always ask here (as long as you show your work and put in effort we won't mind :) ). But the main rule to learning matlab is: Try it out and practice: Don't be scared of running wrong code. What you could have done is take that line of code that I gave you and pasted it (semi) randomly somewhere and try it out --&gt; Doesn't work? Check why it doesn't work and reiterate. It's near impossible to actually break something with Matlab, so as long as you keep backups of your original (albeit slow) code you should be fine.
yeah got that bit, more just worried about where the input goes, thanks though
I just started to play with Matlab, and that's what came out after a few hours. I've got a class called "image processing in the industry" and I found it interesting so I just tried out what we have learned. (unfortunately I couldn't attend the class but once :D )
You can try a median filter, medfilt1(). It's good at spike removal, but it's often inadvisable depending on your goals. It is not energy conservative, for example. Do you just want this to look better? Or are you trying to measure something about the pulse? Measurement would be better done by a fit or a matched filter. 
I am trying to make sure I keep the max force reading. I will be doing some calculations based off of the resulting smoothed data, which will include relaxation time.
In that case, a fit is really what you want, especially if the decay rate isn't fixed. This can get a little tricky, as the sharp pulse edge makes nonlinear fits error prone, but it can be done. A close second best would be to measure the pulse area and decay rate independently, then use those values to infer the height of the pulse. This will be more accurate than a direct measurement of the step height because that would be a single point measurement, and therefore quite noisy. Edit: a similar option would be to fit the decay and locate the step location, then use your curve fit to give you the pulse height at the position of the step. Again, this would be beneficial because it would be based on many data points rather than just the one sample at the top of the step. 
Thanks a lot for the suggestions! I've just written a script to break up the response as I figured it would help regardless of the method. I'm going to try to fit the decay independently.
It would be easier to export to c and run on a web server (even on a pi if it's just for you) than to build an app.
Write a change of basis matrix and multiply the vector by that.
 Well, the .* operator does element-wise multiplication, not matrix multiplication which is just the * operator. So what you're trying to do here is multiply elementally (is that a word?) two arrays that aren't the same dimension, whereas what I think you want to be doing is matrix multiplication.
There is a Matlab client for Android. It's not great but allows you to run basic programs on your phone provided you have your own licence and have previously set it up. 
Usually applications require you to scale before you rotate so that the proportions on the object are maintained. If you want to rotate then scale you should do the following b = S * R * a; To scale then rotate simple swap the matrices b = R * S * a;
I'm not at my computer to test, but does the first argument [1] need to be an array rather than a single number?
I tried using an array of [0 1] with 0 as a place holder of sorts and was given the same error.
You do not have the control systems toolbox.
So far I have this function f=zoomx(img) f = zeros(size(img)); rows=size(img,1); cols=size(img,2); for r = 1:rows for c = 1:cols f(r+2,c+2)=img(r,c); end end end But it's not really working zoomx(magic(2)) ans = 0 0 0 0 0 0 0 0 0 0 1 3 0 0 4 2 
It sounds like you're looking for guidance to learn Matlab, correct? The sidebar has some good resources. Going on what you've posted, I'd say Matlab will work and you don't need simulink. 
You have not given us near enough information to help you. 
Thank you for your suggestion, But after I normalized and addbut there is problem with matrix dimension mismatch. The error as shown below. Kindly help. Error using + Matrix dimensions must agree.
I had no idea thanks, I'll check them out. 
I have heat balance equations and unknown temperatures I would like to solve for. I'm looking to use Matlab to solve for these unknowns. 
A*c=b is what i am solving for. A is a 21 by 21 matrix. I have tried replacing the n with 0 in the B matrix. I guess what the problem is if x is a vector and its dimensions are to large how do i run it so it is compatible with the b and A matrix. I want to be able to plot each of the new forces as x varies from 0 to 400. 
You need a for loop for your x values. It's the simplest way to go through a range of values. Just define b in the loop and solve for c(x) before exiting the for loop. 
I think you probably want to use the fsolve function http://www.mathworks.com/help/optim/ug/fsolve.html
f(2\*(r-1)+1:2*(r-1)+2,...)
Try right clicking on the link, "save link as" and then opening that saved file from simulink. If that doesn't work, contact the professor as I don't think there's any actual way too figure out how to get a model from that text (at least easily)
 doc min 
MATLAB's help is the best part of it. A quick typing of `help min` into your command prompt will reveal that `min` can return two things. The second thing is what you want. 
Greetings. Your post has been removed, but don't worry, it is really easy to get it back up. Please format your code to make it easier for others to read. Once you have done so, respond to this message and I will re-instate your question. To format code, you simply have to place 4 spaces in front of each line, then it will look like this: this is formatted like code Things like * will appear instead of making things italics
The mdl file is text. So just copy and paste that into a text file, and then change the extension to .mdl and you should be able to open it in simulink. I think slx is same thing.
Did it work? I am assuming you used a for loop. 
Matlab online documentation is a great place to start. Also check out Wikipedia article on rotation matrix. And scaling matrix as well
Yes i got it to work thank you. I used the for loop.
So, this is not entirely trivial, but worked for me when I had to deal with peaky 'singularities' or horrendously stochastic data. My example is curvature fitting GPS data and then deriving the curvature of the data as a fn of position. The GPS data is first cubic spline interpolated for the GPS coordinates, then curvatures are calculated. The problem you see in the attached image is that the data suffers these sharp spikes where there is a zero (or close to zero) curvature calculation (shown in red). The solution was to remove the spikes by considering the derivatives of the curve. In this case kcurv is my curvature calculation, and the following code is nested in a for loop for the length of the curvature: if (kcurv((i+1),1)-kcurv(i,1)) &gt;= .005 kcurv(i,1) = (kcurv((i+2),1) +kcurv((i-2),1))/2; end if (kcurv((i+1),1)-kcurv(i,1)) &lt;= -.005 kcurv(i,1) = (kcurv((i+3),1) + kcurv((i-3),1))/2; end The key is to have enough resolution from your cubic spline fit. I think this was a very particular example, and your data might just benefit from a median filter or averaging filter. I thought i would just share. http://imgur.com/iZlLRId
SciLab is free, which is nice, but the small differences in syntax annoyed me when using it. Enough that it encouraged me to just learn to do everything in a different language. I was only trying to use SciLab because it was free and familiar. Once the "familiar" reason went away enough I figured it'd be a better use if my time to learn python.
For the conditional check, your variable must always be on the left, so if r &lt;= 1
That is literally all I wrote. i though that matlab would just take it and graph it like a graphing calc would. I'm very new to matlab, so idk why it didn't work. I swear I've seen others graph a functions like this. 
No I have a separate file for the function 
&gt; The error says: &gt; Operands to the || and &amp;&amp; operators must be convertible to logical scalar values. &gt; Error in WrapString (line 33) if isempty(maxLineLength) || isnan(maxLineLength) &gt; Error in DrawFormattedText (line 223) tstring = WrapString(tstring, wrapat); &gt; Error in ForcedChoiceAnswer (line 11) DrawFormattedText(w, txt{i}, 'center', Height/8, TColor, BgColor); %displays the question &gt; Error in FakeVersion1 (line 24) Participant_Answer=ForcedChoiceAnswer(w,txt,i,Width,Height,[0 0 0],[255 255 255]); &gt; ForcedChoiceAnswer=name of function FakeVersion1=name of script 
So that answers your question then. On line 11 you call DrawFormattedText with some arguments that cause a problem later on in WrapString, where you feed arguments to a logical operator which cannot be converted to a logical value. 
Ahh I see! Because I've put Bgcolor (Background Colour) where wrapat wants to be. I've removed it and it works, Thanks!!! :) 
I don't think you can use a function as a argument, you might have to send in the discrete values into the function. Say y=sin(x), you send x = 0:180 and y= 0,0.5... Values of sin(x) for a range of x. 
You'll have to use an [anonymous function](http://www.mathworks.com/help/matlab/matlab_prog/anonymous-functions.html?refresh=true), and then you can see examples of passing a function to a function [here](http://www.mathworks.com/help/matlab/matlab_prog/pass-a-function-to-another-function.html). For instance, if your function you wanted to pass was: &gt; z = x^2 + sin(y) Then you define your function like so: myfunction = @(x,y) (x^2 + sin(y)); You could then pass `myfunction` to another function
You want to do this symbolically? I'm sure the symbolic toolkit has a function for this. Or just use Mathematica, which is really more geared towards symbolic computation. 
Any reason why you're looking at SciLab over Octave? I know Octave treats incompatibility like a bug so it is likely closer. Personally, I've been using Python which is (obviously) not at all compatible with Matlab, but it does have some interfaces to make it easy and a lot of other great features. Anyway, the only benefit I could see over Matlab is the cost. Other than that, if you have Matlab, I would use that
Pause to debug
oh cool. they've added ipython notebooks
If the data is always formatted the same way and the columns are always in the same order, you can use [`textscan`](http://www.mathworks.com/help/matlab/ref/textscan.html)--simply skip the tokens you don't want and let the function handle the rest. If the columns be in a different order in the next file you want to read, or if the format could change (be comma rather than space delimited, or include extra columns or text), then you might need to do something more complex to allow for a variety of formats. It all depends on your data. 
Matlab is not a graphing calculator. It does not understand an expression like that. All `plot` does it plot `(x,y)` pairs with different styles. So you must define `x` and then define `y` then plot the x,y pairs. Or, you can look at `ezplot` but this is really not the ideal solution
use [Matlab import tool](http://www.mathworks.com/help/matlab/import_export/import-data-interactively.html) to interactively select your data. Then generate code to import data from multiple files. 
I cant reproduce the error, so i cant help you.. Do you still experience this problem?
I approve of this message
Pretty sure you're redefining M when you make your myfun. Try changing the M in that formula to something else, then when you call it you use the M. 
Ahh yes. Even better. 
Apologies. I forgot to add the first 'record voice' m.file: % Record for 5 seconds recording=audiorecorder; recordblocking(recording,5);
So 'recording' is a function you created? And you are you calling 'recording' from inside ' filter'? 
You need to define the variables c, r, d. That means there is some data attached to the buttons you need to get. 
This is a Windows issue unrelated to Matlab. 
Fuckin pricks think methlab is a joke iilii/
Typically this can happen if the code is already multithreaded - see http://uk.mathworks.com/matlabcentral/answers/95958-which-matlab-functions-benefit-from-multithreaded-computation. You can check this by measuring your CPU usage while running 'for' instead of 'parfor'. The parallel workers run without multithreading, so you can trade one form of parallelization for another, and as a result the performance can be different. 
At least the 2016a help has an entry for [Record and Play Audio](http://se.mathworks.com/help/matlab/import_export/record-and-play-audio.html). I haven't got Matlab on the home computer, so can't test right now.
You access indices in column vectors the same way you do with 'traditional' row vectors. 
still getting the error, i uninstalled and reinstalled
This parfor loop would be run about 500,000 times in the main program, as I understand, the cores only need to be initialised once, right? Or will that 15 second delay be there every time the parfor loop starts? EDIT: The majority of the time executing the program is spent within that loop.
what does the error say?
if only that was the issue the thing is none of my lecturers have ever brought this up. but from the original response I used google and low and behold the answer was inside the first link. as in for vector a= [5 3 4; 4 4 4; 5 5 5] then to find value in row 2 column 3 compute a(2,3)
For the most part that's true, but it's superficially false for subscript notation and there are some low-level [performance differences](http://undocumentedmatlab.com/blog/matrix-processing-performance) (article is from 2011, so newer versions might be different) between row ordering and column ordering. It's not enough to bother most people, but it can be worth keeping in mind for some applications. 
Sorry I thought I put it in there. I tried to call the function in a script to find the roots for the function f(x) = 4x - 6: fun = inline('4x - 6') fun = Inline function: fun(x) = 4x - 6 &gt;&gt; secant(fun, 1, 2, 10, 10, 1) Error using inlineeval (line 14) Error in inline expression ==&gt; 4x - 6 Error: Unexpected MATLAB expression. Error in inline/subsref (line 23) INLINE_OUT_ = inlineeval(INLINE_INPUTS_, INLINE_OBJ_.inputExpr, INLINE_OBJ_.expr); Error in secant (line 22) df = ((fun(b) - fun(a))/(b - a));
The mlint (orange underline) is yelling at you in the editor for every one of your button callbacks, for a couple of reasons: 1) As u/nodgeOnBrah said, you have undefined variables used in each function (c, d, r). If you want to share the values across all buttons, they should be defined in the gui's appdata (via: `setappdata(hObject, 'c', WhateverCShouldB)` in the gui opening function, for example, and retrieved via `getappdata(gcbf, 'c')` in the button callbacks), or passed via the `handles` structure used by the guide, or stored as figure Userdata and set/retrieved as necessary. If each button should have its own, seperate instance of each, they should either be defined in the button functions or stored as button userdata/appdata (same process as described for the guo, but set in the button creation functions or per button handle rather than using the figure handle). 2) Your use of `&amp;` gets you the correct result as long as the arguments are scalar, but you should be using `&amp;&amp;` for expressions that must evaluate to boolean (e.g., any `if` statements). In Matlab, `&amp;` is an element-wise operator: Matlab compares each element of the left argument with the corresponding elements of the right side argument (expanding scalars if necessary) and returns an array of logical values rather than a logical scalar (which is why it works the same as `&amp;&amp;` as long as all arguments are scalar--the returned array is simply 1x1). To be more clear: [1, 2, 3, 0, 5, 6] &amp; [1, 0, 1, 1, 0, 1] Evaluates to: [1, 0, 1, 0, 0, 1] And: [1, 2, 3] &amp; true Evaluates to [1, 1, 1] And: [1, 2, 3, 4] &amp; [1, 1] Throws an error because the matrices aren't the same size or scalar. If r, c or d is ever more than one element, your `if` statements might not evaluate the way you want. If you're planning to make any of them a vector, you should consider using `any` or `all` around the element-wise comparison (depending on the behavior you want); if not, simply change `&amp;` to `&amp;&amp;` to get the mlint to stop yelling at you and provide an extra safeguard against bugs in your code. 3) The mlint isn't yelling at you for this, but you have a lot of copy-paste code. You can pull all of the logic from the button callbacks and put it in a single function. Then, either make that function the callback for all of the buttons or, if there is button-specific processing that needs to be done, simply call that function from the button callbacks. You can even use a single function for all buttons if each button has it's own values for r, c and d--if they're stored as button appdata or userdata, your function just needs to use the first, default callback argument (the handle to the object whose callback is executing) to pull the appdata/userdata). 
Hey, fellow student of Agent Bananas, could either of you hook me up with the files for this?
Wow that was a super simple solution, thanks! The word "grid" completely blanked on my mind in this case and I couldn't find anything while searching "background axes"...
I'm really struggling to figure out what you're attempting to ask. Do you simply want to plot your data? If so, it is as simple as plot(x,y) where `x` is your independent variable and `y` is your dependent one. So, if your data you are showing was an array, called `A` for instance, you want wanted to plot column 1 vs 2, you'd simply say plot(A(:,1), A(:,2));
You want implement an algorithm described in an academic paper. That's great, but not really a Matlab specific question. You would do well to share what you have tried (i.e. code) and then indicate what questions you have specifically with using Matlab. Good luck, seems like a fun project. 
This is a useful blog about doing video stabilisation, complete with code: [http://nghiaho.com/?p=2093](http://nghiaho.com/?p=2093) It's done using OpenCV in C++ rather than matlab, but given the excellent matlab OpenCV wrapper [mexopencv](https://github.com/kyamagu/mexopencv) that's not such a big problem. 
Thank you. My teacher only showed us symbolic functions, this way is working much better. Can I ask what the "@(a,b)" is for? I didn't put that in and it seems to be working.
Fixed, thanks.
It's probably expected that you're able to read the documentation. 
My teacher showed us this way to quickly put in data and see it side by side when we are doing a lab to check if our data is correct. Normally I'd just right the data out horizontally like this: Vc=[1,2,3,4,5,6] Ic=[1,2,3,4,5,6] and then plot(Vc,Ic) but he showed us a way to have the data vertical in matlab side by side like in excel so it's easier to read and we can see the matrices are the same length kinda like this in this format. Then he would graph it. http://pastebin.com/KDiiheV5 He is basically entering data and plotting it, but it's easier to read and enter into matlab, kinda like you would into excel. Hopefully this clears it up. I know it's kinda a dumb question, but I can't figure it out myself lol. 
No, none at all.
I suggest using an anonymous function defined piecewise ... C = @(x) (x&gt;2).*(-63*x) + (x&lt;=2).*(12*x) x = linspace(0,4,100) plot(x,C(x)) 
~~List.~~ Cell array.
[Cell Array](http://www.mathworks.com/help/matlab/cell-arrays.html)
I tried this: http://pastebin.com/SFnFv7KS but it ended in an infinite loop. It gave the proper x values but i had to manually select evaluate to get Y
From my background, a function is something that has input arguments like mult(a,b). In contrast, a script is just a bunch of commands in a row that may have functions like a =2; b=3; mult (a,b). I don't know about the correctness of your function, but the problem is basically write the function, then test it out. A script is some th ing you can pass to another user so they can get the same results you did. That said, you can define functions in a script but it's cleaner to leave them in their own mfiles. Also, weibull is good in theory, but in practice it's pretty sketchy. Something about needing every unit to fail otherwise your estimate is going to be pretty skewed. 
In Matlab, a script and a function mean two very different things. A *script* is essentially code that you run in your current workspace. It cannot have anything that you can't evaluate in the command window. (Ie, non-anonymous functions) A *function* is exactly that. It takes input and gives you output. It does not see anything that is not passed to it (there are exceptions but I won't go into them). It can also have multiple functions in file but the general convention is the first function is the main one and is also the name of the file. Anyway, on to your actual problem, at the very least, you're not asking for `x` so that explains why you may have having a problem. Other than that, without running it, I would add `.` before any `*`,`/`, and `^` which tells Matlab to do it element-wise (as opposed to matrix-algebra). I hope this helps. **EDIT**: Just wanted to add that if you were pedantic, you could find fault with my explanations. This is for all intents and purposes a good way to think of it
It gives flashbacks to those of us who have spent hours trying to figure out if there's one too many closing parentheses or one too few opening parentheses.
Refresh
Causes an error for unmatched parenthesis, and makes me tell you to read the documentation. 
Hey tlwhite0311, I know this is a MATLAB subreddit, but I say do it on Python. Your purpose seems simple enough, that it can be done with Python's tkinter(for GUI), and numpy modules or scipy(for the maths). MATLAB is still a viable option. You can make separate functions and combine them in the MATLAB gui maker. I personally like to reserve MATLAB for large detail heavy problems. Just my opinion though. Hope that helps
You can still use anonymous functions
I'm no matlab pro and I don't really understand the while loop, but look into the 'switch' statement.
It looks like he doesn't have the end statements lined up correctly, so at first glance it looks like the while statement only lasts 3 lines. But yeah, he definitely could benefit from the switch statement.
Oh I see, thanks.
This code looks pretty messy, but I'm guessing if your complaint is speed then it's probably the xlsread that's the culprit. Have you checked which part is slowing it down with the profiler?
Thanks for that, I never knew about the profiler. I used it and the function takes 14 seconds to run, 11 seconds of that time is involved with the xlsread. I'm guessing as I add more teams it is going to increase that time. I guess what I'm really trying to get at here is a faster way of doing the comparisons. ex: if x(11) &gt; y(11) sum1 = sum1+ 4 etc. and if t1 == 1 prob = ETotScr43; end if t1 ==2 prob = GTotScr43; end if t1 ==3 prob = WTotScr43; end if t1 == 4 prob = DTotScr43; end entering the code like that is very tedious and I know there must be a better way of doing it but being really new to this I'm having trouble putting together a shorter version.
Is it simply a large file, or are you calling xlsread multiple times? If it's the latter, you can speed things up by just reading everything in the first time, then indexing into what you need inside of MATLAB. (xlsread opens and closes a connection every time you call it, so it's slow if you use it multiple times for different pieces of data compared to simply reading in everything at once). As for condensing your code, like we mentioned before you should look at the switch statement. It's useful for situations like yours with lots of mutually exclusive if statements. You might also be able to condense things by combining all the variables like WTorScr43 and DTorScr43 into one multidimensional variable (e.g. assuming that both of those are scalars, make the combined variable a vector). Then instead of comparing t1 and setting everything individually, just use t1 to index into that variable. If you do that you won't need to write a different block of code for each team. By the way, if this is a homework question you should tag it as such.
What don't you know how to do? [Here](http://www.mathworks.com/help/stats/mvncdf.html) is the documentation on it. Is there part of it you don't understand?
maxvalue = max(A) determines the largest value in the array. B = find(A==maxvalue) will give you the index numbers of the entries of the array that are equivalent to the largest value. length(B) will then tell you how many of the largest value appear in array A.
It's even simpler with just the [max()](http://www.mathworks.com/help/matlab/ref/max.html) function: [mval midx] = max(vect); will find you the maximum value of vect (mval) as well as the indices where it occurs (midx). Finding the number of times that max value occurs is simply: numel(midx) The reason I point this out is I think find() can be quite slow in some instances. I still use it in my own coding, but have been working towards limiting its use in favor of the indexing MATLAB can already do with some functions. Your example still works, though
Doesnt find() only return the first index where that is true?
I don't know how to setup the parameter values. i.e the sigma and mu from the problem. I assume x is simple [116:96] for the x and y constraint. 
No, I think by default [find()](http://www.mathworks.com/help/matlab/ref/find.html) will find them all. Though you can certainly tell MATLAB you're only interested in the first occurance of the max, or the last 3 occurances of your specified condition.
This looks promising. I'll have a play with it this evening
You'd make a new variable and assign each matrix in to the new variable. You could do this with a for loop considering your matrix sizes are small enough. It really depends on how you named the initial matrices, if you needed to make them variables in the first place, etc. None of which I can tell from the amount of information you've provided. 
First, just look at the doc plot results. All Matlab does is plot `(x,y)` pairs. So to plot `sin(x)` you can do something like: x = linspace(0,2*pi,100); plot(x,sin(x)) but, now change it up and try: plot(cos(x),sin(x)) However, to plot implicitly, you will have to solve for either `x` or `y`. This is a quadratic so it shouldn't be too hard
As I said, solve for `x` (or `y`). Recall that `sqrt(x.^2)` is *both* `+x` and `-x`
Well you know that if there is a trailer, then it's at most 1.4\*2.6m away from the rear wheels. So you can calculate the speed of the car by looking at the time that it takes between front and rear wheels. Then you could calculate how far the third "set of wheels" is, if it's over 1.4\*2.6m away, then you know it's a car and you can use the next set of wheels as the front tires of the next car. However if the distance is less than 1.4\*2.6m, then you know it's a trailer.
Just something I'd like to point out- this is a very odd form for an ellipse, and unless a is negative, it is not an ellipse at all. I'd double check that your form is correct. Secondly, you can collect powers of `y` and use the quadratic formula to solve for `y` for different values of `x`. You'll also have to check to see if your solutions to `y` are imaginary, which means you are "outside" of the ellipse. An easier method is to look [here](http://www.maa.org/external_archive/joma/Volume8/Kalman/General.html) and convert your coefficients to an offset and an angle for the ellipse. Then, you can create a "standard ellipse" (centered at the origin, and aligned with your axes) and then you can rotate your points and then translate them. This will allow you to instead calculate x and y as a function of theta, which should be way easier. 
yeah seems to work! 
Look at the read/write permissions on the \*.fig file? Not sure what "Access is denied" could mean. This is why I *hate* using Guide to build GUIs. Everything is so screwed up. It auto-generates a bunch of stuff with non-descriptive variable names, and when the \*.m and \*.fig files get out of sync (they almost always inevitably do) you have to open the figure file and hunt around for the missing component. You're better off coding your GUIs yourself. 
Matlab only plots the data you give it. It doesn't have any idea what is going on between the data points, so you will have to add additional points between your current points. If you just want to interpolate what those points are, look into the interp1 function or the smooth function. If you know what the function is, you can fit your current data to that function, or just increase the number of points when calculating y(x). 
thanks
If you want the lines to be smooth, you have to tell matlab what to do between the points. Just telling MATLAB to "smooth it" isn't enough information. Should MATLAB make a line that still goes through every point, but just curves to get there? Should it just go near the points but smooth them out that way? How large of features should it still included in the smoothing? Only you can answer these questions- and according to your answer MATLAB has the tools to help. Want it to go through every point but make curves to get there? You might want a [spline](http://www.mathworks.com/help/matlab/ref/spline.html?refresh=true). Want it to average out the points? You could use [polyfit](http://www.mathworks.com/help/matlab/ref/polyfit.html) and the higher order you make your fit, the closer it will match your real data set (you actually could match it exactly by using the same order as number of points you have- but this can be dangerous as it might cause excessive ringing). Maybe you want to piecewise it, since the first part of your data looks kind of exponential. Really, the options are limitless, but until you know what you want to do, MATLAB can't do it for you. 
Make a variable named "h_bar" ?
Your post has been removed. Please see the sticky at the top of this sub for the rules about asking these types of questions. Once you have added the required information to your post, respond to this message and I will re-instate your question. If this is homework, please mark it as such. 
Why don't you just convert your transfer function into state space and do it manually?
Triggered subsystem or if it's going to always be that, just make a lookup block and add it to your initial value.
You're not manually copying anything. When you break the transfer function down into state space your function now looks like xdot=Ax+Bu. Your A and B are matrices now. If you have a SISO system it'll be straight forward and your u can now be a vector as large as you want (like u=[10x1] and your x would also be [10x1] for example). if it's a MIMO, you'd have to try /u/TheIsletOfLangerhans's way.
Just a MATLAB tip, start every line of your code with 4-spaces and it will format like code all the way though (so, indents are 8 spaces). Second, in MATLAB, no need to declare variables like you do with the `int8 angle` Finally, what isn't working. You don't really say. I will say, since you didn't say `hold on` every time you plot you will write over your previous plot. 
Any of these should do: http://mathworld.wolfram.com/UnsolvedProblems.html
Your particular example could probably be achieved by messing around with `tril` and `triu`.
 n = 101; MATRIX = zeros(n); for ii = 1:floor(n/2) MATRIX(ii,1+ii:end-ii) = ones(1,n-2*ii); end 
http://www.mathworks.com/videos/creating-a-gui-with-guide-68979.html?s_tid=srchtitle&amp;refresh=true 
My recommendation would be to save all of the variables in to a new variable (1 column, many rows), and then use xlswrite to write that new variable to a single column. You can then write all of the 3x3 matrices in to a new variable and write them in to the same spreadsheet or another one depending on your requirements (using the same xlswrite command). If this is too slow, i'd look up the actxserver command, which you can use to write to multiple spreadsheets faster, depending on how many xlswrite commands you're actually trying to use. Sounds like a pretty simple job for xlswrite though.
great, thanks! now to modify...
Try out gramm, a full matlab plotting library that is perfect for this: basically you provide your x and y data, as well as data to determine color, line style, or even subplots (it works like ggplot for R): http://www.mathworks.com/matlabcentral/fileexchange/54465-gramm
Your post has been removed. Please see the sticky at the top of the sub for information about how to ask homework questions. If you add onto this post to meet the requirements, respond to this message and I'll re-instate it. 
I dont know where that sticky at the top of the sub for info is but went to your page and saw one of your posts on how to ask homework questions. Great help, now i know what to put on in here :) 
just woke up to check and i will be trying that out now. Thanks for the great reply!:). Edit: this worked 100%. thanks so much. I have in total 6 curves and was afraid it wouldn't work but it did:)
ill try this out right now as well, thanks.
just wanted to say thanks for the help with the question. I was able to get the program working from "maxvalue = max(A) determines the largest value in the array. B = find(A==maxvalue) will give you the index numbers of the entries of the array that are equivalent to the largest value. length(B) will then tell you how many of the largest value appear in array A." 
Since I ride on planes, I prefer for aerospace engineers to be able to calculate flight paths on their own.
No.
Read the instructions. Write out what each part of the code should do. Pay attention to where a function should stop. Also talk to your classmates, TA, professor. Sharing your work in a public forum like this means that other students may copy your work, then you both get flagged for cheating.
Telling us what the error is, is much more helpful than simply saying there is an error. 
Your post has been removed. Please see the sticky at the top of the sub-reddit for information on how questions should be asked here. You need to ask a specific question, and show us code. There is nothing we can do with the information give us. Once you have made these changes, feel free to respond to this message and I'll re-instate your post. 
Running the code as written, there is no error from Matlab 2015b. However, the equation is not defined at t=0, and your tspan is an interval that includes 0. So the solution blows up. Additionally, you are specifying that y(-0.5)=3.15 which may or may not be what you are trying to accomplish. Note that your equation, for t=0, implies 3y=0, so y(0)=0 must hold. 
updated with imgur picture of output
thank you for your response
As a side note, this may give an approximation: f1 = @(t,y) (9*(t^2)-(3*y))/t [t1,y1] = ode45(f1, [eps 0.5], 0) f2 = @(t,y) (9*(t^2)-(3*y))/(-t) [t2,y2] = ode45(f2, [eps 0.5], 0) plot(-t2,y2,t1,y1)
clear all clc format bank display('Inverse Kinematics in a 2 Link Robotic Arm') display('To find the values of the angles THETA1 and THETA2: ') display(blanks(1)) L1 = input('ARM1 length:'); L2 = input('ARM2 length:'); display(blanks(1)) Xe = input('Value for Xe:'); Ye = input('Value for Ye:'); display(blanks(1)) PHI = acos((L1^2 - L2^2 + Xe^2 + Ye^2) / (2 * L1 * sqrt(Xe^2 + Ye^2))); PHI = radtodeg(PHI); display(blanks(1)) THETA1temp = atan(Ye / Xe); THETA1temp = radtodeg(THETA1temp); THETA1 = round(THETA1temp - PHI); % THETA1 = [num2str(THETA1),' ','degrees'] display(blanks(1)) THETA2 = acos((Xe^2 + Ye^2 - L1^2 - L2^2) / (2 * L1 * L2)); THETA2 = round(radtodeg(THETA2)); % THETA2 = [num2str(THETA2),' ','degrees'] display(blanks(1)) L1x = L1 * cos(degtorad(THETA1)); L1y = L1 * sin(degtorad(THETA1)); L2y = L2 * sin(degtorad(THETA1) + degtorad(THETA2)); display(blanks(1)) Xaxis = [0 L1x Xe]; Yaxis = [0 L1y Ye]; plot(Xaxis,Yaxis) grid on clc 
Do you need to solve it symbolically, or is this just a step on the path to getting a numerical solution? If a numerical solution is fine, use fsolve().
That code is unreadable. If you put four spaces at the beginning of a line, reddit won't apply formatting, making your code readable, like this. Anyway, that error means exactly what it says. You're trying to plot a list of (x, y) pairs. Obviously there must be an equal number of x values and Y values, right? So, there's no magic to debugging. You know what the problem is. Look at your x and y, look at how many elements each one has. Look at your code, and figure out how this happened. 
Yeah can't read that either. But say your code is plot(x,y) Try: length(x) length(y) Then compare the lengths and go from there. 
Why do people always try to use symbolic variables in numerical situations?
ask matlab "why" ^^
I feel like any improvements to why.m would actually make it less funny.
even if your function is calling stuff from other functions?
"accidentally"
This probably isn't what you want to hear, but when you're porting to another language you should really understand it to the point where you know the _correct_ way to do it. For example, you wouldn't translate Russian-&gt;English one word at a time, would you? You should understand how to use the STL, as it has a lot of the data structures that will keep your code clean and efficient. There will be some cases where some MATLAB toolbox implements a complicated function which isn't available out of the box in C++ (e.g., fir2()). If you're stuck on a snippet or something, feel free to post it.
Unless you were super lazy, why were his results overwritten? 
The coder toolbox can translate a lot of functions. As long as the toolbox can translate the functions that you call from your main function, it'll work. Use %#codegen next to your function's input to see if the coder will have any problems (http://www.mathworks.com/help/coder/ug/using-the-code-analyzer.html)
Here is some material from File Exchange that you could build a project around: * [Draw a 3D airplane and animate flight](http://www.mathworks.com/matlabcentral/fileexchange/47967-draw-a-3d-airplane) * [Trajectory And Attitude Plot v1](http://www.mathworks.com/matlabcentral/fileexchange/4490-trajectory-and-attitude-plot/content/trajectory_MFILE.m) * [Trajectory And Attitude Plot v3](http://www.mathworks.com/matlabcentral/fileexchange/5656-trajectory-and-attitude-plot-version-3/content/trajectory3.m) * [Various other airplane-related MATLAB content](http://www.mathworks.com/matlabcentral/fileexchange/?search_submit=fileexchange&amp;query=airplane&amp;term=airplane) * [Euler Angles &amp; Rotation Matrices](http://www.mathworks.com/help/robotics/ref/eul2rotm.html) * [Understanding Euler Rotation](http://www.mathworks.com/matlabcentral/fileexchange/12616-understanding-the-euler-angles)
[removed]
I dont know exactly what you are trying to do, but if you want to have your matlab script interfacing some other code written in c++ there are several ways to do it. * Matlab Coder: It directly converts your matlab code into (human readable!) C++ code (or you can compile it as an exe, dynamic/ static link library). The big advantage is that the output can be implemented as stand-alone and is not relying on matlab on your target machine, all necessary auxiliar libraries are compiled as well. * Matlab Compiler: It also can compile standalone applications, dynamic and static link libraries, but you need the matlab runtime environment installed on the target machine in order to execute. With both options, what you need to do to properly interface any arbitrary program, is a wrapper function that translates the Matlab data format (mXArrays) to standard C++ Arrays. What i did as a benchmark to test the matlab coder abilities: * Write some function in matlab (fast fourier transform of an input signal) * Compile the function with matlab coder as a static library * Create a Visual Studio Project and wrote a wrapper function for the entry and exit points of the matlab function that translates the (arbitrarily sized) inputs and outputs to matlab readable mXarrays and vice versa * Compiled the VS Studio Project (with the matlab library) as a dynamic link library * Interfaced the dll with a LabView GUI PM me if i can be of help 
If you want a real-time streaming of audio input check out the digitial signal processing toolbox [DspToolbox](http://de.mathworks.com/help/dsp/index.html) This example has the basics to create an audio input stream from the microphone jack [Audio Input Stream Example](http://de.mathworks.com/help/dsp/ref/dsp.audiorecorder-class.html)
So I presume you're not asked to actually go in and change the code for randperm as this is a proprietary Matlab function (I think?). There are at least two straightforward ways you can do this: 1) Use rand to get a continuous number in [0,1], and map that on to your dye roll (similar to what you started doing with randperm above). 2) Populate a vector with samples that is proportional to the probability of seeing that outcome (e.g. populate a vector v = zeros(1,1000) with 649 1s, 302 2s, and so on). I'm no longer at uni so I don't have to deal with silly requests like "make sure to use function f", so I'll leave that as an exercise for the student ;)
I am not 100% sure, but it seems like you were on the right track with your first guess. Why can't you do it? But, I am not sure how exactly `randperm` works, but here is another way to do it (and may be what it does): [~,IX] = sort(rand(1000,1)); % Return IX That will do the same thing. See if you can figure out how to manipulate that to your needs
Yeah. A while loop.
Are you sure that code correctly calculates a sum? I used: sum = 0 for n = 1:100 for m = 1:100 if (n ~= m) sum = (1/(n-m))^2 end end end And from what I can see it is actually just outputting each individual summation term (e.g. (1/(n-m))^2 at n = 30, m = 17) rather than adding up each individual term, though I am pretty new at MATLAB so I could be misunderstanding what the loop is actually doing.
I think it's just ezplot being dumb. Is there a reason you have to use ezplot rather than just evaluating for a vector of t and plotting the result?
Okay well for starters if you want to plot using anonymous function like this plotthis = @(x,y) plot(x,y) then you need to call it with same length vectors, as with normal plot. So this for instance works just fine x = [1:0.01:5]; y = [6:0.01:10]; plotthis = @(x,y) plot(x,y); plotthis(x,y); In general try to check that you call the function properly after it's defined and also check that all parameters are defined *before* you use the function. For instance myfunc = @(x) x+a; a = 3; myfunc(7); will result in "Undefined function or variable 'a'. You need to swap the first two lines. Now for the nested function. First of all, that's not how you declare a function. A function is declared like this function out = myfunc(x,y) out = x+y; end Then if you call it with "myfunc(1,2)", where 1 is x and 2 is y, it will output "3". the "myfunc" is the name of your function and (x,y) tells its input variables. "out" is the returned variable, which it not required. A nested function uses the same exact formalism, thus we can have function out = myfunc(x,y) out = nested_myfunc(x,y); function nested_out = nested_myfunc(a,b) nested_out = a*b; end end This function will just multiply the values x and y, and you would call it via "myfunc(3,2)", where 3 is the x and 2 is y. I also noticed that you have typed "@root" in your function. The "@" is used for function handles. What they do it that they essentially store a function to a variable. For instance if you want to pass a function to another function. Also anonymous function are essentially function handles, thus the "@" in the front. A simple example, you have a function function out = myfunc(somefunction, x, y) at_x = somefunction(x); at_y = somefunction(y); avg = (at_x+at_y)/2; out = avg; end which calculated the average of *somefunction* at points x and y. Then you have another function function out = otherfunction(x) out = x.^3; end Then you can put a function handle to the "otherfunction" and call "myfunc" with that handle. myhandle = @otherfunction; myfunc(myhandle, 4, 4); which would output 64, i.e. (4\^3+4\^3)/2. Hopefully this clear some things up :). Have fun with Matlab!
As ezplot doesn't let you specify the sampling frequency (as far as I know anyway, I don't really use it) the resultant plot from ezplot is very undersampled, as you can see by the aliasing in the output of ezplot. Try like /u/bushikatagi mentioned and evaluate the function over a higher sampling frequency: fh=@(t)(2.*Fo)./(M.*(wo^2-w^2)).*sin(e.*t).*sin(w.*t); t=[0:.01:200]; plot(t,fh(t)) fprintf('Much better!') 
Also notice how your Excel plot is missing a lot of the peaks in the function too - once again, the function isn't being evaluated at enough locations!
That is not Matlab code. Looks like Python? A = randn(100); sum = 0; for n=1:100 for m=1:100 if m~=n,sum = sum+A(m,n);end end end
My guess is that the printmat function is from an older/newer version of Matlab. Try using sprintf or fprintf if you want to display stuff in the interpreter.
You need to update your `sum` variable. I posted some example code above. 
Probably yeah. The printmat function resides under the control toolbox, in a folder "ctrlobsolete", thus it might be obsolete nowadays. 
Thanks so much for the help! I managed to get the anonymous functions working. I'm still having problems with nested functions however. This is the code I've written (I've tried to keep it in line with the code you provided so I could understand it) function out = problem_22 x = [20,-200,12]; out = nestedfunction(x) function minimum = nestedfunction(x) minimum = fminbnd(x,0,10) end end I'm getting these errors: Error using fcnchk (line 106) FUN must be a function, a valid string expression, or an inline function object. Error in fminbnd (line 181) funfcn = fcnchk(funfcn,length(varargin)); Error in problem_22/nestedfunction (line 6) minimum = fminbnd(x,0,10) Error in problem_22 (line 9) out = nestedfunction(x) 
I am guessing that your printmat function was used to display matrices/arrays? If that is so, then on the commandline you can just type the variable name like A and it will display the contents of the variable. You can use the format command to control the amount of significant digits are displayed. My favorite is 'format long g', to display the maximum amount of digits. You can type 'help format' to get more info about the command. 'disp(A)' is another alternative that gives you a different display as well. you can also write your own printmat, and in that case I would use the fprintf command that someone else has mentioned. With this command, you are given good control over the display, and could write exactly what you want to display. 
Yea I just gave some psuedo code to give the user an idea of whats needed
The loops are doing this: for n = 1:100: for m = 1:100: print n, m n = 1: m = 1, 2, 3, 4, 5, ..., 100 n = 2: m = 1, 2, 3, 4, 5, ..., 100 ... n = 100 m = 1, 2, 3, 4, 5, ..., 100 and then its doing the sum. The += operator does the following: i += 1 =&gt; i = i + 1 it just add's whatever is right of the operator to the left of the operator and stores it back into whatever is right of the operator You can replace the code with: sum = sum + (1/(n-m))^2 Finally, my syntax may be wrong because I wrote pseudo code. You will need to fix the errors that come up
Why not Matlab?
Coz I haven't written matlab in a while. It also gives Eddfir the whole answer where my code will give Eddfir a stepping stone to figure out the solution for him/herself
this looks promising. I actually want to use the input to sense voltage changes within a loop, and perform an action when the voltage changes over some predefined threshold. The usefullness of this function will depend on the output of the audioobject, and how quickly it can be sampled within a loop. Ideally i'd want to run the loop every second, analyse the signal compare to threshold, then either perform another loop, or a predetermine action based on the comparison. 
Hence the "+=" in the code on the comment above his
Wow! Thank you so much! That looks SO much better. I kept getting the 'invalid matrix' error when I was doing it and didn't know how to get around it. Could you explain the reasoning for including the @(t) in the front and the '.' after each term? My understanding is that it's for element-wise multiplication? I guess I was just putting the periods after the wrong variables. 
Gotcha. And no reason, I'm just a noob so didn't know how to do it using plot() since I kept getting the 'invalid matrix' error. 
Do you mean other functions you defined, or matlab built-in functions. If you defined them then I think that shouldn't be a problem if they're in the same file. If they're matlab built-in's, matlab coder just has to support them. You can even provide sample code so coder can figure out what the input and output types should be or you can specify all that explicitly.
Do you understand the question? Do you know how to find the roots of a transfer function? What have you tried? We do not do your homework for you. Show some effort. Surely this was at least partially covered in class. 
 array_A = [1 11 -6 17 -23 0 5 1 -1]; array_B = [31 101 36 -17 0 10 -8 -1 -1]; [sorted_array_A,I] = sort(array_A); sorted_array_B = array_B(I); 
Woops! Missed that.
Other than the error you mentioned: Why do you branch on counter==1? You have different code in the if/else branches, but I don't see anything about the two branches that requires different code. Why do you use `find(A==minimum)` when you seem to want a single element and know that the second output of `min` is the first element that would be returned by `find`? This algorithm swaps the single minimum in the unsorted portion of the array with the first element in the unsorted portion, so it should be using a single index--the one returned as the second output of `min`--not the multiple indexes returned by `find(A==minimum)` when `minimum` appears more than once in `A`. 
The '.' is not after the variables but before the operators. It is indeed to do element-wise multiplication or division rather than matrix multiplication/division. For each value in the vector t, fh will be evaluated. @(t) is used to define an inline function of independent variable 't'. You could also do the same like this without the inline function if it makes more sense: t=[0:0.01:200]; fh=(2.*Fo)./(M.*(wo^2-w^2)).*sin(e.*t).*sin(w.*t); plot(t,fh)
I know how to find the roots the normal way. And this is not the whole question. I need help with writing a script and that's it.
For one thing your methods section is wrong. The way you have this, you've defined the signature for a method named display, but not implemented it. You've also defined it twice, incompatibly. What you seem to be trying to do would look more like this : methods function printName (obj) disp(object.name); end end
No problem! Looks like your other questions have already been answered too, so you're good to go.
I was given the equation 20x^2 -200x+12 and told to use a function and a nested function to find the minimum from 0 to 10. I think its just an exercise to help us learn how to do these functions better? 
Probably yes, however you don't have that equation anywhere in your code. You're going to have to declare that equation as an anonymous function inside the outer function. As you declare it you will have function handle that points to that equation. Then you will pass the handle into the inner function and use it in fminbnd. Or if you want to declare it in the inner function that works too, but at the moment you only have an array in the inner function. You need to declare it like I declared the -3-x\^2+x\^4 equation. 
It is stored standalone but in Nodes.m as I thought the file name had to match the class name both in letter and case
Cheers for that, the ~~same error occurs though~~ file path was incorrect which solved it. Edit: found the solution
I prefer contour plots to surfaces. [S2O,S3O] = meshgrid(xaxisvariable,yaxisvariable); contour(S2O,S3O,matrixresultvariable,'showtext','on') and that's it.
Perfect, thanks so much.
May I suggest the matlab help: http://de.mathworks.com/help/matlab/ref/while.html?searchHighlight=while Name your variables, think about what happens to them every year and then keep counting every year you get interest till you reach 50000, this should be your while condition, e.g: money = 1000; %initial money n = 0; while money &lt;= 50000 %instert counting variable (n) which increments every time %you loop till you reach 50000 bucks, then end the loop, %you can figure out how by reading the matlab help. n Hope this helped.
You'd be more likely to get helpful replies if you provide some more detail. 
You can abuse the fact that the palm is significantly larger than the fingers to IMDILATE a lot, then IMERODE the same amount to restore the original size of the palm. The fingers should be gone from the resulting image. Then subtract the new image from the old image. May have to IMERODE then IMDILATE instead, not sure which way you need to be going due to lack of information. 
I thought that's enough detail if I say that I would like to subtract the palm from a hand, so I can only see the fingers with image processing. I can't describe it more. I want to detect the fingers on a binary image. (after skin detection)
Thank you! 
[This is the result](http://i.imgur.com/6b1CvMM.png)
Thank you, that is massively faster than my old method.
This is my favorite smoother: http://www.biomecardio.com/matlab/smoothn.html
You could smooth with that, and then to preserve the original values, just replace with what the smoother gets. orig(isnan(orig)==1) = new(isnan(orig)==1)
Help me clarify the data you have here: image_array is a set of 32 reconstructed images, each of 512x512 pixels? Each of those images represents a single slice from a CT scan? That being the case, I think you just misunderstood some of the terms. A sinogram is what you get from using the radon() function on one of those 32 images. The function fanbeam() also returns sinogram data, but uses a different algorithm to reproduce data acquired using a point source. A projection in this context refers to a single "view" (or angle) from your sinogram. So you'd get the output from your radon transform and take a single column from that matrix. That's a projection. The fanbeam() function is very similar to radon, except you need the additional parameters like SDD (source to detector distance), pixel pitch, etc. that should be in your DICOM data. I hope this helps you get on the right track. 
Well, it seems you should use the `radon` and `fanbeam` functions on the image data and compare the results. I don't see either of those functions in your code. Read the documentation for those two functions. You've read the image data in, now pass it into those functions, along with the correct parameters. I guessing all the information necessary to create the radon and fanbeam transformations is present in the dicominfo structure for each image. The metadata should tell you something about the geometries and angles used to collect the data. If you still don't understand come back and let us know where you're getting stuck. I've got some experience in these kinds of image transform algorithms, so I might be able to help if you're stuck on a concept rather than something specifically Matlab related. [radon](http://www.mathworks.com/help/images/ref/radon.html) [fanbeam](http://www.mathworks.com/help/images/ref/fanbeam.html)
It's from emacs - causing tendinitis since 1976!
Huh, TIL. Thanks!
Thanks heaps for this and the code below. Will give it a go and report back.
[datasample](http://se.mathworks.com/help/stats/datasample.html) can do this, if it is a requirement that you have to use randperm
Don't forget to add "!synclient HorizEdgeScroll=1 HorizTwoFingerScroll=1" in your finish.m script to re-enable scrolling when you're done using Matlab!
Nice work! It would be nice to get a more of a description on how you implemented it as an excel add-in.
Maybe a cascade controller is what you are looking for! You can already set a desired pitch angle, which should result in a certain speed. So you can have one controller taking distance, giving desired speed. Then next controller taking desired speed and control pitch/roll angle!
No problem. It uses the library compiler to make an Excel add in from the function saved as .m. Once the compiler finishes, the user has to install MATLAB runtime (5 min download) and then install the Microsoft Excel add in (LL.xla). The whole process takes &lt;10 minutes (file acquisition, installation, practice with the formula) which is key for somebody to actually use it. &amp;nbsp; Here is the code in MATLAB: function LL(x); %Objective: Export multcompare figure functionality to Excel so it can be used by non-MATLAB end users %OVERALL FLOW: (x) --&gt; input --&gt; processed_input --&gt; data,names --&gt; ANOVA --&gt; make multcompare figure %x is entire data frame highlighted in Excel %Take info from x and get rid of all but the leftmost column (group names) and rightmost (data) a = size(x); x; num_columns = a(2); x(:,2:num_columns-1) = []; input = x; %% Locate and get rid of empty cells in input (may be inserted by user for easy visual identification of groups in Excel) input_log=cellfun(@isempty,input); %return a 1 for empty cells anywhere in the input frame processed_input = input(~any(input_log,2),:) %rebuilds the input as new cell array that has data only where input had an entry for both name and data data = cell2mat(processed_input(:,2)); names = processed_input(:,1); %% Analyze data %http://www.mathworks.com/help/stats/multcompare.html#bur_iuv [p,t,stats] = anova1(data,names,'off'); % Perform a one-way analysis of variance (ANOVA) [c,m,h,nms] = multcompare(stats); % Create a multiple comparison figure of the group means. end I renamed it "LL." I also modified it so that the Excel user can insert blank lines between groups (as this makes it easier to differentiate between them in a spreadsheet). These will be ignored, as well as missing data. Also, because spreadsheets often contain columns in the flow of (from left to right) "group names, measurement type 1, measurement type 2..." I made the formula only act on the left most column and the right most column. This way you can highlight the block (x) and as long as you capture the group names (on the left) and the values that you are interested in (on the right) all columns in between are ignored. &amp;nbsp; This feature may sound trivial but it was requested by an end user who was very excited to be able to implement it with a minimum of spreadsheet manipulation. &amp;nbsp; Gotta give the people what they want.
sorry to be even more noobish - but how exactly do you make a controller that converts desired speed into pitch angle? I get that desired speed is just the rate or the derivative of desired distance, and the inputs and outputs of that controller (I'm using a PI controller) can be changed by differentiating/integrating, but I have no idea about modelling the relationship between pitch angle and horizontal speed... or perhaps I'm grasping the wrong end of the stick here
Your post has been removed. We don't allow people paying for help on this sub. Also, please ask a specific question not just "how do I do this?" (See the sticky at the top of this subreddit for more information). If this is a homework question, mark it as such. Make these changes and reply to this message and I'll re-instate the question. 
When you say error in 'x', do you mean error distance in the 3D space that you need to travel? If you plug in your error in distance into a controller, you obtain a value that you can plug in directly into your velocity controller, provided the controller is properly tuned. Going from velocity to angles I'd say is a little more tricky and not really a job for a controller. I'd say you'd have to do a mathematical model beforehand. Getting back to the position-velocity controller. Say you want your quad copter to advance at 1m/s for every meter error in distance you have. In this case your controller's P parameter will be '1.0', or if you want the quad copter to go at 2m/s for every meter error in distance you'd set your P to '2.0'. Then you can play with the I parameter to make it respond faster. Hope this helps. 
You don't assign B a new value within the loop. So the loop is never left. Try strg+c to abort the calculation.
Nope. But you just need to copy the B=... line into the loop. If you just place it in the loop, matlab has no initial value for B. At first you set initial values for A,W,time,n and B. Then you start the loop. And in the loop you have to update the values for the variables. Just another comment : why solving this with a loop? You can easily solve/rearrange the equation by hand. Then the calculation is just one line.
[Formulation 1](http://prntscr.com/aftbb6) [Formulation 2](http://prntscr.com/aftbqe) The other reply is correct in recommending a cascade controller. Outer loop controls position, inner loop controls attitude.
Not exactly sure what you're trying to do, but you could do something like this: for i = 1:10 [y,x] = findpeaks(Filtered(:,1)) P{i,1}(:,1) = x(:,1) P{i,1}(:,2) = y(:,1) end
Thank you for your input grdvrs. Ideally I would like to be able to copy all the iterations and paste them in Excel. If I do it cell way you suggest (using cell arrays) they are not exactly Excel-friendly. The variables come up as something like this: http://i.imgur.com/mUPZoLc.png Unless there is an easy way to transpose these data into Excel that I am missing? EDIT: oh wow of course, stupid me. Just create a new variable and allign them in it! Thanks! EDIT 2: wait it doesn't work... matlab doesn't allow me to concatenate matrix of different size. so Im back to square one. 
You could 'pad' the smaller matrices with NaN (or zeros if none of the values you need are zeros), to make them as big as the largest matrix. Then you can concatenate them. Don't know how Excel handles NaN's though
If you entered it exactly like that it's going to try to square some variable called hpir. You didn't really give me enough information to know if that's what's happening (what does "isn't working" actually mean?), but my guess is that you want to plot the calculated volume as a surface dependent on r and h so what you need to do is: V = (h')*pi*(r.^2) You need to explicitly mark it as multiplication, and you are going to want to do the element-by-by square (not the matrix one) so make sure to use a period. And if you want to do matrix multiplication of the height and radius (so you get a grid comparing them at each possible combination) you need h to be a column vector, not a row vector so use the transpose (the single quote) on h before multiplying. The parenthesis are not strictly necessary, but I included them to make parsing it easier for you. I'm still unsure why you are setting the "Volume" variable if you aren't going to use it.
&gt;Are you saying that you have the constraint that V = 0.1893 and want to plot r against h? Hmm, that's also a good possibility. OP was not very clear on what they want to do.
Your vectors h and r are different lengths, that's one problem. 
Your question has been removed. But don't worry, you can get it back. First, please read the sticky at the top of this sub on rules for posting homework questions. Please share your code, formatted properly, tell us more than "it isn't working" (do you get an error code?), and ask a pointed question. Once you've done this, respond to this message and I'll re-instate your question.
&gt; I have a vague idea of how to start but dont know how to continue. Please help! Please share with us your idea of how to start. Give us some code that you think starts the problem, and then give a pointed question instead of simply asking for "help"
Sorry, new to this whole thing. I was thinking something like this: y=input('Please enter a year between 1981 and 2015: ') problem_amoun_in_year= [9,12,16,11,13,7,19,17,15,7,5,13,13,10,10,8,11,6,14,15,9,13,14,8,10,9,10,10,12,5,10,10,8,11,7] %for loop for t=1981:y And thats all I can think of...
I have no idea, I feel like this is a very stupid question now
Don't worry, we've got these same loop-lovers out in industry too. I'd say on the majority of projects I have which involve speeding some existing code the answer is: 1. Run the profiler on mess of code. 2. See most of the time is spent inside a series of loops calling something 2 million times. 3. Just use logical indexing, vectorize, or only repeat the identical calculation one time instead.
This is a terrible example for using loops, but that's not your fault.
Given that you have to use loops as part of the assignment... I would suggest starting by making a second array which holds the years corresponding to each element of problem_amoun_in_year. Then make the loop variable go across all the possible indices of that array. Try that and see if you can figure out what you would do next. Btw, if you put four spaces at the start of the line it will format as code.
The right way to do this would be to convert the year into the index of the array containing the data for that year, then just extract that value. In your case, it looks like you could get the index just by doing idx = y - 1980; Then you'd just print the result: fprintf('Number of problems was %i\n', problem_amount_in_year(idx)) To do this with a loop, I guess you'd loop through the years and print the output when the right year is reached? Which is absurd. Your first thought is close, but you'd want to loop over all the years, not just the years between 1981 and y. You'd need to maintain some variable at each iteration to tell you what the corresponding array index would be. Think about how you would do that. 
Oh I know. I'm in industry, formerly academia. I've seen it all. Something about getting a PhD makes people write horrifying code. I'm not sure why. Edit: that said, at least in my group, nobody is this horrible. If I find out who's writing these assignments I promise you he'll never work in my group. We have some abusers of eval(), but they generally at least have some semi-reasonable excuse. 
Something like this will take a given year and access the corresponding number of problems from the vector. problem_num = [9,12,16,11,13,7,19,17,15,7,5,13,13,10,10,... 8,11,6,14,15,9,13,14,8,10,9,10,10,12,5,10,... 10,8,11,7]; y = input( 'Please enter a year between 1981 and 2015: ') y = y -1980; % change y to integers from 1 to 35 display(problem_num(y), 'problems in given year') I'm not sure that a loop can or should be used but this is for sure a question on accessing specific locations in a vector. problem_num(y) is accessing a specific location based on the selected year. 
OP, this is probably the most inoffensive way to do this. It's still a silly problem, but the trick of making an array of the years corresponding to the elements of problem_amount_in_year is a useful thing in other contexts, so at least you'll learn that. It's handy when the conversion from year to array index isn't a simple equation. For example, if there were years skipped at random. Think about why that would be helpful. 
You should pre-allocate those arrays, but it won't matter since you're just putting the same value into P at each loop iteration. Also, in Matlab i is the square root of -1, so it's generally bad form to use it as a loop index. 
Well, it's stupid in the sense that it's not at all a way to use loops. Not your fault. This is an okay way of learning vectors though, the method that /u/FrickinLazerBeams and /u/cwark suggested will work great.
That seems strange. numel([b{:}]) Gives the correct value. 
you should probably initialize your error variable. like, err = Inf; 
I am on 2015b as well. Reproduced your error. u/5uspect gives a correct work around though.
thanks!
Try using cells= P{1,1}=........ May be more difficult to handle later though. If it were my code, knowing the way that I like to handle things, I would use NaN's to pad as u/ActionJais recommended. 
Seems like you might have interpreted the question wrong. The way you suggested seems fine, because you use the randperm function, and still just pick 1, though there are countless ways to achieve this roll. However, if you really DO have to use randperm(6,1), then it gets tricky. You can't or if you can, should absolutely NOT, change the built in functions. So you are left to find some weird work around then. If you have the original instructions that might help clarify things though. 
Worked for me. Are you sure you changed your variable name to initialize the While loop? (i.e. While newVar &gt; .0003 etc) If you changed everything and still error out, i think we need fuller code to solve your problem. E.g. What is the trap function?
Going home. Try not using a loop, and running your code by hand. Copy and paste each line in succession into matlab, and see what the output is. When you need to double n, just type n=2*n and then start over at the top of the loop. I use this method for debugging errors in loops if I Cant spot them, and just to make sure everything behaves as I think it is. 
I really want to learn matlab, but our lecturer really doesnt explain things very well and it kinda leaves a pool of people, that have never coded before, lost in the dark. :/
You can also use "Step" (button in the ribbon or F10) to step through the code line by line. Or highlight and press F9. No need to copy/paste manually into the command window.
Your code has all the mistakes others said: - Must rename error. - Initialize it. - Fix trapz spelling. Plus, you are not using trapz properly, check the documentation. You need to create a vector of X values between a and b, and another vector with their corresponding Y values. Those two vectors will be trapz input. Whenever you increase n you need to expand those vectors. Perhaps something like this: a = input( 'Value of a: ' ); b = input( 'Value of b: ' ); n=1; err = 1; truth=log(b)-log(a); while err &gt;0.003; n=2*n; X = linspace(a,b,n); Y = 1./X; answer = trapz(X,Y); err =abs(answer-truth); disp(n); disp(err); end disp(n); disp(err); 
Easiest way to install is with only the installer. It will download all the necessary files during installation and you don't have to separately download everything. Just select whichever toolboxes you want to have installed. This could also be an OS issue. Not having used in windows, I can't really comment on the process. But it's been pretty much a breeze for me in few different linux distributions. 
numel was used for some indexing scenarios. I don't know if it was ever documented what the additional inputs do. http://www.mathworks.com/help/matlab/matlab_oop/overloading-numel-subsref-and-subsasgn.html
Also, fuck you. This isn't the place for homework questions. Ask your TA or professor.
You should store your columns as separate arrays. Think of them as programming variables, not a spreadsheet. You can use `gradient()` to find how much x is changing, and you can use logical indexing to look up indices in an array where a logical condition is true. These tools should be able to solve your problem.
If you put 4 spaces in front of all your code, it formats as code (: First question, as I understand it, you need to set a variable like: avg_range = 1:42; % if running avg range is from 1 to 42 and then add another for loop, where you loop some of the current code 42 times. 
I forget that exists in matlab. silly me. 
could also try the diff() function to grab an index.
Matlab is just a tool to implement the algorithms to do your projects. It can do any of these project and they are all going to be difficult, so I would pick the one you have the best conceptual understanding of, disregarding any questions about Matlab. I would first familiarize yourself with Matlab. [Cody](https://www.mathworks.com/matlabcentral/cody) is a good place to start.
I know this subreddit is a place to get help and all, but I wonder how many people actually try google before they make a post? Especially in my intro class, the professor emphasizes doing things on your own and being able to lookup and solve problems alone. 
I know I misspelled function. Sorry for that.
I can't tell how many dimensions your data are, but could you just use something like interp1 to solve this? There are also a number of functions available to do this, not just interp1. I think it would make it much easier for you.
What you are doing is not interpolating, it's trying to index an array, but doing very badly. Array indices must be positive integers. If you want to do interpolation, I'm sure you've searched the help documentation for interpolation functions. What was wrong with using the many interpolation functions you found in the documentation? They work quite well. 
I'm not really interpolating, actually (there are no gaps in data). It's actually more of a normalization (without scaling it between zero and 1). 
Fave recognition sounds like it would be the easiest since matlab has good image recognition toolboxes. 
I would say it is interpolation if I'm looking at this correctly. As your data is not a formula or something, you have discrete values at discrete points (your z_axis_velo). There *are* gaps in your data since you have discrete data points... If you want to get the data in between the points you have as in your example here: z_axis_velo_intrp = z_axis_velo(1:(42/(121 + 1)):42); it will not work... you're trying to access data inbetween data that you have... you have your array indices 1:42 (whole, positive integers). If you try to access a non-integer array, matlab will just round your indices. So in your case, your attempt to access indices 1:(42/(121 + 1)):42 results in non-whole numbers, and instead of accessing data in array location (which is again not possible): 1.000 1.3443 1.6885 ... etc It will instead round and you'll be accessing 1 1 2 ... etc You have to interpolate your data. Since you didn't mention again what your data looks like, I'll just assume as a simple case here that you have z coordinate, and z coordinate velocity only. Using interp1: z_axis_velo_intrp=interp1(z_locations,z_axis_velo,new_z_locations) will give you what I think you want.
 vq=interp1(x,v,xq) x - current x data (in this case your current z data... the z locations of the current data set you want more data points for) v - current y data (in this case your current velocity data... the corresponding velocities at the z locations of the data set you want more data points for) xq - reference x data (in this case the more dense grid you want to put your data on to) xq will probably be linspace(z_axis_velo(1),z_axis_velo(end),howmanypointsyouwant) if I'm thinking about it right. You'll essentially specify the min z location you want, the max location, and how many points, and this will be used as your input (xq) for the interpolation.
any more help is available at: doc interp1
nope. if you really don't have any x data associated with your velocity data, it would be x=1:numel(z_axis_velo) y=z_axis_velo xq=linspace(1,numel(z_axis_velo),numberofsamplesyouwant) this would be equivalent to upsampling your data so that it has a specific array length. 
[MSE is Mean Squared]Error(http://www.mathworks.com/help/nnet/ref/mse.html?refresh=true) And I would like to get the right Y value for a random X input.
The number format you have set is putting everything into scientific notation for th elargest number. I forget what the format is called. Enter command: format long and try this again.
That's just the way it displays numbers. Since you have such high differences of orders of magnitude it can't really display the 9 in that format anymore. The number is still there, try ~~a[2]~~ a(2) for example. If that's really bothering you there are ways to change the way matlab outputs numbers. Try "format long" or better look up the help for the format command
Small thing, but it is `a(2)` not `a[2]`
Hmmm... I think I understand that. And yeah, no position data. Only velocity.
Dammit, too much Python in the last days :)
Yes
Thank you! However I find it easier just to get the real part of the number by using real(angle).
It worked! Thank you so much :-)
So.... Did you get it....?
It's not true. For example I tried with SLP and the results were worse than with MLP.
This might help get you started: http://www.mathworks.com/help/matlab/math/partition-graph-with-laplacian-matrix.html
How new are you to MATLAB? I am also relavtively new but i've never seen the commands you are using before. Also I may be able to help, is there any chance you could post a picture of the assignment? Or send it to me in a dm?
I tried my best using everything online.. I'm quite sure the code is garbage.. I've sent a DM.
[removed]
No offense, but this is a math problem, not a MATLAB problem. I'll give you a MATLAB hint that may help you do math, though - the symbolic toolbox has a 'factor' function.
It would probably be a good idea to look at the distribution of values, at least for a few positions (i,j). You know, use "hist" to create a histogram plot. If the values tend to be pretty normally distributed, you're safe with the mean. If it's skewed, try the median. If it's bimodal, try taking the mode (i.e., the tallest peak). I'm curious too about what your goals are - that might help people advise you better.
Could you go into a little more depth about how to implement the covariance matrix approach?
Not sure how much there is to say. The simplest way to do this is to take your matrix M, and turn it into a vector V by doing V = M(:); And then, sticking all of the vectors into one big matrix, so that you now get a matrix with N rows (N being the number of matrices), and n\*m columns. At this point, you can use cov to compute the covariance matrix. The covariance matrix will be an n\*m x n\*m matrix (so often quite big!). The eigenvectors give you a set of orthogonal vectors which is a basis for your dataset. In other words, every matrix in your data can be rewritten as a linear combination of the eigenvectors of the covariance matrix. This is basically principal components analysis applied to matrices/graphs. Essentially, the advantage here is that if you're working with real-world data represented as graphs, then there will tend to be substantial correlations between edges. A group of edges might be very likely to co-occur, and so there is a lot of redundant information. Changing your basis to principal components space lets you think about connectivity patterns rather than connections, which can be very useful. It moves the layer of abstraction up one step in a way that is very intuitive. I don't know if that helped you at all. edit: typo
You're very close. What you're forgetting is to only count each multiple once. For example, 15 is a multiple of 3 AND 5, and it is being added twice in your script. If you want to see the way I solved Problem 1, I can post it for you. edit: I also noticed you're counting 1000, where the problem statement is "below 1000"
Do you have all the toolboxes? I think hist3 is part of the Stats toolbox. If you don't have the toolbox installed, it's not going to find it. [There's an alternative](http://www.mathworks.com/matlabcentral/fileexchange/23897-n-dimensional-histogram) for download from the File Exchange though.
Do you get an error? It looks like [filter](http://www.mathworks.com/help/matlab/ref/filter.html) requires at least 3 inputs: * b (h in your case) - numerator coefficient for the filter * a - denominator coefficient for the filter * x (a in your case) - x locations for which the signal is filtered So you're missing a coefficient in your "filter" command (I assume your a --&gt; x). Check out the help file on filter from Matlab for more info.
I actually don't get an error.. I did realise that filter takes 3 arguments but it works for some reason.
I just tried it with a random .wav file on my computer. You're right that it does't throw an error because your h isn't a coefficient, it's a type of structure (specifically a "delay"). And it looks like it should work - I put in a 1000 point delay and it does make the first 1000 points of b zeros. What's curious though is that it doesn't seem to make the vector b any longer than a. It looks like this is the correct way to use dfilt.delay, but this may not be what you're looking for? Maybe check out some other tips on how to delay a sound?
On this note, you can use the ver command to list your current installed toolboxes. Alternatively, you can check to see if you have a specific toolbox with the command and the [file exchange](http://www.mathworks.com/matlabcentral/fileexchange/51794-istoolboxavailable): result = isToolboxAvailable('image processing toolbox','error'); This obviously checking for the image processing toolbox
I think it's best to read up on PCA here. It's a super useful technique to know and it will undoubtedly come in handy for other things. That being said, I don't think I'm saying what you think I'm saying. All I'm saying is this: PCA will return components (vectors); the first principal component defines the axis along which your data vary most maximally. The second component gives you an orthogonal axis along which your data vary the second-most maximally, and so on. If you're not familiar with this, there are lots of stuff online that will explain this better than I can. In the context of graphs, therefore, the first principal component is the network/connectivity/graph pattern along which your data vary maximally.
As for the huge covariance matrix there is some trickery to get a N x N matrix instead which is often much smaller. Method of snapshots/ Sirovich But I'm sure you knew that, just for completeness.
I second the recommendation. In fluid dynamics this technique is known as Proper Orthogonal Decomposition POD. It's often used to decompose flow fields into underlying structures so if you are more the visual type approaching it from that direction might be helpful. As for the meaning of the eigenvectors it might be defined slightly differently when considering it as PCA so take this with a grain of salt. A POD essentially gives you an least squares error optimal set of orthogonal basis vectors for a galerkin approximation. 
A 15-second google gets me to: - http://www.mathworks.com/help/matlab/ref/textscan.html - http://www.mathworks.com/help/matlab/ref/interp1.html
When you searched the documentation for "fit", didn't you find anything? If not I think your Matlab installation might be broken. 
My first bit of advice is to take a step back, breath and think about what you're trying to do. It seems to me you're throwing stuff at the wall, hoping something sticks. Think about what you need to do, and then think about how you want to ask us a question. Because, as is, this is nearly impossible to follow. As a general tip: if you have a for loop that goes 1 thru n, and your vector is length n, you simply can't access the `n + 1`th element of that vector. How could you, it doesn't exist. So you need to ask yourself, how do you want to fix it? Do you need to do the calculation on the final element of the vector? Should your for loop go from 1 to `n-1`? Also, as a tip, it is bad practice to use the variable `ans`. Instead, assign that calculation to something, and then do a check on that. Because if you add any code between your calculation and your check, your code will break. 
Thank you very much for recommending this, it really looks very useful and I have already [started](http://setosa.io/ev/principal-component-analysis/) working on this, If you have any specific recommendations for reading please let me know. Thanks! 
ah, that makes sense. thanks! 
Does A return a matrix? If yes then evaluate A and then solve the equation. 
You take the coefficients of f(x)=3x3-2x2+4x1 and that is your A matrix [3 -2 4]
In my controls class this quarter we were running into the issue of lack of a true impulse function. I don't think computationally matlab would know how to interpret it. Our solution was to just approximate it. Two step functions, with height 1/del. Up at t = 0 and down at t = del.
Additionally, I think del could go down as low as 1e-15, but in reality you probably don't actually need that kind of precision 
If A(x) is supposed to be an arbitrary function of x, then it's not necessarily a linear system. You'd need to use one of the various nonlinear optimization methods to solve that. If A(x) is definitely a linear function of x, then it would be easiest to represent it as a matrix abs use standard linear operations to solve it. If A(x) is known to be linear but you don't already have a matrix representation of it, then you should be able to create one by evaluating it at a set of x values to return the columns of A, then construct a matrix from that. 
What don't you know how to do? Do you not know how to plot? Do you not know how to make your (x,y) pairs? You need to help us, help you. 
This is more of a math, than a MATLAB question, as you cannot directly solve for y. But you can solve for x, so just do that, and remember the +/- when you take the sqrt. That will get you your (x.y) pairs when you try different values of y. I might suggest making 3 separate plots on top of each other using hold on 
LSQR if it's not a square system, CG if it's symmetric and positive definite.
Looks like the function is cgs, not cg. Generally this is the one I need. Thanks a lot!
Thanks for your help, but often even though A(x) is definitely linear, representing it by a matrix is very inconvenient or impossible. For example, in an image processing application, applying a linear function to a 1000x1000 image would require a 1000000x1000000 (a million by a million) matrix, which could definitely not be stored in memory.
Thanks for your help, but often even though A(x) is definitely linear, representing it by a matrix is very inconvenient or impossible. For example, in an image processing application, applying a linear function to a 1000x1000 image would require a 1000000x1000000 (a million by a million) matrix, which could definitely not be stored in memory.
`cgs` is a more general method for linear systems without a symmetric operator. `pcg` is the method for plain old cg, and you can leave out the preconditioner if your operator is well conditioned.
Its for a project so I'm kind of worried that I'll get caught
A linear system is one where A( a_1 x_1 + a2 x_2) = a_1 A(x_1) + a A(x_2) for a_1 and a_2 numbers, and x_1 and x_2 vectors. Such a system CAN always (in finite dimension) be expressed as matrix vector multiplication. But it is not always a good idea to do so. For another example, a discrete Fourier transform is a linear operation commonly used in image processing, but I'd rather use the function fft2, instead of constructing it as matrix vector multiplication (such as [here](https://en.wikipedia.org/wiki/DFT_matrix)). Matlab does have built in methods to solve linear systems with function handles. Another user was able to point me to them. Thanks for helping out! 
It needs example usages of your function to determine the types and sizes of the inputs arguments. You can provide it with a script that calls your function or manually enter some code that calls your function. If you know your input types you can click manually define types and then specify the inputs yourself.
If this is to test the system dynamics, usually you use a step change, since it is easier to realize. 
It looks like HEVC is not yet supported ( [at least as of Dec 2015](http://www.mathworks.com/matlabcentral/answers/260310-h-265-hevc-support-in-matlab-2015) ). You might be able to use something like [ffmpeg](https://ffmpeg.org/) to extract the frames to TIFF (or other image format) and then import those into MATLAB.
I don't have a lot of experience using the ODE solvers in MATLAB, but isn't the whole point of the initial condition ( = y0 in the documentation) is that it's a static starting point for the solver? Now, if you're looking to vary the value of h and run the solver for each of those starting points then you'll have to wrap everything in a **for** loop and make sure that in each loop you're redefining h to something new and calling *ode23()*.
The vector `[x 0 0 h]` specifies the initial conditions for each of the four differential equations defined in your function handle `f1`. If you want to find solutions with different initial conditions you'll have to run the solver again for different initial conditions. 
Yeah the 'h' is used as an initial condition which works fine after one iteration. But the issue is that it uses the very same 'h' value again for the rest of the iterations, whilst for the other conditions it actually changes after each iteration. I was considering a for loop, but was not sure how I could apply the ODE and h in there
That I understand, but the thing I don't get is that the other 3 of the 4 conditions change after every iteration. But 'h' one doesn't.
I think your question is a bit difficult to understand so I'll try to rephrase it. You have a system of differential equations that you want to solve with matlab. You get results but one of the output variables does not change over time so it always stays at the value of the initial condition. I tried out the code you provided and this seems to be the correct behavior. If you plug in your initial condition into your f1 function you get a value of zero for the last entry. In fact plugging some random values always results this derivative being zero. So this doesn't seem to be a problem of the ode23 solver. If that system behavior is unexpected to you, you should check the definition of the equation. Edit: small correction it's not necessarily always exactly zero but usually over 8 magnitudes smaller than the rest.
Do you have to use the mesh? If you use `patch` everything will work as you hope- you define the corners (make sure you define them in order, that is define your corners as you move around the edge of the rectangle), and (say you put the corners into a 4x3 array called points) you'd simply say: patch(points(:,1), points(:,2), points(:,3)) with an optional `color` argument at the end. 
could this be a simple file extension issue? do the files you are importing have the correct file extension (i.e. .tif .tiff or .jpg or something)
This error Error using quadprog (line 214) The Hessian must have the same number of rows and columns. tells you that the first matrix you input (in your case, `varcov`) must be a square matrix. Is it?