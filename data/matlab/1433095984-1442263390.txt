Doing the lords work fellas :)
Well nobody can really help you if you don't provide an example of your data file. Look into the built-in function 'streamline()' to make the tracer particle plot
Thanks, that helped me a lot. That's got me able to display my vectors with quiver as well as plotting streamlines!
If they're ordered ints starting with 1, you could just put the structs in a cell array. Otherwise, recent versions of matlab have containers.Map, which should let you do it.
3.8.2 recognizes parfor as a keyword but I don't think it parallelize the loops and it's only for matlab-compatibility.
In that case, I'd have a cell array of structs, and then a Map which goes from the ints you want to put in, to the index of the struct you want to get out in the cell array. You could make your own class to do that (probably).
While I haven't tried much with 2010, I couldn't get anything to look very good in 2013. Use [libreoffice](http://www.libreoffice.org/) and SVG - much better.
Yes i have some experience with that. Whoever gave you server access to MATLAB (im guessing your school), most likely also has some server storage available to you. To use the m files you will need to upload them to the server space and call them from there. Citrix has an Explorer app in its list of applications (or at least should), open that and load the files through there...
&gt; Values can be 'any', it's just keys that can't be any class. I You are absolutely correct. The following example does just that: mapObj = containers.Map('KeyType','single','ValueType','any') Thanks for the tip. &gt; I don't understand why they can't offer generalized key support so long as you define the appropriate operator. Neither do I. Matlab's support for basic data structures is one of its Achilles heels, and it will certainly be the main cause of Matlab's downfall.
This is exactly how we did it at my school.
When the plot is open go to file, save as, and choose "Enhanced metafile (*.emf)" . This is Microsoft's vector file format and has worked in every version of Microsoft Office that I have used. To import the image into word, just go to the Insert tab and click on the pictures button. It should show up as one of the file formats that you can import.
yep never used that, no idea what i'm doing :/ normally i'd go straight for number 2 and use the LaPlace Transform on those equations
Not sure about Windows but OS X and Linux the OS can pause an app with the kill command.
look into better cooling solutions or clocking the cpu down i am not familiar with this toolbox but do you have access to the source code to train and see if there is something in there you can implement your check
One thing you can do is something like this: clf;hold on % clear the plot then allow overplots plot(r1, 0.*r1,'ob') plot(r2, 0.*r2+1,'rx') plot(r3, 0.*r3+2,'ks') What that'll do it plot the points at 0, 1, and 2 respectively. You can play with it to your hearts content from there.
It's a Linux box, I'll have to look into that... 
Something like this: function dy = differential_equation(t,y) x=y(1); v=y(2); P=P_fun(t); slope=h_fun(x); friction=friction_fun(v); drag=drag_fun(v); gravity=gravity_fun(slope); dx=v.*cos(slope); dv=P-friction-drag-gravity; dy=[dx; dv]; end You would use this with a solver like ode45
Nope. Not at all! It's the interface of seeing the seeing the scripting of exactly what is happening (including resizes, etc) while it is happening. 
I don't know if I understood your problem correctly, but if you want to solve a diff eq. of a higher order, you need to write it as a system. That way instead of having one diff. eq. of order two, you get two of order one, which most solvers can work with. That link might help you with that: http://tutorial.math.lamar.edu/Classes/DE/SystemsDE.aspx 
Yea I figured as much. It's just that I don't know how to code it. I will take a look at your link. The problem is basically: **You put P(t) watts into a known vehicle, what's its speed over time?** The thing is that if the slope is 0, you get x' = v, which is simple enough to work with. But when you introduce a slope, that itself is dependent on x because h'(t) is unknown and h'(t) = h'(x)*x'(t), things becomes more complicated. Now v is dependent on h' and x' through Pythagoras. So I'm guessing I first has to define the problem in terms of x(t), x'(t), x''(t) and solve for the later. The math is easy enough, but I struggle to get my head around the coding part. &gt;.&lt; EDIT: As far as you link go, I'm with you.
At a first glance that looks OK, it'll probably be done syntax in there.
Can you give the script that calls ode45 and the error message?
I want hprim to be a function. I just put it to 0.03 out of convience. This means that h(x) = 0.03x as to give a continous slope. But I might want to be able to set h'(x) as .1*cos(.1x) or something. So should I instead define N as a function of x and write hprim(x)?
 clc clear all time = [0 60]; y0 = [0; 0]; [t, V] = ode45(@veloform, time, y0); These are the error messages: Undefined function 'atan' for input arguments of type 'function_handle'. Error in veloform (line 26) dx = v.*cos(atan(hprim)); Error in odearguments (line 88) f0 = feval(ode,t0,y0,args{:}); % ODE15I sets args{1} to yp0. Error in ode45 (line 114) [neq, tspan, ntspan, next, t0, tfinal, tdir, y0, f0, odeArgs, odeFcn, ...
Standard gravity is 9.80665, that's rounded to 9.81 generally. If it's your local gravity it makes sense. I think it's 9.87 or something for me
So something like this: hprim=0.03; %placeholder (make it depend on x later) N=m*g*cos(atan(hprim); You don't need to write hprim as an anonymous function unless you want to pass it into / from another function. Just use your test value and substitute in the more complicated expression later.
Ok, I'll test that.
Do the cells need to be initialised with 0? If not you could call cell() instead.
The cells do not need to start with zero; I am aware that I could have made empty cells to achieve the same objective. Edit: on the same note, would cell be more efficient than zeros?
If A is an image matrix of 1s and 0s, you can simply do this to return an array of the x,y coordinates (indexes). [x,y] = find(A==1);
Thank you that worked!
Be mindful when you want to use strings. xlabel('x'); ylabel('y'); You need apostrophes to ensure your labels come out as strings and not variables.
I use the hold on command. For example: plot(x,y,'b'); hold on; plot(x,dy,'r'); plot(x,d2y,'g); Also, this is a personal preference of mine but I also like to use the grid on command. Makes my plots easier to read in my opinion.
balls
No worries :) But, can you elaborate on the resources you used, or where one could go and learn?
Yes, of course. Also why are you using a cell array for this? If it's an array of doubles, just use an array of doubles. 
You actually don't need the `==1`. Find will return indices for all non zero values. [x,y] = find(A);
use imagesc instead of imshow
Thanks a lot!! :) I'll definitely take a look into it.
My understanding is that preallocating cells doesn't matter much other than it just being good practice. Matlab has no way to know what is going to be in the cell so it can't really do much. ^(please correct me if I am wrong). Regardless of speed, given the following two options A = zeros(N,1); B(1:N) = 0; I would pick the `A` option. It is more clear what you're doing and, if you already had `B` in memory with a larger size in either dimension, you're not resetting `B` to be exactly what you want. Again, it comes down to best practices even if they are not about speed 
&gt;generally a symptom of bad code anyway Can you expound on that? I am not disagreeing with you but I certainly see times when they are useful. Sometimes even if all of the data is a set type, they can be different sizes so it is nice to store in a cell. Are there generally accepted better options?
You did not handle the case where `key_n` is not assigned. 
that is okay, I think you got it; add: colormap(gray(256));
 I did that and now i only get a black image...again. maybe the mask I use to filter the image is wrong. 
1. Are you sure it's actually 50 GB of .m files? That's *a lot* of code. 2. Where did you 'find' it? 3. Are there any copyrights or headers attached? Edit 4\. Can you do it anonymously or just post one file you found to [Gist](gist.github.com)? I've been meaning to learn neural networks.
Sounds like he purchased a used hard drive that wasn't properly wiped.
1. Stupid me, There seems to be a lot of .xls and .csv files that are over 200mb each, also there is some .m files that are about 50mb each, and some are 12kb 43kb each. BUT there is a .mat file that is 1GB. Take a look for yourself (inside of one of the subfolders of the "neural network" https://i.imgur.com/jLjFfx7.png 2. Found it on a hard drive on a computer my dad gave to me a long ass time ago, like probably 4 years ago, I am finally looking into it. 3. Some do, some don't. It seems, but I read that copyright can expire.
Hey man. Would love to teamview you and check out the code. 
&gt; Also nearly every line has a % on it I think they are comments. cuteness overload
I've found the error, I was using : * B = Y^-1 * A * X to construct the test data, but I needed to use : * B = Y^-1 * A^-1 * X which gives the correct X (translation only) and Y matrices. No idea why it's that way, it doesn't look like this algorithm solves the AX=YB problem.
I'd really like to just download all of it and poke at it with stick cause I'm so bloody curious now!
Upload this to something, it sounds interesting.
Is there any .doc or .ppt files at all? Any readable notes on what the experiment might be? I usually keep a readme in most folders.
Sorry for not replying I was extremely tired, send me another PM ASAP and I will let you look around. 
I'm attempting to optimize 5 values, but without letting the disparity between the values grow larger than a factor (in this case, 10). Overall, I'm optimizing beam field weights to provide the best coverage of a target. Five intersecting beams, five weights. This is not necessarily the lowest of these 5 values. 
Not at all sure about the copyright issues. You can try to open some of the .m files using notepad or similar. Usually information will be written as comments in the top (using %). That is a very common practice. Let us know what you decide to do - I would love to have a look also :)
I'd recommend using 5 design variables that are bound constrained to be between 1 and 10, with an additional design variable that scales the others prior to your analysis code. This adds a design variable, but eliminates the nonlinear constraints and leaves you with only bound constraints.
help ___ is the best options you have.
No, not unless you have the source code associated with the .mex file or can lick into more informative error messages via trial and error. Essentially, you have compiled binaries without documentation or headers, and there just isn't much you can do with that.
That only displays the help in the stub m-file associated with the mex file. If the stub doesn't exist, there's no help. 
What does 'passing a mask into an image' mean?
Try Google. Matlab has built in image processing functions
If you have an image I and a mask M with matching dimensions, then Inew = I .* M; % Inew has original image values where M=1 and 0 where M=0 
Have you tried googling for matlab/image/filter/convolve yet?
 Im using this code, but my output image(J) appears all black. I dont know why, because it shouldnt be black. is there something wrong with the code? clear all; close all; mouse = imread('teste_002.bmp'); figure(1) imshow(mouse) %convert to grey image I = rgb2gray(mouse); %crop image to show only one mouse with the marks I2 = imcrop(I,[1350 150 300 250]); I2=double(I2); %the mask filter= zeros(20,20); filter(8:12,8:12)=[-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1]; J= imfilter(I2,filter); figure(2); imshow(J); 
Have you tried checking the output values? It could be that they are very low. Run something like min(J(:)), max(J(:)) and see what your output is. If the output values are low there are a variety of things you can do to make it visible (scale between 0 and 1,contrast adjustment). 
What are you trying to do with that filter? The boundary region of your filter is multiplying the pixels by zero, so no wonder you are getting a black image. Even without this, what are you trying to do with a -1 factor? 
the max value is -107 and the min value is -6.324000000000002e+03(weiird). thats not normal, right? So I made J*(-1), and now it's all white. Doesnt solve my problem either. How can I scale between 0 and 1? Im not good with matlab, so sorry if im not helping at all. 
Your filter should usually be set up such that all the values inside sum to 1. Count the - 1s then divide each filter value by the sum. Your current filter is causing integer overflow so the numbers look weird. 
&gt; clear all; close all; - Don't do this. It is very bad practice. I disagree. In MATLAB, interactions between files (and even folders) is not always obvious. Just last week at work, I had something like this pop up and cause issues. General programming practice is to keep the scope as limited as possible in order to eliminate these issues. Main scripts should eliminate anything that could be floating around. I've worked with people who go to the extreme of writing *everything* in functions to control scoping. I don't quite go this far, since I really use MATLAB for prototyping code and I find that doing this makes debugging extremely annoying... but there's nothing inherently bad about clearing things in a main script. Your example gives only one particular example, but in my experience (having taught MATLAB in uni, as well), that happens a lot less than problems resulting from *not* clearing.
Yes. I understand that if I invert the image my marks will be brighter than the background, but the filter has two goals, one is to make the marks brighter and the other is to eliminate the background noise. The imcomplement doesnt eliminate the background noise. Its really important to eliminated the background noise because i am essencialy making the image viable to use the following algorithm http://site.physics.georgetown.edu/matlab/tutorial.html
Either change your negative 1s to positive 1s or If you multiple J by - 1 such that J.*(-1) something should show. This could mean your filter shouldn't have -1s but positive 1s. What exactly are you trying to do with the filter? PS I believe the filter we just created (if positive 1s) is called a box or averaging filter. 
its not mask, its a filter...sorry for the misunderstood.
num2str() or sprintf()
that sounds amazing! Not sure how I'm gonna do that, I barely understand the basics of matlab. And im having so much trouble to implement a simple filter. But making the image good for the algorithm is the hardest part I think. Then I only have to make a loop with all the images and save the coordinates of each mark in some type of matrix. If you find time to test your idea please send me a message, that could save me! thanks for your help.
I suppose one thing you could do is convert them to strings (i.e., character arrays), and compare them using the circshift function. As for middle digits, you could use strfind. Lol people downvoting me for trying to explain what the guy two comments above might have meant. God the people in this sub are assholes...
that code that you posted worked! :D i was able to detect the marks! the next step is to make a cicle with all the images and save the coordinates to a matrix. you helped me a lot! thank you so much! I would give you reddit gold if I could. 
Is there a specific reason you need to be using linmod? 
Why dont you go through some data plotting tutorials?
I'm starting to think that that linearization is wrong. you obtained yours starting from the tf to show me ''to normalize'' the last term, or is the conv() operation you did obtained from the block scheme? this doesn't seem the case, but I don't know. going by the block scheme and doing it by hand I even have a cos in the numerator after linearizing.
I have a few ideas. ### Permutations: There is *no need* for a `for` loop. First, to see if they are permutations, sort each row (`sort(....,dim)`) then use `unique` *with* the output indices to identify repeats. Ok. If you need more, then you may have to do a loop but, you only need to do it over a small subset. [C,ia,ic] = unique(A,'rows'); %ia is index such that A(ia,:) &lt;==&gt; C % Get deleted rows: ix_delete = setdiff((1:size(A,1)),ia); % A(ix_delete,:) is the cut rows. Then you can just loop over `A(ix_delete,:)` and potentially save a ton of time. ### Middle Digits: Same as above, but use array notation to trim it to just the middle digits: B = A(:,[2 3]); Then proceed.
I'm not sure what you can do about it if you're on an older version, but it's supposedly fixed in R2014b http://www.mathworks.com/matlabcentral/answers/129052-matlab-r2014a-blurry-on-high-dpi-windows-device 
It should be one of the build it functions. If not try to Google the code, copy paste it into Matlab, and save it as ode45.
I'm running 2015a Academic Edition in Ubuntu 14.04.02. I believe it has been patched in Windows, but cannot find any info about it being patched on Linux, or how to change the setting as described there if it has been. That link talks about Windows specifically, I believe.
If you want to linearize by hand (which is what I would do), the best method will be to linearize each nonlinear block individually. When you linearize, you are essentially just finding the slope at your design point, like so: http://i.imgur.com/9x7BlWz.png After that, it's just regular block diagram algebra. I've worked through it, and you will end up with the equation given.
Oh, and the conv() command (convolution) is just for multiplying polynomials. For instance: % (T1s+1)(T1s+1) = T1^2 s^2 + 2T1s + 1 conv([T1, 1],[T1, 1]) = [T1^2, 2T1, 1]
wow,this is great,thanks a lot!
This was the workaround for OS X with older versions. http://www.mathworks.com/matlabcentral/answers/103056-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-for-mac-os There's a Linux link at the bottom. http://www.mathworks.com/matlabcentral/answers/130360-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-for-linux-os Maybe it helps. 
Almost certainly the segmentation violation you are experiencing is the result of accessing an array outside of its allocated bounds somewhere in your code. The fact that it crashes the second time rather than the first run is just the result of the fact that accessing memory beyond its bounds in C/C++ is an undefined in its behavior. It might work fine, it might crash the first run, it might crash on the Nth run. I'd suggest either attaching a debugger (the following link shows how to use gdb): http://www.mathworks.com/matlabcentral/answers/91741-how-do-i-debug-c-mex-files-under-unix or if you aren't able to do that, try surgically commenting out portions of your code until you can narrow down where to look for the seg-v. I don't have the time to look through the code you provided, but that should be a place to start.
Thanks, I'll give gdb a shot. (just as a note, I've tried running this 50+ times it's *always* the second call). 
On every button in the gui put this: iU=iU+1; undo{iU}=orginial; then at the button were you want to revert/undo: if iU==0 disp('Can not undo, no previous state available...') return else original=undo{iU}; iU=iU-1; end 
What happens if you run "clear mex" between the calls? It could be that some variables are not reinitialized when the mex file is called the second time. 
No, you put the first part of my code at every button, then each time a button is pressed the object is saved in the cell undo, because each time you press a button you add one to iU, it will to the next cell entry. I forgot to add this: in the opening function you have to define iU to be 1, and make it a global. 
under the revert button.
I have MatLab 2012a so I can look around through the code, there is a TON of different projects, the biggest one being called "Sparse Neural Network". Still trying to figure out what the NN is for
youre totally right. i put all my data in one array just now and i have figured out how to do what i wanted to do. Thank you.
~~Try it. Since you are multiplying two 1xn matrices, if you don't do component-wise multiplication, you will have dimensional errors.~~ Nevermind then, I misread the issue. I thought it was the reassigning to separate arrays, not the variable naming convention. Carry on.
I agree that this was the best solution. An alternative that may be useful for other problems is to have an array that contains the names of other arrays or filenames as rows then you can loop through that array to retrieve each name one at a time.
Solved. using "profile" i found that a "path" command was taken up all the time.
The DFT gives you the components of complex exponentials that when linearly combined give you the time domain signal. Your actual signal may not be nicely decomposable into a few choice frequencies, so it is possible that it may need a wide range of them.
You could: - write your asserts in a more efficient way. Presumably the condition you're testing requires non-trivial time to evaluate. - restructure your code. Are you sure you need those loops? The way you describe them I suspect there is a vector function you could use. - remove the assert from the loop, and check for error conditions in some other way. If you need to throw an error you can set an error flag and break out of the loop. 
This is impossible. The coefficients given by a discreet FFT fully reconstruct any discrete input signal. There is no finite length discrete signal that cannot be fully reconstructed from it's DFFT. 
I think I see what you mean; since the number of samples in the "noise" portion of the signal is obviously shorter than the signal as a whole, the scaling of the two FFTs are not compatible. So should I pad the "noise" signal with zeroes in order to make the length of the two FFTs the same (and therefore subject to the same scaling?)
I was talking to the person I was replying to, although your idea to remove noise is also impossible. You can estimate the noise power spectrum, but you can't simply subtract it from a signal spectrum to get rid of noise. The noise signal nay have a stationary (in expectation) frequency spectrum but the phase will be random. The best you can do is an optimal filter. Check out a Weiner filter, for example. I expect it has a pretty decent Wikipedia page. 
Exactly the info I was looking for. Thank you!
I don't think you understand me. I was trying to explain why his signal + initial noise spectrum could have higher amplitudes in what he deemed the noise frequencies: we don't know what the signal decomposition looks like.
Can you attach a time domain plot of your data?
Oh yes, that is true.. 
It's a little hard to guess what's wrong here without knowing everything about the problem, objective function, constraints, etc. However, a few things that I would look into, given my somewhat limited knowledge of fmincon: 1) I typically use a nonlinear constraints function for the bounds. I honestly can't tell you why it would be better, but it's how I learned to use fmincon, and it's worked better for me in the past when I've compared the two methods. If you look in tutorials, you'll basically create another function (e.g. 'nonlcon'), formulate the constraints in the required way, and then call the function after fmincon while leaving the bounds as an empty set. Feel free to ask more questions if you need some help with that. 2) You may already have a good grasp on fmincon, but it is a gradient based solver, and you could have coincidentally placed some of your initial guesses at local minima. You could rectify this a few ways: (a) New initial guesses (b) Use a different solver. This could be as simple as changing to SQP, interior point, etc. This should be in the documentation. (c) Use the GlobalSearch function in the optimization toolbox. I'm not sure if you're a professional or a student, but if you're at a university, you can surely get access to the optimization toolbox. GlobalSearch is fairly easy to implement, it basically creates multiple start points for your fmincon and attempts to converge on a global minimum and eliminate local convergence. It works quite well. 3) This might be more difficult to determine, but it's possible that some of your design variables might not affect the evaluation of the objective function when coupled with other design variables. Given that you have 11 design variables, that's a big task to determine which are definitely contributing to the objective function evaluation and being optimized. Again, I don't know enough about your problem, but it's just a possibility. Good luck.
This is likely due to your parameters spanning several orders if magnitude and having very small values in general. Have a look here: http://stackoverflow.com/q/15624070 You could try to scale parameters inside the function so that on the outside, all have a similar magnitude. After optimization, you have to reversly scale the results, of course.
I'm not as familiar with fmincon but fminsearch is very local, which is why it only goes about 10% either way.
For what it's worth, when I use the curve fitting toolbox I also had to rescale values to between 0 and 1. If it tries to vary as a % change around your initial condition, you can see why it would never venture from 10E-9 to 10E-1 ...
I would set the display-options to 'iter' when using fmincon so you can see (a) whether the optimization makes any progress at all and (b) whether fmincon encounters any problems such as infeasible points. Also keep in mind that for gradient-based algorithms starting points can be very important, so changing starting values may improve the result.
Thanks for the reply - setting YDir did the trick!
I do not have MATLAB on my laptop right now but I think your solution would output a figure with all the lines in the same color.
These functions need to be in the same directory, but here is a code sample: plusone.m function [ out1 ] = plusone( in1 ) % Adds one to the input out1 = in1 + 1; end time5PlusOne.m function [ out2 ] = times5PlusOne( in2 ) % Multiples input by 5, then adds one to that multiple % Requires the existence of the plusone() function. out2 = 5*in2; out2 = plusone( out2 ); % this is what you're looking for. end 
Have you even looked at the [documenation](https://www.mathworks.com/help/matlab/matlab_prog/loop-control-statements.html)? m = [45,23,17,34,85,33]; % TODO: define sum and set it equal to 0 for i = 1:length(m) % TODO: add m(i) to the sum end
You cannot specify colors using rgb triplets and the method of calling plot you used in your question (i.e., with a list of x-y pairings for each line in a single plot command). See the [documentation](http://www.mathworks.com/help/matlab/ref/plot.html) However, you can easily loop over the plot command, specifying the color for each line using the `color` property and appropriate rgb triplet as name-value pairs. Else, you can use plot as in your example, capture the handles and use `set` to modify all of the lines' color properties at once (see the [set documentation](http://www.mathworks.com/help/matlab/ref/set.html) for details on song a single property of multiple handles at once).
Use quiver or contourf to plot your vector field. Then use this to figure out your sx and sy values. Your first example has an error where you separate sx and sy with a period not a comma. 
How would I do that? Do you have a good example?
To ask for help on your homework after clearly not even having tried to research this is pretty embarassing
&gt; I have an objective function where I run a simulation in another program and compare results to create an error. Do you keep RNG seed same across calls of your outside program? If not, your objective function will be noisy, which will mess up gradient estimates for fmincon (fminsearch doesn't use gradient, so it might work better in such situation).
Asking for help is encouraged, only after you've actually tried though. Googling 'matrix sum for loop Matlab' would probably yield the answer immediately
Here's a way: %% NOTE: this will only work on MATLAB R2014b or higher. % for older versions, you'll have to use a for loop to set the colors one % by one. %% fake data X = rand(150,50); [NR,NC] = size(X); % plot h = plot(X); % create a matrix of RGB colors (one RGB per row) colors = parula(NC); % can also use jet, hot, copper, bone, etc. see doc colormap for more info. % convert into cell array with one RGB triple per cell cellmap = mat2cell(colors, ones(NC,1), 3); %% change the line colors % R2014b or above [h.Color] = deal(cellmap{:}); %% change the line colors % R2014a or older for n = 1:numel(h) set(h(n), 'Color', colors(n,:)); end
I had in mind some kind of Monte Carlo simulation, but if your simulation is deterministic then yeah, my comment is not relevant. Then I'd guess the problem is with scaling, as others have suggested. Parameters in your initial guess range from 10^-7 to 10^2 , while the floating point arithmetic can capture about 15 significant digits - so mixing numbers of wildly different scale can lead to large loss of precision.
I'll try scaling then. But there's a way to force a minimum relative change I believe as an optimization setting passed to fmincon. If that works that may be a more elegant solution.
Similar to what /u/phogan1 said, you can use a for loop for the plot and create a cell array with the color triplets as arrays in the cell. C is the cell of colors, and you will have to set your own bounds for the loop obviously. hold on C = {[.2,.6,.2],[.4,.4,.4],[1,.4,.4],[0,1,.6],[0,.3,1],[1,.6,.2]}; for j = 1:length(files) plot(datamat(1),(datamat(2)),'color',C{j}); end
FFT 
an FFT wont allow you to filter the signal. 
Matlab doesn't do wildcards like that.
If the date you need is always today's date, you could do something like Plug2=importdata(['Plugin/ElasticDefReadings_2_',date,'.txt']); where the function "date" returns the current date as dd-mmm-yyyy, so your files would have to be named in that format. Since you can't use an asterisk, using brackets is the only way I know to vary the file names like that.
You can use the dir command to get all filenames of files in your directory, then you are able to compare the filenames to find the ones you need. Regexp may be useful. I can post an example later when I'm on my pc, if necessary. 
I'll give it a shot with dir. I didn't realize the wildcard kinda only worked in that command. There should only be one file with that naming convention in any given folder, it would just change every time I go to run my code, and I don't want to be manually editing my matlab file every time I use it.
You can use: WD = cd('somedir'); cd(WD) files = dir(*.txt); for n = 1:length(files) filedate{n} = files(n).date; DATA{n} = importdata(files(n).name); end You can sort DATA by filedate from there. If you want more *nix like behaviour you can invoke the command line using bang (!). 
I would recommend using dir() to grab a directory listing, convert it into a cell array of file names and then use regexp() to filter the list. It's a three line pattern but is incredibly powerful and flexible and can be used in a very large number of situations.
My processor was sitting about 90 Celsius after running for 20 minutes and I was mostly worried about the motherboard shutting itself down and losing my progress. But I've gotten it better ventilation and transfered most of the heavier loads to a much more efficient system, problem seems to have been alleviated. 
It was a really fun project to work on. I think it's really easy to use so go ahead: https://drive.google.com/file/d/0B3c4CyqqptCdcUtVcDdoUURiYUU/view?usp=sharing 
The output variable is simply img. What exactly are you trying to do here? Why do you need the second empty input in imshow? If you just want the pixels in your ROI you're making a lot of work for yourself with the double for loop. For example here I zero out all the data outside the ROI. img=imread('image1.bmp'); figure(1), imshow(img); [r c]=ginput(4); Bw=roipoly(img,r,c); close img_out = img .* uint8(repmat(Bw,[1,1,3])); figure, imshow(img_out); title ('Output Image');
Thank you!
My guess at what you are trying to do is rescale the display range of an image to the full range of the datatype. Take a look at IMADJUST: http://www.mathworks.com/help/images/ref/imadjust.html Though this does some outlier removal also. You could also do this with basic math. If you want a double representation in the range [0,1]: img = double(img); img = img - min(img(:)) ./ max(img(:));
The quantity you want is the cross-correlation, which you can calculate with the Matlab function xcorr()
For Comparison: This was my attempt a few months back. It works Really well. But inputting new starting conditions stinks... Nice work on yours! Works Great %The Game of Life clear all; clc; clf; universe=25 u=zeros(universe); t=.01 %R-Pentomino u(5,10)=1; u(6,10)=1; u(6,9)=1; u(6,11)=1; u(7,11)=1; [m,n]=size(u); i=1; j=1; %plots the Intial conditions in black while(1) if u(i,j)==1 plot(i+.5,j+.5,'ks','MarkerFaceColor','k','MarkerSize',15) axis([0 m 0 n]) tickValues = 0:1:m; set(gca,'XTick',tickValues) set(gca,'YTick',tickValues) grid on hold on end i=i+1; if i==m+1 j=j+1; i=1; end if j==n+1 break end end pause(t) generations=1 while(1) U=zeros(universe); i=2; j=2; while(1) count=u(i-1,j)+u(i-1,j-1)+u(i+1,j-1)+u(i,j-1)+u(i-1,j+1)+u(i+1,j)+u(i,j+1)+u(i+1,j+1); if count==3 U(i,j)=1; elseif count==2 U(i,j)=u(i,j); else U(i,j)=0; end i=i+1; if i==m j=j+1; i=2; end if j==n break end end i=1; j=1; while(1) if u(i,j)==1 plot(i+.5,j+.5,'ys','MarkerFaceColor','y','MarkerSize',15) axis([0 m 0 n]) tickValues = 0:1:m; set(gca,'XTick',tickValues) set(gca,'YTick',tickValues) grid on hold on end if U(i,j)==1 plot(i+.5,j+.5,'ks','MarkerFaceColor','k','MarkerSize',15) end i=i+1; if i==m+1 j=j+1; i=1; end if j==n+1 break end end pause(t) generations=generations+1; u=U; end j='end' 
There is a code button, you can try editing and putting it in a code block. I think the formatting is slightly different for that. 
That's really cool :) I *think* if you type "life" in MATLAB it has a built in function for it too!
Just indent the entire contents of the code once more and paste it again. You preceded lines of code with four spaces. Line 1 Line 2 Line 3
Why not just buy the newest available?
To see if he can still use 2012a on Yosemite one would imagine.
He said he has heard, now it appears he is looking for confirmation.
2014a worked fine for me IIRC
I made a script that lets you use 2014a on Yosemite, it might work for 2012a. You need to sudo it, also you might need to increase the sleep time if your PC is slow. sudo mv /System/Library/CoreServices/SystemVersion.plist /System/Library/CoreServices/SystemVersion3.plist sudo mv /System/Library/CoreServices/SystemVersion2.plist /System/Library/CoreServices/SystemVersion.plist open /Applications/MATLAB_R2012a.app sleep 20 sudo mv /System/Library/CoreServices/SystemVersion.plist /System/Library/CoreServices/SystemVersion2.plist sudo mv /System/Library/CoreServices/SystemVersion3.plist /System/Library/CoreServices/SystemVersion.plist Contents of SystemVersion2.plist &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt; &lt;key&gt;ProductBuildVersion&lt;/key&gt; &lt;string&gt;14C109&lt;/string&gt; &lt;key&gt;ProductCopyright&lt;/key&gt; &lt;string&gt;1983-2015 Apple Inc.&lt;/string&gt; &lt;key&gt;ProductName&lt;/key&gt; &lt;string&gt;Mac OS X&lt;/string&gt; &lt;key&gt;ProductUserVisibleVersion&lt;/key&gt; &lt;string&gt;10.10.2&lt;/string&gt; &lt;key&gt;ProductVersion&lt;/key&gt; &lt;string&gt;10.9&lt;/string&gt; &lt;/dict&gt; &lt;/plist&gt;
All versions of MATLAB after R2011a are compatible with Yosemite. The company has released patches for each version. http://www.mathworks.com/matlabcentral/answers/159016-is-matlab-compatible-with-mac-os-x-10-10-yosemite. If you still have trouble, call tech support. They help with installation issues, crashes and bugs for free. 
Why do that instead of just making a high-res PNG using the print() command?
Well sure, but you can export a PNG from Illustrator (which means the PNG resolution can exceed your screen resolution and have a transparent background) ... :p
NO The FFT function will not filter the signal it will only tell you the magnitude of each frequency in the signal. Of course not all frequencies because it is quantized. Do you know what an FFT is? it is a Fast Fourier Transform, there are many types of FFT's but MATLAB's FFT is what is called the Discrete Fourier Transform which is more commonly referred to as the DFT. (Not to be confused with a DTFT) Which is not the same thing exactly as an FFT it is a little different. it all has to do with how the FFT is calculated. And being digital it is all discret time. There are many intermediate steps that you need to take between taking an FFT and when you can then take the IFFT of the signal. For an entire wave file you will not want to process the whole wave file this way. IN FACT, if you know what frequency you want to adjust taking the FFT is useless it is a waste of time, because you can just create the filter and use a convolution to filter the signal. But no an FFT does not filter the signal. Open up your matlab type in help fft And it will tell you exactly what it does. and no it does not filter your signal. There are a number of other steps to take. 
Here's a simplified version of what I think you're *trying* to do: img=imread('cameraman.tif'); figure(1) subplot(1,2,1), imshow(img), title('Input Image') [r, c]=ginput(4); BW=roipoly(img,r,c); subplot(1,2,2), imshow(BW), title('Binary Mask') imgOut = img; % look up "Logical indexing" to learn about the next command. imgOut(~BW) = 0; figure, imshow(imgOut,[]); title ('Output Image (varname = ''imgOut'')'); In words: 1. read image 2. user selects a 4-gon with ginput 3. everything outside the 4-gon is changed to black 4. image is displayed 5. also, image with blacked-out area is available as a variable.
If you really just want to change graphic properties, you could just get the axes handle and then use set() commands: http://www.mathworks.com/help/matlab/ref/gca.html
i thought of this, but i'm in a cycle for every fmincon with different data so doing that way is a bit tedious but well if i can't have a better solution it will be that one. Thanks!
I'll look into GlobalSearch! Thanks!
You should be able to add 'color','k' inside the parenthesis for quiver. I'm on my phone or I'd go verify first.
It works. I verified it. Although it is technically ,'color','k'.
Ehh, it's hard to tell what Reddit will care about and what it won't.
I've had similar issues with Matlab on Linux over x2go. Are you obligued to use it? If not, I suggest MobaXTerm, it's faster and supports multiple screens in a much better way.
&gt; Unable to access variable in a function from another place... *If only there was a way to do that.*
For future reference, highlighting any function name and pressing F1 brings up the documentation, and this information would be clear immediately and there might even be a good example to help you. Some plotting functions don't have all attributes available in their own arguments, so you have to do something like fn(); set(gcf,...); and the documentation will help you decide quickly whether that's the easiest route. Not that I mind seeing your question here of course. We're all here to help each other. Trying the docs first might help you get an answer faster in the future though. 
If you need to use a variable from one function in another, then perhaps you should be returning that variable from the first function so that you can pass it as an input to another rather than polluting the global namespace with things that don't really need to be global
Oops; meant 'wt' instead of 'rt'
you can also use `fprintf(fid,'hello')`. I do not know the different between `fwrite` and `fprintf` but it is worth noting that it works
Why does your vector field have blank spots? Is it PIV data? Usually you fill single small holes with a median filter test for experimental data. A bit more information would be helpful. 
While its good that you found a work around, you really should implement ms_kitty's solution as it is most defiantly better practice than using dlmwrite. Unless you're using dlmwrite for more than just creating the file fopen is better. 
There isn't a general analytic solution for trajectory equations where drag is a function of velocity squared. You need a numerical solution. Look into Matlab's differential equation solvers, like ode45.
http://au.mathworks.com/help/matlab/ref/isa.html
You should vectorize the program itself, so it can take a, b, c, ..., z as a range of values. If your array is getting too large to do all at once, the best you can do is vectorize the deepest part of the loop.
If you have the optimization toolbox you could use fmincon.
The advice you've already got may be steering you in a better direction that what I'm about to suggest; it's hard to tell exactly what your needs are. But if you really do need to check every case, and especially if 'X' and the number of nesting levels (which I'll call 'N') can vary, then a quick and dirty method is to use dec2base. Something like this: for i=0:(X^N-1), abc = dec2base(i, X, N) - '0' + 1; curr_fos = min(curr_fos, program(abc)); end (or if you can't vectorise the inputs of program and you *do* know N's value in advance, then program(abc(1), abc(2), ..., abc(N))). 
I'm a little confused. Do you just want to change the x values, or do you need to interpolate the data to estimate what the spectra would be between two points? For example: you want to change the 0.75-micron step to 0.5. can you just replace the 0.75 to 0.5, or do you need to estimate what the wavelength/reflectance would be by interpolating between the 0 and 0.75 known data?
Use interp1 
Open the documentation browser, go to the search bar, and type "interpolation". Just a thought. 
How different are the results? On the order of machine precision? 
The example code on the QR reference page recreates the solution nicely using only the upper triangular factor. I wouldn't be surprised if this is what \ does under the hood. http://www.mathworks.com/help/matlab/ref/qr.html if issparse(A) R = qr(A); else R = triu(qr(A)); end x = R\(R'\(A'*b)); r = b - A*x; err = R\(R'\(A'*r)); x = x + err x = 2 0 1 0 
I tried a different way to solve this problem by creating a script, however the script is giving me errors. What am I doing wrong? disp('Please input the values of the variables m, k, and g in the fields below'); m=input('Input mass m: '); k=input('Input constant k: '); g=input('Input gravitational acceleration g: '); syms t v; t=int (m./(m.*g - k.*v.^2)); disp ('t=') disp (t) [v]=solve('t','v') 
very strange. If the computation for the 4th and 5th image is not correct then start there and figure out what's wrong with it. Try comparing the data in each plane of the 3D matrix with the individual 2D images. like : isequal(images(:,:,1),im1) etc. I'm guessing the data is not the same in every case. 
Thank you for your answer. Yes, whether I test with isequal() inside the loop and / or after the loop, once the computations are done, MATLAB agrees and isequal() returns 1... I have no idea what goes wrong but as suggested in another comment, the use of cell arrays solved the issue. No idea why though.
I'm going to fire off a bunch of questions, and maybe they might lead you in the right direction. Can you simply iterate through an index of days progressively? Have you tried using Julian days and converting that to calendar days as needed? How are you getting sunrise/sunset? Is there a table or array you can reference? There are ways to calculate it yourself, if you need to. Some google-fu may be needed. Are you going to be skipping days? Or are you collecting data on a daily basis? 
Sliceomatic is a nice easy to use option. http://www.mathworks.com/matlabcentral/fileexchange/764-sliceomatic
I'm not sure how much help you're expecting without any functioning sample code that reproduces your error. Use the [debugger](http://www.mathworks.com/help/matlab/matlab_prog/debugging-process-and-features.html#brqxeeu-178) to walk through your code and see what is changing.
It only returns one variable, not the three as I expect it to.
So then it's really just about detecting the objects of interest and then counting them at each time frame. For the detection this might be a helpful example where rice is detected in images (you probably won't need to correct for nonuniform illumination but what you might use is a threshold to detect the eggs): http://www.mathworks.com/help/images/examples/correcting-nonuniform-illumination.html Then, since the eggs look pretty uniform in size, you can use size to distinguish them from other objects like the fly.
Have a look at the Kalman filter. 
I don't have a solution but I'm in the same boat. I trained an svm classifier on a subset of my data and got a ridiculously high prediction accuracy (&gt; 95%). When I ran it on the rest of the dataset and calculated the prediction accuracy by hand it was about 40% Can you update me if you figure this out ?
I definitely can, but this sounds like a different problem. My problem is a discrepancy between automatic cross validation accuracy using one call to fitcsvm() vs manual cross validation accuracy where I leave out one data point per call to fitcsvm() -- the same data are being used to fit the model in both cases yet the results are different. It sounds like your model is actually being overfit to your training data and doing a poor job with the test data, right? 
Lol, is there seriously an application of a kalman filter to video analysis? Or is this a troll? 
Sure, why not: http://youtu.be/GBYW1j9lC1I
Ah, for object tracking. Okay that makes perfect sense. 
I quickly skimmed the video, I haven't taken a matrices course as I'm only going to be a sophomore. I really just saw a lot of math and no coding, so I just wanted to know if this would work for new objects that 'spontaneously' appeared on-screen (say from the abdomen of the fly). If this is the right tool, I'll study up on Matrices ASAP. Thanks a lot for any help.
Yeah, you'll have to loop over the image frames. Another important thing to check for, in addition to what /u/occamsphasor pointed out, is whether you have instances where two or more eggs are so close together that they're being detected as one. If that does occur, the areas of the detected regions will come in handy because if the area is about an integer multiple of the average egg area then it probably corresponds to that same integer number of eggs.
Thanks a lot for the input, I've been looking online, and cant find much. How would I go about making that 'average' background?
Take a look at the [Gradient Vector Flow (GVF) page by Xu and Prince](http://www.iacl.ece.jhu.edu/static/gvf/). They have a series of great publications and (probably more important to you) some source code. The [original snakes paper by Kass, Witkin, Terzopoulos] (http://www.cs.ucla.edu/~dt/papers/ijcv88/ijcv88.pdf) is pretty easy to read as well.
Thanks!
One thing, really no impact, but just an FYI, you don't need to use './' since you are dividing by a scalar. You can just use '/' and it will accomplish the same in this case. You would only need to use './' for doing element-by-element division between two matrices of the same size, but as you see it will treat the scalar appropriately ... so I guess you can really use either :) ... 
Whats this line do exactly? tFrame = difFrame &gt; 50;
You don't need to use the plotting code at all. You've got the data in your kk and e variables. You can search them. Probably something like kk(e == 10)
When you do that, the editor will tell you to use logical indexing. You should use logical indexing. 
Threshold. "Any pixel that differs from the background more than 50, make it white. Else the pixel is black." Check out the command im2bw().
`cdata` is typically "color" data. If you do a `get` on an `imagesc` axes, for instance, there's a `cdata` field.. The syntax varies on whether you have 2014b or later. So you have this movie object, and the code you posted is just querying the data file: q. do you have more frames? a. yes action: okay, I'll read those, and iterate k. So what you have is an array of these movie objects; that array is `mov`, and each one of those arrays has a member that is an image field, `cdata`. If you want the fifth frame, it would be mov(5).cdata and I'd imagine that if you wanted a 3d block of the frames, you would call several of those, and concatenate them. Frames 2:8 - which, reminder, you would only have after that while loop has run - would be stacked along the third dimension like frames_3d = cat( mov( 2:8 ).cdata , 3 ) So: you run that loop on the `xyloObj`, then you get an array of movie objects, each representing a frame; then, you grab the frame you want with `mov( frame_number ).cdata` and go 'bout yo' bidness. 
Sounds like you are being tasked with writing this yourself. Just wanted to call out that if you have the Image Processing Toolbox, there is both a command line interface and an App for active contour workflows: http://www.mathworks.com/help/images/ref/activecontour.html http://www.mathworks.com/help/images/image-segmentation-using-the-image-segmenter-app.html
Thanks! So I'm guessing that depending on the dimensions of the second vector it will apply the operation in a set of planes or another? In case of wanting to do an operation not supported in bsxfun, would a loop be the only way?
It takes dimensions that have a length of 1 and expands them to the size of the corresponding dimension in the other matrix. So dimensions must either have the same size, or one or both must have a size of one. There shouldn't be any operation that you can apply in a loop that can't be applied with `bsxfun`. Functions can be applied using function handles, and other operations can be applied using anonymous functions. However, `bsxfun` does have overhead, so you can run into memory issues if your matrix is too big. In that case a loop is slower, but is the only way.
You can do set(pushbutton_handle,'Enable','off') which will deactivate the button. As you've found out, behaviour with the interruptible property can be difficult to understand. But moreover, the issue is that when the user is in edit mode, they need to have a visual cue that they have to finish editing before they do anything else. That is, if the user has not completed the edit, as it currently stands, they could click the button but would then be confused why nothing is happening. So when the user enters edit mode, you should set the Enable property of all relevant pushbuttons to 'off' (which will cue the users to realize they need to finish editing first) and then when they complete the edit, set Enable back to 'on'. If you enforce that the user cannot do anything else while editing, you make it much easier on yourself in terms of managing the state of the GUI. EDIT: Oh one other thing that I've done - you could create a function that locks the GUI by setting the Enable property of a whole bunch of controls to 'off'. Then you can use this function inside any other function that you want to be uninterruptible by the user e.g. function do_stuff() lock_gui(h,'on') do_long_computation() lock_gui(h,'off') and again, this signals to the user that they need to wait 
This seems like it will be very helpful. I am home for the weekend now but I will get back to you as soon as I try it on Monday. Thank you! 
If you make home and away into handle classes, you would get the behavior you want without having to pass them back.
like: classdef MyClass &lt; handle ?
Damn. I need to try that. I've always just used assignin()
The fact that I've been using MATLAB for nearly a decade and I didn't know that makes me feel very emasculated =p
Programmatically? See [`dlmread`](http://www.mathworks.com/help/matlab/ref/dlmread.html), which is a wrapper for [`textscan`](http://www.mathworks.com/help/matlab/ref/textscan.html). Also potentially useful is [`readtable`](http://www.mathworks.com/help/matlab/ref/readtable.html) if you have R2013b or newer. For a GUI approach, see [MATLAB's Import Tool](http://www.mathworks.com/help/matlab/import_export/import-data-interactively.html)
This should do it: fid = fopen('whatever.txt', 'rt'); D = textscan(fid, '%*s%f%f', 'Headerlines', 4, 'Delimiter', ' ', 'CollectOutput', true); fclose(fid); In words: from the file in fid, skip 4 lines and then start reading. The data you read will be space delimited. In each row, you will see 3 items (space-separated). Treat the first item (column) as a string and Skip it ('%*s' skips. '%s' reads a string.). For the next two columns, treat them as floats. Collect all double output into a single array. Note the format string ('%*s%f%f') will be different if you have more than 3 columns in the file. If you have more that you want to skip, you'll have something like %[^\n] at the end of it meaning "skip the rest until you see a newline character."
Here is your code formatted correctly for reddit: Screen('Preference', 'SkipSyncTests', 1) [wPtr,rect]=Screen('OpenWindow',0,[]); Screen('FillOval',wPtr, [0 255 0], [0 0 50 50]); for i=50:1390 while i &lt; 1390 Screen('FillOval',wPtr,[0 255 0], [i 0 50+i 50]); Screen(wPtr,'Flip') else Screen('FillOval',wPtr,[0 255 0]. [i 0 50-i 50]); Screen(wPtr,'Flip') end end end The problem is you don't have an `if` statement to go with your `else`.
Post the actual error message and stack trace, not your paraphrasing. And put 4 spaces before each line of code so it is displayed properly.
This would be very inefficient, but you could do a bunch of nested loops that loop through every possible combination and alert you when the sum of a through e is equal to x. Even at small precision, this could take a good long while and a half, but if you were to do it this way you could set up an if check that alerts you when the sum of a through e falls within a certain range, i.e. equals x withing a certain error margin. And the obvious thing to say is get googling matlab functions that can solve multidimensional equations
http://www.mathworks.com/help/symbolic/mupad_ref/solvelib-pdioe.html
 i=1390 sets i to be the value 1390 i==1390 returns a logical true or false depending on what i is equal to. one equal sign is used to assign a value so when you doing logical operators you need to use 2 equals signs so you should have: if i==1390 
Just for grins, a Gaussian shifted to a center frequency in the frequency domain could also be implemented as a Gaussian multiplied by a sinusoid of frequency CF. You are working with the real part of a 1-D Gabor filter. http://mplab.ucsd.edu/tutorials/gabor.pdf
 set(gca,'xtick',[160 170 180 190 200],'xticknames',{'160E','170E','180W','170W','160W'}) essentially you just change the xtick names. 
For #2, you can calculate (short version): S100 = [1, 2, 3, 4].^[2, 3, 2, 3] The pattern 1,2,3,4 you already have (1:4 or 1:100 in this case) from #1. For the other sequence, it's a little trickier. I'd probably try something with the mod() or rem() commands. That's a hint. For #3, you have: L100 = [1, 4, 7, 10].^[2,2,2,2] or L100 = [1,4,7,10].^2; So you need a sequence that starts at 1, increments by 3, and goes to 100. Check out the colon() command (it's the same as :). edit: I forgot to add a sum() command around those expressions: S100 = sum([1, 2, 3, 4].^[2, 3, 2, 3]) and L100 = sum([1,4,7,10].^2);
Try it out in MATLAB!
I wanted to make a full game so I started with the background. It has not progressed further than this because I got stuck with the input. It is basically a layering of matrices containing numbers where the numbers define color using a specific colorbar and alpha and the matrices change depending on time. Therefor all matrices are filled automatically according to parameters, which was especially a challenge when it came to the stars. The system is very flexible and I could add whatever I want, clouds, characters. It's still pretty fast (&gt;90fps) but I still want to do some optimization. I'd also like to write a drawing script for drawing gizmos using ginput and imagesc.
You're not saving anything in your loop.
Little tip, you can turn off the tick marks, it's a name-value pair in your plot.
That's really impressive. The way matlab handles graphics makes baby jesus cry - it's gotten better recently but it still feels like a kludge.
It's not at all clear what you're confused about. The loop evaluates the function at each index value and stores the result. Only thing I can really say is that you should stop using sqrt(-1) as your loop index. 
Thanks, I ended up doing this. Seems like it should be smart enough to do it automatically though. 
The issue with this is the %f%f. I could need 3-4 for exporting averaged data or stress/strain from abaqus. If I need to export out a dense mesh field, this could be over 1000 columns. 
This function will work. `dims` is a matrix of dimensions of the output, and `i` is a matrix of that size with each element corresponding to one independent search. So `search_vec(1, [2, 5000])` would be the equivalent of your `for` loop. function i = search_vec(movement_bool, dims) person11 = randi(100, dims); % Spawn people person21 = randi(100, dims); person12 = randi(100, dims); % Spawn people person22 = randi(100, dims); i = zeros(dims); dx = person11 - person21; % Determine initial distance dy = person12 - person22; % betwen the people superthresh = (dx.^2 + dy.^2 &gt; 25); while any(superthresh(:) == 1) % Move the first person x = person11 + (-2*round(rand(dims)) + 1); y = person12 + (-2*round(rand(dims)) + 1); person11( x &gt; 0 &amp; x &lt; 101 ) = x( x &gt; 0 &amp; x &lt; 101 ); person12( y &gt; 0 &amp; y &lt; 101 ) = y( y &gt; 0 &amp; y &lt; 101 ); % Move the second person if movement_bool is 1 if (movement_bool == 1) x = person21 + (-2*round(rand(dims)) + 1); y = person22 + (-2*round(rand(dims)) + 1); person21( x &gt; 0 &amp; x &lt; 101 ) = x( x &gt; 0 &amp; x &lt; 101 ); person22( y &gt; 0 &amp; y &lt; 101 ) = y( y &gt; 0 &amp; y &lt; 101 ); end i(superthresh) = i(superthresh) + 1; dx = person11 - person21; % Update distance between people dy = person12 - person22; superthresh = superthresh &amp; (dx.^2 + dy.^2 &gt; 25); end end This function works by doing all the trials at once in a vectorized manner. Edit: after testing, this version definitely works.
[MIT opencourseware](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-094-introduction-to-matlab-january-iap-2010/index.htm)
that is bookmarked on my computer but I'd like to have a physical, hard copy for something to read too. 
I second this
I just dove in. First semester I did all homework in Mathcad 15. Second semester did everything in Matlab. Both were a huge pain for the first assignment. After you figure out the for loop and some basic matrix manipulation it gets much easier. The documentation online is excellent. Whatever problem you're having, someone else has already had it. I wouldn't recommend a book; watch a few videos on YouTube to get yourself started.
That is very true but I believe all the primers, pdf versions, for each version are also archived on their website though I don't exactly remember how I found them.
Yeah, that's what I mean by "they bury help". You can still find help on old versions, but when you do a search, the first links you'll find are to the latest version. Edit: This is why the doc command is your friend. The exact same help you'll find online on the Mathworks site is already there with your local MATLAB install.
The blog (actually the answers section on mathworks.com is what I was referring to) is sometimes the exact opposite and be 5-10 years old if you search for something specific. Occasionally methods will carry over or can be translated across different versions but other times not at all. You are exactly right about the help section inside the program, it can often be the quickest solution.
There's some freaking GOLD in those blog posts, hidden amongst the old stuff that's no longer applicable. I also like Yair Altman's books and [website](http://undocumentedmatlab.com/).
Thank you for the clear explanation. When I refer to the dipper function I plan on plotting delta I (The difference in contrast at which the two Gabors are just barely discriminable) as a function of the pedestal contrast. Does interleaving QUEST routines involve calling QuestCreate 3-6 times in sequence. For example Trial 1: 1st QUEST, Trial 2: 2nd QUEST, Trial 3: 3rd QUEST, Trial 4 1st QUEST, Trial 5: 2nd QUEST, Trial 6: 3rd QUEST, ... In total I would have 120 trial. Thanks MM.
The polar plotting function would be a good place to start. 
How do i install 
Those values are the same as far as the calculations are concerned, it is just how they are displayed to you that is different.
http://www.cplusplus.com/reference/cstdio/printf/ g: Use the shortest representation: %e or %f e: Scientific notation (mantissa/exponent), lowercase f: Decimal floating point, lowercase http://www.mathworks.com/help/matlab/ref/format.html (It looks like they rolled ```long g``` into ```longG```. Short vs long just displays a different number of digits, but for my work I almost always use long.
I am not sure what you are trying to do. 1/2000 is not between 0 and 0.5, so that condition cannot be met with the numbers you are using. **edit** of course it is, I don't know what I was thinking. &gt;&gt; 1/2000==5.0000e-04 ans = 1 &gt;&gt; 1/10000==1.0000e-04 ans = 1 They are considered mathematically identical. **edit** The test you want to do still works with the values: &gt;&gt; 0&lt;1/2000 &amp;&amp; 1/2000&lt;0.5 ans = 1 &gt;&gt; 0&lt;5e-4 &amp;&amp; 5e-4&lt;0.5 ans = 1
Download the zip, unzip, launchEnigma.
This has forced my hand. My next project must be to write a Bomba.
It's important that you understand this doesn't actually change anything about the math. It's just an output formatting issue. 
Meh, just a sign error. No big deal. 
They definitely are equal. They're sitting as doubles in memory; it's just which algorithm they use to print those as a human-readable string that differs in the output you're describing.
What do you mean by clustering; how to organize the data? By example, you can use a table as the input for the predictor variables. See the help files online. However, an issue arises using nonlinear regression for binary outcomes. Before moving further, are you using a specified model that requires some optimization to find parameters? Otherwise, you're not using a binomial distribution with fitnlm. Hence, a more 'correct' approach is a logistic regression to model the data. This can be accomplished through fitglm, using a logit model. Good luck. Let me know if you need more help. 
"i" is the most common and most standard iterator index. You shouldn't be using "i" to represent sqrt(-1) anyway, you should use "1i" or "1j."
The loop should work, but you don't even need to use a loop. You can input a vector to rem and then check which elements have zero remainder. Then use that to index fib and take the sum. i.e. sum(fib(rem(fib,5)==0))
Thanks a lot, how could I adjust this if each egg is multiple pixels and there is a slight 'shake' between frames, as in the egg may be a pixel off between frames due to less than great video quality. Also I'm using a vector of structures right now, should I use your method instead or is it similar
I found dlmread to be much more effective. Since I will always need to clip the first column and first few rows, and I never know the length of either dimension I can just use: in=dlmread('Model_16_A1.rpt',' ',3,1); Which reads in from position (4,2) thru (276,16107) in this case. 
[saveppt2](http://www.mathworks.com/matlabcentral/fileexchange/19322-saveppt2) &amp; [getPlotPosition](http://www.mathworks.com/matlabcentral/fileexchange/21351-getplotposition).
Thanks for the reply. As far as knowing what to plot, that is part of the reason I have accumulated so many cells in my code (by 'sections' in my post I meant cells, which are extremely useful). Over time, I have added cells with particular plots that I need, then I would comment them out to save for later. I have run many, *many* tests and therefore need to re-run these plots (or the entire post-processing script) to analyze each data file. Over time I have added many different combinations of data and I now find myself scrolling to, or searching for the cell I want to uncomment to produce that plot. Can you elaborate on how cells help me reduce the commenting out process? If I run my program (F5), it will run through each cell so I still have to comment out everything within a given cell. Otherwise, I'll walk through each cell using Ctrl+Shift+Enter and simply stop when I need to and skip the cells I don't want to run. Is there a feature I'm missing? As far as the GUI goes, I figured it was going to require more effort than it's worth as it can get very complicated by adding more editing capabilities. I'm going to skip the hassle. It sounds like 
thank you!
You're welcome!
What kind of data is it, what measurement technique are you using? Not, how is the data saved. The system you are measuring and technique used will dictate the appropriate type of visualization. For example, if you are looking at a time series of 3D data a movie would be good. On the other hand, if you are looking at something like particle velocity in a volume and want to plot temperature at each point, something like a 3D quiver plot with the arrow color representing temperature would be more appropriate.
You're probably right on both counts. How do I do that? inv(A.) is not a thing.
Well, for an example say I have [3a+2b;4a+0b;5a+1b]. I want to pull out a coefficient matrix A=[3 2; 4 0; 5 1] so that A*[a;b] yields the original matrix. All I expect as the result is a matrix similar to A. I have figured out that J7=subs(v77,{od1,od2,od3,dd4,od5,od6},{[1 0 0 0 0 0],[0 1 0 0 0 0],[0 0 1 0 0 0],[0 0 0 1 0 0],[0 0 0 0 1 0],[0 0 0 0 0 1]}) works. Or at least it seems like it does. When I go back and try to compute v77-J7*[od1;od2;od3;dd4;od5;od6] , it's not zero. Hopefully that's just an issue with the treatment of symbolic variables. I'll know when I get to plugging actual numbers in. At any rate thanks for the help.
Don't know if this is exactly what your looking for but this is how i read frames... %read video obj = VideoReader('test.wmv'); numberofframes = get(obj, 'NumberofFrames'); for k = 1 : numberofframes frame = read(obj, k); ... some code here.... end
Matlab cannot do the impossible, and neither can you. That's not an invertible matrix. 
u/tedwick is right. You may try looking up 'array left division' and 'symbolic array left division' on mathworks.com... But it is possible that your problem is under identified.
lsqnonlin and lsqcurvefit are the same function with different syntax and are specialized for this kind of problem. They can be used to call either a trust region algorithm or a LM algorithm. fmincon also gives access to a trust region algorithm, but can call other algorithms as well. If you aren't supplying a gradient, then you can't use the trust region algorithm and lsqnonlin and fmincon become completely different.
Since you're using finite differencing for gradient approximation, lsqnonlin will use [this algorithm](https://en.wikipedia.org/wiki/Levenberg%E2%80%93Marquardt_algorithm), which is specialized for objective functions which are sums of squares. Other optimization algorithms work, but aren't specialized for this problem. The objective function remains the same in both cases. Aside from using multiple starting points with global search, there are measures you can take to ensure the local minima you find are accurate: * Adjust the termination tolerances to an appropriate level * Scale the problem. All input and output variables the optimizer sees should go from 0 to 1, -1 to 1 or something similar. This can be accomplished by writing a wrapper around your main function that multiplies the inputs, passes them to the main function, then multiplies the outputs. * Adjust the size of the finite difference step. Too large, and there will be high discretization error. Too small, and there will be high truncation error.
Ok, thank you for your tips. I have already scaled the parameters by their initial value but since some may change a lot maybe it's just better to scale in such a way that the maximum value they can take is 1. What do you think? Regarding the differential step I have set 5%, do you think it's ok? I don't think there are such truncation errors but the problem is more that because there is experimental data a small change may not be perceived well since there's always some noise. I have tried less than 5% and it seems to work worse that's why I sticked to 5%. Maybe using a central derivation is the best way to go even though it's slower as it will compensate both sides. My objective function is the sum of the errors between experimental and model and divided by the value of the curve in that point and the number of points for that set of curves and finally by the number of curves. This way all the curves should matter the same and the error makes sense since an error of 20% is directly an average error of 20%. Also if the curve has a value of less than 10% of the mean I saturate the divisor by that value so that if I have a curve going from 0-10 I don't get close to infinite errors at the start. In most cases this is not done anyway. With all this said it seems to me I'm stuck. Maybe you can give me some more tips. I get some results that are OK but I can see it's not the best. For example some parameters affect some curves a lot and some others not that much and the algorithm seems to just forget the ones that matter less. It makes sense at first maybe but later the "slow" parameters should be changed eventually.
[Decent place to start](https://www.mathworks.com/discovery/matlab-multicore.html)
So your plotting script is actually just a set of cells, and you're needing to find which plot to use for a specific test by sorting through the whole list? I think you're just trying to do everything you need in one script, and that might be causing some organization issues. MatLab is designed with OOP in mind and you should take advantage of it. If you already have a massive pile of scripts to create plots the way you want them, it would be best to make an individual function for each one. You still need to pass the information, but that's a single line of scripting after other post-processing. Or at least break that one script into multiple scripts for better organization. Having to sift through 1200 lines of code to reuse only a handful is the exact problem OOP attempts to solve. Regarding cells, Ctrl+Shift+Enter executes the cell and moves to the next, but Ctrl+Enter executes the current cell *only*, getting a similar effect to commenting out unused cells. If you know which cell is the one you want, just scroll to that one and use it.
Ok thanks on your tips. As by scaling with the logarithm how would you proceed? If I do log(p/p0) I'll get log(1) = 0 as initial parameter. Before my initial vector was [1,1,...,1] and now it will be all ones except zeros in the log values. Is there a problem with zero maybe for example when doing the gradient estimation with a % of change? Maybe it's more appropriate to scale as log(e*p/p0) so it starts at 1 again but big changes are reduced from the optimization point of view.
There is: x = A\b; will *almost* always be the best. IIRC, Matlab throws a few tests at it to see if there is a best way to solve it. If `A` is square (and well conditioned) it will invert it (though in an optimized fashion checking for structure). If it is over-determined, it will also do least-square (that is, minimize `norm(Ax-b)`) which *I think* is the same as you have above but should be faster. Where you have to be careful is if `A` is under-determined. Then, it will solve `x` such that there are no more non-zeros than `length(b)`. This is *not* the least-square solution on `x` (that is, minimize `norm(x)`) but it is usually better. However, there are better ways to do these problems (check out Compressed Sensing).
I asked a very similar question in /r/math yesterday, http://www.reddit.com/r/math/comments/3cexkt/alternatives_to_matrix_inversion_for_solution_to/ There are several numerical methods that are faster than the MATLAB default (A/b or inv(A)*b) due to the checks it performs. Again this is only really useful if you have to calculate that equation several times, say in a for loop. Otherwise look at the structure of your matrix. Sparse matrices are much faster if you have a large matrix with lots of zeros. Hope this helps!
You'll likely get greater speedup if you also code those loops within the mexfile. Otherwise you're still running the looping logic inside MATLAB and incur the function call cost at each iteration, both of which will slow your program down.
I don't want to sound like a dick...but are you asking how to use a [loop](http://www.mathworks.com/help/matlab/matlab_prog/loop-control-statements.html) ?
Ode45 runs and gives me a matrix of values for y, so I believe it is working correctly, I'll try something in the function file, thanks.
Check the size of your allocation--remembering that passing a single argument to most of Matlab's explicit allocation functions (e.g., zeros, ones, cell) causes the function to allocate an NxN array (e.g., `zeros(4)` allocates a 4x4 array of zeros). Short of that: it's impossible to tell without seeing the code and your machine specs. But usually is an error in allocation, if you're allocating for a single frame (or 4) and hitting memory limits. Last but not least, although this part isn't likely the cause of your problem: remember to allocate the smallest data type that will suffice, if you're truly pushing the limits of your memory--a 4k uint8 is a lot smaller than a 4k double. 
Just integrate with ode45 to the final time, and look at the solution to answer the question of t at y=50%. This will be a lot more straightforward than supplying ode45 an event to "stop."
The .net speech to text functionality is very easy to implement. You can find videos on how to do it online. It's also possible to use .net with matlab but might not be the easiest to figure out as a beginner. Hopefully someone else here can lead you to an easier, matlab only solution. https://msdn.microsoft.com/en-us/library/office/hh361683(v=office.14).aspx
As one of many solutions, you could put normrnd = @(m,s,r,c) randn(r, c) * s + m; at the top of your code. You now have normrnd().
Awesome, this is the solution I was looking for. Thank you.
what do you mean? The command save('filename.mat','Rvec*') saves all variables that start with Rvec. That almost does what I want to do. But I also have other vectors called URvec2, so it would also save those which isn't what I want.
Come again? you can still put it all in cell array, and it will be sparse if you don't specify every variable. If you really want to save it in the way you propose.. save_string = ''; for n=1:length(y2) save_string = [save_string ' x' num2str(y2(n))]; end then use the eval function.
No. I'm going to let your professor know you're trying to have us do your homework. It's vmitin@buffalo.edu, right? 
So from my understanding of your code, you are playing all the different notes for half a second each. Assuming this is a quarter note, all a half note is is the sound playing for twice as long, so playing it twice or better yet changing t to go to 1 second. I would suggest making a whole note array and then half the array however many times as necessary. Let me know if this makes sense. I'd try coding it on my own, but I'm on mobile. I'll try to explain things better if I can. 
So that line, t = [ stuff ]. Change the last number from half to one. That should make the note longer without changing the frequency. 
That's up to you as to how you wanna do it. What I'm suggesting is make a whole-note array (thats the t variable) and find a way to only use the first half of that array variable. So if it has 8000 values, only use the first 4000 and throw the rest away. Let me add how it works. You could probably look up MATLAB colon notation to get a better explanation, but here goes. Variable t is an array, or a list of numbers stored inside a single variable. What [0:0.125:1] does is start the list at zero, increment each value by 0.125 as you go down the list, and end the list at 1. To see this in action, the code you have, then just type t in the command window and press enter. You'll see what I mean. Sorry for the late response, but I hope that helps a little. 
Get and set simply get and set properties of graphics objects in Matlab. Graphics objects are represented by their handles. Say you have a figure with the handle f1. f1 = figure; surf(peaks) You can use get and set to change that figure's properties. So cmap = get(f1, 'colourmap'); Returns the vector that defines the colourmap. Then in you did: cmap = flipud(cmap); set(f1,'colormap', cmap) This would flip the colourmap of the surf plot.
Create the structure using struct and then start to populate the fields. An example from the documentation: Create an empty structure with several fields. s = struct('a',{},'b',{},'c',{}) s = 0x0 struct array with fields: a b c Assign a value to a field in an empty structure. s(1).a = 'a' s = a: 'a' b: [] c: [] 
So I finally figured out how to do what I needed to do. Here is the final product. There are some errors in there but after working on it all day...I don't mind, lol. I thought you guys would like it. 
Sounds like such a happy song the way you wrote it, haha.
; please. 
lol that is so cool
Hi, thanks for the reply! The GUI runs no problem, so typing it into cmd works. The actual program itself doesn't analyse my data or give me results, even though the .m file works perfectly.
In Matlab you can't chain indexing or index non-predefined variables... you have to define a variable, and then call a value from it (i.e., a = size(m);).
Ok, thanks :D
As the other comment said you can't chain index. However you can do size(M,dim) to get size along a specific dimension. In this case size(m,1) will do the job.
You can also do [a,~]=size(m) or [~,a]=size(m) if you want.
anyone ?????
For sprintf to work in the way you want doesn't it have to be sprintf('x_%i',y) ?
This really depends on what you need, but is quite simple. The first step is to define the x and y values on which you wish to get the function value, for example: x=[0:1:10] y=[0:1:10] This will create and fill two vectors that start in 0 and end in 10, with a step of 1 between the starting and end values, i.e. x=y=[0 1 2 3 4 5 6 7 8 9 10] . For more info check this link http://www.mathworks.com/help/matlab/ref/colon.html . Then you can evaluate the function using the values where you wish to see its result: func=-x * y * e ^ (-x ^ 2 - y ^ 2) this will create a vector func that will evaluate the function with the multiple values of x and y that you previously defined. 
I guess let me explain my line of code real quick. What I am doing is going to the URL, skimming the source link to find a section of code I would like to take data from. In this instance it is the P/E (Price to Earning ratio). I find the line of code and try to extract the ratio. Well it turns out that there are 18 other occurrences with the same line of code. So I shift through my cell array and find the string of text with the P/E. Now I am trying to chop off most of it and save the 4.97 into a separate array which is "pe". What is happening is that ".97" is saved and the 4 is not. I was wondering if anyone knew why this is happening?
Is this Subreddit not active?
If you also change the @(x) to @(y), sure.
Wow, that did exactly what I wanted it to do! Thank you very much! I'm not a programmer by trade and just do small stuff on the side as hobbies so I know my code is kinda shitty. But thanks again for taking the time to help. 
I would suggest breaking each function into its own M-file. This is convenient because it allows you to debug the program in the main function and edit the files of the sub-functions without breaking debug mode. Of course, you've probably already gotten the bugs out, but in the future this could save you some time.
If you aren't worried about speed, use movefile() so you don't have to have separate versions for different OSes
As the other comment pointed out this probably destroys portability. Have you come across examples where this makes a strong difference to running time across the whole program?
This just brings a smile to my face... oh the nostalgia... great work OP
I'm not sure how to do that. Could you show me? 
Thank you! :) 
&gt; I need to seperate the events that happened within 100 seconds into seperate 'blocks' and Im not sure how to do that. I have already given each event its own variable (theres only 10 possible events) and im not sure how to proceed. Use a diff on the time vector.
No worries! all you have to do is the following: sigma = 1e-3; envelope = exp(-(t-0.1).^2/sigma); Al = sin(2*pi*220*t).*envelope; In this way you are adding a tapering envelope to each of your notes. Try it with different values of sigma to adjust this Gaussian envelope, you will get different wave packets for each note, as shown below, http://imgur.com/iGBhWJ2 Figure 1 is with sigma = 0.1 ms, and Figure 2 is with sigma = 1 ms for note A. You will notice a very different sound by adjusting sigma. You can also change the functional form of the envelope - I'm not an acoustic expert, but I would say different instruments will have different envelopes owing to their acoustics etc. - EDIT. It looks like the normal envelope is probably best modeled as an exponential decay if you spend more time on it, I'm sure you will get it sounding even better :) I'm having too much fun on this.. back to work! For example your code out of the box sounds like it is coming form an organ, and using a small gaussian envelope - the sound is more "8-bit" like.
use the debugger
It is still faster to look up the OS rather then use movefile() for renaming files. My test shows that even with an [OS system check/call that movefile\(\) **took 80X longer** (1.2GB file).](http://imgur.com/a/MWEWs)
 newBackgroundStruct(bckgrnCounter).cdata = double(placeHolder);
&gt; Posting a small example input and desired output would help. Post a sample of your text file...
You need to do an element wise multiplication also... ` z = -x.*y.*exp(-x.^2-(y.^2))`
A better test would probably be many small files, and it's not like system calls might not change or an edge case will come up. If you do this in programs that will be distributed best to make not of it for the user, or provide both options.
I should have specified, its faster only for files over ~50mb on my CPU. _________________________ Test it on your CPU and let me know... lis = dir('*.mkv') if ispc for i=1:numel(lis) CurrentName = lis(i).name NewName = [int2str(i),'System_',CurrentName(end-4:end)]; command = ['rename "',CurrentName,'" "',NewName,'"']; dos(command); end elseif isunix for i=1:numel(lis) CurrentName = lis(i).name; NewName = [int2str(i),'System_',CurrentName(end-4:end)]; command = ['mv "',CurrentName,'" "',NewName,'"']; system(command); end end % OR: %% MOVEFILE return %%%%%%%%&lt;&lt;&lt; remove this and comment top for i=1:numel(lis) CurrentName = lis(i).name; NewName = [int2str(i),'movefile_',CurrentName(end-4:end)]; movefile(CurrentName,NewName) end 
Hm. Now you make me wonder how a linked list might look with handles. Not that I have any need for a manually created linked list of an object of my design in matlab, lol. 
Are you able to run the executable by typing 'C:\path\to\program.exe --flags --etc' directly into a command window? Could it be that you executable isn't included in your PATH variable?
Indexing from 0! That's not very MATLAB of you.
I came upon this while doing some research..do I just add the C:\path\to\program.exe under the PATH variable in system environment variables? Apologies for the stupid question I usually run the program by typing: program --flags --etc into cmd.exe
2) First set PATH=C:\path\to; Then make the function call, system('program.exe --flags --etc') 
It works! Thank you and /u/JoeDrinksCoffee !
Normally you vectorize by replacing for loops with equivalent .* or ./ operations. In this case, looking at the documentation imquantize and multithresh are able to work on matrices. Your loops look a bit strange. If you are going across 100 stacked images, won't you need only one loop across the third dimension?
first let me say that I cannot imagine any scenario where you'd want all your data split into 501 different files. That sounds like a huge mess. Wouldn't you rather have it all in one file and then just split it in matlab and do the analysis there? That said: myData = rand(M,N,501); for ii = 1:size(myData,3) fname = sprintf('myData%03d.mat',ii); slice = myData(:,:,ii); save(fname,slice); end But again I want to stress that I think this is a bad idea.
You could use something recursive like this, if I understand correctly: function loop_matrix = rec_loop(varargin) loop_depth = varargin{1}; if length(varargin) &gt; 2, current_level = varargin{2}; N = varargin{3}; else, current_level = 1; N = varargin{2}; end; if current_level == loop_depth, loop_matrix = (1:N)'; else, loop_matrix = []; to_the_right = rec_loop(loop_depth, current_level + 1, N); for n = 1:N, [nR, nC] = size(to_the_right); loop_matrix = [loop_matrix; ones(nR, 1) * n to_the_right]; end; end; So in your example, you'd call lm = rec_loop(3, 2) (and subtract 1 to get zeros and ones instead of ones and twos). Wouldn't want to claim this is particularly efficient in any way though...
I might be off, but meaby just do 1:n! And translate to binary :)
I usually make vectors out of my iteration variables. Additionally, I usually leave my nested loop in my code, as a comment block. **Here's an example:** %% Nested For Loops tic; output1 = rand(100,100,10); slice_size = size(output1); for ii = 1:slice_size(1) for jj = 1:slice_size(2) output1(ii,jj,:) = imquantize(output1(ii,jj,:),multithresh(output1(ii,jj,:),2)); end end toc %% Vectorized tic output2 = output1; ii = 1:slice_size(1); jj = 1:slice_size(2); kk = 1:slice_size(3); output2(ii,jj,kk) = imquantize(output2(ii,jj,kk),multithresh(output2(ii,jj,kk),2)); toc if all(all(all(output1 == output2))) disp('Methods are Equvalent!') end **My output is:** Elapsed time is 29.490667 seconds. Elapsed time is 0.034394 seconds. Methods are Equvalent! **And if this were my code, I would do the following:** %% How I would code it: output = rand(100,100,10); slice_size = size(output); % Un-Vectorized % % for ii = 1:slice_size(1) % % for jj = 1:slice_size(2) % % output(ii,jj,:) = imquantize(output(ii,jj,:),multithresh(output(ii,jj,:),2)); % % end % % end % Vectorized ii = 1:slice_size(1); % Iterates through row pixels jj = 1:slice_size(2); % Iterates through column pixels kk = 1:slice_size(3); % Iterates through each image output(ii,jj,kk) = imquantize(output(ii,jj,kk),multithresh(output(ii,jj,kk),2)); 
The processing I want to perform is for every pixel "depthwise" into the stack (across all the values that a single given pixel i,j takes over the 100 images). That it, one vector for each pixel in the first and second dimensions (1000x1000). Hence the loop for i going over the first dimension, and the j loop going over the second.
Thank you so much for this. I'll run it to better understand what's going on and keep it in mind in the future.
In line 3, you are defining the "base" length for all the notes. The ".20" value in the t vector specifies this length (which is .20 seconds). So, quite simply, you can play shorter notes by shortening the note length before adding them to the line* vectors you have defined. Let's say you want to play line 1, and then play the exact same notes in line 1 but at half length. I am very tired, but quickly modified your code to illustrate the concept (Only used line 1 from your code). Check it out: http://pastebin.com/ggxBasg3 As I said, it's probably very crude and poorly implemented, blah blah, but it illustrates what I'm trying to say. You can change the value of each element in the *_lengths vectors to specify the duration for each individual note. 
I looked over the documentation for imquantize and multithresh, and they seem to perform element by element operations. You could feed it the entire matrix.
Not personally. But my friend works at a bank and told me that all the high-pay internal promotion postings are looking for people with MATLAB knowledge. 
On the buy side, GMO - Global Macro Hedge Fund, is a Matlab shop. I've seen other quant funds employ it as a prototyping platform. Simply put if someone high enough has had a positive experience with it and can convince management that it is a worthwhile/time-saving expense, then you stand a good chance of having it being used. The value proposition is being eroded (somewhat) by open source alternatives such as python and R. Matlab's post sales support remains a valuable point of differentiation between it's freemium cousins and it. It is not commonly used in the high frequency space: C++ still rules there.
Thanks, this is perfect. What is happening when we subtract the 48 that converts it into a double?
From two days ago in this sub: [[HIRING] - Northern RI](https://www.reddit.com/r/matlab/comments/3ddaha/hiring_northern_ri/) posted by Orenda Financial
The weird part is, another post that vectorized your loop shows that the results are exactly the same, when he used ii jj and kk indexes which basically were equivalent to feeding the entire matrix in. So either your method is wrong, or I am severely misunderstanding indexing in matlab ...
Glad you solved it yourself, the reason == worked but not = is because == is a logical operator while = is a mathematical operator.
I think it depends on your data structure then. In this case your fundamental unit of data is a vector (i,j,:), or [1 1 n]. You can't vectorize any more than that unit - because imquantize and multithresh don't know that if you feed in a 3d array to look at pillars along the third axis.
Exactly my conundrum. So I do need to run `multithresh()` for every single pixel across the first and second dimension across the array.
It looks like you're trying to assign a 2D matrix equal to DATA1 to a row in DATA. Is your intent to append DATA1 below INTRO1? If so you need the syntax: DATA(nIntro:nIntro+nTrials, :) = DATA1; That way you are assigning a matrix to a subset of the matrix DATA as opposed to trying to assign a matrix to row number 256 of DATA.
Do you have the curve fitting toolbox? cftool(xdata,ydata,[],weights) lets you weight each point according to what you want. Weight the last point very high and you should get what you need. You can interactively look at different orders of polynomials until you get what you need.
Does your remote server have MATLAB installed on it? You might be interested in checking out [MATLAB's Distributed Computing Server](http://www.mathworks.com/products/distriben/) if you have that.
Honestly your Possible variable has so many dimensions, no wonder you got this error. Easy go to for most stuff is to run: Dbstop if error Run your script, let it error, then evaluate variables on the line it failed at (F9). You should be able to see the dimension mismatch since it is stopped in debug mode. That or make it easy on yourself and create multiple two dimensional matrices.
Maybe just try using the profiler and optimize the script. Or break the script down to segments and run them individually. Manage your memory. Don't create a large cell array and carry it in memory, maybe save it and clear the variable.
Matlab is nothing like C. Anyway, the documentation is great. Have you looked at it? 
MATLAB is a [domain-specific language](https://en.wikipedia.org/wiki/Domain-specific_language) which targets numerical computing. Certainly everything you can do in C++ you can do in MATLAB (and vice versa; with trade-offs in efficiency). MATLAB itself is written mostly in C with some FORTRAN, but this isn't transparent to the typical user. The built-in functions that make life easier that ship with MATLAB are proprietary, so no book out there for the public can even make such comparisons (between, as you put, "the nitty gritty" approach and those *specific* proprietary functions). Now there are many books out there that teach numerical analysis with MATLAB as an illustrative tool. Just google "with MATLAB" and you will find many. Hope that clears up why you're not finding more on what's built in.
[This is the best guide I've read.](http://es.mathworks.com/matlabcentral/fileexchange/5685-writing-fast-matlab-code) I came from the world of C and Python - and trust me, if you ain't vectorising, you doing it wrong.
Yes, there's always ways to do stuff in less efficient ways. To add to what I said and clarify a bit, when I stressed that their functions are proprietary I don't mean to imply that no one outside Mathworks knows what algorithms they're using. Mathworks has simply spent decades improving them incrementally and shaving percentages off their execution time compared to "naive" implementation. It's not difficult to find out what algorithms they are using and the documentation usually tells you. For example, the [eigs](http://www.mathworks.com/help/matlab/ref/eigs.html) function in MATLAB uses an [Arnoldi method](https://en.wikipedia.org/wiki/Arnoldi_iteration) implemented using the freely available FORTRAN subroutine [ARPACK](http://www.caam.rice.edu/software/ARPACK/). It would be an instructive exercise for you to try all three approaches in MATLAB (i.e. built in `eigs`, call ARPACK, and from scratch "nitty gritty") and time each one to get an appreciation for what's involved. The wiki I linked has the pseudocode. 
Installing 2015a in the very moment on Win 10 Pro Build 10074. Edit: Seems to work just fine. Doing mostly psychoacoustic measurements and signal processing.
If all you are doing is a composite transformation of pure rotations, you can simply form the composite transformation as the product of the rotation transformations: T = T1 * T2 * TN; The final location of your points is then just: PointsOut = PointsIn*T; I don't see the need for quaternions here.
Is your final goal really to return the sum of two numbers? If so you could save yourself quite a bit of hassle by using JavaScript.
[lsqlin](http://www.mathworks.com/help/optim/ug/lsqlin.html) will do exactly what you want.
No, it is not, it is slightly more complex. I have chosen to compile the .exe for now
That's because edit1String = get(handles.edit1, 'int'); does not get the contents of the text box - it gets the value of the 'interrruptible' property. Interestingly, this seems to be a wierd 'feature' in Matlab that I wasn't aware of - you seem to be able to retrieve any property as long as it is uniquely identified by the substring. So for example get(u,'FontName') get(u,'FontN') both do the same thing, while get(u,'Font') gives an error, because there are a number of other properties beginning with 'Font'. Regardless, the remainder of your bug is simply that edit1String consists of the characters 'on', and the ASCII codes for these characters are 111 and 110 respectively e.g. &gt;&gt; char(111) ans = o So it looks like that int2str is converting its input argument into an integer before converting that integer into a string representation of the that number. Anyway, I would generally be using str2num or str2double to convert a string to a number, and num2str to convert numbers back into strings - for what you're doing, even if you used 'string' instead of 'int' at the start, you will just be getting back the ASCII codes for the characters in the text box.
What I tried so far according to the MATLAB documentation Let 'dax' be a price series of the DAX returns = price2ret(dax); % convert prices to returns model = garch(1,1); % set GARCH(1,1) as a model fit = estimate(model,returns); % estimate the parameters / fit the model paths = simulate(fit,1000); % simulate a possible path plot(paths) The problem is that the 'paths' don't look like the real return series. What I expect to see is a series of numbers oscilating around 0.
It's best to avoid string based evaluation, but if you can't you can use eval to get the values for a given variable. http://www.mathworks.com/help/matlab/ref/eval.html for idx = 1:numel(L) L_val{idx} = eval(L{idx}); end You can then interact with the cell elements as you would with normal variables. L_val{2}(3) If you have the MAT file already you can also load it into a struct and query values using dynamic field names. save('file.mat',L{:}); L_val = load('file.mat'); &gt;&gt; L_val.(L{2})(3) ans = 3
It's not really shocking, is it? Matlab is used by a number of engineering firms doing a number of different things. 
Fantastic. Thank you.
It's great that you're actually putting though into your data structures. A lot of people never ever bother to do so, and then are shocked when it's impossible to manipulate their data easily. However, this problem is hard to really help with unless we have some code we can actually run. I understand you didn't have real code available when you made the post, but if you edit in a small functional example, it would help a lot. 
I thought this was pretty interesting, actually. I know MATLAB is used frequently for biological image processing, but it's cool to see that it's also the tool of choice in other fields.
But... Python! I wouldn't be shocked to find out that Simulink was used in some of the control systems.
You have a good start on this and you ask a very good question that I myself once wondered. What you want to do next is look into MATLAB functions specifically written for binary images. First and foremost is regionprops. For image processing, regionprops is one of my favorite functions mainly because it provides a lot of useful information that would take a long, long time to code yourself. This code: RP = regionprops(YourBinaryImage, {'Centroid', 'Area', 'BoundingBox'}) will give you a structure with the properties I listed. Note that if you have more than one white region, RP will be a structure array. In that case, you'll have to find the one with the largest area.
pcolor is tricky in that it's showing all 15x15 points in your matrix c. However, the squares between the points (14x14) are colored according to the average value of the 4 adjoining points. If you want a 15x15 display, try using imagesc() instead of pcolor(). Better, use [heatmap](http://www.mathworks.com/matlabcentral/fileexchange/24253-customizable-heat-maps).
Get the i,j coordinates using find and take the means. 
You've got your binary image `image`, where the ghost is 1s and everything else is 0s. [i, j] = find(image); centroid = [mean(i), mean(j)] Line one finds all non-zero elements of `image` and returns their array indices in two vectors (row indices in `i` and column indices in `j`). So the array index of the first ghost point is `[i(1), j(1)]`. The 'array index' of the centroid (not actually an array index because it probably won't be integer) will be the mean of all the other indices: i.e. `[mean(i), mean(j)]` (or `mean([i,j])`, they're equivalent). Things to be aware of: - this doesn't give cartesian coordinates (starting from the bottom left), it gives array indices (starting from the top left): you may want to subtract `i` from the first element of `size(image)`. - because matlab's indices start at 1, you may want to subtract 1 from your coordinates to make them 0-base. - because your image pixels are squares which have a size, the array index points to the top left corner of that square: add 0.5 to get it to the middle. - because it's returning indices, not actual coordinates, they'll come back in `[row, column]` order rather than `[x, y]`. You can correct that using `fliplr()`. - if you want to select one pixel to 'be' the centroid rather than getting a true decimal location, just round the coordinates. Depending on what you're doing with the centroid, you may not need to do any of these corrections (and you might have to do some/all of them for the regionprops solution as well).
A = zeros(3, 6); for i in 1:6 for j in 1:3 A(i, j) = i * j; end; end;
For example, with `ni = 10; nj= 4` and 3 lines of code, I get: 1 2 3 4 2 4 6 8 3 6 9 12 4 8 12 16 5 10 15 20 6 12 18 24 7 14 21 28 8 16 24 32 9 18 27 36 10 20 30 40
Thanks!!!
In addition to the other suggestions, you could do this with meshgrid. 
 size(B)
Good point, those are a limited resource. 
 A(1,:) = All columns in the first row A(:,1) = All rows in the first column
Thanks for the quick reply! Outside of statistics/chemistry, what sorts of applications does it have in computer science or finance (thinking about commerce school)? I am not set on what I would like to major in, but there's a chance it won't be statistics and it sure won't be chemistry.
MATLAB can handle large files, you just have to be willing to use fread to extract the data.
Learn either one well, and play with the other enough to do basic stuff and you'll be in good shape. I'm not in compsci or finance, but I know people in both, and I'm a data and modeling type of scientist. /u/gyp_casino gave the right short overview of the differences. I use both (prefer matlab because of the IDE and I'm way better at it, but R is better for statistical analysis and stats modeling). Many shops that use either will have people using both (and often python too), although there will often be an employer/lab preference. The most important practical difference with today's code ecosystems is that matlab is expensive if you are outside of academia, and so if you work somewhere small, you might struggle to convince your employer to pay for it. That's always dumb because it's cheap compared to wasting your time, but dumb doesn't add a line to the budget. The second most important difference is that given the underlying designs and the way code open-sourcing communities have evolved, R is always gonna be better for all things stats and matlab is always gonna be better for all things dynamical modeling and numerical computation. Until whatever three new things replace both... 
Just use the matrix outer product: xy = (1:3)' * (1:6)
By large I'm talking larger than the physical memory of your machine. I don't think fread helps you out there, unless you write your own implementation of an r data frame along with all the associated functions. In R everything just works whatever you data set size because it doesn't read the whole file into memory (as far as I understand it). R is built for stats and is better at stats, which includes handling super large data sets.
Ohhhh. Well, MATLAB can do that to with the Parallel Computing toolbox.
If they're the same argument type, or use a regular pattern, then yes: simply use a cell array and index with the curly braces notation. For example, if I wanted to print 30 lines of the word "repeat", I could use: c = {"repeat"}; sprintf('%s\n', c{ones(30,1)}) (Note: `ones(1,30)` would work just as well here). You can use similar functionality with regularly-repeated mixed data types in cell arrays, keeping in mind that use of the `:` operator for indexing returns arguments down columns rather than across rows. For example: c = [repmat({'repeat'},1,30); num2cell (1:30)]; sprintf('%s_%02d\n', c {:}) Would print 30 lines of "repeat_01"..."repeat_30" (though, for most applications where this is useful, you might be better off with using the undocumented function [sprintfc](http://undocumentedmatlab.com/blog/sprintfc-undocumented-helper-function), as `sprintfc('repeat_%02d', (1:30)')` to produce a 30x1 cellstr of the same; use of undocumented functions obviously involved some risk, but this one's probably pretty stable since it's used internally by some major matlab functions).
Thank you for your help.
Thank you for your help.
http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-094-introduction-to-matlab-january-iap-2010/ MIT has a free online course, I'm still in the middle of it, I think its great.
It's better if you solve the control problems in theory (i.e. With pen and paper) and then verify everything with MATLAB. That way, you'd learn-apply whatever is necessary for you to learn. As for the very basic stuff (syntax and initial setup) the sidebar links are more than enough. I did systems modeling as my engineering capstone project in MATLAB, and essentially learned all I did by that approach.
that's strange, they are in struct format. How did you create the excel file? That could be the problem.
I think what you want is EmptyIndex = structfun(@isempty,aStr); Sorry can't test the exact syntax right now, you may need the 'UniformOutput' parameter as off.
If you want to get the index for which a certain field "x" is empty: emptyIndex = find(arrayfun(@(array) isempty(array.x),array));
Yeah tell me about it (499MB) however it may be for a paid team to do research with, so this may be a stipulation. I will be looking into JavaScript though as it is very useful for web interfacing. Thanks Eadb
Could you translate the captions (korean?) please? Edit: Also if you need to do a 2D FFT matlab has a function for that: http://www.mathworks.com/help/matlab/ref/fft2.html
Hehe, you know it's Korean! Straight line moire pattern-&gt;Gaussian blur used
Can you give an example (link an image) of what you mean? It sounds like the subplot() command (along with linkaxes()) is what you're looking for, but I'm not 100% sure of what you're asking.
Your super-simple response makes me want to downvote my own. I was pretty happy with my idea of `ind2sub` but this takes the cake. 
I'm really not quite sure what it is you are trying to do. Is it something like this? sigma = 1; x=[-7:.1:7] y1 = pdf('Normal',x,0,sigma) y2 = pdf('Normal',x,1,sigma) y3 = pdf('Normal',x,2,sigma) y4 = pdf('Normal',x,3,sigma) y5 = pdf('Normal',x,4,sigma) plot(y1,x);hold on plot(y2+1,x); plot(y3+2,x); plot(y4+3,x); plot(y5+4,x); You can then just use set and xtick to change the xticklabels. 
[This](http://ctms.engin.umich.edu/CTMS/index.php?example=Introduction&amp;section=SystemModeling) website is my go to guide to refresh control fundamentals. It covers basic control system modelling in Matlab too.
Non-Mobile link: https://en.wikipedia.org/wiki/Coefficient_of_determination *** ^HelperBot_® ^v1.0 ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^1513
I have tried that having used: &gt;&gt;options=weboptions('FileType','image') &gt;&gt;websave(url,options) but it didn't work.
Check out the first example from the websave() documentation. http://www.mathworks.com/help/matlab/ref/websave.html
The link given in the [example](http://heritage.stsci.edu/2007/14/images/p0714aa.jpg). The kind of page I'm talking [about](http://apod.nasa.gov/apod/astropix.html).
You scrape it for the src property of the img tags, then pass those urls to websave().
Since the other comment thread went too deep for easy reading, I'll continue it here. You're going to have to scrape the page source to get the image out. You might start with: A=webread('http://apod.nasa.gov/apod/astropix.html') This gives you the page source, part of which is: &gt; &lt;a href="image/1507/AndromedaGalex_2048.jpg"&gt; &gt; &lt;IMG SRC="image/1507/AndromedaGalex_900.jpg" &gt; alt="See Explanation. Clicking on the picture will download &gt; the highest resolution version available."&gt;&lt;/a&gt; The &lt;IMG SRC... tag is what is used to show the image on the page. however, this is a low-res version. The &lt;a href... tag indicates the link to the higher resolution image. So, depending on which you want to save, you need to extract the path of the low-res or high-res image. Note that the paths of them are relative, so you'll also need to concatenate the rest of the path from the main URL. "So how do I do this?" you might ask. There may be some HTML scrapers on the file exchange or you might have to write your own. Look at the commands textscan(), regexp(), strcmp().
&gt; sigma = 1; &gt; x=[-7:.1:7] &gt; y1 = pdf('Normal',x,0,sigma) &gt; y2 = pdf('Normal',x,1,sigma) &gt; y3 = pdf('Normal',x,2,sigma) &gt; y4 = pdf('Normal',x,3,sigma) &gt; y5 = pdf('Normal',x,4,sigma) &gt; &gt; plot(y1,x);hold on &gt; plot(y2+1,x); &gt; plot(y3+2,x); &gt; plot(y4+3,x); &gt; plot(y5+4,x); That is exactly what I'm looking for. Thank you.
Your OP says " Error: Unexpected MATLAB expression." This means there was an error (it should be colored red). Put the data (your second link) into a file called "panel.dat" Put the code (your first link) into a file called "MainScript.m" In MATLAB at the prompt, send this command: &gt;&gt; MainScript What does it do?
I just got it to work. Thank you so much.
What about throwing an error inside the objective function? If you want to continue with the execution, you can enclose call to the optimization routine in try/catch block (though obviously you won't get the outputs, like best solution found so far, this way... maybe those could be captured with OutputFunction, or passed inside the error structure).
I think you're misunderstanding the purpose of the Path. The way MATLAB keeps different projects separate is with regular old directories. You put all the .m files for a project inside a folder and they can call each other. You should only add folders to the Path that have utility functions you want to be able to call globally. 
I hadn't heard of that before, can you elaborate? Ideally it would do what delete does, but just store a empty index at the top of the array instead of shrinking it.
Dlmread is probably the easiest solution. If your file is too big, you might need to manually read in the file with fopen, and use fgetl, strsplit, and str2double line-by-line to convert the text to numbers.
Check out the tutorials in the sidebar. Your university might have a subscription to springerlink. If they do, you can get pdfs of textbooks on applying Matlab to various disciplines for free.
The [recorded webinars](http://www.mathworks.com/recordedwebinars) on the Mathworks website (need to make a free account to access) are an excellent resource containing detailed coverage of many aspects of Matlab, from the beginner level onward. Other than that, learning by doing is the best way to build your skills.
*lets
/u/no_dammit gave a good response along the right lines, but if you're going for true speed, you want to keep an index of valid fields handy which you update as you add/delete items. Callling x(~isnan(x)) is O(n) over the number of array elements, versus an O(1) operation of setting a specific index to false. For example, if you have N items: valid = true(1,N); items = rand(1,N); % pretend this your data If you want to delete an item, do the following: delete_index=14; % I chose something randomly valid(delete_index)=false; % note that we don't have to actually edit the array If you want to add an item, do the following: add_index = 23; add_item = 9.186; valid(add_index)=23; items(add_index)=add_item; Now, whenever you want to access your array, do it via the following: valid_items(valid);
Thanks for the pedantry about my autocorrect.
There's nothing wrong with using function files, but in this case you might be better off with [anonymous functions](http://uk.mathworks.com/help/matlab/matlab_prog/anonymous-functions.html). ode23() wants a function which outputs a column vector of gradients for c1(t) and c2(t) at some point (t, c1, c2). Since you mention that k is a matrix, I'm guessing c1 and c2 are vectors of some dimension d. The anonymous function must therefore output a column vector of dimension 2*d, d elements of which correspond to c1 and d other elements - to c2. Here's an example for d = 2: %your parameters g = .5; b = .5; %k must be a d by d matrix k = [ 1, 0; 0, 1 ]; V = [.5, 2]; %start of anonymous function declaration f = @(t, c) [ %ode23 always wants time to be one of the arguments to f (g - k*c(1:2) - c(3:4))./V(1); ... %this gives a 2 by 1 column vector (k*c(1:2) - c(3:4) - b*c(3:4))./V(2) %this also gives a 2 by 1 column vector ]; % the result is a vertical concatenation of two 2 by 1 vectors opts = odeset('MaxStep', .1); traj = ode23(f, [0, 1000], [1; 1; 1; 1], opts); plot(traj.y(1, :), traj.y(4, :)), The second argument to ode23() is the time span, third - initial values. I've also made the timestep a bit smaller to get a smoother plot. Hope this helps.
The above code will still work as long as k is a 1 by d row vector, so that the k*c(1:2) bit is a dot product. edit: I'm confused. Are c1 and c2 scalar or vector quantities?
Why do you have to use an anonymous function? Just save your DE function in a file, put whatever logic you want inside it, and pass the function handle to it to ode23s or similar. In any case, heaviside is probably overkill anyway, you can just multiply your term by a logical to do the same thing (without the particular heaviside behaviour of being 0.5 at 0 e.g. to have the term on between t = 5 and t = 10 you would have '+(t &gt;= 5 &amp; t &lt;= 10).*term'. That way, the logical condition doesn't have to be expressed as an operation that returns a +ve or -ve number depending on whether you want it on or not - it can be expressed as the actual condition 
Well, congratulations, you've discovered parallel programming. I suggest you start here: http://www.amazon.com/Structured-Parallel-Programming-Efficient-Computation/dp/0124159931
Condescending would be to tell him not to do it because it is not trivial. In my opinion I gave him an answer that fit his question perfectly. *edit: and that's not just "a book on parallel programming", that's THE book.
I was in a similar situation going into my math masters program. Thoughtful Google Foo and taking up some simple beginner projects should really help with introduction. I came to MATLAB from C++ and it wasn't too difficult. MATLAB is built to make picking up new tools very easy. Happy coding!
"Congratulations" is condescending. Unless you genuinely think that having a problem with parallel programming is a significant accomplishment that deserves praise. But you probably don't believe that, which makes it condescending. Just to clarify. Anyways, yes that's a good book, I would also recommend it!
I think there is a curve fitting toolbox. Not sure if it is standard and with what installs, but it seems pretty powerful. or, you can do it yourself for linear combinations of functions^1 but that is likely more complicated than you want. As for whether to do a line vs a sin wave vs any other model, that is always the million dollar question and many careers have been spent trying to answer it. ^1: For example, c0 + c1 sin(x) + c2 sin(2x) + ... + cn sin(nx) is linear and can be easily done yourself but sin(c0*x), etc is not so easy (but can be done non-linearly).
i do have the curve fitting tool box. I was interested in the loops and the commands that I had to do. Can you think of a general structure of how to iterate through the matrix and find the best set of points that will fit to a curve?
I would do it that way just because I'm used to using csv's in general, so having the file in that format is more convenient to me. Replacing the tabs withs commas is something I would do beforehand so that I could also quickly look at the file with Excel if I ever wanted to. Nothing is gained in a performance sense, but there may be other benefits, such as convenience. 
I ended up using DATA(nIntro+1:nIntro+nTrials, :) = DATA1; And now it works! Thank you!
So, the real probem here is that I think you are underspecifying your problem. "Curve fitting" usually means that you have some data and you want to find an equation that describes that data. Instead, the fact that you seem to be trying to find which data fits a particular curve, seems to mean you shouldnt' describe it as 'curve fitting' Please try to specify in detail what result you are looking for and we can explain how to find it. As a first guess, it seems to me that given a curve through time specified as f(t), you want to find which of the measurements on each date are most consistent with the curve. Considering your data is specified as an angle, you'll need to convert your curve data to angle data by evaluating the *derivative* of the the curve at each point, then calculating the inverse tangent of the derivative. Then, compare them and find the one that is closest. Try this: anglesamples = ... %an K by N matrix where K is the number of angles and N is the number of timepoints.contains radians target_dfsamples = ... % an 1 by N matrix containing evaluation of df(t)/dt at each of the time points t0,t1,t2,t3,...tn target_anglesamples= atan(target_dfsamples); target_vectors=exp(i*target_anglesamples); %convert angles to vectors in the complex plane anglesamples_vectors=exp(i*anglesamples); %convert angles to vectors in the complex plane distances=(target_vectors(ones(K,1),:).*conj(anglesamples_vectors)); %dot product between vectors to find closest [M,I]=max(distances); %cos(theta) is maximal when theta is around 0. %I now is a 1 by N matrix that contains the index of which angle was closest for each date 
Don't do a replacement with null. use the indices from the smaller set to sample the indices from the bigger set. This assumes that the bigger set has contiguous integers. SetA_equiv=SetA(SetB(:,1),:); 
You could set C111, C112 etc as global variables like so: global C111; global C112; %... %thre rest of your code here Or you could put your system of ODEs into your main script as an anonymous function, after you compute the C numbers: %C numbers (without global attribute) F = @(t, x) [ -C111*x(1)^2 - 2*C121*x(1)*x(2) - C221*x(2)^2; -1*C112*x(1)^2-2*C122*x(1)*x(2)-C222*x(2)^2 ]
Thanks for explaining. I guess that my language could seem condescending without the tone of my voice. I see every intellectual challenge as an opportunity to better myself. I got deep into parallel programming last year and that book has made it one hell of a ride, so yes, I really am almost happy for him, and I wish he would embark on his own adventure!
I tried declaring the Cs as global variables at the top of the main script and F but I got the same error message about converting from sym to double. I think I want them to stay as symbols because they aren't always numbers. They could also come out to be something like cot(v). For your second suggestion I get the error message "Undefined function 'F' for input arguments of type 'double'".
You could also use the 'intersect' command intersect(Xdata1,Xdata2) to find similar x values, then use the find command to find the index locations for each of those. Not sure exactly what you're doing, but it also sounds like you could use the an interp command to interpolate the data over the same range range, making a 1 to 1 comparison at each x point. But it of course depends on how your data looks, if it's continuous, etc. 
I believe Ode45 only accepts doubles as an input? F is an array of coefficients right?
Typing an expression like "sin(x)" in a script is not the same as passing a symbolic equation for the sine of x. 
It sounds like what you want is an anonymous function. Global variables are a bad and unnecessary idea in 99.99% of cases. 
Im not sure about good MatLab textbooks. But essentially, I feel like all Matlab Textbooks are glorified Matlab help files. The best way to learn Matlab is to always use it. . . even if you think you can do a problem in excel, or similar, use Matlab. Itll force you to learn the syntax and new functions. 
Try this: http://www.harmonicradius.com/wp/matlab-quick-start/
http://www.amazon.com/Essential-MATLAB-Engineers-Scientists-Edition/dp/0123943981
The only one I found useful is Martinez and Martinez
Thanks a lot, I'll try implementing this.
Assuming you installed MATLAB elsewhere (default is /usr/local/MATLAB), you can delete the downloaded installer files
Exactly. The help files/documentation it comes with are amazing.
 conv(z,p(end:-1:1))
Can you simplify that energy balance a little bit? I'm seeing a lot of coefficients that are = zero. After that, it's the same process. If it's a linear equality or inequality set Aeq/beq or A/b or if it's non-linear constraint then write a nonlcon function and define c/ceq. This is if your using fmincon. If you want to avoid local minimum use the genetic algorithm function (ga). It will accomplish the same thing. I can help you out with this if you want to send me some of your code. 
I've done some more experimenting today and I think this is the root of my troubles. The Christoffel numbers are symbols that can change based on the user's input, which means ode45 can't solve a system of equations that include them. 
I actually just recently worked on something that does just that. https://www.reddit.com/r/matlab/comments/3emfn7/sort_data_into_structure_by_multiple_criteria_in/ When I posted this, there were still some minor issues with the way it dealt with files that fit the sort parameters, but not the existing list (So, adding on a new column or row to "DATA"), but I can give you the fix for that code, if you want. Or, you can strip away the sorting criteria, and it can function as a simple batch-importer.
I asked the grad student I'm working with and he said it was linear. It simplifies to something like -15 + ( x (6)/1000 * x (1) - 0.005*x(2) - 0.006*x(5) = x (9). Those aren't the correct variables but that's the general idea. The rest of the variables are easy to input but I don't know what to do with the x (6)/1000*x (1) term 
If you have the optimization toolbox, you can use fminunc; otherwise, there's fminsearch.
Thanks!
That is what I thought. I was doing conv(z,fliplr(p)) which I think is the same thing.
Pretty much what I was going to say. Write a function that takes a list of coordinates (a n×3 matrix) and returns the potential energy of the springs. Without knowing your springs I cannot really help with that. 
I've been using r2015a on the preview versions. No issues, as far as I can tell.
Yes, so long as the function you are solving contains the independent variable declared as a symbolic variable. For example, % Declare independent variable syms x % Anonymous function, which contains your independent variable equation = 3*x + 4; % Call on solve solution = solve(equation==5,x); Here, solution = 1/3.
If you know what p(-t) is you can deconvolute p and g with deconv(g,p)
If you can write it symbolically, the other posts are the way to go. If not, you can do it numerically for any function. See [Optimization Toolbox](http://www.mathworks.com/products/optimization/). You'll need a figure of merit, which in your case would be &gt; abs(somefun(a)-4). The toolbox will them minimize the figure of merit, which will get you an approximation of a.
If it is only one dimension then the optimization toolbox is not needed as the command fzero can be used which solves equations of the form f(x)=0. If it is a system of equations you can use fsolve from the optimization toolbox but then the abs(.) is superfluous as fsolve solves systems of equations.
I am not sure this is possible. I *think* as far as Matlab is concerned, once it create `K`, it doesn't care what `A,B,C` are/were. I am pretty sure it created `K` by copying and not from a pointer. I'll follow this to see if anyone has another idea, but I doubt it's possible. (I hope to be wrong though)
It's possible to go the other way: define L first and the use eval.
What are you expecting 'A' to contain exactly? For instance, &gt;&gt; A = rand(2) A = 0.1538 0.8763 0.9618 0.4886 &gt;&gt; char(A) ans = &gt;&gt; Are you expecting just a bunch of ASCII 0s? If so, why? Are you expecting something like: `[0.1538,0.8763;0.9618,0.4886]`? Are you worried about the missing precision? Well, what you want exactly isn't really important. You can iterate and replace the cells, of course, or you can iterate and generate a new cell array. Or you can use cellfun (you need to specify 'UniformOutput' and false because dumb) &gt;&gt; L = {rand(2)*128, rand(3)*128, rand(4)*128} L = [2x2 double] [3x3 double] [4x4 double] &gt;&gt; M = cellfun(@char, L, 'UniformOutput', false) M = [2x2 char] [3x3 char] [4x4 char] &gt;&gt; M{1} ans = #, 7p &gt;&gt; M{2} ans = 'r YR +u &gt;&gt; M{3} ans = v+e }s q~c Wlk 
If you have the computer vision toolbox then matlabs optical flow velocity estimation tools may help you out. http://www.mathworks.com/help/vision/ref/vision.opticalflow-class.html http://www.mathworks.com/discovery/optical-flow.html http://www.mathworks.com/videos/computer-vision-made-easy-81802.html?s_iid=disc_rw_cmv_bod 
Use the "whos" function to get the names of the variables in your workspace. S = whos; K = {whos.name}; Like jwink3101 said, once matlab creates the cell K, it does not care what variables were concatenated together to make it, so placing them in a cell like that won't allow you to keep track of the original variable names. Exactly what are you trying to do with the cell array? If it's to use the "eval" function, there's almost certainly a better way to go about doing your problem in a faster/easier/more efficient manner.
I actually got this to train properly using the matlab optimization tool "fminunc"
MATLAB itself works for me but Simulink doesn't (neither 2014a nor 2015a)... Which kinda sucks when you're studying control systems.
When I try this, I get the error: In an assignment A(:) = B, the number of elements in A and B must be the same. Any thoughts? Seems like it should be 3 in, 3 out, right?
This worked! Thanks a bunch! 
I'm always curious, when people see the notification about using logical indexing instead of find(), but just completely ignore it, what is actually going through your head? Why do you do it? 
As in, fit a linear model to y vs log(x).
Nlinfit() from stats and machine learning toolbox can do this.
Not OP but what usually goes through my head is "but it's working with 'find' now, so why would I change it!?" 
Wow. 
You do not need nonlinear regression or to fit a power law. Just take the natural log, and use polyfit with a first order polynomial. 
The reason I'm using a table rather than a matlab example is because this exam will be done with pen and paper, so I don't want to be relying on matlab to render these images
&gt; Are you worried about the detector flagging up "Zero" pixels instead of the last "One" pixels in the object region? Exactly. I'm not sure if what I've outlined is an accurate representation of what *should* be outlined using sobel. You can also see that the corners on the bottom/right of each detection are missing and it's not the square outline that it should be. The question is "Describe two edge detection methods and sketch the 2D kernels of each detector" - I've done canny and sobel and I'm not entirely sure if I've done sobel entirely correct (also, it doesn't hurt to know more about each algorithm - I plan to look up a few once I've answered it and maybe answer the question for more than 2, it's only revision afterall)
To be clear: you want to stop ode113 after 1000 seconds of computing and not at the 1000 second mark in the solution?
Yes - I am replicating results from a paper where ODE113 is used to minimize a functional. 
No worries! Good luck with the exam, sounds like a good course. 
Never mind on this, I figured it out. For anyone else in this situation, just use tic outside of the event function and then called toc on the inside of the event function as the trigger to get ODE113. It's really simple. Thanks for humoring a question from a newbie.
All I need the secondary console window to do is display information. Whether it be through a disp command, display, sprintf, fprintf, or anything similar in the main script. The program I have written is a data analysis tool for a propriety binary format. It crunches through a file of any size in that format and gives you an idea of whats inside. You can use the GUI I have written to select the input file, and where you would like the output log to be placed. The results are displayed live as they are calculated in this console window, and then everything is copied to a text file after the program is finished running. The issue is I can't seem to get any kind of console window functionality whatsoever on a Mac. Windows it pulls up a command prompt window and displays it there- In my tests on mac, the program runs just fine, but you can't see any of the live result you'd usually see in the console window. (Which is a bummer because the script could potentially be running for a significant amount of time and its nice to be able to have a quick glance at what is happening.) If you could help I'd really really *really* appreciate it. 
I'm not too familiar with mac, but if it's anything like linux, why don't you open up a terminal window and run the program through there? [Looks like someone did just that and it worked!](http://www.mathworks.com/matlabcentral/answers/121923-why-doesn-t-my-standalone-matlab-app-display-all-figures-and-run-fully)
Hmm. Looks like that might help! I'm on vacation this week but I'll try it when I'm back at work next Monday. Thanks!!
I don't typically use cell arrays. If your cell array contains all the dates of interest, can you index into it like this? subset = []; for ii=1:length(cellarray) subset = [subset dataset(cellarray(ii), :); end 
And how do I not do that?
You should be able to do it kinda like /u/einsteinoid suggested: VI_M=[]; for i=1:200; A=dates_I_want_num(i,1); VI=find(Matrix(:,1)==A); VI_M=[VI_M;Matrix(VI, :)] end
Thanks, it worked out fine.
I have had success with using a for loop and using roundn() to divide the sample into subsamples of some order of magnitude. In my case, I was able to subdivide a 52x17x23124 matrix into 23 52x17x1000 matricies and an additional 52x17x124 matrix for processing, and then feed it through the fft calculation section by section. Not sure if it will work for you and return the correct values as the fft function proceeds along columns, and mine were pretty short, but maybe it will serve as inspiration.
It could. It can also be limited depending on your MATLAB license. Regardless, I would strongly suggest you heed the advice and consider a (MUCH) smaller method of storing the data you're using. An explanation of exactly what you're trying to do, and a code sample would be helpful to commenters who are much more familiar with statistical parametric mapping.
So 40 doesn't quite make sense, so I'm guessing it's 47 pairs. And each sample is a matrix of 256x256x176. I'm curious how dense the values inside that matrix are, and I mean that in two ways: 1) Are there a lot of zeros, in which case you should research "sparse matrices". 2) The range of the numbers within each measurement. If it's limited to 256 different values, then you can cast your matrix as unsigned characters, and this would immediately lower the size of the array to a little over a gigabyte. Finally, I'm unfamiliar with this data type, and therefore what you mean by "subtract them in order", but it might be that to minimize the impact on your ram (at a cost of speed), you could load the first two files, execute the subtraction, then load the the third file, and subtract it, and so on. This can be executed in a loop so that it only keeps the "active matrix" and the matrix being subtracted at that time in your memory. My guess is that I don't understand the science behind it and what exactly you mean by subtract them. Additionally, if your just subtracting the control from the activation and then storing the difference, that can also be done just keeping two files in active memory. I hope any of this helps!
Im on my phone at the moment but can't you just do size(A,2) to get what you want?
I assume you are a beginner, so please take some advice: if you are tempted to phrase a question in the way that you did (accusing the software of bad design), you need to read the documentation before posting. As another commenter points out, you can do what you want with size(A,2) . http://ch.mathworks.com/help/matlab/ref/size.html
Oh......my.....God! I'm such a fool
I don't think he meant that in a condescending way. Regardless, I would like to give you some advice to help you with your future programming. MATLAB has been around for years, so the odds are other people have had the same problems as you and probably have found solutions. An easy way to figure this out is by Googling around. The term "how to number of columns in matlab" gives the right answer in the first link. Alternatively, you can ask in a place like this, something like "how can I find the number of columns of a matrix quickly?" I would also highly recommend reading the MATLAB documentation, it contains a lot of things that most people struggle with at the beginning. If you are more advanced, then you may find functions that you may have never heard of but which make your life a lot easier. Either way, good luck :)
Thanks
I don't understand why you're being downvoted. The post title is a bit silly, but there's no need to reiterate the top response as if it wasn't already abundantly clear, especially after you've already acknowledged your mistake. It wouldn't be at all surprising for an experienced user to overlook some functionality. The comment about your experience level is quite hasty and reeks of arrogance and elitism. 
I regret the title now. The downvoting is almost certainly because of that. I thought his comment was a bit silly as well because if you go on my submitted history there's a lot of Matlab posts over the last year.
It means you are trying to create an array that is larger than the current preference you have set. Go into the preferences and change the value to some higher value than what you are requesting. Make sure you have more free memory (8.1 GB) than what the array is requesting, or else the array will not be created (and you'll probably lock up your computer).
Does the comp need to be done at once or can you iterate and save intermediate results to a mat file. You can clear variables that aren't being used by the last line... You could also overwrite Ex1/2 into the result, ie an in place operation. The obvious... You could get more ram 
Try readtable("/path/to/filename.txt") - it should automagically read the data into a table type. Fread is way overkill if your files follow any kind of regular structure. 
To be fair, that is actually a pretty weird syntax.
Wow thanks for that. I will look into it.
Confusing isn't it
I'm not sure how good these are as I have yet to try them, but you could give them a shot I guess: http://www.mathworks.com/videos/search.html?suggestion=&amp;c[]=videos_all&amp;q=machine+learning
https://coursera.org/learn/machine-learning The popular Machine Learning MOOC taught by Andrew Ng uses Matlab for programming exercises :-) 
Nice thing about Matlab is that you can create your own functions if Matlab lacks one you need. For example, if you define function numrows=rows(A) numrows=size(A,1); and function numcolumns=columns(A) numcolumns=size(A,2); then rows(A) will return the number of rows and columns(A) will return the number of columns in matrix A.
There is a great resource but it's in Farsi. It's a 25 hours program. It cost 20$. www.faradars.org
Sure...but I was trying to see if there was a way to convert a 32-bit single precision floating point number represented by binary numbers to its floating point form. I ended up just doing the math but I was wondering if there was a faster/better way to do this.
Clear as day. But I do ```help _____``` all the time.
I think you bring up a good point about the diversity of Matlab approaches. I should focus on the style used for the things I am actually using (though I will definitely check out the things you mention). I use Matlab for stats and developing ML classifiers, which basically means reading in large matrices and then manipulating them. Nothing very hard, but I know I could probably do a better job than I am doing. &amp;nbsp; Thanks for the feedback.
Are they beginner friendly? I have worked with Matlab before but not quite familiar with the machine learning portion of it. 
In my opinion, they are pretty beginner friendly. Theodoridis presents his material well and writes engagingly. If you click on the Amazon links in my comment above, you can browse a bit inside the books to get a feel for the presentation. Among MATLAB-centered books, his are among the best I've seen. If you relax the language constraint (and I think it might ultimately be in your interest to do so), there are other books that might hit the intuition a little better ... and faster (the Theodoridis books are each in the 1,000-page range, save for the companion book I mentioned). For a short book that really nails the essence of machine learning while intentionally making no effort to cover everything, I can't recommend [*Learning from Data*](http://www.amazon.com/Learning-Data-Yaser-S-Abu-Mostafa/dp/1600490069/ref=sr_1_1?ie=UTF8&amp;qid=1438637561&amp;sr=8-1&amp;keywords=learning+from+data) highly enough; that book is superb (and also inexpensive). This book also has [an associated MOOC](https://work.caltech.edu/telecourse.html), and Prof. Abu-Mostafa is fantastic.
So, is the binary float32 not stored in a file? A four byte char array? Edit: Here is an example I read on how to convert 32 character string representation of a 32 bit float into a number. NumAsString = '1000111111100010010000000000000'; NumAsFloat32 = typecast( uint32( bin2dec( NumAsString ) ), 'float') I realize this isn't exactly what you wanted, but perhaps this will get you a bit closer to a solution. 
It depends very much on what you want to do, modelling, numerical analysis, hardware interfacing etc.
This is a function I made a while back in a project that converts binary to double. The input is a matrix of any size (including a simple array) and the function returns a matrix of the same number of rows with all rows converted from binary to decimal. xy = Decode(matrix) x = matrix(1:end, 1:floor(end/2)); y = matrix(1:end, ceil(end/2):end); xy(:,1) = x*(2.^(0:size(x,2)-1))'; xy(:,2) = y*(2.^(0:size(y,2)-1))'; end % End function
I would probably use Python and PyQt for the GUI, turning it into an executable with cx_Freeze. However, maybe this is a good case where building a web app would be better, since you wouldn't need to distribute updated executable as the app evolves. You could use something like https://www.pythonanywhere.com/.
Thanks, I'll definitely look into that. Do you know if all that software is open source for commercial use?
Mathworks itself is offering certification exams: https://www.mathworks.com/training-schedule/certifications/
You can compile your MATLAB app to a standalone executable. http://www.mathworks.com/solutions/desktop-web-deployment/index.html A month isn't much time to both learn a new language/ toolset and develop a new GUI, but perhaps Python+NumPy+wxPython? Python you can probably learn in a day: https://developers.google.com/edu/python/?hl=en NumPy provides linear algebra and scientific computations with a not-too-unlike-MATLAB syntax: http://wiki.scipy.org/NumPy_for_Matlab_Users wxPython has simple Python wrappers around the very capable C++ wxWidgets library: http://www.wxpython.org/
I thought the MATLAB compilers were pretty expensive commercial licenses. Am I wrong?
I might get crucified for bad practices here, but I tend to make a struct with all the variables I need global.
Without seeing any of the rest of your code, this could range from "a serious deficiency in your code" to "absolutely correct". You're really not giving us enough to go on here.
How are you *really* supposed to write this? Well, if the code works, it works. Commands like break aren't wrong - they can just be confusing when used extensively. Look up spaghetti code or cyclomatic complexity for the general idea. As an alternative, before the while loop, you could instantiate a false boolean named isFinished and make your while loop guard *not* isFinished. Then, instead of using break, set isFinished to true. The difference here is that the while loop continues the rest of the code in its iteration after flipping the boolean, rather than immediately exiting at the breakpoint. The boolean has the advantage of letting others (and you, once you forget how the code works) know that isFinished implies, well, that it's finished! Try both! Don't shy away from break or continue. They're great tools to keep in mind, and can occasionally make code clearer than the alternative. If you want to focus on the *right* way to do things, focus on making the meaning of your code as clear as possible (sometimes this is just a lofty dream, unfortunately).
I'm not 100% sure what you are trying to do, but if this is your general workflow: 1. Check variable value 2. if set: do x, then check variable again 3. if not set: do y, then exit try looking into the following programming constructs: 1. for/while loop structures 2. break/continue statements
Your code is really difficult to read, I'm not sure what you're trying to do. Do you need to use cells and structs, or would objects be a better choice?
That's helpful to know. Thanks
It is extremely difficult to answer questions like this without seeing the code. 
If you want to create a new image that's fine by me. The template for the current one is at https://a.thumbs.redditmedia.com/3urUSz0SCKlDwzVZ.png I'd suggest you clean up the axes, etc before exporting.
The other suggestions here are good, but you can also just do the arithmatic to reconstruct the float. There's a decent [description of the encoding](https://en.wikipedia.org/wiki/Single-precision_floating-point_format#IEEE_754_single-precision_binary_floating-point_format:_binary32) at wikipedia.
Yeah don't do that. What happens when you have two copies of the gui window open?
Each gui object's handle had a `user_data` field. Stick a struct in it to hold whatever you need stored with the figure. Anyone with access to the handle can access the data.
Because my dissertation supervisor is terrible. Ice ever used Matlab before at all, we were meant to be doing another study but he forgot to put the forms in so in June he told me to develop a different study, which I did even though this is due in in sept. He then programmed it in Matlab which I had no idea we'd have to use. He didn't tell me how or what he did, just did it. 
You can add custom properties to GUI handles, with type-checking, at run-time. See the "Adding properties to existing objects in run-time" section in [this article](http://undocumentedmatlab.com/blog/udd-properties/). These can then be accessed as though they were any other figure handle property.
Are you looking to pass in variables when opening the GUI or after is running? When opening the GUI, you can pass variables to the GUI's creation function the same way you pass them to any other function. It's best to provide default values for all arguments to a GUI creator, of course, so they're there if the user wants to run the GUI without invoking it from the command line (by clicking "run", for example). If the GUI was created via the GUIDE, you might have to modify the main function to accept arguments and pass them to the layout function (I can't recall at the moment; it's been a while since i built anything with the GUIDE), but it's pretty straightforward; if you can't see what needs to be done, drop a breakpoint in the layout function and examine the stack during GUI creation to see which functions need to be modified. If you're looking to pass information from a function that isn't a callback (or called in a callback) after the GUI is running...well, that can be done, too, but the most straightforward way would be to call the function from a callback (or the GUI creation/layout functions). In a more obscure (less clear, not as good for most purposes) way, you can always add the results to any part of the GUI from any workspace by using findobj/findall (use findobj unless the object's handle is hidden relative to your workspace) or by grabbing the figure handle and traversing the figure's hierarchy to find it; the data can be stored as userdata, appdata or a custom property of any matlab graphics object (figure, uicontrol, uipanel, toolbar buttons, images, lineseries, annotations, etc.). For example, if I have a GUI that has a uipushbutton in a toolbar with the tag "customPushbutton", I could use: hPush = findall (0, 'type', 'uipushbutton', 'tag', 'customPushbutton'); externalData = functionOutsideOfGui (args...); setappdata (hPush, 'dataFromFunction', externalData); To add appdata to the pushbutton called "dataFromFunction". This can be done from the base workspace, or from any function--whether or not that function is associated with the GUI in any way. Note, though, that `findobj` is faster than `findall`, but `findobj` won't return handles to objects with their HandleVisibility property set to 'off' or (unless findobj was called from a callback) to 'callback'; findall also benefits if, rather than '0' (the handle to the root Matlab object), you pass the handle to the figure (or other container, such as a uipanel) containing the desired object. Also note that both findall and findobj can return empty, scalar or vector handles; searching with more stringent criteria (e.g., specifying the type of object and the object's tag) is less likely to return handles to unwanted objects. 
This works thanks 
Yeah I basically ended up doing the math. The reason was is that the data was already being converted to decimal format (not my program) and we needed a way to convert the data.
I think this is a neat trick and would, as I understand it, do what you say. That is, preallocate the correctly sized array without having to first allocate it. However, you say: &gt;it does produces **sleeker, more readable** code even when overhead is not a concern. ^([emphasis yours]) I *strongly* disagree. I think there is nothing strange, abstract (*not* in the CS sense but the literal sense), or wrong with preallocating. In fact, I think it is very good practice in general. You are saying to someone reading the code, "hey, here is what this variable should be doing and how big it should be". If someone is reading code with a backwards array, it may not be as clear. Plus, as a general rule, you want to use practices that are (a) common and (b) less prone to user/coder error. Of course, to each his/her own...
I just figured it out, thanks!
Thanks for your input. But I am surprised you so "*strongly* disagree"... &gt;I think there is nothing strange, abstract (not in the CS sense but the literal sense), or wrong with preallocating. In fact, I think it is very good practice in general. A line of code not being "strange, abstract" does not make it more "sleek or readable" in most cases. (excuse the double neg). It is also **NEVER** good practice in general to include unnecessary operations in your code! (With the exception of writing a piece of convoluted code that will be presented in an educational/tutorial scenario). &gt; If someone is reading code with a backwards array, it may not be as clear. I also must politely disagree with your assertion here. In all cases a FOR loop operates on a continuous range (with a few exceptions, of which non of would be applicable to fully populating an array). Even a novice programmer would not be confused by a backwards iterations, since it is clear it must cover a set range of values whether the loop iterates forwards or backwards. With regard to your general rule, there is nothing abstract being done here. So this should not be considered uncommon... and as I mentioned above, should not confuse even a novice programmer. ^IMHO
Can you explain what you did? I'm having a problem very similar to yours.
I do appreciate the discussion, but I still disagree. &gt;Not seeing the preallocation would make me think a is being allocated somewhere else in the code I don't see how this would ever be a problem. This method is effective whether you preallocated the array or not. (but will have no effect if you already have) Could you give me a hypothetical situation where this might be an issue? &gt;In addition, a will specifically be a row vector when its allocation is implied. This could be bad if your code expects a to be a column vector or a matrix. By preallocating you can specify the shape of a This is not true. This method will always allow for an *explicit* definition of the array dimensions. (see example)
Although it is a neat trick, I would advise against writing code like this. Generally speaking, you want to know where data comes from. By not explicitly preallocating the array, the reader might mistakenly think it was created elsewhere, potentially leading to all kinds of confusion. In addition, in some cases it may be important which direction you loop through your array, again potentially causing confusion. I would suggest you don't use this trick unless it's for a one-off script to test something and you're certain it won't become part of a larger code-base.
I'm getting an error stating that: *"Error using lsqcurvefit (line 248) Function value and YDATA sizes are not equal."* My code is as follows: myfun = @(x,xdata) ((x(1)+(x(3)*xdata)+(x(5)*xdata.^2))/(1+(x(2)*xdata)+(x(4)*xdata.^2))*(1-x(6))); ydata = [0.92,0.657,0.47,0.37,0.336,0.285,.27,0.25,0.25,0.27,0.28,0.29,0.3,0.33,0.37]; xdata = [5 10 15 20 25 30 35 40 45 50 55 60 65 70 75]; x0 = [1.108; 0; -0.02016; 0; 0.0001484; 0.57]; [x] = lsqcurvefit(myfun,x0,xdata,ydata); plot(xdata, myfun(x, xdata)); hold on; plot(xdata, ydata,'ro'); Any idea what I could be doing wrong?
The error means exactly what it says. Your function value is not the same size as your ydata. Take a look at both of those things, and you should see the issue immediately. 
It's also true for other languages. When you get down to machine level, decrementing is faster than incrementing, and the ==0 is already defined, saving at least one whole command and register.
Ah that period. Perfect, thanks!
Backward iteration severely obfuscates the reasoning behind the code unless the programmer understands the reasoning. I am 100% if you give this to even an experienced programmer who's new to Matlab they will not understand it without further research. Now I don't know about you but if one of the points of your code is to make easy to understand, readable code that counts down with no clear reasoning other than language specific tricks then you need to rethink your approach. 
Respectfully OP, you don't know what you're talking about here. 
http://www.mathworks.com/matlabcentral/answers/99067-why-do-i-receive-the-error-license-manager-error-9 http://www.mathworks.com/matlabcentral/answers/97167-why-will-matlab-not-start-up-properly-on-my-windows-based-system 
I suddenly realised that I could test this myself with a while loop. Running the first one 1,000,000 times takes 25.66 seconds. The second one takes 29.65 seconds. Iterating backwards resulted in it taking 28.88 seconds. . I'm so confused now.
&gt; Backward iteration severely obfuscates the reasoning behind the code Why would a backwards iteration confuse you? I'll paste my previous response: &gt;In all cases a FOR loop operates on a continuous range (with a few exceptions, of which non of would be applicable to fully populating an array). Even a novice programmer would not be confused by a backwards iterations, since it is clear it must cover a set range of values whether the loop iterates forwards or backwards, there is no difference. A FOR loop is, in general**, designed to do the same set of operations on a range of values. Only the range needs to be defined explicitly. Whether the iteration goes forwards or backwards through this range is irrelevant. (**) Obviously with the exception of special cases where the next iteration is dependent on values computed in previous iterations.
It was an just an example, the operation on `a` is arbitrary. 
Oooooh so it's the MATLAB license that's causing the $250 million unit cost... 
The backwards iteration doesn't confuse me you noob. Iterating backwards without a clear purpose (for instance counting down) *might* confuse a programmer new to Matlab. Furthermore, it clearly doesn't highlight the actual intention of using backwards iteration in Matlab i.e. "sleek array initialisation". Using preallocation is a) standard matlab practise and b) doesn't require the reader of the code know that backwards iteration (in this sense) does the same thing. No one in their right mind would suggest this to new Matlab programmers because it honestly doesn't make the code any better over preallocation. The iteration itself isn't the problem (forward or backward) but the idea of using backward iteration in place of preallocation is very silly. 
Woaaahhhh... no need to get personal. I didn't mean it as an offence. You said yourself that it is confusing: &gt; "Backward iteration severely obfuscates the reasoning behind the code..." I still dont understand why its: &gt; "very silly." By your own words (and mine) it doesn't make much difference, its certainly not for negligible performance difference. Its just a convenient way of getting rid of a few lines of code. Its especially nice if you have a lot of allocating to do. &gt; "no one in their right mind would suggest this to new Matlab programmers because it honestly doesn't make the code any better over preallocation." Also, this is not a tip meant for "new Matlab programmers". 
Its not really 'respectful' to say that when you don't offer feedback. It just makes you sound like a douche... 
I don't think that is the point here. And for interpreted languages like MATLAB I sincerely doubt that is a major bottleneck.
&gt;MATLAB programmers are used to having matrices pre-allocated I agree with this, and your other comment. Although regarding anyone else who might read your code... you should always have methodology commented, not rely on what you think people might be "used to". Personally I only use Matlab for prototyping, so its never a concern. This tip is mainly for trimming a couple lines of code from your script. It not suppose to be any bid deal... in fact, it is mostly unnecessary, and I have not claimed otherwise. :)
[My take on your reply.](https://i.imgur.com/axJmn.jpg)
[Image](http://imgs.xkcd.com/comics/convincing.png) **Title:** Convincing **Title-text:** And if you labeled your axes, I could tell you exactly how MUCH better. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/833#Explanation) **Stats:** This comic has been referenced 76 times, representing 0.1007% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ctu2h9p)
Ya it is, any ideas?
Jokes aside (don't worry, I laughed...because LM does give its engineers access to every MATLAB and Simulink toolbox), here's the latest figures for per unit cost from LRIP Lot 8: F-35A: $94.8 million for aircraft F-35B: $102.0 million for aircraft F-35C: $115.7 million for aircraft 
What's your question? Also post your code in a readable way if you need help with it.
That was a very common sense question. function [t, V] = HH(t ,V) %Time t = [0 20]; %Constants C = 1; Gk= 36; GNa=120; GL = 0.3; Ek = -72; ENa= 55; EL = -49.4; n = 0.5; m = 0.5; h= 0.5; ySS = [n,m,h,V]; %Equations dndt = @(n,t)(1-n).* alphan(V)- n.* betan(V); dmdt = @(m,t)(1-m).* alpham(V) - m.* betam(V); dhdt = @(h,t)(1-h).* alphah(V) - h.* betah(V); dVdt = @(V,t)(-1/C).* (Gk.* n.^ 4.* (V - Ek)+ GNa.* m.^ 3.* h.* (V - ENa)+GL * (V-EL)); end That's my ODE code, im using ode45 to call this function between the time span [0 20] and initial conditions ySS If you open the link in the description the question is in there.
I think you're having some formatting issues here. Put four spaces ahead of every line so that this is readable by everyone. for example, "m.betam(V)" probably should read m.*betam(V)
good call
If you use the active-set algorithm, you can limit the step size with "RelLineSrchBnd". You could also add constraints so that you explicitly avoid the bad places.
The F-35
&gt;this was programmed using MATLAB and Simulink This frightens me.
I think that you can do that using &gt; optimset('DiffMaxChange',max_dx) As far as simplifying your problem, is the bottom actually flat? You might be able to change it so that you have a function of only one variable instead of two. If you can't simplify it, I wouldn't worry about it too much. With only two variables, it's probably more worth your time to let the computer slam through the problem the hard way rather than try to figure out a clever way to do it.
http://www.mathworks.com/help/matlab/creating_plots/change-mapping-of-data-values-into-the-colormap.html That help document will guide you through adjusting the colormaps as you see fit. If the colormaps have the same min/max values for both figures, the colors around 0 will match.
You'll want to create a mesh of X and Y values then evaluate Z at every X,Y pair. Something like this ought to do it... [X, Y] = meshgrid(x_range, y_range); Z = X - Y; for i = 1:size(x_range,1) for j = 1:size(y_range,1) if Z(i,j) &gt; 0.25 &amp;&amp; Z(i,j) &lt; 1 Z(i,j) = 1; elseif Z(i,j) &gt;= -0.25 &amp;&amp; Z(i,j) &lt;= 0.25 Z(i,j) = 0; else Z(i,j) = -1; end end end surf(X, Y, Z); 
where you've stated the ranges what format should I put in if I want between -1 and 1 in increments of say .1?
x_range and y_range are just standard 1D vectors. For that case, you want `-1:0.1:1`. `linspace(-1,1)` would have a similar effect but with a finer mesh. Just be careful with `meshgrid()`, you can run out of memory pretty quickly if your mesh is too fine.
This is still very vague. They used matlab to do what exactly?
Write the controller.
&gt;readily available for this kind of work? What kind of work? Embedded systems / flight computers? C or C++, probably. Something that compiles, is closer to the metal, and has more robust unit testing and code analysis tools available. Matlab's great for engineers working at their desks, processing data, etc. That it would be used for such critical operation *scares* me.
I would assume so, but I have seen set ups where a single camera was used and they were able to track the driver's nose, obtaining the required values. For example, the [HyHope](https://www.youtube.com/watch?v=6_xvlAzvvu4) system uses a single camera and is able to determine where the nose is pointing. Obviously, they don't use MatLab.
Did you name your script surf.m? You definitely shouldn't get in the habit of naming your scripts with identical names as the functions used within!
I don't have any recommendations, but the sideboard does ---&gt;
Hey, I'd recommend doing the [Project Euler](https://projecteuler.net/) problems. The focus of the exercises is mathematical, but that's most likely what you're going to use matlab for anyway. They start out easy and become really hard later on. It's also on the sidebar, I just noticed. Anyway, if you have any questions about Matlab while working on the problems just come back here. Hit me up or post it on the sub.
Handles are just variables like any other. Edit: but guide style guis do weird things. I haven't made one like that in ages, but I think it recreates the handles structure each callback? It's weird. 
The best way to learn Matlab is to (preferably) pick the next problem you have to do and say that you will only use Matlab. You can instead try to recreate an existing problem but that isn't as much fun. It will be kind of painful at first but will get better. Sorry I can't offer anything better
I may have reduced the problem to obtaining a laplace transform from the samples of a function.
I solved it with simulink, being a volterra equation didn't matter much in simulink, pitty I don't get a closed form solution but just a numerical one, but it works for me :)
That would take quite a lot of time since I am not the author of the package and reimplementing everything would be tough. Would you know of an alternative to this class that has high precision and works with fsolve?
I do hope you're right, but it's a leap! Matlab will run in the background on embedded Linux. And Matlab has an option to convert it to C/C++ code. Even if it was that, I'd still be scared!
Thanks so much for this awesome response. I'll test it out tomorrow morning and let you know what works. Thanks again!
Can you explain why you need such precision? You can rescale your original problem, for example.
These are for finding rate constants for thermodynamics of reactions. The 'a' value is observed experimentally and I'm looking for the other value. So it tells you how each reactant is behaving as the chemical reaction continues..so you know when you run out of X reactor and at what time My friend is doing this and I'm trying to help him out with a program. He was previously doing this by hand for quite a lot of numbers
How exact do you need these? If they're really tiny (1E-22), that's essentially zero and you can treat x = 0. If they're larger and you want to solve them numerically, just use fsolve in that case. What's the chemical equation? Never seen a rate expression like this ...
Do you need an analytical solution? If so I would recommend trying out the Symbolic Toolbox, but it does struggle sometimes. You can use the int() function to integrate symbolic functions. If you just need a numerical solution, I would look into different discrete integration methods such as Euler integration or Runge-Kutta, both are pretty easy to implement. 
Create a circular mask of your region of interest (a circle), and then use radon to compute the radon transform. Rinse and repeat for each radius you're interested in.
sorry for the late reply, it was the weekend ;) So i am currently trying this out, and we'll see how it goes! So far so good so thanks!
[Radon](https://en.m.wikipedia.org/wiki/Radon)?
Non-Mobile link: https://en.wikipedia.org/wiki/Radon *** ^HelperBot_™ ^v1.0 ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^6592
Can you not download the demo of the toolbox? Matlab usually lets you trial for 30 days.
Or you could, you know, write an actual [unit test](https://www.mathworks.com/help/matlab/matlab-unit-test-framework.html).
I'm afraid that's not an option it's not a default toolbox 
https://www.mathworks.com/programs/trials/trial_request.html?prodcode=AT&amp;s_iid=main_trial_AT_tb It looks like you have to contact them for a trial, but I'm guessing they would do it.
 isDone = 0; while ~isDone % code if (break statement) isDone = 1; else % more code end end
&gt; Constraints are not satisfied within constraint tolerance. It looks like that the values matlab finds during the run of the algorithm do not satisfy your constraints, therefore matlab aborts the algorithm. That means your calling of gamultiobj is correct and the error lies within your nonlinear constraint as it somehow contradicts your boundary constraints. Did you check that your nonlinear constraint do not contradict each other? Also, did you make sure that your nonlinear constraints returns TWO vectors, i.e. the first one for inequality constraints and the second one for equality constraints?
Try using structs. You can dynamically name a subvariable of a struct with &lt;struct name &gt;. (substructure), with the braces. Another option would be 'eval', but in general that is not good practice. 
Something like this will work, but should come with the standard disclaimer that if you're using eval, there's probably a better way.
Why do these values need to be stored in different variables? It seems like the most natural solution would be to store them in a single array or cell array. alt=zeros(25,364); for i=1:25 alt(i,:) = sol_alt(LatR, dec_angR(C), ts, i, t_it, ha_it); end
Try assignin. I believe this will suit your needs. If you want to work with structs, then eval works. 
The problem is the difference between each of the numbers in the equation (I think). If all the numbers were in the same range then it would be fine but the range is large for example there's addition, subtraction of 2 and 1. The difference between that and 1e-22 is 22 digits, if everything were multiplied by 1e20, the difference would still be the same number of digits. I am now taking a look at vpasolve() but am getting an error when I try to print it to an output excel file, maybe you can help? clc clear all digits(80); filename = 'K Values.xlsx'; filename1 = 'NLE_SOLVER.xlsx'; filename2 = 'results.xlsx'; data = xlsread(filename1,'A3:A120')'; sizem=size(data); rows_A=sizem(1); cols_A=sizem(2); for i=1:1:cols_A k(i)=data(i); a = k(i); syms x; S=vpasolve( (x/(x+2))^3-a*((1-x)/(x+2))^2 == 0,x); [rows,cols]=size(S); for j=1:1:rows if S(j) &gt;= 0 e(i)=S(1); break; end end end xlswrite(filename2,k','A3:A114'); xlswrite(filename2,e','C3:C114'); &lt;--- error Input data must be a numeric, cell, or logical array. Error in k_pulling (line 25) xlswrite(filename2,e','C3:C114');
Yeah.... I don't know Stata but if you explain what you're trying to do we might be able to give you a hand. Also, if you're asking whether something requires a loop, you might want to spend an hour looking at basic control structures in MATLAB; there's plenty of beginner tutorials out there. Feel free to ask away, though.
Yeah, that line of stat code is completely incomprehensible to me.
This is for my friend's work. I'm not sure on the exact details but the experimental data they gave me to write a program with has values from 1e-22 to 1e3 which are plugged into that equation to find the corresponding variable. You are right in that I do only see at most 6-7 significant digits though.
Yup, because I am working with matrix - and I would need to multiple with complex numbers. Though - I would look at my code again, maybe I can simplify it and still use the method you mentioned. ps: Thanks for the reply. 
&gt; I would need to multiple with complex numbers what?...
A struct would work, but since they are just numbered variables I think a cell would probably be easier.
You can multiply cell array elements, both by constants, other arrays, or other cell arrays elements (as long as those cell array elements are regular arrays themselves). &gt;&gt; a = {[1, 2, 3], [4, 5, 6], [7, 8, 9]}; &gt;&gt; a{2} = a{2}*10i; &gt;&gt; a{2} ans = 0.0000 +40.0000i 0.0000 +50.0000i 0.0000 +60.0000i &gt;&gt; a{1} = a{1}'*a{3}; &gt;&gt; a{1} ans = 7 8 9 14 16 18 21 24 27
'a' is a string silly. `10^char('0') = 1.0000e+48` `10^str2double('0') = 1`
 &gt;&gt; a = '0' a = 0 &gt;&gt; 10^a ans = 1.0000e+48 I think your variable a is a string, not an integer.
No Problem!
Me again! There's probably some other ways to do this as well, but my solution would be: * Create a shortcut to cmd.exe * Right click the shortcut and edit the details - you'll find many options relating to sizing * Call your program directly from the shortcut by modifying the shortcut target as follows: C:\Windows\System32\cmd.exe /k "C:\your_app_path\your_app.exe" * Run your shortcut, rather than the executable directly, whenever you want to run your application That should do what you want!
plot(x,y) plots y against x. In your case, x is data1(3:END1,2). This means that x is a subset of the data1 matrix, rows 3 to end of column 2. Similarly, y is data1(3:END1,11) rows 3 to end of column 11. Also, it looks like the number of rows in data is stored in the variable "END1". This is unnecessary. You can automatically index to the last row using data1(3:end,11), since end is a keyword. You could even index to the next to last row using data1(3:end-1,11).
sorry all! not sure why i assumed everyone here would have a working knowledge of a mostly unrelated language/software! basically, i need a sum of the variable "tosum1" for every combination of group, firm, and year. in the below example, i need to calculate "sum1": product_group_code | firmid | panel_year | tosum1 | sum1 ---------|----------|----------|----------|----------| 1 | 10 | 2008 | 3 | 10 1 | 10 | 2008 | 7 | 10 2 | 7 | 2003 | 9 | 9 2 | 7 | 2004 | 2 | 2 2 | 7 | 2005 | 3 | 11 2 | 7 | 2005 | 8 | 11
ELI5, thank you very much! I have many more questions, but this gets me over quite a hurdle - I'll keep learning solo for now
:( What are my options? Could someone do it for me?
As long as Octave is doing what you need, why switch to something else? For basic data processing and plotting, Octave is more than adequate. And the licensing aspect may be important especially for a measurement system: you can run your script on any computer, online or offline, without having to worry about installing a license, getting a connection to the license server, or your department running out of licenses. If you ever *need* to use to MATLAB for your studies, there will not be anything new for you to learn, since the language and even most of the functions are almost exactly the same.
You're going to have problems when the denominator is zero. You could use trapz if you are careful about your domain. If you have to integrate through the poles you might consider using a package like [chebfun](http://www.chebfun.org/).
I would use a root finding method to numerically find the minimum. There is an algorithm called the "golden section search" that can be scaled up from 2D to higher dimensions once you get it working If you have the time/money, I highly recommend this book to help you learn how to solve things with matlab http://www.amazon.com/Applied-Numerical-Methods-MATLAB-Scientists/dp/0073401102 A really cool thing about solving problems like this numerically is that you don't have to do any nasty derivatives or integrals. The computer does all the leg work for you and you still get an answer that is as accurate as you need it to be
I'd love to get into that later, really I would. Thanks for the link :) But for now I'm trying to finalise this before tomorrow and I just want this number. Like really badly.
Having MATLAB and having free, unlimited site licenses for all research groups is not necessarily the same thing. 
I would express the left side as a function using integral, and solve the system using fsolve. If the left side is given by sampled data, rather than a function, substitute trapz for integral.
errm.. [Radon Transform](https://en.wikipedia.org/wiki/Radon_transform)
I didn't address cost because OP is in an academic environment. If cost were the discriminating factor I'd suggest Python over octave. 
You could use ezimplot3. You can download it from here http://au.mathworks.com/matlabcentral/fileexchange/23623-ezimplot3--implicit-3d-functions-plotter
I've been looking into Scipy - Python for awhile. It looks very nice to use, but I downloaded it and got stuck a bunch of times. Maybe I'll try again later.
In one of my previous labs we paid something like 15 grand a year for a 6 or 7 licenses and just a handful of typical toolboxes.
Fair enough. The key point, though, is that code written for Octave has a good chance of not working with MATLAB unless you were very careful.
Yeah it preserves whitespace, so it's not foolproof. Speaking of single quotes, if you have a struct or cell array with strings, it will print strings in quotes. So there's a nice little inconsistency. &gt;&gt; a = {'a'; 'b'; 'c'} a = 'a' 'b' 'c' &gt;&gt; a.a = 'hi'; a.b = 3 a = a: 'hi' b: 3
Just creating a shortcut made the whole window resizable! Thanks so much! You are on it with this stuff!! 
You're missing a loop that iterates over all the scores. Right now, it's only doing that logic for i = 1. for i_ = 1:100 end You can also do this with logical indexing: labels(scores&gt;=65) = 1; labels(scores&lt;65) = 0; (Small note, use i_, as i is reserved for complex i in matlab)
I got you this: http://i.imgur.com/FYpHhtp.png Does it look correct to you? Then I could share the code. 
Yours actually worked very well, I was sort of hoping for more of a curve instead of it hitting that max 1 and then staying there but I think that is more the nature of the data than anything else. Thanks a lot that is really what I needed!
You might try the anaconda distribution, there is a community version that works out of the box. 
I have. I'm horrible with code and that got me stuck. I'll try again later
I tried switching over to solve(), subs(), vpa() and I have something like this now equation=input('Enter equation :', 's'); a = 5; %user input: (x/(x+2))^3-a*((1-x)/(x+2))^2 == 0 eq=str2func(equation); syms x; S=solve( eq); but on the last line I get Conversion to 'sym' returned the MuPAD error: symbolic:kernel:MissingToken|)# What I'm trying to do is be able to solve a function taken from the user that is passed in through user input and then solve it but I'm getting stuck and converting the string to something solve() or vpasolve() will take. Would you know how to properly convert the char?
use stateflow to control the switching between stages
ahh yes, that is a good way to put it! i am treating the combination of the three variables as the primary key. thank you so much.
what kind of vehicle model? two track model with magic tire formula? it depends a lot on what vehicle model you are using
Edit: well turns out I don't have stateflow :P I am hoping for a less expensive method besides buying the stateflow haha Would this work for different rockets with varying stages? I was planning on using a CSV file format to get the staging/mass/theust data for each rocket variation to determine the best one. I'll have to read some more about state machines, I have basic knowledge of them but I think I can see it's use 
So I have something like this now. There's a strange problem with subs. 'a' is a constant that is taken from an excel file but after substituting it in with subs(S,{'a'},{a}); I get this instead of an answer. RootOf(z^3 + (750951547638613*z)/110768999648742989408400271174149177 - 1501903095277226/332306998946228968225200813522447531, z)[1] RootOf(z^3 + (750951547638613*z)/110768999648742989408400271174149177 - 1501903095277226/332306998946228968225200813522447531, z)[2] RootOf(z^3 + (750951547638613*z)/110768999648742989408400271174149177 - 1501903095277226/332306998946228968225200813522447531, z)[3] Code: digits(80); data = xlsread(filename1,'A3:A120')'; sizem=size(data); rows_A=sizem(1); cols_A=sizem(2); for i=1:1:cols_A k(i)=data(i); a = k(i); equation='(x/(x+2))^3-a*((1-x)/(x+2))^2 == 0'; %equation=strrep(equation,'a',num2str(a)); syms x; S=solve(equation,x); S=subs(S,{'a'},{a}); [rows,cols]=size(S); for j=1:1:rows if S(j) &gt;= 0 e(i)=double(S(j)); r=vpa(a); t=vpa(S(j)); sum(i)=double((t/(t+2))^3-r*((1-t)/(t+2))^2); break; end end end However if I use this strrep beforehand, then solve() will give a numerical answer. equation=strrep(equation,'a',num2str(a)); Using this method though, the values in my 'sum' vector are 1e-50 less precise than when I was using vpasolve(). How can I improve the precision (and maybe speed of the program). Am I not using solve(), subs(), vpa() correctly? 
I read this article the other day. Really cool explanation. May help you with a general overview. http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/
The way that system seems to measure in 3D with a single camera is more of an approximation. It measures the 5 points you can see [top bottom left right nose]. Yaw can be measured by looking at the position of the point of the nose between the left and right markers. %closer to right means head turned right etc Pitch in the same way except by looking at the position between the top and bottom. %closer to the top means head tilted up etc Roll by estimating the geometric transform of the outer 4 points. If I were you I would start with the following methods and build from there: -detectMinEigenFeatures() -vision.PointTracker() -estimateGeometricTransform() An example that tracks position and roll of the entire face can be seen here: http://au.mathworks.com/help/vision/examples/face-detection-and-tracking-using-live-video-acquisition.html 
Good share, thank you!
The R matrix is usually obvious: it's the covariance of your measurements. If your measurements are independent (i.e. there's no correlation between the noise, often the case in practice), then only the diagonal elements of the R matrix will be non-zero, and each diagonal element will simply be the variance of the relevant measurement. With the Q matrix, it's more subtle. As for the R matrix, this is a matrix of covariances, but this time it's the the covariance of the non-determinstic state changes **over your KF prediction timestep**. Note that we've got a time component involved now: if you change the prediction tilmestep, Q will generally change as well. Now, if your model of the system is defined over a fixed tilmestep, and that timestep is the same as your KF prediction tilmestep, then you can directly use that model in the Q matrix. If, in addition, the changes to the states are independent, then you've got a diagonal matrix with the diagonal elements equal to the variance of the state charges over the prediction tilmestep. Unfortunately, the model of the system usually won't be defined over a fixed timestep that happens to exactly match the KF prediction tilmestep. Normally it will be defined as a continuous random process (a Gaussian process, or a Gauss-Markov process). In that case, you need to do an integral of the random process to work out the variance over one prediction tilmestep. This isn't difficult once you know the formula, but it's an extra thing to get your head around. 
What's the largest the vectors will ever be? A pretty simple way is: A=[1 2 3 4 5] B=[1 2 2 2 2] C=[] for i=1:numel(B) C=[C repmat(A(i),1,B(i))] end
Weird that there seems to be no function that does this automatically! I made my own function to do this using your code, thank you!
You can speed it up by preallocating an array of length given by the sum of your histogram vector and then storing those repmat results using some start/stop indices that you update in each iteration. I'm on my phone so can't type out some example code, but I'll check back tomorrow. If your array sizes are even modestly large, the preallocation will save orders of magnitude in runtime.
Hey this is really nice. My only comments are: 1) Maybe add in more handle graphic stuff. You sort of glaze over this in the plotting section. Handle graphics are super useful, as I'm sure you know. E.g., h=plot(x,y); get(h) %returns all attributes of h set(h) %returns all possible attributes of h with actual settings highlighted 2) You say that 'dbstop if error' will stop if an error is found in a try/catch block, but it will actually catch any error withing a script/function. I always place this at the very top of all my code because I find it so useful. Thanks again!
A nice cheat-sheet. I only have one comment: Some of the functions you mention require additional toolboxes (e.g. fmincon). You may want to indicate for which functions additional toolboxes are required. 
thanks ...
I also asked this question on [Quantopian](https://www.quantopian.com/posts/kalman-filters-best-practices?utm_campaign=kalman-filters-best-practices). There are a few responses.
Thanks for the help
scatteredInterpolant might be what you're after
Perhaps trying to clean up the data first using grep. Works for Linux or mac, for Windows you might need to install cygwin first. grep 'x1 =\\| x2 =' filename &gt; cleaned_up_data.txt
you could try using regexp()
yep that helps already quite a lot! Thanks! So I am trying to put that in a function that looks like this: 1 function [output] = cleanOutput(varName,fileName) 2 3 toSystem = ['grep ''' varName ' ='' ' fileName '.txt &gt; c' fileName '.txt'] ; 4 system(toSystem) ; 5 6 fileID = fopen(['c' fileName '.txt']) ; where the `toSystem`string in lines 3-4 will send the prompt command `grep 'x1 =' fileName.txt &gt; cfileName.txt`, which is what you suggested, and where I then open the file (line 6) and would like to get the values out of it. The thing is, I have some leading white spaces and random text after the data on some lines. I think `fscanf` can work through that, but I can't make it work as expected as of now... For example, If my file is `test.txt` and is the one I gave as an example above, and I want to get `x1` only, I type `cleanOutput('x1', 'test')` which does the corresponding `grep 'x1 =' test.txt &gt; ctest.txt` on it, and I get the following for `ctest.txt` (leading 'c' for 'cleaned'): x1 = 0.45 x1 = 0.47 and the random text How do I then proceed to get `A = [0.45; 0.47]` in this case? (i.e. starting from this `ctest.txt` file of 2 lines with leading spaces and random text on each line)
could you elaborate a bit more with my working example? ---- EDIT: ok I found a workaround, it turns out the random text after the value i'm looking for is always formatted the same (` x1 = %f and %s = %f\n`), so that using stars to ignore the rest as in: C = textscan(fileID,[' ' varName ' = %f, and %*s = %*f\n']) ; A = cell2mat(C) ; worked out pretty nice, where `fileID` is the *cleaned* text file, and `varName` is either `x1`or `x2` in my example above... ---- EDIT 2 : I'm sorry I didn't thank you for the idea of `textscan`... So here you go: thanks!
You can use the per element "and" test `&amp;` to find the rows where both are true. So something like this: &gt;&gt; arr = [1, 2, 5; 1, 3, 6; 1, 4, 7; 1, 2, 8; 2, 2, 9; 3, 2, 10; 6, 1, 11]; &gt;&gt; arr(:, 1)==1 &amp; arr(:, 2)==2 ans = 1 0 0 1 0 0 0 &gt;&gt; find(arr(:, 1)==1 &amp; arr(:, 2)==2) ans = 1 4 &gt;&gt; arr(arr(:, 1)==1 &amp; arr(:, 2)==2, :) ans = 1 2 5 1 2 8
Looping is more straightforward, but this can be done without looping: sums = cumsum(column); column([false,diff(~column)&gt;0]) = diff([0,sums([false,diff(~column)&gt;0])]); This can be broken down into more steps to make things more clear, if desired. For example, assigning `[false,diff(~column)&gt;0]` to an intermediate value making it clear that this is the index of the start of each block of zeros (excluding any leading zeros, since there's no need to sum them) would make the snippet more readable. Also, there are two things you should note: 1. "column" is actually a row--concatenation via commas (or spaces) is always horizontal, while concatenation via semicolons is vertical. 1. I assumed that the "6" as the sum of the second cluster was a simple error on your part, since the sum of that cluster (1 + 2 + 1 + 1.5) is obviously 5.5, not 6. If you want to round the sum for some reason (no pun intended), simply round `sums` (or whatever you want to call your cumsum array) at some point--either on assignment or in the call to `diff`. 
There is a way to do this without looping: C = zeros(1, sum(B)); C(cumsum([0,B(1:end-1)])+1) = 1; C(:) = A(cumsum(C)); Note that in this particular case, since `A` is `[1 2 3 4 5]` (or, more generally, since `A == find(A)`), there's actually no need to index A in the last line; you could just as easily write `C(:) = cumsum(C) + 1`. Note also that `C(:) = ...` in the last line could just as easily be `C = ...`, but assignment with the colon operator forces Matlab to copy in place rather than deleting the old array and creating a new one (if you're working with large arrays, especially on a memory-limited machine, you might notice a difference; else, use whichever you prefer). The trick to this is basically to reverse what is returned as the second output of `unique`--use the count as an index to set elements of C where the value should increment to `1` and cumsum the resulting array. `cumsum(B)` effectively gives you the location of the last index of each group of values in C; by prefixing the cumsum with `0`, only going to the second-to-last element and adding 1 to the entire resulting array, you instead get the first element of each group of values. Setting the first element to `1` and cumsum-ing the array gives you an index array into A; which you can then assign back into C for the result you wanted--all without looping, so it's fast even on very large arrays. On the other hand, it's less intuitively obvious what the code is doing than a loop would be. I would suggest assigning `cumsum([0,B(1:end-1)])+1` to a descriptive variable name (`startIndex` or something similar) and adding comments to explain what the cumsums do. And maybe include the loop in a comment indicating that it is functionally equivalent to the more efficient but more cryptic code. 
Are you saying you want to split the video into 6 smaller videos? I don't know of any tool / function that would do that directly. You're probably going to have to write it yourself. You'll need one VideoReader object and 6 VideoWriter objects. Then traverse through the video frame by frame (see the doc for VideoReader), split into 6, and then write out all 6.
It'd be helpful if you can upload an example of the two images so we can see what you're dealing with. I'm going to be basing my reply on the assumption that the images contain an object of interest in the foreground and some kind of background [I'm envisaging MRI scans of a head here], and also that you have no "common markers" you can easily identify (that'd make it far simpler). Before anything, I'd resize the second image using the resolution to work out the factor (I'm assuming you know the "spatial" resolution of the image, ie 10^-3 m/pixel or something). Now the images should both be the same "size" in spatial terms. Then I'd threshold the images to get binary masks (using otsu's method (imthresh I think?)). Then, create an array listing the coordinates of every point making up the object of interest (ie every "1" in the mask matrix). ie img1_points = [x1,y1;x2,y2;...] After this, you can calculate two things. Firstly, the center of mass of the object by using mean() on your coordinate lists. Once you have calculated this, you can "align" the images by subtracting the center of mass from every point in both lists, so the objects become centered around (0,0). After this, calculate the covariance matrix (ie A times A') for the two lists and then use eig() on these covariance matrices. The eigenvectors return by eig will give you the direction of the principle axes of the objects. The difference in angle of these axes can now be used to rotate the second image to match the first. If all goes to plan the images should now be reasonably well registered. Honestly it's very difficult to answer properly without actually seeing the images you're using, though, as this method could be useless for you - it depends on the context. EDIT: Ah just saw you mentioned control points which I guess are common markers between the two images? In that case it's fairly straight forward to get the least-squares optimal registration (if you have more than three points), although you need to clarify whether there are any restrictions on the degrees of freedom? (ie are shearing transformations ok?)
As was mentioned by another user, it would help to have an example set of images. Also, do you have access to the Image Processing Toolbox or the Computer Vision System Toolbox?
Firstly, look for an `mlint` plugin for your editor. This will provide syntax checking which is a large a part of what the MATLAB editor does. In terms of sending things to MATLAB, the supported way in your list, at least in Windows, is through COM automation (/automation or /regserver switch and/or regmatlabserver): you would likely have to write a program in C which uses the MATLAB Engine to do the actual communication. See the [MATLink project](https://github.com/rsmenon/MATLink) as a starting point for this type of communication. A few dirty and simple ways come to mind: * Write a MATLAB script/GUI that opens a socket, and waits for (ad-hoc) commands, and uses `run()`. * Use AutoHotKey or similar to actually type the name of the script into the command window and press return. You can use --logfile to get the output and have your editor console watch that. However, if you're looking for a more bidirectional solution or debugging support, it's likely going to be a lot of work. I don't know what facilities Sublime has for debugger support, but for this you would need to write a program that effectively "wraps" the MATLAB input/output, issuing and parsing commands (e.g. `dbstop`,`dbstack`, etc). This seems tough on Windows since from what I can tell MATLAB will always open in a window even on command line. I am not sure if the is any other way to interact with the debugger. You would have to test what MATLAB responds to COM messages whilst in debug `K&gt;&gt;` mode. There have been a few projects (Emacslink, Matclipse) that achieved some sort of editor+debugger interactivity, but each successive MATLAB release breaks some other available hook into this monolithic beast. 
I'm sure there are better development environments out there. I've never used Sublime Text. ... But if you think the Matlab ide isn't very good, and actually expect other people to agree with you, you're missing something. The Matlab ide is pretty damn good. I wish there were more like it. 
Thanks for the suggestions, I think that makes sense with the drawing box but could you elaborate a little bit more on the `selection = allFrames(1:10, 1:20, :);` part? Also, the video is split up pretty evenly into 6 boxes, so the cropped area would probably stay still on one subsection between frames, as the only moving things(bugs) are within their respective chamber. Thanks for the help!
I started working on Matlab a couple weeks ago and I end up using 'for' all the time. Is it bad because it's memory-intensive or something? Can you give an example of how I'd do this without using for?
It's just built to be convenient (and fast) for vector and matrix operations. The solution above is a perfect example - no need to do a for-loop to scan through all your indexes. Also, always preallocate memory for large matrices. That's like the 2nd commandment in matlab.
What is the format of your data? I've been assuming it is a 3-d array of size [x,y,nframes], where x and y are the number of horizontal and vertical pixels in a given frame (i.e., the nth frame of the video can be displayed via `image(1:x, 1:y, n)`, or, more simply, `image (:, :, n)`. If that's not correct, other functionality may be needed to crop the image. 
Yup. Sure have. You're either tire or engine limited...
Oh I know that part, what I dont understand is how I should best program accelerating.
It's electric, dont need gearshift ;). I have the apex speeds assuming that the car is in steady state and only has lateral acceleration there. I have troubles calculating exactly how much I can accelerate. If I go from the apex to the next point, which has a larger radius, do I assume that I have the same Ay there? And then use a GG circle to find the maximum Ax with it?
Sure. The overall loop is simple. Know speed at point -&gt; figure out how much spare Ax the tires or car is capable of -&gt; integrate to find speed at next point. How you choose to calculate how much spare Ax the vehicle is capable of is up to you - there are several methods. At simplest you could assume the total car has some G-G capability of a circle of radius X. Or you could try to figure out what individual tires are capable of at each state in time.
Thank you for your response, and I apologize for the delay! I have the Image Processing Toolbox, but *not* the Computer Vision System Toolbox. I've replied to the other comment with a little more detail and example images. Here's the link: https://www.reddit.com/r/matlab/comments/3hgrpp/registering_two_similar_nonidentical_images_with/cu9gekr Thank you for your assistance!
Nope, doesn't help. :(
Ah ok. Good luck with it! Assuming you have suitable markers/control points, I'd encourage you to forget about the underlying images (for the time being) and just focus on techniques to align these specific points in space. It'll make it much simpler for you.
An initial search says it is an optical mouse sensor, and looks like people - who know what they are doing - are getting basic displacement numbers from it. https://tagloom.com/post/OoCmWiK_cXL These guys post some code: http://www.microchip.com/forums/m792540.aspx Should be able to translate this to Matlab... looks like C, so the manufacturer provided functions are likely to be as well. This means that if nobody on the MathWorks forums has posted driver code, you will need to write Mex functions, which translate Matlab code to C functions: http://www.mathworks.com/help/matlab/matlab_external/introducing-mex-files.html?refresh=true
Correct me if I'm wrong but I don't think you can get images from this sensor. You can only get position data. At 12000fps x 8200px x 1byte ~= 93 mB/sec of data. Your not going to get this out of a 4wire spi interface to a PIC18. If you want to do this sort of thing in matlab you can write a .net app to save images to a dir and post process in matlab.
Ahh so 900bytes per image.. thats better. Need to find out how the image data is streaming. If the usb driver is requesting each frame or if they are using iso frames, etc. Is the software app open source or have a SDK?
Other than pirating it, cheapest baseline option that I know of for matlab is the student version for $100
The function you use in fmincon isn't global. Doesn't the result of fmincon output the values you need? Or in your script use the evalin function to place the variables in your workspace directory 
Might wanna just give the sales dept. a call and find out your options from them directly, since you're trying to go about this the "correct" way anyway.
Thanks. I'll probably do that. Currently though, there is nothing set, so I'm only surveying the ground here. 
What I'm not sure about the "commercial use" here is that I won't actually install this on the end product, I'll only use that on my own machine and deliver my developed routines to the company. I assume that the company would have to have its own license for the end product. Regarding octave, how compatible is it with MATLAB? Does it store arrays the same way for example? I would hate to send a code to the company that works properly on my machine but due to memory management differences would result with the transpose of the desired matrix.
&gt; I might be assigned a freelance job of programming some MATLAB functions into a controller. Matlab Home: *For personal use only. Not for government, academic, research, commercial, or other organizational use.* 1. The company that you're freelancing for has a license and lets you use it. 2. You build a proper license into your freelancing charges.
What type of variable is D? If it's a cell array, try replacing parentheses with curly brackets, e.g., D{4}.
Completely solved all my problems! Thanks haha :)
Have you checked the documentation on the Mathworks website? 
Yeah, I have, but I can't find the part where they specifically tell you how to do that. In the meantime, however, I was able to find an obscure link that was related to what I wanted! Thanks for assisting :)
Mnemonic: Curley for contents.
Cell arrays take some getting used to but boy oh boy are they useful once you do. Structures, too.
Have you tried any of the Simulink demos yet? I use the Rpi with Simulink all the time and haven't had any problems.
The rand() function, as opposed to randn() is probably what you need. You'll just need to expand the range it covers. 
Sounds like your homework. Maybe your prof wants you to plot a 2D slice of the 3D field. Look at the wind dataset built into Matlab load wind
There's a standard technique for doing this, "inverse transform sampling". This StackExchange answer shows how it works for the Cauchy distribution: [http://math.stackexchange.com/a/484429](http://math.stackexchange.com/a/484429). 
There will be multiple files with the same name in the resulting folders. How do you want to handle this? Also, MATLAB is good for *processing* large amounts of data, but it isn't really designed for file management tasks like this. It can do it, but it isn't really the best tool for the job.
Do you have some code we can look at?
When you create your plot, you can save the handle to it: handle = plot3(x, y, z); Handles are a very common concept in MATLAB. You can pass that handle into get() to inspect various properties; you'll see things like the axis labels, line colors, camera angles, etc. get(handle) Each property has a name and a value. That get() call might print out that there's a property named 'Alpha' and currently its value is 7.8. You can use the set() method to change certain properties of a handle. For example, to set that made-up property named 'Alpha' to -3.4, you would do: set(handle, 'Alpha', -3.4); Or perhaps you want to halve whatever the current value is: old_alpha = get(handle, 'Alpha'); set(handle, 'Alpha', old_alpha / 2); If you're modifying properties for a plot, you should see the figure update immediately when you alter the values. Try inspecting the plot's handle's properties and maybe you can figure out the settings that achieve your desired effect. Note that other objects in plots have properties as well; when you create a figure, the call to figure() returns a figure handle. When you create subplots, it returns axis handle objects. When you call colorbar() to make a color legend, it returns a handle to that object. When you draw a line on your plot with line(), it too returns a handle. Lots of functions actually return handles if you decide to assign them to a variable.
Sure, it's not too long yet so [here it is on pastebin](http://pastebin.com/Kt0jqXyJ). There's still a lot of little quirks I need to work out; the plot zooms way out and stuff if you try and rotate it, the actual stars still look pretty cruddy, but I can sort that stuff out I think.
Awesome thank you! I think there's a few places in my code where this property might lie, so I'll go and dig through that now and see if I come up with anything.
Here is some code that I think does what you are trying to do: declination = 0; %declenation in degrees right_ascension = 50; %right ascension in degrees fieldofview = 50; numframes = 1000; %number of frames in the video polar = (90-declination)*(pi/180); azimuth_0 = right_ascension*(pi/180); [X,Y,Z] = sphere(24); warp(X,Y,Z,image2); campos([0 0 0]); camva(fieldofview); camtarget([cos(azimuth_0)*sin(polar) sin(azimuth_0)*sin(polar) cos(polar)]); camup([0 0 1]); camproj('perspective'); %% Rotate the camera 360 degree in the azimuthal angle F(numframes) = struct('cdata',[],'colormap',[]); angles = linspace(0,2*pi,numframes); for i = (1:numframes) azimuth = azimuth_0 + angles(i); camtarget([cos(azimuth)*sin(polar) sin(azimuth)*sin(polar) cos(polar)]); drawnow F(i) = getframe(gcf); end close; fig = figure; movie(fig,F,1,60); I used [this image](http://www.geckzilla.com/apod/tycho_cyl_glow.png) to project on the sphere. Download it and store it as "image2" in the workspace. Edit: Just don't set the declination to -90 or 90 degrees. To properly set up the animation I've programmed you'll have to do include rotations of the camera's "up" vector 
That is amazing! Copied over your code that controls the camera and it works perfectly. Thank you so much, you have no idea :) I'll try and use the other parts to simplify it as well.
You'll still need to do something more sophisticated than what I've done for a real application. To compute the rotations, you should do what people normally do and use quaternions. Here are some resources you can start with. http://www.chrobotics.com/library/understanding-quaternions http://www.mathworks.com/help/aerotbx/ug/quatmultiply.html If you are going to use this code commercially, let me know. I have to give you my authorship information, technically this IP is owned by the University of California even though I wrote it.
Thanks for a point in the right direction :) No it's not a commercial app haha.
Shouldn't the time axis be: t = (0:(numel(x)-1)) / 2048; ?
Yep, I believe the usage of linspace is (min,max,numel), so the above would be incorrect. 
t=0:1/2048:length(data)-1/2048 plot(t,data) grid on xlabel('x axis, yo!') ylabel('y axis') Legend('BOOM')
I put legend('BOOM') on all of my plots
Whose lab are you in, out of curiosity? First thing is to narrow it down to the largest connected components. First, make eyes white: im = ~im; Next, find connected components CC = bwconncomp(im); Find the number of pixels in each connected component: [lengths, indices] = sort([cellfun(@length, CC.PixelIdxList)], 'descend'); Make a new blank image only_eyes= zeros(size(im)); Set the two biggest connected components to white only_eyes(vertcat(CC.PixelIdxList{indices(1:2)}))=1; Then I'd use regionprops as /u/capturedmoments suggested, but this time on each connected component. CC = bwconncomp(only_eyes); eye_properties= regionprops(CC); You can tell which eye is which from the centroid field in the eye_properties struct. The angle is also a field of the eye_properties struct. 
You could use bwconncomp to find the two largest objects and compute the eigenvectors of the covariance matrix of the indices of the eyes. This gives you the major and minor axis of the blob. Then just use trig to get the angle. 
You don't want a time axis that begins at zero?
Somewhat embarrassingly, I have used Matlab for a good 3 years now (academia) and still have no idea what Simulink is. Something something modelling. 
Simulink does do modeling but where it's used a lot is generating code for controllers and hardware. It has a lot of built in support for a lot of different hardware: http://www.mathworks.com/hardware-support/home.html?refresh=true It helps engineers that think like engineers write code for target hardware. They now have RaspPi, Arduno, &amp; LEGO MINDSTORMS, support. http://www.mathworks.com/videos/introduction-to-simulink-support-for-target-hardware-68955.html So rather than teaching a bunch of engineers C to get started with their projects they can take what they've simulated, create a controller for it and run it directly on hardware. In the 'old' days you would have to write a spec and send it to the software guys and hope that they implemented it how you asked them to. It's even certified to generate code to specifications like [aerospace's DO-178B.](http://www.mathworks.com/solutions/aerospace-defense/standards/do-178b.html) You can also generate code for FPGAs and PLCs in addition to C/C++.
True, but there are a [lot](http://www.indeed.com/q-labview-jobs.html) [of](http://www.indeed.com/jobs?q=ruby&amp;l=) [niches](http://www.indeed.com/q-ruby-jobs.html) [out](http://www.indeed.com/q-matlab-jobs.html) [there](http://www.indeed.com/q-python-jobs.html).
Right. I do computational biology so I feel less bad about not knowing about it now.
&gt; I do computational biology so I feel less bad about not knowing about it now. This? http://www.mathworks.com/solutions/computational-biology/
Ish. More neuroscience and less bioinformatics.
Wow, I am an idiot. Thank you.
Yea "solve" function does it if I remember correctly.
GUIDE is your guide.
as other users suggest, use GUIDE, but also if you want the plot to refresh in real time you'll need to add a drawnow statement following your call to plot probably.
Again, the solve function works. If you look at the 'solve' help in the matlab command window it shows you examples Example 11: syms x y real [S, params, conditions] = solve(x^(1/2) = y, x, 'ReturnConditions', true) assigns solution, parameters and conditions to the outputs. In this example, no new parameters are needed to express the solution: S = y^2 params = Empty sym: 1-by-0 conditions = 0 &lt;= y Example 12: syms a x y [x0, y0, params, conditions] = solve(x^2+y, x, y, 'ReturnConditions', true) generates a new parameter z to express the infinitely many solutions. This z can be any complex number, both solutions are valid without restricting conditions: x0 = -(-z)^(1/2) (-z)^(1/2) y0 = z z params = z conditions = true true So in your example you'd have solve(a*x+b=y,a)
Check out http://pro-star.com/ They have pretty amazing laptops for pretty amazing prices. Plus their customer service is really a LOT better than the service from pretty much all the other big companies. I bought my latest laptop from them and I really don't regret it at all.
I've posted exactly this here before, try searching. Also GUIDE can be a lot or work for a single slider, have a look at uicontrol. EDIT: here you go. https://www.reddit.com/r/matlab/comments/2nqxgr/how_could_i_make_my_plot_interactive_with_a_slider/
Have you tried actually using operators? Y3=x*sin (whatever goes in here)
yeah i did that already still got me stuck, really bothering me :( Error using * Inner matrix dimensions must agree. Error in daemiC (line 9) y3=x*sin(1./x) still gives me this when i run it....
You need the .* operation.
I can't believe myself that I am saying this but get a retina Macbook. Running the latest MATLAB very smoothly.
You are correct. However, hand-coded C is still preferred for critical systems like engine and transmission controls. Significantly more efficient and easier to optimize the algorithm. In addition, conditional algorithms take dozens if not hundreds of auto-generated code while it can be achieved by just a few lines in hand-code.
Any heavy equipment you've seen built in the last decade is running Simulink. 
The symbol * is for matrix multiplication. The symbol .* is for element wise vector multiplication.
Macbooks are great for programming if you want to spend the money.
I am indeed past that step. I'm trying to solve the heat equation in cylindrical coordinates. https://en.wikipedia.org/wiki/Heat_equation http://www.ewp.rpi.edu/hartford/~ernesto/S2006/CHT/Notes/ch03.pdf So our variables are heat, time, radius and height. I cannot just "throw" it into MATLAB via pdepe because pdepe only solves in terms of time and one spacial direction. Some help on the PDE Tool Box or any other MATLAB function would be greatly appreciated.
I'd second that: * Screen, keyboard and touchpad are unbeatable. * You'll waste less time maintaining the OS. * Easy backups via Time Machine. * Unix command line, which is the best starting point for exploring compiled programming languages.
Hm, sorry I guess I misremembered, so it can only do 2D. If you still want to use matlab pde maybe you can exploit symmetry conditions and do two separate 2D calculations to get an idea of the temperature field. One simulation in the rho-theta plane in the middle of the cylinder and another one in the rho-z plane in the middle. If it is just a homogeneous cylinder I think those symmetry assumptions would be justified 
Do your plots in matlab. The formatting commands are very flexible, and you can certainly get good enough quality for research papers. If you stay in matlab you've got more ability to automate your plot generation, so if you need to repeat some analysis or make an extra plot you get all your nice formatting for free. Give it a go, and ask again if you get stuck on anything.
Yep. First controls project I did as an undergrad I did it using C++. It included a discrete kalman filter and a bunch of IO. It was such a pain in the ass to keep everything straight by hand and keep track of every gain in each matrix. Now I use it for everything. Simulation, HIL, SysID, communication, you name it. Simulink is pretty much axial to everything I do. It's like trying to eat spaghetti by hand. Sure you can do it, but you make way less of a mess when also using a fork.
Funny enough, my old company still uses simulink for engine critical algorithms. However, they are hand coded and the simulink diagram is designed as the specification.
You just need to initialize each box and assign a handle to it. Once you have that handle you can use it to assign a value to that box during the execution of your button's callback function. Sorry if I'm not explaining this well. I would be happy to help you with this via email if you want. Just pm me and I will send my email address.
Yep. Might as well just save the figures in the script. Especially if you're generating a lot of figures.
Hello, thank you! Just before you commented on this post I figured it out. You were indeed correct. 
alternatively... `saveas(h,'filename.jpg')`
The export_fig package in the file exchange is very good for generating figures for export. Changing the line style/width and font settings helps to improve figures as well
1) How to export the data depends on how you plan to use it afterwards. If you stay within Matlab, probably 'save' and 'load' which deal with MAT files and are most useful. However, you might consider exporting to excel (using 'xlsread' and 'xlswrite') or CSV (using 'csvread' and 'csvwrite') if you will share your data with people not using Matlab or if you publish your data to the whole research community. You will have to find you own workflow based on the research environment you are in and the data that you have. It's not the same if your experiment generates 10GB of data or 10 data points. 2) Many people recommend directly generating graphs for publishing using Matlab. I don't completely agree. I use Adobe Illustrator (or Inkscape if you prefer open-source software) as a step between the Matlab figure and the one I put in my papers. Illustrator is a much more flexible tool for annotating graphs and making sure that the things that are important visually stand out in the graphs. Since every graph I generate is different and used to show something else, I don't get a lot of from completely automating graph generation with Matlab. However, learning how to use Matlab graph formatting commands will definitely be useful whether or not you use Illustrator. Final advice - if you have 2D surfaces, consider using flat contour plots for showing results. A colorful surface plot is in many cases less legible than a contour plot and you get an added bonus that when people print it out in black-and-white it will still show the same thing.
I don't think you can really do that with structs. How would you know that x, y, and z were scalar? 
Change the parens to braces, i.e. strfind(TEST{1}, 'a') Cells are made to mimic set theory; `{[]}` is the empty set. The way the empty set was explained to me is that a set is like a box; the empty set is a box with nothing in it, but it's still a box. So if I have a cell containing nothing, that cell is the box. When you have a cell array `TEST`, and you ask MatLab to operate on the *cell* that constains that string with `TEST(1)`, MatLab does its best to guess what you want; cell in, cell out, and you have passed it a box (cell) with, say, `'bootielicious'` in it. So you get a box with nothing in it back, but you still get a box. However if you ask it `strfind( TEST{1} , 'a' )`, you're opening that box, and passing the string inside to the `strfind()` function, and you'll get an empty matrix back. 
Notice that your return is actually {[]} instead of [] It's a small detail, but these are actually two different datatypes. The first is a **non-empty cell** of 1x1 dimensions, and the second is an **empty array** of 1x1 dimensions. "What's the difference?" you wonder. Some background: MatLab doesn't do string objects. It does arrays of characters. When it comes to storing multiple strings, you can make a matrix of characters, but each string would need to be the same size. For instance, STR = ['Test1';'Test2']; Would make "an array of strings," but it's actually a 2x5 *matrix* of characters. The following would throw a vertcat error because the strings are different lengths STR = ['Test1';'Test200']; You could fix this by padding characters into your strings to make them the same length, but someone, somewhere didn't like that. Cells offer a better solution. Cells store data similarly to matrices. You can get data from a cell index the same way as a matrix. However, cells do not require the contents of all entries to be the same datatype. This means you can store a single number, hex codes, single characters, strings, object handles, pretty much anything you can imagine, into the same cell, and it works. So what you have is actually a cell of character arrays. And cells act differently than matrices when you index them. The following will make a 3x1 cell, where the first two entries are character arrays, and the third is an empty vector. STR = {'Test1';'Test1000';[]}; And you can get the information from each entry, just like normal. So STR(1) Will return ans = 'Test1' This is the point where things get weird. Notice how Test1 has quotation marks around it. This is because 'Test1' is not actually an array of characters, but a 1x1 cell where the only entry is 'Test1'. So, when you do strfind(STR(1),'z'), the result you will get is {[]} And then, when you do isempty(strfind(STR(1),'z'), you'll get 0. But why? Well, to isempty, the cell {[]} is not empty. It is a cell object which contains an array. That array is empty, but an empty array is still something to a cell object. In order for isempty to return 1 from a cell object, you would need isempty({}). This is a cell object without any cell entries. So, how will this actually fix your problem? Well, there's two ways to index cells. Using normal braces ( ) like it's a matrix will return a cell object of whatever the contents were that you selected. So you can do STR(1:2) which will give ans = 'Test1' 'Test100' Or STR([1 3]) which will return ans = 'Test1' [] All of which are still cell objects. But, if you use the curly braces { }, the cell will return the contents of that cell in whatever type that data is So STR{1} returns ans = Test1 which is a character array, and STR{3} returns ans = [] which is an empty array. And you can even do STR{[1 2]} which will return ans = Test1 ans = Test100 both of which are character arrays. So now if we walk back to the problem at hand, what you really want is isempty(strfind(TEST{1)} 'a')) Test{1} will return a character array in the first entry of cell Test. Then, strfind will look for 'a' in that array. If it doesn't find anything, it returns []. isempty sees that as an empty vector, and returns 1. Test(1) will return a cell in the first entry of cell Test. strfind will look for 'a' in that cell. If it doesn't find anything, it returns {[]}, which a cell object with an array stored in it. Is empty will see that as a cell with something in it, and return 0. There you go!
Wow. Very easy to understand and on point. Thanks a ton!
Thanks, this is a very in depth response. (would provide more upvotes if possible) I have tried each of these now and frustratingly my lines remain default color. Is it perhaps because PropCoordinationTrialsPairSession is a matrix that changes size on each day I plot, rather than plotting individual vectors? (Also using Matlab 2014a)
You can pass additional arguments to your ODE function when you call ode45. Simply call it as: `ode45(odefun, tspan, t0, options, arg1, arg2, ...);` so in your case you would call it as `ode45('ODE', 0:0.1:1, [0 1], A, B);` and the function definition for your ODE function would become `function [dydt] = ODE(x, t, A, B)` and you can remove all the global definitions.
You can allow a variable number of arguments to your function by using `varargin`. For example: function myfun(varargin) for i=1:nargin() disp(varargin{i}); end end will print each of the arguments. So calling this with myfun(1, 2, [3,4], 'hello') will print 1 2 3 4 hello 
You can make really pretty plots in Matlab. You just have to work for it. *disclaimer*, this is for pre 2014b or whenever it was they updated the graphics system. Still may apply but I don't know it as well. Some tips: * Colors: Use [`linspecer`](http://www.mathworks.com/matlabcentral/fileexchange/42673-beautiful-and-distinguishable-line-colors-+-colormap/content/linspecer.m) to get better colors than the default when you need more than 1 color. Otherwise, use black * Make the font size larger, say 16 * Make the line width thicker, say 2 * If using `pcolor` plots, use [this](http://www.mathworks.com/matlabcentral/fileexchange/43271-pcolor-eps-fix) * Use [`fix_lines`](http://www.mathworks.com/matlabcentral/fileexchange/23604-fix-lines) * Make sure the box is on for multiple `hold on` type plots * Play with `grid on` and `grid off`. It can often make or break a plot * Manually set `xticks` and labels (and same for `y`) to be what is nicer * Always export in a vector format such as PDF so that it can be resized * [`export_fig`](http://www.mathworks.com/matlabcentral/fileexchange/23629-export-fig) is good but you need to play with options. Personally, I do not like it's cropping options so I do no crop and call a UNIX program that came with LaTeX to crop it for me * If you really want pretty (IMHO) plots, use [`matlabfrag`](http://www.mathworks.com/matlabcentral/fileexchange/21286-matlabfrag) along with LaTeX. I've had some issues with this on non-mac platforms though. * If you really, really, really want nice plots and do not mind tons of trial and error, use [`matlab2tikz`](http://www.mathworks.com/matlabcentral/fileexchange/22022-matlab2tikz-matlab2tikz) and LaTeX. I've only ever needed this once when I couldn't get Matlab to natively do what I wanted This sounds complicated but you can just make a helper function to do a lot of it for you and automate it. Also, LPT: *ALWAYS* script the plot including size on screen so that you can recreate it later. Save all data you need, etc. Keep the plot script separate from the data generation. Keep it in version control. Then, you can note in your document (I use LaTeX so I comment it) the EXACT function and revision used to generate the plot. Provenance is important in your workflow. I do not think it is *always* worth the work but can be. For my dissertation, I was ahead-of schedule (strange, i know) so I spent a week cleaning up every plot and making it perfect. I am, of course, biased, but I think that my dissertation plots can rival *any* other plots.
Thanks for your advice, this has gotten me past a few hurtles, but I'm still stuck. I've edited my original post. Do you think you can take a look again?
http://www.mathworks.com/help/fixedpoint/ref/mrdivide.html https://en.wikipedia.org/wiki/Division_(mathematics)#Left_and_right_division
Not entirely sure why this would happen. Do you know which line in your code causes the error? One thing you can try is to initialize all your arrays before the for loop. To do this you can use the `zeros` function. This way they will all be initialized to the correct length before you start assigning data to them. For example for the `rawdata` array you could initialize it as `zeros(123, 9, length(varargin))` (I'm just assuming that's the size of the array). Do the same thing for the rest of the arrays.
The documentation might be a good place to look. It's also very unlikely to be impossible, since Matlab actually does it. 
can you do: z = x(end);
/u/masterspeler is completely correct. You could also use numel(). In fact you could use length, if you wanted to, exactly as you wrote. I'm not sure what's wrong with that. Using try/catch for this is unnecessary and ugly. 
That last bit of code works even better. Thanks a lot. 
Do you mean something like this? t = 0:0.1:20; plot( t, sin(t) ); %in linear scale semilogy( t, sin(t) ); % in non-linear, logarithm scale for y Could you give an example of what you would like to get or the code that you tried? 
check if this works: time_treshold = 5; % provided your time is in seconds start_position = find( VectorB, 1 ); % this finds the first '1' in the data while start_position ~= [] end_position = find( TIME &gt; TIME(start_position) + time_treshold, 1 ); VectorB(start_position+1:end_position) = 0; start_position = find( VectorB, 1 ); end If not, maybe I can help you if you show me the 3 vectors.
No. That's a pretty specific requirement for somebody to have a pre-built gui for. There are plenty of functions available in Matlab for you to write your own analysis though. 
What are some examples of features you're looking for?
I don't really understand what you're trying to do. Do you simply want to concatenate the array with 1 again? If so, simply use exactly the same code again--or, better, do both concatenations at once (i.e., `x = [x,1,1]`). Better than either would be to size your array correctly from the beginning (if possible), or to over-allocate and delete (e.g., if x is 30 elements long and you only fill to 28, use `x(29:30) = []`). If you need to concatenate x with itself, you might also look into `repmat` -- `x = repmat(x,1,5)` is generally more readable and maintainable than `x = [x,x,x,x,x]` (moreso for higher numbers of repetitions). 
*[1 x 2; 1 x 2; 1 x 2] This is one of 343 combinations fyi.
I want to fill n arrays of linear-n size each, starting on empty array1, for doing calculations with each at the end... But automatically creating the next 'array2' empty array for me to fill each blank of it till im done and the next one is created Edit: Clearness
Are you just making a big array of ones? Use the function ones(). Are you doing something repeatedly? Use a for loop. If neither of these help, you need to do a better job explaining what you want to do. Maybe include some code, or at least an outline of the algorithm. 
Im actually doing it inside a for loop, but the thing ive been struggling with is creating a new array to fill every once the loop runs.
Although usually not the recommended method, you can concatenate arrays like you did in the example(`array_tal=[array_tal x];`), just declare an empty array first. array_tal=[]; for i=1:z x=input('... ',z,a); array_tal=[array_tal x]; end edit: also you cant increment with `++` in matlab
If all of your arrays are the same length, and the length is known beforehand, then it's probably best to preallocate them as a single matrix and (if you can't vectorize the function to calculate each value) then loop to fill them. Since mean is a vectorized function (operates along the first dimension or the one you specify), you can wait until after the loop to do it. For example, to create M arrays of size 1×N (where M and N could be equal or otherwise), I would create a single array of size M×N: array = zeros(M, N); % Could use nan() or ones() if you prefer one of those for default values for ii = 1:M for jj = 1:N array(ii, jj) = someFunctionOrExpression; end end averages = mean(array, 2); % get the mean of the array along the second dimension--i.e., along each row Ideally, you'd vectorize the loop to create all the values in the array at once (`sum`, `cumsum`, `prod`, `cumprod`, `diff` and `bsxfun` are often useful for vectorized generation of values in numeric arrays that are dependent on previous values), but this at least gets you cleaner code than repeated concatenations--for example, someone who's never seen this code can tell the final size of the array at a glance without running the code (which would be very difficult to do when looking at code with chained concatenations). 
"... you can bet for home victory, draw or away victory in either of those (1, X or 2)." "you can either fill in 1x2, 1x, 12, x2, 1,x, or 2 on each game." Isn't this somewhat contradictory? Or are you saying it is possible to bet on all options for a single game? Like, 1x2 means that I bet on the home team, draw and away team a the same time?
Concatenating arrays in MATLAB is slow. MATLAB arrays can't actually be resized, what you are really doing is copying the array from one segment of memory to a new, larger segment of memory somewhere else in your RAM. This is a very slow operation, so you want to avoid it whenever possible. So when others say you should pre-allocate your arrays, that is why.
Well, if you can calculate the momentum directly, you should be able to use either PDE solver www.mathworks.com/products/pde/ or maybe even as a linear least-squares problem www.mathworks.com/help/optim/linear-least-squares.html If you can't do it directly, but need to iteratively tune, then you will probably need something from the optimization toolbox www.mathworks.com/products/optimization/ Maybe I can help you more if you show your equations.
Yes exactly. A coupon could look like [x2; 1; 1x2] so in the first game I bet for draw and away, 2nd game is home team, and the last game is for home/draw and away. So the possible combinations for a coupon as a whole is 343 different filled in coupons. But I havent found a good way to loop all these "coupon" combinations. Hopefully my text makes some sense. 
Sorry, I was thinking in the completely wrong direction. I thought you just wanted to solve the equations, not to tune your controller. I just realized what you wanted when I saw your reply to isleepbad. Check this tutorial if it helps: www.mathworks.com/help/control/getstart/root-locus-design.html and www.mathworks.com/help/control/ref/pidtune.html 
Ah. Well the easiest way is to use the optimization toolbox. There is a function called 'fmincon' that uses the gradient descent algorithm and works wonders. You don't even need to linearize your equation.
If you are dealing with string... Make sure you are using a cell array (Google the syntax). Otherwise, make sure you cast to a number... `X=str2num(x);`
What embedded languages did you use? I like that Simulink will autocode reasonable C code from a given diagram. On the other hand, I really hate designing algorithms visually. Too often I'll open up a diagram and see wires and boxes everywhere, and it takes me a non-insignificant amount of time to mentally parse it, usually something simple like cross product or quadratic formula. The visual language also makes source control and standard diffing tools almost entirely worthless. I much prefer writing code. Easier to understand. Easier to review. Easier to test and debug. Easier to version control. And given all these (to me) advantages and simulink's continued popularity, I wonder whether it's a matter of visual languages being great, or all textual languages for embedded systems being tedious. Maybe I'm just an oddball guidance and nav engineer.
I appreciate and respect your response. I'm always happy to hear perspectives on simulink pros and cons!
You're clearing the command line then clearing the workspace. Then you're creating a bunch of variables like n. For example n is a vector of numbers ranging from -10 to 39 in fifty steps. Then you use the stem command to plot the data. Start reading the documentation from the beginning. The first few chapters cover the basics. Then jump to the entries for linspace and stem. Also put four spaces before lines of code. (Or indent it with tab once more in the editor) Like this: Line 1 Line 2 Indented line Last line
like this? plot(mod(0:100,10))
Didn't actually test the following, but you get the drift: for i=1:size(matData,1) fprintf('%10d %7d %14d %9d\n', matData(i,1), matData(i,2), matData(i,3), matData(i,4) ) end
Consider http://www.mathworks.com/help/matlab/ref/table.html
Have you looked at LaTeXiT? That will give you equations as jpeg images you can drop in to any file type. It wouldn't be my favourite choice but it might work for what you are trying to do. Just be sure to set the resolution to a high enough dpi that you don't get pixelation (300 dpi is usually good for print). *you havin' file problems I feel bad for you son, I got 99 problems but MS Word a'int one*
Table's `disp` function is nice. If you need the text returned (e.g., for wiring to a file or including in an error/warming), rather than simply printed to the command line, it gets a little more complicated--but not much. A quick hack is to wrap a call to `disp` in `evalc`; a better hack would be to modify `table/disp` to return the string if an output argument is requested, or to write a `sprintf`-like function that essentially does the same thing as `disp` but with an output and without being specific to the size of the command line. But, for quick and dirty: `evalc('disp(tab)')` usually works okay. 
&gt; …but I wouldn't have a problem if i could handle Latex in windows natively. You can install LaTeX on windows... You could maybe use [pandoc](http://pandoc.org) to convert the LaTeX equation to docx, but I don't know how robust it is.
Wow. TIL!
It's worth noting that the `printf` family of functions (e.g., sprintf, fprintf, sprintfc, etc.) doesn't generally require looping, since all are vectorized--though passing the arguments can get a little complicated. For this case, you'd simply need to concatenate the columns into a single matrix, then transpose it to print in the proper order: fprintf('%10d %7d %14d %9d\n', matData.'); This works because `printf` functions pull the next available value-in this case, the next value in the array (going down each column, in the order you would get if you simple called `matData(:)`) to satisfy each format specifier. As long as the number of format specifiers match the number of rows (which, after transposing `matData`, is true), each iteration of the printf function consumes one column before moving to the next. This can also be used as a handy trick for printing cell arrays--though you have to remember to shape the cell array properly (including any transpose) before calling the printf function, since you have to use the {:} notation because the printf functions are not defined for cell input. For this case, it's also possible to dynamically create the format string: Since all of your data is numeric and integer (not necessarily integer class, but integer values), you can use: colwidth = max(floor(log10(max(column)))+1, length(columnName)) to determine the width of the column (or, to further simplify, since you know that it's very likely scores for basketball games will not exceed 3-digits--so your column names will almost always be longer--you can use: `colwidth = max(length(columnName),3);`). Then, construct the format string: format = sprintf('%%%dd %%%dd %%%dd %%%dd\\n', allcolwidths); Finally, use the constructed format to print the values: fprintf(format,[GameNumber, KUScore, OtherTeamScore, ScoreDiff].'); Or, more generally (though I haven't done extensive testing on this to make sure it works in all cases): function string = printstring(varargin) % Get the names: names = cell(1,nargin); for n = 1:nargin, names{n} = inputname(n); end; % Check number of elements (all vars will be treated as columns, so % we don't care about the actual size--just numel): sz = cellfun('prodofsize',varargin); if ~all(sz == 1 | sz == max(sz)) error('Incompatible sizes: all inputs must be same number of elements or scalar.'); end varargin(sz==1 &amp; sz &lt; max(sz)) = cellfun(@(x) repmat(x,max(sz),1),varargin(sz==1 &amp; sz &lt; max(sz)),'un',false); % Make sure all arguments are columns: varargin = cellfun(@(x) x(:), varargin, 'un', false); % Test that arguments contain printable types: colIsNumeric = cellfun(@isnumeric, varargin); colIsChar = cellfun(@(x) ischar(x) || iscellstr(x), varargin); if ~all(colIsNumeric | colIsChar) error('Columns must each be basic types to print.'); end colwidth = cellfun(@length,names); colspec = cell(1,nargin); % Column widths must be caluclated seperately for integer, float % and char columns: colIsNum = cellfun(@isnumeric,varargin); % Test for integer: not just int classes, but also double/single % classes that only contain integer values: colIsInt = false(size(colIsNum)); colIsInt(colIsNum) = (cellfun(@isinteger,varargin(colIsNum)) ... | cellfun(@(x) all(abs(round(x)-x)&lt;=eps(x)),varargin(colIsNum))); % For the integer classes, simply use floor(log10(x))+1 to determine number % of digits (use of "floor(...)+1" ensures that powers of ten % display the correct number of digits): colwidth(colIsInt) = max(cellfun(@(x) floor(log10(max(x))), varargin(colIsInt)),colwidth(colIsInt)); colspec(colIsInt) = {'%%%dd'}; % For the non-integer numeric classes, we have to remember to % include the decimal point--but, more importantly, we have to % decide where to cut off the precision: test = [varargin{colIsNum &amp; ~colIsInt}]; digits = zeros(1,sum(colIsNum &amp; ~colIsInt)); while any(any(abs(test-round(test))&gt;eps(test))) digits = digits + any(abs(test-round(test))&gt;eps(test)*2); % Empirically, slight buffer needed test = test*10; end % That takes care of the right side, including the decimal; get the % left side of the decimal via log10: digits = digits + floor(log10(max([varargin{colIsNum &amp; ~colIsInt}])))+1; colwidth(colIsNum &amp; ~colIsInt) = max(digits,colwidth(colIsNum &amp; ~colIsInt)); colspec(colIsNum &amp; ~colIsInt) = sprintfc('%%%%%%d.%df',digits-2); % Last but not least, take care of character/cellstr columns: if any(colIsChar) varargin(colIsChar) = cellfun(@cellstr,varargin(colIsChar),'un',false); colwidth(colIsChar) = max(cellfun(@(x) max(cellfun('size',x,2)),... varargin(colIsChar)),colwidth(colIsChar)); colspec(colIsChar) = {'%%%ds'}; end % Add one to each colwidth for spacing between the columns: colwidth = colwidth+4; % Now, print: Still need to handle pure numeric data differently % from mixed numeric/char: if any(colIsChar) varargin(~colIsChar) = cellfun(@num2cell,varargin(~colIsChar),'un',false); c = [varargin{:}].'; string = [sprintf([sprintf(repmat('%%%ds',1,nargin),colwidth),'\n'],names{:}),... sprintf([sprintf([colspec{:}],colwidth),'\n'],c{:})]; else string = [sprintf([sprintf(repmat('%%%ds',1,nargin),colwidth),'\n'],names{:}),... sprintf([sprintf([colspec{:}],colwidth),'\n'],[varargin{:}].')]; end if ~nargout, disp(string); end end To test the above code, I used the following: GameNumber = (1:17)'; KUScore = [85;109;69;40;87;76;82;61;71;75;76;56;86;67;81;85;75;]; Otherteamscore = [53;56;59;72;60;60;67;56;65;70;61;55;54;57;86;78;62;]; ScoreDiff = abs(KUScore-Otherteamscore); GameName = sprintfc('Game_%d',GameNumber); Percent = KUScore./Otherteamscore; FixedDecimal = cumsum(zeros(size(KUScore))+1.1); Hundredths = cumsum(zeros(size(KUScore))+1.01); Letter = ('A':char('A'+16))'; Short = sprintfc('LongColumn%d',(1:17).'); prettyprint(GameName,Percent,FixedDecimal,'A',Hundredths,{'Hello'},GameName,KUScore,ScoreDiff,Letter,Short, 1); This demonstrates that it works as intended on numeric, char and cellstr array of equal number of elements or scalars, and that it appropriately leaves column names blank when an expression (rather than a variable) is passed to the function. This pretty closely mimics what `table` does for handling input arguments, iirc. 
Thanks! 
It works for me. Well for 10 degree increments it should be x=0:10:90; and 20 degree increments should be x=0:20:90;
I tried doing 0:20:80 and it still didn't work for me. Thank you anyways though!
Your question doesn't make any sense. What are you trying to say?
I believe you confuse the x array, with the ticks of x axis at the plot. To see the increment and the values of x array, just enter x and press enter. You'll see that x = 0 20 40 60 80 (doesn't matter if you wrote x=0:20:90 or x=0:20:980 because 90 doesn't divide totally with 20). Also, you can enter y=sind(x), to get a value y for each value of x. Then you can edit the plot for the axes. 
Sorry if my question was vague but this works perfectly!
I want to be able to extract a *'curve'* from the desired data set. This would start off as a very high degree polynomial or super long power series. Once I have the equation for this *'ideal curve'*, I would like to make the *data I have* to fit this curve somehow. So if I have two sets of equations... eq1 for ideal curve and eq2 for actual curve I would then like to apply some sort of multiplicative factors to eq2 to be as close to eq1 as possible... eq2 = {X} * eq1
Thank you!
In general, if memory is not an issue, I would split y to y1, y2 and y3. Just to prevent some typos and misplaced parenthesis 
I will let you figure it out from here, but to do a 1D grid of `-3&lt;=x&lt;=3`, you may try something like (and there are many ways): x = linspace(-3,3,100); Now, you can read up on `meshgrid` for how to turn one (or two) 1D grids into a mesh.
Try polyfit ? Basically use linear regression until you get the function type/polynomial order you need. Then run your data through that function to get its ideal form.
Show us the input to get this error?
There's no input. This is the entire file, and nowhere am I trying to use actual numbers on it.
Are you trying to run the function file directly? You need to call it from a script or the command window. Put this in the command window, it'll give you a result. &gt; [y] = cubic_evalu(1,2,3,4,5)
Ah brilliant, thanks!
You can't call sub functions from the command line Truman. ex5 is the only function you can call.
Figured it out, thanks yall
Matlab doesn't compile. It just runs. 
Along with what others have said, there's a way to debug functions you are working on using the usual run command that you use with scripts. If you look at the run button in the toolbar, there should be a small arrow to the right that allows you to create a script that runs the function. There you can initialize some variables to use as input arguments to the function so that it runs properly. Then you can use cmd-r (or whatever the shortcut on your OS) to run the function without trouble. This is useful to keep from having to go back and forth when you keep the script window and main window on separate screens. 
Basically just said "Error line 3" and repeated what I had coded on line 3.
No. It said something else maybe "inner matrix dimensions must match", or "no function 'f' exists for inputs of class 'double'", or something like that. Errors *always* have a reason. It is impossible to have an error for no reason. 
Try: axis equal tight
That was so simple ! I love you (I really do). 
If C is the cell, C(end,:) should give you that
Since you won't believe me, I ran the program again. &gt;Error in Exercise5 (line 3) y1 = f(x,-1); % compute the solution with C = -1
Honestly, not too sure, this is my first time using MATLAB, and I just followed a step by step video on how to do this exact problem, and it didn't work. I was able to get it running by changing 'f' to '(' though.
Did you have a question? Or did you just feel like sharing your homework?
OP did not specify that the script should not call a function ;)
Hi! I've tried this, but I'm struggling to plot the values... When I plot them, they come out as straight lines. Here is my m file: https://gist.github.com/Mierzen/cb1731f82fc6569ba3be Lines 1, 32-35 and 265 are where I tried to export the "normal" variables.
I'm not exactly clear on the description you gave, but it sounds like you want to use ismember(). 
First of all, if you're pasting code, please prepend all lines with 4 white spaces so that it formats nicely like this Anyway, You can easily cut out those `i,j` loops by using an index-array. Something like: Life(all([LS(:)&lt;=1 LS(:)&gt;4],2)) = 0; **edit**: Oh, and put the `LS` into the `k` loop so it updates each time.... (I didn't test it but you get the point)
If the rows are the levels, then something like block1 = block1(randperm(size(block1, 1)), :)
Try this: block1(:) = block1(randperm(numel(block1)))
I don't have Matlab in front of me, but it doesn't make sense at all that the number of elements would change. Either you've done some intermediate step that modified the matrix, or you've made a transcription error. Let's unfold this statement. After you first initialize block1, it should be a 10x3 matrix size(block1, 1) should return 10 randperm(10) should give you a 1x10 vector, so block1(randperm(10), :) should give you a 10x3 matrix. Try the following: n = size(block1, 1); iPerm = randperm(n); block1Shuffled = block1(iPerm, :) 
What the heck is A/C. Don't you mean inv(A)*C
I'm really new to Matlab, and looking at a classmate's code I saw A/C to divide the matrices for the determinant. Why so rude?
:( sorry you're right that was rude. Keep asking questions!
There are two rules related to this you need to keep in mind for MATLAB functions: 1. Only the first function in a `.m` file is visible outside that function. In other words, only the first function can be called from the command line or other functions. All other functions can only be used within that `.m` file. 2. The name of the first function is the name of the *file* not the name of the function. So if you have a file named `foo.m`, and the first function is defined as `function a=bar(b)`, you call that function using `foo(x)`, not `bar(x)`. So you can conceivably name the first function anything, but for your future sanity you should always call it the same thing as the file name. This rule applies both to function calls inside the file, in the command line, and in other files.
Is there some logic or pattern to the 55 files you need to read? Try using that and make a cell array with the names. Textread is a good function for this task, you can check that out.
Thank you, really appreciate the help! I tried the code and i don't understand one thing, it lists the values into 17814 columns, which makes sense because I have 17814 values in my .txt file. http://imgur.com/7zbOgWZ,m8a7yZQ#1 However it only produces 4 rows which confuses me. I compared the values of the **1st column 1st row**, with my **file #1** and the values of the **1st column, 4th row**, with my **file #4** and it shows that the only files it got the values from are the 1st 2nd 3rd and 4th files in the 55 file array. (I did not bother seeing 2nd and third file as i assumed the middle values were from those) http://imgur.com/V48xmZs,0fEZX2q - **rows** http://imgur.com/V48xmZs,0fEZX2q#1 -**value of file1 and file4** There is an error message though that is produced after i ran this code, maybe that's the reason it didn't produce the result for the rest of the 51 files? http://imgur.com/7zbOgWZ,m8a7yZQ I am not sure where the loop is going wrong, this is the error, &gt;Error using dlmread (line 139) &gt;Mismatch between file and format string. &gt;Trouble reading number from file (row 46u, field 2u) ==&gt; null\n 
I see your question was answered. But in the future, please indent all code by four spaces like this and this is indented so that it appears as code
Just for a bit of clarity, `A\C` is amazingly powerful and optimized. However, it can also ^(possibly) get you in trouble. If `A` is square, it will invert (I think in a sped-up way but not sure). If the system is over-determined, it will give you a least-square residual solution. If A is under-determined, it will give you an answer that has some sparsity but its exact algorithm is unclear. So, there is nothing wrong with using it, but know that it won't return an error if you give non-square and you think it is. (this can also be a useful part of it)
I'm not really sure what your question is mainly since you are super close to having it finished. You've already determined the cells that are going to die (check jwink3101's comment on removing your i and j loop). The only thing you need to do (as far as I'm aware) is determining which cells are going to be born (which can be done in a similar way as you've done before).
Sorry for the late reply, was commuting to home. I tried usnig this snippet of code and it states there is an error. &gt;Error using dlmread (line 139) &gt;Mismatch between file and format string. &gt;Trouble reading number from file (row 46u, field 2u) ==&gt; null\n This is the same error as before, however when I choose the 7th row, it reads the values. &gt;test = dlmread(filename{7},'\t',2,1) There is a problem with this file particularly then? I checked inside this file and did not find anything different compared to other files. Now it's just confusing what may be causing the problem. 
This worked thanks!
We will not do your homework for you. If you tell us what you have tried and what has caused you trouble, we can help you understand the concepts. 
I understand! The main thing I am having a problem with is turning the 6 digit user input into a vector. I haven't been able to find any help on this subject situation.
Good work with the input command. There are a couple ways you could approach the next part. Here's what I would do Easiest, use this example I found while searching the web: x=953 y=num2str(x) out=str2num(y(1)) It converts the number to a string, then you can tell it which digit of the string to select, then convert back to a number. You'll have to integrate this into a for loop. A for loop is an integral part of any programming, and is basically a loop that runs from top to bottom, then repeats a given number of times, which is prescribed by the indices of the loop. So, you basically want to run those few little lines 6 times, grabbing the next digit each time it runs, and writing it to an array. Your code will look like this: rowvec = []; % initialize an empy matrix for i = 1:6 % this means the indices will go from 1 to 6 % put the lines here from above, but in the part where it uses y(1) you will want to use y(i) so that you use the number of the current loop % save your number that you grabbed to the next line in your row vector. Hint: you will use the index again to identify the row number end % this closes your loop PS. % is a comment, meaning that MATLAB will not interpret anything after the %, making it good for notes and whatnot.
First of all,while your program doesn't seem to ask for it, you should consider validating the input and returning an error if not valid. You could then ask again (use a `while` loop) or just exit (use `error`) Now, as others have said, we won't do your homework for you so I will leave it up to you to figure out how turn it into a vector but I can try to give you a push. Actually, I see a few ways to do it. The first one would be to turn it into a string (I'll let you figure out how) then parse that string into digits one element at a time (again, it's on you to figure out the command). Actually, it may already *be* a string from the input. I forget how it looks. Another option (and a harder one) is, after you (maybe) parse your input into a single integer number, you could divide by the 10^n then use `floor()`. I hope this helps a little but not too much. 
Since xy is a string there's some ambiguity regarding how a user would input data. They might forget commas or your colons in your example. One solution is to have six text fields in a 3x2 array for each vertex. Another, perhaps more troublesome method is to parse the xy string with a regular expression. Since you're new you might enjoy running this example: edit([docroot '/techdoc/ref/examples/draw_lines']);
Use this guide http://blogs.mathworks.com/videos/2009/11/06/basics-volume-visualization-39-display-of-scatter3-and-slice-plots/
You could solve it by hand using g the standard second order form. To just use matlab check out: help sisotool 
Thank you so much! This honestly helps a ton! I'll post back here with my final product once I get it all written up :D Cheers!
Good luck! Let me know if you run into any problems or have any questions.
Just use `scatter3` for each xyz, and call `drawnow` in a for loop that iterates over the time. If the time is not uniform, first sort it, then use `wait` to stall before using the `drawnow`. ■ I'm on mobile so I don't really want to type out code, let me know if that's clear.
He said he want to "animate it", slice won't help him here unless the device is moving in a uniform direction over time...
Thank you. I'm looking over those functions and I think that makes sense.
Yeah if I figure out a way I'll definitely comment back on this post!
If you just plot over and over it will effectually slow down and our crash. Better to set(xdata) or whatever that command is. I'm on mobile, but I can look it up for you if you need help figuring it out 
As /u/orad suggested, setting the data properties is more efficient for updating plot objects than replotting (particularly for large arrays). You can easily update the x, y and z-data properties for the line/plot3/scatter object you initialize as the first point, via: h = % some plot command % set(h, 'xdata', newXPoint, 'ydata', newYPoint, 'zdata', newZPoint); For even better performance (according to [this](http://undocumentedmatlab.com/blog/performance-accessing-handle-properties) article, anyways; I found minimal performance difference in the performance testing I ran, which might be due to something with my setup or the fact that I'm using a newer version of Matlab than referenced in the article), wrap the numeric handle (which is returned by the plot3/scatter/line command) in the `handle()` function and access the properties as you would a structure. For example: hline = handle(line(x(1),y(1),z(1),'Marker','*')); htext = handle(text(32,-8.4,-44,sprintf('X: %8.4f\nY: %8.4f\nZ: %8.4f\nTime:%3.1f',... x(1),y(1),z(1),t(1)))); tic; while toc &lt; t(end) thisTime = toc; [~,idx] = max(t(thisTime &lt;= t)); hline.XData = x(idx); hline.YData = y(idx); hline.ZData = z(idx); htext.String = sprintf('X: %8.4f\nY: %8.4f\nZ: %8.4f\nTime:%3.1f',x(idx),y(idx),z(idx),round(thisTime*10)/10); drawnow(); end I added text showing the current values to make it obvious that the updating was correct; it's not a necessary part of the code. As written, this will appear to create a 2-d plot, since that's the default view for `line`; however, rotating the camera will show that the plot is actually 3-d. Using a `while` loop and `toc` is, I think, a better way of controlling the time between updates, even though it causes the update functions to fire much more than necessary (though you could easily limit this by checking to see if the updated index changes, only executing the body of the loop if it did), because functions like `pause` don't take into account the computational overhead--if you use `pause(t(idx))` (or, rather, use `delta = diff(t); pause(delta(idx))`), you'll always end up with a slightly longer pause and total run time than would be expected from adding all the time deltas. For small arrays or ones where the calculations for updates are computationally simple, it doesn't make much of a difference, though. Note that using the `handle` wrapper makes even more sense if you want to include a tail on the data (i.e., plot the most recent N data points, rather than only the current point)--simply allocate xdata, ydata and zdata for the full size of the tail with `nan` and fill in the array with indexing on both sides of the equation as you go (NaNs aren't plotted, so NaN in any of the data arrays effectively hides that point). Also: Remember to manually set the x, y and z lims on the axes and/or change the tickmodes to manual--else, the axes may resize itself during the playback, and performance will suffer (if performance is critical, manually set as many of the axes and graphics object properties as you can reasonably manage; there can be significant overhead when Matlab recalculates the automatic values each time the data changes). 
Then t he most important thing to keep in mind is to use a method that you yourself would understand and explain to someone else. It often happens that someone changes their (working) code to something else "because [insert random name here] said it was better". But if you don't understand it yourself (or can't recreate it) then it isn't really of any use. 
Luckily that's easily solved :). Did you get the rest working? (I love the game of life :D it's a super fun programming exercise).
Personally I learn best through studying examples. e.g, using a solution manual in calculus... The OP can choose to copy blindly, and do a disservice **to himself**, and suffer the consequences. Or he can choose to study a solution. Saying I am doing a disservice to "the OP and sub" is like saying using a solution manual is cheating in class and does not help students. He's in university now, he can take responsibility for his own behavior and decisions. Putting that on me for trying to help is childish. ______________________ If he studies this short function, he can learn the structure of a function, the nature of the returns and when they happen, and maybe how to use recursion. Writing the function down is much less work then me helping him with the concepts one by one. If he chooses to just copy then he will only hurt himself. As humans, we learn and remember concepts *better* through example then studying People should take their education *into their own hands*, and shifting the blame to others (especially when they try and help) *on the off chance he might act against his own interest* and just copy blindly, is a very bad attitude. 
Check out my [Saturn Fiddle](https://saturnapi.com/fullstack/horners-method) for code you can run to get started. You can test code there also ask for help. People here seem harsh. Good luck % Welcome to SaturnAPI! % Start collaborating with MATLAB-Octave fiddles and accomplish more. % Start your script below these comments. function [y b] = horner(a,x) % Input a is the polynomial coefficient vector, x the value to be evaluated at. % The output y is the evaluated polynomial and b the divided coefficient vector. b(1) = a(1); for i = 2:length(a) b(i) = a(i)+x*b(i-1); end y = b(length(a)); b = b(1:length(b)-1); end horner(1,1) 
I wouldn't use `dlmread`... I would try `textscan`. 1. create a file pointer. 2. skip your two headers with `fgetl`... 3. read in the rest of the numbers with `%f` deliminated by a tab `\t` (skip the name columns with `%*s`); 4. close the file. _________ %% 1 fid = fopen('filename.txt'); %% 2 fgetl(fid);fgetl(fid); %% 3 data_column = textscan(fid,'%*s\t%f'); %% 4 fclose(fid); works like a charm... now just loop through each file name and add each `data_column{1}` to a matrix. 
First off, I realized an error in my example... it should be: function Y = horner(a,x,n) if n==0 Y=0; return end Y=a(n)*x.^(n-1) + horner(a,x,n-1); end Because `a(0)` will through an "Index out of bounds" error. and if `x` is a vector, you have to do an elementwise operation... (google 'matlab elementwise') _____________________________________ Well what I posted is a **function**, [see here for how to write and use a function](http://www.mathworks.com/help/matlab/ref/function.html). I cant be sure what you are doing without seeing the full code or error msg. But I will guess that you are trying to run what you posted in the comment. To use a function, save the file in the same folder as your script (google 'matlab script vs function' if its not clear to you) with the same file name as the function... in your case `Horner.m`. So save just: function f = Horner(a,x,n) if n==0 f=0; return end f=a(n)*x.^(n-1) + Horner(a,x,n-1); end As `Horner.m` Next open a new script (save it in the same folder as your function, but the name doesn't matter) and write just the a=[1,-4,6,-4,1]; x=linspace(1,-1,100); n=length(a); % Then call the function y = Horner(a,x,n) Run that. This "calls" the `Horner.m` function.
http://imgur.com/gallery/US4DjEo/new
Hi Dan, please read my comment again from the beginning and try again.
So my x is a vector which creates 100 points from -1 to 1 as I understand it. So how do I seperate that elementwise? Googling the question brought up matrix operations but what do I want? I'm guessing you somehow want to single out each point to run?
Cool story. We don't do people's homework here. When you do, you encourage more lazy questions which amount to "do my homework for me." This is bad for the sub. It's unlikely that OP actually studied your answer and learned much. Even if he did, he might have learned how your example works; but did he learn how you arrived at the programming decisions you made? Does he understand other ways he could have done this? Dud he learn how to explore the documentation? No. Given that he wasn't even motivated to read the documentation on his own before asking his question, it's very unlike he even did that much with your reply. He simply copied and pasted, essentially cheating with your assistance. 
Take it up with the mods...
Like the error suggested, and the way I wrote it in my answer... you want to change ^ To .^ The . Before an operator tells the program to do the operation element wise, instead of matrix multiplication which is what Matlab was designed for.
New error Message **Attempted to access a(0); index must be a positive integer or logical.** Followed by **Error in Horner (line 11) f=a(n)*x.^n-1 + Horner(a,x,n-1);** 6 times. 
Really???? All they did was copy and paste straight from the Wikipedia page for Horner's Method.
that star beside your file name (`Horner.m*`) in the top tab means you did not save the changes you've made... try saving and run again. because everything looks good to me
Np. Stick with matlab and keep posting to the sub... It can be a bit hostile with the down votes but ignore that noise. You'll be suprised how good of a programmer matlab can make you fast.
Okay so I have made some progress with your help however I'm running into a frustrating stump. My code so far looks like this: userinput = input('Please enter a 6-digit positive integer '); %assume they enter 654321 for i = 1:6 x=userinput; y=num2str(x); out=str2num(y(i)); vec(i,:) = out end The output is mat = [6;5;4;3;2;1] So basically I've turned the output into a 6x1 array rather than a 1x6 vector :P I know the solution to this has to be right in front of me but I can't seem to figure it out! 
Have to agree with @Cynda on this one. The OP didn't even get the complete answer. Just something to get started. Plus, you can see the OP is trying to learn, not just copy.
Although I agree with you that we should not do peoples homework, I don't think helping him with this one function that is readily available on the wiki page (only in a longer form) constitutes doing his homework... *BUT God, I hate when people say* &gt; cool story bro (when its not meant as a joke) It is so dismissive, especially when /u/CyndaquilTurd made valid points about offering a small amount of guidance with a solutions.
Here are a couple graphs based on the algorithm... * [Fig 1](http://i.imgur.com/3N3dCRc.png) : This figure is showing the 'HOT SCORE' per upvote with a fixed post date and a fixed number of down votes. * [Fig 2](http://i.imgur.com/8zsMFCf.png) : This figure is showing the 'HOT SCORE' decay trend over a 24 hour period with fixed vote tallies. (let me know if you guys find any bugs - or interesting conclusions)
Interesting. How did you find/create the algorithm?
Matlab is actually pretty fast at updating graphics objects; it can be slow at creating then and automatically updating loads of properties, but you can get around that by setting property modes to manual and avoiding object creation during GUI execution. Depending on what aesthetics OP wants, a text uicontrol or a text object on an axes would work. For example: htext = uicontrol('style', 'text', 'string', '30.00'); tic; while toc &lt;= 30 set(htext, 'string', num2str(30-toc, '%5.2f'); end You could also wrap the htext handle with the `handle` function and set the property via dot notation for a potential slight performance increase. The code gets slightly more complicated if you want to display a different time format (hms, for example), but not much. Edit: changed the code to match OP's original request for countdown from 30 seconds.
Matlab works in pairs of (row,column). So with your line vec(i,:), you're writing a new row to your matrix each loop. If you want to write a new column, swap to vec(:,i). Since you only need one row, I would use vec(1,i). Even though you called it vec, it's still an mXn array, just with m=1. Or you could use the "transpose" function. Good work so far!
Thank you so much! that solved that issue :D Now on to the rest of the problem.
The code for reddit is open source, available on [github](https://github.com/reddit/reddit). I rewrote the original PostgreSQL in matlab code.
Explanation here: https://en.wikibooks.org/wiki/Control_Systems/Poles_and_Zeros#Second-Order_Systems Example here: https://en.wikibooks.org/wiki/Control_Systems/Examples/Second_Order_Systems It has almost the exact same form as your equation. Your form is G_open = 1 / (6.81 s^2 - 77.6) = 0.1468/(s^2 - 11.4) G_pd = (Kp + Kd*s) Gclosed = 0.1468*(Kp + Kd*s)/(s^2 +Kd*s [Kp- 11.4]) So clearly your w^2 = Kp- 11.4 And your damping zeta = Kd/(2*w) Your poles are located at [p = -z*w(+/-) j*w *sqrt(1-z^2 )](http://www.electrical4u.com/electrical/control-system-equations/second-order-control-system-15.gif) Choose a damping constant like z=0.8 for example. Substitute the w and Kd terms in the equation in p. Adjust Kp until your system is stable. Use /u/mindbodyandtroll 's equation to plot in matlab. Repeat until stable.
Dang it! I finished my code and submitted it before I checked back here :P that would have been a lot cleaner than what I put together. I just took the Vector I made and took the sqrt of each number then added them all together opposed to doing another loop :P but if you want to check out the final product it's here http://pastebin.com/0WWAtXbB Thanks again so much! You were a big help honestly :)
Kp of 60 is way too high. Try one around 15 or less :) &gt;how do i get Kd from w? :/:/ From my post above.... &gt; zeta = Kd/(2*w) 
Zeta is the damping term. If you look back in all of the equations I posted, you can see the term pops up a few times. Z = 1 is critical damping Z&lt;1 is under damped Z&gt;1 is over damped Review the second order equations again. They take on the form s^2 +2zw*s+w^2 So it's clear how the second term matches with your equation Kd = 2*z*w. I made zeta = 1 simply to make the math simple. You could easily adjust it to another value such as 0.7 or 0.8 as to get a better response from your system. Please read the wikibooks section on second order systems. It contains all the answers to your questions.
As usual, this sub doesn't do your homework for you. Especially if you just slap the entire assignment into here. What people will do, is to push you into the right direction on specific problems that you might have. So I suggest you show what you have done already and where exactly you have a problem and I'm sure people will help you out.
&gt;Maybe this can be done as separate functions, but the goal is to have one unified code to implement all these rules. It should never be a goal to implement in one monolithic script/function what could be cleanly separated into small functions with smaller, independent responsibilities.
[toeplitz](http://www.mathworks.com/help/matlab/ref/toeplitz.html) would be helpful for this, unless you can't use built in functions, in which case it's still not that hard.
...
God. The stereotype is real lollllll
hahaha this is gold!
Thank you for your reply. I agree that to practice Matlab in general, this would be a good exercise as you learn. But this is a specific-driven task that only calls for these requirements, so maybe learning all the ins-and-outs that proper learning experience provides is redundant at this stage. If anything, it will encourage the proper learning experience. I am sure it is a few lines of code from your stand-point, but as always in programming (and mathematics), theres many ways to do the same task and I can't afford to learn it all to apply the best variation at this stage with what I am capable of. Hopefully I will get there if this specific task is successful for current needs. Also, from my limited experience in programming, I have found seeing and following/understanding others codes is more instrumental than going to the manuals.
Well I'm trying to construct all possible combinations of 0 and 1's in an NxN matrix, with 0's in the diagonals and sum of each and every row &lt;5. I think this may be a few if statements but I'm having troubles piecing it together.
Bloody hell, I didn't really realize that you could use set to just update the thing you want (even though it's so incredibly logical...). Just found this comparible answer on stackoverflow: [link](http://stackoverflow.com/questions/13102654/how-should-i-update-the-data-of-a-plot-in-matlab). Apparently using set is about 100x faster than updating the entire thing... 
MARKLEY!!!! YES, I loved frosh year there. The furnature and telephone on the wall took me back. Good memories. In '09 you must have been starting when I was finishing up. Go Blue!
I am trying to construct all possible matrices in combinatorial fashion. So essentially, off the top of my head, this may work as well: [0 1 0 1 1 0 1 0 1 1 0 1 1 0 1 0] Anyway, may I PM you with explicit questions?
If you want to learn or teach MATLAB this is great advice. People should be answering question to help people learn, not show off. 
Go blue!
You are correct with 4x4 matrices with 0 on a diagonal, sum of rows would never be greater than 4. But its more for general purpose for NxN matrix where N&gt;=6. 
Yep. Just to note, though--the stack overflow answer did not look at the `handle` method I suggested, which seems to be at least as fast as using `set`. 
If only Matlab had a function to keep away the swarms of ladies I imagine were trying to break through the door! 
Also, give the post a meaningful title. Titles like 'Homework question' or 'I'm really stuck' have no value. Condense the issue you're having, or even just the context of the problem, into a line and use that as the title. Oh, and if you post code, make sure that you post the absolute minimum amount that you need to to get your point across. The snippet should run on its own, but it's a massive waste of everyone's time to seek through lines and lines of unnecessary code to find a simple problem. 
Wow, just wow. What waffle. 
&gt; But its more for general purpose for NxN matrix where N&gt;=6. Are you sure? By [my computation](http://mathurl.com/ow9d5uw), for N=6 there are almost 900 million such matrices (already satisfying constraints). Writing them out all in ASCII would take around 30 gigabytes of disk space.
Sent [this message](http://i.imgur.com/jCLASFJ.png) to the mods yesterday
Top quality.
Have they fixed the way the new graphics engine tessellates the crap out of contourf plots saved as eps? Not only does it massively inflate the file size, it affects performance in PDF viewers and looks like crap. Also the awful ribbon interface since 2013 is just the worst. 
YES, MinGW. Now I want to know how Linux and OS X support are doing.
I do a lot of experimental fluid mechanics, mostly PIV, and flooded contour plots are a staple of presenting such data. This change is much like the horrible mess TecPlot makes of vector graphics. Last I looked they claimed it was a bug but I've get to try 2015b to see if this is the case. For me the only solution is to use an older version.
I agree on the ribbon interface. It is gigantic and cluttered. I've been using it since 2013b, and I still have a hard time finding some commands. The new high dpi "improvements" make it even larger, and all the icons are too large, so they appear blurry. 
Some people would disagree with this, but i prefer not to use breakpoints at all... When I'm debugging, I just throw in a `return` after the line i want to break on. Its always worked for me.
&gt;That's not really indicative of compiling. That is exactly what compiling is... The program (matlab) takes all the written syntax; function, if statements, variable names, etc... and converts/compiles ALL of it to computer code BEFORE it tries to run even a single line. If there is a syntax error, it will not be able to compile the file. If its just a logic error the compiler will have no problem but the code will throw a run-time error. I think you may be confused since unlike C or Fortran, matlab does not create a stand alone file, and recompiles code on each run. (unless you publish it)
Not using 2015 yet, but are you sure your function isn't leaving the interpreter in some unusual state? I've seen this happen if it's left in some sort of wait state. I'm not sure what your function does, but maybe try hitting ctrl-c and see if it kills something. 
Yes. No.
I'm one of those people. That's insane, but I suppose whatever works for you!
If it's a function you lose track of the local variables values as soon as it hits return. That's one of the problems I was having whilst using return. If you're breakpointing you can step and see how local (and out of scope 'global') variables change with each step.
I've generally found that my research codebase is overall notable faster 20-30%. Especially in some places were I had small function calls. Some places were I was essentially forced to made a ton of function call seeing more like 2x 3x speedup. 
Unless there's a compelling reason to upgrade (new feature you need), I would wait for the 2015b version.
I have a problem with people asking for homework help, but only because I want this sub to be more like /r/python, full of interesting news, advances, tips, and shared code. This is probably due to their policy: &gt; **If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead.** Either their needs to be a similar sub (e.g. /r/learnmatlab) for homework question posts, or another matlab sub for everything but homework questions (e.g. /r/matlab_octave). 
Thanks, I got it figured out. Nice to know I wasn't too far off. 
&gt; whilst they are in scope within the function. Could you explain what you mean by that? 
If you like using "return" see what happens when you insert the word "keyboard" 
Thanks, but I want it in Matlab, but cant get it to do so. [I'm making my own version now](http://imgur.com/Ve13uD3). but because it has been ~10 years since I used Matlab (in uni). My skills (and the code I wrote) suck big time hehehe. But it's nice to find out how it works again.
I'm not sure, but it seems like a bug to increment n both inside the if statement and immediately afterwards. Wouldn't this skip 3, after detecting that 2 is prime? 
It's a shame you can't use the primes function... while numel(pr) &lt; 100 pr = primes(i) i = i + 1; end
Well. Ignore the fact that he asked you to do it in Matlab. Start off with the equations. I don't know what any of that means but if you show me the equations I could probably figure it out.
What I think he is asking is for us to do a DFT on a ricker wavelet, shift it in the frequency domain and do an inverse fourier transform back to the time domain and show the phase spectrum. I'd think it'd be much easier to do in MATLAB. https://en.wikipedia.org/wiki/Fourier_transform
So are you looking for fft?
To expand slightly further, your structure fields can also be multi-dimensional, e.g. `val.apple(1)`, `val.apple(2)`, etc. Referencing a structure by string is called [dynamic field referencing](http://blogs.mathworks.com/loren/2005/12/13/use-dynamic-field-references/).
In MATLAB, you need to put the function definition into its own file. You should call that file two_point_distance.m Your file will look like this: function outputValue = two_point_distance(inputVector) outputValue = * some math inserted here * Then you will be able to call the function from the command line, a script, or another function.
This might help you out: http://www.mathworks.com/help/matlab/ref/function.html
Type a semicolon at the end of your second line. Without semicolons, matlab displays the output of that line. So it should be: d = sqrt((x1-x2)^2 + (y1 - y2)^2) ;
So if I have a matrix that's 12 rows and 32 columns, how can I get matlab to read it and count up the number of elements that are greater than 80, the number of elements that are between 70 and 80, and the number of elements that are less than 70? I tried a nested for loop and it gave me the complete wrong numbers.
 logical1 = a&gt;70 &amp; a&lt;80 logical2 = a&gt;80 mean(a(logical1)) mean(a(logical2))
Thank you man. Can you explain why all of the code gives different numerical results each time you run it? Why is there variation?
Are you running it with rand? Because every time you run rand it makes a new random matrix.
I got 1 more question. If it's asking me to sum up the number of times the elements in a matrix changes sign what function would I use?
In what direction do they want you to count the sign changes? I'm thinking you'd use something like ```cumsum``` and ```diff```.
What are the advantages to using python for a project like this?