You'll need to separate them from each other before plotting, probably using logical indexing. I'd actually recommend adding a new column to your Excel data indicating which experiment the data point is from, reading the data into Matlab, finding the number of unique experiments from the fourth column, then looping through the unique experiments finding the rows associated with the current experiment (using something like rowLog = dataExperimentNumber == currentExperiment; or rowLog = strcmp(dataExperimentName, currentExperimentName);), pulling out the appropriate data using that rowLog, then plotting it in a new figure. 
Once you have the data in Matlab, you should consider using the gramm toolbox for plotting ([GitHub](https://github.com/piermorel/gramm), [File Exchange](https://mathworks.com/matlabcentral/fileexchange/54465-gramm--complete-data-visualization-toolbox--ggplot2-r-like-)). It's designed to do exactly what you want to do: "plot A as Y, C as X and then do a colour scale with B" is pretty much how you interact with the main function. It can do a lot of things once the data is in (histograms, averages with confidence intervals, fits, etc.). I would recommend to import data from all your experiments in the way they are now: comparable data in the same column, with another column that specifies which point comes from which dataset. It's nice to use Matlab's [tables](https://mathworks.com/help/matlab/ref/table.html) for this.
If it’s from FEM surely you can reduce the number of nodes to see at what point Matlab can no longer solve the system? Try 1000 nodes, then 10,000, then 100k. 
This looks great. thanks for sharing!
&gt; my main desire is usually to prototype algorithms This tends to make up a good amount of what I do, though I still end up needing to run it on a large dataset at least a couple of times. I work with .segy data, which is frequently 100's of GB (if not a few TB), so performance still matters. Ive found that optimizing the code to heavily use BLAS/matrix operations is a good tradeoff between dev time and run time (run time is still days or weeks, but without BLAS it could be months or years). I admit I havent tried using Matlab on a massively distributed scale, but ive used the parallel toolbox and havent been impressed with how efficient it is (in general, ive found running N independent instances of matlab with limited thread count is ~2x faster than running a single instance with N workers). Ideally id like to run some of this stuff on GPU's, but I highly doubt the Matlab functions could handle getting data to/from the GPU in a reasonable timeframe, and as much as Id like to learn how to do that using CUDA or OpenCL finishing my dissertation is a higher priority atm. &gt; I mostly deal with large sparse systems of equations and MATLAB only stores sparse matrices in a single representation, for certain problems the various compressed formats can be a lot more efficient. Out of curiousity: do you have any tips for generating REALLY large sparse arrays? I tried using sparse arrays in a project I was working on last summer (since it was easy to set up the problem using sparse arrays) with sparse arrays that were absurdly large and exremely sparse (i dont remember exact dimension, but i want to say ~1 billion by 1 billion with 5-10 GB of actual data). I found working with them was ok, but generating them was absurdely slow regardless of how I did so. pre-generating row and column indicies, sorting them in the same order they would be stored in memory, and then using a single call to the sparse function worked best, but making the sparse arrays was still taking up like 98-99% of the run time. In this case I ended up entirely reworking the problem to be well defined with dense arrays, but im kind of curious if there is some trick I didnt think of to make this faster. I suspect there isnt a way to make this faster. According to matlab's website &gt; The computational complexity of sparse operations is proportional to nnz, the number of nonzero elements in the matrix. Computational complexity also depends linearly on the row size m and column size n of the matrix, but is independent of the product m*n, the total number of zero and nonzero elements. wich means that large really sparse matricies will always be less computationally efficient than small less sparse (but not dense) matricies with the same number of elements. As you said, "various compressed formats can be a lot more efficient". But im hopeful that I maybe overlooked something.
 BEGIN PSEUDO CODE import text file Find delimiting/trigger text location. read. replace the trigger text with edited stuff super secret squirrel batching stuff that you do (I don't know) export file for batching Can you be more specific?
Oof not familiar with matlab at all really. Been working with it for a few weeks haha. The file would look something like this line 1 text here line 2 9 8 7 line 3 6 5 4 line 4 3 2 1 line 5 more text line 6 some more shit here line 7 text and numbers blah blah. I’m interested in being able to change anything that resembles line 2 3 and 4
Before you think about how to do this in Matlab, think about how to do it *at all*. When you visualize this data in your head, how do you think of it? How would you represent that in an image? 
Sorry, I forgot to mention I'm already doing this. 80k nodes is fine. The jump to 132k is where it's not.
smoke medium, transparent iso-surfaces, animated cross section plane
That's a 3d contour plot. I haven't done that myself, so I'd follow the normal process and search the documentation. 
You could try using an iterative method instead of a direct method, if you can't get more ram.
Scatter3 plot is simple to visualise your data. 
What i mean is when i run the function and type in a and b, the iterations will converge onto the b value say if i input b as 10 it will converge to 9.99999 and then give the final residual as 2.5828. I would just appreciate if someone could explain to me the part with subfunction with f(x)=0 on how i get the f_value for the code. I can re-arrange for R and have here as R = (U*(3*n+1)/n)^(n/(n+1)) * (-2*k/Pgrad)^(1/(n+1)) but i am not sure that this is the f(R) function. I also feel that unsure if the n and a and b are necessary or if i should remove these and just input an while loop instead for absolute error &gt;1e10-6
It depends on how large your data is, or how deep you want to get into the visualization aspect. For small stuff matlab can plot you iso surfaces of scalar fields, I don’t thinking can do volume renderings. In many cases it makes sense to just visualize the data in a different program like paraview. That gives you a lot more control about the way you display data Paraview understands a lot of different formats, some of which are quite easy to write in matlab. Or you could just write the raw matrix to disk and provide the metadata at the paraview import dialogue. Once you have your stuff in paraview you can do almost anything you could imagine with regards to visualization.
This is tough, regardless of plotting tool. But Matlab’s [slice](https://www.mathworks.com/help/matlab/ref/slice.html) is pretty useful
I'm not very familiar with the mapping toolbox, but in general I can tell you that the first step to a triangular mesh is a list of points on your surface defined as (x, y, z) coordinates. So my first instinct would be to take the tools from the mapping toolbox to give you the nominal surface shape, then add the altitude from the topographical data (make sure you're adding to the radius, not the Z value), then convert all those points to (x, y, z) values and use the same code you posted to generate the mesh. I hope that works. I'm making lots of assumptions about how your data is formatted and how the mapping tools work, but hopefully you can figure out what I'm getting at. Sounds like a cool problem. Good luck. 
If you put 4 spaces in front of a line of code it will format like code so it is readable y = x^2 + 2.*x for example Also, you don't define `x` or `n` in what you've shown us. Moving on- the error code is straight forward- all indices must be positive integers. When you index an array (say `r(i)`) you are asking for a specific index of `r`. That is, if `r = [2,3,5,6,3,6]` and then you say `r(3)` you would get 5. If `r` is defined as above, and you wrote `r(1/2)` what would you expect to get? Now, do you see why your indices have to be positive integers? So, my advice to you would be to write out what you want solved without MATLAB first, figuring out how to solve it by hand. Then code it up in MATLAB. 
Matlab’s surface objects are halfway there, you just need to manipulate the data a little bit. If you can get your data into the form of faces &amp; vertices (see: surf2patch), you can triangulate it by re-arranging the faces matrix.
I went back and checked: turns out I was, indeed, plotting the interpolated x,y paths instead of the simple ones. Plotting the simple paths with only the endpoints yields vectorized output graphs in pdf, eps, and emf. Problem solved. Thanks!
Recent versions of Matlab (2016b and later) do implicit extension of arrays automatically... no need for bsxfun anymore!
Do you mean something like that? load topo; [faces, vertices] = surf2patch(topo); trisurf(faces, vertices(:,1), vertices(:,2), vertices(:,3)) But doesn't it give me the same result than from my second example? Ideally I'd like to apply it to the output of *meshm()*, but [meshm\(\) only returns a handle](https://de.mathworks.com/help/map/ref/meshm.html). 
&gt; Sorry, I forgot to mention I'm already doing this. 80k nodes is fine. The jump to 132k is where it's not. Do: [L,U] = lu(K); %It is likely going to crash here. whos('L'); whos('U'); If the memory is exceeded that is your problem. Use GMRES instead. Also spy(K) will reveal matrix structure. If it somewhat randomly populated then I refer this: https://www.reddit.com/r/matlab/comments/6kmqap/how_to_properly_use_symrcm_its_not_speeding/ 
It seems you've solved it already. Did you try the solution you found?
Call surf2patch on your surface object--the output of meshm. Then split each face in half by re-arranging the "faces" matrix. I'll check back later, if you can't figure it out I'll post something on the file exchange that should help you.
Thanks for your input (also to /u/qtac)! I actually found a way to get the (x,y,z) coordinates of the surface, by digging through the meshm() function, which itself calls surface(). load topo_ellipsoid % load the saved xyz coordinates mesh(x,y,z) [Gives me now a nice mesh of the Earth.](https://i.imgur.com/hEbZHkU.png) Unfortunately, once I try to triangulate the data, something seems to go wrong. DT = delaunayTriangulation(x(:), y(:), z(:)); [faces, vertices] = freeBoundary(DT); % Query free boundary facets trimesh(faces, vertices(:,1),vertices(:,2),vertices(:,3)) The [output](https://i.imgur.com/FD85W04.png) is very 'low poly'(?). I guess that the Delaunay triangulation messes up the data. 
Oh, wow. Now I feel stupid! I swear that I already tried to call surf2patch with meshm's output, but now I got it. And now I also understood what you meant by re-arranging the faces-matrix. :) [This is the result I was looking for!](https://i.imgur.com/FxYr93s.png) Thank you very much and have a nice weekend! :)
Ive found CGLS is particuarly well suited to solving large systems, since in addition to a reduced memory footprint it avoids any matrix-matrix multiplications (you only need matrix-vector operations). This makes it quite a bit faster than many alternative methods. Its also pretty easy to code up.
I think that an iterative solver might be the best solution, but if you really want to stck with the method you are currently using try pre-factoring your matrix with [symamd](https://www.mathworks.com/help/matlab/ref/symamd.html). The problem (as another commenter stated) is probably your LU factorization producing matrices that are much denser than your input matrix. symand is literally designed to make the LU factorization matrices as sparse as possible, so it should help avoid the problem.
This is true, though I usually still recommend that people use bsxfun unless they are 100% sure they will never need to run their code on 2016a or newer. In terms of performance bsxfun and the built-in implicit expansion seem identical, though the builtin-implicit expansion seems to support more data types than bsxfun (which is the only good reason ive found to use it over bsxfun. Well, that and to make the code a bit nicer and shorter).
Oh yeah I completely agree, there are a lot of not up-to-date Matlabs out there! Moreover using bsxfun can make the logic of the code more apparent. One could also argue that having implicit expansion on by default makes things less safe: code that would have caused dimension mismatch errors before is now valid.
you are welcome. 
&gt; One could also argue that having implicit expansion on by default makes things less safe: code that would have caused dimension mismatch errors before is now valid I hadnt even thought about that. I wonder how many systems have crashed as a result of accidentally doing something like x = x(:); x + x'; I quickly ran a few numbers - if x is a [400 x 400] matrix of doubles those 2 innocent looking commands would increase memory requirements from ~10 MB to ~1.6 TB (and probably more like 3-4 TB peak usage during the operation).
*how* you're calling fwrite and fread matters a lot. Also, are you sure matlab is the right choice for this application?
those sound like reasonable speeds if you’re reading/writing to a spinning disk. Upgrading to an SSD would give a decent bump. 
Don't know how often the data changes between reads. But I work also with rather big data files, I import them and save them as .mat . Don't know if it helps, my data is some point clouds from scans (between 200k and 500k lines 3 row each (xyz). Saving them saves me a lot of time...
I'm not sure what freeBoundary does, so I'm not sure you want to be using it for this application. Shouldn't you just be able to triangulate the data and plot it as is? Does it have something to do with generating a closed mesh rather than a surface with edges? 
Its dark magic in the best kind of way. In that it repeatedly fucks you in unexpected ways. (Implicit array operations)
Well done :) glad to hear you figured it out.
I had left out the specific transfer function i am working with to find a more general result. if you are interested, the specific function i am working with is 0.0001163 s^2 + 0.07919 s + 1.612 ----------------------------------------------------------------------- 0.0001112 s^5 + 0.003739 s^4 + 0.05894 s^3 + 0.4631 s^2 + 0.7542 s + 1.612 Continuous-time transfer function. the decomposition i determined with 'residue' function b=[0.0001163 0.07919 1.612]; a=[0.0001112 0.003739 0.5894 0.4631 0.6542 1.612]; [r,p,k]=residue(b,a); is r = 0.0005 + 0.0007i 0.0005 - 0.0007i -0.2701 - 0.3806i -0.2701 + 0.3806i 0.5392 + 0.0000i p = -16.4209 +70.7384i -16.4209 -70.7384i 0.3089 + 1.3667i 0.3089 - 1.3667i -1.4001 + 0.0000i k = [] using this result the inverse laplace transform ilaplace(((0.0005 + 0.0007i)/(s-(-16.4209 +70.7384i)))+((0.0005 - 0.0007i)/(s-(-16.4209 -70.7384i)))+((-0.2701 - 0.3806i)/(s-(0.3089 + 1.3667i)))+((-0.2701 + 0.3806i)/(s-(0.3089 - 1.3667i)))+((0.5392 + 0.0000i)/(s-(-1.4001 + 0.0000i)))) gives the result (337*exp(-(14001*t)/10000))/625 - exp(t*(3089/10000 - 13667i/10000))*(2701/10000 - 1903i/5000) - exp(t*(3089/10000 + 13667i/10000))*(2701/10000 + 1903i/5000) + exp(t*(- 4622072445068011/281474976710656 - 88423i/1250))*(1/2000 - 7i/10000) + exp(t*(- 4622072445068011/281474976710656 + 88423i/1250))*(1/2000 + 7i/10000) as i stated previously, the plot of this result is [similar](https://imgur.com/je6bmuZ) but markedly different (more exagerated) than the [plot](https://imgur.com/ZPG7VFy) of 'impulse' of the original transfer function. i am unsure where i am making a mistake, but i dont believe i have correctly found the impulse response function of the given transfer function
Yeah I solved it by using cellfun to first convert number to string and then only to flip using fliplr. The coverted the flipped value to double. Did you do like divide by 10 and adding remainder? I wanted to do by different path and if you have done differently, I would love to know about it. BTW how can you convert say a= [123 456 789] (where all are double) to a(1) = [123] a(2) = 456 and a(3) = 789 where all are now strings? Being able to do this could make this problem easier.
A = [123 456 789]; a = num2str(A'); for k = 0:length(a(1,:))-1 b(:, k) = a(:, end - k); end B = str2num(b)';
+ This is actually a [cross-post](https://math.stackexchange.com/questions/2537245/numerical-triple-integration-of-multivariate-equations?noredirect=1#comment5239723_2537245) from a stack exchange query of mine, I'm not sure if that's allowed...
the voltage threshold is the minimum voltage a which an action potential is triggered
thanks for the code. It was super elegant than mine. There is a small error. A = [123 456 789]; a = num2str(A'); for k = 1:length(a(1,:)) b(:, k) = a(:, end - k+1); end B = str2num(b)'
So psi is a function of t? This isn't a triple integral at all. It's a function containing an integral, inside of a double integral. Check out the quadrature functions. 
Yup it is an integral inside another integral, and they share a variable (x). The Matlab documentation says that the quadrature methods are now renamed to the integrate methods... Could you be a bit more specific please? 
Yup it is an integral inside another integral, and they share a variable (x). The Matlab documentation says that the quadrature methods are now renamed to the integrate methods... Could you be a bit more specific please? 
Did you try to split the integration process into two pieces? Something like this:  % evaluate Psi at any point... Psi0 = Psi(0); % function definitions have to be at the end of the file... function v = Psi(t) v = integral2(@(x, y) integrand(x, y, t), -Inf, Inf, -Inf, Inf) end function v = f(x, y) % whatever f(x, y) is end function v = g(x, t) % whatever g(x, t) is end function v = integrand(x, y, t) v = f(x, y) .* integral(@(t) g(x, t), 0, t) end
&gt; those sound like reasonable speeds if you’re reading/writing to a spinning disk. Upgrading to an SSD would yield a decent bump. These are SSD speeds. Ive run this on 2 systems, my personal system with a samsung 850 evo and a beefier server with a striped (RAID 0) 3-disk ssd array. These should both come damn close to saturating SATA III bandwidth (with 1 caveat - see below). &gt; Remember, standard Disk I/O is a blocking, serial operation. Parellization won’t help unless you migrate to a hadoop distributes file system. When i mentioned parallelization, I had [thid undocumented matlab post](http://undocumentedmatlab.com/blog/explicit-multi-threading-in-matlab-part1) in mind. That said, it looks like a pain in the ass to implement and accessing (different non-overlapping) parts of the same file at the same time still makes me a tad nervous. &gt; fread and fwrite are both Matlab builtins calling optimized c code. So, the I/O at least is about as good as it can get regardless of language implementation choice. This assumed that Matlab doesnt do anything funky to increase the overhead (there is a lot of data moving around after all). It alse assumes Matlab doesnt set any options that are non-ideal but not user changable. In particular (this is the caveat I mentioned above) if there is an option for block size that matlab sets as something small it could explain this. I ran some speed tests (in particular with writing - reading the numbers are funky because of caching). Using dd with urandom and 1 MB block sizes dd if=/dev/urandom of=test bs=1048576 count=2048 gives me ~675 MB/s write speed, which is about right considering the 750 MB/s sata limit. If I drop the block size to 8 KB though dd if=/dev/urandom of=test bs=8k count=256k I get write speeds of ~235 MB/s, which is close to what I am seeing with matlab. Now idk if the C fread even has a settable block size analogous to what dd has, but if it did that could explain things.
&gt; how you're calling fwrite and fread matters a lot. These tests are with a single call to fread/frite writing a continuous block of data (no skip paramater).values aree read directly as uint32's (not converted to doubles). This should pretty much be a best case scenario. There are also a ton of optimizations (e.g., primary and secondary blocking analysis, reading as binary dump and then typecasting, etc.) that are implemented to make sure fread/fwrite are always callled as efficiently as possible, but those arent having any effect with the speed tests I ran for this post. &gt; Also, are you sure matlab is the right choice for this application? At this point, yes The particular project im working on Ive spent literally 1000+ hours working on (I think ive re-written most of the code 5 or 6 times by now). Ive got it such that after data loading and a brief prelimiary analysis, the entire set of calculations I need to implement are done in a handful of dense matrix-matrix multiplications, which Matlab exceeds at. In fact, the only reason im trying to make data I/O faster is because the rest of the code runs fast enough that data I/O is still taking something like 1/4 or 1/3 of the run time. Theres also the fact that, while I know a handful of other programming languages, im better at Matlab than I am with any other language I know, but even if that wasnt the case i doubt it would be much faster (simce I would probably end up calling the exact same BLAS subroutines, perhaps with slightly less overhead).
If it's from zero to length(a(1,:))-1, the code in the loop should be b(:, k+1) = a(:, end - k); It doesn't matter, so long as you're consistent. 
So I actually do this for a small part of the data (in particular some frequently used data header values), but in general this isnt practicle for me for 2 reason: 1) My data is way too big. Frankly I dont think matlab could imlement the kind of compression that -v7.3 Matfiles use (which makes them faster to load) without crashing, and even if it did it would take forever. To give you an iddea of data size, the FULL dataset you might be using for a given project can easily be [3000 x 1000 x 1000 x 100] x 4 bytes/value (uint32) (if youre wondering that is 1.2 TB of data). Granted I might not need to use all of that (and certainly couldnt all at once), but when I was doing testing I cut out one dimension entirely and downsampled another by a factor of 8 and still had something like [200 x 20 million] samples. The server I was using had 500 gb of memory and I still had to be careful about some operations (in particular vectorized operaitions on the full dataset didnt work - looping over 1 dimension was still needed). 2) There is a standard data format that is used by other programs that deal with this type of data, and so i'll eventually need to output it as that data type. Saving extra copies of the data as .mat files ends up being kind of a waste of space. This isnt as big of an issue as above, but it still plays a part.
This isn't a Matlab issue I'm talking about, it's a mathematical issue. Your confusion about the math seems to be the main impediment to your ability to write the matlab code. You need to understand how this expression behaves. It is ultimately the integral over x and y of a function of x, y, and t - leaving psi as a function of t. So you have to treat it as such. Either the integration must happen for a list of t values, or you must construct a function of t that evaluates the integral at that value. 
Why not use the matlab function *kalman*?
yeah it should be b(:,k+1) instead of b(:,k). Tq
Yup, it's as you mentioned, eventually a plot against time so currently I'm running a for loop which evaluates the inner integral symbolically... I was running into a lot of issues with the numerical methods so I was confused when you suggested quadgk
If you're after a numerical answer, why would you ever use symbolic variables? If the inner integral can be evaluated symbolically, then you can perform that calculation once and substitute the resulting expression in your code. Evaluating an algebraic expression is much more efficient than performing a numerical integration. If the inner integral cannot be evaluated to a closed form expression, you must perform numerical integration, in which case a symbolic variable is still inappropriate. I was suggesting a quadrature method because that's how one performs a numerical integration on a function, which is what you need to do. I didn't necessarily mean the outdated quad\* functions. I meant the technique of numerical integration, which is now provided by the integral() functions. 
That code is unreadable. There are instructions for formatting code on reddit in the sidebar. Not that it matters because it still uses symbolic variables, which have no place in numerical calculations. 
Sorry about that, so I have tried to analytically integrate only the inner integral and then subsequently use matlabFunction to convert it for numerical integration but that returned an array of NaN's.. for t=1:1:Tmax phi = (theta/tc)* int((1/(1+2*(tp/tc)))*[1-exp((2*m*g)/(1+(2*(tp/tc))))],tp,0,t); preU=exp(-(1+1i*V)*g)*(1-1i*phi); UrunF=matlabFunction(preU) UrunNum(t)=integral(UrunF,-inf,inf); tt(t+1)=t+1; end 
No, look at the analytical expression and enter it as a numerical expression. Do not use symbolic variables in your code at all. Even better, evaluate the integral by hand, on paper. Then use that expression in your code. There is no expectation that you are free from doing math by hand in order to write code. 
Mhh okey, this is really big than ;-) 
Can you write the KF predict/update equations for your system by hand? Your setup seems to be a pretty straight forward implementation of a KF- your measurement space and your state space are the same and your state transition matrix should just be a straight line propagation, so there shouldn't be anything complicated there. For your R's, are they dynamic or are you going to use a fixed measurement noise for each input type? For your Q matrix- are you going to leave that fixed or maybe make it get larger when your estimate seems to be accelerating? Anyway, once you have these questions answered, setting up the KF in MATLAB is pretty straight forward- you can mostly directly type the equations into MATLAB, and since MATLAB naturally works with matrices, it will work out. The steps, in general: 1. Initialize your KF. In your case, perhaps your initial state is just the first state of the GPS solution 2. Go into your predict/update loop 3. In the predict loop, update the state- x- (position and velocity) as well as the state uncertainty -P - to the time of your next measurement (so from t(n-1) to t(n) 0. You should have a state transition matrix which will update both of these things for you (and don't forget to add on acceleration noise -Q- otherwise your KF will converge way too quickly) 4. In the update phase, merge your measurement with the predicted state. To do that, calculate your Kalman Gain -K- and then use that to update your predicted x and predicted P. 5. Now, just do it all over agian- every time you get in a new mesaurement 
There is no specific subreddit for those things. You could post your questions here or in r/mlquestions. But you should really consider switching to Python and tensorflow/Keras :). That's where most of the community is. In the browser you should be able to search for new subreddits. 
Thanks! I'll give them a look
Admittedly that's an option, but I was hoping for a programming solution. 
What you want is [logical indexing](https://blogs.mathworks.com/loren/2013/02/20/logical-indexing-multiple-conditions/) which is one of MATLAB's best features. In one line: z_12 = z(2, z(1,:) &gt; 1); 
I always find new subreddits on Google. I just search for the subredding I'm looking for + reddit. 
This is the programming solution. Programming numerical code requires mathematical skill. 
That's a bit.. Rich. In any case the analytical solution is part of the paper and not too hard to calculate by hand anyway.. I was working on a more generalized version which has similar functions but with a less obvious analytical solution.. Thanks for your two cents though. 
Ah very useful. Thank you very much. 
There is no need to calculate the solution analytically. You can do it perfectly in matlab with the built-in functions numerically. I think you missed my comment on how to do it: https://www.reddit.com/r/matlab/comments/7fki05/dealing_with_nonstandard_triple_integrals/dqctkmq/
How much data are you trying to write and how long does it take?
So to plot multiple plots on one figure, use the command `hold on`. To find the eigenvalues of a matrix, you can use `eig`. To define `t` you can use `linspace`. 
That subreddit doesn't exist, but there is a lot of documentation and discussion on neural nets in Matlab elsewhere. There is the Machine Learning Toolbox as well as a ton of third-party toolboxes available, many from academia. That being said, a few regulars on this sub have experience with ML and NNs and would probably be happy to discuss neural nets if you post more about it.
Yup, I tried, however it complains as the numerical integral function does not let a variable appear post usage.. (Here t is preserved as a variable throughout the integrations)
I don’t have any experience with *systemtable*, but based on the output: - check to see if there is an option for this function to output in a more usable format - by looking at the output, there is header info, [list], double, double, [list]. Are the first and last numeric outputs always single numbers? If so, you can assign the output to a variable and then manually assign elements of that variable to your array using [indexing](https://www.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html). Keep in mind the syntax is a little different for matrix and cell operators.
Well, if I put in some functions for f and g (I tried `f(x, y) = exp(-x.^2 - y.^2)` and `g(x, t) = t * exp(-x.^2)`), and i call `Psi` for any scalar value of `t`, it returns some numbers without complaining for me. If you use vector inputs for `t`, you have to adjust the code slightly, but it works nontheless. What is the error that you get?
&gt; your state transition matrix should just be a straight line propagation No, the IMU measurements are used to generate the transition matrix at each time step.
You're failing to see a fundamental mathematical aspect here. If there is no analytical solution *you must do a numerical integration one way or another*. Either you do it in a very slow and error prone way using symbolic variables, or you do it efficiently and reliably with numerical operations, but there's no magic that let's you arrive at a numerical result without numerical calculations. So, since your *must* make the computer do numerical integration, you may as well use the proper tools - normal, numerical tools that Matlab is built for, rather than the symbolic tools that are a very niche add-on, not really intended for programmatic use. Abusing symbolic variables to do numerical calculations is **not** a "programming solution", it's an ugly attempt to avoid one. Proper technical programming requires a lot of analytical work to be done before you ever touch the keyboard. You can call it my two cents if you want, but this is what I do professionally. Ignore it at your peril. 
You should be able to find lots of examples and explanation using Google. Search terms that may help are: Inertial navigation, INS, GPS aided. I found this [INS toolkit](http://www.instk.org/) very easily, and it looks like it has some examples. Might be diving in head-first though. Brown &amp; Hwang's [book](https://www.amazon.com/Introduction-Signals-Applied-Filtering-Exercises/dp/0470609699) covers pretty much exactly what you are looking for, specifically using Matlab.
Oh that makes sense. The IMU should have a pretty good velocity. I mainly do KFs where I only have external measurements, so I had to guess a little. 
Ah, point taken about the symbolic variables.. I didn't mean to be rude.. Currently I'm attempting a solution as per the other method (numerical) suggested here.. 
/u/snktech /r/learnmachinelearning is slightly more active and similar scope as /r/mlquestions (I'm actually not sure what the difference is).
Here's a sneak peek of /r/learnmachinelearning using the [top posts](https://np.reddit.com/r/learnmachinelearning/top/?sort=top&amp;t=all) of all time! \#1: [xkcd: Machine Learning](https://www.xkcd.com/1838/) | [7 comments](https://np.reddit.com/r/learnmachinelearning/comments/6bo3ml/xkcd_machine_learning/) \#2: [Every single Machine Learning course on the internet, ranked by your reviews](https://medium.freecodecamp.com/every-single-machine-learning-course-on-the-internet-ranked-by-your-reviews-3c4a7b8026c0) | [7 comments](https://np.reddit.com/r/learnmachinelearning/comments/694aj0/every_single_machine_learning_course_on_the/) \#3: [Would you be interested in a deep learning MOOC focused on theory and turning research papers into real, working code?](https://np.reddit.com/r/learnmachinelearning/comments/6w6tlt/would_you_be_interested_in_a_deep_learning_mooc/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
just start coding. write a loop for the number of elements in alpha. start simple. how would you write a loop that obtains element *i* from alpha at each iteration? once you have that just elaborate the code in the loop to solve the system for each alpha.
With your exact code layout (each function in it's own file though), I get: Subscript indices must either be real positive integers or logicals. Error in f (line 3) f(x, y) = exp(-x.^2 - y.^2) Error in integrand (line 2) v = f(x, y) .* integral(@(t) g(x, t), 0, t) Error in Psi/@(x,y)integrand(x,y,t) Error in integral2Calc&gt;@(y)fun(xi*ones(size(y)),y) (line 18) @(y)fun(xi*ones(size(y)),y),y1i,y2i,opstruct.integralOptions), ... Error in integralCalc/iterateScalarValued (line 314) fx = FUN(t); Error in integralCalc/vadapt (line 132) [q,errbnd] = iterateScalarValued(u,tinterval,pathlen); Error in integralCalc (line 103) [q,errbnd] = vadapt(@minusInfToInfInvTransform,interval); Error in integral2Calc&gt;@(xi,y1i,y2i)integralCalc(@(y)fun(xi*ones(size(y)),y),y1i,y2i,opstruct.integralOptions) (line 17) innerintegral = @(x)arrayfun(@(xi,y1i,y2i)integralCalc( ... Error in integral2Calc&gt;@(x)arrayfun(@(xi,y1i,y2i)integralCalc(@(y)fun(xi*o nes(size(y)),y),y1i,y2i,opstruct.integralOptions),x,ymin(x),ymax(x)) (line 17) innerintegral = @(x)arrayfun(@(xi,y1i,y2i)integralCalc( ... Error in integralCalc/iterateScalarValued (line 314) fx = FUN(t); Error in integralCalc/vadapt (line 132) [q,errbnd] = iterateScalarValued(u,tinterval,pathlen); Error in integralCalc (line 103) [q,errbnd] = vadapt(@minusInfToInfInvTransform,interval); Error in integral2Calc&gt;integral2i (line 20) [q,errbnd] = integralCalc(innerintegral,xmin,xmax,opstruct.integralOptions); Error in integral2Calc (line 7) [q,errbnd] = integral2i(fun,xmin,xmax,ymin,ymax,optionstruct); Error in integral2 (line 106) Q = integral2Calc(fun,xmin,xmax,yminfun,ymaxfun,opstruct); Error in Psi (line 5) v = integral2(@(x, y) integrand(x, y, t), -Inf, Inf, -Inf, Inf) Error in shenNum (line 3) Psi0 = Psi(0);
like others have said, more of the active development in NNs is in Python using TensorFlow, Keras, and Caffe. MathWorks does have a toolbox, and there are some third party ones as well. I've personally used MatConvNet (which focuses primarily on Convolutional Neural Networks) for some applications and have been happy with it.
Cool :) 
It will be way easier to help if you share your code. 
Hey! This is really interesting! It's really impressive that you can find an exact solution to this! I'm wondering, how did draw this and superimpose your modes of vibration onto the drawing? 
YO that is awesome, im so happy i found this sub-reddit. some cool stuff here. How did you represent the solution as a spring mass system and not a line plot?
are there any simulink examples for this type of thing?
In the functiom file of f, you would have to write function v = f(x, y) v = exp(-x.^2 - y.^2); end And similarly for g, you write function v = g(x, t) v = t * exp(-x.^2); end I wrote `f(x, y) = ...` to show which function I mean. I thought you know the matlab language syntax and understand what I mean.
Hey, who is downvoring this? If you know the answer, please just reply :)
Thanks, that more or less makes sense to me ;) However, some of my "data" columns are empty (because the nerves did not respond), so how does these commands deal with that?
I sounds handy, but I don't think I quite understand how this works. How do I define the dataExperimentNumber and currentExperiment? I'm sorry for being a noob at Matlab :) 
There is a block 'Function' in Simulink, when you double click it it will open script editor and you can put your logic. Being a function ofc it can have output, the output will have a linkable terminal in the Simulink environment.
Not sure about matlab but isnt this what apdl is for?
basically, you need to be able to parse out the data that you want to plot using a specific format. MATLAB can do this fairly easily using "logical indexing"( towards the bottom of this page: https://www.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html ). To get to that point though, you need to know how to set up your logical statement, as well as how many times you actually need to do it (in your case, it's one per experiment). dataExperimentNumber is just the added column, whereas currentExperiment/currentExperimentName is the current experiment you are on in your loop (whether it's a double or string variable depends on how you saved your data though). here's some pseudocode: data = xlsread() dataExperimentNumber = data(:,end); % last column experimentNumbers = unique(dataExperimentNumber); for k = 1:length(experimentNumbers) currentExperiment = experimentNumbers(k); rowLog = dataExperimentNumber == currentExperiment; dataToPlot = data(rowLog,1:2); % plot stuff end
https://codepaste.net/a1pr2r
You could give \mathrm{} a try.
It seems that you want inputs that are one-time initialization inputs. I typically accomplish this by writing a "modelName_init.m" file to initialize parameters and then, in the model file, I do the following: * Navigate to the File-&gt; Model Properties -&gt; Model Properties dialog * In the Callbacks tab, I select the InitFcn menu item * Enter modelName_init.m and hit OK. This file will now run whenever you run your model.
This does actually seem to work, thank you. I'm still kind of curious why text doesn't work, but as long as a simple alternative exists I guess it's no big deal.
No idea tbh, but Latex is a giant trial and error for me anyway.
... does it have to be matlab? If not, just parameterize it in WB.
Indeed is a great place to search. I would focus less on the language and get in a industry you have a passion for. General programming knowledge means you are able to learn other languages. If you show a passion for leaning and the specific industry being fluent in the specific language is usually less important. Also pro-tip search for Mathlab or “mat lab” or “math labs” cause HR and management are posting jobs.
if you search "technical computing" or similar, you should find jobs especially in academia
Do you know about any tutorial about the issue?
You could store the data from each file within part of a cell array. &lt;within the for loop&gt; arrayed_data = {} data = stuffyougotfromfile arrayed_data = { arrayed_data ; data } %Trying to stack all the things. %Be cautious calling cells. calling arrayed_data{index} brings the contents at the index, but arrayed_data(index) gives the cell, at the index. %cells can be strange. &lt;end for loop&gt;
MATLAB is pretty easy for engineers to learn well enough on the job, so a lot of times it seems to be more of a "nice to have" quality for candidates than an absolute necessity. I agree that you should probably focus on selling yourself as an expert in a particular industry rather than MATLAB itself, but you can list MATLAB specific projects on your resume to elaborate on your experience. I've had some luck finding interesting positions on Indeed and LinkedIn, but networking with friends/coworkers/professors is a huge help for finding a position and actually getting an interview.
In my industry (space), MATLAB skills are more valued and useful in research than industry. I don't know what your background might be, but looking towards a research rather than operational or product development/software engineering focus may be productive.
Depending on your interest and experience level, you might consider a job at the mothership and apply to MathWorks. https://it.mathworks.com/company/jobs/opportunities/
Try Matlab’s tables: read your data with readtable, concatenate all tables into one while creating another data column that indicates which rows come from which file... profit (=use rowfun)
In the automotive software industry, from personal experience MATLAB/Simulink is the most widely used package. Hope this helps
This only seemed to store the data from the first file and that was it; is it possible to store the data from each file? 
Hey mate, thanks for the information! I will try this first thing in the morning. x) Much appreciated! 
Eh, there’s plenty of Matlab used in the space industry as well. A lot depends on the company. 
How many scatter/lines you have in each subplot ? Can you the number?
Yes, it should be possible to store the data from each file. Cells are tricky. from my example code: change: arrayed_data = { arrayed_data ; data } to arrayed_data = [ arrayed_data ; data ] The different is literally the [] vs {}. quick example code that helped me find this: clear all athing = 'test' test = {} for i = 1:1:5 test = [test ; [athing + string(i)]] end
Are you certain you need to split them in the first place? The following appears to accomplish what you want: SubCol1 = 429418; SubCol2 = 4514500; A(:,1)=A(:,1)-SubCol1; A(:,2)=A(:,2)-SubCol2; If, however, you do need to combine columns, then the following should work: B=[A3,A4]; Also, if you might need to scale things up to larger matrices, the following may help: SubCols = [429418,4514500]; A = A - repmat(SubCols, size(A,1),1); Newer versions of Matlab make this easier (I think it was introduced in 2016a, but I could be wrong): SubCols = [429418,4514500]; A = A - SubCols; Just be careful with that new auto-expansion syntax -- I find it's a lot easier to make a mistake that still produces a result.
Tho I wouldn't want to be the Matlab expert in a company whose management can't spell it right. 
UpWork has lots of requests for freelancers work involving Matlab.
In versions 2016b+ this is done automatically: A - [429418 4514500] in older versions you can use bsxfun(@minus,A,[429418 4514500])
You can try the 'compact' option in savefig
This was extremely helpful, thank you!! I'm new to coding and I'm starting out on Matlab, so this will go a long way for me!
For the moment Im running tests on a relatively small ~4gb test dataset. Taking the average of 10 trials in a "best case scenario" (single fread call and continuous block of data): I'm reading at ~273 MB/s (147.4 seconds for 40.34 GB of data) (the code involved is quite a bit more complicated than just an fread call, but I turned off most of the extra stuff for this test and the profiler tells me 99.9% of that time is the fread call). This is just for testing though. In reality the amount of data will vary project to project, but its conceivable that I will be working through a dataset ranging in size anywhere from a few hundred GB to a few TB, and that (due to memory requirements) each individual data point will need to be read, processed, and re-written 4 or 5 times. Some of these will be continuous data blocks but some wont (some will be scattered literally throughout the entire data volume). While I have put a LOT of time into automatically optimizing the calls to fread and fwrite, I dont imagine getting more than ~200 MB/s or so average read/write speeds on average when doing realistic I/O operations. Working out the numbers, if I read and write 2 TB of data (4 TB total read + write) at an average speed of 200 MB/s that is 5.5 hours spent strictly on reading/writing to/from disk. Also, if I am correct in thinking im CPU limited, Everything will take about 1.3 longer than that. These numbers are with my computer, but the computer that will actually do these large-scale runs is running a xeon of the same generation. Xeons are great for multithreaded tasks but fread/fwrite appear to be single threaded, and a lower clock speed (again assuming it is CPU limited) will slow things down. 
I think I remember that the text command belongs to the amsmath package, so chances are that package isn't used in the document
Just as an FYI- `repmat` is a bad choice, from a performance standpoint, for doing this. As you pointed out, in newer versions of MATLAB, you can just do it directly. But even in older versions, you can use `bsxfun` which is computationally much faster. 
Anywhere from 12 to 500. A lot, but not the largest figure I've ever done. Strangely, if I create this figure and save it by just going to File--&gt;Save, it doesn't take any time at all. So now I'm even more confused :(
I will try that, thank you!
Have you tried using Simulink? It has built in functions for disturbance functions, including a square wave.
That’s going to be tough. I looked at the resume you posted and you sound like a data scientist/ quantitative developer. That’s what I’ve been doing also since getting a degree in applied math. I’ve used MATLAB for many many years but recently moved to python along with everyone else. Look for job posting for Python experience using numpy and pandas. After you’ve applied do some tutorials, it’s free!
I ended up using the Square function in the signal processing toolbox along with lsim. It worked out well. Thanks for the help
Square works well. I use Step a lot for my work but that’s just giving the tf an input of 1. 
interpolate?
I'm a bit confused; you don't need the mapping toolkit to read netcdf files in the first place, since MATLAB has a [netcdf reader built in](https://www.mathworks.com/help/matlab/ref/netcdf.html). Just read out the data from the netcdf file into a regular MATLAB array and interpolate appropriately; you can stuff it back into netcdf format afterwards if you need to. 
Classic [matrix indexing](https://nl.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html). You need to combine the third example below "Indexing Matrices with Two Subscripts", with a method of your own device (hint: use math) to solve your problem.
A few hours ago I got the exact size of the actual dataset i'll be using in the project Im working on. As it turns out I was actually underestimating it - apparently, the full volume is over 2 TB.
Your putting the result of the computation in the v'd spot in f (use v as in index). I higly recommend looping over an index vi going 1:numel(V) and getting the value from the array V into a variable v in the first line of the for loop using something like ' v = V(vi) '
nobody, guys?
Thank you :) Okay, so I get the Logical Indexing, however, I don't want my empty spaces to be zeros, as this would create problems in my analysis. I simply want them to be empty. Will that work? And how? Also, I don't understand what the loop does - why do I need it?
The problem I have is one file has the date reference is in 250 meters while the temp file is in km. 250 meters file is currently a getiff while netcdf is temp per km
I see what you mean. There's a probably a more elegant solution, taking advantage of the nature of these two file types, but since I'm a non-software kind of engineer I'd stand by the original strategy: extract all the information from both files into ordinary MATLAB arrays, perform a 2-D interpolation followed by your other operations, and then recondition the data back to whichever format you need. The other alternative is to decimate your file with the date reference instead, if it doesn't hold much information at the 250 m scale vs. 1 km, but the idea is the same.
when you do the indexing, the zeros are only in the "rowLog" vector; once you get to the dataToPlot, there aren't going to be any "empty" rows. I'd suggest implementing this code and stepping through it in the debugger so you can see what's happening with it. The loop is specifically for the plotting part of it, but if you wanted to separate your data set into the individual experiments, you can use some of that code there. When you continue your analysis, you can simply look at the original "data" file you pulled in from Excel.
I think your annotations are wrong. Do you have the original state equation?
Excellent reply. Just to make things a bit more clear for the OP, I'll add the following: - what you are doing there in the "for-loop" is, basically: "at the position (60,1), (120,1), ... (1140,1) in my f(v,1) function, I want to add the following result ..." - what you really might want to be doing there in the "for-loop" is: "at the position (1,1), (2,1), (3,1) ... (last-position,1) in my 'f(v,1)' function, I want to add the following result ... bla bla bla ... that is dependent of the values of v = 60 ... 1140. In this way, each of the positions in f(1...n,1) directly relates to each value of your 'v' vector, but the position goes from 1 to the length of your 'v' vector." Now, your "v" vector has 10 values, from 60 to 1140. As recommended, you can get the length of your 'v' vector by using the numel() function, ie ... v_length = numel(v) . You then declare the for-loop as " for k = 1:v_length " and then " f(k,1) = .... v(k) + .bla bla bla ... ". You will have 10 values for your f(k,1) function, each of them dependent on the actual value of the 'v' vector for each iteration step k. For example: for iteration step k = 1, v(k) = 60 f(k,1) = f(1,1) for iteration step k = 2, v(k) = 120 f(k,1) = f(2,1) and so on.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/india] [Anyone here good with MATLAB?](https://www.reddit.com/r/india/comments/7g5v2v/anyone_here_good_with_matlab/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
i’d be surprised if there were any built in support for non uniform ffts, but there is a bit of research into implementing fasts Fourier methods for non-uniform grids. what has your google research yielded? 
this is really basic coding in Matlab, where are you struggling? what's the confusion? use the "input" function to obtain the input from the user, then convert to radians and print the result.
I'm new to matlab and would like to know how to do it? could you tell me how i would put it into the script?
i literally just told you what to do. use the "input" function to obtain the input from the user, convert to radians, a print the result.
Im almost positive there is no built-in support. I was hoping to find a .m or mex function though. I admittedly didnt google the topic immediately before posting, but from what I remember when I last looked into this (a few months ago) most non-uniform methods more-or-less work such that they start out with the standard fft solution and then iteratively modify the solution to correct for all the non-uniform parts (I believe this involves applying several windowed uniform fft's to estimate the the error from the non-uniformity is, but I could be remembering that wrong). Im really looking for a good implementation though, since this will end up being applied to a huge amount of data. I dont mind writing the function once if I know it is a good method, but I really dont have the time to write the code for every random variation I find looking for one that works well. Also, the "1.5x - 20x estimated speedup" in the main text assumed that the non-uniform version is only a factor of 3 slower than the uniform version. A sub-par implemention I would guess could easily be an order of magnitude slower, and in that case what im using right now would probably be better.
i literally only started matlab today and am trying to understand scripts? could you please type it out for me as you would in the program? it helps me understand
 deg = input('enter value: '); That's the command to get the input. rad = deg/180*pi; That's converting to radians. fprintf('Answer in radians: %4.2f',rad); That's printing the result I hope you're able to figure thing out on your own going forward.
thank you so much
cheating is going to get you no where in life
cheating? im teaching myself matlab. gotta start somewhere. why are you being so harsh?
because instead of explaining where you are not understanding the script, or instead of posting your own efforts, you just asked someone to do it for you. for a very very trivial example. I understand you are learning but I don't see how someone simply has no idea where to start when the script is only three lines long.
if i were to post my own efforts, from my experience of exchanging conversation with you, you'd probably still treat me like i am a worthless piece of shit. get off your high horse.
actually no, please investigate my post history here in this sub, I am very much willing to teach people who make good posts.
Hi and welcome to the fun world of audio and matlab. First you want to [import your sample audio](https://www.mathworks.com/help/matlab/ref/audioread.html). Then you can simply use the FFT command on whatever variable you imported in the above step. You can do this in one step as well. For example: X=fft(audioread(myaudio.wav, 1000). Worth pointing out that to avoid aliasing in the signal, you will need to have a sample rate that is representative of the Nyquist frequency for your audio. If it is a song with most frequencies represented, then you will need to sample @ 40k Hz, you need to note the length of your audio to determine the number of samples for your length (1000 in my example). You can then use "abs(X)" to find the magnitude and "angle(X)" for the phase. Plot all three, X, abs(X), angle(X) separately or differentiated by color on one plot. That should tell you all you need to know about a simple audio file. It might be easy to start out with a simple file like one piano note, and the same violin note, so you can get used to what an DFT plot looks like and what info it has. 
The little bits that make up the data get sent from one IP node to the next in packets; if the packets never reach their destination they just get dropped eventually. Also they can arrive out of order and nobody cares. Whereas with TCP it's just the opposite.
Just install the game on two computers and play the game single player.
Yes, high CPU usage will increase the power draw of your computer. If you leave something running that consumes a lot of CPU for a long time (i.e. a MATLAB script), it uses more power. How much depends on your computer and how much processing you're doing. 1 core at 50% &lt; 1 core at 100% &lt; 2 cores at 100%, etc.
Never done this with `matlab`, but it sounds like this (example)[https://blogs.mathworks.com/loren/2011/05/27/transferring-data-between-two-computers-using-matlab/] will help
there are lots of ways. the best is probably using sockets, though i’m not sure what matlab built in support for that will be and it’s not something you’d want to do from scratch. google “matlab tcp ip” and see what pops up. the easiest way, assuming the machines both have access to some network file server, or one of the machines shares a location on the network... set up a simple file semaphore by having player A take her turn and then save the state of the game to the file and changing the name to be something like “B-its-your-turn-buddy.mat”. meanwhile, the other machine is looping and waiting for that condition. when it happens, he loads the game state, takes his turn, then saves his state to the file, renaming the first letter A. then A takes her turn and repeats the process. In summary, you need two things - a way to share the game state, and a way to take turns. 
Have you tested to see if partialcorr is GPU-enabled by passing GPU-Array data into it?
I know it's impossible to answer this exactly for you, but if I have an average desktop bought in 2012-13 and live in an average household, do you have the vaguest idea what order of magnitude will the jump in energy consumption be? 1% - 10% - 100%? This is assuming I'm running MATLAB almost 24/7 for a month. 
You could implement a treshold. That is, if your background is lower than some preset value (the treshold), set the substraction + division result to some other preset value (default value). In the code below I use logical indexing with the logical indexing array belowTreshI. threshold = 1e-2 ; defVal = 0 ; belowTreshI = backgroundImage &lt; threshold ; resultImage(belowTreshI) = defVal ; 
Thank you so much! My problem is solved now! 
With so many variables, you may wanna invest in a power consumption meter. If you can afford to interrupt your pc for the installation. Otherwise, there should be some online calculators for pc power consumption, look up bitcoin mining stuff, I remember looking at similar calculators. 
If you could max out the output of a 500W ATX power supply, and if that power supply were 70% efficient, then your computer would be drawing about 715W. Assuming you're running at that level for 24 hours per day for 30 days, then you're looking at 515 kWh of electricity consumption. At $0.16 per kWh, it would probably run you about $82. Mitigating factors: 1. It's winter, so whatever heat this generates (715W) will help heat your house, which in turn would reduce your heating bill. Helps you in winter, double screws you in summer. 2. You're almost certainly not going to max out a power supply with CPU usage alone. It looks like a Core i7 processor might top out around 270W, and if you rounded that up to maybe 350 to support RAM and motherboard, etc., then you're looking at maybe $58 bump on your electricity instead. 
Wow that's actually quite expensive, I'm doing this for my masters project and did not expect these additional expenses. 
Lol yeah I did the same. Master's thesis had radar simulations in Matlab running 24/7 for about 10 days at a time. Get the results, see they're garbage, make about 30 minutes of edits and then run another 10 days of simulations. I would suggest trying to get the school to run your code on their machines. Try contacting their Math department to see if they have any Matlab servers, etc. that you could run your code on. Not only should it be faster, but you could also maybe get out of having to pay for the power. I mean, that's what tuition is for, right?
Thanks I might try that suggestion. My scripts are even not that impressive, I'm just solving very large systems of integral-equations. My max time for one script is my current one and has been running for 18 hours, and is about 30% complete right now. I hope my pc will survive this. 
I have not. I will try and let you know what happens!
I don't know how sensitive you are about other people seeing your code (proprietary research, etc.) but you might want to consider posting the code to see if there is some changes you could make to speed up the execution time. Sometimes it's surprising what can eat up time. Not allocating variables up front, using symbolic variables (especially using `clear` and `syms` in a loop) can eat up TONS of time. If you do wind up posting the code here, please shoot me a message; I'd love to help optimize! :D 
Thanks a lot for the suggestion, but I feel since this is my masters project and part of it is coding it yourself it would be a bit unethical to literally post the code and ask for optimization tips. If it were just a personal project of mine I'd definitely do it. Besides I actually know exactly what step is the bottleneck. The loops themselves are definitely not the problem, 95% of the calculation time is spend in the MATLAB "fsolve" function that solves a system of equations. Inside that system of equations I have multiple multidimensional integrals over a very large volume that are calculated each step again in the MATLAB fsolve internal loop. It's those integrals calculated over again and again that take up 90% of the time in my script.
When you searched the documentation for "date" did you not get any results? That might indicate a problem with your Matlab installation. 
Hey there, thanks for answering! I did and I did find out about datenum and formatIn but I honestly couldn’t figure out where to put the formatIn. I was trying around with it but I obviously couldn’t manage to place it where it belongs since all I could read out are either the heights or the numbers behind the “:” of my hours:minutes.
[try this?](https://www.youtube.com/watch?v=T_ekAD7U-wU) 
there is also cs103.net or same course in coursera as Introduction to Matlab Programming by Vanderbilt. But all it covers is basic matlab nothing too deep
I understand the feeling. I would still *highly encourage* you to talk to your advisor and get their feedback on seeking optimizing help, and then maybe go talk to professors in the Math/Physics/Engineering/etc. departments (probably in that order lol) and get *their* feedback if you're still reluctant to post Internet-wide. I would guess it's probably heat transfer stuff (which is the devil, btw), but I don't know why. Probably because heat transfer has all the big systems of equations that can't be solved lol (read again: the devil). So, I don't know what the equations are or how you're invoking them, but here's a few tips, anyways: 1. `fsolve` is for systems of nonlinear equations. If the systems are linear (or can be "adequately modeled" as linear!!) then consider `linsolve`. If it's a nonlinear equation but not a *system* of nonlinear equations, consider `fzero`. 2. Save the "full resolution" data set generation once you're sure you have everything else correct. Remember that you can do a partial set, evaluate the results, then "fill in" once the preliminary data looks good. For example, consider the following: fullData = -10:0.1:10; preliminaryData = fullData(mod(fullData,1) == 0); secondaryData = fullData(mod(fullData,1) ~= 0); In this example, you want to collect data at an increment of 0.1. The commands above break this up into a preliminary data set that gives data on increments of 1, then a secondary data set that gives data on increments of 0.1 EXCEPT for where the values are increments of 1. You could do the same for increments of 0.5, etc. Ultimately the concept here is to collect a "lesser" data set first, that is a more sparse than you desire, then go back and collect more detail in after your sparse data sets are verified. This is probably the biggest thing that would have saved me when I was a grad student. You don't need to collect all the data or run all the tests. Be an engineer. Small scale testing first, iterate, iterate, iterate, then progressively scale up. You can run the same test on increasingly finer meshes, again skipping the values you've already used, which means you're not re-running old data. You can use this to fill in "especially interesting" sections of your plots or data without agonizing over the entire range. This "variable step" solving is actually how some numeric/iterative solvers work. The last tip, which is like a lame version of (2): 3\. Try changing the options of the solver, especially the `FunctionTolerance` parameter. Anyways, again these are more general tips you can consider for your own code. Please ask for help at your university, though - remember that your advisory committee exists to advise **you**. I was going through hard times in my personal life when I was finishing my master's and didn't seek help like I should have, and it wound up costing me months of work.
You'd provide the format where the documentation tells you - as the second argument to datenum. Datenum will take the strings you have and convert them to a number you can use as the x axis of a plot, and the strings themselves will work as plot labels. 
Hey, I have some sample code that I used to analyse a sax scale, that might help you a bit. PM me if you're interested. 
Thanks a lot for all your advice. I have to run right now but will read through it in detail when I'm back and will try to implement what I can! I will provide feedback if it improved anything. 
Sounds good. Great luck!
I get this error: Error using eps Class must be 'single' or 'double'. Error in partialcorr (line 282) tol = max(n,dz)*eps(class(x))*sqrt(sum(abs(x).^2,1)); 
Why would you use a for-loop for this? [Logical Indexing](https://mathworks.com/help/matlab/math/matrix-indexing.html#bq7eg38) can do the same in just 3 lines of code. Or rather [the sign\(\) function](https://mathworks.com/help/matlab/ref/sign.html) can do it in one line of code.. If you have to use a for loop, then loop through all the elements and do the comparisons on an element level. This can be realized with a a for-loop nested in a for loop to loop through all the dimensions or through a single for loop if you make use of a linear index. The reason why your for loop is not working is because you are comparing entire rows at the same time, instead of single elements.
You don't really seem to need the B and C matrices. You can just check whether A is larger than or smaller than 0. You could also look at the sign function, but that's kind of cheating. For finding your random numbers, look here https://se.mathworks.com/help/matlab/math/floating-point-numbers-within-specific-range.html
I've worked with NN on Matlab, my recommendation is: go to python. There are much more resources.
Yes, people have told me that It would be better to use Logical Indexing, but it is a requirement for the assignment to use for loops.
Got rid of of matrices B and C and tried to check if each element in a was larger or smaller than 0, but it is still not working. Here is my changed work: https://pastebin.com/pR1ezvA2
Put a semicolon after line 3. Run this code again and then look at the value you get for D.
Ugh I was so close lol. Thanks for your help!
 doc datetime
Help newrb
This is very simple in Matlab/Simulink as you would just drag a differential block and paste after your function block?
it may be worth sending them an email asking if they're going to make it support GPU data. I was looking up the Partial Correlation function, and according to Wikipedia you first calculate multiple linear regressions between the different independent variables and the dependent variable, then you calculate the correlation between the residuals. with this in mind, intuitively i'm not so sure solving systems of equations really lends itself to GPU computing since it's a very serial operation (at least using Gaussian elimination). if you want to make your own gpu-enabled partialcorr, you'd want to look at good algorithms for solving systems of equations on the GPU first, then do the correlation calculations. Even looking at the partial correlation formula though, i'm not so sure you'd see a big speedup on the GPU since it looks like you'd be able to use some fast element-wise operations to get the result, something like: numerator = N*sum(eX.*eY) - sum(eX)*sum(eY) den1 = sqrt( N*sum(eX.^2)^2 - (sum(eX)^2 ) den2 = sqrt( N*sum(eY.^2) - (sum(eY)^2) denominator = den1*den2 pc = numerator/denominator
That's very different from what OP is talking about.
It would help to know what errors you're getting. I'm actually guessing quite a few of them. A couple of things: 1. You can't have any code above your function declaration in an m file, otherwise you have a script 2. Your functions takes arguments, you're not calling it with arguments 3. fzero takes a function handle, not the name of a function as a string
[diff works too](https://www.mathworks.com/help/matlab/ref/diff.html)
Unfortunately, there is not yet a good-for-all AD (Automatic Differentiation) package for MATLAB, IMO. You are likely to make some compromise to use one. FYI: [autodiff.org](http://www.autodiff.org/?module=Tools&amp;language=MATLAB) is maintained by researchers in this field, which has a list of MATLAB AD packages, including the ones you mentioned. But a very interesting AD package (CasADi)[https://github.com/casadi/casadi/wiki] which also supports MATLAB is listed under Python packages. Below is a summary of my personal experience with some of these packages. Since I only deal with a limited range of computations, my views could be highly biased, especially on performance. To begin with, I'd suggest (ADiMat's web interface)[http://adimat.sc.informatik.tu-darmstadt.de/]. By uploading your MATLAB function, it can generate either forward mode or reverse mode derivative code. __Pros__: Freely available. You can use ADiMat without installation. The generated standalone code can run in any MATLAB/Octave environment. Use of ADiMat is non-intrusive, that is your code and the generated derivative code are separated and decoupled, thus easier to maintain and refactor. __Cons__: Depending on your implementation, the generated derivative code can be 60-250 times more expensive than your function. ADiGator is also a code generation AD package. IMO, ADiGator provides the best sparsity exploitation feature. __Pros__: Freely available and open source. ADiGator conducts statement-level sparsity analysis before generating forward mode derivative code, which makes the generated code very efficient on a range of problems. Use of ADiGator is also non-intrusive. __Cons__: Only works in forward mode. Does not support use of rand() or other random number function (you can't apply ADiGator to computations like Monte Carlo). Though the generated code is fairly efficient, the code generation process can take quite some time for loops, like VERY VERY LONG, longer than the running time of the generated derivative code. Lastly, you cannot change input dimension once code is generated. You have to regenerate code for different input dimension. TOMLAB/MAD is a function overloading AD package. __Pros__: Stable __Cons__: Not free. Only works in forward mode. Depending on your implementation, derivative computation can be 500 times more expensive than your function. Use of MAD is intrusive, that is you need to insert MAD API calls in your code, making the code unable to run without MAD installation and a valid licence. (ADMAT 2.0)[http://www.cayugaresearch.com/admat.html] is another function overloading AD package, providing a wide range of features such as sparsity exploitation and structured Newton step computation. __Pros__: Stable. Compatible with MATLAB Optimization Toolbox. Supports probably the largest set of MATLAB built-in functions, including interpolation functions. __Cons__: Only one-year free licence. Insufficient debugging information in error reporting. Depending on your implementation, derivative computation can be 40-120 times more expensive than your function. Use of ADMAT 2.0 is also intrusive. 
I was able to modify it to accept gpuArrays today. I'll discuss later.
Your `y` and `z` are vectors/arrays, so `for j = 1: y` doesn’t work. Use this instead: for j = y ... end Or for y_idx = 1: length(y) j = y(y_idx) ... end And it’s a TERRIBLE and INHUMANE habit to use i,j,k as your iteration variable.
I've worked it out so now at least the plot works perfectly fine and shows the data as expected! The line of code I'm using looks like this: Time = datenum(a{1},'HH:MM') and I had to add the following lines to my plot so it displays the time on the x axis: hold on datetick('x','HH:MM') % give the a xaxis time label ticks.. Thanks a lot! :)
I wrote my own. It sucks.
Well done! That looks exactly right. Although, I'm not sure you need the "hold on" there. 
 k=4; B = [1,2,2.3,3]; rad = 0.5; Q=zeros(k,k); for n=1:k X = B(n); %Q(n,:) = ((X+rad)) &gt; B &gt; ((X-rad)); Q(n,:) = abs(B - X) &lt;= rad; end Q = Q - eye(k) Try the above. T=sum(Q); if T &gt; 0 disp(T) end seems useless and Q(n,:) = ((X+rad)) &gt; B &gt; ((X-rad)); was confusing.
I've tried it without the "hold on" and it still works. Thanks - one line less means a smaller margin of error haha. Sometimes you're just too deep in and you're trying around for too long so you're not able to figure out "obvious" things. Just writing it down and being point in the right direction by other people helps a ton. Thanks again for contributing :)
Cheers, that works. My final code ended up looking like this, with your idea integrated k = 10000; rad = 1; V=1; for m=1:floor(1/eps) if V&gt;0 B = 2*rand(k,1)-1; B = (1e9*1e-3)*B; B = round(B, 0); Q=zeros(k,k); V=0; for n=1:k X = B(n); Q(n,:) = abs(B - X) &lt;= rad; V=V+sum(Q(n,:)); end V=V-k else end end Now to let that run for, erm, quite a while :P
You need to use plot(data(1,:),data(2,:));
thank you 
I'm slightly surprised your code is working. Usually MathCAD requires data(:,1) to access all rows in column 1. So your code should be: plot(data(:,1),data(:,2))% if you want lines connecting your points scatter(data(:,1),data(:,2))% if you just want a point cloud
&gt; And it’s a TERRIBLE and INHUMANE habit to use i,j,k as your iteration variable. What‽ That's exactly what i,j,k are most commonly used for in my experience. Unless we're counting hand written Cartesian coordinate vector math. 
i = sqrt(-1) The proper convention is to use ii, jj, and kk
Bc that makes your code hard to understand and read. Who can tell what do they mean
This I've seen and can get behind, especially in a language, like matlab, where imaginary numbers can be stored in a variable so easily.
Eh, every programming language I've worked with everyone knows first loop is i second is j etc. It's a very bet common code style. The above comment using ii, jj, etc I can understand.
+ Thanks for the help, I figured out what was wrong and got it working now
To answer this Question: The allocation for C is incorrect. This code does not throw an error message because y and z are the same length as nrow and ncol and C is square. C(k,l) will only store the solutions for the last iterations of I (ncol) and j (nrow). A 4 dimensional array is cumbersome, but if it makes sense to you what the hey. Edit this C = zeros(nrow,ncol,length(y),length(z)); Edit this C(j,I,k,l) = your long and unsupressed equation 
Thanks but i figured that out after i used Demoni's code
No worries. Matlab was tricky for me to learn but it's an extremely powerful tool for my research work. I'd also recommend looking into the attached Matlab link about types of plots and the subplot function. https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html
Well in the context of MATLAB, bc it is often used to solve real world problems etc., I think i j k are worse than more expressive variable names. I have been using matlab for labs and projects, and I have never use i j k over something like layer_idx. The min I will use is idx
Create an array containing the handles of those scripts. Then use a function (such as randperm) to get the random numbers you need. Then you can use those random numbers as indices to the vector with script handles.
So if my array was a = ['stim1', 'stim2', 'stim3'], how could i correspond that to randperm(3)? 
scripts = {@test2, @test3}; p = randperm(length(scripts)); for ii = p scripts{ii}(); end
Thank you I will attempt to give this a go!
I have ran into another problem - I get an error message saying "Attempt to execute SCRIPT as a function". Is it easy to convert scripts into functions and if so, how? 
The above code works on my end, what matlab version are you using?
Matlab 2017 - could it be that my scripts are too complex? They involve reading and displaying images within a figure window
My bad - poor code typing on my part. Think I've got it working now! Thank you so much!
Im not familiar enough with simulink to know if this would work, though I suspect this just implements a numerical derivitive of some sort, which is not what im going for (read the "what is auto-differentiation" section in the main post to see why). At any rate, the machine that this code will ultimately be run , so this wouldnt work for me regardless.
No where near enough information for us to help you.
Please see our [rules for submitting homework](https://www.reddit.com/r/matlab/comments/462uwe/submitting_homework_questions_read_this/). Specifically, please share the code you've written so far, as well as any error messages you're getting. 
I really appreciate all the great information. I too found autodiff.org to be quite useful, and that is where I found most of these. I saw ADMAT too, just didnt include it in this list, though it seems that might work well for me. The one year license is a bit inconvienent but Im trying to get the stuff im working on finished by then anyhow, so its not too bad. idk if you have any experience with this type of problem, but the immediate usage scenario is for a large scale inverse problem (my dataset is ~2TB) where the forward model is based on (approximate) wave propagation physics. At the very least this involves a few matrix operations and a convolution at every step, though I would prefer to implement a full wavefield simulation at each step if possible (which auto-differention might come in handy for). (note: "full" means elastic wavefield propagation im media with orthorhombic or higher symmetry, possibly with or possibly without attenuation). I dont suppose you have any guess on how well something like that would work on these auto differentiation functions, do you? (Im expecting a "no" unless you happen to do work that is related to wave propagation, but figured id ask on the off chance that was the case.) Thanks again. I really do appreciate all the good info.
I imagine I *could* write my own if I absolutely had to or I was getting paid good money to do so, but for my current needs writing my own isnt even something im considering - I just dont have the time (and I fully imagine that would be a rather involved project). Out of curiousity, one think that Im still confused on is HOW you can get the equivilant processor operations for a given built-in function. If there some option to export these that I dont know about? Or are there fairly standard "recipies" for these operations that dont change (much) from program to program nor from processor to processor? Or is there some way to analyse the compiled code that is internally compiled and executed and get on output that resembles Assembly language?
I'm not getting the same error you are. You define `B` as `[3; 5; 8]`, which is a 3x1 column vector. Then later, you (effectively) define your `for` loop to be `c = B(1:3, 3)`. That means you're asking for the *third column* of a single-column vector. The error I get is, `Index exceeds matrix dimensions` because there is no third column. That said, your indexing later is not going to work. You define `i = 1:3.'`, which is a column vector of `[1; 2; 3]`. Then you define your loop variable to be (I'm assuming you want) `c = B(i, 1)`. This a redundant assignment; if you want `c` to cycle through each of the values in `B`, then you can just do `for c = B`. No need to redefine. However, you later use the line `H(c) =`. This is wrong, because `c` is cycling through **values** of `B`. `c` is not `1, 2, 3`, instead `c` is `3, 5, 8`. On the first loop, you'll assign `H(3) = `, on the second you assign `H(5) = `, and so on. Further, you try to do `A(:, 2:c(i))`. Remember that `i` is essentially asking for the first three values, but, at any point in your loop, `c` is a *singular element* that represents **one** of the elements in `B`. That is, you *can't* do `c(i)` because there aren't three values to pick. Finally, it looks like you're trying to do the single-liner version of your problem *inside* a row-by-row loop. You call: `sum(A(:, 2:c(i)), 2)` I'll give the entire English translation and then show how the translation is done. You're asking for, "The sum of every row, for all rows in A, spanning columns 2 to columns `c(i)`." "The sum of every row," from `sum(~, 2)`, where `~` could be anything, "for all rows in A," from `A(:, ~)`, where `:` selects all rows with an arbitrary condition on columns `~`, "spanning columns 2 to columns `c(i)`," from the `A(~, 2:c(i))`. If there were a way to "expand" `2:c(i)` to something like `2:B`, that resulted in `[2:B(1); 2:B(2); 2:B(3)]`, which there isn't any easy way to do (maybe with `cellfun`?) then this would be a one-liner. It doesn't work like that, though. What I think you're looking for instead is something that loops through each *row* in `B`, and then updates each *row* in `H` with the value of the sum of each *row* of `A` according to the value of `B` for the particular row. Something more along the lines of: for currentRow = 1:numel(B) H(currentRow) = sum(A(currentRow, 2:B(currentRow)); end You don't need an `i`, or an `s`, or a `c`. 
"Subscript indices must either be real positive integers or logicals." Hmmmm wonder what that must mean.... 🤔🤔🤔🤔🤔🤔
Mine is based on overloading rather than source transformation, so it's very far away from creating mex/c/assembly from a matlab file. It's not that bad when dealing with large arrays and multiple derivative vectors, because the overhead from creating objects and calling small wrapper function stays relatively small. The code for dealing with subscripts was a nightmare, though.
You have to assign values to variables before you can evaluate expressions that use those variables.
It's unusual to use matlab for something like this. Why not C?
The first argument in ode45 needs to be a function handle. Put an “@“ in front of VanDerPol.
Thanks! The plotting worked properly once I changed that.
&gt; orthorhombic Unfortunately, I don't know much about the wave propagation physics. But allow me to ask few questions that might be relevant to the choice of an AD package. Correct me if I'm wrong. My guess is your inverse problem is somewhat of the iterative form x(:,n+1) = x(:,n) - J(x(:,n)) \ F(x(:,n)) where x is the state you want to solve for, F is your forward model, and J is the Jacobian of F or an approximation of it. Q1: Does your "full wavefield simulation at each step" correspond to my index n here? or your "each step" corresponds to some iteration inside the forward computation of F, probably indexed with time t? Answer to this question can help me understand on what level you plan to apply AD. Q2: Does your forward model F require a linear solver for matrix A or a nonlinear solver for function f. u = A\v % linear A*u = v u = argmin |f(u)-v| % nonlinear f(u) = v If a nonlinear solver is required, will AD be used to solve the nonlinear equation? If both F and f need AD, then you might want the package to support recursive or multi-level application of AD. Q3: What is the input and output dimension of F? As you might already know, this will determine if you need an AD package that provides reverse mode. Q4: Is there sparsity to exploit. This question is less straightforward to answer, and only need to be considered when performance is not good enough. But since you data is very large, you might need to think about this eventually.
Howdy, You mentioned that you were going to let this run for quite a while and if it's something that you're doing often on large data-sets I thought maybe you'd prefer a faster way (potentially... I haven't tested!). Feel free to stop reading now if you're happy doing it the way you are! For each node you only really need to check the distance to it's nearest neighbour right? There are actually faster ways of finding this graph than checking the distance between every pair of points! One method would be to use Delaunay Triangulation which splits your 3D points up into a mesh of tetrahedrals in a particular way. No need to get bogged down in the deets, but basically the nearest-neighbour graph is a subset of these edges, so if we check all these edges we'll be sorted! And people have made efficient codes to do this for us. Example code below if you're interested. Not saying it's the most efficient way, but I think (hope) it's faster than your method :) % Let 'X' be your 3D point cloud % ... lets just make 1 million random points for now np = 1e3; X = rand(np,3); % Find the Delaunay Triangulation and the edges thereof. DT = delaunayTriangulation(X); E = edges(DT); % Find the length (squared) of these edges % i.e. l^2 = dx^2 + dy^2 + dz^2 l_squared = sum((X(E(:,1),:) - X(E(:,2),:)).^2,2); % Determine which edges are smaller than a set sphere radius % note: do you actually want this as the radius? Or twice the radius of your spheres? max_radius = 0.5; is_small = l_squared &lt; max_radius^2; % make a list of the points at either end of the edges which are too small % ignore repeated values P_close = unique([E(is_small,1) ; E(is_small,2)]); % so P_close now contains the index of all the points which are too close to others! % so for example we could pull out the spatial locations of all those that are too close, or those that aren't X_contact = X( P_close,:); X_free = X(~P_close,:); On my shitty machine it takes roughly the following amount of time: * 1,000 points = 0.02 secs * 10,000 points = 0.5 secs * 100,000 points = 2.4 secs * 1 million points = 30 secs
If what you want is for MatLab to read the bits of a number as a different format, then I think typecast is the only way. As for the memory spike you see, it sounds like maybe what you're seeing is due to MatLab copying the data (rather than simply interpreting it differently in place). I'm not sure about this though. I don't know if there's a fix for that. As for bitget: You can do this vectorized with respect to samples, if not bits. E.g.: A = randi(intmax('uint32'), 1000000, 1, 'uint32'); X = logical(bitget(A,1)); X will be size 1000000x1, containing the first bit of each element of A. You could easily loop over that. I don't know if that helps. 
Match the initial condition and then optimize the parameters of the differential equation to best fit the timecourse 
How do I optimize it if I can’t give it a goodness of fit value?
This is probably the most well characterized problem I’ve seen posted here. I’m not sure how anyone can help you more than the question itself. It basically walks you through the solution. What don’t you understand? Be precise. 
Define your own goodness of fit... Euclidean distance is the standard first approach 
Thanks.
A solution to a DE is not a curve fit. A solution to a DE may be something you fit to data, but numerically solving the DE is not the same as performing a fit. Check the Matlab functions related to optimisation. They should be easy to locate in the documentation. 
Read your code. Think about what each step is doing. If you're not sure, then read the documentation and/or execute the code bit by bit in the console to understand what it's doing. Think about what you want to happen and how to achieve that. Read error messages. They're not written in klingon. They tell you what went wrong. Figure out what caused the problem and solve it. 
Used that loop instead, got “subscript indices must either be real positive integers or logical” 
Do you mind pasting your code up here?
of course! The whole purpose of the code is to be able to plot concentrations due to a 3D Surf Coordinate grid C being our Z-axis. clc; clear all; close all % GPE will only work work for cloudy conditions and in rural area % downwind % the used should be able to input the length of x and y x = 0:250; y = -125:125; %constant emission rate Q = 0.1929; %constant z = 0:250; % constant effective stack height H = 0; % constant p p = 0.15; % constant stability class D sta = 3; % constant wind speed at 10 m U = 3; % to find sigma x and sigma y a=zeros(size(x)); b=zeros(size(x)); c=zeros(size(x)); d=zeros(size(x)); if sta == 3 % Class D ind=find(x&lt;300 &amp;x&gt;0); a(ind)=34.459;b(ind)=0.86974; ind=find(x&gt;=300 &amp; x&lt;1000); a(ind)=32.093;b(ind)=0.81066; ind=find(x&gt;=1000 &amp; x&lt;3000); a(ind)=32.093;b(ind)=0.64403; ind=find(x&gt;=3000 &amp; x&lt;10000); a(ind)=33.504;b(ind)=0.60486; ind=find(x&gt;=10000 &amp; x&lt;30000); a(ind)=36.650;b(ind)=0.56589; ind=find(x&gt;=30000); a(ind)=44.053;b(ind)=0.51179; c(:)=8.3330; d(:)=0.72382; end sZ=a.*(x./1000).^b; sZ(find(sZ(:)&gt;5000))=5000; theta=0.017453293.*(c-d.*log(x./1000)); sY=465.11628.*x./1000.*tan(theta); nrow= length(x); ncol= length (x); [nrow ncol]; C=zeros(nrow,ncol); for I=1:ncol for j=1:nrow for k=1:y for l=1:z C(k,l) = (Q/(U*sY(I,j)*sZ(I,j)*2*3.14))*(2.72^((-(y(k)^2))/(2*(sY(I,j)^2))))*(2.72^((-(z(l)-H)^2)/(2*(sZ(I,j)^2)))) end end end end % then we need to plot in mesh(x,y,C)the bottom is an example x; y; % nZ=C.*[1:1001] % [xx,yy]=meshgrid(x,y); % z=xx'*yy % surf(x,y,C) % % shading interp % colorbar; % xlabel('X Axis'); % ylabel('Y Axis'); % zlabel('Z Axis'); 
You might want to check out the Kill A Watt Meter, plug it into the wall and plug your device into it, you can see the power (instant) and energy (over time) use. You can get it from Amazon and other retailers, here's the link to the manufacturer: http://www.p3international.com/products/p4400.html
ehhh, your code is slightly unreadable with reddit's markdown formatting... Could you try adding 4 more spaces in front of each line of your code?
clc; clear all; close all % GPE will only work work for cloudy conditions and in rural area % downwind % the used should be able to input the length of x and y x = 0:250; y = -125:125; %constant emission rate Q = 0.1929; %constant z = 0:250; % constant effective stack height H = 0; % constant p p = 0.15; % constant stability class D sta = 3; % constant wind speed at 10 m U = 3; % to find sigma x and sigma y a=zeros(size(x)); b=zeros(size(x)); c=zeros(size(x)); d=zeros(size(x)); if sta == 3 % Class D ind=find(x&lt;300 &amp;x&gt;0); a(ind)=34.459;b(ind)=0.86974; ind=find(x&gt;=300 &amp; x&lt;1000); a(ind)=32.093;b(ind)=0.81066; ind=find(x&gt;=1000 &amp; x&lt;3000); a(ind)=32.093;b(ind)=0.64403; ind=find(x&gt;=3000 &amp; x&lt;10000); a(ind)=33.504;b(ind)=0.60486; ind=find(x&gt;=10000 &amp; x&lt;30000); a(ind)=36.650;b(ind)=0.56589; ind=find(x&gt;=30000); a(ind)=44.053;b(ind)=0.51179; c(:)=8.3330; d(:)=0.72382; end sZ=a.*(x./1000).^b; sZ(find(sZ(:)&gt;5000))=5000; theta=0.017453293.*(c-d.*log(x./1000)); sY=465.11628.*x./1000.*tan(theta); nrow= length(x); ncol= length (x); [nrow ncol]; C=zeros(nrow,ncol); for I=1:ncol for j=1:nrow for k=1:y for l=1:z C(k,l) = (Q/(U*sY(I,j)*sZ(I,j)*2*3.14))*(2.72^((- (y(k)^2))/(2*(sY(I,j)^2))))*(2.72^((-(z(l)- H)^2)/(2*(sZ(I,j)^2)))) end end end end % then we need to plot in mesh(x,y,C)the bottom is an example x; y; % nZ=C.*[1:1001] % [xx,yy]=meshgrid(x,y); % z=xx'*yy % surf(x,y,C) % shading interp % colorbar; % xlabel('X Axis'); % ylabel('Y Axis'); % zlabel('Z Axis'); 
Honestly I don't know where to start. I guess I'd just leave you the code that works (I think). I am still not sure why you use `sZ(ii, jj)` when `sZ` is just a 1x251 vector. Same for `sY`. I just changed them to `sZ(jj)` and `sY(ii)`. That's all I can help, and whether the correct result comes up or not depends on your coding logic. clc; clear all; close all % GPE will only work work for cloudy conditions and in rural area % downwind % the used should be able to input the length of x and y x = 0:250; y = -125:125; %c onstant emission rate Q = 0.1929; % constant z = 0:250; % constant effective stack height H = 0; % constant p p = 0.15; % constant stability class D sta = 3; % constant wind speed at 10 m U = 3; % to find sigma x and sigma y a = zeros(size(x)); b = zeros(size(x)); c = zeros(size(x)); d = zeros(size(x)); if sta == 3 % Class D ind = find(x &lt; 300 &amp; x &gt; 0); a(ind) = 34.459; b(ind) = 0.86974; ind = find(x &gt;= 300 &amp; x &lt; 1000); a(ind) = 32.093; b(ind) = 0.81066; ind = find(x &gt;= 1000 &amp; x &lt; 3000); a(ind) = 32.093; b(ind) = 0.64403; ind = find(x &gt;= 3000 &amp; x &lt; 10000); a(ind) = 33.504; b(ind) = 0.60486; ind = find(x &gt;= 10000 &amp; x &lt; 30000); a(ind) = 36.650; b(ind) = 0.56589; ind = find(x &gt;= 30000); a(ind) = 44.053; b(ind) = 0.51179; c(:) = 8.3330; d(:) = 0.72382; end sZ = a .* (x ./ 1000).^b; sZ(sZ &gt; 5000) = 5000; theta = 0.017453293 .* (c - d .* log(x./1000)); sY = 465.11628 .* x ./ 1000 .* tan(theta); nrow = length(x); ncol = length(x); [nrow, ncol]; C = zeros(nrow, ncol); for ii = 1:ncol for jj = 1:nrow for k = y for l = z C(k+126, l+1) = (Q / (U * sY(ii) * sZ(jj) * 2 * 3.14)) * (2.72^((-(y(k+126)^2)) / (2 * (sY(ii) * 2)))) * (2.72 * (-(z(l-H+1)^2) / (2 * (sZ(jj)^2)))); end end end end % then we need to plot in mesh(x,y,C)the bottom is an example x; y; % nZ=C.*[1:1001] % [xx,yy]=meshgrid(x,y); % z=xx'*yy % surf(x,y,C) % shading interp % colorbar; % xlabel('X Axis'); % ylabel('Y Axis'); % zlabel('Z Axis'); 
[removed]
Can you define those terms?
Bandwidth is upper and lower frequency. Frequency response is the same. What is the code?
Hey, it's the same guy that posted the last low effort, hardly any information question here.
Dude, I really don't understand what I'm doing. Would you mind helping me with it?
I asked before - Can you define those terms? You said, " &gt; Bandwidth is upper and lower frequency. Frequency response is the same. What is the code? What do you mean upper and lower frequency? If frequency response is the same, why do they have two different names? *This is not a free homework website.* When I asked if you could define those terms, what I meant was can you provide the formulas used to calculate those terms (mathematical definition). The formulas should give you the template you need to solve the problem. If you have questions about how to pull specific pieces of information (a peak frequency, a -3dB crossing, etc.), then those are questions people here would be more likely to answer. But just saying, "here's X what's the answer?" is not showing anyone what you need help with. Do you need help with the mathematical definitions of the terms? Do you need help pulling information from a plot? Do you need help converting the mathematical formulas to Matlab expressions? Tell us what you need help with and we can help, but expect *help* and not an *answer*. 
 Bandwidth is squishily defined since real signals, technically, never reach zero energy. There are different conventions for defining bandwidth. A very common one is the 3 dB point, which is where the signal power has decreased by 3 dB from its average passband value. Does this help? If not, clarify the parts you are struggling with in your reply. 
&gt; We are here to help, but won't do your homework or help you pirate software. &gt;The effort you put into asking a question is often matched by the quality of our answers.
Contact Mathworks support. They've been amazing every time I've needed to contact them in the past, and have never given me any grief on asking for a toolbox trial. Once I got basically a double-length trial as I had upgraded Matlab and needed the upgraded toolbox license. They should not only be able to grant a trial, but should also be able to give you purchasing information.
It's not really clear what you're asking. You want to plot a circle? Or you have points that lie on a circle and you want to plot them? You can plot a circle using the rectangle() function. I know that sounds odd, but check out the documentation. You're essentially making a square with rounded corners where the corner radius is equal to the half-width of the square. 
I've found a couple complex numbers which are roots of another complex number. So their modulus is the same, only the angle(argument) is different. I want to plot them on a graph, and on the same graph i want to plot a circle that includes all those points. 
Can you use a different compiler? https://www.mathworks.com/help/matlab/matlab_external/install-mingw-support-package.html
I'd say, keep the structure the same, but change how you compute P. So basically you want one long vector for P containing the indices of your script and then shuffle that vector. I.e. make a vector of p = [1,2,3,1,2,3,1,2,3 (repeat for 20 times)]. And then simply shuffle that vector. Hints: repmat(1:2, 1, 2) creates: [1, 2, 1, 2]. Shuffling can be done by making smart use of the randperm function. All in all you can do this in 2 lines of code.
Looks like your scope block isn’t connected to the add block.
I am new to matlab but I thought randperm inputs have to be scalar? So I wouldn't be allowed to pass the p array in the randperm function argument? I tried something like this: scripts = {@test1, @test2, @test3} p = [1, 2, 3, 4, 5]; randperm(p); for ii = p scripts{ii}(); end but no luck.
i've connected it correctly , still displaying 10+10 as 2 
What are you trying to do? Where does the 10 and 1 come from? If you just want to test it, add constant blocks with those values, connect them to the two input ports and connect the output to an output port block. Then you should see something on the viewer.
Indeed, the inputs have to be scalar. The length of a vector is a scalar number. How do you think this can be used to shuffle a vector?
They are constant blocks attached to the input ports . please view the image attached . 
On mobile right now, you might wanna check out pchip(), and resample(). 
Compare the bode plot of continuous vs. discrete version. If the freq. matches up pretty well then u know it's something wrong with the analytic expression. It's been a while since I've done this but if I remember correctly there is a lot of algebra in the transform. Might be helpful to use a symbolic solver to check ur steps
Thanks! I think pchip was exactly what I'm looking for!
The short answer is that im better with Matlab than with languages like C and fortran, and use it quite often for analyzing data of this type and will almost have more projects where (if nothing else for initial development and testing) being able to quickly load data will save a bunch of time. The alternate slightly longer answer is that the project I immediately plan to use this on I have spent &gt;1000+ hours working on, and it is entirely in Matlab. In this projects current implementation, the vast majority of the run time (probably 90% or more, not counting data loading) is from a handful of dense matrix multiplications (matrix size ranges from a few hundred to a few thousand per dimension and matrices are square). that loop over 1 dimension of a 3D dataset, so Matlab is actually just about as fast as C would be.
cheers :) 
https://www.mathworks.com/help/matlab/ref/quiver.html
&gt; As for the memory spike you see, it sounds like maybe what you're seeing is due to MatLab copying the data (rather than simply interpreting it differently in place). I'm not sure about this though. I don't know if there's a fix for that. This almost perfectly describes my thoughts on the issue. Unless there is some sort of weird pre-processing of IEEE data I dont really see what else it could be. (ex: something weird like caching a version of the digits in the values in base 10, though Im not sure reading base 10 values would actually be faster and could easily be slower, since you probably either need to encode things as base16 and increase the required bit count by 1.6x, or you do some sore of clever encoding but then you need a way to decompress the values back to base10 that is faster than converting base2 to base10 in the first place). If this was a .m function this would be the behavior that is exhibited, since it will automatically make a copy of the input when if you make any changes to the variable representing it. There it makes sense, since you could conceivably need the variable intact in the original function (even if it is supposed to be an in-place replacement, functions arent instantaneous and you wouldn't, for example, want a half replaced variable if you stopped the function before it finished). However, it seems like the conversion I want to do should literally be instantaneous, since (unless Im missing something) literally the only thing that needs to happen is that you change a few bits in the attribute that defines data class for a given variable. Though, if anyone else can confirm whether any additional "pre-processing" is required before you read new data for the first time as a new class id appreciate it, since I dont know quite enough about Matlab's lower level workings to say that for certain. &gt; As for bitget: You can do this vectorized with respect to samples, if not bits. I was aware of this (though appreciate the suggestion nonetheless). I actually use that already to extract the sign bit (the current version of the code im hoping to improve/replace analyses the actual numbers, so this lets me just assume that they are all positive numbers and then add the negative back in afterwards since the sign bit doesnt change). The issue for more general usage though is that this loop would read bits from memory in the following order: 0, 32, 64, 96, 128, ... , 32*N, 1, 33, 65, 97, 129, ... , 32*N+1, 2, 34, etc. I havent run tests, but this will undoubtedly add time to the reads, and perhaps quite a bit. This is sort of like adding data to a matrix one row at a time rather than one column at a time for a REALLY big matrix. Also, reading one bit at a time seems like it would still require (at least) 2x the memory of the raw uint32 data, which is the main reason I was trying to find an alternative anyways.
Okay so you know how to plot points on a plane already since it was in your OP. To plot the circle, look at the documentation for the rectangle() function. 
Where did you get the idea to use x+q? You should refer to whomever or whatever have you that idea. In general, the function you should use to fit your data depends on where you got the data. If you expect it to have a linear trend, fit a line, if you expect a quadratic trend fit a quadratic, etc. 
When you searched the documentation for this and found the interp functions, what was wrong with them for your application? 
Ok, I do have one thought that might help. As someone else mentioned, this kind of thing might be easier to do in C. I don't really know any C, but I do have MatLab Coder, and it's been reasonably good at speeding things up for me on occasion. Have you considered trying to do something of the sort? If you'd like, I could also run your code through Coder and send you the generated source code, which you could compile to a mex function that might go faster.
When you see `exp(A*dt)`, you are doing an element-wise exponentiation. This is incorrect. You need to use *matrix exponentials*, not element-wise. Wolfram Alpha gives the [same result as Matlab](http://m.wolframalpha.com/input/?i=MatrixExp%5B%7B%7B0%2C+1%7D%2C+%7B19%2C+-2%7D%7D*0.3%5D). On mobile so I'm not going to write much more about it. You also use matrix exponentials when calculating the state transition matrix, which is a super handy tool for state feedback controls. 
Given a plot or a transfer function or what? 
Alternatively, you can define a fit function and solve for the coefficients with mldivide.
&gt; I'm still not 100% sure what you're trying to do The goal is to quickly convert between IEEE and IBM floating point values (My data source is in 32-bit IBM float format). These Are similiar in format, though not quite identical: 32-bit IEEE floats use 1 sign bit, 8 exponent bits (base 2), and 23 bits for the mantissa. 32-bit IBM floats use 1 sign bit, 7 exponent bits (base 16) and 24 bits for the mantissa. Currently, Im converting between these by more or less the following method: * 1) get the exponent and extract the sign bit. * 2) divide the value by the exponent to get the fractional part * 3) apply bias and convert to uint32 (which rounds to the nearest integer). The first several bits should be zeros or else you will have an overflow issue. * 4) bitshift the exponent by 23/24 bits and apply it using bitor (all these values should be zero in the integer representation of the fraction) * 5) set the sign bit using bitset and check for some special cases (NaN, Inf, etc.) What I want to do is something like this: (Note: this is all done with uint 32's. If converting from doubles the first step is converting double--&gt;uint32. If converting from IBM floats (which are read as uint32s) then the last step is converting to doubles). * 0) if IEEE --&gt; IBM, convert double data type to uint32 data type without changing the bits in the data. * 1) do in-place conversion to convert the exponent from 7-bit base16 to 8-bit base2 (or vice versa). This will (for IBM-&gt;IEEE) use one or two of the most significant bits on the mantissa to figure out where the base2 IEEE's fall within a base16 IBM range. * * (Note: IBM's subdivide a single exponent over a range of 16x using 2^24 values. IEEE's subdivide this same range using 4 exponents (1--2, 2--&gt;4, 4--&gt;8 and 8--&gt;16), with each subdivision broken up into 2^23 values --&gt; the equivalent 16x range is broken up into 2^25 values versus 2^24 in IBM floats. This gives IBM's (on average) half the precision and twice the range, though since the entire 16x range is broken up linearly (instead of only 2x chunks in IEEE standard) values at one end of a 16x IBM subdivision block have about equal precision to IEEE floats, but at the other end of a 16x block are quite a bit more spaced out). * 2) get the integer representations of the exponents, and get the relative difference in how large of a space is represented by the mantissa in the old vs new format. IEEE's always are a factor of 2x, but that same factor of 2 could be one of 4 subdivisions of a 16x block: 1-4.75x --&gt; 4.75x, 4.75-8.5x --&gt; ~1.79x, 8.5-12.75x --&gt; ~1.44x, 12.75-16x --&gt; ~1.306x. Divide these by 2 to get the range relative to the equivalent IEEE range. * 3) Take the integer value represented by the mantissa (use bitand to implement a mask to only extract bits from the mantissa), subtract the integer representation of the exponent in the old data type, then multiply by the range difference (i'll have to see if this can be done without converting to/from floats), then add integer representation of the exponent for the new output data type. This should convert the mantissa to the correct value, since it will start at the right place and end at the right place for the max and min possible mantissa values, and the intermediate range is subdivided linearly. * * At this point, the bits should be in the right order and the values will be uint32's. * 4) if IBM --&gt; IEEE, convert uint32 data type to double data type without changing the bits in the data. I admittedly haven't coded this up yet and am still mentally working out the finer details, but I think it should work and should be possible to implement with literally a handful of additions and multiplications (6 or so???), and should only require ~1.25x the memory of the raw data (I need to have both exponents, but that only adds ~8 bits or so. Everything else is, in theory, doable with in-place replacement). As such, if I can avoid a brief spike to 2x I would like to. This is especially relevant because the system I'll likely be working on is a bit unique in that it has ~10x more memory than swap space, so its not too hard to imagine a 2x spike in memory usage causing Matlab to crash because of an out of memory error (sure this can be moderated in theory, but in practice it will happen now and then even if Im being careful about how I block my data for this operation).
To follow up, `expm` is what OP should have used.
You're correct, the Simulink Derivative block is a simple backwards difference.
It could be a transfer function, if it's possible from what the butterworth filter return in matlab. I use the function butter in matlab. 
Oh okay! So I could use: p = [1, 2, 3, 4, 5] randperm(length(p)) That would work wouldn't it?
 p = randperm(length(p)) Would indeed shuffle it. If you want each script to be called 20 times, then you need a vector containing the numbers 1 to the number of scripts, where each number occurs 20 times. p = repmat(1:length(scripts), 1, 20) p = randperm(length(p)) Would do the trick.
Found the following, though you may have seen this before: https://www.mathworks.com/matlabcentral/answers/94074-is-it-possible-to-read-seismic-data-or-convert-ibm-float32-to-ieee-float-32-in-matlab-7-8-r2009a I can't think of anything else, but I'll keep it in the back of my head for a bit.
That settles it, my bad, thank you very much!
Thank you so much!!! Can I pm you with further questions?
Sure
This is a toolbox with dozens of files, what do you expect in terms of "how does it work?" From the overview: * Fit the circle of chrome sphere from manual extracted points. * Find lighting direction from given chrome sphere. * Estimate light strength or refine lighting matrix by solving a nonlinear least squares problem. * Perform photometric stereo to recover albedo and normal map. * Recover depth map from estimated normal vector field.
Thank you, could you tell me what's going on in photometric stereo file?
There is a PDF in the toolbox that literally walks you through the algorithm.
Hey, just a short feedback. Eventually after a long time my brute force way gave good results that I'm gonna use, now I'm moving on to a different problem where I will not be able to apply these partial data set evaluations yet. But I will definitely save this post and apply it whenever I'll have to do these type of things again. So thanks again and I appreciate the time you took to reply earlier. 
Yeah I changed the compiler to the mentioned one but apparently Techilla can't be used on the Student Edition of MATLAB:(
I'm guessing 0:dy:width-dy &amp; 0:dx:length-dx are not the same size. I'd break each of them out into intermediate calls and check that they are the same size and what you expect them to be. e.g., widthRange = 0:dy:width-dy; lengthRange = 0:dx:length-dx; if dim(widthRange) != dim(lengthRange) disp("Dimension mismatch!") endif I don't have matlab in front of me, so take code with a grain of salt.
Did you test the actual code you posted? Because it should error on line 2, when you use length and dx before they're defined. On mobile, so I'm not going to bother trying to pick apart a script that errors on line two, especially when your submission title says, "unknown error," but your text clearly states the error is on line 66 and is an error because dimensions don't match on your surf command. Also your file doesn't even have 66 lines. Also holy shit is the end statement on 52 really the terminator for the while on 19? Buzz, your formatting. Woof. 
"edit: grammar" and yet this still makes no fucking sense? If english isn't your first language I apologize, but I still have no idea what you're asking. This seems more of a "can you do my homework for me" question than a "I know how to do this conceptually but not quite in matlab" kinda thing. and thats not what this sub is for.
why not put the while loop in the Keyboard Press Callback? if it's super complicated, you can have it be a separate function withing your GUI.m file. Something like: function *make figure* keyboardPressCallback(handles) *change array* * manipulate array if change handles = manipulateChangedArray(handles) guidata(hObject, handles) end manipulateChangedArray(handles) *actual manipulations
If I was to guess, perhaps the keystrokes that you intend to be handled by the ‘pause’ function are instead being handled by the KeyPressFcn. Thus the pause function never receives the keystrokes that would trigger the next iteration. As someone else said, you might instead want to be doing more in the KeyPressFcn. If you are wanting to do things when a value changes though, you could also consider using an EventListener for a set event on a handle property (eg. Store the array as UserData or a custom property on one of your GUI’s handle, and set a listener to trigger whenever that value is changed)
&gt; s I have no idea why I didn't think of this, but this seems to work perfectly! Thanks! 
Thank you so much for explaining WHY this doesn't work. It's been driving me crazy. 
this question is pretty silly considering the answer provided by matlab is the same thing, just in a different form. why does the form of the solution matter? if you really wanted to simplify those terms with a phase phi, you could use regexp to parse the equation and find the location of the cos+sin, extract the appropriate values, and compute phi, and print the new solution in the form you desire.
yes, english is not my mother tongue. I just want the answer to be simplified in a manner that it would be like that, but i guess it's not possible. I'm just hoping that it is possible
it is concerning underdamped time response in control systems. I was just kinda hoping that there is a shortcut in matlab to show the manner of answer that i want. But i guess i have to do it manually, i'll try your suggestion thank you very much
it looks like your function is not returning any values FS(out) = fourierseries(in) set a debugging point near the top and follow the inputs. Why do you use 'n' as an input and as a for loop counter? If you must, clear n; after setting it to degree or replace 'n' in the function input with 'degree'. you are also using defining FS as a scaler after the first for loop and changing it in the second for loop. How big is FS? should the second for loop have an FS(n) or are you trying to make and change a scaler? good luck. may the debugger show you the way 
Thanks very much I'll give that a shot 
okay thank you, I'll try that. Do you happen to know how to do this? "In a file called Proj2Func3.m create the function which starts at (-pi,0) and goes linearly up to (-1,1), linearly down to (2,-4), and then linearly up to (pi,3)."
Apologies for the sloppiness, changed thing about and deleted some comments before putting it in pastebin. Should have double checked. Quite new to matlab as you have probably gathered.
I guess I could use something like &gt; system(find(contains(system.InputName,'output2')), find(contains(system.InputName,'input2'))) But that's very verbose...
without seeing your code, it's impossible to know why it stops training after 1 epoch. there's a slight chance you're loading the example CNN and the performance properties associated with the first data set, and a while loop breaks out because it's looking at the first performance properties, NOT the new ones you're trying to use. MathWorks has a page on Transfer Learning where they show an adaptation of AlexNet, which may be helpful to you.
This is every piece of code I use, I am just adapting a pre-existing image classification example to fit my dataset. FPDatasetPath = fullfile(matlabroot,'toolbox','nnet','nndemos',... 'nndatasets','FPDataset'); FPData = imageDatastore(FPDatasetPath,... 'IncludeSubfolders',true,'LabelSource','foldernames'); labelCount = countEachLabel(FPData) trainNumFiles = 400; [trainFPData,valFPData] = splitEachLabel(FPData,trainNumFiles,'randomize'); layers = [ imageInputLayer([512 512 1]) convolution2dLayer(3,64,'Padding',1) batchNormalizationLayer reluLayer maxPooling2dLayer(2,'Stride',2) convolution2dLayer(3,128,'Padding',1) batchNormalizationLayer reluLayer maxPooling2dLayer(2,'Stride',2) convolution2dLayer(3,256,'Padding',1) batchNormalizationLayer reluLayer fullyConnectedLayer(4) softmaxLayer classificationLayer]; options = trainingOptions('sgdm',... 'MaxEpochs',20, ... 'ValidationData',valFPData,... 'ValidationFrequency',30,... 'Verbose',false,... 'MiniBatchSize','1'... 'Plots','training-progress'); net = trainNetwork(trainFPData,layers,options);
Not an expert on image and stuff, but did your prof give you any algorithm to work with. After all this is not some simple task.
are you able to put a stop in trainNetwork and step through the code to see what condition is met that causes it to break? many of Matlab's toolbox functions are just .m files, so you may be able to open it up with: edit trainNetwork
Chemist here. I do not know. I guess these are inputs for your function? If not related, Iwould try a simple 'variable=start:increment:end'; call . I use matlab for image processing or data analysis. I never look for functions, only use well established expressions or write macros.
No such algorithm to work from unfortunately. Not even sure where I would start to be honest. Is there a piece of code/function in matlab that relates to probability? That might be a good starting point 
I appreciate the links, though I am already aware of those. Once upon a time a good number of my codes were based on those in SegyMAT, though at this point they have been so thoroughly re-written (multiple times) that Im pretty sure literally the only thing they share is a few variable names now. Coincidentally, someone else recommended that same link for the ieee2num code literally a few days ago. I tested it out and the version I wrote and am currently using is ~25x faster. As such I didnt actually play around with it much, but from a quick look over i seems it is reading things in hexa-decimal format as ascii characters and then converting those to get the exponent / fraction / sign and then multiplying to get the actual value. Conceptually this isnt all that different than what my current code uses, it is just much less optimized (in the defense of whoever wrote it - the code it from 1995, and considering how little RAM was available (and thus how little data you could actually load) the ascii conversion may not have been the bottleneck, but it (probably) is the main bottleneck now). As A side note I made up a prototype of the bit-manipulation version. Its not getting the correct answer yet, but I think this is just a matter of working out some bugs and wont increase computational costs. So far it is looking like it is a 2-3x improvement (and not yet fully optimized). It also looks like the whole memory spike with typecast might not matter so much - even though I think it should be possible to implement in theory with only 1.25x (or so) memory vs the raw data, Im not sure that it can be done (efficiently) in Matlab without spiking to 2x or higher. If there is going to be a memory spike regardless then it doesnt really matter if there is more than one memory spike. That said, im still kind of curious if its possible to force Matlab to do "true" in place replacement from directly within Matlab (i.e., not with MEX or by calling other external executables), but it looking like it might not matter much in practice.
What do you mean by matching? Pixel to pixel, or pattern match?
&gt; Q1: Does your "full wavefield simulation at each step" correspond to my index n here? or your "each step" corresponds to some iteration inside the forward computation of F, probably indexed with time t? Answer to this question can help me understand on what level you plan to apply AD. Potentially both, though the "step" I was referring to was an inversion iteration step in some sort of iterative inversion (which corresponds to the "n" parameter in the steepest-descent model update equation you have for updating model "x"). Currently the function I am intent to use AD with implements a modified conjugate-gradient approach to minimize some "error function", that uses an automatically resetting Polak-Ribierre method for getting the search direction at every inversion iteration and a step-size algorithm that I came up with to (usually) find the global minimum error based on the search direction on a given iteration. The derivatives of the error function are found numerically via finite differencing. So, the primary use of AD would be to replace the finite difference subroutine for getting the error function gradient (i.e., the J(x(:,n)) term in your equation). If the AD can give me an efficient 2nd derivative though (i.e., the Hessian matrix) I might switch to using Newton's method rather than CG for the model update search direction (perhaps not though - I tried doing this and approximating the Hessian with BFGS, and the results were MUCH worse than what I got with the modified CG method im using, so maybe the error really isnt close to quadratic and it wouldnt surprise me if CG is better able to handle that than newton's method is). &gt; Q2: Does your forward model F require a linear solver for matrix A or a nonlinear solver for function f. &gt; Q3: What is the input and output dimension of F? 2) Nonlinear, and maybe. The forward model (F(x(:,n)) in your equation) 3) Multiple input, single output. Inputs include the data, the current model, and the initial model. The output is a single global error value. The error function combines various sources of error (using user set weights). These include L2 data error, L2 model error (which contains the model to be close-ish to the initial model, hense why that is an input to F(x(:,n))), and a couple items that apply constraints to the current model to ensure realistic results (including total variation norm to help "block" the model and a constraint to make the ratio of some of the model parameters physically possible). The 2nd area I *might* be interested in using AD is in calculating L2 data error. The model in this case is made up of the physical properties of the earth that are relevant to elastic wave propagation. Each physical model location has between 3-10 relevant elastic properties, depending on how much you simplify the wave propagation physics involved. The data is from an active source - basically a big truck (or a small dynamite explosion) shakes the ground, waves go down, at some point they hit a boundary between strata with different properties and part of the wave is reflected and heads back upwards, and then recievers placed on the surface record ground motion which gives you 2 properties - the time it took for the wave to make the trip and the amplitude it had when it hit the surface again. A bunch of processing then happens to make this information usable, but for my purposes there are pretty much 2 ways to use this information: * 1) invert for the earth model in "seismic wave traveltime domain". From the model paramaters we are interested in inverting for we can predict the strength the wave will reflect with (this depends on the angle the wave hits the layer interface, but that can also be found using the information). So, you assume each time sample you have is a layer, calculate the amount of the wave that gets reflected at each interface between these layers, then convolve with a wavelet and you get a decent-ish approximation of the data (which you then compare with the real date and calculate standard L2 data error). This approach is simpler and less computationally expensive to implement and derivative free, but is less accurate. * 2) the second approach is to take your current model and synthetically propagate a wavefield through it based on a given source signature and location. This requires solving a wave equation, which does (typically) require computing derivatives. If AD cold give an (eficient) analytic solution to this, that would be great. Note: method #2 is frequently using in combination with an adjoint state approach to get the error function derivitives needed to compute the model update. In a very general sense, rather than just summing up all the errors to give a global value, it uses the spatial distribution of errors to figure estimate the error function derivitive (it also does the wave propogation in reverse, where the data is fed in as a surface boundry condition for the wavefield and the propagation is run in reverse time direction). Im not as familiar with this part, but I imagine that, even if it works well for 1-2 model paramaters per grid point it quickly falls off as you approach 10 per grid point. Of course, nothing is probably going to work too well at 10 model paramaters per grid point, if nothing else you should have a more accurate measure of each model paramaters sensitivity (given by the jacobian and/or hessian) than you do in the adjoint-state method. &gt; Q4: Is there sparsity to exploit. Ill have to think about this, but I think probably not. On a (maybe) related note: Im not sure if this can be exploited, but there is an element of locality in terms of what model parameters can affect what data / other model parameters, which (in particular for getting the Hessian) might be useful. In other words, a point in one part of the model will have no effect on the data collected in another part of the model sufficiently far away. In terms of the Hessian, this makes the Hessian a diagonal banded matrix (or rather, would if the data were collected along a 2D line and indexing was in the correct order. In practice it might not actually look banded diagonal, but there is still local dependence). In fact, in the algorithm's current implementation there is zero lateral dependence (there are no constraints on the lateral variability in the model - the 3D earth model is broken up into 1D vertical subsections which are independently processed), though ideally Id like to incorporate some sort of lateral constraint (e.g., smoothly varying). Also, if I switched to actually simulating wave propogation to get L2 data error there would be lateral dependence for the wavefield simulation, though again this would be (to some extent) only local dependence.
I tried using the quiver function. having trouble placing my sink at any point and find the velocity. Also having trouble using the sink function. 
What are the conditions at the boundaries you'd want?
First off, please make your code display like code. If you add 4+ spaces to each line it will show up correctly. You can easily do this in Matlab by selecting all the text and pressing the little right arrow at the top of the screen to indent everything by 4 spaces. Second, you say an infinite loop but have "for h = 6:1:100" and "for L = 5:1:100", which arent infinite. If you know how big the matrices you need to generate are then you should preallocate them. Im not going to take the time to format the code just to run it (though I will if you revise it to show up as code and I have a minute later today). Other than preallocating I dont see anything that is unquestionably wrong, but it seems like you are making it much more difficult than it needs to be. You could much more easily record the change in velocity, then after the loop pull out and sum the positive and negative values. Something like for a=[...] for b=[...] dv(a,b)=v1-v2; end end v_inc=sum(v(v&gt;0)); v_dec=sum(v(v&lt;0)); The above is for reference, though theres a much more efficient way of doing this (assuming you want v_1 to keep its value of 14.67 every time v_2 is calculated and dont want to update it with the previous v_2, which is what your code currently does i think). m_s = 0.5; %Coefficient of friction m = 50; %Mass of Cart g = 32.2; %Acceleration due to gravity ft/s2 h_1 = [6:100]'; % 1st dimension is h_1 h_2 = (h_1+1)'; % 2nd dimension is h_2 v_1 = 14.67; % note: your code is set up so this is the same in ALL loops. if you had intended to update v_1 with the previous loop's v_2 the code below wint work. %L=[5:100]; % Not needed? v_2 = sqrt( ( (m.*v_1.^2) + 2*bsxfun(@minus,(m*g).*h_1,(m*g).*h_2) ) ./ m); % to make negative velocities be negative instead of imaginary v_2(imag(v_2)~=0)=-imag(v_2(imag(v_2)~=0));
By matching, I mean the specific image. For example, if the program randomly selects and presents images of numbers 1, 4 and 5 out of the 9 I have saved to disk, I want the target image to be 1 4 or 5 50% of the time.
Not sure what's wrong with your code, but try the function ylim to change the y-axis.
Thanks for the reply, when i enter ylim(0,10) i get the following error: 'Error using ylim (line 31) When 2 input arguments are specified, the first argument must be an axes.' Any ideas? 
+ ylim([0 6]) sorted it out, cheers! 
I feel like this is entirely dependent on what type of custom operations you want to do. In the example you have, im pretty sure you can just convolve the kernal with a matrix of ones that is the size of M (using the standard conv2 operation) and then add that to M (assuming you want a convolution-type operation, but you dont actually want the values of M to effect what you get. Assuming size(M) &gt; size(kernal), this will take into account edge effects of the convolution and will always add the same amount to the middle. If you care about efficiency Id really try to stick with the conv2 function, as its probably much more optimized than anything you can write in matlab. It seems like you could pobably break down most add/subtract/times/divide down into a convolution (possibly with one of the inputs inverted on a element-by-element basis) and possibly a 2nd convolution with a matrix of ones and/or a matrix addition/subtraction. Even for more complex operations, as long as you want a convolution-type of operation I think (for many, though not all, operation) you should be able to first apply the operation to the matrix M on a term-by-term basis (and maybe store as a new matrix), then convolve the kernal wit that matrix. ex: % M(m,n) = sum of 2^M(i,j) for i = m + [-1 0 1] and j = n + [-1 0 1] kernal=ones(3,3); M=2.^M; conv2(M,kernal,'shape desired') if instead of summing 2.^(M(i,j)) you wanted (kernal(m,n)).^M(i,j) this doesnt work, though its not worth speculating on this type of thing without knowing the operations you actually will need to do. If you did really want to do something like you are proposing though, I think it is possible to do using [arrayfun](https://www.mathworks.com/help/matlab/ref/arrayfun.html). though im not 100% sure as I havent used that particular function much. If you have the right toolbox, [convmtx2](https://www.mathworks.com/help/images/ref/convmtx2.html?s_tid=doc_ta) might also be useful, as you can get the convolution matrix, modify it as needed, then apply it (potentially multiple times) using matrix multiplication. 
When you make a gui, matlab autogenerates a .m file with corresponding code. One of the sections there is a callback function for the button. You can also get to it through the gui editor by looking at the properties of the button and clicking on the callback button. The code you write there is what executes when the button is pushed.
For the record, problems like these can usually be solved by running a = gca f = gcf which produce figure object structures "a" and "f" that control ALL the axis and figure properties. You can extract and set figure properties using oldVal = f.(fieldname) f.(fieldname) = newVal granted this is overkill for something like setting the y-axis limit, but is rather useful if you really want to fine-tune your figure (perhaps to include it in a final project or presentation of publication), and is undoubtedly faster than asking on here and waiting for a response.
If this works then just make a function that does this function [output] = mytransfer(input,output) (add whatever command(s) that are needed here end then you can do it by just calling mytransfer(input,output) from your main function. Note: depending on how you need to use the names of the input and output, the [inputname](https://www.mathworks.com/help/matlab/ref/inputname.html) function might be handy.
Thank you! I thought i had to do something specific to get the function to be executed. :)
Just use linspace for segment and then concatenate the vectors together 
You don’t “place sinks” in matlab, what do you mean? I’m having trouble understanding where you are right now. Are you using Simulink?
Im pretty sure the issue is how your using the anonymous functions (newfunctionSin and newfunctionCos and FS). These should only be defined ONCE. This means they need to be defined outside the loop, and then called inside the loop. Also, tI would break FS into a new function at each step. Matlab might not like updating it in that way. You can do this using a cell array. Heres an example that should hopefully make it clear. f=cell(5,1); f{1}=@(x)(x+10); for nn=2:5 f{nn}=@(x)(f{nn-1}(x+10*nn)); end % test inTest=5; for nn=1:5 fprintf('The function from iteration %i produces %.2f for an input of %.2f \n',nn,f{nn}(inTest),inTest) end Note: you need to save the entire cell, since matlab doesnt seem to automatically substitute one function into the next one, even though it seems somewhat trivial in your case. Maybe someone else knows how to do that. If not, you can make it work but need to call it using "f{end}(input(s))" rather than "f(inputs)"
[this link](https://www.intmath.com/analytic-trigonometry/6-express-sin-sum-angles.php) shows how you can convert the answer to the one you want. But for the record its not a matlab question. Its a math question, specifically a * sin(x) + b * cos(x) = R * cos(x - p) solve for R and p in terms of a and b which gives the answer R = sqrt(a^2 + b^2) p = arctan(b/a)
If you have a finite list of callable functions then create a cell array of function handles and call it that way using some string recognition.
Hey thank you for taking the time to go through this. So i know its not infinite, it just for some reason resulted in a solution that kept on going. I reformatted it so you could run it if you have the time, I had no idea it required 4 spaces!. And I only had the L for length so that I could have data regarding where along the track the velocity is different. To be completely honest though that doesn't really matter because the height would be more than enough data to see where that point is. So I am trying to keep the speed at v_1, so that works perfectly. I want to see how much speed is lost at particular points so that I can then calculate the energy input required from an electric motor. I also wanted to ask, could I use this also with decimal places? 
How are you exporting to PDF/the printer? To be honest, I'm not great with exporting figures. It seems to be tricky and sometimes not quite behave the way it ought to. But if you look at the tips for (`saveas()`)[https://www.mathworks.com/help/matlab/ref/saveas.html], it looks like that uses 150 DPI. If you use that to save to a PDF and then print at the appropriate DPI, does it work better?
Let me preface this by saying I have no idea how this is handled externally. Inside the function, Matlab is copy on write, so as long as you don't write `x.Field = bar;`, or `x(N) = 42;` or similarly write new values to `x` inside `foo(x)`, Matlab won't create a copy of `x` for use *inside the function*. Your question, though, seems to be asking about behavior "outside" the function. When you say &gt; it appears that calling " [x] = typecast(x,'new format') " quickly makes a temporary backup of x, even though the entirety of the operation literally only requires changing a few bits in the attribute that tells Matlab how to interpret a certain series of bits. It makes me think that you care about what's happening to x between when you pass it off to the function and when a value is returned. To that, I would make 2 points: 1. A Mex file, or `evalin`, or any other trick *inside* a function isn't going to change what Matlab does *outside* the function. 2. Your example is changing the fundamental data type of the input variable, not updating a value. I understand maybe it ultimately boils down to where the bits get written, but Matlab is not C++. You don't get that much control. 
`||` and `&amp;&amp;` are scalar operators; the arguments to them should have only one element. You're passing an array with more than one element (that can't be automatically converted you a single element) to operators that expect a single element. You probably should be using the element-wise versions (`|` and `&amp;`) and logical indexing rather than an if block; e.g., `x(x &lt; -2) = -5`. You could also loop over all of the elements, comparing one at a time to your conditions-- but that's much less efficient than simply logically indexing. 
I have been using the print function, the exact command is something like print(img, '-dpng', 'gridImg.png'). I'll try out the saveas() function.
Looks like [`print()` lets you specify the resolution](https://www.mathworks.com/help/matlab/ref/print.html#inputarg_resolution) .
&gt; Inside the function, Matlab is copy on write, so as long as you don't write x.Field = bar;, or x(N) = 42; or similarly write new values to x inside foo(x), Matlab won't create a copy of x for use inside the function. Yeah, but if the goal is in-place replacement, you either need to modify the input variable o create an output variable of the same size. There is no way to replace the values in a variable without either writing to that variable or making a copy of it first and then writing to the copy. So, if the goal is to do this without making a copy, the *only* way to do it (in any language, not just in matlab) is to write new values directly to that variable in place. This is my thought behind using "evalin(...,'caller')" - it seems like this should make matlab evaluate whatever you are trying to do the same way it would if it were evaluating directly in whatever workspace you called the function from, and in that workspace there is at least a chance matlab will modify the variable without making a full copy of it. Of course using a nested function instead is another option, but in practice sometimes not having a portable function is just not a realistic possibility. &gt; It makes me think that you care about what's happening to x between when you pass it off to the function and when a value is returned. Ideally I would like some control (such as control over whether Matlab makes a backup copy of a given variable or not), though I highly doubt that there is that ability baken into Matlab. Id also like some minimal control over what memory addressed are used for a given variable (and at minimum the ability to use a specific NUMA node's memory for NUMA systems), but that isnt looking to be the case either. In the original post when i said I expected the "full" answer to be "use MEX", these are the types of things I was reffering to. &gt; Your example is changing the fundamental data type of the input variable, not updating a value. So maybe calling that "in place replacement" is a bit of a stretch, but the point is that Matlab will unilaterally apply some "safety" features like copying a variable even when it makes zero sense to do so. In the typecast example, Matlab literally does not touch the data. Based on the time tests I ran it would be literally impossible for it to have. I clocked matlab typecasting ~4.3 gb of data in under 0.01 seconds. This was in the form of just over 1 billion uint32 values, meaning that if even a single clock cycle per sample was required (which isnt enough to do anything, but is a "fastest possible scenario"), AND it used the 4 cores AND 4 virtual cores (hyperthreading) of my computer perfectly, it would still take ~3.1 billion cycles/second* 8 threads / 1 billion cycles = ~1/25 of a second = 0.04 seconds. Performing even a single realistic operation would take several times this long. This pretty much has to mean that when Matlab typecasts something it doesnt touch the data (which it shouldnt - the point of typecast is that you keep the exact same bits, you just read them differently). And yet, my system shows a memory spike that if slightly larger than the size of the data entered into typecast, which is what you expect if Matlab made a copy in ram, implemented the typecast operation in quite literally a few cycles, and then cleared the memory. Its possible I suppose that matlab didnt actually copy the variable and just allocated the memory, though I dont think that really matters, as once matlab allocated it is no longer available and the OS will still start to shit is pants if you allocate more memory+swap than you have. To clarify though, this is another one I doubt Ill have control over, the point was more to show that there are situations where you would actually benefit from having that kind of control.
&gt; I also wanted to ask, could I use this vector data with decimal places, or is there another function I could use? You can use decimals. The only place you wouldn't be able to is if you were using the loop version, then the loop variables would need to be integers, but other than that decimals are supported everywhere. &gt; I also wanted to ask about the ' behind h_1 and h_2, what exactly does that do? It transposes the data, turning it from a row to a column vector or vice versa. bsxfun performs something called binary expansion, which requires that he inputs are "filled up" in different dimensions. The output then, in this case, has h_1 represented in the first dimension and h_2 in the 2nd. for example, if D is the output, D(3,8) represents going from the 3rd value in h_1 (i.e., h_1(3)) to the 8th value in h_2 (i.e., h_2(8)) since H_2 is shifted from h_1 by 1 unit, the diagonal represents going from h_1 to h_1+1 for all the possible h_1 inputs (and since starting velocity and change in hight are constant, this always results in the same v_2, hence why the diagonals are all the same). Note: if you only need a single h_1 (which seems like you do, since you really care about the change in h for calculating v_2) calculating for all possible h_1 is not needed. &gt; doesn't it also calculate when that vector is zero? Im not sure what you mean. If you dont tell it to calculate a value at zero it doesnt (if you think about it it would be rather inefficient to always calculate something without you asking on the off chance that you might want it). it seems to me that your best bet it to figure out all the possible delta-H you need, calculate sqrt( ( (m.*v_1.^2) + (2*m*g).*dH) ) ./ m) then to get actual h_2 for a given section you can window out a subset of the possible dH values that you actually need for that section and add h_1 for that section.
Your if statement is never true. Using == can be a little tricky unless you are using very simple whole numbers due to the imprecision of computers. Instead writing something like abs(x-1) &lt; 0.01 as your condition adds a small buffer so that x just has to be about 1 and it will probably work although I am not at a computer so I can't test it.
I have have to do a ton of this type of stuff for publications in the lab I am working in. Use export_fig, its an excellent tool on the matlab exchange that saves your figure accurate to its dimensions. If you want a whote background make sure the figure is set to a white background.
yep, you are exactly right. I had a mistake in my code too. Here's the fixed code: function y = temp(x1,x2,x3,x4) T=0; for i = 200:0.01:500 y1 = (x1*10^((-817.08/i)+4.402229))/5; y2 = (x2*10^((-1051.38/i)+4.517190))/5; y3 = (x3*10^((-1267.56/i)+4.617679))/5; y4 = (x4*10^((-1183.44/i)+4.474013))/5; y_total = y1+y2+y3+y4 if abs(y_total-1) &lt; 0.001 T=i end end T end It runs perfectly Thank you so much for your help 
 set(gcf, ‘PaperPosition’, ’PaperUnits’, ’inches’, [0,0,w,h]); This command will adjust the size of your figure to be printed. The width and height units are inches. Then you may set the resolution and format. print(‘yourfilename’, ‘-dpng’, ‘-r300’); This will save a .png of w x h at 300 dpi.
I don;t know what a bridge is, but [MIT](http://strategic.mit.edu/downloads.php?page=matlab_networks) has a matlab toolbox for graph analysis
Wow what a vague question. Tried your own code and others you found and not getting a plot? 1. Use the `plot()` command. 2. Ensure there is actually data in the parameters you pass to `plot`. 
Actually I need to "slide" by image on other image and compute "something" on overlapping parts... I tried to make it simple with example above, but it seems to be more complicated... So - this is what I need: customOperation = @(overlapingPartFromImage1,overlapingPartFromImage2) M_part+kernel_part; computeSomethinOnOverlapingParts(image1,image2,customOperation); I do not care about efficiency much. 
You could try using the findpeaks function. It should find the local maxima but if you flipped the signs of your matrix, I would think it could work.
Ohh, this what I love this sub for! I think I'll work on using this. Unfortunately, my data runs from 0 to a maximum value, so I can't just flip the signs, but I can just create a second matrix whose values are [maximum - actual value] to flip it. Thank you very much!
Could they use min (A) transpose it and get min (A) again and then just find where they're equal?
With local minima, do you mean values which are higher than their four direct neighbours? I can think of two decent ways to go about this. Say your matrix is called M, you can compare all values from M with their nieghbour below like using M(1:end-1,:) &lt; M(2:end,:) Doing this similair stuff with other neighbours and combining the result is to me the most straight forward way to find your local minima. A more complicated but imho cooler (because convolutions are cool) is to convolve your matrix with [-1 1] and [-1;1], and use the sign of the results to determine wether you have local minima conv2(M,[-1 1],'same') You only need two convolutions, because checking wether a value smaller than its neighbour is the same as checking wether the neighbour is smaller than the value, with only a sign change and an index offset. The difficulty with both these methods is making sure the indices allign, since you cant compare the first element of the matrix with it's upper neighbour (since it doesn't have one.). The findpeaks method proposed maybe works, but the findpeaks method i know only works in 1 dimension, and is overkill if you only want to compare vlaues to their immediate neighbours. By overkill i mean that it does a whole bunch more computations (see the [examples](https://nl.mathworks.com/help/signal/ref/findpeaks.html)) than just local comparisons. 
They would be lower than their four direct neighbours indeed. That actually makes a lot of sense, I agree convolutions would be cool, but I seem to prefer the first suggestion. I'll create a quick and dirty script for both your first suggestion and the findpeaks method and see which one comes out more convenient/faster. Thank you very much!
&gt; In the typecast example, Matlab literally does not touch the data ... when Matlab typecasts something it doesnt touch the data (which it shouldnt - the point of typecast is that you keep the exact same bits, you just read them differently). No, I disagree. Try casting double to int then back to double. Matlab doesn't just read the bits differently; there is actually a conversion that happens. &gt; Ideally I would like some control (such as control over whether Matlab makes a backup copy of a given variable or not), though I highly doubt that there is that ability [baked] into Matlab ... [typecasting] is another one I doubt Ill have control over, the point was more to show that there are situations where you would actually benefit from having that kind of control. I would suggest you give the [Undocumented Matlab](http://undocumentedmatlab.com/) blog a visit. As I understand it, Matlab is written in/with Java, and as such there are a lot of Java bits that you can access with Matlab code even though it's not strictly explained anywhere else that this is possible. I don't know if the level of control you're requesting is possible in Java or not - I'm not a Java programmer - but if it's not possible in Java then I would bet it's not at all possible in Matlab, and then even if it is possible in Java it *still* might not be possible in Matlab, but that would be the route I would take to get at your answer. Look up how to do it in Java, then try that in Matlab. 
Thank you, it worked!
You can try `imregionalmin` it is for images, but images are just matrices, so it works
What have you done so far? 
My preference for 3D things in Matlab is the `patch` command. You can have your eight vertices for a cube as cubeVertices = [... x1, y1, z1; x2, y2, z2; &lt;...&gt; x8, y8, z8]; And then you can define faces by which rows in vertices link together: cubeFaces = [... 1, 2, 3, 4; 5, 6, 7, 8; 1, 2, 5, 6; 3, 4, 7, 8; &lt;etc.&gt;]; Order matters, though, and if you wind up with any "hourglass" looking facets then you got the order wrong. Anyways, once you're done you can generate the cube: cubeHandle = patch('Faces', cubeFaces, 'Vertices', cubeVertices, 'FaceColor', [yourR, yourG, yourB]); Finally, if you want to rotate/translate the vertices, just update the vertices: yourR = &lt;rotationMatrix&gt;; yourDs = &lt;translationVector&gt;; T = [yourR, yourDs; zeros(1,3), 1]; tempVertices = [cubeVertices.'; ones(1, size(cubeVertices,1))]; tempVertices = T*tempVertices.'; rotatedVertices = tempVertices(:, 1:3); set(cubeHandle, 'Vertices', rotatedVertices); The bit with the `tempVertices` above is just setting up a standard 4x4 homogeneous transform operation. 
Ohh, that's very interesting! I'll definitely give that a try, won't have access to my computer for quite a number of hours though unfortunately. It seems this would provide exactly the kind of results I'd want, if it plays nicely with my matrix. Thank you very much!
Thanks, I'll try this.
I'm writing the rest of the code now, this piece of code is so I'm able to visualize what's happening, so I'll tackle this later on, since I was stuck in this problem. I'll try what the other comment suggested. 
i now know what a bridge is ([it was easy to find out XD](https://en.wikipedia.org/wiki/Bridge_(graph_theory))). A stupid approach that would work with the MIT toolbox uses find_conn_comp.m, to find the (number of) connected components; For each edge, create a graph taht is the original graph minus said edge, and see of the number of connected components is the same as in the original graph. 
Thanks :)
Have a look at **sphere** and **cylinder** for some simple examples. Then look at patch and how it is used to generate the above. 
I could not understand what your code does. But from the title I guess you want to create a vector with random size, containing random integers. This can be accomplished by out = randi([0,9],1,randi([1,3])); This creates 1-3 integers, each between 0 and 9. HTH
If the number of nodes/edges is large, that could get pretty time consuming. What about a solution based on biconnected components (in MatLab, there is the function `biconncomp` or `bctree`)? If you look at the example shown in the documentation for `bctree`, it looks to me like a 'bridge' should be identifiable as a biconnected component with only one edge. So, in MatLab, if you have graph object *G*, you should be able to find bridges by doing: bcedges = biconncomp(G); % Gives indices indicating assignment of each edge to a biconnected component bccomps unique(bcedges); % Get list of unique biconnected components edgeCount = sum(bcedges == bccomps.',1); % Count how many edges are in each component bridges = find(edgeCount==1); % Returns indices to edges that are the lone member of a biconnected component I *think* that should work although I can't test it out right now. 
Can you be a *little bit* more specific as to what's going on?
I restarted the laptop and it works fine now, I would be clicking "Run" button and nothing would happen, also command window would not respond, but everything looks to be fine now :) Thanks for trying to help :D
&gt; My current laptop isn't cutting it &gt; Wants to spend $500-750 You're going to want a fast CPU with as many cores as possible, assuming you can parallelize your code. Lots of RAM is also helpful, but RAM is pretty cheap. Regardless, for $500-750, you're much better off just renting a computer cluster through Amazon. [Check out how cheap it is to use Amazon's computers with as many cores as your heart desires, with 100s of GBs of RAM](https://aws.amazon.com/ec2/pricing/on-demand/). Also see [this page](https://www.mathworks.com/products/parallel-computing/parallel-computing-on-the-cloud/distriben-ec2-pricing.html) for how to implement.
If you want full access Matlab for free, your University likely offers students a free copy. It should come with all libraries.
try contacting MathWorks to see if you can get a trial. for commercial users, they normally provide 30 day trials for their toolboxes.
Mine doesn't, I checked it.
Simscape power systems library used to be available in a free package and I used it in a previous project; it no longer is available for free however. 
If you can assign a column to equal a.AR {1} then that makes me think it does not have structured data within it. Hence to try and set a subset of it wont work
Maybe you need simply a.tStatistic?
Type "help int"
Well, I'm not sure how that would work considering I have multiple T statistics - one per coefficient (and constant)!
Hmm...
Can you tell me or show me the structure of your "a" data?
Glad.
Couldn't find what I was looking for. I believe [this](https://www.mathworks.com/matlabcentral/answers/115029-numerical-integration-in-a-loop) is very similar to what I'm looking for and maybe explains the issue a little better.
[Sure, see this image](https://i.imgur.com/Js7Cyjd.png). If I run the command [I get this output - the highlighted part is what I want to store.](https://i.imgur.com/pG6aFz7.png)
So is what is shown at the bottom what is contained within a.AR {1}?
Nope, the thing that is stored within a.AR{1} is the Parameter Value for AR(1), which is 0.609365 in this case.
Look in SAR, MA and SMA and try to find where the value you want lives.
Can you use it in a computer lab on campus? 
It is hard to read without the `end` statements or indentation. However, you don't want to use `|` ("or") in your tests, you want to use `&amp;` ("and"), or rather `&amp;&amp;`. Let's look at the possibilities: 1. `response = 'n'` -&gt; `'n' ~= 'y' | 'n' ~= 'n'` -&gt; `1 | 0` -&gt; `1` 2. `response = 'y'` -&gt; `'y' ~= 'y' | 'y' ~= 'n'` -&gt; `0 | 1` -&gt; `1` 3. `response = 'z'` -&gt; `'z' ~= 'y' | 'z' ~= 'n'` -&gt; `1 | 1` -&gt; `1` So there is no situation under which the condition is `false`, so the `while` loop will always run. This makes me wonder how it ever finishes, and I can only imagine that you do something after the `fprintf` to make the whole thing stop. This is why I would like to see the entire `while` block. Now let's try it with `&amp;&amp;` 1. `response = 'n'` -&gt; `'n' ~= 'y' &amp; 'n' ~= 'n'` -&gt; `1 &amp; 0` -&gt; `0` 2. `response = 'y'` -&gt; `'y' ~= 'y' &amp; 'y' ~= 'n'` -&gt; `0 &amp; 1` -&gt; `0` 3. `response = 'z'` -&gt; `'z' ~= 'y' &amp; 'z' ~= 'n'` -&gt; `1 &amp; 1` -&gt; `1` 
I can use MATLAB and Simulink, but I haven't checked if Simscape is available. I'll try that tomorrow, but I really prefer having it on my computer. 
Welcome to the joys of coding. 
First suggestion would be to make sure you aren't coding anything sub-optimally. Often, a slight change in an algorithm or vectorizing code will result in vast speedups. Try eliminating all of the orange "warning" flags in the code editor, and using the profiler.
You are correct, after the fprintf I used a break to end that script abruptly. I've inputted the &amp;&amp; and it seems to be running smoother and doesn't require the break. However the responses are no longer printing to the data file. Could this be because of the if statement being true and ending the script?
To make things clearer, here is the rest of that piece of code (with your suggested changes: disp('did target appear? (y/n) '); tic; response = getkey(); RT1 = toc; while response ~= 'y' &amp;&amp; response ~= 'n' disp('NOT A VALID RESPONSE'); disp('did target appear? (y/n) '); tic; response = getkey(); RT1 = toc; while response == 'y' &amp;&amp; response == 'n' fprintf(fid, '%s','\n','%d', '\n', response, RT1); disp('Wait...') % waiting period pause(2); clc; end end end end end end fclose(fid); %close data file
Also, get one of these: https://www.newegg.com/Product/Product.aspx?item=9SIADT26KS6928 That is $250 for i7-3770 with 8GB ram. if you don't mind refurbished. 3years old is the sweet spot for corporate turnover.
I will do that tomorrow morning!
You should get rid of the second `if` test entirely, and just put the `fprintf` after the `while` loop ends. So something like this: disp('did target appear? (y/n) '); tic(); response = getkey(); RT1 = toc; while response ~= 'y' &amp;&amp; response ~= 'n' disp('NOT A VALID RESPONSE'); disp('did target appear? (y/n) '); tic; response = getkey(); RT1 = toc; end fprintf(fid, '%s','\n','%d', '\n', response, RT1); disp('Wait...') pause(2); clc; 
Oh I see, I did not realise I could start and end a while loop like this. I will give this a go and see if everything is presenting and saving. Thank you so far!
Finding a local minima will be challenging. For the NxN matrix I would numerically compute the derivatives in the I and j directions, then find when these are close to zero. The problem is without knowing more about your "field" there is no way to know how many local minima to expect, and if the derivative changes faster than the NxN matrix (eg it's not smooth). You could inplement search algorithms, see Rao's book for example "Engineering Optimization"
First, write a random number generator to call an integer between one to three. Give this a variable name like n, then call Rand(n) with whatever specifications you desire. A loop isn't necessary
"Undefined function 'int'..." means exactly what it says. You are trying to call a function named int which does not exist. It may be part of a toolbox that you don't have installed.
Two functions I would point to which will be helpful. 1. `diag` will find the diagonals of a matrix and put them into a vector. It will also make a vector into a diagonal matrix 2. If you look at the doc for `sort` it has an optional second output, `I` which is the order of the indices after the sort
It's always a great feeling when something finally works. I usually feel the need to share my joy in those situations, too :)
Also, my dumb ass can't figure out how to paste the code properly. Plis help.
&gt; No, I disagree. Try casting double to int then back to double. Matlab doesn't just read the bits differently; there is actually a conversion that happens. Typecasting something from double to another data type and back to doubles produces a double with the exact same values (and thus the exact same bit ordering) as the original. Test it for yourself: % get random x x=10^10*rand(1000,1000); x=x(:); % define typecast types types={'int8','int16','int32','int64','uint8','uint16','uint32','uint64','single'}; % typecast x to each type defined in 'types' y=cell(1,numel(types)); for nn=1:numel(types) y{nn}=typecast(x,types{nn}); end % typecast each data type in y back to double z=zeros(numel(x),8); for nn=1:numel(types) z(:,nn)=typecast(y{nn},'double'); end % compare original data (x) to data that has been typecasted to another data type and back to doubles (z) xzDiff=bsxfun(@minus,x,z); % see if any data points dont match xzNumMismatch=sum(xzDiff ~= 0,1) Note: this works just as well for any value that is between realmin and realmax (for doubles, this is roughly 1e-308 and 1e308, respectively). It even works for values outside of real min and realmax, though this returns 0's and Inf's (Matlab says the Inf's dont match, but thats just because it represents all Infinities with the same bit series and unless it knows for a fact the Infinities are equal it assumes they arent). You can test this by using x=10^-300*(1+rand(1000,1000)); % near realmin x=10^300*rand(1000,1000); % near realmax x=10^-320*(1+rand(1000,1000)); % below realmin (my computer still returns non-zero values for x though) x=10^-350*(1+rand(1000,1000)); % below realmin (my computer gives all zeros for x) x=10^350*rand(1000,1000); % above realmax (My computer gives all Inf's for x) In all cases the values and thus the bit representation of the numbers are identical. &gt; I would suggest you give the Undocumented Matlab blog a visit. I know about undocumented Matlab, though admittedly I havent thoroughly scoured it with regards to this topic. I'll have to spend a bit of time looking around on there and see if anything looks promising for accomplishing this.
&gt; Actually I need to "slide" by image on other image and compute "something" on overlapping parts.. This is just describing 2D convolution with a different operator performed (rather that multiplying and then summing the overlapping parts like standard 2D convolution does). I appreciate the clarification, but I understood this is what you wanted from your original post. As such, my answer is unchanged - it depends on the actual operations you need to perform on the overlapping part. With some you can probably figure out a clever way to still use conv2. With others it might not be possible. If performance really doesnt matter something like this is almost trivial to implement with a nested loop - have the top pixel from one image overlap the bottom pixel from the other, then slide the images across, Then move up one pixel and repeat. Then move up another pixel and repeat. etc. f you are clever you could probably figure out a way to vectorize the inner loop to improve performance, though again (as you may have guessed by now) it depends on the operations you actually want to perform.
Try using a different integrator. Ode45 generally works well.
The nice thing about using conv2 is that you can easily use more complicated indicators. I dont want to just give the full answer, but a more realistic implementation of the method /u/EatMyPossum might look something like this: % setup [(2*n+1) x (2*n+1)] matrix "w" with gaussian weighting n=5; % number of standard deviations from center to consider [a,b]=ndgrid([-n:n],[-n:n]); sd=(abs(a)+abs(b))/sqrt(2); w=exp(-sd.^2); % Remove center point of w, normalize to 1, and add center back in with value of -1 w=w./(sum(w(:))-w(n+1,n+1)); w(n+1,n+1)=-(sum(w(:))-w(n+1,n+1)); That weight matrix uses a gaussian (normal) distribution to assign weights to surrounding values, so that the indicator for assigning local minima is weighted not just by the immediate adjacent point(s) but by several adjacent points (in this case /- 5 points), and the further away the point the less weight it is given. To implement that without conv2 would require writing out 120 individual operations. Instead, with conv2 it only takes writing out 1.
 find(abs(f1(i,:,lmax))==f1(i,:,lmax)) This isolates data in the 2nd dimension of f1 (what data is defined by i and lmax) and then gives you the indicies where f1 and abs(f1) are equal (i.e., where f1 is a positive real value). n and m are then the minimum and maximum indices that were found.
As a general rule, if you ask a homework question and dont provide either code or very specific details of what you did you shouldnt except a response (no useful ones anyways). Based on what you have, literally the only response that someone could actually give would be to just solve it for you, which is usually avoided in this sub. Also, use the "homework question" flair for homework questions. 
There are a few ways, but what I have done in the past for things like this is: 1) Implement the convolution using a matrix multiplication (hint: if you have the right toolbox, there is a matlab function that will make the required matrix for you, though its not that hard to work out what it should be. 2) The convolution is now a matrix system, and can be solved by one of the various linear least squares methods (choose your favorite linear system solver)
Nice one! I found a lot of the frustration at the beginning is trying to understand "how" to do things in MatLab. When you get practice the frustration becomes "what" should i be doing? Haha
Thank you for your help! I just attempted with ode45 and initially it said the array was too big so I dropped the step size and then it gave me the same error as originally encountered. Any other ideas?
If you type noise filters and matlab into google there are many examples on yhe mathworks website
[removed]
It seems like it doesn't live in any of those variables :(
Hmmmm..... if you are still stuck later you can send me the script and some mock data and ill take a look this evening?
Ok. It will be multiple operations, that can not be figured out with conv2 function... It seams using for cycles is only solution, it is fine. I just needed to know this info. Thank you
I have to agree with mister shitpost on the typecasting part. although your last post isn't wrong, it doesn't actually mean that no data gets changed when you typecast. Lets wikipedia this shit up; floating point numbers have a certain way they are stored in memory (See [Double-precision floating-point format](https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64) (incidently also the [standard matlab uses](https://nl.mathworks.com/help/matlab/matlab_prog/floating-point-numbers.html)), the first bit is the sign, then you get some bits which tell you the exponent in base 2 (in the wikiexample its 11, so 2^11 / 2 means a range from -1023 to 1023 in the exponent (I don't actually understand where matlab gets the range of +-308 for the exponenet, but that doesn't mater for this discussion)) , and finally the bunch of bits that give the fraciton, that is, the actual numbers, not the order of magnitude. Integer datatypes on the other hand are a lot simpler than floating points, mainly because there is no exponent. The only thing that is there is the fraction, to be interpreted as a base 2 number (Here's [pictures](https://www.wikihow.com/Read-Binary) for anyone intrested in how that works). Sanity checking that we can look at : intmax('int64') which is `9223372036854775807`, that's 2^63 (all value bits to 1 and the sign bit to positive) Together this means that the stuff that is actually in memory (the bits) has to be edited a ton when converting from double to int, but thats not even all. Even converting int8 to int 16 means you have to add 8 bits to every number. It's 8 bits of 0's, but still you need to double the amount of memory alocated, and you can't do it in the same place as the int8 data was, becasue the first int16 number would fit over the first 2 int8 numbers, meaning there is no way to do this operation withouth allocating the int16 memory before deleting the int8 data. For the other way around (uint 16 to uint 8) it would be possible to not allocate extra data if you have real low level control, but even then you would be writing all bits again: the first values 8 trailing bits (9 to 16) would become the first 8 bits (1-8 (index starts at 1 in the matlab subreddit)), and the second values trailing bits (25-32) woudl be placed at 9 to 16. But this might not even be efficient, because your reading and writing the same piece in one algorithm, and you can only start reading the second number once you're done with the first, hardcoding it such that hardware optimisations become impossible. 
Simply transforming your distance wouldn’t work? Like MinDist = 10^2 for a diff of 2 on log10 space?
Well, I think if I say 'MinPeakDist',10^2 it will space all my peaks by 100. What I need is the first two to be spaced by 100, the second two by 200, the third two by 400, the fourth two by 800 and so on.
Sure, if you can that would be great! The script file is already pasted in the main text post - can you use that? The data is the following: 71 66.5 62 65.5 67.5 65.700000000000003 65.400000000000006 65.400000000000006 69.299999999999997 73.400000000000006 72.099999999999994 71.900000000000006 70.400000000000006 74.599999999999994 80.799999999999997 89.099999999999994 93.299999999999997 92.200000000000003 92.799999999999997 90.900000000000006 89.900000000000006 89.299999999999997 91.099999999999994 94.200000000000003 
Please indent the code by four spaces so it is formatted as code (you can highlight everything in the MATLAB editor and just hit "tab" to do this automatically, copy and paste it here, then undo to get it back).
If you think this is great, just wait till you're eyeballs deep in some code, looking for a statement with a missing semicolon.
I've been able to figure the Eigenvalue part out. I just can't move the corresponding Eigenvectors because they're not sorted in an order, just as a function of their eigenvalues
That is why I gave you tip (2). Once you sort the eigenvalues, use the optional output of sort to get the order the eigenvalues were sorted in. Then, sort your eigenvectors in the same order 
&gt; I don't actually understand where matlab gets the range of +-308 for the exponent 2^(1023) roughly equals 10^(308) &gt; (everything else about typecast) Youre not understanding what typecast does. Heres an example: Command 1 uint32(double(100)) Answer 100 &lt;uint32&gt; This is the operation that you are describing. And for this one you are correct that a good amount needs to be done to the data. However, that operation is NOT typecasting. The analagous typecasting operation is typecast(double(100),'uint32') which gives an answer of: [0 1079574528] &lt;uint32&gt; (Note that the output of typecast always has the same number of bits as the input, but the number of samples may differ depending on bits-per-sample of the input and output.) I guarantee you that, if you were to break up "double(100)" into its bitwise representation and separate bits 1:32 from bits 33:64 and convert each to a decimal, those are the 2 integers you would get. To quickly test this, you can easily get the bitwise representation using dec2bin(typecast(double(100),'uint64'),64) which gives a=[0100000001011001000000000000000000000000000000000000000000000000] Note: this still uses typecast, but converts it to a 64-bit integer so it has the same number of bits as the double. This integer is 636737291354636288 &lt;uint64&gt;. If you feel inclined to confirm that this and double(100) have the same bit representation then by all means, though I can guarantee you that they do. This is a character vector, but if you convert these 1's and 0's to logicals (or a numeric format) (note: this is easy to do by modding the last line of dec2bin and replacing char(...) with logical(...)), you can figure out what the int32 values are (assuming little endian) with a=a(:); % a has been converted to logicals val1=(2.^(31:-1:0))*a(1:32) val2=(2.^(31:-1:0))*a(33:64) And, as expected, you get that val1=1079574528 and val2=0. By the way, you can get the "low level control" you refer to in matlab. The trick is that you use an integer datatype and then bit-wise operatons (especially bitor, bitand and bitmask). For example, say you wanted to get bits 9-16 of a (u)int32 sample. You could do this with bitand(data,uint32(hex2dec('0000ff00'))) uint32(hex2dec('0000ff00')) gives the integer equivalent to the hexa-decimal '0000ff00', which has 1's in bits 9-16 and 0's everywhere else (effectively making it a masking operator). When combined with the "bitand" operation, this will zero out bits 1-8 and bits 17-32, and for bits 9-16 return the same bit as the data has in bits 9-16.If you wanted to shift this forward/backwards you ccan use bitshift, e.g. bitshift(bitand(data,uint32(hex2dec('0000ff00'))),-8) takes bits 9-16 and shifts then downward into bits 1-8. Note: you never actually see the bit structure with these operations, you get the integers that those bits represent based on the data type youve selected. Exploiting these bitwise operations can make converting data MUCH faster. If in the process of replacing a conversion code to convert to/from IBM floats and IEEE floats. The code I was using (which was already very efficient), in effect, computed the exponent and fraction and then multiplied them to get the new value. The new code instead uses a clever way to reorder the bits and then typecasts the result, and is nearly a factor of 10 faster. (Also, as a result of this, I have become VERY familiar with the bitwise structure of floating point numbers.)
Id sill suggest maybe taking a look at "arrayfun". As I said in my first reply im not too familiar with it, but I think it might be able to apply the type of thing you want. But, if using for loops isnt too slow, it will probably be easier/faster to just write out the for loops and then perhaps try and (partially) vectorize them.
&gt;Youre not understanding what typecast does This... You're absolutely right, and there I was think that you were converting datatypes when even the first line of the help reads; typecast Convert datatypes without changing underlying data. .... In my defence, this is confusing when coming from C ([apparently](https://en.wikipedia.org/wiki/Type_conversion), casting means exactly what it does in matlab in some languages too). My bad for assuming i knew a thing. It should be fun to use typecast when and bitwise operations when the oportunity arrises, thank you for your explanation.
**Type conversion** In computer science, type conversion, type casting, and type coercion are different ways of changing an entity of one data type into another. An example would be the conversion of an integer value into a floating point value or its textual representation as a string, and vice versa. Type conversions can take advantage of certain features of type hierarchies or data representations. Two important aspects of a type conversion is whether it happens implicitly or explicitly, and whether the underlying data representation is converted from one representation into another, or a given representation is merely reinterpreted as the representation of another data type. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
I'll give you 3 things that will help you help yourself. Subscript indices are numbers between brackets used to say what element of an array you're talking about. real positive integers are values larger than 0 that have no decimal point. examples being 1, 2 3. If you put your code in a script and put every statement (ending with ;) on a new line, you get a precise hint on where the error is happening with a line number. 
Why are you interested in an other command? Does xcorr not give you what you need?
Try increasing your error tolerance. Basically the solver is telling you it cannot meet the specified maximum error.
You can do a "backwards" convolution. y = xcorr(a,b) Gives the same result as y = conv(a,b(end:-1:1)) 
i fixed that now i am getting error from the function itself T = 15 ; y(2)= 0; y(1)=0.2; t = @(x,y)[y(2); 0.9*(1-y(1)^2 )*y(2)-y(1)]; [x,y]=ode45(t,[0 T], y(1)); plot(x,y)
FYI: Matlab does have a [cast](https://www.mathworks.com/help/matlab/ref/cast.html) function as well that does actually convert the data. In fact, it just hit me that "typecast" is intended to literally mean "casting of the (data) type" rather than "casting of the data", which is what "cast" does. &gt; It should be fun to use typecast when and bitwise operations when the oportunity arrises, thank you for your explanation. Id say, equal part "fun" and "wanting to pull your hair out". In particular, Im trying to figure out an issue where my conversion gets the correct answer for roughly half of the samples and the other half are unilaterally bit shifted up or down one bit. One other neat trick I figured out: If you are dealing with float data but manipulating it with its integer/bitwise representation, and for some integer value (int/uint with the same bits as the float you want to represent) and want to multiply these integers by a non-integer value, the straightforward way is Cast (not typecast, actually cast) the integer to a single or double, multiply by the noninteger, round, then cast back to int/uint. A MUCH more efficient way to do this is a) use bitshift to add/divide by powers of 2 such that the data values before and after the multiplication have the same power of 2 (i.e., the exponent bits dont change). b) Incorporate these powers of 2 into the bits representing the floating point exponent is stored (you can do this by bitshifting the number of powers of 2 that were changed upwards to where the exponent bits start, and then add/subtract it from the data. The only bits that change will be in the exponent, since after bit shifting all the mantissa bits are zero). Note: (a) and (b) are kind of like multiplying the numerator and denominator of a fraction by the same value in order to make one of them easier to work with without changing the overall value) c) Finally, typecast (not cast) the mantissa to a single/double value, multiply by the modified non-integer value, and then typecast back. As long as you stay within the same power of 2 before and after the multiplication, the bit ordering of the mantissa and its single/double bit-identical counterpart are linearly related, so it doesnt matter if you apply the operation to the value produced by interpreting the bits as integers or as IEEE's. This entirely replaces the complicated forward and reverse casting operations with a couple bitand and bitshift operations.
Just as an advisory note for the future, you don't have to give us the entire background. If you distil the question down to "How do I do X", you will improve your understanding of the question (and probably solve it in the process) and be more likely to get an answer. I realise you did eventually get there with "In essence...", but it would have saved me some reading time. I think what you need is repmat. For example, if I have a vector [1,2,3], I can make it become [1,1,1,2,2,2,3,3,3] (or however many repeats) by doing the following: x = [1,2,3] K = 3 rep_x = repmat(x,[K,1]); y = rep_x(:); And y will now be [1,1,1,2,2,2,3,3,3].
Don't just say "I have an error." Say what the error is. Whenever you get an error in MATLAB it gives a line number and a description of the error. Without that info, we can't help. 
Look up rand. It will generate a number between 0 and 1 with uniform probability. So if you want something to happen with a 10% probability you can just do if rand &lt; 0.1 # do something end You can also call it with arguments to generate more than one number. For example, rand(1,500) will generate a row vector with 500 random elements (again between 0 and 1).
So, I don't see a way to do it directly, but if that's what you want to do- just do a change of variables. Say if your position variable is `x` then define a new variable and make it the log of that number, eg `logx = log10(x)`. Now, you can define your spacing in terms of `logx` and when you get the locations back, just transform them back `loc = 10.^loc`
Why Is that?
Look at the definition of [cross-correlation](https://en.wikipedia.org/wiki/Cross-correlation) and that of [convolution](https://en.wikipedia.org/wiki/Convolution). Instead of g(t-tau) as in the convolution, it's g(t+tau) in the cross-correlation, which means you can just flip your vector around.
No, how could you start using an output of a function before the output is done being written? Maybe this would be acceptable if you knew and could guarantee that the outputs would be linear/serial in nature, and there was only one output, and you could tell when fresh data was available. As far as I know, no such methods exist in Matlab. I could write a function that writes to a matrix starting at the *last* element and working backwards (this is also a solution that automatically pre-allocates a matrix), but there's no way to "signal" this to the caller. The output is allocated and filled with uninitialized data (or NaN/0, whatever passes for uninitialized in Matlab) and again, no way to tell which data is valid and which isn't. And furthermore, I could overwrite the output. Just like you mention u=fread(...); u=foo(u); If this were itself inside a function, and u was the output, at what point would you expect valid data out? When u is written to by fread or after foo?
Do you know how pipes work? ಠ_ಠ
 answer = mean(some_matrix(:)); If you have NaN values: answer = mean(some_matrix(~isnan(some_matrix)));
thankyou 
your troubleshooting skills are bad and you should feel bad
or nanmean()
Jesus spent ages trying to work this one out. No luck yet. Will keep thinking tho. It doesnt help that i dont understand the theory behind it. I have managed to call up the stuff using a 'print' command but that is about as far as i got today. I presume you
oh nice, thanks
Any cross-correlation can be computed using fft (which of course is what the xcorr function is doing internally anyway). If you need to speed it up then you'll have to use the gpu.
That's not actually how pipes work. You can pass function output to other functions, and you can read input line by line and pass each line to another function (e.g. in a loop). 
What are you trying to do? It looks like you're plotting some kind of piecewise function? You don't have to "manually" plot anything. 
I really have no idea what you're trying to do. What is w? What is Fa, Fb? Do you know that the x&gt;value statements are just giving you a logical index of where x is greater than that value, not the value of x itself? What do you mean "this means I have a lot of values to plot manually"?
Thank you for your effort :)! My teacher was supposed to come in today and help us with Matlab but of course he cancelled last minute... I hope that I will be able to ask him if he has any clue how to fix this this week, if he does I will let you know! 
Error messages are not written in Latin. They are English words that tell you what went wrong. Fucking read what's in front of you. 
Sorry I didn't realise the rest of my code was important, I'm very new to this. l=10; w=6.2; Fa=(w*l*(l/2))/l; Fb=(w*l*(l/2))/l; Mmax=(w*l^2)/8 x=linspace(0,10); y=Fa*(x&gt;0)-w*(x&gt;1)-w*(x&gt;2)-w*(x&gt;3)-w*(x&gt;4)-w*(x&gt;5)-w*(x&gt;6)-w*(x&gt;7)-w*(x&gt;8)-w*(x&gt;9)+Fb*(x&gt;9.9) plot(x,y) I am trying to create a shear force diagram on a simply supported beam where a UDL runs the length of the beam. w is the force in kN/m and L is the length of the beam and UDL. Fa and Fb are the reactions at the supports holding up the beam.
&gt; I saw one example of a model of two ODEs, but I can't get a grasp of it. I tried making an analogical model with my equations, but judging by results it wasn't correct at all. &gt; I know and understand how to model single equation with single variable, what blocks to use and how to use them, how to change their parameters, how to change things like solver, time, etc. - so you don't need to explain those to me. Seems like the only thing left for you to do is post your model. Not sure what else we can do for you if you understand your model, have it in Simulink, but it doesn't produce the expected result
I suspect you can work it out from the stuff you do have but i don't know the equations. Yes I will be i interested to find out
Sorry, hopefully I've made it more clear in the edit.
That doesn't really help. I'm not a mechanical engineer so I'm not sure what that should look like. Based on your equation it looks like you're trying to make a plot that looks like stair-steps that drop by 6.2 every time x is an integer, and it appears that your code should do that just fine. 
No, of course you don't have to write it out manually. But you need to think of a better way to compute Y. Right now you are achieving a very simple result using a very roundabout/crude methodology. Think about other ways you can compute Y that aren't "just writing it out." If you want to control the resolution of X, then create a new variable N that is the number of elements in X. Then write a for-loop over X, computing the corresponding value in Y as a function of X and N. For example: N = 50; x = linspace(0,10,N); for i = 1:N y = i/N*w*x(i); end You'd probably need to add a case for i=1 or i=N, but a simple if-statement would take care of that. If none of this makes sense then please spend an hour or two learning the basics of coding in Matlab before moving farther.
Thank you so much for your help! That function is exactly what I was looking for. Also, I will remember your note for next time. I am a novice in matlab and thought some context might help others understand my question, but I see in this case it only made it more difficult.
No this makes sense, thank you very much. I have briefly encountered for-loops but was not told very much on how they could be implemented. 
Um, what?
It's a homework question but I'm realising now it's says 'you have been provided with a MATLAB function lti_student number.p ..." Would this mean that there's a separate p file i should have access to? Or I somehow have to make this file? Not specifically matlab question I know but help me out here
without the error im not sure but did you forget the multiplication symbol * ? [0.9*(1-y (1)^2)*y (2)-y (1)]
or mean(A, 'omitnan') if you only want to use basic functions.
Is [this](https://i.gyazo.com/3bdef5cfbc5afbd78b7bf0604d016fb9.png) the correct Simulink model for my problem?
While I agree with your sentiment, is the hostility necessary?
While I agree with your sentiment, is the hostility necessary?
It was a meme from futurama 
y(1)2 
ah. Thanks. https://imgflip.com/i/20kkc0
Have you checked the [documentation](https://www.mathworks.com/help/matlab/ref/lu.html)? It says that L*U = P*A.
Yeah, I understood that LU = PA. But why is there a P matrix different from the identity matrix when it's possible to find matrices L, U such that A = LU?
As an example consider the matrix [ 0, 1 1, 0 ] There is no L*U = A possible without permuting the rows. Even when it is possible without switching rows, it might lead to L and U that behave poorly due to the computer's floating point representation of numbers. Switching rows can improve the numerical conditioning.
I understand that in certain cases like your example it's simply not possible without a P matrix, however in the matrix I posted the LU decomposition didn't have any problems when done by hand. I did read about numerical instability issues in my numerical analysis textbook, maybe MATLAB thought that my matrix could be problematic? Thanks for your answer.
It wouldn't necessarily be problematic, but the factorization has the best numerical performance when the row with the largest element in the active column is chosen. So in your example row 2 has the largest element in column 1, so the first permutation is to swap rows 1 and 2 before eliminating column 1.
This is such a frustrating reply. If you were taught (or bothered to read up on) the maths you're trying to do you'd understand that correlation and convolution are the same functions rotated by 180 degrees. Your question for this thread leads me to also believe you're not at all familiar with the problem and are just throwing whatever you can at the wall and see what sticks. I hope you learn to learn and good luck with finding your answer (of which there likely won't be much different than xcorr because that is the only answer).
You could just do it in a loop manually
I'm not sure, but I think the reason MATLAB does it this way is because it uses a fast, generic algorithm to compute the LU decomposition and returns the first solution it finds when you call it with two output arguments. However, you can get there (I think there must be a better way, but this will always work): [l1, u] = lu(A); [~, ~, q] = lu(A); l = q*l1l Now `l` will be a truly upper triangular matrix, whenever A is actually possible to calculate an upper and lower. 
Thanks for that code! I don't understand the triangulation but I'm trying to integrate it into my code. My current approach is to build up my set of points 1 point at a time and compute your thing for each new row. Code doesn't quite work yet but hey. Does this triangulation work for the 2D case, when all points lie on a flat plane? X_contact = 0; V = 0; for n=1:100 % I know this is overly verbose but it improves code readability for myself B(n,1) = (100)*(2*rand(1,1)-1); B(n,2) = (100)*(2*rand(1,1)-1); B(n,3) = (100)*(2*rand(1,1)-1); B(n,3) = round(B(n,3), 0); B(n,1) = round(B(n,1), 0); B(n,2) = round(B(n,2), 0); X(n,:) = [B(n, 1),B(n, 2),B(n, 3)]; if V &lt;= 0; DT = delaunayTriangulation(X); E = edges(DT); l_squared = sum((X(E(:,1),:) - X(E(:,2),:)).^2,2); max_radius = 30; is_small = l_squared &lt; max_radius^2; P_close = unique([E(is_small,1) ; E(is_small,2)]); X_contact = X( P_close,:); V=sum(sqrt((X_contact(:,:)).^2)); else X((length(X)-1),:)=[]; V=0; n end end 
Ah sorry. I misunderstood your intent. You want your peak ids (and not the peak values) to be spaced on a log scale. That’s not possible with FINDPEAKS. I think the easiest solution would be to return all Peaks, sort them to your criteria and then apply your spacing rules to filter them....
This is not a matlab question, but a math question. Try reading [Wikipedia article on fourier series and related](https://en.wikipedia.org/wiki/Fourier_series) or [this stackexchange conversation, pay special attention to the linked articles. ](https://dsp.stackexchange.com/questions/40780/how-to-get-the-fourier-series-using-pythons-tt-fft)this 
**Fourier series** In mathematics, a Fourier series (English: ) is a way to represent a function as the sum of simple sine waves. More formally, it decomposes any periodic function or periodic signal into the sum of a (possibly infinite) set of simple oscillating functions, namely sines and cosines (or, equivalently, complex exponentials). The discrete-time Fourier transform is a periodic function, often defined in terms of a Fourier series. The Z-transform, another example of application, reduces to a Fourier series for the important case |z|=1. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Thank you so much for your reply! I have indeed read both of those articles and somewhat understand them, but I'm still incredibly lost and confused on how to turn my FFT complex number output into the Fourier Series. And it is a MATLAB question, since my audio file has thousands and thousands of data points, and while I want to use a few of the terms to do it by hand, I also want to build a more accurate Fourier Series using MATLAB. 
I'm having trouble visualizing what you're doing - is there any chance you could link an example image (or diagram)?
Also it could be useful to apply some sort of region growing to either the gear or the darker image surface to isolate it before applying your threshold as a starting point.
You can fit fourier series with the fitting toolbox; doc fit There is also an interactive tool you can run by typing cftool
just added a link to the post, thanks for pointing out
what is that, an image for ants?
No man, low resolution image of gear tooth with cracks
http://nooooooooooooooo.com/
Thanks! Although I'm really not sure how to fit the Fourier Series to my FFT output data.... my concern isn't fitting a Fourier Series to the graph of the original audio signal, but rather how to get a Fourier Series from my FFT audio data
If you open the variable in the "variables" window (just by double clicking on the variable in your "workspace" window) you'll open up the variable to see it's values. Alternatively, if you wanted to look at a specific element of the matrix, in the command line you could type (for example) `imagenR(3,100)` and it would print the value of the matrix in the third row and 100th column. `imagenR` is a large matrix, it can't show the values in the "workspace" window, simply because there's too many of them to show. 
Ah my misunderstanding. I have never used the `typecast()` function because, if I'm typecasting, I'm probably doing it because I don't need/want the remaining data. If I were going to cast to int32, for example, I would just use `int32(myVar)`. This *does* change the underlying data. I'm not sure I understand where retaining the underlying data is useful. That said, I feel like all of this discussion of typecasting in particular is a distraction from the larger argument, and I stand by my original points: 1. What happens *inside* a function doesn't change what Matlab does *outside* of the function, and, related: 2. Matlab probably makes the backup copy of the input/output variable (`x` in `x = foo(x)`) because there isn't a way to flag or otherwise signal that you are **not** changing the underlying data type. Indeed, the function *could* just be `x = int32(x)`, which changes the data type, or `x = typecast(x, 'int32')`, which doesn't, *but Matlab doesn't know whether the data type is changing or not*. I believe the "temporary copy" would be a temporary container for the function output. Once the function is complete then the new data is passed to the caller. 
No, I don't know of any inbuilt function that will do what you ask. A Fourier series is for an infinite length signal, whereas matlab's fft and ifft perform DFT, they're not exactly supposed to mix together like this. An *approximation* can be done manually.
Yeah, I wouldn't mind doing an approximation manually. How would that work?
Never tried, peak fitting probably.
And how would that work? xD Sorry, I'm a total novice to this. All I want is to construct a Fourier Series to approximate my data from my FFT values.
I see...thanks you!, now i have another doubt, the main center of my project is make a script that apply a threshold in a determinate ROI of a Image, but for some reason when i use ''image show'' to show the image with the threshold in the ROI, that part of the image is different from the threshold image without the ROI. i'm using roifilt2, but instead of a variable with a filter(like unsharp), im using the image with the threshold, like this tutorial https://es.mathworks.com/help/images/apply-filter-to-region-of-interest-in-an-image.html P.S i can't use the threshold funtion of matlab, i have to code it myself( its a condition of the homework) 
&gt; So what I'm struggling with is (question c) Where is your kI gain? &gt; how do I figure out the correct gains (using trial and error) until I get a stable/fast system What do you think "trial and error" means? How do integral and proportional gains affect step responses? These should all be in your class notes. &gt; how do I make it so that the step starts after 1s? Have you opened the step block and looked at the settings? You need to put forth actual effort to get actual help here. 
If you look at that graph you see a bunch of different magnitudes (y) a different frequencies (x). These magnitudes correspond to how much of a frequency is "present" in your signal. You could consider the coefficients as a sort of weights given to each frequency. Where the weights given to frequencies between the peaks will be close to 0, i.e. they will not contribute to the overal signal, whereas the peaks will contain the information of the signal. In other words, if you detect the peaks you know their magnitudes and their frequencies. The reconstruction of your signal in time-domain will be a simple sum of sines. So for each single peak you have you make a new sine at that frequency and the amplitude of that sine will be proportional to the magnitude of the peak. You repeat this for every peak and at the end just sum everything up. Its probably not exactly like this, but you can try this as a start.
What I'm asking for is clarity. The kI gain I have added after making this post, though I am still struggling with the trail and error method - I assume my graph is meant to rise and then level off, though I am not completely sure. I know what trial and error means. If by settings you mean double clicking the block, then yes, I have, but I'm not sure which box relates to what I'm asking for. I think its very presumptuous to say I have put no actual effort in this work. Yes, I'm no master or apprentice, barely even a beginner, but I am trying, what more do you want? 
Super helpful! I'll do some research, thank you!
Ohhh I see. That actually helps. So while I can easily get the magnitudes, I'm not quite sure how to get the frequencies corresponding to those magnitudes. How would I get the frequencies? 
see [my reply yesterday](https://www.reddit.com/r/matlab/comments/7hr13u/matlab_error_dont_understand_what_i_am_doing_wrong/dqt3hzx/)
So, the error messages in MATLAB are very descriptive. It tells you "error on line 5" and "subscript indices must either be real positive integers or logicals." Look at line 5, it says `y(0) = 0`. Hint: your subscript index is what's inside the `()`. Is it a positive integer or a logical?
Matlab is 1-indexed, not 0-indexed. Thus, the first element is `u(1)` not `u(0)`.
If you want to use pipes, use pipes. Assuming Linux or similar, create a FIFO pipe using mkfifo, run two instances of matlab, each running its own function, one writing to FIFO, the other reading from it. However you most likely don't want to do that. It would take some additional effort to read expected chunks of data from a pipe. Pipes don't have any concepts of messages or packets - you may write to matrices of 2KB each into the pipe, but read 4KB of data at the other end (the details are not well determined). Also the matlab implementations themselves need to be adapted to work with stream data. The above functions would need to be called on smaller chunks of data, which could then be send over the pipe. All in all its a giant hassle. Pipes and pipelines are not really meant to improve CPU performance through parallelization, but allow processing large sets of data that don't fit into memory without storing partial result, saving on storage space. While a neat and useful technique in the end it is simply a product of its time. 
I can't immediately see what's wrong so i'll give you some advice; reduce your code. You'll gonna have to find out "What bit of code is absolutely necesairy to produce your observed behaviour?" The process I use for this is deleting bits one by one, or replacing bits with stuff that does the same thing for your eventual error, and check if the error still happends. an example of stuff you can just delete because it's not necairy for the rest of the code is : %plot results plot(interval,u1,interval,tr1) plot(interval,u2,interval,tr2) plot(interval,u3,interval,tr3) something you might want to replace with something similair (and maybe delete later in another iteration of the deletion process) is : tr3 = []; for i=interval a = cos(3*i)+i*i; tr3 = [tr3 a]; end to be replaced with for instance tr3 = ones(size(interval)) ; Doing this code reduction helps you in two ways: 1) isolate the cause of the error, to make it clear to you where the mishap happends, and 2) makes it easier and thus more likelyr for people to can/want to help you. 
`euler` is a [built in MATLAB function](https://www.mathworks.com/help/symbolic/euler.html). You need to name your function something different. 
thanks for the advice! Removing the plot functions makes it work . . . somehow. 
That makes sense. I don't know why the instructor told us to call our program that, then.
It is working intermittently based on your path. When your function is higher in the path than the MATLAB built in functions, it calls your function (it works regardless of the plotting functions- I just named yours euler2 and it worked fine, plots and all). 
Perhaps your teacher doesn't have the symbolic toolbox, which is where the function lives. So, he didn't realize it was a problem. 
How do people get so far without at least a basic understanding of Matlab indexing?
HetroTransSpec is expected a handle assignment, not a double. 
When you use type `[a;b]` it means "place the array b (and b is an array, it's ok if it's a 1x1 array, in MATLAB all variables are arrays) under the array a." This is called "vertical concatenation" or, `vertcat`for short. For this to work, a and b must have the same number of columns. Now, when you say `v = [v;y]` you have to ask yourself, does `v` and `y` have the same number of columns? Also, this may be helpful, if you want to add something on to the right side of a vector, you can say `[a,b]`, and in this case, a and b must have the same number of rows. This is called `horcat` by MATLAB. 
Thank you, that helped. Follow up question, if you don't mind, where I have v=zeros(1,N) I was hoping I was going to allow the cells of v to be altered by the for loop. However, they have all stayed as 0, how do I change this?
1) Format your code so that we can actually read it 2) Isn't this more of a mathematics question and not a Matlab question?
The code you're using is concatenating vectors. If you want to instead replace values (which is better- it's much faster), you have to use indexing. I'll do a simple example: a = zeros(1,n); for ii = 1:n a(ii) = cosd(n/ii); end 
Use the help documentation. Try something. The first option, Step Time, in the Step block sets the... wait for it... time the step happens. Increase a gain. See what happens. Increase it some more. See what happens. Increase it a lot, see what happens. Trial and error means try something. If it gets better, try some more. If it gets worse, try going the other way. Here's the spoiler: if you make your gains too high, your system will go unstable. Instead of settling about the new reference, it will "rail" to +/- Int. These are all things I would have expected you to have covered in the class asking you to do the assignment, but again the assignment is really just asking you to try *something* and post the results. There's no requirement on steady state error, settling time, rise time, percent overshoot - *you just have to try* **something**.
Sorry about that, actually I just want to get an idea of how to implement a loop or something to be able to find the cases where will be infinite solutions
That’s still a really vague question. Do you understand for-loops, while-loops, etc? Just think about how you’d detect this cases using pen and paper; then consider how to translate that into your script. 
Helped a ton, cheers mate.
In my code I refer to the plot as app.HetroTransSpec. Is this what you mean?
I don’t know, you hardly posted any code, we have no idea what your code is doing behind the scenes. But the error is very clear. 
I mean, technically, isn't it a logical false?
Matlab will be very slow unless you do the most absolute basic CFD. 2-D RANS is do-able or 3D geometry with only 2D flows (such as a vortex in polar-cylindrical coordinates where there are no forces acting in the theta direction. In either case, try OpenFOAM or stick to 2-D CFD. A good 2D problem to solve is the water hammer (it is actually 1-D with time dependence). 
You can do this in Matlab without too much trouble (granted you know the mathematics behind the scenes). Dedicated CFD software will be much simpler, more flexible, and faster, however.
You should go through your code step by step. I think there are a few parts where the code does not do what you think it does. That while loop with the c ~= y is probably one of those. But that doesn’t even matter as it has no effect anyway. You could take it out without anything changing at all. Once hint: what size is z at the start of that double loop at the end?
Yes, OP shouldn't try to get that much code running at once. Break it down and check whether each part works and does what you think.
You're missing a bracket on line 5. Initialise C to be zeros (or NaNs or whatever you want) rather than the sum of A and B (you can make another matrix D = A+B if you like). I suspect your issue is that when C(i,j) == a(i,j), but C(i,j) != b(i,j), no value gets assigned to C(i,j). This would be obvious if you initialised to some diagnostic value.
[removed]
Thanks for asking nicely, often people don't. Also thanks for actually providing your code. So I have a few general tips first -- the error that matlab gives will display the function called and the line number, just from this you should be able to find the offending line. Secondly check out the keyboard command, it's quite useful for drilling inside of functions to see what is going on. Now, from looking at your code it seems that what your function does is take an input that is the size of the output matrix and a random seed, it then calculates the random number from the modulus of this seed plus some other numbers. The first point of confusion for me is that from the way you've written the code it seems that you want every element of your output to be different, but the way the code actually works makes them all the same. The way to fix this problem really depends on which one you want. The problem areas: * You don't need a conditional around the abs, just use the abs as it is * Your while loop basically does nothing at all * A new assignment of a variable will overwrite the previous contents, you do this several times * Because of these problems the for loop after crashes The code is reasonably broken, I recommend really breaking the problem down and doing it one part at a time, verifying the previous result is what you want it to be. 
&gt; This would be obvious if you initialised to some diagnostic value. Does MATLAB have something similar to Option Explicit in VBA to force you to declare variables and initialize them? I now MATLAB lets you get away with murder for the sake of user friendliness but stuff that.
Hi there. The easiest way I can think of doing this is having a Scope in Simulink for each signal you want to graph. When you place a Scope, you can check the properties and will see a "save data to workspace" checkbox. If you check it, you can save a variable that is usually a structure. That variable can be graphed using plot. You can also do it with a Scope that has multiple axis or a Scope that has a bus as an input.
Thanks for the reply! Where can I find the preferences for the scope? I only know how to graph using the scope, not selecting the preferences (I'm new to matlab) 
Can you export the data on a .mat file or the figure as a .fig?
Here you can see it. http://www.goddardconsulting.ca/image-files/simulink_essentialsScopeProps.jpg
Thanks! 
I fixed the conditional abs issue, and yeah the intention is for every element of the output to be different, and the while loop is supposed to fill the z array with numbers 1 through some number, then the numbers are altered then swapped to the other one that comes out as "ans" 
Which line is line 515? The first problem I see in the code is that you've called an anonymous function with variable 'x', and not used 'x' anywhere in its definition, but rather 't'. That should give an error telling you that 't' is undefined, but after 500+ lines of code I imagine you've declared 't' somewhere (as a vector for plotting, probably), and the anonymous function is now a constant using your previously defined value(s) of 't'. The call to integral() expects to return a scalar from 'fun3' for each evaluation point in the interval you defined, which produces a vector. Instead it returns an identical vector for each evaluation point, creating a matrix, causing the error. Try changing 'x' to 't'.
In that case you have a problem in your while loop and also after it when you calculated the modulus.
Ok thanks.
Logical indexing is different than a Boolean value. An example would be y(x&gt;2) = 0 for x and y vectors of the same size.
When I calculate the modulus, is what i did altering every element of the matrix ? my intent was to mod every element with that equation, then divide every element by 134456, i think when i used the mod function i just got rid of the matrix entirely ?
Not familiar with VBA, but I have never come across that in Matlab.
There are a lot of functions and arrays which we don't really have any information about. I would just progressively comment out more and more lines until the problem disappears. That lets you hone in on the issue. I notice you don't set compOnset to anything in this snippet. Not sure if that's intentional and it's set previously.
I solved most of the issues, thank you
Yeah, I figured out the issue with the while loop, I solved almost all the issues of the code, now just need to figure out a way to transpose matrix elements to the other matrix, thank you for your tip with the size of z at the end
Your equations appear to be consistent with your circuit, with the caveat that U is actually a step voltage source with the [traditional current source symbol](https://en.wikipedia.org/wiki/Electronic_symbol). If U is instead a step current source, then your model is incorrect. Your Simulink model appears to be consistent with your equations. From circuit theory, in steady state, what do you expect your inductor current and capacitor voltage to be?
You can use an output block in simulink to send the data to the matlab workspace.
Do you have a question or something? Your title mentions while-loops but there's no while loop in your code, and you don't seem to indicate what your problem is.
When you post to reddit, if you put four spaces before lines of code, it will format it appropriately. I see a few possible bugs, but there's every chance those were created when you posted. As example: ... if L &lt;= 125 &amp; d &lt;= 48 Lt = 2d+6; ... looks and performs differently to this: ... if L &lt;= 125 &amp; d &lt;= 48 Lt = 2d+6; ... It would also help if you explained what goes wrong. Do you get an error? Do you get obviously wrong results? Do you have troubles getting it to run at all? Without knowing that, it's difficult to help you.
This is a bit of a mess, so here are a few tips: 1) Whatever you're programming, try starting with the simplest functional piece and make sure that that's doing what you think it's doing. Then you build on that in an incremental way, testing your code at every step. In your case, this is to create a single chunk of code that will do a random walk with N steps. Once you have that piece of code, make sure it does exactly what you think it is doing, and then you can start thinking about sticking it in a for loop and plotting multiple walks. 2) While Matlab doesn't enforce good coding practices, it is a good idea to maintain consistent indentation. Lines 29-31 should have the same indentation as lines 34-35. 3) Give your scripts meaningful names (not matlab.m). 
You can use a ramp, or you can integrate a constant (or step), either will do exactly what you want if you configure them correctly. What do you mean it's not giving you enough values? It should give you exactly as many values as there are samples (n = T/dt). If your sample time is fixed at 1 ms and you run for 1 s, you get 1000 samples.
Yes definitely. 
Generating road profiles is pretty specific. There's not likely to be a pre-made tool just for that. It's like asking for a house building machine - it doesn't exist. You just use hammers, saws, etc to do the work. You'll have to figure out what you expect a road profile to be, mathematically, and use the available tools to construct it. I assume you have some statistical definition? 
Are you doing this for one image, or many images that are slightly different? And what the fuck is that imaging hosting site, holy shit. You can’t just use imgur?
for many images that are slightly different, but I just want first start off with this image. I just want Matlab to be able to clearly detect the horizontal lines that span the width of the page and not detect the horizontal lines that don't span the entire width of the page, such as for the object in the bottom of that sample image The new link to the image is: https://imgur.com/a/6lfEQ https://imgur.com/a/6lfEQ
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/3YpHWqm.png** **https://i.imgur.com/3YpHWqm.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dqx9bn5) 
There are quite a few methods in the image processing toolbox that could help you. You need to be more specific than "how can I extract these edges." If you wrote a function, that was output = extractEdges(image); what would you want the output to look like?
ideally, the output would contain some information about the edges, such as the y-coordinate in that image, an estimate of the edge width, and how many edges in a given image
The ramp function is the only one giving me a nice graph, I only have three options for it: *Slope = 3.3 (minimum I need to plot full graph of 0:0.1:32.9) *Start time = 0 *Initial output = 0 I changed how I got the data and I am getting enough values for it now (over 50). It's somehow doing it in blocks of 0.2 amps, when I was thinking I was doing in in steps of voltage. It works though, the numbers make sense. If I set the slope to less than 3.3 it doesn't plot the entire graph, in my head that had to be related to the voltage maxing out at 32.9, which is why I was so confused with it I think. But from what you said slope is dV/di ~ 3.3 now I think about it (max current around 10) so I/di would be 10/0.2 ~ 50 steps. All set from the slope and a couple of max values, that's a bit mad but it makes sense in a screwy kind of way. I still think there must be an easier way to do it but "if it ain't broke don't fix it" will work very nicely right now! Thank you!
At the moment you have nothing that keeps the loop from running forever. While true will just keep on going and you don’t terminate it by for example le using a break. Think about including the constraints that you have in the if clauses into the while condition instead. Additionally I would be surprised if that code even runs the first loop iteration without error. You are missing one important assignment at the beginning of the loop body. Hint: what would U(n-1) be once you get into the loop?
Do you mean that "while any((abs(X-0.8)) &lt; 0.12) &amp;&amp; any((abs(Y)) &lt; 0.12) &amp;&amp; any((abs(Z-0.8)) &lt; 0.12)" will run better than the if clauses? Why is that? And what do you mean by the hint? 
Think about it for like 10 seconds. 
sorry, I'm still not understanding
Jesus Christ. I love it.
How do I make that my splash screen!?
Simply go to *C:\Program Files\MATLAB\R2017b\resources\coreui\matlab* and replace the images with the one you like. You'll have to resize the image to the sizes of those images found in there. It's not clearly visible in the gif, but the desktop icon is also replaced. That is done by converting an image to .ico with an internet tool(If you use the hatlab one, remove the white background with the lil magic wand and save it as a .png first for the best results).
What are you optimizing for? Ramp time? This will give you a good starting point. https://en.m.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method
Also, here is where you can change the text overlayed on the splash: *C:\Program Files\MATLAB\R2017a\resources\coreui\en*
I'm not sure if you understand what a while loop really does. A while loop will keep repeating something until something stops being true. "while true" never stops being true (obviously) so your loop runs forever. "while some_condition_is_true" will terminate when some_condition_is_true becomes false. Your if statements are inside the while loop, but if they stop being true, nothing happens, the loop just keeps asking "is this true?", to which the answer is "no" ad infinitum. /u/FrickinLazerBeams has taken you 90% of the way there. If you can't work this out on your own from here, then maybe review some material on while and if statements.
If you want to be more flexible, you'll have to use fprintf instead. Be aware that you can write an entire matrix in one go as well. Example on top of my head: hSource = fopen('filename', 'w'); try fprintf(hSource, '%.4f; %.6f/n', Matrix); catch exception fclose(hSource); end fclose(hSource); *Matrix* is your data organized in *lines*, so that linearisation alternates between your data sources. If your datasource exceeds, say, 150000 lines, consider writing in chunks. 
Hi! Thanks for responding. I'm sorry, I didn't know about code formatting and spaces between code lines. I search for it, and I re-edited the code. The problems are: When d = 16 (first iteration), matrix B 1x2 (1 line, 2 columns), and they have the correct value. But when it iterates d = 20, the matrix that should be 2x2 is 3x2, and values from the two new lines are wrong. Thanks for helping.
Hi! Thanks for responding. I'm sorry, I didn't know about code formatting and spaces between code lines. I search for it, and I re-edited the code. The problems are: When d = 16 (first iteration), matrix B 1x2 (1 line, 2 columns), and they have the correct value. But when it iterates d = 20, the matrix that should be 2x2 is 3x2, and values from the two new lines are wrong. 
It's still reasonable unclear what you want exactly, but i think [A radon transform with trics](https://nl.mathworks.com/help/images/detect-lines-using-the-radon-transform.html) might be a solution. 
yes, i solved it with fprintf as well, thanks for the help :) Don't know why i was using dlmwrite to begin with :D
It was really /u/annuges. I just told him to actually think about what annuges said rather than just feigning helplessness. 
&gt; what do you mean by the hint? His hint was a question. So... What is the answer? What would U(n-1) be when you get into the loop for the first time? This isn't a riddle. Try to answer the questions. 
Ah, sorry, /u/annuges. Credit where credit is due and all that.
This has nowhere near the information we need to address this question. Are you using Psychtoolbox? In which case, you might want to work through some of the examples/tutorials on the [Psychtoolbox website](https://docs.psychtoolbox.org). Try to understand what's being done and then ask a question which is actually programmatic. 
Are you talking about a Matlab function block? 
I tried that as well and it lacked the ability to pull up a webcam in simulink. I got the custom s function blocks to pull up the webcam a few times but then got an error notifying me I needed a .tlc wrap on it.
I may be wrong, but I'm pretty sure you can change the axis labelling to a different scale somehow. Otherwise I can't think of a way to get what you want without down sampling, which you don't seem to want. I would look into changing the tick scale for the x axis though, I vaguely remember doing that once. And if I'm wrong I know someone will correct me
you can specify xtick locations and values: https://uk.mathworks.com/help/matlab/ref/xticklabels.html choose where they need to be placed, and what value they have, should be fairly intuituve once you've looked over the basic skeleton code.
thanks for the quick response guys. I'll check out the link, E_M_G and see if I get any smarter. 
When I try the xticks I get an error message such as: Undefined funciton 'xticks' for input arguments of type 'double'
You may have to use a capital X -- Xticks('label') for example... same goes for Y
still same problem. Could be because that Im using an older version of matlab? using R2014b at the moment. 
Yeah, same version as me - I trust you've used both Xticks([ ]) and Xticklabels({'',''}) Xticks is the location of the ticks, numerically along the axis and Xticklabels are where you assign the labels for these ticks
Just scale the x-axis data. Make a vector t = 0:length(myTempVector) Then you can use plot(t/3600, myTempVector) This will keep the same number of points, but scale them to hours instead of seconds.
When I check the documentation for xticks, I see 'Introduced in R2016b' at the bottom of the article. You'd have to upgrade to gain access to it.
OK, this is a multi-step process, but one that will make your life so much better in the long run. First, know that `plot` can be called with 2 inputs, `plot(x,y)`. In your case, you want to make `x` your time and `y` your temp. So, if you have one measurement of temp every second, you could say `t = 1:3.5E4` and then you'd have a time vector. Now, if you plot this as `plot(t, temp)` it would still look the same, so you might think this hasn't helped you at all. But now that we have a time vector, we can have some fun. MATLAB has a unit type called a [duration](https://www.mathworks.com/help/matlab/ref/duration.html). Since your time is in seconds, the duration type you want is [seconds](https://www.mathworks.com/help/matlab/ref/seconds.html). So, you can make a new variable of type `seconds` by saying `t_dur = seconds(t)`. Now, since `t_dur` is a duration, you can set properties. Specifically, you can set a `Format` property. To get your data in `HH:MM:SS` you can say `t_dur.Format = 'HH:MM:SS'`. Now, if you say `plot(t_dur, temp)` you'll get your x axis labeled in HH:MM:SS. This is better than manually setting tick-marks, because it will auto-resize if you zoom in and out. 
using the capital X and Y works for me -- this is an age old piece of code and I'm yet to discover why they changed it to make way for the lowercase xticks and yticks (i assume a new function that runs on the latest versions).
Yeah, it was around when they made the huge upgrades to the graphics engine, I guess.
Well, first check the infos of the randi() function [here](https://fr.mathworks.com/help/matlab/ref/randi.html). Then, check for infos here [here](https://fr.mathworks.com/help/matlab/ref/for.html?searchHighlight=for&amp;s_tid=doc_srchtitle). Finally, try to think how you would do this "manually". You have 5 rows, and 3 columns. How many time to you need to repeat the process "choosing a random word" to get a word from every cell? Also, let's the process is "I think of a random number, that I call "i", from 1 to N and pick the word in the i-th cell". What is the maximum value i can reach? This questions should help you to start building your code.
Damn I hope someone helps with this, I'm struggling with something similiar.
I don't have it but someone in my class edited one of those "these companies test on animals" and put matlab in it
Ok I will do it!
Okay, so I finally have the solution! Its not a very sexy solution, but it works nonetheless. If I change my model estimation part to this: [EstMdl, EstParamCov] = estimate(ARmodC, data(1:i,1),'Display', 'off'); Then I get a new variable, EstParamCov, which is a covariance matrix. The first entry (1,1) of this matrix is equal to the variance, if we take the square root of this we get the Standard Error. Finally, we can compute the t statistic by dividing the parameter value by the Standard Error, and hence I get the following code: [EstMdl, EstParamCov] = estimate(ARmodC, data(1:i,1),'Display', 'off'); tstat=EstMdl.Constant/(EstParamCov(1,1)^0.5); if tstat &lt; tCrit [EstMdl, EstParamCov] = estimate(ARmod, data(1:i,1),'Display', 'off'); end Thank you very much for your help along the way \^^
I think that technically a pipe isnt what I had in mind, I just wasnt sure what to call it besides a pipe (my next best guess would be some sort of asynchronous compute). I added an edit to the main post that (hopefully) clarifies what I am hoping to do.
&gt; how could you start using an output of a function before the output is done being written? You would naturally need to use to have the 2nd function be such that it only required a small subset of the data to run each calculation, and leave enough lag to ensure any data required had been generated already. In my case the 2nd function ("foo") outputs a data array of the same size and same bits-per-sample as the input, and for each point, the output only depends on a single sample (the input from that same location in the data array). Since it has a 1-to-1 dependence between the input and output this isnt a problem for what I want to do. Furthermore, I dont actually need the output of "fread", I only need the output of "foo", so as values are read into memory by fread, foo could (ideally) take them, do what it needs to, and directly overwrite the same memory addresses with the new values.
&gt; Pipes and pipelines are not really meant to improve CPU performance through parallelization, but allow processing large sets of data that don't fit into memory without storing partial result, saving on storage space. The "saving on memory space" is one aspect I hope to accomplish (since these functions will be going through a 2 TB dataset multiple times), but Im hoping to get a performance boost too. I think that "pipes" arent technically what I had in mind, but seemed the most similar to what I was after (my next best guess would be some sort of asynchronous compute). I added an edit to the main post that (hopefully) clarifies what I am hoping to do.
Your problem is in these lines: Fi = [Fi 0.75*At*Sp]; % Càlcul del factor de seguretat SFe = [SFe, (Sp*At-Fi)/(C*P)]; SFo = [SFo, Fi/(P*(1-C))]; Fi is a vector that grows every iteration. Because SFe and SFo both add a formula that is a function of Fi, they add more lines every iteration. I suspect you just want `Fi = 0.75*At*Sp;`, although on closer inspection, that will change how matrix A is defined. Probably the simplest fix is to define the term you will add to Fi, then use that in your definition of SFe and SFo. I also notice that you have: km = [km E*d*A*exp(B*d/l)]; which uses A and B. I'm assuming these are different from the A and B you calculate at the end. If this is what you want, then it's not an error, but I recommend giving better names if you or someone else may look at this code in the future, since it would be easy to get confused. As a final note, if you anticipate that you will use Matlab frequently, you may want to try to get in the habit of using vectorized calculations instead of for loops. Here are some parts of your code without the for loop as an example: ... d = [16 20 24 30 36]; Ad=pi*d.^2/4; ... Lt=2*d+12; Lt(L&lt;=125 &amp; d &lt;= 48) = 2*d+6; Lt(L&gt;200) = 2*d+6; ... kb = Ad.*At.*5./(Ad.*Lt+At.*ld); lt = l-ld; km = E*d.*A.*exp(B*d./l)]; ... SFe = (Sp*At-Fi)./(C*P); SFo = Fi./(P*(1-C)); ... For what you've done, this won't be drastically different, but for larger projects vectorized calculations will be much faster.
&gt; Furthermore, I dont actually need the output of "fread", Okay... &gt; I only need the output of "foo", ... okay ... &gt; so as values are read into memory by fread The values that are read into memory by fread **IS** the output of fread. You're saying you don't need the output of fread, and then go on to explicitly state you need the output of fread. Probably the closest to what you want is to create a memory map, which is a shared bit of memory between a couple scripts. Open two instances of Matlab, both connect to the same memory mapped file, then one process reads and the other does something useful with the data. You can set/clear bits indicating the data has been used. Read more about it [here](https://www.mathworks.com/help/matlab/import_export/overview-of-memory-mapping.html) and [here](https://www.mathworks.com/help/matlab/memory-mapping.html) and take careful notes of the following (emphasis added): **When Memory-Mapping Is Most Useful** Memory-mapping works best with binary files, and in the following scenarios: * For large files that you want to access randomly one or more times * For small files that you want to read into memory once and access frequently * **For data that you want to share between applications** * When you want to work with data in a file as if it were a MATLAB array **When the Advantage Is Less Significant** The following types of files do not fully use the benefits of memory-mapping: * Formatted binary files like HDF or TIFF that require customized readers are not good for memory-mapping. Describing the data contained in these files can be a very complex task. Also, you cannot access data directly from the mapped segment, but must instead create arrays to hold the data. * Text or ASCII files require that you convert the text in the mapped region to an appropriate type for the data to be meaningful. This takes up additional address space. * **Files that are larger than several hundred megabytes in size** consume a significant amount of the virtual address space needed by MATLAB to process your program. Mapping files of this size may result in MATLAB reporting out-of-memory errors more often. This is more likely if MATLAB has been running for some time, or if the memory used by MATLAB becomes fragmented. But really, if you're continuing to pursue this then you're probably doing it wrong.
[haha, found it/a similiar one](https://www.google.nl/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwia1KjyzPvXAhUGKVAKHYSjA60QjRwIBw&amp;url=https%3A%2F%2Fwww.facebook.com%2Fmatlabshitposts%2F%3Frc%3Dp&amp;psig=AOvVaw2A02qM5UdD4efE1CmA1tiW&amp;ust=1512863121481641)
Hsha... i did this. But i didnt see how to get from this to the answer. There are actually 4 outputs from the function if i remember correctly.
Are you generating c code from the Simulink model? If not, what's the TLC error you're seeing? Depending on the release you're using you could try a MATLAB System block instead of an S-Function since they don't rely on TLC at all. Although honestly I think I'd just figure out how to do the motor control using MATLAB.
Curve fitting toolbox will output up to 8 fourier coefficients, if you have it fft function (definitely more work on your end) 
Just divide every value in the time array by 3600. Same number of values, now in hours. Unit conversion! 
This is very cool. Thanks for posting that, never seen it before. 
That's significantly easier. Can't believe I didn't think of it. Thanks for the thought!
+OK. Maybe I didn't term the question in a clear way. I didn't want to copy paste the whole question as I just wanted an idea on how to do it. but whatever I do is not giving the output I want. so basically this is the question: 1. Create a cell array of 3 cells. One cell has to contain 5 persons names, a second cell has to have 3 verbs inside and the third cell has to contain 5 food names. Example of Cell Array: Jack Ran Pasta Tom Smiled Bread Jane Cried Apple Emily Grapes Peter Cherry 1a). Use a for loop to go through your cell array and pick one random word from every cell. Use the words to show a sentence in the command line. Hint: Use randi() to pick a random word from a cell. When calling randi(), think about the limitations of that cell. Do not produce an error! **This is what I've done so far: A={{'Jack';'Tom';'Jane';'Emily';'Peter'},{'Ran';'Smiled';'Cried'},{'Pasta';'Bread';'Apple';'Grapes';'Cherry'}}; %this would create a cell array with 3 cells**
You could be the guy that helps though
Wow, you're completely right! My first year using matlab, so my skills with it aren't good enough. Thanks for helping, and I'd take your advice!
Thanks for the help, but I know how to tune. I want to use Matlab to identify the plant using a real-world step response from a CSV file. Then I can use Matlab to tune.
You could try using 'try and 'catch'. for j = 1:n try % your code catch ME warning('Something happened'); end end 
Hello, this might be the best answer I`ve got so far, however I still get a error message when I try to convert with: t_dur.Format = 'HH:MM:SS' "The format string 'HH:MM:SS' is not valid
I've also tried with t_dur = duration (H,MI,S)
Oops. The format string is supposed to be lower case: 'hh:mm:ss'
I can't believe I didn't try that... Thanks a lot man! =) The data is a lot easier to understand now! :D Just a detail. The x-axis now shows hour per hour, but like "01:00:00" for 1 hour. Is it possible to just fix it with "01" etc? This is just a small thing tho, it looks so much better now. thanks!
On the reference page for duration, you can scroll down and see the displayFormat document. It will tell you how to build any display format you want. 
Thanks again!:) 
Yeah. I recommend converting all of your times in MATLAB into durations for plotting purposes. It makes much prettier/easier to read plots. 
Honestly that would be really bad practice if you could even do it. A couple of ways to solve your problem: - pad your matrix with a row and column of 0s (or NaNs or something) around the data, then run your code in an if loop, only on the indices of your original data (for i=2:end-1) -or run in an if loop on the original matrix of data, with additional if statement to check if youre on an edge before you calculate.
But, what are you tuning for? What does tuning even mean?
I searched google for "matlab working with images" and found these two articles from the documentation: * [Images](https://www.mathworks.com/help/matlab/images_btfntr_-1.html) (MATLAB image basics, no toolbox required) * [Getting Started with Image Processing Toolbox](https://www.mathworks.com/help/images/getting-started-with-image-processing-toolbox.html) Generally speaking, if you search google with the name of a software tool you'd like to use and a short description of the thing you'd like to use it for, you'll have pretty good luck. These articles (and more) were right on the first page of search results. Someone also may have made a tool and uploaded it at [MATLAB Central's File Exchange](https://www.mathworks.com/matlabcentral/fileexchange/). I didn't find anything that looked particularly art-oriented, though I did find some "pixel sorting" tools. As for the art portion, I think that's more of a creative process, no? You might ask around over at /r/glitch_art/ for any guidance they might have there. Google also led me to that when I searched "glitchart" to find out what on earth it is. ("What the heck is a Glit Chart? Ohhhh...") If you run into any technical problems with MATLAB that you can't find the answer to in the documentation, come on back and folks here will likely try to help you through it. To quote the sidebar, "The effort you put into asking a question is often matched by the quality of our answers." Bring specific code, specific errors, and a specific question that has an objective answer. Happy trails!
You can tune for a number of things,e.g. stability, reaction time, tolerance. But you're missing the point. Tuning functionality is built into Matlab. I need to learn how to use that process with my data trends. It doesn't matter why. I can already tune the process live with the PLC software. I just want the ability to use Matlab.
&gt; The values that are read into memory by fread IS the output of fread. You're saying you don't need the output of fread, and then go on to explicitly state you need the output of fread. I thought what I meant was obvious, but to clarify: Say I start running a code which reads the data using "fread" and then converts that data with "foo". If I let the code run and come back in a week (or however it takes to finish), I dont care what the output of "fread" was, only what the output of "foo" is. The ONLY use the values output by fread are to me are as inputs into "foo". &gt; Memory Mapping I had been trying to avoid using this due to the virtual address space issue. (Also, in a general sense, what I want is to sequentially ready through every part of a large file and share the data as I go, which isnt really a use case that memory mapping is good at). I could make it work, but it would require the ability to * 1) explicitly break up the mapped memory into chunks (say 100 MB each, which would be 21,000 blocks or so) and * 2) be able to un-map a block when I am done with it (and free any physical and virtual memory associated with it). Of these #2 seems like the more troublesome one, as Im not sure Matlab is capable of doing this (Matlab in general seems pretty poor when it comes to un-allocating memory and marking it as free, hense the "more likely to cause out-of-memory issues for long running programs" part of TMW's warning about memory mapping). I imagine the code would look something like this: Before starting, make a full copy of the data that can be altered in place (we dont want to destroy the original data file). This copy is what will get memory mapped. This will require stripping out some data headers, so this might require another instance that reads the data, strips out (and saves) the headers, then saves the data (without headers) either with fwrite or by assigning it to a memory mapped variable (that uses the same blocking scheme as the other instances). Instance 1: memory-map current block, read data as uint32 (with memory mapping you dont need fread to do this), use "foo" to convert data to IEEE singles. When the end of one block is reached un-memory-map it and memory-map the next one. Memory-map an additional scaler value to indicate how far this instance has gotten through the data (to ensure subsequent instance(s) dont read ahead. Instance 2: Memory map current block and the "progress scaler" from Instance 1. Perform fft on chunks of ~3000 samples, and discard negative frequencies (input is real-valued signal). The fft data will fit in the same space as the original data, but needs to interlace the real and imaginary parts of each real frequency. I might want to zero pad to the next power of 2, in which case I would have to zero pad the data when I first make a copy of it. Even IF I could get this 2-3 instance scheme working it seems like there would be enough additional I/O going between memory and disk that I doubt it would be faster than just breaking the data up into blocks and running the whole fread&gt;convert&gt;fft&gt;fwrite process sequentially on each. What I REALLY want is the ability to "memory map" actual memory addresses (NOT memory map data on disk using virtual memory addresses), and then to be able to access the data from those actual memory addresses from multiple instances of Matlab. (Im not sure if this has a name other than "memory mapping"). To my knowledge this isnt possible with the standard memory mapping tools in Matlab, but I'm hoping that someone else knows of a way to do this.
No comment on how to interpret the r-matrix, but in lines 11-13 of the code you posted, all of the multiplications should be matrix multiplications.
Thanks for the response! Do I do that just by removing the '.'? 
https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html#btyv9yp-4
Yeah, correct! But the other two outputs were not relevant in my case, so this solution worked ;)!
Yes. That would work.
I see, I have never done any kind of programming before, so I still have a lot to learn in terms of what I can/can't do (or should/shouldn't do), so I suppose I'll try to find a workaround. I have already been exploring a bit to have separate code for the edges, but it turns out to be quite a lot of code. The first suggestion seems like a good idea, I'll see what I can do. :)
Thanks! I'll explore this command to see what I can make from it.
Glad you managed to work it out. This thread may help someone else in the future too :-)
You don't tell it to ignore the errors. You write code that avoids or accommodates the errors (i.e, if it's out of bounds you should skip this case), and if you cannot avoid or accommodate the error, you'd use a try/catch statement. All of these can be easily googled.
That would be great :D!
In general, if some indicies might be out of bounds, I usually find doing something like this helpful Instead of x(a,b) use dim=size(x); x(max([1,min([a,dim(1)])]),max([1,min([b,dim(2)])])); This causes any point that would have been out of bounds to instead return the value from x at the closest edge. If instead you dont want to even consider these cases, you could do if 1&lt;=a &amp;&amp; a &lt;= dim(1) &amp;&amp; 1 &lt;= b &amp;&amp; b &lt;= dim(2) x(a,b) end which will just skip over any (a,b) that are out of bounds.
Awesome, thanks! I'm still not getting the value for r that I'd expect. Don't suppose you know if I've used the eig function correctly, do you?
Actually, I'm in neuroimaging, and I have been intending to learn CCA, so I have been playing with your code. You notice the pattern in your code where you often see something like: transpose(X)*X for some matrix or product X? That computes the variance-covariance matrix of the columns of X. The result should be a positive-definite and symmetric matrix. I think D as well should be positive-definite and symmetric, which would make all the eigenvalues real and positive. When I run your code, I get negative eigenvalues that are incredibly small, meaning that the input matrix is not positive definite, or it is very close to not being positive definite and numerical truncation errors mess up the remainder of the calculations. This leads the denominator (later on) to be a complex matrix. Let me try a few more things and repost. If you want to look into something, try making the X and Y matrices rectangular, or longer than they are wide. Does this help?
Ah, awesome! That's really cool! The end goal of this code is to do the CCA on some real MRI brain data, I just need to get it working with this arbitrary stuff first. Thanks so much for you help. I'd be thinking my values didn't really look right. I've tried making the matrices rectangular, but I'm still getting negative eigenvalues. 
I sincerely doubt it's possible, and I also sincerely think you're trying to solve your problem the wrong way. I would look at [tall arrays](https://www.mathworks.com/help/matlab/import_export/tall-arrays.html) and [distributed arrays](https://www.mathworks.com/help/distcomp/distribute-arrays.html) and see if that's more along the lines of what you want. Matlab is *not* the tool to use if you're wanting to pick memory registers to write to, etc. Again, look at the functions that already exist. If they don't suit your needs then probably you haven't phrased your question correctly (for Matlab) or probably Matlab isn't the right tool. 
What are you trying to do, such that the standard formats are insufficient?
Each "data type" in MATLAB is just a class, so to create a fractional byte data type, you just need to create the class for it. If you're strapped for space to the point that you can't load it into memory, you should be looking at tall arrays. 
An error is being thrown when you have finished compiling and the RTI system is trying to load your software to your hardware. This isn't a Simulation or code problem, it's a communication issue with your board. Follow the instructions about setting up the COM port, and make sure your hardware will even respond to a simple Hello World script. 
I tried a simple script on it and it comes up with the same error. I'm not sure exactly how to fix it though. For a while, my computer would put out that error with the board, but it worked on the computer of someone else in the group. Now it doesn't work on any of them or with any code and puts out that same error. 
Since it's an Arduino, can you even run the base script which comes with their editor, not even with Simulink? If you can't get that to work, the board might be bricked. 
+ " avrdude: stk500v2_ReceiveMessage(): timeout avrdude: stk500v2_ReceiveMessage(): timeout avrdude: stk500v2_ReceiveMessage(): timeout avrdude: stk500v2_ReceiveMessage(): timeout avrdude: stk500v2_ReceiveMessage(): timeout avrdude: stk500v2_ReceiveMessage(): timeout avrdude: stk500v2_getsync(): timeout communicating with programmer An error occurred while uploading the sketch" That's what I got when running the "Bare Minimum" example from the Arduino IDE. The thing is that I got this error, but the board worked on a different computer immediately after. 
1. I have used MEX, but not the Coder. If you use pure MEX, this is very easy - no issue converting just one function. 2. The documentation always uses `const mxArray *prhs[]` for the inputs to the `mexFunction`. This means the input arrays cannot be changed. There *might* be ways to work around it, but I expect they would be a bit messy, and I haven't looked into it deeply. 3. Once you are inside the `mexFunction`, any C code you can write is fair game. I'm not sure about how you go about making the mex compiler do the various things you want it to at compile time, but I do know that you can simply compile a library with the parallelized C code you you want and then link to it during MEX compilation.
I just successfully deployed a previous script to the Arduiono, but now when I try to run it in external mode, it gives me: "External mode simulation is not supported for the 'Arduino Mega 2560' hardware. However, you can deploy the model on this hardware. From the model window, click the "Deploy to Hardware" button." Any ideas??
So what is not working, is it giving some kind of error? If so I suggest you read that. Based on a quick look I'd say: Vx=NewX+AxD*dt; And its neigbor Vy=NewY+AyD*dt; Are the culprit. NewX and NewY are functions you defined, not variables.
whenever it tries to plot, nothing will show up on the graph, so what should i change about the functions? 
Thanks!!
I don't understand the point or purpose of this post. If it's a call for help, there's no where near enough background info for anyone to give advice...
reshape
How? I’m fairly new to MATLAB so not sure how to use it.
Look at the help and documentation. There are several examples.
You're most welcome.
You don't necessarily need to change the functions, just the way you're using them to define Vx and Vy each iteration. Say you are in a basic algebra class and you have a function f. How would you tell me that you were giving f an input, without rewriting the whole expression defining f? There is already a hint in your code, specifically at the definition of the NewX and NewY functions.
I tried, but so far I can't find a solution. I tried using `reshape(data, [], 100, 3)` but that didn't work.
Not the solution to your coding problem but you have a math bug as well. Vix=Vi*cosd(k); Viy=Vi*cosd(k); One of these is sind(k), depending on where you measure the angle from.
If you have access to the fixed-point toolbox, you can specify a fixed-point integer type of whatever bit size you want. Matlab can do fixed-point math (add, subtract, etc.) on that data. But like the other poster said, it depends on what exactly you want to do. I'm not sure fixed-point types are the best answer for you without more information.
depending on how the data is ordered, you might also need a `permute()`
Im not sure if I remember correctly but I think Matlab doesn’t even store true logicals as one bit values but represents them with an uint8. So an array of logicals would take more space than necessary.
So, I've made some progress! I think what I was doing was multiplying my matrices the wrong way round. I also hadn't mean corrected my data. Here's what I'm working with at the moment: https://pastebin.com/Uz2TywJ6 SD now has zero values for the non-diagonals, which is great! Still not getting a sensible value out for r, though, but I've reduced the number of elements to try cut down on singularities. 
I think I solved my own issue :) Just needed to add weboptions('ContentReader',@readtable)
There's no turbo button. The runtime can likely be reduced, but we will need much more information to help. Absent more information, I suggest you: * Check your RAM usage * Use the profiler 
A couple of things... - First, assuming the ray tracing algorithm that takes .3 seconds per ray... that still sounds pretty inefficient, so optimizing the code will go along way. However... - if you have the script set up to be truly independent, have you set up the function to be run in parallel? Calling it with a parfor loop instead of a for loop on something like this could reduce your run time from 9 hours all the way down to .3 seconds since you execute all at once instead of in series. Look at your max memory usage while it's running. 
&gt; Calling it with a parfor loop instead of a for loop on something like this could reduce your run time from 9 hours all the way down to .3 seconds since you execute all at once instead of in series. Look at this guy with 100k cores.
The documentation is not very helpful. I have tried multiple communications of those methods, but it doesn't work so far.
your problem as you describe it, is solved by either y = reshape(x, 1124, 100, 3); or y = permute(reshape(x, 1124, 3, 100), [1, 3, 2]); It literally can't be anything else.
An unstable system may be stabilized by closing the loop with a proportional controller. Whether this is possible depends on the number and location of other poles and zeros. Here are some [root locus examples](http://lpsa.swarthmore.edu/Root_Locus/RLocusExamples.html). Example 1 has a pole at zero, but it could easily be in the positive RHP. The illustration clearly shows that the root locus moves into the LHP regardless (depending on the location of the other pole. Example 3 actually illustrates an unstable system that is stabilized by increasing the proportional gain. This isn't a Matlab question. I'm not sure where would be best to ask this, but /r/ControlTheory/ does exist.
Haha I hate this community. Fine, parfor and vectorize the code for truly independent code like this. Even running his many cases simultaneously in parallel can reduce his processing time. Sound better to you, Idiot_Engineer?
And a pool of 100k MATLAB workers running in the background
Definitely going to work on OP's 16 GB RAM
thanks i will keep that in mind and check out parfor instead
No. Don't use parfor -- only as a last result. [Vectorization is your friend.](https://www.mathworks.com/help/matlab/matlab_prog/vectorization.html)
I think the formulas that you were given are incorrect in some way. Both A and B should be orthogonal-- A is, B is not. As a matter of fact, B is derived from Be*A, and will not be orthogonal unless Be is orthogonal as well. Also, flipping the order of multiplications will give the exact same matrices and answers, except transposed. Finally, when I ran calculations, SD was always diagonal, and in the original question, you say that it is r that should be orthogonal. Also, in your code, SD is the eigenvalues, but the handout says they should be squared eigenvalues. I have been starting to make sense of the wikipedia page on this and to see how your formulas relate to theirs. Let me post an update in a bit.
Well yeah I understood the problem (actually it's even simpler than what I understood), I just don't want to give you the code straight. If you wanna learn to use MATLAB, you need to be able to think the solutions yourself (and this one is fairly simple). Use the answer to the questions I've asked, and the help content of the function you must call to create a first program. 
Okay, awesome, thank you!
Ok, this is what I have. I'm not sure it's correct, but it seems to work. Also, I did not mean-correct the matrices, the 'r' should improve if you do. Also, 'r' is "close" to being real- the imaginary components are around 10^-8. Earlier when I said I thought A and B should be orthogonal, I don't think that is the case anymore. But maybe (XB) should be diagonal. https://pastebin.com/vysMgN2g There is a reference in there- maybe you could double check my work. Also, if the prof interchanged X and Y for his equation, I can see how his D matrix could be sort of closer than what I wrote.
This is more of a data science question than a MATLAB question. Essentially, a dimensionality reduction technique like PCA allows you to transform your original data to a subspace which more compactly summarises your data. So in your case, you go from 1124 x 300 to 1124 x K, where K is the number of principal components you decide to use. Instead of feeding the 1124 x 300 data into your ML algorithm, you feed in the 1124 x K. That being said, there are usually better ways of dealing with loads of dimensions (e.g. feature scaling + regularisation).
?? Just loop over each entry in the cell and pull out the stats, and stick it in a row of a matrix? If you want to get a matrix directly you have to rewrite that code to put it in a matrix instead of a cell (lines 18 and 37).
 PlayerInfo{48, 209} = []; At index 48, 209, you define the contents of PlayerInfo to be an empty vector. You now immediately have a 48 by 209 cell array, regardless of what goes in each other spot before or after. The html formatting stuff makes this pretty difficult to read, but that jumps out as the first problem you need to solve. I would comment that line out and see what the results are for starters. After that you can work on addressing each row for your outer loop indexed by page and player (for a total of 48*209 = 10032 rows give or take the last page). Either that or use two outer loops, one for each page, and one for each player on that page, THEN iterate over your 13 stats. To fix the html readability, define strings at the beginning of the file that you use over and over (string1 = '&lt;span class="...';, etc.) and simply concatenate them as needed: [string1, string2]
[Annotations](https://www.mathworks.com/help/matlab/ref/annotation.html) come to mind. Bonus: arrows already included so you don't have to use images, and you can label them with calculated data at plot time. If you're dead set on using your hand-crafted force vector images, you can use [imread](https://www.mathworks.com/help/matlab/ref/imread.html) to get the data in matrix form and [image](https://www.mathworks.com/help/matlab/ref/image.html) to position them instead of imshow, which I find to be a bit *too* skewed toward ease of use.
&gt; What is the actual size of the data set you're working with This is given in the post you replied to, but I'll repeat it: the dataset Im immediately interested in using this for is ~2.1 TB. &gt; Has this really all been about an fft with 3k samples? That's the data size you're looking at? As I said in my previous comment, the output of the data conversion function will be grouped into chunks of ~3k samples and an fft will be performed on each. With ~2.1 TB of data and 4 bytes per sample, this translates to a bit over 187 million fft's, each performed on ~3k samples (though this will probably be zero padded to 4196 samples for various reasons). &gt; And I still don't understand the emphasis on casting to single. The data is stored in 32-bit IBM floating point format. This is not by choice, this is just the industry standard format for this type of data. Matlab has no native support for IBM floats, so to do literally anything with the data it needs to be cast to IEEE floats. IEEE singles are the obvious choice since that allows for the input and output to have the same number of bits and as such allows for in-place conversion of the data. &gt; I really can't understand the point of all of this Its quite simple: fread and fwrite are single threaded and end up taking up a decent chunk of the run time for any given code I want to run. This is exacerbated by the fact that these codes usually run on Xeons, which have poor single threaded performance in favor of better multi threaded performance. For example, the machine Im currently using is a 16 core sandy bridge Xeon, and as a result fread/fwrite are getting CPU limited to a maximum I/O speed of around 150-200 MB/s and leaving 15/16 cores unused. Having the ability to put these cores to work on another operation that I need to do regardless effectively increases efficiency by (nearly) 100%, or in other words makes the I/O effectively have no effect on run time (it will increase by a factor of 16/15, or +6.66% versus the case where fread/fwrite isnt called). If I can assign 1 core to fread and 1 to fwrite and the other 14 to do everything else it could be a (nearly) 200% increase in efficiency, since both the fread and fwrite operations are being hidden behind the other stuff I want to do and have almost no effect on run time (it will increase by a factor of 16/14, or +14.2% versus the case where fread+fwrite arent called). In my immediate use case, this saves roughly 3 hours off of every individual read or write operation (or ~6 hours if I do fread&gt;stuff&gt;fwrite all at the same time). However, it is not just about the current project - waiting on fread/fwrite will always be problematic as long as they are single threaded, and having the ability to run other stuff with the cores that arent being used by fread/fwrite will be useful in literally every scenario where I need to read or write a substantial amount of data (which tends to be quite often when you cant possibly hope to fit all your data into memory and have no choice but to read&gt;process&gt;write one block at a time). Im not going to guess a specific amount of time I might save over all the times I will use Matlab to work with this type of data throughout my life, but an overall cumulative time savings of weeks is certainly conceivable. &gt; Matlab is not the tool to use if you're wanting to pick memory registers to write to, etc. This would obviously be easier in other languages, but everything else I want to do it already set-up to work well in Matlab, and (since A lot of my time is spent in testing/refining a method) Matlab is a nice language to use. Moving everything else to another language just to allow me to do this is not worth while. &gt; I would look at tall arrays and distributed arrays I hasn't looked at distributed arrays since Im not guaranteed to have access to the parallel computing toolbox. I havent used tall arrays since (the last I tried) there is a quirk with using the "datastore" function with custom data types (like IBM floats). Basically, Matlab tries to read the entire dataset into memory temporairly (presumably to implement some sort of mapping) and then clears it. However, you have to have enough memory+swap to hold the full data set or else you run into an out of memory issue, and with 2 tb of data this isnt practical for me (the machine im using has ~512 gb of RAM and ~80 gb of swap, which is a lot but not even close to the 2.1 gb required. (plus any required by the function to convert the data to IEEE's plus any required by other applications running on the system). I havent check on 2017b if they fixed this, but as of 2017a this was an issue that made using the tall array + datastore approach unusable.
Stick fprintf('Starting distance is %.2f',distance) before you start your while loop. I'm sure you'll find that your starting distance is less than 0.2.
thank you very much , but how can I make sure loop doesn't run anymore after it hit the distance&lt;20? 
That's what a while loop does. If the condition you specify stops being true (e.g. while distance &gt; 20), it stops running automatically.
So I removed the break , but it still jumps to very last statement . it doesnt matter what value I use for distance and intensity, it still jump the loop
should I put the Intensity and distance measurement in the loop too ? 
There's no trick to it, you just start typing. Be careful about parentheses. I sometimes assign sub expressions to variables to clean things up. 
The code I am using goes as following: clear m = 7.26 ; %%initial mass k = 0.49; %% drag coefficient of sphere Vx = 9.64 Vz = 11.49 V= sqrt(Vx^2 + Vz^2); area = 0.04 airden = 1.225; fdrag = (airden*k*area)/2; sx(1) =0 sz(1) = 0 x(1) = 0; z(1)= 0; t(1) =0 dt = 0.01 i=1 while min(z)&gt; -0.01 t = t + dt; i = i + 1; sx(i) = sx(i-1)+ Vx.*dt; Ax = - ( fdrag / m ) * V * Vx; Az = -(9.8) - ( fdrag / m ) * V * Vz; Vx_new = Vx + Ax * dt; Vz_new = Vz + Az * dt; x(i) = x(i-1) + Vx_new * dt + 0.5 * Ax * dt^2; z(i) = z(i-1) + Vz_new * dt + 0.5 * Az * dt^2; Vx = Vx_new; Vz = Vz_new; end plot(x,z,'b'), hold on; plot(sx,z,'r'), hold off; 
I would say first look at a short tutorial on how to write functions in matlab, they work differently to regular scripts. Then google how to integrate in MATLAB, then pretty much just type the expression out. You could do the final 2 summing terms using for loops based on a value of n and i supplied as function inputs. (Ideally you shouldn't use i as a variable name, since it is already pre-programmed as the imaginery number i).
Spotted one mistake (there could be others): you need to update `V` in the loop. 
I had always assumed logicals were stored as individual bits, but it seems you are correct that they are stored as uint8's. Apparently, this is because access to reading/writing individual bits is much slower. You can somewhat get around this by grouping bits into sets of 8 (or 16/32/64) and storing them as integers, which reduces the memory requirements by a factor of 8 but adds some overhead for the packing/unpacking operation. I actually decided to quickly write a [function](https://pastebin.com/Vf5EkQXL) to do just that. It is decently fast and only requires slightly more memory to run than the raw "8-bit logical" data does. On my machine (Sandy Bridge i7): packing 1GB of data into uint8's took ~2.9 seconds, and unpacking them back into logicals took ~2 seconds. You could probably tweak it and speed this up, albeit probably at the cost of higher memory usage. I kind of seems like Matlab *should* be doing this type of thing already, though it doesnt appear that Matlab does anything of the sort. It does, however, appear you can get close to the same level of compression if your OS is actively compressing the RAM matlab is using to store the "8-bit logicals". Converting to integers is still a bit better (in terms of memory usage), but not by much.
It is not so much "insufficient" as it is "not as effective". The use case I had in mind when I posted this is as part of a data conversion code Im working on (specifically between IEEE and IBM floats). For, say, converting from IBM to IEEE floats, most (all?) conversion codes Ive seen basically extract the sign, exponent, and mantissa (as floats), correct for bias in the exponent, convert the mantissa to a fraction, then multiply everything. I figured out a way to do this with bitwise operations and without the need to cast the exponent and mantissa back and forth between integer and floating point which also allows for in-place replacement, reducing memory requirement). As part of this, I end up needing to extract and temporarily store a few specific bits worth of data. Being forced to use 8-bit integers when I only need, say, 3 bits of information, meaning 5 bits are wasted space. For 32-bit data, this adds ~10% to the overall memory requirement. This isnt horrible, but this code will be crewing through literally terrabytes of data, so Im trying to not waste memory when it is easy to avoid. If there is a way to make Matlab use variable length integers then this is an easy 10% reduction in memory. If there isnt then obviously it isnt an easy fix. 
I dont have the fixed point toolbox. I expanded a bit more on my intended usage [here](https://www.reddit.com/r/matlab/comments/7iopnh/can_matlab_be_forced_to_store_integer_data_in/dr2dv3d/). Its not critical to making things work, but would serve as an easy way to reduce memory requirements a little bit for a function that has to chew through A LOT of data.
First off, the formatting is funny, so it’s impossible to tell what your error is. Likely tho, “inner dimensions must agree” means you’re trying to do matrix multiplication with matrices that aren’t compatible. A*B does matrix multiplication. A.*B multiplies corresponding cells. That’s what you’re going for here. 
I appreciate the info! some responses to your 3 points: 1) I know it is possible in general, im just not sure if / how well Matlab coder does this. My C/C++ skills are so-so and I really dont have the time to dedicate a bunch of time to getting this right with custom C code (not today anyhow. Its on my to do list for "someday after I finish my research/dissertation" though). 2) I dont actually want to change the input data, I just dont want an unnecessairy copy of any data to be made and/or have a significant overhead from passing data back and forth between Matla and the MEX function. I had thought that maybe this could easily be accomplished by creating a blank output array in matlab and then having the MEX function read/write directly from the input/output arrays that were created in Matlab, but I dont care about that specific method - I just want to implement things in a way that minimizes memory requirements and minimizes overhead from transfering data between matlab and the MEX function. 3) In the past I have also experimented with directly compiling the mex function outside of Matlab. Getting all the compiling options right was a bit of a pain, but it seems that all that the mex compiler does is call whatever compiler you have selected with "mex setup" and automatically set some options that will make sure things compile correctly. In the past Ive compiled with both pthreads and OpenMP (with MEX code that someone else wrote), but getting things setup was a major pain (in part because Im not all that familiar with compiling, so I dont have a solid intuition of what some options should be set as). So, much like question 1, this is less "is it possible" and more "is it easy".
Last I check (which was admittedly v2017a), this wont work for me. Basically, it boils down to: 1) I have a custom data type that Matlab doesnt natively recognize, and as such I have to use a custom datastore to load the data into a tall array 2) The MathWorks thought it would be a good idea to implement the custom datastore such that it initially scans through the entirety of the data and loads it all into memory. Once the scan is finished it clears frees the memory, but it inherently requires that you have enough RAM+swap to fully load the data once. This made it unusable for my purposes. Being able to use bitN integers for arbitratry N wouldnt make the difference between being able to load the data or not - its way to big to load all at once. It would serve to reduce the memory requirements though (perhaps 10% or so, maybe a bit less). If there was a way to make matlab do this (that wasnt too complicated) this would be an easy change to reduce memory requirements by 10%, hense my interest. If it isnt possible (or would be extremely difficult) then so be it. &gt; Each "data type" in MATLAB is just a class, so to create a fractional byte data type, you just need to create the class for it. Any chance you can elaborate a bit more? I understand the idea, but I dont see any class properties/attributes that seem like that could be used to set "bits per sample". However, Im not too familiar with thing classes and there are a good number of possible options, so I might have missed it. I tried using "metaclass('uint32')" and seeing if anything appeared to set the number of bits to 32 and nothing jumped out at me, though again I could have missed it.
A few months ago I posted a [list of general tips for improving runtime and efficiency in matlab](https://www.reddit.com/r/matlab/comments/6utfy9/some_tips_for_writing_fast_and_efficient_matlab/). It might give you some ideas to speed things up. In my experience, the biggest speedups tend to from fixing any 'stupid' errors, like "not preallocating a huge array that you fill in with a loop", and from vectorizing the code (preferably with matrix operations, though bsxfun can be helpful as well). Pay special attention to item #1 in the linked list.
&gt; The MathWorks thought it would be a good idea to implement the custom datastore such that it initially scans through the entirety of the data and loads it all into memory. That is a known issue with fileDatastore, but it is possible to write a custom datastore which is able to interface with subsets. See [here](https://www.mathworks.com/help/matlab/ref/matlab.io.datastore.filedatastore.filedatastore.html#d119e291897) and it's [linked article.](https://www.mathworks.com/help/matlab/import_export/_mw_697a5fc6-1077-4d16-a6f2-e84af20951c7.html) I believe the implementation you need essentially just reads in line by line, as opposed to all at once. 
Ahhh, that's quite the use case you've got there! Unfortunately I can't really help with that, but I thought I should ask my question anyway just to check that we aren't dealing with an [XY Problem](http://xyproblem.info/). Good luck with figuring it out! :)
ok, use pipes. Rewrite your matlab scripts as stream processing scripts. Each script reads a block of data from input file (fifo pipe), processes it, writes it to output file (another fifo pipe). Then just create the required pipes, and run multiple instances of matlab with your scripts. Its even easier if you read from standard input and output. For example (this should work as is, but I haven't tested it and its matlab, so who knows): cat input_data | matlab -nodisplay -nodesktop -r 'script1; exit;' | ... | matlab -nodisplay -nodesktop -r 'scriptN; exit;' &gt; output_data 
D, L, and f don't change inside the loop. So the mldivide(D-L,f) can be done once outside the loop and the result stored so you're not calculating it over and over.
Don't know of any good tutorials but there's a very good book for numerical methods: Numerical Analysis, by Timothy Sauer, 2nd edition. Shows the thinking processes required to code a lot of these kind of computations.
Try commenting out the distance measurement and setting the distance manually. Also try printing out the value of distance to see whether it really behaves the way you think it does (print it out for every iteration of the while loop for example).
That is so obvious, I don't know why I didn't think of that. Thanks! I think I just cut 40% of my computation.
It's cause windows isn't picky about the input; in windows command promt (cmd) and exporer, you can use / in stead of \ and it still works. I think matlab just implemented a direct call to some system OS stuff, which in the case of windows wil work eitherway. There's a thing called [filesep](https://nl.mathworks.com/help/matlab/ref/filesep.html), that is either / or \, depending on the OS, but as you just found out, using / will (work on windows and linux)[https://nl.mathworks.com/matlabcentral/answers/117110-dealing-with-and-windows-vs-unix-for-path-definition].
Thanks so much :)
I think your code is working find, it's just that you don't have hardly any drag. Bump up your drag (I changed your area from 0.04 to 4) and you'll see it behave much more "projectile"y. Using the constants you have now, you have a drag acceleration of 0.002. Compared to the acceleration due to gravity (~10) your drag is 5000x smaller than your gravity term, so it's barely noticed. 
Yes. The point of a while loop is to update the values within until they meet a condition. Currently, you're reading distance and intensity, then never changing them, which means they'll never meet that condition once you enter the loop. You should look into the debugging tools. If you click next to the line number in the editor, it should enable a breakpoint. When the code reaches the breakpoint, you can look at the values of all the variables. This will let you see what the values for distance and intensity are - very helpful if distance is being reported in millimetres instead of metres for example.
Once you learn how functions work (including anonymous functions, like that given in your prompt as test input), you can break the expression into parts. I recommend being slow and careful, identifying each major part of the expression, then filling in the details. For example to program the expression you linked in the context of a function taking arguments f, a, b, and n you might proceed as: 1. ()*() 2. ()*(() + () + () + ()) 3. (h/6)\*(f(a) + f(b) + 4\*() + 2*()) 4. (h/6)\*(f(a) + f(b) + 4\*sum() + 2*sum()) And so on until all parts are expressed. You can define your sum terms in a loop like bladesman393 suggested, or you can use your linear algebra knowledge to compute them from vectors, or compute them on the fly using sum() and a vector input for i (which I might name something like 'iVec' or 'intervalIndex' just to steer clear of misinterpretation of the imaginary number and/or be more readable). Searching google for something like 'matlab functions' or 'matlab anonymous functions' will turn up great results, often from the documentation, which is very clear and helpful. To access the documentation for a particular function in MATLAB you can type 'help sum' (or whichever function you need help on) at the command line, or simply type the code in the editor and right click the name of the function and select 'Help on "sum"', allowing you to view quick help, and giving you the option to select 'Open Help Browser' for easier reading if needed. The journey of 1000 miles begins with a single step.
This is incredible, thank you so much! I can't see anything wrong with your code, but you have used a different method to calculate D. I tried combining the two of our codes to compare the Ds and it all works really well. I mean corrected the data, added some noise to the sine wave, and swapped out eig for svd which seems to work a little better. Thanks again for your help, I'm gonna try reading in the MEG data now!
Thank you very much 
Thanks for your reply, I tried this using values Area = 4, Vx =50 and Vz = 30 and it gives a graph like [this](https://i.imgur.com/QhZ46rA.png). is this how it would look? I thought it should be a regular parabola that drops off earlier than usual. Thanks
Cheers for your reply, I am updating the components but it seems i forgot to update the overall velocity, thanks for spotting. It still doesn't seem to be producing results that i would expect though (like the images) 
Try the [Simulink Data Inspector](https://www.mathworks.com/help/simulink/ug/simulation-data-inspector-overview.html). 
and macOS as well
I searched google for "matlab readimx" and found the [File Exchange page for PIVMat](https://www.mathworks.com/matlabcentral/fileexchange/10902-pivmat-4-00). From that page, at the top right I saw "Requires ReadIMX package from LaVision (www.lavision.de)", so I pasted the link in a new tab and arrived at their website. From there I used google translate to read the page, and searched for "readimx" in the site search at the top of the page. That led me to [this page](https://www.lavision.de/de/news/archive/2246/), with instructions to create an account for free download of the readimx package. Took me about five minutes, including typing this message. Hopefully the step-by-step description of the process above will help you with any similar issues in the future. "Give a man a fish and he eats for a day. Teach a man to fish and he eats for a lifetime." :)
You might also want to check out my ["hack" around the diagonal matrix extraction.](https://www.reddit.com/r/matlab/comments/7j0a9s/a_hack_around_a_performance_issue_spmv_mult/) Your matrices so far are small, but as they get bigger, you'll likely run into the same issue as I was.
Thanks. But you have to purchase one of their imaging systems to have access to the free downloads that way. Anyone looking for the package can pick it up from here without creating an account http://www.fast.u-psud.fr/pivmat/ 
Are you sure? It says there: &gt; 2. If you wish to import DaVis files, download also the ReadIMX package available from the LaVision web site (with user registration). I registered an account just to check it out and you're right, you have to purchase a full product to have access to their free MATLAB add-on. Registration only gets you access to a subset of their publications (not even the manuals). Disappointing. You might try contacting them to see if they'll give you a trial version or just hand it over; often you can get access to things you might not otherwise be able to if you have a .edu email address to send the request from.
Back in the day, it was supported on multiple os's (like today) on multiple architectures (not like today.) Apparently, it ran on SPARC, Alpha, hp RISC, and so on. https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/support/sysreq/files/SystemRequirements-Release13_Unix.pdf You could really take a lot less for granted then in terms of OS portability.
The box you're typing in is for the constant gain term, K, so it won't take s terms. You need to right-click in the box below and add a zero, if memory serves.
That's what ballistic motion with drag looks like when you fire the projectile really fast - same thing as high drag, which is what you did here, so that makes sense. But I think you said the red curve should be no drag? You're not getting that part right. I noticed at least one issue on this in your code: you're using the same `z` value for both curves. You should calculate a separate `z` value for the no drag curve using a constant acceleration with no drag term.
I'm tempted to make a dummy MEX function and just try passing/returning really large arrays to/from it, to see how the memory behaves for #2. I expect it would do the efficient thing that you are suggesting you want, but don't actually know. I've seen overhead using other language interfaces with Matlab, but MEX performance seems to be very good. Which it should be, since that's kind of the whole point. For #3, I *think* you can basically just give `mex` all the same flags/paths/etc you would give your compiler and it passes them right on through. There are probably corner cases where that breaks down. But in general I would say that, if you can write the parallelized version and compile it outside of Matlab, it should work "as expected" when you do it in MEX. So Matlab isn't going to make parallelizing your C code any easier or harder, regardless of whether you have the parallel toolbox. Now, if you want to call multiple instances of a MEX function in parallel, that'd be a different beast, and depending on how your C is structured you could have concurrency issues.
**You're an idiot, ya dingus.** D = diag(diag(A)); [That's more like it.](https://user-images.githubusercontent.com/868479/33866082-544243d0-deba-11e7-8350-96801a976234.png) Hope y'all have enjoyed this ride as much as I have. Don't be like me, kids: Go to bed by 10PM, get 8 hours of sleep per night, eat your vegetables, and whatever you do... never feed the gremlins after midnight.
There are a lot of different ways to do that, and I'm sure someone will probably post a faster and better way that I could code up, but you basically want to think about how you would do this in real life. Like, if you had a line of index cards, each one with one side giving a date and the other side giving a value, how would you go about obtaining the highest value of each day according to the cards. You'd probably go and find which cards all share the same day -- then, you'd figure out what the maximum of the values written on those cards is. You'd keep that card, and go to the next date. Repeat this process until you've covered all dates, and you're done.
Python might be better resource as it's open-source, there is a larger community that would be able to help you with questions, there are more machine learning libraries, and (in my opinion) it's a nicer language in general. Is there any reason why you chose MATLAB?
my school is using it already and we have to make some simple stuff for it (like tick tack toe) for a programming class. I like python but don't really know where to start with that either lol. Its very hard to find out where to start with game creation and AI creation in general IMO 
I found diag(diag(K)) to be slower than K.*speye(length(K))
I'm bored. Pm me the .m file (or DL link) and I will do it and send the code back to you
I believe that functionality in new in 2017b. Its nice to see they addressed the issue, though for my immediate needs that looks like more trouble than it is worth to setup. Its definitely something I'll look into when I have a bit more time though.
&gt; XY problem I hadn't heard of that, though Ive definitely seen that scenario play out more than a few times. At any rate, I think I found a decent enough solution. As it turns out I actually need 4 bits, which means that 2 sets of 4 bits fit nicely into uint8's. I havent implemented it yet, but i think that (after making sure the data has an even number of samples) I can accomplish hat I am trying to do by: 1) get the bits I need using bitand 2) use bitshift and shift bits from odd samples to bits 1-4 and bits from even samples to bits 5-8 3) cast each as a uint8 (all this requires is removing bits 9-N, which are all zeros) 4) add each even sample with each odd one The resulting uint8 integer will have bits 1-4 from the odd sample and bits 5-8 from the even sample. To extract the bits I just apply a bitand to get either bits 1-4 or 5-8, cast back to the original data type, and bitshift them back to their original location. This will have a little overhead, though all the operations involved are pretty fast. Each conversion requires 1x bitand, 1x bitshift, 1x cast, and (for packing the bits into uint8's) 1x addition. The cast is probably the most expensive of these, though this casting operation just requires adding/removing preceding zeros so it shouldnt be too bad either.
So, I actually think I found a better solution. [sharedmatrix](https://www.mathworks.com/matlabcentral/fileexchange/28572-sharedmatrix) is a function from the FEX that allows sharing data in memory between Matlab instances (without any disk I/O) using POSIX operations. Unfortunately, it was designed for Matlab 2010 or so and most of it doesnt work still, BUT it seems that using cell arrays still does, and by wrapping my data into a 1x1 cell array im hoping I can get it to work and that any performance lost from using a cell array will be minimal. Assuming this works, for a general use case I can pretty much do th following: First, setup 3 Matlab instances - 1 for data loading (single threaded), 1 for data writing (single threaded), and one to do the actual processing (with the number of available cores minus 2). Data will get broken into blocks and 3 will be in memory at any given time (one for data being loaded and overwriting data that is no longer needed, one for the data being processed, and one for the data that is done being processed and being written to disk). All the processing is pretty well vectorized, so this should pretty well maximize my CPU utilization at all times. If processing is taking much longer than I/O I can combine the read and write instances into a single instance than alternates between reading and writing (which would also mean I only need 2 blocks in memory instead of 3). Each instance will memory map some sort of progress indicator that to ensure that the other instance(s) dont start working on a new block of data too soon. I think the above scheme will work for just about anything where you want to implement a workflow that goes read&gt;process&gt;write and that can be implemented using blocks of data (rather than the full dataset).
&gt; I'm tempted to make a dummy MEX function and just try passing/returning really large arrays to/from it, to see how the memory behaves for #2. If you do let me know, id be curious as to what you find out. &gt; parallelizing your C code I was actually hoping to get your opinion on this. The 4x nested loop I want to parallelize goes through a lot of data, but ultimately isnt all that complicated (see original post for link to approximate code). In thinking of parallelizing over the 2 most inner loop (either or both), since this way I can set a few of the variables needed to calculate the W term (the ones that only depend on n1 and n2, not n3 or n4) and I wont have to keep re-windowing these using the same window over and over again. Since each computation is independent this should be fairly straighforward (there might be some more complicated stuff I could implement to make sharing the parts of W that only depend on n1 and n2 more efficient, but worse case a simple copy of these gets made and sent to each worker). What Im not sure about is how best to implement the term-by-term multiplication of W with the windowed data and then the subsequent summation. Im hoping that Matlab coder will transform these into vectorized C operations but if not - are these the type of operations that, if I wrote a simple loop to implement these things, gcc would do all the hard work of vectorizing (including implementing any AVX/SSE specific instructions needed to actually make these operations use the CPU vector registers)? Or would I have to manually set any vector processing up? Or does it depend on whether or not gcc happens to be in a good mood when I try and compile it? (note: this will be run on a sandy bridge cpu, so no AVX-2 and certainly no AVX-512)
If you're serious about creating AI, you should start at the beginning and do a course on it online or somehting. I did half of a [Udacity](https://www.udacity.com) course once, and I think it's exactly the basis you need to know where to start. Also on the python thing, yes, matlabs strong point is that it's easy to create code, but performance (learning time) which is essential for machine learning, is bad compared to other languages. 
Look at the first example [on the doc page about loop control statements](https://nl.mathworks.com/help/matlab/matlab_prog/loop-control-statements.html) . What do they mean with "index variable"? 
Ah, I didn't look closely enough at what you were doing, just saw the .* -- I refer the reader to my prior self flagellation.
Per /u/ansariddle D = D .* speye(length(D)); [Similar fast performance.](https://user-images.githubusercontent.com/868479/33886779-4a503280-df0d-11e7-87b0-1dbbe4eb728d.png)
Outside your loop, initialize a as a=[]; Then use a(end+1)=x; inside the loop. Same procedure for b.
My only guess would be that you're using fft() wrong... Does it return a result otherwise?
While in the example given this will still run very quickly, constantly dynamically resizing variables is terrible practice and can lead to extremely slow code. What's better is to figure out the longest your vector could be, create a vector of 0's that length, and then add in your values one at a time. At the end, remove all of the indices you didn't use. 
As a general note: the marks the matlab editor puts under your code are there for a reason. On mouseover it will tell you why it thinks there is an issue there
If you only wanna save them, using the increment 2 is easier: a = 0:2:20 b = 1:2:20
Matlab is a great language. Use the tools you have available and existing familiarity with. The bigger hurdle is not the tool you choose, but the math, theory you would need to master to replicate this functionality. 
The easiest way to do this is without a `for` loop at all. Ask yourself what you want - &gt; "I want `a` to be equal to `x`, whenever `mod(x,2)` is zero." That translates to: a = x(mod(x,2) == 0); This is called [logical indexing](https://blogs.mathworks.com/loren/2013/02/20/logical-indexing-multiple-conditions/). Here's what happens: mod(x,2) == 0 The statement above returns a `false` everywhere `mod(x, 2)` does not equal zero, and it returns a `true` everywhere it does equal zero. That is, `mod(x, 2) == 0`, as a statement, returns a logical array of false and true values. You can use that array to "pick" values from a matrix or vector - Matlab assumes that, when you pass in a logical array as an index, you want to keep all the values where the indexing values are true. So, you can do the whole thing in a compact two lines: a = x(mod(x, 2) == 0); b = x(mod(x, 2) ~= 0); And sidestep the loop entirely. I am not a fan of writing code that way though, and would prefer to be slightly more verbose such that the intent of my code is more clear. For example, I personally would write the following: evenValues = mod(x, 2) == 0; a = x(evenValues); b = x(~evenValues); For this much code, it probably doesn't look like much of a difference, but I generally try to avoid using functions as inputs or indexing parameters if I have to write it out more than once. This for two reasons - first, I think it's really easy to overlook flaws in the function call, especially if you're changing parameters in each call, and second, if my code is going to fail, I want it to fail BIG so I can find the mistake quickly. By defining `evenValues`, if I got the definition wrong, then `a` **and** `b` should be garbage and that would definitely point back to a flaw in generating those values. If I don't use `evenValues` (or similar) then `a` might be correct and `b` would be flawed, or vice-versa, and then you get "intermittent" errors downstream where sometimes you get the right answers and sometimes not, depending on whether you're using the correctly or incorrectly defined values. Anyways, a more concise definition and a pro tip. Good luck!
If you're trying to add another cell into a cell array, you need to index into the next element after the last: results{end + 1} = {response, RT1}; I'm a big fan of structures, but it's not necessarily more appropriate here. You could have a 1xn structure with 2 fields to hold the responses. After declaring the empty structure, you'd do something like: results(ind).response = response results(ind).responseTime = RT; Within a loop, where 'ind' is a counter.
To avoid any problems while removing, initialize with NaNs instead of 0s. 
I don't remove via logical indexing, I remove by knowing how many points I've added to the array, and then just chopping off the end. 
I haven't installed the NN toolbox, but you can try checking the norm yourself. The 2-norm is the root of sum of squares, so for column 1 of your matrix 'aNormed' (the result of your normc function on 'a'): sqrt(sum(aNormed(:, 1).^2)) This takes all rows of column one, squares them element-wise, sums the results, and takes the square root of that sum. If it equals 1, mission complete! If not, you need to revisit your function. Someone might come along with the toolbox and run it for you, but maybe not. This will let you check your results either way.
Thank you, this looks promising. How would I declare a structure to be empty? Are there specific brackets for this? 
It looks to me like you can calculate Z - Y and W outside both loops, and just keep them as vectors. This will reduce the number of calculations per loop, and reduce memory use as there's no reason to have a Y_val or W_val variable anymore. You can change your inner loop to iterate over 2:t(end) and declare the first element outside the loop as well. To refactor, just try moving everything inside the nested loops as far outside as possible, or removing looped calculation wherever you can.
From the documentation ('help struct'): &gt;s = struct creates a scalar (1-by-1) structure with no fields. &gt;s = struct([]) creates an empty (0-by-0) structure with no fields. Google 'matlab structure' or whatever you're looking for to get access to the web documentation for any functionality in MATLAB, even if you don't know the specific function's name.
I get that W can be done outside depending on n. But since Z is dependent on Y and Y i dependent on X how would i calculate all 100 values without the loops?
Fundamentally, you're recalculating the value of `Vx` and `Vz` for every timestep. This is correct, but you're using the same `Vx` for both cases. Your zero-drag case should be using a different `Vx` and `Vz` which is unaffected by drag. This will also require you to calculate a separate value for `z`, presumably `sz` from your naming convention. Note that `sz` is not guaranteed - or even expected - to reach zero at the same time as `z`, so you will probably want to use a separate while loop for the zero drag case (alternatively, you could use a second while loop to continue the zero drag case - or you could use a single loop then truncate the results for the drag case when plotting). With these changes, you should find the zero drag case produces the typical parabolic arc.
Are you using ode45?
Duh… Either store your results in arrays, or use: for SNR_db = [1: 10].’ And add a `.` in front of every `* / ^` operator
Thank you!
Usually I solve differential equations with ode, but I havent gotten to it in this code yet
[removed]
Hang on, did you mean your functions to look like: * X(t) = X(t - 1) - Y(t) + Z(t) + W(t) * X(1) = Po(70) * Y(t) = Bin(X(t - 1), 0.5) * Z(t) = Bin(Y(t), 0.1) * W(t) = Po(3(100 - t)/100) * t = 1:100? I'll be honest, I skipped reading it because the formatting was offensive. It then looked like you were computing an identical Y and Z vector each iteration. Upon a careful re-read, the answer to your question is "you can't". You can compute the fixed 'W' matrix, which is only a function of 't' and RNG outside the loops: W = poissrnd(lambda(t), n, length(t)); However, if each Z(t) depends on Y(t), and each Y(t) depends on X(t - 1), then you need to compute all three at each iteration. You don't need to keep the values once you've computed them, however, since X is the only variable you need to return. You can still remove one iteration by looping over 2:end(t) and calculating the first X(t) value for that 'n' outside the loop, which will remove a branching instruction (if/else) at each loop. In fact, you can compute the entire first column vector ahead of time by defining it as: X(:, 1) = poissrnd(70, n, 1); You can also refactor your function definitions to take X(t - 1) and Y(t) directly to avoid storing additional variables: Y = @(x) binornd(x, py); Z = @(x) binornd(x, pz); ... X = X(i, j - 1) - Y(X(i, j - 1)) + Z(Y(X(i, j - 1))) ... Apologies for the hasty response. That should give you a bit of a speed-up, and some memory use reduction.
I did a twobody sim and more recently a 3 body sim Structurewise I set up my initial conditions ( my position and velocity vectors), in the same file I defined the ODE45 conditions, and used a separate function to define the equations of motion. Then integrated the equations with ODE45. Is that what you’re looking for? 
I did a twobody sim and more recently a 3 body sim Structurewise I set up my initial conditions ( my position and velocity vectors), in the same file I defined the ODE45 conditions, and used a separate function to define the equations of motion. Then integrated the equations with ODE45. Is that what you’re looking for? 
You're most welcome.
Yes, am I on the right track from my equations? Any chance I can take a look at the codes or its too much to ask for?
You can read up on [array indexing](https://www.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html). You're overwriting your variables every time. You need to store your results in a vector. 
Can you post the problem statement? I didn’t have to integrate any other equations other than the accl if I remember correctly... 
I dont have the problem statement, its just my teacher told me built the 2 Body or a restricted 3 Body sim, told me about the Hamilton equations and the conservation of energy and send me on my way. I decided to model planetary movement out of it and thought if I can make a 2 Body work first then I can give a go at the restricted 3 Problem which I want to use as a part of my coursework next term
Have you tried ' ?
Of course and I'm still trying now.
You should also read the documentation for the transpose. (Always a good idea). When working with complex numbers you need to see which behavior you want.
You need to "speed up" the audio. You can tell Matlab to play it faster: sound(y, 2*Fs); or you can do it by "squeezing" the data: sound(y(1:2:end), Fs); Cutting out every other sample, as above, removes data from the signal, so the better way to do it, from an audio quality standpoint, would probably be to tell Matlab to change the sample frequency. If you're asking how to change the pitch while retaining the original donation, then you're going to need some [more advanced algorithms](https://en.wikipedia.org/wiki/Audio_time_stretching_and_pitch_scaling).
' is a complex conjugate transpose. Since ffts can be complex, try .' Instead. 
Just what I needed thanks!
Is it necessary for them to be in excel? Can you convert them to CSVs?
Should which line should I apply it to? The y(k+1) line?
What function are you using? What version is your matlab? What version is your Excel?
I've got it. All I really had to do was add "y = (y).';"
Thanks for your reply, I believe that you are correct and shall try and implement the second loop into my code. Much appreciated :)
Ah okay, thankyou, that seems obvious and i'm not sure how i missed it and i think you would be correct about calculating a seperate z and I shall try this as well as creative a second loop like the other comment suggested. Cheers for answering! 
&gt;. . . ¿ seperate ? . . . I THINK YOU MEANT **separate** ^^I ^^AM ^^A ^^BOT^^^beep^boop!
I dont agree with your equations. I think your accl should be r^3, and you should start with initial position and inital velocity vectors. Here are mine from my code: r = [10000 1000 0]; %km v = [1 sqrt(mu/10000)+1 1]; %km/s I dont mind showing you my code, but give it a shot first. After your initial conditions, create a seperate function file which has your equations of motion in it. Then pass these functions to ODE45. There is plenty of help on google aswell!
&gt;. . . ¿ seperate ? . . . I THINK YOU MEANT **separate** ^^I ^^AM ^^A ^^BOT^^^beep^boop!
Could you share your code so we may be better help
So how will you synchronize? Im not sure, does the proposed sharedmatrix have any synchronization built in? Shared memory is great for performance, but synchronization can be difficult. 
Sure I will give it a shot and come back to you after, if you don't mind. Yeah I been on google and found some useful stuff, but they still lean to something else as to what I am trying to do, still picked up a few useful things a long the way. 
Awesome. Sorry, I was t trying to sound patronizing. Just never know where people are starting from. I don't deal with complexes much so I learned something new too. 
this is for my previous post about .xls where I have a part of speech = { 'var'} is where I would like matlab to read the Excel file
just posted my code 
it doesn't exceed the cell limit for excel, but would it be better that way?
&gt; does the proposed sharedmatrix have any synchronization built in? Im not sure. Havent gotten around to trying it out yet. &gt; So how will you synchronize? My plan was to more-or-less do the following: * Have 3 instances of Matlab running: one for reading data, one for processing data, and one for writing data. * Setup 3 identical arrays of the same size (or perhaps a [1 x 3[ cell array, since it looks like I'll need to use a cell array to utilize the sharedmatrix function). One array is for reading, one is for writing, and one is for processing data (processed data will either replace the original data in place or be saved in a temp matrix which overwrites the original data after the entire block is done processing). * I'll cyclically loop through these, so Ill have a shared variable that is a scalar with a value of either 1, 2 or 3 to set which lock is currently used for one of the operations (say, reading data). Example: If this has a value of 2, it means block 2 is reading data, block 3 is processing data, and block 1 is writing data. * Each block will have a shared variable that is a logical (1 or 0) that indicated whether the current read/write/processing operation has finished for that block. * The code starts with the data reading instance going through each of the 3 arrays one at a time and loading data from blocks 1, 2 and 3 into these. The data processing instance starts processing block 1 once it is done being read, and then moves on to block 2 when it finishes block 1 and when the data reading instance is done reading it into memory. Once the data reading instance is working on block 3 and the data processing instance is working on block 2, the data writing instance can begin working on block 1 (which has been fully read and fully processed). At this point it can go into an automated cadence where: * 1) The data reading instance "starts" by checking the shared logical from the data writing instance, and waits until it finishes writing the entire block's worth of data before "taking over" the block the data writing instance was using and starting to overwrite that data with new data that still needs to be processed. * 2) The data processing instance "starts" by checking the shared logical from the data reading instance, and waits until it finishes reading the entire block's worth of data before "taking over" the block the data reading instance was using and starting to overwrite that data with the output of the processing workflow. * 3) The data writing instance "starts" by checking the shared logical from the data processing instance, and waits until it finishes processing the entire block's worth of data before "taking over" the block the data processing instance was using and starting to write that data to disk. The overall structure of each instance will look something like this: &lt; start of loop over all data blocks &gt; % instanceIsReadyFlag and currentReadBlock are shared variables. These are a [1 x 3] logical array and [1 x 1] scaler (with value that is a positive integer), respectively. % instanceId is 1/2/3 for reading/processing/writing instances if instanceID == 1 currentReadBlock=currentReadBlock+1; end instanceToCheck = currentReadBlock + instanceID - 2; instanceToCheck(instanceToCheck==0)=3; while ~instanceIsReadyFlag(instanceToCheck) pause(0.1) end instanceIsReadyFlag(instanceID)=false; &lt; operations needed to read/process/write data &gt; instanceIsReadyFlag(instanceID)=true; &lt; end of loop over all data blocks &gt;
I'm not sure how to send the code over PM, since it's not online. But could you please explain the general thing you'd do?
I don't know how to "find which cards share the same day." And I don't know how to "go to the next date." There's hundreds of days each with thousands of values (and some days have more values than others), so I have to do some sort of loop
Also, there's hundreds of days with thousands of values (each day has a different number of values) if that helps
I would think it should still publish both, but maybe try typing 'figure' in the line before each new figure, so it opens a new window. Otherwise it will stay in the same window and replace the old figure with the new one
Have you tried max(A)? Should return a vector of the max values for each column
yes but the array has two vectors: value and date. If I do max(value) that gives me the max for all the dates, but I need the max for each individual date
Are you numbering your figures? For example, using plot(x1, y1) plot(x2, y2) Will only pull up one window with the second plot but using figure(1) plot(x1,y1) figure(2) plot(x2, y2) Will pull up two windows with both plots. 
CSVs are pretty much the standard for line-based formats so I would encourage you to use it when you can. You can open, edit, and save CSVs in Excel, and it can also be easily read by pretty much all modern data analysis packages (Python, Matlab, R, etc.). Check out csvread in Matlab.
This question was already answered well, but if you want to shift the pitch without changing the time length, look into the phase vocoder algorithm (you should be able to Google 'phase vocoder MATLAB'
Assuming d is your nx1 datetime vector and v is your nxk values matrix with missing values set to NaN. Then max(v,2) will give you a nx1 vector with the max. vals. for each date. 
Just to read on more on that: this technique is very powerful in Matlab and is called vectorizing. 
Hello again. I'm running into some issues. I'm attempting to use the structure method you described. This is the current snippet of code I'm user to present targets and get user input to ask if the target was present in previously displayed stimuli: for p = randperm(10,1) - 1 % loops through randperm of 0-9 and selects 1 target results = struct([]); % declaring my structure empty disp(p); % display the target pause(1); clc; % clear terminal disp('did the target appear in previous stimuli (y/n) '); tic(); response = getkey(); RT1 = toc; %input/response time while response ~= 'y' &amp;&amp; response ~= 'n' %Safety feature disp('NOT A VALID RESPONSE'); disp('did the probe appear in the memory load? (y/n) '); tic; response = getkey(); RT1 = toc; results(ind).response = response; %attempting to save response results(ind).responseTime = RT1; %attempting to save response end %end for while loop end %end for for loop However I still only generate an empty structure. Can you see where I might be going wrong? I was thinking I could maybe use something like results = struct('Response', {response},'RT', {RT1}); instead of this combination results = struct([]); % declaring my structure empty results(ind).response = response; %attempting to save response results(ind).responseTime = RT1; %attempting to save response However this doesn't even create a structure anymore. Do you have any thoughts or other ideas that might help?
I am giving it a try but I still don't get where the Hamiltonian equations should come into play. Are they even needed? If you could pm me your code, it would alleviate so much headache from me atm. 
both figures do end up in separate windows when I go publish it, but in the actual pdf file only one figure shows up. 
I have tried numbering the figures but still only the 2nd figure will show up on the pdf file when I publish it. It's like it is completely ignoring the first figure. 
Code looks alright, but can't tell you for sure if it's right as I'm not familiar with this particular topic a great deal. Sounds like you could do with understanding the theory a bit better if you're unsure. For example what does "unstable" mean when it pertains to an implicit/explicit euler method? [This page explains a bit](https://en.wikipedia.org/wiki/Euler_method#Numerical_stability). Sometimes problems like this seem so difficult because we don't know enough about the theory yet. You could also check for examples and see if you're in the right ball park. Sorry I can't be more help.
First, you're using 'ind' without declaring it; that should give you an error but you could be stuck in input mode, during which MATLAB does not update the workspace. You're trying to index into a structure at a location that is undetermined; treat your structure like a column vector in that you want to sequentially access the next element to add your result. Like I said, a counter. Try something like p = randperm(10, 1) - 1; for ind = 1:length(p) ... disp(p(ind)); ... Second, I mentioned in my first comment that getkey may not be a good choice, since I noticed that it gets the ASCII code instead of the literal character. In other words, it returns '121' instead of 'y'. Try replacing disp('did the target appear in previous stimuli (y/n) '); tic(); response = getkey(); RT1 = toc; With tic; response = input('Did the target appear in previous stimuli (y/n)', 's'); RT1 = toc; Finally, you are updating your results structure within the while loop, which is only there to catch errors. That update should occur outside the while loop so that you know your response is valid. Be mindful of the control flow of your code; your version is very vulnerable to infinite loops due to the above issues.
I never had to use them..., reading the wiki it seems like it’s a lagrangian system in canononical units. Which is odd that your professor didn’t give you a perturbing acceleration to work with ... Anyways PM me your email ASAP
Try putting a section break somewhere between the two figures with '%%'. You don't have to title the section. Check to make sure that both figures plotted okay (not just that there are 2 figure windows, but that each actually has your data). Try publishing to html or doc first; I've never had very good luck publishing directly to pdf, and prefer publishing to doc so that I can use the equation editor instead of MATLAB's LaTeX interpreter, which is ugly as sin, imo.
I tried everything but couldn't get to fix it. I have windows 8.1 on my laptop and 10 in the lab and it doesn't work on either now, but used to work on both in the summer. In the end I just decided to run my experiment in window mode.
Sorry I am kinda new to reddit, where can I find your code?
look through my posts 
Matlab cannot identify csvread as a function, although I was able to import my data. I am using the R2017a version .
You're passing over my head with the parallelization details there. I have a basic knowledge of threading and the relevant concerns, but I've never used OpenMP and don't get involved in high-performance numerical codes. I'd be interested in doing so, but I can't really offer you any kind of advice about it since you clearly know more than I do already. Regarding the vectorization - I did a little light googling and the answer seems to be that it varies. gcc is able to automatically vectorize some loops, but can get tripped up if what you're doing is too complex, and the threshold for that might not be terribly high. You may need to either be careful about how you code the loop, or explicitly invoke the low-level vector primitives yourself. Having seen some code produced by Matlab (in this instance, it was actually from Simulink, but I imagine the products function similarly), I wouldn't trust it to do anything smart with your computations. That said, I guess there's an option to optimize the C-code produced by the compiler that was used to generate the code I saw, and it was not being used. So maybe if you turn on an equivalent option, it will do something smart... I think you need to keep in mind that, [premature optimization is the root of all evil](http://wiki.c2.com/?PrematureOptimization). Always go for the low-hanging fruit. Right now the loop is in Matlab and it's too slow, so convert it to C (manually, using Coder, whatever is easiest). If it's still too slow, parallelize it the easiest way you know how. If it's still too slow, then worry about taking advantage of all your processor's advanced vector capabilities. If it's still too slow... I wonder if this would run well on a GPU.
It's a line continuation. Everything on the next line behaves like its on the end of the previous line with no carriage return in between. https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html
 ... Is how you indicate to matlab that the code continues onto the next line even though it _should_ technically only be one line. 
The ... are behind ' and are a comment, you can absolutely run this yourself. In this specific situation the author is indicating that the line of code is continuing on the next line. This isn't technically necessary, given that the ellipses are behind comments; however, they can be used to indicate that something will be continuing on the next line. For this specific excerpt, storing the repmat call to a variable (such as Y) would be good considering that it's being used twice, so you might as well define it once. This brings us to (X-Y)*(X-Y)./(n-1). At that point you should be able consolidate to (X-Y)^2./(n-1), and the Y variable would be good for debugging but likely not useful. Given dimension expansion in newer versions the repmat is actually redundant to and you can simply put (X-mean(X)) and work with that instead! Similarly, since they're dividing by a 1x1 double the dot divide isn't technically necessary either.
If you're looking to put together a GUI you should check out GUIDE or the App Designer (2016b and later).
I normally would, but the code I want to implement this into another function that does not work nicely with either of those (legacy software stuff) 
It might not be the most efficient, but you could use max inside a for loop with logical indexing for the unique days. The index will get you around the variable records per day problem. Alternatively you could subtract your dates off a reference (e.g. the first date) to get a reference ID and use accumarray with @max as the function. This would work well if your dates are contiguous. If your measurements have HMS then use floor to get your index, and don't forget to start at 1!
Legacy software is my least favorite kind of software. :-( So the existing function will be creating the pop-up for user input?
Away from my computer now, so I am just going to dump an idea here: Essentially you have a defined set of coordinates in three dimensions - equally spaced in two of them I assume ? If you were to construct a two-dimensional grid using your two fixed dimensions, and store the elevation for each of these cells you are half way there. For a given point in your grid, there is a defined number of neighbouring points. Unless you are at a corner or an edge, this number is equal to 8. Using the index of the original points, calculate the corresponding 8 vectors, pick the largest and you have your next point on your path. Hitting an edge or corner - first or last cell in the grid in one or both dimensions - provides you with a termination condition. There are different (faster) ways based on lists and vectorization, but these are more lengthy to explain than a phone allows.
Sort of...it basically needs to popup with a message saying "how many rows" and "how many columns" then allow the user to fill in two values at a time Text:how manyrows, input() How many columns, input (). Then generate a table of those in a figure window for a user to edit 1 pair at a time. There's additional stuff (labeling) but that's the gist of it. It's something very simple to do with the 2 commands I linked above but I can't use them :(. I have to use uicontrols and functions and shit ...it needs to be in 1 gui figure
Does the line have to lie on the height points you provide? Or are you more interested in the line in general. If you have already computed the 2d gradient you can use that to step in that direction. The negative gradient vector gives you the direction of steepest ascent. If you throw the gradient into a gridded interpolant you can query it wherever you like within your domain so you don’t need to worry about hitting your datapoint directly. Then for each point on the line it’s just P(x+1) = P(x) - gradientinterpolator(P(x)) \* stepsize 
&gt;an error ? 
The reason I'm using getkey() and not input() is because I'm collecting reaction times, thus I don't have them to be confounded recording time taken to press y or n, AND then the enter key. However I will take your points into considerations regarding infinite loops - we don't want those! Thanks again for your help.
As everyone else said, it's a continuation mark. I generally use it as a way to tidy up function calls if the function calls are too long. I *always* use it when I am defining column vectors. Consider: x = [1, 2, 3, 4]; y = [1, 2; 3, 4]; See how it's a little hard to notice that `x` is a 1x4 row vector but `y` is a 2x2 matrix? When I define matrices or column vectors, I do so as follows: x = [1, 2, 3, 4]; y = [... 1, 2; ... 3, 4]; Now it's clear that `y` is a 2x2 matrix. Not super useful up front, but it makes it clear at a glance what the intent is, and I would argue that readability and clearly expressing intent is vastly more important than writing compact code. I'll generally tidy up function calls when there are multiple name-value pairs, such as: plot(xValues, yValues, '-.', ... 'LineWidth', 1.5, ... 'Color', [1 0 0]);
If you're an undergraduate, I would suggest you look into a university site license. Your university should have the ability to give you a license for everything. If you're buying the toolboxes yourself, then I would **highly recommend** you not purchase anything until you *know* you need it. I don't know what the "new license discount" is, but I would be that *you are not going to save any money at all if you buy even one toolbox you don't need.* You're probably going to lose money if you buy two or more toolboxes that you don't need. My suggestion would be to ignore the fact that you've got a discount at the moment. Buy what you would normally buy - the things you *actually need* to program your projects *now*. Don't buy anything extra. When the time comes, you'll find functions you want to use that are associated with toolboxes you don't have. You then have two options: 1. Code an equivalent function yourself, or 2. Buy the toolbox. Some things, like the symbolic toolbox, you're almost certainly not going to be able to code yourself. Some other things, though, maybe you could. Which route you take depends on how many functions you want from a particular toolbox and how complex those functions are. Here's the nice thing - *Matlab offers trials of everything.* Just contact Mathworks and tell them you'd like to try a particular toolbox. See if it makes your life easier, or just use it to compare the output of your homebrew functions. Once you try it, on a problem you are actually having, and can prove to yourself that you *need* it, that's the time to buy it.
Ah, makes sense. Sounds to me like you'll see your way through and come out even better on the other end. Happy to help!
 function [xValue, yValue] = calledGUI gui = figure(... 'Visible', 'on', ... 'Units', 'normalized', ... 'Position', [0.1 0.1 0.8 0.8], ... 'Name', 'Called GUI', ... 'NumberTitle', 'off'); % Disable Matlab figure tools set(gui,'menubar','none'); % Setup GUI proportions. horizontalMargin = 0.05; % 5 percent margin around the sides; verticalMargin = 0.05; % 5 percent margin around the top/bottom; controlWidth = 0.5; % Everything is 50% of the figure wide (before margins) controlHeight = 0.5; % Everything is 50% of the figure tall (before margins) % Stash variables you want to pass around in a struct. Generally it's % called "handles", but what really is a name? handles.xValue = []; handles.yValue = []; % Generate the GUI: % - Push buttons handles.okayButton = uicontrol(... 'Style', 'pushbutton', ... 'Units', 'normalized', ... 'Position', ... [horizontalMargin, ... controlHeight + verticalMargin, ... controlWidth - 2*horizontalMargin, ... controlHeight - 2*verticalMargin], ... 'String','Okay'); handles.cancelButton = uicontrol(... 'Style', 'pushbutton', ... 'Units', 'normalized', ... 'Position', ... [horizontalMargin, ... verticalMargin, ... controlWidth - 2*horizontalMargin, ... controlHeight - 2*verticalMargin], ... 'String','Cancel'); % - Input panels handles.xValuePanel = uipanel(... 'Units','normalized', ... 'Position', ... [controlWidth + horizontalMargin, ... controlHeight + verticalMargin, ... controlWidth - 2*horizontalMargin, ... controlHeight - 2*verticalMargin], ... 'Title','Enter an X value:'); handles.yValuePanel = uipanel(... 'Units','normalized', ... 'Position', ... [controlWidth + horizontalMargin, ... verticalMargin, ... controlWidth - 2*horizontalMargin, ... controlHeight - 2*verticalMargin], ... 'Title','Enter a Y value:'); % - Input boxes handles.xValueBox = uicontrol(... handles.xValuePanel, ... % Insert a parent handle here to "attach" to a parent, in this case the panel 'Style','Edit', ... 'Units','normalized', ... 'Position', ... [horizontalMargin, ... verticalMargin, ... 1 - 2*horizontalMargin, ... 1 - 2*verticalMargin], ... 'String',handles.xValue); handles.yValueBox = uicontrol(... handles.yValuePanel, ... % Insert a parent handle here to "attach" to a parent, in this case the panel 'Style','Edit', ... 'Units','normalized', ... 'Position', ... [horizontalMargin, ... verticalMargin, ... 1 - 2*horizontalMargin, ... 1 - 2*verticalMargin], ... 'String',handles.yValue); % Assign callbacks. set(handles.okayButton, 'Callback', @okayButton_Callback); set(handles.cancelButton, 'Callback', @cancelButton_Callback); % Write all data. guidata(gui,handles); % This "stashes" the handles struct as a part of the GUI. uiwait(gui); % This "pauses" the gui until data can be entered. Needs a uiresume call somewhere to unpause. if isvalid(gui) % A figure handle is not valid if you close the figure. handles = guidata(gui); % This retreives the handles struct after the ui is resumed delete(gui); % Terminate the window xValue = handles.xValue; % Assign outputs yValue = handles.yValue; else xValue = []; yValue = []; end end function okayButton_Callback(~, ~) handles = guidata(gcbo); xString = get(handles.xValueBox,'String'); yString = get(handles.yValueBox,'String'); if ~isempty(xString) handles.xValue = str2double(xString); end if ~isempty(yString) handles.yValue = str2double(yString); end guidata(gcbo, handles); % Don't forget to write the new handles data back to the GUI or it all gets lost. uiresume(gcf); % gcf is "get current figure" and returns the handle to the... current figure. % Alternatively, you could stash the gui handle ("gui") in the handles % struct and call uiresume(handles.guiHandle) end function cancelButton_Callback(~, ~) uiresume(gcf); end That's it! Good luck! 
How about for controls for a fixed wing UAV? I'm planning on doing a basic autopilot system for it. The reason I'm looking into matlab is because I have to get it for a few courses anyway.
Thank you, that is very helpful! 
No problem! I wanted to do GUIs in Matlab for a long time (years) but always shied away from them because it was so unclear to me how to get started. I tried to comment everywhere I thought I was using what might be a foreign concept, but please give it a try and let me know if you have any questions. I also tried to do a couple different techniques throughout, such as putting the text and edit boxes inside frames and using a callback function to call a "third party" function that can still interact with the `handles` struct. The biggest concepts for me to grasp were that: 1. You can store *anything*, not just the uicontrol data, in the `handles` struct. In this example I pass `xValue` and `yValue` around as part of `handles`, but you could have *anything* attached to `handles` and then it's accessible by anything that can receive `handles`. 2. Speaking of receiving handles, anything can get the current `handles` struct by calling `handles = guidata(gcbo);`. **Any changes you make to handles are local only until you write the changes.** Write changes by calling `guidata(gcbo, handles);`. Typically, any function that uses anything found in `handles` will fetch the current `handles` data at the first line and write at the last. You'll notice, in the `calledGUI` script, that the `cancelButton_Callback` doesn't read from or write to `handles`. This is because it doesn't *interact* with any of the data; it just "unpauses" the GUI to allow it to close. Hope this helps!
I would suggest reviewing the [documentation on the control system toolbox](https://www.mathworks.com/products/control/features.html) and seeing if any of the functionality is useful to you. It is mostly linear controls algorithms, like state feedback or PID controllers. I kind of get the feeling you're talking about developing a more abstract controller that would manage waypoints, etc. A system like that would generate the references (altitude, attitude, heading) that would be inputs to the feedback controller that the control systems toolbox would generate. 
Yes I'm less worried if the line follows the points but it should lie on my z-axis ideally. 
Not sure I understand what exactly you're trying to do, but you can programmatically generate the uicontrol objects. You could do something like: function testGUI gui = figure(... 'Visible', 'on', ... 'Units', 'normalized', ... 'Position', [0.1 0.1 0.8 0.8], ... 'Name', 'Called GUI', ... 'NumberTitle', 'off'); % Disable Matlab figure tools set(gui,'menubar','none'); nRows = 10; controlHeight = 1/nRows; controlWidth = 0.5; for i = 1:nRows defaultString = sprintf('Enter x%d',i); handles.xBox{i} = uicontrol(... 'Style', 'edit', ... 'Units', 'normalized', ... 'Position', ... [controlWidth, ... (nRows-i)*controlHeight, ... 0.5*controlWidth, ... controlHeight], ... 'UserData', defaultString, ... 'String', defaultString, ... 'TooltipString', defaultString, ... 'Callback', @box_Callback); defaultString = sprintf('Enter y%d',i); handles.yBox{i} = uicontrol(... 'Style', 'edit', ... 'Units', 'normalized', ... 'Position', ... [1.5*controlWidth, ... (nRows-i)*controlHeight, ... 0.5*controlWidth, ... controlHeight], ... 'UserData', defaultString, ... 'String', defaultString, ... 'TooltipString', defaultString, ... 'Callback', @box_Callback); end end function box_Callback(hObject, ~) if isnan(str2double(get(hObject, 'String'))) set(hObject,'String',hObject.UserData); end end In this example you can see that the only input driving how the input boxes are arranged is `nRows`. Everything beyond that is handled programmatically. Note that, if you make `nRows` too big, you could wind up in a scenario where the rows are so short that you can't enter text, but that's where you should be using Excel or something to enter data. 
File Exchange Toolboxes used: * [Robotics Toolbox](https://www.mathworks.com/matlabcentral/linkexchange/links/2961-robotics-toolbox-for-matlab) * [Kinematics Toolbox](https://www.mathworks.com/matlabcentral/fileexchange/24589-kinematics-toolbox) Code: L(1) = Link([0 84.5 40 (pi/2)]); L(2) = Link([0 0 200.43 0]); L(3) = Link([0 215.02 28.5 0]); Uarm = SerialLink(L); for i=0:(5pi/180):(180pi/180) for j=0:(5pi/180):(180pi/180) for k=0:(5pi/180):(180pi/180) Uarm.fkine([i j k]); tranimate(Uarm.fkine([i j k])); Uarm.plot([i j k]) hold on end end end Now that we've gotten that out of the way... You can try making your XYZ data ahead of time: points = linspace(0, pi, 180/5 + 1); [I, J, K] = meshgrid(points); Then use array operations instead of looping, assuming your toolboxes accept array inputs. If not, you can use reshape() to form your triplets in a nx3 matrix and take them 1 row at a time in a single for loop instead of a nest 3-deep. I browsed the documentation for the robotics toolbox a bit, and the author suggests: &gt; By default a quite detailed plot is generated, but turning off labels, axes, shadows etc. will speed things up.
Give this a whirl: plot(dataX, dataY) ax = gca; ax.XAxis.Visible = 'off'; [Axes Properties](https://www.mathworks.com/help/matlab/ref/matlab.graphics.axis.axes-properties.html) [Numeric Ruler Properties](https://www.mathworks.com/help/matlab/ref/matlab.graphics.axis.decorator.numericruler-properties.html)
Could you please provide some context?
Awesome! Thanks for sharing!
Awesome! How do you plot the path of travel? It's in the video but not the code you posted, I believe
Weird time of year for someone on the east coast to have an assignment this easy due at midnight. &gt; [Hint: one my computer with the code running properly, selecting 10k 'days' of numbers and doing the computations takes approximately a few seconds; 50k 'days' takes on the order of 5 minutes. Why... why isn't this person's code scaling linearly? This should be linear. You know, I'd've done this for $200 too... I'm just done with staying up to do homework. Being out of school sure is great. Gonna go hit the sack now. G'night.
`nodes(:,end)` gives end position. Accumulate it in a matrix and plot it 
Not only that, unless they are using an ancient computer it’s also very slow in absolute numbers. But the task is not well suited for Matlabs insistence on vectorization. My quick implementation in Julia does 10k in a few milliseconds on a small laptop. I get that this is for a beginners exercise that is supposed to teach some programming basics but it’s still an fun performance challenge
What if you still had four pieces, still adding up to the same total length, but each one was a different size? That’d be really neat to see the difference 
Thanks! Could you possibly finish within the next 6 hours? (By 4:15pm EST)
https://imgur.com/a/7xE5T It's done! Send me a PM
The first thing that comes to mind for me is turning off visibility when you create it, then turning it on when you need to display it: fig = figure(i); fig.Visible = 'off'; ... fig.Visible = 'on'; [Figure Properties - Visible](https://www.mathworks.com/help/matlab/ref/matlab.ui.figure-properties.html#property_d119e283711)
You can also stash the handle to the current figure and then re-set the focus: figure(1); favoredFig = gcf; newFigure = figure(2); figure(favoredFig); As /u/angrmgmt00 mentioned, you can turn visibility off. You can do that as part of the function call: fig = figure(i, 'Visible', 'off');
It's not clear what you're trying to make. Are you just trying to calculate the duration of the test? You have the time stamp data, and it looks like you've already converted it to the `datetime` format, so why not just find the elapsed duration with `t(end) - t(1)`? Or, if you're trying to put all the samples that correspond to a particular second in time into a cell array (you probably don't actually want to do that - cell arrays are a pain to work with), you could do something like: testDuration = t(end) - t(1); elapsedSeconds = seconds(0):seconds(1):testDuration for currentSecond = 1:numel(elapsedSeconds) Sec{currentSecond} = p(t ==( t(1)+elapsedSeconds(currentSecond))); end 
I'm not sure if I understand correctly. But if you want to check if the timestamp of two measurements is the same, you are able to use an if-statement. if t(i)==t(i+1) 
Yes it is the second option, What I need is the average of the output (in this case P) per second. 
I want to put all the measurements in a particular second so I can obtain the average value of P
 testDuration = t(end) - t(1); elapsedSeconds = seconds(0):seconds(1):testDuration for currentSecond = 1:numel(elapsedSeconds) meanOutput(currentSecond) = mean(p(t ==( t(1)+elapsedSeconds(currentSecond)))); end
Thanks, I will try with the code 
So you want to average the values for the same time with seconds precision, right? Taking your variable definition id go for g = findgroups(t); % group wrt time pMeans = splitapply(@mean,p,g); %use groups to compute the means Hope that helps (not sure if the code is 100% correct, since coding with your smartphone isn’t the greatest experience)
Hey, just PM'd you
What. The. Actual. Fuck. 
OP delivered, soooo... ¯\_(ツ)_/¯
I don't think it's a troll. There's a Reddit feature where you can hide posts that you've voted on. It's my preferred way for "scrolling" through content, because then I don't ever have to see the post again. If someone were subbed here, and this post came up in their feed, and they didn't want to see it again, they could vote up or down to get it to go away. I actually *don't* vote on posts I want to follow for that reason.
Even if I turn visibility off, at the end of the script, I have to turn it back on again - and doing so makes the figure windows active, which is what I'm trying to prevent. I want the figure windows open, but I want the main Matlab application window to retain focus. Or at the very least, I need a way to switch the focus back to the application window. Is there any command that will do that? 
Even if I turn visibility off, at the end of the script, I have to turn it back on again - and doing so makes the figure windows active, which is what I'm trying to prevent. I want the figure windows open, but I want the main Matlab application window to retain focus. Or at the very least, I need a way to switch the focus back to the application window. Is there any command that will do that? 
figure(1) drawnow; commandwindow
You can use 'commandwindow' to programmatically select the command window. [Command Window](https://www.mathworks.com/help/matlab/ref/commandwindow.html)
I'll try that and it'll hopefully speed things up
By size I suppose you mean mass. Yes different masses will require a lot more work. you are more than welcome to give it a shot. [**Reference**](http://www.springer.com/cda/content/document/cda_downloaddocument/9781461437390-c1.pdf) What is really neat is actually you can crank up n to 100 or so and do a 2D rope simulation.
This guy just paid you $200 for 30 minutes of work, didn't he? This is the easiest homework problem I've seen someone wimp out on.
Are you knew to programming? You're question will be solved by using the 'if' function.
I havent looked at your DEM file, but this should give you what you want and be rather efficient at doing so (assuming you want to repeat this process multiple times for the same dataset, since it pre-computes ALL elevation differences, not just the ones based pn your current seed point. If you only need one path then this does a bunch of extra work). [Hill Climbing Function](https://pastebin.com/UQRjNDaV)
you dont even need an if statement. Literally, doing b=x1&gt;12; gives OP what he/she wants.
Seems like your google is very broken. Y = x1 &gt; 12; Will do the trick. However your Problem seems to be much more fundamental. I’d recommend looking at the mathworks youtube channel for some basic introduction videos ( these are pretty good). 
As a general note, if you dont know how to do a simple problem, try the obvious solution and see if it works. YOu want to know if x1 is greater than 12, well try x1 &gt; 12 and see what happens. (hint: it gives you what you want).
based on your post history, you're just an idiot.
But it also gives a 0 when b == 12. That's why I write the 'if' function. 
[removed]
I have just stumbled upon [surf3tikz](https://github.com/Fiech/surf3tikz). I will try it out and keep you posted !
Don't be a dick.
Yes and yes.
Gotcha, didn't know they had those. My issue is I need to specify what value Y takes for x1 &gt; 12 (specifically it needs to be a 1, otherwise 0)
So you went through my post history and saw the 4 year thing? Good job...
Are you trolling? 
Did you check the documentation for basic operations? 
I guess I just took the question too seriously/literally. Since the question only states the conditons: 'x1&lt;12' and 'x1&gt;12'. Since there is no condition for x1==12, I took the 'if-elseif' function approach, and not the answer the others are giving. Feel free to correct me if I'm wrong.
These methods are already embedded in MATLAB. To solve an unconstrained optimization problem, you can do it by using the function "fminunc". Check the following to see what the functions does, what methods are used, including those you are concerned of : [Unconstrained optimization ](https://www.mathworks.com/help/optim/ug/unconstrained-nonlinear-optimization-algorithms.html#brnoxxo) and [fminunc](https://www.mathworks.com/help/optim/ug/fminunc.html?s_tid=doc_ta)
lucky you saw this one before me ;)
As it is a course assignment, I assume you must write the methods yourself and turn them in to receive credit, no? If that is the case, since you have a single, fixed objective function, you can compute the derivatives ahead of time by hand (easy part), then you'll want to learn how [functions](https://www.mathworks.com/help/matlab/ref/function.html) work, in particular [anonymous functions](https://www.mathworks.com/help/matlab/matlab_prog/anonymous-functions.html). These will allow you to quickly and easily evaluate the next variable values and gradient/Jacobian at each iteration. You've hopefully learned how to select good convergence accelerators (alpha and beta or whatever your favorite flavor of [line search](https://en.wikipedia.org/wiki/Line_search) requires) during the course. If you know how to program a while loop ([or not](https://www.mathworks.com/help/matlab/ref/while.html)), I've found it to work best for manually solving this type of problem, as you can set the [sentinel condition](https://en.wikipedia.org/wiki/Sentinel_value) (when the loop stops) to be your [error tolerance](https://en.wikipedia.org/wiki/Approximation_error). A for loop would also work, but you will be locked into a fixed number of iterations and may not converge in time. Alternately, if you set your error tolerance or accelerators incorrectly, a while loop may take a very long time to converge. If you have to write it yourself, that should get you going. If you get stuck, please post your code and any error messages and I or someone else will give you another push. If you don't have to write it yourself, definitely look into what /u/kakosf said.
By default the legend shows the line color, but you've changed the marker color. You can have legend show markers and not lines, or also adjust the line colors (two for each, one for poles, and one for zeros). If all else fails, try also passing the pzplot handle along with your legend strings: h = legend(p, {'legendEntry1', legendEntry2', ...});
MATLAB coder does not support all the language features. Sparse matrices is something that's not supported. https://www.mathworks.com/matlabcentral/answers/127060-matlab-coder-and-sparse-matrix?requestedDomain=www.mathworks.com
You the real MVP, thank you so much!!
I only looked very briefly, but this seems like it would work: * Pick a known reference for Julian days. Create a `datetime` corresponding to that day, and a `double` corresponding to the number of Julian days on that day * Calculate the number of Julian days since/before the reference by subtracting the reference `double` * Convert the intervals from days to hours and then to to [`duration`](https://www.mathworks.com/help/matlab/ref/duration.html) objects * Add the `duration`s to your reference Julian day
it gives 0 when x1 is 12 because 12 is not greater than 12. 12 is equal to 12. This may sound obvious, but it seems that it needed to be said. If you want an equality condition to return true instead of false, you have to tell it that you want to accept values equal or greater than. i.e. x1 &gt;= 12 Alternately, you can tell it to return true if x1 is not less than 12. ~(x1 &lt; 12) Using an if statement works, but that is a little bit like flying from Los Angeles to San Francisco and having a layover in Chicago. You can book that trip no problem, but you would never actually recommend it to someone unless you literally didnt know of any other route that got you from LA to SF (or had a *very* unusual situation).
Glad to help. I might have a use for a similar function in the not too distant future, so I figured I mine as well code it up now and help someone else out as well. PS in case it wasn't obvious from the comments in the code, it is setup to allow you to change the "window" size where points are evaluated to find the one with the max elevation change and everything automatically. The larger you make the window the more unique directions you can go in (example: for windowHalfWidth=1 you only have 8 possible directions: (in degrees) 0, 45, 90, ..., 315. Increasing it to 2 gives angles every 22.5 degrees instead). However, for larger windows you may not pick up some local variability that can affect the path (since the path is just a straight line to the new point). Increasing window size also increases the time the initial computation takes. In my tests, a half window width of 3 (i.e., +/- 3 points) seemed to strike a decent balance, though this will probably vary based on the problem.
For non-uniform points this sounds sort of like a traveling salesman problem. Maybe embedded in a really high dimensional space or something like that. That's probably stupid, it's late and I'm not thinking hard about it. But I it's similar enough in principle that I doubt it's tractable in the general case. I could see there being options for the evenly spaced case, though. Instead of sliding a 2N row down the first dimension, I would slide the widest row you can fit in memory. So you start by loading 2N x M (M &gt; 2N) of the plane into memory and slide along the second dimension. When you hit the end of the row (M), then you start sliding "down" the first (2N) dimension. You'll throw out the points that were at the "top" and load new points at the "bottom", just like in your example. You never have redundant reads from sliding along the first dimension. Then when you've slid all the way to the end of the first dimension, you go back up to the top and move over by M. You still have redundant loads at the interface between the two M-wide rows, but at least you've minimized the number of such interfaces based on the memory constraints. 
Sounds like you are doing convolution? What exactly is the function? If it's some matrix multiplication, that's good news. How big is your window? Maybe you wanna define a handle class, so the function reads from the same data as the matrix loaded?
Are you using [uigetfile](https://www.mathworks.com/help/matlab/ref/uigetfile.html) for your button? If not, you should, imo. A more laborious option is to use [regexp](https://www.mathworks.com/help/matlab/ref/regexp.html) to parse the full 'path/filename.ext' string and collect the characters after the last '/' and until the end of the string. If you need help learning how to work with regular expressions, here is [a fun and informative sandbox](https://regex101.com/). An even more labor and clock cycle-intensive solution is to loop over the characters in the string from end to '/' and store them, then reverse the order. You could start from the front, but it'd take longer, unless the file name is longer than the path. I can't recommend uigetfile enough for this task.
You mention R, so I assume you have at least used a computer at some point in your life. The problem is that your “question” is so fundamental, it’s unnecessary to ask. How would you compare x to 12? Maybe with the fucking less-than operator? How would you assign a value if this condition is met? Maybe with the fucking equals sign? Your “question” is not a “simple problem,” it’s a complete lack of understanding and failure to use one’s own critical thinking skills to figure out a basic task. You said you searched online, but did you even try to do this in Matlab on your own first? I don’t think it would take someone with absolutely zero experience more than a couple minutes to figure out. 
Well since he doesn't specify what the output should be if x==12, we don't have to worry about that case. Your interpretation is just wrong.
Actually my question, as said clearly in the title and reiterated again at the end of my post, is what is the best way/resource to find answers to basic matlab questions. I gave an example of a basic question, but that was not the point of the post. So for one it seems there's a bit of a reading comprehension issue there. But that aside, I think it's more important you find out what it is in your life that allows you get oddly/comically pissed off on a subreddit about matlab questions, one of the strangest places I can think of to have such a gaint stick up your ass.
Not gonna give you the answer but this should help. Start by thinking about what your end result will be. You're going to want to call scatter() in a way like scatter(greenVals, blueVals). Ok so how do we get greenVals and blueVals? Well we know each is going to have a bunch of data in it... In fact 255*255 values, one for each pixel. So start off by saying N = 255*255 greenVals = zeros(N,1) blueVals = zeros(N,1) Now you just need to fill them in with the right data and you're ready to call scatter(). So figure out a way to step through every pixel in your image, determine the value for green at that pixel, place it into your greenVals array, determine the value for blue at that pixel, place it into your blueVals array. Hint: make sure you figure out some way to make sure that each new pixel you investigate is getting it's own unique place in your greenVals, blueVals array. Also. There's a way to do this in one line of code, but if you're in an intro class, i don't think it's what the prof is looking for. Use this to check your work. scatter(reshape(myImage(:,:,2),255*255,1), reshape (myImage(:,:,3),255*255,1)) 
Awesome, thanks. Appreciated!
I imagine the assignment would be for a sane problem that would either specify a specific number of iterations to test or would converge quickly (&lt;20), given that, I would use a for loop.
Granted, our friend did give his objective, and it looks like the roots/extrema would shake out pretty quickly, but perhaps minimizing error is the focus here? I didn't feel like I knew enough to assume either way from the description given, and I prefer to focus on accuracy first, and then optimize for speed. In the end, both are adjustable, as you can tune by error in a while loop, or by iterations in a for loop.
Ind2vec
How? Please read the description for plotconfusion and plotroc and see what inputs they require. I need to transform my current matrix to that form.
I want the user to be able to run my app, input their data into the table in the top right, select an amount of time from the pop-up menu, and then click on each push button to generate the two subplots. How do I do this? 
&gt; Sounds like you are doing convolution? This can *almost* be done with convolution, but I havent figured out a way to utilize any of Matlab's convolution functions to actually implement this. The problem is that this 2D data is actually a slice through a 4D dataset. Put another way, the convolution kernel is dependent on the "center" location where you take the sum. This obviously means I cant convolve with a standard convolution, but also means that I cant pre-apply the weights and then convolve with a matrix of ones, since the weight applied to any given data point depends on the center location of the window you want to sum over. In reality, it is actually a bit more complicated - The data is actually 4D, but (in terms of geometry) is pretty well defined by the superposition of 2 different 2D datasets. This means the convolution weights are actually a 4D slice through an 8D array, but it is easier to think of this using recursion and the 2D data / 2D slice of 4D weights. Conceptually, you can apply the 2D algorithm, but at every point you re-apply the 2D algorithm to 2 additional independent data dimensions. &gt; If it's some matrix multiplication, that's good news. Unfortunately not. The issue is similar to the one in the convolution case. Basically, without getting into the math, the operation I need to do can easily be done by implementing a matrix-matrix multiplication and extracting the diagonals of the result (exact where each value in the input/output matricies are actually [n x n] sub-matricies). I *could* do this with big sparse matricies, but these would be big enough and sparse enough that they would slow things down MUCH more than they helped. &gt; What exactly is the function? its too long (and too proprietary) to post, but it effectively has the form of a non-uniform fourier transform. The "why" is to model wave propagation. You have time series data describing a wavefield at several points that are along with some 2D surface in 3D space, and you want to see what the wavefield data would have looked like along some alternate 2D surface. This will estimate that for you. The "how" is based on an idea in wave propagation physics that you can take some wavefield (in a computer simulation, so sampled at discrete locations), make each individual point into a secondary source, model what wavefield each secondary source produces, add them all together, and you get the same thing that you would have from directly modeling the wavefield. You can model what the wavefield from a point source looks like at any given location by calculating a phase shift (e^(i * w * t)) and an amplitude correction (some function of input and output that is roughly 1/r^2 but that also considers wavefield focusing and unfocusing in variable velocity media meaning that for points sufficiently far away this is effectively 0). So, for some point x(ii,jj), I basically need to implement sum(sum(W(:,:,ii,jj).*(x(min([1,ii-n]):max(size(x,1),ii+n]),min([1,jj-n]):max(size(x,2),jj+n]))))) &gt; Maybe you wanna define a handle class, so the function reads from the same data as the matrix loaded? Im not sure what you mean by this. 
As I have been thinking about this over the last day I actually thought of a very similar solution too, and if 2 people independently come to the same solution chances are it works well. Yours may be saying the exact same thing as this, but my thought was basically to load as many entire rows as I can fit into memory and then progress down each row one at a time. If I have a [n1 x n2] dataset and a [w1 x w2] window, I can entirely avoid all redundant ready by having w2 rows with n1 samples each or w1 rows with n2 samples each (depending on if w2*n1 or w1*n2 is less). Even if I cant load all that, I avoid many of them. I think this is pretty much identical to what you suggested, though perhaps the implementation is slightly different. I tentatively worked out that as long as W/N &lt; 0.15 or so I should be able to completely avoid redundant reads and have enough free memory left to still actually run the code I want to run. It helps that my data is actually 4D, not 2D, and is getting processed in a way that I can effectively replicate this process twice (meaning that W/N = 0.15x = 15% actually reduces the required data to 0.0225x = 2.25%. This still ends up resulting in ~100 GB of data, but I have 256 GB of memory to work with so that leaves room for spikes of up to ~1.5x base usage. I could bump that up to 512 GB memory but I would have to spill over to another NUMA node which Id really rather not do.
The line of code he wrote works. Or you could do [A==0;A==1]
There is nd convolution. It's not limited to 2D. Seems you are runnign to my biggest frustration in matlab; indexing. It's still a shame there is no proper tensor operations. Thats why i love numpy. If your matrices are sparse, I can't imagine matrix multip be slower than extracting small regions and iterating operations on them. Matlab is optimized exactly for the matrix multiplications. Sparse matrices are a life saver when you get to really large sparse ones. I'm guessing you are doing some wavelets/FFT. Matlab doesnt do pointers by default. The way to get around that is the handle class. Yes, you would be sidestepping local copy of splices this way, as you only pass the *handle* to the object, and not copy the object by itself.
&gt; There is nd convolution This runs into the same issue. To implement this and get the 4D answer I want, would need to do something like % 'data' and 'W' are both 4D arrays convn(bsxfun(@times,data,reshape(W,[1 1 1 1 size(W)])),ones(windowSize),'same') Which is equivalent to an 8D convolution with a 4D slice extracted. The ONLY way I can think of that convolution would work is if is in the "convn(A,B)" command you could modify B to be a function of where the current summation was being implemented in A. Im almost positive there is no way to make Matlab do this, and Im fairly sure that its not actually possible to do this at all (and by "at all" I mean "without removing all the speed tricks that makes convolution faster than a simple loop_sum method in the first place"). Ive thought a lot about how to do this, and even managed to implement this with 2x consecutive matrix-matrix operation in a limiting case where each of the 2D array geometries (that define the 4D data) had 1 singular dimension. But, I just dont think it is possible to do this operation without a BLAS or convolution function that lets you define a slice of high higher dimensional array that you want data for and then only computes what is necesairy for that slice. To my knowledge that doesnt exist. The only think ive found that seems to have a real shot at helping is non-uniform fft's, though I havent had time to test using them. &gt; If your matrices are sparse, I can't imagine matrix multip be slower than extracting small regions and iterating operations on them The issue is you are taking a dense matrix and spreading it out in a VERY large sparse matrix. For example, lets assume I need to perform N different matrix-matrix multiplication of [N x N] matrices. I can implement this with sparse matricies such that % a and b and higher dimensional arrays that I want to extract 2D slices from and then matrix multiply those slices. A and B are both [N x N] A = zeros(N^2,N^2); B = zeros(N^2,N^2); for mm=1:N A((mm-1)*N+1:mm*N,(mm-1)*N+1:mm*N)=a(:,:,mm); B((mm-1)*N+1:mm*N,(mm-1)*N+1:mm*N)=b(:,:,mm); end A=sparse(A); B=sparse(B); % This is a horrible way to make sparse matricies in practice. I just use it hear because its easy and the point is to describe the sparse matrix structure, not to show how to make it. C=A*B; % something to extract diagonal blocks from C My actual use case is even worse, since it wouldnt just be 1 dimension that things needed to be spread out and mapped back to 2D in. This could easily result in sparse matricies that are on the order of [&gt;1 trillion --by-- &gt;1 trillion]. The efficiency benefit compared to looping through less efficient operations done on much smaller dense matricies is far outweighted b the overhead from using a matrix this big that only has data in 1 out of every 100 million points. &gt; Matlab doesnt do pointers by default. Matlabs default behavior is to pass by reference until you try and overwrite the input. It is my understanding that passing by reference is, for all practical purposes, passing a pointer. Granted this makes true in place replacement impossible, though this ends up not mattering to me since 1) Im going to be generating a MEX function to implement this main loop, where true in place replacement is possible, and 2) I dont think I can use in place replacement anyways, since when I calculate a given point I still need the originl data from that point since future "windowed sum operations" will need it as input.
+1 for the walkthrough without spoiling. In side note: I always wondered why one would use SCATTER at all, since PLOT(x,y,’o’) basically achieves the same...
Just have a look at FILEPARTS, it will do what you are looking for. [dirName,fileName,fileExtension] = fileparts(fullFileName);
Not at all sure what problem you're having but have you tried normalizing your outputs around zero (i.e. 0--&gt; -1 and 1--&gt; 1)? I hardly doubt it would make a difference though. What's your training error? With that small size of observations I also hope you've tried k-fold cross validation.
Not yet, I’ll give that a try. I used the fitcsvm/fitctree method to first optimise ALL hyper parameters, it’s done using 5 Fold CV by default. I picked the best hyper parameters. The inputs are standardised. Do I need to normalise it as well? It won’t make sense in context of Decision Trees though I think, it would only work for SVM. Both training and test set have the same range of features (300 features).
&gt; is it really necessary to change 0 to -1? Not always but it's sometimes done. Currently the midpoint sits at 0.5 ((0 + 1)/2 = 0.5). Putting 0 to -1 puts midpoint at 0 which might help but like I say its a long shot. &gt; I get the model with those params, so I can just use it for predictions and &gt; The inputs are standardised. So what was the accuracy result of the training? I understand how fitc* works, my question pertains to whether you're getting rubbish results during training. And whether you're feeding it during testing the same type/range of values as it got during training. Are the training **and** testing samples standardised? This can make a huge impact and it's why I asked. &gt; Both training and test set have the same range of features (300 features). No they have the same **set** of features. The [range](http://mathworld.wolfram.com/images/eps-gif/DomainRange_1000.gif) of a feature is what I'm asking about. If you're training them and they're standardized to 0 to 1 and you suddenly feeding them values &gt; 2 (and they're still doubles) then the output is going to be wrong. Finally, you have 300 features which means 300 dimensions and only 1000 samples for training. You're then giving it 1500 samples to train within the same 300 feature space. Generally, your number of samples must be much greater than the number of dimensions or you run into the [curse of dimensionality.](http://blog.galvanize.com/learn/learn-to-code/curse-dimensionality-manage/) Your limited samples might not represent the entire feature space and it might be why your classifiers are getting confused. If your training data isn't evenly spread across the features space then your classifiers are unlikely to correctly classify the samples its given during testing simply because it didn't know features existed there. 
First of all, I would use a modulo function to figure out the 'leftover' angle from 0 to 359 degrees. If it's required to use a while loop, then you must go through each element of your vector 'angle' individually, i.e. figure out if angle(1) is greater than or equal to 360 degrees, and then for angle(2), then angle(3) and so on... Hope this helps!
Thank you very much, it does help:). While loop is not required, I'm just very new to this and using matlab feels like performing open heart surgery and all I have is a baseball bat. 
You're passing a vector to the `while` loop check. The expression `angle &gt;= 360` returns `false` for each entry where `angle &lt; 360` and true everywhere else. The first value of `angle &gt;= 360` happens to be `false`, so the `while` loop sees `while false` and quits without doing anything. Further, inside your loop, you subtract 360 from **all** of the entries in `angle`, not just the ones that are greater than 360. I'll give you your steps in plain English, then show you how that gets "translated" to Matlab: 1. While any angle values are greater than or equal to 360, 2. Find all of the values that are greater than or equal to 360, and then 3. Subtract 360 from those values. The key in the first line is `any()`: 1. `while any(angle&gt;360)` Then do an implicit `find` with conditional indexing: 2\. `angle(angle&gt;=360) = ` The statement above finds `angle` where `angle &gt;= 360`. This is selecting those values to **update** them, as evidenced by the `=` sign after. Finally, 3\. `angle(angle&gt;=360) - 360;` This again finds `angle` where `angle &gt;= 360`, but this time uses them in a calculation - it takes all `angle` where `angle &gt;= 360` and subtracts 360 from those entries. Putting it all together: while any(angle&gt;360) angle(angle&gt;=360) = angle(angle&gt;=360) - 360; end
Thank you for taking the time to reply, that makes a lot of sense.
[removed]
Right, then in this case I would beat that heart with the modulo function. It will make your life easier in many programming situations!
When passing the independent testing data to the predict() method, I don’t standardise it. That might be the issue, as I was expecting it to be standardised automatically, as the model itself is trained using standardised data (standardise=true when calling fitcsvm). But that doesn’t explain why the issue appears to happen with Decision Trees, where I don’t standardise the inputs when training. When training, I don’t get such results actually. I get an accuracy of 93% or above. It’s only when testing I get an accuracy or 50% ish and that’s only because both the classifiers is predicting the same value for all observations. I have about 1000 training samples that I use when training and 1500 independent testing samples. But I also tested training using the independent testing set and testing on the training set, and I got the same result on both classifiers.
You have my eternal gratitude. Or until I die. Or I forget about it. Whichever comes first.
Found a solution: denDat = [0 4.39 3.62 4.53 3.83 4.36 4.14 4.06 4.31; 4.39 0 1.43 0.74 1.85 1.17 1.01 0.59 2.33; 3.62 1.43 0 1.94 1.02 0.83 1.32 1.38 2.80; 4.53 0.74 1.94 0 2.26 1.69 1.15 0.81 2.66; 3.83 1.85 1.02 2.26 0 1.27 1.32 1.67 2.68; 4.36 1.17 0.83 1.69 1.27 0 1.22 1.33 2.91; 4.14 1.01 1.32 1.15 1.32 1.22 0 0.62 2.41; 4.06 0.59 1.38 0.81 1.67 1.33 0.62 0 2.17; 4.31 2.33 2.80 2.66 2.68 2.91 2.41 2.17 0]; tree = seqlinkage(denDat,'complete') view(tree)
Just writing to say thanks for introducing me to the modulo function. It is indeed what I was looking for.
Much easier than this is angle = mod(angle,360)
Nothing
That worked beautifully, thanks!
Thanks!
As you probably know, since psi is a 2-dimensional array, psi(3,4) would give you the entry from the 3rd row and 4th column of psi. But indexing in Matlab is more flexible, and can be used to extract whole blocks of entries from a matrix; you needn't extract them one at a time. The code you've quoted uses two kinds of 'fancy' indexing. Firstly, instead of '3' we've got ':', which means that instead of asking for the 3rd row, you're asking for every row. Secondly, instead of '4' we've got '2:2:2*n_mesh'. This is potentially confusing in itself, but you may have seen that, e.g., 100:10:200 produces the array [100 110 120 130 140 150 160 170 180 190 200] Thus if n_mesh is, for instance, 5, then 2:2:2*n_mesh is 2:2:10, i.e., [2 4 6 8 10] and this is specifying which columns we want to extract. So to put it all together, tmp=psi(:,2:2:2*n_mesh) just grabs every second column from psi (from the 2nd column to the (2*n_mesh)th column) and plonks them in a new matrix, tmp.
Oooh, okay. I see now. I was trying to read that completely differently...thank you!
Yes, this sounds the same. If you can hold enough in memory to slide your window all the way across one dimension, you should never have to do any redundant reads. My explanation was extended for what happens if you don't have enough memory to do that. You also zeroed in on something I realized later about which dimension to slide across first.
see the following functions: [simplify](https://www.mathworks.com/help/symbolic/simplify.html) [expand](https://www.mathworks.com/help/symbolic/expand.html) [combine](https://www.mathworks.com/help/symbolic/combine.html) Each of those pages have more similar functions on the bottom. Your question is not clear, but those functions should be the tools you need to do what you want to do. 
I don’t think there is an easy way to change that. Although customizations like this are nice, I find that I leave the default color scheme and only make more subtle changes to the interface. Mainly because Matlab doesn’t offer enough control to do a full makeover. Right now I think the only two changes I have are the active line being a slightly different color and the right margin line is thicker and a dark blue. If you really want a look like you are going for, try to use the command line and vim to code. 
https://www.mathworks.com/matlabcentral/cody/
Jup. Cody is for you!
 reshape(z',[1,8]) Solved it myself
Maybe speak to your prof if everyone in class thinks the practicals leaves you under prepared. 
She's a witch!!!
OMG Thank you so much, it was "expand" what I was looking for, you just saved my life
regarding &gt;to see how I could improve on it, Your code seems generally fine, but i do have some tiny remarks; matlab (ML means machine learning to me) index starts 1, which is usually applied to anything for sake of consistency. I would let your run loop go from 1 to size(M,2)-1. this would reduce the complexity of the code, since all the run+1 can be replaced with run (and al run wiht run-1) Especially if you combine that with the fact that `ir - (ir -1)' ... is just 1. While we are at it though, do you know [matlabs indexing](https://nl.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html)? you can change whole sections of a matrix withouth looping over the elements. for instance your inner most loop for ic = (ir - (ir - 1) + run):size(M,2) M(ir,ic) = M(ir,ic) - M((ir - (ir - 1) + run),ic)*P; end can likely (not sure here) be replaced by its [vecotorised](https://nl.mathworks.com/help/matlab/matlab_prog/vectorization.html) form, increasing code clarity and reducing runtime: ic = (1 + run):size(M,2) M(ir,ic) = M(ir,ic) - M((ir - (ir - 1) + run),ic)*P;
make a structure array! :O. keep track of the number of times a script is loaded, and use that in place of the 1s from your example. you could for instance use exist in your "load script" like this: if ~exist('memoryLoadCounter','var') memoryLoadCounter = 1 ; else memoryLoadCounter = memoryLoadCounter + 1 ; end result(memoryLoadCounter).memoryLoad = ['Memory load ', num2str(memoryLoadCounter)] ;
Like `rref`? I pasted your code into a script, ran it, gave it your input `[1,2,3;4,5,6;7,8,9] `, and had it start on line 1. It errored on your line 5, because: (irs - 1 + run) is equal to zero and Matlab indexes at 1. But again, you can do `rref([1,2,3;4,5,6;7,8,9])` and get the answer. 
Have you encountered Gaussian elimination before? Rows are eliminated by 'subtracting' multiples of other rows, and this script does this from top to bottom, which is how I've always done it manually. By telling it to start on row 1, you asked it to eliminate the top row, which you'd never want in Gaussian elimination when working top to bottom. You'd always start on row 2, which is something I didn't think to clarify since this would never be used by someone who didn't know how Gaussian elimination works. Sorry for the misunderstanding, and thanks for that `rref()` tip!
A lot of these weird unnecessary identities and sums you're seeing are the result of transferring a manual technique, which works by looking visually at a matrix and making intuitive decisions, to a programming language. Starting `run` at 0 and writing `ir - (ir - 1)` instead of just `1` were just the most convenient ways to *write* the script, but they're not the most sensible way to keep a script written. Thanks for pointing them out, I'll make those changes! And I'll read into indexing and vectorisation, because I'm very new to MATLAB :)
To be explicit: if ~exist('results','var') results = stuct; else results(end+1) = struct; end You could also do it with a `try`/`catch` block: try results(end+1) = struct; catch results = struct; end
remove this stat! I typed it too, and deleted when i noticed the HomeworkQuestion tag XD . also don't use try catch when you can avoid it.
https://www.mathworks.com/help/matlab/ref/lu.html
lol yes, I've encountered Gaussian elimination. Let's go through your post: &gt; I end up solving a lot of relatively small systems of linear equations Okay. The reduced row echelon form "[may be viewed as an explicit solution of the linear system](https://en.wikipedia.org/wiki/Row_echelon_form#Systems_of_linear_equations)." Your code does not put the input matrix into reduced row echelon form *because* you only subtract multiples of other rows. Actual [Gaussian elimination](https://en.wikipedia.org/wiki/Gaussian_elimination) has " &gt; three types of elementary row operations: 1) Swapping two rows, 2) Multiplying a row by a non-zero number, 3) Adding a multiple of one row to another row. Using these operations, a matrix can always be transformed into an upper triangular matrix, and in fact one that is in row echelon form. Once all of the leading coefficients (the left-most non-zero entry in each row) are 1, and every column containing a leading coefficient has zeros elsewhere, the matrix is said to be in reduced row echelon form." Your script only does one of the three operations. You go on to say, &gt; I've had a suspicion for a while that ML has an in-built function that does this automatically Yes, the **r**educed **r**ow **e**chelon **f**orm command is `rref()`. &gt; It's worked every time I've tested it Depends on what your definition of "complete" is. It does not put `[1, 2, 3; 4, 5, 6; 7, 8, 9]` into a reduced row echelon form. The matrix `[1, 3, 5; 7, 11, 13; 17, 23, 29]` can be reduced to the identity matrix, but your script does not reduce it that far. This is one way to invert a matrix; append ("partition") a matrix with the identity matrix. When you convert to reduced row echelon form, the appended identity matrix will be converted to the matrix inverse of the original. Try: rref([[1, 3, 5; 7, 11, 13; 17, 23, 29], eye(3)]) [1, 3, 5; 7, 11, 13; 17, 23, 29]^(-1) And compare results. &gt; but in real applications I would need to arrange the system appropriately (pivot equation on top, as close to UTF as possible) Yes, that's because &gt; You'd always start on row 2, which is something I didn't think to clarify since this would never be used by someone who didn't know how Gaussian elimination works. The key word being that **you** would always start on row two. Your script counts on the user to manually reorder the matrix until it's in a suitable format that could give "correct" answers if it starts on row two. Speaking of which - why do you bother having the user pick a row on which to start, if it only works if you start on row two?? &gt; I'm posting here to see how I could improve on it, minimising the work I need to do to solve a linear system. Use `rref()`. 
No worries :) Just wanted to point out there's more than one way to skin a cat. 
I've used the `datenum` function for similar tasks. You tell it the format of your date, then it will create a number that corresponds to that date. You can then use `datetick` to modify the display of your axis. If it helps, here's a sample of my code (your dates are stored differently, but the general approach should work): Time=datenum(Date(:),'mm/dd/yyyy')+Hour./24; ha=gca; title(ha,figTitle); hold on; plot(ha,datenum(Time(:)),Var(eleNo,:),'k-'); datetick(ha,'x','mmmyyyy');
You have to have a plan. You can't start hacking away in Matlab and hope to accomplish anything. You say, &gt; I can do it fairly easily on paper And then turn around and say, in the same line, &gt; I'm not sure how to implement this in Matlab. Write the equations on paper, then try copying them exactly into Matlab. See what happens. That's probably the best approach. &gt; How would I plot a basic oval track With `plot()`. &gt; and split it into four sections, ie two straights and two constant radius corners? Split how? Graphically split? Split some other way? &gt; Do I plot the whole oval and then code the equations of motion or do I do a section at a time and then sum them together? Depends on what you want to do. I would point out that drawing a picture (plotting) and doing math (solving equations of motion) are two totally separate concepts that don't have anything to do with each other beyond the fact that they might both use some position data. &gt; I hope I've explained what I need help on clearly enough. You have not. You have [data] that you want to [do stuff with]. You have not posted data, you have not posted equations, you have not posted your attempt to write the equations in Matlab, and you haven't really explained the actual problem you're trying to solve, either. You simply said, &gt; My main problem is I don't know how to apply the equations of motion to the 'car' along each segment of the track. What equations of motion? What 'car'? Are you trying to solve equations of motion or are you trying to solve for forces? I think this might actually be your biggest problem. *Define what it is you're trying to do. Have a plan.* I would guess you're *actually* trying to solve for forces, in which case you would want a linear/tangential force of `F = ma` and a centripetal force of `F = (m*v^2)/r`. &gt; based on reading other literature, it seems that the common method is to pick two points with the smallest radius I think you're misunderstanding here. Points are points. They don't have a radius. I think the "literature" is referring to how to find a segment, given a bunch of points, in which case the succeeding point would be the point that has the shortest distance to the current point. The easier way to do this is to just have all the points in an array, which it seems like you do already. &gt; it seems that the common method is to pick two points with the smallest radius, as that defines the apex of two corners connected by a straight, Two points make a line, not a curve. They're not corners, they're just points. &gt; you then work out the acceleration based on solving the equations of motion starting from one apex to the other, Again, I think you're confused as to what you're solving. In order to "solve equations of motion" or find accelerations from two points in space, you need something more. You have to have a drive cycle, or a target speed, or something. You could traverse two points at 1 mile per hour or 100, or 200, etc. There's nothing to solve with just two points. &gt; and then go the other way to work out the maximum speed the car can take that corner, and therefore workout the point along the straight in which the car has to brake. Again, I think this is all depending on some kind of a drive cycle. At a minimum, if you're trying to determine the speed at which a car can corner, you need to take *three* points, find the radius of curvature that fits those *three* points, then max tire friction force, then the peak centripetal acceleration (again: `(m*v^2)/r`) given the tire force, etc. I think that's what you're trying to solve. &gt; Again, I can do it fairly easily on paper, but I'm not sure how to implement this in Matlab. Again, make a plan. Do the first 5 or 10 points on paper, by hand. Then try just copying and pasting it exactly into Matlab. Verify your hand results. Look for the pattern, probably something like `F(i) = F(i-1) + &lt;stuff&gt;;` and then code the loop.
Even better, I vote, is: reshape(z,1,[]) You can use [] for one dimension in reshape and it will figure out the appropriate number.
I am currently developing a Quasi-Steady-State lap time simulator as part of my Master Thesis. I have worked with Formula Student and currently am working in a LMP3 manufacturer were I validated my simulator. &gt; assuming constant velocity while cornering, and therefore tangential acceleration will be zero Be careful with this. Steady-state is the condition the car is behaving when at. the appex but this is not the case for QUASI-Steady-State. In PURE steady-state there is only lateral acceleration, right! Altough, the QUASI brings a new way to simulate: you say the car as longitudinal AND lateral acceleration at the same time. To know how you can have Ay and Ax at the same time is all about the tyres friction circle or the GG diagram. GG diagrams are function of the tyres and the velocity the vehicle is describing in a certain point. This is explained in any VD important book. Concerning the way to describe the track. The trajectory is an input to the Lap Time Simulator calculations. You say you already have real trajectory data so you can use it (each sample data is a segment) if you know the radius of curvature. What you have to do is: know the maximum possible velocity in each segment (maxCorVel) and then the velocity will be: vel(i) = min(maxCorVel, vel(i-1) + Ax(i-1) + Deltatime(i-1)) where Deltatime(i-1) is the amount of time expended travelling the previous segment. Remember, in QUASI-SS the tangencial accelerations are not necessarily zero! In order to change the value of velocity from on segment to the next, there must be tangencial acceleration (non-uniform circular motion). If you want to knoe more details in calculating the Ax and Ay in each segment please ask. I can also send you "state of the art" on the subject. Don't worry about matlab, it's very straight forward to use. My simulation is done in a single script with only 2 extra functions.
Heretic!
One years worth of differences in MATLAB are minimal. Some of new newer versions can be a bit looser with the math, and at worst one of the matlab functions you use doesn't exist in a older version. I did have problems going backwards, but that was from 2016a to 2010b. I had to change two matlab functions only to get the code to work. A way you can actually test though would be to compile the code and run it on a 2015b MCR, which you can get for free. If it works, great. If not, run it with the windows command line to spit out whatever errors pop up.
would that I do via some sort of count? So every time a script it loaded, it would count one. Then use the index of my for loop in replacement of the the 1s? What does "exist" do and where would I implement this?
Well I've already experienced some compatibility issues with the code since implicit vector expansion was used, which had to be made more explicit with bsxfun or repmat till 2016b. I've replaced some implicit calculations but I'm just worried that I've missed some, so I was wondering if there was a quick way to check by simply running the code.
&gt;would that I do via some sort of count? yes &gt; So every time a script it loaded, it would count one. Then use the index of my for loop in replacement of the the 1s? well, i would use the count from everytime your script is loaded, OR use the index of your for loop (idk which for loop though). doing both seems unnecesairy. &gt; What does "exist" do and where would I implement this? It can checks wether a variable already exists, which is necesairy if you count how many times you load a script, in order to increment a value every time exept the first, where you have to set it to one. to do something when the variable seven exists, do if exist('seven','var') something(); end
Context please?
Class
 index1 = find(ismember(Compare,value1),n); The above line finds the first `n` matches, however `n` hasn't been set in the code you included. If you want *all* the matches, then just remove the `,n` to get: index1 = find(ismember(Compare,value1)); Otherwise, if you do want only `n` matches, then make sure to set the value of `n`.
I used it for a housing class where we had to read excel ~~dikes~~ files, attenuate x ray signals, produce radon transforms and add nose to see the reconstructed image would be, and simulate MRI images. For our final project, we used user prompts to triangulate anomalies in tissue and enlarge it. In a later class, sometimes I used excel, but in one certain application ast the end, I used the xlsread() to take values from a TI84 list and filter it with my own code (filter() didn't work for me) and study trends. Oddly enough, it looks like I'll be doing sound manipulation and signal processing next year/semester for a signals processing class. If I have to do this stuff again as a job, I definitely won't shy away from it now
Everything. Most frequently, just as a calculator, but also as a programming language for all kinds of mathematical analysis and calculations and for producing graphs and animations. When I was a student in the mid 1980s, having calculators with extensive capabilities still seemed pretty new and exciting. We would debate the merits of different models from HP, Sharp, and TI, and I starting collecting a wish list of all the capabilities I'd want in an ideal calculator. Then we got to use Matlab in an engineering class, and I found that it included more of the features on my ideal calculator list than any model on the market. The only place where one of my calculators beats Matlab is that if I have a variable B defined, and I want to multiply it by seven, one of my calculators lets me just punch in 7B = whereas matlab requires an * as well.
Personally for me: 1. Quick algorithm tests for Python projects (I can prototype an idea much faster in Matlab than I can in Python, particularly if it involves matrix manipulation) 2. Producing figures in some cases (people don’t realize how much control you have over exporting high res figures) 3. Messing around with math. It’s cool to code up a simple Collatz function and visualize things related to the Collatz conjecture. Or get creative and see what interesting functions you can come up with. 4. Previously for research — particle simulations, fluid dynamics, FEM, biological sequence analysis, data science 
Any PCIe GPU will work with Matlab. The only limitations are your budget. 
I am looking for good price / performance. There are tons of cards out there. 
its used a lot in algo/quant trading (why im studying it)
thank you so much, it works now :D 
nvm I just made X a matrix with both time series. Is that the only way?
Only Nvidia though, right? I mean for calculations
Yes, my understanding is that only Nvidia CUDA cards will work for GPU acceleration of Matlab code. 
Prototyping image and audio processing programs