Former student here. I still have the student version and I've been out of school for 6 years. If you aren't doing commercial work or getting paid for what you are doing then the student version is a great way to access the software cheaply.
Sweet, I didn't know that it would let you do that. Did you get it through your school or on your own? My university requires a renewal every September to keep the license working.
ctrl-f xtickangle. to the top with you. also think circstats should be a default, but it's pretty niche.
The impression I'm getting is as a double that is approximately something like 75643.00432 
Yep. "A serial date number represents the whole and fractional number of days from a fixed, preset date (January 0, 0000) in the proleptic ISO calendar." https://www.mathworks.com/help/matlab/ref/datenum.html;jsessionid=54421ee741b0d5ea12a325568b85
circstats is great
EDIT: SORRY! I'm stupid - I just realised you didn't write 2000, you wrote 0000, you're no doubt right here. EDIT2: shit, I'm double-wrong it must have been 001 BC because all my days are out by 1... and a leap-hour apparently ... interesting. Original: Thanks - I'v been digging too, but it seems to me like the number they really use is 31 Dec, 001 AD Don't ask me why 'that' date, but it really seems that way 
I use hline and vline all the time. Amazing how simple and useful it is. 
help isnan
Maybe have a look at timetables?
 X = 1:4 Y = [ 1 2 NaN 1 ] F = find( not( isnan( Y ))) plot( X(F), Y(F) ) perfect, thanks
MATLAB may give you this tooltip itself, but you don't need find thanks to logical indexing. F = ~isnan(Y); should give you the same thing and be quicker.
cool thanks. no it was just a guess out of curiousity why is ~ faster than not ? is it not just syntactic sugar for the same thing ? 
 fuf Super convenient when you need to process lots of data in separate files but keep them organized while you're at it. 
Oh I don't know that it is; I meant it is faster to not use find. Using find is just another calculation step that's unnecessary if you can use logical indexing. I just enjoy the compactness of ~ over not.
so the ~ makes it negated AND a 'logical' and a matrix of logicals Matlab interprets as 'pick these' ?...
The isnan function outputs a logical array of equal size to the input array. The not or ~ makes it negated. Yes that's the essence of logical indexing.
This should definitely come standard. I've never used it because I independently created my own. I wonder how many other people have done the same. 
No worries! Best way to learn is to make lots of mistakes. Keep at it.
I developed an algorithm to serial read/write any device that uses checksums in its datastream. I should probably upload it...
[The GUI Layout Toolbox](https://www.mathworks.com/matlabcentral/fileexchange/47982-gui-layout-toolbox). Layout management classes seem so fundamental to any GUI framework that it's mystifying that they aren't included in MATLAB.
sum (Ismember(A,'b'). Does this work?
Ah ok, I guess I need to get more familiar with the syntax of matlab. Thanks once again!
I got a few ways; You can sort a cell array of strings using sort, then look where two neighbouring elements are unequal. you can convert the strings to doubles (cellfun(@double,A), or cellfun(@double,A,'uni',0) when theres more than one character per string) and do numberstuff on those. Use unique and two nested cellfuns, going over both the classes (output of unique) and over your cellarray with data, and use == and sum (note that although this might look efficients, cellfuns are worse than loops computationally and readabilityly ): classes = unique(A) ; cellfun(@(c) nnz(cellfun(@(a) a==c,A)),classes)
You could use the menu function, or a button group.
That doesn't exist for the dashboard blocks (but hopefully in the future it will). However, you can use custom masks to do this. It won't be in the canvas like the dashboard blocks are, it will be associated with a subsystem (double click on the subsystem and opens the parameter list). You could also use an empty subsystem and set the openFcn callback to open a menu function or button group as was previously suggested. 
Might I not just use the indexes from unique? The problem then becomes finding the integers with the highest count I'm very Noob to Matlab and I can probaly work this out... I just assumed there'd be a standard way people do stuff like this, to find the best choice of categories for displaying data etc.
That sentence is actually quite funny to me, because &gt;I just assumed there'd be a standard way people do stuff like this kind of implies &gt;I'm very Noob to Matlab XD. try the max function and its second output. use it as an index to classes
Curious... How does the performance of 'glob' compare to the recently added recursive seach via 'dir'? I have code that often needs to do time consuming directory searches, which I do using dir with recursive subfolder search. I'm wondering if it's possible that 'glob' could do it any faster.
The two toolboxes I use extensively are: [geom3d](https://nl.mathworks.com/matlabcentral/fileexchange/24484-geom3d): Creation, transformations, algorithms and visualization of geometrical 3D primitives, such as points, lines, planes, polyhedra, circles and spheres. [iso2mesh](http://iso2mesh.sourceforge.net/cgi-bin/index.cgi) a mesh generation and processing toolbox. 
Can you post the content of the script... with line numbers pref ;)
In recent versions of Matlab (2016a or b) Matlab includes jsonencode() and jsondecode() functions. They're intended just for serialization of data, so their output does not include vertical white space for human-readability. However, you can utilize a pretty-printer they bundle in with Matlab.
Yes, here it is: 1 % script to move all file with same cell # into the folder with that cell # 2 3 cell_num = 7; %input the number of cells you imaged here 4 5 % make all folders 6 for i=1:cell_num 7 mkdir(sprintf('cell-%i',i)) 8 end 9 %% 10 11 clear 12 13 % get a list of all the contents in this directory 14 contents = dir; 15 contents = remove_dot_dir(contents); 16 17 % segregate directories 18 19 folder_ind = find(vertcat(contents.isdir)==1); 20 folders = contents(folder_ind); 21 22 files_ind = find(vertcat(contents.isdir)==0); 23 files = contents(files_ind); 24 25 pathname = pwd; 26 27 % cycle through all files and move them to appropriate folder 28 for i=1:length(files) 29 for j=1:length(contents) 30 if ~isempty(strfind(files(i).name,sprintf('cell-%i-',j))) 31 if ispc == 0 % because macs are dumb 32 source = sprintf('%s/%s',pathname,files(i).name); 33 destination = sprintf('%s/%s',pathname,sprintf('cell-%i',j)); 34 movefile(source, destination) 35 else 36 movefile(files(i).name,sprintf('cell-%i',j)) %if it finds the string, move the file 37 end 38 end 39 end 40 end
I think I am just going to go with inserting a Manual Variant Source and then connecting the inputs to 6 constant blocks...
This will be easier if you convert it from a cell array of character vectors to a string array. You can then do "tabulate" or "mode". So e.g.: A = { 'a' ; 'a' ; 'c' ; 'b' ; 'b' ; 'b' }; tabulate(string(A)); mode(string(A)); You can also save the output from 'tabulate' and sort it by frequency etc., e.g. B = tabulate(string(A));
This is an efficient way to calculate it // Calculate [u,ia,iu]=unique(A); // get uniques and also calculate number indexes for the strings from (1 to length) c=hist(iu,1:length(ia)); // count the indexes (1 to length) into buckets [_,o]=sort(c,'descend'); // sort the counts // Display order of items A(ia(o)) // Display counts c(o) This is pretty efficient and does what needed 
for one element, but the point is to calculate what the most common string is, pretending you don't already know, and to display the rank order
ah, I should probably add I'm technically using 'GNU Octave' - but the community is dead so I came here instead not sure there's a string-array in octave, string function is not present...
I have no idea. I do not use Matlab as much as I used to so I am less up to date on the newest features. Plus, I am usually a version of two behind. The best way to answer your question though is to test it!
The easiest and most elegant way is to convert the array in to a categorical array available in newer versions of matlab (since around 2014 iirc) and then to call the summary function on that categorical array. See https://uk.mathworks.com/help/matlab/matlab_prog/create-categorical-arrays.html for a good starting point
"open" makes a call to the operating system, as if you had double clicked on whatever file you specify. If you want to edit the script, just use the "edit" command, which makes Matlab directly open the script for editing. 
He meant the script where the error occurs, but it's not really relevant anyway. What might be relevant is the name of the same script, since it seems to contain some character that's pissing Matlab off. 
Good catch. This is the answer.
My code looks so stupid because I was trying to debug this error. Written more concisely I still get the error.
Thanks. Somehow I've used it all these years without knowing that!
Oh, right, duh... But thanks. I'll take a look at it.
Assuming X and theta are vectors, your calculation of b is doing element wise multiplication of two 2x1 vectors. Element wise multiplication (.*) will multiply each element of the X(i:2) vector by its corresponding value in theta and return a vector of the same size. p.s. using i for indexing is bad practice in MATLAB as i is also used for complex numbers.
The error is because you are indexing into X incorrectly. X (i:1) will return an empty matrix unless i equals 1. I believe that you wanted to write something like X (i,1) instead.
Hm, think you are right. Thank you.
Thanks, I think you are right. I will try it and post in this thread.
Good advice on not using i. I still have a hard time not using it. I learned MATLAB in a college and my math professor always used i.
I got it, thanks guys. Needed both you. Had some other bugs as well...
Understand that, at the hardware level, you're likely writing through only one data bus. 
For depth of 2, it works out for you because you're feeding the midpoints of the original triangle in to create your next triangle. For successive depths, however, you're still only grabbing the midpoints of the triangle you feed in (for depth 3, the midpoints of the center triangle). To refine one of the outside triangle, you would need to grab the two of your original midpoints and then one of the outside points. You're almost there and you have most of the structure needed to do this already--see how you can vary your inputs to your recursive call and how many times you call your function. Edit: Looking into it more, it seems as if you have a sort of +1 error with defining what your depth = 1 case is--it's a simple fix with your conditional statements. My depth numbers given above are based on your original definition of the depth = 1 output.
to make a string in Matlab, use apostrophes, not quotes. you also don't need to have it in parentheses. It should look something like this, and the text inside the apostrophes will turn purple. targetdirectory = 'C:\Toolboxes\'; 
look into the documentation of datastore and tall arrays. Datastores are essentially a database created from your files that is much faster than reading and writing the data. Tall arrays take that datastore and make an array out of it which can be manipulated just like a regular array, but only a small portion of the array, or in this case the datastore is loaded into the system memory. the rest is done on the hard drive. https://www.mathworks.com/help/matlab/ref/datastore.html, https://www.mathworks.com/help/matlab/tall-arrays.html, https://www.mathworks.com/help/matlab/large-files-and-big-data.html
Thank you, clear answer. Finally finished my homework after 4 hours.
Apostrophes? No, you use single quotes. 
There is voice chat channel since Discord is created for gaming community at first, otherwise it's yet another IRC with fancy multimedia and avatar ofc
It seems like theres a good chance this is the case, though this then begs the question of whether or not it is possible to break up the data into chunks and read/write each chunk over a different hardware bus. Also, Im not convinced that its not possible to read/write faster on a particular bus. I ran some speed checks using "dd" (it is a Linux machine) and for large continuous blocks of data I was getting ~550 MB/s, which is pretty much the maximum throughout you can practically expect over a SATA3 connection (theoretical max is 600 MB/s). When I time fread/fwrite in Matlab I am only getting about 100 MB/s, which (while not horrible) is ~5x slower than what the disk is capable of.. This is what makes me think the bottle neck is in forcing everything to be processed in a single thread, rather than (somehow) splitting it up over multiple ones, though perhaps there is something else explaining this 5x slowdown.
Thanks for the suggestion. Short version: I might have to look into using this (again). Long version: I had actually previously looked at using datastores and tall arrays, though ultimately decided not to use them due to a rather large limitation when using them with custom datatypes (which I would be)... Basically, if you have a custom datastore typo and want to generate a tall array from it you have to specify your own data reading function. This in and of itself is no problem, BUT The Mathworks has implemented this the data loading function must initially load the ENTIRE dataset into memory (presumably to memory map it), only to immediately clear it from memory once the whole thing is loaded (after which you can use the tall array as intended). This means that you have to fit the entire dataset into memory when loading it. (Personally, as much as I am a fan of Matlab, I find it completely fucking ridiculous that their premier general "Big Data" solution is limited to what fits in system memory, which in my opinion pretty much automatically makes it not "Big Data" at all, but I digress...) At any rate, The system I am using is a bit strange in that it has a substantial amount of physical memory, but it cant really extend beyond this using page files and swap space. So, at the time (back when the code was less optimized and data I/O was more negligible) I figured there was no point using tall arrays when it required (at least momentarily) the same amount of memory as was required to just load the whole dataset into memory and directly work on it from there (which is ultimately what I ended up ultimately doing, since 1) I had the memory and 2) the way I need the data split up to analyze it quickly requires non-sequential writes, which hugely cripples fread/fwrite performance). If I could get the same performance during the analysis and largely eliminate any I/O time that would definitely be a good reason to look into tis again.
You're talking as if you're writing to multiple files. If that's the case, and each file is on a different i/o channel, then this might work. But if you're talking about a single file, which lives physically on a single device, no. Also there's a big difference between using dd and printf. Are you writing binary data? Have you tried fwrite? Disk bandwidth is only part of the issue. 
See the [matlab documentation on functions](https://www.mathworks.com/help/matlab/ref/function.html). You don't always need an "end" after declaring a function, though it's good practice. For your second question, you can reference local functions, defined later via a function statement, in the body of a script; in this instance, we also could've defined *f* earlier in the script with the function handle: f = @(x,y) -(1/x+1/2)y; and then called it after. In the latter case, you have to establish *f* before you call it. 
Sorry if it's a dumb question, but why don't I get an error writing a function after it's called (as you said, local functions). Or does Matlab read all the code once before running it? 
I assume the whole script or something is parsed before running, but don't know exactly. Maybe someone else knows. 
It looks like you are trying to get the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product) of the sets consisting of all permutations of several vectors. You already know how to find the permutations (`perms`), and I found [some ways to get Cartesian product in Matlab](https://stackoverflow.com/questions/9834254/cartesian-product-in-matlab) on StackOverflow. 
So it's not quite the same as the Cartesian Product. The Cartesian product finds each unique pairing, but that's not quite the same as what I want. Notice I have 1 paired with 1 twice, but because I paired 2 with 2 the first time and then 2 with 3 the second. Thus it's more I'm looking for all the unique "mappings" of vectors
&gt; Also there's a big difference between using dd and printf. Are you writing binary data? Have you tried fwrite? Disk bandwidth is only part of the issue. As the title, the main post, and my previous reply all indicate: I am using fread and fwrite to load/save the binary data. I am not using printf (or any other command that requires converting to ascii for that matter). I only used dd to test for the maximum transfer speed I could hope to get (it isn't being called by the Matlab program or anything like that). Also, to reiterate (in case it wasn't clear in my original post): I am reading/writing the entire file as one continuous block with a single call to fread/fwrite, which (based on what I saw when googling the issue) is pretty much the best case scenario for maximizing speed with fread and fwrite. As such, I don't see any good reason why fread/fwrite shouldn't be able to completely use the available bandwidth and get the same speeds (or at lease speeds very close) to what I can get with dd, unless some other part of the process is getting slowed down. &gt; You're talking as if you're writing to multiple files. If that's the case, and each file is on a different i/o channel, then this might work. But if you're talking about a single file, which lives physically on a single device, no. It is a single file on a single disk (well, technically thats not true - I have been told the disk is actually a RAID array with 4 striped SSD's, though idk specific details about them). However, I know the exact byte locations from within the file I want to read from at any given time, so my thought was more along the lines of: * Read Bytes 0 to 1073741823 on bus 1 * Read bytes 1073741824 to 2147483647 on bus 2 * Read bytes 2147483648 to 3221225472 on bus 3, etc. (Note: it wouldn't necessarily have to be split up in 1GB chunks, that's just what I chose here). It was my understanding that the only reason why you could use muliple busses to read different files but notto read the same file was to avoid accessing the same exact storage location simultaniosly by 2 processes, which tends to cause data corruption. Splitting it up like this avoids that issue, and seems like to should be identical to reading two files that happen to be right next to each other
Thanks!
I'm suggesting the Cartesian product of sets of vectors, not of the individual components. Each set would be formed by finding all permutations of the vector. Looking at your example more closely, I see that it's really only the Cartesian product of {`[1 2 3]'`} and {`perms([1 2 3]')`}. I'm not really clear on what your desired output would be for more than two vectors though, so I don't know if you could keep going with Cartesian products or not.
&gt; using i for indexing is bad practice in MATLAB as i is also used for complex numbers. I mean, you can specify imaginary units with *j* instead of *i* (if there's confusion with the often-natural first index of *i*), or just use complex(a,b)
I didn't know it existed, nice tool thanks !
[combvec](https://mathworks.com/help/nnet/ref/combvec.html)... unfortunately part of the neural network toolbox, not base matlab.
Sorry I wasn't more explicit, it's bad practice to use i or j because it can shadow predefined [variables](https://nl.mathworks.com/matlabcentral/answers/46648-using-i-and-j-as-variables). I typically use ii and jj for indexing as that will work in all scenarios.
I don't think MATLAB can help with that
The audioplayer and audiorecorder classes should be able to do that when using non-blocking methods.
I did this once using two instances of matlab, to estimate the size of the room i was in by finding the resonance frequencies (it was fun). if you run the command !matlab -nojvm -r "yourscript.m" &amp; a new matlab instance is ran without stopping the current instance. I never synchonised the two instances though, but for my purpose that was fine, i just used a little pause to wait some time. The lowest level easy to implement syncing options i can come up with is to save a mat file in the callee with a time some seconds in the future, and have both scripts continue on that time. 
It's the same thing, at least on US keyboards. `'`. The only thing that looks even remotely similar is the [grave accent](https://en.wikipedia.org/wiki/Grave_accent), which is ` by/with the tilde `~` key.
**Grave accent** The grave accent ( ` ) (US: or UK: ) is a diacritical mark in many written languages, including Breton, Catalan, Corsican, Dutch, Emilian-Romagnol, French, Frisian, Greek (until 1982; see polytonic orthography), Haitian Creole, Italian, Mohawk, Occitan, Portuguese, Ligurian, Scottish Gaelic, Vietnamese, Welsh, Romansh, and Yoruba. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
most of the scans and file-handling in matlab are total butt - for big datasets you really want it in a .mat format, it loads them super quick. What I did recently and it works sweet is (do you know C or Java?)... Process your data file in Java, (or your prefered processing language) - pick out those lines using a straight loop and Grep or whatever or String.splits if Java, and write them out to a .mat file. They're really not very hard. The format is dead simple.It just looks weird at first .mat files load like a *-ing charm - VERY fast To see the format you need, run in matlab clear X= 1:10; Y= 21:30; Save sample.mat And you can see how simple the format is. I can process a 0.5 gig file in like... 60 seconds, and load in 60 seconds. Do you see what I mean? write back if you need help and I'll do some java code for you, but you should be able to figure it out. This works really efficiently for me.
That's correct. Are you asking me? I wasn't uncertain, myself. 
What you want to use is the MATLAB concept of [logical indexing](https://blogs.mathworks.com/loren/2013/02/20/logical-indexing-multiple-conditions/). For instance, to get all of the day 2, grade 3 points in the array (A) above you could just say: A23 = A(A(:,1) == 2 &amp; A(:,2) == 3, :); Once you have them, you can get the count simply (by using size). 
Use Matlab's [tables](https://mathworks.com/help/matlab/tables.html) data format and [rowfun()](https://mathworks.com/help/matlab/ref/rowfun.html) with the 'GroupingVariables' argument to do your whole computation in a single line. I don't know if octave has that functionality already.
That's cool, but my aim is really to turn this into some structure that represents All these values, suitable for plotting, e.g. (I've made up values to look interesting, dont correspond to above) This is supposed to look like 3 columns, so ( Day 1, Grade 3 =&gt; 1 ) D G Sum 1 1 5 1 2 0 1 3 1 1 4 0 1 5 0 2 1 2 Which I might easily plot in surf OR something more like a matrix like .... So ( day 1, grade 3 =&gt; 1) grade 1 2 3 4 5 day ------------------------ 1 | 5 0 1 0 0 2 | 0 1 0 2 0 3 I'm fairly clueless as to the best practises to represent this stuff, but it looks like people really like 1D columns so I'd need to 'cross' days against grades or... I dont know... something
You're actually a life saver. Thanks so much!
Say it with vote-ups bro ;) Glad it helped you
You should never be expecting floating point results to be the same. http://floating-point-gui.de/errors/comparison/ With that said, it is unusual that the same code with the same inputs would have different outputs on the two platforms.
Keep them in an array if you have your variables: day, grade , count its a 3D array. You will always isolate your 3rd variable. Try commands surf , mesh , pcolor . also take off the gridlines as they get annoying sometimes . h = surf(...); set(h,'edgecolor','none'); 
The differences are small in comparison but nothing is changed. I wonder if there is some rounding differences though. example: 0.528686259 vs 0.528688951 1.454382997 vs. 1.454389675 
Your errors are too large to be floating point round off problems. Floating point number errors should be closer to E-11 or so Are you doing any numerical processes that involve some random step sizes, maybe? Maybe you could post some of the script to pastebin. 
Its mostly image processing: functions included are FFT, IFFT, RGB Profile switching , reshape . Currently retesting results in 2017a and previously on MATLAB 2015b on Mac.
Sorry cant post code I will test on other PCs to see if its a version difference. Thank you though! 
thanks, I'm stuggling right now to figure out how to turn the first 2 columns into the 3rd count column I got as far as unique( [D, G], 'rows' ) to get unqiue 'keys' Now I'm trying to turn those into counts... EDIT: Okay, I used [a,b,c] = unique( [D,G], 'rows' ) To get list of indexes and count = hist( ... ) to count the indexes 
Do you store them as 1 set? or have seperate arrays for each type? D = [ all days ] ; G = [ all grades ] ; or data = [ D, G, C]? 
I used separate arrays, I think that's more the 'done thing' with Matlab style... &gt; data = [ D, G, C] I'm virtually there now I think, counting the indexes really helped, now I'm battling with GNU-octave's crappy implementation of 3D plots and things Thanks for help
Interested if this is possible in MATLAB or a different code language platform. Thanks.
What is count?
&gt; count = hist( ... ) to count the indexes It's cool, thanks I got most everything i needed now and marked Q solved ... I'm just battling the terrible documentation and lack of any kind of community for GNU Octave Graphics now... 
done in MATLAB: https://www.youtube.com/watch?v=6ijArKE8vKU
Have you looked into Matlab movies? That should be what you want. 
You want to use `num2cell` instead of `mat2cell`
/u/weed_o_whirler is right. But I'd also add that this isn't something you often should need to do. If you're reference numerical data that's already in a matrix, it's usually best to just reference it directly. 
need to boxplot a cell-array of different sized vectors, each based on date-num from a date-num matrix column
Oh. Plotting. Carry on then, making nice plots is one of those situations where most code rules need to be ignored. 
Rather than based on time, why not just use the index number? In your screenshot, that's the 700 numbers on the far left. You still get the time stamp and can look at it, but you can just figure out x number of indices is approx 10 min then take chunks of that.
That was my first thought, but &gt; However, every half hour or so, the machine took an extra second to make a measurement, which led to a few extra measurements being made, so the data set isn't divisible by the number of iterations per 5 or 10 minutes (20 and 40, respectively). I'm guessing it would also mean over time, those iterations would add up and eventually some averages would be calculated wrong. Basically I'd end up with a few averages being calculated wrong, and about 4 or 5 extra datapoints that wouldn't fit into a 5 minute block
Why not parse the data in your first column into a time value, perhaps seconds, and then just iterate through each row until you find the time frame you want to sample through. If time(rowy)-time(rowx) &gt;= time_i_want average_speed = Average(mat(x:y,2)); rowx = rowy+1; End Meanwhile, this is running in some loop iterating through each row.
Hi all! I am using the boxplot function and I don't understand why this sometimes happens. It's not a box! What do I do now? Thanks for any suggestions :-)
share the code for us to reproduce the error and have a chance to dedbug it. also PNG is a more suitable dataformat for this type of images. 
It is a simple boxplot function, and I use it a few times in my Code. Sometimes it works fine, sometimes it looks like that. I don't think that the code is the problem. Maybe the sample data?
Maybe, maybe not. We have no chance of figuring that out if we can't reproduce the problem. 
The Code is a simple boxplot function: boxplot([data1 data2 data3], 'notch', 'on')
boxplot([data1 data2 data3], 'notch', 'on')
This happens if you have a weird distribution/not enough points: notches depend on number of samples whereas other parts of the box (median and quartiles) don't... you can try to deactivate the notch (look at help) so that it doesn't happen. Or you can try [gramm](https://github.com/piermorel/gramm) for better looking boxplots (won't solve notch issue).
Are you trying to *smooth* the data or are you trying to *downsample* the data? For example, if you were trying to *smooth* the data, then you might have output 1 be input (0-5min), and output 2 be (0.1-5.1 min), and output 3 be (0.2-5.2 min), etc. If you're trying to downsample the data, then output 1 would be (0-5min), output 2 would be (5-10min), output 3 would be (10-15min), etc. Also, as you have noted, you don't have "clean" 5 or 10 minute intervals; your occasional odd sample means that you'll have to decide if you want a particular interval to be the largest interval that goes **up to** your sample interval, or if you want it to be the smallest interval that **includes** your sample interval. This is a requirement that needs to be met regardless of whether you want to smooth or downsample. I would convert your timestamps to `datenum` values; you use an "exotic" (to the US) timestamp in that it's dd/mm/yyyy. Once you have the `datenum` values, which are in **days**, you can use `diff` to get the incremental change. Multiply by `24*60` to get minutes, or `24*3600` to get seconds, and then run a loop to get your samples. Something like (all typed by hand into Reddit, not Matlab, so please forgive any errors) timeNums = datenum(timeColumn); dT = diff(timeNums)*24*60; tMax = 5; % minutes startIndex = 1; endLoop = false; nSamples = numel(dT); dataOut = []; while true endIndex = startIndex + 1; totalTime = sum(dT(startIndex:endIndex)); while totalTime&lt;tMax endIndex = endIndex + 1; if endIndex &gt; nSamples endLoop = true; break; end totalTime = sum(dT(startIndex:endIndex)); end if endLoop break; end dataOut(end+1) = mean(dataIn(startIndex:endIndex)); %startIndex = startIndex+1; % For smoothing startIndex = endIndex + 1; % For downsampling end This of course uses loops, which is the bane of Matlab, but it doesn't sound like you have much data to process so the time should be pretty negligible. 
Ive found that finding MATLAB help online is all about using the right nomenclature. A 'matrix column' is really a vector. I bet that if you searched Google with that word, you'd have found your answer.
Didn't anybody else notice that the plots look like 2 headless women, with their cleavage popping out!!? Hidden MATLAB feature people. 
Simple cast the date/time to an integer using `datenum(datestring)`. Each point should correspond to one sec, so you just find the indices that correspondence to your range and take the avg... You don't even need for loops. 
Hard to say without knowing what Hole1_mid is 
[Matlab Central](https://mathworks.com/matlabcentral/fileexchange/) file exchange.
impossible to advise without specifics.
1. Read documentation 2. Do the needful 
I've used [memmapfile](https://www.mathworks.com/help/matlab/ref/memmapfile.html?requestedDomain=www.mathworks.com) with good results. 
Or host it on github and publish to file exchange.
I think you might be looking into the figure just a bit too much
Absolutely, that's the better solution, as it makes the update process simpler for everyone! I only wish that the GitHub link would be clearer on the file exchange so that people would create GitHub issues instead of file exchange comments which are untrackable!
[The Tall Object class](https://www.mathworks.com/help/matlab/import_export/tall-arrays.html?s_tid=gn_loc_drop) was introduced specifically to deal with this problem for large data sets. There's some more signaling that you'll need to provide, but they're generally flexible. 
Doc timetables Looks like you have the full datenum for every row so you can use timetables and they have lots of functions for breaking data into time sets.
c is determining the color and is assigning one color to each point. It is scaling the single values that you provide for each point to the default [colormap](https://octave.sourceforge.io/octave/function/colormap.html). You can specify the colors more easily if you give it a 100x3 matrix where each column corresponds to a point the rows correspond to the R, G, B channels respectively.
Does your lab/uni have a cluster you can send big jobs to?
When you hand in a vector for color (as opposed to an array), it linearly maps all of the available colors in the color map to the range of `c`. So, in your case you're using a `colormap` like `jet` in which negative values are blue, positive numbers are `red` and there is a rainbow between. Since you are making `c = x*y` then when x and y are both really positive/negative, it is very red, when one is very negative and the other positive, then they will be blue. When both close to 0, yellow/green. 
It's basically just saying that you define your grid by edges, i.e., [1,2] would be a bin of width 1 centered at 1.5. Then you put your edges for each dimension in a single cell. Try playing with: hist3([.5 1.5; .5 1.5; .5 2.5; 1.5 2.5], 'edges', {0:2 1:3})
Seems like you are looking for Interpolation. interp2() should do the trick. The documentation is quite extensive but basically you give it your current coordinates and values and a new set of coordinates to get a new set of values. So you can give it a set of coordinates in a regular grid to get something that you can plot like you described.
Cool question. I did some digging (well maybe ["digging"]( https://www.google.nl/search?q=clear+one+line+in+the+comand+window+matlab&amp;oq=clear+one+line+in+the+comand+window+matlab&amp;aqs=chrome..69i57j0l2.5016j0j4&amp;sourceid=chrome&amp;ie=UTF-8) is a bit much) and I found [this](https://nl.mathworks.com/matlabcentral/newsreader/view_thread/167235). All their methods seem to work by "printing" backspace characters. for instance, try this: a = [1,2,3,4,5];pause(1); fprintf(repmat('\b',[1 59])) ; To delete a line though, you'de need to know how many characters are on that line. I've done some more digging (serious this time), and the only solution i've come up with that might work in general is using [diary](https://nl.mathworks.com/help/matlab/ref/diary.html), that is to save everything thats on the command window in a file too, and read that file. That might require hassle with opening and closing the diary and the file, and means significant overhead is added by writing everyting thats on the console to the disk too. 
Did you run the profiler to see what is taking the majority of the time? That will help you decide *what* to optimize. 
I did but I didn't really understand it. It says mupadmex (MEX-file) took the most time and was called ~50k times but I don't know what that means 
It looks like that is due to your use of a function in the Symbolic Toolbox, [here](https://www.mathworks.com/matlabcentral/answers/267211-very-slow-laguerrel-function-mupadmex-mex-file) is a similar example. So your best bet is trying to create a replacement for the symbolic evaluation you're performing, if that's possible. 
Thank you, I'll have a look into it 
I took a look for a few minutes. I'm not sure who told you to clear variables after you're done using them (Maybe you're coming from C/C++?), but you don't need to. In Matlab, when you make a "loop variable," it's not modifiable mid-loop like it is in other languages. When you make the loop variable, you're actually making a vector, and when you call the loop you actually just iterate across the elements. for i = 1:10 ... end is (almost) equivalent to saying: k = 1:10; for i = k ... end You could actually just make your own vector where you manually assign values (pi, random numbers *in a random order*, etc.) and the loop just iterates through the values in the vector. This is pretty similar to a `for each` loop in other languages. I say that because again, you seem to be in an arguably bad habit of clearing variables after you use them. The *only* time I think this would be useful is if you have a variable that is so large that you're going to crash your computer if you continue to hold it in memory, in which case you're *probably* using Matlab wrong. All this is to say that your code spends a significant amount of time creating and then clearing your symbolic variables `h` and `error`. If you remove the `clear h error` line from the loop and move `syms h error` to above the outer loop, then you cut your loop time almost in half. That said, the bulk of the time in your loop is dedicated to the `vpasolve` command. This makes sense - it's a numeric solver. It makes a bunch of guesses. This is almost certainly what the mupadmex function is that's getting called 50,000 times. If you comment out the `vpasolve` line, the code runs in about a third of the time. I'm a mechanical engineer, and I can't tell what your equation is or what you're trying to do. If possible, the **absolute best** way to go about this is to solve the equation symbolically up front and then use that to get the answer directly. I don't think it's possible as written though, primarily because of that complimentary error function. The other performance killers are the `for` loops and `find` functions. As written, it looks like the `for` loops are required because you can't easily vectorize the `vpasolve` command. The `find` function goes through a bunch of random time values... as the end of the simulation? I can't tell, but again I can't tell most of what's going on here. Other coding notes: * You're manually calculating the difference between values for your `delta_` variable. Instead, try `output_var = diff(input_var);`. That does it all automatically. * Recognize that a 2D matrix is *kind of* automatically a "3D" data format - you have a value at &lt;index1,index2&gt; of the array. That is, for a given &lt;x,y&gt; (or, in your case, a given &lt;y,z&gt;), there is an output value. You could imagine this as `z = f(x,y)`. The matrix indices need to be whole numbers, but those could be the corresponding indices to values in `x` and `y` vectors. You're indexing into a third dimension and wind up needing the `squeeze` command a lot to compress the matrix back down to what it probably should have been to being with. * It looks like maybe you're using a third dimension because you're splitting summation step off into the `error` term's definition. If you tried `summation_term(zm,zn) = sum( .... );` then you get a tidy one-liner as opposed to the way you have it, which is `summation_term(zm,zn,:) = ...;` followed by `error = &lt;stuff&gt; + sum(squeeze(summation_term(zm,zn,:));`. Like clearing variables, I would consider usage of the `squeeze` function to be a [code smell](https://en.wikipedia.org/wiki/Code_smell) or "red flag" that the data probably isn't structured as well as it could be. * If I haven't harped on it enough, even if you *were* able to solve your function to get a form `h = &lt;big equation&gt;;`, you wouldn't be able to vectorize it if you need a squeeze term in there. * Final note here - you're using the following in a variable declaration: `1:find(t&gt;time_array(zm,zn))`. When you use `find(vector&gt;value)`, you get *every index* where that condition is true. If you only want the *first* value where the condition is true, try `find(vector&gt;value,1);`. Nit-picky kind of point (like the rest of my comments :P ), because it looks like Matlab handles it okay in the variable definition, but it could bite you later. In summary, don't ever, **ever** declare symbolic variables in a loop, try to find a symbolic solution for `h` so you don't need to use `vpasolve` in a loop, and if you *can* find a symbolic solution for `h`, then try to vectorize your code so you can avoid the loops entirely. 
**Code smell** Code smell, also known as bad smell, in computer programming code, refers to any symptom in the source code of a program that possibly indicates a deeper problem. According to Martin Fowler, "a code smell is a surface indication that usually corresponds to a deeper problem in the system". Another way to look at smells is with respect to principles and quality: "smells are certain structures in the code that indicate violation of fundamental design principles and negatively impact design quality". Code smells are usually not bugs—they are not technically incorrect and do not currently prevent the program from functioning. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Hi! I'm a mechanical engineer with lots of programming experience (brofist). It sounds like your problem isn't the structure format specifically, but the data that you're pushing into that format. Could you explain more about the data you're generating, how big it is (matrix dimensions), and why you're using a struct? For instance, instead of `coalData(currentImage).intensity = [values];`, you could just have `intensity(:,currentImage) = [values];`. Generally speaking, I think structs are such a pain in the ass to deal with that I would only reserve them for when I need to package a bunch of things together for passing to a function, but even then you might be better off using a class than a struct. 
ohhhhhh... so essentially you're defining the borders ... or EDGES.... ok... I see now :)
Thanks a lot for your help, it seems I have a few bad habits. I'll sort that out tomorrow. Unfortunately I can't solve the equation symbolically so have had to settle for a numeric solution. Thanks again 
Pun very much intended I'm sure. 
I figured, you'd think that
Why are you using symbolic variables to do numerical calculations? 
The numerical solver is in the form vpasolve(eqn,var) where the eqn is a symbolic expression. I did wonder this myself but it's what the function vpasolve requires.
Here is an instructional video on the matlab website that solves your problem. https://blogs.mathworks.com/videos/2007/11/02/advanced-matlab-surface-plot-of-nonuniform-data/ The key is the "griddata" function.
So don't use vpasolve. It's for symbolic expressions. If you want to solve a numerical problem, use numerical tools. Like fzero, fsolve, fminsearch, etc. 
Randn creates a normal distribution, this is not the same thing as a random number between 0 and 1. I imagine the command you actually want is "rand".
Ok i'll give that a go, but I was using vpasolve because I tried to solve it symbolically but it retuned a warning suggesting that it was solving numerically and should use vpasolve? Thanks for your help
Probably because you were using symbolic variables. 
It scales the color of each blob according to the value of C, indexed into a colormap. Type `colorbar` after the plotting to see what the number-to-color mapping is. To be clear: the blob at x(14), y(14) is colored by the value of c(14). If you think of it in grayscale rather than the jet colormap you posted, it makes more sense: Matlab/octave looks at all the values in `c`; it says "aha, the minimum value of c is black, the maximum is white; everything in between is grey." Only instead of black to white, it creates a map according to what you specify. Try `jet(10)` to see the RGB triples you expected to see.
Write something to break this up into its constituent parts, and store them separately. maybe convert the .tiff's into normal 0-255. That should save a bunch of data. 
interp2 is not appropriate for measurements taken at irregularly spaced intervals. griddata should be used instead. from the matlab website: "interp2 - Interpolation for 2-D gridded data in meshgrid format" https://www.mathworks.com/help/matlab/ref/interp2.html 
I think it is not quite, Interp is calculting in between points rather than best-fit, but VERY similar in arguments to that function is GridData It seems to specialise in irregular data sets and convert them to regular, so exactly what I want. Very pleased as I thoughtI was going to have to try code some 2D -best fit
Yes, GridData specialises in irregular data - it looks exactly what I need thx
Thank you - yes I managed (eventually to find) GridData and it describes exactly what I want but I havent quite got it to successfully work yet, will try again tommorw. Thanks Kind of half-amazed that what I was mentally wishing existed actually does, and so well-supported, I had no idea the terms I was trying to describe and was trying to imagine 3D-best-fit line and tings
Ahhhhhh coool. I see so its a [0,1] interval mapping to a 33% 33% 33% interpolation from R to G to B I was looking at at the x .* y but and figuring it ranged -1 to 1 and then very confuised how the different R,G,B values were coming about with some pattern to them (should have thohgt of the 3-colour interpolation) And that explains perfectly the colour-symmetry as your rotate around the origin from x .* y Thanks
Thanks - I get it now :) - exaplins that color-symmetry around the origin from x.*y - I couldnt get my head round the R G B values being so different but having a patter, simple 33% 33% 33% interpolation explains it perfectly
Happy to help. But: that characterization isn't quite right, or at least isn't generalized. Jet just happens to be defined the way you described; if you try `colormap jet` vs `colormap lines` vs `colormap ocean`, you see that they're just predefined lookup tables, and rarely are they as cleanly mapped as jet. Regardless of the colormap though, matlab just linearly scales your data, and uses that to index into an RGB map (producing an RGB triple) of your desired colormap. 
It was pulled from an online example (which looked totally different) - so I guess they wanted it to look like that. Thanks. I did wonder how there were negative values, so that explains that but. thanks)
In addition to code rewriting, Mexing (i.e. compiling it into binary) would increase the execution speed.
That's not true, you could have floating point errors that are propagated and grow.
The number 1 go-to solution for too-big-for-memory data structures is the [Tall Array.](https://www.mathworks.com/help/matlab/tall-arrays.html) However, since you are looking at images instead of just table data, [datastores](https://www.mathworks.com/help/matlab/ref/datastore.html) may be a better option. You may be very interested in [image datastores.](https://www.mathworks.com/help/matlab/ref/imagedatastore-object.html)
Ah yes, i missed that you had random samples. Since you mentioned some sort of fit more than a direct Interpolation you might want to look at kriging as well. It might be overkill for your problem but if you have uncertainty values for your measurements it can work better than pure Interpolation because it takes that extra information into account. Even better if you can also give a gradient for each point. I have seen some stunning recoveries of an underlying field with very few random samples using Gradient Enhanced Kriging. I don't think matlab provides a readymade function for kriging though.
Can I do that in matlab or would I have to install plugins or something like that? 
I usually use MATLAB Coder, not sure but I think it should be included on most campus/commercial license. The idea is Matlab will autogenerate a C/C++ source file from your .m script, then compile it. You need to install compatible compiler (e.g. Microsoft VC Compiler) and make sure your .m script only call compatible function. it's a lot of things to do, so if you can fix your problem by rewriting the code (e.g your algorithm), that would be the most ideal way. See this for the way to speed up things (mexing is the last one on that list): https://www.mathworks.com/company/newsletters/articles/accelerating-matlab-algorithms-and-applications.html
Thanks I'll have a look into it 
they are the same... try this t = 0:0.01:1 x = cos(8*pi*t) y = sin(8*pi*t) z = t x1 = cos(8*pi*t) y1 = sin(8*pi*t)+.1 z1 = t plot3(x, y,z, 'g') hold on plot3(x1, y1,z1, 'r') hold off axis equal xlabel('x'), ylabel('y'), zlabel('z') title('Double Helix') set(gca,'xDir','reverse','ydir','reverse')
It works, but I still need the green helix to reverse.
That won't give you a double helix. You need an offset of pi in both the formulas for x1 and for y1. 
It seems to work for me If I seperate them into different figures though, just not together.
Just changed the code to use fzero, it now runs 100x faster! Thanks for the help! 
General Setup: Particles are sent through a burner and carried upwards by a gas flow. 4 cameras take pictures from two different angles. So each 'image' consists of 4 frames. These are monochromatic Images (Light is passed through bandwidth filters). The particles are found in the frames by segmentation. These particles are segmented again with a varying threshold for size measurements. The information gathered (size, intensity, ... ) and the images of the particles was stored in one struct. Now all the information of an image is stored in a separate struct. I was/am unsure of how to save all of that. A struct seemed to be a great way to accumulate everything. Sadly matfile() can't index into structs, that would have solved my problem. The Problem I see is the great difference in number of particles in each image, which can range from 0 to about 100 and how to save them. The Images are in a proprietary format ('.im7' for those interested) and loaded as regular (double) arrays. I reduced them to single, because i wanted to keep the data accurate (maybe thats unnecessary and i can go to (u)int16, but I'm not sure how much that would help). The question would be: how do I break these things down?
I have edited the code taking into account your comments, it now reads much better and runs faster. I'll make sure I don't fall into these habits again. Thanks again for your help!
Glad to help. Good luck with your project! 
I'm still not sure what you're trying to save, or the format you're expecting them to be in, but I would suggest you maybe check out cell arrays. Cell arrays have the benefit that they can be indexed, and the contents can be anything - you could have a 3x2 matrix in slot 1 and a 3x3000 matrix in slot 2. Say you segment the image. The segmented image could be saved as its own image file. The re-segmented image could also be saved as its own image file. It sounds like maybe you care about the results more, so consider the following: intensities{currentImage} = [1 x number of points vector of intensities]; positions{currentImage} = [2 x number of points matrix of particle positions]; Now your containers are free to take up whatever size they need to be. You could have a vector giving the number of points: numberOfPoints(1,currentImage) = nPoints; So, for each image, you could go back through the data and do whatever you want: for currentImage = 1:numel(images) plot(positions{currentImage}(1,:) , positions{currentImage}(2,:), 'x'); end The cell arrays are kind of like a three dimensional matrix, in that you have one index return a 2D matrix, but here the 2D matrices are all different sizes. Example data would really help clarify what you're trying to do.
 chromatic = ["A","A#","B","C","C#","D","D#","E","F","F#","G","G#"]; keyInput = input('What key?','s'); major = [1,3,5,6,8,10,12,13]; %Note - WWHWWWH keyIndex = find(chromatic==keyInput); if isempty(keyIndex) error('Key %s not valid.',keyInput); end doubleChromatic = [chromatic,chromatic]; outputScale = doubleChromatic(keyIndex + major-1); %outputScale = chromatic(mod(keyIndex+major-1,12)); fprintf('The scale is: '); fprintf('%s ',outputScale); fprintf('\n'); Fixed your major scale notes :P The gist of the code above is to use the `find` function to get the index of the input key. The problem is that your scale is one-indexed (first note is "1"), and Matlab is one-indexed (first element of a matrix is "1"), so if you try to just add the Matlab index with your major scale index, you get that the first note should be (1+1 = 2). Instead, you have to subtract one, either from the Matlab index or from the major scale notes, to get proper indexing. Lastly, the `doubleChromatic` is used to loop "around the world" back to the start of the chromatic scale; it's conceptually easier than trying to edit the modified major index `keyIndex + major - 1` to be within the bounds of the scale. The alternate way to do that is to use the `mod` function to do the bounding.
Mm, not sure about kriging, I'll look into it - but GridDate looks like exactly what I want - it is essetnailly a best-fit line but for as a plane in 3D - what I was trygin to describe with clunky language about quilts
Let's try again :). As i said I'm somewhat new to programming and English is not my first language. Thanks for your patience! For each Image i create a struct (saved as 'SRC_*'. The loaded struct is always called 'SRC' in the workspace) with 4 fields (frame 1-4. 'F1', 'F2, ...). Each of those contain 2 fields 'dataLow' and 'dataPercent' for the two segmentations. The information gathered from the segmentation is stored in fields. Each line represents one particle. Eg.: 'SRC.F1(1).dataLow.Area' will give me the Area of particle 1 in frame 1. 'SRC.F1(2).dataLow.Area' will give me the Area of particle 2 in frame 1. Information saved: Area, Centroid, BoundingBox, Image(logical), Image(monochromatic, single), PixelList, PixelValues, MeanIntensity, MaxIntensity. I don't really want to save each image seperately, because that would create an enormous amount of Images. Cell arrays wouldn't really solve my problem, because they aren't smaller? At least that's my knowledge. The advantage of a struct is, that it can be easily modified to fit future needs, as the Program generally needs a little tweaking to work with different fuels and other changes in the setup of the test bench. meaning it is easy to add and use new variables. Structs make the code more accessible, because it is clearer what variable is used, compared to cells. Eg: 'SRC.F1(1).dataLow.Area' is easier to understand then SRC{1}{1}{1}{1}. I do understand that this is not how you posted above. Just to explain my point. I will look into Tall Arrays and get back if that doesn't work. And thank you
Can you share your data as well?
I guess there's a couple problems I see. 1. You said you don't want to save each image separately, because that would create an enormous amount of images. This is part of my lack of understanding of the problem - either you want the post-processed images, in which case you're going to create them regardless of format, or you don't, in which case you aren't. You're holding a lot of data in memory, which is why your program is blowing up, but I can't tell *why* you're doing that. If you want to make a video, then create the images one at a time, save them as frames of a video, then overwrite the data with the next frame or save it to disk, depending on whether or not you care about quickly recalling the data in the future. 2. Note that Matlab [does not pass variables by reference](https://www.mathworks.com/matlabcentral/answers/152-can-matlab-pass-by-reference); instead it is "copy on write," which means that, if you pass your (very large) struct to a subfunction, and you write one element of one array of one field to that struct, then Matlab copies the entire "variable" (the entire struct) into the subfunction. This is where/why it is advantageous to *not* use a struct to store all of your data. It appears to me that you're using a struct so `the loaded struct is always called 'SRC' in the workspace` - but what does that matter if you always need to know the names of the fields of the struct? The only place that makes things a little easier is if you're passing the data back and forth to a function, but see the note above - you're not "passing" the data back and forth, you're *copying* the data back and forth (again, if you write to it). `F1(particleNumber).field1.field2` might be a *little* easier to look at, but how do you loop through the fields when they're *named* F1, F2, etc.? Notice also that you can use *structure arrays*, and you can have a structure array as a field of a structure array - you could do `F(1).particle(1).field1.field2;` I would argue that it's as easy to read as `F1(1).field1.field2`, but there you can at least loop through the data. In the end, I'm just looking to help out; whether or not you use any of the advice I give doesn't affect me one way or the other. I would urge you to consider what data you *actually need*, though, and to *only* keep that data in memory. For example, you may need number of particles and their position as a function of temperature and time, but why do you need *all* of that data *at the same time*? Are you trying to curve fit something with the data, or are you trying to show it in an animation? Once you can clearly define what the end result should be, then you can try to decide what you need to hold on to, and then from there you should be able to find a data format that works for you. I'm not saying that *nobody* ever needs tall arrays, etc., I'm just saying that it's probably pretty uncommon. 
No multiple needles, but you could do some fancy coding have the color zoning, like where it is normally green for good, red for bad, change dynamically like a needle. If you understand what I'm saying lol. 
I'm sorry, I can't. It's sensitive information. I simply don't use the 'notch', 'on' bit right now, I haven't solved the problem yet.
Yeah I figured out the color zoning which definitely helps, but not exactly what I was looking for. Might need to get outside Matlab for this.
Matlab can model whatever you want, how useful that model is depends entirely on the model.
Sorry I don't have Matlab open, it's late and I'm tired and I didnt read much but where you have: coeff = coeffvalues(fitresult); isn't coeff the array you need? then you can just use coeff(1), coeff(2) etc to acess those values.
Congrats on joining Reddit. Welcome. 
'i' goes from 6-396 in your loop. You need another variable which goes from 1-66 to assign mydata. For example: mydata = cell(1,68); k=1; for i = 6:6:396 myfilename =sprintf('Desktop/setup/SquareBase/postProcessing/singleGraph/%k/line_U.txt', i) mydata{k} = importdata(myfilename) k=k+1; end Also, try dlmread instead of importdata. I found dlmread to be better if you have a delimited matrix in the data file. Hope it helps. 
Don't use i as a variable, it's reserved for imaginary numbers. If you've got a directory full of .txt files - or whatever extension use dir to create a structured array and iterate over that. WD = '~/myDir'; cd(WD) files = dir(*.txt); inds = [6:396,400]; for n = 1:length(files) data{n} = importdata(files(n).name); end data = data{inds}; I would use textscan instead of importdata as it's very fast. 
If you are fitting, that means you're working with real data, which makes it extraordinarily unlikely you're doing symbolic calculations. So why would you use symbolic variables to do numerical calculations? 
Probably because the automatic axes limits end up being different between the two figures.
it is not entirely clear to me what you are trying to achieve but if you are trying to evaluate the fitted function you can evaluate it using fitresult(x) if I remember correctly
The aerodynamics of a cow are very important.
I've written to complain to Mathworks that: c = coeffs(equation); Produces a different result than [c , t] = coeffs(equation); The values of `c` are not in same order. That said, if you made an input vector, like: inputVector = 0:0.1:100; Then you could use the `coeffs` function to get the coefficients and terms: [c , t] = coeffs(yourFunction); Then plug in your values: fullTerms = subs(t.' , 'yourSymbolicIndependentVariable', inputVector); nSamples = numel(inputVector); fullCoeffs = repmat(c.' , 1 , nSamples); outputVector = sum(fullCoeffs.*fullTerms); plot(inputVector,outputVector); All that said, as @FrickinLazerBeams mentioned, I can't tell why you're doing symbolic fit with real data. That might also be because it looks like you're looking with some custom tools; I can't find `fit` or `fittype` or `fitoptions` anywhere in the standard Matlab documentation.
Important to note there is the transpose when you're expanding the `coeffs` results - `t.'` and `c.'`. When you do that and use `subs` or `repmat` to "inflate" the data, it only inflates along a row. If you don't take the transpose, then your coefficients and terms are in a row, and it only inflates on the row, so you're left with trying to manage a `1x&lt;really big&gt;` vector. The `sum` function automatically does column-wise summing, so what I've written is the most straightforward (conceptually) way I could write the function.
we do, but I don't have access
this seems quite promising
Yes.
I've used it with the distributed computing to process data sets with 1000's of gigabytes. 
You could do this with 2 classes. You need to define mtimes to perform the operation and ctranspose to convert between object types. You could alternatively use 1 class and have a private attribute to track if the transpose operation should be used. I wonder, however, whether this operator overloading is useful or gratuitous. I'm not familiar with this application, and it might make sense to those that are. But if it's not, then just use regular method calls and give them sensible names.
Method calls may be the most useful but I would like to follow this route. Am I correct in now searching for "operator overloading" as the name for this technique?
Yes. You just need to define a method in the class that has the name of the operator in question.
How long is a single loop iteration? I've found if the loops are relatively quick, then the fraction of time used by MATLAB overhead needed to pass information to-and-from each worker per iteration can large compared to if the loops can chug for a while. This could defintely be the case since you are generating a lot of data. Also, a matrix measuring 5e6 x 500 is 18 GB of data (assuming it is a matrix of doubles), and this can take a very long time to allocate and reassemble at the end of the loop, so you may be getting a lot of slowdown from this. Something else you might try is switching from parfor to a for loop and looking into the code profiler: https://www.mathworks.com/help/matlab/matlab_prog/profiling-for-improving-performance.html This will tell you where your code is spending most of it's time, and may give you an indication of ways to generally speed things up within the function you are calling if it is self-written. Unfortunately, profiling doesn't work so well with parfor loops as it mostly tells you all the time was taken up by the parfor workers and doesn't dig deeper (or I haven't been able to make it dig deeper).
I think as long as the "function" being inputted is written in Matlab in the right syntax and your paths are set up correctly, it should work.
Solution: use string with function's name I forgot matlab can accept strings as well as function handles in this context
Interesting question. Best I can think of is three theories. 1. MATLAB tar is so old, it takes tar recording seriously and only writes 512 bytes at a time (like back in day) 2. MATLAB impl is dumb/ancient, and writes 1 file record, forgets where it is, goes back to the beginning of the file handle 3. MATLAB impl is very secure, and verified each record was written correctly. Looking at the binary difference between the 2 generated TARs may lead to a clue.
First: If RN is equal to 3, than no condition matches. Second: I think you want to do this operation for each element individually. Right now you do it for all elements at the sane time. Try logical indexing: CED(RN &lt;= 3) = 45 ./ RN(RN &lt;=3); CED(RN &gt; 3 &amp; RN &lt;= 450) = 20; CED(RN &gt; 450) = 800; Of cource, you have to initialize `CED` with the right size. ;) Third: Be aware, that zero is smaller than two. In you first If-Branch, you are trying to divide by a numer smaller than 2. This might lead to a division by zero.
Thanks for the reply. Good pickup on no RN =3. I don't think any of my real RN values equal 3 but it's still good to include that condition. Due to the nature of RN in previous code it cannot be 0 but i might throw a check in there anyway. The question is to use vectorisation specifically, does logical indexing meet that? I did a bit of googling on it but I'm still not quite sure what you mean by it. 
Well you technically convert `CED` to a vector, when you write `CED(RN &lt; 2)`.
Just to check for the obvious: your array A is preallocated right?
+ I got it going and now I have a new technique to use. Thanks for the help. Do you have an idea why the original didn't work?
Yes but thanks 
Thanks for the response - a single loop iteration takes about a second. I have already profiled what happens inside the loop and tried to optimize it the best I could. I was wondering if some of the other parallel functionality like spmd statements or asynchronous function execution with parfeval would work better but I've never used those before and my first attempts led to slower results than a normal parfor 
Hmm, so, a single loop iteration takes a second and it generates 18 GB/ 500 = 36 MB of data. I would guess there is just a lot of overhead with passing this data to and from workers each second, compared to a for loop with pre-allocated memory which doesn't need to do this. It will be a bit of work, but you might try modifying your code so that each loop iteration does more work. Maybe have a single loop calculate 20-50 columns of 5e6 points, that way each worker can chug longer without having to return anything.
Yes, I do. The if-statement in Matlab executes the branch, if all elements in the condition are not falsy (logical false, numeric zero). The first condition (`RN &lt;= 2`) returns `[1 1 0 0 0]`. Not all of these elements are true, so the branch does not execute. The second condition (`RN &gt; 3 &amp; RN &lt;= 450`) returns `[0 0 0 1 1]`. Those elements are not true either. So the branch is not executed, too. Same goes for the third statement. Since you provide no `else` branch, nothing is executed. And as of this, CED is not assigned. Please note, that the `coefficient` function is not executed for each element of `RN` individually, but for the vector `RN` as a whole. This might lead to unexpected results if you are new to Matlab.
Ya I was trying to do that with the SPMD statements where depending on the worker it is assigned a different set of columns but it seemed much slower - I may need to just read up more on that - the other tricky thing is if you make more complicated indexing then you start having broadcast variables and the parfor loop can no longer slice he arrays. Thanks for the input though I agree that's the general direction to go I just need to figure out the best way to do it. 
I hate to hijack someone elses tread, but I have a question for you (since I deal with datasets that can be almost as big as what you describe). The last time I tried using memmapfile (which admittedly was a few versions ago), I ran into an issue where initially it worked great, but every ime it read/wrote new data to a memory mapped file the amount of RAM memory used permanently increased, and I couldn't find a way to clear this memory (for data that was no loner needed) without physically restarting Matlab. The code I used looked something like this: % D = memory mapped data file % R = memory mapped result file % N = number of subdivisions % n = number of points per subdivision in data space % m = number of points per subdivision in result space % kk = loop variable D=memmapfile('dataFilename'); R=memmapfile('ResultFilename'); % pre-allocated with zero's in place of the actual result data for kk=1:N % read a small chunk of data from memory mapped data file dataCur=D.Data(n*(kk-1)+1:n*kk); % apply some processing workflow (input is [1 x n], output is [1 x m]) dataNew=someFunction(dataCur); % save the processed chunk of data to memory mapped result file R.Data(m*(kk-1)+1:m*kk)=dataNew; end As this loop would run it would gradually increase memory usage until I was using as much memory (or more) as it would have taken to just load the file outright, leading me to come to the conclusion that memmapfile is only useful if you only need to access a small subsection of (potentially spread out) data within the file, but was useless for breaking up a big file into manageable chunks where you needed to (eventually) access all the data. Is this still how memmapfile works? is there something I am doing wrong / not doing to get Matlab to clear no longer needed parts of the memory mapped file out of RAM memory? If you are using this on TB+ size files I imagine there is a way, but the last time I tried I wasn't able to figure it out...
&gt; Cell arrays wouldn't really solve my problem, because they aren't smaller? At least that's my knowledge. This may not be the case. Struct arrays (nonscalar structures, arrays of structures) are memory hogs, and take up significantly more space than the corresponding "struct of arrays" (a scalar structure whose *fields* are arrays). I have also found that struct arrays are **murder** in terms of .mat file save/load times, sometimes taking minutes to load even a small file without any apparent CPU strain. If I were in your position, I would load the data corresponding to particularly large image (just one) and try to come up with a way to store the data that you like, but avoiding structure arrays. For instance, instead of `s(100).Area` for the area of the 100th item, I would use `s.Area(100)`. Your structures are nested, so it might be tricky. You can check to see how much space each variable is taking up with the [`whos`](https://www.mathworks.com/help/matlab/ref/whos.html) command.
Disclaimer: I've not used the low-level hdf5 functions, so idk if those are being used correctly. They seem to be copied almost exactly from the [H5D.write documentation page](https://www.mathworks.com/help/matlab/ref/h5d.write.html), though, so it seems like they should work. However, I am rather familiar with the higher level hdf5 functions. The one issue I see is that h5_block = [1440 1080 2000+r]; should just be h5_block = [1440 1080 2000]; For hdf5 files, the block size is not the end position index, it is the number of values to write starting from the start position index. Having the "+r" means you would first write 1-2000, then write 2001-6000, then write 6001-12000, then 12001-20000, etc. Some of your code isnt posted, but I imagine this isnt what you want. On a side note: is [1440 1080 ...] correct? it would seem like you would want either [1920 1080 ...] or [2560 1440 ...] (for 1080p and 1440p, respectively), unless you actually have movie frames that are 1440x1080 pixels.
Is it possible to make "foo" output the matrix you want using a single vectorized operaton? Ive found that, if possible, this is dramatically faster than trying to generate a matrix using loops. As a simple example: if you anted to make a matrix where the 1st column was all 1;'s, the 2nd all 2's, the 3rd all 3's, etc: clear all % Method 1: loop method tic foo=@(mm,nn)(ones(mm,1)*nn); M=500; N=1e6; D=zeros(M,N); for kk=1:N D(:,kk)=foo(M,kk); end toc % Method 2: Vectorized method tic M=500; N=1e6; D2=ones(M,1)*([1:N]); toc On my machine, the loop method consistently takes ~4.5-4.6 seconds, whereas the vectorized method takes ~0.6-0.8 seconds. This indicates a speedup of roughly 6.5x. My machine has a 4C/8T i7, so getting full utilization out of all the physical cores plus ~60% utilization out of the virtual ones is pretty much as good as can possibly be expected. This should scale well with more cores (up to a point), so with 24 cores (or even 12C/24T) should give significantly more of a speedup than in tis example. Of course, this requires making "foo" into a fully vectorized operation. This may not be easy, but its worth trying if this part of the code is significantly slowing things down). **EDIT**: Two additional things - you dont mention what hardware you are using (just that you have 24 workers), but this could lead to one or two issues that havent been mentioned. * 1) I am assuming you have at least 12-core/24-thread CPU threads in total. If you dont and are trying to increase performance b artificially increasing the number of worker beyond the number of threads: dont. This tends to lead to something called "cache thrashing" which slows everything down. * 2) If you have a multi-socket system, then there is a pretty huge penalty for having things run on more than one NUMA node at a time. At work I use a 16-core/32-thread system that is 2x 8-core/16-thread cpus on 2 NUMA nodes. I've found that by limiting matlab to 1 NUMA node I get the same performance while using resources much more effectively (basically, it allows me to run 2 Matlab instances simultaniously with both at 100% power). Depending on the operation though, not limiting things ti a single NUMA node might actually hurt performance AND use more resources (the "fill in a matrix column y column" operation could feasibly require transfering the entire matrix back and forth between NUMA nodes every time a worker from the other NUMA node was ready to add data). On linux you can easily limit Matlab to a single NUMA node using "numactl" (Im sure there are ways on windows/mac too, but idk them off the top of my head). The command I use is: numactl --cpunodebind=0 --membind=0 -- /&lt;install_location&gt;/matlab -desktop # NUMA Node 0 numactl --cpunodebind=1 --membind=1 -- /&lt;install_location&gt;/matlab -desktop # NUMA Node 1
I would investigate doing this in the frequency domain rather than the time domain as that would avoid the oscillations you mentioned. In particular I'd look into using the short time (or term) Fourier transform (https://en.m.wikipedia.org/wiki/Short-time_Fourier_transform). It's basically the idea of taking the Fourier transform of a specific window of data. What I would expect to see is a certain response with ambient sounds and a different response (peaks around certain frequencies) when the event is occurring. In MATLAB, you could use the spectrogram function to do this. https://www.mathworks.com/help/signal/ref/spectrogram.html
What operating system and MATLAB version. I've been using this since 2010 until 2015 on red hat linux without a problem. 
A couple things: 1) based on the example you posted in another comment, the error seems to be closer to the 6th or 7th significant digit. **0.52868**6259 vs. **0.52868**8951 --&gt; 5 significant digits unchanged --&gt; error in 6th significant digit **1.45438**2997 vs. **1.45438**9675 --&gt; 6 significant digits unchanged --&gt; error in 7th significant digit (admittedly it is a large error, so I could see calling this error as effectively in the 6th significant digit) I don't mean to be nit-picking here, but errors in the 6th-7th significant digits are in just about the right place to be single precision floating point round-off errors, whereas errors in the 4th significant digit are a factor of 100 (or more) larger. 2) You mention Using an older version on Matlab on Mac and a newer version of Matlab on windows. IIRC somewhere in between these two version Matlab had a major overhaul to its compiler, meaning that it is very likely that the operations are being done in a different order, but this is due to the Matlab version, not the OS version. The error still seems to big for double precision values (unless you are hitting a good number of unusual edge cases), but if there are any single precision calculations this seems like it would be entirely reasonable. Assuming you haven't, I would try running this test on the same version of Matlab on both windows and Mac and seeing what the difference is. It still might not be the same exactly, but I wouldn't be surprised if it was much closer.
I don't remember specifically what version,. but I think I tried it on a few matlab versions between v2013__ and v2015__. I only tried it on widows though. I'll have to give it a shot on a Linux system and see if I still have this problem (I should really re-try it on windows too, snce it has been at lease a couple of versions since I last tried). Its encouraging to hear that this shouldn't be a problem. I always thought that it would be a great tool for analyzing large datasets, I just couldn't get it to work right.
Not OP, but is there any way to do this without thresholding?
Where in this recording is the bell ring? Do you have a reference? How to check if your final method works with the accuracy you need?
Because pf is not exactly equal to the specified number, several numbers after the comma it'll probably differ. Google for "floating point" for an explanation. A simple solution would be to think of a suitable, acceptable range for the number. if abs(pf - 2.0840e-05) &lt; 1e-2 disp('found'); end
Is there no way of doing an if loop with a float?
I just specified one? Another possibility would be to round your numbers to the required accuracy,
The filters were all applied in the frequency domain, but I didn't think to use it for thresholding. I'll look into that, thanks. BTW, [here](http://imgur.com/equx1QO) is the frequency spectrum I've been using to establish centers for my filters. 
The first time the bell is heard is from 0:32 to 1:29. To verify the code, I'll collect a few more recordings at the bridge, hopefully that include the horns of both the ships and the bridge itself. If they output the correct states post-processing, I'll consider it good enough.
I guess I can just put in upper and lower limits around the value, or I'll come up with another solution. Anyway now that I actually know what the problem is, that shouldn't be a problem! Thanks a lot, this has been a massive help!
+ahh. So the main way to check each element instead of all of them at once is either what you posted above or a for loop?
Can you provide a bit more detail on what you do with the converted numbers after? Can you not avoid converting altogether by using the Matlab bitwise operators? 
Exactly.
Long story short: I have to read binary data that consists of 240-bytes of a mixmash of 91 int8, uint8, int16, uint16, int32 and uint32 values (its possible some more unusual non-standard bit-length data types might be present to, though these wont always be there). This 240 byte section is repeated millions of times throughout the dataset. So, to avoid making literally close to a billion individual calls to fread and fwrite, I read/write everything in each 240 byte section as a 240 byte block of 60x uint32 values, and then separate it after the fact. Im using uint32 because the data between these 240-byte blocks is uint32 format, so this allows me to use a single call to fread/fwrite for maximum I/O. A bit more detail: Initially I tried to manually split, change endian (data is big endian), rearrange, and recombine each of these values manually. I even managed to get it working going from 60x uint32 --&gt; 91x various, but I found myself literally about to throw the computer out the window trying to get the reverse conversion working, so I figured I would try this. Converting everything to bitwise representation (where there are 1920 bits), blocking those 1920 bits into either 91 or 60 values, and then converting these blocks back to integers is dramatically simpler to implement, since theres no special cases or need to manually split up a value **(**e.g., the 60*uint32 values take up bytes 1-4, 5-8, 9-12, etc. So, say I needed to generate a (u)int32 value from bytes 6-9, so I have to break up the uint32 values at bytes 5-8 and bytes 9-12, account for the endian change, isolate bytes 5, 6-9, and 10-12, convert bytes 6-9 to a new (u)int32 while accounting for the endian change again, and do something with bytes 5, 10, 11 and 12 while I am preparing the next value for conversion (these will get used in the values before and after the value at bytes 6-9). It should be easy to see how this got rather annoying rather quickly, and that doesnt even consider other more exotic integer bit lengths (say, 10 bit integers). **)**. Now, everything is just converted to and from bitwise representation. As far as not converting: these are headers that describe the layout of the data set (e.g., provide x and y coordinates for where a particular series of data values was collected). As such, I need them in their correct integer form, or else I wont be able to assign the correct indices to data values.
I see. I understand now. On your SoundCloud the background image is that of a spectrogram so I'm assuming you have tried this approach? Basically you don't take the fft of the entire sound file but of certain (time) portions of it. So when there's no bell, there's no frequency component where it's supposed to be and when it starts, the component appears. This is when you start counting the bridge opening and you can use the number of blocks where this component was present-&gt;absent-&gt; present to get your three states. (edit : oops, just saw another user suggest the same). If you install multiple microphones you can maybe do some noise cancellation but I'm not sure if that's needed because it appears that the volume of activity is much higher than ambient noise. May I ask why you want to isolate the bell and not just the the bridge movement to qualify activity?
So, I appreciate the Interest, but I think I'm just going to make my own. I just finished the binary--&gt;integer conversion code, and when running the conversion on the 240-byte section described in my other reply 1 million times (each time has 2 conversions, so really 2 million times), the binary2integer conversion dropped from ~240 seconds down to ~12 seconds. IDK if my method is the fastest possible method, but it is good enough for my needs. I think I can likely do something similar with the other conversion too, though that one wasn't as bad to begin with (the same test for the integer--&gt;binary conversion is only ~50 seconds, which is slower than the ~12 seconds I'm getting now but much faster than the ~240 seconds it was taking). 
&gt; I guess I can just put in upper and lower limits around the value, or I'll come up with another solution. Do you realize that if you take a value, substract the value you want it to be, take the absolute value, and see if the result is less than some value (call it "a") (i.e., what /u/ChosenUsername12 specified), that "putting upper and lower limits around the value" is exactly what you are doing? i.e., abs(X-X0) &lt; eps is the exact same as X &lt; X0+eps &amp;&amp; X &gt; X0-eps
Yeah that's why I said it..
I thought your reply was indicating that adding upper/lower bounds was something else you could do, not that you were acknowledging that that is what was being recommended. Sorry if I misinterpreted your response. On a side note, when I do this type of thing I typically use sqrt(eps) * max(data) as the threshold value, so it scales with how big the data values I am using are (eps in Matlab produces machine epsilon). I feel like sqrt(eps) * max(data) is probably a fairly standard thresholding limit for making sure that floating point rounding errors don't matter. For double precision floats, eps is ~2.2 * 10^-16, making sqrt(eps) ~1.5 * 10^-8. The absolute biggest cumulative floating point errors shouldn't be more than 10^-11 or 10^12 relative to your max data values, so sqrt(eps) exceeds this by ~1000x to allow for a little bit of cushion room in case you have some *really* unlucky roundoff errors in your code.
Channelized it and then apply a CFAR detector. That's how I would do it. 
Thanks for the help!
Why not eps(data), or sqrt(eps(data))? That's kind of what it's for. 
I don't think there is one easy answer to that especially without seeing any code. I don't have experience converting matlab code to another language especially automatically, sounds messy. Mine tend to run slow due to sloppy coding and it just takes time to optimize it for fast run times. Assuming this is your case: look into pre allocating arrays, replacing loops with matrix operations, minimizing IO, etc...
Post your code and I'll take a look, vectorization can speed things up by quite a bit when properly applied.
Without specifics, you likely won't get satisfactory (direct) answers. A decent portion of any programming task is figuring out what the hell is taking it so long. The 'Profiler' is a tool within Matlab that can help you track down bottlenecks. It will analyze each command and tell you how long a stretch of code is spending on each call, and can usually give suggestions on how to improve them. If you are using basic algebraic operators many times, and they are independent of one-another, you might be able to parallelize your code (look up 'parfor'). If you are using a specific type of numbers, such as positive integers, it can really cut down on computational overhead to define them as such (warning - you should understand how this affects inputs/outputs before applying this). If you are are calling a more complex function, such as data fitting, interpolation, etc, you would need to investigate that specific routine. Usually the documentation or google will have some advice. Other common bottlenecks are loading/saving data, arrays that grow as the code progresses (try to preallocate space), and loading a data file large enough that Matlab's working memory is taxed.
Assuming you have these calculations in a function, you can use Matlab coder to convert function to MEX which is a Matlab executable. It needs to be called in the place of the function . It accelerates matlab calculations. You can check out this example.. https://de.mathworks.com/help/comm/examples/simulation-acceleration-using-system-objects-matlab-coder-and-parallel-computing-toolbox.html
Well, can you tell us, what you want to plot?
Yes, get rid of all of your `for`loops. Matlab is a *scripting* language, not a compiled language, and it does not handle loops well at all. Matlab, the MATrix LABoratory, is highly optimized for *matrix* math. If you can "rephrase" your loop as a matrix operation, then you reap tons of speed improvements. diff, sum, and the element-wise multiply and divide, `.*` and `./`, are some of the key "tricks" to implementation. As everyone else mentioned, though, without code it's all shots in the dark. But you definitely have loops.
This is the function --------------------------------- function Jackle29=Jackle29(Gi,Gii, g, rho, gamma, k, h, df, f) f2=f+(i.*df); omega=(2.*pi.*f2); %complex freuqnecy %omega=f2; Nu=((Gii/omega)-i.*(Gi/omega))/rho; %kinematic viscocity iomega=i.*omega; k2=k.^2; Nuk2=(Nu.*k2); f=iomega./Nuk2; R=(1-iomega)./Nuk2; zeta=(1-R).^0.5; z2=zeta.^2; z12=1+z2; z122=z12.^2; kh=k*h; zkh=zeta*k*h; coshkh=cosh(kh); coshzkh=cosh(zkh); sinhkh=sinh(kh); sinhzkh=sinh(zkh); N=-4*zeta.*z12+zeta.*(4+z122).*coshkh.*coshzkh-(4.*z2+z122).*sinhkh.*sinhzkh; D=zeta.*sinhkh.*coshzkh-sinhzkh.*coshkh; grho=g.*rho; Nu2=Nu.^2; k2=k.^2; gk2=gamma.*k2; k3=k.^3; ND=N./D; inversechi=gk2+grho+rho.*Nu2.*k3.*ND; %equation 29 Jackle29=(inversechi).^-1; %inverting the result of equation 29 to get the complex dynamic susceptibility end --------------------- And this is the script ----------- clear all Gi=[4.478:0.0001:10]; Gii=[0:0.0001:4]; for indx1=1:length(Gi); disp(Gi(indx1)); for indx2=1:length(Gii); f1=[29:0.1:30]; D=[]; for indx3=1:length(f1); pf=imag(Jackle29(Gi(indx1),Gii(indx2) ,9.81 ,1005.9 ,0.007 ,555.2376239373641 ,0.000652006 ,6.2024 ,f1(indx3))); D=[D,pf]; end [pks,locs] = findpeaks(D); pks=max(pks); if isempty(pks);continue end if f1(locs) ~= 29.4;continue end if pks &gt; 2.118e-05;continue end if pks &lt; 2.113e-05;continue end pks Gi(indx1) Gii(indx2) plot(f1, abs(D)); xlabel('frequency (Hz)'); ylabel('chi'''); hold on end end hold off 
Ahh ok, yes the calculation is in a function, so I can convert to MEX and that should speed it up? Well I'll give that a try then!
yeah sorry about it, it was points A B C and D, those were supposed to be the vertices of a tetrahedron... still couldn't figure it out...
Yes, it will speed it up. After i saw your code i think you might not get big improvements. If you have the toolbox, you can give it a try.
Yeah, I thought about that, but I'm still not sure, what you want to plot. Do you want to plot the tetrahedron as an outline of lines in 3D-space? Or do you want to plot some fancy arrows? I'm nkt sure eaht you are trying to achive.
plotting them as lines would do
Are you looking for a global maxima? It seems to me that you are looping through values to try to find a maximum. This is slow compared to using dedicated functions. Functions like fmincon that can be combined with globalsearch. If you have the global optimization toolbox that is. Your D is growing inside the loop aswell.
Ok, I will show you, how to plot the triangle ABC in a 3D plot and you can try to figure out how to do the tetrahedron on your own. First, you have to notice, that you want to draw three line segments with a total of four points: A → B → C → A. You just squash those points together like this: line = [A; B; C; A]; Than you have the x-coordinates of your line in the first column of `line` and the y- and z-coordinate in the second and third line respectively. You can plot them by using `plot3`: plot3(line(:, 1), line(:, 2), line(:, 3)); In the end, you will get this: http://imgur.com/LYX1bPK And if you do it correctly, you plot the whole tetrahedron: http://imgur.com/Tyn2Bfj
thanks for helping... now time to do the homework hehe
So, I can't run your code (don't have the signal processing toolbox), but I do know something about it: MATLAB itself is telling you how to speed it up. Always observe the tips in the MATLAB editor, they're good ones. So, in your function the editor keeps telling you to replace `i` with `1i` which will help, but only a little. However, in your script, you have the line `D = [D,pf]` and MATLAB is saying `D appears to be changing size every loop. Consider pre-allocating for speed.` You really, really want to do this. Also, don't do this: if f1(locs) ~= 29.4;continue end Floating point numbers cannot exactly express decimal numbers, so your above comparison will never evaluate true. Instead, [compare the difference of your two values to some small number](http://www.floating-point-gui.de/errors/comparison/). 
Yeah, I looked at the magnitude spectrum of a 5 second segment of audio that contained only the ringing. From that graph, I was able to identify the key frequency components of just the bell. I used very sharp bandpass filters on those frequencies and then ran the full audio recording through. Could you expand a bit on using the blocks (bins?) to change the state? I feel like this is the right direction, but I'm not getting it. To answer your question about why the bell, it coincides exactly with the bridge movement. I don't think the amplitude of the direct bridge audio is large enough to detect, but I'll look into it. 
You looked at 5 second audio where you are sure the bell is ringing to get the frequency bins where know you will definitely see it. Now from your microphone if you keep processing 5 second bins (instead of a long recording) then at first there will be no frequency component there, but when the bell starts the components will appear at the frequency you expected. I have done a quick and dirty cartoon explaining what I meant (this is not your audio spectrum, just something on google images). http://imgur.com/a/5a9uX These plots are called spectrogram (rotate your freq spectrum by 90 degrees and plot many short time recordings side by side). For accuracy you can use a couple harmonics of the bell as well as qualify the duration for which the signal component is present. 5 seconds is just an example, you can go up to 1 minute (since that I think is the duration of the bell) based on how fast you want the info. just make sure it is not longer than the time duration of the ring. Sorry if you knew all this and I missed what exactly you were asking :) 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/zPdT8By.jpg ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dl93p0q) 
Yes I am indeed looking for the maxima!
this code will automatically generate files names 1.jpg, 2.jpg, 3.jpg, etc. IF there is a file with the same name it will open a dialogue box to ask if you want to overwrite. If this isnt the functionality you want, what is? Do you want it to just automatically keep going from whatever the highest number photo files is? If so, replace everything after " if exist(filename, 'file')" with kk=Index; while exist(filename,'file') % keep trying new filenames, each increased by 1 integer, until you find one that doesn't already exist filename=[folder,num2str(kk),'.jpg']; kk=kk+1; end imwrite(img.cdata,filename); NOTE: I haven't actually tried running the code, but it should run Also, if the current code is always overwriting even when you say not tom, it is becauseyou have the write file command both inside and outside of the if statement block, as regardless of whether your response enables the block or not you make at least 1 call to the file writing function. Im fairly certain that this isnt how it was on the Matlab documentation page you found it on...
it still rewrites every file in the folder with the current one and i get this error msg: Error using imwrite (line 454) Unable to open file "3.jpg" for writing. You might not have write permission. Error in falsecolorluminacemap (line 66) imwrite(img.cdata,filename); i want exactly what you described.
here is the link: https://de.mathworks.com/matlabcentral/answers/289707-how-to-prevent-image-that-has-been-stored-not-overwrite-using-imwrite
This is a little bit like saying you want to get a good grade on a test and then asking whether or not your pencil is capable of writing down the correct answers. Does Matlab do the base calculations you would been to perform to model a maglev train? Absolutely. But, thats really not saying much. You could argue that a 4-function calculator would be capable of this, since everything that matlab does that is more advanced is ultimately just a combination of logical operators (combining 0's and 1's to get more 0's and 1's) that are strung together in rather elaborate ways. Now, if you want to know if there is a maglev modeling algorithm already put together for Matlab or if you would have to make one yourself - idk. Google is your friend for questions like this.
So a few things. 1) the if statement actually is fine. In the future I encourage you to properly format code so its readable, otherwise its very easy to overlook something. 2) try replacing the folder with folder = 'C:/Users/Taiko/Desktop/FalseColor/'; . Sometimes Matlab likes forward slashed better. 3) you might need to close previously opened files. use fclose('all') 4) you can change individual file permissions with [fileattrib](https://www.mathworks.com/help/matlab/ref/fileattrib.html) 5) if you haven't restarted matlab / your computer for a while - do it. Sometimes random errors just creep up, and restarting almost always is the solution to fixing them. It would also help if you re-post the exact code you are using (with my modification). The modification I added *should* prevent you from ever overwriting a file, so I really don't understand why it is still happening. **EDIT** oh, I think I know what the problem is. filename isnt defined when you check if it exists. immediately BEFORE the "while / if exist(filename,'file')" line, add "filename=[folder,baseFileName];". Also, make sure to remove ALL the " imwrite(img.cdata,fullfile(folder,baseFileName));" lines that are above the exist(filename,'file') line. 
RGB = imread('IMG_0043.tif');% Read Image info = imfinfo('IMG_0043.CR2'); x = info.DigitalCamera; t = getfield(x, 'ExposureTime');% save ExposureTime f = getfield(x, 'FNumber'); % save FNumber S = getfield(x, 'ISOSpeedRatings');% save ISOSpeedRatings D = getfield(x,'DateTimeOriginal'); I = rgb2gray(RGB); % convert Image to greyscale K = 480; % Kamerakonstante(muss experimentel eavaluiert werden) % N_s = K*(t*S)/power(f,2))*L L = power(f,2)/(K*t*S)*1000000; % J = immultiply(I,L); % multiply each value with constant , so the Image is Calibrated to cd/m^2 %%%% %%%% hFig = figure('Name','False Color Luminance Map', 'ToolBar','none', 'MenuBar','none'); % Create/initialize default colormap of jet. cmap = jet(16); % or 256, 64, 32 or whatever. % Now make lowest values show up as black. cmap(1,:) = 0; % Now make highest values show up as white. cmap(end,:) = 1; imshow(J,'Colormap',cmap) % show Image in false color colorbar % add colorbar h = colorbar; % define colorbar as variable ylabel(h, 'cd/m^2')% add unit label caxis auto % set axis to auto datacursormode on % enable datacursor img = getframe(gcf); folder = 'C:\Users\Taiko\Desktop\FalseColor\'; ImageFiles = dir(folder); a = length(ImageFiles)-1; for Index = 1:a baseFileName = [num2str(Index),'.jpg']; imwrite(img.cdata,fullfile(folder,baseFileName)); end filename = fullfile(folder, baseFileName); kk=Index; while exist(filename,'file') % keep trying new filenames, each increased by 1 integer, until you find one that doesn't already exist filename=[num2str(kk),'.jpg']; kk=kk+1; end imwrite(img.cdata,filename); i also posted it on mathworks and i got this reply: "It is not clear why you have a loop that writes sequential files 1.jpg, 2.jpg, etc., one for every existing file (with any name) inside the folder (skipping the last one), with all of the files having the same content. And then that, having been done, a test is made about overwriting a completely different file name ??"
Overall, I think this should work without errors. img = getframe(gcf); folder = 'C:\Users\Taiko\Desktop\FalseColor\'; ImageFiles = dir(folder); a = length(ImageFiles)-1; for Index = 1:a baseFileName = [num2str(Index),'.jpg']; filename=[folder,baseFileName]; kk=Index; while exist(filename,'file') % keep trying new filenames, each increased by 1 integer, until you find one that doesn't already exist kk=kk+1; filename=[folder,num2str(kk),'.jpg']; end imwrite(img.cdata,filename); end 
works nice !!BUT it saves every image now that many times of what it's number is 
Do you mean like it saves 1 copy of the 1.jpg, 2 copies of 2.jpg, 3 copies of 3.jpg, etc? If so, how is it doing that without overwriting another file of the same name? Using the code I just posted, it should first find a filename in the while loop that hasn't been used before any files are written, and then once it found an unused filename it should just write a single file.
i get: 1.jpg(first image) 2.jpg(second image) 3.jpg(second image) 4.jpg(third image) 5.jpg(third image) 6.jpg(third image) 7.jpg(third image) for the next one i get 8 copys
Look at your code line-by-line and compare it to what I posted. I bet you find a few things that arent the same that explain this behavior.
hm i copy pasted it but i just checked it, it is the same, but still thank youcvery much! maybe i will find the error
Would while loops speed things up instead?
no. A `while` loop would be the same. The key is to try to think in a vectorized way. Also, Test the following for speed: clear; % So you know I am starting with nothing for i = 1:1e6 A(i) = i^2; end To: clear; % So you know I am starting with nothing A = zeros(1,1e6); for i = 1:1e6 A(i) = i^2; end to clear; % So you know I am starting with nothing A = (1:1e6).^2; % Notice the "." before the "^" 
Search dream toolbox.
If you're looking for the max value, then try just using `max`. I got your code to run a little more than twice as fast by simply removing the inner-most `for` loop. You have: D=[]; for indx3=1:length(f1); pf=imag(Jackle29(Gi(indx1),Gii(indx2) ,9.81 ,1005.9 ,0.007 ,555.2376239373641 ,0.000652006 ,6.2024 ,f1(indx3))); D=[D,pf]; end What you should consider instead of looping through indexes of `f1` is to just pass all of `f1`, all at once: D=imag(Jackle29(Gi(indx1),Gii(indx2) ,9.81 ,1005.9 ,0.007 ,555.2376239373641 ,0.000652006 ,6.2024 ,f1)); This skirts using the `pf` term as well, and just assigns the entire output to `D`, all in one shot. You get an error as-written, though: Error using / Matrix dimensions must agree. The solution there is to go into your `Jackle29` function and replace the regular divisions, `/`, with element-wise divisions: `./`. That's it. % OLD - % Nu=((Gii/omega)-i.*(Gi/omega))/rho; %kinematic viscocity % NEW - Nu=((Gii./omega)-1i.*(Gi./omega))./rho; %kinematic viscocity That's the only change you need to make inside the Jackle function. You could *probably* remove the second loop, for `Gii`, but I'm not familiar enough with your math to verify the results to give you step-by-step directions to do so. I would just suggest that you transpose your frequency band `f1`, then use `repmat` to expand your desired frequency band from an `Nx1` *vector* to an `NxM` *matrix*. Then, for the `Gii` values, also use `repmat` to expand from a `1xM` *vector* to an `NxM` matrix. `N` here is the number of elements in your `f1` band - `N = numel(f1);`; and `M` is the number of elements in your `Gii` set - `M = numel(Gii);`. The entire point of the above set of operations is to set yourself up to where you have a bunch of columns, where each column represents a test you want to run. So, for each *column*, you have the entire frequency band `f1.'`, and you a particular value of `Gii`. As you progress *across* the columns, your frequency band remains constant but your `Gii` values are changing. Once you have a couple large `f1` and `Gii` matrixes, you should be able to do all the math all in one step. This is the *vectorizing* term everyone keeps mentioning - doing all the math at once. You should see *dramatic* speed improvements doing this. The trouble with vectorizing is figuring out how to pack to and unpack from the vector/matrix form. I've gone over how to pack into it above; to unpack, I would again urge you to use the `max` command if all you care about is the global max. `max` will take a matrix and find the "global" max for *each column.* So, if you have your matrix setup where each column is a new value for `Gii`, as directed above, then when you do your operation, the output will have the same form - each column is a vector of results from each value of `Gii`. Use `max` on that output matrix, and you get the global max for each set of results: [pks,locs]= max(bigD); Note that the `max` function gives indices along with the values, just like the `findpeaks` function does. Now that you have a `vector` of peaks, and a `vector` of locations, you can do your tests just like you had before, to see which plots you want to make. Note that here I had to invert your criteria because these are the conditions for plots you want to *show*, where your original conditions were for plots you wanted to *skip*: condition1 = f1(locs) == 29.4; condition2 = pks&lt;2.118e-05; condition3 = pks&gt;2.113e-05; Now, in the final step, you're trying to pick out the *columns* that meet your test conditions. This means that you want to plot *all rows*, which you do with the slice operator `:`, and then only the columns that meet your conditions: allConditions = condition1&amp;condition2&amp;condition3; plot(expandedF1(:,allConditions) , bigD(:,allConditions));
Since I made the first top-level reply, you posted the code you're using. I [made a big reply](https://www.reddit.com/r/matlab/comments/6rw8yg/speed_up_matlab_code/dla6i93/) about how/why I took the steps I did to vectorize your code, but I figured I'd just post the result here. **Please note** I haven't error-checked this; it's up to you to verify the numbers are coming out correct since I made the edits (but they should). **I will caution you that I think making all of those plots is the wrong approach.** I don't think you can get through very many of these before your computer crashes, if it displays the plots at all. You are looking at up to 2.2 **billion** plots. *What good is a plot that can't be read?* That said, from a performance perspective, I cut your outer loop's time from ~2,200 ms per loop to about 90 ms per loop. function Jackle29=Jackle29(Gi,Gii, g, rho, gamma, k, h, df, f) f2=f+(1i.*df); omega=(2.*pi.*f2); %complex freuqnecy %omega=f2; % OLD - % Nu=((Gii/omega)-i.*(Gi/omega))/rho; %kinematic viscocity % NEW - Nu=((Gii./omega)-1i.*(Gi./omega))./rho; %kinematic viscocity iomega=1i.*omega; k2=k.^2; Nuk2=(Nu.*k2); f=iomega./Nuk2; R=(1-iomega)./Nuk2; zeta=(1-R).^0.5; z2=zeta.^2; z12=1+z2; z122=z12.^2; kh=k*h; zkh=zeta*k*h; coshkh=cosh(kh); coshzkh=cosh(zkh); sinhkh=sinh(kh); sinhzkh=sinh(zkh); N=-4*zeta.*z12+zeta.*(4+z122).*coshkh.*coshzkh-(4.*z2+z122).*sinhkh.*sinhzkh; D=zeta.*sinhkh.*coshzkh-sinhzkh.*coshkh; grho=g.*rho; Nu2=Nu.^2; k2=k.^2; gk2=gamma.*k2; k3=k.^3; ND=N./D; inversechi=gk2+grho+rho.*Nu2.*k3.*ND; %equation 29 Jackle29=(inversechi).^-1; %inverting the result of equation 29 to get the complex dynamic susceptibility end Did you see those three periods I added? Because that's where all your speed comes from. Again, it's all explained in my big post. Here's how you *utilize* the speed those periods provide: clear all Gi=[4.478:0.0001:10]; Gii=[0:0.0001:4]; f1=[29:0.1:30]; N = numel(f1); M = numel(Gii); expandedGii = repmat(Gii,N,1); expandedF1 = repmat(f1.',1,M); biD = zeros(N,M); hold on xlabel('frequency (Hz)'); ylabel('chi'''); nSamples = numel(Gi); for indx1=1:length(Gi) fprintf('%d of %d\n',indx1,nSamples); %disp(Gi(indx1)); %tic; bigD=imag(Jackle29(Gi(indx1),expandedGii ,9.81 ,1005.9 ,0.007 ,555.2376239373641 ,0.000652006 ,6.2024 ,expandedF1)); [pks,locs]= max(bigD); condition1 = f1(locs) == 29.4; condition2 = pks&lt;2.118e-05; condition3 = pks&gt;2.113e-05; allConditions = condition1&amp;condition2&amp;condition3; plot(expandedF1(:,allConditions) , bigD(:,allConditions)); %fprintf('%.4f ms \n',toc*1000); end That's it. Arguably easier to read, but ~25 times faster than your original code. But again, please, *consider some other way to display the results that isn't a bunch of plots*. My computer failed to generate the plot after about 250 iterations. Try ctrl+break or ctrl+c after the first 10-20 iterations to verify your results. 
this is the solution i work with now, note that it now gives the files the date as name and not numbering: img = getframe(gcf); nowstr = datestr(now, 'yyyy-mm-dd_HH_MM_SS'); folder = 'C:\Users\Taiko\Desktop\FalseColor\'; ImageFiles = dir( fullfile(folder, '*.jpg') ); if isempty(ImageFiles) next_idx = 1; else lastfile = ImageFiles(end).name; [~, basename, ~] = fileparts(lastfile); file_number_str = regexp('(?&lt;=.*_)\d+$', basename, 'match' ); last_idx = str2double(file_number_str); next_idx = last_idx + 1; end newfilename = fullfile( folder, sprintf('%s_%04d.jpg', nowstr, next_idx) ); imwrite(img.cdata, newfilename); 
Since you already mentioned k-Wave, the k-Wave website (http://www.k-wave.org/documentation/k-wave.php) has a huge number of examples which you can copy and paste into MATLAB if you want to jump right in. They also have a 'Build Your Own Simulation' section there which teaches you the basics. When I wanted to learn k-Wave, I spent 4 hours going through that site, running and studying their built in code, and was able to get most of the simulations I wanted up and running. Safetylok mentioned dream toolbox, and that looks promising as well. If it allows you to specify a transducer material and shape, and provide a drive signal in volts, then that will be all you need. I haven't used it myself, but I am going to look into it as an alternative to k-Wave. I've found k-Wave to be fairly intuitive as to how it works, but it does not allow a drive voltage input. You need to determine the transducer reaction to this drive voltage yourself. Some other ultrasound toolboxes are Field II, and Focus, although I've not found either of those to be as intuitive to learn or use. Other than the software you choose, the most difficult part of your question comes from the +/- 50 mV amplitude because you haven't specified your transducer. What kind of piezoelectric? What thickness? Is it tuned to 5 MHz? That will make a difference in the surface velocity of the transducer that developed from your drive signal, and ultimately the pressure you get. If you are only interested in the relative shape of the pressure field and not the specific pressure, the drive amplitude is irrelevant (as long as you stay in the linear regime), as is the piezoelectric material. In that case, you really only need to know the shape of your transducer for CWD, and k-Wave will let you define this pretty easily. 
Can you tell me which function of K-wave will help me simulate an acoustic ultrasound signal? I can find out the reqd parameters like the shape, etc
&gt; even though my solution is correct. How do you know your solution is correct? Looking at your code, I'm pretty sure you have an error, but I'm curious of your claim. 
Thank you for your response, I researched it with the group, we all had a similar solutions but this one was the most accurate; That's why I had this confidence. &amp;nbsp; [u,v] = meshgrid(1:4); &amp;nbsp; this is the most probably the error you might refer to. Because the H and D functions have the correct syntax. 
No, that's not the error I'm talking about. The outputs of `meshgrid` are matrices. Thus, `u` and `v` are matrices. When you tell MATLAB to square a matrix, it matrix multiplies the matrix together. If you want to do element-by-element multiplication, then you want to use the `.` operator. For a write-up on this, [check out this article](http://www.glue.umd.edu/afs/glue.umd.edu/system/info/olh/Numerical/Matlab_Matrix_Manipulation_Software/Matrix_Vector_Operations/elementwise). 
The 'Getting Started' part of that site I linked is really good for a beginner, and you should follow it. You'll get most of the way there on your own by follow it. The example here (http://www.k-wave.org/documentation/example_tvsp_transducer_field_patterns.php) is a curved ultrasound transducer where the example creates a frequency adjustable ultrasound field. If you scroll to the bottom you'll see the final results of the pressure field produced. If you can get this to work for you, that should get you close to coming up with the full 2D ultrasound field given any transducer.
I reran on a different MATLAB on windows and received the same as the windows version. I was only writing code in Mac but the results don't change drastically anyways. I was mainly looking for a reason as to why it happened. Also the Mac OS and Windows MATLAB are different versions. 2014 vs 2017a
Just out of curiosity: In what fields do you use such high precision?
 + &amp;nbsp; Thank you, you are correct. I used the element wise operator and now it looks like this: http://i.imgur.com/LOPo0IQ.png but the left axis does not increment by 0.5 such as the one on the right side. &amp;nbsp; H=exp(-D/O^2) &amp;nbsp; no need to use the element by element here because its scalar. &amp;nbsp; [u,v] = meshgrid(1:4) &amp;nbsp; I tried changing it to `[u,v] = meshgrid(1:0.5:4) ` but the left axis still increment by 1. I keep looking for another error but still not finding it.
Six posts. Nice. 
Yeah, I'm really serious about my project and I'm pretty baffled by some stuff and I need help. So yeah, six posts. I'll love you forever if you straighten me out about this stuff.
Have you tried using Simulink.Parameter objects? 
I don't have MATLAB open, but you can view signal dimensions of your referenced models. There is an option to show signal dimensions under either Display or View. 
There are other ways to create referenced models. Under subsystems in the Simulink library there is a block called "Model". You can use this and point to other Simulink models. What I'm getting at with this, is that you can copy/paste your subsystems into new SLX files and go this route. HOWEVER, if you do this, the configuration parameters will not carry over and I'm sure you know that the solver settings, code generation options, and sample times are extremely important here. I would look into using configuration references for this because if you are going to have multiple references, this is easier to keep track of. http://www.mathworks.com/help/simulink/ug/referencing-configuration-sets.html This is a roundabout way of doing this, but may give some more piece of mind later on. Specific to why the convert button is disabled; did you run all of the advisor checks first? (i.e. make sure it's an atomic subsystem... and all that stuff). You can only convert once you run and pass all of those tasks. 
There are probably other ways to do this without thresholding but at some point you have to design a decision rule. In cases like this where the frequency response with a horn and without should be pretty different, thresholding the difference between the two is pretty appropriate. 
Thank you so much. I will try. Also, have you tried using the kspaceFirstOrder1D function? When I'm trying to run the example file in it, it says that there are errors in the function. Do let me know if you're able to run it. 
Orbital mechanics might make use of it. Of all my engineering education, calculating orbits required me to carry the most significant digits of anything else I've ever done. The variation in orders of magnitude are huge and only carrying 3 or 4 significant figures will ruin some calculations. Double precision was good enough when I worked homework problems but I could see where actual professional application in orbits and trajectories might benefit from more.
Hey, thanks for the reply. The docs I found were ambiguous about how to run the advisor checks. It seemed that these were included in the 'convert' action that was disabled. (Please confirm.) If not, I need more explicit instructions on how to run the checks because I'm obviously not getting something. I spent a day on this a few weeks ago and it still seems like I'm being dense about something. Regarding the cut n paste workaround you mentioned: This is exactly what I've done so far. I hit other issues after this that I've posted about, so I'm looking into ways to back up and use other methods that may work around the problems I can't find solutions for yet. 
Yes sir. However, per the post this isn't giving me enough data since the port data is displayed only in some cases. Ideas?
Thanks for the reply. I have not. I will check on using simulink.parameters (again). It would be great if I can confirm that using Simulink.Parameters objects 1) has more features than using the model workspace GUI and 2) potentially works around GUI datatype\input variable restrictions that are hurting me right now. If neither of these are true, I need a new means of initializing referenced models at compile time with non-static values.
Interesting. Thx for the answer! 
I'm in economics. Some specific numerical algorithms require intermediary calculations to be performed in much higher precision. For more details, see this twitter thread: https://twitter.com/antoniomele101/status/894446648696418305
If you use plot with a single vector plot(a) then Matlab will plot the content of 'a' along the y axes while it displays the sample number along the x axes. If you want give Matlab information about the x axes, use plot(x,y) instead, where 'x' contains information about the x-location of each point while 'y' contains the corresponding y-location. See &gt;&gt; doc plot for more information.
Thanks for your reply. But if I use plot(x,y), doesn't is means that I have to set another array y? Then I have a problem about the y axis scale.
What is your y-data? Do you want a horizontal line at some y value? 
I must admit, I'm still confused about what you want to see in the end. If you just want a line from [0,0] to [1,1] with stepsize 0.0001, then you can simply write plot(x,x); Matlab will focus on what data you hand over. If you're still concerned about white space around it, you can limit the axes element to the section you are interested in. Note, this will NOT change your graph, it will just change which part of it you can see. figure; hAx = axes; plot(x,x); set(hAx,'XLim',[0,1],'YLim',[0,1]);
Interesting. I'm not sure why the "convert" button would be grayed out. All it does is run each of the 5 checks. You can run each check manually by click on it in the tree in the left pane. You should see "Check Conversion Input Parameters", "Check Model Configurations", etc. If you click on the first one, you should see a "Run this Task" button. Is that enabled?
As /u/Neijan said, I don't know what you're expecting. Typically, when you plot, you have some "independent variable" (generally called 'x'), and a "dependent variable" (generally called 'y') that, appropriately, depends on the independent variable. This is generically written `y = f(x);` or, "y is some function of x." If you are looking to plot data, you need an "input" (independent variable), and an "output" (dependent variable). For example, you might plot the number of hours you sleep *per day of the week*, or you might plot average highway speed *as a function of vehicle density*, etc. So your "x" would be day of the week, or vehicle density, and your "y" would be hours of sleep or average highway speed. Then you `plot(x,y)`. As it stands, you have a bunch of points, evenly spaced, between 0 and 1. When you just `plot(x)`, Matlab has no way of knowing what `x` is supposed to mean, so they plot the data *by sample number*. You have 10,000 samples, so they plot "sample 1 is x(1), sample 2 is x(2), etc." They have one point for each element in `x`. You could re-write `plot(x)` as `plot(1:numel(x),x)`, where `numel()` is the NUMber of ELements in a matrix/vector. So, yes if you use `plot(x,y)`, you need another vector `y`, but `y` is the data you're trying to show. For example, you might try `plot(x, x.^2);`, or `plot(x, 2*x - 1);`, etc. 
You're right, however that wasn't what was causing my error. I figured out the problem a few days ago so for anyone else who's interested fileattrib(strcat(movname,'.h5'),'+w'); plist = 'H5P_DEFAULT'; fid = H5F.open(strcat(movname,'.h5'),'H5F_ACC_RDWR',plist); dset_id = H5D.open(fid,'/Matrix'); while r &lt;= (size(3)-2001) h5_start = [r 0 0]; %This changed h5_block = [2000 1440 1080]; %This also changed mem_space_id = H5S.create_simple(3,h5_block,[]); file_space_id = H5D.get_space(dset_id); H5S.select_hyperslab(file_space_id,'H5S_SELECT_SET',h5_start,[],[],h5_block); data = movie.getData('frameInds', r:2000+r); H5D.write(dset_id,'H5ML_DEFAULT',mem_space_id,file_space_id,plist,data); H5D.close(dset_id); H5F.close(fid); r = r+2001; end The error was caused by improperly defining the dimensions, I had them in the wrong order. I'm working with a dataset comprised of grayscale values and time, generally matlab has the time dimension after the spatial dimensions, but when defining the h5_start and h5_block it needs to come before the spatial dimensions. The other change here is that hdf5 use indexing of 0 not 1 so h5_start begins at 0 to include the whole dataset.
I would guess the best approach would be minimizing sum-of-squares, but I also am not 100% sure I understand your problem. I googled "Jaynes Cummings function" and that didn't help anything lol. Anyways, it sounds like you have a particular input, `x`, and two sets of test data for that input, `y(:,1)` and `y(:,2)`. Each data set *should* be modeled by the functions `function(1)` and `function(2)`, which are related in that they should both have the same parameters `g` and `fC`. You're trying to estimate `g` and `fC` by altering them until `subs(function(1),'x',x) = y(:,1)` and `subs(function(2),'x',x) = y(:,2)`, right? My approach would again to look at sum-of-squares. Make *one* function, `fun3 = function(1)^2 + function(2)^2`, and *one* set of sample data, `y3 = y(:,1).^2 + y(:,2).^2;`, and then proceed to fit your data that way. It looks pretty straightforward: &gt;&gt; simplify(expand(fun(1)^2 + fun(2)^2)) ans = fC^2 + 2*g^2 + x^2 If that *is* your function, though, note that it just looks like a parabola, `y = ax^2 + bx + c`, where `a=1`, `b=0`, and `c = fC^2 + 2*g^2`. It looks like it doesn't really matter what `fC` or `g` individually are; one could be zero and the other could supply all of the up/down shift.
&gt;You're trying to estimate g and fC by altering them until subs(function(1),'x',x) = y(:,1) and subs(function(2),'x',x) = y(:,2), right? Yep. Ill give your suggestion a try and see how it goes, thanks. * It really just smooths out the transitions so there isn't much for the optimization to work against. When x ~ fC, the functions look like; https://www.researchgate.net/profile/H_Haug/publication/236846242/figure/fig9/AS:271815436140563@1441817258567/Figure-3Color-online-Anticrossing-of-LP-and-UP-energy-levels-when-tuning-the-cavity.png (as an example)
Sorry I didn't explain my words well. What I want is that if I have 1000 points for y value to show, then I use plot(x,y), it may have 1000 scale on the x-axis. But I hope it can show '1' at x limit, correspond to the '1000' value at y. Which means: the x-axis display limit 0 to 1, and y-axis display limit 0 to 1000. 
I am really confused about what you think the command `plot(x,y)` will do. The `plot` command takes two arguments, `x` and `y`. The length of `x` must be the same as `y` and it plots all of the pairs. So, if you say `x = 0:0.0001:1` and `y = 2*x.^2` and then `plot(x,y)` your x-axis will be between 0-1 and your y axis will be between 0 and 2. 
Ill be damned....Ive used "eps" for years and always assumed it was a constant (or perhaps 2 constants, for single and double). It never even occurred to me that it might be a function. Good to know.
Could you post your code please?
I typed ((1)/((k+6)*(k+7)))=((A/k+6)+(B/k+7)) into Mupad. Obviously it didn't work, and Mupad seems like the best way to go about doing problems like this. That is all I have as for code. Like I mentioned in my post, I am not sure how to start with the problem on Matlab. I only know how to take the limit at the end. I apologize for my limited knowledge, but it's all I could come up with.
Matlab doesn't directly model things like thermodynamic properties. It is a tool that can be used to implement a model of the thermodynamic behavior. But, there are tons of nuance and steps along the way. There exist many tools that can do thermodynamic modeling though.
The following makes no sense to me: &gt;I got a polyarea of 704.9407 from measuring a bar that is 35 microns... Given that this length represents 35 microns... *Polyarea* gives you an area in pixels^2, not a length. If you want a scale factor for pixels to microns you need to measure the length of the bar in pixels. 
All of the checks in the left pane have the 'Run this task' button disabled. There's a message below that states: "Check does not support library models". I have all my subsystems within a library...and I'm loading the conversion menu via a right click on the subsystem from within the library window. Is this the wrong way to do it?
You have an unknown process. You have multiple inputs (concentration A/B, and concentration of chemical C, D, E, etc). You have one output: growth rate. Be very clear as to what you are trying to identify. To me, seems that you want to identify the sensitivity coefficients of cell chemical concentrations as they relate to growth under the different solutions, i.e. the more sensitive, the more growth. Have a look at the sensitivity analysis literature for ideas. Example: http://i.imgur.com/34LubM7.png
This is a mathematical technique called, surprisingly, optimization. Search the documentation for the relevant functions, like fminsearch, fminunc, fmincon, etc. 
That's not a Matlab error. Do you not have the option to run the code in your own instance of Matlab before submitting it? I'm not really sure what that error is even supposed to be referring to. Also, (e^1 ) ^-0.8x ? Really? That's a weird way to write that :) 
This data is a scalar function of two variables, so you could display it as an image or heatmap, a surface plot, or a 3D bar chart. Edit: also as multiple traces on a line plot. 
Thanks for replying. I have run it and it plots the output on a graph but to verify that I did my homework I have to submit it on my uni matlab site which checks our code. The expected size output is what keeps failing.
Sure. Minimum $500/hour, including time spent learning the technical background. Estimate 2 months for a demo and 6 for something reliable and well validated. So you'd want to budget $500k before any contingencies. And keep in mind this will be a restricted simulation, not a general purpose analysis tool. 
And did you check the size of the data? Plotting every 0.1 from zero to 3pi should give you 95 points. How many does your code generate? 
This is an optimization problem, but kind of a hard one due to the fact that one of your inputs is discrete (which club you pick, you can't pick a club that's 1/3rd 6 iron and 2/3rd 5 iron, for example). Discrete optimization is notoriously difficult. But, you're saved by the fact that you have a limited number of clubs, so you can run a continuous optimization over each club, and then choose the best club. If I were doing this project, I'd do something like this: 1. Define parameters for each club. I don't know a lot about golf, but whatever parameters you'd use for your simulation (max range, expected amount of slice, etc). 2. Define the parameters for the golfer. What I mean by that is, I'm assuming there are normally multiple clubs which could make the shot, but you want to know which club gives you the best chance of being closest. So for this, you'd put in things like "how consistently can you provide 80% power (so, if you go for 80%, do you sometimes hit at 70% and sometimes at 90%, or can you go between 78% and 82%? Whatever else are parameters of you). 3. Then, for each shot, find the optimal solution for each club. For this I'd point you towards `fminsearch`. This function searches for the minimum solution. You tell it what parameters it can vary, and it finds the combination of parameters which minimizes your cost function. The cost function can be anything, but I'd guess you'd make it "distance to the hole." However, you could have something more complex. Say, there's a big sand pit in front of the hole, but a nice green behind it. In that case, you'd want a more complex cost function, one which penalizes being short more than being long. Now, in your example, the only parameter is power of the swing (because we're doing each club separately). So, you tell fminsearch to vary power, and then see which ones minimizes the cost. Now, here's where the parameters of the golfer come in. You let fminsearch vary the value of power, and then you do a Monte Carlo simulation centered on that value. That is, simulate yourself attempting to use that club at that power say 10,000 times, using the parameters of the golfer to vary the inputs slightly (but centered at the current value- look into the function `mvnrnd` for this- it's a multi-variate normal random distribution). Then, for each of the 10,000 simulations, calculate the sum of cost (aka- distance from hole or whatever more complex one you choose). `fminsearch` will then find the optimal value for the currently selected club 4. Now, compare clubs to see which solution from which club was best (`fminsearch` can return the total cost, thus you can select the club who had the lowest total cost). Then use the found solution for the found club. This is kind of a complex minimization problem, but it should be a fun one. Good luck, feel free to follow up with other questions. 
I finally got it! This is the code that worked. function y = dampedOsc(x) x = 0:0.1:3*pi(); y = exp(-0.8*x).*cos(3.*x); plot(x,y, 'kd-') end Fplot was originally what we were givento start with but that wasn't working so I changed it to just plot and reformatted and the test passed. Thank you for your help. 
Nice, that's exactly the solution I was hoping you'd find. 
Look at the help for `fplot`. The arguments of `fplot` are `fun` and `limits` (aka, the function to plot and the limits to plot between) not `fun` and `values of x to plot at` as you seem to be using it for. When you want to plot at specific points, you want to use `plot` not `fplot` for your plotting needs. 
Thanks. What confused me as well was my uni gave me an fplot function to "fix" and I assumed that it meant they wanted us to input our own equation and parameters which didn't work until I removed fplot. No idea why but I guess to trick us. 
Gradient aware optimization *really* breaks down when the objective function is stochastic. Fminsearch never uses a gradient, so it might be more robust against this problem. Have you ever actually done this? I'd be very interested in it, since optimizing stochastic problems would have lots of applications, especially in metrology and process control. 
Thank you. I got their eventually. My uni had us start with fplot and we were supposed to "fix" it, I assumed by inputting our own equation and parameters which did not work til removing fplot. I'll will have to do more reading into this.
Or maybe there are ways to control the behavior of fplot to satisfy the test, and they wanted you to learn how to read the documentation about fplot in order to do so. I don't know for sure because I rarely have a need for fplot. 
I know that plot() will show the value we give. As your example, I have x = 0:0.0001:1, and when I plot(x,y), the figure shows 0 to 10000 (I think it because I have 10000 points). What I want is show x axis as scaling 0 to 1.
Actually just type those exact four commands into MATLAB: figure x = 0:0.0001:1; y = 2*x.^2; plot(x,y); If the x axis doesn't go 0-1 and the y-axis 0-2 on that plot A.) I'd be very surprised and B.) Can you take a screen shot of your plots?
I don't think there is. `fplot` can take in a "minimum number of points to plot" but I don't think it can take the exact points. 
I have. And yes, it was a pain, but it did work. What I found is the first thing I had to do was find how many MC runs I needed so that the results were stable to within my desired tolerance (I also manually increased the tolerance where `fminsearch` would stop) (In what was a weird thing I found, and maybe you know why. I found running 10 MC sims of 1,000 runs each, and then averaging those gave more stability than 1 MC with 10,000 runs, doesn't make any sense to me but hey). But yes, I quickly did learn `fminsearch` worked better than others because it uses a simplex method instead of a gradient decent. In my case I needed it as a "gold standard" for a battle manager I was working on. So I had the "absolute right answer" to compare to, instead of my "quick to calculate" approximation I was writing. 
I get a length of 68 pixels 
I would definitely `meshgrid` the concentrations of A and B and then use the growth rate for the z value in a `surf` plot. You can see the peaks, valleys, etc. pretty quickly, and you can rotate the views however you want, too. Just be sure, whichever plot method that you use, that you set the plot scale correctly, or you could wind up "blowing up" the plot and making relatively insignificant changes look massive. Matlab, by default, I think wants all of its plots to exist in a square or cube, so it will auto-scale the z-axis (for a surf plot) to force the data to fill the entire plot. If your min value is -0.01% of the mean or -1000% of the mean, it's going to look the same in the plot *unless you scale the axes correctly.*
I don't understand your question. You already have your data. If you wanted, you could do something like `plot3(data(:,1),data(:,2),data(:,3));`. I don't understand the destination format. What is the point of padding the data you have with null data? Also, FYI, if the data point doesn't exist you could replace it with `NaN` instead of `0`. Zeros will plot if you try a plot command, NaN won't. I guess the better question is, *what are you planning to do with the data after you reshape it?* 
I need to reshape the data (emission-data) to write into a netCDF file and after that it is going to be used in the program WRF-Chem. I'm just an intern, so I don't know everything about the process. Fact is though, that I need the data in this format for everything to work correctly (including zeros instead of NaNs).
https://nl.mathworks.com/help/matlab/ref/reshape.html Or just construct a For loop that performs your desired operation for every column/row
randi
rand() returns a random number between zero and one. If you are looking for a floating number between one and ten you could do, 1 + (10 - 1) * rand(). If you are looking for integers, randi( [1, 10] ).
Okay, I figured it out! I'm using vec2mtx first to create a grid and then fill the grid with imbedm. Example: latlim = [-34 -32]; lonlim = [-70 -68]; [Grid, R] = vec2mtx(lat_s, long_s, 100, latlim, lonlim); Grid = imbedm(lat_s, long_s, Pb_s, Grid, R); %I don't know why, but some values are still ones. So I need to convert them to zeros Grid(Grid == 1) = 0; Now I have the data grid I want and adding the Lat/Long values in the first column and row is simple.
What exactly do you mean by "cannot use the editor"?
rand and rani will give you uniformly distributed numbers. If you are looking for normal distribution, you need randn.
I am not sure about operating other programs, but there are probably ways to achieve these things in matlab. Why not just save some text to a text file through matlab?
While saving a text to a text file in matlab is possible, the intention was simply to learn something new and fun with matlab. :) 
They are really good with support, based on own experience. Just wanted to reiterate it.
I don't think it's something matlab would really be suited for. You could launch other programs, but to interact with them I believe you'd have to write some sort of a communication function between them. See some info here: https://www.mathworks.com/help/matlab/matlab_external/run-external-commands-scripts-and-programs.html
I would only recommend using matlab for more numerically oriented tasks it's where matlab really shines. If you want more general scripting I'd really recommend python, ruby, or perl. 
If that is your goal, then I recommend exploring the actxserver function. It can do a lot of things (although you are restricted to windows). However, as the other users mentioned, MATLAB is not really designed for what you are describing. A lot of this (To me at least) feels like it is an after thought for MATLAB, while other languages were designed with these kind of manipulations in mind.
Regarding your questions: 1. Matlab doesn't start out "knowing" how big `vx0` or `vy0` or any of the others are going to be. You never defined those variables in advance, but you're saying, in the loop, "the next element is ___." If you *predefined* how big those variables were going to be, then Matlab could allocate the correct amount of memory up front. Instead, it's allocating the space for a single value (a "double"), then when you index it has to go find a new slot of size double, and it can't linearly index that space in memory because it didn't allocate the memory as a large chunk. You can "preallocate" by doing something like `vx0 = zeros(1,L);`. This creates `vx0` as a `1xL` array *all at once*. You can then assign values as desired. This won't make much of a performance difference for you right now because your data set is small, but it's a good habit because it will cost a lot when you work with very large data sets. 2. When you run the code, you don't print the *angle*, you print the *index* of the angle. Matlab is *one*-indexed, as opposed to being *zero*-indexed, like C++. So, the first element of a vector is *one*, not *zero*. If you try something like `myVar(0)` you get an error. You could get the right answer for the wrong reasons by just subtracting one from the index, but the better answer would be to recall the correct angle by *using* the index that gave you the max distance. You can do this with the variable you created but never used (\facepalm) - `max_angle`, or by just using `angles(B)` directly. Personally speaking, I try to avoid creating a variable if I'm just going to use it once, like for printing. You should also consider being more verbose in your variable names - instead of calling something `B`, try `maxDistIndex`. Sure, it's more to type, but then you can do something like `fprintf('Maximum distance was thrown at an angle of %.2f degrees.\n', angles(maxDistIndex));`. It's clearer what the index *is*. Otherwise, you could read `angles(B)` and then have to look through the code to find what function *generated* `B` to tell what the heck you were trying to do. Again, nit-picky kind of point and definitely a personal preference, but I try to be as legible as clear with the variables as I can because I seem to get moved around on projects a lot, so I typically re-visit code I've written months or years earlier. Refactoring because I was too obtuse is the pits.
It sounds like you have more than one keyboard connected to a single computer. If this is the case, you will probably need to create an intermediate program that runs on your OS that provides Matlab access to each of these devices. In my brief Goolging this seems to be the best, and apparently only, option for those wishing to ([a](https://www.mathworks.com/matlabcentral/newsreader/view_thread/301735)) use two mice or ([b](https://superuser.com/questions/77561/is-it-possible-to-use-different-keyboards-for-different-applications)) attempting to have one keyboard dedicated to Matlab and another dedicated to their text editor. If you describe your problem/questions again with more detail perhaps another solution can be found.
Kind of. I'm running a psych experiment. There are 2 participants and they need to be able to respond to a prompt independently. The way I have it now I do two separate instances of KbCheck(), where I specify users as in: KbCheck(1) Get this response. KbCheck(2) Get this response. One for user 1 and one for user 2. The issue is user 1 always must answer before user 2. I want them to be able to respond in any order. As in -Get Key Pressed -Which keyboard did it come? -Is this response correct? -Save it appropriately Another option would be to somehow do multiple KbCheck() instances simultaneously. I'm not sure how to call two functions like that and have them run at the same time, concurrently.
+Thank you VERY much for your help. I've literally never coded before and have never taken any classes yet on Matlab. So having someone tell me how Matlab works and where my code went wrong is extremely helpful. I really appreciate it!
You don't have to do two calls exactly simultaneously as long as you're OK with your timing potentially being a couple of milliseconds off. You can just check one keyboard, wait a very brief time (say, 1 msec), check the other keyboard, and repeat. On mobile so it's a pain to type a lot, but it could be something like: got_resp1 = false; got_resp2 = false; while ~got_resp1 &amp;&amp; ~got_resp2 got_resp1 = KbCheck(1); WaitSecs(.001); got_resp2 = KbCheck(2); WaitSecs(.001); end I'm leaving out a lot of stuff there obviously, like the other return values of KbCheck that you can use to see what was actually pressed and when, but hopefully you catch my general drift...
What does your transducer "sense?" An acoustic wave. What *generated* the acoustic wave? The "source."
So I see someone already helped you, so this is just going to be something in general- it is such good practice to read the warnings/errors that MATLAB is giving you. So many of the questions on this sub are from people who's answer are right in the error messages that they just skip over. So I just wanted to say, keep that up. MATLAB's warning/error checking is great and often times just reading the error will be enough. 
If you want anything Matlab to interface with anything C++, the go-to answer is probably to create a mex file. I was always a little intimidated by mex files for some reason, but I think it's just because the functionality is **so poorly documented** relative to the rest of the Matlab documentation. Everything else has usage examples with really detailed explanations of what the inputs and outputs are, etc. The documentation for mex functions is literally to open a mex file on your computer and use it as an example. That said, here's the template that got me going with mex files: //This was written in c++ by leevonk //it is code for a matlab mex file //the code will take in one number value and output two number values //the two output numbers are calculated from the input number //the code will also output a string value //the code will also print "hello world" #include "mex.h" void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { //########################################## //#######--print "hello world"--############ //########################################## mexPrintf("Hello world"); //########################################## //########--Get Stuff From Matlab--######### //########################################## /* declare an array variable to hold the incoming vales */ double* InValues; /* get the values sent from matlab */ InValues = mxGetPr(prhs[0]); /* to use these values that were sent from matlab, do InValues[0],InValue[1], etc according to how many values there are. The InValues will be used below */ //########################################## //########--Return a number array--######### //########################################## /* declare the array that'll be sent to matlab (the * makes it an array) */ double* OutValues; /* Create/allocate return argument, a 1x2 (1 row 2 column) Matrix for the return array's first slot (plhs[0]) */ plhs[0]=mxCreateDoubleMatrix(1,2,mxREAL); /* Get pointer to the return argument */ OutValues = mxGetPr(plhs[0]); /* assign values to OutValues which will reside in the return array's first slot, here we're using the InValues to computer the OutValues */ OutValues[0] = InValues[0] + 1; OutValues[1] = InValues[0] + 2; //########################################### //###########--Return a String--############# //########################################### /* declare the string variable to be sent to matlab */ /* assign a value to the string */ char str[] = "byebye"; /* put the string into the return arrays second slot (plhs[1]) */ plhs[1]=mxCreateString(str); //############################################ //###########--return more stuff--############ //############################################ /* to return more stuff, follow general rules above but put the stuff into other plhs slots, plhs[somenumber] */ } Copy/paste that into a file and save it as `mexTest.cpp`. Be sure to save it somewhere on the Matlab `path`. Then, in Matlab, call `mex mexTest.cpp`. This compiles it to a mex function - you'll need a compiler to perform this step, but if you don't have one then Matlab will give you a couple prompts to get one for free. Here the `void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])` is the template in lieu of a `void main()` or similar. You can prototype subfunctions between header declarations and the `mexFunction()` definition, etc. The only thing I've found particularly frustrating is that you lose the shape of your data. Everything gets handed to the `mex` function as pointers, and they all use linear indexing by column, like Matlab would do if you were to linearly index an array. If you are going to declare outputs, you create the outputs and then get a pointer to the output, then you write to the output via the pointer. The sample file is from [an Instructable I found on creating mex files](http://www.instructables.com/id/Making-a-Matlab-MEX-file/).
Awesome answer, thank you
By chance, it is exactly something like this I need for a project! I can't use the 32-bit dll of a program in my 64-bit matlab so I need to use the GUI of the program (BiSS Reader Software F1) . To automate the use of this program I could use this but I'm having trouble finding the ProgID :s .
This is a good answer for creating a MEX function to be called from the command line, but OP is talking about creating an S-Function in Simulink. There are some pretty handy utilities like [Legacy Code Tool](http://www.mathworks.com/help/rtw/ug/legacy-code-tool-code-insertion.html) and [S-Function Builder](http://www.mathworks.com/help/rtw/ug/legacy-code-tool-code-insertion.html) that can help automate the process a bit. Both of these utilities have ways for you to include external libraries and library paths (which sounds like the problem in this case) so the S-Function is compiled correctly.
This idea worked, however I needed to use the || operator not the &amp;&amp;. Using &amp;&amp; clears the loop with only 1 keyboard keypress. I appreciate it.
Thank you!! I will.
Take a look at this https://www.mathworks.com/matlabcentral/fileexchange/39354-device-drivers 
When you type error("some error") in the command window, do you see the issue? Also, are you forced to restart MATLAB or is just reopening the file sufficient? And is it only the currently opened files that are affected, or can you open new files and edit those? What about unsaved files?
This is not an error. It's even mentioned in the documentation: https://de.mathworks.com/help/matlab/ref/power.html
Ah sorry, haven't used S Functions. 
Your question is a bit confusing. You first talk about coloring circles and then somehow squares? I'll ignore whatever is going to be colored for now and focus only on the selection. From what I understand you want to color four items with three different colors. Two of these colors should be unique. So basically two items green, one yellow, one blue? I'd suggest building that assignment without a for loop at all. If you represent the objects with a length for vector and the colors as numbers from one to three you can just hardcore an initial vector and then randomly permute its entries. Have a look at randperm and permute.
Op didn't suggest it was an error, just unexpected. While acknowledged in the docs, no explanation is provided. Numerical error is thinking in the right direction. Using nthroot to specifically ask for the real root is simply slower than returning only the complex root. 
Don't understand your question entirely but you can put your for inside a while: while (flag){for (begins from reset); if circles colored as you want, flag=0}. That said, this is a terrible Matlab code. You can easily do this with just vectors and perm.
Maybe something like this? N = input('how many?'); W = zeros(1,N); for ii = 1:N W(ii) = input('Weight?') % the rest end 
Are you sure, that it boils down to just being faster? I have no idea how to actually compute the result. Why is it faster to calculate the complex root, if the base is negative and the exponent smaller than one? If it is faster, why is this not the case for all base and exponent combinations? I was thinking about they just want to give the solution with the smallest possible angle of the conplex number. For example they return `5` for `125^⅓`, since `angle(5) = 0`. The angle of the other two other complex roots is bigger (`2/3 π` and `4/3 π`). For `(-125)^⅓`, they return `2.5 + 4.33 i`, since the angle of this number (which is`π/3`) is smaller than the angle of `-5` (which is `π`).
*edit to remove incorrect info* You can use a while loop to emulate this, you can also use "break" to exit the loop immediately. You could also restructure the code to do this in a way that doesn't sound quite so slow and obtuse.
That is an interesting thought, and is consistent, but I'm not sure selecting a minimal angle for the complex argument makes any sense either. I was basing my argument on the [docs](https://www.mathworks.com/help/matlab/ref/nthroot.html?s_tid=gn_loc_drop) &gt;While power is a more efficient function for computing the roots of numbers, in cases where both real and complex roots exist, power returns only the complex roots. In these cases, use nthroot to obtain the real roots E. Formatting 
 n = 6; A = zeros(1, n*2); A(1:2:end) = 1:n; A(2:2:end) = 1:n; A = [0, A]; There is probably a better way, but this is how I would do it.
Thank you so much. 
I use [`kron`](https://www.mathworks.com/help/matlab/ref/kron.html?requestedDomain=www.mathworks.com) for this type of repetition, although your lone `0` at the beginning does need to be handled separately. `[0 kron(1:6,ones(1,2)]`
This works pretty quickly: n = 10; A = ceil(0:0.5:n)
`help unique` gives the following (at the the bottom) Class support for input: - blah blah blah - cell arrays of strings - 'rows' option is not supported for cell arrays - blah blah blah So looks like your example isn't supported.
Do you mean something like plot3? Just plot along a different point along an axis as you iterate and use hold. 
New to matlab, haven't heard of this package. I'll take a look, thanks for the pointer.
It's not a package, just a built in plotting function. There are many! To over lay two plots: x = linspace(-pi,pi,100); y = sin(x); plot(x,y) y2 = cos(x); hold all; plot(x,y2) Look at the documentation for plot3 to see more. 
Yes, logical operations can do this, for example if you just do A == B you will get a 1x4 logical array. &gt;&gt; A == B ans = 1×4 logical array 0 1 0 0 You can then use find or something else to get an index if that is what you want. &gt;&gt; find(A == B) ans = 2 EDIT: This will only work if those particular indices are equal.
I took a look through, and did find the solution to the problem (although it does involve creating a fair amount of unnecessary data points, but that's on me.). Thanks again, this looks like a super useful feature. 
Is there any other way to do this? The way I have things set up, this would be hard to implement in my code. Is there a way of saying this: If ans ~= 0 %do stuff End It might be possible that way. 
General plotting MATLAB tip: create all of your data first, storing it in an array, the plot it all at once using a single call to plot (or plot3)
Yes. You do this: if(sum(A == B) &gt; 0)
iirc, plotyy just overlays two axes. So find the axes handle and set it accordingly. You could use findobj or just the 'more properties' thing in the figure edit panel. 
I assume this is quicker than popping on hold and rendering each iteration?
It is. But more importantly, then you have a single line, so you can manipulate the line easily (change the size/color, hide it, add a legend, etc). Also, get in the habit whenever you plot something, return the optional parameter (something like `h = plot(x,y)`) so that you can manipulate the line by changing the properties of `h`
I went to Axis Properties for the figure and found nothing about the secondary y-axis :(
 arrayfun(@num2str, A, 'UniformOutput', 0) Works fine for me.
That worked perfectly, thank you! Now I am trying to understand WHY that works. 
the arrayfun function applies the specified function (num2str in this case) to all element of the array. So the num2str function is called 4 times in this case, with as input an element of the double array. Instead of only being called once with the entire array as an input. It is neccesary to set the UniformOutput property to false, to allow the double array to be changed to a different datatype (cells in this case). 
Very helpful! That gives me a great starting point for future issues I might run into. Thanks a million
Its there alright. Take a look at the source code for plotyy: open plotyy and you'll see this amongst other hacks to overlay the plots: ... % Set ticks on both plots the same set(ax(1),'YLim',[low(1) high(1)],'YTick',yticks1); set(ax(2),'YLim',[low(2) high(2)],'YTick',yticks2); set(ax,'XLim',[min(xlim1(1),xlim2(1)) max(xlim1(2),xlim2(2))]) ... Here is what findobj does for you: x = 0:0.01:20; y1 = 200*exp(-0.05*x).*sin(x); y2 = 0.8*exp(-0.5*x).*sin(10*x); figure % new figure plotyy(x,y1,x,y2) ax = findobj('Type','axes'); ylim(ax(1),[-1,1]) ylim(ax(2),[-250,250]) As you'll see in the source code for the function you'll have to redo the axis ticks.
You can be clever and set the XData, YData, ZData etc of the plot to update it faster during a loop. Also, you need to use drawnow during the loop to actually show changes to the plot.
Ok, guys, never mind, I fixed it. It should be funSymbolic=symfun(eval(varargin{1}),eval(variable)) instead of funSymbolic=symfun(varargin{1},eval(variable)). But, still, why is that?
What version of MATLAB are you using? string(A) would only work in 16b or newer.
I've tried this below, it doesn't seem to be adjusting the right side, and the "ylim(ax(2),[0,2000])" adjusts the left side and does something weird to the right side: figure('Name', 'AMag Figure'); plotyy(time, dadt, time, dgdt); ax = findobj('Type','axes'); ylim(ax(1),[0,70]) ylim(ax(2),[0,200]) title('Derivative of Amag &amp; GMag'); xlabel('Time [s]') % x-axis label ylabel('Acceleration Magnitude [g]') % y-axis label Also, would you know how to label the right side axis?
nvm I think I figured it out :P, thanks
next time, post your code using something like https://pastebin.com/ an image is just...well I can't copy/paste that and try running it!
1. Yes, it's because MATLAB indexes from 1. 2. Since the DFT is N-periodic, the part of the DFT from -N/2+1:0 is the same as the DFT from N/2+1:N. If you'd prefer it in the usual -N/2+1:1:N/2 format, use fftshift() on the output of fft().
It's because when you represent functions as a character array, symfun is looking for an actual function with parentheses like sin(x), sqrt(x), log(x) etc. It doesn't work without them. A better approach would be to input your function as an anonymous function such as discount(@(x) x^2).
Success. Thanks for your response. I'll try to find out what's going on to my function.
Well you could always build the vector like I described beforehand and then index into it from the loop. Your for loop probably goes through the different elements, so for the i-th element it just needs to take the i-th entry of the vector and color accordingly.
Spot on, can't get s-function builder to recognise external libraries.
Thanks going to have a look through this today. 
In which case if any(A==B) % Do stuff would be more readable 
In which case if any(A==B) % Do stuff would be more readable 
Yeah, that's def the right way. I use that `sum` trick a lot when I need to know if there are, say, more/less than 3 times something matches, and didn't think to use `any` when it's just once. 
You forgot to ask a question. 
Any good topics are welcome
Have you tried worksheet.Rows.Item(rows).Delete; instead of your `for` loop?
Yeah, I thought that must have been it. Thank you very much. You really helped me out!
Posting an appropriate link right now!
"Can you do my project for me?"
Ok, guys, I'm going to mark this as solved, but here's a pastebin link for anyone interested. https://pastebin.com/HLA1pAQV Thanks!
I would assume that your teacher would welcome any good projects. Again, what is your question? Or are you wanting us to pick a topic for you. How would you expect us to be able to do that? We have no clue what you've studied/worked on/are interested in/are capable of/etc. 
If you're doing the color assignments, why would you assign two colors to the same object? Also, it's not clear to me if only one circle *can* be blue and one *can* be yellow, or if one and only one *must* be blue and one and only one *must* be yellow. Is it okay to have all circles be green? You haven't posted your code, and it's not clear exactly what your intent is, but consider the following code: clear; nCircles = 10; faceAlpha = 0.7; % face transparency - [0 to 1], clear to opaque. minRadius = 1; maxRadius = 5; xMin = -10; xMax = 10; yMin = -10; yMax = 10; theta = 0:0.1:2*pi; requiredColors{1} = 'blue'; requiredColors{2} = 'yellow'; optionalColors{1} = 'green'; optionalColors{2} = 'red'; optionalColors{3} = [1 0 1]; % purple optionalColors{4} = [1 0.5 0]; % orange figure(1) clf; hold on; for currentCircle=nCircles:-1:1 if(currentCircle&lt;=numel(requiredColors)) patchColor = requiredColors{currentCircle}; else colorIndex = floor(numel(optionalColors)*rand(1))+1; patchColor = optionalColors{colorIndex}; end r = (maxRadius-minRadius)*rand(1) + minRadius; x = r*cos(theta) + (xMax-xMin)*rand(1) + xMin; y = r*sin(theta) + (yMax-yMin)*rand(1) + yMin; circlePatch(currentCircle) = patch(x,y,patchColor,'FaceAlpha',faceAlpha); end axis equal; axis([xMin-maxRadius,xMax+maxRadius,yMin-maxRadius,yMax+maxRadius]); That code draws circles of the required set of colors first, then just cycles through optional colors for the remaining colors. This is an example of what you might want to do if you were **required** to have a blue and a yellow circle. Then there's this code: clear; nCircles = 10; faceAlpha = 0.7; % face transparency - [0 to 1], clear to opaque. minRadius = 1; maxRadius = 5; xMin = -10; xMax = 10; yMin = -10; yMax = 10; theta = 0:0.1:2*pi; availableColors{1} = 'blue'; availableColors{2} = 'yellow'; availableColors{3} = 'green'; availableColors{4} = 'red'; availableColors{5} = [1 0 1]; % purple availableColors{6} = [1 0.5 0]; % orange restrictedColors{1} = 'blue'; restrictedColors{2} = 'yellow'; restrictedColors{3} = [1 0 1]; figure(1) clf; hold on; for currentCircle=nCircles:-1:1 colorIndex = floor(numel(availableColors)*rand(1))+1; patchColor = availableColors{colorIndex}; for currentColor = 1:numel(restrictedColors) if isequal(restrictedColors{currentColor},patchColor) restrictedColors = restrictedColors([1:currentColor-1,currentColor+1:numel(restrictedColors)]); availableColors = availableColors([1:colorIndex-1,colorIndex+1:end]); break; end end r = (maxRadius-minRadius)*rand(1) + minRadius; x = r*cos(theta) + (xMax-xMin)*rand(1) + xMin; y = r*sin(theta) + (yMax-yMin)*rand(1) + yMin; circlePatch(currentCircle) = patch(x,y,patchColor,'FaceAlpha',faceAlpha); end axis equal; axis([xMin-maxRadius,xMax+maxRadius,yMin-maxRadius,yMax+maxRadius]); This is the code you'd use if the colors were *protected but optional*, in that you're not *required* to have a blue/yellow/etc., but if you do have it then you should make sure that you only have one of them. The *method* in the first example is to use all of the mandatory colors first, then make the rest. The method in the second example is to check if the selected color is in the set of restricted colors and, if so, to remove that restricted color from the set of available colors. Also, remove it from the set of restricted colors since you don't need to check it again. 
You could eliminate the inner `for` loop in the second example if you decided to use only RGB vector values for color (my own preferred method of specifying colors) and compiled your list of colors into a 2D matrix of colors, or if you decided to use only string values for colors and used `ismember`. As far as I know, there's no easy way to search through a mixed string/vector cell array for matches, so I gave this code to be as flexible as possible.
k. design and simulate an m-ary QAM system.
no
sorry if i am not clear. i have studied basic analog modulation techniques and have started digital ones. The thing is I have no idea what project would be of my level so i asked for a list so i can look up the complexity and requirements. So my question is, " Some project ideas, related to communication, assuming my basic knowledge of signal analysis, am,fm, pcm. A bit higher level are also welcome as i have about an year to submit it.
thanks will look it up.
And with the new plotting engine, plotting single markers also blows up your figure size (in ram &amp; on disk) - which can be quite annoying....
Not sure what your question is. Are you just asking for something like seriesData = zeroes(nCurrencies, nSamples); seriesData(1,:) = Euro; seriesData(2,:) = Yen; % add all your data; weights = zeros(1,nCurrencies); weights(1) = 0.1499; weights(2) = 0.3106; % add all your weights weightedTotal = weights*seriesData; ? 
Thanks for the reply! Essentially looking to amalgamate the 5 sets of data at their specific weights into one chart / time-series. I'll give this a shot and see if it works, thanks. 
&gt; I want to include all real numbers and not just integers so I can't use randi. Err, rand gives non integer values. If you want negative numbers between -10 and 10 for example, 20*rand(10,1) - 10 gives you exactly that-&gt; a column array of 10 random numbers from -10 to 10.
What doesn't seem to be working for you? Let's see your code (either here or in pastebin) and a description of the error you're getting. Because the examples on MATLAB's site work, so we need some help seeing what is wrong w/ your implementation. 
It doesn't make sense to generate random numbers from "all real numbers." You need to define a range of values at the very least.
Very likely this is the correct answer. In VBA you would delete several rows with a very similar syntax
It gives an error if the variable *rows* is defined as in my original code, however, if I replace it with a string, e.g., '35000:35583', it works as intended. Thank you!
Also, if you are in to the other areas of signal processing, I highly recommend some basic image processing projects, may be a car plate recognition or object tracking or basic hand-written alphanumerical character recognition. Any of those projects will enhance your understading of 2d convolution, filtering and other matrix operations. 
this is the correct way
Why don't you simply use: isId = false(n,1); isId(ids) = true; With n as the length of your desired index vector and ids are your indices. Edit: For your example: ids=[1,3,7], n=max(ids)
Looks like you've already got your answer, `ismember(min(input):max(input), input);`, but I'm wondering what you're using this for. Is the start value always 1? Is 1 always included in your input? Is the number of values always supposed to be exactly the largest number in your input? The thing that concerns me a little is that it's not clear what you're trying to use this for, but I would guess that maybe you're using it to get values/rows/etc. from a matrix. To that, I would point out that you can just use the index values directly; you don't need a logical array to do the indexing. The other case would be "inverse indexing," where you are trying to get to a logical array first so you can invert the array and find all values that are NOT the values you selected. To that end, I'd make clear what I was hinting at earlier - the size of your output should be the size of the matrix/vector you're trying to index, not just the largest value of the indices you're providing. There's not exactly a command that will do the inverse indexing directly, but there is a [method](https://www.mathworks.com/matlabcentral/answers/35983-simple-inverse-indexing-question): invIndices = setdiff(find(vectorToBeIndexed) , uninvertedIndices); or invIndices = setdiff(1:size(matrixToBeIndexed,1) , uninvertedIndices); Remember that `find(x)` will return a vector of `1:numel(x)`, where the `size()` command will return the number of rows, as in `size(x,1)`, or the number of columns, as in `size(x,2)`. (Or other dimensions, as you increase `N` in `size(x,N)`.)
You might want to have a look at REPELEM https://de.mathworks.com/help/matlab/ref/repelem.html For your problem: y = repelem(0:6, [1 2 2 2 2 2] Or generally: Y = [0,repelem(1:n,2)]
Hmm... so you just set everything false, then index directly those locations true.... Is suppose this approach is a lot more efficient than is-member 
Essentially, I want a 'matrix-table' representing many individual event-records to do some analysis on (correlations) I have a load of data of events against different 'customers' and I want to to produce a matrix indicating events at different customers by date, and do some analysis on that... is the short version. The long version would take a very long time and result in a 'hmm, ok that's an unusual one but I see what you mean' Strictly it doesn't always start with 1, but I can adapt all these examples to fit that without much difficulty. Thanks
I often do this also. I usually use `ismember`, but you could also use `sparse`: function [ outputVector ] = makevector( indices, maxind ) if nargin==1 maxind = max(indices); else maxind = max(maxind,max(indices)); end S = size(indices); outputVector = full(sparse(indices, ones(S), true(S), maxind, 1)); end This gives you the option of passing a maximum index, in case you want the vector to be, e.g. size 20 but the 20th element may not be true. I tested this against `ismember` and found that it is faster: tic for x = 1:100000 X = makevector(unique(randi(1000,1,500)),1000); end toc Elapsed time is 7.073965 seconds. tic for x = 1:100000 X = ismember(1:1000,unique(randi(1000,1,500))); end toc Elapsed time is 11.322131 seconds. tic for x = 1:100000 X = ismember(1:10000,unique(randi(10000,1,500))); end toc Elapsed time is 15.515289 seconds. tic for x = 1:100000 X = makevector(unique(randi(10000,1,500)),10000); end toc Elapsed time is 7.452864 seconds.
Still not clear on your application, but I imagine it as something like a big variable `eventLog`, where you have a list of all the things that happened, and then sets of vectors like `customer1`, `customer2`, etc., where every value in `customer1` is an index of the values in `eventLog` that were associated with customer 1. If you're trying to find events in `eventLog` that were associated with customers 1 and 2, then you could do something like `eventLog([customer1,customer2],:)` - note that the indices don't have to be in order or anything. The resulting events pulled from `eventLog` will be in the same order as those listed in `[customer1, customer2]`. If you wanted to find events (indices) that are common to `customer1` and `customer2`, you could use `intersect` - `commonIndices = intersect(cutsomer1,customer2);`. If you want to get a list of *unique* indices for all of the customer 1 and 2 events, then you can use `unique([customer1,customer2])`. The `unique` function sorts by default, so be careful if that's not what you want. So, to summarize, here are some examples: &gt;&gt; customer1 = [1,3,7] customer1 = 1 3 7 &gt;&gt; customer2 = [3,6,7,10] customer2 = 3 6 7 10 &gt;&gt; [customer1,customer2] ans = 1 3 7 3 6 7 10 Not in ascending order, has repeats. Will pull records out of order, will pull the same record more than once if used to index. &gt;&gt; sort([customer1,customer2]) ans = 1 3 3 6 7 7 10 In ascending order, but still has repeats. Will pull records in order, but will still pull the same record more than once. &gt;&gt; unique([customer1,customer2]) ans = 1 3 6 7 10 The above would pull each record only once, even if common to both, and pulls all records in order. &gt;&gt; intersect(customer1,customer2) ans = 3 7 The above here pulls only the records common to both customers. Hope that helps!
You can't use false as a string. Use `false` instead of `'false'`.
At the top of your loop, you use `fopen` to open a file. In the loop, use `fprintf` to write to the file At the bottom of the loop, use `fclose` to close the file. 
To add to this, you can store the file names in a cell. Edit: 'strcat()' and 'num2str()' are also useful. 
could you please show an example ? that would be great
it would be greate if you could show an example, im a complet newby 
It would be better all around I think if you gave it a go, posted your code, and then we could help you fix your code if it's broken. This way it's a learning experience. The `help` functions for the functions I mentioned would be very useful. You can just type `help fopen` for instance, to see how to use it (with some examples provided by MATLAB). 
you lazy fuck, we gave you all the functions you'd need for i = 1:10000 fid = fopen(['data' num2str(i) '.txt'],'w'); fprintf(fid,repmat('/u/derixtop did not even try to do this on his own\n',1,i^i)); fclose(fid); end
Thanks but seriously there is No need to insult Me straight away ive got three interwinding for loop, sorry that i asked how to save two variables in a File repeatedly without overwriting each File 
Can you elaborate on "I would like to draw around these hotspots and extract a polygon if possible?" Like, what is your goal? Extract points in a certain region defined by a drawn polygon? Automatically determine a polygon that surrounds a hotspot region? You need to be bit more specific and clear with your language.
A drawn polygon would suffice. If an area could be determined automatically to a particular percentage this would be even better Thank you
One idea would be to use [ginput](https://www.mathworks.com/help/matlab/ref/ginput.html) to obtain the x and y-coordinates of a defined number of clicks on the figure. You could then use [inpolygon](https://www.mathworks.com/help/matlab/ref/inpolygon.html) to determine which of the datapoints are inside of this polygon.
selectdata from the MathWorks file exchange works pretty well https://www.mathworks.com/matlabcentral/fileexchange/13857-graphical-data-selection-tool 
ahhhhhh..... of all the.... thanks man
so basically its: for k = 1:10 for i = 1:length(X) for j = 1:length (Y) something something end end for i = 1: size (X_New,1) something end %write .obj file here and save as 'data_(k).obj' end thats roughly the idea of the loop progresssion and i want to save it after each k iteration, and the variables that have to be written in it are X_New and Y 
I don't think you have a matlab problem, more of a math problem. If you just input the values from 0 to 1 into an exp() of course you'll get an y intercept of 1 because exp(0) is 1. That means you need to shift and scale your function so it fits the constraints. Determine the necessary parameters from something like this: F(x)=a*exp(x)+b Edit: on mobile it wasn't showing correctly for me that you wrote two to the power of x in your problem. If you want to use two as the basis, the same stuff I wrote still applies, you are just not using base e but base 2
I don't understand why my question is downvoted, is more info required for clarification?
I can't recreate your problem. Can you include steps of how you're getting this, with a sample file? Try this: clear all; myVar = 1:10; &lt;press ctrl+s, save as testMat.mat somewhere on the Matlab path&gt; clear all; d = load('testMat.mat'); Now you can see that the data is `d.myVar`. It is **not** `d.testMat.myVar`. Again, if you can provide the *steps you performed* to get the results you're getting, including a sample file or the steps required to generate the sample file, then please do so. 
Thank you this is perfect !!!
 Thank you loads this is really useful, thank you 
Thanks for the help. Your example works as expected. Unfortunately I can't supply the data as its confidential to my job :/ it's a massive data recording with nested structures. Let me faff more with it given the starting point of your example.
Yes, that's just a compact way to print the results. The actual first entry of the array is the second line. The first line with the multiplication symbol is just the common scaling factor for all entries. I would assume this would be affected by the number format setting as well. format long, and such
Gotcha, that's kind of what I figured. Thanks!!
Ok solved it. Our recording tool apparently creates a workspace with name "xyz" then inserts a top level structure also called "xyz", all data goes beneath this. So the function was working perfectly, we simply had the structure "'xyz.mat'.xyz.X.Data" Thanks for your time.
Please see [our rules for posting homework questions](https://www.reddit.com/r/matlab/comments/462uwe/submitting_homework_questions_read_this/). You haven't given us nearly enough information to help you. 
Don't feel bad. This sub has serial downvoters, every post gets downvoted. 
Thanks, I noticed a trend and upvoted some 0 score unanswered questions that looked valid. 
Selectdata to get the actual data points or impoly to draw a polygon around them, whichever makes more sense for your use
Glad you solved it!
&gt; I still can't seem to figure something out. Okay...
There are lots of terrible, lazy questions, or people asking us to do their homework. I think this has created a silent population of jaded people who are hypersensitive and tend to give knee-jerk downvotes. Your question is reasonable and well asked. You did not deserve to be downvoted. 
check out [diary](https://www.mathworks.com/help/matlab/ref/diary.html). With diary, you get log all of your commands, but you have to re-read the textfile over and over. Alternatively, you can use [this](https://www.mathworks.com/help/matlab/ref/evalc.html/) per command to get what was normally outputted as the *last* command, which is kind of what you want. But you would have to use this over and over. Just nab the string you want in either case and set the string handle. Unfortunately this isn't a great way of doing it
As was already stated this is more of a math question, but... y=2^x-1 goes through (0,0) and (1,1). More generally y=(2/a)*(a^x)-1 % a &gt; 0 gives you control over the shape of the curve by varying a, and it will always go through (0,0) and (1,1)
HDF5 compression accepts a number between 0 and 9 as an input, where 0 is no compression and 9 is maximum compression. I imagine this all uses the same compression library (I want to say gzip, but im not sure). I dont think that other libraries (bzip2, xz, 7zip, rar, etc.) are officially supported, and I imagine they would require a good amount of low level tinkering to get them to work (assuming it is possible to make another library work at all). BUT Im just guessing. Is this just an academic question, or do you actually have a situation where all the compression settings between 0 and 9 aren't sufficient for your needs?
I'm just guessing, but I'm fairly sure v7.3 .mat files use some form of compression, and as such the data in the file might not be organized in the format you need. If you haven't already, I would try saving it as a v7 .mat file (the default file type I believe) and see if it works. No compression so it saves much faster, though it does have a size limit (2 gb I think).
Normally print is quite fast. Normally. Since the new graphics release figure size explode if you have a lot of markers (as opposed to lines). This slows down print to the brink of unusability. So if your saved figure size is in the range of several tens or hundreds of MB (or even GB), this might be your problem. So first question: what kind of figure do you save (e. G. Plot , surface, etc). You might have to figure out a way to group your objects (creating lines instead of markers, creating a single line for lines withe the same color by separating data with NaNs). Second question regards output format and renderer. Try using bitmap instead of vector and painter(?) instead of opengl. Both options will, however, degrade the output quality... Edit: Try PARFOR if you have a good HD on the writing loop...
So, let me try to respond to your points one by one. * **File Size**: Typically I use the '-r300' flag which super-samples by a factor of 2, and then save it as a .jpeg. If the original image was 1080p, the figure file size is typically around 500 Kb. If the original image is 1440p the figure file size is ~1 Mb. You don't mention what format these 10-100+ Mb files are (.jpeg's are more compressed than many other image types). * **Output Type**: mentioned above, but .jpegs super-sampled by a factor of 2x in each direction ('-r300' flag, default is '-r150') * **Plot type**: my most common plot is "imagesc" of a 2D array with a custom color scale. I typically make my colorscales overly fine (1000+ colors), so maybe this is the issue. The array size varies on how fine I make the mesh when I run my code, but some common sizes are 400x1750, 1750x1750, 400x3500, and 3500x3500. Sometimes Just a single plot, sometimes multiple subplots in a single image. Outside of the custom-colorscale though no other modifications. * **Time Taken**: enabling plotting slows down my code by a factor of 3 or 4, though this is partly due to 1) I'm using a Xeon which is built for multi-threaded use, but has lackluster single threaded performance (and the call to print is definitely single threaded), and 2) the main loop of my code has been extremely optimized. The system has 2x 8C/16T CPU's, though I have locked Matlab to a single NUMA node so only one is available. The main loop basically slices through a 3D array performing in-place replacement on each slice, and all computation is done using a single matrix-matrix multiplication operation, so I average ~1550% CPU utilization (out of 1600% maximum). When I enable the call to print this periodically drops to 100% for long periods of time, meaning the call to print is clearly single threaded. * **Parfor**: unfortunately, this particular machine doesn't have the parallel computing toolbox. Its on my to-do list to look into some of the free alternatives. * **HDD Speed**: I know the HDD is fast enough to hit the SATA 6 gbps limit on both reading and writing, so that isnt the issue with ~1MB files. (admittedly the fastest Ive hit in Matlab is ~150 MB/s with "fread", but that is still plenty fast). I suspect the single-threaded supersampling from calling '-r300' is eating up a good portion of the execution time, and this seems like something that could be done in parallel. I have more data to plot than I hve pixels available though, so I would really rather not drop this (if I do aliasing will get much worse in my generated images).
&gt; generate random numbers from "all real numbers." You can actually do this, just not with uniform probability density. For example a = atan( pi * ( rand(...) - 0.5 ) ); Will generate random numbers drawn from all real numbers with Cauchy density. This almost certainly isnt what OP is looking for, but it is (technically) possible. 
You can fix this using num2str rowsStr=[num2str(min(rows)),':',num2str(max(rows))];
Not my area of expertice, but the documentation describes mxGetCell as "Pointer to element in cell array". A CELL array is different from a standard numeric array. Again, not my area of expertise, but it seems like [mxGetData](https://www.mathworks.com/help/matlab/apiref/mxgetdata.html?searchHighlight=mxgetdata&amp;s_tid=doc_srchtitle) might be what you are looking for. [mxGetPr](https://www.mathworks.com/help/matlab/apiref/mxgetpr.html) might also work. To quote the documentation: "Call mxGetPr to access the real data in the mxArray that pm points to [the first element in the mxArray]. Once you have the starting address, you can access any other element in the mxArray."
Yeah seems I've misunderstood the difference between cell array and 'cell' of an array. There doesn't appear to be a way to return a single value, both mxGetData and mxGetPr return an array of all the values for you to manually move through. Thanks for your help.
Happy to help, though again not my area of expertise - those suggestions were the result of literally 30 seconds of searching and a hunch that the correct function might start with "mxGet_____". There very well could still be a way to do what you are trying to do. I dont know what it is, but I would encourage you not to give up just because my 30 seconds of research didn't pan out.
yep, thanks!
Academic setting, I'm trying to show that for specific datasets huffman compression can out perform other types of compression when using a pregenerated look up table centered on zero, the idea is that for a lot of data that varies little frame to frame you can subtract out a minimum intensity projection, which causes zero lose of data if that one projection is saved, and then apply a generic huffman compression incredibly quickly if you dont have to create a new lookup table and still get a significant amount of compression. At this point I've started doing the coding for this in python as I don't believe matlab is capable of specifying compression types or look up tables. 
For bezier curves, modified code to fit your case from [here](https://www.mathworks.com/matlabcentral/fileexchange/32817-bezier-curve). **I would encourage you to use the MATLAB freesource resources online, all I did was copy code and slightly modify it for your case.** [Image it creates here](http://imgur.com/a/FqZVb) clear all; clc; p =[0.5887 0.9819 0.5887 0.9819 0.5597 1.3551 0.5565 1.7749 0.4081 1.8274 0.4500 1.4834 0.3016 1.5300 0.2210 1.3901 0.2242 1.2152 0.2790 1.0169 0.4500 0.9295 0.5790 0.9236 0.5887 0.9819]; n = size(p,1); n1 = n-1; for i=0:1:n1 sigma(i+1)=factorial(n1)/(factorial(i)*factorial(n1-i)); % for calculating (x!/(y!(x-y)!)) values end l=[]; UB=[]; for u=0:0.002:1 for d=1:n UB(d)=sigma(d)*((1-u)^(n-d))*(u^(d-1)); end l=cat(1,l,UB); %catenation end P=l*p; line(P(:,1),P(:,2), 'color', 'r') line(p(:,1),p(:,2), 'color', 'g') legend('Bezier curve', 'regular curve'); 
Cardinal pline, modified code from [here](https://www.mathworks.com/matlabcentral/fileexchange/7078-cardinal-spline--catmull-rom--spline). [Shape it creates here](http://imgur.com/a/KoeEV). function plot_cardinal n=100; % number of intervals (i.e. parametric curve would be evaluted n+1 times) p =[0.5887 0.9819 0.5887 0.9819 0.5597 1.3551 0.5565 1.7749 0.4081 1.8274 0.4500 1.4834 0.3016 1.5300 0.2210 1.3901 0.2242 1.2152 0.2790 1.0169 0.4500 0.9295 0.5790 0.9236 0.5887 0.9819]; Px = p(:,1); Py = p(:,2); % Note first and last points are repeated so that spline curve passes % through all points % when Tension=0 the class of Cardinal spline is known as Catmull-Rom spline Tension=0; figure set1x=[]; set1y=[]; for k=1:length(Px)-3 [xvec,yvec]=EvaluateCardinal2DAtNplusOneValues([Px(k),Py(k)],[Px(k+1),Py(k+1)],[Px(k+2),Py(k+2)],[Px(k+3),Py(k+3)],Tension,n); set1x=[set1x, xvec]; set1y=[set1y, yvec]; end Tension=0.5; set2x=[]; set2y=[]; for k=1:length(Px)-3 [xvec,yvec]=EvaluateCardinal2DAtNplusOneValues([Px(k),Py(k)],[Px(k+1),Py(k+1)],[Px(k+2),Py(k+2)],[Px(k+3),Py(k+3)],Tension,n); set2x=[set2x, xvec]; set2y=[set2y, yvec]; end plot(set1x,set1y,'g',set2x,set2y,'b','linewidth',2) % no longer need. free the memory clear set1x, clear set1y, clear set2x, clear set2y, clear xvec, clear yvec h = legend('Tension=0 (Catmull-Rom)','Tension=0.5'); hold on plot(Px,Py,'ro','linewidth',2) % plot control points title('\bfCardinal Spline') hold off end function [xvec,yvec]=EvaluateCardinal2DAtNplusOneValues(P0,P1,P2,P3,T,N) xvec=[]; yvec=[]; % u vareis b/w 0 and 1. % at u=0 cardinal spline reduces to P1. % at u=1 cardinal spline reduces to P2. u=0; [xvec(1),yvec(1)] =EvaluateCardinal2D(P0,P1,P2,P3,T,u); du=1/N; for k=1:N u=k*du; [xvec(k+1),yvec(k+1)] =EvaluateCardinal2D(P0,P1,P2,P3,T,u); end end function [xt,yt] =EvaluateCardinal2D(P0,P1,P2,P3,T,u) s= (1-T)./2; % MC is cardinal matrix MC=[-s 2-s s-2 s; 2.*s s-3 3-(2.*s) -s; -s 0 s 0; 0 1 0 0]; GHx=[P0(1); P1(1); P2(1); P3(1)]; GHy=[P0(2); P1(2); P2(2); P3(2)]; U=[u.^3 u.^2 u 1]; xt=U*MC*GHx; yt=U*MC*GHy; end
If R is a 100x1 vector then it doesn't seem to make sense to have TimingMatrix(i,2) + R; they are different sizes.
How about just generating some random numbers between 0.8**k and 1.2*k and then dividing by k? k = 100; randi([0.8*k,1.2*k],100,1)/k 'k' in this case was 100. Increase or decrease based on how many sig figs you'd like. 
Why? First off, it won't solve the problem (the OP is trying to add a vector to a scalar) and secondly, it's a less robust and no easier way to generate numbers between two values. 
That definitely isn't my field of expertise (though I do understand the basics of how compression algorithms generally work). If I am understanding you correctly, you are trying to speed up the compression by re-using a lookup table multiple times, which you manage to do by slightly perturbing the lookup table (and presumably this perturbation is easier to calculate than a whole new lookup table would be, which I'm, guessing is where the local similarity assumption comes in). Is that more or less correct? Or are you ignoring the perturbations to the lookup table entirely (presumably as long as the data "frames" are similar enough to each other within some threshold value)? This would trade speed for compression I suppose. Im not familiar with huffman compression specifically...would ignoring these perturbations affect your ability to exactly re-create the data at all? Or would it just lead to somewhat sub-optimal compression (since a few items in the lookup table would be non-ideal, though with similar enough data most items from an idealized lookup table would still be present I guess)? The scientist in me wonders how this might compare to some sort of Fourier-based compression (say, a method based on wavelet or curvelet transforms). Fundamentally, if the data frames are slowly varying enough for your method to work, then it would seemingly require that in the Fourier Domain the *vast* majority of energy is at frequencies much lower than the nyquist, meaning the data is sampled more densely than it really needs to be. This makes me think that there is probably some clever way that you could transform the data into a new domain where it is only sampled as densely as it needs to be (as opposed to being oversampled) and where the transformation is completely reversible. Theres also the matter of speed, though if there is anything resembling the *fft* algorithm for the transformation it should be pretty quick (it always amazes me just how damn fast fft actually is). Though again data compression isn't my area of expertise, and I'm really just speculating. And starting to ramble, so I'll leave it at that.. . . At any rate, getting back on topic: Unless you wanted to build the compression algorithm from scratch in Matlab, I imagine using another language is probably a better bet. Ive never tried to get Matlab to do something like this, but it doesn't seem like the type of thing Matlab was designed to accommodate. From one academic to another: good luck!
You are solving for 4 variables using 7 data points. I'm not sure what kind of confidence you are expecting from this.... If you want tighter confidence intervals you need more data. You don't even have 2 data points (on average) for each coefficient you want to fit, which means (regardless of how good the fit is) the uncertainty in your results is of the same order of magnitude (or perhaps larger) as the inherent uncertainty in the data. Alternately, think of it like this: with only 7 data points, any small change in ANY of the data points can drastically effect the fitted parameters. Hence,, there is large uncertainty in the fitted parameters. 
Use a try..catch statement when parsing the input (I'm on mobile, otherwise I'd give a more detailed response 😅)
If the string input to `str2num` is not a number, then the output is empty. Use `isempty(str2num(yourString))` to check. if iscell(x) y = x{1}; else y = x; end z = str2num(y); if ~isempty(z) if z&lt;0 error('Must be &gt;=0'); end else error('Must be a number &gt;= 0); end 
Cheers, diary worked after some rejigging. Super Helpful.
I suggest you format the code so others can read it.
I copied your code into matlab and formatted it how I thought it should be. Posted in another comment. First thing I'm wondering is how you are getting any output (you mentioned the script returning either 1 or 2). For example velikostX = 20lambda; im assuming should be velikostX = 20*lambda; and is lambda defined anywhere? There are a bunch of similar mistakes where the * is omitted. Don't know if thats just a copy to reddit problem though. 
 %----------- scanning area definition ------------------------------------ velikostX = 20lambda; % size of the scanning area velikostY = velikostX; Nx = (velikostX/lambda)2+3; % samples at x axis x = linspace(-(velikostX/2), (velikostX/2), Nx); dx = abs(x(2)-x(1)); Ny = Nx; % samples at y axis y = linspace(-(velikostY/2), (velikostY/2), Ny); r0 = 2lambda; % distance of scanning surface from the AUT %------- testing antenna (AUT) definition (nine-dipole antenna) ---------- Nd = 9; % number of dipoles dd = lambda/2; % dipole spacing d = linspace((-(Nd-1)/2)dd, ((Nd-1)/2)dd, Nd); I = ones(1,Nd); % currents for dipoles (1 A) l = lambda/4; % dipole lenght Fd = j(cos(kl)cos(theta)-cos(kl))/(sin(theta)); % radiation function of %----------- near-field samples computation ------------------------------- E = zeros(Nx,Ny); Ehelp = zeros(1,Nd); % help vector for m=1:Ny for n=1:Nx for i=1:Nd E(n,m) = E(n,m) + 60(cos(kl(x(n)/sqrt(r02+(y(m)-d(i))2... +x(n)2)))-cos(k*l))/(sqrt(r02+(y(m)-d(i))2)/... sqrt(r02+(y(m)-d(i))2+x(n)2))I(i)(exp(-jksqrt(r02... +(y(m)-d(i))2+x(n)2))/sqrt(r02+(y(m)-d(i))2+x(n)2)); end end end Emax = max(E); maxE = max(Emax); Eneardb = 20log(abs(E/maxE)); figure(1); % 3D near-fiel distribution surf(x/lambda,y/lambda,Eneardb); title('Rozlozeni normovaneho modulu pole v blizke oblasti (z = 2lambda)'); xlabel('y[lambda]'); ylabel('x[lambda]'); zlabel('abs(Enear)'); % depiction of E (module and phase) in the near-field for two orthogonal cuts figure(2); subplot(2,2,1); plot(x/lambda,Eneardb(:,((Ny+1)/2))); title('rez rovinou y = 0'); xlabel('x[lambda]'); ylabel('abs(Enear)'); subplot(2,2,2); plot(y/lambda,Eneardb(((Nx+1)/2),:)); title('rez rovinou x = 0'); xlabel('y[lambda]'); ylabel('abs(Enear)'); subplot(2,2,3); plot(x/lambda,angle(E(:,((Ny+1)/2)))/(2pi)360); xlabel('x[lambda]'); ylabel('phase(Enear)'); subplot(2,2,4); plot(y/lambda,angle(E(((Nx+1)/2),:))/(2pi)360); xlabel('y[lambda]'); ylabel('phase(Enear)');
It's because \*text\* gets translated as *text* by Reddit. So all that italics you see above is where the OP put multiplication signs. And I don't know why you'd take all your time to format someone's code when they're the ones who need help and can't even be bothered to make their code reasonable
Please either format your code here (using the 4 spaces trick) or put your code into pastebin so it can actually be read. Otherwise it will be removed. 
Eh, I kind of like^the equations that^keep going^up and up^and up^lol
The italics thing makes sense. Didn't even think of that. And eh, I was bored I guess.
help isstrprop help any help all
 %----------- scanning area definition ------------------------------------ velikostX = 20*lambda; % size of the scanning area velikostY = velikostX; Nx = (velikostX/lambda)*2+3; % samples at x axis x = linspace(-(velikostX/2), (velikostX/2), Nx); dx = abs(x(2)-x(1)); Ny = Nx; % samples at y axis y = linspace(-(velikostY/2), (velikostY/2), Ny); r0 = 2*lambda; % distance of scanning surface from the AUT %------- testing antenna (AUT) definition (nine-dipole antenna) ---------- Nd = 9; % number of dipoles dd = lambda/2; % dipole spacing d = linspace((-(Nd-1)/2)*dd, ((Nd-1)/2)*dd, Nd); I = ones(1,Nd); % currents for dipoles (1 A) l = lambda/4; % dipole lenght Fd = 1j*(cos(k*l)*cos(theta)-cos(k*l))/(sin(theta)); % radiation function of %----------- near-field samples computation ------------------------------- E = zeros(Nx,Ny); Ehelp = zeros(1,Nd); % help vector for m=1:Ny for n=1:Nx for i=1:Nd E(n,m) = E(n,m) + 60*(cos(k*l*(x(n)/sqrt(r0^2+(y(m)-d(i))^2 ... +x(n)^2)))-cos(k*l))/(sqrt(r0^2+(y(m)-d(i))^2)/... sqrt(r0^2+(y(m)-d(i))^2+x(n)^2))*I(i)*(exp(-1j*k*sqrt(r0^2 ... +(y(m)-d(i))^2+x(n)^2))/sqrt(r0^2+(y(m)-d(i))^2+x(n)^2)); end end end Emax = max(E); maxE = max(Emax); Eneardb = 20*log(abs(E/maxE)); figure(1); % 3D near-fiel distribution surf(x/lambda,y/lambda,Eneardb); title('Rozlozeni normovaneho modulu pole v blizke oblasti (z = 2*lambda)'); xlabel('y[lambda]'); ylabel('x[lambda]'); zlabel('abs(Enear)'); % depiction of E (module and phase) in the near-field for two orthogonal cuts figure(2); subplot(2,2,1); plot(x/lambda,Eneardb(:,((Ny+1)/2))); title('rez rovinou y = 0'); xlabel('x[lambda]'); ylabel('abs(Enear)'); subplot(2,2,2); plot(y/lambda,Eneardb(((Nx+1)/2),:)); title('rez rovinou x = 0'); xlabel('y[lambda]'); ylabel('abs(Enear)'); subplot(2,2,3); plot(x/lambda,angle(E(:,((Ny+1)/2)))/(2*pi)*360); xlabel('x[lambda]'); ylabel('phase(Enear)'); subplot(2,2,4); plot(y/lambda,angle(E(((Nx+1)/2),:))/(2*pi)*360); xlabel('y[lambda]'); ylabel('phase(Enear)'); 
For what its worth, I know how to get how many subplots are in a figure. get(figure,'children') returns an array with the length equal to number of subplots, but doesnt help me figure out the (m,n) values from subplot(m,n,p)
I actually found my answer in this post: https://www.reddit.com/r/matlab/comments/32gvzm/how_to_detect_the_number_of_subplots_in_a_figure/
Well, yeah, but couldn't you just ctrl+f the script file you pasted the code into, put the bad quote in the `Find what:` box, put the correct quote in the `Replace with:` box, and then click `Replace All`? At least that's what I'd do in that scenario.
Also, maybe I need to brush up on my Python, but what exactly breaks you out of the loop? It looks like `while True:` at the top, with a `sleep(1)` at the end.
Sure you could, but I just like this solution better. I leave it running in the background all day and you don't have to think about it. 
Omg thank you ! this is awesome
Absoulte genius thank you
There are a couple tools on the FileExchange that fit an ellipse to your data. One of which is [fit_ellipse](https://www.mathworks.com/matlabcentral/fileexchange/3215-fit-ellipse) which uses a Least-Squares method to determine the five parameters. (x location, y location, x scale, y scale, and tilt)
What went wrong when you tried? 
No problem, good luck
Yeah ive got the 6 values the fit_ellipse comes out with , but i'm being dum dum trying to plot it
So is your question "how do I plot an ellipse?" If so, how are you attempting to plot it now?
I have been using the https://uk.mathworks.com/matlabcentral/fileexchange/289-ellipse-m Its has been guess work. putting in the centre point and estimating the x y radius If i can use the Ellipse fit, it would be far more accurate for my report, I just cant seem to plot it/figure out the maths in the function 
Why can't you use `fit_ellipse`? Are you attempting to and it's giving you an error? Do you think it's giving you the wrong answer? Or maybe you don't understand the outputs/inputs of `ellipse`? Basically, you're not giving us any way to help you. I have no clue what went wrong/what you need help with. It seems like you just want us to do it for you, but that's now how it works here. We help people, not do their homework for them. 
I'd use fminsearch or fzero or a similar function.
I can assure you its not a crappy attempt at getting some homework done. Its the graphing for my final masters project, and the polygons look like a kids scribbled on my work. The help is greatly appreciated, I think I hit a wall yesterday where my brain stopped working for while. Sorry I've decided to just apply the values to x and y values to the circle equations, doesn't seem to fit though. like the x0 and y0 don't fit, or the rotation is wrong. Any insight p=[ 0.2694 0.9053 0.3823 0.8353 0.4468 0.8090 0.5565 0.8178 0.6081 0.9140 0.6629 1.0802 0.7048 1.4300 0.6952 1.6574 0.6177 1.8236 0.5306 1.9111 0.4306 1.9461 0.3726 1.8236 0.3113 1.6924 0.2629 1.5000 0.2177 1.3163 0.2339 1.1327 0.2565 0.9840 0.2823 0.9402 0.2694 0.9053] % polygon (X and Y values x=p(:,1,1) % x and y of Poly y=p(:,2,1) %% finding ellipse values ellipse_t = fit_ellipse(x,y) %getting values from polygon x0 = ellipse_t.X0; % ellipse values y0 = ellipse_t.Y0 a = ellipse_t.a; b = ellipse_t.b; theta0 = ellipse_t.phi; t = linspace(0,2*pi,1000); %% applying array for elipse x1 = a*sin(t+theta0)+x0; % making eellipse y1 = b*cos(t)+y0; %y values plot(x1,y1) axis equal hold on plot(x,y) %%plot ellipse again original
Not quite. `kron(A,B)` takes each scalar value in the matrix `A` and multiplies it by the matrix `B`, and then concatenates all those matrices together. If you use it on your `a` matrix, you're going to get a copy of EVERYTHING in `a` several times. One way you *could* use `kron` here is by creating a matrix `b = repmat(a,3,1)` and then using `i = kron(true(1,2), eye(3))` to create a logical index that you can use in `b` (`b(~i) = 0`). If I had `a` and wanted to get `b`, I would actually use `mat2cell` to chunk `a` up into individual pieces (`a = mat2cell(a,1,2*ones(1,length(a)/2))`) and then use `blkdiag` to put those pieces on the diagonal (`b = blkdiag(a{:})`).
Is it a lorentzian? You can use the fit function with those (I think). If not there are ways to fit to arbitrary functions using fminsearch or other algorithms. Bear in mind its not always easy to fit and matlab can have problems with very large numbers in the fitting parameters.
No this isn't a lorentzian function, fminsearch you say? Does that not just find the variables required for a minimum? Would I need to combine that with a feast square fit approach?
Yes you would need to combine to use that, I'm sure there are other alternatives (maybe even using fit itself with an anonymous function) but I can't remember them right now.
So you need to construct the error function which is the sum of the residuals squared and use fminsearch to minimize that. The residuals are the difference between the data and your function. 
MATLAB and the community have a posted hundreds of design challenges that get progressively harder the more you complete. Probably not a comprehensive way to learn, but I use it to sharpen my skills. https://www.mathworks.com/matlabcentral/cody/
Ride or die matlab There's no real official way to get up to speed other than getting certified but you can just use it for all calculations etc. Also if you don't know how to do something just google it and you'll figure it out quickly 
Thanks! I checked out Cody for a bit, I thought it was kinda cool! There was a problem that didn't accept my solution even though I solved it with one line of code. I'll keep at those problems though if you think it's beneficial?
Right, I've seen that MathWorks has a really great community and that helps a lot. I'm sure I'll be relying on it heavily when I've been given MATLAB tasking. 
Start with the MATLAB Onramp. https://matlabacademy.mathworks.com
Very cool, I'll check it out! Thanks so much!
Just use it. Read the documentation when you don't know how to do something. 
Thanks a lot for your help, I've managed to make it work using your advice. 
Dig through the archives of Loren on the Art of MATLAB. In between lots of coding sessions, that is. If you need ideas for problems to learn on, play MATLAB Cody.
The community is generally willing to help out, though really the documentation is pretty excellent and you generally have to get into some uncommon advances use cases before the documentation doesn't cut it. By all means "rely heavily" on the community when you need to, but at the same time I bet just about any competent Matlab coder will tell you that one of the most important Matlab skills you can master is learning how to troubleshoot your own code without help. That said, one area the community is definitely worth consulting though is when you re trying to optimize/improve code that is already up and running. Learning how to get the code to run on your own is extremely valuable, but chances are unless you really know what you are doing there is a faster solution (which, due to some quirks of Matlab, can easily be 100x faster). I wouldnt worry too much about optimization until you are up and running with Matlab, but it wouldn't hurt to have a few ideas about how to write efficient code in the back of your mind. I ended up getting carried away making a list of suggestions and so I decided to make a new post out of it, but Id encourage you to check it out. The first 5 or 6 points in particular can make a huge speed difference and are relatively straightforward. In short, * 1) Use the profiler to find what is taking most of your run time and actually needs optimizing. * 2) Try to vectorize as many of these time/compute intensive tasks as possible using matrix operations and/or bsxfun. If these aren't appropriate, use another built-in functions if you can. If the data has lots of zeros consider using a sparse array. * 3) When you cant vectorize and need to use a loop don't forget to pre allocate.
Good resources posted here already. But I found that getting a colleague who is a good communicator who can walk you through some of the scripts they commonly use is very helpful. That way, you are learning not just the tools, but how they tie together to accomplish whatever your team is accomplishing. Similarly, you can just get a few of their scripts and try to follow along.
Good set of tips. Also, have you tried or come across cases where cross compiling to C using Mex and running the executable is faster than running Matlab script? I believe I heard this at a Matlab conference video but I've never had to really optimize to such levels in my experience.
Running .mex files written in C is often faster than running the same thing in Matlab (in part because you compile the .mex function before you use it, and then each call to the function is calling a pre-compiled function), though how much faster and whether or not it is faster at all depends on * 1) what you are trying to do, and * 2) how well written the C code is. One notable exception: if there is a built-in function (the kind I describe in my post, not the .m file kind) that does the same task as the .mex function, then the built-in function will often be faster than the .mex code. The built-in functions are written in (I believe) C/C++ and are all pre-compiled. The .mex functions are also pre-compiled C code; however, .mex functions have an extra few steps due to how they interface with Matlab. The built-ins are directly incorporated into Matlab and as such calling them has less overhead than calling a .mex function does. This inherently puts the .mex files at a disadvantage, meaning in order to be faster the .mex source C code really needs to be considerably more efficient than the source C code used in the built-in function. This isnt impossible, but tends to be rare (and, of course, depends on the specific function being used). Side note: there are a good number of .mex functions freely available on the Matlab file exchange, and (once you get Matlab setup with a compiler) using them is rather easy - once they are compiled you can typically use them like any other matlab function. For compiling them - many FEX submissions that use mex files provide a script that takes care of compiling for you, and if they dont then (IIRC, though dont quote me on this) you usually only need to run: mex setup % this initializes the compiler. Only needs to be run once per Matlab session. mex &lt;filename.c&gt; % this compiles the function ALSO NOTE that if you use a .mex function and change computers you should re-compile it. Theres a chance it will work (though perhaps not as intended), but the .mex function is built in a way that it is optimized and intended to be used only on one particular computer. Changing computers could cause it to run inefficiently, not run at all, or run and produce incorrect results. EDIT: added a bullet point about .mex functions to the main post, since they can often improve efficiency by quite a bit. Thanks for suggesting it.
How does point 13 apply when using structures and sub-structures, e.g.: structOUT(n3).substructOUT(n2,n1) = foo(structIN(n3).substructIN(n2,n1) ); OR structOUT(n1).substructOUT(n3,n2) = foo(structIN(n1).substructIN(n3,n2) ); Is there any difference between the above two?
I'm not 100% sure on this one, but I'm fairly sure the 2nd way would be better (or at the very least identical to the 1st method). I know method 2 would be better if substructIN was a numeric array, but if this is another structure array then Im 99% sure that either 1) Method 2 is still better or 2) it doesnt matter either way. As such, I dont see any reason not to go with method 2. **Rationale** As I understand it, different structures within a structure are already separated in memory and as such dont have any bearing on each other (unfortunately this means vectorized operations dont work between different structures in a structure array). However, numeric array data (any maybe other types of data?) within a particular field of a structure is stored continuously, just like if it were a standard numerical array outside of a structure. So, if substructIN were a numeric array, you would definitely want a setup that would sequentially loop through each substructIN. This requires that the containing structure (structIN) use the outermost loop variable, which corresponds to the 2nd method you provided. That said, if you assume there is any preference at all to whether or not substructIN is read continuously, then your priority should be to sequentially go through substructIN, making structIN the outermost loop. This would sequentially go through all of substructIN for structIN(1), then all of substructIN for structIN(2), etc. The other method (1st one) would instead use substruct(1,1) for every structIN, then substructIN(2,1) for every structIN, etc. For this to be better, the nth sub-element of each structure would be better grouped in memory than each of the sub-elements for the nth structure, which intuitively seems wrong to me (though again, I'm not 100% sure about this). And, of course, if there is no preference since they are both structures, then the methods should be equal. At some point I'll run a few tests and try to confirm (I'll let you know what I find), but my money is on either Method 2 being better or them being identical.
2 things. 1) if this is a one time deal, the fastest way is probably to click on the edit tab (upper left corner) and then click on figure properties. This lets you modify the figure using a GUI that lets you easily do many modifications. 2) if you want a programmatically-derived solution: run the following ff=gcf aa=gca these will produce 2 structures that contain all the properties for the figure (ff) and the current axis (aa). Find the ones that control what you want to change and modify the field, and the figure will change accordingly. Since its a structure all the field names are visible, and since you know what options you have to work with its pretty easy to figure out what field you need to change (just keep experimenting till you find it) 
If you know the form of the function and just need to solve for the coefficients you can use the fit function. If you don't know the form of the equation, I would probably recommend using "interp1" and interpolating it to a fine grid. You enter current X and Y values and the X values you want it to query and it gives you the approximated Y values at the designated query points. The 'pchip' method will probably be the closest to what you want (I would start with 'pchip', though by all means try all the available methods). Once you have the function interpolated to a fine grid numeric integration is trivial to do (sum the values and divide by the spacing). If you need it to produce an equation, then you will need to make a list of possibilities (manually or automatically), test each one, and look for the one with the lowest residual error that is "realistic". To my knowledge, there is not a function that just magically spits out an equation - you have to give it possibilities to test, which you can then compare and select your favorite.
Thank you so much, [the pchip function worked!](https://imgur.com/a/fcuGm) Also, i didn't realize you could find the area without the equation. If so, I don't need the equation. Could you please shed more light on how I can integrate though? Edit: I'd like to find the area under the curve with a specific x interval, not the area of the whole curve at once. EDIT: Figured it out. Thanks :)
bsxfun on anonymous functions is much slower than on builtins
&gt; 11\) **Use integer and logical data types where appropiate.**... Unfortunately, I dont think these work with sparse arrays. FYI, `sparse` *does* work with logical values, but not with integers.
Thanks for the heads up. Ill change it. I knew they didn't work with integers because I remember thinking how much of a shame it was that sparse arrays require 2 sets of integer indices (rows+ columns) that uint16 and (for especially large matrices) uint32 data types would be perfect for (factor of 2-4x less memory for indexing, faster operations, etc). But no, clearly storing these integer lists as 64-bit floats is the better option^^(\s) I guess I sort of assumed that logicals were the same way, but never bothered to actually check.
This is a good point, though in my (rather minimal I admit) testing I multiplied 2 vectors to form a 2D matrix. Using bsxfun with an anonymous function was still much faster than the explicit double loop implementation. It was slower than a vectorized single loop implementation but not by all that much, making me think that if there really isnt a built-in it is still worth speed-checking bsxfun with an anonymous function. Its definitely not a guarantee though (unlike using bsxfun with a builtin, which is almost always the fastest possible method). I made a note of this in the list.
Not sure how to implement it in Matlab, but I think the symbol is called an "overbrace".
Thank you so much for giving me the word over brace Found a sweet plug in https://uk.mathworks.com/matlabcentral/fileexchange/38716-curly-brace-annotation
Ahhh. Thank you so much. 
Some really great tips. And the best, for me? Using profiler as number one. Write code that works. Then if it's slow, use profiler to track down the problem(s). Then use the rest of this excellent list, stack overflow, google, and the help, to improve things. Yes sometimes it's nice to get things right from the start, but: 1. Not everyone is perfect (not even me) 2. Sometimes, the best practice can be slower than the noob way (preallocation for medium sized arrays, I'm looking at you) 3. If the code takes one second to run, who cares how nicely you did it? Premature optimisation as the root of all evil
First, I'm using Octave, so my specific results may not apply. However, I don't think you're understanding why Method 1 is faster than Method 2 correctly. Method 1 does **not** pre-allocate the entire N-D array, it creates an N-D array with dimensions 2 through (N-1) as singleton dimensions. From my testing, it appears that Method 1 is primarily faster because the total number of calculations is lower. Look at numel(W) at each iteration. Since your later dimensions have smaller length, you're doing multiplies with smaller arrays (fewer calculations) for the first few loops, and then the matrix gets large at the end and the calculations slow down. In Method 2, you make the array very large in the first iteration, and then each iteration after that needs to handle all of the elements. Your explicit pre-allocation method also illustrates this - notice how each iteration after pre-allocation is running in approximately the same amount of time as the final iteration of Method 2. As for why that final iteration is slower in Method 2 than Method 1, I haven't figured that out yet. I reversed the order of `dim` and tested that to confirm. The time ratio between Methods 1 and 2 wasn't quite inverted, but was close (the performance gap was a little less with the reversed dimensions). I did notice that I took a substantial performance hit for reversing the direction though. I suspect having large array sizes in the higher dimensions is to blame. The overall performance hit may also be related to why the performance gap was a little bit narrower. I'd be interested to see if you find something different with actual MATLAB.
I agree. I didn't realize that `sparse` had the potential to speed up calculations (I've actually seen it slow things down, but I think it was just output), so for me it was always just a memory thing. Seems silly to force you to use 8 bytes in your data format that's intended to save memory. More bothersome for me is the limitation to 2-D arrays. Multidimensional arrays explode in size very quickly, and it would be nice to have a way to wrangle that. I'm aware of an [N-D sparse fex](https://www.mathworks.com/matlabcentral/fileexchange/29832-n-dimensional-sparse-arrays), but I've never actually used it. Looking it it now, it looks like it actually supports additional data types too.
I probably don't fully understand what is going on, but it sounds like you want a conditional statement to check for something before executing the code within the loop? If so you could use an if statement or a case statement to allow the loop to skip the execution of the loop.
Now that you mention it, I'm pretty sure I have pulled up that function 5 or 6 times, and each time just been too lazy to actually install and figure out how to use it and figured some way out to make standard 2D arrays work (I wanna say my usual solution was to reshape to a 2D array and then generate re-mapping indicies to fake-map each column to its original place in the N-D array. I 100% agree though, its too bad (almost borderline unacceptable) that there isn't standard N-D support for sparse arrays. Using sparse arrays should typically speed up calculations, so long as the the matrix has enough zero elements to be considered sparse (I usually make the cutoff at ~1/3 non-zero elements, though you could probably push this a little bit further if you wanted). Of course, the more sparse the matrix actually is the better it runs. Its not just stndard matrix operations either, a lot of the more advanced functions (like LU decomposition) [are optimized for sparse arrays](https://www.mathworks.com/help/matlab/math/sparse-matrix-operations.html). When you saw code get slower with sparse matricies, chances are either the matrix wasn't sparse enough OR the sparse matrix ant getting generated in an efficient way. Matlab is VERY touchy about how sparse matricies need to be generated. The "sparse" command works well, as does pre-allocating with "spalloc" and then filling in the data in memory sequential order (e.g., column by column). In my testing those are the *only* two reasonable ways, any other method tends to have a huge performance penalty. I once added a single line to a code to fix the sparse matrix generation, and run time dropped from ~20-30 minutes to ~10 seconds (~150x improvement).
As fragment said, you can do this easily with a conditional. However if you want to be able to make the decision on the spot, you could do some kind of input command, but then you'd have to "ok" every one you don't want to skip. 
On mobile, so I'll just say it's possible and you'd do it by evaluating callbacks and properties; I think it's KeyPressFcn and CurrentKey, but I'm not 100% sure. I do it for creating interactive animations. I'll post more with an example tomorrow. :EDIT: As promised, attached below is some functional sample code that skips loops. It requires a figure window to be open, but this shouldn't add any overhead to an existing program. You *might* be able to get by if you could reference the command window, but that's getting into "Undocumented Matlab" territory. What I'm posting below has always been good enough, so I'm too lazy to go searching any further. Anyways, it should be enough to give you a really good start on what you're trying to do. clear; loopPause = 0.25; nFastLoops = 50; nSlowLoops = 10; nData = 100; fullDataSet = zeros(1,nData*nSlowLoops*nFastLoops); % Here's the first set of important bits: % required - get the figure handle. figHandle = figure(1); % optional - clear the figure clf; % mostly required - currently, if you click on a figure window and push a % key, then Matlab interprets that as you wanting to type something into % the command window and will force the figure window to lose focus. This % means the user has to click back onto the figure to use the "skip" % functionality. Instead, you can *override* the default 'KeyPresFcn' and % tell it instead to just print nothing. The line below is what lets the % figure retain focus after you push a key. set(figHandle, 'KeyPressFcn', @(x,y)fprintf('')); % optional - if you wanted to return the character that you're pressing as % a character with no line break after, use the following: %set(figHandle, ... % 'KeyPressFcn', @(x,y)fprintf('%s',get(figHandle,'CurrentCharacter'))); % mostly required - if you want to test for a particular key press, then % you should really set a default key. You'll see more about this later. % I use Alt+1000, but it's just a key the user shouldn't be able to enter % normally. defaultKey = 'Φ'; set(figHandle, 'CurrentCharacter', defaultKey); % optional - I'm setting up a window to display data results in the lower % half and the status message in the upper half. This is all to generate a % template of options for you to customize as you want. I'm creating % handles to the text and plot, which are initially empty, to **update** % with information later. It is MUCH MUCH faster to use 'set' and update % values than it is to clear the figure and redraw everything. subplot(2,1,1) axis off; textHandle = text(... 'String', '', ... 'Units', 'normalized', ... 'Position', [0.5 0.75], ... 'FontSize', 24, ... 'Color', [0 0 0], ... 'HorizontalAlignment', 'center'); subplot(2,1,2) plotHandle = plot(0,0,'Color',[0 0 1]); for outerLoop = 1:nSlowLoops % optional - display text outerText = sprintf(... 'On outer loop %d of %d\nPress ''s'' to skip, ''q'' to quit.\n',... outerLoop, nSlowLoops); for innerLoop = 1:nFastLoops % optional - display text innerText = sprintf(... 'On inner loop %d of %d.', innerLoop, nFastLoops); % &lt;!-- Here's where you put your function endIndex = innerLoop*nData + (outerLoop-1)*nFastLoops*nData; startIndex = endIndex - nData + 1; dataSet = randn(1,nData); fullDataSet(startIndex:endIndex) = dataSet; pause(loopPause); % --&gt; % optional - display the display text. This is a change in how % handles are used that was made a year or two ago, I think. textHandle.String = [outerText, innerText]; % alternate calling for older versions of Matlab: % set(textHandle, 'String', [outerText, innerText]); % Here's the magic! currentKey = get(figHandle,'CurrentCharacter'); switch currentKey case 'q' % Here you're quitting the function, so you don't need to % reset the figure's current character. %set(figHandle,'CurrentCharacter',defaultCharacter); textHandle.String = 'Function Quit!'; return; case 's' % The 'CurrentCharacter' value is the LAST KEY PRESSED, so % if you push 's' to skip ONE time, then 's' REMAINS the % last key pressed until you press something else, so this % is where it's important to assign a default key. Push % some other default key so you don't re-enter the skip % case on the next iteration. textHandle.String = 'Loop Skipped!'; pause(loopPause); set(figHandle,'CurrentCharacter',defaultKey); break; case 'Φ' % Default key - no key pressed since last iteration. otherwise % Some key was pressed that's not representative of 'quit' % or 'skip' - your choice of how you want to handle that. % Remember to reset the defaultKey unless you want to % re-enter this case on the next loop iteration. set(figHandle,'CurrentCharacter',defaultKey); end set(plotHandle, ... 'XData', 1:endIndex, ... 'YData',fullDataSet(1:endIndex)); drawnow; end end
Thanks for the advice everyone.
Take a look at [this](https://www.mathworks.com/help/matlab/ref/loadlibrary.html), you can pass in the dll and the header file. And everything should work :)
Nice. Good find.
That's the way I tried but I don't know what I am doing wrong , all I get is lot of Error messages. The compiler configuration is Correct I can see. Also I using C++, and for c++ it says use extern C , I don;t what that means or where to use it.
It's reaching its preset goodness of fit already, play around with the other parameters as well.
I am bored! I would like to talk about computer programming.
What is the output message? Has the optimizer found a minimum?
Wrong. The loop will continue to iterate normally even if you overwrite the loop variable.
The profiler really is a great tool. My only complaint with I is it gives no hints if a slow execution is due to a single-headed implementation or if it is partially/fully multi-threaded and still slow. Granted once you ID the line I question this isn't all that hard to determine on your own, but it would still be nice if you could determine it directly from the profiler's output. One other tool I use a lot is the dependency analyzer. It finds a good number of mistakes (such as typos in variable names) that would have otherwise required restarting the code many times (assuming that each restart you only fix the error immediately at hand). &gt; Sometimes, the best practice can be slower than the noob way (preallocation for medium sized arrays, I'm looking at you) Funnily enough, I actually find myself pre-allocating very little. In general, Ive come to realize that if you need to pre-allocate something then the method you are using to generate it is likely sub-optimal from an efficiency standpoint. Of course sometimes you have no other choice, but whenever I can I try to generate new arrays as the output of vectorized operations rather than preallocating and filling them in with a loop. Im using "vectorized" a bit loosely here, and intend it to include cases where (as one possible example) if I wanted to combine two arrays ("a" and "b") into a single larger array I would use "cat" rather than pre-allocate and then fill in" a" and "b".
Shit, you're right, I'll edit my post. You can emulate this with a while loop and incrementing the loop variable yourself.
A bit of mixed methods in there. The "old style" of reference handle properties was to `get` or `set` the property, as in `get(figHandle, 'CurrentCharacter');`. They've since changed it so you can access properties more like a structure: `figHandle.CurrentCharacter`. You can use that both ways, I believe, as in `currentKey = figHandle.CurrentCharacter;` or `figHandle.CurrentCharacter = defaultKey;`, but old habits die hard. 
Like [vpasolve](https://www.mathworks.com/help/symbolic/vpasolve.html)?
For anyone wondering, a generic algorithm for numeric integration would be: x = 1:N; y = f(x); totalIntegral = sum(y(minIndex:maxIndex) .* x(minIndex:maxIndex+1)); 
Yessir!
If you want a numeric answer, you shouldn't be using any symbolic variables to begin with. MATLAB is so bad at doing numeric math. I think people get in this habit because if they learn MATLAB in school, all the homework for some reason uses symbolic math. MATLAB is, at it's core, a numeric matrix and it can do that really fast, and very consistently. Leave the numeric calculations to Mathematica, it's build for that. So anyway, to answer your question, once you've moved to regular variables instead of symbolic ones, just use `fzero`
Pretty sure the mupad notebook app can do that. I had a similar situation for a homework problem in school.
[the matlab documentation](https://nl.mathworks.com/help/matlab/learn_matlab/array-indexing.html) has all the answers. I remember that reading those can be hard when i got started, but if you learn how to do it, you'll be able to learn everything yourself. 
I tried the method they suggest for C++ but then `..matlab\LoadLibs\animallib.dll' has different architecture than the host.` . What does this mean. There are no dependencies what so ever. Its just a function returning a double item.
When you define `index`, you do so with the `find()` function. You are *finding* the indices of the fourth column of `Data` that is **greater than** zero. index = find(Data(:,4)&gt;0); You can read that as, "For all rows of `Data`, looking only at column 4, find every index where the value is greater than zero." The output of that command, `index`, is then a listing of **every** index where the output is greater than zero. The *first* value of `index` is the **first** location where the fourth column of `Data` is greater than zero. You could re-write that for a little more clarity by utilizing an auxiliary input of the `find()` command - `n` where `find(x, n)` returns the first `n` nonzero values of `x`. For instance, what you have, written a little more clearly, would be: firstPositiveIndex = find(Data(:,4)&gt;0, 1); Because here you're saying you want to find the first 1 indices - the first index - where `Data(:,4)` is greater than zero. Then later, you could say depth = Data(firstPositiveIndex:end, 2); and so on. Alternatively, you could keep what you have and add: index = find(Data (:,4)&gt;0); firstPositiveIndex = index(1); and use `firstPositiveIndex` the same. A couple notes: 1. A warning - you mention in your post that you're selecting "only the non zero values," which is **incorrect**. You are selecting the **positive** values. 2. A usage note - your variable `index`, as defined, has the index of every *positive* value. If that's what you want, then you should realize that `index(1,1):end` gets **every value** - &lt;0, ==0, and &gt;0 - after the first **positive** value. You can use `index` to keep only the positive values if you want, by using `index` to *index* the rows of `Data`. 3. A usage note - You're finding the first **positive** value of the *fourth column* of `Data`. This is the column you call `Al`later. The other values, `depth` and `As`, could be positive, negative, or zero. 
If this helps, I need to basically calculate the electric field generated by a ring. I'm basically dividing the ring in 100 parts and the cartesian plane in a 20x20 square of coordinates. The equations I have that are important are rx=xj, ry=yj-R*sin(theta), rz=-R*cos(theta) r=sqrt(rx²+ry²+rz²) I have to calculate the x and y components of the electric field. So: Ex(x,y,0)=I*rx/r³ (I is a constant) and Ey(x,y,0)=I*ry/r³.
use the [array opertions](https://nl.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html). so for Ex it would be Ex = I * r .* x ./ r.^3 try doing the rest yourself and share the code if you run in more troubles
Cheers, I'll have a bash at that!
Thanks!
Thanks for the tip. But how exactly do I make use of a loop to calculate Ex for all the points? For example I need to calculate Ex=I*(rx)/r³ for E1, E2, E3,..., E100 how do I pick each element of the array to do my loop? I tried to use *for E=(1:100) or [1:100]* to start my loop but it doesnt do what I want. How do I do it?
you don't need a loop :O. try this code X = 1:10 Y = 1:10 R = sqrt(X.^2 + Y.^2) 
This is an awesome post and my own experience agrees well with yours. But I also want to make a point I have come to accept recently: Decide if it is worth the time! I came across a situation where I know that I could have figured out all of the right Matlab transformations to work on a process without the loop. But then I realized that the loop would: * Be **much** easier to read *and debug* * Would take much less time to write as a loop than to vectorize * The time difference was small That is to say, it all depends on your purpose. I have some scritps that are the life-blood of what I am doing. For them, I have them well vectorized. And some of them has a loop version in comments below just to be clear what is happening. Then there are the throw-together analysis work which can be done pretty quickly, even if I grow the array every time. 
https://www.mathworks.com/help/matlab/ref/mex.html
Use hold on, and plot those points first.
Don't use symbolic variables to do numerical calculations. 
Or have an initial value of area set to 0, then make a for loop that multiplies x(horizontal) intervals by y(vertical) length. So: dt = 0.0001; %the lesser the dt the more accurate the result sum = 0; n = length(x); for i = 1 : n-1 %n-1 is used here because you're always multiplying x by the preceding value of y sum = sum + dt*y(i); endfor 
It looks to me as if you confused numerical with analytical/symbolic a couple of times: &gt;MATLAB is so bad at doing *numeric* math. and &gt;Leave the *numeric* calculations to Mathematica, it's build for that. *Numeric* in both cases should be *symbolic* or am I confused here? 
Check out uistack.
It just says it's exceeded maximum iterations. 
No. I was sleepy when typing. Thanks. 
Sorry, I was away on vacation. The problem lies in the fact that you are not rotating your ellipse properly (also, you didn't add `theta0` to `t` in your `y`). Adding the offset inside the `sin` and `cos` simply shift where you start plotting, but doesn't actually rotate the figure. As a rule, to plot an ellipse like this, the steps go as follows: 1. Create the points defining a unit circle 2. Stretch the points using the semi-major and semi-minor axis (often times, people combine steps 1 and 2, and that's fine) 3. Rotate the points (using a rotation matrix, of the form `[cos(phi), sin(phi);-sin(phi), cos(phi)]` 4. Shift the points by the offset. This is actually the order `ellipse.m` does it, so you can either use that code, or sort of use it as a guide. 
Matlab print is relatively slow. Any matlab figure printing function is going to have three main time-consuming steps: * render the figure on screen (or to some sort of virtual display) * capture the on-screen pixel information * write this pixel information to disk in your desired format Do you need to save the axes/title/legend/.etc in your figures? Do you need to render the image at all? Can you find a way to use your colormap and generate an array of size (x,y,3) where the third dim holds your desired RGB values for each pixel? You can then easily make a supersampled version of this matrix, and then use "imwrite" on the supersampled version. If that's not possible, I have found "getframe" and "imwrite" to be significantly faster than "print". You can control the figure size in pixels with something like set(gcf ,'units','pixels') set(gcf,'position', [0 0 x y]) If your screen isn't big enough to show the full figure, you might be able to change the axis limits and use getframe in a clever manner to capture the RGB data of smaller subsections of your figure, then concatenate these sections together to make a larger RGB array. This could also be useful if you want to get multiple plots to appear in a single .jpg. Create supersampled version of your array and write to disk appropriately. Another point: if you do have to render the figure, and you have many loop iterations, check to see what figures/axes/objects you are creating each time. People often accidentally create new axes objects in their figures with each loop iteration. These axes end up being hidden but not deleted, so they take up a huge amount of memory. The fastest way to do many renderings in a loop is to create a single figure object, a single axes object, and a single object of the type you're working with. e.g. a *surface object* or an *image object* or a *line object*. Then just update the object's properties on each loop.
OP if you're going to be doing this type of work often you should look up matlab's "clusterdata" function
Im glad you appreciate the post. I definitely agree with the sentiment, and that was my main reason for making "use the profiler" the 1st item on the list - just knowing what actually needs to be optimized and what is already running in negligible amounts of time is essential to using your time efficiently when optimizing a code. That said, one area where I personally don't always follow this advise if if I'm writing something that I expect I will be using extensively in the future. I figure if I'm (probably) going to have to optimize it anyways at some point then I mine as well do it right the first time. Sometimes I save time in the long run, sometimes not, though I'm sure that Ive probably picked up a few more optimization tricks as a result.
the [geom3d](https://nl.mathworks.com/matlabcentral/fileexchange/24484-geom3d) toolbox has all the functions you'll need
that's great but could you please Point out which function would do exactly what i asked ? (because i haven't got a clue)
I could, but i'm going to give you [something better](http://theathleticmindset.com/site2013/wp-content/uploads/2014/12/teach-man-to-fish-quote.jpg). download the toolbox, add it to path: addpath(genpath('D:/What/ever/geom3d')) ; then: help geom3d 
I'm not trolling man, I'm trying to teach you something. imo often the best help for people learning to program is not the solution to their immediate problem, but to give them the tools they need to solve it. Yes, it'll require more work from your part and it may seem like a daunting task, but I don't think you even tried what i suggested and read the help in 2 minutes. 
You say planes, and then you say meshes. What exactly are you trying to intersect? How are they defined? If it's a triangular mesh, then use a ray-triangle intersection test, like the [Moller-Trumbore intersection test](https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm) or similar. Pro tip - on the bottom of the wikipedia page is a link to the [Matlab file that does the intersection test](http://www.mathworks.com/matlabcentral/fileexchange/33073-triangle-ray-intersection). The intersection test should return a boolean array indicating if a ray intersects a facet (triangular face of the mesh) or not, and then you can use that bool array to index the other arrays to find the intersection location and, more importantly, the "t value" or *distance* from the ray origin to the intersection location. Hopefully that's enough to get you started. If you've got more questions then just ask. I'll help you out :)
**Möller–Trumbore intersection algorithm** The Möller–Trumbore ray-triangle intersection algorithm, named after its inventors Tomas Möller and Ben Trumbore, is a fast method for calculating the intersection of a ray and a triangle in three dimensions without needing precomputation of the plane equation of the plane containing the triangle. Among other uses, it can be used in computer graphics to implement ray tracing computations involving triangle meshes. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
If you're a beginner, trying to jump from zero experience to applying (I'm assuming) advanced filtering for GPS data is probably a bad way to start. So, 1. Go [try some introductory tutorials on Matlab](https://www.google.com/search?source=hp&amp;q=matlab+tutorials+site%3Areddit.com%2Fr%2Fmatlab). 2. If you're given a seminar paper and asked to make a Matlab implementation of an algorithm given there, then probably you should do that and not download someone else's solution to probably a different problem. 3. If you're insistent on using code you found and are having trouble loading it, I would again suggest you [try some tutorials](https://www.google.com/search?source=hp&amp;q=matlab+tutorials+site%3Areddit.com%2Fr%2Fmatlab) and learn about adding files to (or adding folders to) the Matlab "path." 
start by trying to do some very small challenges in the matlab "cody" app: https://www.mathworks.com/matlabcentral/cody/ 
You want to send a ray through vertex X of mesh 1, pass through the vertex, and then (find) the coordinates of where that ray meets mesh 0. So, you define your ray as `[[0;0;0] , [vx_x; vx_y; vx_z]]`. You have an origin - `[0;0;0]` (assumed - you wrote that in your question, but it could be *anywhere*), and you have a point on that ray - `[vx_x; vx_y; vx_z]` - the 3D coordinate for the vertex. You really only have one mesh - mesh 0. It sounds like you're using mesh 1 to get the rays that you're going to test against mesh 0. You have an origin, and again it could be anything, and you have a point on the ray. Now you can find the *direction* of the ray by taking the point and subtracting from it the origin. Your mesh is should be a set of triangular faces (or you'd have to check that the points on the face are actually planar), so I'm going to assume the mesh *is* triangular. If not you'll need a ray-polygon intersection test, which is more generic and maybe more computationally intensive; I don't know because I've never used one. Now, for each face, load the vertices that comprise that face. Being a triangle, there should be three - `v0`, `v1`, and `v2`. *Now I'm copy-pasting the algorithm from Wikipedia, altering the syntax for Matlab.* function t = triangle_intersection(orig, dir, v0, v1, v2) t = []; dir = dir./norm(dir); e1 = v1 - v0; e2 = v2 - v0; % Calculate planes normal vector pvec = cross(dir, e2); det = dot(e1, pvec); % Ray is parallel to plane if (det &lt; 1e-8) &amp;&amp; (det &gt; -1e-8) return; end inv_det = 1 / det; tvec = orig - v0; u = dot(tvec, pvec) * inv_det; if (u &lt; 0) || (u &gt; 1) return; end qvec = cross(tvec, e1); v = dot(dir, qvec) * inv_det; if (v &lt; 0) || (u + v &gt; 1) return; end t = dot(e2, qvec) * inv_det; end This returns the distance from the ray origin to the point of intersection, which is the `t` value. The function was originally defined as a "float" type, but that's not a "thing" in Matlab, so instead I had it return a value. That value is set to empty `[]` at the start, so you can check `if ~isempty(t)` to see if there's an intersection whenever you call the code. You can add more return parameters if you want; I tried to stick to the implementation given as strictly as possible. If you [read the Moller-Trumbore paper](https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf), you can see that, right off the bat, the equation for the *ray* is given as `R = O + tD`. The ray is given by the origin plus a varying length parameter `t` times the **normalized** direction `D`. So, in addition to changing the code above to return a t-value `t` (and initializing it to empty), I also **normalized** the direction. So, inside the code above, you have the origin `orig`, you have the *normalized* direction `dir`, and the result of all of the steps is the length parameter `t`. Now, if you wanted, you could also add a return parameter like `intersectionPoint` and define it as: intersectionPoint = orig + t*dir; So, to summarize: 1. Get rays from the vertices in mesh 1. 2. Pass rays and facet vertices of mesh 0 to the intersection test for each facet in mesh 0. 3. If there is an intersection, i.e. if `t` is not empty, as written above, then you can find the intersection with `orig + t*dir` where again `dir` is the **normalized** direction. If you add the intersection as a return parameter to the function, then I've already normalized `dir`, otherwise you'll need to normalize outside the function. 
Thanks for the reply. At some point I will have to set up a semi-automated function that uses imwrite, as I suspect that will be the best option (in terms of speed). I didn't even think to manually generate the rgb values, but that is pretty straightforward. Of course by now I'm nearly done generating large amounts of figures like this (for this project anyhow - Im sure ill run into this same situation again in the future). Regarding axes / titles / legends etc: "need" is relative, but I'd like to keep these. That said, I have it set so the axes ranges and colorbar ranges both stay constant, so I could generate a single "blank master copy" with these and then fill in the main image plot. I have the titles setup to automatically update with some seful info about the figure, but I imagine theres a way to convert text to rgb values and manually add it to the figure. regarding pixel size: I know that the best way to do this with print is using paperPosition, so that might work with getframe (though if I do generate a "master blank" I can just use print, since I'd only need it once). IIRC you just need to figure out how many pixels Matlab has set 1 "page" to be, and then set paperPosition so that the total size in pages matches the desired number of pixels. I know in the past Ive been able to hit specific resolutions (e.g., 2160x3840). I don't really need to supersample the data, I was mainly supersampling in order to get the pixel density up to what the data point density was. I suppose if I wanted to though I could use interp2 or griddedInterpolant or a similar function to resample it to whatever data density I wanted (I find the 'pchip' method works rather well typically). Good thought on the having multiple figures keep opening, but not the case here. I give each figure and axes I'm using a name and specify it when I call the plotting function. Id also have noticed the code slow WAY down the more figures it generated, but it is running at a pretty consistent pace (slow, but consistent).
Just a FYI: the function "cumsum(dt.*y)" does exactly this (dt can be single value or a vector the same size as y if the sampling rate varies).
Thank you ,, problem solved WOOP!
I will check this out now ,, thanks for the feed back
You start by developing a model of rollover dynamics, then implementing that model in Simulink. Then you can add in your rollover-mitigation stuff after the initial model is verified. I'd recommend considering the simplest possible case/model and start with getting that working in Simulink. If you're a true novice to Matlab and Simulink then it's probably a better idea to accustom yourself to the interface and mess around to see what different modules do. FWIW, the reference you gave has some figures showing their process that wouldn't be too difficult to translate into Simulink.
This will make my life so much easier in the future. Thanks.
 C(n,m)=A(n)*B(m)
initiatie your storage matrix: C=[]; for/if/while n= %do your shit in your loop, which builds your current iteration. c_1=....; C=[C;c_1]; %rebuild C using old C and c_1 c_1=[]; %reset c_1 for next loop end
Thank you very much!
Also, make sure you pre-allocate `C` by saying `C = zeros(3,3)` first
what do you mean looks shitty? what is wrong with it?
In addition to what the other comments are saying, you should consider using the built-in Matrix/Vector operations: C=A'*B; This will do the exact same thing as your for loop, but will be faster. Depending what you're doing, speed may not matter, but it's a good idea to get in the habit.
Take a look at the top right corner of your first matrix.
Yeah, I see that, but I'm just not getting how the [1 2], and [3 4] fit in here. If I type in just A([1 2]), it returns -2 0. I don't know what that means, nor what the comma and additional [3 4] do to the situation... Okay, it looks like it's returning the values from columns 3 and 4 for rows 1 and 2. I'm already not a fan of this programming language. :l
A(x, y)` means "get the intersection of row(s) `x` and column(s) `y`". In your case it is getting the elements where the first and second row intersect the third and fourth column. So rows `[1 2]` would give these elements (the `X` values): X X X X X X X X - - - - While columns `[3 4]` gives these: - - X X - - X X - - X X And the intersection (the place where both are `X`) would be: - - X X - - X X - - - - When doing just `A([1 2])`, it flattens `A` into a vector (puts them into one long column) and then does the indexing along the one dimension of that vector. This is called "linear indexing". So it would be the first and second element of: -2 0 -3 -1 -2 -7 8 3 5 3 1 4
TBH, I'm not either. Essentially, if you're indexing, and your index operator contains a comma, the language treats it as if you're requesting matrix(row, column). If you then make row or column an array you get the rows and columns you request. So to test your understanding: A([1 2], [2 1 1]) will get you what? 
A([1 2])] gets the first row second column. A([1 2] [3 4]) gets the first and second row and the third and fourth columns.
Thanks for the in-depth response. :D
maybe you could add a couple of patch or area objects outside of the axis range, and use the legend function as your colorbar
This. Matrix operations are way faster than index by index loops. I speed up other people's scripts by making these kind of replacements pretty frequently. 
Shit i can't update the title I meant colorbar. But what's wrong with it is that it's a bar. I want a simple legend that explains what each of the discrete colors i have on my contour plot mean.
I thought about this, but how do I get a box with the color for each area in it?
x = strcmp(tablename.cat1,'A') y = strcmp(tablename.cat2,'C') z = x &amp;&amp; y a = nanmean(tablename.var1(z)) b = isnan(tablename.var1) tablename.var1(b) = a
I'm pretty sure nanmean is in the statistics toolbox. You can achieve a similar result by doing mean(tablename.var1(~isnan(tablename.var1)).
Use this: ha = bar(100,1,'faceColor',[1 0 1]) ; hold on ; ha2 = bar(101,1,'faceColor',[1 .5 1]); legend([ha ha2],'pink','pinkish');
just a really quick glance; after the j loop, stop refers to the last particle (highest number) that... did the else thing. that doesn't feel right.
Can you upload *Frequency.csv* as well?
I've changed the code, can you have a loop again? I just want to plot 120 particles, I don't care about collisions yet but I simply can't get 120 particles to fall one by one...
Like, visually? in that case you want to plot inside the loop (and also use drawnow)
Thank you, much appreciated.
Oh bollocks sorry ,,, YEah will do that now
Sorry about that all done now
Incorrect. `A(1,2)` would get the first row, second column. You didn't type that, though. You typed `A([1,2])`. This returns the first two indices. `A([1 2] [3 4])` doesn't give you any data, it gives you an error. Matlab is expecting to receive indices that are in one of two formats: 1. An index (or set of indices) *for each dimension* of the matrix, or 2. One index (or set of indices), for use with "linear indexing" of a matrix. Matlab is expecting you to separate sets of indices **with a comma**. If you have a two-dimensional array, it is expecting `matrix(rowIndices , columnIndices)`. *Note the comma*. As mentioned, you could instead provide `matrix(linearIndices)`. Matlab linearly indexes matrices by column, such that a 4x4 array would be linearly indexed as follows: [1, 5, 9, 13; ... 2, 6, 10, 14; ... 3, 7, 11, 15; ... 4, 8, 12, 16]; So, if you wanted to refer to the element at row 2, column 3, then you could either call `matrix(2, 3)` or you could call `matrix(10)`. Both reference the same thing **for this example**, but if the size of the matrix changes, then `matrix(2, 3)` will still refer to refer to row 2, column 3, but element 10 might be somewhere else. Important note here, too, is that you get a vector (1xN matrix) if you use linear indexing. For example, if you wanted columns 3 and 4, you could do `matrix(:,3:4)`. This is using the "slice" `:` operator, which could be read out loud as, "Select all rows of `matrix` for columns three through four." The result would be, for a 4x4 matrix, a 4x2 matrix that contained elements 9 through 16. If you used linear indexing, you could retrieve the same *data* by calling `matrix(9:16)`, which can be read out loud as, "Select elements 9 through 16 of `matrix`." The result, though, would be a 1x8 vector. You lose the *shape* of the data if you use linear indexing.
Good call. I was on mobile and trying to explain what it looked like he was asking. I had the syntax very wrong. Thanks for catching my mistake b
A couple points: 1. How are you intending that the particles go? All-at-once or sequential? If it's sequential, then they never collide, because they go one after the other. If it's all at once, how do they start? I would think they all "collide" at the start, if they all enter at `(0,0)` at the same time. Something to consider. 2. You have an outer loop that goes `for j = 1:M`, but in your inner loop you have `j = j+1;`. You should delete that line. Whatever you think it's doing, it's not (example on that later). Matlab is *not* C++, and you can't interact with a loop variable like that. 3. How do you want to update the plot? This goes back to question 1 - do you want to see one particle's motion from start to finish, followed by the next, or do you want to see step 1 for everything, followed by step 2 for everything, etc.? 4. Your code structure isn't doing what you think it's doing. You have an outer loop with a variable `j`, but you never use it. You run through the *entire simulation* `j=1:M` times, *for no reason at all*. You already have a variable set, the `_mask` variables, that index all of your particles. To that point, too: 5. Your `_mask` particles can potentially overlap. You have `&lt;=` and `&gt;=` on each end of your E/S/W directions. The loop example. Try the following: for i = 1:10 disp(i); i = i+1; end Not what you thought, is it? Like I mentioned, you can't interact with the loop variable like you can with C++. If you want to try plotting, I would structure your code as follows: %% Initialisation M = 120; % the number of particles N = 1000; % the number of jumps to take Stepx = 1; % the size of the jumps in x Stepy = 1; % the size of the jumps in y e = 1/3; s = 1/3; w = 1/3; x = zeros(N,M); % set all x positions to zero initially y = zeros(N,M); % set all y positions to zero initially %% Simulation figure(1); clf; hold on; for j=M:-1:1 plotHandle(j) = plot(0,0,'.','MarkerSize',20); end axis equal; axis([-50, 50, -100, 0]); for n = 1:N % for each of the N jumps r = rand(1, M); east_mask = r &lt;= e; x(n+1, east_mask) = x(n, east_mask) + Stepx; y(n+1, east_mask) = y(n, east_mask); south_mask = r &gt;= e &amp; r &lt;= e + s; x(n+1, south_mask)= x(n, south_mask); y(n+1, south_mask)= y(n, south_mask)- Stepy; west_mask = r&gt;= e + s &amp; r &lt;=1; x(n+1, west_mask) = x(n, west_mask) - Stepx; y(n+1, west_mask) = y(n, west_mask); if y(n+1) == -100 || x(n+1) ==-50 || x(n+1) == 50 break end %j = j+1; for j=1:M set(plotHandle(j),'XData',x(1:n,j),'YData',y(1:n,j)); end drawnow; end
Try creating a colormap of only the three colors you want? You can also look into creating a dummy legend of a patch object or something
1. I've been trying to get the particles to go sequentially so that particles land at the bottom and new particles collide and stack on top, eventually creating a normal distribution. 3. I just need to plot the absolute final result with every particle in it's final resting position. That way I can count the heights of stacks, etc. The absolute final goal is to change the starting positions and analyse the effects on the distribution. Thanks pointing out the stupid mistakes as well, I've changed them. How then would I get it to run 1 particle at a time? (ignoring collisions)
how about something like : figure(14141) ; spy(spikeTrains) for iTp = 1:size(spikeTrains,2) xlim([0 iTp]); drawnow; end
Nope, that won't give me a raster. I got closer; I am updating the post now.
Actually yes it does give me the sparsity pattern, i.e. the raster, but i don't want it to grow like that. 
So, I've made it work to this - https://gfycat.com/gifs/detail/EmptyFrailHalibut But I still get these big lines - http://imgur.com/a/vL68S This is my current code - figure v = VideoWriter('testRaster') open(v); hold on ylim([1 100]) xlim([-1 3]) for i = 1:4000 valIdx = [find(spikeTrains(:,i)==1)]'; if ~isempty(valIdx) line([t(i)/1000 t(i)/1000],[[valIdx]' (spikeTrains(valIdx,i).*[valIdx]')+1],'Color','k') drawnow writeVideo(v, getframe(gcf)); end end close(v)
you'll want one line per spike, not one continous line over all spikes. so with this implementation you'll need another loop inside the inner if statement,looping over valIdx
Deleted due to dumbness
Ach damn! Got it. THANKS! It works now! Super! :)
Okay one last question. 33 channels out of these 96 prefer a downward moving stimulus and 31 of them prefer an upward moving stimulus. I want to plot the 33 that prefer downward in black, and the 31 that prefer upward in Red and the rest I want to keep white, i.e. invisible. How can I do that? Cheers
add a color value to your line. A simple way to do that is to make a 96 by 3 array, with 3 different types of rows, where white counts as invisible. before the loops do: cc=zeros(96,3); cc(theDownwardsIndexArray,:) =[1 0 1] ; cc(theUpwardsIndexArray,:) =[1 0 0] ; cc(theStupidsIndexArray,:) =[0.9 .9 .9] ;%i think grey is cooler than invisible or white Inside the call to line add somthing like ,'Color',cc(channelIndex,:) ); 
 var1(isnan(var1)) = mean(var1(~inan(var1)));
This is what I came up with: % sample data, assume only positive values (first quadrant) x = 0:0.2:10.4; y = 0.8*x+2; M = zeros( ceil(max(y)), ceil(max(x)) ); % get matrix of sizes of x and y for i = 1:length(x) M( floor(y(i))+1, floor(x(i))+1 ) = 1; % floor() to turn pre comma value to index, % add 1 for 1-based indexing, % index matrix at these values % and set to one end M = flipud(M); % flip horizontally because indexing goes from top to bottom plot(x,y); grid on; disp(M); Maybe not the most elegant way with a for loop, but works.
Awesome, thanks! You're my saviour! One more question, sorry :P The animated grid you see in the first gif is sort of wrong because its the phasemap. Phases are of course bound between -pi and pi. But the Jet colormap is not cyclical. I tried HSV which is cylical, and also downloaded the famous phasemap function from FEX which provides you with a cyclical map. But both are ugly. Both my supervisors and I prefer the jet map. All my spectrograms, coherograms, eigvec centrality maps are all in Jet. I tried flipping the jet map up-down and concatenating but of course that isn't correct either. Would you perhaps know a way of making the jet map cyclical? WrapToPi() doesn't work. Cheers
The first quadrant of a coordinate plane is the upper-right quadrant. The bottom **left** entry would be the origin.
Just want to add this here: **[gramm](https://github.com/piermorel/gramm)** can plot rasters (as well as PSTHs, see [the readme](https://github.com/piermorel/gramm#spike-trains)). You would still need to make the animations, but it could get useful if you want to add trial-type colors for example. It's also likely to be much faster than the implementation given in your post, as it doesn't use loops internally, all spikes get plotted with a single line() call. The way it does this while avoiding those lines you get is by giving coordinates with NaNs in-between the spikes. For example line([t1 t1 NaN t2 t2],[0 0.1 NaN 0 0.1])
Thanks for the help. Is there a way to loop this so I don't have to enter the individual variable name for each column in the table? Would it be better to convert to array after I've defined the conditions?
Not sure if its any faster than MATLAB's routines but I always just use the Thomas algorithm for solving tridiagonal systems. 
Wooot! Thanks a lot! Until now I've coded everything myself because I'm a PhD student and I want to know what exactly the method is instead of just using pre-made functions and toolboxes. But when writing time comes for this paper (and soon! Its spontaneous binocular rivalry task recorded from two monkeys with two simultaneous utah arrays in PFC and PPC...wooot!), then I will just push through with that function. Thanks again!
Have you tried **[gramm](https://github.com/piermorel/gramm)**?
Yeah, if you convert the whole thing to a cell array, then iterate over the combinations of groups, that might be easier.
Good approach :) Glad to be of help to a fellow electrophysiologist!
Thanks! What do you do if I may ask?
I coded a Thomas algorithm in Mex and it is three times faster than mldivide
I don't know if that's the case with mldivide but some of the builtin functions are .m files that you can access. Of course most important ones are truly built in in the sense that they are not written in Matlab where this is not possible but maybe you get lucky and the decision logic is a wrapper written in matlab. That would point you towards a dedicated internal diagonal solver function. You can access them just like your own m files via the edit command.
Are you doing deconvolution?
Oh right, stupid mistake edited to fix.
You probably want a more general approach but for lines and circles there are very efficient algorithms that raster those. https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
**Bresenham's line algorithm** Bresenham's line algorithm is an algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points. It is commonly used to draw line primitives in a bitmap image (e.g. on a computer screen), as it uses only integer addition, subtraction and bit shifting, all of which are very cheap operations in standard computer architectures. It is an incremental error algorithm. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
jet... even the (people who made jet suggest not using jet)[https://blogs.mathworks.com/steve/2017/07/24/colormap-test-image/]... i dont' see why &gt;I tried flipping the jet map up-down and concatenating but of course that isn't correct either. that didn't work. I mean, it looks silly, because jet, but when you take a colormap as 1d (say, monochrome). and you repeat it invertedly, you get to the first color at the end again. A problem is than you get the same color twice in your colormap. Maybe you can add a different cycle on top of that, for instance multiplying with a sine, which is both cyclic, and (non-even)[https://en.wikipedia.org/wiki/Even_and_odd_functions] in the middle to break the "same colors twice". this will make your colormap darker, but... it's something
**Even and odd functions** In mathematics, even functions and odd functions are functions which satisfy particular symmetry relations, with respect to taking additive inverses. They are important in many areas of mathematical analysis, especially the theory of power series and Fourier series. They are named for the parity of the powers of the power functions which satisfy each condition: the function f(x) = xn is an even function if n is an even integer, and it is an odd function if n is an odd integer. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
This is perfect thank you.
I think you can remove the loop without any real changes. At all places where you use y(i) or x(i) you could just supply the whole vector instead.
Would be interesting to see if the performance benefits actually transfer to a matlab implementation. The benefit of integer math should be easy to acquire by using the appropriate data types but since matlab doesn't do loops too well a vectorized version of xxluddixx's code might actually be quicker. As long as you don't need balls to the wall performance you should probably take the solution that is easiest to implement for you anyway.
mex files are easy to write. Basically the entry point from Matlab and to Matlab is called mexFunction ( nrhs, prhs, nlhs, plns ) where nrhs number of input (n right hand side) and its pointer to curresponding values. Use mxGetXxx to grab data from these pointer. XXX can represent scalar, matrix etc. See api doc for Mex files. Similarly, for right hand values. The thinking is like this: grab data from Matlab and calculate it via Mex functions and parse it back to Matlab after Mex calculation.
Mex files are generally for acceleration. If you are satisfied with native Matlab code speed, then there is no need to write your own Mex file. Besides, if you have Matlab coder license, try codegen that part.
Holy shit yes. Adding a sine and modulating it with an amplitude factor. Gonna try that tomorrow!
Here you go - https://gfycat.com/gifs/detail/FittingLeadingBluejay Thanks a lot man!
 r = rand(1, j); This is making random values over the range of 0 to 1. Which I guess makes sense since e = 1/3. However, this turns your masks into logical arrays containing only 1 or 0. east_mask = r &lt;= e; This works fine for splitting up the movements, but causes you to only index 1.
You are correct. I actually realized a day or two ago as well, just hadnt bothered coming back to edit the post since (at the time) no-one had commented on it. This made me think that the best performance might come from sorting the dimensions in order of increasing size and then using that order. For small-ish arrays this is absolutely the case according to the testing I did. ([test code](https://pastebin.com/JhJ8QssQ) and [text output](https://pastebin.com/MpnU4x2y)). For large arrays the answer is less clear cut. If I had to guess, the maximum memory usage is varying in such a way that you temporarily have to dip into swap/pagefile space, and (even with a SATA-based SSD). That said, one of the tests I ran is confusing the hell out of me. I figured there might be an improvement from adding (sorted) dimensions in order, so I resorted so that adding dimensions in increasing order was either first to last or last to first. Surprisingly, I found this more than doubled time. I thought this was a timing artifact issue at first, but I tried literally everything I could think of (and spent way more time than I should have) and the results didn't change. So, it seems that randomly adding dimensions ends up being (in this case anyhow) more important than the size of the dimensions that are added. Very strange. Assuming there isn't some issue with my test that I keep overlooking, I really have no idea. The best I could come up with is that maybe going in order causes more work to get dumped on a single thread for some reason, but I don't really believe that. &gt; As for why that final iteration is slower in Method 2 than Method 1, I haven't figured that out yet. This I might have a reason for. If you look at [sparse operations], operations seem to be proportional to # rows + # columns, but NOT to (# rows)*(# cols). bsxfun could easily have a similar dependence to total number of elements in each input, which would explain why having the last as big as possible helps (in my tests this actually helps considerably more than limiting the number of computations needed it would seem. Also somewhat unexpected.) . . Honestly, I don't know how much any of this transfers over to octave. I suspect this is a result of the way matlab does things on a very low level, and when you start getting into what is happening on an instruction by instruction level its hard to guarantee another program will have the same "quirks" unless it uses the exact same engine (which I assume octave doesn't). 
Bit off topic, but I've been itching to ask some other ephys people some questions about the stuff that doesn't tend to make it into the methods. In particular, questions about sorting: What are your standards for what you consider a "cellular" (i.e. not artifact) waveform? What quantitative measures of sorting quality (isolation etc.) do you use, and how do you apply them? If your electrodes are of a type that can sometimes detect the same unit on multiple channels, how do you go about removing such duplicates (most people will say "look at the cross-corellogram", but what's the rule for making the actual decision)? And if you record over many sessions, how do you go about deciding when to call two units on different days the "same unit"? Under what circumstances would you err on the side of calling them the same, or on the side of calling them different? In many cases, it may be quite impossible to be remotely sure one way or the other.. How do you handle cases where you can't definitively say (inasmuch as one ever can!) that they are the same unit or not, particularly with regard to statistical results?
Out of curiosity, what is the purpose of the animation? What does it add vs. say a coherogram or some other static visualization method? One method I have used is to assign each unit a "lane" on the Y axis (e.g. 1-2, 2-3, etc.) and then map theta phase to that range, like so: hold on for x = 1:num_units scatter(unit_ts{x}, theta_phase(round(unit_ts{x}))./(2*pi) + x, '.') end ... where unit_ts is a cell array of unit timestamps in milliseconds, and theta_phase is a continuous variable containing phase angles in range 0-2pi. I like this method because phase preferences will show clearly as horizontal bands, and precession would appear as diagonal bands. 
You really only care about the x-values, or the first column in pos, since by the rules of the simulation all y-values are -100. This "stacking" you speak of is known as binning, not really sorting. look into the built-in function for histogram. hist = histogram(pos(:, 1), 100) 
Hey thanks! I will write back in detail at the end of the day :)
Just to confirm: you were using a sparse representation of the matrix, correct? The "checks" needed to get to the tridiagonal solver (for matrix "A") are: * is A square? * calculate bandwidth of A * is A diagonal? * Is the bandwidth (already calculated) zero for the upper/lower bandwidth? * is A tridiagonal? With the possible exception of calculating the bandwidth, these checks seem like they should be trivial compared to running the actual solver. And its possible the bandwidth would be needed by the solver anyways, so theres no penalty if thats the case. And these are all built-in pre-compiled functions, so id imagine these checks are typically no more expensive than the cost of interfacing with a mex file instead of using a built-in (unless calculating the bandwidth is much more costly than I'm assuming);. Now, on the other hand, if the matrix is NOT sparse, Id imagine you would probably have to work your way down to the upper hessenberg solver, which might or night not know/utilize that the matrix is lower hessenberg too (Note: there isn't a dedicated tridiagonal solver anywhere on the full matrix decision tree). Quickly writing a code 3x faster than this without too much trouble seems entirely possible. . . Side Note: Built-in pre-compiled functions are typically very efficient (*much* more so than the "built in" .m files included with Matlab). Beating one by a factor of 3 after a few hours of coding, while not impossible, more often than not means you found a niche scenario or you were doing something wrong in Matlab. And built-ins related to matrix operations are especially efficient, since they use LAPACKE/BLAS/MKL. I tend to assume that these will be better than what 99% of Matlab users (including myself) can create. So far that has held up pretty well (only one exception comes to mind: "mtimesx" from the file exchange can beat BLAS in a few select circumstances, though this is very dependent on the specific usage), though theres a first time for everything.
Its not. FYI: you can check this by typing open &lt;filename&gt;. Either a standard .m file will come up, or a header file that describes what the function does and how to use it (but does NOT give any code) will come up. The 2nd version are built-ins (I tend not to consider the included .m files as built-ins. They are included with in Matlab, but not compiled directly into Matlab. The built-ins tend to be much faster than these included .m files as well). To my knowledge, pretty much all the matrix operations and solvers are built-ins. THis is part of why matrix operations in Matlab tend to be quite fast.
Thanks for the reply Is there a way to add in an loop of some kind which stacks particles as soon as they collide with an occupied space? Say for example, if pos(I, m) ~=0, stop random walk?
Yes, you could before moving a particle if the destination is already occupied. If the performs improvement of stopping the walk early matters to you you could put in a check that breaks the loop if that happens. Otherwise the solution of just using hist and not caring about the y value is very elegant. You have a error with handling particles moving out of the domain at the sides anyway so you might want to include that fix with the checking at every step. Currently you only check if a position is out of bounds at the very beginning of a particle, but not while the particle is falling. Of course you'll need to think about what happens if a particle should move to the side and there already is a particle there. Should it fall straight down at its current position or should it add up on the column that is to its side. Similarly at the edges, but there probably only the first option makes sense. 
Yes, that's basically what I said, I just didn't have the opportunity to check if it was the case for mldivide. Of course once the heavy lifting starts in functions only internal code is used but it's not that unusual to find some wrapping logic before that. For example, the autocorrelation is just a wrapper that puts the matrix and a flipped copy into a convolution function. It would have been unlikely but too far fetched that they put the decision logic on what algorithm to use as a wrapper.
So I should have some sort of logical mask or if statement before every movement elseif that checks if the next step is already occupied? That means for each of the three directions I need a check that the next space isn't occupied and also a check for both x directions that the next space isn't greater than abs(50)?
Yeah, basically. You have your condition that tells you in which direction the particle should move. So before moving you out in a check if the new position would be occupied (any entry in your pos list with the same x and y value) or invalid (outside of the domain) Then you just need to make a decision on what should happen. Obviously if the particle should move down and there is something there already you want the particle to stop. But what if it encounters an occupied/invalid space if it's supposed to move to the side? It probably wouldn't be unreasonable to just tell the particle to move downwards instead. That would be a catch all for both situations, if you have a particle there or a wall. Of course that downward move should then check if that would be valid as well. 
Hey, another ephys-ist here, I've been looking for ephys people to answer some questions (I posted them in response to OP in this thread, I won't retype it all here). Mostly I'm really curious about your opinions about certain steps in the ephys data processing pipeline that aren't always well documented in methods sections... I'm trying to improve my lab's practices, and I want to know what other labs consider standard / acceptable practice.
&gt; where unit_ts is a cell array of unit timestamps in milliseconds By this you mean the spike times right?
Yes. I personally like to convert all spike and event timestamps to milliseconds, so I can easily round them and use them as indices for continuous variables (e.g. power / phase of a bandpassed field potential signal), since I usually store those at 1K samples/sec.
So I did that, and I find it a bit hard to interpret - http://i.imgur.com/xaSwEw2.png Edit - Ah. I unwrapped the phase and now I can see diagonal bands. Hmmm. Edit - Still not entirely correct. My Array is a 2D Array. So vertically stacking up the electrodes makes no sense. I should take 1D slices of my array and then do this again.
Upvoted to reiterate this point. Now, while you're beginning Matlab, is the time to start optimizing your code. You have small problems, you probably know what the answer should be up front - *take the time to use Matlab the way it's intended to be used.* Matlab is a scripting language, not a compiled language, so every `for` loop cycle has to wait for the OS to be available to advance to the next operation. This is **not** a compiled language like C++, where it's just the next clock tick that advances. The differences now are petty and negligible, but if you're using Matlab for anything now, then the odds are pretty good that you'll be doing far more complex stuff in the near future. Milliseconds don't matter now, but when you're running large simulations each millisecond makes the difference between your code running in 10-15 seconds or 10-15 minutes. For my master's thesis, I had to upgrade my gaming computer to 16GB of ram (when this was uncommon) and it still took my simulations *ten days* to run. The worst part? They were running *on my gaming computer* so I was left with not much to do to kill time. Oh, did the simulation turn out poor? *Run another ten day simulation*. Seriously - utilize matrix operations. Vectorize your inputs. Practice these skills now and you'll do it without thinking later. You'll actually start to conceptualize problems as vectorized matrix operations.
Is this a *Matlab* question, or a general question? I would ditch Matlab in a hurry and look at [Python](https://stackoverflow.com/questions/34116526/simple-working-handwritten-digit-recognition-how-to-improve-it) and/or [OpenCV](http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_ml/py_knn/py_knn_opencv/py_knn_opencv.html). What toolboxes have you looked at, and what did you find lacking? *What work have you already done to solve your problem?*
Let me know what you come up with. I'm also interested in this
I've looked through the documentation on the image processing toolbox, and searched on the file exchange, and googled. I posted because I figured there was a chance I might be using the wrong search terms, or searching in the wrong place, or something of that sort. The reason for asking in /r/matlab is because I was *hoping* (perhaps in vain) to find a MatLab-based solution that can integrate easily with my existing MatLab-centric data processing ecosystem.
Software to read handwritten text from forms sells for $1000s of dollars, you may be able to rig something up in Matlab to do this but tbh it's too much of a headache. Either get your department to invest in dedicated software for this, or get an intern to do it for you.
I was kind of expecting that answer, but wasn't sure. Now I know. Thanks!
has anyone else mentioned optical character recognition? have you searched "matlab ocr"? there are some free packages apparently as well as builtins in the vision toolbox. as someone else mentioned, if you could do python, you'd have many more options to choose from. generally speaking though, ocr is pretty doable. How many forms are you talking? How many hours for someone to do the manual data entry? depending on your matlab skills and in the optimal case that existing tools for the heavy lifting, assume at least a full week to automate this, and your job is merely integrating and testing. 
[historgram](https://nl.mathworks.com/help/matlab/ref/histogram.html)
 exactly what I wanted, thanks. 
That is indeed what you said. My bad, Ive been a waaayyy behind on sleep the past few days (or weeks, if I'm really being honest). I know you mean re: using a wrapper to call a built-in, though (for future rerence) Ive found it is typically save o assume that the core matrix operations will not do this. Matrix operations are one of the few things Matlab really excels at (in terms of efficiency), and hiding these away behind a wrapper would probably piss off a good percentage of their paying customer base. For functions that do use an mfile wrapper though its usually possible to modify it for your specific task and get a decent speed boost (as you suggested). The thought that OP could just directly call the solver also crossed my mind, though interestingly I cant seem to find a function for it. I see the tridiagonal solver as part of the decision tree for mldivide, but I don't actually see a dedicated tridiagonal solver (the [hessenberg slolver](https://www.mathworks.com/help/matlab/ref/hess.html?s_tid=doc_ta) is probably the closest I found, which very well might be the solver they are reffering to). [This](http://www.netlib.org/lapack/explore-html/dd/da3/group___g_t.html) (perhaps from a different version) is probably the low evel solver. Unfortunately, I dont think its possible to call these directly from matlab (with mex you can i think, but then that adds another layer of communication to ultimately call the same function. 
Your code doesn't run. Please post a functional snippet. 
A quick and dirty way to fix your code would be to add a counter variable. Before you enter your for loop, initialize it to zero (e.g., count = 0;), then increment it each time your first if condition is true. Replace the occurrences of i in flankAndPerf00625, with count. A better way to go would be to use logical indexing instead of a loop. [Here's a link with some examples](https://www.mathworks.com/help/matlab/math/matrix-indexing.html?requestedDomain=www.mathworks.com#bq7egb6-1). A good rule of thumb with MATLAB is to avoid loops whenever possible, because they tend to be slow. You should also try to preallocate memory for flankAndPerf00625. Dynamic allocation of memory is super slow. edit: I don't have a MATLAB license anymore, so I can't test this, but give this a try: B = targAndFlankContrasts(trialCond,1) == 0.0625; flankAndPerf00625 = zeros(sum(B),2); flankAndPerf00625(B,1) = performance(B,2); flankAndPerf00625(B,2) = targAndFlankContrasts(trialCond(B),2);
Does this do what you want? condition =(targAndFlankContrasts(trialCond,1)==0.0625); flankAndPerf=[performance(condition,2);targAndFlankContrasts(trialCond(condition),2)]; If so, it has the benefit of being vectorized, so it will be much faster.
Create only one plot3 and use the handle plot objet to add to XData,YData, ZData and marker size with set fonction. Quick draft: h=plot3(....); for X=get(h,'XData'); set(h, 'XData',[X,Xnew]); end
Yeah looked harder at the code to try to get you an answer anyways, and it's not clear what format any of your data is, or why. You could just use a `tempMat` to get `Vsy(xIndices,yIndices,currentZIndex)`, and then do your conditional check on `(tempMat &gt;= ep) | (tempMat &lt;= -ep)`, but then it looks like you're using three individual indices, `ix, iy, iz`, in different combinations, to index other variables that are not uniform sizes. `Vsy` isn't defined, `x_3d` isn't defined but appears to be of size `(nx,nz)`, `z_3d` isn't defined but appears to be of size `(nz)`, and `y_3d` is also not defined but of size `(ny,nz)`. Marker edge colors come from an undefined variable `list`. My advice would be to use `repmat()` where necessary to get your `_3d` variables to be the same size as `Vsy`, so you can index them all at once as described above. Get one "page" (third dimension index) at a time, pull that into a temporary variable, then do your conditional checks all at once, and plot all at once. Something *like* ep=5; %Vsy=speed nx=60; ny=70; nz=100; desiredXIndices = 1:2:nx; desiredYIndices = 1:2:ny; desiredZIndices = 1:2:nz; for zIndex = desiredZIndices disp(['plotting ' num2str(ix/nx*100) '%']) disp(['']) tempMat = Vsy(desiredXIndices, desiredYIndices, zIndex); tempX = x_3d(desiredXIndices, desiredYIndices, zIndex); tempY = y_3d(desiredXIndices, desiredYIndices, zIndex); tempZ = z_3d(desiredXIndices, desiredYIndices, zIndex); desiredValues = (tempMat &gt;= ep) | (tempMat &lt;= -ep); cc = ceil((tempMat(desiredValues)-cmin)/dc); plot3(... tempX(desiredIndices), ... tempY(desiredIndices), ... tempZ(desiredIndices), ... '.', ... 'MarkerSize', 1, ... 'MarkerEdgeColor', [list(cc,1) list(cc,2) list(cc,3)]); end And also, I can't tell why you increment by 2 instead of 1 (for speed?), and `cmin` and `dc` are undefined, too. There may be more, but there's so much stuff missing that I can't (be bothered to make up stuff to) run your file. 
Hi there, I think your code may have worked, but I'm a little confused why. I made this small adjustment so that flankAndPerf would be organized by 2 columns instead of one: condition = targAndFlankContrasts(trialCond,1)==0.0625; flankAndPerf=[performance(condition,2), targAndFlankContrasts(trialCond(condition),2)]; My question is regarding the first line. 'Condition' is a 842x1 logical that contains '1' if the first column of targAndFlankContrasts equals 0.0625 for that trial and zero if it does not. So then in the next line of code where 'performance' takes in the value of 'condition' for it's row index, wouldn't performance be stuck indexing values only from it's zero-th (non-existent) row or it's 1st row? My question is similar regarding the 'targAndFlankContrasts(trialCond(condition),2)' part of that line of code. Thanks again for your help! 
The key here is that 'Condition' is a logical. While this is represented by '1' and '0', these are better thought of as 'true' or 'false' respectively. When you call a variable with an array of logical values, it will only return the values corresponding to the 'true' indices. For example, A([true, false, true]) will return the first and third values in A, and will skip over the second. For example: A=([true,false,true]); B=[3,2,1]; C=B(A); %C will be equal to [3,1] You can combine this with assignments to only change some of the values in an array. Continuing the above example: D=[10,11,12]; D(A)=B(A)+C; %D will be equal to [6,11,2] Since B in this example has integer values, it can be used as an index, but it will take those values as the indices: E=D(B); %E will be take the value of D([3,2,1]) which equals [2,11,6] You can combine these into a single line to get: F=D(B(A)); %B(A) is [3,1], so D(B(A)) is D([3,1]) which equals [2,6] Hopefully that's clear. Logical indexing is really powerful, and lets you remove most for-loops.
Backslash is really fast, so most likely the execution time won't be a problem unless the coefficient matrix is BIG. If the system is small enough, you might be able to just convert to full storage and use LINSOLVE. You can specify that the matrix is upper hessenberg to avoid doing any checks. If the system is large enough, that might be a little faster than just using backslash. If the coefficient matrix is really large, then you might just want to use an iterative solver like LSQR, which allows you to trade accuracy for performance. 
Are you trying to move everything in one axis to another predefined GUI axis? If so then you need to move all the children of the first axis and place them in the second one. Use get/set commands. You will also have to redo any formatting. 
Hey I just wanted to let you know - I tried the counter variable thing (took me a while to see what you meant by that) and it did the trick. Thanks for your response!
Ohhhh yeah, that's really cool. That's exactly what I need in this case. Thanks for your time and advice!
I probably should have included an explanation, but I'm glad you got it working anyway!
You have an error line 17 as you cannot use ":" to create a new matrix. If you wanted to take previous z matrix then z=[z(1); what you want ; z(end) ];
In my head I was trying to slice the columns array (which is the 2nd right?) to the previous and next values, while keeping the 1st and 3rd the same. What's the syntax for this?
In that case : [z(:,1); what you want; z(:;3)] or [z(:,1); what you want ; z(:;end)] or you have orly 3 colums. You could also do it like that z(:,2)=what you want 
I admit I'm not 100% sure, but (assuming you are generating the entire array with a single call to sparse), I think he best option *might* actually be to not sort at all. This might seem counter-intuitive, but this is my logic: Sparse arrays are very sensitive to the order things are added in, and adding data in the middle of the array (as opposed to appending it to the end) is usually extremely slow since it will have to rearrange the array to accommodate single new every center-added data value. The order you have it in is the order it will be saved in memory, so no surprise that that one is the fastest. However, because the ordering matters so much, I have to believe that the sparse function must do its own sorting before adding the data to the sparse array. I'm also fairly sure that sparse is a built-in function (the pre-compiled c/c++ kind, not the mfile kind, though i'll have to double check on that). So, if you are looking to maximize efficiency, this begs the question of whether or not you can sort the data faster than whatever method sparse is using, and furthermore if you can sort it faster enough to compensate for the additional overhead from calling the sorting function (assuming sparse is in fact a builtin it can probably call the sorting function with less overhead than you can from the matlab workspace) AND the additional overhead from the sparse function potentially going ahead and calling the sorting function it uses regardless (it *might* perform a check to see if the data is sorted, or it may just call the sorting function regardless, since sorting functions usually run rather fast on data that has already been sorted). If you had some knowledge about how the data were sorted that would allow you to reorder it without a generalized sorting function this might be possible, but for general use cases it seems like the fastest overall method will be to prioritize getting the data to the sparse function as quickly as possible and letting it do its thing, rather than trying to manually do something that sparse should be doing efficiently on its own. The difference might not be much though. That said, I'm just guessing here. I would also reiterate this strictly only applies to situations where you only need a single call to sparse to generate the entire array. If you plan on using multiple calls to sparse and/or spalloc to "grow" the array then pre-sorting the values in the order you have will absolutely be faster (in general, I find adding the data one column at a time, i.e. "data(:,j)", works pretty well). You mention accumulating sparse arrays in the title but then you build it with a single call to sparse, so I'm not sure which of these your use case will be.
idk if anyone else mentioned this, but I suspect that your if condition might give you some trouble. The issue is due to floating point roundoff error. Basically, a calculation that should come out to 0.0625 can easily come out to 0.062500000001 or 0.062499999999. While these are effectively identical to 0.0625, unless there is a 100% bit-for-bit match with exactly 0.0625, the x == 0.0625 condition will return false, not true. Matlab tries to make things line up correctly for integer values, but I wouldn't count on it for decimals (and even integers can be a crapshoot sometimes). At any rate, it is much "safer" to re-write x == 0.0625 as abs(x-0.0625) &lt; sqrt(eps(0.0625)) This gives you a range where any floating point roundoff errors will be a few orders of magnitude smaller, and any values that aren't supposed to match will be off by several order of magnitude more.
Sounds like you're doing some padding of the data somewhere and not realizing it. Or simply calculating your frequency axis wrong. 
&gt; Sounds like you're doing some padding of the data somewhere and not realizing it. I zero-pad the data to the next power of 2, but this isnt the problem. I remove this and get the exact same answer. Ive also carefully compared to data from using my loading function to data displayed using other programs, and it is identical. There are no weird interlaced zeros or anything like that. I mean, I'll check again in a few days when I can just to make sure, but at the same time this code isnt something I threw together in an afternoon...Over the past few months I have probably spent 500+ hours developing this code, and put it through multiple rounds of testing and error checking. Ive also generated 10's (maybe 100's) of thousands of images that loop through the data at different stages of the code. I don't mean to imply that this issue couldn't be caused by user error -- God knows I've fixed *plenty* of those that cropped up and probably a couple more lurking around somewhere in the code -- I'm just making a point that I am extremely familiar with the code and the data, and if it was a (relatively) big glaring issue like the data not having the correct number of samples due to zero-padding then I imagine I would have figured it out a long time ago. If I could access the data Id check right now, but that will have to wait a few days till Houston gets un-flooded. Speaking of past bug/issues, a solid half were probably due to NUMA and unexpected consequences from only using 1 out of 2 NUMA nodes. I'm tempted to add that to the list of possibilities. Not so much because I have a theory why, but simply because it gives the factor of 2x and because NUMA has found exceedingly creative ways to subtly fuck with my code. &gt; Or simply calculating your frequency axis wrong. I honestly don't see how this could be the case. Frequencies always range between +/- Nyquist (half sampling rate) with equal intervals (starting at zero 0 --&gt; +nyquist then - nyquist --&gt; 0). That plus the fact that when I generate my own signal I can visually confirm what the dominant few frequencies are just by looking at number of cycles, and the fft results for this case are exactly what they should be. The ONLY way the frequencies aren't correct is if they shouldn't be ranging from -nyquist to +nyquist, and (as far as I know) they *always* should have that range. And honestly, you can pretty much ignore the frequencies and just compare the Matlab results to the other programs and see the factor or 2 difference. The chosen frequencies have zero effect on the fft output, so the sample-by-sample comparison should always match up.
Sorry, I haven't forgotten yet. Had quite some work on Friday and then the weekend came. Tomorrow for sure I will write you back in detail.
[this youtube video](https://www.youtube.com/watch?v=Lhef_jxzqCg) explains how sparse matrices work, with the difference that MATLAB uses the column as the first index, whilst the video uses the row. It explains that the way that the data is showd in your first example (K = ...) is actually the way the data is stored in physical memory (RAM). Given this, you know that the data, as well as the indices will end up sorted in memory after you've called the sparse function. I must agree with jkool that the sparse function must therefore ensure that the data is sorted, which probably means it sorts it. It would also by my best guess just to leave the sparse function do the sorting, since it's optimised for exactly that. regarding growing the array, &gt;(in general, I find adding the data one column at a time, i.e. "data(:,j)", works pretty well). This makes absolute sense when you take into account the way sparse matrices store their data. If you add a column, you just need to append the data to what you already have, append the row-index array to the one already in the sparse matrix, and add a single value to the column pointer. Usually when appending stuff to matrices in matlab you can assume that the whole matrix is copied into a new object, the stuff is appended and the old one is thrown away (hence all the fuss about "Consider preallocating a variable or array before entering the loop by using zeros, ones, cell"). for sparse matrices thoug, the help mentions with space allocated for nzmax nonzeros. which to me (strongly) suggest there are some under the hood things going on that prevent having to reallocate the whole array if you add a bit of data. If you then make sure you also don't have to touch the data that's already there, stuff should be fastest. The most general way to append data after whats there is to look at this matrix reshape(1:16,4,4) This is the order of the data in the matrix, which is more imporant for the sparse matrix. Jkools suggest of adding one column at a time (assuming looping over increasing j) is one way to ensure that you don't add a lower index datapoint to the sparse matrix. Other option would be 2 columns at a time or half a column at a time, while making sure you do the top half first. 
Video linked by /u/EatMyPossum: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Sparse Matrices - Intro to Parallel Programming](https://youtube.com/watch?v=Lhef_jxzqCg)|Udacity|2015-02-23|0:01:31|32+ (100%)|11,048 &gt; This video is part of an online course, Intro to Parallel... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/EatMyPossum ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dm87m1f\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
Sounds doable. There's a play audio function that I don't remember the name of. And there are ways to get used input and store. Put both of these in a for loop and you should be all good. 
Wow, I'm so dumb. I just had to define a function which uses "Input" procedure. Now how do I change the title to Solved?
I also figured that out, man I need some coffee.
Check the documentation on comparison operators. 
a = [1, 2, 3, 4]; b = [4, 1, 3, 2]; for i = 1:4 if a(i) == b(i) % Run Code Here i end end
With the code I did above, the number 3 will be displayed in the command window, as that is the only time they are equal. Does this answer your question?
Can you not just use [char](https://www.mathworks.com/help/symbolic/char.html) to convert the symbolic expressions into character vectors, then use fprintf?
When I'm manipulating files I tend to use [fopen](https://www.mathworks.com/help/matlab/ref/fopen.html). All you need to give it is the filename to create. For example: for i = 1:5 % Create five files fid = fopen(['file' num2str(i) '.txt.'],'w'); % Create i-th file text = ['This text is being saved in file ' num2str(i) '.txt.']; fprintf('%s',text); % Print text to file fclose(fid); % Close file end
Look into the sprintf() function to do what you need. Use that to create a filename and hold it in a variable, then pass that filename variable into save(). AFAIK save() itself won't do format specifiers in provided strings.
&gt; What are your standards for what you consider a "cellular" (i.e. not artifact) waveform? Let's start with this first. We know that action potentials have certain waveform properties. With certain electrodes, they can be detected between 300 to 8000 Hz. Usually for Tetrodes or MEAs, we go anywhere between 300 to 6000 Hz, usually between 600 to 3000 Hz. Then comes the waveform shape. We know how APs should look like. So there comes a visual step. How do we detect spikes? A noise threshold is set. You can set a threshold using the SD of the noise, so a 5 Std already excludes over 99.97% of the events, and we know spikes are very sparse compared to the rest of the LFP. But that is known to underestimate the events, so Quiroga et al in 2004 came up with a better noise estimate. Back to spike forms after we detect it, Quiroga in 2008 also showed what really is the shape of an extracellular spike. Finally, a temporal threshold is also set. No spike can be longer than 3-4 ms and no spike can occur less than 1ms after the previous spike (biophysical properties of the membrane; absolute and relative refractory periods). Then comes sorting. Sorting is not easy. The classical way is to compute the first 3 principal components, and use them to cluster. Clustering is achieved via an E-M algorithm that fits a mixtures of gaussians (Harris 2001, Kadir et al 2013). Problem is, some clusters may not be gaussian. So how do you know how to merge two gaussian clusters even though they might not result in a new gaussian cluster? Well, visualising one of the PCs across time is very very helpful! Usually neurons stay stable through a recording. Sometimes if an electrode drifts, the clustering algo might tell you you have two clusters. However, it would just be one. There comes in the autocorrelogram of the cluster. You must see a dip at lag 0 of &gt; around 3 ms to call it a clean single unit. If the dip is deep enough that the firing rate asymptote is above a certain threshold, you again designate it as a single unit (Hazan 2010). Isolation quality is determined by many different measures. Different people use different measures. I personally like to compute the Mahalanobis distance between noise/MUA spikes and designated clusters and compute a "p-value" which is basically a ratio of the distances (Tolias et al 2007). One can also use a ratio of how many samples of that cluster fall below &lt;3ms ISI and &gt;3 ISI (this is what I am exploring now). Quiroga et al 2004 also argue that it is better to use wavelet coefficients. For my UTAH array data, both methods give me similar results. Recording over many sessions and tracking them is a different ball-game altogether. Fraser et al 2012 presented an elegant method for it. I am not too familiar with it because I recorded multiple experiments in a single session with controls and I just analyse single sessions. Maybe someone else could answer here? For dense electrodes, again, I have no experience with that. What I do know is that for tetrodes where you have 4 contacts, you get 12 PCs and 1 time component. You have to juggle all 13 components to sort. Its more time consuming. Here CCGs do come into play and they can indeed even tell you if you're looking at two Excitatory, two Inhibitory or an E-I pair by looking at the structure of the CCGs (Hazan 2010). Rossant et al published this amazing method in 2015 in Nat Neuro that uses a flood-fill algorithm to detect spikes on a dense-array that apparently gives you excellent results. We always stay safe. If we are unsure, we assign it to MUA (multi-unit activity). In many analyses, SU isolation is not even required. If you are interested, we can do a skype session with screen-sharing where I can take you through my data and how I sort them. Please do ask if you have any questions. All said and done, spike sorting still is quite subjective. In fact, spike sorting can affect the very measures of functional connectivity! (Cohen and Kohn, 2011).
cc
Literally what the fuck
This really really does sound like a job for interp2 though... try to get your head around interp1 by trying different things with simple data until you understand whats going on with interp1 and then give interp2 a go again. Try this code, where do the nan's come from? data = [0 1] ; Xold = [0 0.33333]; Xnew = linspace(0, 1/3,10) interp1(Xold,data,Xnew) 
I think [this](https://en.wikipedia.org/wiki/Cut,_copy,_and_paste) helps you the most. Other workarounds will require more work then typing 25 times the same thing. one way would be to use the output of [whos](https://nl.mathworks.com/help/matlab/ref/whos.html), but odds are stuff will get complicated fast and you'll end up spending 10x the time you would otherwise. 
**Cut, copy, and paste** In human–computer interaction, cut, copy and paste are related commands that offer a user-interface interprocess communication technique for transferring data. The cut command removes the selected data from its original position, while the copy command creates a duplicate; in both cases the selected data is kept in a temporary storage tool called the clipboard. The data in the clipboard is later inserted in the position where the paste command is issued. The data is available to any application supporting the feature, thus allowing easy data transfer between applications. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
SPOILERS! :(
haha this seems very unelegant :( but i guess i ll have to bite the bullet. Can importing the stuff differently give me an edge?!
if you use load to load a mat file, you can take an output to get all your data in a struct, and then use matlabs fieldnames function
i tried that. it will not load data in via the load cmd because the first and 2nd row or column dont have matching names, which i find an odd limitation to beginn with. I recon i ll just do it by copy paste, so i dont waste more time to figure out how to load in data...
The [gramm](https://github.com/piermorel/gramm) visualization toolbox has basically been designed for that. As a bonus it will generate legends for you and will make it really easy for you to switch from colors to subplots for example, and plenty of other things like stats visualizations. Only caveat is that you will need to reorganize your data first (put all your variables into a table, and then use stack() in order to go from separate columns to grouping variable)... 
How about you put your columns into an array, and then do a for loop: plots = [time col1 col2 ... coln]; [x, y] = size(plots); %gives you the number of rows (x) and columns (y) in your array for n = 1:y plot(plots(1), plots(n,:) hold on %holds the current plot and adds the next plot to the previous plot end hold off Have not checked this code in MATLAB, but essentially it should just loop through all your columns and add them to our plot. It is also expandable too, because if you added ten more data sets, just add those into your array and the loop will adapt. There is probably a way to merge your data sets into a row in a simpler way, perhaps if you are loading them from files generated elsewhere, you can directly load those into an array, but i'm nob 100% on the syntax of that. Hope this helps :) Edit: added more greentext comments
Read [our rules for submitting homework](https://www.reddit.com/r/matlab/comments/462uwe/submitting_homework_questions_read_this/), and make the appropriate changes to this question. This question, as posted, is completely illegible. 
Thanks so much for this detailed reply. My reason for asking is that I am a grad student in an ephys lab, and I have been trying to standardize / modernize our data processing procedures. The workflow I use sounds similar to yours, although with our system we do all spike detection online, and only the sorting steps are done offline. &gt; Then comes the waveform shape. We know how APs should look like. So there comes a visual step. So, for this step, how exactly do you make this decision? Obviously, the 'stereotypical' AP has a very recognizable shape, but do you consider spikes to be cellular *only* if they have the stereotypical shape? Could you even, perhaps, show me some examples of the types of waveforms you would reject for being "non-cellular?" Do you ever have disagreements between lab members over what counts as a "cellular" waveform? &gt; Isolation quality is determined by many different measures. Different people use different measures. I personally like to compute the Mahalanobis distance between noise/MUA spikes and designated clusters and compute a "p-value" which is basically a ratio of the distances (Tolias et al 2007). One can also use a ratio of how many samples of that cluster fall below &lt;3ms ISI and &gt;3 ISI (this is what I am exploring now). Personally, I am partial to the L-ratio (see assessment of this measure and others with simultaneous intra-/extra-cellular recordings [here](http://www.buzsakilab.com/content/PDFs/harrisJNP_00.pdf)). But for any measure, how in practice do you apply such a measure? Do you, for example, do sorting and then compute isolation measures, and then accept or reject units at that point? Or if a unit fails to meet criteria, do you ever go back and manually tweak the sorting to get it to pass? Do you ever 'overrule' the isolation measures? &gt; Finally, a temporal threshold is also set. No spike can be longer than 3-4 ms and no spike can occur less than 1ms after the previous spike (biophysical properties of the membrane; absolute and relative refractory periods). How is this, also, applied in practice? How do you actually use ISI information? E.g. do you sort without making any use of ISI information, and then after sorting use ISI distribution to decide whether to accept a unit? Or do you actually use the ISI information to make decisions during the sorting process itself? And what software do you use for all of this? Do you use software provided by your hardware vendor? MatLab? Python? Also, let me suggest that you also look into HDBSCAN for automated sorting with non-Gaussian clusters.
P.S. Also, what criteria do you use to distinguish single units vs. MUA? Obviously, ISI distribution is one criterion, and SNR is another. In practice, what would make you "unsure" about whether a unit is actually an isolated single unit?
I think using a parfor loop would be the best choice for you without knowing any mathematical details about your problem. parfor is ideal for such tasks where a function (e.g. eig) needs to be evaluated many, many times with different sets of parameters. This however is only really helpful if your eigenvalue problem is sufficiently small so that it can be executed simultaneously multiple times without exploding your RAM. Consider using eigs and sparse matrices, if your matrices are big. Also, I have no idea if and how parfor works with CUDA. Other than that, it might be beneficial to look at your problem at a mathematical level. Maybe with some tricky linear algebra magic you can reduce your many eigenvalue problems to just a few? As I said above, without knowing any specifics about your problem, I can only guess what might help.
It *might* be an issue using meshgrid. Personally, I highly dislike meshgrid. meshgrid tries to automatically account for the fact that the 1st dimension of an array is the typical "Y" direction and the 2nd dimension is the typical "X" dimension, which means when you use it you end up having to flip the 1st and second dimensions somewhere so that dimensions are ordered [2,1,3,4,5,...]. For whatever reason I *never* get this right on the first try. So, what I do if use ndgrid (same as meshgrid except for all the dimension flipping nonsense) and then just permute the first two dimensions of the the arrays. Its an extra 2 lines of code, but it works for me. [X,Y] = ndgrid(a,b); X = permute(X,[2 1 3:numel(size(X))]); Y = permute(Y,[2 1 3:numel(size(Y))]); In the above a represents the values you want the 1st dimension to use, and b represents the values you want to second dimension to use. To use meshgrid instead you would either have to switch "a" and "b" and/or "X" and "Y" (again, I literally never remember which).
Matlab is stupid easy in comparison with a statically typed language. Stay awake and you'll be fine. 
I think the key is the same in both languages - *use the tools you're given.* That is, don't try to reinvent the wheel. In either language, if you feel like you're trying to write code to do something fundamental - find a substring, convert data types, flip a vector, etc. - then you're making a (probably crappy) version of something that already exists. It's going to feel painful at first, but really your best bet is to put your work on hold, google the problem, read the documentation, and then *use the built-in functions.* The biggest difference (other than 0/1 based) would be that Matlab will heavily penalize you for using loops. Matrix operations are generally operations that "iterate" over the elements/rows/columns/etc. of the matrix, and in C++ you can get away with using a loop to actually do the iterating. Matlab uses built-in functions to iterate for you (and it uses [black magic](https://stackoverflow.com/a/31231704/5171120) to be ~60x faster than C++ at that), so **if you ever write a loop in Matlab you're probably doing it wrong.** The only instances I can think of would be where you maybe want to animate something, make some kind of real time interface, or iterate over files, but if you're doing that then you're probably using the wrong language (see: Python). I would suggest you use the [Eigen library](http://eigen.tuxfamily.org/index.php?title=Main_Page) for all of your C++ stuff, and try to conceptualize your problems as vector/matrix operations. Operations like `diff` and `cumsum` can split a time vector into segments then re-accumulate the results, etc. 
We need some more information (in fact, code you've written so far would be best) so we can help you. How are your lines defined? Do you have a functional description of them, a series of points, etc? If they are polynomials, you can use `roots`. If a more general function, `fzero`. If you have collections of points, we'll have to be more creative. 
I'll try to upload my code so far once I get to my apartment. One curve is a series of points, the other is a line defined by function of the form y = mx +b.
Hi OP, saw your edit that you got it but thought I would write something anyway. So as I'm sure you gathered, each entry in the 600x650 array representa a pixel, and the z axis (x3) is the RGB colour for each of the three respective columns. You can learn more about image functions by messing around and changing the values in the RGB columns using for loops. Good luck with all of it!
I can't wait till I know enough to fully understand what you said. HA, but seriously, thanks I'll definitely save this and keep it in mind. 
Sweet. I have a hard to understand Indian guy for 2 classes. And since one is Matlab it's great that it's easier. 
There are a lot of ways to do it I'd imagine. How about this... Subtract the y values of curve and the line at each x position. Then take the absolute value of that difference. The minimum of that is the closest they ever get (the smallest difference in y values between the two) If your curve and your line don't have the exact same x values, use interp2 (from what I remember) to force them to have the same x values. Then do as above. 
Just curious, why were you told to drop one? 
My teachers think it's too difficult for some reason. They say will work in one won't work in the other and that makes it hard to learn both at the same time. 
Here's my code: clc x = [0.0000153846 0.0000461538 0.000146154 0.000253846 0.0003 0.000330769 0.000361538 0.000415385 0.000484615 0.000692308 0.000784615 0.001 0.001769231 0.002584615 0.0039 0.008523077]'; y = [2264.69 4529.37 13588.11 22646.85 27176.22 29214.44 30346.78 30799.72 31252.65 31705.59 32611.46 34423.21 38046.71 41670.21 45293.70 50728.95]; epsilon = 0.002:0.0001:0.0025; sigma = (9.06*(10^7))*(epsilon-0.002); plot([x(:)],[y(:)], epsilon, sigma, '.-'); title('Engineering Stress vs. Strain'); xlabel('Engineering Strain (in/in)'); ylabel('Engineering Stress (psi)'); toughness = trapz(y)
I'll probably have to use interp2 anyway because I only have 15 points on the curve. The line is defined as a function so that shouldn't be an issue. I'll try this method and report back! Edit: from a quick look I deduced I need interp1 and not 2, since it's an axis-aligned grid. I posted my code in another comment so feel free to run it and give me your thoughts!
There's a course called audio signal processing for music applications on Coursera. Up to week 8 will be relevant to anyone trying to do DSP with audio. Active noise cancellation will use adaptive filters do you can look up LMS which I think is the simplest adaptive noise cancellation algorithm. This course uses numpy but the syntax is very close to Matlab. If you have studied some vibration analysis as a part of ME then much of DSP will make immediate sense to you. BTW, I don't understand nose cancellation in an exhaust. Where is the electronics here?
Ok tested it myself, it makes a big difference
Keep in mind the difference between trapz(x,y) and trapz(y). If you only do trapz(y) then it integrates over the domain x = [1,2,3,4,5,6,7, .. length(y)]. Trapz(x,y) integrates over the correct x-domain, given by x.
"for t = 0:0.01:T/30" What happens if you change the "T/30" term? If you set that to the intended time, does that work?
&gt;This is probs a stupid question There are no stupid questions! except when finding the answer yourself is easier then asking the question :P. 
no it doesn't, it just makes it worse.
How so? What exactly is the problem? Do you expect a video of ~3 seconds, but actually get one of much less? If so, how much less? What is the maximum time that the simulation runs for?
The problem is that the pendulum runs for way too long and it keeps swinging around in circles, when it's actually supposed to swing from one side to the other for about 2 seconds. The simulation doesn't seem to stop either, it just keeps going.
After you define theta, try Theta = Theta *pi/180; I think you've defined it in degrees (?), but it needs to be in radians for the subsequent trig functions. That'd likely explain it spinning too much. 
Thank you so much!. I have just to match the timing of the video now.
Brilliant! Glad to be a help 
+radecki Thanks for your reply. I didn't know that you could use [] to put a longer "sentence" in a function. Knowing it now I have solved it using: save(['filename' num2str(i) '.txt'], 'variable', '-ASCII') Just in case this helps someone in the future.
 C:\DATA\Jess\CSV files\29-8-17 csv'; if ~ isdir(files)% errormessage = sprintf('Error: The following file does not exist:\n&amp;s',files); uiwait(warndlg(errormessage)); return; end filepattern = fullfile(files, '*.csv'); thefiles = dir(filepattern); for j = 1: length(thefiles); filename = thefiles(j).name; fullfilename = fullfile(files, filename); fprintf(1, 'Now reading %s\n', fullfilename); dataArray = csvread(fullfilename); if j == 1 allDataArray = dataArray; else allDataArray = [allDataArray; dataArray]; end end xlswrite(outputfilename, allDataArray, 'All Data', 'A1'); Is this what your code looks like? Please try to format things nicely when submitting questions as it makes it easier for others to help you. Is this code not providing you with the output you desire?
According to how well you want to estimate the intersections, you have a couple of options. 1. Calculate your line at all of the x-values above, find where the absolute value of the difference is a minimum 2. Interpolate between your x-values densely (using `interp1`), and calculate your line at the same points, then do the same as above. 3. Calculate the intersection of your line with the line connecting each pair of points. Save the ones where the intersection is between the bounding end points. That is your intersection 
Please format your code so it is readable. Either by using the four spaces trick so your code looks like this or by inputting it into pastebin. 
&gt; if you ever write a loop in Matlab you're probably doing it wrong Perhaps blanket statements shouldn't be issued for a programming language? It is perfectly fine to write loops in Matlab or any other language.
or use "cosd" instead of "cos"
Dunno how you tested but try adding 'tic' and 'toc' commands to your script. Also the "Run and time" button is very useful
Two things: 1. IO is always the slowest aspect of computing. If you must print to the screen/file, try to do it in batch processing if possible (doing as much writing as possible at once). 2. It seems like you'd do well to learn about the MATLAB debugger. As a rule, you shouldn't want to look through output that way, it's much more efficient as a programmer to use the debugger. The MATLAB debugger is very easy to use. Simply click on the line number of where you want your script to pause, and then step through with f10, and you can easily see all of the intermediate values in your calculations. 
I tried using trapz(x,y), but it returned an error sayinn "X and Y must have the same shape.
In your code snippet your x is a column vector (see ' at the end) and your y is a row vector.
Basically there a lot of different ways to do the same thing, and you may end up overthinking it and create more work for yourself
I stand by the statement I made. I think there are relatively few scenarios that are both (1) best handled by Matlab *and* (2) that can only be solved with a loop. I genuinely wish every class I had ever taken would have given penalties for Matlab assignments that used loops - it would have been the kick I needed to learn to vectorize code from the start, which in turn would have saved literally hundreds of hours of *running simulations* when I was doing my master's thesis. For those few cases where the loops are unavoidable (and the time delays matter; e.g., not for simple file manipulation), you can wrap the code in question up into a mex file and eliminate the timing penalty for using the loop. Mex files are a little awkward to start using without a solid C++ background, but the syntax is essentially `varargout = mexfunction(varargin, nargin, nargout)`. The comment goes hand-in-hand with my initial comment, which I don't think anyone would have a problem with, which is that you should prioritize using the built-in functions over writing your own. With Matlab, that tends to also mean that you should "rephrase" your problem to fit the matrix-based format that Matlab excels at. Anyways, it's advice I wish I had been given, so I give it out now. When the only tool you have is a hammer, everything looks like a nail. *Change the way you think* such that you don't think in the form of loops, and then the solution becomes to solve the problem *all at once* instead of sequentially. I suggested Eigen because it should allow the vectorized mode of thinking to be used in C++ programming. 
I'm not sure why this is the case- but a lot of people when first learning MATLAB make all their variables symbolic variables. This is very bad practice. MATLAB is terrible at working with symbolic variables. If you want numbers as your output- use regular variables instead of symbolic ones. School versions of MALTAB shouldn't even have the symbolic toolbox installed- it causes nothing but grief. 
I personally didn't want to use it but the person who's collecting this wants the symbolic expressions as well as the answers
&gt;BTW, I don't understand nose cancellation in an exhaust. Where is the electronics here? One example of using MATLAB is the fooeing: Assuming that an exhaust could be modeled as a Linear Time Invariant system as a "good enough" approximation. If so then you can characterize it as some impulse response. Now you know the frequency characteristics of the exhaust and how much it muffles sound. In fact using the impulse response, you can use a convolution to simulate what an input sound would sound like after being muffled. 
Or, in the editor: 1. `Ctrl`+`A` to select everything, 2. `Tab` to indent (add four spaces to) everything, 3. `Ctrl`+`A` to re-select everything (including the leading spaces on the first line) 4. `Ctrl`+`C` to copy everything 5. Click on the editor and `Ctrl`+`V` to paste into the editor. Super lame that the Matlab Reddit doesn't have a code format button, but you can just "select all" and tab to auto-format *before* pasting. 
Hi Concordiaa, I'm just speculating but as you mentioned your matrices will be larger the eigendecomposition itself will likely be the most time-consuming operation. So preallocating H into a 3D matrix and slicing through it shouldn't make much difference. That's not to say you can't do it though. The example you posted can be done by matrix multiplication and then reshaping to the right size, e.g. H = reshape([1 0 0 ; 0 2 0 ; 0 2 0 ; 3 3 0]*X(:,:) , 2 , 2 , []) for i=1:3 Y(i,:) = eig(H(:,:,i)) end As winperator says, each eig call is independent so there's no need to or benefit to vectorising there, but on the plus side you can use parfor. You may even be able to use CUDA too, but I've no experience to help there. Other than that I'm not sure there's much you can do. Have you tried running it to see how fast it works and whether it needs to be optimised further? I'm pretty sure Matlab checks to see if you're dealing with a Hermitian matrix and uses an appropriate algorithm taking advantage of this information, so there's no speedup potential there. If you only need the most dominant eigenvalues then you could use eigs instead of eig, but this is unlikely to speed up matters unless your matrices are very large and sparse (as in order 10^6 or more elements). If the sets of inputs are not independent but are related mathematically then there might be something more we could do, but we'd need more information on their relation and how you're forming H. Sorry I couldn't be more help. Best of luck!
Ah. Well in that case, I believe you want to use [double](https://www.mathworks.com/help/symbolic/double.html). 
Ah, I fixed it and got a completely different number for the integration! Thanks!
thank you for that
Just preprocess all the csv files into one csv first by using this method:copy *.csv combine.csv http://www.tomnash.eu/how-to-combine-multiple-csv-files-into-one-using-cmd/
You should also tell that person that using symbolic math for numerical work is a bad idea 
This is not a matlab thing, this is a linear algebra thing. Two vectors need to be the same length to take a cross product
Not really. You can get the cross product by hand but the problem is they won't always be the same dimensions but they will be dimensions that can be cross producted (?wording?) so is there a function or way to do it without writing a whole huge function for it? How do online "cross product calculators" do it and is there a similar function or work around for matlab?
If you show me the hand calculation I'll show you the code
Nevermind that video is product
This looks like a simple matrix multiplication. Result = A*B Where A is a 2x3 and B is a 3x2. Result is a 2x2
when i am editing it's coming properly line by line, once saved its displaying like this.what i can do?
Sorry, I thought it had pasted neatly, irritating that it has come out looking messy. The code below is what my code looks like, but it doesn't give me the result I was looking for. The code just adds all of my data files together in one long string, what I want it to do is firstly ignore the first column in every file, then read in the second column from all 600 files and combine them in a table with each data file having its own column. Is that achievable in matlab?
Thank you I'll try this one out!
Sorry, I thought it had pasted neatly, irritating that it has come out looking messy. The code below is what my code looks like, but it doesn't give me the result I was looking for. The code just adds all of my data files together in one long string, what I want it to do is firstly ignore the first column in every file, then read in the second column from all 600 files and combine them in a table with each data file having its own column. Is that achievable in matlab?
Heya, I'm guessing you have this sorted by now, but for future reference I think your problems were likely to be: * When j is not 1, you are concatonating vertically, whereas you want the columns to be appended horizontally. Use a comma (or even just a space) rather than the semi-colon * You are also appending both columns, i.e. the first and the second each time. You're only after the second column for any case where j is not 1. Instead of appending dataArray, append dataArray(:,2) instead. Your code would now look like: % ... if j == 1 allDataArray = dataArray; else allDataArray = [allDataArray , dataArray(:,2)]; end % ... You can then plot them all against each other with something like: plot(allDataArray(:,1) , allDataArray(:,2:end)) To keep things neater you could always just pull out your 'x' (the first column) into a separate variable so as to not mix your data types within one array Something like... for j = 1: length(thefiles); filename = thefiles(j).name; fullfilename = fullfile(files, filename); fprintf(1, 'Now reading %s\n', fullfilename); if j == 1 dataArray = csvread(fullfilename); x = dataArray(:,1) y = dataArray(:,2) else y = [y , csvread(fullfilename,0,1)]; end end plot(x,y) Like I said there are easier and more efficient ways of doing this, concatenating the csv files before pulling out the data as u\i621148 says is probably best.
my guess is that they will not be different at all since intel uses amd64 which is the 64-bit version of the x86 instruction set. so instead of saying intel 64 architecture is will simple say either amd64 or x84-64 which are the same. 
I just found the ultimate solution. Type open_system([docroot '/toolbox/simulink/examples/slexMaskingExample']) into Matlab and all the examples will come up for these. You can just cut and paste into your current project.
I still hadn't sorted it so I will try it out, thank you! I did try to combine all the csv files in the command line but it then stuck all of the first columns of data that I didn't want together and made it more difficult. (As I said I'm new to coding, I've probably just done it wrong!) I will try this out now, thank you very much for your help!
It works!!! Thank you so so much! :)
lovely this will come in handy. i am handling an insane amount of data sets atm. so this is super helpful!
thanks ever so much! this is a very elegant way to solve my problem...and yet so simple, wish i had though of that.
You're so so welcome :) Keep on rocking the coding!
Matlab 2017a cpu: AMD FX 8350 'FFTW-3.3.3-sse2-avx' 'Intel(R) Math Kernel Library Version 11.3.1 Product Build 20151021 for Intel(R) 64 architecture applications, CNR branch auto ' 'Intel(R) Math Kernel Library Version 11.3.1 Product Build 20151021 for Intel(R) 64 architecture applications, CNR branch auto Linear Algebra PACKage Version 3.5.0
Hey! I'll get back to you over the weekend. Sorry for the delay! :)
 x(PulsePoints+2:3*PulsePoints) = pulse; Is the code snippit giving you the error. This snippet has 3 things, the vector x, which originally contained all zeros. Its index in between brackets, and the pulse variable. The pulse variable is in this case is a vector with all ones. In your default case x has 1000 elements, pulse 320 elements and pulsepoints is a scalar with value 320 (the length of pulse vector). So that means the command you wrote PulsePoints+2:3*PulsePoints Will simplify to: 320+2:3*320 which simplifies to 322:960 This will create a vector starting at 322 and ending at 960. So you're saying that your x vector at points 322 to 960 are equal to the pulse vector. But keep in mind that the pulse vector is only 320 in size.. So that is why matlab will complain that the sizes are different. To add a third pulse section to x, the proper syntax would be starting 1 point after where the previous one ends (which is 2 * pulsepoints). And then ending at starting position + pulsepoints (which is 3 * pulsepoints). In other words: x(2*pulsepoints+1:3*pulsepoints) = pulse; Will add another pulse part. You said you needed 7 in total, which won't fit. So you have to either decrease the pulse time (Tpulse) or increase the total time of your signal (tfin). As a cheeky sidenote, the first line of code clear clc Will clear the variable called clc, which doesn't exist in your workspace. You probably meant: clear all; clc; Or something like that.
Ah super, glad I could help :)
You can just leave out the `else` clause entirely and use a plain [`if`](https://www.mathworks.com/help/matlab/ref/if.html): if x &lt; 20 x = 20; end You can also use `if...elseif...elseif...end` without a final `else`.
It does have `continue` and blank `else` statements are also allowed.
click 'edit' and you can change it on the top-level post. also you need a blank line above and below (from memory)
1) They just leave warnings unfixed or don't understand why the editor is underlining parts of their code ^(I neeeed that square to be green) 2) They use for-loops where vectorization is possible 3) They post questions to /r/matlab that could be solved with a quick Google search or 'help function.' 4) They misuse matrix multiplication vs. element-wise multiplication 5) They are scared to use fopen, fread, fseek 6) They haven't yet learned how to make a video (there are seriously so many ways to do it and they are all straightforward)
Their code doesn't work.
You need to use the element-wise multiplication syntax bsxfun( @(a,b) a.*b, x(:,1), x(:,2) ) The asterisk alone, without the full-stop, is interpreted as matrix multiplication. You need to full-stop to indicate it should be element wise. All that's going on here is that x(:,1) (a vector) and x(:,2) (a vector) are being substituted into a and b respectively. So Matlab is trying to do [1;3;5]*[2;4;6] which isn't a valid multiplication.
I'm sure that other experienced MATLAB users may disagree with some of these, but after about 9 years of Matlab I would have to say some of the things I've noticed are: - Relies on scripts instead of functions. This means that the functionality of the code critically depends on the environment which is run i.e. you might need to do a bunch of other stuff before the script will work or reproduce previous results - Uses global variables - Uses for loops when vector operations would be more readable - For novice programmers, uses complex unreadable vector operations when `for` loops would be more readable! Also uses such operations when a `for` loop wouldn't even be much slower thanks to the just-in-time compiler - For very inexperienced users - not reading the error messages. They are quite descriptive and helpful - Also, not understanding the documentation. It's just an experience thing perhaps, when you start out it's hard to understand the documentation but once you know enough, it's easy to teach yourself because you can understand what the documentation is talking about
Disagree, my code *works* wonderfully, the quality however, ...
Slow code, and not commented well.
I got a few I don't see here yet, -using syms unnecessarily -not sharing code when asking a question -calling a high level graphics function inside a loop and wondering why stuff is so slow -inability to use logical indexing edit: -religious faith in "loops are slow" 
Yes exactly, but bsxfun is supposed to apply the function 'element-wise' to the 2 inputs, so a *b should be valid as scalar values, but it is substituting a=vector, b=vector, that's kind of my point otherwise why do I even need bsxfun... this is a toy example, the real problem involves looking up values using a and b as keys and applying functions to those.
I'm still trying to figure out the error messages coming from c++ their a little different. 
the doc of arrayfun mentions: &gt;A = arrayfun(FUN, B, C, ...) evaluates FUN using elements of arrays B, C, ... as input arguments. The (I,J,...)th element of A is equal to FUN(B(I,J,...), C(I,J,...), ...). B, C, ... must all have the same size. you can use that like this: arrayfun(@somefunction,x(:,1) ,x(:,2)) or just use a loop. Arrayfuns aren't usually faster than a for loop
Ahhhh... I even saw this but didn't consider splitting into 2 vectors like that. In my head I had a row-vector as a single input Cool that's helpful, thankyou Edit: Perfect! confirmed works
Lack of capability to use object-oriented features and usage of functions such that one's program looks like a huge script written in the early 1980s. At least that's what my Matlab programs looked like around 14 years ago when I first started out. To unpack your question further, I would say that you could bifurcate the actual programming from the matrix math itself, since Matlab is inherently designed for...well, matrix math. So one layer is the computer-sciencey, pride oneself on using best program practices, set theory, etc., whereas another layer is the total strung-out math geek who can hardly find where he or she parked the car because they are too busy thinking about a problem. I would say that it would be possible to write absolute genius Matlab stuff in terrible code, however there are some minimum practices needed to prevent a computer from taking from now until the end of eternity to execute the code, or for a single individual person to be able to remember how the code works, in the case of highly complex programs. Those practices would be: * Vectorization * Object Orientation * Various File I/O If you can't do those, you are kind of limited in the global space of what is actually possible with Matlab, even if you are a math genius. Matlab can be super fricking fast in terms of processing data, and there are widely-practiced ways of programming in Matlab well-documented on Mathworks discussions which encourage this. I would say the Matlab community is one of the largest strengths. Other data science communities, say Python, have people coming from all different parts of the Universe, perhaps Django website designers, whereas Matlab typically originates in Academia, where they are inherently dealing with super fricking huge datasets of various types, and have been since the 1960s, because their jobs are to ostensibly create new knowledge, whereas other domains, such as web development, have the job of, "making something happen." As such people who come from this knowledge-creating, science background may see the world in terms of vectorization and performance, whereas web developery types may just throw more computing power at a problem. I hope my logic makes sense here... Another layer of programming practice would be - are you actually working on a team? If you're a single individual researcher and the only person who needs to know how the code works, you can make it as disorganized as your brain can handle - no one can tell you how to organize your home office desk, to use a metaphor. But as soon as one starts sharing a "desk" or file system with others, you are starting to run into writing code that stresses other people out, e.g. spaghetti code. Working on a team and coding for communication involves empathy. Most of the Matlab stuff I have ever written was just for me personally, and I blaze through it for discovery purposes, which is one of the reasons I use Matlab instead of Python for certain tasks - it's faster. However one can't go on like this in a team environment.
&gt; I even saw this, but (...) In my head (...) Let this be a great lesson. More often than not we miss a solution to a programming problem because we thought of a cool sollution and are looking for a way to implement it. What is often more productive is to remember what you are actually trying to solve, the bigger problem, and consider how stuff you find can be used for that, and not only how it might be used for your percieved sollution. Keep an open mind and try to understand stuff you find for what they are and what their possible uses are, not only how they might be used for your concieved way of implementing something. This will not only help you find sollutions faster, but immensly increase your learning rate :)
If I get another script from an intern that starts with clear clc I'm going to scream. Don't destroy my workspace because run your script. 
I look at the right hand side of their editor. If it has a lot of yellow, that's my sign. 
Cheers Obi-wan ;0
Duly noted
hehehe
&gt;&gt; Relies on scripts instead of functions. This is the most important IMO.
Going to actually disagree with you here. Obviously, in general it depends, and your particular type of work or environment may warrant that stance, but I want everything I run to be 100% segregated. If I'm running someone else's code, I've switched tasks and want what I was doing before to be gone. If I'm running my own code, I want whatever I was doing before to be 100% gone. All of my own scripts start with clear, and I have had some terrible (stupid) bugs from when I got lazy with that. Sometimes I even close and reopen MATLAB so I don't have saved paths from other projects.
Sounds like a company I was interning at. I'd also like to add * Doesn't use source control (effectively)
I'm on board with 1-5, but what does video have to do with anything?
Not using handles. The facepalm code I see when I review my own old work is something like: for currentSample = 1:nSamples clf; plot3(fancyData(1,currentSample),fancyData(2,currentSample),fancyData(3,currentSample); drawnow; end This forces the graphic to get cleared and re-drawn for every frame. A little better would be: plotHandle = plot3(fancyData(1,1),fancyData(2,1),fancyData(3,1); for currentSample = 1:nSamples set(plotHandle,'XData',fancyData(1,currentSample),'YData',fancyData(2,currentSample),'ZData',fancyData(3,currentSample)); drawnow; end Pro tip - the best way to make animations (imo) is to utilize a time vector and `tic`: elapsedTime = 0; plotHandle = plot3(fancyData(1,1),fancyData(2,1),fancyData(3,1); tic; while elapsedTime&lt;=timeVector(end) currentSample = find(timeVector&gt;=elapsedTime,1); set(plotHandle,'XData',fancyData(1,currentSample),'YData',fancyData(2,currentSample),'ZData',fancyData(3,currentSample)); drawnow; elapsedTime = toc; end Obviously this requires your data to be some function of time, but as long as that's the case then this skips frames as appropriate to synchronize an animation to real time. You could have 0.0001 second intervals or 0.5 second intervals for time; the frame either gets repeated or frames get skipped, as appropriate, for the animation to play. Now you get smooth animations that play correctly. I've seen other posts here where some users are saying that using `for` loops are bad, and others saying that blindly avoiding `for` loops is bad. I agree with both. I think it's important for new users to learn *how* to avoid using a `for` loop and what the penalties are. As /u/pwnersaurus mentioned, readability counts for a **lot**, and sometimes (as with animations, file operations, etc.), loops are either unavoidable **or** the time penalty associated with the loop is negligible with respect to the time that it takes for the looped operation to run. The experienced Matlab user will show a "judicious use" of loops. I think that best approach for learning Matlab would be to hold a loop back as a "tool of last resort," but it's important to acknowledge that the *do* have a use. Functions are big. New Matlab users are easy to spot because they have the same thing written in a bunch of different spots in their code. I have a folder **full** of "helper functions" I wrote to make using Matlab easier. For example, I use the `patch` command a lot for creating things to get animated. You *can* call patch as `patch(X,Y,C)`, where `C` is color data, or you can call it `patch(X,Y,Z,C)`, for 2D/3D patches, respectively. I got tired of writing out `patch(myData(1,:) ,myData(2,:), myData(3,:), myColor)` every time I wanted to make a patch, so I wrote an `EasyPatch` function that takes data and an optional patch spec and makes a patch. It will automatically recognize if the data is 2D or 3D and calls `patch` appropriately (it does a lot of other stuff, too, but that's the gist of it). Now I just call `EasyPatch(myData,myColor)` any time I want a patch, and I let `EasyPatch` sort out how to call `patch`. Functions are kind of like distributed loops. A loop does the same thing repeatedly in *one* location; functions do the same thing repeatedly in *different* locations. tl;dr - Use handles wherever possible, uses loops sparingly, and uses functions for repetitive tasks. I guess those are signs of an experienced programmer, so a new programmer would be the opposite. 
&gt; Uses for loops when vector operations would be more readable And faster. A dead giveaway of Matlab newbiehood.
for-loops :) 
Your scripts wouldn't need to start with `clear` if they were functions...! :) 
Yea, reasonable point, but I still think it's a poor solution for most situations (at least the ones I'm in). With a script, it changes my "workspace" to that script. I can probe variables after and do additional calculations, etc. If I use my "script" as a function, I need to put a debug in and keep that runtime up in order to do the same thing. Your workspace usually isn't that "valuable" - and if it is, what are you doing playing around with another script? And if you ARE in some edge case, then fine, but recognize it's an edge case.
It may not apply to everybody, but in so many situations an animated graphic is an *excellent* way to present data. This overlaps strongly with being a data visualization nerd. Some people may just not be that into it, regardless of their level of Matlab skill. 
Seriously. If doing that is necessary, you're being sloppy with variables anyway. It shouldn't be needed, and it's ugly. 
* Not vectorizing code when possible (I know everyone else has said this, but it must be said) * Using arrays of structures instead of structures of arrays: Variable(:).Field is slower to loop through than Variable.Field(:) * Not preallocating variables * Not creating help information for their functions * Not using the profiler on slow code
My advisor has 30 years of matlab experience and he says functions are bad and everything should be done in scripts. His argument; they are more transparent in what is happening.
Almost any project can benefit from an animated figure at some point, so it's a pretty common thing for people using Matlab to attempt. It's almost like a rite of passage. 
Perhaps this is exposing me as not as well-versed as I thought, but I've always wondered whether vector/matrix multiplication or for loops were faster. Your second point leads me to believe it's the former. Is this correct?
Correct, matrix multiplications and the sort in Matlab are implemented via C functions and highly optimized. 
That's good to know. Thanks!
You already heard which and why but for some color commentary I'll add that MATLAB is short for MATrix LABoratory if that gives you a hint. 
 &gt;* Using arrays of structures instead of structures of arrays: Variable(:).Field is slower to loop through than Variable.Field(:) Is there anything wrong with just using a table instead, here? I love tables. The only thing that makes me sad about tables is that there's no simple, streamlined way to vertically concatenate tables where some tables don't have all the same columns. 
Aparently, total noob here, Matlab has objects?
I always assumed it "Mat" was short for "Math"! TIL, thank you!
As a substitute for resorting to file I/O, let me also say that integrating MatLab with a database (e.g. Postgres) can do wonders for data organization and speed of batch operations. Also, can you expand a little for me on why it's so advantageous to use MatLab's OOP features?
You know, I have not tried that yet but I am very interested in integrating with Postgres. Using Matlab's OOP features is useful if your program grows in size and complexity. You can couple both data and functions together and keep things a lot cleaner for super large programs. Doesn't take long to learn, I used [this series of videos](https://www.youtube.com/watch?v=DBTSMDv7pKI&amp;list=PL4bFPZnVfMSVHohsYUmAdLUvTpxCTVPyN). 
Yes, and it doesn't take long to learn, I used [this series of videos](https://www.youtube.com/watch?v=DBTSMDv7pKI&amp;list=PL4bFPZnVfMSVHohsYUmAdLUvTpxCTVPyN). 
Not sharing code when asking a question, and then the famous, "Nevermind, I figured it out."
Your response made me remember, "tic" and "toc". When you say, "judicious use of for loops." That could perhaps be more strictly defined as, "use of tic and toc functions to test for loop impact on operating duration."
I'm stuck with an ancient version of Matlab at work (v7), so I haven't really worked with tables, so I'm not sure. From what I've read, tables should work really well for this, but without doing some speed tests, I can't really say how well it performs in practice.
Thanks, I'll give that a look. For database-based data analysis, there's a pair of undocumented functions that are really handy: getByteStreamFromArray and getArrayFromByteStream. Converts any MatLab variable (can be a struct, table, cell array, other wonky object, anything but a handle) to a uint8 vector. Great for storing arbitrary data in Postgres as a BLOB / bytea. Only hassle is that Postgres wants it to be a formatted as signed int8, but converting is easy enough. The other (parallel computing toolbox specific) database related thing that took me way too long was how to effectively interact with the DB in a parfor loop. There is a method parallel.pool.Constant() that can accept a handle to a constructor function (in this case the function that creates the database connection) that will be executed on all workers. This can be done outside the loop, and the workers will then have a database connection inside the loop. Prior to realizing that this functionality existed, I was opening and closing a connection on each iteration in my parfor loops. Next step, soon the database will be on a server with a very fast RAID 10 array, with a 10gbps direct connection to my workstation (which will be fully saturated).. And then, oh, how fast we shall fly.
It's not a real time solution, but in my lab we did something similar. We had two computers, one running a 3D location program which we had automatically output a screenshot every minute and sync the picture to a cloud directory and the other running a Matlab script that used OCR on the screenshots. The reasons we did this is our 3D position software was proprietary and didn't have a real time output to file (just at the completion of the test) and we didn't want to overload the 3D computer with too many processes.
Would a screen capture work well enough? How often do you need to grab a frame? Check out this screen capture function on file exchange. Also follow the link to Yair's blog post on Undocumented Matlab [file exchange screen capture ](https://www.mathworks.com/matlabcentral/fileexchange/24323-screencapture-get-a-screen-capture-of-a-figure-frame-or-component) 
I strongly suggest you use the [debugger](https://www.mathworks.com/help/matlab/matlab_prog/debugging-process-and-features.html?requestedDomain=www.mathworks.com), it will allow you to step through the execution of each line of code, and see how the variables change (Matlab shows you the workspace variables, typically on the right-hand side of the screen. You can also enter them at the command line to print their values). You probably also need to look at the [`for` loop documentation](https://www.mathworks.com/help/matlab/ref/for.html), as I do not think that loop is doing what you meant it to do.
&gt; Is the code setting “B” equal to 2 elements? In a manner of speaking... B is a 1x2 matrix. &gt; After the code runs once, will “delta” at the end be equal to 3 different values? No, you are not changing the value of delta which incidentally is just 1 value (10) &gt; How are all the previous elements being replace so that the code just registers delta = 10? Question unclear.
it should be for j = 1:length(T)
&gt; Concerning loops, of course you need to loop over the images in a directory, and then over the bar index *b*. Making some assumptions about how your variables map to the problem, are you *sure* you're not allowed to loop over `k`?
Try [reading a book on how to fish](https://www.mathworks.com/help/matlab/math/matrix-indexing.html). Do you not have a textbook?
So the actual problem is that we have to loop over all images, and the inner loop is to loop over k. We're not allowed to write a nested for loop for this problem, so that's why I was thinking to do it the way above. It's a kinda dumb constraint since the code would still be technically using nested loops anyways.
Could the answer be as simple as [calling the respective indices](https://www.mathworks.com/help/dsp/ref/submatrix.html)?
Since it's a homework question, i'm going to only drop a hint. If you want more, explain to me how [this](https://www.google.nl/search?q=Linear+Programming+with+constraints+matlab&amp;oq=Linear+Programming+with+constraints+matlab&amp;gs_l=psy-ab.3...1258.2451.0.2570.7.6.0.0.0.0.107.419.5j1.6.0.foo%2Cnso-ehuqi%3D1%2Cnso-ehuui%3D1%2Cewh%3D0%2Cnso-mplt%3D2%2Cnso-enksa%3D0%2Cnso-enfk%3D1%2Cnso-usnt%3D1%2Cnso-qnt-npqp%3D0-1701%2Cnso-qnt-npdq%3D0-54%2Cnso-qnt-npt%3D0-1%2Cnso-qnt-ndc%3D300%2Ccspa-dspm-nm-mnp%3D0-05%2Ccspa-dspm-nm-mxp%3D0-125%2Cnso-unt-npqp%3D0-17%2Cnso-unt-npdq%3D0-54%2Cnso-unt-npt%3D0-0602%2Cnso-unt-ndc%3D300%2Ccspa-uipm-nm-mnp%3D0-007525%2Ccspa-uipm-nm-mxp%3D0-052675%2Ccfro%3D1...0...1.1.64.psy-ab..1.5.346...0i19k1j0i22i30i19k1j0i22i30k1j0i22i10i30k1j33i22i29i30k1.F1QrpM3Ne9A) did not yet enable you to solve your problem
This should do the job, and satisfy your loop requirement: for i = 1:k B(i) = sum( A( A_index==i ) ); end 
You construct C as follows: C = A_index(:) == 1:k; This gives you a matrix where the first column gives you the elements of a that should be in the first element of B. The second column for the second element of B and so on. Than you just have to multiply by `A(:).'`: B = A(:).' * C; This gives you the row vector B. Transpose it, if you need a column vector.
Step 1: Google "Matlab Polar Plot" Step 2: Click on first link. Step 3: Find out the function is polarplot. Step 4: Use the documentation to figure out how to use it. 
Thank you :)
Nah, just compute the sum of the squared discrepancies in the loop over the images. No need to map them over to the `B` vector until you've already got the sum over all the images (outside of the image loop).
I could only solve this problem graphically and thus, I couldn't use the linprog function.
I think the way you plot your area is a bit to complicated, and therefore to hard to get right (it'd take me like an hour i think). Can't you just plot the lines like [here](https://i.ytimg.com/vi/hNqLAwyhT-4/maxresdefault.jpg) ?
The area function isn't actually the one you need to draw any constraint. you want to use [patch](https://nl.mathworks.com/help/matlab/ref/patch.html). i attached an exmaple below how to use that one. the reason i added a plot function there is so you can see whats the inputs to patch are: figure(25) patch([x,x(end:-1:1)],[x/2,repmat(12,1,numel(x))],[1 0 1],'FaceAlpha',0.1) ; hold on ; plot([x,x(end:-1:1)],[x/2,repmat(12,1,numel(x))],'k.-') 
The end result is supposed to look like that, but I also needed to plot some contour lines so that's why I used the contour function. 
The contour stuff is fine, its the area stuff that goes wrong
I believe i've might be sending you on a quest to retrieve a red herring in the other thread... sorry. [this](https://www.google.nl/search?q=matlab+plotting+of+linear+programming+constraints&amp;oq=matlab+plotting+of+linear+programming+constraints&amp;aqs=chrome..69i57.10247j0j7&amp;sourceid=chrome&amp;ie=UTF-8) probably helps more
thanks for all the help, but I have already searched that to no avail. The first link uses MuPad and I need to do a Matlab script instead. The code I initially uploaded was from the "Matlab Lecture 9 " result as well.
when in doubt, [stack overflow](https://stackoverflow.com/questions/31785075/how-to-plot-inequality-equations-associated-with-a-linear-programming-function). 
thanks for the code. However, some of my inequalities have just one variable (e.g. x &lt;= 10 and y &lt;= 7). How would I go about plotting it? The provided example had two variables so it was very easy to set the equations in terms of one variable.
matlabs [plot](https://nl.mathworks.com/help/matlab/ref/plot.html) function draws lines between points. what you do is define the points. There are a bunch of examples in the documentation you can use to figure out how it works. Below I made another example that might be usefull: figure(1) plot([1 2 2 1 1],[ 1 1 2 2 1],'k-') ; %set the axes limits for visibility xlim([0,3]);ylim([0,3])
A line can be defined by two points. 
Your reference line needs to be an array that is the same length as x (and y). You can do this using the the ones() function and multiplying the array by 100. Then you can can use the plot function. Plot(x, y1, c1, x, y2, c2) where y2 is your reference data, and c2 is the line spec (color). http://www.mathworks.com/help/matlab/creating_plots/using-high-level-plotting-functions.html#graphics-ex99259345 
I'm still a MATLAB novice, but I'm so glad to see someone else thinks the global variables are useless. My chemical engineering instructors use them, and I'm always sitting in class like: "... Why?"
This is a Simulink block.
It is at first, but learning how to read the documentation is probably one of the most valuable skills to learn when starting any programming language. 
Well firstly, I wasn't the person who answered that nor did I know the answer, so no, I could not have done that. Secondly, do you want to have to ask other people for help every time because they just give you the answer? That's fine, but I would personally prefer to learn the process, that's all I was trying to say.
good attitude bruh. I'm sure you'll be successful asking for every answer on a silver platter
Seperate code from the rest of the text by a whiteline, and precede every code line with four spaces to properly format it and make it readable for those willing to help you. 
&gt; I am able to plot the aerofoil... but the calculation of distance is somehow not correct. So, in addition to fixing your formatting, please also post what the correct answer is supposed to be and some actual formulas that give you the correct answer and the inputs you need. You stated, &gt; I want to calculate the distance on the top of the aerofoil and divide it by the distance at the bottom of the aerofoil. Okay, where are those values? Are they `x`? `y`? Your `sum` variable? Also, parting jab - **does your code actually run?** I noticed the `endfor` in your code. Please at least post *functioning* code snippets. 
Yeah it was pretty terrible, thanks.
&gt; Trying to get a "Teach a man to fish and you'll feed him for a lifetime" situation going. Okay, [Google your question](http://lmgtfy.com/?q=create+a+submatrix+matlab), but remember that you're using *Matlab*, so all of your questions about "arrays" would be better asked if you used the word "matrix" instead. 
Yes, I use `tic`/`toc` to profile my code whenever I think things are going too slow. You can use nested tic/toc calls if you save the `tic` state. For example: processTime = tic; for currentRow = 1:size(bigNumbers, 1) outerLoop = tic; for currentCol = 1:size(bigNumbers, 2) innerLoop = tic; &lt;your process runs here&gt; fprintf("Inner loop takes %.2f ms\n", 1000*toc(innerLoop)); end fprintf("Outer loop takes %.2f ms\n", 1000*toc(outerLoop)); end fprintf('Process takes %.2f ms\n", 1000*toc(processTime));
I don't have the correct answer. That is why I'm writing the code in the first place. I calculated the distance with the standard formula of distance of the straight line between two points. Now that I think of it, it's only a rough approximation since distance between the two points is curved and not straight. When the loop ends, the final value of the sum is supposed to be the distance. There is something wrong, which is why I'm asking for help... And yes, the code runs. But as I said, there's a problem with the final result, because it displays: Sum= Sum= Sum= Etc... Why do you say it doesn't run?
Awesome, thanks.
endfor is not how for loops are terminated in Matlab 
I say it doesn't run because it doesn't lol. I copy your code, I paste it into a Matlab script, I run it, and I get Error: File: reddit.m Line: 27 Column: 1 At least one END is missing: the statement may begin here. The `END is missing` because you don't have `end` statements, you have `endfor`. If you don't have the correct answer, then **that** is the question you should be asking. A "nested for loop" (the title of your question) doesn't have anything to do with your real problem, which is that *you don't know how to calculate the answer.* :EDIT: If you're saying this code actually works for you (I don't believe it does though), then please try the following in your command window: which endfor You might have some ridiculous custom function like function endfor evalin('end'); end lol :DOUBLE EDIT: That still wouldn't run, even if you did have that. There is no matching `end` for the `for`. 
Nice. Now if you would like to predict the time it will take and decide whether or not to use a for loop... predicted_processTime = tic; for currentRow = 1:10 outerLoop = tic; % do outer process for currentCol = 1:10 innerLoop = tic; % do inner process fprintf("Inner loop will take %.2f ms\n", size(bigNumbers, 2)/10*1000*toc(innerLoop)); end fprintf("Outer loop will take %.2f ms\n", size(bigNumbers, 1)/10*1000*toc(outerLoop)); end % If total_waitingtime &gt; one_minute, recode with vectorization Edit: my use of 10 loops is arbitrary, you could do it with one loop each.
Yup. I do something similar. I'm not going to post all the code here, but basically printing to the command window eats a lot of time, so you can include checks for updating. For example: innerElapsed = zeros(1,2); for currentRow = 1:size(bigNumbers,1) for currentCol = 1:size(bigNumbers,2) innerLoop = tic; &lt;your process runs here&gt; innerElapsed = innerElapsed + toc(innerLoop); if innerElapsed(1)&gt;= notifyThreshold innerElapsed(1) = 0; clc; fprintf("Inner loop has run for %.2f ms; %.2f ms remaining.\n",innerElapsed(2)*1000, (innerElapsed(2)*1000) / (currentCol/size(bigNumbers,2))); end end end Now you set a `notifyThreshold` and get an update approximately every that many seconds. If your process actually takes more than about 1/10th of the `notifyThreshold` setpoint then you'll probably start to notice uneven update intervals. 
I think you meant to do elemental division? Change your / to a ./ edit: the one that's not in the exponents I mean
I'm not sure how you got any plot at all. In MATLAB, to get "e to the" you use the function `exp`
If I understand you correctly you want to compare the cumulative length of the top surface vs the bottom surface for a given distance 'x'. You should probably separate out your two surfaces into two different cases, and you can also do lot of the operation outside of for loops which keeps it readable e.g. x = [0,20,40,80,120,160,240,320,480,640,800,960,1120,1280,1440,1520,1600]; y1 = [0 38.24 53.6 76.16 94.24 107.04 124.8 136.32 144 138.56 121.12 96.8 69.12 36.16 0.64 -20.16 -40.16]; y2 = [0 -27.68 -34.08 -39.68 -41.92 -43.04 -44.16 -43.2 -41.76 -40 -37.92 -36.96 -37.44 -38.56 -40.96 -42.24 -44.16]; figure hold all h = 0:0.5:3; for i = 1:length(h) dl1 = sqrt( diff(x).^2 + h(i)*diff(y1).^2); dl2 = sqrt( diff(x).^2 + h(i)*diff(y2).^2); l1 = [0 , cumsum(dl1)]; l2 = [0 , cumsum(dl2)]; plot(x,l1 ./ l2) end Aside: I'm not sure entirely why you're doing what you're doing... I don't believe you can calculate the velocity on an aerofoil based soley upon the local angle of the foil, and the flow on the top and bottom surfaces should be independent, so comparing the length of their surfaces for a given 'x' point seems a strange method. But perhaps I'm mistaken. If you're interested in the affect AoA, camber and thickness have on an aerofoil's properties I'd recommend starting with Thin Aerofoil Theory, although bear in mind this assumes the flow is 2D, incompressible (so only applicable for low Mach number) and inviscid (no friction, so no boundary layers etc and separation is assumed to be at the tail 'kutta condition' so will not predict stall) https://en.wikipedia.org/wiki/Airfoil#Thin_airfoil_theory
Lot's of people when they're starting out overwrite the standard e for 10\^ notation (e.g. 1e3 as 1000) by instead forcing e = exp(1); Horrible to anyone who's used matlab for a while, but I've seen many people do it! Better than clear = 3 though.
Just copied the code again. It runs just fine. However, I think this is the difference between Matlab and Octave. For all my "endfor", it's an "end" on Matlab. They're the same syntax so I thought such things were the same, my bad. I'll change endfor to end.
You are absolutely right. Flow on the top and bottom are independent. However, as a high school student, I don't think I want to delve into Navier Stokes equations (which an aeronautical engineer told me about) in order to establish a relation. The method I'm using assumes that two particles of a fluid, one on each side of the aerofoil, meet at the trailing edge when they start together. It's a wrong theory in itself but I suppose it gives a rough idea of the lift. Besides, I will be calculating the effect of maximum thickness on lift force, so the correlation is what is most important... I think...? I'll certainly mention my assumptions and limitations at the end. Thank you for realizing that. Regarding the code, I didn't think of dividing them. Definitely makes it easier, thanks a lot. However, I wanted to measure distance on top and bottom for every 0.0001 movement on x axis. Because with that, I can find the velocity at that interval. I know the area of the wing at that interval as well, so I'll be able to calculate lift force, and finally sum them all up to find the total lift force. Thanks a lot again for your help. I'll also read more on the Thin Aerofoil Theory. Edit: Side question: is it possible to find the distance between two points on a curve with just the coordinates and no function? As you might have noticed I used the standard formula for straight lines, which further decreases accuracy. 
If you cannot install anything on your work laptop im afraid there might not be a solution. 
Oh okay. Yes, welcome to /r/matlab. I thought you had posted Matlab code. I'll reiterate again, though - *you need a formula for your answer* before you start to consider whether or not you need nested loops to calculate your answer. 
&gt;If I save the first script, clear it, and write the second script with its own values for variables, will the first script remember the right values for its variables? No, unless the variables are defined in the script itself, which is probably what you want to do. So for the script you write for a given assignment, the first thing in the script should be defining your variables. 
You do not need to install MCR. You can unzip it and you just need to make sure you have it in your PATH (which you can set using a batch file). We do this in order to run compiled matlab packages directly from a network share. I have a couple of issues with the compiler. One is that you need the MCR at all (the compiler cannot make standalong packages). Two is that it cannot cross-compile (windows to linux or vice versa). P.S. PATH needs to contain *mcr_root\version\runtime\win32|win64* More info here https://www.mathworks.com/help/compiler_sdk/cxx/mcr-path-settings-for-run-time-deployment.html?s_tid=gn_loc_drop
Ah sorry I didn't realise you were a high school student! So long as you are aware that the theory you're basing this on is incorrect. In truth there is absolutely no reason two initially adjacent particles will remain so after passing on either side of the aerofoil. This "wavelike" motion is sometimes taught in school to explain lift but it really shouldn't be, it's just plain wrong. Okay, rant over :p To answer your questions, yes you could do it for a curve rather than for linear segments which you were doing with your Pythag formula. First you would need an approximation of the upper and lower surfaces, usually this is done by specifying peicewise polynomials to give a smooth results. Matlab can do this for you, for example the "spline" function should work well here. In regards to then calculating the local arc length, have you done differentiation yet? If you applying trig to an infinitesimal portion of that would give: dl^2 = dx^2 + dy^2 which can be re-arranged to give you the length of the curve per unit horizontal distance i.e. dl = sqrt(1 + (dy/dx)^2) dx Unfortunately the sqrt in the above operation means that even if y were a polynomial or could be approximated by it, the dl term is not. You can of course store dl^2 as a polynomial however. I'm not sure how far you've got with differentiation etc, and it's not the easiest thing to do in Matlab / Octave so I've written a function in the code below which will do this step for you, i.e. convert your peicewise polynomials which approximate your upper and lower surface heights into peicewise polynomial which specifies the square of the local arc length compared with your unit x distance. Sorry if this is all a tad confusing! It's a little beyond high school maths from what I remember! x = [0,20,40,80,120,160,240,320,480,640,800,960,1120,1280,1440,1520,1600]; y1 = [0 38.24 53.6 76.16 94.24 107.04 124.8 136.32 144 138.56 121.12 96.8 69.12 36.16 0.64 -20.16 -40.16]; y2 = [0 -27.68 -34.08 -39.68 -41.92 -43.04 -44.16 -43.2 -41.76 -40 -37.92 -36.96 -37.44 -38.56 -40.96 -42.24 -44.16]; figure hold all h = 0:0.5:3; for i = 1:length(h) ppy1 = spline(x,h(i)*y1); ppy2 = spline(x,h(i)*y2); ppdl1 = dl_squared(ppy1); ppdl2 = dl_squared(ppy2); n = 3001; xi = linspace(0,1600,3001); dl1 = sqrt(ppval(ppdl1,xi)); dl2 = sqrt(ppval(ppdl2,xi)); plot (xi,dl1./dl2) end function pp_darc2 = dl_squared(pp) % get the polynomial coefficients [breaks,coefs,l,k,~] = unmkpp(pp); % differentiate dcoefs = coefs*diag(k-1:-1:1,1); % square the resulting polynomials by convolving the coefficients with themselves dcoefs2 = zeros(l,2*k -3); for ip = 1:l dcoefs2(ip,:) = conv(dcoefs(ip,2:end),dcoefs(ip,2:end)); end % add one to the constant term for each piecewise poly coefs_dl2 = dcoefs2 + [zeros(1,2*k -4) 1]; % remake the polynomial pp_darc2 = mkpp(breaks,coefs_dl2); end 
Thanks for putting so much time into this! I've done quite a bit of calculus in my higher level maths, so I'm familiar with the length of curve formula you mentioned. I didn't think t would work without having a function though! There are bits of the code that lost me haha. I tried running it, but it says "dl_squared" undefined. Isn't there supposed to be something that equates to "dl_squared" before? Thanks a million.
What is the error? Is the function `f` a "function" in the symbolic expression sense or in the MATLAB programming sense? If the latter, I don't see where a function handle would be coming from. If the former, I am surprised `diff` would work.
Dumb question, but are you saving handles to the figure data after creating the box? Its possible you're creating a box but its not getting saved. you can see what buttons exist with findobj(figure_name, 'Style','pushbutton'). Just see if it exists after creation.
Just updated the question
I am looking at for a map
Why are you using symbolic variables? 
 function newton(myFunc,initial) syms x; f=@(x) eval(myFunc); tol=0.01; e=diff(sym(myFunc)); f_pr=matlabFunction(e); result=initial; n_f=@(a) a-f(a)/f_pr(a); for i=1:50 result=n_f(result); print(result) end end Help me, it's not working
to be able to use diff()
The derivative of f is b + 2abx. You only need to calculate that once. Don't use symbols for numerical calculations. 
no, this is not the actual case, I have more complicated derivative, technically I can get it using matlab again
actually I need to get two derivatives, and of them is supposed to be calculated in the loop
I use the "guidata" command in the last line of code for each button to save changes if that's what you're referring to. 
He looked at the lake
What would you like the data to look like? Do you need to keep the units or just the headers?
The derivative shouldn't be changing in a loop. Calculate derivatives once. Evaluate them numerically. Symbols are not meant for numerical calculations. 
Summary: Scripts are super good for in-depth nitty-gritty debugging without having to use manual debugging / code breakpoints very much. The variables that are spit out to the workspace after a script is run can be immensely helpful to look at in a pinch. Functions are super useful for maintaining modularity of code and separation of concerns. It is good to be in the habit of writing functions first, unless you want something done quick with a script. Scripts should become functions, or be rewritten as functions, as soon as it is viable to do so, or when the arguments and outputs are fully or partially fleshed out. Functions are great for the end result product. Scripts are great for rapid prototyping and faster debugging.
And regardless, like the error says, diff() works on numerical arrays, where it takes finite differences; or on symbolic expressions, where it calculates the symbolic derivative. It doesn't know what to do with a function handle. 
&gt; f=@(x) eval(myFunc); You define this as a function of x, but never use x in the body of the function. This will give a constant output. 
He probably tested it out by commenting out his printouts. I second using the "tic" and "toc" functions.
That is my backup plan. Another issue I am running in to with TabularDataStore is the variable naming issue. It appears that the class was made assuming the columns will always be in the same positions, so I get an error when creating the datastore for all my files.
Keeping the units around would be nice, but ultimately all I need is the variable name and the data below. The intention is for data introspection and ultimately training a supervised model on the data.
If you use data tables it doesn't care about order of columns when combining data. I agree you should use textscan to import headers then numeric data. Depending on how big the files are you can combine them all together in memory. Otherwise you can write out ordered columns to a new text file.
No, you're not missing anything. The command window is not a text editor and you can only edit a single line at a time in it. 
Aha, thank you! Looking at it now, it seems obvious... but doesn't everything? (hindsight is 20/20!) Thanks for the help :)
I mean... No. Anything they wrote in Matlab is eventually a machine instruction. It is running on the machine after all. Practically speaking, unless you really know what you are doing and try pretty hard, vectorized code will beat nested loops in c/Fortran.
The question is, what do you mean with: "machine level computing"? If you mean it most fundamental, ultimately MATLAB code has to run on hardware, on "machine level ", and therefore can't be faster. If you mean with that single core or basic x86 instructions, yes maybe , as well made SIMD and multircore computing can beat a naive single core assembly x86 version.
The dl_squared bit is the custom function I wrote at the bottom, such that when you call dl_squared it should step into that function. I'm not sure exactly how to port this for Octave as I don't use it, but I assume it has a similar structure. Are you copying the above into one file (script) before you run it? Elsewise I assume it's an Octave thing and you might have to look up how subfunction or functions within scripts etc work within octave! Glad that you get the calculus! It doesn't work without a function :) the trick is to pass it a suitable one. The solution I suggested above is called cubic splines (link below). Essentially this takes your set of discontinuous points and tries to fit a different cubic equation between each adjacent pair which flow smoothly from one to the next. That way if you originally had say, 16 points, you would end up with 15 cubic equations each of which define a smooth approximation of your surface for a small section of the curve. This is by no means the only method to approximate the smooth surface, and there are lots of variants, but it is probably the easiest for now! Matlab essentially does all the heavy lifting for you in the spline function, you give it your points and it returns all the spline polynomials bundled together which using ppval you can interpolate any point you wish on. https://en.wikipedia.org/wiki/Spline_interpolation
**Spline interpolation** In the mathematical field of numerical analysis, Spline interpolation is a form of interpolation where the interpolant is a special type of piecewise polynomial called a spline. Spline interpolation is often preferred over polynomial interpolation because the interpolation error can be made small even when using low degree polynomials for the spline. Spline interpolation avoids the problem of Runge's phenomenon, in which oscillation can occur between points when interpolating using high degree polynomials. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/matlab/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
Huh... good bot. Why you appear so intermittently?
well, you don;'t have to end every codeline with an enter, a semicolon also works. for instance, try this line: figure(1); for i = 1: 10; plot(i,i,'.');hold on; end This not necesairily a good method though, since it gets confusing really fast. It only works for really simple stuff. I usually use sections and a "scratchpad" m file for things like this (called dev.m,for no other reason than to feel more like a developer). When i want to test a quick thing out, i make a section, (starting with %% name and then do the stuff there, using the "run section" button (or f5) to run it. When i want to test a new thing, i put a return above the section, and start a new section above that. 
Think about what you are asking. 
I do the same. Sometimes, especially if I'm doing something like loading a very large file of test data, I'll put an error on the first line so I *can't* run the script. This keeps me from entering the file-load section of the page. Then I'm free to iterate the section of the script that uses the data the file loaded. Typically, my scratch script file looks like: error('Did you really want to run all?'); %% Load data &lt;load a big file that takes a lot of time to process&gt; %% Process data &lt;section that uses file data&gt; So if I'm on a fresh Matlab instance, I'll comment out the error and run the whole script. The first thing I do is un-comment the error and then I'm covered in case I accidentally hit the run button. Seems petty, but I hate loading a file that's already in memory when the load operation takes 1-2 minutes. Those minutes add up quick!
the main reason vectorization is fast is that it is parallelized. by the way, the for-loop stigma is less relevant in recent versions of matlab that have modified the JIT compiler to recognize and vectorize for-loops most of the time. many matlab core operations, like `fft` or matrix inversion, have c or fortran or even assembly behind them. if you run a simple matlab routine with vectorization against a single threaded c routine, the matlab will be "faster", but that's not really a fair comparison. pure matlab will **always** be inherently slower than c because it is compiled at run time. 
*How* are you using guidata? You have to *get* the handles structure first, then "save" it at the end. So, instead of: handles.box = uicontrol(...); You *should* have something like: handles = guidata(gcbo); handles.box = uicontrol(...); guidata(gcbo, handles); And similarly, when you delete it later, you need to pull *and save* the handles: handles = guidata(gcbo); delete(handles.box); guidata(gcbo, handles); The other important thing is to recognize that *you can't access any properties of the thing you deleted*. You need to be sure that you aren't accessing anything after you delete the object in the `clear_button` section, and that you aren't accessing anything before the actual `handles.box = ...` line in the `create_button` line. You could have a logic error in the `create_button` code. Note that you **can** "set properties" before you create the `uicontrol`. You're not actually setting properties, though; you're just making a struct and then overwriting that struct with a uicontrol handle later. For example, consider the following code: uiHandle.Style = 'Slider'; uiHandle.Min = 0; uiHandle.Max = 1; % At this point you have a STRUCT called uiHandle. You do NOT have an actual handle to a uicontrol object. uiHandle uiHandle = uicontrol('Style', 'slider); % Now you have overwritten the STRUCT with a HANDLE. uiHandle % Now if you delete the handle, it will become an invalid handle. You can't set properties on an invalid handle. The way to check for this would be to see if you have any of the "dot notation" for your uicontrol properties. In the code above, you may **think** you're setting min/max to 0/1, respectively, but you're not. The dot notation, `uiHandle.Min = 0`, for example, is a newer way to access properties. Try changing all of your instances of dot notation to the more verbose, but safer, `set(uiHandle, 'Min', 0);`, etc. *Now*, if you try to do that, but `uiHandle` doesn't already have a field called `Min` (as in, it's not actually a uicontrol handle yet), then you get an error `Undefined function or variable 'uiHandle'.`