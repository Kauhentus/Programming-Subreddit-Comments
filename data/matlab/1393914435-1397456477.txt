The fact that matlab publishes these ridiculously easy questions as a practice exam (http://www.mathworks.com/services/training/certification/exam-questions.html) makes me think that anyone looking at "Matlab Certified Associate" on your resume will pretty much know that the standards are pretty low. Too bad, because good Matlab programming is a decent skill, and if Mathworks made the test hard enough would be worth putting on a resume. 
If you are using the fprintf() function: fprintf('Lol number: %g\n',300);
Sometimes, in these settings, you might be getting the raw binary output for an A/D converter. So 0 might be 0 volts and 255 might be the max range of the converter. You'd need to convert those numbers to voltage in, and your voltage number into a temperature based on the type of sensor used (thermocouple? Thermistor?)
See: * http://www.mathworks.com/help/matlab/ref/format.html (e.g.: "format long")
Yeah that looks pretty worthless.
 format LONGE 2000000.0 ans = 2000000 2000000.01 ans = 2.000000010000000e+06 200000.01 ans = 2.000000100000000e+05 20000.01 ans = 2.000001000000000e+04 2000.01 ans = 2.000010000000000e+03 200.01 ans = 2.000100000000000e+02 20.01 ans = 2.001000000000000e+01 2.01 ans = 2.010000000000000e+00 It'll only do it if there is something to actually show. Now ENG behaves different and always forces it to an engineering exponential (power of 3) format SHORTENG 2000 ans = 2.0000e+003 20000 ans = 20.0000e+003 200000 ans = 200.0000e+003 2000000 ans = 2.0000e+006
MATLAB is hilariously bad at providing easy access to output formats that are simultaneously (1) "nice" in terms of readability and (2) "one-to-one" so that different values yield different formatted representations. For example, I typically use "format long g", which does a decent job of (1), but fails with (2): &gt;&gt; x = 0.9999999999999999 x = 1 &gt;&gt; x == 1 ans = 0 When I really need to fully inspect values, java.lang.Double.toString(x) is a handy trick that gets this right. 
So MATLAB has this weird thing where you can straight up import and use Java libraries. So you can use whatever java driver you like.
:/ I was just thinking the same thing. I wanted something to bonify my skills and benchmark that in an advertisable way. 
A much cheaper and much more valid way is to take up a programming project and write a short paper about it and post it to your personal webpage (and uh, make a personal webpage). Mathworks also has programming challenges and contests, and winning one couldn't hurt either. Taking up a project and finishing it, and then being able to communicate it effectively (with pictures, pseudocode, and text) is an important and translatable skill to almost any programming job you would actually want. If I were hiring, that would impress me a lot more than a certification. 
Could you explain this in a little more detail for someone who has very little experience or knowledge in Java and sql as to how it might help me? Or could you point me in the direction of some resources that may help me get up to speed? Thanks for your reply by the way!
I don't have any resources handy, and I haven't done too much of what I described (certainly not in a while), but here's some stuff I pulled from the internet that looks ok: JDBC tutorial (writing database access programs in java): http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html Mathworks' docs on using Java from Matlab: http://www.mathworks.com/help/matlab/matlab_external/bringing-java-classes-and-methods-into-matlab-workspace.html StackOverflow on calling Java from Matlab: http://stackoverflow.com/questions/9520503/calling-java-from-matlab
I wouldn't say it's "hilariously bad". I mean, MATLAB just follows the rules of floating point representation.
I don't understand what the problem is... can you elaborate? &gt;format short &gt;3e2 ans = 300 &gt;A = 300 A = 300
Just use some subtraction. 1. The first quadrant has a left bound of x, a right bound of 0.99, a top bound of 0.99, and a bottom bound of y. 2. The second quadrant has a left bound of -0.99, a right bound of x, a top bound of 0.99 and a bottom bound of y. 3. The third quadrant has a left bound of -0.99, a right bound of x, a top bound of y, and a bottom bound of -0.99. 4. The fourth quadrant has a left bound of x, a right bound of 0.99, a top bound of y, and a bottom bound of -0.99.
From the looks of the difficulty of the exam, it's pretty much "pay us $700 and we'll give you a qualification". Disappointing.
In recent versions of MATLAB you can import .NET assemblies - that's what I've used for SQL interaction. Think it's System.Data? But I go this route mainly because I'm already familiar with it from C#
I'm unaware of a built in way, but throwing out half an shouldn't be an issue? Have I misunderstood the question. Also, unless you need all the points, you could use the interpolation to reduce the amount of vector elements
&gt;I'm unaware of a built in way, but throwing out half an shouldn't be an issue? Probably it isn't an issue, but, since I don't know how matlab handles memory, I always wonder the pros and cons of having those points calculated, having a 1GB vector created, deleting half of it and in the end replicating the vector. It would appear to me that if I were able not to compute those elements from the start and I wouldn't need them for the inverse transform it would be better. (nonetheless tic/tocs tell me that each fft is taking 8ms to complete, while the subsequent operations take 3 seconds each, therefore speeding up the fft wouldn't help at all)
What are you finding difficult?
yeah they don't call it the FFT for nothing.. 
I'm not sure what you mean by "just follows the rules of floating point representation." The value 1 and the value 0.9999999999999999 are not the same, when represented in double precision floating point. But the built-in mechanisms for displaying these values, or even converting them to string representation (e.g., num2str), do not distinguish them. This certainly seems inadequate to me, for an environment that is presumably *focused* on numeric computing, especially when other arguably "general-purpose" languages get this right. Witness Java (as mentioned above), or Python, for example. 
OP - foolish of me, but it was over the weekend when I made my OP to you. ncdump() isn't a MATLAB function, use ncdisp() to get at the metadata. ... but maybe you already figured that little mistake out.
Or change your display format. &gt;&gt; format longe &gt;&gt; x = 0.9999999999999999 x = 9.999999999999999e-01
Except this doesn't work, either. It fixes the specific example above, but not in general: &gt;&gt; format longe &gt;&gt; x = 1.1 + 2.2 x = 3.300000000000000e+00 &gt;&gt; x == 3.3 ans = 0 
For some reason I thought I was in here (since I subscribe to both). He's rather proud of himself for running 4x versions of matlab each running a tiny part of a for loop which sounds like is going to run over night. http://www.reddit.com/r/EngineeringStudents/comments/1zl7e2/i_dont_have_the_matlab_parallel_computing_toolkit/
You might want to use the 'symmetric' option of ifft just to ensure that ifft correctly identifies the conjugate symmetry in your FFT data.
Sounds fun - I'd be into it
&gt; It's because matlab treats everything as a matrix. 3.3 is just a 1x1 matrix. It makes displaying matrices easier. Except it doesn't. Or at least, it isn't required; there is no reason to require the same number of digits displayed for each element to nicely format matrices. Left-padding with spaces is not rocket science. &gt; It looks like Java is the one truncating it now. All of those problems are specific to floating point and in particular doubles. I think you are missing the point. Because it's not 3.2999999999999998, either. The 64-bit value that is closest to 3.3 is actually 3.29999999999999982236431605997495353221893310546875 (or equivalently, 3715469692580659/1125899906842624). But that doesn't mean we have to display all of those digits to *uniquely identify* the number that we "mean," i.e., the one *closest* to 3.3. (This is *not* the same thing as printing the full decimal expansion of the rational number represented by a particular double, which would require the above 51-digit monstrosity.) 
A LongWord integer is just a 32-bit integer. It can be signed or unsigned, depends on the language. Given that IDL has a LONG and ULONG, I'm going to go with it being signed in your case. And MATLAB is definitely not case insensitive. You can specify types when creating data.
In that case, do you think I could simply use a regular array of 10 elements, and just loop fread 10 times with the "source" being "int32" to have the same effect? Thanks for your response! Edit: Actually, would this line work? fread(rawData, 10, 'int32');
Probably should be `fread(rawData, 10, '*int32');` unless you want them converted to doubles. 
Well you actually have 16 9's there, so the floating point representation is 1 since the 16th digit forces a round to a 15 digit number. You might find a different story if you use 15 9's instead. &gt;&gt; format long &gt;&gt; A = 0.9999999999999999 A = 1.000000000000000 &gt;&gt; A = 0.999999999999999 A = 0.999999999999999 In other words, you can't keep track of changes in extra digits with a 15 digit number without rounding.
I'm down. I might be 50/50 between helping out and learning, but I'll do what I can when I come across posts
Yes of course they are not the same value, I was explaining why they have the same display, maybe that wasn't clear.
I've tried messing around with it but I just cant seem to make Matlab graph it! I've read through the code (which was really repetetive, I cut it down to what I thought it should be) but it doesn't seem to work :/ Any thoughts? 
Great idea! I'm in! 
If the original script works and the one you modified doesn't, then your modifications broke it. I can't do anything but make wild guesses if you don't post your code.
Given a vector of strictly increasing values, for every element in the vector above a threshold find the element in the vector closest to itself minus the threshold. 
Yeah the line that said [c,i]=min(abs(q),[],1); Should have said [c,i]=min(abs(q),[],2); It's fixed now.
Looks pretty good. I knew there had to be a function somewhere that did this. 
Holy shit. Parallel ports... There is a nostalgia trigger! Sorry I have no useful suggestions for you. Just wanted to express my sympathies for your struggles in trying to bridge a 20 year technology gap :x That is going to be a hard one to track down support for unfortunately :(
Yeah I'd love this. Still learning MATLAB, but I'll help where I can. 
This is the code you linked. It works fine. function weierstrass(a,b,kmax) % WEIERSTRASS Plots Weierstrass's non-differentiable function for % the interval [0,1]. % % w(x) = sum_{k=0}^{\infty} a^k \cos(2\pi b^k x) % with 0 &lt; a &lt; 1 and a*b &gt;= 1 % % Funktion arguments: % a, b : Coefficients (default: a=0.5, b=3) % k : upper limit of k for the computed sum (default: % k=20) % Author : Andreas Klimke, Universität Stuttgart % Version : 1.0 % Date : August 12, 2002 if nargin~=3 if nargin&lt;2 a = 0.5; b = 3; end kmax = 20; end c1(1:kmax+1) = a.^(0:kmax); c2(1:kmax+1) = 2*pi*b.^(0:kmax); x = linspace(0,1,1000); plot(x,w(x,c1,c2),'b-','LineWidth',2); title('Weierstrass''s non-differentiable function','Fontsize',18); xlabel(['a=' num2str(a), ', b=' num2str(b)],'Fontsize',16); ylabel('w(x) = sum_{k=0}^\infty [a^k cos(2 \pi b^k x)]','Fontsize', ... 16); set(gca,'FontSize',14); grid on; %-------------------------------- function y = w(x,c1,c2) index = 1; y = zeros(length(x),1); for k = x y(index) = sum(c1 .* cos(c2*k)); index = index + 1; end 
Do you have a picture/plot? Any code? We can't offer too much help as it stands at the moment I feel..
What is: an airfoil/NACA? Or can you replicate the problem with dummy panels and post the images here?
If you grab the TE top and bottom thickness values, you could average them. Replace both of the TE thickness values with the same averaged thickness to obtain the finite TE you are looking for. Example. If your TE top and bottom values happen to be, say, 0.025 and -0.015, the average between them would be 0.005. Replace the 0.025 and -0.015 thickness values with the averaged 0.005. Now you have a sharp finite TE that lies on the airfoil camber line. 
I know I know. I'm stuck with it for various reasons. Painful!
Other than the obvious, naming axes, title and having a legend if needed I don't have any tips on the actual graphs. But to make them look nicer, especially if you are going to print them you should save them in a higher resolution. In my most recent code I used print to save my figures: print('handle', 'output format','dpi', 'filename') That is; print(figure1_handle,'-dpng','-r300','figure1.png')
Ooooo. And with Simulink's additional support for the Arduino and BeagleBone (and other tiny boards) this is awesome.
yeah, still kinda pricey. $60 with $10-20 toolboxes would be great
I always export to .ai and then fix them in Illustrator.
3.5" AND 5.25" drives?! Big baller!
"Fix"
For what Matlab does $150 is ungodly cheap. Photoshops starts way more than that. Now that I'm old and shake my fists at trees it's much easier to just pay $150 and not have to figure out how to crack it. Especially compared to the costs of some of the hardware home hobbyists buy. It would be nice if they offered a 'pay as you go' like Adobe does now. Subscribe to Matlab and all toolboxes for a low monthly price.
Well, I couldn't go without the Control System, Optimization, Signal Processing, System Identification, and Symbolic toolboxes. So nah. Fortunately my university provides those toolboxes and a ton more.
I never use Matlab for graphs or images. I export the data in a CSV or tabs-delimited TXT document, then use Gnuplot. Makes it a hell of a lot easier when transitioning to manuscript writing.
Ahhh nostalgia. The first computer we owned had a turbo button. I used to mash that thing all the time. Imagine my dismay years later when we upgraded to a new machine and my dad disassembled the old one with me for fun. Popped open the case and sure enough the leads coming out of the turbo button connected to... nothing. It was a soul crushing moment. I think I'm still bitter about that one.
You should round N. Floating point errors cause it to not be an integer. In your exact solution calculation, vectorization means you can simply write exact = 1./(1+t.^2); This avoids the last loop entirely. That is good, and it is something you should strive for. In addition, `t` doesn't need to be assigned in the loop as it is perfectly fine to just do t = tinitial:dt:tfinal;
make sure you use large enough fontsizes for the axis labels, legend etc. Also plots using linewidth 2 makes the plots look nicer (imo). Put this at the start of your script and change the values if you want: set(0,'DefaultAxesFontSize',13,'DefaultTextFontSize',13,'defaultLineLineWidth',2); Also make the borders transparent so you don't get gray borders. Also I recommend this tool for saving figures: http://www.mathworks.com/matlabcentral/fileexchange/23629-exportfig Then you can save them in several formats, most likely you want them in .png for powerpoint: export_fig filename -png -transparent 
I'm partial to [plot.ly](https://plot.ly/)
Is it worth $150 more than python, numpy, scipy, pandas, sympy, R, and all of CRAN?
I like it. My Cody solutions are sub optimal and I like leading about ways to vectorize my code. 
I'm really glad this license wasn't available 4 years ago, or I'd have never moved on and switched my entire workflow to Python. I'm much happier now.
I'm happy to see that more companies are offering home editions of their products. If i can get proficient at home, i'm more likely to ask for the software at work. 
Or just look at the numbers in their actual floating point representation. &gt;&gt; format hex &gt;&gt; 1.1 ans = 3ff199999999999a &gt;&gt; 2.2 ans = 400199999999999a &gt;&gt; 3.3 ans = 400a666666666666 &gt;&gt; 1.1+2.2 ans = 400a666666666667
I don't know how versed you are on solving ODEs in general so i'm going to talk about it a bit more in general. there're generally two ways to achieve a solution. (1) solving the ode symbolically and (2) solving them numerically. (1) there's a good description [here](http://www.mathworks.de/de/help/symbolic/solve-a-system-of-differential-equations.html) which uses [dsolve](http://www.mathworks.de/de/help/symbolic/dsolve.html). you will still have to read on a little bit to prepare your system to be solved. (2) a numerical solver calculates the solution y for an ODE like y'+y=0 incrementally. that means the solver starts from initial values at time=ts and takes steps of width h to time te. however, you can only solve 1st order ODEs this way. that means, you'll have to reduce your 2nd order system with 2 degrees of freedom (DOF) to a 1st order system with 4 DOF. how do you do that? like this: introduce additional ODEs that are: q1 = x' = q2' q2 = x q3 = z' = q4' q4 = z now substitute these into your system and you'll get: q1' = (beta * q4 - alpha) * q2 q2' = q1 q3' = gamma * q2^2 - q4 q4' = q3 with: alpha = 1/4 * (1 + deltaepsilon) beta = epsilon gamma = epsilon/2 this is what you will need in order to use numerical ODE solvers. i wrote the system like that with purpose. consider a simple 1st order euler forward ([ode1() - download from mathworks](http://www.mathworks.de/matlabcentral/answers/uploaded_files/5693/ODE_Solvers.zip)) fixed step solver. the equation for solving y(t) is (with n being the current and n-1 the previous step): y(n+1) = y(n) + h * f(t(n), y(n)) f(t(n), y(n)) is nothing else than the derivatives at the time t. so what this solver does is starting from initial values y(0) calculating y step-by-step. What does that mean for you? you have to write a function calculating ONLY the derivatives as stated above. the function does not use the time but the current time is passed as the first argument. if you have time dependent functions in there, you can use it. the "~" means that the input argument is not used. derivatives=@(~, q, alpha, beta, gamma) [(beta * q(4) - alpha) * q(2);... q(1);... gamma * q(2)^2 - q(4);... q(3);] set your constants at: tspan = 0:1e-2:50; alpha=0.1; beta = 0.25; gamma = 0.01; q0=ones(4,1); you probably have initial values given for x, z and their first derivatives. i just set them all to one. and finally your function call to the solver: Q = ode1 (@(t, q) derivatives(t, q, alpha, beta, gamma), tspan, q0); it uses an [anonymous function to pass the additional parameters](http://www.mathworks.de/de/help/optim/ug/passing-extra-parameters.html#brhkghv-9) alpha, beta and gamma. Q now contains the solutions for q1...q4 which is [x', x, z', z] over time. in order to view it, plot it: figure(); plot(tspan,Q(:,[2,4])) legend("x", "z"); title("solutions of 2nd order ODE system"); xlabel("time"); ylabel("solution"); and there you go -- simulation techniques 101. you just numerically solved that system of ODEs. further questions? feel free to ask. remember to put the downloaded m-files somewhere into the path. use pathdef in matlab to add a path to the search path. 
a = get(obj,'X') That work?
I don't know anything about graph toolboxes, but depending on your usage, it could be as simple as representing self-edges as nonzero entries along the diagonal of the adjacency matrix.
Here's my class def.... classdef test_class properties str end methods function obj = setval(obj) sample.num=10; sample.string = 'lol'; obj.str = sample; end end end And here's my function: function untitled obj = test_class; obj = obj.setval; struct_copy = obj.str; disp(struct_copy); end If I call untitled from the command line, I'm able to get the structure in a new variable... Or did i completely misunderstand your question ?
all the tools I have tried so far (Biograph in particular) either ignore the diagonal of the matrix explicitly, or are incapable of rendering the connections (as it requires loops rather than lines or arrows)
That does not seem to answer my question at the moment. I have something like this properties X end methods function d = func(obj1,obj2) obj1 = classname(obj1); obj2 = classname(obj2); a = obj1.X; b = obj2.X; d = function(a,b); % a function in another file end function obj = classname(input) obj.X= input; end end And I want to know why obj1.X is outputting a classfile, not the structure added in input, it throws errors because function(a,b) is expecting structures not classes
just checking, but is your function actually called 'function' ? I'm referring to the line which says: d = function(a,b) 
yeah just made that up prob poor choice
If you are making an A1 poster then you should make every effort to save your images in a vector format like eps. An eps file can then be touched up in illustrator. If you must use a raster format (for example, if your figure has transparency and the OpenGL renderer is required) then save it as a png, not a jpg (jpg will blur the fonts). Also set the resolution to 300dpi or higher, check the documentation how to do this (one way is to use the print() function)
Are you doing some computing on it, or just trying to find a program that will draw it for you. If it's just rendering, there are *lots* of programs out there for graph-drawing.
What makes you think that would work? Think the implicit algorithm through thoroughly. 
anything specific that you recommend?
Solve needs to be told which variable you're solving for IIRC. From [this link, mathworks](http://www.mathworks.co.uk/help/symbolic/solve.html) "Y = solve(eqns,vars,Name,Value)" is the required syntax. Name and Value can be ignored here. Your command is missing the vars input. It should work like this - [sol_x sol_z] = solve('sqrt((xbase-x)^2 + (zbase-z)^2) = lcrank', 'sqrt((xplat-x)^2 + (zplat-z)^2) = lleg',x,z); That should mean sol_x and sol_y are the values you're looking for.
Thanks, but even when I put those in I still get an answer with parameters as strings rather than numbers.
 A = 2; B = 2:10; C = B-A; Edit: mental lapse
Thank you 
No, it is not important. It is wrong. There is no .- operator nor is there a .+ operator.
You want element-wise multiplication. This is done with .* You are using matrix multiplication (just * by itself). Additionally, in the future being each line of your code with four spaces and Reddit will format it properly. As posted it gets mangled by the Reddit parser and interprets all your * as meaning italics. You can download Reddit Enhancement Suite to make this easier.
a=2; b=2:10 for i=1:length(b) c(i)=b(i)-a; end
There is no reason to use a for loop here.
Ok thanks that worked and I will make sure to do that. I have also have a problem in the figure graphed which shows y=2x^3 to be shifted over 0.5 units to left for some reason, would you happen to know what is causing this? Heres a picture of it http://imgur.com/5vJmwiL
thank you
The code you posted defines x1, then uses x for the computation. Might want to start with fixing that ;) Seems like you defined an x beforehand from [-1,0] Next bit of advice, clearing your workspace/figures/command window is a good habit to get into to avoid issues like that one.
Well here is my code, I re derived the value on y+1 according to the implicit method I was taught. I cannot see what's wrong and I'm really stuck. I would really appreciate you help. %% 2.1 Implicit % Euler's method clear all dt = 0.00001; % set up the dt % initial time is 0 and final time is 1 seconds tinitial = 0; tfinal = 5; % We caculate the number of steps in time N = (tfinal - tinitial)/dt + 1; % We run the script for 5 second with a time step dt % we initialise the the variable y as a vector y(1:N) = 0; exact(1:N) = 0; t(1:N) = 0; % The initial condition is y(0) = 1 (In matlbab y(0) is y(1)) y(1) = 1; t(1) = tinitial; % We initialize time for n = 1:N-1 t(n+1) = t(n) + dt; % we step through time y(n+1) = ( ( (-2)*(t(n+1))*(y(n+1))*dt ) / ( ((t(n+1))^2) + 1) ) + y(n) ; % Euler Implicit end for n = 1:N exact(n) = 1/(1+(t(n))^2); end % Plot the Implicit hold on figure('Color',[1 1 1]) ; plot(t,y,t,exact,'--') ; axis equal ; title ({'Implicit Euler Approximation Method v Exact solution for (t^2 + 1)* dy/dt + 2*t*y = 0'}) ; grid on ; xlabel({'t'}) ; ylabel({'y'}) ; legend ('Implicit Method Approximation', 'Exact') ; hold off 
Thanks for the help so much. There was a predefined x but changing it fixed everything, will clear everything in the future :).
Please repost this with proper formatting. Either use RES to mark it all as code, manually add four spaces before each line of your code (plus four additional per indentation), or put it somewhere that will preserve formatting (Gist or PasteBin).
There is the switch statement. You could try something like, n = 6; switch logical(true) case n&gt;6, %do soemthing; case n&gt;4, %do soemthing else; case n&gt;2, %do soemthing else; case n&gt;0: %do soemthing else; otherwise disp(‘invalid’); end; It will cascade through the switch cases in order until the correct one is found. It depends on the application as to whether this will process as quickly as if/else, but in my experience I have not seen it matter much at all. YMMV.
(Edit) The thermal diffusion line should read: kappa = lamda/rho/Cp; % Diffusivity of rocks (m2.s-1) or kappa = lamda/(rho*Cp); % Diffusivity of rocks (m2.s-1) Notes: 1) Why does the Tnow calculation use "58.6 * 8 * 3600". Aren't there 24 hours in a day, not 8? 2) 10 mercury days is 1.52e8 seconds, not 1058. ============== Here's the formatted code as I understand it. %% 3.3 clear all D = 50 ; % Define depth in meters Nodes = [0:0.1:D] ;% a matrix containing the depth of each node N = length (Nodes); Temperatures = [linspace(122,140,N)]; % 3.2 Part 2+3 % DEPENDING ON THE MESH SIZE AND THE SIZE OF THE DOMAIN (Petroleum Well) L = 50; % Depth of the well in meters dz = 0.1; % Size of the mesh in the wall in meteres N = L/dz + 1; % Number of nodes in the well % DEFINING THE PHYSICAL PROPERTIES OF THE ROCKS lamda = 1.8; % Thermal conductivity of the rocks Cp = 840; % Specified heat of rocks rho = 3000; % Density of the rocks (Kg.m-3) kappa = lamda/rho*Cp; % Diffusivity of rocks (m2.s-1) % WE INITIALIZE TIME VARIABLES AND TEMPERATURE time = 0; % We define the initial time Tnow(1:N) = Temperatures ; % We define temperature Tnext (1:N) = 0 ; % We define temperature % WE NEED TO DEFINE A TIME STEP % It is critical to the stability of the calculations. If the time step is % too large the calculations are unstable. Stable time step using CFL % condition. dt = 0.5*(dz^2/kappa); % WE DEFINE THE BOUNDARY CONDITIONS Tnow(1) = 122; % Temperature at the top of the well (in deg C) Tnow(N) = 140; % Temperature at the bottom of the well % Loop over time and space while time &lt; 1058.6246060 % 10 Mercury Days Tnow(1) = 305 * sin((1 / (58.6 * 8 * 3600)) * time * 2 * pi) + 122; % T varying with daytime for n=2:N-1 %2:N-1?? Tnext(n) = Tnow(n)+kappa*dt*(Tnow(n+1) - 2*Tnow(n) + Tnow(n-1))/(dz^2); end Tnow(2:N-1) =Tnext(2:N-1); %The new temp becomes the present temp for the next time step %We plot the temperature plot(Tnow,'r') axis([1,N,-183,427]) xlabel ('Node Number (0 = surface, 501 = 50m below surface)') ylabel ('Temperature (Celcius)') title ('Temperature Varying in top 50m of Mercury over 1,000,000 years') % Create time textbox drawnow %pause(0.01) time = time +dt end 
It would depend on the "something" you're doing. If it's a straightforward functional operation directly related to n, then you could likely use logical indexing.
This is pretty badass. For further reading, there's a whole section on coding flights in MatLab from *Orbital Mechanics for Engineering Students* by Curtis.
Thank you, that is a really good read for orbital mechanics.
No there is not, wow... than you! Fixed.
From what I can tell this is similar to what we have to do in my first year physics course.
Also looking for this, I'm running a 12.5" 1080p display.
Fun with bsxfun() and anonymous functions. s = @(a, b) sqrt(a+b); z = bsxfun(s, x.^2, y.^2); About halfway between the two previously posted: 0.07 and 0.011 again for 1k and 3k points.
I know, I'm just prodding you. All in good fun I promise! It is hard to randomly come up with bad code for us to poke at, and until someone posts a legit problem we are kind of stuck floundering about. I will admit distance finding was not quite the initial bar I was expecting! Kudos for taking initiative on this one and trying to make the sub a better place. Hopefully it brings some variety and spice to the place rather than the endless deluge of "read my 162 lines of code and figure out why it is broken plz k thx bai" posts.
Anonymous functions seem to take a bit of overhead in Matlab as compared to m-file functions. 
Thanks, but I'm not building GUIs so this isn't what I'm looking for.
I'm interested in hearing why you would want self-linked nodes in your graph? What physical significance does this have? Self-linked nodes are usually ignored because they aren't typically necessary.
Yeah, I'm not a Perl guy but I've essentially just started doing the same thing in excel. Though I know there has to be a way to do it in MATLAB so I want to know for the sake of knowledge if anyone does have a built-in or MATLAB based solution.
I actually do have some code (2 functions) which I'd like to optimise but I'm quite inexperienced so hopefully other people here can learn from my mistakes while I learn as well! I'll post the second function in another comment so people can discuss them separately. I suspect there's a lot of room for improvement with both functions... function [ vortices ] = algorithm1( wavefunction) % Returns the position and charge of vortices found in a 2D wavefunction. % Uses Plaquette algorithm (1) to detect vortices in a wavefuntion. % The format of the result is rows of: % [vortex charge, x-position, y-position] for each vortex. % Note that the position given is the top left point of the square of % four points that bounds the vortex. [x_size, y_size] = size(wavefunction); centre_x = x_size/2; centre_y = y_size/2; vortices_found = 0; vortices = []; for x = 2:(x_size) for y = 1:(y_size-1) charge = 0; % Save the arg of each point in an anticlockwise direction. arg(1) = angle(wavefunction(x, y)); arg(5) = arg(1); arg(2) = angle(wavefunction(x-1, y)); arg(3) = angle(wavefunction(x-1, y+1)); arg(4) = angle(wavefunction(x, y+1)); % Counts the jumps needed to 'phase unwrap'. for ind = 1:4 if arg(ind+1) - arg(ind) &lt;= -pi charge = charge+1; elseif arg(ind+1) - arg(ind) &gt;= pi charge = charge-1; end end % Saves the info in an array if there is a vortex detected if charge ~= 0 vortices_found = vortices_found+1; vortices(vortices_found, 1) = charge; vortices(vortices_found, 2) = y; vortices(vortices_found, 3) = x; end end end end 
Here's the second function I mentioned in my other post. It needs a bit of tweaking in the last few lines to get it to do what it's actually meant to (missing a negative sign I think or something like that) but I'm more interested in any tricks and tips you have to make the code run faster. Something I probably should have mentioned is this code usually runs with a wave-function passed as a 512 by 512 grid of complex numbers. h has to do with the grid resolution but h=1 or anything in that order would work fine. function [ vortices_found, vort_info ] = algorithm2( wavefunction , h) % Returns the position and charge of vortices found in a 2D wavefunction. % Uses algorithm (2) to detect vortices in a wavefuntion. % The format of the result is number of vortices then rows of: % {vortex charge, x-position, y-position} for each vortex. % % Note that the position given is the top left point of the square of % % four points that bounds the vortex. [x_size, y_size] = size(wavefunction); centre_x = x_size/2; centre_y = y_size/2; vortices_found = 0; vortices = []; arg = angle(wavefunction); % Note that dimensions are swapped in Matlab. argx = unwrap(arg, [], 1); vx = diff(argx, 1, 2)./h; argy = unwrap(arg, [], 2); vy = diff(argy, 1, 1)./h; omega = (diff(vy, 1, 2) - diff(vx, 1, 1))./h; [Y, X] = find(abs(omega) &gt; 1); vortices_found = length(X); charges = sum(sign(omega(Y, X))); vort_info = [charges(:), X, Y+1]; end 
WELL! That certainly isn't what it looked like when I downloaded it, but that definitely worked! Thanks so much :) 
thanks so much!
fs=44100; output_signal=audioread('the_name_of_your_song.mp3'); sound(output_signal,fs)
There is a way to read files in matlab, you need fopen, fscanf, and fclose. It is a lot easier if you know the format, however, and there are built in functions that do all the fscanf stuff for you if the format is something like .csv
To make "times" vector, use linspace() function. You can look at the MATLAB documentation. Cell2mat() is needed if you use cell mode for your variables, otherwise you can just use matrix array. Arrayfun() is for applying function to each vector component, which I think better use "for" for iteration of each "times" element. Solvesys() is just your custom MATLAB function which contains your evolve(), linspace(), and etc, so you only need to input matrices, initial condition, and time vector. Good luck with your MATLAB. :)
I did end up using dlmread to read in the .txt file, but only after I had manipulated it excel (as mentioned in response to \u\sumwolf). The idea of pulling in each value with a loop did occur to me, but at the point I assumed I could just pull in all the data and re-work the matrix. Thanks for your comments and suggestions!
It seems like the f-series functions for file read-in are pretty generic and I will explore their use in the future. Thanks for the suggestion!
I would suggest using wavplay() instead of sound(). wavplay is interruptable and doesn't block execution. I also believe there's an audioplayer() class which is really useful... doc audioplayer load handel audioObj = audioplayer (y, Fs) play (audioObj); methods(audioObj) disp (audioObj)
After going through the code its not really the same at all. We're doing grav assists
I'm rather new to MATLAB, but I feel that nested loops should be my friend here. http://pastebin.com/eYZvXfeN
Im using the graph as a way to simulate an environment with nodes representing objects that each have some positive probability of reaching each of the other nodes including themselves, this is so that as in real environments, the probability of encountering two similiar objects in an environment in succession (such as one tree after another) is not nullified because you have just encountered a tree...
I have a pretty interesting vectorization problem that I can't figure out. I have a NxMxP array `H`, and I would like to compute the mean of `H` across the first dimension. That is, I would like to get `Hmean = squeeze(mean(H,1))` which is a MxP matrix. All right, that's easy. However, the problem is that H is sprinkled with a small amount of NaNs. I want to ignore the NaNs when taking the mean. Unfortunately the NaNs aren't nicely gathered up on a row or anything like that, they are all around the place. I could use a for loop: for j=1:N for k=1:P Hmean(j,k) = mean(H(~isnan(H(:,j,k)), j, k)); end end However, that is obviously not a great solution. A decent approximation is just hacking H(isnan(H))=0; which works because the NaN elements in H are uncommon. but I'd love to see a nicer alternative. 
For what it's worth, when I run the above code, I get the variable R_i with 50x1 nonzero elements—though their magnitudes drop off very sharply after the 12th element (down to -1.9960e-319 by time step 50). Since the evolution of R_i depends on the elements of the matrices d and v, my best guess would be to look at how the elements of d and v are generated (note that those elements also get really tiny at row 12).
Thanks for your input! Though I can't seem to get arrayfun to work. I just get "Not enough input arguments." so I guess something must be wrong with my function. Deadline is 12am today, so I guess that's that, but thanks anyway! 
Also the MATLAB debugger is very good at stepping through a difficult program. It's well worth the slight learning curve to be able to use it effectively. 
Excellent reply, as this is a great solution for temperature data (fire temperature data so everything is 900+ Kelvin). Thanks mate!
Use nanmean() 
Yeaaahhhhh.... you're going to have to narrow it down from that 643 line wall of death if you want to get any meaningful advice. Nobody is going to touch that :x
The issue is that by definition, static methods do not require an instance of the object. In your definition of the static method "yay", you are attempting to call "foo", which is a private instance method of the class. Foo can only be invoked using an instance of the class, which you do not have access to in the context of yay. The issue in this code is not having multiple method blocks, the issue is that yay cannot be defined as a static method. obj.foo(); or foo(obj); Also, foo is misdefined in your class. Since foo is an instance method, it must accept a first input argument which is the instance of the class: methods(Access = private) function foo(obj); disp('hi') end end The final is a valid class definition of what it appears you are trying to do: classdef testcode % Yay methods function obj = testcode() yay(obj); end function yay(obj) disp('yay') obj.foo(); end end methods(Access = private) function foo(obj) disp('hi') end end end
Well, that was simple. And looking through the `nanmean` code, I should have thought of that. 
Cram them into one function and abuse logical indexing: fplot(@(x) [x(x&lt;=1).^2 x(x&gt;1).^3], [0 2]) fplot() over your full interval [0, 2]. Anything in [0, 1] gets squared, anything in (1, 2] gets cubed, the results are concatenated together and returned. Not sure if this counts as being more 'elegant' as it is really just a case of trading one workaround for another.
I want to point out that this is not considered equally good coding practice as compared to if-elseif-else statements. That `true` part is basically a hack. 
Here's a way I thought was clever. for a=1:n for b=1:n z = a+b*i; c = abs(z); end end Elapsed time is 0.281184 seconds
I'm doing all my updates here: https://gist.github.com/jedediahfrey/93477cddbd28dd5629b8 One question. What does this do? time1-fix(time1/2)*2 As in what do you want it to do?
You wouldn't take a car to the shop, tell them to make it better, then just disappear leaving the poor mechanic to go over the entire damned thing to figure out what is wrong and what needs to be fixed. Especially if that mechanic is offering to work for free. I don't think it is unreasonable to expect even 3 minutes of effort on the part of those posting here to explain what in the hell they are trying to do, where things are going poorly, and where they would like our attention focused. Dumping a giant ball of code down and disappearing is not going to garner a lot of sympathy. Really and truly, ESR's [How to ask smart questions](http://www.catb.org/esr/faqs/smart-questions.html) should be mandatory reading. Maybe not in it's entirety because that thing is LONG, but a cursory skim through would probably alleviate 95% of the terrible posts that plague this sub.
http://www.mathworks.com/matlabcentral/fileexchange/11462-npermutek
I'm off to a neurolab. I should be back to my comp in a couple hours. 
https://gist.github.com/jedediahfrey/93477cddbd28dd5629b8/1c0d54be78104272e3261d0e1d5f02c0c1ee265a#file-peruvian_lumberjack-m Try that. It's much shorter (it doesn't work yet) but should give you an idea of what direction it is going.
[The subplot documentation page](http://www.mathworks.com/help/matlab/ref/subplot.html) should get you started. ImageAnalyst gives a good run down of the basics on [MATLAB Central](http://www.mathworks.com/matlabcentral/answers/50003-what-is-subplot-and-how-to-use-it).
That works wonderfully. Thank you so much! I had tried using setappdata before without my desired result.
ITT: Do OP's homework for him.
subplot( ... 'replace') Hunh - did not know you could do this. Learn something new every day!
I can't ask a question?
You've shown none of what you've done already, you aren't asking "what is wrong with this code?". You're asking "Hey internet, i'm too lazy to do my homework, will you do it?"
Wow nice, this is a different approach. Looks like some kind of functional programming syntaxes, hahaha.
Oh wow. While the other replies were creative and interesting, this one-liner did the trick! Thanks!
It is the same as /u/riboch's second suggestion, but crammed into a single line and put inside your fplot() call. The actual concept I used is an anonymous function. Plenty of info in the documentation and Google about what they are and how to abuse them. /u/Pugnare's suggestion is best though, fixes the problem at the source rather than hacking around it. Much better for future proofing with more complicated situations.
That is why I said Title is my question. The rest is just so that whomever wanted to help, could see the whole hw question. I just wanted to see how to plot a rise only portion of a graph. For you to complete this hw question you need data I have and not provided. How the hell would I expect you to label, give the right units, create a legend, and interpret the data without giving you the data. 
The question isn't about what is wrong. It is about how to create a rise of a graph only. Hence me saying "title is my question". The rest is for the answerer to see more to my question. Also there is no way you can answer this hw question without the data I am using, which I didn't provide. You either misunderstood, didn't read fully, or are just trying to argue for fun. 
I just want to know how to plot a rise of a graph only. There isn't a consistent slope formula. My graph has three rises and drops. The minimum is around 0 y. I am using 7828 rows of data. 3 columns. Depth, Temperature, Salinity. I have already calculated time. Now that has been said and you have a grasp of what I am dealing with, based on the question and this. What kind of code do I input to create a separate graph showing only the rises of a larger graph. For example, say there is a Sine graph with a period of 2 pi. What would I code to show only from lets say 0 to pi/2. Now would I replace the function with a min and max set of data points?
You could loop through the data set and use a series of logicals (if statements or something similar) to detect rise and fall. When you detect a rise, you could save that location in the data and in a sub-loop step forward until the rise falls. Then save that dataset into another variable. 
Good coding practices leave the code compact, functional, and clear. Although this code snippet functions implicitly through the ordering, it isn't unclear in its operation. Sure, being explicit may be the best practice, but that does not necessarily yield compact code. Also, the function usage fits the syntax definition for MATLAB. According to [the MATLAB documentation for switch](http://www.mathworks.com/help/matlab/ref/switch.html), switch *switch_expression* case *case_expression* *statements* case *case_expression* *statements* ... otherwise *statements* end This differs from the C syntax, according to [the MSDN entry](http://msdn.microsoft.com/en-us/library/66k51h7a.aspx), where the case expressions are denoted to be constants. switch ( *expression* ) { *declarations* case *constant-expression* : *statements executed if the expression equals the value of this constant-expression* break; default : *statements executed if expression does not equal any case constant-expression* } In short, it's valid code for MATLAB, although it may not be in C (or other languages).
How many individual strings do you have, e.g., 'True Negative' and 'True Positive' being 2 total?
'True Negative' 'Hit' 'False Positive' and 'Miss'
An inline function solution: convertFun = @(stringIn) find(strcmp(stringIn, {'True Negative', 'Hit', 'False Positive', 'Miss'})); Then convertFun('Hit') would return ans = 2
I know it's valid code. But I disagree that it's clear. A if-else statement would be clearer and doesn't rely on non-obvious functionality. If you're using switch statements in a different way than other programmling languages it may be confusing. 
[Here](https://gist.github.com/gehrhorn/133369cf2734acb6404b) is my solution to the Cody problem [Goldbach Conjecture #2](http://www.mathworks.com/matlabcentral/cody/problems/64-the-goldbach-conjecture-part-2). function c = goldbach2(n) y = primes(n); ii = 1; c = 0; while y(ii) &lt;= n / 2 % iterate through primes that are &lt;= (1/2) n if any(y == (n - y(ii))) % if n - y(ii) matches any other y (including itself), match c = c + 1; % counter end ii = ii + 1; end end My 'solution size' is 57, leading ones are around 11. I'm not particularly interested in 'winning', but I have to believe that I'm missing something here.
How would you go about doing it on paper?
OP - I took a closer look, and I think I know your issue. You originally define k = (E*A/Le) as a constant, but then you start using k as a loop index, and k gets redefined each time mod(i,10)==0. What you have, more of less, is the following: for i = 2:Nt+1 %do some stuff for j = 1:Nx f1=k*(d(j,i+1)-d(j+1,i+1)); %and do other stuff end if mod(i,10)==0 for k = 1:1:Nx+1 %do stuff again end end end Now, your code loops through the i-index on the outside, and performs each j-index and k-index loops in their entirety before incrementing the i-index again. This isn't a problem when i &lt; 10, as mod(i,10) never equals 0 and so the k-index loop is never performed. But once you get to 10, the k-loop is performed, and your constant value of k that you originally defined, k=E*A/Le gets overwritten and is now k=Nx+1. The bottom line is you need to be more careful with your variable naming. If it is practice to use the stiffness of an element as the letter k, then perhaps use your indexing as ii, jj, kk, ... Or maybe you use kstif, k_stif, or some other name for the stiffness constant.
Ya, as soon as you said you changed to its explicit definition I immediately looked for where you were assigning/reassigning k. Be careful w var names :)
Over there -----&gt; &gt;MATLAB code tricks, discussion, and questions; **but we don't do your homework!** Please do not ask us to help you pirate anything.
Im not asking you to do my homework, I want to know if im going wrong
If you have the latest version of Matlab, they added a categorical data type that does exactly this. Try `help categorical`.
Well post your code and someone might take a look.
I feel stupid for not realizing this but am extremely grateful for your response. I still want to go back and look at some uses of classperf in some of the online tutorials and webinars to see how they are dealing with the zero and ones in a dichotomous outcome. I really don't think it is normally specified. As for my variable names for this example, it isn't what I normally use (typically y_test and y_predict), but thank you for that advice. 
http://www.mathworks.com/help/matlab/ref/scatter.html http://www.mathworks.com/help/matlab/ref/legend.html
[X,Y] = meshgrid(linspace(-1,1)); Z = cos(X.*Y); surf(X,Y,Z) First line creates a grid from -1 to 1. Second line calculates z, and third line plots it.
&gt;MATLAB code tricks, discussion, and questions; but we don't do your homework! 
TPB. And get the exact same version that you're working for at school. You can try Octave but with more Matlab specific stuff (like USB analog DAQ) it likely won't work. IF this is for work tell your boss that you don't have access to the tools you need (Matlab) and ignore everything above.
You need the following: 1. A function which generates frequency pairs 2. Next, iterate over each pair inside a for loop and call a function that generates sinusoid tones of a given time duration at those frequencies. 3. Present both sounds to the user using audioplayer/wavplayer/sound etc. 4. Take input from the user using either input() etc 5. Use the user input and do whatever you want to 6. Repeat from step 2 for the next frequency pair. What do you have till now? We can help you from where you're stuck.
If you cannot get a copy of the version you need, you could consider 'remote access' software such as [TeamViewer](http://www.teamviewer.com/en/index.aspx) which would let you log in and use the computer remotely. I use this software all the time and if you have a good internet connection at both ends the lag is so low it's almost unnoticeable.
I'm reading this as x1 and x2 as two separate variables. Check your syntax.
Again, I wanted to say thank you, and that I really did miss that the confusionmat documentation says exactly what you wrote, and there is an order output variable which clearly shows the order used. Thanks for the help.
im not sure im understanding you correctly. I have tried to isolate each element within brackets, but still no luck: function xp=F(t,x) xp=zeros(2,1); xp(1)=(x)*(2); xp(2)=-(100)*(x)*(1)-(1.5)*(x)*(2); end 
Your error has nothing to do with the function and everything to do with how it is called. While the function is important, until you show us how you are using it we cannot help.
Have you tried the m-file editor? I believe it does syntax highlighting. If it doesn't any C++ editor should work but would have no integration with Matlab.
It's not even hand holding. Things like getting an error that says "this won't compile", but doesn't tell me what's wrong. It's very frustrating. 
What compiler are you using? If your MEX file won't compile, the error you get should be from your compiler. Anyway, you can use any IDE you want if you have a preference for C++ development. Just make sure to add any MATLAB-specific headers to your project or compiler search path so you can actually use lint/autocomplete capabilities on `mxArray`s and such.
What does your code look like when you call ode45? Have you read the documentation? doc ode45 It has examples which are very similar to yours. Copy the code and go from there.
I have the regular llvm compiler that you get with xcode command line tools.
Glad to be of assistance!
Thanks!! This is what I have so far USERID = input('Enter UserID: ','s'); sr = 44100; % the sample rate in Hz f=1000; % the tone's frequency (in Hz) d=1; % the tone's duration t=linspace(0,d,sr*d); % a time vector tone = sin(2*pi*f*t);% the actual, final tone sound(tone,sr); pause(1) sr = 44100; % the sample rate in Hz f=2048; % the tone's frequency (in Hz) d=1; % the tone's duration t=linspace(0,d,sr*d); % a time vector tone = sin(2*pi*f*t);% the actual, final tone sound(tone,sr); I'm really new to programming so I just took this as a sample from a book...it doesn't really explain how functions work very well. I need to use the rand function at some point? I also have no idea about how to input the number of trials. In my book it says something about "randomly put n/2 signals and n/2 noises to the n trials," but it doesn't say much about it...not sure what that means. 
1) can/have you solved it on paper, mentally how you would do it? 2) others will likely say the same: we don't do HW here. we can help debug/solve specific coding problems/questions. give your HW a try, post some code, and we can all try and go from there..
&gt;I'm not sure if I'm having syntax errors thanks to alpha or messing something else up Well, we aren't either if there's no code to look at.
for your attempt on z1: x and y have to matrices. try the following: x = ndgrid( -5:.2:5 ); y = ndgrid( -5:.2:5 ).'; a = 5; z = atan( x.^a ./ y.^a ) .* atan( y.^a ./ x.^a ); surf( x, y, z); done. otherwise, you really have to write the function a little differently. best to just write it as code. is [this](http://www.wolframalpha.com/input/?i=z+%3D+atan%28+x^a+%2F+y^a+%29+*+atan%28+y^a+%2F+x^a+%29%3B) your function?
You need to solve an elliptic PDE, are you supposed to use built in [tools](http://www.mathworks.com/help/pde/ug/elliptic-pdes-1.html) or are you to build you own?
So I talked to my adviser about it this. At some distance far up stream the stream function and potential will be equal. Thus, I can solve the equations simultaneously and then I will be able to find some function r = f(theta) and then convert back Cartesian coordinates and rearrange to find y = f(x). If I figure it out I'll post the solution just so anyone wondering can have some closure.
 SET That will print out all environmental variables. Compare the one Matlab puts out vs regular.
You can buy the student version for $99. Otherwise I would check with your university. It may be possible to open up a vnc and run a local copy using a campus network license. 
You could also compress the first 2 lines into, [x,y] = meshgrid(-5:0.2:5,-5:0.2:5)
You don't actually need to repeat the first argument, Matlab does it automatically. 
You will need to use a function called 'ode45.' Look it up on mathworks, or look up examples online. Ode45 is a built-in integration function so I'd say that'd be your best bet. Then you can plot the streamlines easily.
Did that already - the extra environment variable (this is Windoze) is just the Matlab version.
Yes, but that only gives me r and theta at the grid points. I need to know the (x,y) values along the actual streamlines. 
Ode45 handles differential equations. I don't see how that would help. Could you elaborate a bit please?
This doesn't work because it only works for points where Psi = Phi.
Maybe I misunderstood. Are you trying to print out the (x,y) coordinates for a specific streamline?
Have you looked at the [stream2](http://www.mathworks.com/help/matlab/ref/stream2.html), [stream3](http://www.mathworks.com/help/matlab/ref/stream3.html), [streamline](http://www.mathworks.com/help/matlab/ref/streamline.html), and [streamparticles](http://www.mathworks.com/help/matlab/ref/streamparticles.html) functions? I have not played around with them much, but it seems like they should be able to do what you want. You might also want to check out [this streamline example](http://www.mathworks.com/help/matlab/visualize/stream-line-plots-of-vector-data.html) and [this example on MATLAB file exchange](http://www.mathworks.com/matlabcentral/fileexchange/35248-matlab-plot-gallery-streamline/content/html/Streamline.html).
can you give a sample data and your model? it might make things much easier to trouble shoot. and no, if everything is right, fminsearch should work. (make sure you use absolute value of the difference)
Sure, here is the code I'm using, and thanks! x1=[0.0005, 1.55, 2.05,2.76,3.71,4.91,6.23,7.42,8.32,8.89,9.40]; k=50; data=[607.6089019, 611.4813705, 614.805191, 610.3376279, 611.4639531,615.3712565, 628.7449168, 645.1724279, 665.5972323, 671.6265556, 685.3833987]; x2=[0.026069448925933, 0.025944729366728, 0.025883611448991, 0.025811335313950, 0.025625652222997, 0.025235606496738, 0.024695432823664, 0.024085074866239, 0.023577242062154, 0.023222828999615, 0.022866366173841]; x0=0.02606945; data0=607.6; G=0.0018; S=-0.0036; beta=(1./x0).*(G./(G.^2+S.^2)); gamma=-S./(G.^2+S.^2); fun=@(x2,k1) norm(abs(data-(data0.*(x0./x2).^2.*((k.^2+k1.^2.*((beta.*x2).^2+gamma.^2))./(k.^2+k1.^2.*((beta.*x0).^2+gamma.^2)))))); k1=1; k1_min=fminsearch(@(x2) fun(x2,k1),k1); model_min=data0.*(x0./x2).^2.*((k.^2+k1_min.^2.*((beta.*x2).^2+gamma.^2))./(k.^2+k1_min.^2.*((beta.*x0).^2+gamma.^2)))); figure plot(x1,model_min)
Sorry I should have specified; x2 is also a function of x1. The data was measured for different values of x1. The model takes measured values of x2 at different values of x1, and uses that to predict the data at x1. 
seems like your model doesnt match the data well. k1 is a very weak parameter (I tested from 1E-2 to 1E8, and it doesnt seem to shift things very much. what is x2?
[Here is the comparison](http://imgur.com/qXzz5f8). The model is not terrible (general shape and in the ballpark of values). Looking at the difference in scale on the y-axis, the "optimized" data is significantly worse than the original predictions. x2 is a vector of experimentally obtained values as a function of x1.
http://www.mathworks.com/help/matlab/external-interfaces.html
Try this: x1=[0.0005, 1.55, 2.05,2.76,3.71,4.91,6.23,7.42,8.32,8.89,9.40]; k=50; data=[607.6089019, 611.4813705, 614.805191, 610.3376279, 611.4639531,615.3712565, 628.7449168, 645.1724279, 665.5972323, 671.6265556, 685.3833987]; x2=[0.026069448925933, 0.025944729366728, 0.025883611448991, 0.025811335313950, 0.025625652222997, 0.025235606496738, 0.024695432823664, 0.024085074866239, 0.023577242062154, 0.023222828999615, 0.022866366173841]; x0=0.02606945; data0=607.6; G=0.0018; S=-0.0036; beta=(1./x0).*(G./(G.^2+S.^2)); gamma=-S./(G.^2+S.^2); fun=@(k1) sum(abs(data-(data0.*(x0./x2).^2.*((k.^2+k1.^2.*((beta.*x2).^2+gamma.^2))./(k.^2+k1.^2.*((beta.*x0).^2+gamma.^2)))))); k1=1; [k1_min,fval]=fminsearch(fun,k1); model_min=data0.*(x0./x2).^2.*((k.^2+k1_min.^2.*((beta.*x2).^2+gamma.^2))./(k.^2+k1_min.^2.*((beta.*x0).^2+gamma.^2))); figure hold plot(x1,model_min) plot(x1,data)
shit, how do it do it so the carrot doesnt make things go to the power?
these are the lines that I changed fun=@(k1) sum(...); [k1_min,fval]=fminsearch(fun,k1);
Four spaces before the code (select the code in matlab, press tab and copy): x1=[0.0005, 1.55, 2.05,2.76,3.71,4.91,6.23,7.42,8.32,8.89,9.40]; k=50; data=[607.6089019, 611.4813705, 614.805191, 610.3376279, 611.4639531,615.3712565, 628.7449168, 645.1724279, 665.5972323, 671.6265556, 685.3833987]; x2=[0.026069448925933, 0.025944729366728, 0.025883611448991, 0.025811335313950, 0.025625652222997, 0.025235606496738, 0.024695432823664, 0.024085074866239, 0.023577242062154, 0.023222828999615, 0.022866366173841]; x0=0.02606945; data0=607.6; G=0.0018; S=-0.0036; beta=(1./x0).*(G./(G.^2+S.^2)); gamma=-S./(G.^2+S.^2); fun=@(k1) sum(abs(data-(data0.*(x0./x2).^2.*((k.^2+k1.^2.*((beta.*x2).^2+gamma.^2))./(k.^2+k1.^2.*((beta.*x0).^2+gamma.^2)))))); k1=1; [k1_min,fval]=fminsearch(fun,k1); model_min=data0.*(x0./x2).^2.*((k.^2+k1_min.^2.*((beta.*x2).^2+gamma.^2))./(k.^2+k1_min.^2.*((beta.*x0).^2+gamma.^2))); figure hold plot(x1,model_min) plot(x1,data)
Thanks!
It is caret not carrot :p 
tasty
Communicating over serial is pretty simple, I use it for talking to microcontrollers all the time. 
Maybe your school has VPN and you can use a remote desktop connection to access MATLAB? Worst case scenario, write your code at home using a code editor and them test them at school.
Do you have more on this? Doesn't have to be specific to MATLAB. I always have jumped straight to coding, but as I am starting to make more complex scripts, its not working so well since I have to like constantly redo stuff. Maybe a book you can recommend me or something? And isn't another word for this program logic or program flow?
MATLAB is dying. It has been pirated too many times and the company is going to die. Download Python. Get NumPy and you will never use MATLAB again. SerialPy is a great lib for connecting to serial devices e.g. USB to arduino.
Thanks! I spent ages on their website but couldn't find the write keywords to describe this.
What's that got to do with anything? I know how to use Matlab, I use it for everything at work.
[V,D] = eig(k,m); Where V are the eigenvectors in a matrix and D is a matrix of the eigenvalues in the diagonal. The relation between the eigenvalues and wn is wn = sqrt(lamda), so to get the values of wn: wn = sqrt(diag(D));
Mass normalize your stiffness matrix using cholesky decomposition L = chol(M); Kn = L'\K/L; Find roots of characteristic equation chareqn = poly(Kn); eigval = roots(chareqn); wn = sqrt(eigval); Use to find eigenvectors. Note, you could also just use the built-in eigensolver 'eig'. 
I've heard "program flow" used just in general reference to useing if, for, and while loops (and the like). Basically, it's the way you go back up and read a line of code again, or choose to read one line of code over another. Of course, your pseudo-code will include these kind of logic statements: if, for while, so it's relevant. I've never read a book or studied how to write pseudo-code. I come from scientific computing background, so for me, doing it on paper (or white board) first is a necessity and I just got a handle on it through practice. I think if you practice doing it, you'll pick it up relatively quick. It should be easier than coding; you use words that you're more familiar with rather than the syntax of any specific language. So it's never specific to a programming language in the first place. Pseudo-code is something that any human should be able to turn into any syntax for their preferred programming language.
I think it was how you called the function in fminsearch, I removed the x2 since it did not seem to belong there
I meant Harmonic Series not Fourier -_-
Just use a for loop to sum it: for n = 1:10 X = Acos(2*pi*f*n*t) + B + X; end You put the "+X" at the end to just keep a running sum going. That'll sum the first ten terms.
Yes. 
Procedural programming. I use subfunctions rather than objects and it's all about flow control. I try to generalize operations on data and make it into it's own function in the same m-file. It usually starts with a flow chart showing the processing the data goes through, then it becomes pseudo-code, or just straight to pseudo-code with experience.
Why are you limiting yourself to using array-based approach with OO code in MATLAB? That isn't a shortfall or limitation of the language, just a bad implementation. As for what 'approach' to use: the one that makes the most sense. There is no single answer to that question for any language. It all depends on the problem, the project, and the person. You may tend towards an OO solution because of your Java experience whereas I might go for a more imperative solution for the same problem (largely because MATLAB's OO boilerplate makes me want to punch things). Neither is necessarily wrong, although one may be better!
Loops are the devil in matlab? How so? Are they terribly inefficient?
Yes. Let's take a look at the looped version (fixed to actually function properly) compared to the cumsum() implementation (note they are simplified to just a cos() for expediency's sake) tic; x(1) = cos(2*pi); for n = 2:1000 x(n) = cos(2*pi*n) + x(n-1); end toc tic; y = cumsum(cos(2*pi*[1:1000])); toc Loop takes 0.002156 seconds, cumsum() takes 0.000914 seconds. Roughly 2.3 times longer to do it in a loop. Not the most groundbreaking time savings by any means, but bad habits are easy to develop and this is one that will bite you in the ass. Edit: Just for fairness, ran it with pre-allocation. Loop still takes 0.00207 seconds roughly 2.1 times as long.
Look into sscanf() or textscan(). Both are designed to do what you are trying to accomplish (and are functionally equivalent).
num = textscan(str,'%d','Delimiter',' ') num = [3x1 int32] There are 3 numbers in the string but my output seems to be wonky. Is my syntax correct? Edit: I see that num = num{1} works in this case. Thanks! 
Why? I use OOP all the time in MATLAB when writing applications. It's quite powerful. (PS, my first language was C and I never learned any other OOP language.)
You could write a teeny function that takes the parameters as arguments and then returns the mean squared error between the predictions (from the equation) and the data -- or some other error term. Then you could call it with fminsearch, to find the best fitting parameters. I don't personally know how fsolve works, but I think it has to be a common equation rather than an arbitrary one to use fsolve. Edit: That's way too complicated sorry. Check out the cfit toolbox (type cftool in the command window) and enter the equation.
Some people here are suggesting to use [V,D]=eig(k,m) for solving for the eigenvalues and eigenvectors, but if your matrix is sparse, I strongly suggest using the sparse type and using "eigs". It is MUCH faster. Eigs is a bit harder to use syntactically, so it really depends on the specific matrix. If you want, you can give me your matrix and I can take a look for you.
From this post, http://www.mathworks.com/matlabcentral/answers/44256-newbie-question-on-how-to-change-default-settings-for-feedforwardnet a. Forget about feedforwardnet (automatically called by fitnet and patternnet) b. Use fitnet for regression and curve fitting c. Use patternnet for pattern recognition and classification 
Why not just use a histogram?
a shame.
"watchoo doin'?" - "just tipping over some bits. you?"
Why are there issues with memory when N=200? You should be able to control the pool size (See *parpool*). I think your parfor at *ind2* probably just has too much overhead, just like if you put it at *ind3*, so it actually takes longer. It also depends on your parallel pool and just how long it takes to communicate with the workers. 
With N=200 my "vector" takes 5 GB (of singles) therefore when he splits it up I can see that it occupies the whole RAM (26 GB) and that it even starts swapping a lot and that, after the calculation is done, it takes a lot of time to put everything back toghether. I'm using matlabpool because I'm not on a distributed computing structure but on a single PC. I have 6 CPUs and I'm using 4 cores, to try to minimize memory issues. Still, I'd guess that using parfor on ind2 should not result in that much overhead, since ind2 is bigger than ind1. I mean... 500*50 interpolations do not seem so few operations to me. Are there rule of thumbs to quantify overhead vs calculation time, to decide what is better to do?
We have a problem like this we give to our introductory grad students. In their case they're given data points and have to find the underlying function. Typically they solve the problem with SVD to solve the general equation Ax = b. In this case A is a matrix of values generated for a set of basis functions (1, x, x^2, x^3, cos(x), etc) over the range of x they're given, x are the mixing coefficients you're solving for, and b are the values you're given. Since you know the structure of the equation you should be able to generate that A matrix pretty easily. I'm not sure how the complex structure of the curve will affect the answer, but I'd be curious to hear what you use to get your final result. 
It's difficult as overhead is different for different pools. If you have to traverse network, then the overhead is very large and your jobs probably need to be few and large. This was also difficult to diagnose as it wasn't clear you were using such a large dataset. Sure, *ind2* seems not so small, but if it really has to be pushing around 5GB of information, then your overhead is very very large. I don't know if there are any easily communicated rules of thumb, but just start estimating. How long does it seem to take matlab to push 5GB to and from a different worker? Ok, if that is 30 seconds, if your job takes 30 seconds, then each job takes 2x as long as it does if you don't push it out to a pool. So at two worker nodes, you will **not** see a speed increase. But with 4 nodes, you might see a speed increase (if you don't start swapping and running into other limitations). See where I'm going with this? It isn't easy, and you are in tough territory because you are pushing around a lot of data. It is easier to learn the basics of this stuff if you are doing a more CPU-bound problem. Then parallelization works more like you might think it should as the job overhead is usually very low. 
I'm happy for you, but just because you own a hammer does not mean every problem is a nail. I never said OO MATLAB was not powerful or useful, I said it was rage inducing to use. There is also the fact that most of my work centers around a central piece of data that is acted upon. There is nothing to gain by wrapping it all in OO concepts and abstracting away all kinds of behavior and access. That just adds needless levels of cruft for no tangible benefit. I cannot speak towards performance benefits/losses that /u/in_fact_no_one_does brings up, but I can wholeheartedly vouch for the development trade offs not being worth it at all (again, for my work).
Nailed it (except that bit about OO MATLAB being beautiful, we have to part ways on that one!). Again falling back on the hammer analogy: just because a tool is awesome, does not mean it is well suited for every task. Small handful of data passing through the same system constantly? Not really any reason to throw objects around there. Dozens of sets of data flying around each with it's own special snowflake behavior? Yeah, go ahead and get down and dirty with OO abstractions for that one.
Excel?
You might want to check your path and make sure that the command line and Matlab are using the same version of Virtualdub. Also, take a look at your batch file and make sure it contains what you think it should. You might also consider running the batch file from the command line outside of the Matlab environment. See if any of that fixes it and it should narrow down the source of the problem.
I've managed to accomplish something by dividing my huge vector in 10 smaller vectors (in a way that makes sense for my data). Before I called my function (that does the loop I've reported) once with a 5 GB vector and then I did the incriminated parfor. Now I call the function 10 times each with a 500 MB vector and there are no problems, since it doesn't need to swap anything, and I gain considerable speed. Nonetheless, I'd like to understand better how to handle data and functions when optimization is really an issue. Trying and guessing doesn't seem a very good idea. I always have lots of doubts about this and I cannot find sources on the topic. I have an idea about what overhead is but it's pretty vague what actually happens. Also, how many processors should I use? The maximum? max -1? Some smaller number?
Young Child: But master, how do you know what to do in such a situation? Old Master: By having wisdom, young one. Young Child: How did you get such wisdom? Old Master: Through experience young one. Young Child: But from where did you get so much experience? Old Master: By being unwise. 
I make everything recursive and design it such that it only works on 1 dataset.
lsqcurvefit() is probably your best bet. It takes an anonymous function (your 6th order polynomial), an initial guess, and your x and y data, and determines equation parameters that minimize squared error based on experimental data. Implementation will look something like this: function = @(a,b,c,d,e,f,g) a+b.*x+c.*x.^2+d.*x.^3 +e.*x.^4+f.*x.^5+g.*x.^6 ; fit_values = lsqcurvefit(function, initial_guess, xdata, ydata); "fit_values" is an array with values that minimizes squared error for all your variables in the order they are input to the anonymous function (i.e. [a b c d e f g]). "function" is your previously defined anonymous function, which in this case is your 6th degree polynomial with inputs a,b,c,d,e,f,g. If you are having trouble creating an anonymous function, see documentation [here](http://www.mathworks.com/help/matlab/matlab_prog/anonymous-functions.html) "initial_guess" should be your best estimate of what your variables should be in an array (i.e. [a0 b0 c0 d0 e0 f0 g0]). This guess does not have to be very close, but the closer you are, the fewer iterations it will take for MATLAB to compute their values. xdata and ydata are your raw x and y data. Depending on how close your initial guess is, and how good your data is, you may need to adjust the maximum number of iterations lsqcurvefit will allow (the default is 100* the number of variables) or function tolerance (how small error needs to be before the parameter values have been "solved," default value is 1e-6). Hopefully this will not be necessary if you are new to MATLAB, but it is not too hard to do by following the function documentation [here](http://www.mathworks.com/help/optim/ug/lsqcurvefit.html). 
found [this](http://www.mathworks.com/help/symbolic/mupad_ref/plot-piechart3d.html), but am not entirely sure how to implement it, as I am unfamiliar with mupad. 
Use textscan() or dlmread() to properly read it in. Throw away/ignore whatever you don't want. 
OK thanks I'll give that a go
If your data are always evenly spaced you could try something like: sum( data ) / ( npts * delta ) quick and easy for integration from start to end of your data, and a point to start with..
Thank you, should work for the time being.
They give you a matrix, A, containing 0's and 1's. They tell you you can perform logical operations on it to change the elements you desire. The 4 logical operations used in the table are AND (also written &amp;), OR (also written |), XOR, and NOT(also written ~). In the table they show you how these operators work. Let's look at the first line, it is read as follows: "If A has the value 0, and B has also the value 0, then A OR B will result 0, A AND B will result 0, A XOR B will result 0, and NOT A will result 1." That tells you what each operator will do to the initial elements that are 0 if you combine them with another 0. The following lines explain all other possibilities. Now your task is to choose a combination of operation and matrices that will transform the given one as required. It's like a puzzle. See their example using the AND operator and a matrix M with 0's in the positions of A they want to turn into 0 (turn off they say) and 1 in the positions of A they want to leave unchanged, either as 1 or 0. 
I'm confused by the table right above the questions, it says to turn off bits, you're supposed to AND with 1's? That can't be right, if you wanted to turn off bits you should AND with 0's right? Because X AND 0 is always false, thus turning off the bit. And to turn on the bits, you should OR with 1 right? Because X OR 1 is always true, thus turning on the bits. Am I missing something?
It is confusing, yes. They mean to turn off bits you use AND with 1's in the bits you want to leave unchanged, 0's in the bits you want to turn off. They did it properly in the example right above.
You may select all columns except the first 3 using (:, 4:13).
http://www.mathworks.es/es/help/symbolic/solve.html#btrxscd-1
Well, I'm trying to protect this with a spoiler tag... anyway, here it is: &gt;&gt; syms T1 T2 T3 mg &gt;&gt; S = solve(T1/35^.5 - 3*T2/34^.5 + T3/42^.5 == 0, ... 3*T1/35^.5 - 4*T3/42^.5 ==0, ... 5*T1/35^.5 +5*T2/34^.5 + 5*T3/42^.5 - mg ==0, ... T1, T2, T3); &gt;&gt; S.T1, S.T2, S.T3
Thank you, I wasn't taught to use sym but this is way easier.
I've pushed myself to using their online website. It has examples and I've had the help page crash MATLAB once and a while (On my Laptop)
I have R2013a, and my help menu looks exactly like that also. I was thinking of updating to the R2014 version to see if it made it any better . .
If you have R2013a or earlier it might be due to this bug: http://www.mathworks.com/support/bugreports/989850 Otherwise you can try changing the browser. com.mathworks.mlwidgets.html.HtmlComponentFactory.setBrowserProperty('JxBrowser.BrowserType','Mozilla15'); will change it to Firefox. Or you can upgrade to R2014a and try chromium.
This sounds good, I will try it out. Thank you!
i found that this problem on my machine was the version of IE installed. only IE9 worked, the other versions blocked all javascript and makes the ugly page.
I know they're definitely using the same virtualdub - I added it to the path myself! (since virtualdub doesn't really "install", it just unzips itself). There is no batch file - just a virtualdub script file that I write out, and that definitely works - like I said, the only difference is calling the shell command via myself (i.e. copy-pasting into a shell), vs the Matlab system() function. What other state does a shell environment have, other than environment variables (which I've checked via SET, as DSTOO also suggested), that could cause this to FUBAR?
So where wouls I put that in my code? After the load flaredata.txt? because thats where the error is.
What about "fmincon"?
Error? I understood you already had the data in Matlab and wanted to get rid of the first 3 columns. Otherwise follow matuba's advice, for instance: fid = fopen('flaredata.txt'); C = textscan(fid, '%\*s%\*s%\*s%f%f%f%f%f%f%f%f%f%f'); fclose(fid); A = cell2mat (C); *Notice the asterisk means you'll ignore those three string columns.
Thanks that has worked perfectly.
I was able to create a separate function file with the four variables as an argument, which works fine and gives the following output: http://imgur.com/2k5Q7d0. What I then need to do is optimize the parameters so that the best fit is found to the experimental data seen here: http://imgur.com/XRFmqkv. Can I use the experimental data as an argument within fminsearch to optimize the initial function? Thanks in advance.
Yes, however this is slightly different from the initial problem in which you just wanted to minimize a given function. You seem to be looking for some sort of "curve of best fit". For this you need a metric to compare the curve derived from theory to the noisier "curve" that is your data. One often used metric is quadratic (but others are possible). In the quadratic case, for every data point you take the x-value, check which y-value your theoretical curve predicts, and then square the difference to the actually measured y-value. Essentially you want to write a function that sums these squared differences over all data points. As you point out, the arguments to this function should therefore be the theoretical curve as defined by its parameters, as well as the data. Something like this pseudocode: function [s_o_s] = sum_of_squares( p1, p2, p3, p4, data ) s_o_s = 0 for ii = 1:length(data) difference = data(ii,2) - theoretical_curve( p1, p2, p3, p4, data(ii,1) ) s_o_s = s_o_s + difference ^ 2 end where data is a Nx2 matrix of points (x, y) and the function theoretical_curve() gives you the theoretic y-value for a corresponding x given parameters p1-p4. What you are really after, though, is to find the parameters that minimize the function "sum_of_squares()" - so you would need to call it as an argument to a minimizer like fminsearch or so. optimal_parameters = fminsearch( @(p) sum_of_squares(p(1), p(2), p(3), p(4), data), [startingvaluesforp] ) 
Yes, absolutely. I have this problem in my current research and I just wanted to point it out as a possible alternative.
Never used the errorbar() function myself but I would assume it has the same functionality for the bars' color/style/thickness that plot() does. Maybe try something like: figure(1) hold on plot(dataX,dataY,'-b') errorbar(dataX,dataY,error,'--r') to get a plot of your data using a solid blue line and the error bars using a dashed red line. May or may not work; again, I've never used errorbar(). Also check the documentation on the function.
Just plot the data itself with a large MarkerSize, then "hold on", and plot the error bars over it, choosing your colors for each separately in the normal way. You probably want to plot the data last, actually, so it lays over the error bars.
+1, I totally wrote the same answer without reading your post first. Sorry.
To elaborate on what /u/the_truth_is_harsh said: You need to define what is the "best fit". The equivalent mathematical concept here is the idea of a "norm". The norm is a general concept that essentially relates how "close" two abstract generalized structures are. In your case you are trying to judge how "close" your curve is to the data. /u/the_truth_is_harsh mentions a "quadratic fit"; more precisely this is the L2-Norm. It is the square root of the sum of the square errors. Other norms exist as well. The L1-Norm is simply the sum of the errors. Another common one is the infinity-norm; this is simply the value of the largest single error. Considering you are fitting data of a particular nature that you know something about apriori, there probably is an accepted norm defined that when minimized identically minimizes some actual quantity (perhaps maximizes a confidence interval etc.) You should find out what this is, so that you get the best "best fit" you can get.
I gave all of that a go and it seems to be working just fine, so thank you very much! The only problem I have now is the fact that the theoretical values take a while to compute (~3.5 mins on my laptop) but it is much quicker on the uni computers. Really appreciate your help mate.
My supervisor recommended a chi-squared fit which I was able to implement instead of the sum of squares based on /u/the_truth_is_harsh pseudocode. It has always been drilled into us as the 'go-to' best fit analysis at uni, to the point where I am sick of the sight of it now haha. Bring on graduation!
That is pretty badass!
Just to add, there's a GUI to use. Type "optimtool" on the MATLAB command line. Fminsearch is only one optimization function -- the MATLAB documentation is pretty good at helping you choose which one. One problem is that I think it's a "greedy" algorithm and thus you run the risk of falling into a local minimum. Simulated annealing (my preferred) and genetic algorithm can help mitigate that.
Yeah, it's a good suggestion if OP's problem satiesfies these conditions.
Buttons are higher in the uistack than axes. There is no way to hide a button with an axes. I can think of two possible solutions: 1) Have the button display the part of the image that it covers. This answer on MATLAB Answers tells you how to display an image on a button: http://www.mathworks.com/matlabcentral/answers/98593 2) Write a mouse button down callback for the axes and use that instead of a push button.
error = predicted - observation
Do you have any other coding background? Do you have an idea of how to code it in language X ? We're not here to do HW, and I certainly won't, you may find others, but $10 doesn't motivate me either.
Yeah, can't you just...subtract them...?
Do you mean you want to find the fitted least squared error? Or the sum of least squares to find the best fit parameter?
Sure, you can post it here and I'll include it.
It looks like on my system, the figures always open on whatever monitor is set to be my main display. 
Some monitors come with rotating stands, some do not. It should be readily apparent which category yours falls into when you try to rotate it :D If you lack the fetaure your only options are buying a new mount, rigging something yourself, or if you're lucky and and your monitor uses one of the square VESA profiles and has a long enough arm sometimes you can take it off and reattach it rotated. As for Figures opening on the other display, give this solution a try: http://www.mathworks.com/matlabcentral/answers/101277
Blatant astroturfing is blatant. 
 % deseas_v4.m % % This function will accept monthly timeseries data % and deseasonalize it % % Function Name: % deseas_v4 % % Modifications since v3: % update to output the climatologic mean % % Input(s): % time_in - x values of time series % data_in - y values of time series % % Output(s): % deseas_time - x values of time series % deseas_data - deseasonalized y values of time series % with monthly mean subtracted off % deseas_mean - monthly mean timeseries used as climatologic mean % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function [deseas_time deseas_data deseas_mean] = deseas_v4(time_in, data_in) deseas_time = time_in; deseas_data = zeros(size(data_in)); mo_mean = zeros(12,2); %%%%% Find start of first full year time_infloor = floor(time_in); firstJAN = find(time_infloor &gt; time_infloor(1), 1, 'first'); if firstJAN == 13 firstJAN = 1; % if data series starts on JAN end % end if for ipt = firstJAN:length(time_in) if ~isnan(data_in(ipt)) switch mod(ipt-(firstJAN-1),12) case 1 mo_mean(1,1) = mo_mean(1,1) + data_in(ipt); mo_mean(1,2) = mo_mean(1,2) + 1; case 2 mo_mean(2,1) = mo_mean(2,1) + data_in(ipt); mo_mean(2,2) = mo_mean(2,2) + 1; case 3 mo_mean(3,1) = mo_mean(3,1) + data_in(ipt); mo_mean(3,2) = mo_mean(3,2) + 1; case 4 mo_mean(4,1) = mo_mean(4,1) + data_in(ipt); mo_mean(4,2) = mo_mean(4,2) + 1; case 5 mo_mean(5,1) = mo_mean(5,1) + data_in(ipt); mo_mean(5,2) = mo_mean(5,2) + 1; case 6 mo_mean(6,1) = mo_mean(6,1) + data_in(ipt); mo_mean(6,2) = mo_mean(6,2) + 1; case 7 mo_mean(7,1) = mo_mean(7,1) + data_in(ipt); mo_mean(7,2) = mo_mean(7,2) + 1; case 8 mo_mean(8,1) = mo_mean(8,1) + data_in(ipt); mo_mean(8,2) = mo_mean(8,2) + 1; case 9 mo_mean(9,1) = mo_mean(9,1) + data_in(ipt); mo_mean(9,2) = mo_mean(9,2) + 1; case 10 mo_mean(10,1) = mo_mean(10,1) + data_in(ipt); mo_mean(10,2) = mo_mean(10,2) + 1; case 11 mo_mean(11,1) = mo_mean(11,1) + data_in(ipt); mo_mean(11,2) = mo_mean(11,2) + 1; case 0 mo_mean(12,1) = mo_mean(12,1) + data_in(ipt); mo_mean(12,2) = mo_mean(12,2) + 1; end % end switch end % end if end % end for if firstJAN &gt; 1 for ipre = firstJAN-1:-1:1 if ~isnan(data_in(ipt)) switch mod(ipt-(firstJAN-1),12) case 1 mo_mean(1,1) = mo_mean(1,1) + data_in(ipre); mo_mean(1,2) = mo_mean(1,2) + 1; case 2 mo_mean(2,1) = mo_mean(2,1) + data_in(ipre); mo_mean(2,2) = mo_mean(2,2) + 1; case 3 mo_mean(3,1) = mo_mean(3,1) + data_in(ipre); mo_mean(3,2) = mo_mean(3,2) + 1; case 4 mo_mean(4,1) = mo_mean(4,1) + data_in(ipre); mo_mean(4,2) = mo_mean(4,2) + 1; case 5 mo_mean(5,1) = mo_mean(5,1) + data_in(ipre); mo_mean(5,2) = mo_mean(5,2) + 1; case 6 mo_mean(6,1) = mo_mean(6,1) + data_in(ipre); mo_mean(6,2) = mo_mean(6,2) + 1; case 7 mo_mean(7,1) = mo_mean(7,1) + data_in(ipre); mo_mean(7,2) = mo_mean(7,2) + 1; case 8 mo_mean(8,1) = mo_mean(8,1) + data_in(ipre); mo_mean(8,2) = mo_mean(8,2) + 1; case 9 mo_mean(9,1) = mo_mean(9,1) + data_in(ipre); mo_mean(9,2) = mo_mean(9,2) + 1; case 10 mo_mean(10,1) = mo_mean(10,1) + data_in(ipre); mo_mean(10,2) = mo_mean(10,2) + 1; case 11 mo_mean(11,1) = mo_mean(11,1) + data_in(ipre); mo_mean(11,2) = mo_mean(11,2) + 1; case 0 mo_mean(12,1) = mo_mean(12,1) + data_in(ipre); mo_mean(12,2) = mo_mean(12,2) + 1; end % end switch end % end if end % end for end % end if % perform mean calculation mo_mean_tmp = mo_mean; mo_mean = []; mo_mean = mo_mean_tmp(:,1)./mo_mean_tmp(:,2); deseas_mean = mo_mean; % subtract monthly mean climatology for ipt = firstJAN:length(time_in) switch mod(ipt-(firstJAN-1),12) case 1 deseas_data(ipt) = data_in(ipt) - mo_mean(1); case 2 deseas_data(ipt) = data_in(ipt) - mo_mean(2); case 3 deseas_data(ipt) = data_in(ipt) - mo_mean(3); case 4 deseas_data(ipt) = data_in(ipt) - mo_mean(4); case 5 deseas_data(ipt) = data_in(ipt) - mo_mean(5); case 6 deseas_data(ipt) = data_in(ipt) - mo_mean(6); case 7 deseas_data(ipt) = data_in(ipt) - mo_mean(7); case 8 deseas_data(ipt) = data_in(ipt) - mo_mean(8); case 9 deseas_data(ipt) = data_in(ipt) - mo_mean(9); case 10 deseas_data(ipt) = data_in(ipt) - mo_mean(10); case 11 deseas_data(ipt) = data_in(ipt) - mo_mean(11); case 0 deseas_data(ipt) = data_in(ipt) - mo_mean(12); end % end switch end % end for if firstJAN &gt; 1 for ipre = firstJAN-1:-1:1 switch mod(ipre-(firstJAN-1),12) case 1 deseas_data(ipre) = data_in(ipre) - mo_mean(1); case 2 deseas_data(ipre) = data_in(ipre) - mo_mean(2); case 3 deseas_data(ipre) = data_in(ipre) - mo_mean(3); case 4 deseas_data(ipre) = data_in(ipre) - mo_mean(4); case 5 deseas_data(ipre) = data_in(ipre) - mo_mean(5); case 6 deseas_data(ipre) = data_in(ipre) - mo_mean(6); case 7 deseas_data(ipre) = data_in(ipre) - mo_mean(7); case 8 deseas_data(ipre) = data_in(ipre) - mo_mean(8); case 9 deseas_data(ipre) = data_in(ipre) - mo_mean(9); case 10 deseas_data(ipre) = data_in(ipre) - mo_mean(10); case 11 deseas_data(ipre) = data_in(ipre) - mo_mean(11); case 0 deseas_data(ipre) = data_in(ipre) - mo_mean(12); end % end switch end % end for end % end if return % return function deseas_v2 
I would love to help but, I need more information. What is the equation? What does the output of the equation look like at each loop iteration? What does the output of your data look like at the end of your script (what do you want it to look like)? 
The equation is 'V_bo=Isp*g_o*log((1./(pl.^(1./N)*(1-e)+e)).^N)' where Isp, g_o, pl, e are constants and N is the variable. I can use a for loop to generate a vector for V_bo. However, I want to be able to use the for/while loop to calculate a certain value of N (not integer) which corresponds to pre-determined value of V_bo. Does this help? 
PM me a picture of the problem so I can understand the problem and I'll try my best to help you.
Yes that is my equation and yes that is exactly what I want (my loop to stop looping when it finds the value of N I require). I am trying to work out the value, N which corresponds to a known V_bo.
What part of this equation are you iterating? While and for loops typically change an element or repeat a process. 
If you have 8760 elements (24h*365d), simply try and convert (or first create) the element array corresponding to the hours, then convert the hours into however you want to separate your data. So data in Jan will be elements 1:24*31 Feb will be 24*(31+1):24*(31+28)
Are you asking to display it symbolically?
 pi=sym('pi'); cos(pi/6) or simply syms pi 
I guess non-linear least squares to find the best fit parameters. 
I don't know if I'm over thinking this but I know the error would be f(predicted)-f(observed). However, that works if the x values are the same for both values of f. In my example x and y are independent of each other but dependent on the same parameter, some angle. So for the predicted curve the x and y values are plotted that correspond to the same angle. In my created curve, the x and y values are also plotted corresponding to the same angle. However, I do not know if a point on the predicted curve and a point on my created curve share the same angle. That is the only way I can see an error being conducted, if I subtract the two values (either x or y) but they'd have to be from the same angle. I don't know if this made any sense lol, I hope it does because it is driving me crazy! Basically my equations are of the form: x(theta)= Acos(theta)-Bsin(beta)+cCos(beta) y(theta)=Acos(theta)+bcos(beta)-csin(beta) I'm given the curve for x and y plotted together on the x and y axis, but not given theta. 
FYI, if you want to plot the integral, check out cumsum().
Use GUIDE to make a GUI with four textboxes that make up the matrix. I don't know if that's more advanced than what you're doing, but it would look neat. Alternatively uicontrols to ask for each number at a time.
I mean if I've never heard of it then yeah it probably is a bit more advanced than what I'm doing right now haha
http://www.mathworks.com/help/matlab/ref/input.html
 &gt;&gt; a=input('hi ') hi [1 2;3 4] a = 1 2 3 4 &gt;&gt; 
I can kind of see what you're doing but the vector consists of any 4 values a user may input, not just 4 set values and that's what I'm mostly having trouble figuring out is how to create the vector from the values the user inputted
... You lost me. So the user enters any 4 values, which in that example they (I) did. &gt;&gt; a=input('Vector2? ') Vector2? [134 401875; 420 94] a = 134 401875 420 94 Name a 2x2 vector and I can put it in.
Oh no sorry I got it to work it's just that I was not inputting it into the command window correctly haha. Thank you! :)
What is j in your code?
Thanks. This is what I wanted.
sortof. The question was answered below, but it would also be nice to display answers as tex.
So to check, you have x1 and y1, and x2 and y2? And you want the error, y2-y1 (or something similar)? If this is the case, you want to pick a "standardized" x and use interp1 for both functions to get y1interp and y2interp. I can help if this is the case.
I ended up using cumtrapz(), thanks.
If you're making loops that are definitely always going to be based on a variable incrementing from one number to another number at a fixed increment use a 'for' loop. For loops let the person reading the code know what is happening right at the beginning. They don't have to read through your code to figure out what you're up to. Also: you didn't copy your code over correctly (x isn't used) and you can't call functions like that (variables don't resolve in to pieces of function names). AFAIK Matlab doesn't have an equivalent to function pointers like C. Also, seriously, find better variable names. Please. For everyone who will ever have to read your code. "x y r" tells me NOTHING about what you're doing. Give your variables meaningful names. Even if it means a few extra keystrokes, you'll be doing yourself a favor. 
&gt; Also, seriously, find better variable names. Please. For everyone who will ever have to read your code. "x y r" tells me NOTHING about what you're doing. Give your variables meaningful names. Even if it means a few extra keystrokes, you'll be doing yourself a favor. Thank you :)
&gt; usly, find better variable names. Please. For everyone who will ever have to read your code. "x y r" tells me NOTHING about what you're doing. Give your variables meaningful names. Even if it means a few extra keystrokes, you'll be doing yourself a favor. I have to make a calendar for may 14 by drawing on all the dividing lines and importing images that are provided. I've picked up on the incorrect position of the counter and moved it inside both for loops. I agree with you about the variable naming, I'm just going along with the scheme that we've been following for this course. I will change them though as I agree it'll be helpful looking back. Thanks for replying.
Cool. If you're doing graphic elements, variable names like horizLine vertLine outsideBoarder mondayLine tuesdayLine etc might be appropriate. You might could think of better names for what you're doing. It's a convention called "camel casing" which some people prefer to use for method (aka function) names. horiz_line vert_line are just as valid. Depends on what's considered appropriate in your environment. The hardest thing for a programmer to master is being able to name things clearly and succinctly. When you're learning the temptation is definitely there to name things "a b c i j k x y z" just to solve that "what do I call this??!?!!" problem. I've been there dude, I know. If your teacher is telling you to use single character variables for things that aren't obvious "loop from 1 to 10" applications then he is not a good teacher. Tell him a guy on the internet said so. He'll straighten out ;) where variable names aren't clear enough then use a comment. j = 0 for (i = 1:30) sprintf('j = %d', j) j = j+1 end is meaningless to the reader, but can be made more clear by comments j = 0 % number of pomegranates eaten this month for (i = 1:30) % loop through the days in April j = j+1 % eat one pomegranate per day sprintf('j = %d', j) % print number of pomegranates eaten so far end and if you can get your code to line up nicely it'll increase readability. 
Well done. Here is my implementation using the [streamline function](http://www.mathworks.com/help/matlab/ref/streamline.html) to draw the streamlines. % based on http://www.vermontveterinarycardiology.com/index.php/for-cardiologists/for-cardiologists?id=127 a = 1; % cylinder radius U = 1; % free stream velocity N = 200; % grid size X M = 200; % grid size Y xstart = -5; % start of x grid xend = 5; %end of x grid ystart = 0; %start of y grid yend = 5; % end of y grid % initial stream locations nStreams = 25; initStreamY = linspace( ystart , yend , nStreams ); initStreamX = xstart * ones( size( initStreamY) ); % Set up the sample grid N x M grid xx = linspace( xstart , xend , N ); yy = linspace( ystart , yend , M ); [X , Y] = meshgrid( xx , yy); % Convert the grid to spherical coordinates r = sqrt( X.^2 + Y.^2); theta = atan2( Y , X ); % Compute the x and y velocities in cartesian coordinates at each grid % location u = U * (1 - a^2 * cos(2 * theta) ./ r.^2 ); % x velocity component v = -U * a^2 * sin(2*theta)./(r.^2); % y velocity component % zero out velocities inside of cylinder u( r &lt; a ) = 0; v( r &lt; a ) = 0; figure quiver(xx,yy,u,v) title('u v velocity quiver plot') axis tight figure streamline( xx , yy, u , v , initStreamX , initStreamY ); title('Streamlines') axis tight 
Properly formatted code: function [ w,v ] = BrentsAlgorithm_Function( w,x,v ) %% While Loop to Run Through the Steps of the Algorithm clear clc n=7; e=0.1; while n~=12 switch n %Step 7 case 7 fw=(1000*(1.11+((1.11)/(w^(0.18))))) / (1-w); fx=(1000*(1.11+((1.11)/(x^(0.18))))) / (1-x); fv=(1000*(1.11+((1.11)/(v^(0.18))))) / (1-v); n=8; %Step 8 case 8 q=x-(0.5*(((x-w)^2*(fx-fv)-(x-v)^2*(fx-fw))/((x-w)*(fx-fv)-(x-v)*(fx-fw)))); n=9; %Step 9 case 9 fq=(1000*(1.11+((1.11)/(q^(0.18))))) / (1-q); n=10; %Step 10 case 10 if q&gt;x &amp;&amp; q&lt;v v=q; elseif q&lt;x &amp;&amp; q&gt;w w=q; end n=11; %Step 11 case 11 Int1=(x-w); Int2=(v-x); if Int1&gt;Int2 if Int1&lt;Int2*e n=12; else n=8; end elseif Int1&lt;Int2 if Int2&lt;2*e n=12; else n=8; end end % End case 12 w=a; v=b; x=c; end end disp(w) disp(v) end
Thank you but this is also giving me the same problem. I input my variable (0.1471, 0.0624, 0.1147) given from early in the question but still nothing.
Can you provide some typical inputs for testing? Also, you should remove the "clear" and "clc" commands. * "clear" will clear the function workspace, removing the "w", "x" and "v" input arguments. * "clc" will clear the terminal window * a , b , c are undefined in case 12 * The algorithm can get stuck in case 11 if Int1 == Int2 * In step 11, the code in "if Int1&lt;Int2*e" statement will never be executed. The condition Int1 &gt; Int2 must be satisfied before the "Int1&lt;Int2*e" condition is even evaluated. Since e = 0.1, Int2 * e &lt; Int2 &lt; Int1 
I didn't change anything. The first six lines of the function in your original post were not using code formatting so I reposted it for clarity.
Thanks, much of this was already clear to me at a qualitative level. BTW, I'm working with singles, not doubles, to reduce memory usage and since the 32 bit precision is already very large for the calculations I'm performing. For the reasons you've exposed I thought that using a parfor on the second loop was better that using it on the first one, so that the vectors to send out to the workers were much smaller, while keeping enough calculations to be performed in the splitted piece (50 interpolation of a 200 elements vector). Also, in my code the vectors, except for nCoords which is small, look very "sliceable".
As an exercise in debugging code: have you tried using Matlab's debugger? Start by setting a breakpoint at the end of your function so you can check if the values of w and v have changed. Next breakpoint should probably be inside case 11 where you've got if statements - you can check if those expressions will be matched
How exactly did you do that, do you have an example? I'd like to do something like this.
The command latex() can be used to transform symbolic expressions into latex code. Its very useful, especially for matrices, fractions etc.
[Magic](http://images.junkee.com/wp-content/uploads/2013/12/shia-labeouf-magic-gif.gif) Here's a zip file of the most comprehensive project I did. https://www.dropbox.com/s/vipzz9nfmw9ufse/Phase2.zip phase2.m is the matlab script that dumps all the output phase2.tex is the tex file. Here's one such example. dataOut=fullfile(p,[n '_manip.tex']); fid=fopen(dataOut,'w'); fprintf(fid,'Manipulability of the robot.\n \\pagebreak[1]'); fprintf(fid,'\\begin{verbatim}\n'); if strcmpi(robotType,'RRR') fprintf(fid,'%% t(s)%9s%9s%9s\n','ax','by','cz'); fprintf(fid,'% 8.3f% 8.3f % 8.3f % 8.3f\n',[t';ax;by;cz]); else fprintf(fid,'%% t(s)%9s%9s\n','ax','by'); fprintf(fid,'% 8.3f% 8.3f % 8.3f\n',[t';ax;by]); end fprintf(fid,'\\end{verbatim}\n'); fprintf(texFid,'\\input{%s}\n',dataOut);% Write That prints out a tex file that looks like this: \begin{verbatim} 17 % Number of positions % t(s) Theta1 Theta2 Theta3 Omega1 Omega2 Omega3 0.000 0.000 326.976 50.858 0.000 0.000 0.000 .... \end{verbatim} That ends up in the PDF like this: http://i.imgur.com/vTxx0mO.png I wrote a few other short scripts to turn matlab symbolic equations into tex. So this part of the pdf document: http://i.imgur.com/W22zyEV.png Is in the phase2.tex as \newpage RRR robot from homework \#4. The peak joint velocity is in joint 2 at position 10. \input{trajectory2} That trajectory2.tex is Symbolic jacobian matrix for RRR. \input{trajectory2_jacobian.tex} And trajectory2_jacobian.tex looks like this: \begin{eqnarray} J(1,1)&amp;=&amp;\begin{bmatrix} 5\cdot \cos(\theta_1)\cdot \sin(\theta_2) - 4\cdot \sin(\theta_1) + 4\cdot \cos(\theta_1)\cdot \cos(\theta_2)\cdot \sin(\theta_3) + 4\cdot \cos(\theta_1)\cdot \cos(\theta_3)\cdot \sin(\theta_2)\\ \end{bmatrix} And the matlab code that creates that is dataOut=fullfile(p,[n '_jacobian.tex']); fid=fopen(dataOut,'w'); fprintf(fid,'\\begin{eqnarray}\n'); for i=1:size(J,1) for j=1:size(J,2) if i==size(J,1) &amp;&amp; j==size(J,2) fprintf(fid,'J(%d,%d)&amp;=&amp;%s\n \\nonumber',i,j,mat2latex(simplify(J(i,j)))); else fprintf(fid,'J(%d,%d)&amp;=&amp;%s\n \\nonumber \\\\',i,j,mat2latex(simplify(J(i,j)))); end end end Remember to create a '\' in fprintf you need escape it. So it loops through a ixj matrix and prints out a simplified version of the J(i,j) matrix. You look at mat2latex.m godspeed. It's completely undocumented. I wasn't planning on sharing this code with anyone else. Looking at it I know what it does but it's like Tank staring into the Matrix. It uses bmatrix to loop through a ixj sized array and puts it into a tex readable array. It also replaces cos, sin, theta, alpha, delta, *, dTheta and ddTheta with the appropriate LaTeX. 
Astroturfing aside, it does look pretty cool.
It also looked pretty cool the last seven or eight times they've spammed here with it. I don't mind someone advertising their nifty tutorial or webinar, but at least try to provide some content. 
&gt; As for finding a certain value of N (a non integer), I don't believe you'll be able to find it within the loop itself, unless you want your loop to stop looping when it "finds" the value (say between N= 5 and 6), and you don't care about calculating V_bo after this value of N. You're going to want to use the optimization toolkit for this. The function `fminsearch` is good for problems like this where you're trying to optimize a single parameter.
I think this isn't right. If his original function was *f(N)*, then minimizing *A_k - f(N)* is the same as maximizing *f(N)*. The value of *A_k* makes no difference to the answer. You need to square the difference for the optimization to work, but even then something funny seems to be happening. There may be no finite optimum for the constants you chose.
Follow up question: Is it possible to do the reverse? That is can one fit a vector field to a set of streamlines subject to some parsimony constraint?
i think you're right. my implementation is a little naive. i will look over it when i get the time. the approach itself, looking at it as an optimization problem, however, is not bad i think.
Also, I only had a few greek variables. It shouldn't be too hard to add the rest and make dXXXX and ddXXXX automatically parse out the variable and add the appropriate greek letter.
Yeah I think i'll be playing with your code for the next month.
I wasn't aware, I hadn't seen it. That is pretty annoying.
It gets posted every few weeks. Always by a throwaway and never with any sort of discussion. There was also some schmuck spamming his terrible blog where he basically copy/pasted portions of the help documentation or someone's contribution to MatlabCentral. We finally trolled him in to going away. 
A minimum working example demonstrating your problem would help. With each frame, are you plotting x(1:n) or just x(n)? 
I believe you can...but it needs to be repeated. Like '' or ''' will be a '. I'm on my phone right now and can't check my code to confirm, but I have used it before with fprintf.
It seems so obvious now, of course that's how it works. It is '', thank you.
This is what I have: prompt = 'please enter your electricity usage for each month for a period of 12 months' result =input(prompt) for i = result; if i &lt;= 500; monthly = 500*0.02 yearly = monthly*12 disp(yearly) elseif i &gt; 500 &amp;&amp; i &lt; 1000 (And that is all I have right now. I also didn't mention that the guidelines are basically, if the units are 500 or less then each unit is billed as 2 cents. But if they are over 500 but not more than 1000, then any unit exceeding 500 is billed as 5 cents. And then finally the cost for exceeding 1000 is $35 plus 10 cents for every unit over 1000) 
You already have the answer, but the source of it may also be of use in the future. Check out http://www.mathworks.com/help/matlab/matlab_prog/formatting-strings.html 
It looks like your for loop is over the 12 months, so each iteration corresponds to one month. Therefore inside the loop, you only want to work out the cost due to that month's usage. Your code for the first case doesn't look correct- whether I use 1 unit or 499 units, the yearly number you print out is the same, when of course the cost for 499 units would be more. If I told you I used 300 units, how would you work out my cost using a normal calculator? Same for the second dotpoint - if I told you that I used 760 units, what is the cost?
I think I understand what you're saying. This assignment isn't due for another few days so I will try to think about it some more and see what I can do 
Don't change the erasemode, instead create a line object and at each iteration, set the xdata and ydata properties to the last few points corresponding to the tail. If you have changed the erasemode for the figure, you need to remember that the tail isn't actually there, it's just residual pixels. Indeed, the Matlab documentation states "(Erasemode) none — Do not erase the line when it is moved or destroyed. While the object is still visible on the screen after erasing with EraseMode none, you cannot print it, because MATLAB stores no information about its former location."
I was at that page earlier today but skipped over it because i didn't think i was printing strings, i'm printing integers. But of course its a string and i'm only iterating the numerical portion of the string. Most of my programming experience is either in assembly or verilog so i dont really deal with data types in this fashion, i'm still working my way through matlab. Thanks for clearing that up.
That's akin to changing from a hammer and chisel to a pneumatic jackhammer! Best of luck in your new high level programming adventures. 
SOOOOO much what this post says. Even ignoring the technical portion where the stuff is there, but only residually, his advice is spot on. Changing from a complete redraw at each frame grab to directly altering the object's data properties at each frame grab results in an ABSURD performance boost.
&gt; we don't do your homework! http://www.mathworks.com/help/matlab/getting-started-with-matlab.html 
This is a decent start. There are ways to do this without a for loop, but for now I'll focus on fixing this up before throwing you out in to the deep end entirely :) First issue: you can loop from 1:trip until you define trip! Move line 8 where you prompt for the trip count to be outside the loop. Next, you ask for the current odometer reading every loop. Nothing wrong with that, but it is very annoying and unnecesarry! One easy fix for this is to ask for the initial odometer reading outside the for loop. At the end of the loop the new odometer reading can be moved into the old odometer reading's variable. This removes the need to change any of the rest of your code. Lastly: your min/max display. I'm sure you're aware that that portion is wrong... You should save all the computed MPG ratings, right now you just have the current one. Change mpgrat = .... to mpgrat(i) = ... and it will keep each rating. Then to get the trip where the min/max occured you have two options: using the version of min()/max() that provide the index where those values occurred, or using find. Examples of each are below. I think those changes should fix you up entirely. If I missed an issue let me know. It is last and my brain is shot :) Finding location of minimum value using min() to get the index: data = [3 6 2 9 10 7]; [value, index] = min(data); fprintf('Minimum value %d occurred at index %d', value, index); Finding location of minimum value using find(): data = [3 6 2 9 10 7]; value = min(data); index = find(data == value); fprintf('Minimum value %d occurred at index %d', value, index); Both are essentially the same. The same approach works for max(). Generally the first method is all you'll need, but knowing how find() works is insanely useful so I included it as well.
It took me two read throughs and then actually trying to run it to realize it was incorrect, so yeah you were close (much closer than a fair majority of these types of posts). I was thrown off by your post of the output. Took me a minute to realize you had faked it when trying to explain your task &gt;&lt; 
I would like to know the same thing, but with OCTAVE if possible.
I recommend [Matlabfrag](http://www.mathworks.com/matlabcentral/fileexchange/21286-matlabfrag) or similar programs. It is even useful since you can easily edit the text or even references in the figure long after you have created it.
As a student, I had a similar course and after doing a lot of Matlab in a summer internship, here's what I would have wanted to know: - Vectorization: (you mentioned it, but it is so important in Matlab). I worked on images with 20 megapixels. With loops, my code took 20 to 30 minutes to run. With matrices, it was a matter of 30 seconds or so. Its so crazy important in Matlab. - Base of OOP: If I had just knew that OOP existed in Matlab, I would have been able to write way clearer code. For bigger projects, this really helps. I agree with you that the Internet is super important for doing code. I can't write programs without it. I also find the Matlab help documentation very helpful. You could show how to use it.
You mentioned project euler, but Mathworks has its own version called [cody](http://www.mathworks.co.uk/matlabcentral/cody). It scores you based on the number of characters in your answer, so vectorisation will provide better scores than loops, and using built in MATLAB functions will score better than rolling your own methods. I think it would possibly be better than project euler because it rewards you for writing code in a 'MATLAB way'
That sounds like a good start, the only thing I would tread lightly on is MEX. It is fantastic, but at the junior level most have already forgotten C/C++. The most important: preallocate when possible and best coding practices. As an anecdote, yesterday I recieved a set of scripts from a Ph.D. student that is filled with evals, over 500 lines long, and calls several other scripts, of similar length, all modifying the primary workspace variables. Tell them to avoid things like this like it is the plague. Others: * Simulink, it can be a time saver when used correctly, but I would not spend more than two weeks on it. * Handles and GUIs, but try to stay away from GUIDE. * Also mention things like the undocumentedmatlab.com and matlab file exchange.
-1) Good programing style. If they don't use spaces and other whitespace in their code they should fail. 0) Documentation and commenting. Not just *what* you're doing, that's usually fairly obvious. But documentation of WHY you're doing what you're doing. Yea, I know that those are supposed to be covered in the "basic" courses, but they're still important and it's best to hammer these things into students while they're in school before the cement their bad programming habits. Don't force vectorization if it doesn't fit the problem. Focus on reading and analyzing large sets of repeated data. Read, crunch, save. Read, crunch, generate plots. Plotting and output are really helpful, so covering how to manipulate figure sizes and layouts automatically is handy. One of the biggest utilities that MATLAB has for me in practice is for post-processing data from experiments and other simulation. I suspect that that's a pretty common occurrence.
Beautiful. Did you use the "movie" command to create them?
Don't bother with mex, that is way beyond the scope of what should be focused on at that level. Some topics to cover for sure: * flow control (if/else, for/while, switch) * vectorization and how to identify when to use it instead of flow control * logical indexing * low level i/o (fread,fgetl, fscanf, textscan, dlmread, etc...) * high level i/o (basically just save/load) * -----&gt; ***HOW TO USE THE FUCKING DOCUMENTATION*** &lt;----- (this sub would not exist if this was covered more in academic settings) * using the profiler * using breakpoints * a smattering of toolboxes (image processing, optimization, and curve fitting for sure) * brief crash course in symbolic math * various plotting options (2d and 3d!!) * anonymous functions * creating and using handles to manipulate objects (most notably figures and plots) 
&gt; The most important: preallocate when possible and best coding practices. As an anecdote, yesterday I recieved a set of scripts from a Ph.D. student that is filled with evals, over 500 lines long, and calls several other scripts, of similar length, all modifying the primary workspace variables. Tell them to avoid things like this like it is the plague. Sounds like the legacy Fortran code I have to deal with. No useful comments, non-descript variable names, goto spaghetti, global variables galore ... and the dreaded "equivalence" statement. (Basically using the same memory location for two different arrays.)
Nah, I used imwrite. You can check out my code [here](http://sethmiers.com/content/blog/faraday/inducedEMF.m).
Could you expand on: &gt;filled with evals and &gt;"equivalence" statements ? I haven't heard these terms, and if I'm guilty I'd like to improve my coding!
I use [export_fig](http://www.mathworks.com/matlabcentral/fileexchange/23629-exportfig) and save them to eps. Works wonders, though you will need ghostscript installed. 
eval is a matlab function that evaluates the contents of the given string, while handy I feel there are something that should never be used in code that you will share because they are very difficult to debug. My preferred method of debugging code like this is to use bisection debugging. The equivalence statement in fortran is like setting pointers in C/C++ to be equal. If you modify one the other is going to change because they call the same position in memory. They beg the question "Why not use a single variable name?"
Oh yeah, I have seen code like that. I learned unix functions like "sed" really quick to cope with such code. Gotos, I have seen things man, things I did not even know were possible. Gotos inside for loops, gotos to bits of code that goto the original code. A recursive hell. 
No problem. Hit me up if you need some help with the tex file.
I highly recommend pgfplots for this. I wound up just having matlab output the raw data into a text file and do everything in pgfplots which gives you total control about the look. So you just tell pgfplots to read its data from the file you wrote with matlab I only used line plots but as far as I know it handles surf plots as well. Have a look at the bottom of page 467 in the manual (importing mesh data from matlab) One other option is that pgfplots allows you to draw axis on an existing image. You output the surf plot from matlab without any axis as an image and then use pgfplots to draw axis for you. You might have to crop the matlab image by hand. I believe this functionality is found somewhere near the back of the pgfplots manual. Pgfplots can create amazingly beautiful plots and with some clever setup allows you to have one central configuration file for many plots. Decide at the end of your thesis you rather want the labels in gray or thicker tick marks? Just modify a few lines of code in one spot and after a new latex run every figure changes consistently.
Thanks, that'll do.
Making a home brew sous vide cooker? (I have no advice for your actual problem, was just curious about the application.)
So what I think your main issue will be is how the user interprets your prompt. 1) they may think its going to keep prompting them 12 times 2) they may think you need to enter all 12 months at once Either change your prompt to be more specific for the user: 'Enter 12 months worth of electrical usage as: [#hrJanUse #hrFebUse ... #hrDecUse]' Or, as you have said, prompt them 12 times and then have your program work that out, either with 12vars or with a 1x12 array of the monthly usage. The main point I'm getting at is what do YOU (the coder) want "result" to be input as and what does the USER expect/want/desire to input "result" as. UI gets complicated - try and use as little as you need and/or make it as specific (and catch errors) as you can.
I don't think your white noise is correct. Wouldn't you just have random vectors? 
Your problem, as I see it, is in getting X hours of usage for a month, 12 times. Either have 12 prompts: JanUse = input('input Jan elect. usage hrs') .... DecUse = %you get the point and then make a 1x12 array YrUse = [JanUse, ... , DecUse]; and then loop... or loop 12 times for input: for imo = 1:12 ElecUse(imo) = input(['enter month ' num2str(imo) ' elect usage'); end ... and even within this loop, you could simulatneously calculate the cost using your conditional.
Unfortunately, to make it loop correctly in the gif I had to give the white noise a period. So generated 16 samples of white noise using the wgn() function, reversed and concatenated it to make 32 samples, and I made that equal to one period of "whitenoise". This just serves to demonstrate the effects on the coil and voltage.
You got it. Such a bitch to tune. I'm of the notion it's nonlinear and there is no way to actively cool
But emacs is better than vim.
Thanks for the great reply! Doing it on a whiteboard sounds like a great idea.
Take a look at the [Academia page](http://www.mathworks.com/academia/educators.html?s_tid=acmain_ep_gw_bod) at MathWorks. There are a lot of resources for people using MATLAB for instruction. 
http://www.mathworks.com/matlabcentral/fileexchange/11462-npermutek Should do the trick.
This is perfect! Thank you :)
&gt; I am just curious to see what the community thinks are absolutely imperative topics that I cover. Plotting. Seriously. Academia lives for publishing. You need to present your data in order to publish your findings. If matlab/octave is used to get your results, you are better served if you are able to also employ it to represent your data. Do cover the following topics: * plotting a simple 2D function. Introductory stuff, to wet the beak. Use it to explain how to save the plot to an image file, how to setup the x and y labels, title, x and y-axis ranges, set graph colors, set line styles, set picture size, tweak background color... etc etc etc * plotting n simple 2D functions: plot as a matrix, plot as pairs of X and Y data, subplots, setup graph legends, use the hold function and explain the differences between hold on and hold all, etc.. * plot 3D functions. set camera alignment * plot gradient maps: set gradient colors, set colormap, contour plots, filled contour plots, etc... * any other stuff. It might be important to teach someone to learn how to write scripts with Matlab, but the single most important skill in academia is how to present your data. This will certainly do everyone a whole lot of good.
Just one more question. I couldn't find it on the link, so I'm hoping you might know this. Is there a limit to how large the vector can be in order to perform this permutation? For P = perms(v) it says v should be no bigger than 10, so should I assume this would be the same for that function in the link? 
Right, I use this a lot in my latex documents.
Haha thank you :D I'm just a lot faster with Vim. That's why I prefer it.
If you don't know if it's the correct answer, think of a way to check it. 
You have 6 variables and 5 equations.
Those are the instructions that my teacher gave me verbatim. I'm thinking it has to do with the 0 at the top of the answer pile.
I cant believe I've never found this. Thanks a ton!
Thanks for the feedback!
Ink have to brush up on simulink... it's the drag and drop simulation tool, right? 
This will be a very data centered course, so I will focus a good amount of time on "graphical analysis"... and data visualization. Thanks for the good input!
Sounds like the consensus is to nix mex. The rest of this is great too. Thanks!
Very good point. This class seems to be intended to focus on data vis and analysis in matlab specifically for ISE/BME. Thanks
Do a double pendulum simulator. It involves solving some very complicated differential equations and is physics related. You can make it more complicated by doing an energy analysis/ phase analysis/ all sorts of other stuff. It's pretty much a chaotic system so there is tons of stuff to talk about
Yes, available free memory and the maximum element count your version of MATLAB can handle will be your hard caps. Enumerating every possible permutation of a given set can get out of hand very, very quickly. Check http://www.mathworks.com/matlabcentral/answers/91711 for more details (or just run the memory command and see what it tells you
Have you used rref() in matlab? Try rref(c) and see what you make of the answer. 
Your second row of your "c" matrix does not match up with your system of equations. It should be [0 -1 4 -1 0 0]. You should get the correct answer once you correct that. EDIT: But as has been pointed out, you can easily check if your answer is correct by plugging your solution for T back into your system of equations and checking if it comes out correctly. 
this gives me ans = 1.0000 0 0 0 0 -5.8333 0 1.0000 0 0 0 -1.3333 0 0 1.0000 0 0 -1.3333 0 0 0 1.0000 0 0.1250 0 0 0 0 1.0000 1.8333 I'm not entirely sure that this is correct either. 
'Radar systems analysis and design using matlab'(Mahafza) could help you with your project. I'm sure you'd be able to buy/find it online.
You could try an N-body simulation, pretty easy to set up using the ODE solvers, but loads of interesting physics to study, you can set up a model solar system, star cluster, earth-moon-sun system, you name it.
Your set of equations appear to be linearly independent but as someone else has stated, you have five equations and six unknowns. Assuming your problem is well-posed, this is an undetermined system with infinitely many solutions. I would pick one of the unknowns and set it as a constant (e.g., alpha) then use Matlab to do a symbolic solve on the system of equations using the constant in place of whichever unknown you chose. Your final answer will be expressions for each variable in terms of alpha. Here is a link for how to do symbolic solve: http://www.mathworks.com/help/symbolic/solve-a-system-of-algebraic-equations.html I am actually pretty surprised Matlab allows you to use the backslash direct solver for an underdetermined system. Apparently (after some googling) it returns the particular solution that minimizes some norm. Interesting...
This gives me T = 0 -4.4333 36.5333 10.5667 -134.2667 16.4333
 load data1.txt; x1 = data1(:,1); y1 = data1(:,2).^2 plot(x1,y1,'r*') also, http://www.mathworks.com/help/matlab/ref/spline.html should help you with spline fitting
How are you loading it into matlab? You should be able to use fopen and fscanf.
Can't you do A = sparse(n,n) Edit: I think i misunderstood the question. I think it depends on what kinds of operations you are doing. It should be easy enough to switch between the two and see if there are any performance differences.
If you are handling large sparse matrices you never want to store the full matrix (let alone perform operations on it). You want to create the matrix using vectors of the non-zero entries using sparse(i,j,s,m,n,nzmax). This is much more efficient in terms of memory storage and computational efficiency for whatever operations you need to carry out. 
+1 Also looks great if you use springs for the pendulum connections.
Here is a full MatWorks discussion about ways to accomplish this. http://www.mathworks.com/matlabcentral/answers/2081-how-to-execute-two-matlab-scripts-simultaneously
 kroneckerDelta = @(x,x0)(x==x0); x = (0:5); plot(x,kroneckerDelta(x,3),'.'); 
I would recommend writing out your objective function, inequality statements and equality statements that model your problem. Its difficult for people to look at your code and if you put the equations in correctly if they dont know what it is designed to really do.
have you tried making up a k x n matrix and seeing what it does? probs=[1 2 3 4 5;6 7 8 9 10]; [~,preds]=max(probs,[],1);
There's a novel idea... 
Try indenting all your code by four spaces. Makes it readable.
Thanks for the formatting advice. Done as well. 
linprog minimizes the objective function, it looks like you want to maximize it. I think you can make it a maximization problem by negating q. I don't think your constraints of N1 &gt;=1, N2&gt;=1, N3&gt;=1 are coded correctly. For instance, in your code, the constraint for N1 reads like N1 &lt;= -1, which is not equivalent to N1 &gt;=1. I think this is why your problem explodes because all the unknowns can go to -infinity. To fix this I negated the N1 row in the matrix A (2nd row). This goes for N2 and N3 as well. This is what I did: q = -[3180 2000 3000]; %placed a negative to make the problem a maximization A = [11 4 5; -1 0 0; 0 -1 0; 0 0 -1]; %negated the last three rows b = [50; -1; -1; -1]; x = linprog(q,A,b) Which returns: 1.0000 1.0000 7.0000 This to me makes sense based on your constraints.
Are you trying to plot the objective function? Using surf might pose a problem, because surf only plots functions of two parameters, and you have three. You need to somehow visualize a volume. There are several ways to do this. [Here is a series of videos on visualizations that you may find useful.] (http://blogs.mathworks.com/videos/2009/10/23/basics-volume-visualization-19-defining-scalar-and-vector-fields/) However, your problem is slightly more specific than the examples there, because you'd probably want to plot just the constrained space. Meshgrid always returns a rectangular prism of data points. Since you have constraints, points in this rectangular prism that don't meet the criteria should be removed (I think). This first snippet of code shows how I would use meshgrid. xint = 1:.5:9; yint = 1:.5:9; zint = 1:.5:9; [X,Y,Z] = meshgrid(xint, yint, zint); % generates coordinates ranging from xint, yint, zint Q = -(q(1).*X + q(2).*Y + q(3).*Z); % objective function mapped to X Y Z vaues In general xint, yint, and zint, can have different ranges. Q is your objective functions mapped to a cube that ranges from 1 to 9 in each dimension. The next bit of code removes points that do not satisfy your constraints by logical indexing of the independent variables generated by meshgrid (X,Y,Z) and the dependent variable Q: Q1 = Q((11.*X + 4.*Y + 5.*Z &lt;= 50) &amp; (X&gt;=1) &amp; (Y&gt;=1) &amp; (Z&gt;=1)); %removing points based on constraints and assigning them to new variables X1 = X((11.*X + 4.*Y + 5.*Z &lt;= 50) &amp; (X&gt;=1) &amp; (Y&gt;=1) &amp; (Z&gt;=1)); %this must be done for X, Y, and Z as well so plot corresponds Y1 = Y((11.*X + 4.*Y + 5.*Z &lt;= 50) &amp; (X&gt;=1) &amp; (Y&gt;=1) &amp; (Z&gt;=1)); Z1 = Z((11.*X + 4.*Y + 5.*Z &lt;= 50) &amp; (X&gt;=1) &amp; (Y&gt;=1) &amp; (Z&gt;=1)); Each of the points in the space takes on a scalar value of the objective function, which can be represented by coloring the point with respect to this scalar value. figure; hold on; scatter3(X1(:), Y1(:), Z1(:),[], Q1(:)); %plots constrained space, where the color corresponds to cost colormap('pink');colormap(flipud(colormap)); plot3(x(1), x(2), x(3), 'k*', 'markersize', 10); grid on; xlabel('N1');ylabel('N2');zlabel('N3'); view(3);axis equal;axis([1 10 1 10 1 10]); colorbar;legend('Constrained Space', 'Maximum Value'); You might want to look into isosurfaces and [isocolors](http://www.mathworks.com/help/matlab/ref/isocolors.html) for better volume visualizations.
I was indeed trying to plot the objective function. I was trying to constrain the output by making my third variable a function of the other two, which I had hoped would constrain the solution space, but to no avail. Although I am new to MATLAB, the way you explain your code seems to make sense. The only part I am confused on (and MATLAB is giving me an error for), is the fourth line up from the bottom: plot3(x(1), x(2), x(3), 'k*', 'markersize', 10); grid on; MATLAB is tellig me that 'x' is an undefined function for input arguments of type 'double' A quick google search shows that it could be that the line of code giving the error isn't referencing the correct PATH, but I'm not sure if that is the case. Any thoughts? 
Also, you say in your comment that the color of the values on the plot correspond to cost. Could you inform me as to the cost of what? If you are referring to my objective function then it makes sense (even though it is not actually optimizing cost, but I did not put that in the description so no harm no foul).
You're using `asind` which is for degrees, and you're integrating. Calculus and degrees don't go together. That is the first problem I see with your code, check what happens. Also, it's `cumtrapz(z,f)`, not the other way.
I would check your original equations. Not sure which is the correct form, but the integral of (1/sqrt(z^2 - 1)) is not asin(z). http://www.wolframalpha.com/input/?i=int%5B1%2Fsqrt%28z%5E2-1%29%5D http://www.wolframalpha.com/input/?i=diff%5Barcsin%28z%29%5D Otherwise, everything else looks good, although you could actually get rid of that loop if you wanted by using meshgrid (or equivalent). Edit: I noticed a few other things. The first is that your inputs to cumtrapz are reversed (or the z is unnecessary. The other is that I think you are getting the integral over a single axis, when your other equation is over the complex plane.
Best name ever.
That error means the variable x is not defined in your code. If you look at my first post in the thread, I set x equal to linprog command. In your code it is not set equal to a variable. x is the solution to your optimization problem. q is NOT x. I am plotting the location of the max value of the objective function on top of the constrained space.
Yea by cost I meant value of the objective function at the specified point. I am used to calling the objective function the cost function. More specifically the color corresponds to the variable Q1.
You're right I had the original math wrong. Got bad info from a table. This was very helpful, but something is still off. F1: http://imgur.com/KurmtFt,6yO39DW F2: http://imgur.com/KurmtFt,6yO39DW#1 The nature of the loop is necessary for a bigger code that this one will go in to. 
Seems fine. It's just different branches. 
Here's what I meant by getting rid of the loop, but the answer still doesn't look what you want. [xx, yy] = meshgrid(x, y); zz = xx + 1i*yy; FF1 = asind(zz); ff = 1./sqrt(1-zz.^2); FF2 = cumtrapz(ff,1); Edit: Had the wrong inputs.
Ahhh that fixed it. I'm very interested in the power MATLAB has to offer, not so much in how specific it is with errors...but I suppose that is why it works so well. Thanks again for all the help. You're a lifesaver.
Sorry I'm not going to give out my email to download the text file, can you post the first several lines? The mistake is most likely in the fscanf formatting statement. You could try experimenting with a reduced text file with the same format. 
goddammit, I didnt realize that the site was scum. its wot score was pretty good... anyways: DATE TIME MHz CPU_0 CPU_1 CPU_2 CPU_3 LOAD% 03/24/14 18:03:45 931.18 75 75 75 75 10.9 03/24/14 18:03:50 931.18 74 74 74 74 12.7 03/24/14 18:03:55 931.18 75 75 75 75 5.6 03/24/14 18:04:00 931.18 75 75 75 75 8.8
I do not understand how I would make use of it. &gt;&gt; F=fscanf(fid,'%s %s %f %d %d %d %d %f') F = [] was the result I got
Yeah, you are going to have to experiment to find the correct one. I don't remember exactly how to deal with the file headers. Check out the documentation for fscanf it is pretty good and has relevant examples.
ended up copying to excel, using data-&gt;text to columns and them importing it back to matlab. Would appreciate if someone could show me how to do this within matlab though. I couldn't figure it out.
We have a company internal function called ZapAnal(). I'm just always glad it wasn't named AnalZap(). 
You *may* need to strip off the header of the data first when using fscanf? Either manually delete it from the file itself or try using fgetl() to get n-header lines. Maybe textscan() as well. I'm not fluent in .txt input - I normally end up trying 3 different ways before the 3rd finally works. a.k.a. trial and error (and also likely more inefficient than it could be)
Use textscan() instead of fscanf(), it is a bit less of a pain in the ass. The format given will work wonderfully. Note that the result it gives will be a cell array with an entry for each column of your data. It gets a bit messy since you have mixed data types (strings, floats, and ints). If you want to ignore a column, add a * to the pattern item. For instance to ginore the first two text columns use this: %*s %*s %f %d %d %d %d %f Also consider textread() to get better control over how the data is stored once it is read in from your data file.
textscan() is more user friendly in how it operates and works well with the pattern you provided (when adding in the fgetl() to skip the header as you also noted). Generally speaking for data that is well formatted into columns you should stick to dlmread() or textscan(). Another handy one is textread() as it allows you to split each item of your pattern out to a seperate variable. So rather than one giant monolithic cell array you get a few easier to digest matrices (and possibly cell arrays if you have text items). As for the inefficiency, that goes away with practice. After your 468413th time deciphering what you need and how to extract it, things get much easier. Pattern strings and regular expressions are two thigns that are easy to use, but hard to master.
Happy to help :)
Had to double-check which /r/ this was in. Not the one I had initially suspected.
One last (hopefully) quick question. As I do understand the initial optimization setup you corrected for me, I don't totally understand the mesh grid you created. As my understanding how you created the graph isn't necessarily crucial to my problem, I am curious as to what the color bar legend on the graph represents in terms of increasing (from dark to light as well as numerically) value. I can attach a photo if my question is too convoluted, but hopefully you catch my drift. 
Defining what you mean by correlation would be my first tip. That is an incredibly vague task open to quite a bit of interpretation.
I need to write out a nice "How to make a legible post" explanation and save it somewhere. Add four spaces before each line to make your code not look like a giant pile of fuck when you post it. Easiest way to do so is to open in MATLAB's editor (or any editor where you can adjust Tab behavior to introduce four spaces) and indent everything one level. You'll also get a better level of interest if you provide some input data so we can actually run your code.
Well the color at each point is directly related to the value of the objective function at the point. The 'darker' the point gets, the larger the value of the objective function at that point. For example, the smallest possible value in your space is N1=1, N2=1, N3=1. The corresponding objective function value at this point is 3,180(1)+2,000(1)+3,000(1) = 8180. This point will be the whitest point on the graph, because the whiter the point is then the lower the objective function value. If you look at the color bar, the whitest values are less than 1, which is equivalent to 1 x 10^4 (the bar is scaled), which is very close to 8180, so that checks out. The largest value is at our variable x, which is N1=1, N2=1, N3=7. The objective function value at this point is 26180, or 2.6 x 10^4. This is close to the darkest limit of the colorbar. I've added a label next to the colorbar, take a look: figure; hold on; scatter3(X1(:), Y1(:), Z1(:),[], Q1(:)); %plots constrained space, where the color corresponds to cost colormap('pink');colormap(flipud(colormap)); plot3(x(1), x(2), x(3), 'k*', 'markersize', 10); grid on; xlabel('N1');ylabel('N2');zlabel('N3'); view(3);axis equal;axis([1 10 1 10 1 10]); c=colorbar; ylabel(c,'Objective function value'); legend('Constrained Space', 'Maximum Value'); The colorbar units are whatever the objective function units are. This is the simplest volume visualization, but there are more advanced techniques that I linked to in previous posts that you may want to play with.
Thanks for the quick reply. I see now once I reapply your mesh grid that the maximum value is now showing up on the plot (in the form of the '*', as you had labeled on the colorbar legend). Before, it was not showing up, which was the source of my confusion. It definitely makes more sense now. 
Type fn(vecV,num1,num2,num3) and run it.
signal 1- A1+jB1 signal 2- A2+jB2 they both have random phase and amplitude then the envelope of the complex signals should have a correlation of a factor from 0 to 1, no correlation to full correlation. sqrt(a1^2+b1^2) &amp; sqrt(a2^2+b2^2) is correlated by a factor.
i had a lecture introducing functions, but i still am confused as hell... 
http://www.mathworks.com/help/matlab/ref/function.html Start here. Try things. Post said things and why they aren't working.
How would you do the problem by hand?
Perimeter: It's iterating through pairs of coordinates, finding the euclidean distance between the two, and summing. Area: http://www.mathopenref.com/coordpolygonarea.html
To begin writing a function you have to ask what are the inputs and what are the outputs. In this example we have as an input degrees, call the deg, and output radians, call this rad, we refer to these as parameters. This results in a function's shell. function rad=d2r(deg) end Now we have to fill in the body, or how should the inputs be acted upon to obtain an output? We know the conversion from degrees to radians is obtained by radians = (degrees)*(pi radians)/(180 degrees) So how do we write this in MATLAB, in terms of our input and output parameters? rad=deg*pi/180 pi is a built in constant. Now combine the body with the shell and we get function rad=d2r(deg) rad=deg*pi/180 end After we save this and we try to run it with r=d2g(45) we notice that we see two things being outputted that are the same, one called rad and another called r. This is because the program is writing to standard out because we forgot a semicolon in the program, so adding this results in function rad=d2r(deg) rad=deg*pi/180; end and rerunning r=d2g(45), we now only see r.
&gt; n=mod(ipre-(firstJAN-1),12); n(n==0)=12; &gt; n(n==0)=12; Or just n=mod(ipre-(firstJAN-1)-1,12)+1;
Thanks, I'll try that. I don't think there's a problem with the actual code because it works fine on other computers and it does (sorta) on mine too. Outputs the matrix, as if should, but doesn't plot anything.
I don't think the code is the problem. Like I said it works like a charm on other computers.
You're right. I've found troubleshooting an interoperability issue is best done when being as vague as possible and not providing useful things like your code and the software and hardware specs of the machines you're using.
&gt; Outputs the matrix, as if should, but doesn't plot anything. ... go back up to step 4 above
The easy way? Append multiple copies of your function to each other. That may or may not make sense for you problem/intended result. But it will definitely be a periodic function.
"Doctor! My car won't start! Here's a picture of a watermelon!"
No, just concatenate a bunch of copies of your signal together: y = [y y y y y y y y y]; or use repmat: y = repmat(y, 1, 10);
Thanks for commenting but I'll try elsewhere.
I'm sure they'll be able to do equally nothing with the amount of information you've provided.
You should be able to use a sine function and apply some logic to produce values of 0 and 1. I am away from MATLAB right now but try something like this: x=1:0.1:100; y=sin(x); deltafn=y&gt;0;
Our sincerest apologies for not being psychic.
Unless if I am misunderstanding something, you can do this directly in the ode function ode45 calls because you have access to the states and time.
This sounds promising. How do you access states and time?
Take as an example the ODE function below. It takes as its first arguments time and the state of the differential equation. It also takes two additional arguments g and gamma from the main program workspace. function dx=odefun(t,x,g,gamma) dx=zeros(4,1);%This is a pre-initialization saying we have a fourth order system. dx(1)=-0.01*x(3)+x(2);%This is dx_1/dt. dx(2)=x(4)-sin(x(1));%This is dx_2/dt. dx(3)=-x(1)+cos(x(2))-cos(t);%This is dx_3/dt. dx(4)=-(1-gamma*exp(-x(1)^2));%This is dx_4/dt. end As you can see the third state's time derivative is a function of time, and the fourth state uses the additional arguments. You can also make dx(N)=myNthFunction(t,x,...), you access the state just by invoking x(N), where N is some appropriate integer. We call this with the ode function by: function redditODEBeginner20140325() g=-9.8; gamma=1.4; [t,y]=ode45(@odefun,[0 6],[0.1 1 -0.2 0.1],[],g,gamma); plot(t,y) legend('1','2','3','4') end
Thank you so much.
Pretty sure your problem is here: t=0; &lt;snip&gt; y(n) = 0; while y(n) &gt; 0; (do stuff) end plot(t,y) Since you are setting y=0, you never enter the while loop and skip right to plotting (0,0).
There are so many ways to do that. The key thing that you will need to do is change the callback or buttondownfcn of a button. Next you have to worry about how to keep the state (what you are creating in essence is a finite state automata). The two options that I think will be the best in this case are global and persistent variables, but I would side toward persistent. 
Thanks for your reply. I'm not very advanced using GUIDE. I've been able to create a user/password login, but it displays on the matlab main window and it requires keyboard input rather than clicking buttons: if get(hObject,'Value')==1 %If a button is pressed, prompt user to input user/pass username1 = 'PPD'; password1 = '1234'; attempts = 0; while attempts &lt; 4 username = input('input user name:','s'); password = input('input password:','s'); if(strcmpi(username,username1))&amp;&amp;(strcmpi(password,password1)) disp('You have been successfully logged in'); set(handles.Screen,'String','You have been successfully logged in') return else disp('Invalid Username or Password. Please try again') attempts = attempts + 1; end if attempts==4 disp('Invalid entry. Please Try again later') set(handles.Screen,'String','Invalid entry. Please Try again later') end end else end Although this works, I'd much rather the button approach. Is there any chance you can go more into detail about how to do such a thing? 
It is very difficult to help because your code cannot be run as-is due to several missing variables. However, based on my guess as to what your code is doing- when you run the Screen command, the image appears on the screen. Therefore, you want to be checking for key presses AFTER the image is on the screen. As it stands, your sequence of events for each trial looks like 1. Until trialduration, see if the user presses a key 2. Draw the image to the screen 3. Wait for 1 second When really you want 1. Draw the image to the screen 2. Until trialduration, see if the user presses a key So perhaps you can just rearrange your code? for j = 1:3 %fixation fix_img = imread(fix, 'JPG'); Screen('FillRect', window, black); Screen('PutImage', window, fix_img); % put image on screen Screen('Flip', window); trIni = GetSecs; while (GetSecs - trIni &lt; trialduration) [keyIsDown, secs, keyCode] = KbCheck; if keyIsDown if keyCode(Akey); %detected response = 1; response_all(j,1) = response; elseif keyCode(Bkey) response = 2; response_all(j,1) = response; end end end Screen('CloseAll'); end Again - without code that anyone can run, nobody can check if this fixes your problem
You are accessing sequence(3) which is not defined. It says this verbatim in the error message thrown by your code. &gt; Attempted to access sequence(3); index out of bounds because numel(sequence)=2. Either ask the person for 3 numbers or compute it yourself before entering the loop.
I tried computing it myself. But it gives me the same error for sequence(4). Shouldn't the loop be creating it?
On to the next issue: you are creating the next item, but then you try to access the next one on the next iteration. Starting with k=3, you compute the 3rd item, store it at index 3, increment your counter to 4, now the loop restarts and is looking for sequence(4). Doesn't exist. Things die. One solution: adjust the indices of everything in your while condition by 1 (k-1 becomes k-2 etc...), precompute item 3 based on the user input, then start looping at 4. I'm sure there are others, but that is what jumps out at my addled, sleep deprived mind.
Why don't you just move the screen flip to before the KbCheck while loop? You should also add break statements into your key detected if statements, unless you want to force a fixed response duration.
I was thinking a similar thing. One comment on your adapted code snippet is that the screen close all should be outside the trial for loop.
Here's the reorganized code: nTrials = 3; trialDuration = 5; % Seconds for trial = 1:nTrials fix_img = imread(fix, 'JPG'); % Load image Screen('FillRect', window, black); % Blank screen Screen('PutImage', window, fix_img); % Put image on screen Screen('Flip', window); trIni = GetSecs; while ((GetSecs - trIni) &lt; trialDuration) [keyIsDown, ~, keyCode] = KbCheck; if keyIsDown if keyCode(Akey) % Key A detected response = 1; response_all(trial,1) = response; break; % Get out of while loop elseif keyCode(Bkey) % Key B detected response = 2; response_all(trial,1) = response; break; % Get out of while loop end end end while (KeyIsDown) % Crappy debounce [KeyIsDown, ~, ~] = KbCheck; end % Blank screen after response Screen('FillRect', window, black); % Blank screen Screen('Flip', window); % Pause for next trial WaitSecs(1); end
Did that, and that works now!! Thank you!!!
I never use GUIDE, I hate it with a passion. Instead I like to do everything my way, that is building my own window and my own uicontrol objects. This way I have one less file, and I cannot repeat this enough, I have control over the various ui objects. The key things that you need to learn to dealing with GUIs are event listeners and event handlers. You should be aware that there is a large camp that does not like the use of globals. Personally, if used sparingly they are wonderful. In terms of the use of persistents, I use a persistent so it is not accessible outside the function, but maintains in memory. Below is some code that should get you started, I have purposely left some things not done. function keypadpress() %I use a global to keep track of all the GUI handles without having to %worry about passing arguments, really not the best style. global handles; %I create my own window to add blocks to. handles.fig=figure('Name','Login','Menubar','none','Position',... [100 100 500 500],'CloseRequestFcn',@closeWindow,'NumberTitle','off'); %If you forget to close this window click on it and type %delete(gcf) in the command line. You should try to figure out how %to check if the figure already exists, hint: handles.fig is a %global. %I always, and I cannot stress this enough, use normalized units! This %allows you to scale the window. set(handles.fig,'Unit','Normalized'); stateMachine(); %Creates uicontrol objects, setting the various properties. I strongly %suggest you go through and figure out some of the other useful %properties, perhaps like UserData. handles.text=uicontrol(handles.fig,'Style','text','String','User:','Units','Normalized',... 'Position',[0.05 0.85 0.2 0.05]); handles.edit=uicontrol(handles.fig,'Style','edit','Units','Normalized',... 'Position',[0.25 0.85 0.7 0.05],'BackgroundColor',[1 1 1]); handles.button1=uicontrol(handles.fig,'Style','pushbutton','Units','Normalized',... 'Position',[0.05 0.5 0.45 0.3],'BackgroundColor',[1 1 1],'String','1',... 'Callback',@stateMachine); handles.button2=uicontrol(handles.fig,'Style','pushbutton','Units','Normalized',... 'Position',[0.5 0.5 0.45 0.3],'BackgroundColor',[1 1 1],'String','2',... 'Callback',@stateMachine); handles.button3=uicontrol(handles.fig,'Style','pushbutton','Units','Normalized',... 'Position',[0.05 0.2 0.45 0.3],'BackgroundColor',[1 1 1],'String','3',... 'Callback',@stateMachine); handles.button4=uicontrol(handles.fig,'Style','pushbutton','Units','Normalized',... 'Position',[0.5 0.2 0.45 0.3],'BackgroundColor',[1 1 1],'String','4',... 'Callback',@stateMachine); handles.clear=uicontrol(handles.fig,'Style','pushbutton','Units','Normalized',... 'Position',[0.05 0.05 0.9 0.05],'BackgroundColor',[1 1 1],'String','Clear',... 'Callback',@stateMachine); end %For the callback function you always have to have these two arguments. function stateMachine(hObject,eventData) global handles; persistent passwd; %Check if this is the initialization of the state machine. if (nargin==0) passwd=[]; return; end usernames={'avatar','gwar','gojira'}; passwords=[1234 4311 3412]; %Nulls the passwd variable if you press clear or initialize a new %window. if (hObject==handles.clear ) passwd=[]; return; end str=lower(get(handles.edit,'String'));%Converts the username to lowercase, change if you want case sensitive usernames. %Checks which button is being pressed. switch hObject case handles.button1 passwd=[passwd '1']; case handles.button2 passwd=[passwd '2']; case handles.button3 passwd=[passwd '3']; case handles.button4 passwd=[passwd '4']; end tocheck=false; if (numel(passwd)==4) for n1=1:numel(usernames) if (strcmp(usernames{n1},str) &amp; str2num(passwd)==passwords(n1)) tocheck=true; end end if (tocheck) msgbox(['Welcome ' str '.'],'You have gained access.'); close(handles.fig); else msgbox(['You do not have access.'],'Incorrect login credentials.','error'); passwd=[]; end end end function closeWindow(hObject,eventData) global handles; delete(handles.fig); clear handles; end
I have no idea either because I don't know what the values in x and y represent. Try writing it out on paper and figure out exactly what is being multiplied together when you evaluate x.*y([2:end,1]), what happens when you need to take the difference and then look at what exactly is being summed up. My guess is that you're summing some small area elements or something like that, but it's impossible to tell without more detail.
Have you tried to write this formula it out by hand? Try that and see if you understand what is being done.
 * by itself does normal every day multiplication, such as 2x3=6, and can multiply a vector/matrix by a scalar. It will also perform matrix multiplication like [2x4] * [4x3] = [2x3] It will not work for vector/matrix elemental multiplication. For that, you need to use .* **NOTE** the period prior to the asterisk. This is key. This will now perform elemental multiplication on your vectors/arrays. Your vector/matrix BOTH need to be the same size, as this will take the (1,1) element in both, multiply them together, and put it in the (1,1) position in the output. It will make the output the SAME SIZE as your two inputs. The period can also be used for division and exponentiation. I'll leave it up to you to fiddle around, make an error or two, trouble shoot them, and finally come up with the equation and answer you want.
So the coordinates that you've given are the corners of a square side 3, but if you ignore that and just think about some general coordinates for a quadrilateral, x1y1, x2y2 etc instead, the answer becomes more obvious. The x([2:end,1]) operation reorders the x vector so that it looks something like (x2,x3,x4,x1) and the same thing for the y([2:end,1]). When you multiply these together and sum up the terms you get - sum(x.*y([2:end,1])-y.*x([2:end,1])) = (x1-x3)(y2-y4) + (x2-x4)(y3-y1) I've done a bit of rearranging, but multiply it out; all the terms are there. This looks like the width and height of the square and lo and behold, when you multiply by the factor of 1/2 you get the area. The nice thing about this is that it will give the area of any general quadrilateral (I think!) if you input the x&amp;y coordinates of the 4 corners in the n matrix that you mentioned. As a lesson for the future, it can help to think about these sorts of problems in a more general sense before putting in numbers to get the answer for an individual problem. It often gives you a greater understanding of what is happening in the grand scheme of things than just plugging numbers into a formula.
I've been seeing this a lot lately. Maybe we could get an overlay to the input boxes like how they do on /r/photoshopbattles that says "indent your code 4 spaces or link to it somewhere where it is formatted appropriately." I don't even bother with the posts that look just like this reply, but are code and have italics scattered through them.
Think about what happens. First i is set ti 1. Then it loops 4 times through j=2,4,6,8 and since i is still 1, the value y(i) will be set to 8 since it is being replaced every time you loop over j. What you want to do can be done in 1 loop: y = zeros(1,4); i=1; for j = 2:2:8 y(i) = j; i=i+1; end or y = zeros(1,4); for i = 1:4 %default increment is 1 y(i) = 2*i; end
First, when you enter code, put 4 spaces before every line, even if its already indented (will preserve indentation): y = zeros(1,4); for i = 1:1:4 for j = 2:2:8 y(i) = j; end end Now, if all you want is an array [2, 4, 6, 8], code it as such. What you've coded is doing the following. Loops through j for each i loop it does: i j ----- 1 1 1 2 1 3 1 4 2 1 2 2 and so on. Can you see your problem yet, and why you're getting [8 8 8 8] and not [2 4 6 8]?
Thanks
&gt; I don't even bother with the posts that look just like this reply, but are code and have italics scattered through them. Ditto. &gt; Maybe we could get an overlay to the input boxes I would greatly support that. Or even a sidebar tip.
&gt; Or even a sidebar tip. Honestly though, how often when going to a new sub do you even notice the sidebar? Put this shit front and center, right when you input your post/response. Hell, maybe even start up a bot looking for .* In text, seeing if they are 4+ spaces indented, and just delete those posts//comments that fail. Let's get draconian!! Even if it didn't include .* check for other common MATLAB code structure for i = 1:10 several "=" signs multiple uses of "end" 
The frequencies (in Hz) are ((1:N)-1)/N* (1/T), so in your case (0:100)/101* 1/0.1. To check this: plot((0:100)/101*1/0.1,abs(fft(sin(2*pi*t)+sin(4*pi*t)))) 
Seriously? Pay attention in class. MATLAB can. Read the documentation.
I even heard that there are some good references in the sidebar over ----&gt; that way... For your final maybe try going to class.
We aren't your teachers, if you have a specific problem that you have tried on your own to solve and need us to point you in the right direction, we would be glad to help. Otherwise, go do your homework and pay attention in class.
Should I buy stock in this gogle? 
I'm not convinced they can turn a profit. Give it a few years. Ask Jeeves has a corner on the market, they will be hard to compete with!
No - the Nyquist frequency is 5 Hz (half the sampling frequency) so you cannot have any frequency values with a frequency (in Hz) greater than 5 Hz. Indeed, when you make your plot, the right hand side corresponds to negative frequencies, not 5-10 Hz as your x-axis indicates. The Nyquist frequency is half the sampling rate, so 5 Hz. The frequency resolution is fs/N, so it is 10/101. There are an odd number (101) of time points. Therefore there is no frequency component at the Nyquist frequency. The highest frequency component is slightly less than the Nyquist frequency, and is duplicated. The frequencies in Hz are 0:10/101:5. Consider a sine wave at 3 Hz. You can correctly plot a single-sided FFT with t = 0:0.1:10; A = 1*sin(2*pi*3*t) s = 1/length(t)*fft(A); f = 0:10/101:5 plot(f, abs(s(1:51))); However, this function is not periodic because it has the same value at t=0 and t=10. This results in leakage so you see a wide peak in the spectrum, not the single frequency components you expect from a single sine wave. You need to stop one sample before t=10 in order for it to actually be periodic, so 9.9s. Note that there are still 51 unique frequencies because there is now a single Nyquist component t = 0:0.1:10-0.1; A = 1*sin(2*pi*3*t) s = 1/length(t)*fft(A); f = 0:10/100:5 plot(f, abs(s(1:51))); In general, the single sided FFT corresponds to the indices (1:floor(N/2+1)), and the corresponding frequency values are 0:fs/N:fs/2. The other side of the FFT corresponds to negative frequencies with the same frequency values as the positive side, so they go in the reverse order, except there is no zero frequency component and there is only a Nyquist component if there were an even number of points. For t = 0:0.1:10-0.1, there is a Nyquist component, so the 100 frequencies are [f -f(end-1:-1:2)] For t = 0:0.1:10, there is no Nyquist component, so the 101 frequencies are [f -f(end:-1:2)]
Sorry maybe I didn't explain it very well. I'm expecting a NxN matrix x_hat' * exp(1j * w ) from this operation, but I want the coefficient of w to increment from 1 up to n, so I want n NxN matrices without a for loop (if possible).
Why are you calling jacobian when your function is named jacobi?
Your error: &gt; Undefined function '**jacobian**' The cause: &gt; function A=**jacobi**(f,x) I bolded the relevant parts. Edit: AAnnnndddd excaza ninja sniped me while I was looking at a funny picture.
Ah, now I feel stupid. We call it the Jacobi-matrix in Sweden but our course literature is in English where it's called the Jacobian, that's why I had it mixed up. I'm still having trouble getting my Newton-solver to work but I feel that I can probably fix that myself. Thanks for helping me with an embarrassing error!
Check out [repmat()](http://www.mathworks.com/help/matlab/ref/repmat.html). Sounds like it can do the job nicely.
Here's a quick little thing that I whipped up. It seems to do what you're asking: n=7; myArray = [1, 2, 7, 8, 4]; num_repeat=ceil(n/length(myArray)); newArray = repmat(myArray,1,num_repeat); output=newArray(1:n)
I have this conversation about once a semester between some physics students and math students. It depends on the interpretation of the frequencies after Nyquist. In mathematics one would use something like fftshift to put the FFT between -w/2 and w/2, but due to the repeating nature of the DFT we treat the second half (w/2,w] as [-w/2,0). This is touched upon on [Mathworld](http://mathworld.wolfram.com/DiscreteFourierTransform.html), but does not include the normalization. Perhaps [McClellan, Schafer, and Yoder](https://archive.org/details/SignalProcessingFirst) present it better around and including Figure 13-10. More common in physics and engineering is to drop the latter half such that you have your result. Both ways are correct depending on context, which is why our frequencies are equal if I choose 50 instead of 100: ((0:50)/101*1/0.1)-(0:10/101:5) Anyway, you have my upvote for understanding leakage. I still find it surprising when my colleagues and some of my more advanced students ask me why they are not getting delta function like spikes at the appropriate frequency.
Wow, thanks so much for your time. For some reason, I took the guide approach. It just seemed easy with the tutorials available, but now I see how much better it is to do it by building my own window. That was a huge eye opener, and I managed to figure out the code too! Thanks so much for your help and time. Much appreciated.
No problem, it was mostly a copy-paste job. The guide approach is probably the most common, I just have a different background that has led me to really not like using it. As for which is better, you just have to pick the right tool for the job. Good luck.
That's what you get for adding fancy formatting
Thanks for the reference - I hadn't seen that interpretation before and I have no doubt that it is a correct interpretation. But the analytic Fourier transform of a sinusoid with frequency w1 has delta functions at frequencies +w1 and -w1. Therefore, is it not a more useful choice (at least in this context) to interpret the output of the Matlab FFT function as being from -w/2 to w/2 rather than from 0 to w, to recover the same frequencies as the analytic transform?
You are spot on, from a practical perspective there is no need to include anything beyond [0,w/2] and it is exactly because it adds no new information for the application. For applications such as power spectra, noise, etc., this is appropriate. There are cases though where the repeated information is necessary, one thing that comes to mind is [Parseval's identity](http://en.wikipedia.org/wiki/Parseval%27s_identity)/[theorem](http://en.wikipedia.org/wiki/Parseval%27s_theorem) (forgive the wiki reference, but it is better than mathworld in this case). But again, knowing how to interpret an energy spectra you can get the same thing back using only data up to the Nyquist frequency. 
Indeed - the canonical case where you *must* include all of the frequencies is when the time series is complex and the frequency components aren't repeated. Otherwise, the knowledge that it has been repeated, together with the subset of the data, is sufficient to reconstruct the full set of components EDIT: But in particular, I wasn't referring to being able to discard half of the components. Rather, for the example above, the frequency components calculated over the range 0 to w would mean that you say the frequency components are at 3 Hz and 7 Hz. Whereas interpreting the range as -w/2 to w/2 (that is, the second half of the FFT as being frequencies [-w/2,0) ) would mean you say the frequency components are at 3 Hz and -3 Hz. I would have said that the latter case allows for a more useful interpretation of the resulting frequencies, at least in this case
Ehm... just multiply them? Your simple example with a and b is literally just c = a' * b; If that truly is what you need there is no need for loops at all. If you still want to know how to do the loop, just for funsies, it isn't difficult. Rather than looping over your values, loop over an index: lat = -90:90; lon = 0:360; for ii = 1:length(lat) for jj = 1:length(lon) foo(ii,jj) = lat(ii) * lon(jj); end end Seriously though, there's no need to do that. Just go with the matrix multiplication that gives you the same result :|
Agreed. I'm too lazy to look under the hood but I've definitely wondered how it got shit done so fast.
Everything that can be done with `bsxfun` can be done with `repmat`. The former is a little easier to use when applicable though. 
And everything done with repmat is going to take longer to run, use more memory, and potentially be ahrder to read and maintain. repmat has uses, but replacing bsxfun is not one of them.
Personally i think bsxfun is harder to read and maintain, but you're probably right on those other issues.
Comments/suggestions/corrections welcome :)
Thanks! 
Definitely printed this out. Thanks, looks good!
Variable *geneation*
Use logical indexing. Assuming places with no data are 0 valued: y(y&gt;0) = 1; If there is some other definition of 'no data' (perhaps NaN) you'll need to add a second, similar item to change those places to be 0.
Yer some of the non data is NaN, how do I include that? How would I graph once including it, at the moment I am doing plot (timestamp, CDC) for the x and y values. 
Does this include NaN values? How would I plot with these included? At the moment I am doing &gt;&gt; plot (timestamp, CDC).
 y(isnan(y)) = 2; % = 2 to show where these are, you can make it what you want
how would I plot this? i tried doing the data thing you suggested above about it keeps saying "Undefined function or variable 'data'." I was thinking maybe using isfinite function but I am unsure how to use and plot.
Use isnan(y) instead of y &gt; 0. Use the same logical index for both x and y variables. Here's a simple example that should help, you'll have to extend it for your own situation. x = 1:10; y = x.^1.4; figure, plot(x,y) hold on bar(x(y&gt;=10), y(y&gt;=10)) Define and plot a curve. Then add a bar only to the spots that exceed some threshold. To do this, you find the places in y that meet your criteria and use those locations to logically index both your x and y data.
The only difficult part for me is keeping track of whether the vector used is row or column which tells the direction it will be expanded. After that it reads exactly the same as repmat would. My other gripe with repmat is it tends to get abused in more convoluted ways than are possible with bsxfun. I always know bsxfun is going to be a single operation/function result for each pair of inputs, either across two matrices or between a matrix and an expanded vector. But I'm not you. Both work and whatever fits your style is what you should use by all means. This is one of the rare cases where the performance difference is mild enough I don't feel the need to be militant about how wrong or right one approach is.
He was using data as a placeholder for whatever value you have defined as being your data and no data locations. You would need to define it first, ie- nodata is 0 valued, data is everything else (which would be be described as &gt; nodata rather than == nodata which is a poor example anyways)
Try using interp1 for linear interpolation like this: tIm=interp1(X,tempP,t,'linear'); Where X are the corresponding indices to the tempP values. Also the same for kTempKern.
&gt;which is a poor example anyways :( I was unsure of the syntax, if it would be y(y=data)=1; or y(y==data)=1; I just started using the logical indexing in the past 6 months. The past 4 years I've been doing find() first, then indexing. OP, /u/matuba is right, I was using data/nodata as place holders for what you wanted to put there. My understanding from your OP is that everything 1000 and above is good data, while those single digits are not. y(y&gt;999) = 1; y(y&lt;10) = 0; y(isnan(y)) = -1; plot(y); This will plot your data as 3 pseudo step functions, good data being valued 1, bad data valued 0, and NaNs as -1. If you wanted to perserve your original data in y, do something like z = zeros(size(y)); z(y&gt;999) = 1; z(isnan(y)) = -1; plot(z); Notice I didn't have the y(y&lt;10) = 0; line in there, you're already defining z to be zeros, and if there are only these three cases you need to account for, then you don't need to check for this case (y&lt;10).
Okay, your objection makes more sense. For what the OP is probably working on, I think your approach is better. From a mathematical perspective -3 Hz and 7 Hz are the same in this case due to sampling. If we plug the frequencies into 2\pi i/N k, then e^2\pi ^i/10* ^7 =e^7\pi ^i/5 =e^-3\pi ^i/5 . So we still have a "7 Hz" contribution, but it is equivalent to -3 Hz, 3 Hz, -7 Hz, -13 Hz, 17 Hz, etc., when sampled. This is a result of sampled signals being periodic in the frequency space. If we put in a 7 Hz signal A = 1*sin(2*pi*7*t); We will get exactly the same result as 3 Hz, -3 Hz, -13 Hz, etc. Mathematically, it makes sense, practically this is aliasing and we would still say 3 Hz noise. Which is why I concede that your interpretation is better practically. 
I never used repmat but instead would do things like `v(ones(N,1),:)` which does the same thing. The, I discovered `bsxfun` and never really looked back. I do sometimes still keep the original in comments for anyone (ie, me in a few months) who has no idea what I was doing at the time. It is helpful since I tend to forget my own innovations
It is a bit tricky to answer with no definition of what is and is not data. You got the point across though! Mostly :D This one nails it though.
Thanks, it has been fixed
95% of the time, when I put in the effort to eliminate or reduce loops, I get a speed increase. Then, there are those 5% of the time when I spend a day making this beautiful code to do it using a combination of logical indexing and built in tools like `intersect` with the index, etc. And, in the end, it is the same speed or slightly slower. UGH!
I used to when I was in u.grad. I would run matlab -nosplash -nodisplay and use Kate for my text editing.
I think so too. Sometimes even with comments I come back to these lines and I'm pretty sure they just work via magic. 
Done it. Got some pretty interesting results. I run the code I've posted 300 times in a row using tic/toc. Stupid unptimized original code: 28.6 seconds Totally vectorized code: 55.4 seconds interp1 (vectorized): 44.6 seconds So... interp1 uses 50% more time than my unoptimized loop.... Better than using the double but still pretty mysterious... Edit: I've tried putting interp1 inside the loop instead of outside and vectorized and I get 38 seconds of runtime. Better than 44.6 but still much worse than 28!
Thanks so much. This is wonderful and much appreciated.
That syntax won't work with multiple line plots in the same command. You have to set your color order. Why the syntax won't work I don't know, it's stupid, but this is helpful general knowledge because MATLAB's default color order is terrible (who thought neon yellow was a good color? Cyan? Awesome!). http://www.mathworks.com/matlabcentral/answers/19815-explicitly-specifying-line-colors-when-plotting-a-matrix
Every time. My research group uses Matlab on a remote supercomputing cluster, so everything is done in the terminal (vim for file editing).
The documentation does ;) Colors and fancy markers! And different line styles (solid, dashed, etc)
This is really helpful and a lot quicker than digging through a book or trying to guess at the name for help, thanks.
As someone who is having to learn matlab really quickly for a research position I am starting next week, I thank you!
Nice list. Here's a couple more functions that I use every day. The three most useful functions in MATLAB: doc &lt;fcn name&gt; % open the documentation page for a function docsearch &lt;search string&gt; %search the documentation web google.com General functions: edit &lt;text file name&gt; % opens a file in the MATLAB editor Debugging: dbstop if error % stops execution at the first run-time error that occurs outside a try/catch block. Flow control: break % terminate execution of a while or for loop 
Ah thanks for that, that's a great explanation to intuitively understand the meaning of the higher frequencies :)
Sometimes, but not usually. However, I have changed the editor to Sublime Text which I use for all my coding
Thanks! I use Python but am looking to learn MATLAB syntax so this is an AWESOME reference!
A HPC cluster I used to work on before they got the pct required this. I would test scripts to see if they'd run with nodisplay nosplash and nojvm. Otherwise I find the GUI pretty useful. 
You basically copied down the instructions, but it doesn't seem you understand the logical process. Do you actually know how linear bases work? Also, it's pretty amazing that you think anyone will be able to help you without even specifying what the `shrink` function does. 
Thank you for this! 
How I understand it is that we find the basis of Col A by figuring out the pivot column after row reducing and then get the pivot vectors from the original matrix these will be the basis 
I'm with you on that. Do you think doing arithmetic on the indexing variables in the vectorized code could have slowed things down? Maybe pre calculate t+a, etc? I'm grasping at straws here but I'd really like to know why this doesn't work. Can you let us know the size of kKern and t, and the output of any other scripts that aren't built in? Also, what version of matlab ? 32 or 64 bit? How much ram do you have? Do you max out and start using swap space or virtual memory?
Thanks :)
tIm and kTempKern are 256x256 in the "for" version and 256x256x55 in the vectorized version. Note that, if that matters, both p (size(p)=[331 55]) and kKern (size(kKern)=[256 55]) are in single precision, as imm. BTW, I ran the profiler on the vectorized code adding the line dummy = p(a+1); It turns out that this line took 19.0 seconds, while tIm = (t-a).*p(a+1)+(a+1-t).*p(a); took 49 seconds and kTempKern = (t2-a2).*kKern(a+1)+(1+a2-t2).*kKern(a); took 42 seconds. (considering that p is 30% larger than kKern and that tIm and kTempKern are about the same size this makes sense). Given that my indexing only takes 20 seconds and the lines doing two indexing plus some sums and multiplication take approximately twice the time I think that the indexing is the biggest culprit.
It depends on what you're doing. When writing and debugging, I use the GUI... but once I've gotten them written, to deploy several simultaneous programs, or even a long running one, I use the linux "screen" command along with the -nodesktop option. The biggest advantage comes when using matlab remotely; it cuts down on the delay quite a bit. With the 'screen' command, it also allows you to remove the window from your desktop so it can't be messed with if it needs to run for a day or two.
Today I learned... thanks! Never really tried what OP wants, and I would just trial-and-error it until I got it working.
I guess I'm spoiled. All of my large batch runs happen on a remote cluster. I spam it with jobs and walk away until I get emails saying they are done or have died in a fire and need to be resubmitted. That only happens once production and testing have been complete though. I don't really consider that as a normal use case like OP's where he is doing it constantly for all dev work, not just at the end for final processing runs.
I would like this for work, anybody willing to post a direct download link, work blocks media fire. Or email it to me?
Linux is the only way I know of. You could see how hard it would be to make your Windows 7 a kiosk. 
If you are running out of memory in matlab, see the [documentation on this issue](http://www.mathworks.com/help/matlab/matlab_prog/resolving-out-of-memory-errors.html). If you have done this, and it does not work. Try installing linux (there are even [low memory versions](http://www.damnsmalllinux.org)) and running matlab from the command window without a desktop: matlab -nodesktop -nosplash -r "script" where script.m is the name of your matlab script.
This one isn't Matlab's fault. That "t" option is [an old Microsoft misdesign](http://msdn.microsoft.com/en-us/library/yeby3zcb.aspx). Matlab is just passing it through.
Touché! Thanks for the link! I never would have believed this otherwise! I owe Mathworks an apology...for this one, anyway!
I mean, you can stop a lot of Windows features from starting in msconfig, but I'm not sure which ones you could safely stop. Linux is your best bet. If you want *hyper* light, maybe do Arch Linux with a barebones window manager.
Hmm, interesting both forms are of order n^3 my guess is the way that vectorized code is not optimized for array dimensions higher than 2. Since the execution time is substantially larger, I would go with your original code. Why are you indexing these multidimensional arrays like 1D arrays, i.e. kKern(a) instead of something like kKern(a,:) ? Converting from normal indexing to that weird subscript indexing takes computation time.
I don't get your doubt about my indexing. What is it strange about it? I thought that both ways were equal and they're not always both feasible. 
What is the format of the file that you are trying to import using READU? It looks like the code is importing data into matrices of complex numbers and storing it in a 3-D matrix. This behavior should be straightforward to reproduce if you can tell us the input format and desired output format.
Could you save some data to a .mat file and make it available? I'd like to play with this a bit. edit: e.g. enough data for us to play with the interpolation bottlenecks. 
I can do that on Monday. I'm skiing for two days (And I have everything in the office anyway)
Can't you just integrate x*u(x,t) numerically from x = -10 to 10 to find f(x,t)?
Actually, let me be more explicit. f(x,t) = quad(x*u(x,t),-10,x) + f(-10,t) This is not what you would plug into MATLAB, it's close, but this is a combination of pseudo-code and MATLAB functions that should do the trick if you correctly formatted it for MATLAB.
Submit a request to Mathworks
Does it mention any Java errors? Have you recently changed the way you display things in Windows? Are you using Win XP/7 or Win8? Which version of MATLAB do you use?
Delete your MATLAB root folder and try reinstalling. If that doesn't work call Technical Support. The phone number can be found here: http://www.mathworks.com/support/contact_us
vi *yourfile.ext* :%s/^ M//g &lt;-- for ^ M push both cntrl &amp; V at same time then cntrl &amp; M 
[subs](http://www.mathworks.com/help/symbolic/subs.html) should do what you want.
Not at a computer right now, so will respond again later but start with a program like wireshark (www.wireshark.org) to sniff the packets make sure they are going to the right IP Add and port.
Awesome, was looking for something like that. Cheers!
When i try things like that i get ??? Undefined function or method 'integral' for input arguments of type 'double'.
I am using Matlab R2013a, and it doesn't mention any Java errors. I use Windows 7 and I didn't change anything recently...
Ah sorry, I thought it could have been something I've seen in the past. Sorry not sure how you could sort it. :/ good luck. 
Have you restarted your computer? I've had Matlab on Windows crash so hard it took a full system restart to get it working again. 
Do you expect anything different from the profiler instead of tic/tocs? All of the other lines are the same, I just change the indexed sums with interp1 using identical indexes. It's true that interp1 is built in, but my code is already exploiting all of the matlab tricks to run calculations with built in functions. (Btw, it's not my first attempt at interpolation!) On Monday I'll post my code and some data, for those who want to try it
Tic/toc doesn't lie, I didn't read your post closely enough. My first reaction was that the built in for 1-d interp should beat any MATLAB based implementation, even one that uses lower level builtins. Seems I was wrong.
This isn't a useful post, but man do I not miss IDL. 
 f = @(x,t,x0)(quad( v*u(v,t) ,-10,x) + x0) That should do it. x0 is the value of f at x = -10 at sometime t. In other words x0 is the "initial" condition of ODE you're trying to solve.
Google it. Seriously. "MATLAB object tracking" Boom. Done. There is a metric shit ton of literature out there about it (quite a bit is even in the MATLAB documentation itself). So much actually that even into page 4 and 5 of the Google results for that topic you'll still be finding new and interesting webpages discussing it. It isn't often that is the case. Usually halfway done page one and you're hitting the pages that are just copy/pastes of the first few results.
Well... depends. What license do you have? Because for the most part no. Unless you got a maintenance license at which point just upgrade to 2014a.
can't run your code because too many things are undefined
% Set values % tolerence=1e-15; alpha=pi/6; position=zeros(13,2); %% Set known positions position(1,:)= [0 0]; position(2,:)= [-sqrt(2) sqrt(2)]; position(3,:)= position(2,:)+[0 2]; %% part1 - joint3 angle=[alpha; pi/300; pi*0.5;]; f3=[10;10]; loopcount=0; angle4=alpha+40*pi/180; angle67=angle4+20*pi/180; %for count=1:100 while(abs(f3)&gt;tolerence) f3=[4*cos(angle(2))+4*cos(angle(3))-5*cos(angle(1));4*sin(angle(2))+4*sin(angle(3))-2-5*sin(angle(1))]; f3dash=[-4*sin(angle(2)) -4*sin(angle(3));4*cos(angle(2)) 4*cos(angle(3))]; angle(2:3)=angle(2:3)-((f3dash\eye(size(f3dash)))*f3); %loopcount=loopcount+1 end %joint storage position(4,:)=position(2,:)+[4*cos(angle(2)) 4*sin(angle(2))]; position(5,:)=position(3,:)+[5*cos(angle(1)) 5*sin(angle(1))]; %% f5=[10 ;10]; angle2=[angle4; pi/3; pi*0.3]; for count=1:1000 %while((abs(f5(1)) &amp;&amp; (abs(f5(2)) ))&gt;tolerence) f5=[position(5,1)+5*cos(angle2(1))-10*cos(angle2(2))+(8/3)*cos(angle2(3));position(5,2)+5*sin(angle2(1))-10*sin(angle2(2))-(8/3)*sin(angle2(3))]; f5dash=[10*sin(angle2(2)) -(8/3)*sin(angle2(3));-10*cos(angle2(2)) -(8/3)*cos(angle2(3))]; angle2(2:3)=angle2(2:3)-((f5dash\eye(size(f5dash)))*f5); end position(6,:)=[10*cos(angle2(2)) 10*sin(angle2(2))]; position(7,:)= position(5,:)+[5*cos(angle2(1)) 5*sin(angle2(1))]; position(8,:)= position(7,:)+[(8/3)*cos(angle67) (8/3)*sin(angle67)]; angle68=angle2(3)-20*pi/180; angle89=angle68+40*pi/180; position(9,:)=position(7,:)+[-8*cos(angle68) 8*sin(angle68)]; position(10,:)=position(9,:)+[-(8/3)*cos(angle89) (8/3)*sin(angle89)]; %% part 3 -joint 10 f10=[10 10]; angle3=[pi*1;pi*11]; %for count=1:1000 while((abs(f10(1))&gt;100*tolerence) &amp;&amp; (((abs(f10(2)) ))&gt;100*tolerence)) f10=[position(9,1)-position(8,1)+(8/3)*cos(angle3(2))+9*cos(angle3(1));position(9,2)-position(8,2)+(8/3)*sin(angle3(2))-9*sin(angle3(1))]; f10dash=[-9*sin(angle3(1)) -(8/3)*sin(angle3(2));-9*cos(angle3(1)) (8/3)*cos(angle3(2))]; angle3=angle3-((f10dash\eye(size(f10dash)))*f10); % loopcount=loopcount+1 end %% positions position(11,:)=position(9,:)+[(8/3)*cos(angle3(2)) (8/3)*sin(angle3(2))]; %% part 4 -joint 11 f11=[10 10]; angle4=[pi*1;pi*1.1]; for count=1:1000 %while((abs(f11(1))&gt;100*tolerence) &amp;&amp; (((abs(f11(2)) ))&gt;100*tolerence)) f11=[position(11,1)-position(10,1)-(8/3)*cos(angle4(2))+2*cos(angle4(1));position(11,2)-position(10,2)+(8/3)*sin(angle4(2))+2*sin(angle4(1))] f11dash=[-2*sin(angle4(1)) (8/3)*sin(angle4(2));-2*cos(angle4(1)) (8/3)*cos(angle4(2))]; angle4=angle4-((f11dash\eye(size(f11dash)))*f11); end
Since you haven't posted what you've tried I'm only going to give you hints. To only accept 'n' numbers as determined by the user i would suggest prompting them for the desired number of inputs first, then you could make an if statement that repeats for values 1 to n. Inside the if statement you can prompt the user to select random numbers, then save these to an array. From there you can sort it, find max and min, or do anything else you may want. 
Okay thank you 
Wouldn't it be easier to accept a row vector of "n" inputs (technically only one input according to the function)? I don't want to write the code for OP, but an understanding of creating a function should make this trivial.
Nevermind I finished it all but thanks for the help
If your memory use is so significant that your PC can't run your script, it may be worth using Amazon EC2 and installing an instance of Matlab on it. Or seeing if you can get into MDCS On Demand.
Don't think this answers your question directly, but I wanted to make certain you were aware of Cody (http://www.mathworks.com/matlabcentral/cody/). Not exactly a tutorial but will get you up and rolling with MATLAB and ramps up at a very acceptable rate. I would suggest ignoring some of the "high scores" that people have achieved using Java backend or little tricks with casting variables, and focus on situations where you used a loop, and someone else found a way to do the same thing with a single command. I hope this helps!
Sorry for the late reply; I've been away all weekend. Alright, so it seems that READU reads in an amount of floating point number into an array (until said array is full). My current interpretation of that line is: rawDataSlice = fread(image, (2* dimX * dimY), 'single'); %where image is the reference to the file, 2 * dimX * dimY is the size of the file, and 'single' indicates the fact that I should be loading in single-precision floating point numbers. The problem with telling you the desired output is that I'm not even sure I know it myself. I have no idea what this version of complex is trying to do. Expression? They're just a bunch of floating point numbers! This is the only line I'm really stuck on. When it came up and I looked it up, I was hoping there might just be similar functionality in MatLab's complex function, but there's nothing of the sort... So I'm between a rock and a hard place. Currently, I'm trying to modify the IDL code so that it tells me what is in a slice and in the 3D-Matrix, but that might not lead me anywhere since it might still not be obvious what's being done when I call complex.
I've uploaded code and data if you want to play with it!
As far as I can tell it doesn't. But, there is hope (I think). You can write an FMA routine using the mex environment and I think if you use the [FMA4 intrinsic functions](http://msdn.microsoft.com/en-us/library/vstudio/gg445134%28v=vs.100%29.aspx) and specify the VC++ compiler for the mex environment you should have an FMA function you can call with bsxfun().
Make sure your data on the input is a MxN matrix. data_in = your_input_variables;% this is what you want to run PCA on [U, S, V]= svd(data_in, 'econ');% runs the it using single value %decomposition Eigenvectors = S*V';%all your eigenvectors Loadings = reshape(U, [rows, columns, data_points]);%to get the %actual images you'll need to reshape to the same size as your input %data was originally Scree = diag(S);%this is your scree plot 
So first you need to generate the distance between the two points, then you need to generate where on that line the object is ? 1. Draw distance from some strictly positive distribution 2. Draw distance between pint A and object from some distribution on 0 to the draw in step 1. 3. Distance between object and point B is now distance from step 1 minus distance from step 2 But what distributions would you like to use ?
Read your course notes. Read your textbook. Read MATLAB's documentation. These are fundamental programming concepts. If you are struggling with these questions you need to utilize the professor and TAs that you are paying money for, not Reddit. http://www.mathworks.com/help/matlab/ref/function.html http://www.mathworks.com/help/matlab/ref/sum.html http://www.mathworks.com/help/matlab/ref/mod.html Like I told you last week when you asked a similar question: try something, anything! Give us pseudocode, give us code that doesn't work and try to explain to us why you think it's not working. Nobody here wants to do your homework for you.
This question would be much easier to answer if you gave us the naming syntax. Depending on the naming scheme, I don't think using dir() with wildcards is going to give you what you want. The best way would likely be running regexp() on the cell array of strings returned by dir() and filtering that way.
for this question i really don't know how the heck to start this since i don't know what to do when i need to do something like just "input a vector" 
Did you even read the links I gave you? The first example in the function documentation: &gt; Define a function in a file named average.m that accepts an input vector, calculates the average of the values, and returns a single result. It even has error checking. If you want to prompt the user, then use [input\(\)](http://www.mathworks.com/help/matlab/ref/input.html) instead of an explicit input to the function call. To reiterate: You need to work with your instructors. This is (insert programming language here) day 1 syntax. If you don't know how to do this task, even in pseudocode, I can guarantee you will not pass this course.
Some people don't want to do their own work.
I would split the filenames into two categories and then read all the data in after. Since you only have one specific filter, dump lab 1's filenames into one list, and everything else into a separate list. As a quick example: testarray = {'1-200_wee','asdf_123','1-200_wee2','fdas_123'}; test = regexp(testarray,'1-200','Start'); If you substitute your dir() returned names for testarray, this should get you most of the way there. Unfortunately, it returns a cell array of strings, which is clunky. However, you can run: test2 = cellfun(@isempty,test); To dump this into an array of logicals that you can use for [logical indexing](http://blogs.mathworks.com/steve/2008/01/28/logical-indexing/) of your dir() names output to put the files into the correct list and read them in. EDIT: You'll probably need to do this to your dir() output to get the names: temp = dir(); namelist = {temp.name};
Look at my edit as well, I forgot that dir() outputs a data structure. To make things easier on yourself, make sure to get rid of dir() matches to folders and files you don't want. Do this either with file management, good dir() filter, or parse through the output structure and get rid of anything you don't want. Also keep in mind that you can index fields in a structure numerically, which will help you keep your code simple. Say I have 5 files in my directory. If file 3 matches my filter spec I can pass mydiroutput(3).name (concatenate with the path name if you're not working in MATLAB's path) to my data loading function and everything will work fine.
Will you do mine for me?
Yes. Fax me a copy.
/r/domyhomeworkforme
If you know the coordinates of everything for each surface, you can just work with that rather than finding a curve fit for it. Look into using interp2() to fill in any gaps between the two (I'll probably have to explain that in more detail later, but it will be a fun learning exercise for you). There is no need to send me beer, but thanks for the offer. Here is a commented version of the code I posted above: close all [x, y] = meshgrid(-2:.1:2); % create a 2-d coordinate space z = hypot(x, y); % find the radial distance from 0,0 for each point z(z&lt;=2) = 1; % anything in the circle of radius 2 is set to 1 z(z&gt;1) = 0; % other points are set to 0, this creates our pedestal/cylinder/plateua origTaper = z; % renamed the above just for clarity figure, surf(x, y, origTaper), axis([-2 2 -2 2 0 2]); % show our 'true' unworn object wear = rand(41, 41)*.1; % make some noise mask to simulate wear on the surface wear(find(z == 0)) = 0; % only simulate wear on the face/top of the object wornTaper = origTaper - wear; % remove our wear pattern to give the worn surface figure, surf(x, y, wornTaper), axis([-2 2 -2 2 0 2]); % show worn surface deviation = origTaper - wornTaper; % find residual between our oiriginal and 'worn' object figure, surf(x, y, deviation), axis([-2 2 -2 2 0 2]); % show it! (this is really just a plot of the wear variable from above)
interp2 will be your meal ticket, not interp3. From the looks of your example image above (which BETTER be true data, not some shite you made up :p otherwise I'm spinning my wheels here), you have a 2-d grid on X/Y and some elevation Z. The difference at Z for each point will give your wear pattern. In a perfect world you'd have this data for every X/Y point on both items and could just do a simple subtraction. Since you've beat your head against fitting to a curve, I'm going to assume your data is incomplete and you need to fill in the holes. The simplest solution is going to be taking your incomplete set of data, throw it into interp2 as X, Y, and V (your Z), and giving it a complete, evenly spaced grid for Xq and Yq. That will give you a reasonable approximation of your entire surface across a wider range of points. Repeat for the other datatset. Now you have a nice, matched set of sample points for both surfaces. Then, once you wrap your head around the above example you'll be in business. No all nighters, just calm rational thinking. Start simple (interpolation), if that fails, go full bore (curve fitting). This will save your ass. Every. Single. Time.
Be careful, in Matlab a function input argument has a specific meaning and none of the other comments I see here seem to recognize that. Function input arguments are passed when you call the function. What your teacher seems to want is a function that works like this: sortedValueVector=sortTheseBitches(5,4,7,8,3) To get a sorted list, you need to allow users to submit a varargin, a variable length cell array of arguments. function sortedValueVector = sortTheseBitches(varargin)
Yep, I code on the GUI but run large jobs using -nodesktop
Best I can do is give you another example. I'm not sure how to put it into words. clear all close all x = [-1.2 -.8 -.3 0 .1 .7 1.5]; % say my space is defined from -1.5 to 1.5 y = [-1 -.6 -.2 -.1 .2 .4 1.3]; % it is unevenly sampled at these x/y coords (and their combinations) z = sin(meshgrid(x,y)); % make some fake surface at these points surf(x,y,z) % visualize poorly sampled surface, note the grid pattern [x1, y1] = meshgrid(-1.5:.1:1.5); % define my evenly sampled space z1 = interp2(x,y,z,x1,y1); % use interp2 to get an approximation of my data at these points figure, surf(x1,y1,z1) % look at new sampled space z2 = interp2(x,y,z,x1,y1,'spline'); % repeat but using spline interpolation rather than linear figure, surf(x1,y1,z2) % holy shit! curvy! like a sin! Now you have to be careful and keep in mind you only have a rough guess at your surface. interp2 is linear by default. This may be the best method for your data, I don't know but hopefully you do! Using spline is significantly better for the example I gave. That may not always be true (or even valid depending on what you use it for).
If you have done that, then typing 'edit something.m' should open Sublime. However, clicking the line number in an error message always opens the internal editor
same here
Your teacher is asking you to create a function with a variable number of input arguments. I doubt that's what she meant as that's significantly more complicated then the rest of the tasks in the assignment. Also the first and last bulletin partly say the same thing which makes me think she/he didn't proof read the assignment. Anyway, here's a function and some test script that does what you want. http://pastebin.com/embed_js.php?i=Rzpxa1iD The text after the line of %%%%%%%%%% wouldn't be included in the function file. You can just copy and paste that into the command window to see how it works.
I found that the matlab pca function is extremely easy and robust whatever the input was. Can you give us a specific example of what's not working with your program?
Not in base MATLAB. If you have the image processing toolbox imcontrast might do what you want, but I haven't had the toolbox in a while so I can't say for sure. Otherwise you'll just have to make it yourself, it shouldn't take much to implement. 
Okay thankyou, I'll have a look, Im brand new to MATLAB 
No loop needed. The question is asking to find whether the sum of the inputs is odd or even, so the input to mod() is two scalars. Even if he had to find even/odd for the entire vector, mod() already works with a vector and scalar input so running it through a loop adds unnecessary computation time. If you absolutely had to use a loop you'd want to use length() or size() to control the number of iterations and not some arbitrary number. 
Bizarre. Shot in the dark: what happens if you don't use eval()? Try dumping everything into a data structure and outputting from there. You can use dynamic field names for structures like this: fulloutput.(['week' num2str(countw)]) = []; Which should get rid of your need for eval().
You need to break the forcing function out so that it is two matrices, one with only numbers, and a second matrix that you multiply by made of only the f values. You can then solve for that f matrix. 
Why are you doing what you described? You already have the code to combine days, why not just use that when you're doing your data analysis?
You need to rearrange the equations from the form you have it written into the form Ax=b so the unknowns are all in x and A and b are constants. Write the six equations out on paper and get all the unknowns on the left hand side. Then you'll see the proper form more clearly. 
 quiver3(X,Y,Z,dx./r,dy./r,dz./r,'ShowArrowHead','off') If you're ever curious about figure/axes/plot/etc. properties that aren't explicitly in the documentation, call them with an output (e.g. myplot = plot(x,y)) and then get(myplot) to see what things can be changed.
No problem! I believe the way you showed me cleaned it up enough. Honestly I do not believe it is to important to my professor but more just me wanting to do it that way. Thanks again!
Are you trying to plot contour lines of the magnetic field or are you trying to plot test particle trajectories (these are what is plotted by [this](http://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/VFPt_cylindrical_magnet_thumb.svg/250px-VFPt_cylindrical_magnet_thumb.svg.png) type of diagram).
Have you tried to run it yet? We're not here to translate codes..
Googling "image to ascii github" shows versions in php, js, ruby and python, all open source. Might be a better option. 
&gt;The format of the above sucks a lot Put 4 spaces in front of each line like this.
I'm surprised MATLAB allows "input" to be used as a variable name..
cheers
Thanks for the...input
With this method you know that the vector is going to be 100 elements in length. So you might as well use a for loop: vector = NaN(1,100); for i=1:length(vector); userinput = input('input another number'); vector(i) = userinput; end This way you take advantage of memory preallocation (to be honest, things like end+1 in your index give me the heebiejiebies.) I am however working on the assumption that your user isn't going to be a jerk and enters non-number values...
The length aspect is very true, especially what little is given by OP in what may be a larger context of "unknown length" in their script. You could shorten yours up one line by vector = input(); and I almost did that, but what if your user is indeed a jerk ;) As for the end+1, I normally opt for something like vector = [vector, newnum];
You can overwrite any valid variable name, but it may affect performance (I.e. Runtime)
No, I mean any function. For example, you could write mean = 4; mean ans = 4 As I'm sure you know, mean() is a function. I think if you do it in the editor, it will give you a warning but I don't have MATLAB in front of me atm to check. It is bad practice and should be avoided, but it's technically possible.
Hunh. I wouldn't think it would be *that* easy. I figure MATLAB would scream and kick and that you would have to go above and beyond just a simple mean=4 to make mean() into a variable and not the function. Then again I can't remember the last time I ran into an instance where I was using a (unknown to me) function's name as that of a variable.
Yea. I've often wondered when using obscure acronyms or abbreviations as variable names on machines with unfamiliar toolboxes. So if in doubt, I usually just try it first in the console before defining my variable in a script/function. It is nice that it doesn't scream too hard since I've had that issue before with other peoples' codes. They define variables either poorly or just with a different set of toolboxes and end up overwriting function names. If you just need to use their code real quick as a function, then it's nice that the whole thing doesn't break. If it's a script, then it can be a pain in the ass ;)
Thanks, will see what happens with this. With the other method I created a new variable using eval() and then saved that variable under that name. I know I could use save(['week' num2str(countw)],fulloutput.(['week' num2str(countw)])) To have week1.mat and week2.mat in my folder but it would restrict me in that I could not load both files at the same time (as fulloutput from week2.mat would override the fulloutput in the workspace from week1.mat) Can you think of a way to get around this without using eval()? 
&gt; vector = [vector, newnum] Please, please stop doing that. Please. I'm asking nicely. At the very least keep that shit in the privacy of your own code :p Adding an item to the end of a vector is an O(1) problem, stop making it O(n) :( Your run times will thank you. 
Good point. I think I'll adopt that practice, thanks :)
First: function [out1, out2, ...] = funname(in1, in2, ...) You need that second close parenthesis; same everywhere you call it. LHS uses [], RHS uses (). Not sure if that's what's causing your troubles. Once you pass variables between scripts/functions to a function, the working space only recognizes the variables that are passed in and all declared/calculated in the current function. If you need variables that are inside your function outside of it, why not add them as outputs to your function? You could also make global variables, but that's unfamiliar territory to me.
 This is not a 'do my homework' board.
I was going to state so, but I felt a bit harsh. Glad someone else sees this post for what it is.. *Edit: [Another do-my-hw post?](http://www.reddit.com/r/matlab/comments/2248px/finite_element_patch_test/) -- [lol, pretty much](http://www.reddit.com/r/matlab/comments/2248px/finite_element_patch_test/cgjkni1). Also, sorry for my assumption, OP.
You *may* find someone who works in your area, but I myself don't know anything about your problem just from looking at a picture - let alone what math background is required to set up an algorithm. We don't do HW here; we're happy to help with syntax/debugging/efficient-izing code. At least make an attempt at coding your problem and come back with a code-based question, not I-haven't-been-to-lecture-in-a-month-how-do-I-do-this question.
a,b,c are only defined inside ugly. Nothing else is going to know they exist or what they contain. If you need a,b,c somewhere else, you need to modify ugly() to return them in addition to output1/2/3 that it already returns. I'd suggest reading up on variable scope. It does not have to be a MATLAB specific tutorial, it is a broadly applicable programming concept.
If you just want to interpolate along the data you have, use interp1(). Since your data is exponential a spline interpolation will work best. If you are hell bent on finding an actual equation use fit() (or for a nicer experience cftool()). Edit: I take that back, spline is indeed awful for your stuff. So is interp1() in general. Use cftool() and fit it to an exponential. Edit2: I'm bored and did it for you. 27.76e^-0.12x matches fairly well.
I'm not sure where you both got the idea that this was homework but of course that is a opinion I won't stop you from having.
Are you using the [audioplayer()](http://www.mathworks.com/help/matlab/ref/audioplayer.html) function? Looks like it has some pause functionality. Also look into the pause command.
Thanks! I'm using an Arduino Nano. You could use any microcontroller board with the ability to sample analog and print it to the serial port.
Doing vec = [vec newVal] is copying the entirety of vec to a new temporary intermediate variable, putting the new value on the end, then copying the entire thing back into vec. That is horribly inefficient! That's like making an entirely new shopping list every time you want to add something, erasing the original, then rewriting it based on the new update list! The proper way is to preallocate the vector, keep track of what item you should update next, and do it by a specific index. Using the end+1 trick is just as bad as the [vec newNum] approach (the internal workings of what happens are the same for each). Consider the following benchmarked cases: preallocating and inserting a number by index, adding a number to the end by copying everything (your way), and adding a number using end+1. All on a list that ends up being the same number of values: n = 10000 tic myVec = zeros(1,n); for ii = 1:n myVec(ii) = ii; end toc tic myVec2 = []; for ii = 1:n myVec2 = [myVec2 ii]; end toc tic myVec3 = []; for ii = 1:n myVec3(end+1) = ii; end toc For 10k items it takes 0.0017 seconds to do it properly (preallocation). The other two methods take 0.042 and 0.038 seconds. Really not a huge performance hit. We're still talking the order of milliseconds, but it still takes 22x as long. Increasing to 100k items it ends up being 0.005 vs 7.25. That's a 1450x increase! Holy shit cans batman! Using cat for 10k and 100k items is even worse! It has run times of 0.068 and 6.35 seconds respectively. Slightly worse for smaller sets, slightly better for larger. Now you may not always be able to exactly preallocate what you need. I get that. But the overhead of overallocating then truncating is really negligible. Say we estimate 175k items, only use 100k, then lop off the rest: n = 100000 tic myVec = zeros(1,175000); for ii = 1:n myVec(ii) = ii; end myVec(myVec == 0) = []; toc Run time of 0.00874 seconds, compared to 0.005 when we know exactly what to preallocate. It may take 1.75x as long to do that way, but it sure beats the shit out of the 1,450x increase we saw before! TL;DR - STOP COPYING SHIT NEEDLESSLY. Tiny code choices can and will bite you in the ass! It may not seem like much, just 6-7 seconds, but it adds up fast. You can get away with it for toy problems, but for any significantly sized dataset that bad habit will be the end of you.
As for the proper solution to your situation: n = 100; % rows in your data m = 100; % cols in your data nfiles = 30; % number of files data = zeros(n,m,nfiles); % give every data point to be loaded a place to live for ii = 1:nfiles newdata = load(fileNames(ii)); % or whatever equivalent you have for acquiring the 2d data data(:,:,ii) = newdata; end
the patch test is probably the most common first test for any element used in a finite element code. essentially you're checking that the nodes (mostly the node in the center) given the skewed shape of the elements, result in consistent strains with the analytical solution. you should know how to find the strain based on mechanics. the book can help you write the stiffness matrix for this system.
If I find out you're still doing v = [v n] I will find a way to come slap you with a copy of [TAoCP](http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming) The outline you gave sounds reasonable enough to me. Give it a whirl.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**The Art of Computer Programming**](http://en.wikipedia.org/wiki/The%20Art%20of%20Computer%20Programming): [](#sfw) --- &gt; &gt;___The Art of Computer Programming___ (sometimes known by its initials __TAOCP__) is a comprehensive [monograph](http://en.wikipedia.org/wiki/Monograph) written by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth) that covers many kinds of [programming](http://en.wikipedia.org/wiki/Computer_programming) [algorithms](http://en.wikipedia.org/wiki/Algorithm) and [their analysis](http://en.wikipedia.org/wiki/Analysis_of_algorithms). &gt;Knuth began the project, originally conceived as a single book with twelve chapters, in 1962. The first three of what was then expected to be a seven-volume set were published in 1968, 1969, and 1973. The first installment of Volume 4 (a paperback [fascicle](http://en.wikipedia.org/wiki/Fascicle_(book\))) was published in 2005. The hardback volume 4A was published in 2011. Additional fascicle installments are planned for release approximately biannually. &gt;==== &gt;[**Image**](http://i.imgur.com/lXMhTI2.jpg) [^(i)](http://en.wikipedia.org/wiki/File:ArtOfComputerProgramming.jpg) --- ^Interesting: [^Donald ^Knuth](http://en.wikipedia.org/wiki/Donald_Knuth) ^| [^Permutation](http://en.wikipedia.org/wiki/Permutation) ^| [^Big ^O ^notation](http://en.wikipedia.org/wiki/Big_O_notation) ^| [^Computer ^program](http://en.wikipedia.org/wiki/Computer_program) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgjilma) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgjilma)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Will do. Please don't beat me, masstah.
&gt; Spare the rod, spoil the run time... Annnnddd... ya lost me. Quick Google-fu (always my first go-to) gives bible reference with "spoil the child". Is.. is this a new function?
Lol, I'm in that class! Did you get all of the materials he passed out?
Hah, it's a generic proverb. There is a similar variation in the Bible. basically if you don't discipline your kid, they turn into spoiled obnoxious little shits. Likewise, if you don't discipline your devs they start writing shit code
Ahh - rod as in whippin' stick? And let's be clear, I'm not **YOUR** dev.. just a lowly grad student, who may benefit from better coding practices :)
It still applies!
1. since its basically a large dataset it gives an output something like this and the columns continues to 700s and more, Columns 9 through 16 8.0000 2.0000 -5.0000 9.0000 -3.0000 -5.0000 1.0000 -1.0000 0.0396 0.0564 0.0283 0.0447 0.0293 0.0914 0.3163 0.7769 0.6 which is totally wrong ... 2) yea its only the data. no headers. i did try this test = fscanf(fp,'%g %g') after opening the file first but it gave me null. so not sure much
Have you assigned a file identifier for your file?
For the data type, I believe you need to have as many as you do columns. I think you can skip one by using '%f %*f %f' would skip the 2nd column. If you've got more than 2 columns, you'll need more data types in the fscanf call
The fact that they are exponential should not matter. I was able to read it in using fscanf(). FILE = fopen('test.txt','r'); form = '%f %f'; size = [2 inf]; X = fscanf(FILE,form,size); X = X'; fclose(FILE); That worked for me. If it doesn't work for you, there may be an issue with how the .txt is formatted.
But now you are working on the assumption that you know the absolute maximum of your vector to be. What would you do if your user wants to add a 100001th value? I know memory preallocation is a lot faster (which you have proven quite nicely I might add). But wouldn't preallocating in chunks make your code more complicated than nessesary? (especially for someone like OP who just wants to learn a bit about vectors and indexing?)
interesting. i tried this. entered one command after another on matlab main ide. it just gave the answer X = []
maybe the problem is that there are 3 spaces before each number..
yea there are 3 spaces before each number .. i think that is causing the problem..
Well, be sure to make the name of the file the same as yours. If that doesn't work, the problem is the text file. If you downloaded it from somewhere try just creating a new file in textedit/notepad depending on your OS.
That could be it.
got it. I think my problem was that I wasnt defining my outputs before calling the function. Thank you for your help.
Do you have the stats toolbox? This looks like a job for nlinfit (or its cousin fitnlm): %% Original Data d=[2 10 12 18 118.11]'; I=[21.7 8.9 7 2 .05]'; %% Model f = @(beta,x)beta(1)./(x.^2); %% nonlinear fit beta = nlinfit(d, I, f, 1); %% show the fit and original dfit = linspace(min(d), max(d), 100)'; Ifit = beta./(dfit.^2); plot(d,I,dfit,Ifit) legend('Original', 'Fit') 
Is a sharp wave ripple similar to what is explained [here](http://neuralcircuits.uwm.edu/sharp-wave-ripples/)? You need to specify more about the signal you're trying to detect if you want help. Do these sharp wave ripples increase in both frequency and magnitude? How much do they vary from the regular background noise, and from other instances of these ripples? Depending on what you're trying to do you might have a very easy problem or a very difficult one. Details.
As with all programming or technical questions, you'll get no response if you ask to ask. You need to simply state your actual question, providing examples, data, and / or code, as relevant. 
Function file code : function [s] = sine_series(x,n,k) for n = input if n &gt; 0; continue elseif n == 0; disp('ERROR') end end s = (-1)^(k-1)*(x.^(2*k-1))/(factorial(2*k-1)); end Output script code prompt = 'Please enter values for x and n' x = input('x = ') y = input('y = ') for k = 1:n [s] = sine_series(x,n,k); end disp(s); 
Also I apologize for the code not being in line, I just copied and pasted it from matlab
Take a moment and edit: 4 spaces makes code look pretty
Thanks for the response--if I put all of the form parameters into the 'params' variable I get the following: Error using urlreadwrite (line 56) Could not POST to URL. Error in urlread (line 36) [s,status] = urlreadwrite(mfilename,catchErrors,url,varargin{:}); Any ideas?
Can you post any of your code, or perhaps the lines about where you think it is freezing up at (if you know where)? [Is this helpful in the mean time?](https://www.mathworks.com/matlabcentral/newsreader/view_thread/248917)
Thanks for the link; it wasn't exactly what I was looking for but it might help. I will look through the code and try to identify where it is hanging up.
Well, it sounds like you're trying to solve the halting problem, which is impossible. If you can provide more information about what causes the freezing, then someone might be able to help more.
I don't think urlreadwrite() is a function. I think you have to go with either urlread() or urlwrite(). http://www.mathworks.com/help/matlab/internet-file-access.html
What is it doing when it "freezes?" As others are guessing, it sounds like the process is stuck in an infinite loop. Pugnare's suggestion is a good one, basically establishing a timeout for the simulation. If it doesn't find an answer within a certain number of iterations, exit.
Ok, since you seem to know what you're talking about, can you help me with my problem? I'm trying to write a function that takes two lists of strings (A and B) and have it figure out if there is a list of strings from A and a list of strings from B such that when all the elements in each list are concatenated the string of A elements is the same as the string of B elements. Can you tell me how to do that?
I can't, but I bet someone with a CS degree would have some advice. Do you have any a priori information about the strings, or could they be basically anything?
Use a descriptive title. See this [stack overflow][2] question for details. Also, use four spaces with the code: function [s] = sine_series(x, n, k) for n = input if n &gt; 0; .... [2]:http://meta.stackoverflow.com/questions/10647/how-do-i-write-a-good-title
I was joking. That problem is also undecidable. 
Actually, what is impossible is to write such a program that would work on any program, because you can easily derive a counterexample. That doesn't mean it's completely impossible for a given program to decide what inputs will or won't make it halt. Like, if I gave you a program that infinite looped if the input was 4 and otherwise immediately exited, you know very well what inputs do and don't make the program halt.
not really sure if I understand you correctly but isosurface may be able to do this
Ha. I kind of figured, wasn't sure though.
Good point. I figured since we had no further information about OP's program, it was fair to call it the halting problem, since it could be anything.
I'm going to need an MSPaint diagram of this one...
You can specify your variable name when using [load\(\)](http://www.mathworks.com/help/matlab/ref/load.html). It may add another layer in the indexing, which is annoying, but it's simple enough to work with. Alternatively: http://www.mathworks.com/help/matlab/import_export/save-structure-fields-as-separate-variables.html 
This should get you going, I made the angle 3**pi/2 to show how this behaves: N=50; M=50; [th,r] = meshgrid(linspace(0,3*pi/2,N),linspace(2,10,M)); [X,Y] = pol2cart(th,r); DATA=besselj(0.5,r); %surf(X,Y,DATA,'LineStyle','None') surf(X,Y,DATA)
So, you may have lost me in your description, but what ultimately are you trying to do with your 5 different ellipsoids? &gt;So basically I am looking for a code that will help me do either of the following: -find the circumference of an ellipse - Find the equidistant coordinates along the circumference of an ellipsoid, OR any particular distance I chose. Nevermind, I am an idiot. Could you maybe provide a drawing of what you want? Also, simple Google-fu resulted in the (ellipsoid()](http://www.mathworks.com/help/matlab/ref/ellipsoid.html) function. I know you're trying to minimize your calculations, but this may provide a place to start. Also, couldn't you just construct an 8th of the shape, not even a quarter?
I saw that, but then I wasn't sure how I would modify it to fit my purposes. Basically exactly what is in that imagine, only the areas are square, and not rectangular. It means the distance of the equator lines along the meridian is not constant like it is on that drawing. Like the [prolate spheriod here] (http://www.web-formulas.com/displayImage.aspx?imageid=480).
There are two parts here. Part one: An encoder works by generating a pulse after it has moved a set distance. For instance a simple binary rotary encoder might generate a pulse once per rotation, or every 180 degrees, or every 90 degrees, etc... Or a linear encoder might generate a pulse every mm, or every half mm, etc. This will be published in the data sheet. Now to make things more complicated, since a simple binary encoder cannot determine direction, some encoders are encoded. They use multiple channels, and you can determine direction by comparing the two output signals. There are also absolute position encoders that encode their absolute position across multiple channels. This is a good read on them: http://en.m.wikipedia.org/wiki/Rotary_encoder So your first task is to figure out what you are working with and determine how to read your signal in terms of some regular event (such as the shaft moved 45*). Part 2: With this info now you can turn that series of pulses into velocity measurements. I'm going to assume a single channel, relative binary encoder here that produces a pulse every rotation.... In this situation you have a signal with a rising edge every rotation. So to concert this into angular velocity, there are two approaches. The first is to measure the time between pulses. You know that each pulse is 360*, so you can compute deg/s...Which then can be transformed into a distance using the circumference of the drive wheel and any gearing involved. This approach is not ideal though. Timing jitter can introduce a large amount of noise, especially with high pulse rates. You can decrease this with an averaging filter, or by dividing the signal into discrete time steps and counting the number of pulses contained within. So if you count 5 pulses in a one second window, that would be 5*. This approach also had the advantage of automatically handling the condition where the shaft is stopped. Zero counts means no motion. There are a number of other arguments for it if you are interested, but I'll just leave it at that. So just pick your time window short enough to give you the resolution you need but long enough that you get (on average) enough pulses in a single window to be significant.
&gt;How much ram? As much as possible. &gt;How fast should be my cpu? As fast as possible.
Interesting problem. Can you post the code and perhaps either sample data or code to generate the data you're trying to fit?
Two common reasons for this behaviour - you've written a script rather than a function, and somehow your first run is interfering with the second. Easiest solution is to wrap your code with a function to isolate the runs - you're using the random number generator somewhere and it depends on the seed value. If this is the case, you could verify it by reseeding the RNG and seeing if your result is different. If so, you will have to work out how best to interpret the results based on your specific work
I'm not aware of any MATLAB functions that will do this. You might find [this blog](http://blogs.mathworks.com/loren/2008/09/08/finding-patterns-in-arrays/) useful in getting started.
It looks like it estimates, essentially, the best fitting linear model that is autoregressive (based on past values). The AR part means there is a correlation in the mean state over n-1 time steps. If it was an MA process, there would be correlation in the error, which is estimable thru the parcorr function. (Sorry for the brevity, writing on a phone.) (
There is no need to modify ode45. It can handle this kind of problem. You will, however, need to write your own function to represent the differential equations that ode45 will solve. See the examples 1 2 and 3 in the documentation here: http://www.mathworks.com/help/matlab/ref/ode45.html 
I think you need to sit down and really work through anonymous functions properly before you try and use them everywhere in your code. Are you aware that CessnaCoupledVariables() takes in an argument X but the values assigned to that variable are never actually used by your code? In W and P the X that is being referred to is the argument to that anonymous function, which is assigned when you run W() and P(). And why are you even creating anonymous functions that just pass their argument on to the original function? There is no difference* between NLC= @(X)CessnaNLConstraints(X); and NLC = @CessnaNLConstraints Apologies if I misunderstand - much of your code is missing - but it looks like you don't really understand anonymous functions at all *well there is a difference, the first case will bind the existing workspace variables to that anonymous function, but if this makes a difference to your code then it is written in a very unsafe way. If your code is written in a decent fashion, all that the first case will do is run more slowly
 A = [1,2,3,1,2,3]; B = [1,2]; matches = true(size(A)); A_shift = A; for i = 1:numel(B) matches = matches &amp; A_shift (A_shift == B(i)); A_shift = [NaN, A_shift]; end num_repeats = sum(A2) I think I'm a little bit off as you can only be when its 2am and you've not done MATLAB in a long while, but something like the above should work - hopefully you can see what I'm getting at, and if not I'll have another look tomorrow evening!
Do you explicitly need it to be just two numbers, one followed by the other? Do you need to check higher dimensions than a vector? Will going through a matrix row by row or column by column due? Example: find B in A: A = [ 1 4 8 9 7 4 5 1 2 8 5 9 7 9 2] B = [ 9 7] A1 = A==B(1); A2 = A==B(2); D = A1(1:end-1)+A2(2:end); inds = 1:length(A); Index_of_sequnce_instances = inds(D==2); Last variable should contain the starting index of A for the start of each sequence found. The code can of course be extended for longer sequences but might need more care (using orders of magnitude for separation or something). I'm on my phone, hope I didn't mess that up
Yes it will always be two numbers. That's perfect thanks!
That makes a lot of sense thanks a ton!
Thanks! That was very helpful!
I haven't measured the performance but string routines will do exactly what you are looking for and what I wrote here, namely just: strfind(A,B)
strfind(A,B) where B = [1 2]
No problem. Except I messed up a little. I corrected it just now. The expansion I wrote and the strfind work perfectly :)
Thanks!
Thank you. With a bit of digging how to pass a matrix to the function. Can ode45 return both y and y'?
Yes, they will be different entries in the single dynamic variable array ie. instead of y and y' it's y(1) and y(2)
If you want to be really picky about your formatting, don't use MatLab. MatLab is NOT documentation software. Pasting figures into Word and writing things up on your own is 10x better than what you can do with MatLab. If you want 100x better, look into LaTeX.
Thanks for the tip. I keep hearing good things about this program, so I guess I better give it a shot. 
Yeah, sorry about that. FYI:This is a thermodynamic combustion reaction problem. After typing up my "explanation" I realized that I could probably omit the ranges of 0.2 to 1.0 (equivalence ratios). Let me show you what I got so far: function x = enth1(T) hO2 = 1.507*(T-298) - 33.54*(sqrt(T)-sqrt(298)) + 111.1*log(T/298); hN2 = 1.450*(T-298) - 287.9*log(T/298) + (5.35e4)*((1/298)-(1/T)); hCO2 = 1.540*(T-298) - 245.1*log(T/298) + (4.13e4)*((1/298)-(1/T)); hH2O = 4.613*(T-298) - 206.6*(sqrt(T)-sqrt(298)) + 967.5*log(T/298); HR=-249400; HP1= -6595306+11*(hH2O)+10*(hCO2)+62.00*(hO2)+294.1*(hN2); HP2= -6595306+11*(hH2O)+10*(hCO2)+23.25*(hO2)+145.7*(hN2); HP3= -6595306+11*(hH2O)+10*(hCO2)+10.33*(hO2)+97.13*(hN2); HP4= -6595306+11*(hH2O)+10*(hCO2)+3.875*(hO2)+72.85*(hN2); HP5= -6595306+11*(hH2O)+10*(hCO2)+0.000*(hO2)+58.28*(hN2); (These 5 HP equations are at 0.2, 0.4, 0.6, 0.8, 1.0, respectively.) HR-HP(1-5) **must** equal 0. This means I have to find which T (temperature in kelvin) would make this true. Hope that helps clear it up. I'll post a written calculation shortly.
Is this an Matlab exercise (where you want to have a working bisection function). Or do you just want the results T. If the latter, Matlab has a beautiful function called fzero that finds x in the case f(x)=0. To use this function you need to define your function f(x). Luckily you already did that! I made some slight modifications since these are actually 5 problems you want to solve (HR-HP1 = 0 HR-HP2=0 etc). : function x = enth1(T) hO2 = 1.507.*(T-298) - 33.54.*(sqrt(T)-sqrt(298)) + 111.1.*log(T/298); hN2 = 1.450.*(T-298) - 287.9.*log(T/298) + (5.35e4).*((1/298)-(1./T)); hCO2 = 1.540.*(T-298) - 245.1.*log(T/298) + (4.13e4).*((1/298)-(1./T)); hH2O = 4.613.*(T-298) - 206.6.*(sqrt(T)-sqrt(298)) + 967.5.*log(T/298); HR=-249400; % Matlab can only solve 1 at the time, comment/uncomment the desired % output. HP= -6595306+11.*(hH2O)+10.*(hCO2)+62.00.*(hO2)+294.1.*(hN2); % HP= -6595306+11.*(hH2O)+10.*(hCO2)+23.25.*(hO2)+145.7.*(hN2); % HP= -6595306+11.*(hH2O)+10.*(hCO2)+10.33.*(hO2)+97.13.*(hN2); % HP= -6595306+11.*(hH2O)+10.*(hCO2)+3.875.*(hO2)+72.85.*(hN2); % HP= -6595306+11.*(hH2O)+10.*(hCO2)+0.000.*(hO2)+58.28.*(hN2); %%(These 5 HP equations are at 0.2, 0.4, 0.6, 0.8, 1.0, respectively.) % give x as output since you want this to be equal to zero! x=HR-HP; end Now you can use this function in fzero: fzero(@enth1,[300,50000]) % searches for enth1(T)=0 within a range of 300:50000 This results in the T = 2.2240e+04 . (I hope that is a value you would expect). You can repeat this process for HP2 to HP5. If you do want to write your own bisection function I recommend you do a google search, plenty of people have written code for this.
I don't understand why you would have a loop in the first place. What i mean is that clearly here to construct Gia for example, you don't need a loop but a simple Gia = 40 + Zb + 26 * log(Do) ; But that's not all. The four lines with Gia, Gja, Gib, Gjb. I would suggest one big G with all four values (4 x Dn matrix). Disregarding the fact that Gia and Gib are exactly the same. Something like G = 40 + Zb + 26*log(D) ; where D is (similarly) a 4 x dn matrix as well containing Do, D1, Do, D2, which you could construct like Do = l * rand(1,dn) ; D = [Do; 200 - Do; Do; 200 + Do] ; I also don't understand why you reassign Do at every t step. Once outside the loop should be sufficient. In the end I think I would have something like that : dn=1000; l=100; No=-95; Za=9; Zb=18.13; P=[-3:8.5:20]; lP = length(P) ; for p = P Do = l * rand(1,dn) ; D = [Do; 200 - Do; Do; 200 + Do] ; G = 40 + Zb + 26 * log(D) ; SINRa = (p * G(1,:)) ./ (p * G(2,:) + No) ; SINRb = (p * G(3,:)) ./ (p * G(4,:) + No) ; end And I don't understand what PGia(t), PGja, etc are ; so I supposed it meant P * Gia, and I don't know what the stream thingy lines do.
I doubt that is the exact line used since it gives 2 errors ;) (length is misspelled and there is an odd amount of brackets.) It does look a bit weird to me but my guess this is a typical Matlab thing. If you write a value to an index that does not yet exist Matlab just fills up the rest with zeroes. Quite an ingenious way of abusing this if you ask me :P. I can't comment on if this is good coding practice or not. My guess is that it wouldn't work in other programming languages. The way I would perform zero padding: paddedvector=zeros(length(H),1); paddedvector(1:length(p))=p; But there are probably a million ways to do this... 
Ok... There's an extra parenthesis :-) (I'm typing the code by hand as matlab is on another PC not connected to the internet). I tried it and it works. You're probably right that the matlab interpreter is smart and changes the vector size as needed.... but it seems very streched out to me. Wouldn't a cat or the line you wrote be better?
You can time which method is better! And you'll quickly notice that p(lenght(H),1))=0; is quite a bit faster than my method (about 30%). As a sidenote: the function "padarray" is incredibly slow for 1 dimensional vectors for some reason (in the order of minutes compared to seconds for 1e6 padded vectors). So it's very efficient and quick which in my book means better. There are only 2 disadvantages: length(p)&lt;length(H) (as mentioned by no_dammit). it's not very clear what it does on first sight (but thats what comments are for). 
your fft plot isnt symmetrical since you are plotting only half the magnitude spectrum &gt;plot(f,2*abs(FFT_Curr(1:NFFT/2+1))) 
TIL
If you have iradon, then you have the image processing toolbox. The image processing toolbox includes a function: padarray, that handles all different styles of padding. I'd just use padarray.
Are you using the MATLAB report generator / publishing features? There should be a publish tab open when you are in the editor. While word might be easier to get started, being able to make changes and republish quickly is a great feature of MATLAB. If you publish in HTML the sizing changes with the document. 
You could use periodogram instead
It is a simulation from PSCAD of current over time. The data I'm feeding into MATLAB is a section totaling a few milliseconds of the entire simulation (total runtime equal to 2 seconds). Could you please ellaborate on what you mean when you say symmetrise the time-domain? 
Right well the FFT will only be 'correct' if the integral is performed over all of time. Obviously discrete datasets wont satisfy this condition, so usually you have to employ some hacks to get the most out of your dataset. When I say symmetrise the dataset I mean start with a set: 0 1t,...........,nt Where t is your sampling period. If you can argue your function should be time reversal invariant (that is that the physics runs the same backwards and forwards in time) then f(t)=f(-t). Hence you can help the fft out a bit by symmetrising the dataset such that: -nt,...........,-1t,0,1t,............,nt This helps with some issues of aliasing at the frequency limits of your transform.
I really haven't understood what OP problem actually is but FFT applied to real numbers input is supposed to be always symmetrical at the level of numerical precision. Therefore, he's supposed to see always two identical peaks. I don't see how imposing time symmetry in the time domain is supposed to solve his problem (If I've got correctly what his problem is). 
I think you are looking for the function [fftshift](http://www.mathworks.com/help/matlab/ref/fftshift.html). It also works for the single variable case.
I've read that it's much much slower in the post by yourfavouritemusician. Maybe that's why in the same toolbox they don't use it. (or maybe it just stuck there) Then I get to a philosophical question. I mean... You can't really know each and every of the gazillions of the built in functions. So... When is it worth starting to look for a built in function instead of using common easy functions? I mean... using cat or preallocations padding a vector with zeros it's extremely easy and reliant of basic matlab "tricks".
I'd say it becomes worth it once you know the thing you are trying to do is already in the product, which you do and it is. The timing question is interesting. I'd love to see a tic/toc comparison of padarray vs your method if you care to share.
Yes, but I don't really understand exactly what's going on there. In the code you've posted you're plotting only half of the FFT spectrum, where you expect a single peak (for each frequency component). If you do something like this (I'm assuming you've padded your signal to an even number of components as you've written): f = (-(NFFT/2-1):(NFFT/2))*fs/NFFT; ftSHIFTED = cat(2,FFT_Curr((NFFT/2+1):end),FFT_Curr(1:NFFT/2)); plot(f,abs(ftSHIFTED)); (BTW, if it doesn't work in the second line do cat(1,FFT_Curr.....) ) In this way you plot the full spectrum with the zero component in the center. Now, because of how fft is computed, you must find (at least) three peak. One at f=0, for the DC component, and two identical ones at equal distance from zero for your signal. Maybe before, since it looked like you were plotting only half of the spectrum, you found your signal and an harmonic component. That would make sense. Now, with my code, you should find 4 peaks.
Yes i have, and i dont know what marker belongs to what part of the body.. I got this data file from my teacher, i have to do this for my exam. I think i have to find out by myself what marker belongs to what part of the body. I have a total of 41 markers with each a X Y and Z position. That makes a total of 123 columns and it has 100 rows
So this is basically like a stick person with joints as markers you are animating their motion? If so, and if you only need to figure out once which 41 marker is the elbow, which is the knee (and what the other 39 represent), loop over these 41 plotting each as black and the one you're looking at as red, then record this for your own use.
Thanks for the response the reason of having the loop in the first place is that, i wanted to get value of G in each value of Do generated, beause I am looking for value of G in each value of Do between 0 to 100
aaah, you mean to plot every marker seperately from the others?
I GOT IT!! I'm such an idiot! This whole time I realized that I forgot to multiply the HP equation my the molecular mass of each species. And I used the bisection method for each HP. Now all I have to do is combine the bisection files into one....somehow. Thank you for all your help!
I just stuck with Word, but I'll have to check out this report generator feature. Didn't know MATLAB had something like that. 
Minimal working example showing that the magnitude of the FFT of a real signal is perfectly symmetric. x = filtfilt([1 .1 1], 1, randn(700,1)); subplot(211) plot((1:700)/700, abs(fft(x))) subplot(212) plot((1:2^nextpow2(700))/2^nextpow2(700), abs(fft(x, 2^nextpow2(700))))
FYI: http://www.mathworks.com/help/matlab/matlab_prog/publishing-matlab-code.html 
Ok here are all the files. We managed to get it to run and we're pretty darn convinced that the bounds or constraints are the issues. The thing is, we can't "see" the effects of our chosen bounds and constraints so we can't really visualize what numbers to use or what we need to change. The Optimization Code (Which is what we are running): clear; clc; lb=[-10 0 0 0 739.128]; ub=[14 90 50 10 2836.39]; %x0=[1 0 14.9 6.94 739.124]'; A=[1 0 0 0 0;0 0 0 0 1]; x0=[5 0 14.9 6.944 600]'; Converg=1; Z1=1000; X=x0; i=0; while Converg ~= 0 %While Converg does not equal 0 (it has not converged) y=CessnaCoupledVariables(x0); B=[16;(2836.03-y(1))]; NLC=@(X)CessnaNLConstraints(X,y); %NLC=[]; options = optimset('Algorithm','sqp'); %OPTIMIZER f=@(X)ObjectiveFunction(X,y); [X,fval]= fmincon(f,x0,[],[],[],[],lb,ub,NLC,options); Converg = abs((fval-Z1)/Z1); Z1=fval; %Making the Current Optimizer Values the "Previous Solution" x0=X;%Want to start the next optization at the last optimum value i=i+1; end The CessnaCoupledVariables Function is; function [y] = CessnaCoupledVariables(X) %Needed Constants/ Variables atmos=AtmosphericProperties(); %Atmospheric Properties at 8000ft %Structures [W]=Structures(atmos,X); %Performance [P]=Performance (X,W); %Output y=[W;P]; end Where: function [ ptn ] =AtmosphericProperties() %Vector's Form = [Altitude Temperature Pressure Density (Speed of Sound)] pta=[2 275.154 79501 1.0066 332.532]; %At Altitude of 2km ptb=[3 268.659 70121 0.9093 328.583]; %At Altitude of 3km ptn=[2.4384 0 0 0 0]; %At Altitude of 2.4384km ST = (ptb(2)-pta(2))/(ptb(1)-pta(1)); %Slope of Tempature. Sp = (ptb(3)-pta(3))/(ptb(1)-pta(1)); %Slope of Pressure. SRho = (ptb(4)-pta(4))/(ptb(1)-pta(1)); %Slope of Density. Sa = (ptb(5)-pta(5))/(ptb(1)-pta(1)); %Slope of Speed of Sound. %Atmospheric Properties at Cruise ptn(2) = -(ST*(ptb(1)-ptn(1))-ptb(2)); %Temperature at Cruise Alt. [K] ptn(3) = -(Sp*(ptb(1)-ptn(1))-ptb(3)); %Pressure at Cruise Alt. [Pa] ptn(4) = -(SRho*(ptb(1)-ptn(1))-ptb(4)); %Density at Cruise Alt. [kg/m^3] ptn(5) = -(Sa*(ptb(1)-ptn(1))-ptb(5)); %Speed of Sound at Cruise Alt. [m/2] end function [W] = Structures(ptn, X) %Structures covers the "Structures" Discipline, namely determining all of %the required weights --&gt; Equation is based off of Imperial Units %Structure Specific Variables/ Constants &amp; Conversion to Imperial Units Vcri=140.082; %42.697m/s = 140.082 ft/s Weww = 803.7175; %Empty Weight of Cessna 152 without Wings (407.109kg =897.522 lbf) Wf=227.907; %Weight of Fuel (Extended Range Tanks) (1013.782N = 227.907lbf) Wdg=1200; %Fuel Needed for Take off/Climb Weight (72.780N = 16.3616lbf) Xi=[X(1) X(2) (X(3)*10.764) X(4) (X(5)*0.224809)]'; %Conversion to Imperial La=1; %Taper Ratio (Lambda) q=0.5*((ptn(4)*0.0624)*Vcri^2); tc=0.12; %thickness/chord = 12% n=3; %Load Factor = +3Gs M=42.697/ptn(5); Ww=0.036*(Xi(3)^0.758)*(Wf^0.0035)*((Xi(4)/((cos(Xi(2)))^2))^0.6)*(q^0.006)*(La^0.04)*((100* (tc)/cos(Xi(2)))^-0.3)*((1.5*n*Wdg)^0.49); %Wing Weight Wo=Ww+Wf+Weww+Xi(5); %Weight Initial %Conversion back to Metric (lbf to N) Ww=Ww*4.44822; Wo=Wo*4.44822; W=[Ww; Wo]; end function [P] = Performance (X,y) %Performance covers the "Aerodynamic Performance" Discipline, namely %determing the Range, Cdo and K values %Performance Specific Variables/ Constants ev=0.95; %Span Efficiency Factor Cdm= 0.01; %Cd Minimum for NACA 2412 Clm= 0.2; %Cl Minimum for NACA 2412 alo= -2; %AoA at L=0 ao= 0.1 ; %Slope of Cl vs. AoA Graph for 2D Wings Wf=1013.782; %Weight of Fuel (Extended Range Tanks) Wtoc=72.780; %Fuel Needed for Take off/Climb Weight Win= y(2)-Wtoc; %Initial Weight after Cruise Wfin= Win-Wf; %Final Weight after Landing Npr= 0.64; %Taken from Graph (J vs. Npr) BSFC=0.334552e-3; %Taken from Lycoming Reference Manual %If Statements to Determine Kl if X(2)==0 Kl=0.38; elseif X(2)&gt;0 &amp;&amp; X(2)&lt;20 Kl=0.38+0.01*X(2); elseif X(2)==20 Kl=0.4; elseif X(2)&gt;20 &amp;&amp; X(2)&lt;35 Kl=0.4+3.33e-3*X(2); else %If X(2)=35deg Kl=0.45; end Cdo=(Cdm+Kl*Clm^2); %Zero-Lift Drag Coefficient e= ev/(1+Kl*Cdo*pi*X(4)*ev); %Oswald Efficiency Factor K=1/(pi*X(4)*e); %Determining Cl and Cd a=ao/(1+(ao/pi*e*X(4))); %Cl vs. AoA Slope for Finite Wings Cl=a*(X(1)-alo)*cosd(X(2)); %Cl Cd = Cdo+(K*(Cl^2)); %Cd R=(((3.6/9.81)*Npr*(Cl/Cd))/BSFC)*log(Win/Wfin); %Range Equation P=[R; Cdo; K; Cl; Cd]; end The Non-Linear Constraint Function is: function [C, Ceq] = CessnaNLConstraints(X,y) %Non-Linear Constraints based off of the three discplines %Needed Constants/ Variables C152=4.0216e+3; R152=917.7050; atmos=AtmosphericProperties(); %y=@(X)CessnaCoupledVariables(X); %y=cell2mat(y); %Economics [Ctot] = Economics(atmos,X,y); %Constraints %WwNL=X(5)+y(1)-2418.6487; CNL=-(C152-Ctot); RNL=-(R152-y(3)); %Output Variables C=[RNL CNL]'; Ceq=[]; end Where: function [Ctot] = Economics(ptn,X,y) %Economics covers the "Economics" Disicpline, namely determing the overall %hourly operating cost of the aircraft %Economic Specific Variables/ Constants Npr= 0.64; %Taken from Graph (J vs. Npr) BSFC=0.334552e-3; %Taken from Lycoming Reference Manual Cf=1.73; %Fuel Costs Cfhr=25.51; %Fuel Costs per Hour Cop=43.13; %Operating Costs Weww = 3993.739;%Empty Weight of Cessna 152 without Wings Wf=1013.782; %Weight of Fuel (Extended Range Tanks) Vcr= 42.697; %83KTAS =153.716kph =42.697m/s %Economics Equations Bc=Cop-Cfhr; %Hourly Cost of Operatation without Fuel Costs s=y(3); %Distance Travelled = Range W=Weww+Wf+X(5)+y(1); %Total Weight Ctot=Cf*(BSFC/Npr)*(((y(4)/2)*ptn(4)*Vcr^2*X(3))+((y(5)*W^2)/(ptn(4)*Vcr*X(3))))*s+(Bc*s/Vcr); %Total Cost per Hour end Finally the Objective Function is: function TP = ObjectiveFunction(X,Y) %Maximizing the Transport Productivity is the Objective Function %Y=CessnaCoupledVariables(X); %Y=cell2mat(Y); Rb=0.8*Y(3); %Block Range Vcr= 42.697; %83KTAS =153.716kph =42.697m/s Vw=0; Vgcr=Vcr-Vw; tb=0.5+(Y(3)/Vcr); Weww=3576.3608; BSFC=0.334552e-3; We=Weww+Y(1); %Empty Weight Rfmu=((Y(6)*Vgcr)/(Y(7)*9.81*BSFC))*log(Y(2)/We); Wpmu=X(5)/(1-(Rb/Rfmu)); tex=tb-(Rb/Vgcr); TP=Wpmu*Vgcr*(1-(Rb/Rfmu))*exp(-((Vgcr*tex)/Rb)); %TP=-TP; end Thanks for your time and help! 
Yes.
How?
The same way you would pass any other argument to a function... There is nothing special about it because they came form a dialog box. answer = inputdlg(prompt) randomOutput = yourFunctionHere(answer) With the small caveat that inputdlg() is going to return a cell array. Plan accordingly.
Maybe my original question was not clear enough. I'm new to programming, so bear with me. Here's what I want to do. Example code: function [output] = funkyfunction(a,b) I want to be able to call funkyfunction, but instead of entering a,b on the command line when I call the function, I want to be prompted to enter them in a dialog box, with custom field length and box title if possible. I don't want these arguments to be predefined, which means that I will have to define them at the time the function is called, which suggests that I would have to put the dialog box code inside the function's argument in place of (a,b). And again, I need the function's name to be user-defined. Is this possible?
That is drastically different than what your original question implied. Don't specify a or b in the function definition, prompt for them inside the function itself. If you are adding yet another prompt for the user to input the function name to call, you can use eval() to perform the call itself. So, yes it is possible. Clunky and haphazard, but entirely possible.
A and B have to be defined at the time the function is called, so I can't prompt for them inside the function itself. I'm working on a Caesar Cipher. Instead of the user inputting a string and a shift number into the () of the function call, I want the user to input them into a dialog box. Is this possible?
Are you using a custom created GUI? Are you just using the vanilla MATLAB command line?
Vanilla.
Do you have to use a dialogue box then? Can you not prompt from the command line with input() to get A and B prior to your funciton call?
&gt; A and B have to be defined at the time the function is called is solved by &gt; Don't specify a or b in the function definition, prompt for them inside the function itself.
I tried that, but maybe I wasn't doing it right. Gonna give it another shot.
If you have the vanilla GUI open where the user is using it anyway, have them input it there. K.I.S.S.
&gt;With windows XP (that I'm not going to upgrade.) Enjoy your malware.
In the initial function line, what do I use as arguments? function blah = derp(a,b) What do I put for a and b?
You don't need to define a function with input arguments. function blah = derp() works just fine.
&gt; A and B have to be defined at the time the function is called, so I can't prompt for them inside the function itself. No they don't, Why do you think that? 
As a freshman, I'm worried about finding a job after school. How'd the job search go for you? 
I'll try and make it more understandable. I'm trying to make a function that will take one coordinate, {123 'E'} and normalize it so that the output is in terms of west (so if the point is {123 'W'} it would leave it alone). The part I'm having trouble with is line 2 of my conditional statement. Basically I want x to be {237 'W'}, but I can't find a way. if cell2mat(x(2)) == 'E' x(1) = cell2mat(360-x(1)); x(2) = 'W'; elseif cell2mat(x(2)) == 'e' x(1) = cell2mat(360-x(1)); x(2) = 'W'; end
calling `fprintf` with arrays is tricky. it's much simpler to use a `for` loop with scalars: for ind = 1:numel(t) #assuming t is 1xN (or Nx1) and Y is Nx2 fprintf(fileID,'%.3f %6.3f %6.3f\n', t(ind),Y(ind,1),Y(ind,2)); end 
I would add a conditional to the code that stops the calculation after a certain time period. Regardless of whether or not it freezes, the program will terminate automatically. A temporary fix, perhaps. What you are inquiring about would be pretty hard to do, which could be possible if you can understand what is making certain inputs freeze. 
PERFECT! I didn't see anywhere that I had to use braces to address cells. I assumed since you address matrices with parentheses you use them for cell addressing too. Problem is fixed, thank you very much!
Tell him to post the folder of parodies to /r/matlab :D
You can change the jpeg compression when using ~~imwrite()~~. Using other file formats may also provide a better looking image. edit: See below
Thanks for the post, but I believe that command is only within a function or script, right? I'm just saving an image of the graph manually (not within the code itself). I could try saving these images as BMPs or something, but that seems like an awfully cumbersome way of doing things... saving it as a BMP, then having to open the file in Photoshop and Saving As a JPG to save space and then having to go and delete the old BMP files. I was poking around in the settings/options to see if there was a setting that changed the compression amount, but I couldn't find anything. 
Why do you have to use a jpeg? I would recommend using png for graphs. If you're set on using jpegs, I would recommend using [export_fig](http://www.mathworks.com/matlabcentral/fileexchange/23629-exportfig) from the file exchange. MATLAB's native saving capabilities are a bit lacking. See [this stackoverflow](http://stackoverflow.com/questions/15984630/how-to-save-matlab-figure-as-jpeg-using-saveas-without-the-image-coming-off-ba) for a similar question.
Not quite. The reason it's not working for you is because you've got the syntax incorrect (understandable, it's not very intuitive). When you pass multiple inputs to fprintf() it essentially squishes them together and writes it in column order. So when you're passing it t,Y(:,1),Y(:,2) it's putting t on top of Y1, which is on top of Y2. To resolve this simply, you can do two things: First, you can use a loop. I strongly advise against this because it's extremely slow. See my response to /u/Mr_Smartypants to see the difference. Second, you can concatenate the data the way you want (using [transpose\(\)](http://www.mathworks.com/help/matlab/ref/transpose.html) if necessary) to get your data arranged by rows. In your case, row 1 is time, row 2 is y1 and row 3 is y2. You can create one big array for this, or be creative with your input to fprintf(). Again, see my other response for an example.
It's also ~~horrendously slow~~ an order of magnitude slower. Compare: testarray = zeros(100000,2); time = 1:length(testarray); testarray(:,1) = 1:2:length(testarray)*2; testarray(:,2) = 1:3:length(testarray)*3; tic fid = fopen('looptest.txt','w'); for ii = 1:length(testarray) fprintf(fid,'%.3f %6.3f %6.3f\n',time(ii),testarray(ii,1),testarray(ii,2)); end toc fclose(fid); tic fid2 = fopen('mattest.txt','w'); fprintf(fid2,'%.3f %6.3f %6.3f\n',[time;testarray.']); toc fclose(fid2); My results: Elapsed time is 2.961656 seconds. Elapsed time is 0.227175 seconds. edit: wording
Heh. I don't know about "horrendously". If it were, a mere 13x speedup would still be pretty bad. Like everything, judgement on its level of horrendousnes is the responsibility of the caller (OP). 
&gt; Heh. I don't know about "horrendously". If it were, a mere 13x speedup would still be pretty bad. I'm not sure what metric you work by but most folks I know would consider an order of magnitude increase in speed very significant. Using loops when they're not necessary is a poor habit to get into regardless of programming language.
Thanks, I captured the seed and verified the results. What I didn't realize when I restarted or switched it to a different computer was that I wasn't using the same number of processors. I am getting consistent results now. 
yes I am. computer engineering
Thank you. This is for an undergrad term project. I have about 100 -200 entries per column. So the ETs are not that big of an issue. Once the loop code worked and it took less than a second to process I was happy. I figured out later that I could transpose the initial array to suit my needs, so that is what I will do in the future.
I just meant that it depended on the context; what's 3 extra seconds if it's at the end of a 30 hour computation? &gt; Using loops when they're not necessary is a poor habit to get into regardless of programming language. Definitely, and thanks for showing us how to do it the right way!
You need to use the other slashes, by the way. 
Can I have gait.txt file? Such a fun project!! Also, I suggest you plot each set of data separately so identify which is which. Also, look at the z coordinates (usually the vertical axis), the highest numbers is likely to be top of the head, right? You can then maybe divide the columns into categories. If max(z)=1.80 (meters). The divide into three z&lt;0.6, 0.6&lt;z&lt;1.2, and z&gt;1.2. You have now separated your feet from your torso etc, see? 
Am looking to better myself and this introduction was very informative, thank you for sharing. 
np, tell me if you ever encounter problems and have questions and ill help you.
Not contributing directly to the problem, but you can really get more readability on here by using the reddit code formatting located in the reddiquette section. Right now it's a complete jumbled mess and not many people will want to take on something they can't read right away.
It appears to be the fact that you're using the function as a cell, don't know if you can really do that. You could just replace it with two functions (or an additional argument in the function). Also, it's a bit inefficient how it is at the moment, as it's working out both parts of the ODE function on each line it's used.
I recommend PNG also, or if you're using LaTeX, then EPS.
The error is because ODE is a function that returns a cell with two elements. I think this: Kx1 = ODE{1}(t(i),x(i),y(i)); Ky1 = ODE{2}(t(i),x(i),y(i)); Should be dIdt = ODE(t(i),x(i),y(i)); Kx1 = dIdt{1}; Ky1 = dIdt{2}; Why on earth you are using cells so often is beyond me though. Use vectors, things will be faster and cleaner. So in your function, instead of dIdt1 = (V-Rp*Ip+Msp*Rs*Is/Ls)/(Lp-Msp*Mps/Ls); dIdt2= -Mps*((V-Rp*Ip+Msp*Rs*Is/Ls)/(Lp-Msp*Mps/Ls))/Ls-Rs*Is/Ls; dIdt={dIdt1; dIdt2}; do this: dIdt = zeros(2,1); dIdt(1) = (V-Rp*Ip+Msp*Rs*Is/Ls)/(Lp-Msp*Mps/Ls); dIdt(2)= -Mps*((V-Rp*Ip+Msp*Rs*Is/Ls)/(Lp-Msp*Mps/Ls))/Ls-Rs*Is/Ls; 
I ended up getting it work, but your formatting looks a lot cleaner then what I have currently Ninja edit: I got rid of all the cells completely, the cells was a suggestion from a friend but I dont think I understood the usage of cells properly which is why there are so many. I opted for using just vectors instead, Ill post what I have here in a second 
Glad you got it working using vectors. Also, not sure if you are aware, but matlab has [many built-in ODE solvers](http://www.mathworks.com/help/matlab/math/ordinary-differential-equations.html) which might work better than your implementation by using variable steppers, etc.
Ahh the joys of fighting with blocks/mutexes to get some asynchrous mojo going. I've never been brave enough to wrangle with doing anything similar (in MATLAB), but the two links below have a great starting point for you to wrestle with if you are serious about trying. http://stackoverflow.com/questions/19572440/is-it-possible-to-load-data-file-in-parallel-to-computation-in-matlab-without-me http://stackoverflow.com/questions/19133016/simple-parallel-execution-in-matlab/19144036#19144036 Hopefully you have access to the parallel toolbox!
This is what I have right now, I feel like I'm completely missing a large part of this problem: sigma = -8:0.1:0; omega = -10:0.1:10; [x,y] = meshgrid(sigma, omega); s = x + y; z = (5^2)./(s.^2 + 2*0.4*5.*s + 5^2); surf(x,y,z);
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Rubber duck debugging**](https://en.wikipedia.org/wiki/Rubber%20duck%20debugging): [](#sfw) --- &gt; &gt;__Rubber duck debugging__, __rubber ducking__, and the __rubber duckie test__ are informal terms used in [software engineering](https://en.wikipedia.org/wiki/Software_engineering) to refer to a method of [debugging](https://en.wikipedia.org/wiki/Debugging) code. The name is a reference to a story in the book *[The Pragmatic Programmer](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer)* in which a programmer would carry around a [rubber duck](https://en.wikipedia.org/wiki/Rubber_duck) and debug his code by forcing himself to explain it, line-by-line, to the duck. &gt;Many programmers have had the experience of explaining a programming problem to someone else, possibly even to someone who knows nothing about programming, and then hitting upon the solution in the process of explaining the problem. In describing what the code is supposed to do and observing what it actually does, any incongruity between these two becomes apparent. By using an inanimate object, such as a rubber duck, the programmer can try to accomplish this without having to involve another person. &gt;This concept is also known as "Talk to the Bear", dating from Kernighan's [The Practice of Programming](https://en.wikipedia.org/wiki/The_Practice_of_Programming). &gt;==== &gt;[**Image**](https://i.imgur.com/Zxk24K6.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Rubber_duck_assisting_with_debugging.jpg) - *A rubber duck in use by a developer to aid code review* --- ^Interesting: [^Rubber ^duck](https://en.wikipedia.org/wiki/Rubber_duck) ^| [^Duck ^test](https://en.wikipedia.org/wiki/Duck_test) ^| [^Software ^walkthrough](https://en.wikipedia.org/wiki/Software_walkthrough) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgoo5qg) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgoo5qg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Hunh - never heard a term for the concept, but I certainly use it. The more you know..
I was actually asking a friend about it and figured out what I was doing wrong in the process haha. Thanks anyway! 
Thanks! This is actually much simpler than I thought. This is why Matlab is in my Pantheon of software packages that actually get better with every new version. From the first link... f = parfeval(@load,1,'myfile.dat'); % asynchronous, move on to intensiveCompute results = intensiveCompute(data); data = fetchOutputs(f); % Blocks until complete Did not know about parfeval(). 
find(Matix==element)
There is your answer op. 
Also, instead of using ==, you could use &gt;, &lt;, &gt;=, or &lt;= value. Then it will return a matrix of logicals corresponding to values that fit (1) or don't fit (0) the inequality. Happy Matlabbing.
Would zero padding the time domain signal sufficiently ( I mean several times it's length) help you with the resolution you need?
Your problem sounds a bit strange to be honest. Remember, Matlab is a *numerical* tool. Meaning, if you have a function, say **y = mx+c**. and want to see how it behaves for different values of m. Then you must choose a specific set of m's you wish to see. e.g. m=[-1:0.2:1] - this will have a length of length(m)=11 and define your x-axis **x=[0:0.1:1]**. with length(x)=11 as well (they must have the same length. c was not of interest - maybe because you know it to be 0 - so we set it to zero. **c=0**. Now you define your functional values (you have 11, one for each different value of m you have chosen). **y=m*x+c**. Your y,m,x and c are vectors (c can be a scalar). To me it sounds like you're not familiar with the concept of numerical thinking. I think this is where you should start. Hope it helped!
I'd recommend using 'solving by hand' any time of day, though! I think it provides a much better understanding, plus it eases the troubleshooting 95% of the time (if you're one of those idiots who makes mistakes, as most people do) :-)
What exactly do you want to solve? Your matrix gamma is 12 x 12 - what do you mean with "solve this matrix giving a 1x8 matrix" ?
You can also use find(A&gt;0,n,'first') to return (at most) the first n indecies where A is positive (or whatever find criteria you choose).
Yes, I think you want the \ operator. There are a few different approaches to solving a matrix problem and Gaussian elimination is just one. The \ operator as I understand it will choose the best method for the situation. Regardless of what method it chooses, it will give you the same answer. 
This hurts. 
Random people make the best rubber ducks!
I'm going to try solution B, thanks for the help!
Or you could use option C: Use the modulus! digit=floor(mod(pi*10^n,10)); where n indicates the digit you want (so n=0 results in 3, n=1 in 1 etc.). you can even make a simple function of this so you can just call PI_number(n) (or whatever function name you desire). 
This is pretty much the right solution. Modulus-juggling is a basic programming skill.
Was going to suggest moduli-juggling - works quite nicely!
There's also dsearchn, which can be helpful in avoiding floating-point errors (sometimes "find" won't, well, find the right value, because you're searching for "12" and the matrix contains 12.0000000000000000001 or something like that). But that can lead to unexpected results too - it'll always return a value (unless you have a matrix of NANs) so make sure you know your datasets well and know what you're likely to run into. 
Simplest way: [textscan\(\)](http://www.mathworks.com/help/matlab/ref/textscan.html) Read through the documentation, pay attention to how the formatSpec property is defined and how to ignore fields if you don't need them. For example, to read in an [IGC file](http://carrier.csi.cam.ac.uk/forsterlewis/soaring/igc_file_format/igc_format_2008.html) I used: nHeaderLines = 12; formatspec = '%c %2f %2f %2f %2f %2f %3f %c %3f %2f %3f %c %c %5f %5f %3f'; % Fix Format: RecordType-timestamp-lat-long-AVflag-PressAlt-GPSalt-TAS % Record Type: Single Letter, we're mainly interested in 'B' (Fix) records % Other records likely won't fit the specified format and % won't be pulled % Timestamp: HHMMss, UTC. No decimal seconds in our logs % Lat/Long: Degrees decimal minutes, with N/S E/W character specifier % AVflag: Fix validity. A for 3D, V for 2D (no GPS altitude) % PressAlt: Pressure altitude (meters) above 1013.25 HPa sea level % GPSalt: GPS altitude (meters) above WGS84 ellipsoid fID = fopen(filename,'r'); rawdata = textscan(fID,formatspec,'HeaderLines',nHeaderLines); Another tip is to search MATLAB's [file exchange](http://www.mathworks.com/matlabcentral/fileexchange/) or the Googles, chances are somebody has done this already.
IMO you should only ever be saving as one of two formats - If you don't have transparency in your figure (technically, if the renderer is painters and *not* opengl), you should save as EPS - Otherwise, save as a high resolution PNG. PNG is a lossless compression format, it offers the quality of a BMP but with a file size more like a JPG, and it is about as compatible as jpg so nobody will have issues with opening it. JPG is the wrong format to use for plots anyway because it is meant for photo compression and as such it is not designed to preserve sharp edges. Therefore artifacts affecting text and lines are common. This doesn't happen with PNG I think you should also always use the print command with extra resolution when saving your figure if using PNG. So having made your plot, you could do print(gcf,'-r300','-dpng','filename.png')) The resulting file is vastly better than Matlab's default settings 
http://www.mathworks.com/help/matlab/ is a great place to start. If you know any programming whatsoever it should be trivial to pick up the syntax. You'll get a much better response if you come back with specific, direct questions about how to implement some portion of that. Another bit of advice, no reasonable person is going to download a random PDF (especially from Mega). Copy/paste that shit to something not suspicious and alarm bell inducign like Gist or Pastebin.
There are a ton of options for doing this. textscan, as suggested, would work well. Another option would be to use readtable with the comma delimiter: T = readtable('myfile.txt','Delimiter',','); There are other name/value pair options you can tack on he end for reading in the row names or variable names of the columns, if they are in the file. For more options, or for more information: http://www.mathworks.com/help/matlab/data-import-and-export.html
^^ This. Whether == is right to use depends on how the matrix/vector was constructed. If you're looking for a noninteger number in a vector created using colon, like 0:0.1:2, then there is a good chance it will fail. The most robust way to do this is to search with a tolerance. Like if you want to find the value 0.5, tol = eps; find (abs(A-0.5) &lt; tol) But if you're just looking for integers, == is probably the way to go.
I used wolfram alpha to get the series expansion of the result of the integral. I assumed L and epsilon are just constants and ignored them, and I set h to 1 for simplicity.. series of (1/(1-t X)+log(1-t X))/t^2 wrt t The series expansion near t=0 is then 1/t^2 + X^(2)/2 + 2tX^(3)/3 + 3t^(2)X^(4)/4 + 4t^(3)X^(5)/5 + 5t^(4)X^(6)/6 + O(t^(5)) It makes sense when you think about it, since if you plot the answer it looks a lot like an exponential (and in fact you could put it in that form if you wanted with some algebra).. And, of course, Taylor series are polynomials.
Depends on your definition, I guess. It's definitely a tool in the Matlab toolbox, hence the topics must be somewhat related? In any case it's interesting :) And sorry for meddling
Readtable seems to work like a charm ! Now i just need to make it sort the data into prober colums of data. Thank you ! Edit: I can read the table and get the variables into their own columns. But it is text and not numbers now. And I can't make str2double work. What do, mr science guy?
If you look at the documentation for [readtable\(\)](http://www.mathworks.com/help/matlab/ref/readtable.html), if any of the data in the column is not numeric it is stored in a [cell array](http://www.mathworks.com/help/matlab/cell-arrays.html).
&gt; it is just sort of scary for a guy used to using ==. And the fact that you are used to using == to find floats is scary to the rest of us :p Bad, bad habit. It is great that you've learned your lesson the easy way though!
In the code you gave, you wrote p=1-0.05 (so p=0.95) for the second comparison. Is that just a typo in the post, or also in the code? 
Removing the semicolons. p = 0.05 1 p = 0.95 0 &gt;&gt; I think I found your problem op. However I do see your point: &gt;&gt; p = 1-0.95 p = 0.05 &gt;&gt; disp(mean(TT) == p) 0 &gt;&gt; mean(TT)-p ans = -4.16333634234434e-17 Which is why for all my comparisons I use a abs(x-y)&lt;eps (really eps*10 just to be sure). &gt;&gt; (mean(TT)-p)&lt;eps ans = 1
&gt; a language with an honest printing policy You mean... like Matlab? 0.5 ans = 5.000000000000000e-01 1-.95 ans = 5.000000000000004e-02 0.05 == 1 - 0.95 ans = 0 or &gt;&gt; fprintf('%.100f\n',1-.95) 0.0500000000000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000 
Oh snap! I can't believe I just legit laughed at a MATLAB discussion...
Lesson learned :)
Post some code? Are your numbers the same magnitude (and you just have a * -1 somewhere)?
This is the equation that I am dubious about. It is quite long but I'll do my best to highlight it's purpose and what I think my problem is. The equation is the differential equation for the change in velocity along a supersonic duct wrt x. It is dependent on a number of other differential equations which are represented by dy(6) (Change in area) and dmdot_dx (change in mass flow rate). dy(1) = (1/alp) * ( -(1./Y(6)).*dy(6) + (1+(y*(Mac^2)) - (ho/h) ... + (cphyd*Tf)/h)*(1/mdot)*dmdot_dx ... + (1./h).*((Y(2)*Qr*wdottot*Y(6))./mdot) ... + ((2.*cf)./D).*(y.*(Mac.^2) - ((cp*(Taw - Tw))/(h.*(Pr.^(2/3)))))); When I put a breakpoint at the end of the file and run it, if I enter dy(1) in the workspace I receive dy(1) = -87.6435. However if I highlight the RHS of the equation and hit F9, I receive -248.3659. Instinctively this feels off, however I thought I would seek another opinion which may also help identify where I may have gone wrong. Hopefully the formatting of the code is ok.
find(matrix(:,1)==E)
cool thanks.
As multiple [people](https://pay.reddit.com/r/matlab/comments/22o8o5/very_basic_matrix_question/) have [learned](https://pay.reddit.com/r/matlab/comments/22rr9a/damn_odd/) in the last 2 days on this sub, this is not good advice for finding anything but integers or logicals in the matrix due to floating point errors. Always [incorporate a tolerance](https://pay.reddit.com/r/matlab/comments/22o8o5/very_basic_matrix_question/cgpge81).
Yeah i figured out to use [rowIDX,colIDX]=find(matrix==round(variable)) Did exactly what I needed it to do.
Yes true, but since OP didnt give details E could be an integer. Anyway if it is a double then including a tolerance: tol = 1e-14; ind = find(abs(matrix(:,1)-E)&lt;tol)
I don't know what you mean by RHS and LHS but maybe this answers your question. The integration step taken by the algorithm isn't going to be the same as the rate function (unless you're using Euler method, which you shouldn't!) because the integration step uses information about the higher order derivatives. Imagine this as the algorithm using information about the instantaneous slope, but also the curvature, to step forward. 
also, there seems to be some code here on page 36. I think this would do the same thing but i do not understand codes http://www.ikuz.eu/brain/paper.pdf
Thanks for the quick reply :D From what I've been told, Matlab is moving in the direction of Tables because it allows you have to numbers/strings. It can be handy, but extremely frustrating at times due to situations like this. The problem if I convert back into a cell array if I have 'ABC' it will get split to 'A' 'B' 'C' or give me dimension errors.
You're adding i to i Also don't use i as an iterator, you open yourself up to naming conflicts with the imaginary number.
Never had to use tables yet, try [varfun\(\)](http://www.mathworks.com/help/matlab/ref/varfun.html)
&gt; naming conflicts with the imaginary number Yup. For example, when iterating over nfiles to input, I opt for "ifile". Same with ilon or ilat, iyr...
I'm not sure if this will work on tables, but try regexp. But this searches regular expressions so be wary of special chars and partial matches.
Store the strings as a categorical array type within the table. This allows table.stringCol == 'string' syntax.
If you could post a sample data file with an explanation of data formatting, that would be helpful.
Sure. I will in the afternoon. Thank you in advance 
Without knowing anything about how your code works, would surf work? 
&gt;My question is what is the best way to get a 3D surface plot of CP, because if not for the variation in P and V it would be a simpler case. Do I compute the values of CP manually and plot from there, will this work? That is how it is typically done with MATLAB. Basically, you find the value of CP at a grid of points in the region that you are interested in and then plot those points using surf, contour, or whatever 3-d plotting function that you want to use. There are functions like [meshgrid](http://www.mathworks.com/help/matlab/ref/meshgrid.html) that can help you set up the points that you wish to evaluate your function at. An example of this workflow can be found at: http://www.mathworks.com/help/matlab/visualize/representing-a-matrix-as-a-surface.html 
Polyval() evaluates your fit polynomial at the same (x) points your real data is. Use corrcoef() to find correlation.
Ok. So I have P=polyfit(X,Y,20) What do I input in corrcoef()?
One brutal way: string = '583745920'; for inum = 1:length(string) number(inum) = str2num(string(inum)); end /u/matuba is likely to show up and beat me for not predefining number as something like number = NaN*ones(length(string),1); prior to the for loop above. While not *needed*, it'll likely speed up your code if your string is 1000s of numbers...
You want to polyval(), then correlate that with y. Check the documentation for polyfit(), polyval(), and corrcoef() for more.
I am not totally getting your approach to solving the differential equation. But you are clearly messing up with the frequencies. It seems you are not familiar with the matlab fft command. The matlab fft-command returns an array of frequencies. The first element contains the value at DC and the last element the value at f=1/t_sample. Because the DFT is periodical the last half of the array is containing the values at the negative frequencies. So if you want frequencies to run from -5 to 5 you have to use fftshift. U = fftshift(fft(u)) %Transform to frequency domain u=ifft(ifftshift(u)) %Transform to time domain 
To do this without for loops: x1= [5941]; x2= num2str(x); x3= mat2cell(x3,[1],ones(1,length(x2))); x4= cellfun(@str2num,x3); or in 1 line: x4 = cellfun(@str2num,mat2cell(num2str(x),[1],ones(1,length(num2str(x))));
As others have already said, there are a number of ways to do this using "num2str". One approach is to make use of class resolution in MATLAB. When mathematical operations (add, subtract , multiply, divide) are performed between characters, those characters are converted into doubles containing the equivalent ASCII values before the result is computed. So if you have a string representation of a number, subtracting '0' or 48 in ASCII will produce a row vector containing the digits as doubles. This makes use of the fact that '0' to '9' are 48 to 57 in ASCII. '9' - '0' is equivalent to 57 - 48 which results in 9. number = 123456; decDigits = num2str( number ) - '0' Produces decDigits = 1 2 3 4 5 6 
I don't have access to the tools to test it right now, but ... set ( figHandle , 'resize' , 'off' ) may do what you want. Make sure to swap "figHandle" with the actual graphics handle of the figure containing your app. You might also want to look into normalized units. Search for "units of measurement" on this page for the documentation: http://www.mathworks.com/help/matlab/ref/figure_props.html Normalized units are defined relative to the screen size so if your figure and all its components use normalized units it should appear roughly the same on all resolutions. 
http://www.mathworks.com/help/matlab/ref/table.html
The documentation page for [table](http://www.mathworks.com/help/matlab/ref/table.html) would be a good place to start. Read through the doc and give it a try. If you're still having trouble come back and show us your work and what explain what exactly you are having difficulty with.
 s = '5941'; m = s-'0'; :)
Do you need to convert [5941] to ['5' '9' '4' '1'] or [5 9 4 1] because there is a huge difference. And is it [5941] or ['5941']?
What is beta? Where does it fit in to the equation? I see you mention that CP is a function of beta, but it is not in the equation. If you are plotting with respect to beta and lambda only, sub in the equations so that your fuction CP(lambda, beta) is actually a function of lambda and beta! I can't quite tell what variables you are trying to plot against. If you have too many variables that you are varying, you will need to generate multiple surface plots, i.e. vary CP as a function of only 2 variables while holding everything else constant, and repeat in steps - change the third variable, and generate another surface plot, etc. etc. This would be done with surf.
In my experience developing cross-platform GUIs, it is better to use 'Characters' as the units for your GUI. The pixel size of the interface will then adapt to the different character size on each system. If you want, you can use getpixelposition() or similar to work out the conversion from characters to pixels at runtime e.g. to make objects square in character units
In my Aerodynamics class, we had to do something that sounds sort of similar to that, except with steam lines over a source-sink. It was just a quick problem though so we didn't go super in depth with it, but this is what I have for that: % Contours of stream function caused by a % source and sink placed in a uniform stream x = -1:.1:1; y = x; [x,y] = meshgrid(x,y); R=0.4; z = y/R.*(1 - R ^ 2. / (x. ^ 2 + y. ^ 2)); contour(x,y,z,20);
Look over to the right of your screen. There is a description of this subreddit. Read it. 
Will we help you get started with Matlab ? - sure!, happy to help :) Will we do your homework for you ? - no. I suggest checking out an online introduction to Matlab, and consider my cheatsheet (see right side).
Well I think the problem has been resolved, apparently the problem we were having was that the default font was slightly different between the versions, causing for things to change between each. We didn't specifically state which font to use at all times s it probably just used the default, but it may have been a combination of other things.
 doc kalman
For the second question: lsim(sys,input,timevector) see doc lsim for more info. 
Checkout the examples here: http://www.mathworks.se/help/stats/fitnlm.html
How?
For polynomial fits: cftool Or polyfit without GUI. For nonlinear stuff there is nlinfit.
What is the difference between nlinfit and fitnlm? Are they both least square regression?
 N = 100; %set up regression value x = linspace(-2, 2, N)'; % measurements y0 = 0.2*x.^3 + 2*x.^2 - x + 1; % add measurement noise y = y0 + 1*randn(N,1); X3 = bsxfun(@power, x, 3:-1:0); %using bsxfun for easier code, equivalent: % X3 = [x.^3, x.^2, x, ones(N,1)]; X2 = bsxfun(@power, x, 2:-1:0); % compute coefficients c3 = X3\y; % let's see what happens if we have the wrong model; a second degree % polynomial instead of third degree c2 = X2\y; figure, plot(x, [y, y0, X3*c3, X2*c2]) legend( 'data', 'noise-free true function', 'third degree fit', 'second degree fit')
You can write a lot of random processes in state-space or transfer function form. &gt;R_x = 5e-600|tau| Isn't that just colored Gaussian noise? That's implementable in state-space form. 
I need to convert [5941] to [5 9 4 1]. The assignment statement said using num2str and str2num would help.
str2num won't work on either of the things you posted. There is a massive difference between [5941] and ['5941'] or [5 9 4 1] and ['5' '9' '4' '1'].
It says fitnlm: Fit nonlinear regression model nlinfit: Nonlinear regression I still have no idea what the difference is :/
yep, I did that already. What I'm having trouble with is writing a function that returns samples of the time-domain function X(t) as X(n*delta_t)
What is your experience in Simulink like? 
I can help you out with this, but you'll need to have some rudimentary understanding of the Kalman filter in order to implement this. In my opinion, you shouldn't use the kalman function embedded in MATLAB as (at least from reading the documentation) it's not an extended Kalman filter. If you're using IMU data, your measurement/update model won't be linear and you'll need to use at least an extended Kalman filter. If you're using raw GPS observables, your models will definitely not be linear. Anyway, drop me a PM and I can send you some source code rather than messing up this thread. Disclaimer: I implemented a KF integrating IMU/GPS/Shaft Encoder data for my Master's thesis.
There's 'lsqcurvefit' and 'nlinfit' but they come in two separate toolboxes. Also see 'nlparci' to extract 95% confidence intervals for your fitted parameters.
I'm not really clear on what you're trying to do - or it sounds like perhaps you're not really clear on it? The gradient is only defined for a surface, so you'd need a mXn matrix on which to calculate values. In the simplest case that you seem to be describing, where y = F(x), the gradient would simply reduce to the derivative. Is this what you're looking for? Finally, I'm confused about your missing y values; there are any number of ways to interpolate missing data but without knowing what your data are it's difficult to recommend anything. The simplest place to start is the function interp1.m - there's also a whole page in the documentation about missing data so you could read there. 
Yesterday, I was trying to write code that would generate a random color and draw a pixel with that color. It would do this repeatedly until it filled up an 'image' with specified dimensions. I gave up pretty quickly to go to a pub crawl, but maybe you can help? Its not important, just doing it for practice to brush up on image processing skills.
Much appreciated, thanks. 
I'm trying to get from [5941] to [5 9 4 1]. My instructor told me that str2num would be useful. That's all I know
Do you know the best way to plot x,y,z vectors on a contour map? The triangulation method I use distorts the geometry
You'll want to make your simulated vector for position, which will be your actual position of your sensor moving in a sinuisoid in this case: t = 1:0.001:10; x = sin(w*t); then you can corrupt that signal using normrand to create what your GPS and INS read as their signals, based on their mean and variances. z = x + INSbias +INSnoise u = x + GPSnoise It gets tricky if the GPS and INS run at different frequencies, the A Posteriori portion of the filter won't run until your get a new measurement (GPS signal). Here's an example of a for loop for the actual filtering: %Calculate A Priori Estimate dx_bar(:,k) = PHI*dx_hat(:,k-1); %Calculate A Priori Covariance M(:,:,k) = PHI*P(:,:,k-1)*PHI' + GAMMA*V_w*GAMMA'; %Calculate Kalman Gain K = M(:,:,k)*H'*(H*M(:,:,k)*H'+V_eta)^-1; %Calculate Residual r = dZ(:,k) - H*dx_bar(:,k); %Update Posteriori Estimate dx_hat(:,k) = dx_bar(:,k) + K*r; %Update Posteriori Covariance P(:,:,k) = (M(:,:,k)^-1 + H'*V_eta^-1*H)^-1; Note that I'm saving each P, M, x, and z so I can do a Monte Carlo simulation. In my algorithm, dx is the difference between the Kalman estimate and the accelerometer measurement.
str2num will do nothing to turn [5941] into [5 9 4 1]. This will: mod(floor([5941]./10.^(3:-1:0)),10) If you want to make it generic you can increase 3 to a larger number.
You'll want to create 3 matrices, and loop through the dimensions of the image creating three random integers between 0 and 255, those will be your R, G, B planes. At the end, put those three matrices behind eachother. So img(:,:,1)=R; img(:,:,2)=G; img(:,:,3)=B; I'll code this up when I get home, I just didn't expect a reply so quick I posted and went out quickly. Or you could use the method the user just posted. Sorry for not posting as a reply to you, I'm bew to reddit
Do you mean vectors going from (0,0,0) to (x, y, z)? I haven't used contours an awful lot, but I'll look it up. My best guess is using the mapping toolbox (if you have it...), the contour functions with it should be better and preserve geometry in 3D Take a look at this: http://www.mathworks.com/help/map/displaying-vector-data-with-mapping-toolbox-functions.html
Yeah, I'd like to see it fill up, raster style.
Cant say i know either really well. If you are interested, consider opening the hoood of the "car" by marking fitnlm with your cursor and pressing ctr+d (see my cheatsheet in right hand side of subreddit). It will open the code :) It may be they are largely the same. For example "quantile" and "percentile" are largely the same code, infact one just calls the other with modified inputs!
Do you have any experience with the active contour "snake" matlab codes for segmentation in File Exchange?
l=1; im=imread('peppers.png'); for i=1:50 for j=1:100 rp=rand([1,1,3])*255; im(i,j,:)=rp; imshow(im) drawnow l=l+1 end end
Not really, sorry I can't help with that
 close all clear clc imageSize=[360,480];%defining the size of the image img=zeros(imageSize(1),imageSize(2),3);%creating the empty RGB planes for i=1:imageSize(1) for j=1:imageSize(2) img(i,j,1)=rand(1,'double'); img(i,j,2)=rand(1,'double'); img(i,j,3)=rand(1,'double'); end imshow(img) pause(0.001) end
Do you want to generate the data yourself, or do you have it already made for you, and if the latter, what format?
If they're not in a rectangular grid then should you be using them as x and y coordinates? because that's MATLAB's default, rectangular. You should transform you original coordinate system into a rectangular (or euclidean) space, and then use MATLAB. The conversion can also be probably done in MATLAB
Why not check that `n` is an integer and non negative before you start the loop? Also, it's usually better to use `error` to report an error than to return an error string as the result.
(sorry, but needed) this code is very ugly. First the loop is not needed and very weirdly defined. For example if n=100.5, you are going to loop with k = 100.5, 99.5, 98.5, ... up to 1.5, everytime filling 'result' with the same string. The if statements to rule out whatever you don't want as input should come before everything, and more importantly before the loop. Your abs(n) ~= n is also a very weird way of testing n &lt; 0. If I were you I would make a recursive function (no loop) for this by trying to implement f(n) = n * f(n-1).
Has noone suggested using polyfit(x,y,n) yet? It's just a simple least squares polynomial regression. http://www.mathworks.com/help/matlab/ref/polyfit.html
help contour
How viable is Matlab as a platform for realtime image/video processing? Fairly simple things, like edge detection and superposition, contrast enhancement, etc. How much lag would there be?
Are x and y the sizes of your stresses? Do you simply need to plot contour(x,y,z') (versus contour(x,y,z))? You don't necessarilly need a meshgrid for x and y that match z, but they need to be the same dimension.
I doubt anyone is going to open your HW links here. Post some code (4 spaces starting a line formats it nicely) and maybe where you error at and what the error is.. To put it more nicely: we don't do HW here, we do help debug. Maybe edit your post to reflect where you're having issues and you'll get more help.
Have you tried either of the above 2 commands? What error are you getting?
Here's what I got. It works! Is there a better way I can do this? function result = alexfact(n) if n &lt; 0 error('Negative factorials are undefined.') end if n ~= floor(n) error('Non integer factorials are undefined.') end result = 0; if (n == 1) result = 1; elseif (n == 0) result = 1; else result = n*alexfact(n-1); end 
Here's what I got. It works! Is there a better way I can do this? function result = alexfact(n) if n &lt; 0 error('Negative factorials are undefined.') end if n ~= floor(n) error('Non integer factorials are undefined.') end result = 0; if (n == 1) result = 1; elseif (n == 0) result = 1; else result = n*alexfact(n-1); end
Worst AMA ever.
that's funny because I doubt anyone is going to open your HW links here. Post some code (4 spaces starting a line formats it nicely) and maybe where you error at and what the error is.. To put it more nicely: we don't do HW here, we do help debug. Maybe edit your post to reflect where you're having issues and you'll get more help. but on a serious note i solved it, thanks for the tip, Jeff. I'll keep it in mind :) Have a great day! 
&gt;My x,y,and stress vectors are all 30x1 Then there is no need to contour(). Simply plot z. Either you are misunderstanding how to use contour(), or you are mis-formulating your problem. I'm leaning towards the 2nd, as you are trying to plot the stresses of a square (2D) plate using contour (smart!), but your stress vector is just 1D (30x1).
Cheers! Glad you solved it -Jeff
I also have the same question. And also what is a straightforward method to detect an object, say a robot, on a flat surface and track its' position. The surface I need to cover is pretty big, and one webcam can not cover all of it, so I have to use multiple webcams, 3-4. Should I process each video separately or somehow merge all of the videos and then process a big image? It would be great if you could explain the reason behind your choice. I also need this to be real-time, and of course the videos I am getting from the webcams have overlap with each other. Thanks for your time.
1. I'm familiar with Image Processing yet clueless about Control Systems. Can you give some interesting examples of combining both image processing and control systems? 2. Do you know any "fun" example of using Image Processing algorithm which could be understandable and helpful for the Bsc students? (like [Image to ASCII](http://www.reddit.com/r/pics/comments/21y9ks/wrote_a_matlab_program_that_converts_pics_to/))
Great, thanks for the help. Have a good evening.
I'm running the 2014 version if that makes any difference!
No problem. In answer to your previous question, there's always a better way to do it, although not necessarily for an assignment. In most cases, for example, it would be better to use the built in function `factorial` or `gamma`. Professors tend not to take kindly to those solutions though, but you should be aware of them when you venture out and start programming real problems in the real world. You spend so much effort finding solutions for problems that nobody has ever solved before, that it's best not to put any effort into solving ones other people have. Of course, if the goal is to learn to program, it's best to start simple.
how big is the set, and type of interpolation? Be precise!
Sorry! I'm still new to this :) Our set size is determined by number of subdivisions n. and not specified but he wants us to use the composite trapezoidal rule.
Eli5 neural networks for character recognition. 
The function polyfit can create a polynomial of the nth degree to your liking. This polynomial can then be evaluated using polyval. You can check the matlab help for how to use these two functions. Edit: Eeh, I see now that you want to use the trapazoidal rule on your dataset. That is the area under your curve and you don't need to interpolate for that (if i'm remembering everything correctly). So please make it clear what you want to do with you input points.
Since you worked out your solution, I would recommend cleaning the code a bit, something like this looks more elegant to me : function result = alexfact2(n) if n &lt; 0 || mod(n,1) ~= 0 error('Choose n properly!') end switch n case {0,1} result = 1 ; otherwise result = n * alexfact2(n-1) ; end * I joined the error if statements because the user will be able to know the issue easily when calling this function, and it is a lot easier to read less lines of codes if you have to look into it. * I used another more standard test for an integer value (the mod(n,1) is the modulus of n by 1, and is 0 if n has an integer value). * I also used that clear case distinction function of matlab (plus this will let you learn (maybe?) said function). * And you did not need the 'result = 0' line because it is overwritten in all cases, and would lead to x! = 0 if used, which never happens. * Oh and you should put 4 blank spaces before posting your code here so that it shows up nicely!
I'm still an undergrad student, never dealt with nueral networks
I'm an undergrad (BS) student myself. I -with a friend- managed to control a lego nxt robot with a webcam to follow a mountain dew bottle. I'll show you the video and try to dig up the code after classes. I have a class now and I'll have classes till 5 (it's 9:35 now)
I think the polyfit and val might work for what I need, I'll give it a shot and see if it works. Thanks so much!
From my experience it shouldn't be your first choice for realtime (sometimes more than 2 seconds of delay for a good computer). What you could do is not process every frame to keep up the frame rate, provided the object you are tracking won't escape your FOV in a single frame. About having more than one camera, I haven't tried that, what I've done is locate an object on the ground (get its lat and long) from a camera mounted on a UAV.
What I've tried are color segmentation and SURF features. Not viable for realtime really, color segmentation can work fast enough on small images
One more thing you'll need for that is to calibrate your cameras, which can be a headache. Calibrating the cameras will help u inferr geometrical measurements from your images
I'm a little confused... the trapezoidal rule is for calculating integrals, there are no polynomials in that. except of order 1 maybe (ie the top line of the trapezoid which is of the type y(x) = a*x + b...) So what are you trying to do ? that's what precise means ;)
I'll ask someone down in the lab and get back to you, maybe I'll ask them to Eli5
it's counting the brightness of green fluorescent protein in the cells &amp; labeling which ones are the daughter cells (d1 = older, d2 = younger cells with less damage).
Tried taking it to LAB color space? Will leave with only brightness. Then you can maybe count with a threshold? Edit: using only the L channel will leave u with brightness
Sorry you feel that way, first time on reddit thought I might try this out. You suggest I take it down?